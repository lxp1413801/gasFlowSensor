

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Mon Nov 26 23:38:43 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16F1575
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	stringtext4,global,class=STRCODE,delta=2
    10                           	psect	stringtext5,global,class=STRCODE,delta=2
    11                           	psect	cinit,global,class=CODE,merge=1,delta=2
    12                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	intentry,global,class=CODE,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	dabs	1,0x620,32
    48                           	dabs	1,0x5A0,80
    49                           	dabs	1,0x540,48
    50                           	dabs	1,0x2340,0,__bEusartRxBuffer
    51                           	dabs	1,0x7E,2
    52  0000                     
    53                           ; Version 1.42
    54                           ; Generated 13/04/2017 GMT
    55                           ; 
    56                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    57                           ; All rights reserved.
    58                           ; 
    59                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    60                           ; 
    61                           ; Redistribution and use in source and binary forms, with or without modification, are
    62                           ; permitted provided that the following conditions are met:
    63                           ; 
    64                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    65                           ;        conditions and the following disclaimer.
    66                           ; 
    67                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    68                           ;        of conditions and the following disclaimer in the documentation and/or other
    69                           ;        materials provided with the distribution.
    70                           ; 
    71                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    72                           ;        software without specific prior written permission.
    73                           ; 
    74                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    75                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    76                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    77                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    78                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    79                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    80                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    81                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    82                           ; 
    83                           ; 
    84                           ; Code-generator required, PIC16F1575 Definitions
    85                           ; 
    86                           ; SFR Addresses
    87  0000                     	;# 
    88  0001                     	;# 
    89  0002                     	;# 
    90  0003                     	;# 
    91  0004                     	;# 
    92  0005                     	;# 
    93  0006                     	;# 
    94  0007                     	;# 
    95  0008                     	;# 
    96  0009                     	;# 
    97  000A                     	;# 
    98  000B                     	;# 
    99  000C                     	;# 
   100  000E                     	;# 
   101  0011                     	;# 
   102  0012                     	;# 
   103  0013                     	;# 
   104  0015                     	;# 
   105  0016                     	;# 
   106  0016                     	;# 
   107  0017                     	;# 
   108  0018                     	;# 
   109  0019                     	;# 
   110  001A                     	;# 
   111  001B                     	;# 
   112  001C                     	;# 
   113  008C                     	;# 
   114  008E                     	;# 
   115  0091                     	;# 
   116  0092                     	;# 
   117  0093                     	;# 
   118  0095                     	;# 
   119  0096                     	;# 
   120  0097                     	;# 
   121  0098                     	;# 
   122  0099                     	;# 
   123  009A                     	;# 
   124  009B                     	;# 
   125  009B                     	;# 
   126  009C                     	;# 
   127  009D                     	;# 
   128  009E                     	;# 
   129  009F                     	;# 
   130  010C                     	;# 
   131  010E                     	;# 
   132  0111                     	;# 
   133  0112                     	;# 
   134  0113                     	;# 
   135  0114                     	;# 
   136  0115                     	;# 
   137  0116                     	;# 
   138  0117                     	;# 
   139  0118                     	;# 
   140  0119                     	;# 
   141  018C                     	;# 
   142  018E                     	;# 
   143  0191                     	;# 
   144  0191                     	;# 
   145  0192                     	;# 
   146  0193                     	;# 
   147  0193                     	;# 
   148  0194                     	;# 
   149  0195                     	;# 
   150  0196                     	;# 
   151  0197                     	;# 
   152  0199                     	;# 
   153  019A                     	;# 
   154  019B                     	;# 
   155  019B                     	;# 
   156  019C                     	;# 
   157  019D                     	;# 
   158  019E                     	;# 
   159  019F                     	;# 
   160  020C                     	;# 
   161  020E                     	;# 
   162  028C                     	;# 
   163  028E                     	;# 
   164  030C                     	;# 
   165  030E                     	;# 
   166  038C                     	;# 
   167  038E                     	;# 
   168  0391                     	;# 
   169  0392                     	;# 
   170  0393                     	;# 
   171  0397                     	;# 
   172  0398                     	;# 
   173  0399                     	;# 
   174  0691                     	;# 
   175  0692                     	;# 
   176  0693                     	;# 
   177  0694                     	;# 
   178  0695                     	;# 
   179  0D8E                     	;# 
   180  0D8F                     	;# 
   181  0D90                     	;# 
   182  0D91                     	;# 
   183  0D91                     	;# 
   184  0D92                     	;# 
   185  0D93                     	;# 
   186  0D93                     	;# 
   187  0D94                     	;# 
   188  0D95                     	;# 
   189  0D95                     	;# 
   190  0D96                     	;# 
   191  0D97                     	;# 
   192  0D97                     	;# 
   193  0D98                     	;# 
   194  0D99                     	;# 
   195  0D99                     	;# 
   196  0D9A                     	;# 
   197  0D9B                     	;# 
   198  0D9C                     	;# 
   199  0D9C                     	;# 
   200  0D9D                     	;# 
   201  0D9D                     	;# 
   202  0D9E                     	;# 
   203  0D9F                     	;# 
   204  0DA0                     	;# 
   205  0DA1                     	;# 
   206  0DA1                     	;# 
   207  0DA2                     	;# 
   208  0DA3                     	;# 
   209  0DA3                     	;# 
   210  0DA4                     	;# 
   211  0DA5                     	;# 
   212  0DA5                     	;# 
   213  0DA6                     	;# 
   214  0DA7                     	;# 
   215  0DA7                     	;# 
   216  0DA8                     	;# 
   217  0DA9                     	;# 
   218  0DA9                     	;# 
   219  0DAA                     	;# 
   220  0DAB                     	;# 
   221  0DAC                     	;# 
   222  0DAC                     	;# 
   223  0DAD                     	;# 
   224  0DAD                     	;# 
   225  0DAE                     	;# 
   226  0DAF                     	;# 
   227  0DB0                     	;# 
   228  0DB1                     	;# 
   229  0DB1                     	;# 
   230  0DB2                     	;# 
   231  0DB3                     	;# 
   232  0DB3                     	;# 
   233  0DB4                     	;# 
   234  0DB5                     	;# 
   235  0DB5                     	;# 
   236  0DB6                     	;# 
   237  0DB7                     	;# 
   238  0DB7                     	;# 
   239  0DB8                     	;# 
   240  0DB9                     	;# 
   241  0DB9                     	;# 
   242  0DBA                     	;# 
   243  0DBB                     	;# 
   244  0DBC                     	;# 
   245  0DBC                     	;# 
   246  0DBD                     	;# 
   247  0DBD                     	;# 
   248  0DBE                     	;# 
   249  0DBF                     	;# 
   250  0DC0                     	;# 
   251  0DC1                     	;# 
   252  0DC1                     	;# 
   253  0DC2                     	;# 
   254  0DC3                     	;# 
   255  0DC3                     	;# 
   256  0DC4                     	;# 
   257  0DC5                     	;# 
   258  0DC5                     	;# 
   259  0DC6                     	;# 
   260  0DC7                     	;# 
   261  0DC7                     	;# 
   262  0DC8                     	;# 
   263  0DC9                     	;# 
   264  0DC9                     	;# 
   265  0DCA                     	;# 
   266  0DCB                     	;# 
   267  0DCC                     	;# 
   268  0DCC                     	;# 
   269  0DCD                     	;# 
   270  0DCD                     	;# 
   271  0DCE                     	;# 
   272  0DCF                     	;# 
   273  0DD0                     	;# 
   274  0E0F                     	;# 
   275  0E10                     	;# 
   276  0E11                     	;# 
   277  0E12                     	;# 
   278  0E13                     	;# 
   279  0E14                     	;# 
   280  0E15                     	;# 
   281  0E16                     	;# 
   282  0E17                     	;# 
   283  0E90                     	;# 
   284  0E91                     	;# 
   285  0E92                     	;# 
   286  0E94                     	;# 
   287  0E95                     	;# 
   288  0EA0                     	;# 
   289  0EA1                     	;# 
   290  0EA2                     	;# 
   291  0EA3                     	;# 
   292  0EA4                     	;# 
   293  0EA5                     	;# 
   294  0FE4                     	;# 
   295  0FE5                     	;# 
   296  0FE6                     	;# 
   297  0FE7                     	;# 
   298  0FE8                     	;# 
   299  0FE8                     	;# 
   300  0FE9                     	;# 
   301  0FEA                     	;# 
   302  0FEA                     	;# 
   303  0FEB                     	;# 
   304  0FED                     	;# 
   305  0FEE                     	;# 
   306  0FEE                     	;# 
   307  0FEF                     	;# 
   308  0FFF                     	;# 
   309  0000                     	;# 
   310  0001                     	;# 
   311  0002                     	;# 
   312  0003                     	;# 
   313  0004                     	;# 
   314  0005                     	;# 
   315  0006                     	;# 
   316  0007                     	;# 
   317  0008                     	;# 
   318  0009                     	;# 
   319  000A                     	;# 
   320  000B                     	;# 
   321  000C                     	;# 
   322  000E                     	;# 
   323  0011                     	;# 
   324  0012                     	;# 
   325  0013                     	;# 
   326  0015                     	;# 
   327  0016                     	;# 
   328  0016                     	;# 
   329  0017                     	;# 
   330  0018                     	;# 
   331  0019                     	;# 
   332  001A                     	;# 
   333  001B                     	;# 
   334  001C                     	;# 
   335  008C                     	;# 
   336  008E                     	;# 
   337  0091                     	;# 
   338  0092                     	;# 
   339  0093                     	;# 
   340  0095                     	;# 
   341  0096                     	;# 
   342  0097                     	;# 
   343  0098                     	;# 
   344  0099                     	;# 
   345  009A                     	;# 
   346  009B                     	;# 
   347  009B                     	;# 
   348  009C                     	;# 
   349  009D                     	;# 
   350  009E                     	;# 
   351  009F                     	;# 
   352  010C                     	;# 
   353  010E                     	;# 
   354  0111                     	;# 
   355  0112                     	;# 
   356  0113                     	;# 
   357  0114                     	;# 
   358  0115                     	;# 
   359  0116                     	;# 
   360  0117                     	;# 
   361  0118                     	;# 
   362  0119                     	;# 
   363  018C                     	;# 
   364  018E                     	;# 
   365  0191                     	;# 
   366  0191                     	;# 
   367  0192                     	;# 
   368  0193                     	;# 
   369  0193                     	;# 
   370  0194                     	;# 
   371  0195                     	;# 
   372  0196                     	;# 
   373  0197                     	;# 
   374  0199                     	;# 
   375  019A                     	;# 
   376  019B                     	;# 
   377  019B                     	;# 
   378  019C                     	;# 
   379  019D                     	;# 
   380  019E                     	;# 
   381  019F                     	;# 
   382  020C                     	;# 
   383  020E                     	;# 
   384  028C                     	;# 
   385  028E                     	;# 
   386  030C                     	;# 
   387  030E                     	;# 
   388  038C                     	;# 
   389  038E                     	;# 
   390  0391                     	;# 
   391  0392                     	;# 
   392  0393                     	;# 
   393  0397                     	;# 
   394  0398                     	;# 
   395  0399                     	;# 
   396  0691                     	;# 
   397  0692                     	;# 
   398  0693                     	;# 
   399  0694                     	;# 
   400  0695                     	;# 
   401  0D8E                     	;# 
   402  0D8F                     	;# 
   403  0D90                     	;# 
   404  0D91                     	;# 
   405  0D91                     	;# 
   406  0D92                     	;# 
   407  0D93                     	;# 
   408  0D93                     	;# 
   409  0D94                     	;# 
   410  0D95                     	;# 
   411  0D95                     	;# 
   412  0D96                     	;# 
   413  0D97                     	;# 
   414  0D97                     	;# 
   415  0D98                     	;# 
   416  0D99                     	;# 
   417  0D99                     	;# 
   418  0D9A                     	;# 
   419  0D9B                     	;# 
   420  0D9C                     	;# 
   421  0D9C                     	;# 
   422  0D9D                     	;# 
   423  0D9D                     	;# 
   424  0D9E                     	;# 
   425  0D9F                     	;# 
   426  0DA0                     	;# 
   427  0DA1                     	;# 
   428  0DA1                     	;# 
   429  0DA2                     	;# 
   430  0DA3                     	;# 
   431  0DA3                     	;# 
   432  0DA4                     	;# 
   433  0DA5                     	;# 
   434  0DA5                     	;# 
   435  0DA6                     	;# 
   436  0DA7                     	;# 
   437  0DA7                     	;# 
   438  0DA8                     	;# 
   439  0DA9                     	;# 
   440  0DA9                     	;# 
   441  0DAA                     	;# 
   442  0DAB                     	;# 
   443  0DAC                     	;# 
   444  0DAC                     	;# 
   445  0DAD                     	;# 
   446  0DAD                     	;# 
   447  0DAE                     	;# 
   448  0DAF                     	;# 
   449  0DB0                     	;# 
   450  0DB1                     	;# 
   451  0DB1                     	;# 
   452  0DB2                     	;# 
   453  0DB3                     	;# 
   454  0DB3                     	;# 
   455  0DB4                     	;# 
   456  0DB5                     	;# 
   457  0DB5                     	;# 
   458  0DB6                     	;# 
   459  0DB7                     	;# 
   460  0DB7                     	;# 
   461  0DB8                     	;# 
   462  0DB9                     	;# 
   463  0DB9                     	;# 
   464  0DBA                     	;# 
   465  0DBB                     	;# 
   466  0DBC                     	;# 
   467  0DBC                     	;# 
   468  0DBD                     	;# 
   469  0DBD                     	;# 
   470  0DBE                     	;# 
   471  0DBF                     	;# 
   472  0DC0                     	;# 
   473  0DC1                     	;# 
   474  0DC1                     	;# 
   475  0DC2                     	;# 
   476  0DC3                     	;# 
   477  0DC3                     	;# 
   478  0DC4                     	;# 
   479  0DC5                     	;# 
   480  0DC5                     	;# 
   481  0DC6                     	;# 
   482  0DC7                     	;# 
   483  0DC7                     	;# 
   484  0DC8                     	;# 
   485  0DC9                     	;# 
   486  0DC9                     	;# 
   487  0DCA                     	;# 
   488  0DCB                     	;# 
   489  0DCC                     	;# 
   490  0DCC                     	;# 
   491  0DCD                     	;# 
   492  0DCD                     	;# 
   493  0DCE                     	;# 
   494  0DCF                     	;# 
   495  0DD0                     	;# 
   496  0E0F                     	;# 
   497  0E10                     	;# 
   498  0E11                     	;# 
   499  0E12                     	;# 
   500  0E13                     	;# 
   501  0E14                     	;# 
   502  0E15                     	;# 
   503  0E16                     	;# 
   504  0E17                     	;# 
   505  0E90                     	;# 
   506  0E91                     	;# 
   507  0E92                     	;# 
   508  0E94                     	;# 
   509  0E95                     	;# 
   510  0EA0                     	;# 
   511  0EA1                     	;# 
   512  0EA2                     	;# 
   513  0EA3                     	;# 
   514  0EA4                     	;# 
   515  0EA5                     	;# 
   516  0FE4                     	;# 
   517  0FE5                     	;# 
   518  0FE6                     	;# 
   519  0FE7                     	;# 
   520  0FE8                     	;# 
   521  0FE8                     	;# 
   522  0FE9                     	;# 
   523  0FEA                     	;# 
   524  0FEA                     	;# 
   525  0FEB                     	;# 
   526  0FED                     	;# 
   527  0FEE                     	;# 
   528  0FEE                     	;# 
   529  0FEF                     	;# 
   530  0000                     	;# 
   531  0001                     	;# 
   532  0002                     	;# 
   533  0003                     	;# 
   534  0004                     	;# 
   535  0005                     	;# 
   536  0006                     	;# 
   537  0007                     	;# 
   538  0008                     	;# 
   539  0009                     	;# 
   540  000A                     	;# 
   541  000B                     	;# 
   542  000C                     	;# 
   543  000E                     	;# 
   544  0011                     	;# 
   545  0012                     	;# 
   546  0013                     	;# 
   547  0015                     	;# 
   548  0016                     	;# 
   549  0016                     	;# 
   550  0017                     	;# 
   551  0018                     	;# 
   552  0019                     	;# 
   553  001A                     	;# 
   554  001B                     	;# 
   555  001C                     	;# 
   556  008C                     	;# 
   557  008E                     	;# 
   558  0091                     	;# 
   559  0092                     	;# 
   560  0093                     	;# 
   561  0095                     	;# 
   562  0096                     	;# 
   563  0097                     	;# 
   564  0098                     	;# 
   565  0099                     	;# 
   566  009A                     	;# 
   567  009B                     	;# 
   568  009B                     	;# 
   569  009C                     	;# 
   570  009D                     	;# 
   571  009E                     	;# 
   572  009F                     	;# 
   573  010C                     	;# 
   574  010E                     	;# 
   575  0111                     	;# 
   576  0112                     	;# 
   577  0113                     	;# 
   578  0114                     	;# 
   579  0115                     	;# 
   580  0116                     	;# 
   581  0117                     	;# 
   582  0118                     	;# 
   583  0119                     	;# 
   584  018C                     	;# 
   585  018E                     	;# 
   586  0191                     	;# 
   587  0191                     	;# 
   588  0192                     	;# 
   589  0193                     	;# 
   590  0193                     	;# 
   591  0194                     	;# 
   592  0195                     	;# 
   593  0196                     	;# 
   594  0197                     	;# 
   595  0199                     	;# 
   596  019A                     	;# 
   597  019B                     	;# 
   598  019B                     	;# 
   599  019C                     	;# 
   600  019D                     	;# 
   601  019E                     	;# 
   602  019F                     	;# 
   603  020C                     	;# 
   604  020E                     	;# 
   605  028C                     	;# 
   606  028E                     	;# 
   607  030C                     	;# 
   608  030E                     	;# 
   609  038C                     	;# 
   610  038E                     	;# 
   611  0391                     	;# 
   612  0392                     	;# 
   613  0393                     	;# 
   614  0397                     	;# 
   615  0398                     	;# 
   616  0399                     	;# 
   617  0691                     	;# 
   618  0692                     	;# 
   619  0693                     	;# 
   620  0694                     	;# 
   621  0695                     	;# 
   622  0D8E                     	;# 
   623  0D8F                     	;# 
   624  0D90                     	;# 
   625  0D91                     	;# 
   626  0D91                     	;# 
   627  0D92                     	;# 
   628  0D93                     	;# 
   629  0D93                     	;# 
   630  0D94                     	;# 
   631  0D95                     	;# 
   632  0D95                     	;# 
   633  0D96                     	;# 
   634  0D97                     	;# 
   635  0D97                     	;# 
   636  0D98                     	;# 
   637  0D99                     	;# 
   638  0D99                     	;# 
   639  0D9A                     	;# 
   640  0D9B                     	;# 
   641  0D9C                     	;# 
   642  0D9C                     	;# 
   643  0D9D                     	;# 
   644  0D9D                     	;# 
   645  0D9E                     	;# 
   646  0D9F                     	;# 
   647  0DA0                     	;# 
   648  0DA1                     	;# 
   649  0DA1                     	;# 
   650  0DA2                     	;# 
   651  0DA3                     	;# 
   652  0DA3                     	;# 
   653  0DA4                     	;# 
   654  0DA5                     	;# 
   655  0DA5                     	;# 
   656  0DA6                     	;# 
   657  0DA7                     	;# 
   658  0DA7                     	;# 
   659  0DA8                     	;# 
   660  0DA9                     	;# 
   661  0DA9                     	;# 
   662  0DAA                     	;# 
   663  0DAB                     	;# 
   664  0DAC                     	;# 
   665  0DAC                     	;# 
   666  0DAD                     	;# 
   667  0DAD                     	;# 
   668  0DAE                     	;# 
   669  0DAF                     	;# 
   670  0DB0                     	;# 
   671  0DB1                     	;# 
   672  0DB1                     	;# 
   673  0DB2                     	;# 
   674  0DB3                     	;# 
   675  0DB3                     	;# 
   676  0DB4                     	;# 
   677  0DB5                     	;# 
   678  0DB5                     	;# 
   679  0DB6                     	;# 
   680  0DB7                     	;# 
   681  0DB7                     	;# 
   682  0DB8                     	;# 
   683  0DB9                     	;# 
   684  0DB9                     	;# 
   685  0DBA                     	;# 
   686  0DBB                     	;# 
   687  0DBC                     	;# 
   688  0DBC                     	;# 
   689  0DBD                     	;# 
   690  0DBD                     	;# 
   691  0DBE                     	;# 
   692  0DBF                     	;# 
   693  0DC0                     	;# 
   694  0DC1                     	;# 
   695  0DC1                     	;# 
   696  0DC2                     	;# 
   697  0DC3                     	;# 
   698  0DC3                     	;# 
   699  0DC4                     	;# 
   700  0DC5                     	;# 
   701  0DC5                     	;# 
   702  0DC6                     	;# 
   703  0DC7                     	;# 
   704  0DC7                     	;# 
   705  0DC8                     	;# 
   706  0DC9                     	;# 
   707  0DC9                     	;# 
   708  0DCA                     	;# 
   709  0DCB                     	;# 
   710  0DCC                     	;# 
   711  0DCC                     	;# 
   712  0DCD                     	;# 
   713  0DCD                     	;# 
   714  0DCE                     	;# 
   715  0DCF                     	;# 
   716  0DD0                     	;# 
   717  0E0F                     	;# 
   718  0E10                     	;# 
   719  0E11                     	;# 
   720  0E12                     	;# 
   721  0E13                     	;# 
   722  0E14                     	;# 
   723  0E15                     	;# 
   724  0E16                     	;# 
   725  0E17                     	;# 
   726  0E90                     	;# 
   727  0E91                     	;# 
   728  0E92                     	;# 
   729  0E94                     	;# 
   730  0E95                     	;# 
   731  0EA0                     	;# 
   732  0EA1                     	;# 
   733  0EA2                     	;# 
   734  0EA3                     	;# 
   735  0EA4                     	;# 
   736  0EA5                     	;# 
   737  0FE4                     	;# 
   738  0FE5                     	;# 
   739  0FE6                     	;# 
   740  0FE7                     	;# 
   741  0FE8                     	;# 
   742  0FE8                     	;# 
   743  0FE9                     	;# 
   744  0FEA                     	;# 
   745  0FEA                     	;# 
   746  0FEB                     	;# 
   747  0FED                     	;# 
   748  0FEE                     	;# 
   749  0FEE                     	;# 
   750  0FEF                     	;# 
   751  0000                     	;# 
   752  0001                     	;# 
   753  0002                     	;# 
   754  0003                     	;# 
   755  0004                     	;# 
   756  0005                     	;# 
   757  0006                     	;# 
   758  0007                     	;# 
   759  0008                     	;# 
   760  0009                     	;# 
   761  000A                     	;# 
   762  000B                     	;# 
   763  000C                     	;# 
   764  000E                     	;# 
   765  0011                     	;# 
   766  0012                     	;# 
   767  0013                     	;# 
   768  0015                     	;# 
   769  0016                     	;# 
   770  0016                     	;# 
   771  0017                     	;# 
   772  0018                     	;# 
   773  0019                     	;# 
   774  001A                     	;# 
   775  001B                     	;# 
   776  001C                     	;# 
   777  008C                     	;# 
   778  008E                     	;# 
   779  0091                     	;# 
   780  0092                     	;# 
   781  0093                     	;# 
   782  0095                     	;# 
   783  0096                     	;# 
   784  0097                     	;# 
   785  0098                     	;# 
   786  0099                     	;# 
   787  009A                     	;# 
   788  009B                     	;# 
   789  009B                     	;# 
   790  009C                     	;# 
   791  009D                     	;# 
   792  009E                     	;# 
   793  009F                     	;# 
   794  010C                     	;# 
   795  010E                     	;# 
   796  0111                     	;# 
   797  0112                     	;# 
   798  0113                     	;# 
   799  0114                     	;# 
   800  0115                     	;# 
   801  0116                     	;# 
   802  0117                     	;# 
   803  0118                     	;# 
   804  0119                     	;# 
   805  018C                     	;# 
   806  018E                     	;# 
   807  0191                     	;# 
   808  0191                     	;# 
   809  0192                     	;# 
   810  0193                     	;# 
   811  0193                     	;# 
   812  0194                     	;# 
   813  0195                     	;# 
   814  0196                     	;# 
   815  0197                     	;# 
   816  0199                     	;# 
   817  019A                     	;# 
   818  019B                     	;# 
   819  019B                     	;# 
   820  019C                     	;# 
   821  019D                     	;# 
   822  019E                     	;# 
   823  019F                     	;# 
   824  020C                     	;# 
   825  020E                     	;# 
   826  028C                     	;# 
   827  028E                     	;# 
   828  030C                     	;# 
   829  030E                     	;# 
   830  038C                     	;# 
   831  038E                     	;# 
   832  0391                     	;# 
   833  0392                     	;# 
   834  0393                     	;# 
   835  0397                     	;# 
   836  0398                     	;# 
   837  0399                     	;# 
   838  0691                     	;# 
   839  0692                     	;# 
   840  0693                     	;# 
   841  0694                     	;# 
   842  0695                     	;# 
   843  0D8E                     	;# 
   844  0D8F                     	;# 
   845  0D90                     	;# 
   846  0D91                     	;# 
   847  0D91                     	;# 
   848  0D92                     	;# 
   849  0D93                     	;# 
   850  0D93                     	;# 
   851  0D94                     	;# 
   852  0D95                     	;# 
   853  0D95                     	;# 
   854  0D96                     	;# 
   855  0D97                     	;# 
   856  0D97                     	;# 
   857  0D98                     	;# 
   858  0D99                     	;# 
   859  0D99                     	;# 
   860  0D9A                     	;# 
   861  0D9B                     	;# 
   862  0D9C                     	;# 
   863  0D9C                     	;# 
   864  0D9D                     	;# 
   865  0D9D                     	;# 
   866  0D9E                     	;# 
   867  0D9F                     	;# 
   868  0DA0                     	;# 
   869  0DA1                     	;# 
   870  0DA1                     	;# 
   871  0DA2                     	;# 
   872  0DA3                     	;# 
   873  0DA3                     	;# 
   874  0DA4                     	;# 
   875  0DA5                     	;# 
   876  0DA5                     	;# 
   877  0DA6                     	;# 
   878  0DA7                     	;# 
   879  0DA7                     	;# 
   880  0DA8                     	;# 
   881  0DA9                     	;# 
   882  0DA9                     	;# 
   883  0DAA                     	;# 
   884  0DAB                     	;# 
   885  0DAC                     	;# 
   886  0DAC                     	;# 
   887  0DAD                     	;# 
   888  0DAD                     	;# 
   889  0DAE                     	;# 
   890  0DAF                     	;# 
   891  0DB0                     	;# 
   892  0DB1                     	;# 
   893  0DB1                     	;# 
   894  0DB2                     	;# 
   895  0DB3                     	;# 
   896  0DB3                     	;# 
   897  0DB4                     	;# 
   898  0DB5                     	;# 
   899  0DB5                     	;# 
   900  0DB6                     	;# 
   901  0DB7                     	;# 
   902  0DB7                     	;# 
   903  0DB8                     	;# 
   904  0DB9                     	;# 
   905  0DB9                     	;# 
   906  0DBA                     	;# 
   907  0DBB                     	;# 
   908  0DBC                     	;# 
   909  0DBC                     	;# 
   910  0DBD                     	;# 
   911  0DBD                     	;# 
   912  0DBE                     	;# 
   913  0DBF                     	;# 
   914  0DC0                     	;# 
   915  0DC1                     	;# 
   916  0DC1                     	;# 
   917  0DC2                     	;# 
   918  0DC3                     	;# 
   919  0DC3                     	;# 
   920  0DC4                     	;# 
   921  0DC5                     	;# 
   922  0DC5                     	;# 
   923  0DC6                     	;# 
   924  0DC7                     	;# 
   925  0DC7                     	;# 
   926  0DC8                     	;# 
   927  0DC9                     	;# 
   928  0DC9                     	;# 
   929  0DCA                     	;# 
   930  0DCB                     	;# 
   931  0DCC                     	;# 
   932  0DCC                     	;# 
   933  0DCD                     	;# 
   934  0DCD                     	;# 
   935  0DCE                     	;# 
   936  0DCF                     	;# 
   937  0DD0                     	;# 
   938  0E0F                     	;# 
   939  0E10                     	;# 
   940  0E11                     	;# 
   941  0E12                     	;# 
   942  0E13                     	;# 
   943  0E14                     	;# 
   944  0E15                     	;# 
   945  0E16                     	;# 
   946  0E17                     	;# 
   947  0E90                     	;# 
   948  0E91                     	;# 
   949  0E92                     	;# 
   950  0E94                     	;# 
   951  0E95                     	;# 
   952  0EA0                     	;# 
   953  0EA1                     	;# 
   954  0EA2                     	;# 
   955  0EA3                     	;# 
   956  0EA4                     	;# 
   957  0EA5                     	;# 
   958  0FE4                     	;# 
   959  0FE5                     	;# 
   960  0FE6                     	;# 
   961  0FE7                     	;# 
   962  0FE8                     	;# 
   963  0FE8                     	;# 
   964  0FE9                     	;# 
   965  0FEA                     	;# 
   966  0FEA                     	;# 
   967  0FEB                     	;# 
   968  0FED                     	;# 
   969  0FEE                     	;# 
   970  0FEE                     	;# 
   971  0FEF                     	;# 
   972  0FFF                     	;# 
   973  0000                     	;# 
   974  0001                     	;# 
   975  0002                     	;# 
   976  0003                     	;# 
   977  0004                     	;# 
   978  0005                     	;# 
   979  0006                     	;# 
   980  0007                     	;# 
   981  0008                     	;# 
   982  0009                     	;# 
   983  000A                     	;# 
   984  000B                     	;# 
   985  000C                     	;# 
   986  000E                     	;# 
   987  0011                     	;# 
   988  0012                     	;# 
   989  0013                     	;# 
   990  0015                     	;# 
   991  0016                     	;# 
   992  0016                     	;# 
   993  0017                     	;# 
   994  0018                     	;# 
   995  0019                     	;# 
   996  001A                     	;# 
   997  001B                     	;# 
   998  001C                     	;# 
   999  008C                     	;# 
  1000  008E                     	;# 
  1001  0091                     	;# 
  1002  0092                     	;# 
  1003  0093                     	;# 
  1004  0095                     	;# 
  1005  0096                     	;# 
  1006  0097                     	;# 
  1007  0098                     	;# 
  1008  0099                     	;# 
  1009  009A                     	;# 
  1010  009B                     	;# 
  1011  009B                     	;# 
  1012  009C                     	;# 
  1013  009D                     	;# 
  1014  009E                     	;# 
  1015  009F                     	;# 
  1016  010C                     	;# 
  1017  010E                     	;# 
  1018  0111                     	;# 
  1019  0112                     	;# 
  1020  0113                     	;# 
  1021  0114                     	;# 
  1022  0115                     	;# 
  1023  0116                     	;# 
  1024  0117                     	;# 
  1025  0118                     	;# 
  1026  0119                     	;# 
  1027  018C                     	;# 
  1028  018E                     	;# 
  1029  0191                     	;# 
  1030  0191                     	;# 
  1031  0192                     	;# 
  1032  0193                     	;# 
  1033  0193                     	;# 
  1034  0194                     	;# 
  1035  0195                     	;# 
  1036  0196                     	;# 
  1037  0197                     	;# 
  1038  0199                     	;# 
  1039  019A                     	;# 
  1040  019B                     	;# 
  1041  019B                     	;# 
  1042  019C                     	;# 
  1043  019D                     	;# 
  1044  019E                     	;# 
  1045  019F                     	;# 
  1046  020C                     	;# 
  1047  020E                     	;# 
  1048  028C                     	;# 
  1049  028E                     	;# 
  1050  030C                     	;# 
  1051  030E                     	;# 
  1052  038C                     	;# 
  1053  038E                     	;# 
  1054  0391                     	;# 
  1055  0392                     	;# 
  1056  0393                     	;# 
  1057  0397                     	;# 
  1058  0398                     	;# 
  1059  0399                     	;# 
  1060  0691                     	;# 
  1061  0692                     	;# 
  1062  0693                     	;# 
  1063  0694                     	;# 
  1064  0695                     	;# 
  1065  0D8E                     	;# 
  1066  0D8F                     	;# 
  1067  0D90                     	;# 
  1068  0D91                     	;# 
  1069  0D91                     	;# 
  1070  0D92                     	;# 
  1071  0D93                     	;# 
  1072  0D93                     	;# 
  1073  0D94                     	;# 
  1074  0D95                     	;# 
  1075  0D95                     	;# 
  1076  0D96                     	;# 
  1077  0D97                     	;# 
  1078  0D97                     	;# 
  1079  0D98                     	;# 
  1080  0D99                     	;# 
  1081  0D99                     	;# 
  1082  0D9A                     	;# 
  1083  0D9B                     	;# 
  1084  0D9C                     	;# 
  1085  0D9C                     	;# 
  1086  0D9D                     	;# 
  1087  0D9D                     	;# 
  1088  0D9E                     	;# 
  1089  0D9F                     	;# 
  1090  0DA0                     	;# 
  1091  0DA1                     	;# 
  1092  0DA1                     	;# 
  1093  0DA2                     	;# 
  1094  0DA3                     	;# 
  1095  0DA3                     	;# 
  1096  0DA4                     	;# 
  1097  0DA5                     	;# 
  1098  0DA5                     	;# 
  1099  0DA6                     	;# 
  1100  0DA7                     	;# 
  1101  0DA7                     	;# 
  1102  0DA8                     	;# 
  1103  0DA9                     	;# 
  1104  0DA9                     	;# 
  1105  0DAA                     	;# 
  1106  0DAB                     	;# 
  1107  0DAC                     	;# 
  1108  0DAC                     	;# 
  1109  0DAD                     	;# 
  1110  0DAD                     	;# 
  1111  0DAE                     	;# 
  1112  0DAF                     	;# 
  1113  0DB0                     	;# 
  1114  0DB1                     	;# 
  1115  0DB1                     	;# 
  1116  0DB2                     	;# 
  1117  0DB3                     	;# 
  1118  0DB3                     	;# 
  1119  0DB4                     	;# 
  1120  0DB5                     	;# 
  1121  0DB5                     	;# 
  1122  0DB6                     	;# 
  1123  0DB7                     	;# 
  1124  0DB7                     	;# 
  1125  0DB8                     	;# 
  1126  0DB9                     	;# 
  1127  0DB9                     	;# 
  1128  0DBA                     	;# 
  1129  0DBB                     	;# 
  1130  0DBC                     	;# 
  1131  0DBC                     	;# 
  1132  0DBD                     	;# 
  1133  0DBD                     	;# 
  1134  0DBE                     	;# 
  1135  0DBF                     	;# 
  1136  0DC0                     	;# 
  1137  0DC1                     	;# 
  1138  0DC1                     	;# 
  1139  0DC2                     	;# 
  1140  0DC3                     	;# 
  1141  0DC3                     	;# 
  1142  0DC4                     	;# 
  1143  0DC5                     	;# 
  1144  0DC5                     	;# 
  1145  0DC6                     	;# 
  1146  0DC7                     	;# 
  1147  0DC7                     	;# 
  1148  0DC8                     	;# 
  1149  0DC9                     	;# 
  1150  0DC9                     	;# 
  1151  0DCA                     	;# 
  1152  0DCB                     	;# 
  1153  0DCC                     	;# 
  1154  0DCC                     	;# 
  1155  0DCD                     	;# 
  1156  0DCD                     	;# 
  1157  0DCE                     	;# 
  1158  0DCF                     	;# 
  1159  0DD0                     	;# 
  1160  0E0F                     	;# 
  1161  0E10                     	;# 
  1162  0E11                     	;# 
  1163  0E12                     	;# 
  1164  0E13                     	;# 
  1165  0E14                     	;# 
  1166  0E15                     	;# 
  1167  0E16                     	;# 
  1168  0E17                     	;# 
  1169  0E90                     	;# 
  1170  0E91                     	;# 
  1171  0E92                     	;# 
  1172  0E94                     	;# 
  1173  0E95                     	;# 
  1174  0EA0                     	;# 
  1175  0EA1                     	;# 
  1176  0EA2                     	;# 
  1177  0EA3                     	;# 
  1178  0EA4                     	;# 
  1179  0EA5                     	;# 
  1180  0FE4                     	;# 
  1181  0FE5                     	;# 
  1182  0FE6                     	;# 
  1183  0FE7                     	;# 
  1184  0FE8                     	;# 
  1185  0FE8                     	;# 
  1186  0FE9                     	;# 
  1187  0FEA                     	;# 
  1188  0FEA                     	;# 
  1189  0FEB                     	;# 
  1190  0FED                     	;# 
  1191  0FEE                     	;# 
  1192  0FEE                     	;# 
  1193  0FEF                     	;# 
  1194  0000                     	;# 
  1195  0001                     	;# 
  1196  0002                     	;# 
  1197  0003                     	;# 
  1198  0004                     	;# 
  1199  0005                     	;# 
  1200  0006                     	;# 
  1201  0007                     	;# 
  1202  0008                     	;# 
  1203  0009                     	;# 
  1204  000A                     	;# 
  1205  000B                     	;# 
  1206  000C                     	;# 
  1207  000E                     	;# 
  1208  0011                     	;# 
  1209  0012                     	;# 
  1210  0013                     	;# 
  1211  0015                     	;# 
  1212  0016                     	;# 
  1213  0016                     	;# 
  1214  0017                     	;# 
  1215  0018                     	;# 
  1216  0019                     	;# 
  1217  001A                     	;# 
  1218  001B                     	;# 
  1219  001C                     	;# 
  1220  008C                     	;# 
  1221  008E                     	;# 
  1222  0091                     	;# 
  1223  0092                     	;# 
  1224  0093                     	;# 
  1225  0095                     	;# 
  1226  0096                     	;# 
  1227  0097                     	;# 
  1228  0098                     	;# 
  1229  0099                     	;# 
  1230  009A                     	;# 
  1231  009B                     	;# 
  1232  009B                     	;# 
  1233  009C                     	;# 
  1234  009D                     	;# 
  1235  009E                     	;# 
  1236  009F                     	;# 
  1237  010C                     	;# 
  1238  010E                     	;# 
  1239  0111                     	;# 
  1240  0112                     	;# 
  1241  0113                     	;# 
  1242  0114                     	;# 
  1243  0115                     	;# 
  1244  0116                     	;# 
  1245  0117                     	;# 
  1246  0118                     	;# 
  1247  0119                     	;# 
  1248  018C                     	;# 
  1249  018E                     	;# 
  1250  0191                     	;# 
  1251  0191                     	;# 
  1252  0192                     	;# 
  1253  0193                     	;# 
  1254  0193                     	;# 
  1255  0194                     	;# 
  1256  0195                     	;# 
  1257  0196                     	;# 
  1258  0197                     	;# 
  1259  0199                     	;# 
  1260  019A                     	;# 
  1261  019B                     	;# 
  1262  019B                     	;# 
  1263  019C                     	;# 
  1264  019D                     	;# 
  1265  019E                     	;# 
  1266  019F                     	;# 
  1267  020C                     	;# 
  1268  020E                     	;# 
  1269  028C                     	;# 
  1270  028E                     	;# 
  1271  030C                     	;# 
  1272  030E                     	;# 
  1273  038C                     	;# 
  1274  038E                     	;# 
  1275  0391                     	;# 
  1276  0392                     	;# 
  1277  0393                     	;# 
  1278  0397                     	;# 
  1279  0398                     	;# 
  1280  0399                     	;# 
  1281  0691                     	;# 
  1282  0692                     	;# 
  1283  0693                     	;# 
  1284  0694                     	;# 
  1285  0695                     	;# 
  1286  0D8E                     	;# 
  1287  0D8F                     	;# 
  1288  0D90                     	;# 
  1289  0D91                     	;# 
  1290  0D91                     	;# 
  1291  0D92                     	;# 
  1292  0D93                     	;# 
  1293  0D93                     	;# 
  1294  0D94                     	;# 
  1295  0D95                     	;# 
  1296  0D95                     	;# 
  1297  0D96                     	;# 
  1298  0D97                     	;# 
  1299  0D97                     	;# 
  1300  0D98                     	;# 
  1301  0D99                     	;# 
  1302  0D99                     	;# 
  1303  0D9A                     	;# 
  1304  0D9B                     	;# 
  1305  0D9C                     	;# 
  1306  0D9C                     	;# 
  1307  0D9D                     	;# 
  1308  0D9D                     	;# 
  1309  0D9E                     	;# 
  1310  0D9F                     	;# 
  1311  0DA0                     	;# 
  1312  0DA1                     	;# 
  1313  0DA1                     	;# 
  1314  0DA2                     	;# 
  1315  0DA3                     	;# 
  1316  0DA3                     	;# 
  1317  0DA4                     	;# 
  1318  0DA5                     	;# 
  1319  0DA5                     	;# 
  1320  0DA6                     	;# 
  1321  0DA7                     	;# 
  1322  0DA7                     	;# 
  1323  0DA8                     	;# 
  1324  0DA9                     	;# 
  1325  0DA9                     	;# 
  1326  0DAA                     	;# 
  1327  0DAB                     	;# 
  1328  0DAC                     	;# 
  1329  0DAC                     	;# 
  1330  0DAD                     	;# 
  1331  0DAD                     	;# 
  1332  0DAE                     	;# 
  1333  0DAF                     	;# 
  1334  0DB0                     	;# 
  1335  0DB1                     	;# 
  1336  0DB1                     	;# 
  1337  0DB2                     	;# 
  1338  0DB3                     	;# 
  1339  0DB3                     	;# 
  1340  0DB4                     	;# 
  1341  0DB5                     	;# 
  1342  0DB5                     	;# 
  1343  0DB6                     	;# 
  1344  0DB7                     	;# 
  1345  0DB7                     	;# 
  1346  0DB8                     	;# 
  1347  0DB9                     	;# 
  1348  0DB9                     	;# 
  1349  0DBA                     	;# 
  1350  0DBB                     	;# 
  1351  0DBC                     	;# 
  1352  0DBC                     	;# 
  1353  0DBD                     	;# 
  1354  0DBD                     	;# 
  1355  0DBE                     	;# 
  1356  0DBF                     	;# 
  1357  0DC0                     	;# 
  1358  0DC1                     	;# 
  1359  0DC1                     	;# 
  1360  0DC2                     	;# 
  1361  0DC3                     	;# 
  1362  0DC3                     	;# 
  1363  0DC4                     	;# 
  1364  0DC5                     	;# 
  1365  0DC5                     	;# 
  1366  0DC6                     	;# 
  1367  0DC7                     	;# 
  1368  0DC7                     	;# 
  1369  0DC8                     	;# 
  1370  0DC9                     	;# 
  1371  0DC9                     	;# 
  1372  0DCA                     	;# 
  1373  0DCB                     	;# 
  1374  0DCC                     	;# 
  1375  0DCC                     	;# 
  1376  0DCD                     	;# 
  1377  0DCD                     	;# 
  1378  0DCE                     	;# 
  1379  0DCF                     	;# 
  1380  0DD0                     	;# 
  1381  0E0F                     	;# 
  1382  0E10                     	;# 
  1383  0E11                     	;# 
  1384  0E12                     	;# 
  1385  0E13                     	;# 
  1386  0E14                     	;# 
  1387  0E15                     	;# 
  1388  0E16                     	;# 
  1389  0E17                     	;# 
  1390  0E90                     	;# 
  1391  0E91                     	;# 
  1392  0E92                     	;# 
  1393  0E94                     	;# 
  1394  0E95                     	;# 
  1395  0EA0                     	;# 
  1396  0EA1                     	;# 
  1397  0EA2                     	;# 
  1398  0EA3                     	;# 
  1399  0EA4                     	;# 
  1400  0EA5                     	;# 
  1401  0FE4                     	;# 
  1402  0FE5                     	;# 
  1403  0FE6                     	;# 
  1404  0FE7                     	;# 
  1405  0FE8                     	;# 
  1406  0FE8                     	;# 
  1407  0FE9                     	;# 
  1408  0FEA                     	;# 
  1409  0FEA                     	;# 
  1410  0FEB                     	;# 
  1411  0FED                     	;# 
  1412  0FEE                     	;# 
  1413  0FEE                     	;# 
  1414  0FEF                     	;# 
  1415  0000                     	;# 
  1416  0001                     	;# 
  1417  0002                     	;# 
  1418  0003                     	;# 
  1419  0004                     	;# 
  1420  0005                     	;# 
  1421  0006                     	;# 
  1422  0007                     	;# 
  1423  0008                     	;# 
  1424  0009                     	;# 
  1425  000A                     	;# 
  1426  000B                     	;# 
  1427  000C                     	;# 
  1428  000E                     	;# 
  1429  0011                     	;# 
  1430  0012                     	;# 
  1431  0013                     	;# 
  1432  0015                     	;# 
  1433  0016                     	;# 
  1434  0016                     	;# 
  1435  0017                     	;# 
  1436  0018                     	;# 
  1437  0019                     	;# 
  1438  001A                     	;# 
  1439  001B                     	;# 
  1440  001C                     	;# 
  1441  008C                     	;# 
  1442  008E                     	;# 
  1443  0091                     	;# 
  1444  0092                     	;# 
  1445  0093                     	;# 
  1446  0095                     	;# 
  1447  0096                     	;# 
  1448  0097                     	;# 
  1449  0098                     	;# 
  1450  0099                     	;# 
  1451  009A                     	;# 
  1452  009B                     	;# 
  1453  009B                     	;# 
  1454  009C                     	;# 
  1455  009D                     	;# 
  1456  009E                     	;# 
  1457  009F                     	;# 
  1458  010C                     	;# 
  1459  010E                     	;# 
  1460  0111                     	;# 
  1461  0112                     	;# 
  1462  0113                     	;# 
  1463  0114                     	;# 
  1464  0115                     	;# 
  1465  0116                     	;# 
  1466  0117                     	;# 
  1467  0118                     	;# 
  1468  0119                     	;# 
  1469  018C                     	;# 
  1470  018E                     	;# 
  1471  0191                     	;# 
  1472  0191                     	;# 
  1473  0192                     	;# 
  1474  0193                     	;# 
  1475  0193                     	;# 
  1476  0194                     	;# 
  1477  0195                     	;# 
  1478  0196                     	;# 
  1479  0197                     	;# 
  1480  0199                     	;# 
  1481  019A                     	;# 
  1482  019B                     	;# 
  1483  019B                     	;# 
  1484  019C                     	;# 
  1485  019D                     	;# 
  1486  019E                     	;# 
  1487  019F                     	;# 
  1488  020C                     	;# 
  1489  020E                     	;# 
  1490  028C                     	;# 
  1491  028E                     	;# 
  1492  030C                     	;# 
  1493  030E                     	;# 
  1494  038C                     	;# 
  1495  038E                     	;# 
  1496  0391                     	;# 
  1497  0392                     	;# 
  1498  0393                     	;# 
  1499  0397                     	;# 
  1500  0398                     	;# 
  1501  0399                     	;# 
  1502  0691                     	;# 
  1503  0692                     	;# 
  1504  0693                     	;# 
  1505  0694                     	;# 
  1506  0695                     	;# 
  1507  0D8E                     	;# 
  1508  0D8F                     	;# 
  1509  0D90                     	;# 
  1510  0D91                     	;# 
  1511  0D91                     	;# 
  1512  0D92                     	;# 
  1513  0D93                     	;# 
  1514  0D93                     	;# 
  1515  0D94                     	;# 
  1516  0D95                     	;# 
  1517  0D95                     	;# 
  1518  0D96                     	;# 
  1519  0D97                     	;# 
  1520  0D97                     	;# 
  1521  0D98                     	;# 
  1522  0D99                     	;# 
  1523  0D99                     	;# 
  1524  0D9A                     	;# 
  1525  0D9B                     	;# 
  1526  0D9C                     	;# 
  1527  0D9C                     	;# 
  1528  0D9D                     	;# 
  1529  0D9D                     	;# 
  1530  0D9E                     	;# 
  1531  0D9F                     	;# 
  1532  0DA0                     	;# 
  1533  0DA1                     	;# 
  1534  0DA1                     	;# 
  1535  0DA2                     	;# 
  1536  0DA3                     	;# 
  1537  0DA3                     	;# 
  1538  0DA4                     	;# 
  1539  0DA5                     	;# 
  1540  0DA5                     	;# 
  1541  0DA6                     	;# 
  1542  0DA7                     	;# 
  1543  0DA7                     	;# 
  1544  0DA8                     	;# 
  1545  0DA9                     	;# 
  1546  0DA9                     	;# 
  1547  0DAA                     	;# 
  1548  0DAB                     	;# 
  1549  0DAC                     	;# 
  1550  0DAC                     	;# 
  1551  0DAD                     	;# 
  1552  0DAD                     	;# 
  1553  0DAE                     	;# 
  1554  0DAF                     	;# 
  1555  0DB0                     	;# 
  1556  0DB1                     	;# 
  1557  0DB1                     	;# 
  1558  0DB2                     	;# 
  1559  0DB3                     	;# 
  1560  0DB3                     	;# 
  1561  0DB4                     	;# 
  1562  0DB5                     	;# 
  1563  0DB5                     	;# 
  1564  0DB6                     	;# 
  1565  0DB7                     	;# 
  1566  0DB7                     	;# 
  1567  0DB8                     	;# 
  1568  0DB9                     	;# 
  1569  0DB9                     	;# 
  1570  0DBA                     	;# 
  1571  0DBB                     	;# 
  1572  0DBC                     	;# 
  1573  0DBC                     	;# 
  1574  0DBD                     	;# 
  1575  0DBD                     	;# 
  1576  0DBE                     	;# 
  1577  0DBF                     	;# 
  1578  0DC0                     	;# 
  1579  0DC1                     	;# 
  1580  0DC1                     	;# 
  1581  0DC2                     	;# 
  1582  0DC3                     	;# 
  1583  0DC3                     	;# 
  1584  0DC4                     	;# 
  1585  0DC5                     	;# 
  1586  0DC5                     	;# 
  1587  0DC6                     	;# 
  1588  0DC7                     	;# 
  1589  0DC7                     	;# 
  1590  0DC8                     	;# 
  1591  0DC9                     	;# 
  1592  0DC9                     	;# 
  1593  0DCA                     	;# 
  1594  0DCB                     	;# 
  1595  0DCC                     	;# 
  1596  0DCC                     	;# 
  1597  0DCD                     	;# 
  1598  0DCD                     	;# 
  1599  0DCE                     	;# 
  1600  0DCF                     	;# 
  1601  0DD0                     	;# 
  1602  0E0F                     	;# 
  1603  0E10                     	;# 
  1604  0E11                     	;# 
  1605  0E12                     	;# 
  1606  0E13                     	;# 
  1607  0E14                     	;# 
  1608  0E15                     	;# 
  1609  0E16                     	;# 
  1610  0E17                     	;# 
  1611  0E90                     	;# 
  1612  0E91                     	;# 
  1613  0E92                     	;# 
  1614  0E94                     	;# 
  1615  0E95                     	;# 
  1616  0EA0                     	;# 
  1617  0EA1                     	;# 
  1618  0EA2                     	;# 
  1619  0EA3                     	;# 
  1620  0EA4                     	;# 
  1621  0EA5                     	;# 
  1622  0FE4                     	;# 
  1623  0FE5                     	;# 
  1624  0FE6                     	;# 
  1625  0FE7                     	;# 
  1626  0FE8                     	;# 
  1627  0FE8                     	;# 
  1628  0FE9                     	;# 
  1629  0FEA                     	;# 
  1630  0FEA                     	;# 
  1631  0FEB                     	;# 
  1632  0FED                     	;# 
  1633  0FEE                     	;# 
  1634  0FEE                     	;# 
  1635  0FEF                     	;# 
  1636  0FFF                     	;# 
  1637  0000                     	;# 
  1638  0001                     	;# 
  1639  0002                     	;# 
  1640  0003                     	;# 
  1641  0004                     	;# 
  1642  0005                     	;# 
  1643  0006                     	;# 
  1644  0007                     	;# 
  1645  0008                     	;# 
  1646  0009                     	;# 
  1647  000A                     	;# 
  1648  000B                     	;# 
  1649  000C                     	;# 
  1650  000E                     	;# 
  1651  0011                     	;# 
  1652  0012                     	;# 
  1653  0013                     	;# 
  1654  0015                     	;# 
  1655  0016                     	;# 
  1656  0016                     	;# 
  1657  0017                     	;# 
  1658  0018                     	;# 
  1659  0019                     	;# 
  1660  001A                     	;# 
  1661  001B                     	;# 
  1662  001C                     	;# 
  1663  008C                     	;# 
  1664  008E                     	;# 
  1665  0091                     	;# 
  1666  0092                     	;# 
  1667  0093                     	;# 
  1668  0095                     	;# 
  1669  0096                     	;# 
  1670  0097                     	;# 
  1671  0098                     	;# 
  1672  0099                     	;# 
  1673  009A                     	;# 
  1674  009B                     	;# 
  1675  009B                     	;# 
  1676  009C                     	;# 
  1677  009D                     	;# 
  1678  009E                     	;# 
  1679  009F                     	;# 
  1680  010C                     	;# 
  1681  010E                     	;# 
  1682  0111                     	;# 
  1683  0112                     	;# 
  1684  0113                     	;# 
  1685  0114                     	;# 
  1686  0115                     	;# 
  1687  0116                     	;# 
  1688  0117                     	;# 
  1689  0118                     	;# 
  1690  0119                     	;# 
  1691  018C                     	;# 
  1692  018E                     	;# 
  1693  0191                     	;# 
  1694  0191                     	;# 
  1695  0192                     	;# 
  1696  0193                     	;# 
  1697  0193                     	;# 
  1698  0194                     	;# 
  1699  0195                     	;# 
  1700  0196                     	;# 
  1701  0197                     	;# 
  1702  0199                     	;# 
  1703  019A                     	;# 
  1704  019B                     	;# 
  1705  019B                     	;# 
  1706  019C                     	;# 
  1707  019D                     	;# 
  1708  019E                     	;# 
  1709  019F                     	;# 
  1710  020C                     	;# 
  1711  020E                     	;# 
  1712  028C                     	;# 
  1713  028E                     	;# 
  1714  030C                     	;# 
  1715  030E                     	;# 
  1716  038C                     	;# 
  1717  038E                     	;# 
  1718  0391                     	;# 
  1719  0392                     	;# 
  1720  0393                     	;# 
  1721  0397                     	;# 
  1722  0398                     	;# 
  1723  0399                     	;# 
  1724  0691                     	;# 
  1725  0692                     	;# 
  1726  0693                     	;# 
  1727  0694                     	;# 
  1728  0695                     	;# 
  1729  0D8E                     	;# 
  1730  0D8F                     	;# 
  1731  0D90                     	;# 
  1732  0D91                     	;# 
  1733  0D91                     	;# 
  1734  0D92                     	;# 
  1735  0D93                     	;# 
  1736  0D93                     	;# 
  1737  0D94                     	;# 
  1738  0D95                     	;# 
  1739  0D95                     	;# 
  1740  0D96                     	;# 
  1741  0D97                     	;# 
  1742  0D97                     	;# 
  1743  0D98                     	;# 
  1744  0D99                     	;# 
  1745  0D99                     	;# 
  1746  0D9A                     	;# 
  1747  0D9B                     	;# 
  1748  0D9C                     	;# 
  1749  0D9C                     	;# 
  1750  0D9D                     	;# 
  1751  0D9D                     	;# 
  1752  0D9E                     	;# 
  1753  0D9F                     	;# 
  1754  0DA0                     	;# 
  1755  0DA1                     	;# 
  1756  0DA1                     	;# 
  1757  0DA2                     	;# 
  1758  0DA3                     	;# 
  1759  0DA3                     	;# 
  1760  0DA4                     	;# 
  1761  0DA5                     	;# 
  1762  0DA5                     	;# 
  1763  0DA6                     	;# 
  1764  0DA7                     	;# 
  1765  0DA7                     	;# 
  1766  0DA8                     	;# 
  1767  0DA9                     	;# 
  1768  0DA9                     	;# 
  1769  0DAA                     	;# 
  1770  0DAB                     	;# 
  1771  0DAC                     	;# 
  1772  0DAC                     	;# 
  1773  0DAD                     	;# 
  1774  0DAD                     	;# 
  1775  0DAE                     	;# 
  1776  0DAF                     	;# 
  1777  0DB0                     	;# 
  1778  0DB1                     	;# 
  1779  0DB1                     	;# 
  1780  0DB2                     	;# 
  1781  0DB3                     	;# 
  1782  0DB3                     	;# 
  1783  0DB4                     	;# 
  1784  0DB5                     	;# 
  1785  0DB5                     	;# 
  1786  0DB6                     	;# 
  1787  0DB7                     	;# 
  1788  0DB7                     	;# 
  1789  0DB8                     	;# 
  1790  0DB9                     	;# 
  1791  0DB9                     	;# 
  1792  0DBA                     	;# 
  1793  0DBB                     	;# 
  1794  0DBC                     	;# 
  1795  0DBC                     	;# 
  1796  0DBD                     	;# 
  1797  0DBD                     	;# 
  1798  0DBE                     	;# 
  1799  0DBF                     	;# 
  1800  0DC0                     	;# 
  1801  0DC1                     	;# 
  1802  0DC1                     	;# 
  1803  0DC2                     	;# 
  1804  0DC3                     	;# 
  1805  0DC3                     	;# 
  1806  0DC4                     	;# 
  1807  0DC5                     	;# 
  1808  0DC5                     	;# 
  1809  0DC6                     	;# 
  1810  0DC7                     	;# 
  1811  0DC7                     	;# 
  1812  0DC8                     	;# 
  1813  0DC9                     	;# 
  1814  0DC9                     	;# 
  1815  0DCA                     	;# 
  1816  0DCB                     	;# 
  1817  0DCC                     	;# 
  1818  0DCC                     	;# 
  1819  0DCD                     	;# 
  1820  0DCD                     	;# 
  1821  0DCE                     	;# 
  1822  0DCF                     	;# 
  1823  0DD0                     	;# 
  1824  0E0F                     	;# 
  1825  0E10                     	;# 
  1826  0E11                     	;# 
  1827  0E12                     	;# 
  1828  0E13                     	;# 
  1829  0E14                     	;# 
  1830  0E15                     	;# 
  1831  0E16                     	;# 
  1832  0E17                     	;# 
  1833  0E90                     	;# 
  1834  0E91                     	;# 
  1835  0E92                     	;# 
  1836  0E94                     	;# 
  1837  0E95                     	;# 
  1838  0EA0                     	;# 
  1839  0EA1                     	;# 
  1840  0EA2                     	;# 
  1841  0EA3                     	;# 
  1842  0EA4                     	;# 
  1843  0EA5                     	;# 
  1844  0FE4                     	;# 
  1845  0FE5                     	;# 
  1846  0FE6                     	;# 
  1847  0FE7                     	;# 
  1848  0FE8                     	;# 
  1849  0FE8                     	;# 
  1850  0FE9                     	;# 
  1851  0FEA                     	;# 
  1852  0FEA                     	;# 
  1853  0FEB                     	;# 
  1854  0FED                     	;# 
  1855  0FEE                     	;# 
  1856  0FEE                     	;# 
  1857  0FEF                     	;# 
  1858  0FFF                     	;# 
  1859  0000                     	;# 
  1860  0001                     	;# 
  1861  0002                     	;# 
  1862  0003                     	;# 
  1863  0004                     	;# 
  1864  0005                     	;# 
  1865  0006                     	;# 
  1866  0007                     	;# 
  1867  0008                     	;# 
  1868  0009                     	;# 
  1869  000A                     	;# 
  1870  000B                     	;# 
  1871  000C                     	;# 
  1872  000E                     	;# 
  1873  0011                     	;# 
  1874  0012                     	;# 
  1875  0013                     	;# 
  1876  0015                     	;# 
  1877  0016                     	;# 
  1878  0016                     	;# 
  1879  0017                     	;# 
  1880  0018                     	;# 
  1881  0019                     	;# 
  1882  001A                     	;# 
  1883  001B                     	;# 
  1884  001C                     	;# 
  1885  008C                     	;# 
  1886  008E                     	;# 
  1887  0091                     	;# 
  1888  0092                     	;# 
  1889  0093                     	;# 
  1890  0095                     	;# 
  1891  0096                     	;# 
  1892  0097                     	;# 
  1893  0098                     	;# 
  1894  0099                     	;# 
  1895  009A                     	;# 
  1896  009B                     	;# 
  1897  009B                     	;# 
  1898  009C                     	;# 
  1899  009D                     	;# 
  1900  009E                     	;# 
  1901  009F                     	;# 
  1902  010C                     	;# 
  1903  010E                     	;# 
  1904  0111                     	;# 
  1905  0112                     	;# 
  1906  0113                     	;# 
  1907  0114                     	;# 
  1908  0115                     	;# 
  1909  0116                     	;# 
  1910  0117                     	;# 
  1911  0118                     	;# 
  1912  0119                     	;# 
  1913  018C                     	;# 
  1914  018E                     	;# 
  1915  0191                     	;# 
  1916  0191                     	;# 
  1917  0192                     	;# 
  1918  0193                     	;# 
  1919  0193                     	;# 
  1920  0194                     	;# 
  1921  0195                     	;# 
  1922  0196                     	;# 
  1923  0197                     	;# 
  1924  0199                     	;# 
  1925  019A                     	;# 
  1926  019B                     	;# 
  1927  019B                     	;# 
  1928  019C                     	;# 
  1929  019D                     	;# 
  1930  019E                     	;# 
  1931  019F                     	;# 
  1932  020C                     	;# 
  1933  020E                     	;# 
  1934  028C                     	;# 
  1935  028E                     	;# 
  1936  030C                     	;# 
  1937  030E                     	;# 
  1938  038C                     	;# 
  1939  038E                     	;# 
  1940  0391                     	;# 
  1941  0392                     	;# 
  1942  0393                     	;# 
  1943  0397                     	;# 
  1944  0398                     	;# 
  1945  0399                     	;# 
  1946  0691                     	;# 
  1947  0692                     	;# 
  1948  0693                     	;# 
  1949  0694                     	;# 
  1950  0695                     	;# 
  1951  0D8E                     	;# 
  1952  0D8F                     	;# 
  1953  0D90                     	;# 
  1954  0D91                     	;# 
  1955  0D91                     	;# 
  1956  0D92                     	;# 
  1957  0D93                     	;# 
  1958  0D93                     	;# 
  1959  0D94                     	;# 
  1960  0D95                     	;# 
  1961  0D95                     	;# 
  1962  0D96                     	;# 
  1963  0D97                     	;# 
  1964  0D97                     	;# 
  1965  0D98                     	;# 
  1966  0D99                     	;# 
  1967  0D99                     	;# 
  1968  0D9A                     	;# 
  1969  0D9B                     	;# 
  1970  0D9C                     	;# 
  1971  0D9C                     	;# 
  1972  0D9D                     	;# 
  1973  0D9D                     	;# 
  1974  0D9E                     	;# 
  1975  0D9F                     	;# 
  1976  0DA0                     	;# 
  1977  0DA1                     	;# 
  1978  0DA1                     	;# 
  1979  0DA2                     	;# 
  1980  0DA3                     	;# 
  1981  0DA3                     	;# 
  1982  0DA4                     	;# 
  1983  0DA5                     	;# 
  1984  0DA5                     	;# 
  1985  0DA6                     	;# 
  1986  0DA7                     	;# 
  1987  0DA7                     	;# 
  1988  0DA8                     	;# 
  1989  0DA9                     	;# 
  1990  0DA9                     	;# 
  1991  0DAA                     	;# 
  1992  0DAB                     	;# 
  1993  0DAC                     	;# 
  1994  0DAC                     	;# 
  1995  0DAD                     	;# 
  1996  0DAD                     	;# 
  1997  0DAE                     	;# 
  1998  0DAF                     	;# 
  1999  0DB0                     	;# 
  2000  0DB1                     	;# 
  2001  0DB1                     	;# 
  2002  0DB2                     	;# 
  2003  0DB3                     	;# 
  2004  0DB3                     	;# 
  2005  0DB4                     	;# 
  2006  0DB5                     	;# 
  2007  0DB5                     	;# 
  2008  0DB6                     	;# 
  2009  0DB7                     	;# 
  2010  0DB7                     	;# 
  2011  0DB8                     	;# 
  2012  0DB9                     	;# 
  2013  0DB9                     	;# 
  2014  0DBA                     	;# 
  2015  0DBB                     	;# 
  2016  0DBC                     	;# 
  2017  0DBC                     	;# 
  2018  0DBD                     	;# 
  2019  0DBD                     	;# 
  2020  0DBE                     	;# 
  2021  0DBF                     	;# 
  2022  0DC0                     	;# 
  2023  0DC1                     	;# 
  2024  0DC1                     	;# 
  2025  0DC2                     	;# 
  2026  0DC3                     	;# 
  2027  0DC3                     	;# 
  2028  0DC4                     	;# 
  2029  0DC5                     	;# 
  2030  0DC5                     	;# 
  2031  0DC6                     	;# 
  2032  0DC7                     	;# 
  2033  0DC7                     	;# 
  2034  0DC8                     	;# 
  2035  0DC9                     	;# 
  2036  0DC9                     	;# 
  2037  0DCA                     	;# 
  2038  0DCB                     	;# 
  2039  0DCC                     	;# 
  2040  0DCC                     	;# 
  2041  0DCD                     	;# 
  2042  0DCD                     	;# 
  2043  0DCE                     	;# 
  2044  0DCF                     	;# 
  2045  0DD0                     	;# 
  2046  0E0F                     	;# 
  2047  0E10                     	;# 
  2048  0E11                     	;# 
  2049  0E12                     	;# 
  2050  0E13                     	;# 
  2051  0E14                     	;# 
  2052  0E15                     	;# 
  2053  0E16                     	;# 
  2054  0E17                     	;# 
  2055  0E90                     	;# 
  2056  0E91                     	;# 
  2057  0E92                     	;# 
  2058  0E94                     	;# 
  2059  0E95                     	;# 
  2060  0EA0                     	;# 
  2061  0EA1                     	;# 
  2062  0EA2                     	;# 
  2063  0EA3                     	;# 
  2064  0EA4                     	;# 
  2065  0EA5                     	;# 
  2066  0FE4                     	;# 
  2067  0FE5                     	;# 
  2068  0FE6                     	;# 
  2069  0FE7                     	;# 
  2070  0FE8                     	;# 
  2071  0FE8                     	;# 
  2072  0FE9                     	;# 
  2073  0FEA                     	;# 
  2074  0FEA                     	;# 
  2075  0FEB                     	;# 
  2076  0FED                     	;# 
  2077  0FEE                     	;# 
  2078  0FEE                     	;# 
  2079  0FEF                     	;# 
  2080  0FFF                     	;# 
  2081  0000                     	;# 
  2082  0001                     	;# 
  2083  0002                     	;# 
  2084  0003                     	;# 
  2085  0004                     	;# 
  2086  0005                     	;# 
  2087  0006                     	;# 
  2088  0007                     	;# 
  2089  0008                     	;# 
  2090  0009                     	;# 
  2091  000A                     	;# 
  2092  000B                     	;# 
  2093  000C                     	;# 
  2094  000E                     	;# 
  2095  0011                     	;# 
  2096  0012                     	;# 
  2097  0013                     	;# 
  2098  0015                     	;# 
  2099  0016                     	;# 
  2100  0016                     	;# 
  2101  0017                     	;# 
  2102  0018                     	;# 
  2103  0019                     	;# 
  2104  001A                     	;# 
  2105  001B                     	;# 
  2106  001C                     	;# 
  2107  008C                     	;# 
  2108  008E                     	;# 
  2109  0091                     	;# 
  2110  0092                     	;# 
  2111  0093                     	;# 
  2112  0095                     	;# 
  2113  0096                     	;# 
  2114  0097                     	;# 
  2115  0098                     	;# 
  2116  0099                     	;# 
  2117  009A                     	;# 
  2118  009B                     	;# 
  2119  009B                     	;# 
  2120  009C                     	;# 
  2121  009D                     	;# 
  2122  009E                     	;# 
  2123  009F                     	;# 
  2124  010C                     	;# 
  2125  010E                     	;# 
  2126  0111                     	;# 
  2127  0112                     	;# 
  2128  0113                     	;# 
  2129  0114                     	;# 
  2130  0115                     	;# 
  2131  0116                     	;# 
  2132  0117                     	;# 
  2133  0118                     	;# 
  2134  0119                     	;# 
  2135  018C                     	;# 
  2136  018E                     	;# 
  2137  0191                     	;# 
  2138  0191                     	;# 
  2139  0192                     	;# 
  2140  0193                     	;# 
  2141  0193                     	;# 
  2142  0194                     	;# 
  2143  0195                     	;# 
  2144  0196                     	;# 
  2145  0197                     	;# 
  2146  0199                     	;# 
  2147  019A                     	;# 
  2148  019B                     	;# 
  2149  019B                     	;# 
  2150  019C                     	;# 
  2151  019D                     	;# 
  2152  019E                     	;# 
  2153  019F                     	;# 
  2154  020C                     	;# 
  2155  020E                     	;# 
  2156  028C                     	;# 
  2157  028E                     	;# 
  2158  030C                     	;# 
  2159  030E                     	;# 
  2160  038C                     	;# 
  2161  038E                     	;# 
  2162  0391                     	;# 
  2163  0392                     	;# 
  2164  0393                     	;# 
  2165  0397                     	;# 
  2166  0398                     	;# 
  2167  0399                     	;# 
  2168  0691                     	;# 
  2169  0692                     	;# 
  2170  0693                     	;# 
  2171  0694                     	;# 
  2172  0695                     	;# 
  2173  0D8E                     	;# 
  2174  0D8F                     	;# 
  2175  0D90                     	;# 
  2176  0D91                     	;# 
  2177  0D91                     	;# 
  2178  0D92                     	;# 
  2179  0D93                     	;# 
  2180  0D93                     	;# 
  2181  0D94                     	;# 
  2182  0D95                     	;# 
  2183  0D95                     	;# 
  2184  0D96                     	;# 
  2185  0D97                     	;# 
  2186  0D97                     	;# 
  2187  0D98                     	;# 
  2188  0D99                     	;# 
  2189  0D99                     	;# 
  2190  0D9A                     	;# 
  2191  0D9B                     	;# 
  2192  0D9C                     	;# 
  2193  0D9C                     	;# 
  2194  0D9D                     	;# 
  2195  0D9D                     	;# 
  2196  0D9E                     	;# 
  2197  0D9F                     	;# 
  2198  0DA0                     	;# 
  2199  0DA1                     	;# 
  2200  0DA1                     	;# 
  2201  0DA2                     	;# 
  2202  0DA3                     	;# 
  2203  0DA3                     	;# 
  2204  0DA4                     	;# 
  2205  0DA5                     	;# 
  2206  0DA5                     	;# 
  2207  0DA6                     	;# 
  2208  0DA7                     	;# 
  2209  0DA7                     	;# 
  2210  0DA8                     	;# 
  2211  0DA9                     	;# 
  2212  0DA9                     	;# 
  2213  0DAA                     	;# 
  2214  0DAB                     	;# 
  2215  0DAC                     	;# 
  2216  0DAC                     	;# 
  2217  0DAD                     	;# 
  2218  0DAD                     	;# 
  2219  0DAE                     	;# 
  2220  0DAF                     	;# 
  2221  0DB0                     	;# 
  2222  0DB1                     	;# 
  2223  0DB1                     	;# 
  2224  0DB2                     	;# 
  2225  0DB3                     	;# 
  2226  0DB3                     	;# 
  2227  0DB4                     	;# 
  2228  0DB5                     	;# 
  2229  0DB5                     	;# 
  2230  0DB6                     	;# 
  2231  0DB7                     	;# 
  2232  0DB7                     	;# 
  2233  0DB8                     	;# 
  2234  0DB9                     	;# 
  2235  0DB9                     	;# 
  2236  0DBA                     	;# 
  2237  0DBB                     	;# 
  2238  0DBC                     	;# 
  2239  0DBC                     	;# 
  2240  0DBD                     	;# 
  2241  0DBD                     	;# 
  2242  0DBE                     	;# 
  2243  0DBF                     	;# 
  2244  0DC0                     	;# 
  2245  0DC1                     	;# 
  2246  0DC1                     	;# 
  2247  0DC2                     	;# 
  2248  0DC3                     	;# 
  2249  0DC3                     	;# 
  2250  0DC4                     	;# 
  2251  0DC5                     	;# 
  2252  0DC5                     	;# 
  2253  0DC6                     	;# 
  2254  0DC7                     	;# 
  2255  0DC7                     	;# 
  2256  0DC8                     	;# 
  2257  0DC9                     	;# 
  2258  0DC9                     	;# 
  2259  0DCA                     	;# 
  2260  0DCB                     	;# 
  2261  0DCC                     	;# 
  2262  0DCC                     	;# 
  2263  0DCD                     	;# 
  2264  0DCD                     	;# 
  2265  0DCE                     	;# 
  2266  0DCF                     	;# 
  2267  0DD0                     	;# 
  2268  0E0F                     	;# 
  2269  0E10                     	;# 
  2270  0E11                     	;# 
  2271  0E12                     	;# 
  2272  0E13                     	;# 
  2273  0E14                     	;# 
  2274  0E15                     	;# 
  2275  0E16                     	;# 
  2276  0E17                     	;# 
  2277  0E90                     	;# 
  2278  0E91                     	;# 
  2279  0E92                     	;# 
  2280  0E94                     	;# 
  2281  0E95                     	;# 
  2282  0EA0                     	;# 
  2283  0EA1                     	;# 
  2284  0EA2                     	;# 
  2285  0EA3                     	;# 
  2286  0EA4                     	;# 
  2287  0EA5                     	;# 
  2288  0FE4                     	;# 
  2289  0FE5                     	;# 
  2290  0FE6                     	;# 
  2291  0FE7                     	;# 
  2292  0FE8                     	;# 
  2293  0FE8                     	;# 
  2294  0FE9                     	;# 
  2295  0FEA                     	;# 
  2296  0FEA                     	;# 
  2297  0FEB                     	;# 
  2298  0FED                     	;# 
  2299  0FEE                     	;# 
  2300  0FEE                     	;# 
  2301  0FEF                     	;# 
  2302  0FFF                     	;__bEusartRxBuffer
  2303                           
  2304 ;; Function _TMR2_DefaultInterruptHandler is unused but had its address taken
  2305  0000                     
  2306                           	psect	idataBANK1
  2307  05E4                     __pidataBANK1:	
  2308                           
  2309                           ;initializer for _addrWritedFlash
  2310  05E4  3400               	retlw	0
  2311  05E5  3408               	retlw	8
  2312                           
  2313                           ;initializer for _firstPackage
  2314  05E6  3401               	retlw	1
  2315                           
  2316                           	psect	stringtext1
  2317  0585                     __pstringtext1:	
  2318  0585                     _HexTable:	
  2319  0585  3430               	retlw	48
  2320  0586  3431               	retlw	49
  2321  0587  3432               	retlw	50
  2322  0588  3433               	retlw	51
  2323  0589  3434               	retlw	52
  2324  058A  3435               	retlw	53
  2325  058B  3436               	retlw	54
  2326  058C  3437               	retlw	55
  2327  058D  3438               	retlw	56
  2328  058E  3439               	retlw	57
  2329  058F  3441               	retlw	65
  2330  0590  3442               	retlw	66
  2331  0591  3443               	retlw	67
  2332  0592  3444               	retlw	68
  2333  0593  3445               	retlw	69
  2334  0594  3446               	retlw	70
  2335  0595  3400               	retlw	0
  2336  0596                     __end_of_HexTable:	
  2337  0FFF                     _isRunInBoot	set	4095
  2338                           
  2339                           	psect	nvBANK1
  2340  00BE                     __pnvBANK1:	
  2341  00BE                     _TMR2_InterruptHandler:	
  2342  00BE                     	ds	2
  2343  00C0                     _eusartTxBufferRemaining:	
  2344  00C0                     	ds	1
  2345  001C                     _T2CONbits	set	28
  2346  001A                     _TMR2	set	26
  2347  001B                     _PR2	set	27
  2348  001C                     _T2CON	set	28
  2349  0011                     _PIR1bits	set	17
  2350  000B                     _INTCONbits	set	11
  2351  005F                     _GIE	set	95
  2352  0097                     _WDTCON	set	151
  2353  0098                     _OSCTUNE	set	152
  2354  0099                     _OSCCON	set	153
  2355  0095                     _OPTION_REGbits	set	149
  2356  008E                     _TRISC	set	142
  2357  008C                     _TRISA	set	140
  2358  0091                     _PIE1bits	set	145
  2359  010E                     _LATC	set	270
  2360  010C                     _LATA	set	268
  2361  019E                     _TXSTAbits	set	414
  2362  0196                     _PMCON2	set	406
  2363  0193                     _PMDATL	set	403
  2364  0194                     _PMDATH	set	404
  2365  0195                     _PMCON1bits	set	405
  2366  0192                     _PMADRH	set	402
  2367  0191                     _PMADRL	set	401
  2368  0199                     _RCREG	set	409
  2369  019D                     _RCSTAbits	set	413
  2370  019A                     _TXREG	set	410
  2371  019C                     _SPBRGH	set	412
  2372  019B                     _SPBRGL	set	411
  2373  019E                     _TXSTA	set	414
  2374  019D                     _RCSTA	set	413
  2375  019F                     _BAUDCON	set	415
  2376  018C                     _ANSELA	set	396
  2377  018E                     _ANSELC	set	398
  2378  020E                     _WPUC	set	526
  2379  020C                     _WPUA	set	524
  2380  028E                     _ODCONC	set	654
  2381  028C                     _ODCONA	set	652
  2382  0E15                     _RXPPSbits	set	3605
  2383  0E0F                     _PPSLOCKbits	set	3599
  2384  0E0F                     _PPSLOCK	set	3599
  2385  0EA5                     _RC5PPSbits	set	3749
  2386  0E95                     _RA5PPSbits	set	3733
  2387  0E94                     _RA4PPSbits	set	3732
  2388                           
  2389                           	psect	stringtext2
  2390  054B                     __pstringtext2:	
  2391  054B                     STR_3:	
  2392  054B  3475               	retlw	117	;'u'
  2393  054C  3470               	retlw	112	;'p'
  2394  054D  3464               	retlw	100	;'d'
  2395  054E  3461               	retlw	97	;'a'
  2396  054F  3474               	retlw	116	;'t'
  2397  0550  3465               	retlw	101	;'e'
  2398  0551  3420               	retlw	32	;' '
  2399  0552  3461               	retlw	97	;'a'
  2400  0553  3470               	retlw	112	;'p'
  2401  0554  3470               	retlw	112	;'p'
  2402  0555  3420               	retlw	32	;' '
  2403  0556  3466               	retlw	102	;'f'
  2404  0557  3477               	retlw	119	;'w'
  2405  0558  343F               	retlw	63	;'?'
  2406  0559  3479               	retlw	121	;'y'
  2407  055A  342F               	retlw	47	;'/'
  2408  055B  346E               	retlw	110	;'n'
  2409  055C  340D               	retlw	13
  2410  055D  340A               	retlw	10
  2411  055E  3400               	retlw	0
  2412                           
  2413                           	psect	stringtext3
  2414  055F                     __pstringtext3:	
  2415  055F                     STR_1:	
  2416  055F  3473               	retlw	115	;'s'
  2417  0560  3465               	retlw	101	;'e'
  2418  0561  346E               	retlw	110	;'n'
  2419  0562  3464               	retlw	100	;'d'
  2420  0563  3420               	retlw	32	;' '
  2421  0564  342A               	retlw	42	;'*'
  2422  0565  342E               	retlw	46	;'.'
  2423  0566  3468               	retlw	104	;'h'
  2424  0567  3465               	retlw	101	;'e'
  2425  0568  3478               	retlw	120	;'x'
  2426  0569  3420               	retlw	32	;' '
  2427  056A  3466               	retlw	102	;'f'
  2428  056B  3469               	retlw	105	;'i'
  2429  056C  346C               	retlw	108	;'l'
  2430  056D  3465               	retlw	101	;'e'
  2431  056E  342E               	retlw	46	;'.'
  2432  056F  340D               	retlw	13
  2433  0570  340A               	retlw	10
  2434  0571  3400               	retlw	0
  2435                           
  2436                           	psect	stringtext4
  2437  0596                     __pstringtext4:	
  2438  0596                     STR_2:	
  2439  0596  3462               	retlw	98	;'b'
  2440  0597  346F               	retlw	111	;'o'
  2441  0598  346F               	retlw	111	;'o'
  2442  0599  3474               	retlw	116	;'t'
  2443  059A  346C               	retlw	108	;'l'
  2444  059B  3461               	retlw	97	;'a'
  2445  059C  346F               	retlw	111	;'o'
  2446  059D  3464               	retlw	100	;'d'
  2447  059E  3465               	retlw	101	;'e'
  2448  059F  3472               	retlw	114	;'r'
  2449  05A0  342E               	retlw	46	;'.'
  2450  05A1  342E               	retlw	46	;'.'
  2451  05A2  342E               	retlw	46	;'.'
  2452  05A3  340D               	retlw	13
  2453  05A4  340A               	retlw	10
  2454  05A5  3400               	retlw	0
  2455                           
  2456                           	psect	stringtext5
  2457  0000                     __pstringtext5:	
  2458                           
  2459                           ; #config settings
  2460  0000                     
  2461                           	psect	cinit
  2462  0049                     start_initialization:	
  2463  0049                     __initialization:		;BIGRAM
  2464                           
  2465                           ; Initialize objects allocated to BANK1
  2466  0049  0021               	movlb	1	; select bank1
  2467  004A  3185  25E4  3180   	fcall	__pidataBANK1	;fetch initializer
  2468  004D  00C1               	movwf	__pdataBANK1& (0+127)
  2469  004E  3185  25E5  3180   	fcall	__pidataBANK1+1	;fetch initializer
  2470  0051  00C2               	movwf	(__pdataBANK1+1)& (0+127)
  2471  0052  3185  25E6  3180   	fcall	__pidataBANK1+2	;fetch initializer
  2472  0055  00C3               	movwf	(__pdataBANK1+2)& (0+127)
  2473                           
  2474                           ; Clear objects allocated to BIGRAM
  2475  0056  3040               	movlw	low (0+9024)
  2476  0057  0084               	movwf	4
  2477  0058  3023               	movlw	high (0+9024)
  2478  0059  0085               	movwf	5
  2479  005A  30A0               	movlw	160
  2480  005B  00FE               	movwf	btemp
  2481  005C  3000               	movlw	0
  2482  005D  00FF               	movwf	btemp+1
  2483  005E  3185  25C3  3180   	fcall	clear_ram0
  2484                           
  2485                           ; Clear objects allocated to COMMON
  2486  0061  01F6               	clrf	__pbssCOMMON& (0+127)
  2487  0062  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  2488  0063  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  2489  0064  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  2490                           
  2491                           ; Clear objects allocated to BANK1
  2492  0065  30A0               	movlw	low __pbssBANK1
  2493  0066  0084               	movwf	4
  2494  0067  3000               	movlw	high __pbssBANK1
  2495  0068  0085               	movwf	5
  2496  0069  301E               	movlw	30
  2497  006A  00FE               	movwf	btemp
  2498  006B  3000               	movlw	0
  2499  006C  00FF               	movwf	btemp+1
  2500  006D  3185  25C3  3180   	fcall	clear_ram0
  2501                           
  2502                           ; Clear objects allocated to BANK2
  2503  0070  3020               	movlw	low __pbssBANK2
  2504  0071  0084               	movwf	4
  2505  0072  3001               	movlw	high __pbssBANK2
  2506  0073  0085               	movwf	5
  2507  0074  3030               	movlw	48
  2508  0075  00FE               	movwf	btemp
  2509  0076  3000               	movlw	0
  2510  0077  00FF               	movwf	btemp+1
  2511  0078  3185  25C3  3180   	fcall	clear_ram0
  2512                           
  2513                           ; Clear objects allocated to BANK3
  2514  007B  30A0               	movlw	low __pbssBANK3
  2515  007C  0084               	movwf	4
  2516  007D  3001               	movlw	high __pbssBANK3
  2517  007E  0085               	movwf	5
  2518  007F  3050               	movlw	80
  2519  0080  00FE               	movwf	btemp
  2520  0081  3000               	movlw	0
  2521  0082  00FF               	movwf	btemp+1
  2522  0083  3185  25C3         	fcall	clear_ram0
  2523  0085                     end_of_initialization:	
  2524                           ;End of C runtime variable initialization code
  2525                           
  2526  0085                     __end_of__initialization:	
  2527  0085  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2528  0086  0020               	movlb	0
  2529  0087  3181  2988         	ljmp	_main	;jump to C main() function
  2530                           
  2531                           	psect	bssCOMMON
  2532  0076                     __pbssCOMMON:	
  2533  0076                     _eusartTxTail:	
  2534  0076                     	ds	1
  2535  0077                     _eusartTxHead:	
  2536  0077                     	ds	1
  2537  0078                     __bEusartRxCount:	
  2538  0078                     	ds	1
  2539  0079                     _Event:	
  2540  0079                     	ds	1
  2541                           
  2542                           	psect	bssBANK1
  2543  00A0                     __pbssBANK1:	
  2544  00A0                     _eusartTxBuffer:	
  2545  00A0                     	ds	16
  2546  00B0                     _globalTicker:	
  2547  00B0                     	ds	4
  2548  00B4                     _addrInline:	
  2549  00B4                     	ds	2
  2550  00B6                     _eusartRxIdleTime_ms:	
  2551  00B6                     	ds	2
  2552  00B8                     _eusartTxLen:	
  2553  00B8                     	ds	1
  2554  00B9                     _binBufferLen:	
  2555  00B9                     	ds	1
  2556  00BA                     _hexLineCharCount:	
  2557  00BA                     	ds	1
  2558  00BB                     _lengthInline:	
  2559  00BB                     	ds	1
  2560  00BC                     _eusartRxTail:	
  2561  00BC                     	ds	1
  2562  00BD                     _eusartRxHead:	
  2563  00BD                     	ds	1
  2564                           
  2565                           	psect	dataBANK1
  2566  00C1                     __pdataBANK1:	
  2567  00C1                     _addrWritedFlash:	
  2568  00C1                     	ds	2
  2569  00C3                     _firstPackage:	
  2570  00C3                     	ds	1
  2571                           
  2572                           	psect	bssBANK2
  2573  0120                     __pbssBANK2:	
  2574  0120                     _hexLineBuffer:	
  2575  0120                     	ds	48
  2576                           
  2577                           	psect	bssBANK3
  2578  01A0                     __pbssBANK3:	
  2579  01A0                     _binBuffer:	
  2580  01A0                     	ds	80
  2581                           
  2582                           	psect	clrtext
  2583  05C3                     clear_ram0:	
  2584                           ;	Called with FSR0 containing the base address, and
  2585                           ;	btemp/btemp+1 has the size to clear
  2586                           
  2587  05C3  0064               	clrwdt	;clear the watchdog before getting into this loop
  2588  05C4                     clrloop0:	
  2589  05C4  0180               	clrf	0	;clear RAM location pointed to by FSR
  2590  05C5  3101               	addfsr 0,1
  2591  05C6  3001               	movlw	1
  2592  05C7  02FE               	subwf	126,f
  2593  05C8  3000               	movlw	0
  2594  05C9  3BFF               	subwfb	127,f
  2595  05CA  087F               	movf	127,w
  2596  05CB  047E               	iorwf	126,w
  2597  05CC  1903               	btfsc	3,2
  2598  05CD  3400               	retlw	0	;all done for this memory range, return
  2599  05CE  2DC4               	goto	clrloop0	;have we reached the end yet?
  2600                           
  2601                           	psect	cstackBANK4
  2602  0220                     __pcstackBANK4:	
  2603  0220                     api_write_block@buf:	
  2604                           
  2605                           ; 64 bytes @ 0x0
  2606  0220                     	ds	64
  2607  0260                     api_write_block@i:	
  2608                           
  2609                           ; 1 bytes @ 0x40
  2610  0260                     	ds	1
  2611                           
  2612                           	psect	cstackCOMMON
  2613  0070                     __pcstackCOMMON:	
  2614  0070                     ?_EUSART_Transmit_ISR:	
  2615  0070                     ??_EUSART_Transmit_ISR:	
  2616                           ; 1 bytes @ 0x0
  2617                           
  2618  0070                     ?_EUSART_Receive_ISR:	
  2619                           ; 1 bytes @ 0x0
  2620                           
  2621  0070                     ??_EUSART_Receive_ISR:	
  2622                           ; 1 bytes @ 0x0
  2623                           
  2624  0070                     ?_OSCILLATOR_Initialize:	
  2625                           ; 1 bytes @ 0x0
  2626                           
  2627  0070                     ?_WDT_Initialize:	
  2628                           ; 1 bytes @ 0x0
  2629                           
  2630  0070                     ?_TMR2_Initialize:	
  2631                           ; 1 bytes @ 0x0
  2632                           
  2633  0070                     ?_EUSART_Initialize:	
  2634                           ; 1 bytes @ 0x0
  2635                           
  2636  0070                     ?_TMR2_StartTimer:	
  2637                           ; 1 bytes @ 0x0
  2638                           
  2639  0070                     ?_uart_received_start:	
  2640                           ; 1 bytes @ 0x0
  2641                           
  2642  0070                     ?_uart_send_byte:	
  2643                           ; 1 bytes @ 0x0
  2644                           
  2645  0070                     ?_INTERRUPT_InterruptManager:	
  2646                           ; 1 bytes @ 0x0
  2647                           
  2648  0070                     ?_PIN_MANAGER_Initialize:	
  2649                           ; 1 bytes @ 0x0
  2650                           
  2651  0070                     ?_SYSTEM_Initialize:	
  2652                           ; 1 bytes @ 0x0
  2653                           
  2654  0070                     ?_iap_received_package:	
  2655                           ; 1 bytes @ 0x0
  2656                           
  2657  0070                     ?_decode_hex_len:	
  2658                           ; 1 bytes @ 0x0
  2659                           
  2660  0070                     ?_decode_xmodem_package:	
  2661                           ; 1 bytes @ 0x0
  2662                           
  2663  0070                     ?_iap_process:	
  2664                           ; 1 bytes @ 0x0
  2665                           
  2666  0070                     ?_main:	
  2667                           ; 1 bytes @ 0x0
  2668                           
  2669  0070                     ?__chr2hex:	
  2670                           ; 1 bytes @ 0x0
  2671                           
  2672                           
  2673                           ; 1 bytes @ 0x0
  2674  0070                     	ds	2
  2675  0072                     EUSART_Receive_ISR@t8:	
  2676                           
  2677                           ; 1 bytes @ 0x2
  2678  0072                     	ds	1
  2679  0073                     ??_INTERRUPT_InterruptManager:	
  2680                           
  2681                           ; 1 bytes @ 0x3
  2682  0073                     	ds	1
  2683  0074                     ??_OSCILLATOR_Initialize:	
  2684  0074                     ??_WDT_Initialize:	
  2685                           ; 1 bytes @ 0x4
  2686                           
  2687  0074                     ??_EUSART_Initialize:	
  2688                           ; 1 bytes @ 0x4
  2689                           
  2690  0074                     ?_FLASH_EraseBlock:	
  2691                           ; 1 bytes @ 0x4
  2692                           
  2693  0074                     ?_TMR2_SetInterruptHandler:	
  2694                           ; 1 bytes @ 0x4
  2695                           
  2696  0074                     ??_TMR2_StartTimer:	
  2697                           ; 1 bytes @ 0x4
  2698                           
  2699  0074                     ??_uart_received_start:	
  2700                           ; 1 bytes @ 0x4
  2701                           
  2702  0074                     ??_uart_send_byte:	
  2703                           ; 1 bytes @ 0x4
  2704                           
  2705  0074                     ??_m_mem_set:	
  2706                           ; 1 bytes @ 0x4
  2707                           
  2708  0074                     ?_uart_send_str:	
  2709                           ; 1 bytes @ 0x4
  2710                           
  2711  0074                     ??_PIN_MANAGER_Initialize:	
  2712                           ; 1 bytes @ 0x4
  2713                           
  2714  0074                     ??__chr2hex:	
  2715                           ; 1 bytes @ 0x4
  2716                           
  2717  0074                     ?_FLASH_ReadWord:	
  2718                           ; 1 bytes @ 0x4
  2719                           
  2720  0074                     PIN_MANAGER_Initialize@state:	
  2721                           ; 2 bytes @ 0x4
  2722                           
  2723  0074                     uart_send_byte@x:	
  2724                           ; 1 bytes @ 0x4
  2725                           
  2726  0074                     FLASH_ReadWord@flashAddr:	
  2727                           ; 1 bytes @ 0x4
  2728                           
  2729  0074                     FLASH_EraseBlock@startAddr:	
  2730                           ; 2 bytes @ 0x4
  2731                           
  2732  0074                     TMR2_SetInterruptHandler@InterruptHandler:	
  2733                           ; 2 bytes @ 0x4
  2734                           
  2735  0074                     uart_send_str@str:	
  2736                           ; 2 bytes @ 0x4
  2737                           
  2738                           
  2739                           ; 2 bytes @ 0x4
  2740  0074                     	ds	1
  2741  0075                     ??_iap_received_package:	
  2742  0075                     m_mem_set@buf:	
  2743                           ; 1 bytes @ 0x5
  2744                           
  2745                           
  2746                           ; 1 bytes @ 0x5
  2747  0075                     	ds	1
  2748  0076                     ??_TMR2_Initialize:	
  2749  0076                     ??_FLASH_EraseBlock:	
  2750                           ; 1 bytes @ 0x6
  2751                           
  2752  0076                     ??_TMR2_SetInterruptHandler:	
  2753                           ; 1 bytes @ 0x6
  2754                           
  2755  0076                     ??_SYSTEM_Initialize:	
  2756                           ; 1 bytes @ 0x6
  2757                           
  2758  0076                     ??_FLASH_ReadWord:	
  2759                           ; 1 bytes @ 0x6
  2760                           
  2761                           
  2762                           	psect	cstackBANK0
  2763  0020                     __pcstackBANK0:	
  2764                           ; 1 bytes @ 0x6
  2765                           
  2766  0020                     ?_m_mem_set:	
  2767  0020                     ??_uart_send_str:	
  2768                           ; 1 bytes @ 0x0
  2769                           
  2770  0020                     FLASH_ReadWord@GIEBitValue:	
  2771                           ; 1 bytes @ 0x0
  2772                           
  2773  0020                     FLASH_EraseBlock@GIEBitValue:	
  2774                           ; 1 bytes @ 0x0
  2775                           
  2776  0020                     iap_received_package@tm:	
  2777                           ; 1 bytes @ 0x0
  2778                           
  2779  0020                     m_mem_set@x:	
  2780                           ; 1 bytes @ 0x0
  2781                           
  2782  0020                     __chr2hex@h:	
  2783                           ; 1 bytes @ 0x0
  2784                           
  2785                           
  2786                           ; 1 bytes @ 0x0
  2787  0020                     	ds	1
  2788  0021                     ?_FLASH_WriteBlock:	
  2789  0021                     __chr2hex@c:	
  2790                           ; 1 bytes @ 0x1
  2791                           
  2792  0021                     FLASH_WriteBlock@writeAddr:	
  2793                           ; 1 bytes @ 0x1
  2794                           
  2795  0021                     m_mem_set@len:	
  2796                           ; 2 bytes @ 0x1
  2797                           
  2798                           
  2799                           ; 2 bytes @ 0x1
  2800  0021                     	ds	1
  2801  0022                     ?_m_str_h2b:	
  2802  0022                     m_str_h2b@h:	
  2803                           ; 2 bytes @ 0x2
  2804                           
  2805                           
  2806                           ; 1 bytes @ 0x2
  2807  0022                     	ds	1
  2808  0023                     FLASH_WriteBlock@flashWordArray:	
  2809  0023                     m_str_h2b@len:	
  2810                           ; 1 bytes @ 0x3
  2811                           
  2812                           
  2813                           ; 2 bytes @ 0x3
  2814  0023                     	ds	1
  2815  0024                     ??_FLASH_WriteBlock:	
  2816                           
  2817                           ; 1 bytes @ 0x4
  2818  0024                     	ds	1
  2819  0025                     ??_m_str_h2b:	
  2820                           
  2821                           ; 1 bytes @ 0x5
  2822  0025                     	ds	2
  2823  0027                     FLASH_WriteBlock@GIEBitValue:	
  2824  0027                     m_str_h2b@i:	
  2825                           ; 1 bytes @ 0x7
  2826                           
  2827                           
  2828                           ; 2 bytes @ 0x7
  2829  0027                     	ds	1
  2830  0028                     FLASH_WriteBlock@i:	
  2831                           
  2832                           ; 1 bytes @ 0x8
  2833  0028                     	ds	1
  2834  0029                     ?_api_write_block:	
  2835  0029                     m_str_h2b@b:	
  2836                           ; 1 bytes @ 0x9
  2837                           
  2838  0029                     api_write_block@addr:	
  2839                           ; 1 bytes @ 0x9
  2840                           
  2841                           
  2842                           ; 2 bytes @ 0x9
  2843  0029                     	ds	1
  2844  002A                     m_str_h2b@s:	
  2845                           
  2846                           ; 1 bytes @ 0xA
  2847  002A                     	ds	1
  2848  002B                     api_write_block@binbuf:	
  2849  002B                     m_str_h2b@bb:	
  2850                           ; 1 bytes @ 0xB
  2851                           
  2852                           
  2853                           ; 1 bytes @ 0xB
  2854  002B                     	ds	1
  2855  002C                     ??_api_write_block:	
  2856                           
  2857                           ; 1 bytes @ 0xC
  2858  002C                     	ds	5
  2859  0031                     ??_decode_hex_len:	
  2860                           
  2861                           ; 1 bytes @ 0x11
  2862  0031                     	ds	2
  2863  0033                     decode_hex_len@t16:	
  2864                           
  2865                           ; 2 bytes @ 0x13
  2866  0033                     	ds	2
  2867  0035                     decode_hex_len@i8:	
  2868                           
  2869                           ; 1 bytes @ 0x15
  2870  0035                     	ds	1
  2871  0036                     ??_decode_xmodem_package:	
  2872                           
  2873                           ; 1 bytes @ 0x16
  2874  0036                     	ds	2
  2875  0038                     decode_xmodem_package@xloc:	
  2876                           
  2877                           ; 1 bytes @ 0x18
  2878  0038                     	ds	1
  2879  0039                     ??_iap_process:	
  2880                           
  2881                           ; 1 bytes @ 0x19
  2882  0039                     	ds	2
  2883  003B                     iap_process@ret:	
  2884                           
  2885                           ; 1 bytes @ 0x1B
  2886  003B                     	ds	1
  2887  003C                     ??_main:	
  2888                           
  2889                           ; 1 bytes @ 0x1C
  2890  003C                     	ds	2
  2891  003E                     main@ret:	
  2892                           
  2893                           ; 1 bytes @ 0x1E
  2894  003E                     	ds	1
  2895  003F                     main@t16:	
  2896                           
  2897                           ; 2 bytes @ 0x1F
  2898  003F                     	ds	2
  2899                           
  2900                           	psect	maintext
  2901  0188                     __pmaintext:	
  2902 ;;
  2903 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2904 ;;
  2905 ;; *************** function _main *****************
  2906 ;; Defined at:
  2907 ;;		line 51 in file "src/app/boot_main.c"
  2908 ;; Parameters:    Size  Location     Type
  2909 ;;		None
  2910 ;; Auto vars:     Size  Location     Type
  2911 ;;  t16             2   31[BANK0 ] unsigned int 
  2912 ;;  ret             1   30[BANK0 ] unsigned char 
  2913 ;; Return value:  Size  Location     Type
  2914 ;;                  1    wreg      void 
  2915 ;; Registers used:
  2916 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2917 ;; Tracked objects:
  2918 ;;		On entry : B1F/0
  2919 ;;		On exit  : 0/0
  2920 ;;		Unchanged: 0/0
  2921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2923 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2924 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2925 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2926 ;;Total ram usage:        5 bytes
  2927 ;; Hardware stack levels required when called:    8
  2928 ;; This function calls:
  2929 ;;		_FLASH_ReadWord
  2930 ;;		_SYSTEM_Initialize
  2931 ;;		_iap_process
  2932 ;;		_uart_received_start
  2933 ;;		_uart_send_str
  2934 ;; This function is called by:
  2935 ;;		Startup code after reset
  2936 ;; This function uses a non-reentrant model
  2937 ;;
  2938                           
  2939                           
  2940                           ;psect for function _main
  2941  0188                     _main:	
  2942                           
  2943                           ;boot_main.c: 53: uint8_t ret=0;
  2944                           
  2945                           ;incstack = 0
  2946                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2947  0188  0020               	movlb	0	; select bank0
  2948  0189  01BE               	clrf	main@ret
  2949                           
  2950                           ;boot_main.c: 54: uint16_t t16=0;
  2951  018A  01BF               	clrf	main@t16
  2952  018B  01C0               	clrf	main@t16+1
  2953                           
  2954                           ;boot_main.c: 55: isRunInBoot=0x55;
  2955  018C  3055               	movlw	85
  2956  018D  00BC               	movwf	??_main
  2957  018E  083C               	movf	??_main,w
  2958  018F  003F               	movlb	31	; select bank31
  2959  0190  00FF               	movwf	127	;volatile
  2960                           
  2961                           ;boot_main.c: 56: isRunInBoot=isRunInBoot;
  2962  0191  087F               	movf	127,w	;volatile
  2963  0192  0020               	movlb	0	; select bank0
  2964  0193  00BC               	movwf	??_main
  2965  0194  083C               	movf	??_main,w
  2966  0195  003F               	movlb	31	; select bank31
  2967  0196  00FF               	movwf	127	;volatile
  2968                           
  2969                           ;boot_main.c: 57: SYSTEM_Initialize();
  2970  0197  3185  25A6  3181   	fcall	_SYSTEM_Initialize
  2971                           
  2972                           ;boot_main.c: 58: do{ (INTCONbits.GIE = 1); (INTCONbits.PEIE = 1); }while(0);;
  2973  019A  178B               	bsf	11,7	;volatile
  2974  019B  170B               	bsf	11,6	;volatile
  2975                           
  2976                           ;boot_main.c: 60: t16=FLASH_ReadWord(0x1f00+2);
  2977                           
  2978                           ;boot_main.c: 59: do{
  2979  019C  3002               	movlw	2
  2980  019D  00F4               	movwf	FLASH_ReadWord@flashAddr
  2981  019E  301F               	movlw	31
  2982  019F  00F5               	movwf	FLASH_ReadWord@flashAddr+1
  2983  01A0  3184  24FD  3181   	fcall	_FLASH_ReadWord
  2984  01A3  0875               	movf	?_FLASH_ReadWord+1,w
  2985  01A4  0020               	movlb	0	; select bank0
  2986  01A5  00C0               	movwf	main@t16+1
  2987  01A6  0874               	movf	?_FLASH_ReadWord,w
  2988  01A7  00BF               	movwf	main@t16
  2989                           
  2990                           ;boot_main.c: 61: if((t16 & 0xff) != 0xff)break;
  2991  01A8  30FF               	movlw	255
  2992  01A9  053F               	andwf	main@t16,w
  2993  01AA  00BC               	movwf	??_main
  2994  01AB  3000               	movlw	0
  2995  01AC  0540               	andwf	main@t16+1,w
  2996  01AD  00BD               	movwf	??_main+1
  2997  01AE  0A3C               	incf	??_main,w
  2998  01AF  043D               	iorwf	??_main+1,w
  2999  01B0  1D03               	btfss	3,2
  3000  01B1  2A1E               	goto	l438
  3001                           
  3002                           ;boot_main.c: 63: uart_received_start();
  3003  01B2  3185  25CF  3181   	fcall	_uart_received_start
  3004                           
  3005                           ;boot_main.c: 64: uart_send_str((uint8_t*)"bootlaoder...\r\n");
  3006  01B5  3096               	movlw	low (STR_2| (0+32768))
  3007  01B6  00F4               	movwf	uart_send_str@str
  3008  01B7  3085               	movlw	high (STR_2| (0+32768))
  3009  01B8  00F5               	movwf	uart_send_str@str+1
  3010  01B9  3184  247A  3181   	fcall	_uart_send_str
  3011                           
  3012                           ;boot_main.c: 65: _delay((unsigned long)((100)*(16000000/4000.0)));
  3013  01BC  3003               	movlw	3
  3014  01BD  0020               	movlb	0	; select bank0
  3015  01BE  00BD               	movwf	??_main+1
  3016  01BF  3008               	movlw	8
  3017  01C0  00BC               	movwf	??_main
  3018  01C1  3077               	movlw	119
  3019  01C2                     u2287:	
  3020  01C2  0B89               	decfsz	9,f
  3021  01C3  29C2               	goto	u2287
  3022  01C4  0BBC               	decfsz	??_main,f
  3023  01C5  29C2               	goto	u2287
  3024  01C6  0BBD               	decfsz	??_main+1,f
  3025  01C7  29C2               	goto	u2287
  3026                           
  3027                           ;boot_main.c: 66: uart_send_str((uint8_t*)"update app fw?y/n\r\n");
  3028  01C8  304B               	movlw	low (STR_3| (0+32768))
  3029  01C9  00F4               	movwf	uart_send_str@str
  3030  01CA  3085               	movlw	high (STR_3| (0+32768))
  3031  01CB  00F5               	movwf	uart_send_str@str+1
  3032  01CC  3184  247A  3181   	fcall	_uart_send_str
  3033                           
  3034                           ;boot_main.c: 67: _delay((unsigned long)((1000)*(16000000/4000.0)));
  3035  01CF  3015               	movlw	21
  3036  01D0  0020               	movlb	0	; select bank0
  3037  01D1  00BD               	movwf	??_main+1
  3038  01D2  304B               	movlw	75
  3039  01D3  00BC               	movwf	??_main
  3040  01D4  30BE               	movlw	190
  3041  01D5                     u2297:	
  3042  01D5  0B89               	decfsz	9,f
  3043  01D6  29D5               	goto	u2297
  3044  01D7  0BBC               	decfsz	??_main,f
  3045  01D8  29D5               	goto	u2297
  3046  01D9  0BBD               	decfsz	??_main+1,f
  3047  01DA  29D5               	goto	u2297
  3048  01DB  0000               	nop
  3049                           
  3050                           ;boot_main.c: 68: t16=200;
  3051  01DC  30C8               	movlw	200
  3052  01DD  0020               	movlb	0	; select bank0
  3053  01DE  00BF               	movwf	main@t16
  3054  01DF  3000               	movlw	0
  3055  01E0  00C0               	movwf	main@t16+1
  3056                           
  3057                           ;boot_main.c: 69: _bEusartRxCount=0;
  3058  01E1  01F8               	clrf	__bEusartRxCount	;volatile
  3059  01E2                     l2891:	
  3060                           ;boot_main.c: 70: while(t16){
  3061                           
  3062  01E2  083F               	movf	main@t16,w
  3063  01E3  0440               	iorwf	main@t16+1,w
  3064  01E4  1903               	btfsc	3,2
  3065  01E5  2A10               	goto	l2893
  3066                           
  3067                           ;boot_main.c: 71: _delay((unsigned long)((50)*(16000000/4000.0)));
  3068  01E6  3002               	movlw	2
  3069  01E7  0020               	movlb	0	; select bank0
  3070  01E8  00BD               	movwf	??_main+1
  3071  01E9  3004               	movlw	4
  3072  01EA  00BC               	movwf	??_main
  3073  01EB  30BA               	movlw	186
  3074  01EC                     u2307:	
  3075  01EC  0B89               	decfsz	9,f
  3076  01ED  29EC               	goto	u2307
  3077  01EE  0BBC               	decfsz	??_main,f
  3078  01EF  29EC               	goto	u2307
  3079  01F0  0BBD               	decfsz	??_main+1,f
  3080  01F1  29EC               	goto	u2307
  3081  01F2  0000               	nop
  3082                           
  3083                           ;boot_main.c: 72: if(Event & (1<<0)){
  3084  01F3  1C79               	btfss	_Event,0	;volatile
  3085  01F4  2A0A               	goto	l2889
  3086                           
  3087                           ;boot_main.c: 73: Event &= ~(1<<0);
  3088  01F5  30FE               	movlw	254
  3089  01F6  0020               	movlb	0	; select bank0
  3090  01F7  00BC               	movwf	??_main
  3091  01F8  083C               	movf	??_main,w
  3092  01F9  05F9               	andwf	_Event,f	;volatile
  3093                           
  3094                           ;boot_main.c: 74: if(_bEusartRxBuffer[0]== 'y' || _bEusartRxBuffer[0]== 'Y')break;
  3095  01FA  3040               	movlw	64
  3096  01FB  0086               	movwf	6
  3097  01FC  3023               	movlw	35
  3098  01FD  0087               	movwf	7
  3099  01FE  3079               	movlw	121
  3100  01FF  0601               	xorwf	1,w
  3101  0200  1903               	btfsc	3,2
  3102  0201  2A10               	goto	l2893
  3103  0202  3040               	movlw	64
  3104  0203  0086               	movwf	6
  3105  0204  3023               	movlw	35
  3106  0205  0087               	movwf	7
  3107  0206  3059               	movlw	89
  3108  0207  0601               	xorwf	1,w
  3109  0208  1903               	btfsc	3,2
  3110  0209  2A10               	goto	l2893
  3111  020A                     l2889:	
  3112                           
  3113                           ;boot_main.c: 75: }
  3114                           ;boot_main.c: 76: t16--;
  3115  020A  3001               	movlw	1
  3116  020B  0020               	movlb	0	; select bank0
  3117  020C  02BF               	subwf	main@t16,f
  3118  020D  3000               	movlw	0
  3119  020E  3BC0               	subwfb	main@t16+1,f
  3120  020F  29E2               	goto	l2891
  3121  0210                     l2893:	
  3122                           
  3123                           ;boot_main.c: 77: }
  3124                           ;boot_main.c: 78: if(t16){
  3125  0210  083F               	movf	main@t16,w
  3126  0211  0440               	iorwf	main@t16+1,w
  3127  0212  1903               	btfsc	3,2
  3128  0213  2A1E               	goto	l438
  3129                           
  3130                           ;boot_main.c: 79: ret=iap_process();
  3131  0214  3182  2225  3181   	fcall	_iap_process
  3132  0217  0020               	movlb	0	; select bank0
  3133  0218  00BC               	movwf	??_main
  3134  0219  083C               	movf	??_main,w
  3135  021A  00BE               	movwf	main@ret
  3136                           
  3137                           ;boot_main.c: 80: if(0==ret)while(1);
  3138  021B  083E               	movf	main@ret,w
  3139  021C  1903               	btfsc	3,2
  3140  021D                     l449:	
  3141  021D  2A1D               	goto	l449
  3142  021E                     l438:	
  3143                           
  3144                           ;boot_main.c: 81: }
  3145                           ;boot_main.c: 83: }while(0);
  3146                           ;boot_main.c: 86: __nop();
  3147  021E  0000               	nop
  3148                           
  3149                           ;boot_main.c: 87: do{ (INTCONbits.GIE = 0); (INTCONbits.PEIE = 0); }while(0);;
  3150  021F  138B               	bcf	11,7	;volatile
  3151  0220  130B               	bcf	11,6	;volatile
  3152  0221  3188               	pagesel	2048	;# 
  3153  0222  2800               	goto	2048	;# 
  3154  0223  3180  2847         	ljmp	start
  3155  0225                     __end_of_main:	
  3156                           
  3157                           	psect	text1
  3158  0225                     __ptext1:	
  3159 ;; *************** function _iap_process *****************
  3160 ;; Defined at:
  3161 ;;		line 151 in file "src/api/iap.c"
  3162 ;; Parameters:    Size  Location     Type
  3163 ;;		None
  3164 ;; Auto vars:     Size  Location     Type
  3165 ;;  ret             1   27[BANK0 ] unsigned char 
  3166 ;; Return value:  Size  Location     Type
  3167 ;;                  1    wreg      unsigned char 
  3168 ;; Registers used:
  3169 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3170 ;; Tracked objects:
  3171 ;;		On entry : 0/0
  3172 ;;		On exit  : 0/0
  3173 ;;		Unchanged: 0/0
  3174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3176 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3177 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3178 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3179 ;;Total ram usage:        3 bytes
  3180 ;; Hardware stack levels used:    1
  3181 ;; Hardware stack levels required when called:    7
  3182 ;; This function calls:
  3183 ;;		_FLASH_WriteBlock
  3184 ;;		_decode_xmodem_package
  3185 ;;		_iap_received_package
  3186 ;;		_uart_send_byte
  3187 ;;		_uart_send_str
  3188 ;; This function is called by:
  3189 ;;		_main
  3190 ;; This function uses a non-reentrant model
  3191 ;;
  3192                           
  3193                           
  3194                           ;psect for function _iap_process
  3195  0225                     _iap_process:	
  3196                           
  3197                           ;iap.c: 153: uint8_t ret;
  3198                           ;iap.c: 154: uart_send_str((uint8_t*)"send *.hex file.\r\n");
  3199                           
  3200                           ;incstack = 0
  3201                           ; Regs used in _iap_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3202  0225  305F               	movlw	low (STR_1| (0+32768))
  3203  0226  00F4               	movwf	uart_send_str@str
  3204  0227  3085               	movlw	high (STR_1| (0+32768))
  3205  0228  00F5               	movwf	uart_send_str@str+1
  3206  0229  3184  247A  3182   	fcall	_uart_send_str
  3207                           
  3208                           ;iap.c: 155: _delay((unsigned long)((200)*(16000000/4000.0)));
  3209  022C  3005               	movlw	5
  3210  022D  0020               	movlb	0	; select bank0
  3211  022E  00BA               	movwf	??_iap_process+1
  3212  022F  300F               	movlw	15
  3213  0230  00B9               	movwf	??_iap_process
  3214  0231  30F1               	movlw	241
  3215  0232                     u2317:	
  3216  0232  0B89               	decfsz	9,f
  3217  0233  2A32               	goto	u2317
  3218  0234  0BB9               	decfsz	??_iap_process,f
  3219  0235  2A32               	goto	u2317
  3220  0236  0BBA               	decfsz	??_iap_process+1,f
  3221  0237  2A32               	goto	u2317
  3222                           
  3223                           ;iap.c: 156: firstPackage=1;
  3224  0238  0021               	movlb	1	; select bank1
  3225  0239  01C3               	clrf	_firstPackage^(0+128)
  3226  023A  0AC3               	incf	_firstPackage^(0+128),f
  3227                           
  3228                           ;iap.c: 158: addrWritedFlash=0x800;
  3229  023B  3000               	movlw	0
  3230  023C  00C1               	movwf	_addrWritedFlash^(0+128)
  3231  023D  3008               	movlw	8
  3232  023E  00C2               	movwf	(_addrWritedFlash^(0+128)+1)
  3233                           
  3234                           ;iap.c: 159: lengthInline=0;
  3235  023F  01BB               	clrf	_lengthInline^(0+128)
  3236                           
  3237                           ;iap.c: 160: addrInline=0;
  3238  0240  01B4               	clrf	_addrInline^(0+128)
  3239  0241  01B5               	clrf	(_addrInline+1)^(0+128)
  3240                           
  3241                           ;iap.c: 161: hexLineCharCount=0;
  3242  0242  01BA               	clrf	_hexLineCharCount^(0+128)
  3243                           
  3244                           ;iap.c: 162: binBufferLen=0;
  3245  0243  01B9               	clrf	_binBufferLen^(0+128)
  3246                           
  3247                           ;iap.c: 172: break;
  3248  0244  2A4E               	goto	l2799
  3249  0245                     l2811:	
  3250                           
  3251                           ;iap.c: 173: }
  3252                           ;iap.c: 174: uart_send_byte(0x15);
  3253  0245  3015               	movlw	21
  3254  0246  2A4B               	goto	L1
  3255  0247                     l2813:	
  3256                           ;iap.c: 175: continue;
  3257                           
  3258                           
  3259                           ;iap.c: 176: }
  3260                           ;iap.c: 178: decode_xmodem_package();
  3261  0247  3183  239A  3182   	fcall	_decode_xmodem_package
  3262                           
  3263                           ;iap.c: 179: uart_send_byte(0x06);
  3264  024A  3006               	movlw	6
  3265  024B                     L1:	
  3266  024B  3185  25B5  3182   	fcall	_uart_send_byte
  3267  024E                     l2799:	
  3268                           ;iap.c: 164: while(1){
  3269                           
  3270                           
  3271                           ;iap.c: 165: ret=iap_received_package();
  3272  024E  3184  241F  3182   	fcall	_iap_received_package
  3273  0251  0020               	movlb	0	; select bank0
  3274  0252  00B9               	movwf	??_iap_process
  3275  0253  0839               	movf	??_iap_process,w
  3276  0254  00BB               	movwf	iap_process@ret
  3277                           
  3278                           ;iap.c: 166: if(ret){
  3279  0255  083B               	movf	iap_process@ret,w
  3280  0256  1903               	btfsc	3,2
  3281  0257  2A4E               	goto	l2799
  3282                           
  3283                           ;iap.c: 167: firstPackage=0;
  3284  0258  0021               	movlb	1	; select bank1
  3285  0259  01C3               	clrf	_firstPackage^(0+128)
  3286                           
  3287                           ;iap.c: 169: if(ret!=0x84){
  3288  025A  3084               	movlw	132
  3289  025B  0020               	movlb	0	; select bank0
  3290  025C  063B               	xorwf	iap_process@ret,w
  3291  025D  1903               	btfsc	3,2
  3292  025E  2A47               	goto	l2813
  3293                           
  3294                           ;iap.c: 170: if(_bEusartRxBuffer[0]==0x04){
  3295  025F  3040               	movlw	64
  3296  0260  0086               	movwf	6
  3297  0261  3023               	movlw	35
  3298  0262  0087               	movwf	7
  3299  0263  3004               	movlw	4
  3300  0264  0601               	xorwf	1,w
  3301  0265  1D03               	btfss	3,2
  3302  0266  2A45               	goto	l2811
  3303                           
  3304                           ;iap.c: 171: uart_send_byte(0x06);
  3305  0267  3006               	movlw	6
  3306  0268  3185  25B5  3182   	fcall	_uart_send_byte
  3307                           
  3308                           ;iap.c: 180: }
  3309                           ;iap.c: 181: }
  3310                           ;iap.c: 183: if(binBufferLen){
  3311  026B  0021               	movlb	1	; select bank1
  3312  026C  0839               	movf	_binBufferLen^(0+128),w
  3313  026D  1903               	btfsc	3,2
  3314  026E  2A8B               	goto	l2825
  3315                           
  3316                           ;iap.c: 184: if(addrWritedFlash>=0x800 && addrWritedFlash <0x1f00){
  3317  026F  3008               	movlw	8
  3318  0270  0242               	subwf	(_addrWritedFlash+1)^(0+128),w
  3319  0271  3000               	movlw	0
  3320  0272  1903               	skipnz
  3321  0273  0241               	subwf	_addrWritedFlash^(0+128),w
  3322  0274  1C03               	skipc
  3323  0275  2A8B               	goto	l2825
  3324  0276  301F               	movlw	31
  3325  0277  0242               	subwf	(_addrWritedFlash+1)^(0+128),w
  3326  0278  3000               	movlw	0
  3327  0279  1903               	skipnz
  3328  027A  0241               	subwf	_addrWritedFlash^(0+128),w
  3329  027B  1803               	skipnc
  3330  027C  2A8B               	goto	l2825
  3331                           
  3332                           ;iap.c: 185: FLASH_WriteBlock(addrWritedFlash,binBuffer);
  3333  027D  0842               	movf	(_addrWritedFlash+1)^(0+128),w
  3334  027E  0020               	movlb	0	; select bank0
  3335  027F  00A2               	movwf	FLASH_WriteBlock@writeAddr+1
  3336  0280  0021               	movlb	1	; select bank1
  3337  0281  0841               	movf	_addrWritedFlash^(0+128),w
  3338  0282  0020               	movlb	0	; select bank0
  3339  0283  00A1               	movwf	FLASH_WriteBlock@writeAddr
  3340  0284  30A0               	movlw	(low (_binBuffer| (0+256)))& (0+255)
  3341  0285  00B9               	movwf	??_iap_process
  3342  0286  0839               	movf	??_iap_process,w
  3343  0287  00A3               	movwf	FLASH_WriteBlock@flashWordArray
  3344  0288  3182  2290  3182   	fcall	_FLASH_WriteBlock
  3345  028B                     l2825:	
  3346                           
  3347                           ;iap.c: 186: }
  3348                           ;iap.c: 187: }
  3349                           ;iap.c: 188: uart_send_byte(0x06);
  3350  028B  3006               	movlw	6
  3351  028C  3185  25B5         	fcall	_uart_send_byte
  3352                           
  3353                           ;iap.c: 189: return 1;
  3354  028E  3001               	movlw	1
  3355  028F  0008               	return
  3356  0290                     __end_of_iap_process:	
  3357                           
  3358                           	psect	text2
  3359  047A                     __ptext2:	
  3360 ;; *************** function _uart_send_str *****************
  3361 ;; Defined at:
  3362 ;;		line 21 in file "src/api/my_uart.c"
  3363 ;; Parameters:    Size  Location     Type
  3364 ;;  str             2    4[COMMON] PTR unsigned char 
  3365 ;;		 -> STR_3(20), STR_2(16), STR_1(19), 
  3366 ;; Auto vars:     Size  Location     Type
  3367 ;;		None
  3368 ;; Return value:  Size  Location     Type
  3369 ;;                  1    wreg      void 
  3370 ;; Registers used:
  3371 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3372 ;; Tracked objects:
  3373 ;;		On entry : 0/0
  3374 ;;		On exit  : 0/0
  3375 ;;		Unchanged: 0/0
  3376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3377 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3379 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3380 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3381 ;;Total ram usage:        3 bytes
  3382 ;; Hardware stack levels used:    1
  3383 ;; Hardware stack levels required when called:    2
  3384 ;; This function calls:
  3385 ;;		Nothing
  3386 ;; This function is called by:
  3387 ;;		_iap_process
  3388 ;;		_main
  3389 ;; This function uses a non-reentrant model
  3390 ;;
  3391                           
  3392                           
  3393                           ;psect for function _uart_send_str
  3394  047A                     _uart_send_str:	
  3395                           
  3396                           ;my_uart.c: 25: if(!TXSTAbits.TXEN)TXSTAbits.TXEN=1;
  3397                           
  3398                           ;incstack = 0
  3399                           ; Regs used in _uart_send_str: [wreg-fsr0h+status,2+status,0+pclath]
  3400  047A  0023               	movlb	3	; select bank3
  3401  047B  1E9E               	btfss	30,5	;volatile
  3402  047C  169E               	bsf	30,5	;volatile
  3403  047D                     l2779:	
  3404                           ;my_uart.c: 26: while(*str!='\0'){
  3405                           
  3406  047D  0874               	movf	uart_send_str@str,w
  3407  047E  0084               	movwf	4
  3408  047F  0875               	movf	uart_send_str@str+1,w
  3409  0480  0085               	movwf	5
  3410  0481  0012               	moviw fsr0++
  3411  0482  1903               	btfsc	3,2
  3412  0483  2C9C               	goto	l386
  3413  0484                     l380:	
  3414                           ;my_uart.c: 27: while(0 == PIR1bits.TXIF);
  3415                           
  3416  0484  0020               	movlb	0	; select bank0
  3417  0485  1E11               	btfss	17,4	;volatile
  3418  0486  2C84               	goto	l380
  3419                           
  3420                           ;my_uart.c: 29: TXREG = *str;
  3421  0487  0874               	movf	uart_send_str@str,w
  3422  0488  0084               	movwf	4
  3423  0489  0875               	movf	uart_send_str@str+1,w
  3424  048A  0085               	movwf	5
  3425  048B  0800               	movf	0,w	;code access
  3426  048C  0023               	movlb	3	; select bank3
  3427  048D  009A               	movwf	26	;volatile
  3428                           
  3429                           ;my_uart.c: 30: str++;
  3430  048E  3001               	movlw	1
  3431  048F  07F4               	addwf	uart_send_str@str,f
  3432  0490  3000               	movlw	0
  3433  0491  3DF5               	addwfc	uart_send_str@str+1,f
  3434                           
  3435                           ;my_uart.c: 31: do{__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop
      +                          ();}while(0);;
  3436  0492  0000               	nop
  3437  0493  0000               	nop
  3438  0494  0000               	nop
  3439  0495  0000               	nop
  3440  0496  0000               	nop
  3441  0497  0000               	nop
  3442  0498  0000               	nop
  3443  0499  0000               	nop
  3444  049A  0000               	nop
  3445  049B  2C7D               	goto	l2779
  3446  049C                     l386:	
  3447                           ;my_uart.c: 32: }
  3448                           ;my_uart.c: 33: while(0 == PIR1bits.TXIF);
  3449                           
  3450  049C  0020               	movlb	0	; select bank0
  3451  049D  1A11               	btfsc	17,4	;volatile
  3452  049E  0008               	return
  3453  049F  2C9C               	goto	l386
  3454  04A0                     __end_of_uart_send_str:	
  3455                           
  3456                           	psect	text3
  3457  041F                     __ptext3:	
  3458 ;; *************** function _iap_received_package *****************
  3459 ;; Defined at:
  3460 ;;		line 27 in file "src/api/iap.c"
  3461 ;; Parameters:    Size  Location     Type
  3462 ;;		None
  3463 ;; Auto vars:     Size  Location     Type
  3464 ;;  tm              1    0[BANK0 ] unsigned char 
  3465 ;; Return value:  Size  Location     Type
  3466 ;;                  1    wreg      unsigned char 
  3467 ;; Registers used:
  3468 ;;		wreg, status,2, status,0, pclath, cstack
  3469 ;; Tracked objects:
  3470 ;;		On entry : 0/0
  3471 ;;		On exit  : 0/0
  3472 ;;		Unchanged: 0/0
  3473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3475 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3476 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3477 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3478 ;;Total ram usage:        2 bytes
  3479 ;; Hardware stack levels used:    1
  3480 ;; Hardware stack levels required when called:    3
  3481 ;; This function calls:
  3482 ;;		_uart_received_start
  3483 ;;		_uart_send_byte
  3484 ;; This function is called by:
  3485 ;;		_iap_process
  3486 ;; This function uses a non-reentrant model
  3487 ;;
  3488                           
  3489                           
  3490                           ;psect for function _iap_received_package
  3491  041F                     _iap_received_package:	
  3492                           
  3493                           ;iap.c: 29: uint8_t tm=200;
  3494                           
  3495                           ;incstack = 0
  3496                           ; Regs used in _iap_received_package: [wreg+status,2+status,0+pclath+cstack]
  3497  041F  30C8               	movlw	200
  3498  0420  00F5               	movwf	??_iap_received_package
  3499  0421  0875               	movf	??_iap_received_package,w
  3500  0422  0020               	movlb	0	; select bank0
  3501  0423  00A0               	movwf	iap_received_package@tm
  3502                           
  3503                           ;iap.c: 30: uart_received_start();
  3504  0424  3185  25CF  3184   	fcall	_uart_received_start
  3505                           
  3506                           ;iap.c: 31: Event &= ~(1<<0);
  3507  0427  30FE               	movlw	254
  3508  0428  00F5               	movwf	??_iap_received_package
  3509  0429  0875               	movf	??_iap_received_package,w
  3510  042A  05F9               	andwf	_Event,f	;volatile
  3511                           
  3512                           ;iap.c: 32: if(firstPackage){
  3513  042B  0021               	movlb	1	; select bank1
  3514  042C  0843               	movf	_firstPackage^(0+128),w
  3515  042D  1903               	btfsc	3,2
  3516  042E  2C33               	goto	l2717
  3517                           
  3518                           ;iap.c: 33: uart_send_byte(0x15);
  3519  042F  3015               	movlw	21
  3520  0430  3185  25B5  3184   	fcall	_uart_send_byte
  3521  0433                     l2717:	
  3522                           
  3523                           ;iap.c: 34: }
  3524                           ;iap.c: 35: _delay((unsigned long)((10)*(16000000/4000.0)));
  3525  0433  3034               	movlw	52
  3526  0434  00F5               	movwf	??_iap_received_package
  3527  0435  30F2               	movlw	242
  3528  0436                     u2327:	
  3529  0436  0B89               	decfsz	9,f
  3530  0437  2C36               	goto	u2327
  3531  0438  0BF5               	decfsz	??_iap_received_package,f
  3532  0439  2C36               	goto	u2327
  3533  043A                     l2725:	
  3534                           ;iap.c: 36: while(tm){
  3535                           
  3536  043A  0020               	movlb	0	; select bank0
  3537  043B  0820               	movf	iap_received_package@tm,w
  3538  043C  1D03               	btfss	3,2
  3539                           
  3540                           ;iap.c: 37: if(Event & (1<<0))break;
  3541  043D  1879               	btfsc	_Event,0	;volatile
  3542  043E  2C4B               	goto	l2727
  3543                           
  3544                           ;iap.c: 38: _delay((unsigned long)((2)*(16000000/4000.0)));
  3545  043F  300B               	movlw	11
  3546  0440  00F5               	movwf	??_iap_received_package
  3547  0441  3062               	movlw	98
  3548  0442                     u2337:	
  3549  0442  0B89               	decfsz	9,f
  3550  0443  2C42               	goto	u2337
  3551  0444  0BF5               	decfsz	??_iap_received_package,f
  3552  0445  2C42               	goto	u2337
  3553  0446  3200               	nop2
  3554                           
  3555                           ;iap.c: 39: tm--;
  3556  0447  3001               	movlw	1
  3557  0448  0020               	movlb	0	; select bank0
  3558  0449  02A0               	subwf	iap_received_package@tm,f
  3559  044A  2C3A               	goto	l2725
  3560  044B                     l2727:	
  3561                           
  3562                           ;iap.c: 40: }
  3563                           ;iap.c: 41: if(tm)return _bEusartRxCount;
  3564  044B  0820               	movf	iap_received_package@tm,w
  3565  044C  1903               	btfsc	3,2
  3566  044D  2C50               	goto	l2735
  3567  044E  0878               	movf	__bEusartRxCount,w	;volatile
  3568  044F  0008               	return
  3569  0450                     l2735:	
  3570                           
  3571                           ;iap.c: 42: else
  3572                           ;iap.c: 43: return 0;
  3573  0450  3000               	movlw	0
  3574  0451  0008               	return
  3575  0452                     __end_of_iap_received_package:	
  3576                           
  3577                           	psect	text4
  3578  05B5                     __ptext4:	
  3579 ;; *************** function _uart_send_byte *****************
  3580 ;; Defined at:
  3581 ;;		line 12 in file "src/api/my_uart.c"
  3582 ;; Parameters:    Size  Location     Type
  3583 ;;  x               1    wreg     unsigned char 
  3584 ;; Auto vars:     Size  Location     Type
  3585 ;;  x               1    4[COMMON] unsigned char 
  3586 ;; Return value:  Size  Location     Type
  3587 ;;                  1    wreg      void 
  3588 ;; Registers used:
  3589 ;;		wreg
  3590 ;; Tracked objects:
  3591 ;;		On entry : 0/0
  3592 ;;		On exit  : 0/0
  3593 ;;		Unchanged: 0/0
  3594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3596 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3598 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3599 ;;Total ram usage:        1 bytes
  3600 ;; Hardware stack levels used:    1
  3601 ;; Hardware stack levels required when called:    2
  3602 ;; This function calls:
  3603 ;;		Nothing
  3604 ;; This function is called by:
  3605 ;;		_iap_received_package
  3606 ;;		_iap_process
  3607 ;; This function uses a non-reentrant model
  3608 ;;
  3609                           
  3610                           
  3611                           ;psect for function _uart_send_byte
  3612  05B5                     _uart_send_byte:	
  3613                           
  3614                           ;incstack = 0
  3615                           ; Regs used in _uart_send_byte: [wreg]
  3616                           ;uart_send_byte@x stored from wreg
  3617  05B5  00F4               	movwf	uart_send_byte@x
  3618                           
  3619                           ;my_uart.c: 15: if(!TXSTAbits.TXEN)TXSTAbits.TXEN=1;
  3620  05B6  0023               	movlb	3	; select bank3
  3621  05B7  1E9E               	btfss	30,5	;volatile
  3622  05B8  169E               	bsf	30,5	;volatile
  3623  05B9                     l368:	
  3624                           ;my_uart.c: 16: while(0 == PIR1bits.TXIF);
  3625                           
  3626  05B9  0020               	movlb	0	; select bank0
  3627  05BA  1E11               	btfss	17,4	;volatile
  3628  05BB  2DB9               	goto	l368
  3629                           
  3630                           ;my_uart.c: 17: TXREG = x;
  3631  05BC  0874               	movf	uart_send_byte@x,w
  3632  05BD  0023               	movlb	3	; select bank3
  3633  05BE  009A               	movwf	26	;volatile
  3634  05BF                     l371:	
  3635                           ;my_uart.c: 18: while(0 == PIR1bits.TXIF);
  3636                           
  3637  05BF  0020               	movlb	0	; select bank0
  3638  05C0  1A11               	btfsc	17,4	;volatile
  3639  05C1  0008               	return
  3640  05C2  2DBF               	goto	l371
  3641  05C3                     __end_of_uart_send_byte:	
  3642                           
  3643                           	psect	text5
  3644  05CF                     __ptext5:	
  3645 ;; *************** function _uart_received_start *****************
  3646 ;; Defined at:
  3647 ;;		line 50 in file "src/api/my_uart.c"
  3648 ;; Parameters:    Size  Location     Type
  3649 ;;		None
  3650 ;; Auto vars:     Size  Location     Type
  3651 ;;		None
  3652 ;; Return value:  Size  Location     Type
  3653 ;;                  1    wreg      void 
  3654 ;; Registers used:
  3655 ;;		status,2
  3656 ;; Tracked objects:
  3657 ;;		On entry : 0/0
  3658 ;;		On exit  : 0/0
  3659 ;;		Unchanged: 0/0
  3660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3664 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3665 ;;Total ram usage:        0 bytes
  3666 ;; Hardware stack levels used:    1
  3667 ;; Hardware stack levels required when called:    2
  3668 ;; This function calls:
  3669 ;;		Nothing
  3670 ;; This function is called by:
  3671 ;;		_iap_received_package
  3672 ;;		_main
  3673 ;; This function uses a non-reentrant model
  3674 ;;
  3675                           
  3676                           
  3677                           ;psect for function _uart_received_start
  3678  05CF                     _uart_received_start:	
  3679                           
  3680                           ;my_uart.c: 52: _bEusartRxCount=0;
  3681                           
  3682                           ;incstack = 0
  3683                           ; Regs used in _uart_received_start: [status,2]
  3684  05CF  01F8               	clrf	__bEusartRxCount	;volatile
  3685                           
  3686                           ;my_uart.c: 53: PIE1bits.RCIE = 1;
  3687  05D0  0021               	movlb	1	; select bank1
  3688  05D1  1691               	bsf	17,5	;volatile
  3689                           
  3690                           ;my_uart.c: 54: eusartRxIdleTime_ms=0;
  3691  05D2  01B6               	clrf	_eusartRxIdleTime_ms^(0+128)	;volatile
  3692  05D3  01B7               	clrf	(_eusartRxIdleTime_ms+1)^(0+128)	;volatile
  3693  05D4  0008               	return
  3694  05D5                     __end_of_uart_received_start:	
  3695                           
  3696                           	psect	text6
  3697  039A                     __ptext6:	
  3698 ;; *************** function _decode_xmodem_package *****************
  3699 ;; Defined at:
  3700 ;;		line 134 in file "src/api/iap.c"
  3701 ;; Parameters:    Size  Location     Type
  3702 ;;		None
  3703 ;; Auto vars:     Size  Location     Type
  3704 ;;  xloc            1   24[BANK0 ] unsigned char 
  3705 ;; Return value:  Size  Location     Type
  3706 ;;                  1    wreg      unsigned char 
  3707 ;; Registers used:
  3708 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3709 ;; Tracked objects:
  3710 ;;		On entry : 0/0
  3711 ;;		On exit  : 0/0
  3712 ;;		Unchanged: 0/0
  3713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3715 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3716 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3717 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3718 ;;Total ram usage:        3 bytes
  3719 ;; Hardware stack levels used:    1
  3720 ;; Hardware stack levels required when called:    6
  3721 ;; This function calls:
  3722 ;;		_decode_hex_len
  3723 ;; This function is called by:
  3724 ;;		_iap_process
  3725 ;; This function uses a non-reentrant model
  3726 ;;
  3727                           
  3728                           
  3729                           ;psect for function _decode_xmodem_package
  3730  039A                     _decode_xmodem_package:	
  3731                           
  3732                           ;iap.c: 136: uint8_t xloc=0;
  3733                           
  3734                           ;incstack = 0
  3735                           ; Regs used in _decode_xmodem_package: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  3736  039A  0020               	movlb	0	; select bank0
  3737  039B  01B8               	clrf	decode_xmodem_package@xloc
  3738                           
  3739                           ;iap.c: 137: xloc=3;
  3740  039C  3003               	movlw	3
  3741  039D  00B6               	movwf	??_decode_xmodem_package
  3742  039E  0836               	movf	??_decode_xmodem_package,w
  3743  039F  00B8               	movwf	decode_xmodem_package@xloc
  3744  03A0                     l2751:	
  3745                           ;iap.c: 138: while(xloc<_bEusartRxCount-1){
  3746                           
  3747  03A0  0878               	movf	__bEusartRxCount,w	;volatile
  3748  03A1  3EFF               	addlw	255
  3749  03A2  00B6               	movwf	??_decode_xmodem_package
  3750  03A3  30FF               	movlw	255
  3751  03A4  1803               	skipnc
  3752  03A5  3000               	movlw	0
  3753  03A6  00B7               	movwf	??_decode_xmodem_package+1
  3754  03A7  0837               	movf	??_decode_xmodem_package+1,w
  3755  03A8  3A80               	xorlw	128
  3756  03A9  3C80               	sublw	128
  3757  03AA  1D03               	skipz
  3758  03AB  2BAE               	goto	u2085
  3759  03AC  0836               	movf	??_decode_xmodem_package,w
  3760  03AD  0238               	subwf	decode_xmodem_package@xloc,w
  3761  03AE                     u2085:	
  3762  03AE  1803               	btfsc	3,0
  3763  03AF  2BDE               	goto	l332
  3764                           
  3765                           ;iap.c: 139: hexLineBuffer[hexLineCharCount]=_bEusartRxBuffer[xloc];
  3766  03B0  0020               	movlb	0	; select bank0
  3767  03B1  0838               	movf	decode_xmodem_package@xloc,w
  3768  03B2  3E40               	addlw	64
  3769  03B3  0086               	movwf	6
  3770  03B4  0187               	clrf	7
  3771  03B5  3023               	movlw	35
  3772  03B6  3D87               	addwfc	7,f
  3773  03B7  0801               	movf	1,w
  3774  03B8  00B6               	movwf	??_decode_xmodem_package
  3775  03B9  0021               	movlb	1	; select bank1
  3776  03BA  083A               	movf	_hexLineCharCount^(0+128),w
  3777  03BB  3E20               	addlw	(low (_hexLineBuffer| (0+256)))& (0+255)
  3778  03BC  0086               	movwf	6
  3779  03BD  3001               	movlw	1	; select bank2/3
  3780  03BE  0087               	movwf	7
  3781  03BF  0020               	movlb	0	; select bank0
  3782  03C0  0836               	movf	??_decode_xmodem_package,w
  3783  03C1  0081               	movwf	1
  3784                           
  3785                           ;iap.c: 140: if(_bEusartRxBuffer[xloc]==0x0a){
  3786  03C2  0838               	movf	decode_xmodem_package@xloc,w
  3787  03C3  3E40               	addlw	64
  3788  03C4  0086               	movwf	6
  3789  03C5  0187               	clrf	7
  3790  03C6  3023               	movlw	35
  3791  03C7  3D87               	addwfc	7,f
  3792  03C8  300A               	movlw	10
  3793  03C9  0601               	xorwf	1,w
  3794  03CA  1D03               	btfss	3,2
  3795  03CB  2BD2               	goto	l2749
  3796                           
  3797                           ;iap.c: 141: decode_hex_len();
  3798  03CC  3180  2089  3183   	fcall	_decode_hex_len
  3799                           
  3800                           ;iap.c: 142: hexLineCharCount=0;
  3801  03CF  0021               	movlb	1	; select bank1
  3802  03D0  01BA               	clrf	_hexLineCharCount^(0+128)
  3803                           
  3804                           ;iap.c: 143: }else{
  3805  03D1  2BD8               	goto	l331
  3806  03D2                     l2749:	
  3807                           
  3808                           ;iap.c: 144: hexLineCharCount++;
  3809  03D2  3001               	movlw	1
  3810  03D3  0020               	movlb	0	; select bank0
  3811  03D4  00B6               	movwf	??_decode_xmodem_package
  3812  03D5  0836               	movf	??_decode_xmodem_package,w
  3813  03D6  0021               	movlb	1	; select bank1
  3814  03D7  07BA               	addwf	_hexLineCharCount^(0+128),f
  3815  03D8                     l331:	
  3816                           
  3817                           ;iap.c: 145: }
  3818                           ;iap.c: 146: xloc++;
  3819  03D8  3001               	movlw	1
  3820  03D9  0020               	movlb	0	; select bank0
  3821  03DA  00B6               	movwf	??_decode_xmodem_package
  3822  03DB  0836               	movf	??_decode_xmodem_package,w
  3823  03DC  07B8               	addwf	decode_xmodem_package@xloc,f
  3824  03DD  2BA0               	goto	l2751
  3825  03DE                     l332:	
  3826                           
  3827                           ;iap.c: 147: }
  3828                           ;iap.c: 148: __nop();
  3829  03DE  0000               	nop
  3830                           
  3831                           ;iap.c: 149: return 0;
  3832                           ;	Return value of _decode_xmodem_package is never used
  3833  03DF  0008               	return
  3834  03E0                     __end_of_decode_xmodem_package:	
  3835                           
  3836                           	psect	text7
  3837  0089                     __ptext7:	
  3838 ;; *************** function _decode_hex_len *****************
  3839 ;; Defined at:
  3840 ;;		line 74 in file "src/api/iap.c"
  3841 ;; Parameters:    Size  Location     Type
  3842 ;;		None
  3843 ;; Auto vars:     Size  Location     Type
  3844 ;;  t16             2   19[BANK0 ] unsigned int 
  3845 ;;  i8              1   21[BANK0 ] unsigned char 
  3846 ;; Return value:  Size  Location     Type
  3847 ;;                  1    wreg      unsigned char 
  3848 ;; Registers used:
  3849 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3850 ;; Tracked objects:
  3851 ;;		On entry : 0/0
  3852 ;;		On exit  : 0/0
  3853 ;;		Unchanged: 0/0
  3854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3856 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3857 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3858 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3859 ;;Total ram usage:        5 bytes
  3860 ;; Hardware stack levels used:    1
  3861 ;; Hardware stack levels required when called:    5
  3862 ;; This function calls:
  3863 ;;		_api_write_block
  3864 ;;		_m_mem_set
  3865 ;;		_m_str_h2b
  3866 ;; This function is called by:
  3867 ;;		_decode_xmodem_package
  3868 ;; This function uses a non-reentrant model
  3869 ;;
  3870                           
  3871                           
  3872                           ;psect for function _decode_hex_len
  3873  0089                     _decode_hex_len:	
  3874                           
  3875                           ;iap.c: 76: uint8_t i8;
  3876                           ;iap.c: 77: uint16_t t16;
  3877                           ;iap.c: 78: __nop();
  3878                           
  3879                           ;incstack = 0
  3880                           ; Regs used in _decode_hex_len: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3881  0089  0000               	nop
  3882                           
  3883                           ;iap.c: 79: i8=m_str_h2b(hexLineBuffer,hexLineBuffer+1,hexLineCharCount-3);
  3884  008A  3021               	movlw	(low ((_hexLineBuffer| (0+256)+1)))& (0+255)
  3885  008B  0020               	movlb	0	; select bank0
  3886  008C  00B1               	movwf	??_decode_hex_len
  3887  008D  0831               	movf	??_decode_hex_len,w
  3888  008E  00A2               	movwf	m_str_h2b@h
  3889  008F  0021               	movlb	1	; select bank1
  3890  0090  083A               	movf	_hexLineCharCount^(0+128),w
  3891  0091  3EFD               	addlw	253
  3892  0092  0020               	movlb	0	; select bank0
  3893  0093  00A3               	movwf	m_str_h2b@len
  3894  0094  30FF               	movlw	255
  3895  0095  1803               	skipnc
  3896  0096  3000               	movlw	0
  3897  0097  00A4               	movwf	m_str_h2b@len+1
  3898  0098  3020               	movlw	(low (_hexLineBuffer| (0+256)))& (0+255)
  3899  0099  3183  2344  3180   	fcall	_m_str_h2b
  3900  009C  0020               	movlb	0	; select bank0
  3901  009D  0822               	movf	?_m_str_h2b,w
  3902  009E  00B2               	movwf	??_decode_hex_len+1
  3903  009F  0832               	movf	??_decode_hex_len+1,w
  3904  00A0  00B5               	movwf	decode_hex_len@i8
  3905                           
  3906                           ;iap.c: 81: __nop();
  3907                           
  3908                           ;iap.c: 80: do{
  3909  00A1  0000               	nop
  3910                           
  3911                           ;iap.c: 82: if(hexLineBuffer[3]!=0x00)break;
  3912  00A2  0022               	movlb	2	; select bank2
  3913  00A3  0823               	movf	(_hexLineBuffer^(0+256)+3),w
  3914  00A4  1D03               	btfss	3,2
  3915  00A5  297E               	goto	l2635
  3916                           
  3917                           ;iap.c: 83: t16=hexLineBuffer[1];
  3918  00A6  0821               	movf	(_hexLineBuffer^(0+256)+1),w
  3919  00A7  0020               	movlb	0	; select bank0
  3920  00A8  00B1               	movwf	??_decode_hex_len
  3921  00A9  01B2               	clrf	??_decode_hex_len+1
  3922  00AA  0831               	movf	??_decode_hex_len,w
  3923  00AB  00B3               	movwf	decode_hex_len@t16
  3924  00AC  0832               	movf	??_decode_hex_len+1,w
  3925  00AD  00B4               	movwf	decode_hex_len@t16+1
  3926                           
  3927                           ;iap.c: 84: t16<<=8;
  3928  00AE  3008               	movlw	8
  3929  00AF                     u1925:	
  3930  00AF  35B3               	lslf	decode_hex_len@t16,f
  3931  00B0  0DB4               	rlf	decode_hex_len@t16+1,f
  3932  00B1  0B89               	decfsz	9,f
  3933  00B2  28AF               	goto	u1925
  3934                           
  3935                           ;iap.c: 85: t16|=hexLineBuffer[2];
  3936  00B3  0022               	movlb	2	; select bank2
  3937  00B4  0822               	movf	(_hexLineBuffer^(0+256)+2),w
  3938  00B5  0020               	movlb	0	; select bank0
  3939  00B6  00B1               	movwf	??_decode_hex_len
  3940  00B7  01B2               	clrf	??_decode_hex_len+1
  3941  00B8  0831               	movf	??_decode_hex_len,w
  3942  00B9  04B3               	iorwf	decode_hex_len@t16,f
  3943  00BA  0832               	movf	??_decode_hex_len+1,w
  3944  00BB  04B4               	iorwf	decode_hex_len@t16+1,f
  3945                           
  3946                           ;iap.c: 87: t16>>=1;
  3947  00BC  3001               	movlw	1
  3948  00BD                     u1935:	
  3949  00BD  36B4               	lsrf	decode_hex_len@t16+1,f
  3950  00BE  0CB3               	rrf	decode_hex_len@t16,f
  3951  00BF  0B89               	decfsz	9,f
  3952  00C0  28BD               	goto	u1935
  3953                           
  3954                           ;iap.c: 88: addrInline=t16;
  3955  00C1  0834               	movf	decode_hex_len@t16+1,w
  3956  00C2  0021               	movlb	1	; select bank1
  3957  00C3  00B5               	movwf	(_addrInline+1)^(0+128)
  3958  00C4  0020               	movlb	0	; select bank0
  3959  00C5  0833               	movf	decode_hex_len@t16,w
  3960  00C6  0021               	movlb	1	; select bank1
  3961  00C7  00B4               	movwf	_addrInline^(0+128)
  3962                           
  3963                           ;iap.c: 90: if(addrInline==0x800){
  3964  00C8  3008               	movlw	8
  3965  00C9  0635               	xorwf	(_addrInline+1)^(0+128),w
  3966  00CA  0434               	iorwf	_addrInline^(0+128),w
  3967  00CB  1D03               	btfss	3,2
  3968  00CC  28DF               	goto	l2591
  3969                           
  3970                           ;iap.c: 92: addrInline+=0x01;
  3971  00CD  3001               	movlw	1
  3972  00CE  07B4               	addwf	_addrInline^(0+128),f
  3973  00CF  3000               	movlw	0
  3974  00D0  3DB5               	addwfc	(_addrInline+1)^(0+128),f
  3975                           
  3976                           ;iap.c: 93: binBuffer[binBufferLen]=0x00;
  3977  00D1  3539               	lslf	_binBufferLen^(0+128),w
  3978  00D2  3EA0               	addlw	(low (_binBuffer| (0+256)))& (0+255)
  3979  00D3  0086               	movwf	6
  3980  00D4  3001               	movlw	1	; select bank3/4
  3981  00D5  0087               	movwf	7
  3982  00D6  3000               	movlw	0
  3983  00D7  3FC0               	movwi [0]fsr1
  3984  00D8  3FC1               	movwi [1]fsr1
  3985                           
  3986                           ;iap.c: 94: binBufferLen++;
  3987  00D9  3001               	movlw	1
  3988  00DA  0020               	movlb	0	; select bank0
  3989  00DB  00B1               	movwf	??_decode_hex_len
  3990  00DC  0831               	movf	??_decode_hex_len,w
  3991  00DD  0021               	movlb	1	; select bank1
  3992  00DE  07B9               	addwf	_binBufferLen^(0+128),f
  3993  00DF                     l2591:	
  3994                           
  3995                           ;iap.c: 95: }
  3996                           ;iap.c: 97: lengthInline=hexLineBuffer[0];
  3997  00DF  0022               	movlb	2	; select bank2
  3998  00E0  0820               	movf	_hexLineBuffer^(0+256),w
  3999  00E1  0020               	movlb	0	; select bank0
  4000  00E2  00B1               	movwf	??_decode_hex_len
  4001  00E3  0831               	movf	??_decode_hex_len,w
  4002  00E4  0021               	movlb	1	; select bank1
  4003  00E5  00BB               	movwf	_lengthInline^(0+128)
  4004                           
  4005                           ;iap.c: 99: if(lengthInline==0)break;
  4006  00E6  083B               	movf	_lengthInline^(0+128),w
  4007  00E7  1903               	btfsc	3,2
  4008  00E8  297E               	goto	l2635
  4009  00E9                     l2609:	
  4010  00E9  0839               	movf	_binBufferLen^(0+128),w
  4011  00EA  0741               	addwf	_addrWritedFlash^(0+128),w
  4012  00EB  0020               	movlb	0	; select bank0
  4013  00EC  00B1               	movwf	??_decode_hex_len
  4014  00ED  0021               	movlb	1	; select bank1
  4015  00EE  0842               	movf	(_addrWritedFlash+1)^(0+128),w
  4016  00EF  1803               	skipnc
  4017  00F0  0A42               	incf	(_addrWritedFlash+1)^(0+128),w
  4018  00F1  0020               	movlb	0	; select bank0
  4019  00F2  00B2               	movwf	??_decode_hex_len+1
  4020  00F3  0021               	movlb	1	; select bank1
  4021  00F4  0835               	movf	(_addrInline+1)^(0+128),w
  4022  00F5  0020               	movlb	0	; select bank0
  4023  00F6  0232               	subwf	??_decode_hex_len+1,w
  4024  00F7  1D03               	skipz
  4025  00F8  28FD               	goto	u1975
  4026  00F9  0021               	movlb	1	; select bank1
  4027  00FA  0834               	movf	_addrInline^(0+128),w
  4028  00FB  0020               	movlb	0	; select bank0
  4029  00FC  0231               	subwf	??_decode_hex_len,w
  4030  00FD                     u1975:	
  4031  00FD  1803               	btfsc	3,0
  4032  00FE  2929               	goto	l2611
  4033                           
  4034                           ;iap.c: 102: binBuffer[binBufferLen]=0x3ff;
  4035                           
  4036                           ;iap.c: 101: while(addrWritedFlash+binBufferLen<addrInline){
  4037  00FF  0021               	movlb	1	; select bank1
  4038  0100  3539               	lslf	_binBufferLen^(0+128),w
  4039  0101  3EA0               	addlw	(low (_binBuffer| (0+256)))& (0+255)
  4040  0102  0086               	movwf	6
  4041  0103  3001               	movlw	1	; select bank3/4
  4042  0104  0087               	movwf	7
  4043  0105  30FF               	movlw	255
  4044  0106  3FC0               	movwi [0]fsr1
  4045  0107  3003               	movlw	3
  4046  0108  3FC1               	movwi [1]fsr1
  4047                           
  4048                           ;iap.c: 103: binBufferLen++;
  4049  0109  3001               	movlw	1
  4050  010A  0020               	movlb	0	; select bank0
  4051  010B  00B1               	movwf	??_decode_hex_len
  4052  010C  0831               	movf	??_decode_hex_len,w
  4053  010D  0021               	movlb	1	; select bank1
  4054  010E  07B9               	addwf	_binBufferLen^(0+128),f
  4055                           
  4056                           ;iap.c: 104: if(binBufferLen>=32){
  4057  010F  3020               	movlw	32
  4058  0110  0239               	subwf	_binBufferLen^(0+128),w
  4059  0111  1C03               	skipc
  4060  0112  28E9               	goto	l2609
  4061                           
  4062                           ;iap.c: 105: api_write_block(addrWritedFlash,binBuffer);
  4063  0113  0842               	movf	(_addrWritedFlash+1)^(0+128),w
  4064  0114  0020               	movlb	0	; select bank0
  4065  0115  00AA               	movwf	api_write_block@addr+1
  4066  0116  0021               	movlb	1	; select bank1
  4067  0117  0841               	movf	_addrWritedFlash^(0+128),w
  4068  0118  0020               	movlb	0	; select bank0
  4069  0119  00A9               	movwf	api_write_block@addr
  4070  011A  30A0               	movlw	(low (_binBuffer| (0+256)))& (0+255)
  4071  011B  00B1               	movwf	??_decode_hex_len
  4072  011C  0831               	movf	??_decode_hex_len,w
  4073  011D  00AB               	movwf	api_write_block@binbuf
  4074  011E  3182  22ED  3180   	fcall	_api_write_block
  4075                           
  4076                           ;iap.c: 106: addrWritedFlash+=32;
  4077  0121  3020               	movlw	32
  4078  0122  0021               	movlb	1	; select bank1
  4079  0123  07C1               	addwf	_addrWritedFlash^(0+128),f
  4080  0124  3000               	movlw	0
  4081  0125  3DC2               	addwfc	(_addrWritedFlash+1)^(0+128),f
  4082                           
  4083                           ;iap.c: 107: binBufferLen-=32;
  4084  0126  3020               	movlw	32
  4085  0127  02B9               	subwf	_binBufferLen^(0+128),f
  4086  0128  28E9               	goto	l2609
  4087  0129                     l2611:	
  4088                           
  4089                           ;iap.c: 108: }
  4090                           ;iap.c: 113: }
  4091                           ;iap.c: 115: for(i8=0;i8<lengthInline;i8+=2){
  4092  0129  01B5               	clrf	decode_hex_len@i8
  4093  012A                     l2633:	
  4094  012A  0021               	movlb	1	; select bank1
  4095  012B  083B               	movf	_lengthInline^(0+128),w
  4096  012C  0020               	movlb	0	; select bank0
  4097  012D  0235               	subwf	decode_hex_len@i8,w
  4098  012E  1803               	btfsc	3,0
  4099  012F  297E               	goto	l2635
  4100                           
  4101                           ;iap.c: 116: t16=hexLineBuffer[5+i8];
  4102  0130  0835               	movf	decode_hex_len@i8,w
  4103  0131  3E05               	addlw	5
  4104  0132  3E20               	addlw	(low (_hexLineBuffer| (0+256)))& (0+255)
  4105  0133  0086               	movwf	6
  4106  0134  3001               	movlw	1	; select bank2/3
  4107  0135  0087               	movwf	7
  4108  0136  0801               	movf	1,w
  4109  0137  00B1               	movwf	??_decode_hex_len
  4110  0138  01B2               	clrf	??_decode_hex_len+1
  4111  0139  0831               	movf	??_decode_hex_len,w
  4112  013A  00B3               	movwf	decode_hex_len@t16
  4113  013B  0832               	movf	??_decode_hex_len+1,w
  4114  013C  00B4               	movwf	decode_hex_len@t16+1
  4115                           
  4116                           ;iap.c: 117: t16<<=8;
  4117  013D  3008               	movlw	8
  4118  013E                     u1985:	
  4119  013E  35B3               	lslf	decode_hex_len@t16,f
  4120  013F  0DB4               	rlf	decode_hex_len@t16+1,f
  4121  0140  0B89               	decfsz	9,f
  4122  0141  293E               	goto	u1985
  4123                           
  4124                           ;iap.c: 118: t16|=hexLineBuffer[4+i8];
  4125  0142  0835               	movf	decode_hex_len@i8,w
  4126  0143  3E04               	addlw	4
  4127  0144  3E20               	addlw	(low (_hexLineBuffer| (0+256)))& (0+255)
  4128  0145  0086               	movwf	6
  4129  0146  3001               	movlw	1	; select bank2/3
  4130  0147  0087               	movwf	7
  4131  0148  0801               	movf	1,w
  4132  0149  00B1               	movwf	??_decode_hex_len
  4133  014A  01B2               	clrf	??_decode_hex_len+1
  4134  014B  0831               	movf	??_decode_hex_len,w
  4135  014C  04B3               	iorwf	decode_hex_len@t16,f
  4136  014D  0832               	movf	??_decode_hex_len+1,w
  4137  014E  04B4               	iorwf	decode_hex_len@t16+1,f
  4138                           
  4139                           ;iap.c: 119: binBuffer[binBufferLen]=t16;
  4140  014F  0021               	movlb	1	; select bank1
  4141  0150  3539               	lslf	_binBufferLen^(0+128),w
  4142  0151  3EA0               	addlw	(low (_binBuffer| (0+256)))& (0+255)
  4143  0152  0086               	movwf	6
  4144  0153  3001               	movlw	1	; select bank3/4
  4145  0154  0087               	movwf	7
  4146  0155  0020               	movlb	0	; select bank0
  4147  0156  0833               	movf	decode_hex_len@t16,w
  4148  0157  3FC0               	movwi [0]fsr1
  4149  0158  0834               	movf	decode_hex_len@t16+1,w
  4150  0159  3FC1               	movwi [1]fsr1
  4151                           
  4152                           ;iap.c: 120: binBufferLen++;
  4153  015A  3001               	movlw	1
  4154  015B  00B1               	movwf	??_decode_hex_len
  4155  015C  0831               	movf	??_decode_hex_len,w
  4156  015D  0021               	movlb	1	; select bank1
  4157  015E  07B9               	addwf	_binBufferLen^(0+128),f
  4158                           
  4159                           ;iap.c: 122: if(binBufferLen>=32){
  4160  015F  3020               	movlw	32
  4161  0160  0239               	subwf	_binBufferLen^(0+128),w
  4162  0161  1C03               	skipc
  4163  0162  2978               	goto	l2631
  4164                           
  4165                           ;iap.c: 123: api_write_block(addrWritedFlash,binBuffer);
  4166  0163  0842               	movf	(_addrWritedFlash+1)^(0+128),w
  4167  0164  0020               	movlb	0	; select bank0
  4168  0165  00AA               	movwf	api_write_block@addr+1
  4169  0166  0021               	movlb	1	; select bank1
  4170  0167  0841               	movf	_addrWritedFlash^(0+128),w
  4171  0168  0020               	movlb	0	; select bank0
  4172  0169  00A9               	movwf	api_write_block@addr
  4173  016A  30A0               	movlw	(low (_binBuffer| (0+256)))& (0+255)
  4174  016B  00B1               	movwf	??_decode_hex_len
  4175  016C  0831               	movf	??_decode_hex_len,w
  4176  016D  00AB               	movwf	api_write_block@binbuf
  4177  016E  3182  22ED  3180   	fcall	_api_write_block
  4178                           
  4179                           ;iap.c: 124: addrWritedFlash+=32;
  4180  0171  3020               	movlw	32
  4181  0172  0021               	movlb	1	; select bank1
  4182  0173  07C1               	addwf	_addrWritedFlash^(0+128),f
  4183  0174  3000               	movlw	0
  4184  0175  3DC2               	addwfc	(_addrWritedFlash+1)^(0+128),f
  4185                           
  4186                           ;iap.c: 125: binBufferLen-=32;
  4187  0176  3020               	movlw	32
  4188  0177  02B9               	subwf	_binBufferLen^(0+128),f
  4189  0178                     l2631:	
  4190  0178  3002               	movlw	2
  4191  0179  0020               	movlb	0	; select bank0
  4192  017A  00B1               	movwf	??_decode_hex_len
  4193  017B  0831               	movf	??_decode_hex_len,w
  4194  017C  07B5               	addwf	decode_hex_len@i8,f
  4195  017D  292A               	goto	l2633
  4196  017E                     l2635:	
  4197                           
  4198                           ;iap.c: 126: }
  4199                           ;iap.c: 129: }
  4200                           ;iap.c: 130: }while(0);
  4201                           ;iap.c: 131: m_mem_set(hexLineBuffer,0,sizeof(hexLineBuffer));
  4202  017E  0020               	movlb	0	; select bank0
  4203  017F  01A0               	clrf	m_mem_set@x
  4204  0180  3030               	movlw	48
  4205  0181  00A1               	movwf	m_mem_set@len
  4206  0182  3000               	movlw	0
  4207  0183  00A2               	movwf	m_mem_set@len+1
  4208  0184  3020               	movlw	(low (_hexLineBuffer| (0+256)))& (0+255)
  4209  0185  3185  2532         	fcall	_m_mem_set
  4210  0187  0008               	return
  4211  0188                     __end_of_decode_hex_len:	
  4212                           ;iap.c: 132: return 0;
  4213                           ;	Return value of _decode_hex_len is never used
  4214                           
  4215                           
  4216                           	psect	text8
  4217  0344                     __ptext8:	
  4218 ;; *************** function _m_str_h2b *****************
  4219 ;; Defined at:
  4220 ;;		line 208 in file "src/depend/m_string.c"
  4221 ;; Parameters:    Size  Location     Type
  4222 ;;  b               1    wreg     PTR unsigned char 
  4223 ;;		 -> hexLineBuffer(48), 
  4224 ;;  h               1    2[BANK0 ] PTR unsigned char 
  4225 ;;		 -> hexLineBuffer(48), 
  4226 ;;  len             2    3[BANK0 ] unsigned int 
  4227 ;; Auto vars:     Size  Location     Type
  4228 ;;  b               1    9[BANK0 ] PTR unsigned char 
  4229 ;;		 -> hexLineBuffer(48), 
  4230 ;;  i               2    7[BANK0 ] unsigned int 
  4231 ;;  bb              1   11[BANK0 ] unsigned char 
  4232 ;;  s               1   10[BANK0 ] unsigned char 
  4233 ;; Return value:  Size  Location     Type
  4234 ;;                  2    2[BANK0 ] unsigned int 
  4235 ;; Registers used:
  4236 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4237 ;; Tracked objects:
  4238 ;;		On entry : 0/0
  4239 ;;		On exit  : 0/0
  4240 ;;		Unchanged: 0/0
  4241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4242 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4243 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4244 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4245 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4246 ;;Total ram usage:       10 bytes
  4247 ;; Hardware stack levels used:    1
  4248 ;; Hardware stack levels required when called:    3
  4249 ;; This function calls:
  4250 ;;		__chr2hex
  4251 ;; This function is called by:
  4252 ;;		_decode_hex_len
  4253 ;; This function uses a non-reentrant model
  4254 ;;
  4255                           
  4256                           
  4257                           ;psect for function _m_str_h2b
  4258  0344                     _m_str_h2b:	
  4259                           
  4260                           ;incstack = 0
  4261                           ; Regs used in _m_str_h2b: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4262                           ;m_str_h2b@b stored from wreg
  4263  0344  0020               	movlb	0	; select bank0
  4264  0345  00A9               	movwf	m_str_h2b@b
  4265                           
  4266                           ;m_string.c: 210: uint16_t i=len;
  4267  0346  0824               	movf	m_str_h2b@len+1,w
  4268  0347  00A8               	movwf	m_str_h2b@i+1
  4269  0348  0823               	movf	m_str_h2b@len,w
  4270  0349  00A7               	movwf	m_str_h2b@i
  4271  034A                     l2541:	
  4272                           ;m_string.c: 211: uint8_t bb,s;
  4273                           ;m_string.c: 212: while(i>=2)
  4274                           
  4275  034A  3000               	movlw	0
  4276  034B  0228               	subwf	m_str_h2b@i+1,w
  4277  034C  3002               	movlw	2
  4278  034D  1903               	skipnz
  4279  034E  0227               	subwf	m_str_h2b@i,w
  4280  034F  1C03               	btfss	3,0
  4281  0350  2B8F               	goto	l2543
  4282                           
  4283                           ;m_string.c: 213: {
  4284                           ;m_string.c: 214: bb=0;
  4285  0351  01AB               	clrf	m_str_h2b@bb
  4286                           
  4287                           ;m_string.c: 215: s=*h++;
  4288  0352  0822               	movf	m_str_h2b@h,w
  4289  0353  0086               	movwf	6
  4290  0354  3001               	movlw	1	; select bank2/3
  4291  0355  0087               	movwf	7
  4292  0356  0801               	movf	1,w
  4293  0357  00A5               	movwf	??_m_str_h2b
  4294  0358  0825               	movf	??_m_str_h2b,w
  4295  0359  00AA               	movwf	m_str_h2b@s
  4296  035A  3001               	movlw	1
  4297  035B  00A5               	movwf	??_m_str_h2b
  4298  035C  0825               	movf	??_m_str_h2b,w
  4299  035D  07A2               	addwf	m_str_h2b@h,f
  4300                           
  4301                           ;m_string.c: 217: bb=_chr2hex(s);
  4302  035E  082A               	movf	m_str_h2b@s,w
  4303  035F  3184  2452  3183   	fcall	__chr2hex
  4304  0362  0020               	movlb	0	; select bank0
  4305  0363  00A5               	movwf	??_m_str_h2b
  4306  0364  0825               	movf	??_m_str_h2b,w
  4307  0365  00AB               	movwf	m_str_h2b@bb
  4308                           
  4309                           ;m_string.c: 218: bb<<=4;
  4310  0366  0EAB               	swapf	m_str_h2b@bb,f
  4311  0367  30F0               	movlw	240
  4312  0368  05AB               	andwf	m_str_h2b@bb,f
  4313                           
  4314                           ;m_string.c: 219: s=*h++;
  4315  0369  0822               	movf	m_str_h2b@h,w
  4316  036A  0086               	movwf	6
  4317  036B  3001               	movlw	1	; select bank2/3
  4318  036C  0087               	movwf	7
  4319  036D  0801               	movf	1,w
  4320  036E  00A5               	movwf	??_m_str_h2b
  4321  036F  0825               	movf	??_m_str_h2b,w
  4322  0370  00AA               	movwf	m_str_h2b@s
  4323  0371  3001               	movlw	1
  4324  0372  00A5               	movwf	??_m_str_h2b
  4325  0373  0825               	movf	??_m_str_h2b,w
  4326  0374  07A2               	addwf	m_str_h2b@h,f
  4327                           
  4328                           ;m_string.c: 220: bb= bb+_chr2hex(s);
  4329  0375  082A               	movf	m_str_h2b@s,w
  4330  0376  3184  2452  3183   	fcall	__chr2hex
  4331  0379  0020               	movlb	0	; select bank0
  4332  037A  072B               	addwf	m_str_h2b@bb,w
  4333  037B  00A5               	movwf	??_m_str_h2b
  4334  037C  0825               	movf	??_m_str_h2b,w
  4335  037D  00AB               	movwf	m_str_h2b@bb
  4336                           
  4337                           ;m_string.c: 221: *b++=bb;
  4338  037E  082B               	movf	m_str_h2b@bb,w
  4339  037F  00A5               	movwf	??_m_str_h2b
  4340  0380  0829               	movf	m_str_h2b@b,w
  4341  0381  0086               	movwf	6
  4342  0382  3001               	movlw	1	; select bank2/3
  4343  0383  0087               	movwf	7
  4344  0384  0825               	movf	??_m_str_h2b,w
  4345  0385  0081               	movwf	1
  4346  0386  3001               	movlw	1
  4347  0387  00A5               	movwf	??_m_str_h2b
  4348  0388  0825               	movf	??_m_str_h2b,w
  4349  0389  07A9               	addwf	m_str_h2b@b,f
  4350                           
  4351                           ;m_string.c: 222: i-=2;
  4352  038A  3002               	movlw	2
  4353  038B  02A7               	subwf	m_str_h2b@i,f
  4354  038C  3000               	movlw	0
  4355  038D  3BA8               	subwfb	m_str_h2b@i+1,f
  4356  038E  2B4A               	goto	l2541
  4357  038F                     l2543:	
  4358                           
  4359                           ;m_string.c: 223: }
  4360                           ;m_string.c: 224: return (len>>1);
  4361  038F  0824               	movf	m_str_h2b@len+1,w
  4362  0390  00A6               	movwf	??_m_str_h2b+1
  4363  0391  0823               	movf	m_str_h2b@len,w
  4364  0392  00A5               	movwf	??_m_str_h2b
  4365  0393  36A6               	lsrf	??_m_str_h2b+1,f
  4366  0394  0CA5               	rrf	??_m_str_h2b,f
  4367  0395  0825               	movf	??_m_str_h2b,w
  4368  0396  00A2               	movwf	?_m_str_h2b
  4369  0397  0826               	movf	??_m_str_h2b+1,w
  4370  0398  00A3               	movwf	?_m_str_h2b+1
  4371  0399  0008               	return
  4372  039A                     __end_of_m_str_h2b:	
  4373                           
  4374                           	psect	text9
  4375  0452                     __ptext9:	
  4376 ;; *************** function __chr2hex *****************
  4377 ;; Defined at:
  4378 ;;		line 197 in file "src/depend/m_string.c"
  4379 ;; Parameters:    Size  Location     Type
  4380 ;;  c               1    wreg     unsigned char 
  4381 ;; Auto vars:     Size  Location     Type
  4382 ;;  c               1    1[BANK0 ] unsigned char 
  4383 ;;  h               1    0[BANK0 ] unsigned char 
  4384 ;; Return value:  Size  Location     Type
  4385 ;;                  1    wreg      unsigned char 
  4386 ;; Registers used:
  4387 ;;		wreg, status,2, status,0
  4388 ;; Tracked objects:
  4389 ;;		On entry : 0/0
  4390 ;;		On exit  : 0/0
  4391 ;;		Unchanged: 0/0
  4392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4394 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4395 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4396 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4397 ;;Total ram usage:        3 bytes
  4398 ;; Hardware stack levels used:    1
  4399 ;; Hardware stack levels required when called:    2
  4400 ;; This function calls:
  4401 ;;		Nothing
  4402 ;; This function is called by:
  4403 ;;		_m_str_h2b
  4404 ;; This function uses a non-reentrant model
  4405 ;;
  4406                           
  4407                           
  4408                           ;psect for function __chr2hex
  4409  0452                     __chr2hex:	
  4410                           
  4411                           ;incstack = 0
  4412                           ; Regs used in __chr2hex: [wreg+status,2+status,0]
  4413                           ;__chr2hex@c stored from wreg
  4414  0452  0020               	movlb	0	; select bank0
  4415  0453  00A1               	movwf	__chr2hex@c
  4416                           
  4417                           ;m_string.c: 198: uint8_t h=0;
  4418  0454  01A0               	clrf	__chr2hex@h
  4419                           
  4420                           ;m_string.c: 199: if(c>='0' && c <='9')h|=(c-'0');
  4421  0455  3030               	movlw	48
  4422  0456  0221               	subwf	__chr2hex@c,w
  4423  0457  1C03               	skipc
  4424  0458  2C60               	goto	l2481
  4425  0459  303A               	movlw	58
  4426  045A  0221               	subwf	__chr2hex@c,w
  4427  045B  1803               	skipnc
  4428  045C  2C60               	goto	l2481
  4429  045D  0821               	movf	__chr2hex@c,w
  4430  045E  3ED0               	addlw	208
  4431  045F  2C75               	goto	L3
  4432  0460                     l2481:	
  4433                           
  4434                           ;m_string.c: 200: else if(c>='A' && c<='F')h|=(c-'A'+0x0a);
  4435  0460  3041               	movlw	65
  4436  0461  0221               	subwf	__chr2hex@c,w
  4437  0462  1C03               	skipc
  4438  0463  2C6B               	goto	l2487
  4439  0464  3047               	movlw	71
  4440  0465  0221               	subwf	__chr2hex@c,w
  4441  0466  1803               	skipnc
  4442  0467  2C6B               	goto	l2487
  4443  0468  0821               	movf	__chr2hex@c,w
  4444  0469  3EC9               	addlw	201
  4445  046A  2C75               	goto	L3
  4446  046B                     l2487:	
  4447                           
  4448                           ;m_string.c: 201: else if(c>='a' && c<='f')h|=(c-'a'+0x0a);
  4449  046B  3061               	movlw	97
  4450  046C  0221               	subwf	__chr2hex@c,w
  4451  046D  1C03               	skipc
  4452  046E  2C78               	goto	l2493
  4453  046F  3067               	movlw	103
  4454  0470  0221               	subwf	__chr2hex@c,w
  4455  0471  1803               	skipnc
  4456  0472  2C78               	goto	l2493
  4457  0473  0821               	movf	__chr2hex@c,w
  4458  0474  3EA9               	addlw	169
  4459  0475                     L3:	
  4460  0475  00F4               	movwf	??__chr2hex
  4461  0476  0874               	movf	??__chr2hex,w
  4462  0477  04A0               	iorwf	__chr2hex@h,f
  4463  0478                     l2493:	
  4464                           
  4465                           ;m_string.c: 203: return h;
  4466  0478  0820               	movf	__chr2hex@h,w
  4467  0479  0008               	return
  4468  047A                     __end_of__chr2hex:	
  4469                           
  4470                           	psect	text10
  4471  0532                     __ptext10:	
  4472 ;; *************** function _m_mem_set *****************
  4473 ;; Defined at:
  4474 ;;		line 32 in file "src/depend/m_string.c"
  4475 ;; Parameters:    Size  Location     Type
  4476 ;;  buf             1    wreg     PTR unsigned char 
  4477 ;;		 -> hexLineBuffer(48), 
  4478 ;;  x               1    0[BANK0 ] unsigned char 
  4479 ;;  len             2    1[BANK0 ] unsigned int 
  4480 ;; Auto vars:     Size  Location     Type
  4481 ;;  buf             1    5[COMMON] PTR unsigned char 
  4482 ;;		 -> hexLineBuffer(48), 
  4483 ;; Return value:  Size  Location     Type
  4484 ;;                  1    wreg      void 
  4485 ;; Registers used:
  4486 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4487 ;; Tracked objects:
  4488 ;;		On entry : 0/0
  4489 ;;		On exit  : 0/0
  4490 ;;		Unchanged: 0/0
  4491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4492 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4493 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4494 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4495 ;;      Totals:         2       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4496 ;;Total ram usage:        5 bytes
  4497 ;; Hardware stack levels used:    1
  4498 ;; Hardware stack levels required when called:    2
  4499 ;; This function calls:
  4500 ;;		Nothing
  4501 ;; This function is called by:
  4502 ;;		_decode_hex_len
  4503 ;; This function uses a non-reentrant model
  4504 ;;
  4505                           
  4506                           
  4507                           ;psect for function _m_mem_set
  4508  0532                     _m_mem_set:	
  4509                           
  4510                           ;incstack = 0
  4511                           ; Regs used in _m_mem_set: [wreg+fsr1l+fsr1h+status,2+status,0]
  4512                           ;m_mem_set@buf stored from wreg
  4513  0532  00F5               	movwf	m_mem_set@buf
  4514  0533                     l2553:	
  4515                           ;m_string.c: 34: while(len--)
  4516                           
  4517  0533  3001               	movlw	1
  4518  0534  0020               	movlb	0	; select bank0
  4519  0535  02A1               	subwf	m_mem_set@len,f
  4520  0536  3000               	movlw	0
  4521  0537  3BA2               	subwfb	m_mem_set@len+1,f
  4522  0538  0A21               	incf	m_mem_set@len,w
  4523  0539  1903               	btfsc	3,2
  4524  053A  0A22               	incf	m_mem_set@len+1,w
  4525  053B  1903               	btfsc	3,2
  4526  053C  0008               	return
  4527                           
  4528                           ;m_string.c: 35: {
  4529                           ;m_string.c: 36: *buf++=x;
  4530  053D  0020               	movlb	0	; select bank0
  4531  053E  0820               	movf	m_mem_set@x,w
  4532  053F  00F4               	movwf	??_m_mem_set
  4533  0540  0875               	movf	m_mem_set@buf,w
  4534  0541  0086               	movwf	6
  4535  0542  3001               	movlw	1	; select bank2/3
  4536  0543  0087               	movwf	7
  4537  0544  0874               	movf	??_m_mem_set,w
  4538  0545  0081               	movwf	1
  4539  0546  3001               	movlw	1
  4540  0547  00F4               	movwf	??_m_mem_set
  4541  0548  0874               	movf	??_m_mem_set,w
  4542  0549  07F5               	addwf	m_mem_set@buf,f
  4543  054A  2D33               	goto	l2553
  4544  054B                     __end_of_m_mem_set:	
  4545                           
  4546                           	psect	text11
  4547  02ED                     __ptext11:	
  4548 ;; *************** function _api_write_block *****************
  4549 ;; Defined at:
  4550 ;;		line 56 in file "src/api/iap.c"
  4551 ;; Parameters:    Size  Location     Type
  4552 ;;  addr            2    9[BANK0 ] unsigned int 
  4553 ;;  binbuf          1   11[BANK0 ] PTR unsigned int 
  4554 ;;		 -> binBuffer(80), 
  4555 ;; Auto vars:     Size  Location     Type
  4556 ;;  buf            64    0[BANK4 ] unsigned int [32]
  4557 ;;  i               1   64[BANK4 ] unsigned char 
  4558 ;; Return value:  Size  Location     Type
  4559 ;;                  1    wreg      unsigned char 
  4560 ;; Registers used:
  4561 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4562 ;; Tracked objects:
  4563 ;;		On entry : 0/0
  4564 ;;		On exit  : 0/0
  4565 ;;		Unchanged: 0/0
  4566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4567 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4568 ;;      Locals:         0       0       0       0       0      65       0       0       0       0       0       0       
      +0       0
  4569 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4570 ;;      Totals:         0       8       0       0       0      65       0       0       0       0       0       0       
      +0       0
  4571 ;;Total ram usage:       73 bytes
  4572 ;; Hardware stack levels used:    1
  4573 ;; Hardware stack levels required when called:    4
  4574 ;; This function calls:
  4575 ;;		_FLASH_EraseBlock
  4576 ;;		_FLASH_ReadWord
  4577 ;;		_FLASH_WriteBlock
  4578 ;; This function is called by:
  4579 ;;		_decode_hex_len
  4580 ;; This function uses a non-reentrant model
  4581 ;;
  4582                           
  4583                           
  4584                           ;psect for function _api_write_block
  4585  02ED                     _api_write_block:	
  4586                           
  4587                           ;iap.c: 58: uint8_t i;
  4588                           ;iap.c: 59: uint16_t buf[32];
  4589                           ;iap.c: 61: FLASH_EraseBlock(addr);
  4590                           
  4591                           ;incstack = 0
  4592                           ; Regs used in _api_write_block: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4593  02ED  0020               	movlb	0	; select bank0
  4594  02EE  082A               	movf	api_write_block@addr+1,w
  4595  02EF  00F5               	movwf	FLASH_EraseBlock@startAddr+1
  4596  02F0  0829               	movf	api_write_block@addr,w
  4597  02F1  00F4               	movwf	FLASH_EraseBlock@startAddr
  4598  02F2  3184  24C3  3182   	fcall	_FLASH_EraseBlock
  4599                           
  4600                           ;iap.c: 62: FLASH_WriteBlock(addr,binbuf);
  4601  02F5  0020               	movlb	0	; select bank0
  4602  02F6  082A               	movf	api_write_block@addr+1,w
  4603  02F7  00A2               	movwf	FLASH_WriteBlock@writeAddr+1
  4604  02F8  0829               	movf	api_write_block@addr,w
  4605  02F9  00A1               	movwf	FLASH_WriteBlock@writeAddr
  4606  02FA  082B               	movf	api_write_block@binbuf,w
  4607  02FB  00AC               	movwf	??_api_write_block
  4608  02FC  082C               	movf	??_api_write_block,w
  4609  02FD  00A3               	movwf	FLASH_WriteBlock@flashWordArray
  4610  02FE  3182  2290  3182   	fcall	_FLASH_WriteBlock
  4611                           
  4612                           ;iap.c: 63: for (i=0; i<32; i++){
  4613  0301  0024               	movlb	4	; select bank4
  4614  0302  01E0               	clrf	api_write_block@i^(0+512)
  4615  0303                     L4:	
  4616  0303  3020               	movlw	32
  4617  0304  0260               	subwf	api_write_block@i^(0+512),w
  4618  0305  1803               	btfsc	3,0
  4619  0306  0008               	return
  4620                           
  4621                           ;iap.c: 64: buf[i] = FLASH_ReadWord((addr+i));
  4622  0307  0860               	movf	api_write_block@i^(0+512),w
  4623  0308  0020               	movlb	0	; select bank0
  4624  0309  0729               	addwf	api_write_block@addr,w
  4625  030A  00F4               	movwf	FLASH_ReadWord@flashAddr
  4626  030B  082A               	movf	api_write_block@addr+1,w
  4627  030C  1803               	skipnc
  4628  030D  0A2A               	incf	api_write_block@addr+1,w
  4629  030E  00F5               	movwf	FLASH_ReadWord@flashAddr+1
  4630  030F  3184  24FD  3182   	fcall	_FLASH_ReadWord
  4631  0312  0024               	movlb	4	; select bank4
  4632  0313  3560               	lslf	api_write_block@i^(0+512),w
  4633  0314  3E20               	addlw	(low (api_write_block@buf| (0+512)))& (0+255)
  4634  0315  0086               	movwf	6
  4635  0316  3002               	movlw	2	; select bank4/5
  4636  0317  0087               	movwf	7
  4637  0318  0874               	movf	?_FLASH_ReadWord,w
  4638  0319  3FC0               	movwi [0]fsr1
  4639  031A  0875               	movf	?_FLASH_ReadWord+1,w
  4640  031B  3FC1               	movwi [1]fsr1
  4641                           
  4642                           ;iap.c: 65: if(buf[i]!=binbuf[i]){
  4643  031C  3560               	lslf	api_write_block@i^(0+512),w
  4644  031D  0020               	movlb	0	; select bank0
  4645  031E  072B               	addwf	api_write_block@binbuf,w
  4646  031F  00AC               	movwf	??_api_write_block
  4647  0320  082C               	movf	??_api_write_block,w
  4648  0321  0086               	movwf	6
  4649  0322  3001               	movlw	1	; select bank2/3
  4650  0323  0087               	movwf	7
  4651  0324  3F40               	moviw [0]fsr1
  4652  0325  00AD               	movwf	??_api_write_block+1
  4653  0326  3F41               	moviw [1]fsr1
  4654  0327  00AE               	movwf	??_api_write_block+2
  4655  0328  0024               	movlb	4	; select bank4
  4656  0329  3560               	lslf	api_write_block@i^(0+512),w
  4657  032A  3E20               	addlw	(low (api_write_block@buf| (0+512)))& (0+255)
  4658  032B  0086               	movwf	6
  4659  032C  3002               	movlw	2	; select bank4/5
  4660  032D  0087               	movwf	7
  4661  032E  3F40               	moviw [0]fsr1
  4662  032F  0020               	movlb	0	; select bank0
  4663  0330  00AF               	movwf	??_api_write_block+3
  4664  0331  3F41               	moviw [1]fsr1
  4665  0332  00B0               	movwf	??_api_write_block+4
  4666  0333  082E               	movf	??_api_write_block+2,w
  4667  0334  0630               	xorwf	??_api_write_block+4,w
  4668  0335  1D03               	skipz
  4669  0336  2B39               	goto	u1845
  4670  0337  082D               	movf	??_api_write_block+1,w
  4671  0338  062F               	xorwf	??_api_write_block+3,w
  4672  0339                     u1845:	
  4673  0339  1903               	skipnz
  4674  033A  2B3D               	goto	l2513
  4675                           
  4676                           ;iap.c: 66: __nop();
  4677  033B  0000               	nop
  4678                           
  4679                           ;iap.c: 67: __nop();
  4680  033C  0000               	nop
  4681  033D                     l2513:	
  4682  033D  3001               	movlw	1
  4683  033E  0020               	movlb	0	; select bank0
  4684  033F  00AC               	movwf	??_api_write_block
  4685  0340  082C               	movf	??_api_write_block,w
  4686  0341  0024               	movlb	4	; select bank4
  4687  0342  07E0               	addwf	api_write_block@i^(0+512),f
  4688  0343  2B03               	goto	L4
  4689  0344                     __end_of_api_write_block:	
  4690                           ;iap.c: 68: }
  4691                           ;iap.c: 69: }
  4692                           ;iap.c: 70: return 0;
  4693                           ;	Return value of _api_write_block is never used
  4694                           
  4695                           
  4696                           	psect	text12
  4697  0290                     __ptext12:	
  4698 ;; *************** function _FLASH_WriteBlock *****************
  4699 ;; Defined at:
  4700 ;;		line 93 in file "mcc_generated_files/memory.c"
  4701 ;; Parameters:    Size  Location     Type
  4702 ;;  writeAddr       2    1[BANK0 ] unsigned int 
  4703 ;;  flashWordArr    1    3[BANK0 ] PTR unsigned int 
  4704 ;;		 -> binBuffer(80), 
  4705 ;; Auto vars:     Size  Location     Type
  4706 ;;  i               1    8[BANK0 ] unsigned char 
  4707 ;;  GIEBitValue     1    7[BANK0 ] unsigned char 
  4708 ;; Return value:  Size  Location     Type
  4709 ;;                  1    wreg      char 
  4710 ;; Registers used:
  4711 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4712 ;; Tracked objects:
  4713 ;;		On entry : 0/0
  4714 ;;		On exit  : 0/0
  4715 ;;		Unchanged: 0/0
  4716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4717 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4718 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4719 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4720 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4721 ;;Total ram usage:        8 bytes
  4722 ;; Hardware stack levels used:    1
  4723 ;; Hardware stack levels required when called:    3
  4724 ;; This function calls:
  4725 ;;		_FLASH_EraseBlock
  4726 ;; This function is called by:
  4727 ;;		_api_write_block
  4728 ;;		_iap_process
  4729 ;;		_FLASH_WriteWord
  4730 ;; This function uses a non-reentrant model
  4731 ;;
  4732                           
  4733                           
  4734                           ;psect for function _FLASH_WriteBlock
  4735  0290                     _FLASH_WriteBlock:	
  4736                           
  4737                           ;memory.c: 96: uint8_t GIEBitValue = INTCONbits.GIE;
  4738                           
  4739                           ;incstack = 0
  4740                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4741  0290  3000               	movlw	0
  4742  0291  1B8B               	btfsc	11,7	;volatile
  4743  0292  3001               	movlw	1
  4744  0293  0020               	movlb	0	; select bank0
  4745  0294  00A7               	movwf	FLASH_WriteBlock@GIEBitValue
  4746                           
  4747                           ;memory.c: 97: uint8_t i;
  4748                           ;memory.c: 106: INTCONbits.GIE = 0;
  4749  0295  138B               	bcf	11,7	;volatile
  4750                           
  4751                           ;memory.c: 109: FLASH_EraseBlock(writeAddr);
  4752  0296  0822               	movf	FLASH_WriteBlock@writeAddr+1,w
  4753  0297  00F5               	movwf	FLASH_EraseBlock@startAddr+1
  4754  0298  0821               	movf	FLASH_WriteBlock@writeAddr,w
  4755  0299  00F4               	movwf	FLASH_EraseBlock@startAddr
  4756  029A  3184  24C3  3182   	fcall	_FLASH_EraseBlock
  4757                           
  4758                           ;memory.c: 112: PMCON1bits.CFGS = 0;
  4759  029D  0023               	movlb	3	; select bank3
  4760  029E  1315               	bcf	21,6	;volatile
  4761                           
  4762                           ;memory.c: 113: PMCON1bits.WREN = 1;
  4763  029F  1515               	bsf	21,2	;volatile
  4764                           
  4765                           ;memory.c: 114: PMCON1bits.LWLO = 1;
  4766  02A0  1695               	bsf	21,5	;volatile
  4767                           
  4768                           ;memory.c: 116: for (i=0; i<32; i++)
  4769  02A1  0020               	movlb	0	; select bank0
  4770  02A2  01A8               	clrf	FLASH_WriteBlock@i
  4771  02A3  3020               	movlw	32
  4772  02A4  0228               	subwf	FLASH_WriteBlock@i,w
  4773  02A5  1803               	btfsc	3,0
  4774  02A6  2AE4               	goto	l193
  4775  02A7                     l2445:	
  4776                           
  4777                           ;memory.c: 117: {
  4778                           ;memory.c: 119: PMADRL = (writeAddr & 0xFF);
  4779  02A7  0821               	movf	FLASH_WriteBlock@writeAddr,w
  4780  02A8  0023               	movlb	3	; select bank3
  4781  02A9  0091               	movwf	17	;volatile
  4782                           
  4783                           ;memory.c: 121: PMADRH = ((writeAddr & 0xFF00) >> 8);
  4784  02AA  0020               	movlb	0	; select bank0
  4785  02AB  0822               	movf	FLASH_WriteBlock@writeAddr+1,w
  4786  02AC  0023               	movlb	3	; select bank3
  4787  02AD  0092               	movwf	18	;volatile
  4788                           
  4789                           ;memory.c: 124: PMDATL = flashWordArray[i];
  4790  02AE  0020               	movlb	0	; select bank0
  4791  02AF  3528               	lslf	FLASH_WriteBlock@i,w
  4792  02B0  0723               	addwf	FLASH_WriteBlock@flashWordArray,w
  4793  02B1  00A4               	movwf	??_FLASH_WriteBlock
  4794  02B2  0824               	movf	??_FLASH_WriteBlock,w
  4795  02B3  0086               	movwf	6
  4796  02B4  3001               	movlw	1	; select bank2/3
  4797  02B5  0087               	movwf	7
  4798  02B6  0801               	movf	1,w
  4799  02B7  0023               	movlb	3	; select bank3
  4800  02B8  0093               	movwf	19	;volatile
  4801                           
  4802                           ;memory.c: 125: PMDATH = ((flashWordArray[i] & 0xFF00) >> 8);
  4803  02B9  0020               	movlb	0	; select bank0
  4804  02BA  3528               	lslf	FLASH_WriteBlock@i,w
  4805  02BB  0723               	addwf	FLASH_WriteBlock@flashWordArray,w
  4806  02BC  00A4               	movwf	??_FLASH_WriteBlock
  4807  02BD  0824               	movf	??_FLASH_WriteBlock,w
  4808  02BE  0086               	movwf	6
  4809  02BF  3001               	movlw	1	; select bank2/3
  4810  02C0  0087               	movwf	7
  4811  02C1  3F40               	moviw [0]fsr1
  4812  02C2  00A5               	movwf	??_FLASH_WriteBlock+1
  4813  02C3  3F41               	moviw [1]fsr1
  4814  02C4  00A6               	movwf	??_FLASH_WriteBlock+2
  4815  02C5  0826               	movf	??_FLASH_WriteBlock+2,w
  4816  02C6  0023               	movlb	3	; select bank3
  4817  02C7  0094               	movwf	20	;volatile
  4818                           
  4819                           ;memory.c: 127: if(i == (32-1))
  4820  02C8  301F               	movlw	31
  4821  02C9  0020               	movlb	0	; select bank0
  4822  02CA  0628               	xorwf	FLASH_WriteBlock@i,w
  4823  02CB  1D03               	btfss	3,2
  4824  02CC  2ACF               	goto	l2457
  4825                           
  4826                           ;memory.c: 128: {
  4827                           ;memory.c: 130: PMCON1bits.LWLO = 0;
  4828  02CD  0023               	movlb	3	; select bank3
  4829  02CE  1295               	bcf	21,5	;volatile
  4830  02CF                     l2457:	
  4831                           
  4832                           ;memory.c: 131: }
  4833                           ;memory.c: 133: PMCON2 = 0x55;
  4834  02CF  3055               	movlw	85
  4835  02D0  0023               	movlb	3	; select bank3
  4836  02D1  0096               	movwf	22	;volsfr
  4837                           
  4838                           ;memory.c: 134: PMCON2 = 0xAA;
  4839  02D2  30AA               	movlw	170
  4840  02D3  0096               	movwf	22	;volsfr
  4841                           
  4842                           ;memory.c: 135: PMCON1bits.WR = 1;
  4843  02D4  1495               	bsf	21,1	;volatile
  4844                           
  4845                           ;memory.c: 136: __nop();
  4846  02D5  0000               	nop
  4847                           
  4848                           ;memory.c: 137: __nop();
  4849  02D6  0000               	nop
  4850                           
  4851                           ;memory.c: 139: writeAddr++;
  4852  02D7  3001               	movlw	1
  4853  02D8  0020               	movlb	0	; select bank0
  4854  02D9  07A1               	addwf	FLASH_WriteBlock@writeAddr,f
  4855  02DA  3000               	movlw	0
  4856  02DB  3DA2               	addwfc	FLASH_WriteBlock@writeAddr+1,f
  4857  02DC  3001               	movlw	1
  4858  02DD  00A4               	movwf	??_FLASH_WriteBlock
  4859  02DE  0824               	movf	??_FLASH_WriteBlock,w
  4860  02DF  07A8               	addwf	FLASH_WriteBlock@i,f
  4861  02E0  3020               	movlw	32
  4862  02E1  0228               	subwf	FLASH_WriteBlock@i,w
  4863  02E2  1C03               	skipc
  4864  02E3  2AA7               	goto	l2445
  4865  02E4                     l193:	
  4866                           
  4867                           ;memory.c: 140: }
  4868                           ;memory.c: 142: PMCON1bits.WREN = 0;
  4869  02E4  0023               	movlb	3	; select bank3
  4870  02E5  1115               	bcf	21,2	;volatile
  4871                           
  4872                           ;memory.c: 143: INTCONbits.GIE = GIEBitValue;
  4873  02E6  0020               	movlb	0	; select bank0
  4874  02E7  0C27               	rrf	FLASH_WriteBlock@GIEBitValue,w
  4875  02E8  1C03               	skipc
  4876  02E9  138B               	bcf	11,7	;volatile
  4877  02EA  1803               	skipnc
  4878  02EB  178B               	bsf	11,7	;volatile
  4879  02EC  0008               	return
  4880  02ED                     __end_of_FLASH_WriteBlock:	
  4881                           ;memory.c: 145: return 0;
  4882                           ;	Return value of _FLASH_WriteBlock is never used
  4883                           
  4884                           
  4885                           	psect	text13
  4886  04C3                     __ptext13:	
  4887 ;; *************** function _FLASH_EraseBlock *****************
  4888 ;; Defined at:
  4889 ;;		line 148 in file "mcc_generated_files/memory.c"
  4890 ;; Parameters:    Size  Location     Type
  4891 ;;  startAddr       2    4[COMMON] unsigned int 
  4892 ;; Auto vars:     Size  Location     Type
  4893 ;;  GIEBitValue     1    0[BANK0 ] unsigned char 
  4894 ;; Return value:  Size  Location     Type
  4895 ;;                  1    wreg      void 
  4896 ;; Registers used:
  4897 ;;		wreg, status,2, status,0
  4898 ;; Tracked objects:
  4899 ;;		On entry : 0/0
  4900 ;;		On exit  : 0/0
  4901 ;;		Unchanged: 0/0
  4902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4903 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4904 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4906 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4907 ;;Total ram usage:        3 bytes
  4908 ;; Hardware stack levels used:    1
  4909 ;; Hardware stack levels required when called:    2
  4910 ;; This function calls:
  4911 ;;		Nothing
  4912 ;; This function is called by:
  4913 ;;		_FLASH_WriteBlock
  4914 ;;		_api_write_block
  4915 ;; This function uses a non-reentrant model
  4916 ;;
  4917                           
  4918                           
  4919                           ;psect for function _FLASH_EraseBlock
  4920  04C3                     _FLASH_EraseBlock:	
  4921                           
  4922                           ;memory.c: 150: uint8_t GIEBitValue = INTCONbits.GIE;
  4923                           
  4924                           ;incstack = 0
  4925                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  4926  04C3  3000               	movlw	0
  4927  04C4  1B8B               	btfsc	11,7	;volatile
  4928  04C5  3001               	movlw	1
  4929  04C6  0020               	movlb	0	; select bank0
  4930  04C7  00A0               	movwf	FLASH_EraseBlock@GIEBitValue
  4931                           
  4932                           ;memory.c: 153: INTCONbits.GIE = 0;
  4933  04C8  138B               	bcf	11,7	;volatile
  4934                           
  4935                           ;memory.c: 155: PMADRL = (startAddr & 0xFF);
  4936  04C9  0874               	movf	FLASH_EraseBlock@startAddr,w
  4937  04CA  0023               	movlb	3	; select bank3
  4938  04CB  0091               	movwf	17	;volatile
  4939                           
  4940                           ;memory.c: 157: PMADRH = ((startAddr & 0xFF00) >> 8);
  4941  04CC  0875               	movf	FLASH_EraseBlock@startAddr+1,w
  4942  04CD  0092               	movwf	18	;volatile
  4943                           
  4944                           ;memory.c: 160: PMCON1bits.CFGS = 0;
  4945  04CE  1315               	bcf	21,6	;volatile
  4946                           
  4947                           ;memory.c: 161: PMCON1bits.FREE = 1;
  4948  04CF  1615               	bsf	21,4	;volatile
  4949                           
  4950                           ;memory.c: 162: PMCON1bits.WREN = 1;
  4951  04D0  1515               	bsf	21,2	;volatile
  4952                           
  4953                           ;memory.c: 165: PMCON2 = 0x55;
  4954  04D1  3055               	movlw	85
  4955  04D2  0096               	movwf	22	;volsfr
  4956                           
  4957                           ;memory.c: 166: PMCON2 = 0xAA;
  4958  04D3  30AA               	movlw	170
  4959  04D4  0096               	movwf	22	;volsfr
  4960                           
  4961                           ;memory.c: 167: PMCON1bits.WR = 1;
  4962  04D5  1495               	bsf	21,1	;volatile
  4963                           
  4964                           ;memory.c: 168: __nop();
  4965  04D6  0000               	nop
  4966                           
  4967                           ;memory.c: 169: __nop();
  4968  04D7  0000               	nop
  4969                           
  4970                           ;memory.c: 171: PMCON1bits.WREN = 0;
  4971  04D8  0023               	movlb	3	; select bank3
  4972  04D9  1115               	bcf	21,2	;volatile
  4973                           
  4974                           ;memory.c: 172: INTCONbits.GIE = GIEBitValue;
  4975  04DA  0020               	movlb	0	; select bank0
  4976  04DB  0C20               	rrf	FLASH_EraseBlock@GIEBitValue,w
  4977  04DC  1C03               	skipc
  4978  04DD  138B               	bcf	11,7	;volatile
  4979  04DE  1803               	skipnc
  4980  04DF  178B               	bsf	11,7	;volatile
  4981  04E0  0008               	return
  4982  04E1                     __end_of_FLASH_EraseBlock:	
  4983                           
  4984                           	psect	text14
  4985  04FD                     __ptext14:	
  4986 ;; *************** function _FLASH_ReadWord *****************
  4987 ;; Defined at:
  4988 ;;		line 57 in file "mcc_generated_files/memory.c"
  4989 ;; Parameters:    Size  Location     Type
  4990 ;;  flashAddr       2    4[COMMON] unsigned int 
  4991 ;; Auto vars:     Size  Location     Type
  4992 ;;  GIEBitValue     1    0[BANK0 ] unsigned char 
  4993 ;; Return value:  Size  Location     Type
  4994 ;;                  2    4[COMMON] unsigned int 
  4995 ;; Registers used:
  4996 ;;		wreg, status,2, status,0
  4997 ;; Tracked objects:
  4998 ;;		On entry : 0/0
  4999 ;;		On exit  : 0/0
  5000 ;;		Unchanged: 0/0
  5001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5002 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5003 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5005 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5006 ;;Total ram usage:        3 bytes
  5007 ;; Hardware stack levels used:    1
  5008 ;; Hardware stack levels required when called:    2
  5009 ;; This function calls:
  5010 ;;		Nothing
  5011 ;; This function is called by:
  5012 ;;		_api_write_block
  5013 ;;		_main
  5014 ;;		_FLASH_WriteWord
  5015 ;; This function uses a non-reentrant model
  5016 ;;
  5017                           
  5018                           
  5019                           ;psect for function _FLASH_ReadWord
  5020  04FD                     _FLASH_ReadWord:	
  5021                           
  5022                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
  5023                           
  5024                           ;incstack = 0
  5025                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
  5026  04FD  3000               	movlw	0
  5027  04FE  1B8B               	btfsc	11,7	;volatile
  5028  04FF  3001               	movlw	1
  5029  0500  0020               	movlb	0	; select bank0
  5030  0501  00A0               	movwf	FLASH_ReadWord@GIEBitValue
  5031                           
  5032                           ;memory.c: 61: INTCONbits.GIE = 0;
  5033  0502  138B               	bcf	11,7	;volatile
  5034                           
  5035                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
  5036  0503  0874               	movf	FLASH_ReadWord@flashAddr,w
  5037  0504  0023               	movlb	3	; select bank3
  5038  0505  0091               	movwf	17	;volatile
  5039                           
  5040                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
  5041  0506  0875               	movf	FLASH_ReadWord@flashAddr+1,w
  5042  0507  0092               	movwf	18	;volatile
  5043                           
  5044                           ;memory.c: 65: PMCON1bits.CFGS = 0;
  5045  0508  1315               	bcf	21,6	;volatile
  5046                           
  5047                           ;memory.c: 66: PMCON1bits.RD = 1;
  5048  0509  1415               	bsf	21,0	;volatile
  5049                           
  5050                           ;memory.c: 67: __nop();
  5051  050A  0000               	nop
  5052                           
  5053                           ;memory.c: 68: __nop();
  5054  050B  0000               	nop
  5055                           
  5056                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
  5057  050C  0020               	movlb	0	; select bank0
  5058  050D  0C20               	rrf	FLASH_ReadWord@GIEBitValue,w
  5059  050E  1C03               	skipc
  5060  050F  138B               	bcf	11,7	;volatile
  5061  0510  1803               	skipnc
  5062  0511  178B               	bsf	11,7	;volatile
  5063                           
  5064                           ;memory.c: 71: return ((uint16_t)((PMDATH << 8) | PMDATL));
  5065  0512  0023               	movlb	3	; select bank3
  5066  0513  0814               	movf	20,w	;volatile
  5067  0514  00F5               	movwf	?_FLASH_ReadWord+1
  5068  0515  0813               	movf	19,w	;volatile
  5069  0516  00F4               	movwf	?_FLASH_ReadWord
  5070  0517  0008               	return
  5071  0518                     __end_of_FLASH_ReadWord:	
  5072                           
  5073                           	psect	text15
  5074  05A6                     __ptext15:	
  5075 ;; *************** function _SYSTEM_Initialize *****************
  5076 ;; Defined at:
  5077 ;;		line 69 in file "mcc_generated_files/mcc.c"
  5078 ;; Parameters:    Size  Location     Type
  5079 ;;		None
  5080 ;; Auto vars:     Size  Location     Type
  5081 ;;		None
  5082 ;; Return value:  Size  Location     Type
  5083 ;;                  1    wreg      void 
  5084 ;; Registers used:
  5085 ;;		wreg, status,2, status,0, pclath, cstack
  5086 ;; Tracked objects:
  5087 ;;		On entry : 0/0
  5088 ;;		On exit  : 0/0
  5089 ;;		Unchanged: 0/0
  5090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5094 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5095 ;;Total ram usage:        0 bytes
  5096 ;; Hardware stack levels used:    1
  5097 ;; Hardware stack levels required when called:    4
  5098 ;; This function calls:
  5099 ;;		_EUSART_Initialize
  5100 ;;		_OSCILLATOR_Initialize
  5101 ;;		_PIN_MANAGER_Initialize
  5102 ;;		_TMR2_Initialize
  5103 ;;		_WDT_Initialize
  5104 ;; This function is called by:
  5105 ;;		_main
  5106 ;; This function uses a non-reentrant model
  5107 ;;
  5108                           
  5109                           
  5110                           ;psect for function _SYSTEM_Initialize
  5111  05A6                     _SYSTEM_Initialize:	
  5112                           
  5113                           ;mcc.c: 72: PIN_MANAGER_Initialize();
  5114                           
  5115                           ;incstack = 0
  5116                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5117  05A6  3183  23E0  3185   	fcall	_PIN_MANAGER_Initialize
  5118                           
  5119                           ;mcc.c: 73: OSCILLATOR_Initialize();
  5120  05A9  3185  25DB  3185   	fcall	_OSCILLATOR_Initialize
  5121                           
  5122                           ;mcc.c: 74: WDT_Initialize();
  5123  05AC  3185  25E0  3185   	fcall	_WDT_Initialize
  5124                           
  5125                           ;mcc.c: 75: TMR2_Initialize();
  5126  05AF  3185  2572  3185   	fcall	_TMR2_Initialize
  5127                           
  5128                           ;mcc.c: 76: EUSART_Initialize();
  5129  05B2  3185  2518         	fcall	_EUSART_Initialize
  5130  05B4  0008               	return
  5131  05B5                     __end_of_SYSTEM_Initialize:	
  5132                           
  5133                           	psect	text16
  5134  05E0                     __ptext16:	
  5135 ;; *************** function _WDT_Initialize *****************
  5136 ;; Defined at:
  5137 ;;		line 87 in file "mcc_generated_files/mcc.c"
  5138 ;; Parameters:    Size  Location     Type
  5139 ;;		None
  5140 ;; Auto vars:     Size  Location     Type
  5141 ;;		None
  5142 ;; Return value:  Size  Location     Type
  5143 ;;                  1    wreg      void 
  5144 ;; Registers used:
  5145 ;;		wreg
  5146 ;; Tracked objects:
  5147 ;;		On entry : 0/0
  5148 ;;		On exit  : 0/0
  5149 ;;		Unchanged: 0/0
  5150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5154 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5155 ;;Total ram usage:        0 bytes
  5156 ;; Hardware stack levels used:    1
  5157 ;; Hardware stack levels required when called:    2
  5158 ;; This function calls:
  5159 ;;		Nothing
  5160 ;; This function is called by:
  5161 ;;		_SYSTEM_Initialize
  5162 ;; This function uses a non-reentrant model
  5163 ;;
  5164                           
  5165                           
  5166                           ;psect for function _WDT_Initialize
  5167  05E0                     _WDT_Initialize:	
  5168                           
  5169                           ;mcc.c: 90: WDTCON = 0x16;
  5170                           
  5171                           ;incstack = 0
  5172                           ; Regs used in _WDT_Initialize: [wreg]
  5173  05E0  3016               	movlw	22
  5174  05E1  0021               	movlb	1	; select bank1
  5175  05E2  0097               	movwf	23	;volatile
  5176  05E3  0008               	return
  5177  05E4                     __end_of_WDT_Initialize:	
  5178                           
  5179                           	psect	text17
  5180  0572                     __ptext17:	
  5181 ;; *************** function _TMR2_Initialize *****************
  5182 ;; Defined at:
  5183 ;;		line 63 in file "mcc_generated_files/tmr2.c"
  5184 ;; Parameters:    Size  Location     Type
  5185 ;;		None
  5186 ;; Auto vars:     Size  Location     Type
  5187 ;;		None
  5188 ;; Return value:  Size  Location     Type
  5189 ;;                  1    wreg      void 
  5190 ;; Registers used:
  5191 ;;		wreg, status,2, status,0, pclath, cstack
  5192 ;; Tracked objects:
  5193 ;;		On entry : 0/0
  5194 ;;		On exit  : 0/0
  5195 ;;		Unchanged: 0/0
  5196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5200 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5201 ;;Total ram usage:        0 bytes
  5202 ;; Hardware stack levels used:    1
  5203 ;; Hardware stack levels required when called:    3
  5204 ;; This function calls:
  5205 ;;		_TMR2_SetInterruptHandler
  5206 ;;		_TMR2_StartTimer
  5207 ;; This function is called by:
  5208 ;;		_SYSTEM_Initialize
  5209 ;; This function uses a non-reentrant model
  5210 ;;
  5211                           
  5212                           
  5213                           ;psect for function _TMR2_Initialize
  5214  0572                     _TMR2_Initialize:	
  5215                           
  5216                           ;tmr2.c: 68: T2CON = 0x4A;
  5217                           
  5218                           ;incstack = 0
  5219                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5220  0572  304A               	movlw	74
  5221  0573  0020               	movlb	0	; select bank0
  5222  0574  009C               	movwf	28	;volatile
  5223                           
  5224                           ;tmr2.c: 71: PR2 = 0x18;
  5225  0575  3018               	movlw	24
  5226  0576  009B               	movwf	27	;volatile
  5227                           
  5228                           ;tmr2.c: 74: TMR2 = 0x00;
  5229  0577  019A               	clrf	26	;volatile
  5230                           
  5231                           ;tmr2.c: 77: PIR1bits.TMR2IF = 0;
  5232  0578  1091               	bcf	17,1	;volatile
  5233                           
  5234                           ;tmr2.c: 80: PIE1bits.TMR2IE = 1;
  5235  0579  0021               	movlb	1	; select bank1
  5236  057A  1491               	bsf	17,1	;volatile
  5237                           
  5238                           ;tmr2.c: 83: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
  5239  057B  3000               	movlw	0
  5240  057C  00F4               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  5241  057D  3000               	movlw	0
  5242  057E  00F5               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  5243  057F  3185  25D5  3185   	fcall	_TMR2_SetInterruptHandler
  5244                           
  5245                           ;tmr2.c: 86: TMR2_StartTimer();
  5246  0582  3185  25E7         	fcall	_TMR2_StartTimer
  5247  0584  0008               	return
  5248  0585                     __end_of_TMR2_Initialize:	
  5249                           
  5250                           	psect	text18
  5251  05E7                     __ptext18:	
  5252 ;; *************** function _TMR2_StartTimer *****************
  5253 ;; Defined at:
  5254 ;;		line 89 in file "mcc_generated_files/tmr2.c"
  5255 ;; Parameters:    Size  Location     Type
  5256 ;;		None
  5257 ;; Auto vars:     Size  Location     Type
  5258 ;;		None
  5259 ;; Return value:  Size  Location     Type
  5260 ;;                  1    wreg      void 
  5261 ;; Registers used:
  5262 ;;		None
  5263 ;; Tracked objects:
  5264 ;;		On entry : 0/0
  5265 ;;		On exit  : 0/0
  5266 ;;		Unchanged: 0/0
  5267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5271 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5272 ;;Total ram usage:        0 bytes
  5273 ;; Hardware stack levels used:    1
  5274 ;; Hardware stack levels required when called:    2
  5275 ;; This function calls:
  5276 ;;		Nothing
  5277 ;; This function is called by:
  5278 ;;		_TMR2_Initialize
  5279 ;; This function uses a non-reentrant model
  5280 ;;
  5281                           
  5282                           
  5283                           ;psect for function _TMR2_StartTimer
  5284  05E7                     _TMR2_StartTimer:	
  5285                           
  5286                           ;tmr2.c: 92: T2CONbits.TMR2ON = 1;
  5287                           
  5288                           ;incstack = 0
  5289                           ; Regs used in _TMR2_StartTimer: []
  5290  05E7  0020               	movlb	0	; select bank0
  5291  05E8  151C               	bsf	28,2	;volatile
  5292  05E9  0008               	return
  5293  05EA                     __end_of_TMR2_StartTimer:	
  5294                           
  5295                           	psect	text19
  5296  05D5                     __ptext19:	
  5297 ;; *************** function _TMR2_SetInterruptHandler *****************
  5298 ;; Defined at:
  5299 ;;		line 142 in file "mcc_generated_files/tmr2.c"
  5300 ;; Parameters:    Size  Location     Type
  5301 ;;  InterruptHan    2    4[COMMON] PTR FTN()void 
  5302 ;;		 -> TMR2_DefaultInterruptHandler(1), 
  5303 ;; Auto vars:     Size  Location     Type
  5304 ;;		None
  5305 ;; Return value:  Size  Location     Type
  5306 ;;                  1    wreg      void 
  5307 ;; Registers used:
  5308 ;;		wreg
  5309 ;; Tracked objects:
  5310 ;;		On entry : 0/0
  5311 ;;		On exit  : 0/0
  5312 ;;		Unchanged: 0/0
  5313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5314 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5317 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5318 ;;Total ram usage:        2 bytes
  5319 ;; Hardware stack levels used:    1
  5320 ;; Hardware stack levels required when called:    2
  5321 ;; This function calls:
  5322 ;;		Nothing
  5323 ;; This function is called by:
  5324 ;;		_TMR2_Initialize
  5325 ;; This function uses a non-reentrant model
  5326 ;;
  5327                           
  5328                           
  5329                           ;psect for function _TMR2_SetInterruptHandler
  5330  05D5                     _TMR2_SetInterruptHandler:	
  5331                           
  5332                           ;tmr2.c: 143: TMR2_InterruptHandler = InterruptHandler;
  5333                           
  5334                           ;incstack = 0
  5335                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  5336  05D5  0875               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
  5337  05D6  0021               	movlb	1	; select bank1
  5338  05D7  00BF               	movwf	(_TMR2_InterruptHandler+1)^(0+128)
  5339  05D8  0874               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
  5340  05D9  00BE               	movwf	_TMR2_InterruptHandler^(0+128)
  5341  05DA  0008               	return
  5342  05DB                     __end_of_TMR2_SetInterruptHandler:	
  5343                           
  5344                           	psect	text20
  5345  03E0                     __ptext20:	
  5346 ;; *************** function _PIN_MANAGER_Initialize *****************
  5347 ;; Defined at:
  5348 ;;		line 104 in file "mcc_generated_files/pin_manager.c"
  5349 ;; Parameters:    Size  Location     Type
  5350 ;;		None
  5351 ;; Auto vars:     Size  Location     Type
  5352 ;;  state           1    4[COMMON] unsigned char 
  5353 ;; Return value:  Size  Location     Type
  5354 ;;                  1    wreg      void 
  5355 ;; Registers used:
  5356 ;;		wreg, status,2, status,0
  5357 ;; Tracked objects:
  5358 ;;		On entry : 0/0
  5359 ;;		On exit  : 0/0
  5360 ;;		Unchanged: 0/0
  5361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5363 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5365 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5366 ;;Total ram usage:        1 bytes
  5367 ;; Hardware stack levels used:    1
  5368 ;; Hardware stack levels required when called:    2
  5369 ;; This function calls:
  5370 ;;		Nothing
  5371 ;; This function is called by:
  5372 ;;		_SYSTEM_Initialize
  5373 ;; This function uses a non-reentrant model
  5374 ;;
  5375                           
  5376                           
  5377                           ;psect for function _PIN_MANAGER_Initialize
  5378  03E0                     _PIN_MANAGER_Initialize:	
  5379                           
  5380                           ;pin_manager.c: 109: LATA = 0x00;
  5381                           
  5382                           ;incstack = 0
  5383                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
  5384  03E0  0022               	movlb	2	; select bank2
  5385  03E1  018C               	clrf	12	;volatile
  5386                           
  5387                           ;pin_manager.c: 110: LATC = 0x00;
  5388  03E2  018E               	clrf	14	;volatile
  5389                           
  5390                           ;pin_manager.c: 115: TRISA = 0x0F;
  5391  03E3  300F               	movlw	15
  5392  03E4  0021               	movlb	1	; select bank1
  5393  03E5  008C               	movwf	12	;volatile
  5394                           
  5395                           ;pin_manager.c: 116: TRISC = 0x1f;
  5396  03E6  301F               	movlw	31
  5397  03E7  008E               	movwf	14	;volatile
  5398                           
  5399                           ;pin_manager.c: 121: ANSELC = 0x0F;
  5400  03E8  300F               	movlw	15
  5401  03E9  0023               	movlb	3	; select bank3
  5402  03EA  008E               	movwf	14	;volatile
  5403                           
  5404                           ;pin_manager.c: 122: ANSELA = 0x17;
  5405  03EB  3017               	movlw	23
  5406  03EC  008C               	movwf	12	;volatile
  5407                           
  5408                           ;pin_manager.c: 127: WPUA = 0x3B;
  5409  03ED  303B               	movlw	59
  5410  03EE  0024               	movlb	4	; select bank4
  5411  03EF  008C               	movwf	12	;volatile
  5412                           
  5413                           ;pin_manager.c: 128: WPUC = 0x30;
  5414  03F0  3030               	movlw	48
  5415  03F1  008E               	movwf	14	;volatile
  5416                           
  5417                           ;pin_manager.c: 129: OPTION_REGbits.nWPUEN = 0;
  5418  03F2  0021               	movlb	1	; select bank1
  5419  03F3  1395               	bcf	21,7	;volatile
  5420                           
  5421                           ;pin_manager.c: 134: ODCONA = 0x00;
  5422  03F4  0025               	movlb	5	; select bank5
  5423  03F5  018C               	clrf	12	;volatile
  5424                           
  5425                           ;pin_manager.c: 135: ODCONC = 0x00;
  5426  03F6  018E               	clrf	14	;volatile
  5427                           
  5428                           ;pin_manager.c: 142: bool state = (unsigned char)GIE;
  5429  03F7  3000               	movlw	0
  5430  03F8  1B8B               	btfsc	11,7	;volatile
  5431  03F9  3001               	movlw	1
  5432  03FA  00F4               	movwf	PIN_MANAGER_Initialize@state
  5433                           
  5434                           ;pin_manager.c: 143: GIE = 0;
  5435  03FB  138B               	bcf	11,7	;volatile
  5436                           
  5437                           ;pin_manager.c: 144: PPSLOCK = 0x55;
  5438  03FC  3055               	movlw	85
  5439  03FD  003C               	movlb	28	; select bank28
  5440  03FE  008F               	movwf	15	;volatile
  5441                           
  5442                           ;pin_manager.c: 145: PPSLOCK = 0xAA;
  5443  03FF  30AA               	movlw	170
  5444  0400  008F               	movwf	15	;volatile
  5445                           
  5446                           ;pin_manager.c: 146: PPSLOCKbits.PPSLOCKED = 0x00;
  5447  0401  100F               	bcf	15,0	;volatile
  5448                           
  5449                           ;pin_manager.c: 148: RXPPSbits.RXPPS = 0x14;
  5450  0402  0815               	movf	21,w	;volatile
  5451  0403  39E0               	andlw	-32
  5452  0404  3814               	iorlw	20
  5453  0405  0095               	movwf	21	;volatile
  5454                           
  5455                           ;pin_manager.c: 149: RA4PPSbits.RA4PPS = 0x04;
  5456  0406  003D               	movlb	29	; select bank29
  5457  0407  0814               	movf	20,w	;volatile
  5458  0408  39F0               	andlw	-16
  5459  0409  3804               	iorlw	4
  5460  040A  0094               	movwf	20	;volatile
  5461                           
  5462                           ;pin_manager.c: 150: RA5PPSbits.RA5PPS = 0x03;
  5463  040B  0815               	movf	21,w	;volatile
  5464  040C  39F0               	andlw	-16
  5465  040D  3803               	iorlw	3
  5466  040E  0095               	movwf	21	;volatile
  5467                           
  5468                           ;pin_manager.c: 151: RC5PPSbits.RC5PPS = 0x09;
  5469  040F  0825               	movf	37,w	;volatile
  5470  0410  39F0               	andlw	-16
  5471  0411  3809               	iorlw	9
  5472  0412  00A5               	movwf	37	;volatile
  5473                           
  5474                           ;pin_manager.c: 153: PPSLOCK = 0x55;
  5475  0413  3055               	movlw	85
  5476  0414  003C               	movlb	28	; select bank28
  5477  0415  008F               	movwf	15	;volatile
  5478                           
  5479                           ;pin_manager.c: 154: PPSLOCK = 0xAA;
  5480  0416  30AA               	movlw	170
  5481  0417  008F               	movwf	15	;volatile
  5482                           
  5483                           ;pin_manager.c: 155: PPSLOCKbits.PPSLOCKED = 0x01;
  5484  0418  140F               	bsf	15,0	;volatile
  5485                           
  5486                           ;pin_manager.c: 157: GIE = state;
  5487  0419  1C74               	btfss	PIN_MANAGER_Initialize@state,0
  5488  041A  2C1D               	goto	u2010
  5489  041B  178B               	bsf	11,7	;volatile
  5490  041C  0008               	return
  5491  041D                     u2010:	
  5492  041D  138B               	bcf	11,7	;volatile
  5493  041E  0008               	return
  5494  041F                     __end_of_PIN_MANAGER_Initialize:	
  5495                           
  5496                           	psect	text21
  5497  05DB                     __ptext21:	
  5498 ;; *************** function _OSCILLATOR_Initialize *****************
  5499 ;; Defined at:
  5500 ;;		line 79 in file "mcc_generated_files/mcc.c"
  5501 ;; Parameters:    Size  Location     Type
  5502 ;;		None
  5503 ;; Auto vars:     Size  Location     Type
  5504 ;;		None
  5505 ;; Return value:  Size  Location     Type
  5506 ;;                  1    wreg      void 
  5507 ;; Registers used:
  5508 ;;		wreg, status,2
  5509 ;; Tracked objects:
  5510 ;;		On entry : 0/0
  5511 ;;		On exit  : 0/0
  5512 ;;		Unchanged: 0/0
  5513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5517 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5518 ;;Total ram usage:        0 bytes
  5519 ;; Hardware stack levels used:    1
  5520 ;; Hardware stack levels required when called:    2
  5521 ;; This function calls:
  5522 ;;		Nothing
  5523 ;; This function is called by:
  5524 ;;		_SYSTEM_Initialize
  5525 ;; This function uses a non-reentrant model
  5526 ;;
  5527                           
  5528                           
  5529                           ;psect for function _OSCILLATOR_Initialize
  5530  05DB                     _OSCILLATOR_Initialize:	
  5531                           
  5532                           ;mcc.c: 82: OSCCON = 0x7A;
  5533                           
  5534                           ;incstack = 0
  5535                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  5536  05DB  307A               	movlw	122
  5537  05DC  0021               	movlb	1	; select bank1
  5538  05DD  0099               	movwf	25	;volatile
  5539                           
  5540                           ;mcc.c: 84: OSCTUNE = 0x00;
  5541  05DE  0198               	clrf	24	;volatile
  5542  05DF  0008               	return
  5543  05E0                     __end_of_OSCILLATOR_Initialize:	
  5544                           
  5545                           	psect	text22
  5546  0518                     __ptext22:	
  5547 ;; *************** function _EUSART_Initialize *****************
  5548 ;; Defined at:
  5549 ;;		line 78 in file "mcc_generated_files/eusart.c"
  5550 ;; Parameters:    Size  Location     Type
  5551 ;;		None
  5552 ;; Auto vars:     Size  Location     Type
  5553 ;;		None
  5554 ;; Return value:  Size  Location     Type
  5555 ;;                  1    wreg      void 
  5556 ;; Registers used:
  5557 ;;		wreg, status,2
  5558 ;; Tracked objects:
  5559 ;;		On entry : 0/0
  5560 ;;		On exit  : 0/0
  5561 ;;		Unchanged: 0/0
  5562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5565 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5566 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5567 ;;Total ram usage:        1 bytes
  5568 ;; Hardware stack levels used:    1
  5569 ;; Hardware stack levels required when called:    2
  5570 ;; This function calls:
  5571 ;;		Nothing
  5572 ;; This function is called by:
  5573 ;;		_SYSTEM_Initialize
  5574 ;; This function uses a non-reentrant model
  5575 ;;
  5576                           
  5577                           
  5578                           ;psect for function _EUSART_Initialize
  5579  0518                     _EUSART_Initialize:	
  5580                           
  5581                           ;eusart.c: 81: PIE1bits.RCIE = 0;
  5582                           
  5583                           ;incstack = 0
  5584                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  5585  0518  0021               	movlb	1	; select bank1
  5586  0519  1291               	bcf	17,5	;volatile
  5587                           
  5588                           ;eusart.c: 82: PIE1bits.TXIE = 0;
  5589  051A  1211               	bcf	17,4	;volatile
  5590                           
  5591                           ;eusart.c: 87: BAUDCON = 0x08;
  5592  051B  3008               	movlw	8
  5593  051C  0023               	movlb	3	; select bank3
  5594  051D  009F               	movwf	31	;volatile
  5595                           
  5596                           ;eusart.c: 90: RCSTA = 0x90;
  5597  051E  3090               	movlw	144
  5598  051F  009D               	movwf	29	;volatile
  5599                           
  5600                           ;eusart.c: 93: TXSTA = 0x24;
  5601  0520  3024               	movlw	36
  5602  0521  009E               	movwf	30	;volatile
  5603                           
  5604                           ;eusart.c: 96: SPBRGL = 0xA0;
  5605  0522  30A0               	movlw	160
  5606  0523  009B               	movwf	27	;volatile
  5607                           
  5608                           ;eusart.c: 99: SPBRGH = 0x01;
  5609  0524  3001               	movlw	1
  5610  0525  009C               	movwf	28	;volatile
  5611                           
  5612                           ;eusart.c: 103: eusartTxHead = 0;
  5613  0526  01F7               	clrf	_eusartTxHead	;volatile
  5614                           
  5615                           ;eusart.c: 104: eusartTxTail = 0;
  5616  0527  01F6               	clrf	_eusartTxTail	;volatile
  5617                           
  5618                           ;eusart.c: 105: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  5619  0528  3010               	movlw	16
  5620  0529  00F4               	movwf	??_EUSART_Initialize
  5621  052A  0874               	movf	??_EUSART_Initialize,w
  5622  052B  0021               	movlb	1	; select bank1
  5623  052C  00C0               	movwf	_eusartTxBufferRemaining^(0+128)	;volatile
  5624                           
  5625                           ;eusart.c: 107: eusartRxHead = 0;
  5626  052D  01BD               	clrf	_eusartRxHead^(0+128)	;volatile
  5627                           
  5628                           ;eusart.c: 108: eusartRxTail = 0;
  5629  052E  01BC               	clrf	_eusartRxTail^(0+128)	;volatile
  5630                           
  5631                           ;eusart.c: 109: _bEusartRxCount = 0;
  5632  052F  01F8               	clrf	__bEusartRxCount	;volatile
  5633                           
  5634                           ;eusart.c: 112: PIE1bits.RCIE = 1;
  5635  0530  1691               	bsf	17,5	;volatile
  5636  0531  0008               	return
  5637  0532                     __end_of_EUSART_Initialize:	
  5638                           
  5639                           	psect	intentry
  5640  0004                     __pintentry:	
  5641 ;; *************** function _INTERRUPT_InterruptManager *****************
  5642 ;; Defined at:
  5643 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  5644 ;; Parameters:    Size  Location     Type
  5645 ;;		None
  5646 ;; Auto vars:     Size  Location     Type
  5647 ;;		None
  5648 ;; Return value:  Size  Location     Type
  5649 ;;                  1    wreg      void 
  5650 ;; Registers used:
  5651 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5652 ;; Tracked objects:
  5653 ;;		On entry : 0/0
  5654 ;;		On exit  : 0/0
  5655 ;;		Unchanged: 0/0
  5656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5659 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5660 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5661 ;;Total ram usage:        1 bytes
  5662 ;; Hardware stack levels used:    1
  5663 ;; Hardware stack levels required when called:    1
  5664 ;; This function calls:
  5665 ;;		_EUSART_Receive_ISR
  5666 ;;		_EUSART_Transmit_ISR
  5667 ;; This function is called by:
  5668 ;;		Interrupt level 1
  5669 ;; This function uses a non-reentrant model
  5670 ;;
  5671                           
  5672  0004                     _INTERRUPT_InterruptManager:	
  5673                           
  5674                           ;incstack = 0
  5675  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  5676                           
  5677                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5678  0005  3180               	pagesel	$
  5679  0006  0020               	movlb	0	; select bank0
  5680  0007  087F               	movf	127,w
  5681  0008  00F3               	movwf	??_INTERRUPT_InterruptManager
  5682                           
  5683                           ;interrupt_manager.c: 54: extern volatile unsigned char isRunInBoot;
  5684                           ;interrupt_manager.c: 55: if(isRunInBoot==0xaa){
  5685  0009  30AA               	movlw	170
  5686  000A  003F               	movlb	31	; select bank31
  5687  000B  067F               	xorwf	127,w	;volatile
  5688  000C  1D03               	btfss	3,2
  5689  000D  2810               	goto	i1l21
  5690  000E  3188               	pagesel	2052	;# 
  5691  000F  2804               	goto	2052	;# 
  5692  0010                     i1l21:	
  5693                           
  5694                           ;interrupt_manager.c: 58: }
  5695                           ;interrupt_manager.c: 59: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
  5696  0010  1F0B               	btfss	11,6	;volatile
  5697  0011  281B               	goto	i1l2243
  5698  0012  0021               	movlb	1	; select bank1
  5699  0013  1E11               	btfss	17,4	;volatile
  5700  0014  281B               	goto	i1l2243
  5701  0015  0020               	movlb	0	; select bank0
  5702  0016  1E11               	btfss	17,4	;volatile
  5703  0017  281B               	goto	i1l2243
  5704                           
  5705                           ;interrupt_manager.c: 60: {
  5706                           ;interrupt_manager.c: 61: EUSART_Transmit_ISR();
  5707  0018  3184  24E1  3180   	fcall	_EUSART_Transmit_ISR
  5708  001B                     i1l2243:	
  5709                           
  5710                           ;interrupt_manager.c: 62: }
  5711                           ;interrupt_manager.c: 63: if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits.RCIF
      +                           == 1)
  5712  001B  1F0B               	btfss	11,6	;volatile
  5713  001C  2826               	goto	i1l2251
  5714  001D  0021               	movlb	1	; select bank1
  5715  001E  1E91               	btfss	17,5	;volatile
  5716  001F  2826               	goto	i1l2251
  5717  0020  0020               	movlb	0	; select bank0
  5718  0021  1E91               	btfss	17,5	;volatile
  5719  0022  2826               	goto	i1l2251
  5720                           
  5721                           ;interrupt_manager.c: 64: {
  5722                           ;interrupt_manager.c: 65: EUSART_Receive_ISR();
  5723  0023  3184  24A0  3180   	fcall	_EUSART_Receive_ISR
  5724  0026                     i1l2251:	
  5725                           
  5726                           ;interrupt_manager.c: 66: }
  5727                           ;interrupt_manager.c: 67: if(INTCONbits.PEIE == 1 && PIE1bits.TMR2IE == 1 && PIR1bits.TM
      +                          R2IF==1){
  5728  0026  1F0B               	btfss	11,6	;volatile
  5729  0027  2842               	goto	i1l28
  5730  0028  0021               	movlb	1	; select bank1
  5731  0029  1C91               	btfss	17,1	;volatile
  5732  002A  2842               	goto	i1l28
  5733  002B  0020               	movlb	0	; select bank0
  5734  002C  1C91               	btfss	17,1	;volatile
  5735  002D  2842               	goto	i1l28
  5736                           
  5737                           ;interrupt_manager.c: 68: PIR1bits.TMR2IF=0;
  5738  002E  1091               	bcf	17,1	;volatile
  5739                           
  5740                           ;interrupt_manager.c: 69: if(eusartRxIdleTime_ms)eusartRxIdleTime_ms++;
  5741  002F  0021               	movlb	1	; select bank1
  5742  0030  0836               	movf	_eusartRxIdleTime_ms^(0+128),w	;volatile
  5743  0031  0437               	iorwf	(_eusartRxIdleTime_ms+1)^(0+128),w	;volatile
  5744  0032  1903               	btfsc	3,2
  5745  0033  2838               	goto	i1l25
  5746  0034  3001               	movlw	1
  5747  0035  07B6               	addwf	_eusartRxIdleTime_ms^(0+128),f	;volatile
  5748  0036  3000               	movlw	0
  5749  0037  3DB7               	addwfc	(_eusartRxIdleTime_ms+1)^(0+128),f	;volatile
  5750  0038                     i1l25:	
  5751                           
  5752                           ;interrupt_manager.c: 70: if(eusartRxIdleTime_ms>20){
  5753  0038  3000               	movlw	0
  5754  0039  0237               	subwf	(_eusartRxIdleTime_ms+1)^(0+128),w	;volatile
  5755  003A  3015               	movlw	21
  5756  003B  1903               	skipnz
  5757  003C  0236               	subwf	_eusartRxIdleTime_ms^(0+128),w	;volatile
  5758  003D  1C03               	skipc
  5759  003E  2842               	goto	i1l28
  5760                           
  5761                           ;interrupt_manager.c: 71: eusartRxIdleTime_ms=0;
  5762  003F  01B6               	clrf	_eusartRxIdleTime_ms^(0+128)	;volatile
  5763  0040  01B7               	clrf	(_eusartRxIdleTime_ms+1)^(0+128)	;volatile
  5764                           
  5765                           ;interrupt_manager.c: 72: Event|=(1<<0);
  5766  0041  1479               	bsf	_Event,0	;volatile
  5767  0042                     i1l28:	
  5768                           ;interrupt_manager.c: 76: else
  5769                           ;interrupt_manager.c: 77: {
  5770                           
  5771                           ;interrupt_manager.c: 73: }
  5772                           ;interrupt_manager.c: 75: }
  5773                           
  5774  0042  0873               	movf	??_INTERRUPT_InterruptManager,w
  5775  0043  0020               	movlb	0	; select bank0
  5776  0044  00FF               	movwf	127
  5777  0045  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  5778  0046  0009               	retfie
  5779  0047                     __end_of_INTERRUPT_InterruptManager:	
  5780                           
  5781                           	psect	text24
  5782  04E1                     __ptext24:	
  5783 ;; *************** function _EUSART_Transmit_ISR *****************
  5784 ;; Defined at:
  5785 ;;		line 158 in file "mcc_generated_files/eusart.c"
  5786 ;; Parameters:    Size  Location     Type
  5787 ;;		None
  5788 ;; Auto vars:     Size  Location     Type
  5789 ;;		None
  5790 ;; Return value:  Size  Location     Type
  5791 ;;                  1    wreg      void 
  5792 ;; Registers used:
  5793 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5794 ;; Tracked objects:
  5795 ;;		On entry : 0/0
  5796 ;;		On exit  : 0/0
  5797 ;;		Unchanged: 0/0
  5798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5801 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5802 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5803 ;;Total ram usage:        1 bytes
  5804 ;; Hardware stack levels used:    1
  5805 ;; This function calls:
  5806 ;;		Nothing
  5807 ;; This function is called by:
  5808 ;;		_INTERRUPT_InterruptManager
  5809 ;; This function uses a non-reentrant model
  5810 ;;
  5811                           
  5812                           
  5813                           ;psect for function _EUSART_Transmit_ISR
  5814  04E1                     _EUSART_Transmit_ISR:	
  5815                           
  5816                           ;eusart.c: 162: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
  5817                           
  5818                           ;incstack = 0
  5819                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  5820  04E1  3010               	movlw	16
  5821  04E2  0021               	movlb	1	; select bank1
  5822  04E3  0240               	subwf	_eusartTxBufferRemaining^(0+128),w	;volatile
  5823  04E4  1803               	skipnc
  5824  04E5  2CFB               	goto	i1l153
  5825                           
  5826                           ;eusart.c: 163: {
  5827                           ;eusart.c: 164: TXREG = eusartTxBuffer[eusartTxTail++];
  5828  04E6  0876               	movf	_eusartTxTail,w
  5829  04E7  3EA0               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  5830  04E8  0086               	movwf	6
  5831  04E9  0187               	clrf	7
  5832  04EA  0801               	movf	1,w
  5833  04EB  0023               	movlb	3	; select bank3
  5834  04EC  009A               	movwf	26	;volatile
  5835  04ED  3001               	movlw	1
  5836  04EE  00F0               	movwf	??_EUSART_Transmit_ISR
  5837  04EF  0870               	movf	??_EUSART_Transmit_ISR,w
  5838  04F0  07F6               	addwf	_eusartTxTail,f	;volatile
  5839                           
  5840                           ;eusart.c: 165: if(sizeof(eusartTxBuffer) <= eusartTxTail)
  5841  04F1  3010               	movlw	16
  5842  04F2  0276               	subwf	_eusartTxTail,w	;volatile
  5843  04F3  1803               	btfsc	3,0
  5844                           
  5845                           ;eusart.c: 166: {
  5846                           ;eusart.c: 167: eusartTxTail = 0;
  5847  04F4  01F6               	clrf	_eusartTxTail	;volatile
  5848                           
  5849                           ;eusart.c: 168: }
  5850                           ;eusart.c: 169: eusartTxBufferRemaining++;
  5851  04F5  3001               	movlw	1
  5852  04F6  00F0               	movwf	??_EUSART_Transmit_ISR
  5853  04F7  0870               	movf	??_EUSART_Transmit_ISR,w
  5854  04F8  0021               	movlb	1	; select bank1
  5855  04F9  07C0               	addwf	_eusartTxBufferRemaining^(0+128),f	;volatile
  5856                           
  5857                           ;eusart.c: 170: }
  5858  04FA  0008               	return
  5859  04FB                     i1l153:	
  5860                           
  5861                           ;eusart.c: 171: else
  5862                           ;eusart.c: 172: {
  5863                           ;eusart.c: 173: PIE1bits.TXIE = 0;
  5864  04FB  1211               	bcf	17,4	;volatile
  5865  04FC  0008               	return
  5866  04FD                     __end_of_EUSART_Transmit_ISR:	
  5867                           
  5868                           	psect	text25
  5869  04A0                     __ptext25:	
  5870 ;; *************** function _EUSART_Receive_ISR *****************
  5871 ;; Defined at:
  5872 ;;		line 177 in file "mcc_generated_files/eusart.c"
  5873 ;; Parameters:    Size  Location     Type
  5874 ;;		None
  5875 ;; Auto vars:     Size  Location     Type
  5876 ;;  t8              1    2[COMMON] unsigned char 
  5877 ;; Return value:  Size  Location     Type
  5878 ;;                  1    wreg      void 
  5879 ;; Registers used:
  5880 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5881 ;; Tracked objects:
  5882 ;;		On entry : 0/0
  5883 ;;		On exit  : 0/0
  5884 ;;		Unchanged: 0/0
  5885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5887 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5888 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5889 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5890 ;;Total ram usage:        3 bytes
  5891 ;; Hardware stack levels used:    1
  5892 ;; This function calls:
  5893 ;;		Nothing
  5894 ;; This function is called by:
  5895 ;;		_INTERRUPT_InterruptManager
  5896 ;; This function uses a non-reentrant model
  5897 ;;
  5898                           
  5899                           
  5900                           ;psect for function _EUSART_Receive_ISR
  5901  04A0                     _EUSART_Receive_ISR:	
  5902                           
  5903                           ;eusart.c: 179: uint8_t t8;
  5904                           ;eusart.c: 180: if(1 == RCSTAbits.OERR){
  5905                           
  5906                           ;incstack = 0
  5907                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  5908  04A0  0023               	movlb	3	; select bank3
  5909  04A1  1C9D               	btfss	29,1	;volatile
  5910  04A2  2CA5               	goto	i1l2175
  5911                           
  5912                           ;eusart.c: 181: RCSTAbits.CREN = 0;
  5913  04A3  121D               	bcf	29,4	;volatile
  5914                           
  5915                           ;eusart.c: 182: RCSTAbits.CREN = 1;
  5916  04A4  161D               	bsf	29,4	;volatile
  5917  04A5                     i1l2175:	
  5918                           
  5919                           ;eusart.c: 183: }
  5920                           ;eusart.c: 186: t8=RCREG;
  5921  04A5  0819               	movf	25,w	;volatile
  5922  04A6  00F0               	movwf	??_EUSART_Receive_ISR
  5923  04A7  0870               	movf	??_EUSART_Receive_ISR,w
  5924  04A8  00F2               	movwf	EUSART_Receive_ISR@t8
  5925                           
  5926                           ;eusart.c: 187: if(_bEusartRxCount<160){
  5927  04A9  30A0               	movlw	160
  5928  04AA  0278               	subwf	__bEusartRxCount,w	;volatile
  5929  04AB  1803               	skipnc
  5930  04AC  0008               	return
  5931                           
  5932                           ;eusart.c: 188: _bEusartRxBuffer[_bEusartRxCount]=t8;
  5933  04AD  0878               	movf	__bEusartRxCount,w	;volatile
  5934  04AE  3E40               	addlw	64
  5935  04AF  00F0               	movwf	??_EUSART_Receive_ISR
  5936  04B0  01F1               	clrf	??_EUSART_Receive_ISR+1
  5937  04B1  3023               	movlw	35
  5938  04B2  3DF1               	addwfc	??_EUSART_Receive_ISR+1,f
  5939  04B3  0870               	movf	??_EUSART_Receive_ISR,w
  5940  04B4  0086               	movwf	6
  5941  04B5  0871               	movf	??_EUSART_Receive_ISR+1,w
  5942  04B6  0087               	movwf	7
  5943  04B7  0872               	movf	EUSART_Receive_ISR@t8,w
  5944  04B8  0081               	movwf	1
  5945                           
  5946                           ;eusart.c: 189: _bEusartRxCount++;
  5947  04B9  3001               	movlw	1
  5948  04BA  00F0               	movwf	??_EUSART_Receive_ISR
  5949  04BB  0870               	movf	??_EUSART_Receive_ISR,w
  5950  04BC  07F8               	addwf	__bEusartRxCount,f	;volatile
  5951                           
  5952                           ;eusart.c: 190: eusartRxIdleTime_ms=10;
  5953  04BD  300A               	movlw	10
  5954  04BE  0021               	movlb	1	; select bank1
  5955  04BF  00B6               	movwf	_eusartRxIdleTime_ms^(0+128)	;volatile
  5956  04C0  3000               	movlw	0
  5957  04C1  00B7               	movwf	(_eusartRxIdleTime_ms^(0+128)+1)	;volatile
  5958  04C2  0008               	return
  5959  04C3                     __end_of_EUSART_Receive_ISR:	
  5960  007E                     btemp	set	126	;btemp
  5961  007E                     int$flags	set	126
  5962  007E                     wtemp0	set	126


Data Sizes:
    Strings     55
    Constant    17
    Data        3
    BSS         162
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     33      33
    BANK1            80      0      36
    BANK2            80      0      48
    BANK3            80      0      80
    BANK4            80     65      65
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           32      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    m_str_h2b@b	PTR unsigned char  size(1) Largest target is 48
		 -> hexLineBuffer(BANK2[48]), 

    m_str_h2b@h	PTR unsigned char  size(1) Largest target is 48
		 -> hexLineBuffer(BANK2[48]), 

    m_mem_set@buf	PTR unsigned char  size(1) Largest target is 48
		 -> hexLineBuffer(BANK2[48]), 

    uart_send_str@str	PTR unsigned char  size(2) Largest target is 20
		 -> STR_3(CODE[20]), STR_2(CODE[16]), STR_1(CODE[19]), 

    api_write_block@binbuf	PTR unsigned int  size(1) Largest target is 80
		 -> binBuffer(BANK3[80]), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR2_DefaultInterruptHandler(), 

    FLASH_WriteBlock@flashWordArray	PTR unsigned int  size(1) Largest target is 80
		 -> binBuffer(BANK3[80]), 


Critical Paths under _main in COMMON

    _main->_FLASH_ReadWord
    _main->_uart_send_str
    _iap_process->_iap_received_package
    _iap_process->_uart_send_str
    _iap_received_package->_uart_send_byte
    _decode_hex_len->_m_mem_set
    _m_str_h2b->__chr2hex
    _api_write_block->_FLASH_EraseBlock
    _api_write_block->_FLASH_ReadWord
    _FLASH_WriteBlock->_FLASH_EraseBlock
    _TMR2_Initialize->_TMR2_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART_Receive_ISR

Critical Paths under _main in BANK0

    _main->_iap_process
    _iap_process->_decode_xmodem_package
    _decode_xmodem_package->_decode_hex_len
    _decode_hex_len->_api_write_block
    _m_str_h2b->__chr2hex
    _api_write_block->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    _decode_hex_len->_api_write_block

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    6253
                                             28 BANK0      5     5      0
                     _FLASH_ReadWord
                  _SYSTEM_Initialize
                        _iap_process
                _uart_received_start
                      _uart_send_str
 ---------------------------------------------------------------------------------
 (1) _iap_process                                          3     3      0    5346
                                             25 BANK0      3     3      0
                   _FLASH_WriteBlock
              _decode_xmodem_package
               _iap_received_package
                     _uart_send_byte
                      _uart_send_str
 ---------------------------------------------------------------------------------
 (1) _uart_send_str                                        3     1      2     296
                                              4 COMMON     2     0      2
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _iap_received_package                                 2     2      0      99
                                              5 COMMON     1     1      0
                                              0 BANK0      1     1      0
                _uart_received_start
                     _uart_send_byte
 ---------------------------------------------------------------------------------
 (2) _uart_send_byte                                       1     1      0      31
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _uart_received_start                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _decode_xmodem_package                                3     3      0    3790
                                             22 BANK0      3     3      0
                     _decode_hex_len
 ---------------------------------------------------------------------------------
 (3) _decode_hex_len                                       5     5      0    3688
                                             17 BANK0      5     5      0
                    _api_write_block
                          _m_mem_set
                          _m_str_h2b
 ---------------------------------------------------------------------------------
 (4) _m_str_h2b                                           10     7      3     852
                                              2 BANK0     10     7      3
                           __chr2hex
 ---------------------------------------------------------------------------------
 (5) __chr2hex                                             3     3      0     322
                                              4 COMMON     1     1      0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _m_mem_set                                            5     2      3     283
                                              4 COMMON     2     2      0
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _api_write_block                                     73    70      3    2368
                                              9 BANK0      8     5      3
                                              0 BANK4     65    65      0
                   _FLASH_EraseBlock
                     _FLASH_ReadWord
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (5) _FLASH_WriteBlock                                     8     5      3    1065
                                              1 BANK0      8     5      3
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (6) _FLASH_EraseBlock                                     3     1      2     250
                                              4 COMMON     2     0      2
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _FLASH_ReadWord                                       3     1      2     327
                                              4 COMMON     2     0      2
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     142
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     108
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR2_SetInterruptHandler                             2     0      2     108
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      34
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                           1     1      0      23
                                              3 COMMON     1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
 ---------------------------------------------------------------------------------
 (8) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Receive_ISR                                   3     3      0      23
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FLASH_ReadWord
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
       _TMR2_StartTimer
     _WDT_Initialize
   _iap_process
     _FLASH_WriteBlock
       _FLASH_EraseBlock
     _decode_xmodem_package
       _decode_hex_len
         _api_write_block
           _FLASH_EraseBlock
           _FLASH_ReadWord
           _FLASH_WriteBlock
             _FLASH_EraseBlock
         _m_mem_set
         _m_str_h2b
           __chr2hex
     _iap_received_package
       _uart_received_start
       _uart_send_byte
     _uart_send_byte
     _uart_send_str
   _uart_received_start
   _uart_send_str

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3E0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     21      21       5       41.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      24       7       45.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      30       9       60.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50     41      41      13       81.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     110      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              20      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           20      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     110      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Mon Nov 26 23:38:43 2018

        __end_of_TMR2_SetInterruptHandler 05DB                               __CFG_CP$OFF 0000  
                             __CFG_LVP$ON 0000                                       l331 03D8  
                                     l332 03DE                                       l193 02E4  
                                     l371 05BF                                       l380 0484  
                                     l438 021E                                       l368 05B9  
                                     l449 021D                                       l386 049C  
                                     _GIE 005F                                       _PR2 001B  
                         _TMR2_Initialize 0572                              __CFG_BORV$LO 0000  
                                     wreg 0009                           ??_uart_send_str 0020  
          FLASH_WriteBlock@flashWordArray 0023                            _decode_hex_len 0089  
                                    l2513 033D                                      l2611 0129  
                                    l2445 02A7                                      l2541 034A  
                                    l2543 038F                                      l2631 0178  
                                    l2457 02CF                                      l2553 0533  
                                    l2481 0460                                      l2633 012A  
                                    l2609 00E9                                      l2635 017E  
                                    l2811 0245                                      l2493 0478  
                                    l2725 043A                                      l2717 0433  
                                    l2813 0247                                      l2487 046B  
                                    l2591 00DF                                      l2751 03A0  
                                    l2735 0450                                      l2727 044B  
                                    l2825 028B                                      l2749 03D2  
                                    l2779 047D                                      l2891 01E2  
                                    l2893 0210                                      l2799 024E  
                                    l2889 020A                                      STR_1 055F  
                                    STR_2 0596                                      STR_3 054B  
                                    u2010 041D                                      _LATA 010C  
                                    _LATC 010E                                      u2307 01EC  
                                    u2085 03AE                                      u2317 0232  
                                    u2327 0436                                      u2337 0442  
                                    u2287 01C2                                      u2297 01D5  
                                    u1845 0339                                      u1925 00AF  
                                    u1935 00BD                                      i1l21 0010  
                                    u1975 00FD                                      i1l25 0038  
                                    u1985 013E                                      i1l28 0042  
                                    _TMR2 001A                                      _WPUA 020C  
                                    _WPUC 020E                              __CFG_WRT$OFF 0000  
                                    _main 0188                                      fsr0h 0005  
                                    fsr1h 0007                                      indf0 0000  
                                    fsr0l 0004                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                       ?_FLASH_WriteBlock 0021                             __CFG_BOREN$ON 0000  
                                    start 0047                        ??_FLASH_WriteBlock 0024  
                           __CFG_MCLRE$ON 0000                          ??_uart_send_byte 0074  
          __size_of_OSCILLATOR_Initialize 0005             __end_of_OSCILLATOR_Initialize 05E0  
                                   ?_main 0070                             __CFG_WDTE$OFF 0000  
                                   _T2CON 001C                                     i1l153 04FB  
                                   _RCREG 0199                                     _RCSTA 019D  
                                   _TRISA 008C                                     _TRISC 008E  
                    EUSART_Receive_ISR@t8 0072                                     _TXREG 019A  
                                   _TXSTA 019E                    __end_of_decode_hex_len 0188  
                                   _Event 0079                           _api_write_block 02ED  
                          _WDT_Initialize 05E0              __end_of_iap_received_package 0452  
                                   status 0003                                     wtemp0 007E  
                         _TMR2_StartTimer 05E7                 decode_xmodem_package@xloc 0038  
                        __end_of_HexTable 0596                           __initialization 0049  
                          iap_process@ret 003B                              __end_of_main 0225  
                 __end_of_TMR2_Initialize 0585               ?_INTERRUPT_InterruptManager 0070  
                _TMR2_SetInterruptHandler 05D5                                    ??_main 003C  
                 __size_of_FLASH_ReadWord 001B                            __CFG_PLLEN$OFF 0000  
                         ?_decode_hex_len 0070                    __end_of_WDT_Initialize 05E4  
               FLASH_WriteBlock@writeAddr 0021                          __end_of__chr2hex 047A  
                                  _ANSELA 018C                                    _ANSELC 018E  
                                  _ODCONA 028C                                    i1l2251 0026  
                                  i1l2243 001B                                    _ODCONC 028E  
                                  i1l2175 04A5                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                                    _PMCON2 0196  
               __size_of_FLASH_EraseBlock 001E                                    _OSCCON 0099  
             __end_of_uart_received_start 05D5                                    _SPBRGH 019C  
                                  _SPBRGL 019B                                    _WDTCON 0097  
                            m_mem_set@buf 0075                              m_mem_set@len 0021  
                          __CFG_PWRTE$OFF 0000                               m_str_h2b@bb 002B  
                    __size_of_iap_process 006B                              _binBufferLen 00B9  
                          __CFG_STVREN$ON 0000                       _EUSART_Transmit_ISR 04E1  
                 __end_of_api_write_block 0344                   FLASH_ReadWord@flashAddr 0074  
                         ?_WDT_Initialize 0070                           _addrWritedFlash 00C1  
                 __end_of_TMR2_StartTimer 05EA  TMR2_SetInterruptHandler@InterruptHandler 0074  
                    ?_EUSART_Transmit_ISR 0070                         _SYSTEM_Initialize 05A6  
                 __end_of__initialization 0085                                __chr2hex@c 0021  
                              __chr2hex@h 0020                        ?_SYSTEM_Initialize 0070  
                          __pcstackCOMMON 0070                              __pidataBANK1 05E4  
                     ??_SYSTEM_Initialize 0076                                _addrInline 00B4  
                        ?_TMR2_Initialize 0070                      _iap_received_package 041F  
                   _decode_xmodem_package 039A                            _OPTION_REGbits 0095  
             FLASH_WriteBlock@GIEBitValue 0027                 __end_of_SYSTEM_Initialize 05B5  
                   ??_EUSART_Transmit_ISR 0070                        __size_of_m_mem_set 0019  
                              __pbssBANK1 00A0                                __pbssBANK2 0120  
                              __pbssBANK3 01A0                        api_write_block@buf 0220  
                      __size_of_m_str_h2b 0056               __size_of_EUSART_Receive_ISR 0023  
                              __pmaintext 0188                                __pintentry 0004  
                               ?__chr2hex 0070                                   _BAUDCON 019F  
                   ?_iap_received_package 0070                 __size_of_FLASH_WriteBlock 005D  
                          _FLASH_ReadWord 04FD                          ?_api_write_block 0029  
                                 _OSCTUNE 0098                                   _PPSLOCK 0E0F  
                        ?_TMR2_StartTimer 0070                     __end_of_uart_send_str 04A0  
                        _FLASH_EraseBlock 04C3                              m_str_h2b@len 0023  
              ??_TMR2_SetInterruptHandler 0076                         __end_of_m_mem_set 054B  
                              ??__chr2hex 0074                    __end_of_FLASH_ReadWord 0518  
                        ??_decode_hex_len 0031                    ?_decode_xmodem_package 0070  
                                 __ptext1 0225                                   __ptext2 047A  
                                 __ptext3 041F                                   __ptext4 05B5  
                                 __ptext5 05CF                                   __ptext6 039A  
                                 __ptext7 0089                                   __ptext8 0344  
                                 __ptext9 0452                         __end_of_m_str_h2b 039A  
                   _OSCILLATOR_Initialize 05DB                                 _T2CONbits 001C  
                ??_PIN_MANAGER_Initialize 0074                                   main@t16 003F  
              __size_of_SYSTEM_Initialize 000F                                   clrloop0 05C4  
                                 main@ret 003E                      end_of_initialization 0085  
                       _EUSART_Initialize 0518                          decode_hex_len@i8 0035  
                      ?_EUSART_Initialize 0070                                 _RCSTAbits 019D  
               FLASH_ReadWord@GIEBitValue 0020                    ??_iap_received_package 0075  
                         ?_FLASH_ReadWord 0074                       ??_EUSART_Initialize 0074  
                        ??_WDT_Initialize 0074                   __size_of_uart_send_byte 000E  
                        __CFG_FOSC$INTOSC 0000                                 _RXPPSbits 0E15  
                   api_write_block@binbuf 002B                 __end_of_EUSART_Initialize 0532  
                            _globalTicker 00B0                             ??_iap_process 0039  
                               _TXSTAbits 019E                         FLASH_WriteBlock@i 0028  
            __size_of_uart_received_start 0006              _TMR2_DefaultInterruptHandler 0000  
                              m_mem_set@x 0020                              _firstPackage 00C3  
                        _FLASH_WriteBlock 0290                    ?_OSCILLATOR_Initialize 0070  
                     start_initialization 0049           __size_of_PIN_MANAGER_Initialize 003F  
                        __bEusartRxBuffer 2340                    iap_received_package@tm 0020  
                        api_write_block@i 0260                          __CFG_LPBOREN$OFF 0000  
                              m_str_h2b@b 0029                                m_str_h2b@h 0022  
                              m_str_h2b@i 0027                                m_str_h2b@s 002A  
                     __end_of_iap_process 0290                               __pdataBANK1 00C1  
             FLASH_EraseBlock@GIEBitValue 0020                  __end_of_FLASH_EraseBlock 04E1  
                            _lengthInline 00BB                         __size_of__chr2hex 0028  
                             __pbssBIGRAM 2340               __end_of_EUSART_Transmit_ISR 04FD  
                     api_write_block@addr 0029                               __pbssCOMMON 0076  
                               ___latbits 0002                             __pcstackBANK0 0020  
                           __pcstackBANK4 0220                  __size_of_TMR2_Initialize 0013  
              __end_of_EUSART_Receive_ISR 04C3                                 _binBuffer 01A0  
              __size_of_EUSART_Initialize 001A                                 __pnvBANK1 00BE  
                  _PIN_MANAGER_Initialize 03E0                   ??_decode_xmodem_package 0036  
                            _eusartRxHead 00BD                              _eusartTxHead 0077  
                            _eusartRxTail 00BC                          __CFG_PPS1WAY$OFF 0000  
                            _eusartTxTail 0076              ??_INTERRUPT_InterruptManager 0073  
                 _eusartTxBufferRemaining 00C0                                 _m_mem_set 0532  
                          _uart_send_byte 05B5                                 _m_str_h2b 0344  
                        uart_send_str@str 0074                  __size_of_api_write_block 0057  
                          _eusartTxBuffer 00A0                                 clear_ram0 05C3  
                             _iap_process 0225                                  _PIE1bits 0091  
                __size_of_TMR2_StartTimer 0003       __size_of_INTERRUPT_InterruptManager 0043  
                                _PIR1bits 0011                 FLASH_EraseBlock@startAddr 0074  
                        ??_FLASH_ReadWord 0076                    __size_of_uart_send_str 0026  
                  __end_of_uart_send_byte 05C3                                ?_m_mem_set 0020  
       __size_of_TMR2_SetInterruptHandler 0006                 ?_TMR2_SetInterruptHandler 0074  
                             _isRunInBoot 0FFF                       _uart_received_start 05CF  
                              ?_m_str_h2b 0022                                  _HexTable 0585  
                       ??_TMR2_Initialize 0076                  __end_of_FLASH_WriteBlock 02ED  
                         __bEusartRxCount 0078                      ?_uart_received_start 0070  
                 ??_OSCILLATOR_Initialize 0074                                  __chr2hex 0452  
                         ?_uart_send_byte 0070             __size_of_iap_received_package 0033  
                     _eusartRxIdleTime_ms 00B6                                  __ptext10 0532  
                                __ptext11 02ED                                  __ptext20 03E0  
                                __ptext12 0290                                  __ptext21 05DB  
                                __ptext13 04C3                                  __ptext22 0518  
                                __ptext14 04FD                                  __ptext15 05A6  
                                __ptext24 04E1                                  __ptext16 05E0  
                                __ptext25 04A0                                  __ptext17 0572  
                                __ptext18 05E7                                  __ptext19 05D5  
                             _eusartTxLen 00B8                   __size_of_decode_hex_len 00FF  
                           _uart_send_str 047A                           uart_send_byte@x 0074  
                           __size_of_main 009D                         ??_api_write_block 002C  
                              _RA4PPSbits 0E94                     ??_uart_received_start 0074  
                              _RA5PPSbits 0E95                                  int$flags 007E  
                              _RC5PPSbits 0EA5                             _hexLineBuffer 0120  
                       ??_TMR2_StartTimer 0074        __end_of_INTERRUPT_InterruptManager 0047  
              _INTERRUPT_InterruptManager 0004                         ?_FLASH_EraseBlock 0074  
             PIN_MANAGER_Initialize@state 0074                               ??_m_mem_set 0074  
                      ??_FLASH_EraseBlock 0076                                _INTCONbits 000B  
                             ??_m_str_h2b 0025                   __size_of_WDT_Initialize 0004  
                          ?_uart_send_str 0074                                  intlevel1 0000  
                              _PMCON1bits 0195                   ?_PIN_MANAGER_Initialize 0070  
                       decode_hex_len@t16 0033                         __CFG_CLKOUTEN$OFF 0000  
                             _PPSLOCKbits 0E0F                        _EUSART_Receive_ISR 04A0  
          __size_of_decode_xmodem_package 0046             __end_of_decode_xmodem_package 03E0  
                           __pstringtext1 0585                             __pstringtext2 054B  
                           __pstringtext3 055F                             __pstringtext4 0596  
                           __pstringtext5 0000                       ?_EUSART_Receive_ISR 0070  
            __size_of_EUSART_Transmit_ISR 001C            __end_of_PIN_MANAGER_Initialize 041F  
                    ??_EUSART_Receive_ISR 0070                     _TMR2_InterruptHandler 00BE  
                            ?_iap_process 0070                          _hexLineCharCount 00BA  
