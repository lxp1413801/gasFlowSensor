

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Sat Mar 30 13:10:13 2019

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16F1575
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	stringtext4,global,class=STRCODE,delta=2
    10                           	psect	stringtext5,global,class=STRCODE,delta=2
    11                           	psect	cinit,global,class=CODE,merge=1,delta=2
    12                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	intentry,global,class=CODE,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	dabs	1,0x620,32
    48                           	dabs	1,0x5A0,80
    49                           	dabs	1,0x540,48
    50                           	dabs	1,0x2340,0,__bEusartRxBuffer
    51                           	dabs	1,0x7E,2
    52  0000                     
    53                           ; Version 2.00
    54                           ; Generated 27/05/2018 GMT
    55                           ; 
    56                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    57                           ; All rights reserved.
    58                           ; 
    59                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    60                           ; 
    61                           ; Redistribution and use in source and binary forms, with or without modification, are
    62                           ; permitted provided that the following conditions are met:
    63                           ; 
    64                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    65                           ;        conditions and the following disclaimer.
    66                           ; 
    67                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    68                           ;        of conditions and the following disclaimer in the documentation and/or other
    69                           ;        materials provided with the distribution.
    70                           ; 
    71                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    72                           ;        software without specific prior written permission.
    73                           ; 
    74                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    75                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    76                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    77                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    78                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    79                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    80                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    81                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    82                           ; 
    83                           ; 
    84                           ; Code-generator required, PIC16F1575 Definitions
    85                           ; 
    86                           ; SFR Addresses
    87  0000                     	;# 
    88  0001                     	;# 
    89  0002                     	;# 
    90  0003                     	;# 
    91  0004                     	;# 
    92  0005                     	;# 
    93  0006                     	;# 
    94  0007                     	;# 
    95  0008                     	;# 
    96  0009                     	;# 
    97  000A                     	;# 
    98  000B                     	;# 
    99  000C                     	;# 
   100  000E                     	;# 
   101  0011                     	;# 
   102  0012                     	;# 
   103  0013                     	;# 
   104  0015                     	;# 
   105  0016                     	;# 
   106  0016                     	;# 
   107  0017                     	;# 
   108  0018                     	;# 
   109  0019                     	;# 
   110  001A                     	;# 
   111  001B                     	;# 
   112  001C                     	;# 
   113  008C                     	;# 
   114  008E                     	;# 
   115  0091                     	;# 
   116  0092                     	;# 
   117  0093                     	;# 
   118  0095                     	;# 
   119  0096                     	;# 
   120  0097                     	;# 
   121  0098                     	;# 
   122  0099                     	;# 
   123  009A                     	;# 
   124  009B                     	;# 
   125  009B                     	;# 
   126  009C                     	;# 
   127  009D                     	;# 
   128  009E                     	;# 
   129  009F                     	;# 
   130  010C                     	;# 
   131  010E                     	;# 
   132  0111                     	;# 
   133  0112                     	;# 
   134  0113                     	;# 
   135  0114                     	;# 
   136  0115                     	;# 
   137  0116                     	;# 
   138  0117                     	;# 
   139  0118                     	;# 
   140  0119                     	;# 
   141  018C                     	;# 
   142  018E                     	;# 
   143  0191                     	;# 
   144  0191                     	;# 
   145  0192                     	;# 
   146  0193                     	;# 
   147  0193                     	;# 
   148  0194                     	;# 
   149  0195                     	;# 
   150  0196                     	;# 
   151  0197                     	;# 
   152  0199                     	;# 
   153  019A                     	;# 
   154  019B                     	;# 
   155  019B                     	;# 
   156  019C                     	;# 
   157  019D                     	;# 
   158  019E                     	;# 
   159  019F                     	;# 
   160  020C                     	;# 
   161  020E                     	;# 
   162  028C                     	;# 
   163  028E                     	;# 
   164  030C                     	;# 
   165  030E                     	;# 
   166  038C                     	;# 
   167  038E                     	;# 
   168  0391                     	;# 
   169  0392                     	;# 
   170  0393                     	;# 
   171  0397                     	;# 
   172  0398                     	;# 
   173  0399                     	;# 
   174  0691                     	;# 
   175  0692                     	;# 
   176  0693                     	;# 
   177  0694                     	;# 
   178  0695                     	;# 
   179  0D8E                     	;# 
   180  0D8F                     	;# 
   181  0D90                     	;# 
   182  0D91                     	;# 
   183  0D91                     	;# 
   184  0D92                     	;# 
   185  0D93                     	;# 
   186  0D93                     	;# 
   187  0D94                     	;# 
   188  0D95                     	;# 
   189  0D95                     	;# 
   190  0D96                     	;# 
   191  0D97                     	;# 
   192  0D97                     	;# 
   193  0D98                     	;# 
   194  0D99                     	;# 
   195  0D99                     	;# 
   196  0D9A                     	;# 
   197  0D9B                     	;# 
   198  0D9C                     	;# 
   199  0D9C                     	;# 
   200  0D9D                     	;# 
   201  0D9D                     	;# 
   202  0D9E                     	;# 
   203  0D9F                     	;# 
   204  0DA0                     	;# 
   205  0DA1                     	;# 
   206  0DA1                     	;# 
   207  0DA2                     	;# 
   208  0DA3                     	;# 
   209  0DA3                     	;# 
   210  0DA4                     	;# 
   211  0DA5                     	;# 
   212  0DA5                     	;# 
   213  0DA6                     	;# 
   214  0DA7                     	;# 
   215  0DA7                     	;# 
   216  0DA8                     	;# 
   217  0DA9                     	;# 
   218  0DA9                     	;# 
   219  0DAA                     	;# 
   220  0DAB                     	;# 
   221  0DAC                     	;# 
   222  0DAC                     	;# 
   223  0DAD                     	;# 
   224  0DAD                     	;# 
   225  0DAE                     	;# 
   226  0DAF                     	;# 
   227  0DB0                     	;# 
   228  0DB1                     	;# 
   229  0DB1                     	;# 
   230  0DB2                     	;# 
   231  0DB3                     	;# 
   232  0DB3                     	;# 
   233  0DB4                     	;# 
   234  0DB5                     	;# 
   235  0DB5                     	;# 
   236  0DB6                     	;# 
   237  0DB7                     	;# 
   238  0DB7                     	;# 
   239  0DB8                     	;# 
   240  0DB9                     	;# 
   241  0DB9                     	;# 
   242  0DBA                     	;# 
   243  0DBB                     	;# 
   244  0DBC                     	;# 
   245  0DBC                     	;# 
   246  0DBD                     	;# 
   247  0DBD                     	;# 
   248  0DBE                     	;# 
   249  0DBF                     	;# 
   250  0DC0                     	;# 
   251  0DC1                     	;# 
   252  0DC1                     	;# 
   253  0DC2                     	;# 
   254  0DC3                     	;# 
   255  0DC3                     	;# 
   256  0DC4                     	;# 
   257  0DC5                     	;# 
   258  0DC5                     	;# 
   259  0DC6                     	;# 
   260  0DC7                     	;# 
   261  0DC7                     	;# 
   262  0DC8                     	;# 
   263  0DC9                     	;# 
   264  0DC9                     	;# 
   265  0DCA                     	;# 
   266  0DCB                     	;# 
   267  0DCC                     	;# 
   268  0DCC                     	;# 
   269  0DCD                     	;# 
   270  0DCD                     	;# 
   271  0DCE                     	;# 
   272  0DCF                     	;# 
   273  0DD0                     	;# 
   274  0E0F                     	;# 
   275  0E10                     	;# 
   276  0E11                     	;# 
   277  0E12                     	;# 
   278  0E13                     	;# 
   279  0E14                     	;# 
   280  0E15                     	;# 
   281  0E16                     	;# 
   282  0E17                     	;# 
   283  0E90                     	;# 
   284  0E91                     	;# 
   285  0E92                     	;# 
   286  0E94                     	;# 
   287  0E95                     	;# 
   288  0EA0                     	;# 
   289  0EA1                     	;# 
   290  0EA2                     	;# 
   291  0EA3                     	;# 
   292  0EA4                     	;# 
   293  0EA5                     	;# 
   294  0FE4                     	;# 
   295  0FE5                     	;# 
   296  0FE6                     	;# 
   297  0FE7                     	;# 
   298  0FE8                     	;# 
   299  0FE8                     	;# 
   300  0FE9                     	;# 
   301  0FEA                     	;# 
   302  0FEA                     	;# 
   303  0FEB                     	;# 
   304  0FED                     	;# 
   305  0FEE                     	;# 
   306  0FEE                     	;# 
   307  0FEF                     	;# 
   308  0FFF                     	;# 
   309  0000                     	;# 
   310  0001                     	;# 
   311  0002                     	;# 
   312  0003                     	;# 
   313  0004                     	;# 
   314  0005                     	;# 
   315  0006                     	;# 
   316  0007                     	;# 
   317  0008                     	;# 
   318  0009                     	;# 
   319  000A                     	;# 
   320  000B                     	;# 
   321  000C                     	;# 
   322  000E                     	;# 
   323  0011                     	;# 
   324  0012                     	;# 
   325  0013                     	;# 
   326  0015                     	;# 
   327  0016                     	;# 
   328  0016                     	;# 
   329  0017                     	;# 
   330  0018                     	;# 
   331  0019                     	;# 
   332  001A                     	;# 
   333  001B                     	;# 
   334  001C                     	;# 
   335  008C                     	;# 
   336  008E                     	;# 
   337  0091                     	;# 
   338  0092                     	;# 
   339  0093                     	;# 
   340  0095                     	;# 
   341  0096                     	;# 
   342  0097                     	;# 
   343  0098                     	;# 
   344  0099                     	;# 
   345  009A                     	;# 
   346  009B                     	;# 
   347  009B                     	;# 
   348  009C                     	;# 
   349  009D                     	;# 
   350  009E                     	;# 
   351  009F                     	;# 
   352  010C                     	;# 
   353  010E                     	;# 
   354  0111                     	;# 
   355  0112                     	;# 
   356  0113                     	;# 
   357  0114                     	;# 
   358  0115                     	;# 
   359  0116                     	;# 
   360  0117                     	;# 
   361  0118                     	;# 
   362  0119                     	;# 
   363  018C                     	;# 
   364  018E                     	;# 
   365  0191                     	;# 
   366  0191                     	;# 
   367  0192                     	;# 
   368  0193                     	;# 
   369  0193                     	;# 
   370  0194                     	;# 
   371  0195                     	;# 
   372  0196                     	;# 
   373  0197                     	;# 
   374  0199                     	;# 
   375  019A                     	;# 
   376  019B                     	;# 
   377  019B                     	;# 
   378  019C                     	;# 
   379  019D                     	;# 
   380  019E                     	;# 
   381  019F                     	;# 
   382  020C                     	;# 
   383  020E                     	;# 
   384  028C                     	;# 
   385  028E                     	;# 
   386  030C                     	;# 
   387  030E                     	;# 
   388  038C                     	;# 
   389  038E                     	;# 
   390  0391                     	;# 
   391  0392                     	;# 
   392  0393                     	;# 
   393  0397                     	;# 
   394  0398                     	;# 
   395  0399                     	;# 
   396  0691                     	;# 
   397  0692                     	;# 
   398  0693                     	;# 
   399  0694                     	;# 
   400  0695                     	;# 
   401  0D8E                     	;# 
   402  0D8F                     	;# 
   403  0D90                     	;# 
   404  0D91                     	;# 
   405  0D91                     	;# 
   406  0D92                     	;# 
   407  0D93                     	;# 
   408  0D93                     	;# 
   409  0D94                     	;# 
   410  0D95                     	;# 
   411  0D95                     	;# 
   412  0D96                     	;# 
   413  0D97                     	;# 
   414  0D97                     	;# 
   415  0D98                     	;# 
   416  0D99                     	;# 
   417  0D99                     	;# 
   418  0D9A                     	;# 
   419  0D9B                     	;# 
   420  0D9C                     	;# 
   421  0D9C                     	;# 
   422  0D9D                     	;# 
   423  0D9D                     	;# 
   424  0D9E                     	;# 
   425  0D9F                     	;# 
   426  0DA0                     	;# 
   427  0DA1                     	;# 
   428  0DA1                     	;# 
   429  0DA2                     	;# 
   430  0DA3                     	;# 
   431  0DA3                     	;# 
   432  0DA4                     	;# 
   433  0DA5                     	;# 
   434  0DA5                     	;# 
   435  0DA6                     	;# 
   436  0DA7                     	;# 
   437  0DA7                     	;# 
   438  0DA8                     	;# 
   439  0DA9                     	;# 
   440  0DA9                     	;# 
   441  0DAA                     	;# 
   442  0DAB                     	;# 
   443  0DAC                     	;# 
   444  0DAC                     	;# 
   445  0DAD                     	;# 
   446  0DAD                     	;# 
   447  0DAE                     	;# 
   448  0DAF                     	;# 
   449  0DB0                     	;# 
   450  0DB1                     	;# 
   451  0DB1                     	;# 
   452  0DB2                     	;# 
   453  0DB3                     	;# 
   454  0DB3                     	;# 
   455  0DB4                     	;# 
   456  0DB5                     	;# 
   457  0DB5                     	;# 
   458  0DB6                     	;# 
   459  0DB7                     	;# 
   460  0DB7                     	;# 
   461  0DB8                     	;# 
   462  0DB9                     	;# 
   463  0DB9                     	;# 
   464  0DBA                     	;# 
   465  0DBB                     	;# 
   466  0DBC                     	;# 
   467  0DBC                     	;# 
   468  0DBD                     	;# 
   469  0DBD                     	;# 
   470  0DBE                     	;# 
   471  0DBF                     	;# 
   472  0DC0                     	;# 
   473  0DC1                     	;# 
   474  0DC1                     	;# 
   475  0DC2                     	;# 
   476  0DC3                     	;# 
   477  0DC3                     	;# 
   478  0DC4                     	;# 
   479  0DC5                     	;# 
   480  0DC5                     	;# 
   481  0DC6                     	;# 
   482  0DC7                     	;# 
   483  0DC7                     	;# 
   484  0DC8                     	;# 
   485  0DC9                     	;# 
   486  0DC9                     	;# 
   487  0DCA                     	;# 
   488  0DCB                     	;# 
   489  0DCC                     	;# 
   490  0DCC                     	;# 
   491  0DCD                     	;# 
   492  0DCD                     	;# 
   493  0DCE                     	;# 
   494  0DCF                     	;# 
   495  0DD0                     	;# 
   496  0E0F                     	;# 
   497  0E10                     	;# 
   498  0E11                     	;# 
   499  0E12                     	;# 
   500  0E13                     	;# 
   501  0E14                     	;# 
   502  0E15                     	;# 
   503  0E16                     	;# 
   504  0E17                     	;# 
   505  0E90                     	;# 
   506  0E91                     	;# 
   507  0E92                     	;# 
   508  0E94                     	;# 
   509  0E95                     	;# 
   510  0EA0                     	;# 
   511  0EA1                     	;# 
   512  0EA2                     	;# 
   513  0EA3                     	;# 
   514  0EA4                     	;# 
   515  0EA5                     	;# 
   516  0FE4                     	;# 
   517  0FE5                     	;# 
   518  0FE6                     	;# 
   519  0FE7                     	;# 
   520  0FE8                     	;# 
   521  0FE8                     	;# 
   522  0FE9                     	;# 
   523  0FEA                     	;# 
   524  0FEA                     	;# 
   525  0FEB                     	;# 
   526  0FED                     	;# 
   527  0FEE                     	;# 
   528  0FEE                     	;# 
   529  0FEF                     	;# 
   530  0000                     	;# 
   531  0001                     	;# 
   532  0002                     	;# 
   533  0003                     	;# 
   534  0004                     	;# 
   535  0005                     	;# 
   536  0006                     	;# 
   537  0007                     	;# 
   538  0008                     	;# 
   539  0009                     	;# 
   540  000A                     	;# 
   541  000B                     	;# 
   542  000C                     	;# 
   543  000E                     	;# 
   544  0011                     	;# 
   545  0012                     	;# 
   546  0013                     	;# 
   547  0015                     	;# 
   548  0016                     	;# 
   549  0016                     	;# 
   550  0017                     	;# 
   551  0018                     	;# 
   552  0019                     	;# 
   553  001A                     	;# 
   554  001B                     	;# 
   555  001C                     	;# 
   556  008C                     	;# 
   557  008E                     	;# 
   558  0091                     	;# 
   559  0092                     	;# 
   560  0093                     	;# 
   561  0095                     	;# 
   562  0096                     	;# 
   563  0097                     	;# 
   564  0098                     	;# 
   565  0099                     	;# 
   566  009A                     	;# 
   567  009B                     	;# 
   568  009B                     	;# 
   569  009C                     	;# 
   570  009D                     	;# 
   571  009E                     	;# 
   572  009F                     	;# 
   573  010C                     	;# 
   574  010E                     	;# 
   575  0111                     	;# 
   576  0112                     	;# 
   577  0113                     	;# 
   578  0114                     	;# 
   579  0115                     	;# 
   580  0116                     	;# 
   581  0117                     	;# 
   582  0118                     	;# 
   583  0119                     	;# 
   584  018C                     	;# 
   585  018E                     	;# 
   586  0191                     	;# 
   587  0191                     	;# 
   588  0192                     	;# 
   589  0193                     	;# 
   590  0193                     	;# 
   591  0194                     	;# 
   592  0195                     	;# 
   593  0196                     	;# 
   594  0197                     	;# 
   595  0199                     	;# 
   596  019A                     	;# 
   597  019B                     	;# 
   598  019B                     	;# 
   599  019C                     	;# 
   600  019D                     	;# 
   601  019E                     	;# 
   602  019F                     	;# 
   603  020C                     	;# 
   604  020E                     	;# 
   605  028C                     	;# 
   606  028E                     	;# 
   607  030C                     	;# 
   608  030E                     	;# 
   609  038C                     	;# 
   610  038E                     	;# 
   611  0391                     	;# 
   612  0392                     	;# 
   613  0393                     	;# 
   614  0397                     	;# 
   615  0398                     	;# 
   616  0399                     	;# 
   617  0691                     	;# 
   618  0692                     	;# 
   619  0693                     	;# 
   620  0694                     	;# 
   621  0695                     	;# 
   622  0D8E                     	;# 
   623  0D8F                     	;# 
   624  0D90                     	;# 
   625  0D91                     	;# 
   626  0D91                     	;# 
   627  0D92                     	;# 
   628  0D93                     	;# 
   629  0D93                     	;# 
   630  0D94                     	;# 
   631  0D95                     	;# 
   632  0D95                     	;# 
   633  0D96                     	;# 
   634  0D97                     	;# 
   635  0D97                     	;# 
   636  0D98                     	;# 
   637  0D99                     	;# 
   638  0D99                     	;# 
   639  0D9A                     	;# 
   640  0D9B                     	;# 
   641  0D9C                     	;# 
   642  0D9C                     	;# 
   643  0D9D                     	;# 
   644  0D9D                     	;# 
   645  0D9E                     	;# 
   646  0D9F                     	;# 
   647  0DA0                     	;# 
   648  0DA1                     	;# 
   649  0DA1                     	;# 
   650  0DA2                     	;# 
   651  0DA3                     	;# 
   652  0DA3                     	;# 
   653  0DA4                     	;# 
   654  0DA5                     	;# 
   655  0DA5                     	;# 
   656  0DA6                     	;# 
   657  0DA7                     	;# 
   658  0DA7                     	;# 
   659  0DA8                     	;# 
   660  0DA9                     	;# 
   661  0DA9                     	;# 
   662  0DAA                     	;# 
   663  0DAB                     	;# 
   664  0DAC                     	;# 
   665  0DAC                     	;# 
   666  0DAD                     	;# 
   667  0DAD                     	;# 
   668  0DAE                     	;# 
   669  0DAF                     	;# 
   670  0DB0                     	;# 
   671  0DB1                     	;# 
   672  0DB1                     	;# 
   673  0DB2                     	;# 
   674  0DB3                     	;# 
   675  0DB3                     	;# 
   676  0DB4                     	;# 
   677  0DB5                     	;# 
   678  0DB5                     	;# 
   679  0DB6                     	;# 
   680  0DB7                     	;# 
   681  0DB7                     	;# 
   682  0DB8                     	;# 
   683  0DB9                     	;# 
   684  0DB9                     	;# 
   685  0DBA                     	;# 
   686  0DBB                     	;# 
   687  0DBC                     	;# 
   688  0DBC                     	;# 
   689  0DBD                     	;# 
   690  0DBD                     	;# 
   691  0DBE                     	;# 
   692  0DBF                     	;# 
   693  0DC0                     	;# 
   694  0DC1                     	;# 
   695  0DC1                     	;# 
   696  0DC2                     	;# 
   697  0DC3                     	;# 
   698  0DC3                     	;# 
   699  0DC4                     	;# 
   700  0DC5                     	;# 
   701  0DC5                     	;# 
   702  0DC6                     	;# 
   703  0DC7                     	;# 
   704  0DC7                     	;# 
   705  0DC8                     	;# 
   706  0DC9                     	;# 
   707  0DC9                     	;# 
   708  0DCA                     	;# 
   709  0DCB                     	;# 
   710  0DCC                     	;# 
   711  0DCC                     	;# 
   712  0DCD                     	;# 
   713  0DCD                     	;# 
   714  0DCE                     	;# 
   715  0DCF                     	;# 
   716  0DD0                     	;# 
   717  0E0F                     	;# 
   718  0E10                     	;# 
   719  0E11                     	;# 
   720  0E12                     	;# 
   721  0E13                     	;# 
   722  0E14                     	;# 
   723  0E15                     	;# 
   724  0E16                     	;# 
   725  0E17                     	;# 
   726  0E90                     	;# 
   727  0E91                     	;# 
   728  0E92                     	;# 
   729  0E94                     	;# 
   730  0E95                     	;# 
   731  0EA0                     	;# 
   732  0EA1                     	;# 
   733  0EA2                     	;# 
   734  0EA3                     	;# 
   735  0EA4                     	;# 
   736  0EA5                     	;# 
   737  0FE4                     	;# 
   738  0FE5                     	;# 
   739  0FE6                     	;# 
   740  0FE7                     	;# 
   741  0FE8                     	;# 
   742  0FE8                     	;# 
   743  0FE9                     	;# 
   744  0FEA                     	;# 
   745  0FEA                     	;# 
   746  0FEB                     	;# 
   747  0FED                     	;# 
   748  0FEE                     	;# 
   749  0FEE                     	;# 
   750  0FEF                     	;# 
   751  0000                     	;# 
   752  0001                     	;# 
   753  0002                     	;# 
   754  0003                     	;# 
   755  0004                     	;# 
   756  0005                     	;# 
   757  0006                     	;# 
   758  0007                     	;# 
   759  0008                     	;# 
   760  0009                     	;# 
   761  000A                     	;# 
   762  000B                     	;# 
   763  000C                     	;# 
   764  000E                     	;# 
   765  0011                     	;# 
   766  0012                     	;# 
   767  0013                     	;# 
   768  0015                     	;# 
   769  0016                     	;# 
   770  0016                     	;# 
   771  0017                     	;# 
   772  0018                     	;# 
   773  0019                     	;# 
   774  001A                     	;# 
   775  001B                     	;# 
   776  001C                     	;# 
   777  008C                     	;# 
   778  008E                     	;# 
   779  0091                     	;# 
   780  0092                     	;# 
   781  0093                     	;# 
   782  0095                     	;# 
   783  0096                     	;# 
   784  0097                     	;# 
   785  0098                     	;# 
   786  0099                     	;# 
   787  009A                     	;# 
   788  009B                     	;# 
   789  009B                     	;# 
   790  009C                     	;# 
   791  009D                     	;# 
   792  009E                     	;# 
   793  009F                     	;# 
   794  010C                     	;# 
   795  010E                     	;# 
   796  0111                     	;# 
   797  0112                     	;# 
   798  0113                     	;# 
   799  0114                     	;# 
   800  0115                     	;# 
   801  0116                     	;# 
   802  0117                     	;# 
   803  0118                     	;# 
   804  0119                     	;# 
   805  018C                     	;# 
   806  018E                     	;# 
   807  0191                     	;# 
   808  0191                     	;# 
   809  0192                     	;# 
   810  0193                     	;# 
   811  0193                     	;# 
   812  0194                     	;# 
   813  0195                     	;# 
   814  0196                     	;# 
   815  0197                     	;# 
   816  0199                     	;# 
   817  019A                     	;# 
   818  019B                     	;# 
   819  019B                     	;# 
   820  019C                     	;# 
   821  019D                     	;# 
   822  019E                     	;# 
   823  019F                     	;# 
   824  020C                     	;# 
   825  020E                     	;# 
   826  028C                     	;# 
   827  028E                     	;# 
   828  030C                     	;# 
   829  030E                     	;# 
   830  038C                     	;# 
   831  038E                     	;# 
   832  0391                     	;# 
   833  0392                     	;# 
   834  0393                     	;# 
   835  0397                     	;# 
   836  0398                     	;# 
   837  0399                     	;# 
   838  0691                     	;# 
   839  0692                     	;# 
   840  0693                     	;# 
   841  0694                     	;# 
   842  0695                     	;# 
   843  0D8E                     	;# 
   844  0D8F                     	;# 
   845  0D90                     	;# 
   846  0D91                     	;# 
   847  0D91                     	;# 
   848  0D92                     	;# 
   849  0D93                     	;# 
   850  0D93                     	;# 
   851  0D94                     	;# 
   852  0D95                     	;# 
   853  0D95                     	;# 
   854  0D96                     	;# 
   855  0D97                     	;# 
   856  0D97                     	;# 
   857  0D98                     	;# 
   858  0D99                     	;# 
   859  0D99                     	;# 
   860  0D9A                     	;# 
   861  0D9B                     	;# 
   862  0D9C                     	;# 
   863  0D9C                     	;# 
   864  0D9D                     	;# 
   865  0D9D                     	;# 
   866  0D9E                     	;# 
   867  0D9F                     	;# 
   868  0DA0                     	;# 
   869  0DA1                     	;# 
   870  0DA1                     	;# 
   871  0DA2                     	;# 
   872  0DA3                     	;# 
   873  0DA3                     	;# 
   874  0DA4                     	;# 
   875  0DA5                     	;# 
   876  0DA5                     	;# 
   877  0DA6                     	;# 
   878  0DA7                     	;# 
   879  0DA7                     	;# 
   880  0DA8                     	;# 
   881  0DA9                     	;# 
   882  0DA9                     	;# 
   883  0DAA                     	;# 
   884  0DAB                     	;# 
   885  0DAC                     	;# 
   886  0DAC                     	;# 
   887  0DAD                     	;# 
   888  0DAD                     	;# 
   889  0DAE                     	;# 
   890  0DAF                     	;# 
   891  0DB0                     	;# 
   892  0DB1                     	;# 
   893  0DB1                     	;# 
   894  0DB2                     	;# 
   895  0DB3                     	;# 
   896  0DB3                     	;# 
   897  0DB4                     	;# 
   898  0DB5                     	;# 
   899  0DB5                     	;# 
   900  0DB6                     	;# 
   901  0DB7                     	;# 
   902  0DB7                     	;# 
   903  0DB8                     	;# 
   904  0DB9                     	;# 
   905  0DB9                     	;# 
   906  0DBA                     	;# 
   907  0DBB                     	;# 
   908  0DBC                     	;# 
   909  0DBC                     	;# 
   910  0DBD                     	;# 
   911  0DBD                     	;# 
   912  0DBE                     	;# 
   913  0DBF                     	;# 
   914  0DC0                     	;# 
   915  0DC1                     	;# 
   916  0DC1                     	;# 
   917  0DC2                     	;# 
   918  0DC3                     	;# 
   919  0DC3                     	;# 
   920  0DC4                     	;# 
   921  0DC5                     	;# 
   922  0DC5                     	;# 
   923  0DC6                     	;# 
   924  0DC7                     	;# 
   925  0DC7                     	;# 
   926  0DC8                     	;# 
   927  0DC9                     	;# 
   928  0DC9                     	;# 
   929  0DCA                     	;# 
   930  0DCB                     	;# 
   931  0DCC                     	;# 
   932  0DCC                     	;# 
   933  0DCD                     	;# 
   934  0DCD                     	;# 
   935  0DCE                     	;# 
   936  0DCF                     	;# 
   937  0DD0                     	;# 
   938  0E0F                     	;# 
   939  0E10                     	;# 
   940  0E11                     	;# 
   941  0E12                     	;# 
   942  0E13                     	;# 
   943  0E14                     	;# 
   944  0E15                     	;# 
   945  0E16                     	;# 
   946  0E17                     	;# 
   947  0E90                     	;# 
   948  0E91                     	;# 
   949  0E92                     	;# 
   950  0E94                     	;# 
   951  0E95                     	;# 
   952  0EA0                     	;# 
   953  0EA1                     	;# 
   954  0EA2                     	;# 
   955  0EA3                     	;# 
   956  0EA4                     	;# 
   957  0EA5                     	;# 
   958  0FE4                     	;# 
   959  0FE5                     	;# 
   960  0FE6                     	;# 
   961  0FE7                     	;# 
   962  0FE8                     	;# 
   963  0FE8                     	;# 
   964  0FE9                     	;# 
   965  0FEA                     	;# 
   966  0FEA                     	;# 
   967  0FEB                     	;# 
   968  0FED                     	;# 
   969  0FEE                     	;# 
   970  0FEE                     	;# 
   971  0FEF                     	;# 
   972  0FFF                     	;# 
   973  0000                     	;# 
   974  0001                     	;# 
   975  0002                     	;# 
   976  0003                     	;# 
   977  0004                     	;# 
   978  0005                     	;# 
   979  0006                     	;# 
   980  0007                     	;# 
   981  0008                     	;# 
   982  0009                     	;# 
   983  000A                     	;# 
   984  000B                     	;# 
   985  000C                     	;# 
   986  000E                     	;# 
   987  0011                     	;# 
   988  0012                     	;# 
   989  0013                     	;# 
   990  0015                     	;# 
   991  0016                     	;# 
   992  0016                     	;# 
   993  0017                     	;# 
   994  0018                     	;# 
   995  0019                     	;# 
   996  001A                     	;# 
   997  001B                     	;# 
   998  001C                     	;# 
   999  008C                     	;# 
  1000  008E                     	;# 
  1001  0091                     	;# 
  1002  0092                     	;# 
  1003  0093                     	;# 
  1004  0095                     	;# 
  1005  0096                     	;# 
  1006  0097                     	;# 
  1007  0098                     	;# 
  1008  0099                     	;# 
  1009  009A                     	;# 
  1010  009B                     	;# 
  1011  009B                     	;# 
  1012  009C                     	;# 
  1013  009D                     	;# 
  1014  009E                     	;# 
  1015  009F                     	;# 
  1016  010C                     	;# 
  1017  010E                     	;# 
  1018  0111                     	;# 
  1019  0112                     	;# 
  1020  0113                     	;# 
  1021  0114                     	;# 
  1022  0115                     	;# 
  1023  0116                     	;# 
  1024  0117                     	;# 
  1025  0118                     	;# 
  1026  0119                     	;# 
  1027  018C                     	;# 
  1028  018E                     	;# 
  1029  0191                     	;# 
  1030  0191                     	;# 
  1031  0192                     	;# 
  1032  0193                     	;# 
  1033  0193                     	;# 
  1034  0194                     	;# 
  1035  0195                     	;# 
  1036  0196                     	;# 
  1037  0197                     	;# 
  1038  0199                     	;# 
  1039  019A                     	;# 
  1040  019B                     	;# 
  1041  019B                     	;# 
  1042  019C                     	;# 
  1043  019D                     	;# 
  1044  019E                     	;# 
  1045  019F                     	;# 
  1046  020C                     	;# 
  1047  020E                     	;# 
  1048  028C                     	;# 
  1049  028E                     	;# 
  1050  030C                     	;# 
  1051  030E                     	;# 
  1052  038C                     	;# 
  1053  038E                     	;# 
  1054  0391                     	;# 
  1055  0392                     	;# 
  1056  0393                     	;# 
  1057  0397                     	;# 
  1058  0398                     	;# 
  1059  0399                     	;# 
  1060  0691                     	;# 
  1061  0692                     	;# 
  1062  0693                     	;# 
  1063  0694                     	;# 
  1064  0695                     	;# 
  1065  0D8E                     	;# 
  1066  0D8F                     	;# 
  1067  0D90                     	;# 
  1068  0D91                     	;# 
  1069  0D91                     	;# 
  1070  0D92                     	;# 
  1071  0D93                     	;# 
  1072  0D93                     	;# 
  1073  0D94                     	;# 
  1074  0D95                     	;# 
  1075  0D95                     	;# 
  1076  0D96                     	;# 
  1077  0D97                     	;# 
  1078  0D97                     	;# 
  1079  0D98                     	;# 
  1080  0D99                     	;# 
  1081  0D99                     	;# 
  1082  0D9A                     	;# 
  1083  0D9B                     	;# 
  1084  0D9C                     	;# 
  1085  0D9C                     	;# 
  1086  0D9D                     	;# 
  1087  0D9D                     	;# 
  1088  0D9E                     	;# 
  1089  0D9F                     	;# 
  1090  0DA0                     	;# 
  1091  0DA1                     	;# 
  1092  0DA1                     	;# 
  1093  0DA2                     	;# 
  1094  0DA3                     	;# 
  1095  0DA3                     	;# 
  1096  0DA4                     	;# 
  1097  0DA5                     	;# 
  1098  0DA5                     	;# 
  1099  0DA6                     	;# 
  1100  0DA7                     	;# 
  1101  0DA7                     	;# 
  1102  0DA8                     	;# 
  1103  0DA9                     	;# 
  1104  0DA9                     	;# 
  1105  0DAA                     	;# 
  1106  0DAB                     	;# 
  1107  0DAC                     	;# 
  1108  0DAC                     	;# 
  1109  0DAD                     	;# 
  1110  0DAD                     	;# 
  1111  0DAE                     	;# 
  1112  0DAF                     	;# 
  1113  0DB0                     	;# 
  1114  0DB1                     	;# 
  1115  0DB1                     	;# 
  1116  0DB2                     	;# 
  1117  0DB3                     	;# 
  1118  0DB3                     	;# 
  1119  0DB4                     	;# 
  1120  0DB5                     	;# 
  1121  0DB5                     	;# 
  1122  0DB6                     	;# 
  1123  0DB7                     	;# 
  1124  0DB7                     	;# 
  1125  0DB8                     	;# 
  1126  0DB9                     	;# 
  1127  0DB9                     	;# 
  1128  0DBA                     	;# 
  1129  0DBB                     	;# 
  1130  0DBC                     	;# 
  1131  0DBC                     	;# 
  1132  0DBD                     	;# 
  1133  0DBD                     	;# 
  1134  0DBE                     	;# 
  1135  0DBF                     	;# 
  1136  0DC0                     	;# 
  1137  0DC1                     	;# 
  1138  0DC1                     	;# 
  1139  0DC2                     	;# 
  1140  0DC3                     	;# 
  1141  0DC3                     	;# 
  1142  0DC4                     	;# 
  1143  0DC5                     	;# 
  1144  0DC5                     	;# 
  1145  0DC6                     	;# 
  1146  0DC7                     	;# 
  1147  0DC7                     	;# 
  1148  0DC8                     	;# 
  1149  0DC9                     	;# 
  1150  0DC9                     	;# 
  1151  0DCA                     	;# 
  1152  0DCB                     	;# 
  1153  0DCC                     	;# 
  1154  0DCC                     	;# 
  1155  0DCD                     	;# 
  1156  0DCD                     	;# 
  1157  0DCE                     	;# 
  1158  0DCF                     	;# 
  1159  0DD0                     	;# 
  1160  0E0F                     	;# 
  1161  0E10                     	;# 
  1162  0E11                     	;# 
  1163  0E12                     	;# 
  1164  0E13                     	;# 
  1165  0E14                     	;# 
  1166  0E15                     	;# 
  1167  0E16                     	;# 
  1168  0E17                     	;# 
  1169  0E90                     	;# 
  1170  0E91                     	;# 
  1171  0E92                     	;# 
  1172  0E94                     	;# 
  1173  0E95                     	;# 
  1174  0EA0                     	;# 
  1175  0EA1                     	;# 
  1176  0EA2                     	;# 
  1177  0EA3                     	;# 
  1178  0EA4                     	;# 
  1179  0EA5                     	;# 
  1180  0FE4                     	;# 
  1181  0FE5                     	;# 
  1182  0FE6                     	;# 
  1183  0FE7                     	;# 
  1184  0FE8                     	;# 
  1185  0FE8                     	;# 
  1186  0FE9                     	;# 
  1187  0FEA                     	;# 
  1188  0FEA                     	;# 
  1189  0FEB                     	;# 
  1190  0FED                     	;# 
  1191  0FEE                     	;# 
  1192  0FEE                     	;# 
  1193  0FEF                     	;# 
  1194  0000                     	;# 
  1195  0001                     	;# 
  1196  0002                     	;# 
  1197  0003                     	;# 
  1198  0004                     	;# 
  1199  0005                     	;# 
  1200  0006                     	;# 
  1201  0007                     	;# 
  1202  0008                     	;# 
  1203  0009                     	;# 
  1204  000A                     	;# 
  1205  000B                     	;# 
  1206  000C                     	;# 
  1207  000E                     	;# 
  1208  0011                     	;# 
  1209  0012                     	;# 
  1210  0013                     	;# 
  1211  0015                     	;# 
  1212  0016                     	;# 
  1213  0016                     	;# 
  1214  0017                     	;# 
  1215  0018                     	;# 
  1216  0019                     	;# 
  1217  001A                     	;# 
  1218  001B                     	;# 
  1219  001C                     	;# 
  1220  008C                     	;# 
  1221  008E                     	;# 
  1222  0091                     	;# 
  1223  0092                     	;# 
  1224  0093                     	;# 
  1225  0095                     	;# 
  1226  0096                     	;# 
  1227  0097                     	;# 
  1228  0098                     	;# 
  1229  0099                     	;# 
  1230  009A                     	;# 
  1231  009B                     	;# 
  1232  009B                     	;# 
  1233  009C                     	;# 
  1234  009D                     	;# 
  1235  009E                     	;# 
  1236  009F                     	;# 
  1237  010C                     	;# 
  1238  010E                     	;# 
  1239  0111                     	;# 
  1240  0112                     	;# 
  1241  0113                     	;# 
  1242  0114                     	;# 
  1243  0115                     	;# 
  1244  0116                     	;# 
  1245  0117                     	;# 
  1246  0118                     	;# 
  1247  0119                     	;# 
  1248  018C                     	;# 
  1249  018E                     	;# 
  1250  0191                     	;# 
  1251  0191                     	;# 
  1252  0192                     	;# 
  1253  0193                     	;# 
  1254  0193                     	;# 
  1255  0194                     	;# 
  1256  0195                     	;# 
  1257  0196                     	;# 
  1258  0197                     	;# 
  1259  0199                     	;# 
  1260  019A                     	;# 
  1261  019B                     	;# 
  1262  019B                     	;# 
  1263  019C                     	;# 
  1264  019D                     	;# 
  1265  019E                     	;# 
  1266  019F                     	;# 
  1267  020C                     	;# 
  1268  020E                     	;# 
  1269  028C                     	;# 
  1270  028E                     	;# 
  1271  030C                     	;# 
  1272  030E                     	;# 
  1273  038C                     	;# 
  1274  038E                     	;# 
  1275  0391                     	;# 
  1276  0392                     	;# 
  1277  0393                     	;# 
  1278  0397                     	;# 
  1279  0398                     	;# 
  1280  0399                     	;# 
  1281  0691                     	;# 
  1282  0692                     	;# 
  1283  0693                     	;# 
  1284  0694                     	;# 
  1285  0695                     	;# 
  1286  0D8E                     	;# 
  1287  0D8F                     	;# 
  1288  0D90                     	;# 
  1289  0D91                     	;# 
  1290  0D91                     	;# 
  1291  0D92                     	;# 
  1292  0D93                     	;# 
  1293  0D93                     	;# 
  1294  0D94                     	;# 
  1295  0D95                     	;# 
  1296  0D95                     	;# 
  1297  0D96                     	;# 
  1298  0D97                     	;# 
  1299  0D97                     	;# 
  1300  0D98                     	;# 
  1301  0D99                     	;# 
  1302  0D99                     	;# 
  1303  0D9A                     	;# 
  1304  0D9B                     	;# 
  1305  0D9C                     	;# 
  1306  0D9C                     	;# 
  1307  0D9D                     	;# 
  1308  0D9D                     	;# 
  1309  0D9E                     	;# 
  1310  0D9F                     	;# 
  1311  0DA0                     	;# 
  1312  0DA1                     	;# 
  1313  0DA1                     	;# 
  1314  0DA2                     	;# 
  1315  0DA3                     	;# 
  1316  0DA3                     	;# 
  1317  0DA4                     	;# 
  1318  0DA5                     	;# 
  1319  0DA5                     	;# 
  1320  0DA6                     	;# 
  1321  0DA7                     	;# 
  1322  0DA7                     	;# 
  1323  0DA8                     	;# 
  1324  0DA9                     	;# 
  1325  0DA9                     	;# 
  1326  0DAA                     	;# 
  1327  0DAB                     	;# 
  1328  0DAC                     	;# 
  1329  0DAC                     	;# 
  1330  0DAD                     	;# 
  1331  0DAD                     	;# 
  1332  0DAE                     	;# 
  1333  0DAF                     	;# 
  1334  0DB0                     	;# 
  1335  0DB1                     	;# 
  1336  0DB1                     	;# 
  1337  0DB2                     	;# 
  1338  0DB3                     	;# 
  1339  0DB3                     	;# 
  1340  0DB4                     	;# 
  1341  0DB5                     	;# 
  1342  0DB5                     	;# 
  1343  0DB6                     	;# 
  1344  0DB7                     	;# 
  1345  0DB7                     	;# 
  1346  0DB8                     	;# 
  1347  0DB9                     	;# 
  1348  0DB9                     	;# 
  1349  0DBA                     	;# 
  1350  0DBB                     	;# 
  1351  0DBC                     	;# 
  1352  0DBC                     	;# 
  1353  0DBD                     	;# 
  1354  0DBD                     	;# 
  1355  0DBE                     	;# 
  1356  0DBF                     	;# 
  1357  0DC0                     	;# 
  1358  0DC1                     	;# 
  1359  0DC1                     	;# 
  1360  0DC2                     	;# 
  1361  0DC3                     	;# 
  1362  0DC3                     	;# 
  1363  0DC4                     	;# 
  1364  0DC5                     	;# 
  1365  0DC5                     	;# 
  1366  0DC6                     	;# 
  1367  0DC7                     	;# 
  1368  0DC7                     	;# 
  1369  0DC8                     	;# 
  1370  0DC9                     	;# 
  1371  0DC9                     	;# 
  1372  0DCA                     	;# 
  1373  0DCB                     	;# 
  1374  0DCC                     	;# 
  1375  0DCC                     	;# 
  1376  0DCD                     	;# 
  1377  0DCD                     	;# 
  1378  0DCE                     	;# 
  1379  0DCF                     	;# 
  1380  0DD0                     	;# 
  1381  0E0F                     	;# 
  1382  0E10                     	;# 
  1383  0E11                     	;# 
  1384  0E12                     	;# 
  1385  0E13                     	;# 
  1386  0E14                     	;# 
  1387  0E15                     	;# 
  1388  0E16                     	;# 
  1389  0E17                     	;# 
  1390  0E90                     	;# 
  1391  0E91                     	;# 
  1392  0E92                     	;# 
  1393  0E94                     	;# 
  1394  0E95                     	;# 
  1395  0EA0                     	;# 
  1396  0EA1                     	;# 
  1397  0EA2                     	;# 
  1398  0EA3                     	;# 
  1399  0EA4                     	;# 
  1400  0EA5                     	;# 
  1401  0FE4                     	;# 
  1402  0FE5                     	;# 
  1403  0FE6                     	;# 
  1404  0FE7                     	;# 
  1405  0FE8                     	;# 
  1406  0FE8                     	;# 
  1407  0FE9                     	;# 
  1408  0FEA                     	;# 
  1409  0FEA                     	;# 
  1410  0FEB                     	;# 
  1411  0FED                     	;# 
  1412  0FEE                     	;# 
  1413  0FEE                     	;# 
  1414  0FEF                     	;# 
  1415  0000                     	;# 
  1416  0001                     	;# 
  1417  0002                     	;# 
  1418  0003                     	;# 
  1419  0004                     	;# 
  1420  0005                     	;# 
  1421  0006                     	;# 
  1422  0007                     	;# 
  1423  0008                     	;# 
  1424  0009                     	;# 
  1425  000A                     	;# 
  1426  000B                     	;# 
  1427  000C                     	;# 
  1428  000E                     	;# 
  1429  0011                     	;# 
  1430  0012                     	;# 
  1431  0013                     	;# 
  1432  0015                     	;# 
  1433  0016                     	;# 
  1434  0016                     	;# 
  1435  0017                     	;# 
  1436  0018                     	;# 
  1437  0019                     	;# 
  1438  001A                     	;# 
  1439  001B                     	;# 
  1440  001C                     	;# 
  1441  008C                     	;# 
  1442  008E                     	;# 
  1443  0091                     	;# 
  1444  0092                     	;# 
  1445  0093                     	;# 
  1446  0095                     	;# 
  1447  0096                     	;# 
  1448  0097                     	;# 
  1449  0098                     	;# 
  1450  0099                     	;# 
  1451  009A                     	;# 
  1452  009B                     	;# 
  1453  009B                     	;# 
  1454  009C                     	;# 
  1455  009D                     	;# 
  1456  009E                     	;# 
  1457  009F                     	;# 
  1458  010C                     	;# 
  1459  010E                     	;# 
  1460  0111                     	;# 
  1461  0112                     	;# 
  1462  0113                     	;# 
  1463  0114                     	;# 
  1464  0115                     	;# 
  1465  0116                     	;# 
  1466  0117                     	;# 
  1467  0118                     	;# 
  1468  0119                     	;# 
  1469  018C                     	;# 
  1470  018E                     	;# 
  1471  0191                     	;# 
  1472  0191                     	;# 
  1473  0192                     	;# 
  1474  0193                     	;# 
  1475  0193                     	;# 
  1476  0194                     	;# 
  1477  0195                     	;# 
  1478  0196                     	;# 
  1479  0197                     	;# 
  1480  0199                     	;# 
  1481  019A                     	;# 
  1482  019B                     	;# 
  1483  019B                     	;# 
  1484  019C                     	;# 
  1485  019D                     	;# 
  1486  019E                     	;# 
  1487  019F                     	;# 
  1488  020C                     	;# 
  1489  020E                     	;# 
  1490  028C                     	;# 
  1491  028E                     	;# 
  1492  030C                     	;# 
  1493  030E                     	;# 
  1494  038C                     	;# 
  1495  038E                     	;# 
  1496  0391                     	;# 
  1497  0392                     	;# 
  1498  0393                     	;# 
  1499  0397                     	;# 
  1500  0398                     	;# 
  1501  0399                     	;# 
  1502  0691                     	;# 
  1503  0692                     	;# 
  1504  0693                     	;# 
  1505  0694                     	;# 
  1506  0695                     	;# 
  1507  0D8E                     	;# 
  1508  0D8F                     	;# 
  1509  0D90                     	;# 
  1510  0D91                     	;# 
  1511  0D91                     	;# 
  1512  0D92                     	;# 
  1513  0D93                     	;# 
  1514  0D93                     	;# 
  1515  0D94                     	;# 
  1516  0D95                     	;# 
  1517  0D95                     	;# 
  1518  0D96                     	;# 
  1519  0D97                     	;# 
  1520  0D97                     	;# 
  1521  0D98                     	;# 
  1522  0D99                     	;# 
  1523  0D99                     	;# 
  1524  0D9A                     	;# 
  1525  0D9B                     	;# 
  1526  0D9C                     	;# 
  1527  0D9C                     	;# 
  1528  0D9D                     	;# 
  1529  0D9D                     	;# 
  1530  0D9E                     	;# 
  1531  0D9F                     	;# 
  1532  0DA0                     	;# 
  1533  0DA1                     	;# 
  1534  0DA1                     	;# 
  1535  0DA2                     	;# 
  1536  0DA3                     	;# 
  1537  0DA3                     	;# 
  1538  0DA4                     	;# 
  1539  0DA5                     	;# 
  1540  0DA5                     	;# 
  1541  0DA6                     	;# 
  1542  0DA7                     	;# 
  1543  0DA7                     	;# 
  1544  0DA8                     	;# 
  1545  0DA9                     	;# 
  1546  0DA9                     	;# 
  1547  0DAA                     	;# 
  1548  0DAB                     	;# 
  1549  0DAC                     	;# 
  1550  0DAC                     	;# 
  1551  0DAD                     	;# 
  1552  0DAD                     	;# 
  1553  0DAE                     	;# 
  1554  0DAF                     	;# 
  1555  0DB0                     	;# 
  1556  0DB1                     	;# 
  1557  0DB1                     	;# 
  1558  0DB2                     	;# 
  1559  0DB3                     	;# 
  1560  0DB3                     	;# 
  1561  0DB4                     	;# 
  1562  0DB5                     	;# 
  1563  0DB5                     	;# 
  1564  0DB6                     	;# 
  1565  0DB7                     	;# 
  1566  0DB7                     	;# 
  1567  0DB8                     	;# 
  1568  0DB9                     	;# 
  1569  0DB9                     	;# 
  1570  0DBA                     	;# 
  1571  0DBB                     	;# 
  1572  0DBC                     	;# 
  1573  0DBC                     	;# 
  1574  0DBD                     	;# 
  1575  0DBD                     	;# 
  1576  0DBE                     	;# 
  1577  0DBF                     	;# 
  1578  0DC0                     	;# 
  1579  0DC1                     	;# 
  1580  0DC1                     	;# 
  1581  0DC2                     	;# 
  1582  0DC3                     	;# 
  1583  0DC3                     	;# 
  1584  0DC4                     	;# 
  1585  0DC5                     	;# 
  1586  0DC5                     	;# 
  1587  0DC6                     	;# 
  1588  0DC7                     	;# 
  1589  0DC7                     	;# 
  1590  0DC8                     	;# 
  1591  0DC9                     	;# 
  1592  0DC9                     	;# 
  1593  0DCA                     	;# 
  1594  0DCB                     	;# 
  1595  0DCC                     	;# 
  1596  0DCC                     	;# 
  1597  0DCD                     	;# 
  1598  0DCD                     	;# 
  1599  0DCE                     	;# 
  1600  0DCF                     	;# 
  1601  0DD0                     	;# 
  1602  0E0F                     	;# 
  1603  0E10                     	;# 
  1604  0E11                     	;# 
  1605  0E12                     	;# 
  1606  0E13                     	;# 
  1607  0E14                     	;# 
  1608  0E15                     	;# 
  1609  0E16                     	;# 
  1610  0E17                     	;# 
  1611  0E90                     	;# 
  1612  0E91                     	;# 
  1613  0E92                     	;# 
  1614  0E94                     	;# 
  1615  0E95                     	;# 
  1616  0EA0                     	;# 
  1617  0EA1                     	;# 
  1618  0EA2                     	;# 
  1619  0EA3                     	;# 
  1620  0EA4                     	;# 
  1621  0EA5                     	;# 
  1622  0FE4                     	;# 
  1623  0FE5                     	;# 
  1624  0FE6                     	;# 
  1625  0FE7                     	;# 
  1626  0FE8                     	;# 
  1627  0FE8                     	;# 
  1628  0FE9                     	;# 
  1629  0FEA                     	;# 
  1630  0FEA                     	;# 
  1631  0FEB                     	;# 
  1632  0FED                     	;# 
  1633  0FEE                     	;# 
  1634  0FEE                     	;# 
  1635  0FEF                     	;# 
  1636  0FFF                     	;# 
  1637  0000                     	;# 
  1638  0001                     	;# 
  1639  0002                     	;# 
  1640  0003                     	;# 
  1641  0004                     	;# 
  1642  0005                     	;# 
  1643  0006                     	;# 
  1644  0007                     	;# 
  1645  0008                     	;# 
  1646  0009                     	;# 
  1647  000A                     	;# 
  1648  000B                     	;# 
  1649  000C                     	;# 
  1650  000E                     	;# 
  1651  0011                     	;# 
  1652  0012                     	;# 
  1653  0013                     	;# 
  1654  0015                     	;# 
  1655  0016                     	;# 
  1656  0016                     	;# 
  1657  0017                     	;# 
  1658  0018                     	;# 
  1659  0019                     	;# 
  1660  001A                     	;# 
  1661  001B                     	;# 
  1662  001C                     	;# 
  1663  008C                     	;# 
  1664  008E                     	;# 
  1665  0091                     	;# 
  1666  0092                     	;# 
  1667  0093                     	;# 
  1668  0095                     	;# 
  1669  0096                     	;# 
  1670  0097                     	;# 
  1671  0098                     	;# 
  1672  0099                     	;# 
  1673  009A                     	;# 
  1674  009B                     	;# 
  1675  009B                     	;# 
  1676  009C                     	;# 
  1677  009D                     	;# 
  1678  009E                     	;# 
  1679  009F                     	;# 
  1680  010C                     	;# 
  1681  010E                     	;# 
  1682  0111                     	;# 
  1683  0112                     	;# 
  1684  0113                     	;# 
  1685  0114                     	;# 
  1686  0115                     	;# 
  1687  0116                     	;# 
  1688  0117                     	;# 
  1689  0118                     	;# 
  1690  0119                     	;# 
  1691  018C                     	;# 
  1692  018E                     	;# 
  1693  0191                     	;# 
  1694  0191                     	;# 
  1695  0192                     	;# 
  1696  0193                     	;# 
  1697  0193                     	;# 
  1698  0194                     	;# 
  1699  0195                     	;# 
  1700  0196                     	;# 
  1701  0197                     	;# 
  1702  0199                     	;# 
  1703  019A                     	;# 
  1704  019B                     	;# 
  1705  019B                     	;# 
  1706  019C                     	;# 
  1707  019D                     	;# 
  1708  019E                     	;# 
  1709  019F                     	;# 
  1710  020C                     	;# 
  1711  020E                     	;# 
  1712  028C                     	;# 
  1713  028E                     	;# 
  1714  030C                     	;# 
  1715  030E                     	;# 
  1716  038C                     	;# 
  1717  038E                     	;# 
  1718  0391                     	;# 
  1719  0392                     	;# 
  1720  0393                     	;# 
  1721  0397                     	;# 
  1722  0398                     	;# 
  1723  0399                     	;# 
  1724  0691                     	;# 
  1725  0692                     	;# 
  1726  0693                     	;# 
  1727  0694                     	;# 
  1728  0695                     	;# 
  1729  0D8E                     	;# 
  1730  0D8F                     	;# 
  1731  0D90                     	;# 
  1732  0D91                     	;# 
  1733  0D91                     	;# 
  1734  0D92                     	;# 
  1735  0D93                     	;# 
  1736  0D93                     	;# 
  1737  0D94                     	;# 
  1738  0D95                     	;# 
  1739  0D95                     	;# 
  1740  0D96                     	;# 
  1741  0D97                     	;# 
  1742  0D97                     	;# 
  1743  0D98                     	;# 
  1744  0D99                     	;# 
  1745  0D99                     	;# 
  1746  0D9A                     	;# 
  1747  0D9B                     	;# 
  1748  0D9C                     	;# 
  1749  0D9C                     	;# 
  1750  0D9D                     	;# 
  1751  0D9D                     	;# 
  1752  0D9E                     	;# 
  1753  0D9F                     	;# 
  1754  0DA0                     	;# 
  1755  0DA1                     	;# 
  1756  0DA1                     	;# 
  1757  0DA2                     	;# 
  1758  0DA3                     	;# 
  1759  0DA3                     	;# 
  1760  0DA4                     	;# 
  1761  0DA5                     	;# 
  1762  0DA5                     	;# 
  1763  0DA6                     	;# 
  1764  0DA7                     	;# 
  1765  0DA7                     	;# 
  1766  0DA8                     	;# 
  1767  0DA9                     	;# 
  1768  0DA9                     	;# 
  1769  0DAA                     	;# 
  1770  0DAB                     	;# 
  1771  0DAC                     	;# 
  1772  0DAC                     	;# 
  1773  0DAD                     	;# 
  1774  0DAD                     	;# 
  1775  0DAE                     	;# 
  1776  0DAF                     	;# 
  1777  0DB0                     	;# 
  1778  0DB1                     	;# 
  1779  0DB1                     	;# 
  1780  0DB2                     	;# 
  1781  0DB3                     	;# 
  1782  0DB3                     	;# 
  1783  0DB4                     	;# 
  1784  0DB5                     	;# 
  1785  0DB5                     	;# 
  1786  0DB6                     	;# 
  1787  0DB7                     	;# 
  1788  0DB7                     	;# 
  1789  0DB8                     	;# 
  1790  0DB9                     	;# 
  1791  0DB9                     	;# 
  1792  0DBA                     	;# 
  1793  0DBB                     	;# 
  1794  0DBC                     	;# 
  1795  0DBC                     	;# 
  1796  0DBD                     	;# 
  1797  0DBD                     	;# 
  1798  0DBE                     	;# 
  1799  0DBF                     	;# 
  1800  0DC0                     	;# 
  1801  0DC1                     	;# 
  1802  0DC1                     	;# 
  1803  0DC2                     	;# 
  1804  0DC3                     	;# 
  1805  0DC3                     	;# 
  1806  0DC4                     	;# 
  1807  0DC5                     	;# 
  1808  0DC5                     	;# 
  1809  0DC6                     	;# 
  1810  0DC7                     	;# 
  1811  0DC7                     	;# 
  1812  0DC8                     	;# 
  1813  0DC9                     	;# 
  1814  0DC9                     	;# 
  1815  0DCA                     	;# 
  1816  0DCB                     	;# 
  1817  0DCC                     	;# 
  1818  0DCC                     	;# 
  1819  0DCD                     	;# 
  1820  0DCD                     	;# 
  1821  0DCE                     	;# 
  1822  0DCF                     	;# 
  1823  0DD0                     	;# 
  1824  0E0F                     	;# 
  1825  0E10                     	;# 
  1826  0E11                     	;# 
  1827  0E12                     	;# 
  1828  0E13                     	;# 
  1829  0E14                     	;# 
  1830  0E15                     	;# 
  1831  0E16                     	;# 
  1832  0E17                     	;# 
  1833  0E90                     	;# 
  1834  0E91                     	;# 
  1835  0E92                     	;# 
  1836  0E94                     	;# 
  1837  0E95                     	;# 
  1838  0EA0                     	;# 
  1839  0EA1                     	;# 
  1840  0EA2                     	;# 
  1841  0EA3                     	;# 
  1842  0EA4                     	;# 
  1843  0EA5                     	;# 
  1844  0FE4                     	;# 
  1845  0FE5                     	;# 
  1846  0FE6                     	;# 
  1847  0FE7                     	;# 
  1848  0FE8                     	;# 
  1849  0FE8                     	;# 
  1850  0FE9                     	;# 
  1851  0FEA                     	;# 
  1852  0FEA                     	;# 
  1853  0FEB                     	;# 
  1854  0FED                     	;# 
  1855  0FEE                     	;# 
  1856  0FEE                     	;# 
  1857  0FEF                     	;# 
  1858  0FFF                     	;# 
  1859  0000                     	;# 
  1860  0001                     	;# 
  1861  0002                     	;# 
  1862  0003                     	;# 
  1863  0004                     	;# 
  1864  0005                     	;# 
  1865  0006                     	;# 
  1866  0007                     	;# 
  1867  0008                     	;# 
  1868  0009                     	;# 
  1869  000A                     	;# 
  1870  000B                     	;# 
  1871  000C                     	;# 
  1872  000E                     	;# 
  1873  0011                     	;# 
  1874  0012                     	;# 
  1875  0013                     	;# 
  1876  0015                     	;# 
  1877  0016                     	;# 
  1878  0016                     	;# 
  1879  0017                     	;# 
  1880  0018                     	;# 
  1881  0019                     	;# 
  1882  001A                     	;# 
  1883  001B                     	;# 
  1884  001C                     	;# 
  1885  008C                     	;# 
  1886  008E                     	;# 
  1887  0091                     	;# 
  1888  0092                     	;# 
  1889  0093                     	;# 
  1890  0095                     	;# 
  1891  0096                     	;# 
  1892  0097                     	;# 
  1893  0098                     	;# 
  1894  0099                     	;# 
  1895  009A                     	;# 
  1896  009B                     	;# 
  1897  009B                     	;# 
  1898  009C                     	;# 
  1899  009D                     	;# 
  1900  009E                     	;# 
  1901  009F                     	;# 
  1902  010C                     	;# 
  1903  010E                     	;# 
  1904  0111                     	;# 
  1905  0112                     	;# 
  1906  0113                     	;# 
  1907  0114                     	;# 
  1908  0115                     	;# 
  1909  0116                     	;# 
  1910  0117                     	;# 
  1911  0118                     	;# 
  1912  0119                     	;# 
  1913  018C                     	;# 
  1914  018E                     	;# 
  1915  0191                     	;# 
  1916  0191                     	;# 
  1917  0192                     	;# 
  1918  0193                     	;# 
  1919  0193                     	;# 
  1920  0194                     	;# 
  1921  0195                     	;# 
  1922  0196                     	;# 
  1923  0197                     	;# 
  1924  0199                     	;# 
  1925  019A                     	;# 
  1926  019B                     	;# 
  1927  019B                     	;# 
  1928  019C                     	;# 
  1929  019D                     	;# 
  1930  019E                     	;# 
  1931  019F                     	;# 
  1932  020C                     	;# 
  1933  020E                     	;# 
  1934  028C                     	;# 
  1935  028E                     	;# 
  1936  030C                     	;# 
  1937  030E                     	;# 
  1938  038C                     	;# 
  1939  038E                     	;# 
  1940  0391                     	;# 
  1941  0392                     	;# 
  1942  0393                     	;# 
  1943  0397                     	;# 
  1944  0398                     	;# 
  1945  0399                     	;# 
  1946  0691                     	;# 
  1947  0692                     	;# 
  1948  0693                     	;# 
  1949  0694                     	;# 
  1950  0695                     	;# 
  1951  0D8E                     	;# 
  1952  0D8F                     	;# 
  1953  0D90                     	;# 
  1954  0D91                     	;# 
  1955  0D91                     	;# 
  1956  0D92                     	;# 
  1957  0D93                     	;# 
  1958  0D93                     	;# 
  1959  0D94                     	;# 
  1960  0D95                     	;# 
  1961  0D95                     	;# 
  1962  0D96                     	;# 
  1963  0D97                     	;# 
  1964  0D97                     	;# 
  1965  0D98                     	;# 
  1966  0D99                     	;# 
  1967  0D99                     	;# 
  1968  0D9A                     	;# 
  1969  0D9B                     	;# 
  1970  0D9C                     	;# 
  1971  0D9C                     	;# 
  1972  0D9D                     	;# 
  1973  0D9D                     	;# 
  1974  0D9E                     	;# 
  1975  0D9F                     	;# 
  1976  0DA0                     	;# 
  1977  0DA1                     	;# 
  1978  0DA1                     	;# 
  1979  0DA2                     	;# 
  1980  0DA3                     	;# 
  1981  0DA3                     	;# 
  1982  0DA4                     	;# 
  1983  0DA5                     	;# 
  1984  0DA5                     	;# 
  1985  0DA6                     	;# 
  1986  0DA7                     	;# 
  1987  0DA7                     	;# 
  1988  0DA8                     	;# 
  1989  0DA9                     	;# 
  1990  0DA9                     	;# 
  1991  0DAA                     	;# 
  1992  0DAB                     	;# 
  1993  0DAC                     	;# 
  1994  0DAC                     	;# 
  1995  0DAD                     	;# 
  1996  0DAD                     	;# 
  1997  0DAE                     	;# 
  1998  0DAF                     	;# 
  1999  0DB0                     	;# 
  2000  0DB1                     	;# 
  2001  0DB1                     	;# 
  2002  0DB2                     	;# 
  2003  0DB3                     	;# 
  2004  0DB3                     	;# 
  2005  0DB4                     	;# 
  2006  0DB5                     	;# 
  2007  0DB5                     	;# 
  2008  0DB6                     	;# 
  2009  0DB7                     	;# 
  2010  0DB7                     	;# 
  2011  0DB8                     	;# 
  2012  0DB9                     	;# 
  2013  0DB9                     	;# 
  2014  0DBA                     	;# 
  2015  0DBB                     	;# 
  2016  0DBC                     	;# 
  2017  0DBC                     	;# 
  2018  0DBD                     	;# 
  2019  0DBD                     	;# 
  2020  0DBE                     	;# 
  2021  0DBF                     	;# 
  2022  0DC0                     	;# 
  2023  0DC1                     	;# 
  2024  0DC1                     	;# 
  2025  0DC2                     	;# 
  2026  0DC3                     	;# 
  2027  0DC3                     	;# 
  2028  0DC4                     	;# 
  2029  0DC5                     	;# 
  2030  0DC5                     	;# 
  2031  0DC6                     	;# 
  2032  0DC7                     	;# 
  2033  0DC7                     	;# 
  2034  0DC8                     	;# 
  2035  0DC9                     	;# 
  2036  0DC9                     	;# 
  2037  0DCA                     	;# 
  2038  0DCB                     	;# 
  2039  0DCC                     	;# 
  2040  0DCC                     	;# 
  2041  0DCD                     	;# 
  2042  0DCD                     	;# 
  2043  0DCE                     	;# 
  2044  0DCF                     	;# 
  2045  0DD0                     	;# 
  2046  0E0F                     	;# 
  2047  0E10                     	;# 
  2048  0E11                     	;# 
  2049  0E12                     	;# 
  2050  0E13                     	;# 
  2051  0E14                     	;# 
  2052  0E15                     	;# 
  2053  0E16                     	;# 
  2054  0E17                     	;# 
  2055  0E90                     	;# 
  2056  0E91                     	;# 
  2057  0E92                     	;# 
  2058  0E94                     	;# 
  2059  0E95                     	;# 
  2060  0EA0                     	;# 
  2061  0EA1                     	;# 
  2062  0EA2                     	;# 
  2063  0EA3                     	;# 
  2064  0EA4                     	;# 
  2065  0EA5                     	;# 
  2066  0FE4                     	;# 
  2067  0FE5                     	;# 
  2068  0FE6                     	;# 
  2069  0FE7                     	;# 
  2070  0FE8                     	;# 
  2071  0FE8                     	;# 
  2072  0FE9                     	;# 
  2073  0FEA                     	;# 
  2074  0FEA                     	;# 
  2075  0FEB                     	;# 
  2076  0FED                     	;# 
  2077  0FEE                     	;# 
  2078  0FEE                     	;# 
  2079  0FEF                     	;# 
  2080  0FFF                     	;# 
  2081  0000                     	;# 
  2082  0001                     	;# 
  2083  0002                     	;# 
  2084  0003                     	;# 
  2085  0004                     	;# 
  2086  0005                     	;# 
  2087  0006                     	;# 
  2088  0007                     	;# 
  2089  0008                     	;# 
  2090  0009                     	;# 
  2091  000A                     	;# 
  2092  000B                     	;# 
  2093  000C                     	;# 
  2094  000E                     	;# 
  2095  0011                     	;# 
  2096  0012                     	;# 
  2097  0013                     	;# 
  2098  0015                     	;# 
  2099  0016                     	;# 
  2100  0016                     	;# 
  2101  0017                     	;# 
  2102  0018                     	;# 
  2103  0019                     	;# 
  2104  001A                     	;# 
  2105  001B                     	;# 
  2106  001C                     	;# 
  2107  008C                     	;# 
  2108  008E                     	;# 
  2109  0091                     	;# 
  2110  0092                     	;# 
  2111  0093                     	;# 
  2112  0095                     	;# 
  2113  0096                     	;# 
  2114  0097                     	;# 
  2115  0098                     	;# 
  2116  0099                     	;# 
  2117  009A                     	;# 
  2118  009B                     	;# 
  2119  009B                     	;# 
  2120  009C                     	;# 
  2121  009D                     	;# 
  2122  009E                     	;# 
  2123  009F                     	;# 
  2124  010C                     	;# 
  2125  010E                     	;# 
  2126  0111                     	;# 
  2127  0112                     	;# 
  2128  0113                     	;# 
  2129  0114                     	;# 
  2130  0115                     	;# 
  2131  0116                     	;# 
  2132  0117                     	;# 
  2133  0118                     	;# 
  2134  0119                     	;# 
  2135  018C                     	;# 
  2136  018E                     	;# 
  2137  0191                     	;# 
  2138  0191                     	;# 
  2139  0192                     	;# 
  2140  0193                     	;# 
  2141  0193                     	;# 
  2142  0194                     	;# 
  2143  0195                     	;# 
  2144  0196                     	;# 
  2145  0197                     	;# 
  2146  0199                     	;# 
  2147  019A                     	;# 
  2148  019B                     	;# 
  2149  019B                     	;# 
  2150  019C                     	;# 
  2151  019D                     	;# 
  2152  019E                     	;# 
  2153  019F                     	;# 
  2154  020C                     	;# 
  2155  020E                     	;# 
  2156  028C                     	;# 
  2157  028E                     	;# 
  2158  030C                     	;# 
  2159  030E                     	;# 
  2160  038C                     	;# 
  2161  038E                     	;# 
  2162  0391                     	;# 
  2163  0392                     	;# 
  2164  0393                     	;# 
  2165  0397                     	;# 
  2166  0398                     	;# 
  2167  0399                     	;# 
  2168  0691                     	;# 
  2169  0692                     	;# 
  2170  0693                     	;# 
  2171  0694                     	;# 
  2172  0695                     	;# 
  2173  0D8E                     	;# 
  2174  0D8F                     	;# 
  2175  0D90                     	;# 
  2176  0D91                     	;# 
  2177  0D91                     	;# 
  2178  0D92                     	;# 
  2179  0D93                     	;# 
  2180  0D93                     	;# 
  2181  0D94                     	;# 
  2182  0D95                     	;# 
  2183  0D95                     	;# 
  2184  0D96                     	;# 
  2185  0D97                     	;# 
  2186  0D97                     	;# 
  2187  0D98                     	;# 
  2188  0D99                     	;# 
  2189  0D99                     	;# 
  2190  0D9A                     	;# 
  2191  0D9B                     	;# 
  2192  0D9C                     	;# 
  2193  0D9C                     	;# 
  2194  0D9D                     	;# 
  2195  0D9D                     	;# 
  2196  0D9E                     	;# 
  2197  0D9F                     	;# 
  2198  0DA0                     	;# 
  2199  0DA1                     	;# 
  2200  0DA1                     	;# 
  2201  0DA2                     	;# 
  2202  0DA3                     	;# 
  2203  0DA3                     	;# 
  2204  0DA4                     	;# 
  2205  0DA5                     	;# 
  2206  0DA5                     	;# 
  2207  0DA6                     	;# 
  2208  0DA7                     	;# 
  2209  0DA7                     	;# 
  2210  0DA8                     	;# 
  2211  0DA9                     	;# 
  2212  0DA9                     	;# 
  2213  0DAA                     	;# 
  2214  0DAB                     	;# 
  2215  0DAC                     	;# 
  2216  0DAC                     	;# 
  2217  0DAD                     	;# 
  2218  0DAD                     	;# 
  2219  0DAE                     	;# 
  2220  0DAF                     	;# 
  2221  0DB0                     	;# 
  2222  0DB1                     	;# 
  2223  0DB1                     	;# 
  2224  0DB2                     	;# 
  2225  0DB3                     	;# 
  2226  0DB3                     	;# 
  2227  0DB4                     	;# 
  2228  0DB5                     	;# 
  2229  0DB5                     	;# 
  2230  0DB6                     	;# 
  2231  0DB7                     	;# 
  2232  0DB7                     	;# 
  2233  0DB8                     	;# 
  2234  0DB9                     	;# 
  2235  0DB9                     	;# 
  2236  0DBA                     	;# 
  2237  0DBB                     	;# 
  2238  0DBC                     	;# 
  2239  0DBC                     	;# 
  2240  0DBD                     	;# 
  2241  0DBD                     	;# 
  2242  0DBE                     	;# 
  2243  0DBF                     	;# 
  2244  0DC0                     	;# 
  2245  0DC1                     	;# 
  2246  0DC1                     	;# 
  2247  0DC2                     	;# 
  2248  0DC3                     	;# 
  2249  0DC3                     	;# 
  2250  0DC4                     	;# 
  2251  0DC5                     	;# 
  2252  0DC5                     	;# 
  2253  0DC6                     	;# 
  2254  0DC7                     	;# 
  2255  0DC7                     	;# 
  2256  0DC8                     	;# 
  2257  0DC9                     	;# 
  2258  0DC9                     	;# 
  2259  0DCA                     	;# 
  2260  0DCB                     	;# 
  2261  0DCC                     	;# 
  2262  0DCC                     	;# 
  2263  0DCD                     	;# 
  2264  0DCD                     	;# 
  2265  0DCE                     	;# 
  2266  0DCF                     	;# 
  2267  0DD0                     	;# 
  2268  0E0F                     	;# 
  2269  0E10                     	;# 
  2270  0E11                     	;# 
  2271  0E12                     	;# 
  2272  0E13                     	;# 
  2273  0E14                     	;# 
  2274  0E15                     	;# 
  2275  0E16                     	;# 
  2276  0E17                     	;# 
  2277  0E90                     	;# 
  2278  0E91                     	;# 
  2279  0E92                     	;# 
  2280  0E94                     	;# 
  2281  0E95                     	;# 
  2282  0EA0                     	;# 
  2283  0EA1                     	;# 
  2284  0EA2                     	;# 
  2285  0EA3                     	;# 
  2286  0EA4                     	;# 
  2287  0EA5                     	;# 
  2288  0FE4                     	;# 
  2289  0FE5                     	;# 
  2290  0FE6                     	;# 
  2291  0FE7                     	;# 
  2292  0FE8                     	;# 
  2293  0FE8                     	;# 
  2294  0FE9                     	;# 
  2295  0FEA                     	;# 
  2296  0FEA                     	;# 
  2297  0FEB                     	;# 
  2298  0FED                     	;# 
  2299  0FEE                     	;# 
  2300  0FEE                     	;# 
  2301  0FEF                     	;# 
  2302  0FFF                     	;__bEusartRxBuffer
  2303                           
  2304 ;; Function _TMR2_DefaultInterruptHandler is unused but had its address taken
  2305  0000                     
  2306                           	psect	idataBANK1
  2307  05B9                     __pidataBANK1:	
  2308                           
  2309                           ;initializer for _addrWritedFlash
  2310  05B9  3400               	retlw	0
  2311  05BA  3408               	retlw	8
  2312                           
  2313                           ;initializer for _firstPackage
  2314  05BB  3401               	retlw	1
  2315                           
  2316                           	psect	stringtext1
  2317  055A                     __pstringtext1:	
  2318  055A                     _HexTable:	
  2319  055A  3430               	retlw	48
  2320  055B  3431               	retlw	49
  2321  055C  3432               	retlw	50
  2322  055D  3433               	retlw	51
  2323  055E  3434               	retlw	52
  2324  055F  3435               	retlw	53
  2325  0560  3436               	retlw	54
  2326  0561  3437               	retlw	55
  2327  0562  3438               	retlw	56
  2328  0563  3439               	retlw	57
  2329  0564  3441               	retlw	65
  2330  0565  3442               	retlw	66
  2331  0566  3443               	retlw	67
  2332  0567  3444               	retlw	68
  2333  0568  3445               	retlw	69
  2334  0569  3446               	retlw	70
  2335  056A  3400               	retlw	0
  2336  056B                     __end_of_HexTable:	
  2337  0FFF                     _isRunInBoot	set	4095
  2338                           
  2339                           	psect	nvBANK1
  2340  00CE                     __pnvBANK1:	
  2341  00CE                     _TMR2_InterruptHandler:	
  2342  00CE                     	ds	2
  2343  00D0                     _eusartTxBufferRemaining:	
  2344  00D0                     	ds	1
  2345  001C                     _T2CONbits	set	28
  2346  001A                     _TMR2	set	26
  2347  001B                     _PR2	set	27
  2348  001C                     _T2CON	set	28
  2349  0011                     _PIR1bits	set	17
  2350  000B                     _INTCONbits	set	11
  2351  005F                     _GIE	set	95
  2352  0097                     _WDTCON	set	151
  2353  0098                     _OSCTUNE	set	152
  2354  0099                     _OSCCON	set	153
  2355  0095                     _OPTION_REGbits	set	149
  2356  008E                     _TRISC	set	142
  2357  008C                     _TRISA	set	140
  2358  0091                     _PIE1bits	set	145
  2359  010E                     _LATC	set	270
  2360  010C                     _LATA	set	268
  2361  019E                     _TXSTAbits	set	414
  2362  0196                     _PMCON2	set	406
  2363  0193                     _PMDATL	set	403
  2364  0194                     _PMDATH	set	404
  2365  0195                     _PMCON1bits	set	405
  2366  0192                     _PMADRH	set	402
  2367  0191                     _PMADRL	set	401
  2368  0199                     _RCREG	set	409
  2369  019D                     _RCSTAbits	set	413
  2370  019A                     _TXREG	set	410
  2371  019C                     _SPBRGH	set	412
  2372  019B                     _SPBRGL	set	411
  2373  019E                     _TXSTA	set	414
  2374  019D                     _RCSTA	set	413
  2375  019F                     _BAUDCON	set	415
  2376  018C                     _ANSELA	set	396
  2377  018E                     _ANSELC	set	398
  2378  020E                     _WPUC	set	526
  2379  020C                     _WPUA	set	524
  2380  028E                     _ODCONC	set	654
  2381  028C                     _ODCONA	set	652
  2382  0E15                     _RXPPSbits	set	3605
  2383  0E0F                     _PPSLOCKbits	set	3599
  2384  0E0F                     _PPSLOCK	set	3599
  2385  0EA5                     _RC5PPSbits	set	3749
  2386  0E95                     _RA5PPSbits	set	3733
  2387  0E94                     _RA4PPSbits	set	3732
  2388                           
  2389                           	psect	stringtext2
  2390  0520                     __pstringtext2:	
  2391  0520                     STR_3:	
  2392  0520  3475               	retlw	117	;'u'
  2393  0521  3470               	retlw	112	;'p'
  2394  0522  3464               	retlw	100	;'d'
  2395  0523  3461               	retlw	97	;'a'
  2396  0524  3474               	retlw	116	;'t'
  2397  0525  3465               	retlw	101	;'e'
  2398  0526  3420               	retlw	32	;' '
  2399  0527  3461               	retlw	97	;'a'
  2400  0528  3470               	retlw	112	;'p'
  2401  0529  3470               	retlw	112	;'p'
  2402  052A  3420               	retlw	32	;' '
  2403  052B  3466               	retlw	102	;'f'
  2404  052C  3477               	retlw	119	;'w'
  2405  052D  343F               	retlw	63	;'?'
  2406  052E  3479               	retlw	121	;'y'
  2407  052F  342F               	retlw	47	;'/'
  2408  0530  346E               	retlw	110	;'n'
  2409  0531  340D               	retlw	13
  2410  0532  340A               	retlw	10
  2411  0533  3400               	retlw	0
  2412                           
  2413                           	psect	stringtext3
  2414  0534                     __pstringtext3:	
  2415  0534                     STR_1:	
  2416  0534  3473               	retlw	115	;'s'
  2417  0535  3465               	retlw	101	;'e'
  2418  0536  346E               	retlw	110	;'n'
  2419  0537  3464               	retlw	100	;'d'
  2420  0538  3420               	retlw	32	;' '
  2421  0539  342A               	retlw	42	;'*'
  2422  053A  342E               	retlw	46	;'.'
  2423  053B  3468               	retlw	104	;'h'
  2424  053C  3465               	retlw	101	;'e'
  2425  053D  3478               	retlw	120	;'x'
  2426  053E  3420               	retlw	32	;' '
  2427  053F  3466               	retlw	102	;'f'
  2428  0540  3469               	retlw	105	;'i'
  2429  0541  346C               	retlw	108	;'l'
  2430  0542  3465               	retlw	101	;'e'
  2431  0543  342E               	retlw	46	;'.'
  2432  0544  340D               	retlw	13
  2433  0545  340A               	retlw	10
  2434  0546  3400               	retlw	0
  2435                           
  2436                           	psect	stringtext4
  2437  056B                     __pstringtext4:	
  2438  056B                     STR_2:	
  2439  056B  3462               	retlw	98	;'b'
  2440  056C  346F               	retlw	111	;'o'
  2441  056D  346F               	retlw	111	;'o'
  2442  056E  3474               	retlw	116	;'t'
  2443  056F  346C               	retlw	108	;'l'
  2444  0570  3461               	retlw	97	;'a'
  2445  0571  346F               	retlw	111	;'o'
  2446  0572  3464               	retlw	100	;'d'
  2447  0573  3465               	retlw	101	;'e'
  2448  0574  3472               	retlw	114	;'r'
  2449  0575  342E               	retlw	46	;'.'
  2450  0576  342E               	retlw	46	;'.'
  2451  0577  342E               	retlw	46	;'.'
  2452  0578  340D               	retlw	13
  2453  0579  340A               	retlw	10
  2454  057A  3400               	retlw	0
  2455                           
  2456                           	psect	stringtext5
  2457  0000                     __pstringtext5:	
  2458                           
  2459                           ; #config settings
  2460  0000                     
  2461                           	psect	cinit
  2462  0043                     start_initialization:	
  2463  0043                     __initialization:		;BIGRAM
  2464                           
  2465                           ; Initialize objects allocated to BANK1
  2466  0043  0021               	movlb	1	; select bank1
  2467  0044  3185  25B9  3180   	fcall	__pidataBANK1	;fetch initializer
  2468  0047  00D1               	movwf	__pdataBANK1& (0+127)
  2469  0048  3185  25BA  3180   	fcall	__pidataBANK1+1	;fetch initializer
  2470  004B  00D2               	movwf	(__pdataBANK1+1)& (0+127)
  2471  004C  3185  25BB  3180   	fcall	__pidataBANK1+2	;fetch initializer
  2472  004F  00D3               	movwf	(__pdataBANK1+2)& (0+127)
  2473                           
  2474                           ; Clear objects allocated to BIGRAM
  2475  0050  3040               	movlw	low (0+9024)
  2476  0051  0084               	movwf	4
  2477  0052  3023               	movlw	high (0+9024)
  2478  0053  0085               	movwf	5
  2479  0054  30A0               	movlw	160
  2480  0055  00FE               	movwf	btemp
  2481  0056  3000               	movlw	0
  2482  0057  00FF               	movwf	btemp+1
  2483  0058  3185  2598  3180   	fcall	clear_ram0
  2484                           
  2485                           ; Clear objects allocated to COMMON
  2486  005B  01F8               	clrf	__pbssCOMMON& (0+127)
  2487  005C  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2488  005D  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2489                           
  2490                           ; Clear objects allocated to BANK1
  2491  005E  30A0               	movlw	low __pbssBANK1
  2492  005F  0084               	movwf	4
  2493  0060  3000               	movlw	high __pbssBANK1
  2494  0061  0085               	movwf	5
  2495  0062  301F               	movlw	31
  2496  0063  00FE               	movwf	btemp
  2497  0064  3000               	movlw	0
  2498  0065  00FF               	movwf	btemp+1
  2499  0066  3185  2598  3180   	fcall	clear_ram0
  2500                           
  2501                           ; Clear objects allocated to BANK2
  2502  0069  3020               	movlw	low __pbssBANK2
  2503  006A  0084               	movwf	4
  2504  006B  3001               	movlw	high __pbssBANK2
  2505  006C  0085               	movwf	5
  2506  006D  3030               	movlw	48
  2507  006E  00FE               	movwf	btemp
  2508  006F  3000               	movlw	0
  2509  0070  00FF               	movwf	btemp+1
  2510  0071  3185  2598  3180   	fcall	clear_ram0
  2511                           
  2512                           ; Clear objects allocated to BANK3
  2513  0074  30A0               	movlw	low __pbssBANK3
  2514  0075  0084               	movwf	4
  2515  0076  3001               	movlw	high __pbssBANK3
  2516  0077  0085               	movwf	5
  2517  0078  3050               	movlw	80
  2518  0079  00FE               	movwf	btemp
  2519  007A  3000               	movlw	0
  2520  007B  00FF               	movwf	btemp+1
  2521  007C  3185  2598         	fcall	clear_ram0
  2522  007E                     end_of_initialization:	
  2523                           ;End of C runtime variable initialization code
  2524                           
  2525  007E                     __end_of__initialization:	
  2526  007E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2527  007F  0020               	movlb	0
  2528  0080  3181  2970         	ljmp	_main	;jump to C main() function
  2529                           
  2530                           	psect	bssCOMMON
  2531  0078                     __pbssCOMMON:	
  2532  0078                     _eusartTxHead:	
  2533  0078                     	ds	1
  2534  0079                     __bEusartRxCount:	
  2535  0079                     	ds	1
  2536  007A                     _Event:	
  2537  007A                     	ds	1
  2538                           
  2539                           	psect	bssBANK1
  2540  00A0                     __pbssBANK1:	
  2541  00A0                     _eusartTxBuffer:	
  2542  00A0                     	ds	16
  2543  00B0                     _globalTicker:	
  2544  00B0                     	ds	4
  2545  00B4                     _addrInline:	
  2546  00B4                     	ds	2
  2547  00B6                     _eusartRxIdleTime_ms:	
  2548  00B6                     	ds	2
  2549  00B8                     _eusartTxLen:	
  2550  00B8                     	ds	1
  2551  00B9                     _binBufferLen:	
  2552  00B9                     	ds	1
  2553  00BA                     _hexLineCharCount:	
  2554  00BA                     	ds	1
  2555  00BB                     _lengthInline:	
  2556  00BB                     	ds	1
  2557  00BC                     _eusartRxTail:	
  2558  00BC                     	ds	1
  2559  00BD                     _eusartRxHead:	
  2560  00BD                     	ds	1
  2561  00BE                     _eusartTxTail:	
  2562  00BE                     	ds	1
  2563                           
  2564                           	psect	dataBANK1
  2565  00D1                     __pdataBANK1:	
  2566  00D1                     _addrWritedFlash:	
  2567  00D1                     	ds	2
  2568  00D3                     _firstPackage:	
  2569  00D3                     	ds	1
  2570                           
  2571                           	psect	bssBANK2
  2572  0120                     __pbssBANK2:	
  2573  0120                     _hexLineBuffer:	
  2574  0120                     	ds	48
  2575                           
  2576                           	psect	bssBANK3
  2577  01A0                     __pbssBANK3:	
  2578  01A0                     _binBuffer:	
  2579  01A0                     	ds	80
  2580                           
  2581                           	psect	clrtext
  2582  0598                     clear_ram0:	
  2583                           ;	Called with FSR0 containing the base address, and
  2584                           ;	btemp/btemp+1 has the size to clear
  2585                           
  2586  0598  0064               	clrwdt	;clear the watchdog before getting into this loop
  2587  0599                     clrloop0:	
  2588  0599  0180               	clrf	0	;clear RAM location pointed to by FSR
  2589  059A  3101               	addfsr 0,1
  2590  059B  3001               	movlw	1
  2591  059C  02FE               	subwf	126,f
  2592  059D  3000               	movlw	0
  2593  059E  3BFF               	subwfb	127,f
  2594  059F  087F               	movf	127,w
  2595  05A0  047E               	iorwf	126,w
  2596  05A1  1903               	btfsc	3,2
  2597  05A2  3400               	retlw	0	;all done for this memory range, return
  2598  05A3  2D99               	goto	clrloop0	;have we reached the end yet?
  2599                           
  2600                           	psect	cstackBANK1
  2601  00BF                     __pcstackBANK1:	
  2602  00BF                     ??_decode_hex_len:	
  2603                           
  2604                           ; 1 bytes @ 0x0
  2605  00BF                     	ds	2
  2606  00C1                     decode_hex_len@t16:	
  2607                           
  2608                           ; 2 bytes @ 0x2
  2609  00C1                     	ds	2
  2610  00C3                     decode_hex_len@i8:	
  2611                           
  2612                           ; 1 bytes @ 0x4
  2613  00C3                     	ds	1
  2614  00C4                     ??_decode_xmodem_package:	
  2615                           
  2616                           ; 1 bytes @ 0x5
  2617  00C4                     	ds	2
  2618  00C6                     ??_iap_process:	
  2619                           
  2620                           ; 1 bytes @ 0x7
  2621  00C6                     	ds	2
  2622  00C8                     iap_process@ret:	
  2623                           
  2624                           ; 1 bytes @ 0x9
  2625  00C8                     	ds	1
  2626  00C9                     ??_main:	
  2627                           
  2628                           ; 1 bytes @ 0xA
  2629  00C9                     	ds	2
  2630  00CB                     main@ret:	
  2631                           
  2632                           ; 1 bytes @ 0xC
  2633  00CB                     	ds	1
  2634  00CC                     main@t16:	
  2635                           
  2636                           ; 2 bytes @ 0xD
  2637  00CC                     	ds	2
  2638                           
  2639                           	psect	cstackCOMMON
  2640  0070                     __pcstackCOMMON:	
  2641  0070                     ?_EUSART_Transmit_ISR:	
  2642  0070                     ??_EUSART_Transmit_ISR:	
  2643                           ; 1 bytes @ 0x0
  2644                           
  2645  0070                     ?_EUSART_Receive_ISR:	
  2646                           ; 1 bytes @ 0x0
  2647                           
  2648  0070                     ??_EUSART_Receive_ISR:	
  2649                           ; 1 bytes @ 0x0
  2650                           
  2651  0070                     ?_OSCILLATOR_Initialize:	
  2652                           ; 1 bytes @ 0x0
  2653                           
  2654  0070                     ?_WDT_Initialize:	
  2655                           ; 1 bytes @ 0x0
  2656                           
  2657  0070                     ?_TMR2_Initialize:	
  2658                           ; 1 bytes @ 0x0
  2659                           
  2660  0070                     ?_EUSART_Initialize:	
  2661                           ; 1 bytes @ 0x0
  2662                           
  2663  0070                     ?_TMR2_StartTimer:	
  2664                           ; 1 bytes @ 0x0
  2665                           
  2666  0070                     ?_uart_received_start:	
  2667                           ; 1 bytes @ 0x0
  2668                           
  2669  0070                     ?_uart_send_byte:	
  2670                           ; 1 bytes @ 0x0
  2671                           
  2672  0070                     ?_INTERRUPT_InterruptManager:	
  2673                           ; 1 bytes @ 0x0
  2674                           
  2675  0070                     ?_PIN_MANAGER_Initialize:	
  2676                           ; 1 bytes @ 0x0
  2677                           
  2678  0070                     ?_SYSTEM_Initialize:	
  2679                           ; 1 bytes @ 0x0
  2680                           
  2681  0070                     ?_iap_received_package:	
  2682                           ; 1 bytes @ 0x0
  2683                           
  2684  0070                     ?_decode_hex_len:	
  2685                           ; 1 bytes @ 0x0
  2686                           
  2687  0070                     ?_decode_xmodem_package:	
  2688                           ; 1 bytes @ 0x0
  2689                           
  2690  0070                     ?_iap_process:	
  2691                           ; 1 bytes @ 0x0
  2692                           
  2693  0070                     ?_main:	
  2694                           ; 1 bytes @ 0x0
  2695                           
  2696  0070                     ?__chr2hex:	
  2697                           ; 1 bytes @ 0x0
  2698                           
  2699                           
  2700                           ; 1 bytes @ 0x0
  2701  0070                     	ds	2
  2702  0072                     EUSART_Receive_ISR@t8:	
  2703                           
  2704                           ; 1 bytes @ 0x2
  2705  0072                     	ds	1
  2706  0073                     ??_OSCILLATOR_Initialize:	
  2707  0073                     ??_WDT_Initialize:	
  2708                           ; 1 bytes @ 0x3
  2709                           
  2710  0073                     ??_EUSART_Initialize:	
  2711                           ; 1 bytes @ 0x3
  2712                           
  2713  0073                     ?_FLASH_EraseBlock:	
  2714                           ; 1 bytes @ 0x3
  2715                           
  2716  0073                     ?_TMR2_SetInterruptHandler:	
  2717                           ; 1 bytes @ 0x3
  2718                           
  2719  0073                     ??_TMR2_StartTimer:	
  2720                           ; 1 bytes @ 0x3
  2721                           
  2722  0073                     ??_uart_received_start:	
  2723                           ; 1 bytes @ 0x3
  2724                           
  2725  0073                     ??_uart_send_byte:	
  2726                           ; 1 bytes @ 0x3
  2727                           
  2728  0073                     ?_m_mem_set:	
  2729                           ; 1 bytes @ 0x3
  2730                           
  2731  0073                     ?_uart_send_str:	
  2732                           ; 1 bytes @ 0x3
  2733                           
  2734  0073                     ??_INTERRUPT_InterruptManager:	
  2735                           ; 1 bytes @ 0x3
  2736                           
  2737  0073                     ??_PIN_MANAGER_Initialize:	
  2738                           ; 1 bytes @ 0x3
  2739                           
  2740  0073                     ??__chr2hex:	
  2741                           ; 1 bytes @ 0x3
  2742                           
  2743  0073                     ?_FLASH_ReadWord:	
  2744                           ; 1 bytes @ 0x3
  2745                           
  2746  0073                     PIN_MANAGER_Initialize@state:	
  2747                           ; 2 bytes @ 0x3
  2748                           
  2749  0073                     uart_send_byte@x:	
  2750                           ; 1 bytes @ 0x3
  2751                           
  2752  0073                     m_mem_set@x:	
  2753                           ; 1 bytes @ 0x3
  2754                           
  2755  0073                     FLASH_ReadWord@flashAddr:	
  2756                           ; 1 bytes @ 0x3
  2757                           
  2758  0073                     FLASH_EraseBlock@startAddr:	
  2759                           ; 2 bytes @ 0x3
  2760                           
  2761  0073                     TMR2_SetInterruptHandler@InterruptHandler:	
  2762                           ; 2 bytes @ 0x3
  2763                           
  2764  0073                     uart_send_str@str:	
  2765                           ; 2 bytes @ 0x3
  2766                           
  2767                           
  2768                           ; 2 bytes @ 0x3
  2769  0073                     	ds	1
  2770  0074                     ??_iap_received_package:	
  2771  0074                     __chr2hex@h:	
  2772                           ; 1 bytes @ 0x4
  2773                           
  2774  0074                     m_mem_set@len:	
  2775                           ; 1 bytes @ 0x4
  2776                           
  2777                           
  2778                           ; 2 bytes @ 0x4
  2779  0074                     	ds	1
  2780  0075                     ??_TMR2_Initialize:	
  2781  0075                     ??_FLASH_EraseBlock:	
  2782                           ; 1 bytes @ 0x5
  2783                           
  2784  0075                     ??_TMR2_SetInterruptHandler:	
  2785                           ; 1 bytes @ 0x5
  2786                           
  2787  0075                     ??_uart_send_str:	
  2788                           ; 1 bytes @ 0x5
  2789                           
  2790  0075                     ??_SYSTEM_Initialize:	
  2791                           ; 1 bytes @ 0x5
  2792                           
  2793  0075                     ??_FLASH_ReadWord:	
  2794                           ; 1 bytes @ 0x5
  2795                           
  2796  0075                     FLASH_ReadWord@GIEBitValue:	
  2797                           ; 1 bytes @ 0x5
  2798                           
  2799  0075                     FLASH_EraseBlock@GIEBitValue:	
  2800                           ; 1 bytes @ 0x5
  2801                           
  2802  0075                     iap_received_package@tm:	
  2803                           ; 1 bytes @ 0x5
  2804                           
  2805  0075                     __chr2hex@c:	
  2806                           ; 1 bytes @ 0x5
  2807                           
  2808                           
  2809                           ; 1 bytes @ 0x5
  2810  0075                     	ds	1
  2811  0076                     ??_m_str_h2b:	
  2812  0076                     ??_m_mem_set:	
  2813                           ; 1 bytes @ 0x6
  2814                           
  2815  0076                     FLASH_WriteBlock@GIEBitValue:	
  2816                           ; 1 bytes @ 0x6
  2817                           
  2818                           
  2819                           ; 1 bytes @ 0x6
  2820  0076                     	ds	1
  2821  0077                     FLASH_WriteBlock@i:	
  2822  0077                     m_mem_set@buf:	
  2823                           ; 1 bytes @ 0x7
  2824                           
  2825                           
  2826                           ; 1 bytes @ 0x7
  2827  0077                     	ds	1
  2828                           
  2829                           	psect	cstackBANK0
  2830  0020                     __pcstackBANK0:	
  2831  0020                     ?_FLASH_WriteBlock:	
  2832  0020                     ?_m_str_h2b:	
  2833                           ; 1 bytes @ 0x0
  2834                           
  2835  0020                     m_str_h2b@h:	
  2836                           ; 2 bytes @ 0x0
  2837                           
  2838  0020                     FLASH_WriteBlock@writeAddr:	
  2839                           ; 1 bytes @ 0x0
  2840                           
  2841                           
  2842                           ; 2 bytes @ 0x0
  2843  0020                     	ds	1
  2844  0021                     m_str_h2b@len:	
  2845                           
  2846                           ; 2 bytes @ 0x1
  2847  0021                     	ds	1
  2848  0022                     FLASH_WriteBlock@flashWordArray:	
  2849                           
  2850                           ; 1 bytes @ 0x2
  2851  0022                     	ds	1
  2852  0023                     ??_FLASH_WriteBlock:	
  2853  0023                     m_str_h2b@i:	
  2854                           ; 1 bytes @ 0x3
  2855                           
  2856                           
  2857                           ; 2 bytes @ 0x3
  2858  0023                     	ds	2
  2859  0025                     m_str_h2b@b:	
  2860                           
  2861                           ; 1 bytes @ 0x5
  2862  0025                     	ds	1
  2863  0026                     ?_api_write_block:	
  2864  0026                     m_str_h2b@s:	
  2865                           ; 1 bytes @ 0x6
  2866                           
  2867  0026                     api_write_block@addr:	
  2868                           ; 1 bytes @ 0x6
  2869                           
  2870                           
  2871                           ; 2 bytes @ 0x6
  2872  0026                     	ds	1
  2873  0027                     m_str_h2b@bb:	
  2874                           
  2875                           ; 1 bytes @ 0x7
  2876  0027                     	ds	1
  2877  0028                     api_write_block@binbuf:	
  2878                           
  2879                           ; 1 bytes @ 0x8
  2880  0028                     	ds	1
  2881  0029                     ??_api_write_block:	
  2882                           
  2883                           ; 1 bytes @ 0x9
  2884  0029                     	ds	5
  2885  002E                     api_write_block@buf:	
  2886                           
  2887                           ; 64 bytes @ 0xE
  2888  002E                     	ds	64
  2889  006E                     api_write_block@i:	
  2890                           
  2891                           ; 1 bytes @ 0x4E
  2892  006E                     	ds	1
  2893  006F                     decode_xmodem_package@xloc:	
  2894                           
  2895                           ; 1 bytes @ 0x4F
  2896  006F                     	ds	1
  2897                           
  2898                           	psect	maintext
  2899  0170                     __pmaintext:	
  2900 ;;
  2901 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2902 ;;
  2903 ;; *************** function _main *****************
  2904 ;; Defined at:
  2905 ;;		line 51 in file "src/app/boot_main.c"
  2906 ;; Parameters:    Size  Location     Type
  2907 ;;		None
  2908 ;; Auto vars:     Size  Location     Type
  2909 ;;  t16             2   13[BANK1 ] unsigned int 
  2910 ;;  ret             1   12[BANK1 ] unsigned char 
  2911 ;; Return value:  Size  Location     Type
  2912 ;;                  1    wreg      void 
  2913 ;; Registers used:
  2914 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2915 ;; Tracked objects:
  2916 ;;		On entry : B1F/0
  2917 ;;		On exit  : 0/0
  2918 ;;		Unchanged: 0/0
  2919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2921 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  2922 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  2923 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  2924 ;;Total ram usage:        5 bytes
  2925 ;; Hardware stack levels required when called:    8
  2926 ;; This function calls:
  2927 ;;		_FLASH_ReadWord
  2928 ;;		_SYSTEM_Initialize
  2929 ;;		_iap_process
  2930 ;;		_uart_received_start
  2931 ;;		_uart_send_str
  2932 ;; This function is called by:
  2933 ;;		Startup code after reset
  2934 ;; This function uses a non-reentrant model
  2935 ;;
  2936                           
  2937                           
  2938                           ;psect for function _main
  2939  0170                     _main:	
  2940                           
  2941                           ;boot_main.c: 53: uint8_t ret=0;
  2942                           
  2943                           ;incstack = 0
  2944                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2945  0170  0021               	movlb	1	; select bank1
  2946  0171  01CB               	clrf	main@ret^(0+128)
  2947                           
  2948                           ;boot_main.c: 54: uint16_t t16=0;
  2949  0172  01CC               	clrf	main@t16^(0+128)
  2950  0173  01CD               	clrf	(main@t16+1)^(0+128)
  2951                           
  2952                           ;boot_main.c: 55: isRunInBoot=0x55;
  2953  0174  3055               	movlw	85
  2954  0175  00C9               	movwf	??_main^(0+128)
  2955  0176  0849               	movf	??_main^(0+128),w
  2956  0177  003F               	movlb	31	; select bank31
  2957  0178  00FF               	movwf	127	;volatile
  2958                           
  2959                           ;boot_main.c: 56: isRunInBoot=isRunInBoot;
  2960  0179  087F               	movf	127,w	;volatile
  2961  017A  0021               	movlb	1	; select bank1
  2962  017B  00C9               	movwf	??_main^(0+128)
  2963  017C  0849               	movf	??_main^(0+128),w
  2964  017D  003F               	movlb	31	; select bank31
  2965  017E  00FF               	movwf	127	;volatile
  2966                           
  2967                           ;boot_main.c: 57: SYSTEM_Initialize();
  2968  017F  3185  257B  3181   	fcall	_SYSTEM_Initialize
  2969                           
  2970                           ;boot_main.c: 58: do{ (INTCONbits.GIE = 1); (INTCONbits.PEIE = 1); }while(0);;
  2971  0182  178B               	bsf	11,7	;volatile
  2972  0183  170B               	bsf	11,6	;volatile
  2973                           
  2974                           ;boot_main.c: 60: t16=FLASH_ReadWord(0x1f00+2);
  2975                           
  2976                           ;boot_main.c: 59: do{
  2977  0184  3002               	movlw	2
  2978  0185  00F3               	movwf	FLASH_ReadWord@flashAddr
  2979  0186  301F               	movlw	31
  2980  0187  00F4               	movwf	FLASH_ReadWord@flashAddr+1
  2981  0188  3184  24F0  3181   	fcall	_FLASH_ReadWord
  2982  018B  0874               	movf	?_FLASH_ReadWord+1,w
  2983  018C  0021               	movlb	1	; select bank1
  2984  018D  00CD               	movwf	(main@t16+1)^(0+128)
  2985  018E  0873               	movf	?_FLASH_ReadWord,w
  2986  018F  00CC               	movwf	main@t16^(0+128)
  2987                           
  2988                           ;boot_main.c: 61: if((t16 & 0xff) != 0xff)break;
  2989  0190  30FF               	movlw	255
  2990  0191  054C               	andwf	main@t16^(0+128),w
  2991  0192  00C9               	movwf	??_main^(0+128)
  2992  0193  3000               	movlw	0
  2993  0194  054D               	andwf	(main@t16+1)^(0+128),w
  2994  0195  00CA               	movwf	(??_main+1)^(0+128)
  2995  0196  0A49               	incf	??_main^(0+128),w
  2996  0197  044A               	iorwf	(??_main^(0+128)+1),w
  2997  0198  1D03               	btfss	3,2
  2998  0199  2A06               	goto	l438
  2999                           
  3000                           ;boot_main.c: 63: uart_received_start();
  3001  019A  3185  25A4  3181   	fcall	_uart_received_start
  3002                           
  3003                           ;boot_main.c: 64: uart_send_str((uint8_t*)"bootlaoder...\r\n");
  3004  019D  306B               	movlw	low (STR_2| (0+32768))
  3005  019E  00F3               	movwf	uart_send_str@str
  3006  019F  3085               	movlw	high (STR_2| (0+32768))
  3007  01A0  00F4               	movwf	uart_send_str@str+1
  3008  01A1  3184  2455  3181   	fcall	_uart_send_str
  3009                           
  3010                           ;boot_main.c: 65: _delay((unsigned long)((100)*(16000000/4000.0)));
  3011  01A4  3003               	movlw	3
  3012  01A5  0021               	movlb	1	; select bank1
  3013  01A6  00CA               	movwf	(??_main^(0+128)+1)
  3014  01A7  3008               	movlw	8
  3015  01A8  00C9               	movwf	??_main^(0+128)
  3016  01A9  3077               	movlw	119
  3017  01AA                     u2157:	
  3018  01AA  0B89               	decfsz	9,f
  3019  01AB  29AA               	goto	u2157
  3020  01AC  0BC9               	decfsz	??_main^(0+128),f
  3021  01AD  29AA               	goto	u2157
  3022  01AE  0BCA               	decfsz	(??_main^(0+128)+1),f
  3023  01AF  29AA               	goto	u2157
  3024                           
  3025                           ;boot_main.c: 66: uart_send_str((uint8_t*)"update app fw?y/n\r\n");
  3026  01B0  3020               	movlw	low (STR_3| (0+32768))
  3027  01B1  00F3               	movwf	uart_send_str@str
  3028  01B2  3085               	movlw	high (STR_3| (0+32768))
  3029  01B3  00F4               	movwf	uart_send_str@str+1
  3030  01B4  3184  2455  3181   	fcall	_uart_send_str
  3031                           
  3032                           ;boot_main.c: 67: _delay((unsigned long)((1000)*(16000000/4000.0)));
  3033  01B7  3015               	movlw	21
  3034  01B8  0021               	movlb	1	; select bank1
  3035  01B9  00CA               	movwf	(??_main^(0+128)+1)
  3036  01BA  304B               	movlw	75
  3037  01BB  00C9               	movwf	??_main^(0+128)
  3038  01BC  30BE               	movlw	190
  3039  01BD                     u2167:	
  3040  01BD  0B89               	decfsz	9,f
  3041  01BE  29BD               	goto	u2167
  3042  01BF  0BC9               	decfsz	??_main^(0+128),f
  3043  01C0  29BD               	goto	u2167
  3044  01C1  0BCA               	decfsz	(??_main^(0+128)+1),f
  3045  01C2  29BD               	goto	u2167
  3046  01C3  0000               	nop
  3047                           
  3048                           ;boot_main.c: 68: t16=200;
  3049  01C4  30C8               	movlw	200
  3050  01C5  0021               	movlb	1	; select bank1
  3051  01C6  00CC               	movwf	main@t16^(0+128)
  3052  01C7  3000               	movlw	0
  3053  01C8  00CD               	movwf	(main@t16^(0+128)+1)
  3054                           
  3055                           ;boot_main.c: 69: _bEusartRxCount=0;
  3056  01C9  01F9               	clrf	__bEusartRxCount	;volatile
  3057  01CA                     l2854:	
  3058                           ;boot_main.c: 70: while(t16){
  3059                           
  3060  01CA  084C               	movf	main@t16^(0+128),w
  3061  01CB  044D               	iorwf	(main@t16+1)^(0+128),w
  3062  01CC  1903               	btfsc	3,2
  3063  01CD  29F8               	goto	l2856
  3064                           
  3065                           ;boot_main.c: 71: _delay((unsigned long)((50)*(16000000/4000.0)));
  3066  01CE  3002               	movlw	2
  3067  01CF  0021               	movlb	1	; select bank1
  3068  01D0  00CA               	movwf	(??_main^(0+128)+1)
  3069  01D1  3004               	movlw	4
  3070  01D2  00C9               	movwf	??_main^(0+128)
  3071  01D3  30BA               	movlw	186
  3072  01D4                     u2177:	
  3073  01D4  0B89               	decfsz	9,f
  3074  01D5  29D4               	goto	u2177
  3075  01D6  0BC9               	decfsz	??_main^(0+128),f
  3076  01D7  29D4               	goto	u2177
  3077  01D8  0BCA               	decfsz	(??_main^(0+128)+1),f
  3078  01D9  29D4               	goto	u2177
  3079  01DA  0000               	nop
  3080                           
  3081                           ;boot_main.c: 72: if(Event & (1<<0)){
  3082  01DB  1C7A               	btfss	_Event,0	;volatile
  3083  01DC  29F2               	goto	l2852
  3084                           
  3085                           ;boot_main.c: 73: Event &= ~(1<<0);
  3086  01DD  30FE               	movlw	254
  3087  01DE  0021               	movlb	1	; select bank1
  3088  01DF  00C9               	movwf	??_main^(0+128)
  3089  01E0  0849               	movf	??_main^(0+128),w
  3090  01E1  05FA               	andwf	_Event,f	;volatile
  3091                           
  3092                           ;boot_main.c: 74: if(_bEusartRxBuffer[0]== 'y' || _bEusartRxBuffer[0]== 'Y')break;
  3093  01E2  3040               	movlw	64
  3094  01E3  0086               	movwf	6
  3095  01E4  3023               	movlw	35
  3096  01E5  0087               	movwf	7
  3097  01E6  3079               	movlw	121
  3098  01E7  0601               	xorwf	1,w
  3099  01E8  1903               	btfsc	3,2
  3100  01E9  29F8               	goto	l2856
  3101  01EA  3040               	movlw	64
  3102  01EB  0086               	movwf	6
  3103  01EC  3023               	movlw	35
  3104  01ED  0087               	movwf	7
  3105  01EE  3059               	movlw	89
  3106  01EF  0601               	xorwf	1,w
  3107  01F0  1903               	btfsc	3,2
  3108  01F1  29F8               	goto	l2856
  3109  01F2                     l2852:	
  3110                           
  3111                           ;boot_main.c: 75: };boot_main.c: 76: t16--;
  3112  01F2  3001               	movlw	1
  3113  01F3  0021               	movlb	1	; select bank1
  3114  01F4  02CC               	subwf	main@t16^(0+128),f
  3115  01F5  3000               	movlw	0
  3116  01F6  3BCD               	subwfb	(main@t16+1)^(0+128),f
  3117  01F7  29CA               	goto	l2854
  3118  01F8                     l2856:	
  3119                           
  3120                           ;boot_main.c: 77: };boot_main.c: 78: if(t16){
  3121  01F8  084C               	movf	main@t16^(0+128),w
  3122  01F9  044D               	iorwf	(main@t16+1)^(0+128),w
  3123  01FA  1903               	btfsc	3,2
  3124  01FB  2A06               	goto	l438
  3125                           
  3126                           ;boot_main.c: 79: ret=iap_process();
  3127  01FC  3182  220D  3181   	fcall	_iap_process
  3128  01FF  0021               	movlb	1	; select bank1
  3129  0200  00C9               	movwf	??_main^(0+128)
  3130  0201  0849               	movf	??_main^(0+128),w
  3131  0202  00CB               	movwf	main@ret^(0+128)
  3132                           
  3133                           ;boot_main.c: 80: if(0==ret)while(1);
  3134  0203  084B               	movf	main@ret^(0+128),w
  3135  0204  1903               	btfsc	3,2
  3136  0205                     l449:	
  3137  0205  2A05               	goto	l449
  3138  0206                     l438:	
  3139                           
  3140                           ;boot_main.c: 81: };boot_main.c: 83: }while(0);;boot_main.c: 86: __nop();
  3141  0206  0000               	nop
  3142                           
  3143                           ;boot_main.c: 87: do{ (INTCONbits.GIE = 0); (INTCONbits.PEIE = 0); }while(0);;
  3144  0207  138B               	bcf	11,7	;volatile
  3145  0208  130B               	bcf	11,6	;volatile
  3146  0209  3188               	pagesel	2048	;# 
  3147  020A  2800               	goto	2048	;# 
  3148  020B  3180  2841         	ljmp	start
  3149  020D                     __end_of_main:	
  3150                           
  3151                           	psect	text1
  3152  020D                     __ptext1:	
  3153 ;; *************** function _iap_process *****************
  3154 ;; Defined at:
  3155 ;;		line 151 in file "src/api/iap.c"
  3156 ;; Parameters:    Size  Location     Type
  3157 ;;		None
  3158 ;; Auto vars:     Size  Location     Type
  3159 ;;  ret             1    9[BANK1 ] unsigned char 
  3160 ;; Return value:  Size  Location     Type
  3161 ;;                  1    wreg      unsigned char 
  3162 ;; Registers used:
  3163 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3164 ;; Tracked objects:
  3165 ;;		On entry : 0/0
  3166 ;;		On exit  : 0/0
  3167 ;;		Unchanged: 0/0
  3168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3170 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3171 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  3172 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  3173 ;;Total ram usage:        3 bytes
  3174 ;; Hardware stack levels used:    1
  3175 ;; Hardware stack levels required when called:    7
  3176 ;; This function calls:
  3177 ;;		_FLASH_WriteBlock
  3178 ;;		_decode_xmodem_package
  3179 ;;		_iap_received_package
  3180 ;;		_uart_send_byte
  3181 ;;		_uart_send_str
  3182 ;; This function is called by:
  3183 ;;		_main
  3184 ;; This function uses a non-reentrant model
  3185 ;;
  3186                           
  3187                           
  3188                           ;psect for function _iap_process
  3189  020D                     _iap_process:	
  3190                           
  3191                           ;iap.c: 153: uint8_t ret;;iap.c: 154: uart_send_str((uint8_t*)"send *.hex file.\r\n");
  3192                           
  3193                           ;incstack = 0
  3194                           ; Regs used in _iap_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3195  020D  3034               	movlw	low (STR_1| (0+32768))
  3196  020E  00F3               	movwf	uart_send_str@str
  3197  020F  3085               	movlw	high (STR_1| (0+32768))
  3198  0210  00F4               	movwf	uart_send_str@str+1
  3199  0211  3184  2455  3182   	fcall	_uart_send_str
  3200                           
  3201                           ;iap.c: 155: _delay((unsigned long)((200)*(16000000/4000.0)));
  3202  0214  3005               	movlw	5
  3203  0215  0021               	movlb	1	; select bank1
  3204  0216  00C7               	movwf	(??_iap_process^(0+128)+1)
  3205  0217  300F               	movlw	15
  3206  0218  00C6               	movwf	??_iap_process^(0+128)
  3207  0219  30F1               	movlw	241
  3208  021A                     u2187:	
  3209  021A  0B89               	decfsz	9,f
  3210  021B  2A1A               	goto	u2187
  3211  021C  0BC6               	decfsz	??_iap_process^(0+128),f
  3212  021D  2A1A               	goto	u2187
  3213  021E  0BC7               	decfsz	(??_iap_process^(0+128)+1),f
  3214  021F  2A1A               	goto	u2187
  3215                           
  3216                           ;iap.c: 156: firstPackage=1;
  3217  0220  0021               	movlb	1	; select bank1
  3218  0221  01D3               	clrf	_firstPackage^(0+128)
  3219  0222  0AD3               	incf	_firstPackage^(0+128),f
  3220                           
  3221                           ;iap.c: 158: addrWritedFlash=0x800;
  3222  0223  3000               	movlw	0
  3223  0224  00D1               	movwf	_addrWritedFlash^(0+128)
  3224  0225  3008               	movlw	8
  3225  0226  00D2               	movwf	(_addrWritedFlash^(0+128)+1)
  3226                           
  3227                           ;iap.c: 159: lengthInline=0;
  3228  0227  01BB               	clrf	_lengthInline^(0+128)
  3229                           
  3230                           ;iap.c: 160: addrInline=0;
  3231  0228  01B4               	clrf	_addrInline^(0+128)
  3232  0229  01B5               	clrf	(_addrInline+1)^(0+128)
  3233                           
  3234                           ;iap.c: 161: hexLineCharCount=0;
  3235  022A  01BA               	clrf	_hexLineCharCount^(0+128)
  3236                           
  3237                           ;iap.c: 162: binBufferLen=0;
  3238  022B  01B9               	clrf	_binBufferLen^(0+128)
  3239                           
  3240                           ;iap.c: 172: break;
  3241  022C  2A36               	goto	l2762
  3242  022D                     l2774:	
  3243                           
  3244                           ;iap.c: 173: };iap.c: 174: uart_send_byte(0x15);
  3245  022D  3015               	movlw	21
  3246  022E  2A33               	goto	L1
  3247  022F                     l2776:	
  3248                           ;iap.c: 175: continue;
  3249                           
  3250                           
  3251                           ;iap.c: 176: };iap.c: 178: decode_xmodem_package();
  3252  022F  3183  2376  3182   	fcall	_decode_xmodem_package
  3253                           
  3254                           ;iap.c: 179: uart_send_byte(0x06);
  3255  0232  3006               	movlw	6
  3256  0233                     L1:	
  3257  0233  3185  258A  3182   	fcall	_uart_send_byte
  3258  0236                     l2762:	
  3259                           ;iap.c: 164: while(1){
  3260                           
  3261                           
  3262                           ;iap.c: 165: ret=iap_received_package();
  3263  0236  3183  23FE  3182   	fcall	_iap_received_package
  3264  0239  0021               	movlb	1	; select bank1
  3265  023A  00C6               	movwf	??_iap_process^(0+128)
  3266  023B  0846               	movf	??_iap_process^(0+128),w
  3267  023C  00C8               	movwf	iap_process@ret^(0+128)
  3268                           
  3269                           ;iap.c: 166: if(ret){
  3270  023D  0848               	movf	iap_process@ret^(0+128),w
  3271  023E  1903               	btfsc	3,2
  3272  023F  2A36               	goto	l2762
  3273                           
  3274                           ;iap.c: 167: firstPackage=0;
  3275  0240  01D3               	clrf	_firstPackage^(0+128)
  3276                           
  3277                           ;iap.c: 169: if(ret!=0x84){
  3278  0241  3084               	movlw	132
  3279  0242  0648               	xorwf	iap_process@ret^(0+128),w
  3280  0243  1903               	btfsc	3,2
  3281  0244  2A2F               	goto	l2776
  3282                           
  3283                           ;iap.c: 170: if(_bEusartRxBuffer[0]==0x04){
  3284  0245  3040               	movlw	64
  3285  0246  0086               	movwf	6
  3286  0247  3023               	movlw	35
  3287  0248  0087               	movwf	7
  3288  0249  3004               	movlw	4
  3289  024A  0601               	xorwf	1,w
  3290  024B  1D03               	btfss	3,2
  3291  024C  2A2D               	goto	l2774
  3292                           
  3293                           ;iap.c: 171: uart_send_byte(0x06);
  3294  024D  3006               	movlw	6
  3295  024E  3185  258A  3182   	fcall	_uart_send_byte
  3296                           
  3297                           ;iap.c: 180: };iap.c: 181: };iap.c: 183: if(binBufferLen){
  3298  0251  0021               	movlb	1	; select bank1
  3299  0252  0839               	movf	_binBufferLen^(0+128),w
  3300  0253  1903               	btfsc	3,2
  3301  0254  2A73               	goto	l2788
  3302                           
  3303                           ;iap.c: 184: if(addrWritedFlash>=0x800 && addrWritedFlash <0x1f00){
  3304  0255  3008               	movlw	8
  3305  0256  0252               	subwf	(_addrWritedFlash+1)^(0+128),w
  3306  0257  3000               	movlw	0
  3307  0258  1903               	skipnz
  3308  0259  0251               	subwf	_addrWritedFlash^(0+128),w
  3309  025A  1C03               	skipc
  3310  025B  2A73               	goto	l2788
  3311  025C  301F               	movlw	31
  3312  025D  0252               	subwf	(_addrWritedFlash+1)^(0+128),w
  3313  025E  3000               	movlw	0
  3314  025F  1903               	skipnz
  3315  0260  0251               	subwf	_addrWritedFlash^(0+128),w
  3316  0261  1803               	skipnc
  3317  0262  2A73               	goto	l2788
  3318                           
  3319                           ;iap.c: 185: FLASH_WriteBlock(addrWritedFlash,binBuffer);
  3320  0263  0852               	movf	(_addrWritedFlash+1)^(0+128),w
  3321  0264  0020               	movlb	0	; select bank0
  3322  0265  00A1               	movwf	FLASH_WriteBlock@writeAddr+1
  3323  0266  0021               	movlb	1	; select bank1
  3324  0267  0851               	movf	_addrWritedFlash^(0+128),w
  3325  0268  0020               	movlb	0	; select bank0
  3326  0269  00A0               	movwf	FLASH_WriteBlock@writeAddr
  3327  026A  30A0               	movlw	(low (_binBuffer| (0+256)))& (0+255)
  3328  026B  0021               	movlb	1	; select bank1
  3329  026C  00C6               	movwf	??_iap_process^(0+128)
  3330  026D  0846               	movf	??_iap_process^(0+128),w
  3331  026E  0020               	movlb	0	; select bank0
  3332  026F  00A2               	movwf	FLASH_WriteBlock@flashWordArray
  3333  0270  3182  2278  3182   	fcall	_FLASH_WriteBlock
  3334  0273                     l2788:	
  3335                           
  3336                           ;iap.c: 186: };iap.c: 187: };iap.c: 188: uart_send_byte(0x06);
  3337  0273  3006               	movlw	6
  3338  0274  3185  258A         	fcall	_uart_send_byte
  3339                           
  3340                           ;iap.c: 189: return 1;
  3341  0276  3001               	movlw	1
  3342  0277  0008               	return
  3343  0278                     __end_of_iap_process:	
  3344                           
  3345                           	psect	text2
  3346  0455                     __ptext2:	
  3347 ;; *************** function _uart_send_str *****************
  3348 ;; Defined at:
  3349 ;;		line 21 in file "src/api/my_uart.c"
  3350 ;; Parameters:    Size  Location     Type
  3351 ;;  str             2    3[COMMON] PTR unsigned char 
  3352 ;;		 -> STR_3(20), STR_2(16), STR_1(19), 
  3353 ;; Auto vars:     Size  Location     Type
  3354 ;;		None
  3355 ;; Return value:  Size  Location     Type
  3356 ;;                  1    wreg      void 
  3357 ;; Registers used:
  3358 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3359 ;; Tracked objects:
  3360 ;;		On entry : 0/0
  3361 ;;		On exit  : 0/0
  3362 ;;		Unchanged: 0/0
  3363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3364 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3366 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3367 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3368 ;;Total ram usage:        3 bytes
  3369 ;; Hardware stack levels used:    1
  3370 ;; Hardware stack levels required when called:    2
  3371 ;; This function calls:
  3372 ;;		Nothing
  3373 ;; This function is called by:
  3374 ;;		_iap_process
  3375 ;;		_main
  3376 ;; This function uses a non-reentrant model
  3377 ;;
  3378                           
  3379                           
  3380                           ;psect for function _uart_send_str
  3381  0455                     _uart_send_str:	
  3382                           
  3383                           ;my_uart.c: 25: if(!TXSTAbits.TXEN)TXSTAbits.TXEN=1;
  3384                           
  3385                           ;incstack = 0
  3386                           ; Regs used in _uart_send_str: [wreg-fsr0h+status,2+status,0+pclath]
  3387  0455  0023               	movlb	3	; select bank3
  3388  0456  1E9E               	btfss	30,5	;volatile
  3389  0457  169E               	bsf	30,5	;volatile
  3390  0458                     l2264:	
  3391                           ;my_uart.c: 26: while(*str!='\0'){
  3392                           
  3393  0458  0873               	movf	uart_send_str@str,w
  3394  0459  0084               	movwf	4
  3395  045A  0874               	movf	uart_send_str@str+1,w
  3396  045B  0085               	movwf	5
  3397  045C  0012               	moviw fsr0++
  3398  045D  1903               	btfsc	3,2
  3399  045E  2C77               	goto	l386
  3400  045F                     l380:	
  3401                           ;my_uart.c: 27: while(0 == PIR1bits.TXIF);
  3402                           
  3403  045F  0020               	movlb	0	; select bank0
  3404  0460  1E11               	btfss	17,4	;volatile
  3405  0461  2C5F               	goto	l380
  3406                           
  3407                           ;my_uart.c: 29: TXREG = *str;
  3408  0462  0873               	movf	uart_send_str@str,w
  3409  0463  0084               	movwf	4
  3410  0464  0874               	movf	uart_send_str@str+1,w
  3411  0465  0085               	movwf	5
  3412  0466  0800               	movf	0,w	;code access
  3413  0467  0023               	movlb	3	; select bank3
  3414  0468  009A               	movwf	26	;volatile
  3415                           
  3416                           ;my_uart.c: 30: str++;
  3417  0469  3001               	movlw	1
  3418  046A  07F3               	addwf	uart_send_str@str,f
  3419  046B  3000               	movlw	0
  3420  046C  3DF4               	addwfc	uart_send_str@str+1,f
  3421                           
  3422                           ;my_uart.c: 31: do{__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop
      +                          ();}while(0);;
  3423  046D  0000               	nop
  3424  046E  0000               	nop
  3425  046F  0000               	nop
  3426  0470  0000               	nop
  3427  0471  0000               	nop
  3428  0472  0000               	nop
  3429  0473  0000               	nop
  3430  0474  0000               	nop
  3431  0475  0000               	nop
  3432  0476  2C58               	goto	l2264
  3433  0477                     l386:	
  3434                           ;my_uart.c: 32: };my_uart.c: 33: while(0 == PIR1bits.TXIF);
  3435                           
  3436  0477  0020               	movlb	0	; select bank0
  3437  0478  1A11               	btfsc	17,4	;volatile
  3438  0479  0008               	return
  3439  047A  2C77               	goto	l386
  3440  047B                     __end_of_uart_send_str:	
  3441                           
  3442                           	psect	text3
  3443  03FE                     __ptext3:	
  3444 ;; *************** function _iap_received_package *****************
  3445 ;; Defined at:
  3446 ;;		line 27 in file "src/api/iap.c"
  3447 ;; Parameters:    Size  Location     Type
  3448 ;;		None
  3449 ;; Auto vars:     Size  Location     Type
  3450 ;;  tm              1    5[COMMON] unsigned char 
  3451 ;; Return value:  Size  Location     Type
  3452 ;;                  1    wreg      unsigned char 
  3453 ;; Registers used:
  3454 ;;		wreg, status,2, status,0, pclath, cstack
  3455 ;; Tracked objects:
  3456 ;;		On entry : 0/0
  3457 ;;		On exit  : 0/0
  3458 ;;		Unchanged: 0/0
  3459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3461 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3462 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3463 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3464 ;;Total ram usage:        2 bytes
  3465 ;; Hardware stack levels used:    1
  3466 ;; Hardware stack levels required when called:    3
  3467 ;; This function calls:
  3468 ;;		_uart_received_start
  3469 ;;		_uart_send_byte
  3470 ;; This function is called by:
  3471 ;;		_iap_process
  3472 ;; This function uses a non-reentrant model
  3473 ;;
  3474                           
  3475                           
  3476                           ;psect for function _iap_received_package
  3477  03FE                     _iap_received_package:	
  3478                           
  3479                           ;iap.c: 29: uint8_t tm=200;
  3480                           
  3481                           ;incstack = 0
  3482                           ; Regs used in _iap_received_package: [wreg+status,2+status,0+pclath+cstack]
  3483  03FE  30C8               	movlw	200
  3484  03FF  00F4               	movwf	??_iap_received_package
  3485  0400  0874               	movf	??_iap_received_package,w
  3486  0401  00F5               	movwf	iap_received_package@tm
  3487                           
  3488                           ;iap.c: 30: uart_received_start();
  3489  0402  3185  25A4  3183   	fcall	_uart_received_start
  3490                           
  3491                           ;iap.c: 31: Event &= ~(1<<0);
  3492  0405  30FE               	movlw	254
  3493  0406  00F4               	movwf	??_iap_received_package
  3494  0407  0874               	movf	??_iap_received_package,w
  3495  0408  05FA               	andwf	_Event,f	;volatile
  3496                           
  3497                           ;iap.c: 32: if(firstPackage){
  3498  0409  0021               	movlb	1	; select bank1
  3499  040A  0853               	movf	_firstPackage^(0+128),w
  3500  040B  1903               	btfsc	3,2
  3501  040C  2C11               	goto	l2202
  3502                           
  3503                           ;iap.c: 33: uart_send_byte(0x15);
  3504  040D  3015               	movlw	21
  3505  040E  3185  258A  3183   	fcall	_uart_send_byte
  3506  0411                     l2202:	
  3507                           
  3508                           ;iap.c: 34: };iap.c: 35: _delay((unsigned long)((10)*(16000000/4000.0)));
  3509  0411  3034               	movlw	52
  3510  0412  00F4               	movwf	??_iap_received_package
  3511  0413  30F2               	movlw	242
  3512  0414                     u2197:	
  3513  0414  0B89               	decfsz	9,f
  3514  0415  2C14               	goto	u2197
  3515  0416  0BF4               	decfsz	??_iap_received_package,f
  3516  0417  2C14               	goto	u2197
  3517  0418                     l2210:	
  3518                           ;iap.c: 36: while(tm){
  3519                           
  3520  0418  0875               	movf	iap_received_package@tm,w
  3521  0419  1D03               	btfss	3,2
  3522                           
  3523                           ;iap.c: 37: if(Event & (1<<0))break;
  3524  041A  187A               	btfsc	_Event,0	;volatile
  3525  041B  2C27               	goto	l2212
  3526                           
  3527                           ;iap.c: 38: _delay((unsigned long)((2)*(16000000/4000.0)));
  3528  041C  300B               	movlw	11
  3529  041D  00F4               	movwf	??_iap_received_package
  3530  041E  3062               	movlw	98
  3531  041F                     u2207:	
  3532  041F  0B89               	decfsz	9,f
  3533  0420  2C1F               	goto	u2207
  3534  0421  0BF4               	decfsz	??_iap_received_package,f
  3535  0422  2C1F               	goto	u2207
  3536  0423  3200               	nop2
  3537                           
  3538                           ;iap.c: 39: tm--;
  3539  0424  3001               	movlw	1
  3540  0425  02F5               	subwf	iap_received_package@tm,f
  3541  0426  2C18               	goto	l2210
  3542  0427                     l2212:	
  3543                           
  3544                           ;iap.c: 40: };iap.c: 41: if(tm)return _bEusartRxCount;
  3545  0427  0875               	movf	iap_received_package@tm,w
  3546  0428  1903               	btfsc	3,2
  3547  0429  2C2C               	goto	l2220
  3548  042A  0879               	movf	__bEusartRxCount,w	;volatile
  3549  042B  0008               	return
  3550  042C                     l2220:	
  3551                           
  3552                           ;iap.c: 42: else;iap.c: 43: return 0;
  3553  042C  3000               	movlw	0
  3554  042D  0008               	return
  3555  042E                     __end_of_iap_received_package:	
  3556                           
  3557                           	psect	text4
  3558  058A                     __ptext4:	
  3559 ;; *************** function _uart_send_byte *****************
  3560 ;; Defined at:
  3561 ;;		line 12 in file "src/api/my_uart.c"
  3562 ;; Parameters:    Size  Location     Type
  3563 ;;  x               1    wreg     unsigned char 
  3564 ;; Auto vars:     Size  Location     Type
  3565 ;;  x               1    3[COMMON] unsigned char 
  3566 ;; Return value:  Size  Location     Type
  3567 ;;                  1    wreg      void 
  3568 ;; Registers used:
  3569 ;;		wreg
  3570 ;; Tracked objects:
  3571 ;;		On entry : 0/0
  3572 ;;		On exit  : 0/0
  3573 ;;		Unchanged: 0/0
  3574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3576 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3578 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3579 ;;Total ram usage:        1 bytes
  3580 ;; Hardware stack levels used:    1
  3581 ;; Hardware stack levels required when called:    2
  3582 ;; This function calls:
  3583 ;;		Nothing
  3584 ;; This function is called by:
  3585 ;;		_iap_received_package
  3586 ;;		_iap_process
  3587 ;; This function uses a non-reentrant model
  3588 ;;
  3589                           
  3590                           
  3591                           ;psect for function _uart_send_byte
  3592  058A                     _uart_send_byte:	
  3593                           
  3594                           ;incstack = 0
  3595                           ; Regs used in _uart_send_byte: [wreg]
  3596                           ;uart_send_byte@x stored from wreg
  3597  058A  00F3               	movwf	uart_send_byte@x
  3598                           
  3599                           ;my_uart.c: 15: if(!TXSTAbits.TXEN)TXSTAbits.TXEN=1;
  3600  058B  0023               	movlb	3	; select bank3
  3601  058C  1E9E               	btfss	30,5	;volatile
  3602  058D  169E               	bsf	30,5	;volatile
  3603  058E                     l368:	
  3604                           ;my_uart.c: 16: while(0 == PIR1bits.TXIF);
  3605                           
  3606  058E  0020               	movlb	0	; select bank0
  3607  058F  1E11               	btfss	17,4	;volatile
  3608  0590  2D8E               	goto	l368
  3609                           
  3610                           ;my_uart.c: 17: TXREG = x;
  3611  0591  0873               	movf	uart_send_byte@x,w
  3612  0592  0023               	movlb	3	; select bank3
  3613  0593  009A               	movwf	26	;volatile
  3614  0594                     l371:	
  3615                           ;my_uart.c: 18: while(0 == PIR1bits.TXIF);
  3616                           
  3617  0594  0020               	movlb	0	; select bank0
  3618  0595  1A11               	btfsc	17,4	;volatile
  3619  0596  0008               	return
  3620  0597  2D94               	goto	l371
  3621  0598                     __end_of_uart_send_byte:	
  3622                           
  3623                           	psect	text5
  3624  05A4                     __ptext5:	
  3625 ;; *************** function _uart_received_start *****************
  3626 ;; Defined at:
  3627 ;;		line 50 in file "src/api/my_uart.c"
  3628 ;; Parameters:    Size  Location     Type
  3629 ;;		None
  3630 ;; Auto vars:     Size  Location     Type
  3631 ;;		None
  3632 ;; Return value:  Size  Location     Type
  3633 ;;                  1    wreg      void 
  3634 ;; Registers used:
  3635 ;;		status,2
  3636 ;; Tracked objects:
  3637 ;;		On entry : 0/0
  3638 ;;		On exit  : 0/0
  3639 ;;		Unchanged: 0/0
  3640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3644 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3645 ;;Total ram usage:        0 bytes
  3646 ;; Hardware stack levels used:    1
  3647 ;; Hardware stack levels required when called:    2
  3648 ;; This function calls:
  3649 ;;		Nothing
  3650 ;; This function is called by:
  3651 ;;		_iap_received_package
  3652 ;;		_main
  3653 ;; This function uses a non-reentrant model
  3654 ;;
  3655                           
  3656                           
  3657                           ;psect for function _uart_received_start
  3658  05A4                     _uart_received_start:	
  3659                           
  3660                           ;my_uart.c: 52: _bEusartRxCount=0;
  3661                           
  3662                           ;incstack = 0
  3663                           ; Regs used in _uart_received_start: [status,2]
  3664  05A4  01F9               	clrf	__bEusartRxCount	;volatile
  3665                           
  3666                           ;my_uart.c: 53: PIE1bits.RCIE = 1;
  3667  05A5  0021               	movlb	1	; select bank1
  3668  05A6  1691               	bsf	17,5	;volatile
  3669                           
  3670                           ;my_uart.c: 54: eusartRxIdleTime_ms=0;
  3671  05A7  01B6               	clrf	_eusartRxIdleTime_ms^(0+128)	;volatile
  3672  05A8  01B7               	clrf	(_eusartRxIdleTime_ms+1)^(0+128)	;volatile
  3673  05A9  0008               	return
  3674  05AA                     __end_of_uart_received_start:	
  3675                           
  3676                           	psect	text6
  3677  0376                     __ptext6:	
  3678 ;; *************** function _decode_xmodem_package *****************
  3679 ;; Defined at:
  3680 ;;		line 134 in file "src/api/iap.c"
  3681 ;; Parameters:    Size  Location     Type
  3682 ;;		None
  3683 ;; Auto vars:     Size  Location     Type
  3684 ;;  xloc            1   79[BANK0 ] unsigned char 
  3685 ;; Return value:  Size  Location     Type
  3686 ;;                  1    wreg      unsigned char 
  3687 ;; Registers used:
  3688 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3689 ;; Tracked objects:
  3690 ;;		On entry : 0/0
  3691 ;;		On exit  : 0/0
  3692 ;;		Unchanged: 0/0
  3693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3695 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3696 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  3697 ;;      Totals:         0       1       2       0       0       0       0       0       0       0       0       0       
      +0       0
  3698 ;;Total ram usage:        3 bytes
  3699 ;; Hardware stack levels used:    1
  3700 ;; Hardware stack levels required when called:    6
  3701 ;; This function calls:
  3702 ;;		_decode_hex_len
  3703 ;; This function is called by:
  3704 ;;		_iap_process
  3705 ;; This function uses a non-reentrant model
  3706 ;;
  3707                           
  3708                           
  3709                           ;psect for function _decode_xmodem_package
  3710  0376                     _decode_xmodem_package:	
  3711                           
  3712                           ;iap.c: 136: uint8_t xloc=0;
  3713                           
  3714                           ;incstack = 0
  3715                           ; Regs used in _decode_xmodem_package: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  3716  0376  0020               	movlb	0	; select bank0
  3717  0377  01EF               	clrf	decode_xmodem_package@xloc
  3718                           
  3719                           ;iap.c: 137: xloc=3;
  3720  0378  3003               	movlw	3
  3721  0379  0021               	movlb	1	; select bank1
  3722  037A  00C4               	movwf	??_decode_xmodem_package^(0+128)
  3723  037B  0844               	movf	??_decode_xmodem_package^(0+128),w
  3724  037C  0020               	movlb	0	; select bank0
  3725  037D  00EF               	movwf	decode_xmodem_package@xloc
  3726  037E                     l2744:	
  3727                           ;iap.c: 138: while(xloc<_bEusartRxCount-1){
  3728                           
  3729  037E  0879               	movf	__bEusartRxCount,w	;volatile
  3730  037F  3EFF               	addlw	255
  3731  0380  0021               	movlb	1	; select bank1
  3732  0381  00C4               	movwf	??_decode_xmodem_package^(0+128)
  3733  0382  30FF               	movlw	255
  3734  0383  1803               	skipnc
  3735  0384  3000               	movlw	0
  3736  0385  00C5               	movwf	(??_decode_xmodem_package^(0+128)+1)
  3737  0386  0845               	movf	(??_decode_xmodem_package+1)^(0+128),w
  3738  0387  3A80               	xorlw	128
  3739  0388  3C80               	sublw	128
  3740  0389  1D03               	skipz
  3741  038A  2B8E               	goto	u1995
  3742  038B  0844               	movf	??_decode_xmodem_package^(0+128),w
  3743  038C  0020               	movlb	0	; select bank0
  3744  038D  026F               	subwf	decode_xmodem_package@xloc,w
  3745  038E                     u1995:	
  3746  038E  1803               	btfsc	3,0
  3747  038F  2BBD               	goto	l332
  3748                           
  3749                           ;iap.c: 139: hexLineBuffer[hexLineCharCount]=_bEusartRxBuffer[xloc];
  3750  0390  0020               	movlb	0	; select bank0
  3751  0391  086F               	movf	decode_xmodem_package@xloc,w
  3752  0392  3E40               	addlw	64
  3753  0393  0086               	movwf	6
  3754  0394  0187               	clrf	7
  3755  0395  3023               	movlw	35
  3756  0396  3D87               	addwfc	7,f
  3757  0397  0801               	movf	1,w
  3758  0398  0021               	movlb	1	; select bank1
  3759  0399  00C4               	movwf	??_decode_xmodem_package^(0+128)
  3760  039A  083A               	movf	_hexLineCharCount^(0+128),w
  3761  039B  3E20               	addlw	(low (_hexLineBuffer| (0+256)))& (0+255)
  3762  039C  0086               	movwf	6
  3763  039D  3001               	movlw	1	; select bank2/3
  3764  039E  0087               	movwf	7
  3765  039F  0844               	movf	??_decode_xmodem_package^(0+128),w
  3766  03A0  0081               	movwf	1
  3767                           
  3768                           ;iap.c: 140: if(_bEusartRxBuffer[xloc]==0x0a){
  3769  03A1  0020               	movlb	0	; select bank0
  3770  03A2  086F               	movf	decode_xmodem_package@xloc,w
  3771  03A3  3E40               	addlw	64
  3772  03A4  0086               	movwf	6
  3773  03A5  0187               	clrf	7
  3774  03A6  3023               	movlw	35
  3775  03A7  3D87               	addwfc	7,f
  3776  03A8  300A               	movlw	10
  3777  03A9  0601               	xorwf	1,w
  3778  03AA  1D03               	btfss	3,2
  3779  03AB  2BB2               	goto	l2742
  3780                           
  3781                           ;iap.c: 141: decode_hex_len();
  3782  03AC  3180  2082  3183   	fcall	_decode_hex_len
  3783                           
  3784                           ;iap.c: 142: hexLineCharCount=0;
  3785  03AF  0021               	movlb	1	; select bank1
  3786  03B0  01BA               	clrf	_hexLineCharCount^(0+128)
  3787                           
  3788                           ;iap.c: 143: }else{
  3789  03B1  2BB7               	goto	l331
  3790  03B2                     l2742:	
  3791                           
  3792                           ;iap.c: 144: hexLineCharCount++;
  3793  03B2  3001               	movlw	1
  3794  03B3  0021               	movlb	1	; select bank1
  3795  03B4  00C4               	movwf	??_decode_xmodem_package^(0+128)
  3796  03B5  0844               	movf	??_decode_xmodem_package^(0+128),w
  3797  03B6  07BA               	addwf	_hexLineCharCount^(0+128),f
  3798  03B7                     l331:	
  3799                           
  3800                           ;iap.c: 145: };iap.c: 146: xloc++;
  3801  03B7  3001               	movlw	1
  3802  03B8  00C4               	movwf	??_decode_xmodem_package^(0+128)
  3803  03B9  0844               	movf	??_decode_xmodem_package^(0+128),w
  3804  03BA  0020               	movlb	0	; select bank0
  3805  03BB  07EF               	addwf	decode_xmodem_package@xloc,f
  3806  03BC  2B7E               	goto	l2744
  3807  03BD                     l332:	
  3808                           
  3809                           ;iap.c: 147: };iap.c: 148: __nop();
  3810  03BD  0000               	nop
  3811                           
  3812                           ;iap.c: 149: return 0;;	Return value of _decode_xmodem_package is never used
  3813  03BE  0008               	return
  3814  03BF                     __end_of_decode_xmodem_package:	
  3815                           
  3816                           	psect	text7
  3817  0082                     __ptext7:	
  3818 ;; *************** function _decode_hex_len *****************
  3819 ;; Defined at:
  3820 ;;		line 74 in file "src/api/iap.c"
  3821 ;; Parameters:    Size  Location     Type
  3822 ;;		None
  3823 ;; Auto vars:     Size  Location     Type
  3824 ;;  t16             2    2[BANK1 ] unsigned int 
  3825 ;;  i8              1    4[BANK1 ] unsigned char 
  3826 ;; Return value:  Size  Location     Type
  3827 ;;                  1    wreg      unsigned char 
  3828 ;; Registers used:
  3829 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3830 ;; Tracked objects:
  3831 ;;		On entry : 0/0
  3832 ;;		On exit  : 0/0
  3833 ;;		Unchanged: 0/0
  3834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3836 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  3837 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  3838 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  3839 ;;Total ram usage:        5 bytes
  3840 ;; Hardware stack levels used:    1
  3841 ;; Hardware stack levels required when called:    5
  3842 ;; This function calls:
  3843 ;;		_api_write_block
  3844 ;;		_m_mem_set
  3845 ;;		_m_str_h2b
  3846 ;; This function is called by:
  3847 ;;		_decode_xmodem_package
  3848 ;; This function uses a non-reentrant model
  3849 ;;
  3850                           
  3851                           
  3852                           ;psect for function _decode_hex_len
  3853  0082                     _decode_hex_len:	
  3854                           
  3855                           ;iap.c: 76: uint8_t i8;;iap.c: 77: uint16_t t16;;iap.c: 78: __nop();
  3856                           
  3857                           ;incstack = 0
  3858                           ; Regs used in _decode_hex_len: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3859  0082  0000               	nop
  3860                           
  3861                           ;iap.c: 79: i8=m_str_h2b(hexLineBuffer,hexLineBuffer+1,hexLineCharCount-3);
  3862  0083  3021               	movlw	(low ((_hexLineBuffer| (0+256)+1)))& (0+255)
  3863  0084  0021               	movlb	1	; select bank1
  3864  0085  00BF               	movwf	??_decode_hex_len^(0+128)
  3865  0086  083F               	movf	??_decode_hex_len^(0+128),w
  3866  0087  0020               	movlb	0	; select bank0
  3867  0088  00A0               	movwf	m_str_h2b@h
  3868  0089  0021               	movlb	1	; select bank1
  3869  008A  083A               	movf	_hexLineCharCount^(0+128),w
  3870  008B  3EFD               	addlw	253
  3871  008C  0020               	movlb	0	; select bank0
  3872  008D  00A1               	movwf	m_str_h2b@len
  3873  008E  30FF               	movlw	255
  3874  008F  1803               	skipnc
  3875  0090  3000               	movlw	0
  3876  0091  00A2               	movwf	m_str_h2b@len+1
  3877  0092  3020               	movlw	(low (_hexLineBuffer| (0+256)))& (0+255)
  3878  0093  3182  22D0  3180   	fcall	_m_str_h2b
  3879  0096  0020               	movlb	0	; select bank0
  3880  0097  0820               	movf	?_m_str_h2b,w
  3881  0098  0021               	movlb	1	; select bank1
  3882  0099  00C0               	movwf	(??_decode_hex_len+1)^(0+128)
  3883  009A  0840               	movf	(??_decode_hex_len+1)^(0+128),w
  3884  009B  00C3               	movwf	decode_hex_len@i8^(0+128)
  3885                           
  3886                           ;iap.c: 81: __nop();
  3887                           
  3888                           ;iap.c: 80: do{
  3889  009C  0000               	nop
  3890                           
  3891                           ;iap.c: 82: if(hexLineBuffer[3]!=0x00)break;
  3892  009D  0022               	movlb	2	; select bank2
  3893  009E  0823               	movf	(_hexLineBuffer^(0+256)+3),w
  3894  009F  1D03               	btfss	3,2
  3895  00A0  2967               	goto	l2728
  3896                           
  3897                           ;iap.c: 83: t16=hexLineBuffer[1];
  3898  00A1  0821               	movf	(_hexLineBuffer^(0+256)+1),w
  3899  00A2  0021               	movlb	1	; select bank1
  3900  00A3  00BF               	movwf	??_decode_hex_len^(0+128)
  3901  00A4  01C0               	clrf	(??_decode_hex_len^(0+128)+1)
  3902  00A5  083F               	movf	??_decode_hex_len^(0+128),w
  3903  00A6  00C1               	movwf	decode_hex_len@t16^(0+128)
  3904  00A7  0840               	movf	(??_decode_hex_len+1)^(0+128),w
  3905  00A8  00C2               	movwf	(decode_hex_len@t16+1)^(0+128)
  3906                           
  3907                           ;iap.c: 84: t16<<=8;
  3908  00A9  3008               	movlw	8
  3909  00AA                     u1895:	
  3910  00AA  35C1               	lslf	decode_hex_len@t16^(0+128),f
  3911  00AB  0DC2               	rlf	(decode_hex_len@t16+1)^(0+128),f
  3912  00AC  0B89               	decfsz	9,f
  3913  00AD  28AA               	goto	u1895
  3914                           
  3915                           ;iap.c: 85: t16|=hexLineBuffer[2];
  3916  00AE  0022               	movlb	2	; select bank2
  3917  00AF  0822               	movf	(_hexLineBuffer^(0+256)+2),w
  3918  00B0  0021               	movlb	1	; select bank1
  3919  00B1  00BF               	movwf	??_decode_hex_len^(0+128)
  3920  00B2  01C0               	clrf	(??_decode_hex_len^(0+128)+1)
  3921  00B3  083F               	movf	??_decode_hex_len^(0+128),w
  3922  00B4  04C1               	iorwf	decode_hex_len@t16^(0+128),f
  3923  00B5  0840               	movf	(??_decode_hex_len+1)^(0+128),w
  3924  00B6  04C2               	iorwf	(decode_hex_len@t16+1)^(0+128),f
  3925                           
  3926                           ;iap.c: 87: t16>>=1;
  3927  00B7  3001               	movlw	1
  3928  00B8                     u1905:	
  3929  00B8  36C2               	lsrf	(decode_hex_len@t16+1)^(0+128),f
  3930  00B9  0CC1               	rrf	decode_hex_len@t16^(0+128),f
  3931  00BA  0B89               	decfsz	9,f
  3932  00BB  28B8               	goto	u1905
  3933                           
  3934                           ;iap.c: 88: addrInline=t16;
  3935  00BC  0842               	movf	(decode_hex_len@t16+1)^(0+128),w
  3936  00BD  00B5               	movwf	(_addrInline+1)^(0+128)
  3937  00BE  0841               	movf	decode_hex_len@t16^(0+128),w
  3938  00BF  00B4               	movwf	_addrInline^(0+128)
  3939                           
  3940                           ;iap.c: 90: if(addrInline==0x800){
  3941  00C0  3008               	movlw	8
  3942  00C1  0635               	xorwf	(_addrInline+1)^(0+128),w
  3943  00C2  0434               	iorwf	_addrInline^(0+128),w
  3944  00C3  1D03               	btfss	3,2
  3945  00C4  28D5               	goto	l2684
  3946                           
  3947                           ;iap.c: 92: addrInline+=0x01;
  3948  00C5  3001               	movlw	1
  3949  00C6  07B4               	addwf	_addrInline^(0+128),f
  3950  00C7  3000               	movlw	0
  3951  00C8  3DB5               	addwfc	(_addrInline+1)^(0+128),f
  3952                           
  3953                           ;iap.c: 93: binBuffer[binBufferLen]=0x00;
  3954  00C9  3539               	lslf	_binBufferLen^(0+128),w
  3955  00CA  3EA0               	addlw	(low (_binBuffer| (0+256)))& (0+255)
  3956  00CB  0086               	movwf	6
  3957  00CC  3001               	movlw	1	; select bank3/4
  3958  00CD  0087               	movwf	7
  3959  00CE  3000               	movlw	0
  3960  00CF  3FC0               	movwi [0]fsr1
  3961  00D0  3FC1               	movwi [1]fsr1
  3962                           
  3963                           ;iap.c: 94: binBufferLen++;
  3964  00D1  3001               	movlw	1
  3965  00D2  00BF               	movwf	??_decode_hex_len^(0+128)
  3966  00D3  083F               	movf	??_decode_hex_len^(0+128),w
  3967  00D4  07B9               	addwf	_binBufferLen^(0+128),f
  3968  00D5                     l2684:	
  3969                           
  3970                           ;iap.c: 95: };iap.c: 97: lengthInline=hexLineBuffer[0];
  3971  00D5  0022               	movlb	2	; select bank2
  3972  00D6  0820               	movf	_hexLineBuffer^(0+256),w
  3973  00D7  0021               	movlb	1	; select bank1
  3974  00D8  00BF               	movwf	??_decode_hex_len^(0+128)
  3975  00D9  083F               	movf	??_decode_hex_len^(0+128),w
  3976  00DA  00BB               	movwf	_lengthInline^(0+128)
  3977                           
  3978                           ;iap.c: 99: if(lengthInline==0)break;
  3979  00DB  083B               	movf	_lengthInline^(0+128),w
  3980  00DC  1903               	btfsc	3,2
  3981  00DD  2967               	goto	l2728
  3982  00DE                     l2702:	
  3983  00DE  0839               	movf	_binBufferLen^(0+128),w
  3984  00DF  0751               	addwf	_addrWritedFlash^(0+128),w
  3985  00E0  00BF               	movwf	??_decode_hex_len^(0+128)
  3986  00E1  0852               	movf	(_addrWritedFlash+1)^(0+128),w
  3987  00E2  1803               	skipnc
  3988  00E3  0A52               	incf	(_addrWritedFlash+1)^(0+128),w
  3989  00E4  00C0               	movwf	(??_decode_hex_len^(0+128)+1)
  3990  00E5  0835               	movf	(_addrInline+1)^(0+128),w
  3991  00E6  0240               	subwf	(??_decode_hex_len+1)^(0+128),w
  3992  00E7  1D03               	skipz
  3993  00E8  28EB               	goto	u1945
  3994  00E9  0834               	movf	_addrInline^(0+128),w
  3995  00EA  023F               	subwf	??_decode_hex_len^(0+128),w
  3996  00EB                     u1945:	
  3997  00EB  1803               	btfsc	3,0
  3998  00EC  2916               	goto	l2704
  3999                           
  4000                           ;iap.c: 102: binBuffer[binBufferLen]=0x3ff;
  4001                           
  4002                           ;iap.c: 101: while(addrWritedFlash+binBufferLen<addrInline){
  4003  00ED  3539               	lslf	_binBufferLen^(0+128),w
  4004  00EE  3EA0               	addlw	(low (_binBuffer| (0+256)))& (0+255)
  4005  00EF  0086               	movwf	6
  4006  00F0  3001               	movlw	1	; select bank3/4
  4007  00F1  0087               	movwf	7
  4008  00F2  30FF               	movlw	255
  4009  00F3  3FC0               	movwi [0]fsr1
  4010  00F4  3003               	movlw	3
  4011  00F5  3FC1               	movwi [1]fsr1
  4012                           
  4013                           ;iap.c: 103: binBufferLen++;
  4014  00F6  3001               	movlw	1
  4015  00F7  00BF               	movwf	??_decode_hex_len^(0+128)
  4016  00F8  083F               	movf	??_decode_hex_len^(0+128),w
  4017  00F9  07B9               	addwf	_binBufferLen^(0+128),f
  4018                           
  4019                           ;iap.c: 104: if(binBufferLen>=32){
  4020  00FA  3020               	movlw	32
  4021  00FB  0239               	subwf	_binBufferLen^(0+128),w
  4022  00FC  1C03               	skipc
  4023  00FD  28DE               	goto	l2702
  4024                           
  4025                           ;iap.c: 105: api_write_block(addrWritedFlash,binBuffer);
  4026  00FE  0852               	movf	(_addrWritedFlash+1)^(0+128),w
  4027  00FF  0020               	movlb	0	; select bank0
  4028  0100  00A7               	movwf	api_write_block@addr+1
  4029  0101  0021               	movlb	1	; select bank1
  4030  0102  0851               	movf	_addrWritedFlash^(0+128),w
  4031  0103  0020               	movlb	0	; select bank0
  4032  0104  00A6               	movwf	api_write_block@addr
  4033  0105  30A0               	movlw	(low (_binBuffer| (0+256)))& (0+255)
  4034  0106  0021               	movlb	1	; select bank1
  4035  0107  00BF               	movwf	??_decode_hex_len^(0+128)
  4036  0108  083F               	movf	??_decode_hex_len^(0+128),w
  4037  0109  0020               	movlb	0	; select bank0
  4038  010A  00A8               	movwf	api_write_block@binbuf
  4039  010B  3183  2326  3180   	fcall	_api_write_block
  4040                           
  4041                           ;iap.c: 106: addrWritedFlash+=32;
  4042  010E  3020               	movlw	32
  4043  010F  0021               	movlb	1	; select bank1
  4044  0110  07D1               	addwf	_addrWritedFlash^(0+128),f
  4045  0111  3000               	movlw	0
  4046  0112  3DD2               	addwfc	(_addrWritedFlash+1)^(0+128),f
  4047                           
  4048                           ;iap.c: 107: binBufferLen-=32;
  4049  0113  3020               	movlw	32
  4050  0114  02B9               	subwf	_binBufferLen^(0+128),f
  4051  0115  28DE               	goto	l2702
  4052  0116                     l2704:	
  4053                           
  4054                           ;iap.c: 108: };iap.c: 113: };iap.c: 115: for(i8=0;i8<lengthInline;i8+=2){
  4055  0116  01C3               	clrf	decode_hex_len@i8^(0+128)
  4056  0117                     l2726:	
  4057  0117  083B               	movf	_lengthInline^(0+128),w
  4058  0118  0243               	subwf	decode_hex_len@i8^(0+128),w
  4059  0119  1803               	btfsc	3,0
  4060  011A  2967               	goto	l2728
  4061                           
  4062                           ;iap.c: 116: t16=hexLineBuffer[5+i8];
  4063  011B  0843               	movf	decode_hex_len@i8^(0+128),w
  4064  011C  3E05               	addlw	5
  4065  011D  3E20               	addlw	(low (_hexLineBuffer| (0+256)))& (0+255)
  4066  011E  0086               	movwf	6
  4067  011F  3001               	movlw	1	; select bank2/3
  4068  0120  0087               	movwf	7
  4069  0121  0801               	movf	1,w
  4070  0122  00BF               	movwf	??_decode_hex_len^(0+128)
  4071  0123  01C0               	clrf	(??_decode_hex_len^(0+128)+1)
  4072  0124  083F               	movf	??_decode_hex_len^(0+128),w
  4073  0125  00C1               	movwf	decode_hex_len@t16^(0+128)
  4074  0126  0840               	movf	(??_decode_hex_len+1)^(0+128),w
  4075  0127  00C2               	movwf	(decode_hex_len@t16+1)^(0+128)
  4076                           
  4077                           ;iap.c: 117: t16<<=8;
  4078  0128  3008               	movlw	8
  4079  0129                     u1955:	
  4080  0129  35C1               	lslf	decode_hex_len@t16^(0+128),f
  4081  012A  0DC2               	rlf	(decode_hex_len@t16+1)^(0+128),f
  4082  012B  0B89               	decfsz	9,f
  4083  012C  2929               	goto	u1955
  4084                           
  4085                           ;iap.c: 118: t16|=hexLineBuffer[4+i8];
  4086  012D  0843               	movf	decode_hex_len@i8^(0+128),w
  4087  012E  3E04               	addlw	4
  4088  012F  3E20               	addlw	(low (_hexLineBuffer| (0+256)))& (0+255)
  4089  0130  0086               	movwf	6
  4090  0131  3001               	movlw	1	; select bank2/3
  4091  0132  0087               	movwf	7
  4092  0133  0801               	movf	1,w
  4093  0134  00BF               	movwf	??_decode_hex_len^(0+128)
  4094  0135  01C0               	clrf	(??_decode_hex_len^(0+128)+1)
  4095  0136  083F               	movf	??_decode_hex_len^(0+128),w
  4096  0137  04C1               	iorwf	decode_hex_len@t16^(0+128),f
  4097  0138  0840               	movf	(??_decode_hex_len+1)^(0+128),w
  4098  0139  04C2               	iorwf	(decode_hex_len@t16+1)^(0+128),f
  4099                           
  4100                           ;iap.c: 119: binBuffer[binBufferLen]=t16;
  4101  013A  3539               	lslf	_binBufferLen^(0+128),w
  4102  013B  3EA0               	addlw	(low (_binBuffer| (0+256)))& (0+255)
  4103  013C  0086               	movwf	6
  4104  013D  3001               	movlw	1	; select bank3/4
  4105  013E  0087               	movwf	7
  4106  013F  0841               	movf	decode_hex_len@t16^(0+128),w
  4107  0140  3FC0               	movwi [0]fsr1
  4108  0141  0842               	movf	(decode_hex_len@t16+1)^(0+128),w
  4109  0142  3FC1               	movwi [1]fsr1
  4110                           
  4111                           ;iap.c: 120: binBufferLen++;
  4112  0143  3001               	movlw	1
  4113  0144  00BF               	movwf	??_decode_hex_len^(0+128)
  4114  0145  083F               	movf	??_decode_hex_len^(0+128),w
  4115  0146  07B9               	addwf	_binBufferLen^(0+128),f
  4116                           
  4117                           ;iap.c: 122: if(binBufferLen>=32){
  4118  0147  3020               	movlw	32
  4119  0148  0239               	subwf	_binBufferLen^(0+128),w
  4120  0149  1C03               	skipc
  4121  014A  2962               	goto	l2724
  4122                           
  4123                           ;iap.c: 123: api_write_block(addrWritedFlash,binBuffer);
  4124  014B  0852               	movf	(_addrWritedFlash+1)^(0+128),w
  4125  014C  0020               	movlb	0	; select bank0
  4126  014D  00A7               	movwf	api_write_block@addr+1
  4127  014E  0021               	movlb	1	; select bank1
  4128  014F  0851               	movf	_addrWritedFlash^(0+128),w
  4129  0150  0020               	movlb	0	; select bank0
  4130  0151  00A6               	movwf	api_write_block@addr
  4131  0152  30A0               	movlw	(low (_binBuffer| (0+256)))& (0+255)
  4132  0153  0021               	movlb	1	; select bank1
  4133  0154  00BF               	movwf	??_decode_hex_len^(0+128)
  4134  0155  083F               	movf	??_decode_hex_len^(0+128),w
  4135  0156  0020               	movlb	0	; select bank0
  4136  0157  00A8               	movwf	api_write_block@binbuf
  4137  0158  3183  2326  3180   	fcall	_api_write_block
  4138                           
  4139                           ;iap.c: 124: addrWritedFlash+=32;
  4140  015B  3020               	movlw	32
  4141  015C  0021               	movlb	1	; select bank1
  4142  015D  07D1               	addwf	_addrWritedFlash^(0+128),f
  4143  015E  3000               	movlw	0
  4144  015F  3DD2               	addwfc	(_addrWritedFlash+1)^(0+128),f
  4145                           
  4146                           ;iap.c: 125: binBufferLen-=32;
  4147  0160  3020               	movlw	32
  4148  0161  02B9               	subwf	_binBufferLen^(0+128),f
  4149  0162                     l2724:	
  4150  0162  3002               	movlw	2
  4151  0163  00BF               	movwf	??_decode_hex_len^(0+128)
  4152  0164  083F               	movf	??_decode_hex_len^(0+128),w
  4153  0165  07C3               	addwf	decode_hex_len@i8^(0+128),f
  4154  0166  2917               	goto	l2726
  4155  0167                     l2728:	
  4156                           
  4157                           ;iap.c: 126: };iap.c: 129: };iap.c: 130: }while(0);;iap.c: 131: m_mem_set(hexLineBuffer,
      +                          0,sizeof(hexLineBuffer));
  4158  0167  01F3               	clrf	m_mem_set@x
  4159  0168  3030               	movlw	48
  4160  0169  00F4               	movwf	m_mem_set@len
  4161  016A  3000               	movlw	0
  4162  016B  00F5               	movwf	m_mem_set@len+1
  4163  016C  3020               	movlw	(low (_hexLineBuffer| (0+256)))& (0+255)
  4164  016D  3185  2509         	fcall	_m_mem_set
  4165  016F  0008               	return
  4166  0170                     __end_of_decode_hex_len:	
  4167                           ;iap.c: 132: return 0;;	Return value of _decode_hex_len is never used
  4168                           
  4169                           
  4170                           	psect	text8
  4171  02D0                     __ptext8:	
  4172 ;; *************** function _m_str_h2b *****************
  4173 ;; Defined at:
  4174 ;;		line 208 in file "src/depend/m_string.c"
  4175 ;; Parameters:    Size  Location     Type
  4176 ;;  b               1    wreg     PTR unsigned char 
  4177 ;;		 -> hexLineBuffer(48), 
  4178 ;;  h               1    0[BANK0 ] PTR unsigned char 
  4179 ;;		 -> hexLineBuffer(48), 
  4180 ;;  len             2    1[BANK0 ] unsigned int 
  4181 ;; Auto vars:     Size  Location     Type
  4182 ;;  b               1    5[BANK0 ] PTR unsigned char 
  4183 ;;		 -> hexLineBuffer(48), 
  4184 ;;  i               2    3[BANK0 ] unsigned int 
  4185 ;;  bb              1    7[BANK0 ] unsigned char 
  4186 ;;  s               1    6[BANK0 ] unsigned char 
  4187 ;; Return value:  Size  Location     Type
  4188 ;;                  2    0[BANK0 ] unsigned int 
  4189 ;; Registers used:
  4190 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4191 ;; Tracked objects:
  4192 ;;		On entry : 0/0
  4193 ;;		On exit  : 0/0
  4194 ;;		Unchanged: 0/0
  4195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4196 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4197 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4198 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4199 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4200 ;;Total ram usage:       10 bytes
  4201 ;; Hardware stack levels used:    1
  4202 ;; Hardware stack levels required when called:    3
  4203 ;; This function calls:
  4204 ;;		__chr2hex
  4205 ;; This function is called by:
  4206 ;;		_decode_hex_len
  4207 ;; This function uses a non-reentrant model
  4208 ;;
  4209                           
  4210                           
  4211                           ;psect for function _m_str_h2b
  4212  02D0                     _m_str_h2b:	
  4213                           
  4214                           ;incstack = 0
  4215                           ; Regs used in _m_str_h2b: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4216                           ;m_str_h2b@b stored from wreg
  4217  02D0  0020               	movlb	0	; select bank0
  4218  02D1  00A5               	movwf	m_str_h2b@b
  4219                           
  4220                           ;m_string.c: 210: uint16_t i=len;
  4221  02D2  0822               	movf	m_str_h2b@len+1,w
  4222  02D3  00A4               	movwf	m_str_h2b@i+1
  4223  02D4  0821               	movf	m_str_h2b@len,w
  4224  02D5  00A3               	movwf	m_str_h2b@i
  4225  02D6                     l2648:	
  4226                           ;m_string.c: 211: uint8_t bb,s;;m_string.c: 212: while(i>=2)
  4227                           
  4228  02D6  3000               	movlw	0
  4229  02D7  0224               	subwf	m_str_h2b@i+1,w
  4230  02D8  3002               	movlw	2
  4231  02D9  1903               	skipnz
  4232  02DA  0223               	subwf	m_str_h2b@i,w
  4233  02DB  1C03               	btfss	3,0
  4234  02DC  2B1B               	goto	l2650
  4235                           
  4236                           ;m_string.c: 213: {;m_string.c: 214: bb=0;
  4237  02DD  01A7               	clrf	m_str_h2b@bb
  4238                           
  4239                           ;m_string.c: 215: s=*h++;
  4240  02DE  0820               	movf	m_str_h2b@h,w
  4241  02DF  0086               	movwf	6
  4242  02E0  3001               	movlw	1	; select bank2/3
  4243  02E1  0087               	movwf	7
  4244  02E2  0801               	movf	1,w
  4245  02E3  00F6               	movwf	??_m_str_h2b
  4246  02E4  0876               	movf	??_m_str_h2b,w
  4247  02E5  00A6               	movwf	m_str_h2b@s
  4248  02E6  3001               	movlw	1
  4249  02E7  00F6               	movwf	??_m_str_h2b
  4250  02E8  0876               	movf	??_m_str_h2b,w
  4251  02E9  07A0               	addwf	m_str_h2b@h,f
  4252                           
  4253                           ;m_string.c: 217: bb=_chr2hex(s);
  4254  02EA  0826               	movf	m_str_h2b@s,w
  4255  02EB  3184  242E  3182   	fcall	__chr2hex
  4256  02EE  00F6               	movwf	??_m_str_h2b
  4257  02EF  0876               	movf	??_m_str_h2b,w
  4258  02F0  0020               	movlb	0	; select bank0
  4259  02F1  00A7               	movwf	m_str_h2b@bb
  4260                           
  4261                           ;m_string.c: 218: bb<<=4;
  4262  02F2  0EA7               	swapf	m_str_h2b@bb,f
  4263  02F3  30F0               	movlw	240
  4264  02F4  05A7               	andwf	m_str_h2b@bb,f
  4265                           
  4266                           ;m_string.c: 219: s=*h++;
  4267  02F5  0820               	movf	m_str_h2b@h,w
  4268  02F6  0086               	movwf	6
  4269  02F7  3001               	movlw	1	; select bank2/3
  4270  02F8  0087               	movwf	7
  4271  02F9  0801               	movf	1,w
  4272  02FA  00F6               	movwf	??_m_str_h2b
  4273  02FB  0876               	movf	??_m_str_h2b,w
  4274  02FC  00A6               	movwf	m_str_h2b@s
  4275  02FD  3001               	movlw	1
  4276  02FE  00F6               	movwf	??_m_str_h2b
  4277  02FF  0876               	movf	??_m_str_h2b,w
  4278  0300  07A0               	addwf	m_str_h2b@h,f
  4279                           
  4280                           ;m_string.c: 220: bb= bb+_chr2hex(s);
  4281  0301  0826               	movf	m_str_h2b@s,w
  4282  0302  3184  242E  3182   	fcall	__chr2hex
  4283  0305  0020               	movlb	0	; select bank0
  4284  0306  0727               	addwf	m_str_h2b@bb,w
  4285  0307  00F6               	movwf	??_m_str_h2b
  4286  0308  0876               	movf	??_m_str_h2b,w
  4287  0309  00A7               	movwf	m_str_h2b@bb
  4288                           
  4289                           ;m_string.c: 221: *b++=bb;
  4290  030A  0827               	movf	m_str_h2b@bb,w
  4291  030B  00F6               	movwf	??_m_str_h2b
  4292  030C  0825               	movf	m_str_h2b@b,w
  4293  030D  0086               	movwf	6
  4294  030E  3001               	movlw	1	; select bank2/3
  4295  030F  0087               	movwf	7
  4296  0310  0876               	movf	??_m_str_h2b,w
  4297  0311  0081               	movwf	1
  4298  0312  3001               	movlw	1
  4299  0313  00F6               	movwf	??_m_str_h2b
  4300  0314  0876               	movf	??_m_str_h2b,w
  4301  0315  07A5               	addwf	m_str_h2b@b,f
  4302                           
  4303                           ;m_string.c: 222: i-=2;
  4304  0316  3002               	movlw	2
  4305  0317  02A3               	subwf	m_str_h2b@i,f
  4306  0318  3000               	movlw	0
  4307  0319  3BA4               	subwfb	m_str_h2b@i+1,f
  4308  031A  2AD6               	goto	l2648
  4309  031B                     l2650:	
  4310                           
  4311                           ;m_string.c: 223: };m_string.c: 224: return (len>>1);
  4312  031B  0822               	movf	m_str_h2b@len+1,w
  4313  031C  00F7               	movwf	??_m_str_h2b+1
  4314  031D  0821               	movf	m_str_h2b@len,w
  4315  031E  00F6               	movwf	??_m_str_h2b
  4316  031F  36F7               	lsrf	??_m_str_h2b+1,f
  4317  0320  0CF6               	rrf	??_m_str_h2b,f
  4318  0321  0876               	movf	??_m_str_h2b,w
  4319  0322  00A0               	movwf	?_m_str_h2b
  4320  0323  0877               	movf	??_m_str_h2b+1,w
  4321  0324  00A1               	movwf	?_m_str_h2b+1
  4322  0325  0008               	return
  4323  0326                     __end_of_m_str_h2b:	
  4324                           
  4325                           	psect	text9
  4326  042E                     __ptext9:	
  4327 ;; *************** function __chr2hex *****************
  4328 ;; Defined at:
  4329 ;;		line 197 in file "src/depend/m_string.c"
  4330 ;; Parameters:    Size  Location     Type
  4331 ;;  c               1    wreg     unsigned char 
  4332 ;; Auto vars:     Size  Location     Type
  4333 ;;  c               1    5[COMMON] unsigned char 
  4334 ;;  h               1    4[COMMON] unsigned char 
  4335 ;; Return value:  Size  Location     Type
  4336 ;;                  1    wreg      unsigned char 
  4337 ;; Registers used:
  4338 ;;		wreg, status,2, status,0
  4339 ;; Tracked objects:
  4340 ;;		On entry : 0/0
  4341 ;;		On exit  : 0/0
  4342 ;;		Unchanged: 0/0
  4343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4345 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4346 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4347 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4348 ;;Total ram usage:        3 bytes
  4349 ;; Hardware stack levels used:    1
  4350 ;; Hardware stack levels required when called:    2
  4351 ;; This function calls:
  4352 ;;		Nothing
  4353 ;; This function is called by:
  4354 ;;		_m_str_h2b
  4355 ;; This function uses a non-reentrant model
  4356 ;;
  4357                           
  4358                           
  4359                           ;psect for function __chr2hex
  4360  042E                     __chr2hex:	
  4361                           
  4362                           ;incstack = 0
  4363                           ; Regs used in __chr2hex: [wreg+status,2+status,0]
  4364                           ;__chr2hex@c stored from wreg
  4365  042E  00F5               	movwf	__chr2hex@c
  4366                           
  4367                           ;m_string.c: 198: uint8_t h=0;
  4368  042F  01F4               	clrf	__chr2hex@h
  4369                           
  4370                           ;m_string.c: 199: if(c>='0' && c <='9')h|=(c-'0');
  4371  0430  3030               	movlw	48
  4372  0431  0275               	subwf	__chr2hex@c,w
  4373  0432  1C03               	skipc
  4374  0433  2C3B               	goto	l2588
  4375  0434  303A               	movlw	58
  4376  0435  0275               	subwf	__chr2hex@c,w
  4377  0436  1803               	skipnc
  4378  0437  2C3B               	goto	l2588
  4379  0438  0875               	movf	__chr2hex@c,w
  4380  0439  3ED0               	addlw	208
  4381  043A  2C50               	goto	L3
  4382  043B                     l2588:	
  4383                           
  4384                           ;m_string.c: 200: else if(c>='A' && c<='F')h|=(c-'A'+0x0a);
  4385  043B  3041               	movlw	65
  4386  043C  0275               	subwf	__chr2hex@c,w
  4387  043D  1C03               	skipc
  4388  043E  2C46               	goto	l2594
  4389  043F  3047               	movlw	71
  4390  0440  0275               	subwf	__chr2hex@c,w
  4391  0441  1803               	skipnc
  4392  0442  2C46               	goto	l2594
  4393  0443  0875               	movf	__chr2hex@c,w
  4394  0444  3EC9               	addlw	201
  4395  0445  2C50               	goto	L3
  4396  0446                     l2594:	
  4397                           
  4398                           ;m_string.c: 201: else if(c>='a' && c<='f')h|=(c-'a'+0x0a);
  4399  0446  3061               	movlw	97
  4400  0447  0275               	subwf	__chr2hex@c,w
  4401  0448  1C03               	skipc
  4402  0449  2C53               	goto	l2600
  4403  044A  3067               	movlw	103
  4404  044B  0275               	subwf	__chr2hex@c,w
  4405  044C  1803               	skipnc
  4406  044D  2C53               	goto	l2600
  4407  044E  0875               	movf	__chr2hex@c,w
  4408  044F  3EA9               	addlw	169
  4409  0450                     L3:	
  4410  0450  00F3               	movwf	??__chr2hex
  4411  0451  0873               	movf	??__chr2hex,w
  4412  0452  04F4               	iorwf	__chr2hex@h,f
  4413  0453                     l2600:	
  4414                           
  4415                           ;m_string.c: 203: return h;
  4416  0453  0874               	movf	__chr2hex@h,w
  4417  0454  0008               	return
  4418  0455                     __end_of__chr2hex:	
  4419                           
  4420                           	psect	text10
  4421  0509                     __ptext10:	
  4422 ;; *************** function _m_mem_set *****************
  4423 ;; Defined at:
  4424 ;;		line 32 in file "src/depend/m_string.c"
  4425 ;; Parameters:    Size  Location     Type
  4426 ;;  buf             1    wreg     PTR unsigned char 
  4427 ;;		 -> hexLineBuffer(48), 
  4428 ;;  x               1    3[COMMON] unsigned char 
  4429 ;;  len             2    4[COMMON] unsigned int 
  4430 ;; Auto vars:     Size  Location     Type
  4431 ;;  buf             1    7[COMMON] PTR unsigned char 
  4432 ;;		 -> hexLineBuffer(48), 
  4433 ;; Return value:  Size  Location     Type
  4434 ;;                  1    wreg      void 
  4435 ;; Registers used:
  4436 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4437 ;; Tracked objects:
  4438 ;;		On entry : 0/0
  4439 ;;		On exit  : 0/0
  4440 ;;		Unchanged: 0/0
  4441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4442 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4443 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4444 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4445 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4446 ;;Total ram usage:        5 bytes
  4447 ;; Hardware stack levels used:    1
  4448 ;; Hardware stack levels required when called:    2
  4449 ;; This function calls:
  4450 ;;		Nothing
  4451 ;; This function is called by:
  4452 ;;		_decode_hex_len
  4453 ;; This function uses a non-reentrant model
  4454 ;;
  4455                           
  4456                           
  4457                           ;psect for function _m_mem_set
  4458  0509                     _m_mem_set:	
  4459                           
  4460                           ;incstack = 0
  4461                           ; Regs used in _m_mem_set: [wreg+fsr1l+fsr1h+status,2+status,0]
  4462                           ;m_mem_set@buf stored from wreg
  4463  0509  00F7               	movwf	m_mem_set@buf
  4464  050A                     l2660:	
  4465                           ;m_string.c: 34: while(len--)
  4466                           
  4467  050A  3001               	movlw	1
  4468  050B  02F4               	subwf	m_mem_set@len,f
  4469  050C  3000               	movlw	0
  4470  050D  3BF5               	subwfb	m_mem_set@len+1,f
  4471  050E  0A74               	incf	m_mem_set@len,w
  4472  050F  1903               	btfsc	3,2
  4473  0510  0A75               	incf	m_mem_set@len+1,w
  4474  0511  1903               	btfsc	3,2
  4475  0512  0008               	return
  4476                           
  4477                           ;m_string.c: 35: {;m_string.c: 36: *buf++=x;
  4478  0513  0873               	movf	m_mem_set@x,w
  4479  0514  00F6               	movwf	??_m_mem_set
  4480  0515  0877               	movf	m_mem_set@buf,w
  4481  0516  0086               	movwf	6
  4482  0517  3001               	movlw	1	; select bank2/3
  4483  0518  0087               	movwf	7
  4484  0519  0876               	movf	??_m_mem_set,w
  4485  051A  0081               	movwf	1
  4486  051B  3001               	movlw	1
  4487  051C  00F6               	movwf	??_m_mem_set
  4488  051D  0876               	movf	??_m_mem_set,w
  4489  051E  07F7               	addwf	m_mem_set@buf,f
  4490  051F  2D0A               	goto	l2660
  4491  0520                     __end_of_m_mem_set:	
  4492                           
  4493                           	psect	text11
  4494  0326                     __ptext11:	
  4495 ;; *************** function _api_write_block *****************
  4496 ;; Defined at:
  4497 ;;		line 56 in file "src/api/iap.c"
  4498 ;; Parameters:    Size  Location     Type
  4499 ;;  addr            2    6[BANK0 ] unsigned int 
  4500 ;;  binbuf          1    8[BANK0 ] PTR unsigned int 
  4501 ;;		 -> binBuffer(80), 
  4502 ;; Auto vars:     Size  Location     Type
  4503 ;;  buf            64   14[BANK0 ] unsigned int [32]
  4504 ;;  i               1   78[BANK0 ] unsigned char 
  4505 ;; Return value:  Size  Location     Type
  4506 ;;                  1    wreg      unsigned char 
  4507 ;; Registers used:
  4508 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4509 ;; Tracked objects:
  4510 ;;		On entry : 0/0
  4511 ;;		On exit  : 0/0
  4512 ;;		Unchanged: 0/0
  4513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4514 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4515 ;;      Locals:         0      65       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4516 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4517 ;;      Totals:         0      73       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4518 ;;Total ram usage:       73 bytes
  4519 ;; Hardware stack levels used:    1
  4520 ;; Hardware stack levels required when called:    4
  4521 ;; This function calls:
  4522 ;;		_FLASH_EraseBlock
  4523 ;;		_FLASH_ReadWord
  4524 ;;		_FLASH_WriteBlock
  4525 ;; This function is called by:
  4526 ;;		_decode_hex_len
  4527 ;; This function uses a non-reentrant model
  4528 ;;
  4529                           
  4530                           
  4531                           ;psect for function _api_write_block
  4532  0326                     _api_write_block:	
  4533                           
  4534                           ;iap.c: 58: uint8_t i;;iap.c: 59: uint16_t buf[32];;iap.c: 61: FLASH_EraseBlock(addr);
  4535                           
  4536                           ;incstack = 0
  4537                           ; Regs used in _api_write_block: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4538  0326  0020               	movlb	0	; select bank0
  4539  0327  0827               	movf	api_write_block@addr+1,w
  4540  0328  00F4               	movwf	FLASH_EraseBlock@startAddr+1
  4541  0329  0826               	movf	api_write_block@addr,w
  4542  032A  00F3               	movwf	FLASH_EraseBlock@startAddr
  4543  032B  3184  249E  3183   	fcall	_FLASH_EraseBlock
  4544                           
  4545                           ;iap.c: 62: FLASH_WriteBlock(addr,binbuf);
  4546  032E  0020               	movlb	0	; select bank0
  4547  032F  0827               	movf	api_write_block@addr+1,w
  4548  0330  00A1               	movwf	FLASH_WriteBlock@writeAddr+1
  4549  0331  0826               	movf	api_write_block@addr,w
  4550  0332  00A0               	movwf	FLASH_WriteBlock@writeAddr
  4551  0333  0828               	movf	api_write_block@binbuf,w
  4552  0334  00A9               	movwf	??_api_write_block
  4553  0335  0829               	movf	??_api_write_block,w
  4554  0336  00A2               	movwf	FLASH_WriteBlock@flashWordArray
  4555  0337  3182  2278  3183   	fcall	_FLASH_WriteBlock
  4556                           
  4557                           ;iap.c: 63: for (i=0; i<32; i++){
  4558  033A  0020               	movlb	0	; select bank0
  4559  033B  01EE               	clrf	api_write_block@i
  4560  033C                     L4:	
  4561  033C  3020               	movlw	32
  4562  033D  026E               	subwf	api_write_block@i,w
  4563  033E  1803               	btfsc	3,0
  4564  033F  0008               	return
  4565                           
  4566                           ;iap.c: 64: buf[i] = FLASH_ReadWord((addr+i));
  4567  0340  086E               	movf	api_write_block@i,w
  4568  0341  0726               	addwf	api_write_block@addr,w
  4569  0342  00F3               	movwf	FLASH_ReadWord@flashAddr
  4570  0343  0827               	movf	api_write_block@addr+1,w
  4571  0344  1803               	skipnc
  4572  0345  0A27               	incf	api_write_block@addr+1,w
  4573  0346  00F4               	movwf	FLASH_ReadWord@flashAddr+1
  4574  0347  3184  24F0  3183   	fcall	_FLASH_ReadWord
  4575  034A  0020               	movlb	0	; select bank0
  4576  034B  356E               	lslf	api_write_block@i,w
  4577  034C  3E2E               	addlw	(low (api_write_block@buf| 0))& (0+255)
  4578  034D  0086               	movwf	6
  4579  034E  0187               	clrf	7
  4580  034F  0873               	movf	?_FLASH_ReadWord,w
  4581  0350  3FC0               	movwi [0]fsr1
  4582  0351  0874               	movf	?_FLASH_ReadWord+1,w
  4583  0352  3FC1               	movwi [1]fsr1
  4584                           
  4585                           ;iap.c: 65: if(buf[i]!=binbuf[i]){
  4586  0353  356E               	lslf	api_write_block@i,w
  4587  0354  0728               	addwf	api_write_block@binbuf,w
  4588  0355  00A9               	movwf	??_api_write_block
  4589  0356  0829               	movf	??_api_write_block,w
  4590  0357  0086               	movwf	6
  4591  0358  3001               	movlw	1	; select bank2/3
  4592  0359  0087               	movwf	7
  4593  035A  3F40               	moviw [0]fsr1
  4594  035B  00AA               	movwf	??_api_write_block+1
  4595  035C  3F41               	moviw [1]fsr1
  4596  035D  00AB               	movwf	??_api_write_block+2
  4597  035E  356E               	lslf	api_write_block@i,w
  4598  035F  3E2E               	addlw	(low (api_write_block@buf| 0))& (0+255)
  4599  0360  0086               	movwf	6
  4600  0361  0187               	clrf	7
  4601  0362  3F40               	moviw [0]fsr1
  4602  0363  00AC               	movwf	??_api_write_block+3
  4603  0364  3F41               	moviw [1]fsr1
  4604  0365  00AD               	movwf	??_api_write_block+4
  4605  0366  082B               	movf	??_api_write_block+2,w
  4606  0367  062D               	xorwf	??_api_write_block+4,w
  4607  0368  1D03               	skipz
  4608  0369  2B6C               	goto	u1845
  4609  036A  082A               	movf	??_api_write_block+1,w
  4610  036B  062C               	xorwf	??_api_write_block+3,w
  4611  036C                     u1845:	
  4612  036C  1903               	skipnz
  4613  036D  2B70               	goto	l2620
  4614                           
  4615                           ;iap.c: 66: __nop();
  4616  036E  0000               	nop
  4617                           
  4618                           ;iap.c: 67: __nop();
  4619  036F  0000               	nop
  4620  0370                     l2620:	
  4621  0370  3001               	movlw	1
  4622  0371  0020               	movlb	0	; select bank0
  4623  0372  00A9               	movwf	??_api_write_block
  4624  0373  0829               	movf	??_api_write_block,w
  4625  0374  07EE               	addwf	api_write_block@i,f
  4626  0375  2B3C               	goto	L4
  4627  0376                     __end_of_api_write_block:	
  4628                           ;iap.c: 68: };iap.c: 69: };iap.c: 70: return 0;;	Return value of _api_write_block is nev
      +                          er used
  4629                           
  4630                           
  4631                           	psect	text12
  4632  0278                     __ptext12:	
  4633 ;; *************** function _FLASH_WriteBlock *****************
  4634 ;; Defined at:
  4635 ;;		line 93 in file "mcc_generated_files/memory.c"
  4636 ;; Parameters:    Size  Location     Type
  4637 ;;  writeAddr       2    0[BANK0 ] unsigned int 
  4638 ;;  flashWordArr    1    2[BANK0 ] PTR unsigned int 
  4639 ;;		 -> binBuffer(80), 
  4640 ;; Auto vars:     Size  Location     Type
  4641 ;;  i               1    7[COMMON] unsigned char 
  4642 ;;  GIEBitValue     1    6[COMMON] unsigned char 
  4643 ;; Return value:  Size  Location     Type
  4644 ;;                  1    wreg      char 
  4645 ;; Registers used:
  4646 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4647 ;; Tracked objects:
  4648 ;;		On entry : 0/0
  4649 ;;		On exit  : 0/0
  4650 ;;		Unchanged: 0/0
  4651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4652 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4653 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4654 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4655 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4656 ;;Total ram usage:        8 bytes
  4657 ;; Hardware stack levels used:    1
  4658 ;; Hardware stack levels required when called:    3
  4659 ;; This function calls:
  4660 ;;		_FLASH_EraseBlock
  4661 ;; This function is called by:
  4662 ;;		_api_write_block
  4663 ;;		_iap_process
  4664 ;;		_FLASH_WriteWord
  4665 ;; This function uses a non-reentrant model
  4666 ;;
  4667                           
  4668                           
  4669                           ;psect for function _FLASH_WriteBlock
  4670  0278                     _FLASH_WriteBlock:	
  4671                           
  4672                           ;memory.c: 96: uint8_t GIEBitValue = INTCONbits.GIE;
  4673                           
  4674                           ;incstack = 0
  4675                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4676  0278  3000               	movlw	0
  4677  0279  1B8B               	btfsc	11,7	;volatile
  4678  027A  3001               	movlw	1
  4679  027B  00F6               	movwf	FLASH_WriteBlock@GIEBitValue
  4680                           
  4681                           ;memory.c: 97: uint8_t i;;memory.c: 106: INTCONbits.GIE = 0;
  4682  027C  138B               	bcf	11,7	;volatile
  4683                           
  4684                           ;memory.c: 109: FLASH_EraseBlock(writeAddr);
  4685  027D  0020               	movlb	0	; select bank0
  4686  027E  0821               	movf	FLASH_WriteBlock@writeAddr+1,w
  4687  027F  00F4               	movwf	FLASH_EraseBlock@startAddr+1
  4688  0280  0820               	movf	FLASH_WriteBlock@writeAddr,w
  4689  0281  00F3               	movwf	FLASH_EraseBlock@startAddr
  4690  0282  3184  249E  3182   	fcall	_FLASH_EraseBlock
  4691                           
  4692                           ;memory.c: 112: PMCON1bits.CFGS = 0;
  4693  0285  0023               	movlb	3	; select bank3
  4694  0286  1315               	bcf	21,6	;volatile
  4695                           
  4696                           ;memory.c: 113: PMCON1bits.WREN = 1;
  4697  0287  1515               	bsf	21,2	;volatile
  4698                           
  4699                           ;memory.c: 114: PMCON1bits.LWLO = 1;
  4700  0288  1695               	bsf	21,5	;volatile
  4701                           
  4702                           ;memory.c: 116: for (i=0; i<32; i++)
  4703  0289  01F7               	clrf	FLASH_WriteBlock@i
  4704  028A  3020               	movlw	32
  4705  028B  0277               	subwf	FLASH_WriteBlock@i,w
  4706  028C  1803               	btfsc	3,0
  4707  028D  2AC8               	goto	l193
  4708  028E                     l2552:	
  4709                           
  4710                           ;memory.c: 117: {;memory.c: 119: PMADRL = (writeAddr & 0xFF);
  4711  028E  0020               	movlb	0	; select bank0
  4712  028F  0820               	movf	FLASH_WriteBlock@writeAddr,w
  4713  0290  0023               	movlb	3	; select bank3
  4714  0291  0091               	movwf	17	;volatile
  4715                           
  4716                           ;memory.c: 121: PMADRH = ((writeAddr & 0xFF00) >> 8);
  4717  0292  0020               	movlb	0	; select bank0
  4718  0293  0821               	movf	FLASH_WriteBlock@writeAddr+1,w
  4719  0294  0023               	movlb	3	; select bank3
  4720  0295  0092               	movwf	18	;volatile
  4721                           
  4722                           ;memory.c: 124: PMDATL = flashWordArray[i];
  4723  0296  3577               	lslf	FLASH_WriteBlock@i,w
  4724  0297  0020               	movlb	0	; select bank0
  4725  0298  0722               	addwf	FLASH_WriteBlock@flashWordArray,w
  4726  0299  00A3               	movwf	??_FLASH_WriteBlock
  4727  029A  0823               	movf	??_FLASH_WriteBlock,w
  4728  029B  0086               	movwf	6
  4729  029C  3001               	movlw	1	; select bank2/3
  4730  029D  0087               	movwf	7
  4731  029E  0801               	movf	1,w
  4732  029F  0023               	movlb	3	; select bank3
  4733  02A0  0093               	movwf	19	;volatile
  4734                           
  4735                           ;memory.c: 125: PMDATH = ((flashWordArray[i] & 0xFF00) >> 8);
  4736  02A1  3577               	lslf	FLASH_WriteBlock@i,w
  4737  02A2  0020               	movlb	0	; select bank0
  4738  02A3  0722               	addwf	FLASH_WriteBlock@flashWordArray,w
  4739  02A4  00A3               	movwf	??_FLASH_WriteBlock
  4740  02A5  0823               	movf	??_FLASH_WriteBlock,w
  4741  02A6  0086               	movwf	6
  4742  02A7  3001               	movlw	1	; select bank2/3
  4743  02A8  0087               	movwf	7
  4744  02A9  3F40               	moviw [0]fsr1
  4745  02AA  00A4               	movwf	??_FLASH_WriteBlock+1
  4746  02AB  3F41               	moviw [1]fsr1
  4747  02AC  00A5               	movwf	??_FLASH_WriteBlock+2
  4748  02AD  0825               	movf	??_FLASH_WriteBlock+2,w
  4749  02AE  0023               	movlb	3	; select bank3
  4750  02AF  0094               	movwf	20	;volatile
  4751                           
  4752                           ;memory.c: 127: if(i == (32-1))
  4753  02B0  301F               	movlw	31
  4754  02B1  0677               	xorwf	FLASH_WriteBlock@i,w
  4755  02B2  1903               	btfsc	3,2
  4756                           
  4757                           ;memory.c: 128: {;memory.c: 130: PMCON1bits.LWLO = 0;
  4758  02B3  1295               	bcf	21,5	;volatile
  4759                           
  4760                           ;memory.c: 131: };memory.c: 133: PMCON2 = 0x55;
  4761  02B4  3055               	movlw	85
  4762  02B5  0096               	movwf	22	;volsfr
  4763                           
  4764                           ;memory.c: 134: PMCON2 = 0xAA;
  4765  02B6  30AA               	movlw	170
  4766  02B7  0096               	movwf	22	;volsfr
  4767                           
  4768                           ;memory.c: 135: PMCON1bits.WR = 1;
  4769  02B8  1495               	bsf	21,1	;volatile
  4770                           
  4771                           ;memory.c: 136: __nop();
  4772  02B9  0000               	nop
  4773                           
  4774                           ;memory.c: 137: __nop();
  4775  02BA  0000               	nop
  4776                           
  4777                           ;memory.c: 139: writeAddr++;
  4778  02BB  3001               	movlw	1
  4779  02BC  0020               	movlb	0	; select bank0
  4780  02BD  07A0               	addwf	FLASH_WriteBlock@writeAddr,f
  4781  02BE  3000               	movlw	0
  4782  02BF  3DA1               	addwfc	FLASH_WriteBlock@writeAddr+1,f
  4783  02C0  3001               	movlw	1
  4784  02C1  00A3               	movwf	??_FLASH_WriteBlock
  4785  02C2  0823               	movf	??_FLASH_WriteBlock,w
  4786  02C3  07F7               	addwf	FLASH_WriteBlock@i,f
  4787  02C4  3020               	movlw	32
  4788  02C5  0277               	subwf	FLASH_WriteBlock@i,w
  4789  02C6  1C03               	skipc
  4790  02C7  2A8E               	goto	l2552
  4791  02C8                     l193:	
  4792                           
  4793                           ;memory.c: 140: };memory.c: 142: PMCON1bits.WREN = 0;
  4794  02C8  0023               	movlb	3	; select bank3
  4795  02C9  1115               	bcf	21,2	;volatile
  4796                           
  4797                           ;memory.c: 143: INTCONbits.GIE = GIEBitValue;
  4798  02CA  0C76               	rrf	FLASH_WriteBlock@GIEBitValue,w
  4799  02CB  1C03               	skipc
  4800  02CC  138B               	bcf	11,7	;volatile
  4801  02CD  1803               	skipnc
  4802  02CE  178B               	bsf	11,7	;volatile
  4803  02CF  0008               	return
  4804  02D0                     __end_of_FLASH_WriteBlock:	
  4805                           ;memory.c: 145: return 0;;	Return value of _FLASH_WriteBlock is never used
  4806                           
  4807                           
  4808                           	psect	text13
  4809  049E                     __ptext13:	
  4810 ;; *************** function _FLASH_EraseBlock *****************
  4811 ;; Defined at:
  4812 ;;		line 148 in file "mcc_generated_files/memory.c"
  4813 ;; Parameters:    Size  Location     Type
  4814 ;;  startAddr       2    3[COMMON] unsigned int 
  4815 ;; Auto vars:     Size  Location     Type
  4816 ;;  GIEBitValue     1    5[COMMON] unsigned char 
  4817 ;; Return value:  Size  Location     Type
  4818 ;;                  1    wreg      void 
  4819 ;; Registers used:
  4820 ;;		wreg, status,2, status,0
  4821 ;; Tracked objects:
  4822 ;;		On entry : 0/0
  4823 ;;		On exit  : 0/0
  4824 ;;		Unchanged: 0/0
  4825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4826 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4827 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4829 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4830 ;;Total ram usage:        3 bytes
  4831 ;; Hardware stack levels used:    1
  4832 ;; Hardware stack levels required when called:    2
  4833 ;; This function calls:
  4834 ;;		Nothing
  4835 ;; This function is called by:
  4836 ;;		_FLASH_WriteBlock
  4837 ;;		_api_write_block
  4838 ;; This function uses a non-reentrant model
  4839 ;;
  4840                           
  4841                           
  4842                           ;psect for function _FLASH_EraseBlock
  4843  049E                     _FLASH_EraseBlock:	
  4844                           
  4845                           ;memory.c: 150: uint8_t GIEBitValue = INTCONbits.GIE;
  4846                           
  4847                           ;incstack = 0
  4848                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  4849  049E  3000               	movlw	0
  4850  049F  1B8B               	btfsc	11,7	;volatile
  4851  04A0  3001               	movlw	1
  4852  04A1  00F5               	movwf	FLASH_EraseBlock@GIEBitValue
  4853                           
  4854                           ;memory.c: 153: INTCONbits.GIE = 0;
  4855  04A2  138B               	bcf	11,7	;volatile
  4856                           
  4857                           ;memory.c: 155: PMADRL = (startAddr & 0xFF);
  4858  04A3  0873               	movf	FLASH_EraseBlock@startAddr,w
  4859  04A4  0023               	movlb	3	; select bank3
  4860  04A5  0091               	movwf	17	;volatile
  4861                           
  4862                           ;memory.c: 157: PMADRH = ((startAddr & 0xFF00) >> 8);
  4863  04A6  0874               	movf	FLASH_EraseBlock@startAddr+1,w
  4864  04A7  0092               	movwf	18	;volatile
  4865                           
  4866                           ;memory.c: 160: PMCON1bits.CFGS = 0;
  4867  04A8  1315               	bcf	21,6	;volatile
  4868                           
  4869                           ;memory.c: 161: PMCON1bits.FREE = 1;
  4870  04A9  1615               	bsf	21,4	;volatile
  4871                           
  4872                           ;memory.c: 162: PMCON1bits.WREN = 1;
  4873  04AA  1515               	bsf	21,2	;volatile
  4874                           
  4875                           ;memory.c: 165: PMCON2 = 0x55;
  4876  04AB  3055               	movlw	85
  4877  04AC  0096               	movwf	22	;volsfr
  4878                           
  4879                           ;memory.c: 166: PMCON2 = 0xAA;
  4880  04AD  30AA               	movlw	170
  4881  04AE  0096               	movwf	22	;volsfr
  4882                           
  4883                           ;memory.c: 167: PMCON1bits.WR = 1;
  4884  04AF  1495               	bsf	21,1	;volatile
  4885                           
  4886                           ;memory.c: 168: __nop();
  4887  04B0  0000               	nop
  4888                           
  4889                           ;memory.c: 169: __nop();
  4890  04B1  0000               	nop
  4891                           
  4892                           ;memory.c: 171: PMCON1bits.WREN = 0;
  4893  04B2  0023               	movlb	3	; select bank3
  4894  04B3  1115               	bcf	21,2	;volatile
  4895                           
  4896                           ;memory.c: 172: INTCONbits.GIE = GIEBitValue;
  4897  04B4  0C75               	rrf	FLASH_EraseBlock@GIEBitValue,w
  4898  04B5  1C03               	skipc
  4899  04B6  138B               	bcf	11,7	;volatile
  4900  04B7  1803               	skipnc
  4901  04B8  178B               	bsf	11,7	;volatile
  4902  04B9  0008               	return
  4903  04BA                     __end_of_FLASH_EraseBlock:	
  4904                           
  4905                           	psect	text14
  4906  04F0                     __ptext14:	
  4907 ;; *************** function _FLASH_ReadWord *****************
  4908 ;; Defined at:
  4909 ;;		line 57 in file "mcc_generated_files/memory.c"
  4910 ;; Parameters:    Size  Location     Type
  4911 ;;  flashAddr       2    3[COMMON] unsigned int 
  4912 ;; Auto vars:     Size  Location     Type
  4913 ;;  GIEBitValue     1    5[COMMON] unsigned char 
  4914 ;; Return value:  Size  Location     Type
  4915 ;;                  2    3[COMMON] unsigned int 
  4916 ;; Registers used:
  4917 ;;		wreg, status,2, status,0
  4918 ;; Tracked objects:
  4919 ;;		On entry : 0/0
  4920 ;;		On exit  : 0/0
  4921 ;;		Unchanged: 0/0
  4922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4923 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4924 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4926 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4927 ;;Total ram usage:        3 bytes
  4928 ;; Hardware stack levels used:    1
  4929 ;; Hardware stack levels required when called:    2
  4930 ;; This function calls:
  4931 ;;		Nothing
  4932 ;; This function is called by:
  4933 ;;		_api_write_block
  4934 ;;		_main
  4935 ;;		_FLASH_WriteWord
  4936 ;; This function uses a non-reentrant model
  4937 ;;
  4938                           
  4939                           
  4940                           ;psect for function _FLASH_ReadWord
  4941  04F0                     _FLASH_ReadWord:	
  4942                           
  4943                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
  4944                           
  4945                           ;incstack = 0
  4946                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
  4947  04F0  3000               	movlw	0
  4948  04F1  1B8B               	btfsc	11,7	;volatile
  4949  04F2  3001               	movlw	1
  4950  04F3  00F5               	movwf	FLASH_ReadWord@GIEBitValue
  4951                           
  4952                           ;memory.c: 61: INTCONbits.GIE = 0;
  4953  04F4  138B               	bcf	11,7	;volatile
  4954                           
  4955                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
  4956  04F5  0873               	movf	FLASH_ReadWord@flashAddr,w
  4957  04F6  0023               	movlb	3	; select bank3
  4958  04F7  0091               	movwf	17	;volatile
  4959                           
  4960                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
  4961  04F8  0874               	movf	FLASH_ReadWord@flashAddr+1,w
  4962  04F9  0092               	movwf	18	;volatile
  4963                           
  4964                           ;memory.c: 65: PMCON1bits.CFGS = 0;
  4965  04FA  1315               	bcf	21,6	;volatile
  4966                           
  4967                           ;memory.c: 66: PMCON1bits.RD = 1;
  4968  04FB  1415               	bsf	21,0	;volatile
  4969                           
  4970                           ;memory.c: 67: __nop();
  4971  04FC  0000               	nop
  4972                           
  4973                           ;memory.c: 68: __nop();
  4974  04FD  0000               	nop
  4975                           
  4976                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
  4977  04FE  0C75               	rrf	FLASH_ReadWord@GIEBitValue,w
  4978  04FF  1C03               	skipc
  4979  0500  138B               	bcf	11,7	;volatile
  4980  0501  1803               	skipnc
  4981  0502  178B               	bsf	11,7	;volatile
  4982                           
  4983                           ;memory.c: 71: return ((uint16_t)((PMDATH << 8) | PMDATL));
  4984  0503  0023               	movlb	3	; select bank3
  4985  0504  0814               	movf	20,w	;volatile
  4986  0505  00F4               	movwf	?_FLASH_ReadWord+1
  4987  0506  0813               	movf	19,w	;volatile
  4988  0507  00F3               	movwf	?_FLASH_ReadWord
  4989  0508  0008               	return
  4990  0509                     __end_of_FLASH_ReadWord:	
  4991                           
  4992                           	psect	text15
  4993  057B                     __ptext15:	
  4994 ;; *************** function _SYSTEM_Initialize *****************
  4995 ;; Defined at:
  4996 ;;		line 69 in file "mcc_generated_files/mcc.c"
  4997 ;; Parameters:    Size  Location     Type
  4998 ;;		None
  4999 ;; Auto vars:     Size  Location     Type
  5000 ;;		None
  5001 ;; Return value:  Size  Location     Type
  5002 ;;                  1    wreg      void 
  5003 ;; Registers used:
  5004 ;;		wreg, status,2, status,0, pclath, cstack
  5005 ;; Tracked objects:
  5006 ;;		On entry : 0/0
  5007 ;;		On exit  : 0/0
  5008 ;;		Unchanged: 0/0
  5009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5013 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5014 ;;Total ram usage:        0 bytes
  5015 ;; Hardware stack levels used:    1
  5016 ;; Hardware stack levels required when called:    4
  5017 ;; This function calls:
  5018 ;;		_EUSART_Initialize
  5019 ;;		_OSCILLATOR_Initialize
  5020 ;;		_PIN_MANAGER_Initialize
  5021 ;;		_TMR2_Initialize
  5022 ;;		_WDT_Initialize
  5023 ;; This function is called by:
  5024 ;;		_main
  5025 ;; This function uses a non-reentrant model
  5026 ;;
  5027                           
  5028                           
  5029                           ;psect for function _SYSTEM_Initialize
  5030  057B                     _SYSTEM_Initialize:	
  5031                           
  5032                           ;mcc.c: 72: PIN_MANAGER_Initialize();
  5033                           
  5034                           ;incstack = 0
  5035                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5036  057B  3183  23BF  3185   	fcall	_PIN_MANAGER_Initialize
  5037                           
  5038                           ;mcc.c: 73: OSCILLATOR_Initialize();
  5039  057E  3185  25B0  3185   	fcall	_OSCILLATOR_Initialize
  5040                           
  5041                           ;mcc.c: 74: WDT_Initialize();
  5042  0581  3185  25B5  3185   	fcall	_WDT_Initialize
  5043                           
  5044                           ;mcc.c: 75: TMR2_Initialize();
  5045  0584  3185  2547  3185   	fcall	_TMR2_Initialize
  5046                           
  5047                           ;mcc.c: 76: EUSART_Initialize();
  5048  0587  3184  24D6         	fcall	_EUSART_Initialize
  5049  0589  0008               	return
  5050  058A                     __end_of_SYSTEM_Initialize:	
  5051                           
  5052                           	psect	text16
  5053  05B5                     __ptext16:	
  5054 ;; *************** function _WDT_Initialize *****************
  5055 ;; Defined at:
  5056 ;;		line 87 in file "mcc_generated_files/mcc.c"
  5057 ;; Parameters:    Size  Location     Type
  5058 ;;		None
  5059 ;; Auto vars:     Size  Location     Type
  5060 ;;		None
  5061 ;; Return value:  Size  Location     Type
  5062 ;;                  1    wreg      void 
  5063 ;; Registers used:
  5064 ;;		wreg
  5065 ;; Tracked objects:
  5066 ;;		On entry : 0/0
  5067 ;;		On exit  : 0/0
  5068 ;;		Unchanged: 0/0
  5069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5073 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5074 ;;Total ram usage:        0 bytes
  5075 ;; Hardware stack levels used:    1
  5076 ;; Hardware stack levels required when called:    2
  5077 ;; This function calls:
  5078 ;;		Nothing
  5079 ;; This function is called by:
  5080 ;;		_SYSTEM_Initialize
  5081 ;; This function uses a non-reentrant model
  5082 ;;
  5083                           
  5084                           
  5085                           ;psect for function _WDT_Initialize
  5086  05B5                     _WDT_Initialize:	
  5087                           
  5088                           ;mcc.c: 90: WDTCON = 0x16;
  5089                           
  5090                           ;incstack = 0
  5091                           ; Regs used in _WDT_Initialize: [wreg]
  5092  05B5  3016               	movlw	22
  5093  05B6  0021               	movlb	1	; select bank1
  5094  05B7  0097               	movwf	23	;volatile
  5095  05B8  0008               	return
  5096  05B9                     __end_of_WDT_Initialize:	
  5097                           
  5098                           	psect	text17
  5099  0547                     __ptext17:	
  5100 ;; *************** function _TMR2_Initialize *****************
  5101 ;; Defined at:
  5102 ;;		line 63 in file "mcc_generated_files/tmr2.c"
  5103 ;; Parameters:    Size  Location     Type
  5104 ;;		None
  5105 ;; Auto vars:     Size  Location     Type
  5106 ;;		None
  5107 ;; Return value:  Size  Location     Type
  5108 ;;                  1    wreg      void 
  5109 ;; Registers used:
  5110 ;;		wreg, status,2, status,0, pclath, cstack
  5111 ;; Tracked objects:
  5112 ;;		On entry : 0/0
  5113 ;;		On exit  : 0/0
  5114 ;;		Unchanged: 0/0
  5115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5119 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5120 ;;Total ram usage:        0 bytes
  5121 ;; Hardware stack levels used:    1
  5122 ;; Hardware stack levels required when called:    3
  5123 ;; This function calls:
  5124 ;;		_TMR2_SetInterruptHandler
  5125 ;;		_TMR2_StartTimer
  5126 ;; This function is called by:
  5127 ;;		_SYSTEM_Initialize
  5128 ;; This function uses a non-reentrant model
  5129 ;;
  5130                           
  5131                           
  5132                           ;psect for function _TMR2_Initialize
  5133  0547                     _TMR2_Initialize:	
  5134                           
  5135                           ;tmr2.c: 68: T2CON = 0x4A;
  5136                           
  5137                           ;incstack = 0
  5138                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5139  0547  304A               	movlw	74
  5140  0548  0020               	movlb	0	; select bank0
  5141  0549  009C               	movwf	28	;volatile
  5142                           
  5143                           ;tmr2.c: 71: PR2 = 0x18;
  5144  054A  3018               	movlw	24
  5145  054B  009B               	movwf	27	;volatile
  5146                           
  5147                           ;tmr2.c: 74: TMR2 = 0x00;
  5148  054C  019A               	clrf	26	;volatile
  5149                           
  5150                           ;tmr2.c: 77: PIR1bits.TMR2IF = 0;
  5151  054D  1091               	bcf	17,1	;volatile
  5152                           
  5153                           ;tmr2.c: 80: PIE1bits.TMR2IE = 1;
  5154  054E  0021               	movlb	1	; select bank1
  5155  054F  1491               	bsf	17,1	;volatile
  5156                           
  5157                           ;tmr2.c: 83: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
  5158  0550  3000               	movlw	0
  5159  0551  00F3               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  5160  0552  3000               	movlw	0
  5161  0553  00F4               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  5162  0554  3185  25AA  3185   	fcall	_TMR2_SetInterruptHandler
  5163                           
  5164                           ;tmr2.c: 86: TMR2_StartTimer();
  5165  0557  3185  25BC         	fcall	_TMR2_StartTimer
  5166  0559  0008               	return
  5167  055A                     __end_of_TMR2_Initialize:	
  5168                           
  5169                           	psect	text18
  5170  05BC                     __ptext18:	
  5171 ;; *************** function _TMR2_StartTimer *****************
  5172 ;; Defined at:
  5173 ;;		line 89 in file "mcc_generated_files/tmr2.c"
  5174 ;; Parameters:    Size  Location     Type
  5175 ;;		None
  5176 ;; Auto vars:     Size  Location     Type
  5177 ;;		None
  5178 ;; Return value:  Size  Location     Type
  5179 ;;                  1    wreg      void 
  5180 ;; Registers used:
  5181 ;;		None
  5182 ;; Tracked objects:
  5183 ;;		On entry : 0/0
  5184 ;;		On exit  : 0/0
  5185 ;;		Unchanged: 0/0
  5186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5190 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5191 ;;Total ram usage:        0 bytes
  5192 ;; Hardware stack levels used:    1
  5193 ;; Hardware stack levels required when called:    2
  5194 ;; This function calls:
  5195 ;;		Nothing
  5196 ;; This function is called by:
  5197 ;;		_TMR2_Initialize
  5198 ;; This function uses a non-reentrant model
  5199 ;;
  5200                           
  5201                           
  5202                           ;psect for function _TMR2_StartTimer
  5203  05BC                     _TMR2_StartTimer:	
  5204                           
  5205                           ;tmr2.c: 92: T2CONbits.TMR2ON = 1;
  5206                           
  5207                           ;incstack = 0
  5208                           ; Regs used in _TMR2_StartTimer: []
  5209  05BC  0020               	movlb	0	; select bank0
  5210  05BD  151C               	bsf	28,2	;volatile
  5211  05BE  0008               	return
  5212  05BF                     __end_of_TMR2_StartTimer:	
  5213                           
  5214                           	psect	text19
  5215  05AA                     __ptext19:	
  5216 ;; *************** function _TMR2_SetInterruptHandler *****************
  5217 ;; Defined at:
  5218 ;;		line 142 in file "mcc_generated_files/tmr2.c"
  5219 ;; Parameters:    Size  Location     Type
  5220 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
  5221 ;;		 -> TMR2_DefaultInterruptHandler(1), 
  5222 ;; Auto vars:     Size  Location     Type
  5223 ;;		None
  5224 ;; Return value:  Size  Location     Type
  5225 ;;                  1    wreg      void 
  5226 ;; Registers used:
  5227 ;;		wreg
  5228 ;; Tracked objects:
  5229 ;;		On entry : 0/0
  5230 ;;		On exit  : 0/0
  5231 ;;		Unchanged: 0/0
  5232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5233 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5236 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5237 ;;Total ram usage:        2 bytes
  5238 ;; Hardware stack levels used:    1
  5239 ;; Hardware stack levels required when called:    2
  5240 ;; This function calls:
  5241 ;;		Nothing
  5242 ;; This function is called by:
  5243 ;;		_TMR2_Initialize
  5244 ;; This function uses a non-reentrant model
  5245 ;;
  5246                           
  5247                           
  5248                           ;psect for function _TMR2_SetInterruptHandler
  5249  05AA                     _TMR2_SetInterruptHandler:	
  5250                           
  5251                           ;tmr2.c: 143: TMR2_InterruptHandler = InterruptHandler;
  5252                           
  5253                           ;incstack = 0
  5254                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  5255  05AA  0874               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
  5256  05AB  0021               	movlb	1	; select bank1
  5257  05AC  00CF               	movwf	(_TMR2_InterruptHandler+1)^(0+128)
  5258  05AD  0873               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
  5259  05AE  00CE               	movwf	_TMR2_InterruptHandler^(0+128)
  5260  05AF  0008               	return
  5261  05B0                     __end_of_TMR2_SetInterruptHandler:	
  5262                           
  5263                           	psect	text20
  5264  03BF                     __ptext20:	
  5265 ;; *************** function _PIN_MANAGER_Initialize *****************
  5266 ;; Defined at:
  5267 ;;		line 104 in file "mcc_generated_files/pin_manager.c"
  5268 ;; Parameters:    Size  Location     Type
  5269 ;;		None
  5270 ;; Auto vars:     Size  Location     Type
  5271 ;;  state           1    3[COMMON] unsigned char 
  5272 ;; Return value:  Size  Location     Type
  5273 ;;                  1    wreg      void 
  5274 ;; Registers used:
  5275 ;;		wreg, status,2, status,0
  5276 ;; Tracked objects:
  5277 ;;		On entry : 0/0
  5278 ;;		On exit  : 0/0
  5279 ;;		Unchanged: 0/0
  5280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5282 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5284 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5285 ;;Total ram usage:        1 bytes
  5286 ;; Hardware stack levels used:    1
  5287 ;; Hardware stack levels required when called:    2
  5288 ;; This function calls:
  5289 ;;		Nothing
  5290 ;; This function is called by:
  5291 ;;		_SYSTEM_Initialize
  5292 ;; This function uses a non-reentrant model
  5293 ;;
  5294                           
  5295                           
  5296                           ;psect for function _PIN_MANAGER_Initialize
  5297  03BF                     _PIN_MANAGER_Initialize:	
  5298                           
  5299                           ;pin_manager.c: 109: LATA = 0x00;
  5300                           
  5301                           ;incstack = 0
  5302                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
  5303  03BF  0022               	movlb	2	; select bank2
  5304  03C0  018C               	clrf	12	;volatile
  5305                           
  5306                           ;pin_manager.c: 110: LATC = 0x00;
  5307  03C1  018E               	clrf	14	;volatile
  5308                           
  5309                           ;pin_manager.c: 115: TRISA = 0x0F;
  5310  03C2  300F               	movlw	15
  5311  03C3  0021               	movlb	1	; select bank1
  5312  03C4  008C               	movwf	12	;volatile
  5313                           
  5314                           ;pin_manager.c: 116: TRISC = 0x1f;
  5315  03C5  301F               	movlw	31
  5316  03C6  008E               	movwf	14	;volatile
  5317                           
  5318                           ;pin_manager.c: 121: ANSELC = 0x0F;
  5319  03C7  300F               	movlw	15
  5320  03C8  0023               	movlb	3	; select bank3
  5321  03C9  008E               	movwf	14	;volatile
  5322                           
  5323                           ;pin_manager.c: 122: ANSELA = 0x17;
  5324  03CA  3017               	movlw	23
  5325  03CB  008C               	movwf	12	;volatile
  5326                           
  5327                           ;pin_manager.c: 127: WPUA = 0x3B;
  5328  03CC  303B               	movlw	59
  5329  03CD  0024               	movlb	4	; select bank4
  5330  03CE  008C               	movwf	12	;volatile
  5331                           
  5332                           ;pin_manager.c: 128: WPUC = 0x30;
  5333  03CF  3030               	movlw	48
  5334  03D0  008E               	movwf	14	;volatile
  5335                           
  5336                           ;pin_manager.c: 129: OPTION_REGbits.nWPUEN = 0;
  5337  03D1  0021               	movlb	1	; select bank1
  5338  03D2  1395               	bcf	21,7	;volatile
  5339                           
  5340                           ;pin_manager.c: 134: ODCONA = 0x00;
  5341  03D3  0025               	movlb	5	; select bank5
  5342  03D4  018C               	clrf	12	;volatile
  5343                           
  5344                           ;pin_manager.c: 135: ODCONC = 0x00;
  5345  03D5  018E               	clrf	14	;volatile
  5346                           
  5347                           ;pin_manager.c: 142: bool state = (unsigned char)GIE;
  5348  03D6  3000               	movlw	0
  5349  03D7  1B8B               	btfsc	11,7	;volatile
  5350  03D8  3001               	movlw	1
  5351  03D9  00F3               	movwf	PIN_MANAGER_Initialize@state
  5352                           
  5353                           ;pin_manager.c: 143: GIE = 0;
  5354  03DA  138B               	bcf	11,7	;volatile
  5355                           
  5356                           ;pin_manager.c: 144: PPSLOCK = 0x55;
  5357  03DB  3055               	movlw	85
  5358  03DC  003C               	movlb	28	; select bank28
  5359  03DD  008F               	movwf	15	;volsfr
  5360                           
  5361                           ;pin_manager.c: 145: PPSLOCK = 0xAA;
  5362  03DE  30AA               	movlw	170
  5363  03DF  008F               	movwf	15	;volsfr
  5364                           
  5365                           ;pin_manager.c: 146: PPSLOCKbits.PPSLOCKED = 0x00;
  5366  03E0  100F               	bcf	15,0	;volsfr
  5367                           
  5368                           ;pin_manager.c: 148: RXPPSbits.RXPPS = 0x14;
  5369  03E1  0815               	movf	21,w	;volatile
  5370  03E2  39E0               	andlw	-32
  5371  03E3  3814               	iorlw	20
  5372  03E4  0095               	movwf	21	;volatile
  5373                           
  5374                           ;pin_manager.c: 149: RA4PPSbits.RA4PPS = 0x04;
  5375  03E5  003D               	movlb	29	; select bank29
  5376  03E6  0814               	movf	20,w	;volatile
  5377  03E7  39F0               	andlw	-16
  5378  03E8  3804               	iorlw	4
  5379  03E9  0094               	movwf	20	;volatile
  5380                           
  5381                           ;pin_manager.c: 150: RA5PPSbits.RA5PPS = 0x03;
  5382  03EA  0815               	movf	21,w	;volatile
  5383  03EB  39F0               	andlw	-16
  5384  03EC  3803               	iorlw	3
  5385  03ED  0095               	movwf	21	;volatile
  5386                           
  5387                           ;pin_manager.c: 151: RC5PPSbits.RC5PPS = 0x09;
  5388  03EE  0825               	movf	37,w	;volatile
  5389  03EF  39F0               	andlw	-16
  5390  03F0  3809               	iorlw	9
  5391  03F1  00A5               	movwf	37	;volatile
  5392                           
  5393                           ;pin_manager.c: 153: PPSLOCK = 0x55;
  5394  03F2  3055               	movlw	85
  5395  03F3  003C               	movlb	28	; select bank28
  5396  03F4  008F               	movwf	15	;volsfr
  5397                           
  5398                           ;pin_manager.c: 154: PPSLOCK = 0xAA;
  5399  03F5  30AA               	movlw	170
  5400  03F6  008F               	movwf	15	;volsfr
  5401                           
  5402                           ;pin_manager.c: 155: PPSLOCKbits.PPSLOCKED = 0x01;
  5403  03F7  140F               	bsf	15,0	;volsfr
  5404                           
  5405                           ;pin_manager.c: 157: GIE = state;
  5406  03F8  1C73               	btfss	PIN_MANAGER_Initialize@state,0
  5407  03F9  2BFC               	goto	u1250
  5408  03FA  178B               	bsf	11,7	;volatile
  5409  03FB  0008               	return
  5410  03FC                     u1250:	
  5411  03FC  138B               	bcf	11,7	;volatile
  5412  03FD  0008               	return
  5413  03FE                     __end_of_PIN_MANAGER_Initialize:	
  5414                           
  5415                           	psect	text21
  5416  05B0                     __ptext21:	
  5417 ;; *************** function _OSCILLATOR_Initialize *****************
  5418 ;; Defined at:
  5419 ;;		line 79 in file "mcc_generated_files/mcc.c"
  5420 ;; Parameters:    Size  Location     Type
  5421 ;;		None
  5422 ;; Auto vars:     Size  Location     Type
  5423 ;;		None
  5424 ;; Return value:  Size  Location     Type
  5425 ;;                  1    wreg      void 
  5426 ;; Registers used:
  5427 ;;		wreg, status,2
  5428 ;; Tracked objects:
  5429 ;;		On entry : 0/0
  5430 ;;		On exit  : 0/0
  5431 ;;		Unchanged: 0/0
  5432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5436 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5437 ;;Total ram usage:        0 bytes
  5438 ;; Hardware stack levels used:    1
  5439 ;; Hardware stack levels required when called:    2
  5440 ;; This function calls:
  5441 ;;		Nothing
  5442 ;; This function is called by:
  5443 ;;		_SYSTEM_Initialize
  5444 ;; This function uses a non-reentrant model
  5445 ;;
  5446                           
  5447                           
  5448                           ;psect for function _OSCILLATOR_Initialize
  5449  05B0                     _OSCILLATOR_Initialize:	
  5450                           
  5451                           ;mcc.c: 82: OSCCON = 0x7A;
  5452                           
  5453                           ;incstack = 0
  5454                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  5455  05B0  307A               	movlw	122
  5456  05B1  0021               	movlb	1	; select bank1
  5457  05B2  0099               	movwf	25	;volatile
  5458                           
  5459                           ;mcc.c: 84: OSCTUNE = 0x00;
  5460  05B3  0198               	clrf	24	;volatile
  5461  05B4  0008               	return
  5462  05B5                     __end_of_OSCILLATOR_Initialize:	
  5463                           
  5464                           	psect	text22
  5465  04D6                     __ptext22:	
  5466 ;; *************** function _EUSART_Initialize *****************
  5467 ;; Defined at:
  5468 ;;		line 78 in file "mcc_generated_files/eusart.c"
  5469 ;; Parameters:    Size  Location     Type
  5470 ;;		None
  5471 ;; Auto vars:     Size  Location     Type
  5472 ;;		None
  5473 ;; Return value:  Size  Location     Type
  5474 ;;                  1    wreg      void 
  5475 ;; Registers used:
  5476 ;;		wreg, status,2
  5477 ;; Tracked objects:
  5478 ;;		On entry : 0/0
  5479 ;;		On exit  : 0/0
  5480 ;;		Unchanged: 0/0
  5481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5484 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5485 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5486 ;;Total ram usage:        1 bytes
  5487 ;; Hardware stack levels used:    1
  5488 ;; Hardware stack levels required when called:    2
  5489 ;; This function calls:
  5490 ;;		Nothing
  5491 ;; This function is called by:
  5492 ;;		_SYSTEM_Initialize
  5493 ;; This function uses a non-reentrant model
  5494 ;;
  5495                           
  5496                           
  5497                           ;psect for function _EUSART_Initialize
  5498  04D6                     _EUSART_Initialize:	
  5499                           
  5500                           ;eusart.c: 81: PIE1bits.RCIE = 0;
  5501                           
  5502                           ;incstack = 0
  5503                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  5504  04D6  0021               	movlb	1	; select bank1
  5505  04D7  1291               	bcf	17,5	;volatile
  5506                           
  5507                           ;eusart.c: 82: PIE1bits.TXIE = 0;
  5508  04D8  1211               	bcf	17,4	;volatile
  5509                           
  5510                           ;eusart.c: 87: BAUDCON = 0x08;
  5511  04D9  3008               	movlw	8
  5512  04DA  0023               	movlb	3	; select bank3
  5513  04DB  009F               	movwf	31	;volatile
  5514                           
  5515                           ;eusart.c: 90: RCSTA = 0x90;
  5516  04DC  3090               	movlw	144
  5517  04DD  009D               	movwf	29	;volatile
  5518                           
  5519                           ;eusart.c: 93: TXSTA = 0x24;
  5520  04DE  3024               	movlw	36
  5521  04DF  009E               	movwf	30	;volatile
  5522                           
  5523                           ;eusart.c: 96: SPBRGL = 0xA0;
  5524  04E0  30A0               	movlw	160
  5525  04E1  009B               	movwf	27	;volatile
  5526                           
  5527                           ;eusart.c: 99: SPBRGH = 0x01;
  5528  04E2  3001               	movlw	1
  5529  04E3  009C               	movwf	28	;volatile
  5530                           
  5531                           ;eusart.c: 103: eusartTxHead = 0;
  5532  04E4  01F8               	clrf	_eusartTxHead	;volatile
  5533                           
  5534                           ;eusart.c: 104: eusartTxTail = 0;
  5535  04E5  0021               	movlb	1	; select bank1
  5536  04E6  01BE               	clrf	_eusartTxTail^(0+128)	;volatile
  5537                           
  5538                           ;eusart.c: 105: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  5539  04E7  3010               	movlw	16
  5540  04E8  00F3               	movwf	??_EUSART_Initialize
  5541  04E9  0873               	movf	??_EUSART_Initialize,w
  5542  04EA  00D0               	movwf	_eusartTxBufferRemaining^(0+128)	;volatile
  5543                           
  5544                           ;eusart.c: 107: eusartRxHead = 0;
  5545  04EB  01BD               	clrf	_eusartRxHead^(0+128)	;volatile
  5546                           
  5547                           ;eusart.c: 108: eusartRxTail = 0;
  5548  04EC  01BC               	clrf	_eusartRxTail^(0+128)	;volatile
  5549                           
  5550                           ;eusart.c: 109: _bEusartRxCount = 0;
  5551  04ED  01F9               	clrf	__bEusartRxCount	;volatile
  5552                           
  5553                           ;eusart.c: 112: PIE1bits.RCIE = 1;
  5554  04EE  1691               	bsf	17,5	;volatile
  5555  04EF  0008               	return
  5556  04F0                     __end_of_EUSART_Initialize:	
  5557                           
  5558                           	psect	intentry
  5559  0004                     __pintentry:	
  5560 ;; *************** function _INTERRUPT_InterruptManager *****************
  5561 ;; Defined at:
  5562 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  5563 ;; Parameters:    Size  Location     Type
  5564 ;;		None
  5565 ;; Auto vars:     Size  Location     Type
  5566 ;;		None
  5567 ;; Return value:  Size  Location     Type
  5568 ;;                  1    wreg      void 
  5569 ;; Registers used:
  5570 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5571 ;; Tracked objects:
  5572 ;;		On entry : 0/0
  5573 ;;		On exit  : 0/0
  5574 ;;		Unchanged: 0/0
  5575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5579 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5580 ;;Total ram usage:        0 bytes
  5581 ;; Hardware stack levels used:    1
  5582 ;; Hardware stack levels required when called:    1
  5583 ;; This function calls:
  5584 ;;		_EUSART_Receive_ISR
  5585 ;;		_EUSART_Transmit_ISR
  5586 ;; This function is called by:
  5587 ;;		Interrupt level 1
  5588 ;; This function uses a non-reentrant model
  5589 ;;
  5590                           
  5591  0004                     _INTERRUPT_InterruptManager:	
  5592                           
  5593                           ;incstack = 0
  5594  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  5595                           
  5596                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5597  0005  3180               	pagesel	$
  5598                           
  5599                           ;interrupt_manager.c: 54: extern volatile unsigned char isRunInBoot;;interrupt_manager.c
      +                          : 55: if(isRunInBoot==0xaa){
  5600  0006  30AA               	movlw	170
  5601  0007  003F               	movlb	31	; select bank31
  5602  0008  067F               	xorwf	127,w	;volatile
  5603  0009  1D03               	btfss	3,2
  5604  000A  280D               	goto	i1l21
  5605  000B  3188               	pagesel	2052	;# 
  5606  000C  2804               	goto	2052	;# 
  5607  000D                     i1l21:	
  5608                           
  5609                           ;interrupt_manager.c: 58: };interrupt_manager.c: 59: if(INTCONbits.PEIE == 1 && PIE1bits
      +                          .TXIE == 1 && PIR1bits.TXIF == 1)
  5610  000D  1F0B               	btfss	11,6	;volatile
  5611  000E  2818               	goto	i1l2350
  5612  000F  0021               	movlb	1	; select bank1
  5613  0010  1E11               	btfss	17,4	;volatile
  5614  0011  2818               	goto	i1l2350
  5615  0012  0020               	movlb	0	; select bank0
  5616  0013  1E11               	btfss	17,4	;volatile
  5617  0014  2818               	goto	i1l2350
  5618                           
  5619                           ;interrupt_manager.c: 60: {;interrupt_manager.c: 61: EUSART_Transmit_ISR();
  5620  0015  3184  24BA  3180   	fcall	_EUSART_Transmit_ISR
  5621  0018                     i1l2350:	
  5622                           
  5623                           ;interrupt_manager.c: 62: };interrupt_manager.c: 63: if(INTCONbits.PEIE == 1 && PIE1bits
      +                          .RCIE == 1 && PIR1bits.RCIF == 1)
  5624  0018  1F0B               	btfss	11,6	;volatile
  5625  0019  2823               	goto	i1l2358
  5626  001A  0021               	movlb	1	; select bank1
  5627  001B  1E91               	btfss	17,5	;volatile
  5628  001C  2823               	goto	i1l2358
  5629  001D  0020               	movlb	0	; select bank0
  5630  001E  1E91               	btfss	17,5	;volatile
  5631  001F  2823               	goto	i1l2358
  5632                           
  5633                           ;interrupt_manager.c: 64: {;interrupt_manager.c: 65: EUSART_Receive_ISR();
  5634  0020  3184  247B  3180   	fcall	_EUSART_Receive_ISR
  5635  0023                     i1l2358:	
  5636                           
  5637                           ;interrupt_manager.c: 66: };interrupt_manager.c: 67: if(INTCONbits.PEIE == 1 && PIE1bits
      +                          .TMR2IE == 1 && PIR1bits.TMR2IF==1){
  5638  0023  1F0B               	btfss	11,6	;volatile
  5639  0024  283F               	goto	i1l28
  5640  0025  0021               	movlb	1	; select bank1
  5641  0026  1C91               	btfss	17,1	;volatile
  5642  0027  283F               	goto	i1l28
  5643  0028  0020               	movlb	0	; select bank0
  5644  0029  1C91               	btfss	17,1	;volatile
  5645  002A  283F               	goto	i1l28
  5646                           
  5647                           ;interrupt_manager.c: 68: PIR1bits.TMR2IF=0;
  5648  002B  1091               	bcf	17,1	;volatile
  5649                           
  5650                           ;interrupt_manager.c: 69: if(eusartRxIdleTime_ms)eusartRxIdleTime_ms++;
  5651  002C  0021               	movlb	1	; select bank1
  5652  002D  0836               	movf	_eusartRxIdleTime_ms^(0+128),w	;volatile
  5653  002E  0437               	iorwf	(_eusartRxIdleTime_ms+1)^(0+128),w	;volatile
  5654  002F  1903               	btfsc	3,2
  5655  0030  2835               	goto	i1l25
  5656  0031  3001               	movlw	1
  5657  0032  07B6               	addwf	_eusartRxIdleTime_ms^(0+128),f	;volatile
  5658  0033  3000               	movlw	0
  5659  0034  3DB7               	addwfc	(_eusartRxIdleTime_ms+1)^(0+128),f	;volatile
  5660  0035                     i1l25:	
  5661                           
  5662                           ;interrupt_manager.c: 70: if(eusartRxIdleTime_ms>20){
  5663  0035  3000               	movlw	0
  5664  0036  0237               	subwf	(_eusartRxIdleTime_ms+1)^(0+128),w	;volatile
  5665  0037  3015               	movlw	21
  5666  0038  1903               	skipnz
  5667  0039  0236               	subwf	_eusartRxIdleTime_ms^(0+128),w	;volatile
  5668  003A  1C03               	skipc
  5669  003B  283F               	goto	i1l28
  5670                           
  5671                           ;interrupt_manager.c: 71: eusartRxIdleTime_ms=0;
  5672  003C  01B6               	clrf	_eusartRxIdleTime_ms^(0+128)	;volatile
  5673  003D  01B7               	clrf	(_eusartRxIdleTime_ms+1)^(0+128)	;volatile
  5674                           
  5675                           ;interrupt_manager.c: 72: Event|=(1<<0);
  5676  003E  147A               	bsf	_Event,0	;volatile
  5677  003F                     i1l28:	
  5678                           ;interrupt_manager.c: 76: else;interrupt_manager.c: 77: {
  5679                           
  5680                           ;interrupt_manager.c: 73: };interrupt_manager.c: 75: }
  5681                           
  5682  003F  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  5683  0040  0009               	retfie
  5684  0041                     __end_of_INTERRUPT_InterruptManager:	
  5685                           
  5686                           	psect	text24
  5687  04BA                     __ptext24:	
  5688 ;; *************** function _EUSART_Transmit_ISR *****************
  5689 ;; Defined at:
  5690 ;;		line 158 in file "mcc_generated_files/eusart.c"
  5691 ;; Parameters:    Size  Location     Type
  5692 ;;		None
  5693 ;; Auto vars:     Size  Location     Type
  5694 ;;		None
  5695 ;; Return value:  Size  Location     Type
  5696 ;;                  1    wreg      void 
  5697 ;; Registers used:
  5698 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5699 ;; Tracked objects:
  5700 ;;		On entry : 0/0
  5701 ;;		On exit  : 0/0
  5702 ;;		Unchanged: 0/0
  5703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5706 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5707 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5708 ;;Total ram usage:        1 bytes
  5709 ;; Hardware stack levels used:    1
  5710 ;; This function calls:
  5711 ;;		Nothing
  5712 ;; This function is called by:
  5713 ;;		_INTERRUPT_InterruptManager
  5714 ;; This function uses a non-reentrant model
  5715 ;;
  5716                           
  5717                           
  5718                           ;psect for function _EUSART_Transmit_ISR
  5719  04BA                     _EUSART_Transmit_ISR:	
  5720                           
  5721                           ;eusart.c: 162: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
  5722                           
  5723                           ;incstack = 0
  5724                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  5725  04BA  3010               	movlw	16
  5726  04BB  0021               	movlb	1	; select bank1
  5727  04BC  0250               	subwf	_eusartTxBufferRemaining^(0+128),w	;volatile
  5728  04BD  1803               	skipnc
  5729  04BE  2CD4               	goto	i1l153
  5730                           
  5731                           ;eusart.c: 163: {;eusart.c: 164: TXREG = eusartTxBuffer[eusartTxTail++];
  5732  04BF  083E               	movf	_eusartTxTail^(0+128),w
  5733  04C0  3EA0               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  5734  04C1  0086               	movwf	6
  5735  04C2  0187               	clrf	7
  5736  04C3  0801               	movf	1,w
  5737  04C4  0023               	movlb	3	; select bank3
  5738  04C5  009A               	movwf	26	;volatile
  5739  04C6  3001               	movlw	1
  5740  04C7  00F0               	movwf	??_EUSART_Transmit_ISR
  5741  04C8  0870               	movf	??_EUSART_Transmit_ISR,w
  5742  04C9  0021               	movlb	1	; select bank1
  5743  04CA  07BE               	addwf	_eusartTxTail^(0+128),f	;volatile
  5744                           
  5745                           ;eusart.c: 165: if(sizeof(eusartTxBuffer) <= eusartTxTail)
  5746  04CB  3010               	movlw	16
  5747  04CC  023E               	subwf	_eusartTxTail^(0+128),w	;volatile
  5748  04CD  1803               	btfsc	3,0
  5749                           
  5750                           ;eusart.c: 166: {;eusart.c: 167: eusartTxTail = 0;
  5751  04CE  01BE               	clrf	_eusartTxTail^(0+128)	;volatile
  5752                           
  5753                           ;eusart.c: 168: };eusart.c: 169: eusartTxBufferRemaining++;
  5754  04CF  3001               	movlw	1
  5755  04D0  00F0               	movwf	??_EUSART_Transmit_ISR
  5756  04D1  0870               	movf	??_EUSART_Transmit_ISR,w
  5757  04D2  07D0               	addwf	_eusartTxBufferRemaining^(0+128),f	;volatile
  5758                           
  5759                           ;eusart.c: 170: }
  5760  04D3  0008               	return
  5761  04D4                     i1l153:	
  5762                           
  5763                           ;eusart.c: 171: else;eusart.c: 172: {;eusart.c: 173: PIE1bits.TXIE = 0;
  5764  04D4  1211               	bcf	17,4	;volatile
  5765  04D5  0008               	return
  5766  04D6                     __end_of_EUSART_Transmit_ISR:	
  5767                           
  5768                           	psect	text25
  5769  047B                     __ptext25:	
  5770 ;; *************** function _EUSART_Receive_ISR *****************
  5771 ;; Defined at:
  5772 ;;		line 177 in file "mcc_generated_files/eusart.c"
  5773 ;; Parameters:    Size  Location     Type
  5774 ;;		None
  5775 ;; Auto vars:     Size  Location     Type
  5776 ;;  t8              1    2[COMMON] unsigned char 
  5777 ;; Return value:  Size  Location     Type
  5778 ;;                  1    wreg      void 
  5779 ;; Registers used:
  5780 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5781 ;; Tracked objects:
  5782 ;;		On entry : 0/0
  5783 ;;		On exit  : 0/0
  5784 ;;		Unchanged: 0/0
  5785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5787 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5788 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5789 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5790 ;;Total ram usage:        3 bytes
  5791 ;; Hardware stack levels used:    1
  5792 ;; This function calls:
  5793 ;;		Nothing
  5794 ;; This function is called by:
  5795 ;;		_INTERRUPT_InterruptManager
  5796 ;; This function uses a non-reentrant model
  5797 ;;
  5798                           
  5799                           
  5800                           ;psect for function _EUSART_Receive_ISR
  5801  047B                     _EUSART_Receive_ISR:	
  5802                           
  5803                           ;eusart.c: 179: uint8_t t8;;eusart.c: 180: if(1 == RCSTAbits.OERR){
  5804                           
  5805                           ;incstack = 0
  5806                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  5807  047B  0023               	movlb	3	; select bank3
  5808  047C  1C9D               	btfss	29,1	;volatile
  5809  047D  2C80               	goto	i1l2282
  5810                           
  5811                           ;eusart.c: 181: RCSTAbits.CREN = 0;
  5812  047E  121D               	bcf	29,4	;volatile
  5813                           
  5814                           ;eusart.c: 182: RCSTAbits.CREN = 1;
  5815  047F  161D               	bsf	29,4	;volatile
  5816  0480                     i1l2282:	
  5817                           
  5818                           ;eusart.c: 183: };eusart.c: 186: t8=RCREG;
  5819  0480  0819               	movf	25,w	;volatile
  5820  0481  00F0               	movwf	??_EUSART_Receive_ISR
  5821  0482  0870               	movf	??_EUSART_Receive_ISR,w
  5822  0483  00F2               	movwf	EUSART_Receive_ISR@t8
  5823                           
  5824                           ;eusart.c: 187: if(_bEusartRxCount<160){
  5825  0484  30A0               	movlw	160
  5826  0485  0279               	subwf	__bEusartRxCount,w	;volatile
  5827  0486  1803               	skipnc
  5828  0487  0008               	return
  5829                           
  5830                           ;eusart.c: 188: _bEusartRxBuffer[_bEusartRxCount]=t8;
  5831  0488  0879               	movf	__bEusartRxCount,w	;volatile
  5832  0489  3E40               	addlw	64
  5833  048A  00F0               	movwf	??_EUSART_Receive_ISR
  5834  048B  01F1               	clrf	??_EUSART_Receive_ISR+1
  5835  048C  3023               	movlw	35
  5836  048D  3DF1               	addwfc	??_EUSART_Receive_ISR+1,f
  5837  048E  0870               	movf	??_EUSART_Receive_ISR,w
  5838  048F  0086               	movwf	6
  5839  0490  0871               	movf	??_EUSART_Receive_ISR+1,w
  5840  0491  0087               	movwf	7
  5841  0492  0872               	movf	EUSART_Receive_ISR@t8,w
  5842  0493  0081               	movwf	1
  5843                           
  5844                           ;eusart.c: 189: _bEusartRxCount++;
  5845  0494  3001               	movlw	1
  5846  0495  00F0               	movwf	??_EUSART_Receive_ISR
  5847  0496  0870               	movf	??_EUSART_Receive_ISR,w
  5848  0497  07F9               	addwf	__bEusartRxCount,f	;volatile
  5849                           
  5850                           ;eusart.c: 190: eusartRxIdleTime_ms=10;
  5851  0498  300A               	movlw	10
  5852  0499  0021               	movlb	1	; select bank1
  5853  049A  00B6               	movwf	_eusartRxIdleTime_ms^(0+128)	;volatile
  5854  049B  3000               	movlw	0
  5855  049C  00B7               	movwf	(_eusartRxIdleTime_ms^(0+128)+1)	;volatile
  5856  049D  0008               	return
  5857  049E                     __end_of_EUSART_Receive_ISR:	
  5858  007E                     btemp	set	126	;btemp
  5859  007E                     int$flags	set	126
  5860  007E                     wtemp0	set	126


Data Sizes:
    Strings     55
    Constant    17
    Data        3
    BSS         162
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     80      80
    BANK1            80     15      52
    BANK2            80      0      48
    BANK3            80      0      80
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           32      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    m_str_h2b@b	PTR unsigned char  size(1) Largest target is 48
		 -> hexLineBuffer(BANK2[48]), 

    m_str_h2b@h	PTR unsigned char  size(1) Largest target is 48
		 -> hexLineBuffer(BANK2[48]), 

    m_mem_set@buf	PTR unsigned char  size(1) Largest target is 48
		 -> hexLineBuffer(BANK2[48]), 

    uart_send_str@str	PTR unsigned char  size(2) Largest target is 20
		 -> STR_3(CODE[20]), STR_2(CODE[16]), STR_1(CODE[19]), 

    api_write_block@binbuf	PTR unsigned int  size(1) Largest target is 80
		 -> binBuffer(BANK3[80]), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR2_DefaultInterruptHandler(), 

    FLASH_WriteBlock@flashWordArray	PTR unsigned int  size(1) Largest target is 80
		 -> binBuffer(BANK3[80]), 


Critical Paths under _main in COMMON

    _iap_process->_FLASH_WriteBlock
    _iap_received_package->_uart_send_byte
    _decode_hex_len->_m_mem_set
    _decode_hex_len->_m_str_h2b
    _m_str_h2b->__chr2hex
    _api_write_block->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock
    _TMR2_Initialize->_TMR2_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART_Receive_ISR

Critical Paths under _main in BANK0

    _iap_process->_decode_xmodem_package
    _decode_hex_len->_api_write_block
    _api_write_block->_FLASH_WriteBlock

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_iap_process
    _iap_process->_decode_xmodem_package
    _decode_xmodem_package->_decode_hex_len

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    6568
                                             10 BANK1      5     5      0
                     _FLASH_ReadWord
                  _SYSTEM_Initialize
                        _iap_process
                _uart_received_start
                      _uart_send_str
 ---------------------------------------------------------------------------------
 (1) _iap_process                                          3     3      0    5666
                                              7 BANK1      3     3      0
                   _FLASH_WriteBlock
              _decode_xmodem_package
               _iap_received_package
                     _uart_send_byte
                      _uart_send_str
 ---------------------------------------------------------------------------------
 (1) _uart_send_str                                        3     1      2     273
                                              3 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (2) _iap_received_package                                 2     2      0      68
                                              4 COMMON     2     2      0
                _uart_received_start
                     _uart_send_byte
 ---------------------------------------------------------------------------------
 (2) _uart_send_byte                                       1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _uart_received_start                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _decode_xmodem_package                                3     3      0    4069
                                             79 BANK0      1     1      0
                                              5 BANK1      2     2      0
                     _decode_hex_len
 ---------------------------------------------------------------------------------
 (3) _decode_hex_len                                       5     5      0    3967
                                              0 BANK1      5     5      0
                    _api_write_block
                          _m_mem_set
                          _m_str_h2b
 ---------------------------------------------------------------------------------
 (4) _m_str_h2b                                           10     7      3     881
                                              6 COMMON     2     2      0
                                              0 BANK0      8     5      3
                           __chr2hex
 ---------------------------------------------------------------------------------
 (5) __chr2hex                                             3     3      0     322
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (4) _m_mem_set                                            5     2      3     312
                                              3 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (4) _api_write_block                                     73    70      3    2589
                                              6 BANK0     73    70      3
                   _FLASH_EraseBlock
                     _FLASH_ReadWord
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (5) _FLASH_WriteBlock                                     8     5      3    1169
                                              6 COMMON     2     2      0
                                              0 BANK0      6     3      3
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (6) _FLASH_EraseBlock                                     3     1      2     276
                                              3 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (5) _FLASH_ReadWord                                       3     1      2     366
                                              3 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     121
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0      98
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR2_SetInterruptHandler                             2     0      2      98
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                           0     0      0      23
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
 ---------------------------------------------------------------------------------
 (8) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Receive_ISR                                   3     3      0      23
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FLASH_ReadWord
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
       _TMR2_StartTimer
     _WDT_Initialize
   _iap_process
     _FLASH_WriteBlock
       _FLASH_EraseBlock
     _decode_xmodem_package
       _decode_hex_len
         _api_write_block
           _FLASH_EraseBlock
           _FLASH_ReadWord
           _FLASH_WriteBlock
             _FLASH_EraseBlock
         _m_mem_set
         _m_str_h2b
           __chr2hex
     _iap_received_package
       _uart_received_start
       _uart_send_byte
     _uart_send_byte
     _uart_send_str
   _uart_received_start
   _uart_send_str

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3E0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      F      34       7       65.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      30       9       60.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     10F      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              20      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           20      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     10F      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Sat Mar 30 13:10:13 2019

        __end_of_TMR2_SetInterruptHandler 05B0                               __CFG_CP$OFF 0000  
                             __CFG_LVP$ON 0000                                       l331 03B7  
                                     l332 03BD                                       l193 02C8  
                                     l371 0594                                       l380 045F  
                                     l438 0206                                       l368 058E  
                                     l449 0205                                       l386 0477  
                                     _GIE 005F                                       _PR2 001B  
                         _TMR2_Initialize 0547                              __CFG_BORV$LO 0000  
                                     wreg 0009                           ??_uart_send_str 0075  
          FLASH_WriteBlock@flashWordArray 0022                            _decode_hex_len 0082  
                                    l2210 0418                                      l2202 0411  
                                    l2220 042C                                      l2212 0427  
                                    l2600 0453                                      l2264 0458  
                                    l2620 0370                                      l2702 00DE  
                                    l2552 028E                                      l2704 0116  
                                    l2650 031B                                      l2660 050A  
                                    l2724 0162                                      l2726 0117  
                                    l2742 03B2                                      l2648 02D6  
                                    l2728 0167                                      l2744 037E  
                                    l2594 0446                                      l2762 0236  
                                    l2588 043B                                      l2684 00D5  
                                    l2852 01F2                                      l2774 022D  
                                    l2854 01CA                                      l2776 022F  
                                    l2856 01F8                                      l2788 0273  
                                    STR_1 0534                                      STR_2 056B  
                                    STR_3 0520                                      u1250 03FC  
                                    _LATA 010C                                      u2207 041F  
                                    _LATC 010E                                      u2157 01AA  
                                    u2167 01BD                                      u2177 01D4  
                                    u2187 021A                                      u2197 0414  
                                    u1905 00B8                                      u1845 036C  
                                    u1945 00EB                                      u1955 0129  
                                    i1l21 000D                                      u1895 00AA  
                                    i1l25 0035                                      u1995 038E  
                                    i1l28 003F                                      _TMR2 001A  
                                    _WPUA 020C                                      _WPUC 020E  
                            __CFG_WRT$OFF 0000                                      _main 0170  
                                    fsr0h 0005                                      fsr1h 0007  
                                    indf0 0000                                      fsr0l 0004  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                         ?_FLASH_WriteBlock 0020  
                           __CFG_BOREN$ON 0000                                      start 0041  
                      ??_FLASH_WriteBlock 0023                             __CFG_MCLRE$ON 0000  
                        ??_uart_send_byte 0073            __size_of_OSCILLATOR_Initialize 0005  
           __end_of_OSCILLATOR_Initialize 05B5                                     ?_main 0070  
                           __CFG_WDTE$OFF 0000                                     _T2CON 001C  
                                   i1l153 04D4                                     _RCREG 0199  
                                   _RCSTA 019D                                     _TRISA 008C  
                                   _TRISC 008E                      EUSART_Receive_ISR@t8 0072  
                                   _TXREG 019A                                     _TXSTA 019E  
                  __end_of_decode_hex_len 0170                                     _Event 007A  
                         _api_write_block 0326                            _WDT_Initialize 05B5  
            __end_of_iap_received_package 042E                                     status 0003  
                                   wtemp0 007E                           _TMR2_StartTimer 05BC  
               decode_xmodem_package@xloc 006F                          __end_of_HexTable 056B  
                         __initialization 0043                            iap_process@ret 00C8  
                            __end_of_main 020D                   __end_of_TMR2_Initialize 055A  
             ?_INTERRUPT_InterruptManager 0070                  _TMR2_SetInterruptHandler 05AA  
                                  ??_main 00C9                   __size_of_FLASH_ReadWord 0019  
                          __CFG_PLLEN$OFF 0000                           ?_decode_hex_len 0070  
                  __end_of_WDT_Initialize 05B9                 FLASH_WriteBlock@writeAddr 0020  
                        __end_of__chr2hex 0455                                    _ANSELA 018C  
                                  _ANSELC 018E                                    _ODCONA 028C  
                                  _ODCONC 028E                                    i1l2350 0018  
                                  i1l2282 0480                                    i1l2358 0023  
                                  _PMADRH 0192                                    _PMADRL 0191  
                                  _PMDATH 0194                                    _PMDATL 0193  
                                  _PMCON2 0196                 __size_of_FLASH_EraseBlock 001C  
                                  _OSCCON 0099               __end_of_uart_received_start 05AA  
                                  _SPBRGH 019C                                    _SPBRGL 019B  
                                  _WDTCON 0097                              m_mem_set@buf 0077  
                            m_mem_set@len 0074                            __CFG_PWRTE$OFF 0000  
                             m_str_h2b@bb 0027                      __size_of_iap_process 006B  
                            _binBufferLen 00B9                            __CFG_STVREN$ON 0000  
                     _EUSART_Transmit_ISR 04BA                   __end_of_api_write_block 0376  
                 FLASH_ReadWord@flashAddr 0073                           ?_WDT_Initialize 0070  
                         _addrWritedFlash 00D1                   __end_of_TMR2_StartTimer 05BF  
TMR2_SetInterruptHandler@InterruptHandler 0073                      ?_EUSART_Transmit_ISR 0070  
                       _SYSTEM_Initialize 057B                   __end_of__initialization 007E  
                              __chr2hex@c 0075                                __chr2hex@h 0074  
                      ?_SYSTEM_Initialize 0070                            __pcstackCOMMON 0070  
                            __pidataBANK1 05B9                       ??_SYSTEM_Initialize 0075  
                              _addrInline 00B4                          ?_TMR2_Initialize 0070  
                    _iap_received_package 03FE                     _decode_xmodem_package 0376  
                          _OPTION_REGbits 0095               FLASH_WriteBlock@GIEBitValue 0076  
               __end_of_SYSTEM_Initialize 058A                     ??_EUSART_Transmit_ISR 0070  
                      __size_of_m_mem_set 0017                                __pbssBANK1 00A0  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
                      api_write_block@buf 002E                        __size_of_m_str_h2b 0056  
             __size_of_EUSART_Receive_ISR 0023                                __pmaintext 0170  
                              __pintentry 0004                                 ?__chr2hex 0070  
                                 _BAUDCON 019F                     ?_iap_received_package 0070  
               __size_of_FLASH_WriteBlock 0058                            _FLASH_ReadWord 04F0  
                        ?_api_write_block 0026                                   _OSCTUNE 0098  
                                 _PPSLOCK 0E0F                          ?_TMR2_StartTimer 0070  
                   __end_of_uart_send_str 047B                          _FLASH_EraseBlock 049E  
                            m_str_h2b@len 0021                ??_TMR2_SetInterruptHandler 0075  
                       __end_of_m_mem_set 0520                                ??__chr2hex 0073  
                  __end_of_FLASH_ReadWord 0509                          ??_decode_hex_len 00BF  
                  ?_decode_xmodem_package 0070                                   __ptext1 020D  
                                 __ptext2 0455                                   __ptext3 03FE  
                                 __ptext4 058A                                   __ptext5 05A4  
                                 __ptext6 0376                                   __ptext7 0082  
                                 __ptext8 02D0                                   __ptext9 042E  
                       __end_of_m_str_h2b 0326                     _OSCILLATOR_Initialize 05B0  
                               _T2CONbits 001C                  ??_PIN_MANAGER_Initialize 0073  
                                 main@t16 00CC                __size_of_SYSTEM_Initialize 000F  
                                 clrloop0 0599                                   main@ret 00CB  
                    end_of_initialization 007E                         _EUSART_Initialize 04D6  
                        decode_hex_len@i8 00C3                        ?_EUSART_Initialize 0070  
                               _RCSTAbits 019D                 FLASH_ReadWord@GIEBitValue 0075  
                  ??_iap_received_package 0074                           ?_FLASH_ReadWord 0073  
                     ??_EUSART_Initialize 0073                          ??_WDT_Initialize 0073  
                 __size_of_uart_send_byte 000E                          __CFG_FOSC$INTOSC 0000  
                               _RXPPSbits 0E15                     api_write_block@binbuf 0028  
               __end_of_EUSART_Initialize 04F0                              _globalTicker 00B0  
                           ??_iap_process 00C6                                 _TXSTAbits 019E  
                       FLASH_WriteBlock@i 0077              __size_of_uart_received_start 0006  
            _TMR2_DefaultInterruptHandler 0000                                m_mem_set@x 0073  
                            _firstPackage 00D3                          _FLASH_WriteBlock 0278  
                  ?_OSCILLATOR_Initialize 0070                       start_initialization 0043  
         __size_of_PIN_MANAGER_Initialize 003F                          __bEusartRxBuffer 2340  
                  iap_received_package@tm 0075                          api_write_block@i 006E  
                        __CFG_LPBOREN$OFF 0000                                m_str_h2b@b 0025  
                              m_str_h2b@h 0020                                m_str_h2b@i 0023  
                              m_str_h2b@s 0026                       __end_of_iap_process 0278  
                             __pdataBANK1 00D1               FLASH_EraseBlock@GIEBitValue 0075  
                __end_of_FLASH_EraseBlock 04BA                              _lengthInline 00BB  
                       __size_of__chr2hex 0027                               __pbssBIGRAM 2340  
             __end_of_EUSART_Transmit_ISR 04D6                       api_write_block@addr 0026  
                             __pbssCOMMON 0078                                 ___latbits 0002  
                           __pcstackBANK0 0020                             __pcstackBANK1 00BF  
                __size_of_TMR2_Initialize 0013                __end_of_EUSART_Receive_ISR 049E  
                               _binBuffer 01A0                __size_of_EUSART_Initialize 001A  
                               __pnvBANK1 00CE                    _PIN_MANAGER_Initialize 03BF  
                 ??_decode_xmodem_package 00C4                              _eusartRxHead 00BD  
                            _eusartTxHead 0078                              _eusartRxTail 00BC  
                        __CFG_PPS1WAY$OFF 0000                              _eusartTxTail 00BE  
            ??_INTERRUPT_InterruptManager 0073                   _eusartTxBufferRemaining 00D0  
                               _m_mem_set 0509                            _uart_send_byte 058A  
                               _m_str_h2b 02D0                          uart_send_str@str 0073  
                __size_of_api_write_block 0050                            _eusartTxBuffer 00A0  
                               clear_ram0 0598                               _iap_process 020D  
                                _PIE1bits 0091                  __size_of_TMR2_StartTimer 0003  
     __size_of_INTERRUPT_InterruptManager 003D                                  _PIR1bits 0011  
               FLASH_EraseBlock@startAddr 0073                          ??_FLASH_ReadWord 0075  
                  __size_of_uart_send_str 0026                    __end_of_uart_send_byte 0598  
                              ?_m_mem_set 0073         __size_of_TMR2_SetInterruptHandler 0006  
               ?_TMR2_SetInterruptHandler 0073                               _isRunInBoot 0FFF  
                     _uart_received_start 05A4                                ?_m_str_h2b 0020  
                                _HexTable 055A                         ??_TMR2_Initialize 0075  
                __end_of_FLASH_WriteBlock 02D0                           __bEusartRxCount 0079  
                    ?_uart_received_start 0070                   ??_OSCILLATOR_Initialize 0073  
                                __chr2hex 042E                           ?_uart_send_byte 0070  
           __size_of_iap_received_package 0030                       _eusartRxIdleTime_ms 00B6  
                                __ptext10 0509                                  __ptext11 0326  
                                __ptext20 03BF                                  __ptext12 0278  
                                __ptext21 05B0                                  __ptext13 049E  
                                __ptext22 04D6                                  __ptext14 04F0  
                                __ptext15 057B                                  __ptext24 04BA  
                                __ptext16 05B5                                  __ptext25 047B  
                                __ptext17 0547                                  __ptext18 05BC  
                                __ptext19 05AA                               _eusartTxLen 00B8  
                 __size_of_decode_hex_len 00EE                             _uart_send_str 0455  
                         uart_send_byte@x 0073                             __size_of_main 009D  
                       ??_api_write_block 0029                                _RA4PPSbits 0E94  
                   ??_uart_received_start 0073                                _RA5PPSbits 0E95  
                                int$flags 007E                                _RC5PPSbits 0EA5  
                           _hexLineBuffer 0120                         ??_TMR2_StartTimer 0073  
      __end_of_INTERRUPT_InterruptManager 0041                _INTERRUPT_InterruptManager 0004  
                       ?_FLASH_EraseBlock 0073               PIN_MANAGER_Initialize@state 0073  
                             ??_m_mem_set 0076                        ??_FLASH_EraseBlock 0075  
                              _INTCONbits 000B                               ??_m_str_h2b 0076  
                 __size_of_WDT_Initialize 0004                            ?_uart_send_str 0073  
                                intlevel1 0000                                _PMCON1bits 0195  
                 ?_PIN_MANAGER_Initialize 0070                         decode_hex_len@t16 00C1  
                       __CFG_CLKOUTEN$OFF 0000                               _PPSLOCKbits 0E0F  
                      _EUSART_Receive_ISR 047B            __size_of_decode_xmodem_package 0049  
           __end_of_decode_xmodem_package 03BF                             __pstringtext1 055A  
                           __pstringtext2 0520                             __pstringtext3 0534  
                           __pstringtext4 056B                             __pstringtext5 0000  
                     ?_EUSART_Receive_ISR 0070              __size_of_EUSART_Transmit_ISR 001C  
          __end_of_PIN_MANAGER_Initialize 03FE                      ??_EUSART_Receive_ISR 0070  
                   _TMR2_InterruptHandler 00CE                              ?_iap_process 0070  
                        _hexLineCharCount 00BA  
