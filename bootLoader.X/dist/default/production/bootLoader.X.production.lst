

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sat Nov 24 14:44:39 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16F1575
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	stringtext4,global,class=STRCODE,delta=2
    10                           	psect	stringtext5,global,class=STRCODE,delta=2
    11                           	psect	cinit,global,class=CODE,merge=1,delta=2
    12                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	intentry,global,class=CODE,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	dabs	1,0x620,32
    48                           	dabs	1,0x5A0,80
    49                           	dabs	1,0x540,48
    50                           	dabs	1,0x2340,0,__bEusartRxBuffer
    51                           	dabs	1,0x7E,2
    52  0000                     
    53                           ; Version 1.42
    54                           ; Generated 13/04/2017 GMT
    55                           ; 
    56                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    57                           ; All rights reserved.
    58                           ; 
    59                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    60                           ; 
    61                           ; Redistribution and use in source and binary forms, with or without modification, are
    62                           ; permitted provided that the following conditions are met:
    63                           ; 
    64                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    65                           ;        conditions and the following disclaimer.
    66                           ; 
    67                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    68                           ;        of conditions and the following disclaimer in the documentation and/or other
    69                           ;        materials provided with the distribution.
    70                           ; 
    71                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    72                           ;        software without specific prior written permission.
    73                           ; 
    74                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    75                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    76                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    77                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    78                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    79                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    80                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    81                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    82                           ; 
    83                           ; 
    84                           ; Code-generator required, PIC16F1575 Definitions
    85                           ; 
    86                           ; SFR Addresses
    87  0000                     	;# 
    88  0001                     	;# 
    89  0002                     	;# 
    90  0003                     	;# 
    91  0004                     	;# 
    92  0005                     	;# 
    93  0006                     	;# 
    94  0007                     	;# 
    95  0008                     	;# 
    96  0009                     	;# 
    97  000A                     	;# 
    98  000B                     	;# 
    99  000C                     	;# 
   100  000E                     	;# 
   101  0011                     	;# 
   102  0012                     	;# 
   103  0013                     	;# 
   104  0015                     	;# 
   105  0016                     	;# 
   106  0016                     	;# 
   107  0017                     	;# 
   108  0018                     	;# 
   109  0019                     	;# 
   110  001A                     	;# 
   111  001B                     	;# 
   112  001C                     	;# 
   113  008C                     	;# 
   114  008E                     	;# 
   115  0091                     	;# 
   116  0092                     	;# 
   117  0093                     	;# 
   118  0095                     	;# 
   119  0096                     	;# 
   120  0097                     	;# 
   121  0098                     	;# 
   122  0099                     	;# 
   123  009A                     	;# 
   124  009B                     	;# 
   125  009B                     	;# 
   126  009C                     	;# 
   127  009D                     	;# 
   128  009E                     	;# 
   129  009F                     	;# 
   130  010C                     	;# 
   131  010E                     	;# 
   132  0111                     	;# 
   133  0112                     	;# 
   134  0113                     	;# 
   135  0114                     	;# 
   136  0115                     	;# 
   137  0116                     	;# 
   138  0117                     	;# 
   139  0118                     	;# 
   140  0119                     	;# 
   141  018C                     	;# 
   142  018E                     	;# 
   143  0191                     	;# 
   144  0191                     	;# 
   145  0192                     	;# 
   146  0193                     	;# 
   147  0193                     	;# 
   148  0194                     	;# 
   149  0195                     	;# 
   150  0196                     	;# 
   151  0197                     	;# 
   152  0199                     	;# 
   153  019A                     	;# 
   154  019B                     	;# 
   155  019B                     	;# 
   156  019C                     	;# 
   157  019D                     	;# 
   158  019E                     	;# 
   159  019F                     	;# 
   160  020C                     	;# 
   161  020E                     	;# 
   162  028C                     	;# 
   163  028E                     	;# 
   164  030C                     	;# 
   165  030E                     	;# 
   166  038C                     	;# 
   167  038E                     	;# 
   168  0391                     	;# 
   169  0392                     	;# 
   170  0393                     	;# 
   171  0397                     	;# 
   172  0398                     	;# 
   173  0399                     	;# 
   174  0691                     	;# 
   175  0692                     	;# 
   176  0693                     	;# 
   177  0694                     	;# 
   178  0695                     	;# 
   179  0D8E                     	;# 
   180  0D8F                     	;# 
   181  0D90                     	;# 
   182  0D91                     	;# 
   183  0D91                     	;# 
   184  0D92                     	;# 
   185  0D93                     	;# 
   186  0D93                     	;# 
   187  0D94                     	;# 
   188  0D95                     	;# 
   189  0D95                     	;# 
   190  0D96                     	;# 
   191  0D97                     	;# 
   192  0D97                     	;# 
   193  0D98                     	;# 
   194  0D99                     	;# 
   195  0D99                     	;# 
   196  0D9A                     	;# 
   197  0D9B                     	;# 
   198  0D9C                     	;# 
   199  0D9C                     	;# 
   200  0D9D                     	;# 
   201  0D9D                     	;# 
   202  0D9E                     	;# 
   203  0D9F                     	;# 
   204  0DA0                     	;# 
   205  0DA1                     	;# 
   206  0DA1                     	;# 
   207  0DA2                     	;# 
   208  0DA3                     	;# 
   209  0DA3                     	;# 
   210  0DA4                     	;# 
   211  0DA5                     	;# 
   212  0DA5                     	;# 
   213  0DA6                     	;# 
   214  0DA7                     	;# 
   215  0DA7                     	;# 
   216  0DA8                     	;# 
   217  0DA9                     	;# 
   218  0DA9                     	;# 
   219  0DAA                     	;# 
   220  0DAB                     	;# 
   221  0DAC                     	;# 
   222  0DAC                     	;# 
   223  0DAD                     	;# 
   224  0DAD                     	;# 
   225  0DAE                     	;# 
   226  0DAF                     	;# 
   227  0DB0                     	;# 
   228  0DB1                     	;# 
   229  0DB1                     	;# 
   230  0DB2                     	;# 
   231  0DB3                     	;# 
   232  0DB3                     	;# 
   233  0DB4                     	;# 
   234  0DB5                     	;# 
   235  0DB5                     	;# 
   236  0DB6                     	;# 
   237  0DB7                     	;# 
   238  0DB7                     	;# 
   239  0DB8                     	;# 
   240  0DB9                     	;# 
   241  0DB9                     	;# 
   242  0DBA                     	;# 
   243  0DBB                     	;# 
   244  0DBC                     	;# 
   245  0DBC                     	;# 
   246  0DBD                     	;# 
   247  0DBD                     	;# 
   248  0DBE                     	;# 
   249  0DBF                     	;# 
   250  0DC0                     	;# 
   251  0DC1                     	;# 
   252  0DC1                     	;# 
   253  0DC2                     	;# 
   254  0DC3                     	;# 
   255  0DC3                     	;# 
   256  0DC4                     	;# 
   257  0DC5                     	;# 
   258  0DC5                     	;# 
   259  0DC6                     	;# 
   260  0DC7                     	;# 
   261  0DC7                     	;# 
   262  0DC8                     	;# 
   263  0DC9                     	;# 
   264  0DC9                     	;# 
   265  0DCA                     	;# 
   266  0DCB                     	;# 
   267  0DCC                     	;# 
   268  0DCC                     	;# 
   269  0DCD                     	;# 
   270  0DCD                     	;# 
   271  0DCE                     	;# 
   272  0DCF                     	;# 
   273  0DD0                     	;# 
   274  0E0F                     	;# 
   275  0E10                     	;# 
   276  0E11                     	;# 
   277  0E12                     	;# 
   278  0E13                     	;# 
   279  0E14                     	;# 
   280  0E15                     	;# 
   281  0E16                     	;# 
   282  0E17                     	;# 
   283  0E90                     	;# 
   284  0E91                     	;# 
   285  0E92                     	;# 
   286  0E94                     	;# 
   287  0E95                     	;# 
   288  0EA0                     	;# 
   289  0EA1                     	;# 
   290  0EA2                     	;# 
   291  0EA3                     	;# 
   292  0EA4                     	;# 
   293  0EA5                     	;# 
   294  0FE4                     	;# 
   295  0FE5                     	;# 
   296  0FE6                     	;# 
   297  0FE7                     	;# 
   298  0FE8                     	;# 
   299  0FE8                     	;# 
   300  0FE9                     	;# 
   301  0FEA                     	;# 
   302  0FEA                     	;# 
   303  0FEB                     	;# 
   304  0FED                     	;# 
   305  0FEE                     	;# 
   306  0FEE                     	;# 
   307  0FEF                     	;# 
   308  0FFF                     	;# 
   309  0000                     	;# 
   310  0001                     	;# 
   311  0002                     	;# 
   312  0003                     	;# 
   313  0004                     	;# 
   314  0005                     	;# 
   315  0006                     	;# 
   316  0007                     	;# 
   317  0008                     	;# 
   318  0009                     	;# 
   319  000A                     	;# 
   320  000B                     	;# 
   321  000C                     	;# 
   322  000E                     	;# 
   323  0011                     	;# 
   324  0012                     	;# 
   325  0013                     	;# 
   326  0015                     	;# 
   327  0016                     	;# 
   328  0016                     	;# 
   329  0017                     	;# 
   330  0018                     	;# 
   331  0019                     	;# 
   332  001A                     	;# 
   333  001B                     	;# 
   334  001C                     	;# 
   335  008C                     	;# 
   336  008E                     	;# 
   337  0091                     	;# 
   338  0092                     	;# 
   339  0093                     	;# 
   340  0095                     	;# 
   341  0096                     	;# 
   342  0097                     	;# 
   343  0098                     	;# 
   344  0099                     	;# 
   345  009A                     	;# 
   346  009B                     	;# 
   347  009B                     	;# 
   348  009C                     	;# 
   349  009D                     	;# 
   350  009E                     	;# 
   351  009F                     	;# 
   352  010C                     	;# 
   353  010E                     	;# 
   354  0111                     	;# 
   355  0112                     	;# 
   356  0113                     	;# 
   357  0114                     	;# 
   358  0115                     	;# 
   359  0116                     	;# 
   360  0117                     	;# 
   361  0118                     	;# 
   362  0119                     	;# 
   363  018C                     	;# 
   364  018E                     	;# 
   365  0191                     	;# 
   366  0191                     	;# 
   367  0192                     	;# 
   368  0193                     	;# 
   369  0193                     	;# 
   370  0194                     	;# 
   371  0195                     	;# 
   372  0196                     	;# 
   373  0197                     	;# 
   374  0199                     	;# 
   375  019A                     	;# 
   376  019B                     	;# 
   377  019B                     	;# 
   378  019C                     	;# 
   379  019D                     	;# 
   380  019E                     	;# 
   381  019F                     	;# 
   382  020C                     	;# 
   383  020E                     	;# 
   384  028C                     	;# 
   385  028E                     	;# 
   386  030C                     	;# 
   387  030E                     	;# 
   388  038C                     	;# 
   389  038E                     	;# 
   390  0391                     	;# 
   391  0392                     	;# 
   392  0393                     	;# 
   393  0397                     	;# 
   394  0398                     	;# 
   395  0399                     	;# 
   396  0691                     	;# 
   397  0692                     	;# 
   398  0693                     	;# 
   399  0694                     	;# 
   400  0695                     	;# 
   401  0D8E                     	;# 
   402  0D8F                     	;# 
   403  0D90                     	;# 
   404  0D91                     	;# 
   405  0D91                     	;# 
   406  0D92                     	;# 
   407  0D93                     	;# 
   408  0D93                     	;# 
   409  0D94                     	;# 
   410  0D95                     	;# 
   411  0D95                     	;# 
   412  0D96                     	;# 
   413  0D97                     	;# 
   414  0D97                     	;# 
   415  0D98                     	;# 
   416  0D99                     	;# 
   417  0D99                     	;# 
   418  0D9A                     	;# 
   419  0D9B                     	;# 
   420  0D9C                     	;# 
   421  0D9C                     	;# 
   422  0D9D                     	;# 
   423  0D9D                     	;# 
   424  0D9E                     	;# 
   425  0D9F                     	;# 
   426  0DA0                     	;# 
   427  0DA1                     	;# 
   428  0DA1                     	;# 
   429  0DA2                     	;# 
   430  0DA3                     	;# 
   431  0DA3                     	;# 
   432  0DA4                     	;# 
   433  0DA5                     	;# 
   434  0DA5                     	;# 
   435  0DA6                     	;# 
   436  0DA7                     	;# 
   437  0DA7                     	;# 
   438  0DA8                     	;# 
   439  0DA9                     	;# 
   440  0DA9                     	;# 
   441  0DAA                     	;# 
   442  0DAB                     	;# 
   443  0DAC                     	;# 
   444  0DAC                     	;# 
   445  0DAD                     	;# 
   446  0DAD                     	;# 
   447  0DAE                     	;# 
   448  0DAF                     	;# 
   449  0DB0                     	;# 
   450  0DB1                     	;# 
   451  0DB1                     	;# 
   452  0DB2                     	;# 
   453  0DB3                     	;# 
   454  0DB3                     	;# 
   455  0DB4                     	;# 
   456  0DB5                     	;# 
   457  0DB5                     	;# 
   458  0DB6                     	;# 
   459  0DB7                     	;# 
   460  0DB7                     	;# 
   461  0DB8                     	;# 
   462  0DB9                     	;# 
   463  0DB9                     	;# 
   464  0DBA                     	;# 
   465  0DBB                     	;# 
   466  0DBC                     	;# 
   467  0DBC                     	;# 
   468  0DBD                     	;# 
   469  0DBD                     	;# 
   470  0DBE                     	;# 
   471  0DBF                     	;# 
   472  0DC0                     	;# 
   473  0DC1                     	;# 
   474  0DC1                     	;# 
   475  0DC2                     	;# 
   476  0DC3                     	;# 
   477  0DC3                     	;# 
   478  0DC4                     	;# 
   479  0DC5                     	;# 
   480  0DC5                     	;# 
   481  0DC6                     	;# 
   482  0DC7                     	;# 
   483  0DC7                     	;# 
   484  0DC8                     	;# 
   485  0DC9                     	;# 
   486  0DC9                     	;# 
   487  0DCA                     	;# 
   488  0DCB                     	;# 
   489  0DCC                     	;# 
   490  0DCC                     	;# 
   491  0DCD                     	;# 
   492  0DCD                     	;# 
   493  0DCE                     	;# 
   494  0DCF                     	;# 
   495  0DD0                     	;# 
   496  0E0F                     	;# 
   497  0E10                     	;# 
   498  0E11                     	;# 
   499  0E12                     	;# 
   500  0E13                     	;# 
   501  0E14                     	;# 
   502  0E15                     	;# 
   503  0E16                     	;# 
   504  0E17                     	;# 
   505  0E90                     	;# 
   506  0E91                     	;# 
   507  0E92                     	;# 
   508  0E94                     	;# 
   509  0E95                     	;# 
   510  0EA0                     	;# 
   511  0EA1                     	;# 
   512  0EA2                     	;# 
   513  0EA3                     	;# 
   514  0EA4                     	;# 
   515  0EA5                     	;# 
   516  0FE4                     	;# 
   517  0FE5                     	;# 
   518  0FE6                     	;# 
   519  0FE7                     	;# 
   520  0FE8                     	;# 
   521  0FE8                     	;# 
   522  0FE9                     	;# 
   523  0FEA                     	;# 
   524  0FEA                     	;# 
   525  0FEB                     	;# 
   526  0FED                     	;# 
   527  0FEE                     	;# 
   528  0FEE                     	;# 
   529  0FEF                     	;# 
   530  0000                     	;# 
   531  0001                     	;# 
   532  0002                     	;# 
   533  0003                     	;# 
   534  0004                     	;# 
   535  0005                     	;# 
   536  0006                     	;# 
   537  0007                     	;# 
   538  0008                     	;# 
   539  0009                     	;# 
   540  000A                     	;# 
   541  000B                     	;# 
   542  000C                     	;# 
   543  000E                     	;# 
   544  0011                     	;# 
   545  0012                     	;# 
   546  0013                     	;# 
   547  0015                     	;# 
   548  0016                     	;# 
   549  0016                     	;# 
   550  0017                     	;# 
   551  0018                     	;# 
   552  0019                     	;# 
   553  001A                     	;# 
   554  001B                     	;# 
   555  001C                     	;# 
   556  008C                     	;# 
   557  008E                     	;# 
   558  0091                     	;# 
   559  0092                     	;# 
   560  0093                     	;# 
   561  0095                     	;# 
   562  0096                     	;# 
   563  0097                     	;# 
   564  0098                     	;# 
   565  0099                     	;# 
   566  009A                     	;# 
   567  009B                     	;# 
   568  009B                     	;# 
   569  009C                     	;# 
   570  009D                     	;# 
   571  009E                     	;# 
   572  009F                     	;# 
   573  010C                     	;# 
   574  010E                     	;# 
   575  0111                     	;# 
   576  0112                     	;# 
   577  0113                     	;# 
   578  0114                     	;# 
   579  0115                     	;# 
   580  0116                     	;# 
   581  0117                     	;# 
   582  0118                     	;# 
   583  0119                     	;# 
   584  018C                     	;# 
   585  018E                     	;# 
   586  0191                     	;# 
   587  0191                     	;# 
   588  0192                     	;# 
   589  0193                     	;# 
   590  0193                     	;# 
   591  0194                     	;# 
   592  0195                     	;# 
   593  0196                     	;# 
   594  0197                     	;# 
   595  0199                     	;# 
   596  019A                     	;# 
   597  019B                     	;# 
   598  019B                     	;# 
   599  019C                     	;# 
   600  019D                     	;# 
   601  019E                     	;# 
   602  019F                     	;# 
   603  020C                     	;# 
   604  020E                     	;# 
   605  028C                     	;# 
   606  028E                     	;# 
   607  030C                     	;# 
   608  030E                     	;# 
   609  038C                     	;# 
   610  038E                     	;# 
   611  0391                     	;# 
   612  0392                     	;# 
   613  0393                     	;# 
   614  0397                     	;# 
   615  0398                     	;# 
   616  0399                     	;# 
   617  0691                     	;# 
   618  0692                     	;# 
   619  0693                     	;# 
   620  0694                     	;# 
   621  0695                     	;# 
   622  0D8E                     	;# 
   623  0D8F                     	;# 
   624  0D90                     	;# 
   625  0D91                     	;# 
   626  0D91                     	;# 
   627  0D92                     	;# 
   628  0D93                     	;# 
   629  0D93                     	;# 
   630  0D94                     	;# 
   631  0D95                     	;# 
   632  0D95                     	;# 
   633  0D96                     	;# 
   634  0D97                     	;# 
   635  0D97                     	;# 
   636  0D98                     	;# 
   637  0D99                     	;# 
   638  0D99                     	;# 
   639  0D9A                     	;# 
   640  0D9B                     	;# 
   641  0D9C                     	;# 
   642  0D9C                     	;# 
   643  0D9D                     	;# 
   644  0D9D                     	;# 
   645  0D9E                     	;# 
   646  0D9F                     	;# 
   647  0DA0                     	;# 
   648  0DA1                     	;# 
   649  0DA1                     	;# 
   650  0DA2                     	;# 
   651  0DA3                     	;# 
   652  0DA3                     	;# 
   653  0DA4                     	;# 
   654  0DA5                     	;# 
   655  0DA5                     	;# 
   656  0DA6                     	;# 
   657  0DA7                     	;# 
   658  0DA7                     	;# 
   659  0DA8                     	;# 
   660  0DA9                     	;# 
   661  0DA9                     	;# 
   662  0DAA                     	;# 
   663  0DAB                     	;# 
   664  0DAC                     	;# 
   665  0DAC                     	;# 
   666  0DAD                     	;# 
   667  0DAD                     	;# 
   668  0DAE                     	;# 
   669  0DAF                     	;# 
   670  0DB0                     	;# 
   671  0DB1                     	;# 
   672  0DB1                     	;# 
   673  0DB2                     	;# 
   674  0DB3                     	;# 
   675  0DB3                     	;# 
   676  0DB4                     	;# 
   677  0DB5                     	;# 
   678  0DB5                     	;# 
   679  0DB6                     	;# 
   680  0DB7                     	;# 
   681  0DB7                     	;# 
   682  0DB8                     	;# 
   683  0DB9                     	;# 
   684  0DB9                     	;# 
   685  0DBA                     	;# 
   686  0DBB                     	;# 
   687  0DBC                     	;# 
   688  0DBC                     	;# 
   689  0DBD                     	;# 
   690  0DBD                     	;# 
   691  0DBE                     	;# 
   692  0DBF                     	;# 
   693  0DC0                     	;# 
   694  0DC1                     	;# 
   695  0DC1                     	;# 
   696  0DC2                     	;# 
   697  0DC3                     	;# 
   698  0DC3                     	;# 
   699  0DC4                     	;# 
   700  0DC5                     	;# 
   701  0DC5                     	;# 
   702  0DC6                     	;# 
   703  0DC7                     	;# 
   704  0DC7                     	;# 
   705  0DC8                     	;# 
   706  0DC9                     	;# 
   707  0DC9                     	;# 
   708  0DCA                     	;# 
   709  0DCB                     	;# 
   710  0DCC                     	;# 
   711  0DCC                     	;# 
   712  0DCD                     	;# 
   713  0DCD                     	;# 
   714  0DCE                     	;# 
   715  0DCF                     	;# 
   716  0DD0                     	;# 
   717  0E0F                     	;# 
   718  0E10                     	;# 
   719  0E11                     	;# 
   720  0E12                     	;# 
   721  0E13                     	;# 
   722  0E14                     	;# 
   723  0E15                     	;# 
   724  0E16                     	;# 
   725  0E17                     	;# 
   726  0E90                     	;# 
   727  0E91                     	;# 
   728  0E92                     	;# 
   729  0E94                     	;# 
   730  0E95                     	;# 
   731  0EA0                     	;# 
   732  0EA1                     	;# 
   733  0EA2                     	;# 
   734  0EA3                     	;# 
   735  0EA4                     	;# 
   736  0EA5                     	;# 
   737  0FE4                     	;# 
   738  0FE5                     	;# 
   739  0FE6                     	;# 
   740  0FE7                     	;# 
   741  0FE8                     	;# 
   742  0FE8                     	;# 
   743  0FE9                     	;# 
   744  0FEA                     	;# 
   745  0FEA                     	;# 
   746  0FEB                     	;# 
   747  0FED                     	;# 
   748  0FEE                     	;# 
   749  0FEE                     	;# 
   750  0FEF                     	;# 
   751  0000                     	;# 
   752  0001                     	;# 
   753  0002                     	;# 
   754  0003                     	;# 
   755  0004                     	;# 
   756  0005                     	;# 
   757  0006                     	;# 
   758  0007                     	;# 
   759  0008                     	;# 
   760  0009                     	;# 
   761  000A                     	;# 
   762  000B                     	;# 
   763  000C                     	;# 
   764  000E                     	;# 
   765  0011                     	;# 
   766  0012                     	;# 
   767  0013                     	;# 
   768  0015                     	;# 
   769  0016                     	;# 
   770  0016                     	;# 
   771  0017                     	;# 
   772  0018                     	;# 
   773  0019                     	;# 
   774  001A                     	;# 
   775  001B                     	;# 
   776  001C                     	;# 
   777  008C                     	;# 
   778  008E                     	;# 
   779  0091                     	;# 
   780  0092                     	;# 
   781  0093                     	;# 
   782  0095                     	;# 
   783  0096                     	;# 
   784  0097                     	;# 
   785  0098                     	;# 
   786  0099                     	;# 
   787  009A                     	;# 
   788  009B                     	;# 
   789  009B                     	;# 
   790  009C                     	;# 
   791  009D                     	;# 
   792  009E                     	;# 
   793  009F                     	;# 
   794  010C                     	;# 
   795  010E                     	;# 
   796  0111                     	;# 
   797  0112                     	;# 
   798  0113                     	;# 
   799  0114                     	;# 
   800  0115                     	;# 
   801  0116                     	;# 
   802  0117                     	;# 
   803  0118                     	;# 
   804  0119                     	;# 
   805  018C                     	;# 
   806  018E                     	;# 
   807  0191                     	;# 
   808  0191                     	;# 
   809  0192                     	;# 
   810  0193                     	;# 
   811  0193                     	;# 
   812  0194                     	;# 
   813  0195                     	;# 
   814  0196                     	;# 
   815  0197                     	;# 
   816  0199                     	;# 
   817  019A                     	;# 
   818  019B                     	;# 
   819  019B                     	;# 
   820  019C                     	;# 
   821  019D                     	;# 
   822  019E                     	;# 
   823  019F                     	;# 
   824  020C                     	;# 
   825  020E                     	;# 
   826  028C                     	;# 
   827  028E                     	;# 
   828  030C                     	;# 
   829  030E                     	;# 
   830  038C                     	;# 
   831  038E                     	;# 
   832  0391                     	;# 
   833  0392                     	;# 
   834  0393                     	;# 
   835  0397                     	;# 
   836  0398                     	;# 
   837  0399                     	;# 
   838  0691                     	;# 
   839  0692                     	;# 
   840  0693                     	;# 
   841  0694                     	;# 
   842  0695                     	;# 
   843  0D8E                     	;# 
   844  0D8F                     	;# 
   845  0D90                     	;# 
   846  0D91                     	;# 
   847  0D91                     	;# 
   848  0D92                     	;# 
   849  0D93                     	;# 
   850  0D93                     	;# 
   851  0D94                     	;# 
   852  0D95                     	;# 
   853  0D95                     	;# 
   854  0D96                     	;# 
   855  0D97                     	;# 
   856  0D97                     	;# 
   857  0D98                     	;# 
   858  0D99                     	;# 
   859  0D99                     	;# 
   860  0D9A                     	;# 
   861  0D9B                     	;# 
   862  0D9C                     	;# 
   863  0D9C                     	;# 
   864  0D9D                     	;# 
   865  0D9D                     	;# 
   866  0D9E                     	;# 
   867  0D9F                     	;# 
   868  0DA0                     	;# 
   869  0DA1                     	;# 
   870  0DA1                     	;# 
   871  0DA2                     	;# 
   872  0DA3                     	;# 
   873  0DA3                     	;# 
   874  0DA4                     	;# 
   875  0DA5                     	;# 
   876  0DA5                     	;# 
   877  0DA6                     	;# 
   878  0DA7                     	;# 
   879  0DA7                     	;# 
   880  0DA8                     	;# 
   881  0DA9                     	;# 
   882  0DA9                     	;# 
   883  0DAA                     	;# 
   884  0DAB                     	;# 
   885  0DAC                     	;# 
   886  0DAC                     	;# 
   887  0DAD                     	;# 
   888  0DAD                     	;# 
   889  0DAE                     	;# 
   890  0DAF                     	;# 
   891  0DB0                     	;# 
   892  0DB1                     	;# 
   893  0DB1                     	;# 
   894  0DB2                     	;# 
   895  0DB3                     	;# 
   896  0DB3                     	;# 
   897  0DB4                     	;# 
   898  0DB5                     	;# 
   899  0DB5                     	;# 
   900  0DB6                     	;# 
   901  0DB7                     	;# 
   902  0DB7                     	;# 
   903  0DB8                     	;# 
   904  0DB9                     	;# 
   905  0DB9                     	;# 
   906  0DBA                     	;# 
   907  0DBB                     	;# 
   908  0DBC                     	;# 
   909  0DBC                     	;# 
   910  0DBD                     	;# 
   911  0DBD                     	;# 
   912  0DBE                     	;# 
   913  0DBF                     	;# 
   914  0DC0                     	;# 
   915  0DC1                     	;# 
   916  0DC1                     	;# 
   917  0DC2                     	;# 
   918  0DC3                     	;# 
   919  0DC3                     	;# 
   920  0DC4                     	;# 
   921  0DC5                     	;# 
   922  0DC5                     	;# 
   923  0DC6                     	;# 
   924  0DC7                     	;# 
   925  0DC7                     	;# 
   926  0DC8                     	;# 
   927  0DC9                     	;# 
   928  0DC9                     	;# 
   929  0DCA                     	;# 
   930  0DCB                     	;# 
   931  0DCC                     	;# 
   932  0DCC                     	;# 
   933  0DCD                     	;# 
   934  0DCD                     	;# 
   935  0DCE                     	;# 
   936  0DCF                     	;# 
   937  0DD0                     	;# 
   938  0E0F                     	;# 
   939  0E10                     	;# 
   940  0E11                     	;# 
   941  0E12                     	;# 
   942  0E13                     	;# 
   943  0E14                     	;# 
   944  0E15                     	;# 
   945  0E16                     	;# 
   946  0E17                     	;# 
   947  0E90                     	;# 
   948  0E91                     	;# 
   949  0E92                     	;# 
   950  0E94                     	;# 
   951  0E95                     	;# 
   952  0EA0                     	;# 
   953  0EA1                     	;# 
   954  0EA2                     	;# 
   955  0EA3                     	;# 
   956  0EA4                     	;# 
   957  0EA5                     	;# 
   958  0FE4                     	;# 
   959  0FE5                     	;# 
   960  0FE6                     	;# 
   961  0FE7                     	;# 
   962  0FE8                     	;# 
   963  0FE8                     	;# 
   964  0FE9                     	;# 
   965  0FEA                     	;# 
   966  0FEA                     	;# 
   967  0FEB                     	;# 
   968  0FED                     	;# 
   969  0FEE                     	;# 
   970  0FEE                     	;# 
   971  0FEF                     	;# 
   972  0FFF                     	;# 
   973  0000                     	;# 
   974  0001                     	;# 
   975  0002                     	;# 
   976  0003                     	;# 
   977  0004                     	;# 
   978  0005                     	;# 
   979  0006                     	;# 
   980  0007                     	;# 
   981  0008                     	;# 
   982  0009                     	;# 
   983  000A                     	;# 
   984  000B                     	;# 
   985  000C                     	;# 
   986  000E                     	;# 
   987  0011                     	;# 
   988  0012                     	;# 
   989  0013                     	;# 
   990  0015                     	;# 
   991  0016                     	;# 
   992  0016                     	;# 
   993  0017                     	;# 
   994  0018                     	;# 
   995  0019                     	;# 
   996  001A                     	;# 
   997  001B                     	;# 
   998  001C                     	;# 
   999  008C                     	;# 
  1000  008E                     	;# 
  1001  0091                     	;# 
  1002  0092                     	;# 
  1003  0093                     	;# 
  1004  0095                     	;# 
  1005  0096                     	;# 
  1006  0097                     	;# 
  1007  0098                     	;# 
  1008  0099                     	;# 
  1009  009A                     	;# 
  1010  009B                     	;# 
  1011  009B                     	;# 
  1012  009C                     	;# 
  1013  009D                     	;# 
  1014  009E                     	;# 
  1015  009F                     	;# 
  1016  010C                     	;# 
  1017  010E                     	;# 
  1018  0111                     	;# 
  1019  0112                     	;# 
  1020  0113                     	;# 
  1021  0114                     	;# 
  1022  0115                     	;# 
  1023  0116                     	;# 
  1024  0117                     	;# 
  1025  0118                     	;# 
  1026  0119                     	;# 
  1027  018C                     	;# 
  1028  018E                     	;# 
  1029  0191                     	;# 
  1030  0191                     	;# 
  1031  0192                     	;# 
  1032  0193                     	;# 
  1033  0193                     	;# 
  1034  0194                     	;# 
  1035  0195                     	;# 
  1036  0196                     	;# 
  1037  0197                     	;# 
  1038  0199                     	;# 
  1039  019A                     	;# 
  1040  019B                     	;# 
  1041  019B                     	;# 
  1042  019C                     	;# 
  1043  019D                     	;# 
  1044  019E                     	;# 
  1045  019F                     	;# 
  1046  020C                     	;# 
  1047  020E                     	;# 
  1048  028C                     	;# 
  1049  028E                     	;# 
  1050  030C                     	;# 
  1051  030E                     	;# 
  1052  038C                     	;# 
  1053  038E                     	;# 
  1054  0391                     	;# 
  1055  0392                     	;# 
  1056  0393                     	;# 
  1057  0397                     	;# 
  1058  0398                     	;# 
  1059  0399                     	;# 
  1060  0691                     	;# 
  1061  0692                     	;# 
  1062  0693                     	;# 
  1063  0694                     	;# 
  1064  0695                     	;# 
  1065  0D8E                     	;# 
  1066  0D8F                     	;# 
  1067  0D90                     	;# 
  1068  0D91                     	;# 
  1069  0D91                     	;# 
  1070  0D92                     	;# 
  1071  0D93                     	;# 
  1072  0D93                     	;# 
  1073  0D94                     	;# 
  1074  0D95                     	;# 
  1075  0D95                     	;# 
  1076  0D96                     	;# 
  1077  0D97                     	;# 
  1078  0D97                     	;# 
  1079  0D98                     	;# 
  1080  0D99                     	;# 
  1081  0D99                     	;# 
  1082  0D9A                     	;# 
  1083  0D9B                     	;# 
  1084  0D9C                     	;# 
  1085  0D9C                     	;# 
  1086  0D9D                     	;# 
  1087  0D9D                     	;# 
  1088  0D9E                     	;# 
  1089  0D9F                     	;# 
  1090  0DA0                     	;# 
  1091  0DA1                     	;# 
  1092  0DA1                     	;# 
  1093  0DA2                     	;# 
  1094  0DA3                     	;# 
  1095  0DA3                     	;# 
  1096  0DA4                     	;# 
  1097  0DA5                     	;# 
  1098  0DA5                     	;# 
  1099  0DA6                     	;# 
  1100  0DA7                     	;# 
  1101  0DA7                     	;# 
  1102  0DA8                     	;# 
  1103  0DA9                     	;# 
  1104  0DA9                     	;# 
  1105  0DAA                     	;# 
  1106  0DAB                     	;# 
  1107  0DAC                     	;# 
  1108  0DAC                     	;# 
  1109  0DAD                     	;# 
  1110  0DAD                     	;# 
  1111  0DAE                     	;# 
  1112  0DAF                     	;# 
  1113  0DB0                     	;# 
  1114  0DB1                     	;# 
  1115  0DB1                     	;# 
  1116  0DB2                     	;# 
  1117  0DB3                     	;# 
  1118  0DB3                     	;# 
  1119  0DB4                     	;# 
  1120  0DB5                     	;# 
  1121  0DB5                     	;# 
  1122  0DB6                     	;# 
  1123  0DB7                     	;# 
  1124  0DB7                     	;# 
  1125  0DB8                     	;# 
  1126  0DB9                     	;# 
  1127  0DB9                     	;# 
  1128  0DBA                     	;# 
  1129  0DBB                     	;# 
  1130  0DBC                     	;# 
  1131  0DBC                     	;# 
  1132  0DBD                     	;# 
  1133  0DBD                     	;# 
  1134  0DBE                     	;# 
  1135  0DBF                     	;# 
  1136  0DC0                     	;# 
  1137  0DC1                     	;# 
  1138  0DC1                     	;# 
  1139  0DC2                     	;# 
  1140  0DC3                     	;# 
  1141  0DC3                     	;# 
  1142  0DC4                     	;# 
  1143  0DC5                     	;# 
  1144  0DC5                     	;# 
  1145  0DC6                     	;# 
  1146  0DC7                     	;# 
  1147  0DC7                     	;# 
  1148  0DC8                     	;# 
  1149  0DC9                     	;# 
  1150  0DC9                     	;# 
  1151  0DCA                     	;# 
  1152  0DCB                     	;# 
  1153  0DCC                     	;# 
  1154  0DCC                     	;# 
  1155  0DCD                     	;# 
  1156  0DCD                     	;# 
  1157  0DCE                     	;# 
  1158  0DCF                     	;# 
  1159  0DD0                     	;# 
  1160  0E0F                     	;# 
  1161  0E10                     	;# 
  1162  0E11                     	;# 
  1163  0E12                     	;# 
  1164  0E13                     	;# 
  1165  0E14                     	;# 
  1166  0E15                     	;# 
  1167  0E16                     	;# 
  1168  0E17                     	;# 
  1169  0E90                     	;# 
  1170  0E91                     	;# 
  1171  0E92                     	;# 
  1172  0E94                     	;# 
  1173  0E95                     	;# 
  1174  0EA0                     	;# 
  1175  0EA1                     	;# 
  1176  0EA2                     	;# 
  1177  0EA3                     	;# 
  1178  0EA4                     	;# 
  1179  0EA5                     	;# 
  1180  0FE4                     	;# 
  1181  0FE5                     	;# 
  1182  0FE6                     	;# 
  1183  0FE7                     	;# 
  1184  0FE8                     	;# 
  1185  0FE8                     	;# 
  1186  0FE9                     	;# 
  1187  0FEA                     	;# 
  1188  0FEA                     	;# 
  1189  0FEB                     	;# 
  1190  0FED                     	;# 
  1191  0FEE                     	;# 
  1192  0FEE                     	;# 
  1193  0FEF                     	;# 
  1194  0000                     	;# 
  1195  0001                     	;# 
  1196  0002                     	;# 
  1197  0003                     	;# 
  1198  0004                     	;# 
  1199  0005                     	;# 
  1200  0006                     	;# 
  1201  0007                     	;# 
  1202  0008                     	;# 
  1203  0009                     	;# 
  1204  000A                     	;# 
  1205  000B                     	;# 
  1206  000C                     	;# 
  1207  000E                     	;# 
  1208  0011                     	;# 
  1209  0012                     	;# 
  1210  0013                     	;# 
  1211  0015                     	;# 
  1212  0016                     	;# 
  1213  0016                     	;# 
  1214  0017                     	;# 
  1215  0018                     	;# 
  1216  0019                     	;# 
  1217  001A                     	;# 
  1218  001B                     	;# 
  1219  001C                     	;# 
  1220  008C                     	;# 
  1221  008E                     	;# 
  1222  0091                     	;# 
  1223  0092                     	;# 
  1224  0093                     	;# 
  1225  0095                     	;# 
  1226  0096                     	;# 
  1227  0097                     	;# 
  1228  0098                     	;# 
  1229  0099                     	;# 
  1230  009A                     	;# 
  1231  009B                     	;# 
  1232  009B                     	;# 
  1233  009C                     	;# 
  1234  009D                     	;# 
  1235  009E                     	;# 
  1236  009F                     	;# 
  1237  010C                     	;# 
  1238  010E                     	;# 
  1239  0111                     	;# 
  1240  0112                     	;# 
  1241  0113                     	;# 
  1242  0114                     	;# 
  1243  0115                     	;# 
  1244  0116                     	;# 
  1245  0117                     	;# 
  1246  0118                     	;# 
  1247  0119                     	;# 
  1248  018C                     	;# 
  1249  018E                     	;# 
  1250  0191                     	;# 
  1251  0191                     	;# 
  1252  0192                     	;# 
  1253  0193                     	;# 
  1254  0193                     	;# 
  1255  0194                     	;# 
  1256  0195                     	;# 
  1257  0196                     	;# 
  1258  0197                     	;# 
  1259  0199                     	;# 
  1260  019A                     	;# 
  1261  019B                     	;# 
  1262  019B                     	;# 
  1263  019C                     	;# 
  1264  019D                     	;# 
  1265  019E                     	;# 
  1266  019F                     	;# 
  1267  020C                     	;# 
  1268  020E                     	;# 
  1269  028C                     	;# 
  1270  028E                     	;# 
  1271  030C                     	;# 
  1272  030E                     	;# 
  1273  038C                     	;# 
  1274  038E                     	;# 
  1275  0391                     	;# 
  1276  0392                     	;# 
  1277  0393                     	;# 
  1278  0397                     	;# 
  1279  0398                     	;# 
  1280  0399                     	;# 
  1281  0691                     	;# 
  1282  0692                     	;# 
  1283  0693                     	;# 
  1284  0694                     	;# 
  1285  0695                     	;# 
  1286  0D8E                     	;# 
  1287  0D8F                     	;# 
  1288  0D90                     	;# 
  1289  0D91                     	;# 
  1290  0D91                     	;# 
  1291  0D92                     	;# 
  1292  0D93                     	;# 
  1293  0D93                     	;# 
  1294  0D94                     	;# 
  1295  0D95                     	;# 
  1296  0D95                     	;# 
  1297  0D96                     	;# 
  1298  0D97                     	;# 
  1299  0D97                     	;# 
  1300  0D98                     	;# 
  1301  0D99                     	;# 
  1302  0D99                     	;# 
  1303  0D9A                     	;# 
  1304  0D9B                     	;# 
  1305  0D9C                     	;# 
  1306  0D9C                     	;# 
  1307  0D9D                     	;# 
  1308  0D9D                     	;# 
  1309  0D9E                     	;# 
  1310  0D9F                     	;# 
  1311  0DA0                     	;# 
  1312  0DA1                     	;# 
  1313  0DA1                     	;# 
  1314  0DA2                     	;# 
  1315  0DA3                     	;# 
  1316  0DA3                     	;# 
  1317  0DA4                     	;# 
  1318  0DA5                     	;# 
  1319  0DA5                     	;# 
  1320  0DA6                     	;# 
  1321  0DA7                     	;# 
  1322  0DA7                     	;# 
  1323  0DA8                     	;# 
  1324  0DA9                     	;# 
  1325  0DA9                     	;# 
  1326  0DAA                     	;# 
  1327  0DAB                     	;# 
  1328  0DAC                     	;# 
  1329  0DAC                     	;# 
  1330  0DAD                     	;# 
  1331  0DAD                     	;# 
  1332  0DAE                     	;# 
  1333  0DAF                     	;# 
  1334  0DB0                     	;# 
  1335  0DB1                     	;# 
  1336  0DB1                     	;# 
  1337  0DB2                     	;# 
  1338  0DB3                     	;# 
  1339  0DB3                     	;# 
  1340  0DB4                     	;# 
  1341  0DB5                     	;# 
  1342  0DB5                     	;# 
  1343  0DB6                     	;# 
  1344  0DB7                     	;# 
  1345  0DB7                     	;# 
  1346  0DB8                     	;# 
  1347  0DB9                     	;# 
  1348  0DB9                     	;# 
  1349  0DBA                     	;# 
  1350  0DBB                     	;# 
  1351  0DBC                     	;# 
  1352  0DBC                     	;# 
  1353  0DBD                     	;# 
  1354  0DBD                     	;# 
  1355  0DBE                     	;# 
  1356  0DBF                     	;# 
  1357  0DC0                     	;# 
  1358  0DC1                     	;# 
  1359  0DC1                     	;# 
  1360  0DC2                     	;# 
  1361  0DC3                     	;# 
  1362  0DC3                     	;# 
  1363  0DC4                     	;# 
  1364  0DC5                     	;# 
  1365  0DC5                     	;# 
  1366  0DC6                     	;# 
  1367  0DC7                     	;# 
  1368  0DC7                     	;# 
  1369  0DC8                     	;# 
  1370  0DC9                     	;# 
  1371  0DC9                     	;# 
  1372  0DCA                     	;# 
  1373  0DCB                     	;# 
  1374  0DCC                     	;# 
  1375  0DCC                     	;# 
  1376  0DCD                     	;# 
  1377  0DCD                     	;# 
  1378  0DCE                     	;# 
  1379  0DCF                     	;# 
  1380  0DD0                     	;# 
  1381  0E0F                     	;# 
  1382  0E10                     	;# 
  1383  0E11                     	;# 
  1384  0E12                     	;# 
  1385  0E13                     	;# 
  1386  0E14                     	;# 
  1387  0E15                     	;# 
  1388  0E16                     	;# 
  1389  0E17                     	;# 
  1390  0E90                     	;# 
  1391  0E91                     	;# 
  1392  0E92                     	;# 
  1393  0E94                     	;# 
  1394  0E95                     	;# 
  1395  0EA0                     	;# 
  1396  0EA1                     	;# 
  1397  0EA2                     	;# 
  1398  0EA3                     	;# 
  1399  0EA4                     	;# 
  1400  0EA5                     	;# 
  1401  0FE4                     	;# 
  1402  0FE5                     	;# 
  1403  0FE6                     	;# 
  1404  0FE7                     	;# 
  1405  0FE8                     	;# 
  1406  0FE8                     	;# 
  1407  0FE9                     	;# 
  1408  0FEA                     	;# 
  1409  0FEA                     	;# 
  1410  0FEB                     	;# 
  1411  0FED                     	;# 
  1412  0FEE                     	;# 
  1413  0FEE                     	;# 
  1414  0FEF                     	;# 
  1415  0000                     	;# 
  1416  0001                     	;# 
  1417  0002                     	;# 
  1418  0003                     	;# 
  1419  0004                     	;# 
  1420  0005                     	;# 
  1421  0006                     	;# 
  1422  0007                     	;# 
  1423  0008                     	;# 
  1424  0009                     	;# 
  1425  000A                     	;# 
  1426  000B                     	;# 
  1427  000C                     	;# 
  1428  000E                     	;# 
  1429  0011                     	;# 
  1430  0012                     	;# 
  1431  0013                     	;# 
  1432  0015                     	;# 
  1433  0016                     	;# 
  1434  0016                     	;# 
  1435  0017                     	;# 
  1436  0018                     	;# 
  1437  0019                     	;# 
  1438  001A                     	;# 
  1439  001B                     	;# 
  1440  001C                     	;# 
  1441  008C                     	;# 
  1442  008E                     	;# 
  1443  0091                     	;# 
  1444  0092                     	;# 
  1445  0093                     	;# 
  1446  0095                     	;# 
  1447  0096                     	;# 
  1448  0097                     	;# 
  1449  0098                     	;# 
  1450  0099                     	;# 
  1451  009A                     	;# 
  1452  009B                     	;# 
  1453  009B                     	;# 
  1454  009C                     	;# 
  1455  009D                     	;# 
  1456  009E                     	;# 
  1457  009F                     	;# 
  1458  010C                     	;# 
  1459  010E                     	;# 
  1460  0111                     	;# 
  1461  0112                     	;# 
  1462  0113                     	;# 
  1463  0114                     	;# 
  1464  0115                     	;# 
  1465  0116                     	;# 
  1466  0117                     	;# 
  1467  0118                     	;# 
  1468  0119                     	;# 
  1469  018C                     	;# 
  1470  018E                     	;# 
  1471  0191                     	;# 
  1472  0191                     	;# 
  1473  0192                     	;# 
  1474  0193                     	;# 
  1475  0193                     	;# 
  1476  0194                     	;# 
  1477  0195                     	;# 
  1478  0196                     	;# 
  1479  0197                     	;# 
  1480  0199                     	;# 
  1481  019A                     	;# 
  1482  019B                     	;# 
  1483  019B                     	;# 
  1484  019C                     	;# 
  1485  019D                     	;# 
  1486  019E                     	;# 
  1487  019F                     	;# 
  1488  020C                     	;# 
  1489  020E                     	;# 
  1490  028C                     	;# 
  1491  028E                     	;# 
  1492  030C                     	;# 
  1493  030E                     	;# 
  1494  038C                     	;# 
  1495  038E                     	;# 
  1496  0391                     	;# 
  1497  0392                     	;# 
  1498  0393                     	;# 
  1499  0397                     	;# 
  1500  0398                     	;# 
  1501  0399                     	;# 
  1502  0691                     	;# 
  1503  0692                     	;# 
  1504  0693                     	;# 
  1505  0694                     	;# 
  1506  0695                     	;# 
  1507  0D8E                     	;# 
  1508  0D8F                     	;# 
  1509  0D90                     	;# 
  1510  0D91                     	;# 
  1511  0D91                     	;# 
  1512  0D92                     	;# 
  1513  0D93                     	;# 
  1514  0D93                     	;# 
  1515  0D94                     	;# 
  1516  0D95                     	;# 
  1517  0D95                     	;# 
  1518  0D96                     	;# 
  1519  0D97                     	;# 
  1520  0D97                     	;# 
  1521  0D98                     	;# 
  1522  0D99                     	;# 
  1523  0D99                     	;# 
  1524  0D9A                     	;# 
  1525  0D9B                     	;# 
  1526  0D9C                     	;# 
  1527  0D9C                     	;# 
  1528  0D9D                     	;# 
  1529  0D9D                     	;# 
  1530  0D9E                     	;# 
  1531  0D9F                     	;# 
  1532  0DA0                     	;# 
  1533  0DA1                     	;# 
  1534  0DA1                     	;# 
  1535  0DA2                     	;# 
  1536  0DA3                     	;# 
  1537  0DA3                     	;# 
  1538  0DA4                     	;# 
  1539  0DA5                     	;# 
  1540  0DA5                     	;# 
  1541  0DA6                     	;# 
  1542  0DA7                     	;# 
  1543  0DA7                     	;# 
  1544  0DA8                     	;# 
  1545  0DA9                     	;# 
  1546  0DA9                     	;# 
  1547  0DAA                     	;# 
  1548  0DAB                     	;# 
  1549  0DAC                     	;# 
  1550  0DAC                     	;# 
  1551  0DAD                     	;# 
  1552  0DAD                     	;# 
  1553  0DAE                     	;# 
  1554  0DAF                     	;# 
  1555  0DB0                     	;# 
  1556  0DB1                     	;# 
  1557  0DB1                     	;# 
  1558  0DB2                     	;# 
  1559  0DB3                     	;# 
  1560  0DB3                     	;# 
  1561  0DB4                     	;# 
  1562  0DB5                     	;# 
  1563  0DB5                     	;# 
  1564  0DB6                     	;# 
  1565  0DB7                     	;# 
  1566  0DB7                     	;# 
  1567  0DB8                     	;# 
  1568  0DB9                     	;# 
  1569  0DB9                     	;# 
  1570  0DBA                     	;# 
  1571  0DBB                     	;# 
  1572  0DBC                     	;# 
  1573  0DBC                     	;# 
  1574  0DBD                     	;# 
  1575  0DBD                     	;# 
  1576  0DBE                     	;# 
  1577  0DBF                     	;# 
  1578  0DC0                     	;# 
  1579  0DC1                     	;# 
  1580  0DC1                     	;# 
  1581  0DC2                     	;# 
  1582  0DC3                     	;# 
  1583  0DC3                     	;# 
  1584  0DC4                     	;# 
  1585  0DC5                     	;# 
  1586  0DC5                     	;# 
  1587  0DC6                     	;# 
  1588  0DC7                     	;# 
  1589  0DC7                     	;# 
  1590  0DC8                     	;# 
  1591  0DC9                     	;# 
  1592  0DC9                     	;# 
  1593  0DCA                     	;# 
  1594  0DCB                     	;# 
  1595  0DCC                     	;# 
  1596  0DCC                     	;# 
  1597  0DCD                     	;# 
  1598  0DCD                     	;# 
  1599  0DCE                     	;# 
  1600  0DCF                     	;# 
  1601  0DD0                     	;# 
  1602  0E0F                     	;# 
  1603  0E10                     	;# 
  1604  0E11                     	;# 
  1605  0E12                     	;# 
  1606  0E13                     	;# 
  1607  0E14                     	;# 
  1608  0E15                     	;# 
  1609  0E16                     	;# 
  1610  0E17                     	;# 
  1611  0E90                     	;# 
  1612  0E91                     	;# 
  1613  0E92                     	;# 
  1614  0E94                     	;# 
  1615  0E95                     	;# 
  1616  0EA0                     	;# 
  1617  0EA1                     	;# 
  1618  0EA2                     	;# 
  1619  0EA3                     	;# 
  1620  0EA4                     	;# 
  1621  0EA5                     	;# 
  1622  0FE4                     	;# 
  1623  0FE5                     	;# 
  1624  0FE6                     	;# 
  1625  0FE7                     	;# 
  1626  0FE8                     	;# 
  1627  0FE8                     	;# 
  1628  0FE9                     	;# 
  1629  0FEA                     	;# 
  1630  0FEA                     	;# 
  1631  0FEB                     	;# 
  1632  0FED                     	;# 
  1633  0FEE                     	;# 
  1634  0FEE                     	;# 
  1635  0FEF                     	;# 
  1636  0FFF                     	;# 
  1637  0000                     	;# 
  1638  0001                     	;# 
  1639  0002                     	;# 
  1640  0003                     	;# 
  1641  0004                     	;# 
  1642  0005                     	;# 
  1643  0006                     	;# 
  1644  0007                     	;# 
  1645  0008                     	;# 
  1646  0009                     	;# 
  1647  000A                     	;# 
  1648  000B                     	;# 
  1649  000C                     	;# 
  1650  000E                     	;# 
  1651  0011                     	;# 
  1652  0012                     	;# 
  1653  0013                     	;# 
  1654  0015                     	;# 
  1655  0016                     	;# 
  1656  0016                     	;# 
  1657  0017                     	;# 
  1658  0018                     	;# 
  1659  0019                     	;# 
  1660  001A                     	;# 
  1661  001B                     	;# 
  1662  001C                     	;# 
  1663  008C                     	;# 
  1664  008E                     	;# 
  1665  0091                     	;# 
  1666  0092                     	;# 
  1667  0093                     	;# 
  1668  0095                     	;# 
  1669  0096                     	;# 
  1670  0097                     	;# 
  1671  0098                     	;# 
  1672  0099                     	;# 
  1673  009A                     	;# 
  1674  009B                     	;# 
  1675  009B                     	;# 
  1676  009C                     	;# 
  1677  009D                     	;# 
  1678  009E                     	;# 
  1679  009F                     	;# 
  1680  010C                     	;# 
  1681  010E                     	;# 
  1682  0111                     	;# 
  1683  0112                     	;# 
  1684  0113                     	;# 
  1685  0114                     	;# 
  1686  0115                     	;# 
  1687  0116                     	;# 
  1688  0117                     	;# 
  1689  0118                     	;# 
  1690  0119                     	;# 
  1691  018C                     	;# 
  1692  018E                     	;# 
  1693  0191                     	;# 
  1694  0191                     	;# 
  1695  0192                     	;# 
  1696  0193                     	;# 
  1697  0193                     	;# 
  1698  0194                     	;# 
  1699  0195                     	;# 
  1700  0196                     	;# 
  1701  0197                     	;# 
  1702  0199                     	;# 
  1703  019A                     	;# 
  1704  019B                     	;# 
  1705  019B                     	;# 
  1706  019C                     	;# 
  1707  019D                     	;# 
  1708  019E                     	;# 
  1709  019F                     	;# 
  1710  020C                     	;# 
  1711  020E                     	;# 
  1712  028C                     	;# 
  1713  028E                     	;# 
  1714  030C                     	;# 
  1715  030E                     	;# 
  1716  038C                     	;# 
  1717  038E                     	;# 
  1718  0391                     	;# 
  1719  0392                     	;# 
  1720  0393                     	;# 
  1721  0397                     	;# 
  1722  0398                     	;# 
  1723  0399                     	;# 
  1724  0691                     	;# 
  1725  0692                     	;# 
  1726  0693                     	;# 
  1727  0694                     	;# 
  1728  0695                     	;# 
  1729  0D8E                     	;# 
  1730  0D8F                     	;# 
  1731  0D90                     	;# 
  1732  0D91                     	;# 
  1733  0D91                     	;# 
  1734  0D92                     	;# 
  1735  0D93                     	;# 
  1736  0D93                     	;# 
  1737  0D94                     	;# 
  1738  0D95                     	;# 
  1739  0D95                     	;# 
  1740  0D96                     	;# 
  1741  0D97                     	;# 
  1742  0D97                     	;# 
  1743  0D98                     	;# 
  1744  0D99                     	;# 
  1745  0D99                     	;# 
  1746  0D9A                     	;# 
  1747  0D9B                     	;# 
  1748  0D9C                     	;# 
  1749  0D9C                     	;# 
  1750  0D9D                     	;# 
  1751  0D9D                     	;# 
  1752  0D9E                     	;# 
  1753  0D9F                     	;# 
  1754  0DA0                     	;# 
  1755  0DA1                     	;# 
  1756  0DA1                     	;# 
  1757  0DA2                     	;# 
  1758  0DA3                     	;# 
  1759  0DA3                     	;# 
  1760  0DA4                     	;# 
  1761  0DA5                     	;# 
  1762  0DA5                     	;# 
  1763  0DA6                     	;# 
  1764  0DA7                     	;# 
  1765  0DA7                     	;# 
  1766  0DA8                     	;# 
  1767  0DA9                     	;# 
  1768  0DA9                     	;# 
  1769  0DAA                     	;# 
  1770  0DAB                     	;# 
  1771  0DAC                     	;# 
  1772  0DAC                     	;# 
  1773  0DAD                     	;# 
  1774  0DAD                     	;# 
  1775  0DAE                     	;# 
  1776  0DAF                     	;# 
  1777  0DB0                     	;# 
  1778  0DB1                     	;# 
  1779  0DB1                     	;# 
  1780  0DB2                     	;# 
  1781  0DB3                     	;# 
  1782  0DB3                     	;# 
  1783  0DB4                     	;# 
  1784  0DB5                     	;# 
  1785  0DB5                     	;# 
  1786  0DB6                     	;# 
  1787  0DB7                     	;# 
  1788  0DB7                     	;# 
  1789  0DB8                     	;# 
  1790  0DB9                     	;# 
  1791  0DB9                     	;# 
  1792  0DBA                     	;# 
  1793  0DBB                     	;# 
  1794  0DBC                     	;# 
  1795  0DBC                     	;# 
  1796  0DBD                     	;# 
  1797  0DBD                     	;# 
  1798  0DBE                     	;# 
  1799  0DBF                     	;# 
  1800  0DC0                     	;# 
  1801  0DC1                     	;# 
  1802  0DC1                     	;# 
  1803  0DC2                     	;# 
  1804  0DC3                     	;# 
  1805  0DC3                     	;# 
  1806  0DC4                     	;# 
  1807  0DC5                     	;# 
  1808  0DC5                     	;# 
  1809  0DC6                     	;# 
  1810  0DC7                     	;# 
  1811  0DC7                     	;# 
  1812  0DC8                     	;# 
  1813  0DC9                     	;# 
  1814  0DC9                     	;# 
  1815  0DCA                     	;# 
  1816  0DCB                     	;# 
  1817  0DCC                     	;# 
  1818  0DCC                     	;# 
  1819  0DCD                     	;# 
  1820  0DCD                     	;# 
  1821  0DCE                     	;# 
  1822  0DCF                     	;# 
  1823  0DD0                     	;# 
  1824  0E0F                     	;# 
  1825  0E10                     	;# 
  1826  0E11                     	;# 
  1827  0E12                     	;# 
  1828  0E13                     	;# 
  1829  0E14                     	;# 
  1830  0E15                     	;# 
  1831  0E16                     	;# 
  1832  0E17                     	;# 
  1833  0E90                     	;# 
  1834  0E91                     	;# 
  1835  0E92                     	;# 
  1836  0E94                     	;# 
  1837  0E95                     	;# 
  1838  0EA0                     	;# 
  1839  0EA1                     	;# 
  1840  0EA2                     	;# 
  1841  0EA3                     	;# 
  1842  0EA4                     	;# 
  1843  0EA5                     	;# 
  1844  0FE4                     	;# 
  1845  0FE5                     	;# 
  1846  0FE6                     	;# 
  1847  0FE7                     	;# 
  1848  0FE8                     	;# 
  1849  0FE8                     	;# 
  1850  0FE9                     	;# 
  1851  0FEA                     	;# 
  1852  0FEA                     	;# 
  1853  0FEB                     	;# 
  1854  0FED                     	;# 
  1855  0FEE                     	;# 
  1856  0FEE                     	;# 
  1857  0FEF                     	;# 
  1858  0FFF                     	;# 
  1859  0000                     	;# 
  1860  0001                     	;# 
  1861  0002                     	;# 
  1862  0003                     	;# 
  1863  0004                     	;# 
  1864  0005                     	;# 
  1865  0006                     	;# 
  1866  0007                     	;# 
  1867  0008                     	;# 
  1868  0009                     	;# 
  1869  000A                     	;# 
  1870  000B                     	;# 
  1871  000C                     	;# 
  1872  000E                     	;# 
  1873  0011                     	;# 
  1874  0012                     	;# 
  1875  0013                     	;# 
  1876  0015                     	;# 
  1877  0016                     	;# 
  1878  0016                     	;# 
  1879  0017                     	;# 
  1880  0018                     	;# 
  1881  0019                     	;# 
  1882  001A                     	;# 
  1883  001B                     	;# 
  1884  001C                     	;# 
  1885  008C                     	;# 
  1886  008E                     	;# 
  1887  0091                     	;# 
  1888  0092                     	;# 
  1889  0093                     	;# 
  1890  0095                     	;# 
  1891  0096                     	;# 
  1892  0097                     	;# 
  1893  0098                     	;# 
  1894  0099                     	;# 
  1895  009A                     	;# 
  1896  009B                     	;# 
  1897  009B                     	;# 
  1898  009C                     	;# 
  1899  009D                     	;# 
  1900  009E                     	;# 
  1901  009F                     	;# 
  1902  010C                     	;# 
  1903  010E                     	;# 
  1904  0111                     	;# 
  1905  0112                     	;# 
  1906  0113                     	;# 
  1907  0114                     	;# 
  1908  0115                     	;# 
  1909  0116                     	;# 
  1910  0117                     	;# 
  1911  0118                     	;# 
  1912  0119                     	;# 
  1913  018C                     	;# 
  1914  018E                     	;# 
  1915  0191                     	;# 
  1916  0191                     	;# 
  1917  0192                     	;# 
  1918  0193                     	;# 
  1919  0193                     	;# 
  1920  0194                     	;# 
  1921  0195                     	;# 
  1922  0196                     	;# 
  1923  0197                     	;# 
  1924  0199                     	;# 
  1925  019A                     	;# 
  1926  019B                     	;# 
  1927  019B                     	;# 
  1928  019C                     	;# 
  1929  019D                     	;# 
  1930  019E                     	;# 
  1931  019F                     	;# 
  1932  020C                     	;# 
  1933  020E                     	;# 
  1934  028C                     	;# 
  1935  028E                     	;# 
  1936  030C                     	;# 
  1937  030E                     	;# 
  1938  038C                     	;# 
  1939  038E                     	;# 
  1940  0391                     	;# 
  1941  0392                     	;# 
  1942  0393                     	;# 
  1943  0397                     	;# 
  1944  0398                     	;# 
  1945  0399                     	;# 
  1946  0691                     	;# 
  1947  0692                     	;# 
  1948  0693                     	;# 
  1949  0694                     	;# 
  1950  0695                     	;# 
  1951  0D8E                     	;# 
  1952  0D8F                     	;# 
  1953  0D90                     	;# 
  1954  0D91                     	;# 
  1955  0D91                     	;# 
  1956  0D92                     	;# 
  1957  0D93                     	;# 
  1958  0D93                     	;# 
  1959  0D94                     	;# 
  1960  0D95                     	;# 
  1961  0D95                     	;# 
  1962  0D96                     	;# 
  1963  0D97                     	;# 
  1964  0D97                     	;# 
  1965  0D98                     	;# 
  1966  0D99                     	;# 
  1967  0D99                     	;# 
  1968  0D9A                     	;# 
  1969  0D9B                     	;# 
  1970  0D9C                     	;# 
  1971  0D9C                     	;# 
  1972  0D9D                     	;# 
  1973  0D9D                     	;# 
  1974  0D9E                     	;# 
  1975  0D9F                     	;# 
  1976  0DA0                     	;# 
  1977  0DA1                     	;# 
  1978  0DA1                     	;# 
  1979  0DA2                     	;# 
  1980  0DA3                     	;# 
  1981  0DA3                     	;# 
  1982  0DA4                     	;# 
  1983  0DA5                     	;# 
  1984  0DA5                     	;# 
  1985  0DA6                     	;# 
  1986  0DA7                     	;# 
  1987  0DA7                     	;# 
  1988  0DA8                     	;# 
  1989  0DA9                     	;# 
  1990  0DA9                     	;# 
  1991  0DAA                     	;# 
  1992  0DAB                     	;# 
  1993  0DAC                     	;# 
  1994  0DAC                     	;# 
  1995  0DAD                     	;# 
  1996  0DAD                     	;# 
  1997  0DAE                     	;# 
  1998  0DAF                     	;# 
  1999  0DB0                     	;# 
  2000  0DB1                     	;# 
  2001  0DB1                     	;# 
  2002  0DB2                     	;# 
  2003  0DB3                     	;# 
  2004  0DB3                     	;# 
  2005  0DB4                     	;# 
  2006  0DB5                     	;# 
  2007  0DB5                     	;# 
  2008  0DB6                     	;# 
  2009  0DB7                     	;# 
  2010  0DB7                     	;# 
  2011  0DB8                     	;# 
  2012  0DB9                     	;# 
  2013  0DB9                     	;# 
  2014  0DBA                     	;# 
  2015  0DBB                     	;# 
  2016  0DBC                     	;# 
  2017  0DBC                     	;# 
  2018  0DBD                     	;# 
  2019  0DBD                     	;# 
  2020  0DBE                     	;# 
  2021  0DBF                     	;# 
  2022  0DC0                     	;# 
  2023  0DC1                     	;# 
  2024  0DC1                     	;# 
  2025  0DC2                     	;# 
  2026  0DC3                     	;# 
  2027  0DC3                     	;# 
  2028  0DC4                     	;# 
  2029  0DC5                     	;# 
  2030  0DC5                     	;# 
  2031  0DC6                     	;# 
  2032  0DC7                     	;# 
  2033  0DC7                     	;# 
  2034  0DC8                     	;# 
  2035  0DC9                     	;# 
  2036  0DC9                     	;# 
  2037  0DCA                     	;# 
  2038  0DCB                     	;# 
  2039  0DCC                     	;# 
  2040  0DCC                     	;# 
  2041  0DCD                     	;# 
  2042  0DCD                     	;# 
  2043  0DCE                     	;# 
  2044  0DCF                     	;# 
  2045  0DD0                     	;# 
  2046  0E0F                     	;# 
  2047  0E10                     	;# 
  2048  0E11                     	;# 
  2049  0E12                     	;# 
  2050  0E13                     	;# 
  2051  0E14                     	;# 
  2052  0E15                     	;# 
  2053  0E16                     	;# 
  2054  0E17                     	;# 
  2055  0E90                     	;# 
  2056  0E91                     	;# 
  2057  0E92                     	;# 
  2058  0E94                     	;# 
  2059  0E95                     	;# 
  2060  0EA0                     	;# 
  2061  0EA1                     	;# 
  2062  0EA2                     	;# 
  2063  0EA3                     	;# 
  2064  0EA4                     	;# 
  2065  0EA5                     	;# 
  2066  0FE4                     	;# 
  2067  0FE5                     	;# 
  2068  0FE6                     	;# 
  2069  0FE7                     	;# 
  2070  0FE8                     	;# 
  2071  0FE8                     	;# 
  2072  0FE9                     	;# 
  2073  0FEA                     	;# 
  2074  0FEA                     	;# 
  2075  0FEB                     	;# 
  2076  0FED                     	;# 
  2077  0FEE                     	;# 
  2078  0FEE                     	;# 
  2079  0FEF                     	;# 
  2080  0FFF                     	;# 
  2081  0000                     	;# 
  2082  0001                     	;# 
  2083  0002                     	;# 
  2084  0003                     	;# 
  2085  0004                     	;# 
  2086  0005                     	;# 
  2087  0006                     	;# 
  2088  0007                     	;# 
  2089  0008                     	;# 
  2090  0009                     	;# 
  2091  000A                     	;# 
  2092  000B                     	;# 
  2093  000C                     	;# 
  2094  000E                     	;# 
  2095  0011                     	;# 
  2096  0012                     	;# 
  2097  0013                     	;# 
  2098  0015                     	;# 
  2099  0016                     	;# 
  2100  0016                     	;# 
  2101  0017                     	;# 
  2102  0018                     	;# 
  2103  0019                     	;# 
  2104  001A                     	;# 
  2105  001B                     	;# 
  2106  001C                     	;# 
  2107  008C                     	;# 
  2108  008E                     	;# 
  2109  0091                     	;# 
  2110  0092                     	;# 
  2111  0093                     	;# 
  2112  0095                     	;# 
  2113  0096                     	;# 
  2114  0097                     	;# 
  2115  0098                     	;# 
  2116  0099                     	;# 
  2117  009A                     	;# 
  2118  009B                     	;# 
  2119  009B                     	;# 
  2120  009C                     	;# 
  2121  009D                     	;# 
  2122  009E                     	;# 
  2123  009F                     	;# 
  2124  010C                     	;# 
  2125  010E                     	;# 
  2126  0111                     	;# 
  2127  0112                     	;# 
  2128  0113                     	;# 
  2129  0114                     	;# 
  2130  0115                     	;# 
  2131  0116                     	;# 
  2132  0117                     	;# 
  2133  0118                     	;# 
  2134  0119                     	;# 
  2135  018C                     	;# 
  2136  018E                     	;# 
  2137  0191                     	;# 
  2138  0191                     	;# 
  2139  0192                     	;# 
  2140  0193                     	;# 
  2141  0193                     	;# 
  2142  0194                     	;# 
  2143  0195                     	;# 
  2144  0196                     	;# 
  2145  0197                     	;# 
  2146  0199                     	;# 
  2147  019A                     	;# 
  2148  019B                     	;# 
  2149  019B                     	;# 
  2150  019C                     	;# 
  2151  019D                     	;# 
  2152  019E                     	;# 
  2153  019F                     	;# 
  2154  020C                     	;# 
  2155  020E                     	;# 
  2156  028C                     	;# 
  2157  028E                     	;# 
  2158  030C                     	;# 
  2159  030E                     	;# 
  2160  038C                     	;# 
  2161  038E                     	;# 
  2162  0391                     	;# 
  2163  0392                     	;# 
  2164  0393                     	;# 
  2165  0397                     	;# 
  2166  0398                     	;# 
  2167  0399                     	;# 
  2168  0691                     	;# 
  2169  0692                     	;# 
  2170  0693                     	;# 
  2171  0694                     	;# 
  2172  0695                     	;# 
  2173  0D8E                     	;# 
  2174  0D8F                     	;# 
  2175  0D90                     	;# 
  2176  0D91                     	;# 
  2177  0D91                     	;# 
  2178  0D92                     	;# 
  2179  0D93                     	;# 
  2180  0D93                     	;# 
  2181  0D94                     	;# 
  2182  0D95                     	;# 
  2183  0D95                     	;# 
  2184  0D96                     	;# 
  2185  0D97                     	;# 
  2186  0D97                     	;# 
  2187  0D98                     	;# 
  2188  0D99                     	;# 
  2189  0D99                     	;# 
  2190  0D9A                     	;# 
  2191  0D9B                     	;# 
  2192  0D9C                     	;# 
  2193  0D9C                     	;# 
  2194  0D9D                     	;# 
  2195  0D9D                     	;# 
  2196  0D9E                     	;# 
  2197  0D9F                     	;# 
  2198  0DA0                     	;# 
  2199  0DA1                     	;# 
  2200  0DA1                     	;# 
  2201  0DA2                     	;# 
  2202  0DA3                     	;# 
  2203  0DA3                     	;# 
  2204  0DA4                     	;# 
  2205  0DA5                     	;# 
  2206  0DA5                     	;# 
  2207  0DA6                     	;# 
  2208  0DA7                     	;# 
  2209  0DA7                     	;# 
  2210  0DA8                     	;# 
  2211  0DA9                     	;# 
  2212  0DA9                     	;# 
  2213  0DAA                     	;# 
  2214  0DAB                     	;# 
  2215  0DAC                     	;# 
  2216  0DAC                     	;# 
  2217  0DAD                     	;# 
  2218  0DAD                     	;# 
  2219  0DAE                     	;# 
  2220  0DAF                     	;# 
  2221  0DB0                     	;# 
  2222  0DB1                     	;# 
  2223  0DB1                     	;# 
  2224  0DB2                     	;# 
  2225  0DB3                     	;# 
  2226  0DB3                     	;# 
  2227  0DB4                     	;# 
  2228  0DB5                     	;# 
  2229  0DB5                     	;# 
  2230  0DB6                     	;# 
  2231  0DB7                     	;# 
  2232  0DB7                     	;# 
  2233  0DB8                     	;# 
  2234  0DB9                     	;# 
  2235  0DB9                     	;# 
  2236  0DBA                     	;# 
  2237  0DBB                     	;# 
  2238  0DBC                     	;# 
  2239  0DBC                     	;# 
  2240  0DBD                     	;# 
  2241  0DBD                     	;# 
  2242  0DBE                     	;# 
  2243  0DBF                     	;# 
  2244  0DC0                     	;# 
  2245  0DC1                     	;# 
  2246  0DC1                     	;# 
  2247  0DC2                     	;# 
  2248  0DC3                     	;# 
  2249  0DC3                     	;# 
  2250  0DC4                     	;# 
  2251  0DC5                     	;# 
  2252  0DC5                     	;# 
  2253  0DC6                     	;# 
  2254  0DC7                     	;# 
  2255  0DC7                     	;# 
  2256  0DC8                     	;# 
  2257  0DC9                     	;# 
  2258  0DC9                     	;# 
  2259  0DCA                     	;# 
  2260  0DCB                     	;# 
  2261  0DCC                     	;# 
  2262  0DCC                     	;# 
  2263  0DCD                     	;# 
  2264  0DCD                     	;# 
  2265  0DCE                     	;# 
  2266  0DCF                     	;# 
  2267  0DD0                     	;# 
  2268  0E0F                     	;# 
  2269  0E10                     	;# 
  2270  0E11                     	;# 
  2271  0E12                     	;# 
  2272  0E13                     	;# 
  2273  0E14                     	;# 
  2274  0E15                     	;# 
  2275  0E16                     	;# 
  2276  0E17                     	;# 
  2277  0E90                     	;# 
  2278  0E91                     	;# 
  2279  0E92                     	;# 
  2280  0E94                     	;# 
  2281  0E95                     	;# 
  2282  0EA0                     	;# 
  2283  0EA1                     	;# 
  2284  0EA2                     	;# 
  2285  0EA3                     	;# 
  2286  0EA4                     	;# 
  2287  0EA5                     	;# 
  2288  0FE4                     	;# 
  2289  0FE5                     	;# 
  2290  0FE6                     	;# 
  2291  0FE7                     	;# 
  2292  0FE8                     	;# 
  2293  0FE8                     	;# 
  2294  0FE9                     	;# 
  2295  0FEA                     	;# 
  2296  0FEA                     	;# 
  2297  0FEB                     	;# 
  2298  0FED                     	;# 
  2299  0FEE                     	;# 
  2300  0FEE                     	;# 
  2301  0FEF                     	;# 
  2302  0FFF                     	;__bEusartRxBuffer
  2303                           
  2304 ;; Function _TMR2_DefaultInterruptHandler is unused but had its address taken
  2305  0000                     
  2306                           	psect	idataBANK1
  2307  05DC                     __pidataBANK1:	
  2308                           
  2309                           ;initializer for _addrWritedFlash
  2310  05DC  3400               	retlw	0
  2311  05DD  3408               	retlw	8
  2312                           
  2313                           ;initializer for _firstPackage
  2314  05DE  3401               	retlw	1
  2315                           
  2316                           	psect	stringtext1
  2317  057D                     __pstringtext1:	
  2318  057D                     _HexTable:	
  2319  057D  3430               	retlw	48
  2320  057E  3431               	retlw	49
  2321  057F  3432               	retlw	50
  2322  0580  3433               	retlw	51
  2323  0581  3434               	retlw	52
  2324  0582  3435               	retlw	53
  2325  0583  3436               	retlw	54
  2326  0584  3437               	retlw	55
  2327  0585  3438               	retlw	56
  2328  0586  3439               	retlw	57
  2329  0587  3441               	retlw	65
  2330  0588  3442               	retlw	66
  2331  0589  3443               	retlw	67
  2332  058A  3444               	retlw	68
  2333  058B  3445               	retlw	69
  2334  058C  3446               	retlw	70
  2335  058D  3400               	retlw	0
  2336  058E                     __end_of_HexTable:	
  2337  0FFF                     _isRunInBoot	set	4095
  2338                           
  2339                           	psect	nvBANK1
  2340  00BE                     __pnvBANK1:	
  2341  00BE                     _TMR2_InterruptHandler:	
  2342  00BE                     	ds	2
  2343  00C0                     _eusartTxBufferRemaining:	
  2344  00C0                     	ds	1
  2345  001C                     _T2CONbits	set	28
  2346  001A                     _TMR2	set	26
  2347  001B                     _PR2	set	27
  2348  001C                     _T2CON	set	28
  2349  0011                     _PIR1bits	set	17
  2350  000B                     _INTCONbits	set	11
  2351  005F                     _GIE	set	95
  2352  0097                     _WDTCON	set	151
  2353  0098                     _OSCTUNE	set	152
  2354  0099                     _OSCCON	set	153
  2355  0095                     _OPTION_REGbits	set	149
  2356  008E                     _TRISC	set	142
  2357  008C                     _TRISA	set	140
  2358  0091                     _PIE1bits	set	145
  2359  010E                     _LATC	set	270
  2360  010C                     _LATA	set	268
  2361  019E                     _TXSTAbits	set	414
  2362  0196                     _PMCON2	set	406
  2363  0193                     _PMDATL	set	403
  2364  0194                     _PMDATH	set	404
  2365  0195                     _PMCON1bits	set	405
  2366  0192                     _PMADRH	set	402
  2367  0191                     _PMADRL	set	401
  2368  0199                     _RCREG	set	409
  2369  019D                     _RCSTAbits	set	413
  2370  019A                     _TXREG	set	410
  2371  019C                     _SPBRGH	set	412
  2372  019B                     _SPBRGL	set	411
  2373  019E                     _TXSTA	set	414
  2374  019D                     _RCSTA	set	413
  2375  019F                     _BAUDCON	set	415
  2376  018C                     _ANSELA	set	396
  2377  018E                     _ANSELC	set	398
  2378  020E                     _WPUC	set	526
  2379  020C                     _WPUA	set	524
  2380  028E                     _ODCONC	set	654
  2381  028C                     _ODCONA	set	652
  2382  0E15                     _RXPPSbits	set	3605
  2383  0E0F                     _PPSLOCKbits	set	3599
  2384  0E0F                     _PPSLOCK	set	3599
  2385  0EA5                     _RC5PPSbits	set	3749
  2386  0E95                     _RA5PPSbits	set	3733
  2387  0E94                     _RA4PPSbits	set	3732
  2388                           
  2389                           	psect	stringtext2
  2390  0543                     __pstringtext2:	
  2391  0543                     STR_3:	
  2392  0543  3475               	retlw	117	;'u'
  2393  0544  3470               	retlw	112	;'p'
  2394  0545  3464               	retlw	100	;'d'
  2395  0546  3461               	retlw	97	;'a'
  2396  0547  3474               	retlw	116	;'t'
  2397  0548  3465               	retlw	101	;'e'
  2398  0549  3420               	retlw	32	;' '
  2399  054A  3461               	retlw	97	;'a'
  2400  054B  3470               	retlw	112	;'p'
  2401  054C  3470               	retlw	112	;'p'
  2402  054D  3420               	retlw	32	;' '
  2403  054E  3466               	retlw	102	;'f'
  2404  054F  3477               	retlw	119	;'w'
  2405  0550  343F               	retlw	63	;'?'
  2406  0551  3479               	retlw	121	;'y'
  2407  0552  342F               	retlw	47	;'/'
  2408  0553  346E               	retlw	110	;'n'
  2409  0554  340D               	retlw	13
  2410  0555  340A               	retlw	10
  2411  0556  3400               	retlw	0
  2412                           
  2413                           	psect	stringtext3
  2414  0557                     __pstringtext3:	
  2415  0557                     STR_1:	
  2416  0557  3473               	retlw	115	;'s'
  2417  0558  3465               	retlw	101	;'e'
  2418  0559  346E               	retlw	110	;'n'
  2419  055A  3464               	retlw	100	;'d'
  2420  055B  3420               	retlw	32	;' '
  2421  055C  342A               	retlw	42	;'*'
  2422  055D  342E               	retlw	46	;'.'
  2423  055E  3468               	retlw	104	;'h'
  2424  055F  3465               	retlw	101	;'e'
  2425  0560  3478               	retlw	120	;'x'
  2426  0561  3420               	retlw	32	;' '
  2427  0562  3466               	retlw	102	;'f'
  2428  0563  3469               	retlw	105	;'i'
  2429  0564  346C               	retlw	108	;'l'
  2430  0565  3465               	retlw	101	;'e'
  2431  0566  342E               	retlw	46	;'.'
  2432  0567  340D               	retlw	13
  2433  0568  340A               	retlw	10
  2434  0569  3400               	retlw	0
  2435                           
  2436                           	psect	stringtext4
  2437  058E                     __pstringtext4:	
  2438  058E                     STR_2:	
  2439  058E  3462               	retlw	98	;'b'
  2440  058F  346F               	retlw	111	;'o'
  2441  0590  346F               	retlw	111	;'o'
  2442  0591  3474               	retlw	116	;'t'
  2443  0592  346C               	retlw	108	;'l'
  2444  0593  3461               	retlw	97	;'a'
  2445  0594  346F               	retlw	111	;'o'
  2446  0595  3464               	retlw	100	;'d'
  2447  0596  3465               	retlw	101	;'e'
  2448  0597  3472               	retlw	114	;'r'
  2449  0598  342E               	retlw	46	;'.'
  2450  0599  342E               	retlw	46	;'.'
  2451  059A  342E               	retlw	46	;'.'
  2452  059B  340D               	retlw	13
  2453  059C  340A               	retlw	10
  2454  059D  3400               	retlw	0
  2455                           
  2456                           	psect	stringtext5
  2457  0000                     __pstringtext5:	
  2458                           
  2459                           ; #config settings
  2460  0000                     
  2461                           	psect	cinit
  2462  0049                     start_initialization:	
  2463  0049                     __initialization:		;BIGRAM
  2464                           
  2465                           ; Initialize objects allocated to BANK1
  2466  0049  0021               	movlb	1	; select bank1
  2467  004A  3185  25DC  3180   	fcall	__pidataBANK1	;fetch initializer
  2468  004D  00C1               	movwf	__pdataBANK1& (0+127)
  2469  004E  3185  25DD  3180   	fcall	__pidataBANK1+1	;fetch initializer
  2470  0051  00C2               	movwf	(__pdataBANK1+1)& (0+127)
  2471  0052  3185  25DE  3180   	fcall	__pidataBANK1+2	;fetch initializer
  2472  0055  00C3               	movwf	(__pdataBANK1+2)& (0+127)
  2473                           
  2474                           ; Clear objects allocated to BIGRAM
  2475  0056  3040               	movlw	low (0+9024)
  2476  0057  0084               	movwf	4
  2477  0058  3023               	movlw	high (0+9024)
  2478  0059  0085               	movwf	5
  2479  005A  30A0               	movlw	160
  2480  005B  00FE               	movwf	btemp
  2481  005C  3000               	movlw	0
  2482  005D  00FF               	movwf	btemp+1
  2483  005E  3185  25BB  3180   	fcall	clear_ram0
  2484                           
  2485                           ; Clear objects allocated to COMMON
  2486  0061  01F6               	clrf	__pbssCOMMON& (0+127)
  2487  0062  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  2488  0063  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  2489  0064  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  2490                           
  2491                           ; Clear objects allocated to BANK1
  2492  0065  30A0               	movlw	low __pbssBANK1
  2493  0066  0084               	movwf	4
  2494  0067  3000               	movlw	high __pbssBANK1
  2495  0068  0085               	movwf	5
  2496  0069  301E               	movlw	30
  2497  006A  00FE               	movwf	btemp
  2498  006B  3000               	movlw	0
  2499  006C  00FF               	movwf	btemp+1
  2500  006D  3185  25BB  3180   	fcall	clear_ram0
  2501                           
  2502                           ; Clear objects allocated to BANK2
  2503  0070  3020               	movlw	low __pbssBANK2
  2504  0071  0084               	movwf	4
  2505  0072  3001               	movlw	high __pbssBANK2
  2506  0073  0085               	movwf	5
  2507  0074  3030               	movlw	48
  2508  0075  00FE               	movwf	btemp
  2509  0076  3000               	movlw	0
  2510  0077  00FF               	movwf	btemp+1
  2511  0078  3185  25BB  3180   	fcall	clear_ram0
  2512                           
  2513                           ; Clear objects allocated to BANK3
  2514  007B  30A0               	movlw	low __pbssBANK3
  2515  007C  0084               	movwf	4
  2516  007D  3001               	movlw	high __pbssBANK3
  2517  007E  0085               	movwf	5
  2518  007F  3050               	movlw	80
  2519  0080  00FE               	movwf	btemp
  2520  0081  3000               	movlw	0
  2521  0082  00FF               	movwf	btemp+1
  2522  0083  3185  25BB         	fcall	clear_ram0
  2523  0085                     end_of_initialization:	
  2524                           ;End of C runtime variable initialization code
  2525                           
  2526  0085                     __end_of__initialization:	
  2527  0085  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2528  0086  0020               	movlb	0
  2529  0087  3181  2988         	ljmp	_main	;jump to C main() function
  2530                           
  2531                           	psect	bssCOMMON
  2532  0076                     __pbssCOMMON:	
  2533  0076                     _eusartTxTail:	
  2534  0076                     	ds	1
  2535  0077                     _eusartTxHead:	
  2536  0077                     	ds	1
  2537  0078                     __bEusartRxCount:	
  2538  0078                     	ds	1
  2539  0079                     _Event:	
  2540  0079                     	ds	1
  2541                           
  2542                           	psect	bssBANK1
  2543  00A0                     __pbssBANK1:	
  2544  00A0                     _eusartTxBuffer:	
  2545  00A0                     	ds	16
  2546  00B0                     _globalTicker:	
  2547  00B0                     	ds	4
  2548  00B4                     _addrInline:	
  2549  00B4                     	ds	2
  2550  00B6                     _eusartRxIdleTime_ms:	
  2551  00B6                     	ds	2
  2552  00B8                     _eusartTxLen:	
  2553  00B8                     	ds	1
  2554  00B9                     _binBufferLen:	
  2555  00B9                     	ds	1
  2556  00BA                     _hexLineCharCount:	
  2557  00BA                     	ds	1
  2558  00BB                     _lengthInline:	
  2559  00BB                     	ds	1
  2560  00BC                     _eusartRxTail:	
  2561  00BC                     	ds	1
  2562  00BD                     _eusartRxHead:	
  2563  00BD                     	ds	1
  2564                           
  2565                           	psect	dataBANK1
  2566  00C1                     __pdataBANK1:	
  2567  00C1                     _addrWritedFlash:	
  2568  00C1                     	ds	2
  2569  00C3                     _firstPackage:	
  2570  00C3                     	ds	1
  2571                           
  2572                           	psect	bssBANK2
  2573  0120                     __pbssBANK2:	
  2574  0120                     _hexLineBuffer:	
  2575  0120                     	ds	48
  2576                           
  2577                           	psect	bssBANK3
  2578  01A0                     __pbssBANK3:	
  2579  01A0                     _binBuffer:	
  2580  01A0                     	ds	80
  2581                           
  2582                           	psect	clrtext
  2583  05BB                     clear_ram0:	
  2584                           ;	Called with FSR0 containing the base address, and
  2585                           ;	btemp/btemp+1 has the size to clear
  2586                           
  2587  05BB  0064               	clrwdt	;clear the watchdog before getting into this loop
  2588  05BC                     clrloop0:	
  2589  05BC  0180               	clrf	0	;clear RAM location pointed to by FSR
  2590  05BD  3101               	addfsr 0,1
  2591  05BE  3001               	movlw	1
  2592  05BF  02FE               	subwf	126,f
  2593  05C0  3000               	movlw	0
  2594  05C1  3BFF               	subwfb	127,f
  2595  05C2  087F               	movf	127,w
  2596  05C3  047E               	iorwf	126,w
  2597  05C4  1903               	btfsc	3,2
  2598  05C5  3400               	retlw	0	;all done for this memory range, return
  2599  05C6  2DBC               	goto	clrloop0	;have we reached the end yet?
  2600                           
  2601                           	psect	cstackBANK4
  2602  0220                     __pcstackBANK4:	
  2603  0220                     api_write_block@buf:	
  2604                           
  2605                           ; 64 bytes @ 0x0
  2606  0220                     	ds	64
  2607  0260                     api_write_block@i:	
  2608                           
  2609                           ; 1 bytes @ 0x40
  2610  0260                     	ds	1
  2611                           
  2612                           	psect	cstackCOMMON
  2613  0070                     __pcstackCOMMON:	
  2614  0070                     ?_EUSART_Transmit_ISR:	
  2615  0070                     ??_EUSART_Transmit_ISR:	
  2616                           ; 1 bytes @ 0x0
  2617                           
  2618  0070                     ?_EUSART_Receive_ISR:	
  2619                           ; 1 bytes @ 0x0
  2620                           
  2621  0070                     ??_EUSART_Receive_ISR:	
  2622                           ; 1 bytes @ 0x0
  2623                           
  2624  0070                     ?_OSCILLATOR_Initialize:	
  2625                           ; 1 bytes @ 0x0
  2626                           
  2627  0070                     ?_WDT_Initialize:	
  2628                           ; 1 bytes @ 0x0
  2629                           
  2630  0070                     ?_TMR2_Initialize:	
  2631                           ; 1 bytes @ 0x0
  2632                           
  2633  0070                     ?_EUSART_Initialize:	
  2634                           ; 1 bytes @ 0x0
  2635                           
  2636  0070                     ?_TMR2_StartTimer:	
  2637                           ; 1 bytes @ 0x0
  2638                           
  2639  0070                     ?_uart_received_start:	
  2640                           ; 1 bytes @ 0x0
  2641                           
  2642  0070                     ?_uart_send_byte:	
  2643                           ; 1 bytes @ 0x0
  2644                           
  2645  0070                     ?_INTERRUPT_InterruptManager:	
  2646                           ; 1 bytes @ 0x0
  2647                           
  2648  0070                     ?_PIN_MANAGER_Initialize:	
  2649                           ; 1 bytes @ 0x0
  2650                           
  2651  0070                     ?_SYSTEM_Initialize:	
  2652                           ; 1 bytes @ 0x0
  2653                           
  2654  0070                     ?_iap_received_package:	
  2655                           ; 1 bytes @ 0x0
  2656                           
  2657  0070                     ?_decode_hex_len:	
  2658                           ; 1 bytes @ 0x0
  2659                           
  2660  0070                     ?_decode_xmodem_package:	
  2661                           ; 1 bytes @ 0x0
  2662                           
  2663  0070                     ?_iap_process:	
  2664                           ; 1 bytes @ 0x0
  2665                           
  2666  0070                     ?_main:	
  2667                           ; 1 bytes @ 0x0
  2668                           
  2669  0070                     ?__chr2hex:	
  2670                           ; 1 bytes @ 0x0
  2671                           
  2672                           
  2673                           ; 1 bytes @ 0x0
  2674  0070                     	ds	2
  2675  0072                     EUSART_Receive_ISR@t8:	
  2676                           
  2677                           ; 1 bytes @ 0x2
  2678  0072                     	ds	1
  2679  0073                     ??_INTERRUPT_InterruptManager:	
  2680                           
  2681                           ; 1 bytes @ 0x3
  2682  0073                     	ds	1
  2683  0074                     ??_OSCILLATOR_Initialize:	
  2684  0074                     ??_WDT_Initialize:	
  2685                           ; 1 bytes @ 0x4
  2686                           
  2687  0074                     ??_EUSART_Initialize:	
  2688                           ; 1 bytes @ 0x4
  2689                           
  2690  0074                     ?_FLASH_EraseBlock:	
  2691                           ; 1 bytes @ 0x4
  2692                           
  2693  0074                     ?_TMR2_SetInterruptHandler:	
  2694                           ; 1 bytes @ 0x4
  2695                           
  2696  0074                     ??_TMR2_StartTimer:	
  2697                           ; 1 bytes @ 0x4
  2698                           
  2699  0074                     ??_uart_received_start:	
  2700                           ; 1 bytes @ 0x4
  2701                           
  2702  0074                     ??_uart_send_byte:	
  2703                           ; 1 bytes @ 0x4
  2704                           
  2705  0074                     ??_m_mem_set:	
  2706                           ; 1 bytes @ 0x4
  2707                           
  2708  0074                     ?_uart_send_str:	
  2709                           ; 1 bytes @ 0x4
  2710                           
  2711  0074                     ??_PIN_MANAGER_Initialize:	
  2712                           ; 1 bytes @ 0x4
  2713                           
  2714  0074                     ??__chr2hex:	
  2715                           ; 1 bytes @ 0x4
  2716                           
  2717  0074                     ?_FLASH_ReadWord:	
  2718                           ; 1 bytes @ 0x4
  2719                           
  2720  0074                     PIN_MANAGER_Initialize@state:	
  2721                           ; 2 bytes @ 0x4
  2722                           
  2723  0074                     uart_send_byte@x:	
  2724                           ; 1 bytes @ 0x4
  2725                           
  2726  0074                     FLASH_ReadWord@flashAddr:	
  2727                           ; 1 bytes @ 0x4
  2728                           
  2729  0074                     FLASH_EraseBlock@startAddr:	
  2730                           ; 2 bytes @ 0x4
  2731                           
  2732  0074                     TMR2_SetInterruptHandler@InterruptHandler:	
  2733                           ; 2 bytes @ 0x4
  2734                           
  2735  0074                     uart_send_str@str:	
  2736                           ; 2 bytes @ 0x4
  2737                           
  2738                           
  2739                           ; 2 bytes @ 0x4
  2740  0074                     	ds	1
  2741  0075                     ??_iap_received_package:	
  2742  0075                     m_mem_set@buf:	
  2743                           ; 1 bytes @ 0x5
  2744                           
  2745                           
  2746                           ; 1 bytes @ 0x5
  2747  0075                     	ds	1
  2748  0076                     ??_TMR2_Initialize:	
  2749  0076                     ??_FLASH_EraseBlock:	
  2750                           ; 1 bytes @ 0x6
  2751                           
  2752  0076                     ??_TMR2_SetInterruptHandler:	
  2753                           ; 1 bytes @ 0x6
  2754                           
  2755  0076                     ??_SYSTEM_Initialize:	
  2756                           ; 1 bytes @ 0x6
  2757                           
  2758  0076                     ??_FLASH_ReadWord:	
  2759                           ; 1 bytes @ 0x6
  2760                           
  2761                           
  2762                           	psect	cstackBANK0
  2763  0020                     __pcstackBANK0:	
  2764                           ; 1 bytes @ 0x6
  2765                           
  2766  0020                     ?_m_mem_set:	
  2767  0020                     ??_uart_send_str:	
  2768                           ; 1 bytes @ 0x0
  2769                           
  2770  0020                     FLASH_ReadWord@GIEBitValue:	
  2771                           ; 1 bytes @ 0x0
  2772                           
  2773  0020                     FLASH_EraseBlock@GIEBitValue:	
  2774                           ; 1 bytes @ 0x0
  2775                           
  2776  0020                     iap_received_package@tm:	
  2777                           ; 1 bytes @ 0x0
  2778                           
  2779  0020                     m_mem_set@x:	
  2780                           ; 1 bytes @ 0x0
  2781                           
  2782  0020                     __chr2hex@h:	
  2783                           ; 1 bytes @ 0x0
  2784                           
  2785                           
  2786                           ; 1 bytes @ 0x0
  2787  0020                     	ds	1
  2788  0021                     ?_FLASH_WriteBlock:	
  2789  0021                     __chr2hex@c:	
  2790                           ; 1 bytes @ 0x1
  2791                           
  2792  0021                     FLASH_WriteBlock@writeAddr:	
  2793                           ; 1 bytes @ 0x1
  2794                           
  2795  0021                     m_mem_set@len:	
  2796                           ; 2 bytes @ 0x1
  2797                           
  2798                           
  2799                           ; 2 bytes @ 0x1
  2800  0021                     	ds	1
  2801  0022                     ?_m_str_h2b:	
  2802  0022                     m_str_h2b@h:	
  2803                           ; 2 bytes @ 0x2
  2804                           
  2805                           
  2806                           ; 1 bytes @ 0x2
  2807  0022                     	ds	1
  2808  0023                     FLASH_WriteBlock@flashWordArray:	
  2809  0023                     m_str_h2b@len:	
  2810                           ; 1 bytes @ 0x3
  2811                           
  2812                           
  2813                           ; 2 bytes @ 0x3
  2814  0023                     	ds	1
  2815  0024                     ??_FLASH_WriteBlock:	
  2816                           
  2817                           ; 1 bytes @ 0x4
  2818  0024                     	ds	1
  2819  0025                     ??_m_str_h2b:	
  2820                           
  2821                           ; 1 bytes @ 0x5
  2822  0025                     	ds	2
  2823  0027                     FLASH_WriteBlock@GIEBitValue:	
  2824  0027                     m_str_h2b@i:	
  2825                           ; 1 bytes @ 0x7
  2826                           
  2827                           
  2828                           ; 2 bytes @ 0x7
  2829  0027                     	ds	1
  2830  0028                     FLASH_WriteBlock@i:	
  2831                           
  2832                           ; 1 bytes @ 0x8
  2833  0028                     	ds	1
  2834  0029                     ?_api_write_block:	
  2835  0029                     m_str_h2b@b:	
  2836                           ; 1 bytes @ 0x9
  2837                           
  2838  0029                     api_write_block@addr:	
  2839                           ; 1 bytes @ 0x9
  2840                           
  2841                           
  2842                           ; 2 bytes @ 0x9
  2843  0029                     	ds	1
  2844  002A                     m_str_h2b@s:	
  2845                           
  2846                           ; 1 bytes @ 0xA
  2847  002A                     	ds	1
  2848  002B                     api_write_block@binbuf:	
  2849  002B                     m_str_h2b@bb:	
  2850                           ; 1 bytes @ 0xB
  2851                           
  2852                           
  2853                           ; 1 bytes @ 0xB
  2854  002B                     	ds	1
  2855  002C                     ??_api_write_block:	
  2856                           
  2857                           ; 1 bytes @ 0xC
  2858  002C                     	ds	5
  2859  0031                     ??_decode_hex_len:	
  2860                           
  2861                           ; 1 bytes @ 0x11
  2862  0031                     	ds	2
  2863  0033                     decode_hex_len@t16:	
  2864                           
  2865                           ; 2 bytes @ 0x13
  2866  0033                     	ds	2
  2867  0035                     decode_hex_len@i8:	
  2868                           
  2869                           ; 1 bytes @ 0x15
  2870  0035                     	ds	1
  2871  0036                     ??_decode_xmodem_package:	
  2872                           
  2873                           ; 1 bytes @ 0x16
  2874  0036                     	ds	2
  2875  0038                     decode_xmodem_package@xloc:	
  2876                           
  2877                           ; 1 bytes @ 0x18
  2878  0038                     	ds	1
  2879  0039                     ??_iap_process:	
  2880                           
  2881                           ; 1 bytes @ 0x19
  2882  0039                     	ds	2
  2883  003B                     iap_process@ret:	
  2884                           
  2885                           ; 1 bytes @ 0x1B
  2886  003B                     	ds	1
  2887  003C                     ??_main:	
  2888                           
  2889                           ; 1 bytes @ 0x1C
  2890  003C                     	ds	2
  2891  003E                     main@ret:	
  2892                           
  2893                           ; 1 bytes @ 0x1E
  2894  003E                     	ds	1
  2895  003F                     main@t16:	
  2896                           
  2897                           ; 2 bytes @ 0x1F
  2898  003F                     	ds	2
  2899                           
  2900                           	psect	maintext
  2901  0188                     __pmaintext:	
  2902 ;;
  2903 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2904 ;;
  2905 ;; *************** function _main *****************
  2906 ;; Defined at:
  2907 ;;		line 51 in file "src/app/boot_main.c"
  2908 ;; Parameters:    Size  Location     Type
  2909 ;;		None
  2910 ;; Auto vars:     Size  Location     Type
  2911 ;;  t16             2   31[BANK0 ] unsigned int 
  2912 ;;  ret             1   30[BANK0 ] unsigned char 
  2913 ;; Return value:  Size  Location     Type
  2914 ;;                  1    wreg      void 
  2915 ;; Registers used:
  2916 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2917 ;; Tracked objects:
  2918 ;;		On entry : B1F/0
  2919 ;;		On exit  : 0/0
  2920 ;;		Unchanged: 0/0
  2921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2923 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2924 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2925 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2926 ;;Total ram usage:        5 bytes
  2927 ;; Hardware stack levels required when called:    8
  2928 ;; This function calls:
  2929 ;;		_FLASH_ReadWord
  2930 ;;		_SYSTEM_Initialize
  2931 ;;		_iap_process
  2932 ;;		_uart_received_start
  2933 ;;		_uart_send_str
  2934 ;; This function is called by:
  2935 ;;		Startup code after reset
  2936 ;; This function uses a non-reentrant model
  2937 ;;
  2938                           
  2939                           
  2940                           ;psect for function _main
  2941  0188                     _main:	
  2942                           
  2943                           ;boot_main.c: 53: uint8_t ret=0;
  2944                           
  2945                           ;incstack = 0
  2946                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2947  0188  0020               	movlb	0	; select bank0
  2948  0189  01BE               	clrf	main@ret
  2949                           
  2950                           ;boot_main.c: 54: uint16_t t16=0;
  2951  018A  01BF               	clrf	main@t16
  2952  018B  01C0               	clrf	main@t16+1
  2953                           
  2954                           ;boot_main.c: 55: isRunInBoot=0x55;
  2955  018C  3055               	movlw	85
  2956  018D  00BC               	movwf	??_main
  2957  018E  083C               	movf	??_main,w
  2958  018F  003F               	movlb	31	; select bank31
  2959  0190  00FF               	movwf	127	;volatile
  2960                           
  2961                           ;boot_main.c: 56: SYSTEM_Initialize();
  2962  0191  3185  259E  3181   	fcall	_SYSTEM_Initialize
  2963                           
  2964                           ;boot_main.c: 57: do{ (INTCONbits.GIE = 1); (INTCONbits.PEIE = 1); }while(0);;
  2965  0194  178B               	bsf	11,7	;volatile
  2966  0195  170B               	bsf	11,6	;volatile
  2967                           
  2968                           ;boot_main.c: 59: t16=FLASH_ReadWord(0x1f00+2);
  2969                           
  2970                           ;boot_main.c: 58: do{
  2971  0196  3002               	movlw	2
  2972  0197  00F4               	movwf	FLASH_ReadWord@flashAddr
  2973  0198  301F               	movlw	31
  2974  0199  00F5               	movwf	FLASH_ReadWord@flashAddr+1
  2975  019A  3184  24F5  3181   	fcall	_FLASH_ReadWord
  2976  019D  0875               	movf	?_FLASH_ReadWord+1,w
  2977  019E  0020               	movlb	0	; select bank0
  2978  019F  00C0               	movwf	main@t16+1
  2979  01A0  0874               	movf	?_FLASH_ReadWord,w
  2980  01A1  00BF               	movwf	main@t16
  2981                           
  2982                           ;boot_main.c: 60: if((t16 & 0xff) != 0xff)break;
  2983  01A2  30FF               	movlw	255
  2984  01A3  053F               	andwf	main@t16,w
  2985  01A4  00BC               	movwf	??_main
  2986  01A5  3000               	movlw	0
  2987  01A6  0540               	andwf	main@t16+1,w
  2988  01A7  00BD               	movwf	??_main+1
  2989  01A8  0A3C               	incf	??_main,w
  2990  01A9  043D               	iorwf	??_main+1,w
  2991  01AA  1D03               	btfss	3,2
  2992  01AB  2A18               	goto	l438
  2993                           
  2994                           ;boot_main.c: 62: uart_received_start();
  2995  01AC  3185  25C7  3181   	fcall	_uart_received_start
  2996                           
  2997                           ;boot_main.c: 63: uart_send_str((uint8_t*)"bootlaoder...\r\n");
  2998  01AF  308E               	movlw	low (STR_2| (0+32768))
  2999  01B0  00F4               	movwf	uart_send_str@str
  3000  01B1  3085               	movlw	high (STR_2| (0+32768))
  3001  01B2  00F5               	movwf	uart_send_str@str+1
  3002  01B3  3184  2472  3181   	fcall	_uart_send_str
  3003                           
  3004                           ;boot_main.c: 64: _delay((unsigned long)((100)*(16000000/4000.0)));
  3005  01B6  3003               	movlw	3
  3006  01B7  0020               	movlb	0	; select bank0
  3007  01B8  00BD               	movwf	??_main+1
  3008  01B9  3008               	movlw	8
  3009  01BA  00BC               	movwf	??_main
  3010  01BB  3077               	movlw	119
  3011  01BC                     u2287:	
  3012  01BC  0B89               	decfsz	9,f
  3013  01BD  29BC               	goto	u2287
  3014  01BE  0BBC               	decfsz	??_main,f
  3015  01BF  29BC               	goto	u2287
  3016  01C0  0BBD               	decfsz	??_main+1,f
  3017  01C1  29BC               	goto	u2287
  3018                           
  3019                           ;boot_main.c: 65: uart_send_str((uint8_t*)"update app fw?y/n\r\n");
  3020  01C2  3043               	movlw	low (STR_3| (0+32768))
  3021  01C3  00F4               	movwf	uart_send_str@str
  3022  01C4  3085               	movlw	high (STR_3| (0+32768))
  3023  01C5  00F5               	movwf	uart_send_str@str+1
  3024  01C6  3184  2472  3181   	fcall	_uart_send_str
  3025                           
  3026                           ;boot_main.c: 66: _delay((unsigned long)((1000)*(16000000/4000.0)));
  3027  01C9  3015               	movlw	21
  3028  01CA  0020               	movlb	0	; select bank0
  3029  01CB  00BD               	movwf	??_main+1
  3030  01CC  304B               	movlw	75
  3031  01CD  00BC               	movwf	??_main
  3032  01CE  30BE               	movlw	190
  3033  01CF                     u2297:	
  3034  01CF  0B89               	decfsz	9,f
  3035  01D0  29CF               	goto	u2297
  3036  01D1  0BBC               	decfsz	??_main,f
  3037  01D2  29CF               	goto	u2297
  3038  01D3  0BBD               	decfsz	??_main+1,f
  3039  01D4  29CF               	goto	u2297
  3040  01D5  0000               	nop
  3041                           
  3042                           ;boot_main.c: 67: t16=200;
  3043  01D6  30C8               	movlw	200
  3044  01D7  0020               	movlb	0	; select bank0
  3045  01D8  00BF               	movwf	main@t16
  3046  01D9  3000               	movlw	0
  3047  01DA  00C0               	movwf	main@t16+1
  3048                           
  3049                           ;boot_main.c: 68: _bEusartRxCount=0;
  3050  01DB  01F8               	clrf	__bEusartRxCount	;volatile
  3051  01DC                     l2883:	
  3052                           ;boot_main.c: 69: while(t16){
  3053                           
  3054  01DC  083F               	movf	main@t16,w
  3055  01DD  0440               	iorwf	main@t16+1,w
  3056  01DE  1903               	btfsc	3,2
  3057  01DF  2A0A               	goto	l2885
  3058                           
  3059                           ;boot_main.c: 70: _delay((unsigned long)((50)*(16000000/4000.0)));
  3060  01E0  3002               	movlw	2
  3061  01E1  0020               	movlb	0	; select bank0
  3062  01E2  00BD               	movwf	??_main+1
  3063  01E3  3004               	movlw	4
  3064  01E4  00BC               	movwf	??_main
  3065  01E5  30BA               	movlw	186
  3066  01E6                     u2307:	
  3067  01E6  0B89               	decfsz	9,f
  3068  01E7  29E6               	goto	u2307
  3069  01E8  0BBC               	decfsz	??_main,f
  3070  01E9  29E6               	goto	u2307
  3071  01EA  0BBD               	decfsz	??_main+1,f
  3072  01EB  29E6               	goto	u2307
  3073  01EC  0000               	nop
  3074                           
  3075                           ;boot_main.c: 71: if(Event & (1<<0)){
  3076  01ED  1C79               	btfss	_Event,0	;volatile
  3077  01EE  2A04               	goto	l2881
  3078                           
  3079                           ;boot_main.c: 72: Event &= ~(1<<0);
  3080  01EF  30FE               	movlw	254
  3081  01F0  0020               	movlb	0	; select bank0
  3082  01F1  00BC               	movwf	??_main
  3083  01F2  083C               	movf	??_main,w
  3084  01F3  05F9               	andwf	_Event,f	;volatile
  3085                           
  3086                           ;boot_main.c: 73: if(_bEusartRxBuffer[0]== 'y' || _bEusartRxBuffer[0]== 'Y')break;
  3087  01F4  3040               	movlw	64
  3088  01F5  0086               	movwf	6
  3089  01F6  3023               	movlw	35
  3090  01F7  0087               	movwf	7
  3091  01F8  3079               	movlw	121
  3092  01F9  0601               	xorwf	1,w
  3093  01FA  1903               	btfsc	3,2
  3094  01FB  2A0A               	goto	l2885
  3095  01FC  3040               	movlw	64
  3096  01FD  0086               	movwf	6
  3097  01FE  3023               	movlw	35
  3098  01FF  0087               	movwf	7
  3099  0200  3059               	movlw	89
  3100  0201  0601               	xorwf	1,w
  3101  0202  1903               	btfsc	3,2
  3102  0203  2A0A               	goto	l2885
  3103  0204                     l2881:	
  3104                           
  3105                           ;boot_main.c: 74: }
  3106                           ;boot_main.c: 75: t16--;
  3107  0204  3001               	movlw	1
  3108  0205  0020               	movlb	0	; select bank0
  3109  0206  02BF               	subwf	main@t16,f
  3110  0207  3000               	movlw	0
  3111  0208  3BC0               	subwfb	main@t16+1,f
  3112  0209  29DC               	goto	l2883
  3113  020A                     l2885:	
  3114                           
  3115                           ;boot_main.c: 76: }
  3116                           ;boot_main.c: 77: if(t16){
  3117  020A  083F               	movf	main@t16,w
  3118  020B  0440               	iorwf	main@t16+1,w
  3119  020C  1903               	btfsc	3,2
  3120  020D  2A18               	goto	l438
  3121                           
  3122                           ;boot_main.c: 78: ret=iap_process();
  3123  020E  3182  221D  3181   	fcall	_iap_process
  3124  0211  0020               	movlb	0	; select bank0
  3125  0212  00BC               	movwf	??_main
  3126  0213  083C               	movf	??_main,w
  3127  0214  00BE               	movwf	main@ret
  3128                           
  3129                           ;boot_main.c: 79: if(0==ret)while(1);
  3130  0215  083E               	movf	main@ret,w
  3131  0216  1903               	btfsc	3,2
  3132  0217                     l449:	
  3133  0217  2A17               	goto	l449
  3134  0218                     l438:	
  3135                           
  3136                           ;boot_main.c: 80: }
  3137                           ;boot_main.c: 82: }while(0);
  3138                           ;boot_main.c: 85: __nop();
  3139  0218  0000               	nop
  3140  0219  3188               	pagesel	2048	;# 
  3141  021A  2800               	goto	2048	;# 
  3142  021B  3180  2847         	ljmp	start
  3143  021D                     __end_of_main:	
  3144                           
  3145                           	psect	text1
  3146  021D                     __ptext1:	
  3147 ;; *************** function _iap_process *****************
  3148 ;; Defined at:
  3149 ;;		line 151 in file "src/api/iap.c"
  3150 ;; Parameters:    Size  Location     Type
  3151 ;;		None
  3152 ;; Auto vars:     Size  Location     Type
  3153 ;;  ret             1   27[BANK0 ] unsigned char 
  3154 ;; Return value:  Size  Location     Type
  3155 ;;                  1    wreg      unsigned char 
  3156 ;; Registers used:
  3157 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3158 ;; Tracked objects:
  3159 ;;		On entry : 0/0
  3160 ;;		On exit  : 0/0
  3161 ;;		Unchanged: 0/0
  3162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3164 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3165 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3166 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3167 ;;Total ram usage:        3 bytes
  3168 ;; Hardware stack levels used:    1
  3169 ;; Hardware stack levels required when called:    7
  3170 ;; This function calls:
  3171 ;;		_FLASH_WriteBlock
  3172 ;;		_decode_xmodem_package
  3173 ;;		_iap_received_package
  3174 ;;		_uart_send_byte
  3175 ;;		_uart_send_str
  3176 ;; This function is called by:
  3177 ;;		_main
  3178 ;; This function uses a non-reentrant model
  3179 ;;
  3180                           
  3181                           
  3182                           ;psect for function _iap_process
  3183  021D                     _iap_process:	
  3184                           
  3185                           ;iap.c: 153: uint8_t ret;
  3186                           ;iap.c: 154: uart_send_str((uint8_t*)"send *.hex file.\r\n");
  3187                           
  3188                           ;incstack = 0
  3189                           ; Regs used in _iap_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3190  021D  3057               	movlw	low (STR_1| (0+32768))
  3191  021E  00F4               	movwf	uart_send_str@str
  3192  021F  3085               	movlw	high (STR_1| (0+32768))
  3193  0220  00F5               	movwf	uart_send_str@str+1
  3194  0221  3184  2472  3182   	fcall	_uart_send_str
  3195                           
  3196                           ;iap.c: 155: _delay((unsigned long)((200)*(16000000/4000.0)));
  3197  0224  3005               	movlw	5
  3198  0225  0020               	movlb	0	; select bank0
  3199  0226  00BA               	movwf	??_iap_process+1
  3200  0227  300F               	movlw	15
  3201  0228  00B9               	movwf	??_iap_process
  3202  0229  30F1               	movlw	241
  3203  022A                     u2317:	
  3204  022A  0B89               	decfsz	9,f
  3205  022B  2A2A               	goto	u2317
  3206  022C  0BB9               	decfsz	??_iap_process,f
  3207  022D  2A2A               	goto	u2317
  3208  022E  0BBA               	decfsz	??_iap_process+1,f
  3209  022F  2A2A               	goto	u2317
  3210                           
  3211                           ;iap.c: 156: firstPackage=1;
  3212  0230  0021               	movlb	1	; select bank1
  3213  0231  01C3               	clrf	_firstPackage^(0+128)
  3214  0232  0AC3               	incf	_firstPackage^(0+128),f
  3215                           
  3216                           ;iap.c: 158: addrWritedFlash=0x800;
  3217  0233  3000               	movlw	0
  3218  0234  00C1               	movwf	_addrWritedFlash^(0+128)
  3219  0235  3008               	movlw	8
  3220  0236  00C2               	movwf	(_addrWritedFlash^(0+128)+1)
  3221                           
  3222                           ;iap.c: 159: lengthInline=0;
  3223  0237  01BB               	clrf	_lengthInline^(0+128)
  3224                           
  3225                           ;iap.c: 160: addrInline=0;
  3226  0238  01B4               	clrf	_addrInline^(0+128)
  3227  0239  01B5               	clrf	(_addrInline+1)^(0+128)
  3228                           
  3229                           ;iap.c: 161: hexLineCharCount=0;
  3230  023A  01BA               	clrf	_hexLineCharCount^(0+128)
  3231                           
  3232                           ;iap.c: 162: binBufferLen=0;
  3233  023B  01B9               	clrf	_binBufferLen^(0+128)
  3234                           
  3235                           ;iap.c: 172: break;
  3236  023C  2A46               	goto	l2793
  3237  023D                     l2805:	
  3238                           
  3239                           ;iap.c: 173: }
  3240                           ;iap.c: 174: uart_send_byte(0x15);
  3241  023D  3015               	movlw	21
  3242  023E  2A43               	goto	L1
  3243  023F                     l2807:	
  3244                           ;iap.c: 175: continue;
  3245                           
  3246                           
  3247                           ;iap.c: 176: }
  3248                           ;iap.c: 178: decode_xmodem_package();
  3249  023F  3183  2392  3182   	fcall	_decode_xmodem_package
  3250                           
  3251                           ;iap.c: 179: uart_send_byte(0x06);
  3252  0242  3006               	movlw	6
  3253  0243                     L1:	
  3254  0243  3185  25AD  3182   	fcall	_uart_send_byte
  3255  0246                     l2793:	
  3256                           ;iap.c: 164: while(1){
  3257                           
  3258                           
  3259                           ;iap.c: 165: ret=iap_received_package();
  3260  0246  3184  2417  3182   	fcall	_iap_received_package
  3261  0249  0020               	movlb	0	; select bank0
  3262  024A  00B9               	movwf	??_iap_process
  3263  024B  0839               	movf	??_iap_process,w
  3264  024C  00BB               	movwf	iap_process@ret
  3265                           
  3266                           ;iap.c: 166: if(ret){
  3267  024D  083B               	movf	iap_process@ret,w
  3268  024E  1903               	btfsc	3,2
  3269  024F  2A46               	goto	l2793
  3270                           
  3271                           ;iap.c: 167: firstPackage=0;
  3272  0250  0021               	movlb	1	; select bank1
  3273  0251  01C3               	clrf	_firstPackage^(0+128)
  3274                           
  3275                           ;iap.c: 169: if(ret!=0x84){
  3276  0252  3084               	movlw	132
  3277  0253  0020               	movlb	0	; select bank0
  3278  0254  063B               	xorwf	iap_process@ret,w
  3279  0255  1903               	btfsc	3,2
  3280  0256  2A3F               	goto	l2807
  3281                           
  3282                           ;iap.c: 170: if(_bEusartRxBuffer[0]==0x04){
  3283  0257  3040               	movlw	64
  3284  0258  0086               	movwf	6
  3285  0259  3023               	movlw	35
  3286  025A  0087               	movwf	7
  3287  025B  3004               	movlw	4
  3288  025C  0601               	xorwf	1,w
  3289  025D  1D03               	btfss	3,2
  3290  025E  2A3D               	goto	l2805
  3291                           
  3292                           ;iap.c: 171: uart_send_byte(0x06);
  3293  025F  3006               	movlw	6
  3294  0260  3185  25AD  3182   	fcall	_uart_send_byte
  3295                           
  3296                           ;iap.c: 180: }
  3297                           ;iap.c: 181: }
  3298                           ;iap.c: 183: if(binBufferLen){
  3299  0263  0021               	movlb	1	; select bank1
  3300  0264  0839               	movf	_binBufferLen^(0+128),w
  3301  0265  1903               	btfsc	3,2
  3302  0266  2A83               	goto	l2819
  3303                           
  3304                           ;iap.c: 184: if(addrWritedFlash>=0x800 && addrWritedFlash <0x1f00){
  3305  0267  3008               	movlw	8
  3306  0268  0242               	subwf	(_addrWritedFlash+1)^(0+128),w
  3307  0269  3000               	movlw	0
  3308  026A  1903               	skipnz
  3309  026B  0241               	subwf	_addrWritedFlash^(0+128),w
  3310  026C  1C03               	skipc
  3311  026D  2A83               	goto	l2819
  3312  026E  301F               	movlw	31
  3313  026F  0242               	subwf	(_addrWritedFlash+1)^(0+128),w
  3314  0270  3000               	movlw	0
  3315  0271  1903               	skipnz
  3316  0272  0241               	subwf	_addrWritedFlash^(0+128),w
  3317  0273  1803               	skipnc
  3318  0274  2A83               	goto	l2819
  3319                           
  3320                           ;iap.c: 185: FLASH_WriteBlock(addrWritedFlash,binBuffer);
  3321  0275  0842               	movf	(_addrWritedFlash+1)^(0+128),w
  3322  0276  0020               	movlb	0	; select bank0
  3323  0277  00A2               	movwf	FLASH_WriteBlock@writeAddr+1
  3324  0278  0021               	movlb	1	; select bank1
  3325  0279  0841               	movf	_addrWritedFlash^(0+128),w
  3326  027A  0020               	movlb	0	; select bank0
  3327  027B  00A1               	movwf	FLASH_WriteBlock@writeAddr
  3328  027C  30A0               	movlw	(low (_binBuffer| (0+256)))& (0+255)
  3329  027D  00B9               	movwf	??_iap_process
  3330  027E  0839               	movf	??_iap_process,w
  3331  027F  00A3               	movwf	FLASH_WriteBlock@flashWordArray
  3332  0280  3182  2288  3182   	fcall	_FLASH_WriteBlock
  3333  0283                     l2819:	
  3334                           
  3335                           ;iap.c: 186: }
  3336                           ;iap.c: 187: }
  3337                           ;iap.c: 188: uart_send_byte(0x06);
  3338  0283  3006               	movlw	6
  3339  0284  3185  25AD         	fcall	_uart_send_byte
  3340                           
  3341                           ;iap.c: 189: return 1;
  3342  0286  3001               	movlw	1
  3343  0287  0008               	return
  3344  0288                     __end_of_iap_process:	
  3345                           
  3346                           	psect	text2
  3347  0472                     __ptext2:	
  3348 ;; *************** function _uart_send_str *****************
  3349 ;; Defined at:
  3350 ;;		line 21 in file "src/api/my_uart.c"
  3351 ;; Parameters:    Size  Location     Type
  3352 ;;  str             2    4[COMMON] PTR unsigned char 
  3353 ;;		 -> STR_3(20), STR_2(16), STR_1(19), 
  3354 ;; Auto vars:     Size  Location     Type
  3355 ;;		None
  3356 ;; Return value:  Size  Location     Type
  3357 ;;                  1    wreg      void 
  3358 ;; Registers used:
  3359 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3360 ;; Tracked objects:
  3361 ;;		On entry : 0/0
  3362 ;;		On exit  : 0/0
  3363 ;;		Unchanged: 0/0
  3364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3365 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3367 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3368 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3369 ;;Total ram usage:        3 bytes
  3370 ;; Hardware stack levels used:    1
  3371 ;; Hardware stack levels required when called:    2
  3372 ;; This function calls:
  3373 ;;		Nothing
  3374 ;; This function is called by:
  3375 ;;		_iap_process
  3376 ;;		_main
  3377 ;; This function uses a non-reentrant model
  3378 ;;
  3379                           
  3380                           
  3381                           ;psect for function _uart_send_str
  3382  0472                     _uart_send_str:	
  3383                           
  3384                           ;my_uart.c: 25: if(!TXSTAbits.TXEN)TXSTAbits.TXEN=1;
  3385                           
  3386                           ;incstack = 0
  3387                           ; Regs used in _uart_send_str: [wreg-fsr0h+status,2+status,0+pclath]
  3388  0472  0023               	movlb	3	; select bank3
  3389  0473  1E9E               	btfss	30,5	;volatile
  3390  0474  169E               	bsf	30,5	;volatile
  3391  0475                     l2773:	
  3392                           ;my_uart.c: 26: while(*str!='\0'){
  3393                           
  3394  0475  0874               	movf	uart_send_str@str,w
  3395  0476  0084               	movwf	4
  3396  0477  0875               	movf	uart_send_str@str+1,w
  3397  0478  0085               	movwf	5
  3398  0479  0012               	moviw fsr0++
  3399  047A  1903               	btfsc	3,2
  3400  047B  2C94               	goto	l386
  3401  047C                     l380:	
  3402                           ;my_uart.c: 27: while(0 == PIR1bits.TXIF);
  3403                           
  3404  047C  0020               	movlb	0	; select bank0
  3405  047D  1E11               	btfss	17,4	;volatile
  3406  047E  2C7C               	goto	l380
  3407                           
  3408                           ;my_uart.c: 29: TXREG = *str;
  3409  047F  0874               	movf	uart_send_str@str,w
  3410  0480  0084               	movwf	4
  3411  0481  0875               	movf	uart_send_str@str+1,w
  3412  0482  0085               	movwf	5
  3413  0483  0800               	movf	0,w	;code access
  3414  0484  0023               	movlb	3	; select bank3
  3415  0485  009A               	movwf	26	;volatile
  3416                           
  3417                           ;my_uart.c: 30: str++;
  3418  0486  3001               	movlw	1
  3419  0487  07F4               	addwf	uart_send_str@str,f
  3420  0488  3000               	movlw	0
  3421  0489  3DF5               	addwfc	uart_send_str@str+1,f
  3422                           
  3423                           ;my_uart.c: 31: do{__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop
      +                          ();}while(0);;
  3424  048A  0000               	nop
  3425  048B  0000               	nop
  3426  048C  0000               	nop
  3427  048D  0000               	nop
  3428  048E  0000               	nop
  3429  048F  0000               	nop
  3430  0490  0000               	nop
  3431  0491  0000               	nop
  3432  0492  0000               	nop
  3433  0493  2C75               	goto	l2773
  3434  0494                     l386:	
  3435                           ;my_uart.c: 32: }
  3436                           ;my_uart.c: 33: while(0 == PIR1bits.TXIF);
  3437                           
  3438  0494  0020               	movlb	0	; select bank0
  3439  0495  1A11               	btfsc	17,4	;volatile
  3440  0496  0008               	return
  3441  0497  2C94               	goto	l386
  3442  0498                     __end_of_uart_send_str:	
  3443                           
  3444                           	psect	text3
  3445  0417                     __ptext3:	
  3446 ;; *************** function _iap_received_package *****************
  3447 ;; Defined at:
  3448 ;;		line 27 in file "src/api/iap.c"
  3449 ;; Parameters:    Size  Location     Type
  3450 ;;		None
  3451 ;; Auto vars:     Size  Location     Type
  3452 ;;  tm              1    0[BANK0 ] unsigned char 
  3453 ;; Return value:  Size  Location     Type
  3454 ;;                  1    wreg      unsigned char 
  3455 ;; Registers used:
  3456 ;;		wreg, status,2, status,0, pclath, cstack
  3457 ;; Tracked objects:
  3458 ;;		On entry : 0/0
  3459 ;;		On exit  : 0/0
  3460 ;;		Unchanged: 0/0
  3461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3463 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3464 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3465 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3466 ;;Total ram usage:        2 bytes
  3467 ;; Hardware stack levels used:    1
  3468 ;; Hardware stack levels required when called:    3
  3469 ;; This function calls:
  3470 ;;		_uart_received_start
  3471 ;;		_uart_send_byte
  3472 ;; This function is called by:
  3473 ;;		_iap_process
  3474 ;; This function uses a non-reentrant model
  3475 ;;
  3476                           
  3477                           
  3478                           ;psect for function _iap_received_package
  3479  0417                     _iap_received_package:	
  3480                           
  3481                           ;iap.c: 29: uint8_t tm=200;
  3482                           
  3483                           ;incstack = 0
  3484                           ; Regs used in _iap_received_package: [wreg+status,2+status,0+pclath+cstack]
  3485  0417  30C8               	movlw	200
  3486  0418  00F5               	movwf	??_iap_received_package
  3487  0419  0875               	movf	??_iap_received_package,w
  3488  041A  0020               	movlb	0	; select bank0
  3489  041B  00A0               	movwf	iap_received_package@tm
  3490                           
  3491                           ;iap.c: 30: uart_received_start();
  3492  041C  3185  25C7  3184   	fcall	_uart_received_start
  3493                           
  3494                           ;iap.c: 31: Event &= ~(1<<0);
  3495  041F  30FE               	movlw	254
  3496  0420  00F5               	movwf	??_iap_received_package
  3497  0421  0875               	movf	??_iap_received_package,w
  3498  0422  05F9               	andwf	_Event,f	;volatile
  3499                           
  3500                           ;iap.c: 32: if(firstPackage){
  3501  0423  0021               	movlb	1	; select bank1
  3502  0424  0843               	movf	_firstPackage^(0+128),w
  3503  0425  1903               	btfsc	3,2
  3504  0426  2C2B               	goto	l2711
  3505                           
  3506                           ;iap.c: 33: uart_send_byte(0x15);
  3507  0427  3015               	movlw	21
  3508  0428  3185  25AD  3184   	fcall	_uart_send_byte
  3509  042B                     l2711:	
  3510                           
  3511                           ;iap.c: 34: }
  3512                           ;iap.c: 35: _delay((unsigned long)((10)*(16000000/4000.0)));
  3513  042B  3034               	movlw	52
  3514  042C  00F5               	movwf	??_iap_received_package
  3515  042D  30F2               	movlw	242
  3516  042E                     u2327:	
  3517  042E  0B89               	decfsz	9,f
  3518  042F  2C2E               	goto	u2327
  3519  0430  0BF5               	decfsz	??_iap_received_package,f
  3520  0431  2C2E               	goto	u2327
  3521  0432                     l2719:	
  3522                           ;iap.c: 36: while(tm){
  3523                           
  3524  0432  0020               	movlb	0	; select bank0
  3525  0433  0820               	movf	iap_received_package@tm,w
  3526  0434  1D03               	btfss	3,2
  3527                           
  3528                           ;iap.c: 37: if(Event & (1<<0))break;
  3529  0435  1879               	btfsc	_Event,0	;volatile
  3530  0436  2C43               	goto	l2721
  3531                           
  3532                           ;iap.c: 38: _delay((unsigned long)((2)*(16000000/4000.0)));
  3533  0437  300B               	movlw	11
  3534  0438  00F5               	movwf	??_iap_received_package
  3535  0439  3062               	movlw	98
  3536  043A                     u2337:	
  3537  043A  0B89               	decfsz	9,f
  3538  043B  2C3A               	goto	u2337
  3539  043C  0BF5               	decfsz	??_iap_received_package,f
  3540  043D  2C3A               	goto	u2337
  3541  043E  3200               	nop2
  3542                           
  3543                           ;iap.c: 39: tm--;
  3544  043F  3001               	movlw	1
  3545  0440  0020               	movlb	0	; select bank0
  3546  0441  02A0               	subwf	iap_received_package@tm,f
  3547  0442  2C32               	goto	l2719
  3548  0443                     l2721:	
  3549                           
  3550                           ;iap.c: 40: }
  3551                           ;iap.c: 41: if(tm)return _bEusartRxCount;
  3552  0443  0820               	movf	iap_received_package@tm,w
  3553  0444  1903               	btfsc	3,2
  3554  0445  2C48               	goto	l2729
  3555  0446  0878               	movf	__bEusartRxCount,w	;volatile
  3556  0447  0008               	return
  3557  0448                     l2729:	
  3558                           
  3559                           ;iap.c: 42: else
  3560                           ;iap.c: 43: return 0;
  3561  0448  3000               	movlw	0
  3562  0449  0008               	return
  3563  044A                     __end_of_iap_received_package:	
  3564                           
  3565                           	psect	text4
  3566  05AD                     __ptext4:	
  3567 ;; *************** function _uart_send_byte *****************
  3568 ;; Defined at:
  3569 ;;		line 12 in file "src/api/my_uart.c"
  3570 ;; Parameters:    Size  Location     Type
  3571 ;;  x               1    wreg     unsigned char 
  3572 ;; Auto vars:     Size  Location     Type
  3573 ;;  x               1    4[COMMON] unsigned char 
  3574 ;; Return value:  Size  Location     Type
  3575 ;;                  1    wreg      void 
  3576 ;; Registers used:
  3577 ;;		wreg
  3578 ;; Tracked objects:
  3579 ;;		On entry : 0/0
  3580 ;;		On exit  : 0/0
  3581 ;;		Unchanged: 0/0
  3582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3584 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3586 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3587 ;;Total ram usage:        1 bytes
  3588 ;; Hardware stack levels used:    1
  3589 ;; Hardware stack levels required when called:    2
  3590 ;; This function calls:
  3591 ;;		Nothing
  3592 ;; This function is called by:
  3593 ;;		_iap_received_package
  3594 ;;		_iap_process
  3595 ;; This function uses a non-reentrant model
  3596 ;;
  3597                           
  3598                           
  3599                           ;psect for function _uart_send_byte
  3600  05AD                     _uart_send_byte:	
  3601                           
  3602                           ;incstack = 0
  3603                           ; Regs used in _uart_send_byte: [wreg]
  3604                           ;uart_send_byte@x stored from wreg
  3605  05AD  00F4               	movwf	uart_send_byte@x
  3606                           
  3607                           ;my_uart.c: 15: if(!TXSTAbits.TXEN)TXSTAbits.TXEN=1;
  3608  05AE  0023               	movlb	3	; select bank3
  3609  05AF  1E9E               	btfss	30,5	;volatile
  3610  05B0  169E               	bsf	30,5	;volatile
  3611  05B1                     l368:	
  3612                           ;my_uart.c: 16: while(0 == PIR1bits.TXIF);
  3613                           
  3614  05B1  0020               	movlb	0	; select bank0
  3615  05B2  1E11               	btfss	17,4	;volatile
  3616  05B3  2DB1               	goto	l368
  3617                           
  3618                           ;my_uart.c: 17: TXREG = x;
  3619  05B4  0874               	movf	uart_send_byte@x,w
  3620  05B5  0023               	movlb	3	; select bank3
  3621  05B6  009A               	movwf	26	;volatile
  3622  05B7                     l371:	
  3623                           ;my_uart.c: 18: while(0 == PIR1bits.TXIF);
  3624                           
  3625  05B7  0020               	movlb	0	; select bank0
  3626  05B8  1A11               	btfsc	17,4	;volatile
  3627  05B9  0008               	return
  3628  05BA  2DB7               	goto	l371
  3629  05BB                     __end_of_uart_send_byte:	
  3630                           
  3631                           	psect	text5
  3632  05C7                     __ptext5:	
  3633 ;; *************** function _uart_received_start *****************
  3634 ;; Defined at:
  3635 ;;		line 50 in file "src/api/my_uart.c"
  3636 ;; Parameters:    Size  Location     Type
  3637 ;;		None
  3638 ;; Auto vars:     Size  Location     Type
  3639 ;;		None
  3640 ;; Return value:  Size  Location     Type
  3641 ;;                  1    wreg      void 
  3642 ;; Registers used:
  3643 ;;		status,2
  3644 ;; Tracked objects:
  3645 ;;		On entry : 0/0
  3646 ;;		On exit  : 0/0
  3647 ;;		Unchanged: 0/0
  3648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3652 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3653 ;;Total ram usage:        0 bytes
  3654 ;; Hardware stack levels used:    1
  3655 ;; Hardware stack levels required when called:    2
  3656 ;; This function calls:
  3657 ;;		Nothing
  3658 ;; This function is called by:
  3659 ;;		_iap_received_package
  3660 ;;		_main
  3661 ;; This function uses a non-reentrant model
  3662 ;;
  3663                           
  3664                           
  3665                           ;psect for function _uart_received_start
  3666  05C7                     _uart_received_start:	
  3667                           
  3668                           ;my_uart.c: 52: _bEusartRxCount=0;
  3669                           
  3670                           ;incstack = 0
  3671                           ; Regs used in _uart_received_start: [status,2]
  3672  05C7  01F8               	clrf	__bEusartRxCount	;volatile
  3673                           
  3674                           ;my_uart.c: 53: PIE1bits.RCIE = 1;
  3675  05C8  0021               	movlb	1	; select bank1
  3676  05C9  1691               	bsf	17,5	;volatile
  3677                           
  3678                           ;my_uart.c: 54: eusartRxIdleTime_ms=0;
  3679  05CA  01B6               	clrf	_eusartRxIdleTime_ms^(0+128)	;volatile
  3680  05CB  01B7               	clrf	(_eusartRxIdleTime_ms+1)^(0+128)	;volatile
  3681  05CC  0008               	return
  3682  05CD                     __end_of_uart_received_start:	
  3683                           
  3684                           	psect	text6
  3685  0392                     __ptext6:	
  3686 ;; *************** function _decode_xmodem_package *****************
  3687 ;; Defined at:
  3688 ;;		line 134 in file "src/api/iap.c"
  3689 ;; Parameters:    Size  Location     Type
  3690 ;;		None
  3691 ;; Auto vars:     Size  Location     Type
  3692 ;;  xloc            1   24[BANK0 ] unsigned char 
  3693 ;; Return value:  Size  Location     Type
  3694 ;;                  1    wreg      unsigned char 
  3695 ;; Registers used:
  3696 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3697 ;; Tracked objects:
  3698 ;;		On entry : 0/0
  3699 ;;		On exit  : 0/0
  3700 ;;		Unchanged: 0/0
  3701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3703 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3704 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3705 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3706 ;;Total ram usage:        3 bytes
  3707 ;; Hardware stack levels used:    1
  3708 ;; Hardware stack levels required when called:    6
  3709 ;; This function calls:
  3710 ;;		_decode_hex_len
  3711 ;; This function is called by:
  3712 ;;		_iap_process
  3713 ;; This function uses a non-reentrant model
  3714 ;;
  3715                           
  3716                           
  3717                           ;psect for function _decode_xmodem_package
  3718  0392                     _decode_xmodem_package:	
  3719                           
  3720                           ;iap.c: 136: uint8_t xloc=0;
  3721                           
  3722                           ;incstack = 0
  3723                           ; Regs used in _decode_xmodem_package: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  3724  0392  0020               	movlb	0	; select bank0
  3725  0393  01B8               	clrf	decode_xmodem_package@xloc
  3726                           
  3727                           ;iap.c: 137: xloc=3;
  3728  0394  3003               	movlw	3
  3729  0395  00B6               	movwf	??_decode_xmodem_package
  3730  0396  0836               	movf	??_decode_xmodem_package,w
  3731  0397  00B8               	movwf	decode_xmodem_package@xloc
  3732  0398                     l2745:	
  3733                           ;iap.c: 138: while(xloc<_bEusartRxCount-1){
  3734                           
  3735  0398  0878               	movf	__bEusartRxCount,w	;volatile
  3736  0399  3EFF               	addlw	255
  3737  039A  00B6               	movwf	??_decode_xmodem_package
  3738  039B  30FF               	movlw	255
  3739  039C  1803               	skipnc
  3740  039D  3000               	movlw	0
  3741  039E  00B7               	movwf	??_decode_xmodem_package+1
  3742  039F  0837               	movf	??_decode_xmodem_package+1,w
  3743  03A0  3A80               	xorlw	128
  3744  03A1  3C80               	sublw	128
  3745  03A2  1D03               	skipz
  3746  03A3  2BA6               	goto	u2085
  3747  03A4  0836               	movf	??_decode_xmodem_package,w
  3748  03A5  0238               	subwf	decode_xmodem_package@xloc,w
  3749  03A6                     u2085:	
  3750  03A6  1803               	btfsc	3,0
  3751  03A7  2BD6               	goto	l332
  3752                           
  3753                           ;iap.c: 139: hexLineBuffer[hexLineCharCount]=_bEusartRxBuffer[xloc];
  3754  03A8  0020               	movlb	0	; select bank0
  3755  03A9  0838               	movf	decode_xmodem_package@xloc,w
  3756  03AA  3E40               	addlw	64
  3757  03AB  0086               	movwf	6
  3758  03AC  0187               	clrf	7
  3759  03AD  3023               	movlw	35
  3760  03AE  3D87               	addwfc	7,f
  3761  03AF  0801               	movf	1,w
  3762  03B0  00B6               	movwf	??_decode_xmodem_package
  3763  03B1  0021               	movlb	1	; select bank1
  3764  03B2  083A               	movf	_hexLineCharCount^(0+128),w
  3765  03B3  3E20               	addlw	(low (_hexLineBuffer| (0+256)))& (0+255)
  3766  03B4  0086               	movwf	6
  3767  03B5  3001               	movlw	1	; select bank2/3
  3768  03B6  0087               	movwf	7
  3769  03B7  0020               	movlb	0	; select bank0
  3770  03B8  0836               	movf	??_decode_xmodem_package,w
  3771  03B9  0081               	movwf	1
  3772                           
  3773                           ;iap.c: 140: if(_bEusartRxBuffer[xloc]==0x0a){
  3774  03BA  0838               	movf	decode_xmodem_package@xloc,w
  3775  03BB  3E40               	addlw	64
  3776  03BC  0086               	movwf	6
  3777  03BD  0187               	clrf	7
  3778  03BE  3023               	movlw	35
  3779  03BF  3D87               	addwfc	7,f
  3780  03C0  300A               	movlw	10
  3781  03C1  0601               	xorwf	1,w
  3782  03C2  1D03               	btfss	3,2
  3783  03C3  2BCA               	goto	l2743
  3784                           
  3785                           ;iap.c: 141: decode_hex_len();
  3786  03C4  3180  2089  3183   	fcall	_decode_hex_len
  3787                           
  3788                           ;iap.c: 142: hexLineCharCount=0;
  3789  03C7  0021               	movlb	1	; select bank1
  3790  03C8  01BA               	clrf	_hexLineCharCount^(0+128)
  3791                           
  3792                           ;iap.c: 143: }else{
  3793  03C9  2BD0               	goto	l331
  3794  03CA                     l2743:	
  3795                           
  3796                           ;iap.c: 144: hexLineCharCount++;
  3797  03CA  3001               	movlw	1
  3798  03CB  0020               	movlb	0	; select bank0
  3799  03CC  00B6               	movwf	??_decode_xmodem_package
  3800  03CD  0836               	movf	??_decode_xmodem_package,w
  3801  03CE  0021               	movlb	1	; select bank1
  3802  03CF  07BA               	addwf	_hexLineCharCount^(0+128),f
  3803  03D0                     l331:	
  3804                           
  3805                           ;iap.c: 145: }
  3806                           ;iap.c: 146: xloc++;
  3807  03D0  3001               	movlw	1
  3808  03D1  0020               	movlb	0	; select bank0
  3809  03D2  00B6               	movwf	??_decode_xmodem_package
  3810  03D3  0836               	movf	??_decode_xmodem_package,w
  3811  03D4  07B8               	addwf	decode_xmodem_package@xloc,f
  3812  03D5  2B98               	goto	l2745
  3813  03D6                     l332:	
  3814                           
  3815                           ;iap.c: 147: }
  3816                           ;iap.c: 148: __nop();
  3817  03D6  0000               	nop
  3818                           
  3819                           ;iap.c: 149: return 0;
  3820                           ;	Return value of _decode_xmodem_package is never used
  3821  03D7  0008               	return
  3822  03D8                     __end_of_decode_xmodem_package:	
  3823                           
  3824                           	psect	text7
  3825  0089                     __ptext7:	
  3826 ;; *************** function _decode_hex_len *****************
  3827 ;; Defined at:
  3828 ;;		line 74 in file "src/api/iap.c"
  3829 ;; Parameters:    Size  Location     Type
  3830 ;;		None
  3831 ;; Auto vars:     Size  Location     Type
  3832 ;;  t16             2   19[BANK0 ] unsigned int 
  3833 ;;  i8              1   21[BANK0 ] unsigned char 
  3834 ;; Return value:  Size  Location     Type
  3835 ;;                  1    wreg      unsigned char 
  3836 ;; Registers used:
  3837 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3838 ;; Tracked objects:
  3839 ;;		On entry : 0/0
  3840 ;;		On exit  : 0/0
  3841 ;;		Unchanged: 0/0
  3842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3844 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3845 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3846 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3847 ;;Total ram usage:        5 bytes
  3848 ;; Hardware stack levels used:    1
  3849 ;; Hardware stack levels required when called:    5
  3850 ;; This function calls:
  3851 ;;		_api_write_block
  3852 ;;		_m_mem_set
  3853 ;;		_m_str_h2b
  3854 ;; This function is called by:
  3855 ;;		_decode_xmodem_package
  3856 ;; This function uses a non-reentrant model
  3857 ;;
  3858                           
  3859                           
  3860                           ;psect for function _decode_hex_len
  3861  0089                     _decode_hex_len:	
  3862                           
  3863                           ;iap.c: 76: uint8_t i8;
  3864                           ;iap.c: 77: uint16_t t16;
  3865                           ;iap.c: 78: __nop();
  3866                           
  3867                           ;incstack = 0
  3868                           ; Regs used in _decode_hex_len: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3869  0089  0000               	nop
  3870                           
  3871                           ;iap.c: 79: i8=m_str_h2b(hexLineBuffer,hexLineBuffer+1,hexLineCharCount-3);
  3872  008A  3021               	movlw	(low ((_hexLineBuffer| (0+256)+1)))& (0+255)
  3873  008B  0020               	movlb	0	; select bank0
  3874  008C  00B1               	movwf	??_decode_hex_len
  3875  008D  0831               	movf	??_decode_hex_len,w
  3876  008E  00A2               	movwf	m_str_h2b@h
  3877  008F  0021               	movlb	1	; select bank1
  3878  0090  083A               	movf	_hexLineCharCount^(0+128),w
  3879  0091  3EFD               	addlw	253
  3880  0092  0020               	movlb	0	; select bank0
  3881  0093  00A3               	movwf	m_str_h2b@len
  3882  0094  30FF               	movlw	255
  3883  0095  1803               	skipnc
  3884  0096  3000               	movlw	0
  3885  0097  00A4               	movwf	m_str_h2b@len+1
  3886  0098  3020               	movlw	(low (_hexLineBuffer| (0+256)))& (0+255)
  3887  0099  3183  233C  3180   	fcall	_m_str_h2b
  3888  009C  0020               	movlb	0	; select bank0
  3889  009D  0822               	movf	?_m_str_h2b,w
  3890  009E  00B2               	movwf	??_decode_hex_len+1
  3891  009F  0832               	movf	??_decode_hex_len+1,w
  3892  00A0  00B5               	movwf	decode_hex_len@i8
  3893                           
  3894                           ;iap.c: 81: __nop();
  3895                           
  3896                           ;iap.c: 80: do{
  3897  00A1  0000               	nop
  3898                           
  3899                           ;iap.c: 82: if(hexLineBuffer[3]!=0x00)break;
  3900  00A2  0022               	movlb	2	; select bank2
  3901  00A3  0823               	movf	(_hexLineBuffer^(0+256)+3),w
  3902  00A4  1D03               	btfss	3,2
  3903  00A5  297E               	goto	l2629
  3904                           
  3905                           ;iap.c: 83: t16=hexLineBuffer[1];
  3906  00A6  0821               	movf	(_hexLineBuffer^(0+256)+1),w
  3907  00A7  0020               	movlb	0	; select bank0
  3908  00A8  00B1               	movwf	??_decode_hex_len
  3909  00A9  01B2               	clrf	??_decode_hex_len+1
  3910  00AA  0831               	movf	??_decode_hex_len,w
  3911  00AB  00B3               	movwf	decode_hex_len@t16
  3912  00AC  0832               	movf	??_decode_hex_len+1,w
  3913  00AD  00B4               	movwf	decode_hex_len@t16+1
  3914                           
  3915                           ;iap.c: 84: t16<<=8;
  3916  00AE  3008               	movlw	8
  3917  00AF                     u1925:	
  3918  00AF  35B3               	lslf	decode_hex_len@t16,f
  3919  00B0  0DB4               	rlf	decode_hex_len@t16+1,f
  3920  00B1  0B89               	decfsz	9,f
  3921  00B2  28AF               	goto	u1925
  3922                           
  3923                           ;iap.c: 85: t16|=hexLineBuffer[2];
  3924  00B3  0022               	movlb	2	; select bank2
  3925  00B4  0822               	movf	(_hexLineBuffer^(0+256)+2),w
  3926  00B5  0020               	movlb	0	; select bank0
  3927  00B6  00B1               	movwf	??_decode_hex_len
  3928  00B7  01B2               	clrf	??_decode_hex_len+1
  3929  00B8  0831               	movf	??_decode_hex_len,w
  3930  00B9  04B3               	iorwf	decode_hex_len@t16,f
  3931  00BA  0832               	movf	??_decode_hex_len+1,w
  3932  00BB  04B4               	iorwf	decode_hex_len@t16+1,f
  3933                           
  3934                           ;iap.c: 87: t16>>=1;
  3935  00BC  3001               	movlw	1
  3936  00BD                     u1935:	
  3937  00BD  36B4               	lsrf	decode_hex_len@t16+1,f
  3938  00BE  0CB3               	rrf	decode_hex_len@t16,f
  3939  00BF  0B89               	decfsz	9,f
  3940  00C0  28BD               	goto	u1935
  3941                           
  3942                           ;iap.c: 88: addrInline=t16;
  3943  00C1  0834               	movf	decode_hex_len@t16+1,w
  3944  00C2  0021               	movlb	1	; select bank1
  3945  00C3  00B5               	movwf	(_addrInline+1)^(0+128)
  3946  00C4  0020               	movlb	0	; select bank0
  3947  00C5  0833               	movf	decode_hex_len@t16,w
  3948  00C6  0021               	movlb	1	; select bank1
  3949  00C7  00B4               	movwf	_addrInline^(0+128)
  3950                           
  3951                           ;iap.c: 90: if(addrInline==0x800){
  3952  00C8  3008               	movlw	8
  3953  00C9  0635               	xorwf	(_addrInline+1)^(0+128),w
  3954  00CA  0434               	iorwf	_addrInline^(0+128),w
  3955  00CB  1D03               	btfss	3,2
  3956  00CC  28DF               	goto	l2585
  3957                           
  3958                           ;iap.c: 92: addrInline+=0x01;
  3959  00CD  3001               	movlw	1
  3960  00CE  07B4               	addwf	_addrInline^(0+128),f
  3961  00CF  3000               	movlw	0
  3962  00D0  3DB5               	addwfc	(_addrInline+1)^(0+128),f
  3963                           
  3964                           ;iap.c: 93: binBuffer[binBufferLen]=0x00;
  3965  00D1  3539               	lslf	_binBufferLen^(0+128),w
  3966  00D2  3EA0               	addlw	(low (_binBuffer| (0+256)))& (0+255)
  3967  00D3  0086               	movwf	6
  3968  00D4  3001               	movlw	1	; select bank3/4
  3969  00D5  0087               	movwf	7
  3970  00D6  3000               	movlw	0
  3971  00D7  3FC0               	movwi [0]fsr1
  3972  00D8  3FC1               	movwi [1]fsr1
  3973                           
  3974                           ;iap.c: 94: binBufferLen++;
  3975  00D9  3001               	movlw	1
  3976  00DA  0020               	movlb	0	; select bank0
  3977  00DB  00B1               	movwf	??_decode_hex_len
  3978  00DC  0831               	movf	??_decode_hex_len,w
  3979  00DD  0021               	movlb	1	; select bank1
  3980  00DE  07B9               	addwf	_binBufferLen^(0+128),f
  3981  00DF                     l2585:	
  3982                           
  3983                           ;iap.c: 95: }
  3984                           ;iap.c: 97: lengthInline=hexLineBuffer[0];
  3985  00DF  0022               	movlb	2	; select bank2
  3986  00E0  0820               	movf	_hexLineBuffer^(0+256),w
  3987  00E1  0020               	movlb	0	; select bank0
  3988  00E2  00B1               	movwf	??_decode_hex_len
  3989  00E3  0831               	movf	??_decode_hex_len,w
  3990  00E4  0021               	movlb	1	; select bank1
  3991  00E5  00BB               	movwf	_lengthInline^(0+128)
  3992                           
  3993                           ;iap.c: 99: if(lengthInline==0)break;
  3994  00E6  083B               	movf	_lengthInline^(0+128),w
  3995  00E7  1903               	btfsc	3,2
  3996  00E8  297E               	goto	l2629
  3997  00E9                     l2603:	
  3998  00E9  0839               	movf	_binBufferLen^(0+128),w
  3999  00EA  0741               	addwf	_addrWritedFlash^(0+128),w
  4000  00EB  0020               	movlb	0	; select bank0
  4001  00EC  00B1               	movwf	??_decode_hex_len
  4002  00ED  0021               	movlb	1	; select bank1
  4003  00EE  0842               	movf	(_addrWritedFlash+1)^(0+128),w
  4004  00EF  1803               	skipnc
  4005  00F0  0A42               	incf	(_addrWritedFlash+1)^(0+128),w
  4006  00F1  0020               	movlb	0	; select bank0
  4007  00F2  00B2               	movwf	??_decode_hex_len+1
  4008  00F3  0021               	movlb	1	; select bank1
  4009  00F4  0835               	movf	(_addrInline+1)^(0+128),w
  4010  00F5  0020               	movlb	0	; select bank0
  4011  00F6  0232               	subwf	??_decode_hex_len+1,w
  4012  00F7  1D03               	skipz
  4013  00F8  28FD               	goto	u1975
  4014  00F9  0021               	movlb	1	; select bank1
  4015  00FA  0834               	movf	_addrInline^(0+128),w
  4016  00FB  0020               	movlb	0	; select bank0
  4017  00FC  0231               	subwf	??_decode_hex_len,w
  4018  00FD                     u1975:	
  4019  00FD  1803               	btfsc	3,0
  4020  00FE  2929               	goto	l2605
  4021                           
  4022                           ;iap.c: 102: binBuffer[binBufferLen]=0x3ff;
  4023                           
  4024                           ;iap.c: 101: while(addrWritedFlash+binBufferLen<addrInline){
  4025  00FF  0021               	movlb	1	; select bank1
  4026  0100  3539               	lslf	_binBufferLen^(0+128),w
  4027  0101  3EA0               	addlw	(low (_binBuffer| (0+256)))& (0+255)
  4028  0102  0086               	movwf	6
  4029  0103  3001               	movlw	1	; select bank3/4
  4030  0104  0087               	movwf	7
  4031  0105  30FF               	movlw	255
  4032  0106  3FC0               	movwi [0]fsr1
  4033  0107  3003               	movlw	3
  4034  0108  3FC1               	movwi [1]fsr1
  4035                           
  4036                           ;iap.c: 103: binBufferLen++;
  4037  0109  3001               	movlw	1
  4038  010A  0020               	movlb	0	; select bank0
  4039  010B  00B1               	movwf	??_decode_hex_len
  4040  010C  0831               	movf	??_decode_hex_len,w
  4041  010D  0021               	movlb	1	; select bank1
  4042  010E  07B9               	addwf	_binBufferLen^(0+128),f
  4043                           
  4044                           ;iap.c: 104: if(binBufferLen>=32){
  4045  010F  3020               	movlw	32
  4046  0110  0239               	subwf	_binBufferLen^(0+128),w
  4047  0111  1C03               	skipc
  4048  0112  28E9               	goto	l2603
  4049                           
  4050                           ;iap.c: 105: api_write_block(addrWritedFlash,binBuffer);
  4051  0113  0842               	movf	(_addrWritedFlash+1)^(0+128),w
  4052  0114  0020               	movlb	0	; select bank0
  4053  0115  00AA               	movwf	api_write_block@addr+1
  4054  0116  0021               	movlb	1	; select bank1
  4055  0117  0841               	movf	_addrWritedFlash^(0+128),w
  4056  0118  0020               	movlb	0	; select bank0
  4057  0119  00A9               	movwf	api_write_block@addr
  4058  011A  30A0               	movlw	(low (_binBuffer| (0+256)))& (0+255)
  4059  011B  00B1               	movwf	??_decode_hex_len
  4060  011C  0831               	movf	??_decode_hex_len,w
  4061  011D  00AB               	movwf	api_write_block@binbuf
  4062  011E  3182  22E5  3180   	fcall	_api_write_block
  4063                           
  4064                           ;iap.c: 106: addrWritedFlash+=32;
  4065  0121  3020               	movlw	32
  4066  0122  0021               	movlb	1	; select bank1
  4067  0123  07C1               	addwf	_addrWritedFlash^(0+128),f
  4068  0124  3000               	movlw	0
  4069  0125  3DC2               	addwfc	(_addrWritedFlash+1)^(0+128),f
  4070                           
  4071                           ;iap.c: 107: binBufferLen-=32;
  4072  0126  3020               	movlw	32
  4073  0127  02B9               	subwf	_binBufferLen^(0+128),f
  4074  0128  28E9               	goto	l2603
  4075  0129                     l2605:	
  4076                           
  4077                           ;iap.c: 108: }
  4078                           ;iap.c: 113: }
  4079                           ;iap.c: 115: for(i8=0;i8<lengthInline;i8+=2){
  4080  0129  01B5               	clrf	decode_hex_len@i8
  4081  012A                     l2627:	
  4082  012A  0021               	movlb	1	; select bank1
  4083  012B  083B               	movf	_lengthInline^(0+128),w
  4084  012C  0020               	movlb	0	; select bank0
  4085  012D  0235               	subwf	decode_hex_len@i8,w
  4086  012E  1803               	btfsc	3,0
  4087  012F  297E               	goto	l2629
  4088                           
  4089                           ;iap.c: 116: t16=hexLineBuffer[5+i8];
  4090  0130  0835               	movf	decode_hex_len@i8,w
  4091  0131  3E05               	addlw	5
  4092  0132  3E20               	addlw	(low (_hexLineBuffer| (0+256)))& (0+255)
  4093  0133  0086               	movwf	6
  4094  0134  3001               	movlw	1	; select bank2/3
  4095  0135  0087               	movwf	7
  4096  0136  0801               	movf	1,w
  4097  0137  00B1               	movwf	??_decode_hex_len
  4098  0138  01B2               	clrf	??_decode_hex_len+1
  4099  0139  0831               	movf	??_decode_hex_len,w
  4100  013A  00B3               	movwf	decode_hex_len@t16
  4101  013B  0832               	movf	??_decode_hex_len+1,w
  4102  013C  00B4               	movwf	decode_hex_len@t16+1
  4103                           
  4104                           ;iap.c: 117: t16<<=8;
  4105  013D  3008               	movlw	8
  4106  013E                     u1985:	
  4107  013E  35B3               	lslf	decode_hex_len@t16,f
  4108  013F  0DB4               	rlf	decode_hex_len@t16+1,f
  4109  0140  0B89               	decfsz	9,f
  4110  0141  293E               	goto	u1985
  4111                           
  4112                           ;iap.c: 118: t16|=hexLineBuffer[4+i8];
  4113  0142  0835               	movf	decode_hex_len@i8,w
  4114  0143  3E04               	addlw	4
  4115  0144  3E20               	addlw	(low (_hexLineBuffer| (0+256)))& (0+255)
  4116  0145  0086               	movwf	6
  4117  0146  3001               	movlw	1	; select bank2/3
  4118  0147  0087               	movwf	7
  4119  0148  0801               	movf	1,w
  4120  0149  00B1               	movwf	??_decode_hex_len
  4121  014A  01B2               	clrf	??_decode_hex_len+1
  4122  014B  0831               	movf	??_decode_hex_len,w
  4123  014C  04B3               	iorwf	decode_hex_len@t16,f
  4124  014D  0832               	movf	??_decode_hex_len+1,w
  4125  014E  04B4               	iorwf	decode_hex_len@t16+1,f
  4126                           
  4127                           ;iap.c: 119: binBuffer[binBufferLen]=t16;
  4128  014F  0021               	movlb	1	; select bank1
  4129  0150  3539               	lslf	_binBufferLen^(0+128),w
  4130  0151  3EA0               	addlw	(low (_binBuffer| (0+256)))& (0+255)
  4131  0152  0086               	movwf	6
  4132  0153  3001               	movlw	1	; select bank3/4
  4133  0154  0087               	movwf	7
  4134  0155  0020               	movlb	0	; select bank0
  4135  0156  0833               	movf	decode_hex_len@t16,w
  4136  0157  3FC0               	movwi [0]fsr1
  4137  0158  0834               	movf	decode_hex_len@t16+1,w
  4138  0159  3FC1               	movwi [1]fsr1
  4139                           
  4140                           ;iap.c: 120: binBufferLen++;
  4141  015A  3001               	movlw	1
  4142  015B  00B1               	movwf	??_decode_hex_len
  4143  015C  0831               	movf	??_decode_hex_len,w
  4144  015D  0021               	movlb	1	; select bank1
  4145  015E  07B9               	addwf	_binBufferLen^(0+128),f
  4146                           
  4147                           ;iap.c: 122: if(binBufferLen>=32){
  4148  015F  3020               	movlw	32
  4149  0160  0239               	subwf	_binBufferLen^(0+128),w
  4150  0161  1C03               	skipc
  4151  0162  2978               	goto	l2625
  4152                           
  4153                           ;iap.c: 123: api_write_block(addrWritedFlash,binBuffer);
  4154  0163  0842               	movf	(_addrWritedFlash+1)^(0+128),w
  4155  0164  0020               	movlb	0	; select bank0
  4156  0165  00AA               	movwf	api_write_block@addr+1
  4157  0166  0021               	movlb	1	; select bank1
  4158  0167  0841               	movf	_addrWritedFlash^(0+128),w
  4159  0168  0020               	movlb	0	; select bank0
  4160  0169  00A9               	movwf	api_write_block@addr
  4161  016A  30A0               	movlw	(low (_binBuffer| (0+256)))& (0+255)
  4162  016B  00B1               	movwf	??_decode_hex_len
  4163  016C  0831               	movf	??_decode_hex_len,w
  4164  016D  00AB               	movwf	api_write_block@binbuf
  4165  016E  3182  22E5  3180   	fcall	_api_write_block
  4166                           
  4167                           ;iap.c: 124: addrWritedFlash+=32;
  4168  0171  3020               	movlw	32
  4169  0172  0021               	movlb	1	; select bank1
  4170  0173  07C1               	addwf	_addrWritedFlash^(0+128),f
  4171  0174  3000               	movlw	0
  4172  0175  3DC2               	addwfc	(_addrWritedFlash+1)^(0+128),f
  4173                           
  4174                           ;iap.c: 125: binBufferLen-=32;
  4175  0176  3020               	movlw	32
  4176  0177  02B9               	subwf	_binBufferLen^(0+128),f
  4177  0178                     l2625:	
  4178  0178  3002               	movlw	2
  4179  0179  0020               	movlb	0	; select bank0
  4180  017A  00B1               	movwf	??_decode_hex_len
  4181  017B  0831               	movf	??_decode_hex_len,w
  4182  017C  07B5               	addwf	decode_hex_len@i8,f
  4183  017D  292A               	goto	l2627
  4184  017E                     l2629:	
  4185                           
  4186                           ;iap.c: 126: }
  4187                           ;iap.c: 129: }
  4188                           ;iap.c: 130: }while(0);
  4189                           ;iap.c: 131: m_mem_set(hexLineBuffer,0,sizeof(hexLineBuffer));
  4190  017E  0020               	movlb	0	; select bank0
  4191  017F  01A0               	clrf	m_mem_set@x
  4192  0180  3030               	movlw	48
  4193  0181  00A1               	movwf	m_mem_set@len
  4194  0182  3000               	movlw	0
  4195  0183  00A2               	movwf	m_mem_set@len+1
  4196  0184  3020               	movlw	(low (_hexLineBuffer| (0+256)))& (0+255)
  4197  0185  3185  252A         	fcall	_m_mem_set
  4198  0187  0008               	return
  4199  0188                     __end_of_decode_hex_len:	
  4200                           ;iap.c: 132: return 0;
  4201                           ;	Return value of _decode_hex_len is never used
  4202                           
  4203                           
  4204                           	psect	text8
  4205  033C                     __ptext8:	
  4206 ;; *************** function _m_str_h2b *****************
  4207 ;; Defined at:
  4208 ;;		line 207 in file "src/depend/m_string.c"
  4209 ;; Parameters:    Size  Location     Type
  4210 ;;  b               1    wreg     PTR unsigned char 
  4211 ;;		 -> hexLineBuffer(48), 
  4212 ;;  h               1    2[BANK0 ] PTR unsigned char 
  4213 ;;		 -> hexLineBuffer(48), 
  4214 ;;  len             2    3[BANK0 ] unsigned int 
  4215 ;; Auto vars:     Size  Location     Type
  4216 ;;  b               1    9[BANK0 ] PTR unsigned char 
  4217 ;;		 -> hexLineBuffer(48), 
  4218 ;;  i               2    7[BANK0 ] unsigned int 
  4219 ;;  bb              1   11[BANK0 ] unsigned char 
  4220 ;;  s               1   10[BANK0 ] unsigned char 
  4221 ;; Return value:  Size  Location     Type
  4222 ;;                  2    2[BANK0 ] unsigned int 
  4223 ;; Registers used:
  4224 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4225 ;; Tracked objects:
  4226 ;;		On entry : 0/0
  4227 ;;		On exit  : 0/0
  4228 ;;		Unchanged: 0/0
  4229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4230 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4231 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4232 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4233 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4234 ;;Total ram usage:       10 bytes
  4235 ;; Hardware stack levels used:    1
  4236 ;; Hardware stack levels required when called:    3
  4237 ;; This function calls:
  4238 ;;		__chr2hex
  4239 ;; This function is called by:
  4240 ;;		_decode_hex_len
  4241 ;; This function uses a non-reentrant model
  4242 ;;
  4243                           
  4244                           
  4245                           ;psect for function _m_str_h2b
  4246  033C                     _m_str_h2b:	
  4247                           
  4248                           ;incstack = 0
  4249                           ; Regs used in _m_str_h2b: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4250                           ;m_str_h2b@b stored from wreg
  4251  033C  0020               	movlb	0	; select bank0
  4252  033D  00A9               	movwf	m_str_h2b@b
  4253                           
  4254                           ;m_string.c: 209: uint16_t i=len;
  4255  033E  0824               	movf	m_str_h2b@len+1,w
  4256  033F  00A8               	movwf	m_str_h2b@i+1
  4257  0340  0823               	movf	m_str_h2b@len,w
  4258  0341  00A7               	movwf	m_str_h2b@i
  4259  0342                     l2535:	
  4260                           ;m_string.c: 210: uint8_t bb,s;
  4261                           ;m_string.c: 211: while(i>=2)
  4262                           
  4263  0342  3000               	movlw	0
  4264  0343  0228               	subwf	m_str_h2b@i+1,w
  4265  0344  3002               	movlw	2
  4266  0345  1903               	skipnz
  4267  0346  0227               	subwf	m_str_h2b@i,w
  4268  0347  1C03               	btfss	3,0
  4269  0348  2B87               	goto	l2537
  4270                           
  4271                           ;m_string.c: 212: {
  4272                           ;m_string.c: 213: bb=0;
  4273  0349  01AB               	clrf	m_str_h2b@bb
  4274                           
  4275                           ;m_string.c: 214: s=*h++;
  4276  034A  0822               	movf	m_str_h2b@h,w
  4277  034B  0086               	movwf	6
  4278  034C  3001               	movlw	1	; select bank2/3
  4279  034D  0087               	movwf	7
  4280  034E  0801               	movf	1,w
  4281  034F  00A5               	movwf	??_m_str_h2b
  4282  0350  0825               	movf	??_m_str_h2b,w
  4283  0351  00AA               	movwf	m_str_h2b@s
  4284  0352  3001               	movlw	1
  4285  0353  00A5               	movwf	??_m_str_h2b
  4286  0354  0825               	movf	??_m_str_h2b,w
  4287  0355  07A2               	addwf	m_str_h2b@h,f
  4288                           
  4289                           ;m_string.c: 216: bb=_chr2hex(s);
  4290  0356  082A               	movf	m_str_h2b@s,w
  4291  0357  3184  244A  3183   	fcall	__chr2hex
  4292  035A  0020               	movlb	0	; select bank0
  4293  035B  00A5               	movwf	??_m_str_h2b
  4294  035C  0825               	movf	??_m_str_h2b,w
  4295  035D  00AB               	movwf	m_str_h2b@bb
  4296                           
  4297                           ;m_string.c: 217: bb<<=4;
  4298  035E  0EAB               	swapf	m_str_h2b@bb,f
  4299  035F  30F0               	movlw	240
  4300  0360  05AB               	andwf	m_str_h2b@bb,f
  4301                           
  4302                           ;m_string.c: 218: s=*h++;
  4303  0361  0822               	movf	m_str_h2b@h,w
  4304  0362  0086               	movwf	6
  4305  0363  3001               	movlw	1	; select bank2/3
  4306  0364  0087               	movwf	7
  4307  0365  0801               	movf	1,w
  4308  0366  00A5               	movwf	??_m_str_h2b
  4309  0367  0825               	movf	??_m_str_h2b,w
  4310  0368  00AA               	movwf	m_str_h2b@s
  4311  0369  3001               	movlw	1
  4312  036A  00A5               	movwf	??_m_str_h2b
  4313  036B  0825               	movf	??_m_str_h2b,w
  4314  036C  07A2               	addwf	m_str_h2b@h,f
  4315                           
  4316                           ;m_string.c: 219: bb= bb+_chr2hex(s);
  4317  036D  082A               	movf	m_str_h2b@s,w
  4318  036E  3184  244A  3183   	fcall	__chr2hex
  4319  0371  0020               	movlb	0	; select bank0
  4320  0372  072B               	addwf	m_str_h2b@bb,w
  4321  0373  00A5               	movwf	??_m_str_h2b
  4322  0374  0825               	movf	??_m_str_h2b,w
  4323  0375  00AB               	movwf	m_str_h2b@bb
  4324                           
  4325                           ;m_string.c: 220: *b++=bb;
  4326  0376  082B               	movf	m_str_h2b@bb,w
  4327  0377  00A5               	movwf	??_m_str_h2b
  4328  0378  0829               	movf	m_str_h2b@b,w
  4329  0379  0086               	movwf	6
  4330  037A  3001               	movlw	1	; select bank2/3
  4331  037B  0087               	movwf	7
  4332  037C  0825               	movf	??_m_str_h2b,w
  4333  037D  0081               	movwf	1
  4334  037E  3001               	movlw	1
  4335  037F  00A5               	movwf	??_m_str_h2b
  4336  0380  0825               	movf	??_m_str_h2b,w
  4337  0381  07A9               	addwf	m_str_h2b@b,f
  4338                           
  4339                           ;m_string.c: 221: i-=2;
  4340  0382  3002               	movlw	2
  4341  0383  02A7               	subwf	m_str_h2b@i,f
  4342  0384  3000               	movlw	0
  4343  0385  3BA8               	subwfb	m_str_h2b@i+1,f
  4344  0386  2B42               	goto	l2535
  4345  0387                     l2537:	
  4346                           
  4347                           ;m_string.c: 222: }
  4348                           ;m_string.c: 223: return (len>>1);
  4349  0387  0824               	movf	m_str_h2b@len+1,w
  4350  0388  00A6               	movwf	??_m_str_h2b+1
  4351  0389  0823               	movf	m_str_h2b@len,w
  4352  038A  00A5               	movwf	??_m_str_h2b
  4353  038B  36A6               	lsrf	??_m_str_h2b+1,f
  4354  038C  0CA5               	rrf	??_m_str_h2b,f
  4355  038D  0825               	movf	??_m_str_h2b,w
  4356  038E  00A2               	movwf	?_m_str_h2b
  4357  038F  0826               	movf	??_m_str_h2b+1,w
  4358  0390  00A3               	movwf	?_m_str_h2b+1
  4359  0391  0008               	return
  4360  0392                     __end_of_m_str_h2b:	
  4361                           
  4362                           	psect	text9
  4363  044A                     __ptext9:	
  4364 ;; *************** function __chr2hex *****************
  4365 ;; Defined at:
  4366 ;;		line 196 in file "src/depend/m_string.c"
  4367 ;; Parameters:    Size  Location     Type
  4368 ;;  c               1    wreg     unsigned char 
  4369 ;; Auto vars:     Size  Location     Type
  4370 ;;  c               1    1[BANK0 ] unsigned char 
  4371 ;;  h               1    0[BANK0 ] unsigned char 
  4372 ;; Return value:  Size  Location     Type
  4373 ;;                  1    wreg      unsigned char 
  4374 ;; Registers used:
  4375 ;;		wreg, status,2, status,0
  4376 ;; Tracked objects:
  4377 ;;		On entry : 0/0
  4378 ;;		On exit  : 0/0
  4379 ;;		Unchanged: 0/0
  4380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4382 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4383 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4384 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4385 ;;Total ram usage:        3 bytes
  4386 ;; Hardware stack levels used:    1
  4387 ;; Hardware stack levels required when called:    2
  4388 ;; This function calls:
  4389 ;;		Nothing
  4390 ;; This function is called by:
  4391 ;;		_m_str_h2b
  4392 ;; This function uses a non-reentrant model
  4393 ;;
  4394                           
  4395                           
  4396                           ;psect for function __chr2hex
  4397  044A                     __chr2hex:	
  4398                           
  4399                           ;incstack = 0
  4400                           ; Regs used in __chr2hex: [wreg+status,2+status,0]
  4401                           ;__chr2hex@c stored from wreg
  4402  044A  0020               	movlb	0	; select bank0
  4403  044B  00A1               	movwf	__chr2hex@c
  4404                           
  4405                           ;m_string.c: 197: uint8_t h=0;
  4406  044C  01A0               	clrf	__chr2hex@h
  4407                           
  4408                           ;m_string.c: 198: if(c>='0' && c <='9')h|=(c-'0');
  4409  044D  3030               	movlw	48
  4410  044E  0221               	subwf	__chr2hex@c,w
  4411  044F  1C03               	skipc
  4412  0450  2C58               	goto	l2475
  4413  0451  303A               	movlw	58
  4414  0452  0221               	subwf	__chr2hex@c,w
  4415  0453  1803               	skipnc
  4416  0454  2C58               	goto	l2475
  4417  0455  0821               	movf	__chr2hex@c,w
  4418  0456  3ED0               	addlw	208
  4419  0457  2C6D               	goto	L3
  4420  0458                     l2475:	
  4421                           
  4422                           ;m_string.c: 199: else if(c>='A' && c<='F')h|=(c-'A'+0x0a);
  4423  0458  3041               	movlw	65
  4424  0459  0221               	subwf	__chr2hex@c,w
  4425  045A  1C03               	skipc
  4426  045B  2C63               	goto	l2481
  4427  045C  3047               	movlw	71
  4428  045D  0221               	subwf	__chr2hex@c,w
  4429  045E  1803               	skipnc
  4430  045F  2C63               	goto	l2481
  4431  0460  0821               	movf	__chr2hex@c,w
  4432  0461  3EC9               	addlw	201
  4433  0462  2C6D               	goto	L3
  4434  0463                     l2481:	
  4435                           
  4436                           ;m_string.c: 200: else if(c>='a' && c<='f')h|=(c-'a'+0x0a);
  4437  0463  3061               	movlw	97
  4438  0464  0221               	subwf	__chr2hex@c,w
  4439  0465  1C03               	skipc
  4440  0466  2C70               	goto	l2487
  4441  0467  3067               	movlw	103
  4442  0468  0221               	subwf	__chr2hex@c,w
  4443  0469  1803               	skipnc
  4444  046A  2C70               	goto	l2487
  4445  046B  0821               	movf	__chr2hex@c,w
  4446  046C  3EA9               	addlw	169
  4447  046D                     L3:	
  4448  046D  00F4               	movwf	??__chr2hex
  4449  046E  0874               	movf	??__chr2hex,w
  4450  046F  04A0               	iorwf	__chr2hex@h,f
  4451  0470                     l2487:	
  4452                           
  4453                           ;m_string.c: 202: return h;
  4454  0470  0820               	movf	__chr2hex@h,w
  4455  0471  0008               	return
  4456  0472                     __end_of__chr2hex:	
  4457                           
  4458                           	psect	text10
  4459  052A                     __ptext10:	
  4460 ;; *************** function _m_mem_set *****************
  4461 ;; Defined at:
  4462 ;;		line 32 in file "src/depend/m_string.c"
  4463 ;; Parameters:    Size  Location     Type
  4464 ;;  buf             1    wreg     PTR unsigned char 
  4465 ;;		 -> hexLineBuffer(48), 
  4466 ;;  x               1    0[BANK0 ] unsigned char 
  4467 ;;  len             2    1[BANK0 ] unsigned int 
  4468 ;; Auto vars:     Size  Location     Type
  4469 ;;  buf             1    5[COMMON] PTR unsigned char 
  4470 ;;		 -> hexLineBuffer(48), 
  4471 ;; Return value:  Size  Location     Type
  4472 ;;                  1    wreg      void 
  4473 ;; Registers used:
  4474 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4475 ;; Tracked objects:
  4476 ;;		On entry : 0/0
  4477 ;;		On exit  : 0/0
  4478 ;;		Unchanged: 0/0
  4479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4480 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4481 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4482 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4483 ;;      Totals:         2       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4484 ;;Total ram usage:        5 bytes
  4485 ;; Hardware stack levels used:    1
  4486 ;; Hardware stack levels required when called:    2
  4487 ;; This function calls:
  4488 ;;		Nothing
  4489 ;; This function is called by:
  4490 ;;		_decode_hex_len
  4491 ;; This function uses a non-reentrant model
  4492 ;;
  4493                           
  4494                           
  4495                           ;psect for function _m_mem_set
  4496  052A                     _m_mem_set:	
  4497                           
  4498                           ;incstack = 0
  4499                           ; Regs used in _m_mem_set: [wreg+fsr1l+fsr1h+status,2+status,0]
  4500                           ;m_mem_set@buf stored from wreg
  4501  052A  00F5               	movwf	m_mem_set@buf
  4502  052B                     l2547:	
  4503                           ;m_string.c: 34: while(len--)
  4504                           
  4505  052B  3001               	movlw	1
  4506  052C  0020               	movlb	0	; select bank0
  4507  052D  02A1               	subwf	m_mem_set@len,f
  4508  052E  3000               	movlw	0
  4509  052F  3BA2               	subwfb	m_mem_set@len+1,f
  4510  0530  0A21               	incf	m_mem_set@len,w
  4511  0531  1903               	btfsc	3,2
  4512  0532  0A22               	incf	m_mem_set@len+1,w
  4513  0533  1903               	btfsc	3,2
  4514  0534  0008               	return
  4515                           
  4516                           ;m_string.c: 35: {
  4517                           ;m_string.c: 36: *buf++=x;
  4518  0535  0020               	movlb	0	; select bank0
  4519  0536  0820               	movf	m_mem_set@x,w
  4520  0537  00F4               	movwf	??_m_mem_set
  4521  0538  0875               	movf	m_mem_set@buf,w
  4522  0539  0086               	movwf	6
  4523  053A  3001               	movlw	1	; select bank2/3
  4524  053B  0087               	movwf	7
  4525  053C  0874               	movf	??_m_mem_set,w
  4526  053D  0081               	movwf	1
  4527  053E  3001               	movlw	1
  4528  053F  00F4               	movwf	??_m_mem_set
  4529  0540  0874               	movf	??_m_mem_set,w
  4530  0541  07F5               	addwf	m_mem_set@buf,f
  4531  0542  2D2B               	goto	l2547
  4532  0543                     __end_of_m_mem_set:	
  4533                           
  4534                           	psect	text11
  4535  02E5                     __ptext11:	
  4536 ;; *************** function _api_write_block *****************
  4537 ;; Defined at:
  4538 ;;		line 56 in file "src/api/iap.c"
  4539 ;; Parameters:    Size  Location     Type
  4540 ;;  addr            2    9[BANK0 ] unsigned int 
  4541 ;;  binbuf          1   11[BANK0 ] PTR unsigned int 
  4542 ;;		 -> binBuffer(80), 
  4543 ;; Auto vars:     Size  Location     Type
  4544 ;;  buf            64    0[BANK4 ] unsigned int [32]
  4545 ;;  i               1   64[BANK4 ] unsigned char 
  4546 ;; Return value:  Size  Location     Type
  4547 ;;                  1    wreg      unsigned char 
  4548 ;; Registers used:
  4549 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4550 ;; Tracked objects:
  4551 ;;		On entry : 0/0
  4552 ;;		On exit  : 0/0
  4553 ;;		Unchanged: 0/0
  4554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4555 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4556 ;;      Locals:         0       0       0       0       0      65       0       0       0       0       0       0       
      +0       0
  4557 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4558 ;;      Totals:         0       8       0       0       0      65       0       0       0       0       0       0       
      +0       0
  4559 ;;Total ram usage:       73 bytes
  4560 ;; Hardware stack levels used:    1
  4561 ;; Hardware stack levels required when called:    4
  4562 ;; This function calls:
  4563 ;;		_FLASH_EraseBlock
  4564 ;;		_FLASH_ReadWord
  4565 ;;		_FLASH_WriteBlock
  4566 ;; This function is called by:
  4567 ;;		_decode_hex_len
  4568 ;; This function uses a non-reentrant model
  4569 ;;
  4570                           
  4571                           
  4572                           ;psect for function _api_write_block
  4573  02E5                     _api_write_block:	
  4574                           
  4575                           ;iap.c: 58: uint8_t i;
  4576                           ;iap.c: 59: uint16_t buf[32];
  4577                           ;iap.c: 61: FLASH_EraseBlock(addr);
  4578                           
  4579                           ;incstack = 0
  4580                           ; Regs used in _api_write_block: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4581  02E5  0020               	movlb	0	; select bank0
  4582  02E6  082A               	movf	api_write_block@addr+1,w
  4583  02E7  00F5               	movwf	FLASH_EraseBlock@startAddr+1
  4584  02E8  0829               	movf	api_write_block@addr,w
  4585  02E9  00F4               	movwf	FLASH_EraseBlock@startAddr
  4586  02EA  3184  24BB  3182   	fcall	_FLASH_EraseBlock
  4587                           
  4588                           ;iap.c: 62: FLASH_WriteBlock(addr,binbuf);
  4589  02ED  0020               	movlb	0	; select bank0
  4590  02EE  082A               	movf	api_write_block@addr+1,w
  4591  02EF  00A2               	movwf	FLASH_WriteBlock@writeAddr+1
  4592  02F0  0829               	movf	api_write_block@addr,w
  4593  02F1  00A1               	movwf	FLASH_WriteBlock@writeAddr
  4594  02F2  082B               	movf	api_write_block@binbuf,w
  4595  02F3  00AC               	movwf	??_api_write_block
  4596  02F4  082C               	movf	??_api_write_block,w
  4597  02F5  00A3               	movwf	FLASH_WriteBlock@flashWordArray
  4598  02F6  3182  2288  3182   	fcall	_FLASH_WriteBlock
  4599                           
  4600                           ;iap.c: 63: for (i=0; i<32; i++){
  4601  02F9  0024               	movlb	4	; select bank4
  4602  02FA  01E0               	clrf	api_write_block@i^(0+512)
  4603  02FB                     L4:	
  4604  02FB  3020               	movlw	32
  4605  02FC  0260               	subwf	api_write_block@i^(0+512),w
  4606  02FD  1803               	btfsc	3,0
  4607  02FE  0008               	return
  4608                           
  4609                           ;iap.c: 64: buf[i] = FLASH_ReadWord((addr+i));
  4610  02FF  0860               	movf	api_write_block@i^(0+512),w
  4611  0300  0020               	movlb	0	; select bank0
  4612  0301  0729               	addwf	api_write_block@addr,w
  4613  0302  00F4               	movwf	FLASH_ReadWord@flashAddr
  4614  0303  082A               	movf	api_write_block@addr+1,w
  4615  0304  1803               	skipnc
  4616  0305  0A2A               	incf	api_write_block@addr+1,w
  4617  0306  00F5               	movwf	FLASH_ReadWord@flashAddr+1
  4618  0307  3184  24F5  3182   	fcall	_FLASH_ReadWord
  4619  030A  0024               	movlb	4	; select bank4
  4620  030B  3560               	lslf	api_write_block@i^(0+512),w
  4621  030C  3E20               	addlw	(low (api_write_block@buf| (0+512)))& (0+255)
  4622  030D  0086               	movwf	6
  4623  030E  3002               	movlw	2	; select bank4/5
  4624  030F  0087               	movwf	7
  4625  0310  0874               	movf	?_FLASH_ReadWord,w
  4626  0311  3FC0               	movwi [0]fsr1
  4627  0312  0875               	movf	?_FLASH_ReadWord+1,w
  4628  0313  3FC1               	movwi [1]fsr1
  4629                           
  4630                           ;iap.c: 65: if(buf[i]!=binbuf[i]){
  4631  0314  3560               	lslf	api_write_block@i^(0+512),w
  4632  0315  0020               	movlb	0	; select bank0
  4633  0316  072B               	addwf	api_write_block@binbuf,w
  4634  0317  00AC               	movwf	??_api_write_block
  4635  0318  082C               	movf	??_api_write_block,w
  4636  0319  0086               	movwf	6
  4637  031A  3001               	movlw	1	; select bank2/3
  4638  031B  0087               	movwf	7
  4639  031C  3F40               	moviw [0]fsr1
  4640  031D  00AD               	movwf	??_api_write_block+1
  4641  031E  3F41               	moviw [1]fsr1
  4642  031F  00AE               	movwf	??_api_write_block+2
  4643  0320  0024               	movlb	4	; select bank4
  4644  0321  3560               	lslf	api_write_block@i^(0+512),w
  4645  0322  3E20               	addlw	(low (api_write_block@buf| (0+512)))& (0+255)
  4646  0323  0086               	movwf	6
  4647  0324  3002               	movlw	2	; select bank4/5
  4648  0325  0087               	movwf	7
  4649  0326  3F40               	moviw [0]fsr1
  4650  0327  0020               	movlb	0	; select bank0
  4651  0328  00AF               	movwf	??_api_write_block+3
  4652  0329  3F41               	moviw [1]fsr1
  4653  032A  00B0               	movwf	??_api_write_block+4
  4654  032B  082E               	movf	??_api_write_block+2,w
  4655  032C  0630               	xorwf	??_api_write_block+4,w
  4656  032D  1D03               	skipz
  4657  032E  2B31               	goto	u1845
  4658  032F  082D               	movf	??_api_write_block+1,w
  4659  0330  062F               	xorwf	??_api_write_block+3,w
  4660  0331                     u1845:	
  4661  0331  1903               	skipnz
  4662  0332  2B35               	goto	l2507
  4663                           
  4664                           ;iap.c: 66: __nop();
  4665  0333  0000               	nop
  4666                           
  4667                           ;iap.c: 67: __nop();
  4668  0334  0000               	nop
  4669  0335                     l2507:	
  4670  0335  3001               	movlw	1
  4671  0336  0020               	movlb	0	; select bank0
  4672  0337  00AC               	movwf	??_api_write_block
  4673  0338  082C               	movf	??_api_write_block,w
  4674  0339  0024               	movlb	4	; select bank4
  4675  033A  07E0               	addwf	api_write_block@i^(0+512),f
  4676  033B  2AFB               	goto	L4
  4677  033C                     __end_of_api_write_block:	
  4678                           ;iap.c: 68: }
  4679                           ;iap.c: 69: }
  4680                           ;iap.c: 70: return 0;
  4681                           ;	Return value of _api_write_block is never used
  4682                           
  4683                           
  4684                           	psect	text12
  4685  0288                     __ptext12:	
  4686 ;; *************** function _FLASH_WriteBlock *****************
  4687 ;; Defined at:
  4688 ;;		line 93 in file "mcc_generated_files/memory.c"
  4689 ;; Parameters:    Size  Location     Type
  4690 ;;  writeAddr       2    1[BANK0 ] unsigned int 
  4691 ;;  flashWordArr    1    3[BANK0 ] PTR unsigned int 
  4692 ;;		 -> binBuffer(80), 
  4693 ;; Auto vars:     Size  Location     Type
  4694 ;;  i               1    8[BANK0 ] unsigned char 
  4695 ;;  GIEBitValue     1    7[BANK0 ] unsigned char 
  4696 ;; Return value:  Size  Location     Type
  4697 ;;                  1    wreg      char 
  4698 ;; Registers used:
  4699 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4700 ;; Tracked objects:
  4701 ;;		On entry : 0/0
  4702 ;;		On exit  : 0/0
  4703 ;;		Unchanged: 0/0
  4704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4705 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4706 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4707 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4708 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4709 ;;Total ram usage:        8 bytes
  4710 ;; Hardware stack levels used:    1
  4711 ;; Hardware stack levels required when called:    3
  4712 ;; This function calls:
  4713 ;;		_FLASH_EraseBlock
  4714 ;; This function is called by:
  4715 ;;		_api_write_block
  4716 ;;		_iap_process
  4717 ;;		_FLASH_WriteWord
  4718 ;; This function uses a non-reentrant model
  4719 ;;
  4720                           
  4721                           
  4722                           ;psect for function _FLASH_WriteBlock
  4723  0288                     _FLASH_WriteBlock:	
  4724                           
  4725                           ;memory.c: 96: uint8_t GIEBitValue = INTCONbits.GIE;
  4726                           
  4727                           ;incstack = 0
  4728                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4729  0288  3000               	movlw	0
  4730  0289  1B8B               	btfsc	11,7	;volatile
  4731  028A  3001               	movlw	1
  4732  028B  0020               	movlb	0	; select bank0
  4733  028C  00A7               	movwf	FLASH_WriteBlock@GIEBitValue
  4734                           
  4735                           ;memory.c: 97: uint8_t i;
  4736                           ;memory.c: 106: INTCONbits.GIE = 0;
  4737  028D  138B               	bcf	11,7	;volatile
  4738                           
  4739                           ;memory.c: 109: FLASH_EraseBlock(writeAddr);
  4740  028E  0822               	movf	FLASH_WriteBlock@writeAddr+1,w
  4741  028F  00F5               	movwf	FLASH_EraseBlock@startAddr+1
  4742  0290  0821               	movf	FLASH_WriteBlock@writeAddr,w
  4743  0291  00F4               	movwf	FLASH_EraseBlock@startAddr
  4744  0292  3184  24BB  3182   	fcall	_FLASH_EraseBlock
  4745                           
  4746                           ;memory.c: 112: PMCON1bits.CFGS = 0;
  4747  0295  0023               	movlb	3	; select bank3
  4748  0296  1315               	bcf	21,6	;volatile
  4749                           
  4750                           ;memory.c: 113: PMCON1bits.WREN = 1;
  4751  0297  1515               	bsf	21,2	;volatile
  4752                           
  4753                           ;memory.c: 114: PMCON1bits.LWLO = 1;
  4754  0298  1695               	bsf	21,5	;volatile
  4755                           
  4756                           ;memory.c: 116: for (i=0; i<32; i++)
  4757  0299  0020               	movlb	0	; select bank0
  4758  029A  01A8               	clrf	FLASH_WriteBlock@i
  4759  029B  3020               	movlw	32
  4760  029C  0228               	subwf	FLASH_WriteBlock@i,w
  4761  029D  1803               	btfsc	3,0
  4762  029E  2ADC               	goto	l193
  4763  029F                     l2439:	
  4764                           
  4765                           ;memory.c: 117: {
  4766                           ;memory.c: 119: PMADRL = (writeAddr & 0xFF);
  4767  029F  0821               	movf	FLASH_WriteBlock@writeAddr,w
  4768  02A0  0023               	movlb	3	; select bank3
  4769  02A1  0091               	movwf	17	;volatile
  4770                           
  4771                           ;memory.c: 121: PMADRH = ((writeAddr & 0xFF00) >> 8);
  4772  02A2  0020               	movlb	0	; select bank0
  4773  02A3  0822               	movf	FLASH_WriteBlock@writeAddr+1,w
  4774  02A4  0023               	movlb	3	; select bank3
  4775  02A5  0092               	movwf	18	;volatile
  4776                           
  4777                           ;memory.c: 124: PMDATL = flashWordArray[i];
  4778  02A6  0020               	movlb	0	; select bank0
  4779  02A7  3528               	lslf	FLASH_WriteBlock@i,w
  4780  02A8  0723               	addwf	FLASH_WriteBlock@flashWordArray,w
  4781  02A9  00A4               	movwf	??_FLASH_WriteBlock
  4782  02AA  0824               	movf	??_FLASH_WriteBlock,w
  4783  02AB  0086               	movwf	6
  4784  02AC  3001               	movlw	1	; select bank2/3
  4785  02AD  0087               	movwf	7
  4786  02AE  0801               	movf	1,w
  4787  02AF  0023               	movlb	3	; select bank3
  4788  02B0  0093               	movwf	19	;volatile
  4789                           
  4790                           ;memory.c: 125: PMDATH = ((flashWordArray[i] & 0xFF00) >> 8);
  4791  02B1  0020               	movlb	0	; select bank0
  4792  02B2  3528               	lslf	FLASH_WriteBlock@i,w
  4793  02B3  0723               	addwf	FLASH_WriteBlock@flashWordArray,w
  4794  02B4  00A4               	movwf	??_FLASH_WriteBlock
  4795  02B5  0824               	movf	??_FLASH_WriteBlock,w
  4796  02B6  0086               	movwf	6
  4797  02B7  3001               	movlw	1	; select bank2/3
  4798  02B8  0087               	movwf	7
  4799  02B9  3F40               	moviw [0]fsr1
  4800  02BA  00A5               	movwf	??_FLASH_WriteBlock+1
  4801  02BB  3F41               	moviw [1]fsr1
  4802  02BC  00A6               	movwf	??_FLASH_WriteBlock+2
  4803  02BD  0826               	movf	??_FLASH_WriteBlock+2,w
  4804  02BE  0023               	movlb	3	; select bank3
  4805  02BF  0094               	movwf	20	;volatile
  4806                           
  4807                           ;memory.c: 127: if(i == (32-1))
  4808  02C0  301F               	movlw	31
  4809  02C1  0020               	movlb	0	; select bank0
  4810  02C2  0628               	xorwf	FLASH_WriteBlock@i,w
  4811  02C3  1D03               	btfss	3,2
  4812  02C4  2AC7               	goto	l2451
  4813                           
  4814                           ;memory.c: 128: {
  4815                           ;memory.c: 130: PMCON1bits.LWLO = 0;
  4816  02C5  0023               	movlb	3	; select bank3
  4817  02C6  1295               	bcf	21,5	;volatile
  4818  02C7                     l2451:	
  4819                           
  4820                           ;memory.c: 131: }
  4821                           ;memory.c: 133: PMCON2 = 0x55;
  4822  02C7  3055               	movlw	85
  4823  02C8  0023               	movlb	3	; select bank3
  4824  02C9  0096               	movwf	22	;volsfr
  4825                           
  4826                           ;memory.c: 134: PMCON2 = 0xAA;
  4827  02CA  30AA               	movlw	170
  4828  02CB  0096               	movwf	22	;volsfr
  4829                           
  4830                           ;memory.c: 135: PMCON1bits.WR = 1;
  4831  02CC  1495               	bsf	21,1	;volatile
  4832                           
  4833                           ;memory.c: 136: __nop();
  4834  02CD  0000               	nop
  4835                           
  4836                           ;memory.c: 137: __nop();
  4837  02CE  0000               	nop
  4838                           
  4839                           ;memory.c: 139: writeAddr++;
  4840  02CF  3001               	movlw	1
  4841  02D0  0020               	movlb	0	; select bank0
  4842  02D1  07A1               	addwf	FLASH_WriteBlock@writeAddr,f
  4843  02D2  3000               	movlw	0
  4844  02D3  3DA2               	addwfc	FLASH_WriteBlock@writeAddr+1,f
  4845  02D4  3001               	movlw	1
  4846  02D5  00A4               	movwf	??_FLASH_WriteBlock
  4847  02D6  0824               	movf	??_FLASH_WriteBlock,w
  4848  02D7  07A8               	addwf	FLASH_WriteBlock@i,f
  4849  02D8  3020               	movlw	32
  4850  02D9  0228               	subwf	FLASH_WriteBlock@i,w
  4851  02DA  1C03               	skipc
  4852  02DB  2A9F               	goto	l2439
  4853  02DC                     l193:	
  4854                           
  4855                           ;memory.c: 140: }
  4856                           ;memory.c: 142: PMCON1bits.WREN = 0;
  4857  02DC  0023               	movlb	3	; select bank3
  4858  02DD  1115               	bcf	21,2	;volatile
  4859                           
  4860                           ;memory.c: 143: INTCONbits.GIE = GIEBitValue;
  4861  02DE  0020               	movlb	0	; select bank0
  4862  02DF  0C27               	rrf	FLASH_WriteBlock@GIEBitValue,w
  4863  02E0  1C03               	skipc
  4864  02E1  138B               	bcf	11,7	;volatile
  4865  02E2  1803               	skipnc
  4866  02E3  178B               	bsf	11,7	;volatile
  4867  02E4  0008               	return
  4868  02E5                     __end_of_FLASH_WriteBlock:	
  4869                           ;memory.c: 145: return 0;
  4870                           ;	Return value of _FLASH_WriteBlock is never used
  4871                           
  4872                           
  4873                           	psect	text13
  4874  04BB                     __ptext13:	
  4875 ;; *************** function _FLASH_EraseBlock *****************
  4876 ;; Defined at:
  4877 ;;		line 148 in file "mcc_generated_files/memory.c"
  4878 ;; Parameters:    Size  Location     Type
  4879 ;;  startAddr       2    4[COMMON] unsigned int 
  4880 ;; Auto vars:     Size  Location     Type
  4881 ;;  GIEBitValue     1    0[BANK0 ] unsigned char 
  4882 ;; Return value:  Size  Location     Type
  4883 ;;                  1    wreg      void 
  4884 ;; Registers used:
  4885 ;;		wreg, status,2, status,0
  4886 ;; Tracked objects:
  4887 ;;		On entry : 0/0
  4888 ;;		On exit  : 0/0
  4889 ;;		Unchanged: 0/0
  4890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4891 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4892 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4894 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4895 ;;Total ram usage:        3 bytes
  4896 ;; Hardware stack levels used:    1
  4897 ;; Hardware stack levels required when called:    2
  4898 ;; This function calls:
  4899 ;;		Nothing
  4900 ;; This function is called by:
  4901 ;;		_FLASH_WriteBlock
  4902 ;;		_api_write_block
  4903 ;; This function uses a non-reentrant model
  4904 ;;
  4905                           
  4906                           
  4907                           ;psect for function _FLASH_EraseBlock
  4908  04BB                     _FLASH_EraseBlock:	
  4909                           
  4910                           ;memory.c: 150: uint8_t GIEBitValue = INTCONbits.GIE;
  4911                           
  4912                           ;incstack = 0
  4913                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  4914  04BB  3000               	movlw	0
  4915  04BC  1B8B               	btfsc	11,7	;volatile
  4916  04BD  3001               	movlw	1
  4917  04BE  0020               	movlb	0	; select bank0
  4918  04BF  00A0               	movwf	FLASH_EraseBlock@GIEBitValue
  4919                           
  4920                           ;memory.c: 153: INTCONbits.GIE = 0;
  4921  04C0  138B               	bcf	11,7	;volatile
  4922                           
  4923                           ;memory.c: 155: PMADRL = (startAddr & 0xFF);
  4924  04C1  0874               	movf	FLASH_EraseBlock@startAddr,w
  4925  04C2  0023               	movlb	3	; select bank3
  4926  04C3  0091               	movwf	17	;volatile
  4927                           
  4928                           ;memory.c: 157: PMADRH = ((startAddr & 0xFF00) >> 8);
  4929  04C4  0875               	movf	FLASH_EraseBlock@startAddr+1,w
  4930  04C5  0092               	movwf	18	;volatile
  4931                           
  4932                           ;memory.c: 160: PMCON1bits.CFGS = 0;
  4933  04C6  1315               	bcf	21,6	;volatile
  4934                           
  4935                           ;memory.c: 161: PMCON1bits.FREE = 1;
  4936  04C7  1615               	bsf	21,4	;volatile
  4937                           
  4938                           ;memory.c: 162: PMCON1bits.WREN = 1;
  4939  04C8  1515               	bsf	21,2	;volatile
  4940                           
  4941                           ;memory.c: 165: PMCON2 = 0x55;
  4942  04C9  3055               	movlw	85
  4943  04CA  0096               	movwf	22	;volsfr
  4944                           
  4945                           ;memory.c: 166: PMCON2 = 0xAA;
  4946  04CB  30AA               	movlw	170
  4947  04CC  0096               	movwf	22	;volsfr
  4948                           
  4949                           ;memory.c: 167: PMCON1bits.WR = 1;
  4950  04CD  1495               	bsf	21,1	;volatile
  4951                           
  4952                           ;memory.c: 168: __nop();
  4953  04CE  0000               	nop
  4954                           
  4955                           ;memory.c: 169: __nop();
  4956  04CF  0000               	nop
  4957                           
  4958                           ;memory.c: 171: PMCON1bits.WREN = 0;
  4959  04D0  0023               	movlb	3	; select bank3
  4960  04D1  1115               	bcf	21,2	;volatile
  4961                           
  4962                           ;memory.c: 172: INTCONbits.GIE = GIEBitValue;
  4963  04D2  0020               	movlb	0	; select bank0
  4964  04D3  0C20               	rrf	FLASH_EraseBlock@GIEBitValue,w
  4965  04D4  1C03               	skipc
  4966  04D5  138B               	bcf	11,7	;volatile
  4967  04D6  1803               	skipnc
  4968  04D7  178B               	bsf	11,7	;volatile
  4969  04D8  0008               	return
  4970  04D9                     __end_of_FLASH_EraseBlock:	
  4971                           
  4972                           	psect	text14
  4973  04F5                     __ptext14:	
  4974 ;; *************** function _FLASH_ReadWord *****************
  4975 ;; Defined at:
  4976 ;;		line 57 in file "mcc_generated_files/memory.c"
  4977 ;; Parameters:    Size  Location     Type
  4978 ;;  flashAddr       2    4[COMMON] unsigned int 
  4979 ;; Auto vars:     Size  Location     Type
  4980 ;;  GIEBitValue     1    0[BANK0 ] unsigned char 
  4981 ;; Return value:  Size  Location     Type
  4982 ;;                  2    4[COMMON] unsigned int 
  4983 ;; Registers used:
  4984 ;;		wreg, status,2, status,0
  4985 ;; Tracked objects:
  4986 ;;		On entry : 0/0
  4987 ;;		On exit  : 0/0
  4988 ;;		Unchanged: 0/0
  4989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4990 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4991 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4993 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4994 ;;Total ram usage:        3 bytes
  4995 ;; Hardware stack levels used:    1
  4996 ;; Hardware stack levels required when called:    2
  4997 ;; This function calls:
  4998 ;;		Nothing
  4999 ;; This function is called by:
  5000 ;;		_api_write_block
  5001 ;;		_main
  5002 ;;		_FLASH_WriteWord
  5003 ;; This function uses a non-reentrant model
  5004 ;;
  5005                           
  5006                           
  5007                           ;psect for function _FLASH_ReadWord
  5008  04F5                     _FLASH_ReadWord:	
  5009                           
  5010                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
  5011                           
  5012                           ;incstack = 0
  5013                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
  5014  04F5  3000               	movlw	0
  5015  04F6  1B8B               	btfsc	11,7	;volatile
  5016  04F7  3001               	movlw	1
  5017  04F8  0020               	movlb	0	; select bank0
  5018  04F9  00A0               	movwf	FLASH_ReadWord@GIEBitValue
  5019                           
  5020                           ;memory.c: 61: INTCONbits.GIE = 0;
  5021  04FA  138B               	bcf	11,7	;volatile
  5022                           
  5023                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
  5024  04FB  0874               	movf	FLASH_ReadWord@flashAddr,w
  5025  04FC  0023               	movlb	3	; select bank3
  5026  04FD  0091               	movwf	17	;volatile
  5027                           
  5028                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
  5029  04FE  0875               	movf	FLASH_ReadWord@flashAddr+1,w
  5030  04FF  0092               	movwf	18	;volatile
  5031                           
  5032                           ;memory.c: 65: PMCON1bits.CFGS = 0;
  5033  0500  1315               	bcf	21,6	;volatile
  5034                           
  5035                           ;memory.c: 66: PMCON1bits.RD = 1;
  5036  0501  1415               	bsf	21,0	;volatile
  5037                           
  5038                           ;memory.c: 67: __nop();
  5039  0502  0000               	nop
  5040                           
  5041                           ;memory.c: 68: __nop();
  5042  0503  0000               	nop
  5043                           
  5044                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
  5045  0504  0020               	movlb	0	; select bank0
  5046  0505  0C20               	rrf	FLASH_ReadWord@GIEBitValue,w
  5047  0506  1C03               	skipc
  5048  0507  138B               	bcf	11,7	;volatile
  5049  0508  1803               	skipnc
  5050  0509  178B               	bsf	11,7	;volatile
  5051                           
  5052                           ;memory.c: 71: return ((uint16_t)((PMDATH << 8) | PMDATL));
  5053  050A  0023               	movlb	3	; select bank3
  5054  050B  0814               	movf	20,w	;volatile
  5055  050C  00F5               	movwf	?_FLASH_ReadWord+1
  5056  050D  0813               	movf	19,w	;volatile
  5057  050E  00F4               	movwf	?_FLASH_ReadWord
  5058  050F  0008               	return
  5059  0510                     __end_of_FLASH_ReadWord:	
  5060                           
  5061                           	psect	text15
  5062  059E                     __ptext15:	
  5063 ;; *************** function _SYSTEM_Initialize *****************
  5064 ;; Defined at:
  5065 ;;		line 69 in file "mcc_generated_files/mcc.c"
  5066 ;; Parameters:    Size  Location     Type
  5067 ;;		None
  5068 ;; Auto vars:     Size  Location     Type
  5069 ;;		None
  5070 ;; Return value:  Size  Location     Type
  5071 ;;                  1    wreg      void 
  5072 ;; Registers used:
  5073 ;;		wreg, status,2, status,0, pclath, cstack
  5074 ;; Tracked objects:
  5075 ;;		On entry : 0/0
  5076 ;;		On exit  : 0/0
  5077 ;;		Unchanged: 0/0
  5078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5082 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5083 ;;Total ram usage:        0 bytes
  5084 ;; Hardware stack levels used:    1
  5085 ;; Hardware stack levels required when called:    4
  5086 ;; This function calls:
  5087 ;;		_EUSART_Initialize
  5088 ;;		_OSCILLATOR_Initialize
  5089 ;;		_PIN_MANAGER_Initialize
  5090 ;;		_TMR2_Initialize
  5091 ;;		_WDT_Initialize
  5092 ;; This function is called by:
  5093 ;;		_main
  5094 ;; This function uses a non-reentrant model
  5095 ;;
  5096                           
  5097                           
  5098                           ;psect for function _SYSTEM_Initialize
  5099  059E                     _SYSTEM_Initialize:	
  5100                           
  5101                           ;mcc.c: 72: PIN_MANAGER_Initialize();
  5102                           
  5103                           ;incstack = 0
  5104                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5105  059E  3183  23D8  3185   	fcall	_PIN_MANAGER_Initialize
  5106                           
  5107                           ;mcc.c: 73: OSCILLATOR_Initialize();
  5108  05A1  3185  25D3  3185   	fcall	_OSCILLATOR_Initialize
  5109                           
  5110                           ;mcc.c: 74: WDT_Initialize();
  5111  05A4  3185  25D8  3185   	fcall	_WDT_Initialize
  5112                           
  5113                           ;mcc.c: 75: TMR2_Initialize();
  5114  05A7  3185  256A  3185   	fcall	_TMR2_Initialize
  5115                           
  5116                           ;mcc.c: 76: EUSART_Initialize();
  5117  05AA  3185  2510         	fcall	_EUSART_Initialize
  5118  05AC  0008               	return
  5119  05AD                     __end_of_SYSTEM_Initialize:	
  5120                           
  5121                           	psect	text16
  5122  05D8                     __ptext16:	
  5123 ;; *************** function _WDT_Initialize *****************
  5124 ;; Defined at:
  5125 ;;		line 87 in file "mcc_generated_files/mcc.c"
  5126 ;; Parameters:    Size  Location     Type
  5127 ;;		None
  5128 ;; Auto vars:     Size  Location     Type
  5129 ;;		None
  5130 ;; Return value:  Size  Location     Type
  5131 ;;                  1    wreg      void 
  5132 ;; Registers used:
  5133 ;;		wreg
  5134 ;; Tracked objects:
  5135 ;;		On entry : 0/0
  5136 ;;		On exit  : 0/0
  5137 ;;		Unchanged: 0/0
  5138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5142 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5143 ;;Total ram usage:        0 bytes
  5144 ;; Hardware stack levels used:    1
  5145 ;; Hardware stack levels required when called:    2
  5146 ;; This function calls:
  5147 ;;		Nothing
  5148 ;; This function is called by:
  5149 ;;		_SYSTEM_Initialize
  5150 ;; This function uses a non-reentrant model
  5151 ;;
  5152                           
  5153                           
  5154                           ;psect for function _WDT_Initialize
  5155  05D8                     _WDT_Initialize:	
  5156                           
  5157                           ;mcc.c: 90: WDTCON = 0x16;
  5158                           
  5159                           ;incstack = 0
  5160                           ; Regs used in _WDT_Initialize: [wreg]
  5161  05D8  3016               	movlw	22
  5162  05D9  0021               	movlb	1	; select bank1
  5163  05DA  0097               	movwf	23	;volatile
  5164  05DB  0008               	return
  5165  05DC                     __end_of_WDT_Initialize:	
  5166                           
  5167                           	psect	text17
  5168  056A                     __ptext17:	
  5169 ;; *************** function _TMR2_Initialize *****************
  5170 ;; Defined at:
  5171 ;;		line 63 in file "mcc_generated_files/tmr2.c"
  5172 ;; Parameters:    Size  Location     Type
  5173 ;;		None
  5174 ;; Auto vars:     Size  Location     Type
  5175 ;;		None
  5176 ;; Return value:  Size  Location     Type
  5177 ;;                  1    wreg      void 
  5178 ;; Registers used:
  5179 ;;		wreg, status,2, status,0, pclath, cstack
  5180 ;; Tracked objects:
  5181 ;;		On entry : 0/0
  5182 ;;		On exit  : 0/0
  5183 ;;		Unchanged: 0/0
  5184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5188 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5189 ;;Total ram usage:        0 bytes
  5190 ;; Hardware stack levels used:    1
  5191 ;; Hardware stack levels required when called:    3
  5192 ;; This function calls:
  5193 ;;		_TMR2_SetInterruptHandler
  5194 ;;		_TMR2_StartTimer
  5195 ;; This function is called by:
  5196 ;;		_SYSTEM_Initialize
  5197 ;; This function uses a non-reentrant model
  5198 ;;
  5199                           
  5200                           
  5201                           ;psect for function _TMR2_Initialize
  5202  056A                     _TMR2_Initialize:	
  5203                           
  5204                           ;tmr2.c: 68: T2CON = 0x4A;
  5205                           
  5206                           ;incstack = 0
  5207                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5208  056A  304A               	movlw	74
  5209  056B  0020               	movlb	0	; select bank0
  5210  056C  009C               	movwf	28	;volatile
  5211                           
  5212                           ;tmr2.c: 71: PR2 = 0x18;
  5213  056D  3018               	movlw	24
  5214  056E  009B               	movwf	27	;volatile
  5215                           
  5216                           ;tmr2.c: 74: TMR2 = 0x00;
  5217  056F  019A               	clrf	26	;volatile
  5218                           
  5219                           ;tmr2.c: 77: PIR1bits.TMR2IF = 0;
  5220  0570  1091               	bcf	17,1	;volatile
  5221                           
  5222                           ;tmr2.c: 80: PIE1bits.TMR2IE = 1;
  5223  0571  0021               	movlb	1	; select bank1
  5224  0572  1491               	bsf	17,1	;volatile
  5225                           
  5226                           ;tmr2.c: 83: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
  5227  0573  3000               	movlw	0
  5228  0574  00F4               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  5229  0575  3000               	movlw	0
  5230  0576  00F5               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  5231  0577  3185  25CD  3185   	fcall	_TMR2_SetInterruptHandler
  5232                           
  5233                           ;tmr2.c: 86: TMR2_StartTimer();
  5234  057A  3185  25DF         	fcall	_TMR2_StartTimer
  5235  057C  0008               	return
  5236  057D                     __end_of_TMR2_Initialize:	
  5237                           
  5238                           	psect	text18
  5239  05DF                     __ptext18:	
  5240 ;; *************** function _TMR2_StartTimer *****************
  5241 ;; Defined at:
  5242 ;;		line 89 in file "mcc_generated_files/tmr2.c"
  5243 ;; Parameters:    Size  Location     Type
  5244 ;;		None
  5245 ;; Auto vars:     Size  Location     Type
  5246 ;;		None
  5247 ;; Return value:  Size  Location     Type
  5248 ;;                  1    wreg      void 
  5249 ;; Registers used:
  5250 ;;		None
  5251 ;; Tracked objects:
  5252 ;;		On entry : 0/0
  5253 ;;		On exit  : 0/0
  5254 ;;		Unchanged: 0/0
  5255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5259 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5260 ;;Total ram usage:        0 bytes
  5261 ;; Hardware stack levels used:    1
  5262 ;; Hardware stack levels required when called:    2
  5263 ;; This function calls:
  5264 ;;		Nothing
  5265 ;; This function is called by:
  5266 ;;		_TMR2_Initialize
  5267 ;; This function uses a non-reentrant model
  5268 ;;
  5269                           
  5270                           
  5271                           ;psect for function _TMR2_StartTimer
  5272  05DF                     _TMR2_StartTimer:	
  5273                           
  5274                           ;tmr2.c: 92: T2CONbits.TMR2ON = 1;
  5275                           
  5276                           ;incstack = 0
  5277                           ; Regs used in _TMR2_StartTimer: []
  5278  05DF  0020               	movlb	0	; select bank0
  5279  05E0  151C               	bsf	28,2	;volatile
  5280  05E1  0008               	return
  5281  05E2                     __end_of_TMR2_StartTimer:	
  5282                           
  5283                           	psect	text19
  5284  05CD                     __ptext19:	
  5285 ;; *************** function _TMR2_SetInterruptHandler *****************
  5286 ;; Defined at:
  5287 ;;		line 142 in file "mcc_generated_files/tmr2.c"
  5288 ;; Parameters:    Size  Location     Type
  5289 ;;  InterruptHan    2    4[COMMON] PTR FTN()void 
  5290 ;;		 -> TMR2_DefaultInterruptHandler(1), 
  5291 ;; Auto vars:     Size  Location     Type
  5292 ;;		None
  5293 ;; Return value:  Size  Location     Type
  5294 ;;                  1    wreg      void 
  5295 ;; Registers used:
  5296 ;;		wreg
  5297 ;; Tracked objects:
  5298 ;;		On entry : 0/0
  5299 ;;		On exit  : 0/0
  5300 ;;		Unchanged: 0/0
  5301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5302 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5305 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5306 ;;Total ram usage:        2 bytes
  5307 ;; Hardware stack levels used:    1
  5308 ;; Hardware stack levels required when called:    2
  5309 ;; This function calls:
  5310 ;;		Nothing
  5311 ;; This function is called by:
  5312 ;;		_TMR2_Initialize
  5313 ;; This function uses a non-reentrant model
  5314 ;;
  5315                           
  5316                           
  5317                           ;psect for function _TMR2_SetInterruptHandler
  5318  05CD                     _TMR2_SetInterruptHandler:	
  5319                           
  5320                           ;tmr2.c: 143: TMR2_InterruptHandler = InterruptHandler;
  5321                           
  5322                           ;incstack = 0
  5323                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  5324  05CD  0875               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
  5325  05CE  0021               	movlb	1	; select bank1
  5326  05CF  00BF               	movwf	(_TMR2_InterruptHandler+1)^(0+128)
  5327  05D0  0874               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
  5328  05D1  00BE               	movwf	_TMR2_InterruptHandler^(0+128)
  5329  05D2  0008               	return
  5330  05D3                     __end_of_TMR2_SetInterruptHandler:	
  5331                           
  5332                           	psect	text20
  5333  03D8                     __ptext20:	
  5334 ;; *************** function _PIN_MANAGER_Initialize *****************
  5335 ;; Defined at:
  5336 ;;		line 104 in file "mcc_generated_files/pin_manager.c"
  5337 ;; Parameters:    Size  Location     Type
  5338 ;;		None
  5339 ;; Auto vars:     Size  Location     Type
  5340 ;;  state           1    4[COMMON] unsigned char 
  5341 ;; Return value:  Size  Location     Type
  5342 ;;                  1    wreg      void 
  5343 ;; Registers used:
  5344 ;;		wreg, status,2, status,0
  5345 ;; Tracked objects:
  5346 ;;		On entry : 0/0
  5347 ;;		On exit  : 0/0
  5348 ;;		Unchanged: 0/0
  5349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5351 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5353 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5354 ;;Total ram usage:        1 bytes
  5355 ;; Hardware stack levels used:    1
  5356 ;; Hardware stack levels required when called:    2
  5357 ;; This function calls:
  5358 ;;		Nothing
  5359 ;; This function is called by:
  5360 ;;		_SYSTEM_Initialize
  5361 ;; This function uses a non-reentrant model
  5362 ;;
  5363                           
  5364                           
  5365                           ;psect for function _PIN_MANAGER_Initialize
  5366  03D8                     _PIN_MANAGER_Initialize:	
  5367                           
  5368                           ;pin_manager.c: 109: LATA = 0x00;
  5369                           
  5370                           ;incstack = 0
  5371                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
  5372  03D8  0022               	movlb	2	; select bank2
  5373  03D9  018C               	clrf	12	;volatile
  5374                           
  5375                           ;pin_manager.c: 110: LATC = 0x00;
  5376  03DA  018E               	clrf	14	;volatile
  5377                           
  5378                           ;pin_manager.c: 115: TRISA = 0x0F;
  5379  03DB  300F               	movlw	15
  5380  03DC  0021               	movlb	1	; select bank1
  5381  03DD  008C               	movwf	12	;volatile
  5382                           
  5383                           ;pin_manager.c: 116: TRISC = 0x1f;
  5384  03DE  301F               	movlw	31
  5385  03DF  008E               	movwf	14	;volatile
  5386                           
  5387                           ;pin_manager.c: 121: ANSELC = 0x0F;
  5388  03E0  300F               	movlw	15
  5389  03E1  0023               	movlb	3	; select bank3
  5390  03E2  008E               	movwf	14	;volatile
  5391                           
  5392                           ;pin_manager.c: 122: ANSELA = 0x17;
  5393  03E3  3017               	movlw	23
  5394  03E4  008C               	movwf	12	;volatile
  5395                           
  5396                           ;pin_manager.c: 127: WPUA = 0x3B;
  5397  03E5  303B               	movlw	59
  5398  03E6  0024               	movlb	4	; select bank4
  5399  03E7  008C               	movwf	12	;volatile
  5400                           
  5401                           ;pin_manager.c: 128: WPUC = 0x30;
  5402  03E8  3030               	movlw	48
  5403  03E9  008E               	movwf	14	;volatile
  5404                           
  5405                           ;pin_manager.c: 129: OPTION_REGbits.nWPUEN = 0;
  5406  03EA  0021               	movlb	1	; select bank1
  5407  03EB  1395               	bcf	21,7	;volatile
  5408                           
  5409                           ;pin_manager.c: 134: ODCONA = 0x00;
  5410  03EC  0025               	movlb	5	; select bank5
  5411  03ED  018C               	clrf	12	;volatile
  5412                           
  5413                           ;pin_manager.c: 135: ODCONC = 0x00;
  5414  03EE  018E               	clrf	14	;volatile
  5415                           
  5416                           ;pin_manager.c: 142: bool state = (unsigned char)GIE;
  5417  03EF  3000               	movlw	0
  5418  03F0  1B8B               	btfsc	11,7	;volatile
  5419  03F1  3001               	movlw	1
  5420  03F2  00F4               	movwf	PIN_MANAGER_Initialize@state
  5421                           
  5422                           ;pin_manager.c: 143: GIE = 0;
  5423  03F3  138B               	bcf	11,7	;volatile
  5424                           
  5425                           ;pin_manager.c: 144: PPSLOCK = 0x55;
  5426  03F4  3055               	movlw	85
  5427  03F5  003C               	movlb	28	; select bank28
  5428  03F6  008F               	movwf	15	;volatile
  5429                           
  5430                           ;pin_manager.c: 145: PPSLOCK = 0xAA;
  5431  03F7  30AA               	movlw	170
  5432  03F8  008F               	movwf	15	;volatile
  5433                           
  5434                           ;pin_manager.c: 146: PPSLOCKbits.PPSLOCKED = 0x00;
  5435  03F9  100F               	bcf	15,0	;volatile
  5436                           
  5437                           ;pin_manager.c: 148: RXPPSbits.RXPPS = 0x14;
  5438  03FA  0815               	movf	21,w	;volatile
  5439  03FB  39E0               	andlw	-32
  5440  03FC  3814               	iorlw	20
  5441  03FD  0095               	movwf	21	;volatile
  5442                           
  5443                           ;pin_manager.c: 149: RA4PPSbits.RA4PPS = 0x04;
  5444  03FE  003D               	movlb	29	; select bank29
  5445  03FF  0814               	movf	20,w	;volatile
  5446  0400  39F0               	andlw	-16
  5447  0401  3804               	iorlw	4
  5448  0402  0094               	movwf	20	;volatile
  5449                           
  5450                           ;pin_manager.c: 150: RA5PPSbits.RA5PPS = 0x03;
  5451  0403  0815               	movf	21,w	;volatile
  5452  0404  39F0               	andlw	-16
  5453  0405  3803               	iorlw	3
  5454  0406  0095               	movwf	21	;volatile
  5455                           
  5456                           ;pin_manager.c: 151: RC5PPSbits.RC5PPS = 0x09;
  5457  0407  0825               	movf	37,w	;volatile
  5458  0408  39F0               	andlw	-16
  5459  0409  3809               	iorlw	9
  5460  040A  00A5               	movwf	37	;volatile
  5461                           
  5462                           ;pin_manager.c: 153: PPSLOCK = 0x55;
  5463  040B  3055               	movlw	85
  5464  040C  003C               	movlb	28	; select bank28
  5465  040D  008F               	movwf	15	;volatile
  5466                           
  5467                           ;pin_manager.c: 154: PPSLOCK = 0xAA;
  5468  040E  30AA               	movlw	170
  5469  040F  008F               	movwf	15	;volatile
  5470                           
  5471                           ;pin_manager.c: 155: PPSLOCKbits.PPSLOCKED = 0x01;
  5472  0410  140F               	bsf	15,0	;volatile
  5473                           
  5474                           ;pin_manager.c: 157: GIE = state;
  5475  0411  1C74               	btfss	PIN_MANAGER_Initialize@state,0
  5476  0412  2C15               	goto	u2010
  5477  0413  178B               	bsf	11,7	;volatile
  5478  0414  0008               	return
  5479  0415                     u2010:	
  5480  0415  138B               	bcf	11,7	;volatile
  5481  0416  0008               	return
  5482  0417                     __end_of_PIN_MANAGER_Initialize:	
  5483                           
  5484                           	psect	text21
  5485  05D3                     __ptext21:	
  5486 ;; *************** function _OSCILLATOR_Initialize *****************
  5487 ;; Defined at:
  5488 ;;		line 79 in file "mcc_generated_files/mcc.c"
  5489 ;; Parameters:    Size  Location     Type
  5490 ;;		None
  5491 ;; Auto vars:     Size  Location     Type
  5492 ;;		None
  5493 ;; Return value:  Size  Location     Type
  5494 ;;                  1    wreg      void 
  5495 ;; Registers used:
  5496 ;;		wreg, status,2
  5497 ;; Tracked objects:
  5498 ;;		On entry : 0/0
  5499 ;;		On exit  : 0/0
  5500 ;;		Unchanged: 0/0
  5501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5505 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5506 ;;Total ram usage:        0 bytes
  5507 ;; Hardware stack levels used:    1
  5508 ;; Hardware stack levels required when called:    2
  5509 ;; This function calls:
  5510 ;;		Nothing
  5511 ;; This function is called by:
  5512 ;;		_SYSTEM_Initialize
  5513 ;; This function uses a non-reentrant model
  5514 ;;
  5515                           
  5516                           
  5517                           ;psect for function _OSCILLATOR_Initialize
  5518  05D3                     _OSCILLATOR_Initialize:	
  5519                           
  5520                           ;mcc.c: 82: OSCCON = 0x7A;
  5521                           
  5522                           ;incstack = 0
  5523                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  5524  05D3  307A               	movlw	122
  5525  05D4  0021               	movlb	1	; select bank1
  5526  05D5  0099               	movwf	25	;volatile
  5527                           
  5528                           ;mcc.c: 84: OSCTUNE = 0x00;
  5529  05D6  0198               	clrf	24	;volatile
  5530  05D7  0008               	return
  5531  05D8                     __end_of_OSCILLATOR_Initialize:	
  5532                           
  5533                           	psect	text22
  5534  0510                     __ptext22:	
  5535 ;; *************** function _EUSART_Initialize *****************
  5536 ;; Defined at:
  5537 ;;		line 78 in file "mcc_generated_files/eusart.c"
  5538 ;; Parameters:    Size  Location     Type
  5539 ;;		None
  5540 ;; Auto vars:     Size  Location     Type
  5541 ;;		None
  5542 ;; Return value:  Size  Location     Type
  5543 ;;                  1    wreg      void 
  5544 ;; Registers used:
  5545 ;;		wreg, status,2
  5546 ;; Tracked objects:
  5547 ;;		On entry : 0/0
  5548 ;;		On exit  : 0/0
  5549 ;;		Unchanged: 0/0
  5550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5553 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5554 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5555 ;;Total ram usage:        1 bytes
  5556 ;; Hardware stack levels used:    1
  5557 ;; Hardware stack levels required when called:    2
  5558 ;; This function calls:
  5559 ;;		Nothing
  5560 ;; This function is called by:
  5561 ;;		_SYSTEM_Initialize
  5562 ;; This function uses a non-reentrant model
  5563 ;;
  5564                           
  5565                           
  5566                           ;psect for function _EUSART_Initialize
  5567  0510                     _EUSART_Initialize:	
  5568                           
  5569                           ;eusart.c: 81: PIE1bits.RCIE = 0;
  5570                           
  5571                           ;incstack = 0
  5572                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  5573  0510  0021               	movlb	1	; select bank1
  5574  0511  1291               	bcf	17,5	;volatile
  5575                           
  5576                           ;eusart.c: 82: PIE1bits.TXIE = 0;
  5577  0512  1211               	bcf	17,4	;volatile
  5578                           
  5579                           ;eusart.c: 87: BAUDCON = 0x08;
  5580  0513  3008               	movlw	8
  5581  0514  0023               	movlb	3	; select bank3
  5582  0515  009F               	movwf	31	;volatile
  5583                           
  5584                           ;eusart.c: 90: RCSTA = 0x90;
  5585  0516  3090               	movlw	144
  5586  0517  009D               	movwf	29	;volatile
  5587                           
  5588                           ;eusart.c: 93: TXSTA = 0x24;
  5589  0518  3024               	movlw	36
  5590  0519  009E               	movwf	30	;volatile
  5591                           
  5592                           ;eusart.c: 96: SPBRGL = 0xA0;
  5593  051A  30A0               	movlw	160
  5594  051B  009B               	movwf	27	;volatile
  5595                           
  5596                           ;eusart.c: 99: SPBRGH = 0x01;
  5597  051C  3001               	movlw	1
  5598  051D  009C               	movwf	28	;volatile
  5599                           
  5600                           ;eusart.c: 103: eusartTxHead = 0;
  5601  051E  01F7               	clrf	_eusartTxHead	;volatile
  5602                           
  5603                           ;eusart.c: 104: eusartTxTail = 0;
  5604  051F  01F6               	clrf	_eusartTxTail	;volatile
  5605                           
  5606                           ;eusart.c: 105: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  5607  0520  3010               	movlw	16
  5608  0521  00F4               	movwf	??_EUSART_Initialize
  5609  0522  0874               	movf	??_EUSART_Initialize,w
  5610  0523  0021               	movlb	1	; select bank1
  5611  0524  00C0               	movwf	_eusartTxBufferRemaining^(0+128)	;volatile
  5612                           
  5613                           ;eusart.c: 107: eusartRxHead = 0;
  5614  0525  01BD               	clrf	_eusartRxHead^(0+128)	;volatile
  5615                           
  5616                           ;eusart.c: 108: eusartRxTail = 0;
  5617  0526  01BC               	clrf	_eusartRxTail^(0+128)	;volatile
  5618                           
  5619                           ;eusart.c: 109: _bEusartRxCount = 0;
  5620  0527  01F8               	clrf	__bEusartRxCount	;volatile
  5621                           
  5622                           ;eusart.c: 112: PIE1bits.RCIE = 1;
  5623  0528  1691               	bsf	17,5	;volatile
  5624  0529  0008               	return
  5625  052A                     __end_of_EUSART_Initialize:	
  5626                           
  5627                           	psect	intentry
  5628  0004                     __pintentry:	
  5629 ;; *************** function _INTERRUPT_InterruptManager *****************
  5630 ;; Defined at:
  5631 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  5632 ;; Parameters:    Size  Location     Type
  5633 ;;		None
  5634 ;; Auto vars:     Size  Location     Type
  5635 ;;		None
  5636 ;; Return value:  Size  Location     Type
  5637 ;;                  1    wreg      void 
  5638 ;; Registers used:
  5639 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5640 ;; Tracked objects:
  5641 ;;		On entry : 0/0
  5642 ;;		On exit  : 0/0
  5643 ;;		Unchanged: 0/0
  5644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5647 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5648 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5649 ;;Total ram usage:        1 bytes
  5650 ;; Hardware stack levels used:    1
  5651 ;; Hardware stack levels required when called:    1
  5652 ;; This function calls:
  5653 ;;		_EUSART_Receive_ISR
  5654 ;;		_EUSART_Transmit_ISR
  5655 ;; This function is called by:
  5656 ;;		Interrupt level 1
  5657 ;; This function uses a non-reentrant model
  5658 ;;
  5659                           
  5660  0004                     _INTERRUPT_InterruptManager:	
  5661                           
  5662                           ;incstack = 0
  5663  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  5664                           
  5665                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5666  0005  3180               	pagesel	$
  5667  0006  0020               	movlb	0	; select bank0
  5668  0007  087F               	movf	127,w
  5669  0008  00F3               	movwf	??_INTERRUPT_InterruptManager
  5670                           
  5671                           ;interrupt_manager.c: 54: extern volatile unsigned char isRunInBoot;
  5672                           ;interrupt_manager.c: 55: if(isRunInBoot==0xaa){
  5673  0009  30AA               	movlw	170
  5674  000A  003F               	movlb	31	; select bank31
  5675  000B  067F               	xorwf	127,w	;volatile
  5676  000C  1D03               	btfss	3,2
  5677  000D  2810               	goto	i1l21
  5678  000E  3188               	pagesel	2052	;# 
  5679  000F  2804               	goto	2052	;# 
  5680  0010                     i1l21:	
  5681                           
  5682                           ;interrupt_manager.c: 58: }
  5683                           ;interrupt_manager.c: 59: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
  5684  0010  1F0B               	btfss	11,6	;volatile
  5685  0011  281B               	goto	i1l2239
  5686  0012  0021               	movlb	1	; select bank1
  5687  0013  1E11               	btfss	17,4	;volatile
  5688  0014  281B               	goto	i1l2239
  5689  0015  0020               	movlb	0	; select bank0
  5690  0016  1E11               	btfss	17,4	;volatile
  5691  0017  281B               	goto	i1l2239
  5692                           
  5693                           ;interrupt_manager.c: 60: {
  5694                           ;interrupt_manager.c: 61: EUSART_Transmit_ISR();
  5695  0018  3184  24D9  3180   	fcall	_EUSART_Transmit_ISR
  5696  001B                     i1l2239:	
  5697                           
  5698                           ;interrupt_manager.c: 62: }
  5699                           ;interrupt_manager.c: 63: if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits.RCIF
      +                           == 1)
  5700  001B  1F0B               	btfss	11,6	;volatile
  5701  001C  2826               	goto	i1l2247
  5702  001D  0021               	movlb	1	; select bank1
  5703  001E  1E91               	btfss	17,5	;volatile
  5704  001F  2826               	goto	i1l2247
  5705  0020  0020               	movlb	0	; select bank0
  5706  0021  1E91               	btfss	17,5	;volatile
  5707  0022  2826               	goto	i1l2247
  5708                           
  5709                           ;interrupt_manager.c: 64: {
  5710                           ;interrupt_manager.c: 65: EUSART_Receive_ISR();
  5711  0023  3184  2498  3180   	fcall	_EUSART_Receive_ISR
  5712  0026                     i1l2247:	
  5713                           
  5714                           ;interrupt_manager.c: 66: }
  5715                           ;interrupt_manager.c: 67: if(INTCONbits.PEIE == 1 && PIE1bits.TMR2IE == 1 && PIR1bits.TM
      +                          R2IF==1){
  5716  0026  1F0B               	btfss	11,6	;volatile
  5717  0027  2842               	goto	i1l28
  5718  0028  0021               	movlb	1	; select bank1
  5719  0029  1C91               	btfss	17,1	;volatile
  5720  002A  2842               	goto	i1l28
  5721  002B  0020               	movlb	0	; select bank0
  5722  002C  1C91               	btfss	17,1	;volatile
  5723  002D  2842               	goto	i1l28
  5724                           
  5725                           ;interrupt_manager.c: 68: PIR1bits.TMR2IF=0;
  5726  002E  1091               	bcf	17,1	;volatile
  5727                           
  5728                           ;interrupt_manager.c: 69: if(eusartRxIdleTime_ms)eusartRxIdleTime_ms++;
  5729  002F  0021               	movlb	1	; select bank1
  5730  0030  0836               	movf	_eusartRxIdleTime_ms^(0+128),w	;volatile
  5731  0031  0437               	iorwf	(_eusartRxIdleTime_ms+1)^(0+128),w	;volatile
  5732  0032  1903               	btfsc	3,2
  5733  0033  2838               	goto	i1l25
  5734  0034  3001               	movlw	1
  5735  0035  07B6               	addwf	_eusartRxIdleTime_ms^(0+128),f	;volatile
  5736  0036  3000               	movlw	0
  5737  0037  3DB7               	addwfc	(_eusartRxIdleTime_ms+1)^(0+128),f	;volatile
  5738  0038                     i1l25:	
  5739                           
  5740                           ;interrupt_manager.c: 70: if(eusartRxIdleTime_ms>20){
  5741  0038  3000               	movlw	0
  5742  0039  0237               	subwf	(_eusartRxIdleTime_ms+1)^(0+128),w	;volatile
  5743  003A  3015               	movlw	21
  5744  003B  1903               	skipnz
  5745  003C  0236               	subwf	_eusartRxIdleTime_ms^(0+128),w	;volatile
  5746  003D  1C03               	skipc
  5747  003E  2842               	goto	i1l28
  5748                           
  5749                           ;interrupt_manager.c: 71: eusartRxIdleTime_ms=0;
  5750  003F  01B6               	clrf	_eusartRxIdleTime_ms^(0+128)	;volatile
  5751  0040  01B7               	clrf	(_eusartRxIdleTime_ms+1)^(0+128)	;volatile
  5752                           
  5753                           ;interrupt_manager.c: 72: Event|=(1<<0);
  5754  0041  1479               	bsf	_Event,0	;volatile
  5755  0042                     i1l28:	
  5756                           ;interrupt_manager.c: 76: else
  5757                           ;interrupt_manager.c: 77: {
  5758                           
  5759                           ;interrupt_manager.c: 73: }
  5760                           ;interrupt_manager.c: 75: }
  5761                           
  5762  0042  0873               	movf	??_INTERRUPT_InterruptManager,w
  5763  0043  0020               	movlb	0	; select bank0
  5764  0044  00FF               	movwf	127
  5765  0045  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  5766  0046  0009               	retfie
  5767  0047                     __end_of_INTERRUPT_InterruptManager:	
  5768                           
  5769                           	psect	text24
  5770  04D9                     __ptext24:	
  5771 ;; *************** function _EUSART_Transmit_ISR *****************
  5772 ;; Defined at:
  5773 ;;		line 158 in file "mcc_generated_files/eusart.c"
  5774 ;; Parameters:    Size  Location     Type
  5775 ;;		None
  5776 ;; Auto vars:     Size  Location     Type
  5777 ;;		None
  5778 ;; Return value:  Size  Location     Type
  5779 ;;                  1    wreg      void 
  5780 ;; Registers used:
  5781 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5782 ;; Tracked objects:
  5783 ;;		On entry : 0/0
  5784 ;;		On exit  : 0/0
  5785 ;;		Unchanged: 0/0
  5786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5789 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5790 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5791 ;;Total ram usage:        1 bytes
  5792 ;; Hardware stack levels used:    1
  5793 ;; This function calls:
  5794 ;;		Nothing
  5795 ;; This function is called by:
  5796 ;;		_INTERRUPT_InterruptManager
  5797 ;; This function uses a non-reentrant model
  5798 ;;
  5799                           
  5800                           
  5801                           ;psect for function _EUSART_Transmit_ISR
  5802  04D9                     _EUSART_Transmit_ISR:	
  5803                           
  5804                           ;eusart.c: 162: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
  5805                           
  5806                           ;incstack = 0
  5807                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  5808  04D9  3010               	movlw	16
  5809  04DA  0021               	movlb	1	; select bank1
  5810  04DB  0240               	subwf	_eusartTxBufferRemaining^(0+128),w	;volatile
  5811  04DC  1803               	skipnc
  5812  04DD  2CF3               	goto	i1l153
  5813                           
  5814                           ;eusart.c: 163: {
  5815                           ;eusart.c: 164: TXREG = eusartTxBuffer[eusartTxTail++];
  5816  04DE  0876               	movf	_eusartTxTail,w
  5817  04DF  3EA0               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  5818  04E0  0086               	movwf	6
  5819  04E1  0187               	clrf	7
  5820  04E2  0801               	movf	1,w
  5821  04E3  0023               	movlb	3	; select bank3
  5822  04E4  009A               	movwf	26	;volatile
  5823  04E5  3001               	movlw	1
  5824  04E6  00F0               	movwf	??_EUSART_Transmit_ISR
  5825  04E7  0870               	movf	??_EUSART_Transmit_ISR,w
  5826  04E8  07F6               	addwf	_eusartTxTail,f	;volatile
  5827                           
  5828                           ;eusart.c: 165: if(sizeof(eusartTxBuffer) <= eusartTxTail)
  5829  04E9  3010               	movlw	16
  5830  04EA  0276               	subwf	_eusartTxTail,w	;volatile
  5831  04EB  1803               	btfsc	3,0
  5832                           
  5833                           ;eusart.c: 166: {
  5834                           ;eusart.c: 167: eusartTxTail = 0;
  5835  04EC  01F6               	clrf	_eusartTxTail	;volatile
  5836                           
  5837                           ;eusart.c: 168: }
  5838                           ;eusart.c: 169: eusartTxBufferRemaining++;
  5839  04ED  3001               	movlw	1
  5840  04EE  00F0               	movwf	??_EUSART_Transmit_ISR
  5841  04EF  0870               	movf	??_EUSART_Transmit_ISR,w
  5842  04F0  0021               	movlb	1	; select bank1
  5843  04F1  07C0               	addwf	_eusartTxBufferRemaining^(0+128),f	;volatile
  5844                           
  5845                           ;eusart.c: 170: }
  5846  04F2  0008               	return
  5847  04F3                     i1l153:	
  5848                           
  5849                           ;eusart.c: 171: else
  5850                           ;eusart.c: 172: {
  5851                           ;eusart.c: 173: PIE1bits.TXIE = 0;
  5852  04F3  1211               	bcf	17,4	;volatile
  5853  04F4  0008               	return
  5854  04F5                     __end_of_EUSART_Transmit_ISR:	
  5855                           
  5856                           	psect	text25
  5857  0498                     __ptext25:	
  5858 ;; *************** function _EUSART_Receive_ISR *****************
  5859 ;; Defined at:
  5860 ;;		line 177 in file "mcc_generated_files/eusart.c"
  5861 ;; Parameters:    Size  Location     Type
  5862 ;;		None
  5863 ;; Auto vars:     Size  Location     Type
  5864 ;;  t8              1    2[COMMON] unsigned char 
  5865 ;; Return value:  Size  Location     Type
  5866 ;;                  1    wreg      void 
  5867 ;; Registers used:
  5868 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5869 ;; Tracked objects:
  5870 ;;		On entry : 0/0
  5871 ;;		On exit  : 0/0
  5872 ;;		Unchanged: 0/0
  5873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5875 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5876 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5877 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5878 ;;Total ram usage:        3 bytes
  5879 ;; Hardware stack levels used:    1
  5880 ;; This function calls:
  5881 ;;		Nothing
  5882 ;; This function is called by:
  5883 ;;		_INTERRUPT_InterruptManager
  5884 ;; This function uses a non-reentrant model
  5885 ;;
  5886                           
  5887                           
  5888                           ;psect for function _EUSART_Receive_ISR
  5889  0498                     _EUSART_Receive_ISR:	
  5890                           
  5891                           ;eusart.c: 179: uint8_t t8;
  5892                           ;eusart.c: 180: if(1 == RCSTAbits.OERR){
  5893                           
  5894                           ;incstack = 0
  5895                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  5896  0498  0023               	movlb	3	; select bank3
  5897  0499  1C9D               	btfss	29,1	;volatile
  5898  049A  2C9D               	goto	i1l2171
  5899                           
  5900                           ;eusart.c: 181: RCSTAbits.CREN = 0;
  5901  049B  121D               	bcf	29,4	;volatile
  5902                           
  5903                           ;eusart.c: 182: RCSTAbits.CREN = 1;
  5904  049C  161D               	bsf	29,4	;volatile
  5905  049D                     i1l2171:	
  5906                           
  5907                           ;eusart.c: 183: }
  5908                           ;eusart.c: 186: t8=RCREG;
  5909  049D  0819               	movf	25,w	;volatile
  5910  049E  00F0               	movwf	??_EUSART_Receive_ISR
  5911  049F  0870               	movf	??_EUSART_Receive_ISR,w
  5912  04A0  00F2               	movwf	EUSART_Receive_ISR@t8
  5913                           
  5914                           ;eusart.c: 187: if(_bEusartRxCount<160){
  5915  04A1  30A0               	movlw	160
  5916  04A2  0278               	subwf	__bEusartRxCount,w	;volatile
  5917  04A3  1803               	skipnc
  5918  04A4  0008               	return
  5919                           
  5920                           ;eusart.c: 188: _bEusartRxBuffer[_bEusartRxCount]=t8;
  5921  04A5  0878               	movf	__bEusartRxCount,w	;volatile
  5922  04A6  3E40               	addlw	64
  5923  04A7  00F0               	movwf	??_EUSART_Receive_ISR
  5924  04A8  01F1               	clrf	??_EUSART_Receive_ISR+1
  5925  04A9  3023               	movlw	35
  5926  04AA  3DF1               	addwfc	??_EUSART_Receive_ISR+1,f
  5927  04AB  0870               	movf	??_EUSART_Receive_ISR,w
  5928  04AC  0086               	movwf	6
  5929  04AD  0871               	movf	??_EUSART_Receive_ISR+1,w
  5930  04AE  0087               	movwf	7
  5931  04AF  0872               	movf	EUSART_Receive_ISR@t8,w
  5932  04B0  0081               	movwf	1
  5933                           
  5934                           ;eusart.c: 189: _bEusartRxCount++;
  5935  04B1  3001               	movlw	1
  5936  04B2  00F0               	movwf	??_EUSART_Receive_ISR
  5937  04B3  0870               	movf	??_EUSART_Receive_ISR,w
  5938  04B4  07F8               	addwf	__bEusartRxCount,f	;volatile
  5939                           
  5940                           ;eusart.c: 190: eusartRxIdleTime_ms=10;
  5941  04B5  300A               	movlw	10
  5942  04B6  0021               	movlb	1	; select bank1
  5943  04B7  00B6               	movwf	_eusartRxIdleTime_ms^(0+128)	;volatile
  5944  04B8  3000               	movlw	0
  5945  04B9  00B7               	movwf	(_eusartRxIdleTime_ms^(0+128)+1)	;volatile
  5946  04BA  0008               	return
  5947  04BB                     __end_of_EUSART_Receive_ISR:	
  5948  007E                     btemp	set	126	;btemp
  5949  007E                     int$flags	set	126
  5950  007E                     wtemp0	set	126


Data Sizes:
    Strings     55
    Constant    17
    Data        3
    BSS         162
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     33      33
    BANK1            80      0      36
    BANK2            80      0      48
    BANK3            80      0      80
    BANK4            80     65      65
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           32      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    m_str_h2b@b	PTR unsigned char  size(1) Largest target is 48
		 -> hexLineBuffer(BANK2[48]), 

    m_str_h2b@h	PTR unsigned char  size(1) Largest target is 48
		 -> hexLineBuffer(BANK2[48]), 

    m_mem_set@buf	PTR unsigned char  size(1) Largest target is 48
		 -> hexLineBuffer(BANK2[48]), 

    uart_send_str@str	PTR unsigned char  size(2) Largest target is 20
		 -> STR_3(CODE[20]), STR_2(CODE[16]), STR_1(CODE[19]), 

    api_write_block@binbuf	PTR unsigned int  size(1) Largest target is 80
		 -> binBuffer(BANK3[80]), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR2_DefaultInterruptHandler(), 

    FLASH_WriteBlock@flashWordArray	PTR unsigned int  size(1) Largest target is 80
		 -> binBuffer(BANK3[80]), 


Critical Paths under _main in COMMON

    _main->_FLASH_ReadWord
    _main->_uart_send_str
    _iap_process->_iap_received_package
    _iap_process->_uart_send_str
    _iap_received_package->_uart_send_byte
    _decode_hex_len->_m_mem_set
    _m_str_h2b->__chr2hex
    _api_write_block->_FLASH_EraseBlock
    _api_write_block->_FLASH_ReadWord
    _FLASH_WriteBlock->_FLASH_EraseBlock
    _TMR2_Initialize->_TMR2_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART_Receive_ISR

Critical Paths under _main in BANK0

    _main->_iap_process
    _iap_process->_decode_xmodem_package
    _decode_xmodem_package->_decode_hex_len
    _decode_hex_len->_api_write_block
    _m_str_h2b->__chr2hex
    _api_write_block->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    _decode_hex_len->_api_write_block

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    6253
                                             28 BANK0      5     5      0
                     _FLASH_ReadWord
                  _SYSTEM_Initialize
                        _iap_process
                _uart_received_start
                      _uart_send_str
 ---------------------------------------------------------------------------------
 (1) _iap_process                                          3     3      0    5346
                                             25 BANK0      3     3      0
                   _FLASH_WriteBlock
              _decode_xmodem_package
               _iap_received_package
                     _uart_send_byte
                      _uart_send_str
 ---------------------------------------------------------------------------------
 (1) _uart_send_str                                        3     1      2     296
                                              4 COMMON     2     0      2
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _iap_received_package                                 2     2      0      99
                                              5 COMMON     1     1      0
                                              0 BANK0      1     1      0
                _uart_received_start
                     _uart_send_byte
 ---------------------------------------------------------------------------------
 (2) _uart_send_byte                                       1     1      0      31
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _uart_received_start                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _decode_xmodem_package                                3     3      0    3790
                                             22 BANK0      3     3      0
                     _decode_hex_len
 ---------------------------------------------------------------------------------
 (3) _decode_hex_len                                       5     5      0    3688
                                             17 BANK0      5     5      0
                    _api_write_block
                          _m_mem_set
                          _m_str_h2b
 ---------------------------------------------------------------------------------
 (4) _m_str_h2b                                           10     7      3     852
                                              2 BANK0     10     7      3
                           __chr2hex
 ---------------------------------------------------------------------------------
 (5) __chr2hex                                             3     3      0     322
                                              4 COMMON     1     1      0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _m_mem_set                                            5     2      3     283
                                              4 COMMON     2     2      0
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _api_write_block                                     73    70      3    2368
                                              9 BANK0      8     5      3
                                              0 BANK4     65    65      0
                   _FLASH_EraseBlock
                     _FLASH_ReadWord
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (5) _FLASH_WriteBlock                                     8     5      3    1065
                                              1 BANK0      8     5      3
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (6) _FLASH_EraseBlock                                     3     1      2     250
                                              4 COMMON     2     0      2
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _FLASH_ReadWord                                       3     1      2     327
                                              4 COMMON     2     0      2
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     142
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     108
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR2_SetInterruptHandler                             2     0      2     108
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      34
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                           1     1      0      23
                                              3 COMMON     1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
 ---------------------------------------------------------------------------------
 (8) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Receive_ISR                                   3     3      0      23
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FLASH_ReadWord
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
       _TMR2_StartTimer
     _WDT_Initialize
   _iap_process
     _FLASH_WriteBlock
       _FLASH_EraseBlock
     _decode_xmodem_package
       _decode_hex_len
         _api_write_block
           _FLASH_EraseBlock
           _FLASH_ReadWord
           _FLASH_WriteBlock
             _FLASH_EraseBlock
         _m_mem_set
         _m_str_h2b
           __chr2hex
     _iap_received_package
       _uart_received_start
       _uart_send_byte
     _uart_send_byte
     _uart_send_str
   _uart_received_start
   _uart_send_str

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3E0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     21      21       5       41.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      24       7       45.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      30       9       60.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50     41      41      13       81.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     110      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              20      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           20      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     110      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sat Nov 24 14:44:39 2018

        __end_of_TMR2_SetInterruptHandler 05D3                               __CFG_CP$OFF 0000  
                             __CFG_LVP$ON 0000                                       l331 03D0  
                                     l332 03D6                                       l193 02DC  
                                     l371 05B7                                       l380 047C  
                                     l438 0218                                       l368 05B1  
                                     l449 0217                                       l386 0494  
                                     _GIE 005F                                       _PR2 001B  
                         _TMR2_Initialize 056A                              __CFG_BORV$LO 0000  
                                     wreg 0009                           ??_uart_send_str 0020  
          FLASH_WriteBlock@flashWordArray 0023                            _decode_hex_len 0089  
                                    l2451 02C7                                      l2507 0335  
                                    l2603 00E9                                      l2605 0129  
                                    l2439 029F                                      l2535 0342  
                                    l2711 042B                                      l2481 0463  
                                    l2537 0387                                      l2625 0178  
                                    l2721 0443                                      l2547 052B  
                                    l2475 0458                                      l2627 012A  
                                    l2629 017E                                      l2805 023D  
                                    l2487 0470                                      l2743 03CA  
                                    l2719 0432                                      l2807 023F  
                                    l2585 00DF                                      l2745 0398  
                                    l2729 0448                                      l2819 0283  
                                    l2773 0475                                      l2793 0246  
                                    l2881 0204                                      l2883 01DC  
                                    l2885 020A                                      STR_1 0557  
                                    STR_2 058E                                      STR_3 0543  
                                    u2010 0415                                      _LATA 010C  
                                    _LATC 010E                                      u2307 01E6  
                                    u2085 03A6                                      u2317 022A  
                                    u2327 042E                                      u2337 043A  
                                    u2287 01BC                                      u2297 01CF  
                                    u1845 0331                                      u1925 00AF  
                                    u1935 00BD                                      i1l21 0010  
                                    u1975 00FD                                      i1l25 0038  
                                    u1985 013E                                      i1l28 0042  
                                    _TMR2 001A                                      _WPUA 020C  
                                    _WPUC 020E                              __CFG_WRT$OFF 0000  
                                    _main 0188                                      fsr0h 0005  
                                    fsr1h 0007                                      indf0 0000  
                                    fsr0l 0004                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                       ?_FLASH_WriteBlock 0021                             __CFG_BOREN$ON 0000  
                                    start 0047                        ??_FLASH_WriteBlock 0024  
                           __CFG_MCLRE$ON 0000                          ??_uart_send_byte 0074  
          __size_of_OSCILLATOR_Initialize 0005             __end_of_OSCILLATOR_Initialize 05D8  
                                   ?_main 0070                             __CFG_WDTE$OFF 0000  
                                   _T2CON 001C                                     i1l153 04F3  
                                   _RCREG 0199                                     _RCSTA 019D  
                                   _TRISA 008C                                     _TRISC 008E  
                    EUSART_Receive_ISR@t8 0072                                     _TXREG 019A  
                                   _TXSTA 019E                    __end_of_decode_hex_len 0188  
                                   _Event 0079                           _api_write_block 02E5  
                          _WDT_Initialize 05D8              __end_of_iap_received_package 044A  
                                   status 0003                                     wtemp0 007E  
                         _TMR2_StartTimer 05DF                 decode_xmodem_package@xloc 0038  
                        __end_of_HexTable 058E                           __initialization 0049  
                          iap_process@ret 003B                              __end_of_main 021D  
                 __end_of_TMR2_Initialize 057D               ?_INTERRUPT_InterruptManager 0070  
                _TMR2_SetInterruptHandler 05CD                                    ??_main 003C  
                 __size_of_FLASH_ReadWord 001B                            __CFG_PLLEN$OFF 0000  
                         ?_decode_hex_len 0070                    __end_of_WDT_Initialize 05DC  
               FLASH_WriteBlock@writeAddr 0021                          __end_of__chr2hex 0472  
                                  _ANSELA 018C                                    _ANSELC 018E  
                                  _ODCONA 028C                                    i1l2171 049D  
                                  _ODCONC 028E                                    i1l2247 0026  
                                  i1l2239 001B                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                                    _PMCON2 0196  
               __size_of_FLASH_EraseBlock 001E                                    _OSCCON 0099  
             __end_of_uart_received_start 05CD                                    _SPBRGH 019C  
                                  _SPBRGL 019B                                    _WDTCON 0097  
                            m_mem_set@buf 0075                              m_mem_set@len 0021  
                          __CFG_PWRTE$OFF 0000                               m_str_h2b@bb 002B  
                    __size_of_iap_process 006B                              _binBufferLen 00B9  
                          __CFG_STVREN$ON 0000                       _EUSART_Transmit_ISR 04D9  
                 __end_of_api_write_block 033C                   FLASH_ReadWord@flashAddr 0074  
                         ?_WDT_Initialize 0070                           _addrWritedFlash 00C1  
                 __end_of_TMR2_StartTimer 05E2  TMR2_SetInterruptHandler@InterruptHandler 0074  
                    ?_EUSART_Transmit_ISR 0070                         _SYSTEM_Initialize 059E  
                 __end_of__initialization 0085                                __chr2hex@c 0021  
                              __chr2hex@h 0020                        ?_SYSTEM_Initialize 0070  
                          __pcstackCOMMON 0070                              __pidataBANK1 05DC  
                     ??_SYSTEM_Initialize 0076                                _addrInline 00B4  
                        ?_TMR2_Initialize 0070                      _iap_received_package 0417  
                   _decode_xmodem_package 0392                            _OPTION_REGbits 0095  
             FLASH_WriteBlock@GIEBitValue 0027                 __end_of_SYSTEM_Initialize 05AD  
                   ??_EUSART_Transmit_ISR 0070                        __size_of_m_mem_set 0019  
                              __pbssBANK1 00A0                                __pbssBANK2 0120  
                              __pbssBANK3 01A0                        api_write_block@buf 0220  
                      __size_of_m_str_h2b 0056               __size_of_EUSART_Receive_ISR 0023  
                              __pmaintext 0188                                __pintentry 0004  
                               ?__chr2hex 0070                                   _BAUDCON 019F  
                   ?_iap_received_package 0070                 __size_of_FLASH_WriteBlock 005D  
                          _FLASH_ReadWord 04F5                          ?_api_write_block 0029  
                                 _OSCTUNE 0098                                   _PPSLOCK 0E0F  
                        ?_TMR2_StartTimer 0070                     __end_of_uart_send_str 0498  
                        _FLASH_EraseBlock 04BB                              m_str_h2b@len 0023  
              ??_TMR2_SetInterruptHandler 0076                         __end_of_m_mem_set 0543  
                              ??__chr2hex 0074                    __end_of_FLASH_ReadWord 0510  
                        ??_decode_hex_len 0031                    ?_decode_xmodem_package 0070  
                                 __ptext1 021D                                   __ptext2 0472  
                                 __ptext3 0417                                   __ptext4 05AD  
                                 __ptext5 05C7                                   __ptext6 0392  
                                 __ptext7 0089                                   __ptext8 033C  
                                 __ptext9 044A                         __end_of_m_str_h2b 0392  
                   _OSCILLATOR_Initialize 05D3                                 _T2CONbits 001C  
                ??_PIN_MANAGER_Initialize 0074                                   main@t16 003F  
              __size_of_SYSTEM_Initialize 000F                                   clrloop0 05BC  
                                 main@ret 003E                      end_of_initialization 0085  
                       _EUSART_Initialize 0510                          decode_hex_len@i8 0035  
                      ?_EUSART_Initialize 0070                                 _RCSTAbits 019D  
               FLASH_ReadWord@GIEBitValue 0020                    ??_iap_received_package 0075  
                         ?_FLASH_ReadWord 0074                       ??_EUSART_Initialize 0074  
                        ??_WDT_Initialize 0074                   __size_of_uart_send_byte 000E  
                        __CFG_FOSC$INTOSC 0000                                 _RXPPSbits 0E15  
                   api_write_block@binbuf 002B                 __end_of_EUSART_Initialize 052A  
                            _globalTicker 00B0                             ??_iap_process 0039  
                               _TXSTAbits 019E                         FLASH_WriteBlock@i 0028  
            __size_of_uart_received_start 0006              _TMR2_DefaultInterruptHandler 0000  
                              m_mem_set@x 0020                              _firstPackage 00C3  
                        _FLASH_WriteBlock 0288                    ?_OSCILLATOR_Initialize 0070  
                     start_initialization 0049           __size_of_PIN_MANAGER_Initialize 003F  
                        __bEusartRxBuffer 2340                    iap_received_package@tm 0020  
                        api_write_block@i 0260                          __CFG_LPBOREN$OFF 0000  
                              m_str_h2b@b 0029                                m_str_h2b@h 0022  
                              m_str_h2b@i 0027                                m_str_h2b@s 002A  
                     __end_of_iap_process 0288                               __pdataBANK1 00C1  
             FLASH_EraseBlock@GIEBitValue 0020                  __end_of_FLASH_EraseBlock 04D9  
                            _lengthInline 00BB                         __size_of__chr2hex 0028  
                             __pbssBIGRAM 2340               __end_of_EUSART_Transmit_ISR 04F5  
                     api_write_block@addr 0029                               __pbssCOMMON 0076  
                               ___latbits 0002                             __pcstackBANK0 0020  
                           __pcstackBANK4 0220                  __size_of_TMR2_Initialize 0013  
              __end_of_EUSART_Receive_ISR 04BB                                 _binBuffer 01A0  
              __size_of_EUSART_Initialize 001A                                 __pnvBANK1 00BE  
                  _PIN_MANAGER_Initialize 03D8                   ??_decode_xmodem_package 0036  
                            _eusartRxHead 00BD                              _eusartTxHead 0077  
                            _eusartRxTail 00BC                          __CFG_PPS1WAY$OFF 0000  
                            _eusartTxTail 0076              ??_INTERRUPT_InterruptManager 0073  
                 _eusartTxBufferRemaining 00C0                                 _m_mem_set 052A  
                          _uart_send_byte 05AD                                 _m_str_h2b 033C  
                        uart_send_str@str 0074                  __size_of_api_write_block 0057  
                          _eusartTxBuffer 00A0                                 clear_ram0 05BB  
                             _iap_process 021D                                  _PIE1bits 0091  
                __size_of_TMR2_StartTimer 0003       __size_of_INTERRUPT_InterruptManager 0043  
                                _PIR1bits 0011                 FLASH_EraseBlock@startAddr 0074  
                        ??_FLASH_ReadWord 0076                    __size_of_uart_send_str 0026  
                  __end_of_uart_send_byte 05BB                                ?_m_mem_set 0020  
       __size_of_TMR2_SetInterruptHandler 0006                 ?_TMR2_SetInterruptHandler 0074  
                             _isRunInBoot 0FFF                       _uart_received_start 05C7  
                              ?_m_str_h2b 0022                                  _HexTable 057D  
                       ??_TMR2_Initialize 0076                  __end_of_FLASH_WriteBlock 02E5  
                         __bEusartRxCount 0078                      ?_uart_received_start 0070  
                 ??_OSCILLATOR_Initialize 0074                                  __chr2hex 044A  
                         ?_uart_send_byte 0070             __size_of_iap_received_package 0033  
                     _eusartRxIdleTime_ms 00B6                                  __ptext10 052A  
                                __ptext11 02E5                                  __ptext20 03D8  
                                __ptext12 0288                                  __ptext21 05D3  
                                __ptext13 04BB                                  __ptext22 0510  
                                __ptext14 04F5                                  __ptext15 059E  
                                __ptext24 04D9                                  __ptext16 05D8  
                                __ptext25 0498                                  __ptext17 056A  
                                __ptext18 05DF                                  __ptext19 05CD  
                             _eusartTxLen 00B8                   __size_of_decode_hex_len 00FF  
                           _uart_send_str 0472                           uart_send_byte@x 0074  
                           __size_of_main 0095                         ??_api_write_block 002C  
                              _RA4PPSbits 0E94                     ??_uart_received_start 0074  
                              _RA5PPSbits 0E95                                  int$flags 007E  
                              _RC5PPSbits 0EA5                             _hexLineBuffer 0120  
                       ??_TMR2_StartTimer 0074        __end_of_INTERRUPT_InterruptManager 0047  
              _INTERRUPT_InterruptManager 0004                         ?_FLASH_EraseBlock 0074  
             PIN_MANAGER_Initialize@state 0074                               ??_m_mem_set 0074  
                      ??_FLASH_EraseBlock 0076                                _INTCONbits 000B  
                             ??_m_str_h2b 0025                   __size_of_WDT_Initialize 0004  
                          ?_uart_send_str 0074                                  intlevel1 0000  
                              _PMCON1bits 0195                   ?_PIN_MANAGER_Initialize 0070  
                       decode_hex_len@t16 0033                         __CFG_CLKOUTEN$OFF 0000  
                             _PPSLOCKbits 0E0F                        _EUSART_Receive_ISR 0498  
          __size_of_decode_xmodem_package 0046             __end_of_decode_xmodem_package 03D8  
                           __pstringtext1 057D                             __pstringtext2 0543  
                           __pstringtext3 0557                             __pstringtext4 058E  
                           __pstringtext5 0000                       ?_EUSART_Receive_ISR 0070  
            __size_of_EUSART_Transmit_ISR 001C            __end_of_PIN_MANAGER_Initialize 0417  
                    ??_EUSART_Receive_ISR 0070                     _TMR2_InterruptHandler 00BE  
                            ?_iap_process 0070                          _hexLineCharCount 00BA  
