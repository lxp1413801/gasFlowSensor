Version 3.2 HI-TECH Software Intermediate Code
"9 src/depend/m_string.h
[v _m_mem_cpy_len `(v ~T0 @X0 0 ef3`*uc`*uc`ui ]
[; ;stdint.h: 13: typedef signed char int8_t;
[; ;stdint.h: 20: typedef signed int int16_t;
[; ;stdint.h: 28: typedef signed short long int int24_t;
[; ;stdint.h: 36: typedef signed long int int32_t;
[; ;stdint.h: 43: typedef unsigned char uint8_t;
[; ;stdint.h: 49: typedef unsigned int uint16_t;
[; ;stdint.h: 56: typedef unsigned short long int uint24_t;
[; ;stdint.h: 63: typedef unsigned long int uint32_t;
[; ;stdint.h: 71: typedef signed char int_least8_t;
[; ;stdint.h: 78: typedef signed int int_least16_t;
[; ;stdint.h: 90: typedef signed short long int int_least24_t;
[; ;stdint.h: 98: typedef signed long int int_least32_t;
[; ;stdint.h: 105: typedef unsigned char uint_least8_t;
[; ;stdint.h: 111: typedef unsigned int uint_least16_t;
[; ;stdint.h: 121: typedef unsigned short long int uint_least24_t;
[; ;stdint.h: 128: typedef unsigned long int uint_least32_t;
[; ;stdint.h: 137: typedef signed char int_fast8_t;
[; ;stdint.h: 144: typedef signed int int_fast16_t;
[; ;stdint.h: 156: typedef signed short long int int_fast24_t;
[; ;stdint.h: 164: typedef signed long int int_fast32_t;
[; ;stdint.h: 171: typedef unsigned char uint_fast8_t;
[; ;stdint.h: 177: typedef unsigned int uint_fast16_t;
[; ;stdint.h: 187: typedef unsigned short long int uint_fast24_t;
[; ;stdint.h: 194: typedef unsigned long int uint_fast32_t;
[; ;stdint.h: 200: typedef int32_t intmax_t;
[; ;stdint.h: 205: typedef uint32_t uintmax_t;
[; ;stdint.h: 210: typedef int16_t intptr_t;
[; ;stdint.h: 215: typedef uint16_t uintptr_t;
[; ;crc16.h: 10: extern uint16_t crc_sum(uint8_t *puchMsg, uint16_t usDataLen);
[; ;crc16.h: 11: extern uint8_t crc_verify(uint8_t* message, uint16_t n);
[; ;crc16.h: 12: extern void crc_append( uint8_t* message, uint16_t n);
[; ;m_string.h: 7: extern void m_mem_set(uint8_t* buf,uint8_t x,uint16_t len);
[; ;m_string.h: 8: extern void m_mem_cpy(uint8_t* d,uint8_t* s);
[; ;m_string.h: 9: extern void m_mem_cpy_len(uint8_t* d,uint8_t* s,uint16_t len);
[; ;m_string.h: 10: extern uint16_t m_str_match(uint8_t* b,uint8_t* c);
[; ;m_string.h: 11: extern int32_t m_math_pow(int32_t x,int32_t y);
[; ;m_string.h: 12: extern uint8_t m_str_cmp(uint8_t* d,uint8_t* s);
[; ;m_string.h: 13: extern uint8_t m_str_cmp_len(uint8_t* d,uint8_t* s,uint16_t len);
[; ;m_string.h: 14: extern uint16_t HEX8(uint8_t* hex,uint8_t x);
[; ;m_string.h: 15: extern uint16_t m_str_b2h(uint8_t* h,uint8_t* b,uint16_t len);
[; ;m_string.h: 16: extern uint16_t m_str_h2b(uint8_t* b,uint8_t* h,uint16_t len);
[; ;m_string.h: 19: extern void m_int_2_str(uint8_t* buf,int32_t x,uint16_t len);
[; ;m_string.h: 20: extern void m_int_2_str_ex(uint8_t* buf,int32_t x,uint16_t ssize);
[; ;m_string.h: 21: extern uint16_t m_str_head_hide(uint8_t* str,uint16_t loc);
[; ;m_string.h: 23: extern const uint8_t Bcd2HexTable[];
[; ;m_string.h: 24: extern const uint8_t Hex2BcdTable[];
[; ;m_string.h: 30: extern uint32_t swap_uint32(uint32_t x);
[; ;m_string.h: 31: extern uint16_t swap_uint16(uint16_t x);
[; ;m_string.h: 36: extern void int32_array_shift_right(int32_t *p32,uint16_t eoc);
"82 src/depend/crc16.c
[v _calc_crc_w `(ui ~T0 @X0 1 ef3`ui`uc`ui ]
"83
{
[; ;crc16.c: 82: uint16_t calc_crc_w(uint16_t crc,uint8_t b,uint16_t polynomial)
[; ;crc16.c: 83: {
[e :U _calc_crc_w ]
"82
[v _crc `ui ~T0 @X0 1 r1 ]
[v _b `uc ~T0 @X0 1 r2 ]
[v _polynomial `ui ~T0 @X0 1 r3 ]
"83
[f ]
"84
[v _i `ui ~T0 @X0 1 a ]
[; ;crc16.c: 84: uint16_t i;
[; ;crc16.c: 85: for(i=0;i<8;i++){
"85
{
[e = _i -> -> 0 `i `ui ]
[e $ < _i -> -> 8 `i `ui 2  ]
[e $U 3  ]
[e :U 2 ]
{
[; ;crc16.c: 86: if((((crc & 0x8000) >> 8) ^ (b & 0x80))!=0){
"86
[e $ ! != ^ >> & _crc -> 32768 `ui -> 8 `i -> & -> _b `i -> 128 `i `ui -> -> 0 `i `ui 5  ]
{
[; ;crc16.c: 87: crc <<= 1;
"87
[e =<< _crc -> 1 `i ]
[; ;crc16.c: 88: crc ^= polynomial;
"88
[e =^ _crc _polynomial ]
"89
}
[; ;crc16.c: 89: }else{
[e $U 6  ]
[e :U 5 ]
{
[; ;crc16.c: 90: crc <<=1;
"90
[e =<< _crc -> 1 `i ]
"91
}
[e :U 6 ]
[; ;crc16.c: 91: }
[; ;crc16.c: 92: b <<= 1;
"92
[e =<< _b -> 1 `i ]
"93
}
"85
[e ++ _i -> -> 1 `i `ui ]
[e $ < _i -> -> 8 `i `ui 2  ]
[e :U 3 ]
"93
}
[; ;crc16.c: 93: }
[; ;crc16.c: 94: return crc;
"94
[e ) _crc ]
[e $UE 1  ]
[; ;crc16.c: 95: }
"95
[e :UE 1 ]
}
"97
[v _crc_sum `(ui ~T0 @X0 1 ef2`*uc`ui ]
"98
{
[; ;crc16.c: 97: uint16_t crc_sum(uint8_t *message, uint16_t len)
[; ;crc16.c: 98: {
[e :U _crc_sum ]
"97
[v _message `*uc ~T0 @X0 1 r1 ]
[v _len `ui ~T0 @X0 1 r2 ]
"98
[f ]
"99
[v _i `ui ~T0 @X0 1 a ]
"100
[v _crc `ui ~T0 @X0 1 a ]
"101
[v _polynomial `ui ~T0 @X0 1 a ]
[; ;crc16.c: 99: uint16_t i;
[; ;crc16.c: 100: uint16_t crc;
[; ;crc16.c: 101: uint16_t polynomial;
[; ;crc16.c: 103: polynomial=0xa001;
"103
[e = _polynomial -> 40961 `ui ]
[; ;crc16.c: 105: crc=0xffff;
"105
[e = _crc -> 65535 `ui ]
[; ;crc16.c: 106: for(i=0;i<len;i++){
"106
{
[e = _i -> -> 0 `i `ui ]
[e $U 11  ]
[e :U 8 ]
{
[; ;crc16.c: 107: crc=calc_crc_w(crc,message[i],polynomial);
"107
[e = _crc ( _calc_crc_w (3 , , _crc *U + _message * -> _i `ux -> -> # *U _message `ui `ux _polynomial ]
"108
}
"106
[e ++ _i -> -> 1 `i `ui ]
[e :U 11 ]
[e $ < _i _len 8  ]
[e :U 9 ]
"108
}
[; ;crc16.c: 108: }
[; ;crc16.c: 110: i=(crc<<8)&&0xff00;
"110
[e = _i -> -> && != << _crc -> 8 `i -> -> 0 `i `ui != -> 65280 `ui -> -> 0 `i `ui `i `ui ]
[; ;crc16.c: 111: crc=(crc>>8)&&0x00ff;
"111
[e = _crc -> -> && != >> _crc -> 8 `i -> -> 0 `i `ui != -> 255 `i -> 0 `i `i `ui ]
[; ;crc16.c: 112: return crc+i;
"112
[e ) + _crc _i ]
[e $UE 7  ]
[; ;crc16.c: 113: }
"113
[e :UE 7 ]
}
"115
[v _crc_verify `(uc ~T0 @X0 1 ef2`*uc`ui ]
"116
{
[; ;crc16.c: 115: uint8_t crc_verify( uint8_t* message, uint16_t n)
[; ;crc16.c: 116: {
[e :U _crc_verify ]
"115
[v _message `*uc ~T0 @X0 1 r1 ]
[v _n `ui ~T0 @X0 1 r2 ]
"116
[f ]
"117
[v _expected `ui ~T0 @X0 1 a ]
[v _crccal `ui ~T0 @X0 1 a ]
[; ;crc16.c: 117: uint16_t expected,crccal;
[; ;crc16.c: 118: m_mem_cpy_len((uint8_t*)(&expected),(message+n-2),2);
"118
[e ( _m_mem_cpy_len (3 , , -> &U _expected `*uc - + _message * -> _n `ux -> -> # *U _message `ui `ux * -> -> 2 `i `x -> -> # *U + _message * -> _n `ux -> -> # *U _message `ui `ux `i `x -> -> 2 `i `ui ]
[; ;crc16.c: 119: crccal=crc_sum(message,n - 2);
"119
[e = _crccal ( _crc_sum (2 , _message - _n -> -> 2 `i `ui ]
[; ;crc16.c: 120: if(expected!=crccal)return 0;
"120
[e $ ! != _expected _crccal 13  ]
[e ) -> -> 0 `i `uc ]
[e $UE 12  ]
[e :U 13 ]
[; ;crc16.c: 121: return 1;
"121
[e ) -> -> 1 `i `uc ]
[e $UE 12  ]
[; ;crc16.c: 122: }
"122
[e :UE 12 ]
}
"123
[v _crc_append `(v ~T0 @X0 1 ef2`*uc`ui ]
"124
{
[; ;crc16.c: 123: void crc_append(uint8_t* message, uint16_t n)
[; ;crc16.c: 124: {
[e :U _crc_append ]
"123
[v _message `*uc ~T0 @X0 1 r1 ]
[v _n `ui ~T0 @X0 1 r2 ]
"124
[f ]
"125
[v _crc `ui ~T0 @X0 1 a ]
[; ;crc16.c: 125: uint16_t crc;
[; ;crc16.c: 126: crc = crc_sum(message, n);
"126
[e = _crc ( _crc_sum (2 , _message _n ]
[; ;crc16.c: 127: message[n] = (uint8_t)(crc & 0xff);
"127
[e = *U + _message * -> _n `ux -> -> # *U _message `ui `ux -> & _crc -> -> 255 `i `ui `uc ]
[; ;crc16.c: 128: message[n+1] = (uint8_t)((crc >> 8) & 0xff);
"128
[e = *U + _message * -> + _n -> -> 1 `i `ui `ux -> -> # *U _message `ui `ux -> & >> _crc -> 8 `i -> -> 255 `i `ui `uc ]
[; ;crc16.c: 129: }
"129
[e :UE 14 ]
}
