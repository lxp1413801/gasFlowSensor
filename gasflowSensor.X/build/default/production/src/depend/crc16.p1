Version 3.2 HI-TECH Software Intermediate Code
"9 src/depend/m_string.h
[v _m_mem_cpy_len `(v ~T0 @X0 0 ef3`*uc`*uc`ui ]
[; ;stdint.h: 13: typedef signed char int8_t;
[; ;stdint.h: 20: typedef signed int int16_t;
[; ;stdint.h: 28: typedef signed short long int int24_t;
[; ;stdint.h: 36: typedef signed long int int32_t;
[; ;stdint.h: 43: typedef unsigned char uint8_t;
[; ;stdint.h: 49: typedef unsigned int uint16_t;
[; ;stdint.h: 56: typedef unsigned short long int uint24_t;
[; ;stdint.h: 63: typedef unsigned long int uint32_t;
[; ;stdint.h: 71: typedef signed char int_least8_t;
[; ;stdint.h: 78: typedef signed int int_least16_t;
[; ;stdint.h: 90: typedef signed short long int int_least24_t;
[; ;stdint.h: 98: typedef signed long int int_least32_t;
[; ;stdint.h: 105: typedef unsigned char uint_least8_t;
[; ;stdint.h: 111: typedef unsigned int uint_least16_t;
[; ;stdint.h: 121: typedef unsigned short long int uint_least24_t;
[; ;stdint.h: 128: typedef unsigned long int uint_least32_t;
[; ;stdint.h: 137: typedef signed char int_fast8_t;
[; ;stdint.h: 144: typedef signed int int_fast16_t;
[; ;stdint.h: 156: typedef signed short long int int_fast24_t;
[; ;stdint.h: 164: typedef signed long int int_fast32_t;
[; ;stdint.h: 171: typedef unsigned char uint_fast8_t;
[; ;stdint.h: 177: typedef unsigned int uint_fast16_t;
[; ;stdint.h: 187: typedef unsigned short long int uint_fast24_t;
[; ;stdint.h: 194: typedef unsigned long int uint_fast32_t;
[; ;stdint.h: 200: typedef int32_t intmax_t;
[; ;stdint.h: 205: typedef uint32_t uintmax_t;
[; ;stdint.h: 210: typedef int16_t intptr_t;
[; ;stdint.h: 215: typedef uint16_t uintptr_t;
[; ;crc16.h: 10: extern uint16_t crc_sum(uint8_t *puchMsg, uint16_t usDataLen);
[; ;crc16.h: 11: extern uint8_t crc_verify(uint8_t* message, uint16_t n);
[; ;crc16.h: 12: extern void crc_append( uint8_t* message, uint16_t n);
[; ;m_string.h: 7: extern void m_mem_set(uint8_t* buf,uint8_t x,uint16_t len);
[; ;m_string.h: 8: extern void m_mem_cpy(uint8_t* d,uint8_t* s);
[; ;m_string.h: 9: extern void m_mem_cpy_len(uint8_t* d,uint8_t* s,uint16_t len);
[; ;m_string.h: 10: extern uint16_t m_str_match(uint8_t* b,uint8_t* c);
[; ;m_string.h: 11: extern int32_t m_math_pow(int32_t x,int32_t y);
[; ;m_string.h: 12: extern uint8_t m_str_cmp(uint8_t* d,uint8_t* s);
[; ;m_string.h: 13: extern uint8_t m_str_cmp_len(uint8_t* d,uint8_t* s,uint16_t len);
[; ;m_string.h: 14: extern uint16_t HEX8(uint8_t* hex,uint8_t x);
[; ;m_string.h: 15: extern uint16_t m_str_b2h(uint8_t* h,uint8_t* b,uint16_t len);
[; ;m_string.h: 16: extern uint16_t m_str_h2b(uint8_t* b,uint8_t* h,uint16_t len);
[; ;m_string.h: 19: extern void m_int_2_str(uint8_t* buf,int32_t x,uint16_t len);
[; ;m_string.h: 20: extern void m_int_2_str_ex(uint8_t* buf,int32_t x,uint16_t ssize);
[; ;m_string.h: 21: extern uint16_t m_str_head_hide(uint8_t* str,uint16_t loc);
[; ;m_string.h: 23: extern const uint8_t Bcd2HexTable[];
[; ;m_string.h: 24: extern const uint8_t Hex2BcdTable[];
[; ;m_string.h: 30: extern uint32_t swap_uint32(uint32_t x);
[; ;m_string.h: 31: extern uint16_t swap_uint16(uint16_t x);
[; ;m_string.h: 36: extern void int32_array_shift_right(int32_t *p32,uint16_t eoc);
"116 src/depend/crc16.c
[v _crc_sum `(ui ~T0 @X0 1 ef2`*uc`ui ]
"117
{
[; ;crc16.c: 116: uint16_t crc_sum( uint8_t* buf, uint16_t len)
[; ;crc16.c: 117: {
[e :U _crc_sum ]
"116
[v _buf `*uc ~T0 @X0 1 r1 ]
[v _len `ui ~T0 @X0 1 r2 ]
"117
[f ]
"118
[v _crc `ui ~T0 @X0 1 a ]
[; ;crc16.c: 118: uint16_t crc=0xFFFF;
[e = _crc -> 65535 `ui ]
"119
[v _i `ui ~T0 @X0 1 a ]
[v _j `ui ~T0 @X0 1 a ]
[; ;crc16.c: 119: uint16_t i, j;
[; ;crc16.c: 120: for ( j=0; j<len;j++){
"120
{
[e = _j -> -> 0 `i `ui ]
[e $U 5  ]
[e :U 2 ]
{
[; ;crc16.c: 121: crc=crc ^*buf++;
"121
[e = _crc ^ _crc -> *U ++ _buf * -> -> 1 `i `x -> -> # *U _buf `i `x `ui ]
[; ;crc16.c: 122: for ( i=0; i<8; i++){
"122
{
[e = _i -> -> 0 `i `ui ]
[e $ < _i -> -> 8 `i `ui 6  ]
[e $U 7  ]
[e :U 6 ]
{
[; ;crc16.c: 124: if(crc&0x0001){
"124
[e $ ! != & _crc -> -> 1 `i `ui -> -> 0 `i `ui 9  ]
{
[; ;crc16.c: 125: crc=crc>>1;
"125
[e = _crc >> _crc -> 1 `i ]
[; ;crc16.c: 126: crc=crc^ 0xa001;
"126
[e = _crc ^ _crc -> 40961 `ui ]
"127
}
[; ;crc16.c: 127: }else{
[e $U 10  ]
[e :U 9 ]
{
[; ;crc16.c: 128: crc=crc>>1;
"128
[e = _crc >> _crc -> 1 `i ]
"129
}
[e :U 10 ]
"130
}
"122
[e ++ _i -> -> 1 `i `ui ]
[e $ < _i -> -> 8 `i `ui 6  ]
[e :U 7 ]
"130
}
"132
}
"120
[e ++ _j -> -> 1 `i `ui ]
[e :U 5 ]
[e $ < _j _len 2  ]
[e :U 3 ]
"132
}
[; ;crc16.c: 129: }
[; ;crc16.c: 130: }
[; ;crc16.c: 132: }
[; ;crc16.c: 133: return ( crc);
"133
[e ) _crc ]
[e $UE 1  ]
[; ;crc16.c: 134: }
"134
[e :UE 1 ]
}
"135
[v _crc_verify `(uc ~T0 @X0 1 ef2`*uc`ui ]
"136
{
[; ;crc16.c: 135: uint8_t crc_verify( uint8_t* message, uint16_t n)
[; ;crc16.c: 136: {
[e :U _crc_verify ]
"135
[v _message `*uc ~T0 @X0 1 r1 ]
[v _n `ui ~T0 @X0 1 r2 ]
"136
[f ]
"137
[v _expected `ui ~T0 @X0 1 a ]
[v _crccal `ui ~T0 @X0 1 a ]
[; ;crc16.c: 137: uint16_t expected,crccal;
[; ;crc16.c: 138: m_mem_cpy_len((uint8_t*)(&expected),(message+n-2),2);
"138
[e ( _m_mem_cpy_len (3 , , -> &U _expected `*uc - + _message * -> _n `ux -> -> # *U _message `ui `ux * -> -> 2 `i `x -> -> # *U + _message * -> _n `ux -> -> # *U _message `ui `ux `i `x -> -> 2 `i `ui ]
[; ;crc16.c: 139: crccal=crc_sum(message,n - 2);
"139
[e = _crccal ( _crc_sum (2 , _message - _n -> -> 2 `i `ui ]
[; ;crc16.c: 140: if(expected!=crccal)return 0;
"140
[e $ ! != _expected _crccal 12  ]
[e ) -> -> 0 `i `uc ]
[e $UE 11  ]
[e :U 12 ]
[; ;crc16.c: 141: return 1;
"141
[e ) -> -> 1 `i `uc ]
[e $UE 11  ]
[; ;crc16.c: 142: }
"142
[e :UE 11 ]
}
"143
[v _crc_append `(v ~T0 @X0 1 ef2`*uc`ui ]
"144
{
[; ;crc16.c: 143: void crc_append(uint8_t* message, uint16_t n)
[; ;crc16.c: 144: {
[e :U _crc_append ]
"143
[v _message `*uc ~T0 @X0 1 r1 ]
[v _n `ui ~T0 @X0 1 r2 ]
"144
[f ]
"145
[v _crc `ui ~T0 @X0 1 a ]
[; ;crc16.c: 145: uint16_t crc;
[; ;crc16.c: 146: crc = crc_sum(message, n);
"146
[e = _crc ( _crc_sum (2 , _message _n ]
[; ;crc16.c: 147: message[n] = (uint8_t)(crc & 0xff);
"147
[e = *U + _message * -> _n `ux -> -> # *U _message `ui `ux -> & _crc -> -> 255 `i `ui `uc ]
[; ;crc16.c: 148: message[n+1] = (uint8_t)((crc >> 8) & 0xff);
"148
[e = *U + _message * -> + _n -> -> 1 `i `ui `ux -> -> # *U _message `ui `ux -> & >> _crc -> 8 `i -> -> 255 `i `ui `uc ]
[; ;crc16.c: 149: }
"149
[e :UE 13 ]
}
