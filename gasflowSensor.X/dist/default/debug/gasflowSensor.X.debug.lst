

Microchip Technology PIC PRO Macro Assembler V1.37 build -260352376 
                                                                                               Mon Nov 19 22:33:56 2018

Microchip Technology Omniscient Code Generator v1.37 (PRO mode) build 201603110536
     1                           	processor	16F1575
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	swtext1,local,class=CONST,delta=2
    23                           	psect	text14,local,class=CODE,merge=1,delta=2
    24                           	psect	swtext2,local,class=CONST,delta=2
    25                           	psect	text32,local,class=CODE,merge=1,delta=2
    26                           	psect	intentry,global,class=CODE,delta=2
    27                           	psect	pa_nodes,global,class=CODE,delta=2
    28                           	dabs	1,0x620,32
    29                           	dabs	1,0x5B4,60
    30                           	dabs	1,0x2384,0,_sysData
    31                           	dabs	1,0x7E,2
    32  0000                     	;# 
    33  0001                     	;# 
    34  0002                     	;# 
    35  0003                     	;# 
    36  0004                     	;# 
    37  0005                     	;# 
    38  0006                     	;# 
    39  0007                     	;# 
    40  0008                     	;# 
    41  0009                     	;# 
    42  000A                     	;# 
    43  000B                     	;# 
    44  000C                     	;# 
    45  000E                     	;# 
    46  0011                     	;# 
    47  0012                     	;# 
    48  0013                     	;# 
    49  0015                     	;# 
    50  0016                     	;# 
    51  0016                     	;# 
    52  0017                     	;# 
    53  0018                     	;# 
    54  0019                     	;# 
    55  001A                     	;# 
    56  001B                     	;# 
    57  001C                     	;# 
    58  008C                     	;# 
    59  008E                     	;# 
    60  0091                     	;# 
    61  0092                     	;# 
    62  0093                     	;# 
    63  0095                     	;# 
    64  0096                     	;# 
    65  0097                     	;# 
    66  0098                     	;# 
    67  0099                     	;# 
    68  009A                     	;# 
    69  009B                     	;# 
    70  009B                     	;# 
    71  009C                     	;# 
    72  009D                     	;# 
    73  009E                     	;# 
    74  009F                     	;# 
    75  010C                     	;# 
    76  010E                     	;# 
    77  0111                     	;# 
    78  0112                     	;# 
    79  0113                     	;# 
    80  0114                     	;# 
    81  0115                     	;# 
    82  0116                     	;# 
    83  0117                     	;# 
    84  0118                     	;# 
    85  0119                     	;# 
    86  018C                     	;# 
    87  018E                     	;# 
    88  0191                     	;# 
    89  0191                     	;# 
    90  0192                     	;# 
    91  0193                     	;# 
    92  0193                     	;# 
    93  0194                     	;# 
    94  0195                     	;# 
    95  0196                     	;# 
    96  0197                     	;# 
    97  0199                     	;# 
    98  019A                     	;# 
    99  019B                     	;# 
   100  019B                     	;# 
   101  019C                     	;# 
   102  019D                     	;# 
   103  019E                     	;# 
   104  019F                     	;# 
   105  020C                     	;# 
   106  020E                     	;# 
   107  028C                     	;# 
   108  028E                     	;# 
   109  030C                     	;# 
   110  030E                     	;# 
   111  038C                     	;# 
   112  038E                     	;# 
   113  0391                     	;# 
   114  0392                     	;# 
   115  0393                     	;# 
   116  0397                     	;# 
   117  0398                     	;# 
   118  0399                     	;# 
   119  0691                     	;# 
   120  0692                     	;# 
   121  0693                     	;# 
   122  0694                     	;# 
   123  0695                     	;# 
   124  0D8E                     	;# 
   125  0D8F                     	;# 
   126  0D90                     	;# 
   127  0D91                     	;# 
   128  0D91                     	;# 
   129  0D92                     	;# 
   130  0D93                     	;# 
   131  0D93                     	;# 
   132  0D94                     	;# 
   133  0D95                     	;# 
   134  0D95                     	;# 
   135  0D96                     	;# 
   136  0D97                     	;# 
   137  0D97                     	;# 
   138  0D98                     	;# 
   139  0D99                     	;# 
   140  0D99                     	;# 
   141  0D9A                     	;# 
   142  0D9B                     	;# 
   143  0D9C                     	;# 
   144  0D9C                     	;# 
   145  0D9D                     	;# 
   146  0D9D                     	;# 
   147  0D9E                     	;# 
   148  0D9F                     	;# 
   149  0DA0                     	;# 
   150  0DA1                     	;# 
   151  0DA1                     	;# 
   152  0DA2                     	;# 
   153  0DA3                     	;# 
   154  0DA3                     	;# 
   155  0DA4                     	;# 
   156  0DA5                     	;# 
   157  0DA5                     	;# 
   158  0DA6                     	;# 
   159  0DA7                     	;# 
   160  0DA7                     	;# 
   161  0DA8                     	;# 
   162  0DA9                     	;# 
   163  0DA9                     	;# 
   164  0DAA                     	;# 
   165  0DAB                     	;# 
   166  0DAC                     	;# 
   167  0DAC                     	;# 
   168  0DAD                     	;# 
   169  0DAD                     	;# 
   170  0DAE                     	;# 
   171  0DAF                     	;# 
   172  0DB0                     	;# 
   173  0DB1                     	;# 
   174  0DB1                     	;# 
   175  0DB2                     	;# 
   176  0DB3                     	;# 
   177  0DB3                     	;# 
   178  0DB4                     	;# 
   179  0DB5                     	;# 
   180  0DB5                     	;# 
   181  0DB6                     	;# 
   182  0DB7                     	;# 
   183  0DB7                     	;# 
   184  0DB8                     	;# 
   185  0DB9                     	;# 
   186  0DB9                     	;# 
   187  0DBA                     	;# 
   188  0DBB                     	;# 
   189  0DBC                     	;# 
   190  0DBC                     	;# 
   191  0DBD                     	;# 
   192  0DBD                     	;# 
   193  0DBE                     	;# 
   194  0DBF                     	;# 
   195  0DC0                     	;# 
   196  0DC1                     	;# 
   197  0DC1                     	;# 
   198  0DC2                     	;# 
   199  0DC3                     	;# 
   200  0DC3                     	;# 
   201  0DC4                     	;# 
   202  0DC5                     	;# 
   203  0DC5                     	;# 
   204  0DC6                     	;# 
   205  0DC7                     	;# 
   206  0DC7                     	;# 
   207  0DC8                     	;# 
   208  0DC9                     	;# 
   209  0DC9                     	;# 
   210  0DCA                     	;# 
   211  0DCB                     	;# 
   212  0DCC                     	;# 
   213  0DCC                     	;# 
   214  0DCD                     	;# 
   215  0DCD                     	;# 
   216  0DCE                     	;# 
   217  0DCF                     	;# 
   218  0DD0                     	;# 
   219  0E0F                     	;# 
   220  0E10                     	;# 
   221  0E11                     	;# 
   222  0E12                     	;# 
   223  0E13                     	;# 
   224  0E14                     	;# 
   225  0E15                     	;# 
   226  0E16                     	;# 
   227  0E17                     	;# 
   228  0E90                     	;# 
   229  0E91                     	;# 
   230  0E92                     	;# 
   231  0E94                     	;# 
   232  0E95                     	;# 
   233  0EA0                     	;# 
   234  0EA1                     	;# 
   235  0EA2                     	;# 
   236  0EA3                     	;# 
   237  0EA4                     	;# 
   238  0EA5                     	;# 
   239  0FE4                     	;# 
   240  0FE5                     	;# 
   241  0FE6                     	;# 
   242  0FE7                     	;# 
   243  0FE8                     	;# 
   244  0FE8                     	;# 
   245  0FE9                     	;# 
   246  0FEA                     	;# 
   247  0FEA                     	;# 
   248  0FEB                     	;# 
   249  0FED                     	;# 
   250  0FEE                     	;# 
   251  0FEE                     	;# 
   252  0FEF                     	;# 
   253  0000                     	;# 
   254  0001                     	;# 
   255  0002                     	;# 
   256  0003                     	;# 
   257  0004                     	;# 
   258  0005                     	;# 
   259  0006                     	;# 
   260  0007                     	;# 
   261  0008                     	;# 
   262  0009                     	;# 
   263  000A                     	;# 
   264  000B                     	;# 
   265  000C                     	;# 
   266  000E                     	;# 
   267  0011                     	;# 
   268  0012                     	;# 
   269  0013                     	;# 
   270  0015                     	;# 
   271  0016                     	;# 
   272  0016                     	;# 
   273  0017                     	;# 
   274  0018                     	;# 
   275  0019                     	;# 
   276  001A                     	;# 
   277  001B                     	;# 
   278  001C                     	;# 
   279  008C                     	;# 
   280  008E                     	;# 
   281  0091                     	;# 
   282  0092                     	;# 
   283  0093                     	;# 
   284  0095                     	;# 
   285  0096                     	;# 
   286  0097                     	;# 
   287  0098                     	;# 
   288  0099                     	;# 
   289  009A                     	;# 
   290  009B                     	;# 
   291  009B                     	;# 
   292  009C                     	;# 
   293  009D                     	;# 
   294  009E                     	;# 
   295  009F                     	;# 
   296  010C                     	;# 
   297  010E                     	;# 
   298  0111                     	;# 
   299  0112                     	;# 
   300  0113                     	;# 
   301  0114                     	;# 
   302  0115                     	;# 
   303  0116                     	;# 
   304  0117                     	;# 
   305  0118                     	;# 
   306  0119                     	;# 
   307  018C                     	;# 
   308  018E                     	;# 
   309  0191                     	;# 
   310  0191                     	;# 
   311  0192                     	;# 
   312  0193                     	;# 
   313  0193                     	;# 
   314  0194                     	;# 
   315  0195                     	;# 
   316  0196                     	;# 
   317  0197                     	;# 
   318  0199                     	;# 
   319  019A                     	;# 
   320  019B                     	;# 
   321  019B                     	;# 
   322  019C                     	;# 
   323  019D                     	;# 
   324  019E                     	;# 
   325  019F                     	;# 
   326  020C                     	;# 
   327  020E                     	;# 
   328  028C                     	;# 
   329  028E                     	;# 
   330  030C                     	;# 
   331  030E                     	;# 
   332  038C                     	;# 
   333  038E                     	;# 
   334  0391                     	;# 
   335  0392                     	;# 
   336  0393                     	;# 
   337  0397                     	;# 
   338  0398                     	;# 
   339  0399                     	;# 
   340  0691                     	;# 
   341  0692                     	;# 
   342  0693                     	;# 
   343  0694                     	;# 
   344  0695                     	;# 
   345  0D8E                     	;# 
   346  0D8F                     	;# 
   347  0D90                     	;# 
   348  0D91                     	;# 
   349  0D91                     	;# 
   350  0D92                     	;# 
   351  0D93                     	;# 
   352  0D93                     	;# 
   353  0D94                     	;# 
   354  0D95                     	;# 
   355  0D95                     	;# 
   356  0D96                     	;# 
   357  0D97                     	;# 
   358  0D97                     	;# 
   359  0D98                     	;# 
   360  0D99                     	;# 
   361  0D99                     	;# 
   362  0D9A                     	;# 
   363  0D9B                     	;# 
   364  0D9C                     	;# 
   365  0D9C                     	;# 
   366  0D9D                     	;# 
   367  0D9D                     	;# 
   368  0D9E                     	;# 
   369  0D9F                     	;# 
   370  0DA0                     	;# 
   371  0DA1                     	;# 
   372  0DA1                     	;# 
   373  0DA2                     	;# 
   374  0DA3                     	;# 
   375  0DA3                     	;# 
   376  0DA4                     	;# 
   377  0DA5                     	;# 
   378  0DA5                     	;# 
   379  0DA6                     	;# 
   380  0DA7                     	;# 
   381  0DA7                     	;# 
   382  0DA8                     	;# 
   383  0DA9                     	;# 
   384  0DA9                     	;# 
   385  0DAA                     	;# 
   386  0DAB                     	;# 
   387  0DAC                     	;# 
   388  0DAC                     	;# 
   389  0DAD                     	;# 
   390  0DAD                     	;# 
   391  0DAE                     	;# 
   392  0DAF                     	;# 
   393  0DB0                     	;# 
   394  0DB1                     	;# 
   395  0DB1                     	;# 
   396  0DB2                     	;# 
   397  0DB3                     	;# 
   398  0DB3                     	;# 
   399  0DB4                     	;# 
   400  0DB5                     	;# 
   401  0DB5                     	;# 
   402  0DB6                     	;# 
   403  0DB7                     	;# 
   404  0DB7                     	;# 
   405  0DB8                     	;# 
   406  0DB9                     	;# 
   407  0DB9                     	;# 
   408  0DBA                     	;# 
   409  0DBB                     	;# 
   410  0DBC                     	;# 
   411  0DBC                     	;# 
   412  0DBD                     	;# 
   413  0DBD                     	;# 
   414  0DBE                     	;# 
   415  0DBF                     	;# 
   416  0DC0                     	;# 
   417  0DC1                     	;# 
   418  0DC1                     	;# 
   419  0DC2                     	;# 
   420  0DC3                     	;# 
   421  0DC3                     	;# 
   422  0DC4                     	;# 
   423  0DC5                     	;# 
   424  0DC5                     	;# 
   425  0DC6                     	;# 
   426  0DC7                     	;# 
   427  0DC7                     	;# 
   428  0DC8                     	;# 
   429  0DC9                     	;# 
   430  0DC9                     	;# 
   431  0DCA                     	;# 
   432  0DCB                     	;# 
   433  0DCC                     	;# 
   434  0DCC                     	;# 
   435  0DCD                     	;# 
   436  0DCD                     	;# 
   437  0DCE                     	;# 
   438  0DCF                     	;# 
   439  0DD0                     	;# 
   440  0E0F                     	;# 
   441  0E10                     	;# 
   442  0E11                     	;# 
   443  0E12                     	;# 
   444  0E13                     	;# 
   445  0E14                     	;# 
   446  0E15                     	;# 
   447  0E16                     	;# 
   448  0E17                     	;# 
   449  0E90                     	;# 
   450  0E91                     	;# 
   451  0E92                     	;# 
   452  0E94                     	;# 
   453  0E95                     	;# 
   454  0EA0                     	;# 
   455  0EA1                     	;# 
   456  0EA2                     	;# 
   457  0EA3                     	;# 
   458  0EA4                     	;# 
   459  0EA5                     	;# 
   460  0FE4                     	;# 
   461  0FE5                     	;# 
   462  0FE6                     	;# 
   463  0FE7                     	;# 
   464  0FE8                     	;# 
   465  0FE8                     	;# 
   466  0FE9                     	;# 
   467  0FEA                     	;# 
   468  0FEA                     	;# 
   469  0FEB                     	;# 
   470  0FED                     	;# 
   471  0FEE                     	;# 
   472  0FEE                     	;# 
   473  0FEF                     	;# 
   474  0000                     	;# 
   475  0001                     	;# 
   476  0002                     	;# 
   477  0003                     	;# 
   478  0004                     	;# 
   479  0005                     	;# 
   480  0006                     	;# 
   481  0007                     	;# 
   482  0008                     	;# 
   483  0009                     	;# 
   484  000A                     	;# 
   485  000B                     	;# 
   486  000C                     	;# 
   487  000E                     	;# 
   488  0011                     	;# 
   489  0012                     	;# 
   490  0013                     	;# 
   491  0015                     	;# 
   492  0016                     	;# 
   493  0016                     	;# 
   494  0017                     	;# 
   495  0018                     	;# 
   496  0019                     	;# 
   497  001A                     	;# 
   498  001B                     	;# 
   499  001C                     	;# 
   500  008C                     	;# 
   501  008E                     	;# 
   502  0091                     	;# 
   503  0092                     	;# 
   504  0093                     	;# 
   505  0095                     	;# 
   506  0096                     	;# 
   507  0097                     	;# 
   508  0098                     	;# 
   509  0099                     	;# 
   510  009A                     	;# 
   511  009B                     	;# 
   512  009B                     	;# 
   513  009C                     	;# 
   514  009D                     	;# 
   515  009E                     	;# 
   516  009F                     	;# 
   517  010C                     	;# 
   518  010E                     	;# 
   519  0111                     	;# 
   520  0112                     	;# 
   521  0113                     	;# 
   522  0114                     	;# 
   523  0115                     	;# 
   524  0116                     	;# 
   525  0117                     	;# 
   526  0118                     	;# 
   527  0119                     	;# 
   528  018C                     	;# 
   529  018E                     	;# 
   530  0191                     	;# 
   531  0191                     	;# 
   532  0192                     	;# 
   533  0193                     	;# 
   534  0193                     	;# 
   535  0194                     	;# 
   536  0195                     	;# 
   537  0196                     	;# 
   538  0197                     	;# 
   539  0199                     	;# 
   540  019A                     	;# 
   541  019B                     	;# 
   542  019B                     	;# 
   543  019C                     	;# 
   544  019D                     	;# 
   545  019E                     	;# 
   546  019F                     	;# 
   547  020C                     	;# 
   548  020E                     	;# 
   549  028C                     	;# 
   550  028E                     	;# 
   551  030C                     	;# 
   552  030E                     	;# 
   553  038C                     	;# 
   554  038E                     	;# 
   555  0391                     	;# 
   556  0392                     	;# 
   557  0393                     	;# 
   558  0397                     	;# 
   559  0398                     	;# 
   560  0399                     	;# 
   561  0691                     	;# 
   562  0692                     	;# 
   563  0693                     	;# 
   564  0694                     	;# 
   565  0695                     	;# 
   566  0D8E                     	;# 
   567  0D8F                     	;# 
   568  0D90                     	;# 
   569  0D91                     	;# 
   570  0D91                     	;# 
   571  0D92                     	;# 
   572  0D93                     	;# 
   573  0D93                     	;# 
   574  0D94                     	;# 
   575  0D95                     	;# 
   576  0D95                     	;# 
   577  0D96                     	;# 
   578  0D97                     	;# 
   579  0D97                     	;# 
   580  0D98                     	;# 
   581  0D99                     	;# 
   582  0D99                     	;# 
   583  0D9A                     	;# 
   584  0D9B                     	;# 
   585  0D9C                     	;# 
   586  0D9C                     	;# 
   587  0D9D                     	;# 
   588  0D9D                     	;# 
   589  0D9E                     	;# 
   590  0D9F                     	;# 
   591  0DA0                     	;# 
   592  0DA1                     	;# 
   593  0DA1                     	;# 
   594  0DA2                     	;# 
   595  0DA3                     	;# 
   596  0DA3                     	;# 
   597  0DA4                     	;# 
   598  0DA5                     	;# 
   599  0DA5                     	;# 
   600  0DA6                     	;# 
   601  0DA7                     	;# 
   602  0DA7                     	;# 
   603  0DA8                     	;# 
   604  0DA9                     	;# 
   605  0DA9                     	;# 
   606  0DAA                     	;# 
   607  0DAB                     	;# 
   608  0DAC                     	;# 
   609  0DAC                     	;# 
   610  0DAD                     	;# 
   611  0DAD                     	;# 
   612  0DAE                     	;# 
   613  0DAF                     	;# 
   614  0DB0                     	;# 
   615  0DB1                     	;# 
   616  0DB1                     	;# 
   617  0DB2                     	;# 
   618  0DB3                     	;# 
   619  0DB3                     	;# 
   620  0DB4                     	;# 
   621  0DB5                     	;# 
   622  0DB5                     	;# 
   623  0DB6                     	;# 
   624  0DB7                     	;# 
   625  0DB7                     	;# 
   626  0DB8                     	;# 
   627  0DB9                     	;# 
   628  0DB9                     	;# 
   629  0DBA                     	;# 
   630  0DBB                     	;# 
   631  0DBC                     	;# 
   632  0DBC                     	;# 
   633  0DBD                     	;# 
   634  0DBD                     	;# 
   635  0DBE                     	;# 
   636  0DBF                     	;# 
   637  0DC0                     	;# 
   638  0DC1                     	;# 
   639  0DC1                     	;# 
   640  0DC2                     	;# 
   641  0DC3                     	;# 
   642  0DC3                     	;# 
   643  0DC4                     	;# 
   644  0DC5                     	;# 
   645  0DC5                     	;# 
   646  0DC6                     	;# 
   647  0DC7                     	;# 
   648  0DC7                     	;# 
   649  0DC8                     	;# 
   650  0DC9                     	;# 
   651  0DC9                     	;# 
   652  0DCA                     	;# 
   653  0DCB                     	;# 
   654  0DCC                     	;# 
   655  0DCC                     	;# 
   656  0DCD                     	;# 
   657  0DCD                     	;# 
   658  0DCE                     	;# 
   659  0DCF                     	;# 
   660  0DD0                     	;# 
   661  0E0F                     	;# 
   662  0E10                     	;# 
   663  0E11                     	;# 
   664  0E12                     	;# 
   665  0E13                     	;# 
   666  0E14                     	;# 
   667  0E15                     	;# 
   668  0E16                     	;# 
   669  0E17                     	;# 
   670  0E90                     	;# 
   671  0E91                     	;# 
   672  0E92                     	;# 
   673  0E94                     	;# 
   674  0E95                     	;# 
   675  0EA0                     	;# 
   676  0EA1                     	;# 
   677  0EA2                     	;# 
   678  0EA3                     	;# 
   679  0EA4                     	;# 
   680  0EA5                     	;# 
   681  0FE4                     	;# 
   682  0FE5                     	;# 
   683  0FE6                     	;# 
   684  0FE7                     	;# 
   685  0FE8                     	;# 
   686  0FE8                     	;# 
   687  0FE9                     	;# 
   688  0FEA                     	;# 
   689  0FEA                     	;# 
   690  0FEB                     	;# 
   691  0FED                     	;# 
   692  0FEE                     	;# 
   693  0FEE                     	;# 
   694  0FEF                     	;# 
   695  0000                     	;# 
   696  0001                     	;# 
   697  0002                     	;# 
   698  0003                     	;# 
   699  0004                     	;# 
   700  0005                     	;# 
   701  0006                     	;# 
   702  0007                     	;# 
   703  0008                     	;# 
   704  0009                     	;# 
   705  000A                     	;# 
   706  000B                     	;# 
   707  000C                     	;# 
   708  000E                     	;# 
   709  0011                     	;# 
   710  0012                     	;# 
   711  0013                     	;# 
   712  0015                     	;# 
   713  0016                     	;# 
   714  0016                     	;# 
   715  0017                     	;# 
   716  0018                     	;# 
   717  0019                     	;# 
   718  001A                     	;# 
   719  001B                     	;# 
   720  001C                     	;# 
   721  008C                     	;# 
   722  008E                     	;# 
   723  0091                     	;# 
   724  0092                     	;# 
   725  0093                     	;# 
   726  0095                     	;# 
   727  0096                     	;# 
   728  0097                     	;# 
   729  0098                     	;# 
   730  0099                     	;# 
   731  009A                     	;# 
   732  009B                     	;# 
   733  009B                     	;# 
   734  009C                     	;# 
   735  009D                     	;# 
   736  009E                     	;# 
   737  009F                     	;# 
   738  010C                     	;# 
   739  010E                     	;# 
   740  0111                     	;# 
   741  0112                     	;# 
   742  0113                     	;# 
   743  0114                     	;# 
   744  0115                     	;# 
   745  0116                     	;# 
   746  0117                     	;# 
   747  0118                     	;# 
   748  0119                     	;# 
   749  018C                     	;# 
   750  018E                     	;# 
   751  0191                     	;# 
   752  0191                     	;# 
   753  0192                     	;# 
   754  0193                     	;# 
   755  0193                     	;# 
   756  0194                     	;# 
   757  0195                     	;# 
   758  0196                     	;# 
   759  0197                     	;# 
   760  0199                     	;# 
   761  019A                     	;# 
   762  019B                     	;# 
   763  019B                     	;# 
   764  019C                     	;# 
   765  019D                     	;# 
   766  019E                     	;# 
   767  019F                     	;# 
   768  020C                     	;# 
   769  020E                     	;# 
   770  028C                     	;# 
   771  028E                     	;# 
   772  030C                     	;# 
   773  030E                     	;# 
   774  038C                     	;# 
   775  038E                     	;# 
   776  0391                     	;# 
   777  0392                     	;# 
   778  0393                     	;# 
   779  0397                     	;# 
   780  0398                     	;# 
   781  0399                     	;# 
   782  0691                     	;# 
   783  0692                     	;# 
   784  0693                     	;# 
   785  0694                     	;# 
   786  0695                     	;# 
   787  0D8E                     	;# 
   788  0D8F                     	;# 
   789  0D90                     	;# 
   790  0D91                     	;# 
   791  0D91                     	;# 
   792  0D92                     	;# 
   793  0D93                     	;# 
   794  0D93                     	;# 
   795  0D94                     	;# 
   796  0D95                     	;# 
   797  0D95                     	;# 
   798  0D96                     	;# 
   799  0D97                     	;# 
   800  0D97                     	;# 
   801  0D98                     	;# 
   802  0D99                     	;# 
   803  0D99                     	;# 
   804  0D9A                     	;# 
   805  0D9B                     	;# 
   806  0D9C                     	;# 
   807  0D9C                     	;# 
   808  0D9D                     	;# 
   809  0D9D                     	;# 
   810  0D9E                     	;# 
   811  0D9F                     	;# 
   812  0DA0                     	;# 
   813  0DA1                     	;# 
   814  0DA1                     	;# 
   815  0DA2                     	;# 
   816  0DA3                     	;# 
   817  0DA3                     	;# 
   818  0DA4                     	;# 
   819  0DA5                     	;# 
   820  0DA5                     	;# 
   821  0DA6                     	;# 
   822  0DA7                     	;# 
   823  0DA7                     	;# 
   824  0DA8                     	;# 
   825  0DA9                     	;# 
   826  0DA9                     	;# 
   827  0DAA                     	;# 
   828  0DAB                     	;# 
   829  0DAC                     	;# 
   830  0DAC                     	;# 
   831  0DAD                     	;# 
   832  0DAD                     	;# 
   833  0DAE                     	;# 
   834  0DAF                     	;# 
   835  0DB0                     	;# 
   836  0DB1                     	;# 
   837  0DB1                     	;# 
   838  0DB2                     	;# 
   839  0DB3                     	;# 
   840  0DB3                     	;# 
   841  0DB4                     	;# 
   842  0DB5                     	;# 
   843  0DB5                     	;# 
   844  0DB6                     	;# 
   845  0DB7                     	;# 
   846  0DB7                     	;# 
   847  0DB8                     	;# 
   848  0DB9                     	;# 
   849  0DB9                     	;# 
   850  0DBA                     	;# 
   851  0DBB                     	;# 
   852  0DBC                     	;# 
   853  0DBC                     	;# 
   854  0DBD                     	;# 
   855  0DBD                     	;# 
   856  0DBE                     	;# 
   857  0DBF                     	;# 
   858  0DC0                     	;# 
   859  0DC1                     	;# 
   860  0DC1                     	;# 
   861  0DC2                     	;# 
   862  0DC3                     	;# 
   863  0DC3                     	;# 
   864  0DC4                     	;# 
   865  0DC5                     	;# 
   866  0DC5                     	;# 
   867  0DC6                     	;# 
   868  0DC7                     	;# 
   869  0DC7                     	;# 
   870  0DC8                     	;# 
   871  0DC9                     	;# 
   872  0DC9                     	;# 
   873  0DCA                     	;# 
   874  0DCB                     	;# 
   875  0DCC                     	;# 
   876  0DCC                     	;# 
   877  0DCD                     	;# 
   878  0DCD                     	;# 
   879  0DCE                     	;# 
   880  0DCF                     	;# 
   881  0DD0                     	;# 
   882  0E0F                     	;# 
   883  0E10                     	;# 
   884  0E11                     	;# 
   885  0E12                     	;# 
   886  0E13                     	;# 
   887  0E14                     	;# 
   888  0E15                     	;# 
   889  0E16                     	;# 
   890  0E17                     	;# 
   891  0E90                     	;# 
   892  0E91                     	;# 
   893  0E92                     	;# 
   894  0E94                     	;# 
   895  0E95                     	;# 
   896  0EA0                     	;# 
   897  0EA1                     	;# 
   898  0EA2                     	;# 
   899  0EA3                     	;# 
   900  0EA4                     	;# 
   901  0EA5                     	;# 
   902  0FE4                     	;# 
   903  0FE5                     	;# 
   904  0FE6                     	;# 
   905  0FE7                     	;# 
   906  0FE8                     	;# 
   907  0FE8                     	;# 
   908  0FE9                     	;# 
   909  0FEA                     	;# 
   910  0FEA                     	;# 
   911  0FEB                     	;# 
   912  0FED                     	;# 
   913  0FEE                     	;# 
   914  0FEE                     	;# 
   915  0FEF                     	;# 
   916  0000                     	;# 
   917  0001                     	;# 
   918  0002                     	;# 
   919  0003                     	;# 
   920  0004                     	;# 
   921  0005                     	;# 
   922  0006                     	;# 
   923  0007                     	;# 
   924  0008                     	;# 
   925  0009                     	;# 
   926  000A                     	;# 
   927  000B                     	;# 
   928  000C                     	;# 
   929  000E                     	;# 
   930  0011                     	;# 
   931  0012                     	;# 
   932  0013                     	;# 
   933  0015                     	;# 
   934  0016                     	;# 
   935  0016                     	;# 
   936  0017                     	;# 
   937  0018                     	;# 
   938  0019                     	;# 
   939  001A                     	;# 
   940  001B                     	;# 
   941  001C                     	;# 
   942  008C                     	;# 
   943  008E                     	;# 
   944  0091                     	;# 
   945  0092                     	;# 
   946  0093                     	;# 
   947  0095                     	;# 
   948  0096                     	;# 
   949  0097                     	;# 
   950  0098                     	;# 
   951  0099                     	;# 
   952  009A                     	;# 
   953  009B                     	;# 
   954  009B                     	;# 
   955  009C                     	;# 
   956  009D                     	;# 
   957  009E                     	;# 
   958  009F                     	;# 
   959  010C                     	;# 
   960  010E                     	;# 
   961  0111                     	;# 
   962  0112                     	;# 
   963  0113                     	;# 
   964  0114                     	;# 
   965  0115                     	;# 
   966  0116                     	;# 
   967  0117                     	;# 
   968  0118                     	;# 
   969  0119                     	;# 
   970  018C                     	;# 
   971  018E                     	;# 
   972  0191                     	;# 
   973  0191                     	;# 
   974  0192                     	;# 
   975  0193                     	;# 
   976  0193                     	;# 
   977  0194                     	;# 
   978  0195                     	;# 
   979  0196                     	;# 
   980  0197                     	;# 
   981  0199                     	;# 
   982  019A                     	;# 
   983  019B                     	;# 
   984  019B                     	;# 
   985  019C                     	;# 
   986  019D                     	;# 
   987  019E                     	;# 
   988  019F                     	;# 
   989  020C                     	;# 
   990  020E                     	;# 
   991  028C                     	;# 
   992  028E                     	;# 
   993  030C                     	;# 
   994  030E                     	;# 
   995  038C                     	;# 
   996  038E                     	;# 
   997  0391                     	;# 
   998  0392                     	;# 
   999  0393                     	;# 
  1000  0397                     	;# 
  1001  0398                     	;# 
  1002  0399                     	;# 
  1003  0691                     	;# 
  1004  0692                     	;# 
  1005  0693                     	;# 
  1006  0694                     	;# 
  1007  0695                     	;# 
  1008  0D8E                     	;# 
  1009  0D8F                     	;# 
  1010  0D90                     	;# 
  1011  0D91                     	;# 
  1012  0D91                     	;# 
  1013  0D92                     	;# 
  1014  0D93                     	;# 
  1015  0D93                     	;# 
  1016  0D94                     	;# 
  1017  0D95                     	;# 
  1018  0D95                     	;# 
  1019  0D96                     	;# 
  1020  0D97                     	;# 
  1021  0D97                     	;# 
  1022  0D98                     	;# 
  1023  0D99                     	;# 
  1024  0D99                     	;# 
  1025  0D9A                     	;# 
  1026  0D9B                     	;# 
  1027  0D9C                     	;# 
  1028  0D9C                     	;# 
  1029  0D9D                     	;# 
  1030  0D9D                     	;# 
  1031  0D9E                     	;# 
  1032  0D9F                     	;# 
  1033  0DA0                     	;# 
  1034  0DA1                     	;# 
  1035  0DA1                     	;# 
  1036  0DA2                     	;# 
  1037  0DA3                     	;# 
  1038  0DA3                     	;# 
  1039  0DA4                     	;# 
  1040  0DA5                     	;# 
  1041  0DA5                     	;# 
  1042  0DA6                     	;# 
  1043  0DA7                     	;# 
  1044  0DA7                     	;# 
  1045  0DA8                     	;# 
  1046  0DA9                     	;# 
  1047  0DA9                     	;# 
  1048  0DAA                     	;# 
  1049  0DAB                     	;# 
  1050  0DAC                     	;# 
  1051  0DAC                     	;# 
  1052  0DAD                     	;# 
  1053  0DAD                     	;# 
  1054  0DAE                     	;# 
  1055  0DAF                     	;# 
  1056  0DB0                     	;# 
  1057  0DB1                     	;# 
  1058  0DB1                     	;# 
  1059  0DB2                     	;# 
  1060  0DB3                     	;# 
  1061  0DB3                     	;# 
  1062  0DB4                     	;# 
  1063  0DB5                     	;# 
  1064  0DB5                     	;# 
  1065  0DB6                     	;# 
  1066  0DB7                     	;# 
  1067  0DB7                     	;# 
  1068  0DB8                     	;# 
  1069  0DB9                     	;# 
  1070  0DB9                     	;# 
  1071  0DBA                     	;# 
  1072  0DBB                     	;# 
  1073  0DBC                     	;# 
  1074  0DBC                     	;# 
  1075  0DBD                     	;# 
  1076  0DBD                     	;# 
  1077  0DBE                     	;# 
  1078  0DBF                     	;# 
  1079  0DC0                     	;# 
  1080  0DC1                     	;# 
  1081  0DC1                     	;# 
  1082  0DC2                     	;# 
  1083  0DC3                     	;# 
  1084  0DC3                     	;# 
  1085  0DC4                     	;# 
  1086  0DC5                     	;# 
  1087  0DC5                     	;# 
  1088  0DC6                     	;# 
  1089  0DC7                     	;# 
  1090  0DC7                     	;# 
  1091  0DC8                     	;# 
  1092  0DC9                     	;# 
  1093  0DC9                     	;# 
  1094  0DCA                     	;# 
  1095  0DCB                     	;# 
  1096  0DCC                     	;# 
  1097  0DCC                     	;# 
  1098  0DCD                     	;# 
  1099  0DCD                     	;# 
  1100  0DCE                     	;# 
  1101  0DCF                     	;# 
  1102  0DD0                     	;# 
  1103  0E0F                     	;# 
  1104  0E10                     	;# 
  1105  0E11                     	;# 
  1106  0E12                     	;# 
  1107  0E13                     	;# 
  1108  0E14                     	;# 
  1109  0E15                     	;# 
  1110  0E16                     	;# 
  1111  0E17                     	;# 
  1112  0E90                     	;# 
  1113  0E91                     	;# 
  1114  0E92                     	;# 
  1115  0E94                     	;# 
  1116  0E95                     	;# 
  1117  0EA0                     	;# 
  1118  0EA1                     	;# 
  1119  0EA2                     	;# 
  1120  0EA3                     	;# 
  1121  0EA4                     	;# 
  1122  0EA5                     	;# 
  1123  0FE4                     	;# 
  1124  0FE5                     	;# 
  1125  0FE6                     	;# 
  1126  0FE7                     	;# 
  1127  0FE8                     	;# 
  1128  0FE8                     	;# 
  1129  0FE9                     	;# 
  1130  0FEA                     	;# 
  1131  0FEA                     	;# 
  1132  0FEB                     	;# 
  1133  0FED                     	;# 
  1134  0FEE                     	;# 
  1135  0FEE                     	;# 
  1136  0FEF                     	;# 
  1137  0FFF                     	;# 
  1138  0000                     	;# 
  1139  0001                     	;# 
  1140  0002                     	;# 
  1141  0003                     	;# 
  1142  0004                     	;# 
  1143  0005                     	;# 
  1144  0006                     	;# 
  1145  0007                     	;# 
  1146  0008                     	;# 
  1147  0009                     	;# 
  1148  000A                     	;# 
  1149  000B                     	;# 
  1150  000C                     	;# 
  1151  000E                     	;# 
  1152  0011                     	;# 
  1153  0012                     	;# 
  1154  0013                     	;# 
  1155  0015                     	;# 
  1156  0016                     	;# 
  1157  0016                     	;# 
  1158  0017                     	;# 
  1159  0018                     	;# 
  1160  0019                     	;# 
  1161  001A                     	;# 
  1162  001B                     	;# 
  1163  001C                     	;# 
  1164  008C                     	;# 
  1165  008E                     	;# 
  1166  0091                     	;# 
  1167  0092                     	;# 
  1168  0093                     	;# 
  1169  0095                     	;# 
  1170  0096                     	;# 
  1171  0097                     	;# 
  1172  0098                     	;# 
  1173  0099                     	;# 
  1174  009A                     	;# 
  1175  009B                     	;# 
  1176  009B                     	;# 
  1177  009C                     	;# 
  1178  009D                     	;# 
  1179  009E                     	;# 
  1180  009F                     	;# 
  1181  010C                     	;# 
  1182  010E                     	;# 
  1183  0111                     	;# 
  1184  0112                     	;# 
  1185  0113                     	;# 
  1186  0114                     	;# 
  1187  0115                     	;# 
  1188  0116                     	;# 
  1189  0117                     	;# 
  1190  0118                     	;# 
  1191  0119                     	;# 
  1192  018C                     	;# 
  1193  018E                     	;# 
  1194  0191                     	;# 
  1195  0191                     	;# 
  1196  0192                     	;# 
  1197  0193                     	;# 
  1198  0193                     	;# 
  1199  0194                     	;# 
  1200  0195                     	;# 
  1201  0196                     	;# 
  1202  0197                     	;# 
  1203  0199                     	;# 
  1204  019A                     	;# 
  1205  019B                     	;# 
  1206  019B                     	;# 
  1207  019C                     	;# 
  1208  019D                     	;# 
  1209  019E                     	;# 
  1210  019F                     	;# 
  1211  020C                     	;# 
  1212  020E                     	;# 
  1213  028C                     	;# 
  1214  028E                     	;# 
  1215  030C                     	;# 
  1216  030E                     	;# 
  1217  038C                     	;# 
  1218  038E                     	;# 
  1219  0391                     	;# 
  1220  0392                     	;# 
  1221  0393                     	;# 
  1222  0397                     	;# 
  1223  0398                     	;# 
  1224  0399                     	;# 
  1225  0691                     	;# 
  1226  0692                     	;# 
  1227  0693                     	;# 
  1228  0694                     	;# 
  1229  0695                     	;# 
  1230  0D8E                     	;# 
  1231  0D8F                     	;# 
  1232  0D90                     	;# 
  1233  0D91                     	;# 
  1234  0D91                     	;# 
  1235  0D92                     	;# 
  1236  0D93                     	;# 
  1237  0D93                     	;# 
  1238  0D94                     	;# 
  1239  0D95                     	;# 
  1240  0D95                     	;# 
  1241  0D96                     	;# 
  1242  0D97                     	;# 
  1243  0D97                     	;# 
  1244  0D98                     	;# 
  1245  0D99                     	;# 
  1246  0D99                     	;# 
  1247  0D9A                     	;# 
  1248  0D9B                     	;# 
  1249  0D9C                     	;# 
  1250  0D9C                     	;# 
  1251  0D9D                     	;# 
  1252  0D9D                     	;# 
  1253  0D9E                     	;# 
  1254  0D9F                     	;# 
  1255  0DA0                     	;# 
  1256  0DA1                     	;# 
  1257  0DA1                     	;# 
  1258  0DA2                     	;# 
  1259  0DA3                     	;# 
  1260  0DA3                     	;# 
  1261  0DA4                     	;# 
  1262  0DA5                     	;# 
  1263  0DA5                     	;# 
  1264  0DA6                     	;# 
  1265  0DA7                     	;# 
  1266  0DA7                     	;# 
  1267  0DA8                     	;# 
  1268  0DA9                     	;# 
  1269  0DA9                     	;# 
  1270  0DAA                     	;# 
  1271  0DAB                     	;# 
  1272  0DAC                     	;# 
  1273  0DAC                     	;# 
  1274  0DAD                     	;# 
  1275  0DAD                     	;# 
  1276  0DAE                     	;# 
  1277  0DAF                     	;# 
  1278  0DB0                     	;# 
  1279  0DB1                     	;# 
  1280  0DB1                     	;# 
  1281  0DB2                     	;# 
  1282  0DB3                     	;# 
  1283  0DB3                     	;# 
  1284  0DB4                     	;# 
  1285  0DB5                     	;# 
  1286  0DB5                     	;# 
  1287  0DB6                     	;# 
  1288  0DB7                     	;# 
  1289  0DB7                     	;# 
  1290  0DB8                     	;# 
  1291  0DB9                     	;# 
  1292  0DB9                     	;# 
  1293  0DBA                     	;# 
  1294  0DBB                     	;# 
  1295  0DBC                     	;# 
  1296  0DBC                     	;# 
  1297  0DBD                     	;# 
  1298  0DBD                     	;# 
  1299  0DBE                     	;# 
  1300  0DBF                     	;# 
  1301  0DC0                     	;# 
  1302  0DC1                     	;# 
  1303  0DC1                     	;# 
  1304  0DC2                     	;# 
  1305  0DC3                     	;# 
  1306  0DC3                     	;# 
  1307  0DC4                     	;# 
  1308  0DC5                     	;# 
  1309  0DC5                     	;# 
  1310  0DC6                     	;# 
  1311  0DC7                     	;# 
  1312  0DC7                     	;# 
  1313  0DC8                     	;# 
  1314  0DC9                     	;# 
  1315  0DC9                     	;# 
  1316  0DCA                     	;# 
  1317  0DCB                     	;# 
  1318  0DCC                     	;# 
  1319  0DCC                     	;# 
  1320  0DCD                     	;# 
  1321  0DCD                     	;# 
  1322  0DCE                     	;# 
  1323  0DCF                     	;# 
  1324  0DD0                     	;# 
  1325  0E0F                     	;# 
  1326  0E10                     	;# 
  1327  0E11                     	;# 
  1328  0E12                     	;# 
  1329  0E13                     	;# 
  1330  0E14                     	;# 
  1331  0E15                     	;# 
  1332  0E16                     	;# 
  1333  0E17                     	;# 
  1334  0E90                     	;# 
  1335  0E91                     	;# 
  1336  0E92                     	;# 
  1337  0E94                     	;# 
  1338  0E95                     	;# 
  1339  0EA0                     	;# 
  1340  0EA1                     	;# 
  1341  0EA2                     	;# 
  1342  0EA3                     	;# 
  1343  0EA4                     	;# 
  1344  0EA5                     	;# 
  1345  0FE4                     	;# 
  1346  0FE5                     	;# 
  1347  0FE6                     	;# 
  1348  0FE7                     	;# 
  1349  0FE8                     	;# 
  1350  0FE8                     	;# 
  1351  0FE9                     	;# 
  1352  0FEA                     	;# 
  1353  0FEA                     	;# 
  1354  0FEB                     	;# 
  1355  0FED                     	;# 
  1356  0FEE                     	;# 
  1357  0FEE                     	;# 
  1358  0FEF                     	;# 
  1359  0000                     	;# 
  1360  0001                     	;# 
  1361  0002                     	;# 
  1362  0003                     	;# 
  1363  0004                     	;# 
  1364  0005                     	;# 
  1365  0006                     	;# 
  1366  0007                     	;# 
  1367  0008                     	;# 
  1368  0009                     	;# 
  1369  000A                     	;# 
  1370  000B                     	;# 
  1371  000C                     	;# 
  1372  000E                     	;# 
  1373  0011                     	;# 
  1374  0012                     	;# 
  1375  0013                     	;# 
  1376  0015                     	;# 
  1377  0016                     	;# 
  1378  0016                     	;# 
  1379  0017                     	;# 
  1380  0018                     	;# 
  1381  0019                     	;# 
  1382  001A                     	;# 
  1383  001B                     	;# 
  1384  001C                     	;# 
  1385  008C                     	;# 
  1386  008E                     	;# 
  1387  0091                     	;# 
  1388  0092                     	;# 
  1389  0093                     	;# 
  1390  0095                     	;# 
  1391  0096                     	;# 
  1392  0097                     	;# 
  1393  0098                     	;# 
  1394  0099                     	;# 
  1395  009A                     	;# 
  1396  009B                     	;# 
  1397  009B                     	;# 
  1398  009C                     	;# 
  1399  009D                     	;# 
  1400  009E                     	;# 
  1401  009F                     	;# 
  1402  010C                     	;# 
  1403  010E                     	;# 
  1404  0111                     	;# 
  1405  0112                     	;# 
  1406  0113                     	;# 
  1407  0114                     	;# 
  1408  0115                     	;# 
  1409  0116                     	;# 
  1410  0117                     	;# 
  1411  0118                     	;# 
  1412  0119                     	;# 
  1413  018C                     	;# 
  1414  018E                     	;# 
  1415  0191                     	;# 
  1416  0191                     	;# 
  1417  0192                     	;# 
  1418  0193                     	;# 
  1419  0193                     	;# 
  1420  0194                     	;# 
  1421  0195                     	;# 
  1422  0196                     	;# 
  1423  0197                     	;# 
  1424  0199                     	;# 
  1425  019A                     	;# 
  1426  019B                     	;# 
  1427  019B                     	;# 
  1428  019C                     	;# 
  1429  019D                     	;# 
  1430  019E                     	;# 
  1431  019F                     	;# 
  1432  020C                     	;# 
  1433  020E                     	;# 
  1434  028C                     	;# 
  1435  028E                     	;# 
  1436  030C                     	;# 
  1437  030E                     	;# 
  1438  038C                     	;# 
  1439  038E                     	;# 
  1440  0391                     	;# 
  1441  0392                     	;# 
  1442  0393                     	;# 
  1443  0397                     	;# 
  1444  0398                     	;# 
  1445  0399                     	;# 
  1446  0691                     	;# 
  1447  0692                     	;# 
  1448  0693                     	;# 
  1449  0694                     	;# 
  1450  0695                     	;# 
  1451  0D8E                     	;# 
  1452  0D8F                     	;# 
  1453  0D90                     	;# 
  1454  0D91                     	;# 
  1455  0D91                     	;# 
  1456  0D92                     	;# 
  1457  0D93                     	;# 
  1458  0D93                     	;# 
  1459  0D94                     	;# 
  1460  0D95                     	;# 
  1461  0D95                     	;# 
  1462  0D96                     	;# 
  1463  0D97                     	;# 
  1464  0D97                     	;# 
  1465  0D98                     	;# 
  1466  0D99                     	;# 
  1467  0D99                     	;# 
  1468  0D9A                     	;# 
  1469  0D9B                     	;# 
  1470  0D9C                     	;# 
  1471  0D9C                     	;# 
  1472  0D9D                     	;# 
  1473  0D9D                     	;# 
  1474  0D9E                     	;# 
  1475  0D9F                     	;# 
  1476  0DA0                     	;# 
  1477  0DA1                     	;# 
  1478  0DA1                     	;# 
  1479  0DA2                     	;# 
  1480  0DA3                     	;# 
  1481  0DA3                     	;# 
  1482  0DA4                     	;# 
  1483  0DA5                     	;# 
  1484  0DA5                     	;# 
  1485  0DA6                     	;# 
  1486  0DA7                     	;# 
  1487  0DA7                     	;# 
  1488  0DA8                     	;# 
  1489  0DA9                     	;# 
  1490  0DA9                     	;# 
  1491  0DAA                     	;# 
  1492  0DAB                     	;# 
  1493  0DAC                     	;# 
  1494  0DAC                     	;# 
  1495  0DAD                     	;# 
  1496  0DAD                     	;# 
  1497  0DAE                     	;# 
  1498  0DAF                     	;# 
  1499  0DB0                     	;# 
  1500  0DB1                     	;# 
  1501  0DB1                     	;# 
  1502  0DB2                     	;# 
  1503  0DB3                     	;# 
  1504  0DB3                     	;# 
  1505  0DB4                     	;# 
  1506  0DB5                     	;# 
  1507  0DB5                     	;# 
  1508  0DB6                     	;# 
  1509  0DB7                     	;# 
  1510  0DB7                     	;# 
  1511  0DB8                     	;# 
  1512  0DB9                     	;# 
  1513  0DB9                     	;# 
  1514  0DBA                     	;# 
  1515  0DBB                     	;# 
  1516  0DBC                     	;# 
  1517  0DBC                     	;# 
  1518  0DBD                     	;# 
  1519  0DBD                     	;# 
  1520  0DBE                     	;# 
  1521  0DBF                     	;# 
  1522  0DC0                     	;# 
  1523  0DC1                     	;# 
  1524  0DC1                     	;# 
  1525  0DC2                     	;# 
  1526  0DC3                     	;# 
  1527  0DC3                     	;# 
  1528  0DC4                     	;# 
  1529  0DC5                     	;# 
  1530  0DC5                     	;# 
  1531  0DC6                     	;# 
  1532  0DC7                     	;# 
  1533  0DC7                     	;# 
  1534  0DC8                     	;# 
  1535  0DC9                     	;# 
  1536  0DC9                     	;# 
  1537  0DCA                     	;# 
  1538  0DCB                     	;# 
  1539  0DCC                     	;# 
  1540  0DCC                     	;# 
  1541  0DCD                     	;# 
  1542  0DCD                     	;# 
  1543  0DCE                     	;# 
  1544  0DCF                     	;# 
  1545  0DD0                     	;# 
  1546  0E0F                     	;# 
  1547  0E10                     	;# 
  1548  0E11                     	;# 
  1549  0E12                     	;# 
  1550  0E13                     	;# 
  1551  0E14                     	;# 
  1552  0E15                     	;# 
  1553  0E16                     	;# 
  1554  0E17                     	;# 
  1555  0E90                     	;# 
  1556  0E91                     	;# 
  1557  0E92                     	;# 
  1558  0E94                     	;# 
  1559  0E95                     	;# 
  1560  0EA0                     	;# 
  1561  0EA1                     	;# 
  1562  0EA2                     	;# 
  1563  0EA3                     	;# 
  1564  0EA4                     	;# 
  1565  0EA5                     	;# 
  1566  0FE4                     	;# 
  1567  0FE5                     	;# 
  1568  0FE6                     	;# 
  1569  0FE7                     	;# 
  1570  0FE8                     	;# 
  1571  0FE8                     	;# 
  1572  0FE9                     	;# 
  1573  0FEA                     	;# 
  1574  0FEA                     	;# 
  1575  0FEB                     	;# 
  1576  0FED                     	;# 
  1577  0FEE                     	;# 
  1578  0FEE                     	;# 
  1579  0FEF                     	;# 
  1580  0000                     	;# 
  1581  0001                     	;# 
  1582  0002                     	;# 
  1583  0003                     	;# 
  1584  0004                     	;# 
  1585  0005                     	;# 
  1586  0006                     	;# 
  1587  0007                     	;# 
  1588  0008                     	;# 
  1589  0009                     	;# 
  1590  000A                     	;# 
  1591  000B                     	;# 
  1592  000C                     	;# 
  1593  000E                     	;# 
  1594  0011                     	;# 
  1595  0012                     	;# 
  1596  0013                     	;# 
  1597  0015                     	;# 
  1598  0016                     	;# 
  1599  0016                     	;# 
  1600  0017                     	;# 
  1601  0018                     	;# 
  1602  0019                     	;# 
  1603  001A                     	;# 
  1604  001B                     	;# 
  1605  001C                     	;# 
  1606  008C                     	;# 
  1607  008E                     	;# 
  1608  0091                     	;# 
  1609  0092                     	;# 
  1610  0093                     	;# 
  1611  0095                     	;# 
  1612  0096                     	;# 
  1613  0097                     	;# 
  1614  0098                     	;# 
  1615  0099                     	;# 
  1616  009A                     	;# 
  1617  009B                     	;# 
  1618  009B                     	;# 
  1619  009C                     	;# 
  1620  009D                     	;# 
  1621  009E                     	;# 
  1622  009F                     	;# 
  1623  010C                     	;# 
  1624  010E                     	;# 
  1625  0111                     	;# 
  1626  0112                     	;# 
  1627  0113                     	;# 
  1628  0114                     	;# 
  1629  0115                     	;# 
  1630  0116                     	;# 
  1631  0117                     	;# 
  1632  0118                     	;# 
  1633  0119                     	;# 
  1634  018C                     	;# 
  1635  018E                     	;# 
  1636  0191                     	;# 
  1637  0191                     	;# 
  1638  0192                     	;# 
  1639  0193                     	;# 
  1640  0193                     	;# 
  1641  0194                     	;# 
  1642  0195                     	;# 
  1643  0196                     	;# 
  1644  0197                     	;# 
  1645  0199                     	;# 
  1646  019A                     	;# 
  1647  019B                     	;# 
  1648  019B                     	;# 
  1649  019C                     	;# 
  1650  019D                     	;# 
  1651  019E                     	;# 
  1652  019F                     	;# 
  1653  020C                     	;# 
  1654  020E                     	;# 
  1655  028C                     	;# 
  1656  028E                     	;# 
  1657  030C                     	;# 
  1658  030E                     	;# 
  1659  038C                     	;# 
  1660  038E                     	;# 
  1661  0391                     	;# 
  1662  0392                     	;# 
  1663  0393                     	;# 
  1664  0397                     	;# 
  1665  0398                     	;# 
  1666  0399                     	;# 
  1667  0691                     	;# 
  1668  0692                     	;# 
  1669  0693                     	;# 
  1670  0694                     	;# 
  1671  0695                     	;# 
  1672  0D8E                     	;# 
  1673  0D8F                     	;# 
  1674  0D90                     	;# 
  1675  0D91                     	;# 
  1676  0D91                     	;# 
  1677  0D92                     	;# 
  1678  0D93                     	;# 
  1679  0D93                     	;# 
  1680  0D94                     	;# 
  1681  0D95                     	;# 
  1682  0D95                     	;# 
  1683  0D96                     	;# 
  1684  0D97                     	;# 
  1685  0D97                     	;# 
  1686  0D98                     	;# 
  1687  0D99                     	;# 
  1688  0D99                     	;# 
  1689  0D9A                     	;# 
  1690  0D9B                     	;# 
  1691  0D9C                     	;# 
  1692  0D9C                     	;# 
  1693  0D9D                     	;# 
  1694  0D9D                     	;# 
  1695  0D9E                     	;# 
  1696  0D9F                     	;# 
  1697  0DA0                     	;# 
  1698  0DA1                     	;# 
  1699  0DA1                     	;# 
  1700  0DA2                     	;# 
  1701  0DA3                     	;# 
  1702  0DA3                     	;# 
  1703  0DA4                     	;# 
  1704  0DA5                     	;# 
  1705  0DA5                     	;# 
  1706  0DA6                     	;# 
  1707  0DA7                     	;# 
  1708  0DA7                     	;# 
  1709  0DA8                     	;# 
  1710  0DA9                     	;# 
  1711  0DA9                     	;# 
  1712  0DAA                     	;# 
  1713  0DAB                     	;# 
  1714  0DAC                     	;# 
  1715  0DAC                     	;# 
  1716  0DAD                     	;# 
  1717  0DAD                     	;# 
  1718  0DAE                     	;# 
  1719  0DAF                     	;# 
  1720  0DB0                     	;# 
  1721  0DB1                     	;# 
  1722  0DB1                     	;# 
  1723  0DB2                     	;# 
  1724  0DB3                     	;# 
  1725  0DB3                     	;# 
  1726  0DB4                     	;# 
  1727  0DB5                     	;# 
  1728  0DB5                     	;# 
  1729  0DB6                     	;# 
  1730  0DB7                     	;# 
  1731  0DB7                     	;# 
  1732  0DB8                     	;# 
  1733  0DB9                     	;# 
  1734  0DB9                     	;# 
  1735  0DBA                     	;# 
  1736  0DBB                     	;# 
  1737  0DBC                     	;# 
  1738  0DBC                     	;# 
  1739  0DBD                     	;# 
  1740  0DBD                     	;# 
  1741  0DBE                     	;# 
  1742  0DBF                     	;# 
  1743  0DC0                     	;# 
  1744  0DC1                     	;# 
  1745  0DC1                     	;# 
  1746  0DC2                     	;# 
  1747  0DC3                     	;# 
  1748  0DC3                     	;# 
  1749  0DC4                     	;# 
  1750  0DC5                     	;# 
  1751  0DC5                     	;# 
  1752  0DC6                     	;# 
  1753  0DC7                     	;# 
  1754  0DC7                     	;# 
  1755  0DC8                     	;# 
  1756  0DC9                     	;# 
  1757  0DC9                     	;# 
  1758  0DCA                     	;# 
  1759  0DCB                     	;# 
  1760  0DCC                     	;# 
  1761  0DCC                     	;# 
  1762  0DCD                     	;# 
  1763  0DCD                     	;# 
  1764  0DCE                     	;# 
  1765  0DCF                     	;# 
  1766  0DD0                     	;# 
  1767  0E0F                     	;# 
  1768  0E10                     	;# 
  1769  0E11                     	;# 
  1770  0E12                     	;# 
  1771  0E13                     	;# 
  1772  0E14                     	;# 
  1773  0E15                     	;# 
  1774  0E16                     	;# 
  1775  0E17                     	;# 
  1776  0E90                     	;# 
  1777  0E91                     	;# 
  1778  0E92                     	;# 
  1779  0E94                     	;# 
  1780  0E95                     	;# 
  1781  0EA0                     	;# 
  1782  0EA1                     	;# 
  1783  0EA2                     	;# 
  1784  0EA3                     	;# 
  1785  0EA4                     	;# 
  1786  0EA5                     	;# 
  1787  0FE4                     	;# 
  1788  0FE5                     	;# 
  1789  0FE6                     	;# 
  1790  0FE7                     	;# 
  1791  0FE8                     	;# 
  1792  0FE8                     	;# 
  1793  0FE9                     	;# 
  1794  0FEA                     	;# 
  1795  0FEA                     	;# 
  1796  0FEB                     	;# 
  1797  0FED                     	;# 
  1798  0FEE                     	;# 
  1799  0FEE                     	;# 
  1800  0FEF                     	;# 
  1801  0000                     	;# 
  1802  0001                     	;# 
  1803  0002                     	;# 
  1804  0003                     	;# 
  1805  0004                     	;# 
  1806  0005                     	;# 
  1807  0006                     	;# 
  1808  0007                     	;# 
  1809  0008                     	;# 
  1810  0009                     	;# 
  1811  000A                     	;# 
  1812  000B                     	;# 
  1813  000C                     	;# 
  1814  000E                     	;# 
  1815  0011                     	;# 
  1816  0012                     	;# 
  1817  0013                     	;# 
  1818  0015                     	;# 
  1819  0016                     	;# 
  1820  0016                     	;# 
  1821  0017                     	;# 
  1822  0018                     	;# 
  1823  0019                     	;# 
  1824  001A                     	;# 
  1825  001B                     	;# 
  1826  001C                     	;# 
  1827  008C                     	;# 
  1828  008E                     	;# 
  1829  0091                     	;# 
  1830  0092                     	;# 
  1831  0093                     	;# 
  1832  0095                     	;# 
  1833  0096                     	;# 
  1834  0097                     	;# 
  1835  0098                     	;# 
  1836  0099                     	;# 
  1837  009A                     	;# 
  1838  009B                     	;# 
  1839  009B                     	;# 
  1840  009C                     	;# 
  1841  009D                     	;# 
  1842  009E                     	;# 
  1843  009F                     	;# 
  1844  010C                     	;# 
  1845  010E                     	;# 
  1846  0111                     	;# 
  1847  0112                     	;# 
  1848  0113                     	;# 
  1849  0114                     	;# 
  1850  0115                     	;# 
  1851  0116                     	;# 
  1852  0117                     	;# 
  1853  0118                     	;# 
  1854  0119                     	;# 
  1855  018C                     	;# 
  1856  018E                     	;# 
  1857  0191                     	;# 
  1858  0191                     	;# 
  1859  0192                     	;# 
  1860  0193                     	;# 
  1861  0193                     	;# 
  1862  0194                     	;# 
  1863  0195                     	;# 
  1864  0196                     	;# 
  1865  0197                     	;# 
  1866  0199                     	;# 
  1867  019A                     	;# 
  1868  019B                     	;# 
  1869  019B                     	;# 
  1870  019C                     	;# 
  1871  019D                     	;# 
  1872  019E                     	;# 
  1873  019F                     	;# 
  1874  020C                     	;# 
  1875  020E                     	;# 
  1876  028C                     	;# 
  1877  028E                     	;# 
  1878  030C                     	;# 
  1879  030E                     	;# 
  1880  038C                     	;# 
  1881  038E                     	;# 
  1882  0391                     	;# 
  1883  0392                     	;# 
  1884  0393                     	;# 
  1885  0397                     	;# 
  1886  0398                     	;# 
  1887  0399                     	;# 
  1888  0691                     	;# 
  1889  0692                     	;# 
  1890  0693                     	;# 
  1891  0694                     	;# 
  1892  0695                     	;# 
  1893  0D8E                     	;# 
  1894  0D8F                     	;# 
  1895  0D90                     	;# 
  1896  0D91                     	;# 
  1897  0D91                     	;# 
  1898  0D92                     	;# 
  1899  0D93                     	;# 
  1900  0D93                     	;# 
  1901  0D94                     	;# 
  1902  0D95                     	;# 
  1903  0D95                     	;# 
  1904  0D96                     	;# 
  1905  0D97                     	;# 
  1906  0D97                     	;# 
  1907  0D98                     	;# 
  1908  0D99                     	;# 
  1909  0D99                     	;# 
  1910  0D9A                     	;# 
  1911  0D9B                     	;# 
  1912  0D9C                     	;# 
  1913  0D9C                     	;# 
  1914  0D9D                     	;# 
  1915  0D9D                     	;# 
  1916  0D9E                     	;# 
  1917  0D9F                     	;# 
  1918  0DA0                     	;# 
  1919  0DA1                     	;# 
  1920  0DA1                     	;# 
  1921  0DA2                     	;# 
  1922  0DA3                     	;# 
  1923  0DA3                     	;# 
  1924  0DA4                     	;# 
  1925  0DA5                     	;# 
  1926  0DA5                     	;# 
  1927  0DA6                     	;# 
  1928  0DA7                     	;# 
  1929  0DA7                     	;# 
  1930  0DA8                     	;# 
  1931  0DA9                     	;# 
  1932  0DA9                     	;# 
  1933  0DAA                     	;# 
  1934  0DAB                     	;# 
  1935  0DAC                     	;# 
  1936  0DAC                     	;# 
  1937  0DAD                     	;# 
  1938  0DAD                     	;# 
  1939  0DAE                     	;# 
  1940  0DAF                     	;# 
  1941  0DB0                     	;# 
  1942  0DB1                     	;# 
  1943  0DB1                     	;# 
  1944  0DB2                     	;# 
  1945  0DB3                     	;# 
  1946  0DB3                     	;# 
  1947  0DB4                     	;# 
  1948  0DB5                     	;# 
  1949  0DB5                     	;# 
  1950  0DB6                     	;# 
  1951  0DB7                     	;# 
  1952  0DB7                     	;# 
  1953  0DB8                     	;# 
  1954  0DB9                     	;# 
  1955  0DB9                     	;# 
  1956  0DBA                     	;# 
  1957  0DBB                     	;# 
  1958  0DBC                     	;# 
  1959  0DBC                     	;# 
  1960  0DBD                     	;# 
  1961  0DBD                     	;# 
  1962  0DBE                     	;# 
  1963  0DBF                     	;# 
  1964  0DC0                     	;# 
  1965  0DC1                     	;# 
  1966  0DC1                     	;# 
  1967  0DC2                     	;# 
  1968  0DC3                     	;# 
  1969  0DC3                     	;# 
  1970  0DC4                     	;# 
  1971  0DC5                     	;# 
  1972  0DC5                     	;# 
  1973  0DC6                     	;# 
  1974  0DC7                     	;# 
  1975  0DC7                     	;# 
  1976  0DC8                     	;# 
  1977  0DC9                     	;# 
  1978  0DC9                     	;# 
  1979  0DCA                     	;# 
  1980  0DCB                     	;# 
  1981  0DCC                     	;# 
  1982  0DCC                     	;# 
  1983  0DCD                     	;# 
  1984  0DCD                     	;# 
  1985  0DCE                     	;# 
  1986  0DCF                     	;# 
  1987  0DD0                     	;# 
  1988  0E0F                     	;# 
  1989  0E10                     	;# 
  1990  0E11                     	;# 
  1991  0E12                     	;# 
  1992  0E13                     	;# 
  1993  0E14                     	;# 
  1994  0E15                     	;# 
  1995  0E16                     	;# 
  1996  0E17                     	;# 
  1997  0E90                     	;# 
  1998  0E91                     	;# 
  1999  0E92                     	;# 
  2000  0E94                     	;# 
  2001  0E95                     	;# 
  2002  0EA0                     	;# 
  2003  0EA1                     	;# 
  2004  0EA2                     	;# 
  2005  0EA3                     	;# 
  2006  0EA4                     	;# 
  2007  0EA5                     	;# 
  2008  0FE4                     	;# 
  2009  0FE5                     	;# 
  2010  0FE6                     	;# 
  2011  0FE7                     	;# 
  2012  0FE8                     	;# 
  2013  0FE8                     	;# 
  2014  0FE9                     	;# 
  2015  0FEA                     	;# 
  2016  0FEA                     	;# 
  2017  0FEB                     	;# 
  2018  0FED                     	;# 
  2019  0FEE                     	;# 
  2020  0FEE                     	;# 
  2021  0FEF                     	;# 
  2022  0000                     	;# 
  2023  0001                     	;# 
  2024  0002                     	;# 
  2025  0003                     	;# 
  2026  0004                     	;# 
  2027  0005                     	;# 
  2028  0006                     	;# 
  2029  0007                     	;# 
  2030  0008                     	;# 
  2031  0009                     	;# 
  2032  000A                     	;# 
  2033  000B                     	;# 
  2034  000C                     	;# 
  2035  000E                     	;# 
  2036  0011                     	;# 
  2037  0012                     	;# 
  2038  0013                     	;# 
  2039  0015                     	;# 
  2040  0016                     	;# 
  2041  0016                     	;# 
  2042  0017                     	;# 
  2043  0018                     	;# 
  2044  0019                     	;# 
  2045  001A                     	;# 
  2046  001B                     	;# 
  2047  001C                     	;# 
  2048  008C                     	;# 
  2049  008E                     	;# 
  2050  0091                     	;# 
  2051  0092                     	;# 
  2052  0093                     	;# 
  2053  0095                     	;# 
  2054  0096                     	;# 
  2055  0097                     	;# 
  2056  0098                     	;# 
  2057  0099                     	;# 
  2058  009A                     	;# 
  2059  009B                     	;# 
  2060  009B                     	;# 
  2061  009C                     	;# 
  2062  009D                     	;# 
  2063  009E                     	;# 
  2064  009F                     	;# 
  2065  010C                     	;# 
  2066  010E                     	;# 
  2067  0111                     	;# 
  2068  0112                     	;# 
  2069  0113                     	;# 
  2070  0114                     	;# 
  2071  0115                     	;# 
  2072  0116                     	;# 
  2073  0117                     	;# 
  2074  0118                     	;# 
  2075  0119                     	;# 
  2076  018C                     	;# 
  2077  018E                     	;# 
  2078  0191                     	;# 
  2079  0191                     	;# 
  2080  0192                     	;# 
  2081  0193                     	;# 
  2082  0193                     	;# 
  2083  0194                     	;# 
  2084  0195                     	;# 
  2085  0196                     	;# 
  2086  0197                     	;# 
  2087  0199                     	;# 
  2088  019A                     	;# 
  2089  019B                     	;# 
  2090  019B                     	;# 
  2091  019C                     	;# 
  2092  019D                     	;# 
  2093  019E                     	;# 
  2094  019F                     	;# 
  2095  020C                     	;# 
  2096  020E                     	;# 
  2097  028C                     	;# 
  2098  028E                     	;# 
  2099  030C                     	;# 
  2100  030E                     	;# 
  2101  038C                     	;# 
  2102  038E                     	;# 
  2103  0391                     	;# 
  2104  0392                     	;# 
  2105  0393                     	;# 
  2106  0397                     	;# 
  2107  0398                     	;# 
  2108  0399                     	;# 
  2109  0691                     	;# 
  2110  0692                     	;# 
  2111  0693                     	;# 
  2112  0694                     	;# 
  2113  0695                     	;# 
  2114  0D8E                     	;# 
  2115  0D8F                     	;# 
  2116  0D90                     	;# 
  2117  0D91                     	;# 
  2118  0D91                     	;# 
  2119  0D92                     	;# 
  2120  0D93                     	;# 
  2121  0D93                     	;# 
  2122  0D94                     	;# 
  2123  0D95                     	;# 
  2124  0D95                     	;# 
  2125  0D96                     	;# 
  2126  0D97                     	;# 
  2127  0D97                     	;# 
  2128  0D98                     	;# 
  2129  0D99                     	;# 
  2130  0D99                     	;# 
  2131  0D9A                     	;# 
  2132  0D9B                     	;# 
  2133  0D9C                     	;# 
  2134  0D9C                     	;# 
  2135  0D9D                     	;# 
  2136  0D9D                     	;# 
  2137  0D9E                     	;# 
  2138  0D9F                     	;# 
  2139  0DA0                     	;# 
  2140  0DA1                     	;# 
  2141  0DA1                     	;# 
  2142  0DA2                     	;# 
  2143  0DA3                     	;# 
  2144  0DA3                     	;# 
  2145  0DA4                     	;# 
  2146  0DA5                     	;# 
  2147  0DA5                     	;# 
  2148  0DA6                     	;# 
  2149  0DA7                     	;# 
  2150  0DA7                     	;# 
  2151  0DA8                     	;# 
  2152  0DA9                     	;# 
  2153  0DA9                     	;# 
  2154  0DAA                     	;# 
  2155  0DAB                     	;# 
  2156  0DAC                     	;# 
  2157  0DAC                     	;# 
  2158  0DAD                     	;# 
  2159  0DAD                     	;# 
  2160  0DAE                     	;# 
  2161  0DAF                     	;# 
  2162  0DB0                     	;# 
  2163  0DB1                     	;# 
  2164  0DB1                     	;# 
  2165  0DB2                     	;# 
  2166  0DB3                     	;# 
  2167  0DB3                     	;# 
  2168  0DB4                     	;# 
  2169  0DB5                     	;# 
  2170  0DB5                     	;# 
  2171  0DB6                     	;# 
  2172  0DB7                     	;# 
  2173  0DB7                     	;# 
  2174  0DB8                     	;# 
  2175  0DB9                     	;# 
  2176  0DB9                     	;# 
  2177  0DBA                     	;# 
  2178  0DBB                     	;# 
  2179  0DBC                     	;# 
  2180  0DBC                     	;# 
  2181  0DBD                     	;# 
  2182  0DBD                     	;# 
  2183  0DBE                     	;# 
  2184  0DBF                     	;# 
  2185  0DC0                     	;# 
  2186  0DC1                     	;# 
  2187  0DC1                     	;# 
  2188  0DC2                     	;# 
  2189  0DC3                     	;# 
  2190  0DC3                     	;# 
  2191  0DC4                     	;# 
  2192  0DC5                     	;# 
  2193  0DC5                     	;# 
  2194  0DC6                     	;# 
  2195  0DC7                     	;# 
  2196  0DC7                     	;# 
  2197  0DC8                     	;# 
  2198  0DC9                     	;# 
  2199  0DC9                     	;# 
  2200  0DCA                     	;# 
  2201  0DCB                     	;# 
  2202  0DCC                     	;# 
  2203  0DCC                     	;# 
  2204  0DCD                     	;# 
  2205  0DCD                     	;# 
  2206  0DCE                     	;# 
  2207  0DCF                     	;# 
  2208  0DD0                     	;# 
  2209  0E0F                     	;# 
  2210  0E10                     	;# 
  2211  0E11                     	;# 
  2212  0E12                     	;# 
  2213  0E13                     	;# 
  2214  0E14                     	;# 
  2215  0E15                     	;# 
  2216  0E16                     	;# 
  2217  0E17                     	;# 
  2218  0E90                     	;# 
  2219  0E91                     	;# 
  2220  0E92                     	;# 
  2221  0E94                     	;# 
  2222  0E95                     	;# 
  2223  0EA0                     	;# 
  2224  0EA1                     	;# 
  2225  0EA2                     	;# 
  2226  0EA3                     	;# 
  2227  0EA4                     	;# 
  2228  0EA5                     	;# 
  2229  0FE4                     	;# 
  2230  0FE5                     	;# 
  2231  0FE6                     	;# 
  2232  0FE7                     	;# 
  2233  0FE8                     	;# 
  2234  0FE8                     	;# 
  2235  0FE9                     	;# 
  2236  0FEA                     	;# 
  2237  0FEA                     	;# 
  2238  0FEB                     	;# 
  2239  0FED                     	;# 
  2240  0FEE                     	;# 
  2241  0FEE                     	;# 
  2242  0FEF                     	;# 
  2243  0000                     	;# 
  2244  0001                     	;# 
  2245  0002                     	;# 
  2246  0003                     	;# 
  2247  0004                     	;# 
  2248  0005                     	;# 
  2249  0006                     	;# 
  2250  0007                     	;# 
  2251  0008                     	;# 
  2252  0009                     	;# 
  2253  000A                     	;# 
  2254  000B                     	;# 
  2255  000C                     	;# 
  2256  000E                     	;# 
  2257  0011                     	;# 
  2258  0012                     	;# 
  2259  0013                     	;# 
  2260  0015                     	;# 
  2261  0016                     	;# 
  2262  0016                     	;# 
  2263  0017                     	;# 
  2264  0018                     	;# 
  2265  0019                     	;# 
  2266  001A                     	;# 
  2267  001B                     	;# 
  2268  001C                     	;# 
  2269  008C                     	;# 
  2270  008E                     	;# 
  2271  0091                     	;# 
  2272  0092                     	;# 
  2273  0093                     	;# 
  2274  0095                     	;# 
  2275  0096                     	;# 
  2276  0097                     	;# 
  2277  0098                     	;# 
  2278  0099                     	;# 
  2279  009A                     	;# 
  2280  009B                     	;# 
  2281  009B                     	;# 
  2282  009C                     	;# 
  2283  009D                     	;# 
  2284  009E                     	;# 
  2285  009F                     	;# 
  2286  010C                     	;# 
  2287  010E                     	;# 
  2288  0111                     	;# 
  2289  0112                     	;# 
  2290  0113                     	;# 
  2291  0114                     	;# 
  2292  0115                     	;# 
  2293  0116                     	;# 
  2294  0117                     	;# 
  2295  0118                     	;# 
  2296  0119                     	;# 
  2297  018C                     	;# 
  2298  018E                     	;# 
  2299  0191                     	;# 
  2300  0191                     	;# 
  2301  0192                     	;# 
  2302  0193                     	;# 
  2303  0193                     	;# 
  2304  0194                     	;# 
  2305  0195                     	;# 
  2306  0196                     	;# 
  2307  0197                     	;# 
  2308  0199                     	;# 
  2309  019A                     	;# 
  2310  019B                     	;# 
  2311  019B                     	;# 
  2312  019C                     	;# 
  2313  019D                     	;# 
  2314  019E                     	;# 
  2315  019F                     	;# 
  2316  020C                     	;# 
  2317  020E                     	;# 
  2318  028C                     	;# 
  2319  028E                     	;# 
  2320  030C                     	;# 
  2321  030E                     	;# 
  2322  038C                     	;# 
  2323  038E                     	;# 
  2324  0391                     	;# 
  2325  0392                     	;# 
  2326  0393                     	;# 
  2327  0397                     	;# 
  2328  0398                     	;# 
  2329  0399                     	;# 
  2330  0691                     	;# 
  2331  0692                     	;# 
  2332  0693                     	;# 
  2333  0694                     	;# 
  2334  0695                     	;# 
  2335  0D8E                     	;# 
  2336  0D8F                     	;# 
  2337  0D90                     	;# 
  2338  0D91                     	;# 
  2339  0D91                     	;# 
  2340  0D92                     	;# 
  2341  0D93                     	;# 
  2342  0D93                     	;# 
  2343  0D94                     	;# 
  2344  0D95                     	;# 
  2345  0D95                     	;# 
  2346  0D96                     	;# 
  2347  0D97                     	;# 
  2348  0D97                     	;# 
  2349  0D98                     	;# 
  2350  0D99                     	;# 
  2351  0D99                     	;# 
  2352  0D9A                     	;# 
  2353  0D9B                     	;# 
  2354  0D9C                     	;# 
  2355  0D9C                     	;# 
  2356  0D9D                     	;# 
  2357  0D9D                     	;# 
  2358  0D9E                     	;# 
  2359  0D9F                     	;# 
  2360  0DA0                     	;# 
  2361  0DA1                     	;# 
  2362  0DA1                     	;# 
  2363  0DA2                     	;# 
  2364  0DA3                     	;# 
  2365  0DA3                     	;# 
  2366  0DA4                     	;# 
  2367  0DA5                     	;# 
  2368  0DA5                     	;# 
  2369  0DA6                     	;# 
  2370  0DA7                     	;# 
  2371  0DA7                     	;# 
  2372  0DA8                     	;# 
  2373  0DA9                     	;# 
  2374  0DA9                     	;# 
  2375  0DAA                     	;# 
  2376  0DAB                     	;# 
  2377  0DAC                     	;# 
  2378  0DAC                     	;# 
  2379  0DAD                     	;# 
  2380  0DAD                     	;# 
  2381  0DAE                     	;# 
  2382  0DAF                     	;# 
  2383  0DB0                     	;# 
  2384  0DB1                     	;# 
  2385  0DB1                     	;# 
  2386  0DB2                     	;# 
  2387  0DB3                     	;# 
  2388  0DB3                     	;# 
  2389  0DB4                     	;# 
  2390  0DB5                     	;# 
  2391  0DB5                     	;# 
  2392  0DB6                     	;# 
  2393  0DB7                     	;# 
  2394  0DB7                     	;# 
  2395  0DB8                     	;# 
  2396  0DB9                     	;# 
  2397  0DB9                     	;# 
  2398  0DBA                     	;# 
  2399  0DBB                     	;# 
  2400  0DBC                     	;# 
  2401  0DBC                     	;# 
  2402  0DBD                     	;# 
  2403  0DBD                     	;# 
  2404  0DBE                     	;# 
  2405  0DBF                     	;# 
  2406  0DC0                     	;# 
  2407  0DC1                     	;# 
  2408  0DC1                     	;# 
  2409  0DC2                     	;# 
  2410  0DC3                     	;# 
  2411  0DC3                     	;# 
  2412  0DC4                     	;# 
  2413  0DC5                     	;# 
  2414  0DC5                     	;# 
  2415  0DC6                     	;# 
  2416  0DC7                     	;# 
  2417  0DC7                     	;# 
  2418  0DC8                     	;# 
  2419  0DC9                     	;# 
  2420  0DC9                     	;# 
  2421  0DCA                     	;# 
  2422  0DCB                     	;# 
  2423  0DCC                     	;# 
  2424  0DCC                     	;# 
  2425  0DCD                     	;# 
  2426  0DCD                     	;# 
  2427  0DCE                     	;# 
  2428  0DCF                     	;# 
  2429  0DD0                     	;# 
  2430  0E0F                     	;# 
  2431  0E10                     	;# 
  2432  0E11                     	;# 
  2433  0E12                     	;# 
  2434  0E13                     	;# 
  2435  0E14                     	;# 
  2436  0E15                     	;# 
  2437  0E16                     	;# 
  2438  0E17                     	;# 
  2439  0E90                     	;# 
  2440  0E91                     	;# 
  2441  0E92                     	;# 
  2442  0E94                     	;# 
  2443  0E95                     	;# 
  2444  0EA0                     	;# 
  2445  0EA1                     	;# 
  2446  0EA2                     	;# 
  2447  0EA3                     	;# 
  2448  0EA4                     	;# 
  2449  0EA5                     	;# 
  2450  0FE4                     	;# 
  2451  0FE5                     	;# 
  2452  0FE6                     	;# 
  2453  0FE7                     	;# 
  2454  0FE8                     	;# 
  2455  0FE8                     	;# 
  2456  0FE9                     	;# 
  2457  0FEA                     	;# 
  2458  0FEA                     	;# 
  2459  0FEB                     	;# 
  2460  0FED                     	;# 
  2461  0FEE                     	;# 
  2462  0FEE                     	;# 
  2463  0FEF                     	;# 
  2464  0FFF                     	;# 
  2465  0000                     	;# 
  2466  0001                     	;# 
  2467  0002                     	;# 
  2468  0003                     	;# 
  2469  0004                     	;# 
  2470  0005                     	;# 
  2471  0006                     	;# 
  2472  0007                     	;# 
  2473  0008                     	;# 
  2474  0009                     	;# 
  2475  000A                     	;# 
  2476  000B                     	;# 
  2477  000C                     	;# 
  2478  000E                     	;# 
  2479  0011                     	;# 
  2480  0012                     	;# 
  2481  0013                     	;# 
  2482  0015                     	;# 
  2483  0016                     	;# 
  2484  0016                     	;# 
  2485  0017                     	;# 
  2486  0018                     	;# 
  2487  0019                     	;# 
  2488  001A                     	;# 
  2489  001B                     	;# 
  2490  001C                     	;# 
  2491  008C                     	;# 
  2492  008E                     	;# 
  2493  0091                     	;# 
  2494  0092                     	;# 
  2495  0093                     	;# 
  2496  0095                     	;# 
  2497  0096                     	;# 
  2498  0097                     	;# 
  2499  0098                     	;# 
  2500  0099                     	;# 
  2501  009A                     	;# 
  2502  009B                     	;# 
  2503  009B                     	;# 
  2504  009C                     	;# 
  2505  009D                     	;# 
  2506  009E                     	;# 
  2507  009F                     	;# 
  2508  010C                     	;# 
  2509  010E                     	;# 
  2510  0111                     	;# 
  2511  0112                     	;# 
  2512  0113                     	;# 
  2513  0114                     	;# 
  2514  0115                     	;# 
  2515  0116                     	;# 
  2516  0117                     	;# 
  2517  0118                     	;# 
  2518  0119                     	;# 
  2519  018C                     	;# 
  2520  018E                     	;# 
  2521  0191                     	;# 
  2522  0191                     	;# 
  2523  0192                     	;# 
  2524  0193                     	;# 
  2525  0193                     	;# 
  2526  0194                     	;# 
  2527  0195                     	;# 
  2528  0196                     	;# 
  2529  0197                     	;# 
  2530  0199                     	;# 
  2531  019A                     	;# 
  2532  019B                     	;# 
  2533  019B                     	;# 
  2534  019C                     	;# 
  2535  019D                     	;# 
  2536  019E                     	;# 
  2537  019F                     	;# 
  2538  020C                     	;# 
  2539  020E                     	;# 
  2540  028C                     	;# 
  2541  028E                     	;# 
  2542  030C                     	;# 
  2543  030E                     	;# 
  2544  038C                     	;# 
  2545  038E                     	;# 
  2546  0391                     	;# 
  2547  0392                     	;# 
  2548  0393                     	;# 
  2549  0397                     	;# 
  2550  0398                     	;# 
  2551  0399                     	;# 
  2552  0691                     	;# 
  2553  0692                     	;# 
  2554  0693                     	;# 
  2555  0694                     	;# 
  2556  0695                     	;# 
  2557  0D8E                     	;# 
  2558  0D8F                     	;# 
  2559  0D90                     	;# 
  2560  0D91                     	;# 
  2561  0D91                     	;# 
  2562  0D92                     	;# 
  2563  0D93                     	;# 
  2564  0D93                     	;# 
  2565  0D94                     	;# 
  2566  0D95                     	;# 
  2567  0D95                     	;# 
  2568  0D96                     	;# 
  2569  0D97                     	;# 
  2570  0D97                     	;# 
  2571  0D98                     	;# 
  2572  0D99                     	;# 
  2573  0D99                     	;# 
  2574  0D9A                     	;# 
  2575  0D9B                     	;# 
  2576  0D9C                     	;# 
  2577  0D9C                     	;# 
  2578  0D9D                     	;# 
  2579  0D9D                     	;# 
  2580  0D9E                     	;# 
  2581  0D9F                     	;# 
  2582  0DA0                     	;# 
  2583  0DA1                     	;# 
  2584  0DA1                     	;# 
  2585  0DA2                     	;# 
  2586  0DA3                     	;# 
  2587  0DA3                     	;# 
  2588  0DA4                     	;# 
  2589  0DA5                     	;# 
  2590  0DA5                     	;# 
  2591  0DA6                     	;# 
  2592  0DA7                     	;# 
  2593  0DA7                     	;# 
  2594  0DA8                     	;# 
  2595  0DA9                     	;# 
  2596  0DA9                     	;# 
  2597  0DAA                     	;# 
  2598  0DAB                     	;# 
  2599  0DAC                     	;# 
  2600  0DAC                     	;# 
  2601  0DAD                     	;# 
  2602  0DAD                     	;# 
  2603  0DAE                     	;# 
  2604  0DAF                     	;# 
  2605  0DB0                     	;# 
  2606  0DB1                     	;# 
  2607  0DB1                     	;# 
  2608  0DB2                     	;# 
  2609  0DB3                     	;# 
  2610  0DB3                     	;# 
  2611  0DB4                     	;# 
  2612  0DB5                     	;# 
  2613  0DB5                     	;# 
  2614  0DB6                     	;# 
  2615  0DB7                     	;# 
  2616  0DB7                     	;# 
  2617  0DB8                     	;# 
  2618  0DB9                     	;# 
  2619  0DB9                     	;# 
  2620  0DBA                     	;# 
  2621  0DBB                     	;# 
  2622  0DBC                     	;# 
  2623  0DBC                     	;# 
  2624  0DBD                     	;# 
  2625  0DBD                     	;# 
  2626  0DBE                     	;# 
  2627  0DBF                     	;# 
  2628  0DC0                     	;# 
  2629  0DC1                     	;# 
  2630  0DC1                     	;# 
  2631  0DC2                     	;# 
  2632  0DC3                     	;# 
  2633  0DC3                     	;# 
  2634  0DC4                     	;# 
  2635  0DC5                     	;# 
  2636  0DC5                     	;# 
  2637  0DC6                     	;# 
  2638  0DC7                     	;# 
  2639  0DC7                     	;# 
  2640  0DC8                     	;# 
  2641  0DC9                     	;# 
  2642  0DC9                     	;# 
  2643  0DCA                     	;# 
  2644  0DCB                     	;# 
  2645  0DCC                     	;# 
  2646  0DCC                     	;# 
  2647  0DCD                     	;# 
  2648  0DCD                     	;# 
  2649  0DCE                     	;# 
  2650  0DCF                     	;# 
  2651  0DD0                     	;# 
  2652  0E0F                     	;# 
  2653  0E10                     	;# 
  2654  0E11                     	;# 
  2655  0E12                     	;# 
  2656  0E13                     	;# 
  2657  0E14                     	;# 
  2658  0E15                     	;# 
  2659  0E16                     	;# 
  2660  0E17                     	;# 
  2661  0E90                     	;# 
  2662  0E91                     	;# 
  2663  0E92                     	;# 
  2664  0E94                     	;# 
  2665  0E95                     	;# 
  2666  0EA0                     	;# 
  2667  0EA1                     	;# 
  2668  0EA2                     	;# 
  2669  0EA3                     	;# 
  2670  0EA4                     	;# 
  2671  0EA5                     	;# 
  2672  0FE4                     	;# 
  2673  0FE5                     	;# 
  2674  0FE6                     	;# 
  2675  0FE7                     	;# 
  2676  0FE8                     	;# 
  2677  0FE8                     	;# 
  2678  0FE9                     	;# 
  2679  0FEA                     	;# 
  2680  0FEA                     	;# 
  2681  0FEB                     	;# 
  2682  0FED                     	;# 
  2683  0FEE                     	;# 
  2684  0FEE                     	;# 
  2685  0FEF                     	;# 
  2686  0FFF                     	;# 
  2687  0000                     	;# 
  2688  0001                     	;# 
  2689  0002                     	;# 
  2690  0003                     	;# 
  2691  0004                     	;# 
  2692  0005                     	;# 
  2693  0006                     	;# 
  2694  0007                     	;# 
  2695  0008                     	;# 
  2696  0009                     	;# 
  2697  000A                     	;# 
  2698  000B                     	;# 
  2699  000C                     	;# 
  2700  000E                     	;# 
  2701  0011                     	;# 
  2702  0012                     	;# 
  2703  0013                     	;# 
  2704  0015                     	;# 
  2705  0016                     	;# 
  2706  0016                     	;# 
  2707  0017                     	;# 
  2708  0018                     	;# 
  2709  0019                     	;# 
  2710  001A                     	;# 
  2711  001B                     	;# 
  2712  001C                     	;# 
  2713  008C                     	;# 
  2714  008E                     	;# 
  2715  0091                     	;# 
  2716  0092                     	;# 
  2717  0093                     	;# 
  2718  0095                     	;# 
  2719  0096                     	;# 
  2720  0097                     	;# 
  2721  0098                     	;# 
  2722  0099                     	;# 
  2723  009A                     	;# 
  2724  009B                     	;# 
  2725  009B                     	;# 
  2726  009C                     	;# 
  2727  009D                     	;# 
  2728  009E                     	;# 
  2729  009F                     	;# 
  2730  010C                     	;# 
  2731  010E                     	;# 
  2732  0111                     	;# 
  2733  0112                     	;# 
  2734  0113                     	;# 
  2735  0114                     	;# 
  2736  0115                     	;# 
  2737  0116                     	;# 
  2738  0117                     	;# 
  2739  0118                     	;# 
  2740  0119                     	;# 
  2741  018C                     	;# 
  2742  018E                     	;# 
  2743  0191                     	;# 
  2744  0191                     	;# 
  2745  0192                     	;# 
  2746  0193                     	;# 
  2747  0193                     	;# 
  2748  0194                     	;# 
  2749  0195                     	;# 
  2750  0196                     	;# 
  2751  0197                     	;# 
  2752  0199                     	;# 
  2753  019A                     	;# 
  2754  019B                     	;# 
  2755  019B                     	;# 
  2756  019C                     	;# 
  2757  019D                     	;# 
  2758  019E                     	;# 
  2759  019F                     	;# 
  2760  020C                     	;# 
  2761  020E                     	;# 
  2762  028C                     	;# 
  2763  028E                     	;# 
  2764  030C                     	;# 
  2765  030E                     	;# 
  2766  038C                     	;# 
  2767  038E                     	;# 
  2768  0391                     	;# 
  2769  0392                     	;# 
  2770  0393                     	;# 
  2771  0397                     	;# 
  2772  0398                     	;# 
  2773  0399                     	;# 
  2774  0691                     	;# 
  2775  0692                     	;# 
  2776  0693                     	;# 
  2777  0694                     	;# 
  2778  0695                     	;# 
  2779  0D8E                     	;# 
  2780  0D8F                     	;# 
  2781  0D90                     	;# 
  2782  0D91                     	;# 
  2783  0D91                     	;# 
  2784  0D92                     	;# 
  2785  0D93                     	;# 
  2786  0D93                     	;# 
  2787  0D94                     	;# 
  2788  0D95                     	;# 
  2789  0D95                     	;# 
  2790  0D96                     	;# 
  2791  0D97                     	;# 
  2792  0D97                     	;# 
  2793  0D98                     	;# 
  2794  0D99                     	;# 
  2795  0D99                     	;# 
  2796  0D9A                     	;# 
  2797  0D9B                     	;# 
  2798  0D9C                     	;# 
  2799  0D9C                     	;# 
  2800  0D9D                     	;# 
  2801  0D9D                     	;# 
  2802  0D9E                     	;# 
  2803  0D9F                     	;# 
  2804  0DA0                     	;# 
  2805  0DA1                     	;# 
  2806  0DA1                     	;# 
  2807  0DA2                     	;# 
  2808  0DA3                     	;# 
  2809  0DA3                     	;# 
  2810  0DA4                     	;# 
  2811  0DA5                     	;# 
  2812  0DA5                     	;# 
  2813  0DA6                     	;# 
  2814  0DA7                     	;# 
  2815  0DA7                     	;# 
  2816  0DA8                     	;# 
  2817  0DA9                     	;# 
  2818  0DA9                     	;# 
  2819  0DAA                     	;# 
  2820  0DAB                     	;# 
  2821  0DAC                     	;# 
  2822  0DAC                     	;# 
  2823  0DAD                     	;# 
  2824  0DAD                     	;# 
  2825  0DAE                     	;# 
  2826  0DAF                     	;# 
  2827  0DB0                     	;# 
  2828  0DB1                     	;# 
  2829  0DB1                     	;# 
  2830  0DB2                     	;# 
  2831  0DB3                     	;# 
  2832  0DB3                     	;# 
  2833  0DB4                     	;# 
  2834  0DB5                     	;# 
  2835  0DB5                     	;# 
  2836  0DB6                     	;# 
  2837  0DB7                     	;# 
  2838  0DB7                     	;# 
  2839  0DB8                     	;# 
  2840  0DB9                     	;# 
  2841  0DB9                     	;# 
  2842  0DBA                     	;# 
  2843  0DBB                     	;# 
  2844  0DBC                     	;# 
  2845  0DBC                     	;# 
  2846  0DBD                     	;# 
  2847  0DBD                     	;# 
  2848  0DBE                     	;# 
  2849  0DBF                     	;# 
  2850  0DC0                     	;# 
  2851  0DC1                     	;# 
  2852  0DC1                     	;# 
  2853  0DC2                     	;# 
  2854  0DC3                     	;# 
  2855  0DC3                     	;# 
  2856  0DC4                     	;# 
  2857  0DC5                     	;# 
  2858  0DC5                     	;# 
  2859  0DC6                     	;# 
  2860  0DC7                     	;# 
  2861  0DC7                     	;# 
  2862  0DC8                     	;# 
  2863  0DC9                     	;# 
  2864  0DC9                     	;# 
  2865  0DCA                     	;# 
  2866  0DCB                     	;# 
  2867  0DCC                     	;# 
  2868  0DCC                     	;# 
  2869  0DCD                     	;# 
  2870  0DCD                     	;# 
  2871  0DCE                     	;# 
  2872  0DCF                     	;# 
  2873  0DD0                     	;# 
  2874  0E0F                     	;# 
  2875  0E10                     	;# 
  2876  0E11                     	;# 
  2877  0E12                     	;# 
  2878  0E13                     	;# 
  2879  0E14                     	;# 
  2880  0E15                     	;# 
  2881  0E16                     	;# 
  2882  0E17                     	;# 
  2883  0E90                     	;# 
  2884  0E91                     	;# 
  2885  0E92                     	;# 
  2886  0E94                     	;# 
  2887  0E95                     	;# 
  2888  0EA0                     	;# 
  2889  0EA1                     	;# 
  2890  0EA2                     	;# 
  2891  0EA3                     	;# 
  2892  0EA4                     	;# 
  2893  0EA5                     	;# 
  2894  0FE4                     	;# 
  2895  0FE5                     	;# 
  2896  0FE6                     	;# 
  2897  0FE7                     	;# 
  2898  0FE8                     	;# 
  2899  0FE8                     	;# 
  2900  0FE9                     	;# 
  2901  0FEA                     	;# 
  2902  0FEA                     	;# 
  2903  0FEB                     	;# 
  2904  0FED                     	;# 
  2905  0FEE                     	;# 
  2906  0FEE                     	;# 
  2907  0FEF                     	;# 
  2908  0FFF                     	;# 
  2909  0000                     	;# 
  2910  0001                     	;# 
  2911  0002                     	;# 
  2912  0003                     	;# 
  2913  0004                     	;# 
  2914  0005                     	;# 
  2915  0006                     	;# 
  2916  0007                     	;# 
  2917  0008                     	;# 
  2918  0009                     	;# 
  2919  000A                     	;# 
  2920  000B                     	;# 
  2921  000C                     	;# 
  2922  000E                     	;# 
  2923  0011                     	;# 
  2924  0012                     	;# 
  2925  0013                     	;# 
  2926  0015                     	;# 
  2927  0016                     	;# 
  2928  0016                     	;# 
  2929  0017                     	;# 
  2930  0018                     	;# 
  2931  0019                     	;# 
  2932  001A                     	;# 
  2933  001B                     	;# 
  2934  001C                     	;# 
  2935  008C                     	;# 
  2936  008E                     	;# 
  2937  0091                     	;# 
  2938  0092                     	;# 
  2939  0093                     	;# 
  2940  0095                     	;# 
  2941  0096                     	;# 
  2942  0097                     	;# 
  2943  0098                     	;# 
  2944  0099                     	;# 
  2945  009A                     	;# 
  2946  009B                     	;# 
  2947  009B                     	;# 
  2948  009C                     	;# 
  2949  009D                     	;# 
  2950  009E                     	;# 
  2951  009F                     	;# 
  2952  010C                     	;# 
  2953  010E                     	;# 
  2954  0111                     	;# 
  2955  0112                     	;# 
  2956  0113                     	;# 
  2957  0114                     	;# 
  2958  0115                     	;# 
  2959  0116                     	;# 
  2960  0117                     	;# 
  2961  0118                     	;# 
  2962  0119                     	;# 
  2963  018C                     	;# 
  2964  018E                     	;# 
  2965  0191                     	;# 
  2966  0191                     	;# 
  2967  0192                     	;# 
  2968  0193                     	;# 
  2969  0193                     	;# 
  2970  0194                     	;# 
  2971  0195                     	;# 
  2972  0196                     	;# 
  2973  0197                     	;# 
  2974  0199                     	;# 
  2975  019A                     	;# 
  2976  019B                     	;# 
  2977  019B                     	;# 
  2978  019C                     	;# 
  2979  019D                     	;# 
  2980  019E                     	;# 
  2981  019F                     	;# 
  2982  020C                     	;# 
  2983  020E                     	;# 
  2984  028C                     	;# 
  2985  028E                     	;# 
  2986  030C                     	;# 
  2987  030E                     	;# 
  2988  038C                     	;# 
  2989  038E                     	;# 
  2990  0391                     	;# 
  2991  0392                     	;# 
  2992  0393                     	;# 
  2993  0397                     	;# 
  2994  0398                     	;# 
  2995  0399                     	;# 
  2996  0691                     	;# 
  2997  0692                     	;# 
  2998  0693                     	;# 
  2999  0694                     	;# 
  3000  0695                     	;# 
  3001  0D8E                     	;# 
  3002  0D8F                     	;# 
  3003  0D90                     	;# 
  3004  0D91                     	;# 
  3005  0D91                     	;# 
  3006  0D92                     	;# 
  3007  0D93                     	;# 
  3008  0D93                     	;# 
  3009  0D94                     	;# 
  3010  0D95                     	;# 
  3011  0D95                     	;# 
  3012  0D96                     	;# 
  3013  0D97                     	;# 
  3014  0D97                     	;# 
  3015  0D98                     	;# 
  3016  0D99                     	;# 
  3017  0D99                     	;# 
  3018  0D9A                     	;# 
  3019  0D9B                     	;# 
  3020  0D9C                     	;# 
  3021  0D9C                     	;# 
  3022  0D9D                     	;# 
  3023  0D9D                     	;# 
  3024  0D9E                     	;# 
  3025  0D9F                     	;# 
  3026  0DA0                     	;# 
  3027  0DA1                     	;# 
  3028  0DA1                     	;# 
  3029  0DA2                     	;# 
  3030  0DA3                     	;# 
  3031  0DA3                     	;# 
  3032  0DA4                     	;# 
  3033  0DA5                     	;# 
  3034  0DA5                     	;# 
  3035  0DA6                     	;# 
  3036  0DA7                     	;# 
  3037  0DA7                     	;# 
  3038  0DA8                     	;# 
  3039  0DA9                     	;# 
  3040  0DA9                     	;# 
  3041  0DAA                     	;# 
  3042  0DAB                     	;# 
  3043  0DAC                     	;# 
  3044  0DAC                     	;# 
  3045  0DAD                     	;# 
  3046  0DAD                     	;# 
  3047  0DAE                     	;# 
  3048  0DAF                     	;# 
  3049  0DB0                     	;# 
  3050  0DB1                     	;# 
  3051  0DB1                     	;# 
  3052  0DB2                     	;# 
  3053  0DB3                     	;# 
  3054  0DB3                     	;# 
  3055  0DB4                     	;# 
  3056  0DB5                     	;# 
  3057  0DB5                     	;# 
  3058  0DB6                     	;# 
  3059  0DB7                     	;# 
  3060  0DB7                     	;# 
  3061  0DB8                     	;# 
  3062  0DB9                     	;# 
  3063  0DB9                     	;# 
  3064  0DBA                     	;# 
  3065  0DBB                     	;# 
  3066  0DBC                     	;# 
  3067  0DBC                     	;# 
  3068  0DBD                     	;# 
  3069  0DBD                     	;# 
  3070  0DBE                     	;# 
  3071  0DBF                     	;# 
  3072  0DC0                     	;# 
  3073  0DC1                     	;# 
  3074  0DC1                     	;# 
  3075  0DC2                     	;# 
  3076  0DC3                     	;# 
  3077  0DC3                     	;# 
  3078  0DC4                     	;# 
  3079  0DC5                     	;# 
  3080  0DC5                     	;# 
  3081  0DC6                     	;# 
  3082  0DC7                     	;# 
  3083  0DC7                     	;# 
  3084  0DC8                     	;# 
  3085  0DC9                     	;# 
  3086  0DC9                     	;# 
  3087  0DCA                     	;# 
  3088  0DCB                     	;# 
  3089  0DCC                     	;# 
  3090  0DCC                     	;# 
  3091  0DCD                     	;# 
  3092  0DCD                     	;# 
  3093  0DCE                     	;# 
  3094  0DCF                     	;# 
  3095  0DD0                     	;# 
  3096  0E0F                     	;# 
  3097  0E10                     	;# 
  3098  0E11                     	;# 
  3099  0E12                     	;# 
  3100  0E13                     	;# 
  3101  0E14                     	;# 
  3102  0E15                     	;# 
  3103  0E16                     	;# 
  3104  0E17                     	;# 
  3105  0E90                     	;# 
  3106  0E91                     	;# 
  3107  0E92                     	;# 
  3108  0E94                     	;# 
  3109  0E95                     	;# 
  3110  0EA0                     	;# 
  3111  0EA1                     	;# 
  3112  0EA2                     	;# 
  3113  0EA3                     	;# 
  3114  0EA4                     	;# 
  3115  0EA5                     	;# 
  3116  0FE4                     	;# 
  3117  0FE5                     	;# 
  3118  0FE6                     	;# 
  3119  0FE7                     	;# 
  3120  0FE8                     	;# 
  3121  0FE8                     	;# 
  3122  0FE9                     	;# 
  3123  0FEA                     	;# 
  3124  0FEA                     	;# 
  3125  0FEB                     	;# 
  3126  0FED                     	;# 
  3127  0FEE                     	;# 
  3128  0FEE                     	;# 
  3129  0FEF                     	;# 
  3130  0FFF                     	;# 
  3131  0000                     	;# 
  3132  0001                     	;# 
  3133  0002                     	;# 
  3134  0003                     	;# 
  3135  0004                     	;# 
  3136  0005                     	;# 
  3137  0006                     	;# 
  3138  0007                     	;# 
  3139  0008                     	;# 
  3140  0009                     	;# 
  3141  000A                     	;# 
  3142  000B                     	;# 
  3143  000C                     	;# 
  3144  000E                     	;# 
  3145  0011                     	;# 
  3146  0012                     	;# 
  3147  0013                     	;# 
  3148  0015                     	;# 
  3149  0016                     	;# 
  3150  0016                     	;# 
  3151  0017                     	;# 
  3152  0018                     	;# 
  3153  0019                     	;# 
  3154  001A                     	;# 
  3155  001B                     	;# 
  3156  001C                     	;# 
  3157  008C                     	;# 
  3158  008E                     	;# 
  3159  0091                     	;# 
  3160  0092                     	;# 
  3161  0093                     	;# 
  3162  0095                     	;# 
  3163  0096                     	;# 
  3164  0097                     	;# 
  3165  0098                     	;# 
  3166  0099                     	;# 
  3167  009A                     	;# 
  3168  009B                     	;# 
  3169  009B                     	;# 
  3170  009C                     	;# 
  3171  009D                     	;# 
  3172  009E                     	;# 
  3173  009F                     	;# 
  3174  010C                     	;# 
  3175  010E                     	;# 
  3176  0111                     	;# 
  3177  0112                     	;# 
  3178  0113                     	;# 
  3179  0114                     	;# 
  3180  0115                     	;# 
  3181  0116                     	;# 
  3182  0117                     	;# 
  3183  0118                     	;# 
  3184  0119                     	;# 
  3185  018C                     	;# 
  3186  018E                     	;# 
  3187  0191                     	;# 
  3188  0191                     	;# 
  3189  0192                     	;# 
  3190  0193                     	;# 
  3191  0193                     	;# 
  3192  0194                     	;# 
  3193  0195                     	;# 
  3194  0196                     	;# 
  3195  0197                     	;# 
  3196  0199                     	;# 
  3197  019A                     	;# 
  3198  019B                     	;# 
  3199  019B                     	;# 
  3200  019C                     	;# 
  3201  019D                     	;# 
  3202  019E                     	;# 
  3203  019F                     	;# 
  3204  020C                     	;# 
  3205  020E                     	;# 
  3206  028C                     	;# 
  3207  028E                     	;# 
  3208  030C                     	;# 
  3209  030E                     	;# 
  3210  038C                     	;# 
  3211  038E                     	;# 
  3212  0391                     	;# 
  3213  0392                     	;# 
  3214  0393                     	;# 
  3215  0397                     	;# 
  3216  0398                     	;# 
  3217  0399                     	;# 
  3218  0691                     	;# 
  3219  0692                     	;# 
  3220  0693                     	;# 
  3221  0694                     	;# 
  3222  0695                     	;# 
  3223  0D8E                     	;# 
  3224  0D8F                     	;# 
  3225  0D90                     	;# 
  3226  0D91                     	;# 
  3227  0D91                     	;# 
  3228  0D92                     	;# 
  3229  0D93                     	;# 
  3230  0D93                     	;# 
  3231  0D94                     	;# 
  3232  0D95                     	;# 
  3233  0D95                     	;# 
  3234  0D96                     	;# 
  3235  0D97                     	;# 
  3236  0D97                     	;# 
  3237  0D98                     	;# 
  3238  0D99                     	;# 
  3239  0D99                     	;# 
  3240  0D9A                     	;# 
  3241  0D9B                     	;# 
  3242  0D9C                     	;# 
  3243  0D9C                     	;# 
  3244  0D9D                     	;# 
  3245  0D9D                     	;# 
  3246  0D9E                     	;# 
  3247  0D9F                     	;# 
  3248  0DA0                     	;# 
  3249  0DA1                     	;# 
  3250  0DA1                     	;# 
  3251  0DA2                     	;# 
  3252  0DA3                     	;# 
  3253  0DA3                     	;# 
  3254  0DA4                     	;# 
  3255  0DA5                     	;# 
  3256  0DA5                     	;# 
  3257  0DA6                     	;# 
  3258  0DA7                     	;# 
  3259  0DA7                     	;# 
  3260  0DA8                     	;# 
  3261  0DA9                     	;# 
  3262  0DA9                     	;# 
  3263  0DAA                     	;# 
  3264  0DAB                     	;# 
  3265  0DAC                     	;# 
  3266  0DAC                     	;# 
  3267  0DAD                     	;# 
  3268  0DAD                     	;# 
  3269  0DAE                     	;# 
  3270  0DAF                     	;# 
  3271  0DB0                     	;# 
  3272  0DB1                     	;# 
  3273  0DB1                     	;# 
  3274  0DB2                     	;# 
  3275  0DB3                     	;# 
  3276  0DB3                     	;# 
  3277  0DB4                     	;# 
  3278  0DB5                     	;# 
  3279  0DB5                     	;# 
  3280  0DB6                     	;# 
  3281  0DB7                     	;# 
  3282  0DB7                     	;# 
  3283  0DB8                     	;# 
  3284  0DB9                     	;# 
  3285  0DB9                     	;# 
  3286  0DBA                     	;# 
  3287  0DBB                     	;# 
  3288  0DBC                     	;# 
  3289  0DBC                     	;# 
  3290  0DBD                     	;# 
  3291  0DBD                     	;# 
  3292  0DBE                     	;# 
  3293  0DBF                     	;# 
  3294  0DC0                     	;# 
  3295  0DC1                     	;# 
  3296  0DC1                     	;# 
  3297  0DC2                     	;# 
  3298  0DC3                     	;# 
  3299  0DC3                     	;# 
  3300  0DC4                     	;# 
  3301  0DC5                     	;# 
  3302  0DC5                     	;# 
  3303  0DC6                     	;# 
  3304  0DC7                     	;# 
  3305  0DC7                     	;# 
  3306  0DC8                     	;# 
  3307  0DC9                     	;# 
  3308  0DC9                     	;# 
  3309  0DCA                     	;# 
  3310  0DCB                     	;# 
  3311  0DCC                     	;# 
  3312  0DCC                     	;# 
  3313  0DCD                     	;# 
  3314  0DCD                     	;# 
  3315  0DCE                     	;# 
  3316  0DCF                     	;# 
  3317  0DD0                     	;# 
  3318  0E0F                     	;# 
  3319  0E10                     	;# 
  3320  0E11                     	;# 
  3321  0E12                     	;# 
  3322  0E13                     	;# 
  3323  0E14                     	;# 
  3324  0E15                     	;# 
  3325  0E16                     	;# 
  3326  0E17                     	;# 
  3327  0E90                     	;# 
  3328  0E91                     	;# 
  3329  0E92                     	;# 
  3330  0E94                     	;# 
  3331  0E95                     	;# 
  3332  0EA0                     	;# 
  3333  0EA1                     	;# 
  3334  0EA2                     	;# 
  3335  0EA3                     	;# 
  3336  0EA4                     	;# 
  3337  0EA5                     	;# 
  3338  0FE4                     	;# 
  3339  0FE5                     	;# 
  3340  0FE6                     	;# 
  3341  0FE7                     	;# 
  3342  0FE8                     	;# 
  3343  0FE8                     	;# 
  3344  0FE9                     	;# 
  3345  0FEA                     	;# 
  3346  0FEA                     	;# 
  3347  0FEB                     	;# 
  3348  0FED                     	;# 
  3349  0FEE                     	;# 
  3350  0FEE                     	;# 
  3351  0FEF                     	;# 
  3352  0FFF                     	;# 
  3353  0000                     	;# 
  3354  0001                     	;# 
  3355  0002                     	;# 
  3356  0003                     	;# 
  3357  0004                     	;# 
  3358  0005                     	;# 
  3359  0006                     	;# 
  3360  0007                     	;# 
  3361  0008                     	;# 
  3362  0009                     	;# 
  3363  000A                     	;# 
  3364  000B                     	;# 
  3365  000C                     	;# 
  3366  000E                     	;# 
  3367  0011                     	;# 
  3368  0012                     	;# 
  3369  0013                     	;# 
  3370  0015                     	;# 
  3371  0016                     	;# 
  3372  0016                     	;# 
  3373  0017                     	;# 
  3374  0018                     	;# 
  3375  0019                     	;# 
  3376  001A                     	;# 
  3377  001B                     	;# 
  3378  001C                     	;# 
  3379  008C                     	;# 
  3380  008E                     	;# 
  3381  0091                     	;# 
  3382  0092                     	;# 
  3383  0093                     	;# 
  3384  0095                     	;# 
  3385  0096                     	;# 
  3386  0097                     	;# 
  3387  0098                     	;# 
  3388  0099                     	;# 
  3389  009A                     	;# 
  3390  009B                     	;# 
  3391  009B                     	;# 
  3392  009C                     	;# 
  3393  009D                     	;# 
  3394  009E                     	;# 
  3395  009F                     	;# 
  3396  010C                     	;# 
  3397  010E                     	;# 
  3398  0111                     	;# 
  3399  0112                     	;# 
  3400  0113                     	;# 
  3401  0114                     	;# 
  3402  0115                     	;# 
  3403  0116                     	;# 
  3404  0117                     	;# 
  3405  0118                     	;# 
  3406  0119                     	;# 
  3407  018C                     	;# 
  3408  018E                     	;# 
  3409  0191                     	;# 
  3410  0191                     	;# 
  3411  0192                     	;# 
  3412  0193                     	;# 
  3413  0193                     	;# 
  3414  0194                     	;# 
  3415  0195                     	;# 
  3416  0196                     	;# 
  3417  0197                     	;# 
  3418  0199                     	;# 
  3419  019A                     	;# 
  3420  019B                     	;# 
  3421  019B                     	;# 
  3422  019C                     	;# 
  3423  019D                     	;# 
  3424  019E                     	;# 
  3425  019F                     	;# 
  3426  020C                     	;# 
  3427  020E                     	;# 
  3428  028C                     	;# 
  3429  028E                     	;# 
  3430  030C                     	;# 
  3431  030E                     	;# 
  3432  038C                     	;# 
  3433  038E                     	;# 
  3434  0391                     	;# 
  3435  0392                     	;# 
  3436  0393                     	;# 
  3437  0397                     	;# 
  3438  0398                     	;# 
  3439  0399                     	;# 
  3440  0691                     	;# 
  3441  0692                     	;# 
  3442  0693                     	;# 
  3443  0694                     	;# 
  3444  0695                     	;# 
  3445  0D8E                     	;# 
  3446  0D8F                     	;# 
  3447  0D90                     	;# 
  3448  0D91                     	;# 
  3449  0D91                     	;# 
  3450  0D92                     	;# 
  3451  0D93                     	;# 
  3452  0D93                     	;# 
  3453  0D94                     	;# 
  3454  0D95                     	;# 
  3455  0D95                     	;# 
  3456  0D96                     	;# 
  3457  0D97                     	;# 
  3458  0D97                     	;# 
  3459  0D98                     	;# 
  3460  0D99                     	;# 
  3461  0D99                     	;# 
  3462  0D9A                     	;# 
  3463  0D9B                     	;# 
  3464  0D9C                     	;# 
  3465  0D9C                     	;# 
  3466  0D9D                     	;# 
  3467  0D9D                     	;# 
  3468  0D9E                     	;# 
  3469  0D9F                     	;# 
  3470  0DA0                     	;# 
  3471  0DA1                     	;# 
  3472  0DA1                     	;# 
  3473  0DA2                     	;# 
  3474  0DA3                     	;# 
  3475  0DA3                     	;# 
  3476  0DA4                     	;# 
  3477  0DA5                     	;# 
  3478  0DA5                     	;# 
  3479  0DA6                     	;# 
  3480  0DA7                     	;# 
  3481  0DA7                     	;# 
  3482  0DA8                     	;# 
  3483  0DA9                     	;# 
  3484  0DA9                     	;# 
  3485  0DAA                     	;# 
  3486  0DAB                     	;# 
  3487  0DAC                     	;# 
  3488  0DAC                     	;# 
  3489  0DAD                     	;# 
  3490  0DAD                     	;# 
  3491  0DAE                     	;# 
  3492  0DAF                     	;# 
  3493  0DB0                     	;# 
  3494  0DB1                     	;# 
  3495  0DB1                     	;# 
  3496  0DB2                     	;# 
  3497  0DB3                     	;# 
  3498  0DB3                     	;# 
  3499  0DB4                     	;# 
  3500  0DB5                     	;# 
  3501  0DB5                     	;# 
  3502  0DB6                     	;# 
  3503  0DB7                     	;# 
  3504  0DB7                     	;# 
  3505  0DB8                     	;# 
  3506  0DB9                     	;# 
  3507  0DB9                     	;# 
  3508  0DBA                     	;# 
  3509  0DBB                     	;# 
  3510  0DBC                     	;# 
  3511  0DBC                     	;# 
  3512  0DBD                     	;# 
  3513  0DBD                     	;# 
  3514  0DBE                     	;# 
  3515  0DBF                     	;# 
  3516  0DC0                     	;# 
  3517  0DC1                     	;# 
  3518  0DC1                     	;# 
  3519  0DC2                     	;# 
  3520  0DC3                     	;# 
  3521  0DC3                     	;# 
  3522  0DC4                     	;# 
  3523  0DC5                     	;# 
  3524  0DC5                     	;# 
  3525  0DC6                     	;# 
  3526  0DC7                     	;# 
  3527  0DC7                     	;# 
  3528  0DC8                     	;# 
  3529  0DC9                     	;# 
  3530  0DC9                     	;# 
  3531  0DCA                     	;# 
  3532  0DCB                     	;# 
  3533  0DCC                     	;# 
  3534  0DCC                     	;# 
  3535  0DCD                     	;# 
  3536  0DCD                     	;# 
  3537  0DCE                     	;# 
  3538  0DCF                     	;# 
  3539  0DD0                     	;# 
  3540  0E0F                     	;# 
  3541  0E10                     	;# 
  3542  0E11                     	;# 
  3543  0E12                     	;# 
  3544  0E13                     	;# 
  3545  0E14                     	;# 
  3546  0E15                     	;# 
  3547  0E16                     	;# 
  3548  0E17                     	;# 
  3549  0E90                     	;# 
  3550  0E91                     	;# 
  3551  0E92                     	;# 
  3552  0E94                     	;# 
  3553  0E95                     	;# 
  3554  0EA0                     	;# 
  3555  0EA1                     	;# 
  3556  0EA2                     	;# 
  3557  0EA3                     	;# 
  3558  0EA4                     	;# 
  3559  0EA5                     	;# 
  3560  0FE4                     	;# 
  3561  0FE5                     	;# 
  3562  0FE6                     	;# 
  3563  0FE7                     	;# 
  3564  0FE8                     	;# 
  3565  0FE8                     	;# 
  3566  0FE9                     	;# 
  3567  0FEA                     	;# 
  3568  0FEA                     	;# 
  3569  0FEB                     	;# 
  3570  0FED                     	;# 
  3571  0FEE                     	;# 
  3572  0FEE                     	;# 
  3573  0FEF                     	;# 
  3574  0FFF                     	;# 
  3575  0000                     	;# 
  3576  0001                     	;# 
  3577  0002                     	;# 
  3578  0003                     	;# 
  3579  0004                     	;# 
  3580  0005                     	;# 
  3581  0006                     	;# 
  3582  0007                     	;# 
  3583  0008                     	;# 
  3584  0009                     	;# 
  3585  000A                     	;# 
  3586  000B                     	;# 
  3587  000C                     	;# 
  3588  000E                     	;# 
  3589  0011                     	;# 
  3590  0012                     	;# 
  3591  0013                     	;# 
  3592  0015                     	;# 
  3593  0016                     	;# 
  3594  0016                     	;# 
  3595  0017                     	;# 
  3596  0018                     	;# 
  3597  0019                     	;# 
  3598  001A                     	;# 
  3599  001B                     	;# 
  3600  001C                     	;# 
  3601  008C                     	;# 
  3602  008E                     	;# 
  3603  0091                     	;# 
  3604  0092                     	;# 
  3605  0093                     	;# 
  3606  0095                     	;# 
  3607  0096                     	;# 
  3608  0097                     	;# 
  3609  0098                     	;# 
  3610  0099                     	;# 
  3611  009A                     	;# 
  3612  009B                     	;# 
  3613  009B                     	;# 
  3614  009C                     	;# 
  3615  009D                     	;# 
  3616  009E                     	;# 
  3617  009F                     	;# 
  3618  010C                     	;# 
  3619  010E                     	;# 
  3620  0111                     	;# 
  3621  0112                     	;# 
  3622  0113                     	;# 
  3623  0114                     	;# 
  3624  0115                     	;# 
  3625  0116                     	;# 
  3626  0117                     	;# 
  3627  0118                     	;# 
  3628  0119                     	;# 
  3629  018C                     	;# 
  3630  018E                     	;# 
  3631  0191                     	;# 
  3632  0191                     	;# 
  3633  0192                     	;# 
  3634  0193                     	;# 
  3635  0193                     	;# 
  3636  0194                     	;# 
  3637  0195                     	;# 
  3638  0196                     	;# 
  3639  0197                     	;# 
  3640  0199                     	;# 
  3641  019A                     	;# 
  3642  019B                     	;# 
  3643  019B                     	;# 
  3644  019C                     	;# 
  3645  019D                     	;# 
  3646  019E                     	;# 
  3647  019F                     	;# 
  3648  020C                     	;# 
  3649  020E                     	;# 
  3650  028C                     	;# 
  3651  028E                     	;# 
  3652  030C                     	;# 
  3653  030E                     	;# 
  3654  038C                     	;# 
  3655  038E                     	;# 
  3656  0391                     	;# 
  3657  0392                     	;# 
  3658  0393                     	;# 
  3659  0397                     	;# 
  3660  0398                     	;# 
  3661  0399                     	;# 
  3662  0691                     	;# 
  3663  0692                     	;# 
  3664  0693                     	;# 
  3665  0694                     	;# 
  3666  0695                     	;# 
  3667  0D8E                     	;# 
  3668  0D8F                     	;# 
  3669  0D90                     	;# 
  3670  0D91                     	;# 
  3671  0D91                     	;# 
  3672  0D92                     	;# 
  3673  0D93                     	;# 
  3674  0D93                     	;# 
  3675  0D94                     	;# 
  3676  0D95                     	;# 
  3677  0D95                     	;# 
  3678  0D96                     	;# 
  3679  0D97                     	;# 
  3680  0D97                     	;# 
  3681  0D98                     	;# 
  3682  0D99                     	;# 
  3683  0D99                     	;# 
  3684  0D9A                     	;# 
  3685  0D9B                     	;# 
  3686  0D9C                     	;# 
  3687  0D9C                     	;# 
  3688  0D9D                     	;# 
  3689  0D9D                     	;# 
  3690  0D9E                     	;# 
  3691  0D9F                     	;# 
  3692  0DA0                     	;# 
  3693  0DA1                     	;# 
  3694  0DA1                     	;# 
  3695  0DA2                     	;# 
  3696  0DA3                     	;# 
  3697  0DA3                     	;# 
  3698  0DA4                     	;# 
  3699  0DA5                     	;# 
  3700  0DA5                     	;# 
  3701  0DA6                     	;# 
  3702  0DA7                     	;# 
  3703  0DA7                     	;# 
  3704  0DA8                     	;# 
  3705  0DA9                     	;# 
  3706  0DA9                     	;# 
  3707  0DAA                     	;# 
  3708  0DAB                     	;# 
  3709  0DAC                     	;# 
  3710  0DAC                     	;# 
  3711  0DAD                     	;# 
  3712  0DAD                     	;# 
  3713  0DAE                     	;# 
  3714  0DAF                     	;# 
  3715  0DB0                     	;# 
  3716  0DB1                     	;# 
  3717  0DB1                     	;# 
  3718  0DB2                     	;# 
  3719  0DB3                     	;# 
  3720  0DB3                     	;# 
  3721  0DB4                     	;# 
  3722  0DB5                     	;# 
  3723  0DB5                     	;# 
  3724  0DB6                     	;# 
  3725  0DB7                     	;# 
  3726  0DB7                     	;# 
  3727  0DB8                     	;# 
  3728  0DB9                     	;# 
  3729  0DB9                     	;# 
  3730  0DBA                     	;# 
  3731  0DBB                     	;# 
  3732  0DBC                     	;# 
  3733  0DBC                     	;# 
  3734  0DBD                     	;# 
  3735  0DBD                     	;# 
  3736  0DBE                     	;# 
  3737  0DBF                     	;# 
  3738  0DC0                     	;# 
  3739  0DC1                     	;# 
  3740  0DC1                     	;# 
  3741  0DC2                     	;# 
  3742  0DC3                     	;# 
  3743  0DC3                     	;# 
  3744  0DC4                     	;# 
  3745  0DC5                     	;# 
  3746  0DC5                     	;# 
  3747  0DC6                     	;# 
  3748  0DC7                     	;# 
  3749  0DC7                     	;# 
  3750  0DC8                     	;# 
  3751  0DC9                     	;# 
  3752  0DC9                     	;# 
  3753  0DCA                     	;# 
  3754  0DCB                     	;# 
  3755  0DCC                     	;# 
  3756  0DCC                     	;# 
  3757  0DCD                     	;# 
  3758  0DCD                     	;# 
  3759  0DCE                     	;# 
  3760  0DCF                     	;# 
  3761  0DD0                     	;# 
  3762  0E0F                     	;# 
  3763  0E10                     	;# 
  3764  0E11                     	;# 
  3765  0E12                     	;# 
  3766  0E13                     	;# 
  3767  0E14                     	;# 
  3768  0E15                     	;# 
  3769  0E16                     	;# 
  3770  0E17                     	;# 
  3771  0E90                     	;# 
  3772  0E91                     	;# 
  3773  0E92                     	;# 
  3774  0E94                     	;# 
  3775  0E95                     	;# 
  3776  0EA0                     	;# 
  3777  0EA1                     	;# 
  3778  0EA2                     	;# 
  3779  0EA3                     	;# 
  3780  0EA4                     	;# 
  3781  0EA5                     	;# 
  3782  0FE4                     	;# 
  3783  0FE5                     	;# 
  3784  0FE6                     	;# 
  3785  0FE7                     	;# 
  3786  0FE8                     	;# 
  3787  0FE8                     	;# 
  3788  0FE9                     	;# 
  3789  0FEA                     	;# 
  3790  0FEA                     	;# 
  3791  0FEB                     	;# 
  3792  0FED                     	;# 
  3793  0FEE                     	;# 
  3794  0FEE                     	;# 
  3795  0FEF                     	;# 
  3796  0FFF                     	;_sysData
  3797                           
  3798 ;; Function _TMR2_DefaultInterruptHandler is unused but had its address taken
  3799  0000                     
  3800                           	psect	idataBANK0
  3801  084B                     __pidataBANK0:	
  3802                           
  3803                           ;initializer for _resRc
  3804  084B  3410               	retlw	16
  3805  084C  3427               	retlw	39
  3806  084D  3400               	retlw	0
  3807  084E  3400               	retlw	0
  3808                           
  3809                           ;initializer for _pwm2DutyForVout
  3810  084F  3410               	retlw	16
  3811  0850  3400               	retlw	0
  3812                           
  3813                           	psect	idataBANK1
  3814  07F0                     __pidataBANK1:	
  3815                           
  3816                           ;initializer for _bbmax
  3817  07F0  34C0               	retlw	192
  3818  07F1  34F2               	retlw	242
  3819  07F2  34FC               	retlw	252
  3820  07F3  34FF               	retlw	255
  3821                           
  3822                           ;initializer for _bbmin
  3823  07F4  3440               	retlw	64
  3824  07F5  340D               	retlw	13
  3825  07F6  3403               	retlw	3
  3826  07F7  3400               	retlw	0
  3827                           
  3828                           ;initializer for _pidU
  3829  07F8  3414               	retlw	20
  3830  07F9  3400               	retlw	0
  3831  07FA  3400               	retlw	0
  3832  07FB  3400               	retlw	0
  3833                           
  3834                           ;initializer for _resRs
  3835  07FC  3410               	retlw	16
  3836  07FD  3427               	retlw	39
  3837  07FE  3400               	retlw	0
  3838  07FF  3400               	retlw	0
  3839  000B                     _INTCONbits	set	11
  3840  0011                     _PIR1bits	set	17
  3841  001B                     _PR2	set	27
  3842  001C                     _T2CON	set	28
  3843  001C                     _T2CONbits	set	28
  3844  001A                     _TMR2	set	26
  3845  005F                     _GIE	set	95
  3846  009D                     _ADCON0	set	157
  3847  009D                     _ADCON0bits	set	157
  3848  009E                     _ADCON1	set	158
  3849  009F                     _ADCON2	set	159
  3850  009C                     _ADRESH	set	156
  3851  009B                     _ADRESL	set	155
  3852  0095                     _OPTION_REGbits	set	149
  3853  0099                     _OSCCON	set	153
  3854  0098                     _OSCTUNE	set	152
  3855  0091                     _PIE1bits	set	145
  3856  008C                     _TRISA	set	140
  3857  008E                     _TRISC	set	142
  3858  0097                     _WDTCON	set	151
  3859  0117                     _FVRCON	set	279
  3860  0117                     _FVRCONbits	set	279
  3861  010C                     _LATA	set	268
  3862  010E                     _LATC	set	270
  3863  018C                     _ANSELA	set	396
  3864  018E                     _ANSELC	set	398
  3865  019F                     _BAUDCON	set	415
  3866  0192                     _PMADRH	set	402
  3867  0191                     _PMADRL	set	401
  3868  0195                     _PMCON1bits	set	405
  3869  0196                     _PMCON2	set	406
  3870  0194                     _PMDATH	set	404
  3871  0193                     _PMDATL	set	403
  3872  0199                     _RCREG	set	409
  3873  019D                     _RCSTA	set	413
  3874  019D                     _RCSTAbits	set	413
  3875  019C                     _SPBRGH	set	412
  3876  019B                     _SPBRGL	set	411
  3877  019A                     _TXREG	set	410
  3878  019E                     _TXSTA	set	414
  3879  019E                     _TXSTAbits	set	414
  3880  020C                     _WPUA	set	524
  3881  020E                     _WPUC	set	526
  3882  028C                     _ODCONA	set	652
  3883  028E                     _ODCONC	set	654
  3884  0D9E                     _PWM1CLKCON	set	3486
  3885  0D9B                     _PWM1CON	set	3483
  3886  0D9B                     _PWM1CONbits	set	3483
  3887  0D94                     _PWM1DCH	set	3476
  3888  0D93                     _PWM1DCL	set	3475
  3889  0D9C                     _PWM1INTE	set	3484
  3890  0D9D                     _PWM1INTF	set	3485
  3891  0D9F                     _PWM1LDCON	set	3487
  3892  0DA0                     _PWM1OFCON	set	3488
  3893  0D98                     _PWM1OFH	set	3480
  3894  0D97                     _PWM1OFL	set	3479
  3895  0D92                     _PWM1PHH	set	3474
  3896  0D91                     _PWM1PHL	set	3473
  3897  0D96                     _PWM1PRH	set	3478
  3898  0D95                     _PWM1PRL	set	3477
  3899  0D9A                     _PWM1TMRH	set	3482
  3900  0D99                     _PWM1TMRL	set	3481
  3901  0DAE                     _PWM2CLKCON	set	3502
  3902  0DAB                     _PWM2CON	set	3499
  3903  0DAB                     _PWM2CONbits	set	3499
  3904  0DA4                     _PWM2DCH	set	3492
  3905  0DA3                     _PWM2DCL	set	3491
  3906  0DAC                     _PWM2INTE	set	3500
  3907  0DAD                     _PWM2INTF	set	3501
  3908  0DAF                     _PWM2LDCON	set	3503
  3909  0DB0                     _PWM2OFCON	set	3504
  3910  0DA8                     _PWM2OFH	set	3496
  3911  0DA7                     _PWM2OFL	set	3495
  3912  0DA2                     _PWM2PHH	set	3490
  3913  0DA1                     _PWM2PHL	set	3489
  3914  0DA6                     _PWM2PRH	set	3494
  3915  0DA5                     _PWM2PRL	set	3493
  3916  0DAA                     _PWM2TMRH	set	3498
  3917  0DA9                     _PWM2TMRL	set	3497
  3918  0E0F                     _PPSLOCK	set	3599
  3919  0E0F                     _PPSLOCKbits	set	3599
  3920  0E15                     _RXPPSbits	set	3605
  3921  0E94                     _RA4PPSbits	set	3732
  3922  0E95                     _RA5PPSbits	set	3733
  3923  0EA5                     _RC5PPSbits	set	3749
  3924                           
  3925                           ; #config settings
  3926  0000                     
  3927                           	psect	cinit
  3928  0052                     start_initialization:	
  3929  0052                     __initialization:		;BIGRAM
  3930                           
  3931                           ; Clear objects allocated to BIGRAM
  3932  0052  3084               	movlw	132
  3933  0053  0084               	movwf	4
  3934  0054  3023               	movlw	35
  3935  0055  0085               	movwf	5
  3936  0056  305C               	movlw	92
  3937  0057  00FE               	movwf	126
  3938  0058  01FF               	clrf	127
  3939  0059  3188  205D  3180   	fcall	clear_ram0
  3940  005C  304A               	movlw	low __pbssBANK0
  3941                           
  3942                           ; Clear objects allocated to COMMON
  3943  005D  01FC               	clrf	__pbssCOMMON& (0+127)
  3944                           
  3945                           ; Clear objects allocated to BANK0
  3946  005E  0084               	movwf	4
  3947  005F  3000               	movlw	high __pbssBANK0
  3948  0060  0085               	movwf	5
  3949  0061  3016               	movlw	22
  3950  0062  00FE               	movwf	126
  3951  0063  3000               	movlw	0
  3952  0064  00FF               	movwf	127
  3953  0065  3188  205D  3180   	fcall	clear_ram0
  3954                           
  3955                           ; Clear objects allocated to BANK1
  3956  0068  30A0               	movlw	low __pbssBANK1
  3957  0069  0084               	movwf	4
  3958  006A  3000               	movlw	high __pbssBANK1
  3959  006B  0085               	movwf	5
  3960  006C  3040               	movlw	64
  3961  006D  00FE               	movwf	126
  3962  006E  3000               	movlw	0
  3963  006F  00FF               	movwf	127
  3964  0070  3188  205D  3180   	fcall	clear_ram0
  3965                           
  3966                           ; Clear objects allocated to BANK2
  3967  0073  3020               	movlw	low __pbssBANK2
  3968  0074  0084               	movwf	4
  3969  0075  3001               	movlw	high __pbssBANK2
  3970  0076  0085               	movwf	5
  3971  0077  3040               	movlw	64
  3972  0078  00FE               	movwf	126
  3973  0079  3000               	movlw	0
  3974  007A  00FF               	movwf	127
  3975  007B  3188  205D  3180   	fcall	clear_ram0
  3976                           
  3977                           ; Clear objects allocated to BANK3
  3978  007E  30A0               	movlw	low __pbssBANK3
  3979  007F  0084               	movwf	4
  3980  0080  3001               	movlw	high __pbssBANK3
  3981  0081  0085               	movwf	5
  3982  0082  3040               	movlw	64
  3983  0083  00FE               	movwf	126
  3984  0084  3000               	movlw	0
  3985  0085  00FF               	movwf	127
  3986  0086  3188  205D  3180   	fcall	clear_ram0
  3987                           
  3988                           ; Initialize objects allocated to BANK0
  3989  0089  304B               	movlw	low __pidataBANK0
  3990  008A  0084               	movwf	4
  3991  008B  3088               	movlw	(high __pidataBANK0)| (0+128)
  3992  008C  0085               	movwf	5
  3993  008D  3060               	movlw	low __pdataBANK0
  3994  008E  0086               	movwf	6
  3995  008F  3000               	movlw	high __pdataBANK0
  3996  0090  0087               	movwf	7
  3997  0091  3000               	movlw	0
  3998  0092  00FF               	movwf	127
  3999  0093  3006               	movlw	6
  4000  0094  3188  2051  3180   	fcall	init_ram
  4001                           
  4002                           ; Initialize objects allocated to BANK1
  4003  0097  30F0               	movlw	low __pidataBANK1
  4004  0098  0084               	movwf	4
  4005  0099  3087               	movlw	(high __pidataBANK1)| (0+128)
  4006  009A  0085               	movwf	5
  4007  009B  30E0               	movlw	low __pdataBANK1
  4008  009C  0086               	movwf	6
  4009  009D  3000               	movlw	high __pdataBANK1
  4010  009E  0087               	movwf	7
  4011  009F  3000               	movlw	0
  4012  00A0  00FF               	movwf	127
  4013  00A1  3010               	movlw	16
  4014  00A2  3188  2051  3180   	fcall	init_ram
  4015  00A5                     end_of_initialization:	
  4016                           ;End of C runtime variable initialization code
  4017                           
  4018  00A5                     __end_of__initialization:	
  4019  00A5  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4020  00A6  0020               	movlb	0
  4021  00A7  28A8               	ljmp	_main	;jump to C main() function
  4022  00A8                     __pmaintext:	
  4023 ;;
  4024 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  4025 ;;
  4026 ;; *************** function _main *****************
  4027 ;; Defined at:
  4028 ;;		line 17 in file "src/app/main.c"
  4029 ;; Parameters:    Size  Location     Type
  4030 ;;		None
  4031 ;; Auto vars:     Size  Location     Type
  4032 ;;		None
  4033 ;; Return value:  Size  Location     Type
  4034 ;;                  1    wreg      void 
  4035 ;; Registers used:
  4036 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4037 ;; Tracked objects:
  4038 ;;		On entry : B1F/0
  4039 ;;		On exit  : 0/0
  4040 ;;		Unchanged: 0/0
  4041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4044 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4045 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4046 ;;Total ram usage:        2 bytes
  4047 ;; Hardware stack levels required when called:    6
  4048 ;; This function calls:
  4049 ;;		_SYSTEM_Initialize
  4050 ;;		_adc_sample
  4051 ;;		_calc_expect_vout_adc_value
  4052 ;;		_calc_rs_lo_avg
  4053 ;;		_calc_temp_rc
  4054 ;;		_calc_temp_rs
  4055 ;;		_m_mem_cpy_len
  4056 ;;		_modbus_response_process
  4057 ;;		_pid_pwm1_idrv_b_b
  4058 ;;		_pid_pwm1_idrv_run
  4059 ;;		_pid_pwm2_vout_run
  4060 ;;		_set_vout_pwm2_duty
  4061 ;;		_sys_data_init
  4062 ;;		_sys_data_save
  4063 ;;		_uart_received_start
  4064 ;; This function is called by:
  4065 ;;		Startup code after reset
  4066 ;; This function uses a non-reentrant model
  4067 ;;
  4068                           
  4069                           
  4070                           ;psect for function _main
  4071  00A8                     _main:	
  4072                           
  4073                           ;main.c: 19: __nop();
  4074                           
  4075                           ;incstack = 0
  4076                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4077  00A8  0000               	nop
  4078                           
  4079                           ;main.c: 21: SYSTEM_Initialize();
  4080  00A9  21F2               	fcall	_SYSTEM_Initialize
  4081  00AA  178B               	bsf	11,7	;volatile
  4082  00AB  170B               	bsf	11,6	;volatile
  4083                           
  4084                           ;main.c: 24: set_vout_pwm2_duty(10);
  4085  00AC  300A               	movlw	10
  4086  00AD  00F3               	movwf	set_vout_pwm2_duty@duty
  4087  00AE  01F4               	clrf	set_vout_pwm2_duty@duty+1
  4088  00AF  3189  2142  3180   	fcall	_set_vout_pwm2_duty
  4089                           
  4090                           ;main.c: 25: sys_data_init();
  4091  00B2  318B  23CB  3180   	fcall	_sys_data_init
  4092                           
  4093                           ;main.c: 27: if(sysData.pidSetFlg0 != 0x55 || sysData.pidSetFlg1 != 0xaa){
  4094  00B5  279E  3180         	fcall	PL56	;call to abstracted procedure
  4095  00B7  0601               	xorwf	1,w
  4096  00B8  1D03               	btfss	3,2
  4097  00B9  28C1               	goto	l4418
  4098  00BA  3084               	movlw	132
  4099  00BB  0086               	movwf	6
  4100  00BC  30AA               	movlw	170
  4101  00BD  3141               	addfsr 1,1
  4102  00BE  0601               	xorwf	1,w
  4103  00BF  1903               	btfsc	3,2
  4104  00C0  28C3               	goto	l4420
  4105  00C1                     l4418:	
  4106                           
  4107                           ;main.c: 28: pidBbSm=0;
  4108  00C1  01DC               	clrf	_pidBbSm
  4109                           
  4110                           ;main.c: 29: }else{
  4111  00C2  28F1               	goto	l4428
  4112  00C3                     l4420:	
  4113                           
  4114                           ;main.c: 30: pidBbSm=5;
  4115  00C3  3005               	movlw	5
  4116  00C4  00DC               	movwf	_pidBbSm
  4117                           
  4118                           ;main.c: 31: PidKp=sysData.pidKp;
  4119  00C5  318F  27EA  3180   	fcall	PL52	;call to abstracted procedure
  4120  00C8  3F40               	moviw [0]fsr1
  4121  00C9  00C8               	movwf	??_main
  4122  00CA  3F41               	moviw [1]fsr1
  4123  00CB  00C9               	movwf	??_main+1
  4124  00CC  0848               	movf	??_main,w
  4125  00CD  0021               	movlb	1	; select bank1
  4126  00CE  00B6               	movwf	_PidKp^(0+128)
  4127  00CF  0020               	movlb	0	; select bank0
  4128  00D0  0849               	movf	??_main+1,w
  4129  00D1  0021               	movlb	1	; select bank1
  4130  00D2  00B7               	movwf	(_PidKp^(0+128)+1)
  4131  00D3  3084               	movlw	132
  4132  00D4  01B8               	clrf	(_PidKp^(0+128)+2)
  4133  00D5  01B9               	clrf	(_PidKp^(0+128)+3)
  4134                           
  4135                           ;main.c: 32: PidTd=sysData.pidTd;
  4136  00D6  0086               	movwf	6
  4137  00D7  3023               	movlw	35
  4138  00D8  0087               	movwf	7
  4139  00D9  3148               	addfsr 1,8
  4140  00DA  2776  3180         	fcall	PL32	;call to abstracted procedure
  4141  00DC  00BA               	movwf	_PidTd^(0+128)
  4142  00DD  0020               	movlb	0	; select bank0
  4143  00DE  0849               	movf	??_main+1,w
  4144  00DF  0021               	movlb	1	; select bank1
  4145  00E0  00BB               	movwf	(_PidTd^(0+128)+1)
  4146  00E1  3084               	movlw	132
  4147  00E2  01BC               	clrf	(_PidTd^(0+128)+2)
  4148  00E3  01BD               	clrf	(_PidTd^(0+128)+3)
  4149                           
  4150                           ;main.c: 33: PidTi=sysData.pidTi;
  4151  00E4  0086               	movwf	6
  4152  00E5  3023               	movlw	35
  4153  00E6  0087               	movwf	7
  4154  00E7  3146               	addfsr 1,6
  4155  00E8  2776  3180         	fcall	PL32	;call to abstracted procedure
  4156  00EA  00BE               	movwf	_PidTi^(0+128)
  4157  00EB  0020               	movlb	0	; select bank0
  4158  00EC  0849               	movf	??_main+1,w
  4159  00ED  0021               	movlb	1	; select bank1
  4160  00EE  00BF               	movwf	(_PidTi^(0+128)+1)
  4161  00EF  01C0               	clrf	(_PidTi^(0+128)+2)
  4162  00F0  01C1               	clrf	(_PidTi^(0+128)+3)
  4163  00F1                     l4428:	
  4164                           
  4165                           ;main.c: 37: if(Event & (1<<2)){
  4166  00F1  0020               	movlb	0	; select bank0
  4167  00F2  1D5A               	btfss	_Event,2	;volatile
  4168  00F3  299A               	goto	l4456
  4169                           
  4170                           ;main.c: 38: Event &= ~(1<<2);
  4171  00F4  115A               	bcf	_Event,2	;volatile
  4172  00F5  3020               	movlw	32
  4173                           
  4174                           ;main.c: 40: rtAdcValueRsLo=adc_sample(channel_AN6,1,32);
  4175  00F6  01F3               	clrf	adc_sample@gfvr
  4176  00F7  0AF3               	incf	adc_sample@gfvr,f
  4177  00F8  00F4               	movwf	adc_sample@num
  4178  00F9  3006               	movlw	6
  4179  00FA  21BA  3180         	fcall	_adc_sample
  4180  00FC  0874               	movf	?_adc_sample+1,w
  4181  00FD  0020               	movlb	0	; select bank0
  4182  00FE  00D3               	movwf	_rtAdcValueRsLo+1
  4183  00FF  0873               	movf	?_adc_sample,w
  4184  0100  00D2               	movwf	_rtAdcValueRsLo
  4185                           
  4186                           ;main.c: 42: rtAdcValueRsHi=adc_sample(channel_AN5,3,32);
  4187  0101  3003               	movlw	3
  4188  0102  00F3               	movwf	adc_sample@gfvr
  4189  0103  3020               	movlw	32
  4190  0104  00F4               	movwf	adc_sample@num
  4191  0105  3005               	movlw	5
  4192  0106  21BA  3180         	fcall	_adc_sample
  4193  0108  0874               	movf	?_adc_sample+1,w
  4194  0109  0020               	movlb	0	; select bank0
  4195  010A  00D1               	movwf	_rtAdcValueRsHi+1
  4196  010B  0873               	movf	?_adc_sample,w
  4197  010C  00D0               	movwf	_rtAdcValueRsHi
  4198                           
  4199                           ;main.c: 45: rtAdcValueRcLo=adc_sample(channel_AN4,3,16);
  4200  010D  3003               	movlw	3
  4201  010E  00F3               	movwf	adc_sample@gfvr
  4202  010F  3010               	movlw	16
  4203  0110  00F4               	movwf	adc_sample@num
  4204  0111  3004               	movlw	4
  4205  0112  21BA  3180         	fcall	_adc_sample
  4206  0114  0874               	movf	?_adc_sample+1,w
  4207  0115  0020               	movlb	0	; select bank0
  4208  0116  00CF               	movwf	_rtAdcValueRcLo+1
  4209  0117  0873               	movf	?_adc_sample,w
  4210  0118  00CE               	movwf	_rtAdcValueRcLo
  4211                           
  4212                           ;main.c: 46: rtAdcValueRcHi=adc_sample(channel_AN2,3,16);
  4213  0119  3003               	movlw	3
  4214  011A  00F3               	movwf	adc_sample@gfvr
  4215  011B  3010               	movlw	16
  4216  011C  00F4               	movwf	adc_sample@num
  4217  011D  3002               	movlw	2
  4218  011E  21BA  3180         	fcall	_adc_sample
  4219  0120  0874               	movf	?_adc_sample+1,w
  4220  0121  0020               	movlb	0	; select bank0
  4221  0122  00CD               	movwf	_rtAdcValueRcHi+1
  4222  0123  0873               	movf	?_adc_sample,w
  4223  0124  00CC               	movwf	_rtAdcValueRcHi
  4224                           
  4225                           ;main.c: 49: rtAdcValueVoFb=adc_sample(channel_AN7,3,16);
  4226  0125  3003               	movlw	3
  4227  0126  00F3               	movwf	adc_sample@gfvr
  4228  0127  3010               	movlw	16
  4229  0128  00F4               	movwf	adc_sample@num
  4230  0129  3007               	movlw	7
  4231  012A  21BA  3180         	fcall	_adc_sample
  4232  012C  0874               	movf	?_adc_sample+1,w
  4233  012D  0020               	movlb	0	; select bank0
  4234  012E  00D5               	movwf	_rtAdcValueVoFb+1
  4235  012F  0873               	movf	?_adc_sample,w
  4236  0130  00D4               	movwf	_rtAdcValueVoFb
  4237                           
  4238                           ;main.c: 51: resRc=calc_temp_rc();
  4239  0131  22E8  3180         	fcall	_calc_temp_rc
  4240  0133  0828               	movf	?_calc_temp_rc+3,w
  4241  0134  00E3               	movwf	_resRc+3
  4242  0135  0827               	movf	?_calc_temp_rc+2,w
  4243  0136  00E2               	movwf	_resRc+2
  4244  0137  0826               	movf	?_calc_temp_rc+1,w
  4245  0138  00E1               	movwf	_resRc+1
  4246  0139  0825               	movf	?_calc_temp_rc,w
  4247  013A  00E0               	movwf	_resRc
  4248                           
  4249                           ;main.c: 52: resRs=calc_temp_rs();
  4250  013B  2644  3180         	fcall	_calc_temp_rs
  4251  013D  0828               	movf	?_calc_temp_rs+3,w
  4252  013E  0021               	movlb	1	; select bank1
  4253  013F  00EF               	movwf	(_resRs+3)^(0+128)
  4254  0140  0020               	movlb	0	; select bank0
  4255  0141  0827               	movf	?_calc_temp_rs+2,w
  4256  0142  0021               	movlb	1	; select bank1
  4257  0143  00EE               	movwf	(_resRs+2)^(0+128)
  4258  0144  0020               	movlb	0	; select bank0
  4259  0145  0826               	movf	?_calc_temp_rs+1,w
  4260  0146  0021               	movlb	1	; select bank1
  4261  0147  00ED               	movwf	(_resRs+1)^(0+128)
  4262  0148  0020               	movlb	0	; select bank0
  4263  0149  0825               	movf	?_calc_temp_rs,w
  4264  014A  0021               	movlb	1	; select bank1
  4265  014B  00EC               	movwf	_resRs^(0+128)
  4266                           
  4267                           ;main.c: 54: __nop();
  4268  014C  0000               	nop
  4269                           
  4270                           ;main.c: 55: if(pidBbSm>=5){
  4271  014D  3005               	movlw	5
  4272  014E  0020               	movlb	0	; select bank0
  4273  014F  025C               	subwf	_pidBbSm,w
  4274  0150  1C03               	skipc
  4275  0151  2976               	goto	l4448
  4276                           
  4277                           ;main.c: 56: pid_pwm1_idrv_run();
  4278  0152  3189  215E  3180   	fcall	_pid_pwm1_idrv_run
  4279                           
  4280                           ;main.c: 58: extern uint16_t rsLoAvg;
  4281                           ;main.c: 59: rsLoAvg=calc_rs_lo_avg(rtAdcValueRsLo);
  4282  0155  0020               	movlb	0	; select bank0
  4283  0156  0853               	movf	_rtAdcValueRsLo+1,w
  4284  0157  00FA               	movwf	calc_rs_lo_avg@x+1
  4285  0158  0852               	movf	_rtAdcValueRsLo,w
  4286  0159  00F9               	movwf	calc_rs_lo_avg@x
  4287  015A  229B               	fcall	_calc_rs_lo_avg
  4288  015B  087A               	movf	?_calc_rs_lo_avg+1,w
  4289  015C  0021               	movlb	1	; select bank1
  4290  015D  00DF               	movwf	(_rsLoAvg+1)^(0+128)
  4291  015E  0879               	movf	?_calc_rs_lo_avg,w
  4292  015F  00DE               	movwf	_rsLoAvg^(0+128)
  4293                           
  4294                           ;main.c: 60: voExpectMv=calc_expect_vout_adc_value(rsLoAvg);
  4295  0160  085F               	movf	(_rsLoAvg+1)^(0+128),w
  4296  0161  0020               	movlb	0	; select bank0
  4297  0162  00B3               	movwf	calc_expect_vout_adc_value@x+1
  4298  0163  0021               	movlb	1	; select bank1
  4299  0164  085E               	movf	_rsLoAvg^(0+128),w
  4300  0165  0020               	movlb	0	; select bank0
  4301  0166  00B2               	movwf	calc_expect_vout_adc_value@x
  4302  0167  318A  228A  3180   	fcall	_calc_expect_vout_adc_value
  4303  016A  0833               	movf	?_calc_expect_vout_adc_value+1,w
  4304  016B  00D9               	movwf	_voExpectMv+1
  4305  016C  0832               	movf	?_calc_expect_vout_adc_value,w
  4306  016D  00D8               	movwf	_voExpectMv
  4307                           
  4308                           ;main.c: 61: voExpectAdcValue=(voExpectMv<<1);
  4309  016E  3558               	lslf	_voExpectMv,w
  4310  016F  00D6               	movwf	_voExpectAdcValue
  4311  0170  0D59               	rlf	_voExpectMv+1,w
  4312  0171  00D7               	movwf	_voExpectAdcValue+1
  4313                           
  4314                           ;main.c: 62: pid_pwm2_vout_run();
  4315  0172  3188  2069  3180   	fcall	_pid_pwm2_vout_run
  4316                           
  4317                           ;main.c: 63: }else{
  4318  0175  299A               	goto	l4456
  4319  0176                     l4448:	
  4320                           
  4321                           ;main.c: 64: pid_pwm1_idrv_b_b();
  4322  0176  2385  3180         	fcall	_pid_pwm1_idrv_b_b
  4323                           
  4324                           ;main.c: 66: if(pidBbSm>=5){
  4325  0178  3005               	movlw	5
  4326  0179  0020               	movlb	0	; select bank0
  4327  017A  025C               	subwf	_pidBbSm,w
  4328  017B  1C03               	skipc
  4329  017C  299A               	goto	l4456
  4330                           
  4331                           ;main.c: 67: sysData.pidSetFlg0 = 0x55;
  4332  017D  279E  3180         	fcall	PL56	;call to abstracted procedure
  4333  017F  3FC0               	movwi [0]fsr1
  4334                           
  4335                           ;main.c: 68: sysData.pidSetFlg1 = 0xaa;
  4336  0180  3085               	movlw	133
  4337  0181  0086               	movwf	6
  4338  0182  30AA               	movlw	170
  4339  0183  0081               	movwf	1
  4340                           
  4341                           ;main.c: 69: sysData.pidKp=PidKp;
  4342  0184  3084               	movlw	132
  4343  0185  0086               	movwf	6
  4344  0186  3144               	addfsr 1,4
  4345  0187  0021               	movlb	1	; select bank1
  4346  0188  0836               	movf	_PidKp^(0+128),w
  4347  0189  3FC0               	movwi [0]fsr1
  4348  018A  0837               	movf	(_PidKp+1)^(0+128),w
  4349                           
  4350                           ;main.c: 70: sysData.pidTd=PidTd;
  4351  018B  2792  3180         	fcall	PL46	;call to abstracted procedure
  4352  018D  3148               	addfsr 1,8
  4353  018E  083A               	movf	_PidTd^(0+128),w
  4354  018F  3FC0               	movwi [0]fsr1
  4355  0190  083B               	movf	(_PidTd+1)^(0+128),w
  4356                           
  4357                           ;main.c: 71: sysData.pidTi=PidTi;
  4358  0191  2792  3180         	fcall	PL46	;call to abstracted procedure
  4359  0193  3146               	addfsr 1,6
  4360  0194  083E               	movf	_PidTi^(0+128),w
  4361  0195  3FC0               	movwi [0]fsr1
  4362  0196  083F               	movf	(_PidTi+1)^(0+128),w
  4363  0197  3FC1               	movwi [1]fsr1
  4364                           
  4365                           ;main.c: 72: sys_data_save();
  4366  0198  26D1  3180         	fcall	_sys_data_save
  4367  019A                     l4456:	
  4368                           
  4369                           ;main.c: 73: }
  4370                           ;main.c: 74: }
  4371                           ;main.c: 76: }
  4372                           ;main.c: 78: if(Event & (1<<3)){
  4373  019A  0020               	movlb	0	; select bank0
  4374  019B  19DA               	btfsc	_Event,3	;volatile
  4375                           
  4376                           ;main.c: 79: Event &= ~(1<<3);
  4377  019C  11DA               	bcf	_Event,3	;volatile
  4378                           
  4379                           ;main.c: 107: }
  4380                           ;main.c: 109: if(Event & (1<<0)){
  4381  019D  1C5A               	btfss	_Event,0	;volatile
  4382  019E  29B8               	goto	l4470
  4383                           
  4384                           ;main.c: 110: Event &= ~ (1<<0);
  4385  019F  105A               	bcf	_Event,0	;volatile
  4386                           
  4387                           ;main.c: 111: if(eusartRxCount>0){
  4388  01A0  087C               	movf	_eusartRxCount,w	;volatile
  4389  01A1  1903               	btfsc	3,2
  4390  01A2  29B6               	goto	l4468
  4391                           
  4392                           ;main.c: 112: m_mem_cpy_len(modbusBuf,eusartRxBuffer,eusartRxCount);
  4393  01A3  30A0               	movlw	low _modbusBuf
  4394  01A4  00F1               	movwf	m_mem_cpy_len@d
  4395  01A5  3001               	movlw	high _modbusBuf
  4396  01A6  00F2               	movwf	m_mem_cpy_len@d+1
  4397  01A7  3020               	movlw	low _eusartRxBuffer
  4398  01A8  00F3               	movwf	m_mem_cpy_len@s
  4399  01A9  3001               	movlw	high _eusartRxBuffer
  4400  01AA  00F4               	movwf	m_mem_cpy_len@s+1
  4401  01AB  087C               	movf	_eusartRxCount,w	;volatile
  4402  01AC  00F5               	movwf	m_mem_cpy_len@len
  4403  01AD  01F6               	clrf	m_mem_cpy_len@len+1
  4404  01AE  26B6               	fcall	_m_mem_cpy_len
  4405                           
  4406                           ;main.c: 113: modbus_response_process(modbusBuf,eusartRxCount);
  4407  01AF  087C               	movf	_eusartRxCount,w	;volatile
  4408  01B0  00B6               	movwf	modbus_response_process@rlen
  4409  01B1  30A0               	movlw	(low (_modbusBuf| (0+256)))& (0+255)
  4410  01B2  01B7               	clrf	modbus_response_process@rlen+1
  4411  01B3  318D  2575  3180   	fcall	_modbus_response_process
  4412  01B6                     l4468:	
  4413                           
  4414                           ;main.c: 115: }
  4415                           ;main.c: 117: uart_received_start();
  4416  01B6  27A3  3180         	fcall	_uart_received_start
  4417  01B8                     l4470:	
  4418                           
  4419                           ;main.c: 118: }
  4420                           ;main.c: 120: __nop();
  4421  01B8  0000               	nop
  4422  01B9  28F1               	goto	l4428
  4423  01BA                     __end_of_main:	
  4424  01BA                     __ptext35:	
  4425 ;; *************** function _adc_sample *****************
  4426 ;; Defined at:
  4427 ;;		line 127 in file "src/api/sample.c"
  4428 ;; Parameters:    Size  Location     Type
  4429 ;;  ch              1    wreg     unsigned char 
  4430 ;;  gfvr            1    3[COMMON] unsigned char 
  4431 ;;  num             1    4[COMMON] unsigned char 
  4432 ;; Auto vars:     Size  Location     Type
  4433 ;;  ch              1    6[COMMON] unsigned char 
  4434 ;;  t16             2   10[COMMON] unsigned int 
  4435 ;;  ret             2    7[COMMON] unsigned int 
  4436 ;;  i               1    9[COMMON] unsigned char 
  4437 ;; Return value:  Size  Location     Type
  4438 ;;                  2    3[COMMON] unsigned int 
  4439 ;; Registers used:
  4440 ;;		wreg, status,2, status,0, pclath, cstack
  4441 ;; Tracked objects:
  4442 ;;		On entry : 1F/0
  4443 ;;		On exit  : 0/0
  4444 ;;		Unchanged: 0/0
  4445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4446 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4447 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4448 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4449 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4450 ;;Total ram usage:        9 bytes
  4451 ;; Hardware stack levels used:    1
  4452 ;; Hardware stack levels required when called:    2
  4453 ;; This function calls:
  4454 ;;		_adc_init
  4455 ;;		_fvr_set_gain
  4456 ;; This function is called by:
  4457 ;;		_main
  4458 ;; This function uses a non-reentrant model
  4459 ;;
  4460                           
  4461                           
  4462                           ;psect for function _adc_sample
  4463  01BA                     _adc_sample:	
  4464                           
  4465                           ;incstack = 0
  4466                           ; Regs used in _adc_sample: [wreg+status,2+status,0+pclath+cstack]
  4467                           ;adc_sample@ch stored from wreg
  4468  01BA  00F6               	movwf	adc_sample@ch
  4469                           
  4470                           ;sample.c: 129: uint8_t i;
  4471                           ;sample.c: 130: uint16_t ret=0;
  4472  01BB  01F7               	clrf	adc_sample@ret
  4473  01BC  01F8               	clrf	adc_sample@ret+1
  4474                           
  4475                           ;sample.c: 133: fvr_set_gain(gfvr);
  4476  01BD  0873               	movf	adc_sample@gfvr,w
  4477  01BE  228A  3180         	fcall	_fvr_set_gain
  4478                           
  4479                           ;sample.c: 134: adc_init((adc_channel_t)ch);
  4480  01C0  0876               	movf	adc_sample@ch,w
  4481  01C1  227B  3180         	fcall	_adc_init
  4482                           
  4483                           ;sample.c: 135: _delay((unsigned long)((10)*(16000000/4000000.0)));
  4484  01C3  300D               	movlw	13
  4485  01C4  00F5               	movwf	??_adc_sample
  4486  01C5                     u3097:	
  4487  01C5  0BF5               	decfsz	??_adc_sample,f
  4488  01C6  29C5               	goto	u3097
  4489                           
  4490                           ;sample.c: 136: if(num>64)num=64;
  4491  01C7  3041               	movlw	65
  4492  01C8  0274               	subwf	adc_sample@num,w
  4493  01C9  1C03               	skipc
  4494  01CA  29CD               	goto	l3440
  4495  01CB  3040               	movlw	64
  4496  01CC  00F4               	movwf	adc_sample@num
  4497  01CD                     l3440:	
  4498                           
  4499                           ;sample.c: 137: for(i=0;i<num;i++){
  4500  01CD  01F9               	clrf	adc_sample@i
  4501  01CE                     l3448:	
  4502  01CE  0874               	movf	adc_sample@num,w
  4503  01CF  0279               	subwf	adc_sample@i,w
  4504  01D0  1803               	btfsc	3,0
  4505  01D1  29ED               	goto	l3450
  4506                           
  4507                           ;sample.c: 138: ADCON0bits.GO_nDONE = 1;
  4508  01D2  0021               	movlb	1	; select bank1
  4509  01D3  149D               	bsf	29,1	;volatile
  4510  01D4                     l606:	
  4511                           ;sample.c: 139: while (ADCON0bits.GO_nDONE);
  4512                           
  4513  01D4  189D               	btfsc	29,1	;volatile
  4514  01D5  29D4               	goto	l606
  4515                           
  4516                           ;sample.c: 140: __nop();
  4517  01D6  0000               	nop
  4518                           
  4519                           ;sample.c: 141: t16=ADRESH;
  4520  01D7  0021               	movlb	1	; select bank1
  4521  01D8  081C               	movf	28,w	;volatile
  4522  01D9  00FA               	movwf	adc_sample@t16
  4523  01DA  01FB               	clrf	adc_sample@t16+1
  4524                           
  4525                           ;sample.c: 142: t16<<=2;
  4526  01DB  35FA               	lslf	adc_sample@t16,f
  4527  01DC  0DFB               	rlf	adc_sample@t16+1,f
  4528  01DD  35FA               	lslf	adc_sample@t16,f
  4529  01DE  0DFB               	rlf	adc_sample@t16+1,f
  4530                           
  4531                           ;sample.c: 143: t16|=(ADRESL>>6);
  4532  01DF  081B               	movf	27,w	;volatile
  4533  01E0  00F5               	movwf	??_adc_sample
  4534  01E1  3006               	movlw	6
  4535  01E2                     u1945:	
  4536  01E2  36F5               	lsrf	??_adc_sample,f
  4537  01E3  0B89               	decfsz	9,f
  4538  01E4  29E2               	goto	u1945
  4539  01E5  0875               	movf	??_adc_sample,w
  4540  01E6  04FA               	iorwf	adc_sample@t16,f
  4541                           
  4542                           ;sample.c: 145: ret+=t16;
  4543  01E7  087A               	movf	adc_sample@t16,w
  4544  01E8  07F7               	addwf	adc_sample@ret,f
  4545  01E9  087B               	movf	adc_sample@t16+1,w
  4546  01EA  3DF8               	addwfc	adc_sample@ret+1,f
  4547  01EB  0AF9               	incf	adc_sample@i,f
  4548  01EC  29CE               	goto	l3448
  4549  01ED                     l3450:	
  4550                           
  4551                           ;sample.c: 150: return ret;
  4552  01ED  0878               	movf	adc_sample@ret+1,w
  4553  01EE  00F4               	movwf	?_adc_sample+1
  4554  01EF  0877               	movf	adc_sample@ret,w
  4555  01F0  00F3               	movwf	?_adc_sample
  4556  01F1  0008               	return
  4557  01F2                     __end_of_adc_sample:	
  4558  01F2                     __ptext38:	
  4559 ;; *************** function _SYSTEM_Initialize *****************
  4560 ;; Defined at:
  4561 ;;		line 68 in file "mcc_generated_files/mcc.c"
  4562 ;; Parameters:    Size  Location     Type
  4563 ;;		None
  4564 ;; Auto vars:     Size  Location     Type
  4565 ;;		None
  4566 ;; Return value:  Size  Location     Type
  4567 ;;                  1    wreg      void 
  4568 ;; Registers used:
  4569 ;;		wreg, status,2, status,0, pclath, cstack
  4570 ;; Tracked objects:
  4571 ;;		On entry : 0/0
  4572 ;;		On exit  : 1F/1
  4573 ;;		Unchanged: 0/0
  4574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4578 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4579 ;;Total ram usage:        0 bytes
  4580 ;; Hardware stack levels used:    1
  4581 ;; Hardware stack levels required when called:    3
  4582 ;; This function calls:
  4583 ;;		_ADC1_Initialize
  4584 ;;		_EUSART_Initialize
  4585 ;;		_FVR_Initialize
  4586 ;;		_OSCILLATOR_Initialize
  4587 ;;		_PIN_MANAGER_Initialize
  4588 ;;		_PWM1_Initialize
  4589 ;;		_PWM2_Initialize
  4590 ;;		_TMR2_Initialize
  4591 ;;		_WDT_Initialize
  4592 ;; This function is called by:
  4593 ;;		_main
  4594 ;; This function uses a non-reentrant model
  4595 ;;
  4596                           
  4597                           
  4598                           ;psect for function _SYSTEM_Initialize
  4599  01F2                     _SYSTEM_Initialize:	
  4600                           
  4601                           ;mcc.c: 71: PIN_MANAGER_Initialize();
  4602                           
  4603                           ;incstack = 0
  4604                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4605  01F2  2210  3180         	fcall	_PIN_MANAGER_Initialize
  4606                           
  4607                           ;mcc.c: 72: OSCILLATOR_Initialize();
  4608  01F4  220B  3180         	fcall	_OSCILLATOR_Initialize
  4609                           
  4610                           ;mcc.c: 73: WDT_Initialize();
  4611  01F6  2278  3180         	fcall	_WDT_Initialize
  4612                           
  4613                           ;mcc.c: 74: FVR_Initialize();
  4614  01F8  2207  3180         	fcall	_FVR_Initialize
  4615                           
  4616                           ;mcc.c: 75: PWM1_Initialize();
  4617  01FA  2249  3180         	fcall	_PWM1_Initialize
  4618                           
  4619                           ;mcc.c: 76: PWM2_Initialize();
  4620  01FC  2261  3180         	fcall	_PWM2_Initialize
  4621                           
  4622                           ;mcc.c: 77: ADC1_Initialize();
  4623  01FE  2203  3180         	fcall	_ADC1_Initialize
  4624                           
  4625                           ;mcc.c: 78: TMR2_Initialize();
  4626  0200  27BF  3180         	fcall	_TMR2_Initialize
  4627                           
  4628                           ;mcc.c: 79: EUSART_Initialize();
  4629  0202  2FB1               	ljmp	l3036
  4630  0203                     __end_of_SYSTEM_Initialize:	
  4631  0203                     __ptext49:	
  4632 ;; *************** function _ADC1_Initialize *****************
  4633 ;; Defined at:
  4634 ;;		line 64 in file "mcc_generated_files/adc1.c"
  4635 ;; Parameters:    Size  Location     Type
  4636 ;;		None
  4637 ;; Auto vars:     Size  Location     Type
  4638 ;;		None
  4639 ;; Return value:  Size  Location     Type
  4640 ;;                  1    wreg      void 
  4641 ;; Registers used:
  4642 ;;		wreg, status,2
  4643 ;; Tracked objects:
  4644 ;;		On entry : 1F/1B
  4645 ;;		On exit  : 1F/1
  4646 ;;		Unchanged: 0/0
  4647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4649 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4651 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4652 ;;Total ram usage:        0 bytes
  4653 ;; Hardware stack levels used:    1
  4654 ;; Hardware stack levels required when called:    1
  4655 ;; This function calls:
  4656 ;;		Nothing
  4657 ;; This function is called by:
  4658 ;;		_SYSTEM_Initialize
  4659 ;; This function uses a non-reentrant model
  4660 ;;
  4661                           
  4662                           
  4663                           ;psect for function _ADC1_Initialize
  4664  0203                     _ADC1_Initialize:	
  4665                           
  4666                           ;adc1.c: 69: ADCON0 = 0x01;
  4667                           
  4668                           ;incstack = 0
  4669                           ; Regs used in _ADC1_Initialize: [wreg+status,2]
  4670  0203  3001               	movlw	1
  4671  0204  0021               	movlb	1	; select bank1
  4672  0205  009D               	movwf	29	;volatile
  4673                           
  4674                           ;adc1.c: 72: ADCON1 = 0x63;
  4675                           
  4676                           ;adc1.c: 75: ADCON2 = 0x00;
  4677                           
  4678                           ;adc1.c: 78: ADRESL = 0x00;
  4679                           
  4680                           ;adc1.c: 81: ADRESH = 0x00;
  4681  0206  2F8C               	ljmp	PL44	;call to abstracted procedure
  4682  0207                     __end_of_ADC1_Initialize:	
  4683  0207                     __ptext47:	
  4684 ;; *************** function _FVR_Initialize *****************
  4685 ;; Defined at:
  4686 ;;		line 57 in file "mcc_generated_files/fvr.c"
  4687 ;; Parameters:    Size  Location     Type
  4688 ;;		None
  4689 ;; Auto vars:     Size  Location     Type
  4690 ;;		None
  4691 ;; Return value:  Size  Location     Type
  4692 ;;                  1    wreg      void 
  4693 ;; Registers used:
  4694 ;;		wreg
  4695 ;; Tracked objects:
  4696 ;;		On entry : 1F/1
  4697 ;;		On exit  : 1F/2
  4698 ;;		Unchanged: 0/0
  4699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4703 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4704 ;;Total ram usage:        0 bytes
  4705 ;; Hardware stack levels used:    1
  4706 ;; Hardware stack levels required when called:    1
  4707 ;; This function calls:
  4708 ;;		Nothing
  4709 ;; This function is called by:
  4710 ;;		_SYSTEM_Initialize
  4711 ;; This function uses a non-reentrant model
  4712 ;;
  4713                           
  4714                           
  4715                           ;psect for function _FVR_Initialize
  4716  0207                     _FVR_Initialize:	
  4717                           
  4718                           ;fvr.c: 60: FVRCON = 0x81;
  4719                           
  4720                           ;incstack = 0
  4721                           ; Regs used in _FVR_Initialize: [wreg]
  4722  0207  3081               	movlw	129
  4723  0208  0022               	movlb	2	; select bank2
  4724  0209  0097               	movwf	23	;volatile
  4725  020A  0008               	return
  4726  020B                     __end_of_FVR_Initialize:	
  4727  020B                     __ptext46:	
  4728 ;; *************** function _OSCILLATOR_Initialize *****************
  4729 ;; Defined at:
  4730 ;;		line 82 in file "mcc_generated_files/mcc.c"
  4731 ;; Parameters:    Size  Location     Type
  4732 ;;		None
  4733 ;; Auto vars:     Size  Location     Type
  4734 ;;		None
  4735 ;; Return value:  Size  Location     Type
  4736 ;;                  1    wreg      void 
  4737 ;; Registers used:
  4738 ;;		wreg, status,2
  4739 ;; Tracked objects:
  4740 ;;		On entry : 0/0
  4741 ;;		On exit  : 1F/1
  4742 ;;		Unchanged: 0/0
  4743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4745 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4747 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4748 ;;Total ram usage:        0 bytes
  4749 ;; Hardware stack levels used:    1
  4750 ;; Hardware stack levels required when called:    1
  4751 ;; This function calls:
  4752 ;;		Nothing
  4753 ;; This function is called by:
  4754 ;;		_SYSTEM_Initialize
  4755 ;; This function uses a non-reentrant model
  4756 ;;
  4757                           
  4758                           
  4759                           ;psect for function _OSCILLATOR_Initialize
  4760  020B                     _OSCILLATOR_Initialize:	
  4761                           
  4762                           ;mcc.c: 85: OSCCON = 0x78;
  4763                           
  4764                           ;incstack = 0
  4765                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4766  020B  3078               	movlw	120
  4767  020C  0021               	movlb	1	; select bank1
  4768  020D  0099               	movwf	25	;volatile
  4769                           
  4770                           ;mcc.c: 87: OSCTUNE = 0x00;
  4771  020E  0198               	clrf	24	;volatile
  4772  020F  0008               	return
  4773  0210                     __end_of_OSCILLATOR_Initialize:	
  4774  0210                     __ptext45:	
  4775 ;; *************** function _PIN_MANAGER_Initialize *****************
  4776 ;; Defined at:
  4777 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  4778 ;; Parameters:    Size  Location     Type
  4779 ;;		None
  4780 ;; Auto vars:     Size  Location     Type
  4781 ;;  state           1    1[COMMON] unsigned char 
  4782 ;; Return value:  Size  Location     Type
  4783 ;;                  1    wreg      void 
  4784 ;; Registers used:
  4785 ;;		wreg, status,2, status,0
  4786 ;; Tracked objects:
  4787 ;;		On entry : 0/0
  4788 ;;		On exit  : 0/0
  4789 ;;		Unchanged: 0/0
  4790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4792 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4794 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4795 ;;Total ram usage:        1 bytes
  4796 ;; Hardware stack levels used:    1
  4797 ;; Hardware stack levels required when called:    1
  4798 ;; This function calls:
  4799 ;;		Nothing
  4800 ;; This function is called by:
  4801 ;;		_SYSTEM_Initialize
  4802 ;; This function uses a non-reentrant model
  4803 ;;
  4804                           
  4805                           
  4806                           ;psect for function _PIN_MANAGER_Initialize
  4807  0210                     _PIN_MANAGER_Initialize:	
  4808                           
  4809                           ;pin_manager.c: 57: LATA = 0x00;
  4810                           
  4811                           ;incstack = 0
  4812                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
  4813  0210  0022               	movlb	2	; select bank2
  4814  0211  018C               	clrf	12	;volatile
  4815                           
  4816                           ;pin_manager.c: 58: LATC = 0x00;
  4817  0212  018E               	clrf	14	;volatile
  4818                           
  4819                           ;pin_manager.c: 63: TRISA = 0x0F;
  4820  0213  300F               	movlw	15
  4821  0214  0021               	movlb	1	; select bank1
  4822  0215  008C               	movwf	12	;volatile
  4823                           
  4824                           ;pin_manager.c: 64: TRISC = 0x1f;
  4825  0216  301F               	movlw	31
  4826  0217  008E               	movwf	14	;volatile
  4827                           
  4828                           ;pin_manager.c: 69: ANSELC = 0x0F;
  4829  0218  300F               	movlw	15
  4830  0219  0023               	movlb	3	; select bank3
  4831  021A  008E               	movwf	14	;volatile
  4832                           
  4833                           ;pin_manager.c: 70: ANSELA = 0x17;
  4834  021B  3017               	movlw	23
  4835  021C  008C               	movwf	12	;volatile
  4836                           
  4837                           ;pin_manager.c: 75: WPUA = 0x3B;
  4838  021D  303B               	movlw	59
  4839  021E  0024               	movlb	4	; select bank4
  4840  021F  008C               	movwf	12	;volatile
  4841                           
  4842                           ;pin_manager.c: 76: WPUC = 0x30;
  4843  0220  3030               	movlw	48
  4844  0221  008E               	movwf	14	;volatile
  4845                           
  4846                           ;pin_manager.c: 77: OPTION_REGbits.nWPUEN = 0;
  4847  0222  0021               	movlb	1	; select bank1
  4848  0223  1395               	bcf	21,7	;volatile
  4849                           
  4850                           ;pin_manager.c: 82: ODCONA = 0x00;
  4851  0224  0025               	movlb	5	; select bank5
  4852  0225  018C               	clrf	12	;volatile
  4853                           
  4854                           ;pin_manager.c: 83: ODCONC = 0x00;
  4855  0226  018E               	clrf	14	;volatile
  4856                           
  4857                           ;pin_manager.c: 90: bool state = (unsigned char)GIE;
  4858  0227  3000               	movlw	0
  4859  0228  1B8B               	btfsc	11,7	;volatile
  4860  0229  3001               	movlw	1
  4861  022A  00F1               	movwf	PIN_MANAGER_Initialize@state
  4862                           
  4863                           ;pin_manager.c: 91: GIE = 0;
  4864  022B  138B               	bcf	11,7	;volatile
  4865                           
  4866                           ;pin_manager.c: 92: PPSLOCK = 0x55;
  4867                           
  4868                           ;pin_manager.c: 93: PPSLOCK = 0xAA;
  4869  022C  2798  3180         	fcall	PL48	;call to abstracted procedure
  4870                           
  4871                           ;pin_manager.c: 94: PPSLOCKbits.PPSLOCKED = 0x00;
  4872  022E  100F               	bcf	15,0	;volatile
  4873                           
  4874                           ;pin_manager.c: 96: RXPPSbits.RXPPS = 0x14;
  4875  022F  0815               	movf	21,w	;volatile
  4876  0230  39E0               	andlw	-32
  4877  0231  3814               	iorlw	20
  4878  0232  0095               	movwf	21	;volatile
  4879                           
  4880                           ;pin_manager.c: 97: RA4PPSbits.RA4PPS = 0x04;
  4881  0233  003D               	movlb	29	; select bank29
  4882  0234  0814               	movf	20,w	;volatile
  4883  0235  39F0               	andlw	-16
  4884  0236  3804               	iorlw	4
  4885  0237  0094               	movwf	20	;volatile
  4886                           
  4887                           ;pin_manager.c: 98: RA5PPSbits.RA5PPS = 0x03;
  4888  0238  0815               	movf	21,w	;volatile
  4889  0239  39F0               	andlw	-16
  4890  023A  3803               	iorlw	3
  4891  023B  0095               	movwf	21	;volatile
  4892                           
  4893                           ;pin_manager.c: 99: RC5PPSbits.RC5PPS = 0x09;
  4894  023C  0825               	movf	37,w	;volatile
  4895  023D  39F0               	andlw	-16
  4896  023E  3809               	iorlw	9
  4897  023F  00A5               	movwf	37	;volatile
  4898                           
  4899                           ;pin_manager.c: 101: PPSLOCK = 0x55;
  4900                           
  4901                           ;pin_manager.c: 102: PPSLOCK = 0xAA;
  4902  0240  2798  3180         	fcall	PL48	;call to abstracted procedure
  4903                           
  4904                           ;pin_manager.c: 103: PPSLOCKbits.PPSLOCKED = 0x01;
  4905  0242  140F               	bsf	15,0	;volatile
  4906                           
  4907                           ;pin_manager.c: 105: GIE = state;
  4908  0243  1C71               	btfss	PIN_MANAGER_Initialize@state,0
  4909  0244  2A47               	goto	u1420
  4910  0245  178B               	bsf	11,7	;volatile
  4911  0246  0008               	return
  4912  0247                     u1420:	
  4913  0247  138B               	bcf	11,7	;volatile
  4914  0248  0008               	return
  4915  0249                     __end_of_PIN_MANAGER_Initialize:	
  4916  0249                     __ptext44:	
  4917 ;; *************** function _PWM1_Initialize *****************
  4918 ;; Defined at:
  4919 ;;		line 58 in file "mcc_generated_files/pwm1.c"
  4920 ;; Parameters:    Size  Location     Type
  4921 ;;		None
  4922 ;; Auto vars:     Size  Location     Type
  4923 ;;		None
  4924 ;; Return value:  Size  Location     Type
  4925 ;;                  1    wreg      void 
  4926 ;; Registers used:
  4927 ;;		wreg, status,2
  4928 ;; Tracked objects:
  4929 ;;		On entry : 1F/2
  4930 ;;		On exit  : 1F/1B
  4931 ;;		Unchanged: 0/0
  4932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4936 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4937 ;;Total ram usage:        0 bytes
  4938 ;; Hardware stack levels used:    1
  4939 ;; Hardware stack levels required when called:    1
  4940 ;; This function calls:
  4941 ;;		Nothing
  4942 ;; This function is called by:
  4943 ;;		_SYSTEM_Initialize
  4944 ;; This function uses a non-reentrant model
  4945 ;;
  4946                           
  4947                           
  4948                           ;psect for function _PWM1_Initialize
  4949  0249                     _PWM1_Initialize:	
  4950                           
  4951                           ;pwm1.c: 63: PWM1INTE = 0x00;
  4952                           
  4953                           ;incstack = 0
  4954                           ; Regs used in _PWM1_Initialize: [wreg+status,2]
  4955  0249  003B               	movlb	27	; select bank27
  4956  024A  019C               	clrf	28	;volatile
  4957                           
  4958                           ;pwm1.c: 66: PWM1INTF = 0x00;
  4959  024B  019D               	clrf	29	;volatile
  4960                           
  4961                           ;pwm1.c: 69: PWM1CLKCON = 0x00;
  4962  024C  019E               	clrf	30	;volatile
  4963                           
  4964                           ;pwm1.c: 72: PWM1LDCON = 0x80;
  4965  024D  3080               	movlw	128
  4966  024E  009F               	movwf	31	;volatile
  4967                           
  4968                           ;pwm1.c: 75: PWM1OFCON = 0x00;
  4969  024F  01A0               	clrf	32	;volatile
  4970                           
  4971                           ;pwm1.c: 78: PWM1PHH = 0x00;
  4972  0250  0192               	clrf	18	;volatile
  4973                           
  4974                           ;pwm1.c: 81: PWM1PHL = 0x00;
  4975  0251  0191               	clrf	17	;volatile
  4976                           
  4977                           ;pwm1.c: 84: PWM1DCH = 0x00;
  4978  0252  0194               	clrf	20	;volatile
  4979                           
  4980                           ;pwm1.c: 87: PWM1DCL = 0xa0;
  4981  0253  30A0               	movlw	160
  4982  0254  0093               	movwf	19	;volatile
  4983                           
  4984                           ;pwm1.c: 90: PWM1PRH = 0x06;
  4985  0255  3006               	movlw	6
  4986  0256  0096               	movwf	22	;volatile
  4987                           
  4988                           ;pwm1.c: 93: PWM1PRL = 0x3F;
  4989  0257  303F               	movlw	63
  4990  0258  0095               	movwf	21	;volatile
  4991                           
  4992                           ;pwm1.c: 96: PWM1OFH = 0x00;
  4993  0259  0198               	clrf	24	;volatile
  4994                           
  4995                           ;pwm1.c: 99: PWM1OFL = 0x01;
  4996  025A  3001               	movlw	1
  4997  025B  0097               	movwf	23	;volatile
  4998                           
  4999                           ;pwm1.c: 102: PWM1TMRH = 0x00;
  5000  025C  019A               	clrf	26	;volatile
  5001                           
  5002                           ;pwm1.c: 105: PWM1TMRL = 0x00;
  5003  025D  0199               	clrf	25	;volatile
  5004                           
  5005                           ;pwm1.c: 108: PWM1CON = 0x90;
  5006  025E  3090               	movlw	144
  5007  025F  009B               	movwf	27	;volatile
  5008  0260  0008               	return
  5009  0261                     __end_of_PWM1_Initialize:	
  5010  0261                     __ptext43:	
  5011 ;; *************** function _PWM2_Initialize *****************
  5012 ;; Defined at:
  5013 ;;		line 58 in file "mcc_generated_files/pwm2.c"
  5014 ;; Parameters:    Size  Location     Type
  5015 ;;		None
  5016 ;; Auto vars:     Size  Location     Type
  5017 ;;		None
  5018 ;; Return value:  Size  Location     Type
  5019 ;;                  1    wreg      void 
  5020 ;; Registers used:
  5021 ;;		wreg, status,2
  5022 ;; Tracked objects:
  5023 ;;		On entry : 1F/1B
  5024 ;;		On exit  : 1F/1B
  5025 ;;		Unchanged: 0/0
  5026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5030 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5031 ;;Total ram usage:        0 bytes
  5032 ;; Hardware stack levels used:    1
  5033 ;; Hardware stack levels required when called:    1
  5034 ;; This function calls:
  5035 ;;		Nothing
  5036 ;; This function is called by:
  5037 ;;		_SYSTEM_Initialize
  5038 ;; This function uses a non-reentrant model
  5039 ;;
  5040                           
  5041                           
  5042                           ;psect for function _PWM2_Initialize
  5043  0261                     _PWM2_Initialize:	
  5044                           
  5045                           ;pwm2.c: 63: PWM2INTE = 0x00;
  5046                           
  5047                           ;incstack = 0
  5048                           ; Regs used in _PWM2_Initialize: [wreg+status,2]
  5049  0261  01AC               	clrf	44	;volatile
  5050                           
  5051                           ;pwm2.c: 66: PWM2INTF = 0x00;
  5052  0262  01AD               	clrf	45	;volatile
  5053                           
  5054                           ;pwm2.c: 69: PWM2CLKCON = 0x00;
  5055  0263  01AE               	clrf	46	;volatile
  5056                           
  5057                           ;pwm2.c: 72: PWM2LDCON = 0x80;
  5058  0264  3080               	movlw	128
  5059  0265  00AF               	movwf	47	;volatile
  5060                           
  5061                           ;pwm2.c: 75: PWM2OFCON = 0x00;
  5062  0266  01B0               	clrf	48	;volatile
  5063                           
  5064                           ;pwm2.c: 78: PWM2PHH = 0x00;
  5065  0267  01A2               	clrf	34	;volatile
  5066                           
  5067                           ;pwm2.c: 81: PWM2PHL = 0x00;
  5068  0268  01A1               	clrf	33	;volatile
  5069                           
  5070                           ;pwm2.c: 84: PWM2DCH = 0x00;
  5071  0269  01A4               	clrf	36	;volatile
  5072                           
  5073                           ;pwm2.c: 87: PWM2DCL = 0xA0;
  5074  026A  30A0               	movlw	160
  5075  026B  00A3               	movwf	35	;volatile
  5076                           
  5077                           ;pwm2.c: 90: PWM2PRH = 0x06;
  5078  026C  3006               	movlw	6
  5079  026D  00A6               	movwf	38	;volatile
  5080                           
  5081                           ;pwm2.c: 93: PWM2PRL = 0x3F;
  5082  026E  303F               	movlw	63
  5083  026F  00A5               	movwf	37	;volatile
  5084                           
  5085                           ;pwm2.c: 96: PWM2OFH = 0x00;
  5086  0270  01A8               	clrf	40	;volatile
  5087                           
  5088                           ;pwm2.c: 99: PWM2OFL = 0x01;
  5089  0271  3001               	movlw	1
  5090  0272  00A7               	movwf	39	;volatile
  5091                           
  5092                           ;pwm2.c: 102: PWM2TMRH = 0x00;
  5093  0273  01AA               	clrf	42	;volatile
  5094                           
  5095                           ;pwm2.c: 105: PWM2TMRL = 0x00;
  5096  0274  01A9               	clrf	41	;volatile
  5097                           
  5098                           ;pwm2.c: 108: PWM2CON = 0x90;
  5099  0275  3090               	movlw	144
  5100  0276  00AB               	movwf	43	;volatile
  5101  0277  0008               	return
  5102  0278                     __end_of_PWM2_Initialize:	
  5103  0278                     __ptext39:	
  5104 ;; *************** function _WDT_Initialize *****************
  5105 ;; Defined at:
  5106 ;;		line 90 in file "mcc_generated_files/mcc.c"
  5107 ;; Parameters:    Size  Location     Type
  5108 ;;		None
  5109 ;; Auto vars:     Size  Location     Type
  5110 ;;		None
  5111 ;; Return value:  Size  Location     Type
  5112 ;;                  1    wreg      void 
  5113 ;; Registers used:
  5114 ;;		wreg
  5115 ;; Tracked objects:
  5116 ;;		On entry : 1F/1
  5117 ;;		On exit  : 1F/1
  5118 ;;		Unchanged: 0/0
  5119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5123 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5124 ;;Total ram usage:        0 bytes
  5125 ;; Hardware stack levels used:    1
  5126 ;; Hardware stack levels required when called:    1
  5127 ;; This function calls:
  5128 ;;		Nothing
  5129 ;; This function is called by:
  5130 ;;		_SYSTEM_Initialize
  5131 ;; This function uses a non-reentrant model
  5132 ;;
  5133                           
  5134                           
  5135                           ;psect for function _WDT_Initialize
  5136  0278                     _WDT_Initialize:	
  5137                           
  5138                           ;mcc.c: 93: WDTCON = 0x16;
  5139                           
  5140                           ;incstack = 0
  5141                           ; Regs used in _WDT_Initialize: [wreg]
  5142  0278  3016               	movlw	22
  5143  0279  0097               	movwf	23	;volatile
  5144  027A  0008               	return
  5145  027B                     __end_of_WDT_Initialize:	
  5146  027B                     __ptext37:	
  5147 ;; *************** function _adc_init *****************
  5148 ;; Defined at:
  5149 ;;		line 83 in file "src/api/sample.c"
  5150 ;; Parameters:    Size  Location     Type
  5151 ;;  ch              1    wreg     enum E4977
  5152 ;; Auto vars:     Size  Location     Type
  5153 ;;  ch              1    2[COMMON] enum E4977
  5154 ;; Return value:  Size  Location     Type
  5155 ;;                  1    wreg      void 
  5156 ;; Registers used:
  5157 ;;		wreg, status,2, status,0
  5158 ;; Tracked objects:
  5159 ;;		On entry : 1F/2
  5160 ;;		On exit  : 1F/1
  5161 ;;		Unchanged: 0/0
  5162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5164 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5165 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5166 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5167 ;;Total ram usage:        2 bytes
  5168 ;; Hardware stack levels used:    1
  5169 ;; Hardware stack levels required when called:    1
  5170 ;; This function calls:
  5171 ;;		Nothing
  5172 ;; This function is called by:
  5173 ;;		_adc_sample
  5174 ;; This function uses a non-reentrant model
  5175 ;;
  5176                           
  5177                           
  5178                           ;psect for function _adc_init
  5179  027B                     _adc_init:	
  5180                           
  5181                           ;incstack = 0
  5182                           ; Regs used in _adc_init: [wreg+status,2+status,0]
  5183                           ;adc_init@ch stored from wreg
  5184  027B  00F2               	movwf	adc_init@ch
  5185  027C                     l587:	
  5186                           ;sample.c: 85: while (ADCON0bits.GO_nDONE);
  5187                           
  5188  027C  0021               	movlb	1	; select bank1
  5189  027D  189D               	btfsc	29,1	;volatile
  5190  027E  2A7C               	goto	l587
  5191                           
  5192                           ;sample.c: 86: ADCON0bits.CHS = ch;
  5193  027F  0872               	movf	adc_init@ch,w
  5194  0280  00F1               	movwf	??_adc_init
  5195  0281  0DF1               	rlf	??_adc_init,f
  5196  0282  0DF1               	rlf	??_adc_init,f
  5197  0283  081D               	movf	29,w	;volatile
  5198  0284  0671               	xorwf	??_adc_init,w
  5199  0285  3983               	andlw	-125
  5200  0286  0671               	xorwf	??_adc_init,w
  5201  0287  009D               	movwf	29	;volatile
  5202                           
  5203                           ;sample.c: 87: ADCON0bits.ADON = 1;
  5204  0288  141D               	bsf	29,0	;volatile
  5205                           
  5206                           ;sample.c: 88: ADCON1 = 0x63;
  5207                           
  5208                           ;sample.c: 89: ADCON2 = 0x00;
  5209                           
  5210                           ;sample.c: 90: ADRESL = 0x00;
  5211                           
  5212                           ;sample.c: 91: ADRESH = 0x00;
  5213  0289  2F8C               	ljmp	PL44	;call to abstracted procedure
  5214  028A                     __end_of_adc_init:	
  5215  028A                     __ptext36:	
  5216 ;; *************** function _fvr_set_gain *****************
  5217 ;; Defined at:
  5218 ;;		line 74 in file "src/api/sample.c"
  5219 ;; Parameters:    Size  Location     Type
  5220 ;;  g               1    wreg     unsigned char 
  5221 ;; Auto vars:     Size  Location     Type
  5222 ;;  g               1    2[COMMON] unsigned char 
  5223 ;;  t8              1    1[COMMON] unsigned char 
  5224 ;; Return value:  Size  Location     Type
  5225 ;;                  1    wreg      void 
  5226 ;; Registers used:
  5227 ;;		wreg, status,2, status,0
  5228 ;; Tracked objects:
  5229 ;;		On entry : 1F/0
  5230 ;;		On exit  : 1F/2
  5231 ;;		Unchanged: 0/0
  5232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5234 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5236 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5237 ;;Total ram usage:        2 bytes
  5238 ;; Hardware stack levels used:    1
  5239 ;; Hardware stack levels required when called:    1
  5240 ;; This function calls:
  5241 ;;		Nothing
  5242 ;; This function is called by:
  5243 ;;		_adc_sample
  5244 ;; This function uses a non-reentrant model
  5245 ;;
  5246                           
  5247                           
  5248                           ;psect for function _fvr_set_gain
  5249  028A                     _fvr_set_gain:	
  5250                           
  5251                           ;incstack = 0
  5252                           ; Regs used in _fvr_set_gain: [wreg+status,2+status,0]
  5253                           ;fvr_set_gain@g stored from wreg
  5254  028A  00F2               	movwf	fvr_set_gain@g
  5255                           
  5256                           ;sample.c: 76: uint8_t t8=0x80;
  5257  028B  3080               	movlw	128
  5258  028C  00F1               	movwf	fvr_set_gain@t8
  5259                           
  5260                           ;sample.c: 77: if(g>3)g=3;
  5261  028D  3004               	movlw	4
  5262  028E  0272               	subwf	fvr_set_gain@g,w
  5263  028F  1C03               	skipc
  5264  0290  2A93               	goto	l3064
  5265  0291  3003               	movlw	3
  5266  0292  00F2               	movwf	fvr_set_gain@g
  5267  0293                     l3064:	
  5268                           
  5269                           ;sample.c: 78: t8|=g;
  5270  0293  0872               	movf	fvr_set_gain@g,w
  5271  0294  04F1               	iorwf	fvr_set_gain@t8,f
  5272                           
  5273                           ;sample.c: 79: FVRCON = t8;
  5274  0295  0871               	movf	fvr_set_gain@t8,w
  5275  0296  0022               	movlb	2	; select bank2
  5276  0297  0097               	movwf	23	;volatile
  5277  0298                     l581:	
  5278                           ;sample.c: 80: while(!(FVRCONbits.FVRRDY));
  5279                           
  5280  0298  1B17               	btfsc	23,6	;volatile
  5281  0299  0008               	return
  5282  029A  2A98               	goto	l581
  5283  029B                     __end_of_fvr_set_gain:	
  5284  029B                     __ptext30:	
  5285 ;; *************** function _calc_rs_lo_avg *****************
  5286 ;; Defined at:
  5287 ;;		line 382 in file "src/api/sample.c"
  5288 ;; Parameters:    Size  Location     Type
  5289 ;;  x               2    9[COMMON] unsigned int 
  5290 ;; Auto vars:     Size  Location     Type
  5291 ;;  t32             4    7[BANK0 ] unsigned long 
  5292 ;;  i               1   11[BANK0 ] unsigned char 
  5293 ;; Return value:  Size  Location     Type
  5294 ;;                  2    9[COMMON] unsigned int 
  5295 ;; Registers used:
  5296 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5297 ;; Tracked objects:
  5298 ;;		On entry : 1F/0
  5299 ;;		On exit  : 1F/0
  5300 ;;		Unchanged: 0/0
  5301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5302 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5303 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5304 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5305 ;;      Totals:         2       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5306 ;;Total ram usage:        9 bytes
  5307 ;; Hardware stack levels used:    1
  5308 ;; Hardware stack levels required when called:    2
  5309 ;; This function calls:
  5310 ;;		___lldiv
  5311 ;; This function is called by:
  5312 ;;		_main
  5313 ;; This function uses a non-reentrant model
  5314 ;;
  5315                           
  5316                           
  5317                           ;psect for function _calc_rs_lo_avg
  5318  029B                     _calc_rs_lo_avg:	
  5319                           
  5320                           ;sample.c: 384: uint8_t i;
  5321                           ;sample.c: 385: uint32_t t32=0;
  5322                           
  5323                           ;incstack = 0
  5324                           ; Regs used in _calc_rs_lo_avg: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5325  029B  01A7               	clrf	calc_rs_lo_avg@t32
  5326  029C  01A8               	clrf	calc_rs_lo_avg@t32+1
  5327  029D  01A9               	clrf	calc_rs_lo_avg@t32+2
  5328  029E  01AA               	clrf	calc_rs_lo_avg@t32+3
  5329                           
  5330                           ;sample.c: 387: for(i=0;i<4;i++){
  5331  029F  01AB               	clrf	calc_rs_lo_avg@i
  5332  02A0                     l4284:	
  5333                           
  5334                           ;sample.c: 388: rsLoAvgBuf[i]=rsLoAvgBuf[i+1];
  5335  02A0  352B               	lslf	calc_rs_lo_avg@i,w
  5336  02A1  3EAE               	addlw	(low ((_rsLoAvgBuf| 0+2)))& (0+255)
  5337  02A2  0086               	movwf	6
  5338  02A3  0187               	clrf	7
  5339  02A4  352B               	lslf	calc_rs_lo_avg@i,w
  5340  02A5  3EAC               	addlw	(low (_rsLoAvgBuf| 0))& (0+255)
  5341  02A6  0084               	movwf	4
  5342  02A7  0185               	clrf	5
  5343  02A8  3F40               	moviw [0]fsr1
  5344  02A9  3F80               	movwi [0]fsr0
  5345  02AA  3F41               	moviw [1]fsr1
  5346  02AB  3F81               	movwi [1]fsr0
  5347                           
  5348                           ;sample.c: 389: t32+=rsLoAvgBuf[i];
  5349  02AC  352B               	lslf	calc_rs_lo_avg@i,w
  5350  02AD  3EAC               	addlw	(low (_rsLoAvgBuf| 0))& (0+255)
  5351  02AE  0086               	movwf	6
  5352  02AF  3F40               	moviw [0]fsr1
  5353  02B0  00A5               	movwf	??_calc_rs_lo_avg
  5354  02B1  3F41               	moviw [1]fsr1
  5355  02B2  00A6               	movwf	??_calc_rs_lo_avg+1
  5356  02B3  0825               	movf	??_calc_rs_lo_avg,w
  5357  02B4  07A7               	addwf	calc_rs_lo_avg@t32,f
  5358  02B5  0826               	movf	??_calc_rs_lo_avg+1,w
  5359  02B6  3DA8               	addwfc	calc_rs_lo_avg@t32+1,f
  5360  02B7  3000               	movlw	0
  5361  02B8  3DA9               	addwfc	calc_rs_lo_avg@t32+2,f
  5362  02B9  3DAA               	addwfc	calc_rs_lo_avg@t32+3,f
  5363  02BA  3004               	movlw	4
  5364  02BB  0AAB               	incf	calc_rs_lo_avg@i,f
  5365  02BC  022B               	subwf	calc_rs_lo_avg@i,w
  5366  02BD  1C03               	skipc
  5367  02BE  2AA0               	goto	l4284
  5368                           
  5369                           ;sample.c: 390: }
  5370                           ;sample.c: 391: rsLoAvgBuf[i]=x;
  5371  02BF  352B               	lslf	calc_rs_lo_avg@i,w
  5372  02C0  3EAC               	addlw	(low (_rsLoAvgBuf| 0))& (0+255)
  5373  02C1  0086               	movwf	6
  5374  02C2  0879               	movf	calc_rs_lo_avg@x,w
  5375  02C3  3FC0               	movwi [0]fsr1
  5376  02C4  087A               	movf	calc_rs_lo_avg@x+1,w
  5377  02C5  3FC1               	movwi [1]fsr1
  5378                           
  5379                           ;sample.c: 392: t32+=x;
  5380  02C6  0879               	movf	calc_rs_lo_avg@x,w
  5381  02C7  07A7               	addwf	calc_rs_lo_avg@t32,f
  5382  02C8  087A               	movf	calc_rs_lo_avg@x+1,w
  5383  02C9  3DA8               	addwfc	calc_rs_lo_avg@t32+1,f
  5384  02CA  3000               	movlw	0
  5385  02CB  3DA9               	addwfc	calc_rs_lo_avg@t32+2,f
  5386  02CC  3DAA               	addwfc	calc_rs_lo_avg@t32+3,f
  5387                           
  5388                           ;sample.c: 393: t32/=5;
  5389  02CD  3005               	movlw	5
  5390  02CE  00F1               	movwf	___lldiv@divisor
  5391  02CF  01F2               	clrf	___lldiv@divisor+1
  5392  02D0  01F3               	clrf	___lldiv@divisor+2
  5393  02D1  01F4               	clrf	___lldiv@divisor+3
  5394  02D2  082A               	movf	calc_rs_lo_avg@t32+3,w
  5395  02D3  00F8               	movwf	___lldiv@dividend+3
  5396  02D4  0829               	movf	calc_rs_lo_avg@t32+2,w
  5397  02D5  00F7               	movwf	___lldiv@dividend+2
  5398  02D6  0828               	movf	calc_rs_lo_avg@t32+1,w
  5399  02D7  00F6               	movwf	___lldiv@dividend+1
  5400  02D8  0827               	movf	calc_rs_lo_avg@t32,w
  5401  02D9  00F5               	movwf	___lldiv@dividend
  5402  02DA  25F0               	fcall	___lldiv
  5403  02DB  0874               	movf	?___lldiv+3,w
  5404  02DC  00AA               	movwf	calc_rs_lo_avg@t32+3
  5405  02DD  0873               	movf	?___lldiv+2,w
  5406  02DE  00A9               	movwf	calc_rs_lo_avg@t32+2
  5407  02DF  0872               	movf	?___lldiv+1,w
  5408  02E0  00A8               	movwf	calc_rs_lo_avg@t32+1
  5409  02E1  0871               	movf	?___lldiv,w
  5410  02E2  00A7               	movwf	calc_rs_lo_avg@t32
  5411                           
  5412                           ;sample.c: 394: return (uint16_t)t32;
  5413  02E3  0828               	movf	calc_rs_lo_avg@t32+1,w
  5414  02E4  00FA               	movwf	?_calc_rs_lo_avg+1
  5415  02E5  0827               	movf	calc_rs_lo_avg@t32,w
  5416  02E6  00F9               	movwf	?_calc_rs_lo_avg
  5417  02E7  0008               	return
  5418  02E8                     __end_of_calc_rs_lo_avg:	
  5419  02E8                     __ptext29:	
  5420 ;; *************** function _calc_temp_rc *****************
  5421 ;; Defined at:
  5422 ;;		line 180 in file "src/api/sample.c"
  5423 ;; Parameters:    Size  Location     Type
  5424 ;;		None
  5425 ;; Auto vars:     Size  Location     Type
  5426 ;;  y               4   17[BANK0 ] unsigned long 
  5427 ;;  x               4   13[BANK0 ] unsigned long 
  5428 ;; Return value:  Size  Location     Type
  5429 ;;                  4    5[BANK0 ] unsigned long 
  5430 ;; Registers used:
  5431 ;;		wreg, status,2, status,0, pclath, cstack
  5432 ;; Tracked objects:
  5433 ;;		On entry : 1F/0
  5434 ;;		On exit  : 1F/0
  5435 ;;		Unchanged: 0/0
  5436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5437 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5438 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5439 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5440 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5441 ;;Total ram usage:       16 bytes
  5442 ;; Hardware stack levels used:    1
  5443 ;; Hardware stack levels required when called:    2
  5444 ;; This function calls:
  5445 ;;		___lldiv
  5446 ;;		___lmul
  5447 ;; This function is called by:
  5448 ;;		_main
  5449 ;; This function uses a non-reentrant model
  5450 ;;
  5451                           
  5452                           
  5453                           ;psect for function _calc_temp_rc
  5454  02E8                     _calc_temp_rc:	
  5455                           
  5456                           ;sample.c: 183: uint32_t x,y;
  5457                           ;sample.c: 184: x=300000UL;
  5458                           
  5459                           ;incstack = 0
  5460                           ; Regs used in _calc_temp_rc: [wreg+status,2+status,0+pclath+cstack]
  5461  02E8  3004               	movlw	4
  5462  02E9  01B0               	clrf	calc_temp_rc@x+3
  5463  02EA  00AF               	movwf	calc_temp_rc@x+2
  5464  02EB  3093               	movlw	147
  5465  02EC  00AE               	movwf	calc_temp_rc@x+1
  5466  02ED  30E0               	movlw	224
  5467  02EE  00AD               	movwf	calc_temp_rc@x
  5468                           
  5469                           ;sample.c: 185: x=x*rtAdcValueRcLo;
  5470  02EF  084E               	movf	_rtAdcValueRcLo,w
  5471  02F0  00F1               	movwf	___lmul@multiplier
  5472  02F1  084F               	movf	_rtAdcValueRcLo+1,w
  5473  02F2  00F2               	movwf	___lmul@multiplier+1
  5474  02F3  01F3               	clrf	___lmul@multiplier+2
  5475  02F4  01F4               	clrf	___lmul@multiplier+3
  5476  02F5  0830               	movf	calc_temp_rc@x+3,w
  5477  02F6  00F8               	movwf	___lmul@multiplicand+3
  5478  02F7  082F               	movf	calc_temp_rc@x+2,w
  5479  02F8  00F7               	movwf	___lmul@multiplicand+2
  5480  02F9  082E               	movf	calc_temp_rc@x+1,w
  5481  02FA  00F6               	movwf	___lmul@multiplicand+1
  5482  02FB  082D               	movf	calc_temp_rc@x,w
  5483  02FC  00F5               	movwf	___lmul@multiplicand
  5484  02FD  25C8  3180         	fcall	___lmul
  5485  02FF  0874               	movf	?___lmul+3,w
  5486  0300  00B0               	movwf	calc_temp_rc@x+3
  5487  0301  0873               	movf	?___lmul+2,w
  5488  0302  00AF               	movwf	calc_temp_rc@x+2
  5489  0303  0872               	movf	?___lmul+1,w
  5490  0304  00AE               	movwf	calc_temp_rc@x+1
  5491  0305  0871               	movf	?___lmul,w
  5492  0306  00AD               	movwf	calc_temp_rc@x
  5493                           
  5494                           ;sample.c: 188: y=rtAdcValueRcHi;
  5495  0307  084C               	movf	_rtAdcValueRcHi,w
  5496  0308  00B1               	movwf	calc_temp_rc@y
  5497  0309  084D               	movf	_rtAdcValueRcHi+1,w
  5498  030A  00B2               	movwf	calc_temp_rc@y+1
  5499  030B  300C               	movlw	12
  5500  030C  01B3               	clrf	calc_temp_rc@y+2
  5501  030D  01B4               	clrf	calc_temp_rc@y+3
  5502                           
  5503                           ;sample.c: 189: y=y*3140;
  5504  030E  01F4               	clrf	___lmul@multiplier+3
  5505  030F  01F3               	clrf	___lmul@multiplier+2
  5506  0310  00F2               	movwf	___lmul@multiplier+1
  5507  0311  3044               	movlw	68
  5508  0312  00F1               	movwf	___lmul@multiplier
  5509  0313  0834               	movf	calc_temp_rc@y+3,w
  5510  0314  00F8               	movwf	___lmul@multiplicand+3
  5511  0315  0833               	movf	calc_temp_rc@y+2,w
  5512  0316  00F7               	movwf	___lmul@multiplicand+2
  5513  0317  0832               	movf	calc_temp_rc@y+1,w
  5514  0318  00F6               	movwf	___lmul@multiplicand+1
  5515  0319  0831               	movf	calc_temp_rc@y,w
  5516  031A  00F5               	movwf	___lmul@multiplicand
  5517  031B  25C8  3180         	fcall	___lmul
  5518  031D  0874               	movf	?___lmul+3,w
  5519  031E  00B4               	movwf	calc_temp_rc@y+3
  5520  031F  0873               	movf	?___lmul+2,w
  5521  0320  00B3               	movwf	calc_temp_rc@y+2
  5522  0321  0872               	movf	?___lmul+1,w
  5523  0322  00B2               	movwf	calc_temp_rc@y+1
  5524  0323  0871               	movf	?___lmul,w
  5525  0324  00B1               	movwf	calc_temp_rc@y
  5526                           
  5527                           ;sample.c: 190: y=y/100;
  5528  0325  3064               	movlw	100
  5529  0326  00F1               	movwf	___lldiv@divisor
  5530  0327  01F2               	clrf	___lldiv@divisor+1
  5531  0328  01F3               	clrf	___lldiv@divisor+2
  5532  0329  01F4               	clrf	___lldiv@divisor+3
  5533  032A  0834               	movf	calc_temp_rc@y+3,w
  5534  032B  00F8               	movwf	___lldiv@dividend+3
  5535  032C  0833               	movf	calc_temp_rc@y+2,w
  5536  032D  00F7               	movwf	___lldiv@dividend+2
  5537  032E  0832               	movf	calc_temp_rc@y+1,w
  5538  032F  00F6               	movwf	___lldiv@dividend+1
  5539  0330  0831               	movf	calc_temp_rc@y,w
  5540  0331  00F5               	movwf	___lldiv@dividend
  5541  0332  25F0  3180         	fcall	___lldiv
  5542  0334  2765  3180         	fcall	PL22	;call to abstracted procedure
  5543                           
  5544                           ;sample.c: 191: y=y-rtAdcValueRcLo;
  5545  0336  084E               	movf	_rtAdcValueRcLo,w
  5546  0337  00A9               	movwf	??_calc_temp_rc
  5547  0338  084F               	movf	_rtAdcValueRcLo+1,w
  5548  0339  00AA               	movwf	??_calc_temp_rc+1
  5549  033A  01AB               	clrf	??_calc_temp_rc+2
  5550  033B  01AC               	clrf	??_calc_temp_rc+3
  5551  033C  0829               	movf	??_calc_temp_rc,w
  5552  033D  02B1               	subwf	calc_temp_rc@y,f
  5553  033E  082A               	movf	??_calc_temp_rc+1,w
  5554  033F  3BB2               	subwfb	calc_temp_rc@y+1,f
  5555  0340  082B               	movf	??_calc_temp_rc+2,w
  5556  0341  3BB3               	subwfb	calc_temp_rc@y+2,f
  5557  0342  082C               	movf	??_calc_temp_rc+3,w
  5558  0343  3BB4               	subwfb	calc_temp_rc@y+3,f
  5559                           
  5560                           ;sample.c: 194: y=x/y;
  5561  0344  0834               	movf	calc_temp_rc@y+3,w
  5562  0345  00F4               	movwf	___lldiv@divisor+3
  5563  0346  0833               	movf	calc_temp_rc@y+2,w
  5564  0347  00F3               	movwf	___lldiv@divisor+2
  5565  0348  0832               	movf	calc_temp_rc@y+1,w
  5566  0349  00F2               	movwf	___lldiv@divisor+1
  5567  034A  0831               	movf	calc_temp_rc@y,w
  5568  034B  00F1               	movwf	___lldiv@divisor
  5569  034C  0830               	movf	calc_temp_rc@x+3,w
  5570  034D  00F8               	movwf	___lldiv@dividend+3
  5571  034E  082F               	movf	calc_temp_rc@x+2,w
  5572  034F  00F7               	movwf	___lldiv@dividend+2
  5573  0350  082E               	movf	calc_temp_rc@x+1,w
  5574  0351  00F6               	movwf	___lldiv@dividend+1
  5575  0352  082D               	movf	calc_temp_rc@x,w
  5576  0353  00F5               	movwf	___lldiv@dividend
  5577  0354  25F0  3180         	fcall	___lldiv
  5578  0356  2765  3180         	fcall	PL22	;call to abstracted procedure
  5579                           
  5580                           ;sample.c: 195: if(y<2000)y=2000;
  5581  0358  0834               	movf	calc_temp_rc@y+3,w
  5582  0359  1D03               	btfss	3,2
  5583  035A  2B6A               	goto	l4174
  5584  035B  0833               	movf	calc_temp_rc@y+2,w
  5585  035C  1D03               	btfss	3,2
  5586  035D  2B6A               	goto	l4174
  5587  035E  30D0               	movlw	208
  5588  035F  0231               	subwf	calc_temp_rc@y,w
  5589  0360  3007               	movlw	7
  5590  0361  3B32               	subwfb	calc_temp_rc@y+1,w
  5591  0362  1803               	btfsc	3,0
  5592  0363  2B6A               	goto	l4174
  5593  0364  3007               	movlw	7
  5594  0365  01B4               	clrf	calc_temp_rc@y+3
  5595  0366  01B3               	clrf	calc_temp_rc@y+2
  5596  0367  00B2               	movwf	calc_temp_rc@y+1
  5597  0368  30D0               	movlw	208
  5598  0369  00B1               	movwf	calc_temp_rc@y
  5599  036A                     l4174:	
  5600                           
  5601                           ;sample.c: 196: if(y>25000)y=25000;
  5602  036A  0834               	movf	calc_temp_rc@y+3,w
  5603  036B  1D03               	btfss	3,2
  5604  036C  2B76               	goto	l4176
  5605  036D  0833               	movf	calc_temp_rc@y+2,w
  5606  036E  1D03               	btfss	3,2
  5607  036F  2B76               	goto	l4176
  5608  0370  30A9               	movlw	169
  5609  0371  0231               	subwf	calc_temp_rc@y,w
  5610  0372  3061               	movlw	97
  5611  0373  3B32               	subwfb	calc_temp_rc@y+1,w
  5612  0374  1C03               	btfss	3,0
  5613  0375  2B7C               	goto	l619
  5614  0376                     l4176:	
  5615  0376  3061               	movlw	97
  5616  0377  01B4               	clrf	calc_temp_rc@y+3
  5617  0378  01B3               	clrf	calc_temp_rc@y+2
  5618  0379  00B2               	movwf	calc_temp_rc@y+1
  5619  037A  30A8               	movlw	168
  5620  037B  00B1               	movwf	calc_temp_rc@y
  5621  037C                     l619:	
  5622                           
  5623                           ;sample.c: 198: return y;
  5624  037C  0834               	movf	calc_temp_rc@y+3,w
  5625  037D  00A8               	movwf	?_calc_temp_rc+3
  5626  037E  0833               	movf	calc_temp_rc@y+2,w
  5627  037F  00A7               	movwf	?_calc_temp_rc+2
  5628  0380  0832               	movf	calc_temp_rc@y+1,w
  5629  0381  00A6               	movwf	?_calc_temp_rc+1
  5630  0382  0831               	movf	calc_temp_rc@y,w
  5631  0383  00A5               	movwf	?_calc_temp_rc
  5632  0384  0008               	return
  5633  0385                     __end_of_calc_temp_rc:	
  5634  0385                     __ptext11:	
  5635 ;; *************** function _pid_pwm1_idrv_b_b *****************
  5636 ;; Defined at:
  5637 ;;		line 217 in file "src/api/sample.c"
  5638 ;; Parameters:    Size  Location     Type
  5639 ;;		None
  5640 ;; Auto vars:     Size  Location     Type
  5641 ;;  t32             4   18[BANK0 ] long 
  5642 ;; Return value:  Size  Location     Type
  5643 ;;                  1    wreg      void 
  5644 ;; Registers used:
  5645 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5646 ;; Tracked objects:
  5647 ;;		On entry : 1F/0
  5648 ;;		On exit  : 1E/0
  5649 ;;		Unchanged: 0/0
  5650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5652 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5653 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5654 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5655 ;;Total ram usage:        5 bytes
  5656 ;; Hardware stack levels used:    1
  5657 ;; Hardware stack levels required when called:    3
  5658 ;; This function calls:
  5659 ;;		___aldiv
  5660 ;;		___lmul
  5661 ;;		_set_idrv_pwm1_duty
  5662 ;; This function is called by:
  5663 ;;		_main
  5664 ;; This function uses a non-reentrant model
  5665 ;;
  5666                           
  5667                           
  5668                           ;psect for function _pid_pwm1_idrv_b_b
  5669  0385                     _pid_pwm1_idrv_b_b:	
  5670                           
  5671                           ;sample.c: 219: int32_t t32;
  5672                           ;sample.c: 220: t32=(resRs-resRc);
  5673                           
  5674                           ;incstack = 0
  5675                           ; Regs used in _pid_pwm1_idrv_b_b: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5676  0385  0021               	movlb	1	; select bank1
  5677  0386  086F               	movf	(_resRs+3)^(0+128),w
  5678  0387  0020               	movlb	0	; select bank0
  5679  0388  00B5               	movwf	pid_pwm1_idrv_b_b@t32+3
  5680  0389  0021               	movlb	1	; select bank1
  5681  038A  086E               	movf	(_resRs+2)^(0+128),w
  5682  038B  0020               	movlb	0	; select bank0
  5683  038C  00B4               	movwf	pid_pwm1_idrv_b_b@t32+2
  5684  038D  0021               	movlb	1	; select bank1
  5685  038E  086D               	movf	(_resRs+1)^(0+128),w
  5686  038F  0020               	movlb	0	; select bank0
  5687  0390  00B3               	movwf	pid_pwm1_idrv_b_b@t32+1
  5688  0391  0021               	movlb	1	; select bank1
  5689  0392  086C               	movf	_resRs^(0+128),w
  5690  0393  0020               	movlb	0	; select bank0
  5691  0394  00B2               	movwf	pid_pwm1_idrv_b_b@t32
  5692  0395  0860               	movf	_resRc,w
  5693  0396  02B2               	subwf	pid_pwm1_idrv_b_b@t32,f
  5694  0397  0861               	movf	_resRc+1,w
  5695  0398  3BB3               	subwfb	pid_pwm1_idrv_b_b@t32+1,f
  5696  0399  0862               	movf	_resRc+2,w
  5697  039A  3BB4               	subwfb	pid_pwm1_idrv_b_b@t32+2,f
  5698  039B  0863               	movf	_resRc+3,w
  5699  039C  3BB5               	subwfb	pid_pwm1_idrv_b_b@t32+3,f
  5700                           
  5701                           ;sample.c: 221: switch(pidBbSm){
  5702  039D  2CF4               	goto	l4228
  5703  039E                     l4182:	
  5704                           
  5705                           ;sample.c: 224: case 1:
  5706                           ;sample.c: 225: pidTestNum=0;
  5707  039E  01DD               	clrf	_pidTestNum
  5708  039F                     l4184:	
  5709                           
  5710                           ;sample.c: 226: set_idrv_pwm1_duty(1200);
  5711  039F  30B0               	movlw	176
  5712  03A0  00F3               	movwf	set_idrv_pwm1_duty@duty
  5713  03A1  3004               	movlw	4
  5714  03A2  00F4               	movwf	set_idrv_pwm1_duty@duty+1
  5715  03A3  262F  3180         	fcall	_set_idrv_pwm1_duty
  5716                           
  5717                           ;sample.c: 227: pidBbSm=2;
  5718  03A5  3002               	movlw	2
  5719  03A6  2CF1               	goto	L6
  5720  03A7                     l4188:	
  5721                           ;sample.c: 228: break;
  5722                           
  5723                           
  5724                           ;sample.c: 230: if(t32>5000){
  5725  03A7  1BB5               	btfsc	pid_pwm1_idrv_b_b@t32+3,7
  5726  03A8  2CFE               	goto	l4230
  5727  03A9  0835               	movf	pid_pwm1_idrv_b_b@t32+3,w
  5728  03AA  1D03               	btfss	3,2
  5729  03AB  2BB5               	goto	l4190
  5730  03AC  0834               	movf	pid_pwm1_idrv_b_b@t32+2,w
  5731  03AD  1D03               	btfss	3,2
  5732  03AE  2BB5               	goto	l4190
  5733  03AF  3089               	movlw	137
  5734  03B0  0232               	subwf	pid_pwm1_idrv_b_b@t32,w
  5735  03B1  3013               	movlw	19
  5736  03B2  3B33               	subwfb	pid_pwm1_idrv_b_b@t32+1,w
  5737  03B3  1C03               	btfss	3,0
  5738  03B4  2CFE               	goto	l4230
  5739  03B5                     l4190:	
  5740                           
  5741                           ;sample.c: 231: set_idrv_pwm1_duty(5);
  5742  03B5  3005               	movlw	5
  5743  03B6  00F3               	movwf	set_idrv_pwm1_duty@duty
  5744  03B7  01F4               	clrf	set_idrv_pwm1_duty@duty+1
  5745  03B8  262F  3180         	fcall	_set_idrv_pwm1_duty
  5746                           
  5747                           ;sample.c: 232: pidBbSm=3;
  5748  03BA  3003               	movlw	3
  5749  03BB  2CF1               	goto	L6
  5750  03BC                     l4194:	
  5751                           ;sample.c: 233: break;
  5752                           
  5753                           
  5754                           ;sample.c: 237: if(t32<2000){
  5755  03BC  1BB5               	btfsc	pid_pwm1_idrv_b_b@t32+3,7
  5756  03BD  2BCA               	goto	l4196
  5757  03BE  0835               	movf	pid_pwm1_idrv_b_b@t32+3,w
  5758  03BF  1D03               	btfss	3,2
  5759  03C0  2CFE               	goto	l4230
  5760  03C1  0834               	movf	pid_pwm1_idrv_b_b@t32+2,w
  5761  03C2  1D03               	btfss	3,2
  5762  03C3  2CFE               	goto	l4230
  5763  03C4  30D0               	movlw	208
  5764  03C5  0232               	subwf	pid_pwm1_idrv_b_b@t32,w
  5765  03C6  3007               	movlw	7
  5766  03C7  3B33               	subwfb	pid_pwm1_idrv_b_b@t32+1,w
  5767  03C8  1803               	btfsc	3,0
  5768  03C9  2CFE               	goto	l4230
  5769  03CA                     l4196:	
  5770                           
  5771                           ;sample.c: 238: bbt0=bbt1;
  5772  03CA  0021               	movlb	1	; select bank1
  5773  03CB  084D               	movf	(_bbt1+3)^(0+128),w
  5774  03CC  00C9               	movwf	(_bbt0+3)^(0+128)
  5775  03CD  084C               	movf	(_bbt1+2)^(0+128),w
  5776  03CE  00C8               	movwf	(_bbt0+2)^(0+128)
  5777  03CF  084B               	movf	(_bbt1+1)^(0+128),w
  5778  03D0  00C7               	movwf	(_bbt0+1)^(0+128)
  5779  03D1  084A               	movf	_bbt1^(0+128),w
  5780  03D2  00C6               	movwf	_bbt0^(0+128)
  5781                           
  5782                           ;sample.c: 239: bbt1=globalTicker;
  5783  03D3  085D               	movf	(_globalTicker+3)^(0+128),w	;volatile
  5784  03D4  00CD               	movwf	(_bbt1+3)^(0+128)
  5785  03D5  085C               	movf	(_globalTicker+2)^(0+128),w	;volatile
  5786  03D6  00CC               	movwf	(_bbt1+2)^(0+128)
  5787  03D7  085B               	movf	(_globalTicker+1)^(0+128),w	;volatile
  5788  03D8  00CB               	movwf	(_bbt1+1)^(0+128)
  5789  03D9  085A               	movf	_globalTicker^(0+128),w	;volatile
  5790  03DA  00CA               	movwf	_bbt1^(0+128)
  5791                           
  5792                           ;sample.c: 240: pidTestNum++;
  5793  03DB  0020               	movlb	0	; select bank0
  5794  03DC  3005               	movlw	5
  5795  03DD  0ADD               	incf	_pidTestNum,f
  5796                           
  5797                           ;sample.c: 241: if(pidTestNum>4){
  5798  03DE  025D               	subwf	_pidTestNum,w
  5799  03DF  1C03               	skipc
  5800  03E0  2B9F               	goto	l4184
  5801                           
  5802                           ;sample.c: 242: pidBbSm=4;
  5803  03E1  3004               	movlw	4
  5804  03E2  2CF2               	goto	L5
  5805  03E3                     l4208:	
  5806                           ;sample.c: 243: break;
  5807                           
  5808                           
  5809                           ;sample.c: 251: bbtu=bbt1-bbt0;
  5810  03E3  0021               	movlb	1	; select bank1
  5811  03E4  084D               	movf	(_bbt1+3)^(0+128),w
  5812  03E5  00D5               	movwf	(_bbtu+3)^(0+128)
  5813  03E6  084C               	movf	(_bbt1+2)^(0+128),w
  5814  03E7  00D4               	movwf	(_bbtu+2)^(0+128)
  5815  03E8  084B               	movf	(_bbt1+1)^(0+128),w
  5816  03E9  00D3               	movwf	(_bbtu+1)^(0+128)
  5817  03EA  084A               	movf	_bbt1^(0+128),w
  5818  03EB  00D2               	movwf	_bbtu^(0+128)
  5819  03EC  0846               	movf	_bbt0^(0+128),w
  5820  03ED  02D2               	subwf	_bbtu^(0+128),f
  5821  03EE  0847               	movf	(_bbt0+1)^(0+128),w
  5822  03EF  3BD3               	subwfb	(_bbtu+1)^(0+128),f
  5823  03F0  0848               	movf	(_bbt0+2)^(0+128),w
  5824  03F1  3BD4               	subwfb	(_bbtu+2)^(0+128),f
  5825  03F2  0849               	movf	(_bbt0+3)^(0+128),w
  5826  03F3  3BD5               	subwfb	(_bbtu+3)^(0+128),f
  5827                           
  5828                           ;sample.c: 252: bbtu=bbtu/5;
  5829  03F4  3005               	movlw	5
  5830  03F5  0020               	movlb	0	; select bank0
  5831  03F6  00A4               	movwf	___aldiv@divisor
  5832  03F7  01A5               	clrf	___aldiv@divisor+1
  5833  03F8  2742  3180         	fcall	PL10	;call to abstracted procedure
  5834  03FA  255C  3180         	fcall	___aldiv
  5835  03FC  0827               	movf	?___aldiv+3,w
  5836  03FD  0021               	movlb	1	; select bank1
  5837  03FE  00D5               	movwf	(_bbtu+3)^(0+128)
  5838  03FF  0020               	movlb	0	; select bank0
  5839  0400  0826               	movf	?___aldiv+2,w
  5840  0401  0021               	movlb	1	; select bank1
  5841  0402  00D4               	movwf	(_bbtu+2)^(0+128)
  5842  0403  0020               	movlb	0	; select bank0
  5843  0404  0825               	movf	?___aldiv+1,w
  5844  0405  0021               	movlb	1	; select bank1
  5845  0406  00D3               	movwf	(_bbtu+1)^(0+128)
  5846  0407  0020               	movlb	0	; select bank0
  5847  0408  0824               	movf	?___aldiv,w
  5848  0409  0021               	movlb	1	; select bank1
  5849  040A  00D2               	movwf	_bbtu^(0+128)
  5850                           
  5851                           ;sample.c: 253: bbta=(bbmax-bbmin)/2;
  5852  040B  0863               	movf	(_bbmax+3)^(0+128),w
  5853  040C  0020               	movlb	0	; select bank0
  5854  040D  00AB               	movwf	___aldiv@dividend+3
  5855  040E  0021               	movlb	1	; select bank1
  5856  040F  0862               	movf	(_bbmax+2)^(0+128),w
  5857  0410  0020               	movlb	0	; select bank0
  5858  0411  00AA               	movwf	___aldiv@dividend+2
  5859  0412  0021               	movlb	1	; select bank1
  5860  0413  0861               	movf	(_bbmax+1)^(0+128),w
  5861  0414  0020               	movlb	0	; select bank0
  5862  0415  00A9               	movwf	___aldiv@dividend+1
  5863  0416  0021               	movlb	1	; select bank1
  5864  0417  0860               	movf	_bbmax^(0+128),w
  5865  0418  0020               	movlb	0	; select bank0
  5866  0419  00A8               	movwf	___aldiv@dividend
  5867  041A  0021               	movlb	1	; select bank1
  5868  041B  0864               	movf	_bbmin^(0+128),w
  5869  041C  0020               	movlb	0	; select bank0
  5870  041D  02A8               	subwf	___aldiv@dividend,f
  5871  041E  0021               	movlb	1	; select bank1
  5872  041F  0865               	movf	(_bbmin+1)^(0+128),w
  5873  0420  0020               	movlb	0	; select bank0
  5874  0421  3BA9               	subwfb	___aldiv@dividend+1,f
  5875  0422  0021               	movlb	1	; select bank1
  5876  0423  0866               	movf	(_bbmin+2)^(0+128),w
  5877  0424  0020               	movlb	0	; select bank0
  5878  0425  3BAA               	subwfb	___aldiv@dividend+2,f
  5879  0426  0021               	movlb	1	; select bank1
  5880  0427  0867               	movf	(_bbmin+3)^(0+128),w
  5881  0428  0020               	movlb	0	; select bank0
  5882  0429  3BAB               	subwfb	___aldiv@dividend+3,f
  5883  042A  3002               	movlw	2
  5884  042B  00A4               	movwf	___aldiv@divisor
  5885  042C  01A5               	clrf	___aldiv@divisor+1
  5886  042D  01A6               	clrf	___aldiv@divisor+2
  5887  042E  01A7               	clrf	___aldiv@divisor+3
  5888  042F  255C  3180         	fcall	___aldiv
  5889  0431  0827               	movf	?___aldiv+3,w
  5890  0432  0021               	movlb	1	; select bank1
  5891  0433  00D1               	movwf	(_bbta+3)^(0+128)
  5892  0434  0020               	movlb	0	; select bank0
  5893  0435  0826               	movf	?___aldiv+2,w
  5894  0436  0021               	movlb	1	; select bank1
  5895  0437  00D0               	movwf	(_bbta+2)^(0+128)
  5896  0438  0020               	movlb	0	; select bank0
  5897  0439  0825               	movf	?___aldiv+1,w
  5898  043A  0021               	movlb	1	; select bank1
  5899  043B  00CF               	movwf	(_bbta+1)^(0+128)
  5900  043C  0020               	movlb	0	; select bank0
  5901  043D  0824               	movf	?___aldiv,w
  5902  043E  0021               	movlb	1	; select bank1
  5903  043F  00CE               	movwf	_bbta^(0+128)
  5904                           
  5905                           ;sample.c: 254: bbu=(1200-5)/2;
  5906  0440  3002               	movlw	2
  5907  0441  01D9               	clrf	(_bbu+3)^(0+128)
  5908  0442  01D8               	clrf	(_bbu+2)^(0+128)
  5909  0443  00D7               	movwf	(_bbu+1)^(0+128)
  5910  0444  3055               	movlw	85
  5911  0445  00D6               	movwf	_bbu^(0+128)
  5912                           
  5913                           ;sample.c: 256: bbku=(bbu*40000)/(bbta*314);
  5914  0446  0851               	movf	(_bbta+3)^(0+128),w
  5915  0447  00F4               	movwf	___lmul@multiplier+3
  5916  0448  0850               	movf	(_bbta+2)^(0+128),w
  5917  0449  00F3               	movwf	___lmul@multiplier+2
  5918  044A  084F               	movf	(_bbta+1)^(0+128),w
  5919  044B  00F2               	movwf	___lmul@multiplier+1
  5920  044C  084E               	movf	_bbta^(0+128),w
  5921  044D  00F1               	movwf	___lmul@multiplier
  5922  044E  3001               	movlw	1
  5923  044F  01F8               	clrf	___lmul@multiplicand+3
  5924  0450  01F7               	clrf	___lmul@multiplicand+2
  5925  0451  00F6               	movwf	___lmul@multiplicand+1
  5926  0452  303A               	movlw	58
  5927  0453  00F5               	movwf	___lmul@multiplicand
  5928  0454  25C8  3180         	fcall	___lmul
  5929  0456  0874               	movf	?___lmul+3,w
  5930  0457  00A7               	movwf	___aldiv@divisor+3
  5931  0458  0873               	movf	?___lmul+2,w
  5932  0459  00A6               	movwf	___aldiv@divisor+2
  5933  045A  0872               	movf	?___lmul+1,w
  5934  045B  00A5               	movwf	___aldiv@divisor+1
  5935  045C  0871               	movf	?___lmul,w
  5936  045D  00A4               	movwf	___aldiv@divisor
  5937  045E  3002               	movlw	2
  5938  045F  01F4               	clrf	___lmul@multiplier+3
  5939  0460  01F3               	clrf	___lmul@multiplier+2
  5940  0461  00F2               	movwf	___lmul@multiplier+1
  5941  0462  3055               	movlw	85
  5942  0463  00F1               	movwf	___lmul@multiplier
  5943  0464  309C               	movlw	156
  5944  0465  01F8               	clrf	___lmul@multiplicand+3
  5945  0466  01F7               	clrf	___lmul@multiplicand+2
  5946  0467  00F6               	movwf	___lmul@multiplicand+1
  5947  0468  3040               	movlw	64
  5948  0469  00F5               	movwf	___lmul@multiplicand
  5949  046A  25C8  3180         	fcall	___lmul
  5950  046C  2755  3180         	fcall	PL14	;call to abstracted procedure
  5951  046E  255C  3180         	fcall	___aldiv
  5952  0470  0827               	movf	?___aldiv+3,w
  5953  0471  0021               	movlb	1	; select bank1
  5954  0472  00C5               	movwf	(_bbku+3)^(0+128)
  5955  0473  0020               	movlb	0	; select bank0
  5956  0474  0826               	movf	?___aldiv+2,w
  5957  0475  0021               	movlb	1	; select bank1
  5958  0476  00C4               	movwf	(_bbku+2)^(0+128)
  5959  0477  0020               	movlb	0	; select bank0
  5960  0478  0825               	movf	?___aldiv+1,w
  5961  0479  0021               	movlb	1	; select bank1
  5962  047A  00C3               	movwf	(_bbku+1)^(0+128)
  5963  047B  0020               	movlb	0	; select bank0
  5964  047C  0824               	movf	?___aldiv,w
  5965  047D  0021               	movlb	1	; select bank1
  5966  047E  00C2               	movwf	_bbku^(0+128)
  5967                           
  5968                           ;sample.c: 257: bbku*=100;
  5969  047F  3064               	movlw	100
  5970  0480  00F1               	movwf	___lmul@multiplier
  5971  0481  01F2               	clrf	___lmul@multiplier+1
  5972  0482  01F3               	clrf	___lmul@multiplier+2
  5973  0483  01F4               	clrf	___lmul@multiplier+3
  5974  0484  0845               	movf	(_bbku+3)^(0+128),w
  5975  0485  00F8               	movwf	___lmul@multiplicand+3
  5976  0486  0844               	movf	(_bbku+2)^(0+128),w
  5977  0487  00F7               	movwf	___lmul@multiplicand+2
  5978  0488  0843               	movf	(_bbku+1)^(0+128),w
  5979  0489  00F6               	movwf	___lmul@multiplicand+1
  5980  048A  0842               	movf	_bbku^(0+128),w
  5981  048B  00F5               	movwf	___lmul@multiplicand
  5982  048C  25C8  3180         	fcall	___lmul
  5983  048E  0874               	movf	?___lmul+3,w
  5984  048F  0021               	movlb	1	; select bank1
  5985  0490  00C5               	movwf	(_bbku+3)^(0+128)
  5986  0491  0873               	movf	?___lmul+2,w
  5987  0492  00C4               	movwf	(_bbku+2)^(0+128)
  5988  0493  0872               	movf	?___lmul+1,w
  5989  0494  00C3               	movwf	(_bbku+1)^(0+128)
  5990  0495  0871               	movf	?___lmul,w
  5991  0496  00C2               	movwf	_bbku^(0+128)
  5992                           
  5993                           ;sample.c: 259: PidKp=bbku*10/17;
  5994  0497  3011               	movlw	17
  5995  0498  275E  3180         	fcall	PL18	;call to abstracted procedure
  5996  049A  0845               	movf	(_bbku+3)^(0+128),w
  5997  049B  00F4               	movwf	___lmul@multiplier+3
  5998  049C  0844               	movf	(_bbku+2)^(0+128),w
  5999  049D  00F3               	movwf	___lmul@multiplier+2
  6000  049E  0843               	movf	(_bbku+1)^(0+128),w
  6001  049F  00F2               	movwf	___lmul@multiplier+1
  6002  04A0  0842               	movf	_bbku^(0+128),w
  6003  04A1  2785  3180         	fcall	PL42	;call to abstracted procedure
  6004  04A3  25C8  3180         	fcall	___lmul
  6005  04A5  2755  3180         	fcall	PL14	;call to abstracted procedure
  6006  04A7  255C  3180         	fcall	___aldiv
  6007  04A9  0827               	movf	?___aldiv+3,w
  6008  04AA  0021               	movlb	1	; select bank1
  6009  04AB  00B9               	movwf	(_PidKp+3)^(0+128)
  6010  04AC  0020               	movlb	0	; select bank0
  6011  04AD  0826               	movf	?___aldiv+2,w
  6012  04AE  0021               	movlb	1	; select bank1
  6013  04AF  00B8               	movwf	(_PidKp+2)^(0+128)
  6014  04B0  0020               	movlb	0	; select bank0
  6015  04B1  0825               	movf	?___aldiv+1,w
  6016  04B2  0021               	movlb	1	; select bank1
  6017  04B3  00B7               	movwf	(_PidKp+1)^(0+128)
  6018  04B4  0020               	movlb	0	; select bank0
  6019  04B5  0824               	movf	?___aldiv,w
  6020  04B6  0021               	movlb	1	; select bank1
  6021  04B7  00B6               	movwf	_PidKp^(0+128)
  6022                           
  6023                           ;sample.c: 260: PidTi=bbtu*10/20;
  6024  04B8  3014               	movlw	20
  6025  04B9  275E  3180         	fcall	PL18	;call to abstracted procedure
  6026  04BB  0855               	movf	(_bbtu+3)^(0+128),w
  6027  04BC  00F4               	movwf	___lmul@multiplier+3
  6028  04BD  0854               	movf	(_bbtu+2)^(0+128),w
  6029  04BE  00F3               	movwf	___lmul@multiplier+2
  6030  04BF  0853               	movf	(_bbtu+1)^(0+128),w
  6031  04C0  00F2               	movwf	___lmul@multiplier+1
  6032  04C1  0852               	movf	_bbtu^(0+128),w
  6033  04C2  2785  3180         	fcall	PL42	;call to abstracted procedure
  6034  04C4  25C8  3180         	fcall	___lmul
  6035  04C6  2755  3180         	fcall	PL14	;call to abstracted procedure
  6036  04C8  255C  3180         	fcall	___aldiv
  6037  04CA  0827               	movf	?___aldiv+3,w
  6038  04CB  0021               	movlb	1	; select bank1
  6039  04CC  00C1               	movwf	(_PidTi+3)^(0+128)
  6040  04CD  0020               	movlb	0	; select bank0
  6041  04CE  0826               	movf	?___aldiv+2,w
  6042  04CF  0021               	movlb	1	; select bank1
  6043  04D0  00C0               	movwf	(_PidTi+2)^(0+128)
  6044  04D1  0020               	movlb	0	; select bank0
  6045  04D2  0825               	movf	?___aldiv+1,w
  6046  04D3  0021               	movlb	1	; select bank1
  6047  04D4  00BF               	movwf	(_PidTi+1)^(0+128)
  6048  04D5  0020               	movlb	0	; select bank0
  6049  04D6  0824               	movf	?___aldiv,w
  6050  04D7  0021               	movlb	1	; select bank1
  6051  04D8  00BE               	movwf	_PidTi^(0+128)
  6052                           
  6053                           ;sample.c: 261: PidTd=bbtu/8;
  6054  04D9  3008               	movlw	8
  6055  04DA  0020               	movlb	0	; select bank0
  6056  04DB  00A4               	movwf	___aldiv@divisor
  6057  04DC  01A5               	clrf	___aldiv@divisor+1
  6058  04DD  2742  3180         	fcall	PL10	;call to abstracted procedure
  6059  04DF  255C  3180         	fcall	___aldiv
  6060  04E1  0827               	movf	?___aldiv+3,w
  6061  04E2  0021               	movlb	1	; select bank1
  6062  04E3  00BD               	movwf	(_PidTd+3)^(0+128)
  6063  04E4  0020               	movlb	0	; select bank0
  6064  04E5  0826               	movf	?___aldiv+2,w
  6065  04E6  0021               	movlb	1	; select bank1
  6066  04E7  00BC               	movwf	(_PidTd+2)^(0+128)
  6067  04E8  0020               	movlb	0	; select bank0
  6068  04E9  0825               	movf	?___aldiv+1,w
  6069  04EA  0021               	movlb	1	; select bank1
  6070  04EB  00BB               	movwf	(_PidTd+1)^(0+128)
  6071  04EC  0020               	movlb	0	; select bank0
  6072  04ED  0824               	movf	?___aldiv,w
  6073  04EE  0021               	movlb	1	; select bank1
  6074  04EF  00BA               	movwf	_PidTd^(0+128)
  6075                           
  6076                           ;sample.c: 262: pidBbSm=5;
  6077  04F0  3005               	movlw	5
  6078  04F1                     L6:	
  6079  04F1  0020               	movlb	0	; select bank0
  6080  04F2                     L5:	
  6081  04F2  00DC               	movwf	_pidBbSm
  6082                           
  6083                           ;sample.c: 263: break;
  6084  04F3  2CFE               	goto	l4230
  6085  04F4                     l4228:	
  6086  04F4  085C               	movf	_pidBbSm,w
  6087                           
  6088                           ; Switch size 1, requested type "space"
  6089                           ; Number of cases is 6, Range of values is 0 to 5
  6090                           ; switch strategies available:
  6091                           ; Name         Instructions Cycles
  6092                           ; direct_byte           18     6 (fixed)
  6093                           ; simple_byte           19    10 (average)
  6094                           ; jumptable            260     6 (fixed)
  6095                           ;	Chosen strategy is direct_byte
  6096  04F5  0084               	movwf	4
  6097  04F6  3006               	movlw	6
  6098  04F7  0204               	subwf	4,w
  6099  04F8  1803               	skipnc
  6100  04F9  2CFE               	goto	l4230
  6101  04FA  3188               	movlp	high S4512
  6102  04FB  3504               	lslf	4,w
  6103  04FC  3E00               	addlw	low S4512
  6104  04FD  0082               	movwf	2
  6105  04FE                     l4230:	
  6106                           
  6107                           ;sample.c: 265: if(pidTestNum>2){
  6108  04FE  3003               	movlw	3
  6109  04FF  025D               	subwf	_pidTestNum,w
  6110  0500  1C03               	skipc
  6111  0501  0008               	return
  6112                           
  6113                           ;sample.c: 266: if(bbmax<t32)bbmax=t32;
  6114  0502  0021               	movlb	1	; select bank1
  6115  0503  0863               	movf	(_bbmax+3)^(0+128),w
  6116  0504  3A80               	xorlw	128
  6117  0505  00F9               	movwf	??_pid_pwm1_idrv_b_b
  6118  0506  0020               	movlb	0	; select bank0
  6119  0507  0835               	movf	pid_pwm1_idrv_b_b@t32+3,w
  6120  0508  3A80               	xorlw	128
  6121  0509  0279               	subwf	??_pid_pwm1_idrv_b_b,w
  6122  050A  0021               	movlb	1	; select bank1
  6123  050B  1D03               	skipz
  6124  050C  2D1D               	goto	u2833
  6125  050D  0020               	movlb	0	; select bank0
  6126  050E  0834               	movf	pid_pwm1_idrv_b_b@t32+2,w
  6127  050F  0021               	movlb	1	; select bank1
  6128  0510  0262               	subwf	(_bbmax+2)^(0+128),w
  6129  0511  1D03               	skipz
  6130  0512  2D1D               	goto	u2833
  6131  0513  0020               	movlb	0	; select bank0
  6132  0514  0833               	movf	pid_pwm1_idrv_b_b@t32+1,w
  6133  0515  0021               	movlb	1	; select bank1
  6134  0516  0261               	subwf	(_bbmax+1)^(0+128),w
  6135  0517  1D03               	skipz
  6136  0518  2D1D               	goto	u2833
  6137  0519  0020               	movlb	0	; select bank0
  6138  051A  0832               	movf	pid_pwm1_idrv_b_b@t32,w
  6139  051B  0021               	movlb	1	; select bank1
  6140  051C  0260               	subwf	_bbmax^(0+128),w
  6141  051D                     u2833:	
  6142  051D  1803               	skipnc
  6143  051E  2D2F               	goto	l654
  6144  051F  0020               	movlb	0	; select bank0
  6145  0520  0835               	movf	pid_pwm1_idrv_b_b@t32+3,w
  6146  0521  0021               	movlb	1	; select bank1
  6147  0522  00E3               	movwf	(_bbmax+3)^(0+128)
  6148  0523  0020               	movlb	0	; select bank0
  6149  0524  0834               	movf	pid_pwm1_idrv_b_b@t32+2,w
  6150  0525  0021               	movlb	1	; select bank1
  6151  0526  00E2               	movwf	(_bbmax+2)^(0+128)
  6152  0527  0020               	movlb	0	; select bank0
  6153  0528  0833               	movf	pid_pwm1_idrv_b_b@t32+1,w
  6154  0529  0021               	movlb	1	; select bank1
  6155  052A  00E1               	movwf	(_bbmax+1)^(0+128)
  6156  052B  0020               	movlb	0	; select bank0
  6157  052C  0832               	movf	pid_pwm1_idrv_b_b@t32,w
  6158  052D  0021               	movlb	1	; select bank1
  6159  052E  00E0               	movwf	_bbmax^(0+128)
  6160  052F                     l654:	
  6161                           
  6162                           ;sample.c: 267: if(bbmin>t32)bbmin=t32;
  6163  052F  0020               	movlb	0	; select bank0
  6164  0530  0835               	movf	pid_pwm1_idrv_b_b@t32+3,w
  6165  0531  3A80               	xorlw	128
  6166  0532  00F9               	movwf	??_pid_pwm1_idrv_b_b
  6167  0533  0021               	movlb	1	; select bank1
  6168  0534  0867               	movf	(_bbmin+3)^(0+128),w
  6169  0535  3A80               	xorlw	128
  6170  0536  0279               	subwf	??_pid_pwm1_idrv_b_b,w
  6171  0537  0020               	movlb	0	; select bank0
  6172  0538  1D03               	skipz
  6173  0539  2D4A               	goto	u2843
  6174  053A  0021               	movlb	1	; select bank1
  6175  053B  0866               	movf	(_bbmin+2)^(0+128),w
  6176  053C  0020               	movlb	0	; select bank0
  6177  053D  0234               	subwf	pid_pwm1_idrv_b_b@t32+2,w
  6178  053E  1D03               	skipz
  6179  053F  2D4A               	goto	u2843
  6180  0540  0021               	movlb	1	; select bank1
  6181  0541  0865               	movf	(_bbmin+1)^(0+128),w
  6182  0542  0020               	movlb	0	; select bank0
  6183  0543  0233               	subwf	pid_pwm1_idrv_b_b@t32+1,w
  6184  0544  1D03               	skipz
  6185  0545  2D4A               	goto	u2843
  6186  0546  0021               	movlb	1	; select bank1
  6187  0547  0864               	movf	_bbmin^(0+128),w
  6188  0548  0020               	movlb	0	; select bank0
  6189  0549  0232               	subwf	pid_pwm1_idrv_b_b@t32,w
  6190  054A                     u2843:	
  6191  054A  1803               	skipnc
  6192  054B  0008               	return
  6193  054C  0835               	movf	pid_pwm1_idrv_b_b@t32+3,w
  6194  054D  0021               	movlb	1	; select bank1
  6195  054E  00E7               	movwf	(_bbmin+3)^(0+128)
  6196  054F  0020               	movlb	0	; select bank0
  6197  0550  0834               	movf	pid_pwm1_idrv_b_b@t32+2,w
  6198  0551  0021               	movlb	1	; select bank1
  6199  0552  00E6               	movwf	(_bbmin+2)^(0+128)
  6200  0553  0020               	movlb	0	; select bank0
  6201  0554  0833               	movf	pid_pwm1_idrv_b_b@t32+1,w
  6202  0555  0021               	movlb	1	; select bank1
  6203  0556  00E5               	movwf	(_bbmin+1)^(0+128)
  6204  0557  0020               	movlb	0	; select bank0
  6205  0558  0832               	movf	pid_pwm1_idrv_b_b@t32,w
  6206  0559  0021               	movlb	1	; select bank1
  6207  055A  00E4               	movwf	_bbmin^(0+128)
  6208  055B                     l643:	
  6209  055B  0008               	return
  6210  055C                     __end_of_pid_pwm1_idrv_b_b:	
  6211  055C                     __ptext34:	
  6212 ;; *************** function ___aldiv *****************
  6213 ;; Defined at:
  6214 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  6215 ;; Parameters:    Size  Location     Type
  6216 ;;  divisor         4    4[BANK0 ] long 
  6217 ;;  dividend        4    8[BANK0 ] long 
  6218 ;; Auto vars:     Size  Location     Type
  6219 ;;  quotient        4   14[BANK0 ] long 
  6220 ;;  sign            1   13[BANK0 ] unsigned char 
  6221 ;;  counter         1   12[BANK0 ] unsigned char 
  6222 ;; Return value:  Size  Location     Type
  6223 ;;                  4    4[BANK0 ] long 
  6224 ;; Registers used:
  6225 ;;		wreg, status,2, status,0
  6226 ;; Tracked objects:
  6227 ;;		On entry : 1F/0
  6228 ;;		On exit  : 1F/0
  6229 ;;		Unchanged: 0/0
  6230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6231 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6232 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6234 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6235 ;;Total ram usage:       14 bytes
  6236 ;; Hardware stack levels used:    1
  6237 ;; Hardware stack levels required when called:    1
  6238 ;; This function calls:
  6239 ;;		Nothing
  6240 ;; This function is called by:
  6241 ;;		_pid_pwm1_idrv_b_b
  6242 ;;		_pid_pwm1_idrv_run
  6243 ;;		_calc_expect_vout_adc_value
  6244 ;; This function uses a non-reentrant model
  6245 ;;
  6246                           
  6247                           
  6248                           ;psect for function ___aldiv
  6249  055C                     ___aldiv:	
  6250                           
  6251                           ;incstack = 0
  6252                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  6253  055C  01AD               	clrf	___aldiv@sign
  6254  055D  1FA7               	btfss	___aldiv@divisor+3,7
  6255  055E  2D6C               	goto	l1157
  6256  055F  09A4               	comf	___aldiv@divisor,f
  6257  0560  09A5               	comf	___aldiv@divisor+1,f
  6258  0561  09A6               	comf	___aldiv@divisor+2,f
  6259  0562  09A7               	comf	___aldiv@divisor+3,f
  6260  0563  0AA4               	incf	___aldiv@divisor,f
  6261  0564  1903               	skipnz
  6262  0565  0AA5               	incf	___aldiv@divisor+1,f
  6263  0566  1903               	skipnz
  6264  0567  0AA6               	incf	___aldiv@divisor+2,f
  6265  0568  1903               	skipnz
  6266  0569  0AA7               	incf	___aldiv@divisor+3,f
  6267  056A  01AD               	clrf	___aldiv@sign
  6268  056B  0AAD               	incf	___aldiv@sign,f
  6269  056C                     l1157:	
  6270  056C  1FAB               	btfss	___aldiv@dividend+3,7
  6271  056D  2D7B               	goto	l4110
  6272  056E  09A8               	comf	___aldiv@dividend,f
  6273  056F  09A9               	comf	___aldiv@dividend+1,f
  6274  0570  09AA               	comf	___aldiv@dividend+2,f
  6275  0571  09AB               	comf	___aldiv@dividend+3,f
  6276  0572  0AA8               	incf	___aldiv@dividend,f
  6277  0573  1903               	skipnz
  6278  0574  0AA9               	incf	___aldiv@dividend+1,f
  6279  0575  1903               	skipnz
  6280  0576  0AAA               	incf	___aldiv@dividend+2,f
  6281  0577  1903               	skipnz
  6282  0578  0AAB               	incf	___aldiv@dividend+3,f
  6283  0579  3001               	movlw	1
  6284  057A  06AD               	xorwf	___aldiv@sign,f
  6285  057B                     l4110:	
  6286  057B  01AE               	clrf	___aldiv@quotient
  6287  057C  01AF               	clrf	___aldiv@quotient+1
  6288  057D  01B0               	clrf	___aldiv@quotient+2
  6289  057E  01B1               	clrf	___aldiv@quotient+3
  6290  057F  0827               	movf	___aldiv@divisor+3,w
  6291  0580  0426               	iorwf	___aldiv@divisor+2,w
  6292  0581  0425               	iorwf	___aldiv@divisor+1,w
  6293  0582  0424               	iorwf	___aldiv@divisor,w
  6294  0583  1903               	skipnz
  6295  0584  2DB1               	goto	l4132
  6296  0585  01AC               	clrf	___aldiv@counter
  6297  0586                     L8:	
  6298  0586  0AAC               	incf	___aldiv@counter,f
  6299  0587  1BA7               	btfsc	___aldiv@divisor+3,7
  6300  0588  2D8E               	goto	l4120
  6301  0589  35A4               	lslf	___aldiv@divisor,f
  6302  058A  0DA5               	rlf	___aldiv@divisor+1,f
  6303  058B  0DA6               	rlf	___aldiv@divisor+2,f
  6304  058C  0DA7               	rlf	___aldiv@divisor+3,f
  6305  058D  2D86               	goto	L8
  6306  058E                     l4120:	
  6307  058E  35AE               	lslf	___aldiv@quotient,f
  6308  058F  0DAF               	rlf	___aldiv@quotient+1,f
  6309  0590  0DB0               	rlf	___aldiv@quotient+2,f
  6310  0591  0DB1               	rlf	___aldiv@quotient+3,f
  6311  0592  0827               	movf	___aldiv@divisor+3,w
  6312  0593  022B               	subwf	___aldiv@dividend+3,w
  6313  0594  1D03               	skipz
  6314  0595  2DA0               	goto	u2725
  6315  0596  0826               	movf	___aldiv@divisor+2,w
  6316  0597  022A               	subwf	___aldiv@dividend+2,w
  6317  0598  1D03               	skipz
  6318  0599  2DA0               	goto	u2725
  6319  059A  0825               	movf	___aldiv@divisor+1,w
  6320  059B  0229               	subwf	___aldiv@dividend+1,w
  6321  059C  1D03               	skipz
  6322  059D  2DA0               	goto	u2725
  6323  059E  0824               	movf	___aldiv@divisor,w
  6324  059F  0228               	subwf	___aldiv@dividend,w
  6325  05A0                     u2725:	
  6326  05A0  1C03               	skipc
  6327  05A1  2DAB               	goto	l4128
  6328  05A2  0824               	movf	___aldiv@divisor,w
  6329  05A3  02A8               	subwf	___aldiv@dividend,f
  6330  05A4  0825               	movf	___aldiv@divisor+1,w
  6331  05A5  3BA9               	subwfb	___aldiv@dividend+1,f
  6332  05A6  0826               	movf	___aldiv@divisor+2,w
  6333  05A7  3BAA               	subwfb	___aldiv@dividend+2,f
  6334  05A8  0827               	movf	___aldiv@divisor+3,w
  6335  05A9  3BAB               	subwfb	___aldiv@dividend+3,f
  6336  05AA  142E               	bsf	___aldiv@quotient,0
  6337  05AB                     l4128:	
  6338  05AB  36A7               	lsrf	___aldiv@divisor+3,f
  6339  05AC  0CA6               	rrf	___aldiv@divisor+2,f
  6340  05AD  0CA5               	rrf	___aldiv@divisor+1,f
  6341  05AE  0CA4               	rrf	___aldiv@divisor,f
  6342  05AF  0BAC               	decfsz	___aldiv@counter,f
  6343  05B0  2D8E               	goto	l4120
  6344  05B1                     l4132:	
  6345  05B1  082D               	movf	___aldiv@sign,w
  6346  05B2  1903               	btfsc	3,2
  6347  05B3  2DBF               	goto	l4136
  6348  05B4  09AE               	comf	___aldiv@quotient,f
  6349  05B5  09AF               	comf	___aldiv@quotient+1,f
  6350  05B6  09B0               	comf	___aldiv@quotient+2,f
  6351  05B7  09B1               	comf	___aldiv@quotient+3,f
  6352  05B8  0AAE               	incf	___aldiv@quotient,f
  6353  05B9  1903               	skipnz
  6354  05BA  0AAF               	incf	___aldiv@quotient+1,f
  6355  05BB  1903               	skipnz
  6356  05BC  0AB0               	incf	___aldiv@quotient+2,f
  6357  05BD  1903               	skipnz
  6358  05BE  0AB1               	incf	___aldiv@quotient+3,f
  6359  05BF                     l4136:	
  6360  05BF  0831               	movf	___aldiv@quotient+3,w
  6361  05C0  00A7               	movwf	?___aldiv+3
  6362  05C1  0830               	movf	___aldiv@quotient+2,w
  6363  05C2  00A6               	movwf	?___aldiv+2
  6364  05C3  082F               	movf	___aldiv@quotient+1,w
  6365  05C4  00A5               	movwf	?___aldiv+1
  6366  05C5  082E               	movf	___aldiv@quotient,w
  6367  05C6  00A4               	movwf	?___aldiv
  6368  05C7  0008               	return
  6369  05C8                     __end_of___aldiv:	
  6370  05C8                     __ptext33:	
  6371 ;; *************** function ___lmul *****************
  6372 ;; Defined at:
  6373 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
  6374 ;; Parameters:    Size  Location     Type
  6375 ;;  multiplier      4    1[COMMON] unsigned long 
  6376 ;;  multiplicand    4    5[COMMON] unsigned long 
  6377 ;; Auto vars:     Size  Location     Type
  6378 ;;  product         4    0[BANK0 ] unsigned long 
  6379 ;; Return value:  Size  Location     Type
  6380 ;;                  4    1[COMMON] unsigned long 
  6381 ;; Registers used:
  6382 ;;		wreg, status,2, status,0
  6383 ;; Tracked objects:
  6384 ;;		On entry : 1A/1
  6385 ;;		On exit  : 1F/0
  6386 ;;		Unchanged: 0/0
  6387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6388 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6389 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6391 ;;      Totals:         8       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6392 ;;Total ram usage:       12 bytes
  6393 ;; Hardware stack levels used:    1
  6394 ;; Hardware stack levels required when called:    1
  6395 ;; This function calls:
  6396 ;;		Nothing
  6397 ;; This function is called by:
  6398 ;;		_calc_temp_rs
  6399 ;;		_calc_temp_rc
  6400 ;;		_pid_pwm1_idrv_b_b
  6401 ;;		_pid_pwm1_idrv_run
  6402 ;;		_calc_expect_vout_adc_value
  6403 ;; This function uses a non-reentrant model
  6404 ;;
  6405                           
  6406                           
  6407                           ;psect for function ___lmul
  6408  05C8                     ___lmul:	
  6409                           
  6410                           ;incstack = 0
  6411                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  6412  05C8  0020               	movlb	0	; select bank0
  6413  05C9  01A0               	clrf	___lmul@product
  6414  05CA  01A1               	clrf	___lmul@product+1
  6415  05CB  01A2               	clrf	___lmul@product+2
  6416  05CC  01A3               	clrf	___lmul@product+3
  6417  05CD                     l1113:	
  6418  05CD  1C71               	btfss	___lmul@multiplier,0
  6419  05CE  2DD8               	goto	l4092
  6420  05CF  0875               	movf	___lmul@multiplicand,w
  6421  05D0  0020               	movlb	0	; select bank0
  6422  05D1  07A0               	addwf	___lmul@product,f
  6423  05D2  0876               	movf	___lmul@multiplicand+1,w
  6424  05D3  3DA1               	addwfc	___lmul@product+1,f
  6425  05D4  0877               	movf	___lmul@multiplicand+2,w
  6426  05D5  3DA2               	addwfc	___lmul@product+2,f
  6427  05D6  0878               	movf	___lmul@multiplicand+3,w
  6428  05D7  3DA3               	addwfc	___lmul@product+3,f
  6429  05D8                     l4092:	
  6430  05D8  35F5               	lslf	___lmul@multiplicand,f
  6431  05D9  0DF6               	rlf	___lmul@multiplicand+1,f
  6432  05DA  0DF7               	rlf	___lmul@multiplicand+2,f
  6433  05DB  0DF8               	rlf	___lmul@multiplicand+3,f
  6434  05DC  36F4               	lsrf	___lmul@multiplier+3,f
  6435  05DD  0CF3               	rrf	___lmul@multiplier+2,f
  6436  05DE  0CF2               	rrf	___lmul@multiplier+1,f
  6437  05DF  0CF1               	rrf	___lmul@multiplier,f
  6438  05E0  0874               	movf	___lmul@multiplier+3,w
  6439  05E1  0473               	iorwf	___lmul@multiplier+2,w
  6440  05E2  0472               	iorwf	___lmul@multiplier+1,w
  6441  05E3  0471               	iorwf	___lmul@multiplier,w
  6442  05E4  1D03               	skipz
  6443  05E5  2DCD               	goto	l1113
  6444  05E6  0020               	movlb	0	; select bank0
  6445  05E7  0823               	movf	___lmul@product+3,w
  6446  05E8  00F4               	movwf	?___lmul+3
  6447  05E9  0822               	movf	___lmul@product+2,w
  6448  05EA  00F3               	movwf	?___lmul+2
  6449  05EB  0821               	movf	___lmul@product+1,w
  6450  05EC  00F2               	movwf	?___lmul+1
  6451  05ED  0820               	movf	___lmul@product,w
  6452  05EE  00F1               	movwf	?___lmul
  6453  05EF  0008               	return
  6454  05F0                     __end_of___lmul:	
  6455  05F0                     __ptext31:	
  6456 ;; *************** function ___lldiv *****************
  6457 ;; Defined at:
  6458 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lldiv.c"
  6459 ;; Parameters:    Size  Location     Type
  6460 ;;  divisor         4    1[COMMON] unsigned long 
  6461 ;;  dividend        4    5[COMMON] unsigned long 
  6462 ;; Auto vars:     Size  Location     Type
  6463 ;;  quotient        4    0[BANK0 ] unsigned long 
  6464 ;;  counter         1    4[BANK0 ] unsigned char 
  6465 ;; Return value:  Size  Location     Type
  6466 ;;                  4    1[COMMON] unsigned long 
  6467 ;; Registers used:
  6468 ;;		wreg, status,2, status,0
  6469 ;; Tracked objects:
  6470 ;;		On entry : 1F/0
  6471 ;;		On exit  : 1F/0
  6472 ;;		Unchanged: 0/0
  6473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6474 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6475 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6477 ;;      Totals:         8       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6478 ;;Total ram usage:       13 bytes
  6479 ;; Hardware stack levels used:    1
  6480 ;; Hardware stack levels required when called:    1
  6481 ;; This function calls:
  6482 ;;		Nothing
  6483 ;; This function is called by:
  6484 ;;		_calc_temp_rs
  6485 ;;		_calc_temp_rc
  6486 ;;		_calc_rs_lo_avg
  6487 ;; This function uses a non-reentrant model
  6488 ;;
  6489                           
  6490                           
  6491                           ;psect for function ___lldiv
  6492  05F0                     ___lldiv:	
  6493                           
  6494                           ;incstack = 0
  6495                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  6496  05F0  01A0               	clrf	___lldiv@quotient
  6497  05F1  01A1               	clrf	___lldiv@quotient+1
  6498  05F2  01A2               	clrf	___lldiv@quotient+2
  6499  05F3  01A3               	clrf	___lldiv@quotient+3
  6500  05F4  0874               	movf	___lldiv@divisor+3,w
  6501  05F5  0473               	iorwf	___lldiv@divisor+2,w
  6502  05F6  0472               	iorwf	___lldiv@divisor+1,w
  6503  05F7  0471               	iorwf	___lldiv@divisor,w
  6504  05F8  1903               	skipnz
  6505  05F9  2E26               	goto	l3384
  6506  05FA  01A4               	clrf	___lldiv@counter
  6507  05FB                     L7:	
  6508  05FB  0AA4               	incf	___lldiv@counter,f
  6509  05FC  1BF4               	btfsc	___lldiv@divisor+3,7
  6510  05FD  2E03               	goto	l3372
  6511  05FE  35F1               	lslf	___lldiv@divisor,f
  6512  05FF  0DF2               	rlf	___lldiv@divisor+1,f
  6513  0600  0DF3               	rlf	___lldiv@divisor+2,f
  6514  0601  0DF4               	rlf	___lldiv@divisor+3,f
  6515  0602  2DFB               	goto	L7
  6516  0603                     l3372:	
  6517  0603  35A0               	lslf	___lldiv@quotient,f
  6518  0604  0DA1               	rlf	___lldiv@quotient+1,f
  6519  0605  0DA2               	rlf	___lldiv@quotient+2,f
  6520  0606  0DA3               	rlf	___lldiv@quotient+3,f
  6521  0607  0874               	movf	___lldiv@divisor+3,w
  6522  0608  0278               	subwf	___lldiv@dividend+3,w
  6523  0609  1D03               	skipz
  6524  060A  2E15               	goto	u1865
  6525  060B  0873               	movf	___lldiv@divisor+2,w
  6526  060C  0277               	subwf	___lldiv@dividend+2,w
  6527  060D  1D03               	skipz
  6528  060E  2E15               	goto	u1865
  6529  060F  0872               	movf	___lldiv@divisor+1,w
  6530  0610  0276               	subwf	___lldiv@dividend+1,w
  6531  0611  1D03               	skipz
  6532  0612  2E15               	goto	u1865
  6533  0613  0871               	movf	___lldiv@divisor,w
  6534  0614  0275               	subwf	___lldiv@dividend,w
  6535  0615                     u1865:	
  6536  0615  1C03               	skipc
  6537  0616  2E20               	goto	l3380
  6538  0617  0871               	movf	___lldiv@divisor,w
  6539  0618  02F5               	subwf	___lldiv@dividend,f
  6540  0619  0872               	movf	___lldiv@divisor+1,w
  6541  061A  3BF6               	subwfb	___lldiv@dividend+1,f
  6542  061B  0873               	movf	___lldiv@divisor+2,w
  6543  061C  3BF7               	subwfb	___lldiv@dividend+2,f
  6544  061D  0874               	movf	___lldiv@divisor+3,w
  6545  061E  3BF8               	subwfb	___lldiv@dividend+3,f
  6546  061F  1420               	bsf	___lldiv@quotient,0
  6547  0620                     l3380:	
  6548  0620  36F4               	lsrf	___lldiv@divisor+3,f
  6549  0621  0CF3               	rrf	___lldiv@divisor+2,f
  6550  0622  0CF2               	rrf	___lldiv@divisor+1,f
  6551  0623  0CF1               	rrf	___lldiv@divisor,f
  6552  0624  0BA4               	decfsz	___lldiv@counter,f
  6553  0625  2E03               	goto	l3372
  6554  0626                     l3384:	
  6555  0626  0823               	movf	___lldiv@quotient+3,w
  6556  0627  00F4               	movwf	?___lldiv+3
  6557  0628  0822               	movf	___lldiv@quotient+2,w
  6558  0629  00F3               	movwf	?___lldiv+2
  6559  062A  0821               	movf	___lldiv@quotient+1,w
  6560  062B  00F2               	movwf	?___lldiv+1
  6561  062C  0820               	movf	___lldiv@quotient,w
  6562  062D  00F1               	movwf	?___lldiv
  6563  062E  0008               	return
  6564  062F                     __end_of___lldiv:	
  6565  062F                     __ptext12:	
  6566 ;; *************** function _set_idrv_pwm1_duty *****************
  6567 ;; Defined at:
  6568 ;;		line 46 in file "src/api/sample.c"
  6569 ;; Parameters:    Size  Location     Type
  6570 ;;  duty            2    3[COMMON] unsigned int 
  6571 ;; Auto vars:     Size  Location     Type
  6572 ;;  t16             2    5[COMMON] unsigned int 
  6573 ;; Return value:  Size  Location     Type
  6574 ;;                  1    wreg      void 
  6575 ;; Registers used:
  6576 ;;		wreg, pclath, cstack
  6577 ;; Tracked objects:
  6578 ;;		On entry : 1F/0
  6579 ;;		On exit  : 1F/1B
  6580 ;;		Unchanged: 0/0
  6581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6582 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6583 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6585 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6586 ;;Total ram usage:        4 bytes
  6587 ;; Hardware stack levels used:    1
  6588 ;; Hardware stack levels required when called:    2
  6589 ;; This function calls:
  6590 ;;		_get_idrv_pwm1_duty
  6591 ;; This function is called by:
  6592 ;;		_pid_pwm1_idrv_b_b
  6593 ;;		_pid_pwm1_idrv_run
  6594 ;; This function uses a non-reentrant model
  6595 ;;
  6596                           
  6597                           
  6598                           ;psect for function _set_idrv_pwm1_duty
  6599  062F                     _set_idrv_pwm1_duty:	
  6600  062F                     l3040:	
  6601                           ;incstack = 0
  6602                           ; Regs used in _set_idrv_pwm1_duty: [wreg+pclath+cstack]
  6603                           
  6604                           
  6605                           ;sample.c: 48: uint16_t t16;
  6606                           ;sample.c: 49: t16=get_idrv_pwm1_duty();
  6607  062F  273B  3180         	fcall	_get_idrv_pwm1_duty
  6608  0631  0872               	movf	?_get_idrv_pwm1_duty+1,w
  6609  0632  00F6               	movwf	set_idrv_pwm1_duty@t16+1
  6610  0633  0871               	movf	?_get_idrv_pwm1_duty,w
  6611  0634  00F5               	movwf	set_idrv_pwm1_duty@t16
  6612                           
  6613                           ;sample.c: 50: if(t16==duty)return;
  6614  0635  0874               	movf	set_idrv_pwm1_duty@duty+1,w
  6615  0636  0676               	xorwf	set_idrv_pwm1_duty@t16+1,w
  6616  0637  1D03               	skipz
  6617  0638  2E3B               	goto	u1445
  6618  0639  0873               	movf	set_idrv_pwm1_duty@duty,w
  6619  063A  0675               	xorwf	set_idrv_pwm1_duty@t16,w
  6620  063B                     u1445:	
  6621  063B  1903               	btfsc	3,2
  6622  063C  0008               	return
  6623                           
  6624                           ;sample.c: 51: PWM1CONbits.EN = 0;
  6625  063D  139B               	bcf	27,7	;volatile
  6626                           
  6627                           ;sample.c: 52: PWM1DCL= (uint8_t)(duty&0xff);
  6628  063E  0873               	movf	set_idrv_pwm1_duty@duty,w
  6629  063F  0093               	movwf	19	;volatile
  6630                           
  6631                           ;sample.c: 53: PWM1DCH=(uint8_t)(duty>>8);
  6632  0640  0874               	movf	set_idrv_pwm1_duty@duty+1,w
  6633  0641  0094               	movwf	20	;volatile
  6634                           
  6635                           ;sample.c: 54: PWM1CONbits.EN = 1;
  6636  0642  179B               	bsf	27,7	;volatile
  6637  0643  0008               	return
  6638  0644                     __end_of_set_idrv_pwm1_duty:	
  6639  0644                     __ptext28:	
  6640 ;; *************** function _calc_temp_rs *****************
  6641 ;; Defined at:
  6642 ;;		line 154 in file "src/api/sample.c"
  6643 ;; Parameters:    Size  Location     Type
  6644 ;;		None
  6645 ;; Auto vars:     Size  Location     Type
  6646 ;;  y               4   13[BANK0 ] unsigned long 
  6647 ;;  x               4    9[BANK0 ] unsigned long 
  6648 ;; Return value:  Size  Location     Type
  6649 ;;                  4    5[BANK0 ] unsigned long 
  6650 ;; Registers used:
  6651 ;;		wreg, status,2, status,0, pclath, cstack
  6652 ;; Tracked objects:
  6653 ;;		On entry : 1F/0
  6654 ;;		On exit  : 1F/0
  6655 ;;		Unchanged: 0/0
  6656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6657 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6658 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6660 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6661 ;;Total ram usage:       12 bytes
  6662 ;; Hardware stack levels used:    1
  6663 ;; Hardware stack levels required when called:    2
  6664 ;; This function calls:
  6665 ;;		___lldiv
  6666 ;;		___lmul
  6667 ;; This function is called by:
  6668 ;;		_main
  6669 ;; This function uses a non-reentrant model
  6670 ;;
  6671                           
  6672                           
  6673                           ;psect for function _calc_temp_rs
  6674  0644                     _calc_temp_rs:	
  6675                           
  6676                           ;sample.c: 167: uint32_t x,y;
  6677                           ;sample.c: 168: y=12000UL;
  6678                           
  6679                           ;incstack = 0
  6680                           ; Regs used in _calc_temp_rs: [wreg+status,2+status,0+pclath+cstack]
  6681  0644  302E               	movlw	46
  6682  0645  01B0               	clrf	calc_temp_rs@y+3
  6683  0646  01AF               	clrf	calc_temp_rs@y+2
  6684  0647  00AE               	movwf	calc_temp_rs@y+1
  6685  0648  30E0               	movlw	224
  6686  0649  00AD               	movwf	calc_temp_rs@y
  6687                           
  6688                           ;sample.c: 169: y=y*rtAdcValueRsHi;
  6689  064A  0850               	movf	_rtAdcValueRsHi,w
  6690  064B  00F1               	movwf	___lmul@multiplier
  6691  064C  0851               	movf	_rtAdcValueRsHi+1,w
  6692  064D  00F2               	movwf	___lmul@multiplier+1
  6693  064E  01F3               	clrf	___lmul@multiplier+2
  6694  064F  01F4               	clrf	___lmul@multiplier+3
  6695  0650  0830               	movf	calc_temp_rs@y+3,w
  6696  0651  00F8               	movwf	___lmul@multiplicand+3
  6697  0652  082F               	movf	calc_temp_rs@y+2,w
  6698  0653  00F7               	movwf	___lmul@multiplicand+2
  6699  0654  082E               	movf	calc_temp_rs@y+1,w
  6700  0655  00F6               	movwf	___lmul@multiplicand+1
  6701  0656  082D               	movf	calc_temp_rs@y,w
  6702  0657  00F5               	movwf	___lmul@multiplicand
  6703  0658  25C8  3180         	fcall	___lmul
  6704  065A  0874               	movf	?___lmul+3,w
  6705  065B  00B0               	movwf	calc_temp_rs@y+3
  6706  065C  0873               	movf	?___lmul+2,w
  6707  065D  00AF               	movwf	calc_temp_rs@y+2
  6708  065E  0872               	movf	?___lmul+1,w
  6709  065F  00AE               	movwf	calc_temp_rs@y+1
  6710  0660  0871               	movf	?___lmul,w
  6711  0661  00AD               	movwf	calc_temp_rs@y
  6712                           
  6713                           ;sample.c: 170: x=rtAdcValueRsLo;
  6714  0662  0852               	movf	_rtAdcValueRsLo,w
  6715  0663  00A9               	movwf	calc_temp_rs@x
  6716  0664  0853               	movf	_rtAdcValueRsLo+1,w
  6717  0665  00AA               	movwf	calc_temp_rs@x+1
  6718  0666  01AB               	clrf	calc_temp_rs@x+2
  6719  0667  01AC               	clrf	calc_temp_rs@x+3
  6720                           
  6721                           ;sample.c: 171: y=y/x;
  6722  0668  082C               	movf	calc_temp_rs@x+3,w
  6723  0669  00F4               	movwf	___lldiv@divisor+3
  6724  066A  082B               	movf	calc_temp_rs@x+2,w
  6725  066B  00F3               	movwf	___lldiv@divisor+2
  6726  066C  082A               	movf	calc_temp_rs@x+1,w
  6727  066D  00F2               	movwf	___lldiv@divisor+1
  6728  066E  0829               	movf	calc_temp_rs@x,w
  6729  066F  00F1               	movwf	___lldiv@divisor
  6730  0670  0830               	movf	calc_temp_rs@y+3,w
  6731  0671  00F8               	movwf	___lldiv@dividend+3
  6732  0672  082F               	movf	calc_temp_rs@y+2,w
  6733  0673  00F7               	movwf	___lldiv@dividend+2
  6734  0674  082E               	movf	calc_temp_rs@y+1,w
  6735  0675  00F6               	movwf	___lldiv@dividend+1
  6736  0676  082D               	movf	calc_temp_rs@y,w
  6737  0677  00F5               	movwf	___lldiv@dividend
  6738  0678  25F0  3180         	fcall	___lldiv
  6739  067A  0874               	movf	?___lldiv+3,w
  6740  067B  00B0               	movwf	calc_temp_rs@y+3
  6741  067C  0873               	movf	?___lldiv+2,w
  6742  067D  00AF               	movwf	calc_temp_rs@y+2
  6743  067E  0872               	movf	?___lldiv+1,w
  6744  067F  00AE               	movwf	calc_temp_rs@y+1
  6745  0680  0871               	movf	?___lldiv,w
  6746  0681  00AD               	movwf	calc_temp_rs@y
  6747                           
  6748                           ;sample.c: 172: if(y<2000)y=2000;
  6749  0682  0830               	movf	calc_temp_rs@y+3,w
  6750  0683  1D03               	btfss	3,2
  6751  0684  2E94               	goto	l4150
  6752  0685  082F               	movf	calc_temp_rs@y+2,w
  6753  0686  1D03               	btfss	3,2
  6754  0687  2E94               	goto	l4150
  6755  0688  30D0               	movlw	208
  6756  0689  022D               	subwf	calc_temp_rs@y,w
  6757  068A  3007               	movlw	7
  6758  068B  3B2E               	subwfb	calc_temp_rs@y+1,w
  6759  068C  1803               	btfsc	3,0
  6760  068D  2E94               	goto	l4150
  6761  068E  3007               	movlw	7
  6762  068F  01B0               	clrf	calc_temp_rs@y+3
  6763  0690  01AF               	clrf	calc_temp_rs@y+2
  6764  0691  00AE               	movwf	calc_temp_rs@y+1
  6765  0692  30D0               	movlw	208
  6766  0693  00AD               	movwf	calc_temp_rs@y
  6767  0694                     l4150:	
  6768                           
  6769                           ;sample.c: 173: if(y>25000)y=25000;
  6770  0694  0830               	movf	calc_temp_rs@y+3,w
  6771  0695  1D03               	btfss	3,2
  6772  0696  2EA0               	goto	l4152
  6773  0697  082F               	movf	calc_temp_rs@y+2,w
  6774  0698  1D03               	btfss	3,2
  6775  0699  2EA0               	goto	l4152
  6776  069A  30A9               	movlw	169
  6777  069B  022D               	subwf	calc_temp_rs@y,w
  6778  069C  3061               	movlw	97
  6779  069D  3B2E               	subwfb	calc_temp_rs@y+1,w
  6780  069E  1C03               	btfss	3,0
  6781  069F  2EA6               	goto	l4154
  6782  06A0                     l4152:	
  6783  06A0  3061               	movlw	97
  6784  06A1  01B0               	clrf	calc_temp_rs@y+3
  6785  06A2  01AF               	clrf	calc_temp_rs@y+2
  6786  06A3  00AE               	movwf	calc_temp_rs@y+1
  6787  06A4  30A8               	movlw	168
  6788  06A5  00AD               	movwf	calc_temp_rs@y
  6789  06A6                     l4154:	
  6790                           
  6791                           ;sample.c: 174: y=y-1000;
  6792  06A6  3018               	movlw	24
  6793  06A7  07AD               	addwf	calc_temp_rs@y,f
  6794  06A8  30FC               	movlw	252
  6795  06A9  3DAE               	addwfc	calc_temp_rs@y+1,f
  6796  06AA  30FF               	movlw	255
  6797  06AB  3DAF               	addwfc	calc_temp_rs@y+2,f
  6798  06AC  3DB0               	addwfc	calc_temp_rs@y+3,f
  6799                           
  6800                           ;sample.c: 176: return y;
  6801  06AD  0830               	movf	calc_temp_rs@y+3,w
  6802  06AE  00A8               	movwf	?_calc_temp_rs+3
  6803  06AF  082F               	movf	calc_temp_rs@y+2,w
  6804  06B0  00A7               	movwf	?_calc_temp_rs+2
  6805  06B1  082E               	movf	calc_temp_rs@y+1,w
  6806  06B2  00A6               	movwf	?_calc_temp_rs+1
  6807  06B3  082D               	movf	calc_temp_rs@y,w
  6808  06B4  00A5               	movwf	?_calc_temp_rs
  6809  06B5  0008               	return
  6810  06B6                     __end_of_calc_temp_rs:	
  6811  06B6                     __ptext26:	
  6812 ;; *************** function _m_mem_cpy_len *****************
  6813 ;; Defined at:
  6814 ;;		line 47 in file "src/depend/m_string.c"
  6815 ;; Parameters:    Size  Location     Type
  6816 ;;  d               2    1[COMMON] PTR unsigned char 
  6817 ;;		 -> crc_verify@expected(2), modbusBuf(64), 
  6818 ;;  s               2    3[COMMON] PTR unsigned char 
  6819 ;;		 -> modbusBuf(64), sysData(92), eusartRxBuffer(64), 
  6820 ;;  len             2    5[COMMON] unsigned int 
  6821 ;; Auto vars:     Size  Location     Type
  6822 ;;		None
  6823 ;; Return value:  Size  Location     Type
  6824 ;;                  1    wreg      void 
  6825 ;; Registers used:
  6826 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6827 ;; Tracked objects:
  6828 ;;		On entry : 1F/0
  6829 ;;		On exit  : 1F/0
  6830 ;;		Unchanged: 1F/0
  6831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6832 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6834 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6835 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6836 ;;Total ram usage:        7 bytes
  6837 ;; Hardware stack levels used:    1
  6838 ;; Hardware stack levels required when called:    1
  6839 ;; This function calls:
  6840 ;;		Nothing
  6841 ;; This function is called by:
  6842 ;;		_main
  6843 ;;		_crc_verify
  6844 ;; This function uses a non-reentrant model
  6845 ;;
  6846                           
  6847                           
  6848                           ;psect for function _m_mem_cpy_len
  6849  06B6                     _m_mem_cpy_len:	
  6850  06B6                     l2920:	
  6851                           ;m_string.c: 50: while(len)
  6852                           
  6853                           ;incstack = 0
  6854                           ; Regs used in _m_mem_cpy_len: [wreg+fsr1l+fsr1h+status,2+status,0]
  6855                           
  6856  06B6  0875               	movf	m_mem_cpy_len@len,w
  6857  06B7  0476               	iorwf	m_mem_cpy_len@len+1,w
  6858  06B8  1903               	btfsc	3,2
  6859  06B9  0008               	return
  6860                           
  6861                           ;m_string.c: 51: {
  6862                           ;m_string.c: 52: *d++=*s++;
  6863  06BA  0873               	movf	m_mem_cpy_len@s,w
  6864  06BB  0086               	movwf	6
  6865  06BC  0874               	movf	m_mem_cpy_len@s+1,w
  6866  06BD  0087               	movwf	7
  6867  06BE  0801               	movf	1,w
  6868  06BF  00F7               	movwf	??_m_mem_cpy_len
  6869  06C0  0871               	movf	m_mem_cpy_len@d,w
  6870  06C1  0086               	movwf	6
  6871  06C2  0872               	movf	m_mem_cpy_len@d+1,w
  6872  06C3  0087               	movwf	7
  6873  06C4  0877               	movf	??_m_mem_cpy_len,w
  6874  06C5  0081               	movwf	1
  6875  06C6  0AF3               	incf	m_mem_cpy_len@s,f
  6876  06C7  1903               	skipnz
  6877  06C8  0AF4               	incf	m_mem_cpy_len@s+1,f
  6878  06C9  0AF1               	incf	m_mem_cpy_len@d,f
  6879  06CA  1903               	skipnz
  6880  06CB  0AF2               	incf	m_mem_cpy_len@d+1,f
  6881                           
  6882                           ;m_string.c: 53: len--;
  6883  06CC  3001               	movlw	1
  6884  06CD  02F5               	subwf	m_mem_cpy_len@len,f
  6885  06CE  3000               	movlw	0
  6886  06CF  3BF6               	subwfb	m_mem_cpy_len@len+1,f
  6887  06D0  2EB6               	goto	l2920
  6888  06D1                     __end_of_m_mem_cpy_len:	
  6889  06D1                     __ptext16:	
  6890 ;; *************** function _sys_data_save *****************
  6891 ;; Defined at:
  6892 ;;		line 119 in file "src/api/sysData.c"
  6893 ;; Parameters:    Size  Location     Type
  6894 ;;		None
  6895 ;; Auto vars:     Size  Location     Type
  6896 ;;		None
  6897 ;; Return value:  Size  Location     Type
  6898 ;;                  1    wreg      void 
  6899 ;; Registers used:
  6900 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6901 ;; Tracked objects:
  6902 ;;		On entry : 1E/1
  6903 ;;		On exit  : 1F/0
  6904 ;;		Unchanged: 0/0
  6905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6909 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6910 ;;Total ram usage:        0 bytes
  6911 ;; Hardware stack levels used:    1
  6912 ;; Hardware stack levels required when called:    3
  6913 ;; This function calls:
  6914 ;;		_crc_append
  6915 ;;		_my_flash_read_system_erase
  6916 ;;		_my_flash_system_write
  6917 ;; This function is called by:
  6918 ;;		_modbus_response_write_single_register
  6919 ;;		_main
  6920 ;; This function uses a non-reentrant model
  6921 ;;
  6922                           
  6923                           
  6924                           ;psect for function _sys_data_save
  6925  06D1                     _sys_data_save:	
  6926                           
  6927                           ;sysData.c: 121: crc_append((uint8_t*)&sysData,sizeof(sysData_t)-2);
  6928                           
  6929                           ;incstack = 0
  6930                           ; Regs used in _sys_data_save: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6931  06D1  3084               	movlw	132
  6932  06D2  0020               	movlb	0	; select bank0
  6933  06D3  277E  3180         	fcall	PL38	;call to abstracted procedure
  6934  06D5  26DC  3180         	fcall	_crc_append
  6935                           
  6936                           ;sysData.c: 122: my_flash_read_system_erase();
  6937  06D7  270B  3180         	fcall	_my_flash_read_system_erase
  6938                           
  6939                           ;sysData.c: 123: my_flash_system_write((uint8_t*)&sysData,sizeof(sysData_t));
  6940  06D9  276E               	fcall	PL30	;call to abstracted procedure
  6941  06DA  318C  2CF7         	ljmp	l2760
  6942  06DC                     __end_of_sys_data_save:	
  6943  06DC                     __ptext24:	
  6944 ;; *************** function _crc_append *****************
  6945 ;; Defined at:
  6946 ;;		line 143 in file "src/depend/crc16.c"
  6947 ;; Parameters:    Size  Location     Type
  6948 ;;  message         2    0[BANK0 ] PTR unsigned char 
  6949 ;;		 -> modbusBuf(64), sysData(92), 
  6950 ;;  n               2    2[BANK0 ] unsigned int 
  6951 ;; Auto vars:     Size  Location     Type
  6952 ;;  crc             2    9[BANK0 ] unsigned int 
  6953 ;; Return value:  Size  Location     Type
  6954 ;;                  1    wreg      void 
  6955 ;; Registers used:
  6956 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6957 ;; Tracked objects:
  6958 ;;		On entry : 1F/0
  6959 ;;		On exit  : 1F/0
  6960 ;;		Unchanged: 0/0
  6961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6962 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6963 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6964 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6965 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6966 ;;Total ram usage:       11 bytes
  6967 ;; Hardware stack levels used:    1
  6968 ;; Hardware stack levels required when called:    2
  6969 ;; This function calls:
  6970 ;;		_crc_sum
  6971 ;; This function is called by:
  6972 ;;		_sys_data_init
  6973 ;;		_sys_data_save
  6974 ;;		_modbus_response_illgeal_function
  6975 ;;		_modbus_response_write_single_register
  6976 ;;		_modbus_response_command
  6977 ;; This function uses a non-reentrant model
  6978 ;;
  6979                           
  6980                           
  6981                           ;psect for function _crc_append
  6982  06DC                     _crc_append:	
  6983                           
  6984                           ;crc16.c: 145: uint16_t crc;
  6985                           ;crc16.c: 146: crc = crc_sum(message, n);
  6986                           
  6987                           ;incstack = 0
  6988                           ; Regs used in _crc_append: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6989  06DC  0821               	movf	crc_append@message+1,w
  6990  06DD  00F2               	movwf	crc_sum@buf+1
  6991  06DE  0820               	movf	crc_append@message,w
  6992  06DF  00F1               	movwf	crc_sum@buf
  6993  06E0  0823               	movf	crc_append@n+1,w
  6994  06E1  00F4               	movwf	crc_sum@len+1
  6995  06E2  0822               	movf	crc_append@n,w
  6996  06E3  00F3               	movwf	crc_sum@len
  6997  06E4  318C  248F         	fcall	_crc_sum
  6998  06E6  0872               	movf	?_crc_sum+1,w
  6999  06E7  00AA               	movwf	crc_append@crc+1
  7000  06E8  0871               	movf	?_crc_sum,w
  7001  06E9  00A9               	movwf	crc_append@crc
  7002                           
  7003                           ;crc16.c: 147: message[n] = (uint8_t)(crc & 0xff);
  7004  06EA  0822               	movf	crc_append@n,w
  7005  06EB  0720               	addwf	crc_append@message,w
  7006  06EC  00A4               	movwf	??_crc_append
  7007  06ED  0823               	movf	crc_append@n+1,w
  7008  06EE  3D21               	addwfc	crc_append@message+1,w
  7009  06EF  00A5               	movwf	??_crc_append+1
  7010  06F0  0824               	movf	??_crc_append,w
  7011  06F1  0086               	movwf	6
  7012  06F2  0825               	movf	??_crc_append+1,w
  7013  06F3  0087               	movwf	7
  7014  06F4  0829               	movf	crc_append@crc,w
  7015  06F5  0081               	movwf	1
  7016                           
  7017                           ;crc16.c: 148: message[n+1] = (uint8_t)((crc >> 8) & 0xff);
  7018  06F6  082A               	movf	crc_append@crc+1,w
  7019  06F7  00A4               	movwf	??_crc_append
  7020  06F8  0822               	movf	crc_append@n,w
  7021  06F9  0720               	addwf	crc_append@message,w
  7022  06FA  00A5               	movwf	??_crc_append+1
  7023  06FB  0823               	movf	crc_append@n+1,w
  7024  06FC  3D21               	addwfc	crc_append@message+1,w
  7025  06FD  00A6               	movwf	??_crc_append+2
  7026  06FE  0825               	movf	??_crc_append+1,w
  7027  06FF  3E01               	addlw	1
  7028  0700  00A7               	movwf	??_crc_append+3
  7029  0701  3000               	movlw	0
  7030  0702  3D26               	addwfc	??_crc_append+2,w
  7031  0703  00A8               	movwf	??_crc_append+4
  7032  0704  0827               	movf	??_crc_append+3,w
  7033  0705  0086               	movwf	6
  7034  0706  0828               	movf	??_crc_append+4,w
  7035  0707  0087               	movwf	7
  7036  0708  0824               	movf	??_crc_append,w
  7037  0709  0081               	movwf	1
  7038  070A  0008               	return
  7039  070B                     __end_of_crc_append:	
  7040  070B                     __ptext18:	
  7041 ;; *************** function _my_flash_read_system_erase *****************
  7042 ;; Defined at:
  7043 ;;		line 8 in file "src/api/sysData.c"
  7044 ;; Parameters:    Size  Location     Type
  7045 ;;		None
  7046 ;; Auto vars:     Size  Location     Type
  7047 ;;		None
  7048 ;; Return value:  Size  Location     Type
  7049 ;;                  1    wreg      void 
  7050 ;; Registers used:
  7051 ;;		wreg, status,2, status,0, pclath, cstack
  7052 ;; Tracked objects:
  7053 ;;		On entry : 1F/0
  7054 ;;		On exit  : 1F/3
  7055 ;;		Unchanged: 0/0
  7056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7060 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7061 ;;Total ram usage:        0 bytes
  7062 ;; Hardware stack levels used:    1
  7063 ;; Hardware stack levels required when called:    2
  7064 ;; This function calls:
  7065 ;;		_FLASH_EraseBlock
  7066 ;; This function is called by:
  7067 ;;		_sys_data_init
  7068 ;;		_sys_data_save
  7069 ;; This function uses a non-reentrant model
  7070 ;;
  7071                           
  7072                           
  7073                           ;psect for function _my_flash_read_system_erase
  7074  070B                     _my_flash_read_system_erase:	
  7075                           
  7076                           ;sysData.c: 15: FLASH_EraseBlock(0x1f80);
  7077                           
  7078                           ;incstack = 0
  7079                           ; Regs used in _my_flash_read_system_erase: [wreg+status,2+status,0+pclath+cstack]
  7080  070B  3080               	movlw	128
  7081  070C  00F1               	movwf	FLASH_EraseBlock@startAddr
  7082  070D  301F               	movlw	31
  7083  070E  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  7084  070F  2722  3180         	fcall	_FLASH_EraseBlock
  7085                           
  7086                           ;sysData.c: 16: FLASH_EraseBlock(0x1f80+32);
  7087  0711  30A0               	movlw	160
  7088  0712  00F1               	movwf	FLASH_EraseBlock@startAddr
  7089  0713  301F               	movlw	31
  7090  0714  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  7091  0715  2722  3180         	fcall	_FLASH_EraseBlock
  7092                           
  7093                           ;sysData.c: 17: FLASH_EraseBlock(0x1f80+64);
  7094  0717  30C0               	movlw	192
  7095  0718  00F1               	movwf	FLASH_EraseBlock@startAddr
  7096  0719  301F               	movlw	31
  7097  071A  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  7098  071B  2722  3180         	fcall	_FLASH_EraseBlock
  7099                           
  7100                           ;sysData.c: 18: FLASH_EraseBlock(0x1f80+96);
  7101  071D  30E0               	movlw	224
  7102  071E  00F1               	movwf	FLASH_EraseBlock@startAddr
  7103  071F  301F               	movlw	31
  7104  0720  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  7105  0721  2F22               	ljmp	l2700
  7106  0722                     __end_of_my_flash_read_system_erase:	
  7107  0722                     __ptext19:	
  7108 ;; *************** function _FLASH_EraseBlock *****************
  7109 ;; Defined at:
  7110 ;;		line 147 in file "mcc_generated_files/memory.c"
  7111 ;; Parameters:    Size  Location     Type
  7112 ;;  startAddr       2    1[COMMON] unsigned int 
  7113 ;; Auto vars:     Size  Location     Type
  7114 ;;  GIEBitValue     1    3[COMMON] unsigned char 
  7115 ;; Return value:  Size  Location     Type
  7116 ;;                  1    wreg      void 
  7117 ;; Registers used:
  7118 ;;		wreg, status,2, status,0
  7119 ;; Tracked objects:
  7120 ;;		On entry : 1C/0
  7121 ;;		On exit  : 1F/3
  7122 ;;		Unchanged: 0/0
  7123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7124 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7125 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7127 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7128 ;;Total ram usage:        3 bytes
  7129 ;; Hardware stack levels used:    1
  7130 ;; Hardware stack levels required when called:    1
  7131 ;; This function calls:
  7132 ;;		Nothing
  7133 ;; This function is called by:
  7134 ;;		_my_flash_read_system_erase
  7135 ;; This function uses a non-reentrant model
  7136 ;;
  7137                           
  7138                           
  7139                           ;psect for function _FLASH_EraseBlock
  7140  0722                     _FLASH_EraseBlock:	
  7141  0722                     l2700:	
  7142                           ;incstack = 0
  7143                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  7144                           
  7145                           
  7146                           ;memory.c: 149: uint8_t GIEBitValue = INTCONbits.GIE;
  7147  0722  3000               	movlw	0
  7148  0723  1B8B               	btfsc	11,7	;volatile
  7149  0724  3001               	movlw	1
  7150  0725  00F3               	movwf	FLASH_EraseBlock@GIEBitValue
  7151                           
  7152                           ;memory.c: 152: INTCONbits.GIE = 0;
  7153  0726  138B               	bcf	11,7	;volatile
  7154                           
  7155                           ;memory.c: 154: PMADRL = (startAddr & 0xFF);
  7156  0727  0871               	movf	FLASH_EraseBlock@startAddr,w
  7157  0728  0023               	movlb	3	; select bank3
  7158  0729  0091               	movwf	17	;volatile
  7159                           
  7160                           ;memory.c: 156: PMADRH = ((startAddr & 0xFF00) >> 8);
  7161  072A  0872               	movf	FLASH_EraseBlock@startAddr+1,w
  7162  072B  0092               	movwf	18	;volatile
  7163                           
  7164                           ;memory.c: 159: PMCON1bits.CFGS = 0;
  7165  072C  1315               	bcf	21,6	;volatile
  7166                           
  7167                           ;memory.c: 160: PMCON1bits.FREE = 1;
  7168  072D  1615               	bsf	21,4	;volatile
  7169                           
  7170                           ;memory.c: 161: PMCON1bits.WREN = 1;
  7171  072E  1515               	bsf	21,2	;volatile
  7172                           
  7173                           ;memory.c: 164: PMCON2 = 0x55;
  7174  072F  3055               	movlw	85
  7175  0730  0096               	movwf	22	;volsfr
  7176                           
  7177                           ;memory.c: 165: PMCON2 = 0xAA;
  7178  0731  30AA               	movlw	170
  7179  0732  0096               	movwf	22	;volsfr
  7180                           
  7181                           ;memory.c: 166: PMCON1bits.WR = 1;
  7182  0733  1495               	bsf	21,1	;volatile
  7183                           
  7184                           ;memory.c: 167: __nop();
  7185  0734  0000               	nop
  7186                           
  7187                           ;memory.c: 168: __nop();
  7188  0735  0000               	nop
  7189                           
  7190                           ;memory.c: 170: PMCON1bits.WREN = 0;
  7191  0736  0023               	movlb	3	; select bank3
  7192  0737  1115               	bcf	21,2	;volatile
  7193                           
  7194                           ;memory.c: 171: INTCONbits.GIE = GIEBitValue;
  7195  0738  0C73               	rrf	FLASH_EraseBlock@GIEBitValue,w
  7196  0739  318D  2D70         	ljmp	PL34	;call to abstracted procedure
  7197  073B                     __end_of_FLASH_EraseBlock:	
  7198  073B                     __ptext13:	
  7199 ;; *************** function _get_idrv_pwm1_duty *****************
  7200 ;; Defined at:
  7201 ;;		line 41 in file "src/api/sample.c"
  7202 ;; Parameters:    Size  Location     Type
  7203 ;;		None
  7204 ;; Auto vars:     Size  Location     Type
  7205 ;;		None
  7206 ;; Return value:  Size  Location     Type
  7207 ;;                  2    1[COMMON] unsigned int 
  7208 ;; Registers used:
  7209 ;;		wreg
  7210 ;; Tracked objects:
  7211 ;;		On entry : 1F/0
  7212 ;;		On exit  : 1F/1B
  7213 ;;		Unchanged: 0/0
  7214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7215 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7218 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7219 ;;Total ram usage:        2 bytes
  7220 ;; Hardware stack levels used:    1
  7221 ;; Hardware stack levels required when called:    1
  7222 ;; This function calls:
  7223 ;;		Nothing
  7224 ;; This function is called by:
  7225 ;;		_set_idrv_pwm1_duty
  7226 ;; This function uses a non-reentrant model
  7227 ;;
  7228                           
  7229                           
  7230                           ;psect for function _get_idrv_pwm1_duty
  7231  073B                     _get_idrv_pwm1_duty:	
  7232                           
  7233                           ;sample.c: 43: return ((PWM1DCH<<8)|PWM1DCL);
  7234                           
  7235                           ;incstack = 0
  7236                           ; Regs used in _get_idrv_pwm1_duty: [wreg]
  7237  073B  003B               	movlb	27	; select bank27
  7238  073C  0814               	movf	20,w	;volatile
  7239  073D  00F2               	movwf	?_get_idrv_pwm1_duty+1
  7240  073E  01F1               	clrf	?_get_idrv_pwm1_duty
  7241  073F  0813               	movf	19,w	;volatile
  7242  0740  04F1               	iorwf	?_get_idrv_pwm1_duty,f
  7243  0741  0008               	return
  7244  0742                     __end_of_get_idrv_pwm1_duty:	
  7245  0742                     PL10:	
  7246  0742  01A6               	clrf	___aldiv@divisor+2
  7247  0743  01A7               	clrf	___aldiv@divisor+3
  7248  0744  0021               	movlb	1	; select bank1
  7249  0745  0855               	movf	(_bbtu+3)^(0+128),w
  7250  0746  0020               	movlb	0	; select bank0
  7251  0747  00AB               	movwf	___aldiv@dividend+3
  7252  0748  0021               	movlb	1	; select bank1
  7253  0749  0854               	movf	(_bbtu+2)^(0+128),w
  7254  074A  0020               	movlb	0	; select bank0
  7255  074B  00AA               	movwf	___aldiv@dividend+2
  7256  074C  0021               	movlb	1	; select bank1
  7257  074D  0853               	movf	(_bbtu+1)^(0+128),w
  7258  074E  0020               	movlb	0	; select bank0
  7259  074F  00A9               	movwf	___aldiv@dividend+1
  7260  0750  0021               	movlb	1	; select bank1
  7261  0751  0852               	movf	_bbtu^(0+128),w
  7262  0752  0020               	movlb	0	; select bank0
  7263  0753  00A8               	movwf	___aldiv@dividend
  7264  0754  0008               	return
  7265  0755                     __end_ofPL10:	
  7266  0755                     PL14:	
  7267  0755  0874               	movf	?___lmul+3,w
  7268  0756  00AB               	movwf	___aldiv@dividend+3
  7269  0757  0873               	movf	?___lmul+2,w
  7270  0758  00AA               	movwf	___aldiv@dividend+2
  7271  0759  0872               	movf	?___lmul+1,w
  7272  075A  00A9               	movwf	___aldiv@dividend+1
  7273  075B  0871               	movf	?___lmul,w
  7274  075C  00A8               	movwf	___aldiv@dividend
  7275  075D  0008               	return
  7276  075E                     __end_ofPL14:	
  7277  075E                     PL18:	
  7278  075E  0020               	movlb	0	; select bank0
  7279  075F  00A4               	movwf	___aldiv@divisor
  7280  0760  01A5               	clrf	___aldiv@divisor+1
  7281  0761  01A6               	clrf	___aldiv@divisor+2
  7282  0762  01A7               	clrf	___aldiv@divisor+3
  7283  0763  0021               	movlb	1	; select bank1
  7284  0764  0008               	return
  7285  0765                     __end_ofPL18:	
  7286  0765                     PL22:	
  7287  0765  0874               	movf	?___lldiv+3,w
  7288  0766  00B4               	movwf	calc_temp_rc@y+3
  7289  0767  0873               	movf	?___lldiv+2,w
  7290  0768  00B3               	movwf	calc_temp_rc@y+2
  7291  0769  0872               	movf	?___lldiv+1,w
  7292  076A  00B2               	movwf	calc_temp_rc@y+1
  7293  076B  0871               	movf	?___lldiv,w
  7294  076C  00B1               	movwf	calc_temp_rc@y
  7295  076D  0008               	return
  7296  076E                     __end_ofPL22:	
  7297  076E                     PL30:	
  7298  076E  3084               	movlw	132
  7299  076F  00F1               	movwf	my_flash_system_write@buf
  7300  0770  3023               	movlw	35
  7301  0771  00F2               	movwf	my_flash_system_write@buf+1
  7302  0772  305C               	movlw	92
  7303  0773  00F3               	movwf	my_flash_system_write@len
  7304  0774  01F4               	clrf	my_flash_system_write@len+1
  7305  0775  0008               	return
  7306  0776                     __end_ofPL30:	
  7307  0776                     PL32:	
  7308  0776  3F40               	moviw [0]fsr1
  7309  0777  0020               	movlb	0	; select bank0
  7310  0778  00C8               	movwf	??_main
  7311  0779  3F41               	moviw [1]fsr1
  7312  077A  00C9               	movwf	??_main+1
  7313  077B  0848               	movf	??_main,w
  7314  077C  0021               	movlb	1	; select bank1
  7315  077D  0008               	return
  7316  077E                     __end_ofPL32:	
  7317  077E                     PL38:	
  7318  077E  00A0               	movwf	crc_append@message
  7319  077F  3023               	movlw	35
  7320  0780  00A1               	movwf	crc_append@message+1
  7321  0781  305A               	movlw	90
  7322  0782  00A2               	movwf	crc_append@n
  7323  0783  01A3               	clrf	crc_append@n+1
  7324  0784  0008               	return
  7325  0785                     __end_ofPL38:	
  7326  0785                     PL42:	
  7327  0785  00F1               	movwf	___lmul@multiplier
  7328  0786  300A               	movlw	10
  7329  0787  00F5               	movwf	___lmul@multiplicand
  7330  0788  01F6               	clrf	___lmul@multiplicand+1
  7331  0789  01F7               	clrf	___lmul@multiplicand+2
  7332  078A  01F8               	clrf	___lmul@multiplicand+3
  7333  078B  0008               	return
  7334  078C                     __end_ofPL42:	
  7335  078C                     PL44:	
  7336  078C  3063               	movlw	99
  7337  078D  009E               	movwf	30	;volatile
  7338  078E  019F               	clrf	31	;volatile
  7339  078F  019B               	clrf	27	;volatile
  7340  0790  019C               	clrf	28	;volatile
  7341  0791  0008               	return
  7342  0792                     __end_ofPL44:	
  7343  0792                     PL46:	
  7344  0792  3FC1               	movwi [1]fsr1
  7345  0793  3084               	movlw	132
  7346  0794  0086               	movwf	6
  7347  0795  3023               	movlw	35
  7348  0796  0087               	movwf	7
  7349  0797  0008               	return
  7350  0798                     __end_ofPL46:	
  7351  0798                     PL48:	
  7352  0798  3055               	movlw	85
  7353  0799  003C               	movlb	28	; select bank28
  7354  079A  008F               	movwf	15	;volatile
  7355  079B  30AA               	movlw	170
  7356  079C  008F               	movwf	15	;volatile
  7357  079D  0008               	return
  7358  079E                     __end_ofPL48:	
  7359  079E                     PL56:	
  7360  079E  3084               	movlw	132
  7361  079F  0086               	movwf	6
  7362  07A0  3023               	movlw	35
  7363  07A1  0087               	movwf	7
  7364  07A2  3455               	retlw	85
  7365  07A3                     __end_ofPL56:	
  7366  07A3                     __ptext1:	
  7367 ;; *************** function _uart_received_start *****************
  7368 ;; Defined at:
  7369 ;;		line 49 in file "src/api/my_uart.c"
  7370 ;; Parameters:    Size  Location     Type
  7371 ;;		None
  7372 ;; Auto vars:     Size  Location     Type
  7373 ;;		None
  7374 ;; Return value:  Size  Location     Type
  7375 ;;                  1    wreg      void 
  7376 ;; Registers used:
  7377 ;;		status,2
  7378 ;; Tracked objects:
  7379 ;;		On entry : 1F/0
  7380 ;;		On exit  : 1F/0
  7381 ;;		Unchanged: 0/0
  7382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7384 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7386 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7387 ;;Total ram usage:        0 bytes
  7388 ;; Hardware stack levels used:    1
  7389 ;; Hardware stack levels required when called:    1
  7390 ;; This function calls:
  7391 ;;		Nothing
  7392 ;; This function is called by:
  7393 ;;		_main
  7394 ;; This function uses a non-reentrant model
  7395 ;;
  7396                           
  7397                           
  7398                           ;psect for function _uart_received_start
  7399  07A3                     _uart_received_start:	
  7400                           
  7401                           ;my_uart.c: 51: eusartRxCount=0;
  7402                           
  7403                           ;incstack = 0
  7404                           ; Regs used in _uart_received_start: [status,2]
  7405  07A3  01FC               	clrf	_eusartRxCount	;volatile
  7406                           
  7407                           ;my_uart.c: 52: RCSTAbits.CREN=0;
  7408  07A4  0023               	movlb	3	; select bank3
  7409  07A5  121D               	bcf	29,4	;volatile
  7410                           
  7411                           ;my_uart.c: 53: PIE1bits.RCIE = 0;
  7412  07A6  0021               	movlb	1	; select bank1
  7413  07A7  1291               	bcf	17,5	;volatile
  7414                           
  7415                           ;my_uart.c: 54: PIR1bits.RCIF=0;
  7416  07A8  0020               	movlb	0	; select bank0
  7417  07A9  1291               	bcf	17,5	;volatile
  7418                           
  7419                           ;my_uart.c: 56: RCSTAbits.CREN=1;
  7420  07AA  0023               	movlb	3	; select bank3
  7421  07AB  161D               	bsf	29,4	;volatile
  7422                           
  7423                           ;my_uart.c: 57: PIE1bits.RCIE = 1;
  7424  07AC  0021               	movlb	1	; select bank1
  7425  07AD  1691               	bsf	17,5	;volatile
  7426                           
  7427                           ;my_uart.c: 59: eusartRxIdleTime_ms=0;
  7428  07AE  0020               	movlb	0	; select bank0
  7429  07AF  01DB               	clrf	_eusartRxIdleTime_ms	;volatile
  7430  07B0  0008               	return
  7431  07B1                     __end_of_uart_received_start:	
  7432  07B1                     __ptext48:	
  7433 ;; *************** function _EUSART_Initialize *****************
  7434 ;; Defined at:
  7435 ;;		line 55 in file "mcc_generated_files/eusart.c"
  7436 ;; Parameters:    Size  Location     Type
  7437 ;;		None
  7438 ;; Auto vars:     Size  Location     Type
  7439 ;;		None
  7440 ;; Return value:  Size  Location     Type
  7441 ;;                  1    wreg      void 
  7442 ;; Registers used:
  7443 ;;		wreg
  7444 ;; Tracked objects:
  7445 ;;		On entry : 1F/0
  7446 ;;		On exit  : 1F/1
  7447 ;;		Unchanged: 0/0
  7448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7452 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7453 ;;Total ram usage:        0 bytes
  7454 ;; Hardware stack levels used:    1
  7455 ;; Hardware stack levels required when called:    1
  7456 ;; This function calls:
  7457 ;;		Nothing
  7458 ;; This function is called by:
  7459 ;;		_SYSTEM_Initialize
  7460 ;; This function uses a non-reentrant model
  7461 ;;
  7462                           
  7463                           
  7464                           ;psect for function _EUSART_Initialize
  7465  07B1                     _EUSART_Initialize:	
  7466  07B1                     l3036:	
  7467                           ;incstack = 0
  7468                           ; Regs used in _EUSART_Initialize: [wreg]
  7469                           
  7470                           
  7471                           ;eusart.c: 60: BAUDCON = 0x08;
  7472  07B1  3008               	movlw	8
  7473  07B2  0023               	movlb	3	; select bank3
  7474  07B3  009F               	movwf	31	;volatile
  7475                           
  7476                           ;eusart.c: 63: RCSTA = 0x90;
  7477  07B4  3090               	movlw	144
  7478  07B5  009D               	movwf	29	;volatile
  7479                           
  7480                           ;eusart.c: 66: TXSTA = 0x24;
  7481  07B6  3024               	movlw	36
  7482  07B7  009E               	movwf	30	;volatile
  7483                           
  7484                           ;eusart.c: 70: SPBRGL = 0xA0;
  7485  07B8  30A0               	movlw	160
  7486  07B9  009B               	movwf	27	;volatile
  7487                           
  7488                           ;eusart.c: 75: SPBRGH = 0x01;
  7489  07BA  3001               	movlw	1
  7490  07BB  009C               	movwf	28	;volatile
  7491                           
  7492                           ;eusart.c: 76: PIE1bits.RCIE = 1;
  7493  07BC  0021               	movlb	1	; select bank1
  7494  07BD  1691               	bsf	17,5	;volatile
  7495  07BE  0008               	return
  7496  07BF                     __end_of_EUSART_Initialize:	
  7497  07BF                     __ptext40:	
  7498 ;; *************** function _TMR2_Initialize *****************
  7499 ;; Defined at:
  7500 ;;		line 63 in file "mcc_generated_files/tmr2.c"
  7501 ;; Parameters:    Size  Location     Type
  7502 ;;		None
  7503 ;; Auto vars:     Size  Location     Type
  7504 ;;		None
  7505 ;; Return value:  Size  Location     Type
  7506 ;;                  1    wreg      void 
  7507 ;; Registers used:
  7508 ;;		wreg, status,2, status,0, pclath, cstack
  7509 ;; Tracked objects:
  7510 ;;		On entry : 1F/1
  7511 ;;		On exit  : 1F/0
  7512 ;;		Unchanged: 0/0
  7513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7517 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7518 ;;Total ram usage:        0 bytes
  7519 ;; Hardware stack levels used:    1
  7520 ;; Hardware stack levels required when called:    2
  7521 ;; This function calls:
  7522 ;;		_TMR2_SetInterruptHandler
  7523 ;;		_TMR2_StartTimer
  7524 ;; This function is called by:
  7525 ;;		_SYSTEM_Initialize
  7526 ;; This function uses a non-reentrant model
  7527 ;;
  7528                           
  7529                           
  7530                           ;psect for function _TMR2_Initialize
  7531  07BF                     _TMR2_Initialize:	
  7532                           
  7533                           ;tmr2.c: 68: T2CON = 0x4B;
  7534                           
  7535                           ;incstack = 0
  7536                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7537  07BF  304B               	movlw	75
  7538  07C0  0020               	movlb	0	; select bank0
  7539  07C1  009C               	movwf	28	;volatile
  7540                           
  7541                           ;tmr2.c: 71: PR2 = 0x7C;
  7542  07C2  307C               	movlw	124
  7543  07C3  009B               	movwf	27	;volatile
  7544                           
  7545                           ;tmr2.c: 74: TMR2 = 0x00;
  7546  07C4  019A               	clrf	26	;volatile
  7547                           
  7548                           ;tmr2.c: 77: PIR1bits.TMR2IF = 0;
  7549  07C5  1091               	bcf	17,1	;volatile
  7550                           
  7551                           ;tmr2.c: 80: PIE1bits.TMR2IE = 1;
  7552  07C6  0021               	movlb	1	; select bank1
  7553  07C7  1491               	bsf	17,1	;volatile
  7554                           
  7555                           ;tmr2.c: 83: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
  7556  07C8  3000               	movlw	0
  7557  07C9  01F1               	clrf	TMR2_SetInterruptHandler@InterruptHandler
  7558  07CA  01F2               	clrf	TMR2_SetInterruptHandler@InterruptHandler+1
  7559  07CB  27CE  3180         	fcall	_TMR2_SetInterruptHandler
  7560                           
  7561                           ;tmr2.c: 86: TMR2_StartTimer();
  7562  07CD  2FCF               	ljmp	l2824
  7563  07CE                     __end_of_TMR2_Initialize:	
  7564  07CE                     __ptext42:	
  7565 ;; *************** function _TMR2_SetInterruptHandler *****************
  7566 ;; Defined at:
  7567 ;;		line 142 in file "mcc_generated_files/tmr2.c"
  7568 ;; Parameters:    Size  Location     Type
  7569 ;;  InterruptHan    2    1[COMMON] PTR FTN()void 
  7570 ;;		 -> TMR2_DefaultInterruptHandler(1), 
  7571 ;; Auto vars:     Size  Location     Type
  7572 ;;		None
  7573 ;; Return value:  Size  Location     Type
  7574 ;;                  1    wreg      void 
  7575 ;; Registers used:
  7576 ;;		None
  7577 ;; Tracked objects:
  7578 ;;		On entry : 1F/1
  7579 ;;		On exit  : 1F/1
  7580 ;;		Unchanged: 1F/0
  7581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7582 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7585 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7586 ;;Total ram usage:        2 bytes
  7587 ;; Hardware stack levels used:    1
  7588 ;; Hardware stack levels required when called:    1
  7589 ;; This function calls:
  7590 ;;		Nothing
  7591 ;; This function is called by:
  7592 ;;		_TMR2_Initialize
  7593 ;; This function uses a non-reentrant model
  7594 ;;
  7595                           
  7596                           
  7597                           ;psect for function _TMR2_SetInterruptHandler
  7598  07CE                     _TMR2_SetInterruptHandler:	
  7599                           
  7600                           ;incstack = 0
  7601                           ; Regs used in _TMR2_SetInterruptHandler: []
  7602  07CE  0008               	return
  7603  07CF                     __end_of_TMR2_SetInterruptHandler:	
  7604  07CF                     __ptext41:	
  7605 ;; *************** function _TMR2_StartTimer *****************
  7606 ;; Defined at:
  7607 ;;		line 89 in file "mcc_generated_files/tmr2.c"
  7608 ;; Parameters:    Size  Location     Type
  7609 ;;		None
  7610 ;; Auto vars:     Size  Location     Type
  7611 ;;		None
  7612 ;; Return value:  Size  Location     Type
  7613 ;;                  1    wreg      void 
  7614 ;; Registers used:
  7615 ;;		None
  7616 ;; Tracked objects:
  7617 ;;		On entry : 1F/1
  7618 ;;		On exit  : 1F/0
  7619 ;;		Unchanged: 0/0
  7620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7624 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7625 ;;Total ram usage:        0 bytes
  7626 ;; Hardware stack levels used:    1
  7627 ;; Hardware stack levels required when called:    1
  7628 ;; This function calls:
  7629 ;;		Nothing
  7630 ;; This function is called by:
  7631 ;;		_TMR2_Initialize
  7632 ;; This function uses a non-reentrant model
  7633 ;;
  7634                           
  7635                           
  7636                           ;psect for function _TMR2_StartTimer
  7637  07CF                     _TMR2_StartTimer:	
  7638  07CF                     l2824:	
  7639                           ;incstack = 0
  7640                           ; Regs used in _TMR2_StartTimer: []
  7641                           
  7642                           
  7643                           ;tmr2.c: 92: T2CONbits.TMR2ON = 1;
  7644  07CF  0020               	movlb	0	; select bank0
  7645  07D0  151C               	bsf	28,2	;volatile
  7646  07D1  0008               	return
  7647  07D2                     __end_of_TMR2_StartTimer:	
  7648                           
  7649                           	psect	bssCOMMON
  7650  007C                     __pbssCOMMON:	
  7651  007C                     _eusartRxCount:	
  7652  007C                     	ds	1
  7653                           
  7654                           	psect	bssBANK0
  7655  004A                     __pbssBANK0:	
  7656  004A                     _pwm2Ei:	
  7657  004A                     	ds	2
  7658  004C                     _rtAdcValueRcHi:	
  7659  004C                     	ds	2
  7660  004E                     _rtAdcValueRcLo:	
  7661  004E                     	ds	2
  7662  0050                     _rtAdcValueRsHi:	
  7663  0050                     	ds	2
  7664  0052                     _rtAdcValueRsLo:	
  7665  0052                     	ds	2
  7666  0054                     _rtAdcValueVoFb:	
  7667  0054                     	ds	2
  7668  0056                     _voExpectAdcValue:	
  7669  0056                     	ds	2
  7670  0058                     _voExpectMv:	
  7671  0058                     	ds	2
  7672  005A                     _Event:	
  7673  005A                     	ds	1
  7674  005B                     _eusartRxIdleTime_ms:	
  7675  005B                     	ds	1
  7676  005C                     _pidBbSm:	
  7677  005C                     	ds	1
  7678  005D                     _pidTestNum:	
  7679  005D                     	ds	1
  7680  005E                     _subTickerX:	
  7681  005E                     	ds	1
  7682  005F                     _subTickerX_1s:	
  7683  005F                     	ds	1
  7684                           
  7685                           	psect	dataBANK0
  7686  0060                     __pdataBANK0:	
  7687  0060                     _resRc:	
  7688  0060                     	ds	4
  7689  0064                     _pwm2DutyForVout:	
  7690  0064                     	ds	2
  7691                           
  7692                           	psect	bssBANK1
  7693  00A0                     __pbssBANK1:	
  7694  00A0                     _err:	
  7695  00A0                     	ds	12
  7696  00AC                     _rsLoAvgBuf:	
  7697  00AC                     	ds	10
  7698  00B6                     _PidKp:	
  7699  00B6                     	ds	4
  7700  00BA                     _PidTd:	
  7701  00BA                     	ds	4
  7702  00BE                     _PidTi:	
  7703  00BE                     	ds	4
  7704  00C2                     _bbku:	
  7705  00C2                     	ds	4
  7706  00C6                     _bbt0:	
  7707  00C6                     	ds	4
  7708  00CA                     _bbt1:	
  7709  00CA                     	ds	4
  7710  00CE                     _bbta:	
  7711  00CE                     	ds	4
  7712  00D2                     _bbtu:	
  7713  00D2                     	ds	4
  7714  00D6                     _bbu:	
  7715  00D6                     	ds	4
  7716  00DA                     _globalTicker:	
  7717  00DA                     	ds	4
  7718  00DE                     _rsLoAvg:	
  7719  00DE                     	ds	2
  7720                           
  7721                           	psect	dataBANK1
  7722  00E0                     __pdataBANK1:	
  7723  00E0                     _bbmax:	
  7724  00E0                     	ds	4
  7725  00E4                     _bbmin:	
  7726  00E4                     	ds	4
  7727  00E8                     _pidU:	
  7728  00E8                     	ds	4
  7729  00EC                     _resRs:	
  7730  00EC                     	ds	4
  7731                           
  7732                           	psect	bssBANK2
  7733  0120                     __pbssBANK2:	
  7734  0120                     _eusartRxBuffer:	
  7735  0120                     	ds	64
  7736                           
  7737                           	psect	bssBANK3
  7738  01A0                     __pbssBANK3:	
  7739  01A0                     _modbusBuf:	
  7740  01A0                     	ds	64
  7741                           
  7742                           	psect	clrtext
  7743  085D                     clear_ram0:	
  7744                           ;	Called with FSR0 containing the base address, and
  7745                           ;	btemp/btemp+1 has the size to clear
  7746                           
  7747  085D  0064               	clrwdt	;clear the watchdog before getting into this loop
  7748  085E                     clrloop0:	
  7749  085E  3001               	movlw	1
  7750  085F  0180               	clrf	0	;clear RAM location pointed to by FSR
  7751  0860  3101               	addfsr 0,1
  7752  0861  02FE               	subwf	126,f
  7753  0862  3000               	movlw	0
  7754  0863  3BFF               	subwfb	127,f
  7755  0864  087F               	movf	127,w
  7756  0865  047E               	iorwf	126,w
  7757  0866  1903               	btfsc	3,2
  7758  0867  3400               	retlw	0	;all done for this memory range, return
  7759  0868  285E               	goto	clrloop0	;have we reached the end yet?
  7760                           
  7761                           	psect	inittext
  7762  0851                     init_ram:	
  7763  0851  00FE               	movwf	126
  7764  0852                     initloop:	
  7765  0852  0012               	moviw fsr0++
  7766  0853  001E               	movwi fsr1++
  7767  0854  3001               	movlw	1
  7768  0855  02FE               	subwf	126,f
  7769  0856  3000               	movlw	0
  7770  0857  3BFF               	subwfb	127,f
  7771  0858  087F               	movf	127,w
  7772  0859  047E               	iorwf	126,w
  7773  085A  1903               	btfsc	3,2
  7774  085B  3400               	retlw	0
  7775  085C  2852               	goto	initloop
  7776                           
  7777                           	psect	cstackBANK4
  7778  0220                     __pcstackBANK4:	
  7779  0220                     calc_expect_vout_adc_value@y1:	
  7780                           
  7781                           ; 4 bytes @ 0x0
  7782  0220                     	ds	4
  7783  0224                     calc_expect_vout_adc_value@x1:	
  7784                           
  7785                           ; 4 bytes @ 0x4
  7786  0224                     	ds	4
  7787  0228                     calc_expect_vout_adc_value@y0:	
  7788                           
  7789                           ; 4 bytes @ 0x8
  7790  0228                     	ds	4
  7791  022C                     calc_expect_vout_adc_value@x0:	
  7792                           
  7793                           ; 4 bytes @ 0xC
  7794  022C                     	ds	4
  7795  0230                     calc_expect_vout_adc_value@t32:	
  7796                           
  7797                           ; 4 bytes @ 0x10
  7798  0230                     	ds	4
  7799  0234                     calc_expect_vout_adc_value@i:	
  7800                           
  7801                           ; 1 bytes @ 0x14
  7802  0234                     	ds	1
  7803                           
  7804                           	psect	cstackCOMMON
  7805  0070                     __pcstackCOMMON:	
  7806  0070                     ?_TMR2_StartTimer:	
  7807  0070                     ?_PIN_MANAGER_Initialize:	
  7808                           ; 1 bytes @ 0x0
  7809                           
  7810  0070                     ?_OSCILLATOR_Initialize:	
  7811                           ; 1 bytes @ 0x0
  7812                           
  7813  0070                     ?_WDT_Initialize:	
  7814                           ; 1 bytes @ 0x0
  7815                           
  7816  0070                     ?_ADC1_Initialize:	
  7817                           ; 1 bytes @ 0x0
  7818                           
  7819  0070                     ?_EUSART_Initialize:	
  7820                           ; 1 bytes @ 0x0
  7821                           
  7822  0070                     ?_PWM2_Initialize:	
  7823                           ; 1 bytes @ 0x0
  7824                           
  7825  0070                     ?_PWM1_Initialize:	
  7826                           ; 1 bytes @ 0x0
  7827                           
  7828  0070                     ?_TMR2_Initialize:	
  7829                           ; 1 bytes @ 0x0
  7830                           
  7831  0070                     ?_INTERRUPT_InterruptManager:	
  7832                           ; 1 bytes @ 0x0
  7833                           
  7834  0070                     ??_INTERRUPT_InterruptManager:	
  7835                           ; 1 bytes @ 0x0
  7836                           
  7837  0070                     ?_FVR_Initialize:	
  7838                           ; 1 bytes @ 0x0
  7839                           
  7840  0070                     ?_SYSTEM_Initialize:	
  7841                           ; 1 bytes @ 0x0
  7842                           
  7843  0070                     ?_uart_received_start:	
  7844                           ; 1 bytes @ 0x0
  7845                           
  7846  0070                     ?_fvr_set_gain:	
  7847                           ; 1 bytes @ 0x0
  7848                           
  7849  0070                     ?_adc_init:	
  7850                           ; 1 bytes @ 0x0
  7851                           
  7852  0070                     ?_pid_pwm1_idrv_b_b:	
  7853                           ; 1 bytes @ 0x0
  7854                           
  7855  0070                     ?_pid_pwm1_idrv_run:	
  7856                           ; 1 bytes @ 0x0
  7857                           
  7858  0070                     ?_pid_pwm2_vout_run:	
  7859                           ; 1 bytes @ 0x0
  7860                           
  7861  0070                     ?_my_flash_read_system_erase:	
  7862                           ; 1 bytes @ 0x0
  7863                           
  7864  0070                     ?_sys_data_save:	
  7865                           ; 1 bytes @ 0x0
  7866                           
  7867  0070                     ?_modbus_response_write_single_register:	
  7868                           ; 1 bytes @ 0x0
  7869                           
  7870  0070                     ?_modbus_response_command:	
  7871                           ; 1 bytes @ 0x0
  7872                           
  7873  0070                     ?_main:	
  7874                           ; 1 bytes @ 0x0
  7875                           
  7876  0070                     ?_sys_data_init:	
  7877                           ; 1 bytes @ 0x0
  7878                           
  7879  0070                     INTERRUPT_InterruptManager@t8:	
  7880                           ; 2 bytes @ 0x0
  7881                           
  7882                           
  7883                           ; 1 bytes @ 0x0
  7884  0070                     	ds	1
  7885  0071                     ?_FLASH_EraseBlock:	
  7886  0071                     ?_TMR2_SetInterruptHandler:	
  7887                           ; 1 bytes @ 0x1
  7888                           
  7889  0071                     ??_TMR2_StartTimer:	
  7890                           ; 1 bytes @ 0x1
  7891                           
  7892  0071                     ??_PIN_MANAGER_Initialize:	
  7893                           ; 1 bytes @ 0x1
  7894                           
  7895  0071                     ??_OSCILLATOR_Initialize:	
  7896                           ; 1 bytes @ 0x1
  7897                           
  7898  0071                     ??_WDT_Initialize:	
  7899                           ; 1 bytes @ 0x1
  7900                           
  7901  0071                     ??_ADC1_Initialize:	
  7902                           ; 1 bytes @ 0x1
  7903                           
  7904  0071                     ??_EUSART_Initialize:	
  7905                           ; 1 bytes @ 0x1
  7906                           
  7907  0071                     ?_m_mem_cpy_len:	
  7908                           ; 1 bytes @ 0x1
  7909                           
  7910  0071                     ??_PWM2_Initialize:	
  7911                           ; 1 bytes @ 0x1
  7912                           
  7913  0071                     ??_PWM1_Initialize:	
  7914                           ; 1 bytes @ 0x1
  7915                           
  7916  0071                     ??_FVR_Initialize:	
  7917                           ; 1 bytes @ 0x1
  7918                           
  7919  0071                     ?_uart_send_len:	
  7920                           ; 1 bytes @ 0x1
  7921                           
  7922  0071                     ??_uart_received_start:	
  7923                           ; 1 bytes @ 0x1
  7924                           
  7925  0071                     ??_fvr_set_gain:	
  7926                           ; 1 bytes @ 0x1
  7927                           
  7928  0071                     ??_adc_init:	
  7929                           ; 1 bytes @ 0x1
  7930                           
  7931  0071                     ?_my_flash_system_read:	
  7932                           ; 1 bytes @ 0x1
  7933                           
  7934  0071                     ?_get_idrv_pwm1_duty:	
  7935                           ; 1 bytes @ 0x1
  7936                           
  7937  0071                     ?_get_vout_pwm2_duty:	
  7938                           ; 2 bytes @ 0x1
  7939                           
  7940  0071                     ?_my_flash_system_write:	
  7941                           ; 2 bytes @ 0x1
  7942                           
  7943  0071                     ?_getRegisterVal:	
  7944                           ; 2 bytes @ 0x1
  7945                           
  7946  0071                     ?_crc_sum:	
  7947                           ; 2 bytes @ 0x1
  7948                           
  7949  0071                     ?___wmul:	
  7950                           ; 2 bytes @ 0x1
  7951                           
  7952  0071                     ?___awdiv:	
  7953                           ; 2 bytes @ 0x1
  7954                           
  7955  0071                     ?___lwdiv:	
  7956                           ; 2 bytes @ 0x1
  7957                           
  7958  0071                     ?___lmul:	
  7959                           ; 2 bytes @ 0x1
  7960                           
  7961  0071                     ?___lldiv:	
  7962                           ; 4 bytes @ 0x1
  7963                           
  7964  0071                     PIN_MANAGER_Initialize@state:	
  7965                           ; 4 bytes @ 0x1
  7966                           
  7967  0071                     uart_send_len@len:	
  7968                           ; 1 bytes @ 0x1
  7969                           
  7970  0071                     fvr_set_gain@t8:	
  7971                           ; 1 bytes @ 0x1
  7972                           
  7973  0071                     FLASH_EraseBlock@startAddr:	
  7974                           ; 1 bytes @ 0x1
  7975                           
  7976  0071                     TMR2_SetInterruptHandler@InterruptHandler:	
  7977                           ; 2 bytes @ 0x1
  7978                           
  7979  0071                     my_flash_system_read@buf:	
  7980                           ; 2 bytes @ 0x1
  7981                           
  7982  0071                     my_flash_system_write@buf:	
  7983                           ; 2 bytes @ 0x1
  7984                           
  7985  0071                     getRegisterVal@addr:	
  7986                           ; 2 bytes @ 0x1
  7987                           
  7988  0071                     m_mem_cpy_len@d:	
  7989                           ; 2 bytes @ 0x1
  7990                           
  7991  0071                     crc_sum@buf:	
  7992                           ; 2 bytes @ 0x1
  7993                           
  7994  0071                     ___wmul@multiplier:	
  7995                           ; 2 bytes @ 0x1
  7996                           
  7997  0071                     ___awdiv@divisor:	
  7998                           ; 2 bytes @ 0x1
  7999                           
  8000  0071                     ___lwdiv@divisor:	
  8001                           ; 2 bytes @ 0x1
  8002                           
  8003  0071                     ___lmul@multiplier:	
  8004                           ; 2 bytes @ 0x1
  8005                           
  8006  0071                     ___lldiv@divisor:	
  8007                           ; 4 bytes @ 0x1
  8008                           
  8009                           
  8010                           ; 4 bytes @ 0x1
  8011  0071                     	ds	1
  8012  0072                     ??_uart_send_len:	
  8013  0072                     fvr_set_gain@g:	
  8014                           ; 1 bytes @ 0x2
  8015                           
  8016  0072                     adc_init@ch:	
  8017                           ; 1 bytes @ 0x2
  8018                           
  8019                           
  8020                           ; 1 bytes @ 0x2
  8021  0072                     	ds	1
  8022  0073                     ??_FLASH_EraseBlock:	
  8023  0073                     ??_TMR2_SetInterruptHandler:	
  8024                           ; 1 bytes @ 0x3
  8025                           
  8026  0073                     ??_TMR2_Initialize:	
  8027                           ; 1 bytes @ 0x3
  8028                           
  8029  0073                     ??_SYSTEM_Initialize:	
  8030                           ; 1 bytes @ 0x3
  8031                           
  8032  0073                     ??_get_idrv_pwm1_duty:	
  8033                           ; 1 bytes @ 0x3
  8034                           
  8035  0073                     ?_set_idrv_pwm1_duty:	
  8036                           ; 1 bytes @ 0x3
  8037                           
  8038  0073                     ??_get_vout_pwm2_duty:	
  8039                           ; 1 bytes @ 0x3
  8040                           
  8041  0073                     ?_set_vout_pwm2_duty:	
  8042                           ; 1 bytes @ 0x3
  8043                           
  8044  0073                     ?_adc_sample:	
  8045                           ; 1 bytes @ 0x3
  8046                           
  8047  0073                     FLASH_EraseBlock@GIEBitValue:	
  8048                           ; 2 bytes @ 0x3
  8049                           
  8050  0073                     uart_send_len@buf:	
  8051                           ; 1 bytes @ 0x3
  8052                           
  8053  0073                     adc_sample@gfvr:	
  8054                           ; 1 bytes @ 0x3
  8055                           
  8056  0073                     getRegisterVal@tempData:	
  8057                           ; 1 bytes @ 0x3
  8058                           
  8059  0073                     set_idrv_pwm1_duty@duty:	
  8060                           ; 1 bytes @ 0x3
  8061                           
  8062  0073                     set_vout_pwm2_duty@duty:	
  8063                           ; 2 bytes @ 0x3
  8064                           
  8065  0073                     my_flash_system_read@len:	
  8066                           ; 2 bytes @ 0x3
  8067                           
  8068  0073                     my_flash_system_write@len:	
  8069                           ; 2 bytes @ 0x3
  8070                           
  8071  0073                     m_mem_cpy_len@s:	
  8072                           ; 2 bytes @ 0x3
  8073                           
  8074  0073                     crc_sum@len:	
  8075                           ; 2 bytes @ 0x3
  8076                           
  8077  0073                     ___wmul@multiplicand:	
  8078                           ; 2 bytes @ 0x3
  8079                           
  8080  0073                     ___awdiv@dividend:	
  8081                           ; 2 bytes @ 0x3
  8082                           
  8083  0073                     ___lwdiv@dividend:	
  8084                           ; 2 bytes @ 0x3
  8085                           
  8086                           
  8087                           ; 2 bytes @ 0x3
  8088  0073                     	ds	1
  8089  0074                     ??_my_flash_read_system_erase:	
  8090  0074                     ??_getRegisterVal:	
  8091                           ; 1 bytes @ 0x4
  8092                           
  8093  0074                     uart_send_len@i:	
  8094                           ; 1 bytes @ 0x4
  8095                           
  8096  0074                     adc_sample@num:	
  8097                           ; 1 bytes @ 0x4
  8098                           
  8099                           
  8100                           ; 1 bytes @ 0x4
  8101  0074                     	ds	1
  8102  0075                     ??_set_idrv_pwm1_duty:	
  8103  0075                     ??_set_vout_pwm2_duty:	
  8104                           ; 1 bytes @ 0x5
  8105                           
  8106  0075                     ??_adc_sample:	
  8107                           ; 1 bytes @ 0x5
  8108                           
  8109  0075                     ??_my_flash_system_read:	
  8110                           ; 1 bytes @ 0x5
  8111                           
  8112  0075                     ??_my_flash_system_write:	
  8113                           ; 1 bytes @ 0x5
  8114                           
  8115  0075                     ??_crc_sum:	
  8116                           ; 1 bytes @ 0x5
  8117                           
  8118  0075                     ??___wmul:	
  8119                           ; 1 bytes @ 0x5
  8120                           
  8121  0075                     ??___awdiv:	
  8122                           ; 1 bytes @ 0x5
  8123                           
  8124  0075                     ??___lwdiv:	
  8125                           ; 1 bytes @ 0x5
  8126                           
  8127  0075                     ___awdiv@counter:	
  8128                           ; 1 bytes @ 0x5
  8129                           
  8130  0075                     set_idrv_pwm1_duty@t16:	
  8131                           ; 1 bytes @ 0x5
  8132                           
  8133  0075                     set_vout_pwm2_duty@t16:	
  8134                           ; 2 bytes @ 0x5
  8135                           
  8136  0075                     m_mem_cpy_len@len:	
  8137                           ; 2 bytes @ 0x5
  8138                           
  8139  0075                     crc_sum@j:	
  8140                           ; 2 bytes @ 0x5
  8141                           
  8142  0075                     ___wmul@product:	
  8143                           ; 2 bytes @ 0x5
  8144                           
  8145  0075                     ___lwdiv@quotient:	
  8146                           ; 2 bytes @ 0x5
  8147                           
  8148  0075                     ___lmul@multiplicand:	
  8149                           ; 2 bytes @ 0x5
  8150                           
  8151  0075                     ___lldiv@dividend:	
  8152                           ; 4 bytes @ 0x5
  8153                           
  8154                           
  8155                           ; 4 bytes @ 0x5
  8156  0075                     	ds	1
  8157  0076                     adc_sample@ch:	
  8158  0076                     ___awdiv@sign:	
  8159                           ; 1 bytes @ 0x6
  8160                           
  8161                           
  8162                           ; 1 bytes @ 0x6
  8163  0076                     	ds	1
  8164  0077                     ??_m_mem_cpy_len:	
  8165  0077                     my_flash_system_read@GIEBitValue:	
  8166                           ; 1 bytes @ 0x7
  8167                           
  8168  0077                     ___lwdiv@counter:	
  8169                           ; 1 bytes @ 0x7
  8170                           
  8171  0077                     adc_sample@ret:	
  8172                           ; 1 bytes @ 0x7
  8173                           
  8174  0077                     crc_sum@i:	
  8175                           ; 2 bytes @ 0x7
  8176                           
  8177  0077                     ___awdiv@quotient:	
  8178                           ; 2 bytes @ 0x7
  8179                           
  8180                           
  8181                           ; 2 bytes @ 0x7
  8182  0077                     	ds	1
  8183  0078                     my_flash_system_read@i:	
  8184                           
  8185                           ; 2 bytes @ 0x8
  8186  0078                     	ds	1
  8187  0079                     ??_calc_temp_rs:	
  8188  0079                     ??_pid_pwm1_idrv_b_b:	
  8189                           ; 1 bytes @ 0x9
  8190                           
  8191  0079                     ??_pid_pwm2_vout_run:	
  8192                           ; 1 bytes @ 0x9
  8193                           
  8194  0079                     ??___lmul:	
  8195                           ; 1 bytes @ 0x9
  8196                           
  8197  0079                     ??___aldiv:	
  8198                           ; 1 bytes @ 0x9
  8199                           
  8200  0079                     ??___lldiv:	
  8201                           ; 1 bytes @ 0x9
  8202                           
  8203  0079                     ?_calc_rs_lo_avg:	
  8204                           ; 1 bytes @ 0x9
  8205                           
  8206  0079                     adc_sample@i:	
  8207                           ; 2 bytes @ 0x9
  8208                           
  8209  0079                     calc_rs_lo_avg@x:	
  8210                           ; 1 bytes @ 0x9
  8211                           
  8212  0079                     crc_sum@crc:	
  8213                           ; 2 bytes @ 0x9
  8214                           
  8215                           
  8216                           ; 2 bytes @ 0x9
  8217  0079                     	ds	1
  8218  007A                     getRegisterVal@tempAddr:	
  8219  007A                     adc_sample@t16:	
  8220                           ; 1 bytes @ 0xA
  8221                           
  8222  007A                     my_flash_system_read@flashAddr:	
  8223                           ; 2 bytes @ 0xA
  8224                           
  8225                           
  8226                           ; 2 bytes @ 0xA
  8227  007A                     	ds	1
  8228  007B                     ??_crc_verify:	
  8229  007B                     ??_sys_data_save:	
  8230                           ; 1 bytes @ 0xB
  8231                           
  8232  007B                     ??_modbus_response_illgeal_function:	
  8233                           ; 1 bytes @ 0xB
  8234                           
  8235  007B                     ??_modbus_response_command:	
  8236                           ; 1 bytes @ 0xB
  8237                           
  8238                           
  8239                           ; 1 bytes @ 0xB
  8240  007B                     	ds	1
  8241  007C                     ??_modbus_response_process:	
  8242                           
  8243                           	psect	cstackBANK0
  8244  0020                     __pcstackBANK0:	
  8245                           ; 1 bytes @ 0xC
  8246                           
  8247  0020                     ?_crc_verify:	
  8248  0020                     ?_crc_append:	
  8249                           ; 1 bytes @ 0x0
  8250                           
  8251  0020                     pid_pwm2_vout_run@ei:	
  8252                           ; 1 bytes @ 0x0
  8253                           
  8254  0020                     my_flash_system_write@j:	
  8255                           ; 2 bytes @ 0x0
  8256                           
  8257  0020                     crc_verify@message:	
  8258                           ; 2 bytes @ 0x0
  8259                           
  8260  0020                     crc_append@message:	
  8261                           ; 2 bytes @ 0x0
  8262                           
  8263  0020                     ___lmul@product:	
  8264                           ; 2 bytes @ 0x0
  8265                           
  8266  0020                     ___lldiv@quotient:	
  8267                           ; 4 bytes @ 0x0
  8268                           
  8269                           
  8270                           ; 4 bytes @ 0x0
  8271  0020                     	ds	2
  8272  0022                     my_flash_system_write@GIEBitValue:	
  8273  0022                     pid_pwm2_vout_run@t16:	
  8274                           ; 1 bytes @ 0x2
  8275                           
  8276  0022                     crc_verify@n:	
  8277                           ; 2 bytes @ 0x2
  8278                           
  8279  0022                     crc_append@n:	
  8280                           ; 2 bytes @ 0x2
  8281                           
  8282                           
  8283                           ; 2 bytes @ 0x2
  8284  0022                     	ds	1
  8285  0023                     my_flash_system_write@blocNum:	
  8286                           
  8287                           ; 2 bytes @ 0x3
  8288  0023                     	ds	1
  8289  0024                     ??_crc_append:	
  8290  0024                     ?___aldiv:	
  8291                           ; 1 bytes @ 0x4
  8292                           
  8293  0024                     ___lldiv@counter:	
  8294                           ; 4 bytes @ 0x4
  8295                           
  8296  0024                     crc_verify@crccal:	
  8297                           ; 1 bytes @ 0x4
  8298                           
  8299  0024                     ___aldiv@divisor:	
  8300                           ; 2 bytes @ 0x4
  8301                           
  8302                           
  8303                           ; 4 bytes @ 0x4
  8304  0024                     	ds	1
  8305  0025                     ??_calc_rs_lo_avg:	
  8306  0025                     ?_calc_temp_rs:	
  8307                           ; 1 bytes @ 0x5
  8308                           
  8309  0025                     ?_calc_temp_rc:	
  8310                           ; 4 bytes @ 0x5
  8311                           
  8312  0025                     my_flash_system_write@loc:	
  8313                           ; 4 bytes @ 0x5
  8314                           
  8315                           
  8316                           ; 2 bytes @ 0x5
  8317  0025                     	ds	1
  8318  0026                     crc_verify@expected:	
  8319                           
  8320                           ; 2 bytes @ 0x6
  8321  0026                     	ds	1
  8322  0027                     my_flash_system_write@flashAddr:	
  8323  0027                     calc_rs_lo_avg@t32:	
  8324                           ; 2 bytes @ 0x7
  8325                           
  8326                           
  8327                           ; 4 bytes @ 0x7
  8328  0027                     	ds	1
  8329  0028                     ___aldiv@dividend:	
  8330                           
  8331                           ; 4 bytes @ 0x8
  8332  0028                     	ds	1
  8333  0029                     ??_calc_temp_rc:	
  8334  0029                     my_flash_system_write@i:	
  8335                           ; 1 bytes @ 0x9
  8336                           
  8337  0029                     crc_append@crc:	
  8338                           ; 2 bytes @ 0x9
  8339                           
  8340  0029                     calc_temp_rs@x:	
  8341                           ; 2 bytes @ 0x9
  8342                           
  8343                           
  8344                           ; 4 bytes @ 0x9
  8345  0029                     	ds	2
  8346  002B                     ??_sys_data_init:	
  8347  002B                     ?_modbus_response_illgeal_function:	
  8348                           ; 1 bytes @ 0xB
  8349                           
  8350  002B                     ??_modbus_response_write_single_register:	
  8351                           ; 1 bytes @ 0xB
  8352                           
  8353  002B                     calc_rs_lo_avg@i:	
  8354                           ; 1 bytes @ 0xB
  8355                           
  8356  002B                     modbus_response_illgeal_function@errcode:	
  8357                           ; 1 bytes @ 0xB
  8358                           
  8359  002B                     modbus_response_command@tmpAddr:	
  8360                           ; 1 bytes @ 0xB
  8361                           
  8362                           
  8363                           ; 2 bytes @ 0xB
  8364  002B                     	ds	1
  8365  002C                     modbus_response_illgeal_function@buf:	
  8366  002C                     ___aldiv@counter:	
  8367                           ; 1 bytes @ 0xC
  8368                           
  8369                           
  8370                           ; 1 bytes @ 0xC
  8371  002C                     	ds	1
  8372  002D                     modbus_response_illgeal_function@pmdbs:	
  8373  002D                     ___aldiv@sign:	
  8374                           ; 1 bytes @ 0xD
  8375                           
  8376  002D                     modbus_response_command@startAddr:	
  8377                           ; 1 bytes @ 0xD
  8378                           
  8379  002D                     calc_temp_rs@y:	
  8380                           ; 2 bytes @ 0xD
  8381                           
  8382  002D                     calc_temp_rc@x:	
  8383                           ; 4 bytes @ 0xD
  8384                           
  8385                           
  8386                           ; 4 bytes @ 0xD
  8387  002D                     	ds	1
  8388  002E                     ___aldiv@quotient:	
  8389                           
  8390                           ; 4 bytes @ 0xE
  8391  002E                     	ds	1
  8392  002F                     modbus_response_command@i:	
  8393  002F                     modbus_response_write_single_register@t16:	
  8394                           ; 1 bytes @ 0xF
  8395                           
  8396                           
  8397                           ; 2 bytes @ 0xF
  8398  002F                     	ds	1
  8399  0030                     modbus_response_command@pmdbs:	
  8400                           
  8401                           ; 1 bytes @ 0x10
  8402  0030                     	ds	1
  8403  0031                     modbus_response_write_single_register@fiSave:	
  8404  0031                     modbus_response_command@len:	
  8405                           ; 1 bytes @ 0x11
  8406                           
  8407  0031                     sys_data_init@ret:	
  8408                           ; 1 bytes @ 0x11
  8409                           
  8410  0031                     calc_temp_rc@y:	
  8411                           ; 2 bytes @ 0x11
  8412                           
  8413                           
  8414                           ; 4 bytes @ 0x11
  8415  0031                     	ds	1
  8416  0032                     ??_pid_pwm1_idrv_run:	
  8417  0032                     ?_calc_expect_vout_adc_value:	
  8418                           ; 1 bytes @ 0x12
  8419                           
  8420  0032                     modbus_response_write_single_register@pmdbs:	
  8421                           ; 2 bytes @ 0x12
  8422                           
  8423  0032                     modbus_response_command@rbuf:	
  8424                           ; 1 bytes @ 0x12
  8425                           
  8426  0032                     calc_expect_vout_adc_value@x:	
  8427                           ; 1 bytes @ 0x12
  8428                           
  8429  0032                     pid_pwm1_idrv_b_b@t32:	
  8430                           ; 2 bytes @ 0x12
  8431                           
  8432                           
  8433                           ; 4 bytes @ 0x12
  8434  0032                     	ds	1
  8435  0033                     sys_data_init@i:	
  8436  0033                     modbus_response_write_single_register@startAddr:	
  8437                           ; 2 bytes @ 0x13
  8438                           
  8439  0033                     modbus_response_command@tempData:	
  8440                           ; 2 bytes @ 0x13
  8441                           
  8442                           
  8443                           ; 2 bytes @ 0x13
  8444  0033                     	ds	1
  8445  0034                     ??_calc_expect_vout_adc_value:	
  8446                           
  8447                           ; 1 bytes @ 0x14
  8448  0034                     	ds	1
  8449  0035                     modbus_response_write_single_register@rbuf:	
  8450                           
  8451                           ; 1 bytes @ 0x15
  8452  0035                     	ds	1
  8453  0036                     ?_modbus_response_process:	
  8454  0036                     modbus_response_process@rlen:	
  8455                           ; 1 bytes @ 0x16
  8456                           
  8457  0036                     pid_pwm1_idrv_run@ep:	
  8458                           ; 2 bytes @ 0x16
  8459                           
  8460                           
  8461                           ; 4 bytes @ 0x16
  8462  0036                     	ds	2
  8463  0038                     modbus_response_process@pmdbs:	
  8464                           
  8465                           ; 1 bytes @ 0x18
  8466  0038                     	ds	1
  8467  0039                     modbus_response_process@rbuf:	
  8468                           
  8469                           ; 1 bytes @ 0x19
  8470  0039                     	ds	1
  8471  003A                     pid_pwm1_idrv_run@ei:	
  8472                           
  8473                           ; 4 bytes @ 0x1A
  8474  003A                     	ds	8
  8475  0042                     pid_pwm1_idrv_run@t16:	
  8476                           
  8477                           ; 2 bytes @ 0x22
  8478  0042                     	ds	2
  8479  0044                     pid_pwm1_idrv_run@t32:	
  8480                           
  8481                           ; 4 bytes @ 0x24
  8482  0044                     	ds	4
  8483  0048                     ??_main:	
  8484                           
  8485                           ; 1 bytes @ 0x28
  8486  0048                     	ds	2
  8487                           
  8488                           	psect	text2
  8489  0BCB                     __ptext2:	
  8490 ;; *************** function _sys_data_init *****************
  8491 ;; Defined at:
  8492 ;;		line 94 in file "src/api/sysData.c"
  8493 ;; Parameters:    Size  Location     Type
  8494 ;;		None
  8495 ;; Auto vars:     Size  Location     Type
  8496 ;;  i               2   19[BANK0 ] unsigned int 
  8497 ;;  ret             2   17[BANK0 ] unsigned int 
  8498 ;; Return value:  Size  Location     Type
  8499 ;;                  2  757[None  ] unsigned int 
  8500 ;; Registers used:
  8501 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8502 ;; Tracked objects:
  8503 ;;		On entry : 1F/1B
  8504 ;;		On exit  : 1F/0
  8505 ;;		Unchanged: 0/0
  8506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8508 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8509 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8510 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8511 ;;Total ram usage:       10 bytes
  8512 ;; Hardware stack levels used:    1
  8513 ;; Hardware stack levels required when called:    3
  8514 ;; This function calls:
  8515 ;;		___wmul
  8516 ;;		_crc_append
  8517 ;;		_crc_verify
  8518 ;;		_my_flash_read_system_erase
  8519 ;;		_my_flash_system_read
  8520 ;;		_my_flash_system_write
  8521 ;; This function is called by:
  8522 ;;		_main
  8523 ;; This function uses a non-reentrant model
  8524 ;;
  8525                           
  8526                           
  8527                           ;psect for function _sys_data_init
  8528  0BCB                     _sys_data_init:	
  8529                           
  8530                           ;sysData.c: 96: uint16_t ret,i;
  8531                           ;sysData.c: 97: my_flash_system_read((uint8_t*)&sysData,sizeof(sysData_t));
  8532                           
  8533                           ;incstack = 0
  8534                           ; Regs used in _sys_data_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8535  0BCB  3084               	movlw	132
  8536  0BCC  00F1               	movwf	my_flash_system_read@buf
  8537  0BCD  3023               	movlw	35
  8538  0BCE  00F2               	movwf	my_flash_system_read@buf+1
  8539  0BCF  305C               	movlw	92
  8540  0BD0  00F3               	movwf	my_flash_system_read@len
  8541  0BD1  01F4               	clrf	my_flash_system_read@len+1
  8542  0BD2  24C5  318B         	fcall	_my_flash_system_read
  8543                           
  8544                           ;sysData.c: 98: ret=crc_verify((uint8_t*)&sysData,sizeof(sysData_t));
  8545  0BD4  3084               	movlw	132
  8546  0BD5  0020               	movlb	0	; select bank0
  8547  0BD6  00A0               	movwf	crc_verify@message
  8548  0BD7  3023               	movlw	35
  8549  0BD8  00A1               	movwf	crc_verify@message+1
  8550  0BD9  305C               	movlw	92
  8551  0BDA  00A2               	movwf	crc_verify@n
  8552  0BDB  01A3               	clrf	crc_verify@n+1
  8553  0BDC  2462  318B         	fcall	_crc_verify
  8554  0BDE  00B1               	movwf	sys_data_init@ret
  8555  0BDF  01B2               	clrf	sys_data_init@ret+1
  8556                           
  8557                           ;sysData.c: 99: if(!ret){
  8558  0BE0  0432               	iorwf	sys_data_init@ret+1,w
  8559  0BE1  1D03               	btfss	3,2
  8560  0BE2  0008               	return
  8561                           
  8562                           ;sysData.c: 100: sysData.pidSetFlg0=0xff;
  8563  0BE3  3084               	movlw	132
  8564  0BE4  0086               	movwf	6
  8565  0BE5  3023               	movlw	35
  8566  0BE6  0087               	movwf	7
  8567  0BE7  30FF               	movlw	255
  8568  0BE8  3FC0               	movwi [0]fsr1
  8569                           
  8570                           ;sysData.c: 101: sysData.pidSetFlg1=0xff;
  8571  0BE9  3085               	movlw	133
  8572  0BEA  0086               	movwf	6
  8573  0BEB  30FF               	movlw	255
  8574  0BEC  0081               	movwf	1
  8575                           
  8576                           ;sysData.c: 102: sysData.id=0xff;
  8577  0BED  3086               	movlw	134
  8578  0BEE  0086               	movwf	6
  8579  0BEF  30FF               	movlw	255
  8580  0BF0  0081               	movwf	1
  8581                           
  8582                           ;sysData.c: 103: for(i=0;i<20;i++){
  8583  0BF1  01B3               	clrf	sys_data_init@i
  8584  0BF2  01B4               	clrf	sys_data_init@i+1
  8585  0BF3                     l4368:	
  8586                           
  8587                           ;sysData.c: 105: sysData.calibRsAdc[i]=9600+i*720;
  8588  0BF3  0834               	movf	sys_data_init@i+1,w
  8589  0BF4  00F2               	movwf	___wmul@multiplier+1
  8590  0BF5  0833               	movf	sys_data_init@i,w
  8591  0BF6  00F1               	movwf	___wmul@multiplier
  8592  0BF7  30D0               	movlw	208
  8593  0BF8  00F3               	movwf	___wmul@multiplicand
  8594  0BF9  3002               	movlw	2
  8595  0BFA  00F4               	movwf	___wmul@multiplicand+1
  8596  0BFB  244D  318B         	fcall	___wmul
  8597  0BFD  0871               	movf	?___wmul,w
  8598  0BFE  3E80               	addlw	128
  8599  0BFF  00AB               	movwf	??_sys_data_init
  8600  0C00  3025               	movlw	37
  8601  0C01  3D72               	addwfc	?___wmul+1,w
  8602  0C02  00AC               	movwf	??_sys_data_init+1
  8603  0C03  0834               	movf	sys_data_init@i+1,w
  8604  0C04  00AE               	movwf	??_sys_data_init+3
  8605  0C05  0833               	movf	sys_data_init@i,w
  8606  0C06  00AD               	movwf	??_sys_data_init+2
  8607  0C07  308E               	movlw	142
  8608  0C08  35AD               	lslf	??_sys_data_init+2,f
  8609  0C09  0DAE               	rlf	??_sys_data_init+3,f
  8610  0C0A  00AF               	movwf	??_sys_data_init+4
  8611  0C0B  3023               	movlw	35
  8612  0C0C  00B0               	movwf	??_sys_data_init+5
  8613  0C0D  082D               	movf	??_sys_data_init+2,w
  8614  0C0E  072F               	addwf	??_sys_data_init+4,w
  8615  0C0F  0086               	movwf	6
  8616  0C10  082E               	movf	??_sys_data_init+3,w
  8617  0C11  3D30               	addwfc	??_sys_data_init+5,w
  8618  0C12  0087               	movwf	7
  8619  0C13  082B               	movf	??_sys_data_init,w
  8620  0C14  3FC0               	movwi [0]fsr1
  8621  0C15  082C               	movf	??_sys_data_init+1,w
  8622  0C16  3FC1               	movwi [1]fsr1
  8623                           
  8624                           ;sysData.c: 106: sysData.calibVoMV[i]=i*333;
  8625  0C17  0834               	movf	sys_data_init@i+1,w
  8626  0C18  00F2               	movwf	___wmul@multiplier+1
  8627  0C19  0833               	movf	sys_data_init@i,w
  8628  0C1A  00F1               	movwf	___wmul@multiplier
  8629  0C1B  304D               	movlw	77
  8630  0C1C  00F3               	movwf	___wmul@multiplicand
  8631  0C1D  3001               	movlw	1
  8632  0C1E  00F4               	movwf	___wmul@multiplicand+1
  8633  0C1F  244D  318B         	fcall	___wmul
  8634  0C21  0834               	movf	sys_data_init@i+1,w
  8635  0C22  00AC               	movwf	??_sys_data_init+1
  8636  0C23  0833               	movf	sys_data_init@i,w
  8637  0C24  00AB               	movwf	??_sys_data_init
  8638  0C25  30B6               	movlw	182
  8639  0C26  35AB               	lslf	??_sys_data_init,f
  8640  0C27  0DAC               	rlf	??_sys_data_init+1,f
  8641  0C28  00AD               	movwf	??_sys_data_init+2
  8642  0C29  3023               	movlw	35
  8643  0C2A  00AE               	movwf	??_sys_data_init+3
  8644  0C2B  082B               	movf	??_sys_data_init,w
  8645  0C2C  072D               	addwf	??_sys_data_init+2,w
  8646  0C2D  0086               	movwf	6
  8647  0C2E  082C               	movf	??_sys_data_init+1,w
  8648  0C2F  3D2E               	addwfc	??_sys_data_init+3,w
  8649  0C30  0087               	movwf	7
  8650  0C31  0871               	movf	?___wmul,w
  8651  0C32  3FC0               	movwi [0]fsr1
  8652  0C33  0872               	movf	?___wmul+1,w
  8653  0C34  3FC1               	movwi [1]fsr1
  8654  0C35  0AB3               	incf	sys_data_init@i,f
  8655  0C36  1903               	skipnz
  8656  0C37  0AB4               	incf	sys_data_init@i+1,f
  8657  0C38  3000               	movlw	0
  8658  0C39  0234               	subwf	sys_data_init@i+1,w
  8659  0C3A  3014               	movlw	20
  8660  0C3B  1903               	skipnz
  8661  0C3C  0233               	subwf	sys_data_init@i,w
  8662  0C3D  1C03               	skipc
  8663  0C3E  2BF3               	goto	l4368
  8664                           
  8665                           ;sysData.c: 107: }
  8666                           ;sysData.c: 108: crc_append((uint8_t*)&sysData,sizeof(sysData_t)-2);
  8667  0C3F  3084               	movlw	132
  8668  0C40  3187  277E  318B   	fcall	PL38	;call to abstracted procedure
  8669  0C43  3186  26DC  318B   	fcall	_crc_append
  8670                           
  8671                           ;sysData.c: 110: my_flash_read_system_erase();
  8672  0C46  3187  270B  318B   	fcall	_my_flash_read_system_erase
  8673                           
  8674                           ;sysData.c: 111: my_flash_system_write((uint8_t*)&sysData,sizeof(sysData_t));
  8675  0C49  3187  276E  318B   	fcall	PL30	;call to abstracted procedure
  8676  0C4C  2CF7               	ljmp	l2760
  8677  0C4D                     __end_of_sys_data_init:	
  8678  0C4D                     __ptext4:	
  8679 ;; *************** function ___wmul *****************
  8680 ;; Defined at:
  8681 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  8682 ;; Parameters:    Size  Location     Type
  8683 ;;  multiplier      2    1[COMMON] unsigned int 
  8684 ;;  multiplicand    2    3[COMMON] unsigned int 
  8685 ;; Auto vars:     Size  Location     Type
  8686 ;;  product         2    5[COMMON] unsigned int 
  8687 ;; Return value:  Size  Location     Type
  8688 ;;                  2    1[COMMON] unsigned int 
  8689 ;; Registers used:
  8690 ;;		wreg, status,2, status,0
  8691 ;; Tracked objects:
  8692 ;;		On entry : 1F/0
  8693 ;;		On exit  : 1F/0
  8694 ;;		Unchanged: 1F/0
  8695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8696 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8697 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8699 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8700 ;;Total ram usage:        6 bytes
  8701 ;; Hardware stack levels used:    1
  8702 ;; Hardware stack levels required when called:    1
  8703 ;; This function calls:
  8704 ;;		Nothing
  8705 ;; This function is called by:
  8706 ;;		_sys_data_init
  8707 ;; This function uses a non-reentrant model
  8708 ;;
  8709                           
  8710                           
  8711                           ;psect for function ___wmul
  8712  0C4D                     ___wmul:	
  8713                           
  8714                           ;incstack = 0
  8715                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8716  0C4D  01F5               	clrf	___wmul@product
  8717  0C4E  01F6               	clrf	___wmul@product+1
  8718  0C4F                     l3252:	
  8719  0C4F  1C71               	btfss	___wmul@multiplier,0
  8720  0C50  2C55               	goto	l3256
  8721  0C51  0873               	movf	___wmul@multiplicand,w
  8722  0C52  07F5               	addwf	___wmul@product,f
  8723  0C53  0874               	movf	___wmul@multiplicand+1,w
  8724  0C54  3DF6               	addwfc	___wmul@product+1,f
  8725  0C55                     l3256:	
  8726  0C55  35F3               	lslf	___wmul@multiplicand,f
  8727  0C56  0DF4               	rlf	___wmul@multiplicand+1,f
  8728  0C57  36F2               	lsrf	___wmul@multiplier+1,f
  8729  0C58  0CF1               	rrf	___wmul@multiplier,f
  8730  0C59  0871               	movf	___wmul@multiplier,w
  8731  0C5A  0472               	iorwf	___wmul@multiplier+1,w
  8732  0C5B  1D03               	btfss	3,2
  8733  0C5C  2C4F               	goto	l3252
  8734  0C5D  0876               	movf	___wmul@product+1,w
  8735  0C5E  00F2               	movwf	?___wmul+1
  8736  0C5F  0875               	movf	___wmul@product,w
  8737  0C60  00F1               	movwf	?___wmul
  8738  0C61  0008               	return
  8739  0C62                     __end_of___wmul:	
  8740  0C62                     __ptext25:	
  8741 ;; *************** function _crc_verify *****************
  8742 ;; Defined at:
  8743 ;;		line 135 in file "src/depend/crc16.c"
  8744 ;; Parameters:    Size  Location     Type
  8745 ;;  message         2    0[BANK0 ] PTR unsigned char 
  8746 ;;		 -> modbusBuf(64), sysData(92), 
  8747 ;;  n               2    2[BANK0 ] unsigned int 
  8748 ;; Auto vars:     Size  Location     Type
  8749 ;;  expected        2    6[BANK0 ] unsigned int 
  8750 ;;  crccal          2    4[BANK0 ] unsigned int 
  8751 ;; Return value:  Size  Location     Type
  8752 ;;                  1    wreg      unsigned char 
  8753 ;; Registers used:
  8754 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8755 ;; Tracked objects:
  8756 ;;		On entry : 1F/0
  8757 ;;		On exit  : 1F/0
  8758 ;;		Unchanged: 0/0
  8759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8760 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8761 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8763 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8764 ;;Total ram usage:        8 bytes
  8765 ;; Hardware stack levels used:    1
  8766 ;; Hardware stack levels required when called:    2
  8767 ;; This function calls:
  8768 ;;		_crc_sum
  8769 ;;		_m_mem_cpy_len
  8770 ;; This function is called by:
  8771 ;;		_sys_data_init
  8772 ;;		_modbus_response_process
  8773 ;; This function uses a non-reentrant model
  8774 ;;
  8775                           
  8776                           
  8777                           ;psect for function _crc_verify
  8778  0C62                     _crc_verify:	
  8779                           
  8780                           ;crc16.c: 137: uint16_t expected,crccal;
  8781                           ;crc16.c: 138: m_mem_cpy_len((uint8_t*)(&expected),(message+n-2),2);
  8782                           
  8783                           ;incstack = 0
  8784                           ; Regs used in _crc_verify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8785  0C62  0822               	movf	crc_verify@n,w
  8786  0C63  0720               	addwf	crc_verify@message,w
  8787  0C64  00F3               	movwf	m_mem_cpy_len@s
  8788  0C65  0823               	movf	crc_verify@n+1,w
  8789  0C66  3D21               	addwfc	crc_verify@message+1,w
  8790  0C67  00F4               	movwf	m_mem_cpy_len@s+1
  8791  0C68  30FE               	movlw	-2
  8792  0C69  07F3               	addwf	m_mem_cpy_len@s,f
  8793  0C6A  1C03               	skipc
  8794  0C6B  03F4               	decf	m_mem_cpy_len@s+1,f
  8795  0C6C  3026               	movlw	low crc_verify@expected
  8796  0C6D  00F1               	movwf	m_mem_cpy_len@d
  8797  0C6E  3000               	movlw	high crc_verify@expected
  8798  0C6F  00F2               	movwf	m_mem_cpy_len@d+1
  8799  0C70  3002               	movlw	2
  8800  0C71  00F5               	movwf	m_mem_cpy_len@len
  8801  0C72  01F6               	clrf	m_mem_cpy_len@len+1
  8802  0C73  3186  26B6  318B   	fcall	_m_mem_cpy_len
  8803                           
  8804                           ;crc16.c: 139: crccal=crc_sum(message,n - 2);
  8805  0C76  0821               	movf	crc_verify@message+1,w
  8806  0C77  00F2               	movwf	crc_sum@buf+1
  8807  0C78  0820               	movf	crc_verify@message,w
  8808  0C79  00F1               	movwf	crc_sum@buf
  8809  0C7A  0822               	movf	crc_verify@n,w
  8810  0C7B  3EFE               	addlw	254
  8811  0C7C  00F3               	movwf	crc_sum@len
  8812  0C7D  30FF               	movlw	255
  8813  0C7E  3D23               	addwfc	crc_verify@n+1,w
  8814  0C7F  00F4               	movwf	crc_sum@len+1
  8815  0C80  248F  318B         	fcall	_crc_sum
  8816  0C82  0872               	movf	?_crc_sum+1,w
  8817  0C83  00A5               	movwf	crc_verify@crccal+1
  8818  0C84  0871               	movf	?_crc_sum,w
  8819  0C85  00A4               	movwf	crc_verify@crccal
  8820                           
  8821                           ;crc16.c: 140: if(expected!=crccal)return 0;
  8822  0C86  0825               	movf	crc_verify@crccal+1,w
  8823  0C87  0627               	xorwf	crc_verify@expected+1,w
  8824  0C88  1D03               	skipz
  8825  0C89  2C8C               	goto	u2505
  8826  0C8A  0824               	movf	crc_verify@crccal,w
  8827  0C8B  0626               	xorwf	crc_verify@expected,w
  8828  0C8C                     u2505:	
  8829  0C8C  1D03               	btfss	3,2
  8830  0C8D  3400               	retlw	0
  8831                           
  8832                           ;crc16.c: 141: return 1;
  8833  0C8E  3401               	retlw	1
  8834  0C8F                     __end_of_crc_verify:	
  8835  0C8F                     __ptext27:	
  8836 ;; *************** function _crc_sum *****************
  8837 ;; Defined at:
  8838 ;;		line 116 in file "src/depend/crc16.c"
  8839 ;; Parameters:    Size  Location     Type
  8840 ;;  buf             2    1[COMMON] PTR unsigned char 
  8841 ;;		 -> modbusBuf(64), sysData(92), 
  8842 ;;  len             2    3[COMMON] unsigned int 
  8843 ;; Auto vars:     Size  Location     Type
  8844 ;;  crc             2    9[COMMON] unsigned int 
  8845 ;;  i               2    7[COMMON] unsigned int 
  8846 ;;  j               2    5[COMMON] unsigned int 
  8847 ;;  Data            2    0        unsigned int 
  8848 ;; Return value:  Size  Location     Type
  8849 ;;                  2    1[COMMON] unsigned int 
  8850 ;; Registers used:
  8851 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8852 ;; Tracked objects:
  8853 ;;		On entry : 1F/0
  8854 ;;		On exit  : 1F/0
  8855 ;;		Unchanged: 1F/0
  8856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8857 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8858 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8860 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8861 ;;Total ram usage:       10 bytes
  8862 ;; Hardware stack levels used:    1
  8863 ;; Hardware stack levels required when called:    1
  8864 ;; This function calls:
  8865 ;;		Nothing
  8866 ;; This function is called by:
  8867 ;;		_crc_verify
  8868 ;;		_crc_append
  8869 ;; This function uses a non-reentrant model
  8870 ;;
  8871                           
  8872                           
  8873                           ;psect for function _crc_sum
  8874  0C8F                     _crc_sum:	
  8875                           
  8876                           ;crc16.c: 118: uint16_t crc=0xFFFF;
  8877                           
  8878                           ;incstack = 0
  8879                           ; Regs used in _crc_sum: [wreg+fsr1l+fsr1h+status,2+status,0]
  8880  0C8F  30FF               	movlw	255
  8881  0C90  00F9               	movwf	crc_sum@crc
  8882  0C91  00FA               	movwf	crc_sum@crc+1
  8883                           
  8884                           ;crc16.c: 119: uint16_t i, j, Data;
  8885                           ;crc16.c: 120: for ( j=0; j<len;j++){
  8886  0C92  01F5               	clrf	crc_sum@j
  8887  0C93  01F6               	clrf	crc_sum@j+1
  8888  0C94                     l3928:	
  8889  0C94  0874               	movf	crc_sum@len+1,w
  8890  0C95  0276               	subwf	crc_sum@j+1,w
  8891  0C96  1D03               	skipz
  8892  0C97  2C9A               	goto	u2495
  8893  0C98  0873               	movf	crc_sum@len,w
  8894  0C99  0275               	subwf	crc_sum@j,w
  8895  0C9A                     u2495:	
  8896  0C9A  1803               	btfsc	3,0
  8897  0C9B  2CC0               	goto	l3930
  8898                           
  8899                           ;crc16.c: 121: crc=crc ^*buf++;
  8900  0C9C  0871               	movf	crc_sum@buf,w
  8901  0C9D  0086               	movwf	6
  8902  0C9E  0872               	movf	crc_sum@buf+1,w
  8903  0C9F  0087               	movwf	7
  8904  0CA0  0801               	movf	1,w
  8905  0CA1  06F9               	xorwf	crc_sum@crc,f
  8906  0CA2  0AF1               	incf	crc_sum@buf,f
  8907  0CA3  1903               	skipnz
  8908  0CA4  0AF2               	incf	crc_sum@buf+1,f
  8909                           
  8910                           ;crc16.c: 122: for ( i=0; i<8; i++){
  8911  0CA5  01F7               	clrf	crc_sum@i
  8912  0CA6  01F8               	clrf	crc_sum@i+1
  8913  0CA7                     l1082:	
  8914                           
  8915                           ;crc16.c: 124: if(crc&0x0001){
  8916  0CA7  1C79               	btfss	crc_sum@crc,0
  8917  0CA8  2CB0               	goto	l3922
  8918  0CA9  3001               	movlw	1
  8919                           
  8920                           ;crc16.c: 125: crc=crc>>1;
  8921  0CAA  36FA               	lsrf	crc_sum@crc+1,f
  8922  0CAB  0CF9               	rrf	crc_sum@crc,f
  8923                           
  8924                           ;crc16.c: 126: crc=crc^ 0xa001;
  8925  0CAC  06F9               	xorwf	crc_sum@crc,f
  8926  0CAD  30A0               	movlw	160
  8927  0CAE  06FA               	xorwf	crc_sum@crc+1,f
  8928                           
  8929                           ;crc16.c: 127: }else{
  8930  0CAF  2CB2               	goto	l1085
  8931  0CB0                     l3922:	
  8932                           
  8933                           ;crc16.c: 128: crc=crc>>1;
  8934  0CB0  36FA               	lsrf	crc_sum@crc+1,f
  8935  0CB1  0CF9               	rrf	crc_sum@crc,f
  8936  0CB2                     l1085:	
  8937  0CB2  0AF7               	incf	crc_sum@i,f
  8938  0CB3  1903               	skipnz
  8939  0CB4  0AF8               	incf	crc_sum@i+1,f
  8940  0CB5  3000               	movlw	0
  8941  0CB6  0278               	subwf	crc_sum@i+1,w
  8942  0CB7  3008               	movlw	8
  8943  0CB8  1903               	skipnz
  8944  0CB9  0277               	subwf	crc_sum@i,w
  8945  0CBA  1C03               	skipc
  8946  0CBB  2CA7               	goto	l1082
  8947  0CBC  0AF5               	incf	crc_sum@j,f
  8948  0CBD  1903               	skipnz
  8949  0CBE  0AF6               	incf	crc_sum@j+1,f
  8950  0CBF  2C94               	goto	l3928
  8951  0CC0                     l3930:	
  8952                           
  8953                           ;crc16.c: 129: }
  8954                           ;crc16.c: 130: }
  8955                           ;crc16.c: 132: }
  8956                           ;crc16.c: 133: return ( crc);
  8957  0CC0  087A               	movf	crc_sum@crc+1,w
  8958  0CC1  00F2               	movwf	?_crc_sum+1
  8959  0CC2  0879               	movf	crc_sum@crc,w
  8960  0CC3  00F1               	movwf	?_crc_sum
  8961  0CC4  0008               	return
  8962  0CC5                     __end_of_crc_sum:	
  8963  0CC5                     __ptext3:	
  8964 ;; *************** function _my_flash_system_read *****************
  8965 ;; Defined at:
  8966 ;;		line 21 in file "src/api/sysData.c"
  8967 ;; Parameters:    Size  Location     Type
  8968 ;;  buf             2    1[COMMON] PTR unsigned char 
  8969 ;;		 -> sysData(92), 
  8970 ;;  len             2    3[COMMON] unsigned int 
  8971 ;; Auto vars:     Size  Location     Type
  8972 ;;  flashAddr       2   10[COMMON] unsigned int 
  8973 ;;  i               2    8[COMMON] unsigned int 
  8974 ;;  GIEBitValue     1    7[COMMON] unsigned char 
  8975 ;; Return value:  Size  Location     Type
  8976 ;;                  1    wreg      void 
  8977 ;; Registers used:
  8978 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8979 ;; Tracked objects:
  8980 ;;		On entry : 1F/1B
  8981 ;;		On exit  : 7/3
  8982 ;;		Unchanged: 0/0
  8983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8984 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8985 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8986 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8987 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8988 ;;Total ram usage:       11 bytes
  8989 ;; Hardware stack levels used:    1
  8990 ;; Hardware stack levels required when called:    1
  8991 ;; This function calls:
  8992 ;;		Nothing
  8993 ;; This function is called by:
  8994 ;;		_sys_data_init
  8995 ;; This function uses a non-reentrant model
  8996 ;;
  8997                           
  8998                           
  8999                           ;psect for function _my_flash_system_read
  9000  0CC5                     _my_flash_system_read:	
  9001                           
  9002                           ;sysData.c: 23: uint16_t flashAddr=0x1f80;
  9003                           
  9004                           ;incstack = 0
  9005                           ; Regs used in _my_flash_system_read: [wreg+fsr1l+fsr1h+status,2+status,0]
  9006  0CC5  3080               	movlw	128
  9007  0CC6  00FA               	movwf	my_flash_system_read@flashAddr
  9008  0CC7  301F               	movlw	31
  9009  0CC8  00FB               	movwf	my_flash_system_read@flashAddr+1
  9010                           
  9011                           ;sysData.c: 24: uint16_t i;
  9012                           ;sysData.c: 26: uint8_t GIEBitValue = INTCONbits.GIE;
  9013  0CC9  3000               	movlw	0
  9014  0CCA  1B8B               	btfsc	11,7	;volatile
  9015  0CCB  3001               	movlw	1
  9016  0CCC  00F7               	movwf	my_flash_system_read@GIEBitValue
  9017                           
  9018                           ;sysData.c: 28: INTCONbits.GIE = 0;
  9019  0CCD  138B               	bcf	11,7	;volatile
  9020                           
  9021                           ;sysData.c: 30: for(i=0;i<len;i++){
  9022  0CCE  01F8               	clrf	my_flash_system_read@i
  9023  0CCF  01F9               	clrf	my_flash_system_read@i+1
  9024  0CD0                     l3104:	
  9025  0CD0  0874               	movf	my_flash_system_read@len+1,w
  9026  0CD1  0279               	subwf	my_flash_system_read@i+1,w
  9027  0CD2  1D03               	skipz
  9028  0CD3  2CD6               	goto	u1495
  9029  0CD4  0873               	movf	my_flash_system_read@len,w
  9030  0CD5  0278               	subwf	my_flash_system_read@i,w
  9031  0CD6                     u1495:	
  9032  0CD6  1803               	btfsc	3,0
  9033  0CD7  2CF5               	goto	l3106
  9034                           
  9035                           ;sysData.c: 32: PMADRL = (flashAddr & 0x00FF);
  9036  0CD8  087A               	movf	my_flash_system_read@flashAddr,w
  9037  0CD9  0023               	movlb	3	; select bank3
  9038  0CDA  0091               	movwf	17	;volatile
  9039                           
  9040                           ;sysData.c: 33: PMADRH = ((flashAddr & 0xFF00) >> 8);
  9041  0CDB  087B               	movf	my_flash_system_read@flashAddr+1,w
  9042  0CDC  0092               	movwf	18	;volatile
  9043                           
  9044                           ;sysData.c: 35: PMCON1bits.CFGS = 0;
  9045  0CDD  1315               	bcf	21,6	;volatile
  9046                           
  9047                           ;sysData.c: 36: PMCON1bits.RD = 1;
  9048  0CDE  1415               	bsf	21,0	;volatile
  9049                           
  9050                           ;sysData.c: 37: __nop();
  9051  0CDF  0000               	nop
  9052                           
  9053                           ;sysData.c: 38: __nop();
  9054  0CE0  0000               	nop
  9055                           
  9056                           ;sysData.c: 39: buf[i]=PMDATL;
  9057  0CE1  0878               	movf	my_flash_system_read@i,w
  9058  0CE2  0771               	addwf	my_flash_system_read@buf,w
  9059  0CE3  00F5               	movwf	??_my_flash_system_read
  9060  0CE4  0879               	movf	my_flash_system_read@i+1,w
  9061  0CE5  3D72               	addwfc	my_flash_system_read@buf+1,w
  9062  0CE6  00F6               	movwf	??_my_flash_system_read+1
  9063  0CE7  0875               	movf	??_my_flash_system_read,w
  9064  0CE8  0086               	movwf	6
  9065  0CE9  0876               	movf	??_my_flash_system_read+1,w
  9066  0CEA  0087               	movwf	7
  9067  0CEB  0023               	movlb	3	; select bank3
  9068  0CEC  0813               	movf	19,w	;volatile
  9069  0CED  0081               	movwf	1
  9070                           
  9071                           ;sysData.c: 40: flashAddr++;
  9072  0CEE  0AFA               	incf	my_flash_system_read@flashAddr,f
  9073  0CEF  1903               	skipnz
  9074  0CF0  0AFB               	incf	my_flash_system_read@flashAddr+1,f
  9075  0CF1  0AF8               	incf	my_flash_system_read@i,f
  9076  0CF2  1903               	skipnz
  9077  0CF3  0AF9               	incf	my_flash_system_read@i+1,f
  9078  0CF4  2CD0               	goto	l3104
  9079  0CF5                     l3106:	
  9080                           
  9081                           ;sysData.c: 41: }
  9082                           ;sysData.c: 42: INTCONbits.GIE = GIEBitValue;
  9083  0CF5  0C77               	rrf	my_flash_system_read@GIEBitValue,w
  9084  0CF6  2D70               	ljmp	PL34	;call to abstracted procedure
  9085  0CF7                     __end_of_my_flash_system_read:	
  9086  0CF7                     __ptext17:	
  9087 ;; *************** function _my_flash_system_write *****************
  9088 ;; Defined at:
  9089 ;;		line 45 in file "src/api/sysData.c"
  9090 ;; Parameters:    Size  Location     Type
  9091 ;;  buf             2    1[COMMON] PTR unsigned char 
  9092 ;;		 -> sysData(92), 
  9093 ;;  len             2    3[COMMON] unsigned int 
  9094 ;; Auto vars:     Size  Location     Type
  9095 ;;  i               2    9[BANK0 ] unsigned int 
  9096 ;;  flashAddr       2    7[BANK0 ] unsigned int 
  9097 ;;  loc             2    5[BANK0 ] unsigned int 
  9098 ;;  blocNum         2    3[BANK0 ] unsigned int 
  9099 ;;  j               2    0[BANK0 ] unsigned int 
  9100 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
  9101 ;; Return value:  Size  Location     Type
  9102 ;;                  2    1[COMMON] unsigned int 
  9103 ;; Registers used:
  9104 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9105 ;; Tracked objects:
  9106 ;;		On entry : 1F/3
  9107 ;;		On exit  : 1F/0
  9108 ;;		Unchanged: 0/0
  9109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9110 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9111 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9112 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9113 ;;      Totals:         5      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9114 ;;Total ram usage:       16 bytes
  9115 ;; Hardware stack levels used:    1
  9116 ;; Hardware stack levels required when called:    1
  9117 ;; This function calls:
  9118 ;;		Nothing
  9119 ;; This function is called by:
  9120 ;;		_sys_data_init
  9121 ;;		_sys_data_save
  9122 ;; This function uses a non-reentrant model
  9123 ;;
  9124                           
  9125                           
  9126                           ;psect for function _my_flash_system_write
  9127  0CF7                     _my_flash_system_write:	
  9128  0CF7                     l2760:	
  9129                           ;incstack = 0
  9130                           ; Regs used in _my_flash_system_write: [wreg+fsr1l+fsr1h+status,2+status,0]
  9131                           
  9132                           
  9133                           ;sysData.c: 48: uint16_t loc,j,i=0;
  9134  0CF7  0020               	movlb	0	; select bank0
  9135  0CF8  3080               	movlw	128
  9136  0CF9  01A9               	clrf	my_flash_system_write@i
  9137  0CFA  01AA               	clrf	my_flash_system_write@i+1
  9138                           
  9139                           ;sysData.c: 49: uint16_t flashAddr=0x1f80;
  9140  0CFB  00A7               	movwf	my_flash_system_write@flashAddr
  9141  0CFC  301F               	movlw	31
  9142  0CFD  00A8               	movwf	my_flash_system_write@flashAddr+1
  9143                           
  9144                           ;sysData.c: 50: uint8_t GIEBitValue=INTCONbits.GIE;
  9145  0CFE  3000               	movlw	0
  9146  0CFF  1B8B               	btfsc	11,7	;volatile
  9147  0D00  3001               	movlw	1
  9148  0D01  00A2               	movwf	my_flash_system_write@GIEBitValue
  9149                           
  9150                           ;sysData.c: 52: blocNum=len/32;
  9151  0D02  0874               	movf	my_flash_system_write@len+1,w
  9152  0D03  00A4               	movwf	my_flash_system_write@blocNum+1
  9153  0D04  0873               	movf	my_flash_system_write@len,w
  9154  0D05  00A3               	movwf	my_flash_system_write@blocNum
  9155  0D06  3005               	movlw	5
  9156  0D07                     u1275:	
  9157  0D07  36A4               	lsrf	my_flash_system_write@blocNum+1,f
  9158  0D08  0CA3               	rrf	my_flash_system_write@blocNum,f
  9159  0D09  0B89               	decfsz	9,f
  9160  0D0A  2D07               	goto	u1275
  9161                           
  9162                           ;sysData.c: 53: if(len%32)blocNum++;
  9163  0D0B  0873               	movf	my_flash_system_write@len,w
  9164  0D0C  391F               	andlw	31
  9165  0D0D  1903               	btfsc	3,2
  9166  0D0E  2D12               	goto	l2772
  9167  0D0F  0AA3               	incf	my_flash_system_write@blocNum,f
  9168  0D10  1903               	skipnz
  9169  0D11  0AA4               	incf	my_flash_system_write@blocNum+1,f
  9170  0D12                     l2772:	
  9171                           
  9172                           ;sysData.c: 55: INTCONbits.GIE = 0;
  9173  0D12  138B               	bcf	11,7	;volatile
  9174                           
  9175                           ;sysData.c: 56: loc=0;
  9176  0D13  01A5               	clrf	my_flash_system_write@loc
  9177  0D14  01A6               	clrf	my_flash_system_write@loc+1
  9178                           
  9179                           ;sysData.c: 57: for(j=0;j<blocNum;j++){
  9180  0D15  01A0               	clrf	my_flash_system_write@j
  9181  0D16  01A1               	clrf	my_flash_system_write@j+1
  9182  0D17                     l2812:	
  9183  0D17  0824               	movf	my_flash_system_write@blocNum+1,w
  9184  0D18  0221               	subwf	my_flash_system_write@j+1,w
  9185  0D19  1D03               	skipz
  9186  0D1A  2D1D               	goto	u1325
  9187  0D1B  0823               	movf	my_flash_system_write@blocNum,w
  9188  0D1C  0220               	subwf	my_flash_system_write@j,w
  9189  0D1D                     u1325:	
  9190  0D1D  1803               	btfsc	3,0
  9191  0D1E  2D6E               	goto	l2814
  9192                           
  9193                           ;sysData.c: 58: PMCON1bits.CFGS = 0;
  9194  0D1F  0023               	movlb	3	; select bank3
  9195  0D20  1315               	bcf	21,6	;volatile
  9196                           
  9197                           ;sysData.c: 59: PMCON1bits.WREN = 1;
  9198  0D21  1515               	bsf	21,2	;volatile
  9199                           
  9200                           ;sysData.c: 60: PMCON1bits.LWLO = 1;
  9201  0D22  1695               	bsf	21,5	;volatile
  9202                           
  9203                           ;sysData.c: 62: for(i=0;i<32;i++){
  9204  0D23  0020               	movlb	0	; select bank0
  9205  0D24  01A9               	clrf	my_flash_system_write@i
  9206  0D25  01AA               	clrf	my_flash_system_write@i+1
  9207  0D26                     l2784:	
  9208                           
  9209                           ;sysData.c: 64: PMADRL = (flashAddr & 0xFF);
  9210  0D26  0827               	movf	my_flash_system_write@flashAddr,w
  9211  0D27  0023               	movlb	3	; select bank3
  9212  0D28  0091               	movwf	17	;volatile
  9213                           
  9214                           ;sysData.c: 66: PMADRH = ((flashAddr & 0xFF00) >> 8);
  9215  0D29  0020               	movlb	0	; select bank0
  9216  0D2A  0828               	movf	my_flash_system_write@flashAddr+1,w
  9217  0D2B  0023               	movlb	3	; select bank3
  9218  0D2C  0092               	movwf	18	;volatile
  9219                           
  9220                           ;sysData.c: 69: if(loc<len){
  9221  0D2D  0874               	movf	my_flash_system_write@len+1,w
  9222  0D2E  0020               	movlb	0	; select bank0
  9223  0D2F  0226               	subwf	my_flash_system_write@loc+1,w
  9224  0D30  1D03               	skipz
  9225  0D31  2D34               	goto	u1295
  9226  0D32  0873               	movf	my_flash_system_write@len,w
  9227  0D33  0225               	subwf	my_flash_system_write@loc,w
  9228  0D34                     u1295:	
  9229  0D34  1803               	skipnc
  9230  0D35  2D40               	goto	l2788
  9231                           
  9232                           ;sysData.c: 70: PMDATL = buf[loc];
  9233  0D36  0825               	movf	my_flash_system_write@loc,w
  9234  0D37  0771               	addwf	my_flash_system_write@buf,w
  9235  0D38  0086               	movwf	6
  9236  0D39  0826               	movf	my_flash_system_write@loc+1,w
  9237  0D3A  3D72               	addwfc	my_flash_system_write@buf+1,w
  9238  0D3B  0087               	movwf	7
  9239  0D3C  0801               	movf	1,w
  9240  0D3D  0023               	movlb	3	; select bank3
  9241  0D3E  0093               	movwf	19	;volatile
  9242                           
  9243                           ;sysData.c: 71: }else{
  9244  0D3F  2D42               	goto	l2790
  9245  0D40                     l2788:	
  9246                           
  9247                           ;sysData.c: 72: PMDATL = 0x00;
  9248  0D40  0023               	movlb	3	; select bank3
  9249  0D41  0193               	clrf	19	;volatile
  9250  0D42                     l2790:	
  9251                           
  9252                           ;sysData.c: 73: }
  9253                           ;sysData.c: 74: loc++;
  9254  0D42  0020               	movlb	0	; select bank0
  9255  0D43  0AA5               	incf	my_flash_system_write@loc,f
  9256  0D44  1903               	skipnz
  9257  0D45  0AA6               	incf	my_flash_system_write@loc+1,f
  9258                           
  9259                           ;sysData.c: 75: PMDATH = 0x00;
  9260  0D46  0023               	movlb	3	; select bank3
  9261  0D47  0194               	clrf	20	;volatile
  9262                           
  9263                           ;sysData.c: 76: if((i%32) == 32 -1 ){
  9264  0D48  301F               	movlw	31
  9265  0D49  0020               	movlb	0	; select bank0
  9266  0D4A  0529               	andwf	my_flash_system_write@i,w
  9267  0D4B  00F5               	movwf	??_my_flash_system_write
  9268  0D4C  3A1F               	xorlw	31
  9269  0D4D  1D03               	btfss	3,2
  9270  0D4E  2D51               	goto	l2798
  9271                           
  9272                           ;sysData.c: 77: PMCON1bits.LWLO = 0;
  9273  0D4F  0023               	movlb	3	; select bank3
  9274  0D50  1295               	bcf	21,5	;volatile
  9275  0D51                     l2798:	
  9276                           
  9277                           ;sysData.c: 78: }
  9278                           ;sysData.c: 80: PMCON2 = 0x55;
  9279  0D51  3055               	movlw	85
  9280  0D52  0023               	movlb	3	; select bank3
  9281  0D53  0096               	movwf	22	;volsfr
  9282                           
  9283                           ;sysData.c: 81: PMCON2 = 0xAA;
  9284  0D54  30AA               	movlw	170
  9285  0D55  0096               	movwf	22	;volsfr
  9286                           
  9287                           ;sysData.c: 82: PMCON1bits.WR = 1;
  9288  0D56  1495               	bsf	21,1	;volatile
  9289                           
  9290                           ;sysData.c: 83: __nop();
  9291  0D57  0000               	nop
  9292                           
  9293                           ;sysData.c: 84: __nop();
  9294  0D58  0000               	nop
  9295                           
  9296                           ;sysData.c: 85: flashAddr++;
  9297  0D59  0020               	movlb	0	; select bank0
  9298  0D5A  0AA7               	incf	my_flash_system_write@flashAddr,f
  9299  0D5B  1903               	skipnz
  9300  0D5C  0AA8               	incf	my_flash_system_write@flashAddr+1,f
  9301  0D5D  0AA9               	incf	my_flash_system_write@i,f
  9302  0D5E  1903               	skipnz
  9303  0D5F  0AAA               	incf	my_flash_system_write@i+1,f
  9304  0D60  3000               	movlw	0
  9305  0D61  022A               	subwf	my_flash_system_write@i+1,w
  9306  0D62  3020               	movlw	32
  9307  0D63  1903               	skipnz
  9308  0D64  0229               	subwf	my_flash_system_write@i,w
  9309  0D65  1C03               	skipc
  9310  0D66  2D26               	goto	l2784
  9311                           
  9312                           ;sysData.c: 86: }
  9313                           ;sysData.c: 87: PMCON1bits.WREN = 0;
  9314  0D67  0023               	movlb	3	; select bank3
  9315  0D68  1115               	bcf	21,2	;volatile
  9316  0D69  0020               	movlb	0	; select bank0
  9317  0D6A  0AA0               	incf	my_flash_system_write@j,f
  9318  0D6B  1903               	skipnz
  9319  0D6C  0AA1               	incf	my_flash_system_write@j+1,f
  9320  0D6D  2D17               	goto	l2812
  9321  0D6E                     l2814:	
  9322                           
  9323                           ;sysData.c: 88: }
  9324                           ;sysData.c: 89: INTCONbits.GIE = GIEBitValue;
  9325  0D6E  0C22               	rrf	my_flash_system_write@GIEBitValue,w
  9326  0D6F  2D70               	ljmp	PL34	;call to abstracted procedure
  9327  0D70                     __end_of_my_flash_system_write:	
  9328  0D70                     PL34:	
  9329  0D70  1C03               	skipc
  9330  0D71  138B               	bcf	11,7	;volatile
  9331  0D72  1803               	skipnc
  9332  0D73  178B               	bsf	11,7	;volatile
  9333  0D74  0008               	return
  9334  0D75                     __end_ofPL34:	
  9335                           
  9336                           	psect	text5
  9337  0869                     __ptext5:	
  9338 ;; *************** function _pid_pwm2_vout_run *****************
  9339 ;; Defined at:
  9340 ;;		line 306 in file "src/api/sample.c"
  9341 ;; Parameters:    Size  Location     Type
  9342 ;;		None
  9343 ;; Auto vars:     Size  Location     Type
  9344 ;;  t16             2    2[BANK0 ] int 
  9345 ;;  ei              2    0[BANK0 ] int 
  9346 ;; Return value:  Size  Location     Type
  9347 ;;                  1    wreg      void 
  9348 ;; Registers used:
  9349 ;;		wreg, status,2, status,0, pclath, cstack
  9350 ;; Tracked objects:
  9351 ;;		On entry : 1F/0
  9352 ;;		On exit  : 1F/1B
  9353 ;;		Unchanged: 0/0
  9354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9356 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9357 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9358 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9359 ;;Total ram usage:        5 bytes
  9360 ;; Hardware stack levels used:    1
  9361 ;; Hardware stack levels required when called:    3
  9362 ;; This function calls:
  9363 ;;		___awdiv
  9364 ;;		___lwdiv
  9365 ;;		_set_vout_pwm2_duty
  9366 ;; This function is called by:
  9367 ;;		_main
  9368 ;; This function uses a non-reentrant model
  9369 ;;
  9370                           
  9371                           
  9372                           ;psect for function _pid_pwm2_vout_run
  9373  0869                     _pid_pwm2_vout_run:	
  9374                           
  9375                           ;sample.c: 308: int16_t t16,ei;
  9376                           ;sample.c: 309: t16=voExpectAdcValue-rtAdcValueVoFb;
  9377                           
  9378                           ;incstack = 0
  9379                           ; Regs used in _pid_pwm2_vout_run: [wreg+status,2+status,0+pclath+cstack]
  9380  0869  0857               	movf	_voExpectAdcValue+1,w
  9381  086A  00A3               	movwf	pid_pwm2_vout_run@t16+1
  9382  086B  0856               	movf	_voExpectAdcValue,w
  9383  086C  00A2               	movwf	pid_pwm2_vout_run@t16
  9384  086D  0854               	movf	_rtAdcValueVoFb,w
  9385  086E  02A2               	subwf	pid_pwm2_vout_run@t16,f
  9386  086F  0855               	movf	_rtAdcValueVoFb+1,w
  9387  0870  3BA3               	subwfb	pid_pwm2_vout_run@t16+1,f
  9388                           
  9389                           ;sample.c: 310: ei=t16/150;
  9390  0871  3096               	movlw	150
  9391  0872  00F1               	movwf	___awdiv@divisor
  9392  0873  01F2               	clrf	___awdiv@divisor+1
  9393  0874  0823               	movf	pid_pwm2_vout_run@t16+1,w
  9394  0875  00F4               	movwf	___awdiv@dividend+1
  9395  0876  0822               	movf	pid_pwm2_vout_run@t16,w
  9396  0877  00F3               	movwf	___awdiv@dividend
  9397  0878  20DD  3188         	fcall	___awdiv
  9398  087A  0872               	movf	?___awdiv+1,w
  9399  087B  00A1               	movwf	pid_pwm2_vout_run@ei+1
  9400  087C  0871               	movf	?___awdiv,w
  9401  087D  00A0               	movwf	pid_pwm2_vout_run@ei
  9402                           
  9403                           ;sample.c: 311: if(ei==0){
  9404  087E  0421               	iorwf	pid_pwm2_vout_run@ei+1,w
  9405  087F  1D03               	btfss	3,2
  9406  0880  28A0               	goto	l673
  9407                           
  9408                           ;sample.c: 312: if(t16>32)ei=1;
  9409  0881  0823               	movf	pid_pwm2_vout_run@t16+1,w
  9410  0882  3A80               	xorlw	128
  9411  0883  00F9               	movwf	??_pid_pwm2_vout_run
  9412  0884  3080               	movlw	128
  9413  0885  0279               	subwf	??_pid_pwm2_vout_run,w
  9414  0886  1D03               	skipz
  9415  0887  288A               	goto	u2095
  9416  0888  3021               	movlw	33
  9417  0889  0222               	subwf	pid_pwm2_vout_run@t16,w
  9418  088A                     u2095:	
  9419  088A  1C03               	skipc
  9420  088B  2890               	goto	l3600
  9421  088C  0020               	movlb	0	; select bank0
  9422  088D  01A0               	clrf	pid_pwm2_vout_run@ei
  9423  088E  0AA0               	incf	pid_pwm2_vout_run@ei,f
  9424  088F  01A1               	clrf	pid_pwm2_vout_run@ei+1
  9425  0890                     l3600:	
  9426                           
  9427                           ;sample.c: 313: if(t16<-32)ei=-1;
  9428  0890  0020               	movlb	0	; select bank0
  9429  0891  0823               	movf	pid_pwm2_vout_run@t16+1,w
  9430  0892  3A80               	xorlw	128
  9431  0893  00F9               	movwf	??_pid_pwm2_vout_run
  9432  0894  307F               	movlw	127
  9433  0895  0279               	subwf	??_pid_pwm2_vout_run,w
  9434  0896  1D03               	skipz
  9435  0897  289A               	goto	u2105
  9436  0898  30E0               	movlw	224
  9437  0899  0222               	subwf	pid_pwm2_vout_run@t16,w
  9438  089A                     u2105:	
  9439  089A  1803               	skipnc
  9440  089B  28A0               	goto	l673
  9441  089C  30FF               	movlw	255
  9442  089D  0020               	movlb	0	; select bank0
  9443  089E  00A0               	movwf	pid_pwm2_vout_run@ei
  9444  089F  00A1               	movwf	pid_pwm2_vout_run@ei+1
  9445  08A0                     l673:	
  9446                           
  9447                           ;sample.c: 314: }
  9448                           ;sample.c: 316: pwm2Ei=pwm2Ei+ei;
  9449  08A0  0020               	movlb	0	; select bank0
  9450  08A1  0820               	movf	pid_pwm2_vout_run@ei,w
  9451  08A2  07CA               	addwf	_pwm2Ei,f
  9452  08A3  0821               	movf	pid_pwm2_vout_run@ei+1,w
  9453  08A4  3DCB               	addwfc	_pwm2Ei+1,f
  9454                           
  9455                           ;sample.c: 320: t16=voExpectAdcValue/10;
  9456  08A5  300A               	movlw	10
  9457  08A6  00F1               	movwf	___lwdiv@divisor
  9458  08A7  01F2               	clrf	___lwdiv@divisor+1
  9459  08A8  0857               	movf	_voExpectAdcValue+1,w
  9460  08A9  00F4               	movwf	___lwdiv@dividend+1
  9461  08AA  0856               	movf	_voExpectAdcValue,w
  9462  08AB  00F3               	movwf	___lwdiv@dividend
  9463  08AC  211D  3188         	fcall	___lwdiv
  9464  08AE  0872               	movf	?___lwdiv+1,w
  9465  08AF  00A3               	movwf	pid_pwm2_vout_run@t16+1
  9466  08B0  0871               	movf	?___lwdiv,w
  9467  08B1  00A2               	movwf	pid_pwm2_vout_run@t16
  9468                           
  9469                           ;sample.c: 322: pwm2DutyForVout=t16+pwm2Ei;
  9470  08B2  084A               	movf	_pwm2Ei,w
  9471  08B3  0722               	addwf	pid_pwm2_vout_run@t16,w
  9472  08B4  00E4               	movwf	_pwm2DutyForVout
  9473  08B5  084B               	movf	_pwm2Ei+1,w
  9474  08B6  3D23               	addwfc	pid_pwm2_vout_run@t16+1,w
  9475  08B7  00E5               	movwf	_pwm2DutyForVout+1
  9476                           
  9477                           ;sample.c: 323: if(pwm2DutyForVout>1580)pwm2DutyForVout=1580;
  9478  08B8  3A80               	xorlw	128
  9479  08B9  00F9               	movwf	??_pid_pwm2_vout_run
  9480  08BA  3086               	movlw	134
  9481  08BB  0279               	subwf	??_pid_pwm2_vout_run,w
  9482  08BC  1D03               	skipz
  9483  08BD  28C0               	goto	u2115
  9484  08BE  302D               	movlw	45
  9485  08BF  0264               	subwf	_pwm2DutyForVout,w
  9486  08C0                     u2115:	
  9487  08C0  1C03               	skipc
  9488  08C1  28C7               	goto	l676
  9489  08C2  302C               	movlw	44
  9490  08C3  0020               	movlb	0	; select bank0
  9491  08C4  00E4               	movwf	_pwm2DutyForVout
  9492  08C5  3006               	movlw	6
  9493  08C6  00E5               	movwf	_pwm2DutyForVout+1
  9494  08C7                     l676:	
  9495                           
  9496                           ;sample.c: 324: if(pwm2DutyForVout<2)pwm2DutyForVout=2;
  9497  08C7  0020               	movlb	0	; select bank0
  9498  08C8  0865               	movf	_pwm2DutyForVout+1,w
  9499  08C9  3A80               	xorlw	128
  9500  08CA  00F9               	movwf	??_pid_pwm2_vout_run
  9501  08CB  3080               	movlw	128
  9502  08CC  0279               	subwf	??_pid_pwm2_vout_run,w
  9503  08CD  1D03               	skipz
  9504  08CE  28D1               	goto	u2125
  9505  08CF  3002               	movlw	2
  9506  08D0  0264               	subwf	_pwm2DutyForVout,w
  9507  08D1                     u2125:	
  9508  08D1  1803               	skipnc
  9509  08D2  28D7               	goto	l3614
  9510  08D3  3002               	movlw	2
  9511  08D4  0020               	movlb	0	; select bank0
  9512  08D5  00E4               	movwf	_pwm2DutyForVout
  9513  08D6  01E5               	clrf	_pwm2DutyForVout+1
  9514  08D7                     l3614:	
  9515                           
  9516                           ;sample.c: 325: set_vout_pwm2_duty(pwm2DutyForVout);
  9517  08D7  0020               	movlb	0	; select bank0
  9518  08D8  0865               	movf	_pwm2DutyForVout+1,w
  9519  08D9  00F4               	movwf	set_vout_pwm2_duty@duty+1
  9520  08DA  0864               	movf	_pwm2DutyForVout,w
  9521  08DB  00F3               	movwf	set_vout_pwm2_duty@duty
  9522  08DC  2942               	ljmp	l3050
  9523  08DD                     __end_of_pid_pwm2_vout_run:	
  9524  08DD                     __ptext9:	
  9525 ;; *************** function ___awdiv *****************
  9526 ;; Defined at:
  9527 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  9528 ;; Parameters:    Size  Location     Type
  9529 ;;  divisor         2    1[COMMON] int 
  9530 ;;  dividend        2    3[COMMON] int 
  9531 ;; Auto vars:     Size  Location     Type
  9532 ;;  quotient        2    7[COMMON] int 
  9533 ;;  sign            1    6[COMMON] unsigned char 
  9534 ;;  counter         1    5[COMMON] unsigned char 
  9535 ;; Return value:  Size  Location     Type
  9536 ;;                  2    1[COMMON] int 
  9537 ;; Registers used:
  9538 ;;		wreg, status,2, status,0
  9539 ;; Tracked objects:
  9540 ;;		On entry : 1F/0
  9541 ;;		On exit  : 1F/0
  9542 ;;		Unchanged: 1F/0
  9543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9544 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9545 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9547 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9548 ;;Total ram usage:        8 bytes
  9549 ;; Hardware stack levels used:    1
  9550 ;; Hardware stack levels required when called:    1
  9551 ;; This function calls:
  9552 ;;		Nothing
  9553 ;; This function is called by:
  9554 ;;		_pid_pwm2_vout_run
  9555 ;; This function uses a non-reentrant model
  9556 ;;
  9557                           
  9558                           
  9559                           ;psect for function ___awdiv
  9560  08DD                     ___awdiv:	
  9561                           
  9562                           ;incstack = 0
  9563                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  9564  08DD  01F6               	clrf	___awdiv@sign
  9565  08DE  1FF2               	btfss	___awdiv@divisor+1,7
  9566  08DF  28E7               	goto	l3326
  9567  08E0  09F1               	comf	___awdiv@divisor,f
  9568  08E1  09F2               	comf	___awdiv@divisor+1,f
  9569  08E2  0AF1               	incf	___awdiv@divisor,f
  9570  08E3  1903               	skipnz
  9571  08E4  0AF2               	incf	___awdiv@divisor+1,f
  9572  08E5  01F6               	clrf	___awdiv@sign
  9573  08E6  0AF6               	incf	___awdiv@sign,f
  9574  08E7                     l3326:	
  9575  08E7  1FF4               	btfss	___awdiv@dividend+1,7
  9576  08E8  28F0               	goto	l3332
  9577  08E9  09F3               	comf	___awdiv@dividend,f
  9578  08EA  09F4               	comf	___awdiv@dividend+1,f
  9579  08EB  0AF3               	incf	___awdiv@dividend,f
  9580  08EC  1903               	skipnz
  9581  08ED  0AF4               	incf	___awdiv@dividend+1,f
  9582  08EE  3001               	movlw	1
  9583  08EF  06F6               	xorwf	___awdiv@sign,f
  9584  08F0                     l3332:	
  9585  08F0  01F7               	clrf	___awdiv@quotient
  9586  08F1  01F8               	clrf	___awdiv@quotient+1
  9587  08F2  0871               	movf	___awdiv@divisor,w
  9588  08F3  0472               	iorwf	___awdiv@divisor+1,w
  9589  08F4  1903               	btfsc	3,2
  9590  08F5  2910               	goto	l3354
  9591  08F6  01F5               	clrf	___awdiv@counter
  9592  08F7                     L2:	
  9593  08F7  0AF5               	incf	___awdiv@counter,f
  9594  08F8  1BF2               	btfsc	___awdiv@divisor+1,7
  9595  08F9  28FD               	goto	l3342
  9596  08FA  35F1               	lslf	___awdiv@divisor,f
  9597  08FB  0DF2               	rlf	___awdiv@divisor+1,f
  9598  08FC  28F7               	goto	L2
  9599  08FD                     l3342:	
  9600  08FD  35F7               	lslf	___awdiv@quotient,f
  9601  08FE  0DF8               	rlf	___awdiv@quotient+1,f
  9602  08FF  0872               	movf	___awdiv@divisor+1,w
  9603  0900  0274               	subwf	___awdiv@dividend+1,w
  9604  0901  1D03               	skipz
  9605  0902  2905               	goto	u1815
  9606  0903  0871               	movf	___awdiv@divisor,w
  9607  0904  0273               	subwf	___awdiv@dividend,w
  9608  0905                     u1815:	
  9609  0905  1C03               	skipc
  9610  0906  290C               	goto	l3350
  9611  0907  0871               	movf	___awdiv@divisor,w
  9612  0908  02F3               	subwf	___awdiv@dividend,f
  9613  0909  0872               	movf	___awdiv@divisor+1,w
  9614  090A  3BF4               	subwfb	___awdiv@dividend+1,f
  9615  090B  1477               	bsf	___awdiv@quotient,0
  9616  090C                     l3350:	
  9617  090C  36F2               	lsrf	___awdiv@divisor+1,f
  9618  090D  0CF1               	rrf	___awdiv@divisor,f
  9619  090E  0BF5               	decfsz	___awdiv@counter,f
  9620  090F  28FD               	goto	l3342
  9621  0910                     l3354:	
  9622  0910  0876               	movf	___awdiv@sign,w
  9623  0911  1903               	btfsc	3,2
  9624  0912  2918               	goto	l3358
  9625  0913  09F7               	comf	___awdiv@quotient,f
  9626  0914  09F8               	comf	___awdiv@quotient+1,f
  9627  0915  0AF7               	incf	___awdiv@quotient,f
  9628  0916  1903               	skipnz
  9629  0917  0AF8               	incf	___awdiv@quotient+1,f
  9630  0918                     l3358:	
  9631  0918  0878               	movf	___awdiv@quotient+1,w
  9632  0919  00F2               	movwf	?___awdiv+1
  9633  091A  0877               	movf	___awdiv@quotient,w
  9634  091B  00F1               	movwf	?___awdiv
  9635  091C  0008               	return
  9636  091D                     __end_of___awdiv:	
  9637  091D                     __ptext8:	
  9638 ;; *************** function ___lwdiv *****************
  9639 ;; Defined at:
  9640 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  9641 ;; Parameters:    Size  Location     Type
  9642 ;;  divisor         2    1[COMMON] unsigned int 
  9643 ;;  dividend        2    3[COMMON] unsigned int 
  9644 ;; Auto vars:     Size  Location     Type
  9645 ;;  quotient        2    5[COMMON] unsigned int 
  9646 ;;  counter         1    7[COMMON] unsigned char 
  9647 ;; Return value:  Size  Location     Type
  9648 ;;                  2    1[COMMON] unsigned int 
  9649 ;; Registers used:
  9650 ;;		wreg, status,2, status,0
  9651 ;; Tracked objects:
  9652 ;;		On entry : 1F/0
  9653 ;;		On exit  : 1F/0
  9654 ;;		Unchanged: 1F/0
  9655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9656 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9657 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9659 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9660 ;;Total ram usage:        7 bytes
  9661 ;; Hardware stack levels used:    1
  9662 ;; Hardware stack levels required when called:    1
  9663 ;; This function calls:
  9664 ;;		Nothing
  9665 ;; This function is called by:
  9666 ;;		_pid_pwm2_vout_run
  9667 ;; This function uses a non-reentrant model
  9668 ;;
  9669                           
  9670                           
  9671                           ;psect for function ___lwdiv
  9672  091D                     ___lwdiv:	
  9673                           
  9674                           ;incstack = 0
  9675                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  9676  091D  01F5               	clrf	___lwdiv@quotient
  9677  091E  01F6               	clrf	___lwdiv@quotient+1
  9678  091F  0871               	movf	___lwdiv@divisor,w
  9679  0920  0472               	iorwf	___lwdiv@divisor+1,w
  9680  0921  1903               	btfsc	3,2
  9681  0922  293D               	goto	l3410
  9682  0923  01F7               	clrf	___lwdiv@counter
  9683  0924                     L1:	
  9684  0924  0AF7               	incf	___lwdiv@counter,f
  9685  0925  1BF2               	btfsc	___lwdiv@divisor+1,7
  9686  0926  292A               	goto	l3398
  9687  0927  35F1               	lslf	___lwdiv@divisor,f
  9688  0928  0DF2               	rlf	___lwdiv@divisor+1,f
  9689  0929  2924               	goto	L1
  9690  092A                     l3398:	
  9691  092A  35F5               	lslf	___lwdiv@quotient,f
  9692  092B  0DF6               	rlf	___lwdiv@quotient+1,f
  9693  092C  0872               	movf	___lwdiv@divisor+1,w
  9694  092D  0274               	subwf	___lwdiv@dividend+1,w
  9695  092E  1D03               	skipz
  9696  092F  2932               	goto	u1905
  9697  0930  0871               	movf	___lwdiv@divisor,w
  9698  0931  0273               	subwf	___lwdiv@dividend,w
  9699  0932                     u1905:	
  9700  0932  1C03               	skipc
  9701  0933  2939               	goto	l3406
  9702  0934  0871               	movf	___lwdiv@divisor,w
  9703  0935  02F3               	subwf	___lwdiv@dividend,f
  9704  0936  0872               	movf	___lwdiv@divisor+1,w
  9705  0937  3BF4               	subwfb	___lwdiv@dividend+1,f
  9706  0938  1475               	bsf	___lwdiv@quotient,0
  9707  0939                     l3406:	
  9708  0939  36F2               	lsrf	___lwdiv@divisor+1,f
  9709  093A  0CF1               	rrf	___lwdiv@divisor,f
  9710  093B  0BF7               	decfsz	___lwdiv@counter,f
  9711  093C  292A               	goto	l3398
  9712  093D                     l3410:	
  9713  093D  0876               	movf	___lwdiv@quotient+1,w
  9714  093E  00F2               	movwf	?___lwdiv+1
  9715  093F  0875               	movf	___lwdiv@quotient,w
  9716  0940  00F1               	movwf	?___lwdiv
  9717  0941  0008               	return
  9718  0942                     __end_of___lwdiv:	
  9719  0942                     __ptext6:	
  9720 ;; *************** function _set_vout_pwm2_duty *****************
  9721 ;; Defined at:
  9722 ;;		line 62 in file "src/api/sample.c"
  9723 ;; Parameters:    Size  Location     Type
  9724 ;;  duty            2    3[COMMON] unsigned int 
  9725 ;; Auto vars:     Size  Location     Type
  9726 ;;  t16             2    5[COMMON] unsigned int 
  9727 ;; Return value:  Size  Location     Type
  9728 ;;                  1    wreg      void 
  9729 ;; Registers used:
  9730 ;;		wreg, pclath, cstack
  9731 ;; Tracked objects:
  9732 ;;		On entry : 1E/1
  9733 ;;		On exit  : 1F/1B
  9734 ;;		Unchanged: 0/0
  9735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9736 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9737 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9739 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9740 ;;Total ram usage:        4 bytes
  9741 ;; Hardware stack levels used:    1
  9742 ;; Hardware stack levels required when called:    2
  9743 ;; This function calls:
  9744 ;;		_get_vout_pwm2_duty
  9745 ;; This function is called by:
  9746 ;;		_pid_pwm2_vout_run
  9747 ;;		_main
  9748 ;; This function uses a non-reentrant model
  9749 ;;
  9750                           
  9751                           
  9752                           ;psect for function _set_vout_pwm2_duty
  9753  0942                     _set_vout_pwm2_duty:	
  9754  0942                     l3050:	
  9755                           ;incstack = 0
  9756                           ; Regs used in _set_vout_pwm2_duty: [wreg+pclath+cstack]
  9757                           
  9758                           
  9759                           ;sample.c: 64: uint16_t t16;
  9760                           ;sample.c: 65: t16=get_vout_pwm2_duty();
  9761  0942  2157  3188         	fcall	_get_vout_pwm2_duty
  9762  0944  0872               	movf	?_get_vout_pwm2_duty+1,w
  9763  0945  00F6               	movwf	set_vout_pwm2_duty@t16+1
  9764  0946  0871               	movf	?_get_vout_pwm2_duty,w
  9765  0947  00F5               	movwf	set_vout_pwm2_duty@t16
  9766                           
  9767                           ;sample.c: 66: if(t16==duty)return;
  9768  0948  0874               	movf	set_vout_pwm2_duty@duty+1,w
  9769  0949  0676               	xorwf	set_vout_pwm2_duty@t16+1,w
  9770  094A  1D03               	skipz
  9771  094B  294E               	goto	u1455
  9772  094C  0873               	movf	set_vout_pwm2_duty@duty,w
  9773  094D  0675               	xorwf	set_vout_pwm2_duty@t16,w
  9774  094E                     u1455:	
  9775  094E  1903               	btfsc	3,2
  9776  094F  0008               	return
  9777                           
  9778                           ;sample.c: 67: PWM2CONbits.EN = 0;
  9779  0950  13AB               	bcf	43,7	;volatile
  9780                           
  9781                           ;sample.c: 68: PWM2DCL= (uint8_t)(duty&0xff);
  9782  0951  0873               	movf	set_vout_pwm2_duty@duty,w
  9783  0952  00A3               	movwf	35	;volatile
  9784                           
  9785                           ;sample.c: 69: PWM2DCH=(uint8_t)(duty>>8);
  9786  0953  0874               	movf	set_vout_pwm2_duty@duty+1,w
  9787  0954  00A4               	movwf	36	;volatile
  9788                           
  9789                           ;sample.c: 70: PWM2CONbits.EN = 1;
  9790  0955  17AB               	bsf	43,7	;volatile
  9791  0956  0008               	return
  9792  0957                     __end_of_set_vout_pwm2_duty:	
  9793  0957                     __ptext7:	
  9794 ;; *************** function _get_vout_pwm2_duty *****************
  9795 ;; Defined at:
  9796 ;;		line 57 in file "src/api/sample.c"
  9797 ;; Parameters:    Size  Location     Type
  9798 ;;		None
  9799 ;; Auto vars:     Size  Location     Type
  9800 ;;		None
  9801 ;; Return value:  Size  Location     Type
  9802 ;;                  2    1[COMMON] unsigned int 
  9803 ;; Registers used:
  9804 ;;		wreg
  9805 ;; Tracked objects:
  9806 ;;		On entry : 1E/1
  9807 ;;		On exit  : 1F/1B
  9808 ;;		Unchanged: 0/0
  9809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9810 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9813 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9814 ;;Total ram usage:        2 bytes
  9815 ;; Hardware stack levels used:    1
  9816 ;; Hardware stack levels required when called:    1
  9817 ;; This function calls:
  9818 ;;		Nothing
  9819 ;; This function is called by:
  9820 ;;		_set_vout_pwm2_duty
  9821 ;; This function uses a non-reentrant model
  9822 ;;
  9823                           
  9824                           
  9825                           ;psect for function _get_vout_pwm2_duty
  9826  0957                     _get_vout_pwm2_duty:	
  9827                           
  9828                           ;sample.c: 59: return ((PWM2DCH<<8)|PWM2DCL);
  9829                           
  9830                           ;incstack = 0
  9831                           ; Regs used in _get_vout_pwm2_duty: [wreg]
  9832  0957  003B               	movlb	27	; select bank27
  9833  0958  0824               	movf	36,w	;volatile
  9834  0959  00F2               	movwf	?_get_vout_pwm2_duty+1
  9835  095A  01F1               	clrf	?_get_vout_pwm2_duty
  9836  095B  0823               	movf	35,w	;volatile
  9837  095C  04F1               	iorwf	?_get_vout_pwm2_duty,f
  9838  095D  0008               	return
  9839  095E                     __end_of_get_vout_pwm2_duty:	
  9840                           
  9841                           	psect	text10
  9842  095E                     __ptext10:	
  9843 ;; *************** function _pid_pwm1_idrv_run *****************
  9844 ;; Defined at:
  9845 ;;		line 273 in file "src/api/sample.c"
  9846 ;; Parameters:    Size  Location     Type
  9847 ;;		None
  9848 ;; Auto vars:     Size  Location     Type
  9849 ;;  t32             4   36[BANK0 ] long 
  9850 ;;  ed              4    0        long 
  9851 ;;  ei              4   26[BANK0 ] long 
  9852 ;;  ep              4   22[BANK0 ] long 
  9853 ;;  t16             2   34[BANK0 ] unsigned int 
  9854 ;; Return value:  Size  Location     Type
  9855 ;;                  1    wreg      void 
  9856 ;; Registers used:
  9857 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9858 ;; Tracked objects:
  9859 ;;		On entry : 1F/0
  9860 ;;		On exit  : 1F/1B
  9861 ;;		Unchanged: 0/0
  9862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9864 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9865 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9866 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9867 ;;Total ram usage:       22 bytes
  9868 ;; Hardware stack levels used:    1
  9869 ;; Hardware stack levels required when called:    3
  9870 ;; This function calls:
  9871 ;;		___aldiv
  9872 ;;		___lmul
  9873 ;;		_set_idrv_pwm1_duty
  9874 ;; This function is called by:
  9875 ;;		_main
  9876 ;; This function uses a non-reentrant model
  9877 ;;
  9878                           
  9879                           
  9880                           ;psect for function _pid_pwm1_idrv_run
  9881  095E                     _pid_pwm1_idrv_run:	
  9882                           
  9883                           ;sample.c: 276: int32_t ep,ei,ed;
  9884                           ;sample.c: 277: int32_t t32;
  9885                           ;sample.c: 278: t32=(resRs-resRc);
  9886                           
  9887                           ;incstack = 0
  9888                           ; Regs used in _pid_pwm1_idrv_run: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9889  095E  0021               	movlb	1	; select bank1
  9890  095F  086F               	movf	(_resRs+3)^(0+128),w
  9891  0960  0020               	movlb	0	; select bank0
  9892  0961  00C7               	movwf	pid_pwm1_idrv_run@t32+3
  9893  0962  0021               	movlb	1	; select bank1
  9894  0963  086E               	movf	(_resRs+2)^(0+128),w
  9895  0964  0020               	movlb	0	; select bank0
  9896  0965  00C6               	movwf	pid_pwm1_idrv_run@t32+2
  9897  0966  0021               	movlb	1	; select bank1
  9898  0967  086D               	movf	(_resRs+1)^(0+128),w
  9899  0968  0020               	movlb	0	; select bank0
  9900  0969  00C5               	movwf	pid_pwm1_idrv_run@t32+1
  9901  096A  0021               	movlb	1	; select bank1
  9902  096B  086C               	movf	_resRs^(0+128),w
  9903  096C  0020               	movlb	0	; select bank0
  9904  096D  00C4               	movwf	pid_pwm1_idrv_run@t32
  9905  096E  0860               	movf	_resRc,w
  9906  096F  02C4               	subwf	pid_pwm1_idrv_run@t32,f
  9907  0970  0861               	movf	_resRc+1,w
  9908  0971  3BC5               	subwfb	pid_pwm1_idrv_run@t32+1,f
  9909  0972  0862               	movf	_resRc+2,w
  9910  0973  3BC6               	subwfb	pid_pwm1_idrv_run@t32+2,f
  9911  0974  0863               	movf	_resRc+3,w
  9912  0975  3BC7               	subwfb	pid_pwm1_idrv_run@t32+3,f
  9913                           
  9914                           ;sample.c: 279: t32=2000-t32;
  9915  0976  30D0               	movlw	208
  9916  0977  00B2               	movwf	??_pid_pwm1_idrv_run
  9917  0978  3007               	movlw	7
  9918  0979  00B3               	movwf	??_pid_pwm1_idrv_run+1
  9919  097A  01B4               	clrf	??_pid_pwm1_idrv_run+2
  9920  097B  01B5               	clrf	??_pid_pwm1_idrv_run+3
  9921  097C  0844               	movf	pid_pwm1_idrv_run@t32,w
  9922  097D  02B2               	subwf	??_pid_pwm1_idrv_run,f
  9923  097E  0845               	movf	pid_pwm1_idrv_run@t32+1,w
  9924  097F  3BB3               	subwfb	??_pid_pwm1_idrv_run+1,f
  9925  0980  0846               	movf	pid_pwm1_idrv_run@t32+2,w
  9926  0981  3BB4               	subwfb	??_pid_pwm1_idrv_run+2,f
  9927  0982  0847               	movf	pid_pwm1_idrv_run@t32+3,w
  9928  0983  3BB5               	subwfb	??_pid_pwm1_idrv_run+3,f
  9929  0984  0835               	movf	??_pid_pwm1_idrv_run+3,w
  9930  0985  2282  3189         	fcall	PL28	;call to abstracted procedure
  9931                           
  9932                           ;sample.c: 281: err[2]=err[1];
  9933  0987  30A4               	movlw	((low (_err| 0))& (0+255)+4)
  9934  0988  0086               	movwf	6
  9935  0989  0187               	clrf	7
  9936  098A  3F40               	moviw [0]fsr1
  9937  098B  0021               	movlb	1	; select bank1
  9938  098C  00A8               	movwf	(_err^(0+128)+8)
  9939  098D  3F41               	moviw [1]fsr1
  9940  098E  00A9               	movwf	((_err+1)^(0+128)+8)
  9941  098F  3F42               	moviw [2]fsr1
  9942  0990  00AA               	movwf	((_err+2)^(0+128)+8)
  9943  0991  3F43               	moviw [3]fsr1
  9944  0992  00AB               	movwf	((_err+3)^(0+128)+8)
  9945                           
  9946                           ;sample.c: 282: err[1]=err[0];
  9947  0993  0823               	movf	(_err+3)^(0+128),w
  9948  0994  00A7               	movwf	((_err+3)^(0+128)+4)
  9949  0995  0822               	movf	(_err+2)^(0+128),w
  9950  0996  00A6               	movwf	((_err+2)^(0+128)+4)
  9951  0997  0821               	movf	(_err+1)^(0+128),w
  9952  0998  00A5               	movwf	((_err+1)^(0+128)+4)
  9953  0999  0820               	movf	_err^(0+128),w
  9954  099A  00A4               	movwf	(_err^(0+128)+4)
  9955                           
  9956                           ;sample.c: 283: err[0]=t32;
  9957  099B  0020               	movlb	0	; select bank0
  9958  099C  0847               	movf	pid_pwm1_idrv_run@t32+3,w
  9959  099D  0021               	movlb	1	; select bank1
  9960  099E  00A3               	movwf	(_err+3)^(0+128)
  9961  099F  0020               	movlb	0	; select bank0
  9962  09A0  0846               	movf	pid_pwm1_idrv_run@t32+2,w
  9963  09A1  0021               	movlb	1	; select bank1
  9964  09A2  00A2               	movwf	(_err+2)^(0+128)
  9965  09A3  0020               	movlb	0	; select bank0
  9966  09A4  0845               	movf	pid_pwm1_idrv_run@t32+1,w
  9967  09A5  0021               	movlb	1	; select bank1
  9968  09A6  00A1               	movwf	(_err+1)^(0+128)
  9969  09A7  0020               	movlb	0	; select bank0
  9970  09A8  0844               	movf	pid_pwm1_idrv_run@t32,w
  9971  09A9  0021               	movlb	1	; select bank1
  9972  09AA  00A0               	movwf	_err^(0+128)
  9973                           
  9974                           ;sample.c: 286: ep=(err[0]-err[1])*PidKp;
  9975  09AB  0824               	movf	(_err^(0+128)+4),w
  9976  09AC  0220               	subwf	_err^(0+128),w
  9977  09AD  0020               	movlb	0	; select bank0
  9978  09AE  00B2               	movwf	??_pid_pwm1_idrv_run
  9979  09AF  0021               	movlb	1	; select bank1
  9980  09B0  0825               	movf	((_err+1)^(0+128)+4),w
  9981  09B1  3B21               	subwfb	(_err+1)^(0+128),w
  9982  09B2  0020               	movlb	0	; select bank0
  9983  09B3  00B3               	movwf	??_pid_pwm1_idrv_run+1
  9984  09B4  0021               	movlb	1	; select bank1
  9985  09B5  0826               	movf	((_err+2)^(0+128)+4),w
  9986  09B6  3B22               	subwfb	(_err+2)^(0+128),w
  9987  09B7  0020               	movlb	0	; select bank0
  9988  09B8  00B4               	movwf	??_pid_pwm1_idrv_run+2
  9989  09B9  0021               	movlb	1	; select bank1
  9990  09BA  0827               	movf	((_err+3)^(0+128)+4),w
  9991  09BB  3B23               	subwfb	(_err+3)^(0+128),w
  9992  09BC  0020               	movlb	0	; select bank0
  9993  09BD  00B5               	movwf	??_pid_pwm1_idrv_run+3
  9994  09BE  00F4               	movwf	___lmul@multiplier+3
  9995  09BF  0834               	movf	??_pid_pwm1_idrv_run+2,w
  9996  09C0  00F3               	movwf	___lmul@multiplier+2
  9997  09C1  0833               	movf	??_pid_pwm1_idrv_run+1,w
  9998  09C2  00F2               	movwf	___lmul@multiplier+1
  9999  09C3  0832               	movf	??_pid_pwm1_idrv_run,w
 10000  09C4  00F1               	movwf	___lmul@multiplier
 10001  09C5  0021               	movlb	1	; select bank1
 10002  09C6  2279               	fcall	PL24	;call to abstracted procedure
 10003  09C7  3185  25C8  3189   	fcall	___lmul
 10004  09CA  0874               	movf	?___lmul+3,w
 10005  09CB  00B9               	movwf	pid_pwm1_idrv_run@ep+3
 10006  09CC  0873               	movf	?___lmul+2,w
 10007  09CD  00B8               	movwf	pid_pwm1_idrv_run@ep+2
 10008  09CE  0872               	movf	?___lmul+1,w
 10009  09CF  00B7               	movwf	pid_pwm1_idrv_run@ep+1
 10010  09D0  0871               	movf	?___lmul,w
 10011  09D1  00B6               	movwf	pid_pwm1_idrv_run@ep
 10012                           
 10013                           ;sample.c: 287: ei=PidKp*err[0]/PidTi;
 10014  09D2  0021               	movlb	1	; select bank1
 10015  09D3  0841               	movf	(_PidTi+3)^(0+128),w
 10016  09D4  0020               	movlb	0	; select bank0
 10017  09D5  00A7               	movwf	___aldiv@divisor+3
 10018  09D6  0021               	movlb	1	; select bank1
 10019  09D7  0840               	movf	(_PidTi+2)^(0+128),w
 10020  09D8  0020               	movlb	0	; select bank0
 10021  09D9  00A6               	movwf	___aldiv@divisor+2
 10022  09DA  0021               	movlb	1	; select bank1
 10023  09DB  083F               	movf	(_PidTi+1)^(0+128),w
 10024  09DC  0020               	movlb	0	; select bank0
 10025  09DD  00A5               	movwf	___aldiv@divisor+1
 10026  09DE  0021               	movlb	1	; select bank1
 10027  09DF  083E               	movf	_PidTi^(0+128),w
 10028  09E0  0020               	movlb	0	; select bank0
 10029  09E1  00A4               	movwf	___aldiv@divisor
 10030  09E2  0021               	movlb	1	; select bank1
 10031  09E3  0823               	movf	(_err+3)^(0+128),w
 10032  09E4  00F4               	movwf	___lmul@multiplier+3
 10033  09E5  0822               	movf	(_err+2)^(0+128),w
 10034  09E6  00F3               	movwf	___lmul@multiplier+2
 10035  09E7  0821               	movf	(_err+1)^(0+128),w
 10036  09E8  00F2               	movwf	___lmul@multiplier+1
 10037  09E9  0820               	movf	_err^(0+128),w
 10038  09EA  00F1               	movwf	___lmul@multiplier
 10039  09EB  2279               	fcall	PL24	;call to abstracted procedure
 10040  09EC  3185  25C8  3189   	fcall	___lmul
 10041  09EF  3187  2755  3189   	fcall	PL14	;call to abstracted procedure
 10042  09F2  3185  255C  3189   	fcall	___aldiv
 10043  09F5  0827               	movf	?___aldiv+3,w
 10044  09F6  00BD               	movwf	pid_pwm1_idrv_run@ei+3
 10045  09F7  0826               	movf	?___aldiv+2,w
 10046  09F8  00BC               	movwf	pid_pwm1_idrv_run@ei+2
 10047  09F9  0825               	movf	?___aldiv+1,w
 10048  09FA  00BB               	movwf	pid_pwm1_idrv_run@ei+1
 10049  09FB  0824               	movf	?___aldiv,w
 10050  09FC  00BA               	movwf	pid_pwm1_idrv_run@ei
 10051                           
 10052                           ;sample.c: 290: t32=ep+ei+ed;
 10053  09FD  0836               	movf	pid_pwm1_idrv_run@ep,w
 10054  09FE  073A               	addwf	pid_pwm1_idrv_run@ei,w
 10055  09FF  00B2               	movwf	??_pid_pwm1_idrv_run
 10056  0A00  0837               	movf	pid_pwm1_idrv_run@ep+1,w
 10057  0A01  3D3B               	addwfc	pid_pwm1_idrv_run@ei+1,w
 10058  0A02  00B3               	movwf	??_pid_pwm1_idrv_run+1
 10059  0A03  0838               	movf	pid_pwm1_idrv_run@ep+2,w
 10060  0A04  3D3C               	addwfc	pid_pwm1_idrv_run@ei+2,w
 10061  0A05  00B4               	movwf	??_pid_pwm1_idrv_run+2
 10062  0A06  0839               	movf	pid_pwm1_idrv_run@ep+3,w
 10063  0A07  3D3D               	addwfc	pid_pwm1_idrv_run@ei+3,w
 10064  0A08  00B5               	movwf	??_pid_pwm1_idrv_run+3
 10065  0A09  2282               	fcall	PL28	;call to abstracted procedure
 10066                           
 10067                           ;sample.c: 291: t32/=10000;
 10068  0A0A  3027               	movlw	39
 10069  0A0B  01A7               	clrf	___aldiv@divisor+3
 10070  0A0C  01A6               	clrf	___aldiv@divisor+2
 10071  0A0D  00A5               	movwf	___aldiv@divisor+1
 10072  0A0E  3010               	movlw	16
 10073  0A0F  00A4               	movwf	___aldiv@divisor
 10074  0A10  0847               	movf	pid_pwm1_idrv_run@t32+3,w
 10075  0A11  00AB               	movwf	___aldiv@dividend+3
 10076  0A12  0846               	movf	pid_pwm1_idrv_run@t32+2,w
 10077  0A13  00AA               	movwf	___aldiv@dividend+2
 10078  0A14  0845               	movf	pid_pwm1_idrv_run@t32+1,w
 10079  0A15  00A9               	movwf	___aldiv@dividend+1
 10080  0A16  0844               	movf	pid_pwm1_idrv_run@t32,w
 10081  0A17  00A8               	movwf	___aldiv@dividend
 10082  0A18  3185  255C  3189   	fcall	___aldiv
 10083  0A1B  0827               	movf	?___aldiv+3,w
 10084  0A1C  00C7               	movwf	pid_pwm1_idrv_run@t32+3
 10085  0A1D  0826               	movf	?___aldiv+2,w
 10086  0A1E  00C6               	movwf	pid_pwm1_idrv_run@t32+2
 10087  0A1F  0825               	movf	?___aldiv+1,w
 10088  0A20  00C5               	movwf	pid_pwm1_idrv_run@t32+1
 10089  0A21  0824               	movf	?___aldiv,w
 10090  0A22  00C4               	movwf	pid_pwm1_idrv_run@t32
 10091                           
 10092                           ;sample.c: 292: t32+=pidU;
 10093  0A23  0021               	movlb	1	; select bank1
 10094  0A24  0868               	movf	_pidU^(0+128),w
 10095  0A25  0020               	movlb	0	; select bank0
 10096  0A26  07C4               	addwf	pid_pwm1_idrv_run@t32,f
 10097  0A27  0021               	movlb	1	; select bank1
 10098  0A28  0869               	movf	(_pidU+1)^(0+128),w
 10099  0A29  0020               	movlb	0	; select bank0
 10100  0A2A  3DC5               	addwfc	pid_pwm1_idrv_run@t32+1,f
 10101  0A2B  0021               	movlb	1	; select bank1
 10102  0A2C  086A               	movf	(_pidU+2)^(0+128),w
 10103  0A2D  0020               	movlb	0	; select bank0
 10104  0A2E  3DC6               	addwfc	pid_pwm1_idrv_run@t32+2,f
 10105  0A2F  0021               	movlb	1	; select bank1
 10106  0A30  086B               	movf	(_pidU+3)^(0+128),w
 10107  0A31  0020               	movlb	0	; select bank0
 10108  0A32  3DC7               	addwfc	pid_pwm1_idrv_run@t32+3,f
 10109                           
 10110                           ;sample.c: 294: __nop();
 10111  0A33  0000               	nop
 10112                           
 10113                           ;sample.c: 295: if(t32>1200)t32=1200;
 10114  0A34  0020               	movlb	0	; select bank0
 10115  0A35  1BC7               	btfsc	pid_pwm1_idrv_run@t32+3,7
 10116  0A36  2A49               	goto	l4270
 10117  0A37  0847               	movf	pid_pwm1_idrv_run@t32+3,w
 10118  0A38  1D03               	btfss	3,2
 10119  0A39  2A43               	goto	l4268
 10120  0A3A  0846               	movf	pid_pwm1_idrv_run@t32+2,w
 10121  0A3B  1D03               	btfss	3,2
 10122  0A3C  2A43               	goto	l4268
 10123  0A3D  30B1               	movlw	177
 10124  0A3E  0244               	subwf	pid_pwm1_idrv_run@t32,w
 10125  0A3F  3004               	movlw	4
 10126  0A40  3B45               	subwfb	pid_pwm1_idrv_run@t32+1,w
 10127  0A41  1C03               	btfss	3,0
 10128  0A42  2A49               	goto	l4270
 10129  0A43                     l4268:	
 10130  0A43  3004               	movlw	4
 10131  0A44  01C7               	clrf	pid_pwm1_idrv_run@t32+3
 10132  0A45  01C6               	clrf	pid_pwm1_idrv_run@t32+2
 10133  0A46  00C5               	movwf	pid_pwm1_idrv_run@t32+1
 10134  0A47  30B0               	movlw	176
 10135  0A48  00C4               	movwf	pid_pwm1_idrv_run@t32
 10136  0A49                     l4270:	
 10137                           
 10138                           ;sample.c: 296: if(t32<5)t32=5;
 10139  0A49  1BC7               	btfsc	pid_pwm1_idrv_run@t32+3,7
 10140  0A4A  2A58               	goto	l4272
 10141  0A4B  0847               	movf	pid_pwm1_idrv_run@t32+3,w
 10142  0A4C  1D03               	btfss	3,2
 10143  0A4D  2A5D               	goto	l663
 10144  0A4E  0846               	movf	pid_pwm1_idrv_run@t32+2,w
 10145  0A4F  1D03               	btfss	3,2
 10146  0A50  2A5D               	goto	l663
 10147  0A51  0845               	movf	pid_pwm1_idrv_run@t32+1,w
 10148  0A52  1D03               	btfss	3,2
 10149  0A53  2A5D               	goto	l663
 10150  0A54  3005               	movlw	5
 10151  0A55  0244               	subwf	pid_pwm1_idrv_run@t32,w
 10152  0A56  1803               	btfsc	3,0
 10153  0A57  2A5D               	goto	l663
 10154  0A58                     l4272:	
 10155  0A58  3005               	movlw	5
 10156  0A59  00C4               	movwf	pid_pwm1_idrv_run@t32
 10157  0A5A  01C5               	clrf	pid_pwm1_idrv_run@t32+1
 10158  0A5B  01C6               	clrf	pid_pwm1_idrv_run@t32+2
 10159  0A5C  01C7               	clrf	pid_pwm1_idrv_run@t32+3
 10160  0A5D                     l663:	
 10161                           
 10162                           ;sample.c: 297: pidU=t32;
 10163  0A5D  0847               	movf	pid_pwm1_idrv_run@t32+3,w
 10164  0A5E  0021               	movlb	1	; select bank1
 10165  0A5F  00EB               	movwf	(_pidU+3)^(0+128)
 10166  0A60  0020               	movlb	0	; select bank0
 10167  0A61  0846               	movf	pid_pwm1_idrv_run@t32+2,w
 10168  0A62  0021               	movlb	1	; select bank1
 10169  0A63  00EA               	movwf	(_pidU+2)^(0+128)
 10170  0A64  0020               	movlb	0	; select bank0
 10171  0A65  0845               	movf	pid_pwm1_idrv_run@t32+1,w
 10172  0A66  0021               	movlb	1	; select bank1
 10173  0A67  00E9               	movwf	(_pidU+1)^(0+128)
 10174  0A68  0020               	movlb	0	; select bank0
 10175  0A69  0844               	movf	pid_pwm1_idrv_run@t32,w
 10176  0A6A  0021               	movlb	1	; select bank1
 10177  0A6B  00E8               	movwf	_pidU^(0+128)
 10178                           
 10179                           ;sample.c: 298: uint16_t t16;
 10180                           ;sample.c: 299: t16=(uint16_t)pidU;
 10181  0A6C  0869               	movf	(_pidU+1)^(0+128),w
 10182  0A6D  0020               	movlb	0	; select bank0
 10183  0A6E  00C3               	movwf	pid_pwm1_idrv_run@t16+1
 10184  0A6F  0021               	movlb	1	; select bank1
 10185  0A70  0868               	movf	_pidU^(0+128),w
 10186  0A71  0020               	movlb	0	; select bank0
 10187  0A72  00C2               	movwf	pid_pwm1_idrv_run@t16
 10188                           
 10189                           ;sample.c: 300: set_idrv_pwm1_duty(t16);
 10190  0A73  0843               	movf	pid_pwm1_idrv_run@t16+1,w
 10191  0A74  00F4               	movwf	set_idrv_pwm1_duty@duty+1
 10192  0A75  0842               	movf	pid_pwm1_idrv_run@t16,w
 10193  0A76  00F3               	movwf	set_idrv_pwm1_duty@duty
 10194  0A77  3186  2E2F         	ljmp	l3040
 10195  0A79                     __end_of_pid_pwm1_idrv_run:	
 10196  0A79                     PL24:	
 10197  0A79  0839               	movf	(_PidKp+3)^(0+128),w
 10198  0A7A  00F8               	movwf	___lmul@multiplicand+3
 10199  0A7B  0838               	movf	(_PidKp+2)^(0+128),w
 10200  0A7C  00F7               	movwf	___lmul@multiplicand+2
 10201  0A7D  0837               	movf	(_PidKp+1)^(0+128),w
 10202  0A7E  00F6               	movwf	___lmul@multiplicand+1
 10203  0A7F  0836               	movf	_PidKp^(0+128),w
 10204  0A80  00F5               	movwf	___lmul@multiplicand
 10205  0A81  0008               	return
 10206  0A82                     __end_ofPL24:	
 10207  0A82                     PL28:	
 10208  0A82  00C7               	movwf	pid_pwm1_idrv_run@t32+3
 10209  0A83  0834               	movf	??_pid_pwm1_idrv_run+2,w
 10210  0A84  00C6               	movwf	pid_pwm1_idrv_run@t32+2
 10211  0A85  0833               	movf	??_pid_pwm1_idrv_run+1,w
 10212  0A86  00C5               	movwf	pid_pwm1_idrv_run@t32+1
 10213  0A87  0832               	movf	??_pid_pwm1_idrv_run,w
 10214  0A88  00C4               	movwf	pid_pwm1_idrv_run@t32
 10215  0A89  0008               	return
 10216  0A8A                     __end_ofPL28:	
 10217                           
 10218                           	psect	swtext1
 10219  0800                     __pswtext1:	
 10220  0800                     S4512:	
 10221  0800  3183  2B9E         	ljmp	l4182
 10222  0802  3183  2B9E         	ljmp	l4182
 10223  0804  3183  2BA7         	ljmp	l4188
 10224  0806  3183  2BBC         	ljmp	l4194
 10225  0808  3183  2BE3         	ljmp	l4208
 10226  080A  3185  2D5B         	ljmp	l643
 10227                           
 10228                           	psect	text14
 10229  0D75                     __ptext14:	
 10230 ;; *************** function _modbus_response_process *****************
 10231 ;; Defined at:
 10232 ;;		line 181 in file "src/api/modbus.c"
 10233 ;; Parameters:    Size  Location     Type
 10234 ;;  rbuf            1    wreg     PTR unsigned char 
 10235 ;;		 -> modbusBuf(64), 
 10236 ;;  rlen            2   22[BANK0 ] unsigned int 
 10237 ;; Auto vars:     Size  Location     Type
 10238 ;;  rbuf            1   25[BANK0 ] PTR unsigned char 
 10239 ;;		 -> modbusBuf(64), 
 10240 ;;  pmdbs           1   24[BANK0 ] PTR struct .
 10241 ;;		 -> modbusBuf(64), 
 10242 ;;  resp            1    0        unsigned char 
 10243 ;; Return value:  Size  Location     Type
 10244 ;;                  1    wreg      void 
 10245 ;; Registers used:
 10246 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10247 ;; Tracked objects:
 10248 ;;		On entry : 1F/0
 10249 ;;		On exit  : 1F/0
 10250 ;;		Unchanged: 0/0
 10251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10252 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10253 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10255 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10256 ;;Total ram usage:        4 bytes
 10257 ;; Hardware stack levels used:    1
 10258 ;; Hardware stack levels required when called:    5
 10259 ;; This function calls:
 10260 ;;		_crc_verify
 10261 ;;		_modbus_response_command
 10262 ;;		_modbus_response_illgeal_function
 10263 ;;		_modbus_response_write_single_register
 10264 ;; This function is called by:
 10265 ;;		_main
 10266 ;; This function uses a non-reentrant model
 10267 ;;
 10268                           
 10269                           
 10270                           ;psect for function _modbus_response_process
 10271  0D75                     _modbus_response_process:	
 10272                           
 10273                           ;incstack = 0
 10274                           ; Regs used in _modbus_response_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10275                           ;modbus_response_process@rbuf stored from wreg
 10276  0D75  00B9               	movwf	modbus_response_process@rbuf
 10277                           
 10278                           ;modbus.c: 183: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)rbuf;
 10279  0D76  00B8               	movwf	modbus_response_process@pmdbs
 10280                           
 10281                           ;modbus.c: 186: if((pmdbs->addr!=sysData.id) && (pmdbs->addr!=0x00))return;
 10282  0D77  27D1  318D         	fcall	PL26	;call to abstracted procedure
 10283  0D79  0838               	movf	modbus_response_process@pmdbs,w
 10284  0D7A  27D7  318D         	fcall	PL36	;call to abstracted procedure
 10285  0D7C  1903               	skipnz
 10286  0D7D  2D83               	goto	l4390
 10287  0D7E  0838               	movf	modbus_response_process@pmdbs,w
 10288  0D7F  27F6  318D         	fcall	PL58	;call to abstracted procedure
 10289  0D81  1D03               	btfss	3,2
 10290  0D82  0008               	return
 10291  0D83                     l4390:	
 10292                           
 10293                           ;modbus.c: 187: if(!(crc_verify(rbuf,rlen)))return ;
 10294  0D83  0839               	movf	modbus_response_process@rbuf,w
 10295  0D84  00A0               	movwf	crc_verify@message
 10296  0D85  3001               	movlw	1
 10297  0D86  00A1               	movwf	crc_verify@message+1
 10298  0D87  0837               	movf	modbus_response_process@rlen+1,w
 10299  0D88  00A3               	movwf	crc_verify@n+1
 10300  0D89  0836               	movf	modbus_response_process@rlen,w
 10301  0D8A  00A2               	movwf	crc_verify@n
 10302  0D8B  318C  2462  318D   	fcall	_crc_verify
 10303  0D8E  3A00               	xorlw	0
 10304  0D8F  1903               	btfsc	3,2
 10305  0D90  0008               	return
 10306  0D91  0A38               	incf	modbus_response_process@pmdbs,w
 10307  0D92  27F6  318D         	fcall	PL58	;call to abstracted procedure
 10308                           
 10309                           ; Switch size 1, requested type "space"
 10310                           ; Number of cases is 2, Range of values is 3 to 6
 10311                           ; switch strategies available:
 10312                           ; Name         Instructions Cycles
 10313                           ; simple_byte            7     4 (average)
 10314                           ; direct_byte           17     9 (fixed)
 10315                           ; jumptable            263     9 (fixed)
 10316                           ;	Chosen strategy is simple_byte
 10317  0D94  3A03               	xorlw	3	; case 3
 10318  0D95  1903               	skipnz
 10319  0D96  2D9C               	goto	l4394
 10320  0D97  3A05               	xorlw	5	; case 6
 10321  0D98  1903               	skipnz
 10322  0D99  2D9E               	goto	l4396
 10323  0D9A  2DA0               	goto	l4398
 10324  0D9B  0008               	return
 10325  0D9C                     l4394:	
 10326                           
 10327                           ;modbus.c: 191: modbus_response_command(rbuf);
 10328  0D9C  0839               	movf	modbus_response_process@rbuf,w
 10329  0D9D  2DA4               	ljmp	_modbus_response_command
 10330  0D9E                     l4396:	
 10331                           ;modbus.c: 192: break;
 10332                           
 10333                           
 10334                           ;modbus.c: 194: modbus_response_write_single_register(rbuf);
 10335  0D9E  0839               	movf	modbus_response_process@rbuf,w
 10336  0D9F  2EC6               	ljmp	_modbus_response_write_single_register
 10337  0DA0                     l4398:	
 10338                           ;modbus.c: 195: break;
 10339                           
 10340                           
 10341                           ;modbus.c: 219: modbus_response_illgeal_function(rbuf,0x01);break;
 10342  0DA0  01AB               	clrf	modbus_response_illgeal_function@errcode
 10343  0DA1  0AAB               	incf	modbus_response_illgeal_function@errcode,f
 10344  0DA2  0839               	movf	modbus_response_process@rbuf,w
 10345  0DA3  2F75               	ljmp	_modbus_response_illgeal_function
 10346  0DA4                     __end_of_modbus_response_process:	
 10347  0DA4                     __ptext21:	
 10348 ;; *************** function _modbus_response_command *****************
 10349 ;; Defined at:
 10350 ;;		line 152 in file "src/api/modbus.c"
 10351 ;; Parameters:    Size  Location     Type
 10352 ;;  rbuf            1    wreg     PTR unsigned char 
 10353 ;;		 -> modbusBuf(64), 
 10354 ;; Auto vars:     Size  Location     Type
 10355 ;;  rbuf            1   18[BANK0 ] PTR unsigned char 
 10356 ;;		 -> modbusBuf(64), 
 10357 ;;  tempData        2   19[BANK0 ] unsigned int 
 10358 ;;  startAddr       2   13[BANK0 ] unsigned int 
 10359 ;;  tmpAddr         2   11[BANK0 ] unsigned int 
 10360 ;;  len             1   17[BANK0 ] unsigned char 
 10361 ;;  pmdbs           1   16[BANK0 ] PTR struct .
 10362 ;;		 -> modbusBuf(64), 
 10363 ;;  i               1   15[BANK0 ] unsigned char 
 10364 ;; Return value:  Size  Location     Type
 10365 ;;                  1    wreg      void 
 10366 ;; Registers used:
 10367 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10368 ;; Tracked objects:
 10369 ;;		On entry : 1F/0
 10370 ;;		On exit  : 1F/0
 10371 ;;		Unchanged: 0/0
 10372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10374 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10375 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10376 ;;      Totals:         1      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10377 ;;Total ram usage:       11 bytes
 10378 ;; Hardware stack levels used:    1
 10379 ;; Hardware stack levels required when called:    3
 10380 ;; This function calls:
 10381 ;;		_crc_append
 10382 ;;		_getRegisterVal
 10383 ;;		_uart_send_len
 10384 ;; This function is called by:
 10385 ;;		_modbus_response_process
 10386 ;; This function uses a non-reentrant model
 10387 ;;
 10388                           
 10389                           
 10390                           ;psect for function _modbus_response_command
 10391  0DA4                     _modbus_response_command:	
 10392                           
 10393                           ;incstack = 0
 10394                           ; Regs used in _modbus_response_command: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10395                           ;modbus_response_command@rbuf stored from wreg
 10396  0DA4  00B2               	movwf	modbus_response_command@rbuf
 10397                           
 10398                           ;modbus.c: 155: uint16_t tempData,tmpAddr;
 10399                           ;modbus.c: 156: uint8_t len=0;
 10400  0DA5  01B1               	clrf	modbus_response_command@len
 10401                           
 10402                           ;modbus.c: 157: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)rbuf;
 10403  0DA6  00B0               	movwf	modbus_response_command@pmdbs
 10404                           
 10405                           ;modbus.c: 158: if(pmdbs->addr!=sysData.id || pmdbs->addr==0)return;
 10406  0DA7  27D1  318D         	fcall	PL26	;call to abstracted procedure
 10407  0DA9  0830               	movf	modbus_response_command@pmdbs,w
 10408  0DAA  27D7  318D         	fcall	PL36	;call to abstracted procedure
 10409  0DAC  1D03               	skipz
 10410  0DAD  0008               	return
 10411  0DAE  0830               	movf	modbus_response_command@pmdbs,w
 10412  0DAF  0086               	movwf	6
 10413  0DB0  3001               	movlw	1	; select bank2/3
 10414  0DB1  0087               	movwf	7
 10415  0DB2  0801               	movf	1,w
 10416  0DB3  1903               	btfsc	3,2
 10417  0DB4  0008               	return
 10418                           
 10419                           ;modbus.c: 159: startAddr=pmdbs->addr_hi;
 10420  0DB5  0830               	movf	modbus_response_command@pmdbs,w
 10421  0DB6  3E02               	addlw	2
 10422  0DB7  0086               	movwf	6
 10423  0DB8  0801               	movf	1,w
 10424  0DB9  00AD               	movwf	modbus_response_command@startAddr
 10425  0DBA  01AE               	clrf	modbus_response_command@startAddr+1
 10426                           
 10427                           ;modbus.c: 160: startAddr<<=8;
 10428  0DBB  00AE               	movwf	modbus_response_command@startAddr+1
 10429  0DBC  01AD               	clrf	modbus_response_command@startAddr
 10430                           
 10431                           ;modbus.c: 161: startAddr |= pmdbs->addr_lo;
 10432  0DBD  0830               	movf	modbus_response_command@pmdbs,w
 10433  0DBE  3E03               	addlw	3
 10434  0DBF  0086               	movwf	6
 10435  0DC0  0801               	movf	1,w
 10436  0DC1  04AD               	iorwf	modbus_response_command@startAddr,f
 10437                           
 10438                           ;modbus.c: 162: tmpAddr=startAddr;
 10439  0DC2  082E               	movf	modbus_response_command@startAddr+1,w
 10440  0DC3  00AC               	movwf	modbus_response_command@tmpAddr+1
 10441  0DC4  082D               	movf	modbus_response_command@startAddr,w
 10442  0DC5  00AB               	movwf	modbus_response_command@tmpAddr
 10443                           
 10444                           ;modbus.c: 163: len = pmdbs->len_lo;
 10445  0DC6  0830               	movf	modbus_response_command@pmdbs,w
 10446  0DC7  0086               	movwf	6
 10447  0DC8  3F45               	moviw [5]fsr1
 10448  0DC9  00B1               	movwf	modbus_response_command@len
 10449  0DCA  3021               	movlw	33
 10450                           
 10451                           ;modbus.c: 164: len<<=1;
 10452  0DCB  35B1               	lslf	modbus_response_command@len,f
 10453                           
 10454                           ;modbus.c: 165: if(len>32)len=32;
 10455  0DCC  0231               	subwf	modbus_response_command@len,w
 10456  0DCD  1C03               	skipc
 10457  0DCE  2DD1               	goto	l4060
 10458  0DCF  3020               	movlw	32
 10459  0DD0  00B1               	movwf	modbus_response_command@len
 10460  0DD1                     l4060:	
 10461                           
 10462                           ;modbus.c: 166: for(i=0;i<len;i=i+2,tmpAddr++){
 10463  0DD1  01AF               	clrf	modbus_response_command@i
 10464  0DD2                     l4072:	
 10465  0DD2  0831               	movf	modbus_response_command@len,w
 10466  0DD3  022F               	subwf	modbus_response_command@i,w
 10467  0DD4  1803               	btfsc	3,0
 10468  0DD5  2DF5               	goto	l4074
 10469                           
 10470                           ;modbus.c: 167: getRegisterVal(tmpAddr,&tempData);
 10471  0DD6  082C               	movf	modbus_response_command@tmpAddr+1,w
 10472  0DD7  00F2               	movwf	getRegisterVal@addr+1
 10473  0DD8  082B               	movf	modbus_response_command@tmpAddr,w
 10474  0DD9  00F1               	movwf	getRegisterVal@addr
 10475  0DDA  3033               	movlw	(low (modbus_response_command@tempData| 0))& (0+255)
 10476  0DDB  00F3               	movwf	getRegisterVal@tempData
 10477  0DDC  2617  318D         	fcall	_getRegisterVal
 10478                           
 10479                           ;modbus.c: 168: rbuf[i+3] = tempData >> 8;
 10480  0DDE  0020               	movlb	0	; select bank0
 10481  0DDF  082F               	movf	modbus_response_command@i,w
 10482  0DE0  0732               	addwf	modbus_response_command@rbuf,w
 10483  0DE1  00FB               	movwf	??_modbus_response_command
 10484  0DE2  3E03               	addlw	3
 10485  0DE3  0086               	movwf	6
 10486  0DE4  3001               	movlw	1	; select bank2/3
 10487  0DE5  0087               	movwf	7
 10488  0DE6  0834               	movf	modbus_response_command@tempData+1,w
 10489  0DE7  0081               	movwf	1
 10490                           
 10491                           ;modbus.c: 169: rbuf[i+4] = tempData & 0xff;
 10492  0DE8  082F               	movf	modbus_response_command@i,w
 10493  0DE9  0732               	addwf	modbus_response_command@rbuf,w
 10494  0DEA  00FB               	movwf	??_modbus_response_command
 10495  0DEB  3E04               	addlw	4
 10496  0DEC  0086               	movwf	6
 10497  0DED  0833               	movf	modbus_response_command@tempData,w
 10498  0DEE  0081               	movwf	1
 10499  0DEF  0AAF               	incf	modbus_response_command@i,f
 10500  0DF0  0AAF               	incf	modbus_response_command@i,f
 10501  0DF1  0AAB               	incf	modbus_response_command@tmpAddr,f
 10502  0DF2  1903               	skipnz
 10503  0DF3  0AAC               	incf	modbus_response_command@tmpAddr+1,f
 10504  0DF4  2DD2               	goto	l4072
 10505  0DF5                     l4074:	
 10506                           
 10507                           ;modbus.c: 171: }
 10508                           ;modbus.c: 172: rbuf[0] = sysData.id;
 10509  0DF5  0832               	movf	modbus_response_command@rbuf,w
 10510  0DF6  0086               	movwf	6
 10511  0DF7  3001               	movlw	1	; select bank2/3
 10512  0DF8  0087               	movwf	7
 10513  0DF9  27C9               	fcall	PL20	;call to abstracted procedure
 10514                           
 10515                           ;modbus.c: 173: rbuf[1] = 3;
 10516  0DFA  0A32               	incf	modbus_response_command@rbuf,w
 10517  0DFB  0086               	movwf	6
 10518  0DFC  3001               	movlw	1	; select bank2/3
 10519  0DFD  0087               	movwf	7
 10520  0DFE  3003               	movlw	3
 10521  0DFF  0081               	movwf	1
 10522                           
 10523                           ;modbus.c: 174: rbuf[2] = len;
 10524  0E00  0832               	movf	modbus_response_command@rbuf,w
 10525  0E01  3E02               	addlw	2
 10526  0E02  0086               	movwf	6
 10527  0E03  0831               	movf	modbus_response_command@len,w
 10528  0E04  0081               	movwf	1
 10529                           
 10530                           ;modbus.c: 175: len += 3;
 10531  0E05  3003               	movlw	3
 10532  0E06  07B1               	addwf	modbus_response_command@len,f
 10533                           
 10534                           ;modbus.c: 176: crc_append(rbuf,len);
 10535  0E07  0832               	movf	modbus_response_command@rbuf,w
 10536  0E08  00A0               	movwf	crc_append@message
 10537  0E09  3001               	movlw	1
 10538  0E0A  00A1               	movwf	crc_append@message+1
 10539  0E0B  0831               	movf	modbus_response_command@len,w
 10540  0E0C  00A2               	movwf	crc_append@n
 10541  0E0D  01A3               	clrf	crc_append@n+1
 10542  0E0E  3186  26DC  318D   	fcall	_crc_append
 10543                           
 10544                           ;modbus.c: 177: len += 2;
 10545  0E11  0AB1               	incf	modbus_response_command@len,f
 10546  0E12  0AB1               	incf	modbus_response_command@len,f
 10547                           
 10548                           ;modbus.c: 178: uart_send_len(rbuf,len);
 10549  0E13  0831               	movf	modbus_response_command@len,w
 10550  0E14  00F1               	movwf	uart_send_len@len
 10551  0E15  0832               	movf	modbus_response_command@rbuf,w
 10552  0E16  2F57               	ljmp	_uart_send_len
 10553  0E17                     __end_of_modbus_response_command:	
 10554  0E17                     __ptext23:	
 10555 ;; *************** function _getRegisterVal *****************
 10556 ;; Defined at:
 10557 ;;		line 79 in file "src/api/modbus.c"
 10558 ;; Parameters:    Size  Location     Type
 10559 ;;  addr            2    1[COMMON] unsigned int 
 10560 ;;  tempData        1    3[COMMON] PTR unsigned int 
 10561 ;;		 -> modbus_response_command@tempData(2), 
 10562 ;; Auto vars:     Size  Location     Type
 10563 ;;  t16             2    0        unsigned int 
 10564 ;;  tempAddr        1   10[COMMON] unsigned char 
 10565 ;; Return value:  Size  Location     Type
 10566 ;;                  2    1[COMMON] unsigned int 
 10567 ;; Registers used:
 10568 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 10569 ;; Tracked objects:
 10570 ;;		On entry : 1F/0
 10571 ;;		On exit  : 1E/0
 10572 ;;		Unchanged: 0/0
 10573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10574 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10575 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10576 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10577 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10578 ;;Total ram usage:       10 bytes
 10579 ;; Hardware stack levels used:    1
 10580 ;; Hardware stack levels required when called:    1
 10581 ;; This function calls:
 10582 ;;		Nothing
 10583 ;; This function is called by:
 10584 ;;		_modbus_response_command
 10585 ;; This function uses a non-reentrant model
 10586 ;;
 10587                           
 10588                           
 10589                           ;psect for function _getRegisterVal
 10590  0E17                     _getRegisterVal:	
 10591                           
 10592                           ;modbus.c: 82: uint8_t tempAddr;
 10593                           ;modbus.c: 84: tempAddr = addr & 0xff;
 10594                           
 10595                           ;incstack = 0
 10596                           ; Regs used in _getRegisterVal: [wreg-fsr1h+status,2+status,0]
 10597  0E17  0871               	movf	getRegisterVal@addr,w
 10598  0E18  00FA               	movwf	getRegisterVal@tempAddr
 10599                           
 10600                           ;modbus.c: 85: switch(tempAddr){
 10601  0E19  2EA5               	goto	l2890
 10602  0E1A                     l2856:	
 10603  0E1A  0873               	movf	getRegisterVal@tempData,w
 10604  0E1B  0086               	movwf	6
 10605  0E1C  3055               	movlw	85
 10606  0E1D  0187               	clrf	7
 10607  0E1E  3FC0               	movwi [0]fsr1
 10608  0E1F  3FC1               	movwi [1]fsr1
 10609  0E20  2EB2               	goto	l2892
 10610  0E21                     l2858:	
 10611  0E21  27D1  318D         	fcall	PL26	;call to abstracted procedure
 10612  0E23  0801               	movf	1,w
 10613  0E24  00F4               	movwf	??_getRegisterVal
 10614  0E25  01F5               	clrf	??_getRegisterVal+1
 10615  0E26  0873               	movf	getRegisterVal@tempData,w
 10616  0E27  0086               	movwf	6
 10617  0E28  0187               	clrf	7
 10618  0E29  0874               	movf	??_getRegisterVal,w
 10619  0E2A  3FC0               	movwi [0]fsr1
 10620  0E2B  0875               	movf	??_getRegisterVal+1,w
 10621  0E2C  3FC1               	movwi [1]fsr1
 10622  0E2D  2EB2               	goto	l2892
 10623  0E2E                     l2860:	
 10624  0E2E  3084               	movlw	132
 10625  0E2F  0084               	movwf	4
 10626  0E30  3023               	movlw	35
 10627  0E31  0085               	movwf	5
 10628  0E32  3101               	addfsr 0,1
 10629  0E33  0800               	movf	0,w
 10630  0E34  00F4               	movwf	??_getRegisterVal
 10631  0E35  3084               	movlw	132
 10632  0E36  0084               	movwf	4
 10633  0E37  3023               	movlw	35
 10634  0E38  0085               	movwf	5
 10635  0E39  0873               	movf	getRegisterVal@tempData,w
 10636  0E3A  0086               	movwf	6
 10637  0E3B  0187               	clrf	7
 10638  0E3C  0800               	movf	0,w
 10639  0E3D  3FC0               	movwi [0]fsr1
 10640  0E3E  0874               	movf	??_getRegisterVal,w
 10641  0E3F  3FC1               	movwi [1]fsr1
 10642  0E40  2EB2               	goto	l2892
 10643  0E41                     l2862:	
 10644  0E41  27EA  318D         	fcall	PL52	;call to abstracted procedure
 10645  0E43  27B3  318D         	fcall	PL12	;call to abstracted procedure
 10646  0E45  2EB2               	goto	l2892
 10647  0E46                     l2864:	
 10648  0E46  3084               	movlw	132
 10649  0E47  0086               	movwf	6
 10650  0E48  3023               	movlw	35
 10651  0E49  0087               	movwf	7
 10652  0E4A  3146               	addfsr 1,6
 10653  0E4B  27B3  318D         	fcall	PL12	;call to abstracted procedure
 10654  0E4D  2EB2               	goto	l2892
 10655  0E4E                     l2866:	
 10656  0E4E  3084               	movlw	132
 10657  0E4F  0086               	movwf	6
 10658  0E50  3023               	movlw	35
 10659  0E51  0087               	movwf	7
 10660  0E52  3148               	addfsr 1,8
 10661  0E53  27B3  318D         	fcall	PL12	;call to abstracted procedure
 10662  0E55  2EB2               	goto	l2892
 10663  0E56                     l2868:	
 10664  0E56  0873               	movf	getRegisterVal@tempData,w
 10665  0E57  0086               	movwf	6
 10666  0E58  0187               	clrf	7
 10667  0E59  27FB  318D         	fcall	PL60	;call to abstracted procedure
 10668  0E5B  2EB2               	goto	l2892
 10669  0E5C                     l2870:	
 10670  0E5C  0873               	movf	getRegisterVal@tempData,w
 10671  0E5D  0086               	movwf	6
 10672  0E5E  0187               	clrf	7
 10673  0E5F  0850               	movf	_rtAdcValueRsHi,w
 10674  0E60  3FC0               	movwi [0]fsr1
 10675  0E61  0851               	movf	_rtAdcValueRsHi+1,w
 10676  0E62  3FC1               	movwi [1]fsr1
 10677  0E63  2EB2               	goto	l2892
 10678  0E64                     l2872:	
 10679  0E64  0873               	movf	getRegisterVal@tempData,w
 10680  0E65  0086               	movwf	6
 10681  0E66  0187               	clrf	7
 10682  0E67  084E               	movf	_rtAdcValueRcLo,w
 10683  0E68  3FC0               	movwi [0]fsr1
 10684  0E69  084F               	movf	_rtAdcValueRcLo+1,w
 10685  0E6A  3FC1               	movwi [1]fsr1
 10686  0E6B  2EB2               	goto	l2892
 10687  0E6C                     l2874:	
 10688  0E6C  0873               	movf	getRegisterVal@tempData,w
 10689  0E6D  0086               	movwf	6
 10690  0E6E  0187               	clrf	7
 10691  0E6F  084C               	movf	_rtAdcValueRcHi,w
 10692  0E70  3FC0               	movwi [0]fsr1
 10693  0E71  084D               	movf	_rtAdcValueRcHi+1,w
 10694  0E72  3FC1               	movwi [1]fsr1
 10695  0E73  2EB2               	goto	l2892
 10696  0E74                     l2876:	
 10697  0E74  0873               	movf	getRegisterVal@tempData,w
 10698  0E75  0086               	movwf	6
 10699  0E76  0187               	clrf	7
 10700  0E77  0860               	movf	_resRc,w
 10701  0E78  3FC0               	movwi [0]fsr1
 10702  0E79  0861               	movf	_resRc+1,w
 10703  0E7A  3FC1               	movwi [1]fsr1
 10704  0E7B  2EB2               	goto	l2892
 10705  0E7C                     l2878:	
 10706  0E7C  0873               	movf	getRegisterVal@tempData,w
 10707  0E7D  0086               	movwf	6
 10708  0E7E  0187               	clrf	7
 10709  0E7F  0021               	movlb	1	; select bank1
 10710  0E80  086C               	movf	_resRs^(0+128),w
 10711  0E81  3FC0               	movwi [0]fsr1
 10712  0E82  086D               	movf	(_resRs+1)^(0+128),w
 10713  0E83  3FC1               	movwi [1]fsr1
 10714  0E84  2EB2               	goto	l2892
 10715  0E85                     l2880:	
 10716  0E85  0873               	movf	getRegisterVal@tempData,w
 10717  0E86  0086               	movwf	6
 10718  0E87  0187               	clrf	7
 10719  0E88  0854               	movf	_rtAdcValueVoFb,w
 10720  0E89  3FC0               	movwi [0]fsr1
 10721  0E8A  0855               	movf	_rtAdcValueVoFb+1,w
 10722  0E8B  3FC1               	movwi [1]fsr1
 10723  0E8C  2EB2               	goto	l2892
 10724  0E8D                     l2882:	
 10725  0E8D  0873               	movf	getRegisterVal@tempData,w
 10726  0E8E  0086               	movwf	6
 10727  0E8F  0187               	clrf	7
 10728  0E90  0858               	movf	_voExpectMv,w
 10729  0E91  3FC0               	movwi [0]fsr1
 10730  0E92  0859               	movf	_voExpectMv+1,w
 10731  0E93  3FC1               	movwi [1]fsr1
 10732  0E94  2EB2               	goto	l2892
 10733  0E95                     l2884:	
 10734  0E95  0873               	movf	getRegisterVal@tempData,w
 10735  0E96  0086               	movwf	6
 10736  0E97  0187               	clrf	7
 10737  0E98  0856               	movf	_voExpectAdcValue,w
 10738  0E99  3FC0               	movwi [0]fsr1
 10739  0E9A  0857               	movf	_voExpectAdcValue+1,w
 10740  0E9B  3FC1               	movwi [1]fsr1
 10741  0E9C  2EB2               	goto	l2892
 10742  0E9D                     l2886:	
 10743  0E9D  0873               	movf	getRegisterVal@tempData,w
 10744  0E9E  0086               	movwf	6
 10745  0E9F  30AA               	movlw	170
 10746  0EA0  0187               	clrf	7
 10747  0EA1  3FC0               	movwi [0]fsr1
 10748  0EA2  3055               	movlw	85
 10749  0EA3  3FC1               	movwi [1]fsr1
 10750  0EA4  2EB2               	goto	l2892
 10751  0EA5                     l2890:	
 10752  0EA5  087A               	movf	getRegisterVal@tempAddr,w
 10753                           
 10754                           ; Switch size 1, requested type "space"
 10755                           ; Number of cases is 15, Range of values is 1 to 15
 10756                           ; switch strategies available:
 10757                           ; Name         Instructions Cycles
 10758                           ; direct_byte           39     9 (fixed)
 10759                           ; simple_byte           46    24 (average)
 10760                           ; jumptable            263     9 (fixed)
 10761                           ;	Chosen strategy is direct_byte
 10762  0EA6  3EFF               	addlw	-1
 10763  0EA7  1C03               	skipc
 10764  0EA8  2E9D               	goto	l2886
 10765  0EA9  0084               	movwf	4
 10766  0EAA  300F               	movlw	15
 10767  0EAB  0204               	subwf	4,w
 10768  0EAC  1803               	skipnc
 10769  0EAD  2E9D               	goto	l2886
 10770  0EAE  3187               	movlp	high S4514
 10771  0EAF  3504               	lslf	4,w
 10772  0EB0  3ED2               	addlw	low S4514
 10773  0EB1  0082               	movwf	2
 10774  0EB2                     l2892:	
 10775                           
 10776                           ;modbus.c: 103: if(tempAddr>0x0f && tempAddr < 0x10+20*2){
 10777  0EB2  3010               	movlw	16
 10778  0EB3  027A               	subwf	getRegisterVal@tempAddr,w
 10779  0EB4  1C03               	skipc
 10780  0EB5  0008               	return
 10781  0EB6  3038               	movlw	56
 10782  0EB7  027A               	subwf	getRegisterVal@tempAddr,w
 10783  0EB8  1803               	skipnc
 10784  0EB9  0008               	return
 10785                           
 10786                           ;modbus.c: 104: tempAddr-=0x10;
 10787  0EBA  3010               	movlw	16
 10788  0EBB  02FA               	subwf	getRegisterVal@tempAddr,f
 10789                           
 10790                           ;modbus.c: 105: if(tempAddr & 0x01){
 10791  0EBC  1C7A               	btfss	getRegisterVal@tempAddr,0
 10792  0EBD  2EC2               	goto	l2902
 10793                           
 10794                           ;modbus.c: 106: *tempData=sysData.calibVoMV[tempAddr>>1];
 10795  0EBE  367A               	lsrf	getRegisterVal@tempAddr,w
 10796  0EBF  00F4               	movwf	??_getRegisterVal
 10797  0EC0  30B6               	movlw	182
 10798                           
 10799                           ;modbus.c: 107: }else{
 10800  0EC1  2F9F               	ljmp	PL6	;call to abstracted procedure
 10801  0EC2                     l2902:	
 10802                           
 10803                           ;modbus.c: 108: *tempData=sysData.calibRsAdc[tempAddr>>1];
 10804  0EC2  367A               	lsrf	getRegisterVal@tempAddr,w
 10805  0EC3  00F4               	movwf	??_getRegisterVal
 10806  0EC4  308E               	movlw	142
 10807  0EC5  2F9F               	ljmp	PL6	;call to abstracted procedure
 10808  0EC6                     __end_of_getRegisterVal:	
 10809  0EC6                     __ptext15:	
 10810 ;; *************** function _modbus_response_write_single_register *****************
 10811 ;; Defined at:
 10812 ;;		line 114 in file "src/api/modbus.c"
 10813 ;; Parameters:    Size  Location     Type
 10814 ;;  rbuf            1    wreg     PTR unsigned char 
 10815 ;;		 -> modbusBuf(64), 
 10816 ;; Auto vars:     Size  Location     Type
 10817 ;;  rbuf            1   21[BANK0 ] PTR unsigned char 
 10818 ;;		 -> modbusBuf(64), 
 10819 ;;  startAddr       2   19[BANK0 ] unsigned int 
 10820 ;;  t16             2   15[BANK0 ] unsigned int 
 10821 ;;  pmdbs           1   18[BANK0 ] PTR struct .
 10822 ;;		 -> modbusBuf(64), 
 10823 ;;  fiSave          1   17[BANK0 ] unsigned char 
 10824 ;; Return value:  Size  Location     Type
 10825 ;;                  1    wreg      void 
 10826 ;; Registers used:
 10827 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10828 ;; Tracked objects:
 10829 ;;		On entry : 1F/0
 10830 ;;		On exit  : 1F/0
 10831 ;;		Unchanged: 0/0
 10832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10834 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10835 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10836 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10837 ;;Total ram usage:       11 bytes
 10838 ;; Hardware stack levels used:    1
 10839 ;; Hardware stack levels required when called:    4
 10840 ;; This function calls:
 10841 ;;		_crc_append
 10842 ;;		_sys_data_save
 10843 ;;		_uart_send_len
 10844 ;; This function is called by:
 10845 ;;		_modbus_response_process
 10846 ;; This function uses a non-reentrant model
 10847 ;;
 10848                           
 10849                           
 10850                           ;psect for function _modbus_response_write_single_register
 10851  0EC6                     _modbus_response_write_single_register:	
 10852                           
 10853                           ;incstack = 0
 10854                           ; Regs used in _modbus_response_write_single_register: [wreg-fsr1h+status,2+status,0+pcl
      +                          ath+cstack]
 10855                           ;modbus_response_write_single_register@rbuf stored from wreg
 10856  0EC6  00B5               	movwf	modbus_response_write_single_register@rbuf
 10857                           
 10858                           ;modbus.c: 117: uint16_t t16;
 10859                           ;modbus.c: 118: uint8_t fiSave=0;
 10860  0EC7  01B1               	clrf	modbus_response_write_single_register@fiSave
 10861                           
 10862                           ;modbus.c: 119: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)rbuf;
 10863  0EC8  00B2               	movwf	modbus_response_write_single_register@pmdbs
 10864                           
 10865                           ;modbus.c: 120: if(pmdbs->addr!=sysData.id && pmdbs->addr!=0)return;
 10866  0EC9  27D1  318D         	fcall	PL26	;call to abstracted procedure
 10867  0ECB  0832               	movf	modbus_response_write_single_register@pmdbs,w
 10868  0ECC  27D7  318D         	fcall	PL36	;call to abstracted procedure
 10869  0ECE  1903               	skipnz
 10870  0ECF  2ED4               	goto	l3984
 10871  0ED0  27F0  318D         	fcall	PL54	;call to abstracted procedure
 10872  0ED2  1D03               	btfss	3,2
 10873  0ED3  0008               	return
 10874  0ED4                     l3984:	
 10875                           
 10876                           ;modbus.c: 121: startAddr=pmdbs->addr_hi;
 10877  0ED4  0832               	movf	modbus_response_write_single_register@pmdbs,w
 10878  0ED5  3E02               	addlw	2
 10879  0ED6  0086               	movwf	6
 10880  0ED7  3001               	movlw	1	; select bank2/3
 10881  0ED8  0087               	movwf	7
 10882  0ED9  0801               	movf	1,w
 10883  0EDA  00B3               	movwf	modbus_response_write_single_register@startAddr
 10884  0EDB  01B4               	clrf	modbus_response_write_single_register@startAddr+1
 10885                           
 10886                           ;modbus.c: 122: startAddr<<=8;
 10887  0EDC  00B4               	movwf	modbus_response_write_single_register@startAddr+1
 10888  0EDD  01B3               	clrf	modbus_response_write_single_register@startAddr
 10889                           
 10890                           ;modbus.c: 123: startAddr |= pmdbs->addr_lo;
 10891  0EDE  0832               	movf	modbus_response_write_single_register@pmdbs,w
 10892  0EDF  3E03               	addlw	3
 10893  0EE0  0086               	movwf	6
 10894  0EE1  0801               	movf	1,w
 10895  0EE2  04B3               	iorwf	modbus_response_write_single_register@startAddr,f
 10896  0EE3  3002               	movlw	2
 10897                           
 10898                           ;modbus.c: 124: startAddr = startAddr & 0xff;
 10899  0EE4  01B4               	clrf	modbus_response_write_single_register@startAddr+1
 10900                           
 10901                           ;modbus.c: 125: if(startAddr==0x02){
 10902  0EE5  0633               	xorwf	modbus_response_write_single_register@startAddr,w
 10903  0EE6  0434               	iorwf	modbus_response_write_single_register@startAddr+1,w
 10904  0EE7  1D03               	btfss	3,2
 10905  0EE8  2EF2               	goto	l3996
 10906                           
 10907                           ;modbus.c: 126: sysData.id=rbuf[5];
 10908  0EE9  0835               	movf	modbus_response_write_single_register@rbuf,w
 10909  0EEA  3E05               	addlw	5
 10910  0EEB  0086               	movwf	6
 10911  0EEC  0801               	movf	1,w
 10912  0EED  00AB               	movwf	??_modbus_response_write_single_register
 10913  0EEE  3086               	movlw	134
 10914  0EEF  27E4  318D         	fcall	PL50	;call to abstracted procedure
 10915                           
 10916                           ;modbus.c: 128: }else if(startAddr==0x03){
 10917  0EF1  2F3A               	goto	l3994
 10918  0EF2                     l3996:	
 10919  0EF2  3003               	movlw	3
 10920  0EF3  0633               	xorwf	modbus_response_write_single_register@startAddr,w
 10921  0EF4  0434               	iorwf	modbus_response_write_single_register@startAddr+1,w
 10922  0EF5  1D03               	btfss	3,2
 10923  0EF6  2F07               	goto	l4004
 10924                           
 10925                           ;modbus.c: 129: sysData.pidSetFlg1=rbuf[4];
 10926  0EF7  27DD  318D         	fcall	PL40	;call to abstracted procedure
 10927  0EF9  00AB               	movwf	??_modbus_response_write_single_register
 10928  0EFA  3085               	movlw	133
 10929  0EFB  27E4  318D         	fcall	PL50	;call to abstracted procedure
 10930                           
 10931                           ;modbus.c: 130: sysData.pidSetFlg0=rbuf[5];
 10932  0EFD  3084               	movlw	132
 10933  0EFE  0086               	movwf	6
 10934  0EFF  0835               	movf	modbus_response_write_single_register@rbuf,w
 10935  0F00  3E05               	addlw	5
 10936  0F01  0084               	movwf	4
 10937  0F02  3001               	movlw	1	; select bank2/3
 10938  0F03  0085               	movwf	5
 10939  0F04  0800               	movf	0,w
 10940  0F05  3FC0               	movwi [0]fsr1
 10941  0F06  2F3A               	goto	l3994
 10942  0F07                     l4004:	
 10943  0F07  3000               	movlw	0
 10944  0F08  0234               	subwf	modbus_response_write_single_register@startAddr+1,w
 10945  0F09  3010               	movlw	16
 10946  0F0A  1903               	skipnz
 10947  0F0B  0233               	subwf	modbus_response_write_single_register@startAddr,w
 10948  0F0C  1C03               	skipc
 10949  0F0D  0008               	return
 10950  0F0E  3000               	movlw	0
 10951  0F0F  0234               	subwf	modbus_response_write_single_register@startAddr+1,w
 10952  0F10  3038               	movlw	56
 10953  0F11  1903               	skipnz
 10954  0F12  0233               	subwf	modbus_response_write_single_register@startAddr,w
 10955  0F13  1803               	skipnc
 10956  0F14  0008               	return
 10957                           
 10958                           ;modbus.c: 133: startAddr-=0x10;
 10959  0F15  3010               	movlw	16
 10960  0F16  02B3               	subwf	modbus_response_write_single_register@startAddr,f
 10961  0F17  3000               	movlw	0
 10962  0F18  3BB4               	subwfb	modbus_response_write_single_register@startAddr+1,f
 10963                           
 10964                           ;modbus.c: 134: if(startAddr & 0x01){
 10965  0F19  1C33               	btfss	modbus_response_write_single_register@startAddr,0
 10966  0F1A  2F3C               	goto	l4024
 10967                           
 10968                           ;modbus.c: 135: t16=rbuf[4];
 10969  0F1B  27DD  318D         	fcall	PL40	;call to abstracted procedure
 10970  0F1D  00AF               	movwf	modbus_response_write_single_register@t16
 10971  0F1E  01B0               	clrf	modbus_response_write_single_register@t16+1
 10972                           
 10973                           ;modbus.c: 136: t16<<=8;
 10974  0F1F  00B0               	movwf	modbus_response_write_single_register@t16+1
 10975  0F20  01AF               	clrf	modbus_response_write_single_register@t16
 10976                           
 10977                           ;modbus.c: 137: t16 |= rbuf[5];
 10978  0F21  0835               	movf	modbus_response_write_single_register@rbuf,w
 10979  0F22  3E05               	addlw	5
 10980  0F23  0086               	movwf	6
 10981  0F24  0801               	movf	1,w
 10982  0F25  04AF               	iorwf	modbus_response_write_single_register@t16,f
 10983                           
 10984                           ;modbus.c: 138: sysData.calibVoMV[startAddr>>1]=t16;
 10985  0F26  0834               	movf	modbus_response_write_single_register@startAddr+1,w
 10986  0F27  00AC               	movwf	??_modbus_response_write_single_register+1
 10987  0F28  0833               	movf	modbus_response_write_single_register@startAddr,w
 10988  0F29  00AB               	movwf	??_modbus_response_write_single_register
 10989  0F2A  30B6               	movlw	182
 10990  0F2B  27BB  318D         	fcall	PL16	;call to abstracted procedure
 10991  0F2D  082F               	movf	modbus_response_write_single_register@t16,w
 10992  0F2E  3FC0               	movwi [0]fsr1
 10993  0F2F  0830               	movf	modbus_response_write_single_register@t16+1,w
 10994  0F30  3FC1               	movwi [1]fsr1
 10995                           
 10996                           ;modbus.c: 139: sysData.calibRsAdc[startAddr>>1]=rtAdcValueRsLo;
 10997  0F31  0834               	movf	modbus_response_write_single_register@startAddr+1,w
 10998  0F32  00AC               	movwf	??_modbus_response_write_single_register+1
 10999  0F33  0833               	movf	modbus_response_write_single_register@startAddr,w
 11000  0F34  00AB               	movwf	??_modbus_response_write_single_register
 11001  0F35  308E               	movlw	142
 11002  0F36  27BB  318D         	fcall	PL16	;call to abstracted procedure
 11003  0F38  27FB  318D         	fcall	PL60	;call to abstracted procedure
 11004  0F3A                     l3994:	
 11005                           
 11006                           ;modbus.c: 127: fiSave=1;
 11007  0F3A  01B1               	clrf	modbus_response_write_single_register@fiSave
 11008  0F3B  0AB1               	incf	modbus_response_write_single_register@fiSave,f
 11009  0F3C                     l4024:	
 11010                           
 11011                           ;modbus.c: 145: }
 11012                           ;modbus.c: 146: if(fiSave)sys_data_save();
 11013  0F3C  0831               	movf	modbus_response_write_single_register@fiSave,w
 11014  0F3D  1903               	btfsc	3,2
 11015  0F3E  2F42               	goto	l4028
 11016  0F3F  3186  26D1  318D   	fcall	_sys_data_save
 11017  0F42                     l4028:	
 11018                           
 11019                           ;modbus.c: 147: if(pmdbs->addr==0)return;
 11020  0F42  27F0  318D         	fcall	PL54	;call to abstracted procedure
 11021  0F44  1903               	btfsc	3,2
 11022  0F45  0008               	return
 11023                           
 11024                           ;modbus.c: 148: rbuf[0]=sysData.id;
 11025  0F46  0835               	movf	modbus_response_write_single_register@rbuf,w
 11026  0F47  0086               	movwf	6
 11027  0F48  27C9               	fcall	PL20	;call to abstracted procedure
 11028                           
 11029                           ;modbus.c: 149: crc_append(rbuf,6);
 11030  0F49  0835               	movf	modbus_response_write_single_register@rbuf,w
 11031  0F4A  00A0               	movwf	crc_append@message
 11032  0F4B  3001               	movlw	1
 11033  0F4C  00A1               	movwf	crc_append@message+1
 11034  0F4D  3006               	movlw	6
 11035  0F4E  00A2               	movwf	crc_append@n
 11036  0F4F  01A3               	clrf	crc_append@n+1
 11037  0F50  3186  26DC  318D   	fcall	_crc_append
 11038                           
 11039                           ;modbus.c: 150: uart_send_len(rbuf,8);
 11040  0F53  3008               	movlw	8
 11041  0F54  00F1               	movwf	uart_send_len@len
 11042  0F55  0835               	movf	modbus_response_write_single_register@rbuf,w
 11043  0F56  2F57               	ljmp	_uart_send_len
 11044  0F57                     __end_of_modbus_response_write_single_register:	
 11045  0F57                     __ptext22:	
 11046 ;; *************** function _uart_send_len *****************
 11047 ;; Defined at:
 11048 ;;		line 37 in file "src/api/my_uart.c"
 11049 ;; Parameters:    Size  Location     Type
 11050 ;;  buf             1    wreg     PTR unsigned char 
 11051 ;;		 -> modbusBuf(64), 
 11052 ;;  len             1    1[COMMON] unsigned char 
 11053 ;; Auto vars:     Size  Location     Type
 11054 ;;  buf             1    3[COMMON] PTR unsigned char 
 11055 ;;		 -> modbusBuf(64), 
 11056 ;;  i               1    4[COMMON] unsigned char 
 11057 ;; Return value:  Size  Location     Type
 11058 ;;                  1    wreg      void 
 11059 ;; Registers used:
 11060 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11061 ;; Tracked objects:
 11062 ;;		On entry : 1F/0
 11063 ;;		On exit  : 1F/0
 11064 ;;		Unchanged: 0/0
 11065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11066 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11067 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11068 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11069 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11070 ;;Total ram usage:        4 bytes
 11071 ;; Hardware stack levels used:    1
 11072 ;; Hardware stack levels required when called:    1
 11073 ;; This function calls:
 11074 ;;		Nothing
 11075 ;; This function is called by:
 11076 ;;		_modbus_response_illgeal_function
 11077 ;;		_modbus_response_write_single_register
 11078 ;;		_modbus_response_command
 11079 ;; This function uses a non-reentrant model
 11080 ;;
 11081                           
 11082                           
 11083                           ;psect for function _uart_send_len
 11084  0F57                     _uart_send_len:	
 11085                           
 11086                           ;incstack = 0
 11087                           ; Regs used in _uart_send_len: [wreg+fsr1l+fsr1h+status,2+status,0]
 11088                           ;uart_send_len@buf stored from wreg
 11089  0F57  00F3               	movwf	uart_send_len@buf
 11090                           
 11091                           ;my_uart.c: 39: uint8_t i;
 11092                           ;my_uart.c: 40: if(!TXSTAbits.TXEN)TXSTAbits.TXEN=1;
 11093  0F58  0023               	movlb	3	; select bank3
 11094  0F59  1E9E               	btfss	30,5	;volatile
 11095  0F5A  169E               	bsf	30,5	;volatile
 11096  0F5B                     l488:	
 11097  0F5B  0020               	movlb	0	; select bank0
 11098  0F5C  1E11               	btfss	17,4	;volatile
 11099  0F5D  2F5B               	goto	l488
 11100                           
 11101                           ;my_uart.c: 42: for(i=0;i<len;i++){
 11102  0F5E  01F4               	clrf	uart_send_len@i
 11103  0F5F                     l2836:	
 11104  0F5F  0871               	movf	uart_send_len@len,w
 11105  0F60  0274               	subwf	uart_send_len@i,w
 11106  0F61  1803               	btfsc	3,0
 11107  0F62  2F71               	goto	l497
 11108  0F63                     l493:	
 11109  0F63  0020               	movlb	0	; select bank0
 11110  0F64  1E11               	btfss	17,4	;volatile
 11111  0F65  2F63               	goto	l493
 11112                           
 11113                           ;my_uart.c: 44: TXREG = buf[i];
 11114  0F66  0874               	movf	uart_send_len@i,w
 11115  0F67  0773               	addwf	uart_send_len@buf,w
 11116  0F68  00F2               	movwf	??_uart_send_len
 11117  0F69  0086               	movwf	6
 11118  0F6A  3001               	movlw	1	; select bank2/3
 11119  0F6B  0087               	movwf	7
 11120  0F6C  0801               	movf	1,w
 11121  0F6D  0023               	movlb	3	; select bank3
 11122  0F6E  009A               	movwf	26	;volatile
 11123  0F6F  0AF4               	incf	uart_send_len@i,f
 11124  0F70  2F5F               	goto	l2836
 11125  0F71                     l497:	
 11126  0F71  0020               	movlb	0	; select bank0
 11127  0F72  1A11               	btfsc	17,4	;volatile
 11128  0F73  0008               	return
 11129  0F74  2F71               	goto	l497
 11130  0F75                     __end_of_uart_send_len:	
 11131  0F75                     __ptext20:	
 11132 ;; *************** function _modbus_response_illgeal_function *****************
 11133 ;; Defined at:
 11134 ;;		line 7 in file "src/api/modbus.c"
 11135 ;; Parameters:    Size  Location     Type
 11136 ;;  buf             1    wreg     PTR unsigned char 
 11137 ;;		 -> modbusBuf(64), 
 11138 ;;  errcode         1   11[BANK0 ] unsigned char 
 11139 ;; Auto vars:     Size  Location     Type
 11140 ;;  buf             1   12[BANK0 ] PTR unsigned char 
 11141 ;;		 -> modbusBuf(64), 
 11142 ;;  pmdbs           1   13[BANK0 ] PTR struct .
 11143 ;;		 -> modbusBuf(64), 
 11144 ;; Return value:  Size  Location     Type
 11145 ;;                  1    wreg      void 
 11146 ;; Registers used:
 11147 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11148 ;; Tracked objects:
 11149 ;;		On entry : 1F/0
 11150 ;;		On exit  : 1F/0
 11151 ;;		Unchanged: 0/0
 11152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11153 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11154 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11156 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11157 ;;Total ram usage:        3 bytes
 11158 ;; Hardware stack levels used:    1
 11159 ;; Hardware stack levels required when called:    3
 11160 ;; This function calls:
 11161 ;;		_crc_append
 11162 ;;		_uart_send_len
 11163 ;; This function is called by:
 11164 ;;		_modbus_response_process
 11165 ;; This function uses a non-reentrant model
 11166 ;;
 11167                           
 11168                           
 11169                           ;psect for function _modbus_response_illgeal_function
 11170  0F75                     _modbus_response_illgeal_function:	
 11171                           
 11172                           ;incstack = 0
 11173                           ; Regs used in _modbus_response_illgeal_function: [wreg-fsr1h+status,2+status,0+pclath+c
      +                          stack]
 11174                           ;modbus_response_illgeal_function@buf stored from wreg
 11175  0F75  00AC               	movwf	modbus_response_illgeal_function@buf
 11176                           
 11177                           ;modbus.c: 9: st_modbusErrRespStructDef* pmdbs=(st_modbusErrRespStructDef*)buf;
 11178  0F76  00AD               	movwf	modbus_response_illgeal_function@pmdbs
 11179                           
 11180                           ;modbus.c: 10: if(pmdbs->addr==0x00)return;
 11181  0F77  0086               	movwf	6
 11182  0F78  3001               	movlw	1	; select bank2/3
 11183  0F79  0087               	movwf	7
 11184  0F7A  0801               	movf	1,w
 11185  0F7B  1903               	btfsc	3,2
 11186  0F7C  0008               	return
 11187                           
 11188                           ;modbus.c: 11: pmdbs->addr=sysData.id;
 11189  0F7D  082D               	movf	modbus_response_illgeal_function@pmdbs,w
 11190  0F7E  0086               	movwf	6
 11191  0F7F  27C9  318D         	fcall	PL20	;call to abstracted procedure
 11192                           
 11193                           ;modbus.c: 12: if(errcode){
 11194  0F81  082B               	movf	modbus_response_illgeal_function@errcode,w
 11195  0F82  1903               	btfsc	3,2
 11196  0F83  2F8A               	goto	l799
 11197                           
 11198                           ;modbus.c: 13: pmdbs->func+=0x80;
 11199  0F84  0A2D               	incf	modbus_response_illgeal_function@pmdbs,w
 11200  0F85  0086               	movwf	6
 11201  0F86  3001               	movlw	1	; select bank2/3
 11202  0F87  0087               	movwf	7
 11203  0F88  3080               	movlw	128
 11204  0F89  0781               	addwf	1,f
 11205  0F8A                     l799:	
 11206                           
 11207                           ;modbus.c: 14: }
 11208                           ;modbus.c: 15: pmdbs->errcord=errcode;
 11209  0F8A  082D               	movf	modbus_response_illgeal_function@pmdbs,w
 11210  0F8B  3E02               	addlw	2
 11211  0F8C  0086               	movwf	6
 11212  0F8D  3001               	movlw	1	; select bank2/3
 11213  0F8E  0087               	movwf	7
 11214  0F8F  082B               	movf	modbus_response_illgeal_function@errcode,w
 11215  0F90  0081               	movwf	1
 11216                           
 11217                           ;modbus.c: 16: crc_append(buf,3);
 11218  0F91  082C               	movf	modbus_response_illgeal_function@buf,w
 11219  0F92  00A0               	movwf	crc_append@message
 11220  0F93  3001               	movlw	1
 11221  0F94  00A1               	movwf	crc_append@message+1
 11222  0F95  3003               	movlw	3
 11223  0F96  00A2               	movwf	crc_append@n
 11224  0F97  01A3               	clrf	crc_append@n+1
 11225  0F98  3186  26DC  318D   	fcall	_crc_append
 11226                           
 11227                           ;modbus.c: 17: uart_send_len(buf,5);
 11228  0F9B  3005               	movlw	5
 11229  0F9C  00F1               	movwf	uart_send_len@len
 11230  0F9D  082C               	movf	modbus_response_illgeal_function@buf,w
 11231  0F9E  2F57               	ljmp	_uart_send_len
 11232  0F9F                     __end_of_modbus_response_illgeal_function:	
 11233  0F9F                     PL6:	
 11234  0F9F  01F5               	clrf	??_getRegisterVal+1
 11235  0FA0  35F4               	lslf	??_getRegisterVal,f
 11236  0FA1  0DF5               	rlf	??_getRegisterVal+1,f
 11237  0FA2  00F6               	movwf	??_getRegisterVal+2
 11238  0FA3  3023               	movlw	35
 11239  0FA4  00F7               	movwf	??_getRegisterVal+3
 11240  0FA5  0874               	movf	??_getRegisterVal,w
 11241  0FA6  0776               	addwf	??_getRegisterVal+2,w
 11242  0FA7  0086               	movwf	6
 11243  0FA8  0875               	movf	??_getRegisterVal+1,w
 11244  0FA9  3D77               	addwfc	??_getRegisterVal+3,w
 11245  0FAA  0087               	movwf	7
 11246  0FAB  0873               	movf	getRegisterVal@tempData,w
 11247  0FAC  0084               	movwf	4
 11248  0FAD  0185               	clrf	5
 11249  0FAE  3F40               	moviw [0]fsr1
 11250  0FAF  3F80               	movwi [0]fsr0
 11251  0FB0  3F41               	moviw [1]fsr1
 11252  0FB1  3F81               	movwi [1]fsr0
 11253  0FB2  0008               	return
 11254  0FB3                     __end_ofPL6:	
 11255  0FB3                     PL12:	
 11256  0FB3  0873               	movf	getRegisterVal@tempData,w
 11257  0FB4  0084               	movwf	4
 11258  0FB5  0185               	clrf	5
 11259  0FB6  3F40               	moviw [0]fsr1
 11260  0FB7  3F80               	movwi [0]fsr0
 11261  0FB8  3F41               	moviw [1]fsr1
 11262  0FB9  3F81               	movwi [1]fsr0
 11263  0FBA  0008               	return
 11264  0FBB                     __end_ofPL12:	
 11265  0FBB                     PL16:	
 11266  0FBB  36AC               	lsrf	??_modbus_response_write_single_register+1,f
 11267  0FBC  0CAB               	rrf	??_modbus_response_write_single_register,f
 11268  0FBD  35AB               	lslf	??_modbus_response_write_single_register,f
 11269  0FBE  0DAC               	rlf	??_modbus_response_write_single_register+1,f
 11270  0FBF  00AD               	movwf	??_modbus_response_write_single_register+2
 11271  0FC0  3023               	movlw	35
 11272  0FC1  00AE               	movwf	??_modbus_response_write_single_register+3
 11273  0FC2  082B               	movf	??_modbus_response_write_single_register,w
 11274  0FC3  072D               	addwf	??_modbus_response_write_single_register+2,w
 11275  0FC4  0086               	movwf	6
 11276  0FC5  082C               	movf	??_modbus_response_write_single_register+1,w
 11277  0FC6  3D2E               	addwfc	??_modbus_response_write_single_register+3,w
 11278  0FC7  0087               	movwf	7
 11279  0FC8  0008               	return
 11280  0FC9                     __end_ofPL16:	
 11281  0FC9                     PL20:	
 11282  0FC9  3084               	movlw	132
 11283  0FCA  0084               	movwf	4
 11284  0FCB  3023               	movlw	35
 11285  0FCC  0085               	movwf	5
 11286  0FCD  3102               	addfsr 0,2
 11287  0FCE  0800               	movf	0,w
 11288  0FCF  0081               	movwf	1
 11289  0FD0  0008               	return
 11290  0FD1                     __end_ofPL20:	
 11291  0FD1                     PL26:	
 11292  0FD1  3084               	movlw	132
 11293  0FD2  0086               	movwf	6
 11294  0FD3  3023               	movlw	35
 11295  0FD4  0087               	movwf	7
 11296  0FD5  3142               	addfsr 1,2
 11297  0FD6  0008               	return
 11298  0FD7                     __end_ofPL26:	
 11299  0FD7                     PL36:	
 11300  0FD7  0084               	movwf	4
 11301  0FD8  3001               	movlw	1	; select bank2/3
 11302  0FD9  0085               	movwf	5
 11303  0FDA  0800               	movf	0,w
 11304  0FDB  0601               	xorwf	1,w
 11305  0FDC  0008               	return
 11306  0FDD                     __end_ofPL36:	
 11307  0FDD                     PL40:	
 11308  0FDD  0835               	movf	modbus_response_write_single_register@rbuf,w
 11309  0FDE  3E04               	addlw	4
 11310  0FDF  0086               	movwf	6
 11311  0FE0  3001               	movlw	1	; select bank2/3
 11312  0FE1  0087               	movwf	7
 11313  0FE2  0801               	movf	1,w
 11314  0FE3  0008               	return
 11315  0FE4                     __end_ofPL40:	
 11316  0FE4                     PL50:	
 11317  0FE4  0086               	movwf	6
 11318  0FE5  3023               	movlw	35
 11319  0FE6  0087               	movwf	7
 11320  0FE7  082B               	movf	??_modbus_response_write_single_register,w
 11321  0FE8  0081               	movwf	1
 11322  0FE9  0008               	return
 11323  0FEA                     __end_ofPL50:	
 11324  0FEA                     PL52:	
 11325  0FEA  3084               	movlw	132
 11326  0FEB  0086               	movwf	6
 11327  0FEC  3023               	movlw	35
 11328  0FED  0087               	movwf	7
 11329  0FEE  3144               	addfsr 1,4
 11330  0FEF  0008               	return
 11331  0FF0                     __end_ofPL52:	
 11332  0FF0                     PL54:	
 11333  0FF0  0832               	movf	modbus_response_write_single_register@pmdbs,w
 11334  0FF1  0086               	movwf	6
 11335  0FF2  3001               	movlw	1	; select bank2/3
 11336  0FF3  0087               	movwf	7
 11337  0FF4  0801               	movf	1,w
 11338  0FF5  0008               	return
 11339  0FF6                     __end_ofPL54:	
 11340  0FF6                     PL58:	
 11341  0FF6  0086               	movwf	6
 11342  0FF7  3001               	movlw	1	; select bank2/3
 11343  0FF8  0087               	movwf	7
 11344  0FF9  0801               	movf	1,w
 11345  0FFA  0008               	return
 11346  0FFB                     __end_ofPL58:	
 11347  0FFB                     PL60:	
 11348  0FFB  0852               	movf	_rtAdcValueRsLo,w
 11349  0FFC  3FC0               	movwi [0]fsr1
 11350  0FFD  0853               	movf	_rtAdcValueRsLo+1,w
 11351  0FFE  3FC1               	movwi [1]fsr1
 11352  0FFF  0008               	return
 11353  1000                     __end_ofPL60:	
 11354                           
 11355                           	psect	swtext2
 11356  07D2                     __pswtext2:	
 11357  07D2                     S4514:	
 11358  07D2  318E  2E1A         	ljmp	l2856
 11359  07D4  318E  2E21         	ljmp	l2858
 11360  07D6  318E  2E2E         	ljmp	l2860
 11361  07D8  318E  2E41         	ljmp	l2862
 11362  07DA  318E  2E46         	ljmp	l2864
 11363  07DC  318E  2E4E         	ljmp	l2866
 11364  07DE  318E  2E56         	ljmp	l2868
 11365  07E0  318E  2E5C         	ljmp	l2870
 11366  07E2  318E  2E64         	ljmp	l2872
 11367  07E4  318E  2E6C         	ljmp	l2874
 11368  07E6  318E  2E74         	ljmp	l2876
 11369  07E8  318E  2E7C         	ljmp	l2878
 11370  07EA  318E  2E85         	ljmp	l2880
 11371  07EC  318E  2E8D         	ljmp	l2882
 11372  07EE  318E  2E95         	ljmp	l2884
 11373                           
 11374                           	psect	text32
 11375  0A8A                     __ptext32:	
 11376 ;; *************** function _calc_expect_vout_adc_value *****************
 11377 ;; Defined at:
 11378 ;;		line 396 in file "src/api/sample.c"
 11379 ;; Parameters:    Size  Location     Type
 11380 ;;  x               2   18[BANK0 ] unsigned int 
 11381 ;; Auto vars:     Size  Location     Type
 11382 ;;  t32             4   16[BANK4 ] long 
 11383 ;;  x0              4   12[BANK4 ] long 
 11384 ;;  y0              4    8[BANK4 ] long 
 11385 ;;  x1              4    4[BANK4 ] long 
 11386 ;;  y1              4    0[BANK4 ] long 
 11387 ;;  i               1   20[BANK4 ] unsigned char 
 11388 ;;  index           1    0        unsigned char 
 11389 ;; Return value:  Size  Location     Type
 11390 ;;                  2   18[BANK0 ] unsigned int 
 11391 ;; Registers used:
 11392 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11393 ;; Tracked objects:
 11394 ;;		On entry : 1F/0
 11395 ;;		On exit  : 1F/0
 11396 ;;		Unchanged: 0/0
 11397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11398 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11399 ;;      Locals:         0       0       0       0       0      21       0       0       0       0       0       0       
      +0       0
 11400 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11401 ;;      Totals:         0      14       0       0       0      21       0       0       0       0       0       0       
      +0       0
 11402 ;;Total ram usage:       35 bytes
 11403 ;; Hardware stack levels used:    1
 11404 ;; Hardware stack levels required when called:    2
 11405 ;; This function calls:
 11406 ;;		___aldiv
 11407 ;;		___lmul
 11408 ;; This function is called by:
 11409 ;;		_main
 11410 ;; This function uses a non-reentrant model
 11411 ;;
 11412                           
 11413                           
 11414                           ;psect for function _calc_expect_vout_adc_value
 11415  0A8A                     _calc_expect_vout_adc_value:	
 11416                           
 11417                           ;sample.c: 399: int32_t y0,y1,x0,x1;
 11418                           ;sample.c: 400: uint8_t i;
 11419                           ;sample.c: 401: int32_t t32;
 11420                           ;sample.c: 402: for (i = 0; i < 20-2; i++) {
 11421                           
 11422                           ;incstack = 0
 11423                           ; Regs used in _calc_expect_vout_adc_value: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 11424  0A8A  0024               	movlb	4	; select bank4
 11425  0A8B  01B4               	clrf	calc_expect_vout_adc_value@i^(0+512)
 11426  0A8C                     l4308:	
 11427                           
 11428                           ;sample.c: 403: if(sysData.calibRsAdc[i]<sysData.calibRsAdc[i+1]){
 11429  0A8C  23C7  318A         	fcall	PL8	;call to abstracted procedure
 11430  0A8E  23B2  318A         	fcall	PL2	;call to abstracted procedure
 11431  0A90  0024               	movlb	4	; select bank4
 11432  0A91  0834               	movf	calc_expect_vout_adc_value@i^(0+512),w
 11433  0A92  0020               	movlb	0	; select bank0
 11434  0A93  00BA               	movwf	??_calc_expect_vout_adc_value+6
 11435  0A94  308E               	movlw	142
 11436  0A95  01BB               	clrf	??_calc_expect_vout_adc_value+7
 11437  0A96  35BA               	lslf	??_calc_expect_vout_adc_value+6,f
 11438  0A97  0DBB               	rlf	??_calc_expect_vout_adc_value+7,f
 11439  0A98  00BC               	movwf	??_calc_expect_vout_adc_value+8
 11440  0A99  3023               	movlw	35
 11441  0A9A  00BD               	movwf	??_calc_expect_vout_adc_value+9
 11442  0A9B  083A               	movf	??_calc_expect_vout_adc_value+6,w
 11443  0A9C  073C               	addwf	??_calc_expect_vout_adc_value+8,w
 11444  0A9D  0086               	movwf	6
 11445  0A9E  083B               	movf	??_calc_expect_vout_adc_value+7,w
 11446  0A9F  3D3D               	addwfc	??_calc_expect_vout_adc_value+9,w
 11447  0AA0  0087               	movwf	7
 11448  0AA1  3F40               	moviw [0]fsr1
 11449  0AA2  00BE               	movwf	??_calc_expect_vout_adc_value+10
 11450  0AA3  3F41               	moviw [1]fsr1
 11451  0AA4  00BF               	movwf	??_calc_expect_vout_adc_value+11
 11452  0AA5  0839               	movf	??_calc_expect_vout_adc_value+5,w
 11453  0AA6  023F               	subwf	??_calc_expect_vout_adc_value+11,w
 11454  0AA7  1D03               	skipz
 11455  0AA8  2AAB               	goto	u2885
 11456  0AA9  0838               	movf	??_calc_expect_vout_adc_value+4,w
 11457  0AAA  023E               	subwf	??_calc_expect_vout_adc_value+10,w
 11458  0AAB                     u2885:	
 11459  0AAB  1803               	skipnc
 11460  0AAC  2AB8               	goto	l4314
 11461                           
 11462                           ;sample.c: 404: if (x < sysData.calibRsAdc[i])break;
 11463  0AAD  0024               	movlb	4	; select bank4
 11464  0AAE  23C3  318A         	fcall	PL4	;call to abstracted procedure
 11465  0AB0  23B2  318A         	fcall	PL2	;call to abstracted procedure
 11466  0AB2  0233               	subwf	calc_expect_vout_adc_value@x+1,w
 11467  0AB3  1D03               	skipz
 11468  0AB4  2AC3               	goto	u2905
 11469  0AB5  0838               	movf	??_calc_expect_vout_adc_value+4,w
 11470  0AB6  0232               	subwf	calc_expect_vout_adc_value@x,w
 11471  0AB7  2AC3               	goto	u2905
 11472  0AB8                     l4314:	
 11473                           
 11474                           ;sample.c: 406: if (x > sysData.calibRsAdc[i])break;
 11475  0AB8  0024               	movlb	4	; select bank4
 11476  0AB9  23C3  318A         	fcall	PL4	;call to abstracted procedure
 11477  0ABB  23B2  318A         	fcall	PL2	;call to abstracted procedure
 11478  0ABD  0833               	movf	calc_expect_vout_adc_value@x+1,w
 11479  0ABE  0239               	subwf	??_calc_expect_vout_adc_value+5,w
 11480  0ABF  1D03               	skipz
 11481  0AC0  2AC3               	goto	u2905
 11482  0AC1  0832               	movf	calc_expect_vout_adc_value@x,w
 11483  0AC2  0238               	subwf	??_calc_expect_vout_adc_value+4,w
 11484  0AC3                     u2905:	
 11485  0AC3  1C03               	btfss	3,0
 11486  0AC4  2ACB               	goto	l4322
 11487  0AC5  0024               	movlb	4	; select bank4
 11488  0AC6  3012               	movlw	18
 11489  0AC7  0AB4               	incf	calc_expect_vout_adc_value@i^(0+512),f
 11490  0AC8  0234               	subwf	calc_expect_vout_adc_value@i^(0+512),w
 11491  0AC9  1C03               	skipc
 11492  0ACA  2A8C               	goto	l4308
 11493  0ACB                     l4322:	
 11494                           
 11495                           ;sample.c: 407: }
 11496                           ;sample.c: 408: }
 11497                           ;sample.c: 409: if(i)i--;
 11498  0ACB  0024               	movlb	4	; select bank4
 11499  0ACC  0834               	movf	calc_expect_vout_adc_value@i^(0+512),w
 11500  0ACD  1D03               	btfss	3,2
 11501  0ACE  03B4               	decf	calc_expect_vout_adc_value@i^(0+512),f
 11502                           
 11503                           ;sample.c: 410: if (i > 20-2)i=20-2;
 11504  0ACF  3013               	movlw	19
 11505  0AD0  0234               	subwf	calc_expect_vout_adc_value@i^(0+512),w
 11506  0AD1  1C03               	skipc
 11507  0AD2  2AD5               	goto	l4330
 11508  0AD3  3012               	movlw	18
 11509  0AD4  00B4               	movwf	calc_expect_vout_adc_value@i^(0+512)
 11510  0AD5                     l4330:	
 11511                           
 11512                           ;sample.c: 411: y1=sysData.calibVoMV[i+1];
 11513  0AD5  0834               	movf	calc_expect_vout_adc_value@i^(0+512),w
 11514  0AD6  0020               	movlb	0	; select bank0
 11515  0AD7  00B4               	movwf	??_calc_expect_vout_adc_value
 11516  0AD8  30B8               	movlw	184
 11517  0AD9  23B2  318A         	fcall	PL2	;call to abstracted procedure
 11518  0ADB  0838               	movf	??_calc_expect_vout_adc_value+4,w
 11519  0ADC  0024               	movlb	4	; select bank4
 11520  0ADD  00A0               	movwf	calc_expect_vout_adc_value@y1^(0+512)
 11521  0ADE  0020               	movlb	0	; select bank0
 11522  0ADF  0839               	movf	??_calc_expect_vout_adc_value+5,w
 11523  0AE0  0024               	movlb	4	; select bank4
 11524  0AE1  00A1               	movwf	(calc_expect_vout_adc_value@y1^(0+512)+1)
 11525  0AE2  01A2               	clrf	(calc_expect_vout_adc_value@y1^(0+512)+2)
 11526  0AE3  01A3               	clrf	(calc_expect_vout_adc_value@y1^(0+512)+3)
 11527                           
 11528                           ;sample.c: 412: y0=sysData.calibVoMV[i];
 11529  0AE4  0834               	movf	calc_expect_vout_adc_value@i^(0+512),w
 11530  0AE5  0020               	movlb	0	; select bank0
 11531  0AE6  00B4               	movwf	??_calc_expect_vout_adc_value
 11532  0AE7  30B6               	movlw	182
 11533  0AE8  23B2  318A         	fcall	PL2	;call to abstracted procedure
 11534  0AEA  0838               	movf	??_calc_expect_vout_adc_value+4,w
 11535  0AEB  0024               	movlb	4	; select bank4
 11536  0AEC  00A8               	movwf	calc_expect_vout_adc_value@y0^(0+512)
 11537  0AED  0020               	movlb	0	; select bank0
 11538  0AEE  0839               	movf	??_calc_expect_vout_adc_value+5,w
 11539  0AEF  0024               	movlb	4	; select bank4
 11540  0AF0  00A9               	movwf	(calc_expect_vout_adc_value@y0^(0+512)+1)
 11541  0AF1  01AA               	clrf	(calc_expect_vout_adc_value@y0^(0+512)+2)
 11542  0AF2  01AB               	clrf	(calc_expect_vout_adc_value@y0^(0+512)+3)
 11543                           
 11544                           ;sample.c: 415: x1=sysData.calibRsAdc[i+1];
 11545  0AF3  23C7  318A         	fcall	PL8	;call to abstracted procedure
 11546  0AF5  23B2  318A         	fcall	PL2	;call to abstracted procedure
 11547  0AF7  0838               	movf	??_calc_expect_vout_adc_value+4,w
 11548  0AF8  0024               	movlb	4	; select bank4
 11549  0AF9  00A4               	movwf	calc_expect_vout_adc_value@x1^(0+512)
 11550  0AFA  0020               	movlb	0	; select bank0
 11551  0AFB  0839               	movf	??_calc_expect_vout_adc_value+5,w
 11552  0AFC  0024               	movlb	4	; select bank4
 11553  0AFD  00A5               	movwf	(calc_expect_vout_adc_value@x1^(0+512)+1)
 11554  0AFE  01A6               	clrf	(calc_expect_vout_adc_value@x1^(0+512)+2)
 11555  0AFF  01A7               	clrf	(calc_expect_vout_adc_value@x1^(0+512)+3)
 11556                           
 11557                           ;sample.c: 416: x0=sysData.calibRsAdc[i];
 11558  0B00  23C3  318A         	fcall	PL4	;call to abstracted procedure
 11559  0B02  23B2  318A         	fcall	PL2	;call to abstracted procedure
 11560  0B04  0838               	movf	??_calc_expect_vout_adc_value+4,w
 11561  0B05  0024               	movlb	4	; select bank4
 11562  0B06  00AC               	movwf	calc_expect_vout_adc_value@x0^(0+512)
 11563  0B07  0020               	movlb	0	; select bank0
 11564  0B08  0839               	movf	??_calc_expect_vout_adc_value+5,w
 11565  0B09  0024               	movlb	4	; select bank4
 11566  0B0A  00AD               	movwf	(calc_expect_vout_adc_value@x0^(0+512)+1)
 11567  0B0B  01AE               	clrf	(calc_expect_vout_adc_value@x0^(0+512)+2)
 11568  0B0C  01AF               	clrf	(calc_expect_vout_adc_value@x0^(0+512)+3)
 11569                           
 11570                           ;sample.c: 419: if(x1==x0)return y0;
 11571  0B0D  082F               	movf	(calc_expect_vout_adc_value@x0+3)^(0+512),w
 11572  0B0E  0627               	xorwf	(calc_expect_vout_adc_value@x1+3)^(0+512),w
 11573  0B0F  1D03               	skipz
 11574  0B10  2B1B               	goto	u2945
 11575  0B11  082E               	movf	(calc_expect_vout_adc_value@x0+2)^(0+512),w
 11576  0B12  0626               	xorwf	(calc_expect_vout_adc_value@x1+2)^(0+512),w
 11577  0B13  1D03               	skipz
 11578  0B14  2B1B               	goto	u2945
 11579  0B15  082D               	movf	(calc_expect_vout_adc_value@x0+1)^(0+512),w
 11580  0B16  0625               	xorwf	(calc_expect_vout_adc_value@x1+1)^(0+512),w
 11581  0B17  1D03               	skipz
 11582  0B18  2B1B               	goto	u2945
 11583  0B19  082C               	movf	calc_expect_vout_adc_value@x0^(0+512),w
 11584  0B1A  0624               	xorwf	calc_expect_vout_adc_value@x1^(0+512),w
 11585  0B1B                     u2945:	
 11586  0B1B  1D03               	skipz
 11587  0B1C  2B25               	goto	l4342
 11588  0B1D  0829               	movf	(calc_expect_vout_adc_value@y0+1)^(0+512),w
 11589  0B1E  0020               	movlb	0	; select bank0
 11590  0B1F  00B3               	movwf	?_calc_expect_vout_adc_value+1
 11591  0B20  0024               	movlb	4	; select bank4
 11592  0B21  0828               	movf	calc_expect_vout_adc_value@y0^(0+512),w
 11593  0B22  0020               	movlb	0	; select bank0
 11594  0B23  00B2               	movwf	?_calc_expect_vout_adc_value
 11595  0B24  0008               	return
 11596  0B25                     l4342:	
 11597                           
 11598                           ;sample.c: 422: t32=(x-x0);
 11599  0B25  0020               	movlb	0	; select bank0
 11600  0B26  0832               	movf	calc_expect_vout_adc_value@x,w
 11601  0B27  0024               	movlb	4	; select bank4
 11602  0B28  00B0               	movwf	calc_expect_vout_adc_value@t32^(0+512)
 11603  0B29  0020               	movlb	0	; select bank0
 11604  0B2A  0833               	movf	calc_expect_vout_adc_value@x+1,w
 11605  0B2B  0024               	movlb	4	; select bank4
 11606  0B2C  00B1               	movwf	(calc_expect_vout_adc_value@t32^(0+512)+1)
 11607  0B2D  01B2               	clrf	(calc_expect_vout_adc_value@t32^(0+512)+2)
 11608  0B2E  01B3               	clrf	(calc_expect_vout_adc_value@t32^(0+512)+3)
 11609  0B2F  082C               	movf	calc_expect_vout_adc_value@x0^(0+512),w
 11610  0B30  02B0               	subwf	calc_expect_vout_adc_value@t32^(0+512),f
 11611  0B31  082D               	movf	(calc_expect_vout_adc_value@x0+1)^(0+512),w
 11612  0B32  3BB1               	subwfb	(calc_expect_vout_adc_value@t32+1)^(0+512),f
 11613  0B33  082E               	movf	(calc_expect_vout_adc_value@x0+2)^(0+512),w
 11614  0B34  3BB2               	subwfb	(calc_expect_vout_adc_value@t32+2)^(0+512),f
 11615  0B35  082F               	movf	(calc_expect_vout_adc_value@x0+3)^(0+512),w
 11616  0B36  3BB3               	subwfb	(calc_expect_vout_adc_value@t32+3)^(0+512),f
 11617                           
 11618                           ;sample.c: 423: t32=t32*(y1-y0);
 11619  0B37  0823               	movf	(calc_expect_vout_adc_value@y1+3)^(0+512),w
 11620  0B38  00F4               	movwf	___lmul@multiplier+3
 11621  0B39  0822               	movf	(calc_expect_vout_adc_value@y1+2)^(0+512),w
 11622  0B3A  00F3               	movwf	___lmul@multiplier+2
 11623  0B3B  0821               	movf	(calc_expect_vout_adc_value@y1+1)^(0+512),w
 11624  0B3C  00F2               	movwf	___lmul@multiplier+1
 11625  0B3D  0820               	movf	calc_expect_vout_adc_value@y1^(0+512),w
 11626  0B3E  00F1               	movwf	___lmul@multiplier
 11627  0B3F  0828               	movf	calc_expect_vout_adc_value@y0^(0+512),w
 11628  0B40  02F1               	subwf	___lmul@multiplier,f
 11629  0B41  0829               	movf	(calc_expect_vout_adc_value@y0+1)^(0+512),w
 11630  0B42  3BF2               	subwfb	___lmul@multiplier+1,f
 11631  0B43  082A               	movf	(calc_expect_vout_adc_value@y0+2)^(0+512),w
 11632  0B44  3BF3               	subwfb	___lmul@multiplier+2,f
 11633  0B45  082B               	movf	(calc_expect_vout_adc_value@y0+3)^(0+512),w
 11634  0B46  3BF4               	subwfb	___lmul@multiplier+3,f
 11635  0B47  0833               	movf	(calc_expect_vout_adc_value@t32+3)^(0+512),w
 11636  0B48  00F8               	movwf	___lmul@multiplicand+3
 11637  0B49  0832               	movf	(calc_expect_vout_adc_value@t32+2)^(0+512),w
 11638  0B4A  00F7               	movwf	___lmul@multiplicand+2
 11639  0B4B  0831               	movf	(calc_expect_vout_adc_value@t32+1)^(0+512),w
 11640  0B4C  00F6               	movwf	___lmul@multiplicand+1
 11641  0B4D  0830               	movf	calc_expect_vout_adc_value@t32^(0+512),w
 11642  0B4E  00F5               	movwf	___lmul@multiplicand
 11643  0B4F  3185  25C8  318A   	fcall	___lmul
 11644  0B52  0874               	movf	?___lmul+3,w
 11645  0B53  0024               	movlb	4	; select bank4
 11646  0B54  00B3               	movwf	(calc_expect_vout_adc_value@t32+3)^(0+512)
 11647  0B55  0873               	movf	?___lmul+2,w
 11648  0B56  00B2               	movwf	(calc_expect_vout_adc_value@t32+2)^(0+512)
 11649  0B57  0872               	movf	?___lmul+1,w
 11650  0B58  00B1               	movwf	(calc_expect_vout_adc_value@t32+1)^(0+512)
 11651  0B59  0871               	movf	?___lmul,w
 11652  0B5A  00B0               	movwf	calc_expect_vout_adc_value@t32^(0+512)
 11653                           
 11654                           ;sample.c: 424: t32=t32/(x1-x0);
 11655  0B5B  0827               	movf	(calc_expect_vout_adc_value@x1+3)^(0+512),w
 11656  0B5C  0020               	movlb	0	; select bank0
 11657  0B5D  00A7               	movwf	___aldiv@divisor+3
 11658  0B5E  0024               	movlb	4	; select bank4
 11659  0B5F  0826               	movf	(calc_expect_vout_adc_value@x1+2)^(0+512),w
 11660  0B60  0020               	movlb	0	; select bank0
 11661  0B61  00A6               	movwf	___aldiv@divisor+2
 11662  0B62  0024               	movlb	4	; select bank4
 11663  0B63  0825               	movf	(calc_expect_vout_adc_value@x1+1)^(0+512),w
 11664  0B64  0020               	movlb	0	; select bank0
 11665  0B65  00A5               	movwf	___aldiv@divisor+1
 11666  0B66  0024               	movlb	4	; select bank4
 11667  0B67  0824               	movf	calc_expect_vout_adc_value@x1^(0+512),w
 11668  0B68  0020               	movlb	0	; select bank0
 11669  0B69  00A4               	movwf	___aldiv@divisor
 11670  0B6A  0024               	movlb	4	; select bank4
 11671  0B6B  082C               	movf	calc_expect_vout_adc_value@x0^(0+512),w
 11672  0B6C  0020               	movlb	0	; select bank0
 11673  0B6D  02A4               	subwf	___aldiv@divisor,f
 11674  0B6E  0024               	movlb	4	; select bank4
 11675  0B6F  082D               	movf	(calc_expect_vout_adc_value@x0+1)^(0+512),w
 11676  0B70  0020               	movlb	0	; select bank0
 11677  0B71  3BA5               	subwfb	___aldiv@divisor+1,f
 11678  0B72  0024               	movlb	4	; select bank4
 11679  0B73  082E               	movf	(calc_expect_vout_adc_value@x0+2)^(0+512),w
 11680  0B74  0020               	movlb	0	; select bank0
 11681  0B75  3BA6               	subwfb	___aldiv@divisor+2,f
 11682  0B76  0024               	movlb	4	; select bank4
 11683  0B77  082F               	movf	(calc_expect_vout_adc_value@x0+3)^(0+512),w
 11684  0B78  0020               	movlb	0	; select bank0
 11685  0B79  3BA7               	subwfb	___aldiv@divisor+3,f
 11686  0B7A  0024               	movlb	4	; select bank4
 11687  0B7B  0833               	movf	(calc_expect_vout_adc_value@t32+3)^(0+512),w
 11688  0B7C  0020               	movlb	0	; select bank0
 11689  0B7D  00AB               	movwf	___aldiv@dividend+3
 11690  0B7E  0024               	movlb	4	; select bank4
 11691  0B7F  0832               	movf	(calc_expect_vout_adc_value@t32+2)^(0+512),w
 11692  0B80  0020               	movlb	0	; select bank0
 11693  0B81  00AA               	movwf	___aldiv@dividend+2
 11694  0B82  0024               	movlb	4	; select bank4
 11695  0B83  0831               	movf	(calc_expect_vout_adc_value@t32+1)^(0+512),w
 11696  0B84  0020               	movlb	0	; select bank0
 11697  0B85  00A9               	movwf	___aldiv@dividend+1
 11698  0B86  0024               	movlb	4	; select bank4
 11699  0B87  0830               	movf	calc_expect_vout_adc_value@t32^(0+512),w
 11700  0B88  0020               	movlb	0	; select bank0
 11701  0B89  00A8               	movwf	___aldiv@dividend
 11702  0B8A  3185  255C  318A   	fcall	___aldiv
 11703  0B8D  0827               	movf	?___aldiv+3,w
 11704  0B8E  0024               	movlb	4	; select bank4
 11705  0B8F  00B3               	movwf	(calc_expect_vout_adc_value@t32+3)^(0+512)
 11706  0B90  0020               	movlb	0	; select bank0
 11707  0B91  0826               	movf	?___aldiv+2,w
 11708  0B92  0024               	movlb	4	; select bank4
 11709  0B93  00B2               	movwf	(calc_expect_vout_adc_value@t32+2)^(0+512)
 11710  0B94  0020               	movlb	0	; select bank0
 11711  0B95  0825               	movf	?___aldiv+1,w
 11712  0B96  0024               	movlb	4	; select bank4
 11713  0B97  00B1               	movwf	(calc_expect_vout_adc_value@t32+1)^(0+512)
 11714  0B98  0020               	movlb	0	; select bank0
 11715  0B99  0824               	movf	?___aldiv,w
 11716  0B9A  0024               	movlb	4	; select bank4
 11717  0B9B  00B0               	movwf	calc_expect_vout_adc_value@t32^(0+512)
 11718                           
 11719                           ;sample.c: 425: t32=t32+y0;
 11720  0B9C  0828               	movf	calc_expect_vout_adc_value@y0^(0+512),w
 11721  0B9D  07B0               	addwf	calc_expect_vout_adc_value@t32^(0+512),f
 11722  0B9E  0829               	movf	(calc_expect_vout_adc_value@y0+1)^(0+512),w
 11723  0B9F  3DB1               	addwfc	(calc_expect_vout_adc_value@t32+1)^(0+512),f
 11724  0BA0  082A               	movf	(calc_expect_vout_adc_value@y0+2)^(0+512),w
 11725  0BA1  3DB2               	addwfc	(calc_expect_vout_adc_value@t32+2)^(0+512),f
 11726  0BA2  082B               	movf	(calc_expect_vout_adc_value@y0+3)^(0+512),w
 11727  0BA3  3DB3               	addwfc	(calc_expect_vout_adc_value@t32+3)^(0+512),f
 11728                           
 11729                           ;sample.c: 426: if(t32<0)t32=0;
 11730  0BA4  1FB3               	btfss	(calc_expect_vout_adc_value@t32+3)^(0+512),7
 11731  0BA5  2BAA               	goto	l4352
 11732  0BA6  01B0               	clrf	calc_expect_vout_adc_value@t32^(0+512)
 11733  0BA7  01B1               	clrf	(calc_expect_vout_adc_value@t32+1)^(0+512)
 11734  0BA8  01B2               	clrf	(calc_expect_vout_adc_value@t32+2)^(0+512)
 11735  0BA9  01B3               	clrf	(calc_expect_vout_adc_value@t32+3)^(0+512)
 11736  0BAA                     l4352:	
 11737                           
 11738                           ;sample.c: 427: return (uint16_t)t32;
 11739  0BAA  0831               	movf	(calc_expect_vout_adc_value@t32+1)^(0+512),w
 11740  0BAB  0020               	movlb	0	; select bank0
 11741  0BAC  00B3               	movwf	?_calc_expect_vout_adc_value+1
 11742  0BAD  0024               	movlb	4	; select bank4
 11743  0BAE  0830               	movf	calc_expect_vout_adc_value@t32^(0+512),w
 11744  0BAF  0020               	movlb	0	; select bank0
 11745  0BB0  00B2               	movwf	?_calc_expect_vout_adc_value
 11746  0BB1  0008               	return
 11747  0BB2                     __end_of_calc_expect_vout_adc_value:	
 11748  0BB2                     PL2:	
 11749  0BB2  01B5               	clrf	??_calc_expect_vout_adc_value+1
 11750  0BB3  35B4               	lslf	??_calc_expect_vout_adc_value,f
 11751  0BB4  0DB5               	rlf	??_calc_expect_vout_adc_value+1,f
 11752  0BB5  00B6               	movwf	??_calc_expect_vout_adc_value+2
 11753  0BB6  3023               	movlw	35
 11754  0BB7  00B7               	movwf	??_calc_expect_vout_adc_value+3
 11755  0BB8  0834               	movf	??_calc_expect_vout_adc_value,w
 11756  0BB9  0736               	addwf	??_calc_expect_vout_adc_value+2,w
 11757  0BBA  0086               	movwf	6
 11758  0BBB  0835               	movf	??_calc_expect_vout_adc_value+1,w
 11759  0BBC  3D37               	addwfc	??_calc_expect_vout_adc_value+3,w
 11760  0BBD  0087               	movwf	7
 11761  0BBE  3F40               	moviw [0]fsr1
 11762  0BBF  00B8               	movwf	??_calc_expect_vout_adc_value+4
 11763  0BC0  3F41               	moviw [1]fsr1
 11764  0BC1  00B9               	movwf	??_calc_expect_vout_adc_value+5
 11765  0BC2  0008               	return
 11766  0BC3                     __end_ofPL2:	
 11767  0BC3                     PL4:	
 11768  0BC3  0834               	movf	calc_expect_vout_adc_value@i^(0+512),w
 11769  0BC4  0020               	movlb	0	; select bank0
 11770  0BC5  00B4               	movwf	??_calc_expect_vout_adc_value
 11771  0BC6  348E               	retlw	142
 11772  0BC7                     __end_ofPL4:	
 11773  0BC7                     PL8:	
 11774  0BC7  0834               	movf	calc_expect_vout_adc_value@i^(0+512),w
 11775  0BC8  0020               	movlb	0	; select bank0
 11776  0BC9  00B4               	movwf	??_calc_expect_vout_adc_value
 11777  0BCA  3490               	retlw	144
 11778  0BCB                     __end_ofPL8:	
 11779                           
 11780                           	psect	intentry
 11781  0004                     __pintentry:	
 11782 ;; *************** function _INTERRUPT_InterruptManager *****************
 11783 ;; Defined at:
 11784 ;;		line 54 in file "mcc_generated_files/interrupt_manager.c"
 11785 ;; Parameters:    Size  Location     Type
 11786 ;;		None
 11787 ;; Auto vars:     Size  Location     Type
 11788 ;;  t8              1    0[COMMON] unsigned char 
 11789 ;; Return value:  Size  Location     Type
 11790 ;;                  1    wreg      void 
 11791 ;; Registers used:
 11792 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11793 ;; Tracked objects:
 11794 ;;		On entry : 0/0
 11795 ;;		On exit  : 0/0
 11796 ;;		Unchanged: 0/0
 11797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11799 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11801 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11802 ;;Total ram usage:        1 bytes
 11803 ;; Hardware stack levels used:    1
 11804 ;; This function calls:
 11805 ;;		Nothing
 11806 ;; This function is called by:
 11807 ;;		Interrupt level 1
 11808 ;; This function uses a non-reentrant model
 11809 ;;
 11810                           
 11811  0004                     _INTERRUPT_InterruptManager:	
 11812                           
 11813                           ;incstack = 0
 11814                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0]
 11815  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 11816  0005  3180               	pagesel	$
 11817                           
 11818                           ;interrupt_manager.c: 57: uint8_t t8;
 11819                           ;interrupt_manager.c: 58: if(INTCONbits.PEIE == 1 && PIE1bits.TMR2IE == 1 && PIR1bits.TM
      +                          R2IF == 1)
 11820  0006  1F0B               	btfss	11,6	;volatile
 11821  0007  282F               	goto	i1l3778
 11822  0008  0021               	movlb	1	; select bank1
 11823  0009  1C91               	btfss	17,1	;volatile
 11824  000A  282F               	goto	i1l3778
 11825  000B  0020               	movlb	0	; select bank0
 11826  000C  1C91               	btfss	17,1	;volatile
 11827  000D  282F               	goto	i1l3778
 11828                           
 11829                           ;interrupt_manager.c: 59: {
 11830                           ;interrupt_manager.c: 61: PIR1bits.TMR2IF = 0;
 11831  000E  1091               	bcf	17,1	;volatile
 11832                           
 11833                           ;interrupt_manager.c: 62: Event |= (1<<1);
 11834  000F  14DA               	bsf	_Event,1	;volatile
 11835  0010  3005               	movlw	5
 11836                           
 11837                           ;interrupt_manager.c: 63: subTickerX++;
 11838  0011  0ADE               	incf	_subTickerX,f
 11839                           
 11840                           ;interrupt_manager.c: 64: subTickerX_1s++;
 11841  0012  0ADF               	incf	_subTickerX_1s,f
 11842                           
 11843                           ;interrupt_manager.c: 65: if(subTickerX>=5){
 11844  0013  025E               	subwf	_subTickerX,w
 11845  0014  1C03               	skipc
 11846  0015  2818               	goto	i1l3760
 11847                           
 11848                           ;interrupt_manager.c: 66: subTickerX=0;
 11849  0016  01DE               	clrf	_subTickerX
 11850                           
 11851                           ;interrupt_manager.c: 67: Event |= (1<<2);
 11852  0017  155A               	bsf	_Event,2	;volatile
 11853  0018                     i1l3760:	
 11854                           
 11855                           ;interrupt_manager.c: 68: }
 11856                           ;interrupt_manager.c: 69: if(subTickerX_1s>=50){
 11857  0018  3032               	movlw	50
 11858  0019  025F               	subwf	_subTickerX_1s,w
 11859  001A  1C03               	skipc
 11860  001B  281E               	goto	i1l3766
 11861                           
 11862                           ;interrupt_manager.c: 70: subTickerX_1s=0;
 11863  001C  01DF               	clrf	_subTickerX_1s
 11864                           
 11865                           ;interrupt_manager.c: 71: Event |= (1<<3);
 11866  001D  15DA               	bsf	_Event,3	;volatile
 11867  001E                     i1l3766:	
 11868                           
 11869                           ;interrupt_manager.c: 72: }
 11870                           ;interrupt_manager.c: 74: if(eusartRxIdleTime_ms){
 11871  001E  085B               	movf	_eusartRxIdleTime_ms,w	;volatile
 11872  001F  1903               	btfsc	3,2
 11873  0020  2828               	goto	i1l3776
 11874                           
 11875                           ;interrupt_manager.c: 75: eusartRxIdleTime_ms++;
 11876  0021  0ADB               	incf	_eusartRxIdleTime_ms,f	;volatile
 11877                           
 11878                           ;interrupt_manager.c: 76: if(eusartRxIdleTime_ms>5){
 11879  0022  3006               	movlw	6
 11880  0023  025B               	subwf	_eusartRxIdleTime_ms,w	;volatile
 11881  0024  1C03               	skipc
 11882  0025  2828               	goto	i1l3776
 11883                           
 11884                           ;interrupt_manager.c: 77: Event|=(1<<0);
 11885  0026  145A               	bsf	_Event,0	;volatile
 11886                           
 11887                           ;interrupt_manager.c: 78: eusartRxIdleTime_ms=0;
 11888  0027  01DB               	clrf	_eusartRxIdleTime_ms	;volatile
 11889  0028                     i1l3776:	
 11890                           
 11891                           ;interrupt_manager.c: 79: }
 11892                           ;interrupt_manager.c: 80: }
 11893                           ;interrupt_manager.c: 81: globalTicker++;
 11894  0028  3001               	movlw	1
 11895  0029  0021               	movlb	1	; select bank1
 11896  002A  07DA               	addwf	_globalTicker^(0+128),f	;volatile
 11897  002B  3000               	movlw	0
 11898  002C  3DDB               	addwfc	(_globalTicker+1)^(0+128),f	;volatile
 11899  002D  3DDC               	addwfc	(_globalTicker+2)^(0+128),f	;volatile
 11900  002E  3DDD               	addwfc	(_globalTicker+3)^(0+128),f	;volatile
 11901  002F                     i1l3778:	
 11902                           
 11903                           ;interrupt_manager.c: 82: }
 11904                           ;interrupt_manager.c: 83: if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits.RCIF
      +                           == 1)
 11905  002F  1F0B               	btfss	11,6	;volatile
 11906  0030  284E               	goto	i1l287
 11907  0031  0021               	movlb	1	; select bank1
 11908  0032  1E91               	btfss	17,5	;volatile
 11909  0033  284E               	goto	i1l287
 11910  0034  0020               	movlb	0	; select bank0
 11911  0035  1E91               	btfss	17,5	;volatile
 11912  0036  284E               	goto	i1l287
 11913                           
 11914                           ;interrupt_manager.c: 84: {
 11915                           ;interrupt_manager.c: 86: PIR1bits.RCIF=0;
 11916  0037  1291               	bcf	17,5	;volatile
 11917                           
 11918                           ;interrupt_manager.c: 87: if(1 == RCSTAbits.OERR){
 11919  0038  0023               	movlb	3	; select bank3
 11920  0039  1C9D               	btfss	29,1	;volatile
 11921  003A  283D               	goto	i1l3788
 11922                           
 11923                           ;interrupt_manager.c: 88: RCSTAbits.CREN = 0;
 11924  003B  121D               	bcf	29,4	;volatile
 11925                           
 11926                           ;interrupt_manager.c: 89: RCSTAbits.CREN = 1;
 11927  003C  161D               	bsf	29,4	;volatile
 11928  003D                     i1l3788:	
 11929                           
 11930                           ;interrupt_manager.c: 90: }
 11931                           ;interrupt_manager.c: 91: t8=RCREG;
 11932  003D  0819               	movf	25,w	;volatile
 11933  003E  00F0               	movwf	INTERRUPT_InterruptManager@t8
 11934                           
 11935                           ;interrupt_manager.c: 92: if(eusartRxCount<64){
 11936  003F  3040               	movlw	64
 11937  0040  027C               	subwf	_eusartRxCount,w	;volatile
 11938  0041  1803               	skipnc
 11939  0042  284B               	goto	i1l3794
 11940                           
 11941                           ;interrupt_manager.c: 93: eusartRxBuffer[eusartRxCount]=t8;
 11942  0043  087C               	movf	_eusartRxCount,w
 11943  0044  3E20               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 11944  0045  0086               	movwf	6
 11945  0046  3001               	movlw	1	; select bank2/3
 11946  0047  0087               	movwf	7
 11947  0048  0870               	movf	INTERRUPT_InterruptManager@t8,w
 11948  0049  0081               	movwf	1
 11949                           
 11950                           ;interrupt_manager.c: 94: eusartRxCount++;
 11951  004A  0AFC               	incf	_eusartRxCount,f	;volatile
 11952  004B                     i1l3794:	
 11953                           
 11954                           ;interrupt_manager.c: 96: }
 11955                           ;interrupt_manager.c: 97: eusartRxIdleTime_ms=1;
 11956  004B  3001               	movlw	1
 11957  004C  0020               	movlb	0	; select bank0
 11958  004D  00DB               	movwf	_eusartRxIdleTime_ms	;volatile
 11959  004E                     i1l287:	
 11960                           ;interrupt_manager.c: 98: }
 11961                           
 11962  004E  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 11963  004F  0009               	retfie
 11964  0050                     __end_of_INTERRUPT_InterruptManager:	
 11965  007E                     btemp	set	126	;btemp
 11966  007E                     int$flags	set	126
 11967  007E                     wtemp	set	126
 11968  007E                     wtemp0	set	126
 11969  0080                     wtemp1	set	128
 11970  0082                     wtemp2	set	130
 11971  0084                     wtemp3	set	132
 11972  0086                     wtemp4	set	134
 11973  0088                     wtemp5	set	136
 11974  007F                     wtemp6	set	127
 11975  007E                     ttemp	set	126
 11976  007E                     ttemp0	set	126
 11977  0081                     ttemp1	set	129
 11978  0084                     ttemp2	set	132
 11979  0087                     ttemp3	set	135
 11980  007F                     ttemp4	set	127
 11981  007E                     ltemp	set	126
 11982  007E                     ltemp0	set	126
 11983  0082                     ltemp1	set	130
 11984  0086                     ltemp2	set	134
 11985  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        22
    BSS         215
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     42      70
    BANK1            80      0      80
    BANK2            80      0      64
    BANK3            80      0      64
    BANK4            80     21      21
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           20      0       0
    BANK12            0      0       0

Pointer List with Targets:

    crc_append@message	PTR unsigned char  size(2) Largest target is 92
		 -> modbusBuf(BANK3[64]), sysData(BIGRAM[92]), 

    crc_verify@message	PTR unsigned char  size(2) Largest target is 92
		 -> modbusBuf(BANK3[64]), sysData(BIGRAM[92]), 

    crc_sum@buf	PTR unsigned char  size(2) Largest target is 92
		 -> modbusBuf(BANK3[64]), sysData(BIGRAM[92]), 

    m_mem_cpy_len@s	PTR unsigned char  size(2) Largest target is 92
		 -> modbusBuf(BANK3[64]), sysData(BIGRAM[92]), eusartRxBuffer(BANK2[64]), 

    m_mem_cpy_len@d	PTR unsigned char  size(2) Largest target is 64
		 -> crc_verify@expected(BANK0[2]), modbusBuf(BANK3[64]), 

    modbus_response_process@rbuf	PTR unsigned char  size(1) Largest target is 64
		 -> modbusBuf(BANK3[64]), 

    modbus_response_process@pmdbs	PTR struct . size(1) Largest target is 64
		 -> modbusBuf(BANK3[64]), 

    modbus_response_command@rbuf	PTR unsigned char  size(1) Largest target is 64
		 -> modbusBuf(BANK3[64]), 

    modbus_response_command@pmdbs	PTR struct . size(1) Largest target is 64
		 -> modbusBuf(BANK3[64]), 

    modbus_response_write_single_register@rbuf	PTR unsigned char  size(1) Largest target is 64
		 -> modbusBuf(BANK3[64]), 

    modbus_response_write_single_register@pmdbs	PTR struct . size(1) Largest target is 64
		 -> modbusBuf(BANK3[64]), 

    getRegisterVal@tempData	PTR unsigned int  size(1) Largest target is 2
		 -> modbus_response_command@tempData(BANK0[2]), 

    modbus_response_illgeal_function@buf	PTR unsigned char  size(1) Largest target is 64
		 -> modbusBuf(BANK3[64]), 

    modbus_response_illgeal_function@pmdbs	PTR struct . size(1) Largest target is 64
		 -> modbusBuf(BANK3[64]), 

    my_flash_system_write@buf	PTR unsigned char  size(2) Largest target is 92
		 -> sysData(BIGRAM[92]), 

    my_flash_system_read@buf	PTR unsigned char  size(2) Largest target is 92
		 -> sysData(BIGRAM[92]), 

    uart_send_len@buf	PTR unsigned char  size(1) Largest target is 64
		 -> modbusBuf(BANK3[64]), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_adc_sample
    _sys_data_init->_my_flash_system_read
    _pid_pwm2_vout_run->___awdiv
    _set_vout_pwm2_duty->_get_vout_pwm2_duty
    _pid_pwm1_idrv_run->___lmul
    _pid_pwm1_idrv_b_b->___lmul
    _set_idrv_pwm1_duty->_get_idrv_pwm1_duty
    _modbus_response_process->_modbus_response_command
    _my_flash_read_system_erase->_FLASH_EraseBlock
    _modbus_response_command->_getRegisterVal
    _crc_append->_crc_sum
    _crc_verify->_crc_sum
    _calc_temp_rs->___lldiv
    _calc_temp_rs->___lmul
    _calc_temp_rc->___lldiv
    _calc_temp_rc->___lmul
    _calc_rs_lo_avg->___lldiv
    _calc_expect_vout_adc_value->___lmul
    ___aldiv->___lmul
    _adc_sample->_adc_init
    _adc_sample->_fvr_set_gain
    _TMR2_Initialize->_TMR2_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_pid_pwm1_idrv_run
    _sys_data_init->_crc_append
    _sys_data_init->_my_flash_system_write
    _pid_pwm1_idrv_run->___aldiv
    _pid_pwm1_idrv_b_b->___aldiv
    _modbus_response_process->_modbus_response_write_single_register
    _modbus_response_write_single_register->_crc_append
    _sys_data_save->_crc_append
    _sys_data_save->_my_flash_system_write
    _modbus_response_illgeal_function->_crc_append
    _modbus_response_command->_crc_append
    _calc_temp_rs->___lldiv
    _calc_temp_rc->___lldiv
    _calc_rs_lo_avg->___lldiv
    _calc_expect_vout_adc_value->___aldiv
    ___aldiv->___lmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    _main->_calc_expect_vout_adc_value

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   45507
                                             40 BANK0      2     2      0
                  _SYSTEM_Initialize
                         _adc_sample
         _calc_expect_vout_adc_value
                     _calc_rs_lo_avg
                       _calc_temp_rc
                       _calc_temp_rs
                      _m_mem_cpy_len
            _modbus_response_process
                  _pid_pwm1_idrv_b_b
                  _pid_pwm1_idrv_run
                  _pid_pwm2_vout_run
                 _set_vout_pwm2_duty
                      _sys_data_init
                      _sys_data_save
                _uart_received_start
 ---------------------------------------------------------------------------------
 (1) _uart_received_start                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sys_data_init                                       10    10      0    4900
                                             11 BANK0     10    10      0
                             ___wmul
                         _crc_append
                         _crc_verify
         _my_flash_read_system_erase
               _my_flash_system_read
              _my_flash_system_write
 ---------------------------------------------------------------------------------
 (2) _my_flash_system_read                                11     7      4     288
                                              1 COMMON    11     7      4
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     348
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _pid_pwm2_vout_run                                    5     5      0    1074
                                              9 COMMON     1     1      0
                                              0 BANK0      4     4      0
                            ___awdiv
                            ___lwdiv
                 _set_vout_pwm2_duty
 ---------------------------------------------------------------------------------
 (1) _set_vout_pwm2_duty                                   4     2      2     218
                                              3 COMMON     4     2      2
                 _get_vout_pwm2_duty
 ---------------------------------------------------------------------------------
 (2) _get_vout_pwm2_duty                                   2     0      2       0
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                              1 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     428
                                              1 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _pid_pwm1_idrv_run                                   22    22      0    4905
                                             18 BANK0     22    22      0
                            ___aldiv
                             ___lmul
                 _set_idrv_pwm1_duty
 ---------------------------------------------------------------------------------
 (1) _pid_pwm1_idrv_b_b                                    5     5      0    4748
                                              9 COMMON     1     1      0
                                             18 BANK0      4     4      0
                            ___aldiv
                             ___lmul
                 _set_idrv_pwm1_duty
 ---------------------------------------------------------------------------------
 (2) _set_idrv_pwm1_duty                                   4     2      2     346
                                              3 COMMON     4     2      2
                 _get_idrv_pwm1_duty
 ---------------------------------------------------------------------------------
 (3) _get_idrv_pwm1_duty                                   2     0      2       0
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _modbus_response_process                              5     3      2   13138
                                             22 BANK0      4     2      2
                         _crc_verify
            _modbus_response_command
   _modbus_response_illgeal_function
_modbus_response_write_single_regist
 ---------------------------------------------------------------------------------
 (2) _modbus_response_write_single_register               11    11      0    5272
                                             11 BANK0     11    11      0
                         _crc_append
                      _sys_data_save
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (1) _sys_data_save                                        0     0      0    2533
                         _crc_append
         _my_flash_read_system_erase
              _my_flash_system_write
 ---------------------------------------------------------------------------------
 (2) _my_flash_system_write                               16    12      4     579
                                              1 COMMON     5     1      4
                                              0 BANK0     11    11      0
 ---------------------------------------------------------------------------------
 (2) _my_flash_read_system_erase                           0     0      0     375
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_EraseBlock                                     3     1      2     375
                                              1 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (2) _modbus_response_illgeal_function                     3     2      1    2343
                                             11 BANK0      3     2      1
                         _crc_append
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (2) _modbus_response_command                             11    11      0    3633
                                             11 COMMON     1     1      0
                                             11 BANK0     10    10      0
                         _crc_append
                     _getRegisterVal
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (3) _uart_send_len                                        4     3      1     372
                                              1 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (3) _getRegisterVal                                      10     7      3     687
                                              1 COMMON    10     7      3
 ---------------------------------------------------------------------------------
 (2) _crc_append                                          11     7      4    1579
                                              0 BANK0     11     7      4
                            _crc_sum
 ---------------------------------------------------------------------------------
 (2) _crc_verify                                           8     4      4    1498
                                              0 BANK0      8     4      4
                            _crc_sum
                      _m_mem_cpy_len
 ---------------------------------------------------------------------------------
 (3) _m_mem_cpy_len                                        7     1      6     409
                                              1 COMMON     7     1      6
 ---------------------------------------------------------------------------------
 (3) _crc_sum                                             12     8      4     555
                                              1 COMMON    10     6      4
 ---------------------------------------------------------------------------------
 (1) _calc_temp_rs                                        12     8      4    3072
                                              5 BANK0     12     8      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) _calc_temp_rc                                        16    12      4    3140
                                              5 BANK0     16    12      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) _calc_rs_lo_avg                                       9     7      2    1181
                                              9 COMMON     2     0      2
                                              5 BANK0      7     7      0
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     776
                                              1 COMMON     8     0      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _calc_expect_vout_adc_value                          36    34      2    5197
                                             18 BANK0     14    12      2
                                              0 BANK4     21    21      0
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8    2089
                                              1 COMMON     8     0      8
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8    2121
                                              4 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _adc_sample                                           9     7      2     894
                                              3 COMMON     9     7      2
                           _adc_init
                       _fvr_set_gain
 ---------------------------------------------------------------------------------
 (2) _fvr_set_gain                                         2     2      0      69
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _adc_init                                             2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      98
                    _ADC1_Initialize
                  _EUSART_Initialize
                     _FVR_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM1_Initialize
                    _PWM2_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0      75
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR2_SetInterruptHandler                             2     0      2      75
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _ADC1_Initialize
     _EUSART_Initialize
     _FVR_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM1_Initialize
     _PWM2_Initialize
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
       _TMR2_StartTimer
     _WDT_Initialize
   _adc_sample
     _adc_init
     _fvr_set_gain
   _calc_expect_vout_adc_value
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _calc_rs_lo_avg
     ___lldiv
   _calc_temp_rc
     ___lldiv
     ___lmul
   _calc_temp_rs
     ___lldiv
     ___lmul
   _m_mem_cpy_len
   _modbus_response_process
     _crc_verify
       _crc_sum
       _m_mem_cpy_len
     _modbus_response_command
       _crc_append
         _crc_sum
       _getRegisterVal
       _uart_send_len
     _modbus_response_illgeal_function
       _crc_append
         _crc_sum
       _uart_send_len
     _modbus_response_write_single_register
       _crc_append
         _crc_sum
       _sys_data_save
         _crc_append
           _crc_sum
         _my_flash_read_system_erase
           _FLASH_EraseBlock
         _my_flash_system_write
       _uart_send_len
   _pid_pwm1_idrv_b_b
     ___aldiv
       ___lmul (ARG)
     ___lmul
     _set_idrv_pwm1_duty
       _get_idrv_pwm1_duty
   _pid_pwm1_idrv_run
     ___aldiv
       ___lmul (ARG)
     ___lmul
     _set_idrv_pwm1_duty
       _get_idrv_pwm1_duty
   _pid_pwm2_vout_run
     ___awdiv
     ___lwdiv
     _set_vout_pwm2_duty
       _get_vout_pwm2_duty
   _set_vout_pwm2_duty
     _get_vout_pwm2_duty
   _sys_data_init
     ___wmul
     _crc_append
       _crc_sum
     _crc_verify
       _crc_sum
       _m_mem_cpy_len
     _my_flash_read_system_erase
       _FLASH_EraseBlock
     _my_flash_system_read
     _my_flash_system_write
   _sys_data_save
     _crc_append
       _crc_sum
     _my_flash_read_system_erase
       _FLASH_EraseBlock
     _my_flash_system_write
   _uart_received_start

 _INTERRUPT_InterruptManager (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3E0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     2A      46       5       87.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      40       9       80.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      40      11       80.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50     15      15      13       26.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     138      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              14      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           20      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     138      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Mon Nov 19 22:33:56 2018

              __end_of_TMR2_SetInterruptHandler 07CF                                               pc 0002  
                  ??_my_flash_read_system_erase 0074                                     __CFG_CP$OFF 0000  
                                            PL2 0BB2                                              PL4 0BC3  
                                            PL6 0F9F                                              PL8 0BC7  
                                  ___awdiv@sign 0076                          __end_of_FVR_Initialize 020B  
                           ___wmul@multiplicand 0073                                             PL10 0742  
                                           PL20 0FC9                                             PL12 0FB3  
                                           PL30 076E                                             PL22 0765  
                                           PL14 0755                                             PL40 0FDD  
                                           PL32 0776                                             PL24 0A79  
                                           PL16 0FBB                                             PL50 0FE4  
                                           PL42 0785                                             PL34 0D70  
                                           PL26 0FD1                                             PL18 075E  
                                           PL60 0FFB                                             PL52 0FEA  
                                           PL44 078C                                             PL36 0FD7  
                                           PL28 0A82                                             PL54 0FF0  
                                           PL46 0792                                             PL38 077E  
                                   __CFG_LVP$ON 0000                                             PL56 079E  
                                           PL48 0798                                             PL58 0FF6  
                                           l606 01D4                                             l619 037C  
                                           l643 055B                                             l581 0298  
                                           l493 0F63                                             l654 052F  
                                           l663 0A5D                                             l488 0F5B  
                                           l497 0F71                                             l673 08A0  
                                           l587 027C                                             l676 08C7  
                                           l799 0F8A                                             _GIE 005F  
                                           _PR2 001B                                             _bbu 00D6  
                                           _err 00A0                                 _TMR2_Initialize 07BF  
                                  __CFG_BORV$LO 0000                                             wreg 0009  
                          ??_get_vout_pwm2_duty 0073                            ??_set_vout_pwm2_duty 0075  
                               ??_uart_send_len 0072                                            S4512 0800  
                                          S4514 07D2                                            l1113 05CD  
                                 calc_temp_rc@x 002D                                   calc_temp_rc@y 0031  
                                          l1082 0CA7                                            l1157 056C  
                                          l1085 0CB2                                            l3040 062F  
                                          l3104 0CD0                                            l3050 0942  
                                          l3106 0CF5                                            l3036 07B1  
                                          l4004 0F07                                            l4110 057B  
                                          l3064 0293                                            l4120 058E  
                                          l4024 0F3C                                            l3410 093D  
                                          l4132 05B1                                            l4060 0DD1  
                                          l2700 0722                                            l4028 0F42  
                                          l3332 08F0                                            l3252 0C4F  
                                          l4150 0694                                            l4230 04FE  
                                          l3350 090C                                            l3342 08FD  
                                          l3326 08E7                                            l3406 0939  
                                          l3440 01CD                                            l4136 05BF  
                                          l4128 05AB                                            l4152 06A0  
                                          l4072 0DD2                                            l4208 03E3  
                                          l3600 0890                                            l3256 0C55  
                                          l3450 01ED                                            l4330 0AD5  
                                          l4322 0ACB                                            l4314 0AB8  
                                          l4154 06A6                                            l4074 0DF5  
                                          l3354 0910                                            l4092 05D8  
                                          l4308 0A8C                                            l3380 0620  
                                          l3372 0603                                            l2812 0D17  
                                          l4228 04F4                                            l4420 00C3  
                                          l4342 0B25                                            l4174 036A  
                                          l2902 0EC2                                            l2814 0D6E  
                                          l4190 03B5                                            l4182 039E  
                                          l4270 0A49                                            l3358 0918  
                                          l3614 08D7                                            l2824 07CF  
                                          l3448 01CE                                            l4352 0BAA  
                                          l3384 0626                                            l4176 0376  
                                          l2920 06B6                                            l2760 0CF7  
                                          l4184 039F                                            l4272 0A58  
                                          l4194 03BC                                            l4418 00C1  
                                          l4284 02A0                                            l2860 0E2E  
                                          l2836 0F5F                                            l2772 0D12  
                                          l4196 03CA                                            l4188 03A7  
                                          l4268 0A43                                            l4428 00F1  
                                          l2870 0E5C                                            l2862 0E41  
                                          l2790 0D42                                            l4390 0D83  
                                          l3398 092A                                            l4470 01B8  
                                          l2880 0E85                                            l2872 0E64  
                                          l2864 0E46                                            l2856 0E1A  
                                          l2784 0D26                                            l4368 0BF3  
                                          l4448 0176                                            l4456 019A  
                                          l3930 0CC0                                            l3922 0CB0  
                                          l2882 0E8D                                            l2874 0E6C  
                                          l2866 0E4E                                            l2858 0E21  
                                          l2890 0EA5                                            l4394 0D9C  
                                          l2884 0E95                                            l2876 0E74  
                                          l2868 0E56                                            l2892 0EB2  
                                          l2788 0D40                                            l4396 0D9E  
                                          l4468 01B6                                            l2886 0E9D  
                                          l2878 0E7C                                            l2798 0D51  
                                          l4398 0DA0                                            l3928 0C94  
                                          l3984 0ED4                                            l3994 0F3A  
                                          l3996 0EF2                                   calc_temp_rs@x 0029  
                                 calc_temp_rs@y 002D                         __end_of_PWM1_Initialize 0261  
                                          u2105 089A                                            u2115 08C0  
                                          u1420 0247                                            u1325 0D1D  
                                          u2125 08D1                                            _LATA 010C  
                                          _LATC 010E                                            u1275 0D07  
                                          u1445 063B                                            u1295 0D34  
                                          u1455 094E                                            u2095 088A  
                                          u2505 0C8C                                            u1815 0905  
                                          u1495 0CD6                                            u3097 01C5  
                                          u1905 0932                                            u2725 05A0  
                                          u2495 0C9A                                            u1945 01E2  
                                          u2905 0AC3                                            u1865 0615  
                                          u2833 051D                                            u2843 054A  
                                          u2945 0B1B                                            u2885 0AAB  
                                 _m_mem_cpy_len 06B6                                            _TMR2 001A  
                                          _WPUA 020C                                            _WPUC 020E  
                                  __CFG_WRT$OFF 0000                                            _bbt0 00C6  
                                          _bbt1 00CA                                            _bbta 00CE  
                                          _bbku 00C2                                            _bbtu 00D2  
                                          _main 00A8  modbus_response_write_single_register@startAddr 0033  
                                          _pidU 00E8             __size_of_my_flash_read_system_erase 0017  
                                          fsr0h 0005                                            fsr1h 0007  
                                          fsr0l 0004                                            indf0 0000  
                                          indf1 0001                                            fsr1l 0006  
                                          btemp 007E                                   __CFG_BOREN$ON 0000  
                                          ltemp 007E                                            start 0050  
                               _pwm2DutyForVout 0064                                            ttemp 007E  
                                          wtemp 007E                       ??_modbus_response_command 007B  
                                 __CFG_MCLRE$ON 0000                             pid_pwm1_idrv_run@ei 003A  
                           pid_pwm1_idrv_run@ep 0036                         __end_of_PWM2_Initialize 0278  
                     ??_modbus_response_process 007C                                 ?_FVR_Initialize 0070  
                __size_of_OSCILLATOR_Initialize 0005                   __end_of_OSCILLATOR_Initialize 0210  
                               __end_of___aldiv 05C8                                           ?_main 0070  
                               __end_of___awdiv 091D                                   __CFG_WDTE$OFF 0000  
                               __end_of___lldiv 062F                                 ___awdiv@divisor 0071  
                                         _T2CON 001C                                 __end_of___lwdiv 0942  
                                         i1l287 004E                                 ___awdiv@counter 0075  
                                         _RCREG 0199                                           _RCSTA 019D  
                                         _TRISA 008C                                           _TRISC 008E  
                                         _TXREG 019A                                           _TXSTA 019E  
              modbus_response_command@startAddr 002D                             ___lmul@multiplicand 0075  
                                         _PidKp 00B6                                           _PidTd 00BA  
                                         _Event 005A                                           _PidTi 00BE  
                               __end_of_crc_sum 0CC5                            pid_pwm1_idrv_b_b@t32 0032  
                                         _bbmax 00E0                                           _bbmin 00E4  
                                _WDT_Initialize 0278                                           _resRc 0060  
                                         _resRs 00EC                                  ?_m_mem_cpy_len 0071  
                                         ltemp0 007E                                           ltemp1 0082  
                                         ltemp2 0086                                           ltemp3 0080  
                    __end_of_get_idrv_pwm1_duty 0742                      __end_of_set_idrv_pwm1_duty 0644  
                                         ttemp0 007E                                           ttemp1 0081  
                                         ttemp2 0084                                           ttemp3 0087  
                                         ttemp4 007F                              crc_verify@expected 0026  
                                         status 0003                                           wtemp0 007E  
                                         wtemp1 0080                                           wtemp2 0082  
                                         wtemp3 0084                                           wtemp4 0086  
                                         wtemp5 0088                                           wtemp6 007F  
                               _TMR2_StartTimer 07CF                                   fvr_set_gain@g 0072  
            __end_of_calc_expect_vout_adc_value 0BB2                      _calc_expect_vout_adc_value 0A8A  
                          pid_pwm1_idrv_run@t32 0044                            pid_pwm1_idrv_run@t16 0042  
                               __initialization 0052                                    __end_of_main 01BA  
                         __size_of_calc_temp_rc 009D                           __size_of_calc_temp_rs 0072  
                       __end_of_TMR2_Initialize 07CE                     ?_INTERRUPT_InterruptManager 0070  
           modbus_response_illgeal_function@buf 002C                        _TMR2_SetInterruptHandler 07CE  
                                        ??_main 0048                                ??_calc_rs_lo_avg 0025  
                   modbus_response_process@rbuf 0039                   __size_of_my_flash_system_read 0032  
                   modbus_response_process@rlen 0036                                  __CFG_PLLEN$OFF 0000  
               __end_of_modbus_response_command 0E17                          __end_of_WDT_Initialize 027B  
                  my_flash_system_write@blocNum 0023                                          _ADCON0 009D  
                                        _ADCON1 009E                                          _ADCON2 009F  
                                        _ADRESH 009C                                          _ADRESL 009B  
                              ___awdiv@dividend 0073                                          _ANSELA 018C  
                                        _ANSELC 018E                 __end_of_modbus_response_process 0DA4  
                              __end_of_adc_init 028A                                ?_PWM1_Initialize 0070  
                                        _ODCONA 028C                                          _ODCONC 028E  
                                        i1l3760 0018                                          i1l3766 001E  
                                        i1l3776 0028                                          i1l3794 004B  
                                        i1l3778 002F                                          i1l3788 003D  
                                        _FVRCON 0117                                          _PMADRH 0192  
                                        _PMADRL 0191                                          _PMDATH 0194  
                                        _PMDATL 0193                                          _PMCON2 0196  
                     __size_of_FLASH_EraseBlock 0019                                          _OSCCON 0099  
                   __end_of_uart_received_start 07B1                                          _SPBRGH 019C  
                                        _SPBRGL 019B                                          _WDTCON 0097  
                                  _calc_temp_rc 02E8                                    _calc_temp_rs 0644  
                                __CFG_PWRTE$OFF 0000                                 calc_rs_lo_avg@i 002B  
                               calc_rs_lo_avg@x 0079              __end_of_my_flash_read_system_erase 0722  
                    _my_flash_read_system_erase 070B      modbus_response_write_single_register@pmdbs 0032  
                                        ___lmul 05C8                                       ??___aldiv 0079  
                                        ___wmul 0C4D                                       ??___awdiv 0075  
                                __CFG_STVREN$ON 0000                                       ??___lldiv 0079  
                                     ??___lwdiv 0075                                ?_PWM2_Initialize 0070  
                                        _pwm2Ei 004A                                ___awdiv@quotient 0077  
                      my_flash_system_write@buf 0071                        my_flash_system_write@len 0073  
                      my_flash_system_write@loc 0025                                       ??_crc_sum 0075  
                      __size_of_ADC1_Initialize 0004                                 ?_WDT_Initialize 0070  
                               ??_m_mem_cpy_len 0077                my_flash_system_write@GIEBitValue 0022  
                       __end_of_TMR2_StartTimer 07D2        TMR2_SetInterruptHandler@InterruptHandler 0071  
               modbus_response_command@tempData 0033        __end_of_modbus_response_illgeal_function 0F9F  
     __size_of_modbus_response_illgeal_function 002A               ?_modbus_response_illgeal_function 002B  
            ??_modbus_response_illgeal_function 007B                _modbus_response_illgeal_function 0F75  
                                 ?_fvr_set_gain 0070                                  fvr_set_gain@t8 0071  
                             _SYSTEM_Initialize 01F2                         __end_of__initialization 00A5  
                        __size_of_sys_data_init 0082                           _my_flash_system_write 0CF7  
                            ?_SYSTEM_Initialize 0070                          __size_of_sys_data_save 000B  
                            getRegisterVal@addr 0071                                  __pcstackCOMMON 0070  
                                  __pidataBANK0 084B                                    __pidataBANK1 07F0  
                           ??_SYSTEM_Initialize 0073                                      _adc_sample 01BA  
                              ?_TMR2_Initialize 0070                                      __end_ofPL2 0BC3  
                                    __end_ofPL4 0BC7                                      __end_ofPL6 0FB3  
                                    __end_ofPL8 0BCB                                  _OPTION_REGbits 0095  
      modbus_response_write_single_register@t16 002F                               crc_append@message 0020  
                        getRegisterVal@tempAddr 007A                          my_flash_system_write@i 0029  
                        my_flash_system_write@j 0020                          getRegisterVal@tempData 0073  
                     __end_of_SYSTEM_Initialize 0203                                  ??_fvr_set_gain 0071  
                                    __pbssBANK0 004A                                      __pbssBANK1 00A0  
                                    __pbssBANK2 0120                                      __pbssBANK3 01A0  
                modbus_response_command@tmpAddr 002B                 my_flash_system_read@GIEBitValue 0077  
                                    adc_init@ch 0072                                ??_FVR_Initialize 0071  
                                    __pmaintext 00A8                      modbus_response_command@len 0031  
                                       ?___lmul 0071                                         ?___wmul 0071  
                               __CFG_PPS1WAY$ON 0000                                      __pintentry 0004  
                  ??_calc_expect_vout_adc_value 0034                                         _BAUDCON 019F  
                                ___lmul@product 0020                                      _crc_append 06DC  
                                     ?_adc_init 0070                                    adc_sample@ch 0076  
                                 _sys_data_init 0BCB                                   _sys_data_save 06D1  
                                    _crc_verify 0C62                                   _eusartRxCount 007C  
                   __size_of_get_vout_pwm2_duty 0007                     __size_of_set_vout_pwm2_duty 0015  
                                       _PWM1DCH 0D94                                         _PWM1DCL 0D93  
                                       _PWM2DCH 0DA4                                         _PWM2DCL 0DA3  
                                       _OSCTUNE 0098                                         _PWM1CON 0D9B  
                                       _PWM2CON 0DAB                                         _PWM1OFH 0D98  
                                       _PWM1OFL 0D97                                         _PWM2OFH 0DA8  
                                       _PWM1PHH 0D92                                         _PWM2OFL 0DA7  
                                       _PWM1PHL 0D91                                         _PWM2PHH 0DA2  
                                       _PWM2PHL 0DA1                                         _PWM1PRH 0D96  
                                       _PWM1PRL 0D95                                         _PWM2PRH 0DA6  
                                       _PWM2PRL 0DA5           modbus_response_illgeal_function@pmdbs 002D  
                                       _PPSLOCK 0E0F                               ??_ADC1_Initialize 0071  
                              ?_TMR2_StartTimer 0070                          set_idrv_pwm1_duty@duty 0073  
                         __end_of_uart_send_len 0F75                                _FLASH_EraseBlock 0722  
                        ?_my_flash_system_write 0071                         __size_of_getRegisterVal 00AF  
                   ?_calc_expect_vout_adc_value 0032     modbus_response_write_single_register@fiSave 0031  
                    ??_TMR2_SetInterruptHandler 0073                                         ___aldiv 055C  
                                       ___awdiv 08DD                                 __size_of___lmul 0028  
                                       ___lldiv 05F0                                 __size_of___wmul 0015  
                            _get_idrv_pwm1_duty 073B                              _set_idrv_pwm1_duty 062F  
                                       ___lwdiv 091D                                     ?_adc_sample 0073  
                                adc_sample@gfvr 0073                                      _pidTestNum 005D  
                                ?_sys_data_init 0070                                  ?_sys_data_save 0070  
                                    ??_adc_init 0071                                         __ptext1 07A3  
                                       __ptext2 0BCB                                         __ptext3 0CC5  
                                       __ptext4 0C4D                                         __ptext5 0869  
                                       __ptext6 0942                                         __ptext7 0957  
                                       __ptext8 091D                                         __ptext9 08DD  
                                       _crc_sum 0C8F                                         _pidBbSm 005C  
                           ?_get_idrv_pwm1_duty 0071                             ?_set_idrv_pwm1_duty 0073  
                         _OSCILLATOR_Initialize 020B                                       _T2CONbits 001C  
                                    _rsLoAvgBuf 00AC                                         _rsLoAvg 00DE  
                              ___aldiv@dividend 0028                        ??_PIN_MANAGER_Initialize 0071  
                                       _sysData 2384                      __size_of_SYSTEM_Initialize 0011  
                                       clrloop0 085E                            end_of_initialization 00A5  
                                       init_ram 0851                        ?_modbus_response_command 0070  
                                       initloop 0852                    __end_of_my_flash_system_read 0CF7  
                          ??_get_idrv_pwm1_duty 0073                             pid_pwm2_vout_run@ei 0020  
                          ??_set_idrv_pwm1_duty 0075                               _EUSART_Initialize 07B1  
                               ___lldiv@divisor 0071                                      _voExpectMv 0058  
                               ___lldiv@counter 0024                              ?_EUSART_Initialize 0070  
                      ?_modbus_response_process 0036                                       _RCSTAbits 019D  
                   ?_my_flash_read_system_erase 0070                                ___aldiv@quotient 002E  
                                     _PWM1LDCON 0D9F                                       _PWM2LDCON 0DAF  
                                     _PWM1OFCON 0DA0                                       _PWM2OFCON 0DB0  
                          __end_of_fvr_set_gain 029B                                     ?_crc_append 0020  
                                    _subTickerX 005E                             ??_EUSART_Initialize 0071  
                              ??_WDT_Initialize 0071                                     ?_crc_verify 0020  
                              __CFG_FOSC$INTOSC 0000                                      crc_sum@crc 0079  
                                    crc_sum@buf 0071                                      crc_sum@len 0073  
                                     _RXPPSbits 0E15                             __size_of_adc_sample 0038  
                     __end_of_EUSART_Initialize 07BF                                    _globalTicker 00DA  
                                     _TXSTAbits 019E                        __size_of_PWM1_Initialize 0018  
                  __size_of_uart_received_start 000E                    _TMR2_DefaultInterruptHandler 0000  
                               ??_sys_data_init 002B                                 ??_sys_data_save 007B  
                                __end_of___lmul 05F0                                  __end_of___wmul 0C62  
                              _voExpectAdcValue 0056                                  _rtAdcValueRcHi 004C  
                                _rtAdcValueRcLo 004E                                  _rtAdcValueRsHi 0050  
                                _rtAdcValueVoFb 0054                                  _rtAdcValueRsLo 0052  
                        ?_OSCILLATOR_Initialize 0070                               crc_verify@message 0020  
                                   __end_ofPL10 0755                                     __end_ofPL20 0FD1  
                                   __end_ofPL12 0FBB                                     __end_ofPL30 0776  
                                   __end_ofPL22 076E                                     __end_ofPL14 075E  
                                   __end_ofPL40 0FE4                                     __end_ofPL32 077E  
                                   __end_ofPL24 0A82                                     __end_ofPL16 0FC9  
                                   __end_ofPL50 0FEA                                     __end_ofPL42 078C  
                                   __end_ofPL34 0D75                                     __end_ofPL26 0FD7  
                                   __end_ofPL18 0765                                     __end_ofPL60 1000  
                                   __end_ofPL52 0FF0                                     __end_ofPL44 0792  
                                   __end_ofPL36 0FDD                                     __end_ofPL28 0A8A  
                                   __end_ofPL54 0FF6                                     __end_ofPL46 0798  
                                   __end_ofPL38 0785                                     __end_ofPL56 07A3  
                                   __end_ofPL48 079E                                     __end_ofPL58 0FFB  
                           start_initialization 0052                        __size_of_PWM2_Initialize 0017  
               __size_of_PIN_MANAGER_Initialize 0039                         my_flash_system_read@buf 0071  
                       my_flash_system_read@len 0073                           __end_of_m_mem_cpy_len 06D1  
                                _getRegisterVal 0E17                         __size_of_calc_rs_lo_avg 004D  
                           __size_of_crc_append 002F                             __size_of_crc_verify 002D  
                              __CFG_LPBOREN$OFF 0000       modbus_response_write_single_register@rbuf 0035  
                                      ??___lmul 0079                                        ??___wmul 0075  
                                   __pdataBANK0 0060                                     __pdataBANK1 00E0  
                   FLASH_EraseBlock@GIEBitValue 0073                                 _ADC1_Initialize 0203  
                      __end_of_FLASH_EraseBlock 073B                            _my_flash_system_read 0CC5  
                                   __pbssBIGRAM 2384                               __size_of_adc_init 000F  
                                   __pbssCOMMON 007C                                       ___latbits 0002  
                                 __pcstackBANK0 0020                                   __pcstackBANK4 0220  
                      __size_of_TMR2_Initialize 000F                         ??_my_flash_system_write 0075  
                        __end_of_getRegisterVal 0EC6                           my_flash_system_read@i 0078  
                    __size_of_EUSART_Initialize 000E         modbus_response_illgeal_function@errcode 002B  
                         __size_of_fvr_set_gain 0011                                ___lwdiv@dividend 0073  
                        _PIN_MANAGER_Initialize 0210                     modbus_response_command@rbuf 0032  
                                      ?___aldiv 0024                                        ?___awdiv 0071  
                                      ?___lldiv 0071                                    ??_adc_sample 0075  
                                   adc_sample@i 0079                                        ?___lwdiv 0071  
                             ??_PWM1_Initialize 0071                    ??_INTERRUPT_InterruptManager 0070  
                         set_idrv_pwm1_duty@t16 0075                                       __pswtext1 0800  
                                     __pswtext2 07D2                                        ?_crc_sum 0071  
                 my_flash_system_read@flashAddr 007A                      __end_of_get_vout_pwm2_duty 095E  
                         ?_my_flash_system_read 0071                      __end_of_set_vout_pwm2_duty 0957  
                              uart_send_len@buf 0073                                uart_send_len@len 0071  
                                 adc_sample@t16 007A                                ___lwdiv@quotient 0075  
                                 adc_sample@ret 0077                                   adc_sample@num 0074  
                               ?_getRegisterVal 0071                                    _fvr_set_gain 028A  
                                _eusartRxBuffer 0120                                       _modbusBuf 01A0  
                               ___aldiv@divisor 0024                               ??_PWM2_Initialize 0071  
                            __end_of_adc_sample 01F2                                 ___aldiv@counter 002C  
                                ___wmul@product 0075                               _pid_pwm1_idrv_b_b 0385  
                             _pid_pwm1_idrv_run 095E                                       clear_ram0 085D  
                                m_mem_cpy_len@d 0071                                  m_mem_cpy_len@s 0073  
                                 ?_calc_temp_rc 0025                                   ?_calc_temp_rs 0025  
                                      _PIE1bits 0091                        __size_of_TMR2_StartTimer 0003  
                        set_vout_pwm2_duty@duty 0073                              ?_pid_pwm1_idrv_b_b 0070  
           __size_of_INTERRUPT_InterruptManager 004C                              ?_pid_pwm1_idrv_run 0070  
                       __end_of_ADC1_Initialize 0207                                        _PIR1bits 0011  
                     FLASH_EraseBlock@startAddr 0071                                        _PWM1INTE 0D9C  
                                      _PWM1INTF 0D9D                                        _PWM2INTE 0DAC  
                                      _PWM2INTF 0DAD                                        _PWM1TMRH 0D9A  
                                      _PWM1TMRL 0D99                                        _PWM2TMRH 0DAA  
                                      _PWM2TMRL 0DA9                             ??_pid_pwm1_idrv_b_b 0079  
                                  ??_crc_append 0024                __size_of_modbus_response_command 0073  
                           ??_pid_pwm1_idrv_run 0032                          __size_of_uart_send_len 001E  
                                    _ADCON0bits 009D                               ___wmul@multiplier 0071  
                                  ??_crc_verify 007B                         __size_of_FVR_Initialize 0004  
              __size_of_modbus_response_process 002F               __size_of_TMR2_SetInterruptHandler 0001  
                     ?_TMR2_SetInterruptHandler 0071                             _uart_received_start 07A3  
                             _pid_pwm2_vout_run 0869                               ___lmul@multiplier 0071  
                              crc_verify@crccal 0024                       __end_of_pid_pwm1_idrv_b_b 055C  
                                _calc_rs_lo_avg 029B                              ?_pid_pwm2_vout_run 0070  
                     __end_of_pid_pwm1_idrv_run 0A79                               ??_TMR2_Initialize 0073  
                                ??_calc_temp_rc 0029                                  ??_calc_temp_rs 0079  
                            __end_of_crc_append 070B                               calc_rs_lo_avg@t32 0027  
                   __size_of_get_idrv_pwm1_duty 0007                     __size_of_set_idrv_pwm1_duty 0015  
                           ??_pid_pwm2_vout_run 0079                              __end_of_crc_verify 0C8F  
                          ?_uart_received_start 0070                         ??_OSCILLATOR_Initialize 0071  
                              __size_of___aldiv 006C                                __size_of___awdiv 0040  
                              __size_of___lldiv 003F                                __size_of___lwdiv 0025  
                        ??_my_flash_system_read 0075                                        _adc_init 027B  
                              __size_of_crc_sum 0036                             _eusartRxIdleTime_ms 005B  
                     __end_of_pid_pwm2_vout_run 08DD                                   crc_append@crc 0029  
                              sys_data_init@ret 0031                                 ___lwdiv@divisor 0071  
                               ___lwdiv@counter 0077                                        __ptext10 095E  
                                      __ptext11 0385                                        __ptext20 0F75  
                                      __ptext12 062F                                        __ptext21 0DA4  
                                      __ptext13 073B                                        __ptext30 029B  
                                      __ptext22 0F57                                        __ptext14 0D75  
                                      __ptext31 05F0                                        __ptext23 0E17  
                                      __ptext15 0EC6                                        __ptext40 07BF  
                                      __ptext32 0A8A                                        __ptext24 06DC  
                                      __ptext16 06D1                                        __ptext41 07CF  
                                      __ptext33 05C8                                        __ptext25 0C62  
                                      __ptext17 0CF7                                        __ptext42 07CE  
                                      __ptext34 055C                                        __ptext26 06B6  
                                      __ptext18 070B                                        __ptext43 0261  
                                      __ptext35 01BA                                        __ptext27 0C8F  
                                      __ptext19 0722                                        __ptext44 0249  
                                      __ptext36 028A                                        __ptext28 0644  
                                      __ptext45 0210                                        __ptext37 027B  
                                      __ptext29 02E8                                        __ptext46 020B  
                                      __ptext38 01F2                                        __ptext47 0207  
                                      __ptext39 0278                                        __ptext48 07B1  
                                      __ptext49 0203                          __end_of_calc_rs_lo_avg 02E8  
                                 _uart_send_len 0F57                                   __size_of_main 0112  
                                 _subTickerX_1s 005F                           set_vout_pwm2_duty@t16 0075  
                                    _RA4PPSbits 0E94                           ??_uart_received_start 0071  
                                    _RA5PPSbits 0E95                                ?_ADC1_Initialize 0070  
                my_flash_system_write@flashAddr 0027                                        int$flags 007E  
                                      crc_sum@i 0077                                        crc_sum@j 0075  
                                    _RC5PPSbits 0EA5   __end_of_modbus_response_write_single_register 0F57  
__size_of_modbus_response_write_single_register 0091         ??_modbus_response_write_single_register 002B  
        ?_modbus_response_write_single_register 0070           _modbus_response_write_single_register 0EC6  
                             ??_TMR2_StartTimer 0071              __end_of_INTERRUPT_InterruptManager 0050  
                    _INTERRUPT_InterruptManager 0004                           __end_of_sys_data_init 0C4D  
                         __end_of_sys_data_save 06DC                               ?_FLASH_EraseBlock 0071  
                 calc_expect_vout_adc_value@t32 0230                     PIN_MANAGER_Initialize@state 0071  
                      modbus_response_command@i 002F                              ??_FLASH_EraseBlock 0073  
                                    _INTCONbits 000B                                     _PWM1CONbits 0D9B  
                              m_mem_cpy_len@len 0075                                      _FVRCONbits 0117  
                                   _PWM2CONbits 0DAB                    INTERRUPT_InterruptManager@t8 0070  
                               ?_calc_rs_lo_avg 0079                    modbus_response_process@pmdbs 0038  
                       __size_of_WDT_Initialize 0003                                  ?_uart_send_len 0071  
                                      intlevel1 0000                  __size_of_my_flash_system_write 0079  
                          pid_pwm2_vout_run@t16 0022                      __size_of_pid_pwm1_idrv_b_b 01D7  
                 __end_of_my_flash_system_write 0D70                      __size_of_pid_pwm1_idrv_run 011B  
                                    _PMCON1bits 0195                                ___lldiv@dividend 0075  
                       ?_PIN_MANAGER_Initialize 0070                                  uart_send_len@i 0074  
                             __CFG_CLKOUTEN$OFF 0000                                     _PPSLOCKbits 0E0F  
                               _PWM1_Initialize 0249                    modbus_response_command@pmdbs 0030  
                       _modbus_response_command 0DA4                    calc_expect_vout_adc_value@x0 022C  
                  calc_expect_vout_adc_value@x1 0224                    calc_expect_vout_adc_value@y0 0228  
                  calc_expect_vout_adc_value@y1 0220                                      _PWM1CLKCON 0D9E  
                                    _PWM2CLKCON 0DAE                          __size_of_m_mem_cpy_len 001B  
                                _FVR_Initialize 0207                         _modbus_response_process 0D75  
                                sys_data_init@i 0033                                     crc_append@n 0022  
                          __end_of_calc_temp_rc 0385                            __end_of_calc_temp_rs 06B6  
                              ___lldiv@quotient 0020                                ??_getRegisterVal 0074  
                               _PWM2_Initialize 0261                      __size_of_pid_pwm2_vout_run 0074  
                                  ___aldiv@sign 002D                     calc_expect_vout_adc_value@i 0234  
                   calc_expect_vout_adc_value@x 0032             __size_of_calc_expect_vout_adc_value 0128  
                __end_of_PIN_MANAGER_Initialize 0249                              _get_vout_pwm2_duty 0957  
                            _set_vout_pwm2_duty 0942                                     crc_verify@n 0022  
                           ?_get_vout_pwm2_duty 0071                             ?_set_vout_pwm2_duty 0073  
