

Microchip Technology PIC PRO Macro Assembler V1.37 build -260352376 
                                                                                               Sat Nov 17 12:16:00 2018

Microchip Technology Omniscient Code Generator v1.37 (PRO mode) build 201603110536
     1                           	processor	16F1575
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text14,local,class=CODE,merge=1,delta=2
    22                           	psect	swtext1,local,class=CONST,delta=2
    23                           	psect	text25,local,class=CODE,merge=1,delta=2
    24                           	psect	text26,local,class=CODE,merge=1,delta=2
    25                           	psect	text27,local,class=CODE,merge=1,delta=2
    26                           	psect	text30,local,class=CODE,merge=1,delta=2
    27                           	psect	intentry,global,class=CODE,delta=2
    28                           	psect	pa_nodes,global,class=CODE,delta=2
    29                           	dabs	1,0x7E,2
    30  0000                     	;# 
    31  0001                     	;# 
    32  0002                     	;# 
    33  0003                     	;# 
    34  0004                     	;# 
    35  0005                     	;# 
    36  0006                     	;# 
    37  0007                     	;# 
    38  0008                     	;# 
    39  0009                     	;# 
    40  000A                     	;# 
    41  000B                     	;# 
    42  000C                     	;# 
    43  000E                     	;# 
    44  0011                     	;# 
    45  0012                     	;# 
    46  0013                     	;# 
    47  0015                     	;# 
    48  0016                     	;# 
    49  0016                     	;# 
    50  0017                     	;# 
    51  0018                     	;# 
    52  0019                     	;# 
    53  001A                     	;# 
    54  001B                     	;# 
    55  001C                     	;# 
    56  008C                     	;# 
    57  008E                     	;# 
    58  0091                     	;# 
    59  0092                     	;# 
    60  0093                     	;# 
    61  0095                     	;# 
    62  0096                     	;# 
    63  0097                     	;# 
    64  0098                     	;# 
    65  0099                     	;# 
    66  009A                     	;# 
    67  009B                     	;# 
    68  009B                     	;# 
    69  009C                     	;# 
    70  009D                     	;# 
    71  009E                     	;# 
    72  009F                     	;# 
    73  010C                     	;# 
    74  010E                     	;# 
    75  0111                     	;# 
    76  0112                     	;# 
    77  0113                     	;# 
    78  0114                     	;# 
    79  0115                     	;# 
    80  0116                     	;# 
    81  0117                     	;# 
    82  0118                     	;# 
    83  0119                     	;# 
    84  018C                     	;# 
    85  018E                     	;# 
    86  0191                     	;# 
    87  0191                     	;# 
    88  0192                     	;# 
    89  0193                     	;# 
    90  0193                     	;# 
    91  0194                     	;# 
    92  0195                     	;# 
    93  0196                     	;# 
    94  0197                     	;# 
    95  0199                     	;# 
    96  019A                     	;# 
    97  019B                     	;# 
    98  019B                     	;# 
    99  019C                     	;# 
   100  019D                     	;# 
   101  019E                     	;# 
   102  019F                     	;# 
   103  020C                     	;# 
   104  020E                     	;# 
   105  028C                     	;# 
   106  028E                     	;# 
   107  030C                     	;# 
   108  030E                     	;# 
   109  038C                     	;# 
   110  038E                     	;# 
   111  0391                     	;# 
   112  0392                     	;# 
   113  0393                     	;# 
   114  0397                     	;# 
   115  0398                     	;# 
   116  0399                     	;# 
   117  0691                     	;# 
   118  0692                     	;# 
   119  0693                     	;# 
   120  0694                     	;# 
   121  0695                     	;# 
   122  0D8E                     	;# 
   123  0D8F                     	;# 
   124  0D90                     	;# 
   125  0D91                     	;# 
   126  0D91                     	;# 
   127  0D92                     	;# 
   128  0D93                     	;# 
   129  0D93                     	;# 
   130  0D94                     	;# 
   131  0D95                     	;# 
   132  0D95                     	;# 
   133  0D96                     	;# 
   134  0D97                     	;# 
   135  0D97                     	;# 
   136  0D98                     	;# 
   137  0D99                     	;# 
   138  0D99                     	;# 
   139  0D9A                     	;# 
   140  0D9B                     	;# 
   141  0D9C                     	;# 
   142  0D9C                     	;# 
   143  0D9D                     	;# 
   144  0D9D                     	;# 
   145  0D9E                     	;# 
   146  0D9F                     	;# 
   147  0DA0                     	;# 
   148  0DA1                     	;# 
   149  0DA1                     	;# 
   150  0DA2                     	;# 
   151  0DA3                     	;# 
   152  0DA3                     	;# 
   153  0DA4                     	;# 
   154  0DA5                     	;# 
   155  0DA5                     	;# 
   156  0DA6                     	;# 
   157  0DA7                     	;# 
   158  0DA7                     	;# 
   159  0DA8                     	;# 
   160  0DA9                     	;# 
   161  0DA9                     	;# 
   162  0DAA                     	;# 
   163  0DAB                     	;# 
   164  0DAC                     	;# 
   165  0DAC                     	;# 
   166  0DAD                     	;# 
   167  0DAD                     	;# 
   168  0DAE                     	;# 
   169  0DAF                     	;# 
   170  0DB0                     	;# 
   171  0DB1                     	;# 
   172  0DB1                     	;# 
   173  0DB2                     	;# 
   174  0DB3                     	;# 
   175  0DB3                     	;# 
   176  0DB4                     	;# 
   177  0DB5                     	;# 
   178  0DB5                     	;# 
   179  0DB6                     	;# 
   180  0DB7                     	;# 
   181  0DB7                     	;# 
   182  0DB8                     	;# 
   183  0DB9                     	;# 
   184  0DB9                     	;# 
   185  0DBA                     	;# 
   186  0DBB                     	;# 
   187  0DBC                     	;# 
   188  0DBC                     	;# 
   189  0DBD                     	;# 
   190  0DBD                     	;# 
   191  0DBE                     	;# 
   192  0DBF                     	;# 
   193  0DC0                     	;# 
   194  0DC1                     	;# 
   195  0DC1                     	;# 
   196  0DC2                     	;# 
   197  0DC3                     	;# 
   198  0DC3                     	;# 
   199  0DC4                     	;# 
   200  0DC5                     	;# 
   201  0DC5                     	;# 
   202  0DC6                     	;# 
   203  0DC7                     	;# 
   204  0DC7                     	;# 
   205  0DC8                     	;# 
   206  0DC9                     	;# 
   207  0DC9                     	;# 
   208  0DCA                     	;# 
   209  0DCB                     	;# 
   210  0DCC                     	;# 
   211  0DCC                     	;# 
   212  0DCD                     	;# 
   213  0DCD                     	;# 
   214  0DCE                     	;# 
   215  0DCF                     	;# 
   216  0DD0                     	;# 
   217  0E0F                     	;# 
   218  0E10                     	;# 
   219  0E11                     	;# 
   220  0E12                     	;# 
   221  0E13                     	;# 
   222  0E14                     	;# 
   223  0E15                     	;# 
   224  0E16                     	;# 
   225  0E17                     	;# 
   226  0E90                     	;# 
   227  0E91                     	;# 
   228  0E92                     	;# 
   229  0E94                     	;# 
   230  0E95                     	;# 
   231  0EA0                     	;# 
   232  0EA1                     	;# 
   233  0EA2                     	;# 
   234  0EA3                     	;# 
   235  0EA4                     	;# 
   236  0EA5                     	;# 
   237  0FE4                     	;# 
   238  0FE5                     	;# 
   239  0FE6                     	;# 
   240  0FE7                     	;# 
   241  0FE8                     	;# 
   242  0FE8                     	;# 
   243  0FE9                     	;# 
   244  0FEA                     	;# 
   245  0FEA                     	;# 
   246  0FEB                     	;# 
   247  0FED                     	;# 
   248  0FEE                     	;# 
   249  0FEE                     	;# 
   250  0FEF                     	;# 
   251  0000                     	;# 
   252  0001                     	;# 
   253  0002                     	;# 
   254  0003                     	;# 
   255  0004                     	;# 
   256  0005                     	;# 
   257  0006                     	;# 
   258  0007                     	;# 
   259  0008                     	;# 
   260  0009                     	;# 
   261  000A                     	;# 
   262  000B                     	;# 
   263  000C                     	;# 
   264  000E                     	;# 
   265  0011                     	;# 
   266  0012                     	;# 
   267  0013                     	;# 
   268  0015                     	;# 
   269  0016                     	;# 
   270  0016                     	;# 
   271  0017                     	;# 
   272  0018                     	;# 
   273  0019                     	;# 
   274  001A                     	;# 
   275  001B                     	;# 
   276  001C                     	;# 
   277  008C                     	;# 
   278  008E                     	;# 
   279  0091                     	;# 
   280  0092                     	;# 
   281  0093                     	;# 
   282  0095                     	;# 
   283  0096                     	;# 
   284  0097                     	;# 
   285  0098                     	;# 
   286  0099                     	;# 
   287  009A                     	;# 
   288  009B                     	;# 
   289  009B                     	;# 
   290  009C                     	;# 
   291  009D                     	;# 
   292  009E                     	;# 
   293  009F                     	;# 
   294  010C                     	;# 
   295  010E                     	;# 
   296  0111                     	;# 
   297  0112                     	;# 
   298  0113                     	;# 
   299  0114                     	;# 
   300  0115                     	;# 
   301  0116                     	;# 
   302  0117                     	;# 
   303  0118                     	;# 
   304  0119                     	;# 
   305  018C                     	;# 
   306  018E                     	;# 
   307  0191                     	;# 
   308  0191                     	;# 
   309  0192                     	;# 
   310  0193                     	;# 
   311  0193                     	;# 
   312  0194                     	;# 
   313  0195                     	;# 
   314  0196                     	;# 
   315  0197                     	;# 
   316  0199                     	;# 
   317  019A                     	;# 
   318  019B                     	;# 
   319  019B                     	;# 
   320  019C                     	;# 
   321  019D                     	;# 
   322  019E                     	;# 
   323  019F                     	;# 
   324  020C                     	;# 
   325  020E                     	;# 
   326  028C                     	;# 
   327  028E                     	;# 
   328  030C                     	;# 
   329  030E                     	;# 
   330  038C                     	;# 
   331  038E                     	;# 
   332  0391                     	;# 
   333  0392                     	;# 
   334  0393                     	;# 
   335  0397                     	;# 
   336  0398                     	;# 
   337  0399                     	;# 
   338  0691                     	;# 
   339  0692                     	;# 
   340  0693                     	;# 
   341  0694                     	;# 
   342  0695                     	;# 
   343  0D8E                     	;# 
   344  0D8F                     	;# 
   345  0D90                     	;# 
   346  0D91                     	;# 
   347  0D91                     	;# 
   348  0D92                     	;# 
   349  0D93                     	;# 
   350  0D93                     	;# 
   351  0D94                     	;# 
   352  0D95                     	;# 
   353  0D95                     	;# 
   354  0D96                     	;# 
   355  0D97                     	;# 
   356  0D97                     	;# 
   357  0D98                     	;# 
   358  0D99                     	;# 
   359  0D99                     	;# 
   360  0D9A                     	;# 
   361  0D9B                     	;# 
   362  0D9C                     	;# 
   363  0D9C                     	;# 
   364  0D9D                     	;# 
   365  0D9D                     	;# 
   366  0D9E                     	;# 
   367  0D9F                     	;# 
   368  0DA0                     	;# 
   369  0DA1                     	;# 
   370  0DA1                     	;# 
   371  0DA2                     	;# 
   372  0DA3                     	;# 
   373  0DA3                     	;# 
   374  0DA4                     	;# 
   375  0DA5                     	;# 
   376  0DA5                     	;# 
   377  0DA6                     	;# 
   378  0DA7                     	;# 
   379  0DA7                     	;# 
   380  0DA8                     	;# 
   381  0DA9                     	;# 
   382  0DA9                     	;# 
   383  0DAA                     	;# 
   384  0DAB                     	;# 
   385  0DAC                     	;# 
   386  0DAC                     	;# 
   387  0DAD                     	;# 
   388  0DAD                     	;# 
   389  0DAE                     	;# 
   390  0DAF                     	;# 
   391  0DB0                     	;# 
   392  0DB1                     	;# 
   393  0DB1                     	;# 
   394  0DB2                     	;# 
   395  0DB3                     	;# 
   396  0DB3                     	;# 
   397  0DB4                     	;# 
   398  0DB5                     	;# 
   399  0DB5                     	;# 
   400  0DB6                     	;# 
   401  0DB7                     	;# 
   402  0DB7                     	;# 
   403  0DB8                     	;# 
   404  0DB9                     	;# 
   405  0DB9                     	;# 
   406  0DBA                     	;# 
   407  0DBB                     	;# 
   408  0DBC                     	;# 
   409  0DBC                     	;# 
   410  0DBD                     	;# 
   411  0DBD                     	;# 
   412  0DBE                     	;# 
   413  0DBF                     	;# 
   414  0DC0                     	;# 
   415  0DC1                     	;# 
   416  0DC1                     	;# 
   417  0DC2                     	;# 
   418  0DC3                     	;# 
   419  0DC3                     	;# 
   420  0DC4                     	;# 
   421  0DC5                     	;# 
   422  0DC5                     	;# 
   423  0DC6                     	;# 
   424  0DC7                     	;# 
   425  0DC7                     	;# 
   426  0DC8                     	;# 
   427  0DC9                     	;# 
   428  0DC9                     	;# 
   429  0DCA                     	;# 
   430  0DCB                     	;# 
   431  0DCC                     	;# 
   432  0DCC                     	;# 
   433  0DCD                     	;# 
   434  0DCD                     	;# 
   435  0DCE                     	;# 
   436  0DCF                     	;# 
   437  0DD0                     	;# 
   438  0E0F                     	;# 
   439  0E10                     	;# 
   440  0E11                     	;# 
   441  0E12                     	;# 
   442  0E13                     	;# 
   443  0E14                     	;# 
   444  0E15                     	;# 
   445  0E16                     	;# 
   446  0E17                     	;# 
   447  0E90                     	;# 
   448  0E91                     	;# 
   449  0E92                     	;# 
   450  0E94                     	;# 
   451  0E95                     	;# 
   452  0EA0                     	;# 
   453  0EA1                     	;# 
   454  0EA2                     	;# 
   455  0EA3                     	;# 
   456  0EA4                     	;# 
   457  0EA5                     	;# 
   458  0FE4                     	;# 
   459  0FE5                     	;# 
   460  0FE6                     	;# 
   461  0FE7                     	;# 
   462  0FE8                     	;# 
   463  0FE8                     	;# 
   464  0FE9                     	;# 
   465  0FEA                     	;# 
   466  0FEA                     	;# 
   467  0FEB                     	;# 
   468  0FED                     	;# 
   469  0FEE                     	;# 
   470  0FEE                     	;# 
   471  0FEF                     	;# 
   472  0000                     	;# 
   473  0001                     	;# 
   474  0002                     	;# 
   475  0003                     	;# 
   476  0004                     	;# 
   477  0005                     	;# 
   478  0006                     	;# 
   479  0007                     	;# 
   480  0008                     	;# 
   481  0009                     	;# 
   482  000A                     	;# 
   483  000B                     	;# 
   484  000C                     	;# 
   485  000E                     	;# 
   486  0011                     	;# 
   487  0012                     	;# 
   488  0013                     	;# 
   489  0015                     	;# 
   490  0016                     	;# 
   491  0016                     	;# 
   492  0017                     	;# 
   493  0018                     	;# 
   494  0019                     	;# 
   495  001A                     	;# 
   496  001B                     	;# 
   497  001C                     	;# 
   498  008C                     	;# 
   499  008E                     	;# 
   500  0091                     	;# 
   501  0092                     	;# 
   502  0093                     	;# 
   503  0095                     	;# 
   504  0096                     	;# 
   505  0097                     	;# 
   506  0098                     	;# 
   507  0099                     	;# 
   508  009A                     	;# 
   509  009B                     	;# 
   510  009B                     	;# 
   511  009C                     	;# 
   512  009D                     	;# 
   513  009E                     	;# 
   514  009F                     	;# 
   515  010C                     	;# 
   516  010E                     	;# 
   517  0111                     	;# 
   518  0112                     	;# 
   519  0113                     	;# 
   520  0114                     	;# 
   521  0115                     	;# 
   522  0116                     	;# 
   523  0117                     	;# 
   524  0118                     	;# 
   525  0119                     	;# 
   526  018C                     	;# 
   527  018E                     	;# 
   528  0191                     	;# 
   529  0191                     	;# 
   530  0192                     	;# 
   531  0193                     	;# 
   532  0193                     	;# 
   533  0194                     	;# 
   534  0195                     	;# 
   535  0196                     	;# 
   536  0197                     	;# 
   537  0199                     	;# 
   538  019A                     	;# 
   539  019B                     	;# 
   540  019B                     	;# 
   541  019C                     	;# 
   542  019D                     	;# 
   543  019E                     	;# 
   544  019F                     	;# 
   545  020C                     	;# 
   546  020E                     	;# 
   547  028C                     	;# 
   548  028E                     	;# 
   549  030C                     	;# 
   550  030E                     	;# 
   551  038C                     	;# 
   552  038E                     	;# 
   553  0391                     	;# 
   554  0392                     	;# 
   555  0393                     	;# 
   556  0397                     	;# 
   557  0398                     	;# 
   558  0399                     	;# 
   559  0691                     	;# 
   560  0692                     	;# 
   561  0693                     	;# 
   562  0694                     	;# 
   563  0695                     	;# 
   564  0D8E                     	;# 
   565  0D8F                     	;# 
   566  0D90                     	;# 
   567  0D91                     	;# 
   568  0D91                     	;# 
   569  0D92                     	;# 
   570  0D93                     	;# 
   571  0D93                     	;# 
   572  0D94                     	;# 
   573  0D95                     	;# 
   574  0D95                     	;# 
   575  0D96                     	;# 
   576  0D97                     	;# 
   577  0D97                     	;# 
   578  0D98                     	;# 
   579  0D99                     	;# 
   580  0D99                     	;# 
   581  0D9A                     	;# 
   582  0D9B                     	;# 
   583  0D9C                     	;# 
   584  0D9C                     	;# 
   585  0D9D                     	;# 
   586  0D9D                     	;# 
   587  0D9E                     	;# 
   588  0D9F                     	;# 
   589  0DA0                     	;# 
   590  0DA1                     	;# 
   591  0DA1                     	;# 
   592  0DA2                     	;# 
   593  0DA3                     	;# 
   594  0DA3                     	;# 
   595  0DA4                     	;# 
   596  0DA5                     	;# 
   597  0DA5                     	;# 
   598  0DA6                     	;# 
   599  0DA7                     	;# 
   600  0DA7                     	;# 
   601  0DA8                     	;# 
   602  0DA9                     	;# 
   603  0DA9                     	;# 
   604  0DAA                     	;# 
   605  0DAB                     	;# 
   606  0DAC                     	;# 
   607  0DAC                     	;# 
   608  0DAD                     	;# 
   609  0DAD                     	;# 
   610  0DAE                     	;# 
   611  0DAF                     	;# 
   612  0DB0                     	;# 
   613  0DB1                     	;# 
   614  0DB1                     	;# 
   615  0DB2                     	;# 
   616  0DB3                     	;# 
   617  0DB3                     	;# 
   618  0DB4                     	;# 
   619  0DB5                     	;# 
   620  0DB5                     	;# 
   621  0DB6                     	;# 
   622  0DB7                     	;# 
   623  0DB7                     	;# 
   624  0DB8                     	;# 
   625  0DB9                     	;# 
   626  0DB9                     	;# 
   627  0DBA                     	;# 
   628  0DBB                     	;# 
   629  0DBC                     	;# 
   630  0DBC                     	;# 
   631  0DBD                     	;# 
   632  0DBD                     	;# 
   633  0DBE                     	;# 
   634  0DBF                     	;# 
   635  0DC0                     	;# 
   636  0DC1                     	;# 
   637  0DC1                     	;# 
   638  0DC2                     	;# 
   639  0DC3                     	;# 
   640  0DC3                     	;# 
   641  0DC4                     	;# 
   642  0DC5                     	;# 
   643  0DC5                     	;# 
   644  0DC6                     	;# 
   645  0DC7                     	;# 
   646  0DC7                     	;# 
   647  0DC8                     	;# 
   648  0DC9                     	;# 
   649  0DC9                     	;# 
   650  0DCA                     	;# 
   651  0DCB                     	;# 
   652  0DCC                     	;# 
   653  0DCC                     	;# 
   654  0DCD                     	;# 
   655  0DCD                     	;# 
   656  0DCE                     	;# 
   657  0DCF                     	;# 
   658  0DD0                     	;# 
   659  0E0F                     	;# 
   660  0E10                     	;# 
   661  0E11                     	;# 
   662  0E12                     	;# 
   663  0E13                     	;# 
   664  0E14                     	;# 
   665  0E15                     	;# 
   666  0E16                     	;# 
   667  0E17                     	;# 
   668  0E90                     	;# 
   669  0E91                     	;# 
   670  0E92                     	;# 
   671  0E94                     	;# 
   672  0E95                     	;# 
   673  0EA0                     	;# 
   674  0EA1                     	;# 
   675  0EA2                     	;# 
   676  0EA3                     	;# 
   677  0EA4                     	;# 
   678  0EA5                     	;# 
   679  0FE4                     	;# 
   680  0FE5                     	;# 
   681  0FE6                     	;# 
   682  0FE7                     	;# 
   683  0FE8                     	;# 
   684  0FE8                     	;# 
   685  0FE9                     	;# 
   686  0FEA                     	;# 
   687  0FEA                     	;# 
   688  0FEB                     	;# 
   689  0FED                     	;# 
   690  0FEE                     	;# 
   691  0FEE                     	;# 
   692  0FEF                     	;# 
   693  0000                     	;# 
   694  0001                     	;# 
   695  0002                     	;# 
   696  0003                     	;# 
   697  0004                     	;# 
   698  0005                     	;# 
   699  0006                     	;# 
   700  0007                     	;# 
   701  0008                     	;# 
   702  0009                     	;# 
   703  000A                     	;# 
   704  000B                     	;# 
   705  000C                     	;# 
   706  000E                     	;# 
   707  0011                     	;# 
   708  0012                     	;# 
   709  0013                     	;# 
   710  0015                     	;# 
   711  0016                     	;# 
   712  0016                     	;# 
   713  0017                     	;# 
   714  0018                     	;# 
   715  0019                     	;# 
   716  001A                     	;# 
   717  001B                     	;# 
   718  001C                     	;# 
   719  008C                     	;# 
   720  008E                     	;# 
   721  0091                     	;# 
   722  0092                     	;# 
   723  0093                     	;# 
   724  0095                     	;# 
   725  0096                     	;# 
   726  0097                     	;# 
   727  0098                     	;# 
   728  0099                     	;# 
   729  009A                     	;# 
   730  009B                     	;# 
   731  009B                     	;# 
   732  009C                     	;# 
   733  009D                     	;# 
   734  009E                     	;# 
   735  009F                     	;# 
   736  010C                     	;# 
   737  010E                     	;# 
   738  0111                     	;# 
   739  0112                     	;# 
   740  0113                     	;# 
   741  0114                     	;# 
   742  0115                     	;# 
   743  0116                     	;# 
   744  0117                     	;# 
   745  0118                     	;# 
   746  0119                     	;# 
   747  018C                     	;# 
   748  018E                     	;# 
   749  0191                     	;# 
   750  0191                     	;# 
   751  0192                     	;# 
   752  0193                     	;# 
   753  0193                     	;# 
   754  0194                     	;# 
   755  0195                     	;# 
   756  0196                     	;# 
   757  0197                     	;# 
   758  0199                     	;# 
   759  019A                     	;# 
   760  019B                     	;# 
   761  019B                     	;# 
   762  019C                     	;# 
   763  019D                     	;# 
   764  019E                     	;# 
   765  019F                     	;# 
   766  020C                     	;# 
   767  020E                     	;# 
   768  028C                     	;# 
   769  028E                     	;# 
   770  030C                     	;# 
   771  030E                     	;# 
   772  038C                     	;# 
   773  038E                     	;# 
   774  0391                     	;# 
   775  0392                     	;# 
   776  0393                     	;# 
   777  0397                     	;# 
   778  0398                     	;# 
   779  0399                     	;# 
   780  0691                     	;# 
   781  0692                     	;# 
   782  0693                     	;# 
   783  0694                     	;# 
   784  0695                     	;# 
   785  0D8E                     	;# 
   786  0D8F                     	;# 
   787  0D90                     	;# 
   788  0D91                     	;# 
   789  0D91                     	;# 
   790  0D92                     	;# 
   791  0D93                     	;# 
   792  0D93                     	;# 
   793  0D94                     	;# 
   794  0D95                     	;# 
   795  0D95                     	;# 
   796  0D96                     	;# 
   797  0D97                     	;# 
   798  0D97                     	;# 
   799  0D98                     	;# 
   800  0D99                     	;# 
   801  0D99                     	;# 
   802  0D9A                     	;# 
   803  0D9B                     	;# 
   804  0D9C                     	;# 
   805  0D9C                     	;# 
   806  0D9D                     	;# 
   807  0D9D                     	;# 
   808  0D9E                     	;# 
   809  0D9F                     	;# 
   810  0DA0                     	;# 
   811  0DA1                     	;# 
   812  0DA1                     	;# 
   813  0DA2                     	;# 
   814  0DA3                     	;# 
   815  0DA3                     	;# 
   816  0DA4                     	;# 
   817  0DA5                     	;# 
   818  0DA5                     	;# 
   819  0DA6                     	;# 
   820  0DA7                     	;# 
   821  0DA7                     	;# 
   822  0DA8                     	;# 
   823  0DA9                     	;# 
   824  0DA9                     	;# 
   825  0DAA                     	;# 
   826  0DAB                     	;# 
   827  0DAC                     	;# 
   828  0DAC                     	;# 
   829  0DAD                     	;# 
   830  0DAD                     	;# 
   831  0DAE                     	;# 
   832  0DAF                     	;# 
   833  0DB0                     	;# 
   834  0DB1                     	;# 
   835  0DB1                     	;# 
   836  0DB2                     	;# 
   837  0DB3                     	;# 
   838  0DB3                     	;# 
   839  0DB4                     	;# 
   840  0DB5                     	;# 
   841  0DB5                     	;# 
   842  0DB6                     	;# 
   843  0DB7                     	;# 
   844  0DB7                     	;# 
   845  0DB8                     	;# 
   846  0DB9                     	;# 
   847  0DB9                     	;# 
   848  0DBA                     	;# 
   849  0DBB                     	;# 
   850  0DBC                     	;# 
   851  0DBC                     	;# 
   852  0DBD                     	;# 
   853  0DBD                     	;# 
   854  0DBE                     	;# 
   855  0DBF                     	;# 
   856  0DC0                     	;# 
   857  0DC1                     	;# 
   858  0DC1                     	;# 
   859  0DC2                     	;# 
   860  0DC3                     	;# 
   861  0DC3                     	;# 
   862  0DC4                     	;# 
   863  0DC5                     	;# 
   864  0DC5                     	;# 
   865  0DC6                     	;# 
   866  0DC7                     	;# 
   867  0DC7                     	;# 
   868  0DC8                     	;# 
   869  0DC9                     	;# 
   870  0DC9                     	;# 
   871  0DCA                     	;# 
   872  0DCB                     	;# 
   873  0DCC                     	;# 
   874  0DCC                     	;# 
   875  0DCD                     	;# 
   876  0DCD                     	;# 
   877  0DCE                     	;# 
   878  0DCF                     	;# 
   879  0DD0                     	;# 
   880  0E0F                     	;# 
   881  0E10                     	;# 
   882  0E11                     	;# 
   883  0E12                     	;# 
   884  0E13                     	;# 
   885  0E14                     	;# 
   886  0E15                     	;# 
   887  0E16                     	;# 
   888  0E17                     	;# 
   889  0E90                     	;# 
   890  0E91                     	;# 
   891  0E92                     	;# 
   892  0E94                     	;# 
   893  0E95                     	;# 
   894  0EA0                     	;# 
   895  0EA1                     	;# 
   896  0EA2                     	;# 
   897  0EA3                     	;# 
   898  0EA4                     	;# 
   899  0EA5                     	;# 
   900  0FE4                     	;# 
   901  0FE5                     	;# 
   902  0FE6                     	;# 
   903  0FE7                     	;# 
   904  0FE8                     	;# 
   905  0FE8                     	;# 
   906  0FE9                     	;# 
   907  0FEA                     	;# 
   908  0FEA                     	;# 
   909  0FEB                     	;# 
   910  0FED                     	;# 
   911  0FEE                     	;# 
   912  0FEE                     	;# 
   913  0FEF                     	;# 
   914  0000                     	;# 
   915  0001                     	;# 
   916  0002                     	;# 
   917  0003                     	;# 
   918  0004                     	;# 
   919  0005                     	;# 
   920  0006                     	;# 
   921  0007                     	;# 
   922  0008                     	;# 
   923  0009                     	;# 
   924  000A                     	;# 
   925  000B                     	;# 
   926  000C                     	;# 
   927  000E                     	;# 
   928  0011                     	;# 
   929  0012                     	;# 
   930  0013                     	;# 
   931  0015                     	;# 
   932  0016                     	;# 
   933  0016                     	;# 
   934  0017                     	;# 
   935  0018                     	;# 
   936  0019                     	;# 
   937  001A                     	;# 
   938  001B                     	;# 
   939  001C                     	;# 
   940  008C                     	;# 
   941  008E                     	;# 
   942  0091                     	;# 
   943  0092                     	;# 
   944  0093                     	;# 
   945  0095                     	;# 
   946  0096                     	;# 
   947  0097                     	;# 
   948  0098                     	;# 
   949  0099                     	;# 
   950  009A                     	;# 
   951  009B                     	;# 
   952  009B                     	;# 
   953  009C                     	;# 
   954  009D                     	;# 
   955  009E                     	;# 
   956  009F                     	;# 
   957  010C                     	;# 
   958  010E                     	;# 
   959  0111                     	;# 
   960  0112                     	;# 
   961  0113                     	;# 
   962  0114                     	;# 
   963  0115                     	;# 
   964  0116                     	;# 
   965  0117                     	;# 
   966  0118                     	;# 
   967  0119                     	;# 
   968  018C                     	;# 
   969  018E                     	;# 
   970  0191                     	;# 
   971  0191                     	;# 
   972  0192                     	;# 
   973  0193                     	;# 
   974  0193                     	;# 
   975  0194                     	;# 
   976  0195                     	;# 
   977  0196                     	;# 
   978  0197                     	;# 
   979  0199                     	;# 
   980  019A                     	;# 
   981  019B                     	;# 
   982  019B                     	;# 
   983  019C                     	;# 
   984  019D                     	;# 
   985  019E                     	;# 
   986  019F                     	;# 
   987  020C                     	;# 
   988  020E                     	;# 
   989  028C                     	;# 
   990  028E                     	;# 
   991  030C                     	;# 
   992  030E                     	;# 
   993  038C                     	;# 
   994  038E                     	;# 
   995  0391                     	;# 
   996  0392                     	;# 
   997  0393                     	;# 
   998  0397                     	;# 
   999  0398                     	;# 
  1000  0399                     	;# 
  1001  0691                     	;# 
  1002  0692                     	;# 
  1003  0693                     	;# 
  1004  0694                     	;# 
  1005  0695                     	;# 
  1006  0D8E                     	;# 
  1007  0D8F                     	;# 
  1008  0D90                     	;# 
  1009  0D91                     	;# 
  1010  0D91                     	;# 
  1011  0D92                     	;# 
  1012  0D93                     	;# 
  1013  0D93                     	;# 
  1014  0D94                     	;# 
  1015  0D95                     	;# 
  1016  0D95                     	;# 
  1017  0D96                     	;# 
  1018  0D97                     	;# 
  1019  0D97                     	;# 
  1020  0D98                     	;# 
  1021  0D99                     	;# 
  1022  0D99                     	;# 
  1023  0D9A                     	;# 
  1024  0D9B                     	;# 
  1025  0D9C                     	;# 
  1026  0D9C                     	;# 
  1027  0D9D                     	;# 
  1028  0D9D                     	;# 
  1029  0D9E                     	;# 
  1030  0D9F                     	;# 
  1031  0DA0                     	;# 
  1032  0DA1                     	;# 
  1033  0DA1                     	;# 
  1034  0DA2                     	;# 
  1035  0DA3                     	;# 
  1036  0DA3                     	;# 
  1037  0DA4                     	;# 
  1038  0DA5                     	;# 
  1039  0DA5                     	;# 
  1040  0DA6                     	;# 
  1041  0DA7                     	;# 
  1042  0DA7                     	;# 
  1043  0DA8                     	;# 
  1044  0DA9                     	;# 
  1045  0DA9                     	;# 
  1046  0DAA                     	;# 
  1047  0DAB                     	;# 
  1048  0DAC                     	;# 
  1049  0DAC                     	;# 
  1050  0DAD                     	;# 
  1051  0DAD                     	;# 
  1052  0DAE                     	;# 
  1053  0DAF                     	;# 
  1054  0DB0                     	;# 
  1055  0DB1                     	;# 
  1056  0DB1                     	;# 
  1057  0DB2                     	;# 
  1058  0DB3                     	;# 
  1059  0DB3                     	;# 
  1060  0DB4                     	;# 
  1061  0DB5                     	;# 
  1062  0DB5                     	;# 
  1063  0DB6                     	;# 
  1064  0DB7                     	;# 
  1065  0DB7                     	;# 
  1066  0DB8                     	;# 
  1067  0DB9                     	;# 
  1068  0DB9                     	;# 
  1069  0DBA                     	;# 
  1070  0DBB                     	;# 
  1071  0DBC                     	;# 
  1072  0DBC                     	;# 
  1073  0DBD                     	;# 
  1074  0DBD                     	;# 
  1075  0DBE                     	;# 
  1076  0DBF                     	;# 
  1077  0DC0                     	;# 
  1078  0DC1                     	;# 
  1079  0DC1                     	;# 
  1080  0DC2                     	;# 
  1081  0DC3                     	;# 
  1082  0DC3                     	;# 
  1083  0DC4                     	;# 
  1084  0DC5                     	;# 
  1085  0DC5                     	;# 
  1086  0DC6                     	;# 
  1087  0DC7                     	;# 
  1088  0DC7                     	;# 
  1089  0DC8                     	;# 
  1090  0DC9                     	;# 
  1091  0DC9                     	;# 
  1092  0DCA                     	;# 
  1093  0DCB                     	;# 
  1094  0DCC                     	;# 
  1095  0DCC                     	;# 
  1096  0DCD                     	;# 
  1097  0DCD                     	;# 
  1098  0DCE                     	;# 
  1099  0DCF                     	;# 
  1100  0DD0                     	;# 
  1101  0E0F                     	;# 
  1102  0E10                     	;# 
  1103  0E11                     	;# 
  1104  0E12                     	;# 
  1105  0E13                     	;# 
  1106  0E14                     	;# 
  1107  0E15                     	;# 
  1108  0E16                     	;# 
  1109  0E17                     	;# 
  1110  0E90                     	;# 
  1111  0E91                     	;# 
  1112  0E92                     	;# 
  1113  0E94                     	;# 
  1114  0E95                     	;# 
  1115  0EA0                     	;# 
  1116  0EA1                     	;# 
  1117  0EA2                     	;# 
  1118  0EA3                     	;# 
  1119  0EA4                     	;# 
  1120  0EA5                     	;# 
  1121  0FE4                     	;# 
  1122  0FE5                     	;# 
  1123  0FE6                     	;# 
  1124  0FE7                     	;# 
  1125  0FE8                     	;# 
  1126  0FE8                     	;# 
  1127  0FE9                     	;# 
  1128  0FEA                     	;# 
  1129  0FEA                     	;# 
  1130  0FEB                     	;# 
  1131  0FED                     	;# 
  1132  0FEE                     	;# 
  1133  0FEE                     	;# 
  1134  0FEF                     	;# 
  1135  0FFF                     	;# 
  1136  0000                     	;# 
  1137  0001                     	;# 
  1138  0002                     	;# 
  1139  0003                     	;# 
  1140  0004                     	;# 
  1141  0005                     	;# 
  1142  0006                     	;# 
  1143  0007                     	;# 
  1144  0008                     	;# 
  1145  0009                     	;# 
  1146  000A                     	;# 
  1147  000B                     	;# 
  1148  000C                     	;# 
  1149  000E                     	;# 
  1150  0011                     	;# 
  1151  0012                     	;# 
  1152  0013                     	;# 
  1153  0015                     	;# 
  1154  0016                     	;# 
  1155  0016                     	;# 
  1156  0017                     	;# 
  1157  0018                     	;# 
  1158  0019                     	;# 
  1159  001A                     	;# 
  1160  001B                     	;# 
  1161  001C                     	;# 
  1162  008C                     	;# 
  1163  008E                     	;# 
  1164  0091                     	;# 
  1165  0092                     	;# 
  1166  0093                     	;# 
  1167  0095                     	;# 
  1168  0096                     	;# 
  1169  0097                     	;# 
  1170  0098                     	;# 
  1171  0099                     	;# 
  1172  009A                     	;# 
  1173  009B                     	;# 
  1174  009B                     	;# 
  1175  009C                     	;# 
  1176  009D                     	;# 
  1177  009E                     	;# 
  1178  009F                     	;# 
  1179  010C                     	;# 
  1180  010E                     	;# 
  1181  0111                     	;# 
  1182  0112                     	;# 
  1183  0113                     	;# 
  1184  0114                     	;# 
  1185  0115                     	;# 
  1186  0116                     	;# 
  1187  0117                     	;# 
  1188  0118                     	;# 
  1189  0119                     	;# 
  1190  018C                     	;# 
  1191  018E                     	;# 
  1192  0191                     	;# 
  1193  0191                     	;# 
  1194  0192                     	;# 
  1195  0193                     	;# 
  1196  0193                     	;# 
  1197  0194                     	;# 
  1198  0195                     	;# 
  1199  0196                     	;# 
  1200  0197                     	;# 
  1201  0199                     	;# 
  1202  019A                     	;# 
  1203  019B                     	;# 
  1204  019B                     	;# 
  1205  019C                     	;# 
  1206  019D                     	;# 
  1207  019E                     	;# 
  1208  019F                     	;# 
  1209  020C                     	;# 
  1210  020E                     	;# 
  1211  028C                     	;# 
  1212  028E                     	;# 
  1213  030C                     	;# 
  1214  030E                     	;# 
  1215  038C                     	;# 
  1216  038E                     	;# 
  1217  0391                     	;# 
  1218  0392                     	;# 
  1219  0393                     	;# 
  1220  0397                     	;# 
  1221  0398                     	;# 
  1222  0399                     	;# 
  1223  0691                     	;# 
  1224  0692                     	;# 
  1225  0693                     	;# 
  1226  0694                     	;# 
  1227  0695                     	;# 
  1228  0D8E                     	;# 
  1229  0D8F                     	;# 
  1230  0D90                     	;# 
  1231  0D91                     	;# 
  1232  0D91                     	;# 
  1233  0D92                     	;# 
  1234  0D93                     	;# 
  1235  0D93                     	;# 
  1236  0D94                     	;# 
  1237  0D95                     	;# 
  1238  0D95                     	;# 
  1239  0D96                     	;# 
  1240  0D97                     	;# 
  1241  0D97                     	;# 
  1242  0D98                     	;# 
  1243  0D99                     	;# 
  1244  0D99                     	;# 
  1245  0D9A                     	;# 
  1246  0D9B                     	;# 
  1247  0D9C                     	;# 
  1248  0D9C                     	;# 
  1249  0D9D                     	;# 
  1250  0D9D                     	;# 
  1251  0D9E                     	;# 
  1252  0D9F                     	;# 
  1253  0DA0                     	;# 
  1254  0DA1                     	;# 
  1255  0DA1                     	;# 
  1256  0DA2                     	;# 
  1257  0DA3                     	;# 
  1258  0DA3                     	;# 
  1259  0DA4                     	;# 
  1260  0DA5                     	;# 
  1261  0DA5                     	;# 
  1262  0DA6                     	;# 
  1263  0DA7                     	;# 
  1264  0DA7                     	;# 
  1265  0DA8                     	;# 
  1266  0DA9                     	;# 
  1267  0DA9                     	;# 
  1268  0DAA                     	;# 
  1269  0DAB                     	;# 
  1270  0DAC                     	;# 
  1271  0DAC                     	;# 
  1272  0DAD                     	;# 
  1273  0DAD                     	;# 
  1274  0DAE                     	;# 
  1275  0DAF                     	;# 
  1276  0DB0                     	;# 
  1277  0DB1                     	;# 
  1278  0DB1                     	;# 
  1279  0DB2                     	;# 
  1280  0DB3                     	;# 
  1281  0DB3                     	;# 
  1282  0DB4                     	;# 
  1283  0DB5                     	;# 
  1284  0DB5                     	;# 
  1285  0DB6                     	;# 
  1286  0DB7                     	;# 
  1287  0DB7                     	;# 
  1288  0DB8                     	;# 
  1289  0DB9                     	;# 
  1290  0DB9                     	;# 
  1291  0DBA                     	;# 
  1292  0DBB                     	;# 
  1293  0DBC                     	;# 
  1294  0DBC                     	;# 
  1295  0DBD                     	;# 
  1296  0DBD                     	;# 
  1297  0DBE                     	;# 
  1298  0DBF                     	;# 
  1299  0DC0                     	;# 
  1300  0DC1                     	;# 
  1301  0DC1                     	;# 
  1302  0DC2                     	;# 
  1303  0DC3                     	;# 
  1304  0DC3                     	;# 
  1305  0DC4                     	;# 
  1306  0DC5                     	;# 
  1307  0DC5                     	;# 
  1308  0DC6                     	;# 
  1309  0DC7                     	;# 
  1310  0DC7                     	;# 
  1311  0DC8                     	;# 
  1312  0DC9                     	;# 
  1313  0DC9                     	;# 
  1314  0DCA                     	;# 
  1315  0DCB                     	;# 
  1316  0DCC                     	;# 
  1317  0DCC                     	;# 
  1318  0DCD                     	;# 
  1319  0DCD                     	;# 
  1320  0DCE                     	;# 
  1321  0DCF                     	;# 
  1322  0DD0                     	;# 
  1323  0E0F                     	;# 
  1324  0E10                     	;# 
  1325  0E11                     	;# 
  1326  0E12                     	;# 
  1327  0E13                     	;# 
  1328  0E14                     	;# 
  1329  0E15                     	;# 
  1330  0E16                     	;# 
  1331  0E17                     	;# 
  1332  0E90                     	;# 
  1333  0E91                     	;# 
  1334  0E92                     	;# 
  1335  0E94                     	;# 
  1336  0E95                     	;# 
  1337  0EA0                     	;# 
  1338  0EA1                     	;# 
  1339  0EA2                     	;# 
  1340  0EA3                     	;# 
  1341  0EA4                     	;# 
  1342  0EA5                     	;# 
  1343  0FE4                     	;# 
  1344  0FE5                     	;# 
  1345  0FE6                     	;# 
  1346  0FE7                     	;# 
  1347  0FE8                     	;# 
  1348  0FE8                     	;# 
  1349  0FE9                     	;# 
  1350  0FEA                     	;# 
  1351  0FEA                     	;# 
  1352  0FEB                     	;# 
  1353  0FED                     	;# 
  1354  0FEE                     	;# 
  1355  0FEE                     	;# 
  1356  0FEF                     	;# 
  1357  0000                     	;# 
  1358  0001                     	;# 
  1359  0002                     	;# 
  1360  0003                     	;# 
  1361  0004                     	;# 
  1362  0005                     	;# 
  1363  0006                     	;# 
  1364  0007                     	;# 
  1365  0008                     	;# 
  1366  0009                     	;# 
  1367  000A                     	;# 
  1368  000B                     	;# 
  1369  000C                     	;# 
  1370  000E                     	;# 
  1371  0011                     	;# 
  1372  0012                     	;# 
  1373  0013                     	;# 
  1374  0015                     	;# 
  1375  0016                     	;# 
  1376  0016                     	;# 
  1377  0017                     	;# 
  1378  0018                     	;# 
  1379  0019                     	;# 
  1380  001A                     	;# 
  1381  001B                     	;# 
  1382  001C                     	;# 
  1383  008C                     	;# 
  1384  008E                     	;# 
  1385  0091                     	;# 
  1386  0092                     	;# 
  1387  0093                     	;# 
  1388  0095                     	;# 
  1389  0096                     	;# 
  1390  0097                     	;# 
  1391  0098                     	;# 
  1392  0099                     	;# 
  1393  009A                     	;# 
  1394  009B                     	;# 
  1395  009B                     	;# 
  1396  009C                     	;# 
  1397  009D                     	;# 
  1398  009E                     	;# 
  1399  009F                     	;# 
  1400  010C                     	;# 
  1401  010E                     	;# 
  1402  0111                     	;# 
  1403  0112                     	;# 
  1404  0113                     	;# 
  1405  0114                     	;# 
  1406  0115                     	;# 
  1407  0116                     	;# 
  1408  0117                     	;# 
  1409  0118                     	;# 
  1410  0119                     	;# 
  1411  018C                     	;# 
  1412  018E                     	;# 
  1413  0191                     	;# 
  1414  0191                     	;# 
  1415  0192                     	;# 
  1416  0193                     	;# 
  1417  0193                     	;# 
  1418  0194                     	;# 
  1419  0195                     	;# 
  1420  0196                     	;# 
  1421  0197                     	;# 
  1422  0199                     	;# 
  1423  019A                     	;# 
  1424  019B                     	;# 
  1425  019B                     	;# 
  1426  019C                     	;# 
  1427  019D                     	;# 
  1428  019E                     	;# 
  1429  019F                     	;# 
  1430  020C                     	;# 
  1431  020E                     	;# 
  1432  028C                     	;# 
  1433  028E                     	;# 
  1434  030C                     	;# 
  1435  030E                     	;# 
  1436  038C                     	;# 
  1437  038E                     	;# 
  1438  0391                     	;# 
  1439  0392                     	;# 
  1440  0393                     	;# 
  1441  0397                     	;# 
  1442  0398                     	;# 
  1443  0399                     	;# 
  1444  0691                     	;# 
  1445  0692                     	;# 
  1446  0693                     	;# 
  1447  0694                     	;# 
  1448  0695                     	;# 
  1449  0D8E                     	;# 
  1450  0D8F                     	;# 
  1451  0D90                     	;# 
  1452  0D91                     	;# 
  1453  0D91                     	;# 
  1454  0D92                     	;# 
  1455  0D93                     	;# 
  1456  0D93                     	;# 
  1457  0D94                     	;# 
  1458  0D95                     	;# 
  1459  0D95                     	;# 
  1460  0D96                     	;# 
  1461  0D97                     	;# 
  1462  0D97                     	;# 
  1463  0D98                     	;# 
  1464  0D99                     	;# 
  1465  0D99                     	;# 
  1466  0D9A                     	;# 
  1467  0D9B                     	;# 
  1468  0D9C                     	;# 
  1469  0D9C                     	;# 
  1470  0D9D                     	;# 
  1471  0D9D                     	;# 
  1472  0D9E                     	;# 
  1473  0D9F                     	;# 
  1474  0DA0                     	;# 
  1475  0DA1                     	;# 
  1476  0DA1                     	;# 
  1477  0DA2                     	;# 
  1478  0DA3                     	;# 
  1479  0DA3                     	;# 
  1480  0DA4                     	;# 
  1481  0DA5                     	;# 
  1482  0DA5                     	;# 
  1483  0DA6                     	;# 
  1484  0DA7                     	;# 
  1485  0DA7                     	;# 
  1486  0DA8                     	;# 
  1487  0DA9                     	;# 
  1488  0DA9                     	;# 
  1489  0DAA                     	;# 
  1490  0DAB                     	;# 
  1491  0DAC                     	;# 
  1492  0DAC                     	;# 
  1493  0DAD                     	;# 
  1494  0DAD                     	;# 
  1495  0DAE                     	;# 
  1496  0DAF                     	;# 
  1497  0DB0                     	;# 
  1498  0DB1                     	;# 
  1499  0DB1                     	;# 
  1500  0DB2                     	;# 
  1501  0DB3                     	;# 
  1502  0DB3                     	;# 
  1503  0DB4                     	;# 
  1504  0DB5                     	;# 
  1505  0DB5                     	;# 
  1506  0DB6                     	;# 
  1507  0DB7                     	;# 
  1508  0DB7                     	;# 
  1509  0DB8                     	;# 
  1510  0DB9                     	;# 
  1511  0DB9                     	;# 
  1512  0DBA                     	;# 
  1513  0DBB                     	;# 
  1514  0DBC                     	;# 
  1515  0DBC                     	;# 
  1516  0DBD                     	;# 
  1517  0DBD                     	;# 
  1518  0DBE                     	;# 
  1519  0DBF                     	;# 
  1520  0DC0                     	;# 
  1521  0DC1                     	;# 
  1522  0DC1                     	;# 
  1523  0DC2                     	;# 
  1524  0DC3                     	;# 
  1525  0DC3                     	;# 
  1526  0DC4                     	;# 
  1527  0DC5                     	;# 
  1528  0DC5                     	;# 
  1529  0DC6                     	;# 
  1530  0DC7                     	;# 
  1531  0DC7                     	;# 
  1532  0DC8                     	;# 
  1533  0DC9                     	;# 
  1534  0DC9                     	;# 
  1535  0DCA                     	;# 
  1536  0DCB                     	;# 
  1537  0DCC                     	;# 
  1538  0DCC                     	;# 
  1539  0DCD                     	;# 
  1540  0DCD                     	;# 
  1541  0DCE                     	;# 
  1542  0DCF                     	;# 
  1543  0DD0                     	;# 
  1544  0E0F                     	;# 
  1545  0E10                     	;# 
  1546  0E11                     	;# 
  1547  0E12                     	;# 
  1548  0E13                     	;# 
  1549  0E14                     	;# 
  1550  0E15                     	;# 
  1551  0E16                     	;# 
  1552  0E17                     	;# 
  1553  0E90                     	;# 
  1554  0E91                     	;# 
  1555  0E92                     	;# 
  1556  0E94                     	;# 
  1557  0E95                     	;# 
  1558  0EA0                     	;# 
  1559  0EA1                     	;# 
  1560  0EA2                     	;# 
  1561  0EA3                     	;# 
  1562  0EA4                     	;# 
  1563  0EA5                     	;# 
  1564  0FE4                     	;# 
  1565  0FE5                     	;# 
  1566  0FE6                     	;# 
  1567  0FE7                     	;# 
  1568  0FE8                     	;# 
  1569  0FE8                     	;# 
  1570  0FE9                     	;# 
  1571  0FEA                     	;# 
  1572  0FEA                     	;# 
  1573  0FEB                     	;# 
  1574  0FED                     	;# 
  1575  0FEE                     	;# 
  1576  0FEE                     	;# 
  1577  0FEF                     	;# 
  1578  0000                     	;# 
  1579  0001                     	;# 
  1580  0002                     	;# 
  1581  0003                     	;# 
  1582  0004                     	;# 
  1583  0005                     	;# 
  1584  0006                     	;# 
  1585  0007                     	;# 
  1586  0008                     	;# 
  1587  0009                     	;# 
  1588  000A                     	;# 
  1589  000B                     	;# 
  1590  000C                     	;# 
  1591  000E                     	;# 
  1592  0011                     	;# 
  1593  0012                     	;# 
  1594  0013                     	;# 
  1595  0015                     	;# 
  1596  0016                     	;# 
  1597  0016                     	;# 
  1598  0017                     	;# 
  1599  0018                     	;# 
  1600  0019                     	;# 
  1601  001A                     	;# 
  1602  001B                     	;# 
  1603  001C                     	;# 
  1604  008C                     	;# 
  1605  008E                     	;# 
  1606  0091                     	;# 
  1607  0092                     	;# 
  1608  0093                     	;# 
  1609  0095                     	;# 
  1610  0096                     	;# 
  1611  0097                     	;# 
  1612  0098                     	;# 
  1613  0099                     	;# 
  1614  009A                     	;# 
  1615  009B                     	;# 
  1616  009B                     	;# 
  1617  009C                     	;# 
  1618  009D                     	;# 
  1619  009E                     	;# 
  1620  009F                     	;# 
  1621  010C                     	;# 
  1622  010E                     	;# 
  1623  0111                     	;# 
  1624  0112                     	;# 
  1625  0113                     	;# 
  1626  0114                     	;# 
  1627  0115                     	;# 
  1628  0116                     	;# 
  1629  0117                     	;# 
  1630  0118                     	;# 
  1631  0119                     	;# 
  1632  018C                     	;# 
  1633  018E                     	;# 
  1634  0191                     	;# 
  1635  0191                     	;# 
  1636  0192                     	;# 
  1637  0193                     	;# 
  1638  0193                     	;# 
  1639  0194                     	;# 
  1640  0195                     	;# 
  1641  0196                     	;# 
  1642  0197                     	;# 
  1643  0199                     	;# 
  1644  019A                     	;# 
  1645  019B                     	;# 
  1646  019B                     	;# 
  1647  019C                     	;# 
  1648  019D                     	;# 
  1649  019E                     	;# 
  1650  019F                     	;# 
  1651  020C                     	;# 
  1652  020E                     	;# 
  1653  028C                     	;# 
  1654  028E                     	;# 
  1655  030C                     	;# 
  1656  030E                     	;# 
  1657  038C                     	;# 
  1658  038E                     	;# 
  1659  0391                     	;# 
  1660  0392                     	;# 
  1661  0393                     	;# 
  1662  0397                     	;# 
  1663  0398                     	;# 
  1664  0399                     	;# 
  1665  0691                     	;# 
  1666  0692                     	;# 
  1667  0693                     	;# 
  1668  0694                     	;# 
  1669  0695                     	;# 
  1670  0D8E                     	;# 
  1671  0D8F                     	;# 
  1672  0D90                     	;# 
  1673  0D91                     	;# 
  1674  0D91                     	;# 
  1675  0D92                     	;# 
  1676  0D93                     	;# 
  1677  0D93                     	;# 
  1678  0D94                     	;# 
  1679  0D95                     	;# 
  1680  0D95                     	;# 
  1681  0D96                     	;# 
  1682  0D97                     	;# 
  1683  0D97                     	;# 
  1684  0D98                     	;# 
  1685  0D99                     	;# 
  1686  0D99                     	;# 
  1687  0D9A                     	;# 
  1688  0D9B                     	;# 
  1689  0D9C                     	;# 
  1690  0D9C                     	;# 
  1691  0D9D                     	;# 
  1692  0D9D                     	;# 
  1693  0D9E                     	;# 
  1694  0D9F                     	;# 
  1695  0DA0                     	;# 
  1696  0DA1                     	;# 
  1697  0DA1                     	;# 
  1698  0DA2                     	;# 
  1699  0DA3                     	;# 
  1700  0DA3                     	;# 
  1701  0DA4                     	;# 
  1702  0DA5                     	;# 
  1703  0DA5                     	;# 
  1704  0DA6                     	;# 
  1705  0DA7                     	;# 
  1706  0DA7                     	;# 
  1707  0DA8                     	;# 
  1708  0DA9                     	;# 
  1709  0DA9                     	;# 
  1710  0DAA                     	;# 
  1711  0DAB                     	;# 
  1712  0DAC                     	;# 
  1713  0DAC                     	;# 
  1714  0DAD                     	;# 
  1715  0DAD                     	;# 
  1716  0DAE                     	;# 
  1717  0DAF                     	;# 
  1718  0DB0                     	;# 
  1719  0DB1                     	;# 
  1720  0DB1                     	;# 
  1721  0DB2                     	;# 
  1722  0DB3                     	;# 
  1723  0DB3                     	;# 
  1724  0DB4                     	;# 
  1725  0DB5                     	;# 
  1726  0DB5                     	;# 
  1727  0DB6                     	;# 
  1728  0DB7                     	;# 
  1729  0DB7                     	;# 
  1730  0DB8                     	;# 
  1731  0DB9                     	;# 
  1732  0DB9                     	;# 
  1733  0DBA                     	;# 
  1734  0DBB                     	;# 
  1735  0DBC                     	;# 
  1736  0DBC                     	;# 
  1737  0DBD                     	;# 
  1738  0DBD                     	;# 
  1739  0DBE                     	;# 
  1740  0DBF                     	;# 
  1741  0DC0                     	;# 
  1742  0DC1                     	;# 
  1743  0DC1                     	;# 
  1744  0DC2                     	;# 
  1745  0DC3                     	;# 
  1746  0DC3                     	;# 
  1747  0DC4                     	;# 
  1748  0DC5                     	;# 
  1749  0DC5                     	;# 
  1750  0DC6                     	;# 
  1751  0DC7                     	;# 
  1752  0DC7                     	;# 
  1753  0DC8                     	;# 
  1754  0DC9                     	;# 
  1755  0DC9                     	;# 
  1756  0DCA                     	;# 
  1757  0DCB                     	;# 
  1758  0DCC                     	;# 
  1759  0DCC                     	;# 
  1760  0DCD                     	;# 
  1761  0DCD                     	;# 
  1762  0DCE                     	;# 
  1763  0DCF                     	;# 
  1764  0DD0                     	;# 
  1765  0E0F                     	;# 
  1766  0E10                     	;# 
  1767  0E11                     	;# 
  1768  0E12                     	;# 
  1769  0E13                     	;# 
  1770  0E14                     	;# 
  1771  0E15                     	;# 
  1772  0E16                     	;# 
  1773  0E17                     	;# 
  1774  0E90                     	;# 
  1775  0E91                     	;# 
  1776  0E92                     	;# 
  1777  0E94                     	;# 
  1778  0E95                     	;# 
  1779  0EA0                     	;# 
  1780  0EA1                     	;# 
  1781  0EA2                     	;# 
  1782  0EA3                     	;# 
  1783  0EA4                     	;# 
  1784  0EA5                     	;# 
  1785  0FE4                     	;# 
  1786  0FE5                     	;# 
  1787  0FE6                     	;# 
  1788  0FE7                     	;# 
  1789  0FE8                     	;# 
  1790  0FE8                     	;# 
  1791  0FE9                     	;# 
  1792  0FEA                     	;# 
  1793  0FEA                     	;# 
  1794  0FEB                     	;# 
  1795  0FED                     	;# 
  1796  0FEE                     	;# 
  1797  0FEE                     	;# 
  1798  0FEF                     	;# 
  1799  0000                     	;# 
  1800  0001                     	;# 
  1801  0002                     	;# 
  1802  0003                     	;# 
  1803  0004                     	;# 
  1804  0005                     	;# 
  1805  0006                     	;# 
  1806  0007                     	;# 
  1807  0008                     	;# 
  1808  0009                     	;# 
  1809  000A                     	;# 
  1810  000B                     	;# 
  1811  000C                     	;# 
  1812  000E                     	;# 
  1813  0011                     	;# 
  1814  0012                     	;# 
  1815  0013                     	;# 
  1816  0015                     	;# 
  1817  0016                     	;# 
  1818  0016                     	;# 
  1819  0017                     	;# 
  1820  0018                     	;# 
  1821  0019                     	;# 
  1822  001A                     	;# 
  1823  001B                     	;# 
  1824  001C                     	;# 
  1825  008C                     	;# 
  1826  008E                     	;# 
  1827  0091                     	;# 
  1828  0092                     	;# 
  1829  0093                     	;# 
  1830  0095                     	;# 
  1831  0096                     	;# 
  1832  0097                     	;# 
  1833  0098                     	;# 
  1834  0099                     	;# 
  1835  009A                     	;# 
  1836  009B                     	;# 
  1837  009B                     	;# 
  1838  009C                     	;# 
  1839  009D                     	;# 
  1840  009E                     	;# 
  1841  009F                     	;# 
  1842  010C                     	;# 
  1843  010E                     	;# 
  1844  0111                     	;# 
  1845  0112                     	;# 
  1846  0113                     	;# 
  1847  0114                     	;# 
  1848  0115                     	;# 
  1849  0116                     	;# 
  1850  0117                     	;# 
  1851  0118                     	;# 
  1852  0119                     	;# 
  1853  018C                     	;# 
  1854  018E                     	;# 
  1855  0191                     	;# 
  1856  0191                     	;# 
  1857  0192                     	;# 
  1858  0193                     	;# 
  1859  0193                     	;# 
  1860  0194                     	;# 
  1861  0195                     	;# 
  1862  0196                     	;# 
  1863  0197                     	;# 
  1864  0199                     	;# 
  1865  019A                     	;# 
  1866  019B                     	;# 
  1867  019B                     	;# 
  1868  019C                     	;# 
  1869  019D                     	;# 
  1870  019E                     	;# 
  1871  019F                     	;# 
  1872  020C                     	;# 
  1873  020E                     	;# 
  1874  028C                     	;# 
  1875  028E                     	;# 
  1876  030C                     	;# 
  1877  030E                     	;# 
  1878  038C                     	;# 
  1879  038E                     	;# 
  1880  0391                     	;# 
  1881  0392                     	;# 
  1882  0393                     	;# 
  1883  0397                     	;# 
  1884  0398                     	;# 
  1885  0399                     	;# 
  1886  0691                     	;# 
  1887  0692                     	;# 
  1888  0693                     	;# 
  1889  0694                     	;# 
  1890  0695                     	;# 
  1891  0D8E                     	;# 
  1892  0D8F                     	;# 
  1893  0D90                     	;# 
  1894  0D91                     	;# 
  1895  0D91                     	;# 
  1896  0D92                     	;# 
  1897  0D93                     	;# 
  1898  0D93                     	;# 
  1899  0D94                     	;# 
  1900  0D95                     	;# 
  1901  0D95                     	;# 
  1902  0D96                     	;# 
  1903  0D97                     	;# 
  1904  0D97                     	;# 
  1905  0D98                     	;# 
  1906  0D99                     	;# 
  1907  0D99                     	;# 
  1908  0D9A                     	;# 
  1909  0D9B                     	;# 
  1910  0D9C                     	;# 
  1911  0D9C                     	;# 
  1912  0D9D                     	;# 
  1913  0D9D                     	;# 
  1914  0D9E                     	;# 
  1915  0D9F                     	;# 
  1916  0DA0                     	;# 
  1917  0DA1                     	;# 
  1918  0DA1                     	;# 
  1919  0DA2                     	;# 
  1920  0DA3                     	;# 
  1921  0DA3                     	;# 
  1922  0DA4                     	;# 
  1923  0DA5                     	;# 
  1924  0DA5                     	;# 
  1925  0DA6                     	;# 
  1926  0DA7                     	;# 
  1927  0DA7                     	;# 
  1928  0DA8                     	;# 
  1929  0DA9                     	;# 
  1930  0DA9                     	;# 
  1931  0DAA                     	;# 
  1932  0DAB                     	;# 
  1933  0DAC                     	;# 
  1934  0DAC                     	;# 
  1935  0DAD                     	;# 
  1936  0DAD                     	;# 
  1937  0DAE                     	;# 
  1938  0DAF                     	;# 
  1939  0DB0                     	;# 
  1940  0DB1                     	;# 
  1941  0DB1                     	;# 
  1942  0DB2                     	;# 
  1943  0DB3                     	;# 
  1944  0DB3                     	;# 
  1945  0DB4                     	;# 
  1946  0DB5                     	;# 
  1947  0DB5                     	;# 
  1948  0DB6                     	;# 
  1949  0DB7                     	;# 
  1950  0DB7                     	;# 
  1951  0DB8                     	;# 
  1952  0DB9                     	;# 
  1953  0DB9                     	;# 
  1954  0DBA                     	;# 
  1955  0DBB                     	;# 
  1956  0DBC                     	;# 
  1957  0DBC                     	;# 
  1958  0DBD                     	;# 
  1959  0DBD                     	;# 
  1960  0DBE                     	;# 
  1961  0DBF                     	;# 
  1962  0DC0                     	;# 
  1963  0DC1                     	;# 
  1964  0DC1                     	;# 
  1965  0DC2                     	;# 
  1966  0DC3                     	;# 
  1967  0DC3                     	;# 
  1968  0DC4                     	;# 
  1969  0DC5                     	;# 
  1970  0DC5                     	;# 
  1971  0DC6                     	;# 
  1972  0DC7                     	;# 
  1973  0DC7                     	;# 
  1974  0DC8                     	;# 
  1975  0DC9                     	;# 
  1976  0DC9                     	;# 
  1977  0DCA                     	;# 
  1978  0DCB                     	;# 
  1979  0DCC                     	;# 
  1980  0DCC                     	;# 
  1981  0DCD                     	;# 
  1982  0DCD                     	;# 
  1983  0DCE                     	;# 
  1984  0DCF                     	;# 
  1985  0DD0                     	;# 
  1986  0E0F                     	;# 
  1987  0E10                     	;# 
  1988  0E11                     	;# 
  1989  0E12                     	;# 
  1990  0E13                     	;# 
  1991  0E14                     	;# 
  1992  0E15                     	;# 
  1993  0E16                     	;# 
  1994  0E17                     	;# 
  1995  0E90                     	;# 
  1996  0E91                     	;# 
  1997  0E92                     	;# 
  1998  0E94                     	;# 
  1999  0E95                     	;# 
  2000  0EA0                     	;# 
  2001  0EA1                     	;# 
  2002  0EA2                     	;# 
  2003  0EA3                     	;# 
  2004  0EA4                     	;# 
  2005  0EA5                     	;# 
  2006  0FE4                     	;# 
  2007  0FE5                     	;# 
  2008  0FE6                     	;# 
  2009  0FE7                     	;# 
  2010  0FE8                     	;# 
  2011  0FE8                     	;# 
  2012  0FE9                     	;# 
  2013  0FEA                     	;# 
  2014  0FEA                     	;# 
  2015  0FEB                     	;# 
  2016  0FED                     	;# 
  2017  0FEE                     	;# 
  2018  0FEE                     	;# 
  2019  0FEF                     	;# 
  2020  0000                     	;# 
  2021  0001                     	;# 
  2022  0002                     	;# 
  2023  0003                     	;# 
  2024  0004                     	;# 
  2025  0005                     	;# 
  2026  0006                     	;# 
  2027  0007                     	;# 
  2028  0008                     	;# 
  2029  0009                     	;# 
  2030  000A                     	;# 
  2031  000B                     	;# 
  2032  000C                     	;# 
  2033  000E                     	;# 
  2034  0011                     	;# 
  2035  0012                     	;# 
  2036  0013                     	;# 
  2037  0015                     	;# 
  2038  0016                     	;# 
  2039  0016                     	;# 
  2040  0017                     	;# 
  2041  0018                     	;# 
  2042  0019                     	;# 
  2043  001A                     	;# 
  2044  001B                     	;# 
  2045  001C                     	;# 
  2046  008C                     	;# 
  2047  008E                     	;# 
  2048  0091                     	;# 
  2049  0092                     	;# 
  2050  0093                     	;# 
  2051  0095                     	;# 
  2052  0096                     	;# 
  2053  0097                     	;# 
  2054  0098                     	;# 
  2055  0099                     	;# 
  2056  009A                     	;# 
  2057  009B                     	;# 
  2058  009B                     	;# 
  2059  009C                     	;# 
  2060  009D                     	;# 
  2061  009E                     	;# 
  2062  009F                     	;# 
  2063  010C                     	;# 
  2064  010E                     	;# 
  2065  0111                     	;# 
  2066  0112                     	;# 
  2067  0113                     	;# 
  2068  0114                     	;# 
  2069  0115                     	;# 
  2070  0116                     	;# 
  2071  0117                     	;# 
  2072  0118                     	;# 
  2073  0119                     	;# 
  2074  018C                     	;# 
  2075  018E                     	;# 
  2076  0191                     	;# 
  2077  0191                     	;# 
  2078  0192                     	;# 
  2079  0193                     	;# 
  2080  0193                     	;# 
  2081  0194                     	;# 
  2082  0195                     	;# 
  2083  0196                     	;# 
  2084  0197                     	;# 
  2085  0199                     	;# 
  2086  019A                     	;# 
  2087  019B                     	;# 
  2088  019B                     	;# 
  2089  019C                     	;# 
  2090  019D                     	;# 
  2091  019E                     	;# 
  2092  019F                     	;# 
  2093  020C                     	;# 
  2094  020E                     	;# 
  2095  028C                     	;# 
  2096  028E                     	;# 
  2097  030C                     	;# 
  2098  030E                     	;# 
  2099  038C                     	;# 
  2100  038E                     	;# 
  2101  0391                     	;# 
  2102  0392                     	;# 
  2103  0393                     	;# 
  2104  0397                     	;# 
  2105  0398                     	;# 
  2106  0399                     	;# 
  2107  0691                     	;# 
  2108  0692                     	;# 
  2109  0693                     	;# 
  2110  0694                     	;# 
  2111  0695                     	;# 
  2112  0D8E                     	;# 
  2113  0D8F                     	;# 
  2114  0D90                     	;# 
  2115  0D91                     	;# 
  2116  0D91                     	;# 
  2117  0D92                     	;# 
  2118  0D93                     	;# 
  2119  0D93                     	;# 
  2120  0D94                     	;# 
  2121  0D95                     	;# 
  2122  0D95                     	;# 
  2123  0D96                     	;# 
  2124  0D97                     	;# 
  2125  0D97                     	;# 
  2126  0D98                     	;# 
  2127  0D99                     	;# 
  2128  0D99                     	;# 
  2129  0D9A                     	;# 
  2130  0D9B                     	;# 
  2131  0D9C                     	;# 
  2132  0D9C                     	;# 
  2133  0D9D                     	;# 
  2134  0D9D                     	;# 
  2135  0D9E                     	;# 
  2136  0D9F                     	;# 
  2137  0DA0                     	;# 
  2138  0DA1                     	;# 
  2139  0DA1                     	;# 
  2140  0DA2                     	;# 
  2141  0DA3                     	;# 
  2142  0DA3                     	;# 
  2143  0DA4                     	;# 
  2144  0DA5                     	;# 
  2145  0DA5                     	;# 
  2146  0DA6                     	;# 
  2147  0DA7                     	;# 
  2148  0DA7                     	;# 
  2149  0DA8                     	;# 
  2150  0DA9                     	;# 
  2151  0DA9                     	;# 
  2152  0DAA                     	;# 
  2153  0DAB                     	;# 
  2154  0DAC                     	;# 
  2155  0DAC                     	;# 
  2156  0DAD                     	;# 
  2157  0DAD                     	;# 
  2158  0DAE                     	;# 
  2159  0DAF                     	;# 
  2160  0DB0                     	;# 
  2161  0DB1                     	;# 
  2162  0DB1                     	;# 
  2163  0DB2                     	;# 
  2164  0DB3                     	;# 
  2165  0DB3                     	;# 
  2166  0DB4                     	;# 
  2167  0DB5                     	;# 
  2168  0DB5                     	;# 
  2169  0DB6                     	;# 
  2170  0DB7                     	;# 
  2171  0DB7                     	;# 
  2172  0DB8                     	;# 
  2173  0DB9                     	;# 
  2174  0DB9                     	;# 
  2175  0DBA                     	;# 
  2176  0DBB                     	;# 
  2177  0DBC                     	;# 
  2178  0DBC                     	;# 
  2179  0DBD                     	;# 
  2180  0DBD                     	;# 
  2181  0DBE                     	;# 
  2182  0DBF                     	;# 
  2183  0DC0                     	;# 
  2184  0DC1                     	;# 
  2185  0DC1                     	;# 
  2186  0DC2                     	;# 
  2187  0DC3                     	;# 
  2188  0DC3                     	;# 
  2189  0DC4                     	;# 
  2190  0DC5                     	;# 
  2191  0DC5                     	;# 
  2192  0DC6                     	;# 
  2193  0DC7                     	;# 
  2194  0DC7                     	;# 
  2195  0DC8                     	;# 
  2196  0DC9                     	;# 
  2197  0DC9                     	;# 
  2198  0DCA                     	;# 
  2199  0DCB                     	;# 
  2200  0DCC                     	;# 
  2201  0DCC                     	;# 
  2202  0DCD                     	;# 
  2203  0DCD                     	;# 
  2204  0DCE                     	;# 
  2205  0DCF                     	;# 
  2206  0DD0                     	;# 
  2207  0E0F                     	;# 
  2208  0E10                     	;# 
  2209  0E11                     	;# 
  2210  0E12                     	;# 
  2211  0E13                     	;# 
  2212  0E14                     	;# 
  2213  0E15                     	;# 
  2214  0E16                     	;# 
  2215  0E17                     	;# 
  2216  0E90                     	;# 
  2217  0E91                     	;# 
  2218  0E92                     	;# 
  2219  0E94                     	;# 
  2220  0E95                     	;# 
  2221  0EA0                     	;# 
  2222  0EA1                     	;# 
  2223  0EA2                     	;# 
  2224  0EA3                     	;# 
  2225  0EA4                     	;# 
  2226  0EA5                     	;# 
  2227  0FE4                     	;# 
  2228  0FE5                     	;# 
  2229  0FE6                     	;# 
  2230  0FE7                     	;# 
  2231  0FE8                     	;# 
  2232  0FE8                     	;# 
  2233  0FE9                     	;# 
  2234  0FEA                     	;# 
  2235  0FEA                     	;# 
  2236  0FEB                     	;# 
  2237  0FED                     	;# 
  2238  0FEE                     	;# 
  2239  0FEE                     	;# 
  2240  0FEF                     	;# 
  2241  0000                     	;# 
  2242  0001                     	;# 
  2243  0002                     	;# 
  2244  0003                     	;# 
  2245  0004                     	;# 
  2246  0005                     	;# 
  2247  0006                     	;# 
  2248  0007                     	;# 
  2249  0008                     	;# 
  2250  0009                     	;# 
  2251  000A                     	;# 
  2252  000B                     	;# 
  2253  000C                     	;# 
  2254  000E                     	;# 
  2255  0011                     	;# 
  2256  0012                     	;# 
  2257  0013                     	;# 
  2258  0015                     	;# 
  2259  0016                     	;# 
  2260  0016                     	;# 
  2261  0017                     	;# 
  2262  0018                     	;# 
  2263  0019                     	;# 
  2264  001A                     	;# 
  2265  001B                     	;# 
  2266  001C                     	;# 
  2267  008C                     	;# 
  2268  008E                     	;# 
  2269  0091                     	;# 
  2270  0092                     	;# 
  2271  0093                     	;# 
  2272  0095                     	;# 
  2273  0096                     	;# 
  2274  0097                     	;# 
  2275  0098                     	;# 
  2276  0099                     	;# 
  2277  009A                     	;# 
  2278  009B                     	;# 
  2279  009B                     	;# 
  2280  009C                     	;# 
  2281  009D                     	;# 
  2282  009E                     	;# 
  2283  009F                     	;# 
  2284  010C                     	;# 
  2285  010E                     	;# 
  2286  0111                     	;# 
  2287  0112                     	;# 
  2288  0113                     	;# 
  2289  0114                     	;# 
  2290  0115                     	;# 
  2291  0116                     	;# 
  2292  0117                     	;# 
  2293  0118                     	;# 
  2294  0119                     	;# 
  2295  018C                     	;# 
  2296  018E                     	;# 
  2297  0191                     	;# 
  2298  0191                     	;# 
  2299  0192                     	;# 
  2300  0193                     	;# 
  2301  0193                     	;# 
  2302  0194                     	;# 
  2303  0195                     	;# 
  2304  0196                     	;# 
  2305  0197                     	;# 
  2306  0199                     	;# 
  2307  019A                     	;# 
  2308  019B                     	;# 
  2309  019B                     	;# 
  2310  019C                     	;# 
  2311  019D                     	;# 
  2312  019E                     	;# 
  2313  019F                     	;# 
  2314  020C                     	;# 
  2315  020E                     	;# 
  2316  028C                     	;# 
  2317  028E                     	;# 
  2318  030C                     	;# 
  2319  030E                     	;# 
  2320  038C                     	;# 
  2321  038E                     	;# 
  2322  0391                     	;# 
  2323  0392                     	;# 
  2324  0393                     	;# 
  2325  0397                     	;# 
  2326  0398                     	;# 
  2327  0399                     	;# 
  2328  0691                     	;# 
  2329  0692                     	;# 
  2330  0693                     	;# 
  2331  0694                     	;# 
  2332  0695                     	;# 
  2333  0D8E                     	;# 
  2334  0D8F                     	;# 
  2335  0D90                     	;# 
  2336  0D91                     	;# 
  2337  0D91                     	;# 
  2338  0D92                     	;# 
  2339  0D93                     	;# 
  2340  0D93                     	;# 
  2341  0D94                     	;# 
  2342  0D95                     	;# 
  2343  0D95                     	;# 
  2344  0D96                     	;# 
  2345  0D97                     	;# 
  2346  0D97                     	;# 
  2347  0D98                     	;# 
  2348  0D99                     	;# 
  2349  0D99                     	;# 
  2350  0D9A                     	;# 
  2351  0D9B                     	;# 
  2352  0D9C                     	;# 
  2353  0D9C                     	;# 
  2354  0D9D                     	;# 
  2355  0D9D                     	;# 
  2356  0D9E                     	;# 
  2357  0D9F                     	;# 
  2358  0DA0                     	;# 
  2359  0DA1                     	;# 
  2360  0DA1                     	;# 
  2361  0DA2                     	;# 
  2362  0DA3                     	;# 
  2363  0DA3                     	;# 
  2364  0DA4                     	;# 
  2365  0DA5                     	;# 
  2366  0DA5                     	;# 
  2367  0DA6                     	;# 
  2368  0DA7                     	;# 
  2369  0DA7                     	;# 
  2370  0DA8                     	;# 
  2371  0DA9                     	;# 
  2372  0DA9                     	;# 
  2373  0DAA                     	;# 
  2374  0DAB                     	;# 
  2375  0DAC                     	;# 
  2376  0DAC                     	;# 
  2377  0DAD                     	;# 
  2378  0DAD                     	;# 
  2379  0DAE                     	;# 
  2380  0DAF                     	;# 
  2381  0DB0                     	;# 
  2382  0DB1                     	;# 
  2383  0DB1                     	;# 
  2384  0DB2                     	;# 
  2385  0DB3                     	;# 
  2386  0DB3                     	;# 
  2387  0DB4                     	;# 
  2388  0DB5                     	;# 
  2389  0DB5                     	;# 
  2390  0DB6                     	;# 
  2391  0DB7                     	;# 
  2392  0DB7                     	;# 
  2393  0DB8                     	;# 
  2394  0DB9                     	;# 
  2395  0DB9                     	;# 
  2396  0DBA                     	;# 
  2397  0DBB                     	;# 
  2398  0DBC                     	;# 
  2399  0DBC                     	;# 
  2400  0DBD                     	;# 
  2401  0DBD                     	;# 
  2402  0DBE                     	;# 
  2403  0DBF                     	;# 
  2404  0DC0                     	;# 
  2405  0DC1                     	;# 
  2406  0DC1                     	;# 
  2407  0DC2                     	;# 
  2408  0DC3                     	;# 
  2409  0DC3                     	;# 
  2410  0DC4                     	;# 
  2411  0DC5                     	;# 
  2412  0DC5                     	;# 
  2413  0DC6                     	;# 
  2414  0DC7                     	;# 
  2415  0DC7                     	;# 
  2416  0DC8                     	;# 
  2417  0DC9                     	;# 
  2418  0DC9                     	;# 
  2419  0DCA                     	;# 
  2420  0DCB                     	;# 
  2421  0DCC                     	;# 
  2422  0DCC                     	;# 
  2423  0DCD                     	;# 
  2424  0DCD                     	;# 
  2425  0DCE                     	;# 
  2426  0DCF                     	;# 
  2427  0DD0                     	;# 
  2428  0E0F                     	;# 
  2429  0E10                     	;# 
  2430  0E11                     	;# 
  2431  0E12                     	;# 
  2432  0E13                     	;# 
  2433  0E14                     	;# 
  2434  0E15                     	;# 
  2435  0E16                     	;# 
  2436  0E17                     	;# 
  2437  0E90                     	;# 
  2438  0E91                     	;# 
  2439  0E92                     	;# 
  2440  0E94                     	;# 
  2441  0E95                     	;# 
  2442  0EA0                     	;# 
  2443  0EA1                     	;# 
  2444  0EA2                     	;# 
  2445  0EA3                     	;# 
  2446  0EA4                     	;# 
  2447  0EA5                     	;# 
  2448  0FE4                     	;# 
  2449  0FE5                     	;# 
  2450  0FE6                     	;# 
  2451  0FE7                     	;# 
  2452  0FE8                     	;# 
  2453  0FE8                     	;# 
  2454  0FE9                     	;# 
  2455  0FEA                     	;# 
  2456  0FEA                     	;# 
  2457  0FEB                     	;# 
  2458  0FED                     	;# 
  2459  0FEE                     	;# 
  2460  0FEE                     	;# 
  2461  0FEF                     	;# 
  2462  0FFF                     	;# 
  2463  0000                     	;# 
  2464  0001                     	;# 
  2465  0002                     	;# 
  2466  0003                     	;# 
  2467  0004                     	;# 
  2468  0005                     	;# 
  2469  0006                     	;# 
  2470  0007                     	;# 
  2471  0008                     	;# 
  2472  0009                     	;# 
  2473  000A                     	;# 
  2474  000B                     	;# 
  2475  000C                     	;# 
  2476  000E                     	;# 
  2477  0011                     	;# 
  2478  0012                     	;# 
  2479  0013                     	;# 
  2480  0015                     	;# 
  2481  0016                     	;# 
  2482  0016                     	;# 
  2483  0017                     	;# 
  2484  0018                     	;# 
  2485  0019                     	;# 
  2486  001A                     	;# 
  2487  001B                     	;# 
  2488  001C                     	;# 
  2489  008C                     	;# 
  2490  008E                     	;# 
  2491  0091                     	;# 
  2492  0092                     	;# 
  2493  0093                     	;# 
  2494  0095                     	;# 
  2495  0096                     	;# 
  2496  0097                     	;# 
  2497  0098                     	;# 
  2498  0099                     	;# 
  2499  009A                     	;# 
  2500  009B                     	;# 
  2501  009B                     	;# 
  2502  009C                     	;# 
  2503  009D                     	;# 
  2504  009E                     	;# 
  2505  009F                     	;# 
  2506  010C                     	;# 
  2507  010E                     	;# 
  2508  0111                     	;# 
  2509  0112                     	;# 
  2510  0113                     	;# 
  2511  0114                     	;# 
  2512  0115                     	;# 
  2513  0116                     	;# 
  2514  0117                     	;# 
  2515  0118                     	;# 
  2516  0119                     	;# 
  2517  018C                     	;# 
  2518  018E                     	;# 
  2519  0191                     	;# 
  2520  0191                     	;# 
  2521  0192                     	;# 
  2522  0193                     	;# 
  2523  0193                     	;# 
  2524  0194                     	;# 
  2525  0195                     	;# 
  2526  0196                     	;# 
  2527  0197                     	;# 
  2528  0199                     	;# 
  2529  019A                     	;# 
  2530  019B                     	;# 
  2531  019B                     	;# 
  2532  019C                     	;# 
  2533  019D                     	;# 
  2534  019E                     	;# 
  2535  019F                     	;# 
  2536  020C                     	;# 
  2537  020E                     	;# 
  2538  028C                     	;# 
  2539  028E                     	;# 
  2540  030C                     	;# 
  2541  030E                     	;# 
  2542  038C                     	;# 
  2543  038E                     	;# 
  2544  0391                     	;# 
  2545  0392                     	;# 
  2546  0393                     	;# 
  2547  0397                     	;# 
  2548  0398                     	;# 
  2549  0399                     	;# 
  2550  0691                     	;# 
  2551  0692                     	;# 
  2552  0693                     	;# 
  2553  0694                     	;# 
  2554  0695                     	;# 
  2555  0D8E                     	;# 
  2556  0D8F                     	;# 
  2557  0D90                     	;# 
  2558  0D91                     	;# 
  2559  0D91                     	;# 
  2560  0D92                     	;# 
  2561  0D93                     	;# 
  2562  0D93                     	;# 
  2563  0D94                     	;# 
  2564  0D95                     	;# 
  2565  0D95                     	;# 
  2566  0D96                     	;# 
  2567  0D97                     	;# 
  2568  0D97                     	;# 
  2569  0D98                     	;# 
  2570  0D99                     	;# 
  2571  0D99                     	;# 
  2572  0D9A                     	;# 
  2573  0D9B                     	;# 
  2574  0D9C                     	;# 
  2575  0D9C                     	;# 
  2576  0D9D                     	;# 
  2577  0D9D                     	;# 
  2578  0D9E                     	;# 
  2579  0D9F                     	;# 
  2580  0DA0                     	;# 
  2581  0DA1                     	;# 
  2582  0DA1                     	;# 
  2583  0DA2                     	;# 
  2584  0DA3                     	;# 
  2585  0DA3                     	;# 
  2586  0DA4                     	;# 
  2587  0DA5                     	;# 
  2588  0DA5                     	;# 
  2589  0DA6                     	;# 
  2590  0DA7                     	;# 
  2591  0DA7                     	;# 
  2592  0DA8                     	;# 
  2593  0DA9                     	;# 
  2594  0DA9                     	;# 
  2595  0DAA                     	;# 
  2596  0DAB                     	;# 
  2597  0DAC                     	;# 
  2598  0DAC                     	;# 
  2599  0DAD                     	;# 
  2600  0DAD                     	;# 
  2601  0DAE                     	;# 
  2602  0DAF                     	;# 
  2603  0DB0                     	;# 
  2604  0DB1                     	;# 
  2605  0DB1                     	;# 
  2606  0DB2                     	;# 
  2607  0DB3                     	;# 
  2608  0DB3                     	;# 
  2609  0DB4                     	;# 
  2610  0DB5                     	;# 
  2611  0DB5                     	;# 
  2612  0DB6                     	;# 
  2613  0DB7                     	;# 
  2614  0DB7                     	;# 
  2615  0DB8                     	;# 
  2616  0DB9                     	;# 
  2617  0DB9                     	;# 
  2618  0DBA                     	;# 
  2619  0DBB                     	;# 
  2620  0DBC                     	;# 
  2621  0DBC                     	;# 
  2622  0DBD                     	;# 
  2623  0DBD                     	;# 
  2624  0DBE                     	;# 
  2625  0DBF                     	;# 
  2626  0DC0                     	;# 
  2627  0DC1                     	;# 
  2628  0DC1                     	;# 
  2629  0DC2                     	;# 
  2630  0DC3                     	;# 
  2631  0DC3                     	;# 
  2632  0DC4                     	;# 
  2633  0DC5                     	;# 
  2634  0DC5                     	;# 
  2635  0DC6                     	;# 
  2636  0DC7                     	;# 
  2637  0DC7                     	;# 
  2638  0DC8                     	;# 
  2639  0DC9                     	;# 
  2640  0DC9                     	;# 
  2641  0DCA                     	;# 
  2642  0DCB                     	;# 
  2643  0DCC                     	;# 
  2644  0DCC                     	;# 
  2645  0DCD                     	;# 
  2646  0DCD                     	;# 
  2647  0DCE                     	;# 
  2648  0DCF                     	;# 
  2649  0DD0                     	;# 
  2650  0E0F                     	;# 
  2651  0E10                     	;# 
  2652  0E11                     	;# 
  2653  0E12                     	;# 
  2654  0E13                     	;# 
  2655  0E14                     	;# 
  2656  0E15                     	;# 
  2657  0E16                     	;# 
  2658  0E17                     	;# 
  2659  0E90                     	;# 
  2660  0E91                     	;# 
  2661  0E92                     	;# 
  2662  0E94                     	;# 
  2663  0E95                     	;# 
  2664  0EA0                     	;# 
  2665  0EA1                     	;# 
  2666  0EA2                     	;# 
  2667  0EA3                     	;# 
  2668  0EA4                     	;# 
  2669  0EA5                     	;# 
  2670  0FE4                     	;# 
  2671  0FE5                     	;# 
  2672  0FE6                     	;# 
  2673  0FE7                     	;# 
  2674  0FE8                     	;# 
  2675  0FE8                     	;# 
  2676  0FE9                     	;# 
  2677  0FEA                     	;# 
  2678  0FEA                     	;# 
  2679  0FEB                     	;# 
  2680  0FED                     	;# 
  2681  0FEE                     	;# 
  2682  0FEE                     	;# 
  2683  0FEF                     	;# 
  2684  0FFF                     	;# 
  2685  0000                     	;# 
  2686  0001                     	;# 
  2687  0002                     	;# 
  2688  0003                     	;# 
  2689  0004                     	;# 
  2690  0005                     	;# 
  2691  0006                     	;# 
  2692  0007                     	;# 
  2693  0008                     	;# 
  2694  0009                     	;# 
  2695  000A                     	;# 
  2696  000B                     	;# 
  2697  000C                     	;# 
  2698  000E                     	;# 
  2699  0011                     	;# 
  2700  0012                     	;# 
  2701  0013                     	;# 
  2702  0015                     	;# 
  2703  0016                     	;# 
  2704  0016                     	;# 
  2705  0017                     	;# 
  2706  0018                     	;# 
  2707  0019                     	;# 
  2708  001A                     	;# 
  2709  001B                     	;# 
  2710  001C                     	;# 
  2711  008C                     	;# 
  2712  008E                     	;# 
  2713  0091                     	;# 
  2714  0092                     	;# 
  2715  0093                     	;# 
  2716  0095                     	;# 
  2717  0096                     	;# 
  2718  0097                     	;# 
  2719  0098                     	;# 
  2720  0099                     	;# 
  2721  009A                     	;# 
  2722  009B                     	;# 
  2723  009B                     	;# 
  2724  009C                     	;# 
  2725  009D                     	;# 
  2726  009E                     	;# 
  2727  009F                     	;# 
  2728  010C                     	;# 
  2729  010E                     	;# 
  2730  0111                     	;# 
  2731  0112                     	;# 
  2732  0113                     	;# 
  2733  0114                     	;# 
  2734  0115                     	;# 
  2735  0116                     	;# 
  2736  0117                     	;# 
  2737  0118                     	;# 
  2738  0119                     	;# 
  2739  018C                     	;# 
  2740  018E                     	;# 
  2741  0191                     	;# 
  2742  0191                     	;# 
  2743  0192                     	;# 
  2744  0193                     	;# 
  2745  0193                     	;# 
  2746  0194                     	;# 
  2747  0195                     	;# 
  2748  0196                     	;# 
  2749  0197                     	;# 
  2750  0199                     	;# 
  2751  019A                     	;# 
  2752  019B                     	;# 
  2753  019B                     	;# 
  2754  019C                     	;# 
  2755  019D                     	;# 
  2756  019E                     	;# 
  2757  019F                     	;# 
  2758  020C                     	;# 
  2759  020E                     	;# 
  2760  028C                     	;# 
  2761  028E                     	;# 
  2762  030C                     	;# 
  2763  030E                     	;# 
  2764  038C                     	;# 
  2765  038E                     	;# 
  2766  0391                     	;# 
  2767  0392                     	;# 
  2768  0393                     	;# 
  2769  0397                     	;# 
  2770  0398                     	;# 
  2771  0399                     	;# 
  2772  0691                     	;# 
  2773  0692                     	;# 
  2774  0693                     	;# 
  2775  0694                     	;# 
  2776  0695                     	;# 
  2777  0D8E                     	;# 
  2778  0D8F                     	;# 
  2779  0D90                     	;# 
  2780  0D91                     	;# 
  2781  0D91                     	;# 
  2782  0D92                     	;# 
  2783  0D93                     	;# 
  2784  0D93                     	;# 
  2785  0D94                     	;# 
  2786  0D95                     	;# 
  2787  0D95                     	;# 
  2788  0D96                     	;# 
  2789  0D97                     	;# 
  2790  0D97                     	;# 
  2791  0D98                     	;# 
  2792  0D99                     	;# 
  2793  0D99                     	;# 
  2794  0D9A                     	;# 
  2795  0D9B                     	;# 
  2796  0D9C                     	;# 
  2797  0D9C                     	;# 
  2798  0D9D                     	;# 
  2799  0D9D                     	;# 
  2800  0D9E                     	;# 
  2801  0D9F                     	;# 
  2802  0DA0                     	;# 
  2803  0DA1                     	;# 
  2804  0DA1                     	;# 
  2805  0DA2                     	;# 
  2806  0DA3                     	;# 
  2807  0DA3                     	;# 
  2808  0DA4                     	;# 
  2809  0DA5                     	;# 
  2810  0DA5                     	;# 
  2811  0DA6                     	;# 
  2812  0DA7                     	;# 
  2813  0DA7                     	;# 
  2814  0DA8                     	;# 
  2815  0DA9                     	;# 
  2816  0DA9                     	;# 
  2817  0DAA                     	;# 
  2818  0DAB                     	;# 
  2819  0DAC                     	;# 
  2820  0DAC                     	;# 
  2821  0DAD                     	;# 
  2822  0DAD                     	;# 
  2823  0DAE                     	;# 
  2824  0DAF                     	;# 
  2825  0DB0                     	;# 
  2826  0DB1                     	;# 
  2827  0DB1                     	;# 
  2828  0DB2                     	;# 
  2829  0DB3                     	;# 
  2830  0DB3                     	;# 
  2831  0DB4                     	;# 
  2832  0DB5                     	;# 
  2833  0DB5                     	;# 
  2834  0DB6                     	;# 
  2835  0DB7                     	;# 
  2836  0DB7                     	;# 
  2837  0DB8                     	;# 
  2838  0DB9                     	;# 
  2839  0DB9                     	;# 
  2840  0DBA                     	;# 
  2841  0DBB                     	;# 
  2842  0DBC                     	;# 
  2843  0DBC                     	;# 
  2844  0DBD                     	;# 
  2845  0DBD                     	;# 
  2846  0DBE                     	;# 
  2847  0DBF                     	;# 
  2848  0DC0                     	;# 
  2849  0DC1                     	;# 
  2850  0DC1                     	;# 
  2851  0DC2                     	;# 
  2852  0DC3                     	;# 
  2853  0DC3                     	;# 
  2854  0DC4                     	;# 
  2855  0DC5                     	;# 
  2856  0DC5                     	;# 
  2857  0DC6                     	;# 
  2858  0DC7                     	;# 
  2859  0DC7                     	;# 
  2860  0DC8                     	;# 
  2861  0DC9                     	;# 
  2862  0DC9                     	;# 
  2863  0DCA                     	;# 
  2864  0DCB                     	;# 
  2865  0DCC                     	;# 
  2866  0DCC                     	;# 
  2867  0DCD                     	;# 
  2868  0DCD                     	;# 
  2869  0DCE                     	;# 
  2870  0DCF                     	;# 
  2871  0DD0                     	;# 
  2872  0E0F                     	;# 
  2873  0E10                     	;# 
  2874  0E11                     	;# 
  2875  0E12                     	;# 
  2876  0E13                     	;# 
  2877  0E14                     	;# 
  2878  0E15                     	;# 
  2879  0E16                     	;# 
  2880  0E17                     	;# 
  2881  0E90                     	;# 
  2882  0E91                     	;# 
  2883  0E92                     	;# 
  2884  0E94                     	;# 
  2885  0E95                     	;# 
  2886  0EA0                     	;# 
  2887  0EA1                     	;# 
  2888  0EA2                     	;# 
  2889  0EA3                     	;# 
  2890  0EA4                     	;# 
  2891  0EA5                     	;# 
  2892  0FE4                     	;# 
  2893  0FE5                     	;# 
  2894  0FE6                     	;# 
  2895  0FE7                     	;# 
  2896  0FE8                     	;# 
  2897  0FE8                     	;# 
  2898  0FE9                     	;# 
  2899  0FEA                     	;# 
  2900  0FEA                     	;# 
  2901  0FEB                     	;# 
  2902  0FED                     	;# 
  2903  0FEE                     	;# 
  2904  0FEE                     	;# 
  2905  0FEF                     	;# 
  2906  0FFF                     	;# 
  2907  0000                     	;# 
  2908  0001                     	;# 
  2909  0002                     	;# 
  2910  0003                     	;# 
  2911  0004                     	;# 
  2912  0005                     	;# 
  2913  0006                     	;# 
  2914  0007                     	;# 
  2915  0008                     	;# 
  2916  0009                     	;# 
  2917  000A                     	;# 
  2918  000B                     	;# 
  2919  000C                     	;# 
  2920  000E                     	;# 
  2921  0011                     	;# 
  2922  0012                     	;# 
  2923  0013                     	;# 
  2924  0015                     	;# 
  2925  0016                     	;# 
  2926  0016                     	;# 
  2927  0017                     	;# 
  2928  0018                     	;# 
  2929  0019                     	;# 
  2930  001A                     	;# 
  2931  001B                     	;# 
  2932  001C                     	;# 
  2933  008C                     	;# 
  2934  008E                     	;# 
  2935  0091                     	;# 
  2936  0092                     	;# 
  2937  0093                     	;# 
  2938  0095                     	;# 
  2939  0096                     	;# 
  2940  0097                     	;# 
  2941  0098                     	;# 
  2942  0099                     	;# 
  2943  009A                     	;# 
  2944  009B                     	;# 
  2945  009B                     	;# 
  2946  009C                     	;# 
  2947  009D                     	;# 
  2948  009E                     	;# 
  2949  009F                     	;# 
  2950  010C                     	;# 
  2951  010E                     	;# 
  2952  0111                     	;# 
  2953  0112                     	;# 
  2954  0113                     	;# 
  2955  0114                     	;# 
  2956  0115                     	;# 
  2957  0116                     	;# 
  2958  0117                     	;# 
  2959  0118                     	;# 
  2960  0119                     	;# 
  2961  018C                     	;# 
  2962  018E                     	;# 
  2963  0191                     	;# 
  2964  0191                     	;# 
  2965  0192                     	;# 
  2966  0193                     	;# 
  2967  0193                     	;# 
  2968  0194                     	;# 
  2969  0195                     	;# 
  2970  0196                     	;# 
  2971  0197                     	;# 
  2972  0199                     	;# 
  2973  019A                     	;# 
  2974  019B                     	;# 
  2975  019B                     	;# 
  2976  019C                     	;# 
  2977  019D                     	;# 
  2978  019E                     	;# 
  2979  019F                     	;# 
  2980  020C                     	;# 
  2981  020E                     	;# 
  2982  028C                     	;# 
  2983  028E                     	;# 
  2984  030C                     	;# 
  2985  030E                     	;# 
  2986  038C                     	;# 
  2987  038E                     	;# 
  2988  0391                     	;# 
  2989  0392                     	;# 
  2990  0393                     	;# 
  2991  0397                     	;# 
  2992  0398                     	;# 
  2993  0399                     	;# 
  2994  0691                     	;# 
  2995  0692                     	;# 
  2996  0693                     	;# 
  2997  0694                     	;# 
  2998  0695                     	;# 
  2999  0D8E                     	;# 
  3000  0D8F                     	;# 
  3001  0D90                     	;# 
  3002  0D91                     	;# 
  3003  0D91                     	;# 
  3004  0D92                     	;# 
  3005  0D93                     	;# 
  3006  0D93                     	;# 
  3007  0D94                     	;# 
  3008  0D95                     	;# 
  3009  0D95                     	;# 
  3010  0D96                     	;# 
  3011  0D97                     	;# 
  3012  0D97                     	;# 
  3013  0D98                     	;# 
  3014  0D99                     	;# 
  3015  0D99                     	;# 
  3016  0D9A                     	;# 
  3017  0D9B                     	;# 
  3018  0D9C                     	;# 
  3019  0D9C                     	;# 
  3020  0D9D                     	;# 
  3021  0D9D                     	;# 
  3022  0D9E                     	;# 
  3023  0D9F                     	;# 
  3024  0DA0                     	;# 
  3025  0DA1                     	;# 
  3026  0DA1                     	;# 
  3027  0DA2                     	;# 
  3028  0DA3                     	;# 
  3029  0DA3                     	;# 
  3030  0DA4                     	;# 
  3031  0DA5                     	;# 
  3032  0DA5                     	;# 
  3033  0DA6                     	;# 
  3034  0DA7                     	;# 
  3035  0DA7                     	;# 
  3036  0DA8                     	;# 
  3037  0DA9                     	;# 
  3038  0DA9                     	;# 
  3039  0DAA                     	;# 
  3040  0DAB                     	;# 
  3041  0DAC                     	;# 
  3042  0DAC                     	;# 
  3043  0DAD                     	;# 
  3044  0DAD                     	;# 
  3045  0DAE                     	;# 
  3046  0DAF                     	;# 
  3047  0DB0                     	;# 
  3048  0DB1                     	;# 
  3049  0DB1                     	;# 
  3050  0DB2                     	;# 
  3051  0DB3                     	;# 
  3052  0DB3                     	;# 
  3053  0DB4                     	;# 
  3054  0DB5                     	;# 
  3055  0DB5                     	;# 
  3056  0DB6                     	;# 
  3057  0DB7                     	;# 
  3058  0DB7                     	;# 
  3059  0DB8                     	;# 
  3060  0DB9                     	;# 
  3061  0DB9                     	;# 
  3062  0DBA                     	;# 
  3063  0DBB                     	;# 
  3064  0DBC                     	;# 
  3065  0DBC                     	;# 
  3066  0DBD                     	;# 
  3067  0DBD                     	;# 
  3068  0DBE                     	;# 
  3069  0DBF                     	;# 
  3070  0DC0                     	;# 
  3071  0DC1                     	;# 
  3072  0DC1                     	;# 
  3073  0DC2                     	;# 
  3074  0DC3                     	;# 
  3075  0DC3                     	;# 
  3076  0DC4                     	;# 
  3077  0DC5                     	;# 
  3078  0DC5                     	;# 
  3079  0DC6                     	;# 
  3080  0DC7                     	;# 
  3081  0DC7                     	;# 
  3082  0DC8                     	;# 
  3083  0DC9                     	;# 
  3084  0DC9                     	;# 
  3085  0DCA                     	;# 
  3086  0DCB                     	;# 
  3087  0DCC                     	;# 
  3088  0DCC                     	;# 
  3089  0DCD                     	;# 
  3090  0DCD                     	;# 
  3091  0DCE                     	;# 
  3092  0DCF                     	;# 
  3093  0DD0                     	;# 
  3094  0E0F                     	;# 
  3095  0E10                     	;# 
  3096  0E11                     	;# 
  3097  0E12                     	;# 
  3098  0E13                     	;# 
  3099  0E14                     	;# 
  3100  0E15                     	;# 
  3101  0E16                     	;# 
  3102  0E17                     	;# 
  3103  0E90                     	;# 
  3104  0E91                     	;# 
  3105  0E92                     	;# 
  3106  0E94                     	;# 
  3107  0E95                     	;# 
  3108  0EA0                     	;# 
  3109  0EA1                     	;# 
  3110  0EA2                     	;# 
  3111  0EA3                     	;# 
  3112  0EA4                     	;# 
  3113  0EA5                     	;# 
  3114  0FE4                     	;# 
  3115  0FE5                     	;# 
  3116  0FE6                     	;# 
  3117  0FE7                     	;# 
  3118  0FE8                     	;# 
  3119  0FE8                     	;# 
  3120  0FE9                     	;# 
  3121  0FEA                     	;# 
  3122  0FEA                     	;# 
  3123  0FEB                     	;# 
  3124  0FED                     	;# 
  3125  0FEE                     	;# 
  3126  0FEE                     	;# 
  3127  0FEF                     	;# 
  3128  0FFF                     	;# 
  3129  0000                     	;# 
  3130  0001                     	;# 
  3131  0002                     	;# 
  3132  0003                     	;# 
  3133  0004                     	;# 
  3134  0005                     	;# 
  3135  0006                     	;# 
  3136  0007                     	;# 
  3137  0008                     	;# 
  3138  0009                     	;# 
  3139  000A                     	;# 
  3140  000B                     	;# 
  3141  000C                     	;# 
  3142  000E                     	;# 
  3143  0011                     	;# 
  3144  0012                     	;# 
  3145  0013                     	;# 
  3146  0015                     	;# 
  3147  0016                     	;# 
  3148  0016                     	;# 
  3149  0017                     	;# 
  3150  0018                     	;# 
  3151  0019                     	;# 
  3152  001A                     	;# 
  3153  001B                     	;# 
  3154  001C                     	;# 
  3155  008C                     	;# 
  3156  008E                     	;# 
  3157  0091                     	;# 
  3158  0092                     	;# 
  3159  0093                     	;# 
  3160  0095                     	;# 
  3161  0096                     	;# 
  3162  0097                     	;# 
  3163  0098                     	;# 
  3164  0099                     	;# 
  3165  009A                     	;# 
  3166  009B                     	;# 
  3167  009B                     	;# 
  3168  009C                     	;# 
  3169  009D                     	;# 
  3170  009E                     	;# 
  3171  009F                     	;# 
  3172  010C                     	;# 
  3173  010E                     	;# 
  3174  0111                     	;# 
  3175  0112                     	;# 
  3176  0113                     	;# 
  3177  0114                     	;# 
  3178  0115                     	;# 
  3179  0116                     	;# 
  3180  0117                     	;# 
  3181  0118                     	;# 
  3182  0119                     	;# 
  3183  018C                     	;# 
  3184  018E                     	;# 
  3185  0191                     	;# 
  3186  0191                     	;# 
  3187  0192                     	;# 
  3188  0193                     	;# 
  3189  0193                     	;# 
  3190  0194                     	;# 
  3191  0195                     	;# 
  3192  0196                     	;# 
  3193  0197                     	;# 
  3194  0199                     	;# 
  3195  019A                     	;# 
  3196  019B                     	;# 
  3197  019B                     	;# 
  3198  019C                     	;# 
  3199  019D                     	;# 
  3200  019E                     	;# 
  3201  019F                     	;# 
  3202  020C                     	;# 
  3203  020E                     	;# 
  3204  028C                     	;# 
  3205  028E                     	;# 
  3206  030C                     	;# 
  3207  030E                     	;# 
  3208  038C                     	;# 
  3209  038E                     	;# 
  3210  0391                     	;# 
  3211  0392                     	;# 
  3212  0393                     	;# 
  3213  0397                     	;# 
  3214  0398                     	;# 
  3215  0399                     	;# 
  3216  0691                     	;# 
  3217  0692                     	;# 
  3218  0693                     	;# 
  3219  0694                     	;# 
  3220  0695                     	;# 
  3221  0D8E                     	;# 
  3222  0D8F                     	;# 
  3223  0D90                     	;# 
  3224  0D91                     	;# 
  3225  0D91                     	;# 
  3226  0D92                     	;# 
  3227  0D93                     	;# 
  3228  0D93                     	;# 
  3229  0D94                     	;# 
  3230  0D95                     	;# 
  3231  0D95                     	;# 
  3232  0D96                     	;# 
  3233  0D97                     	;# 
  3234  0D97                     	;# 
  3235  0D98                     	;# 
  3236  0D99                     	;# 
  3237  0D99                     	;# 
  3238  0D9A                     	;# 
  3239  0D9B                     	;# 
  3240  0D9C                     	;# 
  3241  0D9C                     	;# 
  3242  0D9D                     	;# 
  3243  0D9D                     	;# 
  3244  0D9E                     	;# 
  3245  0D9F                     	;# 
  3246  0DA0                     	;# 
  3247  0DA1                     	;# 
  3248  0DA1                     	;# 
  3249  0DA2                     	;# 
  3250  0DA3                     	;# 
  3251  0DA3                     	;# 
  3252  0DA4                     	;# 
  3253  0DA5                     	;# 
  3254  0DA5                     	;# 
  3255  0DA6                     	;# 
  3256  0DA7                     	;# 
  3257  0DA7                     	;# 
  3258  0DA8                     	;# 
  3259  0DA9                     	;# 
  3260  0DA9                     	;# 
  3261  0DAA                     	;# 
  3262  0DAB                     	;# 
  3263  0DAC                     	;# 
  3264  0DAC                     	;# 
  3265  0DAD                     	;# 
  3266  0DAD                     	;# 
  3267  0DAE                     	;# 
  3268  0DAF                     	;# 
  3269  0DB0                     	;# 
  3270  0DB1                     	;# 
  3271  0DB1                     	;# 
  3272  0DB2                     	;# 
  3273  0DB3                     	;# 
  3274  0DB3                     	;# 
  3275  0DB4                     	;# 
  3276  0DB5                     	;# 
  3277  0DB5                     	;# 
  3278  0DB6                     	;# 
  3279  0DB7                     	;# 
  3280  0DB7                     	;# 
  3281  0DB8                     	;# 
  3282  0DB9                     	;# 
  3283  0DB9                     	;# 
  3284  0DBA                     	;# 
  3285  0DBB                     	;# 
  3286  0DBC                     	;# 
  3287  0DBC                     	;# 
  3288  0DBD                     	;# 
  3289  0DBD                     	;# 
  3290  0DBE                     	;# 
  3291  0DBF                     	;# 
  3292  0DC0                     	;# 
  3293  0DC1                     	;# 
  3294  0DC1                     	;# 
  3295  0DC2                     	;# 
  3296  0DC3                     	;# 
  3297  0DC3                     	;# 
  3298  0DC4                     	;# 
  3299  0DC5                     	;# 
  3300  0DC5                     	;# 
  3301  0DC6                     	;# 
  3302  0DC7                     	;# 
  3303  0DC7                     	;# 
  3304  0DC8                     	;# 
  3305  0DC9                     	;# 
  3306  0DC9                     	;# 
  3307  0DCA                     	;# 
  3308  0DCB                     	;# 
  3309  0DCC                     	;# 
  3310  0DCC                     	;# 
  3311  0DCD                     	;# 
  3312  0DCD                     	;# 
  3313  0DCE                     	;# 
  3314  0DCF                     	;# 
  3315  0DD0                     	;# 
  3316  0E0F                     	;# 
  3317  0E10                     	;# 
  3318  0E11                     	;# 
  3319  0E12                     	;# 
  3320  0E13                     	;# 
  3321  0E14                     	;# 
  3322  0E15                     	;# 
  3323  0E16                     	;# 
  3324  0E17                     	;# 
  3325  0E90                     	;# 
  3326  0E91                     	;# 
  3327  0E92                     	;# 
  3328  0E94                     	;# 
  3329  0E95                     	;# 
  3330  0EA0                     	;# 
  3331  0EA1                     	;# 
  3332  0EA2                     	;# 
  3333  0EA3                     	;# 
  3334  0EA4                     	;# 
  3335  0EA5                     	;# 
  3336  0FE4                     	;# 
  3337  0FE5                     	;# 
  3338  0FE6                     	;# 
  3339  0FE7                     	;# 
  3340  0FE8                     	;# 
  3341  0FE8                     	;# 
  3342  0FE9                     	;# 
  3343  0FEA                     	;# 
  3344  0FEA                     	;# 
  3345  0FEB                     	;# 
  3346  0FED                     	;# 
  3347  0FEE                     	;# 
  3348  0FEE                     	;# 
  3349  0FEF                     	;# 
  3350  0FFF                     	;# 
  3351  0000                     	;# 
  3352  0001                     	;# 
  3353  0002                     	;# 
  3354  0003                     	;# 
  3355  0004                     	;# 
  3356  0005                     	;# 
  3357  0006                     	;# 
  3358  0007                     	;# 
  3359  0008                     	;# 
  3360  0009                     	;# 
  3361  000A                     	;# 
  3362  000B                     	;# 
  3363  000C                     	;# 
  3364  000E                     	;# 
  3365  0011                     	;# 
  3366  0012                     	;# 
  3367  0013                     	;# 
  3368  0015                     	;# 
  3369  0016                     	;# 
  3370  0016                     	;# 
  3371  0017                     	;# 
  3372  0018                     	;# 
  3373  0019                     	;# 
  3374  001A                     	;# 
  3375  001B                     	;# 
  3376  001C                     	;# 
  3377  008C                     	;# 
  3378  008E                     	;# 
  3379  0091                     	;# 
  3380  0092                     	;# 
  3381  0093                     	;# 
  3382  0095                     	;# 
  3383  0096                     	;# 
  3384  0097                     	;# 
  3385  0098                     	;# 
  3386  0099                     	;# 
  3387  009A                     	;# 
  3388  009B                     	;# 
  3389  009B                     	;# 
  3390  009C                     	;# 
  3391  009D                     	;# 
  3392  009E                     	;# 
  3393  009F                     	;# 
  3394  010C                     	;# 
  3395  010E                     	;# 
  3396  0111                     	;# 
  3397  0112                     	;# 
  3398  0113                     	;# 
  3399  0114                     	;# 
  3400  0115                     	;# 
  3401  0116                     	;# 
  3402  0117                     	;# 
  3403  0118                     	;# 
  3404  0119                     	;# 
  3405  018C                     	;# 
  3406  018E                     	;# 
  3407  0191                     	;# 
  3408  0191                     	;# 
  3409  0192                     	;# 
  3410  0193                     	;# 
  3411  0193                     	;# 
  3412  0194                     	;# 
  3413  0195                     	;# 
  3414  0196                     	;# 
  3415  0197                     	;# 
  3416  0199                     	;# 
  3417  019A                     	;# 
  3418  019B                     	;# 
  3419  019B                     	;# 
  3420  019C                     	;# 
  3421  019D                     	;# 
  3422  019E                     	;# 
  3423  019F                     	;# 
  3424  020C                     	;# 
  3425  020E                     	;# 
  3426  028C                     	;# 
  3427  028E                     	;# 
  3428  030C                     	;# 
  3429  030E                     	;# 
  3430  038C                     	;# 
  3431  038E                     	;# 
  3432  0391                     	;# 
  3433  0392                     	;# 
  3434  0393                     	;# 
  3435  0397                     	;# 
  3436  0398                     	;# 
  3437  0399                     	;# 
  3438  0691                     	;# 
  3439  0692                     	;# 
  3440  0693                     	;# 
  3441  0694                     	;# 
  3442  0695                     	;# 
  3443  0D8E                     	;# 
  3444  0D8F                     	;# 
  3445  0D90                     	;# 
  3446  0D91                     	;# 
  3447  0D91                     	;# 
  3448  0D92                     	;# 
  3449  0D93                     	;# 
  3450  0D93                     	;# 
  3451  0D94                     	;# 
  3452  0D95                     	;# 
  3453  0D95                     	;# 
  3454  0D96                     	;# 
  3455  0D97                     	;# 
  3456  0D97                     	;# 
  3457  0D98                     	;# 
  3458  0D99                     	;# 
  3459  0D99                     	;# 
  3460  0D9A                     	;# 
  3461  0D9B                     	;# 
  3462  0D9C                     	;# 
  3463  0D9C                     	;# 
  3464  0D9D                     	;# 
  3465  0D9D                     	;# 
  3466  0D9E                     	;# 
  3467  0D9F                     	;# 
  3468  0DA0                     	;# 
  3469  0DA1                     	;# 
  3470  0DA1                     	;# 
  3471  0DA2                     	;# 
  3472  0DA3                     	;# 
  3473  0DA3                     	;# 
  3474  0DA4                     	;# 
  3475  0DA5                     	;# 
  3476  0DA5                     	;# 
  3477  0DA6                     	;# 
  3478  0DA7                     	;# 
  3479  0DA7                     	;# 
  3480  0DA8                     	;# 
  3481  0DA9                     	;# 
  3482  0DA9                     	;# 
  3483  0DAA                     	;# 
  3484  0DAB                     	;# 
  3485  0DAC                     	;# 
  3486  0DAC                     	;# 
  3487  0DAD                     	;# 
  3488  0DAD                     	;# 
  3489  0DAE                     	;# 
  3490  0DAF                     	;# 
  3491  0DB0                     	;# 
  3492  0DB1                     	;# 
  3493  0DB1                     	;# 
  3494  0DB2                     	;# 
  3495  0DB3                     	;# 
  3496  0DB3                     	;# 
  3497  0DB4                     	;# 
  3498  0DB5                     	;# 
  3499  0DB5                     	;# 
  3500  0DB6                     	;# 
  3501  0DB7                     	;# 
  3502  0DB7                     	;# 
  3503  0DB8                     	;# 
  3504  0DB9                     	;# 
  3505  0DB9                     	;# 
  3506  0DBA                     	;# 
  3507  0DBB                     	;# 
  3508  0DBC                     	;# 
  3509  0DBC                     	;# 
  3510  0DBD                     	;# 
  3511  0DBD                     	;# 
  3512  0DBE                     	;# 
  3513  0DBF                     	;# 
  3514  0DC0                     	;# 
  3515  0DC1                     	;# 
  3516  0DC1                     	;# 
  3517  0DC2                     	;# 
  3518  0DC3                     	;# 
  3519  0DC3                     	;# 
  3520  0DC4                     	;# 
  3521  0DC5                     	;# 
  3522  0DC5                     	;# 
  3523  0DC6                     	;# 
  3524  0DC7                     	;# 
  3525  0DC7                     	;# 
  3526  0DC8                     	;# 
  3527  0DC9                     	;# 
  3528  0DC9                     	;# 
  3529  0DCA                     	;# 
  3530  0DCB                     	;# 
  3531  0DCC                     	;# 
  3532  0DCC                     	;# 
  3533  0DCD                     	;# 
  3534  0DCD                     	;# 
  3535  0DCE                     	;# 
  3536  0DCF                     	;# 
  3537  0DD0                     	;# 
  3538  0E0F                     	;# 
  3539  0E10                     	;# 
  3540  0E11                     	;# 
  3541  0E12                     	;# 
  3542  0E13                     	;# 
  3543  0E14                     	;# 
  3544  0E15                     	;# 
  3545  0E16                     	;# 
  3546  0E17                     	;# 
  3547  0E90                     	;# 
  3548  0E91                     	;# 
  3549  0E92                     	;# 
  3550  0E94                     	;# 
  3551  0E95                     	;# 
  3552  0EA0                     	;# 
  3553  0EA1                     	;# 
  3554  0EA2                     	;# 
  3555  0EA3                     	;# 
  3556  0EA4                     	;# 
  3557  0EA5                     	;# 
  3558  0FE4                     	;# 
  3559  0FE5                     	;# 
  3560  0FE6                     	;# 
  3561  0FE7                     	;# 
  3562  0FE8                     	;# 
  3563  0FE8                     	;# 
  3564  0FE9                     	;# 
  3565  0FEA                     	;# 
  3566  0FEA                     	;# 
  3567  0FEB                     	;# 
  3568  0FED                     	;# 
  3569  0FEE                     	;# 
  3570  0FEE                     	;# 
  3571  0FEF                     	;# 
  3572  0FFF                     	;# 
  3573  0000                     	;# 
  3574  0001                     	;# 
  3575  0002                     	;# 
  3576  0003                     	;# 
  3577  0004                     	;# 
  3578  0005                     	;# 
  3579  0006                     	;# 
  3580  0007                     	;# 
  3581  0008                     	;# 
  3582  0009                     	;# 
  3583  000A                     	;# 
  3584  000B                     	;# 
  3585  000C                     	;# 
  3586  000E                     	;# 
  3587  0011                     	;# 
  3588  0012                     	;# 
  3589  0013                     	;# 
  3590  0015                     	;# 
  3591  0016                     	;# 
  3592  0016                     	;# 
  3593  0017                     	;# 
  3594  0018                     	;# 
  3595  0019                     	;# 
  3596  001A                     	;# 
  3597  001B                     	;# 
  3598  001C                     	;# 
  3599  008C                     	;# 
  3600  008E                     	;# 
  3601  0091                     	;# 
  3602  0092                     	;# 
  3603  0093                     	;# 
  3604  0095                     	;# 
  3605  0096                     	;# 
  3606  0097                     	;# 
  3607  0098                     	;# 
  3608  0099                     	;# 
  3609  009A                     	;# 
  3610  009B                     	;# 
  3611  009B                     	;# 
  3612  009C                     	;# 
  3613  009D                     	;# 
  3614  009E                     	;# 
  3615  009F                     	;# 
  3616  010C                     	;# 
  3617  010E                     	;# 
  3618  0111                     	;# 
  3619  0112                     	;# 
  3620  0113                     	;# 
  3621  0114                     	;# 
  3622  0115                     	;# 
  3623  0116                     	;# 
  3624  0117                     	;# 
  3625  0118                     	;# 
  3626  0119                     	;# 
  3627  018C                     	;# 
  3628  018E                     	;# 
  3629  0191                     	;# 
  3630  0191                     	;# 
  3631  0192                     	;# 
  3632  0193                     	;# 
  3633  0193                     	;# 
  3634  0194                     	;# 
  3635  0195                     	;# 
  3636  0196                     	;# 
  3637  0197                     	;# 
  3638  0199                     	;# 
  3639  019A                     	;# 
  3640  019B                     	;# 
  3641  019B                     	;# 
  3642  019C                     	;# 
  3643  019D                     	;# 
  3644  019E                     	;# 
  3645  019F                     	;# 
  3646  020C                     	;# 
  3647  020E                     	;# 
  3648  028C                     	;# 
  3649  028E                     	;# 
  3650  030C                     	;# 
  3651  030E                     	;# 
  3652  038C                     	;# 
  3653  038E                     	;# 
  3654  0391                     	;# 
  3655  0392                     	;# 
  3656  0393                     	;# 
  3657  0397                     	;# 
  3658  0398                     	;# 
  3659  0399                     	;# 
  3660  0691                     	;# 
  3661  0692                     	;# 
  3662  0693                     	;# 
  3663  0694                     	;# 
  3664  0695                     	;# 
  3665  0D8E                     	;# 
  3666  0D8F                     	;# 
  3667  0D90                     	;# 
  3668  0D91                     	;# 
  3669  0D91                     	;# 
  3670  0D92                     	;# 
  3671  0D93                     	;# 
  3672  0D93                     	;# 
  3673  0D94                     	;# 
  3674  0D95                     	;# 
  3675  0D95                     	;# 
  3676  0D96                     	;# 
  3677  0D97                     	;# 
  3678  0D97                     	;# 
  3679  0D98                     	;# 
  3680  0D99                     	;# 
  3681  0D99                     	;# 
  3682  0D9A                     	;# 
  3683  0D9B                     	;# 
  3684  0D9C                     	;# 
  3685  0D9C                     	;# 
  3686  0D9D                     	;# 
  3687  0D9D                     	;# 
  3688  0D9E                     	;# 
  3689  0D9F                     	;# 
  3690  0DA0                     	;# 
  3691  0DA1                     	;# 
  3692  0DA1                     	;# 
  3693  0DA2                     	;# 
  3694  0DA3                     	;# 
  3695  0DA3                     	;# 
  3696  0DA4                     	;# 
  3697  0DA5                     	;# 
  3698  0DA5                     	;# 
  3699  0DA6                     	;# 
  3700  0DA7                     	;# 
  3701  0DA7                     	;# 
  3702  0DA8                     	;# 
  3703  0DA9                     	;# 
  3704  0DA9                     	;# 
  3705  0DAA                     	;# 
  3706  0DAB                     	;# 
  3707  0DAC                     	;# 
  3708  0DAC                     	;# 
  3709  0DAD                     	;# 
  3710  0DAD                     	;# 
  3711  0DAE                     	;# 
  3712  0DAF                     	;# 
  3713  0DB0                     	;# 
  3714  0DB1                     	;# 
  3715  0DB1                     	;# 
  3716  0DB2                     	;# 
  3717  0DB3                     	;# 
  3718  0DB3                     	;# 
  3719  0DB4                     	;# 
  3720  0DB5                     	;# 
  3721  0DB5                     	;# 
  3722  0DB6                     	;# 
  3723  0DB7                     	;# 
  3724  0DB7                     	;# 
  3725  0DB8                     	;# 
  3726  0DB9                     	;# 
  3727  0DB9                     	;# 
  3728  0DBA                     	;# 
  3729  0DBB                     	;# 
  3730  0DBC                     	;# 
  3731  0DBC                     	;# 
  3732  0DBD                     	;# 
  3733  0DBD                     	;# 
  3734  0DBE                     	;# 
  3735  0DBF                     	;# 
  3736  0DC0                     	;# 
  3737  0DC1                     	;# 
  3738  0DC1                     	;# 
  3739  0DC2                     	;# 
  3740  0DC3                     	;# 
  3741  0DC3                     	;# 
  3742  0DC4                     	;# 
  3743  0DC5                     	;# 
  3744  0DC5                     	;# 
  3745  0DC6                     	;# 
  3746  0DC7                     	;# 
  3747  0DC7                     	;# 
  3748  0DC8                     	;# 
  3749  0DC9                     	;# 
  3750  0DC9                     	;# 
  3751  0DCA                     	;# 
  3752  0DCB                     	;# 
  3753  0DCC                     	;# 
  3754  0DCC                     	;# 
  3755  0DCD                     	;# 
  3756  0DCD                     	;# 
  3757  0DCE                     	;# 
  3758  0DCF                     	;# 
  3759  0DD0                     	;# 
  3760  0E0F                     	;# 
  3761  0E10                     	;# 
  3762  0E11                     	;# 
  3763  0E12                     	;# 
  3764  0E13                     	;# 
  3765  0E14                     	;# 
  3766  0E15                     	;# 
  3767  0E16                     	;# 
  3768  0E17                     	;# 
  3769  0E90                     	;# 
  3770  0E91                     	;# 
  3771  0E92                     	;# 
  3772  0E94                     	;# 
  3773  0E95                     	;# 
  3774  0EA0                     	;# 
  3775  0EA1                     	;# 
  3776  0EA2                     	;# 
  3777  0EA3                     	;# 
  3778  0EA4                     	;# 
  3779  0EA5                     	;# 
  3780  0FE4                     	;# 
  3781  0FE5                     	;# 
  3782  0FE6                     	;# 
  3783  0FE7                     	;# 
  3784  0FE8                     	;# 
  3785  0FE8                     	;# 
  3786  0FE9                     	;# 
  3787  0FEA                     	;# 
  3788  0FEA                     	;# 
  3789  0FEB                     	;# 
  3790  0FED                     	;# 
  3791  0FEE                     	;# 
  3792  0FEE                     	;# 
  3793  0FEF                     	;# 
  3794  0FFF                     	;# 
  3795                           
  3796 ;; Function _TMR2_DefaultInterruptHandler is unused but had its address taken
  3797  0000                     
  3798                           	psect	idataBANK0
  3799  0A01                     __pidataBANK0:	
  3800                           
  3801                           ;initializer for _resRc
  3802  0A01  3410               	retlw	16
  3803  0A02  3427               	retlw	39
  3804  0A03  3400               	retlw	0
  3805  0A04  3400               	retlw	0
  3806                           
  3807                           ;initializer for _resRs
  3808  0A05  3410               	retlw	16
  3809  0A06  3427               	retlw	39
  3810  0A07  3400               	retlw	0
  3811  0A08  3400               	retlw	0
  3812                           
  3813                           ;initializer for _pwm2DutyForVout
  3814  0A09  3410               	retlw	16
  3815  0A0A  3400               	retlw	0
  3816                           
  3817                           	psect	idataBANK1
  3818  07E6                     __pidataBANK1:	
  3819                           
  3820                           ;initializer for _bbmax
  3821  07E6  34C0               	retlw	192
  3822  07E7  34F2               	retlw	242
  3823  07E8  34FC               	retlw	252
  3824  07E9  34FF               	retlw	255
  3825                           
  3826                           ;initializer for _bbmin
  3827  07EA  3440               	retlw	64
  3828  07EB  340D               	retlw	13
  3829  07EC  3403               	retlw	3
  3830  07ED  3400               	retlw	0
  3831                           
  3832                           ;initializer for _pidU
  3833  07EE  3414               	retlw	20
  3834  07EF  3400               	retlw	0
  3835  07F0  3400               	retlw	0
  3836  07F1  3400               	retlw	0
  3837  0FFF                     _isRunInBoot	set	4095
  3838  000B                     _INTCONbits	set	11
  3839  0011                     _PIR1bits	set	17
  3840  001B                     _PR2	set	27
  3841  001C                     _T2CON	set	28
  3842  001C                     _T2CONbits	set	28
  3843  001A                     _TMR2	set	26
  3844  005F                     _GIE	set	95
  3845  009D                     _ADCON0	set	157
  3846  009D                     _ADCON0bits	set	157
  3847  009E                     _ADCON1	set	158
  3848  009F                     _ADCON2	set	159
  3849  009C                     _ADRESH	set	156
  3850  009B                     _ADRESL	set	155
  3851  0095                     _OPTION_REGbits	set	149
  3852  0099                     _OSCCON	set	153
  3853  0098                     _OSCTUNE	set	152
  3854  0091                     _PIE1bits	set	145
  3855  008C                     _TRISA	set	140
  3856  008E                     _TRISC	set	142
  3857  0097                     _WDTCON	set	151
  3858  0117                     _FVRCON	set	279
  3859  0117                     _FVRCONbits	set	279
  3860  010C                     _LATA	set	268
  3861  010E                     _LATC	set	270
  3862  018C                     _ANSELA	set	396
  3863  018E                     _ANSELC	set	398
  3864  019F                     _BAUDCON	set	415
  3865  0192                     _PMADRH	set	402
  3866  0191                     _PMADRL	set	401
  3867  0195                     _PMCON1bits	set	405
  3868  0196                     _PMCON2	set	406
  3869  0194                     _PMDATH	set	404
  3870  0193                     _PMDATL	set	403
  3871  0199                     _RCREG	set	409
  3872  019D                     _RCSTA	set	413
  3873  019D                     _RCSTAbits	set	413
  3874  019C                     _SPBRGH	set	412
  3875  019B                     _SPBRGL	set	411
  3876  019A                     _TXREG	set	410
  3877  019E                     _TXSTA	set	414
  3878  019E                     _TXSTAbits	set	414
  3879  020C                     _WPUA	set	524
  3880  020E                     _WPUC	set	526
  3881  028C                     _ODCONA	set	652
  3882  028E                     _ODCONC	set	654
  3883  0D9E                     _PWM1CLKCON	set	3486
  3884  0D9B                     _PWM1CON	set	3483
  3885  0D9B                     _PWM1CONbits	set	3483
  3886  0D94                     _PWM1DCH	set	3476
  3887  0D93                     _PWM1DCL	set	3475
  3888  0D9C                     _PWM1INTE	set	3484
  3889  0D9D                     _PWM1INTF	set	3485
  3890  0D9F                     _PWM1LDCON	set	3487
  3891  0DA0                     _PWM1OFCON	set	3488
  3892  0D98                     _PWM1OFH	set	3480
  3893  0D97                     _PWM1OFL	set	3479
  3894  0D92                     _PWM1PHH	set	3474
  3895  0D91                     _PWM1PHL	set	3473
  3896  0D96                     _PWM1PRH	set	3478
  3897  0D95                     _PWM1PRL	set	3477
  3898  0D9A                     _PWM1TMRH	set	3482
  3899  0D99                     _PWM1TMRL	set	3481
  3900  0DAE                     _PWM2CLKCON	set	3502
  3901  0DAB                     _PWM2CON	set	3499
  3902  0DAB                     _PWM2CONbits	set	3499
  3903  0DA4                     _PWM2DCH	set	3492
  3904  0DA3                     _PWM2DCL	set	3491
  3905  0DAC                     _PWM2INTE	set	3500
  3906  0DAD                     _PWM2INTF	set	3501
  3907  0DAF                     _PWM2LDCON	set	3503
  3908  0DB0                     _PWM2OFCON	set	3504
  3909  0DA8                     _PWM2OFH	set	3496
  3910  0DA7                     _PWM2OFL	set	3495
  3911  0DA2                     _PWM2PHH	set	3490
  3912  0DA1                     _PWM2PHL	set	3489
  3913  0DA6                     _PWM2PRH	set	3494
  3914  0DA5                     _PWM2PRL	set	3493
  3915  0DAA                     _PWM2TMRH	set	3498
  3916  0DA9                     _PWM2TMRL	set	3497
  3917  0E0F                     _PPSLOCK	set	3599
  3918  0E0F                     _PPSLOCKbits	set	3599
  3919  0E15                     _RXPPSbits	set	3605
  3920  0E94                     _RA4PPSbits	set	3732
  3921  0E95                     _RA5PPSbits	set	3733
  3922  0EA5                     _RC5PPSbits	set	3749
  3923                           
  3924                           	psect	stringtext
  3925  1000                     __pstringtext:	
  3926  1000                     STR_6:	
  3927  1000  3409               	retlw	9
  3928  1001  3470               	retlw	112	;'p'
  3929  1002  3477               	retlw	119	;'w'
  3930  1003  346D               	retlw	109	;'m'
  3931  1004  343D               	retlw	61	;'='
  3932  1005  3400               	retlw	0
  3933  1006                     STR_4:	
  3934  1006  3409               	retlw	9
  3935  1007  3465               	retlw	101	;'e'
  3936  1008  3478               	retlw	120	;'x'
  3937  1009  3470               	retlw	112	;'p'
  3938  100A  343D               	retlw	61	;'='
  3939  100B  3400               	retlw	0
  3940  100C                     STR_5:	
  3941  100C  3409               	retlw	9
  3942  100D  3476               	retlw	118	;'v'
  3943  100E  346F               	retlw	111	;'o'
  3944  100F  343D               	retlw	61	;'='
  3945  1010  3400               	retlw	0
  3946  1011                     STR_2:	
  3947  1011  3409               	retlw	9
  3948  1012  3452               	retlw	82	;'R'
  3949  1013  3473               	retlw	115	;'s'
  3950  1014  343D               	retlw	61	;'='
  3951  1015  3400               	retlw	0
  3952  1016                     STR_1:	
  3953  1016  3452               	retlw	82	;'R'
  3954  1017  3463               	retlw	99	;'c'
  3955  1018  343D               	retlw	61	;'='
  3956  1019  3400               	retlw	0
  3957  101A                     STR_3:	
  3958  101A  3409               	retlw	9
  3959  101B  3469               	retlw	105	;'i'
  3960  101C  343D               	retlw	61	;'='
  3961  101D  3400               	retlw	0
  3962  101E                     STR_7:	
  3963  101E  340D               	retlw	13
  3964  101F  340A               	retlw	10
  3965  1020  3400               	retlw	0
  3966                           
  3967                           ; #config settings
  3968  0000                     
  3969                           	psect	cinit
  3970  0052                     start_initialization:	
  3971  0052                     __initialization:	
  3972  0052  3048               	movlw	low __pbssBANK0
  3973                           
  3974                           ; Clear objects allocated to COMMON
  3975  0053  01FC               	clrf	__pbssCOMMON& (0+127)
  3976                           
  3977                           ; Clear objects allocated to BANK0
  3978  0054  0084               	movwf	4
  3979  0055  3000               	movlw	high __pbssBANK0
  3980  0056  0085               	movwf	5
  3981  0057  301C               	movlw	28
  3982  0058  3189  21FB  3180   	fcall	clear_ram0
  3983                           
  3984                           ; Clear objects allocated to BANK1
  3985  005B  30A0               	movlw	low __pbssBANK1
  3986  005C  0084               	movwf	4
  3987  005D  3000               	movlw	high __pbssBANK1
  3988  005E  0085               	movwf	5
  3989  005F  303E               	movlw	62
  3990  0060  3189  21FB  3180   	fcall	clear_ram0
  3991                           
  3992                           ; Clear objects allocated to BANK2
  3993  0063  3020               	movlw	low __pbssBANK2
  3994  0064  0084               	movwf	4
  3995  0065  3001               	movlw	high __pbssBANK2
  3996  0066  0085               	movwf	5
  3997  0067  3034               	movlw	52
  3998  0068  3189  21FB  3180   	fcall	clear_ram0
  3999                           
  4000                           ; Clear objects allocated to BANK3
  4001  006B  30A0               	movlw	low __pbssBANK3
  4002  006C  0084               	movwf	4
  4003  006D  3001               	movlw	high __pbssBANK3
  4004  006E  0085               	movwf	5
  4005  006F  3020               	movlw	32
  4006  0070  3189  21FB  3180   	fcall	clear_ram0
  4007                           
  4008                           ; Initialize objects allocated to BANK0
  4009  0073  3001               	movlw	low __pidataBANK0
  4010  0074  0084               	movwf	4
  4011  0075  308A               	movlw	(high __pidataBANK0)| (0+128)
  4012  0076  0085               	movwf	5
  4013  0077  3064               	movlw	low __pdataBANK0
  4014  0078  0086               	movwf	6
  4015  0079  3000               	movlw	high __pdataBANK0
  4016  007A  0087               	movwf	7
  4017  007B  300A               	movlw	10
  4018  007C  3189  21F5  3180   	fcall	init_ram
  4019                           
  4020                           ; Initialize objects allocated to BANK1
  4021  007F  30E6               	movlw	low __pidataBANK1
  4022  0080  0084               	movwf	4
  4023  0081  3087               	movlw	(high __pidataBANK1)| (0+128)
  4024  0082  0085               	movwf	5
  4025  0083  30DE               	movlw	low __pdataBANK1
  4026  0084  0086               	movwf	6
  4027  0085  3000               	movlw	high __pdataBANK1
  4028  0086  0087               	movwf	7
  4029  0087  300C               	movlw	12
  4030  0088  3189  21F5  3180   	fcall	init_ram
  4031  008B                     end_of_initialization:	
  4032                           ;End of C runtime variable initialization code
  4033                           
  4034  008B                     __end_of__initialization:	
  4035  008B  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4036  008C  0020               	movlb	0
  4037  008D  288E               	ljmp	_main	;jump to C main() function
  4038  008E                     __pmaintext:	
  4039 ;;
  4040 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4041 ;;
  4042 ;; *************** function _main *****************
  4043 ;; Defined at:
  4044 ;;		line 57 in file "src/app/main.c"
  4045 ;; Parameters:    Size  Location     Type
  4046 ;;		None
  4047 ;; Auto vars:     Size  Location     Type
  4048 ;;		None
  4049 ;; Return value:  Size  Location     Type
  4050 ;;                  1    wreg      void 
  4051 ;; Registers used:
  4052 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4053 ;; Tracked objects:
  4054 ;;		On entry : B1F/0
  4055 ;;		On exit  : 0/0
  4056 ;;		Unchanged: 0/0
  4057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4061 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4062 ;;Total ram usage:        0 bytes
  4063 ;; Hardware stack levels required when called:    5
  4064 ;; This function calls:
  4065 ;;		_PWM1_Start
  4066 ;;		_SYSTEM_Initialize
  4067 ;;		_adc_sample
  4068 ;;		_cal_rs_simulate_power
  4069 ;;		_calc_expect_vout_adc_value
  4070 ;;		_calc_temp_rc
  4071 ;;		_calc_temp_rs
  4072 ;;		_m_int_2_str_ex
  4073 ;;		_pid_pwm1_idrv_b_b
  4074 ;;		_pid_pwm1_idrv_run
  4075 ;;		_pid_pwm2_vout_run
  4076 ;;		_sys_data_init
  4077 ;;		_sys_data_save
  4078 ;;		_uart_send_str
  4079 ;; This function is called by:
  4080 ;;		Startup code after reset
  4081 ;; This function uses a non-reentrant model
  4082 ;;
  4083                           
  4084                           
  4085                           ;psect for function _main
  4086  008E                     _main:	
  4087                           
  4088                           ;main.c: 59: __nop();
  4089                           
  4090                           ;incstack = 0
  4091                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4092  008E  0000               	nop
  4093                           
  4094                           ;main.c: 60: isRunInBoot=0xaa;
  4095  008F  30AA               	movlw	170
  4096  0090  003F               	movlb	31	; select bank31
  4097  0091  00FF               	movwf	127	;volatile
  4098                           
  4099                           ;main.c: 61: SYSTEM_Initialize();
  4100  0092  22BA  3180         	fcall	_SYSTEM_Initialize
  4101  0094  178B               	bsf	11,7	;volatile
  4102  0095  170B               	bsf	11,6	;volatile
  4103                           
  4104                           ;main.c: 63: PWM1_Start();
  4105  0096  22B7               	fcall	_PWM1_Start
  4106                           
  4107                           ;main.c: 65: sys_data_init();
  4108  0097  318E  260B  3180   	fcall	_sys_data_init
  4109                           
  4110                           ;main.c: 67: if(sysData.pidSetFlg0 != 0x55 || sysData.pidSetFlg1 != 0xaa){
  4111  009A  3055               	movlw	85
  4112  009B  0022               	movlb	2	; select bank2
  4113  009C  0620               	xorwf	_sysData^(0+256),w
  4114  009D  1D03               	btfss	3,2
  4115  009E  28A3               	goto	l4068
  4116  009F  30AA               	movlw	170
  4117  00A0  0621               	xorwf	(_sysData^(0+256)+1),w
  4118  00A1  1903               	btfsc	3,2
  4119  00A2  28A6               	goto	l4070
  4120  00A3                     l4068:	
  4121                           
  4122                           ;main.c: 69: pidBbSm=0;
  4123  00A3  0020               	movlb	0	; select bank0
  4124  00A4  01E0               	clrf	_pidBbSm
  4125                           
  4126                           ;main.c: 70: }else{
  4127  00A5  28C7               	goto	l4072
  4128  00A6                     l4070:	
  4129                           
  4130                           ;main.c: 71: pidBbSm=5;
  4131  00A6  3005               	movlw	5
  4132  00A7  0020               	movlb	0	; select bank0
  4133  00A8  00E0               	movwf	_pidBbSm
  4134                           
  4135                           ;main.c: 72: PidKp=sysData.pidKp;
  4136  00A9  0022               	movlb	2	; select bank2
  4137  00AA  0824               	movf	(_sysData^(0+256)+4),w
  4138  00AB  0020               	movlb	0	; select bank0
  4139  00AC  00C8               	movwf	_PidKp
  4140  00AD  0022               	movlb	2	; select bank2
  4141  00AE  0825               	movf	((_sysData+1)^(0+256)+4),w
  4142  00AF  0020               	movlb	0	; select bank0
  4143  00B0  00C9               	movwf	_PidKp+1
  4144  00B1  01CA               	clrf	_PidKp+2
  4145  00B2  01CB               	clrf	_PidKp+3
  4146                           
  4147                           ;main.c: 73: PidTd=sysData.pidTd;
  4148  00B3  0022               	movlb	2	; select bank2
  4149  00B4  0828               	movf	(_sysData^(0+256)+8),w
  4150  00B5  0021               	movlb	1	; select bank1
  4151  00B6  00AC               	movwf	_PidTd^(0+128)
  4152  00B7  0022               	movlb	2	; select bank2
  4153  00B8  0829               	movf	((_sysData+1)^(0+256)+8),w
  4154  00B9  0021               	movlb	1	; select bank1
  4155  00BA  00AD               	movwf	(_PidTd^(0+128)+1)
  4156  00BB  01AE               	clrf	(_PidTd^(0+128)+2)
  4157  00BC  01AF               	clrf	(_PidTd^(0+128)+3)
  4158                           
  4159                           ;main.c: 74: PidTi=sysData.pidTi;
  4160  00BD  0022               	movlb	2	; select bank2
  4161  00BE  0826               	movf	(_sysData^(0+256)+6),w
  4162  00BF  0021               	movlb	1	; select bank1
  4163  00C0  00B0               	movwf	_PidTi^(0+128)
  4164  00C1  0022               	movlb	2	; select bank2
  4165  00C2  0827               	movf	((_sysData+1)^(0+256)+6),w
  4166  00C3  0021               	movlb	1	; select bank1
  4167  00C4  00B1               	movwf	(_PidTi^(0+128)+1)
  4168  00C5  01B2               	clrf	(_PidTi^(0+128)+2)
  4169  00C6  01B3               	clrf	(_PidTi^(0+128)+3)
  4170  00C7                     l4072:	
  4171                           
  4172                           ;main.c: 77: if(Event & (1<<2)){
  4173  00C7  1D7C               	btfss	_Event,2	;volatile
  4174  00C8  2958               	goto	l4096
  4175                           
  4176                           ;main.c: 78: Event &= ~(1<<2);
  4177  00C9  117C               	bcf	_Event,2	;volatile
  4178  00CA  3020               	movlw	32
  4179                           
  4180                           ;main.c: 79: rtAdcValueRsLo=adc_sample(channel_AN6,1,32);
  4181  00CB  01F3               	clrf	adc_sample@gfvr
  4182  00CC  0AF3               	incf	adc_sample@gfvr,f
  4183  00CD  00F4               	movwf	adc_sample@num
  4184  00CE  3006               	movlw	6
  4185  00CF  227F  3180         	fcall	_adc_sample
  4186  00D1  0874               	movf	?_adc_sample+1,w
  4187  00D2  0020               	movlb	0	; select bank0
  4188  00D3  00D9               	movwf	_rtAdcValueRsLo+1
  4189  00D4  0873               	movf	?_adc_sample,w
  4190  00D5  00D8               	movwf	_rtAdcValueRsLo
  4191                           
  4192                           ;main.c: 81: rtAdcValueRsHi=adc_sample(channel_AN5,3,32);
  4193  00D6  3003               	movlw	3
  4194  00D7  00F3               	movwf	adc_sample@gfvr
  4195  00D8  3020               	movlw	32
  4196  00D9  00F4               	movwf	adc_sample@num
  4197  00DA  3005               	movlw	5
  4198  00DB  227F  3180         	fcall	_adc_sample
  4199  00DD  0874               	movf	?_adc_sample+1,w
  4200  00DE  0020               	movlb	0	; select bank0
  4201  00DF  00D7               	movwf	_rtAdcValueRsHi+1
  4202  00E0  0873               	movf	?_adc_sample,w
  4203  00E1  00D6               	movwf	_rtAdcValueRsHi
  4204                           
  4205                           ;main.c: 84: rtAdcValueRcLo=adc_sample(channel_AN4,3,16);
  4206  00E2  3003               	movlw	3
  4207  00E3  00F3               	movwf	adc_sample@gfvr
  4208  00E4  3010               	movlw	16
  4209  00E5  00F4               	movwf	adc_sample@num
  4210  00E6  3004               	movlw	4
  4211  00E7  227F  3180         	fcall	_adc_sample
  4212  00E9  0874               	movf	?_adc_sample+1,w
  4213  00EA  0020               	movlb	0	; select bank0
  4214  00EB  00D5               	movwf	_rtAdcValueRcLo+1
  4215  00EC  0873               	movf	?_adc_sample,w
  4216  00ED  00D4               	movwf	_rtAdcValueRcLo
  4217                           
  4218                           ;main.c: 85: rtAdcValueRcHi=adc_sample(channel_AN2,3,16);
  4219  00EE  3003               	movlw	3
  4220  00EF  00F3               	movwf	adc_sample@gfvr
  4221  00F0  3010               	movlw	16
  4222  00F1  00F4               	movwf	adc_sample@num
  4223  00F2  3002               	movlw	2
  4224  00F3  227F               	fcall	_adc_sample
  4225  00F4  0874               	movf	?_adc_sample+1,w
  4226  00F5  0020               	movlb	0	; select bank0
  4227  00F6  00D3               	movwf	_rtAdcValueRcHi+1
  4228  00F7  0873               	movf	?_adc_sample,w
  4229  00F8  00D2               	movwf	_rtAdcValueRcHi
  4230                           
  4231                           ;main.c: 89: resRc=calc_temp_rc();
  4232  00F9  318D  2518  3180   	fcall	_calc_temp_rc
  4233  00FC  0828               	movf	?_calc_temp_rc+3,w
  4234  00FD  00E7               	movwf	_resRc+3
  4235  00FE  0827               	movf	?_calc_temp_rc+2,w
  4236  00FF  00E6               	movwf	_resRc+2
  4237  0100  0826               	movf	?_calc_temp_rc+1,w
  4238  0101  00E5               	movwf	_resRc+1
  4239  0102  0825               	movf	?_calc_temp_rc,w
  4240  0103  00E4               	movwf	_resRc
  4241                           
  4242                           ;main.c: 90: resRs=calc_temp_rs();
  4243  0104  318C  24A5  3180   	fcall	_calc_temp_rs
  4244  0107  0828               	movf	?_calc_temp_rs+3,w
  4245  0108  00EB               	movwf	_resRs+3
  4246  0109  0827               	movf	?_calc_temp_rs+2,w
  4247  010A  00EA               	movwf	_resRs+2
  4248  010B  0826               	movf	?_calc_temp_rs+1,w
  4249  010C  00E9               	movwf	_resRs+1
  4250  010D  0825               	movf	?_calc_temp_rs,w
  4251  010E  00E8               	movwf	_resRs
  4252                           
  4253                           ;main.c: 93: __nop();
  4254  010F  0000               	nop
  4255                           
  4256                           ;main.c: 96: if(pidBbSm>=5){
  4257  0110  3005               	movlw	5
  4258  0111  0020               	movlb	0	; select bank0
  4259  0112  0260               	subwf	_pidBbSm,w
  4260  0113  1C03               	skipc
  4261  0114  2931               	goto	l4088
  4262                           
  4263                           ;main.c: 97: pid_pwm1_idrv_run();
  4264  0115  2591  3180         	fcall	_pid_pwm1_idrv_run
  4265                           
  4266                           ;main.c: 99: rsSimPower=cal_rs_simulate_power();
  4267  0117  26F7               	fcall	_cal_rs_simulate_power
  4268  0118  0825               	movf	?_cal_rs_simulate_power+1,w
  4269  0119  0021               	movlb	1	; select bank1
  4270  011A  00CD               	movwf	(_rsSimPower+1)^(0+128)
  4271  011B  0020               	movlb	0	; select bank0
  4272  011C  0824               	movf	?_cal_rs_simulate_power,w
  4273  011D  0021               	movlb	1	; select bank1
  4274  011E  00CC               	movwf	_rsSimPower^(0+128)
  4275                           
  4276                           ;main.c: 101: voExpectAdcValue=calc_expect_vout_adc_value(rsSimPower);
  4277  011F  084D               	movf	(_rsSimPower+1)^(0+128),w
  4278  0120  0020               	movlb	0	; select bank0
  4279  0121  00B3               	movwf	calc_expect_vout_adc_value@x+1
  4280  0122  0021               	movlb	1	; select bank1
  4281  0123  084C               	movf	_rsSimPower^(0+128),w
  4282  0124  0020               	movlb	0	; select bank0
  4283  0125  00B2               	movwf	calc_expect_vout_adc_value@x
  4284  0126  318B  2382  3180   	fcall	_calc_expect_vout_adc_value
  4285  0129  0833               	movf	?_calc_expect_vout_adc_value+1,w
  4286  012A  00DD               	movwf	_voExpectAdcValue+1
  4287  012B  0832               	movf	?_calc_expect_vout_adc_value,w
  4288  012C  00DC               	movwf	_voExpectAdcValue
  4289                           
  4290                           ;main.c: 103: pid_pwm2_vout_run();
  4291  012D  318A  226B  3180   	fcall	_pid_pwm2_vout_run
  4292                           
  4293                           ;main.c: 104: }else{
  4294  0130  2958               	goto	l4096
  4295  0131                     l4088:	
  4296                           
  4297                           ;main.c: 105: pid_pwm1_idrv_b_b();
  4298  0131  2329  3180         	fcall	_pid_pwm1_idrv_b_b
  4299                           
  4300                           ;main.c: 106: if(pidBbSm>=5){
  4301  0133  3005               	movlw	5
  4302  0134  0020               	movlb	0	; select bank0
  4303  0135  0260               	subwf	_pidBbSm,w
  4304  0136  1C03               	skipc
  4305  0137  2958               	goto	l4096
  4306                           
  4307                           ;main.c: 107: sysData.pidSetFlg0 = 0x55;
  4308  0138  3055               	movlw	85
  4309  0139  0022               	movlb	2	; select bank2
  4310  013A  00A0               	movwf	_sysData^(0+256)
  4311                           
  4312                           ;main.c: 108: sysData.pidSetFlg1 = 0xaa;
  4313  013B  30AA               	movlw	170
  4314  013C  00A1               	movwf	(_sysData^(0+256)+1)
  4315                           
  4316                           ;main.c: 110: sysData.pidKp=PidKp;
  4317  013D  0020               	movlb	0	; select bank0
  4318  013E  0849               	movf	_PidKp+1,w
  4319  013F  0022               	movlb	2	; select bank2
  4320  0140  00A5               	movwf	((_sysData+1)^(0+256)+4)
  4321  0141  0020               	movlb	0	; select bank0
  4322  0142  0848               	movf	_PidKp,w
  4323  0143  0022               	movlb	2	; select bank2
  4324  0144  00A4               	movwf	(_sysData^(0+256)+4)
  4325                           
  4326                           ;main.c: 111: sysData.pidTd=PidTd;
  4327  0145  0021               	movlb	1	; select bank1
  4328  0146  082D               	movf	(_PidTd+1)^(0+128),w
  4329  0147  0022               	movlb	2	; select bank2
  4330  0148  00A9               	movwf	((_sysData+1)^(0+256)+8)
  4331  0149  0021               	movlb	1	; select bank1
  4332  014A  082C               	movf	_PidTd^(0+128),w
  4333  014B  0022               	movlb	2	; select bank2
  4334  014C  00A8               	movwf	(_sysData^(0+256)+8)
  4335                           
  4336                           ;main.c: 112: sysData.pidTi=PidTi;
  4337  014D  0021               	movlb	1	; select bank1
  4338  014E  0831               	movf	(_PidTi+1)^(0+128),w
  4339  014F  0022               	movlb	2	; select bank2
  4340  0150  00A7               	movwf	((_sysData+1)^(0+256)+6)
  4341  0151  0021               	movlb	1	; select bank1
  4342  0152  0830               	movf	_PidTi^(0+128),w
  4343  0153  0022               	movlb	2	; select bank2
  4344  0154  00A6               	movwf	(_sysData^(0+256)+6)
  4345                           
  4346                           ;main.c: 113: sys_data_save();
  4347  0155  318D  25FF  3180   	fcall	_sys_data_save
  4348  0158                     l4096:	
  4349                           
  4350                           ;main.c: 114: }
  4351                           ;main.c: 115: }
  4352                           ;main.c: 118: }
  4353                           ;main.c: 119: if(Event & (1<<3)){
  4354  0158  1DFC               	btfss	_Event,3	;volatile
  4355  0159  29E3               	goto	l4140
  4356  015A  3010               	movlw	16
  4357                           
  4358                           ;main.c: 120: rtAdcValueVoFb=adc_sample(channel_AN7,1,16);
  4359  015B  01F3               	clrf	adc_sample@gfvr
  4360  015C  0AF3               	incf	adc_sample@gfvr,f
  4361  015D  00F4               	movwf	adc_sample@num
  4362  015E  3007               	movlw	7
  4363  015F  227F  3180         	fcall	_adc_sample
  4364  0161  0874               	movf	?_adc_sample+1,w
  4365  0162  0020               	movlb	0	; select bank0
  4366  0163  00DB               	movwf	_rtAdcValueVoFb+1
  4367  0164  0873               	movf	?_adc_sample,w
  4368  0165  00DA               	movwf	_rtAdcValueVoFb
  4369                           
  4370                           ;main.c: 121: Event &= ~(1<<3);
  4371  0166  11FC               	bcf	_Event,3	;volatile
  4372                           
  4373                           ;main.c: 123: uart_send_str((uint8_t*)"Rc=");
  4374  0167  3016               	movlw	low (STR_1| (0+32768))
  4375  0168  00F1               	movwf	uart_send_str@str
  4376  0169  3090               	movlw	high (STR_1| (0+32768))
  4377  016A  00F2               	movwf	uart_send_str@str+1
  4378  016B  21E5  3180         	fcall	_uart_send_str
  4379                           
  4380                           ;main.c: 124: m_int_2_str_ex(str,resRc,sizeof(str));
  4381  016D  0867               	movf	_resRc+3,w
  4382  016E  00B5               	movwf	m_int_2_str_ex@x+3
  4383  016F  0866               	movf	_resRc+2,w
  4384  0170  00B4               	movwf	m_int_2_str_ex@x+2
  4385  0171  0865               	movf	_resRc+1,w
  4386  0172  00B3               	movwf	m_int_2_str_ex@x+1
  4387  0173  0864               	movf	_resRc,w
  4388  0174  2792  3180         	fcall	PL30	;call to abstracted procedure
  4389  0176  2204  3180         	fcall	_m_int_2_str_ex
  4390                           
  4391                           ;main.c: 125: uart_send_str(str);
  4392  0178  278D  3180         	fcall	PL26	;call to abstracted procedure
  4393  017A  21E5  3180         	fcall	_uart_send_str
  4394                           
  4395                           ;main.c: 127: uart_send_str((uint8_t*)"\tRs=");
  4396  017C  3011               	movlw	low (STR_2| (0+32768))
  4397  017D  00F1               	movwf	uart_send_str@str
  4398  017E  3090               	movlw	high (STR_2| (0+32768))
  4399  017F  00F2               	movwf	uart_send_str@str+1
  4400  0180  21E5  3180         	fcall	_uart_send_str
  4401                           
  4402                           ;main.c: 128: m_int_2_str_ex(str,resRs,sizeof(str));
  4403  0182  086B               	movf	_resRs+3,w
  4404  0183  00B5               	movwf	m_int_2_str_ex@x+3
  4405  0184  086A               	movf	_resRs+2,w
  4406  0185  00B4               	movwf	m_int_2_str_ex@x+2
  4407  0186  0869               	movf	_resRs+1,w
  4408  0187  00B3               	movwf	m_int_2_str_ex@x+1
  4409  0188  0868               	movf	_resRs,w
  4410  0189  2792  3180         	fcall	PL30	;call to abstracted procedure
  4411  018B  2204  3180         	fcall	_m_int_2_str_ex
  4412                           
  4413                           ;main.c: 129: uart_send_str(str);
  4414  018D  278D  3180         	fcall	PL26	;call to abstracted procedure
  4415  018F  21E5  3180         	fcall	_uart_send_str
  4416                           
  4417                           ;main.c: 131: uart_send_str((uint8_t*)"\ti=");
  4418  0191  301A               	movlw	low (STR_3| (0+32768))
  4419  0192  00F1               	movwf	uart_send_str@str
  4420  0193  3090               	movlw	high (STR_3| (0+32768))
  4421  0194  00F2               	movwf	uart_send_str@str+1
  4422  0195  21E5  3180         	fcall	_uart_send_str
  4423                           
  4424                           ;main.c: 132: m_int_2_str_ex(str,rtAdcValueRsLo,sizeof(str));
  4425  0197  0858               	movf	_rtAdcValueRsLo,w
  4426  0198  00B2               	movwf	m_int_2_str_ex@x
  4427  0199  0859               	movf	_rtAdcValueRsLo+1,w
  4428  019A  2767  3180         	fcall	PL10	;call to abstracted procedure
  4429  019C  2204  3180         	fcall	_m_int_2_str_ex
  4430                           
  4431                           ;main.c: 133: uart_send_str(str);
  4432  019E  278D  3180         	fcall	PL26	;call to abstracted procedure
  4433  01A0  21E5  3180         	fcall	_uart_send_str
  4434                           
  4435                           ;main.c: 135: uart_send_str((uint8_t*)"\texp=");
  4436  01A2  3006               	movlw	low (STR_4| (0+32768))
  4437  01A3  00F1               	movwf	uart_send_str@str
  4438  01A4  3090               	movlw	high (STR_4| (0+32768))
  4439  01A5  00F2               	movwf	uart_send_str@str+1
  4440  01A6  21E5  3180         	fcall	_uart_send_str
  4441                           
  4442                           ;main.c: 136: m_int_2_str_ex(str,voExpectAdcValue,sizeof(str));
  4443  01A8  085C               	movf	_voExpectAdcValue,w
  4444  01A9  00B2               	movwf	m_int_2_str_ex@x
  4445  01AA  085D               	movf	_voExpectAdcValue+1,w
  4446  01AB  2767  3180         	fcall	PL10	;call to abstracted procedure
  4447  01AD  2204  3180         	fcall	_m_int_2_str_ex
  4448                           
  4449                           ;main.c: 137: uart_send_str(str);
  4450  01AF  278D  3180         	fcall	PL26	;call to abstracted procedure
  4451  01B1  21E5  3180         	fcall	_uart_send_str
  4452                           
  4453                           ;main.c: 139: uart_send_str((uint8_t*)"\tvo=");
  4454  01B3  300C               	movlw	low (STR_5| (0+32768))
  4455  01B4  00F1               	movwf	uart_send_str@str
  4456  01B5  3090               	movlw	high (STR_5| (0+32768))
  4457  01B6  00F2               	movwf	uart_send_str@str+1
  4458  01B7  21E5  3180         	fcall	_uart_send_str
  4459                           
  4460                           ;main.c: 140: m_int_2_str_ex(str,rtAdcValueVoFb,sizeof(str));
  4461  01B9  085A               	movf	_rtAdcValueVoFb,w
  4462  01BA  00B2               	movwf	m_int_2_str_ex@x
  4463  01BB  085B               	movf	_rtAdcValueVoFb+1,w
  4464  01BC  2767  3180         	fcall	PL10	;call to abstracted procedure
  4465  01BE  2204  3180         	fcall	_m_int_2_str_ex
  4466                           
  4467                           ;main.c: 141: uart_send_str(str);
  4468  01C0  278D  3180         	fcall	PL26	;call to abstracted procedure
  4469  01C2  21E5  3180         	fcall	_uart_send_str
  4470                           
  4471                           ;main.c: 143: uart_send_str((uint8_t*)"\tpwm=");
  4472  01C4  3000               	movlw	low (STR_6| (0+32768))
  4473  01C5  00F1               	movwf	uart_send_str@str
  4474  01C6  3090               	movlw	high (STR_6| (0+32768))
  4475  01C7  00F2               	movwf	uart_send_str@str+1
  4476  01C8  21E5  3180         	fcall	_uart_send_str
  4477                           
  4478                           ;main.c: 144: m_int_2_str_ex(str,pwm2DutyForVout,sizeof(str));
  4479  01CA  086C               	movf	_pwm2DutyForVout,w
  4480  01CB  00B2               	movwf	m_int_2_str_ex@x
  4481  01CC  086D               	movf	_pwm2DutyForVout+1,w
  4482  01CD  00B3               	movwf	m_int_2_str_ex@x+1
  4483  01CE  0D89               	rlf	9,f
  4484  01CF  3B89               	subwfb	9,f
  4485  01D0  0989               	comf	9,f
  4486  01D1  00B4               	movwf	m_int_2_str_ex@x+2
  4487  01D2  00B5               	movwf	m_int_2_str_ex@x+3
  4488  01D3  3010               	movlw	16
  4489  01D4  00B6               	movwf	m_int_2_str_ex@ssize
  4490  01D5  30CE               	movlw	(low (_str| 0))& (0+255)
  4491  01D6  01B7               	clrf	m_int_2_str_ex@ssize+1
  4492  01D7  2204  3180         	fcall	_m_int_2_str_ex
  4493                           
  4494                           ;main.c: 145: uart_send_str(str);
  4495  01D9  278D  3180         	fcall	PL26	;call to abstracted procedure
  4496  01DB  21E5  3180         	fcall	_uart_send_str
  4497                           
  4498                           ;main.c: 147: uart_send_str((uint8_t*)"\r\n");
  4499  01DD  301E               	movlw	low (STR_7| (0+32768))
  4500  01DE  00F1               	movwf	uart_send_str@str
  4501  01DF  3090               	movlw	high (STR_7| (0+32768))
  4502  01E0  00F2               	movwf	uart_send_str@str+1
  4503  01E1  21E5  3180         	fcall	_uart_send_str
  4504  01E3                     l4140:	
  4505                           
  4506                           ;main.c: 149: }
  4507                           ;main.c: 160: __nop();
  4508  01E3  0000               	nop
  4509  01E4  28C7               	goto	l4072
  4510  01E5                     __end_of_main:	
  4511  01E5                     __ptext1:	
  4512 ;; *************** function _uart_send_str *****************
  4513 ;; Defined at:
  4514 ;;		line 19 in file "src/api/my_uart.c"
  4515 ;; Parameters:    Size  Location     Type
  4516 ;;  str             2    1[COMMON] PTR unsigned char 
  4517 ;;		 -> STR_7(3), STR_6(6), STR_5(5), STR_4(6), 
  4518 ;;		 -> STR_3(4), STR_2(5), str(16), STR_1(4), 
  4519 ;; Auto vars:     Size  Location     Type
  4520 ;;		None
  4521 ;; Return value:  Size  Location     Type
  4522 ;;                  1    wreg      void 
  4523 ;; Registers used:
  4524 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4525 ;; Tracked objects:
  4526 ;;		On entry : 1F/0
  4527 ;;		On exit  : 1F/0
  4528 ;;		Unchanged: 0/0
  4529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4530 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4532 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4533 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4534 ;;Total ram usage:        3 bytes
  4535 ;; Hardware stack levels used:    1
  4536 ;; Hardware stack levels required when called:    1
  4537 ;; This function calls:
  4538 ;;		Nothing
  4539 ;; This function is called by:
  4540 ;;		_main
  4541 ;; This function uses a non-reentrant model
  4542 ;;
  4543                           
  4544                           
  4545                           ;psect for function _uart_send_str
  4546  01E5                     _uart_send_str:	
  4547                           
  4548                           ;my_uart.c: 22: if(!TXSTAbits.TXEN)TXSTAbits.TXEN=1;
  4549                           
  4550                           ;incstack = 0
  4551                           ; Regs used in _uart_send_str: [wreg-fsr0h+status,2+status,0+pclath]
  4552  01E5  0023               	movlb	3	; select bank3
  4553  01E6  1E9E               	btfss	30,5	;volatile
  4554  01E7  169E               	bsf	30,5	;volatile
  4555  01E8                     l470:	
  4556  01E8  0020               	movlb	0	; select bank0
  4557  01E9  1A11               	btfsc	17,4	;volatile
  4558  01EA  29F9               	goto	l3166
  4559  01EB  29E8               	goto	l470
  4560  01EC                     l475:	
  4561  01EC  0020               	movlb	0	; select bank0
  4562  01ED  1E11               	btfss	17,4	;volatile
  4563  01EE  29EC               	goto	l475
  4564                           
  4565                           ;my_uart.c: 26: TXREG = *str;
  4566  01EF  0871               	movf	uart_send_str@str,w
  4567  01F0  0084               	movwf	4
  4568  01F1  0872               	movf	uart_send_str@str+1,w
  4569  01F2  0085               	movwf	5
  4570  01F3  0800               	movf	0,w	;code access
  4571  01F4  0023               	movlb	3	; select bank3
  4572  01F5  009A               	movwf	26	;volatile
  4573                           
  4574                           ;my_uart.c: 27: str++;
  4575  01F6  0AF1               	incf	uart_send_str@str,f
  4576  01F7  1903               	skipnz
  4577  01F8  0AF2               	incf	uart_send_str@str+1,f
  4578  01F9                     l3166:	
  4579  01F9  0871               	movf	uart_send_str@str,w
  4580  01FA  0084               	movwf	4
  4581  01FB  0872               	movf	uart_send_str@str+1,w
  4582  01FC  0085               	movwf	5
  4583  01FD  0012               	moviw fsr0++
  4584  01FE  1D03               	btfss	3,2
  4585  01FF  29EC               	goto	l475
  4586  0200                     l479:	
  4587  0200  0020               	movlb	0	; select bank0
  4588  0201  1A11               	btfsc	17,4	;volatile
  4589  0202  0008               	return
  4590  0203  2A00               	goto	l479
  4591  0204                     __end_of_uart_send_str:	
  4592  0204                     __ptext23:	
  4593 ;; *************** function _m_int_2_str_ex *****************
  4594 ;; Defined at:
  4595 ;;		line 140 in file "src/depend/m_string.c"
  4596 ;; Parameters:    Size  Location     Type
  4597 ;;  buf             1    wreg     PTR unsigned char 
  4598 ;;		 -> str(16), 
  4599 ;;  x               4   18[BANK0 ] long 
  4600 ;;  ssize           2   22[BANK0 ] unsigned int 
  4601 ;; Auto vars:     Size  Location     Type
  4602 ;;  buf             1   33[BANK0 ] PTR unsigned char 
  4603 ;;		 -> str(16), 
  4604 ;;  t               4   28[BANK0 ] long 
  4605 ;;  i               1   34[BANK0 ] unsigned char 
  4606 ;;  sig             1   32[BANK0 ] unsigned char 
  4607 ;;  len             1    0        unsigned char 
  4608 ;; Return value:  Size  Location     Type
  4609 ;;                  1    wreg      void 
  4610 ;; Registers used:
  4611 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4612 ;; Tracked objects:
  4613 ;;		On entry : 1F/0
  4614 ;;		On exit  : 1F/0
  4615 ;;		Unchanged: 0/0
  4616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4617 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4618 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4619 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4620 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4621 ;;Total ram usage:       17 bytes
  4622 ;; Hardware stack levels used:    1
  4623 ;; Hardware stack levels required when called:    2
  4624 ;; This function calls:
  4625 ;;		___aldiv
  4626 ;;		___almod
  4627 ;;		_m_mem_cpy
  4628 ;;		_m_mem_set
  4629 ;; This function is called by:
  4630 ;;		_main
  4631 ;; This function uses a non-reentrant model
  4632 ;;
  4633                           
  4634                           
  4635                           ;psect for function _m_int_2_str_ex
  4636  0204                     _m_int_2_str_ex:	
  4637                           
  4638                           ;incstack = 0
  4639                           ; Regs used in _m_int_2_str_ex: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4640                           ;m_int_2_str_ex@buf stored from wreg
  4641  0204  00C1               	movwf	m_int_2_str_ex@buf
  4642                           
  4643                           ;m_string.c: 142: int32_t t;
  4644                           ;m_string.c: 143: uint8_t len,i;
  4645                           ;m_string.c: 144: uint8_t sig=0;
  4646  0205  01C0               	clrf	m_int_2_str_ex@sig
  4647                           
  4648                           ;m_string.c: 145: if(x<0){
  4649  0206  1FB5               	btfss	m_int_2_str_ex@x+3,7
  4650  0207  2A1E               	goto	l4020
  4651                           
  4652                           ;m_string.c: 146: sig=1;
  4653  0208  01C0               	clrf	m_int_2_str_ex@sig
  4654  0209  0AC0               	incf	m_int_2_str_ex@sig,f
  4655                           
  4656                           ;m_string.c: 147: x=0-x;
  4657  020A  01B8               	clrf	??_m_int_2_str_ex
  4658  020B  01B9               	clrf	??_m_int_2_str_ex+1
  4659  020C  01BA               	clrf	??_m_int_2_str_ex+2
  4660  020D  01BB               	clrf	??_m_int_2_str_ex+3
  4661  020E  0832               	movf	m_int_2_str_ex@x,w
  4662  020F  02B8               	subwf	??_m_int_2_str_ex,f
  4663  0210  0833               	movf	m_int_2_str_ex@x+1,w
  4664  0211  3BB9               	subwfb	??_m_int_2_str_ex+1,f
  4665  0212  0834               	movf	m_int_2_str_ex@x+2,w
  4666  0213  3BBA               	subwfb	??_m_int_2_str_ex+2,f
  4667  0214  0835               	movf	m_int_2_str_ex@x+3,w
  4668  0215  3BBB               	subwfb	??_m_int_2_str_ex+3,f
  4669  0216  083B               	movf	??_m_int_2_str_ex+3,w
  4670  0217  00B5               	movwf	m_int_2_str_ex@x+3
  4671  0218  083A               	movf	??_m_int_2_str_ex+2,w
  4672  0219  00B4               	movwf	m_int_2_str_ex@x+2
  4673  021A  0839               	movf	??_m_int_2_str_ex+1,w
  4674  021B  00B3               	movwf	m_int_2_str_ex@x+1
  4675  021C  0838               	movf	??_m_int_2_str_ex,w
  4676  021D  00B2               	movwf	m_int_2_str_ex@x
  4677  021E                     l4020:	
  4678                           
  4679                           ;m_string.c: 148: }
  4680                           ;m_string.c: 149: m_mem_set(buf,0,ssize);
  4681  021E  01F1               	clrf	m_mem_set@x
  4682  021F  0837               	movf	m_int_2_str_ex@ssize+1,w
  4683  0220  00F3               	movwf	m_mem_set@len+1
  4684  0221  0836               	movf	m_int_2_str_ex@ssize,w
  4685  0222  00F2               	movwf	m_mem_set@len
  4686  0223  0841               	movf	m_int_2_str_ex@buf,w
  4687  0224  279E  3180         	fcall	_m_mem_set
  4688                           
  4689                           ;m_string.c: 150: for(i=ssize-2;i>=1;i--){
  4690  0226  0836               	movf	m_int_2_str_ex@ssize,w
  4691  0227  3EFE               	addlw	254
  4692  0228  00C2               	movwf	m_int_2_str_ex@i
  4693  0229                     l4024:	
  4694  0229  0842               	movf	m_int_2_str_ex@i,w
  4695  022A  1903               	btfsc	3,2
  4696  022B  2A6B               	goto	l4042
  4697                           
  4698                           ;m_string.c: 151: t=x%10;
  4699  022C  300A               	movlw	10
  4700  022D  00F1               	movwf	___almod@divisor
  4701  022E  01F2               	clrf	___almod@divisor+1
  4702  022F  01F3               	clrf	___almod@divisor+2
  4703  0230  01F4               	clrf	___almod@divisor+3
  4704  0231  0835               	movf	m_int_2_str_ex@x+3,w
  4705  0232  00F8               	movwf	___almod@dividend+3
  4706  0233  0834               	movf	m_int_2_str_ex@x+2,w
  4707  0234  00F7               	movwf	___almod@dividend+2
  4708  0235  0833               	movf	m_int_2_str_ex@x+1,w
  4709  0236  00F6               	movwf	___almod@dividend+1
  4710  0237  0832               	movf	m_int_2_str_ex@x,w
  4711  0238  00F5               	movwf	___almod@dividend
  4712  0239  318A  220B  3180   	fcall	___almod
  4713  023C  0874               	movf	?___almod+3,w
  4714  023D  00BF               	movwf	m_int_2_str_ex@t+3
  4715  023E  0873               	movf	?___almod+2,w
  4716  023F  00BE               	movwf	m_int_2_str_ex@t+2
  4717  0240  0872               	movf	?___almod+1,w
  4718  0241  00BD               	movwf	m_int_2_str_ex@t+1
  4719  0242  0871               	movf	?___almod,w
  4720  0243  00BC               	movwf	m_int_2_str_ex@t
  4721                           
  4722                           ;m_string.c: 152: buf[i]=(uint8_t)t+'0';
  4723  0244  0842               	movf	m_int_2_str_ex@i,w
  4724  0245  0741               	addwf	m_int_2_str_ex@buf,w
  4725  0246  00B8               	movwf	??_m_int_2_str_ex
  4726  0247  0086               	movwf	6
  4727  0248  0187               	clrf	7
  4728  0249  083C               	movf	m_int_2_str_ex@t,w
  4729  024A  3E30               	addlw	48
  4730  024B  0081               	movwf	1
  4731                           
  4732                           ;m_string.c: 153: x/=10;
  4733  024C  300A               	movlw	10
  4734  024D  00A4               	movwf	___aldiv@divisor
  4735  024E  01A5               	clrf	___aldiv@divisor+1
  4736  024F  01A6               	clrf	___aldiv@divisor+2
  4737  0250  01A7               	clrf	___aldiv@divisor+3
  4738  0251  0835               	movf	m_int_2_str_ex@x+3,w
  4739  0252  00AB               	movwf	___aldiv@dividend+3
  4740  0253  0834               	movf	m_int_2_str_ex@x+2,w
  4741  0254  00AA               	movwf	___aldiv@dividend+2
  4742  0255  0833               	movf	m_int_2_str_ex@x+1,w
  4743  0256  00A9               	movwf	___aldiv@dividend+1
  4744  0257  0832               	movf	m_int_2_str_ex@x,w
  4745  0258  00A8               	movwf	___aldiv@dividend
  4746  0259  24FD  3180         	fcall	___aldiv
  4747  025B  0827               	movf	?___aldiv+3,w
  4748  025C  00B5               	movwf	m_int_2_str_ex@x+3
  4749  025D  0826               	movf	?___aldiv+2,w
  4750  025E  00B4               	movwf	m_int_2_str_ex@x+2
  4751  025F  0825               	movf	?___aldiv+1,w
  4752  0260  00B3               	movwf	m_int_2_str_ex@x+1
  4753  0261  0824               	movf	?___aldiv,w
  4754  0262  00B2               	movwf	m_int_2_str_ex@x
  4755                           
  4756                           ;m_string.c: 154: if(x==0)break;
  4757  0263  0835               	movf	m_int_2_str_ex@x+3,w
  4758  0264  0434               	iorwf	m_int_2_str_ex@x+2,w
  4759  0265  0433               	iorwf	m_int_2_str_ex@x+1,w
  4760  0266  0432               	iorwf	m_int_2_str_ex@x,w
  4761  0267  1903               	btfsc	3,2
  4762  0268  2A6B               	goto	l4042
  4763  0269  03C2               	decf	m_int_2_str_ex@i,f
  4764  026A  2A29               	goto	l4024
  4765  026B                     l4042:	
  4766                           
  4767                           ;m_string.c: 155: }
  4768                           ;m_string.c: 156: if(sig){
  4769  026B  0840               	movf	m_int_2_str_ex@sig,w
  4770  026C  1903               	btfsc	3,2
  4771  026D  2A79               	goto	l4050
  4772                           
  4773                           ;m_string.c: 157: if(i>0)buf[i]='-';
  4774  026E  0842               	movf	m_int_2_str_ex@i,w
  4775  026F  1903               	btfsc	3,2
  4776  0270  2A78               	goto	l4048
  4777  0271  0842               	movf	m_int_2_str_ex@i,w
  4778  0272  0741               	addwf	m_int_2_str_ex@buf,w
  4779  0273  00B8               	movwf	??_m_int_2_str_ex
  4780  0274  0086               	movwf	6
  4781  0275  302D               	movlw	45
  4782  0276  0187               	clrf	7
  4783  0277  0081               	movwf	1
  4784  0278                     l4048:	
  4785                           
  4786                           ;m_string.c: 158: i--;
  4787  0278  03C2               	decf	m_int_2_str_ex@i,f
  4788  0279                     l4050:	
  4789                           
  4790                           ;m_string.c: 159: }
  4791                           ;m_string.c: 160: m_mem_cpy(buf,buf+i);
  4792  0279  0841               	movf	m_int_2_str_ex@buf,w
  4793  027A  0742               	addwf	m_int_2_str_ex@i,w
  4794  027B  00F1               	movwf	m_mem_cpy@s
  4795  027C  0841               	movf	m_int_2_str_ex@buf,w
  4796  027D  3187  2FD0         	ljmp	_m_mem_cpy
  4797  027F                     __end_of_m_int_2_str_ex:	
  4798  027F                     __ptext34:	
  4799 ;; *************** function _adc_sample *****************
  4800 ;; Defined at:
  4801 ;;		line 111 in file "src/api/sample.c"
  4802 ;; Parameters:    Size  Location     Type
  4803 ;;  ch              1    wreg     unsigned char 
  4804 ;;  gfvr            1    3[COMMON] unsigned char 
  4805 ;;  num             1    4[COMMON] unsigned char 
  4806 ;; Auto vars:     Size  Location     Type
  4807 ;;  ch              1    6[COMMON] unsigned char 
  4808 ;;  t16             2   10[COMMON] unsigned int 
  4809 ;;  ret             2    7[COMMON] unsigned int 
  4810 ;;  i               1    9[COMMON] unsigned char 
  4811 ;; Return value:  Size  Location     Type
  4812 ;;                  2    3[COMMON] unsigned int 
  4813 ;; Registers used:
  4814 ;;		wreg, status,2, status,0, pclath, cstack
  4815 ;; Tracked objects:
  4816 ;;		On entry : 0/0
  4817 ;;		On exit  : 0/0
  4818 ;;		Unchanged: 0/0
  4819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4820 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4821 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4822 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4823 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4824 ;;Total ram usage:        9 bytes
  4825 ;; Hardware stack levels used:    1
  4826 ;; Hardware stack levels required when called:    2
  4827 ;; This function calls:
  4828 ;;		_adc_init
  4829 ;;		_fvr_set_gain
  4830 ;; This function is called by:
  4831 ;;		_main
  4832 ;; This function uses a non-reentrant model
  4833 ;;
  4834                           
  4835                           
  4836                           ;psect for function _adc_sample
  4837  027F                     _adc_sample:	
  4838                           
  4839                           ;incstack = 0
  4840                           ; Regs used in _adc_sample: [wreg+status,2+status,0+pclath+cstack]
  4841                           ;adc_sample@ch stored from wreg
  4842  027F  00F6               	movwf	adc_sample@ch
  4843                           
  4844                           ;sample.c: 113: uint8_t i;
  4845                           ;sample.c: 114: uint16_t ret=0;
  4846  0280  01F7               	clrf	adc_sample@ret
  4847  0281  01F8               	clrf	adc_sample@ret+1
  4848                           
  4849                           ;sample.c: 117: fvr_set_gain(gfvr);
  4850  0282  0873               	movf	adc_sample@gfvr,w
  4851  0283  26E6  3180         	fcall	_fvr_set_gain
  4852                           
  4853                           ;sample.c: 118: adc_init((adc_channel_t)ch);
  4854  0285  0876               	movf	adc_sample@ch,w
  4855  0286  26D7  3180         	fcall	_adc_init
  4856                           
  4857                           ;sample.c: 119: _delay((unsigned long)((10)*(16000000/4000000.0)));
  4858  0288  300D               	movlw	13
  4859  0289  00F5               	movwf	??_adc_sample
  4860  028A                     u2937:	
  4861  028A  0BF5               	decfsz	??_adc_sample,f
  4862  028B  2A8A               	goto	u2937
  4863                           
  4864                           ;sample.c: 120: if(num>32)num=32;
  4865  028C  3021               	movlw	33
  4866  028D  0274               	subwf	adc_sample@num,w
  4867  028E  1C03               	skipc
  4868  028F  2A92               	goto	l3180
  4869  0290  3020               	movlw	32
  4870  0291  00F4               	movwf	adc_sample@num
  4871  0292                     l3180:	
  4872                           
  4873                           ;sample.c: 121: for(i=0;i<num;i++){
  4874  0292  01F9               	clrf	adc_sample@i
  4875  0293                     l3188:	
  4876  0293  0874               	movf	adc_sample@num,w
  4877  0294  0279               	subwf	adc_sample@i,w
  4878  0295  1803               	btfsc	3,0
  4879  0296  2AB2               	goto	l3190
  4880                           
  4881                           ;sample.c: 122: ADCON0bits.GO_nDONE = 1;
  4882  0297  0021               	movlb	1	; select bank1
  4883  0298  149D               	bsf	29,1	;volatile
  4884  0299                     l591:	
  4885                           ;sample.c: 123: while (ADCON0bits.GO_nDONE);
  4886                           
  4887  0299  189D               	btfsc	29,1	;volatile
  4888  029A  2A99               	goto	l591
  4889                           
  4890                           ;sample.c: 124: __nop();
  4891  029B  0000               	nop
  4892                           
  4893                           ;sample.c: 125: t16=ADRESH;
  4894  029C  0021               	movlb	1	; select bank1
  4895  029D  081C               	movf	28,w	;volatile
  4896  029E  00FA               	movwf	adc_sample@t16
  4897  029F  01FB               	clrf	adc_sample@t16+1
  4898                           
  4899                           ;sample.c: 126: t16<<=2;
  4900  02A0  35FA               	lslf	adc_sample@t16,f
  4901  02A1  0DFB               	rlf	adc_sample@t16+1,f
  4902  02A2  35FA               	lslf	adc_sample@t16,f
  4903  02A3  0DFB               	rlf	adc_sample@t16+1,f
  4904                           
  4905                           ;sample.c: 127: t16|=(ADRESL>>6);
  4906  02A4  081B               	movf	27,w	;volatile
  4907  02A5  00F5               	movwf	??_adc_sample
  4908  02A6  3006               	movlw	6
  4909  02A7                     u1855:	
  4910  02A7  36F5               	lsrf	??_adc_sample,f
  4911  02A8  0B89               	decfsz	9,f
  4912  02A9  2AA7               	goto	u1855
  4913  02AA  0875               	movf	??_adc_sample,w
  4914  02AB  04FA               	iorwf	adc_sample@t16,f
  4915                           
  4916                           ;sample.c: 129: ret+=t16;
  4917  02AC  087A               	movf	adc_sample@t16,w
  4918  02AD  07F7               	addwf	adc_sample@ret,f
  4919  02AE  087B               	movf	adc_sample@t16+1,w
  4920  02AF  3DF8               	addwfc	adc_sample@ret+1,f
  4921  02B0  0AF9               	incf	adc_sample@i,f
  4922  02B1  2A93               	goto	l3188
  4923  02B2                     l3190:	
  4924                           
  4925                           ;sample.c: 134: return ret;
  4926  02B2  0878               	movf	adc_sample@ret+1,w
  4927  02B3  00F4               	movwf	?_adc_sample+1
  4928  02B4  0877               	movf	adc_sample@ret,w
  4929  02B5  00F3               	movwf	?_adc_sample
  4930  02B6  0008               	return
  4931  02B7                     __end_of_adc_sample:	
  4932  02B7                     __ptext49:	
  4933 ;; *************** function _PWM1_Start *****************
  4934 ;; Defined at:
  4935 ;;		line 112 in file "mcc_generated_files/pwm1.c"
  4936 ;; Parameters:    Size  Location     Type
  4937 ;;		None
  4938 ;; Auto vars:     Size  Location     Type
  4939 ;;		None
  4940 ;; Return value:  Size  Location     Type
  4941 ;;                  1    wreg      void 
  4942 ;; Registers used:
  4943 ;;		None
  4944 ;; Tracked objects:
  4945 ;;		On entry : 1F/1
  4946 ;;		On exit  : 1F/1B
  4947 ;;		Unchanged: 0/0
  4948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4952 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4953 ;;Total ram usage:        0 bytes
  4954 ;; Hardware stack levels used:    1
  4955 ;; Hardware stack levels required when called:    1
  4956 ;; This function calls:
  4957 ;;		Nothing
  4958 ;; This function is called by:
  4959 ;;		_main
  4960 ;; This function uses a non-reentrant model
  4961 ;;
  4962                           
  4963                           
  4964                           ;psect for function _PWM1_Start
  4965  02B7                     _PWM1_Start:	
  4966                           
  4967                           ;pwm1.c: 114: PWM1CONbits.EN = 1;
  4968                           
  4969                           ;incstack = 0
  4970                           ; Regs used in _PWM1_Start: []
  4971  02B7  003B               	movlb	27	; select bank27
  4972  02B8  179B               	bsf	27,7	;volatile
  4973  02B9  0008               	return
  4974  02BA                     __end_of_PWM1_Start:	
  4975  02BA                     __ptext37:	
  4976 ;; *************** function _SYSTEM_Initialize *****************
  4977 ;; Defined at:
  4978 ;;		line 68 in file "mcc_generated_files/mcc.c"
  4979 ;; Parameters:    Size  Location     Type
  4980 ;;		None
  4981 ;; Auto vars:     Size  Location     Type
  4982 ;;		None
  4983 ;; Return value:  Size  Location     Type
  4984 ;;                  1    wreg      void 
  4985 ;; Registers used:
  4986 ;;		wreg, status,2, status,0, pclath, cstack
  4987 ;; Tracked objects:
  4988 ;;		On entry : 1F/1F
  4989 ;;		On exit  : 1F/1
  4990 ;;		Unchanged: 0/0
  4991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4996 ;;Total ram usage:        0 bytes
  4997 ;; Hardware stack levels used:    1
  4998 ;; Hardware stack levels required when called:    3
  4999 ;; This function calls:
  5000 ;;		_ADC1_Initialize
  5001 ;;		_EUSART_Initialize
  5002 ;;		_FVR_Initialize
  5003 ;;		_OSCILLATOR_Initialize
  5004 ;;		_PIN_MANAGER_Initialize
  5005 ;;		_PWM1_Initialize
  5006 ;;		_PWM2_Initialize
  5007 ;;		_TMR2_Initialize
  5008 ;;		_WDT_Initialize
  5009 ;; This function is called by:
  5010 ;;		_main
  5011 ;; This function uses a non-reentrant model
  5012 ;;
  5013                           
  5014                           
  5015                           ;psect for function _SYSTEM_Initialize
  5016  02BA                     _SYSTEM_Initialize:	
  5017                           
  5018                           ;mcc.c: 71: PIN_MANAGER_Initialize();
  5019                           
  5020                           ;incstack = 0
  5021                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5022  02BA  22D8  3180         	fcall	_PIN_MANAGER_Initialize
  5023                           
  5024                           ;mcc.c: 72: OSCILLATOR_Initialize();
  5025  02BC  22D3  3180         	fcall	_OSCILLATOR_Initialize
  5026                           
  5027                           ;mcc.c: 73: WDT_Initialize();
  5028  02BE  26D4  3180         	fcall	_WDT_Initialize
  5029                           
  5030                           ;mcc.c: 74: FVR_Initialize();
  5031  02C0  22CF  3180         	fcall	_FVR_Initialize
  5032                           
  5033                           ;mcc.c: 75: PWM1_Initialize();
  5034  02C2  2311  3180         	fcall	_PWM1_Initialize
  5035                           
  5036                           ;mcc.c: 76: PWM2_Initialize();
  5037  02C4  26BD  3180         	fcall	_PWM2_Initialize
  5038                           
  5039                           ;mcc.c: 77: ADC1_Initialize();
  5040  02C6  22CB  3180         	fcall	_ADC1_Initialize
  5041                           
  5042                           ;mcc.c: 78: TMR2_Initialize();
  5043  02C8  27BD  3180         	fcall	_TMR2_Initialize
  5044                           
  5045                           ;mcc.c: 79: EUSART_Initialize();
  5046  02CA  2FAF               	ljmp	l2784
  5047  02CB                     __end_of_SYSTEM_Initialize:	
  5048  02CB                     __ptext48:	
  5049 ;; *************** function _ADC1_Initialize *****************
  5050 ;; Defined at:
  5051 ;;		line 64 in file "mcc_generated_files/adc1.c"
  5052 ;; Parameters:    Size  Location     Type
  5053 ;;		None
  5054 ;; Auto vars:     Size  Location     Type
  5055 ;;		None
  5056 ;; Return value:  Size  Location     Type
  5057 ;;                  1    wreg      void 
  5058 ;; Registers used:
  5059 ;;		wreg, status,2
  5060 ;; Tracked objects:
  5061 ;;		On entry : 1F/1B
  5062 ;;		On exit  : 1F/1
  5063 ;;		Unchanged: 0/0
  5064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5068 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5069 ;;Total ram usage:        0 bytes
  5070 ;; Hardware stack levels used:    1
  5071 ;; Hardware stack levels required when called:    1
  5072 ;; This function calls:
  5073 ;;		Nothing
  5074 ;; This function is called by:
  5075 ;;		_SYSTEM_Initialize
  5076 ;; This function uses a non-reentrant model
  5077 ;;
  5078                           
  5079                           
  5080                           ;psect for function _ADC1_Initialize
  5081  02CB                     _ADC1_Initialize:	
  5082                           
  5083                           ;adc1.c: 69: ADCON0 = 0x01;
  5084                           
  5085                           ;incstack = 0
  5086                           ; Regs used in _ADC1_Initialize: [wreg+status,2]
  5087  02CB  3001               	movlw	1
  5088  02CC  0021               	movlb	1	; select bank1
  5089  02CD  009D               	movwf	29	;volatile
  5090                           
  5091                           ;adc1.c: 72: ADCON1 = 0x63;
  5092                           
  5093                           ;adc1.c: 75: ADCON2 = 0x00;
  5094                           
  5095                           ;adc1.c: 78: ADRESL = 0x00;
  5096                           
  5097                           ;adc1.c: 81: ADRESH = 0x00;
  5098  02CE  2F87               	ljmp	PL24	;call to abstracted procedure
  5099  02CF                     __end_of_ADC1_Initialize:	
  5100  02CF                     __ptext46:	
  5101 ;; *************** function _FVR_Initialize *****************
  5102 ;; Defined at:
  5103 ;;		line 57 in file "mcc_generated_files/fvr.c"
  5104 ;; Parameters:    Size  Location     Type
  5105 ;;		None
  5106 ;; Auto vars:     Size  Location     Type
  5107 ;;		None
  5108 ;; Return value:  Size  Location     Type
  5109 ;;                  1    wreg      void 
  5110 ;; Registers used:
  5111 ;;		wreg
  5112 ;; Tracked objects:
  5113 ;;		On entry : 1F/1
  5114 ;;		On exit  : 1F/2
  5115 ;;		Unchanged: 0/0
  5116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5120 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5121 ;;Total ram usage:        0 bytes
  5122 ;; Hardware stack levels used:    1
  5123 ;; Hardware stack levels required when called:    1
  5124 ;; This function calls:
  5125 ;;		Nothing
  5126 ;; This function is called by:
  5127 ;;		_SYSTEM_Initialize
  5128 ;; This function uses a non-reentrant model
  5129 ;;
  5130                           
  5131                           
  5132                           ;psect for function _FVR_Initialize
  5133  02CF                     _FVR_Initialize:	
  5134                           
  5135                           ;fvr.c: 60: FVRCON = 0x81;
  5136                           
  5137                           ;incstack = 0
  5138                           ; Regs used in _FVR_Initialize: [wreg]
  5139  02CF  3081               	movlw	129
  5140  02D0  0022               	movlb	2	; select bank2
  5141  02D1  0097               	movwf	23	;volatile
  5142  02D2  0008               	return
  5143  02D3                     __end_of_FVR_Initialize:	
  5144  02D3                     __ptext45:	
  5145 ;; *************** function _OSCILLATOR_Initialize *****************
  5146 ;; Defined at:
  5147 ;;		line 82 in file "mcc_generated_files/mcc.c"
  5148 ;; Parameters:    Size  Location     Type
  5149 ;;		None
  5150 ;; Auto vars:     Size  Location     Type
  5151 ;;		None
  5152 ;; Return value:  Size  Location     Type
  5153 ;;                  1    wreg      void 
  5154 ;; Registers used:
  5155 ;;		wreg, status,2
  5156 ;; Tracked objects:
  5157 ;;		On entry : 0/1F
  5158 ;;		On exit  : 1F/1
  5159 ;;		Unchanged: 0/0
  5160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5165 ;;Total ram usage:        0 bytes
  5166 ;; Hardware stack levels used:    1
  5167 ;; Hardware stack levels required when called:    1
  5168 ;; This function calls:
  5169 ;;		Nothing
  5170 ;; This function is called by:
  5171 ;;		_SYSTEM_Initialize
  5172 ;; This function uses a non-reentrant model
  5173 ;;
  5174                           
  5175                           
  5176                           ;psect for function _OSCILLATOR_Initialize
  5177  02D3                     _OSCILLATOR_Initialize:	
  5178                           
  5179                           ;mcc.c: 85: OSCCON = 0x78;
  5180                           
  5181                           ;incstack = 0
  5182                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  5183  02D3  3078               	movlw	120
  5184  02D4  0021               	movlb	1	; select bank1
  5185  02D5  0099               	movwf	25	;volatile
  5186                           
  5187                           ;mcc.c: 87: OSCTUNE = 0x00;
  5188  02D6  0198               	clrf	24	;volatile
  5189  02D7  0008               	return
  5190  02D8                     __end_of_OSCILLATOR_Initialize:	
  5191  02D8                     __ptext44:	
  5192 ;; *************** function _PIN_MANAGER_Initialize *****************
  5193 ;; Defined at:
  5194 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  5195 ;; Parameters:    Size  Location     Type
  5196 ;;		None
  5197 ;; Auto vars:     Size  Location     Type
  5198 ;;  state           1    1[COMMON] unsigned char 
  5199 ;; Return value:  Size  Location     Type
  5200 ;;                  1    wreg      void 
  5201 ;; Registers used:
  5202 ;;		wreg, status,2, status,0
  5203 ;; Tracked objects:
  5204 ;;		On entry : 1F/1F
  5205 ;;		On exit  : 0/0
  5206 ;;		Unchanged: 0/0
  5207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5209 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5211 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5212 ;;Total ram usage:        1 bytes
  5213 ;; Hardware stack levels used:    1
  5214 ;; Hardware stack levels required when called:    1
  5215 ;; This function calls:
  5216 ;;		Nothing
  5217 ;; This function is called by:
  5218 ;;		_SYSTEM_Initialize
  5219 ;; This function uses a non-reentrant model
  5220 ;;
  5221                           
  5222                           
  5223                           ;psect for function _PIN_MANAGER_Initialize
  5224  02D8                     _PIN_MANAGER_Initialize:	
  5225                           
  5226                           ;pin_manager.c: 57: LATA = 0x00;
  5227                           
  5228                           ;incstack = 0
  5229                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
  5230  02D8  0022               	movlb	2	; select bank2
  5231  02D9  018C               	clrf	12	;volatile
  5232                           
  5233                           ;pin_manager.c: 58: LATC = 0x00;
  5234  02DA  018E               	clrf	14	;volatile
  5235                           
  5236                           ;pin_manager.c: 63: TRISA = 0x0F;
  5237  02DB  300F               	movlw	15
  5238  02DC  0021               	movlb	1	; select bank1
  5239  02DD  008C               	movwf	12	;volatile
  5240                           
  5241                           ;pin_manager.c: 64: TRISC = 0x1f;
  5242  02DE  301F               	movlw	31
  5243  02DF  008E               	movwf	14	;volatile
  5244                           
  5245                           ;pin_manager.c: 69: ANSELC = 0x0F;
  5246  02E0  300F               	movlw	15
  5247  02E1  0023               	movlb	3	; select bank3
  5248  02E2  008E               	movwf	14	;volatile
  5249                           
  5250                           ;pin_manager.c: 70: ANSELA = 0x17;
  5251  02E3  3017               	movlw	23
  5252  02E4  008C               	movwf	12	;volatile
  5253                           
  5254                           ;pin_manager.c: 75: WPUA = 0x3B;
  5255  02E5  303B               	movlw	59
  5256  02E6  0024               	movlb	4	; select bank4
  5257  02E7  008C               	movwf	12	;volatile
  5258                           
  5259                           ;pin_manager.c: 76: WPUC = 0x30;
  5260  02E8  3030               	movlw	48
  5261  02E9  008E               	movwf	14	;volatile
  5262                           
  5263                           ;pin_manager.c: 77: OPTION_REGbits.nWPUEN = 0;
  5264  02EA  0021               	movlb	1	; select bank1
  5265  02EB  1395               	bcf	21,7	;volatile
  5266                           
  5267                           ;pin_manager.c: 82: ODCONA = 0x00;
  5268  02EC  0025               	movlb	5	; select bank5
  5269  02ED  018C               	clrf	12	;volatile
  5270                           
  5271                           ;pin_manager.c: 83: ODCONC = 0x00;
  5272  02EE  018E               	clrf	14	;volatile
  5273                           
  5274                           ;pin_manager.c: 90: bool state = (unsigned char)GIE;
  5275  02EF  3000               	movlw	0
  5276  02F0  1B8B               	btfsc	11,7	;volatile
  5277  02F1  3001               	movlw	1
  5278  02F2  00F1               	movwf	PIN_MANAGER_Initialize@state
  5279                           
  5280                           ;pin_manager.c: 91: GIE = 0;
  5281  02F3  138B               	bcf	11,7	;volatile
  5282                           
  5283                           ;pin_manager.c: 92: PPSLOCK = 0x55;
  5284                           
  5285                           ;pin_manager.c: 93: PPSLOCK = 0xAA;
  5286  02F4  2798  3180         	fcall	PL32	;call to abstracted procedure
  5287                           
  5288                           ;pin_manager.c: 94: PPSLOCKbits.PPSLOCKED = 0x00;
  5289  02F6  100F               	bcf	15,0	;volatile
  5290                           
  5291                           ;pin_manager.c: 96: RXPPSbits.RXPPS = 0x14;
  5292  02F7  0815               	movf	21,w	;volatile
  5293  02F8  39E0               	andlw	-32
  5294  02F9  3814               	iorlw	20
  5295  02FA  0095               	movwf	21	;volatile
  5296                           
  5297                           ;pin_manager.c: 97: RA4PPSbits.RA4PPS = 0x04;
  5298  02FB  003D               	movlb	29	; select bank29
  5299  02FC  0814               	movf	20,w	;volatile
  5300  02FD  39F0               	andlw	-16
  5301  02FE  3804               	iorlw	4
  5302  02FF  0094               	movwf	20	;volatile
  5303                           
  5304                           ;pin_manager.c: 98: RA5PPSbits.RA5PPS = 0x03;
  5305  0300  0815               	movf	21,w	;volatile
  5306  0301  39F0               	andlw	-16
  5307  0302  3803               	iorlw	3
  5308  0303  0095               	movwf	21	;volatile
  5309                           
  5310                           ;pin_manager.c: 99: RC5PPSbits.RC5PPS = 0x09;
  5311  0304  0825               	movf	37,w	;volatile
  5312  0305  39F0               	andlw	-16
  5313  0306  3809               	iorlw	9
  5314  0307  00A5               	movwf	37	;volatile
  5315                           
  5316                           ;pin_manager.c: 101: PPSLOCK = 0x55;
  5317                           
  5318                           ;pin_manager.c: 102: PPSLOCK = 0xAA;
  5319  0308  2798  3180         	fcall	PL32	;call to abstracted procedure
  5320                           
  5321                           ;pin_manager.c: 103: PPSLOCKbits.PPSLOCKED = 0x01;
  5322  030A  140F               	bsf	15,0	;volatile
  5323                           
  5324                           ;pin_manager.c: 105: GIE = state;
  5325  030B  1C71               	btfss	PIN_MANAGER_Initialize@state,0
  5326  030C  2B0F               	goto	u1280
  5327  030D  178B               	bsf	11,7	;volatile
  5328  030E  0008               	return
  5329  030F                     u1280:	
  5330  030F  138B               	bcf	11,7	;volatile
  5331  0310  0008               	return
  5332  0311                     __end_of_PIN_MANAGER_Initialize:	
  5333  0311                     __ptext43:	
  5334 ;; *************** function _PWM1_Initialize *****************
  5335 ;; Defined at:
  5336 ;;		line 58 in file "mcc_generated_files/pwm1.c"
  5337 ;; Parameters:    Size  Location     Type
  5338 ;;		None
  5339 ;; Auto vars:     Size  Location     Type
  5340 ;;		None
  5341 ;; Return value:  Size  Location     Type
  5342 ;;                  1    wreg      void 
  5343 ;; Registers used:
  5344 ;;		wreg, status,2
  5345 ;; Tracked objects:
  5346 ;;		On entry : 1F/2
  5347 ;;		On exit  : 1F/1B
  5348 ;;		Unchanged: 0/0
  5349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5353 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5354 ;;Total ram usage:        0 bytes
  5355 ;; Hardware stack levels used:    1
  5356 ;; Hardware stack levels required when called:    1
  5357 ;; This function calls:
  5358 ;;		Nothing
  5359 ;; This function is called by:
  5360 ;;		_SYSTEM_Initialize
  5361 ;; This function uses a non-reentrant model
  5362 ;;
  5363                           
  5364                           
  5365                           ;psect for function _PWM1_Initialize
  5366  0311                     _PWM1_Initialize:	
  5367                           
  5368                           ;pwm1.c: 63: PWM1INTE = 0x00;
  5369                           
  5370                           ;incstack = 0
  5371                           ; Regs used in _PWM1_Initialize: [wreg+status,2]
  5372  0311  003B               	movlb	27	; select bank27
  5373  0312  019C               	clrf	28	;volatile
  5374                           
  5375                           ;pwm1.c: 66: PWM1INTF = 0x00;
  5376  0313  019D               	clrf	29	;volatile
  5377                           
  5378                           ;pwm1.c: 69: PWM1CLKCON = 0x00;
  5379  0314  019E               	clrf	30	;volatile
  5380                           
  5381                           ;pwm1.c: 72: PWM1LDCON = 0x80;
  5382  0315  3080               	movlw	128
  5383  0316  009F               	movwf	31	;volatile
  5384                           
  5385                           ;pwm1.c: 75: PWM1OFCON = 0x00;
  5386  0317  01A0               	clrf	32	;volatile
  5387                           
  5388                           ;pwm1.c: 78: PWM1PHH = 0x00;
  5389  0318  0192               	clrf	18	;volatile
  5390                           
  5391                           ;pwm1.c: 81: PWM1PHL = 0x00;
  5392  0319  0191               	clrf	17	;volatile
  5393                           
  5394                           ;pwm1.c: 84: PWM1DCH = 0x00;
  5395  031A  0194               	clrf	20	;volatile
  5396                           
  5397                           ;pwm1.c: 87: PWM1DCL = 0xa0;
  5398  031B  30A0               	movlw	160
  5399  031C  0093               	movwf	19	;volatile
  5400                           
  5401                           ;pwm1.c: 90: PWM1PRH = 0x06;
  5402  031D  3006               	movlw	6
  5403  031E  0096               	movwf	22	;volatile
  5404                           
  5405                           ;pwm1.c: 93: PWM1PRL = 0x3F;
  5406  031F  303F               	movlw	63
  5407  0320  0095               	movwf	21	;volatile
  5408                           
  5409                           ;pwm1.c: 96: PWM1OFH = 0x00;
  5410  0321  0198               	clrf	24	;volatile
  5411                           
  5412                           ;pwm1.c: 99: PWM1OFL = 0x01;
  5413  0322  3001               	movlw	1
  5414  0323  0097               	movwf	23	;volatile
  5415                           
  5416                           ;pwm1.c: 102: PWM1TMRH = 0x00;
  5417  0324  019A               	clrf	26	;volatile
  5418                           
  5419                           ;pwm1.c: 105: PWM1TMRL = 0x00;
  5420  0325  0199               	clrf	25	;volatile
  5421                           
  5422                           ;pwm1.c: 108: PWM1CON = 0x90;
  5423  0326  3090               	movlw	144
  5424  0327  009B               	movwf	27	;volatile
  5425  0328  0008               	return
  5426  0329                     __end_of_PWM1_Initialize:	
  5427  0329                     __ptext20:	
  5428 ;; *************** function _pid_pwm1_idrv_b_b *****************
  5429 ;; Defined at:
  5430 ;;		line 209 in file "src/api/sample.c"
  5431 ;; Parameters:    Size  Location     Type
  5432 ;;		None
  5433 ;; Auto vars:     Size  Location     Type
  5434 ;;  t32             4   18[BANK0 ] long 
  5435 ;; Return value:  Size  Location     Type
  5436 ;;                  1    wreg      void 
  5437 ;; Registers used:
  5438 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5439 ;; Tracked objects:
  5440 ;;		On entry : 1F/0
  5441 ;;		On exit  : 1E/0
  5442 ;;		Unchanged: 0/0
  5443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5445 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5446 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5447 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5448 ;;Total ram usage:        5 bytes
  5449 ;; Hardware stack levels used:    1
  5450 ;; Hardware stack levels required when called:    3
  5451 ;; This function calls:
  5452 ;;		___aldiv
  5453 ;;		___lmul
  5454 ;;		_set_idrv_pwm1_duty
  5455 ;; This function is called by:
  5456 ;;		_main
  5457 ;; This function uses a non-reentrant model
  5458 ;;
  5459                           
  5460                           
  5461                           ;psect for function _pid_pwm1_idrv_b_b
  5462  0329                     _pid_pwm1_idrv_b_b:	
  5463                           
  5464                           ;sample.c: 211: int32_t t32;
  5465                           ;sample.c: 212: t32=(resRs-resRc);
  5466                           
  5467                           ;incstack = 0
  5468                           ; Regs used in _pid_pwm1_idrv_b_b: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5469  0329  086B               	movf	_resRs+3,w
  5470  032A  00B5               	movwf	pid_pwm1_idrv_b_b@t32+3
  5471  032B  086A               	movf	_resRs+2,w
  5472  032C  00B4               	movwf	pid_pwm1_idrv_b_b@t32+2
  5473  032D  0869               	movf	_resRs+1,w
  5474  032E  00B3               	movwf	pid_pwm1_idrv_b_b@t32+1
  5475  032F  0868               	movf	_resRs,w
  5476  0330  00B2               	movwf	pid_pwm1_idrv_b_b@t32
  5477  0331  0864               	movf	_resRc,w
  5478  0332  02B2               	subwf	pid_pwm1_idrv_b_b@t32,f
  5479  0333  0865               	movf	_resRc+1,w
  5480  0334  3BB3               	subwfb	pid_pwm1_idrv_b_b@t32+1,f
  5481  0335  0866               	movf	_resRc+2,w
  5482  0336  3BB4               	subwfb	pid_pwm1_idrv_b_b@t32+2,f
  5483  0337  0867               	movf	_resRc+3,w
  5484  0338  3BB5               	subwfb	pid_pwm1_idrv_b_b@t32+3,f
  5485                           
  5486                           ;sample.c: 213: switch(pidBbSm){
  5487  0339  2C95               	goto	l3858
  5488  033A                     l3812:	
  5489                           
  5490                           ;sample.c: 216: case 1:
  5491                           ;sample.c: 217: pidTestNum=0;
  5492  033A  01E1               	clrf	_pidTestNum
  5493  033B                     l3814:	
  5494                           
  5495                           ;sample.c: 218: set_idrv_pwm1_duty(1200);
  5496  033B  30B0               	movlw	176
  5497  033C  00F3               	movwf	set_idrv_pwm1_duty@duty
  5498  033D  3004               	movlw	4
  5499  033E  00F4               	movwf	set_idrv_pwm1_duty@duty+1
  5500  033F  26A1  3180         	fcall	_set_idrv_pwm1_duty
  5501                           
  5502                           ;sample.c: 219: pidBbSm=2;
  5503  0341  3002               	movlw	2
  5504  0342  2C92               	goto	L6
  5505  0343                     l3818:	
  5506                           ;sample.c: 220: break;
  5507                           
  5508                           
  5509                           ;sample.c: 222: if(t32>3500){
  5510  0343  1BB5               	btfsc	pid_pwm1_idrv_b_b@t32+3,7
  5511  0344  2C9F               	goto	l3860
  5512  0345  0835               	movf	pid_pwm1_idrv_b_b@t32+3,w
  5513  0346  1D03               	btfss	3,2
  5514  0347  2B51               	goto	l3820
  5515  0348  0834               	movf	pid_pwm1_idrv_b_b@t32+2,w
  5516  0349  1D03               	btfss	3,2
  5517  034A  2B51               	goto	l3820
  5518  034B  30AD               	movlw	173
  5519  034C  0232               	subwf	pid_pwm1_idrv_b_b@t32,w
  5520  034D  300D               	movlw	13
  5521  034E  3B33               	subwfb	pid_pwm1_idrv_b_b@t32+1,w
  5522  034F  1C03               	btfss	3,0
  5523  0350  2C9F               	goto	l3860
  5524  0351                     l3820:	
  5525                           
  5526                           ;sample.c: 223: set_idrv_pwm1_duty(2);
  5527  0351  3002               	movlw	2
  5528  0352  00F3               	movwf	set_idrv_pwm1_duty@duty
  5529  0353  01F4               	clrf	set_idrv_pwm1_duty@duty+1
  5530  0354  26A1  3180         	fcall	_set_idrv_pwm1_duty
  5531                           
  5532                           ;sample.c: 224: pidBbSm=3;
  5533  0356  3003               	movlw	3
  5534  0357  2C92               	goto	L6
  5535  0358                     l3824:	
  5536                           ;sample.c: 225: break;
  5537                           
  5538                           
  5539                           ;sample.c: 229: if(t32<500){
  5540  0358  1BB5               	btfsc	pid_pwm1_idrv_b_b@t32+3,7
  5541  0359  2B66               	goto	l3826
  5542  035A  0835               	movf	pid_pwm1_idrv_b_b@t32+3,w
  5543  035B  1D03               	btfss	3,2
  5544  035C  2C9F               	goto	l3860
  5545  035D  0834               	movf	pid_pwm1_idrv_b_b@t32+2,w
  5546  035E  1D03               	btfss	3,2
  5547  035F  2C9F               	goto	l3860
  5548  0360  30F4               	movlw	244
  5549  0361  0232               	subwf	pid_pwm1_idrv_b_b@t32,w
  5550  0362  3001               	movlw	1
  5551  0363  3B33               	subwfb	pid_pwm1_idrv_b_b@t32+1,w
  5552  0364  1803               	btfsc	3,0
  5553  0365  2C9F               	goto	l3860
  5554  0366                     l3826:	
  5555                           
  5556                           ;sample.c: 230: bbt0=bbt1;
  5557  0366  0021               	movlb	1	; select bank1
  5558  0367  083F               	movf	(_bbt1+3)^(0+128),w
  5559  0368  00BB               	movwf	(_bbt0+3)^(0+128)
  5560  0369  083E               	movf	(_bbt1+2)^(0+128),w
  5561  036A  00BA               	movwf	(_bbt0+2)^(0+128)
  5562  036B  083D               	movf	(_bbt1+1)^(0+128),w
  5563  036C  00B9               	movwf	(_bbt0+1)^(0+128)
  5564  036D  083C               	movf	_bbt1^(0+128),w
  5565  036E  00B8               	movwf	_bbt0^(0+128)
  5566                           
  5567                           ;sample.c: 231: bbt1=globalTicker;
  5568  036F  084B               	movf	(_globalTicker+3)^(0+128),w	;volatile
  5569  0370  00BF               	movwf	(_bbt1+3)^(0+128)
  5570  0371  084A               	movf	(_globalTicker+2)^(0+128),w	;volatile
  5571  0372  00BE               	movwf	(_bbt1+2)^(0+128)
  5572  0373  0849               	movf	(_globalTicker+1)^(0+128),w	;volatile
  5573  0374  00BD               	movwf	(_bbt1+1)^(0+128)
  5574  0375  0848               	movf	_globalTicker^(0+128),w	;volatile
  5575  0376  00BC               	movwf	_bbt1^(0+128)
  5576                           
  5577                           ;sample.c: 232: pidTestNum++;
  5578  0377  0020               	movlb	0	; select bank0
  5579  0378  3006               	movlw	6
  5580  0379  0AE1               	incf	_pidTestNum,f
  5581                           
  5582                           ;sample.c: 233: if(pidTestNum>5){
  5583  037A  0261               	subwf	_pidTestNum,w
  5584  037B  1C03               	skipc
  5585  037C  2B3B               	goto	l3814
  5586                           
  5587                           ;sample.c: 234: pidBbSm=4;
  5588  037D  3004               	movlw	4
  5589  037E  2C93               	goto	L5
  5590  037F                     l3838:	
  5591                           ;sample.c: 235: break;
  5592                           
  5593                           
  5594                           ;sample.c: 243: bbtu=bbt1-bbt0;
  5595  037F  0021               	movlb	1	; select bank1
  5596  0380  083F               	movf	(_bbt1+3)^(0+128),w
  5597  0381  0020               	movlb	0	; select bank0
  5598  0382  00CF               	movwf	_bbtu+3
  5599  0383  0021               	movlb	1	; select bank1
  5600  0384  083E               	movf	(_bbt1+2)^(0+128),w
  5601  0385  0020               	movlb	0	; select bank0
  5602  0386  00CE               	movwf	_bbtu+2
  5603  0387  0021               	movlb	1	; select bank1
  5604  0388  083D               	movf	(_bbt1+1)^(0+128),w
  5605  0389  0020               	movlb	0	; select bank0
  5606  038A  00CD               	movwf	_bbtu+1
  5607  038B  0021               	movlb	1	; select bank1
  5608  038C  083C               	movf	_bbt1^(0+128),w
  5609  038D  0020               	movlb	0	; select bank0
  5610  038E  00CC               	movwf	_bbtu
  5611  038F  0021               	movlb	1	; select bank1
  5612  0390  0838               	movf	_bbt0^(0+128),w
  5613  0391  0020               	movlb	0	; select bank0
  5614  0392  02CC               	subwf	_bbtu,f
  5615  0393  0021               	movlb	1	; select bank1
  5616  0394  0839               	movf	(_bbt0+1)^(0+128),w
  5617  0395  0020               	movlb	0	; select bank0
  5618  0396  3BCD               	subwfb	_bbtu+1,f
  5619  0397  0021               	movlb	1	; select bank1
  5620  0398  083A               	movf	(_bbt0+2)^(0+128),w
  5621  0399  0020               	movlb	0	; select bank0
  5622  039A  3BCE               	subwfb	_bbtu+2,f
  5623  039B  0021               	movlb	1	; select bank1
  5624  039C  083B               	movf	(_bbt0+3)^(0+128),w
  5625  039D  0020               	movlb	0	; select bank0
  5626  039E  3BCF               	subwfb	_bbtu+3,f
  5627                           
  5628                           ;sample.c: 244: bbtu=bbtu/5;
  5629  039F  3005               	movlw	5
  5630  03A0  00A4               	movwf	___aldiv@divisor
  5631  03A1  275B  3180         	fcall	PL8	;call to abstracted procedure
  5632  03A3  24FD  3180         	fcall	___aldiv
  5633  03A5  0827               	movf	?___aldiv+3,w
  5634  03A6  00CF               	movwf	_bbtu+3
  5635  03A7  0826               	movf	?___aldiv+2,w
  5636  03A8  00CE               	movwf	_bbtu+2
  5637  03A9  0825               	movf	?___aldiv+1,w
  5638  03AA  00CD               	movwf	_bbtu+1
  5639  03AB  0824               	movf	?___aldiv,w
  5640  03AC  00CC               	movwf	_bbtu
  5641                           
  5642                           ;sample.c: 245: bbta=(bbmax-bbmin)/2;
  5643  03AD  0021               	movlb	1	; select bank1
  5644  03AE  0861               	movf	(_bbmax+3)^(0+128),w
  5645  03AF  0020               	movlb	0	; select bank0
  5646  03B0  00AB               	movwf	___aldiv@dividend+3
  5647  03B1  0021               	movlb	1	; select bank1
  5648  03B2  0860               	movf	(_bbmax+2)^(0+128),w
  5649  03B3  0020               	movlb	0	; select bank0
  5650  03B4  00AA               	movwf	___aldiv@dividend+2
  5651  03B5  0021               	movlb	1	; select bank1
  5652  03B6  085F               	movf	(_bbmax+1)^(0+128),w
  5653  03B7  0020               	movlb	0	; select bank0
  5654  03B8  00A9               	movwf	___aldiv@dividend+1
  5655  03B9  0021               	movlb	1	; select bank1
  5656  03BA  085E               	movf	_bbmax^(0+128),w
  5657  03BB  0020               	movlb	0	; select bank0
  5658  03BC  00A8               	movwf	___aldiv@dividend
  5659  03BD  0021               	movlb	1	; select bank1
  5660  03BE  0862               	movf	_bbmin^(0+128),w
  5661  03BF  0020               	movlb	0	; select bank0
  5662  03C0  02A8               	subwf	___aldiv@dividend,f
  5663  03C1  0021               	movlb	1	; select bank1
  5664  03C2  0863               	movf	(_bbmin+1)^(0+128),w
  5665  03C3  0020               	movlb	0	; select bank0
  5666  03C4  3BA9               	subwfb	___aldiv@dividend+1,f
  5667  03C5  0021               	movlb	1	; select bank1
  5668  03C6  0864               	movf	(_bbmin+2)^(0+128),w
  5669  03C7  0020               	movlb	0	; select bank0
  5670  03C8  3BAA               	subwfb	___aldiv@dividend+2,f
  5671  03C9  0021               	movlb	1	; select bank1
  5672  03CA  0865               	movf	(_bbmin+3)^(0+128),w
  5673  03CB  0020               	movlb	0	; select bank0
  5674  03CC  3BAB               	subwfb	___aldiv@dividend+3,f
  5675  03CD  3002               	movlw	2
  5676  03CE  00A4               	movwf	___aldiv@divisor
  5677  03CF  01A5               	clrf	___aldiv@divisor+1
  5678  03D0  01A6               	clrf	___aldiv@divisor+2
  5679  03D1  01A7               	clrf	___aldiv@divisor+3
  5680  03D2  24FD  3180         	fcall	___aldiv
  5681  03D4  0827               	movf	?___aldiv+3,w
  5682  03D5  0021               	movlb	1	; select bank1
  5683  03D6  00C3               	movwf	(_bbta+3)^(0+128)
  5684  03D7  0020               	movlb	0	; select bank0
  5685  03D8  0826               	movf	?___aldiv+2,w
  5686  03D9  0021               	movlb	1	; select bank1
  5687  03DA  00C2               	movwf	(_bbta+2)^(0+128)
  5688  03DB  0020               	movlb	0	; select bank0
  5689  03DC  0825               	movf	?___aldiv+1,w
  5690  03DD  0021               	movlb	1	; select bank1
  5691  03DE  00C1               	movwf	(_bbta+1)^(0+128)
  5692  03DF  0020               	movlb	0	; select bank0
  5693  03E0  0824               	movf	?___aldiv,w
  5694  03E1  0021               	movlb	1	; select bank1
  5695  03E2  00C0               	movwf	_bbta^(0+128)
  5696                           
  5697                           ;sample.c: 246: bbu=(1200-2)/2;
  5698  03E3  3002               	movlw	2
  5699  03E4  01C7               	clrf	(_bbu+3)^(0+128)
  5700  03E5  01C6               	clrf	(_bbu+2)^(0+128)
  5701  03E6  00C5               	movwf	(_bbu+1)^(0+128)
  5702  03E7  3057               	movlw	87
  5703  03E8  00C4               	movwf	_bbu^(0+128)
  5704                           
  5705                           ;sample.c: 248: bbku=(bbu*40000)/(bbta*314);
  5706  03E9  0843               	movf	(_bbta+3)^(0+128),w
  5707  03EA  00F4               	movwf	___lmul@multiplier+3
  5708  03EB  0842               	movf	(_bbta+2)^(0+128),w
  5709  03EC  00F3               	movwf	___lmul@multiplier+2
  5710  03ED  0841               	movf	(_bbta+1)^(0+128),w
  5711  03EE  00F2               	movwf	___lmul@multiplier+1
  5712  03EF  0840               	movf	_bbta^(0+128),w
  5713  03F0  00F1               	movwf	___lmul@multiplier
  5714  03F1  3001               	movlw	1
  5715  03F2  01F8               	clrf	___lmul@multiplicand+3
  5716  03F3  01F7               	clrf	___lmul@multiplicand+2
  5717  03F4  00F6               	movwf	___lmul@multiplicand+1
  5718  03F5  303A               	movlw	58
  5719  03F6  00F5               	movwf	___lmul@multiplicand
  5720  03F7  2569  3180         	fcall	___lmul
  5721  03F9  0874               	movf	?___lmul+3,w
  5722  03FA  00A7               	movwf	___aldiv@divisor+3
  5723  03FB  0873               	movf	?___lmul+2,w
  5724  03FC  00A6               	movwf	___aldiv@divisor+2
  5725  03FD  0872               	movf	?___lmul+1,w
  5726  03FE  00A5               	movwf	___aldiv@divisor+1
  5727  03FF  0871               	movf	?___lmul,w
  5728  0400  00A4               	movwf	___aldiv@divisor
  5729  0401  3002               	movlw	2
  5730  0402  01F4               	clrf	___lmul@multiplier+3
  5731  0403  01F3               	clrf	___lmul@multiplier+2
  5732  0404  00F2               	movwf	___lmul@multiplier+1
  5733  0405  3057               	movlw	87
  5734  0406  00F1               	movwf	___lmul@multiplier
  5735  0407  309C               	movlw	156
  5736  0408  01F8               	clrf	___lmul@multiplicand+3
  5737  0409  01F7               	clrf	___lmul@multiplicand+2
  5738  040A  00F6               	movwf	___lmul@multiplicand+1
  5739  040B  3040               	movlw	64
  5740  040C  00F5               	movwf	___lmul@multiplicand
  5741  040D  2569  3180         	fcall	___lmul
  5742  040F  2752  3180         	fcall	PL2	;call to abstracted procedure
  5743  0411  24FD  3180         	fcall	___aldiv
  5744  0413  0827               	movf	?___aldiv+3,w
  5745  0414  0021               	movlb	1	; select bank1
  5746  0415  00B7               	movwf	(_bbku+3)^(0+128)
  5747  0416  0020               	movlb	0	; select bank0
  5748  0417  0826               	movf	?___aldiv+2,w
  5749  0418  0021               	movlb	1	; select bank1
  5750  0419  00B6               	movwf	(_bbku+2)^(0+128)
  5751  041A  0020               	movlb	0	; select bank0
  5752  041B  0825               	movf	?___aldiv+1,w
  5753  041C  0021               	movlb	1	; select bank1
  5754  041D  00B5               	movwf	(_bbku+1)^(0+128)
  5755  041E  0020               	movlb	0	; select bank0
  5756  041F  0824               	movf	?___aldiv,w
  5757  0420  0021               	movlb	1	; select bank1
  5758  0421  00B4               	movwf	_bbku^(0+128)
  5759                           
  5760                           ;sample.c: 249: bbku*=100;
  5761  0422  3064               	movlw	100
  5762  0423  00F1               	movwf	___lmul@multiplier
  5763  0424  01F2               	clrf	___lmul@multiplier+1
  5764  0425  01F3               	clrf	___lmul@multiplier+2
  5765  0426  01F4               	clrf	___lmul@multiplier+3
  5766  0427  0837               	movf	(_bbku+3)^(0+128),w
  5767  0428  00F8               	movwf	___lmul@multiplicand+3
  5768  0429  0836               	movf	(_bbku+2)^(0+128),w
  5769  042A  00F7               	movwf	___lmul@multiplicand+2
  5770  042B  0835               	movf	(_bbku+1)^(0+128),w
  5771  042C  00F6               	movwf	___lmul@multiplicand+1
  5772  042D  0834               	movf	_bbku^(0+128),w
  5773  042E  00F5               	movwf	___lmul@multiplicand
  5774  042F  2569  3180         	fcall	___lmul
  5775  0431  0874               	movf	?___lmul+3,w
  5776  0432  0021               	movlb	1	; select bank1
  5777  0433  00B7               	movwf	(_bbku+3)^(0+128)
  5778  0434  0873               	movf	?___lmul+2,w
  5779  0435  00B6               	movwf	(_bbku+2)^(0+128)
  5780  0436  0872               	movf	?___lmul+1,w
  5781  0437  00B5               	movwf	(_bbku+1)^(0+128)
  5782  0438  0871               	movf	?___lmul,w
  5783  0439  00B4               	movwf	_bbku^(0+128)
  5784                           
  5785                           ;sample.c: 251: PidKp=bbku*10/17;
  5786  043A  3011               	movlw	17
  5787  043B  0020               	movlb	0	; select bank0
  5788  043C  00A4               	movwf	___aldiv@divisor
  5789  043D  01A5               	clrf	___aldiv@divisor+1
  5790  043E  01A6               	clrf	___aldiv@divisor+2
  5791  043F  01A7               	clrf	___aldiv@divisor+3
  5792  0440  0021               	movlb	1	; select bank1
  5793  0441  0837               	movf	(_bbku+3)^(0+128),w
  5794  0442  00F4               	movwf	___lmul@multiplier+3
  5795  0443  0836               	movf	(_bbku+2)^(0+128),w
  5796  0444  00F3               	movwf	___lmul@multiplier+2
  5797  0445  0835               	movf	(_bbku+1)^(0+128),w
  5798  0446  00F2               	movwf	___lmul@multiplier+1
  5799  0447  0834               	movf	_bbku^(0+128),w
  5800  0448  2780  3180         	fcall	PL22	;call to abstracted procedure
  5801  044A  2569  3180         	fcall	___lmul
  5802  044C  2752  3180         	fcall	PL2	;call to abstracted procedure
  5803  044E  24FD  3180         	fcall	___aldiv
  5804  0450  0827               	movf	?___aldiv+3,w
  5805  0451  00CB               	movwf	_PidKp+3
  5806  0452  0826               	movf	?___aldiv+2,w
  5807  0453  00CA               	movwf	_PidKp+2
  5808  0454  0825               	movf	?___aldiv+1,w
  5809  0455  00C9               	movwf	_PidKp+1
  5810  0456  0824               	movf	?___aldiv,w
  5811  0457  00C8               	movwf	_PidKp
  5812                           
  5813                           ;sample.c: 252: PidTi=bbtu*10/20;
  5814  0458  3014               	movlw	20
  5815  0459  00A4               	movwf	___aldiv@divisor
  5816  045A  01A5               	clrf	___aldiv@divisor+1
  5817  045B  01A6               	clrf	___aldiv@divisor+2
  5818  045C  01A7               	clrf	___aldiv@divisor+3
  5819  045D  084F               	movf	_bbtu+3,w
  5820  045E  00F4               	movwf	___lmul@multiplier+3
  5821  045F  084E               	movf	_bbtu+2,w
  5822  0460  00F3               	movwf	___lmul@multiplier+2
  5823  0461  084D               	movf	_bbtu+1,w
  5824  0462  00F2               	movwf	___lmul@multiplier+1
  5825  0463  084C               	movf	_bbtu,w
  5826  0464  2780  3180         	fcall	PL22	;call to abstracted procedure
  5827  0466  2569  3180         	fcall	___lmul
  5828  0468  2752  3180         	fcall	PL2	;call to abstracted procedure
  5829  046A  24FD  3180         	fcall	___aldiv
  5830  046C  0827               	movf	?___aldiv+3,w
  5831  046D  0021               	movlb	1	; select bank1
  5832  046E  00B3               	movwf	(_PidTi+3)^(0+128)
  5833  046F  0020               	movlb	0	; select bank0
  5834  0470  0826               	movf	?___aldiv+2,w
  5835  0471  0021               	movlb	1	; select bank1
  5836  0472  00B2               	movwf	(_PidTi+2)^(0+128)
  5837  0473  0020               	movlb	0	; select bank0
  5838  0474  0825               	movf	?___aldiv+1,w
  5839  0475  0021               	movlb	1	; select bank1
  5840  0476  00B1               	movwf	(_PidTi+1)^(0+128)
  5841  0477  0020               	movlb	0	; select bank0
  5842  0478  0824               	movf	?___aldiv,w
  5843  0479  0021               	movlb	1	; select bank1
  5844  047A  00B0               	movwf	_PidTi^(0+128)
  5845                           
  5846                           ;sample.c: 253: PidTd=bbtu/10;
  5847  047B  300A               	movlw	10
  5848  047C  0020               	movlb	0	; select bank0
  5849  047D  00A4               	movwf	___aldiv@divisor
  5850  047E  275B  3180         	fcall	PL8	;call to abstracted procedure
  5851  0480  24FD  3180         	fcall	___aldiv
  5852  0482  0827               	movf	?___aldiv+3,w
  5853  0483  0021               	movlb	1	; select bank1
  5854  0484  00AF               	movwf	(_PidTd+3)^(0+128)
  5855  0485  0020               	movlb	0	; select bank0
  5856  0486  0826               	movf	?___aldiv+2,w
  5857  0487  0021               	movlb	1	; select bank1
  5858  0488  00AE               	movwf	(_PidTd+2)^(0+128)
  5859  0489  0020               	movlb	0	; select bank0
  5860  048A  0825               	movf	?___aldiv+1,w
  5861  048B  0021               	movlb	1	; select bank1
  5862  048C  00AD               	movwf	(_PidTd+1)^(0+128)
  5863  048D  0020               	movlb	0	; select bank0
  5864  048E  0824               	movf	?___aldiv,w
  5865  048F  0021               	movlb	1	; select bank1
  5866  0490  00AC               	movwf	_PidTd^(0+128)
  5867                           
  5868                           ;sample.c: 254: pidBbSm=5;
  5869  0491  3005               	movlw	5
  5870  0492                     L6:	
  5871  0492  0020               	movlb	0	; select bank0
  5872  0493                     L5:	
  5873  0493  00E0               	movwf	_pidBbSm
  5874                           
  5875                           ;sample.c: 255: break;
  5876  0494  2C9F               	goto	l3860
  5877  0495                     l3858:	
  5878  0495  0860               	movf	_pidBbSm,w
  5879                           
  5880                           ; Switch size 1, requested type "space"
  5881                           ; Number of cases is 6, Range of values is 0 to 5
  5882                           ; switch strategies available:
  5883                           ; Name         Instructions Cycles
  5884                           ; direct_byte           18     6 (fixed)
  5885                           ; simple_byte           19    10 (average)
  5886                           ; jumptable            260     6 (fixed)
  5887                           ;	Chosen strategy is direct_byte
  5888  0496  0084               	movwf	4
  5889  0497  3006               	movlw	6
  5890  0498  0204               	subwf	4,w
  5891  0499  1803               	skipnc
  5892  049A  2C9F               	goto	l3860
  5893  049B  3187               	movlp	high S4162
  5894  049C  3504               	lslf	4,w
  5895  049D  3EF2               	addlw	low S4162
  5896  049E  0082               	movwf	2
  5897  049F                     l3860:	
  5898                           
  5899                           ;sample.c: 257: if(pidTestNum>2){
  5900  049F  3003               	movlw	3
  5901  04A0  0261               	subwf	_pidTestNum,w
  5902  04A1  1C03               	skipc
  5903  04A2  0008               	return
  5904                           
  5905                           ;sample.c: 258: if(bbmax<t32)bbmax=t32;
  5906  04A3  0021               	movlb	1	; select bank1
  5907  04A4  0861               	movf	(_bbmax+3)^(0+128),w
  5908  04A5  3A80               	xorlw	128
  5909  04A6  00F9               	movwf	??_pid_pwm1_idrv_b_b
  5910  04A7  0020               	movlb	0	; select bank0
  5911  04A8  0835               	movf	pid_pwm1_idrv_b_b@t32+3,w
  5912  04A9  3A80               	xorlw	128
  5913  04AA  0279               	subwf	??_pid_pwm1_idrv_b_b,w
  5914  04AB  0021               	movlb	1	; select bank1
  5915  04AC  1D03               	skipz
  5916  04AD  2CBE               	goto	u2643
  5917  04AE  0020               	movlb	0	; select bank0
  5918  04AF  0834               	movf	pid_pwm1_idrv_b_b@t32+2,w
  5919  04B0  0021               	movlb	1	; select bank1
  5920  04B1  0260               	subwf	(_bbmax+2)^(0+128),w
  5921  04B2  1D03               	skipz
  5922  04B3  2CBE               	goto	u2643
  5923  04B4  0020               	movlb	0	; select bank0
  5924  04B5  0833               	movf	pid_pwm1_idrv_b_b@t32+1,w
  5925  04B6  0021               	movlb	1	; select bank1
  5926  04B7  025F               	subwf	(_bbmax+1)^(0+128),w
  5927  04B8  1D03               	skipz
  5928  04B9  2CBE               	goto	u2643
  5929  04BA  0020               	movlb	0	; select bank0
  5930  04BB  0832               	movf	pid_pwm1_idrv_b_b@t32,w
  5931  04BC  0021               	movlb	1	; select bank1
  5932  04BD  025E               	subwf	_bbmax^(0+128),w
  5933  04BE                     u2643:	
  5934  04BE  1803               	skipnc
  5935  04BF  2CD0               	goto	l649
  5936  04C0  0020               	movlb	0	; select bank0
  5937  04C1  0835               	movf	pid_pwm1_idrv_b_b@t32+3,w
  5938  04C2  0021               	movlb	1	; select bank1
  5939  04C3  00E1               	movwf	(_bbmax+3)^(0+128)
  5940  04C4  0020               	movlb	0	; select bank0
  5941  04C5  0834               	movf	pid_pwm1_idrv_b_b@t32+2,w
  5942  04C6  0021               	movlb	1	; select bank1
  5943  04C7  00E0               	movwf	(_bbmax+2)^(0+128)
  5944  04C8  0020               	movlb	0	; select bank0
  5945  04C9  0833               	movf	pid_pwm1_idrv_b_b@t32+1,w
  5946  04CA  0021               	movlb	1	; select bank1
  5947  04CB  00DF               	movwf	(_bbmax+1)^(0+128)
  5948  04CC  0020               	movlb	0	; select bank0
  5949  04CD  0832               	movf	pid_pwm1_idrv_b_b@t32,w
  5950  04CE  0021               	movlb	1	; select bank1
  5951  04CF  00DE               	movwf	_bbmax^(0+128)
  5952  04D0                     l649:	
  5953                           
  5954                           ;sample.c: 259: if(bbmin>t32)bbmin=t32;
  5955  04D0  0020               	movlb	0	; select bank0
  5956  04D1  0835               	movf	pid_pwm1_idrv_b_b@t32+3,w
  5957  04D2  3A80               	xorlw	128
  5958  04D3  00F9               	movwf	??_pid_pwm1_idrv_b_b
  5959  04D4  0021               	movlb	1	; select bank1
  5960  04D5  0865               	movf	(_bbmin+3)^(0+128),w
  5961  04D6  3A80               	xorlw	128
  5962  04D7  0279               	subwf	??_pid_pwm1_idrv_b_b,w
  5963  04D8  0020               	movlb	0	; select bank0
  5964  04D9  1D03               	skipz
  5965  04DA  2CEB               	goto	u2653
  5966  04DB  0021               	movlb	1	; select bank1
  5967  04DC  0864               	movf	(_bbmin+2)^(0+128),w
  5968  04DD  0020               	movlb	0	; select bank0
  5969  04DE  0234               	subwf	pid_pwm1_idrv_b_b@t32+2,w
  5970  04DF  1D03               	skipz
  5971  04E0  2CEB               	goto	u2653
  5972  04E1  0021               	movlb	1	; select bank1
  5973  04E2  0863               	movf	(_bbmin+1)^(0+128),w
  5974  04E3  0020               	movlb	0	; select bank0
  5975  04E4  0233               	subwf	pid_pwm1_idrv_b_b@t32+1,w
  5976  04E5  1D03               	skipz
  5977  04E6  2CEB               	goto	u2653
  5978  04E7  0021               	movlb	1	; select bank1
  5979  04E8  0862               	movf	_bbmin^(0+128),w
  5980  04E9  0020               	movlb	0	; select bank0
  5981  04EA  0232               	subwf	pid_pwm1_idrv_b_b@t32,w
  5982  04EB                     u2653:	
  5983  04EB  1803               	skipnc
  5984  04EC  0008               	return
  5985  04ED  0835               	movf	pid_pwm1_idrv_b_b@t32+3,w
  5986  04EE  0021               	movlb	1	; select bank1
  5987  04EF  00E5               	movwf	(_bbmin+3)^(0+128)
  5988  04F0  0020               	movlb	0	; select bank0
  5989  04F1  0834               	movf	pid_pwm1_idrv_b_b@t32+2,w
  5990  04F2  0021               	movlb	1	; select bank1
  5991  04F3  00E4               	movwf	(_bbmin+2)^(0+128)
  5992  04F4  0020               	movlb	0	; select bank0
  5993  04F5  0833               	movf	pid_pwm1_idrv_b_b@t32+1,w
  5994  04F6  0021               	movlb	1	; select bank1
  5995  04F7  00E3               	movwf	(_bbmin+1)^(0+128)
  5996  04F8  0020               	movlb	0	; select bank0
  5997  04F9  0832               	movf	pid_pwm1_idrv_b_b@t32,w
  5998  04FA  0021               	movlb	1	; select bank1
  5999  04FB  00E2               	movwf	_bbmin^(0+128)
  6000  04FC                     l638:	
  6001  04FC  0008               	return
  6002  04FD                     __end_of_pid_pwm1_idrv_b_b:	
  6003  04FD                     __ptext31:	
  6004 ;; *************** function ___aldiv *****************
  6005 ;; Defined at:
  6006 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  6007 ;; Parameters:    Size  Location     Type
  6008 ;;  divisor         4    4[BANK0 ] long 
  6009 ;;  dividend        4    8[BANK0 ] long 
  6010 ;; Auto vars:     Size  Location     Type
  6011 ;;  quotient        4   14[BANK0 ] long 
  6012 ;;  sign            1   13[BANK0 ] unsigned char 
  6013 ;;  counter         1   12[BANK0 ] unsigned char 
  6014 ;; Return value:  Size  Location     Type
  6015 ;;                  4    4[BANK0 ] long 
  6016 ;; Registers used:
  6017 ;;		wreg, status,2, status,0
  6018 ;; Tracked objects:
  6019 ;;		On entry : 1F/0
  6020 ;;		On exit  : 1F/0
  6021 ;;		Unchanged: 0/0
  6022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6023 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6024 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6026 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6027 ;;Total ram usage:       14 bytes
  6028 ;; Hardware stack levels used:    1
  6029 ;; Hardware stack levels required when called:    1
  6030 ;; This function calls:
  6031 ;;		Nothing
  6032 ;; This function is called by:
  6033 ;;		_pid_pwm1_idrv_b_b
  6034 ;;		_pid_pwm1_idrv_run
  6035 ;;		_calc_expect_vout_adc_value
  6036 ;;		_m_int_2_str_ex
  6037 ;; This function uses a non-reentrant model
  6038 ;;
  6039                           
  6040                           
  6041                           ;psect for function ___aldiv
  6042  04FD                     ___aldiv:	
  6043                           
  6044                           ;incstack = 0
  6045                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  6046  04FD  01AD               	clrf	___aldiv@sign
  6047  04FE  1FA7               	btfss	___aldiv@divisor+3,7
  6048  04FF  2D0D               	goto	l1139
  6049  0500  09A4               	comf	___aldiv@divisor,f
  6050  0501  09A5               	comf	___aldiv@divisor+1,f
  6051  0502  09A6               	comf	___aldiv@divisor+2,f
  6052  0503  09A7               	comf	___aldiv@divisor+3,f
  6053  0504  0AA4               	incf	___aldiv@divisor,f
  6054  0505  1903               	skipnz
  6055  0506  0AA5               	incf	___aldiv@divisor+1,f
  6056  0507  1903               	skipnz
  6057  0508  0AA6               	incf	___aldiv@divisor+2,f
  6058  0509  1903               	skipnz
  6059  050A  0AA7               	incf	___aldiv@divisor+3,f
  6060  050B  01AD               	clrf	___aldiv@sign
  6061  050C  0AAD               	incf	___aldiv@sign,f
  6062  050D                     l1139:	
  6063  050D  1FAB               	btfss	___aldiv@dividend+3,7
  6064  050E  2D1C               	goto	l3740
  6065  050F  09A8               	comf	___aldiv@dividend,f
  6066  0510  09A9               	comf	___aldiv@dividend+1,f
  6067  0511  09AA               	comf	___aldiv@dividend+2,f
  6068  0512  09AB               	comf	___aldiv@dividend+3,f
  6069  0513  0AA8               	incf	___aldiv@dividend,f
  6070  0514  1903               	skipnz
  6071  0515  0AA9               	incf	___aldiv@dividend+1,f
  6072  0516  1903               	skipnz
  6073  0517  0AAA               	incf	___aldiv@dividend+2,f
  6074  0518  1903               	skipnz
  6075  0519  0AAB               	incf	___aldiv@dividend+3,f
  6076  051A  3001               	movlw	1
  6077  051B  06AD               	xorwf	___aldiv@sign,f
  6078  051C                     l3740:	
  6079  051C  01AE               	clrf	___aldiv@quotient
  6080  051D  01AF               	clrf	___aldiv@quotient+1
  6081  051E  01B0               	clrf	___aldiv@quotient+2
  6082  051F  01B1               	clrf	___aldiv@quotient+3
  6083  0520  0827               	movf	___aldiv@divisor+3,w
  6084  0521  0426               	iorwf	___aldiv@divisor+2,w
  6085  0522  0425               	iorwf	___aldiv@divisor+1,w
  6086  0523  0424               	iorwf	___aldiv@divisor,w
  6087  0524  1903               	skipnz
  6088  0525  2D52               	goto	l3762
  6089  0526  01AC               	clrf	___aldiv@counter
  6090  0527                     L9:	
  6091  0527  0AAC               	incf	___aldiv@counter,f
  6092  0528  1BA7               	btfsc	___aldiv@divisor+3,7
  6093  0529  2D2F               	goto	l3750
  6094  052A  35A4               	lslf	___aldiv@divisor,f
  6095  052B  0DA5               	rlf	___aldiv@divisor+1,f
  6096  052C  0DA6               	rlf	___aldiv@divisor+2,f
  6097  052D  0DA7               	rlf	___aldiv@divisor+3,f
  6098  052E  2D27               	goto	L9
  6099  052F                     l3750:	
  6100  052F  35AE               	lslf	___aldiv@quotient,f
  6101  0530  0DAF               	rlf	___aldiv@quotient+1,f
  6102  0531  0DB0               	rlf	___aldiv@quotient+2,f
  6103  0532  0DB1               	rlf	___aldiv@quotient+3,f
  6104  0533  0827               	movf	___aldiv@divisor+3,w
  6105  0534  022B               	subwf	___aldiv@dividend+3,w
  6106  0535  1D03               	skipz
  6107  0536  2D41               	goto	u2535
  6108  0537  0826               	movf	___aldiv@divisor+2,w
  6109  0538  022A               	subwf	___aldiv@dividend+2,w
  6110  0539  1D03               	skipz
  6111  053A  2D41               	goto	u2535
  6112  053B  0825               	movf	___aldiv@divisor+1,w
  6113  053C  0229               	subwf	___aldiv@dividend+1,w
  6114  053D  1D03               	skipz
  6115  053E  2D41               	goto	u2535
  6116  053F  0824               	movf	___aldiv@divisor,w
  6117  0540  0228               	subwf	___aldiv@dividend,w
  6118  0541                     u2535:	
  6119  0541  1C03               	skipc
  6120  0542  2D4C               	goto	l3758
  6121  0543  0824               	movf	___aldiv@divisor,w
  6122  0544  02A8               	subwf	___aldiv@dividend,f
  6123  0545  0825               	movf	___aldiv@divisor+1,w
  6124  0546  3BA9               	subwfb	___aldiv@dividend+1,f
  6125  0547  0826               	movf	___aldiv@divisor+2,w
  6126  0548  3BAA               	subwfb	___aldiv@dividend+2,f
  6127  0549  0827               	movf	___aldiv@divisor+3,w
  6128  054A  3BAB               	subwfb	___aldiv@dividend+3,f
  6129  054B  142E               	bsf	___aldiv@quotient,0
  6130  054C                     l3758:	
  6131  054C  36A7               	lsrf	___aldiv@divisor+3,f
  6132  054D  0CA6               	rrf	___aldiv@divisor+2,f
  6133  054E  0CA5               	rrf	___aldiv@divisor+1,f
  6134  054F  0CA4               	rrf	___aldiv@divisor,f
  6135  0550  0BAC               	decfsz	___aldiv@counter,f
  6136  0551  2D2F               	goto	l3750
  6137  0552                     l3762:	
  6138  0552  082D               	movf	___aldiv@sign,w
  6139  0553  1903               	btfsc	3,2
  6140  0554  2D60               	goto	l3766
  6141  0555  09AE               	comf	___aldiv@quotient,f
  6142  0556  09AF               	comf	___aldiv@quotient+1,f
  6143  0557  09B0               	comf	___aldiv@quotient+2,f
  6144  0558  09B1               	comf	___aldiv@quotient+3,f
  6145  0559  0AAE               	incf	___aldiv@quotient,f
  6146  055A  1903               	skipnz
  6147  055B  0AAF               	incf	___aldiv@quotient+1,f
  6148  055C  1903               	skipnz
  6149  055D  0AB0               	incf	___aldiv@quotient+2,f
  6150  055E  1903               	skipnz
  6151  055F  0AB1               	incf	___aldiv@quotient+3,f
  6152  0560                     l3766:	
  6153  0560  0831               	movf	___aldiv@quotient+3,w
  6154  0561  00A7               	movwf	?___aldiv+3
  6155  0562  0830               	movf	___aldiv@quotient+2,w
  6156  0563  00A6               	movwf	?___aldiv+2
  6157  0564  082F               	movf	___aldiv@quotient+1,w
  6158  0565  00A5               	movwf	?___aldiv+1
  6159  0566  082E               	movf	___aldiv@quotient,w
  6160  0567  00A4               	movwf	?___aldiv
  6161  0568  0008               	return
  6162  0569                     __end_of___aldiv:	
  6163  0569                     __ptext33:	
  6164 ;; *************** function ___lmul *****************
  6165 ;; Defined at:
  6166 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
  6167 ;; Parameters:    Size  Location     Type
  6168 ;;  multiplier      4    1[COMMON] unsigned long 
  6169 ;;  multiplicand    4    5[COMMON] unsigned long 
  6170 ;; Auto vars:     Size  Location     Type
  6171 ;;  product         4    0[BANK0 ] unsigned long 
  6172 ;; Return value:  Size  Location     Type
  6173 ;;                  4    1[COMMON] unsigned long 
  6174 ;; Registers used:
  6175 ;;		wreg, status,2, status,0
  6176 ;; Tracked objects:
  6177 ;;		On entry : 1C/0
  6178 ;;		On exit  : 1F/0
  6179 ;;		Unchanged: 0/0
  6180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6181 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6182 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6184 ;;      Totals:         8       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6185 ;;Total ram usage:       12 bytes
  6186 ;; Hardware stack levels used:    1
  6187 ;; Hardware stack levels required when called:    1
  6188 ;; This function calls:
  6189 ;;		Nothing
  6190 ;; This function is called by:
  6191 ;;		_calc_temp_rs
  6192 ;;		_calc_temp_rc
  6193 ;;		_pid_pwm1_idrv_b_b
  6194 ;;		_pid_pwm1_idrv_run
  6195 ;;		_calc_expect_vout_adc_value
  6196 ;;		_cal_rs_simulate_power
  6197 ;; This function uses a non-reentrant model
  6198 ;;
  6199                           
  6200                           
  6201                           ;psect for function ___lmul
  6202  0569                     ___lmul:	
  6203                           
  6204                           ;incstack = 0
  6205                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  6206  0569  0020               	movlb	0	; select bank0
  6207  056A  01A0               	clrf	___lmul@product
  6208  056B  01A1               	clrf	___lmul@product+1
  6209  056C  01A2               	clrf	___lmul@product+2
  6210  056D  01A3               	clrf	___lmul@product+3
  6211  056E                     l1095:	
  6212  056E  1C71               	btfss	___lmul@multiplier,0
  6213  056F  2D79               	goto	l3722
  6214  0570  0875               	movf	___lmul@multiplicand,w
  6215  0571  0020               	movlb	0	; select bank0
  6216  0572  07A0               	addwf	___lmul@product,f
  6217  0573  0876               	movf	___lmul@multiplicand+1,w
  6218  0574  3DA1               	addwfc	___lmul@product+1,f
  6219  0575  0877               	movf	___lmul@multiplicand+2,w
  6220  0576  3DA2               	addwfc	___lmul@product+2,f
  6221  0577  0878               	movf	___lmul@multiplicand+3,w
  6222  0578  3DA3               	addwfc	___lmul@product+3,f
  6223  0579                     l3722:	
  6224  0579  35F5               	lslf	___lmul@multiplicand,f
  6225  057A  0DF6               	rlf	___lmul@multiplicand+1,f
  6226  057B  0DF7               	rlf	___lmul@multiplicand+2,f
  6227  057C  0DF8               	rlf	___lmul@multiplicand+3,f
  6228  057D  36F4               	lsrf	___lmul@multiplier+3,f
  6229  057E  0CF3               	rrf	___lmul@multiplier+2,f
  6230  057F  0CF2               	rrf	___lmul@multiplier+1,f
  6231  0580  0CF1               	rrf	___lmul@multiplier,f
  6232  0581  0874               	movf	___lmul@multiplier+3,w
  6233  0582  0473               	iorwf	___lmul@multiplier+2,w
  6234  0583  0472               	iorwf	___lmul@multiplier+1,w
  6235  0584  0471               	iorwf	___lmul@multiplier,w
  6236  0585  1D03               	skipz
  6237  0586  2D6E               	goto	l1095
  6238  0587  0020               	movlb	0	; select bank0
  6239  0588  0823               	movf	___lmul@product+3,w
  6240  0589  00F4               	movwf	?___lmul+3
  6241  058A  0822               	movf	___lmul@product+2,w
  6242  058B  00F3               	movwf	?___lmul+2
  6243  058C  0821               	movf	___lmul@product+1,w
  6244  058D  00F2               	movwf	?___lmul+1
  6245  058E  0820               	movf	___lmul@product,w
  6246  058F  00F1               	movwf	?___lmul
  6247  0590  0008               	return
  6248  0591                     __end_of___lmul:	
  6249  0591                     __ptext19:	
  6250 ;; *************** function _pid_pwm1_idrv_run *****************
  6251 ;; Defined at:
  6252 ;;		line 265 in file "src/api/sample.c"
  6253 ;; Parameters:    Size  Location     Type
  6254 ;;		None
  6255 ;; Auto vars:     Size  Location     Type
  6256 ;;  t32             4   36[BANK0 ] long 
  6257 ;;  ed              4    0        long 
  6258 ;;  ei              4   26[BANK0 ] long 
  6259 ;;  ep              4   22[BANK0 ] long 
  6260 ;;  t16             2   34[BANK0 ] unsigned int 
  6261 ;; Return value:  Size  Location     Type
  6262 ;;                  1    wreg      void 
  6263 ;; Registers used:
  6264 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6265 ;; Tracked objects:
  6266 ;;		On entry : 1F/0
  6267 ;;		On exit  : 1F/1B
  6268 ;;		Unchanged: 0/0
  6269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6271 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6272 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6273 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6274 ;;Total ram usage:       22 bytes
  6275 ;; Hardware stack levels used:    1
  6276 ;; Hardware stack levels required when called:    3
  6277 ;; This function calls:
  6278 ;;		___aldiv
  6279 ;;		___lmul
  6280 ;;		_set_idrv_pwm1_duty
  6281 ;; This function is called by:
  6282 ;;		_main
  6283 ;; This function uses a non-reentrant model
  6284 ;;
  6285                           
  6286                           
  6287                           ;psect for function _pid_pwm1_idrv_run
  6288  0591                     _pid_pwm1_idrv_run:	
  6289                           
  6290                           ;sample.c: 268: int32_t ep,ei,ed;
  6291                           ;sample.c: 269: int32_t t32;
  6292                           ;sample.c: 270: t32=(resRs-resRc);
  6293                           
  6294                           ;incstack = 0
  6295                           ; Regs used in _pid_pwm1_idrv_run: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6296  0591  086B               	movf	_resRs+3,w
  6297  0592  00C7               	movwf	pid_pwm1_idrv_run@t32+3
  6298  0593  086A               	movf	_resRs+2,w
  6299  0594  00C6               	movwf	pid_pwm1_idrv_run@t32+2
  6300  0595  0869               	movf	_resRs+1,w
  6301  0596  00C5               	movwf	pid_pwm1_idrv_run@t32+1
  6302  0597  0868               	movf	_resRs,w
  6303  0598  00C4               	movwf	pid_pwm1_idrv_run@t32
  6304  0599  0864               	movf	_resRc,w
  6305  059A  02C4               	subwf	pid_pwm1_idrv_run@t32,f
  6306  059B  0865               	movf	_resRc+1,w
  6307  059C  3BC5               	subwfb	pid_pwm1_idrv_run@t32+1,f
  6308  059D  0866               	movf	_resRc+2,w
  6309  059E  3BC6               	subwfb	pid_pwm1_idrv_run@t32+2,f
  6310  059F  0867               	movf	_resRc+3,w
  6311  05A0  3BC7               	subwfb	pid_pwm1_idrv_run@t32+3,f
  6312                           
  6313                           ;sample.c: 271: t32=2000-t32;
  6314  05A1  30D0               	movlw	208
  6315  05A2  00B2               	movwf	??_pid_pwm1_idrv_run
  6316  05A3  3007               	movlw	7
  6317  05A4  00B3               	movwf	??_pid_pwm1_idrv_run+1
  6318  05A5  01B4               	clrf	??_pid_pwm1_idrv_run+2
  6319  05A6  01B5               	clrf	??_pid_pwm1_idrv_run+3
  6320  05A7  0844               	movf	pid_pwm1_idrv_run@t32,w
  6321  05A8  02B2               	subwf	??_pid_pwm1_idrv_run,f
  6322  05A9  0845               	movf	pid_pwm1_idrv_run@t32+1,w
  6323  05AA  3BB3               	subwfb	??_pid_pwm1_idrv_run+1,f
  6324  05AB  0846               	movf	pid_pwm1_idrv_run@t32+2,w
  6325  05AC  3BB4               	subwfb	??_pid_pwm1_idrv_run+2,f
  6326  05AD  0847               	movf	pid_pwm1_idrv_run@t32+3,w
  6327  05AE  3BB5               	subwfb	??_pid_pwm1_idrv_run+3,f
  6328  05AF  0835               	movf	??_pid_pwm1_idrv_run+3,w
  6329  05B0  2778  3180         	fcall	PL16	;call to abstracted procedure
  6330                           
  6331                           ;sample.c: 273: err[2]=err[1];
  6332  05B2  30A4               	movlw	((low (_err| 0))& (0+255)+4)
  6333  05B3  0086               	movwf	6
  6334  05B4  0187               	clrf	7
  6335  05B5  3F40               	moviw [0]fsr1
  6336  05B6  0021               	movlb	1	; select bank1
  6337  05B7  00A8               	movwf	(_err^(0+128)+8)
  6338  05B8  3F41               	moviw [1]fsr1
  6339  05B9  00A9               	movwf	((_err+1)^(0+128)+8)
  6340  05BA  3F42               	moviw [2]fsr1
  6341  05BB  00AA               	movwf	((_err+2)^(0+128)+8)
  6342  05BC  3F43               	moviw [3]fsr1
  6343  05BD  00AB               	movwf	((_err+3)^(0+128)+8)
  6344                           
  6345                           ;sample.c: 274: err[1]=err[0];
  6346  05BE  0823               	movf	(_err+3)^(0+128),w
  6347  05BF  00A7               	movwf	((_err+3)^(0+128)+4)
  6348  05C0  0822               	movf	(_err+2)^(0+128),w
  6349  05C1  00A6               	movwf	((_err+2)^(0+128)+4)
  6350  05C2  0821               	movf	(_err+1)^(0+128),w
  6351  05C3  00A5               	movwf	((_err+1)^(0+128)+4)
  6352  05C4  0820               	movf	_err^(0+128),w
  6353  05C5  00A4               	movwf	(_err^(0+128)+4)
  6354                           
  6355                           ;sample.c: 275: err[0]=t32;
  6356  05C6  0020               	movlb	0	; select bank0
  6357  05C7  0847               	movf	pid_pwm1_idrv_run@t32+3,w
  6358  05C8  0021               	movlb	1	; select bank1
  6359  05C9  00A3               	movwf	(_err+3)^(0+128)
  6360  05CA  0020               	movlb	0	; select bank0
  6361  05CB  0846               	movf	pid_pwm1_idrv_run@t32+2,w
  6362  05CC  0021               	movlb	1	; select bank1
  6363  05CD  00A2               	movwf	(_err+2)^(0+128)
  6364  05CE  0020               	movlb	0	; select bank0
  6365  05CF  0845               	movf	pid_pwm1_idrv_run@t32+1,w
  6366  05D0  0021               	movlb	1	; select bank1
  6367  05D1  00A1               	movwf	(_err+1)^(0+128)
  6368  05D2  0020               	movlb	0	; select bank0
  6369  05D3  0844               	movf	pid_pwm1_idrv_run@t32,w
  6370  05D4  0021               	movlb	1	; select bank1
  6371  05D5  00A0               	movwf	_err^(0+128)
  6372                           
  6373                           ;sample.c: 278: ep=(err[0]-err[1])*PidKp;
  6374  05D6  0824               	movf	(_err^(0+128)+4),w
  6375  05D7  0220               	subwf	_err^(0+128),w
  6376  05D8  0020               	movlb	0	; select bank0
  6377  05D9  00B2               	movwf	??_pid_pwm1_idrv_run
  6378  05DA  0021               	movlb	1	; select bank1
  6379  05DB  0825               	movf	((_err+1)^(0+128)+4),w
  6380  05DC  3B21               	subwfb	(_err+1)^(0+128),w
  6381  05DD  0020               	movlb	0	; select bank0
  6382  05DE  00B3               	movwf	??_pid_pwm1_idrv_run+1
  6383  05DF  0021               	movlb	1	; select bank1
  6384  05E0  0826               	movf	((_err+2)^(0+128)+4),w
  6385  05E1  3B22               	subwfb	(_err+2)^(0+128),w
  6386  05E2  0020               	movlb	0	; select bank0
  6387  05E3  00B4               	movwf	??_pid_pwm1_idrv_run+2
  6388  05E4  0021               	movlb	1	; select bank1
  6389  05E5  0827               	movf	((_err+3)^(0+128)+4),w
  6390  05E6  3B23               	subwfb	(_err+3)^(0+128),w
  6391  05E7  0020               	movlb	0	; select bank0
  6392  05E8  00B5               	movwf	??_pid_pwm1_idrv_run+3
  6393  05E9  00F4               	movwf	___lmul@multiplier+3
  6394  05EA  0834               	movf	??_pid_pwm1_idrv_run+2,w
  6395  05EB  00F3               	movwf	___lmul@multiplier+2
  6396  05EC  0833               	movf	??_pid_pwm1_idrv_run+1,w
  6397  05ED  00F2               	movwf	___lmul@multiplier+1
  6398  05EE  0832               	movf	??_pid_pwm1_idrv_run,w
  6399  05EF  00F1               	movwf	___lmul@multiplier
  6400  05F0  276F  3180         	fcall	PL12	;call to abstracted procedure
  6401  05F2  2569  3180         	fcall	___lmul
  6402  05F4  0874               	movf	?___lmul+3,w
  6403  05F5  00B9               	movwf	pid_pwm1_idrv_run@ep+3
  6404  05F6  0873               	movf	?___lmul+2,w
  6405  05F7  00B8               	movwf	pid_pwm1_idrv_run@ep+2
  6406  05F8  0872               	movf	?___lmul+1,w
  6407  05F9  00B7               	movwf	pid_pwm1_idrv_run@ep+1
  6408  05FA  0871               	movf	?___lmul,w
  6409  05FB  00B6               	movwf	pid_pwm1_idrv_run@ep
  6410                           
  6411                           ;sample.c: 279: ei=PidKp*err[0]/PidTi;
  6412  05FC  0021               	movlb	1	; select bank1
  6413  05FD  0833               	movf	(_PidTi+3)^(0+128),w
  6414  05FE  0020               	movlb	0	; select bank0
  6415  05FF  00A7               	movwf	___aldiv@divisor+3
  6416  0600  0021               	movlb	1	; select bank1
  6417  0601  0832               	movf	(_PidTi+2)^(0+128),w
  6418  0602  0020               	movlb	0	; select bank0
  6419  0603  00A6               	movwf	___aldiv@divisor+2
  6420  0604  0021               	movlb	1	; select bank1
  6421  0605  0831               	movf	(_PidTi+1)^(0+128),w
  6422  0606  0020               	movlb	0	; select bank0
  6423  0607  00A5               	movwf	___aldiv@divisor+1
  6424  0608  0021               	movlb	1	; select bank1
  6425  0609  0830               	movf	_PidTi^(0+128),w
  6426  060A  0020               	movlb	0	; select bank0
  6427  060B  00A4               	movwf	___aldiv@divisor
  6428  060C  0021               	movlb	1	; select bank1
  6429  060D  0823               	movf	(_err+3)^(0+128),w
  6430  060E  00F4               	movwf	___lmul@multiplier+3
  6431  060F  0822               	movf	(_err+2)^(0+128),w
  6432  0610  00F3               	movwf	___lmul@multiplier+2
  6433  0611  0821               	movf	(_err+1)^(0+128),w
  6434  0612  00F2               	movwf	___lmul@multiplier+1
  6435  0613  0820               	movf	_err^(0+128),w
  6436  0614  00F1               	movwf	___lmul@multiplier
  6437  0615  0020               	movlb	0	; select bank0
  6438  0616  276F  3180         	fcall	PL12	;call to abstracted procedure
  6439  0618  2569  3180         	fcall	___lmul
  6440  061A  2752  3180         	fcall	PL2	;call to abstracted procedure
  6441  061C  24FD  3180         	fcall	___aldiv
  6442  061E  0827               	movf	?___aldiv+3,w
  6443  061F  00BD               	movwf	pid_pwm1_idrv_run@ei+3
  6444  0620  0826               	movf	?___aldiv+2,w
  6445  0621  00BC               	movwf	pid_pwm1_idrv_run@ei+2
  6446  0622  0825               	movf	?___aldiv+1,w
  6447  0623  00BB               	movwf	pid_pwm1_idrv_run@ei+1
  6448  0624  0824               	movf	?___aldiv,w
  6449  0625  00BA               	movwf	pid_pwm1_idrv_run@ei
  6450                           
  6451                           ;sample.c: 283: t32=ep+ei+ed;
  6452  0626  0836               	movf	pid_pwm1_idrv_run@ep,w
  6453  0627  073A               	addwf	pid_pwm1_idrv_run@ei,w
  6454  0628  00B2               	movwf	??_pid_pwm1_idrv_run
  6455  0629  0837               	movf	pid_pwm1_idrv_run@ep+1,w
  6456  062A  3D3B               	addwfc	pid_pwm1_idrv_run@ei+1,w
  6457  062B  00B3               	movwf	??_pid_pwm1_idrv_run+1
  6458  062C  0838               	movf	pid_pwm1_idrv_run@ep+2,w
  6459  062D  3D3C               	addwfc	pid_pwm1_idrv_run@ei+2,w
  6460  062E  00B4               	movwf	??_pid_pwm1_idrv_run+2
  6461  062F  0839               	movf	pid_pwm1_idrv_run@ep+3,w
  6462  0630  3D3D               	addwfc	pid_pwm1_idrv_run@ei+3,w
  6463  0631  00B5               	movwf	??_pid_pwm1_idrv_run+3
  6464  0632  2778  3180         	fcall	PL16	;call to abstracted procedure
  6465                           
  6466                           ;sample.c: 284: t32/=10000;
  6467  0634  3027               	movlw	39
  6468  0635  01A7               	clrf	___aldiv@divisor+3
  6469  0636  01A6               	clrf	___aldiv@divisor+2
  6470  0637  00A5               	movwf	___aldiv@divisor+1
  6471  0638  3010               	movlw	16
  6472  0639  00A4               	movwf	___aldiv@divisor
  6473  063A  0847               	movf	pid_pwm1_idrv_run@t32+3,w
  6474  063B  00AB               	movwf	___aldiv@dividend+3
  6475  063C  0846               	movf	pid_pwm1_idrv_run@t32+2,w
  6476  063D  00AA               	movwf	___aldiv@dividend+2
  6477  063E  0845               	movf	pid_pwm1_idrv_run@t32+1,w
  6478  063F  00A9               	movwf	___aldiv@dividend+1
  6479  0640  0844               	movf	pid_pwm1_idrv_run@t32,w
  6480  0641  00A8               	movwf	___aldiv@dividend
  6481  0642  24FD  3180         	fcall	___aldiv
  6482  0644  0827               	movf	?___aldiv+3,w
  6483  0645  00C7               	movwf	pid_pwm1_idrv_run@t32+3
  6484  0646  0826               	movf	?___aldiv+2,w
  6485  0647  00C6               	movwf	pid_pwm1_idrv_run@t32+2
  6486  0648  0825               	movf	?___aldiv+1,w
  6487  0649  00C5               	movwf	pid_pwm1_idrv_run@t32+1
  6488  064A  0824               	movf	?___aldiv,w
  6489  064B  00C4               	movwf	pid_pwm1_idrv_run@t32
  6490                           
  6491                           ;sample.c: 285: t32+=pidU;
  6492  064C  0021               	movlb	1	; select bank1
  6493  064D  0866               	movf	_pidU^(0+128),w
  6494  064E  0020               	movlb	0	; select bank0
  6495  064F  07C4               	addwf	pid_pwm1_idrv_run@t32,f
  6496  0650  0021               	movlb	1	; select bank1
  6497  0651  0867               	movf	(_pidU+1)^(0+128),w
  6498  0652  0020               	movlb	0	; select bank0
  6499  0653  3DC5               	addwfc	pid_pwm1_idrv_run@t32+1,f
  6500  0654  0021               	movlb	1	; select bank1
  6501  0655  0868               	movf	(_pidU+2)^(0+128),w
  6502  0656  0020               	movlb	0	; select bank0
  6503  0657  3DC6               	addwfc	pid_pwm1_idrv_run@t32+2,f
  6504  0658  0021               	movlb	1	; select bank1
  6505  0659  0869               	movf	(_pidU+3)^(0+128),w
  6506  065A  0020               	movlb	0	; select bank0
  6507  065B  3DC7               	addwfc	pid_pwm1_idrv_run@t32+3,f
  6508                           
  6509                           ;sample.c: 287: __nop();
  6510  065C  0000               	nop
  6511                           
  6512                           ;sample.c: 288: if(t32>1200)t32=1200;
  6513  065D  0020               	movlb	0	; select bank0
  6514  065E  1BC7               	btfsc	pid_pwm1_idrv_run@t32+3,7
  6515  065F  2E72               	goto	l3900
  6516  0660  0847               	movf	pid_pwm1_idrv_run@t32+3,w
  6517  0661  1D03               	btfss	3,2
  6518  0662  2E6C               	goto	l3898
  6519  0663  0846               	movf	pid_pwm1_idrv_run@t32+2,w
  6520  0664  1D03               	btfss	3,2
  6521  0665  2E6C               	goto	l3898
  6522  0666  30B1               	movlw	177
  6523  0667  0244               	subwf	pid_pwm1_idrv_run@t32,w
  6524  0668  3004               	movlw	4
  6525  0669  3B45               	subwfb	pid_pwm1_idrv_run@t32+1,w
  6526  066A  1C03               	btfss	3,0
  6527  066B  2E72               	goto	l3900
  6528  066C                     l3898:	
  6529  066C  3004               	movlw	4
  6530  066D  01C7               	clrf	pid_pwm1_idrv_run@t32+3
  6531  066E  01C6               	clrf	pid_pwm1_idrv_run@t32+2
  6532  066F  00C5               	movwf	pid_pwm1_idrv_run@t32+1
  6533  0670  30B0               	movlw	176
  6534  0671  00C4               	movwf	pid_pwm1_idrv_run@t32
  6535  0672                     l3900:	
  6536                           
  6537                           ;sample.c: 289: if(t32<2)t32=2;
  6538  0672  1BC7               	btfsc	pid_pwm1_idrv_run@t32+3,7
  6539  0673  2E81               	goto	l3902
  6540  0674  0847               	movf	pid_pwm1_idrv_run@t32+3,w
  6541  0675  1D03               	btfss	3,2
  6542  0676  2E86               	goto	l658
  6543  0677  0846               	movf	pid_pwm1_idrv_run@t32+2,w
  6544  0678  1D03               	btfss	3,2
  6545  0679  2E86               	goto	l658
  6546  067A  0845               	movf	pid_pwm1_idrv_run@t32+1,w
  6547  067B  1D03               	btfss	3,2
  6548  067C  2E86               	goto	l658
  6549  067D  3002               	movlw	2
  6550  067E  0244               	subwf	pid_pwm1_idrv_run@t32,w
  6551  067F  1803               	btfsc	3,0
  6552  0680  2E86               	goto	l658
  6553  0681                     l3902:	
  6554  0681  3002               	movlw	2
  6555  0682  00C4               	movwf	pid_pwm1_idrv_run@t32
  6556  0683  01C5               	clrf	pid_pwm1_idrv_run@t32+1
  6557  0684  01C6               	clrf	pid_pwm1_idrv_run@t32+2
  6558  0685  01C7               	clrf	pid_pwm1_idrv_run@t32+3
  6559  0686                     l658:	
  6560                           
  6561                           ;sample.c: 290: pidU=t32;
  6562  0686  0847               	movf	pid_pwm1_idrv_run@t32+3,w
  6563  0687  0021               	movlb	1	; select bank1
  6564  0688  00E9               	movwf	(_pidU+3)^(0+128)
  6565  0689  0020               	movlb	0	; select bank0
  6566  068A  0846               	movf	pid_pwm1_idrv_run@t32+2,w
  6567  068B  0021               	movlb	1	; select bank1
  6568  068C  00E8               	movwf	(_pidU+2)^(0+128)
  6569  068D  0020               	movlb	0	; select bank0
  6570  068E  0845               	movf	pid_pwm1_idrv_run@t32+1,w
  6571  068F  0021               	movlb	1	; select bank1
  6572  0690  00E7               	movwf	(_pidU+1)^(0+128)
  6573  0691  0020               	movlb	0	; select bank0
  6574  0692  0844               	movf	pid_pwm1_idrv_run@t32,w
  6575  0693  0021               	movlb	1	; select bank1
  6576  0694  00E6               	movwf	_pidU^(0+128)
  6577                           
  6578                           ;sample.c: 291: uint16_t t16;
  6579                           ;sample.c: 292: t16=(uint16_t)pidU;
  6580  0695  0867               	movf	(_pidU+1)^(0+128),w
  6581  0696  0020               	movlb	0	; select bank0
  6582  0697  00C3               	movwf	pid_pwm1_idrv_run@t16+1
  6583  0698  0021               	movlb	1	; select bank1
  6584  0699  0866               	movf	_pidU^(0+128),w
  6585  069A  0020               	movlb	0	; select bank0
  6586  069B  00C2               	movwf	pid_pwm1_idrv_run@t16
  6587                           
  6588                           ;sample.c: 293: set_idrv_pwm1_duty(t16);
  6589  069C  0843               	movf	pid_pwm1_idrv_run@t16+1,w
  6590  069D  00F4               	movwf	set_idrv_pwm1_duty@duty+1
  6591  069E  0842               	movf	pid_pwm1_idrv_run@t16,w
  6592  069F  00F3               	movwf	set_idrv_pwm1_duty@duty
  6593  06A0  2EA1               	ljmp	l2788
  6594  06A1                     __end_of_pid_pwm1_idrv_run:	
  6595  06A1                     __ptext21:	
  6596 ;; *************** function _set_idrv_pwm1_duty *****************
  6597 ;; Defined at:
  6598 ;;		line 30 in file "src/api/sample.c"
  6599 ;; Parameters:    Size  Location     Type
  6600 ;;  duty            2    3[COMMON] unsigned int 
  6601 ;; Auto vars:     Size  Location     Type
  6602 ;;  t16             2    5[COMMON] unsigned int 
  6603 ;; Return value:  Size  Location     Type
  6604 ;;                  1    wreg      void 
  6605 ;; Registers used:
  6606 ;;		wreg, pclath, cstack
  6607 ;; Tracked objects:
  6608 ;;		On entry : 1F/0
  6609 ;;		On exit  : 1F/1B
  6610 ;;		Unchanged: 0/0
  6611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6612 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6613 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6615 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6616 ;;Total ram usage:        4 bytes
  6617 ;; Hardware stack levels used:    1
  6618 ;; Hardware stack levels required when called:    2
  6619 ;; This function calls:
  6620 ;;		_get_idrv_pwm1_duty
  6621 ;; This function is called by:
  6622 ;;		_pid_pwm1_idrv_b_b
  6623 ;;		_pid_pwm1_idrv_run
  6624 ;; This function uses a non-reentrant model
  6625 ;;
  6626                           
  6627                           
  6628                           ;psect for function _set_idrv_pwm1_duty
  6629  06A1                     _set_idrv_pwm1_duty:	
  6630  06A1                     l2788:	
  6631                           ;incstack = 0
  6632                           ; Regs used in _set_idrv_pwm1_duty: [wreg+pclath+cstack]
  6633                           
  6634                           
  6635                           ;sample.c: 32: uint16_t t16;
  6636                           ;sample.c: 33: t16=get_idrv_pwm1_duty();
  6637  06A1  26B6  3180         	fcall	_get_idrv_pwm1_duty
  6638  06A3  0872               	movf	?_get_idrv_pwm1_duty+1,w
  6639  06A4  00F6               	movwf	set_idrv_pwm1_duty@t16+1
  6640  06A5  0871               	movf	?_get_idrv_pwm1_duty,w
  6641  06A6  00F5               	movwf	set_idrv_pwm1_duty@t16
  6642                           
  6643                           ;sample.c: 34: if(t16==duty)return;
  6644  06A7  0874               	movf	set_idrv_pwm1_duty@duty+1,w
  6645  06A8  0676               	xorwf	set_idrv_pwm1_duty@t16+1,w
  6646  06A9  1D03               	skipz
  6647  06AA  2EAD               	goto	u1305
  6648  06AB  0873               	movf	set_idrv_pwm1_duty@duty,w
  6649  06AC  0675               	xorwf	set_idrv_pwm1_duty@t16,w
  6650  06AD                     u1305:	
  6651  06AD  1903               	btfsc	3,2
  6652  06AE  0008               	return
  6653                           
  6654                           ;sample.c: 35: PWM1CONbits.EN = 0;
  6655  06AF  139B               	bcf	27,7	;volatile
  6656                           
  6657                           ;sample.c: 36: PWM1DCL= (uint8_t)(duty&0xff);
  6658  06B0  0873               	movf	set_idrv_pwm1_duty@duty,w
  6659  06B1  0093               	movwf	19	;volatile
  6660                           
  6661                           ;sample.c: 37: PWM1DCH=(uint8_t)(duty>>8);
  6662  06B2  0874               	movf	set_idrv_pwm1_duty@duty+1,w
  6663  06B3  0094               	movwf	20	;volatile
  6664                           
  6665                           ;sample.c: 38: PWM1CONbits.EN = 1;
  6666  06B4  179B               	bsf	27,7	;volatile
  6667  06B5  0008               	return
  6668  06B6                     __end_of_set_idrv_pwm1_duty:	
  6669  06B6                     __ptext22:	
  6670 ;; *************** function _get_idrv_pwm1_duty *****************
  6671 ;; Defined at:
  6672 ;;		line 25 in file "src/api/sample.c"
  6673 ;; Parameters:    Size  Location     Type
  6674 ;;		None
  6675 ;; Auto vars:     Size  Location     Type
  6676 ;;		None
  6677 ;; Return value:  Size  Location     Type
  6678 ;;                  2    1[COMMON] unsigned int 
  6679 ;; Registers used:
  6680 ;;		wreg
  6681 ;; Tracked objects:
  6682 ;;		On entry : 1F/0
  6683 ;;		On exit  : 1F/1B
  6684 ;;		Unchanged: 0/0
  6685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6686 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6689 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6690 ;;Total ram usage:        2 bytes
  6691 ;; Hardware stack levels used:    1
  6692 ;; Hardware stack levels required when called:    1
  6693 ;; This function calls:
  6694 ;;		Nothing
  6695 ;; This function is called by:
  6696 ;;		_set_idrv_pwm1_duty
  6697 ;; This function uses a non-reentrant model
  6698 ;;
  6699                           
  6700                           
  6701                           ;psect for function _get_idrv_pwm1_duty
  6702  06B6                     _get_idrv_pwm1_duty:	
  6703                           
  6704                           ;sample.c: 27: return ((PWM1DCH<<8)|PWM1DCL);
  6705                           
  6706                           ;incstack = 0
  6707                           ; Regs used in _get_idrv_pwm1_duty: [wreg]
  6708  06B6  003B               	movlb	27	; select bank27
  6709  06B7  0814               	movf	20,w	;volatile
  6710  06B8  00F2               	movwf	?_get_idrv_pwm1_duty+1
  6711  06B9  01F1               	clrf	?_get_idrv_pwm1_duty
  6712  06BA  0813               	movf	19,w	;volatile
  6713  06BB  04F1               	iorwf	?_get_idrv_pwm1_duty,f
  6714  06BC  0008               	return
  6715  06BD                     __end_of_get_idrv_pwm1_duty:	
  6716  06BD                     __ptext42:	
  6717 ;; *************** function _PWM2_Initialize *****************
  6718 ;; Defined at:
  6719 ;;		line 58 in file "mcc_generated_files/pwm2.c"
  6720 ;; Parameters:    Size  Location     Type
  6721 ;;		None
  6722 ;; Auto vars:     Size  Location     Type
  6723 ;;		None
  6724 ;; Return value:  Size  Location     Type
  6725 ;;                  1    wreg      void 
  6726 ;; Registers used:
  6727 ;;		wreg, status,2
  6728 ;; Tracked objects:
  6729 ;;		On entry : 1F/1B
  6730 ;;		On exit  : 1F/1B
  6731 ;;		Unchanged: 0/0
  6732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6736 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6737 ;;Total ram usage:        0 bytes
  6738 ;; Hardware stack levels used:    1
  6739 ;; Hardware stack levels required when called:    1
  6740 ;; This function calls:
  6741 ;;		Nothing
  6742 ;; This function is called by:
  6743 ;;		_SYSTEM_Initialize
  6744 ;; This function uses a non-reentrant model
  6745 ;;
  6746                           
  6747                           
  6748                           ;psect for function _PWM2_Initialize
  6749  06BD                     _PWM2_Initialize:	
  6750                           
  6751                           ;pwm2.c: 63: PWM2INTE = 0x00;
  6752                           
  6753                           ;incstack = 0
  6754                           ; Regs used in _PWM2_Initialize: [wreg+status,2]
  6755  06BD  01AC               	clrf	44	;volatile
  6756                           
  6757                           ;pwm2.c: 66: PWM2INTF = 0x00;
  6758  06BE  01AD               	clrf	45	;volatile
  6759                           
  6760                           ;pwm2.c: 69: PWM2CLKCON = 0x00;
  6761  06BF  01AE               	clrf	46	;volatile
  6762                           
  6763                           ;pwm2.c: 72: PWM2LDCON = 0x80;
  6764  06C0  3080               	movlw	128
  6765  06C1  00AF               	movwf	47	;volatile
  6766                           
  6767                           ;pwm2.c: 75: PWM2OFCON = 0x00;
  6768  06C2  01B0               	clrf	48	;volatile
  6769                           
  6770                           ;pwm2.c: 78: PWM2PHH = 0x00;
  6771  06C3  01A2               	clrf	34	;volatile
  6772                           
  6773                           ;pwm2.c: 81: PWM2PHL = 0x00;
  6774  06C4  01A1               	clrf	33	;volatile
  6775                           
  6776                           ;pwm2.c: 84: PWM2DCH = 0x00;
  6777  06C5  01A4               	clrf	36	;volatile
  6778                           
  6779                           ;pwm2.c: 87: PWM2DCL = 0xA0;
  6780  06C6  30A0               	movlw	160
  6781  06C7  00A3               	movwf	35	;volatile
  6782                           
  6783                           ;pwm2.c: 90: PWM2PRH = 0x06;
  6784  06C8  3006               	movlw	6
  6785  06C9  00A6               	movwf	38	;volatile
  6786                           
  6787                           ;pwm2.c: 93: PWM2PRL = 0x3F;
  6788  06CA  303F               	movlw	63
  6789  06CB  00A5               	movwf	37	;volatile
  6790                           
  6791                           ;pwm2.c: 96: PWM2OFH = 0x00;
  6792  06CC  01A8               	clrf	40	;volatile
  6793                           
  6794                           ;pwm2.c: 99: PWM2OFL = 0x01;
  6795  06CD  3001               	movlw	1
  6796  06CE  00A7               	movwf	39	;volatile
  6797                           
  6798                           ;pwm2.c: 102: PWM2TMRH = 0x00;
  6799  06CF  01AA               	clrf	42	;volatile
  6800                           
  6801                           ;pwm2.c: 105: PWM2TMRL = 0x00;
  6802  06D0  01A9               	clrf	41	;volatile
  6803                           
  6804                           ;pwm2.c: 108: PWM2CON = 0x90;
  6805  06D1  3090               	movlw	144
  6806  06D2  00AB               	movwf	43	;volatile
  6807  06D3  0008               	return
  6808  06D4                     __end_of_PWM2_Initialize:	
  6809  06D4                     __ptext38:	
  6810 ;; *************** function _WDT_Initialize *****************
  6811 ;; Defined at:
  6812 ;;		line 90 in file "mcc_generated_files/mcc.c"
  6813 ;; Parameters:    Size  Location     Type
  6814 ;;		None
  6815 ;; Auto vars:     Size  Location     Type
  6816 ;;		None
  6817 ;; Return value:  Size  Location     Type
  6818 ;;                  1    wreg      void 
  6819 ;; Registers used:
  6820 ;;		wreg
  6821 ;; Tracked objects:
  6822 ;;		On entry : 1F/1
  6823 ;;		On exit  : 1F/1
  6824 ;;		Unchanged: 0/0
  6825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6829 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6830 ;;Total ram usage:        0 bytes
  6831 ;; Hardware stack levels used:    1
  6832 ;; Hardware stack levels required when called:    1
  6833 ;; This function calls:
  6834 ;;		Nothing
  6835 ;; This function is called by:
  6836 ;;		_SYSTEM_Initialize
  6837 ;; This function uses a non-reentrant model
  6838 ;;
  6839                           
  6840                           
  6841                           ;psect for function _WDT_Initialize
  6842  06D4                     _WDT_Initialize:	
  6843                           
  6844                           ;mcc.c: 93: WDTCON = 0x16;
  6845                           
  6846                           ;incstack = 0
  6847                           ; Regs used in _WDT_Initialize: [wreg]
  6848  06D4  3016               	movlw	22
  6849  06D5  0097               	movwf	23	;volatile
  6850  06D6  0008               	return
  6851  06D7                     __end_of_WDT_Initialize:	
  6852  06D7                     __ptext36:	
  6853 ;; *************** function _adc_init *****************
  6854 ;; Defined at:
  6855 ;;		line 67 in file "src/api/sample.c"
  6856 ;; Parameters:    Size  Location     Type
  6857 ;;  ch              1    wreg     enum E4974
  6858 ;; Auto vars:     Size  Location     Type
  6859 ;;  ch              1    2[COMMON] enum E4974
  6860 ;; Return value:  Size  Location     Type
  6861 ;;                  1    wreg      void 
  6862 ;; Registers used:
  6863 ;;		wreg, status,2, status,0
  6864 ;; Tracked objects:
  6865 ;;		On entry : 1F/2
  6866 ;;		On exit  : 1F/1
  6867 ;;		Unchanged: 0/0
  6868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6870 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6871 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6872 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6873 ;;Total ram usage:        2 bytes
  6874 ;; Hardware stack levels used:    1
  6875 ;; Hardware stack levels required when called:    1
  6876 ;; This function calls:
  6877 ;;		Nothing
  6878 ;; This function is called by:
  6879 ;;		_adc_sample
  6880 ;; This function uses a non-reentrant model
  6881 ;;
  6882                           
  6883                           
  6884                           ;psect for function _adc_init
  6885  06D7                     _adc_init:	
  6886                           
  6887                           ;incstack = 0
  6888                           ; Regs used in _adc_init: [wreg+status,2+status,0]
  6889                           ;adc_init@ch stored from wreg
  6890  06D7  00F2               	movwf	adc_init@ch
  6891  06D8                     l570:	
  6892                           ;sample.c: 69: while (ADCON0bits.GO_nDONE);
  6893                           
  6894  06D8  0021               	movlb	1	; select bank1
  6895  06D9  189D               	btfsc	29,1	;volatile
  6896  06DA  2ED8               	goto	l570
  6897                           
  6898                           ;sample.c: 70: ADCON0bits.CHS = ch;
  6899  06DB  0872               	movf	adc_init@ch,w
  6900  06DC  00F1               	movwf	??_adc_init
  6901  06DD  0DF1               	rlf	??_adc_init,f
  6902  06DE  0DF1               	rlf	??_adc_init,f
  6903  06DF  081D               	movf	29,w	;volatile
  6904  06E0  0671               	xorwf	??_adc_init,w
  6905  06E1  3983               	andlw	-125
  6906  06E2  0671               	xorwf	??_adc_init,w
  6907  06E3  009D               	movwf	29	;volatile
  6908                           
  6909                           ;sample.c: 71: ADCON0bits.ADON = 1;
  6910  06E4  141D               	bsf	29,0	;volatile
  6911                           
  6912                           ;sample.c: 72: ADCON1 = 0x63;
  6913                           
  6914                           ;sample.c: 73: ADCON2 = 0x00;
  6915                           
  6916                           ;sample.c: 74: ADRESL = 0x00;
  6917                           
  6918                           ;sample.c: 75: ADRESH = 0x00;
  6919  06E5  2F87               	ljmp	PL24	;call to abstracted procedure
  6920  06E6                     __end_of_adc_init:	
  6921  06E6                     __ptext35:	
  6922 ;; *************** function _fvr_set_gain *****************
  6923 ;; Defined at:
  6924 ;;		line 58 in file "src/api/sample.c"
  6925 ;; Parameters:    Size  Location     Type
  6926 ;;  g               1    wreg     unsigned char 
  6927 ;; Auto vars:     Size  Location     Type
  6928 ;;  g               1    2[COMMON] unsigned char 
  6929 ;;  t8              1    1[COMMON] unsigned char 
  6930 ;; Return value:  Size  Location     Type
  6931 ;;                  1    wreg      void 
  6932 ;; Registers used:
  6933 ;;		wreg, status,2, status,0
  6934 ;; Tracked objects:
  6935 ;;		On entry : 0/0
  6936 ;;		On exit  : 1F/2
  6937 ;;		Unchanged: 0/0
  6938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6940 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6942 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6943 ;;Total ram usage:        2 bytes
  6944 ;; Hardware stack levels used:    1
  6945 ;; Hardware stack levels required when called:    1
  6946 ;; This function calls:
  6947 ;;		Nothing
  6948 ;; This function is called by:
  6949 ;;		_adc_sample
  6950 ;; This function uses a non-reentrant model
  6951 ;;
  6952                           
  6953                           
  6954                           ;psect for function _fvr_set_gain
  6955  06E6                     _fvr_set_gain:	
  6956                           
  6957                           ;incstack = 0
  6958                           ; Regs used in _fvr_set_gain: [wreg+status,2+status,0]
  6959                           ;fvr_set_gain@g stored from wreg
  6960  06E6  00F2               	movwf	fvr_set_gain@g
  6961                           
  6962                           ;sample.c: 60: uint8_t t8=0x80;
  6963  06E7  3080               	movlw	128
  6964  06E8  00F1               	movwf	fvr_set_gain@t8
  6965                           
  6966                           ;sample.c: 61: if(g>3)g=3;
  6967  06E9  3004               	movlw	4
  6968  06EA  0272               	subwf	fvr_set_gain@g,w
  6969  06EB  1C03               	skipc
  6970  06EC  2EEF               	goto	l2812
  6971  06ED  3003               	movlw	3
  6972  06EE  00F2               	movwf	fvr_set_gain@g
  6973  06EF                     l2812:	
  6974                           
  6975                           ;sample.c: 62: t8|=g;
  6976  06EF  0872               	movf	fvr_set_gain@g,w
  6977  06F0  04F1               	iorwf	fvr_set_gain@t8,f
  6978                           
  6979                           ;sample.c: 63: FVRCON = t8;
  6980  06F1  0871               	movf	fvr_set_gain@t8,w
  6981  06F2  0022               	movlb	2	; select bank2
  6982  06F3  0097               	movwf	23	;volatile
  6983  06F4                     l564:	
  6984                           ;sample.c: 64: while(!(FVRCONbits.FVRRDY));
  6985                           
  6986  06F4  1B17               	btfsc	23,6	;volatile
  6987  06F5  0008               	return
  6988  06F6  2EF4               	goto	l564
  6989  06F7                     __end_of_fvr_set_gain:	
  6990  06F7                     __ptext32:	
  6991 ;; *************** function _cal_rs_simulate_power *****************
  6992 ;; Defined at:
  6993 ;;		line 406 in file "src/api/sample.c"
  6994 ;; Parameters:    Size  Location     Type
  6995 ;;		None
  6996 ;; Auto vars:     Size  Location     Type
  6997 ;;  t32             4    6[BANK0 ] unsigned long 
  6998 ;;  t16             2   10[BANK0 ] unsigned int 
  6999 ;; Return value:  Size  Location     Type
  7000 ;;                  2    4[BANK0 ] unsigned int 
  7001 ;; Registers used:
  7002 ;;		wreg, status,2, status,0, pclath, cstack
  7003 ;; Tracked objects:
  7004 ;;		On entry : 1F/1B
  7005 ;;		On exit  : 1F/0
  7006 ;;		Unchanged: 0/0
  7007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7008 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7009 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7011 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7012 ;;Total ram usage:        8 bytes
  7013 ;; Hardware stack levels used:    1
  7014 ;; Hardware stack levels required when called:    2
  7015 ;; This function calls:
  7016 ;;		___lmul
  7017 ;; This function is called by:
  7018 ;;		_main
  7019 ;; This function uses a non-reentrant model
  7020 ;;
  7021                           
  7022                           
  7023                           ;psect for function _cal_rs_simulate_power
  7024  06F7                     _cal_rs_simulate_power:	
  7025                           
  7026                           ;sample.c: 408: uint32_t t32;
  7027                           ;sample.c: 410: uint16_t t16=rtAdcValueRsLo;
  7028                           
  7029                           ;incstack = 0
  7030                           ; Regs used in _cal_rs_simulate_power: [wreg+status,2+status,0+pclath+cstack]
  7031  06F7  0020               	movlb	0	; select bank0
  7032  06F8  0859               	movf	_rtAdcValueRsLo+1,w
  7033  06F9  00AB               	movwf	cal_rs_simulate_power@t16+1
  7034  06FA  0858               	movf	_rtAdcValueRsLo,w
  7035  06FB  00AA               	movwf	cal_rs_simulate_power@t16
  7036                           
  7037                           ;sample.c: 411: if(t16>24000)t16=24000;
  7038  06FC  305D               	movlw	93
  7039  06FD  022B               	subwf	cal_rs_simulate_power@t16+1,w
  7040  06FE  30C1               	movlw	193
  7041  06FF  1903               	skipnz
  7042  0700  022A               	subwf	cal_rs_simulate_power@t16,w
  7043  0701  1C03               	skipc
  7044  0702  2F07               	goto	l695
  7045  0703  30C0               	movlw	192
  7046  0704  00AA               	movwf	cal_rs_simulate_power@t16
  7047  0705  305D               	movlw	93
  7048  0706  00AB               	movwf	cal_rs_simulate_power@t16+1
  7049  0707                     l695:	
  7050                           
  7051                           ;sample.c: 412: if(t16<6400)t16=6400;
  7052  0707  3019               	movlw	25
  7053  0708  022B               	subwf	cal_rs_simulate_power@t16+1,w
  7054  0709  3000               	movlw	0
  7055  070A  1903               	skipnz
  7056  070B  022A               	subwf	cal_rs_simulate_power@t16,w
  7057  070C  1803               	skipnc
  7058  070D  2F11               	goto	l696
  7059  070E  3019               	movlw	25
  7060  070F  01AA               	clrf	cal_rs_simulate_power@t16
  7061  0710  00AB               	movwf	cal_rs_simulate_power@t16+1
  7062  0711                     l696:	
  7063                           
  7064                           ;sample.c: 413: t32=t16;
  7065  0711  082A               	movf	cal_rs_simulate_power@t16,w
  7066  0712  00A6               	movwf	cal_rs_simulate_power@t32
  7067  0713  082B               	movf	cal_rs_simulate_power@t16+1,w
  7068  0714  00A7               	movwf	cal_rs_simulate_power@t32+1
  7069  0715  01A8               	clrf	cal_rs_simulate_power@t32+2
  7070  0716  01A9               	clrf	cal_rs_simulate_power@t32+3
  7071                           
  7072                           ;sample.c: 414: t32=t32*t16;
  7073  0717  082A               	movf	cal_rs_simulate_power@t16,w
  7074  0718  00F1               	movwf	___lmul@multiplier
  7075  0719  082B               	movf	cal_rs_simulate_power@t16+1,w
  7076  071A  00F2               	movwf	___lmul@multiplier+1
  7077  071B  01F3               	clrf	___lmul@multiplier+2
  7078  071C  01F4               	clrf	___lmul@multiplier+3
  7079  071D  0829               	movf	cal_rs_simulate_power@t32+3,w
  7080  071E  00F8               	movwf	___lmul@multiplicand+3
  7081  071F  0828               	movf	cal_rs_simulate_power@t32+2,w
  7082  0720  00F7               	movwf	___lmul@multiplicand+2
  7083  0721  0827               	movf	cal_rs_simulate_power@t32+1,w
  7084  0722  00F6               	movwf	___lmul@multiplicand+1
  7085  0723  0826               	movf	cal_rs_simulate_power@t32,w
  7086  0724  00F5               	movwf	___lmul@multiplicand
  7087  0725  2569  3180         	fcall	___lmul
  7088  0727  0874               	movf	?___lmul+3,w
  7089  0728  00A9               	movwf	cal_rs_simulate_power@t32+3
  7090  0729  0873               	movf	?___lmul+2,w
  7091  072A  00A8               	movwf	cal_rs_simulate_power@t32+2
  7092  072B  0872               	movf	?___lmul+1,w
  7093  072C  00A7               	movwf	cal_rs_simulate_power@t32+1
  7094  072D  0871               	movf	?___lmul,w
  7095  072E  00A6               	movwf	cal_rs_simulate_power@t32
  7096                           
  7097                           ;sample.c: 416: t32-=40960000UL;
  7098  072F  3000               	movlw	0
  7099  0730  02A6               	subwf	cal_rs_simulate_power@t32,f
  7100  0731  3BA7               	subwfb	cal_rs_simulate_power@t32+1,f
  7101  0732  3071               	movlw	113
  7102  0733  3BA8               	subwfb	cal_rs_simulate_power@t32+2,f
  7103  0734  3002               	movlw	2
  7104  0735  3BA9               	subwfb	cal_rs_simulate_power@t32+3,f
  7105                           
  7106                           ;sample.c: 417: t32>>=13;
  7107  0736  300D               	movlw	13
  7108  0737                     u2785:	
  7109  0737  36A9               	lsrf	cal_rs_simulate_power@t32+3,f
  7110  0738  0CA8               	rrf	cal_rs_simulate_power@t32+2,f
  7111  0739  0CA7               	rrf	cal_rs_simulate_power@t32+1,f
  7112  073A  0CA6               	rrf	cal_rs_simulate_power@t32,f
  7113  073B  0B89               	decfsz	9,f
  7114  073C  2F37               	goto	u2785
  7115                           
  7116                           ;sample.c: 418: if(t32>65535)t32=65535;
  7117  073D  0829               	movf	cal_rs_simulate_power@t32+3,w
  7118  073E  1D03               	btfss	3,2
  7119  073F  2F44               	goto	l3974
  7120  0740  3001               	movlw	1
  7121  0741  0228               	subwf	cal_rs_simulate_power@t32+2,w
  7122  0742  1C03               	btfss	3,0
  7123  0743  2F49               	goto	l697
  7124  0744                     l3974:	
  7125  0744  30FF               	movlw	255
  7126  0745  01A9               	clrf	cal_rs_simulate_power@t32+3
  7127  0746  01A8               	clrf	cal_rs_simulate_power@t32+2
  7128  0747  00A7               	movwf	cal_rs_simulate_power@t32+1
  7129  0748  00A6               	movwf	cal_rs_simulate_power@t32
  7130  0749                     l697:	
  7131                           
  7132                           ;sample.c: 419: t16=(uint16_t)t32;
  7133  0749  0827               	movf	cal_rs_simulate_power@t32+1,w
  7134  074A  00AB               	movwf	cal_rs_simulate_power@t16+1
  7135  074B  0826               	movf	cal_rs_simulate_power@t32,w
  7136  074C  00AA               	movwf	cal_rs_simulate_power@t16
  7137                           
  7138                           ;sample.c: 420: return t16;
  7139  074D  082B               	movf	cal_rs_simulate_power@t16+1,w
  7140  074E  00A5               	movwf	?_cal_rs_simulate_power+1
  7141  074F  082A               	movf	cal_rs_simulate_power@t16,w
  7142  0750  00A4               	movwf	?_cal_rs_simulate_power
  7143  0751  0008               	return
  7144  0752                     __end_of_cal_rs_simulate_power:	
  7145  0752                     PL2:	
  7146  0752  0874               	movf	?___lmul+3,w
  7147  0753  00AB               	movwf	___aldiv@dividend+3
  7148  0754  0873               	movf	?___lmul+2,w
  7149  0755  00AA               	movwf	___aldiv@dividend+2
  7150  0756  0872               	movf	?___lmul+1,w
  7151  0757  00A9               	movwf	___aldiv@dividend+1
  7152  0758  0871               	movf	?___lmul,w
  7153  0759  00A8               	movwf	___aldiv@dividend
  7154  075A  0008               	return
  7155  075B                     __end_ofPL2:	
  7156  075B                     PL8:	
  7157  075B  01A5               	clrf	___aldiv@divisor+1
  7158  075C  01A6               	clrf	___aldiv@divisor+2
  7159  075D  01A7               	clrf	___aldiv@divisor+3
  7160  075E  084F               	movf	_bbtu+3,w
  7161  075F  00AB               	movwf	___aldiv@dividend+3
  7162  0760  084E               	movf	_bbtu+2,w
  7163  0761  00AA               	movwf	___aldiv@dividend+2
  7164  0762  084D               	movf	_bbtu+1,w
  7165  0763  00A9               	movwf	___aldiv@dividend+1
  7166  0764  084C               	movf	_bbtu,w
  7167  0765  00A8               	movwf	___aldiv@dividend
  7168  0766  0008               	return
  7169  0767                     __end_ofPL8:	
  7170  0767                     PL10:	
  7171  0767  00B3               	movwf	m_int_2_str_ex@x+1
  7172  0768  3010               	movlw	16
  7173  0769  01B4               	clrf	m_int_2_str_ex@x+2
  7174  076A  01B5               	clrf	m_int_2_str_ex@x+3
  7175  076B  00B6               	movwf	m_int_2_str_ex@ssize
  7176  076C  30CE               	movlw	(low (_str| 0))& (0+255)
  7177  076D  01B7               	clrf	m_int_2_str_ex@ssize+1
  7178  076E  0008               	return
  7179  076F                     __end_ofPL10:	
  7180  076F                     PL12:	
  7181  076F  084B               	movf	_PidKp+3,w
  7182  0770  00F8               	movwf	___lmul@multiplicand+3
  7183  0771  084A               	movf	_PidKp+2,w
  7184  0772  00F7               	movwf	___lmul@multiplicand+2
  7185  0773  0849               	movf	_PidKp+1,w
  7186  0774  00F6               	movwf	___lmul@multiplicand+1
  7187  0775  0848               	movf	_PidKp,w
  7188  0776  00F5               	movwf	___lmul@multiplicand
  7189  0777  0008               	return
  7190  0778                     __end_ofPL12:	
  7191  0778                     PL16:	
  7192  0778  00C7               	movwf	pid_pwm1_idrv_run@t32+3
  7193  0779  0834               	movf	??_pid_pwm1_idrv_run+2,w
  7194  077A  00C6               	movwf	pid_pwm1_idrv_run@t32+2
  7195  077B  0833               	movf	??_pid_pwm1_idrv_run+1,w
  7196  077C  00C5               	movwf	pid_pwm1_idrv_run@t32+1
  7197  077D  0832               	movf	??_pid_pwm1_idrv_run,w
  7198  077E  00C4               	movwf	pid_pwm1_idrv_run@t32
  7199  077F  0008               	return
  7200  0780                     __end_ofPL16:	
  7201  0780                     PL22:	
  7202  0780  00F1               	movwf	___lmul@multiplier
  7203  0781  300A               	movlw	10
  7204  0782  00F5               	movwf	___lmul@multiplicand
  7205  0783  01F6               	clrf	___lmul@multiplicand+1
  7206  0784  01F7               	clrf	___lmul@multiplicand+2
  7207  0785  01F8               	clrf	___lmul@multiplicand+3
  7208  0786  0008               	return
  7209  0787                     __end_ofPL22:	
  7210  0787                     PL24:	
  7211  0787  3063               	movlw	99
  7212  0788  009E               	movwf	30	;volatile
  7213  0789  019F               	clrf	31	;volatile
  7214  078A  019B               	clrf	27	;volatile
  7215  078B  019C               	clrf	28	;volatile
  7216  078C  0008               	return
  7217  078D                     __end_ofPL24:	
  7218  078D                     PL26:	
  7219  078D  30CE               	movlw	low _str
  7220  078E  00F1               	movwf	uart_send_str@str
  7221  078F  3000               	movlw	high _str
  7222  0790  00F2               	movwf	uart_send_str@str+1
  7223  0791  0008               	return
  7224  0792                     __end_ofPL26:	
  7225  0792                     PL30:	
  7226  0792  00B2               	movwf	m_int_2_str_ex@x
  7227  0793  3010               	movlw	16
  7228  0794  00B6               	movwf	m_int_2_str_ex@ssize
  7229  0795  30CE               	movlw	(low (_str| 0))& (0+255)
  7230  0796  01B7               	clrf	m_int_2_str_ex@ssize+1
  7231  0797  0008               	return
  7232  0798                     __end_ofPL30:	
  7233  0798                     PL32:	
  7234  0798  3055               	movlw	85
  7235  0799  003C               	movlb	28	; select bank28
  7236  079A  008F               	movwf	15	;volatile
  7237  079B  30AA               	movlw	170
  7238  079C  008F               	movwf	15	;volatile
  7239  079D  0008               	return
  7240  079E                     __end_ofPL32:	
  7241  079E                     __ptext24:	
  7242 ;; *************** function _m_mem_set *****************
  7243 ;; Defined at:
  7244 ;;		line 32 in file "src/depend/m_string.c"
  7245 ;; Parameters:    Size  Location     Type
  7246 ;;  buf             1    wreg     PTR unsigned char 
  7247 ;;		 -> str(16), 
  7248 ;;  x               1    1[COMMON] unsigned char 
  7249 ;;  len             2    2[COMMON] unsigned int 
  7250 ;; Auto vars:     Size  Location     Type
  7251 ;;  buf             1    4[COMMON] PTR unsigned char 
  7252 ;;		 -> str(16), 
  7253 ;; Return value:  Size  Location     Type
  7254 ;;                  1    wreg      void 
  7255 ;; Registers used:
  7256 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7257 ;; Tracked objects:
  7258 ;;		On entry : 1F/0
  7259 ;;		On exit  : 1F/0
  7260 ;;		Unchanged: 1F/0
  7261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7262 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7263 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7265 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7266 ;;Total ram usage:        4 bytes
  7267 ;; Hardware stack levels used:    1
  7268 ;; Hardware stack levels required when called:    1
  7269 ;; This function calls:
  7270 ;;		Nothing
  7271 ;; This function is called by:
  7272 ;;		_m_int_2_str_ex
  7273 ;; This function uses a non-reentrant model
  7274 ;;
  7275                           
  7276                           
  7277                           ;psect for function _m_mem_set
  7278  079E                     _m_mem_set:	
  7279                           
  7280                           ;incstack = 0
  7281                           ; Regs used in _m_mem_set: [wreg+fsr1l+fsr1h+status,2+status,0]
  7282                           ;m_mem_set@buf stored from wreg
  7283  079E  00F4               	movwf	m_mem_set@buf
  7284  079F                     l2944:	
  7285                           ;m_string.c: 34: while(len--)
  7286                           
  7287  079F  3001               	movlw	1
  7288  07A0  02F2               	subwf	m_mem_set@len,f
  7289  07A1  3000               	movlw	0
  7290  07A2  3BF3               	subwfb	m_mem_set@len+1,f
  7291  07A3  0F72               	incfsz	m_mem_set@len,w
  7292  07A4  2FA8               	goto	l2940
  7293  07A5  0A73               	incf	m_mem_set@len+1,w
  7294  07A6  1903               	btfsc	3,2
  7295  07A7  0008               	return
  7296  07A8                     l2940:	
  7297                           
  7298                           ;m_string.c: 35: {
  7299                           ;m_string.c: 36: *buf++=x;
  7300  07A8  0874               	movf	m_mem_set@buf,w
  7301  07A9  0086               	movwf	6
  7302  07AA  0187               	clrf	7
  7303  07AB  0871               	movf	m_mem_set@x,w
  7304  07AC  0081               	movwf	1
  7305  07AD  0AF4               	incf	m_mem_set@buf,f
  7306  07AE  2F9F               	goto	l2944
  7307  07AF                     __end_of_m_mem_set:	
  7308  07AF                     __ptext47:	
  7309 ;; *************** function _EUSART_Initialize *****************
  7310 ;; Defined at:
  7311 ;;		line 55 in file "mcc_generated_files/eusart.c"
  7312 ;; Parameters:    Size  Location     Type
  7313 ;;		None
  7314 ;; Auto vars:     Size  Location     Type
  7315 ;;		None
  7316 ;; Return value:  Size  Location     Type
  7317 ;;                  1    wreg      void 
  7318 ;; Registers used:
  7319 ;;		wreg
  7320 ;; Tracked objects:
  7321 ;;		On entry : 1F/0
  7322 ;;		On exit  : 1F/1
  7323 ;;		Unchanged: 0/0
  7324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7328 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7329 ;;Total ram usage:        0 bytes
  7330 ;; Hardware stack levels used:    1
  7331 ;; Hardware stack levels required when called:    1
  7332 ;; This function calls:
  7333 ;;		Nothing
  7334 ;; This function is called by:
  7335 ;;		_SYSTEM_Initialize
  7336 ;; This function uses a non-reentrant model
  7337 ;;
  7338                           
  7339                           
  7340                           ;psect for function _EUSART_Initialize
  7341  07AF                     _EUSART_Initialize:	
  7342  07AF                     l2784:	
  7343                           ;incstack = 0
  7344                           ; Regs used in _EUSART_Initialize: [wreg]
  7345                           
  7346                           
  7347                           ;eusart.c: 60: BAUDCON = 0x08;
  7348  07AF  3008               	movlw	8
  7349  07B0  0023               	movlb	3	; select bank3
  7350  07B1  009F               	movwf	31	;volatile
  7351                           
  7352                           ;eusart.c: 63: RCSTA = 0x90;
  7353  07B2  3090               	movlw	144
  7354  07B3  009D               	movwf	29	;volatile
  7355                           
  7356                           ;eusart.c: 66: TXSTA = 0x24;
  7357  07B4  3024               	movlw	36
  7358  07B5  009E               	movwf	30	;volatile
  7359                           
  7360                           ;eusart.c: 70: SPBRGL = 0xA0;
  7361  07B6  30A0               	movlw	160
  7362  07B7  009B               	movwf	27	;volatile
  7363                           
  7364                           ;eusart.c: 75: SPBRGH = 0x01;
  7365  07B8  3001               	movlw	1
  7366  07B9  009C               	movwf	28	;volatile
  7367                           
  7368                           ;eusart.c: 76: PIE1bits.RCIE = 1;
  7369  07BA  0021               	movlb	1	; select bank1
  7370  07BB  1691               	bsf	17,5	;volatile
  7371  07BC  0008               	return
  7372  07BD                     __end_of_EUSART_Initialize:	
  7373  07BD                     __ptext39:	
  7374 ;; *************** function _TMR2_Initialize *****************
  7375 ;; Defined at:
  7376 ;;		line 63 in file "mcc_generated_files/tmr2.c"
  7377 ;; Parameters:    Size  Location     Type
  7378 ;;		None
  7379 ;; Auto vars:     Size  Location     Type
  7380 ;;		None
  7381 ;; Return value:  Size  Location     Type
  7382 ;;                  1    wreg      void 
  7383 ;; Registers used:
  7384 ;;		wreg, status,2, status,0, pclath, cstack
  7385 ;; Tracked objects:
  7386 ;;		On entry : 1F/1
  7387 ;;		On exit  : 1F/0
  7388 ;;		Unchanged: 0/0
  7389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7393 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7394 ;;Total ram usage:        0 bytes
  7395 ;; Hardware stack levels used:    1
  7396 ;; Hardware stack levels required when called:    2
  7397 ;; This function calls:
  7398 ;;		_TMR2_SetInterruptHandler
  7399 ;;		_TMR2_StartTimer
  7400 ;; This function is called by:
  7401 ;;		_SYSTEM_Initialize
  7402 ;; This function uses a non-reentrant model
  7403 ;;
  7404                           
  7405                           
  7406                           ;psect for function _TMR2_Initialize
  7407  07BD                     _TMR2_Initialize:	
  7408                           
  7409                           ;tmr2.c: 68: T2CON = 0x4B;
  7410                           
  7411                           ;incstack = 0
  7412                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7413  07BD  304B               	movlw	75
  7414  07BE  0020               	movlb	0	; select bank0
  7415  07BF  009C               	movwf	28	;volatile
  7416                           
  7417                           ;tmr2.c: 71: PR2 = 0x7C;
  7418  07C0  307C               	movlw	124
  7419  07C1  009B               	movwf	27	;volatile
  7420                           
  7421                           ;tmr2.c: 74: TMR2 = 0x00;
  7422  07C2  019A               	clrf	26	;volatile
  7423                           
  7424                           ;tmr2.c: 77: PIR1bits.TMR2IF = 0;
  7425  07C3  1091               	bcf	17,1	;volatile
  7426                           
  7427                           ;tmr2.c: 80: PIE1bits.TMR2IE = 1;
  7428  07C4  0021               	movlb	1	; select bank1
  7429  07C5  1491               	bsf	17,1	;volatile
  7430                           
  7431                           ;tmr2.c: 83: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
  7432  07C6  3000               	movlw	0
  7433  07C7  01F1               	clrf	TMR2_SetInterruptHandler@InterruptHandler
  7434  07C8  01F2               	clrf	TMR2_SetInterruptHandler@InterruptHandler+1
  7435  07C9  27CC  3180         	fcall	_TMR2_SetInterruptHandler
  7436                           
  7437                           ;tmr2.c: 86: TMR2_StartTimer();
  7438  07CB  2FCD               	ljmp	l2618
  7439  07CC                     __end_of_TMR2_Initialize:	
  7440  07CC                     __ptext41:	
  7441 ;; *************** function _TMR2_SetInterruptHandler *****************
  7442 ;; Defined at:
  7443 ;;		line 142 in file "mcc_generated_files/tmr2.c"
  7444 ;; Parameters:    Size  Location     Type
  7445 ;;  InterruptHan    2    1[COMMON] PTR FTN()void 
  7446 ;;		 -> TMR2_DefaultInterruptHandler(1), 
  7447 ;; Auto vars:     Size  Location     Type
  7448 ;;		None
  7449 ;; Return value:  Size  Location     Type
  7450 ;;                  1    wreg      void 
  7451 ;; Registers used:
  7452 ;;		None
  7453 ;; Tracked objects:
  7454 ;;		On entry : 1F/1
  7455 ;;		On exit  : 1F/1
  7456 ;;		Unchanged: 1F/0
  7457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7458 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7461 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7462 ;;Total ram usage:        2 bytes
  7463 ;; Hardware stack levels used:    1
  7464 ;; Hardware stack levels required when called:    1
  7465 ;; This function calls:
  7466 ;;		Nothing
  7467 ;; This function is called by:
  7468 ;;		_TMR2_Initialize
  7469 ;; This function uses a non-reentrant model
  7470 ;;
  7471                           
  7472                           
  7473                           ;psect for function _TMR2_SetInterruptHandler
  7474  07CC                     _TMR2_SetInterruptHandler:	
  7475                           
  7476                           ;incstack = 0
  7477                           ; Regs used in _TMR2_SetInterruptHandler: []
  7478  07CC  0008               	return
  7479  07CD                     __end_of_TMR2_SetInterruptHandler:	
  7480  07CD                     __ptext40:	
  7481 ;; *************** function _TMR2_StartTimer *****************
  7482 ;; Defined at:
  7483 ;;		line 89 in file "mcc_generated_files/tmr2.c"
  7484 ;; Parameters:    Size  Location     Type
  7485 ;;		None
  7486 ;; Auto vars:     Size  Location     Type
  7487 ;;		None
  7488 ;; Return value:  Size  Location     Type
  7489 ;;                  1    wreg      void 
  7490 ;; Registers used:
  7491 ;;		None
  7492 ;; Tracked objects:
  7493 ;;		On entry : 1F/1
  7494 ;;		On exit  : 1F/0
  7495 ;;		Unchanged: 0/0
  7496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7500 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7501 ;;Total ram usage:        0 bytes
  7502 ;; Hardware stack levels used:    1
  7503 ;; Hardware stack levels required when called:    1
  7504 ;; This function calls:
  7505 ;;		Nothing
  7506 ;; This function is called by:
  7507 ;;		_TMR2_Initialize
  7508 ;; This function uses a non-reentrant model
  7509 ;;
  7510                           
  7511                           
  7512                           ;psect for function _TMR2_StartTimer
  7513  07CD                     _TMR2_StartTimer:	
  7514  07CD                     l2618:	
  7515                           ;incstack = 0
  7516                           ; Regs used in _TMR2_StartTimer: []
  7517                           
  7518                           
  7519                           ;tmr2.c: 92: T2CONbits.TMR2ON = 1;
  7520  07CD  0020               	movlb	0	; select bank0
  7521  07CE  151C               	bsf	28,2	;volatile
  7522  07CF  0008               	return
  7523  07D0                     __end_of_TMR2_StartTimer:	
  7524                           
  7525                           	psect	bssCOMMON
  7526  007C                     __pbssCOMMON:	
  7527  007C                     _Event:	
  7528  007C                     	ds	1
  7529                           
  7530                           	psect	bssBANK0
  7531  0048                     __pbssBANK0:	
  7532  0048                     _PidKp:	
  7533  0048                     	ds	4
  7534  004C                     _bbtu:	
  7535  004C                     	ds	4
  7536  0050                     _pwm2Ei:	
  7537  0050                     	ds	2
  7538  0052                     _rtAdcValueRcHi:	
  7539  0052                     	ds	2
  7540  0054                     _rtAdcValueRcLo:	
  7541  0054                     	ds	2
  7542  0056                     _rtAdcValueRsHi:	
  7543  0056                     	ds	2
  7544  0058                     _rtAdcValueRsLo:	
  7545  0058                     	ds	2
  7546  005A                     _rtAdcValueVoFb:	
  7547  005A                     	ds	2
  7548  005C                     _voExpectAdcValue:	
  7549  005C                     	ds	2
  7550  005E                     _eusartRxCount:	
  7551  005E                     	ds	1
  7552  005F                     _eusartRxIdleTime_ms:	
  7553  005F                     	ds	1
  7554  0060                     _pidBbSm:	
  7555  0060                     	ds	1
  7556  0061                     _pidTestNum:	
  7557  0061                     	ds	1
  7558  0062                     _subTickerX:	
  7559  0062                     	ds	1
  7560  0063                     _subTickerX_1s:	
  7561  0063                     	ds	1
  7562                           
  7563                           	psect	dataBANK0
  7564  0064                     __pdataBANK0:	
  7565  0064                     _resRc:	
  7566  0064                     	ds	4
  7567  0068                     _resRs:	
  7568  0068                     	ds	4
  7569  006C                     _pwm2DutyForVout:	
  7570  006C                     	ds	2
  7571                           
  7572                           	psect	bssBANK1
  7573  00A0                     __pbssBANK1:	
  7574  00A0                     _err:	
  7575  00A0                     	ds	12
  7576  00AC                     _PidTd:	
  7577  00AC                     	ds	4
  7578  00B0                     _PidTi:	
  7579  00B0                     	ds	4
  7580  00B4                     _bbku:	
  7581  00B4                     	ds	4
  7582  00B8                     _bbt0:	
  7583  00B8                     	ds	4
  7584  00BC                     _bbt1:	
  7585  00BC                     	ds	4
  7586  00C0                     _bbta:	
  7587  00C0                     	ds	4
  7588  00C4                     _bbu:	
  7589  00C4                     	ds	4
  7590  00C8                     _globalTicker:	
  7591  00C8                     	ds	4
  7592  00CC                     _rsSimPower:	
  7593  00CC                     	ds	2
  7594  00CE                     _str:	
  7595  00CE                     	ds	16
  7596                           
  7597                           	psect	dataBANK1
  7598  00DE                     __pdataBANK1:	
  7599  00DE                     _bbmax:	
  7600  00DE                     	ds	4
  7601  00E2                     _bbmin:	
  7602  00E2                     	ds	4
  7603  00E6                     _pidU:	
  7604  00E6                     	ds	4
  7605                           
  7606                           	psect	bssBANK2
  7607  0120                     __pbssBANK2:	
  7608  0120                     _sysData:	
  7609  0120                     	ds	52
  7610                           
  7611                           	psect	bssBANK3
  7612  01A0                     __pbssBANK3:	
  7613  01A0                     _eusartRxBuffer:	
  7614  01A0                     	ds	32
  7615                           
  7616                           	psect	clrtext
  7617  09FB                     clear_ram0:	
  7618                           ;	Called with FSR0 containing the base address, and
  7619                           ;	WREG with the size to clear
  7620                           
  7621  09FB  0064               	clrwdt	;clear the watchdog before getting into this loop
  7622  09FC                     clrloop0:	
  7623  09FC  0180               	clrf	0	;clear RAM location pointed to by FSR
  7624  09FD  3101               	addfsr 0,1
  7625  09FE  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  7626  09FF  29FC               	goto	clrloop0	;have we reached the end yet?
  7627  0A00  3400               	retlw	0	;all done for this memory range, return
  7628                           
  7629                           	psect	inittext
  7630  09F5                     init_ram:	
  7631  09F5  00FE               	movwf	126
  7632  09F6                     initloop:	
  7633  09F6  0012               	moviw fsr0++
  7634  09F7  001E               	movwi fsr1++
  7635  09F8  0BFE               	decfsz	126,f
  7636  09F9  29F6               	goto	initloop
  7637  09FA  3400               	retlw	0
  7638                           
  7639                           	psect	cstackBANK2
  7640  0154                     __pcstackBANK2:	
  7641  0154                     calc_expect_vout_adc_value@y1:	
  7642                           
  7643                           ; 4 bytes @ 0x0
  7644  0154                     	ds	4
  7645  0158                     calc_expect_vout_adc_value@x1:	
  7646                           
  7647                           ; 4 bytes @ 0x4
  7648  0158                     	ds	4
  7649  015C                     calc_expect_vout_adc_value@y0:	
  7650                           
  7651                           ; 4 bytes @ 0x8
  7652  015C                     	ds	4
  7653  0160                     calc_expect_vout_adc_value@x0:	
  7654                           
  7655                           ; 4 bytes @ 0xC
  7656  0160                     	ds	4
  7657  0164                     calc_expect_vout_adc_value@t32:	
  7658                           
  7659                           ; 4 bytes @ 0x10
  7660  0164                     	ds	4
  7661  0168                     calc_expect_vout_adc_value@i:	
  7662                           
  7663                           ; 1 bytes @ 0x14
  7664  0168                     	ds	1
  7665                           
  7666                           	psect	cstackCOMMON
  7667  0070                     __pcstackCOMMON:	
  7668  0070                     ?_TMR2_StartTimer:	
  7669  0070                     ?_PIN_MANAGER_Initialize:	
  7670                           ; 1 bytes @ 0x0
  7671                           
  7672  0070                     ?_OSCILLATOR_Initialize:	
  7673                           ; 1 bytes @ 0x0
  7674                           
  7675  0070                     ?_WDT_Initialize:	
  7676                           ; 1 bytes @ 0x0
  7677                           
  7678  0070                     ?_ADC1_Initialize:	
  7679                           ; 1 bytes @ 0x0
  7680                           
  7681  0070                     ?_EUSART_Initialize:	
  7682                           ; 1 bytes @ 0x0
  7683                           
  7684  0070                     ?_PWM2_Initialize:	
  7685                           ; 1 bytes @ 0x0
  7686                           
  7687  0070                     ?_PWM1_Initialize:	
  7688                           ; 1 bytes @ 0x0
  7689                           
  7690  0070                     ?_PWM1_Start:	
  7691                           ; 1 bytes @ 0x0
  7692                           
  7693  0070                     ?_TMR2_Initialize:	
  7694                           ; 1 bytes @ 0x0
  7695                           
  7696  0070                     ?_INTERRUPT_InterruptManager:	
  7697                           ; 1 bytes @ 0x0
  7698                           
  7699  0070                     ??_INTERRUPT_InterruptManager:	
  7700                           ; 1 bytes @ 0x0
  7701                           
  7702  0070                     ?_FVR_Initialize:	
  7703                           ; 1 bytes @ 0x0
  7704                           
  7705  0070                     ?_SYSTEM_Initialize:	
  7706                           ; 1 bytes @ 0x0
  7707                           
  7708  0070                     ?_fvr_set_gain:	
  7709                           ; 1 bytes @ 0x0
  7710                           
  7711  0070                     ?_adc_init:	
  7712                           ; 1 bytes @ 0x0
  7713                           
  7714  0070                     ?_pid_pwm1_idrv_b_b:	
  7715                           ; 1 bytes @ 0x0
  7716                           
  7717  0070                     ?_pid_pwm1_idrv_run:	
  7718                           ; 1 bytes @ 0x0
  7719                           
  7720  0070                     ?_pid_pwm2_vout_run:	
  7721                           ; 1 bytes @ 0x0
  7722                           
  7723  0070                     ?_my_flash_read_system_erase:	
  7724                           ; 1 bytes @ 0x0
  7725                           
  7726  0070                     ?_sys_data_save:	
  7727                           ; 1 bytes @ 0x0
  7728                           
  7729  0070                     ?_main:	
  7730                           ; 1 bytes @ 0x0
  7731                           
  7732  0070                     ?_sys_data_init:	
  7733                           ; 1 bytes @ 0x0
  7734                           
  7735  0070                     INTERRUPT_InterruptManager@t8:	
  7736                           ; 2 bytes @ 0x0
  7737                           
  7738                           
  7739                           ; 1 bytes @ 0x0
  7740  0070                     	ds	1
  7741  0071                     ?_FLASH_EraseBlock:	
  7742  0071                     ?_TMR2_SetInterruptHandler:	
  7743                           ; 1 bytes @ 0x1
  7744                           
  7745  0071                     ??_TMR2_StartTimer:	
  7746                           ; 1 bytes @ 0x1
  7747                           
  7748  0071                     ??_PIN_MANAGER_Initialize:	
  7749                           ; 1 bytes @ 0x1
  7750                           
  7751  0071                     ??_OSCILLATOR_Initialize:	
  7752                           ; 1 bytes @ 0x1
  7753                           
  7754  0071                     ??_WDT_Initialize:	
  7755                           ; 1 bytes @ 0x1
  7756                           
  7757  0071                     ??_ADC1_Initialize:	
  7758                           ; 1 bytes @ 0x1
  7759                           
  7760  0071                     ??_EUSART_Initialize:	
  7761                           ; 1 bytes @ 0x1
  7762                           
  7763  0071                     ??_PWM2_Initialize:	
  7764                           ; 1 bytes @ 0x1
  7765                           
  7766  0071                     ??_PWM1_Initialize:	
  7767                           ; 1 bytes @ 0x1
  7768                           
  7769  0071                     ??_PWM1_Start:	
  7770                           ; 1 bytes @ 0x1
  7771                           
  7772  0071                     ??_FVR_Initialize:	
  7773                           ; 1 bytes @ 0x1
  7774                           
  7775  0071                     ?_uart_send_str:	
  7776                           ; 1 bytes @ 0x1
  7777                           
  7778  0071                     ??_fvr_set_gain:	
  7779                           ; 1 bytes @ 0x1
  7780                           
  7781  0071                     ??_adc_init:	
  7782                           ; 1 bytes @ 0x1
  7783                           
  7784  0071                     ?_my_flash_system_read:	
  7785                           ; 1 bytes @ 0x1
  7786                           
  7787  0071                     ?_m_mem_set:	
  7788                           ; 1 bytes @ 0x1
  7789                           
  7790  0071                     ?_m_mem_cpy:	
  7791                           ; 1 bytes @ 0x1
  7792                           
  7793  0071                     ?_m_mem_cpy_len:	
  7794                           ; 1 bytes @ 0x1
  7795                           
  7796  0071                     ?_get_idrv_pwm1_duty:	
  7797                           ; 1 bytes @ 0x1
  7798                           
  7799  0071                     ?_get_vout_pwm2_duty:	
  7800                           ; 2 bytes @ 0x1
  7801                           
  7802  0071                     ?_my_flash_system_write:	
  7803                           ; 2 bytes @ 0x1
  7804                           
  7805  0071                     ?_calc_crc_w:	
  7806                           ; 2 bytes @ 0x1
  7807                           
  7808  0071                     ?___wmul:	
  7809                           ; 2 bytes @ 0x1
  7810                           
  7811  0071                     ?___awdiv:	
  7812                           ; 2 bytes @ 0x1
  7813                           
  7814  0071                     ?___lwdiv:	
  7815                           ; 2 bytes @ 0x1
  7816                           
  7817  0071                     ?___lmul:	
  7818                           ; 2 bytes @ 0x1
  7819                           
  7820  0071                     ?___almod:	
  7821                           ; 4 bytes @ 0x1
  7822                           
  7823  0071                     ?___lldiv:	
  7824                           ; 4 bytes @ 0x1
  7825                           
  7826  0071                     PIN_MANAGER_Initialize@state:	
  7827                           ; 4 bytes @ 0x1
  7828                           
  7829  0071                     fvr_set_gain@t8:	
  7830                           ; 1 bytes @ 0x1
  7831                           
  7832  0071                     m_mem_set@x:	
  7833                           ; 1 bytes @ 0x1
  7834                           
  7835  0071                     m_mem_cpy@s:	
  7836                           ; 1 bytes @ 0x1
  7837                           
  7838  0071                     m_mem_cpy_len@s:	
  7839                           ; 1 bytes @ 0x1
  7840                           
  7841  0071                     FLASH_EraseBlock@startAddr:	
  7842                           ; 1 bytes @ 0x1
  7843                           
  7844  0071                     TMR2_SetInterruptHandler@InterruptHandler:	
  7845                           ; 2 bytes @ 0x1
  7846                           
  7847  0071                     uart_send_str@str:	
  7848                           ; 2 bytes @ 0x1
  7849                           
  7850  0071                     my_flash_system_read@len:	
  7851                           ; 2 bytes @ 0x1
  7852                           
  7853  0071                     my_flash_system_write@len:	
  7854                           ; 2 bytes @ 0x1
  7855                           
  7856  0071                     calc_crc_w@crc:	
  7857                           ; 2 bytes @ 0x1
  7858                           
  7859  0071                     ___wmul@multiplier:	
  7860                           ; 2 bytes @ 0x1
  7861                           
  7862  0071                     ___awdiv@divisor:	
  7863                           ; 2 bytes @ 0x1
  7864                           
  7865  0071                     ___lwdiv@divisor:	
  7866                           ; 2 bytes @ 0x1
  7867                           
  7868  0071                     ___lmul@multiplier:	
  7869                           ; 2 bytes @ 0x1
  7870                           
  7871  0071                     ___almod@divisor:	
  7872                           ; 4 bytes @ 0x1
  7873                           
  7874  0071                     ___lldiv@divisor:	
  7875                           ; 4 bytes @ 0x1
  7876                           
  7877                           
  7878                           ; 4 bytes @ 0x1
  7879  0071                     	ds	1
  7880  0072                     ??_m_mem_cpy:	
  7881  0072                     fvr_set_gain@g:	
  7882                           ; 1 bytes @ 0x2
  7883                           
  7884  0072                     adc_init@ch:	
  7885                           ; 1 bytes @ 0x2
  7886                           
  7887  0072                     m_mem_cpy@d:	
  7888                           ; 1 bytes @ 0x2
  7889                           
  7890  0072                     m_mem_set@len:	
  7891                           ; 1 bytes @ 0x2
  7892                           
  7893  0072                     m_mem_cpy_len@len:	
  7894                           ; 2 bytes @ 0x2
  7895                           
  7896                           
  7897                           ; 2 bytes @ 0x2
  7898  0072                     	ds	1
  7899  0073                     ??_FLASH_EraseBlock:	
  7900  0073                     ??_TMR2_SetInterruptHandler:	
  7901                           ; 1 bytes @ 0x3
  7902                           
  7903  0073                     ??_TMR2_Initialize:	
  7904                           ; 1 bytes @ 0x3
  7905                           
  7906  0073                     ??_SYSTEM_Initialize:	
  7907                           ; 1 bytes @ 0x3
  7908                           
  7909  0073                     ??_uart_send_str:	
  7910                           ; 1 bytes @ 0x3
  7911                           
  7912  0073                     ??_get_idrv_pwm1_duty:	
  7913                           ; 1 bytes @ 0x3
  7914                           
  7915  0073                     ?_set_idrv_pwm1_duty:	
  7916                           ; 1 bytes @ 0x3
  7917                           
  7918  0073                     ??_get_vout_pwm2_duty:	
  7919                           ; 1 bytes @ 0x3
  7920                           
  7921  0073                     ?_set_vout_pwm2_duty:	
  7922                           ; 1 bytes @ 0x3
  7923                           
  7924  0073                     ??_my_flash_system_read:	
  7925                           ; 1 bytes @ 0x3
  7926                           
  7927  0073                     ??_my_flash_system_write:	
  7928                           ; 1 bytes @ 0x3
  7929                           
  7930  0073                     ?_adc_sample:	
  7931                           ; 1 bytes @ 0x3
  7932                           
  7933  0073                     FLASH_EraseBlock@GIEBitValue:	
  7934                           ; 2 bytes @ 0x3
  7935                           
  7936  0073                     adc_sample@gfvr:	
  7937                           ; 1 bytes @ 0x3
  7938                           
  7939  0073                     calc_crc_w@b:	
  7940                           ; 1 bytes @ 0x3
  7941                           
  7942  0073                     set_idrv_pwm1_duty@duty:	
  7943                           ; 1 bytes @ 0x3
  7944                           
  7945  0073                     set_vout_pwm2_duty@duty:	
  7946                           ; 2 bytes @ 0x3
  7947                           
  7948  0073                     ___wmul@multiplicand:	
  7949                           ; 2 bytes @ 0x3
  7950                           
  7951  0073                     ___awdiv@dividend:	
  7952                           ; 2 bytes @ 0x3
  7953                           
  7954  0073                     ___lwdiv@dividend:	
  7955                           ; 2 bytes @ 0x3
  7956                           
  7957                           
  7958                           ; 2 bytes @ 0x3
  7959  0073                     	ds	1
  7960  0074                     ??_my_flash_read_system_erase:	
  7961  0074                     ??_m_mem_set:	
  7962                           ; 1 bytes @ 0x4
  7963                           
  7964  0074                     ??_m_mem_cpy_len:	
  7965                           ; 1 bytes @ 0x4
  7966                           
  7967  0074                     adc_sample@num:	
  7968                           ; 1 bytes @ 0x4
  7969                           
  7970  0074                     my_flash_system_read@GIEBitValue:	
  7971                           ; 1 bytes @ 0x4
  7972                           
  7973  0074                     m_mem_set@buf:	
  7974                           ; 1 bytes @ 0x4
  7975                           
  7976  0074                     m_mem_cpy_len@d:	
  7977                           ; 1 bytes @ 0x4
  7978                           
  7979  0074                     calc_crc_w@polynomial:	
  7980                           ; 1 bytes @ 0x4
  7981                           
  7982                           
  7983                           ; 2 bytes @ 0x4
  7984  0074                     	ds	1
  7985  0075                     ??_set_idrv_pwm1_duty:	
  7986  0075                     ??_set_vout_pwm2_duty:	
  7987                           ; 1 bytes @ 0x5
  7988                           
  7989  0075                     ??_adc_sample:	
  7990                           ; 1 bytes @ 0x5
  7991                           
  7992  0075                     ??___wmul:	
  7993                           ; 1 bytes @ 0x5
  7994                           
  7995  0075                     ??___awdiv:	
  7996                           ; 1 bytes @ 0x5
  7997                           
  7998  0075                     ??___lwdiv:	
  7999                           ; 1 bytes @ 0x5
  8000                           
  8001  0075                     my_flash_system_read@buf:	
  8002                           ; 1 bytes @ 0x5
  8003                           
  8004  0075                     ___awdiv@counter:	
  8005                           ; 1 bytes @ 0x5
  8006                           
  8007  0075                     set_idrv_pwm1_duty@t16:	
  8008                           ; 1 bytes @ 0x5
  8009                           
  8010  0075                     set_vout_pwm2_duty@t16:	
  8011                           ; 2 bytes @ 0x5
  8012                           
  8013  0075                     ___wmul@product:	
  8014                           ; 2 bytes @ 0x5
  8015                           
  8016  0075                     ___lwdiv@quotient:	
  8017                           ; 2 bytes @ 0x5
  8018                           
  8019  0075                     ___lmul@multiplicand:	
  8020                           ; 2 bytes @ 0x5
  8021                           
  8022  0075                     ___almod@dividend:	
  8023                           ; 4 bytes @ 0x5
  8024                           
  8025  0075                     ___lldiv@dividend:	
  8026                           ; 4 bytes @ 0x5
  8027                           
  8028                           
  8029                           ; 4 bytes @ 0x5
  8030  0075                     	ds	1
  8031  0076                     ??_calc_crc_w:	
  8032  0076                     adc_sample@ch:	
  8033                           ; 1 bytes @ 0x6
  8034                           
  8035  0076                     ___awdiv@sign:	
  8036                           ; 1 bytes @ 0x6
  8037                           
  8038  0076                     my_flash_system_read@i:	
  8039                           ; 1 bytes @ 0x6
  8040                           
  8041                           
  8042                           ; 2 bytes @ 0x6
  8043  0076                     	ds	1
  8044  0077                     ___lwdiv@counter:	
  8045  0077                     adc_sample@ret:	
  8046                           ; 1 bytes @ 0x7
  8047                           
  8048  0077                     calc_crc_w@i:	
  8049                           ; 2 bytes @ 0x7
  8050                           
  8051  0077                     ___awdiv@quotient:	
  8052                           ; 2 bytes @ 0x7
  8053                           
  8054                           
  8055                           ; 2 bytes @ 0x7
  8056  0077                     	ds	1
  8057  0078                     my_flash_system_read@flashAddr:	
  8058                           
  8059                           ; 2 bytes @ 0x8
  8060  0078                     	ds	1
  8061  0079                     ??_calc_temp_rs:	
  8062  0079                     ??_pid_pwm1_idrv_b_b:	
  8063                           ; 1 bytes @ 0x9
  8064                           
  8065  0079                     ??_pid_pwm2_vout_run:	
  8066                           ; 1 bytes @ 0x9
  8067                           
  8068  0079                     ??_cal_rs_simulate_power:	
  8069                           ; 1 bytes @ 0x9
  8070                           
  8071  0079                     ??___lmul:	
  8072                           ; 1 bytes @ 0x9
  8073                           
  8074  0079                     ??___aldiv:	
  8075                           ; 1 bytes @ 0x9
  8076                           
  8077  0079                     ??___almod:	
  8078                           ; 1 bytes @ 0x9
  8079                           
  8080  0079                     ??___lldiv:	
  8081                           ; 1 bytes @ 0x9
  8082                           
  8083  0079                     ?_crc_sum:	
  8084                           ; 1 bytes @ 0x9
  8085                           
  8086  0079                     adc_sample@i:	
  8087                           ; 2 bytes @ 0x9
  8088                           
  8089  0079                     ___almod@counter:	
  8090                           ; 1 bytes @ 0x9
  8091                           
  8092  0079                     crc_sum@len:	
  8093                           ; 1 bytes @ 0x9
  8094                           
  8095                           
  8096                           ; 2 bytes @ 0x9
  8097  0079                     	ds	1
  8098  007A                     ___almod@sign:	
  8099  007A                     adc_sample@t16:	
  8100                           ; 1 bytes @ 0xA
  8101                           
  8102                           
  8103                           ; 2 bytes @ 0xA
  8104  007A                     	ds	1
  8105  007B                     ??_crc_verify:	
  8106  007B                     ??_crc_append:	
  8107                           ; 1 bytes @ 0xB
  8108                           
  8109                           
  8110                           ; 1 bytes @ 0xB
  8111  007B                     	ds	1
  8112  007C                     ??_sys_data_init:	
  8113  007C                     ??_sys_data_save:	
  8114                           ; 1 bytes @ 0xC
  8115                           
  8116  007C                     ??_main:	
  8117                           ; 1 bytes @ 0xC
  8118                           
  8119                           
  8120                           	psect	cstackBANK0
  8121  0020                     __pcstackBANK0:	
  8122                           ; 1 bytes @ 0xC
  8123                           
  8124  0020                     ??_crc_sum:	
  8125  0020                     pid_pwm2_vout_run@ei:	
  8126                           ; 1 bytes @ 0x0
  8127                           
  8128  0020                     my_flash_system_write@j:	
  8129                           ; 2 bytes @ 0x0
  8130                           
  8131  0020                     ___lmul@product:	
  8132                           ; 2 bytes @ 0x0
  8133                           
  8134  0020                     ___lldiv@quotient:	
  8135                           ; 4 bytes @ 0x0
  8136                           
  8137                           
  8138                           ; 4 bytes @ 0x0
  8139  0020                     	ds	2
  8140  0022                     my_flash_system_write@GIEBitValue:	
  8141  0022                     pid_pwm2_vout_run@t16:	
  8142                           ; 1 bytes @ 0x2
  8143                           
  8144  0022                     crc_sum@polynomial:	
  8145                           ; 2 bytes @ 0x2
  8146                           
  8147                           
  8148                           ; 2 bytes @ 0x2
  8149  0022                     	ds	1
  8150  0023                     my_flash_system_write@blocNum:	
  8151                           
  8152                           ; 2 bytes @ 0x3
  8153  0023                     	ds	1
  8154  0024                     ?_cal_rs_simulate_power:	
  8155  0024                     ?___aldiv:	
  8156                           ; 2 bytes @ 0x4
  8157                           
  8158  0024                     crc_sum@message:	
  8159                           ; 4 bytes @ 0x4
  8160                           
  8161  0024                     ___lldiv@counter:	
  8162                           ; 1 bytes @ 0x4
  8163                           
  8164  0024                     ___aldiv@divisor:	
  8165                           ; 1 bytes @ 0x4
  8166                           
  8167                           
  8168                           ; 4 bytes @ 0x4
  8169  0024                     	ds	1
  8170  0025                     ?_calc_temp_rs:	
  8171  0025                     ?_calc_temp_rc:	
  8172                           ; 4 bytes @ 0x5
  8173                           
  8174  0025                     my_flash_system_write@buf:	
  8175                           ; 4 bytes @ 0x5
  8176                           
  8177  0025                     _crc_sum$1661:	
  8178                           ; 1 bytes @ 0x5
  8179                           
  8180                           
  8181                           ; 1 bytes @ 0x5
  8182  0025                     	ds	1
  8183  0026                     _crc_sum$1662:	
  8184  0026                     my_flash_system_write@loc:	
  8185                           ; 1 bytes @ 0x6
  8186                           
  8187  0026                     cal_rs_simulate_power@t32:	
  8188                           ; 2 bytes @ 0x6
  8189                           
  8190                           
  8191                           ; 4 bytes @ 0x6
  8192  0026                     	ds	1
  8193  0027                     crc_sum@i:	
  8194                           
  8195                           ; 2 bytes @ 0x7
  8196  0027                     	ds	1
  8197  0028                     my_flash_system_write@flashAddr:	
  8198  0028                     ___aldiv@dividend:	
  8199                           ; 2 bytes @ 0x8
  8200                           
  8201                           
  8202                           ; 4 bytes @ 0x8
  8203  0028                     	ds	1
  8204  0029                     ??_calc_temp_rc:	
  8205  0029                     crc_sum@crc:	
  8206                           ; 1 bytes @ 0x9
  8207                           
  8208  0029                     calc_temp_rs@x:	
  8209                           ; 2 bytes @ 0x9
  8210                           
  8211                           
  8212                           ; 4 bytes @ 0x9
  8213  0029                     	ds	1
  8214  002A                     cal_rs_simulate_power@t16:	
  8215  002A                     my_flash_system_write@i:	
  8216                           ; 2 bytes @ 0xA
  8217                           
  8218                           
  8219                           ; 2 bytes @ 0xA
  8220  002A                     	ds	1
  8221  002B                     ?_crc_verify:	
  8222  002B                     ?_crc_append:	
  8223                           ; 1 bytes @ 0xB
  8224                           
  8225  002B                     crc_verify@n:	
  8226                           ; 1 bytes @ 0xB
  8227                           
  8228  002B                     crc_append@n:	
  8229                           ; 2 bytes @ 0xB
  8230                           
  8231                           
  8232                           ; 2 bytes @ 0xB
  8233  002B                     	ds	1
  8234  002C                     ___aldiv@counter:	
  8235                           
  8236                           ; 1 bytes @ 0xC
  8237  002C                     	ds	1
  8238  002D                     ___aldiv@sign:	
  8239  002D                     crc_verify@crccal:	
  8240                           ; 1 bytes @ 0xD
  8241                           
  8242  002D                     crc_append@crc:	
  8243                           ; 2 bytes @ 0xD
  8244                           
  8245  002D                     calc_temp_rs@y:	
  8246                           ; 2 bytes @ 0xD
  8247                           
  8248  002D                     calc_temp_rc@x:	
  8249                           ; 4 bytes @ 0xD
  8250                           
  8251                           
  8252                           ; 4 bytes @ 0xD
  8253  002D                     	ds	1
  8254  002E                     ___aldiv@quotient:	
  8255                           
  8256                           ; 4 bytes @ 0xE
  8257  002E                     	ds	1
  8258  002F                     crc_append@message:	
  8259  002F                     crc_verify@expected:	
  8260                           ; 1 bytes @ 0xF
  8261                           
  8262                           
  8263                           ; 2 bytes @ 0xF
  8264  002F                     	ds	2
  8265  0031                     crc_verify@message:	
  8266  0031                     calc_temp_rc@y:	
  8267                           ; 1 bytes @ 0x11
  8268                           
  8269                           
  8270                           ; 4 bytes @ 0x11
  8271  0031                     	ds	1
  8272  0032                     ?_m_int_2_str_ex:	
  8273  0032                     ??_pid_pwm1_idrv_run:	
  8274                           ; 1 bytes @ 0x12
  8275                           
  8276  0032                     ?_calc_expect_vout_adc_value:	
  8277                           ; 1 bytes @ 0x12
  8278                           
  8279  0032                     calc_expect_vout_adc_value@x:	
  8280                           ; 2 bytes @ 0x12
  8281                           
  8282  0032                     sys_data_init@ret:	
  8283                           ; 2 bytes @ 0x12
  8284                           
  8285  0032                     pid_pwm1_idrv_b_b@t32:	
  8286                           ; 2 bytes @ 0x12
  8287                           
  8288  0032                     m_int_2_str_ex@x:	
  8289                           ; 4 bytes @ 0x12
  8290                           
  8291                           
  8292                           ; 4 bytes @ 0x12
  8293  0032                     	ds	2
  8294  0034                     ??_calc_expect_vout_adc_value:	
  8295  0034                     sys_data_init@i:	
  8296                           ; 1 bytes @ 0x14
  8297                           
  8298                           
  8299                           ; 2 bytes @ 0x14
  8300  0034                     	ds	2
  8301  0036                     m_int_2_str_ex@ssize:	
  8302  0036                     pid_pwm1_idrv_run@ep:	
  8303                           ; 2 bytes @ 0x16
  8304                           
  8305                           
  8306                           ; 4 bytes @ 0x16
  8307  0036                     	ds	2
  8308  0038                     ??_m_int_2_str_ex:	
  8309                           
  8310                           ; 1 bytes @ 0x18
  8311  0038                     	ds	2
  8312  003A                     pid_pwm1_idrv_run@ei:	
  8313                           
  8314                           ; 4 bytes @ 0x1A
  8315  003A                     	ds	2
  8316  003C                     m_int_2_str_ex@t:	
  8317                           
  8318                           ; 4 bytes @ 0x1C
  8319  003C                     	ds	4
  8320  0040                     m_int_2_str_ex@sig:	
  8321                           
  8322                           ; 1 bytes @ 0x20
  8323  0040                     	ds	1
  8324  0041                     m_int_2_str_ex@buf:	
  8325                           
  8326                           ; 1 bytes @ 0x21
  8327  0041                     	ds	1
  8328  0042                     m_int_2_str_ex@i:	
  8329  0042                     pid_pwm1_idrv_run@t16:	
  8330                           ; 1 bytes @ 0x22
  8331                           
  8332                           
  8333                           ; 2 bytes @ 0x22
  8334  0042                     	ds	2
  8335  0044                     pid_pwm1_idrv_run@t32:	
  8336                           
  8337                           ; 4 bytes @ 0x24
  8338  0044                     	ds	4
  8339                           
  8340                           	psect	text2
  8341  0DFF                     __ptext2:	
  8342 ;; *************** function _sys_data_save *****************
  8343 ;; Defined at:
  8344 ;;		line 111 in file "src/api/sysData.c"
  8345 ;; Parameters:    Size  Location     Type
  8346 ;;		None
  8347 ;; Auto vars:     Size  Location     Type
  8348 ;;		None
  8349 ;; Return value:  Size  Location     Type
  8350 ;;                  1    wreg      void 
  8351 ;; Registers used:
  8352 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8353 ;; Tracked objects:
  8354 ;;		On entry : 1F/2
  8355 ;;		On exit  : 1F/0
  8356 ;;		Unchanged: 0/0
  8357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8361 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8362 ;;Total ram usage:        0 bytes
  8363 ;; Hardware stack levels used:    1
  8364 ;; Hardware stack levels required when called:    4
  8365 ;; This function calls:
  8366 ;;		_crc_append
  8367 ;;		_my_flash_read_system_erase
  8368 ;;		_my_flash_system_write
  8369 ;; This function is called by:
  8370 ;;		_main
  8371 ;; This function uses a non-reentrant model
  8372 ;;
  8373                           
  8374                           
  8375                           ;psect for function _sys_data_save
  8376  0DFF                     _sys_data_save:	
  8377                           
  8378                           ;sysData.c: 113: crc_append((uint8_t*)&sysData,sizeof(sysData_t)-2);
  8379                           
  8380                           ;incstack = 0
  8381                           ; Regs used in _sys_data_save: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8382  0DFF  3032               	movlw	50
  8383  0E00  0020               	movlb	0	; select bank0
  8384  0E01  00AB               	movwf	crc_append@n
  8385  0E02  3020               	movlw	(low (_sysData| (0+256)))& (0+255)
  8386  0E03  01AC               	clrf	crc_append@n+1
  8387  0E04  266B  318D         	fcall	_crc_append
  8388                           
  8389                           ;sysData.c: 114: my_flash_read_system_erase();
  8390  0E06  2751  318D         	fcall	_my_flash_read_system_erase
  8391                           
  8392                           ;sysData.c: 115: my_flash_system_write((uint8_t*)&sysData,sizeof(sysData_t));
  8393  0E08  27FB  318D         	fcall	PL34	;call to abstracted procedure
  8394  0E0A  2F74               	ljmp	_my_flash_system_write
  8395  0E0B                     __end_of_sys_data_save:	
  8396  0E0B                     __ptext3:	
  8397 ;; *************** function _sys_data_init *****************
  8398 ;; Defined at:
  8399 ;;		line 87 in file "src/api/sysData.c"
  8400 ;; Parameters:    Size  Location     Type
  8401 ;;		None
  8402 ;; Auto vars:     Size  Location     Type
  8403 ;;  i               2   20[BANK0 ] unsigned int 
  8404 ;;  ret             2   18[BANK0 ] unsigned int 
  8405 ;; Return value:  Size  Location     Type
  8406 ;;                  2  750[None  ] unsigned int 
  8407 ;; Registers used:
  8408 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8409 ;; Tracked objects:
  8410 ;;		On entry : 1F/1B
  8411 ;;		On exit  : 1F/0
  8412 ;;		Unchanged: 0/0
  8413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8415 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8417 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8418 ;;Total ram usage:        4 bytes
  8419 ;; Hardware stack levels used:    1
  8420 ;; Hardware stack levels required when called:    4
  8421 ;; This function calls:
  8422 ;;		___wmul
  8423 ;;		_crc_append
  8424 ;;		_crc_verify
  8425 ;;		_my_flash_read_system_erase
  8426 ;;		_my_flash_system_read
  8427 ;;		_my_flash_system_write
  8428 ;; This function is called by:
  8429 ;;		_main
  8430 ;; This function uses a non-reentrant model
  8431 ;;
  8432                           
  8433                           
  8434                           ;psect for function _sys_data_init
  8435  0E0B                     _sys_data_init:	
  8436                           
  8437                           ;sysData.c: 89: uint16_t ret,i;
  8438                           ;sysData.c: 90: my_flash_system_read((uint8_t*)&sysData,sizeof(sysData_t));
  8439                           
  8440                           ;incstack = 0
  8441                           ; Regs used in _sys_data_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8442  0E0B  3034               	movlw	52
  8443  0E0C  00F1               	movwf	my_flash_system_read@len
  8444  0E0D  3020               	movlw	(low (_sysData| (0+256)))& (0+255)
  8445  0E0E  01F2               	clrf	my_flash_system_read@len+1
  8446  0E0F  2722  318D         	fcall	_my_flash_system_read
  8447                           
  8448                           ;sysData.c: 91: ret=crc_verify((uint8_t*)&sysData,sizeof(sysData_t));
  8449  0E11  3034               	movlw	52
  8450  0E12  0020               	movlb	0	; select bank0
  8451  0E13  00AB               	movwf	crc_verify@n
  8452  0E14  3020               	movlw	(low (_sysData| (0+256)))& (0+255)
  8453  0E15  01AC               	clrf	crc_verify@n+1
  8454  0E16  2686  318D         	fcall	_crc_verify
  8455  0E18  00B2               	movwf	sys_data_init@ret
  8456  0E19  01B3               	clrf	sys_data_init@ret+1
  8457                           
  8458                           ;sysData.c: 92: if(!ret){
  8459  0E1A  0433               	iorwf	sys_data_init@ret+1,w
  8460  0E1B  1D03               	btfss	3,2
  8461  0E1C  0008               	return
  8462                           
  8463                           ;sysData.c: 93: sysData.pidSetFlg0=0xff;
  8464  0E1D  30FF               	movlw	255
  8465  0E1E  0022               	movlb	2	; select bank2
  8466  0E1F  00A0               	movwf	_sysData^(0+256)
  8467                           
  8468                           ;sysData.c: 94: sysData.pidSetFlg1=0xff;
  8469  0E20  00A1               	movwf	(_sysData^(0+256)+1)
  8470                           
  8471                           ;sysData.c: 95: sysData.id=0;
  8472  0E21  01A2               	clrf	(_sysData^(0+256)+2)
  8473                           
  8474                           ;sysData.c: 96: for(i=0;i<10;i++){
  8475  0E22  0020               	movlb	0	; select bank0
  8476  0E23  01B4               	clrf	sys_data_init@i
  8477  0E24  01B5               	clrf	sys_data_init@i+1
  8478  0E25                     l3992:	
  8479                           
  8480                           ;sysData.c: 97: sysData.calibSimuPowerVaule[i]=i*6553;
  8481  0E25  0835               	movf	sys_data_init@i+1,w
  8482  0E26  00F2               	movwf	___wmul@multiplier+1
  8483  0E27  0834               	movf	sys_data_init@i,w
  8484  0E28  00F1               	movwf	___wmul@multiplier
  8485  0E29  3099               	movlw	153
  8486  0E2A  00F3               	movwf	___wmul@multiplicand
  8487  0E2B  3019               	movlw	25
  8488  0E2C  00F4               	movwf	___wmul@multiplicand+1
  8489  0E2D  2656  318D         	fcall	___wmul
  8490  0E2F  3534               	lslf	sys_data_init@i,w
  8491  0E30  3E2A               	addlw	(low ((_sysData| (0+256)+10)))& (0+255)
  8492  0E31  27EE  318D         	fcall	PL18	;call to abstracted procedure
  8493                           
  8494                           ;sysData.c: 98: sysData.calibVoutAdcValue[i]=i*1200;
  8495  0E33  0835               	movf	sys_data_init@i+1,w
  8496  0E34  00F2               	movwf	___wmul@multiplier+1
  8497  0E35  0834               	movf	sys_data_init@i,w
  8498  0E36  00F1               	movwf	___wmul@multiplier
  8499  0E37  30B0               	movlw	176
  8500  0E38  00F3               	movwf	___wmul@multiplicand
  8501  0E39  3004               	movlw	4
  8502  0E3A  00F4               	movwf	___wmul@multiplicand+1
  8503  0E3B  2656  318D         	fcall	___wmul
  8504  0E3D  3534               	lslf	sys_data_init@i,w
  8505  0E3E  3E3E               	addlw	(low ((_sysData| (0+256)+30)))& (0+255)
  8506  0E3F  27EE  318D         	fcall	PL18	;call to abstracted procedure
  8507  0E41  0AB4               	incf	sys_data_init@i,f
  8508  0E42  1903               	skipnz
  8509  0E43  0AB5               	incf	sys_data_init@i+1,f
  8510  0E44  3000               	movlw	0
  8511  0E45  0235               	subwf	sys_data_init@i+1,w
  8512  0E46  300A               	movlw	10
  8513  0E47  1903               	skipnz
  8514  0E48  0234               	subwf	sys_data_init@i,w
  8515  0E49  1C03               	skipc
  8516  0E4A  2E25               	goto	l3992
  8517                           
  8518                           ;sysData.c: 99: }
  8519                           ;sysData.c: 100: crc_append((uint8_t*)&sysData,sizeof(sysData_t)-2);
  8520  0E4B  3032               	movlw	50
  8521  0E4C  00AB               	movwf	crc_append@n
  8522  0E4D  3020               	movlw	(low (_sysData| (0+256)))& (0+255)
  8523  0E4E  01AC               	clrf	crc_append@n+1
  8524  0E4F  266B  318D         	fcall	_crc_append
  8525                           
  8526                           ;sysData.c: 102: my_flash_read_system_erase();
  8527  0E51  2751  318D         	fcall	_my_flash_read_system_erase
  8528                           
  8529                           ;sysData.c: 103: my_flash_system_write((uint8_t*)&sysData,sizeof(sysData_t));
  8530  0E53  27FB  318D         	fcall	PL34	;call to abstracted procedure
  8531  0E55  2F74               	ljmp	_my_flash_system_write
  8532  0E56                     __end_of_sys_data_init:	
  8533  0E56                     __ptext13:	
  8534 ;; *************** function ___wmul *****************
  8535 ;; Defined at:
  8536 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  8537 ;; Parameters:    Size  Location     Type
  8538 ;;  multiplier      2    1[COMMON] unsigned int 
  8539 ;;  multiplicand    2    3[COMMON] unsigned int 
  8540 ;; Auto vars:     Size  Location     Type
  8541 ;;  product         2    5[COMMON] unsigned int 
  8542 ;; Return value:  Size  Location     Type
  8543 ;;                  2    1[COMMON] unsigned int 
  8544 ;; Registers used:
  8545 ;;		wreg, status,2, status,0
  8546 ;; Tracked objects:
  8547 ;;		On entry : 1F/0
  8548 ;;		On exit  : 1F/0
  8549 ;;		Unchanged: 1F/0
  8550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8551 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8552 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8554 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8555 ;;Total ram usage:        6 bytes
  8556 ;; Hardware stack levels used:    1
  8557 ;; Hardware stack levels required when called:    1
  8558 ;; This function calls:
  8559 ;;		Nothing
  8560 ;; This function is called by:
  8561 ;;		_sys_data_init
  8562 ;; This function uses a non-reentrant model
  8563 ;;
  8564                           
  8565                           
  8566                           ;psect for function ___wmul
  8567  0E56                     ___wmul:	
  8568                           
  8569                           ;incstack = 0
  8570                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8571  0E56  01F5               	clrf	___wmul@product
  8572  0E57  01F6               	clrf	___wmul@product+1
  8573  0E58                     l2960:	
  8574  0E58  1C71               	btfss	___wmul@multiplier,0
  8575  0E59  2E5E               	goto	l2964
  8576  0E5A  0873               	movf	___wmul@multiplicand,w
  8577  0E5B  07F5               	addwf	___wmul@product,f
  8578  0E5C  0874               	movf	___wmul@multiplicand+1,w
  8579  0E5D  3DF6               	addwfc	___wmul@product+1,f
  8580  0E5E                     l2964:	
  8581  0E5E  35F3               	lslf	___wmul@multiplicand,f
  8582  0E5F  0DF4               	rlf	___wmul@multiplicand+1,f
  8583  0E60  36F2               	lsrf	___wmul@multiplier+1,f
  8584  0E61  0CF1               	rrf	___wmul@multiplier,f
  8585  0E62  0871               	movf	___wmul@multiplier,w
  8586  0E63  0472               	iorwf	___wmul@multiplier+1,w
  8587  0E64  1D03               	btfss	3,2
  8588  0E65  2E58               	goto	l2960
  8589  0E66  0876               	movf	___wmul@product+1,w
  8590  0E67  00F2               	movwf	?___wmul+1
  8591  0E68  0875               	movf	___wmul@product,w
  8592  0E69  00F1               	movwf	?___wmul
  8593  0E6A  0008               	return
  8594  0E6B                     __end_of___wmul:	
  8595  0E6B                     __ptext10:	
  8596 ;; *************** function _crc_append *****************
  8597 ;; Defined at:
  8598 ;;		line 123 in file "src/depend/crc16.c"
  8599 ;; Parameters:    Size  Location     Type
  8600 ;;  message         1    wreg     PTR unsigned char 
  8601 ;;		 -> sysData(52), 
  8602 ;;  n               2   11[BANK0 ] unsigned int 
  8603 ;; Auto vars:     Size  Location     Type
  8604 ;;  message         1   15[BANK0 ] PTR unsigned char 
  8605 ;;		 -> sysData(52), 
  8606 ;;  crc             2   13[BANK0 ] unsigned int 
  8607 ;; Return value:  Size  Location     Type
  8608 ;;                  1    wreg      void 
  8609 ;; Registers used:
  8610 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8611 ;; Tracked objects:
  8612 ;;		On entry : 1F/0
  8613 ;;		On exit  : 1F/0
  8614 ;;		Unchanged: 0/0
  8615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8616 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8617 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8618 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8619 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8620 ;;Total ram usage:        6 bytes
  8621 ;; Hardware stack levels used:    1
  8622 ;; Hardware stack levels required when called:    3
  8623 ;; This function calls:
  8624 ;;		_crc_sum
  8625 ;; This function is called by:
  8626 ;;		_sys_data_init
  8627 ;;		_sys_data_save
  8628 ;; This function uses a non-reentrant model
  8629 ;;
  8630                           
  8631                           
  8632                           ;psect for function _crc_append
  8633  0E6B                     _crc_append:	
  8634                           
  8635                           ;incstack = 0
  8636                           ; Regs used in _crc_append: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8637                           ;crc_append@message stored from wreg
  8638  0E6B  00AF               	movwf	crc_append@message
  8639                           
  8640                           ;crc16.c: 125: uint16_t crc;
  8641                           ;crc16.c: 126: crc = crc_sum(message, n);
  8642  0E6C  082C               	movf	crc_append@n+1,w
  8643  0E6D  00FA               	movwf	crc_sum@len+1
  8644  0E6E  082B               	movf	crc_append@n,w
  8645  0E6F  00F9               	movwf	crc_sum@len
  8646  0E70  082F               	movf	crc_append@message,w
  8647  0E71  26A6               	fcall	_crc_sum
  8648  0E72  087A               	movf	?_crc_sum+1,w
  8649  0E73  00AE               	movwf	crc_append@crc+1
  8650  0E74  0879               	movf	?_crc_sum,w
  8651  0E75  00AD               	movwf	crc_append@crc
  8652                           
  8653                           ;crc16.c: 127: message[n] = (uint8_t)(crc & 0xff);
  8654  0E76  082B               	movf	crc_append@n,w
  8655  0E77  072F               	addwf	crc_append@message,w
  8656  0E78  00FB               	movwf	??_crc_append
  8657  0E79  0086               	movwf	6
  8658  0E7A  3001               	movlw	1	; select bank2/3
  8659  0E7B  0087               	movwf	7
  8660  0E7C  082D               	movf	crc_append@crc,w
  8661  0E7D  0081               	movwf	1
  8662                           
  8663                           ;crc16.c: 128: message[n+1] = (uint8_t)((crc >> 8) & 0xff);
  8664  0E7E  082B               	movf	crc_append@n,w
  8665  0E7F  072F               	addwf	crc_append@message,w
  8666  0E80  00FB               	movwf	??_crc_append
  8667  0E81  0A7B               	incf	??_crc_append,w
  8668  0E82  0086               	movwf	6
  8669  0E83  082E               	movf	crc_append@crc+1,w
  8670  0E84  0081               	movwf	1
  8671  0E85  0008               	return
  8672  0E86                     __end_of_crc_append:	
  8673  0E86                     __ptext8:	
  8674 ;; *************** function _crc_verify *****************
  8675 ;; Defined at:
  8676 ;;		line 115 in file "src/depend/crc16.c"
  8677 ;; Parameters:    Size  Location     Type
  8678 ;;  message         1    wreg     PTR unsigned char 
  8679 ;;		 -> sysData(52), 
  8680 ;;  n               2   11[BANK0 ] unsigned int 
  8681 ;; Auto vars:     Size  Location     Type
  8682 ;;  message         1   17[BANK0 ] PTR unsigned char 
  8683 ;;		 -> sysData(52), 
  8684 ;;  expected        2   15[BANK0 ] unsigned int 
  8685 ;;  crccal          2   13[BANK0 ] unsigned int 
  8686 ;; Return value:  Size  Location     Type
  8687 ;;                  1    wreg      unsigned char 
  8688 ;; Registers used:
  8689 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8690 ;; Tracked objects:
  8691 ;;		On entry : 1F/0
  8692 ;;		On exit  : 1F/0
  8693 ;;		Unchanged: 0/0
  8694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8695 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8696 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8698 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8699 ;;Total ram usage:        7 bytes
  8700 ;; Hardware stack levels used:    1
  8701 ;; Hardware stack levels required when called:    3
  8702 ;; This function calls:
  8703 ;;		_crc_sum
  8704 ;;		_m_mem_cpy_len
  8705 ;; This function is called by:
  8706 ;;		_sys_data_init
  8707 ;; This function uses a non-reentrant model
  8708 ;;
  8709                           
  8710                           
  8711                           ;psect for function _crc_verify
  8712  0E86                     _crc_verify:	
  8713                           
  8714                           ;incstack = 0
  8715                           ; Regs used in _crc_verify: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8716                           ;crc_verify@message stored from wreg
  8717  0E86  00B1               	movwf	crc_verify@message
  8718                           
  8719                           ;crc16.c: 117: uint16_t expected,crccal;
  8720                           ;crc16.c: 118: m_mem_cpy_len((uint8_t*)(&expected),(message+n-2),2);
  8721  0E87  072B               	addwf	crc_verify@n,w
  8722  0E88  3EFE               	addlw	-2
  8723  0E89  00F1               	movwf	m_mem_cpy_len@s
  8724  0E8A  3002               	movlw	2
  8725  0E8B  00F2               	movwf	m_mem_cpy_len@len
  8726  0E8C  302F               	movlw	(low (crc_verify@expected| 0))& (0+255)
  8727  0E8D  01F3               	clrf	m_mem_cpy_len@len+1
  8728  0E8E  270D  318D         	fcall	_m_mem_cpy_len
  8729                           
  8730                           ;crc16.c: 119: crccal=crc_sum(message,n - 2);
  8731  0E90  082B               	movf	crc_verify@n,w
  8732  0E91  3EFE               	addlw	254
  8733  0E92  00F9               	movwf	crc_sum@len
  8734  0E93  30FF               	movlw	255
  8735  0E94  3D2C               	addwfc	crc_verify@n+1,w
  8736  0E95  00FA               	movwf	crc_sum@len+1
  8737  0E96  0831               	movf	crc_verify@message,w
  8738  0E97  26A6  318D         	fcall	_crc_sum
  8739  0E99  087A               	movf	?_crc_sum+1,w
  8740  0E9A  00AE               	movwf	crc_verify@crccal+1
  8741  0E9B  0879               	movf	?_crc_sum,w
  8742  0E9C  00AD               	movwf	crc_verify@crccal
  8743                           
  8744                           ;crc16.c: 120: if(expected!=crccal)return 0;
  8745  0E9D  082E               	movf	crc_verify@crccal+1,w
  8746  0E9E  0630               	xorwf	crc_verify@expected+1,w
  8747  0E9F  1D03               	skipz
  8748  0EA0  2EA3               	goto	u2465
  8749  0EA1  082D               	movf	crc_verify@crccal,w
  8750  0EA2  062F               	xorwf	crc_verify@expected,w
  8751  0EA3                     u2465:	
  8752  0EA3  1D03               	btfss	3,2
  8753  0EA4  3400               	retlw	0
  8754                           
  8755                           ;crc16.c: 121: return 1;
  8756  0EA5  3401               	retlw	1
  8757  0EA6                     __end_of_crc_verify:	
  8758  0EA6                     __ptext11:	
  8759 ;; *************** function _crc_sum *****************
  8760 ;; Defined at:
  8761 ;;		line 97 in file "src/depend/crc16.c"
  8762 ;; Parameters:    Size  Location     Type
  8763 ;;  message         1    wreg     PTR unsigned char 
  8764 ;;		 -> sysData(52), 
  8765 ;;  len             2    9[COMMON] unsigned int 
  8766 ;; Auto vars:     Size  Location     Type
  8767 ;;  message         1    4[BANK0 ] PTR unsigned char 
  8768 ;;		 -> sysData(52), 
  8769 ;;  crc             2    9[BANK0 ] unsigned int 
  8770 ;;  i               2    7[BANK0 ] unsigned int 
  8771 ;;  polynomial      2    2[BANK0 ] unsigned int 
  8772 ;; Return value:  Size  Location     Type
  8773 ;;                  2    9[COMMON] unsigned int 
  8774 ;; Registers used:
  8775 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8776 ;; Tracked objects:
  8777 ;;		On entry : 1F/0
  8778 ;;		On exit  : 1F/0
  8779 ;;		Unchanged: 0/0
  8780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8781 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8782 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8783 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8784 ;;      Totals:         2      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8785 ;;Total ram usage:       13 bytes
  8786 ;; Hardware stack levels used:    1
  8787 ;; Hardware stack levels required when called:    2
  8788 ;; This function calls:
  8789 ;;		_calc_crc_w
  8790 ;; This function is called by:
  8791 ;;		_crc_verify
  8792 ;;		_crc_append
  8793 ;; This function uses a non-reentrant model
  8794 ;;
  8795                           
  8796                           
  8797                           ;psect for function _crc_sum
  8798  0EA6                     _crc_sum:	
  8799                           
  8800                           ;incstack = 0
  8801                           ; Regs used in _crc_sum: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8802                           ;crc_sum@message stored from wreg
  8803  0EA6  00A4               	movwf	crc_sum@message
  8804                           
  8805                           ;crc16.c: 99: uint16_t i;
  8806                           ;crc16.c: 100: uint16_t crc;
  8807                           ;crc16.c: 101: uint16_t polynomial;
  8808                           ;crc16.c: 103: polynomial=0xa001;
  8809  0EA7  3001               	movlw	1
  8810  0EA8  00A2               	movwf	crc_sum@polynomial
  8811  0EA9  30A0               	movlw	160
  8812  0EAA  00A3               	movwf	crc_sum@polynomial+1
  8813                           
  8814                           ;crc16.c: 105: crc=0xffff;
  8815  0EAB  30FF               	movlw	255
  8816  0EAC  00A9               	movwf	crc_sum@crc
  8817  0EAD  00AA               	movwf	crc_sum@crc+1
  8818                           
  8819                           ;crc16.c: 106: for(i=0;i<len;i++){
  8820  0EAE  01A7               	clrf	crc_sum@i
  8821  0EAF  01A8               	clrf	crc_sum@i+1
  8822  0EB0                     l3676:	
  8823  0EB0  087A               	movf	crc_sum@len+1,w
  8824  0EB1  0228               	subwf	crc_sum@i+1,w
  8825  0EB2  1D03               	skipz
  8826  0EB3  2EB6               	goto	u2435
  8827  0EB4  0879               	movf	crc_sum@len,w
  8828  0EB5  0227               	subwf	crc_sum@i,w
  8829  0EB6                     u2435:	
  8830  0EB6  1803               	btfsc	3,0
  8831  0EB7  2ED2               	goto	l3678
  8832                           
  8833                           ;crc16.c: 107: crc=calc_crc_w(crc,message[i],polynomial);
  8834  0EB8  082A               	movf	crc_sum@crc+1,w
  8835  0EB9  00F2               	movwf	calc_crc_w@crc+1
  8836  0EBA  0829               	movf	crc_sum@crc,w
  8837  0EBB  00F1               	movwf	calc_crc_w@crc
  8838  0EBC  0827               	movf	crc_sum@i,w
  8839  0EBD  0724               	addwf	crc_sum@message,w
  8840  0EBE  00A0               	movwf	??_crc_sum
  8841  0EBF  0086               	movwf	6
  8842  0EC0  3001               	movlw	1	; select bank2/3
  8843  0EC1  0087               	movwf	7
  8844  0EC2  0801               	movf	1,w
  8845  0EC3  00F3               	movwf	calc_crc_w@b
  8846  0EC4  0823               	movf	crc_sum@polynomial+1,w
  8847  0EC5  00F5               	movwf	calc_crc_w@polynomial+1
  8848  0EC6  0822               	movf	crc_sum@polynomial,w
  8849  0EC7  00F4               	movwf	calc_crc_w@polynomial
  8850  0EC8  26EE  318D         	fcall	_calc_crc_w
  8851  0ECA  0872               	movf	?_calc_crc_w+1,w
  8852  0ECB  00AA               	movwf	crc_sum@crc+1
  8853  0ECC  0871               	movf	?_calc_crc_w,w
  8854  0ECD  00A9               	movwf	crc_sum@crc
  8855  0ECE  0AA7               	incf	crc_sum@i,f
  8856  0ECF  1903               	skipnz
  8857  0ED0  0AA8               	incf	crc_sum@i+1,f
  8858  0ED1  2EB0               	goto	l3676
  8859  0ED2                     l3678:	
  8860                           
  8861                           ;crc16.c: 108: }
  8862                           ;crc16.c: 110: i=(crc<<8)&&0xff00;
  8863  0ED2  01A5               	clrf	_crc_sum$1661
  8864  0ED3  0829               	movf	crc_sum@crc,w
  8865  0ED4  00A1               	movwf	??_crc_sum+1
  8866  0ED5  01A0               	clrf	??_crc_sum
  8867  0ED6  0420               	iorwf	??_crc_sum,w
  8868  0ED7  1903               	btfsc	3,2
  8869  0ED8  2EDB               	goto	l3684
  8870  0ED9  01A5               	clrf	_crc_sum$1661
  8871  0EDA  0AA5               	incf	_crc_sum$1661,f
  8872  0EDB                     l3684:	
  8873  0EDB  0825               	movf	_crc_sum$1661,w
  8874  0EDC  00A7               	movwf	crc_sum@i
  8875  0EDD  01A8               	clrf	crc_sum@i+1
  8876                           
  8877                           ;crc16.c: 111: crc=(crc>>8)&&0x00ff;
  8878  0EDE  01A6               	clrf	_crc_sum$1662
  8879  0EDF  082A               	movf	crc_sum@crc+1,w
  8880  0EE0  1903               	btfsc	3,2
  8881  0EE1  2EE4               	goto	l3692
  8882  0EE2  01A6               	clrf	_crc_sum$1662
  8883  0EE3  0AA6               	incf	_crc_sum$1662,f
  8884  0EE4                     l3692:	
  8885  0EE4  0826               	movf	_crc_sum$1662,w
  8886  0EE5  00A9               	movwf	crc_sum@crc
  8887  0EE6  01AA               	clrf	crc_sum@crc+1
  8888                           
  8889                           ;crc16.c: 112: return crc+i;
  8890  0EE7  0827               	movf	crc_sum@i,w
  8891  0EE8  0729               	addwf	crc_sum@crc,w
  8892  0EE9  00F9               	movwf	?_crc_sum
  8893  0EEA  0828               	movf	crc_sum@i+1,w
  8894  0EEB  3D2A               	addwfc	crc_sum@crc+1,w
  8895  0EEC  00FA               	movwf	?_crc_sum+1
  8896  0EED  0008               	return
  8897  0EEE                     __end_of_crc_sum:	
  8898  0EEE                     __ptext12:	
  8899 ;; *************** function _calc_crc_w *****************
  8900 ;; Defined at:
  8901 ;;		line 82 in file "src/depend/crc16.c"
  8902 ;; Parameters:    Size  Location     Type
  8903 ;;  crc             2    1[COMMON] unsigned int 
  8904 ;;  b               1    3[COMMON] unsigned char 
  8905 ;;  polynomial      2    4[COMMON] unsigned int 
  8906 ;; Auto vars:     Size  Location     Type
  8907 ;;  i               2    7[COMMON] unsigned int 
  8908 ;; Return value:  Size  Location     Type
  8909 ;;                  2    1[COMMON] unsigned int 
  8910 ;; Registers used:
  8911 ;;		wreg, status,2, status,0
  8912 ;; Tracked objects:
  8913 ;;		On entry : 1F/0
  8914 ;;		On exit  : 1F/0
  8915 ;;		Unchanged: 1F/0
  8916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8917 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8918 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8919 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8920 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8921 ;;Total ram usage:        8 bytes
  8922 ;; Hardware stack levels used:    1
  8923 ;; Hardware stack levels required when called:    1
  8924 ;; This function calls:
  8925 ;;		Nothing
  8926 ;; This function is called by:
  8927 ;;		_crc_sum
  8928 ;; This function uses a non-reentrant model
  8929 ;;
  8930                           
  8931                           
  8932                           ;psect for function _calc_crc_w
  8933  0EEE                     _calc_crc_w:	
  8934                           
  8935                           ;crc16.c: 84: uint16_t i;
  8936                           ;crc16.c: 85: for(i=0;i<8;i++){
  8937                           
  8938                           ;incstack = 0
  8939                           ; Regs used in _calc_crc_w: [wreg+status,2+status,0]
  8940  0EEE  01F7               	clrf	calc_crc_w@i
  8941  0EEF  01F8               	clrf	calc_crc_w@i+1
  8942  0EF0                     l2578:	
  8943                           
  8944                           ;crc16.c: 86: if((((crc & 0x8000) >> 8) ^ (b & 0x80))!=0){
  8945  0EF0  3080               	movlw	128
  8946  0EF1  0573               	andwf	calc_crc_w@b,w
  8947  0EF2  00F6               	movwf	??_calc_crc_w
  8948  0EF3  0872               	movf	calc_crc_w@crc+1,w
  8949  0EF4  3980               	andlw	128
  8950  0EF5  0676               	xorwf	??_calc_crc_w,w
  8951  0EF6  1903               	btfsc	3,2
  8952  0EF7  2EFF               	goto	l2584
  8953                           
  8954                           ;crc16.c: 87: crc <<= 1;
  8955  0EF8  35F1               	lslf	calc_crc_w@crc,f
  8956  0EF9  0DF2               	rlf	calc_crc_w@crc+1,f
  8957                           
  8958                           ;crc16.c: 88: crc ^= polynomial;
  8959  0EFA  0874               	movf	calc_crc_w@polynomial,w
  8960  0EFB  06F1               	xorwf	calc_crc_w@crc,f
  8961  0EFC  0875               	movf	calc_crc_w@polynomial+1,w
  8962  0EFD  06F2               	xorwf	calc_crc_w@crc+1,f
  8963                           
  8964                           ;crc16.c: 89: }else{
  8965  0EFE  2F01               	goto	l2586
  8966  0EFF                     l2584:	
  8967                           
  8968                           ;crc16.c: 90: crc <<=1;
  8969  0EFF  35F1               	lslf	calc_crc_w@crc,f
  8970  0F00  0DF2               	rlf	calc_crc_w@crc+1,f
  8971  0F01                     l2586:	
  8972                           
  8973                           ;crc16.c: 91: }
  8974                           ;crc16.c: 92: b <<= 1;
  8975  0F01  35F3               	lslf	calc_crc_w@b,f
  8976  0F02  0AF7               	incf	calc_crc_w@i,f
  8977  0F03  1903               	skipnz
  8978  0F04  0AF8               	incf	calc_crc_w@i+1,f
  8979  0F05  3000               	movlw	0
  8980  0F06  0278               	subwf	calc_crc_w@i+1,w
  8981  0F07  3008               	movlw	8
  8982  0F08  1903               	skipnz
  8983  0F09  0277               	subwf	calc_crc_w@i,w
  8984  0F0A  1803               	btfsc	3,0
  8985  0F0B  0008               	return
  8986  0F0C  2EF0               	goto	l2578
  8987  0F0D                     __end_of_calc_crc_w:	
  8988                           ;crc16.c: 93: }
  8989                           ;crc16.c: 94: return crc;
  8990                           
  8991  0F0D                     __ptext9:	
  8992 ;; *************** function _m_mem_cpy_len *****************
  8993 ;; Defined at:
  8994 ;;		line 47 in file "src/depend/m_string.c"
  8995 ;; Parameters:    Size  Location     Type
  8996 ;;  d               1    wreg     PTR unsigned char 
  8997 ;;		 -> crc_verify@expected(2), 
  8998 ;;  s               1    1[COMMON] PTR unsigned char 
  8999 ;;		 -> sysData(52), 
  9000 ;;  len             2    2[COMMON] unsigned int 
  9001 ;; Auto vars:     Size  Location     Type
  9002 ;;  d               1    4[COMMON] PTR unsigned char 
  9003 ;;		 -> crc_verify@expected(2), 
  9004 ;; Return value:  Size  Location     Type
  9005 ;;                  1    wreg      void 
  9006 ;; Registers used:
  9007 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  9008 ;; Tracked objects:
  9009 ;;		On entry : 1F/0
  9010 ;;		On exit  : 1F/0
  9011 ;;		Unchanged: 1F/0
  9012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9013 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9014 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9016 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9017 ;;Total ram usage:        4 bytes
  9018 ;; Hardware stack levels used:    1
  9019 ;; Hardware stack levels required when called:    1
  9020 ;; This function calls:
  9021 ;;		Nothing
  9022 ;; This function is called by:
  9023 ;;		_crc_verify
  9024 ;; This function uses a non-reentrant model
  9025 ;;
  9026                           
  9027                           
  9028                           ;psect for function _m_mem_cpy_len
  9029  0F0D                     _m_mem_cpy_len:	
  9030                           
  9031                           ;incstack = 0
  9032                           ; Regs used in _m_mem_cpy_len: [wreg-fsr1h+status,2+status,0]
  9033                           ;m_mem_cpy_len@d stored from wreg
  9034  0F0D  00F4               	movwf	m_mem_cpy_len@d
  9035  0F0E                     l2638:	
  9036                           ;m_string.c: 50: while(len)
  9037                           
  9038  0F0E  0872               	movf	m_mem_cpy_len@len,w
  9039  0F0F  0473               	iorwf	m_mem_cpy_len@len+1,w
  9040  0F10  1903               	btfsc	3,2
  9041  0F11  0008               	return
  9042                           
  9043                           ;m_string.c: 51: {
  9044                           ;m_string.c: 52: *d++=*s++;
  9045  0F12  0874               	movf	m_mem_cpy_len@d,w
  9046  0F13  0086               	movwf	6
  9047  0F14  0187               	clrf	7
  9048  0F15  0871               	movf	m_mem_cpy_len@s,w
  9049  0F16  0084               	movwf	4
  9050  0F17  3001               	movlw	1	; select bank2/3
  9051  0F18  0085               	movwf	5
  9052  0F19  0800               	movf	0,w
  9053  0F1A  0081               	movwf	1
  9054  0F1B  3001               	movlw	1
  9055  0F1C  0AF1               	incf	m_mem_cpy_len@s,f
  9056  0F1D  0AF4               	incf	m_mem_cpy_len@d,f
  9057                           
  9058                           ;m_string.c: 53: len--;
  9059  0F1E  02F2               	subwf	m_mem_cpy_len@len,f
  9060  0F1F  3000               	movlw	0
  9061  0F20  3BF3               	subwfb	m_mem_cpy_len@len+1,f
  9062  0F21  2F0E               	goto	l2638
  9063  0F22                     __end_of_m_mem_cpy_len:	
  9064  0F22                     __ptext5:	
  9065 ;; *************** function _my_flash_system_read *****************
  9066 ;; Defined at:
  9067 ;;		line 14 in file "src/api/sysData.c"
  9068 ;; Parameters:    Size  Location     Type
  9069 ;;  buf             1    wreg     PTR unsigned char 
  9070 ;;		 -> sysData(52), 
  9071 ;;  len             2    1[COMMON] unsigned int 
  9072 ;; Auto vars:     Size  Location     Type
  9073 ;;  buf             1    5[COMMON] PTR unsigned char 
  9074 ;;		 -> sysData(52), 
  9075 ;;  flashAddr       2    8[COMMON] unsigned int 
  9076 ;;  i               2    6[COMMON] unsigned int 
  9077 ;;  GIEBitValue     1    4[COMMON] unsigned char 
  9078 ;; Return value:  Size  Location     Type
  9079 ;;                  1    wreg      void 
  9080 ;; Registers used:
  9081 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9082 ;; Tracked objects:
  9083 ;;		On entry : 1F/1B
  9084 ;;		On exit  : 7/3
  9085 ;;		Unchanged: 0/0
  9086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9087 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9088 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9089 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9090 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9091 ;;Total ram usage:        9 bytes
  9092 ;; Hardware stack levels used:    1
  9093 ;; Hardware stack levels required when called:    1
  9094 ;; This function calls:
  9095 ;;		Nothing
  9096 ;; This function is called by:
  9097 ;;		_sys_data_init
  9098 ;; This function uses a non-reentrant model
  9099 ;;
  9100                           
  9101                           
  9102                           ;psect for function _my_flash_system_read
  9103  0F22                     _my_flash_system_read:	
  9104                           
  9105                           ;incstack = 0
  9106                           ; Regs used in _my_flash_system_read: [wreg+fsr1l+fsr1h+status,2+status,0]
  9107                           ;my_flash_system_read@buf stored from wreg
  9108  0F22  00F5               	movwf	my_flash_system_read@buf
  9109                           
  9110                           ;sysData.c: 16: uint16_t flashAddr=0x1f80;
  9111  0F23  3080               	movlw	128
  9112  0F24  00F8               	movwf	my_flash_system_read@flashAddr
  9113  0F25  301F               	movlw	31
  9114  0F26  00F9               	movwf	my_flash_system_read@flashAddr+1
  9115                           
  9116                           ;sysData.c: 17: uint16_t i;
  9117                           ;sysData.c: 19: uint8_t GIEBitValue = INTCONbits.GIE;
  9118  0F27  3000               	movlw	0
  9119  0F28  1B8B               	btfsc	11,7	;volatile
  9120  0F29  3001               	movlw	1
  9121  0F2A  00F4               	movwf	my_flash_system_read@GIEBitValue
  9122                           
  9123                           ;sysData.c: 21: INTCONbits.GIE = 0;
  9124  0F2B  138B               	bcf	11,7	;volatile
  9125                           
  9126                           ;sysData.c: 23: for(i=0;i<len;i++){
  9127  0F2C  01F6               	clrf	my_flash_system_read@i
  9128  0F2D  01F7               	clrf	my_flash_system_read@i+1
  9129  0F2E                     l2856:	
  9130  0F2E  0872               	movf	my_flash_system_read@len+1,w
  9131  0F2F  0277               	subwf	my_flash_system_read@i+1,w
  9132  0F30  1D03               	skipz
  9133  0F31  2F34               	goto	u1355
  9134  0F32  0871               	movf	my_flash_system_read@len,w
  9135  0F33  0276               	subwf	my_flash_system_read@i,w
  9136  0F34                     u1355:	
  9137  0F34  1803               	btfsc	3,0
  9138  0F35  2F4F               	goto	l2858
  9139                           
  9140                           ;sysData.c: 25: PMADRL = (flashAddr & 0x00FF);
  9141  0F36  0878               	movf	my_flash_system_read@flashAddr,w
  9142  0F37  0023               	movlb	3	; select bank3
  9143  0F38  0091               	movwf	17	;volatile
  9144                           
  9145                           ;sysData.c: 26: PMADRH = ((flashAddr & 0xFF00) >> 8);
  9146  0F39  0879               	movf	my_flash_system_read@flashAddr+1,w
  9147  0F3A  0092               	movwf	18	;volatile
  9148                           
  9149                           ;sysData.c: 28: PMCON1bits.CFGS = 0;
  9150  0F3B  1315               	bcf	21,6	;volatile
  9151                           
  9152                           ;sysData.c: 29: PMCON1bits.RD = 1;
  9153  0F3C  1415               	bsf	21,0	;volatile
  9154                           
  9155                           ;sysData.c: 30: __nop();
  9156  0F3D  0000               	nop
  9157                           
  9158                           ;sysData.c: 31: __nop();
  9159  0F3E  0000               	nop
  9160                           
  9161                           ;sysData.c: 32: buf[i]=PMDATL;
  9162  0F3F  0876               	movf	my_flash_system_read@i,w
  9163  0F40  0775               	addwf	my_flash_system_read@buf,w
  9164  0F41  00F3               	movwf	??_my_flash_system_read
  9165  0F42  0086               	movwf	6
  9166  0F43  3001               	movlw	1	; select bank2/3
  9167  0F44  0087               	movwf	7
  9168  0F45  0023               	movlb	3	; select bank3
  9169  0F46  0813               	movf	19,w	;volatile
  9170  0F47  0081               	movwf	1
  9171                           
  9172                           ;sysData.c: 33: flashAddr++;
  9173  0F48  0AF8               	incf	my_flash_system_read@flashAddr,f
  9174  0F49  1903               	skipnz
  9175  0F4A  0AF9               	incf	my_flash_system_read@flashAddr+1,f
  9176  0F4B  0AF6               	incf	my_flash_system_read@i,f
  9177  0F4C  1903               	skipnz
  9178  0F4D  0AF7               	incf	my_flash_system_read@i+1,f
  9179  0F4E  2F2E               	goto	l2856
  9180  0F4F                     l2858:	
  9181                           
  9182                           ;sysData.c: 34: }
  9183                           ;sysData.c: 35: INTCONbits.GIE = GIEBitValue;
  9184  0F4F  0C74               	rrf	my_flash_system_read@GIEBitValue,w
  9185  0F50  2FF6               	ljmp	PL20	;call to abstracted procedure
  9186  0F51                     __end_of_my_flash_system_read:	
  9187  0F51                     __ptext6:	
  9188 ;; *************** function _my_flash_read_system_erase *****************
  9189 ;; Defined at:
  9190 ;;		line 8 in file "src/api/sysData.c"
  9191 ;; Parameters:    Size  Location     Type
  9192 ;;		None
  9193 ;; Auto vars:     Size  Location     Type
  9194 ;;		None
  9195 ;; Return value:  Size  Location     Type
  9196 ;;                  1    wreg      void 
  9197 ;; Registers used:
  9198 ;;		wreg, status,2, status,0, pclath, cstack
  9199 ;; Tracked objects:
  9200 ;;		On entry : 1F/0
  9201 ;;		On exit  : 1F/3
  9202 ;;		Unchanged: 0/0
  9203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9207 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9208 ;;Total ram usage:        0 bytes
  9209 ;; Hardware stack levels used:    1
  9210 ;; Hardware stack levels required when called:    2
  9211 ;; This function calls:
  9212 ;;		_FLASH_EraseBlock
  9213 ;; This function is called by:
  9214 ;;		_sys_data_init
  9215 ;;		_sys_data_save
  9216 ;; This function uses a non-reentrant model
  9217 ;;
  9218                           
  9219                           
  9220                           ;psect for function _my_flash_read_system_erase
  9221  0F51                     _my_flash_read_system_erase:	
  9222                           
  9223                           ;sysData.c: 10: FLASH_EraseBlock(0x1f80);
  9224                           
  9225                           ;incstack = 0
  9226                           ; Regs used in _my_flash_read_system_erase: [wreg+status,2+status,0+pclath+cstack]
  9227  0F51  3080               	movlw	128
  9228  0F52  00F1               	movwf	FLASH_EraseBlock@startAddr
  9229  0F53  301F               	movlw	31
  9230  0F54  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  9231  0F55  275C  318D         	fcall	_FLASH_EraseBlock
  9232                           
  9233                           ;sysData.c: 11: FLASH_EraseBlock(0x1f80+32);
  9234  0F57  30A0               	movlw	160
  9235  0F58  00F1               	movwf	FLASH_EraseBlock@startAddr
  9236  0F59  301F               	movlw	31
  9237  0F5A  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  9238  0F5B  2F5C               	ljmp	l2590
  9239  0F5C                     __end_of_my_flash_read_system_erase:	
  9240  0F5C                     __ptext7:	
  9241 ;; *************** function _FLASH_EraseBlock *****************
  9242 ;; Defined at:
  9243 ;;		line 147 in file "mcc_generated_files/memory.c"
  9244 ;; Parameters:    Size  Location     Type
  9245 ;;  startAddr       2    1[COMMON] unsigned int 
  9246 ;; Auto vars:     Size  Location     Type
  9247 ;;  GIEBitValue     1    3[COMMON] unsigned char 
  9248 ;; Return value:  Size  Location     Type
  9249 ;;                  1    wreg      void 
  9250 ;; Registers used:
  9251 ;;		wreg, status,2, status,0
  9252 ;; Tracked objects:
  9253 ;;		On entry : 1C/0
  9254 ;;		On exit  : 1F/3
  9255 ;;		Unchanged: 0/0
  9256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9257 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9258 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9260 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9261 ;;Total ram usage:        3 bytes
  9262 ;; Hardware stack levels used:    1
  9263 ;; Hardware stack levels required when called:    1
  9264 ;; This function calls:
  9265 ;;		Nothing
  9266 ;; This function is called by:
  9267 ;;		_my_flash_read_system_erase
  9268 ;; This function uses a non-reentrant model
  9269 ;;
  9270                           
  9271                           
  9272                           ;psect for function _FLASH_EraseBlock
  9273  0F5C                     _FLASH_EraseBlock:	
  9274  0F5C                     l2590:	
  9275                           ;incstack = 0
  9276                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  9277                           
  9278                           
  9279                           ;memory.c: 149: uint8_t GIEBitValue = INTCONbits.GIE;
  9280  0F5C  3000               	movlw	0
  9281  0F5D  1B8B               	btfsc	11,7	;volatile
  9282  0F5E  3001               	movlw	1
  9283  0F5F  00F3               	movwf	FLASH_EraseBlock@GIEBitValue
  9284                           
  9285                           ;memory.c: 152: INTCONbits.GIE = 0;
  9286  0F60  138B               	bcf	11,7	;volatile
  9287                           
  9288                           ;memory.c: 154: PMADRL = (startAddr & 0xFF);
  9289  0F61  0871               	movf	FLASH_EraseBlock@startAddr,w
  9290  0F62  0023               	movlb	3	; select bank3
  9291  0F63  0091               	movwf	17	;volatile
  9292                           
  9293                           ;memory.c: 156: PMADRH = ((startAddr & 0xFF00) >> 8);
  9294  0F64  0872               	movf	FLASH_EraseBlock@startAddr+1,w
  9295  0F65  0092               	movwf	18	;volatile
  9296                           
  9297                           ;memory.c: 159: PMCON1bits.CFGS = 0;
  9298  0F66  1315               	bcf	21,6	;volatile
  9299                           
  9300                           ;memory.c: 160: PMCON1bits.FREE = 1;
  9301  0F67  1615               	bsf	21,4	;volatile
  9302                           
  9303                           ;memory.c: 161: PMCON1bits.WREN = 1;
  9304  0F68  1515               	bsf	21,2	;volatile
  9305                           
  9306                           ;memory.c: 164: PMCON2 = 0x55;
  9307  0F69  3055               	movlw	85
  9308  0F6A  0096               	movwf	22	;volsfr
  9309                           
  9310                           ;memory.c: 165: PMCON2 = 0xAA;
  9311  0F6B  30AA               	movlw	170
  9312  0F6C  0096               	movwf	22	;volsfr
  9313                           
  9314                           ;memory.c: 166: PMCON1bits.WR = 1;
  9315  0F6D  1495               	bsf	21,1	;volatile
  9316                           
  9317                           ;memory.c: 167: __nop();
  9318  0F6E  0000               	nop
  9319                           
  9320                           ;memory.c: 168: __nop();
  9321  0F6F  0000               	nop
  9322                           
  9323                           ;memory.c: 170: PMCON1bits.WREN = 0;
  9324  0F70  0023               	movlb	3	; select bank3
  9325  0F71  1115               	bcf	21,2	;volatile
  9326                           
  9327                           ;memory.c: 171: INTCONbits.GIE = GIEBitValue;
  9328  0F72  0C73               	rrf	FLASH_EraseBlock@GIEBitValue,w
  9329  0F73  2FF6               	ljmp	PL20	;call to abstracted procedure
  9330  0F74                     __end_of_FLASH_EraseBlock:	
  9331  0F74                     __ptext4:	
  9332 ;; *************** function _my_flash_system_write *****************
  9333 ;; Defined at:
  9334 ;;		line 38 in file "src/api/sysData.c"
  9335 ;; Parameters:    Size  Location     Type
  9336 ;;  buf             1    wreg     PTR unsigned char 
  9337 ;;		 -> sysData(52), 
  9338 ;;  len             2    1[COMMON] unsigned int 
  9339 ;; Auto vars:     Size  Location     Type
  9340 ;;  buf             1    5[BANK0 ] PTR unsigned char 
  9341 ;;		 -> sysData(52), 
  9342 ;;  i               2   10[BANK0 ] unsigned int 
  9343 ;;  flashAddr       2    8[BANK0 ] unsigned int 
  9344 ;;  loc             2    6[BANK0 ] unsigned int 
  9345 ;;  blocNum         2    3[BANK0 ] unsigned int 
  9346 ;;  j               2    0[BANK0 ] unsigned int 
  9347 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
  9348 ;; Return value:  Size  Location     Type
  9349 ;;                  2    1[COMMON] unsigned int 
  9350 ;; Registers used:
  9351 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9352 ;; Tracked objects:
  9353 ;;		On entry : 1F/3
  9354 ;;		On exit  : 1F/0
  9355 ;;		Unchanged: 0/0
  9356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9357 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9358 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9359 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9360 ;;      Totals:         3      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9361 ;;Total ram usage:       15 bytes
  9362 ;; Hardware stack levels used:    1
  9363 ;; Hardware stack levels required when called:    1
  9364 ;; This function calls:
  9365 ;;		Nothing
  9366 ;; This function is called by:
  9367 ;;		_sys_data_init
  9368 ;;		_sys_data_save
  9369 ;; This function uses a non-reentrant model
  9370 ;;
  9371                           
  9372                           
  9373                           ;psect for function _my_flash_system_write
  9374  0F74                     _my_flash_system_write:	
  9375                           
  9376                           ;incstack = 0
  9377                           ; Regs used in _my_flash_system_write: [wreg+fsr1l+fsr1h+status,2+status,0]
  9378                           ;my_flash_system_write@buf stored from wreg
  9379  0F74  0020               	movlb	0	; select bank0
  9380  0F75  00A5               	movwf	my_flash_system_write@buf
  9381  0F76  3080               	movlw	128
  9382                           
  9383                           ;sysData.c: 41: uint16_t loc,j,i=0;
  9384  0F77  01AA               	clrf	my_flash_system_write@i
  9385  0F78  01AB               	clrf	my_flash_system_write@i+1
  9386                           
  9387                           ;sysData.c: 42: uint16_t flashAddr=0x1f80;
  9388  0F79  00A8               	movwf	my_flash_system_write@flashAddr
  9389  0F7A  301F               	movlw	31
  9390  0F7B  00A9               	movwf	my_flash_system_write@flashAddr+1
  9391                           
  9392                           ;sysData.c: 43: uint8_t GIEBitValue=INTCONbits.GIE;
  9393  0F7C  3000               	movlw	0
  9394  0F7D  1B8B               	btfsc	11,7	;volatile
  9395  0F7E  3001               	movlw	1
  9396  0F7F  00A2               	movwf	my_flash_system_write@GIEBitValue
  9397                           
  9398                           ;sysData.c: 45: blocNum=len/32;
  9399  0F80  0872               	movf	my_flash_system_write@len+1,w
  9400  0F81  00A4               	movwf	my_flash_system_write@blocNum+1
  9401  0F82  0871               	movf	my_flash_system_write@len,w
  9402  0F83  00A3               	movwf	my_flash_system_write@blocNum
  9403  0F84  3005               	movlw	5
  9404  0F85                     u1365:	
  9405  0F85  36A4               	lsrf	my_flash_system_write@blocNum+1,f
  9406  0F86  0CA3               	rrf	my_flash_system_write@blocNum,f
  9407  0F87  0B89               	decfsz	9,f
  9408  0F88  2F85               	goto	u1365
  9409                           
  9410                           ;sysData.c: 46: if(len%32)blocNum++;
  9411  0F89  0871               	movf	my_flash_system_write@len,w
  9412  0F8A  391F               	andlw	31
  9413  0F8B  1903               	btfsc	3,2
  9414  0F8C  2F90               	goto	l2872
  9415  0F8D  0AA3               	incf	my_flash_system_write@blocNum,f
  9416  0F8E  1903               	skipnz
  9417  0F8F  0AA4               	incf	my_flash_system_write@blocNum+1,f
  9418  0F90                     l2872:	
  9419                           
  9420                           ;sysData.c: 48: INTCONbits.GIE = 0;
  9421  0F90  138B               	bcf	11,7	;volatile
  9422                           
  9423                           ;sysData.c: 49: loc=0;
  9424  0F91  01A6               	clrf	my_flash_system_write@loc
  9425  0F92  01A7               	clrf	my_flash_system_write@loc+1
  9426                           
  9427                           ;sysData.c: 50: for(j=0;j<blocNum;j++){
  9428  0F93  01A0               	clrf	my_flash_system_write@j
  9429  0F94  01A1               	clrf	my_flash_system_write@j+1
  9430  0F95                     l2912:	
  9431  0F95  0824               	movf	my_flash_system_write@blocNum+1,w
  9432  0F96  0221               	subwf	my_flash_system_write@j+1,w
  9433  0F97  1D03               	skipz
  9434  0F98  2F9B               	goto	u1415
  9435  0F99  0823               	movf	my_flash_system_write@blocNum,w
  9436  0F9A  0220               	subwf	my_flash_system_write@j,w
  9437  0F9B                     u1415:	
  9438  0F9B  1803               	btfsc	3,0
  9439  0F9C  2FEC               	goto	l2914
  9440                           
  9441                           ;sysData.c: 51: PMCON1bits.CFGS = 0;
  9442  0F9D  0023               	movlb	3	; select bank3
  9443  0F9E  1315               	bcf	21,6	;volatile
  9444                           
  9445                           ;sysData.c: 52: PMCON1bits.WREN = 1;
  9446  0F9F  1515               	bsf	21,2	;volatile
  9447                           
  9448                           ;sysData.c: 53: PMCON1bits.LWLO = 1;
  9449  0FA0  1695               	bsf	21,5	;volatile
  9450                           
  9451                           ;sysData.c: 55: for(i=0;i<32;i++){
  9452  0FA1  0020               	movlb	0	; select bank0
  9453  0FA2  01AA               	clrf	my_flash_system_write@i
  9454  0FA3  01AB               	clrf	my_flash_system_write@i+1
  9455  0FA4                     l2884:	
  9456                           
  9457                           ;sysData.c: 57: PMADRL = (flashAddr & 0xFF);
  9458  0FA4  0828               	movf	my_flash_system_write@flashAddr,w
  9459  0FA5  0023               	movlb	3	; select bank3
  9460  0FA6  0091               	movwf	17	;volatile
  9461                           
  9462                           ;sysData.c: 59: PMADRH = ((flashAddr & 0xFF00) >> 8);
  9463  0FA7  0020               	movlb	0	; select bank0
  9464  0FA8  0829               	movf	my_flash_system_write@flashAddr+1,w
  9465  0FA9  0023               	movlb	3	; select bank3
  9466  0FAA  0092               	movwf	18	;volatile
  9467                           
  9468                           ;sysData.c: 62: if(loc<len){
  9469  0FAB  0872               	movf	my_flash_system_write@len+1,w
  9470  0FAC  0020               	movlb	0	; select bank0
  9471  0FAD  0227               	subwf	my_flash_system_write@loc+1,w
  9472  0FAE  1D03               	skipz
  9473  0FAF  2FB2               	goto	u1385
  9474  0FB0  0871               	movf	my_flash_system_write@len,w
  9475  0FB1  0226               	subwf	my_flash_system_write@loc,w
  9476  0FB2                     u1385:	
  9477  0FB2  1803               	skipnc
  9478  0FB3  2FBE               	goto	l2888
  9479                           
  9480                           ;sysData.c: 63: PMDATL = buf[loc];
  9481  0FB4  0826               	movf	my_flash_system_write@loc,w
  9482  0FB5  0725               	addwf	my_flash_system_write@buf,w
  9483  0FB6  00F3               	movwf	??_my_flash_system_write
  9484  0FB7  0086               	movwf	6
  9485  0FB8  3001               	movlw	1	; select bank2/3
  9486  0FB9  0087               	movwf	7
  9487  0FBA  0801               	movf	1,w
  9488  0FBB  0023               	movlb	3	; select bank3
  9489  0FBC  0093               	movwf	19	;volatile
  9490                           
  9491                           ;sysData.c: 64: }else{
  9492  0FBD  2FC0               	goto	l2890
  9493  0FBE                     l2888:	
  9494                           
  9495                           ;sysData.c: 65: PMDATL = 0x00;
  9496  0FBE  0023               	movlb	3	; select bank3
  9497  0FBF  0193               	clrf	19	;volatile
  9498  0FC0                     l2890:	
  9499                           
  9500                           ;sysData.c: 66: }
  9501                           ;sysData.c: 67: loc++;
  9502  0FC0  0020               	movlb	0	; select bank0
  9503  0FC1  0AA6               	incf	my_flash_system_write@loc,f
  9504  0FC2  1903               	skipnz
  9505  0FC3  0AA7               	incf	my_flash_system_write@loc+1,f
  9506                           
  9507                           ;sysData.c: 68: PMDATH = 0x00;
  9508  0FC4  0023               	movlb	3	; select bank3
  9509  0FC5  0194               	clrf	20	;volatile
  9510                           
  9511                           ;sysData.c: 69: if((i%32) == 32 -1 ){
  9512  0FC6  301F               	movlw	31
  9513  0FC7  0020               	movlb	0	; select bank0
  9514  0FC8  052A               	andwf	my_flash_system_write@i,w
  9515  0FC9  00F3               	movwf	??_my_flash_system_write
  9516  0FCA  3A1F               	xorlw	31
  9517  0FCB  1D03               	btfss	3,2
  9518  0FCC  2FCF               	goto	l2898
  9519                           
  9520                           ;sysData.c: 70: PMCON1bits.LWLO = 0;
  9521  0FCD  0023               	movlb	3	; select bank3
  9522  0FCE  1295               	bcf	21,5	;volatile
  9523  0FCF                     l2898:	
  9524                           
  9525                           ;sysData.c: 71: }
  9526                           ;sysData.c: 73: PMCON2 = 0x55;
  9527  0FCF  3055               	movlw	85
  9528  0FD0  0023               	movlb	3	; select bank3
  9529  0FD1  0096               	movwf	22	;volsfr
  9530                           
  9531                           ;sysData.c: 74: PMCON2 = 0xAA;
  9532  0FD2  30AA               	movlw	170
  9533  0FD3  0096               	movwf	22	;volsfr
  9534                           
  9535                           ;sysData.c: 75: PMCON1bits.WR = 1;
  9536  0FD4  1495               	bsf	21,1	;volatile
  9537                           
  9538                           ;sysData.c: 76: __nop();
  9539  0FD5  0000               	nop
  9540                           
  9541                           ;sysData.c: 77: __nop();
  9542  0FD6  0000               	nop
  9543                           
  9544                           ;sysData.c: 78: flashAddr++;
  9545  0FD7  0020               	movlb	0	; select bank0
  9546  0FD8  0AA8               	incf	my_flash_system_write@flashAddr,f
  9547  0FD9  1903               	skipnz
  9548  0FDA  0AA9               	incf	my_flash_system_write@flashAddr+1,f
  9549  0FDB  0AAA               	incf	my_flash_system_write@i,f
  9550  0FDC  1903               	skipnz
  9551  0FDD  0AAB               	incf	my_flash_system_write@i+1,f
  9552  0FDE  3000               	movlw	0
  9553  0FDF  022B               	subwf	my_flash_system_write@i+1,w
  9554  0FE0  3020               	movlw	32
  9555  0FE1  1903               	skipnz
  9556  0FE2  022A               	subwf	my_flash_system_write@i,w
  9557  0FE3  1C03               	skipc
  9558  0FE4  2FA4               	goto	l2884
  9559                           
  9560                           ;sysData.c: 79: }
  9561                           ;sysData.c: 80: PMCON1bits.WREN = 0;
  9562  0FE5  0023               	movlb	3	; select bank3
  9563  0FE6  1115               	bcf	21,2	;volatile
  9564  0FE7  0020               	movlb	0	; select bank0
  9565  0FE8  0AA0               	incf	my_flash_system_write@j,f
  9566  0FE9  1903               	skipnz
  9567  0FEA  0AA1               	incf	my_flash_system_write@j+1,f
  9568  0FEB  2F95               	goto	l2912
  9569  0FEC                     l2914:	
  9570                           
  9571                           ;sysData.c: 81: }
  9572                           ;sysData.c: 82: INTCONbits.GIE = GIEBitValue;
  9573  0FEC  0C22               	rrf	my_flash_system_write@GIEBitValue,w
  9574  0FED  2FF6               	ljmp	PL20	;call to abstracted procedure
  9575  0FEE                     __end_of_my_flash_system_write:	
  9576  0FEE                     PL18:	
  9577  0FEE  0086               	movwf	6
  9578  0FEF  3001               	movlw	1	; select bank2/3
  9579  0FF0  0087               	movwf	7
  9580  0FF1  0871               	movf	?___wmul,w
  9581  0FF2  3FC0               	movwi [0]fsr1
  9582  0FF3  0872               	movf	?___wmul+1,w
  9583  0FF4  3FC1               	movwi [1]fsr1
  9584  0FF5  0008               	return
  9585  0FF6                     __end_ofPL18:	
  9586  0FF6                     PL20:	
  9587  0FF6  1C03               	skipc
  9588  0FF7  138B               	bcf	11,7	;volatile
  9589  0FF8  1803               	skipnc
  9590  0FF9  178B               	bsf	11,7	;volatile
  9591  0FFA  0008               	return
  9592  0FFB                     __end_ofPL20:	
  9593  0FFB                     PL34:	
  9594  0FFB  3034               	movlw	52
  9595  0FFC  00F1               	movwf	my_flash_system_write@len
  9596  0FFD  3020               	movlw	(low (_sysData| (0+256)))& (0+255)
  9597  0FFE  01F2               	clrf	my_flash_system_write@len+1
  9598  0FFF  0008               	return
  9599  1000                     __end_ofPL34:	
  9600                           
  9601                           	psect	text14
  9602  0A6B                     __ptext14:	
  9603 ;; *************** function _pid_pwm2_vout_run *****************
  9604 ;; Defined at:
  9605 ;;		line 299 in file "src/api/sample.c"
  9606 ;; Parameters:    Size  Location     Type
  9607 ;;		None
  9608 ;; Auto vars:     Size  Location     Type
  9609 ;;  t16             2    2[BANK0 ] int 
  9610 ;;  ei              2    0[BANK0 ] int 
  9611 ;; Return value:  Size  Location     Type
  9612 ;;                  1    wreg      void 
  9613 ;; Registers used:
  9614 ;;		wreg, status,2, status,0, pclath, cstack
  9615 ;; Tracked objects:
  9616 ;;		On entry : 1F/0
  9617 ;;		On exit  : 1F/1B
  9618 ;;		Unchanged: 0/0
  9619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9621 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9622 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9623 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9624 ;;Total ram usage:        5 bytes
  9625 ;; Hardware stack levels used:    1
  9626 ;; Hardware stack levels required when called:    3
  9627 ;; This function calls:
  9628 ;;		___awdiv
  9629 ;;		___lwdiv
  9630 ;;		_set_vout_pwm2_duty
  9631 ;; This function is called by:
  9632 ;;		_main
  9633 ;; This function uses a non-reentrant model
  9634 ;;
  9635                           
  9636                           
  9637                           ;psect for function _pid_pwm2_vout_run
  9638  0A6B                     _pid_pwm2_vout_run:	
  9639                           
  9640                           ;sample.c: 301: int16_t t16,ei;
  9641                           ;sample.c: 302: t16=voExpectAdcValue-rtAdcValueVoFb;
  9642                           
  9643                           ;incstack = 0
  9644                           ; Regs used in _pid_pwm2_vout_run: [wreg+status,2+status,0+pclath+cstack]
  9645  0A6B  085D               	movf	_voExpectAdcValue+1,w
  9646  0A6C  00A3               	movwf	pid_pwm2_vout_run@t16+1
  9647  0A6D  085C               	movf	_voExpectAdcValue,w
  9648  0A6E  00A2               	movwf	pid_pwm2_vout_run@t16
  9649  0A6F  085A               	movf	_rtAdcValueVoFb,w
  9650  0A70  02A2               	subwf	pid_pwm2_vout_run@t16,f
  9651  0A71  085B               	movf	_rtAdcValueVoFb+1,w
  9652  0A72  3BA3               	subwfb	pid_pwm2_vout_run@t16+1,f
  9653                           
  9654                           ;sample.c: 303: ei=t16/80;
  9655  0A73  3050               	movlw	80
  9656  0A74  00F1               	movwf	___awdiv@divisor
  9657  0A75  01F2               	clrf	___awdiv@divisor+1
  9658  0A76  0823               	movf	pid_pwm2_vout_run@t16+1,w
  9659  0A77  00F4               	movwf	___awdiv@dividend+1
  9660  0A78  0822               	movf	pid_pwm2_vout_run@t16,w
  9661  0A79  00F3               	movwf	___awdiv@dividend
  9662  0A7A  2301  318A         	fcall	___awdiv
  9663  0A7C  0872               	movf	?___awdiv+1,w
  9664  0A7D  00A1               	movwf	pid_pwm2_vout_run@ei+1
  9665  0A7E  0871               	movf	?___awdiv,w
  9666  0A7F  00A0               	movwf	pid_pwm2_vout_run@ei
  9667                           
  9668                           ;sample.c: 304: if(ei==0){
  9669  0A80  0421               	iorwf	pid_pwm2_vout_run@ei+1,w
  9670  0A81  1D03               	btfss	3,2
  9671  0A82  2AA2               	goto	l668
  9672                           
  9673                           ;sample.c: 305: if(t16>16)ei=1;
  9674  0A83  0823               	movf	pid_pwm2_vout_run@t16+1,w
  9675  0A84  3A80               	xorlw	128
  9676  0A85  00F9               	movwf	??_pid_pwm2_vout_run
  9677  0A86  3080               	movlw	128
  9678  0A87  0279               	subwf	??_pid_pwm2_vout_run,w
  9679  0A88  1D03               	skipz
  9680  0A89  2A8C               	goto	u2005
  9681  0A8A  3011               	movlw	17
  9682  0A8B  0222               	subwf	pid_pwm2_vout_run@t16,w
  9683  0A8C                     u2005:	
  9684  0A8C  1C03               	skipc
  9685  0A8D  2A92               	goto	l3340
  9686  0A8E  0020               	movlb	0	; select bank0
  9687  0A8F  01A0               	clrf	pid_pwm2_vout_run@ei
  9688  0A90  0AA0               	incf	pid_pwm2_vout_run@ei,f
  9689  0A91  01A1               	clrf	pid_pwm2_vout_run@ei+1
  9690  0A92                     l3340:	
  9691                           
  9692                           ;sample.c: 306: if(t16<-16)ei=-1;
  9693  0A92  0020               	movlb	0	; select bank0
  9694  0A93  0823               	movf	pid_pwm2_vout_run@t16+1,w
  9695  0A94  3A80               	xorlw	128
  9696  0A95  00F9               	movwf	??_pid_pwm2_vout_run
  9697  0A96  307F               	movlw	127
  9698  0A97  0279               	subwf	??_pid_pwm2_vout_run,w
  9699  0A98  1D03               	skipz
  9700  0A99  2A9C               	goto	u2015
  9701  0A9A  30F0               	movlw	240
  9702  0A9B  0222               	subwf	pid_pwm2_vout_run@t16,w
  9703  0A9C                     u2015:	
  9704  0A9C  1803               	skipnc
  9705  0A9D  2AA2               	goto	l668
  9706  0A9E  30FF               	movlw	255
  9707  0A9F  0020               	movlb	0	; select bank0
  9708  0AA0  00A0               	movwf	pid_pwm2_vout_run@ei
  9709  0AA1  00A1               	movwf	pid_pwm2_vout_run@ei+1
  9710  0AA2                     l668:	
  9711                           
  9712                           ;sample.c: 307: }
  9713                           ;sample.c: 309: pwm2Ei=pwm2Ei+ei;
  9714  0AA2  0020               	movlb	0	; select bank0
  9715  0AA3  0820               	movf	pid_pwm2_vout_run@ei,w
  9716  0AA4  07D0               	addwf	_pwm2Ei,f
  9717  0AA5  0821               	movf	pid_pwm2_vout_run@ei+1,w
  9718  0AA6  3DD1               	addwfc	_pwm2Ei+1,f
  9719                           
  9720                           ;sample.c: 310: if(pwm2Ei>300)pwm2Ei=300;
  9721  0AA7  0851               	movf	_pwm2Ei+1,w
  9722  0AA8  3A80               	xorlw	128
  9723  0AA9  00F9               	movwf	??_pid_pwm2_vout_run
  9724  0AAA  3081               	movlw	129
  9725  0AAB  0279               	subwf	??_pid_pwm2_vout_run,w
  9726  0AAC  1D03               	skipz
  9727  0AAD  2AB0               	goto	u2025
  9728  0AAE  302D               	movlw	45
  9729  0AAF  0250               	subwf	_pwm2Ei,w
  9730  0AB0                     u2025:	
  9731  0AB0  1C03               	skipc
  9732  0AB1  2AB7               	goto	l671
  9733  0AB2  302C               	movlw	44
  9734  0AB3  0020               	movlb	0	; select bank0
  9735  0AB4  00D0               	movwf	_pwm2Ei
  9736  0AB5  3001               	movlw	1
  9737  0AB6  00D1               	movwf	_pwm2Ei+1
  9738  0AB7                     l671:	
  9739                           
  9740                           ;sample.c: 311: if(pwm2Ei<-300)pwm2Ei=-300;
  9741  0AB7  0020               	movlb	0	; select bank0
  9742  0AB8  0851               	movf	_pwm2Ei+1,w
  9743  0AB9  3A80               	xorlw	128
  9744  0ABA  00F9               	movwf	??_pid_pwm2_vout_run
  9745  0ABB  307E               	movlw	126
  9746  0ABC  0279               	subwf	??_pid_pwm2_vout_run,w
  9747  0ABD  1D03               	skipz
  9748  0ABE  2AC1               	goto	u2035
  9749  0ABF  30D4               	movlw	212
  9750  0AC0  0250               	subwf	_pwm2Ei,w
  9751  0AC1                     u2035:	
  9752  0AC1  1803               	skipnc
  9753  0AC2  2AC8               	goto	l3348
  9754  0AC3  30D4               	movlw	212
  9755  0AC4  0020               	movlb	0	; select bank0
  9756  0AC5  00D0               	movwf	_pwm2Ei
  9757  0AC6  30FE               	movlw	254
  9758  0AC7  00D1               	movwf	_pwm2Ei+1
  9759  0AC8                     l3348:	
  9760                           
  9761                           ;sample.c: 313: t16=voExpectAdcValue/10;
  9762  0AC8  300A               	movlw	10
  9763  0AC9  00F1               	movwf	___lwdiv@divisor
  9764  0ACA  01F2               	clrf	___lwdiv@divisor+1
  9765  0ACB  0020               	movlb	0	; select bank0
  9766  0ACC  085D               	movf	_voExpectAdcValue+1,w
  9767  0ACD  00F4               	movwf	___lwdiv@dividend+1
  9768  0ACE  085C               	movf	_voExpectAdcValue,w
  9769  0ACF  00F3               	movwf	___lwdiv@dividend
  9770  0AD0  2341  318A         	fcall	___lwdiv
  9771  0AD2  0872               	movf	?___lwdiv+1,w
  9772  0AD3  00A3               	movwf	pid_pwm2_vout_run@t16+1
  9773  0AD4  0871               	movf	?___lwdiv,w
  9774  0AD5  00A2               	movwf	pid_pwm2_vout_run@t16
  9775                           
  9776                           ;sample.c: 315: pwm2DutyForVout=t16+pwm2Ei;
  9777  0AD6  0850               	movf	_pwm2Ei,w
  9778  0AD7  0722               	addwf	pid_pwm2_vout_run@t16,w
  9779  0AD8  00EC               	movwf	_pwm2DutyForVout
  9780  0AD9  0851               	movf	_pwm2Ei+1,w
  9781  0ADA  3D23               	addwfc	pid_pwm2_vout_run@t16+1,w
  9782  0ADB  00ED               	movwf	_pwm2DutyForVout+1
  9783                           
  9784                           ;sample.c: 316: if(pwm2DutyForVout>1580)pwm2DutyForVout=1580;
  9785  0ADC  3A80               	xorlw	128
  9786  0ADD  00F9               	movwf	??_pid_pwm2_vout_run
  9787  0ADE  3086               	movlw	134
  9788  0ADF  0279               	subwf	??_pid_pwm2_vout_run,w
  9789  0AE0  1D03               	skipz
  9790  0AE1  2AE4               	goto	u2045
  9791  0AE2  302D               	movlw	45
  9792  0AE3  026C               	subwf	_pwm2DutyForVout,w
  9793  0AE4                     u2045:	
  9794  0AE4  1C03               	skipc
  9795  0AE5  2AEB               	goto	l673
  9796  0AE6  302C               	movlw	44
  9797  0AE7  0020               	movlb	0	; select bank0
  9798  0AE8  00EC               	movwf	_pwm2DutyForVout
  9799  0AE9  3006               	movlw	6
  9800  0AEA  00ED               	movwf	_pwm2DutyForVout+1
  9801  0AEB                     l673:	
  9802                           
  9803                           ;sample.c: 317: if(pwm2DutyForVout<2)pwm2DutyForVout=2;
  9804  0AEB  0020               	movlb	0	; select bank0
  9805  0AEC  086D               	movf	_pwm2DutyForVout+1,w
  9806  0AED  3A80               	xorlw	128
  9807  0AEE  00F9               	movwf	??_pid_pwm2_vout_run
  9808  0AEF  3080               	movlw	128
  9809  0AF0  0279               	subwf	??_pid_pwm2_vout_run,w
  9810  0AF1  1D03               	skipz
  9811  0AF2  2AF5               	goto	u2055
  9812  0AF3  3002               	movlw	2
  9813  0AF4  026C               	subwf	_pwm2DutyForVout,w
  9814  0AF5                     u2055:	
  9815  0AF5  1803               	skipnc
  9816  0AF6  2AFB               	goto	l3358
  9817  0AF7  3002               	movlw	2
  9818  0AF8  0020               	movlb	0	; select bank0
  9819  0AF9  00EC               	movwf	_pwm2DutyForVout
  9820  0AFA  01ED               	clrf	_pwm2DutyForVout+1
  9821  0AFB                     l3358:	
  9822                           
  9823                           ;sample.c: 318: set_vout_pwm2_duty(pwm2DutyForVout);
  9824  0AFB  0020               	movlb	0	; select bank0
  9825  0AFC  086D               	movf	_pwm2DutyForVout+1,w
  9826  0AFD  00F4               	movwf	set_vout_pwm2_duty@duty+1
  9827  0AFE  086C               	movf	_pwm2DutyForVout,w
  9828  0AFF  00F3               	movwf	set_vout_pwm2_duty@duty
  9829  0B00  2B66               	ljmp	l2798
  9830  0B01                     __end_of_pid_pwm2_vout_run:	
  9831  0B01                     __ptext18:	
  9832 ;; *************** function ___awdiv *****************
  9833 ;; Defined at:
  9834 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  9835 ;; Parameters:    Size  Location     Type
  9836 ;;  divisor         2    1[COMMON] int 
  9837 ;;  dividend        2    3[COMMON] int 
  9838 ;; Auto vars:     Size  Location     Type
  9839 ;;  quotient        2    7[COMMON] int 
  9840 ;;  sign            1    6[COMMON] unsigned char 
  9841 ;;  counter         1    5[COMMON] unsigned char 
  9842 ;; Return value:  Size  Location     Type
  9843 ;;                  2    1[COMMON] int 
  9844 ;; Registers used:
  9845 ;;		wreg, status,2, status,0
  9846 ;; Tracked objects:
  9847 ;;		On entry : 1F/0
  9848 ;;		On exit  : 1F/0
  9849 ;;		Unchanged: 1F/0
  9850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9851 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9852 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9854 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9855 ;;Total ram usage:        8 bytes
  9856 ;; Hardware stack levels used:    1
  9857 ;; Hardware stack levels required when called:    1
  9858 ;; This function calls:
  9859 ;;		Nothing
  9860 ;; This function is called by:
  9861 ;;		_pid_pwm2_vout_run
  9862 ;; This function uses a non-reentrant model
  9863 ;;
  9864                           
  9865                           
  9866                           ;psect for function ___awdiv
  9867  0B01                     ___awdiv:	
  9868                           
  9869                           ;incstack = 0
  9870                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  9871  0B01  01F6               	clrf	___awdiv@sign
  9872  0B02  1FF2               	btfss	___awdiv@divisor+1,7
  9873  0B03  2B0B               	goto	l3066
  9874  0B04  09F1               	comf	___awdiv@divisor,f
  9875  0B05  09F2               	comf	___awdiv@divisor+1,f
  9876  0B06  0AF1               	incf	___awdiv@divisor,f
  9877  0B07  1903               	skipnz
  9878  0B08  0AF2               	incf	___awdiv@divisor+1,f
  9879  0B09  01F6               	clrf	___awdiv@sign
  9880  0B0A  0AF6               	incf	___awdiv@sign,f
  9881  0B0B                     l3066:	
  9882  0B0B  1FF4               	btfss	___awdiv@dividend+1,7
  9883  0B0C  2B14               	goto	l3072
  9884  0B0D  09F3               	comf	___awdiv@dividend,f
  9885  0B0E  09F4               	comf	___awdiv@dividend+1,f
  9886  0B0F  0AF3               	incf	___awdiv@dividend,f
  9887  0B10  1903               	skipnz
  9888  0B11  0AF4               	incf	___awdiv@dividend+1,f
  9889  0B12  3001               	movlw	1
  9890  0B13  06F6               	xorwf	___awdiv@sign,f
  9891  0B14                     l3072:	
  9892  0B14  01F7               	clrf	___awdiv@quotient
  9893  0B15  01F8               	clrf	___awdiv@quotient+1
  9894  0B16  0871               	movf	___awdiv@divisor,w
  9895  0B17  0472               	iorwf	___awdiv@divisor+1,w
  9896  0B18  1903               	btfsc	3,2
  9897  0B19  2B34               	goto	l3094
  9898  0B1A  01F5               	clrf	___awdiv@counter
  9899  0B1B                     L2:	
  9900  0B1B  0AF5               	incf	___awdiv@counter,f
  9901  0B1C  1BF2               	btfsc	___awdiv@divisor+1,7
  9902  0B1D  2B21               	goto	l3082
  9903  0B1E  35F1               	lslf	___awdiv@divisor,f
  9904  0B1F  0DF2               	rlf	___awdiv@divisor+1,f
  9905  0B20  2B1B               	goto	L2
  9906  0B21                     l3082:	
  9907  0B21  35F7               	lslf	___awdiv@quotient,f
  9908  0B22  0DF8               	rlf	___awdiv@quotient+1,f
  9909  0B23  0872               	movf	___awdiv@divisor+1,w
  9910  0B24  0274               	subwf	___awdiv@dividend+1,w
  9911  0B25  1D03               	skipz
  9912  0B26  2B29               	goto	u1675
  9913  0B27  0871               	movf	___awdiv@divisor,w
  9914  0B28  0273               	subwf	___awdiv@dividend,w
  9915  0B29                     u1675:	
  9916  0B29  1C03               	skipc
  9917  0B2A  2B30               	goto	l3090
  9918  0B2B  0871               	movf	___awdiv@divisor,w
  9919  0B2C  02F3               	subwf	___awdiv@dividend,f
  9920  0B2D  0872               	movf	___awdiv@divisor+1,w
  9921  0B2E  3BF4               	subwfb	___awdiv@dividend+1,f
  9922  0B2F  1477               	bsf	___awdiv@quotient,0
  9923  0B30                     l3090:	
  9924  0B30  36F2               	lsrf	___awdiv@divisor+1,f
  9925  0B31  0CF1               	rrf	___awdiv@divisor,f
  9926  0B32  0BF5               	decfsz	___awdiv@counter,f
  9927  0B33  2B21               	goto	l3082
  9928  0B34                     l3094:	
  9929  0B34  0876               	movf	___awdiv@sign,w
  9930  0B35  1903               	btfsc	3,2
  9931  0B36  2B3C               	goto	l3098
  9932  0B37  09F7               	comf	___awdiv@quotient,f
  9933  0B38  09F8               	comf	___awdiv@quotient+1,f
  9934  0B39  0AF7               	incf	___awdiv@quotient,f
  9935  0B3A  1903               	skipnz
  9936  0B3B  0AF8               	incf	___awdiv@quotient+1,f
  9937  0B3C                     l3098:	
  9938  0B3C  0878               	movf	___awdiv@quotient+1,w
  9939  0B3D  00F2               	movwf	?___awdiv+1
  9940  0B3E  0877               	movf	___awdiv@quotient,w
  9941  0B3F  00F1               	movwf	?___awdiv
  9942  0B40  0008               	return
  9943  0B41                     __end_of___awdiv:	
  9944  0B41                     __ptext17:	
  9945 ;; *************** function ___lwdiv *****************
  9946 ;; Defined at:
  9947 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  9948 ;; Parameters:    Size  Location     Type
  9949 ;;  divisor         2    1[COMMON] unsigned int 
  9950 ;;  dividend        2    3[COMMON] unsigned int 
  9951 ;; Auto vars:     Size  Location     Type
  9952 ;;  quotient        2    5[COMMON] unsigned int 
  9953 ;;  counter         1    7[COMMON] unsigned char 
  9954 ;; Return value:  Size  Location     Type
  9955 ;;                  2    1[COMMON] unsigned int 
  9956 ;; Registers used:
  9957 ;;		wreg, status,2, status,0
  9958 ;; Tracked objects:
  9959 ;;		On entry : 1F/0
  9960 ;;		On exit  : 1F/0
  9961 ;;		Unchanged: 1F/0
  9962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9963 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9964 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9966 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9967 ;;Total ram usage:        7 bytes
  9968 ;; Hardware stack levels used:    1
  9969 ;; Hardware stack levels required when called:    1
  9970 ;; This function calls:
  9971 ;;		Nothing
  9972 ;; This function is called by:
  9973 ;;		_pid_pwm2_vout_run
  9974 ;; This function uses a non-reentrant model
  9975 ;;
  9976                           
  9977                           
  9978                           ;psect for function ___lwdiv
  9979  0B41                     ___lwdiv:	
  9980                           
  9981                           ;incstack = 0
  9982                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  9983  0B41  01F5               	clrf	___lwdiv@quotient
  9984  0B42  01F6               	clrf	___lwdiv@quotient+1
  9985  0B43  0871               	movf	___lwdiv@divisor,w
  9986  0B44  0472               	iorwf	___lwdiv@divisor+1,w
  9987  0B45  1903               	btfsc	3,2
  9988  0B46  2B61               	goto	l3150
  9989  0B47  01F7               	clrf	___lwdiv@counter
  9990  0B48                     L1:	
  9991  0B48  0AF7               	incf	___lwdiv@counter,f
  9992  0B49  1BF2               	btfsc	___lwdiv@divisor+1,7
  9993  0B4A  2B4E               	goto	l3138
  9994  0B4B  35F1               	lslf	___lwdiv@divisor,f
  9995  0B4C  0DF2               	rlf	___lwdiv@divisor+1,f
  9996  0B4D  2B48               	goto	L1
  9997  0B4E                     l3138:	
  9998  0B4E  35F5               	lslf	___lwdiv@quotient,f
  9999  0B4F  0DF6               	rlf	___lwdiv@quotient+1,f
 10000  0B50  0872               	movf	___lwdiv@divisor+1,w
 10001  0B51  0274               	subwf	___lwdiv@dividend+1,w
 10002  0B52  1D03               	skipz
 10003  0B53  2B56               	goto	u1765
 10004  0B54  0871               	movf	___lwdiv@divisor,w
 10005  0B55  0273               	subwf	___lwdiv@dividend,w
 10006  0B56                     u1765:	
 10007  0B56  1C03               	skipc
 10008  0B57  2B5D               	goto	l3146
 10009  0B58  0871               	movf	___lwdiv@divisor,w
 10010  0B59  02F3               	subwf	___lwdiv@dividend,f
 10011  0B5A  0872               	movf	___lwdiv@divisor+1,w
 10012  0B5B  3BF4               	subwfb	___lwdiv@dividend+1,f
 10013  0B5C  1475               	bsf	___lwdiv@quotient,0
 10014  0B5D                     l3146:	
 10015  0B5D  36F2               	lsrf	___lwdiv@divisor+1,f
 10016  0B5E  0CF1               	rrf	___lwdiv@divisor,f
 10017  0B5F  0BF7               	decfsz	___lwdiv@counter,f
 10018  0B60  2B4E               	goto	l3138
 10019  0B61                     l3150:	
 10020  0B61  0876               	movf	___lwdiv@quotient+1,w
 10021  0B62  00F2               	movwf	?___lwdiv+1
 10022  0B63  0875               	movf	___lwdiv@quotient,w
 10023  0B64  00F1               	movwf	?___lwdiv
 10024  0B65  0008               	return
 10025  0B66                     __end_of___lwdiv:	
 10026  0B66                     __ptext15:	
 10027 ;; *************** function _set_vout_pwm2_duty *****************
 10028 ;; Defined at:
 10029 ;;		line 46 in file "src/api/sample.c"
 10030 ;; Parameters:    Size  Location     Type
 10031 ;;  duty            2    3[COMMON] unsigned int 
 10032 ;; Auto vars:     Size  Location     Type
 10033 ;;  t16             2    5[COMMON] unsigned int 
 10034 ;; Return value:  Size  Location     Type
 10035 ;;                  1    wreg      void 
 10036 ;; Registers used:
 10037 ;;		wreg, pclath, cstack
 10038 ;; Tracked objects:
 10039 ;;		On entry : 1F/0
 10040 ;;		On exit  : 1F/1B
 10041 ;;		Unchanged: 0/0
 10042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10043 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10044 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10046 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10047 ;;Total ram usage:        4 bytes
 10048 ;; Hardware stack levels used:    1
 10049 ;; Hardware stack levels required when called:    2
 10050 ;; This function calls:
 10051 ;;		_get_vout_pwm2_duty
 10052 ;; This function is called by:
 10053 ;;		_pid_pwm2_vout_run
 10054 ;; This function uses a non-reentrant model
 10055 ;;
 10056                           
 10057                           
 10058                           ;psect for function _set_vout_pwm2_duty
 10059  0B66                     _set_vout_pwm2_duty:	
 10060  0B66                     l2798:	
 10061                           ;incstack = 0
 10062                           ; Regs used in _set_vout_pwm2_duty: [wreg+pclath+cstack]
 10063                           
 10064                           
 10065                           ;sample.c: 48: uint16_t t16;
 10066                           ;sample.c: 49: t16=get_vout_pwm2_duty();
 10067  0B66  237B  318A         	fcall	_get_vout_pwm2_duty
 10068  0B68  0872               	movf	?_get_vout_pwm2_duty+1,w
 10069  0B69  00F6               	movwf	set_vout_pwm2_duty@t16+1
 10070  0B6A  0871               	movf	?_get_vout_pwm2_duty,w
 10071  0B6B  00F5               	movwf	set_vout_pwm2_duty@t16
 10072                           
 10073                           ;sample.c: 50: if(t16==duty)return;
 10074  0B6C  0874               	movf	set_vout_pwm2_duty@duty+1,w
 10075  0B6D  0676               	xorwf	set_vout_pwm2_duty@t16+1,w
 10076  0B6E  1D03               	skipz
 10077  0B6F  2B72               	goto	u1315
 10078  0B70  0873               	movf	set_vout_pwm2_duty@duty,w
 10079  0B71  0675               	xorwf	set_vout_pwm2_duty@t16,w
 10080  0B72                     u1315:	
 10081  0B72  1903               	btfsc	3,2
 10082  0B73  0008               	return
 10083                           
 10084                           ;sample.c: 51: PWM2CONbits.EN = 0;
 10085  0B74  13AB               	bcf	43,7	;volatile
 10086                           
 10087                           ;sample.c: 52: PWM2DCL= (uint8_t)(duty&0xff);
 10088  0B75  0873               	movf	set_vout_pwm2_duty@duty,w
 10089  0B76  00A3               	movwf	35	;volatile
 10090                           
 10091                           ;sample.c: 53: PWM2DCH=(uint8_t)(duty>>8);
 10092  0B77  0874               	movf	set_vout_pwm2_duty@duty+1,w
 10093  0B78  00A4               	movwf	36	;volatile
 10094                           
 10095                           ;sample.c: 54: PWM2CONbits.EN = 1;
 10096  0B79  17AB               	bsf	43,7	;volatile
 10097  0B7A  0008               	return
 10098  0B7B                     __end_of_set_vout_pwm2_duty:	
 10099  0B7B                     __ptext16:	
 10100 ;; *************** function _get_vout_pwm2_duty *****************
 10101 ;; Defined at:
 10102 ;;		line 41 in file "src/api/sample.c"
 10103 ;; Parameters:    Size  Location     Type
 10104 ;;		None
 10105 ;; Auto vars:     Size  Location     Type
 10106 ;;		None
 10107 ;; Return value:  Size  Location     Type
 10108 ;;                  2    1[COMMON] unsigned int 
 10109 ;; Registers used:
 10110 ;;		wreg
 10111 ;; Tracked objects:
 10112 ;;		On entry : 1F/0
 10113 ;;		On exit  : 1F/1B
 10114 ;;		Unchanged: 0/0
 10115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10116 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10119 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10120 ;;Total ram usage:        2 bytes
 10121 ;; Hardware stack levels used:    1
 10122 ;; Hardware stack levels required when called:    1
 10123 ;; This function calls:
 10124 ;;		Nothing
 10125 ;; This function is called by:
 10126 ;;		_set_vout_pwm2_duty
 10127 ;; This function uses a non-reentrant model
 10128 ;;
 10129                           
 10130                           
 10131                           ;psect for function _get_vout_pwm2_duty
 10132  0B7B                     _get_vout_pwm2_duty:	
 10133                           
 10134                           ;sample.c: 43: return ((PWM2DCH<<8)|PWM2DCL);
 10135                           
 10136                           ;incstack = 0
 10137                           ; Regs used in _get_vout_pwm2_duty: [wreg]
 10138  0B7B  003B               	movlb	27	; select bank27
 10139  0B7C  0824               	movf	36,w	;volatile
 10140  0B7D  00F2               	movwf	?_get_vout_pwm2_duty+1
 10141  0B7E  01F1               	clrf	?_get_vout_pwm2_duty
 10142  0B7F  0823               	movf	35,w	;volatile
 10143  0B80  04F1               	iorwf	?_get_vout_pwm2_duty,f
 10144  0B81  0008               	return
 10145  0B82                     __end_of_get_vout_pwm2_duty:	
 10146                           
 10147                           	psect	swtext1
 10148  07F2                     __pswtext1:	
 10149  07F2                     S4162:	
 10150  07F2  3183  2B3A         	ljmp	l3812
 10151  07F4  3183  2B3A         	ljmp	l3812
 10152  07F6  3183  2B43         	ljmp	l3818
 10153  07F8  3183  2B58         	ljmp	l3824
 10154  07FA  3183  2B7F         	ljmp	l3838
 10155  07FC  3184  2CFC         	ljmp	l638
 10156                           
 10157                           	psect	text25
 10158  07D0                     __ptext25:	
 10159 ;; *************** function _m_mem_cpy *****************
 10160 ;; Defined at:
 10161 ;;		line 39 in file "src/depend/m_string.c"
 10162 ;; Parameters:    Size  Location     Type
 10163 ;;  d               1    wreg     PTR unsigned char 
 10164 ;;		 -> str(16), 
 10165 ;;  s               1    1[COMMON] PTR unsigned char 
 10166 ;;		 -> str(16), 
 10167 ;; Auto vars:     Size  Location     Type
 10168 ;;  d               1    2[COMMON] PTR unsigned char 
 10169 ;;		 -> str(16), 
 10170 ;; Return value:  Size  Location     Type
 10171 ;;                  1    wreg      void 
 10172 ;; Registers used:
 10173 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 10174 ;; Tracked objects:
 10175 ;;		On entry : 1F/0
 10176 ;;		On exit  : 1F/0
 10177 ;;		Unchanged: 1F/0
 10178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10179 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10180 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10182 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10183 ;;Total ram usage:        2 bytes
 10184 ;; Hardware stack levels used:    1
 10185 ;; Hardware stack levels required when called:    1
 10186 ;; This function calls:
 10187 ;;		Nothing
 10188 ;; This function is called by:
 10189 ;;		_m_int_2_str_ex
 10190 ;; This function uses a non-reentrant model
 10191 ;;
 10192                           
 10193                           
 10194                           ;psect for function _m_mem_cpy
 10195  07D0                     _m_mem_cpy:	
 10196                           
 10197                           ;incstack = 0
 10198                           ; Regs used in _m_mem_cpy: [wreg-fsr1h+status,2+status,0]
 10199                           ;m_mem_cpy@d stored from wreg
 10200  07D0  00F2               	movwf	m_mem_cpy@d
 10201  07D1                     l2954:	
 10202                           ;m_string.c: 41: while(*s!='\0')
 10203                           
 10204  07D1  0871               	movf	m_mem_cpy@s,w
 10205  07D2  0086               	movwf	6
 10206  07D3  0187               	clrf	7
 10207  07D4  0801               	movf	1,w
 10208  07D5  1903               	btfsc	3,2
 10209  07D6  2FE1               	goto	l2956
 10210                           
 10211                           ;m_string.c: 42: {
 10212                           ;m_string.c: 43: *d++=*s++;
 10213  07D7  0872               	movf	m_mem_cpy@d,w
 10214  07D8  0086               	movwf	6
 10215  07D9  0871               	movf	m_mem_cpy@s,w
 10216  07DA  0084               	movwf	4
 10217  07DB  0185               	clrf	5
 10218  07DC  0800               	movf	0,w
 10219  07DD  0081               	movwf	1
 10220  07DE  0AF1               	incf	m_mem_cpy@s,f
 10221  07DF  0AF2               	incf	m_mem_cpy@d,f
 10222  07E0  2FD1               	goto	l2954
 10223  07E1                     l2956:	
 10224                           
 10225                           ;m_string.c: 44: }
 10226                           ;m_string.c: 45: *d='\0';
 10227  07E1  0872               	movf	m_mem_cpy@d,w
 10228  07E2  0086               	movwf	6
 10229  07E3  0187               	clrf	7
 10230  07E4  0181               	clrf	1
 10231  07E5  0008               	return
 10232  07E6                     __end_of_m_mem_cpy:	
 10233                           
 10234                           	psect	text26
 10235  0A0B                     __ptext26:	
 10236 ;; *************** function ___almod *****************
 10237 ;; Defined at:
 10238 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\almod.c"
 10239 ;; Parameters:    Size  Location     Type
 10240 ;;  divisor         4    1[COMMON] long 
 10241 ;;  dividend        4    5[COMMON] long 
 10242 ;; Auto vars:     Size  Location     Type
 10243 ;;  sign            1   10[COMMON] unsigned char 
 10244 ;;  counter         1    9[COMMON] unsigned char 
 10245 ;; Return value:  Size  Location     Type
 10246 ;;                  4    1[COMMON] long 
 10247 ;; Registers used:
 10248 ;;		wreg, status,2, status,0
 10249 ;; Tracked objects:
 10250 ;;		On entry : 1F/0
 10251 ;;		On exit  : 1F/0
 10252 ;;		Unchanged: 1F/0
 10253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10254 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10255 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10257 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10258 ;;Total ram usage:       10 bytes
 10259 ;; Hardware stack levels used:    1
 10260 ;; Hardware stack levels required when called:    1
 10261 ;; This function calls:
 10262 ;;		Nothing
 10263 ;; This function is called by:
 10264 ;;		_m_int_2_str_ex
 10265 ;; This function uses a non-reentrant model
 10266 ;;
 10267                           
 10268                           
 10269                           ;psect for function ___almod
 10270  0A0B                     ___almod:	
 10271                           
 10272                           ;incstack = 0
 10273                           ; Regs used in ___almod: [wreg+status,2+status,0]
 10274  0A0B  01FA               	clrf	___almod@sign
 10275  0A0C  1FF8               	btfss	___almod@dividend+3,7
 10276  0A0D  2A18               	goto	l1152
 10277  0A0E  2265  318A         	fcall	PL28	;call to abstracted procedure
 10278  0A10  1903               	skipnz
 10279  0A11  0AF6               	incf	___almod@dividend+1,f
 10280  0A12  1903               	skipnz
 10281  0A13  0AF7               	incf	___almod@dividend+2,f
 10282  0A14  1903               	skipnz
 10283  0A15  0AF8               	incf	___almod@dividend+3,f
 10284  0A16  01FA               	clrf	___almod@sign
 10285  0A17  0AFA               	incf	___almod@sign,f
 10286  0A18                     l1152:	
 10287  0A18  1FF4               	btfss	___almod@divisor+3,7
 10288  0A19  2A25               	goto	l3034
 10289  0A1A  09F1               	comf	___almod@divisor,f
 10290  0A1B  09F2               	comf	___almod@divisor+1,f
 10291  0A1C  09F3               	comf	___almod@divisor+2,f
 10292  0A1D  09F4               	comf	___almod@divisor+3,f
 10293  0A1E  0AF1               	incf	___almod@divisor,f
 10294  0A1F  1903               	skipnz
 10295  0A20  0AF2               	incf	___almod@divisor+1,f
 10296  0A21  1903               	skipnz
 10297  0A22  0AF3               	incf	___almod@divisor+2,f
 10298  0A23  1903               	skipnz
 10299  0A24  0AF4               	incf	___almod@divisor+3,f
 10300  0A25                     l3034:	
 10301  0A25  0874               	movf	___almod@divisor+3,w
 10302  0A26  0473               	iorwf	___almod@divisor+2,w
 10303  0A27  0472               	iorwf	___almod@divisor+1,w
 10304  0A28  0471               	iorwf	___almod@divisor,w
 10305  0A29  1903               	skipnz
 10306  0A2A  2A52               	goto	l3050
 10307  0A2B  01F9               	clrf	___almod@counter
 10308  0A2C                     L7:	
 10309  0A2C  0AF9               	incf	___almod@counter,f
 10310  0A2D  1BF4               	btfsc	___almod@divisor+3,7
 10311  0A2E  2A34               	goto	l3042
 10312  0A2F  35F1               	lslf	___almod@divisor,f
 10313  0A30  0DF2               	rlf	___almod@divisor+1,f
 10314  0A31  0DF3               	rlf	___almod@divisor+2,f
 10315  0A32  0DF4               	rlf	___almod@divisor+3,f
 10316  0A33  2A2C               	goto	L7
 10317  0A34                     l3042:	
 10318  0A34  0874               	movf	___almod@divisor+3,w
 10319  0A35  0278               	subwf	___almod@dividend+3,w
 10320  0A36  1D03               	skipz
 10321  0A37  2A42               	goto	u1605
 10322  0A38  0873               	movf	___almod@divisor+2,w
 10323  0A39  0277               	subwf	___almod@dividend+2,w
 10324  0A3A  1D03               	skipz
 10325  0A3B  2A42               	goto	u1605
 10326  0A3C  0872               	movf	___almod@divisor+1,w
 10327  0A3D  0276               	subwf	___almod@dividend+1,w
 10328  0A3E  1D03               	skipz
 10329  0A3F  2A42               	goto	u1605
 10330  0A40  0871               	movf	___almod@divisor,w
 10331  0A41  0275               	subwf	___almod@dividend,w
 10332  0A42                     u1605:	
 10333  0A42  1C03               	skipc
 10334  0A43  2A4C               	goto	l3046
 10335  0A44  0871               	movf	___almod@divisor,w
 10336  0A45  02F5               	subwf	___almod@dividend,f
 10337  0A46  0872               	movf	___almod@divisor+1,w
 10338  0A47  3BF6               	subwfb	___almod@dividend+1,f
 10339  0A48  0873               	movf	___almod@divisor+2,w
 10340  0A49  3BF7               	subwfb	___almod@dividend+2,f
 10341  0A4A  0874               	movf	___almod@divisor+3,w
 10342  0A4B  3BF8               	subwfb	___almod@dividend+3,f
 10343  0A4C                     l3046:	
 10344  0A4C  36F4               	lsrf	___almod@divisor+3,f
 10345  0A4D  0CF3               	rrf	___almod@divisor+2,f
 10346  0A4E  0CF2               	rrf	___almod@divisor+1,f
 10347  0A4F  0CF1               	rrf	___almod@divisor,f
 10348  0A50  0BF9               	decfsz	___almod@counter,f
 10349  0A51  2A34               	goto	l3042
 10350  0A52                     l3050:	
 10351  0A52  087A               	movf	___almod@sign,w
 10352  0A53  1903               	btfsc	3,2
 10353  0A54  2A5C               	goto	l3054
 10354  0A55  2265               	fcall	PL28	;call to abstracted procedure
 10355  0A56  1903               	skipnz
 10356  0A57  0AF6               	incf	___almod@dividend+1,f
 10357  0A58  1903               	skipnz
 10358  0A59  0AF7               	incf	___almod@dividend+2,f
 10359  0A5A  1903               	skipnz
 10360  0A5B  0AF8               	incf	___almod@dividend+3,f
 10361  0A5C                     l3054:	
 10362  0A5C  0878               	movf	___almod@dividend+3,w
 10363  0A5D  00F4               	movwf	?___almod+3
 10364  0A5E  0877               	movf	___almod@dividend+2,w
 10365  0A5F  00F3               	movwf	?___almod+2
 10366  0A60  0876               	movf	___almod@dividend+1,w
 10367  0A61  00F2               	movwf	?___almod+1
 10368  0A62  0875               	movf	___almod@dividend,w
 10369  0A63  00F1               	movwf	?___almod
 10370  0A64  0008               	return
 10371  0A65                     __end_of___almod:	
 10372  0A65                     PL28:	
 10373  0A65  09F5               	comf	___almod@dividend,f
 10374  0A66  09F6               	comf	___almod@dividend+1,f
 10375  0A67  09F7               	comf	___almod@dividend+2,f
 10376  0A68  09F8               	comf	___almod@dividend+3,f
 10377  0A69  0AF5               	incf	___almod@dividend,f
 10378  0A6A  0008               	return
 10379  0A6B                     __end_ofPL28:	
 10380                           
 10381                           	psect	text27
 10382  0CA5                     __ptext27:	
 10383 ;; *************** function _calc_temp_rs *****************
 10384 ;; Defined at:
 10385 ;;		line 138 in file "src/api/sample.c"
 10386 ;; Parameters:    Size  Location     Type
 10387 ;;		None
 10388 ;; Auto vars:     Size  Location     Type
 10389 ;;  y               4   13[BANK0 ] unsigned long 
 10390 ;;  x               4    9[BANK0 ] unsigned long 
 10391 ;; Return value:  Size  Location     Type
 10392 ;;                  4    5[BANK0 ] unsigned long 
 10393 ;; Registers used:
 10394 ;;		wreg, status,2, status,0, pclath, cstack
 10395 ;; Tracked objects:
 10396 ;;		On entry : 1F/0
 10397 ;;		On exit  : 1F/0
 10398 ;;		Unchanged: 0/0
 10399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10400 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10401 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10403 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10404 ;;Total ram usage:       12 bytes
 10405 ;; Hardware stack levels used:    1
 10406 ;; Hardware stack levels required when called:    2
 10407 ;; This function calls:
 10408 ;;		___lldiv
 10409 ;;		___lmul
 10410 ;; This function is called by:
 10411 ;;		_main
 10412 ;; This function uses a non-reentrant model
 10413 ;;
 10414                           
 10415                           
 10416                           ;psect for function _calc_temp_rs
 10417  0CA5                     _calc_temp_rs:	
 10418                           
 10419                           ;sample.c: 151: uint32_t x,y;
 10420                           ;sample.c: 152: y=12000UL;
 10421                           
 10422                           ;incstack = 0
 10423                           ; Regs used in _calc_temp_rs: [wreg+status,2+status,0+pclath+cstack]
 10424  0CA5  302E               	movlw	46
 10425  0CA6  01B0               	clrf	calc_temp_rs@y+3
 10426  0CA7  01AF               	clrf	calc_temp_rs@y+2
 10427  0CA8  00AE               	movwf	calc_temp_rs@y+1
 10428  0CA9  30E0               	movlw	224
 10429  0CAA  00AD               	movwf	calc_temp_rs@y
 10430                           
 10431                           ;sample.c: 153: y=y*rtAdcValueRsHi;
 10432  0CAB  0856               	movf	_rtAdcValueRsHi,w
 10433  0CAC  00F1               	movwf	___lmul@multiplier
 10434  0CAD  0857               	movf	_rtAdcValueRsHi+1,w
 10435  0CAE  00F2               	movwf	___lmul@multiplier+1
 10436  0CAF  01F3               	clrf	___lmul@multiplier+2
 10437  0CB0  01F4               	clrf	___lmul@multiplier+3
 10438  0CB1  0830               	movf	calc_temp_rs@y+3,w
 10439  0CB2  00F8               	movwf	___lmul@multiplicand+3
 10440  0CB3  082F               	movf	calc_temp_rs@y+2,w
 10441  0CB4  00F7               	movwf	___lmul@multiplicand+2
 10442  0CB5  082E               	movf	calc_temp_rs@y+1,w
 10443  0CB6  00F6               	movwf	___lmul@multiplicand+1
 10444  0CB7  082D               	movf	calc_temp_rs@y,w
 10445  0CB8  00F5               	movwf	___lmul@multiplicand
 10446  0CB9  3185  2569  318C   	fcall	___lmul
 10447  0CBC  0874               	movf	?___lmul+3,w
 10448  0CBD  00B0               	movwf	calc_temp_rs@y+3
 10449  0CBE  0873               	movf	?___lmul+2,w
 10450  0CBF  00AF               	movwf	calc_temp_rs@y+2
 10451  0CC0  0872               	movf	?___lmul+1,w
 10452  0CC1  00AE               	movwf	calc_temp_rs@y+1
 10453  0CC2  0871               	movf	?___lmul,w
 10454  0CC3  00AD               	movwf	calc_temp_rs@y
 10455                           
 10456                           ;sample.c: 154: x=rtAdcValueRsLo;
 10457  0CC4  0858               	movf	_rtAdcValueRsLo,w
 10458  0CC5  00A9               	movwf	calc_temp_rs@x
 10459  0CC6  0859               	movf	_rtAdcValueRsLo+1,w
 10460  0CC7  00AA               	movwf	calc_temp_rs@x+1
 10461  0CC8  01AB               	clrf	calc_temp_rs@x+2
 10462  0CC9  01AC               	clrf	calc_temp_rs@x+3
 10463                           
 10464                           ;sample.c: 155: y=y/x;
 10465  0CCA  082C               	movf	calc_temp_rs@x+3,w
 10466  0CCB  00F4               	movwf	___lldiv@divisor+3
 10467  0CCC  082B               	movf	calc_temp_rs@x+2,w
 10468  0CCD  00F3               	movwf	___lldiv@divisor+2
 10469  0CCE  082A               	movf	calc_temp_rs@x+1,w
 10470  0CCF  00F2               	movwf	___lldiv@divisor+1
 10471  0CD0  0829               	movf	calc_temp_rs@x,w
 10472  0CD1  00F1               	movwf	___lldiv@divisor
 10473  0CD2  0830               	movf	calc_temp_rs@y+3,w
 10474  0CD3  00F8               	movwf	___lldiv@dividend+3
 10475  0CD4  082F               	movf	calc_temp_rs@y+2,w
 10476  0CD5  00F7               	movwf	___lldiv@dividend+2
 10477  0CD6  082E               	movf	calc_temp_rs@y+1,w
 10478  0CD7  00F6               	movwf	___lldiv@dividend+1
 10479  0CD8  082D               	movf	calc_temp_rs@y,w
 10480  0CD9  00F5               	movwf	___lldiv@dividend
 10481  0CDA  25B7  318C         	fcall	___lldiv
 10482  0CDC  0874               	movf	?___lldiv+3,w
 10483  0CDD  00B0               	movwf	calc_temp_rs@y+3
 10484  0CDE  0873               	movf	?___lldiv+2,w
 10485  0CDF  00AF               	movwf	calc_temp_rs@y+2
 10486  0CE0  0872               	movf	?___lldiv+1,w
 10487  0CE1  00AE               	movwf	calc_temp_rs@y+1
 10488  0CE2  0871               	movf	?___lldiv,w
 10489  0CE3  00AD               	movwf	calc_temp_rs@y
 10490                           
 10491                           ;sample.c: 156: if(y<2000)y=2000;
 10492  0CE4  0830               	movf	calc_temp_rs@y+3,w
 10493  0CE5  1D03               	btfss	3,2
 10494  0CE6  2CF6               	goto	l3780
 10495  0CE7  082F               	movf	calc_temp_rs@y+2,w
 10496  0CE8  1D03               	btfss	3,2
 10497  0CE9  2CF6               	goto	l3780
 10498  0CEA  30D0               	movlw	208
 10499  0CEB  022D               	subwf	calc_temp_rs@y,w
 10500  0CEC  3007               	movlw	7
 10501  0CED  3B2E               	subwfb	calc_temp_rs@y+1,w
 10502  0CEE  1803               	btfsc	3,0
 10503  0CEF  2CF6               	goto	l3780
 10504  0CF0  3007               	movlw	7
 10505  0CF1  01B0               	clrf	calc_temp_rs@y+3
 10506  0CF2  01AF               	clrf	calc_temp_rs@y+2
 10507  0CF3  00AE               	movwf	calc_temp_rs@y+1
 10508  0CF4  30D0               	movlw	208
 10509  0CF5  00AD               	movwf	calc_temp_rs@y
 10510  0CF6                     l3780:	
 10511                           
 10512                           ;sample.c: 157: if(y>25000)y=25000;
 10513  0CF6  0830               	movf	calc_temp_rs@y+3,w
 10514  0CF7  1D03               	btfss	3,2
 10515  0CF8  2D02               	goto	l3782
 10516  0CF9  082F               	movf	calc_temp_rs@y+2,w
 10517  0CFA  1D03               	btfss	3,2
 10518  0CFB  2D02               	goto	l3782
 10519  0CFC  30A9               	movlw	169
 10520  0CFD  022D               	subwf	calc_temp_rs@y,w
 10521  0CFE  3061               	movlw	97
 10522  0CFF  3B2E               	subwfb	calc_temp_rs@y+1,w
 10523  0D00  1C03               	btfss	3,0
 10524  0D01  2D08               	goto	l3784
 10525  0D02                     l3782:	
 10526  0D02  3061               	movlw	97
 10527  0D03  01B0               	clrf	calc_temp_rs@y+3
 10528  0D04  01AF               	clrf	calc_temp_rs@y+2
 10529  0D05  00AE               	movwf	calc_temp_rs@y+1
 10530  0D06  30A8               	movlw	168
 10531  0D07  00AD               	movwf	calc_temp_rs@y
 10532  0D08                     l3784:	
 10533                           
 10534                           ;sample.c: 158: y=y-1000;
 10535  0D08  3018               	movlw	24
 10536  0D09  07AD               	addwf	calc_temp_rs@y,f
 10537  0D0A  30FC               	movlw	252
 10538  0D0B  3DAE               	addwfc	calc_temp_rs@y+1,f
 10539  0D0C  30FF               	movlw	255
 10540  0D0D  3DAF               	addwfc	calc_temp_rs@y+2,f
 10541  0D0E  3DB0               	addwfc	calc_temp_rs@y+3,f
 10542                           
 10543                           ;sample.c: 160: return y;
 10544  0D0F  0830               	movf	calc_temp_rs@y+3,w
 10545  0D10  00A8               	movwf	?_calc_temp_rs+3
 10546  0D11  082F               	movf	calc_temp_rs@y+2,w
 10547  0D12  00A7               	movwf	?_calc_temp_rs+2
 10548  0D13  082E               	movf	calc_temp_rs@y+1,w
 10549  0D14  00A6               	movwf	?_calc_temp_rs+1
 10550  0D15  082D               	movf	calc_temp_rs@y,w
 10551  0D16  00A5               	movwf	?_calc_temp_rs
 10552  0D17  0008               	return
 10553  0D18                     __end_of_calc_temp_rs:	
 10554  0D18                     __ptext28:	
 10555 ;; *************** function _calc_temp_rc *****************
 10556 ;; Defined at:
 10557 ;;		line 164 in file "src/api/sample.c"
 10558 ;; Parameters:    Size  Location     Type
 10559 ;;		None
 10560 ;; Auto vars:     Size  Location     Type
 10561 ;;  y               4   17[BANK0 ] unsigned long 
 10562 ;;  x               4   13[BANK0 ] unsigned long 
 10563 ;; Return value:  Size  Location     Type
 10564 ;;                  4    5[BANK0 ] unsigned long 
 10565 ;; Registers used:
 10566 ;;		wreg, status,2, status,0, pclath, cstack
 10567 ;; Tracked objects:
 10568 ;;		On entry : 1F/0
 10569 ;;		On exit  : 1F/0
 10570 ;;		Unchanged: 0/0
 10571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10572 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10573 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10574 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10575 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10576 ;;Total ram usage:       16 bytes
 10577 ;; Hardware stack levels used:    1
 10578 ;; Hardware stack levels required when called:    2
 10579 ;; This function calls:
 10580 ;;		___lldiv
 10581 ;;		___lmul
 10582 ;; This function is called by:
 10583 ;;		_main
 10584 ;; This function uses a non-reentrant model
 10585 ;;
 10586                           
 10587                           
 10588                           ;psect for function _calc_temp_rc
 10589  0D18                     _calc_temp_rc:	
 10590                           
 10591                           ;sample.c: 167: uint32_t x,y;
 10592                           ;sample.c: 168: x=300000UL;
 10593                           
 10594                           ;incstack = 0
 10595                           ; Regs used in _calc_temp_rc: [wreg+status,2+status,0+pclath+cstack]
 10596  0D18  3004               	movlw	4
 10597  0D19  01B0               	clrf	calc_temp_rc@x+3
 10598  0D1A  00AF               	movwf	calc_temp_rc@x+2
 10599  0D1B  3093               	movlw	147
 10600  0D1C  00AE               	movwf	calc_temp_rc@x+1
 10601  0D1D  30E0               	movlw	224
 10602  0D1E  00AD               	movwf	calc_temp_rc@x
 10603                           
 10604                           ;sample.c: 169: x=x*rtAdcValueRcLo;
 10605  0D1F  0854               	movf	_rtAdcValueRcLo,w
 10606  0D20  00F1               	movwf	___lmul@multiplier
 10607  0D21  0855               	movf	_rtAdcValueRcLo+1,w
 10608  0D22  00F2               	movwf	___lmul@multiplier+1
 10609  0D23  01F3               	clrf	___lmul@multiplier+2
 10610  0D24  01F4               	clrf	___lmul@multiplier+3
 10611  0D25  0830               	movf	calc_temp_rc@x+3,w
 10612  0D26  00F8               	movwf	___lmul@multiplicand+3
 10613  0D27  082F               	movf	calc_temp_rc@x+2,w
 10614  0D28  00F7               	movwf	___lmul@multiplicand+2
 10615  0D29  082E               	movf	calc_temp_rc@x+1,w
 10616  0D2A  00F6               	movwf	___lmul@multiplicand+1
 10617  0D2B  082D               	movf	calc_temp_rc@x,w
 10618  0D2C  00F5               	movwf	___lmul@multiplicand
 10619  0D2D  3185  2569  318C   	fcall	___lmul
 10620  0D30  0874               	movf	?___lmul+3,w
 10621  0D31  00B0               	movwf	calc_temp_rc@x+3
 10622  0D32  0873               	movf	?___lmul+2,w
 10623  0D33  00AF               	movwf	calc_temp_rc@x+2
 10624  0D34  0872               	movf	?___lmul+1,w
 10625  0D35  00AE               	movwf	calc_temp_rc@x+1
 10626  0D36  0871               	movf	?___lmul,w
 10627  0D37  00AD               	movwf	calc_temp_rc@x
 10628                           
 10629                           ;sample.c: 172: y=rtAdcValueRcHi;
 10630  0D38  0852               	movf	_rtAdcValueRcHi,w
 10631  0D39  00B1               	movwf	calc_temp_rc@y
 10632  0D3A  0853               	movf	_rtAdcValueRcHi+1,w
 10633  0D3B  00B2               	movwf	calc_temp_rc@y+1
 10634  0D3C  300C               	movlw	12
 10635  0D3D  01B3               	clrf	calc_temp_rc@y+2
 10636  0D3E  01B4               	clrf	calc_temp_rc@y+3
 10637                           
 10638                           ;sample.c: 173: y=y*3140;
 10639  0D3F  01F4               	clrf	___lmul@multiplier+3
 10640  0D40  01F3               	clrf	___lmul@multiplier+2
 10641  0D41  00F2               	movwf	___lmul@multiplier+1
 10642  0D42  3044               	movlw	68
 10643  0D43  00F1               	movwf	___lmul@multiplier
 10644  0D44  0834               	movf	calc_temp_rc@y+3,w
 10645  0D45  00F8               	movwf	___lmul@multiplicand+3
 10646  0D46  0833               	movf	calc_temp_rc@y+2,w
 10647  0D47  00F7               	movwf	___lmul@multiplicand+2
 10648  0D48  0832               	movf	calc_temp_rc@y+1,w
 10649  0D49  00F6               	movwf	___lmul@multiplicand+1
 10650  0D4A  0831               	movf	calc_temp_rc@y,w
 10651  0D4B  00F5               	movwf	___lmul@multiplicand
 10652  0D4C  3185  2569  318C   	fcall	___lmul
 10653  0D4F  0874               	movf	?___lmul+3,w
 10654  0D50  00B4               	movwf	calc_temp_rc@y+3
 10655  0D51  0873               	movf	?___lmul+2,w
 10656  0D52  00B3               	movwf	calc_temp_rc@y+2
 10657  0D53  0872               	movf	?___lmul+1,w
 10658  0D54  00B2               	movwf	calc_temp_rc@y+1
 10659  0D55  0871               	movf	?___lmul,w
 10660  0D56  00B1               	movwf	calc_temp_rc@y
 10661                           
 10662                           ;sample.c: 174: y=y/100;
 10663  0D57  3064               	movlw	100
 10664  0D58  00F1               	movwf	___lldiv@divisor
 10665  0D59  01F2               	clrf	___lldiv@divisor+1
 10666  0D5A  01F3               	clrf	___lldiv@divisor+2
 10667  0D5B  01F4               	clrf	___lldiv@divisor+3
 10668  0D5C  0834               	movf	calc_temp_rc@y+3,w
 10669  0D5D  00F8               	movwf	___lldiv@dividend+3
 10670  0D5E  0833               	movf	calc_temp_rc@y+2,w
 10671  0D5F  00F7               	movwf	___lldiv@dividend+2
 10672  0D60  0832               	movf	calc_temp_rc@y+1,w
 10673  0D61  00F6               	movwf	___lldiv@dividend+1
 10674  0D62  0831               	movf	calc_temp_rc@y,w
 10675  0D63  00F5               	movwf	___lldiv@dividend
 10676  0D64  25B7  318C         	fcall	___lldiv
 10677  0D66  25F6  318C         	fcall	PL14	;call to abstracted procedure
 10678                           
 10679                           ;sample.c: 175: y=y-rtAdcValueRcLo;
 10680  0D68  0854               	movf	_rtAdcValueRcLo,w
 10681  0D69  00A9               	movwf	??_calc_temp_rc
 10682  0D6A  0855               	movf	_rtAdcValueRcLo+1,w
 10683  0D6B  00AA               	movwf	??_calc_temp_rc+1
 10684  0D6C  01AB               	clrf	??_calc_temp_rc+2
 10685  0D6D  01AC               	clrf	??_calc_temp_rc+3
 10686  0D6E  0829               	movf	??_calc_temp_rc,w
 10687  0D6F  02B1               	subwf	calc_temp_rc@y,f
 10688  0D70  082A               	movf	??_calc_temp_rc+1,w
 10689  0D71  3BB2               	subwfb	calc_temp_rc@y+1,f
 10690  0D72  082B               	movf	??_calc_temp_rc+2,w
 10691  0D73  3BB3               	subwfb	calc_temp_rc@y+2,f
 10692  0D74  082C               	movf	??_calc_temp_rc+3,w
 10693  0D75  3BB4               	subwfb	calc_temp_rc@y+3,f
 10694                           
 10695                           ;sample.c: 178: y=x/y;
 10696  0D76  0834               	movf	calc_temp_rc@y+3,w
 10697  0D77  00F4               	movwf	___lldiv@divisor+3
 10698  0D78  0833               	movf	calc_temp_rc@y+2,w
 10699  0D79  00F3               	movwf	___lldiv@divisor+2
 10700  0D7A  0832               	movf	calc_temp_rc@y+1,w
 10701  0D7B  00F2               	movwf	___lldiv@divisor+1
 10702  0D7C  0831               	movf	calc_temp_rc@y,w
 10703  0D7D  00F1               	movwf	___lldiv@divisor
 10704  0D7E  0830               	movf	calc_temp_rc@x+3,w
 10705  0D7F  00F8               	movwf	___lldiv@dividend+3
 10706  0D80  082F               	movf	calc_temp_rc@x+2,w
 10707  0D81  00F7               	movwf	___lldiv@dividend+2
 10708  0D82  082E               	movf	calc_temp_rc@x+1,w
 10709  0D83  00F6               	movwf	___lldiv@dividend+1
 10710  0D84  082D               	movf	calc_temp_rc@x,w
 10711  0D85  00F5               	movwf	___lldiv@dividend
 10712  0D86  25B7  318C         	fcall	___lldiv
 10713  0D88  25F6  318C         	fcall	PL14	;call to abstracted procedure
 10714                           
 10715                           ;sample.c: 179: if(y<2000)y=2000;
 10716  0D8A  0834               	movf	calc_temp_rc@y+3,w
 10717  0D8B  1D03               	btfss	3,2
 10718  0D8C  2D9C               	goto	l3804
 10719  0D8D  0833               	movf	calc_temp_rc@y+2,w
 10720  0D8E  1D03               	btfss	3,2
 10721  0D8F  2D9C               	goto	l3804
 10722  0D90  30D0               	movlw	208
 10723  0D91  0231               	subwf	calc_temp_rc@y,w
 10724  0D92  3007               	movlw	7
 10725  0D93  3B32               	subwfb	calc_temp_rc@y+1,w
 10726  0D94  1803               	btfsc	3,0
 10727  0D95  2D9C               	goto	l3804
 10728  0D96  3007               	movlw	7
 10729  0D97  01B4               	clrf	calc_temp_rc@y+3
 10730  0D98  01B3               	clrf	calc_temp_rc@y+2
 10731  0D99  00B2               	movwf	calc_temp_rc@y+1
 10732  0D9A  30D0               	movlw	208
 10733  0D9B  00B1               	movwf	calc_temp_rc@y
 10734  0D9C                     l3804:	
 10735                           
 10736                           ;sample.c: 180: if(y>25000)y=25000;
 10737  0D9C  0834               	movf	calc_temp_rc@y+3,w
 10738  0D9D  1D03               	btfss	3,2
 10739  0D9E  2DA8               	goto	l3806
 10740  0D9F  0833               	movf	calc_temp_rc@y+2,w
 10741  0DA0  1D03               	btfss	3,2
 10742  0DA1  2DA8               	goto	l3806
 10743  0DA2  30A9               	movlw	169
 10744  0DA3  0231               	subwf	calc_temp_rc@y,w
 10745  0DA4  3061               	movlw	97
 10746  0DA5  3B32               	subwfb	calc_temp_rc@y+1,w
 10747  0DA6  1C03               	btfss	3,0
 10748  0DA7  2DAE               	goto	l604
 10749  0DA8                     l3806:	
 10750  0DA8  3061               	movlw	97
 10751  0DA9  01B4               	clrf	calc_temp_rc@y+3
 10752  0DAA  01B3               	clrf	calc_temp_rc@y+2
 10753  0DAB  00B2               	movwf	calc_temp_rc@y+1
 10754  0DAC  30A8               	movlw	168
 10755  0DAD  00B1               	movwf	calc_temp_rc@y
 10756  0DAE                     l604:	
 10757                           
 10758                           ;sample.c: 182: return y;
 10759  0DAE  0834               	movf	calc_temp_rc@y+3,w
 10760  0DAF  00A8               	movwf	?_calc_temp_rc+3
 10761  0DB0  0833               	movf	calc_temp_rc@y+2,w
 10762  0DB1  00A7               	movwf	?_calc_temp_rc+2
 10763  0DB2  0832               	movf	calc_temp_rc@y+1,w
 10764  0DB3  00A6               	movwf	?_calc_temp_rc+1
 10765  0DB4  0831               	movf	calc_temp_rc@y,w
 10766  0DB5  00A5               	movwf	?_calc_temp_rc
 10767  0DB6  0008               	return
 10768  0DB7                     __end_of_calc_temp_rc:	
 10769  0DB7                     __ptext29:	
 10770 ;; *************** function ___lldiv *****************
 10771 ;; Defined at:
 10772 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lldiv.c"
 10773 ;; Parameters:    Size  Location     Type
 10774 ;;  divisor         4    1[COMMON] unsigned long 
 10775 ;;  dividend        4    5[COMMON] unsigned long 
 10776 ;; Auto vars:     Size  Location     Type
 10777 ;;  quotient        4    0[BANK0 ] unsigned long 
 10778 ;;  counter         1    4[BANK0 ] unsigned char 
 10779 ;; Return value:  Size  Location     Type
 10780 ;;                  4    1[COMMON] unsigned long 
 10781 ;; Registers used:
 10782 ;;		wreg, status,2, status,0
 10783 ;; Tracked objects:
 10784 ;;		On entry : 1F/0
 10785 ;;		On exit  : 1F/0
 10786 ;;		Unchanged: 0/0
 10787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10788 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10789 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10791 ;;      Totals:         8       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10792 ;;Total ram usage:       13 bytes
 10793 ;; Hardware stack levels used:    1
 10794 ;; Hardware stack levels required when called:    1
 10795 ;; This function calls:
 10796 ;;		Nothing
 10797 ;; This function is called by:
 10798 ;;		_calc_temp_rs
 10799 ;;		_calc_temp_rc
 10800 ;; This function uses a non-reentrant model
 10801 ;;
 10802                           
 10803                           
 10804                           ;psect for function ___lldiv
 10805  0DB7                     ___lldiv:	
 10806                           
 10807                           ;incstack = 0
 10808                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 10809  0DB7  01A0               	clrf	___lldiv@quotient
 10810  0DB8  01A1               	clrf	___lldiv@quotient+1
 10811  0DB9  01A2               	clrf	___lldiv@quotient+2
 10812  0DBA  01A3               	clrf	___lldiv@quotient+3
 10813  0DBB  0874               	movf	___lldiv@divisor+3,w
 10814  0DBC  0473               	iorwf	___lldiv@divisor+2,w
 10815  0DBD  0472               	iorwf	___lldiv@divisor+1,w
 10816  0DBE  0471               	iorwf	___lldiv@divisor,w
 10817  0DBF  1903               	skipnz
 10818  0DC0  2DED               	goto	l3124
 10819  0DC1  01A4               	clrf	___lldiv@counter
 10820  0DC2                     L8:	
 10821  0DC2  0AA4               	incf	___lldiv@counter,f
 10822  0DC3  1BF4               	btfsc	___lldiv@divisor+3,7
 10823  0DC4  2DCA               	goto	l3112
 10824  0DC5  35F1               	lslf	___lldiv@divisor,f
 10825  0DC6  0DF2               	rlf	___lldiv@divisor+1,f
 10826  0DC7  0DF3               	rlf	___lldiv@divisor+2,f
 10827  0DC8  0DF4               	rlf	___lldiv@divisor+3,f
 10828  0DC9  2DC2               	goto	L8
 10829  0DCA                     l3112:	
 10830  0DCA  35A0               	lslf	___lldiv@quotient,f
 10831  0DCB  0DA1               	rlf	___lldiv@quotient+1,f
 10832  0DCC  0DA2               	rlf	___lldiv@quotient+2,f
 10833  0DCD  0DA3               	rlf	___lldiv@quotient+3,f
 10834  0DCE  0874               	movf	___lldiv@divisor+3,w
 10835  0DCF  0278               	subwf	___lldiv@dividend+3,w
 10836  0DD0  1D03               	skipz
 10837  0DD1  2DDC               	goto	u1725
 10838  0DD2  0873               	movf	___lldiv@divisor+2,w
 10839  0DD3  0277               	subwf	___lldiv@dividend+2,w
 10840  0DD4  1D03               	skipz
 10841  0DD5  2DDC               	goto	u1725
 10842  0DD6  0872               	movf	___lldiv@divisor+1,w
 10843  0DD7  0276               	subwf	___lldiv@dividend+1,w
 10844  0DD8  1D03               	skipz
 10845  0DD9  2DDC               	goto	u1725
 10846  0DDA  0871               	movf	___lldiv@divisor,w
 10847  0DDB  0275               	subwf	___lldiv@dividend,w
 10848  0DDC                     u1725:	
 10849  0DDC  1C03               	skipc
 10850  0DDD  2DE7               	goto	l3120
 10851  0DDE  0871               	movf	___lldiv@divisor,w
 10852  0DDF  02F5               	subwf	___lldiv@dividend,f
 10853  0DE0  0872               	movf	___lldiv@divisor+1,w
 10854  0DE1  3BF6               	subwfb	___lldiv@dividend+1,f
 10855  0DE2  0873               	movf	___lldiv@divisor+2,w
 10856  0DE3  3BF7               	subwfb	___lldiv@dividend+2,f
 10857  0DE4  0874               	movf	___lldiv@divisor+3,w
 10858  0DE5  3BF8               	subwfb	___lldiv@dividend+3,f
 10859  0DE6  1420               	bsf	___lldiv@quotient,0
 10860  0DE7                     l3120:	
 10861  0DE7  36F4               	lsrf	___lldiv@divisor+3,f
 10862  0DE8  0CF3               	rrf	___lldiv@divisor+2,f
 10863  0DE9  0CF2               	rrf	___lldiv@divisor+1,f
 10864  0DEA  0CF1               	rrf	___lldiv@divisor,f
 10865  0DEB  0BA4               	decfsz	___lldiv@counter,f
 10866  0DEC  2DCA               	goto	l3112
 10867  0DED                     l3124:	
 10868  0DED  0823               	movf	___lldiv@quotient+3,w
 10869  0DEE  00F4               	movwf	?___lldiv+3
 10870  0DEF  0822               	movf	___lldiv@quotient+2,w
 10871  0DF0  00F3               	movwf	?___lldiv+2
 10872  0DF1  0821               	movf	___lldiv@quotient+1,w
 10873  0DF2  00F2               	movwf	?___lldiv+1
 10874  0DF3  0820               	movf	___lldiv@quotient,w
 10875  0DF4  00F1               	movwf	?___lldiv
 10876  0DF5  0008               	return
 10877  0DF6                     __end_of___lldiv:	
 10878  0DF6                     PL14:	
 10879  0DF6  0874               	movf	?___lldiv+3,w
 10880  0DF7  00B4               	movwf	calc_temp_rc@y+3
 10881  0DF8  0873               	movf	?___lldiv+2,w
 10882  0DF9  00B3               	movwf	calc_temp_rc@y+2
 10883  0DFA  0872               	movf	?___lldiv+1,w
 10884  0DFB  00B2               	movwf	calc_temp_rc@y+1
 10885  0DFC  0871               	movf	?___lldiv,w
 10886  0DFD  00B1               	movwf	calc_temp_rc@y
 10887  0DFE  0008               	return
 10888  0DFF                     __end_ofPL14:	
 10889                           
 10890                           	psect	text30
 10891  0B82                     __ptext30:	
 10892 ;; *************** function _calc_expect_vout_adc_value *****************
 10893 ;; Defined at:
 10894 ;;		line 372 in file "src/api/sample.c"
 10895 ;; Parameters:    Size  Location     Type
 10896 ;;  x               2   18[BANK0 ] unsigned int 
 10897 ;; Auto vars:     Size  Location     Type
 10898 ;;  t32             4   16[BANK2 ] long 
 10899 ;;  x0              4   12[BANK2 ] long 
 10900 ;;  y0              4    8[BANK2 ] long 
 10901 ;;  x1              4    4[BANK2 ] long 
 10902 ;;  y1              4    0[BANK2 ] long 
 10903 ;;  i               1   20[BANK2 ] unsigned char 
 10904 ;;  index           1    0        unsigned char 
 10905 ;; Return value:  Size  Location     Type
 10906 ;;                  2   18[BANK0 ] unsigned int 
 10907 ;; Registers used:
 10908 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10909 ;; Tracked objects:
 10910 ;;		On entry : 1F/0
 10911 ;;		On exit  : 1F/0
 10912 ;;		Unchanged: 0/0
 10913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10914 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10915 ;;      Locals:         0       0       0      21       0       0       0       0       0       0       0       0       
      +0       0
 10916 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10917 ;;      Totals:         0       6       0      21       0       0       0       0       0       0       0       0       
      +0       0
 10918 ;;Total ram usage:       27 bytes
 10919 ;; Hardware stack levels used:    1
 10920 ;; Hardware stack levels required when called:    2
 10921 ;; This function calls:
 10922 ;;		___aldiv
 10923 ;;		___lmul
 10924 ;; This function is called by:
 10925 ;;		_main
 10926 ;; This function uses a non-reentrant model
 10927 ;;
 10928                           
 10929                           
 10930                           ;psect for function _calc_expect_vout_adc_value
 10931  0B82                     _calc_expect_vout_adc_value:	
 10932                           
 10933                           ;sample.c: 375: int32_t y0,y1,x0,x1;
 10934                           ;sample.c: 376: uint8_t i;
 10935                           ;sample.c: 377: int32_t t32;
 10936                           ;sample.c: 378: for (i = 0; i < 10-2; i++) {
 10937                           
 10938                           ;incstack = 0
 10939                           ; Regs used in _calc_expect_vout_adc_value: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 10940  0B82  0022               	movlb	2	; select bank2
 10941  0B83  01E8               	clrf	calc_expect_vout_adc_value@i^(0+256)
 10942  0B84                     l3912:	
 10943                           
 10944                           ;sample.c: 379: if(sysData.calibSimuPowerVaule[i]<sysData.calibSimuPowerVaule[i+1]){
 10945  0B84  3568               	lslf	calc_expect_vout_adc_value@i^(0+256),w
 10946  0B85  3E2C               	addlw	(low ((_sysData| (0+256)+12)))& (0+255)
 10947  0B86  2493  318B         	fcall	PL4	;call to abstracted procedure
 10948  0B88  0022               	movlb	2	; select bank2
 10949  0B89  3568               	lslf	calc_expect_vout_adc_value@i^(0+256),w
 10950  0B8A  3E2A               	addlw	(low ((_sysData| (0+256)+10)))& (0+255)
 10951  0B8B  0086               	movwf	6
 10952  0B8C  3F40               	moviw [0]fsr1
 10953  0B8D  0020               	movlb	0	; select bank0
 10954  0B8E  00B6               	movwf	??_calc_expect_vout_adc_value+2
 10955  0B8F  3F41               	moviw [1]fsr1
 10956  0B90  00B7               	movwf	??_calc_expect_vout_adc_value+3
 10957  0B91  0835               	movf	??_calc_expect_vout_adc_value+1,w
 10958  0B92  0237               	subwf	??_calc_expect_vout_adc_value+3,w
 10959  0B93  1D03               	skipz
 10960  0B94  2B97               	goto	u2685
 10961  0B95  0834               	movf	??_calc_expect_vout_adc_value,w
 10962  0B96  0236               	subwf	??_calc_expect_vout_adc_value+2,w
 10963  0B97                     u2685:	
 10964  0B97  1803               	skipnc
 10965  0B98  2BA4               	goto	l3918
 10966                           
 10967                           ;sample.c: 380: if (x < sysData.calibSimuPowerVaule[i])break;
 10968  0B99  0022               	movlb	2	; select bank2
 10969  0B9A  3568               	lslf	calc_expect_vout_adc_value@i^(0+256),w
 10970  0B9B  3E2A               	addlw	(low ((_sysData| (0+256)+10)))& (0+255)
 10971  0B9C  2493  318B         	fcall	PL4	;call to abstracted procedure
 10972  0B9E  0233               	subwf	calc_expect_vout_adc_value@x+1,w
 10973  0B9F  1D03               	skipz
 10974  0BA0  2BAF               	goto	u2705
 10975  0BA1  0834               	movf	??_calc_expect_vout_adc_value,w
 10976  0BA2  0232               	subwf	calc_expect_vout_adc_value@x,w
 10977  0BA3  2BAF               	goto	u2705
 10978  0BA4                     l3918:	
 10979                           
 10980                           ;sample.c: 382: if (x > sysData.calibSimuPowerVaule[i])break;
 10981  0BA4  0022               	movlb	2	; select bank2
 10982  0BA5  3568               	lslf	calc_expect_vout_adc_value@i^(0+256),w
 10983  0BA6  3E2A               	addlw	(low ((_sysData| (0+256)+10)))& (0+255)
 10984  0BA7  2493  318B         	fcall	PL4	;call to abstracted procedure
 10985  0BA9  0833               	movf	calc_expect_vout_adc_value@x+1,w
 10986  0BAA  0235               	subwf	??_calc_expect_vout_adc_value+1,w
 10987  0BAB  1D03               	skipz
 10988  0BAC  2BAF               	goto	u2705
 10989  0BAD  0832               	movf	calc_expect_vout_adc_value@x,w
 10990  0BAE  0234               	subwf	??_calc_expect_vout_adc_value,w
 10991  0BAF                     u2705:	
 10992  0BAF  1C03               	btfss	3,0
 10993  0BB0  2BB7               	goto	l3926
 10994  0BB1  0022               	movlb	2	; select bank2
 10995  0BB2  3008               	movlw	8
 10996  0BB3  0AE8               	incf	calc_expect_vout_adc_value@i^(0+256),f
 10997  0BB4  0268               	subwf	calc_expect_vout_adc_value@i^(0+256),w
 10998  0BB5  1C03               	skipc
 10999  0BB6  2B84               	goto	l3912
 11000  0BB7                     l3926:	
 11001                           
 11002                           ;sample.c: 383: }
 11003                           ;sample.c: 384: }
 11004                           ;sample.c: 385: if(i)i--;
 11005  0BB7  0022               	movlb	2	; select bank2
 11006  0BB8  0868               	movf	calc_expect_vout_adc_value@i^(0+256),w
 11007  0BB9  1D03               	btfss	3,2
 11008  0BBA  03E8               	decf	calc_expect_vout_adc_value@i^(0+256),f
 11009                           
 11010                           ;sample.c: 386: if (i > 10-2)i=10-2;
 11011  0BBB  3009               	movlw	9
 11012  0BBC  0268               	subwf	calc_expect_vout_adc_value@i^(0+256),w
 11013  0BBD  3008               	movlw	8
 11014  0BBE  1803               	btfsc	3,0
 11015  0BBF  00E8               	movwf	calc_expect_vout_adc_value@i^(0+256)
 11016                           
 11017                           ;sample.c: 387: y1=sysData.calibVoutAdcValue[i+1];
 11018  0BC0  3568               	lslf	calc_expect_vout_adc_value@i^(0+256),w
 11019  0BC1  3E40               	addlw	(low ((_sysData| (0+256)+32)))& (0+255)
 11020  0BC2  2493  318B         	fcall	PL4	;call to abstracted procedure
 11021  0BC4  0834               	movf	??_calc_expect_vout_adc_value,w
 11022  0BC5  0022               	movlb	2	; select bank2
 11023  0BC6  00D4               	movwf	calc_expect_vout_adc_value@y1^(0+256)
 11024  0BC7  0020               	movlb	0	; select bank0
 11025  0BC8  0835               	movf	??_calc_expect_vout_adc_value+1,w
 11026  0BC9  0022               	movlb	2	; select bank2
 11027  0BCA  00D5               	movwf	(calc_expect_vout_adc_value@y1^(0+256)+1)
 11028  0BCB  01D6               	clrf	(calc_expect_vout_adc_value@y1^(0+256)+2)
 11029  0BCC  01D7               	clrf	(calc_expect_vout_adc_value@y1^(0+256)+3)
 11030                           
 11031                           ;sample.c: 388: y0=sysData.calibVoutAdcValue[i];
 11032  0BCD  3568               	lslf	calc_expect_vout_adc_value@i^(0+256),w
 11033  0BCE  3E3E               	addlw	(low ((_sysData| (0+256)+30)))& (0+255)
 11034  0BCF  249C  318B         	fcall	PL6	;call to abstracted procedure
 11035  0BD1  00DC               	movwf	calc_expect_vout_adc_value@y0^(0+256)
 11036  0BD2  0020               	movlb	0	; select bank0
 11037  0BD3  0835               	movf	??_calc_expect_vout_adc_value+1,w
 11038  0BD4  0022               	movlb	2	; select bank2
 11039  0BD5  00DD               	movwf	(calc_expect_vout_adc_value@y0^(0+256)+1)
 11040  0BD6  01DE               	clrf	(calc_expect_vout_adc_value@y0^(0+256)+2)
 11041  0BD7  01DF               	clrf	(calc_expect_vout_adc_value@y0^(0+256)+3)
 11042                           
 11043                           ;sample.c: 391: x1=sysData.calibSimuPowerVaule[i+1];
 11044  0BD8  3568               	lslf	calc_expect_vout_adc_value@i^(0+256),w
 11045  0BD9  3E2C               	addlw	(low ((_sysData| (0+256)+12)))& (0+255)
 11046  0BDA  249C  318B         	fcall	PL6	;call to abstracted procedure
 11047  0BDC  00D8               	movwf	calc_expect_vout_adc_value@x1^(0+256)
 11048  0BDD  0020               	movlb	0	; select bank0
 11049  0BDE  0835               	movf	??_calc_expect_vout_adc_value+1,w
 11050  0BDF  0022               	movlb	2	; select bank2
 11051  0BE0  00D9               	movwf	(calc_expect_vout_adc_value@x1^(0+256)+1)
 11052  0BE1  01DA               	clrf	(calc_expect_vout_adc_value@x1^(0+256)+2)
 11053  0BE2  01DB               	clrf	(calc_expect_vout_adc_value@x1^(0+256)+3)
 11054                           
 11055                           ;sample.c: 392: x0=sysData.calibSimuPowerVaule[i];
 11056  0BE3  3568               	lslf	calc_expect_vout_adc_value@i^(0+256),w
 11057  0BE4  3E2A               	addlw	(low ((_sysData| (0+256)+10)))& (0+255)
 11058  0BE5  249C  318B         	fcall	PL6	;call to abstracted procedure
 11059  0BE7  00E0               	movwf	calc_expect_vout_adc_value@x0^(0+256)
 11060  0BE8  0020               	movlb	0	; select bank0
 11061  0BE9  0835               	movf	??_calc_expect_vout_adc_value+1,w
 11062  0BEA  0022               	movlb	2	; select bank2
 11063  0BEB  00E1               	movwf	(calc_expect_vout_adc_value@x0^(0+256)+1)
 11064  0BEC  01E2               	clrf	(calc_expect_vout_adc_value@x0^(0+256)+2)
 11065  0BED  01E3               	clrf	(calc_expect_vout_adc_value@x0^(0+256)+3)
 11066                           
 11067                           ;sample.c: 395: if(x1==x0)return y0;
 11068  0BEE  0863               	movf	(calc_expect_vout_adc_value@x0+3)^(0+256),w
 11069  0BEF  065B               	xorwf	(calc_expect_vout_adc_value@x1+3)^(0+256),w
 11070  0BF0  1D03               	skipz
 11071  0BF1  2BFC               	goto	u2745
 11072  0BF2  0862               	movf	(calc_expect_vout_adc_value@x0+2)^(0+256),w
 11073  0BF3  065A               	xorwf	(calc_expect_vout_adc_value@x1+2)^(0+256),w
 11074  0BF4  1D03               	skipz
 11075  0BF5  2BFC               	goto	u2745
 11076  0BF6  0861               	movf	(calc_expect_vout_adc_value@x0+1)^(0+256),w
 11077  0BF7  0659               	xorwf	(calc_expect_vout_adc_value@x1+1)^(0+256),w
 11078  0BF8  1D03               	skipz
 11079  0BF9  2BFC               	goto	u2745
 11080  0BFA  0860               	movf	calc_expect_vout_adc_value@x0^(0+256),w
 11081  0BFB  0658               	xorwf	calc_expect_vout_adc_value@x1^(0+256),w
 11082  0BFC                     u2745:	
 11083  0BFC  1D03               	skipz
 11084  0BFD  2C06               	goto	l3946
 11085  0BFE  085D               	movf	(calc_expect_vout_adc_value@y0+1)^(0+256),w
 11086  0BFF  0020               	movlb	0	; select bank0
 11087  0C00  00B3               	movwf	?_calc_expect_vout_adc_value+1
 11088  0C01  0022               	movlb	2	; select bank2
 11089  0C02  085C               	movf	calc_expect_vout_adc_value@y0^(0+256),w
 11090  0C03  0020               	movlb	0	; select bank0
 11091  0C04  00B2               	movwf	?_calc_expect_vout_adc_value
 11092  0C05  0008               	return
 11093  0C06                     l3946:	
 11094                           
 11095                           ;sample.c: 398: t32=(x-x0);
 11096  0C06  0020               	movlb	0	; select bank0
 11097  0C07  0832               	movf	calc_expect_vout_adc_value@x,w
 11098  0C08  0022               	movlb	2	; select bank2
 11099  0C09  00E4               	movwf	calc_expect_vout_adc_value@t32^(0+256)
 11100  0C0A  0020               	movlb	0	; select bank0
 11101  0C0B  0833               	movf	calc_expect_vout_adc_value@x+1,w
 11102  0C0C  0022               	movlb	2	; select bank2
 11103  0C0D  00E5               	movwf	(calc_expect_vout_adc_value@t32^(0+256)+1)
 11104  0C0E  01E6               	clrf	(calc_expect_vout_adc_value@t32^(0+256)+2)
 11105  0C0F  01E7               	clrf	(calc_expect_vout_adc_value@t32^(0+256)+3)
 11106  0C10  0860               	movf	calc_expect_vout_adc_value@x0^(0+256),w
 11107  0C11  02E4               	subwf	calc_expect_vout_adc_value@t32^(0+256),f
 11108  0C12  0861               	movf	(calc_expect_vout_adc_value@x0+1)^(0+256),w
 11109  0C13  3BE5               	subwfb	(calc_expect_vout_adc_value@t32+1)^(0+256),f
 11110  0C14  0862               	movf	(calc_expect_vout_adc_value@x0+2)^(0+256),w
 11111  0C15  3BE6               	subwfb	(calc_expect_vout_adc_value@t32+2)^(0+256),f
 11112  0C16  0863               	movf	(calc_expect_vout_adc_value@x0+3)^(0+256),w
 11113  0C17  3BE7               	subwfb	(calc_expect_vout_adc_value@t32+3)^(0+256),f
 11114                           
 11115                           ;sample.c: 399: t32=t32*(y1-y0);
 11116  0C18  0857               	movf	(calc_expect_vout_adc_value@y1+3)^(0+256),w
 11117  0C19  00F4               	movwf	___lmul@multiplier+3
 11118  0C1A  0856               	movf	(calc_expect_vout_adc_value@y1+2)^(0+256),w
 11119  0C1B  00F3               	movwf	___lmul@multiplier+2
 11120  0C1C  0855               	movf	(calc_expect_vout_adc_value@y1+1)^(0+256),w
 11121  0C1D  00F2               	movwf	___lmul@multiplier+1
 11122  0C1E  0854               	movf	calc_expect_vout_adc_value@y1^(0+256),w
 11123  0C1F  00F1               	movwf	___lmul@multiplier
 11124  0C20  085C               	movf	calc_expect_vout_adc_value@y0^(0+256),w
 11125  0C21  02F1               	subwf	___lmul@multiplier,f
 11126  0C22  085D               	movf	(calc_expect_vout_adc_value@y0+1)^(0+256),w
 11127  0C23  3BF2               	subwfb	___lmul@multiplier+1,f
 11128  0C24  085E               	movf	(calc_expect_vout_adc_value@y0+2)^(0+256),w
 11129  0C25  3BF3               	subwfb	___lmul@multiplier+2,f
 11130  0C26  085F               	movf	(calc_expect_vout_adc_value@y0+3)^(0+256),w
 11131  0C27  3BF4               	subwfb	___lmul@multiplier+3,f
 11132  0C28  0867               	movf	(calc_expect_vout_adc_value@t32+3)^(0+256),w
 11133  0C29  00F8               	movwf	___lmul@multiplicand+3
 11134  0C2A  0866               	movf	(calc_expect_vout_adc_value@t32+2)^(0+256),w
 11135  0C2B  00F7               	movwf	___lmul@multiplicand+2
 11136  0C2C  0865               	movf	(calc_expect_vout_adc_value@t32+1)^(0+256),w
 11137  0C2D  00F6               	movwf	___lmul@multiplicand+1
 11138  0C2E  0864               	movf	calc_expect_vout_adc_value@t32^(0+256),w
 11139  0C2F  00F5               	movwf	___lmul@multiplicand
 11140  0C30  3185  2569  318B   	fcall	___lmul
 11141  0C33  0874               	movf	?___lmul+3,w
 11142  0C34  0022               	movlb	2	; select bank2
 11143  0C35  00E7               	movwf	(calc_expect_vout_adc_value@t32+3)^(0+256)
 11144  0C36  0873               	movf	?___lmul+2,w
 11145  0C37  00E6               	movwf	(calc_expect_vout_adc_value@t32+2)^(0+256)
 11146  0C38  0872               	movf	?___lmul+1,w
 11147  0C39  00E5               	movwf	(calc_expect_vout_adc_value@t32+1)^(0+256)
 11148  0C3A  0871               	movf	?___lmul,w
 11149  0C3B  00E4               	movwf	calc_expect_vout_adc_value@t32^(0+256)
 11150                           
 11151                           ;sample.c: 400: t32=t32/(x1-x0);
 11152  0C3C  085B               	movf	(calc_expect_vout_adc_value@x1+3)^(0+256),w
 11153  0C3D  0020               	movlb	0	; select bank0
 11154  0C3E  00A7               	movwf	___aldiv@divisor+3
 11155  0C3F  0022               	movlb	2	; select bank2
 11156  0C40  085A               	movf	(calc_expect_vout_adc_value@x1+2)^(0+256),w
 11157  0C41  0020               	movlb	0	; select bank0
 11158  0C42  00A6               	movwf	___aldiv@divisor+2
 11159  0C43  0022               	movlb	2	; select bank2
 11160  0C44  0859               	movf	(calc_expect_vout_adc_value@x1+1)^(0+256),w
 11161  0C45  0020               	movlb	0	; select bank0
 11162  0C46  00A5               	movwf	___aldiv@divisor+1
 11163  0C47  0022               	movlb	2	; select bank2
 11164  0C48  0858               	movf	calc_expect_vout_adc_value@x1^(0+256),w
 11165  0C49  0020               	movlb	0	; select bank0
 11166  0C4A  00A4               	movwf	___aldiv@divisor
 11167  0C4B  0022               	movlb	2	; select bank2
 11168  0C4C  0860               	movf	calc_expect_vout_adc_value@x0^(0+256),w
 11169  0C4D  0020               	movlb	0	; select bank0
 11170  0C4E  02A4               	subwf	___aldiv@divisor,f
 11171  0C4F  0022               	movlb	2	; select bank2
 11172  0C50  0861               	movf	(calc_expect_vout_adc_value@x0+1)^(0+256),w
 11173  0C51  0020               	movlb	0	; select bank0
 11174  0C52  3BA5               	subwfb	___aldiv@divisor+1,f
 11175  0C53  0022               	movlb	2	; select bank2
 11176  0C54  0862               	movf	(calc_expect_vout_adc_value@x0+2)^(0+256),w
 11177  0C55  0020               	movlb	0	; select bank0
 11178  0C56  3BA6               	subwfb	___aldiv@divisor+2,f
 11179  0C57  0022               	movlb	2	; select bank2
 11180  0C58  0863               	movf	(calc_expect_vout_adc_value@x0+3)^(0+256),w
 11181  0C59  0020               	movlb	0	; select bank0
 11182  0C5A  3BA7               	subwfb	___aldiv@divisor+3,f
 11183  0C5B  0022               	movlb	2	; select bank2
 11184  0C5C  0867               	movf	(calc_expect_vout_adc_value@t32+3)^(0+256),w
 11185  0C5D  0020               	movlb	0	; select bank0
 11186  0C5E  00AB               	movwf	___aldiv@dividend+3
 11187  0C5F  0022               	movlb	2	; select bank2
 11188  0C60  0866               	movf	(calc_expect_vout_adc_value@t32+2)^(0+256),w
 11189  0C61  0020               	movlb	0	; select bank0
 11190  0C62  00AA               	movwf	___aldiv@dividend+2
 11191  0C63  0022               	movlb	2	; select bank2
 11192  0C64  0865               	movf	(calc_expect_vout_adc_value@t32+1)^(0+256),w
 11193  0C65  0020               	movlb	0	; select bank0
 11194  0C66  00A9               	movwf	___aldiv@dividend+1
 11195  0C67  0022               	movlb	2	; select bank2
 11196  0C68  0864               	movf	calc_expect_vout_adc_value@t32^(0+256),w
 11197  0C69  0020               	movlb	0	; select bank0
 11198  0C6A  00A8               	movwf	___aldiv@dividend
 11199  0C6B  3184  24FD  318B   	fcall	___aldiv
 11200  0C6E  0827               	movf	?___aldiv+3,w
 11201  0C6F  0022               	movlb	2	; select bank2
 11202  0C70  00E7               	movwf	(calc_expect_vout_adc_value@t32+3)^(0+256)
 11203  0C71  0020               	movlb	0	; select bank0
 11204  0C72  0826               	movf	?___aldiv+2,w
 11205  0C73  0022               	movlb	2	; select bank2
 11206  0C74  00E6               	movwf	(calc_expect_vout_adc_value@t32+2)^(0+256)
 11207  0C75  0020               	movlb	0	; select bank0
 11208  0C76  0825               	movf	?___aldiv+1,w
 11209  0C77  0022               	movlb	2	; select bank2
 11210  0C78  00E5               	movwf	(calc_expect_vout_adc_value@t32+1)^(0+256)
 11211  0C79  0020               	movlb	0	; select bank0
 11212  0C7A  0824               	movf	?___aldiv,w
 11213  0C7B  0022               	movlb	2	; select bank2
 11214  0C7C  00E4               	movwf	calc_expect_vout_adc_value@t32^(0+256)
 11215                           
 11216                           ;sample.c: 401: t32=t32+y0;
 11217  0C7D  085C               	movf	calc_expect_vout_adc_value@y0^(0+256),w
 11218  0C7E  07E4               	addwf	calc_expect_vout_adc_value@t32^(0+256),f
 11219  0C7F  085D               	movf	(calc_expect_vout_adc_value@y0+1)^(0+256),w
 11220  0C80  3DE5               	addwfc	(calc_expect_vout_adc_value@t32+1)^(0+256),f
 11221  0C81  085E               	movf	(calc_expect_vout_adc_value@y0+2)^(0+256),w
 11222  0C82  3DE6               	addwfc	(calc_expect_vout_adc_value@t32+2)^(0+256),f
 11223  0C83  085F               	movf	(calc_expect_vout_adc_value@y0+3)^(0+256),w
 11224  0C84  3DE7               	addwfc	(calc_expect_vout_adc_value@t32+3)^(0+256),f
 11225                           
 11226                           ;sample.c: 402: if(t32<0)t32=0;
 11227  0C85  1FE7               	btfss	(calc_expect_vout_adc_value@t32+3)^(0+256),7
 11228  0C86  2C8B               	goto	l3956
 11229  0C87  01E4               	clrf	calc_expect_vout_adc_value@t32^(0+256)
 11230  0C88  01E5               	clrf	(calc_expect_vout_adc_value@t32+1)^(0+256)
 11231  0C89  01E6               	clrf	(calc_expect_vout_adc_value@t32+2)^(0+256)
 11232  0C8A  01E7               	clrf	(calc_expect_vout_adc_value@t32+3)^(0+256)
 11233  0C8B                     l3956:	
 11234                           
 11235                           ;sample.c: 403: return (uint16_t)t32;
 11236  0C8B  0865               	movf	(calc_expect_vout_adc_value@t32+1)^(0+256),w
 11237  0C8C  0020               	movlb	0	; select bank0
 11238  0C8D  00B3               	movwf	?_calc_expect_vout_adc_value+1
 11239  0C8E  0022               	movlb	2	; select bank2
 11240  0C8F  0864               	movf	calc_expect_vout_adc_value@t32^(0+256),w
 11241  0C90  0020               	movlb	0	; select bank0
 11242  0C91  00B2               	movwf	?_calc_expect_vout_adc_value
 11243  0C92  0008               	return
 11244  0C93                     __end_of_calc_expect_vout_adc_value:	
 11245  0C93                     PL4:	
 11246  0C93  0086               	movwf	6
 11247  0C94  3001               	movlw	1	; select bank2/3
 11248  0C95  0087               	movwf	7
 11249  0C96  3F40               	moviw [0]fsr1
 11250  0C97  0020               	movlb	0	; select bank0
 11251  0C98  00B4               	movwf	??_calc_expect_vout_adc_value
 11252  0C99  3F41               	moviw [1]fsr1
 11253  0C9A  00B5               	movwf	??_calc_expect_vout_adc_value+1
 11254  0C9B  0008               	return
 11255  0C9C                     __end_ofPL4:	
 11256  0C9C                     PL6:	
 11257  0C9C  0086               	movwf	6
 11258  0C9D  3F40               	moviw [0]fsr1
 11259  0C9E  0020               	movlb	0	; select bank0
 11260  0C9F  00B4               	movwf	??_calc_expect_vout_adc_value
 11261  0CA0  3F41               	moviw [1]fsr1
 11262  0CA1  00B5               	movwf	??_calc_expect_vout_adc_value+1
 11263  0CA2  0834               	movf	??_calc_expect_vout_adc_value,w
 11264  0CA3  0022               	movlb	2	; select bank2
 11265  0CA4  0008               	return
 11266  0CA5                     __end_ofPL6:	
 11267                           
 11268                           	psect	intentry
 11269  0004                     __pintentry:	
 11270 ;; *************** function _INTERRUPT_InterruptManager *****************
 11271 ;; Defined at:
 11272 ;;		line 54 in file "mcc_generated_files/interrupt_manager.c"
 11273 ;; Parameters:    Size  Location     Type
 11274 ;;		None
 11275 ;; Auto vars:     Size  Location     Type
 11276 ;;  t8              1    0[COMMON] unsigned char 
 11277 ;; Return value:  Size  Location     Type
 11278 ;;                  1    wreg      void 
 11279 ;; Registers used:
 11280 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11281 ;; Tracked objects:
 11282 ;;		On entry : 0/0
 11283 ;;		On exit  : 0/0
 11284 ;;		Unchanged: 0/0
 11285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11287 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11289 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11290 ;;Total ram usage:        1 bytes
 11291 ;; Hardware stack levels used:    1
 11292 ;; This function calls:
 11293 ;;		Nothing
 11294 ;; This function is called by:
 11295 ;;		Interrupt level 1
 11296 ;; This function uses a non-reentrant model
 11297 ;;
 11298                           
 11299  0004                     _INTERRUPT_InterruptManager:	
 11300                           
 11301                           ;incstack = 0
 11302                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0]
 11303  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 11304  0005  3180               	pagesel	$
 11305                           
 11306                           ;interrupt_manager.c: 57: uint8_t t8;
 11307                           ;interrupt_manager.c: 58: if(INTCONbits.PEIE == 1 && PIE1bits.TMR2IE == 1 && PIR1bits.TM
      +                          R2IF == 1)
 11308  0006  1F0B               	btfss	11,6	;volatile
 11309  0007  282F               	goto	i1l3540
 11310  0008  0021               	movlb	1	; select bank1
 11311  0009  1C91               	btfss	17,1	;volatile
 11312  000A  282F               	goto	i1l3540
 11313  000B  0020               	movlb	0	; select bank0
 11314  000C  1C91               	btfss	17,1	;volatile
 11315  000D  282F               	goto	i1l3540
 11316                           
 11317                           ;interrupt_manager.c: 59: {
 11318                           ;interrupt_manager.c: 61: PIR1bits.TMR2IF = 0;
 11319  000E  1091               	bcf	17,1	;volatile
 11320                           
 11321                           ;interrupt_manager.c: 62: Event |= (1<<1);
 11322  000F  14FC               	bsf	_Event,1	;volatile
 11323  0010  3005               	movlw	5
 11324                           
 11325                           ;interrupt_manager.c: 63: subTickerX++;
 11326  0011  0AE2               	incf	_subTickerX,f
 11327                           
 11328                           ;interrupt_manager.c: 64: subTickerX_1s++;
 11329  0012  0AE3               	incf	_subTickerX_1s,f
 11330                           
 11331                           ;interrupt_manager.c: 65: if(subTickerX>=5){
 11332  0013  0262               	subwf	_subTickerX,w
 11333  0014  1C03               	skipc
 11334  0015  2818               	goto	i1l3522
 11335                           
 11336                           ;interrupt_manager.c: 66: subTickerX=0;
 11337  0016  01E2               	clrf	_subTickerX
 11338                           
 11339                           ;interrupt_manager.c: 67: Event |= (1<<2);
 11340  0017  157C               	bsf	_Event,2	;volatile
 11341  0018                     i1l3522:	
 11342                           
 11343                           ;interrupt_manager.c: 68: }
 11344                           ;interrupt_manager.c: 69: if(subTickerX_1s>=50){
 11345  0018  3032               	movlw	50
 11346  0019  0263               	subwf	_subTickerX_1s,w
 11347  001A  1C03               	skipc
 11348  001B  281E               	goto	i1l3528
 11349                           
 11350                           ;interrupt_manager.c: 70: subTickerX_1s=0;
 11351  001C  01E3               	clrf	_subTickerX_1s
 11352                           
 11353                           ;interrupt_manager.c: 71: Event |= (1<<3);
 11354  001D  15FC               	bsf	_Event,3	;volatile
 11355  001E                     i1l3528:	
 11356                           
 11357                           ;interrupt_manager.c: 72: }
 11358                           ;interrupt_manager.c: 74: if(eusartRxIdleTime_ms){
 11359  001E  085F               	movf	_eusartRxIdleTime_ms,w	;volatile
 11360  001F  1903               	btfsc	3,2
 11361  0020  2828               	goto	i1l3538
 11362                           
 11363                           ;interrupt_manager.c: 75: eusartRxIdleTime_ms++;
 11364  0021  0ADF               	incf	_eusartRxIdleTime_ms,f	;volatile
 11365                           
 11366                           ;interrupt_manager.c: 76: if(eusartRxIdleTime_ms>15){
 11367  0022  3010               	movlw	16
 11368  0023  025F               	subwf	_eusartRxIdleTime_ms,w	;volatile
 11369  0024  1C03               	skipc
 11370  0025  2828               	goto	i1l3538
 11371                           
 11372                           ;interrupt_manager.c: 77: Event|=(1<<0);
 11373  0026  147C               	bsf	_Event,0	;volatile
 11374                           
 11375                           ;interrupt_manager.c: 78: eusartRxIdleTime_ms=0;
 11376  0027  01DF               	clrf	_eusartRxIdleTime_ms	;volatile
 11377  0028                     i1l3538:	
 11378                           
 11379                           ;interrupt_manager.c: 79: }
 11380                           ;interrupt_manager.c: 80: }
 11381                           ;interrupt_manager.c: 81: globalTicker++;
 11382  0028  3001               	movlw	1
 11383  0029  0021               	movlb	1	; select bank1
 11384  002A  07C8               	addwf	_globalTicker^(0+128),f	;volatile
 11385  002B  3000               	movlw	0
 11386  002C  3DC9               	addwfc	(_globalTicker+1)^(0+128),f	;volatile
 11387  002D  3DCA               	addwfc	(_globalTicker+2)^(0+128),f	;volatile
 11388  002E  3DCB               	addwfc	(_globalTicker+3)^(0+128),f	;volatile
 11389  002F                     i1l3540:	
 11390                           
 11391                           ;interrupt_manager.c: 82: }
 11392                           ;interrupt_manager.c: 83: if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits.RCIF
      +                           == 1)
 11393  002F  1F0B               	btfss	11,6	;volatile
 11394  0030  284E               	goto	i1l287
 11395  0031  0021               	movlb	1	; select bank1
 11396  0032  1E91               	btfss	17,5	;volatile
 11397  0033  284E               	goto	i1l287
 11398  0034  0020               	movlb	0	; select bank0
 11399  0035  1E91               	btfss	17,5	;volatile
 11400  0036  284E               	goto	i1l287
 11401                           
 11402                           ;interrupt_manager.c: 84: {
 11403                           ;interrupt_manager.c: 86: PIR1bits.RCIF=0;
 11404  0037  1291               	bcf	17,5	;volatile
 11405                           
 11406                           ;interrupt_manager.c: 87: if(1 == RCSTAbits.OERR){
 11407  0038  0023               	movlb	3	; select bank3
 11408  0039  1C9D               	btfss	29,1	;volatile
 11409  003A  283D               	goto	i1l3550
 11410                           
 11411                           ;interrupt_manager.c: 88: RCSTAbits.CREN = 0;
 11412  003B  121D               	bcf	29,4	;volatile
 11413                           
 11414                           ;interrupt_manager.c: 89: RCSTAbits.CREN = 1;
 11415  003C  161D               	bsf	29,4	;volatile
 11416  003D                     i1l3550:	
 11417                           
 11418                           ;interrupt_manager.c: 90: }
 11419                           ;interrupt_manager.c: 91: t8=RCREG;
 11420  003D  0819               	movf	25,w	;volatile
 11421  003E  00F0               	movwf	INTERRUPT_InterruptManager@t8
 11422                           
 11423                           ;interrupt_manager.c: 92: if(eusartRxCount<32){
 11424  003F  3020               	movlw	32
 11425  0040  0020               	movlb	0	; select bank0
 11426  0041  025E               	subwf	_eusartRxCount,w	;volatile
 11427  0042  1803               	skipnc
 11428  0043  284C               	goto	i1l3556
 11429                           
 11430                           ;interrupt_manager.c: 93: eusartRxBuffer[eusartRxCount]=t8;
 11431  0044  085E               	movf	_eusartRxCount,w
 11432  0045  3EA0               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 11433  0046  0086               	movwf	6
 11434  0047  3001               	movlw	1	; select bank3/4
 11435  0048  0087               	movwf	7
 11436  0049  0870               	movf	INTERRUPT_InterruptManager@t8,w
 11437  004A  0081               	movwf	1
 11438                           
 11439                           ;interrupt_manager.c: 94: eusartRxCount++;
 11440  004B  0ADE               	incf	_eusartRxCount,f	;volatile
 11441  004C                     i1l3556:	
 11442                           
 11443                           ;interrupt_manager.c: 95: }
 11444                           ;interrupt_manager.c: 96: eusartRxIdleTime_ms=1;
 11445  004C  3001               	movlw	1
 11446  004D  00DF               	movwf	_eusartRxIdleTime_ms	;volatile
 11447  004E                     i1l287:	
 11448                           ;interrupt_manager.c: 97: }
 11449                           
 11450  004E  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 11451  004F  0009               	retfie
 11452  0050                     __end_of_INTERRUPT_InterruptManager:	
 11453  007E                     btemp	set	126	;btemp
 11454  007E                     int$flags	set	126
 11455  007E                     wtemp	set	126
 11456  007E                     wtemp0	set	126
 11457  0080                     wtemp1	set	128
 11458  0082                     wtemp2	set	130
 11459  0084                     wtemp3	set	132
 11460  0086                     wtemp4	set	134
 11461  0088                     wtemp5	set	136
 11462  007F                     wtemp6	set	127
 11463  007E                     ttemp	set	126
 11464  007E                     ttemp0	set	126
 11465  0081                     ttemp1	set	129
 11466  0084                     ttemp2	set	132
 11467  0087                     ttemp3	set	135
 11468  007F                     ttemp4	set	127
 11469  007E                     ltemp	set	126
 11470  007E                     ltemp0	set	126
 11471  0082                     ltemp1	set	130
 11472  0086                     ltemp2	set	134
 11473  0080                     ltemp3	set	128


Data Sizes:
    Strings     33
    Constant    0
    Data        22
    BSS         175
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     40      78
    BANK1            80      0      74
    BANK2            80     21      73
    BANK3            80      0      32
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           32      0       0

Pointer List with Targets:

    crc_append@message	PTR unsigned char  size(1) Largest target is 52
		 -> sysData(BANK2[52]), 

    crc_verify@message	PTR unsigned char  size(1) Largest target is 52
		 -> sysData(BANK2[52]), 

    crc_sum@message	PTR unsigned char  size(1) Largest target is 52
		 -> sysData(BANK2[52]), 

    m_int_2_str_ex@buf	PTR unsigned char  size(1) Largest target is 16
		 -> str(BANK1[16]), 

    m_mem_cpy_len@s	PTR unsigned char  size(1) Largest target is 52
		 -> sysData(BANK2[52]), 

    m_mem_cpy_len@d	PTR unsigned char  size(1) Largest target is 2
		 -> crc_verify@expected(BANK0[2]), 

    m_mem_cpy@s	PTR unsigned char  size(1) Largest target is 16
		 -> str(BANK1[16]), 

    m_mem_cpy@d	PTR unsigned char  size(1) Largest target is 16
		 -> str(BANK1[16]), 

    m_mem_set@buf	PTR unsigned char  size(1) Largest target is 16
		 -> str(BANK1[16]), 

    my_flash_system_write@buf	PTR unsigned char  size(1) Largest target is 52
		 -> sysData(BANK2[52]), 

    my_flash_system_read@buf	PTR unsigned char  size(1) Largest target is 52
		 -> sysData(BANK2[52]), 

    uart_send_str@str	PTR unsigned char  size(2) Largest target is 16
		 -> STR_7(CODE[3]), STR_6(CODE[6]), STR_5(CODE[5]), STR_4(CODE[6]), 
		 -> STR_3(CODE[4]), STR_2(CODE[5]), str(BANK1[16]), STR_1(CODE[4]), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_adc_sample
    _sys_data_save->_crc_append
    _sys_data_init->_crc_append
    _my_flash_read_system_erase->_FLASH_EraseBlock
    _crc_verify->_crc_sum
    _crc_append->_crc_sum
    _crc_sum->_calc_crc_w
    _pid_pwm2_vout_run->___awdiv
    _set_vout_pwm2_duty->_get_vout_pwm2_duty
    _pid_pwm1_idrv_run->___lmul
    _pid_pwm1_idrv_b_b->___lmul
    _set_idrv_pwm1_duty->_get_idrv_pwm1_duty
    _m_int_2_str_ex->___almod
    _calc_temp_rs->___lldiv
    _calc_temp_rs->___lmul
    _calc_temp_rc->___lldiv
    _calc_temp_rc->___lmul
    _calc_expect_vout_adc_value->___lmul
    ___aldiv->___lmul
    _cal_rs_simulate_power->___lmul
    _adc_sample->_adc_init
    _adc_sample->_fvr_set_gain
    _TMR2_Initialize->_TMR2_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_pid_pwm1_idrv_run
    _sys_data_save->_crc_append
    _sys_data_init->_crc_verify
    _crc_verify->_crc_sum
    _crc_append->_crc_sum
    _pid_pwm1_idrv_run->___aldiv
    _pid_pwm1_idrv_b_b->___aldiv
    _m_int_2_str_ex->___aldiv
    _calc_temp_rs->___lldiv
    _calc_temp_rc->___lldiv
    _calc_expect_vout_adc_value->___aldiv
    ___aldiv->___lmul
    _cal_rs_simulate_power->___lmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_calc_expect_vout_adc_value

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   38640
                         _PWM1_Start
                  _SYSTEM_Initialize
                         _adc_sample
              _cal_rs_simulate_power
         _calc_expect_vout_adc_value
                       _calc_temp_rc
                       _calc_temp_rs
                     _m_int_2_str_ex
                  _pid_pwm1_idrv_b_b
                  _pid_pwm1_idrv_run
                  _pid_pwm2_vout_run
                      _sys_data_init
                      _sys_data_save
                      _uart_send_str
 ---------------------------------------------------------------------------------
 (1) _uart_send_str                                        3     1      2     877
                                              1 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _sys_data_save                                        0     0      0    2461
                         _crc_append
         _my_flash_read_system_erase
              _my_flash_system_write
 ---------------------------------------------------------------------------------
 (1) _sys_data_init                                        4     4      0    4908
                                             18 BANK0      4     4      0
                             ___wmul
                         _crc_append
                         _crc_verify
         _my_flash_read_system_erase
               _my_flash_system_read
              _my_flash_system_write
 ---------------------------------------------------------------------------------
 (2) _my_flash_system_write                               15    13      2     511
                                              1 COMMON     3     1      2
                                              0 BANK0     12    12      0
 ---------------------------------------------------------------------------------
 (2) _my_flash_system_read                                 9     7      2     254
                                              1 COMMON     9     7      2
 ---------------------------------------------------------------------------------
 (2) _my_flash_read_system_erase                           0     0      0     247
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_EraseBlock                                     3     1      2     247
                                              1 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (2) _crc_verify                                           7     5      2    1612
                                             11 BANK0      7     5      2
                            _crc_sum
                      _m_mem_cpy_len
 ---------------------------------------------------------------------------------
 (3) _m_mem_cpy_len                                        4     1      3     227
                                              1 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (2) _crc_append                                           6     4      2    1703
                                             11 COMMON     1     1      0
                                             11 BANK0      5     3      2
                            _crc_sum
 ---------------------------------------------------------------------------------
 (3) _crc_sum                                             13    11      2     959
                                              9 COMMON     2     0      2
                                              0 BANK0     11    11      0
                         _calc_crc_w
 ---------------------------------------------------------------------------------
 (4) _calc_crc_w                                           8     3      5     331
                                              1 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     348
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _pid_pwm2_vout_run                                    5     5      0    1010
                                              9 COMMON     1     1      0
                                              0 BANK0      4     4      0
                            ___awdiv
                            ___lwdiv
                 _set_vout_pwm2_duty
 ---------------------------------------------------------------------------------
 (2) _set_vout_pwm2_duty                                   4     2      2     154
                                              3 COMMON     4     2      2
                 _get_vout_pwm2_duty
 ---------------------------------------------------------------------------------
 (3) _get_vout_pwm2_duty                                   2     0      2       0
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                              1 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     428
                                              1 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _pid_pwm1_idrv_run                                   22    22      0    4985
                                             18 BANK0     22    22      0
                            ___aldiv
                             ___lmul
                 _set_idrv_pwm1_duty
 ---------------------------------------------------------------------------------
 (1) _pid_pwm1_idrv_b_b                                    5     5      0    4828
                                              9 COMMON     1     1      0
                                             18 BANK0      4     4      0
                            ___aldiv
                             ___lmul
                 _set_idrv_pwm1_duty
 ---------------------------------------------------------------------------------
 (2) _set_idrv_pwm1_duty                                   4     2      2     346
                                              3 COMMON     4     2      2
                 _get_idrv_pwm1_duty
 ---------------------------------------------------------------------------------
 (3) _get_idrv_pwm1_duty                                   2     0      2       0
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _m_int_2_str_ex                                      18    12      6    4862
                                             18 BANK0     17    11      6
                            ___aldiv
                            ___almod
                          _m_mem_cpy
                          _m_mem_set
 ---------------------------------------------------------------------------------
 (2) _m_mem_set                                            4     1      3     225
                                              1 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (2) _m_mem_cpy                                            2     1      1     184
                                              1 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (2) ___almod                                             10     2      8     526
                                              1 COMMON    10     2      8
 ---------------------------------------------------------------------------------
 (1) _calc_temp_rs                                        12     8      4    2984
                                              5 BANK0     12     8      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) _calc_temp_rc                                        16    12      4    3052
                                              5 BANK0     16    12      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     648
                                              1 COMMON     8     0      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _calc_expect_vout_adc_value                          28    26      2    5277
                                             18 BANK0      6     4      2
                                              0 BANK2     21    21      0
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8    2161
                                              4 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _cal_rs_simulate_power                                8     6      2    2404
                                              4 BANK0      8     6      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8    2129
                                              1 COMMON     8     0      8
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _adc_sample                                           9     7      2     894
                                              3 COMMON     9     7      2
                           _adc_init
                       _fvr_set_gain
 ---------------------------------------------------------------------------------
 (2) _fvr_set_gain                                         2     2      0      69
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _adc_init                                             2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      98
                    _ADC1_Initialize
                  _EUSART_Initialize
                     _FVR_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM1_Initialize
                    _PWM2_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0      75
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR2_SetInterruptHandler                             2     0      2      75
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM1_Start                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PWM1_Start
   _SYSTEM_Initialize
     _ADC1_Initialize
     _EUSART_Initialize
     _FVR_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM1_Initialize
     _PWM2_Initialize
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
       _TMR2_StartTimer
     _WDT_Initialize
   _adc_sample
     _adc_init
     _fvr_set_gain
   _cal_rs_simulate_power
     ___lmul
   _calc_expect_vout_adc_value
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _calc_temp_rc
     ___lldiv
     ___lmul
   _calc_temp_rs
     ___lldiv
     ___lmul
   _m_int_2_str_ex
     ___aldiv
       ___lmul (ARG)
     ___almod
     _m_mem_cpy
     _m_mem_set
   _pid_pwm1_idrv_b_b
     ___aldiv
       ___lmul (ARG)
     ___lmul
     _set_idrv_pwm1_duty
       _get_idrv_pwm1_duty
   _pid_pwm1_idrv_run
     ___aldiv
       ___lmul (ARG)
     ___lmul
     _set_idrv_pwm1_duty
       _get_idrv_pwm1_duty
   _pid_pwm2_vout_run
     ___awdiv
     ___lwdiv
     _set_vout_pwm2_duty
       _get_vout_pwm2_duty
   _sys_data_init
     ___wmul
     _crc_append
       _crc_sum
         _calc_crc_w
     _crc_verify
       _crc_sum
         _calc_crc_w
       _m_mem_cpy_len
     _my_flash_read_system_erase
       _FLASH_EraseBlock
     _my_flash_system_read
     _my_flash_system_write
   _sys_data_save
     _crc_append
       _crc_sum
         _calc_crc_w
     _my_flash_read_system_erase
       _FLASH_EraseBlock
     _my_flash_system_write
   _uart_send_str

 _INTERRUPT_InterruptManager (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3E0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     28      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4A       7       92.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     15      49       9       91.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      20      11       40.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     10E      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           20      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              20      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     10E      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sat Nov 17 12:16:00 2018

        __end_of_TMR2_SetInterruptHandler 07CD                                         pc 0002  
            ??_my_flash_read_system_erase 0074                               __CFG_CP$OFF 0000  
                                      PL2 0752                                        PL4 0C93  
                                      PL6 0C9C                                        PL8 075B  
                            ___awdiv@sign 0076                    __end_of_FVR_Initialize 02D3  
                     ___wmul@multiplicand 0073                                       PL10 0767  
                                     PL20 0FF6                                       PL12 076F  
                                     PL30 0792                                       PL22 0780  
                                     PL14 0DF6                                       PL32 0798  
                                     PL24 0787                                       PL16 0778  
                                     PL34 0FFB                                       PL26 078D  
                                     PL18 0FEE                                       PL28 0A65  
                             __CFG_LVP$ON 0000                                       l604 0DAE  
                                     l470 01E8                                       l570 06D8  
                                     l475 01EC                                       l564 06F4  
                                     l638 04FC                                       l591 0299  
                                     l671 0AB7                                       l479 0200  
                                     l649 04D0                                       l673 0AEB  
                                     l658 0686                                       l668 0AA2  
                                     l695 0707                                       l696 0711  
                                     l697 0749                                       _GIE 005F  
                                     _PR2 001B                                       _bbu 00C4  
                                     _err 00A0                                       _str 00CE  
                         _TMR2_Initialize 07BD                              __CFG_BORV$LO 0000  
                                     wreg 0009                      ??_get_vout_pwm2_duty 0073  
                    ??_set_vout_pwm2_duty 0075                           ??_uart_send_str 0073  
                                    S4162 07F2                             calc_temp_rc@x 002D  
                           calc_temp_rc@y 0031                                      l1152 0A18  
                                    l1139 050D                                      l1095 056E  
                                    l3120 0DE7                                      l3112 0DCA  
                                    l3042 0A34                                      l3050 0A52  
                                    l3034 0A25                                      l3124 0DED  
                                    l4020 021E                                      l3054 0A5C  
                                    l3046 0A4C                                      l3150 0B61  
                                    l4024 0229                                      l3072 0B14  
                                    l4050 0279                                      l4042 026B  
                                    l3090 0B30                                      l3082 0B21  
                                    l3066 0B0B                                      l3146 0B5D  
                                    l3138 0B4E                                      l3180 0292  
                                    l3340 0A92                                      l4140 01E3  
                                    l3190 02B2                                      l3094 0B34  
                                    l3166 01F9                                      l4070 00A6  
                                    l4048 0278                                      l4072 00C7  
                                    l2618 07CD                                      l3098 0B3C  
                                    l2812 06EF                                      l3188 0293  
                                    l3348 0AC8                                      l4068 00A3  
                                    l3358 0AFB                                      l2638 0F0E  
                                    l2590 0F5C                                      l2584 0EFF  
                                    l2912 0F95                                      l4088 0131  
                                    l4096 0158                                      l3722 0579  
                                    l2586 0F01                                      l2578 0EF0  
                                    l2914 0FEC                                      l3740 051C  
                                    l3804 0D9C                                      l2940 07A8  
                                    l3820 0351                                      l3812 033A  
                                    l3900 0672                                      l3750 052F  
                                    l3806 0DA8                                      l3814 033B  
                                    l3902 0681                                      l2784 07AF  
                                    l3912 0B84                                      l2944 079F  
                                    l3824 0358                                      l2960 0E58  
                                    l2856 0F2E                                      l2872 0F90  
                                    l3762 0552                                      l2954 07D1  
                                    l3826 0366                                      l3818 0343  
                                    l2858 0F4F                                      l2890 0FC0  
                                    l3780 0CF6                                      l2956 07E1  
                                    l2788 06A1                                      l3860 049F  
                                    l2964 0E5E                                      l3692 0EE4  
                                    l3684 0EDB                                      l3676 0EB0  
                                    l2884 0FA4                                      l3766 0560  
                                    l3758 054C                                      l3926 0BB7  
                                    l3918 0BA4                                      l3782 0D02  
                                    l3838 037F                                      l2798 0B66  
                                    l3678 0ED2                                      l3784 0D08  
                                    l2888 0FBE                                      l3946 0C06  
                                    l3858 0495                                      l2898 0FCF  
                                    l3956 0C8B                                      l3974 0744  
                                    l3992 0E25                                      l3898 066C  
                           calc_temp_rs@x 0029                             calc_temp_rs@y 002D  
                                    STR_1 1016                                      STR_2 1011  
                                    STR_3 101A                                      STR_4 1006  
                                    STR_5 100C                                      STR_6 1000  
                                    STR_7 101E                   __end_of_PWM1_Initialize 0329  
                                    u2005 0A8C                                      u2015 0A9C  
                                    u1305 06AD                                      u2025 0AB0  
                                    u1315 0B72                                      u2035 0AC1  
                                    u2045 0AE4                                      _LATA 010C  
                                    u2055 0AF5                                      u1415 0F9B  
                                    _LATC 010E                                      u1280 030F  
                                    u1355 0F34                                      u1605 0A42  
                                    u1365 0F85                                      u1385 0FB2  
                                    u2435 0EB6                                      u1725 0DDC  
                                    u2535 0541                                      u2705 0BAF  
                                    u2465 0EA3                                      u2643 04BE  
                                    u1675 0B29                                      u2653 04EB  
                                    u1765 0B56                                      u1855 02A7  
                                    u2745 0BFC                                      u2685 0B97  
                                    u2937 028A                                      u2785 0737  
                           _m_mem_cpy_len 0F0D                                      _TMR2 001A  
                                    _WPUA 020C                                      _WPUC 020E  
                            __CFG_WRT$OFF 0000                            _m_int_2_str_ex 0204  
                                    _bbt0 00B8                                      _bbt1 00BC  
                                    _bbta 00C0                                      _bbku 00B4  
                                    _bbtu 004C                                      _main 008E  
                                    _pidU 00E6       __size_of_my_flash_read_system_erase 000B  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                             __CFG_BOREN$ON 0000  
                                    ltemp 007E                                      start 0050  
                         _pwm2DutyForVout 006C                                      ttemp 007E  
                                    wtemp 007E                             __CFG_MCLRE$ON 0000  
                     pid_pwm1_idrv_run@ei 003A                       pid_pwm1_idrv_run@ep 0036  
                 ??_cal_rs_simulate_power 0079                   __end_of_PWM2_Initialize 06D4  
                         ?_FVR_Initialize 0070            __size_of_OSCILLATOR_Initialize 0005  
           __end_of_OSCILLATOR_Initialize 02D8                           __end_of___aldiv 0569  
                         __end_of___almod 0A65                                     ?_main 0070  
                         __end_of___awdiv 0B41                             __CFG_WDTE$OFF 0000  
                         __end_of___lldiv 0DF6                           ___awdiv@divisor 0071  
                                   _T2CON 001C                           __end_of___lwdiv 0B66  
                                   i1l287 004E                           ___awdiv@counter 0075  
                                   _RCREG 0199                                     _RCSTA 019D  
                                   _TRISA 008C                                     _TRISC 008E  
                                   _TXREG 019A                                     _TXSTA 019E  
                     ___lmul@multiplicand 0075                                     _PidKp 0048  
                                   _PidTd 00AC                                     _Event 007C  
                                   _PidTi 00B0                           __end_of_crc_sum 0EEE  
                    pid_pwm1_idrv_b_b@t32 0032                               ?_PWM1_Start 0070  
                                   _bbmax 00DE                                     _bbmin 00E2  
                          _WDT_Initialize 06D4                                     _resRc 0064  
                                   _resRs 0068                    __end_of_m_int_2_str_ex 027F  
                          ?_m_mem_cpy_len 0071                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080                __end_of_get_idrv_pwm1_duty 06BD  
              __end_of_set_idrv_pwm1_duty 06B6                         m_int_2_str_ex@buf 0041  
                       m_int_2_str_ex@sig 0040                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                      crc_verify@expected 002F                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                           _TMR2_StartTimer 07CD  
                           fvr_set_gain@g 0072        __end_of_calc_expect_vout_adc_value 0C93  
              _calc_expect_vout_adc_value 0B82                      pid_pwm1_idrv_run@t32 0044  
                    pid_pwm1_idrv_run@t16 0042                           __initialization 0052  
                            __end_of_main 01E5                     __size_of_calc_temp_rc 009F  
                   __size_of_calc_temp_rs 0073                   __end_of_TMR2_Initialize 07CC  
             ?_INTERRUPT_InterruptManager 0070                  _TMR2_SetInterruptHandler 07CC  
                                  ??_main 007C             __size_of_my_flash_system_read 002F  
                          __CFG_PLLEN$OFF 0000                    __end_of_WDT_Initialize 06D7  
            my_flash_system_write@blocNum 0023                                    _ADCON0 009D  
                                  _ADCON1 009E                                    _ADCON2 009F  
                                  _ADRESH 009C                                    _ADRESL 009B  
                        ___awdiv@dividend 0073                  cal_rs_simulate_power@t16 002A  
                cal_rs_simulate_power@t32 0026                           ?_m_int_2_str_ex 0032  
                                  _ANSELA 018C                                    _ANSELC 018E  
                        __end_of_adc_init 06E6                          ?_PWM1_Initialize 0070  
                                  _ODCONA 028C                                    _ODCONC 028E  
                                  i1l3522 0018                                    i1l3540 002F  
                                  i1l3550 003D                                    i1l3528 001E  
                                  i1l3538 0028                                    i1l3556 004C  
                                  _FVRCON 0117                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                                    _PMCON2 0196  
               __size_of_FLASH_EraseBlock 0018                                    _OSCCON 0099  
                                  _SPBRGH 019C                                    _SPBRGL 019B  
                                  _WDTCON 0097                              m_mem_set@buf 0074  
                            m_mem_set@len 0072                              _calc_temp_rc 0D18  
                            _calc_temp_rs 0CA5                            __CFG_PWRTE$OFF 0000  
      __end_of_my_flash_read_system_erase 0F5C                _my_flash_read_system_erase 0F51  
                                  ___lmul 0569                                 ??___aldiv 0079  
                               ??___almod 0079                                    ___wmul 0E56  
                               ??___awdiv 0075                            __CFG_STVREN$ON 0000  
                     __size_of_PWM1_Start 0003                                 ??___lldiv 0079  
                               ??___lwdiv 0075                          ?_PWM2_Initialize 0070  
                                  _pwm2Ei 0050                          ___awdiv@quotient 0077  
                my_flash_system_write@buf 0025                  my_flash_system_write@len 0071  
                my_flash_system_write@loc 0026                                 ??_crc_sum 0020  
                __size_of_ADC1_Initialize 0004                           ?_WDT_Initialize 0070  
                         ??_m_mem_cpy_len 0074          my_flash_system_write@GIEBitValue 0022  
                 __end_of_TMR2_StartTimer 07D0  TMR2_SetInterruptHandler@InterruptHandler 0071  
                           ?_fvr_set_gain 0070                            fvr_set_gain@t8 0071  
                       _SYSTEM_Initialize 02BA                   __end_of__initialization 008B  
                  __size_of_sys_data_init 004B                     _my_flash_system_write 0F74  
                      ?_SYSTEM_Initialize 0070                    __size_of_sys_data_save 000C  
                          __pcstackCOMMON 0070                              __pidataBANK0 0A01  
                            __pidataBANK1 07E6                       ??_SYSTEM_Initialize 0073  
                              _adc_sample 027F                           m_int_2_str_ex@i 0042  
                         m_int_2_str_ex@t 003C                           m_int_2_str_ex@x 0032  
                        ?_TMR2_Initialize 0070                                __end_ofPL2 075B  
                              __end_ofPL4 0C9C                                __end_ofPL6 0CA5  
                              __end_ofPL8 0767                            _OPTION_REGbits 0095  
                              _calc_crc_w 0EEE                         crc_append@message 002F  
                  my_flash_system_write@i 002A                    my_flash_system_write@j 0020  
               __end_of_SYSTEM_Initialize 02CB                            ??_fvr_set_gain 0071  
                      __size_of_m_mem_cpy 0016                        __size_of_m_mem_set 0011  
                              __pbssBANK0 0048                                __pbssBANK1 00A0  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
         my_flash_system_read@GIEBitValue 0074                                adc_init@ch 0072  
                        ??_FVR_Initialize 0071                                __pmaintext 008E  
                                 ?___lmul 0071                                   ?___wmul 0071  
                         __CFG_PPS1WAY$ON 0000                                __pintentry 0004  
            ??_calc_expect_vout_adc_value 0034                                   _BAUDCON 019F  
          __size_of_cal_rs_simulate_power 005B                            ___lmul@product 0020  
                              _crc_append 0E6B             __end_of_cal_rs_simulate_power 0752  
                               ?_adc_init 0070                              adc_sample@ch 0076  
                           _sys_data_init 0E0B                             _sys_data_save 0DFF  
                              _crc_verify 0E86                             _eusartRxCount 005E  
             __size_of_get_vout_pwm2_duty 0007               __size_of_set_vout_pwm2_duty 0015  
                                 _PWM1DCH 0D94                              ??_PWM1_Start 0071  
                                 _PWM1DCL 0D93                                   _PWM2DCH 0DA4  
                                 _PWM2DCL 0DA3                                   _OSCTUNE 0098  
                                 _PWM1CON 0D9B                                   _PWM2CON 0DAB  
                                 _PWM1OFH 0D98                                   _PWM1OFL 0D97  
                                 _PWM2OFH 0DA8                                   _PWM1PHH 0D92  
                                 _PWM2OFL 0DA7                                   _PWM1PHL 0D91  
                                 _PWM2PHH 0DA2                                   _PWM2PHL 0DA1  
                                 _PWM1PRH 0D96                                   _PWM1PRL 0D95  
                                 _PWM2PRH 0DA6                                   _PWM2PRL 0DA5  
                                 _PPSLOCK 0E0F                         ??_ADC1_Initialize 0071  
                        ?_TMR2_StartTimer 0070                    set_idrv_pwm1_duty@duty 0073  
                   __end_of_uart_send_str 0204                          _FLASH_EraseBlock 0F5C  
                  ?_my_flash_system_write 0071               ?_calc_expect_vout_adc_value 0032  
              ??_TMR2_SetInterruptHandler 0073                              _crc_sum$1661 0025  
                            _crc_sum$1662 0026                                   ___aldiv 04FD  
                                 ___almod 0A0B                                   ___awdiv 0B01  
                         __size_of___lmul 0028                                   ___lldiv 0DB7  
                         __size_of___wmul 0015                        _get_idrv_pwm1_duty 06B6  
                      _set_idrv_pwm1_duty 06A1                                   ___lwdiv 0B41  
                             ?_adc_sample 0073                        __end_of_PWM1_Start 02BA  
                       __end_of_m_mem_cpy 07E6                            adc_sample@gfvr 0073  
                       __end_of_m_mem_set 07AF                                _pidTestNum 0061  
                          ?_sys_data_init 0070                            ?_sys_data_save 0070  
                              ??_adc_init 0071                                   __ptext1 01E5  
                                 __ptext2 0DFF                                   __ptext3 0E0B  
                                 __ptext4 0F74                                   __ptext5 0F22  
                                 __ptext6 0F51                                   __ptext7 0F5C  
                                 __ptext8 0E86                                   __ptext9 0F0D  
                                 _crc_sum 0EA6                                   _pidBbSm 0060  
                     ?_get_idrv_pwm1_duty 0071                       ?_set_idrv_pwm1_duty 0073  
                   _OSCILLATOR_Initialize 02D3                                 _T2CONbits 001C  
                             ?_calc_crc_w 0071                          ??_m_int_2_str_ex 0038  
                        ___aldiv@dividend 0028                  ??_PIN_MANAGER_Initialize 0071  
                                 _sysData 0120                __size_of_SYSTEM_Initialize 0011  
                                 clrloop0 09FC                      end_of_initialization 008B  
                                 init_ram 09F5                                   initloop 09F6  
                              _rsSimPower 00CC              __end_of_my_flash_system_read 0F51  
                    ??_get_idrv_pwm1_duty 0073                       pid_pwm2_vout_run@ei 0020  
                    ??_set_idrv_pwm1_duty 0075                         _EUSART_Initialize 07AF  
                         ___lldiv@divisor 0071                           ___lldiv@counter 0024  
                      ?_EUSART_Initialize 0070                                 _RCSTAbits 019D  
             ?_my_flash_read_system_erase 0070                          ___aldiv@quotient 002E  
                               _PWM1LDCON 0D9F                                 _PWM2LDCON 0DAF  
                               _PWM1OFCON 0DA0                                 _PWM2OFCON 0DB0  
                            __pstringtext 1000                       m_int_2_str_ex@ssize 0036  
                    __end_of_fvr_set_gain 06F7                               ?_crc_append 002B  
                              _subTickerX 0062                       ??_EUSART_Initialize 0071  
                        ??_WDT_Initialize 0071                               ?_crc_verify 002B  
                        __CFG_FOSC$INTOSC 0000                                crc_sum@crc 0029  
                              crc_sum@len 0079                                 _RXPPSbits 0E15  
                     __size_of_adc_sample 0038                 __end_of_EUSART_Initialize 07BD  
                            _globalTicker 00C8                                 _TXSTAbits 019E  
                    calc_crc_w@polynomial 0074                         crc_sum@polynomial 0022  
                     __size_of_calc_crc_w 001F                  __size_of_PWM1_Initialize 0018  
            _TMR2_DefaultInterruptHandler 0000                           ??_sys_data_init 007C  
                              m_mem_cpy@d 0072                           ??_sys_data_save 007C  
                              m_mem_cpy@s 0071                            __end_of___lmul 0591  
                          __end_of___wmul 0E6B                          _voExpectAdcValue 005C  
                              m_mem_set@x 0071                            _rtAdcValueRcHi 0052  
                          _rtAdcValueRcLo 0054                            _rtAdcValueRsHi 0056  
                          _rtAdcValueVoFb 005A                            _rtAdcValueRsLo 0058  
                  ?_OSCILLATOR_Initialize 0070                         crc_verify@message 0031  
                             __end_ofPL10 076F                               __end_ofPL20 0FFB  
                             __end_ofPL12 0778                               __end_ofPL30 0798  
                             __end_ofPL22 0787                               __end_ofPL14 0DFF  
                             __end_ofPL32 079E                               __end_ofPL24 078D  
                             __end_ofPL16 0780                               __end_ofPL34 1000  
                             __end_ofPL26 0792                               __end_ofPL18 0FF6  
                             __end_ofPL28 0A6B                       start_initialization 0052  
                __size_of_PWM2_Initialize 0017           __size_of_PIN_MANAGER_Initialize 0039  
                 my_flash_system_read@buf 0075                   my_flash_system_read@len 0071  
                   __end_of_m_mem_cpy_len 0F22                       __size_of_crc_append 001B  
                     __size_of_crc_verify 0020                          __CFG_LPBOREN$OFF 0000  
                                ??___lmul 0079                                  ??___wmul 0075  
                             __pdataBANK0 0064                               __pdataBANK1 00DE  
             FLASH_EraseBlock@GIEBitValue 0073                           _ADC1_Initialize 02CB  
                __end_of_FLASH_EraseBlock 0F74                      _my_flash_system_read 0F22  
                       __size_of_adc_init 000F                               __pbssCOMMON 007C  
                               ___latbits 0002                             __pcstackBANK0 0020  
                           __pcstackBANK2 0154                  __size_of_TMR2_Initialize 000F  
                 ??_my_flash_system_write 0073                     my_flash_system_read@i 0076  
              __size_of_EUSART_Initialize 000E                     __size_of_fvr_set_gain 0011  
                        ___lwdiv@dividend 0073                    _PIN_MANAGER_Initialize 02D8  
                                ?___aldiv 0024                                  ?___almod 0071  
                                ?___awdiv 0071                                  ?___lldiv 0071  
                            ??_adc_sample 0075                               adc_sample@i 0079  
                                ?___lwdiv 0071                         ??_PWM1_Initialize 0071  
            ??_INTERRUPT_InterruptManager 0070                          ___almod@dividend 0075  
                   set_idrv_pwm1_duty@t16 0075                                 __pswtext1 07F2  
                                ?_crc_sum 0079             my_flash_system_read@flashAddr 0078  
              __end_of_get_vout_pwm2_duty 0B82                     ?_my_flash_system_read 0071  
              __end_of_set_vout_pwm2_duty 0B7B                                 _m_mem_cpy 07D0  
                               _m_mem_set 079E                     _cal_rs_simulate_power 06F7  
                            ??_calc_crc_w 0076                             adc_sample@t16 007A  
                        ___lwdiv@quotient 0075                             adc_sample@ret 0077  
                           adc_sample@num 0074                          uart_send_str@str 0071  
                            _fvr_set_gain 06E6                            _eusartRxBuffer 01A0  
                         ___aldiv@divisor 0024                         ??_PWM2_Initialize 0071  
                      __end_of_adc_sample 02B7                           ___aldiv@counter 002C  
                          ___wmul@product 0075                         _pid_pwm1_idrv_b_b 0329  
                       _pid_pwm1_idrv_run 0591                                 clear_ram0 09FB  
                          m_mem_cpy_len@d 0074                            m_mem_cpy_len@s 0071  
                           ?_calc_temp_rc 0025                             ?_calc_temp_rs 0025  
                                _PIE1bits 0091                  __size_of_TMR2_StartTimer 0003  
                  set_vout_pwm2_duty@duty 0073                        ?_pid_pwm1_idrv_b_b 0070  
     __size_of_INTERRUPT_InterruptManager 004C                        ?_pid_pwm1_idrv_run 0070  
                 __end_of_ADC1_Initialize 02CF                                  _PIR1bits 0011  
               FLASH_EraseBlock@startAddr 0071                        __end_of_calc_crc_w 0F0D  
                                _PWM1INTE 0D9C                                  _PWM1INTF 0D9D  
                                _PWM2INTE 0DAC                                  _PWM2INTF 0DAD  
                                _PWM1TMRH 0D9A                                  _PWM1TMRL 0D99  
                                _PWM2TMRH 0DAA                                  _PWM2TMRL 0DA9  
                             calc_crc_w@b 0073                               calc_crc_w@i 0077  
                     ??_pid_pwm1_idrv_b_b 0079                              ??_crc_append 007B  
                     ??_pid_pwm1_idrv_run 0032                    __size_of_uart_send_str 001F  
                              _ADCON0bits 009D                         ___wmul@multiplier 0071  
                            ??_crc_verify 007B                                ?_m_mem_cpy 0071  
                 __size_of_FVR_Initialize 0004                                ?_m_mem_set 0071  
       __size_of_TMR2_SetInterruptHandler 0001                 ?_TMR2_SetInterruptHandler 0071  
                             _isRunInBoot 0FFF                         _pid_pwm2_vout_run 0A6B  
                       ___lmul@multiplier 0071                          crc_verify@crccal 002D  
               __end_of_pid_pwm1_idrv_b_b 04FD                        ?_pid_pwm2_vout_run 0070  
               __end_of_pid_pwm1_idrv_run 06A1                         ??_TMR2_Initialize 0073  
                          ??_calc_temp_rc 0029                            ??_calc_temp_rs 0079  
                      __end_of_crc_append 0E86               __size_of_get_idrv_pwm1_duty 0007  
             __size_of_set_idrv_pwm1_duty 0015                       ??_pid_pwm2_vout_run 0079  
                      __end_of_crc_verify 0EA6                   ??_OSCILLATOR_Initialize 0071  
                        __size_of___aldiv 006C                          __size_of___almod 005A  
                        __size_of___awdiv 0040                          __size_of___lldiv 003F  
                        __size_of___lwdiv 0025                    ??_my_flash_system_read 0073  
                                _adc_init 06D7                    ?_cal_rs_simulate_power 0024  
                        __size_of_crc_sum 0048                       _eusartRxIdleTime_ms 005F  
               __end_of_pid_pwm2_vout_run 0B01                             crc_append@crc 002D  
                        sys_data_init@ret 0032                           ___lwdiv@divisor 0071  
                         ___lwdiv@counter 0077                                  __ptext10 0E6B  
                                __ptext11 0EA6                                  __ptext20 0329  
                                __ptext12 0EEE                                  __ptext21 06A1  
                                __ptext13 0E56                                  __ptext30 0B82  
                                __ptext22 06B6                                  __ptext14 0A6B  
                                __ptext31 04FD                                  __ptext23 0204  
                                __ptext15 0B66                                  __ptext40 07CD  
                                __ptext32 06F7                                  __ptext24 079E  
                                __ptext16 0B7B                                  __ptext41 07CC  
                                __ptext33 0569                                  __ptext25 07D0  
                                __ptext17 0B41                                  __ptext42 06BD  
                                __ptext34 027F                                  __ptext26 0A0B  
                                __ptext18 0B01                                  __ptext43 0311  
                                __ptext35 06E6                                  __ptext27 0CA5  
                                __ptext19 0591                                  __ptext44 02D8  
                                __ptext36 06D7                                  __ptext28 0D18  
                                __ptext45 02D3                                  __ptext37 02BA  
                                __ptext29 0DB7                                  __ptext46 02CF  
                                __ptext38 06D4                                  __ptext47 07AF  
                                __ptext39 07BD                                  __ptext48 02CB  
                                __ptext49 02B7                           ___almod@divisor 0071  
                         ___almod@counter 0079                             _uart_send_str 01E5  
                 __size_of_m_int_2_str_ex 007B                             __size_of_main 0157  
                           _subTickerX_1s 0063                     set_vout_pwm2_duty@t16 0075  
                              _RA4PPSbits 0E94                                _RA5PPSbits 0E95  
                        ?_ADC1_Initialize 0070            my_flash_system_write@flashAddr 0028  
                                int$flags 007E                                  crc_sum@i 0027  
                              _RC5PPSbits 0EA5                         ??_TMR2_StartTimer 0071  
      __end_of_INTERRUPT_InterruptManager 0050                _INTERRUPT_InterruptManager 0004  
                   __end_of_sys_data_init 0E56                     __end_of_sys_data_save 0E0B  
                       ?_FLASH_EraseBlock 0071             calc_expect_vout_adc_value@t32 0164  
             PIN_MANAGER_Initialize@state 0071                               ??_m_mem_cpy 0072  
                             ??_m_mem_set 0074                        ??_FLASH_EraseBlock 0073  
                              _INTCONbits 000B                               _PWM1CONbits 0D9B  
                        m_mem_cpy_len@len 0072                                _FVRCONbits 0117  
                             _PWM2CONbits 0DAB              INTERRUPT_InterruptManager@t8 0070  
                 __size_of_WDT_Initialize 0003                            ?_uart_send_str 0071  
                                intlevel1 0000            __size_of_my_flash_system_write 007A  
                    pid_pwm2_vout_run@t16 0022                __size_of_pid_pwm1_idrv_b_b 01D4  
           __end_of_my_flash_system_write 0FEE                __size_of_pid_pwm1_idrv_run 0110  
                              _PMCON1bits 0195                          ___lldiv@dividend 0075  
                 ?_PIN_MANAGER_Initialize 0070                         __CFG_CLKOUTEN$OFF 0000  
                             _PPSLOCKbits 0E0F                           _PWM1_Initialize 0311  
                          crc_sum@message 0024              calc_expect_vout_adc_value@x0 0160  
            calc_expect_vout_adc_value@x1 0158              calc_expect_vout_adc_value@y0 015C  
            calc_expect_vout_adc_value@y1 0154                                _PWM1CLKCON 0D9E  
                              _PWM2CLKCON 0DAE                    __size_of_m_mem_cpy_len 0015  
                          _FVR_Initialize 02CF                            sys_data_init@i 0034  
                             crc_append@n 002B                      __end_of_calc_temp_rc 0DB7  
                    __end_of_calc_temp_rs 0D18                          ___lldiv@quotient 0020  
                         _PWM2_Initialize 06BD                __size_of_pid_pwm2_vout_run 0096  
                            ___aldiv@sign 002D                                _PWM1_Start 02B7  
             calc_expect_vout_adc_value@i 0168               calc_expect_vout_adc_value@x 0032  
                           calc_crc_w@crc 0071       __size_of_calc_expect_vout_adc_value 0111  
          __end_of_PIN_MANAGER_Initialize 0311                              ___almod@sign 007A  
                      _get_vout_pwm2_duty 0B7B                        _set_vout_pwm2_duty 0B66  
                             crc_verify@n 002B                       ?_get_vout_pwm2_duty 0071  
                     ?_set_vout_pwm2_duty 0073  
