

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Sat Mar 30 11:54:48 2019

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16F1575
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	swtext1,local,class=CONST,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    54                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	intentry,global,class=CODE,delta=2
    71                           	dabs	1,0x620,32
    72                           	dabs	1,0x5A0,80
    73                           	dabs	1,0x55C,20
    74                           	dabs	1,0xFFF,1,_isRunInBoot
    75                           	dabs	1,0x235C,0,_sysData
    76                           	dabs	1,0x7E,2
    77  0000                     
    78                           ; Version 2.00
    79                           ; Generated 27/05/2018 GMT
    80                           ; 
    81                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    82                           ; All rights reserved.
    83                           ; 
    84                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    85                           ; 
    86                           ; Redistribution and use in source and binary forms, with or without modification, are
    87                           ; permitted provided that the following conditions are met:
    88                           ; 
    89                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    90                           ;        conditions and the following disclaimer.
    91                           ; 
    92                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    93                           ;        of conditions and the following disclaimer in the documentation and/or other
    94                           ;        materials provided with the distribution.
    95                           ; 
    96                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    97                           ;        software without specific prior written permission.
    98                           ; 
    99                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   100                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   101                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   102                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   103                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   104                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   105                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   106                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   107                           ; 
   108                           ; 
   109                           ; Code-generator required, PIC16F1575 Definitions
   110                           ; 
   111                           ; SFR Addresses
   112  0000                     	;# 
   113  0001                     	;# 
   114  0002                     	;# 
   115  0003                     	;# 
   116  0004                     	;# 
   117  0005                     	;# 
   118  0006                     	;# 
   119  0007                     	;# 
   120  0008                     	;# 
   121  0009                     	;# 
   122  000A                     	;# 
   123  000B                     	;# 
   124  000C                     	;# 
   125  000E                     	;# 
   126  0011                     	;# 
   127  0012                     	;# 
   128  0013                     	;# 
   129  0015                     	;# 
   130  0016                     	;# 
   131  0016                     	;# 
   132  0017                     	;# 
   133  0018                     	;# 
   134  0019                     	;# 
   135  001A                     	;# 
   136  001B                     	;# 
   137  001C                     	;# 
   138  008C                     	;# 
   139  008E                     	;# 
   140  0091                     	;# 
   141  0092                     	;# 
   142  0093                     	;# 
   143  0095                     	;# 
   144  0096                     	;# 
   145  0097                     	;# 
   146  0098                     	;# 
   147  0099                     	;# 
   148  009A                     	;# 
   149  009B                     	;# 
   150  009B                     	;# 
   151  009C                     	;# 
   152  009D                     	;# 
   153  009E                     	;# 
   154  009F                     	;# 
   155  010C                     	;# 
   156  010E                     	;# 
   157  0111                     	;# 
   158  0112                     	;# 
   159  0113                     	;# 
   160  0114                     	;# 
   161  0115                     	;# 
   162  0116                     	;# 
   163  0117                     	;# 
   164  0118                     	;# 
   165  0119                     	;# 
   166  018C                     	;# 
   167  018E                     	;# 
   168  0191                     	;# 
   169  0191                     	;# 
   170  0192                     	;# 
   171  0193                     	;# 
   172  0193                     	;# 
   173  0194                     	;# 
   174  0195                     	;# 
   175  0196                     	;# 
   176  0197                     	;# 
   177  0199                     	;# 
   178  019A                     	;# 
   179  019B                     	;# 
   180  019B                     	;# 
   181  019C                     	;# 
   182  019D                     	;# 
   183  019E                     	;# 
   184  019F                     	;# 
   185  020C                     	;# 
   186  020E                     	;# 
   187  028C                     	;# 
   188  028E                     	;# 
   189  030C                     	;# 
   190  030E                     	;# 
   191  038C                     	;# 
   192  038E                     	;# 
   193  0391                     	;# 
   194  0392                     	;# 
   195  0393                     	;# 
   196  0397                     	;# 
   197  0398                     	;# 
   198  0399                     	;# 
   199  0691                     	;# 
   200  0692                     	;# 
   201  0693                     	;# 
   202  0694                     	;# 
   203  0695                     	;# 
   204  0D8E                     	;# 
   205  0D8F                     	;# 
   206  0D90                     	;# 
   207  0D91                     	;# 
   208  0D91                     	;# 
   209  0D92                     	;# 
   210  0D93                     	;# 
   211  0D93                     	;# 
   212  0D94                     	;# 
   213  0D95                     	;# 
   214  0D95                     	;# 
   215  0D96                     	;# 
   216  0D97                     	;# 
   217  0D97                     	;# 
   218  0D98                     	;# 
   219  0D99                     	;# 
   220  0D99                     	;# 
   221  0D9A                     	;# 
   222  0D9B                     	;# 
   223  0D9C                     	;# 
   224  0D9C                     	;# 
   225  0D9D                     	;# 
   226  0D9D                     	;# 
   227  0D9E                     	;# 
   228  0D9F                     	;# 
   229  0DA0                     	;# 
   230  0DA1                     	;# 
   231  0DA1                     	;# 
   232  0DA2                     	;# 
   233  0DA3                     	;# 
   234  0DA3                     	;# 
   235  0DA4                     	;# 
   236  0DA5                     	;# 
   237  0DA5                     	;# 
   238  0DA6                     	;# 
   239  0DA7                     	;# 
   240  0DA7                     	;# 
   241  0DA8                     	;# 
   242  0DA9                     	;# 
   243  0DA9                     	;# 
   244  0DAA                     	;# 
   245  0DAB                     	;# 
   246  0DAC                     	;# 
   247  0DAC                     	;# 
   248  0DAD                     	;# 
   249  0DAD                     	;# 
   250  0DAE                     	;# 
   251  0DAF                     	;# 
   252  0DB0                     	;# 
   253  0DB1                     	;# 
   254  0DB1                     	;# 
   255  0DB2                     	;# 
   256  0DB3                     	;# 
   257  0DB3                     	;# 
   258  0DB4                     	;# 
   259  0DB5                     	;# 
   260  0DB5                     	;# 
   261  0DB6                     	;# 
   262  0DB7                     	;# 
   263  0DB7                     	;# 
   264  0DB8                     	;# 
   265  0DB9                     	;# 
   266  0DB9                     	;# 
   267  0DBA                     	;# 
   268  0DBB                     	;# 
   269  0DBC                     	;# 
   270  0DBC                     	;# 
   271  0DBD                     	;# 
   272  0DBD                     	;# 
   273  0DBE                     	;# 
   274  0DBF                     	;# 
   275  0DC0                     	;# 
   276  0DC1                     	;# 
   277  0DC1                     	;# 
   278  0DC2                     	;# 
   279  0DC3                     	;# 
   280  0DC3                     	;# 
   281  0DC4                     	;# 
   282  0DC5                     	;# 
   283  0DC5                     	;# 
   284  0DC6                     	;# 
   285  0DC7                     	;# 
   286  0DC7                     	;# 
   287  0DC8                     	;# 
   288  0DC9                     	;# 
   289  0DC9                     	;# 
   290  0DCA                     	;# 
   291  0DCB                     	;# 
   292  0DCC                     	;# 
   293  0DCC                     	;# 
   294  0DCD                     	;# 
   295  0DCD                     	;# 
   296  0DCE                     	;# 
   297  0DCF                     	;# 
   298  0DD0                     	;# 
   299  0E0F                     	;# 
   300  0E10                     	;# 
   301  0E11                     	;# 
   302  0E12                     	;# 
   303  0E13                     	;# 
   304  0E14                     	;# 
   305  0E15                     	;# 
   306  0E16                     	;# 
   307  0E17                     	;# 
   308  0E90                     	;# 
   309  0E91                     	;# 
   310  0E92                     	;# 
   311  0E94                     	;# 
   312  0E95                     	;# 
   313  0EA0                     	;# 
   314  0EA1                     	;# 
   315  0EA2                     	;# 
   316  0EA3                     	;# 
   317  0EA4                     	;# 
   318  0EA5                     	;# 
   319  0FE4                     	;# 
   320  0FE5                     	;# 
   321  0FE6                     	;# 
   322  0FE7                     	;# 
   323  0FE8                     	;# 
   324  0FE8                     	;# 
   325  0FE9                     	;# 
   326  0FEA                     	;# 
   327  0FEA                     	;# 
   328  0FEB                     	;# 
   329  0FED                     	;# 
   330  0FEE                     	;# 
   331  0FEE                     	;# 
   332  0FEF                     	;# 
   333  0000                     	;# 
   334  0001                     	;# 
   335  0002                     	;# 
   336  0003                     	;# 
   337  0004                     	;# 
   338  0005                     	;# 
   339  0006                     	;# 
   340  0007                     	;# 
   341  0008                     	;# 
   342  0009                     	;# 
   343  000A                     	;# 
   344  000B                     	;# 
   345  000C                     	;# 
   346  000E                     	;# 
   347  0011                     	;# 
   348  0012                     	;# 
   349  0013                     	;# 
   350  0015                     	;# 
   351  0016                     	;# 
   352  0016                     	;# 
   353  0017                     	;# 
   354  0018                     	;# 
   355  0019                     	;# 
   356  001A                     	;# 
   357  001B                     	;# 
   358  001C                     	;# 
   359  008C                     	;# 
   360  008E                     	;# 
   361  0091                     	;# 
   362  0092                     	;# 
   363  0093                     	;# 
   364  0095                     	;# 
   365  0096                     	;# 
   366  0097                     	;# 
   367  0098                     	;# 
   368  0099                     	;# 
   369  009A                     	;# 
   370  009B                     	;# 
   371  009B                     	;# 
   372  009C                     	;# 
   373  009D                     	;# 
   374  009E                     	;# 
   375  009F                     	;# 
   376  010C                     	;# 
   377  010E                     	;# 
   378  0111                     	;# 
   379  0112                     	;# 
   380  0113                     	;# 
   381  0114                     	;# 
   382  0115                     	;# 
   383  0116                     	;# 
   384  0117                     	;# 
   385  0118                     	;# 
   386  0119                     	;# 
   387  018C                     	;# 
   388  018E                     	;# 
   389  0191                     	;# 
   390  0191                     	;# 
   391  0192                     	;# 
   392  0193                     	;# 
   393  0193                     	;# 
   394  0194                     	;# 
   395  0195                     	;# 
   396  0196                     	;# 
   397  0197                     	;# 
   398  0199                     	;# 
   399  019A                     	;# 
   400  019B                     	;# 
   401  019B                     	;# 
   402  019C                     	;# 
   403  019D                     	;# 
   404  019E                     	;# 
   405  019F                     	;# 
   406  020C                     	;# 
   407  020E                     	;# 
   408  028C                     	;# 
   409  028E                     	;# 
   410  030C                     	;# 
   411  030E                     	;# 
   412  038C                     	;# 
   413  038E                     	;# 
   414  0391                     	;# 
   415  0392                     	;# 
   416  0393                     	;# 
   417  0397                     	;# 
   418  0398                     	;# 
   419  0399                     	;# 
   420  0691                     	;# 
   421  0692                     	;# 
   422  0693                     	;# 
   423  0694                     	;# 
   424  0695                     	;# 
   425  0D8E                     	;# 
   426  0D8F                     	;# 
   427  0D90                     	;# 
   428  0D91                     	;# 
   429  0D91                     	;# 
   430  0D92                     	;# 
   431  0D93                     	;# 
   432  0D93                     	;# 
   433  0D94                     	;# 
   434  0D95                     	;# 
   435  0D95                     	;# 
   436  0D96                     	;# 
   437  0D97                     	;# 
   438  0D97                     	;# 
   439  0D98                     	;# 
   440  0D99                     	;# 
   441  0D99                     	;# 
   442  0D9A                     	;# 
   443  0D9B                     	;# 
   444  0D9C                     	;# 
   445  0D9C                     	;# 
   446  0D9D                     	;# 
   447  0D9D                     	;# 
   448  0D9E                     	;# 
   449  0D9F                     	;# 
   450  0DA0                     	;# 
   451  0DA1                     	;# 
   452  0DA1                     	;# 
   453  0DA2                     	;# 
   454  0DA3                     	;# 
   455  0DA3                     	;# 
   456  0DA4                     	;# 
   457  0DA5                     	;# 
   458  0DA5                     	;# 
   459  0DA6                     	;# 
   460  0DA7                     	;# 
   461  0DA7                     	;# 
   462  0DA8                     	;# 
   463  0DA9                     	;# 
   464  0DA9                     	;# 
   465  0DAA                     	;# 
   466  0DAB                     	;# 
   467  0DAC                     	;# 
   468  0DAC                     	;# 
   469  0DAD                     	;# 
   470  0DAD                     	;# 
   471  0DAE                     	;# 
   472  0DAF                     	;# 
   473  0DB0                     	;# 
   474  0DB1                     	;# 
   475  0DB1                     	;# 
   476  0DB2                     	;# 
   477  0DB3                     	;# 
   478  0DB3                     	;# 
   479  0DB4                     	;# 
   480  0DB5                     	;# 
   481  0DB5                     	;# 
   482  0DB6                     	;# 
   483  0DB7                     	;# 
   484  0DB7                     	;# 
   485  0DB8                     	;# 
   486  0DB9                     	;# 
   487  0DB9                     	;# 
   488  0DBA                     	;# 
   489  0DBB                     	;# 
   490  0DBC                     	;# 
   491  0DBC                     	;# 
   492  0DBD                     	;# 
   493  0DBD                     	;# 
   494  0DBE                     	;# 
   495  0DBF                     	;# 
   496  0DC0                     	;# 
   497  0DC1                     	;# 
   498  0DC1                     	;# 
   499  0DC2                     	;# 
   500  0DC3                     	;# 
   501  0DC3                     	;# 
   502  0DC4                     	;# 
   503  0DC5                     	;# 
   504  0DC5                     	;# 
   505  0DC6                     	;# 
   506  0DC7                     	;# 
   507  0DC7                     	;# 
   508  0DC8                     	;# 
   509  0DC9                     	;# 
   510  0DC9                     	;# 
   511  0DCA                     	;# 
   512  0DCB                     	;# 
   513  0DCC                     	;# 
   514  0DCC                     	;# 
   515  0DCD                     	;# 
   516  0DCD                     	;# 
   517  0DCE                     	;# 
   518  0DCF                     	;# 
   519  0DD0                     	;# 
   520  0E0F                     	;# 
   521  0E10                     	;# 
   522  0E11                     	;# 
   523  0E12                     	;# 
   524  0E13                     	;# 
   525  0E14                     	;# 
   526  0E15                     	;# 
   527  0E16                     	;# 
   528  0E17                     	;# 
   529  0E90                     	;# 
   530  0E91                     	;# 
   531  0E92                     	;# 
   532  0E94                     	;# 
   533  0E95                     	;# 
   534  0EA0                     	;# 
   535  0EA1                     	;# 
   536  0EA2                     	;# 
   537  0EA3                     	;# 
   538  0EA4                     	;# 
   539  0EA5                     	;# 
   540  0FE4                     	;# 
   541  0FE5                     	;# 
   542  0FE6                     	;# 
   543  0FE7                     	;# 
   544  0FE8                     	;# 
   545  0FE8                     	;# 
   546  0FE9                     	;# 
   547  0FEA                     	;# 
   548  0FEA                     	;# 
   549  0FEB                     	;# 
   550  0FED                     	;# 
   551  0FEE                     	;# 
   552  0FEE                     	;# 
   553  0FEF                     	;# 
   554  0000                     	;# 
   555  0001                     	;# 
   556  0002                     	;# 
   557  0003                     	;# 
   558  0004                     	;# 
   559  0005                     	;# 
   560  0006                     	;# 
   561  0007                     	;# 
   562  0008                     	;# 
   563  0009                     	;# 
   564  000A                     	;# 
   565  000B                     	;# 
   566  000C                     	;# 
   567  000E                     	;# 
   568  0011                     	;# 
   569  0012                     	;# 
   570  0013                     	;# 
   571  0015                     	;# 
   572  0016                     	;# 
   573  0016                     	;# 
   574  0017                     	;# 
   575  0018                     	;# 
   576  0019                     	;# 
   577  001A                     	;# 
   578  001B                     	;# 
   579  001C                     	;# 
   580  008C                     	;# 
   581  008E                     	;# 
   582  0091                     	;# 
   583  0092                     	;# 
   584  0093                     	;# 
   585  0095                     	;# 
   586  0096                     	;# 
   587  0097                     	;# 
   588  0098                     	;# 
   589  0099                     	;# 
   590  009A                     	;# 
   591  009B                     	;# 
   592  009B                     	;# 
   593  009C                     	;# 
   594  009D                     	;# 
   595  009E                     	;# 
   596  009F                     	;# 
   597  010C                     	;# 
   598  010E                     	;# 
   599  0111                     	;# 
   600  0112                     	;# 
   601  0113                     	;# 
   602  0114                     	;# 
   603  0115                     	;# 
   604  0116                     	;# 
   605  0117                     	;# 
   606  0118                     	;# 
   607  0119                     	;# 
   608  018C                     	;# 
   609  018E                     	;# 
   610  0191                     	;# 
   611  0191                     	;# 
   612  0192                     	;# 
   613  0193                     	;# 
   614  0193                     	;# 
   615  0194                     	;# 
   616  0195                     	;# 
   617  0196                     	;# 
   618  0197                     	;# 
   619  0199                     	;# 
   620  019A                     	;# 
   621  019B                     	;# 
   622  019B                     	;# 
   623  019C                     	;# 
   624  019D                     	;# 
   625  019E                     	;# 
   626  019F                     	;# 
   627  020C                     	;# 
   628  020E                     	;# 
   629  028C                     	;# 
   630  028E                     	;# 
   631  030C                     	;# 
   632  030E                     	;# 
   633  038C                     	;# 
   634  038E                     	;# 
   635  0391                     	;# 
   636  0392                     	;# 
   637  0393                     	;# 
   638  0397                     	;# 
   639  0398                     	;# 
   640  0399                     	;# 
   641  0691                     	;# 
   642  0692                     	;# 
   643  0693                     	;# 
   644  0694                     	;# 
   645  0695                     	;# 
   646  0D8E                     	;# 
   647  0D8F                     	;# 
   648  0D90                     	;# 
   649  0D91                     	;# 
   650  0D91                     	;# 
   651  0D92                     	;# 
   652  0D93                     	;# 
   653  0D93                     	;# 
   654  0D94                     	;# 
   655  0D95                     	;# 
   656  0D95                     	;# 
   657  0D96                     	;# 
   658  0D97                     	;# 
   659  0D97                     	;# 
   660  0D98                     	;# 
   661  0D99                     	;# 
   662  0D99                     	;# 
   663  0D9A                     	;# 
   664  0D9B                     	;# 
   665  0D9C                     	;# 
   666  0D9C                     	;# 
   667  0D9D                     	;# 
   668  0D9D                     	;# 
   669  0D9E                     	;# 
   670  0D9F                     	;# 
   671  0DA0                     	;# 
   672  0DA1                     	;# 
   673  0DA1                     	;# 
   674  0DA2                     	;# 
   675  0DA3                     	;# 
   676  0DA3                     	;# 
   677  0DA4                     	;# 
   678  0DA5                     	;# 
   679  0DA5                     	;# 
   680  0DA6                     	;# 
   681  0DA7                     	;# 
   682  0DA7                     	;# 
   683  0DA8                     	;# 
   684  0DA9                     	;# 
   685  0DA9                     	;# 
   686  0DAA                     	;# 
   687  0DAB                     	;# 
   688  0DAC                     	;# 
   689  0DAC                     	;# 
   690  0DAD                     	;# 
   691  0DAD                     	;# 
   692  0DAE                     	;# 
   693  0DAF                     	;# 
   694  0DB0                     	;# 
   695  0DB1                     	;# 
   696  0DB1                     	;# 
   697  0DB2                     	;# 
   698  0DB3                     	;# 
   699  0DB3                     	;# 
   700  0DB4                     	;# 
   701  0DB5                     	;# 
   702  0DB5                     	;# 
   703  0DB6                     	;# 
   704  0DB7                     	;# 
   705  0DB7                     	;# 
   706  0DB8                     	;# 
   707  0DB9                     	;# 
   708  0DB9                     	;# 
   709  0DBA                     	;# 
   710  0DBB                     	;# 
   711  0DBC                     	;# 
   712  0DBC                     	;# 
   713  0DBD                     	;# 
   714  0DBD                     	;# 
   715  0DBE                     	;# 
   716  0DBF                     	;# 
   717  0DC0                     	;# 
   718  0DC1                     	;# 
   719  0DC1                     	;# 
   720  0DC2                     	;# 
   721  0DC3                     	;# 
   722  0DC3                     	;# 
   723  0DC4                     	;# 
   724  0DC5                     	;# 
   725  0DC5                     	;# 
   726  0DC6                     	;# 
   727  0DC7                     	;# 
   728  0DC7                     	;# 
   729  0DC8                     	;# 
   730  0DC9                     	;# 
   731  0DC9                     	;# 
   732  0DCA                     	;# 
   733  0DCB                     	;# 
   734  0DCC                     	;# 
   735  0DCC                     	;# 
   736  0DCD                     	;# 
   737  0DCD                     	;# 
   738  0DCE                     	;# 
   739  0DCF                     	;# 
   740  0DD0                     	;# 
   741  0E0F                     	;# 
   742  0E10                     	;# 
   743  0E11                     	;# 
   744  0E12                     	;# 
   745  0E13                     	;# 
   746  0E14                     	;# 
   747  0E15                     	;# 
   748  0E16                     	;# 
   749  0E17                     	;# 
   750  0E90                     	;# 
   751  0E91                     	;# 
   752  0E92                     	;# 
   753  0E94                     	;# 
   754  0E95                     	;# 
   755  0EA0                     	;# 
   756  0EA1                     	;# 
   757  0EA2                     	;# 
   758  0EA3                     	;# 
   759  0EA4                     	;# 
   760  0EA5                     	;# 
   761  0FE4                     	;# 
   762  0FE5                     	;# 
   763  0FE6                     	;# 
   764  0FE7                     	;# 
   765  0FE8                     	;# 
   766  0FE8                     	;# 
   767  0FE9                     	;# 
   768  0FEA                     	;# 
   769  0FEA                     	;# 
   770  0FEB                     	;# 
   771  0FED                     	;# 
   772  0FEE                     	;# 
   773  0FEE                     	;# 
   774  0FEF                     	;# 
   775  0000                     	;# 
   776  0001                     	;# 
   777  0002                     	;# 
   778  0003                     	;# 
   779  0004                     	;# 
   780  0005                     	;# 
   781  0006                     	;# 
   782  0007                     	;# 
   783  0008                     	;# 
   784  0009                     	;# 
   785  000A                     	;# 
   786  000B                     	;# 
   787  000C                     	;# 
   788  000E                     	;# 
   789  0011                     	;# 
   790  0012                     	;# 
   791  0013                     	;# 
   792  0015                     	;# 
   793  0016                     	;# 
   794  0016                     	;# 
   795  0017                     	;# 
   796  0018                     	;# 
   797  0019                     	;# 
   798  001A                     	;# 
   799  001B                     	;# 
   800  001C                     	;# 
   801  008C                     	;# 
   802  008E                     	;# 
   803  0091                     	;# 
   804  0092                     	;# 
   805  0093                     	;# 
   806  0095                     	;# 
   807  0096                     	;# 
   808  0097                     	;# 
   809  0098                     	;# 
   810  0099                     	;# 
   811  009A                     	;# 
   812  009B                     	;# 
   813  009B                     	;# 
   814  009C                     	;# 
   815  009D                     	;# 
   816  009E                     	;# 
   817  009F                     	;# 
   818  010C                     	;# 
   819  010E                     	;# 
   820  0111                     	;# 
   821  0112                     	;# 
   822  0113                     	;# 
   823  0114                     	;# 
   824  0115                     	;# 
   825  0116                     	;# 
   826  0117                     	;# 
   827  0118                     	;# 
   828  0119                     	;# 
   829  018C                     	;# 
   830  018E                     	;# 
   831  0191                     	;# 
   832  0191                     	;# 
   833  0192                     	;# 
   834  0193                     	;# 
   835  0193                     	;# 
   836  0194                     	;# 
   837  0195                     	;# 
   838  0196                     	;# 
   839  0197                     	;# 
   840  0199                     	;# 
   841  019A                     	;# 
   842  019B                     	;# 
   843  019B                     	;# 
   844  019C                     	;# 
   845  019D                     	;# 
   846  019E                     	;# 
   847  019F                     	;# 
   848  020C                     	;# 
   849  020E                     	;# 
   850  028C                     	;# 
   851  028E                     	;# 
   852  030C                     	;# 
   853  030E                     	;# 
   854  038C                     	;# 
   855  038E                     	;# 
   856  0391                     	;# 
   857  0392                     	;# 
   858  0393                     	;# 
   859  0397                     	;# 
   860  0398                     	;# 
   861  0399                     	;# 
   862  0691                     	;# 
   863  0692                     	;# 
   864  0693                     	;# 
   865  0694                     	;# 
   866  0695                     	;# 
   867  0D8E                     	;# 
   868  0D8F                     	;# 
   869  0D90                     	;# 
   870  0D91                     	;# 
   871  0D91                     	;# 
   872  0D92                     	;# 
   873  0D93                     	;# 
   874  0D93                     	;# 
   875  0D94                     	;# 
   876  0D95                     	;# 
   877  0D95                     	;# 
   878  0D96                     	;# 
   879  0D97                     	;# 
   880  0D97                     	;# 
   881  0D98                     	;# 
   882  0D99                     	;# 
   883  0D99                     	;# 
   884  0D9A                     	;# 
   885  0D9B                     	;# 
   886  0D9C                     	;# 
   887  0D9C                     	;# 
   888  0D9D                     	;# 
   889  0D9D                     	;# 
   890  0D9E                     	;# 
   891  0D9F                     	;# 
   892  0DA0                     	;# 
   893  0DA1                     	;# 
   894  0DA1                     	;# 
   895  0DA2                     	;# 
   896  0DA3                     	;# 
   897  0DA3                     	;# 
   898  0DA4                     	;# 
   899  0DA5                     	;# 
   900  0DA5                     	;# 
   901  0DA6                     	;# 
   902  0DA7                     	;# 
   903  0DA7                     	;# 
   904  0DA8                     	;# 
   905  0DA9                     	;# 
   906  0DA9                     	;# 
   907  0DAA                     	;# 
   908  0DAB                     	;# 
   909  0DAC                     	;# 
   910  0DAC                     	;# 
   911  0DAD                     	;# 
   912  0DAD                     	;# 
   913  0DAE                     	;# 
   914  0DAF                     	;# 
   915  0DB0                     	;# 
   916  0DB1                     	;# 
   917  0DB1                     	;# 
   918  0DB2                     	;# 
   919  0DB3                     	;# 
   920  0DB3                     	;# 
   921  0DB4                     	;# 
   922  0DB5                     	;# 
   923  0DB5                     	;# 
   924  0DB6                     	;# 
   925  0DB7                     	;# 
   926  0DB7                     	;# 
   927  0DB8                     	;# 
   928  0DB9                     	;# 
   929  0DB9                     	;# 
   930  0DBA                     	;# 
   931  0DBB                     	;# 
   932  0DBC                     	;# 
   933  0DBC                     	;# 
   934  0DBD                     	;# 
   935  0DBD                     	;# 
   936  0DBE                     	;# 
   937  0DBF                     	;# 
   938  0DC0                     	;# 
   939  0DC1                     	;# 
   940  0DC1                     	;# 
   941  0DC2                     	;# 
   942  0DC3                     	;# 
   943  0DC3                     	;# 
   944  0DC4                     	;# 
   945  0DC5                     	;# 
   946  0DC5                     	;# 
   947  0DC6                     	;# 
   948  0DC7                     	;# 
   949  0DC7                     	;# 
   950  0DC8                     	;# 
   951  0DC9                     	;# 
   952  0DC9                     	;# 
   953  0DCA                     	;# 
   954  0DCB                     	;# 
   955  0DCC                     	;# 
   956  0DCC                     	;# 
   957  0DCD                     	;# 
   958  0DCD                     	;# 
   959  0DCE                     	;# 
   960  0DCF                     	;# 
   961  0DD0                     	;# 
   962  0E0F                     	;# 
   963  0E10                     	;# 
   964  0E11                     	;# 
   965  0E12                     	;# 
   966  0E13                     	;# 
   967  0E14                     	;# 
   968  0E15                     	;# 
   969  0E16                     	;# 
   970  0E17                     	;# 
   971  0E90                     	;# 
   972  0E91                     	;# 
   973  0E92                     	;# 
   974  0E94                     	;# 
   975  0E95                     	;# 
   976  0EA0                     	;# 
   977  0EA1                     	;# 
   978  0EA2                     	;# 
   979  0EA3                     	;# 
   980  0EA4                     	;# 
   981  0EA5                     	;# 
   982  0FE4                     	;# 
   983  0FE5                     	;# 
   984  0FE6                     	;# 
   985  0FE7                     	;# 
   986  0FE8                     	;# 
   987  0FE8                     	;# 
   988  0FE9                     	;# 
   989  0FEA                     	;# 
   990  0FEA                     	;# 
   991  0FEB                     	;# 
   992  0FED                     	;# 
   993  0FEE                     	;# 
   994  0FEE                     	;# 
   995  0FEF                     	;# 
   996  0000                     	;# 
   997  0001                     	;# 
   998  0002                     	;# 
   999  0003                     	;# 
  1000  0004                     	;# 
  1001  0005                     	;# 
  1002  0006                     	;# 
  1003  0007                     	;# 
  1004  0008                     	;# 
  1005  0009                     	;# 
  1006  000A                     	;# 
  1007  000B                     	;# 
  1008  000C                     	;# 
  1009  000E                     	;# 
  1010  0011                     	;# 
  1011  0012                     	;# 
  1012  0013                     	;# 
  1013  0015                     	;# 
  1014  0016                     	;# 
  1015  0016                     	;# 
  1016  0017                     	;# 
  1017  0018                     	;# 
  1018  0019                     	;# 
  1019  001A                     	;# 
  1020  001B                     	;# 
  1021  001C                     	;# 
  1022  008C                     	;# 
  1023  008E                     	;# 
  1024  0091                     	;# 
  1025  0092                     	;# 
  1026  0093                     	;# 
  1027  0095                     	;# 
  1028  0096                     	;# 
  1029  0097                     	;# 
  1030  0098                     	;# 
  1031  0099                     	;# 
  1032  009A                     	;# 
  1033  009B                     	;# 
  1034  009B                     	;# 
  1035  009C                     	;# 
  1036  009D                     	;# 
  1037  009E                     	;# 
  1038  009F                     	;# 
  1039  010C                     	;# 
  1040  010E                     	;# 
  1041  0111                     	;# 
  1042  0112                     	;# 
  1043  0113                     	;# 
  1044  0114                     	;# 
  1045  0115                     	;# 
  1046  0116                     	;# 
  1047  0117                     	;# 
  1048  0118                     	;# 
  1049  0119                     	;# 
  1050  018C                     	;# 
  1051  018E                     	;# 
  1052  0191                     	;# 
  1053  0191                     	;# 
  1054  0192                     	;# 
  1055  0193                     	;# 
  1056  0193                     	;# 
  1057  0194                     	;# 
  1058  0195                     	;# 
  1059  0196                     	;# 
  1060  0197                     	;# 
  1061  0199                     	;# 
  1062  019A                     	;# 
  1063  019B                     	;# 
  1064  019B                     	;# 
  1065  019C                     	;# 
  1066  019D                     	;# 
  1067  019E                     	;# 
  1068  019F                     	;# 
  1069  020C                     	;# 
  1070  020E                     	;# 
  1071  028C                     	;# 
  1072  028E                     	;# 
  1073  030C                     	;# 
  1074  030E                     	;# 
  1075  038C                     	;# 
  1076  038E                     	;# 
  1077  0391                     	;# 
  1078  0392                     	;# 
  1079  0393                     	;# 
  1080  0397                     	;# 
  1081  0398                     	;# 
  1082  0399                     	;# 
  1083  0691                     	;# 
  1084  0692                     	;# 
  1085  0693                     	;# 
  1086  0694                     	;# 
  1087  0695                     	;# 
  1088  0D8E                     	;# 
  1089  0D8F                     	;# 
  1090  0D90                     	;# 
  1091  0D91                     	;# 
  1092  0D91                     	;# 
  1093  0D92                     	;# 
  1094  0D93                     	;# 
  1095  0D93                     	;# 
  1096  0D94                     	;# 
  1097  0D95                     	;# 
  1098  0D95                     	;# 
  1099  0D96                     	;# 
  1100  0D97                     	;# 
  1101  0D97                     	;# 
  1102  0D98                     	;# 
  1103  0D99                     	;# 
  1104  0D99                     	;# 
  1105  0D9A                     	;# 
  1106  0D9B                     	;# 
  1107  0D9C                     	;# 
  1108  0D9C                     	;# 
  1109  0D9D                     	;# 
  1110  0D9D                     	;# 
  1111  0D9E                     	;# 
  1112  0D9F                     	;# 
  1113  0DA0                     	;# 
  1114  0DA1                     	;# 
  1115  0DA1                     	;# 
  1116  0DA2                     	;# 
  1117  0DA3                     	;# 
  1118  0DA3                     	;# 
  1119  0DA4                     	;# 
  1120  0DA5                     	;# 
  1121  0DA5                     	;# 
  1122  0DA6                     	;# 
  1123  0DA7                     	;# 
  1124  0DA7                     	;# 
  1125  0DA8                     	;# 
  1126  0DA9                     	;# 
  1127  0DA9                     	;# 
  1128  0DAA                     	;# 
  1129  0DAB                     	;# 
  1130  0DAC                     	;# 
  1131  0DAC                     	;# 
  1132  0DAD                     	;# 
  1133  0DAD                     	;# 
  1134  0DAE                     	;# 
  1135  0DAF                     	;# 
  1136  0DB0                     	;# 
  1137  0DB1                     	;# 
  1138  0DB1                     	;# 
  1139  0DB2                     	;# 
  1140  0DB3                     	;# 
  1141  0DB3                     	;# 
  1142  0DB4                     	;# 
  1143  0DB5                     	;# 
  1144  0DB5                     	;# 
  1145  0DB6                     	;# 
  1146  0DB7                     	;# 
  1147  0DB7                     	;# 
  1148  0DB8                     	;# 
  1149  0DB9                     	;# 
  1150  0DB9                     	;# 
  1151  0DBA                     	;# 
  1152  0DBB                     	;# 
  1153  0DBC                     	;# 
  1154  0DBC                     	;# 
  1155  0DBD                     	;# 
  1156  0DBD                     	;# 
  1157  0DBE                     	;# 
  1158  0DBF                     	;# 
  1159  0DC0                     	;# 
  1160  0DC1                     	;# 
  1161  0DC1                     	;# 
  1162  0DC2                     	;# 
  1163  0DC3                     	;# 
  1164  0DC3                     	;# 
  1165  0DC4                     	;# 
  1166  0DC5                     	;# 
  1167  0DC5                     	;# 
  1168  0DC6                     	;# 
  1169  0DC7                     	;# 
  1170  0DC7                     	;# 
  1171  0DC8                     	;# 
  1172  0DC9                     	;# 
  1173  0DC9                     	;# 
  1174  0DCA                     	;# 
  1175  0DCB                     	;# 
  1176  0DCC                     	;# 
  1177  0DCC                     	;# 
  1178  0DCD                     	;# 
  1179  0DCD                     	;# 
  1180  0DCE                     	;# 
  1181  0DCF                     	;# 
  1182  0DD0                     	;# 
  1183  0E0F                     	;# 
  1184  0E10                     	;# 
  1185  0E11                     	;# 
  1186  0E12                     	;# 
  1187  0E13                     	;# 
  1188  0E14                     	;# 
  1189  0E15                     	;# 
  1190  0E16                     	;# 
  1191  0E17                     	;# 
  1192  0E90                     	;# 
  1193  0E91                     	;# 
  1194  0E92                     	;# 
  1195  0E94                     	;# 
  1196  0E95                     	;# 
  1197  0EA0                     	;# 
  1198  0EA1                     	;# 
  1199  0EA2                     	;# 
  1200  0EA3                     	;# 
  1201  0EA4                     	;# 
  1202  0EA5                     	;# 
  1203  0FE4                     	;# 
  1204  0FE5                     	;# 
  1205  0FE6                     	;# 
  1206  0FE7                     	;# 
  1207  0FE8                     	;# 
  1208  0FE8                     	;# 
  1209  0FE9                     	;# 
  1210  0FEA                     	;# 
  1211  0FEA                     	;# 
  1212  0FEB                     	;# 
  1213  0FED                     	;# 
  1214  0FEE                     	;# 
  1215  0FEE                     	;# 
  1216  0FEF                     	;# 
  1217  0FFF                     	;# 
  1218  0000                     	;# 
  1219  0001                     	;# 
  1220  0002                     	;# 
  1221  0003                     	;# 
  1222  0004                     	;# 
  1223  0005                     	;# 
  1224  0006                     	;# 
  1225  0007                     	;# 
  1226  0008                     	;# 
  1227  0009                     	;# 
  1228  000A                     	;# 
  1229  000B                     	;# 
  1230  000C                     	;# 
  1231  000E                     	;# 
  1232  0011                     	;# 
  1233  0012                     	;# 
  1234  0013                     	;# 
  1235  0015                     	;# 
  1236  0016                     	;# 
  1237  0016                     	;# 
  1238  0017                     	;# 
  1239  0018                     	;# 
  1240  0019                     	;# 
  1241  001A                     	;# 
  1242  001B                     	;# 
  1243  001C                     	;# 
  1244  008C                     	;# 
  1245  008E                     	;# 
  1246  0091                     	;# 
  1247  0092                     	;# 
  1248  0093                     	;# 
  1249  0095                     	;# 
  1250  0096                     	;# 
  1251  0097                     	;# 
  1252  0098                     	;# 
  1253  0099                     	;# 
  1254  009A                     	;# 
  1255  009B                     	;# 
  1256  009B                     	;# 
  1257  009C                     	;# 
  1258  009D                     	;# 
  1259  009E                     	;# 
  1260  009F                     	;# 
  1261  010C                     	;# 
  1262  010E                     	;# 
  1263  0111                     	;# 
  1264  0112                     	;# 
  1265  0113                     	;# 
  1266  0114                     	;# 
  1267  0115                     	;# 
  1268  0116                     	;# 
  1269  0117                     	;# 
  1270  0118                     	;# 
  1271  0119                     	;# 
  1272  018C                     	;# 
  1273  018E                     	;# 
  1274  0191                     	;# 
  1275  0191                     	;# 
  1276  0192                     	;# 
  1277  0193                     	;# 
  1278  0193                     	;# 
  1279  0194                     	;# 
  1280  0195                     	;# 
  1281  0196                     	;# 
  1282  0197                     	;# 
  1283  0199                     	;# 
  1284  019A                     	;# 
  1285  019B                     	;# 
  1286  019B                     	;# 
  1287  019C                     	;# 
  1288  019D                     	;# 
  1289  019E                     	;# 
  1290  019F                     	;# 
  1291  020C                     	;# 
  1292  020E                     	;# 
  1293  028C                     	;# 
  1294  028E                     	;# 
  1295  030C                     	;# 
  1296  030E                     	;# 
  1297  038C                     	;# 
  1298  038E                     	;# 
  1299  0391                     	;# 
  1300  0392                     	;# 
  1301  0393                     	;# 
  1302  0397                     	;# 
  1303  0398                     	;# 
  1304  0399                     	;# 
  1305  0691                     	;# 
  1306  0692                     	;# 
  1307  0693                     	;# 
  1308  0694                     	;# 
  1309  0695                     	;# 
  1310  0D8E                     	;# 
  1311  0D8F                     	;# 
  1312  0D90                     	;# 
  1313  0D91                     	;# 
  1314  0D91                     	;# 
  1315  0D92                     	;# 
  1316  0D93                     	;# 
  1317  0D93                     	;# 
  1318  0D94                     	;# 
  1319  0D95                     	;# 
  1320  0D95                     	;# 
  1321  0D96                     	;# 
  1322  0D97                     	;# 
  1323  0D97                     	;# 
  1324  0D98                     	;# 
  1325  0D99                     	;# 
  1326  0D99                     	;# 
  1327  0D9A                     	;# 
  1328  0D9B                     	;# 
  1329  0D9C                     	;# 
  1330  0D9C                     	;# 
  1331  0D9D                     	;# 
  1332  0D9D                     	;# 
  1333  0D9E                     	;# 
  1334  0D9F                     	;# 
  1335  0DA0                     	;# 
  1336  0DA1                     	;# 
  1337  0DA1                     	;# 
  1338  0DA2                     	;# 
  1339  0DA3                     	;# 
  1340  0DA3                     	;# 
  1341  0DA4                     	;# 
  1342  0DA5                     	;# 
  1343  0DA5                     	;# 
  1344  0DA6                     	;# 
  1345  0DA7                     	;# 
  1346  0DA7                     	;# 
  1347  0DA8                     	;# 
  1348  0DA9                     	;# 
  1349  0DA9                     	;# 
  1350  0DAA                     	;# 
  1351  0DAB                     	;# 
  1352  0DAC                     	;# 
  1353  0DAC                     	;# 
  1354  0DAD                     	;# 
  1355  0DAD                     	;# 
  1356  0DAE                     	;# 
  1357  0DAF                     	;# 
  1358  0DB0                     	;# 
  1359  0DB1                     	;# 
  1360  0DB1                     	;# 
  1361  0DB2                     	;# 
  1362  0DB3                     	;# 
  1363  0DB3                     	;# 
  1364  0DB4                     	;# 
  1365  0DB5                     	;# 
  1366  0DB5                     	;# 
  1367  0DB6                     	;# 
  1368  0DB7                     	;# 
  1369  0DB7                     	;# 
  1370  0DB8                     	;# 
  1371  0DB9                     	;# 
  1372  0DB9                     	;# 
  1373  0DBA                     	;# 
  1374  0DBB                     	;# 
  1375  0DBC                     	;# 
  1376  0DBC                     	;# 
  1377  0DBD                     	;# 
  1378  0DBD                     	;# 
  1379  0DBE                     	;# 
  1380  0DBF                     	;# 
  1381  0DC0                     	;# 
  1382  0DC1                     	;# 
  1383  0DC1                     	;# 
  1384  0DC2                     	;# 
  1385  0DC3                     	;# 
  1386  0DC3                     	;# 
  1387  0DC4                     	;# 
  1388  0DC5                     	;# 
  1389  0DC5                     	;# 
  1390  0DC6                     	;# 
  1391  0DC7                     	;# 
  1392  0DC7                     	;# 
  1393  0DC8                     	;# 
  1394  0DC9                     	;# 
  1395  0DC9                     	;# 
  1396  0DCA                     	;# 
  1397  0DCB                     	;# 
  1398  0DCC                     	;# 
  1399  0DCC                     	;# 
  1400  0DCD                     	;# 
  1401  0DCD                     	;# 
  1402  0DCE                     	;# 
  1403  0DCF                     	;# 
  1404  0DD0                     	;# 
  1405  0E0F                     	;# 
  1406  0E10                     	;# 
  1407  0E11                     	;# 
  1408  0E12                     	;# 
  1409  0E13                     	;# 
  1410  0E14                     	;# 
  1411  0E15                     	;# 
  1412  0E16                     	;# 
  1413  0E17                     	;# 
  1414  0E90                     	;# 
  1415  0E91                     	;# 
  1416  0E92                     	;# 
  1417  0E94                     	;# 
  1418  0E95                     	;# 
  1419  0EA0                     	;# 
  1420  0EA1                     	;# 
  1421  0EA2                     	;# 
  1422  0EA3                     	;# 
  1423  0EA4                     	;# 
  1424  0EA5                     	;# 
  1425  0FE4                     	;# 
  1426  0FE5                     	;# 
  1427  0FE6                     	;# 
  1428  0FE7                     	;# 
  1429  0FE8                     	;# 
  1430  0FE8                     	;# 
  1431  0FE9                     	;# 
  1432  0FEA                     	;# 
  1433  0FEA                     	;# 
  1434  0FEB                     	;# 
  1435  0FED                     	;# 
  1436  0FEE                     	;# 
  1437  0FEE                     	;# 
  1438  0FEF                     	;# 
  1439  0000                     	;# 
  1440  0001                     	;# 
  1441  0002                     	;# 
  1442  0003                     	;# 
  1443  0004                     	;# 
  1444  0005                     	;# 
  1445  0006                     	;# 
  1446  0007                     	;# 
  1447  0008                     	;# 
  1448  0009                     	;# 
  1449  000A                     	;# 
  1450  000B                     	;# 
  1451  000C                     	;# 
  1452  000E                     	;# 
  1453  0011                     	;# 
  1454  0012                     	;# 
  1455  0013                     	;# 
  1456  0015                     	;# 
  1457  0016                     	;# 
  1458  0016                     	;# 
  1459  0017                     	;# 
  1460  0018                     	;# 
  1461  0019                     	;# 
  1462  001A                     	;# 
  1463  001B                     	;# 
  1464  001C                     	;# 
  1465  008C                     	;# 
  1466  008E                     	;# 
  1467  0091                     	;# 
  1468  0092                     	;# 
  1469  0093                     	;# 
  1470  0095                     	;# 
  1471  0096                     	;# 
  1472  0097                     	;# 
  1473  0098                     	;# 
  1474  0099                     	;# 
  1475  009A                     	;# 
  1476  009B                     	;# 
  1477  009B                     	;# 
  1478  009C                     	;# 
  1479  009D                     	;# 
  1480  009E                     	;# 
  1481  009F                     	;# 
  1482  010C                     	;# 
  1483  010E                     	;# 
  1484  0111                     	;# 
  1485  0112                     	;# 
  1486  0113                     	;# 
  1487  0114                     	;# 
  1488  0115                     	;# 
  1489  0116                     	;# 
  1490  0117                     	;# 
  1491  0118                     	;# 
  1492  0119                     	;# 
  1493  018C                     	;# 
  1494  018E                     	;# 
  1495  0191                     	;# 
  1496  0191                     	;# 
  1497  0192                     	;# 
  1498  0193                     	;# 
  1499  0193                     	;# 
  1500  0194                     	;# 
  1501  0195                     	;# 
  1502  0196                     	;# 
  1503  0197                     	;# 
  1504  0199                     	;# 
  1505  019A                     	;# 
  1506  019B                     	;# 
  1507  019B                     	;# 
  1508  019C                     	;# 
  1509  019D                     	;# 
  1510  019E                     	;# 
  1511  019F                     	;# 
  1512  020C                     	;# 
  1513  020E                     	;# 
  1514  028C                     	;# 
  1515  028E                     	;# 
  1516  030C                     	;# 
  1517  030E                     	;# 
  1518  038C                     	;# 
  1519  038E                     	;# 
  1520  0391                     	;# 
  1521  0392                     	;# 
  1522  0393                     	;# 
  1523  0397                     	;# 
  1524  0398                     	;# 
  1525  0399                     	;# 
  1526  0691                     	;# 
  1527  0692                     	;# 
  1528  0693                     	;# 
  1529  0694                     	;# 
  1530  0695                     	;# 
  1531  0D8E                     	;# 
  1532  0D8F                     	;# 
  1533  0D90                     	;# 
  1534  0D91                     	;# 
  1535  0D91                     	;# 
  1536  0D92                     	;# 
  1537  0D93                     	;# 
  1538  0D93                     	;# 
  1539  0D94                     	;# 
  1540  0D95                     	;# 
  1541  0D95                     	;# 
  1542  0D96                     	;# 
  1543  0D97                     	;# 
  1544  0D97                     	;# 
  1545  0D98                     	;# 
  1546  0D99                     	;# 
  1547  0D99                     	;# 
  1548  0D9A                     	;# 
  1549  0D9B                     	;# 
  1550  0D9C                     	;# 
  1551  0D9C                     	;# 
  1552  0D9D                     	;# 
  1553  0D9D                     	;# 
  1554  0D9E                     	;# 
  1555  0D9F                     	;# 
  1556  0DA0                     	;# 
  1557  0DA1                     	;# 
  1558  0DA1                     	;# 
  1559  0DA2                     	;# 
  1560  0DA3                     	;# 
  1561  0DA3                     	;# 
  1562  0DA4                     	;# 
  1563  0DA5                     	;# 
  1564  0DA5                     	;# 
  1565  0DA6                     	;# 
  1566  0DA7                     	;# 
  1567  0DA7                     	;# 
  1568  0DA8                     	;# 
  1569  0DA9                     	;# 
  1570  0DA9                     	;# 
  1571  0DAA                     	;# 
  1572  0DAB                     	;# 
  1573  0DAC                     	;# 
  1574  0DAC                     	;# 
  1575  0DAD                     	;# 
  1576  0DAD                     	;# 
  1577  0DAE                     	;# 
  1578  0DAF                     	;# 
  1579  0DB0                     	;# 
  1580  0DB1                     	;# 
  1581  0DB1                     	;# 
  1582  0DB2                     	;# 
  1583  0DB3                     	;# 
  1584  0DB3                     	;# 
  1585  0DB4                     	;# 
  1586  0DB5                     	;# 
  1587  0DB5                     	;# 
  1588  0DB6                     	;# 
  1589  0DB7                     	;# 
  1590  0DB7                     	;# 
  1591  0DB8                     	;# 
  1592  0DB9                     	;# 
  1593  0DB9                     	;# 
  1594  0DBA                     	;# 
  1595  0DBB                     	;# 
  1596  0DBC                     	;# 
  1597  0DBC                     	;# 
  1598  0DBD                     	;# 
  1599  0DBD                     	;# 
  1600  0DBE                     	;# 
  1601  0DBF                     	;# 
  1602  0DC0                     	;# 
  1603  0DC1                     	;# 
  1604  0DC1                     	;# 
  1605  0DC2                     	;# 
  1606  0DC3                     	;# 
  1607  0DC3                     	;# 
  1608  0DC4                     	;# 
  1609  0DC5                     	;# 
  1610  0DC5                     	;# 
  1611  0DC6                     	;# 
  1612  0DC7                     	;# 
  1613  0DC7                     	;# 
  1614  0DC8                     	;# 
  1615  0DC9                     	;# 
  1616  0DC9                     	;# 
  1617  0DCA                     	;# 
  1618  0DCB                     	;# 
  1619  0DCC                     	;# 
  1620  0DCC                     	;# 
  1621  0DCD                     	;# 
  1622  0DCD                     	;# 
  1623  0DCE                     	;# 
  1624  0DCF                     	;# 
  1625  0DD0                     	;# 
  1626  0E0F                     	;# 
  1627  0E10                     	;# 
  1628  0E11                     	;# 
  1629  0E12                     	;# 
  1630  0E13                     	;# 
  1631  0E14                     	;# 
  1632  0E15                     	;# 
  1633  0E16                     	;# 
  1634  0E17                     	;# 
  1635  0E90                     	;# 
  1636  0E91                     	;# 
  1637  0E92                     	;# 
  1638  0E94                     	;# 
  1639  0E95                     	;# 
  1640  0EA0                     	;# 
  1641  0EA1                     	;# 
  1642  0EA2                     	;# 
  1643  0EA3                     	;# 
  1644  0EA4                     	;# 
  1645  0EA5                     	;# 
  1646  0FE4                     	;# 
  1647  0FE5                     	;# 
  1648  0FE6                     	;# 
  1649  0FE7                     	;# 
  1650  0FE8                     	;# 
  1651  0FE8                     	;# 
  1652  0FE9                     	;# 
  1653  0FEA                     	;# 
  1654  0FEA                     	;# 
  1655  0FEB                     	;# 
  1656  0FED                     	;# 
  1657  0FEE                     	;# 
  1658  0FEE                     	;# 
  1659  0FEF                     	;# 
  1660  0000                     	;# 
  1661  0001                     	;# 
  1662  0002                     	;# 
  1663  0003                     	;# 
  1664  0004                     	;# 
  1665  0005                     	;# 
  1666  0006                     	;# 
  1667  0007                     	;# 
  1668  0008                     	;# 
  1669  0009                     	;# 
  1670  000A                     	;# 
  1671  000B                     	;# 
  1672  000C                     	;# 
  1673  000E                     	;# 
  1674  0011                     	;# 
  1675  0012                     	;# 
  1676  0013                     	;# 
  1677  0015                     	;# 
  1678  0016                     	;# 
  1679  0016                     	;# 
  1680  0017                     	;# 
  1681  0018                     	;# 
  1682  0019                     	;# 
  1683  001A                     	;# 
  1684  001B                     	;# 
  1685  001C                     	;# 
  1686  008C                     	;# 
  1687  008E                     	;# 
  1688  0091                     	;# 
  1689  0092                     	;# 
  1690  0093                     	;# 
  1691  0095                     	;# 
  1692  0096                     	;# 
  1693  0097                     	;# 
  1694  0098                     	;# 
  1695  0099                     	;# 
  1696  009A                     	;# 
  1697  009B                     	;# 
  1698  009B                     	;# 
  1699  009C                     	;# 
  1700  009D                     	;# 
  1701  009E                     	;# 
  1702  009F                     	;# 
  1703  010C                     	;# 
  1704  010E                     	;# 
  1705  0111                     	;# 
  1706  0112                     	;# 
  1707  0113                     	;# 
  1708  0114                     	;# 
  1709  0115                     	;# 
  1710  0116                     	;# 
  1711  0117                     	;# 
  1712  0118                     	;# 
  1713  0119                     	;# 
  1714  018C                     	;# 
  1715  018E                     	;# 
  1716  0191                     	;# 
  1717  0191                     	;# 
  1718  0192                     	;# 
  1719  0193                     	;# 
  1720  0193                     	;# 
  1721  0194                     	;# 
  1722  0195                     	;# 
  1723  0196                     	;# 
  1724  0197                     	;# 
  1725  0199                     	;# 
  1726  019A                     	;# 
  1727  019B                     	;# 
  1728  019B                     	;# 
  1729  019C                     	;# 
  1730  019D                     	;# 
  1731  019E                     	;# 
  1732  019F                     	;# 
  1733  020C                     	;# 
  1734  020E                     	;# 
  1735  028C                     	;# 
  1736  028E                     	;# 
  1737  030C                     	;# 
  1738  030E                     	;# 
  1739  038C                     	;# 
  1740  038E                     	;# 
  1741  0391                     	;# 
  1742  0392                     	;# 
  1743  0393                     	;# 
  1744  0397                     	;# 
  1745  0398                     	;# 
  1746  0399                     	;# 
  1747  0691                     	;# 
  1748  0692                     	;# 
  1749  0693                     	;# 
  1750  0694                     	;# 
  1751  0695                     	;# 
  1752  0D8E                     	;# 
  1753  0D8F                     	;# 
  1754  0D90                     	;# 
  1755  0D91                     	;# 
  1756  0D91                     	;# 
  1757  0D92                     	;# 
  1758  0D93                     	;# 
  1759  0D93                     	;# 
  1760  0D94                     	;# 
  1761  0D95                     	;# 
  1762  0D95                     	;# 
  1763  0D96                     	;# 
  1764  0D97                     	;# 
  1765  0D97                     	;# 
  1766  0D98                     	;# 
  1767  0D99                     	;# 
  1768  0D99                     	;# 
  1769  0D9A                     	;# 
  1770  0D9B                     	;# 
  1771  0D9C                     	;# 
  1772  0D9C                     	;# 
  1773  0D9D                     	;# 
  1774  0D9D                     	;# 
  1775  0D9E                     	;# 
  1776  0D9F                     	;# 
  1777  0DA0                     	;# 
  1778  0DA1                     	;# 
  1779  0DA1                     	;# 
  1780  0DA2                     	;# 
  1781  0DA3                     	;# 
  1782  0DA3                     	;# 
  1783  0DA4                     	;# 
  1784  0DA5                     	;# 
  1785  0DA5                     	;# 
  1786  0DA6                     	;# 
  1787  0DA7                     	;# 
  1788  0DA7                     	;# 
  1789  0DA8                     	;# 
  1790  0DA9                     	;# 
  1791  0DA9                     	;# 
  1792  0DAA                     	;# 
  1793  0DAB                     	;# 
  1794  0DAC                     	;# 
  1795  0DAC                     	;# 
  1796  0DAD                     	;# 
  1797  0DAD                     	;# 
  1798  0DAE                     	;# 
  1799  0DAF                     	;# 
  1800  0DB0                     	;# 
  1801  0DB1                     	;# 
  1802  0DB1                     	;# 
  1803  0DB2                     	;# 
  1804  0DB3                     	;# 
  1805  0DB3                     	;# 
  1806  0DB4                     	;# 
  1807  0DB5                     	;# 
  1808  0DB5                     	;# 
  1809  0DB6                     	;# 
  1810  0DB7                     	;# 
  1811  0DB7                     	;# 
  1812  0DB8                     	;# 
  1813  0DB9                     	;# 
  1814  0DB9                     	;# 
  1815  0DBA                     	;# 
  1816  0DBB                     	;# 
  1817  0DBC                     	;# 
  1818  0DBC                     	;# 
  1819  0DBD                     	;# 
  1820  0DBD                     	;# 
  1821  0DBE                     	;# 
  1822  0DBF                     	;# 
  1823  0DC0                     	;# 
  1824  0DC1                     	;# 
  1825  0DC1                     	;# 
  1826  0DC2                     	;# 
  1827  0DC3                     	;# 
  1828  0DC3                     	;# 
  1829  0DC4                     	;# 
  1830  0DC5                     	;# 
  1831  0DC5                     	;# 
  1832  0DC6                     	;# 
  1833  0DC7                     	;# 
  1834  0DC7                     	;# 
  1835  0DC8                     	;# 
  1836  0DC9                     	;# 
  1837  0DC9                     	;# 
  1838  0DCA                     	;# 
  1839  0DCB                     	;# 
  1840  0DCC                     	;# 
  1841  0DCC                     	;# 
  1842  0DCD                     	;# 
  1843  0DCD                     	;# 
  1844  0DCE                     	;# 
  1845  0DCF                     	;# 
  1846  0DD0                     	;# 
  1847  0E0F                     	;# 
  1848  0E10                     	;# 
  1849  0E11                     	;# 
  1850  0E12                     	;# 
  1851  0E13                     	;# 
  1852  0E14                     	;# 
  1853  0E15                     	;# 
  1854  0E16                     	;# 
  1855  0E17                     	;# 
  1856  0E90                     	;# 
  1857  0E91                     	;# 
  1858  0E92                     	;# 
  1859  0E94                     	;# 
  1860  0E95                     	;# 
  1861  0EA0                     	;# 
  1862  0EA1                     	;# 
  1863  0EA2                     	;# 
  1864  0EA3                     	;# 
  1865  0EA4                     	;# 
  1866  0EA5                     	;# 
  1867  0FE4                     	;# 
  1868  0FE5                     	;# 
  1869  0FE6                     	;# 
  1870  0FE7                     	;# 
  1871  0FE8                     	;# 
  1872  0FE8                     	;# 
  1873  0FE9                     	;# 
  1874  0FEA                     	;# 
  1875  0FEA                     	;# 
  1876  0FEB                     	;# 
  1877  0FED                     	;# 
  1878  0FEE                     	;# 
  1879  0FEE                     	;# 
  1880  0FEF                     	;# 
  1881  0000                     	;# 
  1882  0001                     	;# 
  1883  0002                     	;# 
  1884  0003                     	;# 
  1885  0004                     	;# 
  1886  0005                     	;# 
  1887  0006                     	;# 
  1888  0007                     	;# 
  1889  0008                     	;# 
  1890  0009                     	;# 
  1891  000A                     	;# 
  1892  000B                     	;# 
  1893  000C                     	;# 
  1894  000E                     	;# 
  1895  0011                     	;# 
  1896  0012                     	;# 
  1897  0013                     	;# 
  1898  0015                     	;# 
  1899  0016                     	;# 
  1900  0016                     	;# 
  1901  0017                     	;# 
  1902  0018                     	;# 
  1903  0019                     	;# 
  1904  001A                     	;# 
  1905  001B                     	;# 
  1906  001C                     	;# 
  1907  008C                     	;# 
  1908  008E                     	;# 
  1909  0091                     	;# 
  1910  0092                     	;# 
  1911  0093                     	;# 
  1912  0095                     	;# 
  1913  0096                     	;# 
  1914  0097                     	;# 
  1915  0098                     	;# 
  1916  0099                     	;# 
  1917  009A                     	;# 
  1918  009B                     	;# 
  1919  009B                     	;# 
  1920  009C                     	;# 
  1921  009D                     	;# 
  1922  009E                     	;# 
  1923  009F                     	;# 
  1924  010C                     	;# 
  1925  010E                     	;# 
  1926  0111                     	;# 
  1927  0112                     	;# 
  1928  0113                     	;# 
  1929  0114                     	;# 
  1930  0115                     	;# 
  1931  0116                     	;# 
  1932  0117                     	;# 
  1933  0118                     	;# 
  1934  0119                     	;# 
  1935  018C                     	;# 
  1936  018E                     	;# 
  1937  0191                     	;# 
  1938  0191                     	;# 
  1939  0192                     	;# 
  1940  0193                     	;# 
  1941  0193                     	;# 
  1942  0194                     	;# 
  1943  0195                     	;# 
  1944  0196                     	;# 
  1945  0197                     	;# 
  1946  0199                     	;# 
  1947  019A                     	;# 
  1948  019B                     	;# 
  1949  019B                     	;# 
  1950  019C                     	;# 
  1951  019D                     	;# 
  1952  019E                     	;# 
  1953  019F                     	;# 
  1954  020C                     	;# 
  1955  020E                     	;# 
  1956  028C                     	;# 
  1957  028E                     	;# 
  1958  030C                     	;# 
  1959  030E                     	;# 
  1960  038C                     	;# 
  1961  038E                     	;# 
  1962  0391                     	;# 
  1963  0392                     	;# 
  1964  0393                     	;# 
  1965  0397                     	;# 
  1966  0398                     	;# 
  1967  0399                     	;# 
  1968  0691                     	;# 
  1969  0692                     	;# 
  1970  0693                     	;# 
  1971  0694                     	;# 
  1972  0695                     	;# 
  1973  0D8E                     	;# 
  1974  0D8F                     	;# 
  1975  0D90                     	;# 
  1976  0D91                     	;# 
  1977  0D91                     	;# 
  1978  0D92                     	;# 
  1979  0D93                     	;# 
  1980  0D93                     	;# 
  1981  0D94                     	;# 
  1982  0D95                     	;# 
  1983  0D95                     	;# 
  1984  0D96                     	;# 
  1985  0D97                     	;# 
  1986  0D97                     	;# 
  1987  0D98                     	;# 
  1988  0D99                     	;# 
  1989  0D99                     	;# 
  1990  0D9A                     	;# 
  1991  0D9B                     	;# 
  1992  0D9C                     	;# 
  1993  0D9C                     	;# 
  1994  0D9D                     	;# 
  1995  0D9D                     	;# 
  1996  0D9E                     	;# 
  1997  0D9F                     	;# 
  1998  0DA0                     	;# 
  1999  0DA1                     	;# 
  2000  0DA1                     	;# 
  2001  0DA2                     	;# 
  2002  0DA3                     	;# 
  2003  0DA3                     	;# 
  2004  0DA4                     	;# 
  2005  0DA5                     	;# 
  2006  0DA5                     	;# 
  2007  0DA6                     	;# 
  2008  0DA7                     	;# 
  2009  0DA7                     	;# 
  2010  0DA8                     	;# 
  2011  0DA9                     	;# 
  2012  0DA9                     	;# 
  2013  0DAA                     	;# 
  2014  0DAB                     	;# 
  2015  0DAC                     	;# 
  2016  0DAC                     	;# 
  2017  0DAD                     	;# 
  2018  0DAD                     	;# 
  2019  0DAE                     	;# 
  2020  0DAF                     	;# 
  2021  0DB0                     	;# 
  2022  0DB1                     	;# 
  2023  0DB1                     	;# 
  2024  0DB2                     	;# 
  2025  0DB3                     	;# 
  2026  0DB3                     	;# 
  2027  0DB4                     	;# 
  2028  0DB5                     	;# 
  2029  0DB5                     	;# 
  2030  0DB6                     	;# 
  2031  0DB7                     	;# 
  2032  0DB7                     	;# 
  2033  0DB8                     	;# 
  2034  0DB9                     	;# 
  2035  0DB9                     	;# 
  2036  0DBA                     	;# 
  2037  0DBB                     	;# 
  2038  0DBC                     	;# 
  2039  0DBC                     	;# 
  2040  0DBD                     	;# 
  2041  0DBD                     	;# 
  2042  0DBE                     	;# 
  2043  0DBF                     	;# 
  2044  0DC0                     	;# 
  2045  0DC1                     	;# 
  2046  0DC1                     	;# 
  2047  0DC2                     	;# 
  2048  0DC3                     	;# 
  2049  0DC3                     	;# 
  2050  0DC4                     	;# 
  2051  0DC5                     	;# 
  2052  0DC5                     	;# 
  2053  0DC6                     	;# 
  2054  0DC7                     	;# 
  2055  0DC7                     	;# 
  2056  0DC8                     	;# 
  2057  0DC9                     	;# 
  2058  0DC9                     	;# 
  2059  0DCA                     	;# 
  2060  0DCB                     	;# 
  2061  0DCC                     	;# 
  2062  0DCC                     	;# 
  2063  0DCD                     	;# 
  2064  0DCD                     	;# 
  2065  0DCE                     	;# 
  2066  0DCF                     	;# 
  2067  0DD0                     	;# 
  2068  0E0F                     	;# 
  2069  0E10                     	;# 
  2070  0E11                     	;# 
  2071  0E12                     	;# 
  2072  0E13                     	;# 
  2073  0E14                     	;# 
  2074  0E15                     	;# 
  2075  0E16                     	;# 
  2076  0E17                     	;# 
  2077  0E90                     	;# 
  2078  0E91                     	;# 
  2079  0E92                     	;# 
  2080  0E94                     	;# 
  2081  0E95                     	;# 
  2082  0EA0                     	;# 
  2083  0EA1                     	;# 
  2084  0EA2                     	;# 
  2085  0EA3                     	;# 
  2086  0EA4                     	;# 
  2087  0EA5                     	;# 
  2088  0FE4                     	;# 
  2089  0FE5                     	;# 
  2090  0FE6                     	;# 
  2091  0FE7                     	;# 
  2092  0FE8                     	;# 
  2093  0FE8                     	;# 
  2094  0FE9                     	;# 
  2095  0FEA                     	;# 
  2096  0FEA                     	;# 
  2097  0FEB                     	;# 
  2098  0FED                     	;# 
  2099  0FEE                     	;# 
  2100  0FEE                     	;# 
  2101  0FEF                     	;# 
  2102  0000                     	;# 
  2103  0001                     	;# 
  2104  0002                     	;# 
  2105  0003                     	;# 
  2106  0004                     	;# 
  2107  0005                     	;# 
  2108  0006                     	;# 
  2109  0007                     	;# 
  2110  0008                     	;# 
  2111  0009                     	;# 
  2112  000A                     	;# 
  2113  000B                     	;# 
  2114  000C                     	;# 
  2115  000E                     	;# 
  2116  0011                     	;# 
  2117  0012                     	;# 
  2118  0013                     	;# 
  2119  0015                     	;# 
  2120  0016                     	;# 
  2121  0016                     	;# 
  2122  0017                     	;# 
  2123  0018                     	;# 
  2124  0019                     	;# 
  2125  001A                     	;# 
  2126  001B                     	;# 
  2127  001C                     	;# 
  2128  008C                     	;# 
  2129  008E                     	;# 
  2130  0091                     	;# 
  2131  0092                     	;# 
  2132  0093                     	;# 
  2133  0095                     	;# 
  2134  0096                     	;# 
  2135  0097                     	;# 
  2136  0098                     	;# 
  2137  0099                     	;# 
  2138  009A                     	;# 
  2139  009B                     	;# 
  2140  009B                     	;# 
  2141  009C                     	;# 
  2142  009D                     	;# 
  2143  009E                     	;# 
  2144  009F                     	;# 
  2145  010C                     	;# 
  2146  010E                     	;# 
  2147  0111                     	;# 
  2148  0112                     	;# 
  2149  0113                     	;# 
  2150  0114                     	;# 
  2151  0115                     	;# 
  2152  0116                     	;# 
  2153  0117                     	;# 
  2154  0118                     	;# 
  2155  0119                     	;# 
  2156  018C                     	;# 
  2157  018E                     	;# 
  2158  0191                     	;# 
  2159  0191                     	;# 
  2160  0192                     	;# 
  2161  0193                     	;# 
  2162  0193                     	;# 
  2163  0194                     	;# 
  2164  0195                     	;# 
  2165  0196                     	;# 
  2166  0197                     	;# 
  2167  0199                     	;# 
  2168  019A                     	;# 
  2169  019B                     	;# 
  2170  019B                     	;# 
  2171  019C                     	;# 
  2172  019D                     	;# 
  2173  019E                     	;# 
  2174  019F                     	;# 
  2175  020C                     	;# 
  2176  020E                     	;# 
  2177  028C                     	;# 
  2178  028E                     	;# 
  2179  030C                     	;# 
  2180  030E                     	;# 
  2181  038C                     	;# 
  2182  038E                     	;# 
  2183  0391                     	;# 
  2184  0392                     	;# 
  2185  0393                     	;# 
  2186  0397                     	;# 
  2187  0398                     	;# 
  2188  0399                     	;# 
  2189  0691                     	;# 
  2190  0692                     	;# 
  2191  0693                     	;# 
  2192  0694                     	;# 
  2193  0695                     	;# 
  2194  0D8E                     	;# 
  2195  0D8F                     	;# 
  2196  0D90                     	;# 
  2197  0D91                     	;# 
  2198  0D91                     	;# 
  2199  0D92                     	;# 
  2200  0D93                     	;# 
  2201  0D93                     	;# 
  2202  0D94                     	;# 
  2203  0D95                     	;# 
  2204  0D95                     	;# 
  2205  0D96                     	;# 
  2206  0D97                     	;# 
  2207  0D97                     	;# 
  2208  0D98                     	;# 
  2209  0D99                     	;# 
  2210  0D99                     	;# 
  2211  0D9A                     	;# 
  2212  0D9B                     	;# 
  2213  0D9C                     	;# 
  2214  0D9C                     	;# 
  2215  0D9D                     	;# 
  2216  0D9D                     	;# 
  2217  0D9E                     	;# 
  2218  0D9F                     	;# 
  2219  0DA0                     	;# 
  2220  0DA1                     	;# 
  2221  0DA1                     	;# 
  2222  0DA2                     	;# 
  2223  0DA3                     	;# 
  2224  0DA3                     	;# 
  2225  0DA4                     	;# 
  2226  0DA5                     	;# 
  2227  0DA5                     	;# 
  2228  0DA6                     	;# 
  2229  0DA7                     	;# 
  2230  0DA7                     	;# 
  2231  0DA8                     	;# 
  2232  0DA9                     	;# 
  2233  0DA9                     	;# 
  2234  0DAA                     	;# 
  2235  0DAB                     	;# 
  2236  0DAC                     	;# 
  2237  0DAC                     	;# 
  2238  0DAD                     	;# 
  2239  0DAD                     	;# 
  2240  0DAE                     	;# 
  2241  0DAF                     	;# 
  2242  0DB0                     	;# 
  2243  0DB1                     	;# 
  2244  0DB1                     	;# 
  2245  0DB2                     	;# 
  2246  0DB3                     	;# 
  2247  0DB3                     	;# 
  2248  0DB4                     	;# 
  2249  0DB5                     	;# 
  2250  0DB5                     	;# 
  2251  0DB6                     	;# 
  2252  0DB7                     	;# 
  2253  0DB7                     	;# 
  2254  0DB8                     	;# 
  2255  0DB9                     	;# 
  2256  0DB9                     	;# 
  2257  0DBA                     	;# 
  2258  0DBB                     	;# 
  2259  0DBC                     	;# 
  2260  0DBC                     	;# 
  2261  0DBD                     	;# 
  2262  0DBD                     	;# 
  2263  0DBE                     	;# 
  2264  0DBF                     	;# 
  2265  0DC0                     	;# 
  2266  0DC1                     	;# 
  2267  0DC1                     	;# 
  2268  0DC2                     	;# 
  2269  0DC3                     	;# 
  2270  0DC3                     	;# 
  2271  0DC4                     	;# 
  2272  0DC5                     	;# 
  2273  0DC5                     	;# 
  2274  0DC6                     	;# 
  2275  0DC7                     	;# 
  2276  0DC7                     	;# 
  2277  0DC8                     	;# 
  2278  0DC9                     	;# 
  2279  0DC9                     	;# 
  2280  0DCA                     	;# 
  2281  0DCB                     	;# 
  2282  0DCC                     	;# 
  2283  0DCC                     	;# 
  2284  0DCD                     	;# 
  2285  0DCD                     	;# 
  2286  0DCE                     	;# 
  2287  0DCF                     	;# 
  2288  0DD0                     	;# 
  2289  0E0F                     	;# 
  2290  0E10                     	;# 
  2291  0E11                     	;# 
  2292  0E12                     	;# 
  2293  0E13                     	;# 
  2294  0E14                     	;# 
  2295  0E15                     	;# 
  2296  0E16                     	;# 
  2297  0E17                     	;# 
  2298  0E90                     	;# 
  2299  0E91                     	;# 
  2300  0E92                     	;# 
  2301  0E94                     	;# 
  2302  0E95                     	;# 
  2303  0EA0                     	;# 
  2304  0EA1                     	;# 
  2305  0EA2                     	;# 
  2306  0EA3                     	;# 
  2307  0EA4                     	;# 
  2308  0EA5                     	;# 
  2309  0FE4                     	;# 
  2310  0FE5                     	;# 
  2311  0FE6                     	;# 
  2312  0FE7                     	;# 
  2313  0FE8                     	;# 
  2314  0FE8                     	;# 
  2315  0FE9                     	;# 
  2316  0FEA                     	;# 
  2317  0FEA                     	;# 
  2318  0FEB                     	;# 
  2319  0FED                     	;# 
  2320  0FEE                     	;# 
  2321  0FEE                     	;# 
  2322  0FEF                     	;# 
  2323  0000                     	;# 
  2324  0001                     	;# 
  2325  0002                     	;# 
  2326  0003                     	;# 
  2327  0004                     	;# 
  2328  0005                     	;# 
  2329  0006                     	;# 
  2330  0007                     	;# 
  2331  0008                     	;# 
  2332  0009                     	;# 
  2333  000A                     	;# 
  2334  000B                     	;# 
  2335  000C                     	;# 
  2336  000E                     	;# 
  2337  0011                     	;# 
  2338  0012                     	;# 
  2339  0013                     	;# 
  2340  0015                     	;# 
  2341  0016                     	;# 
  2342  0016                     	;# 
  2343  0017                     	;# 
  2344  0018                     	;# 
  2345  0019                     	;# 
  2346  001A                     	;# 
  2347  001B                     	;# 
  2348  001C                     	;# 
  2349  008C                     	;# 
  2350  008E                     	;# 
  2351  0091                     	;# 
  2352  0092                     	;# 
  2353  0093                     	;# 
  2354  0095                     	;# 
  2355  0096                     	;# 
  2356  0097                     	;# 
  2357  0098                     	;# 
  2358  0099                     	;# 
  2359  009A                     	;# 
  2360  009B                     	;# 
  2361  009B                     	;# 
  2362  009C                     	;# 
  2363  009D                     	;# 
  2364  009E                     	;# 
  2365  009F                     	;# 
  2366  010C                     	;# 
  2367  010E                     	;# 
  2368  0111                     	;# 
  2369  0112                     	;# 
  2370  0113                     	;# 
  2371  0114                     	;# 
  2372  0115                     	;# 
  2373  0116                     	;# 
  2374  0117                     	;# 
  2375  0118                     	;# 
  2376  0119                     	;# 
  2377  018C                     	;# 
  2378  018E                     	;# 
  2379  0191                     	;# 
  2380  0191                     	;# 
  2381  0192                     	;# 
  2382  0193                     	;# 
  2383  0193                     	;# 
  2384  0194                     	;# 
  2385  0195                     	;# 
  2386  0196                     	;# 
  2387  0197                     	;# 
  2388  0199                     	;# 
  2389  019A                     	;# 
  2390  019B                     	;# 
  2391  019B                     	;# 
  2392  019C                     	;# 
  2393  019D                     	;# 
  2394  019E                     	;# 
  2395  019F                     	;# 
  2396  020C                     	;# 
  2397  020E                     	;# 
  2398  028C                     	;# 
  2399  028E                     	;# 
  2400  030C                     	;# 
  2401  030E                     	;# 
  2402  038C                     	;# 
  2403  038E                     	;# 
  2404  0391                     	;# 
  2405  0392                     	;# 
  2406  0393                     	;# 
  2407  0397                     	;# 
  2408  0398                     	;# 
  2409  0399                     	;# 
  2410  0691                     	;# 
  2411  0692                     	;# 
  2412  0693                     	;# 
  2413  0694                     	;# 
  2414  0695                     	;# 
  2415  0D8E                     	;# 
  2416  0D8F                     	;# 
  2417  0D90                     	;# 
  2418  0D91                     	;# 
  2419  0D91                     	;# 
  2420  0D92                     	;# 
  2421  0D93                     	;# 
  2422  0D93                     	;# 
  2423  0D94                     	;# 
  2424  0D95                     	;# 
  2425  0D95                     	;# 
  2426  0D96                     	;# 
  2427  0D97                     	;# 
  2428  0D97                     	;# 
  2429  0D98                     	;# 
  2430  0D99                     	;# 
  2431  0D99                     	;# 
  2432  0D9A                     	;# 
  2433  0D9B                     	;# 
  2434  0D9C                     	;# 
  2435  0D9C                     	;# 
  2436  0D9D                     	;# 
  2437  0D9D                     	;# 
  2438  0D9E                     	;# 
  2439  0D9F                     	;# 
  2440  0DA0                     	;# 
  2441  0DA1                     	;# 
  2442  0DA1                     	;# 
  2443  0DA2                     	;# 
  2444  0DA3                     	;# 
  2445  0DA3                     	;# 
  2446  0DA4                     	;# 
  2447  0DA5                     	;# 
  2448  0DA5                     	;# 
  2449  0DA6                     	;# 
  2450  0DA7                     	;# 
  2451  0DA7                     	;# 
  2452  0DA8                     	;# 
  2453  0DA9                     	;# 
  2454  0DA9                     	;# 
  2455  0DAA                     	;# 
  2456  0DAB                     	;# 
  2457  0DAC                     	;# 
  2458  0DAC                     	;# 
  2459  0DAD                     	;# 
  2460  0DAD                     	;# 
  2461  0DAE                     	;# 
  2462  0DAF                     	;# 
  2463  0DB0                     	;# 
  2464  0DB1                     	;# 
  2465  0DB1                     	;# 
  2466  0DB2                     	;# 
  2467  0DB3                     	;# 
  2468  0DB3                     	;# 
  2469  0DB4                     	;# 
  2470  0DB5                     	;# 
  2471  0DB5                     	;# 
  2472  0DB6                     	;# 
  2473  0DB7                     	;# 
  2474  0DB7                     	;# 
  2475  0DB8                     	;# 
  2476  0DB9                     	;# 
  2477  0DB9                     	;# 
  2478  0DBA                     	;# 
  2479  0DBB                     	;# 
  2480  0DBC                     	;# 
  2481  0DBC                     	;# 
  2482  0DBD                     	;# 
  2483  0DBD                     	;# 
  2484  0DBE                     	;# 
  2485  0DBF                     	;# 
  2486  0DC0                     	;# 
  2487  0DC1                     	;# 
  2488  0DC1                     	;# 
  2489  0DC2                     	;# 
  2490  0DC3                     	;# 
  2491  0DC3                     	;# 
  2492  0DC4                     	;# 
  2493  0DC5                     	;# 
  2494  0DC5                     	;# 
  2495  0DC6                     	;# 
  2496  0DC7                     	;# 
  2497  0DC7                     	;# 
  2498  0DC8                     	;# 
  2499  0DC9                     	;# 
  2500  0DC9                     	;# 
  2501  0DCA                     	;# 
  2502  0DCB                     	;# 
  2503  0DCC                     	;# 
  2504  0DCC                     	;# 
  2505  0DCD                     	;# 
  2506  0DCD                     	;# 
  2507  0DCE                     	;# 
  2508  0DCF                     	;# 
  2509  0DD0                     	;# 
  2510  0E0F                     	;# 
  2511  0E10                     	;# 
  2512  0E11                     	;# 
  2513  0E12                     	;# 
  2514  0E13                     	;# 
  2515  0E14                     	;# 
  2516  0E15                     	;# 
  2517  0E16                     	;# 
  2518  0E17                     	;# 
  2519  0E90                     	;# 
  2520  0E91                     	;# 
  2521  0E92                     	;# 
  2522  0E94                     	;# 
  2523  0E95                     	;# 
  2524  0EA0                     	;# 
  2525  0EA1                     	;# 
  2526  0EA2                     	;# 
  2527  0EA3                     	;# 
  2528  0EA4                     	;# 
  2529  0EA5                     	;# 
  2530  0FE4                     	;# 
  2531  0FE5                     	;# 
  2532  0FE6                     	;# 
  2533  0FE7                     	;# 
  2534  0FE8                     	;# 
  2535  0FE8                     	;# 
  2536  0FE9                     	;# 
  2537  0FEA                     	;# 
  2538  0FEA                     	;# 
  2539  0FEB                     	;# 
  2540  0FED                     	;# 
  2541  0FEE                     	;# 
  2542  0FEE                     	;# 
  2543  0FEF                     	;# 
  2544  0FFF                     	;# 
  2545  0000                     	;# 
  2546  0001                     	;# 
  2547  0002                     	;# 
  2548  0003                     	;# 
  2549  0004                     	;# 
  2550  0005                     	;# 
  2551  0006                     	;# 
  2552  0007                     	;# 
  2553  0008                     	;# 
  2554  0009                     	;# 
  2555  000A                     	;# 
  2556  000B                     	;# 
  2557  000C                     	;# 
  2558  000E                     	;# 
  2559  0011                     	;# 
  2560  0012                     	;# 
  2561  0013                     	;# 
  2562  0015                     	;# 
  2563  0016                     	;# 
  2564  0016                     	;# 
  2565  0017                     	;# 
  2566  0018                     	;# 
  2567  0019                     	;# 
  2568  001A                     	;# 
  2569  001B                     	;# 
  2570  001C                     	;# 
  2571  008C                     	;# 
  2572  008E                     	;# 
  2573  0091                     	;# 
  2574  0092                     	;# 
  2575  0093                     	;# 
  2576  0095                     	;# 
  2577  0096                     	;# 
  2578  0097                     	;# 
  2579  0098                     	;# 
  2580  0099                     	;# 
  2581  009A                     	;# 
  2582  009B                     	;# 
  2583  009B                     	;# 
  2584  009C                     	;# 
  2585  009D                     	;# 
  2586  009E                     	;# 
  2587  009F                     	;# 
  2588  010C                     	;# 
  2589  010E                     	;# 
  2590  0111                     	;# 
  2591  0112                     	;# 
  2592  0113                     	;# 
  2593  0114                     	;# 
  2594  0115                     	;# 
  2595  0116                     	;# 
  2596  0117                     	;# 
  2597  0118                     	;# 
  2598  0119                     	;# 
  2599  018C                     	;# 
  2600  018E                     	;# 
  2601  0191                     	;# 
  2602  0191                     	;# 
  2603  0192                     	;# 
  2604  0193                     	;# 
  2605  0193                     	;# 
  2606  0194                     	;# 
  2607  0195                     	;# 
  2608  0196                     	;# 
  2609  0197                     	;# 
  2610  0199                     	;# 
  2611  019A                     	;# 
  2612  019B                     	;# 
  2613  019B                     	;# 
  2614  019C                     	;# 
  2615  019D                     	;# 
  2616  019E                     	;# 
  2617  019F                     	;# 
  2618  020C                     	;# 
  2619  020E                     	;# 
  2620  028C                     	;# 
  2621  028E                     	;# 
  2622  030C                     	;# 
  2623  030E                     	;# 
  2624  038C                     	;# 
  2625  038E                     	;# 
  2626  0391                     	;# 
  2627  0392                     	;# 
  2628  0393                     	;# 
  2629  0397                     	;# 
  2630  0398                     	;# 
  2631  0399                     	;# 
  2632  0691                     	;# 
  2633  0692                     	;# 
  2634  0693                     	;# 
  2635  0694                     	;# 
  2636  0695                     	;# 
  2637  0D8E                     	;# 
  2638  0D8F                     	;# 
  2639  0D90                     	;# 
  2640  0D91                     	;# 
  2641  0D91                     	;# 
  2642  0D92                     	;# 
  2643  0D93                     	;# 
  2644  0D93                     	;# 
  2645  0D94                     	;# 
  2646  0D95                     	;# 
  2647  0D95                     	;# 
  2648  0D96                     	;# 
  2649  0D97                     	;# 
  2650  0D97                     	;# 
  2651  0D98                     	;# 
  2652  0D99                     	;# 
  2653  0D99                     	;# 
  2654  0D9A                     	;# 
  2655  0D9B                     	;# 
  2656  0D9C                     	;# 
  2657  0D9C                     	;# 
  2658  0D9D                     	;# 
  2659  0D9D                     	;# 
  2660  0D9E                     	;# 
  2661  0D9F                     	;# 
  2662  0DA0                     	;# 
  2663  0DA1                     	;# 
  2664  0DA1                     	;# 
  2665  0DA2                     	;# 
  2666  0DA3                     	;# 
  2667  0DA3                     	;# 
  2668  0DA4                     	;# 
  2669  0DA5                     	;# 
  2670  0DA5                     	;# 
  2671  0DA6                     	;# 
  2672  0DA7                     	;# 
  2673  0DA7                     	;# 
  2674  0DA8                     	;# 
  2675  0DA9                     	;# 
  2676  0DA9                     	;# 
  2677  0DAA                     	;# 
  2678  0DAB                     	;# 
  2679  0DAC                     	;# 
  2680  0DAC                     	;# 
  2681  0DAD                     	;# 
  2682  0DAD                     	;# 
  2683  0DAE                     	;# 
  2684  0DAF                     	;# 
  2685  0DB0                     	;# 
  2686  0DB1                     	;# 
  2687  0DB1                     	;# 
  2688  0DB2                     	;# 
  2689  0DB3                     	;# 
  2690  0DB3                     	;# 
  2691  0DB4                     	;# 
  2692  0DB5                     	;# 
  2693  0DB5                     	;# 
  2694  0DB6                     	;# 
  2695  0DB7                     	;# 
  2696  0DB7                     	;# 
  2697  0DB8                     	;# 
  2698  0DB9                     	;# 
  2699  0DB9                     	;# 
  2700  0DBA                     	;# 
  2701  0DBB                     	;# 
  2702  0DBC                     	;# 
  2703  0DBC                     	;# 
  2704  0DBD                     	;# 
  2705  0DBD                     	;# 
  2706  0DBE                     	;# 
  2707  0DBF                     	;# 
  2708  0DC0                     	;# 
  2709  0DC1                     	;# 
  2710  0DC1                     	;# 
  2711  0DC2                     	;# 
  2712  0DC3                     	;# 
  2713  0DC3                     	;# 
  2714  0DC4                     	;# 
  2715  0DC5                     	;# 
  2716  0DC5                     	;# 
  2717  0DC6                     	;# 
  2718  0DC7                     	;# 
  2719  0DC7                     	;# 
  2720  0DC8                     	;# 
  2721  0DC9                     	;# 
  2722  0DC9                     	;# 
  2723  0DCA                     	;# 
  2724  0DCB                     	;# 
  2725  0DCC                     	;# 
  2726  0DCC                     	;# 
  2727  0DCD                     	;# 
  2728  0DCD                     	;# 
  2729  0DCE                     	;# 
  2730  0DCF                     	;# 
  2731  0DD0                     	;# 
  2732  0E0F                     	;# 
  2733  0E10                     	;# 
  2734  0E11                     	;# 
  2735  0E12                     	;# 
  2736  0E13                     	;# 
  2737  0E14                     	;# 
  2738  0E15                     	;# 
  2739  0E16                     	;# 
  2740  0E17                     	;# 
  2741  0E90                     	;# 
  2742  0E91                     	;# 
  2743  0E92                     	;# 
  2744  0E94                     	;# 
  2745  0E95                     	;# 
  2746  0EA0                     	;# 
  2747  0EA1                     	;# 
  2748  0EA2                     	;# 
  2749  0EA3                     	;# 
  2750  0EA4                     	;# 
  2751  0EA5                     	;# 
  2752  0FE4                     	;# 
  2753  0FE5                     	;# 
  2754  0FE6                     	;# 
  2755  0FE7                     	;# 
  2756  0FE8                     	;# 
  2757  0FE8                     	;# 
  2758  0FE9                     	;# 
  2759  0FEA                     	;# 
  2760  0FEA                     	;# 
  2761  0FEB                     	;# 
  2762  0FED                     	;# 
  2763  0FEE                     	;# 
  2764  0FEE                     	;# 
  2765  0FEF                     	;# 
  2766  0FFF                     	;# 
  2767  0000                     	;# 
  2768  0001                     	;# 
  2769  0002                     	;# 
  2770  0003                     	;# 
  2771  0004                     	;# 
  2772  0005                     	;# 
  2773  0006                     	;# 
  2774  0007                     	;# 
  2775  0008                     	;# 
  2776  0009                     	;# 
  2777  000A                     	;# 
  2778  000B                     	;# 
  2779  000C                     	;# 
  2780  000E                     	;# 
  2781  0011                     	;# 
  2782  0012                     	;# 
  2783  0013                     	;# 
  2784  0015                     	;# 
  2785  0016                     	;# 
  2786  0016                     	;# 
  2787  0017                     	;# 
  2788  0018                     	;# 
  2789  0019                     	;# 
  2790  001A                     	;# 
  2791  001B                     	;# 
  2792  001C                     	;# 
  2793  008C                     	;# 
  2794  008E                     	;# 
  2795  0091                     	;# 
  2796  0092                     	;# 
  2797  0093                     	;# 
  2798  0095                     	;# 
  2799  0096                     	;# 
  2800  0097                     	;# 
  2801  0098                     	;# 
  2802  0099                     	;# 
  2803  009A                     	;# 
  2804  009B                     	;# 
  2805  009B                     	;# 
  2806  009C                     	;# 
  2807  009D                     	;# 
  2808  009E                     	;# 
  2809  009F                     	;# 
  2810  010C                     	;# 
  2811  010E                     	;# 
  2812  0111                     	;# 
  2813  0112                     	;# 
  2814  0113                     	;# 
  2815  0114                     	;# 
  2816  0115                     	;# 
  2817  0116                     	;# 
  2818  0117                     	;# 
  2819  0118                     	;# 
  2820  0119                     	;# 
  2821  018C                     	;# 
  2822  018E                     	;# 
  2823  0191                     	;# 
  2824  0191                     	;# 
  2825  0192                     	;# 
  2826  0193                     	;# 
  2827  0193                     	;# 
  2828  0194                     	;# 
  2829  0195                     	;# 
  2830  0196                     	;# 
  2831  0197                     	;# 
  2832  0199                     	;# 
  2833  019A                     	;# 
  2834  019B                     	;# 
  2835  019B                     	;# 
  2836  019C                     	;# 
  2837  019D                     	;# 
  2838  019E                     	;# 
  2839  019F                     	;# 
  2840  020C                     	;# 
  2841  020E                     	;# 
  2842  028C                     	;# 
  2843  028E                     	;# 
  2844  030C                     	;# 
  2845  030E                     	;# 
  2846  038C                     	;# 
  2847  038E                     	;# 
  2848  0391                     	;# 
  2849  0392                     	;# 
  2850  0393                     	;# 
  2851  0397                     	;# 
  2852  0398                     	;# 
  2853  0399                     	;# 
  2854  0691                     	;# 
  2855  0692                     	;# 
  2856  0693                     	;# 
  2857  0694                     	;# 
  2858  0695                     	;# 
  2859  0D8E                     	;# 
  2860  0D8F                     	;# 
  2861  0D90                     	;# 
  2862  0D91                     	;# 
  2863  0D91                     	;# 
  2864  0D92                     	;# 
  2865  0D93                     	;# 
  2866  0D93                     	;# 
  2867  0D94                     	;# 
  2868  0D95                     	;# 
  2869  0D95                     	;# 
  2870  0D96                     	;# 
  2871  0D97                     	;# 
  2872  0D97                     	;# 
  2873  0D98                     	;# 
  2874  0D99                     	;# 
  2875  0D99                     	;# 
  2876  0D9A                     	;# 
  2877  0D9B                     	;# 
  2878  0D9C                     	;# 
  2879  0D9C                     	;# 
  2880  0D9D                     	;# 
  2881  0D9D                     	;# 
  2882  0D9E                     	;# 
  2883  0D9F                     	;# 
  2884  0DA0                     	;# 
  2885  0DA1                     	;# 
  2886  0DA1                     	;# 
  2887  0DA2                     	;# 
  2888  0DA3                     	;# 
  2889  0DA3                     	;# 
  2890  0DA4                     	;# 
  2891  0DA5                     	;# 
  2892  0DA5                     	;# 
  2893  0DA6                     	;# 
  2894  0DA7                     	;# 
  2895  0DA7                     	;# 
  2896  0DA8                     	;# 
  2897  0DA9                     	;# 
  2898  0DA9                     	;# 
  2899  0DAA                     	;# 
  2900  0DAB                     	;# 
  2901  0DAC                     	;# 
  2902  0DAC                     	;# 
  2903  0DAD                     	;# 
  2904  0DAD                     	;# 
  2905  0DAE                     	;# 
  2906  0DAF                     	;# 
  2907  0DB0                     	;# 
  2908  0DB1                     	;# 
  2909  0DB1                     	;# 
  2910  0DB2                     	;# 
  2911  0DB3                     	;# 
  2912  0DB3                     	;# 
  2913  0DB4                     	;# 
  2914  0DB5                     	;# 
  2915  0DB5                     	;# 
  2916  0DB6                     	;# 
  2917  0DB7                     	;# 
  2918  0DB7                     	;# 
  2919  0DB8                     	;# 
  2920  0DB9                     	;# 
  2921  0DB9                     	;# 
  2922  0DBA                     	;# 
  2923  0DBB                     	;# 
  2924  0DBC                     	;# 
  2925  0DBC                     	;# 
  2926  0DBD                     	;# 
  2927  0DBD                     	;# 
  2928  0DBE                     	;# 
  2929  0DBF                     	;# 
  2930  0DC0                     	;# 
  2931  0DC1                     	;# 
  2932  0DC1                     	;# 
  2933  0DC2                     	;# 
  2934  0DC3                     	;# 
  2935  0DC3                     	;# 
  2936  0DC4                     	;# 
  2937  0DC5                     	;# 
  2938  0DC5                     	;# 
  2939  0DC6                     	;# 
  2940  0DC7                     	;# 
  2941  0DC7                     	;# 
  2942  0DC8                     	;# 
  2943  0DC9                     	;# 
  2944  0DC9                     	;# 
  2945  0DCA                     	;# 
  2946  0DCB                     	;# 
  2947  0DCC                     	;# 
  2948  0DCC                     	;# 
  2949  0DCD                     	;# 
  2950  0DCD                     	;# 
  2951  0DCE                     	;# 
  2952  0DCF                     	;# 
  2953  0DD0                     	;# 
  2954  0E0F                     	;# 
  2955  0E10                     	;# 
  2956  0E11                     	;# 
  2957  0E12                     	;# 
  2958  0E13                     	;# 
  2959  0E14                     	;# 
  2960  0E15                     	;# 
  2961  0E16                     	;# 
  2962  0E17                     	;# 
  2963  0E90                     	;# 
  2964  0E91                     	;# 
  2965  0E92                     	;# 
  2966  0E94                     	;# 
  2967  0E95                     	;# 
  2968  0EA0                     	;# 
  2969  0EA1                     	;# 
  2970  0EA2                     	;# 
  2971  0EA3                     	;# 
  2972  0EA4                     	;# 
  2973  0EA5                     	;# 
  2974  0FE4                     	;# 
  2975  0FE5                     	;# 
  2976  0FE6                     	;# 
  2977  0FE7                     	;# 
  2978  0FE8                     	;# 
  2979  0FE8                     	;# 
  2980  0FE9                     	;# 
  2981  0FEA                     	;# 
  2982  0FEA                     	;# 
  2983  0FEB                     	;# 
  2984  0FED                     	;# 
  2985  0FEE                     	;# 
  2986  0FEE                     	;# 
  2987  0FEF                     	;# 
  2988  0FFF                     	;# 
  2989  0000                     	;# 
  2990  0001                     	;# 
  2991  0002                     	;# 
  2992  0003                     	;# 
  2993  0004                     	;# 
  2994  0005                     	;# 
  2995  0006                     	;# 
  2996  0007                     	;# 
  2997  0008                     	;# 
  2998  0009                     	;# 
  2999  000A                     	;# 
  3000  000B                     	;# 
  3001  000C                     	;# 
  3002  000E                     	;# 
  3003  0011                     	;# 
  3004  0012                     	;# 
  3005  0013                     	;# 
  3006  0015                     	;# 
  3007  0016                     	;# 
  3008  0016                     	;# 
  3009  0017                     	;# 
  3010  0018                     	;# 
  3011  0019                     	;# 
  3012  001A                     	;# 
  3013  001B                     	;# 
  3014  001C                     	;# 
  3015  008C                     	;# 
  3016  008E                     	;# 
  3017  0091                     	;# 
  3018  0092                     	;# 
  3019  0093                     	;# 
  3020  0095                     	;# 
  3021  0096                     	;# 
  3022  0097                     	;# 
  3023  0098                     	;# 
  3024  0099                     	;# 
  3025  009A                     	;# 
  3026  009B                     	;# 
  3027  009B                     	;# 
  3028  009C                     	;# 
  3029  009D                     	;# 
  3030  009E                     	;# 
  3031  009F                     	;# 
  3032  010C                     	;# 
  3033  010E                     	;# 
  3034  0111                     	;# 
  3035  0112                     	;# 
  3036  0113                     	;# 
  3037  0114                     	;# 
  3038  0115                     	;# 
  3039  0116                     	;# 
  3040  0117                     	;# 
  3041  0118                     	;# 
  3042  0119                     	;# 
  3043  018C                     	;# 
  3044  018E                     	;# 
  3045  0191                     	;# 
  3046  0191                     	;# 
  3047  0192                     	;# 
  3048  0193                     	;# 
  3049  0193                     	;# 
  3050  0194                     	;# 
  3051  0195                     	;# 
  3052  0196                     	;# 
  3053  0197                     	;# 
  3054  0199                     	;# 
  3055  019A                     	;# 
  3056  019B                     	;# 
  3057  019B                     	;# 
  3058  019C                     	;# 
  3059  019D                     	;# 
  3060  019E                     	;# 
  3061  019F                     	;# 
  3062  020C                     	;# 
  3063  020E                     	;# 
  3064  028C                     	;# 
  3065  028E                     	;# 
  3066  030C                     	;# 
  3067  030E                     	;# 
  3068  038C                     	;# 
  3069  038E                     	;# 
  3070  0391                     	;# 
  3071  0392                     	;# 
  3072  0393                     	;# 
  3073  0397                     	;# 
  3074  0398                     	;# 
  3075  0399                     	;# 
  3076  0691                     	;# 
  3077  0692                     	;# 
  3078  0693                     	;# 
  3079  0694                     	;# 
  3080  0695                     	;# 
  3081  0D8E                     	;# 
  3082  0D8F                     	;# 
  3083  0D90                     	;# 
  3084  0D91                     	;# 
  3085  0D91                     	;# 
  3086  0D92                     	;# 
  3087  0D93                     	;# 
  3088  0D93                     	;# 
  3089  0D94                     	;# 
  3090  0D95                     	;# 
  3091  0D95                     	;# 
  3092  0D96                     	;# 
  3093  0D97                     	;# 
  3094  0D97                     	;# 
  3095  0D98                     	;# 
  3096  0D99                     	;# 
  3097  0D99                     	;# 
  3098  0D9A                     	;# 
  3099  0D9B                     	;# 
  3100  0D9C                     	;# 
  3101  0D9C                     	;# 
  3102  0D9D                     	;# 
  3103  0D9D                     	;# 
  3104  0D9E                     	;# 
  3105  0D9F                     	;# 
  3106  0DA0                     	;# 
  3107  0DA1                     	;# 
  3108  0DA1                     	;# 
  3109  0DA2                     	;# 
  3110  0DA3                     	;# 
  3111  0DA3                     	;# 
  3112  0DA4                     	;# 
  3113  0DA5                     	;# 
  3114  0DA5                     	;# 
  3115  0DA6                     	;# 
  3116  0DA7                     	;# 
  3117  0DA7                     	;# 
  3118  0DA8                     	;# 
  3119  0DA9                     	;# 
  3120  0DA9                     	;# 
  3121  0DAA                     	;# 
  3122  0DAB                     	;# 
  3123  0DAC                     	;# 
  3124  0DAC                     	;# 
  3125  0DAD                     	;# 
  3126  0DAD                     	;# 
  3127  0DAE                     	;# 
  3128  0DAF                     	;# 
  3129  0DB0                     	;# 
  3130  0DB1                     	;# 
  3131  0DB1                     	;# 
  3132  0DB2                     	;# 
  3133  0DB3                     	;# 
  3134  0DB3                     	;# 
  3135  0DB4                     	;# 
  3136  0DB5                     	;# 
  3137  0DB5                     	;# 
  3138  0DB6                     	;# 
  3139  0DB7                     	;# 
  3140  0DB7                     	;# 
  3141  0DB8                     	;# 
  3142  0DB9                     	;# 
  3143  0DB9                     	;# 
  3144  0DBA                     	;# 
  3145  0DBB                     	;# 
  3146  0DBC                     	;# 
  3147  0DBC                     	;# 
  3148  0DBD                     	;# 
  3149  0DBD                     	;# 
  3150  0DBE                     	;# 
  3151  0DBF                     	;# 
  3152  0DC0                     	;# 
  3153  0DC1                     	;# 
  3154  0DC1                     	;# 
  3155  0DC2                     	;# 
  3156  0DC3                     	;# 
  3157  0DC3                     	;# 
  3158  0DC4                     	;# 
  3159  0DC5                     	;# 
  3160  0DC5                     	;# 
  3161  0DC6                     	;# 
  3162  0DC7                     	;# 
  3163  0DC7                     	;# 
  3164  0DC8                     	;# 
  3165  0DC9                     	;# 
  3166  0DC9                     	;# 
  3167  0DCA                     	;# 
  3168  0DCB                     	;# 
  3169  0DCC                     	;# 
  3170  0DCC                     	;# 
  3171  0DCD                     	;# 
  3172  0DCD                     	;# 
  3173  0DCE                     	;# 
  3174  0DCF                     	;# 
  3175  0DD0                     	;# 
  3176  0E0F                     	;# 
  3177  0E10                     	;# 
  3178  0E11                     	;# 
  3179  0E12                     	;# 
  3180  0E13                     	;# 
  3181  0E14                     	;# 
  3182  0E15                     	;# 
  3183  0E16                     	;# 
  3184  0E17                     	;# 
  3185  0E90                     	;# 
  3186  0E91                     	;# 
  3187  0E92                     	;# 
  3188  0E94                     	;# 
  3189  0E95                     	;# 
  3190  0EA0                     	;# 
  3191  0EA1                     	;# 
  3192  0EA2                     	;# 
  3193  0EA3                     	;# 
  3194  0EA4                     	;# 
  3195  0EA5                     	;# 
  3196  0FE4                     	;# 
  3197  0FE5                     	;# 
  3198  0FE6                     	;# 
  3199  0FE7                     	;# 
  3200  0FE8                     	;# 
  3201  0FE8                     	;# 
  3202  0FE9                     	;# 
  3203  0FEA                     	;# 
  3204  0FEA                     	;# 
  3205  0FEB                     	;# 
  3206  0FED                     	;# 
  3207  0FEE                     	;# 
  3208  0FEE                     	;# 
  3209  0FEF                     	;# 
  3210  0FFF                     	;# 
  3211  0000                     	;# 
  3212  0001                     	;# 
  3213  0002                     	;# 
  3214  0003                     	;# 
  3215  0004                     	;# 
  3216  0005                     	;# 
  3217  0006                     	;# 
  3218  0007                     	;# 
  3219  0008                     	;# 
  3220  0009                     	;# 
  3221  000A                     	;# 
  3222  000B                     	;# 
  3223  000C                     	;# 
  3224  000E                     	;# 
  3225  0011                     	;# 
  3226  0012                     	;# 
  3227  0013                     	;# 
  3228  0015                     	;# 
  3229  0016                     	;# 
  3230  0016                     	;# 
  3231  0017                     	;# 
  3232  0018                     	;# 
  3233  0019                     	;# 
  3234  001A                     	;# 
  3235  001B                     	;# 
  3236  001C                     	;# 
  3237  008C                     	;# 
  3238  008E                     	;# 
  3239  0091                     	;# 
  3240  0092                     	;# 
  3241  0093                     	;# 
  3242  0095                     	;# 
  3243  0096                     	;# 
  3244  0097                     	;# 
  3245  0098                     	;# 
  3246  0099                     	;# 
  3247  009A                     	;# 
  3248  009B                     	;# 
  3249  009B                     	;# 
  3250  009C                     	;# 
  3251  009D                     	;# 
  3252  009E                     	;# 
  3253  009F                     	;# 
  3254  010C                     	;# 
  3255  010E                     	;# 
  3256  0111                     	;# 
  3257  0112                     	;# 
  3258  0113                     	;# 
  3259  0114                     	;# 
  3260  0115                     	;# 
  3261  0116                     	;# 
  3262  0117                     	;# 
  3263  0118                     	;# 
  3264  0119                     	;# 
  3265  018C                     	;# 
  3266  018E                     	;# 
  3267  0191                     	;# 
  3268  0191                     	;# 
  3269  0192                     	;# 
  3270  0193                     	;# 
  3271  0193                     	;# 
  3272  0194                     	;# 
  3273  0195                     	;# 
  3274  0196                     	;# 
  3275  0197                     	;# 
  3276  0199                     	;# 
  3277  019A                     	;# 
  3278  019B                     	;# 
  3279  019B                     	;# 
  3280  019C                     	;# 
  3281  019D                     	;# 
  3282  019E                     	;# 
  3283  019F                     	;# 
  3284  020C                     	;# 
  3285  020E                     	;# 
  3286  028C                     	;# 
  3287  028E                     	;# 
  3288  030C                     	;# 
  3289  030E                     	;# 
  3290  038C                     	;# 
  3291  038E                     	;# 
  3292  0391                     	;# 
  3293  0392                     	;# 
  3294  0393                     	;# 
  3295  0397                     	;# 
  3296  0398                     	;# 
  3297  0399                     	;# 
  3298  0691                     	;# 
  3299  0692                     	;# 
  3300  0693                     	;# 
  3301  0694                     	;# 
  3302  0695                     	;# 
  3303  0D8E                     	;# 
  3304  0D8F                     	;# 
  3305  0D90                     	;# 
  3306  0D91                     	;# 
  3307  0D91                     	;# 
  3308  0D92                     	;# 
  3309  0D93                     	;# 
  3310  0D93                     	;# 
  3311  0D94                     	;# 
  3312  0D95                     	;# 
  3313  0D95                     	;# 
  3314  0D96                     	;# 
  3315  0D97                     	;# 
  3316  0D97                     	;# 
  3317  0D98                     	;# 
  3318  0D99                     	;# 
  3319  0D99                     	;# 
  3320  0D9A                     	;# 
  3321  0D9B                     	;# 
  3322  0D9C                     	;# 
  3323  0D9C                     	;# 
  3324  0D9D                     	;# 
  3325  0D9D                     	;# 
  3326  0D9E                     	;# 
  3327  0D9F                     	;# 
  3328  0DA0                     	;# 
  3329  0DA1                     	;# 
  3330  0DA1                     	;# 
  3331  0DA2                     	;# 
  3332  0DA3                     	;# 
  3333  0DA3                     	;# 
  3334  0DA4                     	;# 
  3335  0DA5                     	;# 
  3336  0DA5                     	;# 
  3337  0DA6                     	;# 
  3338  0DA7                     	;# 
  3339  0DA7                     	;# 
  3340  0DA8                     	;# 
  3341  0DA9                     	;# 
  3342  0DA9                     	;# 
  3343  0DAA                     	;# 
  3344  0DAB                     	;# 
  3345  0DAC                     	;# 
  3346  0DAC                     	;# 
  3347  0DAD                     	;# 
  3348  0DAD                     	;# 
  3349  0DAE                     	;# 
  3350  0DAF                     	;# 
  3351  0DB0                     	;# 
  3352  0DB1                     	;# 
  3353  0DB1                     	;# 
  3354  0DB2                     	;# 
  3355  0DB3                     	;# 
  3356  0DB3                     	;# 
  3357  0DB4                     	;# 
  3358  0DB5                     	;# 
  3359  0DB5                     	;# 
  3360  0DB6                     	;# 
  3361  0DB7                     	;# 
  3362  0DB7                     	;# 
  3363  0DB8                     	;# 
  3364  0DB9                     	;# 
  3365  0DB9                     	;# 
  3366  0DBA                     	;# 
  3367  0DBB                     	;# 
  3368  0DBC                     	;# 
  3369  0DBC                     	;# 
  3370  0DBD                     	;# 
  3371  0DBD                     	;# 
  3372  0DBE                     	;# 
  3373  0DBF                     	;# 
  3374  0DC0                     	;# 
  3375  0DC1                     	;# 
  3376  0DC1                     	;# 
  3377  0DC2                     	;# 
  3378  0DC3                     	;# 
  3379  0DC3                     	;# 
  3380  0DC4                     	;# 
  3381  0DC5                     	;# 
  3382  0DC5                     	;# 
  3383  0DC6                     	;# 
  3384  0DC7                     	;# 
  3385  0DC7                     	;# 
  3386  0DC8                     	;# 
  3387  0DC9                     	;# 
  3388  0DC9                     	;# 
  3389  0DCA                     	;# 
  3390  0DCB                     	;# 
  3391  0DCC                     	;# 
  3392  0DCC                     	;# 
  3393  0DCD                     	;# 
  3394  0DCD                     	;# 
  3395  0DCE                     	;# 
  3396  0DCF                     	;# 
  3397  0DD0                     	;# 
  3398  0E0F                     	;# 
  3399  0E10                     	;# 
  3400  0E11                     	;# 
  3401  0E12                     	;# 
  3402  0E13                     	;# 
  3403  0E14                     	;# 
  3404  0E15                     	;# 
  3405  0E16                     	;# 
  3406  0E17                     	;# 
  3407  0E90                     	;# 
  3408  0E91                     	;# 
  3409  0E92                     	;# 
  3410  0E94                     	;# 
  3411  0E95                     	;# 
  3412  0EA0                     	;# 
  3413  0EA1                     	;# 
  3414  0EA2                     	;# 
  3415  0EA3                     	;# 
  3416  0EA4                     	;# 
  3417  0EA5                     	;# 
  3418  0FE4                     	;# 
  3419  0FE5                     	;# 
  3420  0FE6                     	;# 
  3421  0FE7                     	;# 
  3422  0FE8                     	;# 
  3423  0FE8                     	;# 
  3424  0FE9                     	;# 
  3425  0FEA                     	;# 
  3426  0FEA                     	;# 
  3427  0FEB                     	;# 
  3428  0FED                     	;# 
  3429  0FEE                     	;# 
  3430  0FEE                     	;# 
  3431  0FEF                     	;# 
  3432  0FFF                     	;# 
  3433  0000                     	;# 
  3434  0001                     	;# 
  3435  0002                     	;# 
  3436  0003                     	;# 
  3437  0004                     	;# 
  3438  0005                     	;# 
  3439  0006                     	;# 
  3440  0007                     	;# 
  3441  0008                     	;# 
  3442  0009                     	;# 
  3443  000A                     	;# 
  3444  000B                     	;# 
  3445  000C                     	;# 
  3446  000E                     	;# 
  3447  0011                     	;# 
  3448  0012                     	;# 
  3449  0013                     	;# 
  3450  0015                     	;# 
  3451  0016                     	;# 
  3452  0016                     	;# 
  3453  0017                     	;# 
  3454  0018                     	;# 
  3455  0019                     	;# 
  3456  001A                     	;# 
  3457  001B                     	;# 
  3458  001C                     	;# 
  3459  008C                     	;# 
  3460  008E                     	;# 
  3461  0091                     	;# 
  3462  0092                     	;# 
  3463  0093                     	;# 
  3464  0095                     	;# 
  3465  0096                     	;# 
  3466  0097                     	;# 
  3467  0098                     	;# 
  3468  0099                     	;# 
  3469  009A                     	;# 
  3470  009B                     	;# 
  3471  009B                     	;# 
  3472  009C                     	;# 
  3473  009D                     	;# 
  3474  009E                     	;# 
  3475  009F                     	;# 
  3476  010C                     	;# 
  3477  010E                     	;# 
  3478  0111                     	;# 
  3479  0112                     	;# 
  3480  0113                     	;# 
  3481  0114                     	;# 
  3482  0115                     	;# 
  3483  0116                     	;# 
  3484  0117                     	;# 
  3485  0118                     	;# 
  3486  0119                     	;# 
  3487  018C                     	;# 
  3488  018E                     	;# 
  3489  0191                     	;# 
  3490  0191                     	;# 
  3491  0192                     	;# 
  3492  0193                     	;# 
  3493  0193                     	;# 
  3494  0194                     	;# 
  3495  0195                     	;# 
  3496  0196                     	;# 
  3497  0197                     	;# 
  3498  0199                     	;# 
  3499  019A                     	;# 
  3500  019B                     	;# 
  3501  019B                     	;# 
  3502  019C                     	;# 
  3503  019D                     	;# 
  3504  019E                     	;# 
  3505  019F                     	;# 
  3506  020C                     	;# 
  3507  020E                     	;# 
  3508  028C                     	;# 
  3509  028E                     	;# 
  3510  030C                     	;# 
  3511  030E                     	;# 
  3512  038C                     	;# 
  3513  038E                     	;# 
  3514  0391                     	;# 
  3515  0392                     	;# 
  3516  0393                     	;# 
  3517  0397                     	;# 
  3518  0398                     	;# 
  3519  0399                     	;# 
  3520  0691                     	;# 
  3521  0692                     	;# 
  3522  0693                     	;# 
  3523  0694                     	;# 
  3524  0695                     	;# 
  3525  0D8E                     	;# 
  3526  0D8F                     	;# 
  3527  0D90                     	;# 
  3528  0D91                     	;# 
  3529  0D91                     	;# 
  3530  0D92                     	;# 
  3531  0D93                     	;# 
  3532  0D93                     	;# 
  3533  0D94                     	;# 
  3534  0D95                     	;# 
  3535  0D95                     	;# 
  3536  0D96                     	;# 
  3537  0D97                     	;# 
  3538  0D97                     	;# 
  3539  0D98                     	;# 
  3540  0D99                     	;# 
  3541  0D99                     	;# 
  3542  0D9A                     	;# 
  3543  0D9B                     	;# 
  3544  0D9C                     	;# 
  3545  0D9C                     	;# 
  3546  0D9D                     	;# 
  3547  0D9D                     	;# 
  3548  0D9E                     	;# 
  3549  0D9F                     	;# 
  3550  0DA0                     	;# 
  3551  0DA1                     	;# 
  3552  0DA1                     	;# 
  3553  0DA2                     	;# 
  3554  0DA3                     	;# 
  3555  0DA3                     	;# 
  3556  0DA4                     	;# 
  3557  0DA5                     	;# 
  3558  0DA5                     	;# 
  3559  0DA6                     	;# 
  3560  0DA7                     	;# 
  3561  0DA7                     	;# 
  3562  0DA8                     	;# 
  3563  0DA9                     	;# 
  3564  0DA9                     	;# 
  3565  0DAA                     	;# 
  3566  0DAB                     	;# 
  3567  0DAC                     	;# 
  3568  0DAC                     	;# 
  3569  0DAD                     	;# 
  3570  0DAD                     	;# 
  3571  0DAE                     	;# 
  3572  0DAF                     	;# 
  3573  0DB0                     	;# 
  3574  0DB1                     	;# 
  3575  0DB1                     	;# 
  3576  0DB2                     	;# 
  3577  0DB3                     	;# 
  3578  0DB3                     	;# 
  3579  0DB4                     	;# 
  3580  0DB5                     	;# 
  3581  0DB5                     	;# 
  3582  0DB6                     	;# 
  3583  0DB7                     	;# 
  3584  0DB7                     	;# 
  3585  0DB8                     	;# 
  3586  0DB9                     	;# 
  3587  0DB9                     	;# 
  3588  0DBA                     	;# 
  3589  0DBB                     	;# 
  3590  0DBC                     	;# 
  3591  0DBC                     	;# 
  3592  0DBD                     	;# 
  3593  0DBD                     	;# 
  3594  0DBE                     	;# 
  3595  0DBF                     	;# 
  3596  0DC0                     	;# 
  3597  0DC1                     	;# 
  3598  0DC1                     	;# 
  3599  0DC2                     	;# 
  3600  0DC3                     	;# 
  3601  0DC3                     	;# 
  3602  0DC4                     	;# 
  3603  0DC5                     	;# 
  3604  0DC5                     	;# 
  3605  0DC6                     	;# 
  3606  0DC7                     	;# 
  3607  0DC7                     	;# 
  3608  0DC8                     	;# 
  3609  0DC9                     	;# 
  3610  0DC9                     	;# 
  3611  0DCA                     	;# 
  3612  0DCB                     	;# 
  3613  0DCC                     	;# 
  3614  0DCC                     	;# 
  3615  0DCD                     	;# 
  3616  0DCD                     	;# 
  3617  0DCE                     	;# 
  3618  0DCF                     	;# 
  3619  0DD0                     	;# 
  3620  0E0F                     	;# 
  3621  0E10                     	;# 
  3622  0E11                     	;# 
  3623  0E12                     	;# 
  3624  0E13                     	;# 
  3625  0E14                     	;# 
  3626  0E15                     	;# 
  3627  0E16                     	;# 
  3628  0E17                     	;# 
  3629  0E90                     	;# 
  3630  0E91                     	;# 
  3631  0E92                     	;# 
  3632  0E94                     	;# 
  3633  0E95                     	;# 
  3634  0EA0                     	;# 
  3635  0EA1                     	;# 
  3636  0EA2                     	;# 
  3637  0EA3                     	;# 
  3638  0EA4                     	;# 
  3639  0EA5                     	;# 
  3640  0FE4                     	;# 
  3641  0FE5                     	;# 
  3642  0FE6                     	;# 
  3643  0FE7                     	;# 
  3644  0FE8                     	;# 
  3645  0FE8                     	;# 
  3646  0FE9                     	;# 
  3647  0FEA                     	;# 
  3648  0FEA                     	;# 
  3649  0FEB                     	;# 
  3650  0FED                     	;# 
  3651  0FEE                     	;# 
  3652  0FEE                     	;# 
  3653  0FEF                     	;# 
  3654  0FFF                     	;# 
  3655  0000                     	;# 
  3656  0001                     	;# 
  3657  0002                     	;# 
  3658  0003                     	;# 
  3659  0004                     	;# 
  3660  0005                     	;# 
  3661  0006                     	;# 
  3662  0007                     	;# 
  3663  0008                     	;# 
  3664  0009                     	;# 
  3665  000A                     	;# 
  3666  000B                     	;# 
  3667  000C                     	;# 
  3668  000E                     	;# 
  3669  0011                     	;# 
  3670  0012                     	;# 
  3671  0013                     	;# 
  3672  0015                     	;# 
  3673  0016                     	;# 
  3674  0016                     	;# 
  3675  0017                     	;# 
  3676  0018                     	;# 
  3677  0019                     	;# 
  3678  001A                     	;# 
  3679  001B                     	;# 
  3680  001C                     	;# 
  3681  008C                     	;# 
  3682  008E                     	;# 
  3683  0091                     	;# 
  3684  0092                     	;# 
  3685  0093                     	;# 
  3686  0095                     	;# 
  3687  0096                     	;# 
  3688  0097                     	;# 
  3689  0098                     	;# 
  3690  0099                     	;# 
  3691  009A                     	;# 
  3692  009B                     	;# 
  3693  009B                     	;# 
  3694  009C                     	;# 
  3695  009D                     	;# 
  3696  009E                     	;# 
  3697  009F                     	;# 
  3698  010C                     	;# 
  3699  010E                     	;# 
  3700  0111                     	;# 
  3701  0112                     	;# 
  3702  0113                     	;# 
  3703  0114                     	;# 
  3704  0115                     	;# 
  3705  0116                     	;# 
  3706  0117                     	;# 
  3707  0118                     	;# 
  3708  0119                     	;# 
  3709  018C                     	;# 
  3710  018E                     	;# 
  3711  0191                     	;# 
  3712  0191                     	;# 
  3713  0192                     	;# 
  3714  0193                     	;# 
  3715  0193                     	;# 
  3716  0194                     	;# 
  3717  0195                     	;# 
  3718  0196                     	;# 
  3719  0197                     	;# 
  3720  0199                     	;# 
  3721  019A                     	;# 
  3722  019B                     	;# 
  3723  019B                     	;# 
  3724  019C                     	;# 
  3725  019D                     	;# 
  3726  019E                     	;# 
  3727  019F                     	;# 
  3728  020C                     	;# 
  3729  020E                     	;# 
  3730  028C                     	;# 
  3731  028E                     	;# 
  3732  030C                     	;# 
  3733  030E                     	;# 
  3734  038C                     	;# 
  3735  038E                     	;# 
  3736  0391                     	;# 
  3737  0392                     	;# 
  3738  0393                     	;# 
  3739  0397                     	;# 
  3740  0398                     	;# 
  3741  0399                     	;# 
  3742  0691                     	;# 
  3743  0692                     	;# 
  3744  0693                     	;# 
  3745  0694                     	;# 
  3746  0695                     	;# 
  3747  0D8E                     	;# 
  3748  0D8F                     	;# 
  3749  0D90                     	;# 
  3750  0D91                     	;# 
  3751  0D91                     	;# 
  3752  0D92                     	;# 
  3753  0D93                     	;# 
  3754  0D93                     	;# 
  3755  0D94                     	;# 
  3756  0D95                     	;# 
  3757  0D95                     	;# 
  3758  0D96                     	;# 
  3759  0D97                     	;# 
  3760  0D97                     	;# 
  3761  0D98                     	;# 
  3762  0D99                     	;# 
  3763  0D99                     	;# 
  3764  0D9A                     	;# 
  3765  0D9B                     	;# 
  3766  0D9C                     	;# 
  3767  0D9C                     	;# 
  3768  0D9D                     	;# 
  3769  0D9D                     	;# 
  3770  0D9E                     	;# 
  3771  0D9F                     	;# 
  3772  0DA0                     	;# 
  3773  0DA1                     	;# 
  3774  0DA1                     	;# 
  3775  0DA2                     	;# 
  3776  0DA3                     	;# 
  3777  0DA3                     	;# 
  3778  0DA4                     	;# 
  3779  0DA5                     	;# 
  3780  0DA5                     	;# 
  3781  0DA6                     	;# 
  3782  0DA7                     	;# 
  3783  0DA7                     	;# 
  3784  0DA8                     	;# 
  3785  0DA9                     	;# 
  3786  0DA9                     	;# 
  3787  0DAA                     	;# 
  3788  0DAB                     	;# 
  3789  0DAC                     	;# 
  3790  0DAC                     	;# 
  3791  0DAD                     	;# 
  3792  0DAD                     	;# 
  3793  0DAE                     	;# 
  3794  0DAF                     	;# 
  3795  0DB0                     	;# 
  3796  0DB1                     	;# 
  3797  0DB1                     	;# 
  3798  0DB2                     	;# 
  3799  0DB3                     	;# 
  3800  0DB3                     	;# 
  3801  0DB4                     	;# 
  3802  0DB5                     	;# 
  3803  0DB5                     	;# 
  3804  0DB6                     	;# 
  3805  0DB7                     	;# 
  3806  0DB7                     	;# 
  3807  0DB8                     	;# 
  3808  0DB9                     	;# 
  3809  0DB9                     	;# 
  3810  0DBA                     	;# 
  3811  0DBB                     	;# 
  3812  0DBC                     	;# 
  3813  0DBC                     	;# 
  3814  0DBD                     	;# 
  3815  0DBD                     	;# 
  3816  0DBE                     	;# 
  3817  0DBF                     	;# 
  3818  0DC0                     	;# 
  3819  0DC1                     	;# 
  3820  0DC1                     	;# 
  3821  0DC2                     	;# 
  3822  0DC3                     	;# 
  3823  0DC3                     	;# 
  3824  0DC4                     	;# 
  3825  0DC5                     	;# 
  3826  0DC5                     	;# 
  3827  0DC6                     	;# 
  3828  0DC7                     	;# 
  3829  0DC7                     	;# 
  3830  0DC8                     	;# 
  3831  0DC9                     	;# 
  3832  0DC9                     	;# 
  3833  0DCA                     	;# 
  3834  0DCB                     	;# 
  3835  0DCC                     	;# 
  3836  0DCC                     	;# 
  3837  0DCD                     	;# 
  3838  0DCD                     	;# 
  3839  0DCE                     	;# 
  3840  0DCF                     	;# 
  3841  0DD0                     	;# 
  3842  0E0F                     	;# 
  3843  0E10                     	;# 
  3844  0E11                     	;# 
  3845  0E12                     	;# 
  3846  0E13                     	;# 
  3847  0E14                     	;# 
  3848  0E15                     	;# 
  3849  0E16                     	;# 
  3850  0E17                     	;# 
  3851  0E90                     	;# 
  3852  0E91                     	;# 
  3853  0E92                     	;# 
  3854  0E94                     	;# 
  3855  0E95                     	;# 
  3856  0EA0                     	;# 
  3857  0EA1                     	;# 
  3858  0EA2                     	;# 
  3859  0EA3                     	;# 
  3860  0EA4                     	;# 
  3861  0EA5                     	;# 
  3862  0FE4                     	;# 
  3863  0FE5                     	;# 
  3864  0FE6                     	;# 
  3865  0FE7                     	;# 
  3866  0FE8                     	;# 
  3867  0FE8                     	;# 
  3868  0FE9                     	;# 
  3869  0FEA                     	;# 
  3870  0FEA                     	;# 
  3871  0FEB                     	;# 
  3872  0FED                     	;# 
  3873  0FEE                     	;# 
  3874  0FEE                     	;# 
  3875  0FEF                     	;# 
  3876  0FFF                     	;_sysData
  3877                           
  3878 ;; Function _TMR2_DefaultInterruptHandler is unused but had its address taken
  3879  0000                     
  3880                           	psect	idataBANK0
  3881  1CDA                     __pidataBANK0:	
  3882                           
  3883                           ;initializer for _resRs
  3884  1CDA  3410               	retlw	16
  3885  1CDB  3427               	retlw	39
  3886                           
  3887                           ;initializer for _resRc
  3888  1CDC  3410               	retlw	16
  3889  1CDD  3427               	retlw	39
  3890                           
  3891                           	psect	idataBANK1
  3892  1CE4                     __pidataBANK1:	
  3893                           
  3894                           ;initializer for _pidU
  3895  1CE4  3414               	retlw	20
  3896  1CE5  3400               	retlw	0
  3897                           
  3898                           ;initializer for _pidpwm2_U
  3899  1CE6  3414               	retlw	20
  3900  1CE7  3400               	retlw	0
  3901                           
  3902                           ;initializer for _pwm1DutyForIdrv
  3903  1CE8  3405               	retlw	5
  3904  1CE9  3400               	retlw	0
  3905                           
  3906                           ;initializer for _pwm2DutyForVout
  3907  1CEA  3405               	retlw	5
  3908  1CEB  3400               	retlw	0
  3909                           
  3910                           	psect	stringtext1
  3911  181E                     __pstringtext1:	
  3912  181E                     _HexTable:	
  3913  181E  3430               	retlw	48
  3914  181F  3431               	retlw	49
  3915  1820  3432               	retlw	50
  3916  1821  3433               	retlw	51
  3917  1822  3434               	retlw	52
  3918  1823  3435               	retlw	53
  3919  1824  3436               	retlw	54
  3920  1825  3437               	retlw	55
  3921  1826  3438               	retlw	56
  3922  1827  3439               	retlw	57
  3923  1828  3441               	retlw	65
  3924  1829  3442               	retlw	66
  3925  182A  3443               	retlw	67
  3926  182B  3444               	retlw	68
  3927  182C  3445               	retlw	69
  3928  182D  3446               	retlw	70
  3929  182E  3400               	retlw	0
  3930  182F                     __end_of_HexTable:	
  3931  0013                     _PIR3bits	set	19
  3932  001C                     _T2CONbits	set	28
  3933  0011                     _PIR1bits	set	17
  3934  001A                     _TMR2	set	26
  3935  001B                     _PR2	set	27
  3936  001C                     _T2CON	set	28
  3937  000B                     _INTCONbits	set	11
  3938  005F                     _GIE	set	95
  3939  0095                     _OPTION_REGbits	set	149
  3940  008E                     _TRISC	set	142
  3941  008C                     _TRISA	set	140
  3942  009D                     _ADCON0bits	set	157
  3943  009C                     _ADRESH	set	156
  3944  009B                     _ADRESL	set	155
  3945  009F                     _ADCON2	set	159
  3946  009E                     _ADCON1	set	158
  3947  009D                     _ADCON0	set	157
  3948  0097                     _WDTCON	set	151
  3949  0091                     _PIE1bits	set	145
  3950  010E                     _LATC	set	270
  3951  010C                     _LATA	set	268
  3952  0117                     _FVRCONbits	set	279
  3953  0117                     _FVRCON	set	279
  3954  019E                     _TXSTAbits	set	414
  3955  018C                     _ANSELA	set	396
  3956  018E                     _ANSELC	set	398
  3957  019A                     _TXREG	set	410
  3958  019C                     _SPBRGH	set	412
  3959  019B                     _SPBRGL	set	411
  3960  019E                     _TXSTA	set	414
  3961  019D                     _RCSTA	set	413
  3962  019F                     _BAUDCON	set	415
  3963  0199                     _RCREG	set	409
  3964  019D                     _RCSTAbits	set	413
  3965  0196                     _PMCON2	set	406
  3966  0193                     _PMDATL	set	403
  3967  0194                     _PMDATH	set	404
  3968  0195                     _PMCON1bits	set	405
  3969  0192                     _PMADRH	set	402
  3970  0191                     _PMADRL	set	401
  3971  020E                     _WPUC	set	526
  3972  020C                     _WPUA	set	524
  3973  028E                     _ODCONC	set	654
  3974  028C                     _ODCONA	set	652
  3975  0D9D                     _PWM1INTFbits	set	3485
  3976  0D9F                     _PWM1LDCONbits	set	3487
  3977  0D9B                     _PWM1CONbits	set	3483
  3978  0D9B                     _PWM1CON	set	3483
  3979  0D99                     _PWM1TMRL	set	3481
  3980  0D9A                     _PWM1TMRH	set	3482
  3981  0D97                     _PWM1OFL	set	3479
  3982  0D98                     _PWM1OFH	set	3480
  3983  0D95                     _PWM1PRL	set	3477
  3984  0D96                     _PWM1PRH	set	3478
  3985  0D93                     _PWM1DCL	set	3475
  3986  0D94                     _PWM1DCH	set	3476
  3987  0D91                     _PWM1PHL	set	3473
  3988  0D92                     _PWM1PHH	set	3474
  3989  0DA0                     _PWM1OFCON	set	3488
  3990  0D9F                     _PWM1LDCON	set	3487
  3991  0D9E                     _PWM1CLKCON	set	3486
  3992  0D9D                     _PWM1INTF	set	3485
  3993  0D9C                     _PWM1INTE	set	3484
  3994  0DAD                     _PWM2INTFbits	set	3501
  3995  0DAF                     _PWM2LDCONbits	set	3503
  3996  0DAB                     _PWM2CONbits	set	3499
  3997  0DAB                     _PWM2CON	set	3499
  3998  0DA9                     _PWM2TMRL	set	3497
  3999  0DAA                     _PWM2TMRH	set	3498
  4000  0DA7                     _PWM2OFL	set	3495
  4001  0DA8                     _PWM2OFH	set	3496
  4002  0DA5                     _PWM2PRL	set	3493
  4003  0DA6                     _PWM2PRH	set	3494
  4004  0DA3                     _PWM2DCL	set	3491
  4005  0DA4                     _PWM2DCH	set	3492
  4006  0DA1                     _PWM2PHL	set	3489
  4007  0DA2                     _PWM2PHH	set	3490
  4008  0DB0                     _PWM2OFCON	set	3504
  4009  0DAF                     _PWM2LDCON	set	3503
  4010  0DAE                     _PWM2CLKCON	set	3502
  4011  0DAD                     _PWM2INTF	set	3501
  4012  0DAC                     _PWM2INTE	set	3500
  4013  0E15                     _RXPPSbits	set	3605
  4014  0E0F                     _PPSLOCKbits	set	3599
  4015  0E0F                     _PPSLOCK	set	3599
  4016  0EA5                     _RC5PPSbits	set	3749
  4017  0E95                     _RA5PPSbits	set	3733
  4018  0E94                     _RA4PPSbits	set	3732
  4019                           
  4020                           	psect	cinit
  4021  0869                     start_initialization:	
  4022                           ; #config settings
  4023                           
  4024  0869                     __initialization:		;BIGRAM
  4025                           
  4026                           ; Initialize objects allocated to BANK0
  4027  0869  30DA               	movlw	low __pidataBANK0
  4028  086A  0084               	movwf	4
  4029  086B  309C               	movlw	(high __pidataBANK0)| (0+128)
  4030  086C  0085               	movwf	5
  4031  086D  306C               	movlw	low __pdataBANK0
  4032  086E  0086               	movwf	6
  4033  086F  3000               	movlw	high __pdataBANK0
  4034  0870  0087               	movwf	7
  4035  0871  3000               	movlw	0
  4036  0872  00FF               	movwf	btemp+1
  4037  0873  3004               	movlw	4
  4038  0874  319D  2501  3188   	fcall	init_ram
  4039                           
  4040                           ; Initialize objects allocated to BANK1
  4041  0877  30E4               	movlw	low __pidataBANK1
  4042  0878  0084               	movwf	4
  4043  0879  309C               	movlw	(high __pidataBANK1)| (0+128)
  4044  087A  0085               	movwf	5
  4045  087B  30CE               	movlw	low __pdataBANK1
  4046  087C  0086               	movwf	6
  4047  087D  3000               	movlw	high __pdataBANK1
  4048  087E  0087               	movwf	7
  4049  087F  3000               	movlw	0
  4050  0880  00FF               	movwf	btemp+1
  4051  0881  3008               	movlw	8
  4052  0882  319D  2501  3188   	fcall	init_ram
  4053                           
  4054                           ; Clear objects allocated to BIGRAM
  4055  0885  305C               	movlw	low (0+9052)
  4056  0886  0084               	movwf	4
  4057  0887  3023               	movlw	high (0+9052)
  4058  0888  0085               	movwf	5
  4059  0889  3084               	movlw	132
  4060  088A  00FE               	movwf	btemp
  4061  088B  3000               	movlw	0
  4062  088C  00FF               	movwf	btemp+1
  4063  088D  319C  24F5  3188   	fcall	clear_ram0
  4064                           
  4065                           ; Clear objects allocated to COMMON
  4066  0890  01FC               	clrf	__pbssCOMMON& (0+127)
  4067                           
  4068                           ; Clear objects allocated to BANK0
  4069  0891  3047               	movlw	low __pbssBANK0
  4070  0892  0084               	movwf	4
  4071  0893  3000               	movlw	high __pbssBANK0
  4072  0894  0085               	movwf	5
  4073  0895  3025               	movlw	37
  4074  0896  00FE               	movwf	btemp
  4075  0897  3000               	movlw	0
  4076  0898  00FF               	movwf	btemp+1
  4077  0899  319C  24F5  3188   	fcall	clear_ram0
  4078                           
  4079                           ; Clear objects allocated to BANK1
  4080  089C  30A0               	movlw	low __pbssBANK1
  4081  089D  0084               	movwf	4
  4082  089E  3000               	movlw	high __pbssBANK1
  4083  089F  0085               	movwf	5
  4084  08A0  302E               	movlw	46
  4085  08A1  00FE               	movwf	btemp
  4086  08A2  3000               	movlw	0
  4087  08A3  00FF               	movwf	btemp+1
  4088  08A4  319C  24F5  3188   	fcall	clear_ram0
  4089                           
  4090                           ; Clear objects allocated to BANK2
  4091  08A7  3020               	movlw	low __pbssBANK2
  4092  08A8  0084               	movwf	4
  4093  08A9  3001               	movlw	high __pbssBANK2
  4094  08AA  0085               	movwf	5
  4095  08AB  3040               	movlw	64
  4096  08AC  00FE               	movwf	btemp
  4097  08AD  3000               	movlw	0
  4098  08AE  00FF               	movwf	btemp+1
  4099  08AF  319C  24F5         	fcall	clear_ram0
  4100  08B1                     end_of_initialization:	
  4101                           ;End of C runtime variable initialization code
  4102                           
  4103  08B1                     __end_of__initialization:	
  4104  08B1  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4105  08B2  0020               	movlb	0
  4106  08B3  318D  2D72         	ljmp	_main	;jump to C main() function
  4107                           
  4108                           	psect	bssCOMMON
  4109  007C                     __pbssCOMMON:	
  4110  007C                     _eusartRxIdleTime_ms:	
  4111  007C                     	ds	1
  4112                           
  4113                           	psect	bssBANK0
  4114  0047                     __pbssBANK0:	
  4115  0047                     _y32:	
  4116  0047                     	ds	4
  4117  004B                     _x0:	
  4118  004B                     	ds	4
  4119  004F                     _y0:	
  4120  004F                     	ds	4
  4121  0053                     _rsLoAvg:	
  4122  0053                     	ds	2
  4123  0055                     _voExpectAdcValue:	
  4124  0055                     	ds	2
  4125  0057                     _PidKp:	
  4126  0057                     	ds	2
  4127  0059                     _rtAdcValueVoFb:	
  4128  0059                     	ds	2
  4129  005B                     _rtAdcValueRcHi:	
  4130  005B                     	ds	2
  4131  005D                     _rtAdcValueRcLo:	
  4132  005D                     	ds	2
  4133  005F                     _rtAdcValueRsHi:	
  4134  005F                     	ds	2
  4135  0061                     _rtAdcValueRsLo:	
  4136  0061                     	ds	2
  4137  0063                     _TMR2_InterruptHandler:	
  4138  0063                     	ds	2
  4139  0065                     _pidBbSm:	
  4140  0065                     	ds	1
  4141  0066                     _xlen:	
  4142  0066                     	ds	1
  4143  0067                     _rxtemp:	
  4144  0067                     	ds	1
  4145  0068                     _subTickerX_1s:	
  4146  0068                     	ds	1
  4147  0069                     _subTickerX:	
  4148  0069                     	ds	1
  4149  006A                     _eusartRxCount:	
  4150  006A                     	ds	1
  4151  006B                     _Event:	
  4152  006B                     	ds	1
  4153                           
  4154                           	psect	dataBANK0
  4155  006C                     __pdataBANK0:	
  4156  006C                     _resRs:	
  4157  006C                     	ds	2
  4158  006E                     _resRc:	
  4159  006E                     	ds	2
  4160                           
  4161                           	psect	bssBANK1
  4162  00A0                     __pbssBANK1:	
  4163  00A0                     _err:	
  4164  00A0                     	ds	12
  4165  00AC                     _rsLoAvgBuf:	
  4166  00AC                     	ds	12
  4167  00B8                     _x32:	
  4168  00B8                     	ds	4
  4169  00BC                     _x1:	
  4170  00BC                     	ds	4
  4171  00C0                     _y1:	
  4172  00C0                     	ds	4
  4173  00C4                     _pwm2Ei:	
  4174  00C4                     	ds	2
  4175  00C6                     _voExpectMv:	
  4176  00C6                     	ds	2
  4177  00C8                     _PidTd:	
  4178  00C8                     	ds	2
  4179  00CA                     _PidTi:	
  4180  00CA                     	ds	2
  4181  00CC                     _globalTicker:	
  4182  00CC                     	ds	2
  4183                           
  4184                           	psect	dataBANK1
  4185  00CE                     __pdataBANK1:	
  4186  00CE                     _pidU:	
  4187  00CE                     	ds	2
  4188  00D0                     _pidpwm2_U:	
  4189  00D0                     	ds	2
  4190  00D2                     _pwm1DutyForIdrv:	
  4191  00D2                     	ds	2
  4192  00D4                     _pwm2DutyForVout:	
  4193  00D4                     	ds	2
  4194                           
  4195                           	psect	bssBANK2
  4196  0120                     __pbssBANK2:	
  4197  0120                     _modbusBuf:	
  4198  0120                     	ds	32
  4199  0140                     _eusartRxBuffer:	
  4200  0140                     	ds	32
  4201                           
  4202                           	psect	inittext
  4203  1D01                     init_ram:	
  4204  1D01  00FE               	movwf	126
  4205  1D02                     initloop:	
  4206  1D02  0012               	moviw fsr0++
  4207  1D03  001E               	movwi fsr1++
  4208  1D04  3001               	movlw	1
  4209  1D05  02FE               	subwf	126,f
  4210  1D06  3000               	movlw	0
  4211  1D07  3BFF               	subwfb	127,f
  4212  1D08  087F               	movf	127,w
  4213  1D09  047E               	iorwf	126,w
  4214  1D0A  1903               	btfsc	3,2
  4215  1D0B  3400               	retlw	0
  4216  1D0C  2D02               	goto	initloop
  4217                           
  4218                           	psect	clrtext
  4219  1CF5                     clear_ram0:	
  4220                           ;	Called with FSR0 containing the base address, and
  4221                           ;	btemp/btemp+1 has the size to clear
  4222                           
  4223  1CF5  0064               	clrwdt	;clear the watchdog before getting into this loop
  4224  1CF6                     clrloop0:	
  4225  1CF6  0180               	clrf	0	;clear RAM location pointed to by FSR
  4226  1CF7  3101               	addfsr 0,1
  4227  1CF8  3001               	movlw	1
  4228  1CF9  02FE               	subwf	126,f
  4229  1CFA  3000               	movlw	0
  4230  1CFB  3BFF               	subwfb	127,f
  4231  1CFC  087F               	movf	127,w
  4232  1CFD  047E               	iorwf	126,w
  4233  1CFE  1903               	btfsc	3,2
  4234  1CFF  3400               	retlw	0	;all done for this memory range, return
  4235  1D00  2CF6               	goto	clrloop0	;have we reached the end yet?
  4236                           
  4237                           	psect	cstackBANK1
  4238  00D6                     __pcstackBANK1:	
  4239  00D6                     ??_main:	
  4240                           
  4241                           ; 1 bytes @ 0x0
  4242  00D6                     	ds	2
  4243                           
  4244                           	psect	cstackCOMMON
  4245  0070                     __pcstackCOMMON:	
  4246  0070                     ?_TMR2_StartTimer:	
  4247  0070                     ?_PIN_MANAGER_Initialize:	
  4248                           ; 1 bytes @ 0x0
  4249                           
  4250  0070                     ?_OSCILLATOR_Initialize:	
  4251                           ; 1 bytes @ 0x0
  4252                           
  4253  0070                     ?_WDT_Initialize:	
  4254                           ; 1 bytes @ 0x0
  4255                           
  4256  0070                     ?_ADC1_Initialize:	
  4257                           ; 1 bytes @ 0x0
  4258                           
  4259  0070                     ?_EUSART_Initialize:	
  4260                           ; 1 bytes @ 0x0
  4261                           
  4262  0070                     ?_PWM2_Initialize:	
  4263                           ; 1 bytes @ 0x0
  4264                           
  4265  0070                     ?_PWM1_Initialize:	
  4266                           ; 1 bytes @ 0x0
  4267                           
  4268  0070                     ?_TMR2_Initialize:	
  4269                           ; 1 bytes @ 0x0
  4270                           
  4271  0070                     ?_INTERRUPT_InterruptManager:	
  4272                           ; 1 bytes @ 0x0
  4273                           
  4274  0070                     ??_INTERRUPT_InterruptManager:	
  4275                           ; 1 bytes @ 0x0
  4276                           
  4277  0070                     ?_FVR_Initialize:	
  4278                           ; 1 bytes @ 0x0
  4279                           
  4280  0070                     ?_SYSTEM_Initialize:	
  4281                           ; 1 bytes @ 0x0
  4282                           
  4283  0070                     ?_uart_received_start:	
  4284                           ; 1 bytes @ 0x0
  4285                           
  4286  0070                     ?_fvr_set_gain:	
  4287                           ; 1 bytes @ 0x0
  4288                           
  4289  0070                     ?_adc_init:	
  4290                           ; 1 bytes @ 0x0
  4291                           
  4292  0070                     ?_pid_pwm1_idrv_run:	
  4293                           ; 1 bytes @ 0x0
  4294                           
  4295  0070                     ?_pid_pwm2_vout_run:	
  4296                           ; 1 bytes @ 0x0
  4297                           
  4298  0070                     ?_my_flash_read_system_erase:	
  4299                           ; 1 bytes @ 0x0
  4300                           
  4301  0070                     ?_sys_data_save:	
  4302                           ; 1 bytes @ 0x0
  4303                           
  4304  0070                     ?_modbus_response_write_single_register:	
  4305                           ; 1 bytes @ 0x0
  4306                           
  4307  0070                     ?_modbus_response_write_mult_register:	
  4308                           ; 1 bytes @ 0x0
  4309                           
  4310  0070                     ?_modbus_response_command:	
  4311                           ; 1 bytes @ 0x0
  4312                           
  4313  0070                     ?_main:	
  4314                           ; 1 bytes @ 0x0
  4315                           
  4316  0070                     ?_sys_data_init:	
  4317                           ; 1 bytes @ 0x0
  4318                           
  4319                           
  4320                           ; 2 bytes @ 0x0
  4321  0070                     	ds	1
  4322  0071                     ?_FLASH_EraseBlock:	
  4323  0071                     ?_TMR2_SetInterruptHandler:	
  4324                           ; 1 bytes @ 0x1
  4325                           
  4326  0071                     ??_TMR2_StartTimer:	
  4327                           ; 1 bytes @ 0x1
  4328                           
  4329  0071                     ??_PIN_MANAGER_Initialize:	
  4330                           ; 1 bytes @ 0x1
  4331                           
  4332  0071                     ??_OSCILLATOR_Initialize:	
  4333                           ; 1 bytes @ 0x1
  4334                           
  4335  0071                     ??_WDT_Initialize:	
  4336                           ; 1 bytes @ 0x1
  4337                           
  4338  0071                     ??_ADC1_Initialize:	
  4339                           ; 1 bytes @ 0x1
  4340                           
  4341  0071                     ??_EUSART_Initialize:	
  4342                           ; 1 bytes @ 0x1
  4343                           
  4344  0071                     ?_m_mem_cpy_len:	
  4345                           ; 1 bytes @ 0x1
  4346                           
  4347  0071                     ??_PWM2_Initialize:	
  4348                           ; 1 bytes @ 0x1
  4349                           
  4350  0071                     ??_PWM1_Initialize:	
  4351                           ; 1 bytes @ 0x1
  4352                           
  4353  0071                     ??_FVR_Initialize:	
  4354                           ; 1 bytes @ 0x1
  4355                           
  4356  0071                     ?_uart_send_len:	
  4357                           ; 1 bytes @ 0x1
  4358                           
  4359  0071                     ??_uart_received_start:	
  4360                           ; 1 bytes @ 0x1
  4361                           
  4362  0071                     ??_fvr_set_gain:	
  4363                           ; 1 bytes @ 0x1
  4364                           
  4365  0071                     ??_adc_init:	
  4366                           ; 1 bytes @ 0x1
  4367                           
  4368  0071                     ?_my_flash_system_read:	
  4369                           ; 1 bytes @ 0x1
  4370                           
  4371  0071                     ?_get_idrv_pwm1_duty:	
  4372                           ; 1 bytes @ 0x1
  4373                           
  4374  0071                     ?_get_vout_pwm2_duty:	
  4375                           ; 2 bytes @ 0x1
  4376                           
  4377  0071                     ?_my_flash_system_write:	
  4378                           ; 2 bytes @ 0x1
  4379                           
  4380  0071                     ?_getRegisterVal:	
  4381                           ; 2 bytes @ 0x1
  4382                           
  4383  0071                     ?_crc_sum:	
  4384                           ; 2 bytes @ 0x1
  4385                           
  4386  0071                     ?___wmul:	
  4387                           ; 2 bytes @ 0x1
  4388                           
  4389  0071                     ?___awdiv:	
  4390                           ; 2 bytes @ 0x1
  4391                           
  4392  0071                     ?___lwdiv:	
  4393                           ; 2 bytes @ 0x1
  4394                           
  4395  0071                     ?___lmul:	
  4396                           ; 2 bytes @ 0x1
  4397                           
  4398  0071                     ?___lldiv:	
  4399                           ; 4 bytes @ 0x1
  4400                           
  4401  0071                     PIN_MANAGER_Initialize@state:	
  4402                           ; 4 bytes @ 0x1
  4403                           
  4404  0071                     uart_send_len@len:	
  4405                           ; 1 bytes @ 0x1
  4406                           
  4407  0071                     FLASH_EraseBlock@startAddr:	
  4408                           ; 1 bytes @ 0x1
  4409                           
  4410  0071                     TMR2_SetInterruptHandler@InterruptHandler:	
  4411                           ; 2 bytes @ 0x1
  4412                           
  4413  0071                     my_flash_system_read@buf:	
  4414                           ; 2 bytes @ 0x1
  4415                           
  4416  0071                     my_flash_system_write@buf:	
  4417                           ; 2 bytes @ 0x1
  4418                           
  4419  0071                     getRegisterVal@addr:	
  4420                           ; 2 bytes @ 0x1
  4421                           
  4422  0071                     m_mem_cpy_len@d:	
  4423                           ; 2 bytes @ 0x1
  4424                           
  4425  0071                     crc_sum@buf:	
  4426                           ; 2 bytes @ 0x1
  4427                           
  4428  0071                     ___wmul@multiplier:	
  4429                           ; 2 bytes @ 0x1
  4430                           
  4431  0071                     ___awdiv@divisor:	
  4432                           ; 2 bytes @ 0x1
  4433                           
  4434  0071                     ___lwdiv@divisor:	
  4435                           ; 2 bytes @ 0x1
  4436                           
  4437  0071                     ___lmul@multiplier:	
  4438                           ; 2 bytes @ 0x1
  4439                           
  4440  0071                     ___lldiv@divisor:	
  4441                           ; 4 bytes @ 0x1
  4442                           
  4443                           
  4444                           ; 4 bytes @ 0x1
  4445  0071                     	ds	1
  4446  0072                     ??_uart_send_len:	
  4447  0072                     fvr_set_gain@t8:	
  4448                           ; 1 bytes @ 0x2
  4449                           
  4450  0072                     adc_init@ch:	
  4451                           ; 1 bytes @ 0x2
  4452                           
  4453                           
  4454                           ; 1 bytes @ 0x2
  4455  0072                     	ds	1
  4456  0073                     ??_FLASH_EraseBlock:	
  4457  0073                     ??_TMR2_SetInterruptHandler:	
  4458                           ; 1 bytes @ 0x3
  4459                           
  4460  0073                     ??_TMR2_Initialize:	
  4461                           ; 1 bytes @ 0x3
  4462                           
  4463  0073                     ??_SYSTEM_Initialize:	
  4464                           ; 1 bytes @ 0x3
  4465                           
  4466  0073                     ??_get_idrv_pwm1_duty:	
  4467                           ; 1 bytes @ 0x3
  4468                           
  4469  0073                     ??_get_vout_pwm2_duty:	
  4470                           ; 1 bytes @ 0x3
  4471                           
  4472  0073                     FLASH_EraseBlock@GIEBitValue:	
  4473                           ; 1 bytes @ 0x3
  4474                           
  4475  0073                     fvr_set_gain@g:	
  4476                           ; 1 bytes @ 0x3
  4477                           
  4478  0073                     getRegisterVal@tempData:	
  4479                           ; 1 bytes @ 0x3
  4480                           
  4481  0073                     my_flash_system_read@len:	
  4482                           ; 1 bytes @ 0x3
  4483                           
  4484  0073                     my_flash_system_write@len:	
  4485                           ; 2 bytes @ 0x3
  4486                           
  4487  0073                     m_mem_cpy_len@s:	
  4488                           ; 2 bytes @ 0x3
  4489                           
  4490  0073                     crc_sum@len:	
  4491                           ; 2 bytes @ 0x3
  4492                           
  4493  0073                     ___wmul@multiplicand:	
  4494                           ; 2 bytes @ 0x3
  4495                           
  4496  0073                     ___awdiv@dividend:	
  4497                           ; 2 bytes @ 0x3
  4498                           
  4499  0073                     ___lwdiv@dividend:	
  4500                           ; 2 bytes @ 0x3
  4501                           
  4502                           
  4503                           ; 2 bytes @ 0x3
  4504  0073                     	ds	1
  4505  0074                     ??_my_flash_read_system_erase:	
  4506  0074                     ??_getRegisterVal:	
  4507                           ; 1 bytes @ 0x4
  4508                           
  4509  0074                     ?_adc_sample:	
  4510                           ; 1 bytes @ 0x4
  4511                           
  4512  0074                     adc_sample@gfvr:	
  4513                           ; 2 bytes @ 0x4
  4514                           
  4515  0074                     uart_send_len@tm:	
  4516                           ; 1 bytes @ 0x4
  4517                           
  4518                           
  4519                           ; 2 bytes @ 0x4
  4520  0074                     	ds	1
  4521  0075                     ??_my_flash_system_read:	
  4522  0075                     ??_my_flash_system_write:	
  4523                           ; 1 bytes @ 0x5
  4524                           
  4525  0075                     ??_crc_sum:	
  4526                           ; 1 bytes @ 0x5
  4527                           
  4528  0075                     ??___wmul:	
  4529                           ; 1 bytes @ 0x5
  4530                           
  4531  0075                     ??___awdiv:	
  4532                           ; 1 bytes @ 0x5
  4533                           
  4534  0075                     ??___lwdiv:	
  4535                           ; 1 bytes @ 0x5
  4536                           
  4537  0075                     adc_sample@num:	
  4538                           ; 1 bytes @ 0x5
  4539                           
  4540  0075                     get_idrv_pwm1_duty@t16:	
  4541                           ; 1 bytes @ 0x5
  4542                           
  4543  0075                     get_vout_pwm2_duty@t16:	
  4544                           ; 2 bytes @ 0x5
  4545                           
  4546  0075                     m_mem_cpy_len@len:	
  4547                           ; 2 bytes @ 0x5
  4548                           
  4549  0075                     ___wmul@product:	
  4550                           ; 2 bytes @ 0x5
  4551                           
  4552  0075                     ___lmul@multiplicand:	
  4553                           ; 2 bytes @ 0x5
  4554                           
  4555  0075                     ___lldiv@dividend:	
  4556                           ; 4 bytes @ 0x5
  4557                           
  4558                           
  4559                           ; 4 bytes @ 0x5
  4560  0075                     	ds	1
  4561  0076                     ??_adc_sample:	
  4562  0076                     uart_send_len@i:	
  4563                           ; 1 bytes @ 0x6
  4564                           
  4565  0076                     ___awdiv@counter:	
  4566                           ; 1 bytes @ 0x6
  4567                           
  4568  0076                     ___lwdiv@quotient:	
  4569                           ; 1 bytes @ 0x6
  4570                           
  4571                           
  4572                           ; 2 bytes @ 0x6
  4573  0076                     	ds	1
  4574  0077                     ??_crc_append:	
  4575  0077                     ??_m_mem_cpy_len:	
  4576                           ; 1 bytes @ 0x7
  4577                           
  4578  0077                     ?_set_idrv_pwm1_duty:	
  4579                           ; 1 bytes @ 0x7
  4580                           
  4581  0077                     ?_set_vout_pwm2_duty:	
  4582                           ; 1 bytes @ 0x7
  4583                           
  4584  0077                     uart_send_len@buf:	
  4585                           ; 1 bytes @ 0x7
  4586                           
  4587  0077                     my_flash_system_read@GIEBitValue:	
  4588                           ; 1 bytes @ 0x7
  4589                           
  4590  0077                     ___awdiv@sign:	
  4591                           ; 1 bytes @ 0x7
  4592                           
  4593  0077                     set_idrv_pwm1_duty@duty:	
  4594                           ; 1 bytes @ 0x7
  4595                           
  4596  0077                     set_vout_pwm2_duty@duty:	
  4597                           ; 2 bytes @ 0x7
  4598                           
  4599                           
  4600                           ; 2 bytes @ 0x7
  4601  0077                     	ds	1
  4602  0078                     ??_crc_verify:	
  4603  0078                     ___lwdiv@counter:	
  4604                           ; 1 bytes @ 0x8
  4605                           
  4606  0078                     my_flash_system_read@flashAddr:	
  4607                           ; 1 bytes @ 0x8
  4608                           
  4609  0078                     getRegisterVal@t16:	
  4610                           ; 2 bytes @ 0x8
  4611                           
  4612  0078                     ___awdiv@quotient:	
  4613                           ; 2 bytes @ 0x8
  4614                           
  4615                           
  4616                           ; 2 bytes @ 0x8
  4617  0078                     	ds	1
  4618  0079                     ??_set_idrv_pwm1_duty:	
  4619  0079                     ??_set_vout_pwm2_duty:	
  4620                           ; 1 bytes @ 0x9
  4621                           
  4622  0079                     ??___lmul:	
  4623                           ; 1 bytes @ 0x9
  4624                           
  4625  0079                     ??___lldiv:	
  4626                           ; 1 bytes @ 0x9
  4627                           
  4628  0079                     ??___aldiv:	
  4629                           ; 1 bytes @ 0x9
  4630                           
  4631  0079                     set_idrv_pwm1_duty@t16:	
  4632                           ; 1 bytes @ 0x9
  4633                           
  4634  0079                     set_vout_pwm2_duty@t16:	
  4635                           ; 2 bytes @ 0x9
  4636                           
  4637                           
  4638                           ; 2 bytes @ 0x9
  4639  0079                     	ds	1
  4640  007A                     ??_calc_rs_lo_avg:	
  4641  007A                     getRegisterVal@tempAddr:	
  4642                           ; 1 bytes @ 0xA
  4643                           
  4644  007A                     my_flash_system_read@i:	
  4645                           ; 1 bytes @ 0xA
  4646                           
  4647                           
  4648                           ; 2 bytes @ 0xA
  4649  007A                     	ds	2
  4650  007C                     ??_sys_data_save:	
  4651                           
  4652                           	psect	cstackBANK0
  4653  0020                     __pcstackBANK0:	
  4654                           ; 1 bytes @ 0xC
  4655                           
  4656  0020                     ??_pid_pwm2_vout_run:	
  4657  0020                     adc_sample@ch:	
  4658                           ; 1 bytes @ 0x0
  4659                           
  4660  0020                     my_flash_system_write@j:	
  4661                           ; 1 bytes @ 0x0
  4662                           
  4663  0020                     crc_sum@j:	
  4664                           ; 2 bytes @ 0x0
  4665                           
  4666  0020                     ___lmul@product:	
  4667                           ; 2 bytes @ 0x0
  4668                           
  4669  0020                     ___lldiv@quotient:	
  4670                           ; 4 bytes @ 0x0
  4671                           
  4672                           
  4673                           ; 4 bytes @ 0x0
  4674  0020                     	ds	1
  4675  0021                     adc_sample@i:	
  4676                           
  4677                           ; 2 bytes @ 0x1
  4678  0021                     	ds	1
  4679  0022                     my_flash_system_write@GIEBitValue:	
  4680  0022                     pid_pwm2_vout_run@__ei:	
  4681                           ; 1 bytes @ 0x2
  4682                           
  4683  0022                     crc_sum@i:	
  4684                           ; 2 bytes @ 0x2
  4685                           
  4686                           
  4687                           ; 2 bytes @ 0x2
  4688  0022                     	ds	1
  4689  0023                     adc_sample@ret:	
  4690  0023                     my_flash_system_write@blocNum:	
  4691                           ; 2 bytes @ 0x3
  4692                           
  4693                           
  4694                           ; 2 bytes @ 0x3
  4695  0023                     	ds	1
  4696  0024                     ?___aldiv:	
  4697  0024                     ___lldiv@counter:	
  4698                           ; 4 bytes @ 0x4
  4699                           
  4700  0024                     pid_pwm2_vout_run@t16:	
  4701                           ; 1 bytes @ 0x4
  4702                           
  4703  0024                     crc_sum@crc:	
  4704                           ; 2 bytes @ 0x4
  4705                           
  4706  0024                     ___aldiv@divisor:	
  4707                           ; 2 bytes @ 0x4
  4708                           
  4709                           
  4710                           ; 4 bytes @ 0x4
  4711  0024                     	ds	1
  4712  0025                     ?_calc_rs_lo_avg:	
  4713  0025                     ?_calc_temp_rs:	
  4714                           ; 2 bytes @ 0x5
  4715                           
  4716  0025                     ?_calc_temp_rc:	
  4717                           ; 4 bytes @ 0x5
  4718                           
  4719  0025                     adc_sample@t16:	
  4720                           ; 4 bytes @ 0x5
  4721                           
  4722  0025                     calc_rs_lo_avg@x:	
  4723                           ; 2 bytes @ 0x5
  4724                           
  4725  0025                     my_flash_system_write@loc:	
  4726                           ; 2 bytes @ 0x5
  4727                           
  4728                           
  4729                           ; 2 bytes @ 0x5
  4730  0025                     	ds	1
  4731  0026                     ?_crc_append:	
  4732  0026                     ?_crc_verify:	
  4733                           ; 1 bytes @ 0x6
  4734                           
  4735  0026                     crc_verify@message:	
  4736                           ; 1 bytes @ 0x6
  4737                           
  4738  0026                     crc_append@message:	
  4739                           ; 2 bytes @ 0x6
  4740                           
  4741                           
  4742                           ; 2 bytes @ 0x6
  4743  0026                     	ds	1
  4744  0027                     my_flash_system_write@flashAddr:	
  4745  0027                     calc_rs_lo_avg@t32:	
  4746                           ; 2 bytes @ 0x7
  4747                           
  4748                           
  4749                           ; 4 bytes @ 0x7
  4750  0027                     	ds	1
  4751  0028                     crc_verify@n:	
  4752  0028                     crc_append@n:	
  4753                           ; 2 bytes @ 0x8
  4754                           
  4755  0028                     ___aldiv@dividend:	
  4756                           ; 2 bytes @ 0x8
  4757                           
  4758                           
  4759                           ; 4 bytes @ 0x8
  4760  0028                     	ds	1
  4761  0029                     ??_calc_temp_rs:	
  4762  0029                     ??_calc_temp_rc:	
  4763                           ; 1 bytes @ 0x9
  4764                           
  4765  0029                     my_flash_system_write@i:	
  4766                           ; 1 bytes @ 0x9
  4767                           
  4768                           
  4769                           ; 1 bytes @ 0x9
  4770  0029                     	ds	1
  4771  002A                     crc_verify@crccal:	
  4772  002A                     crc_append@crc:	
  4773                           ; 2 bytes @ 0xA
  4774                           
  4775                           
  4776                           ; 2 bytes @ 0xA
  4777  002A                     	ds	1
  4778  002B                     calc_rs_lo_avg@i:	
  4779                           
  4780                           ; 1 bytes @ 0xB
  4781  002B                     	ds	1
  4782  002C                     ?_modbus_response_illgeal_function:	
  4783  002C                     ??_modbus_response_write_single_register:	
  4784                           ; 1 bytes @ 0xC
  4785                           
  4786  002C                     ??_modbus_response_write_mult_register:	
  4787                           ; 1 bytes @ 0xC
  4788                           
  4789  002C                     ??_modbus_response_command:	
  4790                           ; 1 bytes @ 0xC
  4791                           
  4792  002C                     modbus_response_illgeal_function@errcode:	
  4793                           ; 1 bytes @ 0xC
  4794                           
  4795  002C                     ___aldiv@counter:	
  4796                           ; 1 bytes @ 0xC
  4797                           
  4798  002C                     crc_verify@expected:	
  4799                           ; 1 bytes @ 0xC
  4800                           
  4801                           
  4802                           ; 2 bytes @ 0xC
  4803  002C                     	ds	1
  4804  002D                     ??_modbus_response_illgeal_function:	
  4805  002D                     modbus_response_write_mult_register@startAddr:	
  4806                           ; 1 bytes @ 0xD
  4807                           
  4808  002D                     ___aldiv@sign:	
  4809                           ; 1 bytes @ 0xD
  4810                           
  4811                           
  4812                           ; 1 bytes @ 0xD
  4813  002D                     	ds	1
  4814  002E                     ??_sys_data_init:	
  4815  002E                     modbus_response_illgeal_function@buf:	
  4816                           ; 1 bytes @ 0xE
  4817                           
  4818  002E                     modbus_response_write_mult_register@len:	
  4819                           ; 1 bytes @ 0xE
  4820                           
  4821  002E                     modbus_response_command@tmpAddr:	
  4822                           ; 1 bytes @ 0xE
  4823                           
  4824  002E                     ___aldiv@quotient:	
  4825                           ; 2 bytes @ 0xE
  4826                           
  4827                           
  4828                           ; 4 bytes @ 0xE
  4829  002E                     	ds	1
  4830  002F                     modbus_response_illgeal_function@pmdbs:	
  4831  002F                     modbus_response_write_mult_register@rbuf:	
  4832                           ; 1 bytes @ 0xF
  4833                           
  4834                           
  4835                           ; 1 bytes @ 0xF
  4836  002F                     	ds	1
  4837  0030                     modbus_response_write_single_register@fiSave:	
  4838  0030                     modbus_response_write_mult_register@stb:	
  4839                           ; 1 bytes @ 0x10
  4840                           
  4841  0030                     modbus_response_command@startAddr:	
  4842                           ; 1 bytes @ 0x10
  4843                           
  4844                           
  4845                           ; 2 bytes @ 0x10
  4846  0030                     	ds	1
  4847  0031                     modbus_response_write_single_register@t16:	
  4848                           
  4849                           ; 2 bytes @ 0x11
  4850  0031                     	ds	1
  4851  0032                     ??_pid_pwm1_idrv_run:	
  4852  0032                     ?_calc_expect_vout_adc_value:	
  4853                           ; 1 bytes @ 0x12
  4854                           
  4855  0032                     modbus_response_command@i:	
  4856                           ; 2 bytes @ 0x12
  4857                           
  4858  0032                     calc_expect_vout_adc_value@x:	
  4859                           ; 1 bytes @ 0x12
  4860                           
  4861                           
  4862                           ; 2 bytes @ 0x12
  4863  0032                     	ds	1
  4864  0033                     modbus_response_write_single_register@i:	
  4865  0033                     modbus_response_command@pmdbs:	
  4866                           ; 1 bytes @ 0x13
  4867                           
  4868                           
  4869                           ; 1 bytes @ 0x13
  4870  0033                     	ds	1
  4871  0034                     ??_calc_expect_vout_adc_value:	
  4872  0034                     modbus_response_write_single_register@pmdbs:	
  4873                           ; 1 bytes @ 0x14
  4874                           
  4875  0034                     modbus_response_command@len:	
  4876                           ; 1 bytes @ 0x14
  4877                           
  4878  0034                     sys_data_init@ret:	
  4879                           ; 1 bytes @ 0x14
  4880                           
  4881                           
  4882                           ; 2 bytes @ 0x14
  4883  0034                     	ds	1
  4884  0035                     modbus_response_write_single_register@rbuf:	
  4885  0035                     modbus_response_command@rbuf:	
  4886                           ; 1 bytes @ 0x15
  4887                           
  4888                           
  4889                           ; 1 bytes @ 0x15
  4890  0035                     	ds	1
  4891  0036                     sys_data_init@i:	
  4892  0036                     modbus_response_write_single_register@startAddr:	
  4893                           ; 2 bytes @ 0x16
  4894                           
  4895  0036                     modbus_response_command@tempData:	
  4896                           ; 2 bytes @ 0x16
  4897                           
  4898                           
  4899                           ; 2 bytes @ 0x16
  4900  0036                     	ds	2
  4901  0038                     ?_modbus_response_process:	
  4902  0038                     modbus_response_process@rlen:	
  4903                           ; 1 bytes @ 0x18
  4904                           
  4905                           
  4906                           ; 2 bytes @ 0x18
  4907  0038                     	ds	2
  4908  003A                     ??_modbus_response_process:	
  4909  003A                     pid_pwm1_idrv_run@t32:	
  4910                           ; 1 bytes @ 0x1A
  4911                           
  4912                           
  4913                           ; 4 bytes @ 0x1A
  4914  003A                     	ds	1
  4915  003B                     modbus_response_process@resp:	
  4916                           
  4917                           ; 1 bytes @ 0x1B
  4918  003B                     	ds	1
  4919  003C                     modbus_response_process@pmdbs:	
  4920                           
  4921                           ; 1 bytes @ 0x1C
  4922  003C                     	ds	1
  4923  003D                     modbus_response_process@rbuf:	
  4924                           
  4925                           ; 1 bytes @ 0x1D
  4926  003D                     	ds	5
  4927  0042                     calc_expect_vout_adc_value@t32:	
  4928                           
  4929                           ; 4 bytes @ 0x22
  4930  0042                     	ds	4
  4931  0046                     calc_expect_vout_adc_value@i:	
  4932                           
  4933                           ; 1 bytes @ 0x26
  4934  0046                     	ds	1
  4935                           
  4936                           	psect	maintext
  4937  0D72                     __pmaintext:	
  4938 ;;
  4939 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  4940 ;;
  4941 ;; *************** function _main *****************
  4942 ;; Defined at:
  4943 ;;		line 17 in file "src/app/main.c"
  4944 ;; Parameters:    Size  Location     Type
  4945 ;;		None
  4946 ;; Auto vars:     Size  Location     Type
  4947 ;;		None
  4948 ;; Return value:  Size  Location     Type
  4949 ;;                  1    wreg      void 
  4950 ;; Registers used:
  4951 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4952 ;; Tracked objects:
  4953 ;;		On entry : B1F/0
  4954 ;;		On exit  : 0/0
  4955 ;;		Unchanged: 0/0
  4956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4959 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4960 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4961 ;;Total ram usage:        2 bytes
  4962 ;; Hardware stack levels required when called:    6
  4963 ;; This function calls:
  4964 ;;		_SYSTEM_Initialize
  4965 ;;		_adc_sample
  4966 ;;		_calc_expect_vout_adc_value
  4967 ;;		_calc_rs_lo_avg
  4968 ;;		_calc_temp_rc
  4969 ;;		_calc_temp_rs
  4970 ;;		_m_mem_cpy_len
  4971 ;;		_modbus_response_process
  4972 ;;		_pid_pwm1_idrv_run
  4973 ;;		_pid_pwm2_vout_run
  4974 ;;		_sys_data_init
  4975 ;;		_uart_received_start
  4976 ;;		_uart_send_len
  4977 ;; This function is called by:
  4978 ;;		Startup code after reset
  4979 ;; This function uses a non-reentrant model
  4980 ;;
  4981                           
  4982                           
  4983                           ;psect for function _main
  4984  0D72                     _main:	
  4985                           
  4986                           ;main.c: 19: __nop();
  4987                           
  4988                           ;incstack = 0
  4989                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4990  0D72  0000               	nop
  4991                           
  4992                           ;main.c: 20: isRunInBoot=0xaa;
  4993  0D73  30AA               	movlw	170
  4994  0D74  0021               	movlb	1	; select bank1
  4995  0D75  00D6               	movwf	??_main^(0+128)
  4996  0D76  0856               	movf	??_main^(0+128),w
  4997  0D77  003F               	movlb	31	; select bank31
  4998  0D78  00FF               	movwf	127	;volatile
  4999                           
  5000                           ;main.c: 21: isRunInBoot=isRunInBoot;
  5001  0D79  087F               	movf	127,w	;volatile
  5002  0D7A  0021               	movlb	1	; select bank1
  5003  0D7B  00D6               	movwf	??_main^(0+128)
  5004  0D7C  0856               	movf	??_main^(0+128),w
  5005  0D7D  003F               	movlb	31	; select bank31
  5006  0D7E  00FF               	movwf	127	;volatile
  5007                           
  5008                           ;main.c: 22: SYSTEM_Initialize();
  5009  0D7F  319D  25C2  318D   	fcall	_SYSTEM_Initialize
  5010                           
  5011                           ;main.c: 23: do{ (INTCONbits.GIE = 1); (INTCONbits.PEIE = 1); }while(0);;
  5012  0D82  178B               	bsf	11,7	;volatile
  5013  0D83  170B               	bsf	11,6	;volatile
  5014                           
  5015                           ;main.c: 26: TXSTAbits.TXEN=0;
  5016  0D84  0023               	movlb	3	; select bank3
  5017  0D85  129E               	bcf	30,5	;volatile
  5018                           
  5019                           ;main.c: 27: sys_data_init();
  5020  0D86  3195  25B0  318D   	fcall	_sys_data_init
  5021                           
  5022                           ;main.c: 30: modbusBuf[0]=0x55;
  5023  0D89  3055               	movlw	85
  5024  0D8A  0021               	movlb	1	; select bank1
  5025  0D8B  00D6               	movwf	??_main^(0+128)
  5026  0D8C  0856               	movf	??_main^(0+128),w
  5027  0D8D  0022               	movlb	2	; select bank2
  5028  0D8E  00A0               	movwf	_modbusBuf^(0+256)
  5029                           
  5030                           ;main.c: 31: modbusBuf[1]=0xaa;
  5031  0D8F  30AA               	movlw	170
  5032  0D90  0021               	movlb	1	; select bank1
  5033  0D91  00D6               	movwf	??_main^(0+128)
  5034  0D92  0856               	movf	??_main^(0+128),w
  5035  0D93  0022               	movlb	2	; select bank2
  5036  0D94  00A1               	movwf	(_modbusBuf^(0+256)+1)
  5037                           
  5038                           ;main.c: 32: uart_send_len(modbusBuf,2);
  5039  0D95  3002               	movlw	2
  5040  0D96  0021               	movlb	1	; select bank1
  5041  0D97  00D6               	movwf	??_main^(0+128)
  5042  0D98  0856               	movf	??_main^(0+128),w
  5043  0D99  00F1               	movwf	uart_send_len@len
  5044  0D9A  3020               	movlw	(low (_modbusBuf| (0+256)))& (0+255)
  5045  0D9B  3190  20C9  318D   	fcall	_uart_send_len
  5046  0D9E                     l5140:	
  5047                           ;main.c: 33: while (1){
  5048                           
  5049                           
  5050                           ;main.c: 34: if(Event & (1<<2)){
  5051  0D9E  0020               	movlb	0	; select bank0
  5052  0D9F  1D6B               	btfss	_Event,2	;volatile
  5053  0DA0  2E47               	goto	l5170
  5054                           
  5055                           ;main.c: 35: Event &= ~(1<<2);
  5056  0DA1  30FB               	movlw	251
  5057  0DA2  0021               	movlb	1	; select bank1
  5058  0DA3  00D6               	movwf	??_main^(0+128)
  5059  0DA4  0856               	movf	??_main^(0+128),w
  5060  0DA5  0020               	movlb	0	; select bank0
  5061  0DA6  05EB               	andwf	_Event,f	;volatile
  5062                           
  5063                           ;main.c: 37: rtAdcValueRsLo=adc_sample(channel_AN6,1,32);
  5064  0DA7  01F4               	clrf	adc_sample@gfvr
  5065  0DA8  0AF4               	incf	adc_sample@gfvr,f
  5066  0DA9  3020               	movlw	32
  5067  0DAA  0021               	movlb	1	; select bank1
  5068  0DAB  00D6               	movwf	??_main^(0+128)
  5069  0DAC  0856               	movf	??_main^(0+128),w
  5070  0DAD  00F5               	movwf	adc_sample@num
  5071  0DAE  3006               	movlw	6
  5072  0DAF  3192  22D1  318D   	fcall	_adc_sample
  5073  0DB2  0875               	movf	?_adc_sample+1,w
  5074  0DB3  0020               	movlb	0	; select bank0
  5075  0DB4  00E2               	movwf	_rtAdcValueRsLo+1
  5076  0DB5  0874               	movf	?_adc_sample,w
  5077  0DB6  00E1               	movwf	_rtAdcValueRsLo
  5078                           
  5079                           ;main.c: 39: rtAdcValueRsHi=adc_sample(channel_AN5,3,32);
  5080  0DB7  3003               	movlw	3
  5081  0DB8  0021               	movlb	1	; select bank1
  5082  0DB9  00D6               	movwf	??_main^(0+128)
  5083  0DBA  0856               	movf	??_main^(0+128),w
  5084  0DBB  00F4               	movwf	adc_sample@gfvr
  5085  0DBC  3020               	movlw	32
  5086  0DBD  00D7               	movwf	(??_main+1)^(0+128)
  5087  0DBE  0857               	movf	(??_main+1)^(0+128),w
  5088  0DBF  00F5               	movwf	adc_sample@num
  5089  0DC0  3005               	movlw	5
  5090  0DC1  3192  22D1  318D   	fcall	_adc_sample
  5091  0DC4  0875               	movf	?_adc_sample+1,w
  5092  0DC5  0020               	movlb	0	; select bank0
  5093  0DC6  00E0               	movwf	_rtAdcValueRsHi+1
  5094  0DC7  0874               	movf	?_adc_sample,w
  5095  0DC8  00DF               	movwf	_rtAdcValueRsHi
  5096                           
  5097                           ;main.c: 42: rtAdcValueRcLo=adc_sample(channel_AN4,3,32);
  5098  0DC9  3003               	movlw	3
  5099  0DCA  0021               	movlb	1	; select bank1
  5100  0DCB  00D6               	movwf	??_main^(0+128)
  5101  0DCC  0856               	movf	??_main^(0+128),w
  5102  0DCD  00F4               	movwf	adc_sample@gfvr
  5103  0DCE  3020               	movlw	32
  5104  0DCF  00D7               	movwf	(??_main+1)^(0+128)
  5105  0DD0  0857               	movf	(??_main+1)^(0+128),w
  5106  0DD1  00F5               	movwf	adc_sample@num
  5107  0DD2  3004               	movlw	4
  5108  0DD3  3192  22D1  318D   	fcall	_adc_sample
  5109  0DD6  0875               	movf	?_adc_sample+1,w
  5110  0DD7  0020               	movlb	0	; select bank0
  5111  0DD8  00DE               	movwf	_rtAdcValueRcLo+1
  5112  0DD9  0874               	movf	?_adc_sample,w
  5113  0DDA  00DD               	movwf	_rtAdcValueRcLo
  5114                           
  5115                           ;main.c: 43: rtAdcValueRcLo>>=1;
  5116  0DDB  3001               	movlw	1
  5117  0DDC                     u4645:	
  5118  0DDC  36DE               	lsrf	_rtAdcValueRcLo+1,f
  5119  0DDD  0CDD               	rrf	_rtAdcValueRcLo,f
  5120  0DDE  0B89               	decfsz	9,f
  5121  0DDF  2DDC               	goto	u4645
  5122                           
  5123                           ;main.c: 44: rtAdcValueRcHi=adc_sample(channel_AN2,3,32);
  5124  0DE0  3003               	movlw	3
  5125  0DE1  0021               	movlb	1	; select bank1
  5126  0DE2  00D6               	movwf	??_main^(0+128)
  5127  0DE3  0856               	movf	??_main^(0+128),w
  5128  0DE4  00F4               	movwf	adc_sample@gfvr
  5129  0DE5  3020               	movlw	32
  5130  0DE6  00D7               	movwf	(??_main+1)^(0+128)
  5131  0DE7  0857               	movf	(??_main+1)^(0+128),w
  5132  0DE8  00F5               	movwf	adc_sample@num
  5133  0DE9  3002               	movlw	2
  5134  0DEA  3192  22D1  318D   	fcall	_adc_sample
  5135  0DED  0875               	movf	?_adc_sample+1,w
  5136  0DEE  0020               	movlb	0	; select bank0
  5137  0DEF  00DC               	movwf	_rtAdcValueRcHi+1
  5138  0DF0  0874               	movf	?_adc_sample,w
  5139  0DF1  00DB               	movwf	_rtAdcValueRcHi
  5140                           
  5141                           ;main.c: 45: rtAdcValueRcHi>>=1;
  5142  0DF2  3001               	movlw	1
  5143  0DF3                     u4655:	
  5144  0DF3  36DC               	lsrf	_rtAdcValueRcHi+1,f
  5145  0DF4  0CDB               	rrf	_rtAdcValueRcHi,f
  5146  0DF5  0B89               	decfsz	9,f
  5147  0DF6  2DF3               	goto	u4655
  5148                           
  5149                           ;main.c: 47: rtAdcValueVoFb=adc_sample(channel_AN7,3,32);
  5150  0DF7  3003               	movlw	3
  5151  0DF8  0021               	movlb	1	; select bank1
  5152  0DF9  00D6               	movwf	??_main^(0+128)
  5153  0DFA  0856               	movf	??_main^(0+128),w
  5154  0DFB  00F4               	movwf	adc_sample@gfvr
  5155  0DFC  3020               	movlw	32
  5156  0DFD  00D7               	movwf	(??_main+1)^(0+128)
  5157  0DFE  0857               	movf	(??_main+1)^(0+128),w
  5158  0DFF  00F5               	movwf	adc_sample@num
  5159  0E00  3007               	movlw	7
  5160  0E01  3192  22D1  318D   	fcall	_adc_sample
  5161  0E04  0875               	movf	?_adc_sample+1,w
  5162  0E05  0020               	movlb	0	; select bank0
  5163  0E06  00DA               	movwf	_rtAdcValueVoFb+1
  5164  0E07  0874               	movf	?_adc_sample,w
  5165  0E08  00D9               	movwf	_rtAdcValueVoFb
  5166                           
  5167                           ;main.c: 48: rtAdcValueVoFb>>=1;
  5168  0E09  3001               	movlw	1
  5169  0E0A                     u4665:	
  5170  0E0A  36DA               	lsrf	_rtAdcValueVoFb+1,f
  5171  0E0B  0CD9               	rrf	_rtAdcValueVoFb,f
  5172  0E0C  0B89               	decfsz	9,f
  5173  0E0D  2E0A               	goto	u4665
  5174                           
  5175                           ;main.c: 50: resRc=calc_temp_rc();
  5176  0E0E  3197  2727  318D   	fcall	_calc_temp_rc
  5177  0E11  0020               	movlb	0	; select bank0
  5178  0E12  0826               	movf	?_calc_temp_rc+1,w
  5179  0E13  00EF               	movwf	_resRc+1
  5180  0E14  0825               	movf	?_calc_temp_rc,w
  5181  0E15  00EE               	movwf	_resRc
  5182                           
  5183                           ;main.c: 51: resRs=calc_temp_rs();
  5184  0E16  3194  248F  318D   	fcall	_calc_temp_rs
  5185  0E19  0020               	movlb	0	; select bank0
  5186  0E1A  0826               	movf	?_calc_temp_rs+1,w
  5187  0E1B  00ED               	movwf	_resRs+1
  5188  0E1C  0825               	movf	?_calc_temp_rs,w
  5189  0E1D  00EC               	movwf	_resRs
  5190                           
  5191                           ;main.c: 53: pid_pwm1_idrv_run();
  5192  0E1E  318A  22A9  318D   	fcall	_pid_pwm1_idrv_run
  5193                           
  5194                           ;main.c: 54: rsLoAvg=calc_rs_lo_avg(rtAdcValueRsLo);
  5195  0E21  0020               	movlb	0	; select bank0
  5196  0E22  0862               	movf	_rtAdcValueRsLo+1,w
  5197  0E23  00A6               	movwf	calc_rs_lo_avg@x+1
  5198  0E24  0861               	movf	_rtAdcValueRsLo,w
  5199  0E25  00A5               	movwf	calc_rs_lo_avg@x
  5200  0E26  3193  232E  318D   	fcall	_calc_rs_lo_avg
  5201  0E29  0020               	movlb	0	; select bank0
  5202  0E2A  0826               	movf	?_calc_rs_lo_avg+1,w
  5203  0E2B  00D4               	movwf	_rsLoAvg+1
  5204  0E2C  0825               	movf	?_calc_rs_lo_avg,w
  5205  0E2D  00D3               	movwf	_rsLoAvg
  5206                           
  5207                           ;main.c: 55: voExpectMv=calc_expect_vout_adc_value(rsLoAvg);
  5208  0E2E  0854               	movf	_rsLoAvg+1,w
  5209  0E2F  00B3               	movwf	calc_expect_vout_adc_value@x+1
  5210  0E30  0853               	movf	_rsLoAvg,w
  5211  0E31  00B2               	movwf	calc_expect_vout_adc_value@x
  5212  0E32  3188  20B5  318D   	fcall	_calc_expect_vout_adc_value
  5213  0E35  0020               	movlb	0	; select bank0
  5214  0E36  0833               	movf	?_calc_expect_vout_adc_value+1,w
  5215  0E37  0021               	movlb	1	; select bank1
  5216  0E38  00C7               	movwf	(_voExpectMv+1)^(0+128)
  5217  0E39  0020               	movlb	0	; select bank0
  5218  0E3A  0832               	movf	?_calc_expect_vout_adc_value,w
  5219  0E3B  0021               	movlb	1	; select bank1
  5220  0E3C  00C6               	movwf	_voExpectMv^(0+128)
  5221                           
  5222                           ;main.c: 56: voExpectAdcValue=(voExpectMv<<1);
  5223  0E3D  3546               	lslf	_voExpectMv^(0+128),w
  5224  0E3E  0020               	movlb	0	; select bank0
  5225  0E3F  00D5               	movwf	_voExpectAdcValue
  5226  0E40  0021               	movlb	1	; select bank1
  5227  0E41  0D47               	rlf	(_voExpectMv+1)^(0+128),w
  5228  0E42  0020               	movlb	0	; select bank0
  5229  0E43  00D6               	movwf	_voExpectAdcValue+1
  5230                           
  5231                           ;main.c: 57: pid_pwm2_vout_run();
  5232  0E44  3195  251F  318D   	fcall	_pid_pwm2_vout_run
  5233  0E47                     l5170:	
  5234                           
  5235                           ;main.c: 59: };main.c: 61: if(Event & (1<<3)){
  5236  0E47  0020               	movlb	0	; select bank0
  5237  0E48  1DEB               	btfss	_Event,3	;volatile
  5238  0E49  2E50               	goto	l5174
  5239                           
  5240                           ;main.c: 62: Event &= ~(1<<3);
  5241  0E4A  30F7               	movlw	247
  5242  0E4B  0021               	movlb	1	; select bank1
  5243  0E4C  00D6               	movwf	??_main^(0+128)
  5244  0E4D  0856               	movf	??_main^(0+128),w
  5245  0E4E  0020               	movlb	0	; select bank0
  5246  0E4F  05EB               	andwf	_Event,f	;volatile
  5247  0E50                     l5174:	
  5248                           
  5249                           ;main.c: 104: };main.c: 106: if(Event & (1<<0)){
  5250  0E50  1C6B               	btfss	_Event,0	;volatile
  5251  0E51  2E81               	goto	l5184
  5252                           
  5253                           ;main.c: 107: Event &= ~ (1<<0);
  5254  0E52  30FE               	movlw	254
  5255  0E53  0021               	movlb	1	; select bank1
  5256  0E54  00D6               	movwf	??_main^(0+128)
  5257  0E55  0856               	movf	??_main^(0+128),w
  5258  0E56  0020               	movlb	0	; select bank0
  5259  0E57  05EB               	andwf	_Event,f	;volatile
  5260                           
  5261                           ;main.c: 108: if(eusartRxCount>0){
  5262  0E58  086A               	movf	_eusartRxCount,w	;volatile
  5263  0E59  1903               	btfsc	3,2
  5264  0E5A  2E7E               	goto	l5182
  5265                           
  5266                           ;main.c: 109: m_mem_cpy_len(modbusBuf,eusartRxBuffer,eusartRxCount);
  5267  0E5B  3020               	movlw	low _modbusBuf
  5268  0E5C  00F1               	movwf	m_mem_cpy_len@d
  5269  0E5D  3001               	movlw	high _modbusBuf
  5270  0E5E  00F2               	movwf	m_mem_cpy_len@d+1
  5271  0E5F  3040               	movlw	low _eusartRxBuffer
  5272  0E60  00F3               	movwf	m_mem_cpy_len@s
  5273  0E61  3001               	movlw	high _eusartRxBuffer
  5274  0E62  00F4               	movwf	m_mem_cpy_len@s+1
  5275  0E63  086A               	movf	_eusartRxCount,w	;volatile
  5276  0E64  0021               	movlb	1	; select bank1
  5277  0E65  00D6               	movwf	??_main^(0+128)
  5278  0E66  01D7               	clrf	(??_main^(0+128)+1)
  5279  0E67  0856               	movf	??_main^(0+128),w
  5280  0E68  00F5               	movwf	m_mem_cpy_len@len
  5281  0E69  0857               	movf	(??_main+1)^(0+128),w
  5282  0E6A  00F6               	movwf	m_mem_cpy_len@len+1
  5283  0E6B  319E  264C  318D   	fcall	_m_mem_cpy_len
  5284                           
  5285                           ;main.c: 110: modbus_response_process(modbusBuf,eusartRxCount);
  5286  0E6E  0020               	movlb	0	; select bank0
  5287  0E6F  086A               	movf	_eusartRxCount,w	;volatile
  5288  0E70  0021               	movlb	1	; select bank1
  5289  0E71  00D6               	movwf	??_main^(0+128)
  5290  0E72  01D7               	clrf	(??_main^(0+128)+1)
  5291  0E73  0856               	movf	??_main^(0+128),w
  5292  0E74  0020               	movlb	0	; select bank0
  5293  0E75  00B8               	movwf	modbus_response_process@rlen
  5294  0E76  0021               	movlb	1	; select bank1
  5295  0E77  0857               	movf	(??_main+1)^(0+128),w
  5296  0E78  0020               	movlb	0	; select bank0
  5297  0E79  00B9               	movwf	modbus_response_process@rlen+1
  5298  0E7A  3020               	movlw	(low (_modbusBuf| (0+256)))& (0+255)
  5299  0E7B  3192  2227  318D   	fcall	_modbus_response_process
  5300  0E7E                     l5182:	
  5301                           
  5302                           ;main.c: 112: };main.c: 114: uart_received_start();
  5303  0E7E  319C  24D6  318D   	fcall	_uart_received_start
  5304  0E81                     l5184:	
  5305                           
  5306                           ;main.c: 115: };main.c: 117: __nop();
  5307  0E81  0000               	nop
  5308  0E82  2D9E               	goto	l5140
  5309  0E83                     __end_of_main:	
  5310                           
  5311                           	psect	text1
  5312  1CD6                     __ptext1:	
  5313 ;; *************** function _uart_received_start *****************
  5314 ;; Defined at:
  5315 ;;		line 58 in file "src/api/my_uart.c"
  5316 ;; Parameters:    Size  Location     Type
  5317 ;;		None
  5318 ;; Auto vars:     Size  Location     Type
  5319 ;;		None
  5320 ;; Return value:  Size  Location     Type
  5321 ;;                  1    wreg      void 
  5322 ;; Registers used:
  5323 ;;		status,2
  5324 ;; Tracked objects:
  5325 ;;		On entry : 0/0
  5326 ;;		On exit  : 0/0
  5327 ;;		Unchanged: 0/0
  5328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5332 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5333 ;;Total ram usage:        0 bytes
  5334 ;; Hardware stack levels used:    1
  5335 ;; Hardware stack levels required when called:    1
  5336 ;; This function calls:
  5337 ;;		Nothing
  5338 ;; This function is called by:
  5339 ;;		_main
  5340 ;; This function uses a non-reentrant model
  5341 ;;
  5342                           
  5343                           
  5344                           ;psect for function _uart_received_start
  5345  1CD6                     _uart_received_start:	
  5346                           
  5347                           ;my_uart.c: 60: eusartRxCount=0;
  5348                           
  5349                           ;incstack = 0
  5350                           ; Regs used in _uart_received_start: [status,2]
  5351  1CD6  0020               	movlb	0	; select bank0
  5352  1CD7  01EA               	clrf	_eusartRxCount	;volatile
  5353                           
  5354                           ;my_uart.c: 69: eusartRxIdleTime_ms=0;
  5355  1CD8  01FC               	clrf	_eusartRxIdleTime_ms	;volatile
  5356  1CD9  0008               	return
  5357  1CDA                     __end_of_uart_received_start:	
  5358                           
  5359                           	psect	text2
  5360  15B0                     __ptext2:	
  5361 ;; *************** function _sys_data_init *****************
  5362 ;; Defined at:
  5363 ;;		line 104 in file "src/api/sysData.c"
  5364 ;; Parameters:    Size  Location     Type
  5365 ;;		None
  5366 ;; Auto vars:     Size  Location     Type
  5367 ;;  i               2   22[BANK0 ] unsigned int 
  5368 ;;  ret             2   20[BANK0 ] unsigned int 
  5369 ;; Return value:  Size  Location     Type
  5370 ;;                  2  728[None  ] unsigned int 
  5371 ;; Registers used:
  5372 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5373 ;; Tracked objects:
  5374 ;;		On entry : 0/0
  5375 ;;		On exit  : 0/0
  5376 ;;		Unchanged: 0/0
  5377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5379 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5380 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5381 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5382 ;;Total ram usage:       10 bytes
  5383 ;; Hardware stack levels used:    1
  5384 ;; Hardware stack levels required when called:    4
  5385 ;; This function calls:
  5386 ;;		___wmul
  5387 ;;		_crc_verify
  5388 ;;		_my_flash_system_read
  5389 ;;		_sys_data_save
  5390 ;; This function is called by:
  5391 ;;		_main
  5392 ;; This function uses a non-reentrant model
  5393 ;;
  5394                           
  5395                           
  5396                           ;psect for function _sys_data_init
  5397  15B0                     _sys_data_init:	
  5398                           
  5399                           ;sysData.c: 106: uint16_t ret,i;;sysData.c: 107: my_flash_system_read((uint8_t*)&sysData
      +                          ,sizeof(sysData_t));
  5400                           
  5401                           ;incstack = 0
  5402                           ; Regs used in _sys_data_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5403  15B0  305C               	movlw	92
  5404  15B1  00F1               	movwf	my_flash_system_read@buf
  5405  15B2  3023               	movlw	35
  5406  15B3  00F2               	movwf	my_flash_system_read@buf+1
  5407  15B4  3084               	movlw	132
  5408  15B5  00F3               	movwf	my_flash_system_read@len
  5409  15B6  3000               	movlw	0
  5410  15B7  00F4               	movwf	my_flash_system_read@len+1
  5411  15B8  3190  2091  3195   	fcall	_my_flash_system_read
  5412                           
  5413                           ;sysData.c: 108: ret=crc_verify((uint8_t*)&sysData,sizeof(sysData_t));
  5414  15BB  305C               	movlw	92
  5415  15BC  0020               	movlb	0	; select bank0
  5416  15BD  00A6               	movwf	crc_verify@message
  5417  15BE  3023               	movlw	35
  5418  15BF  00A7               	movwf	crc_verify@message+1
  5419  15C0  3084               	movlw	132
  5420  15C1  00A8               	movwf	crc_verify@n
  5421  15C2  3000               	movlw	0
  5422  15C3  00A9               	movwf	crc_verify@n+1
  5423  15C4  3190  2023  3195   	fcall	_crc_verify
  5424  15C7  0020               	movlb	0	; select bank0
  5425  15C8  00AE               	movwf	??_sys_data_init
  5426  15C9  01AF               	clrf	??_sys_data_init+1
  5427  15CA  082E               	movf	??_sys_data_init,w
  5428  15CB  00B4               	movwf	sys_data_init@ret
  5429  15CC  082F               	movf	??_sys_data_init+1,w
  5430  15CD  00B5               	movwf	sys_data_init@ret+1
  5431                           
  5432                           ;sysData.c: 109: if(!ret){
  5433  15CE  0834               	movf	sys_data_init@ret,w
  5434  15CF  0435               	iorwf	sys_data_init@ret+1,w
  5435  15D0  1D03               	btfss	3,2
  5436  15D1  0008               	return
  5437                           
  5438                           ;sysData.c: 110: sysData.pidSetFlg0=0x55;
  5439  15D2  305C               	movlw	92
  5440  15D3  0086               	movwf	6
  5441  15D4  3023               	movlw	35
  5442  15D5  0087               	movwf	7
  5443  15D6  3055               	movlw	85
  5444  15D7  3FC0               	movwi [0]fsr1
  5445                           
  5446                           ;sysData.c: 111: sysData.pidSetFlg1=0xaa;
  5447  15D8  305D               	movlw	93
  5448  15D9  0086               	movwf	6
  5449  15DA  3023               	movlw	35
  5450  15DB  0087               	movwf	7
  5451  15DC  30AA               	movlw	170
  5452  15DD  0081               	movwf	1
  5453                           
  5454                           ;sysData.c: 112: sysData.id=0x01;
  5455  15DE  305E               	movlw	94
  5456  15DF  0086               	movwf	6
  5457  15E0  3023               	movlw	35
  5458  15E1  0087               	movwf	7
  5459  15E2  3001               	movlw	1
  5460  15E3  0081               	movwf	1
  5461                           
  5462                           ;sysData.c: 113: for(i=0;i<30;i++){
  5463  15E4  01B6               	clrf	sys_data_init@i
  5464  15E5  01B7               	clrf	sys_data_init@i+1
  5465  15E6  3000               	movlw	0
  5466  15E7  0237               	subwf	sys_data_init@i+1,w
  5467  15E8  301E               	movlw	30
  5468  15E9  1903               	skipnz
  5469  15EA  0236               	subwf	sys_data_init@i,w
  5470  15EB  1803               	btfsc	3,0
  5471  15EC  2E3E               	goto	l5056
  5472  15ED                     l5050:	
  5473                           
  5474                           ;sysData.c: 115: sysData.calibRsAdc[i]=9400+i*720;
  5475  15ED  0837               	movf	sys_data_init@i+1,w
  5476  15EE  00F2               	movwf	___wmul@multiplier+1
  5477  15EF  0836               	movf	sys_data_init@i,w
  5478  15F0  00F1               	movwf	___wmul@multiplier
  5479  15F1  30D0               	movlw	208
  5480  15F2  00F3               	movwf	___wmul@multiplicand
  5481  15F3  3002               	movlw	2
  5482  15F4  00F4               	movwf	___wmul@multiplicand+1
  5483  15F5  319D  25DD  3195   	fcall	___wmul
  5484  15F8  0871               	movf	?___wmul,w
  5485  15F9  3EB8               	addlw	184
  5486  15FA  0020               	movlb	0	; select bank0
  5487  15FB  00AE               	movwf	??_sys_data_init
  5488  15FC  3024               	movlw	36
  5489  15FD  3D72               	addwfc	?___wmul+1,w
  5490  15FE  00AF               	movwf	??_sys_data_init+1
  5491  15FF  0837               	movf	sys_data_init@i+1,w
  5492  1600  00B1               	movwf	??_sys_data_init+3
  5493  1601  0836               	movf	sys_data_init@i,w
  5494  1602  00B0               	movwf	??_sys_data_init+2
  5495  1603  35B0               	lslf	??_sys_data_init+2,f
  5496  1604  0DB1               	rlf	??_sys_data_init+3,f
  5497  1605  3066               	movlw	102
  5498  1606  00B2               	movwf	??_sys_data_init+4
  5499  1607  3023               	movlw	35
  5500  1608  00B3               	movwf	??_sys_data_init+5
  5501  1609  0830               	movf	??_sys_data_init+2,w
  5502  160A  0732               	addwf	??_sys_data_init+4,w
  5503  160B  0086               	movwf	6
  5504  160C  0831               	movf	??_sys_data_init+3,w
  5505  160D  3D33               	addwfc	??_sys_data_init+5,w
  5506  160E  0087               	movwf	7
  5507  160F  082E               	movf	??_sys_data_init,w
  5508  1610  3FC0               	movwi [0]fsr1
  5509  1611  082F               	movf	??_sys_data_init+1,w
  5510  1612  3FC1               	movwi [1]fsr1
  5511                           
  5512                           ;sysData.c: 116: sysData.calibVoMV[i]=i*333;
  5513  1613  0837               	movf	sys_data_init@i+1,w
  5514  1614  00F2               	movwf	___wmul@multiplier+1
  5515  1615  0836               	movf	sys_data_init@i,w
  5516  1616  00F1               	movwf	___wmul@multiplier
  5517  1617  304D               	movlw	77
  5518  1618  00F3               	movwf	___wmul@multiplicand
  5519  1619  3001               	movlw	1
  5520  161A  00F4               	movwf	___wmul@multiplicand+1
  5521  161B  319D  25DD  3195   	fcall	___wmul
  5522  161E  0020               	movlb	0	; select bank0
  5523  161F  0837               	movf	sys_data_init@i+1,w
  5524  1620  00AF               	movwf	??_sys_data_init+1
  5525  1621  0836               	movf	sys_data_init@i,w
  5526  1622  00AE               	movwf	??_sys_data_init
  5527  1623  35AE               	lslf	??_sys_data_init,f
  5528  1624  0DAF               	rlf	??_sys_data_init+1,f
  5529  1625  30A2               	movlw	162
  5530  1626  00B0               	movwf	??_sys_data_init+2
  5531  1627  3023               	movlw	35
  5532  1628  00B1               	movwf	??_sys_data_init+3
  5533  1629  082E               	movf	??_sys_data_init,w
  5534  162A  0730               	addwf	??_sys_data_init+2,w
  5535  162B  0086               	movwf	6
  5536  162C  082F               	movf	??_sys_data_init+1,w
  5537  162D  3D31               	addwfc	??_sys_data_init+3,w
  5538  162E  0087               	movwf	7
  5539  162F  0871               	movf	?___wmul,w
  5540  1630  3FC0               	movwi [0]fsr1
  5541  1631  0872               	movf	?___wmul+1,w
  5542  1632  3FC1               	movwi [1]fsr1
  5543  1633  3001               	movlw	1
  5544  1634  07B6               	addwf	sys_data_init@i,f
  5545  1635  3000               	movlw	0
  5546  1636  3DB7               	addwfc	sys_data_init@i+1,f
  5547  1637  3000               	movlw	0
  5548  1638  0237               	subwf	sys_data_init@i+1,w
  5549  1639  301E               	movlw	30
  5550  163A  1903               	skipnz
  5551  163B  0236               	subwf	sys_data_init@i,w
  5552  163C  1C03               	skipc
  5553  163D  2DED               	goto	l5050
  5554  163E                     l5056:	
  5555                           
  5556                           ;sysData.c: 117: };sysData.c: 119: sysData.pidKp=3200;
  5557  163E  3080               	movlw	128
  5558  163F  00AE               	movwf	??_sys_data_init
  5559  1640  300C               	movlw	12
  5560  1641  00AF               	movwf	??_sys_data_init+1
  5561  1642  305C               	movlw	92
  5562  1643  0086               	movwf	6
  5563  1644  3023               	movlw	35
  5564  1645  0087               	movwf	7
  5565  1646  3144               	addfsr 1,4
  5566  1647  082E               	movf	??_sys_data_init,w
  5567  1648  3FC0               	movwi [0]fsr1
  5568  1649  082F               	movf	??_sys_data_init+1,w
  5569  164A  3FC1               	movwi [1]fsr1
  5570                           
  5571                           ;sysData.c: 120: sysData.pidTi=20;
  5572  164B  3014               	movlw	20
  5573  164C  00AE               	movwf	??_sys_data_init
  5574  164D  3000               	movlw	0
  5575  164E  00AF               	movwf	??_sys_data_init+1
  5576  164F  305C               	movlw	92
  5577  1650  0086               	movwf	6
  5578  1651  3023               	movlw	35
  5579  1652  0087               	movwf	7
  5580  1653  3146               	addfsr 1,6
  5581  1654  082E               	movf	??_sys_data_init,w
  5582  1655  3FC0               	movwi [0]fsr1
  5583  1656  082F               	movf	??_sys_data_init+1,w
  5584  1657  3FC1               	movwi [1]fsr1
  5585                           
  5586                           ;sysData.c: 121: sysData.pidTd=5;
  5587  1658  3005               	movlw	5
  5588  1659  00AE               	movwf	??_sys_data_init
  5589  165A  3000               	movlw	0
  5590  165B  00AF               	movwf	??_sys_data_init+1
  5591  165C  305C               	movlw	92
  5592  165D  0086               	movwf	6
  5593  165E  3023               	movlw	35
  5594  165F  0087               	movwf	7
  5595  1660  3148               	addfsr 1,8
  5596  1661  082E               	movf	??_sys_data_init,w
  5597  1662  3FC0               	movwi [0]fsr1
  5598  1663  082F               	movf	??_sys_data_init+1,w
  5599  1664  3FC1               	movwi [1]fsr1
  5600                           
  5601                           ;sysData.c: 123: sys_data_save();
  5602  1665  3190  205A         	fcall	_sys_data_save
  5603  1667  0008               	return
  5604  1668                     __end_of_sys_data_init:	
  5605                           ;sysData.c: 125: };sysData.c: 126: return ret;;	Return value of _sys_data_init is never 
      +                          used
  5606                           
  5607                           
  5608                           	psect	text3
  5609  1091                     __ptext3:	
  5610 ;; *************** function _my_flash_system_read *****************
  5611 ;; Defined at:
  5612 ;;		line 23 in file "src/api/sysData.c"
  5613 ;; Parameters:    Size  Location     Type
  5614 ;;  buf             2    1[COMMON] PTR unsigned char 
  5615 ;;		 -> sysData(132), 
  5616 ;;  len             2    3[COMMON] unsigned int 
  5617 ;; Auto vars:     Size  Location     Type
  5618 ;;  i               2   10[COMMON] unsigned int 
  5619 ;;  flashAddr       2    8[COMMON] unsigned int 
  5620 ;;  GIEBitValue     1    7[COMMON] unsigned char 
  5621 ;; Return value:  Size  Location     Type
  5622 ;;                  1    wreg      void 
  5623 ;; Registers used:
  5624 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5625 ;; Tracked objects:
  5626 ;;		On entry : 0/0
  5627 ;;		On exit  : 0/0
  5628 ;;		Unchanged: 0/0
  5629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5630 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5631 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5632 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5633 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5634 ;;Total ram usage:       11 bytes
  5635 ;; Hardware stack levels used:    1
  5636 ;; Hardware stack levels required when called:    1
  5637 ;; This function calls:
  5638 ;;		Nothing
  5639 ;; This function is called by:
  5640 ;;		_sys_data_init
  5641 ;; This function uses a non-reentrant model
  5642 ;;
  5643                           
  5644                           
  5645                           ;psect for function _my_flash_system_read
  5646  1091                     _my_flash_system_read:	
  5647                           
  5648                           ;sysData.c: 25: uint16_t flashAddr=0x1f00;
  5649                           
  5650                           ;incstack = 0
  5651                           ; Regs used in _my_flash_system_read: [wreg+fsr1l+fsr1h+status,2+status,0]
  5652  1091  3000               	movlw	0
  5653  1092  00F8               	movwf	my_flash_system_read@flashAddr
  5654  1093  301F               	movlw	31
  5655  1094  00F9               	movwf	my_flash_system_read@flashAddr+1
  5656                           
  5657                           ;sysData.c: 26: uint16_t i;;sysData.c: 28: uint8_t GIEBitValue = INTCONbits.GIE;
  5658  1095  3000               	movlw	0
  5659  1096  1B8B               	btfsc	11,7	;volatile
  5660  1097  3001               	movlw	1
  5661  1098  00F7               	movwf	my_flash_system_read@GIEBitValue
  5662                           
  5663                           ;sysData.c: 30: INTCONbits.GIE = 0;
  5664  1099  138B               	bcf	11,7	;volatile
  5665                           
  5666                           ;sysData.c: 32: for(i=0;i<len;i++){
  5667  109A  01FA               	clrf	my_flash_system_read@i
  5668  109B  01FB               	clrf	my_flash_system_read@i+1
  5669  109C                     l3678:	
  5670  109C  0874               	movf	my_flash_system_read@len+1,w
  5671  109D  027B               	subwf	my_flash_system_read@i+1,w
  5672  109E  1D03               	skipz
  5673  109F  28A2               	goto	u2365
  5674  10A0  0873               	movf	my_flash_system_read@len,w
  5675  10A1  027A               	subwf	my_flash_system_read@i,w
  5676  10A2                     u2365:	
  5677  10A2  1803               	btfsc	3,0
  5678  10A3  28C3               	goto	l3680
  5679                           
  5680                           ;sysData.c: 34: PMADRL = (flashAddr & 0x00FF);
  5681  10A4  0878               	movf	my_flash_system_read@flashAddr,w
  5682  10A5  0023               	movlb	3	; select bank3
  5683  10A6  0091               	movwf	17	;volatile
  5684                           
  5685                           ;sysData.c: 35: PMADRH = ((flashAddr & 0xFF00) >> 8);
  5686  10A7  0879               	movf	my_flash_system_read@flashAddr+1,w
  5687  10A8  0092               	movwf	18	;volatile
  5688                           
  5689                           ;sysData.c: 37: PMCON1bits.CFGS = 0;
  5690  10A9  1315               	bcf	21,6	;volatile
  5691                           
  5692                           ;sysData.c: 38: PMCON1bits.RD = 1;
  5693  10AA  1415               	bsf	21,0	;volatile
  5694                           
  5695                           ;sysData.c: 39: __nop();
  5696  10AB  0000               	nop
  5697                           
  5698                           ;sysData.c: 40: __nop();
  5699  10AC  0000               	nop
  5700                           
  5701                           ;sysData.c: 41: buf[i]=PMDATL;
  5702  10AD  087A               	movf	my_flash_system_read@i,w
  5703  10AE  0771               	addwf	my_flash_system_read@buf,w
  5704  10AF  00F5               	movwf	??_my_flash_system_read
  5705  10B0  087B               	movf	my_flash_system_read@i+1,w
  5706  10B1  3D72               	addwfc	my_flash_system_read@buf+1,w
  5707  10B2  00F6               	movwf	??_my_flash_system_read+1
  5708  10B3  0875               	movf	??_my_flash_system_read,w
  5709  10B4  0086               	movwf	6
  5710  10B5  0876               	movf	??_my_flash_system_read+1,w
  5711  10B6  0087               	movwf	7
  5712  10B7  0023               	movlb	3	; select bank3
  5713  10B8  0813               	movf	19,w	;volatile
  5714  10B9  0081               	movwf	1
  5715                           
  5716                           ;sysData.c: 42: flashAddr++;
  5717  10BA  3001               	movlw	1
  5718  10BB  07F8               	addwf	my_flash_system_read@flashAddr,f
  5719  10BC  3000               	movlw	0
  5720  10BD  3DF9               	addwfc	my_flash_system_read@flashAddr+1,f
  5721  10BE  3001               	movlw	1
  5722  10BF  07FA               	addwf	my_flash_system_read@i,f
  5723  10C0  3000               	movlw	0
  5724  10C1  3DFB               	addwfc	my_flash_system_read@i+1,f
  5725  10C2  289C               	goto	l3678
  5726  10C3                     l3680:	
  5727                           
  5728                           ;sysData.c: 43: };sysData.c: 44: INTCONbits.GIE = GIEBitValue;
  5729  10C3  0C77               	rrf	my_flash_system_read@GIEBitValue,w
  5730  10C4  1C03               	skipc
  5731  10C5  138B               	bcf	11,7	;volatile
  5732  10C6  1803               	skipnc
  5733  10C7  178B               	bsf	11,7	;volatile
  5734  10C8  0008               	return
  5735  10C9                     __end_of_my_flash_system_read:	
  5736                           
  5737                           	psect	text4
  5738  1DDD                     __ptext4:	
  5739 ;; *************** function ___wmul *****************
  5740 ;; Defined at:
  5741 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  5742 ;; Parameters:    Size  Location     Type
  5743 ;;  multiplier      2    1[COMMON] unsigned int 
  5744 ;;  multiplicand    2    3[COMMON] unsigned int 
  5745 ;; Auto vars:     Size  Location     Type
  5746 ;;  product         2    5[COMMON] unsigned int 
  5747 ;; Return value:  Size  Location     Type
  5748 ;;                  2    1[COMMON] unsigned int 
  5749 ;; Registers used:
  5750 ;;		wreg, status,2, status,0
  5751 ;; Tracked objects:
  5752 ;;		On entry : 0/0
  5753 ;;		On exit  : 0/0
  5754 ;;		Unchanged: 0/0
  5755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5756 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5757 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5759 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5760 ;;Total ram usage:        6 bytes
  5761 ;; Hardware stack levels used:    1
  5762 ;; Hardware stack levels required when called:    1
  5763 ;; This function calls:
  5764 ;;		Nothing
  5765 ;; This function is called by:
  5766 ;;		_sys_data_init
  5767 ;; This function uses a non-reentrant model
  5768 ;;
  5769                           
  5770                           
  5771                           ;psect for function ___wmul
  5772  1DDD                     ___wmul:	
  5773                           
  5774                           ;incstack = 0
  5775                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5776  1DDD  01F5               	clrf	___wmul@product
  5777  1DDE  01F6               	clrf	___wmul@product+1
  5778  1DDF                     l3866:	
  5779  1DDF  1C71               	btfss	___wmul@multiplier,0
  5780  1DE0  2DE5               	goto	l1069
  5781  1DE1  0873               	movf	___wmul@multiplicand,w
  5782  1DE2  07F5               	addwf	___wmul@product,f
  5783  1DE3  0874               	movf	___wmul@multiplicand+1,w
  5784  1DE4  3DF6               	addwfc	___wmul@product+1,f
  5785  1DE5                     l1069:	
  5786  1DE5  3001               	movlw	1
  5787  1DE6                     u2665:	
  5788  1DE6  35F3               	lslf	___wmul@multiplicand,f
  5789  1DE7  0DF4               	rlf	___wmul@multiplicand+1,f
  5790  1DE8  0B89               	decfsz	9,f
  5791  1DE9  2DE6               	goto	u2665
  5792  1DEA  3001               	movlw	1
  5793  1DEB                     u2675:	
  5794  1DEB  36F2               	lsrf	___wmul@multiplier+1,f
  5795  1DEC  0CF1               	rrf	___wmul@multiplier,f
  5796  1DED  0B89               	decfsz	9,f
  5797  1DEE  2DEB               	goto	u2675
  5798  1DEF  0871               	movf	___wmul@multiplier,w
  5799  1DF0  0472               	iorwf	___wmul@multiplier+1,w
  5800  1DF1  1D03               	btfss	3,2
  5801  1DF2  2DDF               	goto	l3866
  5802  1DF3  0876               	movf	___wmul@product+1,w
  5803  1DF4  00F2               	movwf	?___wmul+1
  5804  1DF5  0875               	movf	___wmul@product,w
  5805  1DF6  00F1               	movwf	?___wmul
  5806  1DF7  0008               	return
  5807  1DF8                     __end_of___wmul:	
  5808                           
  5809                           	psect	text5
  5810  151F                     __ptext5:	
  5811 ;; *************** function _pid_pwm2_vout_run *****************
  5812 ;; Defined at:
  5813 ;;		line 363 in file "src/api/sample.c"
  5814 ;; Parameters:    Size  Location     Type
  5815 ;;		None
  5816 ;; Auto vars:     Size  Location     Type
  5817 ;;  t16             2    4[BANK0 ] int 
  5818 ;;  __ei            2    2[BANK0 ] int 
  5819 ;; Return value:  Size  Location     Type
  5820 ;;                  1    wreg      void 
  5821 ;; Registers used:
  5822 ;;		wreg, status,2, status,0, pclath, cstack
  5823 ;; Tracked objects:
  5824 ;;		On entry : 0/0
  5825 ;;		On exit  : 0/0
  5826 ;;		Unchanged: 0/0
  5827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5829 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5830 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5831 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5832 ;;Total ram usage:        6 bytes
  5833 ;; Hardware stack levels used:    1
  5834 ;; Hardware stack levels required when called:    3
  5835 ;; This function calls:
  5836 ;;		___awdiv
  5837 ;;		___lwdiv
  5838 ;;		_set_vout_pwm2_duty
  5839 ;; This function is called by:
  5840 ;;		_main
  5841 ;; This function uses a non-reentrant model
  5842 ;;
  5843                           
  5844                           
  5845                           ;psect for function _pid_pwm2_vout_run
  5846  151F                     _pid_pwm2_vout_run:	
  5847                           
  5848                           ;sample.c: 365: int16_t t16,__ei;;sample.c: 366: t16=voExpectAdcValue-rtAdcValueVoFb;
  5849                           
  5850                           ;incstack = 0
  5851                           ; Regs used in _pid_pwm2_vout_run: [wreg+status,2+status,0+pclath+cstack]
  5852  151F  0020               	movlb	0	; select bank0
  5853  1520  0959               	comf	_rtAdcValueVoFb,w
  5854  1521  00A0               	movwf	??_pid_pwm2_vout_run
  5855  1522  095A               	comf	_rtAdcValueVoFb+1,w
  5856  1523  00A1               	movwf	??_pid_pwm2_vout_run+1
  5857  1524  0AA0               	incf	??_pid_pwm2_vout_run,f
  5858  1525  1903               	skipnz
  5859  1526  0AA1               	incf	??_pid_pwm2_vout_run+1,f
  5860  1527  0855               	movf	_voExpectAdcValue,w
  5861  1528  0720               	addwf	??_pid_pwm2_vout_run,w
  5862  1529  00A4               	movwf	pid_pwm2_vout_run@t16
  5863  152A  0856               	movf	_voExpectAdcValue+1,w
  5864  152B  3D21               	addwfc	??_pid_pwm2_vout_run+1,w
  5865  152C  00A5               	movwf	pid_pwm2_vout_run@t16+1
  5866                           
  5867                           ;sample.c: 367: __ei=t16/150;
  5868  152D  3096               	movlw	150
  5869  152E  00F1               	movwf	___awdiv@divisor
  5870  152F  3000               	movlw	0
  5871  1530  00F2               	movwf	___awdiv@divisor+1
  5872  1531  0825               	movf	pid_pwm2_vout_run@t16+1,w
  5873  1532  00F4               	movwf	___awdiv@dividend+1
  5874  1533  0824               	movf	pid_pwm2_vout_run@t16,w
  5875  1534  00F3               	movwf	___awdiv@dividend
  5876  1535  3191  2183  3195   	fcall	___awdiv
  5877  1538  0872               	movf	?___awdiv+1,w
  5878  1539  0020               	movlb	0	; select bank0
  5879  153A  00A3               	movwf	pid_pwm2_vout_run@__ei+1
  5880  153B  0871               	movf	?___awdiv,w
  5881  153C  00A2               	movwf	pid_pwm2_vout_run@__ei
  5882                           
  5883                           ;sample.c: 368: if(__ei==0){
  5884  153D  0822               	movf	pid_pwm2_vout_run@__ei,w
  5885  153E  0423               	iorwf	pid_pwm2_vout_run@__ei+1,w
  5886  153F  1D03               	btfss	3,2
  5887  1540  2D62               	goto	l4970
  5888                           
  5889                           ;sample.c: 369: if(t16>16)__ei=1;
  5890  1541  0825               	movf	pid_pwm2_vout_run@t16+1,w
  5891  1542  3A80               	xorlw	128
  5892  1543  00A0               	movwf	??_pid_pwm2_vout_run
  5893  1544  3080               	movlw	128
  5894  1545  0220               	subwf	??_pid_pwm2_vout_run,w
  5895  1546  1D03               	skipz
  5896  1547  2D4A               	goto	u4385
  5897  1548  3011               	movlw	17
  5898  1549  0224               	subwf	pid_pwm2_vout_run@t16,w
  5899  154A                     u4385:	
  5900  154A  1C03               	skipc
  5901  154B  2D51               	goto	l645
  5902  154C  3001               	movlw	1
  5903  154D  0020               	movlb	0	; select bank0
  5904  154E  00A2               	movwf	pid_pwm2_vout_run@__ei
  5905  154F  3000               	movlw	0
  5906  1550  00A3               	movwf	pid_pwm2_vout_run@__ei+1
  5907  1551                     l645:	
  5908                           
  5909                           ;sample.c: 370: if(t16<-16)__ei=-1;
  5910  1551  0020               	movlb	0	; select bank0
  5911  1552  0825               	movf	pid_pwm2_vout_run@t16+1,w
  5912  1553  3A80               	xorlw	128
  5913  1554  00A0               	movwf	??_pid_pwm2_vout_run
  5914  1555  307F               	movlw	127
  5915  1556  0220               	subwf	??_pid_pwm2_vout_run,w
  5916  1557  1D03               	skipz
  5917  1558  2D5B               	goto	u4395
  5918  1559  30F0               	movlw	240
  5919  155A  0224               	subwf	pid_pwm2_vout_run@t16,w
  5920  155B                     u4395:	
  5921  155B  1803               	skipnc
  5922  155C  2D62               	goto	l4970
  5923  155D  30FF               	movlw	255
  5924  155E  0020               	movlb	0	; select bank0
  5925  155F  00A2               	movwf	pid_pwm2_vout_run@__ei
  5926  1560  30FF               	movlw	255
  5927  1561  00A3               	movwf	pid_pwm2_vout_run@__ei+1
  5928  1562                     l4970:	
  5929                           
  5930                           ;sample.c: 371: };sample.c: 373: pwm2Ei=pwm2Ei+__ei;
  5931  1562  0020               	movlb	0	; select bank0
  5932  1563  0822               	movf	pid_pwm2_vout_run@__ei,w
  5933  1564  0021               	movlb	1	; select bank1
  5934  1565  0744               	addwf	_pwm2Ei^(0+128),w
  5935  1566  00C4               	movwf	_pwm2Ei^(0+128)
  5936  1567  0020               	movlb	0	; select bank0
  5937  1568  0823               	movf	pid_pwm2_vout_run@__ei+1,w
  5938  1569  0021               	movlb	1	; select bank1
  5939  156A  3D45               	addwfc	(_pwm2Ei+1)^(0+128),w
  5940  156B  00C5               	movwf	(_pwm2Ei+1)^(0+128)
  5941                           
  5942                           ;sample.c: 377: t16=voExpectAdcValue/10;
  5943  156C  300A               	movlw	10
  5944  156D  00F1               	movwf	___lwdiv@divisor
  5945  156E  3000               	movlw	0
  5946  156F  00F2               	movwf	___lwdiv@divisor+1
  5947  1570  0020               	movlb	0	; select bank0
  5948  1571  0856               	movf	_voExpectAdcValue+1,w
  5949  1572  00F4               	movwf	___lwdiv@dividend+1
  5950  1573  0855               	movf	_voExpectAdcValue,w
  5951  1574  00F3               	movwf	___lwdiv@dividend
  5952  1575  319E  26CC  3195   	fcall	___lwdiv
  5953  1578  0872               	movf	?___lwdiv+1,w
  5954  1579  0020               	movlb	0	; select bank0
  5955  157A  00A5               	movwf	pid_pwm2_vout_run@t16+1
  5956  157B  0871               	movf	?___lwdiv,w
  5957  157C  00A4               	movwf	pid_pwm2_vout_run@t16
  5958                           
  5959                           ;sample.c: 379: t16=t16+pwm2Ei;
  5960  157D  0021               	movlb	1	; select bank1
  5961  157E  0844               	movf	_pwm2Ei^(0+128),w
  5962  157F  0020               	movlb	0	; select bank0
  5963  1580  0724               	addwf	pid_pwm2_vout_run@t16,w
  5964  1581  00A4               	movwf	pid_pwm2_vout_run@t16
  5965  1582  0021               	movlb	1	; select bank1
  5966  1583  0845               	movf	(_pwm2Ei+1)^(0+128),w
  5967  1584  0020               	movlb	0	; select bank0
  5968  1585  3D25               	addwfc	pid_pwm2_vout_run@t16+1,w
  5969  1586  00A5               	movwf	pid_pwm2_vout_run@t16+1
  5970                           
  5971                           ;sample.c: 380: if(t16>1580)t16=1580;
  5972  1587  0825               	movf	pid_pwm2_vout_run@t16+1,w
  5973  1588  3A80               	xorlw	128
  5974  1589  00A0               	movwf	??_pid_pwm2_vout_run
  5975  158A  3086               	movlw	134
  5976  158B  0220               	subwf	??_pid_pwm2_vout_run,w
  5977  158C  1D03               	skipz
  5978  158D  2D90               	goto	u4405
  5979  158E  302D               	movlw	45
  5980  158F  0224               	subwf	pid_pwm2_vout_run@t16,w
  5981  1590                     u4405:	
  5982  1590  1C03               	skipc
  5983  1591  2D97               	goto	l647
  5984  1592  302C               	movlw	44
  5985  1593  0020               	movlb	0	; select bank0
  5986  1594  00A4               	movwf	pid_pwm2_vout_run@t16
  5987  1595  3006               	movlw	6
  5988  1596  00A5               	movwf	pid_pwm2_vout_run@t16+1
  5989  1597                     l647:	
  5990                           
  5991                           ;sample.c: 381: if(t16<5)t16=5;
  5992  1597  0020               	movlb	0	; select bank0
  5993  1598  0825               	movf	pid_pwm2_vout_run@t16+1,w
  5994  1599  3A80               	xorlw	128
  5995  159A  00A0               	movwf	??_pid_pwm2_vout_run
  5996  159B  3080               	movlw	128
  5997  159C  0220               	subwf	??_pid_pwm2_vout_run,w
  5998  159D  1D03               	skipz
  5999  159E  2DA1               	goto	u4415
  6000  159F  3005               	movlw	5
  6001  15A0  0224               	subwf	pid_pwm2_vout_run@t16,w
  6002  15A1                     u4415:	
  6003  15A1  1803               	skipnc
  6004  15A2  2DA8               	goto	l4982
  6005  15A3  3005               	movlw	5
  6006  15A4  0020               	movlb	0	; select bank0
  6007  15A5  00A4               	movwf	pid_pwm2_vout_run@t16
  6008  15A6  3000               	movlw	0
  6009  15A7  00A5               	movwf	pid_pwm2_vout_run@t16+1
  6010  15A8                     l4982:	
  6011                           
  6012                           ;sample.c: 382: set_vout_pwm2_duty((uint16_t)t16);
  6013  15A8  0020               	movlb	0	; select bank0
  6014  15A9  0825               	movf	pid_pwm2_vout_run@t16+1,w
  6015  15AA  00F8               	movwf	set_vout_pwm2_duty@duty+1
  6016  15AB  0824               	movf	pid_pwm2_vout_run@t16,w
  6017  15AC  00F7               	movwf	set_vout_pwm2_duty@duty
  6018  15AD  319E  2630         	fcall	_set_vout_pwm2_duty
  6019  15AF  0008               	return
  6020  15B0                     __end_of_pid_pwm2_vout_run:	
  6021                           
  6022                           	psect	text6
  6023  1E30                     __ptext6:	
  6024 ;; *************** function _set_vout_pwm2_duty *****************
  6025 ;; Defined at:
  6026 ;;		line 111 in file "src/api/sample.c"
  6027 ;; Parameters:    Size  Location     Type
  6028 ;;  duty            2    7[COMMON] unsigned int 
  6029 ;; Auto vars:     Size  Location     Type
  6030 ;;  t16             2    9[COMMON] unsigned int 
  6031 ;; Return value:  Size  Location     Type
  6032 ;;                  1    wreg      void 
  6033 ;; Registers used:
  6034 ;;		wreg, status,2, pclath, cstack
  6035 ;; Tracked objects:
  6036 ;;		On entry : 0/0
  6037 ;;		On exit  : 0/0
  6038 ;;		Unchanged: 0/0
  6039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6040 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6041 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6043 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6044 ;;Total ram usage:        4 bytes
  6045 ;; Hardware stack levels used:    1
  6046 ;; Hardware stack levels required when called:    2
  6047 ;; This function calls:
  6048 ;;		_get_vout_pwm2_duty
  6049 ;; This function is called by:
  6050 ;;		_pid_pwm2_vout_run
  6051 ;; This function uses a non-reentrant model
  6052 ;;
  6053                           
  6054                           
  6055                           ;psect for function _set_vout_pwm2_duty
  6056  1E30                     _set_vout_pwm2_duty:	
  6057                           
  6058                           ;sample.c: 114: uint16_t t16;;sample.c: 115: pwm2DutyForVout=duty;
  6059                           
  6060                           ;incstack = 0
  6061                           ; Regs used in _set_vout_pwm2_duty: [wreg+status,2+pclath+cstack]
  6062  1E30  0878               	movf	set_vout_pwm2_duty@duty+1,w
  6063  1E31  0021               	movlb	1	; select bank1
  6064  1E32  00D5               	movwf	(_pwm2DutyForVout+1)^(0+128)
  6065  1E33  0877               	movf	set_vout_pwm2_duty@duty,w
  6066  1E34  00D4               	movwf	_pwm2DutyForVout^(0+128)
  6067                           
  6068                           ;sample.c: 116: t16=get_vout_pwm2_duty();
  6069  1E35  319D  25A9  319E   	fcall	_get_vout_pwm2_duty
  6070  1E38  0872               	movf	?_get_vout_pwm2_duty+1,w
  6071  1E39  00FA               	movwf	set_vout_pwm2_duty@t16+1
  6072  1E3A  0871               	movf	?_get_vout_pwm2_duty,w
  6073  1E3B  00F9               	movwf	set_vout_pwm2_duty@t16
  6074                           
  6075                           ;sample.c: 117: if(t16==duty)return;
  6076  1E3C  0878               	movf	set_vout_pwm2_duty@duty+1,w
  6077  1E3D  067A               	xorwf	set_vout_pwm2_duty@t16+1,w
  6078  1E3E  1D03               	skipz
  6079  1E3F  2E42               	goto	u2325
  6080  1E40  0877               	movf	set_vout_pwm2_duty@duty,w
  6081  1E41  0679               	xorwf	set_vout_pwm2_duty@t16,w
  6082  1E42                     u2325:	
  6083  1E42  1903               	btfsc	3,2
  6084  1E43  0008               	return
  6085                           
  6086                           ;sample.c: 121: PWM2CONbits.EN = 0;
  6087  1E44  003B               	movlb	27	; select bank27
  6088  1E45  13AB               	bcf	43,7	;volatile
  6089                           
  6090                           ;sample.c: 122: PWM2DCL= (uint8_t)(duty&0xff);
  6091  1E46  0877               	movf	set_vout_pwm2_duty@duty,w
  6092  1E47  00A3               	movwf	35	;volatile
  6093                           
  6094                           ;sample.c: 123: PWM2DCH=(uint8_t)(duty>>8);
  6095  1E48  0878               	movf	set_vout_pwm2_duty@duty+1,w
  6096  1E49  00A4               	movwf	36	;volatile
  6097                           
  6098                           ;sample.c: 124: PWM2CONbits.EN = 1;
  6099  1E4A  17AB               	bsf	43,7	;volatile
  6100  1E4B  0008               	return
  6101  1E4C                     __end_of_set_vout_pwm2_duty:	
  6102                           
  6103                           	psect	text7
  6104  1DA9                     __ptext7:	
  6105 ;; *************** function _get_vout_pwm2_duty *****************
  6106 ;; Defined at:
  6107 ;;		line 102 in file "src/api/sample.c"
  6108 ;; Parameters:    Size  Location     Type
  6109 ;;		None
  6110 ;; Auto vars:     Size  Location     Type
  6111 ;;  t16             2    5[COMMON] unsigned int 
  6112 ;; Return value:  Size  Location     Type
  6113 ;;                  2    1[COMMON] unsigned int 
  6114 ;; Registers used:
  6115 ;;		wreg
  6116 ;; Tracked objects:
  6117 ;;		On entry : 0/0
  6118 ;;		On exit  : 0/0
  6119 ;;		Unchanged: 0/0
  6120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6121 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6122 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6123 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6124 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6125 ;;Total ram usage:        6 bytes
  6126 ;; Hardware stack levels used:    1
  6127 ;; Hardware stack levels required when called:    1
  6128 ;; This function calls:
  6129 ;;		Nothing
  6130 ;; This function is called by:
  6131 ;;		_set_vout_pwm2_duty
  6132 ;; This function uses a non-reentrant model
  6133 ;;
  6134                           
  6135                           
  6136                           ;psect for function _get_vout_pwm2_duty
  6137  1DA9                     _get_vout_pwm2_duty:	
  6138                           
  6139                           ;sample.c: 105: uint16_t t16=PWM2DCH;
  6140                           
  6141                           ;incstack = 0
  6142                           ; Regs used in _get_vout_pwm2_duty: [wreg]
  6143  1DA9  003B               	movlb	27	; select bank27
  6144  1DAA  0824               	movf	36,w	;volatile
  6145  1DAB  00F3               	movwf	??_get_vout_pwm2_duty
  6146  1DAC  01F4               	clrf	??_get_vout_pwm2_duty+1
  6147  1DAD  0873               	movf	??_get_vout_pwm2_duty,w
  6148  1DAE  00F5               	movwf	get_vout_pwm2_duty@t16
  6149  1DAF  0874               	movf	??_get_vout_pwm2_duty+1,w
  6150  1DB0  00F6               	movwf	get_vout_pwm2_duty@t16+1
  6151                           
  6152                           ;sample.c: 106: t16<<=8;
  6153  1DB1  3008               	movlw	8
  6154  1DB2                     u2245:	
  6155  1DB2  35F5               	lslf	get_vout_pwm2_duty@t16,f
  6156  1DB3  0DF6               	rlf	get_vout_pwm2_duty@t16+1,f
  6157  1DB4  0B89               	decfsz	9,f
  6158  1DB5  2DB2               	goto	u2245
  6159                           
  6160                           ;sample.c: 107: t16|=PWM2DCL;
  6161  1DB6  0823               	movf	35,w	;volatile
  6162  1DB7  00F3               	movwf	??_get_vout_pwm2_duty
  6163  1DB8  01F4               	clrf	??_get_vout_pwm2_duty+1
  6164  1DB9  0873               	movf	??_get_vout_pwm2_duty,w
  6165  1DBA  04F5               	iorwf	get_vout_pwm2_duty@t16,f
  6166  1DBB  0874               	movf	??_get_vout_pwm2_duty+1,w
  6167  1DBC  04F6               	iorwf	get_vout_pwm2_duty@t16+1,f
  6168                           
  6169                           ;sample.c: 108: return t16;
  6170  1DBD  0876               	movf	get_vout_pwm2_duty@t16+1,w
  6171  1DBE  00F2               	movwf	?_get_vout_pwm2_duty+1
  6172  1DBF  0875               	movf	get_vout_pwm2_duty@t16,w
  6173  1DC0  00F1               	movwf	?_get_vout_pwm2_duty
  6174  1DC1  0008               	return
  6175  1DC2                     __end_of_get_vout_pwm2_duty:	
  6176                           
  6177                           	psect	text8
  6178  1ECC                     __ptext8:	
  6179 ;; *************** function ___lwdiv *****************
  6180 ;; Defined at:
  6181 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwdiv.c"
  6182 ;; Parameters:    Size  Location     Type
  6183 ;;  divisor         2    1[COMMON] unsigned int 
  6184 ;;  dividend        2    3[COMMON] unsigned int 
  6185 ;; Auto vars:     Size  Location     Type
  6186 ;;  quotient        2    6[COMMON] unsigned int 
  6187 ;;  counter         1    8[COMMON] unsigned char 
  6188 ;; Return value:  Size  Location     Type
  6189 ;;                  2    1[COMMON] unsigned int 
  6190 ;; Registers used:
  6191 ;;		wreg, status,2, status,0
  6192 ;; Tracked objects:
  6193 ;;		On entry : 0/0
  6194 ;;		On exit  : 0/0
  6195 ;;		Unchanged: 0/0
  6196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6197 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6198 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6199 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6200 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6201 ;;Total ram usage:        8 bytes
  6202 ;; Hardware stack levels used:    1
  6203 ;; Hardware stack levels required when called:    1
  6204 ;; This function calls:
  6205 ;;		Nothing
  6206 ;; This function is called by:
  6207 ;;		_pid_pwm2_vout_run
  6208 ;; This function uses a non-reentrant model
  6209 ;;
  6210                           
  6211                           
  6212                           ;psect for function ___lwdiv
  6213  1ECC                     ___lwdiv:	
  6214                           
  6215                           ;incstack = 0
  6216                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6217  1ECC  01F6               	clrf	___lwdiv@quotient
  6218  1ECD  01F7               	clrf	___lwdiv@quotient+1
  6219  1ECE  0871               	movf	___lwdiv@divisor,w
  6220  1ECF  0472               	iorwf	___lwdiv@divisor+1,w
  6221  1ED0  1903               	btfsc	3,2
  6222  1ED1  2EFB               	goto	l4022
  6223  1ED2  01F8               	clrf	___lwdiv@counter
  6224  1ED3  0AF8               	incf	___lwdiv@counter,f
  6225  1ED4                     l4010:	
  6226  1ED4  1BF2               	btfsc	___lwdiv@divisor+1,7
  6227  1ED5  2EE0               	goto	l4012
  6228  1ED6  3001               	movlw	1
  6229  1ED7                     u3015:	
  6230  1ED7  35F1               	lslf	___lwdiv@divisor,f
  6231  1ED8  0DF2               	rlf	___lwdiv@divisor+1,f
  6232  1ED9  0B89               	decfsz	9,f
  6233  1EDA  2ED7               	goto	u3015
  6234  1EDB  3001               	movlw	1
  6235  1EDC  00F5               	movwf	??___lwdiv
  6236  1EDD  0875               	movf	??___lwdiv,w
  6237  1EDE  07F8               	addwf	___lwdiv@counter,f
  6238  1EDF  2ED4               	goto	l4010
  6239  1EE0                     l4012:	
  6240  1EE0  3001               	movlw	1
  6241  1EE1                     u3035:	
  6242  1EE1  35F6               	lslf	___lwdiv@quotient,f
  6243  1EE2  0DF7               	rlf	___lwdiv@quotient+1,f
  6244  1EE3  0B89               	decfsz	9,f
  6245  1EE4  2EE1               	goto	u3035
  6246  1EE5  0872               	movf	___lwdiv@divisor+1,w
  6247  1EE6  0274               	subwf	___lwdiv@dividend+1,w
  6248  1EE7  1D03               	skipz
  6249  1EE8  2EEB               	goto	u3045
  6250  1EE9  0871               	movf	___lwdiv@divisor,w
  6251  1EEA  0273               	subwf	___lwdiv@dividend,w
  6252  1EEB                     u3045:	
  6253  1EEB  1C03               	skipc
  6254  1EEC  2EF2               	goto	l4018
  6255  1EED  0871               	movf	___lwdiv@divisor,w
  6256  1EEE  02F3               	subwf	___lwdiv@dividend,f
  6257  1EEF  0872               	movf	___lwdiv@divisor+1,w
  6258  1EF0  3BF4               	subwfb	___lwdiv@dividend+1,f
  6259  1EF1  1476               	bsf	___lwdiv@quotient,0
  6260  1EF2                     l4018:	
  6261  1EF2  3001               	movlw	1
  6262  1EF3                     u3055:	
  6263  1EF3  36F2               	lsrf	___lwdiv@divisor+1,f
  6264  1EF4  0CF1               	rrf	___lwdiv@divisor,f
  6265  1EF5  0B89               	decfsz	9,f
  6266  1EF6  2EF3               	goto	u3055
  6267  1EF7  3001               	movlw	1
  6268  1EF8  02F8               	subwf	___lwdiv@counter,f
  6269  1EF9  1D03               	btfss	3,2
  6270  1EFA  2EE0               	goto	l4012
  6271  1EFB                     l4022:	
  6272  1EFB  0877               	movf	___lwdiv@quotient+1,w
  6273  1EFC  00F2               	movwf	?___lwdiv+1
  6274  1EFD  0876               	movf	___lwdiv@quotient,w
  6275  1EFE  00F1               	movwf	?___lwdiv
  6276  1EFF  0008               	return
  6277  1F00                     __end_of___lwdiv:	
  6278                           
  6279                           	psect	text9
  6280  1183                     __ptext9:	
  6281 ;; *************** function ___awdiv *****************
  6282 ;; Defined at:
  6283 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awdiv.c"
  6284 ;; Parameters:    Size  Location     Type
  6285 ;;  divisor         2    1[COMMON] int 
  6286 ;;  dividend        2    3[COMMON] int 
  6287 ;; Auto vars:     Size  Location     Type
  6288 ;;  quotient        2    8[COMMON] int 
  6289 ;;  sign            1    7[COMMON] unsigned char 
  6290 ;;  counter         1    6[COMMON] unsigned char 
  6291 ;; Return value:  Size  Location     Type
  6292 ;;                  2    1[COMMON] int 
  6293 ;; Registers used:
  6294 ;;		wreg, status,2, status,0
  6295 ;; Tracked objects:
  6296 ;;		On entry : 0/0
  6297 ;;		On exit  : 0/0
  6298 ;;		Unchanged: 0/0
  6299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6300 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6301 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6302 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6303 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6304 ;;Total ram usage:        9 bytes
  6305 ;; Hardware stack levels used:    1
  6306 ;; Hardware stack levels required when called:    1
  6307 ;; This function calls:
  6308 ;;		Nothing
  6309 ;; This function is called by:
  6310 ;;		_pid_pwm2_vout_run
  6311 ;; This function uses a non-reentrant model
  6312 ;;
  6313                           
  6314                           
  6315                           ;psect for function ___awdiv
  6316  1183                     ___awdiv:	
  6317                           
  6318                           ;incstack = 0
  6319                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6320  1183  01F7               	clrf	___awdiv@sign
  6321  1184  1FF2               	btfss	___awdiv@divisor+1,7
  6322  1185  298D               	goto	l3964
  6323  1186  09F1               	comf	___awdiv@divisor,f
  6324  1187  09F2               	comf	___awdiv@divisor+1,f
  6325  1188  0AF1               	incf	___awdiv@divisor,f
  6326  1189  1903               	skipnz
  6327  118A  0AF2               	incf	___awdiv@divisor+1,f
  6328  118B  01F7               	clrf	___awdiv@sign
  6329  118C  0AF7               	incf	___awdiv@sign,f
  6330  118D                     l3964:	
  6331  118D  1FF4               	btfss	___awdiv@dividend+1,7
  6332  118E  2998               	goto	l3970
  6333  118F  09F3               	comf	___awdiv@dividend,f
  6334  1190  09F4               	comf	___awdiv@dividend+1,f
  6335  1191  0AF3               	incf	___awdiv@dividend,f
  6336  1192  1903               	skipnz
  6337  1193  0AF4               	incf	___awdiv@dividend+1,f
  6338  1194  3001               	movlw	1
  6339  1195  00F5               	movwf	??___awdiv
  6340  1196  0875               	movf	??___awdiv,w
  6341  1197  06F7               	xorwf	___awdiv@sign,f
  6342  1198                     l3970:	
  6343  1198  01F8               	clrf	___awdiv@quotient
  6344  1199  01F9               	clrf	___awdiv@quotient+1
  6345  119A  0871               	movf	___awdiv@divisor,w
  6346  119B  0472               	iorwf	___awdiv@divisor+1,w
  6347  119C  1903               	btfsc	3,2
  6348  119D  29C7               	goto	l3992
  6349  119E  01F6               	clrf	___awdiv@counter
  6350  119F  0AF6               	incf	___awdiv@counter,f
  6351  11A0                     l3980:	
  6352  11A0  1BF2               	btfsc	___awdiv@divisor+1,7
  6353  11A1  29AC               	goto	l3982
  6354  11A2  3001               	movlw	1
  6355  11A3                     u2935:	
  6356  11A3  35F1               	lslf	___awdiv@divisor,f
  6357  11A4  0DF2               	rlf	___awdiv@divisor+1,f
  6358  11A5  0B89               	decfsz	9,f
  6359  11A6  29A3               	goto	u2935
  6360  11A7  3001               	movlw	1
  6361  11A8  00F5               	movwf	??___awdiv
  6362  11A9  0875               	movf	??___awdiv,w
  6363  11AA  07F6               	addwf	___awdiv@counter,f
  6364  11AB  29A0               	goto	l3980
  6365  11AC                     l3982:	
  6366  11AC  3001               	movlw	1
  6367  11AD                     u2955:	
  6368  11AD  35F8               	lslf	___awdiv@quotient,f
  6369  11AE  0DF9               	rlf	___awdiv@quotient+1,f
  6370  11AF  0B89               	decfsz	9,f
  6371  11B0  29AD               	goto	u2955
  6372  11B1  0872               	movf	___awdiv@divisor+1,w
  6373  11B2  0274               	subwf	___awdiv@dividend+1,w
  6374  11B3  1D03               	skipz
  6375  11B4  29B7               	goto	u2965
  6376  11B5  0871               	movf	___awdiv@divisor,w
  6377  11B6  0273               	subwf	___awdiv@dividend,w
  6378  11B7                     u2965:	
  6379  11B7  1C03               	skipc
  6380  11B8  29BE               	goto	l3988
  6381  11B9  0871               	movf	___awdiv@divisor,w
  6382  11BA  02F3               	subwf	___awdiv@dividend,f
  6383  11BB  0872               	movf	___awdiv@divisor+1,w
  6384  11BC  3BF4               	subwfb	___awdiv@dividend+1,f
  6385  11BD  1478               	bsf	___awdiv@quotient,0
  6386  11BE                     l3988:	
  6387  11BE  3001               	movlw	1
  6388  11BF                     u2975:	
  6389  11BF  36F2               	lsrf	___awdiv@divisor+1,f
  6390  11C0  0CF1               	rrf	___awdiv@divisor,f
  6391  11C1  0B89               	decfsz	9,f
  6392  11C2  29BF               	goto	u2975
  6393  11C3  3001               	movlw	1
  6394  11C4  02F6               	subwf	___awdiv@counter,f
  6395  11C5  1D03               	btfss	3,2
  6396  11C6  29AC               	goto	l3982
  6397  11C7                     l3992:	
  6398  11C7  0877               	movf	___awdiv@sign,w
  6399  11C8  1903               	btfsc	3,2
  6400  11C9  29CF               	goto	l3996
  6401  11CA  09F8               	comf	___awdiv@quotient,f
  6402  11CB  09F9               	comf	___awdiv@quotient+1,f
  6403  11CC  0AF8               	incf	___awdiv@quotient,f
  6404  11CD  1903               	skipnz
  6405  11CE  0AF9               	incf	___awdiv@quotient+1,f
  6406  11CF                     l3996:	
  6407  11CF  0879               	movf	___awdiv@quotient+1,w
  6408  11D0  00F2               	movwf	?___awdiv+1
  6409  11D1  0878               	movf	___awdiv@quotient,w
  6410  11D2  00F1               	movwf	?___awdiv
  6411  11D3  0008               	return
  6412  11D4                     __end_of___awdiv:	
  6413                           
  6414                           	psect	text10
  6415  0AA9                     __ptext10:	
  6416 ;; *************** function _pid_pwm1_idrv_run *****************
  6417 ;; Defined at:
  6418 ;;		line 333 in file "src/api/sample.c"
  6419 ;; Parameters:    Size  Location     Type
  6420 ;;		None
  6421 ;; Auto vars:     Size  Location     Type
  6422 ;;  t32             4   26[BANK0 ] long 
  6423 ;; Return value:  Size  Location     Type
  6424 ;;                  1    wreg      void 
  6425 ;; Registers used:
  6426 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6427 ;; Tracked objects:
  6428 ;;		On entry : 0/0
  6429 ;;		On exit  : 0/0
  6430 ;;		Unchanged: 0/0
  6431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6433 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6434 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6435 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6436 ;;Total ram usage:       12 bytes
  6437 ;; Hardware stack levels used:    1
  6438 ;; Hardware stack levels required when called:    3
  6439 ;; This function calls:
  6440 ;;		___aldiv
  6441 ;;		___lmul
  6442 ;;		_set_idrv_pwm1_duty
  6443 ;; This function is called by:
  6444 ;;		_main
  6445 ;; This function uses a non-reentrant model
  6446 ;;
  6447                           
  6448                           
  6449                           ;psect for function _pid_pwm1_idrv_run
  6450  0AA9                     _pid_pwm1_idrv_run:	
  6451                           
  6452                           ;sample.c: 337: int32_t t32;;sample.c: 338: t32=((int32_t)resRs-(int32_t)resRc);
  6453                           
  6454                           ;incstack = 0
  6455                           ; Regs used in _pid_pwm1_idrv_run: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6456  0AA9  0020               	movlb	0	; select bank0
  6457  0AAA  086E               	movf	_resRc,w
  6458  0AAB  00B2               	movwf	??_pid_pwm1_idrv_run
  6459  0AAC  086F               	movf	_resRc+1,w
  6460  0AAD  00B3               	movwf	??_pid_pwm1_idrv_run+1
  6461  0AAE  01B4               	clrf	??_pid_pwm1_idrv_run+2
  6462  0AAF  01B5               	clrf	??_pid_pwm1_idrv_run+3
  6463  0AB0  09B2               	comf	??_pid_pwm1_idrv_run,f
  6464  0AB1  09B3               	comf	??_pid_pwm1_idrv_run+1,f
  6465  0AB2  09B4               	comf	??_pid_pwm1_idrv_run+2,f
  6466  0AB3  09B5               	comf	??_pid_pwm1_idrv_run+3,f
  6467  0AB4  0AB2               	incf	??_pid_pwm1_idrv_run,f
  6468  0AB5  1903               	skipnz
  6469  0AB6  0AB3               	incf	??_pid_pwm1_idrv_run+1,f
  6470  0AB7  1903               	skipnz
  6471  0AB8  0AB4               	incf	??_pid_pwm1_idrv_run+2,f
  6472  0AB9  1903               	skipnz
  6473  0ABA  0AB5               	incf	??_pid_pwm1_idrv_run+3,f
  6474  0ABB  086C               	movf	_resRs,w
  6475  0ABC  00B6               	movwf	??_pid_pwm1_idrv_run+4
  6476  0ABD  086D               	movf	_resRs+1,w
  6477  0ABE  00B7               	movwf	??_pid_pwm1_idrv_run+5
  6478  0ABF  01B8               	clrf	??_pid_pwm1_idrv_run+6
  6479  0AC0  01B9               	clrf	??_pid_pwm1_idrv_run+7
  6480  0AC1  0836               	movf	??_pid_pwm1_idrv_run+4,w
  6481  0AC2  07B2               	addwf	??_pid_pwm1_idrv_run,f
  6482  0AC3  0837               	movf	??_pid_pwm1_idrv_run+5,w
  6483  0AC4  3DB3               	addwfc	??_pid_pwm1_idrv_run+1,f
  6484  0AC5  0838               	movf	??_pid_pwm1_idrv_run+6,w
  6485  0AC6  3DB4               	addwfc	??_pid_pwm1_idrv_run+2,f
  6486  0AC7  0839               	movf	??_pid_pwm1_idrv_run+7,w
  6487  0AC8  3DB5               	addwfc	??_pid_pwm1_idrv_run+3,f
  6488  0AC9  0835               	movf	??_pid_pwm1_idrv_run+3,w
  6489  0ACA  00BD               	movwf	pid_pwm1_idrv_run@t32+3
  6490  0ACB  0834               	movf	??_pid_pwm1_idrv_run+2,w
  6491  0ACC  00BC               	movwf	pid_pwm1_idrv_run@t32+2
  6492  0ACD  0833               	movf	??_pid_pwm1_idrv_run+1,w
  6493  0ACE  00BB               	movwf	pid_pwm1_idrv_run@t32+1
  6494  0ACF  0832               	movf	??_pid_pwm1_idrv_run,w
  6495  0AD0  00BA               	movwf	pid_pwm1_idrv_run@t32
  6496                           
  6497                           ;sample.c: 339: t32=2000-t32;
  6498  0AD1  30D0               	movlw	208
  6499  0AD2  00B2               	movwf	??_pid_pwm1_idrv_run
  6500  0AD3  3007               	movlw	7
  6501  0AD4  00B3               	movwf	??_pid_pwm1_idrv_run+1
  6502  0AD5  3000               	movlw	0
  6503  0AD6  00B4               	movwf	??_pid_pwm1_idrv_run+2
  6504  0AD7  3000               	movlw	0
  6505  0AD8  00B5               	movwf	??_pid_pwm1_idrv_run+3
  6506  0AD9  093A               	comf	pid_pwm1_idrv_run@t32,w
  6507  0ADA  00B6               	movwf	??_pid_pwm1_idrv_run+4
  6508  0ADB  093B               	comf	pid_pwm1_idrv_run@t32+1,w
  6509  0ADC  00B7               	movwf	??_pid_pwm1_idrv_run+5
  6510  0ADD  093C               	comf	pid_pwm1_idrv_run@t32+2,w
  6511  0ADE  00B8               	movwf	??_pid_pwm1_idrv_run+6
  6512  0ADF  093D               	comf	pid_pwm1_idrv_run@t32+3,w
  6513  0AE0  00B9               	movwf	??_pid_pwm1_idrv_run+7
  6514  0AE1  0AB6               	incf	??_pid_pwm1_idrv_run+4,f
  6515  0AE2  1903               	skipnz
  6516  0AE3  0AB7               	incf	??_pid_pwm1_idrv_run+5,f
  6517  0AE4  1903               	skipnz
  6518  0AE5  0AB8               	incf	??_pid_pwm1_idrv_run+6,f
  6519  0AE6  1903               	skipnz
  6520  0AE7  0AB9               	incf	??_pid_pwm1_idrv_run+7,f
  6521  0AE8  0836               	movf	??_pid_pwm1_idrv_run+4,w
  6522  0AE9  07B2               	addwf	??_pid_pwm1_idrv_run,f
  6523  0AEA  0837               	movf	??_pid_pwm1_idrv_run+5,w
  6524  0AEB  3DB3               	addwfc	??_pid_pwm1_idrv_run+1,f
  6525  0AEC  0838               	movf	??_pid_pwm1_idrv_run+6,w
  6526  0AED  3DB4               	addwfc	??_pid_pwm1_idrv_run+2,f
  6527  0AEE  0839               	movf	??_pid_pwm1_idrv_run+7,w
  6528  0AEF  3DB5               	addwfc	??_pid_pwm1_idrv_run+3,f
  6529  0AF0  0835               	movf	??_pid_pwm1_idrv_run+3,w
  6530  0AF1  00BD               	movwf	pid_pwm1_idrv_run@t32+3
  6531  0AF2  0834               	movf	??_pid_pwm1_idrv_run+2,w
  6532  0AF3  00BC               	movwf	pid_pwm1_idrv_run@t32+2
  6533  0AF4  0833               	movf	??_pid_pwm1_idrv_run+1,w
  6534  0AF5  00BB               	movwf	pid_pwm1_idrv_run@t32+1
  6535  0AF6  0832               	movf	??_pid_pwm1_idrv_run,w
  6536  0AF7  00BA               	movwf	pid_pwm1_idrv_run@t32
  6537                           
  6538                           ;sample.c: 341: err[2]=err[1];
  6539  0AF8  3004               	movlw	4
  6540  0AF9  3EA0               	addlw	(low (_err| 0))& (0+255)
  6541  0AFA  0086               	movwf	6
  6542  0AFB  0187               	clrf	7
  6543  0AFC  3F40               	moviw [0]fsr1
  6544  0AFD  0021               	movlb	1	; select bank1
  6545  0AFE  00A8               	movwf	(_err^(0+128)+8)
  6546  0AFF  3F41               	moviw [1]fsr1
  6547  0B00  00A9               	movwf	((_err+1)^(0+128)+8)
  6548  0B01  3F42               	moviw [2]fsr1
  6549  0B02  00AA               	movwf	((_err+2)^(0+128)+8)
  6550  0B03  3F43               	moviw [3]fsr1
  6551  0B04  00AB               	movwf	((_err+3)^(0+128)+8)
  6552                           
  6553                           ;sample.c: 342: err[1]=err[0];
  6554  0B05  0823               	movf	(_err+3)^(0+128),w
  6555  0B06  00A7               	movwf	((_err+3)^(0+128)+4)
  6556  0B07  0822               	movf	(_err+2)^(0+128),w
  6557  0B08  00A6               	movwf	((_err+2)^(0+128)+4)
  6558  0B09  0821               	movf	(_err+1)^(0+128),w
  6559  0B0A  00A5               	movwf	((_err+1)^(0+128)+4)
  6560  0B0B  0820               	movf	_err^(0+128),w
  6561  0B0C  00A4               	movwf	(_err^(0+128)+4)
  6562                           
  6563                           ;sample.c: 343: err[0]=t32;
  6564  0B0D  0020               	movlb	0	; select bank0
  6565  0B0E  083D               	movf	pid_pwm1_idrv_run@t32+3,w
  6566  0B0F  0021               	movlb	1	; select bank1
  6567  0B10  00A3               	movwf	(_err+3)^(0+128)
  6568  0B11  0020               	movlb	0	; select bank0
  6569  0B12  083C               	movf	pid_pwm1_idrv_run@t32+2,w
  6570  0B13  0021               	movlb	1	; select bank1
  6571  0B14  00A2               	movwf	(_err+2)^(0+128)
  6572  0B15  0020               	movlb	0	; select bank0
  6573  0B16  083B               	movf	pid_pwm1_idrv_run@t32+1,w
  6574  0B17  0021               	movlb	1	; select bank1
  6575  0B18  00A1               	movwf	(_err+1)^(0+128)
  6576  0B19  0020               	movlb	0	; select bank0
  6577  0B1A  083A               	movf	pid_pwm1_idrv_run@t32,w
  6578  0B1B  0021               	movlb	1	; select bank1
  6579  0B1C  00A0               	movwf	_err^(0+128)
  6580                           
  6581                           ;sample.c: 346: x0=(err[0]-err[1])*PidKp;
  6582  0B1D  0820               	movf	_err^(0+128),w
  6583  0B1E  0020               	movlb	0	; select bank0
  6584  0B1F  00B2               	movwf	??_pid_pwm1_idrv_run
  6585  0B20  0021               	movlb	1	; select bank1
  6586  0B21  0821               	movf	(_err+1)^(0+128),w
  6587  0B22  0020               	movlb	0	; select bank0
  6588  0B23  00B3               	movwf	??_pid_pwm1_idrv_run+1
  6589  0B24  0021               	movlb	1	; select bank1
  6590  0B25  0822               	movf	(_err+2)^(0+128),w
  6591  0B26  0020               	movlb	0	; select bank0
  6592  0B27  00B4               	movwf	??_pid_pwm1_idrv_run+2
  6593  0B28  0021               	movlb	1	; select bank1
  6594  0B29  0823               	movf	(_err+3)^(0+128),w
  6595  0B2A  0020               	movlb	0	; select bank0
  6596  0B2B  00B5               	movwf	??_pid_pwm1_idrv_run+3
  6597  0B2C  0021               	movlb	1	; select bank1
  6598  0B2D  0924               	comf	(_err^(0+128)+4),w
  6599  0B2E  0020               	movlb	0	; select bank0
  6600  0B2F  00B6               	movwf	??_pid_pwm1_idrv_run+4
  6601  0B30  0021               	movlb	1	; select bank1
  6602  0B31  0925               	comf	((_err+1)^(0+128)+4),w
  6603  0B32  0020               	movlb	0	; select bank0
  6604  0B33  00B7               	movwf	??_pid_pwm1_idrv_run+5
  6605  0B34  0021               	movlb	1	; select bank1
  6606  0B35  0926               	comf	((_err+2)^(0+128)+4),w
  6607  0B36  0020               	movlb	0	; select bank0
  6608  0B37  00B8               	movwf	??_pid_pwm1_idrv_run+6
  6609  0B38  0021               	movlb	1	; select bank1
  6610  0B39  0927               	comf	((_err+3)^(0+128)+4),w
  6611  0B3A  0020               	movlb	0	; select bank0
  6612  0B3B  00B9               	movwf	??_pid_pwm1_idrv_run+7
  6613  0B3C  0AB6               	incf	??_pid_pwm1_idrv_run+4,f
  6614  0B3D  1903               	skipnz
  6615  0B3E  0AB7               	incf	??_pid_pwm1_idrv_run+5,f
  6616  0B3F  1903               	skipnz
  6617  0B40  0AB8               	incf	??_pid_pwm1_idrv_run+6,f
  6618  0B41  1903               	skipnz
  6619  0B42  0AB9               	incf	??_pid_pwm1_idrv_run+7,f
  6620  0B43  0836               	movf	??_pid_pwm1_idrv_run+4,w
  6621  0B44  07B2               	addwf	??_pid_pwm1_idrv_run,f
  6622  0B45  0837               	movf	??_pid_pwm1_idrv_run+5,w
  6623  0B46  3DB3               	addwfc	??_pid_pwm1_idrv_run+1,f
  6624  0B47  0838               	movf	??_pid_pwm1_idrv_run+6,w
  6625  0B48  3DB4               	addwfc	??_pid_pwm1_idrv_run+2,f
  6626  0B49  0839               	movf	??_pid_pwm1_idrv_run+7,w
  6627  0B4A  3DB5               	addwfc	??_pid_pwm1_idrv_run+3,f
  6628  0B4B  0835               	movf	??_pid_pwm1_idrv_run+3,w
  6629  0B4C  00F4               	movwf	___lmul@multiplier+3
  6630  0B4D  0834               	movf	??_pid_pwm1_idrv_run+2,w
  6631  0B4E  00F3               	movwf	___lmul@multiplier+2
  6632  0B4F  0833               	movf	??_pid_pwm1_idrv_run+1,w
  6633  0B50  00F2               	movwf	___lmul@multiplier+1
  6634  0B51  0832               	movf	??_pid_pwm1_idrv_run,w
  6635  0B52  00F1               	movwf	___lmul@multiplier
  6636  0B53  0857               	movf	_PidKp,w
  6637  0B54  00F5               	movwf	___lmul@multiplicand
  6638  0B55  0858               	movf	_PidKp+1,w
  6639  0B56  00F6               	movwf	___lmul@multiplicand+1
  6640  0B57  01F7               	clrf	___lmul@multiplicand+2
  6641  0B58  01F8               	clrf	___lmul@multiplicand+3
  6642  0B59  319E  269A  318A   	fcall	___lmul
  6643  0B5C  0874               	movf	?___lmul+3,w
  6644  0B5D  0020               	movlb	0	; select bank0
  6645  0B5E  00CE               	movwf	_x0+3
  6646  0B5F  0873               	movf	?___lmul+2,w
  6647  0B60  00CD               	movwf	_x0+2
  6648  0B61  0872               	movf	?___lmul+1,w
  6649  0B62  00CC               	movwf	_x0+1
  6650  0B63  0871               	movf	?___lmul,w
  6651  0B64  00CB               	movwf	_x0
  6652                           
  6653                           ;sample.c: 347: x1=PidKp*err[0]/PidTi;
  6654  0B65  0021               	movlb	1	; select bank1
  6655  0B66  084A               	movf	_PidTi^(0+128),w
  6656  0B67  0020               	movlb	0	; select bank0
  6657  0B68  00A4               	movwf	___aldiv@divisor
  6658  0B69  0021               	movlb	1	; select bank1
  6659  0B6A  084B               	movf	(_PidTi+1)^(0+128),w
  6660  0B6B  0020               	movlb	0	; select bank0
  6661  0B6C  00A5               	movwf	___aldiv@divisor+1
  6662  0B6D  01A6               	clrf	___aldiv@divisor+2
  6663  0B6E  01A7               	clrf	___aldiv@divisor+3
  6664  0B6F  0857               	movf	_PidKp,w
  6665  0B70  00F1               	movwf	___lmul@multiplier
  6666  0B71  0858               	movf	_PidKp+1,w
  6667  0B72  00F2               	movwf	___lmul@multiplier+1
  6668  0B73  01F3               	clrf	___lmul@multiplier+2
  6669  0B74  01F4               	clrf	___lmul@multiplier+3
  6670  0B75  0021               	movlb	1	; select bank1
  6671  0B76  0823               	movf	(_err+3)^(0+128),w
  6672  0B77  00F8               	movwf	___lmul@multiplicand+3
  6673  0B78  0822               	movf	(_err+2)^(0+128),w
  6674  0B79  00F7               	movwf	___lmul@multiplicand+2
  6675  0B7A  0821               	movf	(_err+1)^(0+128),w
  6676  0B7B  00F6               	movwf	___lmul@multiplicand+1
  6677  0B7C  0820               	movf	_err^(0+128),w
  6678  0B7D  00F5               	movwf	___lmul@multiplicand
  6679  0B7E  319E  269A  318A   	fcall	___lmul
  6680  0B81  0874               	movf	?___lmul+3,w
  6681  0B82  0020               	movlb	0	; select bank0
  6682  0B83  00AB               	movwf	___aldiv@dividend+3
  6683  0B84  0873               	movf	?___lmul+2,w
  6684  0B85  00AA               	movwf	___aldiv@dividend+2
  6685  0B86  0872               	movf	?___lmul+1,w
  6686  0B87  00A9               	movwf	___aldiv@dividend+1
  6687  0B88  0871               	movf	?___lmul,w
  6688  0B89  00A8               	movwf	___aldiv@dividend
  6689  0B8A  318F  277C  318A   	fcall	___aldiv
  6690  0B8D  0020               	movlb	0	; select bank0
  6691  0B8E  0827               	movf	?___aldiv+3,w
  6692  0B8F  0021               	movlb	1	; select bank1
  6693  0B90  00BF               	movwf	(_x1+3)^(0+128)
  6694  0B91  0020               	movlb	0	; select bank0
  6695  0B92  0826               	movf	?___aldiv+2,w
  6696  0B93  0021               	movlb	1	; select bank1
  6697  0B94  00BE               	movwf	(_x1+2)^(0+128)
  6698  0B95  0020               	movlb	0	; select bank0
  6699  0B96  0825               	movf	?___aldiv+1,w
  6700  0B97  0021               	movlb	1	; select bank1
  6701  0B98  00BD               	movwf	(_x1+1)^(0+128)
  6702  0B99  0020               	movlb	0	; select bank0
  6703  0B9A  0824               	movf	?___aldiv,w
  6704  0B9B  0021               	movlb	1	; select bank1
  6705  0B9C  00BC               	movwf	_x1^(0+128)
  6706                           
  6707                           ;sample.c: 350: t32=x0+x1;
  6708  0B9D  0020               	movlb	0	; select bank0
  6709  0B9E  084B               	movf	_x0,w
  6710  0B9F  0021               	movlb	1	; select bank1
  6711  0BA0  073C               	addwf	_x1^(0+128),w
  6712  0BA1  0020               	movlb	0	; select bank0
  6713  0BA2  00B2               	movwf	??_pid_pwm1_idrv_run
  6714  0BA3  084C               	movf	_x0+1,w
  6715  0BA4  0021               	movlb	1	; select bank1
  6716  0BA5  3D3D               	addwfc	(_x1+1)^(0+128),w
  6717  0BA6  0020               	movlb	0	; select bank0
  6718  0BA7  00B3               	movwf	??_pid_pwm1_idrv_run+1
  6719  0BA8  084D               	movf	_x0+2,w
  6720  0BA9  0021               	movlb	1	; select bank1
  6721  0BAA  3D3E               	addwfc	(_x1+2)^(0+128),w
  6722  0BAB  0020               	movlb	0	; select bank0
  6723  0BAC  00B4               	movwf	??_pid_pwm1_idrv_run+2
  6724  0BAD  084E               	movf	_x0+3,w
  6725  0BAE  0021               	movlb	1	; select bank1
  6726  0BAF  3D3F               	addwfc	(_x1+3)^(0+128),w
  6727  0BB0  0020               	movlb	0	; select bank0
  6728  0BB1  00B5               	movwf	??_pid_pwm1_idrv_run+3
  6729  0BB2  0835               	movf	??_pid_pwm1_idrv_run+3,w
  6730  0BB3  00BD               	movwf	pid_pwm1_idrv_run@t32+3
  6731  0BB4  0834               	movf	??_pid_pwm1_idrv_run+2,w
  6732  0BB5  00BC               	movwf	pid_pwm1_idrv_run@t32+2
  6733  0BB6  0833               	movf	??_pid_pwm1_idrv_run+1,w
  6734  0BB7  00BB               	movwf	pid_pwm1_idrv_run@t32+1
  6735  0BB8  0832               	movf	??_pid_pwm1_idrv_run,w
  6736  0BB9  00BA               	movwf	pid_pwm1_idrv_run@t32
  6737                           
  6738                           ;sample.c: 351: t32/=10000;
  6739  0BBA  3000               	movlw	0
  6740  0BBB  00A7               	movwf	___aldiv@divisor+3
  6741  0BBC  3000               	movlw	0
  6742  0BBD  00A6               	movwf	___aldiv@divisor+2
  6743  0BBE  3027               	movlw	39
  6744  0BBF  00A5               	movwf	___aldiv@divisor+1
  6745  0BC0  3010               	movlw	16
  6746  0BC1  00A4               	movwf	___aldiv@divisor
  6747  0BC2  083D               	movf	pid_pwm1_idrv_run@t32+3,w
  6748  0BC3  00AB               	movwf	___aldiv@dividend+3
  6749  0BC4  083C               	movf	pid_pwm1_idrv_run@t32+2,w
  6750  0BC5  00AA               	movwf	___aldiv@dividend+2
  6751  0BC6  083B               	movf	pid_pwm1_idrv_run@t32+1,w
  6752  0BC7  00A9               	movwf	___aldiv@dividend+1
  6753  0BC8  083A               	movf	pid_pwm1_idrv_run@t32,w
  6754  0BC9  00A8               	movwf	___aldiv@dividend
  6755  0BCA  318F  277C  318A   	fcall	___aldiv
  6756  0BCD  0020               	movlb	0	; select bank0
  6757  0BCE  0827               	movf	?___aldiv+3,w
  6758  0BCF  00BD               	movwf	pid_pwm1_idrv_run@t32+3
  6759  0BD0  0826               	movf	?___aldiv+2,w
  6760  0BD1  00BC               	movwf	pid_pwm1_idrv_run@t32+2
  6761  0BD2  0825               	movf	?___aldiv+1,w
  6762  0BD3  00BB               	movwf	pid_pwm1_idrv_run@t32+1
  6763  0BD4  0824               	movf	?___aldiv,w
  6764  0BD5  00BA               	movwf	pid_pwm1_idrv_run@t32
  6765                           
  6766                           ;sample.c: 352: t32+=pidU;
  6767  0BD6  0021               	movlb	1	; select bank1
  6768  0BD7  084E               	movf	_pidU^(0+128),w
  6769  0BD8  0020               	movlb	0	; select bank0
  6770  0BD9  07BA               	addwf	pid_pwm1_idrv_run@t32,f
  6771  0BDA  0021               	movlb	1	; select bank1
  6772  0BDB  084F               	movf	(_pidU+1)^(0+128),w
  6773  0BDC  0020               	movlb	0	; select bank0
  6774  0BDD  3DBB               	addwfc	pid_pwm1_idrv_run@t32+1,f
  6775  0BDE  3000               	movlw	0
  6776  0BDF  3DBC               	addwfc	pid_pwm1_idrv_run@t32+2,f
  6777  0BE0  3DBD               	addwfc	pid_pwm1_idrv_run@t32+3,f
  6778                           
  6779                           ;sample.c: 354: __nop();
  6780  0BE1  0000               	nop
  6781                           
  6782                           ;sample.c: 355: if(t32>1200)t32=1200;
  6783  0BE2  0020               	movlb	0	; select bank0
  6784  0BE3  1BBD               	btfsc	pid_pwm1_idrv_run@t32+3,7
  6785  0BE4  2BF9               	goto	l4952
  6786  0BE5  083D               	movf	pid_pwm1_idrv_run@t32+3,w
  6787  0BE6  1D03               	btfss	3,2
  6788  0BE7  2BF1               	goto	l4950
  6789  0BE8  083C               	movf	pid_pwm1_idrv_run@t32+2,w
  6790  0BE9  1D03               	btfss	3,2
  6791  0BEA  2BF1               	goto	l4950
  6792  0BEB  30B1               	movlw	177
  6793  0BEC  023A               	subwf	pid_pwm1_idrv_run@t32,w
  6794  0BED  3004               	movlw	4
  6795  0BEE  3B3B               	subwfb	pid_pwm1_idrv_run@t32+1,w
  6796  0BEF  1C03               	btfss	3,0
  6797  0BF0  2BF9               	goto	l4952
  6798  0BF1                     l4950:	
  6799  0BF1  3000               	movlw	0
  6800  0BF2  00BD               	movwf	pid_pwm1_idrv_run@t32+3
  6801  0BF3  3000               	movlw	0
  6802  0BF4  00BC               	movwf	pid_pwm1_idrv_run@t32+2
  6803  0BF5  3004               	movlw	4
  6804  0BF6  00BB               	movwf	pid_pwm1_idrv_run@t32+1
  6805  0BF7  30B0               	movlw	176
  6806  0BF8  00BA               	movwf	pid_pwm1_idrv_run@t32
  6807  0BF9                     l4952:	
  6808                           
  6809                           ;sample.c: 356: if(t32<5)t32=5;
  6810  0BF9  1BBD               	btfsc	pid_pwm1_idrv_run@t32+3,7
  6811  0BFA  2C08               	goto	l4954
  6812  0BFB  083D               	movf	pid_pwm1_idrv_run@t32+3,w
  6813  0BFC  1D03               	btfss	3,2
  6814  0BFD  2C10               	goto	l640
  6815  0BFE  083C               	movf	pid_pwm1_idrv_run@t32+2,w
  6816  0BFF  1D03               	btfss	3,2
  6817  0C00  2C10               	goto	l640
  6818  0C01  083B               	movf	pid_pwm1_idrv_run@t32+1,w
  6819  0C02  1D03               	btfss	3,2
  6820  0C03  2C10               	goto	l640
  6821  0C04  3005               	movlw	5
  6822  0C05  023A               	subwf	pid_pwm1_idrv_run@t32,w
  6823  0C06  1803               	btfsc	3,0
  6824  0C07  2C10               	goto	l640
  6825  0C08                     l4954:	
  6826  0C08  3000               	movlw	0
  6827  0C09  00BD               	movwf	pid_pwm1_idrv_run@t32+3
  6828  0C0A  3000               	movlw	0
  6829  0C0B  00BC               	movwf	pid_pwm1_idrv_run@t32+2
  6830  0C0C  3000               	movlw	0
  6831  0C0D  00BB               	movwf	pid_pwm1_idrv_run@t32+1
  6832  0C0E  3005               	movlw	5
  6833  0C0F  00BA               	movwf	pid_pwm1_idrv_run@t32
  6834  0C10                     l640:	
  6835                           
  6836                           ;sample.c: 357: pidU=(uint16_t)t32;
  6837  0C10  083B               	movf	pid_pwm1_idrv_run@t32+1,w
  6838  0C11  0021               	movlb	1	; select bank1
  6839  0C12  00CF               	movwf	(_pidU+1)^(0+128)
  6840  0C13  0020               	movlb	0	; select bank0
  6841  0C14  083A               	movf	pid_pwm1_idrv_run@t32,w
  6842  0C15  0021               	movlb	1	; select bank1
  6843  0C16  00CE               	movwf	_pidU^(0+128)
  6844                           
  6845                           ;sample.c: 359: set_idrv_pwm1_duty(pidU);
  6846  0C17  084F               	movf	(_pidU+1)^(0+128),w
  6847  0C18  00F8               	movwf	set_idrv_pwm1_duty@duty+1
  6848  0C19  084E               	movf	_pidU^(0+128),w
  6849  0C1A  00F7               	movwf	set_idrv_pwm1_duty@duty
  6850  0C1B  319E  2614         	fcall	_set_idrv_pwm1_duty
  6851  0C1D  0008               	return
  6852  0C1E                     __end_of_pid_pwm1_idrv_run:	
  6853                           
  6854                           	psect	text11
  6855  1E14                     __ptext11:	
  6856 ;; *************** function _set_idrv_pwm1_duty *****************
  6857 ;; Defined at:
  6858 ;;		line 82 in file "src/api/sample.c"
  6859 ;; Parameters:    Size  Location     Type
  6860 ;;  duty            2    7[COMMON] unsigned int 
  6861 ;; Auto vars:     Size  Location     Type
  6862 ;;  t16             2    9[COMMON] unsigned int 
  6863 ;; Return value:  Size  Location     Type
  6864 ;;                  1    wreg      void 
  6865 ;; Registers used:
  6866 ;;		wreg, status,2, pclath, cstack
  6867 ;; Tracked objects:
  6868 ;;		On entry : 0/0
  6869 ;;		On exit  : 0/0
  6870 ;;		Unchanged: 0/0
  6871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6872 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6873 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6875 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6876 ;;Total ram usage:        4 bytes
  6877 ;; Hardware stack levels used:    1
  6878 ;; Hardware stack levels required when called:    2
  6879 ;; This function calls:
  6880 ;;		_get_idrv_pwm1_duty
  6881 ;; This function is called by:
  6882 ;;		_pid_pwm1_idrv_run
  6883 ;; This function uses a non-reentrant model
  6884 ;;
  6885                           
  6886                           
  6887                           ;psect for function _set_idrv_pwm1_duty
  6888  1E14                     _set_idrv_pwm1_duty:	
  6889                           
  6890                           ;sample.c: 85: uint16_t t16;;sample.c: 86: pwm1DutyForIdrv=duty;
  6891                           
  6892                           ;incstack = 0
  6893                           ; Regs used in _set_idrv_pwm1_duty: [wreg+status,2+pclath+cstack]
  6894  1E14  0878               	movf	set_idrv_pwm1_duty@duty+1,w
  6895  1E15  0021               	movlb	1	; select bank1
  6896  1E16  00D3               	movwf	(_pwm1DutyForIdrv+1)^(0+128)
  6897  1E17  0877               	movf	set_idrv_pwm1_duty@duty,w
  6898  1E18  00D2               	movwf	_pwm1DutyForIdrv^(0+128)
  6899                           
  6900                           ;sample.c: 87: t16=get_idrv_pwm1_duty();
  6901  1E19  319D  2590  319E   	fcall	_get_idrv_pwm1_duty
  6902  1E1C  0872               	movf	?_get_idrv_pwm1_duty+1,w
  6903  1E1D  00FA               	movwf	set_idrv_pwm1_duty@t16+1
  6904  1E1E  0871               	movf	?_get_idrv_pwm1_duty,w
  6905  1E1F  00F9               	movwf	set_idrv_pwm1_duty@t16
  6906                           
  6907                           ;sample.c: 88: if(t16==duty)return;
  6908  1E20  0878               	movf	set_idrv_pwm1_duty@duty+1,w
  6909  1E21  067A               	xorwf	set_idrv_pwm1_duty@t16+1,w
  6910  1E22  1D03               	skipz
  6911  1E23  2E26               	goto	u2315
  6912  1E24  0877               	movf	set_idrv_pwm1_duty@duty,w
  6913  1E25  0679               	xorwf	set_idrv_pwm1_duty@t16,w
  6914  1E26                     u2315:	
  6915  1E26  1903               	btfsc	3,2
  6916  1E27  0008               	return
  6917                           
  6918                           ;sample.c: 91: PWM1CONbits.EN = 0;
  6919  1E28  003B               	movlb	27	; select bank27
  6920  1E29  139B               	bcf	27,7	;volatile
  6921                           
  6922                           ;sample.c: 92: PWM1DCL= (uint8_t)(duty&0xff);
  6923  1E2A  0877               	movf	set_idrv_pwm1_duty@duty,w
  6924  1E2B  0093               	movwf	19	;volatile
  6925                           
  6926                           ;sample.c: 93: PWM1DCH=(uint8_t)(duty>>8);
  6927  1E2C  0878               	movf	set_idrv_pwm1_duty@duty+1,w
  6928  1E2D  0094               	movwf	20	;volatile
  6929                           
  6930                           ;sample.c: 94: PWM1CONbits.EN = 1;
  6931  1E2E  179B               	bsf	27,7	;volatile
  6932  1E2F  0008               	return
  6933  1E30                     __end_of_set_idrv_pwm1_duty:	
  6934                           
  6935                           	psect	text12
  6936  1D90                     __ptext12:	
  6937 ;; *************** function _get_idrv_pwm1_duty *****************
  6938 ;; Defined at:
  6939 ;;		line 73 in file "src/api/sample.c"
  6940 ;; Parameters:    Size  Location     Type
  6941 ;;		None
  6942 ;; Auto vars:     Size  Location     Type
  6943 ;;  t16             2    5[COMMON] unsigned int 
  6944 ;; Return value:  Size  Location     Type
  6945 ;;                  2    1[COMMON] unsigned int 
  6946 ;; Registers used:
  6947 ;;		wreg
  6948 ;; Tracked objects:
  6949 ;;		On entry : 0/0
  6950 ;;		On exit  : 0/0
  6951 ;;		Unchanged: 0/0
  6952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6953 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6954 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6955 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6956 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6957 ;;Total ram usage:        6 bytes
  6958 ;; Hardware stack levels used:    1
  6959 ;; Hardware stack levels required when called:    1
  6960 ;; This function calls:
  6961 ;;		Nothing
  6962 ;; This function is called by:
  6963 ;;		_set_idrv_pwm1_duty
  6964 ;; This function uses a non-reentrant model
  6965 ;;
  6966                           
  6967                           
  6968                           ;psect for function _get_idrv_pwm1_duty
  6969  1D90                     _get_idrv_pwm1_duty:	
  6970                           
  6971                           ;sample.c: 76: uint16_t t16=PWM1DCH;
  6972                           
  6973                           ;incstack = 0
  6974                           ; Regs used in _get_idrv_pwm1_duty: [wreg]
  6975  1D90  003B               	movlb	27	; select bank27
  6976  1D91  0814               	movf	20,w	;volatile
  6977  1D92  00F3               	movwf	??_get_idrv_pwm1_duty
  6978  1D93  01F4               	clrf	??_get_idrv_pwm1_duty+1
  6979  1D94  0873               	movf	??_get_idrv_pwm1_duty,w
  6980  1D95  00F5               	movwf	get_idrv_pwm1_duty@t16
  6981  1D96  0874               	movf	??_get_idrv_pwm1_duty+1,w
  6982  1D97  00F6               	movwf	get_idrv_pwm1_duty@t16+1
  6983                           
  6984                           ;sample.c: 77: t16<<=8;
  6985  1D98  3008               	movlw	8
  6986  1D99                     u2235:	
  6987  1D99  35F5               	lslf	get_idrv_pwm1_duty@t16,f
  6988  1D9A  0DF6               	rlf	get_idrv_pwm1_duty@t16+1,f
  6989  1D9B  0B89               	decfsz	9,f
  6990  1D9C  2D99               	goto	u2235
  6991                           
  6992                           ;sample.c: 78: t16|=PWM1DCL;
  6993  1D9D  0813               	movf	19,w	;volatile
  6994  1D9E  00F3               	movwf	??_get_idrv_pwm1_duty
  6995  1D9F  01F4               	clrf	??_get_idrv_pwm1_duty+1
  6996  1DA0  0873               	movf	??_get_idrv_pwm1_duty,w
  6997  1DA1  04F5               	iorwf	get_idrv_pwm1_duty@t16,f
  6998  1DA2  0874               	movf	??_get_idrv_pwm1_duty+1,w
  6999  1DA3  04F6               	iorwf	get_idrv_pwm1_duty@t16+1,f
  7000                           
  7001                           ;sample.c: 79: return t16;
  7002  1DA4  0876               	movf	get_idrv_pwm1_duty@t16+1,w
  7003  1DA5  00F2               	movwf	?_get_idrv_pwm1_duty+1
  7004  1DA6  0875               	movf	get_idrv_pwm1_duty@t16,w
  7005  1DA7  00F1               	movwf	?_get_idrv_pwm1_duty
  7006  1DA8  0008               	return
  7007  1DA9                     __end_of_get_idrv_pwm1_duty:	
  7008                           
  7009                           	psect	text13
  7010  1227                     __ptext13:	
  7011 ;; *************** function _modbus_response_process *****************
  7012 ;; Defined at:
  7013 ;;		line 210 in file "src/api/modbus.c"
  7014 ;; Parameters:    Size  Location     Type
  7015 ;;  rbuf            1    wreg     PTR unsigned char 
  7016 ;;		 -> modbusBuf(32), 
  7017 ;;  rlen            2   24[BANK0 ] unsigned int 
  7018 ;; Auto vars:     Size  Location     Type
  7019 ;;  rbuf            1   29[BANK0 ] PTR unsigned char 
  7020 ;;		 -> modbusBuf(32), 
  7021 ;;  pmdbs           1   28[BANK0 ] PTR struct .
  7022 ;;		 -> modbusBuf(32), 
  7023 ;;  resp            1   27[BANK0 ] unsigned char 
  7024 ;; Return value:  Size  Location     Type
  7025 ;;                  1    wreg      void 
  7026 ;; Registers used:
  7027 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7028 ;; Tracked objects:
  7029 ;;		On entry : 0/0
  7030 ;;		On exit  : 0/0
  7031 ;;		Unchanged: 0/0
  7032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7033 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7034 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7035 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7036 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7037 ;;Total ram usage:        6 bytes
  7038 ;; Hardware stack levels used:    1
  7039 ;; Hardware stack levels required when called:    5
  7040 ;; This function calls:
  7041 ;;		_crc_verify
  7042 ;;		_modbus_response_command
  7043 ;;		_modbus_response_illgeal_function
  7044 ;;		_modbus_response_write_mult_register
  7045 ;;		_modbus_response_write_single_register
  7046 ;; This function is called by:
  7047 ;;		_main
  7048 ;; This function uses a non-reentrant model
  7049 ;;
  7050                           
  7051                           
  7052                           ;psect for function _modbus_response_process
  7053  1227                     _modbus_response_process:	
  7054                           
  7055                           ;incstack = 0
  7056                           ; Regs used in _modbus_response_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7057                           ;modbus_response_process@rbuf stored from wreg
  7058  1227  0020               	movlb	0	; select bank0
  7059  1228  00BD               	movwf	modbus_response_process@rbuf
  7060                           
  7061                           ;modbus.c: 211: uint8_t resp=0;
  7062  1229  01BB               	clrf	modbus_response_process@resp
  7063                           
  7064                           ;modbus.c: 212: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)rbuf;
  7065  122A  083D               	movf	modbus_response_process@rbuf,w
  7066  122B  00BA               	movwf	??_modbus_response_process
  7067  122C  083A               	movf	??_modbus_response_process,w
  7068  122D  00BC               	movwf	modbus_response_process@pmdbs
  7069                           
  7070                           ;modbus.c: 215: if((pmdbs->addr!=sysData.id) && (pmdbs->addr!=0x00))return;
  7071  122E  305C               	movlw	92
  7072  122F  0086               	movwf	6
  7073  1230  3023               	movlw	35
  7074  1231  0087               	movwf	7
  7075  1232  3142               	addfsr 1,2
  7076  1233  083C               	movf	modbus_response_process@pmdbs,w
  7077  1234  0084               	movwf	4
  7078  1235  3001               	movlw	1	; select bank2/3
  7079  1236  0085               	movwf	5
  7080  1237  0800               	movf	0,w
  7081  1238  0601               	xorwf	1,w
  7082  1239  1903               	skipnz
  7083  123A  2A42               	goto	l5072
  7084  123B  083C               	movf	modbus_response_process@pmdbs,w
  7085  123C  0086               	movwf	6
  7086  123D  3001               	movlw	1	; select bank2/3
  7087  123E  0087               	movwf	7
  7088  123F  0801               	movf	1,w
  7089  1240  1D03               	btfss	3,2
  7090  1241  0008               	return
  7091  1242                     l5072:	
  7092                           
  7093                           ;modbus.c: 216: if(!(crc_verify(rbuf,rlen)))return ;
  7094  1242  083D               	movf	modbus_response_process@rbuf,w
  7095  1243  00A6               	movwf	crc_verify@message
  7096  1244  3001               	movlw	1
  7097  1245  00A7               	movwf	crc_verify@message+1
  7098  1246  0839               	movf	modbus_response_process@rlen+1,w
  7099  1247  00A9               	movwf	crc_verify@n+1
  7100  1248  0838               	movf	modbus_response_process@rlen,w
  7101  1249  00A8               	movwf	crc_verify@n
  7102  124A  3190  2023  3192   	fcall	_crc_verify
  7103  124D  3A00               	xorlw	0
  7104  124E  1903               	btfsc	3,2
  7105  124F  0008               	return
  7106  1250  2A67               	goto	l5086
  7107  1251                     l5076:	
  7108                           ;modbus.c: 219: case 0x03:
  7109                           
  7110                           ;modbus.c: 218: switch(pmdbs->func){
  7111                           
  7112                           
  7113                           ;modbus.c: 220: modbus_response_command(rbuf);
  7114  1251  0020               	movlb	0	; select bank0
  7115  1252  083D               	movf	modbus_response_process@rbuf,w
  7116  1253  3196  2668         	fcall	_modbus_response_command
  7117                           
  7118                           ;modbus.c: 221: break;
  7119  1255  0008               	return
  7120  1256                     l5078:	
  7121                           ;modbus.c: 222: case 0x06:
  7122                           
  7123                           
  7124                           ;modbus.c: 223: case 0x26:;modbus.c: 224: modbus_response_write_single_register(rbuf);
  7125  1256  0020               	movlb	0	; select bank0
  7126  1257  083D               	movf	modbus_response_process@rbuf,w
  7127  1258  318C  241E         	fcall	_modbus_response_write_single_register
  7128                           
  7129                           ;modbus.c: 225: break;
  7130  125A  0008               	return
  7131  125B                     l5080:	
  7132                           ;modbus.c: 226: case 0x10:
  7133                           
  7134                           
  7135                           ;modbus.c: 227: modbus_response_write_mult_register(rbuf);
  7136  125B  0020               	movlb	0	; select bank0
  7137  125C  083D               	movf	modbus_response_process@rbuf,w
  7138  125D  3193  238F         	fcall	_modbus_response_write_mult_register
  7139                           
  7140                           ;modbus.c: 228: break;
  7141  125F  0008               	return
  7142  1260                     l5082:	
  7143                           ;modbus.c: 251: default:
  7144                           
  7145                           
  7146                           ;modbus.c: 252: modbus_response_illgeal_function(rbuf,0x01);break;
  7147  1260  0020               	movlb	0	; select bank0
  7148  1261  01AC               	clrf	modbus_response_illgeal_function@errcode
  7149  1262  0AAC               	incf	modbus_response_illgeal_function@errcode,f
  7150  1263  083D               	movf	modbus_response_process@rbuf,w
  7151  1264  3191  2141         	fcall	_modbus_response_illgeal_function
  7152                           
  7153                           ;modbus.c: 253: }
  7154  1266  0008               	return
  7155  1267                     l5086:	
  7156  1267  0020               	movlb	0	; select bank0
  7157  1268  0A3C               	incf	modbus_response_process@pmdbs,w
  7158  1269  0086               	movwf	6
  7159  126A  3001               	movlw	1	; select bank2/3
  7160  126B  0087               	movwf	7
  7161  126C  0801               	movf	1,w
  7162                           
  7163                           ; Switch size 1, requested type "space"
  7164                           ; Number of cases is 4, Range of values is 3 to 38
  7165                           ; switch strategies available:
  7166                           ; Name         Instructions Cycles
  7167                           ; simple_byte           13     7 (average)
  7168                           ; direct_byte           81     9 (fixed)
  7169                           ; jumptable            263     9 (fixed)
  7170                           ;	Chosen strategy is simple_byte
  7171  126D  3A03               	xorlw	3	; case 3
  7172  126E  1903               	skipnz
  7173  126F  2A51               	goto	l5076
  7174  1270  3A05               	xorlw	5	; case 6
  7175  1271  1903               	skipnz
  7176  1272  2A56               	goto	l5078
  7177  1273  3A16               	xorlw	22	; case 16
  7178  1274  1903               	skipnz
  7179  1275  2A5B               	goto	l5080
  7180  1276  3A36               	xorlw	54	; case 38
  7181  1277  1903               	skipnz
  7182  1278  2A56               	goto	l5078
  7183  1279  2A60               	goto	l5082
  7184  127A  0008               	return
  7185  127B                     __end_of_modbus_response_process:	
  7186                           
  7187                           	psect	text14
  7188  0C1E                     __ptext14:	
  7189 ;; *************** function _modbus_response_write_single_register *****************
  7190 ;; Defined at:
  7191 ;;		line 115 in file "src/api/modbus.c"
  7192 ;; Parameters:    Size  Location     Type
  7193 ;;  rbuf            1    wreg     PTR unsigned char 
  7194 ;;		 -> modbusBuf(32), 
  7195 ;; Auto vars:     Size  Location     Type
  7196 ;;  rbuf            1   21[BANK0 ] PTR unsigned char 
  7197 ;;		 -> modbusBuf(32), 
  7198 ;;  startAddr       2   22[BANK0 ] unsigned int 
  7199 ;;  t16             2   17[BANK0 ] unsigned int 
  7200 ;;  pmdbs           1   20[BANK0 ] PTR struct .
  7201 ;;		 -> modbusBuf(32), 
  7202 ;;  i               1   19[BANK0 ] unsigned char 
  7203 ;;  fiSave          1   16[BANK0 ] unsigned char 
  7204 ;; Return value:  Size  Location     Type
  7205 ;;                  1    wreg      void 
  7206 ;; Registers used:
  7207 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7208 ;; Tracked objects:
  7209 ;;		On entry : 0/0
  7210 ;;		On exit  : 0/0
  7211 ;;		Unchanged: 0/0
  7212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7214 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7215 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7216 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7217 ;;Total ram usage:       12 bytes
  7218 ;; Hardware stack levels used:    1
  7219 ;; Hardware stack levels required when called:    4
  7220 ;; This function calls:
  7221 ;;		_crc_append
  7222 ;;		_sys_data_save
  7223 ;;		_uart_send_len
  7224 ;; This function is called by:
  7225 ;;		_modbus_response_process
  7226 ;; This function uses a non-reentrant model
  7227 ;;
  7228                           
  7229                           
  7230                           ;psect for function _modbus_response_write_single_register
  7231  0C1E                     _modbus_response_write_single_register:	
  7232                           
  7233                           ;incstack = 0
  7234                           ; Regs used in _modbus_response_write_single_register: [wreg-fsr1h+status,2+status,0+pcl
      +                          ath+cstack]
  7235                           ;modbus_response_write_single_register@rbuf stored from wreg
  7236  0C1E  0020               	movlb	0	; select bank0
  7237  0C1F  00B5               	movwf	modbus_response_write_single_register@rbuf
  7238                           
  7239                           ;modbus.c: 117: uint16_t startAddr=0;
  7240  0C20  01B6               	clrf	modbus_response_write_single_register@startAddr
  7241  0C21  01B7               	clrf	modbus_response_write_single_register@startAddr+1
  7242                           
  7243                           ;modbus.c: 118: uint16_t t16;;modbus.c: 119: uint8_t fiSave=0,i;
  7244  0C22  01B0               	clrf	modbus_response_write_single_register@fiSave
  7245                           
  7246                           ;modbus.c: 120: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)rbuf;
  7247  0C23  0835               	movf	modbus_response_write_single_register@rbuf,w
  7248  0C24  00AC               	movwf	??_modbus_response_write_single_register
  7249  0C25  082C               	movf	??_modbus_response_write_single_register,w
  7250  0C26  00B4               	movwf	modbus_response_write_single_register@pmdbs
  7251                           
  7252                           ;modbus.c: 121: if(pmdbs->addr!=sysData.id && pmdbs->addr!=0)return;
  7253  0C27  305C               	movlw	92
  7254  0C28  0086               	movwf	6
  7255  0C29  3023               	movlw	35
  7256  0C2A  0087               	movwf	7
  7257  0C2B  3142               	addfsr 1,2
  7258  0C2C  0834               	movf	modbus_response_write_single_register@pmdbs,w
  7259  0C2D  0084               	movwf	4
  7260  0C2E  3001               	movlw	1	; select bank2/3
  7261  0C2F  0085               	movwf	5
  7262  0C30  0800               	movf	0,w
  7263  0C31  0601               	xorwf	1,w
  7264  0C32  1903               	skipnz
  7265  0C33  2C3B               	goto	l4696
  7266  0C34  0834               	movf	modbus_response_write_single_register@pmdbs,w
  7267  0C35  0086               	movwf	6
  7268  0C36  3001               	movlw	1	; select bank2/3
  7269  0C37  0087               	movwf	7
  7270  0C38  0801               	movf	1,w
  7271  0C39  1D03               	btfss	3,2
  7272  0C3A  0008               	return
  7273  0C3B                     l4696:	
  7274                           
  7275                           ;modbus.c: 122: if(sysData.id==253 && pmdbs->addr==0)return;
  7276  0C3B  305C               	movlw	92
  7277  0C3C  0086               	movwf	6
  7278  0C3D  3023               	movlw	35
  7279  0C3E  0087               	movwf	7
  7280  0C3F  3142               	addfsr 1,2
  7281  0C40  30FD               	movlw	253
  7282  0C41  0601               	xorwf	1,w
  7283  0C42  1D03               	btfss	3,2
  7284  0C43  2C4B               	goto	l4702
  7285  0C44  0834               	movf	modbus_response_write_single_register@pmdbs,w
  7286  0C45  0086               	movwf	6
  7287  0C46  3001               	movlw	1	; select bank2/3
  7288  0C47  0087               	movwf	7
  7289  0C48  0801               	movf	1,w
  7290  0C49  1903               	btfsc	3,2
  7291  0C4A  0008               	return
  7292  0C4B                     l4702:	
  7293                           
  7294                           ;modbus.c: 123: startAddr=pmdbs->addr_hi;
  7295  0C4B  0834               	movf	modbus_response_write_single_register@pmdbs,w
  7296  0C4C  3E02               	addlw	2
  7297  0C4D  0086               	movwf	6
  7298  0C4E  3001               	movlw	1	; select bank2/3
  7299  0C4F  0087               	movwf	7
  7300  0C50  0801               	movf	1,w
  7301  0C51  00AC               	movwf	??_modbus_response_write_single_register
  7302  0C52  01AD               	clrf	??_modbus_response_write_single_register+1
  7303  0C53  082C               	movf	??_modbus_response_write_single_register,w
  7304  0C54  00B6               	movwf	modbus_response_write_single_register@startAddr
  7305  0C55  082D               	movf	??_modbus_response_write_single_register+1,w
  7306  0C56  00B7               	movwf	modbus_response_write_single_register@startAddr+1
  7307                           
  7308                           ;modbus.c: 124: startAddr<<=8;
  7309  0C57  3008               	movlw	8
  7310  0C58                     u3965:	
  7311  0C58  35B6               	lslf	modbus_response_write_single_register@startAddr,f
  7312  0C59  0DB7               	rlf	modbus_response_write_single_register@startAddr+1,f
  7313  0C5A  0B89               	decfsz	9,f
  7314  0C5B  2C58               	goto	u3965
  7315                           
  7316                           ;modbus.c: 125: startAddr |= pmdbs->addr_lo;
  7317  0C5C  0834               	movf	modbus_response_write_single_register@pmdbs,w
  7318  0C5D  3E03               	addlw	3
  7319  0C5E  0086               	movwf	6
  7320  0C5F  3001               	movlw	1	; select bank2/3
  7321  0C60  0087               	movwf	7
  7322  0C61  0801               	movf	1,w
  7323  0C62  00AC               	movwf	??_modbus_response_write_single_register
  7324  0C63  01AD               	clrf	??_modbus_response_write_single_register+1
  7325  0C64  082C               	movf	??_modbus_response_write_single_register,w
  7326  0C65  04B6               	iorwf	modbus_response_write_single_register@startAddr,f
  7327  0C66  082D               	movf	??_modbus_response_write_single_register+1,w
  7328  0C67  04B7               	iorwf	modbus_response_write_single_register@startAddr+1,f
  7329                           
  7330                           ;modbus.c: 126: startAddr = startAddr & 0xff;
  7331  0C68  30FF               	movlw	255
  7332  0C69  0536               	andwf	modbus_response_write_single_register@startAddr,w
  7333  0C6A  00B6               	movwf	modbus_response_write_single_register@startAddr
  7334  0C6B  3000               	movlw	0
  7335  0C6C  0537               	andwf	modbus_response_write_single_register@startAddr+1,w
  7336  0C6D  00B7               	movwf	modbus_response_write_single_register@startAddr+1
  7337                           
  7338                           ;modbus.c: 127: if(startAddr==0x02){
  7339  0C6E  3002               	movlw	2
  7340  0C6F  0636               	xorwf	modbus_response_write_single_register@startAddr,w
  7341  0C70  0437               	iorwf	modbus_response_write_single_register@startAddr+1,w
  7342  0C71  1D03               	btfss	3,2
  7343  0C72  2C81               	goto	l4714
  7344                           
  7345                           ;modbus.c: 128: sysData.id=rbuf[5];
  7346  0C73  0835               	movf	modbus_response_write_single_register@rbuf,w
  7347  0C74  3E05               	addlw	5
  7348  0C75  0086               	movwf	6
  7349  0C76  3001               	movlw	1	; select bank2/3
  7350  0C77  0087               	movwf	7
  7351  0C78  0801               	movf	1,w
  7352  0C79  00AC               	movwf	??_modbus_response_write_single_register
  7353  0C7A  305E               	movlw	94
  7354  0C7B  0086               	movwf	6
  7355  0C7C  3023               	movlw	35
  7356  0C7D  0087               	movwf	7
  7357  0C7E  082C               	movf	??_modbus_response_write_single_register,w
  7358  0C7F  0081               	movwf	1
  7359  0C80  2D41               	goto	l805
  7360  0C81                     l4714:	
  7361                           ;modbus.c: 130: }else if(startAddr==0x03){
  7362                           
  7363                           ;modbus.c: 129: fiSave=1;
  7364                           
  7365  0C81  3003               	movlw	3
  7366  0C82  0636               	xorwf	modbus_response_write_single_register@startAddr,w
  7367  0C83  0437               	iorwf	modbus_response_write_single_register@startAddr+1,w
  7368  0C84  1D03               	btfss	3,2
  7369  0C85  2C9F               	goto	l4722
  7370                           
  7371                           ;modbus.c: 131: sysData.pidSetFlg1=rbuf[4];
  7372  0C86  0835               	movf	modbus_response_write_single_register@rbuf,w
  7373  0C87  3E04               	addlw	4
  7374  0C88  0086               	movwf	6
  7375  0C89  3001               	movlw	1	; select bank2/3
  7376  0C8A  0087               	movwf	7
  7377  0C8B  0801               	movf	1,w
  7378  0C8C  00AC               	movwf	??_modbus_response_write_single_register
  7379  0C8D  305D               	movlw	93
  7380  0C8E  0086               	movwf	6
  7381  0C8F  3023               	movlw	35
  7382  0C90  0087               	movwf	7
  7383  0C91  082C               	movf	??_modbus_response_write_single_register,w
  7384  0C92  0081               	movwf	1
  7385                           
  7386                           ;modbus.c: 132: sysData.pidSetFlg0=rbuf[5];
  7387  0C93  305C               	movlw	92
  7388  0C94  0086               	movwf	6
  7389  0C95  3023               	movlw	35
  7390  0C96  0087               	movwf	7
  7391  0C97  0835               	movf	modbus_response_write_single_register@rbuf,w
  7392  0C98  3E05               	addlw	5
  7393  0C99  0084               	movwf	4
  7394  0C9A  3001               	movlw	1	; select bank2/3
  7395  0C9B  0085               	movwf	5
  7396  0C9C  0800               	movf	0,w
  7397  0C9D  3FC0               	movwi [0]fsr1
  7398  0C9E  2D41               	goto	l805
  7399  0C9F                     l4722:	
  7400                           ;modbus.c: 134: }else if(startAddr>0x0f && startAddr < 0x10+30*2){
  7401                           
  7402                           ;modbus.c: 133: fiSave=1;
  7403                           
  7404  0C9F  3000               	movlw	0
  7405  0CA0  0237               	subwf	modbus_response_write_single_register@startAddr+1,w
  7406  0CA1  3010               	movlw	16
  7407  0CA2  1903               	skipnz
  7408  0CA3  0236               	subwf	modbus_response_write_single_register@startAddr,w
  7409  0CA4  1C03               	skipc
  7410  0CA5  0008               	return
  7411  0CA6  3000               	movlw	0
  7412  0CA7  0237               	subwf	modbus_response_write_single_register@startAddr+1,w
  7413  0CA8  304C               	movlw	76
  7414  0CA9  1903               	skipnz
  7415  0CAA  0236               	subwf	modbus_response_write_single_register@startAddr,w
  7416  0CAB  1803               	skipnc
  7417  0CAC  0008               	return
  7418                           
  7419                           ;modbus.c: 135: startAddr-=0x10;
  7420  0CAD  3010               	movlw	16
  7421  0CAE  02B6               	subwf	modbus_response_write_single_register@startAddr,f
  7422  0CAF  3000               	movlw	0
  7423  0CB0  3BB7               	subwfb	modbus_response_write_single_register@startAddr+1,f
  7424                           
  7425                           ;modbus.c: 136: if(startAddr & 0x01){
  7426  0CB1  1C36               	btfss	modbus_response_write_single_register@startAddr,0
  7427  0CB2  2D43               	goto	l4754
  7428                           
  7429                           ;modbus.c: 137: t16=rbuf[4];
  7430  0CB3  0835               	movf	modbus_response_write_single_register@rbuf,w
  7431  0CB4  3E04               	addlw	4
  7432  0CB5  0086               	movwf	6
  7433  0CB6  3001               	movlw	1	; select bank2/3
  7434  0CB7  0087               	movwf	7
  7435  0CB8  0801               	movf	1,w
  7436  0CB9  00AC               	movwf	??_modbus_response_write_single_register
  7437  0CBA  01AD               	clrf	??_modbus_response_write_single_register+1
  7438  0CBB  082C               	movf	??_modbus_response_write_single_register,w
  7439  0CBC  00B1               	movwf	modbus_response_write_single_register@t16
  7440  0CBD  082D               	movf	??_modbus_response_write_single_register+1,w
  7441  0CBE  00B2               	movwf	modbus_response_write_single_register@t16+1
  7442                           
  7443                           ;modbus.c: 138: t16<<=8;
  7444  0CBF  3008               	movlw	8
  7445  0CC0                     u4025:	
  7446  0CC0  35B1               	lslf	modbus_response_write_single_register@t16,f
  7447  0CC1  0DB2               	rlf	modbus_response_write_single_register@t16+1,f
  7448  0CC2  0B89               	decfsz	9,f
  7449  0CC3  2CC0               	goto	u4025
  7450                           
  7451                           ;modbus.c: 139: t16 |= rbuf[5];
  7452  0CC4  0835               	movf	modbus_response_write_single_register@rbuf,w
  7453  0CC5  3E05               	addlw	5
  7454  0CC6  0086               	movwf	6
  7455  0CC7  3001               	movlw	1	; select bank2/3
  7456  0CC8  0087               	movwf	7
  7457  0CC9  0801               	movf	1,w
  7458  0CCA  00AC               	movwf	??_modbus_response_write_single_register
  7459  0CCB  01AD               	clrf	??_modbus_response_write_single_register+1
  7460  0CCC  082C               	movf	??_modbus_response_write_single_register,w
  7461  0CCD  04B1               	iorwf	modbus_response_write_single_register@t16,f
  7462  0CCE  082D               	movf	??_modbus_response_write_single_register+1,w
  7463  0CCF  04B2               	iorwf	modbus_response_write_single_register@t16+1,f
  7464                           
  7465                           ;modbus.c: 140: sysData.calibVoMV[startAddr>>1]=t16;
  7466  0CD0  0837               	movf	modbus_response_write_single_register@startAddr+1,w
  7467  0CD1  00AD               	movwf	??_modbus_response_write_single_register+1
  7468  0CD2  0836               	movf	modbus_response_write_single_register@startAddr,w
  7469  0CD3  00AC               	movwf	??_modbus_response_write_single_register
  7470  0CD4  36AD               	lsrf	??_modbus_response_write_single_register+1,f
  7471  0CD5  0CAC               	rrf	??_modbus_response_write_single_register,f
  7472  0CD6  35AC               	lslf	??_modbus_response_write_single_register,f
  7473  0CD7  0DAD               	rlf	??_modbus_response_write_single_register+1,f
  7474  0CD8  30A2               	movlw	162
  7475  0CD9  00AE               	movwf	??_modbus_response_write_single_register+2
  7476  0CDA  3023               	movlw	35
  7477  0CDB  00AF               	movwf	??_modbus_response_write_single_register+3
  7478  0CDC  082C               	movf	??_modbus_response_write_single_register,w
  7479  0CDD  072E               	addwf	??_modbus_response_write_single_register+2,w
  7480  0CDE  0086               	movwf	6
  7481  0CDF  082D               	movf	??_modbus_response_write_single_register+1,w
  7482  0CE0  3D2F               	addwfc	??_modbus_response_write_single_register+3,w
  7483  0CE1  0087               	movwf	7
  7484  0CE2  0831               	movf	modbus_response_write_single_register@t16,w
  7485  0CE3  3FC0               	movwi [0]fsr1
  7486  0CE4  0832               	movf	modbus_response_write_single_register@t16+1,w
  7487  0CE5  3FC1               	movwi [1]fsr1
  7488                           
  7489                           ;modbus.c: 141: sysData.calibRsAdc[startAddr>>1]=rsLoAvg;
  7490  0CE6  0837               	movf	modbus_response_write_single_register@startAddr+1,w
  7491  0CE7  00AD               	movwf	??_modbus_response_write_single_register+1
  7492  0CE8  0836               	movf	modbus_response_write_single_register@startAddr,w
  7493  0CE9  00AC               	movwf	??_modbus_response_write_single_register
  7494  0CEA  36AD               	lsrf	??_modbus_response_write_single_register+1,f
  7495  0CEB  0CAC               	rrf	??_modbus_response_write_single_register,f
  7496  0CEC  35AC               	lslf	??_modbus_response_write_single_register,f
  7497  0CED  0DAD               	rlf	??_modbus_response_write_single_register+1,f
  7498  0CEE  3066               	movlw	102
  7499  0CEF  00AE               	movwf	??_modbus_response_write_single_register+2
  7500  0CF0  3023               	movlw	35
  7501  0CF1  00AF               	movwf	??_modbus_response_write_single_register+3
  7502  0CF2  082C               	movf	??_modbus_response_write_single_register,w
  7503  0CF3  072E               	addwf	??_modbus_response_write_single_register+2,w
  7504  0CF4  0086               	movwf	6
  7505  0CF5  082D               	movf	??_modbus_response_write_single_register+1,w
  7506  0CF6  3D2F               	addwfc	??_modbus_response_write_single_register+3,w
  7507  0CF7  0087               	movwf	7
  7508  0CF8  0853               	movf	_rsLoAvg,w
  7509  0CF9  3FC0               	movwi [0]fsr1
  7510  0CFA  0854               	movf	_rsLoAvg+1,w
  7511  0CFB  3FC1               	movwi [1]fsr1
  7512                           
  7513                           ;modbus.c: 143: if(rbuf[1]==0x26){
  7514  0CFC  0A35               	incf	modbus_response_write_single_register@rbuf,w
  7515  0CFD  0086               	movwf	6
  7516  0CFE  3001               	movlw	1	; select bank2/3
  7517  0CFF  0087               	movwf	7
  7518  0D00  3026               	movlw	38
  7519  0D01  0601               	xorwf	1,w
  7520  0D02  1D03               	btfss	3,2
  7521  0D03  2D41               	goto	l805
  7522                           
  7523                           ;modbus.c: 144: for(i=(startAddr>>1)+1;i<30;i++){
  7524  0D04  0837               	movf	modbus_response_write_single_register@startAddr+1,w
  7525  0D05  00AD               	movwf	??_modbus_response_write_single_register+1
  7526  0D06  0836               	movf	modbus_response_write_single_register@startAddr,w
  7527  0D07  00AC               	movwf	??_modbus_response_write_single_register
  7528  0D08  36AD               	lsrf	??_modbus_response_write_single_register+1,f
  7529  0D09  0CAC               	rrf	??_modbus_response_write_single_register,f
  7530  0D0A  082C               	movf	??_modbus_response_write_single_register,w
  7531  0D0B  3E01               	addlw	1
  7532  0D0C  00AE               	movwf	??_modbus_response_write_single_register+2
  7533  0D0D  082E               	movf	??_modbus_response_write_single_register+2,w
  7534  0D0E  00B3               	movwf	modbus_response_write_single_register@i
  7535  0D0F  301E               	movlw	30
  7536  0D10  0233               	subwf	modbus_response_write_single_register@i,w
  7537  0D11  1803               	btfsc	3,0
  7538  0D12  2D41               	goto	l805
  7539  0D13                     l4748:	
  7540                           
  7541                           ;modbus.c: 145: sysData.calibVoMV[i]=t16;
  7542  0D13  0833               	movf	modbus_response_write_single_register@i,w
  7543  0D14  00AC               	movwf	??_modbus_response_write_single_register
  7544  0D15  01AD               	clrf	??_modbus_response_write_single_register+1
  7545  0D16  35AC               	lslf	??_modbus_response_write_single_register,f
  7546  0D17  0DAD               	rlf	??_modbus_response_write_single_register+1,f
  7547  0D18  30A2               	movlw	162
  7548  0D19  00AE               	movwf	??_modbus_response_write_single_register+2
  7549  0D1A  3023               	movlw	35
  7550  0D1B  00AF               	movwf	??_modbus_response_write_single_register+3
  7551  0D1C  082C               	movf	??_modbus_response_write_single_register,w
  7552  0D1D  072E               	addwf	??_modbus_response_write_single_register+2,w
  7553  0D1E  0086               	movwf	6
  7554  0D1F  082D               	movf	??_modbus_response_write_single_register+1,w
  7555  0D20  3D2F               	addwfc	??_modbus_response_write_single_register+3,w
  7556  0D21  0087               	movwf	7
  7557  0D22  0831               	movf	modbus_response_write_single_register@t16,w
  7558  0D23  3FC0               	movwi [0]fsr1
  7559  0D24  0832               	movf	modbus_response_write_single_register@t16+1,w
  7560  0D25  3FC1               	movwi [1]fsr1
  7561                           
  7562                           ;modbus.c: 146: sysData.calibRsAdc[i]=rsLoAvg;
  7563  0D26  0833               	movf	modbus_response_write_single_register@i,w
  7564  0D27  00AC               	movwf	??_modbus_response_write_single_register
  7565  0D28  01AD               	clrf	??_modbus_response_write_single_register+1
  7566  0D29  35AC               	lslf	??_modbus_response_write_single_register,f
  7567  0D2A  0DAD               	rlf	??_modbus_response_write_single_register+1,f
  7568  0D2B  3066               	movlw	102
  7569  0D2C  00AE               	movwf	??_modbus_response_write_single_register+2
  7570  0D2D  3023               	movlw	35
  7571  0D2E  00AF               	movwf	??_modbus_response_write_single_register+3
  7572  0D2F  082C               	movf	??_modbus_response_write_single_register,w
  7573  0D30  072E               	addwf	??_modbus_response_write_single_register+2,w
  7574  0D31  0086               	movwf	6
  7575  0D32  082D               	movf	??_modbus_response_write_single_register+1,w
  7576  0D33  3D2F               	addwfc	??_modbus_response_write_single_register+3,w
  7577  0D34  0087               	movwf	7
  7578  0D35  0853               	movf	_rsLoAvg,w
  7579  0D36  3FC0               	movwi [0]fsr1
  7580  0D37  0854               	movf	_rsLoAvg+1,w
  7581  0D38  3FC1               	movwi [1]fsr1
  7582  0D39  3001               	movlw	1
  7583  0D3A  00AC               	movwf	??_modbus_response_write_single_register
  7584  0D3B  082C               	movf	??_modbus_response_write_single_register,w
  7585  0D3C  07B3               	addwf	modbus_response_write_single_register@i,f
  7586  0D3D  301E               	movlw	30
  7587  0D3E  0233               	subwf	modbus_response_write_single_register@i,w
  7588  0D3F  1C03               	skipc
  7589  0D40  2D13               	goto	l4748
  7590  0D41                     l805:	
  7591                           
  7592                           ;modbus.c: 147: };modbus.c: 148: };modbus.c: 149: fiSave=1;
  7593  0D41  01B0               	clrf	modbus_response_write_single_register@fiSave
  7594  0D42  0AB0               	incf	modbus_response_write_single_register@fiSave,f
  7595  0D43                     l4754:	
  7596                           ;modbus.c: 153: return;
  7597                           
  7598                           ;modbus.c: 150: };modbus.c: 151: }else{
  7599                           
  7600                           
  7601                           ;modbus.c: 154: };modbus.c: 155: if(fiSave)sys_data_save();
  7602  0D43  0830               	movf	modbus_response_write_single_register@fiSave,w
  7603  0D44  1903               	btfsc	3,2
  7604  0D45  2D49               	goto	l4758
  7605  0D46  3190  205A  318C   	fcall	_sys_data_save
  7606  0D49                     l4758:	
  7607                           
  7608                           ;modbus.c: 156: if(pmdbs->addr==0)return;
  7609  0D49  0020               	movlb	0	; select bank0
  7610  0D4A  0834               	movf	modbus_response_write_single_register@pmdbs,w
  7611  0D4B  0086               	movwf	6
  7612  0D4C  3001               	movlw	1	; select bank2/3
  7613  0D4D  0087               	movwf	7
  7614  0D4E  0801               	movf	1,w
  7615  0D4F  1903               	btfsc	3,2
  7616  0D50  0008               	return
  7617                           
  7618                           ;modbus.c: 157: rbuf[0]=sysData.id;
  7619  0D51  305C               	movlw	92
  7620  0D52  0086               	movwf	6
  7621  0D53  3023               	movlw	35
  7622  0D54  0087               	movwf	7
  7623  0D55  3142               	addfsr 1,2
  7624  0D56  0801               	movf	1,w
  7625  0D57  00AC               	movwf	??_modbus_response_write_single_register
  7626  0D58  0835               	movf	modbus_response_write_single_register@rbuf,w
  7627  0D59  0086               	movwf	6
  7628  0D5A  3001               	movlw	1	; select bank2/3
  7629  0D5B  0087               	movwf	7
  7630  0D5C  082C               	movf	??_modbus_response_write_single_register,w
  7631  0D5D  0081               	movwf	1
  7632                           
  7633                           ;modbus.c: 158: crc_append(rbuf,6);
  7634  0D5E  0835               	movf	modbus_response_write_single_register@rbuf,w
  7635  0D5F  00A6               	movwf	crc_append@message
  7636  0D60  3001               	movlw	1
  7637  0D61  00A7               	movwf	crc_append@message+1
  7638  0D62  3006               	movlw	6
  7639  0D63  00A8               	movwf	crc_append@n
  7640  0D64  3000               	movlw	0
  7641  0D65  00A9               	movwf	crc_append@n+1
  7642  0D66  319E  2669  318C   	fcall	_crc_append
  7643                           
  7644                           ;modbus.c: 159: uart_send_len(rbuf,8);
  7645  0D69  3008               	movlw	8
  7646  0D6A  0020               	movlb	0	; select bank0
  7647  0D6B  00AC               	movwf	??_modbus_response_write_single_register
  7648  0D6C  082C               	movf	??_modbus_response_write_single_register,w
  7649  0D6D  00F1               	movwf	uart_send_len@len
  7650  0D6E  0835               	movf	modbus_response_write_single_register@rbuf,w
  7651  0D6F  3190  20C9         	fcall	_uart_send_len
  7652  0D71  0008               	return
  7653  0D72                     __end_of_modbus_response_write_single_register:	
  7654                           
  7655                           	psect	text15
  7656  138F                     __ptext15:	
  7657 ;; *************** function _modbus_response_write_mult_register *****************
  7658 ;; Defined at:
  7659 ;;		line 162 in file "src/api/modbus.c"
  7660 ;; Parameters:    Size  Location     Type
  7661 ;;  rbuf            1    wreg     PTR unsigned char 
  7662 ;;		 -> modbusBuf(32), 
  7663 ;; Auto vars:     Size  Location     Type
  7664 ;;  rbuf            1   15[BANK0 ] PTR unsigned char 
  7665 ;;		 -> modbusBuf(32), 
  7666 ;;  stb             1   16[BANK0 ] PTR struct .
  7667 ;;		 -> modbusBuf(32), 
  7668 ;;  len             1   14[BANK0 ] unsigned char 
  7669 ;;  startAddr       1   13[BANK0 ] unsigned char 
  7670 ;; Return value:  Size  Location     Type
  7671 ;;                  1    wreg      void 
  7672 ;; Registers used:
  7673 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7674 ;; Tracked objects:
  7675 ;;		On entry : 0/0
  7676 ;;		On exit  : 0/0
  7677 ;;		Unchanged: 0/0
  7678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7680 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7681 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7682 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7683 ;;Total ram usage:        5 bytes
  7684 ;; Hardware stack levels used:    1
  7685 ;; Hardware stack levels required when called:    4
  7686 ;; This function calls:
  7687 ;;		_crc_append
  7688 ;;		_sys_data_save
  7689 ;;		_uart_send_len
  7690 ;; This function is called by:
  7691 ;;		_modbus_response_process
  7692 ;; This function uses a non-reentrant model
  7693 ;;
  7694                           
  7695                           
  7696                           ;psect for function _modbus_response_write_mult_register
  7697  138F                     _modbus_response_write_mult_register:	
  7698                           
  7699                           ;incstack = 0
  7700                           ; Regs used in _modbus_response_write_mult_register: [wreg-fsr1h+status,2+status,0+pclat
      +                          h+cstack]
  7701                           ;modbus_response_write_mult_register@rbuf stored from wreg
  7702  138F  0020               	movlb	0	; select bank0
  7703  1390  00AF               	movwf	modbus_response_write_mult_register@rbuf
  7704                           
  7705                           ;modbus.c: 164: uint8_t startAddr,len;;modbus.c: 166: st_modbusWriteMultReg_t* stb=(st_m
      +                          odbusWriteMultReg_t*)rbuf;
  7706  1391  082F               	movf	modbus_response_write_mult_register@rbuf,w
  7707  1392  00AC               	movwf	??_modbus_response_write_mult_register
  7708  1393  082C               	movf	??_modbus_response_write_mult_register,w
  7709  1394  00B0               	movwf	modbus_response_write_mult_register@stb
  7710                           
  7711                           ;modbus.c: 167: if(stb->addr!=sysData.id || stb->addr==0)return;
  7712  1395  305C               	movlw	92
  7713  1396  0086               	movwf	6
  7714  1397  3023               	movlw	35
  7715  1398  0087               	movwf	7
  7716  1399  3142               	addfsr 1,2
  7717  139A  0830               	movf	modbus_response_write_mult_register@stb,w
  7718  139B  0084               	movwf	4
  7719  139C  3001               	movlw	1	; select bank2/3
  7720  139D  0085               	movwf	5
  7721  139E  0800               	movf	0,w
  7722  139F  0601               	xorwf	1,w
  7723  13A0  1D03               	skipz
  7724  13A1  0008               	return
  7725  13A2  0830               	movf	modbus_response_write_mult_register@stb,w
  7726  13A3  0086               	movwf	6
  7727  13A4  3001               	movlw	1	; select bank2/3
  7728  13A5  0087               	movwf	7
  7729  13A6  0801               	movf	1,w
  7730  13A7  1903               	btfsc	3,2
  7731  13A8  0008               	return
  7732                           
  7733                           ;modbus.c: 168: startAddr=stb->addr_lo;
  7734  13A9  0830               	movf	modbus_response_write_mult_register@stb,w
  7735  13AA  0086               	movwf	6
  7736  13AB  3001               	movlw	1	; select bank2/3
  7737  13AC  0087               	movwf	7
  7738  13AD  3001               	movlw	1	; select bank2/3
  7739  13AE  3F43               	moviw [3]fsr1
  7740  13AF  00AD               	movwf	modbus_response_write_mult_register@startAddr
  7741                           
  7742                           ;modbus.c: 169: len=stb->len_lo;
  7743  13B0  0830               	movf	modbus_response_write_mult_register@stb,w
  7744  13B1  0086               	movwf	6
  7745  13B2  3001               	movlw	1	; select bank2/3
  7746  13B3  0087               	movwf	7
  7747  13B4  3001               	movlw	1	; select bank2/3
  7748  13B5  3F45               	moviw [5]fsr1
  7749  13B6  00AE               	movwf	modbus_response_write_mult_register@len
  7750                           
  7751                           ;modbus.c: 170: if(len!=3)return ;
  7752  13B7  3003               	movlw	3
  7753  13B8  062E               	xorwf	modbus_response_write_mult_register@len,w
  7754  13B9  1D03               	btfss	3,2
  7755  13BA  0008               	return
  7756                           
  7757                           ;modbus.c: 171: if(startAddr!=4)return;
  7758  13BB  3004               	movlw	4
  7759  13BC  062D               	xorwf	modbus_response_write_mult_register@startAddr,w
  7760  13BD  1D03               	btfss	3,2
  7761  13BE  0008               	return
  7762                           
  7763                           ;modbus.c: 173: sysData.pidKp=(stb->data[0]<<8)|(stb->data[1]);
  7764  13BF  0830               	movf	modbus_response_write_mult_register@stb,w
  7765  13C0  3E06               	addlw	6
  7766  13C1  0084               	movwf	4
  7767  13C2  3001               	movlw	1	; select bank2/3
  7768  13C3  0085               	movwf	5
  7769  13C4  0800               	movf	0,w
  7770  13C5  00AC               	movwf	??_modbus_response_write_mult_register
  7771  13C6  0830               	movf	modbus_response_write_mult_register@stb,w
  7772  13C7  3E07               	addlw	7
  7773  13C8  0084               	movwf	4
  7774  13C9  3001               	movlw	1	; select bank2/3
  7775  13CA  0085               	movwf	5
  7776  13CB  305C               	movlw	92
  7777  13CC  0086               	movwf	6
  7778  13CD  3023               	movlw	35
  7779  13CE  0087               	movwf	7
  7780  13CF  3144               	addfsr 1,4
  7781  13D0  0800               	movf	0,w
  7782  13D1  3FC0               	movwi [0]fsr1
  7783  13D2  082C               	movf	??_modbus_response_write_mult_register,w
  7784  13D3  3FC1               	movwi [1]fsr1
  7785                           
  7786                           ;modbus.c: 174: sysData.pidTi=(stb->data[2]<<8)|(stb->data[3]);
  7787  13D4  0830               	movf	modbus_response_write_mult_register@stb,w
  7788  13D5  3E08               	addlw	8
  7789  13D6  0084               	movwf	4
  7790  13D7  3001               	movlw	1	; select bank2/3
  7791  13D8  0085               	movwf	5
  7792  13D9  0800               	movf	0,w
  7793  13DA  00AC               	movwf	??_modbus_response_write_mult_register
  7794  13DB  0830               	movf	modbus_response_write_mult_register@stb,w
  7795  13DC  3E09               	addlw	9
  7796  13DD  0084               	movwf	4
  7797  13DE  3001               	movlw	1	; select bank2/3
  7798  13DF  0085               	movwf	5
  7799  13E0  305C               	movlw	92
  7800  13E1  0086               	movwf	6
  7801  13E2  3023               	movlw	35
  7802  13E3  0087               	movwf	7
  7803  13E4  3146               	addfsr 1,6
  7804  13E5  0800               	movf	0,w
  7805  13E6  3FC0               	movwi [0]fsr1
  7806  13E7  082C               	movf	??_modbus_response_write_mult_register,w
  7807  13E8  3FC1               	movwi [1]fsr1
  7808                           
  7809                           ;modbus.c: 176: sys_data_save();
  7810  13E9  3190  205A  3193   	fcall	_sys_data_save
  7811                           
  7812                           ;modbus.c: 177: crc_append(rbuf,sizeof(st_modbusWriteMultReg_t)-2);
  7813  13EC  0020               	movlb	0	; select bank0
  7814  13ED  082F               	movf	modbus_response_write_mult_register@rbuf,w
  7815  13EE  00A6               	movwf	crc_append@message
  7816  13EF  3001               	movlw	1
  7817  13F0  00A7               	movwf	crc_append@message+1
  7818  13F1  3006               	movlw	6
  7819  13F2  00A8               	movwf	crc_append@n
  7820  13F3  3000               	movlw	0
  7821  13F4  00A9               	movwf	crc_append@n+1
  7822  13F5  319E  2669  3193   	fcall	_crc_append
  7823                           
  7824                           ;modbus.c: 178: uart_send_len(rbuf,sizeof(st_modbusWriteMultReg_t));
  7825  13F8  3008               	movlw	8
  7826  13F9  0020               	movlb	0	; select bank0
  7827  13FA  00AC               	movwf	??_modbus_response_write_mult_register
  7828  13FB  082C               	movf	??_modbus_response_write_mult_register,w
  7829  13FC  00F1               	movwf	uart_send_len@len
  7830  13FD  082F               	movf	modbus_response_write_mult_register@rbuf,w
  7831  13FE  3190  20C9         	fcall	_uart_send_len
  7832  1400  0008               	return
  7833  1401                     __end_of_modbus_response_write_mult_register:	
  7834                           
  7835                           	psect	text16
  7836  105A                     __ptext16:	
  7837 ;; *************** function _sys_data_save *****************
  7838 ;; Defined at:
  7839 ;;		line 95 in file "src/api/sysData.c"
  7840 ;; Parameters:    Size  Location     Type
  7841 ;;		None
  7842 ;; Auto vars:     Size  Location     Type
  7843 ;;		None
  7844 ;; Return value:  Size  Location     Type
  7845 ;;                  1    wreg      void 
  7846 ;; Registers used:
  7847 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7848 ;; Tracked objects:
  7849 ;;		On entry : 0/0
  7850 ;;		On exit  : 0/0
  7851 ;;		Unchanged: 0/0
  7852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7856 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7857 ;;Total ram usage:        0 bytes
  7858 ;; Hardware stack levels used:    1
  7859 ;; Hardware stack levels required when called:    3
  7860 ;; This function calls:
  7861 ;;		_crc_append
  7862 ;;		_my_flash_read_system_erase
  7863 ;;		_my_flash_system_write
  7864 ;; This function is called by:
  7865 ;;		_sys_data_init
  7866 ;;		_modbus_response_write_single_register
  7867 ;;		_modbus_response_write_mult_register
  7868 ;; This function uses a non-reentrant model
  7869 ;;
  7870                           
  7871                           
  7872                           ;psect for function _sys_data_save
  7873  105A                     _sys_data_save:	
  7874                           
  7875                           ;sysData.c: 97: crc_append((uint8_t*)&sysData,sizeof(sysData_t)-2);
  7876                           
  7877                           ;incstack = 0
  7878                           ; Regs used in _sys_data_save: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7879  105A  305C               	movlw	92
  7880  105B  0020               	movlb	0	; select bank0
  7881  105C  00A6               	movwf	crc_append@message
  7882  105D  3023               	movlw	35
  7883  105E  00A7               	movwf	crc_append@message+1
  7884  105F  3082               	movlw	130
  7885  1060  00A8               	movwf	crc_append@n
  7886  1061  3000               	movlw	0
  7887  1062  00A9               	movwf	crc_append@n+1
  7888  1063  319E  2669  3190   	fcall	_crc_append
  7889                           
  7890                           ;sysData.c: 98: my_flash_read_system_erase();
  7891  1066  3190  2000  3190   	fcall	_my_flash_read_system_erase
  7892                           
  7893                           ;sysData.c: 99: my_flash_system_write((uint8_t*)&sysData,sizeof(sysData_t));
  7894  1069  305C               	movlw	92
  7895  106A  00F1               	movwf	my_flash_system_write@buf
  7896  106B  3023               	movlw	35
  7897  106C  00F2               	movwf	my_flash_system_write@buf+1
  7898  106D  3084               	movlw	132
  7899  106E  00F3               	movwf	my_flash_system_write@len
  7900  106F  3000               	movlw	0
  7901  1070  00F4               	movwf	my_flash_system_write@len+1
  7902  1071  3194  2401         	fcall	_my_flash_system_write
  7903                           
  7904                           ;sysData.c: 100: PidKp=sysData.pidKp;
  7905  1073  305C               	movlw	92
  7906  1074  0086               	movwf	6
  7907  1075  3023               	movlw	35
  7908  1076  0087               	movwf	7
  7909  1077  3144               	addfsr 1,4
  7910  1078  3F40               	moviw [0]fsr1
  7911  1079  0020               	movlb	0	; select bank0
  7912  107A  00D7               	movwf	_PidKp
  7913  107B  3F41               	moviw [1]fsr1
  7914  107C  00D8               	movwf	_PidKp+1
  7915                           
  7916                           ;sysData.c: 101: PidTi=sysData.pidTi;
  7917  107D  305C               	movlw	92
  7918  107E  0086               	movwf	6
  7919  107F  3023               	movlw	35
  7920  1080  0087               	movwf	7
  7921  1081  3146               	addfsr 1,6
  7922  1082  3F40               	moviw [0]fsr1
  7923  1083  0021               	movlb	1	; select bank1
  7924  1084  00CA               	movwf	_PidTi^(0+128)
  7925  1085  3F41               	moviw [1]fsr1
  7926  1086  00CB               	movwf	(_PidTi+1)^(0+128)
  7927                           
  7928                           ;sysData.c: 102: PidTd=sysData.pidTd;;
  7929  1087  305C               	movlw	92
  7930  1088  0086               	movwf	6
  7931  1089  3023               	movlw	35
  7932  108A  0087               	movwf	7
  7933  108B  3148               	addfsr 1,8
  7934  108C  3F40               	moviw [0]fsr1
  7935  108D  00C8               	movwf	_PidTd^(0+128)
  7936  108E  3F41               	moviw [1]fsr1
  7937  108F  00C9               	movwf	(_PidTd+1)^(0+128)
  7938  1090  0008               	return
  7939  1091                     __end_of_sys_data_save:	
  7940                           
  7941                           	psect	text17
  7942  1401                     __ptext17:	
  7943 ;; *************** function _my_flash_system_write *****************
  7944 ;; Defined at:
  7945 ;;		line 47 in file "src/api/sysData.c"
  7946 ;; Parameters:    Size  Location     Type
  7947 ;;  buf             2    1[COMMON] PTR unsigned char 
  7948 ;;		 -> sysData(132), 
  7949 ;;  len             2    3[COMMON] unsigned int 
  7950 ;; Auto vars:     Size  Location     Type
  7951 ;;  flashAddr       2    7[BANK0 ] unsigned int 
  7952 ;;  loc             2    5[BANK0 ] unsigned int 
  7953 ;;  blocNum         2    3[BANK0 ] unsigned int 
  7954 ;;  j               2    0[BANK0 ] unsigned int 
  7955 ;;  i               1    9[BANK0 ] unsigned char 
  7956 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
  7957 ;; Return value:  Size  Location     Type
  7958 ;;                  2    1[COMMON] unsigned int 
  7959 ;; Registers used:
  7960 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7961 ;; Tracked objects:
  7962 ;;		On entry : 0/0
  7963 ;;		On exit  : 0/0
  7964 ;;		Unchanged: 0/0
  7965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7966 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7967 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7968 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7969 ;;      Totals:         6      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7970 ;;Total ram usage:       16 bytes
  7971 ;; Hardware stack levels used:    1
  7972 ;; Hardware stack levels required when called:    1
  7973 ;; This function calls:
  7974 ;;		Nothing
  7975 ;; This function is called by:
  7976 ;;		_sys_data_save
  7977 ;; This function uses a non-reentrant model
  7978 ;;
  7979                           
  7980                           
  7981                           ;psect for function _my_flash_system_write
  7982  1401                     _my_flash_system_write:	
  7983                           
  7984                           ;sysData.c: 49: uint16_t blocNum=0;
  7985                           
  7986                           ;incstack = 0
  7987                           ; Regs used in _my_flash_system_write: [wreg+fsr1l+fsr1h+status,2+status,0]
  7988  1401  0020               	movlb	0	; select bank0
  7989  1402  01A3               	clrf	my_flash_system_write@blocNum
  7990  1403  01A4               	clrf	my_flash_system_write@blocNum+1
  7991                           
  7992                           ;sysData.c: 50: uint16_t loc,j;;sysData.c: 51: uint16_t flashAddr=0x1f00;
  7993  1404  3000               	movlw	0
  7994  1405  00A7               	movwf	my_flash_system_write@flashAddr
  7995  1406  301F               	movlw	31
  7996  1407  00A8               	movwf	my_flash_system_write@flashAddr+1
  7997                           
  7998                           ;sysData.c: 52: uint8_t GIEBitValue=INTCONbits.GIE;
  7999  1408  3000               	movlw	0
  8000  1409  1B8B               	btfsc	11,7	;volatile
  8001  140A  3001               	movlw	1
  8002  140B  00A2               	movwf	my_flash_system_write@GIEBitValue
  8003                           
  8004                           ;sysData.c: 53: uint8_t i=0;
  8005  140C  01A9               	clrf	my_flash_system_write@i
  8006                           
  8007                           ;sysData.c: 54: blocNum=len/32;
  8008  140D  0874               	movf	my_flash_system_write@len+1,w
  8009  140E  00F6               	movwf	??_my_flash_system_write+1
  8010  140F  0873               	movf	my_flash_system_write@len,w
  8011  1410  00F5               	movwf	??_my_flash_system_write
  8012  1411  3005               	movlw	5
  8013  1412                     u2125:	
  8014  1412  36F6               	lsrf	??_my_flash_system_write+1,f
  8015  1413  0CF5               	rrf	??_my_flash_system_write,f
  8016  1414  0B89               	decfsz	9,f
  8017  1415  2C12               	goto	u2125
  8018  1416  0875               	movf	??_my_flash_system_write,w
  8019  1417  00A3               	movwf	my_flash_system_write@blocNum
  8020  1418  0876               	movf	??_my_flash_system_write+1,w
  8021  1419  00A4               	movwf	my_flash_system_write@blocNum+1
  8022                           
  8023                           ;sysData.c: 55: if(len%32)blocNum++;
  8024  141A  301F               	movlw	31
  8025  141B  0573               	andwf	my_flash_system_write@len,w
  8026  141C  00F5               	movwf	??_my_flash_system_write
  8027  141D  3000               	movlw	0
  8028  141E  0574               	andwf	my_flash_system_write@len+1,w
  8029  141F  00F6               	movwf	??_my_flash_system_write+1
  8030  1420  0875               	movf	??_my_flash_system_write,w
  8031  1421  0476               	iorwf	??_my_flash_system_write+1,w
  8032  1422  1903               	btfsc	3,2
  8033  1423  2C28               	goto	l3312
  8034  1424  3001               	movlw	1
  8035  1425  07A3               	addwf	my_flash_system_write@blocNum,f
  8036  1426  3000               	movlw	0
  8037  1427  3DA4               	addwfc	my_flash_system_write@blocNum+1,f
  8038  1428                     l3312:	
  8039                           
  8040                           ;sysData.c: 57: INTCONbits.GIE = 0;
  8041  1428  138B               	bcf	11,7	;volatile
  8042                           
  8043                           ;sysData.c: 58: loc=0;
  8044  1429  01A5               	clrf	my_flash_system_write@loc
  8045  142A  01A6               	clrf	my_flash_system_write@loc+1
  8046                           
  8047                           ;sysData.c: 59: for(j=0;j<blocNum;j++){
  8048  142B  01A0               	clrf	my_flash_system_write@j
  8049  142C  01A1               	clrf	my_flash_system_write@j+1
  8050  142D                     l715:	
  8051  142D  0824               	movf	my_flash_system_write@blocNum+1,w
  8052  142E  0221               	subwf	my_flash_system_write@j+1,w
  8053  142F  1D03               	skipz
  8054  1430  2C33               	goto	u2185
  8055  1431  0823               	movf	my_flash_system_write@blocNum,w
  8056  1432  0220               	subwf	my_flash_system_write@j,w
  8057  1433                     u2185:	
  8058  1433  1803               	btfsc	3,0
  8059  1434  2C89               	goto	l3356
  8060                           
  8061                           ;sysData.c: 60: PMCON1bits.CFGS = 0;
  8062  1435  0023               	movlb	3	; select bank3
  8063  1436  1315               	bcf	21,6	;volatile
  8064                           
  8065                           ;sysData.c: 61: PMCON1bits.WREN = 1;
  8066  1437  1515               	bsf	21,2	;volatile
  8067                           
  8068                           ;sysData.c: 62: PMCON1bits.LWLO = 1;
  8069  1438  1695               	bsf	21,5	;volatile
  8070                           
  8071                           ;sysData.c: 64: for(i=0;i<32;i++){
  8072  1439  0020               	movlb	0	; select bank0
  8073  143A  01A9               	clrf	my_flash_system_write@i
  8074  143B  3020               	movlw	32
  8075  143C  0229               	subwf	my_flash_system_write@i,w
  8076  143D  1803               	btfsc	3,0
  8077  143E  2C81               	goto	l718
  8078  143F                     l3324:	
  8079                           
  8080                           ;sysData.c: 66: PMADRL = (flashAddr & 0xFF);
  8081  143F  0827               	movf	my_flash_system_write@flashAddr,w
  8082  1440  0023               	movlb	3	; select bank3
  8083  1441  0091               	movwf	17	;volatile
  8084                           
  8085                           ;sysData.c: 68: PMADRH = ((flashAddr & 0xFF00) >> 8);
  8086  1442  0020               	movlb	0	; select bank0
  8087  1443  0828               	movf	my_flash_system_write@flashAddr+1,w
  8088  1444  0023               	movlb	3	; select bank3
  8089  1445  0092               	movwf	18	;volatile
  8090                           
  8091                           ;sysData.c: 71: if(loc<len){
  8092  1446  0874               	movf	my_flash_system_write@len+1,w
  8093  1447  0020               	movlb	0	; select bank0
  8094  1448  0226               	subwf	my_flash_system_write@loc+1,w
  8095  1449  1D03               	skipz
  8096  144A  2C4D               	goto	u2155
  8097  144B  0873               	movf	my_flash_system_write@len,w
  8098  144C  0225               	subwf	my_flash_system_write@loc,w
  8099  144D                     u2155:	
  8100  144D  1803               	skipnc
  8101  144E  2C59               	goto	l3332
  8102                           
  8103                           ;sysData.c: 72: PMDATL = buf[loc];
  8104  144F  0825               	movf	my_flash_system_write@loc,w
  8105  1450  0771               	addwf	my_flash_system_write@buf,w
  8106  1451  0086               	movwf	6
  8107  1452  0826               	movf	my_flash_system_write@loc+1,w
  8108  1453  3D72               	addwfc	my_flash_system_write@buf+1,w
  8109  1454  0087               	movwf	7
  8110  1455  0801               	movf	1,w
  8111  1456  0023               	movlb	3	; select bank3
  8112  1457  0093               	movwf	19	;volatile
  8113                           
  8114                           ;sysData.c: 73: }else{
  8115  1458  2C5B               	goto	l3334
  8116  1459                     l3332:	
  8117                           
  8118                           ;sysData.c: 74: PMDATL = 0x00;
  8119  1459  0023               	movlb	3	; select bank3
  8120  145A  0193               	clrf	19	;volatile
  8121  145B                     l3334:	
  8122                           
  8123                           ;sysData.c: 75: };sysData.c: 76: loc++;
  8124  145B  3001               	movlw	1
  8125  145C  0020               	movlb	0	; select bank0
  8126  145D  07A5               	addwf	my_flash_system_write@loc,f
  8127  145E  3000               	movlw	0
  8128  145F  3DA6               	addwfc	my_flash_system_write@loc+1,f
  8129                           
  8130                           ;sysData.c: 77: PMDATH = 0x00;
  8131  1460  0023               	movlb	3	; select bank3
  8132  1461  0194               	clrf	20	;volatile
  8133                           
  8134                           ;sysData.c: 78: if((i%32) == 32 -1 ){
  8135  1462  301F               	movlw	31
  8136  1463  0020               	movlb	0	; select bank0
  8137  1464  0529               	andwf	my_flash_system_write@i,w
  8138  1465  00F5               	movwf	??_my_flash_system_write
  8139  1466  301F               	movlw	31
  8140  1467  0675               	xorwf	??_my_flash_system_write,w
  8141  1468  1D03               	btfss	3,2
  8142  1469  2C6C               	goto	l3342
  8143                           
  8144                           ;sysData.c: 79: PMCON1bits.LWLO = 0;
  8145  146A  0023               	movlb	3	; select bank3
  8146  146B  1295               	bcf	21,5	;volatile
  8147  146C                     l3342:	
  8148                           
  8149                           ;sysData.c: 80: };sysData.c: 82: PMCON2 = 0x55;
  8150  146C  3055               	movlw	85
  8151  146D  0023               	movlb	3	; select bank3
  8152  146E  0096               	movwf	22	;volsfr
  8153                           
  8154                           ;sysData.c: 83: PMCON2 = 0xAA;
  8155  146F  30AA               	movlw	170
  8156  1470  0096               	movwf	22	;volsfr
  8157                           
  8158                           ;sysData.c: 84: PMCON1bits.WR = 1;
  8159  1471  1495               	bsf	21,1	;volatile
  8160                           
  8161                           ;sysData.c: 85: __nop();
  8162  1472  0000               	nop
  8163                           
  8164                           ;sysData.c: 86: __nop();
  8165  1473  0000               	nop
  8166                           
  8167                           ;sysData.c: 87: flashAddr++;
  8168  1474  3001               	movlw	1
  8169  1475  0020               	movlb	0	; select bank0
  8170  1476  07A7               	addwf	my_flash_system_write@flashAddr,f
  8171  1477  3000               	movlw	0
  8172  1478  3DA8               	addwfc	my_flash_system_write@flashAddr+1,f
  8173  1479  3001               	movlw	1
  8174  147A  00F5               	movwf	??_my_flash_system_write
  8175  147B  0875               	movf	??_my_flash_system_write,w
  8176  147C  07A9               	addwf	my_flash_system_write@i,f
  8177  147D  3020               	movlw	32
  8178  147E  0229               	subwf	my_flash_system_write@i,w
  8179  147F  1C03               	skipc
  8180  1480  2C3F               	goto	l3324
  8181  1481                     l718:	
  8182                           
  8183                           ;sysData.c: 88: };sysData.c: 89: PMCON1bits.WREN = 0;
  8184  1481  0023               	movlb	3	; select bank3
  8185  1482  1115               	bcf	21,2	;volatile
  8186  1483  3001               	movlw	1
  8187  1484  0020               	movlb	0	; select bank0
  8188  1485  07A0               	addwf	my_flash_system_write@j,f
  8189  1486  3000               	movlw	0
  8190  1487  3DA1               	addwfc	my_flash_system_write@j+1,f
  8191  1488  2C2D               	goto	l715
  8192  1489                     l3356:	
  8193                           
  8194                           ;sysData.c: 90: };sysData.c: 91: INTCONbits.GIE = GIEBitValue;
  8195  1489  0C22               	rrf	my_flash_system_write@GIEBitValue,w
  8196  148A  1C03               	skipc
  8197  148B  138B               	bcf	11,7	;volatile
  8198  148C  1803               	skipnc
  8199  148D  178B               	bsf	11,7	;volatile
  8200  148E  0008               	return
  8201  148F                     __end_of_my_flash_system_write:	
  8202                           ;sysData.c: 93: return 0;;	Return value of _my_flash_system_write is never used
  8203                           
  8204                           
  8205                           	psect	text18
  8206  1000                     __ptext18:	
  8207 ;; *************** function _my_flash_read_system_erase *****************
  8208 ;; Defined at:
  8209 ;;		line 9 in file "src/api/sysData.c"
  8210 ;; Parameters:    Size  Location     Type
  8211 ;;		None
  8212 ;; Auto vars:     Size  Location     Type
  8213 ;;		None
  8214 ;; Return value:  Size  Location     Type
  8215 ;;                  1    wreg      void 
  8216 ;; Registers used:
  8217 ;;		wreg, status,2, status,0, pclath, cstack
  8218 ;; Tracked objects:
  8219 ;;		On entry : 0/0
  8220 ;;		On exit  : 0/0
  8221 ;;		Unchanged: 0/0
  8222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8226 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8227 ;;Total ram usage:        0 bytes
  8228 ;; Hardware stack levels used:    1
  8229 ;; Hardware stack levels required when called:    2
  8230 ;; This function calls:
  8231 ;;		_FLASH_EraseBlock
  8232 ;; This function is called by:
  8233 ;;		_sys_data_save
  8234 ;; This function uses a non-reentrant model
  8235 ;;
  8236                           
  8237                           
  8238                           ;psect for function _my_flash_read_system_erase
  8239  1000                     _my_flash_read_system_erase:	
  8240                           
  8241                           ;sysData.c: 16: FLASH_EraseBlock(0x1f00);
  8242                           
  8243                           ;incstack = 0
  8244                           ; Regs used in _my_flash_read_system_erase: [wreg+status,2+status,0+pclath+cstack]
  8245  1000  3000               	movlw	0
  8246  1001  00F1               	movwf	FLASH_EraseBlock@startAddr
  8247  1002  301F               	movlw	31
  8248  1003  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  8249  1004  319D  25F8  3190   	fcall	_FLASH_EraseBlock
  8250                           
  8251                           ;sysData.c: 17: FLASH_EraseBlock(0x1f00+32);
  8252  1007  3020               	movlw	32
  8253  1008  00F1               	movwf	FLASH_EraseBlock@startAddr
  8254  1009  301F               	movlw	31
  8255  100A  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  8256  100B  319D  25F8  3190   	fcall	_FLASH_EraseBlock
  8257                           
  8258                           ;sysData.c: 18: FLASH_EraseBlock(0x1f00+64);
  8259  100E  3040               	movlw	64
  8260  100F  00F1               	movwf	FLASH_EraseBlock@startAddr
  8261  1010  301F               	movlw	31
  8262  1011  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  8263  1012  319D  25F8  3190   	fcall	_FLASH_EraseBlock
  8264                           
  8265                           ;sysData.c: 19: FLASH_EraseBlock(0x1f00+96);
  8266  1015  3060               	movlw	96
  8267  1016  00F1               	movwf	FLASH_EraseBlock@startAddr
  8268  1017  301F               	movlw	31
  8269  1018  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  8270  1019  319D  25F8  3190   	fcall	_FLASH_EraseBlock
  8271                           
  8272                           ;sysData.c: 20: FLASH_EraseBlock(0x1f00+128);
  8273  101C  3080               	movlw	128
  8274  101D  00F1               	movwf	FLASH_EraseBlock@startAddr
  8275  101E  301F               	movlw	31
  8276  101F  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  8277  1020  319D  25F8         	fcall	_FLASH_EraseBlock
  8278  1022  0008               	return
  8279  1023                     __end_of_my_flash_read_system_erase:	
  8280                           
  8281                           	psect	text19
  8282  1DF8                     __ptext19:	
  8283 ;; *************** function _FLASH_EraseBlock *****************
  8284 ;; Defined at:
  8285 ;;		line 147 in file "mcc_generated_files/memory.c"
  8286 ;; Parameters:    Size  Location     Type
  8287 ;;  startAddr       2    1[COMMON] unsigned int 
  8288 ;; Auto vars:     Size  Location     Type
  8289 ;;  GIEBitValue     1    3[COMMON] unsigned char 
  8290 ;; Return value:  Size  Location     Type
  8291 ;;                  1    wreg      void 
  8292 ;; Registers used:
  8293 ;;		wreg, status,2, status,0
  8294 ;; Tracked objects:
  8295 ;;		On entry : 0/0
  8296 ;;		On exit  : 0/0
  8297 ;;		Unchanged: 0/0
  8298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8299 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8300 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8302 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8303 ;;Total ram usage:        3 bytes
  8304 ;; Hardware stack levels used:    1
  8305 ;; Hardware stack levels required when called:    1
  8306 ;; This function calls:
  8307 ;;		Nothing
  8308 ;; This function is called by:
  8309 ;;		_my_flash_read_system_erase
  8310 ;;		_FLASH_WriteBlock
  8311 ;; This function uses a non-reentrant model
  8312 ;;
  8313                           
  8314                           
  8315                           ;psect for function _FLASH_EraseBlock
  8316  1DF8                     _FLASH_EraseBlock:	
  8317                           
  8318                           ;memory.c: 149: uint8_t GIEBitValue = INTCONbits.GIE;
  8319                           
  8320                           ;incstack = 0
  8321                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  8322  1DF8  3000               	movlw	0
  8323  1DF9  1B8B               	btfsc	11,7	;volatile
  8324  1DFA  3001               	movlw	1
  8325  1DFB  00F3               	movwf	FLASH_EraseBlock@GIEBitValue
  8326                           
  8327                           ;memory.c: 152: INTCONbits.GIE = 0;
  8328  1DFC  138B               	bcf	11,7	;volatile
  8329                           
  8330                           ;memory.c: 154: PMADRL = (startAddr & 0xFF);
  8331  1DFD  0871               	movf	FLASH_EraseBlock@startAddr,w
  8332  1DFE  0023               	movlb	3	; select bank3
  8333  1DFF  0091               	movwf	17	;volatile
  8334                           
  8335                           ;memory.c: 156: PMADRH = ((startAddr & 0xFF00) >> 8);
  8336  1E00  0872               	movf	FLASH_EraseBlock@startAddr+1,w
  8337  1E01  0092               	movwf	18	;volatile
  8338                           
  8339                           ;memory.c: 159: PMCON1bits.CFGS = 0;
  8340  1E02  1315               	bcf	21,6	;volatile
  8341                           
  8342                           ;memory.c: 160: PMCON1bits.FREE = 1;
  8343  1E03  1615               	bsf	21,4	;volatile
  8344                           
  8345                           ;memory.c: 161: PMCON1bits.WREN = 1;
  8346  1E04  1515               	bsf	21,2	;volatile
  8347                           
  8348                           ;memory.c: 164: PMCON2 = 0x55;
  8349  1E05  3055               	movlw	85
  8350  1E06  0096               	movwf	22	;volsfr
  8351                           
  8352                           ;memory.c: 165: PMCON2 = 0xAA;
  8353  1E07  30AA               	movlw	170
  8354  1E08  0096               	movwf	22	;volsfr
  8355                           
  8356                           ;memory.c: 166: PMCON1bits.WR = 1;
  8357  1E09  1495               	bsf	21,1	;volatile
  8358                           
  8359                           ;memory.c: 167: __nop();
  8360  1E0A  0000               	nop
  8361                           
  8362                           ;memory.c: 168: __nop();
  8363  1E0B  0000               	nop
  8364                           
  8365                           ;memory.c: 170: PMCON1bits.WREN = 0;
  8366  1E0C  0023               	movlb	3	; select bank3
  8367  1E0D  1115               	bcf	21,2	;volatile
  8368                           
  8369                           ;memory.c: 171: INTCONbits.GIE = GIEBitValue;
  8370  1E0E  0C73               	rrf	FLASH_EraseBlock@GIEBitValue,w
  8371  1E0F  1C03               	skipc
  8372  1E10  138B               	bcf	11,7	;volatile
  8373  1E11  1803               	skipnc
  8374  1E12  178B               	bsf	11,7	;volatile
  8375  1E13  0008               	return
  8376  1E14                     __end_of_FLASH_EraseBlock:	
  8377                           
  8378                           	psect	text20
  8379  1141                     __ptext20:	
  8380 ;; *************** function _modbus_response_illgeal_function *****************
  8381 ;; Defined at:
  8382 ;;		line 8 in file "src/api/modbus.c"
  8383 ;; Parameters:    Size  Location     Type
  8384 ;;  buf             1    wreg     PTR unsigned char 
  8385 ;;		 -> modbusBuf(32), 
  8386 ;;  errcode         1   12[BANK0 ] unsigned char 
  8387 ;; Auto vars:     Size  Location     Type
  8388 ;;  buf             1   14[BANK0 ] PTR unsigned char 
  8389 ;;		 -> modbusBuf(32), 
  8390 ;;  pmdbs           1   15[BANK0 ] PTR struct .
  8391 ;;		 -> modbusBuf(32), 
  8392 ;; Return value:  Size  Location     Type
  8393 ;;                  1    wreg      void 
  8394 ;; Registers used:
  8395 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8396 ;; Tracked objects:
  8397 ;;		On entry : 0/0
  8398 ;;		On exit  : 0/0
  8399 ;;		Unchanged: 0/0
  8400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8401 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8402 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8403 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8404 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8405 ;;Total ram usage:        4 bytes
  8406 ;; Hardware stack levels used:    1
  8407 ;; Hardware stack levels required when called:    3
  8408 ;; This function calls:
  8409 ;;		_crc_append
  8410 ;;		_uart_send_len
  8411 ;; This function is called by:
  8412 ;;		_modbus_response_process
  8413 ;; This function uses a non-reentrant model
  8414 ;;
  8415                           
  8416                           
  8417                           ;psect for function _modbus_response_illgeal_function
  8418  1141                     _modbus_response_illgeal_function:	
  8419                           
  8420                           ;incstack = 0
  8421                           ; Regs used in _modbus_response_illgeal_function: [wreg+fsr1l+fsr1h+status,2+status,0+pc
      +                          lath+cstack]
  8422                           ;modbus_response_illgeal_function@buf stored from wreg
  8423  1141  0020               	movlb	0	; select bank0
  8424  1142  00AE               	movwf	modbus_response_illgeal_function@buf
  8425                           
  8426                           ;modbus.c: 10: st_modbusErrRespStructDef* pmdbs=(st_modbusErrRespStructDef*)buf;
  8427  1143  082E               	movf	modbus_response_illgeal_function@buf,w
  8428  1144  00AD               	movwf	??_modbus_response_illgeal_function
  8429  1145  082D               	movf	??_modbus_response_illgeal_function,w
  8430  1146  00AF               	movwf	modbus_response_illgeal_function@pmdbs
  8431                           
  8432                           ;modbus.c: 11: if(pmdbs->addr==0x00)return;
  8433  1147  082F               	movf	modbus_response_illgeal_function@pmdbs,w
  8434  1148  0086               	movwf	6
  8435  1149  3001               	movlw	1	; select bank2/3
  8436  114A  0087               	movwf	7
  8437  114B  0801               	movf	1,w
  8438  114C  1903               	btfsc	3,2
  8439  114D  0008               	return
  8440                           
  8441                           ;modbus.c: 12: pmdbs->addr=sysData.id;
  8442  114E  305C               	movlw	92
  8443  114F  0086               	movwf	6
  8444  1150  3023               	movlw	35
  8445  1151  0087               	movwf	7
  8446  1152  3142               	addfsr 1,2
  8447  1153  0801               	movf	1,w
  8448  1154  00AD               	movwf	??_modbus_response_illgeal_function
  8449  1155  082F               	movf	modbus_response_illgeal_function@pmdbs,w
  8450  1156  0086               	movwf	6
  8451  1157  3001               	movlw	1	; select bank2/3
  8452  1158  0087               	movwf	7
  8453  1159  082D               	movf	??_modbus_response_illgeal_function,w
  8454  115A  0081               	movwf	1
  8455                           
  8456                           ;modbus.c: 13: if(errcode){
  8457  115B  082C               	movf	modbus_response_illgeal_function@errcode,w
  8458  115C  1903               	btfsc	3,2
  8459  115D  2966               	goto	l769
  8460                           
  8461                           ;modbus.c: 14: pmdbs->func+=0x80;
  8462  115E  3080               	movlw	128
  8463  115F  00AD               	movwf	??_modbus_response_illgeal_function
  8464  1160  0A2F               	incf	modbus_response_illgeal_function@pmdbs,w
  8465  1161  0086               	movwf	6
  8466  1162  3001               	movlw	1	; select bank2/3
  8467  1163  0087               	movwf	7
  8468  1164  082D               	movf	??_modbus_response_illgeal_function,w
  8469  1165  0781               	addwf	1,f
  8470  1166                     l769:	
  8471                           
  8472                           ;modbus.c: 15: };modbus.c: 16: pmdbs->errcord=errcode;
  8473  1166  082C               	movf	modbus_response_illgeal_function@errcode,w
  8474  1167  00AD               	movwf	??_modbus_response_illgeal_function
  8475  1168  082F               	movf	modbus_response_illgeal_function@pmdbs,w
  8476  1169  3E02               	addlw	2
  8477  116A  0086               	movwf	6
  8478  116B  3001               	movlw	1	; select bank2/3
  8479  116C  0087               	movwf	7
  8480  116D  082D               	movf	??_modbus_response_illgeal_function,w
  8481  116E  0081               	movwf	1
  8482                           
  8483                           ;modbus.c: 17: crc_append(buf,3);
  8484  116F  082E               	movf	modbus_response_illgeal_function@buf,w
  8485  1170  00A6               	movwf	crc_append@message
  8486  1171  3001               	movlw	1
  8487  1172  00A7               	movwf	crc_append@message+1
  8488  1173  3003               	movlw	3
  8489  1174  00A8               	movwf	crc_append@n
  8490  1175  3000               	movlw	0
  8491  1176  00A9               	movwf	crc_append@n+1
  8492  1177  319E  2669  3191   	fcall	_crc_append
  8493                           
  8494                           ;modbus.c: 18: uart_send_len(buf,5);
  8495  117A  3005               	movlw	5
  8496  117B  0020               	movlb	0	; select bank0
  8497  117C  00AD               	movwf	??_modbus_response_illgeal_function
  8498  117D  082D               	movf	??_modbus_response_illgeal_function,w
  8499  117E  00F1               	movwf	uart_send_len@len
  8500  117F  082E               	movf	modbus_response_illgeal_function@buf,w
  8501  1180  3190  20C9         	fcall	_uart_send_len
  8502  1182  0008               	return
  8503  1183                     __end_of_modbus_response_illgeal_function:	
  8504                           
  8505                           	psect	text21
  8506  1668                     __ptext21:	
  8507 ;; *************** function _modbus_response_command *****************
  8508 ;; Defined at:
  8509 ;;		line 181 in file "src/api/modbus.c"
  8510 ;; Parameters:    Size  Location     Type
  8511 ;;  rbuf            1    wreg     PTR unsigned char 
  8512 ;;		 -> modbusBuf(32), 
  8513 ;; Auto vars:     Size  Location     Type
  8514 ;;  rbuf            1   21[BANK0 ] PTR unsigned char 
  8515 ;;		 -> modbusBuf(32), 
  8516 ;;  tempData        2   22[BANK0 ] unsigned int 
  8517 ;;  startAddr       2   16[BANK0 ] unsigned int 
  8518 ;;  tmpAddr         2   14[BANK0 ] unsigned int 
  8519 ;;  len             1   20[BANK0 ] unsigned char 
  8520 ;;  pmdbs           1   19[BANK0 ] PTR struct .
  8521 ;;		 -> modbusBuf(32), 
  8522 ;;  i               1   18[BANK0 ] unsigned char 
  8523 ;; Return value:  Size  Location     Type
  8524 ;;                  1    wreg      void 
  8525 ;; Registers used:
  8526 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8527 ;; Tracked objects:
  8528 ;;		On entry : 0/0
  8529 ;;		On exit  : 0/0
  8530 ;;		Unchanged: 0/0
  8531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8533 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8534 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8535 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8536 ;;Total ram usage:       12 bytes
  8537 ;; Hardware stack levels used:    1
  8538 ;; Hardware stack levels required when called:    3
  8539 ;; This function calls:
  8540 ;;		_crc_append
  8541 ;;		_getRegisterVal
  8542 ;;		_uart_send_len
  8543 ;; This function is called by:
  8544 ;;		_modbus_response_process
  8545 ;; This function uses a non-reentrant model
  8546 ;;
  8547                           
  8548                           
  8549                           ;psect for function _modbus_response_command
  8550  1668                     _modbus_response_command:	
  8551                           
  8552                           ;incstack = 0
  8553                           ; Regs used in _modbus_response_command: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8554                           ;modbus_response_command@rbuf stored from wreg
  8555  1668  0020               	movlb	0	; select bank0
  8556  1669  00B5               	movwf	modbus_response_command@rbuf
  8557                           
  8558                           ;modbus.c: 182: uint8_t i;;modbus.c: 183: uint16_t startAddr=0;
  8559  166A  01B0               	clrf	modbus_response_command@startAddr
  8560  166B  01B1               	clrf	modbus_response_command@startAddr+1
  8561                           
  8562                           ;modbus.c: 184: uint16_t tempData,tmpAddr;;modbus.c: 185: uint8_t len=0;
  8563  166C  01B4               	clrf	modbus_response_command@len
  8564                           
  8565                           ;modbus.c: 186: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)rbuf;
  8566  166D  0835               	movf	modbus_response_command@rbuf,w
  8567  166E  00AC               	movwf	??_modbus_response_command
  8568  166F  082C               	movf	??_modbus_response_command,w
  8569  1670  00B3               	movwf	modbus_response_command@pmdbs
  8570                           
  8571                           ;modbus.c: 187: if(pmdbs->addr!=sysData.id || pmdbs->addr==0)return;
  8572  1671  305C               	movlw	92
  8573  1672  0086               	movwf	6
  8574  1673  3023               	movlw	35
  8575  1674  0087               	movwf	7
  8576  1675  3142               	addfsr 1,2
  8577  1676  0833               	movf	modbus_response_command@pmdbs,w
  8578  1677  0084               	movwf	4
  8579  1678  3001               	movlw	1	; select bank2/3
  8580  1679  0085               	movwf	5
  8581  167A  0800               	movf	0,w
  8582  167B  0601               	xorwf	1,w
  8583  167C  1D03               	skipz
  8584  167D  0008               	return
  8585  167E  0833               	movf	modbus_response_command@pmdbs,w
  8586  167F  0086               	movwf	6
  8587  1680  3001               	movlw	1	; select bank2/3
  8588  1681  0087               	movwf	7
  8589  1682  0801               	movf	1,w
  8590  1683  1903               	btfsc	3,2
  8591  1684  0008               	return
  8592                           
  8593                           ;modbus.c: 188: startAddr=pmdbs->addr_hi;
  8594  1685  0833               	movf	modbus_response_command@pmdbs,w
  8595  1686  3E02               	addlw	2
  8596  1687  0086               	movwf	6
  8597  1688  3001               	movlw	1	; select bank2/3
  8598  1689  0087               	movwf	7
  8599  168A  0801               	movf	1,w
  8600  168B  00AC               	movwf	??_modbus_response_command
  8601  168C  01AD               	clrf	??_modbus_response_command+1
  8602  168D  082C               	movf	??_modbus_response_command,w
  8603  168E  00B0               	movwf	modbus_response_command@startAddr
  8604  168F  082D               	movf	??_modbus_response_command+1,w
  8605  1690  00B1               	movwf	modbus_response_command@startAddr+1
  8606                           
  8607                           ;modbus.c: 189: startAddr<<=8;
  8608  1691  3008               	movlw	8
  8609  1692                     u4145:	
  8610  1692  35B0               	lslf	modbus_response_command@startAddr,f
  8611  1693  0DB1               	rlf	modbus_response_command@startAddr+1,f
  8612  1694  0B89               	decfsz	9,f
  8613  1695  2E92               	goto	u4145
  8614                           
  8615                           ;modbus.c: 190: startAddr |= pmdbs->addr_lo;
  8616  1696  0833               	movf	modbus_response_command@pmdbs,w
  8617  1697  3E03               	addlw	3
  8618  1698  0086               	movwf	6
  8619  1699  3001               	movlw	1	; select bank2/3
  8620  169A  0087               	movwf	7
  8621  169B  0801               	movf	1,w
  8622  169C  00AC               	movwf	??_modbus_response_command
  8623  169D  01AD               	clrf	??_modbus_response_command+1
  8624  169E  082C               	movf	??_modbus_response_command,w
  8625  169F  04B0               	iorwf	modbus_response_command@startAddr,f
  8626  16A0  082D               	movf	??_modbus_response_command+1,w
  8627  16A1  04B1               	iorwf	modbus_response_command@startAddr+1,f
  8628                           
  8629                           ;modbus.c: 191: tmpAddr=startAddr;
  8630  16A2  0831               	movf	modbus_response_command@startAddr+1,w
  8631  16A3  00AF               	movwf	modbus_response_command@tmpAddr+1
  8632  16A4  0830               	movf	modbus_response_command@startAddr,w
  8633  16A5  00AE               	movwf	modbus_response_command@tmpAddr
  8634                           
  8635                           ;modbus.c: 192: len = pmdbs->len_lo;
  8636  16A6  0833               	movf	modbus_response_command@pmdbs,w
  8637  16A7  0086               	movwf	6
  8638  16A8  3001               	movlw	1	; select bank2/3
  8639  16A9  0087               	movwf	7
  8640  16AA  3001               	movlw	1	; select bank2/3
  8641  16AB  3F45               	moviw [5]fsr1
  8642  16AC  00B4               	movwf	modbus_response_command@len
  8643                           
  8644                           ;modbus.c: 193: len<<=1;
  8645  16AD  1003               	clrc
  8646  16AE  0DB4               	rlf	modbus_response_command@len,f
  8647                           
  8648                           ;modbus.c: 194: if(len>32)len=32;
  8649  16AF  3021               	movlw	33
  8650  16B0  0234               	subwf	modbus_response_command@len,w
  8651  16B1  1C03               	skipc
  8652  16B2  2EB7               	goto	l4814
  8653  16B3  3020               	movlw	32
  8654  16B4  00AC               	movwf	??_modbus_response_command
  8655  16B5  082C               	movf	??_modbus_response_command,w
  8656  16B6  00B4               	movwf	modbus_response_command@len
  8657  16B7                     l4814:	
  8658                           
  8659                           ;modbus.c: 195: for(i=0;i<len;i=i+2,tmpAddr++){
  8660  16B7  01B2               	clrf	modbus_response_command@i
  8661  16B8                     l4826:	
  8662  16B8  0834               	movf	modbus_response_command@len,w
  8663  16B9  0232               	subwf	modbus_response_command@i,w
  8664  16BA  1803               	btfsc	3,0
  8665  16BB  2EEA               	goto	l4828
  8666                           
  8667                           ;modbus.c: 196: getRegisterVal(tmpAddr,&tempData);
  8668  16BC  082F               	movf	modbus_response_command@tmpAddr+1,w
  8669  16BD  00F2               	movwf	getRegisterVal@addr+1
  8670  16BE  082E               	movf	modbus_response_command@tmpAddr,w
  8671  16BF  00F1               	movwf	getRegisterVal@addr
  8672  16C0  3036               	movlw	(low (modbus_response_command@tempData| 0))& (0+255)
  8673  16C1  00AC               	movwf	??_modbus_response_command
  8674  16C2  082C               	movf	??_modbus_response_command,w
  8675  16C3  00F3               	movwf	getRegisterVal@tempData
  8676  16C4  318E  2683  3196   	fcall	_getRegisterVal
  8677                           
  8678                           ;modbus.c: 197: rbuf[i+3] = (uint8_t)(tempData >> 8);
  8679  16C7  0020               	movlb	0	; select bank0
  8680  16C8  0837               	movf	modbus_response_command@tempData+1,w
  8681  16C9  00AC               	movwf	??_modbus_response_command
  8682  16CA  0832               	movf	modbus_response_command@i,w
  8683  16CB  3E03               	addlw	3
  8684  16CC  0735               	addwf	modbus_response_command@rbuf,w
  8685  16CD  00AD               	movwf	??_modbus_response_command+1
  8686  16CE  082D               	movf	??_modbus_response_command+1,w
  8687  16CF  0086               	movwf	6
  8688  16D0  3001               	movlw	1	; select bank2/3
  8689  16D1  0087               	movwf	7
  8690  16D2  082C               	movf	??_modbus_response_command,w
  8691  16D3  0081               	movwf	1
  8692                           
  8693                           ;modbus.c: 198: rbuf[i+4] = (uint8_t)(tempData & 0xff);
  8694  16D4  0836               	movf	modbus_response_command@tempData,w
  8695  16D5  00AC               	movwf	??_modbus_response_command
  8696  16D6  0832               	movf	modbus_response_command@i,w
  8697  16D7  3E04               	addlw	4
  8698  16D8  0735               	addwf	modbus_response_command@rbuf,w
  8699  16D9  00AD               	movwf	??_modbus_response_command+1
  8700  16DA  082D               	movf	??_modbus_response_command+1,w
  8701  16DB  0086               	movwf	6
  8702  16DC  3001               	movlw	1	; select bank2/3
  8703  16DD  0087               	movwf	7
  8704  16DE  082C               	movf	??_modbus_response_command,w
  8705  16DF  0081               	movwf	1
  8706  16E0  0832               	movf	modbus_response_command@i,w
  8707  16E1  3E02               	addlw	2
  8708  16E2  00AC               	movwf	??_modbus_response_command
  8709  16E3  082C               	movf	??_modbus_response_command,w
  8710  16E4  00B2               	movwf	modbus_response_command@i
  8711  16E5  3001               	movlw	1
  8712  16E6  07AE               	addwf	modbus_response_command@tmpAddr,f
  8713  16E7  3000               	movlw	0
  8714  16E8  3DAF               	addwfc	modbus_response_command@tmpAddr+1,f
  8715  16E9  2EB8               	goto	l4826
  8716  16EA                     l4828:	
  8717                           
  8718                           ;modbus.c: 200: };modbus.c: 201: rbuf[0] = sysData.id;
  8719  16EA  305C               	movlw	92
  8720  16EB  0086               	movwf	6
  8721  16EC  3023               	movlw	35
  8722  16ED  0087               	movwf	7
  8723  16EE  3142               	addfsr 1,2
  8724  16EF  0801               	movf	1,w
  8725  16F0  00AC               	movwf	??_modbus_response_command
  8726  16F1  0835               	movf	modbus_response_command@rbuf,w
  8727  16F2  0086               	movwf	6
  8728  16F3  3001               	movlw	1	; select bank2/3
  8729  16F4  0087               	movwf	7
  8730  16F5  082C               	movf	??_modbus_response_command,w
  8731  16F6  0081               	movwf	1
  8732                           
  8733                           ;modbus.c: 202: rbuf[1] = 3;
  8734  16F7  3003               	movlw	3
  8735  16F8  00AC               	movwf	??_modbus_response_command
  8736  16F9  0A35               	incf	modbus_response_command@rbuf,w
  8737  16FA  0086               	movwf	6
  8738  16FB  3001               	movlw	1	; select bank2/3
  8739  16FC  0087               	movwf	7
  8740  16FD  082C               	movf	??_modbus_response_command,w
  8741  16FE  0081               	movwf	1
  8742                           
  8743                           ;modbus.c: 203: rbuf[2] = len;
  8744  16FF  0834               	movf	modbus_response_command@len,w
  8745  1700  00AC               	movwf	??_modbus_response_command
  8746  1701  0835               	movf	modbus_response_command@rbuf,w
  8747  1702  3E02               	addlw	2
  8748  1703  0086               	movwf	6
  8749  1704  3001               	movlw	1	; select bank2/3
  8750  1705  0087               	movwf	7
  8751  1706  082C               	movf	??_modbus_response_command,w
  8752  1707  0081               	movwf	1
  8753                           
  8754                           ;modbus.c: 204: len += 3;
  8755  1708  3003               	movlw	3
  8756  1709  00AC               	movwf	??_modbus_response_command
  8757  170A  082C               	movf	??_modbus_response_command,w
  8758  170B  07B4               	addwf	modbus_response_command@len,f
  8759                           
  8760                           ;modbus.c: 205: crc_append(rbuf,len);
  8761  170C  0835               	movf	modbus_response_command@rbuf,w
  8762  170D  00A6               	movwf	crc_append@message
  8763  170E  3001               	movlw	1
  8764  170F  00A7               	movwf	crc_append@message+1
  8765  1710  0834               	movf	modbus_response_command@len,w
  8766  1711  00AC               	movwf	??_modbus_response_command
  8767  1712  01AD               	clrf	??_modbus_response_command+1
  8768  1713  082C               	movf	??_modbus_response_command,w
  8769  1714  00A8               	movwf	crc_append@n
  8770  1715  082D               	movf	??_modbus_response_command+1,w
  8771  1716  00A9               	movwf	crc_append@n+1
  8772  1717  319E  2669  3196   	fcall	_crc_append
  8773                           
  8774                           ;modbus.c: 206: len += 2;
  8775  171A  3002               	movlw	2
  8776  171B  0020               	movlb	0	; select bank0
  8777  171C  00AC               	movwf	??_modbus_response_command
  8778  171D  082C               	movf	??_modbus_response_command,w
  8779  171E  07B4               	addwf	modbus_response_command@len,f
  8780                           
  8781                           ;modbus.c: 207: uart_send_len(rbuf,len);
  8782  171F  0834               	movf	modbus_response_command@len,w
  8783  1720  00AC               	movwf	??_modbus_response_command
  8784  1721  082C               	movf	??_modbus_response_command,w
  8785  1722  00F1               	movwf	uart_send_len@len
  8786  1723  0835               	movf	modbus_response_command@rbuf,w
  8787  1724  3190  20C9         	fcall	_uart_send_len
  8788  1726  0008               	return
  8789  1727                     __end_of_modbus_response_command:	
  8790                           
  8791                           	psect	text22
  8792  10C9                     __ptext22:	
  8793 ;; *************** function _uart_send_len *****************
  8794 ;; Defined at:
  8795 ;;		line 37 in file "src/api/my_uart.c"
  8796 ;; Parameters:    Size  Location     Type
  8797 ;;  buf             1    wreg     PTR unsigned char 
  8798 ;;		 -> modbusBuf(32), 
  8799 ;;  len             1    1[COMMON] unsigned char 
  8800 ;; Auto vars:     Size  Location     Type
  8801 ;;  buf             1    7[COMMON] PTR unsigned char 
  8802 ;;		 -> modbusBuf(32), 
  8803 ;;  tm              2    4[COMMON] unsigned int 
  8804 ;;  i               1    6[COMMON] unsigned char 
  8805 ;; Return value:  Size  Location     Type
  8806 ;;                  1    wreg      void 
  8807 ;; Registers used:
  8808 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8809 ;; Tracked objects:
  8810 ;;		On entry : 0/0
  8811 ;;		On exit  : 0/0
  8812 ;;		Unchanged: 0/0
  8813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8814 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8815 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8816 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8817 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8818 ;;Total ram usage:        7 bytes
  8819 ;; Hardware stack levels used:    1
  8820 ;; Hardware stack levels required when called:    1
  8821 ;; This function calls:
  8822 ;;		Nothing
  8823 ;; This function is called by:
  8824 ;;		_modbus_response_illgeal_function
  8825 ;;		_modbus_response_write_single_register
  8826 ;;		_modbus_response_write_mult_register
  8827 ;;		_modbus_response_command
  8828 ;;		_main
  8829 ;; This function uses a non-reentrant model
  8830 ;;
  8831                           
  8832                           
  8833                           ;psect for function _uart_send_len
  8834  10C9                     _uart_send_len:	
  8835                           
  8836                           ;incstack = 0
  8837                           ; Regs used in _uart_send_len: [wreg+fsr1l+fsr1h+status,2+status,0]
  8838                           ;uart_send_len@buf stored from wreg
  8839  10C9  00F7               	movwf	uart_send_len@buf
  8840                           
  8841                           ;my_uart.c: 39: uint16_t tm=2000;
  8842  10CA  30D0               	movlw	208
  8843  10CB  00F4               	movwf	uart_send_len@tm
  8844  10CC  3007               	movlw	7
  8845  10CD  00F5               	movwf	uart_send_len@tm+1
  8846                           
  8847                           ;my_uart.c: 40: uint8_t i;;my_uart.c: 42: xlen=len;
  8848  10CE  0871               	movf	uart_send_len@len,w
  8849  10CF  00F2               	movwf	??_uart_send_len
  8850  10D0  0872               	movf	??_uart_send_len,w
  8851  10D1  0020               	movlb	0	; select bank0
  8852  10D2  00E6               	movwf	_xlen
  8853                           
  8854                           ;my_uart.c: 43: if(!TXSTAbits.TXEN)TXSTAbits.TXEN=1;
  8855  10D3  0023               	movlb	3	; select bank3
  8856  10D4  1E9E               	btfss	30,5	;volatile
  8857  10D5  169E               	bsf	30,5	;volatile
  8858                           
  8859                           ;my_uart.c: 45: for(i=0;i<xlen;i++){
  8860  10D6  01F6               	clrf	uart_send_len@i
  8861  10D7                     l3394:	
  8862  10D7  0020               	movlb	0	; select bank0
  8863  10D8  0866               	movf	_xlen,w
  8864  10D9  0276               	subwf	uart_send_len@i,w
  8865  10DA  1803               	btfsc	3,0
  8866  10DB  0008               	return
  8867                           
  8868                           ;my_uart.c: 46: tm=2000;
  8869  10DC  30D0               	movlw	208
  8870  10DD  00F4               	movwf	uart_send_len@tm
  8871  10DE  3007               	movlw	7
  8872  10DF  00F5               	movwf	uart_send_len@tm+1
  8873  10E0                     l3384:	
  8874                           ;my_uart.c: 47: while(tm-- > 1){
  8875                           
  8876  10E0  0875               	movf	uart_send_len@tm+1,w
  8877  10E1  00F3               	movwf	??_uart_send_len+1
  8878  10E2  03F4               	decf	uart_send_len@tm,f
  8879  10E3  0A74               	incf	uart_send_len@tm,w
  8880  10E4  00F2               	movwf	??_uart_send_len
  8881  10E5  1903               	skipnz
  8882  10E6  03F5               	decf	uart_send_len@tm+1,f
  8883  10E7  3000               	movlw	0
  8884  10E8  0273               	subwf	??_uart_send_len+1,w
  8885  10E9  3002               	movlw	2
  8886  10EA  1903               	skipnz
  8887  10EB  0272               	subwf	??_uart_send_len,w
  8888  10EC  1C03               	btfss	3,0
  8889  10ED  28F1               	goto	l3386
  8890                           
  8891                           ;my_uart.c: 48: if(PIR1bits.TXIF)break;
  8892  10EE  0020               	movlb	0	; select bank0
  8893  10EF  1E11               	btfss	17,4	;volatile
  8894  10F0  28E0               	goto	l3384
  8895  10F1                     l3386:	
  8896                           
  8897                           ;my_uart.c: 49: };my_uart.c: 52: TXREG = buf[i];
  8898  10F1  0876               	movf	uart_send_len@i,w
  8899  10F2  0777               	addwf	uart_send_len@buf,w
  8900  10F3  00F2               	movwf	??_uart_send_len
  8901  10F4  0872               	movf	??_uart_send_len,w
  8902  10F5  0086               	movwf	6
  8903  10F6  3001               	movlw	1	; select bank2/3
  8904  10F7  0087               	movwf	7
  8905  10F8  0801               	movf	1,w
  8906  10F9  0023               	movlb	3	; select bank3
  8907  10FA  009A               	movwf	26	;volatile
  8908                           
  8909                           ;my_uart.c: 53: do{__nop();__nop();}while(0);;
  8910  10FB  0000               	nop
  8911  10FC  0000               	nop
  8912  10FD  3001               	movlw	1
  8913  10FE  00F2               	movwf	??_uart_send_len
  8914  10FF  0872               	movf	??_uart_send_len,w
  8915  1100  07F6               	addwf	uart_send_len@i,f
  8916  1101  28D7               	goto	l3394
  8917  1102                     __end_of_uart_send_len:	
  8918                           
  8919                           	psect	text23
  8920  0E83                     __ptext23:	
  8921 ;; *************** function _getRegisterVal *****************
  8922 ;; Defined at:
  8923 ;;		line 80 in file "src/api/modbus.c"
  8924 ;; Parameters:    Size  Location     Type
  8925 ;;  addr            2    1[COMMON] unsigned int 
  8926 ;;  tempData        1    3[COMMON] PTR unsigned int 
  8927 ;;		 -> modbus_response_command@tempData(2), 
  8928 ;; Auto vars:     Size  Location     Type
  8929 ;;  t16             2    8[COMMON] unsigned int 
  8930 ;;  tempAddr        1   10[COMMON] unsigned char 
  8931 ;; Return value:  Size  Location     Type
  8932 ;;                  2    1[COMMON] unsigned int 
  8933 ;; Registers used:
  8934 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  8935 ;; Tracked objects:
  8936 ;;		On entry : 0/0
  8937 ;;		On exit  : 0/0
  8938 ;;		Unchanged: 0/0
  8939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8940 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8941 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8942 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8943 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8944 ;;Total ram usage:       10 bytes
  8945 ;; Hardware stack levels used:    1
  8946 ;; Hardware stack levels required when called:    1
  8947 ;; This function calls:
  8948 ;;		Nothing
  8949 ;; This function is called by:
  8950 ;;		_modbus_response_command
  8951 ;; This function uses a non-reentrant model
  8952 ;;
  8953                           
  8954                           
  8955                           ;psect for function _getRegisterVal
  8956  0E83                     _getRegisterVal:	
  8957                           
  8958                           ;modbus.c: 82: uint16_t t16 = 0;
  8959                           
  8960                           ;incstack = 0
  8961                           ; Regs used in _getRegisterVal: [wreg-fsr1h+status,2+status,0]
  8962  0E83  01F8               	clrf	getRegisterVal@t16
  8963  0E84  01F9               	clrf	getRegisterVal@t16+1
  8964                           
  8965                           ;modbus.c: 83: uint8_t tempAddr;;modbus.c: 85: tempAddr = addr & 0xff;
  8966  0E85  0871               	movf	getRegisterVal@addr,w
  8967  0E86  00F4               	movwf	??_getRegisterVal
  8968  0E87  0874               	movf	??_getRegisterVal,w
  8969  0E88  00FA               	movwf	getRegisterVal@tempAddr
  8970                           
  8971                           ;modbus.c: 86: switch(tempAddr){
  8972  0E89  2F35               	goto	l3454
  8973  0E8A                     l3420:	
  8974                           ;modbus.c: 87: case 0x01:*tempData = 0100; break;
  8975                           
  8976  0E8A  0873               	movf	getRegisterVal@tempData,w
  8977  0E8B  0086               	movwf	6
  8978  0E8C  0187               	clrf	7
  8979  0E8D  3040               	movlw	64
  8980  0E8E  3FC0               	movwi [0]fsr1
  8981  0E8F  3000               	movlw	0
  8982  0E90  3FC1               	movwi [1]fsr1
  8983  0E91  2F42               	goto	l3456
  8984  0E92                     l3422:	
  8985                           ;modbus.c: 88: case 0x02:*tempData=sysData.id;break;
  8986                           
  8987  0E92  305C               	movlw	92
  8988  0E93  0086               	movwf	6
  8989  0E94  3023               	movlw	35
  8990  0E95  0087               	movwf	7
  8991  0E96  3142               	addfsr 1,2
  8992  0E97  0801               	movf	1,w
  8993  0E98  00F4               	movwf	??_getRegisterVal
  8994  0E99  01F5               	clrf	??_getRegisterVal+1
  8995  0E9A  0873               	movf	getRegisterVal@tempData,w
  8996  0E9B  0086               	movwf	6
  8997  0E9C  0187               	clrf	7
  8998  0E9D  0874               	movf	??_getRegisterVal,w
  8999  0E9E  3FC0               	movwi [0]fsr1
  9000  0E9F  0875               	movf	??_getRegisterVal+1,w
  9001  0EA0  3FC1               	movwi [1]fsr1
  9002  0EA1  2F42               	goto	l3456
  9003  0EA2                     l3424:	
  9004                           ;modbus.c: 89: case 0x03:*tempData=(sysData.pidSetFlg1<<8 | sysData.pidSetFlg0);break;
  9005                           
  9006  0EA2  305C               	movlw	92
  9007  0EA3  0084               	movwf	4
  9008  0EA4  3023               	movlw	35
  9009  0EA5  0085               	movwf	5
  9010  0EA6  3101               	addfsr 0,1
  9011  0EA7  0800               	movf	0,w
  9012  0EA8  00F4               	movwf	??_getRegisterVal
  9013  0EA9  305C               	movlw	92
  9014  0EAA  0084               	movwf	4
  9015  0EAB  3023               	movlw	35
  9016  0EAC  0085               	movwf	5
  9017  0EAD  0873               	movf	getRegisterVal@tempData,w
  9018  0EAE  0086               	movwf	6
  9019  0EAF  0187               	clrf	7
  9020  0EB0  0800               	movf	0,w
  9021  0EB1  3FC0               	movwi [0]fsr1
  9022  0EB2  0874               	movf	??_getRegisterVal,w
  9023  0EB3  3FC1               	movwi [1]fsr1
  9024  0EB4  2F42               	goto	l3456
  9025  0EB5                     l3426:	
  9026                           ;modbus.c: 90: case 0x04:*tempData=sysData.pidKp;break;
  9027                           
  9028  0EB5  305C               	movlw	92
  9029  0EB6  0086               	movwf	6
  9030  0EB7  3023               	movlw	35
  9031  0EB8  0087               	movwf	7
  9032  0EB9  3144               	addfsr 1,4
  9033  0EBA  0873               	movf	getRegisterVal@tempData,w
  9034  0EBB  0084               	movwf	4
  9035  0EBC  0185               	clrf	5
  9036  0EBD  3F40               	moviw [0]fsr1
  9037  0EBE  3F80               	movwi [0]fsr0
  9038  0EBF  3F41               	moviw [1]fsr1
  9039  0EC0  3F81               	movwi [1]fsr0
  9040  0EC1  2F42               	goto	l3456
  9041  0EC2                     l3428:	
  9042                           ;modbus.c: 91: case 0x05:*tempData=sysData.pidTi;break;
  9043                           
  9044  0EC2  305C               	movlw	92
  9045  0EC3  0086               	movwf	6
  9046  0EC4  3023               	movlw	35
  9047  0EC5  0087               	movwf	7
  9048  0EC6  3146               	addfsr 1,6
  9049  0EC7  0873               	movf	getRegisterVal@tempData,w
  9050  0EC8  0084               	movwf	4
  9051  0EC9  0185               	clrf	5
  9052  0ECA  3F40               	moviw [0]fsr1
  9053  0ECB  3F80               	movwi [0]fsr0
  9054  0ECC  3F41               	moviw [1]fsr1
  9055  0ECD  3F81               	movwi [1]fsr0
  9056  0ECE  2F42               	goto	l3456
  9057  0ECF                     l3430:	
  9058                           ;modbus.c: 92: case 0x06:*tempData=sysData.pidTd;break;
  9059                           
  9060  0ECF  305C               	movlw	92
  9061  0ED0  0086               	movwf	6
  9062  0ED1  3023               	movlw	35
  9063  0ED2  0087               	movwf	7
  9064  0ED3  3148               	addfsr 1,8
  9065  0ED4  0873               	movf	getRegisterVal@tempData,w
  9066  0ED5  0084               	movwf	4
  9067  0ED6  0185               	clrf	5
  9068  0ED7  3F40               	moviw [0]fsr1
  9069  0ED8  3F80               	movwi [0]fsr0
  9070  0ED9  3F41               	moviw [1]fsr1
  9071  0EDA  3F81               	movwi [1]fsr0
  9072  0EDB  2F42               	goto	l3456
  9073  0EDC                     l3432:	
  9074                           ;modbus.c: 93: case 0x07:*tempData=rtAdcValueRsLo; break;
  9075                           
  9076  0EDC  0873               	movf	getRegisterVal@tempData,w
  9077  0EDD  0086               	movwf	6
  9078  0EDE  0187               	clrf	7
  9079  0EDF  0020               	movlb	0	; select bank0
  9080  0EE0  0861               	movf	_rtAdcValueRsLo,w
  9081  0EE1  3FC0               	movwi [0]fsr1
  9082  0EE2  0862               	movf	_rtAdcValueRsLo+1,w
  9083  0EE3  3FC1               	movwi [1]fsr1
  9084  0EE4  2F42               	goto	l3456
  9085  0EE5                     l3434:	
  9086                           ;modbus.c: 94: case 0x08:*tempData=rtAdcValueRsHi;break;
  9087                           
  9088  0EE5  0873               	movf	getRegisterVal@tempData,w
  9089  0EE6  0086               	movwf	6
  9090  0EE7  0187               	clrf	7
  9091  0EE8  0020               	movlb	0	; select bank0
  9092  0EE9  085F               	movf	_rtAdcValueRsHi,w
  9093  0EEA  3FC0               	movwi [0]fsr1
  9094  0EEB  0860               	movf	_rtAdcValueRsHi+1,w
  9095  0EEC  3FC1               	movwi [1]fsr1
  9096  0EED  2F42               	goto	l3456
  9097  0EEE                     l3436:	
  9098                           ;modbus.c: 95: case 0x09:*tempData=rtAdcValueRcLo;break;
  9099                           
  9100  0EEE  0873               	movf	getRegisterVal@tempData,w
  9101  0EEF  0086               	movwf	6
  9102  0EF0  0187               	clrf	7
  9103  0EF1  0020               	movlb	0	; select bank0
  9104  0EF2  085D               	movf	_rtAdcValueRcLo,w
  9105  0EF3  3FC0               	movwi [0]fsr1
  9106  0EF4  085E               	movf	_rtAdcValueRcLo+1,w
  9107  0EF5  3FC1               	movwi [1]fsr1
  9108  0EF6  2F42               	goto	l3456
  9109  0EF7                     l3438:	
  9110                           ;modbus.c: 96: case 0x0a:*tempData=rtAdcValueRcHi;break;
  9111                           
  9112  0EF7  0873               	movf	getRegisterVal@tempData,w
  9113  0EF8  0086               	movwf	6
  9114  0EF9  0187               	clrf	7
  9115  0EFA  0020               	movlb	0	; select bank0
  9116  0EFB  085B               	movf	_rtAdcValueRcHi,w
  9117  0EFC  3FC0               	movwi [0]fsr1
  9118  0EFD  085C               	movf	_rtAdcValueRcHi+1,w
  9119  0EFE  3FC1               	movwi [1]fsr1
  9120  0EFF  2F42               	goto	l3456
  9121  0F00                     l3440:	
  9122                           ;modbus.c: 97: case 0x0b:*tempData=resRc;break;
  9123                           
  9124  0F00  0873               	movf	getRegisterVal@tempData,w
  9125  0F01  0086               	movwf	6
  9126  0F02  0187               	clrf	7
  9127  0F03  0020               	movlb	0	; select bank0
  9128  0F04  086E               	movf	_resRc,w
  9129  0F05  3FC0               	movwi [0]fsr1
  9130  0F06  086F               	movf	_resRc+1,w
  9131  0F07  3FC1               	movwi [1]fsr1
  9132  0F08  2F42               	goto	l3456
  9133  0F09                     l3442:	
  9134                           ;modbus.c: 98: case 0x0c:*tempData=resRs;break;
  9135                           
  9136  0F09  0873               	movf	getRegisterVal@tempData,w
  9137  0F0A  0086               	movwf	6
  9138  0F0B  0187               	clrf	7
  9139  0F0C  0020               	movlb	0	; select bank0
  9140  0F0D  086C               	movf	_resRs,w
  9141  0F0E  3FC0               	movwi [0]fsr1
  9142  0F0F  086D               	movf	_resRs+1,w
  9143  0F10  3FC1               	movwi [1]fsr1
  9144  0F11  2F42               	goto	l3456
  9145  0F12                     l3444:	
  9146                           ;modbus.c: 99: case 0x0d:*tempData=rtAdcValueVoFb;break;
  9147                           
  9148  0F12  0873               	movf	getRegisterVal@tempData,w
  9149  0F13  0086               	movwf	6
  9150  0F14  0187               	clrf	7
  9151  0F15  0020               	movlb	0	; select bank0
  9152  0F16  0859               	movf	_rtAdcValueVoFb,w
  9153  0F17  3FC0               	movwi [0]fsr1
  9154  0F18  085A               	movf	_rtAdcValueVoFb+1,w
  9155  0F19  3FC1               	movwi [1]fsr1
  9156  0F1A  2F42               	goto	l3456
  9157  0F1B                     l3446:	
  9158                           ;modbus.c: 100: case 0x0e:*tempData=voExpectMv;break;
  9159                           
  9160  0F1B  0873               	movf	getRegisterVal@tempData,w
  9161  0F1C  0086               	movwf	6
  9162  0F1D  0187               	clrf	7
  9163  0F1E  0021               	movlb	1	; select bank1
  9164  0F1F  0846               	movf	_voExpectMv^(0+128),w
  9165  0F20  3FC0               	movwi [0]fsr1
  9166  0F21  0847               	movf	(_voExpectMv+1)^(0+128),w
  9167  0F22  3FC1               	movwi [1]fsr1
  9168  0F23  2F42               	goto	l3456
  9169  0F24                     l3448:	
  9170                           ;modbus.c: 101: case 0x0f:*tempData=voExpectAdcValue;break;
  9171                           
  9172  0F24  0873               	movf	getRegisterVal@tempData,w
  9173  0F25  0086               	movwf	6
  9174  0F26  0187               	clrf	7
  9175  0F27  0020               	movlb	0	; select bank0
  9176  0F28  0855               	movf	_voExpectAdcValue,w
  9177  0F29  3FC0               	movwi [0]fsr1
  9178  0F2A  0856               	movf	_voExpectAdcValue+1,w
  9179  0F2B  3FC1               	movwi [1]fsr1
  9180  0F2C  2F42               	goto	l3456
  9181  0F2D                     l3450:	
  9182                           ;modbus.c: 102: default: *tempData=0x55aa;break;
  9183                           
  9184  0F2D  0873               	movf	getRegisterVal@tempData,w
  9185  0F2E  0086               	movwf	6
  9186  0F2F  0187               	clrf	7
  9187  0F30  30AA               	movlw	170
  9188  0F31  3FC0               	movwi [0]fsr1
  9189  0F32  3055               	movlw	85
  9190  0F33  3FC1               	movwi [1]fsr1
  9191                           
  9192                           ;modbus.c: 103: }
  9193  0F34  2F42               	goto	l3456
  9194  0F35                     l3454:	
  9195  0F35  087A               	movf	getRegisterVal@tempAddr,w
  9196                           
  9197                           ; Switch size 1, requested type "space"
  9198                           ; Number of cases is 15, Range of values is 1 to 15
  9199                           ; switch strategies available:
  9200                           ; Name         Instructions Cycles
  9201                           ; direct_byte           39     9 (fixed)
  9202                           ; simple_byte           46    24 (average)
  9203                           ; jumptable            263     9 (fixed)
  9204                           ;	Chosen strategy is direct_byte
  9205  0F36  3EFF               	addlw	-1
  9206  0F37  1C03               	skipc
  9207  0F38  2F2D               	goto	l3450
  9208  0F39  0084               	movwf	4
  9209  0F3A  300F               	movlw	15
  9210  0F3B  0204               	subwf	4,w
  9211  0F3C  1803               	skipnc
  9212  0F3D  2F2D               	goto	l3450
  9213  0F3E  3198               	movlp	high S5256
  9214  0F3F  3504               	lslf	4,w
  9215  0F40  3E00               	addlw	low S5256
  9216  0F41  0082               	movwf	2
  9217  0F42                     l3456:	
  9218                           
  9219                           ;modbus.c: 104: if(tempAddr>0x0f && tempAddr < 0x10+30*2){
  9220  0F42  3010               	movlw	16
  9221  0F43  027A               	subwf	getRegisterVal@tempAddr,w
  9222  0F44  1C03               	skipc
  9223  0F45  0008               	return
  9224  0F46  304C               	movlw	76
  9225  0F47  027A               	subwf	getRegisterVal@tempAddr,w
  9226  0F48  1803               	skipnc
  9227  0F49  0008               	return
  9228                           
  9229                           ;modbus.c: 105: tempAddr-=0x10;
  9230  0F4A  3010               	movlw	16
  9231  0F4B  02FA               	subwf	getRegisterVal@tempAddr,f
  9232                           
  9233                           ;modbus.c: 106: if(tempAddr & 0x01){
  9234  0F4C  1C7A               	btfss	getRegisterVal@tempAddr,0
  9235  0F4D  2F65               	goto	l3466
  9236                           
  9237                           ;modbus.c: 107: *tempData=sysData.calibVoMV[tempAddr>>1];
  9238  0F4E  367A               	lsrf	getRegisterVal@tempAddr,w
  9239  0F4F  00F4               	movwf	??_getRegisterVal
  9240  0F50  01F5               	clrf	??_getRegisterVal+1
  9241  0F51  35F4               	lslf	??_getRegisterVal,f
  9242  0F52  0DF5               	rlf	??_getRegisterVal+1,f
  9243  0F53  30A2               	movlw	162
  9244  0F54  00F6               	movwf	??_getRegisterVal+2
  9245  0F55  3023               	movlw	35
  9246  0F56  00F7               	movwf	??_getRegisterVal+3
  9247  0F57  0874               	movf	??_getRegisterVal,w
  9248  0F58  0776               	addwf	??_getRegisterVal+2,w
  9249  0F59  0086               	movwf	6
  9250  0F5A  0875               	movf	??_getRegisterVal+1,w
  9251  0F5B  3D77               	addwfc	??_getRegisterVal+3,w
  9252  0F5C  0087               	movwf	7
  9253  0F5D  0873               	movf	getRegisterVal@tempData,w
  9254  0F5E  0084               	movwf	4
  9255  0F5F  0185               	clrf	5
  9256  0F60  3F40               	moviw [0]fsr1
  9257  0F61  3F80               	movwi [0]fsr0
  9258  0F62  3F41               	moviw [1]fsr1
  9259  0F63  3F81               	movwi [1]fsr0
  9260                           
  9261                           ;modbus.c: 108: }else{
  9262  0F64  0008               	return
  9263  0F65                     l3466:	
  9264                           
  9265                           ;modbus.c: 109: *tempData=sysData.calibRsAdc[tempAddr>>1];
  9266  0F65  367A               	lsrf	getRegisterVal@tempAddr,w
  9267  0F66  00F4               	movwf	??_getRegisterVal
  9268  0F67  01F5               	clrf	??_getRegisterVal+1
  9269  0F68  35F4               	lslf	??_getRegisterVal,f
  9270  0F69  0DF5               	rlf	??_getRegisterVal+1,f
  9271  0F6A  3066               	movlw	102
  9272  0F6B  00F6               	movwf	??_getRegisterVal+2
  9273  0F6C  3023               	movlw	35
  9274  0F6D  00F7               	movwf	??_getRegisterVal+3
  9275  0F6E  0874               	movf	??_getRegisterVal,w
  9276  0F6F  0776               	addwf	??_getRegisterVal+2,w
  9277  0F70  0086               	movwf	6
  9278  0F71  0875               	movf	??_getRegisterVal+1,w
  9279  0F72  3D77               	addwfc	??_getRegisterVal+3,w
  9280  0F73  0087               	movwf	7
  9281  0F74  0873               	movf	getRegisterVal@tempData,w
  9282  0F75  0084               	movwf	4
  9283  0F76  0185               	clrf	5
  9284  0F77  3F40               	moviw [0]fsr1
  9285  0F78  3F80               	movwi [0]fsr0
  9286  0F79  3F41               	moviw [1]fsr1
  9287  0F7A  3F81               	movwi [1]fsr0
  9288  0F7B  0008               	return
  9289  0F7C                     __end_of_getRegisterVal:	
  9290                           ;modbus.c: 110: };modbus.c: 111: };modbus.c: 112: return t16;;	Return value of _getRegis
      +                          terVal is never used
  9291                           
  9292                           
  9293                           	psect	swtext1
  9294  1800                     __pswtext1:	
  9295  1800                     S5256:	
  9296  1800  318E  2E8A         	ljmp	l3420
  9297  1802  318E  2E92         	ljmp	l3422
  9298  1804  318E  2EA2         	ljmp	l3424
  9299  1806  318E  2EB5         	ljmp	l3426
  9300  1808  318E  2EC2         	ljmp	l3428
  9301  180A  318E  2ECF         	ljmp	l3430
  9302  180C  318E  2EDC         	ljmp	l3432
  9303  180E  318E  2EE5         	ljmp	l3434
  9304  1810  318E  2EEE         	ljmp	l3436
  9305  1812  318E  2EF7         	ljmp	l3438
  9306  1814  318F  2F00         	ljmp	l3440
  9307  1816  318F  2F09         	ljmp	l3442
  9308  1818  318F  2F12         	ljmp	l3444
  9309  181A  318F  2F1B         	ljmp	l3446
  9310  181C  318F  2F24         	ljmp	l3448
  9311                           
  9312                           	psect	text24
  9313  1E69                     __ptext24:	
  9314 ;; *************** function _crc_append *****************
  9315 ;; Defined at:
  9316 ;;		line 143 in file "src/depend/crc16.c"
  9317 ;; Parameters:    Size  Location     Type
  9318 ;;  message         2    6[BANK0 ] PTR unsigned char 
  9319 ;;		 -> modbusBuf(32), sysData(132), 
  9320 ;;  n               2    8[BANK0 ] unsigned int 
  9321 ;; Auto vars:     Size  Location     Type
  9322 ;;  crc             2   10[BANK0 ] unsigned int 
  9323 ;; Return value:  Size  Location     Type
  9324 ;;                  1    wreg      void 
  9325 ;; Registers used:
  9326 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9327 ;; Tracked objects:
  9328 ;;		On entry : 0/0
  9329 ;;		On exit  : 0/0
  9330 ;;		Unchanged: 0/0
  9331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9332 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9333 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9334 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9335 ;;      Totals:         5       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9336 ;;Total ram usage:       11 bytes
  9337 ;; Hardware stack levels used:    1
  9338 ;; Hardware stack levels required when called:    2
  9339 ;; This function calls:
  9340 ;;		_crc_sum
  9341 ;; This function is called by:
  9342 ;;		_sys_data_save
  9343 ;;		_modbus_response_illgeal_function
  9344 ;;		_modbus_response_write_single_register
  9345 ;;		_modbus_response_write_mult_register
  9346 ;;		_modbus_response_command
  9347 ;; This function uses a non-reentrant model
  9348 ;;
  9349                           
  9350                           
  9351                           ;psect for function _crc_append
  9352  1E69                     _crc_append:	
  9353                           
  9354                           ;crc16.c: 145: uint16_t crc;;crc16.c: 146: crc = crc_sum(message, n);
  9355                           
  9356                           ;incstack = 0
  9357                           ; Regs used in _crc_append: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9358  1E69  0020               	movlb	0	; select bank0
  9359  1E6A  0827               	movf	crc_append@message+1,w
  9360  1E6B  00F2               	movwf	crc_sum@buf+1
  9361  1E6C  0826               	movf	crc_append@message,w
  9362  1E6D  00F1               	movwf	crc_sum@buf
  9363  1E6E  0829               	movf	crc_append@n+1,w
  9364  1E6F  00F4               	movwf	crc_sum@len+1
  9365  1E70  0828               	movf	crc_append@n,w
  9366  1E71  00F3               	movwf	crc_sum@len
  9367  1E72  3192  227B         	fcall	_crc_sum
  9368  1E74  0872               	movf	?_crc_sum+1,w
  9369  1E75  0020               	movlb	0	; select bank0
  9370  1E76  00AB               	movwf	crc_append@crc+1
  9371  1E77  0871               	movf	?_crc_sum,w
  9372  1E78  00AA               	movwf	crc_append@crc
  9373                           
  9374                           ;crc16.c: 147: message[n] = (uint8_t)(crc & 0xff);
  9375  1E79  0828               	movf	crc_append@n,w
  9376  1E7A  0726               	addwf	crc_append@message,w
  9377  1E7B  00F7               	movwf	??_crc_append
  9378  1E7C  0829               	movf	crc_append@n+1,w
  9379  1E7D  3D27               	addwfc	crc_append@message+1,w
  9380  1E7E  00F8               	movwf	??_crc_append+1
  9381  1E7F  0877               	movf	??_crc_append,w
  9382  1E80  0086               	movwf	6
  9383  1E81  0878               	movf	??_crc_append+1,w
  9384  1E82  0087               	movwf	7
  9385  1E83  082A               	movf	crc_append@crc,w
  9386  1E84  0081               	movwf	1
  9387                           
  9388                           ;crc16.c: 148: message[n+1] = (uint8_t)((crc >> 8) & 0xff);
  9389  1E85  082B               	movf	crc_append@crc+1,w
  9390  1E86  00F7               	movwf	??_crc_append
  9391  1E87  0828               	movf	crc_append@n,w
  9392  1E88  3E01               	addlw	1
  9393  1E89  00F8               	movwf	??_crc_append+1
  9394  1E8A  3000               	movlw	0
  9395  1E8B  3D29               	addwfc	crc_append@n+1,w
  9396  1E8C  00F9               	movwf	??_crc_append+2
  9397  1E8D  0878               	movf	??_crc_append+1,w
  9398  1E8E  0726               	addwf	crc_append@message,w
  9399  1E8F  00FA               	movwf	??_crc_append+3
  9400  1E90  0879               	movf	??_crc_append+2,w
  9401  1E91  3D27               	addwfc	crc_append@message+1,w
  9402  1E92  00FB               	movwf	??_crc_append+4
  9403  1E93  087A               	movf	??_crc_append+3,w
  9404  1E94  0086               	movwf	6
  9405  1E95  087B               	movf	??_crc_append+4,w
  9406  1E96  0087               	movwf	7
  9407  1E97  0877               	movf	??_crc_append,w
  9408  1E98  0081               	movwf	1
  9409  1E99  0008               	return
  9410  1E9A                     __end_of_crc_append:	
  9411                           
  9412                           	psect	text25
  9413  1023                     __ptext25:	
  9414 ;; *************** function _crc_verify *****************
  9415 ;; Defined at:
  9416 ;;		line 135 in file "src/depend/crc16.c"
  9417 ;; Parameters:    Size  Location     Type
  9418 ;;  message         2    6[BANK0 ] PTR unsigned char 
  9419 ;;		 -> modbusBuf(32), sysData(132), 
  9420 ;;  n               2    8[BANK0 ] unsigned int 
  9421 ;; Auto vars:     Size  Location     Type
  9422 ;;  expected        2   12[BANK0 ] unsigned int 
  9423 ;;  crccal          2   10[BANK0 ] unsigned int 
  9424 ;; Return value:  Size  Location     Type
  9425 ;;                  1    wreg      unsigned char 
  9426 ;; Registers used:
  9427 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9428 ;; Tracked objects:
  9429 ;;		On entry : 0/0
  9430 ;;		On exit  : 0/0
  9431 ;;		Unchanged: 0/0
  9432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9433 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9434 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9435 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9436 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9437 ;;Total ram usage:       10 bytes
  9438 ;; Hardware stack levels used:    1
  9439 ;; Hardware stack levels required when called:    2
  9440 ;; This function calls:
  9441 ;;		_crc_sum
  9442 ;;		_m_mem_cpy_len
  9443 ;; This function is called by:
  9444 ;;		_sys_data_init
  9445 ;;		_modbus_response_process
  9446 ;; This function uses a non-reentrant model
  9447 ;;
  9448                           
  9449                           
  9450                           ;psect for function _crc_verify
  9451  1023                     _crc_verify:	
  9452                           
  9453                           ;crc16.c: 137: uint16_t expected,crccal;;crc16.c: 138: m_mem_cpy_len((uint8_t*)(&expecte
      +                          d),(message+n-2),2);
  9454                           
  9455                           ;incstack = 0
  9456                           ; Regs used in _crc_verify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9457  1023  302C               	movlw	low crc_verify@expected
  9458  1024  00F1               	movwf	m_mem_cpy_len@d
  9459  1025  3000               	movlw	high crc_verify@expected
  9460  1026  00F2               	movwf	m_mem_cpy_len@d+1
  9461  1027  0020               	movlb	0	; select bank0
  9462  1028  0828               	movf	crc_verify@n,w
  9463  1029  0726               	addwf	crc_verify@message,w
  9464  102A  00F8               	movwf	??_crc_verify
  9465  102B  0829               	movf	crc_verify@n+1,w
  9466  102C  3D27               	addwfc	crc_verify@message+1,w
  9467  102D  00F9               	movwf	??_crc_verify+1
  9468  102E  0878               	movf	??_crc_verify,w
  9469  102F  3EFE               	addlw	254
  9470  1030  00F3               	movwf	m_mem_cpy_len@s
  9471  1031  30FF               	movlw	255
  9472  1032  3D79               	addwfc	??_crc_verify+1,w
  9473  1033  00F4               	movwf	m_mem_cpy_len@s+1
  9474  1034  3002               	movlw	2
  9475  1035  00F5               	movwf	m_mem_cpy_len@len
  9476  1036  3000               	movlw	0
  9477  1037  00F6               	movwf	m_mem_cpy_len@len+1
  9478  1038  319E  264C  3190   	fcall	_m_mem_cpy_len
  9479                           
  9480                           ;crc16.c: 139: crccal=crc_sum(message,n - 2);
  9481  103B  0020               	movlb	0	; select bank0
  9482  103C  0827               	movf	crc_verify@message+1,w
  9483  103D  00F2               	movwf	crc_sum@buf+1
  9484  103E  0826               	movf	crc_verify@message,w
  9485  103F  00F1               	movwf	crc_sum@buf
  9486  1040  0828               	movf	crc_verify@n,w
  9487  1041  3EFE               	addlw	254
  9488  1042  00F3               	movwf	crc_sum@len
  9489  1043  30FF               	movlw	255
  9490  1044  3D29               	addwfc	crc_verify@n+1,w
  9491  1045  00F4               	movwf	crc_sum@len+1
  9492  1046  3192  227B  3190   	fcall	_crc_sum
  9493  1049  0872               	movf	?_crc_sum+1,w
  9494  104A  0020               	movlb	0	; select bank0
  9495  104B  00AB               	movwf	crc_verify@crccal+1
  9496  104C  0871               	movf	?_crc_sum,w
  9497  104D  00AA               	movwf	crc_verify@crccal
  9498                           
  9499                           ;crc16.c: 140: if(expected!=crccal)return 0;
  9500  104E  082B               	movf	crc_verify@crccal+1,w
  9501  104F  062D               	xorwf	crc_verify@expected+1,w
  9502  1050  1D03               	skipz
  9503  1051  2854               	goto	u3895
  9504  1052  082A               	movf	crc_verify@crccal,w
  9505  1053  062C               	xorwf	crc_verify@expected,w
  9506  1054                     u3895:	
  9507  1054  1903               	skipnz
  9508  1055  2858               	goto	l4666
  9509  1056  3000               	movlw	0
  9510  1057  0008               	return
  9511  1058                     l4666:	
  9512                           
  9513                           ;crc16.c: 141: return 1;
  9514  1058  3001               	movlw	1
  9515  1059  0008               	return
  9516  105A                     __end_of_crc_verify:	
  9517                           
  9518                           	psect	text26
  9519  1E4C                     __ptext26:	
  9520 ;; *************** function _m_mem_cpy_len *****************
  9521 ;; Defined at:
  9522 ;;		line 47 in file "src/depend/m_string.c"
  9523 ;; Parameters:    Size  Location     Type
  9524 ;;  d               2    1[COMMON] PTR unsigned char 
  9525 ;;		 -> crc_verify@expected(2), modbusBuf(32), 
  9526 ;;  s               2    3[COMMON] PTR unsigned char 
  9527 ;;		 -> modbusBuf(32), sysData(132), eusartRxBuffer(32), 
  9528 ;;  len             2    5[COMMON] unsigned int 
  9529 ;; Auto vars:     Size  Location     Type
  9530 ;;		None
  9531 ;; Return value:  Size  Location     Type
  9532 ;;                  1    wreg      void 
  9533 ;; Registers used:
  9534 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9535 ;; Tracked objects:
  9536 ;;		On entry : 0/0
  9537 ;;		On exit  : 0/0
  9538 ;;		Unchanged: 0/0
  9539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9540 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9542 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9543 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9544 ;;Total ram usage:        7 bytes
  9545 ;; Hardware stack levels used:    1
  9546 ;; Hardware stack levels required when called:    1
  9547 ;; This function calls:
  9548 ;;		Nothing
  9549 ;; This function is called by:
  9550 ;;		_main
  9551 ;;		_crc_verify
  9552 ;; This function uses a non-reentrant model
  9553 ;;
  9554                           
  9555                           
  9556                           ;psect for function _m_mem_cpy_len
  9557  1E4C                     _m_mem_cpy_len:	
  9558  1E4C                     l4656:	
  9559                           ;m_string.c: 50: while(len)
  9560                           
  9561                           ;incstack = 0
  9562                           ; Regs used in _m_mem_cpy_len: [wreg+fsr1l+fsr1h+status,2+status,0]
  9563                           
  9564  1E4C  0875               	movf	m_mem_cpy_len@len,w
  9565  1E4D  0476               	iorwf	m_mem_cpy_len@len+1,w
  9566  1E4E  1903               	btfsc	3,2
  9567  1E4F  0008               	return
  9568                           
  9569                           ;m_string.c: 51: {;m_string.c: 52: *d++=*s++;
  9570  1E50  0873               	movf	m_mem_cpy_len@s,w
  9571  1E51  0086               	movwf	6
  9572  1E52  0874               	movf	m_mem_cpy_len@s+1,w
  9573  1E53  0087               	movwf	7
  9574  1E54  0801               	movf	1,w
  9575  1E55  00F7               	movwf	??_m_mem_cpy_len
  9576  1E56  0871               	movf	m_mem_cpy_len@d,w
  9577  1E57  0086               	movwf	6
  9578  1E58  0872               	movf	m_mem_cpy_len@d+1,w
  9579  1E59  0087               	movwf	7
  9580  1E5A  0877               	movf	??_m_mem_cpy_len,w
  9581  1E5B  0081               	movwf	1
  9582  1E5C  3001               	movlw	1
  9583  1E5D  07F3               	addwf	m_mem_cpy_len@s,f
  9584  1E5E  3000               	movlw	0
  9585  1E5F  3DF4               	addwfc	m_mem_cpy_len@s+1,f
  9586  1E60  3001               	movlw	1
  9587  1E61  07F1               	addwf	m_mem_cpy_len@d,f
  9588  1E62  3000               	movlw	0
  9589  1E63  3DF2               	addwfc	m_mem_cpy_len@d+1,f
  9590                           
  9591                           ;m_string.c: 53: len--;
  9592  1E64  3001               	movlw	1
  9593  1E65  02F5               	subwf	m_mem_cpy_len@len,f
  9594  1E66  3000               	movlw	0
  9595  1E67  3BF6               	subwfb	m_mem_cpy_len@len+1,f
  9596  1E68  2E4C               	goto	l4656
  9597  1E69                     __end_of_m_mem_cpy_len:	
  9598                           
  9599                           	psect	text27
  9600  127B                     __ptext27:	
  9601 ;; *************** function _crc_sum *****************
  9602 ;; Defined at:
  9603 ;;		line 116 in file "src/depend/crc16.c"
  9604 ;; Parameters:    Size  Location     Type
  9605 ;;  buf             2    1[COMMON] PTR unsigned char 
  9606 ;;		 -> modbusBuf(32), sysData(132), 
  9607 ;;  len             2    3[COMMON] unsigned int 
  9608 ;; Auto vars:     Size  Location     Type
  9609 ;;  crc             2    4[BANK0 ] unsigned int 
  9610 ;;  i               2    2[BANK0 ] unsigned int 
  9611 ;;  j               2    0[BANK0 ] unsigned int 
  9612 ;; Return value:  Size  Location     Type
  9613 ;;                  2    1[COMMON] unsigned int 
  9614 ;; Registers used:
  9615 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9616 ;; Tracked objects:
  9617 ;;		On entry : 0/0
  9618 ;;		On exit  : 0/0
  9619 ;;		Unchanged: 0/0
  9620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9621 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9622 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9623 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9624 ;;      Totals:         6       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9625 ;;Total ram usage:       12 bytes
  9626 ;; Hardware stack levels used:    1
  9627 ;; Hardware stack levels required when called:    1
  9628 ;; This function calls:
  9629 ;;		Nothing
  9630 ;; This function is called by:
  9631 ;;		_crc_verify
  9632 ;;		_crc_append
  9633 ;; This function uses a non-reentrant model
  9634 ;;
  9635                           
  9636                           
  9637                           ;psect for function _crc_sum
  9638  127B                     _crc_sum:	
  9639                           
  9640                           ;crc16.c: 118: uint16_t crc=0xFFFF;
  9641                           
  9642                           ;incstack = 0
  9643                           ; Regs used in _crc_sum: [wreg+fsr1l+fsr1h+status,2+status,0]
  9644  127B  30FF               	movlw	255
  9645  127C  0020               	movlb	0	; select bank0
  9646  127D  00A4               	movwf	crc_sum@crc
  9647  127E  30FF               	movlw	255
  9648  127F  00A5               	movwf	crc_sum@crc+1
  9649                           
  9650                           ;crc16.c: 119: uint16_t i, j;;crc16.c: 120: for ( j=0; j<len;j++){
  9651  1280  01A0               	clrf	crc_sum@j
  9652  1281  01A1               	clrf	crc_sum@j+1
  9653  1282                     l1045:	
  9654  1282  0874               	movf	crc_sum@len+1,w
  9655  1283  0221               	subwf	crc_sum@j+1,w
  9656  1284  1D03               	skipz
  9657  1285  2A88               	goto	u3875
  9658  1286  0873               	movf	crc_sum@len,w
  9659  1287  0220               	subwf	crc_sum@j,w
  9660  1288                     u3875:	
  9661  1288  1803               	btfsc	3,0
  9662  1289  2ACC               	goto	l4624
  9663                           
  9664                           ;crc16.c: 121: crc=crc ^*buf++;
  9665  128A  0871               	movf	crc_sum@buf,w
  9666  128B  0086               	movwf	6
  9667  128C  0872               	movf	crc_sum@buf+1,w
  9668  128D  0087               	movwf	7
  9669  128E  0824               	movf	crc_sum@crc,w
  9670  128F  0601               	xorwf	1,w
  9671  1290  00A4               	movwf	crc_sum@crc
  9672  1291  0825               	movf	crc_sum@crc+1,w
  9673  1292  00A5               	movwf	crc_sum@crc+1
  9674  1293  3001               	movlw	1
  9675  1294  07F1               	addwf	crc_sum@buf,f
  9676  1295  3000               	movlw	0
  9677  1296  3DF2               	addwfc	crc_sum@buf+1,f
  9678                           
  9679                           ;crc16.c: 122: for ( i=0; i<8; i++){
  9680  1297  01A2               	clrf	crc_sum@i
  9681  1298  01A3               	clrf	crc_sum@i+1
  9682  1299  3000               	movlw	0
  9683  129A  0223               	subwf	crc_sum@i+1,w
  9684  129B  3008               	movlw	8
  9685  129C  1903               	skipnz
  9686  129D  0222               	subwf	crc_sum@i,w
  9687  129E  1803               	btfsc	3,0
  9688  129F  2AC7               	goto	l4622
  9689  12A0                     l1047:	
  9690                           
  9691                           ;crc16.c: 124: if(crc&0x0001){
  9692  12A0  1C24               	btfss	crc_sum@crc,0
  9693  12A1  2AB2               	goto	l4616
  9694                           
  9695                           ;crc16.c: 125: crc=crc>>1;
  9696  12A2  0825               	movf	crc_sum@crc+1,w
  9697  12A3  00F6               	movwf	??_crc_sum+1
  9698  12A4  0824               	movf	crc_sum@crc,w
  9699  12A5  00F5               	movwf	??_crc_sum
  9700  12A6  36F6               	lsrf	??_crc_sum+1,f
  9701  12A7  0CF5               	rrf	??_crc_sum,f
  9702  12A8  0875               	movf	??_crc_sum,w
  9703  12A9  00A4               	movwf	crc_sum@crc
  9704  12AA  0876               	movf	??_crc_sum+1,w
  9705  12AB  00A5               	movwf	crc_sum@crc+1
  9706                           
  9707                           ;crc16.c: 126: crc=crc^ 0xa001;
  9708  12AC  3001               	movlw	1
  9709  12AD  0624               	xorwf	crc_sum@crc,w
  9710  12AE  00A4               	movwf	crc_sum@crc
  9711  12AF  30A0               	movlw	160
  9712  12B0  0625               	xorwf	crc_sum@crc+1,w
  9713  12B1  2ABB               	goto	L1
  9714  12B2                     l4616:	
  9715                           ;crc16.c: 127: }else{
  9716                           
  9717                           
  9718                           ;crc16.c: 128: crc=crc>>1;
  9719  12B2  0825               	movf	crc_sum@crc+1,w
  9720  12B3  00F6               	movwf	??_crc_sum+1
  9721  12B4  0824               	movf	crc_sum@crc,w
  9722  12B5  00F5               	movwf	??_crc_sum
  9723  12B6  36F6               	lsrf	??_crc_sum+1,f
  9724  12B7  0CF5               	rrf	??_crc_sum,f
  9725  12B8  0875               	movf	??_crc_sum,w
  9726  12B9  00A4               	movwf	crc_sum@crc
  9727  12BA  0876               	movf	??_crc_sum+1,w
  9728  12BB                     L1:	
  9729  12BB  00A5               	movwf	crc_sum@crc+1
  9730  12BC  3001               	movlw	1
  9731  12BD  07A2               	addwf	crc_sum@i,f
  9732  12BE  3000               	movlw	0
  9733  12BF  3DA3               	addwfc	crc_sum@i+1,f
  9734  12C0  3000               	movlw	0
  9735  12C1  0223               	subwf	crc_sum@i+1,w
  9736  12C2  3008               	movlw	8
  9737  12C3  1903               	skipnz
  9738  12C4  0222               	subwf	crc_sum@i,w
  9739  12C5  1C03               	skipc
  9740  12C6  2AA0               	goto	l1047
  9741  12C7                     l4622:	
  9742  12C7  3001               	movlw	1
  9743  12C8  07A0               	addwf	crc_sum@j,f
  9744  12C9  3000               	movlw	0
  9745  12CA  3DA1               	addwfc	crc_sum@j+1,f
  9746  12CB  2A82               	goto	l1045
  9747  12CC                     l4624:	
  9748                           
  9749                           ;crc16.c: 129: };crc16.c: 130: };crc16.c: 132: };crc16.c: 133: return ( crc);
  9750  12CC  0825               	movf	crc_sum@crc+1,w
  9751  12CD  00F2               	movwf	?_crc_sum+1
  9752  12CE  0824               	movf	crc_sum@crc,w
  9753  12CF  00F1               	movwf	?_crc_sum
  9754  12D0  0008               	return
  9755  12D1                     __end_of_crc_sum:	
  9756                           
  9757                           	psect	text28
  9758  148F                     __ptext28:	
  9759 ;; *************** function _calc_temp_rs *****************
  9760 ;; Defined at:
  9761 ;;		line 216 in file "src/api/sample.c"
  9762 ;; Parameters:    Size  Location     Type
  9763 ;;		None
  9764 ;; Auto vars:     Size  Location     Type
  9765 ;;		None
  9766 ;; Return value:  Size  Location     Type
  9767 ;;                  4    5[BANK0 ] unsigned long 
  9768 ;; Registers used:
  9769 ;;		wreg, status,2, status,0, pclath, cstack
  9770 ;; Tracked objects:
  9771 ;;		On entry : 0/0
  9772 ;;		On exit  : 0/0
  9773 ;;		Unchanged: 0/0
  9774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9775 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9777 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9778 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9779 ;;Total ram usage:        8 bytes
  9780 ;; Hardware stack levels used:    1
  9781 ;; Hardware stack levels required when called:    2
  9782 ;; This function calls:
  9783 ;;		___lldiv
  9784 ;;		___lmul
  9785 ;; This function is called by:
  9786 ;;		_main
  9787 ;; This function uses a non-reentrant model
  9788 ;;
  9789                           
  9790                           
  9791                           ;psect for function _calc_temp_rs
  9792  148F                     _calc_temp_rs:	
  9793                           
  9794                           ;sample.c: 230: y32=12000UL;
  9795                           
  9796                           ;incstack = 0
  9797                           ; Regs used in _calc_temp_rs: [wreg+status,2+status,0+pclath+cstack]
  9798  148F  3000               	movlw	0
  9799  1490  0020               	movlb	0	; select bank0
  9800  1491  00CA               	movwf	_y32+3
  9801  1492  3000               	movlw	0
  9802  1493  00C9               	movwf	_y32+2
  9803  1494  302E               	movlw	46
  9804  1495  00C8               	movwf	_y32+1
  9805  1496  30E0               	movlw	224
  9806  1497  00C7               	movwf	_y32
  9807                           
  9808                           ;sample.c: 231: y32=y32*rtAdcValueRsHi;
  9809  1498  085F               	movf	_rtAdcValueRsHi,w
  9810  1499  00F1               	movwf	___lmul@multiplier
  9811  149A  0860               	movf	_rtAdcValueRsHi+1,w
  9812  149B  00F2               	movwf	___lmul@multiplier+1
  9813  149C  01F3               	clrf	___lmul@multiplier+2
  9814  149D  01F4               	clrf	___lmul@multiplier+3
  9815  149E  084A               	movf	_y32+3,w
  9816  149F  00F8               	movwf	___lmul@multiplicand+3
  9817  14A0  0849               	movf	_y32+2,w
  9818  14A1  00F7               	movwf	___lmul@multiplicand+2
  9819  14A2  0848               	movf	_y32+1,w
  9820  14A3  00F6               	movwf	___lmul@multiplicand+1
  9821  14A4  0847               	movf	_y32,w
  9822  14A5  00F5               	movwf	___lmul@multiplicand
  9823  14A6  319E  269A  3194   	fcall	___lmul
  9824  14A9  0874               	movf	?___lmul+3,w
  9825  14AA  0020               	movlb	0	; select bank0
  9826  14AB  00CA               	movwf	_y32+3
  9827  14AC  0873               	movf	?___lmul+2,w
  9828  14AD  00C9               	movwf	_y32+2
  9829  14AE  0872               	movf	?___lmul+1,w
  9830  14AF  00C8               	movwf	_y32+1
  9831  14B0  0871               	movf	?___lmul,w
  9832  14B1  00C7               	movwf	_y32
  9833                           
  9834                           ;sample.c: 232: x32=rtAdcValueRsLo;
  9835  14B2  0861               	movf	_rtAdcValueRsLo,w
  9836  14B3  0021               	movlb	1	; select bank1
  9837  14B4  00B8               	movwf	_x32^(0+128)
  9838  14B5  0020               	movlb	0	; select bank0
  9839  14B6  0862               	movf	_rtAdcValueRsLo+1,w
  9840  14B7  0021               	movlb	1	; select bank1
  9841  14B8  00B9               	movwf	(_x32^(0+128)+1)
  9842  14B9  01BA               	clrf	(_x32^(0+128)+2)
  9843  14BA  01BB               	clrf	(_x32^(0+128)+3)
  9844                           
  9845                           ;sample.c: 233: y32=y32/x32;
  9846  14BB  083B               	movf	(_x32+3)^(0+128),w
  9847  14BC  00F4               	movwf	___lldiv@divisor+3
  9848  14BD  083A               	movf	(_x32+2)^(0+128),w
  9849  14BE  00F3               	movwf	___lldiv@divisor+2
  9850  14BF  0839               	movf	(_x32+1)^(0+128),w
  9851  14C0  00F2               	movwf	___lldiv@divisor+1
  9852  14C1  0838               	movf	_x32^(0+128),w
  9853  14C2  00F1               	movwf	___lldiv@divisor
  9854  14C3  0020               	movlb	0	; select bank0
  9855  14C4  084A               	movf	_y32+3,w
  9856  14C5  00F8               	movwf	___lldiv@dividend+3
  9857  14C6  0849               	movf	_y32+2,w
  9858  14C7  00F7               	movwf	___lldiv@dividend+2
  9859  14C8  0848               	movf	_y32+1,w
  9860  14C9  00F6               	movwf	___lldiv@dividend+1
  9861  14CA  0847               	movf	_y32,w
  9862  14CB  00F5               	movwf	___lldiv@dividend
  9863  14CC  3191  21D4  3194   	fcall	___lldiv
  9864  14CF  0874               	movf	?___lldiv+3,w
  9865  14D0  0020               	movlb	0	; select bank0
  9866  14D1  00CA               	movwf	_y32+3
  9867  14D2  0873               	movf	?___lldiv+2,w
  9868  14D3  00C9               	movwf	_y32+2
  9869  14D4  0872               	movf	?___lldiv+1,w
  9870  14D5  00C8               	movwf	_y32+1
  9871  14D6  0871               	movf	?___lldiv,w
  9872  14D7  00C7               	movwf	_y32
  9873                           
  9874                           ;sample.c: 234: if(y32<2000)y32=2000;
  9875  14D8  084A               	movf	_y32+3,w
  9876  14D9  1D03               	btfss	3,2
  9877  14DA  2CEC               	goto	l4904
  9878  14DB  0849               	movf	_y32+2,w
  9879  14DC  1D03               	btfss	3,2
  9880  14DD  2CEC               	goto	l4904
  9881  14DE  30D0               	movlw	208
  9882  14DF  0247               	subwf	_y32,w
  9883  14E0  3007               	movlw	7
  9884  14E1  3B48               	subwfb	_y32+1,w
  9885  14E2  1803               	btfsc	3,0
  9886  14E3  2CEC               	goto	l4904
  9887  14E4  3000               	movlw	0
  9888  14E5  00CA               	movwf	_y32+3
  9889  14E6  3000               	movlw	0
  9890  14E7  00C9               	movwf	_y32+2
  9891  14E8  3007               	movlw	7
  9892  14E9  00C8               	movwf	_y32+1
  9893  14EA  30D0               	movlw	208
  9894  14EB  00C7               	movwf	_y32
  9895  14EC                     l4904:	
  9896                           
  9897                           ;sample.c: 235: if(y32>25000)y32=25000;
  9898  14EC  084A               	movf	_y32+3,w
  9899  14ED  1D03               	btfss	3,2
  9900  14EE  2CF8               	goto	l4906
  9901  14EF  0849               	movf	_y32+2,w
  9902  14F0  1D03               	btfss	3,2
  9903  14F1  2CF8               	goto	l4906
  9904  14F2  30A9               	movlw	169
  9905  14F3  0247               	subwf	_y32,w
  9906  14F4  3061               	movlw	97
  9907  14F5  3B48               	subwfb	_y32+1,w
  9908  14F6  1C03               	btfss	3,0
  9909  14F7  2D00               	goto	l630
  9910  14F8                     l4906:	
  9911  14F8  3000               	movlw	0
  9912  14F9  00CA               	movwf	_y32+3
  9913  14FA  3000               	movlw	0
  9914  14FB  00C9               	movwf	_y32+2
  9915  14FC  3061               	movlw	97
  9916  14FD  00C8               	movwf	_y32+1
  9917  14FE  30A8               	movlw	168
  9918  14FF  00C7               	movwf	_y32
  9919  1500                     l630:	
  9920                           
  9921                           ;sample.c: 236: y32=y32-1000;
  9922  1500  3018               	movlw	24
  9923  1501  00A9               	movwf	??_calc_temp_rs
  9924  1502  30FC               	movlw	252
  9925  1503  00AA               	movwf	??_calc_temp_rs+1
  9926  1504  30FF               	movlw	255
  9927  1505  00AB               	movwf	??_calc_temp_rs+2
  9928  1506  30FF               	movlw	255
  9929  1507  00AC               	movwf	??_calc_temp_rs+3
  9930  1508  0847               	movf	_y32,w
  9931  1509  07A9               	addwf	??_calc_temp_rs,f
  9932  150A  0848               	movf	_y32+1,w
  9933  150B  3DAA               	addwfc	??_calc_temp_rs+1,f
  9934  150C  0849               	movf	_y32+2,w
  9935  150D  3DAB               	addwfc	??_calc_temp_rs+2,f
  9936  150E  084A               	movf	_y32+3,w
  9937  150F  3DAC               	addwfc	??_calc_temp_rs+3,f
  9938  1510  082C               	movf	??_calc_temp_rs+3,w
  9939  1511  00CA               	movwf	_y32+3
  9940  1512  082B               	movf	??_calc_temp_rs+2,w
  9941  1513  00C9               	movwf	_y32+2
  9942  1514  082A               	movf	??_calc_temp_rs+1,w
  9943  1515  00C8               	movwf	_y32+1
  9944  1516  0829               	movf	??_calc_temp_rs,w
  9945  1517  00C7               	movwf	_y32
  9946                           
  9947                           ;sample.c: 237: return (uint16_t)y32;
  9948  1518  0847               	movf	_y32,w
  9949  1519  00A5               	movwf	?_calc_temp_rs
  9950  151A  0848               	movf	_y32+1,w
  9951  151B  00A6               	movwf	?_calc_temp_rs+1
  9952  151C  01A7               	clrf	?_calc_temp_rs+2
  9953  151D  01A8               	clrf	?_calc_temp_rs+3
  9954  151E  0008               	return
  9955  151F                     __end_of_calc_temp_rs:	
  9956                           
  9957                           	psect	text29
  9958  1727                     __ptext29:	
  9959 ;; *************** function _calc_temp_rc *****************
  9960 ;; Defined at:
  9961 ;;		line 240 in file "src/api/sample.c"
  9962 ;; Parameters:    Size  Location     Type
  9963 ;;		None
  9964 ;; Auto vars:     Size  Location     Type
  9965 ;;		None
  9966 ;; Return value:  Size  Location     Type
  9967 ;;                  4    5[BANK0 ] unsigned long 
  9968 ;; Registers used:
  9969 ;;		wreg, status,2, status,0, pclath, cstack
  9970 ;; Tracked objects:
  9971 ;;		On entry : 0/0
  9972 ;;		On exit  : 0/0
  9973 ;;		Unchanged: 0/0
  9974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9975 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9977 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9978 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9979 ;;Total ram usage:       12 bytes
  9980 ;; Hardware stack levels used:    1
  9981 ;; Hardware stack levels required when called:    2
  9982 ;; This function calls:
  9983 ;;		___lldiv
  9984 ;;		___lmul
  9985 ;; This function is called by:
  9986 ;;		_main
  9987 ;; This function uses a non-reentrant model
  9988 ;;
  9989                           
  9990                           
  9991                           ;psect for function _calc_temp_rc
  9992  1727                     _calc_temp_rc:	
  9993                           
  9994                           ;sample.c: 244: x32=300000UL;
  9995                           
  9996                           ;incstack = 0
  9997                           ; Regs used in _calc_temp_rc: [wreg+status,2+status,0+pclath+cstack]
  9998  1727  3000               	movlw	0
  9999  1728  0021               	movlb	1	; select bank1
 10000  1729  00BB               	movwf	(_x32+3)^(0+128)
 10001  172A  3004               	movlw	4
 10002  172B  00BA               	movwf	(_x32+2)^(0+128)
 10003  172C  3093               	movlw	147
 10004  172D  00B9               	movwf	(_x32+1)^(0+128)
 10005  172E  30E0               	movlw	224
 10006  172F  00B8               	movwf	_x32^(0+128)
 10007                           
 10008                           ;sample.c: 245: x32=x32*rtAdcValueRcLo;
 10009  1730  0020               	movlb	0	; select bank0
 10010  1731  085D               	movf	_rtAdcValueRcLo,w
 10011  1732  00F1               	movwf	___lmul@multiplier
 10012  1733  085E               	movf	_rtAdcValueRcLo+1,w
 10013  1734  00F2               	movwf	___lmul@multiplier+1
 10014  1735  01F3               	clrf	___lmul@multiplier+2
 10015  1736  01F4               	clrf	___lmul@multiplier+3
 10016  1737  0021               	movlb	1	; select bank1
 10017  1738  083B               	movf	(_x32+3)^(0+128),w
 10018  1739  00F8               	movwf	___lmul@multiplicand+3
 10019  173A  083A               	movf	(_x32+2)^(0+128),w
 10020  173B  00F7               	movwf	___lmul@multiplicand+2
 10021  173C  0839               	movf	(_x32+1)^(0+128),w
 10022  173D  00F6               	movwf	___lmul@multiplicand+1
 10023  173E  0838               	movf	_x32^(0+128),w
 10024  173F  00F5               	movwf	___lmul@multiplicand
 10025  1740  319E  269A  3197   	fcall	___lmul
 10026  1743  0874               	movf	?___lmul+3,w
 10027  1744  0021               	movlb	1	; select bank1
 10028  1745  00BB               	movwf	(_x32+3)^(0+128)
 10029  1746  0873               	movf	?___lmul+2,w
 10030  1747  00BA               	movwf	(_x32+2)^(0+128)
 10031  1748  0872               	movf	?___lmul+1,w
 10032  1749  00B9               	movwf	(_x32+1)^(0+128)
 10033  174A  0871               	movf	?___lmul,w
 10034  174B  00B8               	movwf	_x32^(0+128)
 10035                           
 10036                           ;sample.c: 248: y32=rtAdcValueRcHi;
 10037  174C  0020               	movlb	0	; select bank0
 10038  174D  085B               	movf	_rtAdcValueRcHi,w
 10039  174E  00C7               	movwf	_y32
 10040  174F  085C               	movf	_rtAdcValueRcHi+1,w
 10041  1750  00C8               	movwf	_y32+1
 10042  1751  01C9               	clrf	_y32+2
 10043  1752  01CA               	clrf	_y32+3
 10044                           
 10045                           ;sample.c: 249: y32=y32*3100;
 10046  1753  084A               	movf	_y32+3,w
 10047  1754  00F4               	movwf	___lmul@multiplier+3
 10048  1755  0849               	movf	_y32+2,w
 10049  1756  00F3               	movwf	___lmul@multiplier+2
 10050  1757  0848               	movf	_y32+1,w
 10051  1758  00F2               	movwf	___lmul@multiplier+1
 10052  1759  0847               	movf	_y32,w
 10053  175A  00F1               	movwf	___lmul@multiplier
 10054  175B  3000               	movlw	0
 10055  175C  00F8               	movwf	___lmul@multiplicand+3
 10056  175D  3000               	movlw	0
 10057  175E  00F7               	movwf	___lmul@multiplicand+2
 10058  175F  300C               	movlw	12
 10059  1760  00F6               	movwf	___lmul@multiplicand+1
 10060  1761  301C               	movlw	28
 10061  1762  00F5               	movwf	___lmul@multiplicand
 10062  1763  319E  269A  3197   	fcall	___lmul
 10063  1766  0874               	movf	?___lmul+3,w
 10064  1767  0020               	movlb	0	; select bank0
 10065  1768  00CA               	movwf	_y32+3
 10066  1769  0873               	movf	?___lmul+2,w
 10067  176A  00C9               	movwf	_y32+2
 10068  176B  0872               	movf	?___lmul+1,w
 10069  176C  00C8               	movwf	_y32+1
 10070  176D  0871               	movf	?___lmul,w
 10071  176E  00C7               	movwf	_y32
 10072                           
 10073                           ;sample.c: 250: y32=y32/100;
 10074  176F  3000               	movlw	0
 10075  1770  00F4               	movwf	___lldiv@divisor+3
 10076  1771  3000               	movlw	0
 10077  1772  00F3               	movwf	___lldiv@divisor+2
 10078  1773  3000               	movlw	0
 10079  1774  00F2               	movwf	___lldiv@divisor+1
 10080  1775  3064               	movlw	100
 10081  1776  00F1               	movwf	___lldiv@divisor
 10082  1777  084A               	movf	_y32+3,w
 10083  1778  00F8               	movwf	___lldiv@dividend+3
 10084  1779  0849               	movf	_y32+2,w
 10085  177A  00F7               	movwf	___lldiv@dividend+2
 10086  177B  0848               	movf	_y32+1,w
 10087  177C  00F6               	movwf	___lldiv@dividend+1
 10088  177D  0847               	movf	_y32,w
 10089  177E  00F5               	movwf	___lldiv@dividend
 10090  177F  3191  21D4  3197   	fcall	___lldiv
 10091  1782  0874               	movf	?___lldiv+3,w
 10092  1783  0020               	movlb	0	; select bank0
 10093  1784  00CA               	movwf	_y32+3
 10094  1785  0873               	movf	?___lldiv+2,w
 10095  1786  00C9               	movwf	_y32+2
 10096  1787  0872               	movf	?___lldiv+1,w
 10097  1788  00C8               	movwf	_y32+1
 10098  1789  0871               	movf	?___lldiv,w
 10099  178A  00C7               	movwf	_y32
 10100                           
 10101                           ;sample.c: 251: y32=y32-rtAdcValueRcLo;
 10102  178B  0847               	movf	_y32,w
 10103  178C  00A9               	movwf	??_calc_temp_rc
 10104  178D  0848               	movf	_y32+1,w
 10105  178E  00AA               	movwf	??_calc_temp_rc+1
 10106  178F  0849               	movf	_y32+2,w
 10107  1790  00AB               	movwf	??_calc_temp_rc+2
 10108  1791  084A               	movf	_y32+3,w
 10109  1792  00AC               	movwf	??_calc_temp_rc+3
 10110  1793  085D               	movf	_rtAdcValueRcLo,w
 10111  1794  00AD               	movwf	??_calc_temp_rc+4
 10112  1795  085E               	movf	_rtAdcValueRcLo+1,w
 10113  1796  00AE               	movwf	??_calc_temp_rc+5
 10114  1797  01AF               	clrf	??_calc_temp_rc+6
 10115  1798  01B0               	clrf	??_calc_temp_rc+7
 10116  1799  09AD               	comf	??_calc_temp_rc+4,f
 10117  179A  09AE               	comf	??_calc_temp_rc+5,f
 10118  179B  09AF               	comf	??_calc_temp_rc+6,f
 10119  179C  09B0               	comf	??_calc_temp_rc+7,f
 10120  179D  0AAD               	incf	??_calc_temp_rc+4,f
 10121  179E  1903               	skipnz
 10122  179F  0AAE               	incf	??_calc_temp_rc+5,f
 10123  17A0  1903               	skipnz
 10124  17A1  0AAF               	incf	??_calc_temp_rc+6,f
 10125  17A2  1903               	skipnz
 10126  17A3  0AB0               	incf	??_calc_temp_rc+7,f
 10127  17A4  082D               	movf	??_calc_temp_rc+4,w
 10128  17A5  07A9               	addwf	??_calc_temp_rc,f
 10129  17A6  082E               	movf	??_calc_temp_rc+5,w
 10130  17A7  3DAA               	addwfc	??_calc_temp_rc+1,f
 10131  17A8  082F               	movf	??_calc_temp_rc+6,w
 10132  17A9  3DAB               	addwfc	??_calc_temp_rc+2,f
 10133  17AA  0830               	movf	??_calc_temp_rc+7,w
 10134  17AB  3DAC               	addwfc	??_calc_temp_rc+3,f
 10135  17AC  082C               	movf	??_calc_temp_rc+3,w
 10136  17AD  00CA               	movwf	_y32+3
 10137  17AE  082B               	movf	??_calc_temp_rc+2,w
 10138  17AF  00C9               	movwf	_y32+2
 10139  17B0  082A               	movf	??_calc_temp_rc+1,w
 10140  17B1  00C8               	movwf	_y32+1
 10141  17B2  0829               	movf	??_calc_temp_rc,w
 10142  17B3  00C7               	movwf	_y32
 10143                           
 10144                           ;sample.c: 254: y32=x32/y32;
 10145  17B4  084A               	movf	_y32+3,w
 10146  17B5  00F4               	movwf	___lldiv@divisor+3
 10147  17B6  0849               	movf	_y32+2,w
 10148  17B7  00F3               	movwf	___lldiv@divisor+2
 10149  17B8  0848               	movf	_y32+1,w
 10150  17B9  00F2               	movwf	___lldiv@divisor+1
 10151  17BA  0847               	movf	_y32,w
 10152  17BB  00F1               	movwf	___lldiv@divisor
 10153  17BC  0021               	movlb	1	; select bank1
 10154  17BD  083B               	movf	(_x32+3)^(0+128),w
 10155  17BE  00F8               	movwf	___lldiv@dividend+3
 10156  17BF  083A               	movf	(_x32+2)^(0+128),w
 10157  17C0  00F7               	movwf	___lldiv@dividend+2
 10158  17C1  0839               	movf	(_x32+1)^(0+128),w
 10159  17C2  00F6               	movwf	___lldiv@dividend+1
 10160  17C3  0838               	movf	_x32^(0+128),w
 10161  17C4  00F5               	movwf	___lldiv@dividend
 10162  17C5  3191  21D4  3197   	fcall	___lldiv
 10163  17C8  0874               	movf	?___lldiv+3,w
 10164  17C9  0020               	movlb	0	; select bank0
 10165  17CA  00CA               	movwf	_y32+3
 10166  17CB  0873               	movf	?___lldiv+2,w
 10167  17CC  00C9               	movwf	_y32+2
 10168  17CD  0872               	movf	?___lldiv+1,w
 10169  17CE  00C8               	movwf	_y32+1
 10170  17CF  0871               	movf	?___lldiv,w
 10171  17D0  00C7               	movwf	_y32
 10172                           
 10173                           ;sample.c: 255: if(y32<2000)y32=2000;
 10174  17D1  084A               	movf	_y32+3,w
 10175  17D2  1D03               	btfss	3,2
 10176  17D3  2FE5               	goto	l4922
 10177  17D4  0849               	movf	_y32+2,w
 10178  17D5  1D03               	btfss	3,2
 10179  17D6  2FE5               	goto	l4922
 10180  17D7  30D0               	movlw	208
 10181  17D8  0247               	subwf	_y32,w
 10182  17D9  3007               	movlw	7
 10183  17DA  3B48               	subwfb	_y32+1,w
 10184  17DB  1803               	btfsc	3,0
 10185  17DC  2FE5               	goto	l4922
 10186  17DD  3000               	movlw	0
 10187  17DE  00CA               	movwf	_y32+3
 10188  17DF  3000               	movlw	0
 10189  17E0  00C9               	movwf	_y32+2
 10190  17E1  3007               	movlw	7
 10191  17E2  00C8               	movwf	_y32+1
 10192  17E3  30D0               	movlw	208
 10193  17E4  00C7               	movwf	_y32
 10194  17E5                     l4922:	
 10195                           
 10196                           ;sample.c: 256: if(y32>25000)y32=25000;
 10197  17E5  084A               	movf	_y32+3,w
 10198  17E6  1D03               	btfss	3,2
 10199  17E7  2FF1               	goto	l4924
 10200  17E8  0849               	movf	_y32+2,w
 10201  17E9  1D03               	btfss	3,2
 10202  17EA  2FF1               	goto	l4924
 10203  17EB  30A9               	movlw	169
 10204  17EC  0247               	subwf	_y32,w
 10205  17ED  3061               	movlw	97
 10206  17EE  3B48               	subwfb	_y32+1,w
 10207  17EF  1C03               	btfss	3,0
 10208  17F0  2FF9               	goto	l635
 10209  17F1                     l4924:	
 10210  17F1  3000               	movlw	0
 10211  17F2  00CA               	movwf	_y32+3
 10212  17F3  3000               	movlw	0
 10213  17F4  00C9               	movwf	_y32+2
 10214  17F5  3061               	movlw	97
 10215  17F6  00C8               	movwf	_y32+1
 10216  17F7  30A8               	movlw	168
 10217  17F8  00C7               	movwf	_y32
 10218  17F9                     l635:	
 10219                           
 10220                           ;sample.c: 258: return (uint16_t)y32;
 10221  17F9  0847               	movf	_y32,w
 10222  17FA  00A5               	movwf	?_calc_temp_rc
 10223  17FB  0848               	movf	_y32+1,w
 10224  17FC  00A6               	movwf	?_calc_temp_rc+1
 10225  17FD  01A7               	clrf	?_calc_temp_rc+2
 10226  17FE  01A8               	clrf	?_calc_temp_rc+3
 10227  17FF  0008               	return
 10228  1800                     __end_of_calc_temp_rc:	
 10229                           
 10230                           	psect	text30
 10231  132E                     __ptext30:	
 10232 ;; *************** function _calc_rs_lo_avg *****************
 10233 ;; Defined at:
 10234 ;;		line 435 in file "src/api/sample.c"
 10235 ;; Parameters:    Size  Location     Type
 10236 ;;  x               2    5[BANK0 ] unsigned int 
 10237 ;; Auto vars:     Size  Location     Type
 10238 ;;  t32             4    7[BANK0 ] unsigned long 
 10239 ;;  i               1   11[BANK0 ] unsigned char 
 10240 ;; Return value:  Size  Location     Type
 10241 ;;                  2    5[BANK0 ] unsigned int 
 10242 ;; Registers used:
 10243 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10244 ;; Tracked objects:
 10245 ;;		On entry : 0/0
 10246 ;;		On exit  : 0/0
 10247 ;;		Unchanged: 0/0
 10248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10249 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10250 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10251 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10252 ;;      Totals:         2       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10253 ;;Total ram usage:        9 bytes
 10254 ;; Hardware stack levels used:    1
 10255 ;; Hardware stack levels required when called:    2
 10256 ;; This function calls:
 10257 ;;		___lldiv
 10258 ;; This function is called by:
 10259 ;;		_main
 10260 ;; This function uses a non-reentrant model
 10261 ;;
 10262                           
 10263                           
 10264                           ;psect for function _calc_rs_lo_avg
 10265  132E                     _calc_rs_lo_avg:	
 10266                           
 10267                           ;sample.c: 437: uint8_t i;;sample.c: 438: uint32_t t32=0;
 10268                           
 10269                           ;incstack = 0
 10270                           ; Regs used in _calc_rs_lo_avg: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10271  132E  3000               	movlw	0
 10272  132F  0020               	movlb	0	; select bank0
 10273  1330  00AA               	movwf	calc_rs_lo_avg@t32+3
 10274  1331  3000               	movlw	0
 10275  1332  00A9               	movwf	calc_rs_lo_avg@t32+2
 10276  1333  3000               	movlw	0
 10277  1334  00A8               	movwf	calc_rs_lo_avg@t32+1
 10278  1335  3000               	movlw	0
 10279  1336  00A7               	movwf	calc_rs_lo_avg@t32
 10280                           
 10281                           ;sample.c: 440: for(i=0;i<6-1;i++){
 10282  1337  01AB               	clrf	calc_rs_lo_avg@i
 10283  1338  3005               	movlw	5
 10284  1339  022B               	subwf	calc_rs_lo_avg@i,w
 10285  133A  1803               	btfsc	3,0
 10286  133B  2B60               	goto	l4182
 10287  133C                     l4174:	
 10288                           
 10289                           ;sample.c: 441: rsLoAvgBuf[i]=rsLoAvgBuf[i+1];
 10290  133C  352B               	lslf	calc_rs_lo_avg@i,w
 10291  133D  3E02               	addlw	2
 10292  133E  3EAC               	addlw	(low (_rsLoAvgBuf| 0))& (0+255)
 10293  133F  0086               	movwf	6
 10294  1340  0187               	clrf	7
 10295  1341  352B               	lslf	calc_rs_lo_avg@i,w
 10296  1342  3EAC               	addlw	(low (_rsLoAvgBuf| 0))& (0+255)
 10297  1343  0084               	movwf	4
 10298  1344  0185               	clrf	5
 10299  1345  3F40               	moviw [0]fsr1
 10300  1346  3F80               	movwi [0]fsr0
 10301  1347  3F41               	moviw [1]fsr1
 10302  1348  3F81               	movwi [1]fsr0
 10303                           
 10304                           ;sample.c: 442: t32+=((uint32_t)rsLoAvgBuf[i]);
 10305  1349  352B               	lslf	calc_rs_lo_avg@i,w
 10306  134A  3EAC               	addlw	(low (_rsLoAvgBuf| 0))& (0+255)
 10307  134B  0086               	movwf	6
 10308  134C  0187               	clrf	7
 10309  134D  3F40               	moviw [0]fsr1
 10310  134E  00FA               	movwf	??_calc_rs_lo_avg
 10311  134F  3F41               	moviw [1]fsr1
 10312  1350  00FB               	movwf	??_calc_rs_lo_avg+1
 10313  1351  087A               	movf	??_calc_rs_lo_avg,w
 10314  1352  07A7               	addwf	calc_rs_lo_avg@t32,f
 10315  1353  087B               	movf	??_calc_rs_lo_avg+1,w
 10316  1354  3DA8               	addwfc	calc_rs_lo_avg@t32+1,f
 10317  1355  3000               	movlw	0
 10318  1356  3DA9               	addwfc	calc_rs_lo_avg@t32+2,f
 10319  1357  3DAA               	addwfc	calc_rs_lo_avg@t32+3,f
 10320  1358  3001               	movlw	1
 10321  1359  00FA               	movwf	??_calc_rs_lo_avg
 10322  135A  087A               	movf	??_calc_rs_lo_avg,w
 10323  135B  07AB               	addwf	calc_rs_lo_avg@i,f
 10324  135C  3005               	movlw	5
 10325  135D  022B               	subwf	calc_rs_lo_avg@i,w
 10326  135E  1C03               	skipc
 10327  135F  2B3C               	goto	l4174
 10328  1360                     l4182:	
 10329                           
 10330                           ;sample.c: 443: };sample.c: 444: rsLoAvgBuf[i]=x;
 10331  1360  352B               	lslf	calc_rs_lo_avg@i,w
 10332  1361  3EAC               	addlw	(low (_rsLoAvgBuf| 0))& (0+255)
 10333  1362  0086               	movwf	6
 10334  1363  0187               	clrf	7
 10335  1364  0825               	movf	calc_rs_lo_avg@x,w
 10336  1365  3FC0               	movwi [0]fsr1
 10337  1366  0826               	movf	calc_rs_lo_avg@x+1,w
 10338  1367  3FC1               	movwi [1]fsr1
 10339                           
 10340                           ;sample.c: 445: t32+=x;
 10341  1368  0825               	movf	calc_rs_lo_avg@x,w
 10342  1369  07A7               	addwf	calc_rs_lo_avg@t32,f
 10343  136A  0826               	movf	calc_rs_lo_avg@x+1,w
 10344  136B  3DA8               	addwfc	calc_rs_lo_avg@t32+1,f
 10345  136C  3000               	movlw	0
 10346  136D  3DA9               	addwfc	calc_rs_lo_avg@t32+2,f
 10347  136E  3DAA               	addwfc	calc_rs_lo_avg@t32+3,f
 10348                           
 10349                           ;sample.c: 446: t32/=6;
 10350  136F  3000               	movlw	0
 10351  1370  00F4               	movwf	___lldiv@divisor+3
 10352  1371  3000               	movlw	0
 10353  1372  00F3               	movwf	___lldiv@divisor+2
 10354  1373  3000               	movlw	0
 10355  1374  00F2               	movwf	___lldiv@divisor+1
 10356  1375  3006               	movlw	6
 10357  1376  00F1               	movwf	___lldiv@divisor
 10358  1377  082A               	movf	calc_rs_lo_avg@t32+3,w
 10359  1378  00F8               	movwf	___lldiv@dividend+3
 10360  1379  0829               	movf	calc_rs_lo_avg@t32+2,w
 10361  137A  00F7               	movwf	___lldiv@dividend+2
 10362  137B  0828               	movf	calc_rs_lo_avg@t32+1,w
 10363  137C  00F6               	movwf	___lldiv@dividend+1
 10364  137D  0827               	movf	calc_rs_lo_avg@t32,w
 10365  137E  00F5               	movwf	___lldiv@dividend
 10366  137F  3191  21D4         	fcall	___lldiv
 10367  1381  0874               	movf	?___lldiv+3,w
 10368  1382  0020               	movlb	0	; select bank0
 10369  1383  00AA               	movwf	calc_rs_lo_avg@t32+3
 10370  1384  0873               	movf	?___lldiv+2,w
 10371  1385  00A9               	movwf	calc_rs_lo_avg@t32+2
 10372  1386  0872               	movf	?___lldiv+1,w
 10373  1387  00A8               	movwf	calc_rs_lo_avg@t32+1
 10374  1388  0871               	movf	?___lldiv,w
 10375  1389  00A7               	movwf	calc_rs_lo_avg@t32
 10376                           
 10377                           ;sample.c: 447: return (uint16_t)t32;
 10378  138A  0828               	movf	calc_rs_lo_avg@t32+1,w
 10379  138B  00A6               	movwf	?_calc_rs_lo_avg+1
 10380  138C  0827               	movf	calc_rs_lo_avg@t32,w
 10381  138D  00A5               	movwf	?_calc_rs_lo_avg
 10382  138E  0008               	return
 10383  138F                     __end_of_calc_rs_lo_avg:	
 10384                           
 10385                           	psect	text31
 10386  11D4                     __ptext31:	
 10387 ;; *************** function ___lldiv *****************
 10388 ;; Defined at:
 10389 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
 10390 ;; Parameters:    Size  Location     Type
 10391 ;;  divisor         4    1[COMMON] unsigned long 
 10392 ;;  dividend        4    5[COMMON] unsigned long 
 10393 ;; Auto vars:     Size  Location     Type
 10394 ;;  quotient        4    0[BANK0 ] unsigned long 
 10395 ;;  counter         1    4[BANK0 ] unsigned char 
 10396 ;; Return value:  Size  Location     Type
 10397 ;;                  4    1[COMMON] unsigned long 
 10398 ;; Registers used:
 10399 ;;		wreg, status,2, status,0
 10400 ;; Tracked objects:
 10401 ;;		On entry : 0/0
 10402 ;;		On exit  : 0/0
 10403 ;;		Unchanged: 0/0
 10404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10405 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10406 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10407 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10408 ;;      Totals:         9       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10409 ;;Total ram usage:       14 bytes
 10410 ;; Hardware stack levels used:    1
 10411 ;; Hardware stack levels required when called:    1
 10412 ;; This function calls:
 10413 ;;		Nothing
 10414 ;; This function is called by:
 10415 ;;		_calc_temp_rs
 10416 ;;		_calc_temp_rc
 10417 ;;		_calc_rs_lo_avg
 10418 ;; This function uses a non-reentrant model
 10419 ;;
 10420                           
 10421                           
 10422                           ;psect for function ___lldiv
 10423  11D4                     ___lldiv:	
 10424                           
 10425                           ;incstack = 0
 10426                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 10427  11D4  3000               	movlw	0
 10428  11D5  0020               	movlb	0	; select bank0
 10429  11D6  00A3               	movwf	___lldiv@quotient+3
 10430  11D7  3000               	movlw	0
 10431  11D8  00A2               	movwf	___lldiv@quotient+2
 10432  11D9  3000               	movlw	0
 10433  11DA  00A1               	movwf	___lldiv@quotient+1
 10434  11DB  3000               	movlw	0
 10435  11DC  00A0               	movwf	___lldiv@quotient
 10436  11DD  0874               	movf	___lldiv@divisor+3,w
 10437  11DE  0473               	iorwf	___lldiv@divisor+2,w
 10438  11DF  0472               	iorwf	___lldiv@divisor+1,w
 10439  11E0  0471               	iorwf	___lldiv@divisor,w
 10440  11E1  1903               	skipnz
 10441  11E2  2A1E               	goto	l3912
 10442  11E3  01A4               	clrf	___lldiv@counter
 10443  11E4  0AA4               	incf	___lldiv@counter,f
 10444  11E5                     l3898:	
 10445  11E5  1BF4               	btfsc	___lldiv@divisor+3,7
 10446  11E6  29F3               	goto	l3900
 10447  11E7  3001               	movlw	1
 10448  11E8                     u2745:	
 10449  11E8  35F1               	lslf	___lldiv@divisor,f
 10450  11E9  0DF2               	rlf	___lldiv@divisor+1,f
 10451  11EA  0DF3               	rlf	___lldiv@divisor+2,f
 10452  11EB  0DF4               	rlf	___lldiv@divisor+3,f
 10453  11EC  0B89               	decfsz	9,f
 10454  11ED  29E8               	goto	u2745
 10455  11EE  3001               	movlw	1
 10456  11EF  00F9               	movwf	??___lldiv
 10457  11F0  0879               	movf	??___lldiv,w
 10458  11F1  07A4               	addwf	___lldiv@counter,f
 10459  11F2  29E5               	goto	l3898
 10460  11F3                     l3900:	
 10461  11F3  3001               	movlw	1
 10462  11F4                     u2765:	
 10463  11F4  35A0               	lslf	___lldiv@quotient,f
 10464  11F5  0DA1               	rlf	___lldiv@quotient+1,f
 10465  11F6  0DA2               	rlf	___lldiv@quotient+2,f
 10466  11F7  0DA3               	rlf	___lldiv@quotient+3,f
 10467  11F8  0B89               	decfsz	9,f
 10468  11F9  29F4               	goto	u2765
 10469  11FA  0874               	movf	___lldiv@divisor+3,w
 10470  11FB  0278               	subwf	___lldiv@dividend+3,w
 10471  11FC  1D03               	skipz
 10472  11FD  2A08               	goto	u2775
 10473  11FE  0873               	movf	___lldiv@divisor+2,w
 10474  11FF  0277               	subwf	___lldiv@dividend+2,w
 10475  1200  1D03               	skipz
 10476  1201  2A08               	goto	u2775
 10477  1202  0872               	movf	___lldiv@divisor+1,w
 10478  1203  0276               	subwf	___lldiv@dividend+1,w
 10479  1204  1D03               	skipz
 10480  1205  2A08               	goto	u2775
 10481  1206  0871               	movf	___lldiv@divisor,w
 10482  1207  0275               	subwf	___lldiv@dividend,w
 10483  1208                     u2775:	
 10484  1208  1C03               	skipc
 10485  1209  2A13               	goto	l3908
 10486  120A  0871               	movf	___lldiv@divisor,w
 10487  120B  02F5               	subwf	___lldiv@dividend,f
 10488  120C  0872               	movf	___lldiv@divisor+1,w
 10489  120D  3BF6               	subwfb	___lldiv@dividend+1,f
 10490  120E  0873               	movf	___lldiv@divisor+2,w
 10491  120F  3BF7               	subwfb	___lldiv@dividend+2,f
 10492  1210  0874               	movf	___lldiv@divisor+3,w
 10493  1211  3BF8               	subwfb	___lldiv@dividend+3,f
 10494  1212  1420               	bsf	___lldiv@quotient,0
 10495  1213                     l3908:	
 10496  1213  3001               	movlw	1
 10497  1214                     u2785:	
 10498  1214  36F4               	lsrf	___lldiv@divisor+3,f
 10499  1215  0CF3               	rrf	___lldiv@divisor+2,f
 10500  1216  0CF2               	rrf	___lldiv@divisor+1,f
 10501  1217  0CF1               	rrf	___lldiv@divisor,f
 10502  1218  0B89               	decfsz	9,f
 10503  1219  2A14               	goto	u2785
 10504  121A  3001               	movlw	1
 10505  121B  02A4               	subwf	___lldiv@counter,f
 10506  121C  1D03               	btfss	3,2
 10507  121D  29F3               	goto	l3900
 10508  121E                     l3912:	
 10509  121E  0823               	movf	___lldiv@quotient+3,w
 10510  121F  00F4               	movwf	?___lldiv+3
 10511  1220  0822               	movf	___lldiv@quotient+2,w
 10512  1221  00F3               	movwf	?___lldiv+2
 10513  1222  0821               	movf	___lldiv@quotient+1,w
 10514  1223  00F2               	movwf	?___lldiv+1
 10515  1224  0820               	movf	___lldiv@quotient,w
 10516  1225  00F1               	movwf	?___lldiv
 10517  1226  0008               	return
 10518  1227                     __end_of___lldiv:	
 10519                           
 10520                           	psect	text32
 10521  08B5                     __ptext32:	
 10522 ;; *************** function _calc_expect_vout_adc_value *****************
 10523 ;; Defined at:
 10524 ;;		line 452 in file "src/api/sample.c"
 10525 ;; Parameters:    Size  Location     Type
 10526 ;;  x               2   18[BANK0 ] unsigned int 
 10527 ;; Auto vars:     Size  Location     Type
 10528 ;;  t32             4   34[BANK0 ] long 
 10529 ;;  i               1   38[BANK0 ] unsigned char 
 10530 ;; Return value:  Size  Location     Type
 10531 ;;                  2   18[BANK0 ] unsigned int 
 10532 ;; Registers used:
 10533 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10534 ;; Tracked objects:
 10535 ;;		On entry : 0/0
 10536 ;;		On exit  : 0/0
 10537 ;;		Unchanged: 0/0
 10538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10539 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10540 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10541 ;;      Temps:          0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10542 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10543 ;;Total ram usage:       21 bytes
 10544 ;; Hardware stack levels used:    1
 10545 ;; Hardware stack levels required when called:    2
 10546 ;; This function calls:
 10547 ;;		___aldiv
 10548 ;;		___lmul
 10549 ;; This function is called by:
 10550 ;;		_main
 10551 ;; This function uses a non-reentrant model
 10552 ;;
 10553                           
 10554                           
 10555                           ;psect for function _calc_expect_vout_adc_value
 10556  08B5                     _calc_expect_vout_adc_value:	
 10557                           
 10558                           ;sample.c: 455: uint8_t i;;sample.c: 456: int32_t t32;;sample.c: 459: for (i = 0; i < 30
      +                          -1; i++) {
 10559                           
 10560                           ;incstack = 0
 10561                           ; Regs used in _calc_expect_vout_adc_value: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 10562  08B5  0020               	movlb	0	; select bank0
 10563  08B6  01C6               	clrf	calc_expect_vout_adc_value@i
 10564  08B7  301D               	movlw	29
 10565  08B8  0246               	subwf	calc_expect_vout_adc_value@i,w
 10566  08B9  1803               	btfsc	3,0
 10567  08BA  2918               	goto	l5000
 10568  08BB                     l4990:	
 10569                           
 10570                           ;sample.c: 460: if(sysData.calibRsAdc[i]<sysData.calibRsAdc[i+1]){
 10571  08BB  0846               	movf	calc_expect_vout_adc_value@i,w
 10572  08BC  00B4               	movwf	??_calc_expect_vout_adc_value
 10573  08BD  01B5               	clrf	??_calc_expect_vout_adc_value+1
 10574  08BE  35B4               	lslf	??_calc_expect_vout_adc_value,f
 10575  08BF  0DB5               	rlf	??_calc_expect_vout_adc_value+1,f
 10576  08C0  0834               	movf	??_calc_expect_vout_adc_value,w
 10577  08C1  3E02               	addlw	2
 10578  08C2  00B6               	movwf	??_calc_expect_vout_adc_value+2
 10579  08C3  3000               	movlw	0
 10580  08C4  3D35               	addwfc	??_calc_expect_vout_adc_value+1,w
 10581  08C5  00B7               	movwf	??_calc_expect_vout_adc_value+3
 10582  08C6  3066               	movlw	102
 10583  08C7  00B8               	movwf	??_calc_expect_vout_adc_value+4
 10584  08C8  3023               	movlw	35
 10585  08C9  00B9               	movwf	??_calc_expect_vout_adc_value+5
 10586  08CA  0836               	movf	??_calc_expect_vout_adc_value+2,w
 10587  08CB  0738               	addwf	??_calc_expect_vout_adc_value+4,w
 10588  08CC  0086               	movwf	6
 10589  08CD  0837               	movf	??_calc_expect_vout_adc_value+3,w
 10590  08CE  3D39               	addwfc	??_calc_expect_vout_adc_value+5,w
 10591  08CF  0087               	movwf	7
 10592  08D0  3F40               	moviw [0]fsr1
 10593  08D1  00BA               	movwf	??_calc_expect_vout_adc_value+6
 10594  08D2  3F41               	moviw [1]fsr1
 10595  08D3  00BB               	movwf	??_calc_expect_vout_adc_value+7
 10596  08D4  0846               	movf	calc_expect_vout_adc_value@i,w
 10597  08D5  00BC               	movwf	??_calc_expect_vout_adc_value+8
 10598  08D6  01BD               	clrf	??_calc_expect_vout_adc_value+9
 10599  08D7  35BC               	lslf	??_calc_expect_vout_adc_value+8,f
 10600  08D8  0DBD               	rlf	??_calc_expect_vout_adc_value+9,f
 10601  08D9  3066               	movlw	102
 10602  08DA  00BE               	movwf	??_calc_expect_vout_adc_value+10
 10603  08DB  3023               	movlw	35
 10604  08DC  00BF               	movwf	??_calc_expect_vout_adc_value+11
 10605  08DD  083C               	movf	??_calc_expect_vout_adc_value+8,w
 10606  08DE  073E               	addwf	??_calc_expect_vout_adc_value+10,w
 10607  08DF  0086               	movwf	6
 10608  08E0  083D               	movf	??_calc_expect_vout_adc_value+9,w
 10609  08E1  3D3F               	addwfc	??_calc_expect_vout_adc_value+11,w
 10610  08E2  0087               	movwf	7
 10611  08E3  3F40               	moviw [0]fsr1
 10612  08E4  00C0               	movwf	??_calc_expect_vout_adc_value+12
 10613  08E5  3F41               	moviw [1]fsr1
 10614  08E6  00C1               	movwf	??_calc_expect_vout_adc_value+13
 10615  08E7  083B               	movf	??_calc_expect_vout_adc_value+7,w
 10616  08E8  0241               	subwf	??_calc_expect_vout_adc_value+13,w
 10617  08E9  1D03               	skipz
 10618  08EA  28ED               	goto	u4435
 10619  08EB  083A               	movf	??_calc_expect_vout_adc_value+6,w
 10620  08EC  0240               	subwf	??_calc_expect_vout_adc_value+12,w
 10621  08ED                     u4435:	
 10622  08ED  1803               	skipnc
 10623  08EE  2918               	goto	l5000
 10624                           
 10625                           ;sample.c: 461: if (x <= sysData.calibRsAdc[i+1])break;
 10626  08EF  0846               	movf	calc_expect_vout_adc_value@i,w
 10627  08F0  00B4               	movwf	??_calc_expect_vout_adc_value
 10628  08F1  01B5               	clrf	??_calc_expect_vout_adc_value+1
 10629  08F2  35B4               	lslf	??_calc_expect_vout_adc_value,f
 10630  08F3  0DB5               	rlf	??_calc_expect_vout_adc_value+1,f
 10631  08F4  0834               	movf	??_calc_expect_vout_adc_value,w
 10632  08F5  3E02               	addlw	2
 10633  08F6  00B6               	movwf	??_calc_expect_vout_adc_value+2
 10634  08F7  3000               	movlw	0
 10635  08F8  3D35               	addwfc	??_calc_expect_vout_adc_value+1,w
 10636  08F9  00B7               	movwf	??_calc_expect_vout_adc_value+3
 10637  08FA  3066               	movlw	102
 10638  08FB  00B8               	movwf	??_calc_expect_vout_adc_value+4
 10639  08FC  3023               	movlw	35
 10640  08FD  00B9               	movwf	??_calc_expect_vout_adc_value+5
 10641  08FE  0836               	movf	??_calc_expect_vout_adc_value+2,w
 10642  08FF  0738               	addwf	??_calc_expect_vout_adc_value+4,w
 10643  0900  0086               	movwf	6
 10644  0901  0837               	movf	??_calc_expect_vout_adc_value+3,w
 10645  0902  3D39               	addwfc	??_calc_expect_vout_adc_value+5,w
 10646  0903  0087               	movwf	7
 10647  0904  3F40               	moviw [0]fsr1
 10648  0905  00BA               	movwf	??_calc_expect_vout_adc_value+6
 10649  0906  3F41               	moviw [1]fsr1
 10650  0907  00BB               	movwf	??_calc_expect_vout_adc_value+7
 10651  0908  0833               	movf	calc_expect_vout_adc_value@x+1,w
 10652  0909  023B               	subwf	??_calc_expect_vout_adc_value+7,w
 10653  090A  1D03               	skipz
 10654  090B  290E               	goto	u4445
 10655  090C  0832               	movf	calc_expect_vout_adc_value@x,w
 10656  090D  023A               	subwf	??_calc_expect_vout_adc_value+6,w
 10657  090E                     u4445:	
 10658  090E  1803               	btfsc	3,0
 10659  090F  2918               	goto	l5000
 10660                           
 10661                           ;sample.c: 464: break;
 10662                           
 10663                           ;sample.c: 462: }else{
 10664  0910  3001               	movlw	1
 10665  0911  00B4               	movwf	??_calc_expect_vout_adc_value
 10666  0912  0834               	movf	??_calc_expect_vout_adc_value,w
 10667  0913  07C6               	addwf	calc_expect_vout_adc_value@i,f
 10668  0914  301D               	movlw	29
 10669  0915  0246               	subwf	calc_expect_vout_adc_value@i,w
 10670  0916  1C03               	skipc
 10671  0917  28BB               	goto	l4990
 10672  0918                     l5000:	
 10673                           
 10674                           ;sample.c: 465: };sample.c: 466: };sample.c: 468: if (i > 30-2)i=30-2;
 10675  0918  301D               	movlw	29
 10676  0919  0246               	subwf	calc_expect_vout_adc_value@i,w
 10677  091A  1C03               	skipc
 10678  091B  2920               	goto	l5004
 10679  091C  301C               	movlw	28
 10680  091D  00B4               	movwf	??_calc_expect_vout_adc_value
 10681  091E  0834               	movf	??_calc_expect_vout_adc_value,w
 10682  091F  00C6               	movwf	calc_expect_vout_adc_value@i
 10683  0920                     l5004:	
 10684                           
 10685                           ;sample.c: 469: y1=sysData.calibVoMV[i+1];
 10686  0920  0846               	movf	calc_expect_vout_adc_value@i,w
 10687  0921  00B4               	movwf	??_calc_expect_vout_adc_value
 10688  0922  01B5               	clrf	??_calc_expect_vout_adc_value+1
 10689  0923  35B4               	lslf	??_calc_expect_vout_adc_value,f
 10690  0924  0DB5               	rlf	??_calc_expect_vout_adc_value+1,f
 10691  0925  0834               	movf	??_calc_expect_vout_adc_value,w
 10692  0926  3E02               	addlw	2
 10693  0927  00B6               	movwf	??_calc_expect_vout_adc_value+2
 10694  0928  3000               	movlw	0
 10695  0929  3D35               	addwfc	??_calc_expect_vout_adc_value+1,w
 10696  092A  00B7               	movwf	??_calc_expect_vout_adc_value+3
 10697  092B  30A2               	movlw	162
 10698  092C  00B8               	movwf	??_calc_expect_vout_adc_value+4
 10699  092D  3023               	movlw	35
 10700  092E  00B9               	movwf	??_calc_expect_vout_adc_value+5
 10701  092F  0836               	movf	??_calc_expect_vout_adc_value+2,w
 10702  0930  0738               	addwf	??_calc_expect_vout_adc_value+4,w
 10703  0931  0086               	movwf	6
 10704  0932  0837               	movf	??_calc_expect_vout_adc_value+3,w
 10705  0933  3D39               	addwfc	??_calc_expect_vout_adc_value+5,w
 10706  0934  0087               	movwf	7
 10707  0935  3F40               	moviw [0]fsr1
 10708  0936  00BA               	movwf	??_calc_expect_vout_adc_value+6
 10709  0937  3F41               	moviw [1]fsr1
 10710  0938  00BB               	movwf	??_calc_expect_vout_adc_value+7
 10711  0939  083A               	movf	??_calc_expect_vout_adc_value+6,w
 10712  093A  0021               	movlb	1	; select bank1
 10713  093B  00C0               	movwf	_y1^(0+128)
 10714  093C  0020               	movlb	0	; select bank0
 10715  093D  083B               	movf	??_calc_expect_vout_adc_value+7,w
 10716  093E  0021               	movlb	1	; select bank1
 10717  093F  00C1               	movwf	(_y1^(0+128)+1)
 10718  0940  01C2               	clrf	(_y1^(0+128)+2)
 10719  0941  01C3               	clrf	(_y1^(0+128)+3)
 10720                           
 10721                           ;sample.c: 470: y0=sysData.calibVoMV[i];
 10722  0942  0020               	movlb	0	; select bank0
 10723  0943  0846               	movf	calc_expect_vout_adc_value@i,w
 10724  0944  00B4               	movwf	??_calc_expect_vout_adc_value
 10725  0945  01B5               	clrf	??_calc_expect_vout_adc_value+1
 10726  0946  35B4               	lslf	??_calc_expect_vout_adc_value,f
 10727  0947  0DB5               	rlf	??_calc_expect_vout_adc_value+1,f
 10728  0948  30A2               	movlw	162
 10729  0949  00B6               	movwf	??_calc_expect_vout_adc_value+2
 10730  094A  3023               	movlw	35
 10731  094B  00B7               	movwf	??_calc_expect_vout_adc_value+3
 10732  094C  0834               	movf	??_calc_expect_vout_adc_value,w
 10733  094D  0736               	addwf	??_calc_expect_vout_adc_value+2,w
 10734  094E  0086               	movwf	6
 10735  094F  0835               	movf	??_calc_expect_vout_adc_value+1,w
 10736  0950  3D37               	addwfc	??_calc_expect_vout_adc_value+3,w
 10737  0951  0087               	movwf	7
 10738  0952  3F40               	moviw [0]fsr1
 10739  0953  00B8               	movwf	??_calc_expect_vout_adc_value+4
 10740  0954  3F41               	moviw [1]fsr1
 10741  0955  00B9               	movwf	??_calc_expect_vout_adc_value+5
 10742  0956  0838               	movf	??_calc_expect_vout_adc_value+4,w
 10743  0957  00CF               	movwf	_y0
 10744  0958  0839               	movf	??_calc_expect_vout_adc_value+5,w
 10745  0959  00D0               	movwf	_y0+1
 10746  095A  01D1               	clrf	_y0+2
 10747  095B  01D2               	clrf	_y0+3
 10748                           
 10749                           ;sample.c: 473: x1=sysData.calibRsAdc[i+1];
 10750  095C  0846               	movf	calc_expect_vout_adc_value@i,w
 10751  095D  00B4               	movwf	??_calc_expect_vout_adc_value
 10752  095E  01B5               	clrf	??_calc_expect_vout_adc_value+1
 10753  095F  35B4               	lslf	??_calc_expect_vout_adc_value,f
 10754  0960  0DB5               	rlf	??_calc_expect_vout_adc_value+1,f
 10755  0961  0834               	movf	??_calc_expect_vout_adc_value,w
 10756  0962  3E02               	addlw	2
 10757  0963  00B6               	movwf	??_calc_expect_vout_adc_value+2
 10758  0964  3000               	movlw	0
 10759  0965  3D35               	addwfc	??_calc_expect_vout_adc_value+1,w
 10760  0966  00B7               	movwf	??_calc_expect_vout_adc_value+3
 10761  0967  3066               	movlw	102
 10762  0968  00B8               	movwf	??_calc_expect_vout_adc_value+4
 10763  0969  3023               	movlw	35
 10764  096A  00B9               	movwf	??_calc_expect_vout_adc_value+5
 10765  096B  0836               	movf	??_calc_expect_vout_adc_value+2,w
 10766  096C  0738               	addwf	??_calc_expect_vout_adc_value+4,w
 10767  096D  0086               	movwf	6
 10768  096E  0837               	movf	??_calc_expect_vout_adc_value+3,w
 10769  096F  3D39               	addwfc	??_calc_expect_vout_adc_value+5,w
 10770  0970  0087               	movwf	7
 10771  0971  3F40               	moviw [0]fsr1
 10772  0972  00BA               	movwf	??_calc_expect_vout_adc_value+6
 10773  0973  3F41               	moviw [1]fsr1
 10774  0974  00BB               	movwf	??_calc_expect_vout_adc_value+7
 10775  0975  083A               	movf	??_calc_expect_vout_adc_value+6,w
 10776  0976  0021               	movlb	1	; select bank1
 10777  0977  00BC               	movwf	_x1^(0+128)
 10778  0978  0020               	movlb	0	; select bank0
 10779  0979  083B               	movf	??_calc_expect_vout_adc_value+7,w
 10780  097A  0021               	movlb	1	; select bank1
 10781  097B  00BD               	movwf	(_x1^(0+128)+1)
 10782  097C  01BE               	clrf	(_x1^(0+128)+2)
 10783  097D  01BF               	clrf	(_x1^(0+128)+3)
 10784                           
 10785                           ;sample.c: 474: x0=sysData.calibRsAdc[i];
 10786  097E  0020               	movlb	0	; select bank0
 10787  097F  0846               	movf	calc_expect_vout_adc_value@i,w
 10788  0980  00B4               	movwf	??_calc_expect_vout_adc_value
 10789  0981  01B5               	clrf	??_calc_expect_vout_adc_value+1
 10790  0982  35B4               	lslf	??_calc_expect_vout_adc_value,f
 10791  0983  0DB5               	rlf	??_calc_expect_vout_adc_value+1,f
 10792  0984  3066               	movlw	102
 10793  0985  00B6               	movwf	??_calc_expect_vout_adc_value+2
 10794  0986  3023               	movlw	35
 10795  0987  00B7               	movwf	??_calc_expect_vout_adc_value+3
 10796  0988  0834               	movf	??_calc_expect_vout_adc_value,w
 10797  0989  0736               	addwf	??_calc_expect_vout_adc_value+2,w
 10798  098A  0086               	movwf	6
 10799  098B  0835               	movf	??_calc_expect_vout_adc_value+1,w
 10800  098C  3D37               	addwfc	??_calc_expect_vout_adc_value+3,w
 10801  098D  0087               	movwf	7
 10802  098E  3F40               	moviw [0]fsr1
 10803  098F  00B8               	movwf	??_calc_expect_vout_adc_value+4
 10804  0990  3F41               	moviw [1]fsr1
 10805  0991  00B9               	movwf	??_calc_expect_vout_adc_value+5
 10806  0992  0838               	movf	??_calc_expect_vout_adc_value+4,w
 10807  0993  00CB               	movwf	_x0
 10808  0994  0839               	movf	??_calc_expect_vout_adc_value+5,w
 10809  0995  00CC               	movwf	_x0+1
 10810  0996  01CD               	clrf	_x0+2
 10811  0997  01CE               	clrf	_x0+3
 10812                           
 10813                           ;sample.c: 476: if(x<=x0 && i==0)return (uint16_t)y0;
 10814  0998  0832               	movf	calc_expect_vout_adc_value@x,w
 10815  0999  00B4               	movwf	??_calc_expect_vout_adc_value
 10816  099A  0833               	movf	calc_expect_vout_adc_value@x+1,w
 10817  099B  00B5               	movwf	??_calc_expect_vout_adc_value+1
 10818  099C  01B6               	clrf	??_calc_expect_vout_adc_value+2
 10819  099D  01B7               	clrf	??_calc_expect_vout_adc_value+3
 10820  099E  084E               	movf	_x0+3,w
 10821  099F  3A80               	xorlw	128
 10822  09A0  00B8               	movwf	??_calc_expect_vout_adc_value+4
 10823  09A1  0837               	movf	??_calc_expect_vout_adc_value+3,w
 10824  09A2  3A80               	xorlw	128
 10825  09A3  0238               	subwf	??_calc_expect_vout_adc_value+4,w
 10826  09A4  1D03               	skipz
 10827  09A5  29B0               	goto	u4473
 10828  09A6  0836               	movf	??_calc_expect_vout_adc_value+2,w
 10829  09A7  024D               	subwf	_x0+2,w
 10830  09A8  1D03               	skipz
 10831  09A9  29B0               	goto	u4473
 10832  09AA  0835               	movf	??_calc_expect_vout_adc_value+1,w
 10833  09AB  024C               	subwf	_x0+1,w
 10834  09AC  1D03               	skipz
 10835  09AD  29B0               	goto	u4473
 10836  09AE  0834               	movf	??_calc_expect_vout_adc_value,w
 10837  09AF  024B               	subwf	_x0,w
 10838  09B0                     u4473:	
 10839  09B0  1C03               	skipc
 10840  09B1  29BA               	goto	l5018
 10841  09B2  0846               	movf	calc_expect_vout_adc_value@i,w
 10842  09B3  1D03               	btfss	3,2
 10843  09B4  29BA               	goto	l5018
 10844  09B5  0850               	movf	_y0+1,w
 10845  09B6  00B3               	movwf	?_calc_expect_vout_adc_value+1
 10846  09B7  084F               	movf	_y0,w
 10847  09B8  00B2               	movwf	?_calc_expect_vout_adc_value
 10848  09B9  0008               	return
 10849  09BA                     l5018:	
 10850                           
 10851                           ;sample.c: 477: if(x1<=x0)return (uint16_t)y0;
 10852  09BA  084E               	movf	_x0+3,w
 10853  09BB  3A80               	xorlw	128
 10854  09BC  00B4               	movwf	??_calc_expect_vout_adc_value
 10855  09BD  0021               	movlb	1	; select bank1
 10856  09BE  083F               	movf	(_x1+3)^(0+128),w
 10857  09BF  3A80               	xorlw	128
 10858  09C0  0020               	movlb	0	; select bank0
 10859  09C1  0234               	subwf	??_calc_expect_vout_adc_value,w
 10860  09C2  1D03               	skipz
 10861  09C3  29D4               	goto	u4493
 10862  09C4  0021               	movlb	1	; select bank1
 10863  09C5  083E               	movf	(_x1+2)^(0+128),w
 10864  09C6  0020               	movlb	0	; select bank0
 10865  09C7  024D               	subwf	_x0+2,w
 10866  09C8  1D03               	skipz
 10867  09C9  29D4               	goto	u4493
 10868  09CA  0021               	movlb	1	; select bank1
 10869  09CB  083D               	movf	(_x1+1)^(0+128),w
 10870  09CC  0020               	movlb	0	; select bank0
 10871  09CD  024C               	subwf	_x0+1,w
 10872  09CE  1D03               	skipz
 10873  09CF  29D4               	goto	u4493
 10874  09D0  0021               	movlb	1	; select bank1
 10875  09D1  083C               	movf	_x1^(0+128),w
 10876  09D2  0020               	movlb	0	; select bank0
 10877  09D3  024B               	subwf	_x0,w
 10878  09D4                     u4493:	
 10879  09D4  1C03               	skipc
 10880  09D5  29DB               	goto	l5024
 10881  09D6  0850               	movf	_y0+1,w
 10882  09D7  00B3               	movwf	?_calc_expect_vout_adc_value+1
 10883  09D8  084F               	movf	_y0,w
 10884  09D9  00B2               	movwf	?_calc_expect_vout_adc_value
 10885  09DA  0008               	return
 10886  09DB                     l5024:	
 10887                           
 10888                           ;sample.c: 480: t32=(x-x0);
 10889  09DB  094B               	comf	_x0,w
 10890  09DC  00B4               	movwf	??_calc_expect_vout_adc_value
 10891  09DD  094C               	comf	_x0+1,w
 10892  09DE  00B5               	movwf	??_calc_expect_vout_adc_value+1
 10893  09DF  094D               	comf	_x0+2,w
 10894  09E0  00B6               	movwf	??_calc_expect_vout_adc_value+2
 10895  09E1  094E               	comf	_x0+3,w
 10896  09E2  00B7               	movwf	??_calc_expect_vout_adc_value+3
 10897  09E3  0AB4               	incf	??_calc_expect_vout_adc_value,f
 10898  09E4  1903               	skipnz
 10899  09E5  0AB5               	incf	??_calc_expect_vout_adc_value+1,f
 10900  09E6  1903               	skipnz
 10901  09E7  0AB6               	incf	??_calc_expect_vout_adc_value+2,f
 10902  09E8  1903               	skipnz
 10903  09E9  0AB7               	incf	??_calc_expect_vout_adc_value+3,f
 10904  09EA  0832               	movf	calc_expect_vout_adc_value@x,w
 10905  09EB  00B8               	movwf	??_calc_expect_vout_adc_value+4
 10906  09EC  0833               	movf	calc_expect_vout_adc_value@x+1,w
 10907  09ED  00B9               	movwf	??_calc_expect_vout_adc_value+5
 10908  09EE  01BA               	clrf	??_calc_expect_vout_adc_value+6
 10909  09EF  01BB               	clrf	??_calc_expect_vout_adc_value+7
 10910  09F0  0838               	movf	??_calc_expect_vout_adc_value+4,w
 10911  09F1  07B4               	addwf	??_calc_expect_vout_adc_value,f
 10912  09F2  0839               	movf	??_calc_expect_vout_adc_value+5,w
 10913  09F3  3DB5               	addwfc	??_calc_expect_vout_adc_value+1,f
 10914  09F4  083A               	movf	??_calc_expect_vout_adc_value+6,w
 10915  09F5  3DB6               	addwfc	??_calc_expect_vout_adc_value+2,f
 10916  09F6  083B               	movf	??_calc_expect_vout_adc_value+7,w
 10917  09F7  3DB7               	addwfc	??_calc_expect_vout_adc_value+3,f
 10918  09F8  0837               	movf	??_calc_expect_vout_adc_value+3,w
 10919  09F9  00C5               	movwf	calc_expect_vout_adc_value@t32+3
 10920  09FA  0836               	movf	??_calc_expect_vout_adc_value+2,w
 10921  09FB  00C4               	movwf	calc_expect_vout_adc_value@t32+2
 10922  09FC  0835               	movf	??_calc_expect_vout_adc_value+1,w
 10923  09FD  00C3               	movwf	calc_expect_vout_adc_value@t32+1
 10924  09FE  0834               	movf	??_calc_expect_vout_adc_value,w
 10925  09FF  00C2               	movwf	calc_expect_vout_adc_value@t32
 10926                           
 10927                           ;sample.c: 481: t32=t32*(y1-y0);
 10928  0A00  0021               	movlb	1	; select bank1
 10929  0A01  0840               	movf	_y1^(0+128),w
 10930  0A02  0020               	movlb	0	; select bank0
 10931  0A03  00B4               	movwf	??_calc_expect_vout_adc_value
 10932  0A04  0021               	movlb	1	; select bank1
 10933  0A05  0841               	movf	(_y1+1)^(0+128),w
 10934  0A06  0020               	movlb	0	; select bank0
 10935  0A07  00B5               	movwf	??_calc_expect_vout_adc_value+1
 10936  0A08  0021               	movlb	1	; select bank1
 10937  0A09  0842               	movf	(_y1+2)^(0+128),w
 10938  0A0A  0020               	movlb	0	; select bank0
 10939  0A0B  00B6               	movwf	??_calc_expect_vout_adc_value+2
 10940  0A0C  0021               	movlb	1	; select bank1
 10941  0A0D  0843               	movf	(_y1+3)^(0+128),w
 10942  0A0E  0020               	movlb	0	; select bank0
 10943  0A0F  00B7               	movwf	??_calc_expect_vout_adc_value+3
 10944  0A10  094F               	comf	_y0,w
 10945  0A11  00B8               	movwf	??_calc_expect_vout_adc_value+4
 10946  0A12  0950               	comf	_y0+1,w
 10947  0A13  00B9               	movwf	??_calc_expect_vout_adc_value+5
 10948  0A14  0951               	comf	_y0+2,w
 10949  0A15  00BA               	movwf	??_calc_expect_vout_adc_value+6
 10950  0A16  0952               	comf	_y0+3,w
 10951  0A17  00BB               	movwf	??_calc_expect_vout_adc_value+7
 10952  0A18  0AB8               	incf	??_calc_expect_vout_adc_value+4,f
 10953  0A19  1903               	skipnz
 10954  0A1A  0AB9               	incf	??_calc_expect_vout_adc_value+5,f
 10955  0A1B  1903               	skipnz
 10956  0A1C  0ABA               	incf	??_calc_expect_vout_adc_value+6,f
 10957  0A1D  1903               	skipnz
 10958  0A1E  0ABB               	incf	??_calc_expect_vout_adc_value+7,f
 10959  0A1F  0838               	movf	??_calc_expect_vout_adc_value+4,w
 10960  0A20  07B4               	addwf	??_calc_expect_vout_adc_value,f
 10961  0A21  0839               	movf	??_calc_expect_vout_adc_value+5,w
 10962  0A22  3DB5               	addwfc	??_calc_expect_vout_adc_value+1,f
 10963  0A23  083A               	movf	??_calc_expect_vout_adc_value+6,w
 10964  0A24  3DB6               	addwfc	??_calc_expect_vout_adc_value+2,f
 10965  0A25  083B               	movf	??_calc_expect_vout_adc_value+7,w
 10966  0A26  3DB7               	addwfc	??_calc_expect_vout_adc_value+3,f
 10967  0A27  0837               	movf	??_calc_expect_vout_adc_value+3,w
 10968  0A28  00F4               	movwf	___lmul@multiplier+3
 10969  0A29  0836               	movf	??_calc_expect_vout_adc_value+2,w
 10970  0A2A  00F3               	movwf	___lmul@multiplier+2
 10971  0A2B  0835               	movf	??_calc_expect_vout_adc_value+1,w
 10972  0A2C  00F2               	movwf	___lmul@multiplier+1
 10973  0A2D  0834               	movf	??_calc_expect_vout_adc_value,w
 10974  0A2E  00F1               	movwf	___lmul@multiplier
 10975  0A2F  0845               	movf	calc_expect_vout_adc_value@t32+3,w
 10976  0A30  00F8               	movwf	___lmul@multiplicand+3
 10977  0A31  0844               	movf	calc_expect_vout_adc_value@t32+2,w
 10978  0A32  00F7               	movwf	___lmul@multiplicand+2
 10979  0A33  0843               	movf	calc_expect_vout_adc_value@t32+1,w
 10980  0A34  00F6               	movwf	___lmul@multiplicand+1
 10981  0A35  0842               	movf	calc_expect_vout_adc_value@t32,w
 10982  0A36  00F5               	movwf	___lmul@multiplicand
 10983  0A37  319E  269A  3188   	fcall	___lmul
 10984  0A3A  0874               	movf	?___lmul+3,w
 10985  0A3B  0020               	movlb	0	; select bank0
 10986  0A3C  00C5               	movwf	calc_expect_vout_adc_value@t32+3
 10987  0A3D  0873               	movf	?___lmul+2,w
 10988  0A3E  00C4               	movwf	calc_expect_vout_adc_value@t32+2
 10989  0A3F  0872               	movf	?___lmul+1,w
 10990  0A40  00C3               	movwf	calc_expect_vout_adc_value@t32+1
 10991  0A41  0871               	movf	?___lmul,w
 10992  0A42  00C2               	movwf	calc_expect_vout_adc_value@t32
 10993                           
 10994                           ;sample.c: 482: t32=t32/(x1-x0);
 10995  0A43  0021               	movlb	1	; select bank1
 10996  0A44  083C               	movf	_x1^(0+128),w
 10997  0A45  0020               	movlb	0	; select bank0
 10998  0A46  00B4               	movwf	??_calc_expect_vout_adc_value
 10999  0A47  0021               	movlb	1	; select bank1
 11000  0A48  083D               	movf	(_x1+1)^(0+128),w
 11001  0A49  0020               	movlb	0	; select bank0
 11002  0A4A  00B5               	movwf	??_calc_expect_vout_adc_value+1
 11003  0A4B  0021               	movlb	1	; select bank1
 11004  0A4C  083E               	movf	(_x1+2)^(0+128),w
 11005  0A4D  0020               	movlb	0	; select bank0
 11006  0A4E  00B6               	movwf	??_calc_expect_vout_adc_value+2
 11007  0A4F  0021               	movlb	1	; select bank1
 11008  0A50  083F               	movf	(_x1+3)^(0+128),w
 11009  0A51  0020               	movlb	0	; select bank0
 11010  0A52  00B7               	movwf	??_calc_expect_vout_adc_value+3
 11011  0A53  094B               	comf	_x0,w
 11012  0A54  00B8               	movwf	??_calc_expect_vout_adc_value+4
 11013  0A55  094C               	comf	_x0+1,w
 11014  0A56  00B9               	movwf	??_calc_expect_vout_adc_value+5
 11015  0A57  094D               	comf	_x0+2,w
 11016  0A58  00BA               	movwf	??_calc_expect_vout_adc_value+6
 11017  0A59  094E               	comf	_x0+3,w
 11018  0A5A  00BB               	movwf	??_calc_expect_vout_adc_value+7
 11019  0A5B  0AB8               	incf	??_calc_expect_vout_adc_value+4,f
 11020  0A5C  1903               	skipnz
 11021  0A5D  0AB9               	incf	??_calc_expect_vout_adc_value+5,f
 11022  0A5E  1903               	skipnz
 11023  0A5F  0ABA               	incf	??_calc_expect_vout_adc_value+6,f
 11024  0A60  1903               	skipnz
 11025  0A61  0ABB               	incf	??_calc_expect_vout_adc_value+7,f
 11026  0A62  0838               	movf	??_calc_expect_vout_adc_value+4,w
 11027  0A63  07B4               	addwf	??_calc_expect_vout_adc_value,f
 11028  0A64  0839               	movf	??_calc_expect_vout_adc_value+5,w
 11029  0A65  3DB5               	addwfc	??_calc_expect_vout_adc_value+1,f
 11030  0A66  083A               	movf	??_calc_expect_vout_adc_value+6,w
 11031  0A67  3DB6               	addwfc	??_calc_expect_vout_adc_value+2,f
 11032  0A68  083B               	movf	??_calc_expect_vout_adc_value+7,w
 11033  0A69  3DB7               	addwfc	??_calc_expect_vout_adc_value+3,f
 11034  0A6A  0837               	movf	??_calc_expect_vout_adc_value+3,w
 11035  0A6B  00A7               	movwf	___aldiv@divisor+3
 11036  0A6C  0836               	movf	??_calc_expect_vout_adc_value+2,w
 11037  0A6D  00A6               	movwf	___aldiv@divisor+2
 11038  0A6E  0835               	movf	??_calc_expect_vout_adc_value+1,w
 11039  0A6F  00A5               	movwf	___aldiv@divisor+1
 11040  0A70  0834               	movf	??_calc_expect_vout_adc_value,w
 11041  0A71  00A4               	movwf	___aldiv@divisor
 11042  0A72  0845               	movf	calc_expect_vout_adc_value@t32+3,w
 11043  0A73  00AB               	movwf	___aldiv@dividend+3
 11044  0A74  0844               	movf	calc_expect_vout_adc_value@t32+2,w
 11045  0A75  00AA               	movwf	___aldiv@dividend+2
 11046  0A76  0843               	movf	calc_expect_vout_adc_value@t32+1,w
 11047  0A77  00A9               	movwf	___aldiv@dividend+1
 11048  0A78  0842               	movf	calc_expect_vout_adc_value@t32,w
 11049  0A79  00A8               	movwf	___aldiv@dividend
 11050  0A7A  318F  277C  3188   	fcall	___aldiv
 11051  0A7D  0020               	movlb	0	; select bank0
 11052  0A7E  0827               	movf	?___aldiv+3,w
 11053  0A7F  00C5               	movwf	calc_expect_vout_adc_value@t32+3
 11054  0A80  0826               	movf	?___aldiv+2,w
 11055  0A81  00C4               	movwf	calc_expect_vout_adc_value@t32+2
 11056  0A82  0825               	movf	?___aldiv+1,w
 11057  0A83  00C3               	movwf	calc_expect_vout_adc_value@t32+1
 11058  0A84  0824               	movf	?___aldiv,w
 11059  0A85  00C2               	movwf	calc_expect_vout_adc_value@t32
 11060                           
 11061                           ;sample.c: 483: t32=t32+y0;
 11062  0A86  0842               	movf	calc_expect_vout_adc_value@t32,w
 11063  0A87  074F               	addwf	_y0,w
 11064  0A88  00B4               	movwf	??_calc_expect_vout_adc_value
 11065  0A89  0843               	movf	calc_expect_vout_adc_value@t32+1,w
 11066  0A8A  3D50               	addwfc	_y0+1,w
 11067  0A8B  00B5               	movwf	??_calc_expect_vout_adc_value+1
 11068  0A8C  0844               	movf	calc_expect_vout_adc_value@t32+2,w
 11069  0A8D  3D51               	addwfc	_y0+2,w
 11070  0A8E  00B6               	movwf	??_calc_expect_vout_adc_value+2
 11071  0A8F  0845               	movf	calc_expect_vout_adc_value@t32+3,w
 11072  0A90  3D52               	addwfc	_y0+3,w
 11073  0A91  00B7               	movwf	??_calc_expect_vout_adc_value+3
 11074  0A92  0837               	movf	??_calc_expect_vout_adc_value+3,w
 11075  0A93  00C5               	movwf	calc_expect_vout_adc_value@t32+3
 11076  0A94  0836               	movf	??_calc_expect_vout_adc_value+2,w
 11077  0A95  00C4               	movwf	calc_expect_vout_adc_value@t32+2
 11078  0A96  0835               	movf	??_calc_expect_vout_adc_value+1,w
 11079  0A97  00C3               	movwf	calc_expect_vout_adc_value@t32+1
 11080  0A98  0834               	movf	??_calc_expect_vout_adc_value,w
 11081  0A99  00C2               	movwf	calc_expect_vout_adc_value@t32
 11082                           
 11083                           ;sample.c: 484: if(t32<0)t32=0;
 11084  0A9A  1FC5               	btfss	calc_expect_vout_adc_value@t32+3,7
 11085  0A9B  2AA4               	goto	l666
 11086  0A9C  3000               	movlw	0
 11087  0A9D  00C5               	movwf	calc_expect_vout_adc_value@t32+3
 11088  0A9E  3000               	movlw	0
 11089  0A9F  00C4               	movwf	calc_expect_vout_adc_value@t32+2
 11090  0AA0  3000               	movlw	0
 11091  0AA1  00C3               	movwf	calc_expect_vout_adc_value@t32+1
 11092  0AA2  3000               	movlw	0
 11093  0AA3  00C2               	movwf	calc_expect_vout_adc_value@t32
 11094  0AA4                     l666:	
 11095                           
 11096                           ;sample.c: 485: return (uint16_t)t32;
 11097  0AA4  0843               	movf	calc_expect_vout_adc_value@t32+1,w
 11098  0AA5  00B3               	movwf	?_calc_expect_vout_adc_value+1
 11099  0AA6  0842               	movf	calc_expect_vout_adc_value@t32,w
 11100  0AA7  00B2               	movwf	?_calc_expect_vout_adc_value
 11101  0AA8  0008               	return
 11102  0AA9                     __end_of_calc_expect_vout_adc_value:	
 11103                           
 11104                           	psect	text33
 11105  1E9A                     __ptext33:	
 11106 ;; *************** function ___lmul *****************
 11107 ;; Defined at:
 11108 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul32.c"
 11109 ;; Parameters:    Size  Location     Type
 11110 ;;  multiplier      4    1[COMMON] unsigned long 
 11111 ;;  multiplicand    4    5[COMMON] unsigned long 
 11112 ;; Auto vars:     Size  Location     Type
 11113 ;;  product         4    0[BANK0 ] unsigned long 
 11114 ;; Return value:  Size  Location     Type
 11115 ;;                  4    1[COMMON] unsigned long 
 11116 ;; Registers used:
 11117 ;;		wreg, status,2, status,0
 11118 ;; Tracked objects:
 11119 ;;		On entry : 0/0
 11120 ;;		On exit  : 0/0
 11121 ;;		Unchanged: 0/0
 11122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11123 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11124 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11126 ;;      Totals:         8       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11127 ;;Total ram usage:       12 bytes
 11128 ;; Hardware stack levels used:    1
 11129 ;; Hardware stack levels required when called:    1
 11130 ;; This function calls:
 11131 ;;		Nothing
 11132 ;; This function is called by:
 11133 ;;		_calc_temp_rs
 11134 ;;		_calc_temp_rc
 11135 ;;		_pid_pwm1_idrv_run
 11136 ;;		_calc_expect_vout_adc_value
 11137 ;;		_cal_rs_simulate_power
 11138 ;;		_m_math_pow
 11139 ;; This function uses a non-reentrant model
 11140 ;;
 11141                           
 11142                           
 11143                           ;psect for function ___lmul
 11144  1E9A                     ___lmul:	
 11145                           
 11146                           ;incstack = 0
 11147                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 11148  1E9A  3000               	movlw	0
 11149  1E9B  0020               	movlb	0	; select bank0
 11150  1E9C  00A3               	movwf	___lmul@product+3
 11151  1E9D  3000               	movlw	0
 11152  1E9E  00A2               	movwf	___lmul@product+2
 11153  1E9F  3000               	movlw	0
 11154  1EA0  00A1               	movwf	___lmul@product+1
 11155  1EA1  3000               	movlw	0
 11156  1EA2  00A0               	movwf	___lmul@product
 11157  1EA3                     l4842:	
 11158  1EA3  1C71               	btfss	___lmul@multiplier,0
 11159  1EA4  2EAE               	goto	l4846
 11160  1EA5  0875               	movf	___lmul@multiplicand,w
 11161  1EA6  0020               	movlb	0	; select bank0
 11162  1EA7  07A0               	addwf	___lmul@product,f
 11163  1EA8  0876               	movf	___lmul@multiplicand+1,w
 11164  1EA9  3DA1               	addwfc	___lmul@product+1,f
 11165  1EAA  0877               	movf	___lmul@multiplicand+2,w
 11166  1EAB  3DA2               	addwfc	___lmul@product+2,f
 11167  1EAC  0878               	movf	___lmul@multiplicand+3,w
 11168  1EAD  3DA3               	addwfc	___lmul@product+3,f
 11169  1EAE                     l4846:	
 11170  1EAE  3001               	movlw	1
 11171  1EAF                     u4185:	
 11172  1EAF  35F5               	lslf	___lmul@multiplicand,f
 11173  1EB0  0DF6               	rlf	___lmul@multiplicand+1,f
 11174  1EB1  0DF7               	rlf	___lmul@multiplicand+2,f
 11175  1EB2  0DF8               	rlf	___lmul@multiplicand+3,f
 11176  1EB3  0B89               	decfsz	9,f
 11177  1EB4  2EAF               	goto	u4185
 11178  1EB5  3001               	movlw	1
 11179  1EB6                     u4195:	
 11180  1EB6  36F4               	lsrf	___lmul@multiplier+3,f
 11181  1EB7  0CF3               	rrf	___lmul@multiplier+2,f
 11182  1EB8  0CF2               	rrf	___lmul@multiplier+1,f
 11183  1EB9  0CF1               	rrf	___lmul@multiplier,f
 11184  1EBA  0B89               	decfsz	9,f
 11185  1EBB  2EB6               	goto	u4195
 11186  1EBC  0874               	movf	___lmul@multiplier+3,w
 11187  1EBD  0473               	iorwf	___lmul@multiplier+2,w
 11188  1EBE  0472               	iorwf	___lmul@multiplier+1,w
 11189  1EBF  0471               	iorwf	___lmul@multiplier,w
 11190  1EC0  1D03               	skipz
 11191  1EC1  2EA3               	goto	l4842
 11192  1EC2  0020               	movlb	0	; select bank0
 11193  1EC3  0823               	movf	___lmul@product+3,w
 11194  1EC4  00F4               	movwf	?___lmul+3
 11195  1EC5  0822               	movf	___lmul@product+2,w
 11196  1EC6  00F3               	movwf	?___lmul+2
 11197  1EC7  0821               	movf	___lmul@product+1,w
 11198  1EC8  00F2               	movwf	?___lmul+1
 11199  1EC9  0820               	movf	___lmul@product,w
 11200  1ECA  00F1               	movwf	?___lmul
 11201  1ECB  0008               	return
 11202  1ECC                     __end_of___lmul:	
 11203                           
 11204                           	psect	text34
 11205  0F7C                     __ptext34:	
 11206 ;; *************** function ___aldiv *****************
 11207 ;; Defined at:
 11208 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\aldiv.c"
 11209 ;; Parameters:    Size  Location     Type
 11210 ;;  divisor         4    4[BANK0 ] long 
 11211 ;;  dividend        4    8[BANK0 ] long 
 11212 ;; Auto vars:     Size  Location     Type
 11213 ;;  quotient        4   14[BANK0 ] long 
 11214 ;;  sign            1   13[BANK0 ] unsigned char 
 11215 ;;  counter         1   12[BANK0 ] unsigned char 
 11216 ;; Return value:  Size  Location     Type
 11217 ;;                  4    4[BANK0 ] long 
 11218 ;; Registers used:
 11219 ;;		wreg, status,2, status,0
 11220 ;; Tracked objects:
 11221 ;;		On entry : 0/0
 11222 ;;		On exit  : 0/0
 11223 ;;		Unchanged: 0/0
 11224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11225 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11226 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11227 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11228 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11229 ;;Total ram usage:       15 bytes
 11230 ;; Hardware stack levels used:    1
 11231 ;; Hardware stack levels required when called:    1
 11232 ;; This function calls:
 11233 ;;		Nothing
 11234 ;; This function is called by:
 11235 ;;		_pid_pwm1_idrv_run
 11236 ;;		_calc_expect_vout_adc_value
 11237 ;;		_m_int_2_str
 11238 ;;		_m_int_2_str_ex
 11239 ;; This function uses a non-reentrant model
 11240 ;;
 11241                           
 11242                           
 11243                           ;psect for function ___aldiv
 11244  0F7C                     ___aldiv:	
 11245                           
 11246                           ;incstack = 0
 11247                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 11248  0F7C  0020               	movlb	0	; select bank0
 11249  0F7D  01AD               	clrf	___aldiv@sign
 11250  0F7E  1FA7               	btfss	___aldiv@divisor+3,7
 11251  0F7F  2F8D               	goto	l1134
 11252  0F80  09A4               	comf	___aldiv@divisor,f
 11253  0F81  09A5               	comf	___aldiv@divisor+1,f
 11254  0F82  09A6               	comf	___aldiv@divisor+2,f
 11255  0F83  09A7               	comf	___aldiv@divisor+3,f
 11256  0F84  0AA4               	incf	___aldiv@divisor,f
 11257  0F85  1903               	skipnz
 11258  0F86  0AA5               	incf	___aldiv@divisor+1,f
 11259  0F87  1903               	skipnz
 11260  0F88  0AA6               	incf	___aldiv@divisor+2,f
 11261  0F89  1903               	skipnz
 11262  0F8A  0AA7               	incf	___aldiv@divisor+3,f
 11263  0F8B  01AD               	clrf	___aldiv@sign
 11264  0F8C  0AAD               	incf	___aldiv@sign,f
 11265  0F8D                     l1134:	
 11266  0F8D  1FAB               	btfss	___aldiv@dividend+3,7
 11267  0F8E  2F9E               	goto	l4864
 11268  0F8F  09A8               	comf	___aldiv@dividend,f
 11269  0F90  09A9               	comf	___aldiv@dividend+1,f
 11270  0F91  09AA               	comf	___aldiv@dividend+2,f
 11271  0F92  09AB               	comf	___aldiv@dividend+3,f
 11272  0F93  0AA8               	incf	___aldiv@dividend,f
 11273  0F94  1903               	skipnz
 11274  0F95  0AA9               	incf	___aldiv@dividend+1,f
 11275  0F96  1903               	skipnz
 11276  0F97  0AAA               	incf	___aldiv@dividend+2,f
 11277  0F98  1903               	skipnz
 11278  0F99  0AAB               	incf	___aldiv@dividend+3,f
 11279  0F9A  3001               	movlw	1
 11280  0F9B  00F9               	movwf	??___aldiv
 11281  0F9C  0879               	movf	??___aldiv,w
 11282  0F9D  06AD               	xorwf	___aldiv@sign,f
 11283  0F9E                     l4864:	
 11284  0F9E  3000               	movlw	0
 11285  0F9F  00B1               	movwf	___aldiv@quotient+3
 11286  0FA0  3000               	movlw	0
 11287  0FA1  00B0               	movwf	___aldiv@quotient+2
 11288  0FA2  3000               	movlw	0
 11289  0FA3  00AF               	movwf	___aldiv@quotient+1
 11290  0FA4  3000               	movlw	0
 11291  0FA5  00AE               	movwf	___aldiv@quotient
 11292  0FA6  0827               	movf	___aldiv@divisor+3,w
 11293  0FA7  0426               	iorwf	___aldiv@divisor+2,w
 11294  0FA8  0425               	iorwf	___aldiv@divisor+1,w
 11295  0FA9  0424               	iorwf	___aldiv@divisor,w
 11296  0FAA  1903               	skipnz
 11297  0FAB  2FE7               	goto	l4886
 11298  0FAC  01AC               	clrf	___aldiv@counter
 11299  0FAD  0AAC               	incf	___aldiv@counter,f
 11300  0FAE                     l4872:	
 11301  0FAE  1BA7               	btfsc	___aldiv@divisor+3,7
 11302  0FAF  2FBC               	goto	l4874
 11303  0FB0  3001               	movlw	1
 11304  0FB1                     u4245:	
 11305  0FB1  35A4               	lslf	___aldiv@divisor,f
 11306  0FB2  0DA5               	rlf	___aldiv@divisor+1,f
 11307  0FB3  0DA6               	rlf	___aldiv@divisor+2,f
 11308  0FB4  0DA7               	rlf	___aldiv@divisor+3,f
 11309  0FB5  0B89               	decfsz	9,f
 11310  0FB6  2FB1               	goto	u4245
 11311  0FB7  3001               	movlw	1
 11312  0FB8  00F9               	movwf	??___aldiv
 11313  0FB9  0879               	movf	??___aldiv,w
 11314  0FBA  07AC               	addwf	___aldiv@counter,f
 11315  0FBB  2FAE               	goto	l4872
 11316  0FBC                     l4874:	
 11317  0FBC  3001               	movlw	1
 11318  0FBD                     u4265:	
 11319  0FBD  35AE               	lslf	___aldiv@quotient,f
 11320  0FBE  0DAF               	rlf	___aldiv@quotient+1,f
 11321  0FBF  0DB0               	rlf	___aldiv@quotient+2,f
 11322  0FC0  0DB1               	rlf	___aldiv@quotient+3,f
 11323  0FC1  0B89               	decfsz	9,f
 11324  0FC2  2FBD               	goto	u4265
 11325  0FC3  0827               	movf	___aldiv@divisor+3,w
 11326  0FC4  022B               	subwf	___aldiv@dividend+3,w
 11327  0FC5  1D03               	skipz
 11328  0FC6  2FD1               	goto	u4275
 11329  0FC7  0826               	movf	___aldiv@divisor+2,w
 11330  0FC8  022A               	subwf	___aldiv@dividend+2,w
 11331  0FC9  1D03               	skipz
 11332  0FCA  2FD1               	goto	u4275
 11333  0FCB  0825               	movf	___aldiv@divisor+1,w
 11334  0FCC  0229               	subwf	___aldiv@dividend+1,w
 11335  0FCD  1D03               	skipz
 11336  0FCE  2FD1               	goto	u4275
 11337  0FCF  0824               	movf	___aldiv@divisor,w
 11338  0FD0  0228               	subwf	___aldiv@dividend,w
 11339  0FD1                     u4275:	
 11340  0FD1  1C03               	skipc
 11341  0FD2  2FDC               	goto	l4882
 11342  0FD3  0824               	movf	___aldiv@divisor,w
 11343  0FD4  02A8               	subwf	___aldiv@dividend,f
 11344  0FD5  0825               	movf	___aldiv@divisor+1,w
 11345  0FD6  3BA9               	subwfb	___aldiv@dividend+1,f
 11346  0FD7  0826               	movf	___aldiv@divisor+2,w
 11347  0FD8  3BAA               	subwfb	___aldiv@dividend+2,f
 11348  0FD9  0827               	movf	___aldiv@divisor+3,w
 11349  0FDA  3BAB               	subwfb	___aldiv@dividend+3,f
 11350  0FDB  142E               	bsf	___aldiv@quotient,0
 11351  0FDC                     l4882:	
 11352  0FDC  3001               	movlw	1
 11353  0FDD                     u4285:	
 11354  0FDD  36A7               	lsrf	___aldiv@divisor+3,f
 11355  0FDE  0CA6               	rrf	___aldiv@divisor+2,f
 11356  0FDF  0CA5               	rrf	___aldiv@divisor+1,f
 11357  0FE0  0CA4               	rrf	___aldiv@divisor,f
 11358  0FE1  0B89               	decfsz	9,f
 11359  0FE2  2FDD               	goto	u4285
 11360  0FE3  3001               	movlw	1
 11361  0FE4  02AC               	subwf	___aldiv@counter,f
 11362  0FE5  1D03               	btfss	3,2
 11363  0FE6  2FBC               	goto	l4874
 11364  0FE7                     l4886:	
 11365  0FE7  082D               	movf	___aldiv@sign,w
 11366  0FE8  1903               	btfsc	3,2
 11367  0FE9  2FF5               	goto	l4890
 11368  0FEA  09AE               	comf	___aldiv@quotient,f
 11369  0FEB  09AF               	comf	___aldiv@quotient+1,f
 11370  0FEC  09B0               	comf	___aldiv@quotient+2,f
 11371  0FED  09B1               	comf	___aldiv@quotient+3,f
 11372  0FEE  0AAE               	incf	___aldiv@quotient,f
 11373  0FEF  1903               	skipnz
 11374  0FF0  0AAF               	incf	___aldiv@quotient+1,f
 11375  0FF1  1903               	skipnz
 11376  0FF2  0AB0               	incf	___aldiv@quotient+2,f
 11377  0FF3  1903               	skipnz
 11378  0FF4  0AB1               	incf	___aldiv@quotient+3,f
 11379  0FF5                     l4890:	
 11380  0FF5  0831               	movf	___aldiv@quotient+3,w
 11381  0FF6  00A7               	movwf	?___aldiv+3
 11382  0FF7  0830               	movf	___aldiv@quotient+2,w
 11383  0FF8  00A6               	movwf	?___aldiv+2
 11384  0FF9  082F               	movf	___aldiv@quotient+1,w
 11385  0FFA  00A5               	movwf	?___aldiv+1
 11386  0FFB  082E               	movf	___aldiv@quotient,w
 11387  0FFC  00A4               	movwf	?___aldiv
 11388  0FFD  0008               	return
 11389  0FFE                     __end_of___aldiv:	
 11390                           
 11391                           	psect	text35
 11392  12D1                     __ptext35:	
 11393 ;; *************** function _adc_sample *****************
 11394 ;; Defined at:
 11395 ;;		line 187 in file "src/api/sample.c"
 11396 ;; Parameters:    Size  Location     Type
 11397 ;;  ch              1    wreg     unsigned char 
 11398 ;;  gfvr            1    4[COMMON] unsigned char 
 11399 ;;  num             1    5[COMMON] unsigned char 
 11400 ;; Auto vars:     Size  Location     Type
 11401 ;;  ch              1    0[BANK0 ] unsigned char 
 11402 ;;  t16             2    5[BANK0 ] unsigned int 
 11403 ;;  ret             2    3[BANK0 ] unsigned int 
 11404 ;;  i               2    1[BANK0 ] unsigned int 
 11405 ;; Return value:  Size  Location     Type
 11406 ;;                  2    4[COMMON] unsigned int 
 11407 ;; Registers used:
 11408 ;;		wreg, status,2, status,0, pclath, cstack
 11409 ;; Tracked objects:
 11410 ;;		On entry : 0/0
 11411 ;;		On exit  : 0/0
 11412 ;;		Unchanged: 0/0
 11413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11414 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11415 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11416 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11417 ;;      Totals:         5       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11418 ;;Total ram usage:       12 bytes
 11419 ;; Hardware stack levels used:    1
 11420 ;; Hardware stack levels required when called:    2
 11421 ;; This function calls:
 11422 ;;		_adc_init
 11423 ;;		_fvr_set_gain
 11424 ;; This function is called by:
 11425 ;;		_main
 11426 ;; This function uses a non-reentrant model
 11427 ;;
 11428                           
 11429                           
 11430                           ;psect for function _adc_sample
 11431  12D1                     _adc_sample:	
 11432                           
 11433                           ;incstack = 0
 11434                           ; Regs used in _adc_sample: [wreg+status,2+status,0+pclath+cstack]
 11435                           ;adc_sample@ch stored from wreg
 11436  12D1  0020               	movlb	0	; select bank0
 11437  12D2  00A0               	movwf	adc_sample@ch
 11438                           
 11439                           ;sample.c: 189: uint16_t i;;sample.c: 190: uint16_t ret=0;
 11440  12D3  01A3               	clrf	adc_sample@ret
 11441  12D4  01A4               	clrf	adc_sample@ret+1
 11442                           
 11443                           ;sample.c: 191: uint16_t t16=0;
 11444  12D5  01A5               	clrf	adc_sample@t16
 11445  12D6  01A6               	clrf	adc_sample@t16+1
 11446                           
 11447                           ;sample.c: 193: fvr_set_gain(gfvr);
 11448  12D7  0874               	movf	adc_sample@gfvr,w
 11449  12D8  319D  2547  3192   	fcall	_fvr_set_gain
 11450                           
 11451                           ;sample.c: 194: adc_init((adc_channel_t)ch);
 11452  12DB  0020               	movlb	0	; select bank0
 11453  12DC  0820               	movf	adc_sample@ch,w
 11454  12DD  319D  2533  3192   	fcall	_adc_init
 11455                           
 11456                           ;sample.c: 195: _delay((unsigned long)((50)*(16000000/4000000.0)));
 11457  12E0  3042               	movlw	66
 11458  12E1                     u4787:	
 11459  12E1  0B89               	decfsz	9,f
 11460  12E2  2AE1               	goto	u4787
 11461  12E3  3200               	nop2
 11462                           
 11463                           ;sample.c: 196: ADCON0bits.GO_nDONE = 1;
 11464  12E4  0021               	movlb	1	; select bank1
 11465  12E5  149D               	bsf	29,1	;volatile
 11466  12E6                     l616:	
 11467                           ;sample.c: 197: while (ADCON0bits.GO_nDONE);
 11468                           
 11469  12E6  189D               	btfsc	29,1	;volatile
 11470  12E7  2AE6               	goto	l616
 11471                           
 11472                           ;sample.c: 198: if(num>64)num=64;
 11473  12E8  3041               	movlw	65
 11474  12E9  0275               	subwf	adc_sample@num,w
 11475  12EA  1C03               	skipc
 11476  12EB  2AF0               	goto	l4060
 11477  12EC  3040               	movlw	64
 11478  12ED  00F6               	movwf	??_adc_sample
 11479  12EE  0876               	movf	??_adc_sample,w
 11480  12EF  00F5               	movwf	adc_sample@num
 11481  12F0                     l4060:	
 11482                           
 11483                           ;sample.c: 199: for(i=0;i<num;i++){
 11484  12F0  0020               	movlb	0	; select bank0
 11485  12F1  01A1               	clrf	adc_sample@i
 11486  12F2  01A2               	clrf	adc_sample@i+1
 11487  12F3                     l4070:	
 11488  12F3  0875               	movf	adc_sample@num,w
 11489  12F4  00F6               	movwf	??_adc_sample
 11490  12F5  01F7               	clrf	??_adc_sample+1
 11491  12F6  0877               	movf	??_adc_sample+1,w
 11492  12F7  0222               	subwf	adc_sample@i+1,w
 11493  12F8  1D03               	skipz
 11494  12F9  2AFC               	goto	u3125
 11495  12FA  0876               	movf	??_adc_sample,w
 11496  12FB  0221               	subwf	adc_sample@i,w
 11497  12FC                     u3125:	
 11498  12FC  1803               	btfsc	3,0
 11499  12FD  2B29               	goto	l4072
 11500                           
 11501                           ;sample.c: 200: ADCON0bits.GO_nDONE = 1;
 11502  12FE  0021               	movlb	1	; select bank1
 11503  12FF  149D               	bsf	29,1	;volatile
 11504  1300                     l622:	
 11505                           ;sample.c: 201: while (ADCON0bits.GO_nDONE);
 11506                           
 11507  1300  189D               	btfsc	29,1	;volatile
 11508  1301  2B00               	goto	l622
 11509                           
 11510                           ;sample.c: 202: __nop();
 11511  1302  0000               	nop
 11512                           
 11513                           ;sample.c: 203: t16=ADRESH;
 11514  1303  0021               	movlb	1	; select bank1
 11515  1304  081C               	movf	28,w	;volatile
 11516  1305  00F6               	movwf	??_adc_sample
 11517  1306  01F7               	clrf	??_adc_sample+1
 11518  1307  0876               	movf	??_adc_sample,w
 11519  1308  0020               	movlb	0	; select bank0
 11520  1309  00A5               	movwf	adc_sample@t16
 11521  130A  0877               	movf	??_adc_sample+1,w
 11522  130B  00A6               	movwf	adc_sample@t16+1
 11523                           
 11524                           ;sample.c: 204: t16<<=2;
 11525  130C  3002               	movlw	2
 11526  130D                     u3105:	
 11527  130D  35A5               	lslf	adc_sample@t16,f
 11528  130E  0DA6               	rlf	adc_sample@t16+1,f
 11529  130F  0B89               	decfsz	9,f
 11530  1310  2B0D               	goto	u3105
 11531                           
 11532                           ;sample.c: 205: t16|=(uint16_t)(ADRESL>>6);
 11533  1311  0021               	movlb	1	; select bank1
 11534  1312  081B               	movf	27,w	;volatile
 11535  1313  00F6               	movwf	??_adc_sample
 11536  1314  3006               	movlw	6
 11537  1315                     u3115:	
 11538  1315  36F6               	lsrf	??_adc_sample,f
 11539  1316  0B89               	decfsz	9,f
 11540  1317  2B15               	goto	u3115
 11541  1318  0876               	movf	??_adc_sample,w
 11542  1319  00F7               	movwf	??_adc_sample+1
 11543  131A  01F8               	clrf	??_adc_sample+2
 11544  131B  0877               	movf	??_adc_sample+1,w
 11545  131C  0020               	movlb	0	; select bank0
 11546  131D  04A5               	iorwf	adc_sample@t16,f
 11547  131E  0878               	movf	??_adc_sample+2,w
 11548  131F  04A6               	iorwf	adc_sample@t16+1,f
 11549                           
 11550                           ;sample.c: 207: ret+=t16;
 11551  1320  0825               	movf	adc_sample@t16,w
 11552  1321  07A3               	addwf	adc_sample@ret,f
 11553  1322  0826               	movf	adc_sample@t16+1,w
 11554  1323  3DA4               	addwfc	adc_sample@ret+1,f
 11555  1324  3001               	movlw	1
 11556  1325  07A1               	addwf	adc_sample@i,f
 11557  1326  3000               	movlw	0
 11558  1327  3DA2               	addwfc	adc_sample@i+1,f
 11559  1328  2AF3               	goto	l4070
 11560  1329                     l4072:	
 11561                           
 11562                           ;sample.c: 212: return ret;
 11563  1329  0824               	movf	adc_sample@ret+1,w
 11564  132A  00F5               	movwf	?_adc_sample+1
 11565  132B  0823               	movf	adc_sample@ret,w
 11566  132C  00F4               	movwf	?_adc_sample
 11567  132D  0008               	return
 11568  132E                     __end_of_adc_sample:	
 11569                           
 11570                           	psect	text36
 11571  1D47                     __ptext36:	
 11572 ;; *************** function _fvr_set_gain *****************
 11573 ;; Defined at:
 11574 ;;		line 134 in file "src/api/sample.c"
 11575 ;; Parameters:    Size  Location     Type
 11576 ;;  g               1    wreg     unsigned char 
 11577 ;; Auto vars:     Size  Location     Type
 11578 ;;  g               1    3[COMMON] unsigned char 
 11579 ;;  t8              1    2[COMMON] unsigned char 
 11580 ;; Return value:  Size  Location     Type
 11581 ;;                  1    wreg      void 
 11582 ;; Registers used:
 11583 ;;		wreg, status,2, status,0
 11584 ;; Tracked objects:
 11585 ;;		On entry : 0/0
 11586 ;;		On exit  : 0/0
 11587 ;;		Unchanged: 0/0
 11588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11590 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11591 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11592 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11593 ;;Total ram usage:        3 bytes
 11594 ;; Hardware stack levels used:    1
 11595 ;; Hardware stack levels required when called:    1
 11596 ;; This function calls:
 11597 ;;		Nothing
 11598 ;; This function is called by:
 11599 ;;		_adc_sample
 11600 ;; This function uses a non-reentrant model
 11601 ;;
 11602                           
 11603                           
 11604                           ;psect for function _fvr_set_gain
 11605  1D47                     _fvr_set_gain:	
 11606                           
 11607                           ;incstack = 0
 11608                           ; Regs used in _fvr_set_gain: [wreg+status,2+status,0]
 11609                           ;fvr_set_gain@g stored from wreg
 11610  1D47  00F3               	movwf	fvr_set_gain@g
 11611                           
 11612                           ;sample.c: 136: uint8_t t8=0x80;
 11613  1D48  3080               	movlw	128
 11614  1D49  00F1               	movwf	??_fvr_set_gain
 11615  1D4A  0871               	movf	??_fvr_set_gain,w
 11616  1D4B  00F2               	movwf	fvr_set_gain@t8
 11617                           
 11618                           ;sample.c: 137: if(g>3)g=3;
 11619  1D4C  3004               	movlw	4
 11620  1D4D  0273               	subwf	fvr_set_gain@g,w
 11621  1D4E  1C03               	skipc
 11622  1D4F  2D54               	goto	l3636
 11623  1D50  3003               	movlw	3
 11624  1D51  00F1               	movwf	??_fvr_set_gain
 11625  1D52  0871               	movf	??_fvr_set_gain,w
 11626  1D53  00F3               	movwf	fvr_set_gain@g
 11627  1D54                     l3636:	
 11628                           
 11629                           ;sample.c: 138: t8|=g;
 11630  1D54  0873               	movf	fvr_set_gain@g,w
 11631  1D55  00F1               	movwf	??_fvr_set_gain
 11632  1D56  0871               	movf	??_fvr_set_gain,w
 11633  1D57  04F2               	iorwf	fvr_set_gain@t8,f
 11634                           
 11635                           ;sample.c: 139: FVRCON = t8;
 11636  1D58  0872               	movf	fvr_set_gain@t8,w
 11637  1D59  0022               	movlb	2	; select bank2
 11638  1D5A  0097               	movwf	23	;volatile
 11639  1D5B                     l604:	
 11640                           ;sample.c: 140: while(!(FVRCONbits.FVRRDY));
 11641                           
 11642  1D5B  1B17               	btfsc	23,6	;volatile
 11643  1D5C  0008               	return
 11644  1D5D  2D5B               	goto	l604
 11645  1D5E                     __end_of_fvr_set_gain:	
 11646                           
 11647                           	psect	text37
 11648  1D33                     __ptext37:	
 11649 ;; *************** function _adc_init *****************
 11650 ;; Defined at:
 11651 ;;		line 143 in file "src/api/sample.c"
 11652 ;; Parameters:    Size  Location     Type
 11653 ;;  ch              1    wreg     enum E4099
 11654 ;; Auto vars:     Size  Location     Type
 11655 ;;  ch              1    2[COMMON] enum E4099
 11656 ;; Return value:  Size  Location     Type
 11657 ;;                  1    wreg      void 
 11658 ;; Registers used:
 11659 ;;		wreg, status,2, status,0
 11660 ;; Tracked objects:
 11661 ;;		On entry : 0/0
 11662 ;;		On exit  : 0/0
 11663 ;;		Unchanged: 0/0
 11664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11666 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11667 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11668 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11669 ;;Total ram usage:        2 bytes
 11670 ;; Hardware stack levels used:    1
 11671 ;; Hardware stack levels required when called:    1
 11672 ;; This function calls:
 11673 ;;		Nothing
 11674 ;; This function is called by:
 11675 ;;		_adc_sample
 11676 ;; This function uses a non-reentrant model
 11677 ;;
 11678                           
 11679                           
 11680                           ;psect for function _adc_init
 11681  1D33                     _adc_init:	
 11682                           
 11683                           ;incstack = 0
 11684                           ; Regs used in _adc_init: [wreg+status,2+status,0]
 11685                           ;adc_init@ch stored from wreg
 11686  1D33  00F2               	movwf	adc_init@ch
 11687  1D34                     l610:	
 11688                           ;sample.c: 145: while (ADCON0bits.GO_nDONE);
 11689                           
 11690  1D34  0021               	movlb	1	; select bank1
 11691  1D35  189D               	btfsc	29,1	;volatile
 11692  1D36  2D34               	goto	l610
 11693                           
 11694                           ;sample.c: 146: ADCON0bits.CHS = ch;
 11695  1D37  0872               	movf	adc_init@ch,w
 11696  1D38  00F1               	movwf	??_adc_init
 11697  1D39  0DF1               	rlf	??_adc_init,f
 11698  1D3A  0DF1               	rlf	??_adc_init,f
 11699  1D3B  081D               	movf	29,w	;volatile
 11700  1D3C  0671               	xorwf	??_adc_init,w
 11701  1D3D  3983               	andlw	-125
 11702  1D3E  0671               	xorwf	??_adc_init,w
 11703  1D3F  009D               	movwf	29	;volatile
 11704                           
 11705                           ;sample.c: 147: ADCON0bits.ADON = 1;
 11706  1D40  141D               	bsf	29,0	;volatile
 11707                           
 11708                           ;sample.c: 148: ADCON1 = 0x63;
 11709  1D41  3063               	movlw	99
 11710  1D42  009E               	movwf	30	;volatile
 11711                           
 11712                           ;sample.c: 149: ADCON2 = 0x00;
 11713  1D43  019F               	clrf	31	;volatile
 11714                           
 11715                           ;sample.c: 150: ADRESL = 0x00;
 11716  1D44  019B               	clrf	27	;volatile
 11717                           
 11718                           ;sample.c: 151: ADRESH = 0x00;
 11719  1D45  019C               	clrf	28	;volatile
 11720  1D46  0008               	return
 11721  1D47                     __end_of_adc_init:	
 11722                           
 11723                           	psect	text38
 11724  1DC2                     __ptext38:	
 11725 ;; *************** function _SYSTEM_Initialize *****************
 11726 ;; Defined at:
 11727 ;;		line 70 in file "mcc_generated_files/mcc.c"
 11728 ;; Parameters:    Size  Location     Type
 11729 ;;		None
 11730 ;; Auto vars:     Size  Location     Type
 11731 ;;		None
 11732 ;; Return value:  Size  Location     Type
 11733 ;;                  1    wreg      void 
 11734 ;; Registers used:
 11735 ;;		wreg, status,2, status,0, pclath, cstack
 11736 ;; Tracked objects:
 11737 ;;		On entry : 0/0
 11738 ;;		On exit  : 0/0
 11739 ;;		Unchanged: 0/0
 11740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11744 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11745 ;;Total ram usage:        0 bytes
 11746 ;; Hardware stack levels used:    1
 11747 ;; Hardware stack levels required when called:    3
 11748 ;; This function calls:
 11749 ;;		_ADC1_Initialize
 11750 ;;		_EUSART_Initialize
 11751 ;;		_FVR_Initialize
 11752 ;;		_OSCILLATOR_Initialize
 11753 ;;		_PIN_MANAGER_Initialize
 11754 ;;		_PWM1_Initialize
 11755 ;;		_PWM2_Initialize
 11756 ;;		_TMR2_Initialize
 11757 ;;		_WDT_Initialize
 11758 ;; This function is called by:
 11759 ;;		_main
 11760 ;; This function uses a non-reentrant model
 11761 ;;
 11762                           
 11763                           
 11764                           ;psect for function _SYSTEM_Initialize
 11765  1DC2                     _SYSTEM_Initialize:	
 11766                           
 11767                           ;mcc.c: 73: PIN_MANAGER_Initialize();
 11768                           
 11769                           ;incstack = 0
 11770                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 11771  1DC2  3191  2102  319D   	fcall	_PIN_MANAGER_Initialize
 11772                           
 11773                           ;mcc.c: 74: OSCILLATOR_Initialize();
 11774  1DC5  318F  27FE  319D   	fcall	_OSCILLATOR_Initialize
 11775                           
 11776                           ;mcc.c: 75: WDT_Initialize();
 11777  1DC8  319C  24D2  319D   	fcall	_WDT_Initialize
 11778                           
 11779                           ;mcc.c: 76: FVR_Initialize();
 11780  1DCB  319C  24CE  319D   	fcall	_FVR_Initialize
 11781                           
 11782                           ;mcc.c: 77: PWM1_Initialize();
 11783  1DCE  319D  255E  319D   	fcall	_PWM1_Initialize
 11784                           
 11785                           ;mcc.c: 78: PWM2_Initialize();
 11786  1DD1  319D  2577  319D   	fcall	_PWM2_Initialize
 11787                           
 11788                           ;mcc.c: 79: ADC1_Initialize();
 11789  1DD4  319C  24EC  319D   	fcall	_ADC1_Initialize
 11790                           
 11791                           ;mcc.c: 80: TMR2_Initialize();
 11792  1DD7  319D  2520  319D   	fcall	_TMR2_Initialize
 11793                           
 11794                           ;mcc.c: 81: EUSART_Initialize();
 11795  1DDA  319D  250D         	fcall	_EUSART_Initialize
 11796  1DDC  0008               	return
 11797  1DDD                     __end_of_SYSTEM_Initialize:	
 11798                           
 11799                           	psect	text39
 11800  1CD2                     __ptext39:	
 11801 ;; *************** function _WDT_Initialize *****************
 11802 ;; Defined at:
 11803 ;;		line 94 in file "mcc_generated_files/mcc.c"
 11804 ;; Parameters:    Size  Location     Type
 11805 ;;		None
 11806 ;; Auto vars:     Size  Location     Type
 11807 ;;		None
 11808 ;; Return value:  Size  Location     Type
 11809 ;;                  1    wreg      void 
 11810 ;; Registers used:
 11811 ;;		wreg
 11812 ;; Tracked objects:
 11813 ;;		On entry : 0/0
 11814 ;;		On exit  : 0/0
 11815 ;;		Unchanged: 0/0
 11816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11820 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11821 ;;Total ram usage:        0 bytes
 11822 ;; Hardware stack levels used:    1
 11823 ;; Hardware stack levels required when called:    1
 11824 ;; This function calls:
 11825 ;;		Nothing
 11826 ;; This function is called by:
 11827 ;;		_SYSTEM_Initialize
 11828 ;; This function uses a non-reentrant model
 11829 ;;
 11830                           
 11831                           
 11832                           ;psect for function _WDT_Initialize
 11833  1CD2                     _WDT_Initialize:	
 11834                           
 11835                           ;mcc.c: 97: WDTCON = 0x16;
 11836                           
 11837                           ;incstack = 0
 11838                           ; Regs used in _WDT_Initialize: [wreg]
 11839  1CD2  3016               	movlw	22
 11840  1CD3  0021               	movlb	1	; select bank1
 11841  1CD4  0097               	movwf	23	;volatile
 11842  1CD5  0008               	return
 11843  1CD6                     __end_of_WDT_Initialize:	
 11844                           
 11845                           	psect	text40
 11846  1D20                     __ptext40:	
 11847 ;; *************** function _TMR2_Initialize *****************
 11848 ;; Defined at:
 11849 ;;		line 63 in file "mcc_generated_files/tmr2.c"
 11850 ;; Parameters:    Size  Location     Type
 11851 ;;		None
 11852 ;; Auto vars:     Size  Location     Type
 11853 ;;		None
 11854 ;; Return value:  Size  Location     Type
 11855 ;;                  1    wreg      void 
 11856 ;; Registers used:
 11857 ;;		wreg, status,2, status,0, pclath, cstack
 11858 ;; Tracked objects:
 11859 ;;		On entry : 0/0
 11860 ;;		On exit  : 0/0
 11861 ;;		Unchanged: 0/0
 11862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11866 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11867 ;;Total ram usage:        0 bytes
 11868 ;; Hardware stack levels used:    1
 11869 ;; Hardware stack levels required when called:    2
 11870 ;; This function calls:
 11871 ;;		_TMR2_SetInterruptHandler
 11872 ;;		_TMR2_StartTimer
 11873 ;; This function is called by:
 11874 ;;		_SYSTEM_Initialize
 11875 ;; This function uses a non-reentrant model
 11876 ;;
 11877                           
 11878                           
 11879                           ;psect for function _TMR2_Initialize
 11880  1D20                     _TMR2_Initialize:	
 11881                           
 11882                           ;tmr2.c: 68: T2CON = 0x4B;
 11883                           
 11884                           ;incstack = 0
 11885                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
 11886  1D20  304B               	movlw	75
 11887  1D21  0020               	movlb	0	; select bank0
 11888  1D22  009C               	movwf	28	;volatile
 11889                           
 11890                           ;tmr2.c: 71: PR2 = 0x7C;
 11891  1D23  307C               	movlw	124
 11892  1D24  009B               	movwf	27	;volatile
 11893                           
 11894                           ;tmr2.c: 74: TMR2 = 0x00;
 11895  1D25  019A               	clrf	26	;volatile
 11896                           
 11897                           ;tmr2.c: 77: PIR1bits.TMR2IF = 0;
 11898  1D26  1091               	bcf	17,1	;volatile
 11899                           
 11900                           ;tmr2.c: 80: PIE1bits.TMR2IE = 1;
 11901  1D27  0021               	movlb	1	; select bank1
 11902  1D28  1491               	bsf	17,1	;volatile
 11903                           
 11904                           ;tmr2.c: 83: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
 11905  1D29  3000               	movlw	0
 11906  1D2A  00F1               	movwf	TMR2_SetInterruptHandler@InterruptHandler
 11907  1D2B  3000               	movlw	0
 11908  1D2C  00F2               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
 11909  1D2D  319C  24DE  319D   	fcall	_TMR2_SetInterruptHandler
 11910                           
 11911                           ;tmr2.c: 86: TMR2_StartTimer();
 11912  1D30  319C  24CB         	fcall	_TMR2_StartTimer
 11913  1D32  0008               	return
 11914  1D33                     __end_of_TMR2_Initialize:	
 11915                           
 11916                           	psect	text41
 11917  1CCB                     __ptext41:	
 11918 ;; *************** function _TMR2_StartTimer *****************
 11919 ;; Defined at:
 11920 ;;		line 89 in file "mcc_generated_files/tmr2.c"
 11921 ;; Parameters:    Size  Location     Type
 11922 ;;		None
 11923 ;; Auto vars:     Size  Location     Type
 11924 ;;		None
 11925 ;; Return value:  Size  Location     Type
 11926 ;;                  1    wreg      void 
 11927 ;; Registers used:
 11928 ;;		None
 11929 ;; Tracked objects:
 11930 ;;		On entry : 0/0
 11931 ;;		On exit  : 0/0
 11932 ;;		Unchanged: 0/0
 11933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11937 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11938 ;;Total ram usage:        0 bytes
 11939 ;; Hardware stack levels used:    1
 11940 ;; Hardware stack levels required when called:    1
 11941 ;; This function calls:
 11942 ;;		Nothing
 11943 ;; This function is called by:
 11944 ;;		_TMR2_Initialize
 11945 ;; This function uses a non-reentrant model
 11946 ;;
 11947                           
 11948                           
 11949                           ;psect for function _TMR2_StartTimer
 11950  1CCB                     _TMR2_StartTimer:	
 11951                           
 11952                           ;tmr2.c: 92: T2CONbits.TMR2ON = 1;
 11953                           
 11954                           ;incstack = 0
 11955                           ; Regs used in _TMR2_StartTimer: []
 11956  1CCB  0020               	movlb	0	; select bank0
 11957  1CCC  151C               	bsf	28,2	;volatile
 11958  1CCD  0008               	return
 11959  1CCE                     __end_of_TMR2_StartTimer:	
 11960                           
 11961                           	psect	text42
 11962  1CDE                     __ptext42:	
 11963 ;; *************** function _TMR2_SetInterruptHandler *****************
 11964 ;; Defined at:
 11965 ;;		line 142 in file "mcc_generated_files/tmr2.c"
 11966 ;; Parameters:    Size  Location     Type
 11967 ;;  InterruptHan    2    1[COMMON] PTR FTN()void 
 11968 ;;		 -> TMR2_DefaultInterruptHandler(1), 
 11969 ;; Auto vars:     Size  Location     Type
 11970 ;;		None
 11971 ;; Return value:  Size  Location     Type
 11972 ;;                  1    wreg      void 
 11973 ;; Registers used:
 11974 ;;		wreg
 11975 ;; Tracked objects:
 11976 ;;		On entry : 0/0
 11977 ;;		On exit  : 0/0
 11978 ;;		Unchanged: 0/0
 11979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11980 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11983 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11984 ;;Total ram usage:        2 bytes
 11985 ;; Hardware stack levels used:    1
 11986 ;; Hardware stack levels required when called:    1
 11987 ;; This function calls:
 11988 ;;		Nothing
 11989 ;; This function is called by:
 11990 ;;		_TMR2_Initialize
 11991 ;; This function uses a non-reentrant model
 11992 ;;
 11993                           
 11994                           
 11995                           ;psect for function _TMR2_SetInterruptHandler
 11996  1CDE                     _TMR2_SetInterruptHandler:	
 11997                           
 11998                           ;tmr2.c: 143: TMR2_InterruptHandler = InterruptHandler;
 11999                           
 12000                           ;incstack = 0
 12001                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
 12002  1CDE  0872               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
 12003  1CDF  0020               	movlb	0	; select bank0
 12004  1CE0  00E4               	movwf	_TMR2_InterruptHandler+1
 12005  1CE1  0871               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
 12006  1CE2  00E3               	movwf	_TMR2_InterruptHandler
 12007  1CE3  0008               	return
 12008  1CE4                     __end_of_TMR2_SetInterruptHandler:	
 12009                           
 12010                           	psect	text43
 12011  1D77                     __ptext43:	
 12012 ;; *************** function _PWM2_Initialize *****************
 12013 ;; Defined at:
 12014 ;;		line 58 in file "mcc_generated_files/pwm2.c"
 12015 ;; Parameters:    Size  Location     Type
 12016 ;;		None
 12017 ;; Auto vars:     Size  Location     Type
 12018 ;;		None
 12019 ;; Return value:  Size  Location     Type
 12020 ;;                  1    wreg      void 
 12021 ;; Registers used:
 12022 ;;		wreg, status,2
 12023 ;; Tracked objects:
 12024 ;;		On entry : 0/0
 12025 ;;		On exit  : 0/0
 12026 ;;		Unchanged: 0/0
 12027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12031 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12032 ;;Total ram usage:        0 bytes
 12033 ;; Hardware stack levels used:    1
 12034 ;; Hardware stack levels required when called:    1
 12035 ;; This function calls:
 12036 ;;		Nothing
 12037 ;; This function is called by:
 12038 ;;		_SYSTEM_Initialize
 12039 ;; This function uses a non-reentrant model
 12040 ;;
 12041                           
 12042                           
 12043                           ;psect for function _PWM2_Initialize
 12044  1D77                     _PWM2_Initialize:	
 12045                           
 12046                           ;pwm2.c: 63: PWM2INTE = 0x01;
 12047                           
 12048                           ;incstack = 0
 12049                           ; Regs used in _PWM2_Initialize: [wreg+status,2]
 12050  1D77  3001               	movlw	1
 12051  1D78  003B               	movlb	27	; select bank27
 12052  1D79  00AC               	movwf	44	;volatile
 12053                           
 12054                           ;pwm2.c: 66: PWM2INTF = 0x00;
 12055  1D7A  01AD               	clrf	45	;volatile
 12056                           
 12057                           ;pwm2.c: 69: PWM2CLKCON = 0x00;
 12058  1D7B  01AE               	clrf	46	;volatile
 12059                           
 12060                           ;pwm2.c: 72: PWM2LDCON = 0x00;
 12061  1D7C  01AF               	clrf	47	;volatile
 12062                           
 12063                           ;pwm2.c: 75: PWM2OFCON = 0x00;
 12064  1D7D  01B0               	clrf	48	;volatile
 12065                           
 12066                           ;pwm2.c: 78: PWM2PHH = 0x00;
 12067  1D7E  01A2               	clrf	34	;volatile
 12068                           
 12069                           ;pwm2.c: 81: PWM2PHL = 0x02;
 12070  1D7F  3002               	movlw	2
 12071  1D80  00A1               	movwf	33	;volatile
 12072                           
 12073                           ;pwm2.c: 84: PWM2DCH = 0x00;
 12074  1D81  01A4               	clrf	36	;volatile
 12075                           
 12076                           ;pwm2.c: 87: PWM2DCL = 0xA0;
 12077  1D82  30A0               	movlw	160
 12078  1D83  00A3               	movwf	35	;volatile
 12079                           
 12080                           ;pwm2.c: 90: PWM2PRH = 0x06;
 12081  1D84  3006               	movlw	6
 12082  1D85  00A6               	movwf	38	;volatile
 12083                           
 12084                           ;pwm2.c: 93: PWM2PRL = 0x3F;
 12085  1D86  303F               	movlw	63
 12086  1D87  00A5               	movwf	37	;volatile
 12087                           
 12088                           ;pwm2.c: 96: PWM2OFH = 0x00;
 12089  1D88  01A8               	clrf	40	;volatile
 12090                           
 12091                           ;pwm2.c: 99: PWM2OFL = 0x01;
 12092  1D89  3001               	movlw	1
 12093  1D8A  00A7               	movwf	39	;volatile
 12094                           
 12095                           ;pwm2.c: 102: PWM2TMRH = 0x00;
 12096  1D8B  01AA               	clrf	42	;volatile
 12097                           
 12098                           ;pwm2.c: 105: PWM2TMRL = 0x00;
 12099  1D8C  01A9               	clrf	41	;volatile
 12100                           
 12101                           ;pwm2.c: 108: PWM2CON = 0x90;
 12102  1D8D  3090               	movlw	144
 12103  1D8E  00AB               	movwf	43	;volatile
 12104  1D8F  0008               	return
 12105  1D90                     __end_of_PWM2_Initialize:	
 12106                           
 12107                           	psect	text44
 12108  1D5E                     __ptext44:	
 12109 ;; *************** function _PWM1_Initialize *****************
 12110 ;; Defined at:
 12111 ;;		line 58 in file "mcc_generated_files/pwm1.c"
 12112 ;; Parameters:    Size  Location     Type
 12113 ;;		None
 12114 ;; Auto vars:     Size  Location     Type
 12115 ;;		None
 12116 ;; Return value:  Size  Location     Type
 12117 ;;                  1    wreg      void 
 12118 ;; Registers used:
 12119 ;;		wreg, status,2
 12120 ;; Tracked objects:
 12121 ;;		On entry : 0/0
 12122 ;;		On exit  : 0/0
 12123 ;;		Unchanged: 0/0
 12124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12128 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12129 ;;Total ram usage:        0 bytes
 12130 ;; Hardware stack levels used:    1
 12131 ;; Hardware stack levels required when called:    1
 12132 ;; This function calls:
 12133 ;;		Nothing
 12134 ;; This function is called by:
 12135 ;;		_SYSTEM_Initialize
 12136 ;; This function uses a non-reentrant model
 12137 ;;
 12138                           
 12139                           
 12140                           ;psect for function _PWM1_Initialize
 12141  1D5E                     _PWM1_Initialize:	
 12142                           
 12143                           ;pwm1.c: 63: PWM1INTE = 0x01;
 12144                           
 12145                           ;incstack = 0
 12146                           ; Regs used in _PWM1_Initialize: [wreg+status,2]
 12147  1D5E  3001               	movlw	1
 12148  1D5F  003B               	movlb	27	; select bank27
 12149  1D60  009C               	movwf	28	;volatile
 12150                           
 12151                           ;pwm1.c: 66: PWM1INTF = 0x00;
 12152  1D61  019D               	clrf	29	;volatile
 12153                           
 12154                           ;pwm1.c: 69: PWM1CLKCON = 0x00;
 12155  1D62  019E               	clrf	30	;volatile
 12156                           
 12157                           ;pwm1.c: 72: PWM1LDCON = 0x00;
 12158  1D63  019F               	clrf	31	;volatile
 12159                           
 12160                           ;pwm1.c: 75: PWM1OFCON = 0x00;
 12161  1D64  01A0               	clrf	32	;volatile
 12162                           
 12163                           ;pwm1.c: 78: PWM1PHH = 0x00;
 12164  1D65  0192               	clrf	18	;volatile
 12165                           
 12166                           ;pwm1.c: 81: PWM1PHL = 0x02;
 12167  1D66  3002               	movlw	2
 12168  1D67  0091               	movwf	17	;volatile
 12169                           
 12170                           ;pwm1.c: 84: PWM1DCH = 0x00;
 12171  1D68  0194               	clrf	20	;volatile
 12172                           
 12173                           ;pwm1.c: 87: PWM1DCL = 0xa0;
 12174  1D69  30A0               	movlw	160
 12175  1D6A  0093               	movwf	19	;volatile
 12176                           
 12177                           ;pwm1.c: 90: PWM1PRH = 0x06;
 12178  1D6B  3006               	movlw	6
 12179  1D6C  0096               	movwf	22	;volatile
 12180                           
 12181                           ;pwm1.c: 93: PWM1PRL = 0x3F;
 12182  1D6D  303F               	movlw	63
 12183  1D6E  0095               	movwf	21	;volatile
 12184                           
 12185                           ;pwm1.c: 96: PWM1OFH = 0x00;
 12186  1D6F  0198               	clrf	24	;volatile
 12187                           
 12188                           ;pwm1.c: 99: PWM1OFL = 0x01;
 12189  1D70  3001               	movlw	1
 12190  1D71  0097               	movwf	23	;volatile
 12191                           
 12192                           ;pwm1.c: 102: PWM1TMRH = 0x00;
 12193  1D72  019A               	clrf	26	;volatile
 12194                           
 12195                           ;pwm1.c: 105: PWM1TMRL = 0x00;
 12196  1D73  0199               	clrf	25	;volatile
 12197                           
 12198                           ;pwm1.c: 108: PWM1CON = 0x90;
 12199  1D74  3090               	movlw	144
 12200  1D75  009B               	movwf	27	;volatile
 12201  1D76  0008               	return
 12202  1D77                     __end_of_PWM1_Initialize:	
 12203                           
 12204                           	psect	text45
 12205  1102                     __ptext45:	
 12206 ;; *************** function _PIN_MANAGER_Initialize *****************
 12207 ;; Defined at:
 12208 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
 12209 ;; Parameters:    Size  Location     Type
 12210 ;;		None
 12211 ;; Auto vars:     Size  Location     Type
 12212 ;;  state           1    1[COMMON] unsigned char 
 12213 ;; Return value:  Size  Location     Type
 12214 ;;                  1    wreg      void 
 12215 ;; Registers used:
 12216 ;;		wreg, status,2, status,0
 12217 ;; Tracked objects:
 12218 ;;		On entry : 0/0
 12219 ;;		On exit  : 0/0
 12220 ;;		Unchanged: 0/0
 12221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12223 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12225 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12226 ;;Total ram usage:        1 bytes
 12227 ;; Hardware stack levels used:    1
 12228 ;; Hardware stack levels required when called:    1
 12229 ;; This function calls:
 12230 ;;		Nothing
 12231 ;; This function is called by:
 12232 ;;		_SYSTEM_Initialize
 12233 ;; This function uses a non-reentrant model
 12234 ;;
 12235                           
 12236                           
 12237                           ;psect for function _PIN_MANAGER_Initialize
 12238  1102                     _PIN_MANAGER_Initialize:	
 12239                           
 12240                           ;pin_manager.c: 57: LATA = 0x00;
 12241                           
 12242                           ;incstack = 0
 12243                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
 12244  1102  0022               	movlb	2	; select bank2
 12245  1103  018C               	clrf	12	;volatile
 12246                           
 12247                           ;pin_manager.c: 58: LATC = 0x00;
 12248  1104  018E               	clrf	14	;volatile
 12249                           
 12250                           ;pin_manager.c: 63: TRISA = 0x0F;
 12251  1105  300F               	movlw	15
 12252  1106  0021               	movlb	1	; select bank1
 12253  1107  008C               	movwf	12	;volatile
 12254                           
 12255                           ;pin_manager.c: 64: TRISC = 0x1f;
 12256  1108  301F               	movlw	31
 12257  1109  008E               	movwf	14	;volatile
 12258                           
 12259                           ;pin_manager.c: 69: ANSELC = 0x0F;
 12260  110A  300F               	movlw	15
 12261  110B  0023               	movlb	3	; select bank3
 12262  110C  008E               	movwf	14	;volatile
 12263                           
 12264                           ;pin_manager.c: 70: ANSELA = 0x17;
 12265  110D  3017               	movlw	23
 12266  110E  008C               	movwf	12	;volatile
 12267                           
 12268                           ;pin_manager.c: 75: WPUA = 0x3B;
 12269  110F  303B               	movlw	59
 12270  1110  0024               	movlb	4	; select bank4
 12271  1111  008C               	movwf	12	;volatile
 12272                           
 12273                           ;pin_manager.c: 76: WPUC = 0x30;
 12274  1112  3030               	movlw	48
 12275  1113  008E               	movwf	14	;volatile
 12276                           
 12277                           ;pin_manager.c: 77: OPTION_REGbits.nWPUEN = 0;
 12278  1114  0021               	movlb	1	; select bank1
 12279  1115  1395               	bcf	21,7	;volatile
 12280                           
 12281                           ;pin_manager.c: 82: ODCONA = 0x00;
 12282  1116  0025               	movlb	5	; select bank5
 12283  1117  018C               	clrf	12	;volatile
 12284                           
 12285                           ;pin_manager.c: 83: ODCONC = 0x00;
 12286  1118  018E               	clrf	14	;volatile
 12287                           
 12288                           ;pin_manager.c: 85: bool state = (unsigned char)GIE;
 12289  1119  3000               	movlw	0
 12290  111A  1B8B               	btfsc	11,7	;volatile
 12291  111B  3001               	movlw	1
 12292  111C  00F1               	movwf	PIN_MANAGER_Initialize@state
 12293                           
 12294                           ;pin_manager.c: 86: GIE = 0;
 12295  111D  138B               	bcf	11,7	;volatile
 12296                           
 12297                           ;pin_manager.c: 87: PPSLOCK = 0x55;
 12298  111E  3055               	movlw	85
 12299  111F  003C               	movlb	28	; select bank28
 12300  1120  008F               	movwf	15	;volsfr
 12301                           
 12302                           ;pin_manager.c: 88: PPSLOCK = 0xAA;
 12303  1121  30AA               	movlw	170
 12304  1122  008F               	movwf	15	;volsfr
 12305                           
 12306                           ;pin_manager.c: 89: PPSLOCKbits.PPSLOCKED = 0x00;
 12307  1123  100F               	bcf	15,0	;volsfr
 12308                           
 12309                           ;pin_manager.c: 91: RXPPSbits.RXPPS = 0x14;
 12310  1124  0815               	movf	21,w	;volatile
 12311  1125  39E0               	andlw	-32
 12312  1126  3814               	iorlw	20
 12313  1127  0095               	movwf	21	;volatile
 12314                           
 12315                           ;pin_manager.c: 92: RA4PPSbits.RA4PPS = 0x04;
 12316  1128  003D               	movlb	29	; select bank29
 12317  1129  0814               	movf	20,w	;volatile
 12318  112A  39F0               	andlw	-16
 12319  112B  3804               	iorlw	4
 12320  112C  0094               	movwf	20	;volatile
 12321                           
 12322                           ;pin_manager.c: 93: RA5PPSbits.RA5PPS = 0x03;
 12323  112D  0815               	movf	21,w	;volatile
 12324  112E  39F0               	andlw	-16
 12325  112F  3803               	iorlw	3
 12326  1130  0095               	movwf	21	;volatile
 12327                           
 12328                           ;pin_manager.c: 94: RC5PPSbits.RC5PPS = 0x09;
 12329  1131  0825               	movf	37,w	;volatile
 12330  1132  39F0               	andlw	-16
 12331  1133  3809               	iorlw	9
 12332  1134  00A5               	movwf	37	;volatile
 12333                           
 12334                           ;pin_manager.c: 96: PPSLOCK = 0x55;
 12335  1135  3055               	movlw	85
 12336  1136  003C               	movlb	28	; select bank28
 12337  1137  008F               	movwf	15	;volsfr
 12338                           
 12339                           ;pin_manager.c: 97: PPSLOCK = 0xAA;
 12340  1138  30AA               	movlw	170
 12341  1139  008F               	movwf	15	;volsfr
 12342                           
 12343                           ;pin_manager.c: 98: PPSLOCKbits.PPSLOCKED = 0x01;
 12344  113A  140F               	bsf	15,0	;volsfr
 12345                           
 12346                           ;pin_manager.c: 100: GIE = state;
 12347  113B  1C71               	btfss	PIN_MANAGER_Initialize@state,0
 12348  113C  293F               	goto	u2290
 12349  113D  178B               	bsf	11,7	;volatile
 12350  113E  0008               	return
 12351  113F                     u2290:	
 12352  113F  138B               	bcf	11,7	;volatile
 12353  1140  0008               	return
 12354  1141                     __end_of_PIN_MANAGER_Initialize:	
 12355                           
 12356                           	psect	text46
 12357  0FFE                     __ptext46:	
 12358 ;; *************** function _OSCILLATOR_Initialize *****************
 12359 ;; Defined at:
 12360 ;;		line 84 in file "mcc_generated_files/mcc.c"
 12361 ;; Parameters:    Size  Location     Type
 12362 ;;		None
 12363 ;; Auto vars:     Size  Location     Type
 12364 ;;		None
 12365 ;; Return value:  Size  Location     Type
 12366 ;;                  1    wreg      void 
 12367 ;; Registers used:
 12368 ;;		None
 12369 ;; Tracked objects:
 12370 ;;		On entry : 0/0
 12371 ;;		On exit  : 0/0
 12372 ;;		Unchanged: 0/0
 12373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12377 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12378 ;;Total ram usage:        0 bytes
 12379 ;; Hardware stack levels used:    1
 12380 ;; Hardware stack levels required when called:    1
 12381 ;; This function calls:
 12382 ;;		Nothing
 12383 ;; This function is called by:
 12384 ;;		_SYSTEM_Initialize
 12385 ;; This function uses a non-reentrant model
 12386 ;;
 12387                           
 12388                           
 12389                           ;psect for function _OSCILLATOR_Initialize
 12390  0FFE                     _OSCILLATOR_Initialize:	
 12391                           
 12392                           ;incstack = 0
 12393                           ; Regs used in _OSCILLATOR_Initialize: []
 12394  0FFE  0008               	return
 12395  0FFF                     __end_of_OSCILLATOR_Initialize:	
 12396                           
 12397                           	psect	text47
 12398  1CCE                     __ptext47:	
 12399 ;; *************** function _FVR_Initialize *****************
 12400 ;; Defined at:
 12401 ;;		line 57 in file "mcc_generated_files/fvr.c"
 12402 ;; Parameters:    Size  Location     Type
 12403 ;;		None
 12404 ;; Auto vars:     Size  Location     Type
 12405 ;;		None
 12406 ;; Return value:  Size  Location     Type
 12407 ;;                  1    wreg      void 
 12408 ;; Registers used:
 12409 ;;		wreg
 12410 ;; Tracked objects:
 12411 ;;		On entry : 0/0
 12412 ;;		On exit  : 0/0
 12413 ;;		Unchanged: 0/0
 12414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12418 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12419 ;;Total ram usage:        0 bytes
 12420 ;; Hardware stack levels used:    1
 12421 ;; Hardware stack levels required when called:    1
 12422 ;; This function calls:
 12423 ;;		Nothing
 12424 ;; This function is called by:
 12425 ;;		_SYSTEM_Initialize
 12426 ;; This function uses a non-reentrant model
 12427 ;;
 12428                           
 12429                           
 12430                           ;psect for function _FVR_Initialize
 12431  1CCE                     _FVR_Initialize:	
 12432                           
 12433                           ;fvr.c: 60: FVRCON = 0x81;
 12434                           
 12435                           ;incstack = 0
 12436                           ; Regs used in _FVR_Initialize: [wreg]
 12437  1CCE  3081               	movlw	129
 12438  1CCF  0022               	movlb	2	; select bank2
 12439  1CD0  0097               	movwf	23	;volatile
 12440  1CD1  0008               	return
 12441  1CD2                     __end_of_FVR_Initialize:	
 12442                           
 12443                           	psect	text48
 12444  1D0D                     __ptext48:	
 12445 ;; *************** function _EUSART_Initialize *****************
 12446 ;; Defined at:
 12447 ;;		line 55 in file "mcc_generated_files/eusart.c"
 12448 ;; Parameters:    Size  Location     Type
 12449 ;;		None
 12450 ;; Auto vars:     Size  Location     Type
 12451 ;;		None
 12452 ;; Return value:  Size  Location     Type
 12453 ;;                  1    wreg      void 
 12454 ;; Registers used:
 12455 ;;		wreg
 12456 ;; Tracked objects:
 12457 ;;		On entry : 0/0
 12458 ;;		On exit  : 0/0
 12459 ;;		Unchanged: 0/0
 12460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12464 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12465 ;;Total ram usage:        0 bytes
 12466 ;; Hardware stack levels used:    1
 12467 ;; Hardware stack levels required when called:    1
 12468 ;; This function calls:
 12469 ;;		Nothing
 12470 ;; This function is called by:
 12471 ;;		_SYSTEM_Initialize
 12472 ;; This function uses a non-reentrant model
 12473 ;;
 12474                           
 12475                           
 12476                           ;psect for function _EUSART_Initialize
 12477  1D0D                     _EUSART_Initialize:	
 12478                           
 12479                           ;eusart.c: 58: PIE1bits.RCIE = 0;
 12480                           
 12481                           ;incstack = 0
 12482                           ; Regs used in _EUSART_Initialize: [wreg]
 12483  1D0D  0021               	movlb	1	; select bank1
 12484  1D0E  1291               	bcf	17,5	;volatile
 12485                           
 12486                           ;eusart.c: 59: PIE1bits.TXIE = 0;
 12487  1D0F  1211               	bcf	17,4	;volatile
 12488                           
 12489                           ;eusart.c: 61: BAUDCON = 0x08;
 12490  1D10  3008               	movlw	8
 12491  1D11  0023               	movlb	3	; select bank3
 12492  1D12  009F               	movwf	31	;volatile
 12493                           
 12494                           ;eusart.c: 64: RCSTA = 0x90;
 12495  1D13  3090               	movlw	144
 12496  1D14  009D               	movwf	29	;volatile
 12497                           
 12498                           ;eusart.c: 67: TXSTA = 0x24;
 12499  1D15  3024               	movlw	36
 12500  1D16  009E               	movwf	30	;volatile
 12501                           
 12502                           ;eusart.c: 71: SPBRGL = 0xA0;
 12503  1D17  30A0               	movlw	160
 12504  1D18  009B               	movwf	27	;volatile
 12505                           
 12506                           ;eusart.c: 76: SPBRGH = 0x01;
 12507  1D19  3001               	movlw	1
 12508  1D1A  009C               	movwf	28	;volatile
 12509                           
 12510                           ;eusart.c: 77: PIE1bits.RCIE = 1;
 12511  1D1B  0021               	movlb	1	; select bank1
 12512  1D1C  1691               	bsf	17,5	;volatile
 12513                           
 12514                           ;eusart.c: 78: PIR1bits.TXIF=0;
 12515  1D1D  0020               	movlb	0	; select bank0
 12516  1D1E  1211               	bcf	17,4	;volatile
 12517  1D1F  0008               	return
 12518  1D20                     __end_of_EUSART_Initialize:	
 12519                           
 12520                           	psect	text49
 12521  1CEC                     __ptext49:	
 12522 ;; *************** function _ADC1_Initialize *****************
 12523 ;; Defined at:
 12524 ;;		line 64 in file "mcc_generated_files/adc1.c"
 12525 ;; Parameters:    Size  Location     Type
 12526 ;;		None
 12527 ;; Auto vars:     Size  Location     Type
 12528 ;;		None
 12529 ;; Return value:  Size  Location     Type
 12530 ;;                  1    wreg      void 
 12531 ;; Registers used:
 12532 ;;		wreg, status,2
 12533 ;; Tracked objects:
 12534 ;;		On entry : 0/0
 12535 ;;		On exit  : 0/0
 12536 ;;		Unchanged: 0/0
 12537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12541 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12542 ;;Total ram usage:        0 bytes
 12543 ;; Hardware stack levels used:    1
 12544 ;; Hardware stack levels required when called:    1
 12545 ;; This function calls:
 12546 ;;		Nothing
 12547 ;; This function is called by:
 12548 ;;		_SYSTEM_Initialize
 12549 ;; This function uses a non-reentrant model
 12550 ;;
 12551                           
 12552                           
 12553                           ;psect for function _ADC1_Initialize
 12554  1CEC                     _ADC1_Initialize:	
 12555                           
 12556                           ;adc1.c: 69: ADCON0 = 0x01;
 12557                           
 12558                           ;incstack = 0
 12559                           ; Regs used in _ADC1_Initialize: [wreg+status,2]
 12560  1CEC  3001               	movlw	1
 12561  1CED  0021               	movlb	1	; select bank1
 12562  1CEE  009D               	movwf	29	;volatile
 12563                           
 12564                           ;adc1.c: 72: ADCON1 = 0x63;
 12565  1CEF  3063               	movlw	99
 12566  1CF0  009E               	movwf	30	;volatile
 12567                           
 12568                           ;adc1.c: 75: ADCON2 = 0x00;
 12569  1CF1  019F               	clrf	31	;volatile
 12570                           
 12571                           ;adc1.c: 78: ADRESL = 0x00;
 12572  1CF2  019B               	clrf	27	;volatile
 12573                           
 12574                           ;adc1.c: 81: ADRESH = 0x00;
 12575  1CF3  019C               	clrf	28	;volatile
 12576  1CF4  0008               	return
 12577  1CF5                     __end_of_ADC1_Initialize:	
 12578                           
 12579                           	psect	intentry
 12580  0804                     __pintentry:	
 12581 ;; *************** function _INTERRUPT_InterruptManager *****************
 12582 ;; Defined at:
 12583 ;;		line 56 in file "mcc_generated_files/interrupt_manager.c"
 12584 ;; Parameters:    Size  Location     Type
 12585 ;;		None
 12586 ;; Auto vars:     Size  Location     Type
 12587 ;;		None
 12588 ;; Return value:  Size  Location     Type
 12589 ;;                  1    wreg      void 
 12590 ;; Registers used:
 12591 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12592 ;; Tracked objects:
 12593 ;;		On entry : 0/0
 12594 ;;		On exit  : 0/0
 12595 ;;		Unchanged: 0/0
 12596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12599 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12600 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12601 ;;Total ram usage:        1 bytes
 12602 ;; Hardware stack levels used:    1
 12603 ;; This function calls:
 12604 ;;		Nothing
 12605 ;; This function is called by:
 12606 ;;		Interrupt level 1
 12607 ;; This function uses a non-reentrant model
 12608 ;;
 12609                           
 12610  0804                     _INTERRUPT_InterruptManager:	
 12611                           
 12612                           ;incstack = 0
 12613  0804  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12614                           
 12615                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0]
 12616  0805  3188               	pagesel	$
 12617                           
 12618                           ;interrupt_manager.c: 60: if(INTCONbits.PEIE == 1 && PIE1bits.TMR2IE == 1 && PIR1bits.TM
      +                          R2IF == 1)
 12619  0806  1F0B               	btfss	11,6	;volatile
 12620  0807  2836               	goto	i1l4418
 12621  0808  0021               	movlb	1	; select bank1
 12622  0809  1C91               	btfss	17,1	;volatile
 12623  080A  2836               	goto	i1l4418
 12624  080B  0020               	movlb	0	; select bank0
 12625  080C  1C91               	btfss	17,1	;volatile
 12626  080D  2836               	goto	i1l4418
 12627                           
 12628                           ;interrupt_manager.c: 61: {;interrupt_manager.c: 63: PIR1bits.TMR2IF = 0;
 12629  080E  1091               	bcf	17,1	;volatile
 12630                           
 12631                           ;interrupt_manager.c: 64: Event |= (1<<1);
 12632  080F  14EB               	bsf	_Event,1	;volatile
 12633                           
 12634                           ;interrupt_manager.c: 65: subTickerX++;
 12635  0810  3001               	movlw	1
 12636  0811  00F0               	movwf	??_INTERRUPT_InterruptManager
 12637  0812  0870               	movf	??_INTERRUPT_InterruptManager,w
 12638  0813  07E9               	addwf	_subTickerX,f
 12639                           
 12640                           ;interrupt_manager.c: 66: subTickerX_1s++;
 12641  0814  3001               	movlw	1
 12642  0815  00F0               	movwf	??_INTERRUPT_InterruptManager
 12643  0816  0870               	movf	??_INTERRUPT_InterruptManager,w
 12644  0817  07E8               	addwf	_subTickerX_1s,f
 12645                           
 12646                           ;interrupt_manager.c: 67: if(subTickerX>=5){
 12647  0818  3005               	movlw	5
 12648  0819  0269               	subwf	_subTickerX,w
 12649  081A  1C03               	skipc
 12650  081B  281E               	goto	i1l4400
 12651                           
 12652                           ;interrupt_manager.c: 68: subTickerX=0;
 12653  081C  01E9               	clrf	_subTickerX
 12654                           
 12655                           ;interrupt_manager.c: 69: Event |= (1<<2);
 12656  081D  156B               	bsf	_Event,2	;volatile
 12657  081E                     i1l4400:	
 12658                           
 12659                           ;interrupt_manager.c: 70: };interrupt_manager.c: 71: if(subTickerX_1s>=50){
 12660  081E  3032               	movlw	50
 12661  081F  0268               	subwf	_subTickerX_1s,w
 12662  0820  1C03               	skipc
 12663  0821  2824               	goto	i1l4406
 12664                           
 12665                           ;interrupt_manager.c: 72: subTickerX_1s=0;
 12666  0822  01E8               	clrf	_subTickerX_1s
 12667                           
 12668                           ;interrupt_manager.c: 73: Event |= (1<<3);
 12669  0823  15EB               	bsf	_Event,3	;volatile
 12670  0824                     i1l4406:	
 12671                           
 12672                           ;interrupt_manager.c: 74: };interrupt_manager.c: 76: if(eusartRxIdleTime_ms){
 12673  0824  087C               	movf	_eusartRxIdleTime_ms,w	;volatile
 12674  0825  1903               	btfsc	3,2
 12675  0826  2831               	goto	i1l4416
 12676                           
 12677                           ;interrupt_manager.c: 77: eusartRxIdleTime_ms++;
 12678  0827  3001               	movlw	1
 12679  0828  00F0               	movwf	??_INTERRUPT_InterruptManager
 12680  0829  0870               	movf	??_INTERRUPT_InterruptManager,w
 12681  082A  07FC               	addwf	_eusartRxIdleTime_ms,f	;volatile
 12682                           
 12683                           ;interrupt_manager.c: 78: if(eusartRxIdleTime_ms>5){
 12684  082B  3006               	movlw	6
 12685  082C  027C               	subwf	_eusartRxIdleTime_ms,w	;volatile
 12686  082D  1C03               	skipc
 12687  082E  2831               	goto	i1l4416
 12688                           
 12689                           ;interrupt_manager.c: 79: Event|=(1<<0);
 12690  082F  146B               	bsf	_Event,0	;volatile
 12691                           
 12692                           ;interrupt_manager.c: 80: eusartRxIdleTime_ms=0;
 12693  0830  01FC               	clrf	_eusartRxIdleTime_ms	;volatile
 12694  0831                     i1l4416:	
 12695                           
 12696                           ;interrupt_manager.c: 81: };interrupt_manager.c: 82: };interrupt_manager.c: 83: globalTi
      +                          cker++;
 12697  0831  3001               	movlw	1
 12698  0832  0021               	movlb	1	; select bank1
 12699  0833  07CC               	addwf	_globalTicker^(0+128),f	;volatile
 12700  0834  3000               	movlw	0
 12701  0835  3DCD               	addwfc	(_globalTicker+1)^(0+128),f	;volatile
 12702  0836                     i1l4418:	
 12703                           
 12704                           ;interrupt_manager.c: 84: };interrupt_manager.c: 85: if(INTCONbits.PEIE == 1 && PIE1bits
      +                          .RCIE == 1 && PIR1bits.RCIF == 1)
 12705  0836  1F0B               	btfss	11,6	;volatile
 12706  0837  285E               	goto	i1l4436
 12707  0838  0021               	movlb	1	; select bank1
 12708  0839  1E91               	btfss	17,5	;volatile
 12709  083A  285E               	goto	i1l4436
 12710  083B  0020               	movlb	0	; select bank0
 12711  083C  1E91               	btfss	17,5	;volatile
 12712  083D  285E               	goto	i1l4436
 12713                           
 12714                           ;interrupt_manager.c: 86: {;interrupt_manager.c: 88: PIR1bits.RCIF=0;
 12715  083E  1291               	bcf	17,5	;volatile
 12716                           
 12717                           ;interrupt_manager.c: 89: if(1 == RCSTAbits.OERR){
 12718  083F  0023               	movlb	3	; select bank3
 12719  0840  1C9D               	btfss	29,1	;volatile
 12720  0841  2844               	goto	i1l4428
 12721                           
 12722                           ;interrupt_manager.c: 90: RCSTAbits.CREN = 0;
 12723  0842  121D               	bcf	29,4	;volatile
 12724                           
 12725                           ;interrupt_manager.c: 91: RCSTAbits.CREN = 1;
 12726  0843  161D               	bsf	29,4	;volatile
 12727  0844                     i1l4428:	
 12728                           
 12729                           ;interrupt_manager.c: 92: };interrupt_manager.c: 93: rxtemp=RCREG;
 12730  0844  0819               	movf	25,w	;volatile
 12731  0845  00F0               	movwf	??_INTERRUPT_InterruptManager
 12732  0846  0870               	movf	??_INTERRUPT_InterruptManager,w
 12733  0847  0020               	movlb	0	; select bank0
 12734  0848  00E7               	movwf	_rxtemp
 12735                           
 12736                           ;interrupt_manager.c: 94: if(eusartRxCount<32){
 12737  0849  3020               	movlw	32
 12738  084A  026A               	subwf	_eusartRxCount,w	;volatile
 12739  084B  1803               	skipnc
 12740  084C  285A               	goto	i1l4434
 12741                           
 12742                           ;interrupt_manager.c: 95: eusartRxBuffer[eusartRxCount]=rxtemp;
 12743  084D  0867               	movf	_rxtemp,w
 12744  084E  00F0               	movwf	??_INTERRUPT_InterruptManager
 12745  084F  086A               	movf	_eusartRxCount,w
 12746  0850  3E40               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 12747  0851  0086               	movwf	6
 12748  0852  3001               	movlw	1	; select bank2/3
 12749  0853  0087               	movwf	7
 12750  0854  0870               	movf	??_INTERRUPT_InterruptManager,w
 12751  0855  0081               	movwf	1
 12752                           
 12753                           ;interrupt_manager.c: 96: eusartRxCount++;
 12754  0856  3001               	movlw	1
 12755  0857  00F0               	movwf	??_INTERRUPT_InterruptManager
 12756  0858  0870               	movf	??_INTERRUPT_InterruptManager,w
 12757  0859  07EA               	addwf	_eusartRxCount,f	;volatile
 12758  085A                     i1l4434:	
 12759                           
 12760                           ;interrupt_manager.c: 98: };interrupt_manager.c: 99: eusartRxIdleTime_ms=1;
 12761  085A  3001               	movlw	1
 12762  085B  00F0               	movwf	??_INTERRUPT_InterruptManager
 12763  085C  0870               	movf	??_INTERRUPT_InterruptManager,w
 12764  085D  00FC               	movwf	_eusartRxIdleTime_ms	;volatile
 12765  085E                     i1l4436:	
 12766                           
 12767                           ;interrupt_manager.c: 100: };interrupt_manager.c: 102: if( PIR1bits.TXIF == 1)
 12768  085E  0020               	movlb	0	; select bank0
 12769  085F  1A11               	btfsc	17,4	;volatile
 12770                           
 12771                           ;interrupt_manager.c: 103: {;interrupt_manager.c: 104: PIR1bits.TXIF=0;
 12772  0860  1211               	bcf	17,4	;volatile
 12773                           
 12774                           ;interrupt_manager.c: 105: };interrupt_manager.c: 107: if(PIR3bits.PWM2IF){
 12775  0861  1A93               	btfsc	19,5	;volatile
 12776                           
 12777                           ;interrupt_manager.c: 108: PIR3bits.PWM2IF = 0;
 12778  0862  1293               	bcf	19,5	;volatile
 12779                           
 12780                           ;interrupt_manager.c: 109: };interrupt_manager.c: 111: if(PIR3bits.PWM1IF){
 12781  0863  1A13               	btfsc	19,4	;volatile
 12782                           
 12783                           ;interrupt_manager.c: 112: PIR3bits.PWM1IF=0;
 12784  0864  1213               	bcf	19,4	;volatile
 12785  0865  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12786  0866  0009               	retfie
 12787  0867                     __end_of_INTERRUPT_InterruptManager:	
 12788  007E                     btemp	set	126	;btemp
 12789  007E                     int$flags	set	126
 12790  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    17
    Data        12
    BSS         148
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     39      80
    BANK1            80      2      56
    BANK2            80      0      64
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           60      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    crc_append@message	PTR unsigned char  size(2) Largest target is 132
		 -> modbusBuf(BANK2[32]), sysData(BIGRAM[132]), 

    crc_verify@message	PTR unsigned char  size(2) Largest target is 132
		 -> modbusBuf(BANK2[32]), sysData(BIGRAM[132]), 

    crc_sum@buf	PTR unsigned char  size(2) Largest target is 132
		 -> modbusBuf(BANK2[32]), sysData(BIGRAM[132]), 

    m_mem_cpy_len@s	PTR unsigned char  size(2) Largest target is 132
		 -> modbusBuf(BANK2[32]), sysData(BIGRAM[132]), eusartRxBuffer(BANK2[32]), 

    m_mem_cpy_len@d	PTR unsigned char  size(2) Largest target is 32
		 -> crc_verify@expected(BANK0[2]), modbusBuf(BANK2[32]), 

    modbus_response_process@rbuf	PTR unsigned char  size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    modbus_response_process@pmdbs	PTR struct . size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    modbus_response_command@rbuf	PTR unsigned char  size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    modbus_response_command@pmdbs	PTR struct . size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    modbus_response_write_mult_register@rbuf	PTR unsigned char  size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    modbus_response_write_mult_register@stb	PTR struct . size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    modbus_response_write_single_register@rbuf	PTR unsigned char  size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    modbus_response_write_single_register@pmdbs	PTR struct . size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    getRegisterVal@tempData	PTR unsigned int  size(1) Largest target is 2
		 -> modbus_response_command@tempData(BANK0[2]), 

    modbus_response_illgeal_function@buf	PTR unsigned char  size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    modbus_response_illgeal_function@pmdbs	PTR struct . size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    my_flash_system_write@buf	PTR unsigned char  size(2) Largest target is 132
		 -> sysData(BIGRAM[132]), 

    my_flash_system_read@buf	PTR unsigned char  size(2) Largest target is 132
		 -> sysData(BIGRAM[132]), 

    uart_send_len@buf	PTR unsigned char  size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_calc_rs_lo_avg
    _sys_data_init->_my_flash_system_read
    _pid_pwm2_vout_run->_set_vout_pwm2_duty
    _set_vout_pwm2_duty->_get_vout_pwm2_duty
    _pid_pwm1_idrv_run->_set_idrv_pwm1_duty
    _set_idrv_pwm1_duty->_get_idrv_pwm1_duty
    _modbus_response_write_single_register->_crc_append
    _modbus_response_write_mult_register->_crc_append
    _sys_data_save->_crc_append
    _my_flash_read_system_erase->_FLASH_EraseBlock
    _modbus_response_illgeal_function->_crc_append
    _modbus_response_command->_crc_append
    _crc_append->_crc_sum
    _crc_verify->_m_mem_cpy_len
    _calc_temp_rs->___lldiv
    _calc_temp_rc->___lldiv
    _calc_rs_lo_avg->___lldiv
    _calc_expect_vout_adc_value->___aldiv
    ___aldiv->___lmul
    _adc_sample->_fvr_set_gain
    _TMR2_Initialize->_TMR2_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_calc_expect_vout_adc_value
    _sys_data_init->_crc_verify
    _pid_pwm1_idrv_run->___aldiv
    _modbus_response_process->_modbus_response_command
    _modbus_response_process->_modbus_response_write_single_register
    _modbus_response_write_single_register->_crc_append
    _modbus_response_write_mult_register->_crc_append
    _sys_data_save->_crc_append
    _modbus_response_illgeal_function->_crc_append
    _modbus_response_command->_crc_append
    _crc_append->_crc_sum
    _crc_verify->_crc_sum
    _calc_temp_rs->___lldiv
    _calc_temp_rc->___lldiv
    _calc_rs_lo_avg->___lldiv
    _calc_expect_vout_adc_value->___aldiv
    ___aldiv->___lmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   43912
                                              0 BANK1      2     2      0
                  _SYSTEM_Initialize
                         _adc_sample
         _calc_expect_vout_adc_value
                     _calc_rs_lo_avg
                       _calc_temp_rc
                       _calc_temp_rs
                      _m_mem_cpy_len
            _modbus_response_process
                  _pid_pwm1_idrv_run
                  _pid_pwm2_vout_run
                      _sys_data_init
                _uart_received_start
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (1) _uart_received_start                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sys_data_init                                       10    10      0    5677
                                             14 BANK0     10    10      0
                             ___wmul
                         _crc_verify
               _my_flash_system_read
                      _sys_data_save
 ---------------------------------------------------------------------------------
 (2) _my_flash_system_read                                11     7      4     311
                                              1 COMMON    11     7      4
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     396
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _pid_pwm2_vout_run                                    6     6      0    1281
                                              0 BANK0      6     6      0
                            ___awdiv
                            ___lwdiv
                 _set_vout_pwm2_duty
 ---------------------------------------------------------------------------------
 (2) _set_vout_pwm2_duty                                   4     2      2     212
                                              7 COMMON     4     2      2
                 _get_vout_pwm2_duty
 ---------------------------------------------------------------------------------
 (3) _get_vout_pwm2_duty                                   6     4      2      25
                                              1 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              1 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     452
                                              1 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (1) _pid_pwm1_idrv_run                                   12    12      0    3340
                                             18 BANK0     12    12      0
                            ___aldiv
                             ___lmul
                 _set_idrv_pwm1_duty
 ---------------------------------------------------------------------------------
 (2) _set_idrv_pwm1_duty                                   4     2      2     212
                                              7 COMMON     4     2      2
                 _get_idrv_pwm1_duty
 ---------------------------------------------------------------------------------
 (3) _get_idrv_pwm1_duty                                   6     4      2      25
                                              1 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _modbus_response_process                              6     4      2   21890
                                             24 BANK0      6     4      2
                         _crc_verify
            _modbus_response_command
   _modbus_response_illgeal_function
_modbus_response_write_mult_register
_modbus_response_write_single_regist
 ---------------------------------------------------------------------------------
 (2) _modbus_response_write_single_register               12    12      0    6495
                                             12 BANK0     12    12      0
                         _crc_append
                      _sys_data_save
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (2) _modbus_response_write_mult_register                  5     5      0    5867
                                             12 BANK0      5     5      0
                         _crc_append
                      _sys_data_save
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (2) _sys_data_save                                        0     0      0    2878
                         _crc_append
         _my_flash_read_system_erase
              _my_flash_system_write
 ---------------------------------------------------------------------------------
 (3) _my_flash_system_write                               16    12      4     473
                                              1 COMMON     6     2      4
                                              0 BANK0     10    10      0
 ---------------------------------------------------------------------------------
 (3) _my_flash_read_system_erase                           0     0      0     523
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     3     1      2     523
                                              1 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (2) _modbus_response_illgeal_function                     4     3      1    2949
                                             12 BANK0      4     3      1
                         _crc_append
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (2) _modbus_response_command                             12    12      0    4278
                                             12 BANK0     12    12      0
                         _crc_append
                     _getRegisterVal
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (1) _uart_send_len                                        7     6      1     659
                                              1 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (3) _getRegisterVal                                      10     7      3     711
                                              1 COMMON    10     7      3
 ---------------------------------------------------------------------------------
 (3) _crc_append                                          11     7      4    1882
                                              7 COMMON     5     5      0
                                              6 BANK0      6     2      4
                            _crc_sum
 ---------------------------------------------------------------------------------
 (2) _crc_verify                                          10     6      4    1859
                                              8 COMMON     2     2      0
                                              6 BANK0      8     4      4
                            _crc_sum
                      _m_mem_cpy_len
 ---------------------------------------------------------------------------------
 (3) _m_mem_cpy_len                                        7     1      6     542
                                              1 COMMON     7     1      6
 ---------------------------------------------------------------------------------
 (4) _crc_sum                                             12     8      4     731
                                              1 COMMON     6     2      4
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _calc_temp_rs                                         8     4      4    2346
                                              5 BANK0      8     4      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) _calc_temp_rc                                        12     8      4    2346
                                              5 BANK0     12     8      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) _calc_rs_lo_avg                                       9     7      2    1072
                                             10 COMMON     2     2      0
                                              5 BANK0      7     5      2
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     770
                                              1 COMMON     9     1      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _calc_expect_vout_adc_value                          21    19      2    3624
                                             18 BANK0     21    19      2
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8    1576
                                              1 COMMON     8     0      8
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8    1345
                                              9 COMMON     1     1      0
                                              4 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _adc_sample                                          12    10      2    1014
                                              4 COMMON     5     3      2
                                              0 BANK0      7     7      0
                           _adc_init
                       _fvr_set_gain
 ---------------------------------------------------------------------------------
 (2) _fvr_set_gain                                         3     3      0      69
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _adc_init                                             2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     121
                    _ADC1_Initialize
                  _EUSART_Initialize
                     _FVR_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM1_Initialize
                    _PWM2_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0      98
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR2_SetInterruptHandler                             2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _ADC1_Initialize
     _EUSART_Initialize
     _FVR_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM1_Initialize
     _PWM2_Initialize
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
       _TMR2_StartTimer
     _WDT_Initialize
   _adc_sample
     _adc_init
     _fvr_set_gain
   _calc_expect_vout_adc_value
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _calc_rs_lo_avg
     ___lldiv
   _calc_temp_rc
     ___lldiv
     ___lmul
   _calc_temp_rs
     ___lldiv
     ___lmul
   _m_mem_cpy_len
   _modbus_response_process
     _crc_verify
       _crc_sum
       _m_mem_cpy_len
     _modbus_response_command
       _crc_append
         _crc_sum
       _getRegisterVal
       _uart_send_len
     _modbus_response_illgeal_function
       _crc_append
         _crc_sum
       _uart_send_len
     _modbus_response_write_mult_register
       _crc_append
         _crc_sum
       _sys_data_save
         _crc_append
           _crc_sum
         _my_flash_read_system_erase
           _FLASH_EraseBlock
         _my_flash_system_write
       _uart_send_len
     _modbus_response_write_single_register
       _crc_append
         _crc_sum
       _sys_data_save
         _crc_append
           _crc_sum
         _my_flash_read_system_erase
           _FLASH_EraseBlock
         _my_flash_system_write
       _uart_send_len
   _pid_pwm1_idrv_run
     ___aldiv
       ___lmul (ARG)
     ___lmul
     _set_idrv_pwm1_duty
       _get_idrv_pwm1_duty
   _pid_pwm2_vout_run
     ___awdiv
     ___lwdiv
     _set_vout_pwm2_duty
       _get_vout_pwm2_duty
   _sys_data_init
     ___wmul
     _crc_verify
       _crc_sum
       _m_mem_cpy_len
     _my_flash_system_read
     _sys_data_save
       _crc_append
         _crc_sum
       _my_flash_read_system_erase
         _FLASH_EraseBlock
       _my_flash_system_write
   _uart_received_start
   _uart_send_len

 _INTERRUPT_InterruptManager (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3E0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     27      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      2      38       7       70.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      40       9       80.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      D5      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              3C      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           20      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      D5      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Sat Mar 30 11:54:48 2019

              __end_of_TMR2_SetInterruptHandler 1CE4                                               pc 0002  
                  ??_my_flash_read_system_erase 0074                                    ___awdiv@sign 0077  
                                            _x0 004B                                              _x1 00BC  
                                            _y0 004F                                              _y1 00C0  
                        __end_of_FVR_Initialize 1CD2                             ___wmul@multiplicand 0073  
                                           l610 1D34                                             l604 1D5B  
                                           l622 1300                                             l630 1500  
                                           l616 12E6                                             l640 0C10  
                                           l635 17F9                                             l715 142D  
                                           l805 0D41                                             l645 1551  
                                           l718 1481                                             l647 1597  
                                           l666 0AA4                                             l769 1166  
                                           _GIE 005F                                             _PR2 001B  
                               _pwm1DutyForIdrv 00D2                                             _x32 00B8  
                                           _y32 0047                                             _err 00A0  
                               _TMR2_Initialize 1D20                                             wreg 0009  
                          ??_get_vout_pwm2_duty 0073                            ??_set_vout_pwm2_duty 0079  
                               ??_uart_send_len 0072                                            S5256 1800  
                                          l1045 1282                                            l1134 0F8D  
                                          l1047 12A0                                            l1069 1DE5  
                                          l4010 1ED4                                            l4012 1EE0  
                                          l4022 1EFB                                            l5000 0918  
                                          l3312 1428                                            l4018 1EF2  
                                          l4060 12F0                                            l5004 0920  
                                          l3420 0E8A                                            l3332 1459  
                                          l3324 143F                                            l4070 12F3  
                                          l3430 0ECF                                            l3422 0E92  
                                          l3342 146C                                            l3334 145B  
                                          l4072 1329                                            l5024 09DB  
                                          l3440 0F00                                            l3432 0EDC  
                                          l3424 0EA2                                            l5018 09BA  
                                          l3450 0F2D                                            l3442 0F09  
                                          l3434 0EE5                                            l3426 0EB5  
                                          l5050 15ED                                            l3444 0F12  
                                          l3436 0EEE                                            l3428 0EC2  
                                          l3356 1489                                            l5140 0D9E  
                                          l4182 1360                                            l4174 133C  
                                          l3446 0F1B                                            l3438 0EF7  
                                          l3454 0F35                                            l3448 0F24  
                                          l3456 0F42                                            l3384 10E0  
                                          l5080 125B                                            l5072 1242  
                                          l5056 163E                                            l3466 0F65  
                                          l3386 10F1                                            l3394 10D7  
                                          l5082 1260                                            l5170 0E47  
                                          l3636 1D54                                            l3900 11F3  
                                          l5076 1251                                            l4622 12C7  
                                          l4702 0C4B                                            l5078 1256  
                                          l5086 1267                                            l5182 0E7E  
                                          l5174 0E50                                            l3912 121E  
                                          l4624 12CC                                            l4616 12B2  
                                          l3680 10C3                                            l5184 0E81  
                                          l4722 0C9F                                            l4714 0C81  
                                          l3908 1213                                            l4814 16B7  
                                          l3678 109C                                            l4904 14EC  
                                          l4656 1E4C                                            l4842 1EA3  
                                          l4922 17E5                                            l4906 14F8  
                                          l4666 1058                                            l4826 16B8  
                                          l4754 0D43                                            l3970 1198  
                                          l3866 1DDF                                            l4924 17F1  
                                          l4828 16EA                                            l4748 0D13  
                                          l3980 11A0                                            l3964 118D  
                                          l4846 1EAE                                            l4758 0D49  
                                          l4950 0BF1                                            l3982 11AC  
                                          l4872 0FAE                                            l4864 0F9E  
                                          l4696 0C3B                                            l4952 0BF9  
                                          l3992 11C7                                            l4890 0FF5  
                                          l4882 0FDC                                            l4874 0FBC  
                                          l3898 11E5                                            l4954 0C08  
                                          l4970 1562                                            l3996 11CF  
                                          l3988 11BE                                            l4886 0FE7  
                                          l4990 08BB                                            l4982 15A8  
                       __end_of_PWM1_Initialize 1D77                                            u2125 1412  
                                          _LATA 010C                                            u3015 1ED7  
                                          _LATC 010E                                            u3105 130D  
                                          u3115 1315                                            u2155 144D  
                                          u2235 1D99                                            u2315 1E26  
                                          u3035 1EE1                                            u3125 12FC  
                                          u3045 1EEB                                            u2245 1DB2  
                                          u2325 1E42                                            u3055 1EF3  
                                          u2185 1433                                            u4025 0CC0  
                                          u2290 113F                                            u2365 10A2  
                                          u4145 1692                                            u4245 0FB1  
                                          u4405 1590                                            u4415 15A1  
                                          u4265 0FBD                                            u4185 1EAF  
                                          u2745 11E8                                            u2665 1DE6  
                                          u4275 0FD1                                            u4195 1EB6  
                                          u4435 08ED                                            u2675 1DEB  
                                          u4285 0FDD                                            u4445 090E  
                                          u2765 11F4                                            u2775 1208  
                                          u2935 11A3                                            u4473 09B0  
                                          u2785 1214                                            u4385 154A  
                                          u2955 11AD                                            u4395 155B  
                                          u4493 09D4                                            u2965 11B7  
                                          u4645 0DDC                                            u2975 11BF  
                                          u4655 0DF3                                            u4665 0E0A  
                                          u3875 1288                                            u3965 0C58  
                                          u3895 1054                                            u4787 12E1  
                                 _m_mem_cpy_len 1E4C                                            _TMR2 001A  
                                          _WPUA 020C                                            _WPUC 020E  
                                          _main 0D72  modbus_response_write_single_register@startAddr 0036  
                                          _pidU 00CE             __size_of_my_flash_read_system_erase 0023  
                                          fsr0h 0005                                            fsr1h 0007  
                                          indf0 0000                                            fsr0l 0004  
                                          indf1 0001                                            fsr1l 0006  
                                          _xlen 0066                                            btemp 007E  
                                          start 0867                                 _pwm2DutyForVout 00D4  
                     ??_modbus_response_command 002C                         __end_of_PWM2_Initialize 1D90  
                     ??_modbus_response_process 003A                                 ?_FVR_Initialize 0070  
                __size_of_OSCILLATOR_Initialize 0001                   __end_of_OSCILLATOR_Initialize 0FFF  
                               __end_of___aldiv 0FFE                                           ?_main 0070  
                               __end_of___awdiv 11D4                                 __end_of___lldiv 1227  
                               ___awdiv@divisor 0071                                           _T2CON 001C  
                               __end_of___lwdiv 1F00                                 ___awdiv@counter 0076  
                                         _RCREG 0199                                           _RCSTA 019D  
                                         _TRISA 008C                                           _TRISC 008E  
                                         _TXREG 019A                                           _TXSTA 019E  
              modbus_response_command@startAddr 0030                             ___lmul@multiplicand 0075  
                                         _PidKp 0057                                           _PidTd 00C8  
                                         _Event 006B                                           _PidTi 00CA  
                               __end_of_crc_sum 12D1                                  _WDT_Initialize 1CD2  
                                         _resRc 006E                                           _resRs 006C  
        modbus_response_write_mult_register@len 002E                                  ?_m_mem_cpy_len 0071  
        modbus_response_write_mult_register@stb 0030                      __end_of_get_idrv_pwm1_duty 1DA9  
                    __end_of_set_idrv_pwm1_duty 1E30                              crc_verify@expected 002C  
                                         status 0003                                           wtemp0 007E  
                               _TMR2_StartTimer 1CCB                                   fvr_set_gain@g 0073  
   __end_of_modbus_response_write_mult_register 1401    __size_of_modbus_response_write_mult_register 0072  
         ??_modbus_response_write_mult_register 002C            ?_modbus_response_write_mult_register 0070  
           _modbus_response_write_mult_register 138F              __end_of_calc_expect_vout_adc_value 0AA9  
                    _calc_expect_vout_adc_value 08B5                                __end_of_HexTable 182F  
                          pid_pwm1_idrv_run@t32 003A                                 __initialization 0869  
                                  __end_of_main 0E83                           __size_of_calc_temp_rc 00D9  
                         __size_of_calc_temp_rs 0090                         __end_of_TMR2_Initialize 1D33  
                   ?_INTERRUPT_InterruptManager 0070             modbus_response_illgeal_function@buf 002E  
                      _TMR2_SetInterruptHandler 1CDE                                          ??_main 00D6  
                              ??_calc_rs_lo_avg 007A                     modbus_response_process@rbuf 003D  
                 __size_of_my_flash_system_read 0038                     modbus_response_process@rlen 0038  
                   modbus_response_process@resp 003B                 __end_of_modbus_response_command 1727  
                        __end_of_WDT_Initialize 1CD6                    my_flash_system_write@blocNum 0023  
                                        _ADCON0 009D                                          _ADCON1 009E  
                                        _ADCON2 009F                                          _ADRESH 009C  
                                        _ADRESL 009B                                ___awdiv@dividend 0073  
                                        _ANSELA 018C                                          _ANSELC 018E  
               __end_of_modbus_response_process 127B                                __end_of_adc_init 1D47  
                              ?_PWM1_Initialize 0070                                          _ODCONA 028C  
                                        _ODCONC 028E                                          i1l4400 081E  
                                        i1l4406 0824                                          i1l4416 0831  
                                        i1l4434 085A                                          i1l4418 0836  
                                        i1l4428 0844                                          i1l4436 085E  
                                        _FVRCON 0117                                          _PMADRH 0192  
                                        _PMADRL 0191                                          _PMDATH 0194  
                                        _PMDATL 0193                                          _PMCON2 0196  
                     __size_of_FLASH_EraseBlock 001C                     __end_of_uart_received_start 1CDA  
                                        _SPBRGH 019C                                          _SPBRGL 019B  
                                        _WDTCON 0097                                    _calc_temp_rc 1727  
                                  _calc_temp_rs 148F                                 calc_rs_lo_avg@i 002B  
                               calc_rs_lo_avg@x 0025              __end_of_my_flash_read_system_erase 1023  
                    _my_flash_read_system_erase 1000      modbus_response_write_single_register@pmdbs 0034  
                                        ___lmul 1E9A                                       ??___aldiv 0079  
                                        ___wmul 1DDD                                       ??___awdiv 0075  
                                     ??___lldiv 0079                                       ??___lwdiv 0075  
                              ?_PWM2_Initialize 0070                                          _pwm2Ei 00C4  
                              ___awdiv@quotient 0078                        my_flash_system_write@buf 0071  
                      my_flash_system_write@len 0073                        my_flash_system_write@loc 0025  
                                     ??_crc_sum 0075                        __size_of_ADC1_Initialize 0009  
                                        _rxtemp 0067                                 ?_WDT_Initialize 0070  
                               ??_m_mem_cpy_len 0077                my_flash_system_write@GIEBitValue 0022  
                       __end_of_TMR2_StartTimer 1CCE        TMR2_SetInterruptHandler@InterruptHandler 0071  
               modbus_response_command@tempData 0036        __end_of_modbus_response_illgeal_function 1183  
     __size_of_modbus_response_illgeal_function 0042              ??_modbus_response_illgeal_function 002D  
             ?_modbus_response_illgeal_function 002C                _modbus_response_illgeal_function 1141  
                                 ?_fvr_set_gain 0070                                  fvr_set_gain@t8 0072  
                             _SYSTEM_Initialize 1DC2                         __end_of__initialization 08B1  
                        __size_of_sys_data_init 00B8                           _my_flash_system_write 1401  
                            ?_SYSTEM_Initialize 0070                          __size_of_sys_data_save 0037  
                            getRegisterVal@addr 0071                                  __pcstackCOMMON 0070  
                                  __pidataBANK0 1CDA                                    __pidataBANK1 1CE4  
                           ??_SYSTEM_Initialize 0073                                      _adc_sample 12D1  
        modbus_response_write_single_register@i 0033                                ?_TMR2_Initialize 0070  
                                _OPTION_REGbits 0095        modbus_response_write_single_register@t16 0031  
                             crc_append@message 0026                          getRegisterVal@tempAddr 007A  
                        my_flash_system_write@i 0029                          my_flash_system_write@j 0020  
                        getRegisterVal@tempData 0073                       __end_of_SYSTEM_Initialize 1DDD  
                                ??_fvr_set_gain 0071                                      __pbssBANK0 0047  
                                    __pbssBANK1 00A0                                      __pbssBANK2 0120  
                modbus_response_command@tmpAddr 002E                 my_flash_system_read@GIEBitValue 0077  
                                    adc_init@ch 0072                                ??_FVR_Initialize 0071  
                                    __pmaintext 0D72                      modbus_response_command@len 0034  
                                       ?___lmul 0071                                         ?___wmul 0071  
                                    __pintentry 0804                    ??_calc_expect_vout_adc_value 0034  
                                       _BAUDCON 019F                                  ___lmul@product 0020  
                                    _crc_append 1E69                                       ?_adc_init 0070  
                                  adc_sample@ch 0020                                   _sys_data_init 15B0  
                                 _sys_data_save 105A                                      _crc_verify 1023  
                                 _eusartRxCount 006A                     __size_of_get_vout_pwm2_duty 0019  
                   __size_of_set_vout_pwm2_duty 001C                                         _PWM1DCH 0D94  
                                       _PWM1DCL 0D93                                         _PWM2DCH 0DA4  
                                       _PWM2DCL 0DA3                                         _PWM1CON 0D9B  
                                       _PWM2CON 0DAB                                         _PWM1OFH 0D98  
                                       _PWM1OFL 0D97                                         _PWM2OFH 0DA8  
                                       _PWM1PHH 0D92                                         _PWM2OFL 0DA7  
                                       _PWM1PHL 0D91                                         _PWM2PHH 0DA2  
                                       _PWM2PHL 0DA1                                         _PWM1PRH 0D96  
                                       _PWM1PRL 0D95                                         _PWM2PRH 0DA6  
                                       _PWM2PRL 0DA5           modbus_response_illgeal_function@pmdbs 002F  
                                       _PPSLOCK 0E0F                               ??_ADC1_Initialize 0071  
                              ?_TMR2_StartTimer 0070                          set_idrv_pwm1_duty@duty 0077  
                         __end_of_uart_send_len 1102                                _FLASH_EraseBlock 1DF8  
                        ?_my_flash_system_write 0071                         __size_of_getRegisterVal 00F9  
                   ?_calc_expect_vout_adc_value 0032     modbus_response_write_single_register@fiSave 0030  
                    ??_TMR2_SetInterruptHandler 0073                                         ___aldiv 0F7C  
                                       ___awdiv 1183                                 __size_of___lmul 0032  
                                       ___lldiv 11D4                                 __size_of___wmul 001B  
                            _get_idrv_pwm1_duty 1D90                              _set_idrv_pwm1_duty 1E14  
                                       ___lwdiv 1ECC                                     ?_adc_sample 0074  
                                adc_sample@gfvr 0074                                  ?_sys_data_init 0070  
                                ?_sys_data_save 0070                                      ??_adc_init 0071  
                                       __ptext1 1CD6                                         __ptext2 15B0  
                                       __ptext3 1091                                         __ptext4 1DDD  
                                       __ptext5 151F                                         __ptext6 1E30  
                                       __ptext7 1DA9                                         __ptext8 1ECC  
                                       __ptext9 1183                                         _crc_sum 127B  
                                       _pidBbSm 0065                             ?_get_idrv_pwm1_duty 0071  
                           ?_set_idrv_pwm1_duty 0077                           _OSCILLATOR_Initialize 0FFE  
                                     _T2CONbits 001C                                      _rsLoAvgBuf 00AC  
                                       _rsLoAvg 0053                                ___aldiv@dividend 0028  
                      ??_PIN_MANAGER_Initialize 0071                                         _sysData 235C  
                    __size_of_SYSTEM_Initialize 001B                                         clrloop0 1CF6  
                          end_of_initialization 08B1                                         init_ram 1D01  
                      ?_modbus_response_command 0070                                         initloop 1D02  
                  __end_of_my_flash_system_read 10C9                            ??_get_idrv_pwm1_duty 0073  
                          ??_set_idrv_pwm1_duty 0079                               _EUSART_Initialize 1D0D  
                               ___lldiv@divisor 0071                                      _voExpectMv 00C6  
                               ___lldiv@counter 0024                              ?_EUSART_Initialize 0070  
                      ?_modbus_response_process 0038                                       _RCSTAbits 019D  
                   ?_my_flash_read_system_erase 0070                                ___aldiv@quotient 002E  
                                     _PWM1LDCON 0D9F                                       _PWM2LDCON 0DAF  
                                     _PWM1OFCON 0DA0                                       _PWM2OFCON 0DB0  
                          __end_of_fvr_set_gain 1D5E                                     ?_crc_append 0026  
                                    _subTickerX 0069                             ??_EUSART_Initialize 0071  
                              ??_WDT_Initialize 0071                                     ?_crc_verify 0026  
                                    crc_sum@crc 0024                                      crc_sum@buf 0071  
                                    crc_sum@len 0073                                       _RXPPSbits 0E15  
                           __size_of_adc_sample 005D                       __end_of_EUSART_Initialize 1D20  
                                  _globalTicker 00CC                                       _TXSTAbits 019E  
                      __size_of_PWM1_Initialize 0019                    __size_of_uart_received_start 0004  
                  _TMR2_DefaultInterruptHandler 0000                                 ??_sys_data_init 002E  
                               ??_sys_data_save 007C                                  __end_of___lmul 1ECC  
                                __end_of___wmul 1DF8                                _voExpectAdcValue 0055  
                                _rtAdcValueRcHi 005B                                  _rtAdcValueRcLo 005D  
                                _rtAdcValueRsHi 005F                                  _rtAdcValueVoFb 0059  
                                _rtAdcValueRsLo 0061                          ?_OSCILLATOR_Initialize 0070  
                             crc_verify@message 0026                             start_initialization 0869  
                      __size_of_PWM2_Initialize 0019                 __size_of_PIN_MANAGER_Initialize 003F  
                                 _PWM1LDCONbits 0D9F                         my_flash_system_read@buf 0071  
                       my_flash_system_read@len 0073                           __end_of_m_mem_cpy_len 1E69  
                                 _PWM2LDCONbits 0DAF                                  _getRegisterVal 0E83  
                       __size_of_calc_rs_lo_avg 0061                             __size_of_crc_append 0031  
                           __size_of_crc_verify 0037       modbus_response_write_single_register@rbuf 0035  
                                      ??___lmul 0079                                        ??___wmul 0075  
                                   __pdataBANK0 006C                                     __pdataBANK1 00CE  
                   FLASH_EraseBlock@GIEBitValue 0073                                 _ADC1_Initialize 1CEC  
                      __end_of_FLASH_EraseBlock 1E14                            _my_flash_system_read 1091  
                                   __pbssBIGRAM 235C                               __size_of_adc_init 0014  
                                   __pbssCOMMON 007C                                       ___latbits 0002  
                             getRegisterVal@t16 0078                                   __pcstackBANK0 0020  
                                 __pcstackBANK1 00D6                        __size_of_TMR2_Initialize 0013  
                       ??_my_flash_system_write 0075                          __end_of_getRegisterVal 0F7C  
                         my_flash_system_read@i 007A                      __size_of_EUSART_Initialize 0013  
       modbus_response_illgeal_function@errcode 002C                           __size_of_fvr_set_gain 0017  
                              ___lwdiv@dividend 0073                          _PIN_MANAGER_Initialize 1102  
                   modbus_response_command@rbuf 0035                                        ?___aldiv 0024  
                         get_idrv_pwm1_duty@t16 0075                                        ?___awdiv 0071  
                                      ?___lldiv 0071                                    ??_adc_sample 0076  
                                   adc_sample@i 0021                                        ?___lwdiv 0071  
                             ??_PWM1_Initialize 0071                    ??_INTERRUPT_InterruptManager 0070  
                         set_idrv_pwm1_duty@t16 0079                                       __pswtext1 1800  
                                      ?_crc_sum 0071                   my_flash_system_read@flashAddr 0078  
                    __end_of_get_vout_pwm2_duty 1DC2                           ?_my_flash_system_read 0071  
                    __end_of_set_vout_pwm2_duty 1E4C                                uart_send_len@buf 0077  
                              uart_send_len@len 0071                                   adc_sample@t16 0025  
                              ___lwdiv@quotient 0076                                   adc_sample@ret 0023  
                                 adc_sample@num 0075                                 ?_getRegisterVal 0071  
                                  _fvr_set_gain 1D47                                  _eusartRxBuffer 0140  
                                     _modbusBuf 0120                                 ___aldiv@divisor 0024  
                             ??_PWM2_Initialize 0071                              __end_of_adc_sample 132E  
                               ___aldiv@counter 002C                                  ___wmul@product 0075  
                                     _pidpwm2_U 00D0                               _pid_pwm1_idrv_run 0AA9  
                                     clear_ram0 1CF5                                  m_mem_cpy_len@d 0071  
                                m_mem_cpy_len@s 0073                                   ?_calc_temp_rc 0025  
                                 ?_calc_temp_rs 0025                                        _PIE1bits 0091  
                      __size_of_TMR2_StartTimer 0003                          set_vout_pwm2_duty@duty 0077  
           __size_of_INTERRUPT_InterruptManager 0063                              ?_pid_pwm1_idrv_run 0070  
                       __end_of_ADC1_Initialize 1CF5                                        _PIR1bits 0011  
                                      _PIR3bits 0013                       FLASH_EraseBlock@startAddr 0071  
                                      _PWM1INTE 0D9C                                        _PWM1INTF 0D9D  
                                      _PWM2INTE 0DAC                                        _PWM2INTF 0DAD  
                                      _PWM1TMRH 0D9A                                        _PWM1TMRL 0D99  
                                      _PWM2TMRH 0DAA                                        _PWM2TMRL 0DA9  
                                  ??_crc_append 0077                __size_of_modbus_response_command 00BF  
                           ??_pid_pwm1_idrv_run 0032                          __size_of_uart_send_len 0039  
                                    _ADCON0bits 009D                               ___wmul@multiplier 0071  
                                  ??_crc_verify 0078                         __size_of_FVR_Initialize 0004  
              __size_of_modbus_response_process 0054               __size_of_TMR2_SetInterruptHandler 0006  
                     ?_TMR2_SetInterruptHandler 0071                                     _isRunInBoot 0FFF  
                           _uart_received_start 1CD6                               _pid_pwm2_vout_run 151F  
                                      _HexTable 181E                               ___lmul@multiplier 0071  
                              crc_verify@crccal 002A                                  _calc_rs_lo_avg 132E  
                            ?_pid_pwm2_vout_run 0070                       __end_of_pid_pwm1_idrv_run 0C1E  
                             ??_TMR2_Initialize 0073                                  ??_calc_temp_rc 0029  
                                ??_calc_temp_rs 0029                              __end_of_crc_append 1E9A  
                             calc_rs_lo_avg@t32 0027                     __size_of_get_idrv_pwm1_duty 0019  
                   __size_of_set_idrv_pwm1_duty 001C                             ??_pid_pwm2_vout_run 0020  
                            __end_of_crc_verify 105A                                    _PWM1INTFbits 0D9D  
                          ?_uart_received_start 0070                                    _PWM2INTFbits 0DAD  
                       ??_OSCILLATOR_Initialize 0071         modbus_response_write_mult_register@rbuf 002F  
                              __size_of___aldiv 0082                                __size_of___awdiv 0051  
                              __size_of___lldiv 0053                                __size_of___lwdiv 0034  
                        ??_my_flash_system_read 0075                                        _adc_init 1D33  
                              __size_of_crc_sum 0056                           pid_pwm2_vout_run@__ei 0022  
                           _eusartRxIdleTime_ms 007C                       __end_of_pid_pwm2_vout_run 15B0  
                                 crc_append@crc 002A                                sys_data_init@ret 0034  
                               ___lwdiv@divisor 0071                                 ___lwdiv@counter 0078  
                                      __ptext10 0AA9                                        __ptext11 1E14  
                                      __ptext20 1141                                        __ptext12 1D90  
                                      __ptext21 1668                                        __ptext13 1227  
                                      __ptext30 132E                                        __ptext22 10C9  
                                      __ptext14 0C1E                                        __ptext31 11D4  
                                      __ptext23 0E83                                        __ptext15 138F  
                                      __ptext40 1D20                                        __ptext32 08B5  
                                      __ptext24 1E69                                        __ptext16 105A  
                                      __ptext41 1CCB                                        __ptext33 1E9A  
                                      __ptext25 1023                                        __ptext17 1401  
                                      __ptext42 1CDE                                        __ptext34 0F7C  
                                      __ptext26 1E4C                                        __ptext18 1000  
                                      __ptext43 1D77                                        __ptext35 12D1  
                                      __ptext27 127B                                        __ptext19 1DF8  
                                      __ptext44 1D5E                                        __ptext36 1D47  
                                      __ptext28 148F                                        __ptext45 1102  
                                      __ptext37 1D33                                        __ptext29 1727  
                                      __ptext46 0FFE                                        __ptext38 1DC2  
                                      __ptext47 1CCE                                        __ptext39 1CD2  
                                      __ptext48 1D0D                                        __ptext49 1CEC  
                        __end_of_calc_rs_lo_avg 138F                                   _uart_send_len 10C9  
                               uart_send_len@tm 0074                           get_vout_pwm2_duty@t16 0075  
                                 __size_of_main 0111                                   _subTickerX_1s 0068  
                         set_vout_pwm2_duty@t16 0079                                      _RA4PPSbits 0E94  
                         ??_uart_received_start 0071                                      _RA5PPSbits 0E95  
                              ?_ADC1_Initialize 0070                  my_flash_system_write@flashAddr 0027  
                                      int$flags 007E                                        crc_sum@i 0022  
                                      crc_sum@j 0020                                      _RC5PPSbits 0EA5  
 __end_of_modbus_response_write_single_register 0D72  __size_of_modbus_response_write_single_register 0154  
       ??_modbus_response_write_single_register 002C          ?_modbus_response_write_single_register 0070  
         _modbus_response_write_single_register 0C1E                               ??_TMR2_StartTimer 0071  
            __end_of_INTERRUPT_InterruptManager 0867                      _INTERRUPT_InterruptManager 0804  
                         __end_of_sys_data_init 1668                           __end_of_sys_data_save 1091  
                             ?_FLASH_EraseBlock 0071                   calc_expect_vout_adc_value@t32 0042  
                   PIN_MANAGER_Initialize@state 0071                        modbus_response_command@i 0032  
                            ??_FLASH_EraseBlock 0073                                      _INTCONbits 000B  
                                   _PWM1CONbits 0D9B                                m_mem_cpy_len@len 0075  
                                    _FVRCONbits 0117                                     _PWM2CONbits 0DAB  
                               ?_calc_rs_lo_avg 0025                    modbus_response_process@pmdbs 003C  
                       __size_of_WDT_Initialize 0004                                  ?_uart_send_len 0071  
                                      intlevel1 0000                  __size_of_my_flash_system_write 008E  
                          pid_pwm2_vout_run@t16 0024                   __end_of_my_flash_system_write 148F  
                    __size_of_pid_pwm1_idrv_run 0175                                      _PMCON1bits 0195  
                              ___lldiv@dividend 0075                         ?_PIN_MANAGER_Initialize 0070  
  modbus_response_write_mult_register@startAddr 002D                                  uart_send_len@i 0076  
                                   _PPSLOCKbits 0E0F                                 _PWM1_Initialize 1D5E  
                  modbus_response_command@pmdbs 0033                         _modbus_response_command 1668  
                                    _PWM1CLKCON 0D9E                                      _PWM2CLKCON 0DAE  
                        __size_of_m_mem_cpy_len 001D                                   __pstringtext1 181E  
                                _FVR_Initialize 1CCE                         _modbus_response_process 1227  
                                sys_data_init@i 0036                                     crc_append@n 0028  
                          __end_of_calc_temp_rc 1800                            __end_of_calc_temp_rs 151F  
                              ___lldiv@quotient 0020                                ??_getRegisterVal 0074  
                               _PWM2_Initialize 1D77                      __size_of_pid_pwm2_vout_run 0091  
                                  ___aldiv@sign 002D                     calc_expect_vout_adc_value@i 0046  
                   calc_expect_vout_adc_value@x 0032             __size_of_calc_expect_vout_adc_value 01F4  
                __end_of_PIN_MANAGER_Initialize 1141                              _get_vout_pwm2_duty 1DA9  
                            _set_vout_pwm2_duty 1E30                           _TMR2_InterruptHandler 0063  
                                   crc_verify@n 0028                             ?_get_vout_pwm2_duty 0071  
                           ?_set_vout_pwm2_duty 0077  
