

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Tue Apr 09 20:05:11 2019

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16F1575
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	swtext1,local,class=CONST,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    55                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	intentry,global,class=CODE,delta=2
    72                           	dabs	1,0x620,32
    73                           	dabs	1,0x5A0,80
    74                           	dabs	1,0x55C,20
    75                           	dabs	1,0xFFF,1,_isRunInBoot
    76                           	dabs	1,0x235C,0,_sysData
    77                           	dabs	1,0x7E,2
    78  0000                     
    79                           ; Version 2.00
    80                           ; Generated 27/05/2018 GMT
    81                           ; 
    82                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution.
    96                           ; 
    97                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    98                           ;        software without specific prior written permission.
    99                           ; 
   100                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   101                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   102                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   103                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   104                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   105                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   106                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   107                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   108                           ; 
   109                           ; 
   110                           ; Code-generator required, PIC16F1575 Definitions
   111                           ; 
   112                           ; SFR Addresses
   113  0000                     	;# 
   114  0001                     	;# 
   115  0002                     	;# 
   116  0003                     	;# 
   117  0004                     	;# 
   118  0005                     	;# 
   119  0006                     	;# 
   120  0007                     	;# 
   121  0008                     	;# 
   122  0009                     	;# 
   123  000A                     	;# 
   124  000B                     	;# 
   125  000C                     	;# 
   126  000E                     	;# 
   127  0011                     	;# 
   128  0012                     	;# 
   129  0013                     	;# 
   130  0015                     	;# 
   131  0016                     	;# 
   132  0016                     	;# 
   133  0017                     	;# 
   134  0018                     	;# 
   135  0019                     	;# 
   136  001A                     	;# 
   137  001B                     	;# 
   138  001C                     	;# 
   139  008C                     	;# 
   140  008E                     	;# 
   141  0091                     	;# 
   142  0092                     	;# 
   143  0093                     	;# 
   144  0095                     	;# 
   145  0096                     	;# 
   146  0097                     	;# 
   147  0098                     	;# 
   148  0099                     	;# 
   149  009A                     	;# 
   150  009B                     	;# 
   151  009B                     	;# 
   152  009C                     	;# 
   153  009D                     	;# 
   154  009E                     	;# 
   155  009F                     	;# 
   156  010C                     	;# 
   157  010E                     	;# 
   158  0111                     	;# 
   159  0112                     	;# 
   160  0113                     	;# 
   161  0114                     	;# 
   162  0115                     	;# 
   163  0116                     	;# 
   164  0117                     	;# 
   165  0118                     	;# 
   166  0119                     	;# 
   167  018C                     	;# 
   168  018E                     	;# 
   169  0191                     	;# 
   170  0191                     	;# 
   171  0192                     	;# 
   172  0193                     	;# 
   173  0193                     	;# 
   174  0194                     	;# 
   175  0195                     	;# 
   176  0196                     	;# 
   177  0197                     	;# 
   178  0199                     	;# 
   179  019A                     	;# 
   180  019B                     	;# 
   181  019B                     	;# 
   182  019C                     	;# 
   183  019D                     	;# 
   184  019E                     	;# 
   185  019F                     	;# 
   186  020C                     	;# 
   187  020E                     	;# 
   188  028C                     	;# 
   189  028E                     	;# 
   190  030C                     	;# 
   191  030E                     	;# 
   192  038C                     	;# 
   193  038E                     	;# 
   194  0391                     	;# 
   195  0392                     	;# 
   196  0393                     	;# 
   197  0397                     	;# 
   198  0398                     	;# 
   199  0399                     	;# 
   200  0691                     	;# 
   201  0692                     	;# 
   202  0693                     	;# 
   203  0694                     	;# 
   204  0695                     	;# 
   205  0D8E                     	;# 
   206  0D8F                     	;# 
   207  0D90                     	;# 
   208  0D91                     	;# 
   209  0D91                     	;# 
   210  0D92                     	;# 
   211  0D93                     	;# 
   212  0D93                     	;# 
   213  0D94                     	;# 
   214  0D95                     	;# 
   215  0D95                     	;# 
   216  0D96                     	;# 
   217  0D97                     	;# 
   218  0D97                     	;# 
   219  0D98                     	;# 
   220  0D99                     	;# 
   221  0D99                     	;# 
   222  0D9A                     	;# 
   223  0D9B                     	;# 
   224  0D9C                     	;# 
   225  0D9C                     	;# 
   226  0D9D                     	;# 
   227  0D9D                     	;# 
   228  0D9E                     	;# 
   229  0D9F                     	;# 
   230  0DA0                     	;# 
   231  0DA1                     	;# 
   232  0DA1                     	;# 
   233  0DA2                     	;# 
   234  0DA3                     	;# 
   235  0DA3                     	;# 
   236  0DA4                     	;# 
   237  0DA5                     	;# 
   238  0DA5                     	;# 
   239  0DA6                     	;# 
   240  0DA7                     	;# 
   241  0DA7                     	;# 
   242  0DA8                     	;# 
   243  0DA9                     	;# 
   244  0DA9                     	;# 
   245  0DAA                     	;# 
   246  0DAB                     	;# 
   247  0DAC                     	;# 
   248  0DAC                     	;# 
   249  0DAD                     	;# 
   250  0DAD                     	;# 
   251  0DAE                     	;# 
   252  0DAF                     	;# 
   253  0DB0                     	;# 
   254  0DB1                     	;# 
   255  0DB1                     	;# 
   256  0DB2                     	;# 
   257  0DB3                     	;# 
   258  0DB3                     	;# 
   259  0DB4                     	;# 
   260  0DB5                     	;# 
   261  0DB5                     	;# 
   262  0DB6                     	;# 
   263  0DB7                     	;# 
   264  0DB7                     	;# 
   265  0DB8                     	;# 
   266  0DB9                     	;# 
   267  0DB9                     	;# 
   268  0DBA                     	;# 
   269  0DBB                     	;# 
   270  0DBC                     	;# 
   271  0DBC                     	;# 
   272  0DBD                     	;# 
   273  0DBD                     	;# 
   274  0DBE                     	;# 
   275  0DBF                     	;# 
   276  0DC0                     	;# 
   277  0DC1                     	;# 
   278  0DC1                     	;# 
   279  0DC2                     	;# 
   280  0DC3                     	;# 
   281  0DC3                     	;# 
   282  0DC4                     	;# 
   283  0DC5                     	;# 
   284  0DC5                     	;# 
   285  0DC6                     	;# 
   286  0DC7                     	;# 
   287  0DC7                     	;# 
   288  0DC8                     	;# 
   289  0DC9                     	;# 
   290  0DC9                     	;# 
   291  0DCA                     	;# 
   292  0DCB                     	;# 
   293  0DCC                     	;# 
   294  0DCC                     	;# 
   295  0DCD                     	;# 
   296  0DCD                     	;# 
   297  0DCE                     	;# 
   298  0DCF                     	;# 
   299  0DD0                     	;# 
   300  0E0F                     	;# 
   301  0E10                     	;# 
   302  0E11                     	;# 
   303  0E12                     	;# 
   304  0E13                     	;# 
   305  0E14                     	;# 
   306  0E15                     	;# 
   307  0E16                     	;# 
   308  0E17                     	;# 
   309  0E90                     	;# 
   310  0E91                     	;# 
   311  0E92                     	;# 
   312  0E94                     	;# 
   313  0E95                     	;# 
   314  0EA0                     	;# 
   315  0EA1                     	;# 
   316  0EA2                     	;# 
   317  0EA3                     	;# 
   318  0EA4                     	;# 
   319  0EA5                     	;# 
   320  0FE4                     	;# 
   321  0FE5                     	;# 
   322  0FE6                     	;# 
   323  0FE7                     	;# 
   324  0FE8                     	;# 
   325  0FE8                     	;# 
   326  0FE9                     	;# 
   327  0FEA                     	;# 
   328  0FEA                     	;# 
   329  0FEB                     	;# 
   330  0FED                     	;# 
   331  0FEE                     	;# 
   332  0FEE                     	;# 
   333  0FEF                     	;# 
   334  0000                     	;# 
   335  0001                     	;# 
   336  0002                     	;# 
   337  0003                     	;# 
   338  0004                     	;# 
   339  0005                     	;# 
   340  0006                     	;# 
   341  0007                     	;# 
   342  0008                     	;# 
   343  0009                     	;# 
   344  000A                     	;# 
   345  000B                     	;# 
   346  000C                     	;# 
   347  000E                     	;# 
   348  0011                     	;# 
   349  0012                     	;# 
   350  0013                     	;# 
   351  0015                     	;# 
   352  0016                     	;# 
   353  0016                     	;# 
   354  0017                     	;# 
   355  0018                     	;# 
   356  0019                     	;# 
   357  001A                     	;# 
   358  001B                     	;# 
   359  001C                     	;# 
   360  008C                     	;# 
   361  008E                     	;# 
   362  0091                     	;# 
   363  0092                     	;# 
   364  0093                     	;# 
   365  0095                     	;# 
   366  0096                     	;# 
   367  0097                     	;# 
   368  0098                     	;# 
   369  0099                     	;# 
   370  009A                     	;# 
   371  009B                     	;# 
   372  009B                     	;# 
   373  009C                     	;# 
   374  009D                     	;# 
   375  009E                     	;# 
   376  009F                     	;# 
   377  010C                     	;# 
   378  010E                     	;# 
   379  0111                     	;# 
   380  0112                     	;# 
   381  0113                     	;# 
   382  0114                     	;# 
   383  0115                     	;# 
   384  0116                     	;# 
   385  0117                     	;# 
   386  0118                     	;# 
   387  0119                     	;# 
   388  018C                     	;# 
   389  018E                     	;# 
   390  0191                     	;# 
   391  0191                     	;# 
   392  0192                     	;# 
   393  0193                     	;# 
   394  0193                     	;# 
   395  0194                     	;# 
   396  0195                     	;# 
   397  0196                     	;# 
   398  0197                     	;# 
   399  0199                     	;# 
   400  019A                     	;# 
   401  019B                     	;# 
   402  019B                     	;# 
   403  019C                     	;# 
   404  019D                     	;# 
   405  019E                     	;# 
   406  019F                     	;# 
   407  020C                     	;# 
   408  020E                     	;# 
   409  028C                     	;# 
   410  028E                     	;# 
   411  030C                     	;# 
   412  030E                     	;# 
   413  038C                     	;# 
   414  038E                     	;# 
   415  0391                     	;# 
   416  0392                     	;# 
   417  0393                     	;# 
   418  0397                     	;# 
   419  0398                     	;# 
   420  0399                     	;# 
   421  0691                     	;# 
   422  0692                     	;# 
   423  0693                     	;# 
   424  0694                     	;# 
   425  0695                     	;# 
   426  0D8E                     	;# 
   427  0D8F                     	;# 
   428  0D90                     	;# 
   429  0D91                     	;# 
   430  0D91                     	;# 
   431  0D92                     	;# 
   432  0D93                     	;# 
   433  0D93                     	;# 
   434  0D94                     	;# 
   435  0D95                     	;# 
   436  0D95                     	;# 
   437  0D96                     	;# 
   438  0D97                     	;# 
   439  0D97                     	;# 
   440  0D98                     	;# 
   441  0D99                     	;# 
   442  0D99                     	;# 
   443  0D9A                     	;# 
   444  0D9B                     	;# 
   445  0D9C                     	;# 
   446  0D9C                     	;# 
   447  0D9D                     	;# 
   448  0D9D                     	;# 
   449  0D9E                     	;# 
   450  0D9F                     	;# 
   451  0DA0                     	;# 
   452  0DA1                     	;# 
   453  0DA1                     	;# 
   454  0DA2                     	;# 
   455  0DA3                     	;# 
   456  0DA3                     	;# 
   457  0DA4                     	;# 
   458  0DA5                     	;# 
   459  0DA5                     	;# 
   460  0DA6                     	;# 
   461  0DA7                     	;# 
   462  0DA7                     	;# 
   463  0DA8                     	;# 
   464  0DA9                     	;# 
   465  0DA9                     	;# 
   466  0DAA                     	;# 
   467  0DAB                     	;# 
   468  0DAC                     	;# 
   469  0DAC                     	;# 
   470  0DAD                     	;# 
   471  0DAD                     	;# 
   472  0DAE                     	;# 
   473  0DAF                     	;# 
   474  0DB0                     	;# 
   475  0DB1                     	;# 
   476  0DB1                     	;# 
   477  0DB2                     	;# 
   478  0DB3                     	;# 
   479  0DB3                     	;# 
   480  0DB4                     	;# 
   481  0DB5                     	;# 
   482  0DB5                     	;# 
   483  0DB6                     	;# 
   484  0DB7                     	;# 
   485  0DB7                     	;# 
   486  0DB8                     	;# 
   487  0DB9                     	;# 
   488  0DB9                     	;# 
   489  0DBA                     	;# 
   490  0DBB                     	;# 
   491  0DBC                     	;# 
   492  0DBC                     	;# 
   493  0DBD                     	;# 
   494  0DBD                     	;# 
   495  0DBE                     	;# 
   496  0DBF                     	;# 
   497  0DC0                     	;# 
   498  0DC1                     	;# 
   499  0DC1                     	;# 
   500  0DC2                     	;# 
   501  0DC3                     	;# 
   502  0DC3                     	;# 
   503  0DC4                     	;# 
   504  0DC5                     	;# 
   505  0DC5                     	;# 
   506  0DC6                     	;# 
   507  0DC7                     	;# 
   508  0DC7                     	;# 
   509  0DC8                     	;# 
   510  0DC9                     	;# 
   511  0DC9                     	;# 
   512  0DCA                     	;# 
   513  0DCB                     	;# 
   514  0DCC                     	;# 
   515  0DCC                     	;# 
   516  0DCD                     	;# 
   517  0DCD                     	;# 
   518  0DCE                     	;# 
   519  0DCF                     	;# 
   520  0DD0                     	;# 
   521  0E0F                     	;# 
   522  0E10                     	;# 
   523  0E11                     	;# 
   524  0E12                     	;# 
   525  0E13                     	;# 
   526  0E14                     	;# 
   527  0E15                     	;# 
   528  0E16                     	;# 
   529  0E17                     	;# 
   530  0E90                     	;# 
   531  0E91                     	;# 
   532  0E92                     	;# 
   533  0E94                     	;# 
   534  0E95                     	;# 
   535  0EA0                     	;# 
   536  0EA1                     	;# 
   537  0EA2                     	;# 
   538  0EA3                     	;# 
   539  0EA4                     	;# 
   540  0EA5                     	;# 
   541  0FE4                     	;# 
   542  0FE5                     	;# 
   543  0FE6                     	;# 
   544  0FE7                     	;# 
   545  0FE8                     	;# 
   546  0FE8                     	;# 
   547  0FE9                     	;# 
   548  0FEA                     	;# 
   549  0FEA                     	;# 
   550  0FEB                     	;# 
   551  0FED                     	;# 
   552  0FEE                     	;# 
   553  0FEE                     	;# 
   554  0FEF                     	;# 
   555  0000                     	;# 
   556  0001                     	;# 
   557  0002                     	;# 
   558  0003                     	;# 
   559  0004                     	;# 
   560  0005                     	;# 
   561  0006                     	;# 
   562  0007                     	;# 
   563  0008                     	;# 
   564  0009                     	;# 
   565  000A                     	;# 
   566  000B                     	;# 
   567  000C                     	;# 
   568  000E                     	;# 
   569  0011                     	;# 
   570  0012                     	;# 
   571  0013                     	;# 
   572  0015                     	;# 
   573  0016                     	;# 
   574  0016                     	;# 
   575  0017                     	;# 
   576  0018                     	;# 
   577  0019                     	;# 
   578  001A                     	;# 
   579  001B                     	;# 
   580  001C                     	;# 
   581  008C                     	;# 
   582  008E                     	;# 
   583  0091                     	;# 
   584  0092                     	;# 
   585  0093                     	;# 
   586  0095                     	;# 
   587  0096                     	;# 
   588  0097                     	;# 
   589  0098                     	;# 
   590  0099                     	;# 
   591  009A                     	;# 
   592  009B                     	;# 
   593  009B                     	;# 
   594  009C                     	;# 
   595  009D                     	;# 
   596  009E                     	;# 
   597  009F                     	;# 
   598  010C                     	;# 
   599  010E                     	;# 
   600  0111                     	;# 
   601  0112                     	;# 
   602  0113                     	;# 
   603  0114                     	;# 
   604  0115                     	;# 
   605  0116                     	;# 
   606  0117                     	;# 
   607  0118                     	;# 
   608  0119                     	;# 
   609  018C                     	;# 
   610  018E                     	;# 
   611  0191                     	;# 
   612  0191                     	;# 
   613  0192                     	;# 
   614  0193                     	;# 
   615  0193                     	;# 
   616  0194                     	;# 
   617  0195                     	;# 
   618  0196                     	;# 
   619  0197                     	;# 
   620  0199                     	;# 
   621  019A                     	;# 
   622  019B                     	;# 
   623  019B                     	;# 
   624  019C                     	;# 
   625  019D                     	;# 
   626  019E                     	;# 
   627  019F                     	;# 
   628  020C                     	;# 
   629  020E                     	;# 
   630  028C                     	;# 
   631  028E                     	;# 
   632  030C                     	;# 
   633  030E                     	;# 
   634  038C                     	;# 
   635  038E                     	;# 
   636  0391                     	;# 
   637  0392                     	;# 
   638  0393                     	;# 
   639  0397                     	;# 
   640  0398                     	;# 
   641  0399                     	;# 
   642  0691                     	;# 
   643  0692                     	;# 
   644  0693                     	;# 
   645  0694                     	;# 
   646  0695                     	;# 
   647  0D8E                     	;# 
   648  0D8F                     	;# 
   649  0D90                     	;# 
   650  0D91                     	;# 
   651  0D91                     	;# 
   652  0D92                     	;# 
   653  0D93                     	;# 
   654  0D93                     	;# 
   655  0D94                     	;# 
   656  0D95                     	;# 
   657  0D95                     	;# 
   658  0D96                     	;# 
   659  0D97                     	;# 
   660  0D97                     	;# 
   661  0D98                     	;# 
   662  0D99                     	;# 
   663  0D99                     	;# 
   664  0D9A                     	;# 
   665  0D9B                     	;# 
   666  0D9C                     	;# 
   667  0D9C                     	;# 
   668  0D9D                     	;# 
   669  0D9D                     	;# 
   670  0D9E                     	;# 
   671  0D9F                     	;# 
   672  0DA0                     	;# 
   673  0DA1                     	;# 
   674  0DA1                     	;# 
   675  0DA2                     	;# 
   676  0DA3                     	;# 
   677  0DA3                     	;# 
   678  0DA4                     	;# 
   679  0DA5                     	;# 
   680  0DA5                     	;# 
   681  0DA6                     	;# 
   682  0DA7                     	;# 
   683  0DA7                     	;# 
   684  0DA8                     	;# 
   685  0DA9                     	;# 
   686  0DA9                     	;# 
   687  0DAA                     	;# 
   688  0DAB                     	;# 
   689  0DAC                     	;# 
   690  0DAC                     	;# 
   691  0DAD                     	;# 
   692  0DAD                     	;# 
   693  0DAE                     	;# 
   694  0DAF                     	;# 
   695  0DB0                     	;# 
   696  0DB1                     	;# 
   697  0DB1                     	;# 
   698  0DB2                     	;# 
   699  0DB3                     	;# 
   700  0DB3                     	;# 
   701  0DB4                     	;# 
   702  0DB5                     	;# 
   703  0DB5                     	;# 
   704  0DB6                     	;# 
   705  0DB7                     	;# 
   706  0DB7                     	;# 
   707  0DB8                     	;# 
   708  0DB9                     	;# 
   709  0DB9                     	;# 
   710  0DBA                     	;# 
   711  0DBB                     	;# 
   712  0DBC                     	;# 
   713  0DBC                     	;# 
   714  0DBD                     	;# 
   715  0DBD                     	;# 
   716  0DBE                     	;# 
   717  0DBF                     	;# 
   718  0DC0                     	;# 
   719  0DC1                     	;# 
   720  0DC1                     	;# 
   721  0DC2                     	;# 
   722  0DC3                     	;# 
   723  0DC3                     	;# 
   724  0DC4                     	;# 
   725  0DC5                     	;# 
   726  0DC5                     	;# 
   727  0DC6                     	;# 
   728  0DC7                     	;# 
   729  0DC7                     	;# 
   730  0DC8                     	;# 
   731  0DC9                     	;# 
   732  0DC9                     	;# 
   733  0DCA                     	;# 
   734  0DCB                     	;# 
   735  0DCC                     	;# 
   736  0DCC                     	;# 
   737  0DCD                     	;# 
   738  0DCD                     	;# 
   739  0DCE                     	;# 
   740  0DCF                     	;# 
   741  0DD0                     	;# 
   742  0E0F                     	;# 
   743  0E10                     	;# 
   744  0E11                     	;# 
   745  0E12                     	;# 
   746  0E13                     	;# 
   747  0E14                     	;# 
   748  0E15                     	;# 
   749  0E16                     	;# 
   750  0E17                     	;# 
   751  0E90                     	;# 
   752  0E91                     	;# 
   753  0E92                     	;# 
   754  0E94                     	;# 
   755  0E95                     	;# 
   756  0EA0                     	;# 
   757  0EA1                     	;# 
   758  0EA2                     	;# 
   759  0EA3                     	;# 
   760  0EA4                     	;# 
   761  0EA5                     	;# 
   762  0FE4                     	;# 
   763  0FE5                     	;# 
   764  0FE6                     	;# 
   765  0FE7                     	;# 
   766  0FE8                     	;# 
   767  0FE8                     	;# 
   768  0FE9                     	;# 
   769  0FEA                     	;# 
   770  0FEA                     	;# 
   771  0FEB                     	;# 
   772  0FED                     	;# 
   773  0FEE                     	;# 
   774  0FEE                     	;# 
   775  0FEF                     	;# 
   776  0000                     	;# 
   777  0001                     	;# 
   778  0002                     	;# 
   779  0003                     	;# 
   780  0004                     	;# 
   781  0005                     	;# 
   782  0006                     	;# 
   783  0007                     	;# 
   784  0008                     	;# 
   785  0009                     	;# 
   786  000A                     	;# 
   787  000B                     	;# 
   788  000C                     	;# 
   789  000E                     	;# 
   790  0011                     	;# 
   791  0012                     	;# 
   792  0013                     	;# 
   793  0015                     	;# 
   794  0016                     	;# 
   795  0016                     	;# 
   796  0017                     	;# 
   797  0018                     	;# 
   798  0019                     	;# 
   799  001A                     	;# 
   800  001B                     	;# 
   801  001C                     	;# 
   802  008C                     	;# 
   803  008E                     	;# 
   804  0091                     	;# 
   805  0092                     	;# 
   806  0093                     	;# 
   807  0095                     	;# 
   808  0096                     	;# 
   809  0097                     	;# 
   810  0098                     	;# 
   811  0099                     	;# 
   812  009A                     	;# 
   813  009B                     	;# 
   814  009B                     	;# 
   815  009C                     	;# 
   816  009D                     	;# 
   817  009E                     	;# 
   818  009F                     	;# 
   819  010C                     	;# 
   820  010E                     	;# 
   821  0111                     	;# 
   822  0112                     	;# 
   823  0113                     	;# 
   824  0114                     	;# 
   825  0115                     	;# 
   826  0116                     	;# 
   827  0117                     	;# 
   828  0118                     	;# 
   829  0119                     	;# 
   830  018C                     	;# 
   831  018E                     	;# 
   832  0191                     	;# 
   833  0191                     	;# 
   834  0192                     	;# 
   835  0193                     	;# 
   836  0193                     	;# 
   837  0194                     	;# 
   838  0195                     	;# 
   839  0196                     	;# 
   840  0197                     	;# 
   841  0199                     	;# 
   842  019A                     	;# 
   843  019B                     	;# 
   844  019B                     	;# 
   845  019C                     	;# 
   846  019D                     	;# 
   847  019E                     	;# 
   848  019F                     	;# 
   849  020C                     	;# 
   850  020E                     	;# 
   851  028C                     	;# 
   852  028E                     	;# 
   853  030C                     	;# 
   854  030E                     	;# 
   855  038C                     	;# 
   856  038E                     	;# 
   857  0391                     	;# 
   858  0392                     	;# 
   859  0393                     	;# 
   860  0397                     	;# 
   861  0398                     	;# 
   862  0399                     	;# 
   863  0691                     	;# 
   864  0692                     	;# 
   865  0693                     	;# 
   866  0694                     	;# 
   867  0695                     	;# 
   868  0D8E                     	;# 
   869  0D8F                     	;# 
   870  0D90                     	;# 
   871  0D91                     	;# 
   872  0D91                     	;# 
   873  0D92                     	;# 
   874  0D93                     	;# 
   875  0D93                     	;# 
   876  0D94                     	;# 
   877  0D95                     	;# 
   878  0D95                     	;# 
   879  0D96                     	;# 
   880  0D97                     	;# 
   881  0D97                     	;# 
   882  0D98                     	;# 
   883  0D99                     	;# 
   884  0D99                     	;# 
   885  0D9A                     	;# 
   886  0D9B                     	;# 
   887  0D9C                     	;# 
   888  0D9C                     	;# 
   889  0D9D                     	;# 
   890  0D9D                     	;# 
   891  0D9E                     	;# 
   892  0D9F                     	;# 
   893  0DA0                     	;# 
   894  0DA1                     	;# 
   895  0DA1                     	;# 
   896  0DA2                     	;# 
   897  0DA3                     	;# 
   898  0DA3                     	;# 
   899  0DA4                     	;# 
   900  0DA5                     	;# 
   901  0DA5                     	;# 
   902  0DA6                     	;# 
   903  0DA7                     	;# 
   904  0DA7                     	;# 
   905  0DA8                     	;# 
   906  0DA9                     	;# 
   907  0DA9                     	;# 
   908  0DAA                     	;# 
   909  0DAB                     	;# 
   910  0DAC                     	;# 
   911  0DAC                     	;# 
   912  0DAD                     	;# 
   913  0DAD                     	;# 
   914  0DAE                     	;# 
   915  0DAF                     	;# 
   916  0DB0                     	;# 
   917  0DB1                     	;# 
   918  0DB1                     	;# 
   919  0DB2                     	;# 
   920  0DB3                     	;# 
   921  0DB3                     	;# 
   922  0DB4                     	;# 
   923  0DB5                     	;# 
   924  0DB5                     	;# 
   925  0DB6                     	;# 
   926  0DB7                     	;# 
   927  0DB7                     	;# 
   928  0DB8                     	;# 
   929  0DB9                     	;# 
   930  0DB9                     	;# 
   931  0DBA                     	;# 
   932  0DBB                     	;# 
   933  0DBC                     	;# 
   934  0DBC                     	;# 
   935  0DBD                     	;# 
   936  0DBD                     	;# 
   937  0DBE                     	;# 
   938  0DBF                     	;# 
   939  0DC0                     	;# 
   940  0DC1                     	;# 
   941  0DC1                     	;# 
   942  0DC2                     	;# 
   943  0DC3                     	;# 
   944  0DC3                     	;# 
   945  0DC4                     	;# 
   946  0DC5                     	;# 
   947  0DC5                     	;# 
   948  0DC6                     	;# 
   949  0DC7                     	;# 
   950  0DC7                     	;# 
   951  0DC8                     	;# 
   952  0DC9                     	;# 
   953  0DC9                     	;# 
   954  0DCA                     	;# 
   955  0DCB                     	;# 
   956  0DCC                     	;# 
   957  0DCC                     	;# 
   958  0DCD                     	;# 
   959  0DCD                     	;# 
   960  0DCE                     	;# 
   961  0DCF                     	;# 
   962  0DD0                     	;# 
   963  0E0F                     	;# 
   964  0E10                     	;# 
   965  0E11                     	;# 
   966  0E12                     	;# 
   967  0E13                     	;# 
   968  0E14                     	;# 
   969  0E15                     	;# 
   970  0E16                     	;# 
   971  0E17                     	;# 
   972  0E90                     	;# 
   973  0E91                     	;# 
   974  0E92                     	;# 
   975  0E94                     	;# 
   976  0E95                     	;# 
   977  0EA0                     	;# 
   978  0EA1                     	;# 
   979  0EA2                     	;# 
   980  0EA3                     	;# 
   981  0EA4                     	;# 
   982  0EA5                     	;# 
   983  0FE4                     	;# 
   984  0FE5                     	;# 
   985  0FE6                     	;# 
   986  0FE7                     	;# 
   987  0FE8                     	;# 
   988  0FE8                     	;# 
   989  0FE9                     	;# 
   990  0FEA                     	;# 
   991  0FEA                     	;# 
   992  0FEB                     	;# 
   993  0FED                     	;# 
   994  0FEE                     	;# 
   995  0FEE                     	;# 
   996  0FEF                     	;# 
   997  0000                     	;# 
   998  0001                     	;# 
   999  0002                     	;# 
  1000  0003                     	;# 
  1001  0004                     	;# 
  1002  0005                     	;# 
  1003  0006                     	;# 
  1004  0007                     	;# 
  1005  0008                     	;# 
  1006  0009                     	;# 
  1007  000A                     	;# 
  1008  000B                     	;# 
  1009  000C                     	;# 
  1010  000E                     	;# 
  1011  0011                     	;# 
  1012  0012                     	;# 
  1013  0013                     	;# 
  1014  0015                     	;# 
  1015  0016                     	;# 
  1016  0016                     	;# 
  1017  0017                     	;# 
  1018  0018                     	;# 
  1019  0019                     	;# 
  1020  001A                     	;# 
  1021  001B                     	;# 
  1022  001C                     	;# 
  1023  008C                     	;# 
  1024  008E                     	;# 
  1025  0091                     	;# 
  1026  0092                     	;# 
  1027  0093                     	;# 
  1028  0095                     	;# 
  1029  0096                     	;# 
  1030  0097                     	;# 
  1031  0098                     	;# 
  1032  0099                     	;# 
  1033  009A                     	;# 
  1034  009B                     	;# 
  1035  009B                     	;# 
  1036  009C                     	;# 
  1037  009D                     	;# 
  1038  009E                     	;# 
  1039  009F                     	;# 
  1040  010C                     	;# 
  1041  010E                     	;# 
  1042  0111                     	;# 
  1043  0112                     	;# 
  1044  0113                     	;# 
  1045  0114                     	;# 
  1046  0115                     	;# 
  1047  0116                     	;# 
  1048  0117                     	;# 
  1049  0118                     	;# 
  1050  0119                     	;# 
  1051  018C                     	;# 
  1052  018E                     	;# 
  1053  0191                     	;# 
  1054  0191                     	;# 
  1055  0192                     	;# 
  1056  0193                     	;# 
  1057  0193                     	;# 
  1058  0194                     	;# 
  1059  0195                     	;# 
  1060  0196                     	;# 
  1061  0197                     	;# 
  1062  0199                     	;# 
  1063  019A                     	;# 
  1064  019B                     	;# 
  1065  019B                     	;# 
  1066  019C                     	;# 
  1067  019D                     	;# 
  1068  019E                     	;# 
  1069  019F                     	;# 
  1070  020C                     	;# 
  1071  020E                     	;# 
  1072  028C                     	;# 
  1073  028E                     	;# 
  1074  030C                     	;# 
  1075  030E                     	;# 
  1076  038C                     	;# 
  1077  038E                     	;# 
  1078  0391                     	;# 
  1079  0392                     	;# 
  1080  0393                     	;# 
  1081  0397                     	;# 
  1082  0398                     	;# 
  1083  0399                     	;# 
  1084  0691                     	;# 
  1085  0692                     	;# 
  1086  0693                     	;# 
  1087  0694                     	;# 
  1088  0695                     	;# 
  1089  0D8E                     	;# 
  1090  0D8F                     	;# 
  1091  0D90                     	;# 
  1092  0D91                     	;# 
  1093  0D91                     	;# 
  1094  0D92                     	;# 
  1095  0D93                     	;# 
  1096  0D93                     	;# 
  1097  0D94                     	;# 
  1098  0D95                     	;# 
  1099  0D95                     	;# 
  1100  0D96                     	;# 
  1101  0D97                     	;# 
  1102  0D97                     	;# 
  1103  0D98                     	;# 
  1104  0D99                     	;# 
  1105  0D99                     	;# 
  1106  0D9A                     	;# 
  1107  0D9B                     	;# 
  1108  0D9C                     	;# 
  1109  0D9C                     	;# 
  1110  0D9D                     	;# 
  1111  0D9D                     	;# 
  1112  0D9E                     	;# 
  1113  0D9F                     	;# 
  1114  0DA0                     	;# 
  1115  0DA1                     	;# 
  1116  0DA1                     	;# 
  1117  0DA2                     	;# 
  1118  0DA3                     	;# 
  1119  0DA3                     	;# 
  1120  0DA4                     	;# 
  1121  0DA5                     	;# 
  1122  0DA5                     	;# 
  1123  0DA6                     	;# 
  1124  0DA7                     	;# 
  1125  0DA7                     	;# 
  1126  0DA8                     	;# 
  1127  0DA9                     	;# 
  1128  0DA9                     	;# 
  1129  0DAA                     	;# 
  1130  0DAB                     	;# 
  1131  0DAC                     	;# 
  1132  0DAC                     	;# 
  1133  0DAD                     	;# 
  1134  0DAD                     	;# 
  1135  0DAE                     	;# 
  1136  0DAF                     	;# 
  1137  0DB0                     	;# 
  1138  0DB1                     	;# 
  1139  0DB1                     	;# 
  1140  0DB2                     	;# 
  1141  0DB3                     	;# 
  1142  0DB3                     	;# 
  1143  0DB4                     	;# 
  1144  0DB5                     	;# 
  1145  0DB5                     	;# 
  1146  0DB6                     	;# 
  1147  0DB7                     	;# 
  1148  0DB7                     	;# 
  1149  0DB8                     	;# 
  1150  0DB9                     	;# 
  1151  0DB9                     	;# 
  1152  0DBA                     	;# 
  1153  0DBB                     	;# 
  1154  0DBC                     	;# 
  1155  0DBC                     	;# 
  1156  0DBD                     	;# 
  1157  0DBD                     	;# 
  1158  0DBE                     	;# 
  1159  0DBF                     	;# 
  1160  0DC0                     	;# 
  1161  0DC1                     	;# 
  1162  0DC1                     	;# 
  1163  0DC2                     	;# 
  1164  0DC3                     	;# 
  1165  0DC3                     	;# 
  1166  0DC4                     	;# 
  1167  0DC5                     	;# 
  1168  0DC5                     	;# 
  1169  0DC6                     	;# 
  1170  0DC7                     	;# 
  1171  0DC7                     	;# 
  1172  0DC8                     	;# 
  1173  0DC9                     	;# 
  1174  0DC9                     	;# 
  1175  0DCA                     	;# 
  1176  0DCB                     	;# 
  1177  0DCC                     	;# 
  1178  0DCC                     	;# 
  1179  0DCD                     	;# 
  1180  0DCD                     	;# 
  1181  0DCE                     	;# 
  1182  0DCF                     	;# 
  1183  0DD0                     	;# 
  1184  0E0F                     	;# 
  1185  0E10                     	;# 
  1186  0E11                     	;# 
  1187  0E12                     	;# 
  1188  0E13                     	;# 
  1189  0E14                     	;# 
  1190  0E15                     	;# 
  1191  0E16                     	;# 
  1192  0E17                     	;# 
  1193  0E90                     	;# 
  1194  0E91                     	;# 
  1195  0E92                     	;# 
  1196  0E94                     	;# 
  1197  0E95                     	;# 
  1198  0EA0                     	;# 
  1199  0EA1                     	;# 
  1200  0EA2                     	;# 
  1201  0EA3                     	;# 
  1202  0EA4                     	;# 
  1203  0EA5                     	;# 
  1204  0FE4                     	;# 
  1205  0FE5                     	;# 
  1206  0FE6                     	;# 
  1207  0FE7                     	;# 
  1208  0FE8                     	;# 
  1209  0FE8                     	;# 
  1210  0FE9                     	;# 
  1211  0FEA                     	;# 
  1212  0FEA                     	;# 
  1213  0FEB                     	;# 
  1214  0FED                     	;# 
  1215  0FEE                     	;# 
  1216  0FEE                     	;# 
  1217  0FEF                     	;# 
  1218  0FFF                     	;# 
  1219  0000                     	;# 
  1220  0001                     	;# 
  1221  0002                     	;# 
  1222  0003                     	;# 
  1223  0004                     	;# 
  1224  0005                     	;# 
  1225  0006                     	;# 
  1226  0007                     	;# 
  1227  0008                     	;# 
  1228  0009                     	;# 
  1229  000A                     	;# 
  1230  000B                     	;# 
  1231  000C                     	;# 
  1232  000E                     	;# 
  1233  0011                     	;# 
  1234  0012                     	;# 
  1235  0013                     	;# 
  1236  0015                     	;# 
  1237  0016                     	;# 
  1238  0016                     	;# 
  1239  0017                     	;# 
  1240  0018                     	;# 
  1241  0019                     	;# 
  1242  001A                     	;# 
  1243  001B                     	;# 
  1244  001C                     	;# 
  1245  008C                     	;# 
  1246  008E                     	;# 
  1247  0091                     	;# 
  1248  0092                     	;# 
  1249  0093                     	;# 
  1250  0095                     	;# 
  1251  0096                     	;# 
  1252  0097                     	;# 
  1253  0098                     	;# 
  1254  0099                     	;# 
  1255  009A                     	;# 
  1256  009B                     	;# 
  1257  009B                     	;# 
  1258  009C                     	;# 
  1259  009D                     	;# 
  1260  009E                     	;# 
  1261  009F                     	;# 
  1262  010C                     	;# 
  1263  010E                     	;# 
  1264  0111                     	;# 
  1265  0112                     	;# 
  1266  0113                     	;# 
  1267  0114                     	;# 
  1268  0115                     	;# 
  1269  0116                     	;# 
  1270  0117                     	;# 
  1271  0118                     	;# 
  1272  0119                     	;# 
  1273  018C                     	;# 
  1274  018E                     	;# 
  1275  0191                     	;# 
  1276  0191                     	;# 
  1277  0192                     	;# 
  1278  0193                     	;# 
  1279  0193                     	;# 
  1280  0194                     	;# 
  1281  0195                     	;# 
  1282  0196                     	;# 
  1283  0197                     	;# 
  1284  0199                     	;# 
  1285  019A                     	;# 
  1286  019B                     	;# 
  1287  019B                     	;# 
  1288  019C                     	;# 
  1289  019D                     	;# 
  1290  019E                     	;# 
  1291  019F                     	;# 
  1292  020C                     	;# 
  1293  020E                     	;# 
  1294  028C                     	;# 
  1295  028E                     	;# 
  1296  030C                     	;# 
  1297  030E                     	;# 
  1298  038C                     	;# 
  1299  038E                     	;# 
  1300  0391                     	;# 
  1301  0392                     	;# 
  1302  0393                     	;# 
  1303  0397                     	;# 
  1304  0398                     	;# 
  1305  0399                     	;# 
  1306  0691                     	;# 
  1307  0692                     	;# 
  1308  0693                     	;# 
  1309  0694                     	;# 
  1310  0695                     	;# 
  1311  0D8E                     	;# 
  1312  0D8F                     	;# 
  1313  0D90                     	;# 
  1314  0D91                     	;# 
  1315  0D91                     	;# 
  1316  0D92                     	;# 
  1317  0D93                     	;# 
  1318  0D93                     	;# 
  1319  0D94                     	;# 
  1320  0D95                     	;# 
  1321  0D95                     	;# 
  1322  0D96                     	;# 
  1323  0D97                     	;# 
  1324  0D97                     	;# 
  1325  0D98                     	;# 
  1326  0D99                     	;# 
  1327  0D99                     	;# 
  1328  0D9A                     	;# 
  1329  0D9B                     	;# 
  1330  0D9C                     	;# 
  1331  0D9C                     	;# 
  1332  0D9D                     	;# 
  1333  0D9D                     	;# 
  1334  0D9E                     	;# 
  1335  0D9F                     	;# 
  1336  0DA0                     	;# 
  1337  0DA1                     	;# 
  1338  0DA1                     	;# 
  1339  0DA2                     	;# 
  1340  0DA3                     	;# 
  1341  0DA3                     	;# 
  1342  0DA4                     	;# 
  1343  0DA5                     	;# 
  1344  0DA5                     	;# 
  1345  0DA6                     	;# 
  1346  0DA7                     	;# 
  1347  0DA7                     	;# 
  1348  0DA8                     	;# 
  1349  0DA9                     	;# 
  1350  0DA9                     	;# 
  1351  0DAA                     	;# 
  1352  0DAB                     	;# 
  1353  0DAC                     	;# 
  1354  0DAC                     	;# 
  1355  0DAD                     	;# 
  1356  0DAD                     	;# 
  1357  0DAE                     	;# 
  1358  0DAF                     	;# 
  1359  0DB0                     	;# 
  1360  0DB1                     	;# 
  1361  0DB1                     	;# 
  1362  0DB2                     	;# 
  1363  0DB3                     	;# 
  1364  0DB3                     	;# 
  1365  0DB4                     	;# 
  1366  0DB5                     	;# 
  1367  0DB5                     	;# 
  1368  0DB6                     	;# 
  1369  0DB7                     	;# 
  1370  0DB7                     	;# 
  1371  0DB8                     	;# 
  1372  0DB9                     	;# 
  1373  0DB9                     	;# 
  1374  0DBA                     	;# 
  1375  0DBB                     	;# 
  1376  0DBC                     	;# 
  1377  0DBC                     	;# 
  1378  0DBD                     	;# 
  1379  0DBD                     	;# 
  1380  0DBE                     	;# 
  1381  0DBF                     	;# 
  1382  0DC0                     	;# 
  1383  0DC1                     	;# 
  1384  0DC1                     	;# 
  1385  0DC2                     	;# 
  1386  0DC3                     	;# 
  1387  0DC3                     	;# 
  1388  0DC4                     	;# 
  1389  0DC5                     	;# 
  1390  0DC5                     	;# 
  1391  0DC6                     	;# 
  1392  0DC7                     	;# 
  1393  0DC7                     	;# 
  1394  0DC8                     	;# 
  1395  0DC9                     	;# 
  1396  0DC9                     	;# 
  1397  0DCA                     	;# 
  1398  0DCB                     	;# 
  1399  0DCC                     	;# 
  1400  0DCC                     	;# 
  1401  0DCD                     	;# 
  1402  0DCD                     	;# 
  1403  0DCE                     	;# 
  1404  0DCF                     	;# 
  1405  0DD0                     	;# 
  1406  0E0F                     	;# 
  1407  0E10                     	;# 
  1408  0E11                     	;# 
  1409  0E12                     	;# 
  1410  0E13                     	;# 
  1411  0E14                     	;# 
  1412  0E15                     	;# 
  1413  0E16                     	;# 
  1414  0E17                     	;# 
  1415  0E90                     	;# 
  1416  0E91                     	;# 
  1417  0E92                     	;# 
  1418  0E94                     	;# 
  1419  0E95                     	;# 
  1420  0EA0                     	;# 
  1421  0EA1                     	;# 
  1422  0EA2                     	;# 
  1423  0EA3                     	;# 
  1424  0EA4                     	;# 
  1425  0EA5                     	;# 
  1426  0FE4                     	;# 
  1427  0FE5                     	;# 
  1428  0FE6                     	;# 
  1429  0FE7                     	;# 
  1430  0FE8                     	;# 
  1431  0FE8                     	;# 
  1432  0FE9                     	;# 
  1433  0FEA                     	;# 
  1434  0FEA                     	;# 
  1435  0FEB                     	;# 
  1436  0FED                     	;# 
  1437  0FEE                     	;# 
  1438  0FEE                     	;# 
  1439  0FEF                     	;# 
  1440  0000                     	;# 
  1441  0001                     	;# 
  1442  0002                     	;# 
  1443  0003                     	;# 
  1444  0004                     	;# 
  1445  0005                     	;# 
  1446  0006                     	;# 
  1447  0007                     	;# 
  1448  0008                     	;# 
  1449  0009                     	;# 
  1450  000A                     	;# 
  1451  000B                     	;# 
  1452  000C                     	;# 
  1453  000E                     	;# 
  1454  0011                     	;# 
  1455  0012                     	;# 
  1456  0013                     	;# 
  1457  0015                     	;# 
  1458  0016                     	;# 
  1459  0016                     	;# 
  1460  0017                     	;# 
  1461  0018                     	;# 
  1462  0019                     	;# 
  1463  001A                     	;# 
  1464  001B                     	;# 
  1465  001C                     	;# 
  1466  008C                     	;# 
  1467  008E                     	;# 
  1468  0091                     	;# 
  1469  0092                     	;# 
  1470  0093                     	;# 
  1471  0095                     	;# 
  1472  0096                     	;# 
  1473  0097                     	;# 
  1474  0098                     	;# 
  1475  0099                     	;# 
  1476  009A                     	;# 
  1477  009B                     	;# 
  1478  009B                     	;# 
  1479  009C                     	;# 
  1480  009D                     	;# 
  1481  009E                     	;# 
  1482  009F                     	;# 
  1483  010C                     	;# 
  1484  010E                     	;# 
  1485  0111                     	;# 
  1486  0112                     	;# 
  1487  0113                     	;# 
  1488  0114                     	;# 
  1489  0115                     	;# 
  1490  0116                     	;# 
  1491  0117                     	;# 
  1492  0118                     	;# 
  1493  0119                     	;# 
  1494  018C                     	;# 
  1495  018E                     	;# 
  1496  0191                     	;# 
  1497  0191                     	;# 
  1498  0192                     	;# 
  1499  0193                     	;# 
  1500  0193                     	;# 
  1501  0194                     	;# 
  1502  0195                     	;# 
  1503  0196                     	;# 
  1504  0197                     	;# 
  1505  0199                     	;# 
  1506  019A                     	;# 
  1507  019B                     	;# 
  1508  019B                     	;# 
  1509  019C                     	;# 
  1510  019D                     	;# 
  1511  019E                     	;# 
  1512  019F                     	;# 
  1513  020C                     	;# 
  1514  020E                     	;# 
  1515  028C                     	;# 
  1516  028E                     	;# 
  1517  030C                     	;# 
  1518  030E                     	;# 
  1519  038C                     	;# 
  1520  038E                     	;# 
  1521  0391                     	;# 
  1522  0392                     	;# 
  1523  0393                     	;# 
  1524  0397                     	;# 
  1525  0398                     	;# 
  1526  0399                     	;# 
  1527  0691                     	;# 
  1528  0692                     	;# 
  1529  0693                     	;# 
  1530  0694                     	;# 
  1531  0695                     	;# 
  1532  0D8E                     	;# 
  1533  0D8F                     	;# 
  1534  0D90                     	;# 
  1535  0D91                     	;# 
  1536  0D91                     	;# 
  1537  0D92                     	;# 
  1538  0D93                     	;# 
  1539  0D93                     	;# 
  1540  0D94                     	;# 
  1541  0D95                     	;# 
  1542  0D95                     	;# 
  1543  0D96                     	;# 
  1544  0D97                     	;# 
  1545  0D97                     	;# 
  1546  0D98                     	;# 
  1547  0D99                     	;# 
  1548  0D99                     	;# 
  1549  0D9A                     	;# 
  1550  0D9B                     	;# 
  1551  0D9C                     	;# 
  1552  0D9C                     	;# 
  1553  0D9D                     	;# 
  1554  0D9D                     	;# 
  1555  0D9E                     	;# 
  1556  0D9F                     	;# 
  1557  0DA0                     	;# 
  1558  0DA1                     	;# 
  1559  0DA1                     	;# 
  1560  0DA2                     	;# 
  1561  0DA3                     	;# 
  1562  0DA3                     	;# 
  1563  0DA4                     	;# 
  1564  0DA5                     	;# 
  1565  0DA5                     	;# 
  1566  0DA6                     	;# 
  1567  0DA7                     	;# 
  1568  0DA7                     	;# 
  1569  0DA8                     	;# 
  1570  0DA9                     	;# 
  1571  0DA9                     	;# 
  1572  0DAA                     	;# 
  1573  0DAB                     	;# 
  1574  0DAC                     	;# 
  1575  0DAC                     	;# 
  1576  0DAD                     	;# 
  1577  0DAD                     	;# 
  1578  0DAE                     	;# 
  1579  0DAF                     	;# 
  1580  0DB0                     	;# 
  1581  0DB1                     	;# 
  1582  0DB1                     	;# 
  1583  0DB2                     	;# 
  1584  0DB3                     	;# 
  1585  0DB3                     	;# 
  1586  0DB4                     	;# 
  1587  0DB5                     	;# 
  1588  0DB5                     	;# 
  1589  0DB6                     	;# 
  1590  0DB7                     	;# 
  1591  0DB7                     	;# 
  1592  0DB8                     	;# 
  1593  0DB9                     	;# 
  1594  0DB9                     	;# 
  1595  0DBA                     	;# 
  1596  0DBB                     	;# 
  1597  0DBC                     	;# 
  1598  0DBC                     	;# 
  1599  0DBD                     	;# 
  1600  0DBD                     	;# 
  1601  0DBE                     	;# 
  1602  0DBF                     	;# 
  1603  0DC0                     	;# 
  1604  0DC1                     	;# 
  1605  0DC1                     	;# 
  1606  0DC2                     	;# 
  1607  0DC3                     	;# 
  1608  0DC3                     	;# 
  1609  0DC4                     	;# 
  1610  0DC5                     	;# 
  1611  0DC5                     	;# 
  1612  0DC6                     	;# 
  1613  0DC7                     	;# 
  1614  0DC7                     	;# 
  1615  0DC8                     	;# 
  1616  0DC9                     	;# 
  1617  0DC9                     	;# 
  1618  0DCA                     	;# 
  1619  0DCB                     	;# 
  1620  0DCC                     	;# 
  1621  0DCC                     	;# 
  1622  0DCD                     	;# 
  1623  0DCD                     	;# 
  1624  0DCE                     	;# 
  1625  0DCF                     	;# 
  1626  0DD0                     	;# 
  1627  0E0F                     	;# 
  1628  0E10                     	;# 
  1629  0E11                     	;# 
  1630  0E12                     	;# 
  1631  0E13                     	;# 
  1632  0E14                     	;# 
  1633  0E15                     	;# 
  1634  0E16                     	;# 
  1635  0E17                     	;# 
  1636  0E90                     	;# 
  1637  0E91                     	;# 
  1638  0E92                     	;# 
  1639  0E94                     	;# 
  1640  0E95                     	;# 
  1641  0EA0                     	;# 
  1642  0EA1                     	;# 
  1643  0EA2                     	;# 
  1644  0EA3                     	;# 
  1645  0EA4                     	;# 
  1646  0EA5                     	;# 
  1647  0FE4                     	;# 
  1648  0FE5                     	;# 
  1649  0FE6                     	;# 
  1650  0FE7                     	;# 
  1651  0FE8                     	;# 
  1652  0FE8                     	;# 
  1653  0FE9                     	;# 
  1654  0FEA                     	;# 
  1655  0FEA                     	;# 
  1656  0FEB                     	;# 
  1657  0FED                     	;# 
  1658  0FEE                     	;# 
  1659  0FEE                     	;# 
  1660  0FEF                     	;# 
  1661  0000                     	;# 
  1662  0001                     	;# 
  1663  0002                     	;# 
  1664  0003                     	;# 
  1665  0004                     	;# 
  1666  0005                     	;# 
  1667  0006                     	;# 
  1668  0007                     	;# 
  1669  0008                     	;# 
  1670  0009                     	;# 
  1671  000A                     	;# 
  1672  000B                     	;# 
  1673  000C                     	;# 
  1674  000E                     	;# 
  1675  0011                     	;# 
  1676  0012                     	;# 
  1677  0013                     	;# 
  1678  0015                     	;# 
  1679  0016                     	;# 
  1680  0016                     	;# 
  1681  0017                     	;# 
  1682  0018                     	;# 
  1683  0019                     	;# 
  1684  001A                     	;# 
  1685  001B                     	;# 
  1686  001C                     	;# 
  1687  008C                     	;# 
  1688  008E                     	;# 
  1689  0091                     	;# 
  1690  0092                     	;# 
  1691  0093                     	;# 
  1692  0095                     	;# 
  1693  0096                     	;# 
  1694  0097                     	;# 
  1695  0098                     	;# 
  1696  0099                     	;# 
  1697  009A                     	;# 
  1698  009B                     	;# 
  1699  009B                     	;# 
  1700  009C                     	;# 
  1701  009D                     	;# 
  1702  009E                     	;# 
  1703  009F                     	;# 
  1704  010C                     	;# 
  1705  010E                     	;# 
  1706  0111                     	;# 
  1707  0112                     	;# 
  1708  0113                     	;# 
  1709  0114                     	;# 
  1710  0115                     	;# 
  1711  0116                     	;# 
  1712  0117                     	;# 
  1713  0118                     	;# 
  1714  0119                     	;# 
  1715  018C                     	;# 
  1716  018E                     	;# 
  1717  0191                     	;# 
  1718  0191                     	;# 
  1719  0192                     	;# 
  1720  0193                     	;# 
  1721  0193                     	;# 
  1722  0194                     	;# 
  1723  0195                     	;# 
  1724  0196                     	;# 
  1725  0197                     	;# 
  1726  0199                     	;# 
  1727  019A                     	;# 
  1728  019B                     	;# 
  1729  019B                     	;# 
  1730  019C                     	;# 
  1731  019D                     	;# 
  1732  019E                     	;# 
  1733  019F                     	;# 
  1734  020C                     	;# 
  1735  020E                     	;# 
  1736  028C                     	;# 
  1737  028E                     	;# 
  1738  030C                     	;# 
  1739  030E                     	;# 
  1740  038C                     	;# 
  1741  038E                     	;# 
  1742  0391                     	;# 
  1743  0392                     	;# 
  1744  0393                     	;# 
  1745  0397                     	;# 
  1746  0398                     	;# 
  1747  0399                     	;# 
  1748  0691                     	;# 
  1749  0692                     	;# 
  1750  0693                     	;# 
  1751  0694                     	;# 
  1752  0695                     	;# 
  1753  0D8E                     	;# 
  1754  0D8F                     	;# 
  1755  0D90                     	;# 
  1756  0D91                     	;# 
  1757  0D91                     	;# 
  1758  0D92                     	;# 
  1759  0D93                     	;# 
  1760  0D93                     	;# 
  1761  0D94                     	;# 
  1762  0D95                     	;# 
  1763  0D95                     	;# 
  1764  0D96                     	;# 
  1765  0D97                     	;# 
  1766  0D97                     	;# 
  1767  0D98                     	;# 
  1768  0D99                     	;# 
  1769  0D99                     	;# 
  1770  0D9A                     	;# 
  1771  0D9B                     	;# 
  1772  0D9C                     	;# 
  1773  0D9C                     	;# 
  1774  0D9D                     	;# 
  1775  0D9D                     	;# 
  1776  0D9E                     	;# 
  1777  0D9F                     	;# 
  1778  0DA0                     	;# 
  1779  0DA1                     	;# 
  1780  0DA1                     	;# 
  1781  0DA2                     	;# 
  1782  0DA3                     	;# 
  1783  0DA3                     	;# 
  1784  0DA4                     	;# 
  1785  0DA5                     	;# 
  1786  0DA5                     	;# 
  1787  0DA6                     	;# 
  1788  0DA7                     	;# 
  1789  0DA7                     	;# 
  1790  0DA8                     	;# 
  1791  0DA9                     	;# 
  1792  0DA9                     	;# 
  1793  0DAA                     	;# 
  1794  0DAB                     	;# 
  1795  0DAC                     	;# 
  1796  0DAC                     	;# 
  1797  0DAD                     	;# 
  1798  0DAD                     	;# 
  1799  0DAE                     	;# 
  1800  0DAF                     	;# 
  1801  0DB0                     	;# 
  1802  0DB1                     	;# 
  1803  0DB1                     	;# 
  1804  0DB2                     	;# 
  1805  0DB3                     	;# 
  1806  0DB3                     	;# 
  1807  0DB4                     	;# 
  1808  0DB5                     	;# 
  1809  0DB5                     	;# 
  1810  0DB6                     	;# 
  1811  0DB7                     	;# 
  1812  0DB7                     	;# 
  1813  0DB8                     	;# 
  1814  0DB9                     	;# 
  1815  0DB9                     	;# 
  1816  0DBA                     	;# 
  1817  0DBB                     	;# 
  1818  0DBC                     	;# 
  1819  0DBC                     	;# 
  1820  0DBD                     	;# 
  1821  0DBD                     	;# 
  1822  0DBE                     	;# 
  1823  0DBF                     	;# 
  1824  0DC0                     	;# 
  1825  0DC1                     	;# 
  1826  0DC1                     	;# 
  1827  0DC2                     	;# 
  1828  0DC3                     	;# 
  1829  0DC3                     	;# 
  1830  0DC4                     	;# 
  1831  0DC5                     	;# 
  1832  0DC5                     	;# 
  1833  0DC6                     	;# 
  1834  0DC7                     	;# 
  1835  0DC7                     	;# 
  1836  0DC8                     	;# 
  1837  0DC9                     	;# 
  1838  0DC9                     	;# 
  1839  0DCA                     	;# 
  1840  0DCB                     	;# 
  1841  0DCC                     	;# 
  1842  0DCC                     	;# 
  1843  0DCD                     	;# 
  1844  0DCD                     	;# 
  1845  0DCE                     	;# 
  1846  0DCF                     	;# 
  1847  0DD0                     	;# 
  1848  0E0F                     	;# 
  1849  0E10                     	;# 
  1850  0E11                     	;# 
  1851  0E12                     	;# 
  1852  0E13                     	;# 
  1853  0E14                     	;# 
  1854  0E15                     	;# 
  1855  0E16                     	;# 
  1856  0E17                     	;# 
  1857  0E90                     	;# 
  1858  0E91                     	;# 
  1859  0E92                     	;# 
  1860  0E94                     	;# 
  1861  0E95                     	;# 
  1862  0EA0                     	;# 
  1863  0EA1                     	;# 
  1864  0EA2                     	;# 
  1865  0EA3                     	;# 
  1866  0EA4                     	;# 
  1867  0EA5                     	;# 
  1868  0FE4                     	;# 
  1869  0FE5                     	;# 
  1870  0FE6                     	;# 
  1871  0FE7                     	;# 
  1872  0FE8                     	;# 
  1873  0FE8                     	;# 
  1874  0FE9                     	;# 
  1875  0FEA                     	;# 
  1876  0FEA                     	;# 
  1877  0FEB                     	;# 
  1878  0FED                     	;# 
  1879  0FEE                     	;# 
  1880  0FEE                     	;# 
  1881  0FEF                     	;# 
  1882  0000                     	;# 
  1883  0001                     	;# 
  1884  0002                     	;# 
  1885  0003                     	;# 
  1886  0004                     	;# 
  1887  0005                     	;# 
  1888  0006                     	;# 
  1889  0007                     	;# 
  1890  0008                     	;# 
  1891  0009                     	;# 
  1892  000A                     	;# 
  1893  000B                     	;# 
  1894  000C                     	;# 
  1895  000E                     	;# 
  1896  0011                     	;# 
  1897  0012                     	;# 
  1898  0013                     	;# 
  1899  0015                     	;# 
  1900  0016                     	;# 
  1901  0016                     	;# 
  1902  0017                     	;# 
  1903  0018                     	;# 
  1904  0019                     	;# 
  1905  001A                     	;# 
  1906  001B                     	;# 
  1907  001C                     	;# 
  1908  008C                     	;# 
  1909  008E                     	;# 
  1910  0091                     	;# 
  1911  0092                     	;# 
  1912  0093                     	;# 
  1913  0095                     	;# 
  1914  0096                     	;# 
  1915  0097                     	;# 
  1916  0098                     	;# 
  1917  0099                     	;# 
  1918  009A                     	;# 
  1919  009B                     	;# 
  1920  009B                     	;# 
  1921  009C                     	;# 
  1922  009D                     	;# 
  1923  009E                     	;# 
  1924  009F                     	;# 
  1925  010C                     	;# 
  1926  010E                     	;# 
  1927  0111                     	;# 
  1928  0112                     	;# 
  1929  0113                     	;# 
  1930  0114                     	;# 
  1931  0115                     	;# 
  1932  0116                     	;# 
  1933  0117                     	;# 
  1934  0118                     	;# 
  1935  0119                     	;# 
  1936  018C                     	;# 
  1937  018E                     	;# 
  1938  0191                     	;# 
  1939  0191                     	;# 
  1940  0192                     	;# 
  1941  0193                     	;# 
  1942  0193                     	;# 
  1943  0194                     	;# 
  1944  0195                     	;# 
  1945  0196                     	;# 
  1946  0197                     	;# 
  1947  0199                     	;# 
  1948  019A                     	;# 
  1949  019B                     	;# 
  1950  019B                     	;# 
  1951  019C                     	;# 
  1952  019D                     	;# 
  1953  019E                     	;# 
  1954  019F                     	;# 
  1955  020C                     	;# 
  1956  020E                     	;# 
  1957  028C                     	;# 
  1958  028E                     	;# 
  1959  030C                     	;# 
  1960  030E                     	;# 
  1961  038C                     	;# 
  1962  038E                     	;# 
  1963  0391                     	;# 
  1964  0392                     	;# 
  1965  0393                     	;# 
  1966  0397                     	;# 
  1967  0398                     	;# 
  1968  0399                     	;# 
  1969  0691                     	;# 
  1970  0692                     	;# 
  1971  0693                     	;# 
  1972  0694                     	;# 
  1973  0695                     	;# 
  1974  0D8E                     	;# 
  1975  0D8F                     	;# 
  1976  0D90                     	;# 
  1977  0D91                     	;# 
  1978  0D91                     	;# 
  1979  0D92                     	;# 
  1980  0D93                     	;# 
  1981  0D93                     	;# 
  1982  0D94                     	;# 
  1983  0D95                     	;# 
  1984  0D95                     	;# 
  1985  0D96                     	;# 
  1986  0D97                     	;# 
  1987  0D97                     	;# 
  1988  0D98                     	;# 
  1989  0D99                     	;# 
  1990  0D99                     	;# 
  1991  0D9A                     	;# 
  1992  0D9B                     	;# 
  1993  0D9C                     	;# 
  1994  0D9C                     	;# 
  1995  0D9D                     	;# 
  1996  0D9D                     	;# 
  1997  0D9E                     	;# 
  1998  0D9F                     	;# 
  1999  0DA0                     	;# 
  2000  0DA1                     	;# 
  2001  0DA1                     	;# 
  2002  0DA2                     	;# 
  2003  0DA3                     	;# 
  2004  0DA3                     	;# 
  2005  0DA4                     	;# 
  2006  0DA5                     	;# 
  2007  0DA5                     	;# 
  2008  0DA6                     	;# 
  2009  0DA7                     	;# 
  2010  0DA7                     	;# 
  2011  0DA8                     	;# 
  2012  0DA9                     	;# 
  2013  0DA9                     	;# 
  2014  0DAA                     	;# 
  2015  0DAB                     	;# 
  2016  0DAC                     	;# 
  2017  0DAC                     	;# 
  2018  0DAD                     	;# 
  2019  0DAD                     	;# 
  2020  0DAE                     	;# 
  2021  0DAF                     	;# 
  2022  0DB0                     	;# 
  2023  0DB1                     	;# 
  2024  0DB1                     	;# 
  2025  0DB2                     	;# 
  2026  0DB3                     	;# 
  2027  0DB3                     	;# 
  2028  0DB4                     	;# 
  2029  0DB5                     	;# 
  2030  0DB5                     	;# 
  2031  0DB6                     	;# 
  2032  0DB7                     	;# 
  2033  0DB7                     	;# 
  2034  0DB8                     	;# 
  2035  0DB9                     	;# 
  2036  0DB9                     	;# 
  2037  0DBA                     	;# 
  2038  0DBB                     	;# 
  2039  0DBC                     	;# 
  2040  0DBC                     	;# 
  2041  0DBD                     	;# 
  2042  0DBD                     	;# 
  2043  0DBE                     	;# 
  2044  0DBF                     	;# 
  2045  0DC0                     	;# 
  2046  0DC1                     	;# 
  2047  0DC1                     	;# 
  2048  0DC2                     	;# 
  2049  0DC3                     	;# 
  2050  0DC3                     	;# 
  2051  0DC4                     	;# 
  2052  0DC5                     	;# 
  2053  0DC5                     	;# 
  2054  0DC6                     	;# 
  2055  0DC7                     	;# 
  2056  0DC7                     	;# 
  2057  0DC8                     	;# 
  2058  0DC9                     	;# 
  2059  0DC9                     	;# 
  2060  0DCA                     	;# 
  2061  0DCB                     	;# 
  2062  0DCC                     	;# 
  2063  0DCC                     	;# 
  2064  0DCD                     	;# 
  2065  0DCD                     	;# 
  2066  0DCE                     	;# 
  2067  0DCF                     	;# 
  2068  0DD0                     	;# 
  2069  0E0F                     	;# 
  2070  0E10                     	;# 
  2071  0E11                     	;# 
  2072  0E12                     	;# 
  2073  0E13                     	;# 
  2074  0E14                     	;# 
  2075  0E15                     	;# 
  2076  0E16                     	;# 
  2077  0E17                     	;# 
  2078  0E90                     	;# 
  2079  0E91                     	;# 
  2080  0E92                     	;# 
  2081  0E94                     	;# 
  2082  0E95                     	;# 
  2083  0EA0                     	;# 
  2084  0EA1                     	;# 
  2085  0EA2                     	;# 
  2086  0EA3                     	;# 
  2087  0EA4                     	;# 
  2088  0EA5                     	;# 
  2089  0FE4                     	;# 
  2090  0FE5                     	;# 
  2091  0FE6                     	;# 
  2092  0FE7                     	;# 
  2093  0FE8                     	;# 
  2094  0FE8                     	;# 
  2095  0FE9                     	;# 
  2096  0FEA                     	;# 
  2097  0FEA                     	;# 
  2098  0FEB                     	;# 
  2099  0FED                     	;# 
  2100  0FEE                     	;# 
  2101  0FEE                     	;# 
  2102  0FEF                     	;# 
  2103  0000                     	;# 
  2104  0001                     	;# 
  2105  0002                     	;# 
  2106  0003                     	;# 
  2107  0004                     	;# 
  2108  0005                     	;# 
  2109  0006                     	;# 
  2110  0007                     	;# 
  2111  0008                     	;# 
  2112  0009                     	;# 
  2113  000A                     	;# 
  2114  000B                     	;# 
  2115  000C                     	;# 
  2116  000E                     	;# 
  2117  0011                     	;# 
  2118  0012                     	;# 
  2119  0013                     	;# 
  2120  0015                     	;# 
  2121  0016                     	;# 
  2122  0016                     	;# 
  2123  0017                     	;# 
  2124  0018                     	;# 
  2125  0019                     	;# 
  2126  001A                     	;# 
  2127  001B                     	;# 
  2128  001C                     	;# 
  2129  008C                     	;# 
  2130  008E                     	;# 
  2131  0091                     	;# 
  2132  0092                     	;# 
  2133  0093                     	;# 
  2134  0095                     	;# 
  2135  0096                     	;# 
  2136  0097                     	;# 
  2137  0098                     	;# 
  2138  0099                     	;# 
  2139  009A                     	;# 
  2140  009B                     	;# 
  2141  009B                     	;# 
  2142  009C                     	;# 
  2143  009D                     	;# 
  2144  009E                     	;# 
  2145  009F                     	;# 
  2146  010C                     	;# 
  2147  010E                     	;# 
  2148  0111                     	;# 
  2149  0112                     	;# 
  2150  0113                     	;# 
  2151  0114                     	;# 
  2152  0115                     	;# 
  2153  0116                     	;# 
  2154  0117                     	;# 
  2155  0118                     	;# 
  2156  0119                     	;# 
  2157  018C                     	;# 
  2158  018E                     	;# 
  2159  0191                     	;# 
  2160  0191                     	;# 
  2161  0192                     	;# 
  2162  0193                     	;# 
  2163  0193                     	;# 
  2164  0194                     	;# 
  2165  0195                     	;# 
  2166  0196                     	;# 
  2167  0197                     	;# 
  2168  0199                     	;# 
  2169  019A                     	;# 
  2170  019B                     	;# 
  2171  019B                     	;# 
  2172  019C                     	;# 
  2173  019D                     	;# 
  2174  019E                     	;# 
  2175  019F                     	;# 
  2176  020C                     	;# 
  2177  020E                     	;# 
  2178  028C                     	;# 
  2179  028E                     	;# 
  2180  030C                     	;# 
  2181  030E                     	;# 
  2182  038C                     	;# 
  2183  038E                     	;# 
  2184  0391                     	;# 
  2185  0392                     	;# 
  2186  0393                     	;# 
  2187  0397                     	;# 
  2188  0398                     	;# 
  2189  0399                     	;# 
  2190  0691                     	;# 
  2191  0692                     	;# 
  2192  0693                     	;# 
  2193  0694                     	;# 
  2194  0695                     	;# 
  2195  0D8E                     	;# 
  2196  0D8F                     	;# 
  2197  0D90                     	;# 
  2198  0D91                     	;# 
  2199  0D91                     	;# 
  2200  0D92                     	;# 
  2201  0D93                     	;# 
  2202  0D93                     	;# 
  2203  0D94                     	;# 
  2204  0D95                     	;# 
  2205  0D95                     	;# 
  2206  0D96                     	;# 
  2207  0D97                     	;# 
  2208  0D97                     	;# 
  2209  0D98                     	;# 
  2210  0D99                     	;# 
  2211  0D99                     	;# 
  2212  0D9A                     	;# 
  2213  0D9B                     	;# 
  2214  0D9C                     	;# 
  2215  0D9C                     	;# 
  2216  0D9D                     	;# 
  2217  0D9D                     	;# 
  2218  0D9E                     	;# 
  2219  0D9F                     	;# 
  2220  0DA0                     	;# 
  2221  0DA1                     	;# 
  2222  0DA1                     	;# 
  2223  0DA2                     	;# 
  2224  0DA3                     	;# 
  2225  0DA3                     	;# 
  2226  0DA4                     	;# 
  2227  0DA5                     	;# 
  2228  0DA5                     	;# 
  2229  0DA6                     	;# 
  2230  0DA7                     	;# 
  2231  0DA7                     	;# 
  2232  0DA8                     	;# 
  2233  0DA9                     	;# 
  2234  0DA9                     	;# 
  2235  0DAA                     	;# 
  2236  0DAB                     	;# 
  2237  0DAC                     	;# 
  2238  0DAC                     	;# 
  2239  0DAD                     	;# 
  2240  0DAD                     	;# 
  2241  0DAE                     	;# 
  2242  0DAF                     	;# 
  2243  0DB0                     	;# 
  2244  0DB1                     	;# 
  2245  0DB1                     	;# 
  2246  0DB2                     	;# 
  2247  0DB3                     	;# 
  2248  0DB3                     	;# 
  2249  0DB4                     	;# 
  2250  0DB5                     	;# 
  2251  0DB5                     	;# 
  2252  0DB6                     	;# 
  2253  0DB7                     	;# 
  2254  0DB7                     	;# 
  2255  0DB8                     	;# 
  2256  0DB9                     	;# 
  2257  0DB9                     	;# 
  2258  0DBA                     	;# 
  2259  0DBB                     	;# 
  2260  0DBC                     	;# 
  2261  0DBC                     	;# 
  2262  0DBD                     	;# 
  2263  0DBD                     	;# 
  2264  0DBE                     	;# 
  2265  0DBF                     	;# 
  2266  0DC0                     	;# 
  2267  0DC1                     	;# 
  2268  0DC1                     	;# 
  2269  0DC2                     	;# 
  2270  0DC3                     	;# 
  2271  0DC3                     	;# 
  2272  0DC4                     	;# 
  2273  0DC5                     	;# 
  2274  0DC5                     	;# 
  2275  0DC6                     	;# 
  2276  0DC7                     	;# 
  2277  0DC7                     	;# 
  2278  0DC8                     	;# 
  2279  0DC9                     	;# 
  2280  0DC9                     	;# 
  2281  0DCA                     	;# 
  2282  0DCB                     	;# 
  2283  0DCC                     	;# 
  2284  0DCC                     	;# 
  2285  0DCD                     	;# 
  2286  0DCD                     	;# 
  2287  0DCE                     	;# 
  2288  0DCF                     	;# 
  2289  0DD0                     	;# 
  2290  0E0F                     	;# 
  2291  0E10                     	;# 
  2292  0E11                     	;# 
  2293  0E12                     	;# 
  2294  0E13                     	;# 
  2295  0E14                     	;# 
  2296  0E15                     	;# 
  2297  0E16                     	;# 
  2298  0E17                     	;# 
  2299  0E90                     	;# 
  2300  0E91                     	;# 
  2301  0E92                     	;# 
  2302  0E94                     	;# 
  2303  0E95                     	;# 
  2304  0EA0                     	;# 
  2305  0EA1                     	;# 
  2306  0EA2                     	;# 
  2307  0EA3                     	;# 
  2308  0EA4                     	;# 
  2309  0EA5                     	;# 
  2310  0FE4                     	;# 
  2311  0FE5                     	;# 
  2312  0FE6                     	;# 
  2313  0FE7                     	;# 
  2314  0FE8                     	;# 
  2315  0FE8                     	;# 
  2316  0FE9                     	;# 
  2317  0FEA                     	;# 
  2318  0FEA                     	;# 
  2319  0FEB                     	;# 
  2320  0FED                     	;# 
  2321  0FEE                     	;# 
  2322  0FEE                     	;# 
  2323  0FEF                     	;# 
  2324  0000                     	;# 
  2325  0001                     	;# 
  2326  0002                     	;# 
  2327  0003                     	;# 
  2328  0004                     	;# 
  2329  0005                     	;# 
  2330  0006                     	;# 
  2331  0007                     	;# 
  2332  0008                     	;# 
  2333  0009                     	;# 
  2334  000A                     	;# 
  2335  000B                     	;# 
  2336  000C                     	;# 
  2337  000E                     	;# 
  2338  0011                     	;# 
  2339  0012                     	;# 
  2340  0013                     	;# 
  2341  0015                     	;# 
  2342  0016                     	;# 
  2343  0016                     	;# 
  2344  0017                     	;# 
  2345  0018                     	;# 
  2346  0019                     	;# 
  2347  001A                     	;# 
  2348  001B                     	;# 
  2349  001C                     	;# 
  2350  008C                     	;# 
  2351  008E                     	;# 
  2352  0091                     	;# 
  2353  0092                     	;# 
  2354  0093                     	;# 
  2355  0095                     	;# 
  2356  0096                     	;# 
  2357  0097                     	;# 
  2358  0098                     	;# 
  2359  0099                     	;# 
  2360  009A                     	;# 
  2361  009B                     	;# 
  2362  009B                     	;# 
  2363  009C                     	;# 
  2364  009D                     	;# 
  2365  009E                     	;# 
  2366  009F                     	;# 
  2367  010C                     	;# 
  2368  010E                     	;# 
  2369  0111                     	;# 
  2370  0112                     	;# 
  2371  0113                     	;# 
  2372  0114                     	;# 
  2373  0115                     	;# 
  2374  0116                     	;# 
  2375  0117                     	;# 
  2376  0118                     	;# 
  2377  0119                     	;# 
  2378  018C                     	;# 
  2379  018E                     	;# 
  2380  0191                     	;# 
  2381  0191                     	;# 
  2382  0192                     	;# 
  2383  0193                     	;# 
  2384  0193                     	;# 
  2385  0194                     	;# 
  2386  0195                     	;# 
  2387  0196                     	;# 
  2388  0197                     	;# 
  2389  0199                     	;# 
  2390  019A                     	;# 
  2391  019B                     	;# 
  2392  019B                     	;# 
  2393  019C                     	;# 
  2394  019D                     	;# 
  2395  019E                     	;# 
  2396  019F                     	;# 
  2397  020C                     	;# 
  2398  020E                     	;# 
  2399  028C                     	;# 
  2400  028E                     	;# 
  2401  030C                     	;# 
  2402  030E                     	;# 
  2403  038C                     	;# 
  2404  038E                     	;# 
  2405  0391                     	;# 
  2406  0392                     	;# 
  2407  0393                     	;# 
  2408  0397                     	;# 
  2409  0398                     	;# 
  2410  0399                     	;# 
  2411  0691                     	;# 
  2412  0692                     	;# 
  2413  0693                     	;# 
  2414  0694                     	;# 
  2415  0695                     	;# 
  2416  0D8E                     	;# 
  2417  0D8F                     	;# 
  2418  0D90                     	;# 
  2419  0D91                     	;# 
  2420  0D91                     	;# 
  2421  0D92                     	;# 
  2422  0D93                     	;# 
  2423  0D93                     	;# 
  2424  0D94                     	;# 
  2425  0D95                     	;# 
  2426  0D95                     	;# 
  2427  0D96                     	;# 
  2428  0D97                     	;# 
  2429  0D97                     	;# 
  2430  0D98                     	;# 
  2431  0D99                     	;# 
  2432  0D99                     	;# 
  2433  0D9A                     	;# 
  2434  0D9B                     	;# 
  2435  0D9C                     	;# 
  2436  0D9C                     	;# 
  2437  0D9D                     	;# 
  2438  0D9D                     	;# 
  2439  0D9E                     	;# 
  2440  0D9F                     	;# 
  2441  0DA0                     	;# 
  2442  0DA1                     	;# 
  2443  0DA1                     	;# 
  2444  0DA2                     	;# 
  2445  0DA3                     	;# 
  2446  0DA3                     	;# 
  2447  0DA4                     	;# 
  2448  0DA5                     	;# 
  2449  0DA5                     	;# 
  2450  0DA6                     	;# 
  2451  0DA7                     	;# 
  2452  0DA7                     	;# 
  2453  0DA8                     	;# 
  2454  0DA9                     	;# 
  2455  0DA9                     	;# 
  2456  0DAA                     	;# 
  2457  0DAB                     	;# 
  2458  0DAC                     	;# 
  2459  0DAC                     	;# 
  2460  0DAD                     	;# 
  2461  0DAD                     	;# 
  2462  0DAE                     	;# 
  2463  0DAF                     	;# 
  2464  0DB0                     	;# 
  2465  0DB1                     	;# 
  2466  0DB1                     	;# 
  2467  0DB2                     	;# 
  2468  0DB3                     	;# 
  2469  0DB3                     	;# 
  2470  0DB4                     	;# 
  2471  0DB5                     	;# 
  2472  0DB5                     	;# 
  2473  0DB6                     	;# 
  2474  0DB7                     	;# 
  2475  0DB7                     	;# 
  2476  0DB8                     	;# 
  2477  0DB9                     	;# 
  2478  0DB9                     	;# 
  2479  0DBA                     	;# 
  2480  0DBB                     	;# 
  2481  0DBC                     	;# 
  2482  0DBC                     	;# 
  2483  0DBD                     	;# 
  2484  0DBD                     	;# 
  2485  0DBE                     	;# 
  2486  0DBF                     	;# 
  2487  0DC0                     	;# 
  2488  0DC1                     	;# 
  2489  0DC1                     	;# 
  2490  0DC2                     	;# 
  2491  0DC3                     	;# 
  2492  0DC3                     	;# 
  2493  0DC4                     	;# 
  2494  0DC5                     	;# 
  2495  0DC5                     	;# 
  2496  0DC6                     	;# 
  2497  0DC7                     	;# 
  2498  0DC7                     	;# 
  2499  0DC8                     	;# 
  2500  0DC9                     	;# 
  2501  0DC9                     	;# 
  2502  0DCA                     	;# 
  2503  0DCB                     	;# 
  2504  0DCC                     	;# 
  2505  0DCC                     	;# 
  2506  0DCD                     	;# 
  2507  0DCD                     	;# 
  2508  0DCE                     	;# 
  2509  0DCF                     	;# 
  2510  0DD0                     	;# 
  2511  0E0F                     	;# 
  2512  0E10                     	;# 
  2513  0E11                     	;# 
  2514  0E12                     	;# 
  2515  0E13                     	;# 
  2516  0E14                     	;# 
  2517  0E15                     	;# 
  2518  0E16                     	;# 
  2519  0E17                     	;# 
  2520  0E90                     	;# 
  2521  0E91                     	;# 
  2522  0E92                     	;# 
  2523  0E94                     	;# 
  2524  0E95                     	;# 
  2525  0EA0                     	;# 
  2526  0EA1                     	;# 
  2527  0EA2                     	;# 
  2528  0EA3                     	;# 
  2529  0EA4                     	;# 
  2530  0EA5                     	;# 
  2531  0FE4                     	;# 
  2532  0FE5                     	;# 
  2533  0FE6                     	;# 
  2534  0FE7                     	;# 
  2535  0FE8                     	;# 
  2536  0FE8                     	;# 
  2537  0FE9                     	;# 
  2538  0FEA                     	;# 
  2539  0FEA                     	;# 
  2540  0FEB                     	;# 
  2541  0FED                     	;# 
  2542  0FEE                     	;# 
  2543  0FEE                     	;# 
  2544  0FEF                     	;# 
  2545  0FFF                     	;# 
  2546  0000                     	;# 
  2547  0001                     	;# 
  2548  0002                     	;# 
  2549  0003                     	;# 
  2550  0004                     	;# 
  2551  0005                     	;# 
  2552  0006                     	;# 
  2553  0007                     	;# 
  2554  0008                     	;# 
  2555  0009                     	;# 
  2556  000A                     	;# 
  2557  000B                     	;# 
  2558  000C                     	;# 
  2559  000E                     	;# 
  2560  0011                     	;# 
  2561  0012                     	;# 
  2562  0013                     	;# 
  2563  0015                     	;# 
  2564  0016                     	;# 
  2565  0016                     	;# 
  2566  0017                     	;# 
  2567  0018                     	;# 
  2568  0019                     	;# 
  2569  001A                     	;# 
  2570  001B                     	;# 
  2571  001C                     	;# 
  2572  008C                     	;# 
  2573  008E                     	;# 
  2574  0091                     	;# 
  2575  0092                     	;# 
  2576  0093                     	;# 
  2577  0095                     	;# 
  2578  0096                     	;# 
  2579  0097                     	;# 
  2580  0098                     	;# 
  2581  0099                     	;# 
  2582  009A                     	;# 
  2583  009B                     	;# 
  2584  009B                     	;# 
  2585  009C                     	;# 
  2586  009D                     	;# 
  2587  009E                     	;# 
  2588  009F                     	;# 
  2589  010C                     	;# 
  2590  010E                     	;# 
  2591  0111                     	;# 
  2592  0112                     	;# 
  2593  0113                     	;# 
  2594  0114                     	;# 
  2595  0115                     	;# 
  2596  0116                     	;# 
  2597  0117                     	;# 
  2598  0118                     	;# 
  2599  0119                     	;# 
  2600  018C                     	;# 
  2601  018E                     	;# 
  2602  0191                     	;# 
  2603  0191                     	;# 
  2604  0192                     	;# 
  2605  0193                     	;# 
  2606  0193                     	;# 
  2607  0194                     	;# 
  2608  0195                     	;# 
  2609  0196                     	;# 
  2610  0197                     	;# 
  2611  0199                     	;# 
  2612  019A                     	;# 
  2613  019B                     	;# 
  2614  019B                     	;# 
  2615  019C                     	;# 
  2616  019D                     	;# 
  2617  019E                     	;# 
  2618  019F                     	;# 
  2619  020C                     	;# 
  2620  020E                     	;# 
  2621  028C                     	;# 
  2622  028E                     	;# 
  2623  030C                     	;# 
  2624  030E                     	;# 
  2625  038C                     	;# 
  2626  038E                     	;# 
  2627  0391                     	;# 
  2628  0392                     	;# 
  2629  0393                     	;# 
  2630  0397                     	;# 
  2631  0398                     	;# 
  2632  0399                     	;# 
  2633  0691                     	;# 
  2634  0692                     	;# 
  2635  0693                     	;# 
  2636  0694                     	;# 
  2637  0695                     	;# 
  2638  0D8E                     	;# 
  2639  0D8F                     	;# 
  2640  0D90                     	;# 
  2641  0D91                     	;# 
  2642  0D91                     	;# 
  2643  0D92                     	;# 
  2644  0D93                     	;# 
  2645  0D93                     	;# 
  2646  0D94                     	;# 
  2647  0D95                     	;# 
  2648  0D95                     	;# 
  2649  0D96                     	;# 
  2650  0D97                     	;# 
  2651  0D97                     	;# 
  2652  0D98                     	;# 
  2653  0D99                     	;# 
  2654  0D99                     	;# 
  2655  0D9A                     	;# 
  2656  0D9B                     	;# 
  2657  0D9C                     	;# 
  2658  0D9C                     	;# 
  2659  0D9D                     	;# 
  2660  0D9D                     	;# 
  2661  0D9E                     	;# 
  2662  0D9F                     	;# 
  2663  0DA0                     	;# 
  2664  0DA1                     	;# 
  2665  0DA1                     	;# 
  2666  0DA2                     	;# 
  2667  0DA3                     	;# 
  2668  0DA3                     	;# 
  2669  0DA4                     	;# 
  2670  0DA5                     	;# 
  2671  0DA5                     	;# 
  2672  0DA6                     	;# 
  2673  0DA7                     	;# 
  2674  0DA7                     	;# 
  2675  0DA8                     	;# 
  2676  0DA9                     	;# 
  2677  0DA9                     	;# 
  2678  0DAA                     	;# 
  2679  0DAB                     	;# 
  2680  0DAC                     	;# 
  2681  0DAC                     	;# 
  2682  0DAD                     	;# 
  2683  0DAD                     	;# 
  2684  0DAE                     	;# 
  2685  0DAF                     	;# 
  2686  0DB0                     	;# 
  2687  0DB1                     	;# 
  2688  0DB1                     	;# 
  2689  0DB2                     	;# 
  2690  0DB3                     	;# 
  2691  0DB3                     	;# 
  2692  0DB4                     	;# 
  2693  0DB5                     	;# 
  2694  0DB5                     	;# 
  2695  0DB6                     	;# 
  2696  0DB7                     	;# 
  2697  0DB7                     	;# 
  2698  0DB8                     	;# 
  2699  0DB9                     	;# 
  2700  0DB9                     	;# 
  2701  0DBA                     	;# 
  2702  0DBB                     	;# 
  2703  0DBC                     	;# 
  2704  0DBC                     	;# 
  2705  0DBD                     	;# 
  2706  0DBD                     	;# 
  2707  0DBE                     	;# 
  2708  0DBF                     	;# 
  2709  0DC0                     	;# 
  2710  0DC1                     	;# 
  2711  0DC1                     	;# 
  2712  0DC2                     	;# 
  2713  0DC3                     	;# 
  2714  0DC3                     	;# 
  2715  0DC4                     	;# 
  2716  0DC5                     	;# 
  2717  0DC5                     	;# 
  2718  0DC6                     	;# 
  2719  0DC7                     	;# 
  2720  0DC7                     	;# 
  2721  0DC8                     	;# 
  2722  0DC9                     	;# 
  2723  0DC9                     	;# 
  2724  0DCA                     	;# 
  2725  0DCB                     	;# 
  2726  0DCC                     	;# 
  2727  0DCC                     	;# 
  2728  0DCD                     	;# 
  2729  0DCD                     	;# 
  2730  0DCE                     	;# 
  2731  0DCF                     	;# 
  2732  0DD0                     	;# 
  2733  0E0F                     	;# 
  2734  0E10                     	;# 
  2735  0E11                     	;# 
  2736  0E12                     	;# 
  2737  0E13                     	;# 
  2738  0E14                     	;# 
  2739  0E15                     	;# 
  2740  0E16                     	;# 
  2741  0E17                     	;# 
  2742  0E90                     	;# 
  2743  0E91                     	;# 
  2744  0E92                     	;# 
  2745  0E94                     	;# 
  2746  0E95                     	;# 
  2747  0EA0                     	;# 
  2748  0EA1                     	;# 
  2749  0EA2                     	;# 
  2750  0EA3                     	;# 
  2751  0EA4                     	;# 
  2752  0EA5                     	;# 
  2753  0FE4                     	;# 
  2754  0FE5                     	;# 
  2755  0FE6                     	;# 
  2756  0FE7                     	;# 
  2757  0FE8                     	;# 
  2758  0FE8                     	;# 
  2759  0FE9                     	;# 
  2760  0FEA                     	;# 
  2761  0FEA                     	;# 
  2762  0FEB                     	;# 
  2763  0FED                     	;# 
  2764  0FEE                     	;# 
  2765  0FEE                     	;# 
  2766  0FEF                     	;# 
  2767  0FFF                     	;# 
  2768  0000                     	;# 
  2769  0001                     	;# 
  2770  0002                     	;# 
  2771  0003                     	;# 
  2772  0004                     	;# 
  2773  0005                     	;# 
  2774  0006                     	;# 
  2775  0007                     	;# 
  2776  0008                     	;# 
  2777  0009                     	;# 
  2778  000A                     	;# 
  2779  000B                     	;# 
  2780  000C                     	;# 
  2781  000E                     	;# 
  2782  0011                     	;# 
  2783  0012                     	;# 
  2784  0013                     	;# 
  2785  0015                     	;# 
  2786  0016                     	;# 
  2787  0016                     	;# 
  2788  0017                     	;# 
  2789  0018                     	;# 
  2790  0019                     	;# 
  2791  001A                     	;# 
  2792  001B                     	;# 
  2793  001C                     	;# 
  2794  008C                     	;# 
  2795  008E                     	;# 
  2796  0091                     	;# 
  2797  0092                     	;# 
  2798  0093                     	;# 
  2799  0095                     	;# 
  2800  0096                     	;# 
  2801  0097                     	;# 
  2802  0098                     	;# 
  2803  0099                     	;# 
  2804  009A                     	;# 
  2805  009B                     	;# 
  2806  009B                     	;# 
  2807  009C                     	;# 
  2808  009D                     	;# 
  2809  009E                     	;# 
  2810  009F                     	;# 
  2811  010C                     	;# 
  2812  010E                     	;# 
  2813  0111                     	;# 
  2814  0112                     	;# 
  2815  0113                     	;# 
  2816  0114                     	;# 
  2817  0115                     	;# 
  2818  0116                     	;# 
  2819  0117                     	;# 
  2820  0118                     	;# 
  2821  0119                     	;# 
  2822  018C                     	;# 
  2823  018E                     	;# 
  2824  0191                     	;# 
  2825  0191                     	;# 
  2826  0192                     	;# 
  2827  0193                     	;# 
  2828  0193                     	;# 
  2829  0194                     	;# 
  2830  0195                     	;# 
  2831  0196                     	;# 
  2832  0197                     	;# 
  2833  0199                     	;# 
  2834  019A                     	;# 
  2835  019B                     	;# 
  2836  019B                     	;# 
  2837  019C                     	;# 
  2838  019D                     	;# 
  2839  019E                     	;# 
  2840  019F                     	;# 
  2841  020C                     	;# 
  2842  020E                     	;# 
  2843  028C                     	;# 
  2844  028E                     	;# 
  2845  030C                     	;# 
  2846  030E                     	;# 
  2847  038C                     	;# 
  2848  038E                     	;# 
  2849  0391                     	;# 
  2850  0392                     	;# 
  2851  0393                     	;# 
  2852  0397                     	;# 
  2853  0398                     	;# 
  2854  0399                     	;# 
  2855  0691                     	;# 
  2856  0692                     	;# 
  2857  0693                     	;# 
  2858  0694                     	;# 
  2859  0695                     	;# 
  2860  0D8E                     	;# 
  2861  0D8F                     	;# 
  2862  0D90                     	;# 
  2863  0D91                     	;# 
  2864  0D91                     	;# 
  2865  0D92                     	;# 
  2866  0D93                     	;# 
  2867  0D93                     	;# 
  2868  0D94                     	;# 
  2869  0D95                     	;# 
  2870  0D95                     	;# 
  2871  0D96                     	;# 
  2872  0D97                     	;# 
  2873  0D97                     	;# 
  2874  0D98                     	;# 
  2875  0D99                     	;# 
  2876  0D99                     	;# 
  2877  0D9A                     	;# 
  2878  0D9B                     	;# 
  2879  0D9C                     	;# 
  2880  0D9C                     	;# 
  2881  0D9D                     	;# 
  2882  0D9D                     	;# 
  2883  0D9E                     	;# 
  2884  0D9F                     	;# 
  2885  0DA0                     	;# 
  2886  0DA1                     	;# 
  2887  0DA1                     	;# 
  2888  0DA2                     	;# 
  2889  0DA3                     	;# 
  2890  0DA3                     	;# 
  2891  0DA4                     	;# 
  2892  0DA5                     	;# 
  2893  0DA5                     	;# 
  2894  0DA6                     	;# 
  2895  0DA7                     	;# 
  2896  0DA7                     	;# 
  2897  0DA8                     	;# 
  2898  0DA9                     	;# 
  2899  0DA9                     	;# 
  2900  0DAA                     	;# 
  2901  0DAB                     	;# 
  2902  0DAC                     	;# 
  2903  0DAC                     	;# 
  2904  0DAD                     	;# 
  2905  0DAD                     	;# 
  2906  0DAE                     	;# 
  2907  0DAF                     	;# 
  2908  0DB0                     	;# 
  2909  0DB1                     	;# 
  2910  0DB1                     	;# 
  2911  0DB2                     	;# 
  2912  0DB3                     	;# 
  2913  0DB3                     	;# 
  2914  0DB4                     	;# 
  2915  0DB5                     	;# 
  2916  0DB5                     	;# 
  2917  0DB6                     	;# 
  2918  0DB7                     	;# 
  2919  0DB7                     	;# 
  2920  0DB8                     	;# 
  2921  0DB9                     	;# 
  2922  0DB9                     	;# 
  2923  0DBA                     	;# 
  2924  0DBB                     	;# 
  2925  0DBC                     	;# 
  2926  0DBC                     	;# 
  2927  0DBD                     	;# 
  2928  0DBD                     	;# 
  2929  0DBE                     	;# 
  2930  0DBF                     	;# 
  2931  0DC0                     	;# 
  2932  0DC1                     	;# 
  2933  0DC1                     	;# 
  2934  0DC2                     	;# 
  2935  0DC3                     	;# 
  2936  0DC3                     	;# 
  2937  0DC4                     	;# 
  2938  0DC5                     	;# 
  2939  0DC5                     	;# 
  2940  0DC6                     	;# 
  2941  0DC7                     	;# 
  2942  0DC7                     	;# 
  2943  0DC8                     	;# 
  2944  0DC9                     	;# 
  2945  0DC9                     	;# 
  2946  0DCA                     	;# 
  2947  0DCB                     	;# 
  2948  0DCC                     	;# 
  2949  0DCC                     	;# 
  2950  0DCD                     	;# 
  2951  0DCD                     	;# 
  2952  0DCE                     	;# 
  2953  0DCF                     	;# 
  2954  0DD0                     	;# 
  2955  0E0F                     	;# 
  2956  0E10                     	;# 
  2957  0E11                     	;# 
  2958  0E12                     	;# 
  2959  0E13                     	;# 
  2960  0E14                     	;# 
  2961  0E15                     	;# 
  2962  0E16                     	;# 
  2963  0E17                     	;# 
  2964  0E90                     	;# 
  2965  0E91                     	;# 
  2966  0E92                     	;# 
  2967  0E94                     	;# 
  2968  0E95                     	;# 
  2969  0EA0                     	;# 
  2970  0EA1                     	;# 
  2971  0EA2                     	;# 
  2972  0EA3                     	;# 
  2973  0EA4                     	;# 
  2974  0EA5                     	;# 
  2975  0FE4                     	;# 
  2976  0FE5                     	;# 
  2977  0FE6                     	;# 
  2978  0FE7                     	;# 
  2979  0FE8                     	;# 
  2980  0FE8                     	;# 
  2981  0FE9                     	;# 
  2982  0FEA                     	;# 
  2983  0FEA                     	;# 
  2984  0FEB                     	;# 
  2985  0FED                     	;# 
  2986  0FEE                     	;# 
  2987  0FEE                     	;# 
  2988  0FEF                     	;# 
  2989  0FFF                     	;# 
  2990  0000                     	;# 
  2991  0001                     	;# 
  2992  0002                     	;# 
  2993  0003                     	;# 
  2994  0004                     	;# 
  2995  0005                     	;# 
  2996  0006                     	;# 
  2997  0007                     	;# 
  2998  0008                     	;# 
  2999  0009                     	;# 
  3000  000A                     	;# 
  3001  000B                     	;# 
  3002  000C                     	;# 
  3003  000E                     	;# 
  3004  0011                     	;# 
  3005  0012                     	;# 
  3006  0013                     	;# 
  3007  0015                     	;# 
  3008  0016                     	;# 
  3009  0016                     	;# 
  3010  0017                     	;# 
  3011  0018                     	;# 
  3012  0019                     	;# 
  3013  001A                     	;# 
  3014  001B                     	;# 
  3015  001C                     	;# 
  3016  008C                     	;# 
  3017  008E                     	;# 
  3018  0091                     	;# 
  3019  0092                     	;# 
  3020  0093                     	;# 
  3021  0095                     	;# 
  3022  0096                     	;# 
  3023  0097                     	;# 
  3024  0098                     	;# 
  3025  0099                     	;# 
  3026  009A                     	;# 
  3027  009B                     	;# 
  3028  009B                     	;# 
  3029  009C                     	;# 
  3030  009D                     	;# 
  3031  009E                     	;# 
  3032  009F                     	;# 
  3033  010C                     	;# 
  3034  010E                     	;# 
  3035  0111                     	;# 
  3036  0112                     	;# 
  3037  0113                     	;# 
  3038  0114                     	;# 
  3039  0115                     	;# 
  3040  0116                     	;# 
  3041  0117                     	;# 
  3042  0118                     	;# 
  3043  0119                     	;# 
  3044  018C                     	;# 
  3045  018E                     	;# 
  3046  0191                     	;# 
  3047  0191                     	;# 
  3048  0192                     	;# 
  3049  0193                     	;# 
  3050  0193                     	;# 
  3051  0194                     	;# 
  3052  0195                     	;# 
  3053  0196                     	;# 
  3054  0197                     	;# 
  3055  0199                     	;# 
  3056  019A                     	;# 
  3057  019B                     	;# 
  3058  019B                     	;# 
  3059  019C                     	;# 
  3060  019D                     	;# 
  3061  019E                     	;# 
  3062  019F                     	;# 
  3063  020C                     	;# 
  3064  020E                     	;# 
  3065  028C                     	;# 
  3066  028E                     	;# 
  3067  030C                     	;# 
  3068  030E                     	;# 
  3069  038C                     	;# 
  3070  038E                     	;# 
  3071  0391                     	;# 
  3072  0392                     	;# 
  3073  0393                     	;# 
  3074  0397                     	;# 
  3075  0398                     	;# 
  3076  0399                     	;# 
  3077  0691                     	;# 
  3078  0692                     	;# 
  3079  0693                     	;# 
  3080  0694                     	;# 
  3081  0695                     	;# 
  3082  0D8E                     	;# 
  3083  0D8F                     	;# 
  3084  0D90                     	;# 
  3085  0D91                     	;# 
  3086  0D91                     	;# 
  3087  0D92                     	;# 
  3088  0D93                     	;# 
  3089  0D93                     	;# 
  3090  0D94                     	;# 
  3091  0D95                     	;# 
  3092  0D95                     	;# 
  3093  0D96                     	;# 
  3094  0D97                     	;# 
  3095  0D97                     	;# 
  3096  0D98                     	;# 
  3097  0D99                     	;# 
  3098  0D99                     	;# 
  3099  0D9A                     	;# 
  3100  0D9B                     	;# 
  3101  0D9C                     	;# 
  3102  0D9C                     	;# 
  3103  0D9D                     	;# 
  3104  0D9D                     	;# 
  3105  0D9E                     	;# 
  3106  0D9F                     	;# 
  3107  0DA0                     	;# 
  3108  0DA1                     	;# 
  3109  0DA1                     	;# 
  3110  0DA2                     	;# 
  3111  0DA3                     	;# 
  3112  0DA3                     	;# 
  3113  0DA4                     	;# 
  3114  0DA5                     	;# 
  3115  0DA5                     	;# 
  3116  0DA6                     	;# 
  3117  0DA7                     	;# 
  3118  0DA7                     	;# 
  3119  0DA8                     	;# 
  3120  0DA9                     	;# 
  3121  0DA9                     	;# 
  3122  0DAA                     	;# 
  3123  0DAB                     	;# 
  3124  0DAC                     	;# 
  3125  0DAC                     	;# 
  3126  0DAD                     	;# 
  3127  0DAD                     	;# 
  3128  0DAE                     	;# 
  3129  0DAF                     	;# 
  3130  0DB0                     	;# 
  3131  0DB1                     	;# 
  3132  0DB1                     	;# 
  3133  0DB2                     	;# 
  3134  0DB3                     	;# 
  3135  0DB3                     	;# 
  3136  0DB4                     	;# 
  3137  0DB5                     	;# 
  3138  0DB5                     	;# 
  3139  0DB6                     	;# 
  3140  0DB7                     	;# 
  3141  0DB7                     	;# 
  3142  0DB8                     	;# 
  3143  0DB9                     	;# 
  3144  0DB9                     	;# 
  3145  0DBA                     	;# 
  3146  0DBB                     	;# 
  3147  0DBC                     	;# 
  3148  0DBC                     	;# 
  3149  0DBD                     	;# 
  3150  0DBD                     	;# 
  3151  0DBE                     	;# 
  3152  0DBF                     	;# 
  3153  0DC0                     	;# 
  3154  0DC1                     	;# 
  3155  0DC1                     	;# 
  3156  0DC2                     	;# 
  3157  0DC3                     	;# 
  3158  0DC3                     	;# 
  3159  0DC4                     	;# 
  3160  0DC5                     	;# 
  3161  0DC5                     	;# 
  3162  0DC6                     	;# 
  3163  0DC7                     	;# 
  3164  0DC7                     	;# 
  3165  0DC8                     	;# 
  3166  0DC9                     	;# 
  3167  0DC9                     	;# 
  3168  0DCA                     	;# 
  3169  0DCB                     	;# 
  3170  0DCC                     	;# 
  3171  0DCC                     	;# 
  3172  0DCD                     	;# 
  3173  0DCD                     	;# 
  3174  0DCE                     	;# 
  3175  0DCF                     	;# 
  3176  0DD0                     	;# 
  3177  0E0F                     	;# 
  3178  0E10                     	;# 
  3179  0E11                     	;# 
  3180  0E12                     	;# 
  3181  0E13                     	;# 
  3182  0E14                     	;# 
  3183  0E15                     	;# 
  3184  0E16                     	;# 
  3185  0E17                     	;# 
  3186  0E90                     	;# 
  3187  0E91                     	;# 
  3188  0E92                     	;# 
  3189  0E94                     	;# 
  3190  0E95                     	;# 
  3191  0EA0                     	;# 
  3192  0EA1                     	;# 
  3193  0EA2                     	;# 
  3194  0EA3                     	;# 
  3195  0EA4                     	;# 
  3196  0EA5                     	;# 
  3197  0FE4                     	;# 
  3198  0FE5                     	;# 
  3199  0FE6                     	;# 
  3200  0FE7                     	;# 
  3201  0FE8                     	;# 
  3202  0FE8                     	;# 
  3203  0FE9                     	;# 
  3204  0FEA                     	;# 
  3205  0FEA                     	;# 
  3206  0FEB                     	;# 
  3207  0FED                     	;# 
  3208  0FEE                     	;# 
  3209  0FEE                     	;# 
  3210  0FEF                     	;# 
  3211  0FFF                     	;# 
  3212  0000                     	;# 
  3213  0001                     	;# 
  3214  0002                     	;# 
  3215  0003                     	;# 
  3216  0004                     	;# 
  3217  0005                     	;# 
  3218  0006                     	;# 
  3219  0007                     	;# 
  3220  0008                     	;# 
  3221  0009                     	;# 
  3222  000A                     	;# 
  3223  000B                     	;# 
  3224  000C                     	;# 
  3225  000E                     	;# 
  3226  0011                     	;# 
  3227  0012                     	;# 
  3228  0013                     	;# 
  3229  0015                     	;# 
  3230  0016                     	;# 
  3231  0016                     	;# 
  3232  0017                     	;# 
  3233  0018                     	;# 
  3234  0019                     	;# 
  3235  001A                     	;# 
  3236  001B                     	;# 
  3237  001C                     	;# 
  3238  008C                     	;# 
  3239  008E                     	;# 
  3240  0091                     	;# 
  3241  0092                     	;# 
  3242  0093                     	;# 
  3243  0095                     	;# 
  3244  0096                     	;# 
  3245  0097                     	;# 
  3246  0098                     	;# 
  3247  0099                     	;# 
  3248  009A                     	;# 
  3249  009B                     	;# 
  3250  009B                     	;# 
  3251  009C                     	;# 
  3252  009D                     	;# 
  3253  009E                     	;# 
  3254  009F                     	;# 
  3255  010C                     	;# 
  3256  010E                     	;# 
  3257  0111                     	;# 
  3258  0112                     	;# 
  3259  0113                     	;# 
  3260  0114                     	;# 
  3261  0115                     	;# 
  3262  0116                     	;# 
  3263  0117                     	;# 
  3264  0118                     	;# 
  3265  0119                     	;# 
  3266  018C                     	;# 
  3267  018E                     	;# 
  3268  0191                     	;# 
  3269  0191                     	;# 
  3270  0192                     	;# 
  3271  0193                     	;# 
  3272  0193                     	;# 
  3273  0194                     	;# 
  3274  0195                     	;# 
  3275  0196                     	;# 
  3276  0197                     	;# 
  3277  0199                     	;# 
  3278  019A                     	;# 
  3279  019B                     	;# 
  3280  019B                     	;# 
  3281  019C                     	;# 
  3282  019D                     	;# 
  3283  019E                     	;# 
  3284  019F                     	;# 
  3285  020C                     	;# 
  3286  020E                     	;# 
  3287  028C                     	;# 
  3288  028E                     	;# 
  3289  030C                     	;# 
  3290  030E                     	;# 
  3291  038C                     	;# 
  3292  038E                     	;# 
  3293  0391                     	;# 
  3294  0392                     	;# 
  3295  0393                     	;# 
  3296  0397                     	;# 
  3297  0398                     	;# 
  3298  0399                     	;# 
  3299  0691                     	;# 
  3300  0692                     	;# 
  3301  0693                     	;# 
  3302  0694                     	;# 
  3303  0695                     	;# 
  3304  0D8E                     	;# 
  3305  0D8F                     	;# 
  3306  0D90                     	;# 
  3307  0D91                     	;# 
  3308  0D91                     	;# 
  3309  0D92                     	;# 
  3310  0D93                     	;# 
  3311  0D93                     	;# 
  3312  0D94                     	;# 
  3313  0D95                     	;# 
  3314  0D95                     	;# 
  3315  0D96                     	;# 
  3316  0D97                     	;# 
  3317  0D97                     	;# 
  3318  0D98                     	;# 
  3319  0D99                     	;# 
  3320  0D99                     	;# 
  3321  0D9A                     	;# 
  3322  0D9B                     	;# 
  3323  0D9C                     	;# 
  3324  0D9C                     	;# 
  3325  0D9D                     	;# 
  3326  0D9D                     	;# 
  3327  0D9E                     	;# 
  3328  0D9F                     	;# 
  3329  0DA0                     	;# 
  3330  0DA1                     	;# 
  3331  0DA1                     	;# 
  3332  0DA2                     	;# 
  3333  0DA3                     	;# 
  3334  0DA3                     	;# 
  3335  0DA4                     	;# 
  3336  0DA5                     	;# 
  3337  0DA5                     	;# 
  3338  0DA6                     	;# 
  3339  0DA7                     	;# 
  3340  0DA7                     	;# 
  3341  0DA8                     	;# 
  3342  0DA9                     	;# 
  3343  0DA9                     	;# 
  3344  0DAA                     	;# 
  3345  0DAB                     	;# 
  3346  0DAC                     	;# 
  3347  0DAC                     	;# 
  3348  0DAD                     	;# 
  3349  0DAD                     	;# 
  3350  0DAE                     	;# 
  3351  0DAF                     	;# 
  3352  0DB0                     	;# 
  3353  0DB1                     	;# 
  3354  0DB1                     	;# 
  3355  0DB2                     	;# 
  3356  0DB3                     	;# 
  3357  0DB3                     	;# 
  3358  0DB4                     	;# 
  3359  0DB5                     	;# 
  3360  0DB5                     	;# 
  3361  0DB6                     	;# 
  3362  0DB7                     	;# 
  3363  0DB7                     	;# 
  3364  0DB8                     	;# 
  3365  0DB9                     	;# 
  3366  0DB9                     	;# 
  3367  0DBA                     	;# 
  3368  0DBB                     	;# 
  3369  0DBC                     	;# 
  3370  0DBC                     	;# 
  3371  0DBD                     	;# 
  3372  0DBD                     	;# 
  3373  0DBE                     	;# 
  3374  0DBF                     	;# 
  3375  0DC0                     	;# 
  3376  0DC1                     	;# 
  3377  0DC1                     	;# 
  3378  0DC2                     	;# 
  3379  0DC3                     	;# 
  3380  0DC3                     	;# 
  3381  0DC4                     	;# 
  3382  0DC5                     	;# 
  3383  0DC5                     	;# 
  3384  0DC6                     	;# 
  3385  0DC7                     	;# 
  3386  0DC7                     	;# 
  3387  0DC8                     	;# 
  3388  0DC9                     	;# 
  3389  0DC9                     	;# 
  3390  0DCA                     	;# 
  3391  0DCB                     	;# 
  3392  0DCC                     	;# 
  3393  0DCC                     	;# 
  3394  0DCD                     	;# 
  3395  0DCD                     	;# 
  3396  0DCE                     	;# 
  3397  0DCF                     	;# 
  3398  0DD0                     	;# 
  3399  0E0F                     	;# 
  3400  0E10                     	;# 
  3401  0E11                     	;# 
  3402  0E12                     	;# 
  3403  0E13                     	;# 
  3404  0E14                     	;# 
  3405  0E15                     	;# 
  3406  0E16                     	;# 
  3407  0E17                     	;# 
  3408  0E90                     	;# 
  3409  0E91                     	;# 
  3410  0E92                     	;# 
  3411  0E94                     	;# 
  3412  0E95                     	;# 
  3413  0EA0                     	;# 
  3414  0EA1                     	;# 
  3415  0EA2                     	;# 
  3416  0EA3                     	;# 
  3417  0EA4                     	;# 
  3418  0EA5                     	;# 
  3419  0FE4                     	;# 
  3420  0FE5                     	;# 
  3421  0FE6                     	;# 
  3422  0FE7                     	;# 
  3423  0FE8                     	;# 
  3424  0FE8                     	;# 
  3425  0FE9                     	;# 
  3426  0FEA                     	;# 
  3427  0FEA                     	;# 
  3428  0FEB                     	;# 
  3429  0FED                     	;# 
  3430  0FEE                     	;# 
  3431  0FEE                     	;# 
  3432  0FEF                     	;# 
  3433  0FFF                     	;# 
  3434  0000                     	;# 
  3435  0001                     	;# 
  3436  0002                     	;# 
  3437  0003                     	;# 
  3438  0004                     	;# 
  3439  0005                     	;# 
  3440  0006                     	;# 
  3441  0007                     	;# 
  3442  0008                     	;# 
  3443  0009                     	;# 
  3444  000A                     	;# 
  3445  000B                     	;# 
  3446  000C                     	;# 
  3447  000E                     	;# 
  3448  0011                     	;# 
  3449  0012                     	;# 
  3450  0013                     	;# 
  3451  0015                     	;# 
  3452  0016                     	;# 
  3453  0016                     	;# 
  3454  0017                     	;# 
  3455  0018                     	;# 
  3456  0019                     	;# 
  3457  001A                     	;# 
  3458  001B                     	;# 
  3459  001C                     	;# 
  3460  008C                     	;# 
  3461  008E                     	;# 
  3462  0091                     	;# 
  3463  0092                     	;# 
  3464  0093                     	;# 
  3465  0095                     	;# 
  3466  0096                     	;# 
  3467  0097                     	;# 
  3468  0098                     	;# 
  3469  0099                     	;# 
  3470  009A                     	;# 
  3471  009B                     	;# 
  3472  009B                     	;# 
  3473  009C                     	;# 
  3474  009D                     	;# 
  3475  009E                     	;# 
  3476  009F                     	;# 
  3477  010C                     	;# 
  3478  010E                     	;# 
  3479  0111                     	;# 
  3480  0112                     	;# 
  3481  0113                     	;# 
  3482  0114                     	;# 
  3483  0115                     	;# 
  3484  0116                     	;# 
  3485  0117                     	;# 
  3486  0118                     	;# 
  3487  0119                     	;# 
  3488  018C                     	;# 
  3489  018E                     	;# 
  3490  0191                     	;# 
  3491  0191                     	;# 
  3492  0192                     	;# 
  3493  0193                     	;# 
  3494  0193                     	;# 
  3495  0194                     	;# 
  3496  0195                     	;# 
  3497  0196                     	;# 
  3498  0197                     	;# 
  3499  0199                     	;# 
  3500  019A                     	;# 
  3501  019B                     	;# 
  3502  019B                     	;# 
  3503  019C                     	;# 
  3504  019D                     	;# 
  3505  019E                     	;# 
  3506  019F                     	;# 
  3507  020C                     	;# 
  3508  020E                     	;# 
  3509  028C                     	;# 
  3510  028E                     	;# 
  3511  030C                     	;# 
  3512  030E                     	;# 
  3513  038C                     	;# 
  3514  038E                     	;# 
  3515  0391                     	;# 
  3516  0392                     	;# 
  3517  0393                     	;# 
  3518  0397                     	;# 
  3519  0398                     	;# 
  3520  0399                     	;# 
  3521  0691                     	;# 
  3522  0692                     	;# 
  3523  0693                     	;# 
  3524  0694                     	;# 
  3525  0695                     	;# 
  3526  0D8E                     	;# 
  3527  0D8F                     	;# 
  3528  0D90                     	;# 
  3529  0D91                     	;# 
  3530  0D91                     	;# 
  3531  0D92                     	;# 
  3532  0D93                     	;# 
  3533  0D93                     	;# 
  3534  0D94                     	;# 
  3535  0D95                     	;# 
  3536  0D95                     	;# 
  3537  0D96                     	;# 
  3538  0D97                     	;# 
  3539  0D97                     	;# 
  3540  0D98                     	;# 
  3541  0D99                     	;# 
  3542  0D99                     	;# 
  3543  0D9A                     	;# 
  3544  0D9B                     	;# 
  3545  0D9C                     	;# 
  3546  0D9C                     	;# 
  3547  0D9D                     	;# 
  3548  0D9D                     	;# 
  3549  0D9E                     	;# 
  3550  0D9F                     	;# 
  3551  0DA0                     	;# 
  3552  0DA1                     	;# 
  3553  0DA1                     	;# 
  3554  0DA2                     	;# 
  3555  0DA3                     	;# 
  3556  0DA3                     	;# 
  3557  0DA4                     	;# 
  3558  0DA5                     	;# 
  3559  0DA5                     	;# 
  3560  0DA6                     	;# 
  3561  0DA7                     	;# 
  3562  0DA7                     	;# 
  3563  0DA8                     	;# 
  3564  0DA9                     	;# 
  3565  0DA9                     	;# 
  3566  0DAA                     	;# 
  3567  0DAB                     	;# 
  3568  0DAC                     	;# 
  3569  0DAC                     	;# 
  3570  0DAD                     	;# 
  3571  0DAD                     	;# 
  3572  0DAE                     	;# 
  3573  0DAF                     	;# 
  3574  0DB0                     	;# 
  3575  0DB1                     	;# 
  3576  0DB1                     	;# 
  3577  0DB2                     	;# 
  3578  0DB3                     	;# 
  3579  0DB3                     	;# 
  3580  0DB4                     	;# 
  3581  0DB5                     	;# 
  3582  0DB5                     	;# 
  3583  0DB6                     	;# 
  3584  0DB7                     	;# 
  3585  0DB7                     	;# 
  3586  0DB8                     	;# 
  3587  0DB9                     	;# 
  3588  0DB9                     	;# 
  3589  0DBA                     	;# 
  3590  0DBB                     	;# 
  3591  0DBC                     	;# 
  3592  0DBC                     	;# 
  3593  0DBD                     	;# 
  3594  0DBD                     	;# 
  3595  0DBE                     	;# 
  3596  0DBF                     	;# 
  3597  0DC0                     	;# 
  3598  0DC1                     	;# 
  3599  0DC1                     	;# 
  3600  0DC2                     	;# 
  3601  0DC3                     	;# 
  3602  0DC3                     	;# 
  3603  0DC4                     	;# 
  3604  0DC5                     	;# 
  3605  0DC5                     	;# 
  3606  0DC6                     	;# 
  3607  0DC7                     	;# 
  3608  0DC7                     	;# 
  3609  0DC8                     	;# 
  3610  0DC9                     	;# 
  3611  0DC9                     	;# 
  3612  0DCA                     	;# 
  3613  0DCB                     	;# 
  3614  0DCC                     	;# 
  3615  0DCC                     	;# 
  3616  0DCD                     	;# 
  3617  0DCD                     	;# 
  3618  0DCE                     	;# 
  3619  0DCF                     	;# 
  3620  0DD0                     	;# 
  3621  0E0F                     	;# 
  3622  0E10                     	;# 
  3623  0E11                     	;# 
  3624  0E12                     	;# 
  3625  0E13                     	;# 
  3626  0E14                     	;# 
  3627  0E15                     	;# 
  3628  0E16                     	;# 
  3629  0E17                     	;# 
  3630  0E90                     	;# 
  3631  0E91                     	;# 
  3632  0E92                     	;# 
  3633  0E94                     	;# 
  3634  0E95                     	;# 
  3635  0EA0                     	;# 
  3636  0EA1                     	;# 
  3637  0EA2                     	;# 
  3638  0EA3                     	;# 
  3639  0EA4                     	;# 
  3640  0EA5                     	;# 
  3641  0FE4                     	;# 
  3642  0FE5                     	;# 
  3643  0FE6                     	;# 
  3644  0FE7                     	;# 
  3645  0FE8                     	;# 
  3646  0FE8                     	;# 
  3647  0FE9                     	;# 
  3648  0FEA                     	;# 
  3649  0FEA                     	;# 
  3650  0FEB                     	;# 
  3651  0FED                     	;# 
  3652  0FEE                     	;# 
  3653  0FEE                     	;# 
  3654  0FEF                     	;# 
  3655  0FFF                     	;# 
  3656  0000                     	;# 
  3657  0001                     	;# 
  3658  0002                     	;# 
  3659  0003                     	;# 
  3660  0004                     	;# 
  3661  0005                     	;# 
  3662  0006                     	;# 
  3663  0007                     	;# 
  3664  0008                     	;# 
  3665  0009                     	;# 
  3666  000A                     	;# 
  3667  000B                     	;# 
  3668  000C                     	;# 
  3669  000E                     	;# 
  3670  0011                     	;# 
  3671  0012                     	;# 
  3672  0013                     	;# 
  3673  0015                     	;# 
  3674  0016                     	;# 
  3675  0016                     	;# 
  3676  0017                     	;# 
  3677  0018                     	;# 
  3678  0019                     	;# 
  3679  001A                     	;# 
  3680  001B                     	;# 
  3681  001C                     	;# 
  3682  008C                     	;# 
  3683  008E                     	;# 
  3684  0091                     	;# 
  3685  0092                     	;# 
  3686  0093                     	;# 
  3687  0095                     	;# 
  3688  0096                     	;# 
  3689  0097                     	;# 
  3690  0098                     	;# 
  3691  0099                     	;# 
  3692  009A                     	;# 
  3693  009B                     	;# 
  3694  009B                     	;# 
  3695  009C                     	;# 
  3696  009D                     	;# 
  3697  009E                     	;# 
  3698  009F                     	;# 
  3699  010C                     	;# 
  3700  010E                     	;# 
  3701  0111                     	;# 
  3702  0112                     	;# 
  3703  0113                     	;# 
  3704  0114                     	;# 
  3705  0115                     	;# 
  3706  0116                     	;# 
  3707  0117                     	;# 
  3708  0118                     	;# 
  3709  0119                     	;# 
  3710  018C                     	;# 
  3711  018E                     	;# 
  3712  0191                     	;# 
  3713  0191                     	;# 
  3714  0192                     	;# 
  3715  0193                     	;# 
  3716  0193                     	;# 
  3717  0194                     	;# 
  3718  0195                     	;# 
  3719  0196                     	;# 
  3720  0197                     	;# 
  3721  0199                     	;# 
  3722  019A                     	;# 
  3723  019B                     	;# 
  3724  019B                     	;# 
  3725  019C                     	;# 
  3726  019D                     	;# 
  3727  019E                     	;# 
  3728  019F                     	;# 
  3729  020C                     	;# 
  3730  020E                     	;# 
  3731  028C                     	;# 
  3732  028E                     	;# 
  3733  030C                     	;# 
  3734  030E                     	;# 
  3735  038C                     	;# 
  3736  038E                     	;# 
  3737  0391                     	;# 
  3738  0392                     	;# 
  3739  0393                     	;# 
  3740  0397                     	;# 
  3741  0398                     	;# 
  3742  0399                     	;# 
  3743  0691                     	;# 
  3744  0692                     	;# 
  3745  0693                     	;# 
  3746  0694                     	;# 
  3747  0695                     	;# 
  3748  0D8E                     	;# 
  3749  0D8F                     	;# 
  3750  0D90                     	;# 
  3751  0D91                     	;# 
  3752  0D91                     	;# 
  3753  0D92                     	;# 
  3754  0D93                     	;# 
  3755  0D93                     	;# 
  3756  0D94                     	;# 
  3757  0D95                     	;# 
  3758  0D95                     	;# 
  3759  0D96                     	;# 
  3760  0D97                     	;# 
  3761  0D97                     	;# 
  3762  0D98                     	;# 
  3763  0D99                     	;# 
  3764  0D99                     	;# 
  3765  0D9A                     	;# 
  3766  0D9B                     	;# 
  3767  0D9C                     	;# 
  3768  0D9C                     	;# 
  3769  0D9D                     	;# 
  3770  0D9D                     	;# 
  3771  0D9E                     	;# 
  3772  0D9F                     	;# 
  3773  0DA0                     	;# 
  3774  0DA1                     	;# 
  3775  0DA1                     	;# 
  3776  0DA2                     	;# 
  3777  0DA3                     	;# 
  3778  0DA3                     	;# 
  3779  0DA4                     	;# 
  3780  0DA5                     	;# 
  3781  0DA5                     	;# 
  3782  0DA6                     	;# 
  3783  0DA7                     	;# 
  3784  0DA7                     	;# 
  3785  0DA8                     	;# 
  3786  0DA9                     	;# 
  3787  0DA9                     	;# 
  3788  0DAA                     	;# 
  3789  0DAB                     	;# 
  3790  0DAC                     	;# 
  3791  0DAC                     	;# 
  3792  0DAD                     	;# 
  3793  0DAD                     	;# 
  3794  0DAE                     	;# 
  3795  0DAF                     	;# 
  3796  0DB0                     	;# 
  3797  0DB1                     	;# 
  3798  0DB1                     	;# 
  3799  0DB2                     	;# 
  3800  0DB3                     	;# 
  3801  0DB3                     	;# 
  3802  0DB4                     	;# 
  3803  0DB5                     	;# 
  3804  0DB5                     	;# 
  3805  0DB6                     	;# 
  3806  0DB7                     	;# 
  3807  0DB7                     	;# 
  3808  0DB8                     	;# 
  3809  0DB9                     	;# 
  3810  0DB9                     	;# 
  3811  0DBA                     	;# 
  3812  0DBB                     	;# 
  3813  0DBC                     	;# 
  3814  0DBC                     	;# 
  3815  0DBD                     	;# 
  3816  0DBD                     	;# 
  3817  0DBE                     	;# 
  3818  0DBF                     	;# 
  3819  0DC0                     	;# 
  3820  0DC1                     	;# 
  3821  0DC1                     	;# 
  3822  0DC2                     	;# 
  3823  0DC3                     	;# 
  3824  0DC3                     	;# 
  3825  0DC4                     	;# 
  3826  0DC5                     	;# 
  3827  0DC5                     	;# 
  3828  0DC6                     	;# 
  3829  0DC7                     	;# 
  3830  0DC7                     	;# 
  3831  0DC8                     	;# 
  3832  0DC9                     	;# 
  3833  0DC9                     	;# 
  3834  0DCA                     	;# 
  3835  0DCB                     	;# 
  3836  0DCC                     	;# 
  3837  0DCC                     	;# 
  3838  0DCD                     	;# 
  3839  0DCD                     	;# 
  3840  0DCE                     	;# 
  3841  0DCF                     	;# 
  3842  0DD0                     	;# 
  3843  0E0F                     	;# 
  3844  0E10                     	;# 
  3845  0E11                     	;# 
  3846  0E12                     	;# 
  3847  0E13                     	;# 
  3848  0E14                     	;# 
  3849  0E15                     	;# 
  3850  0E16                     	;# 
  3851  0E17                     	;# 
  3852  0E90                     	;# 
  3853  0E91                     	;# 
  3854  0E92                     	;# 
  3855  0E94                     	;# 
  3856  0E95                     	;# 
  3857  0EA0                     	;# 
  3858  0EA1                     	;# 
  3859  0EA2                     	;# 
  3860  0EA3                     	;# 
  3861  0EA4                     	;# 
  3862  0EA5                     	;# 
  3863  0FE4                     	;# 
  3864  0FE5                     	;# 
  3865  0FE6                     	;# 
  3866  0FE7                     	;# 
  3867  0FE8                     	;# 
  3868  0FE8                     	;# 
  3869  0FE9                     	;# 
  3870  0FEA                     	;# 
  3871  0FEA                     	;# 
  3872  0FEB                     	;# 
  3873  0FED                     	;# 
  3874  0FEE                     	;# 
  3875  0FEE                     	;# 
  3876  0FEF                     	;# 
  3877  0FFF                     	;_sysData
  3878                           
  3879 ;; Function _TMR2_DefaultInterruptHandler is unused but had its address taken
  3880  0000                     
  3881                           	psect	idataBANK0
  3882  1C74                     __pidataBANK0:	
  3883                           
  3884                           ;initializer for _resRs
  3885  1C74  3410               	retlw	16
  3886  1C75  3427               	retlw	39
  3887                           
  3888                           ;initializer for _resRc
  3889  1C76  3410               	retlw	16
  3890  1C77  3427               	retlw	39
  3891                           
  3892                           	psect	idataBANK1
  3893  1C7E                     __pidataBANK1:	
  3894                           
  3895                           ;initializer for _ik
  3896  1C7E  3418               	retlw	24
  3897  1C7F  3400               	retlw	0
  3898                           
  3899                           ;initializer for _pidU
  3900  1C80  3414               	retlw	20
  3901  1C81  3400               	retlw	0
  3902                           
  3903                           ;initializer for _pidpwm2_U
  3904  1C82  3414               	retlw	20
  3905  1C83  3400               	retlw	0
  3906                           
  3907                           ;initializer for _pwm1DutyForIdrv
  3908  1C84  3405               	retlw	5
  3909  1C85  3400               	retlw	0
  3910                           
  3911                           ;initializer for _pwm2DutyForVout
  3912  1C86  3405               	retlw	5
  3913  1C87  3400               	retlw	0
  3914                           
  3915                           	psect	stringtext1
  3916  181E                     __pstringtext1:	
  3917  181E                     _HexTable:	
  3918  181E  3430               	retlw	48
  3919  181F  3431               	retlw	49
  3920  1820  3432               	retlw	50
  3921  1821  3433               	retlw	51
  3922  1822  3434               	retlw	52
  3923  1823  3435               	retlw	53
  3924  1824  3436               	retlw	54
  3925  1825  3437               	retlw	55
  3926  1826  3438               	retlw	56
  3927  1827  3439               	retlw	57
  3928  1828  3441               	retlw	65
  3929  1829  3442               	retlw	66
  3930  182A  3443               	retlw	67
  3931  182B  3444               	retlw	68
  3932  182C  3445               	retlw	69
  3933  182D  3446               	retlw	70
  3934  182E  3400               	retlw	0
  3935  182F                     __end_of_HexTable:	
  3936  0013                     _PIR3bits	set	19
  3937  001C                     _T2CONbits	set	28
  3938  0011                     _PIR1bits	set	17
  3939  001A                     _TMR2	set	26
  3940  001B                     _PR2	set	27
  3941  001C                     _T2CON	set	28
  3942  000B                     _INTCONbits	set	11
  3943  005F                     _GIE	set	95
  3944  0095                     _OPTION_REGbits	set	149
  3945  008E                     _TRISC	set	142
  3946  008C                     _TRISA	set	140
  3947  009D                     _ADCON0bits	set	157
  3948  009C                     _ADRESH	set	156
  3949  009B                     _ADRESL	set	155
  3950  009F                     _ADCON2	set	159
  3951  009E                     _ADCON1	set	158
  3952  009D                     _ADCON0	set	157
  3953  0097                     _WDTCON	set	151
  3954  0091                     _PIE1bits	set	145
  3955  010E                     _LATC	set	270
  3956  010C                     _LATA	set	268
  3957  0117                     _FVRCONbits	set	279
  3958  0117                     _FVRCON	set	279
  3959  019E                     _TXSTAbits	set	414
  3960  018C                     _ANSELA	set	396
  3961  018E                     _ANSELC	set	398
  3962  019C                     _SPBRGH	set	412
  3963  019B                     _SPBRGL	set	411
  3964  019E                     _TXSTA	set	414
  3965  019D                     _RCSTA	set	413
  3966  019F                     _BAUDCON	set	415
  3967  019A                     _TXREG	set	410
  3968  0199                     _RCREG	set	409
  3969  019D                     _RCSTAbits	set	413
  3970  0196                     _PMCON2	set	406
  3971  0193                     _PMDATL	set	403
  3972  0194                     _PMDATH	set	404
  3973  0195                     _PMCON1bits	set	405
  3974  0192                     _PMADRH	set	402
  3975  0191                     _PMADRL	set	401
  3976  020E                     _WPUC	set	526
  3977  020C                     _WPUA	set	524
  3978  028E                     _ODCONC	set	654
  3979  028C                     _ODCONA	set	652
  3980  0D9D                     _PWM1INTFbits	set	3485
  3981  0D9F                     _PWM1LDCONbits	set	3487
  3982  0D9B                     _PWM1CONbits	set	3483
  3983  0D9B                     _PWM1CON	set	3483
  3984  0D99                     _PWM1TMRL	set	3481
  3985  0D9A                     _PWM1TMRH	set	3482
  3986  0D97                     _PWM1OFL	set	3479
  3987  0D98                     _PWM1OFH	set	3480
  3988  0D95                     _PWM1PRL	set	3477
  3989  0D96                     _PWM1PRH	set	3478
  3990  0D93                     _PWM1DCL	set	3475
  3991  0D94                     _PWM1DCH	set	3476
  3992  0D91                     _PWM1PHL	set	3473
  3993  0D92                     _PWM1PHH	set	3474
  3994  0DA0                     _PWM1OFCON	set	3488
  3995  0D9F                     _PWM1LDCON	set	3487
  3996  0D9E                     _PWM1CLKCON	set	3486
  3997  0D9D                     _PWM1INTF	set	3485
  3998  0D9C                     _PWM1INTE	set	3484
  3999  0DAD                     _PWM2INTFbits	set	3501
  4000  0DAF                     _PWM2LDCONbits	set	3503
  4001  0DAB                     _PWM2CONbits	set	3499
  4002  0DAB                     _PWM2CON	set	3499
  4003  0DA9                     _PWM2TMRL	set	3497
  4004  0DAA                     _PWM2TMRH	set	3498
  4005  0DA7                     _PWM2OFL	set	3495
  4006  0DA8                     _PWM2OFH	set	3496
  4007  0DA5                     _PWM2PRL	set	3493
  4008  0DA6                     _PWM2PRH	set	3494
  4009  0DA3                     _PWM2DCL	set	3491
  4010  0DA4                     _PWM2DCH	set	3492
  4011  0DA1                     _PWM2PHL	set	3489
  4012  0DA2                     _PWM2PHH	set	3490
  4013  0DB0                     _PWM2OFCON	set	3504
  4014  0DAF                     _PWM2LDCON	set	3503
  4015  0DAE                     _PWM2CLKCON	set	3502
  4016  0DAD                     _PWM2INTF	set	3501
  4017  0DAC                     _PWM2INTE	set	3500
  4018  0E15                     _RXPPSbits	set	3605
  4019  0E0F                     _PPSLOCKbits	set	3599
  4020  0E0F                     _PPSLOCK	set	3599
  4021  0EA5                     _RC5PPSbits	set	3749
  4022  0E95                     _RA5PPSbits	set	3733
  4023  0E94                     _RA4PPSbits	set	3732
  4024                           
  4025                           	psect	cinit
  4026  088D                     start_initialization:	
  4027                           ; #config settings
  4028                           
  4029  088D                     __initialization:		;BIGRAM
  4030                           
  4031                           ; Initialize objects allocated to BANK0
  4032  088D  3074               	movlw	low __pidataBANK0
  4033  088E  0084               	movwf	4
  4034  088F  309C               	movlw	(high __pidataBANK0)| (0+128)
  4035  0890  0085               	movwf	5
  4036  0891  306C               	movlw	low __pdataBANK0
  4037  0892  0086               	movwf	6
  4038  0893  3000               	movlw	high __pdataBANK0
  4039  0894  0087               	movwf	7
  4040  0895  3000               	movlw	0
  4041  0896  00FF               	movwf	btemp+1
  4042  0897  3004               	movlw	4
  4043  0898  319C  2494  3188   	fcall	init_ram
  4044                           
  4045                           ; Initialize objects allocated to BANK1
  4046  089B  307E               	movlw	low __pidataBANK1
  4047  089C  0084               	movwf	4
  4048  089D  309C               	movlw	(high __pidataBANK1)| (0+128)
  4049  089E  0085               	movwf	5
  4050  089F  30D4               	movlw	low __pdataBANK1
  4051  08A0  0086               	movwf	6
  4052  08A1  3000               	movlw	high __pdataBANK1
  4053  08A2  0087               	movwf	7
  4054  08A3  3000               	movlw	0
  4055  08A4  00FF               	movwf	btemp+1
  4056  08A5  300A               	movlw	10
  4057  08A6  319C  2494  3188   	fcall	init_ram
  4058                           
  4059                           ; Clear objects allocated to BIGRAM
  4060  08A9  305C               	movlw	low (0+9052)
  4061  08AA  0084               	movwf	4
  4062  08AB  3023               	movlw	high (0+9052)
  4063  08AC  0085               	movwf	5
  4064  08AD  3084               	movlw	132
  4065  08AE  00FE               	movwf	btemp
  4066  08AF  3000               	movlw	0
  4067  08B0  00FF               	movwf	btemp+1
  4068  08B1  319C  2488  3188   	fcall	clear_ram0
  4069                           
  4070                           ; Clear objects allocated to COMMON
  4071  08B4  01FC               	clrf	__pbssCOMMON& (0+127)
  4072                           
  4073                           ; Clear objects allocated to BANK0
  4074  08B5  3047               	movlw	low __pbssBANK0
  4075  08B6  0084               	movwf	4
  4076  08B7  3000               	movlw	high __pbssBANK0
  4077  08B8  0085               	movwf	5
  4078  08B9  3025               	movlw	37
  4079  08BA  00FE               	movwf	btemp
  4080  08BB  3000               	movlw	0
  4081  08BC  00FF               	movwf	btemp+1
  4082  08BD  319C  2488  3188   	fcall	clear_ram0
  4083                           
  4084                           ; Clear objects allocated to BANK1
  4085  08C0  30A0               	movlw	low __pbssBANK1
  4086  08C1  0084               	movwf	4
  4087  08C2  3000               	movlw	high __pbssBANK1
  4088  08C3  0085               	movwf	5
  4089  08C4  3034               	movlw	52
  4090  08C5  00FE               	movwf	btemp
  4091  08C6  3000               	movlw	0
  4092  08C7  00FF               	movwf	btemp+1
  4093  08C8  319C  2488  3188   	fcall	clear_ram0
  4094                           
  4095                           ; Clear objects allocated to BANK2
  4096  08CB  3020               	movlw	low __pbssBANK2
  4097  08CC  0084               	movwf	4
  4098  08CD  3001               	movlw	high __pbssBANK2
  4099  08CE  0085               	movwf	5
  4100  08CF  3040               	movlw	64
  4101  08D0  00FE               	movwf	btemp
  4102  08D1  3000               	movlw	0
  4103  08D2  00FF               	movwf	btemp+1
  4104  08D3  319C  2488  3188   	fcall	clear_ram0
  4105                           
  4106                           ; Clear objects allocated to BANK3
  4107  08D6  30A0               	movlw	low __pbssBANK3
  4108  08D7  0084               	movwf	4
  4109  08D8  3001               	movlw	high __pbssBANK3
  4110  08D9  0085               	movwf	5
  4111  08DA  3040               	movlw	64
  4112  08DB  00FE               	movwf	btemp
  4113  08DC  3000               	movlw	0
  4114  08DD  00FF               	movwf	btemp+1
  4115  08DE  319C  2488         	fcall	clear_ram0
  4116  08E0                     end_of_initialization:	
  4117                           ;End of C runtime variable initialization code
  4118                           
  4119  08E0                     __end_of__initialization:	
  4120  08E0  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4121  08E1  0020               	movlb	0
  4122  08E2  318D  2DBA         	ljmp	_main	;jump to C main() function
  4123                           
  4124                           	psect	bssCOMMON
  4125  007C                     __pbssCOMMON:	
  4126  007C                     _eusartRxIdleTime_ms:	
  4127  007C                     	ds	1
  4128                           
  4129                           	psect	bssBANK0
  4130  0047                     __pbssBANK0:	
  4131  0047                     _y32:	
  4132  0047                     	ds	4
  4133  004B                     _x0:	
  4134  004B                     	ds	4
  4135  004F                     _y0:	
  4136  004F                     	ds	4
  4137  0053                     _rsLoAvg:	
  4138  0053                     	ds	2
  4139  0055                     _voExpectAdcValue:	
  4140  0055                     	ds	2
  4141  0057                     _rtAdcValueVoFb:	
  4142  0057                     	ds	2
  4143  0059                     _rtAdcValueRcHi:	
  4144  0059                     	ds	2
  4145  005B                     _rtAdcValueRcLo:	
  4146  005B                     	ds	2
  4147  005D                     _rtAdcValueRsHi:	
  4148  005D                     	ds	2
  4149  005F                     _rtAdcValueRsLo:	
  4150  005F                     	ds	2
  4151  0061                     _TMR2_InterruptHandler:	
  4152  0061                     	ds	2
  4153  0063                     _pidBbSm:	
  4154  0063                     	ds	1
  4155  0064                     _xlen:	
  4156  0064                     	ds	1
  4157  0065                     _txCount:	
  4158  0065                     	ds	1
  4159  0066                     _txBufLen:	
  4160  0066                     	ds	1
  4161  0067                     _rxtemp:	
  4162  0067                     	ds	1
  4163  0068                     _subTickerX_1s:	
  4164  0068                     	ds	1
  4165  0069                     _subTickerX:	
  4166  0069                     	ds	1
  4167  006A                     _eusartRxCount:	
  4168  006A                     	ds	1
  4169  006B                     _Event:	
  4170  006B                     	ds	1
  4171                           
  4172                           	psect	dataBANK0
  4173  006C                     __pdataBANK0:	
  4174  006C                     _resRs:	
  4175  006C                     	ds	2
  4176  006E                     _resRc:	
  4177  006E                     	ds	2
  4178                           
  4179                           	psect	bssBANK1
  4180  00A0                     __pbssBANK1:	
  4181  00A0                     _err:	
  4182  00A0                     	ds	12
  4183  00AC                     _rsLoAvgBuf:	
  4184  00AC                     	ds	12
  4185  00B8                     _x32:	
  4186  00B8                     	ds	4
  4187  00BC                     _x1:	
  4188  00BC                     	ds	4
  4189  00C0                     _y1:	
  4190  00C0                     	ds	4
  4191  00C4                     _idelta:	
  4192  00C4                     	ds	2
  4193  00C6                     _iexcept:	
  4194  00C6                     	ds	2
  4195  00C8                     _pwm2Ei:	
  4196  00C8                     	ds	2
  4197  00CA                     _voExpectMv:	
  4198  00CA                     	ds	2
  4199  00CC                     _PidTd:	
  4200  00CC                     	ds	2
  4201  00CE                     _PidTi:	
  4202  00CE                     	ds	2
  4203  00D0                     _PidKp:	
  4204  00D0                     	ds	2
  4205  00D2                     _globalTicker:	
  4206  00D2                     	ds	2
  4207                           
  4208                           	psect	dataBANK1
  4209  00D4                     __pdataBANK1:	
  4210  00D4                     _ik:	
  4211  00D4                     	ds	2
  4212  00D6                     _pidU:	
  4213  00D6                     	ds	2
  4214  00D8                     _pidpwm2_U:	
  4215  00D8                     	ds	2
  4216  00DA                     _pwm1DutyForIdrv:	
  4217  00DA                     	ds	2
  4218  00DC                     _pwm2DutyForVout:	
  4219  00DC                     	ds	2
  4220                           
  4221                           	psect	bssBANK2
  4222  0120                     __pbssBANK2:	
  4223  0120                     _modbusBuf:	
  4224  0120                     	ds	32
  4225  0140                     _eusartRxBuffer:	
  4226  0140                     	ds	32
  4227                           
  4228                           	psect	bssBANK3
  4229  01A0                     __pbssBANK3:	
  4230  01A0                     _txBuf:	
  4231  01A0                     	ds	64
  4232                           
  4233                           	psect	inittext
  4234  1C94                     init_ram:	
  4235  1C94  00FE               	movwf	126
  4236  1C95                     initloop:	
  4237  1C95  0012               	moviw fsr0++
  4238  1C96  001E               	movwi fsr1++
  4239  1C97  3001               	movlw	1
  4240  1C98  02FE               	subwf	126,f
  4241  1C99  3000               	movlw	0
  4242  1C9A  3BFF               	subwfb	127,f
  4243  1C9B  087F               	movf	127,w
  4244  1C9C  047E               	iorwf	126,w
  4245  1C9D  1903               	btfsc	3,2
  4246  1C9E  3400               	retlw	0
  4247  1C9F  2C95               	goto	initloop
  4248                           
  4249                           	psect	clrtext
  4250  1C88                     clear_ram0:	
  4251                           ;	Called with FSR0 containing the base address, and
  4252                           ;	btemp/btemp+1 has the size to clear
  4253                           
  4254  1C88  0064               	clrwdt	;clear the watchdog before getting into this loop
  4255  1C89                     clrloop0:	
  4256  1C89  0180               	clrf	0	;clear RAM location pointed to by FSR
  4257  1C8A  3101               	addfsr 0,1
  4258  1C8B  3001               	movlw	1
  4259  1C8C  02FE               	subwf	126,f
  4260  1C8D  3000               	movlw	0
  4261  1C8E  3BFF               	subwfb	127,f
  4262  1C8F  087F               	movf	127,w
  4263  1C90  047E               	iorwf	126,w
  4264  1C91  1903               	btfsc	3,2
  4265  1C92  3400               	retlw	0	;all done for this memory range, return
  4266  1C93  2C89               	goto	clrloop0	;have we reached the end yet?
  4267                           
  4268                           	psect	cstackBANK1
  4269  00DE                     __pcstackBANK1:	
  4270  00DE                     ??_main:	
  4271                           
  4272                           ; 1 bytes @ 0x0
  4273  00DE                     	ds	2
  4274                           
  4275                           	psect	cstackCOMMON
  4276  0070                     __pcstackCOMMON:	
  4277  0070                     ?_TMR2_StartTimer:	
  4278  0070                     ?_PIN_MANAGER_Initialize:	
  4279                           ; 1 bytes @ 0x0
  4280                           
  4281  0070                     ?_OSCILLATOR_Initialize:	
  4282                           ; 1 bytes @ 0x0
  4283                           
  4284  0070                     ?_WDT_Initialize:	
  4285                           ; 1 bytes @ 0x0
  4286                           
  4287  0070                     ?_ADC1_Initialize:	
  4288                           ; 1 bytes @ 0x0
  4289                           
  4290  0070                     ?_EUSART_Initialize:	
  4291                           ; 1 bytes @ 0x0
  4292                           
  4293  0070                     ?_PWM2_Initialize:	
  4294                           ; 1 bytes @ 0x0
  4295                           
  4296  0070                     ?_PWM1_Initialize:	
  4297                           ; 1 bytes @ 0x0
  4298                           
  4299  0070                     ?_TMR2_Initialize:	
  4300                           ; 1 bytes @ 0x0
  4301                           
  4302  0070                     ?_INTERRUPT_InterruptManager:	
  4303                           ; 1 bytes @ 0x0
  4304                           
  4305  0070                     ??_INTERRUPT_InterruptManager:	
  4306                           ; 1 bytes @ 0x0
  4307                           
  4308  0070                     ?_FVR_Initialize:	
  4309                           ; 1 bytes @ 0x0
  4310                           
  4311  0070                     ?_SYSTEM_Initialize:	
  4312                           ; 1 bytes @ 0x0
  4313                           
  4314  0070                     ?_uart_received_start:	
  4315                           ; 1 bytes @ 0x0
  4316                           
  4317  0070                     ?_fvr_set_gain:	
  4318                           ; 1 bytes @ 0x0
  4319                           
  4320  0070                     ?_adc_init:	
  4321                           ; 1 bytes @ 0x0
  4322                           
  4323  0070                     ?_pid_pwm1_idrv_run:	
  4324                           ; 1 bytes @ 0x0
  4325                           
  4326  0070                     ?_pid_pwm2_vout_run:	
  4327                           ; 1 bytes @ 0x0
  4328                           
  4329  0070                     ?_my_flash_read_system_erase:	
  4330                           ; 1 bytes @ 0x0
  4331                           
  4332  0070                     ?_sys_data_save:	
  4333                           ; 1 bytes @ 0x0
  4334                           
  4335  0070                     ?_modbus_response_write_single_register:	
  4336                           ; 1 bytes @ 0x0
  4337                           
  4338  0070                     ?_modbus_response_write_mult_register:	
  4339                           ; 1 bytes @ 0x0
  4340                           
  4341  0070                     ?_modbus_response_command:	
  4342                           ; 1 bytes @ 0x0
  4343                           
  4344  0070                     ?_main:	
  4345                           ; 1 bytes @ 0x0
  4346                           
  4347  0070                     ?_sys_data_init:	
  4348                           ; 1 bytes @ 0x0
  4349                           
  4350                           
  4351                           ; 2 bytes @ 0x0
  4352  0070                     	ds	1
  4353  0071                     ?_FLASH_EraseBlock:	
  4354  0071                     ?_TMR2_SetInterruptHandler:	
  4355                           ; 1 bytes @ 0x1
  4356                           
  4357  0071                     ??_TMR2_StartTimer:	
  4358                           ; 1 bytes @ 0x1
  4359                           
  4360  0071                     ??_PIN_MANAGER_Initialize:	
  4361                           ; 1 bytes @ 0x1
  4362                           
  4363  0071                     ??_OSCILLATOR_Initialize:	
  4364                           ; 1 bytes @ 0x1
  4365                           
  4366  0071                     ??_WDT_Initialize:	
  4367                           ; 1 bytes @ 0x1
  4368                           
  4369  0071                     ??_ADC1_Initialize:	
  4370                           ; 1 bytes @ 0x1
  4371                           
  4372  0071                     ??_EUSART_Initialize:	
  4373                           ; 1 bytes @ 0x1
  4374                           
  4375  0071                     ?_m_mem_cpy_len:	
  4376                           ; 1 bytes @ 0x1
  4377                           
  4378  0071                     ??_PWM2_Initialize:	
  4379                           ; 1 bytes @ 0x1
  4380                           
  4381  0071                     ??_PWM1_Initialize:	
  4382                           ; 1 bytes @ 0x1
  4383                           
  4384  0071                     ??_FVR_Initialize:	
  4385                           ; 1 bytes @ 0x1
  4386                           
  4387  0071                     ??_uart_received_start:	
  4388                           ; 1 bytes @ 0x1
  4389                           
  4390  0071                     ??_fvr_set_gain:	
  4391                           ; 1 bytes @ 0x1
  4392                           
  4393  0071                     ??_adc_init:	
  4394                           ; 1 bytes @ 0x1
  4395                           
  4396  0071                     ?_my_flash_system_read:	
  4397                           ; 1 bytes @ 0x1
  4398                           
  4399  0071                     ?_get_idrv_pwm1_duty:	
  4400                           ; 1 bytes @ 0x1
  4401                           
  4402  0071                     ?_get_vout_pwm2_duty:	
  4403                           ; 2 bytes @ 0x1
  4404                           
  4405  0071                     ?_my_flash_system_write:	
  4406                           ; 2 bytes @ 0x1
  4407                           
  4408  0071                     ?_getRegisterVal:	
  4409                           ; 2 bytes @ 0x1
  4410                           
  4411  0071                     ?_crc_sum:	
  4412                           ; 2 bytes @ 0x1
  4413                           
  4414  0071                     ?___wmul:	
  4415                           ; 2 bytes @ 0x1
  4416                           
  4417  0071                     ?___awdiv:	
  4418                           ; 2 bytes @ 0x1
  4419                           
  4420  0071                     ?___lwdiv:	
  4421                           ; 2 bytes @ 0x1
  4422                           
  4423  0071                     ?___lmul:	
  4424                           ; 2 bytes @ 0x1
  4425                           
  4426  0071                     ?___lldiv:	
  4427                           ; 4 bytes @ 0x1
  4428                           
  4429  0071                     PIN_MANAGER_Initialize@state:	
  4430                           ; 4 bytes @ 0x1
  4431                           
  4432  0071                     FLASH_EraseBlock@startAddr:	
  4433                           ; 1 bytes @ 0x1
  4434                           
  4435  0071                     TMR2_SetInterruptHandler@InterruptHandler:	
  4436                           ; 2 bytes @ 0x1
  4437                           
  4438  0071                     my_flash_system_read@buf:	
  4439                           ; 2 bytes @ 0x1
  4440                           
  4441  0071                     my_flash_system_write@buf:	
  4442                           ; 2 bytes @ 0x1
  4443                           
  4444  0071                     getRegisterVal@addr:	
  4445                           ; 2 bytes @ 0x1
  4446                           
  4447  0071                     m_mem_cpy_len@d:	
  4448                           ; 2 bytes @ 0x1
  4449                           
  4450  0071                     crc_sum@buf:	
  4451                           ; 2 bytes @ 0x1
  4452                           
  4453  0071                     ___wmul@multiplier:	
  4454                           ; 2 bytes @ 0x1
  4455                           
  4456  0071                     ___awdiv@divisor:	
  4457                           ; 2 bytes @ 0x1
  4458                           
  4459  0071                     ___lwdiv@divisor:	
  4460                           ; 2 bytes @ 0x1
  4461                           
  4462  0071                     ___lmul@multiplier:	
  4463                           ; 2 bytes @ 0x1
  4464                           
  4465  0071                     ___lldiv@divisor:	
  4466                           ; 4 bytes @ 0x1
  4467                           
  4468                           
  4469                           ; 4 bytes @ 0x1
  4470  0071                     	ds	1
  4471  0072                     fvr_set_gain@t8:	
  4472  0072                     adc_init@ch:	
  4473                           ; 1 bytes @ 0x2
  4474                           
  4475                           
  4476                           ; 1 bytes @ 0x2
  4477  0072                     	ds	1
  4478  0073                     ??_FLASH_EraseBlock:	
  4479  0073                     ??_TMR2_SetInterruptHandler:	
  4480                           ; 1 bytes @ 0x3
  4481                           
  4482  0073                     ??_TMR2_Initialize:	
  4483                           ; 1 bytes @ 0x3
  4484                           
  4485  0073                     ??_SYSTEM_Initialize:	
  4486                           ; 1 bytes @ 0x3
  4487                           
  4488  0073                     ??_get_idrv_pwm1_duty:	
  4489                           ; 1 bytes @ 0x3
  4490                           
  4491  0073                     ??_get_vout_pwm2_duty:	
  4492                           ; 1 bytes @ 0x3
  4493                           
  4494  0073                     FLASH_EraseBlock@GIEBitValue:	
  4495                           ; 1 bytes @ 0x3
  4496                           
  4497  0073                     fvr_set_gain@g:	
  4498                           ; 1 bytes @ 0x3
  4499                           
  4500  0073                     getRegisterVal@tempData:	
  4501                           ; 1 bytes @ 0x3
  4502                           
  4503  0073                     my_flash_system_read@len:	
  4504                           ; 1 bytes @ 0x3
  4505                           
  4506  0073                     my_flash_system_write@len:	
  4507                           ; 2 bytes @ 0x3
  4508                           
  4509  0073                     m_mem_cpy_len@s:	
  4510                           ; 2 bytes @ 0x3
  4511                           
  4512  0073                     crc_sum@len:	
  4513                           ; 2 bytes @ 0x3
  4514                           
  4515  0073                     ___wmul@multiplicand:	
  4516                           ; 2 bytes @ 0x3
  4517                           
  4518  0073                     ___awdiv@dividend:	
  4519                           ; 2 bytes @ 0x3
  4520                           
  4521  0073                     ___lwdiv@dividend:	
  4522                           ; 2 bytes @ 0x3
  4523                           
  4524                           
  4525                           ; 2 bytes @ 0x3
  4526  0073                     	ds	1
  4527  0074                     ??_my_flash_read_system_erase:	
  4528  0074                     ??_getRegisterVal:	
  4529                           ; 1 bytes @ 0x4
  4530                           
  4531  0074                     ?_adc_sample:	
  4532                           ; 1 bytes @ 0x4
  4533                           
  4534  0074                     adc_sample@gfvr:	
  4535                           ; 2 bytes @ 0x4
  4536                           
  4537                           
  4538                           ; 1 bytes @ 0x4
  4539  0074                     	ds	1
  4540  0075                     ??_my_flash_system_read:	
  4541  0075                     ??_my_flash_system_write:	
  4542                           ; 1 bytes @ 0x5
  4543                           
  4544  0075                     ??_crc_sum:	
  4545                           ; 1 bytes @ 0x5
  4546                           
  4547  0075                     ??___wmul:	
  4548                           ; 1 bytes @ 0x5
  4549                           
  4550  0075                     ??___awdiv:	
  4551                           ; 1 bytes @ 0x5
  4552                           
  4553  0075                     ??___lwdiv:	
  4554                           ; 1 bytes @ 0x5
  4555                           
  4556  0075                     adc_sample@num:	
  4557                           ; 1 bytes @ 0x5
  4558                           
  4559  0075                     get_idrv_pwm1_duty@t16:	
  4560                           ; 1 bytes @ 0x5
  4561                           
  4562  0075                     get_vout_pwm2_duty@t16:	
  4563                           ; 2 bytes @ 0x5
  4564                           
  4565  0075                     m_mem_cpy_len@len:	
  4566                           ; 2 bytes @ 0x5
  4567                           
  4568  0075                     ___wmul@product:	
  4569                           ; 2 bytes @ 0x5
  4570                           
  4571  0075                     ___lmul@multiplicand:	
  4572                           ; 2 bytes @ 0x5
  4573                           
  4574  0075                     ___lldiv@dividend:	
  4575                           ; 4 bytes @ 0x5
  4576                           
  4577                           
  4578                           ; 4 bytes @ 0x5
  4579  0075                     	ds	1
  4580  0076                     ??_adc_sample:	
  4581  0076                     ___awdiv@counter:	
  4582                           ; 1 bytes @ 0x6
  4583                           
  4584  0076                     ___lwdiv@quotient:	
  4585                           ; 1 bytes @ 0x6
  4586                           
  4587                           
  4588                           ; 2 bytes @ 0x6
  4589  0076                     	ds	1
  4590  0077                     ??_m_mem_cpy_len:	
  4591  0077                     ??_crc_append:	
  4592                           ; 1 bytes @ 0x7
  4593                           
  4594  0077                     ?_set_idrv_pwm1_duty:	
  4595                           ; 1 bytes @ 0x7
  4596                           
  4597  0077                     ?_set_vout_pwm2_duty:	
  4598                           ; 1 bytes @ 0x7
  4599                           
  4600  0077                     my_flash_system_read@GIEBitValue:	
  4601                           ; 1 bytes @ 0x7
  4602                           
  4603  0077                     ___awdiv@sign:	
  4604                           ; 1 bytes @ 0x7
  4605                           
  4606  0077                     set_idrv_pwm1_duty@duty:	
  4607                           ; 1 bytes @ 0x7
  4608                           
  4609  0077                     set_vout_pwm2_duty@duty:	
  4610                           ; 2 bytes @ 0x7
  4611                           
  4612                           
  4613                           ; 2 bytes @ 0x7
  4614  0077                     	ds	1
  4615  0078                     ??_crc_verify:	
  4616  0078                     ?_uart_send_len:	
  4617                           ; 1 bytes @ 0x8
  4618                           
  4619  0078                     uart_send_len@len:	
  4620                           ; 1 bytes @ 0x8
  4621                           
  4622  0078                     ___lwdiv@counter:	
  4623                           ; 1 bytes @ 0x8
  4624                           
  4625  0078                     my_flash_system_read@flashAddr:	
  4626                           ; 1 bytes @ 0x8
  4627                           
  4628  0078                     getRegisterVal@t16:	
  4629                           ; 2 bytes @ 0x8
  4630                           
  4631  0078                     ___awdiv@quotient:	
  4632                           ; 2 bytes @ 0x8
  4633                           
  4634                           
  4635                           ; 2 bytes @ 0x8
  4636  0078                     	ds	1
  4637  0079                     ??_uart_send_len:	
  4638  0079                     ??_set_idrv_pwm1_duty:	
  4639                           ; 1 bytes @ 0x9
  4640                           
  4641  0079                     ??_set_vout_pwm2_duty:	
  4642                           ; 1 bytes @ 0x9
  4643                           
  4644  0079                     ??___lmul:	
  4645                           ; 1 bytes @ 0x9
  4646                           
  4647  0079                     ??___lldiv:	
  4648                           ; 1 bytes @ 0x9
  4649                           
  4650  0079                     ??___aldiv:	
  4651                           ; 1 bytes @ 0x9
  4652                           
  4653  0079                     set_idrv_pwm1_duty@t16:	
  4654                           ; 1 bytes @ 0x9
  4655                           
  4656  0079                     set_vout_pwm2_duty@t16:	
  4657                           ; 2 bytes @ 0x9
  4658                           
  4659                           
  4660                           ; 2 bytes @ 0x9
  4661  0079                     	ds	1
  4662  007A                     ??_calc_rs_lo_avg:	
  4663  007A                     getRegisterVal@tempAddr:	
  4664                           ; 1 bytes @ 0xA
  4665                           
  4666  007A                     my_flash_system_read@i:	
  4667                           ; 1 bytes @ 0xA
  4668                           
  4669                           
  4670                           ; 2 bytes @ 0xA
  4671  007A                     	ds	1
  4672  007B                     uart_send_len@buf:	
  4673                           
  4674                           ; 1 bytes @ 0xB
  4675  007B                     	ds	1
  4676  007C                     ??_sys_data_save:	
  4677                           
  4678                           	psect	cstackBANK0
  4679  0020                     __pcstackBANK0:	
  4680                           ; 1 bytes @ 0xC
  4681                           
  4682  0020                     ??_pid_pwm2_vout_run:	
  4683  0020                     adc_sample@ch:	
  4684                           ; 1 bytes @ 0x0
  4685                           
  4686  0020                     my_flash_system_write@j:	
  4687                           ; 1 bytes @ 0x0
  4688                           
  4689  0020                     crc_sum@j:	
  4690                           ; 2 bytes @ 0x0
  4691                           
  4692  0020                     ___lmul@product:	
  4693                           ; 2 bytes @ 0x0
  4694                           
  4695  0020                     ___lldiv@quotient:	
  4696                           ; 4 bytes @ 0x0
  4697                           
  4698                           
  4699                           ; 4 bytes @ 0x0
  4700  0020                     	ds	1
  4701  0021                     adc_sample@i:	
  4702                           
  4703                           ; 2 bytes @ 0x1
  4704  0021                     	ds	1
  4705  0022                     my_flash_system_write@GIEBitValue:	
  4706  0022                     pid_pwm2_vout_run@__ei:	
  4707                           ; 1 bytes @ 0x2
  4708                           
  4709  0022                     crc_sum@i:	
  4710                           ; 2 bytes @ 0x2
  4711                           
  4712                           
  4713                           ; 2 bytes @ 0x2
  4714  0022                     	ds	1
  4715  0023                     adc_sample@ret:	
  4716  0023                     my_flash_system_write@blocNum:	
  4717                           ; 2 bytes @ 0x3
  4718                           
  4719                           
  4720                           ; 2 bytes @ 0x3
  4721  0023                     	ds	1
  4722  0024                     ?___aldiv:	
  4723  0024                     ___lldiv@counter:	
  4724                           ; 4 bytes @ 0x4
  4725                           
  4726  0024                     pid_pwm2_vout_run@t16:	
  4727                           ; 1 bytes @ 0x4
  4728                           
  4729  0024                     crc_sum@crc:	
  4730                           ; 2 bytes @ 0x4
  4731                           
  4732  0024                     ___aldiv@divisor:	
  4733                           ; 2 bytes @ 0x4
  4734                           
  4735                           
  4736                           ; 4 bytes @ 0x4
  4737  0024                     	ds	1
  4738  0025                     ?_calc_rs_lo_avg:	
  4739  0025                     ?_calc_temp_rs:	
  4740                           ; 2 bytes @ 0x5
  4741                           
  4742  0025                     ?_calc_temp_rc:	
  4743                           ; 4 bytes @ 0x5
  4744                           
  4745  0025                     adc_sample@t16:	
  4746                           ; 4 bytes @ 0x5
  4747                           
  4748  0025                     calc_rs_lo_avg@x:	
  4749                           ; 2 bytes @ 0x5
  4750                           
  4751  0025                     my_flash_system_write@loc:	
  4752                           ; 2 bytes @ 0x5
  4753                           
  4754                           
  4755                           ; 2 bytes @ 0x5
  4756  0025                     	ds	1
  4757  0026                     ?_crc_append:	
  4758  0026                     ?_crc_verify:	
  4759                           ; 1 bytes @ 0x6
  4760                           
  4761  0026                     crc_verify@message:	
  4762                           ; 1 bytes @ 0x6
  4763                           
  4764  0026                     crc_append@message:	
  4765                           ; 2 bytes @ 0x6
  4766                           
  4767                           
  4768                           ; 2 bytes @ 0x6
  4769  0026                     	ds	1
  4770  0027                     my_flash_system_write@flashAddr:	
  4771  0027                     calc_rs_lo_avg@t32:	
  4772                           ; 2 bytes @ 0x7
  4773                           
  4774                           
  4775                           ; 4 bytes @ 0x7
  4776  0027                     	ds	1
  4777  0028                     crc_verify@n:	
  4778  0028                     crc_append@n:	
  4779                           ; 2 bytes @ 0x8
  4780                           
  4781  0028                     ___aldiv@dividend:	
  4782                           ; 2 bytes @ 0x8
  4783                           
  4784                           
  4785                           ; 4 bytes @ 0x8
  4786  0028                     	ds	1
  4787  0029                     ??_calc_temp_rs:	
  4788  0029                     ??_calc_temp_rc:	
  4789                           ; 1 bytes @ 0x9
  4790                           
  4791  0029                     my_flash_system_write@i:	
  4792                           ; 1 bytes @ 0x9
  4793                           
  4794                           
  4795                           ; 1 bytes @ 0x9
  4796  0029                     	ds	1
  4797  002A                     crc_verify@crccal:	
  4798  002A                     crc_append@crc:	
  4799                           ; 2 bytes @ 0xA
  4800                           
  4801                           
  4802                           ; 2 bytes @ 0xA
  4803  002A                     	ds	1
  4804  002B                     calc_rs_lo_avg@i:	
  4805                           
  4806                           ; 1 bytes @ 0xB
  4807  002B                     	ds	1
  4808  002C                     ?_modbus_response_illgeal_function:	
  4809  002C                     ??_modbus_response_write_single_register:	
  4810                           ; 1 bytes @ 0xC
  4811                           
  4812  002C                     ??_modbus_response_write_mult_register:	
  4813                           ; 1 bytes @ 0xC
  4814                           
  4815  002C                     ??_modbus_response_command:	
  4816                           ; 1 bytes @ 0xC
  4817                           
  4818  002C                     modbus_response_illgeal_function@errcode:	
  4819                           ; 1 bytes @ 0xC
  4820                           
  4821  002C                     ___aldiv@counter:	
  4822                           ; 1 bytes @ 0xC
  4823                           
  4824  002C                     crc_verify@expected:	
  4825                           ; 1 bytes @ 0xC
  4826                           
  4827                           
  4828                           ; 2 bytes @ 0xC
  4829  002C                     	ds	1
  4830  002D                     ??_modbus_response_illgeal_function:	
  4831  002D                     modbus_response_write_mult_register@startAddr:	
  4832                           ; 1 bytes @ 0xD
  4833                           
  4834  002D                     ___aldiv@sign:	
  4835                           ; 1 bytes @ 0xD
  4836                           
  4837                           
  4838                           ; 1 bytes @ 0xD
  4839  002D                     	ds	1
  4840  002E                     ??_sys_data_init:	
  4841  002E                     modbus_response_illgeal_function@buf:	
  4842                           ; 1 bytes @ 0xE
  4843                           
  4844  002E                     modbus_response_write_mult_register@len:	
  4845                           ; 1 bytes @ 0xE
  4846                           
  4847  002E                     modbus_response_command@tmpAddr:	
  4848                           ; 1 bytes @ 0xE
  4849                           
  4850  002E                     ___aldiv@quotient:	
  4851                           ; 2 bytes @ 0xE
  4852                           
  4853                           
  4854                           ; 4 bytes @ 0xE
  4855  002E                     	ds	1
  4856  002F                     modbus_response_illgeal_function@pmdbs:	
  4857  002F                     modbus_response_write_mult_register@rbuf:	
  4858                           ; 1 bytes @ 0xF
  4859                           
  4860                           
  4861                           ; 1 bytes @ 0xF
  4862  002F                     	ds	1
  4863  0030                     modbus_response_write_single_register@fiSave:	
  4864  0030                     modbus_response_write_mult_register@stb:	
  4865                           ; 1 bytes @ 0x10
  4866                           
  4867  0030                     modbus_response_command@startAddr:	
  4868                           ; 1 bytes @ 0x10
  4869                           
  4870                           
  4871                           ; 2 bytes @ 0x10
  4872  0030                     	ds	1
  4873  0031                     modbus_response_write_single_register@t16:	
  4874                           
  4875                           ; 2 bytes @ 0x11
  4876  0031                     	ds	1
  4877  0032                     ??_pid_pwm1_idrv_run:	
  4878  0032                     ?_calc_expect_vout_adc_value:	
  4879                           ; 1 bytes @ 0x12
  4880                           
  4881  0032                     modbus_response_command@i:	
  4882                           ; 2 bytes @ 0x12
  4883                           
  4884  0032                     calc_expect_vout_adc_value@x:	
  4885                           ; 1 bytes @ 0x12
  4886                           
  4887                           
  4888                           ; 2 bytes @ 0x12
  4889  0032                     	ds	1
  4890  0033                     modbus_response_write_single_register@i:	
  4891  0033                     modbus_response_command@pmdbs:	
  4892                           ; 1 bytes @ 0x13
  4893                           
  4894                           
  4895                           ; 1 bytes @ 0x13
  4896  0033                     	ds	1
  4897  0034                     ??_calc_expect_vout_adc_value:	
  4898  0034                     modbus_response_write_single_register@pmdbs:	
  4899                           ; 1 bytes @ 0x14
  4900                           
  4901  0034                     modbus_response_command@len:	
  4902                           ; 1 bytes @ 0x14
  4903                           
  4904  0034                     sys_data_init@ret:	
  4905                           ; 1 bytes @ 0x14
  4906                           
  4907                           
  4908                           ; 2 bytes @ 0x14
  4909  0034                     	ds	1
  4910  0035                     modbus_response_write_single_register@rbuf:	
  4911  0035                     modbus_response_command@rbuf:	
  4912                           ; 1 bytes @ 0x15
  4913                           
  4914                           
  4915                           ; 1 bytes @ 0x15
  4916  0035                     	ds	1
  4917  0036                     sys_data_init@i:	
  4918  0036                     modbus_response_write_single_register@startAddr:	
  4919                           ; 2 bytes @ 0x16
  4920                           
  4921  0036                     modbus_response_command@tempData:	
  4922                           ; 2 bytes @ 0x16
  4923                           
  4924                           
  4925                           ; 2 bytes @ 0x16
  4926  0036                     	ds	2
  4927  0038                     ?_modbus_response_process:	
  4928  0038                     modbus_response_process@rlen:	
  4929                           ; 1 bytes @ 0x18
  4930                           
  4931                           
  4932                           ; 2 bytes @ 0x18
  4933  0038                     	ds	2
  4934  003A                     ??_modbus_response_process:	
  4935  003A                     pid_pwm1_idrv_run@t32:	
  4936                           ; 1 bytes @ 0x1A
  4937                           
  4938                           
  4939                           ; 4 bytes @ 0x1A
  4940  003A                     	ds	1
  4941  003B                     modbus_response_process@resp:	
  4942                           
  4943                           ; 1 bytes @ 0x1B
  4944  003B                     	ds	1
  4945  003C                     modbus_response_process@pmdbs:	
  4946                           
  4947                           ; 1 bytes @ 0x1C
  4948  003C                     	ds	1
  4949  003D                     modbus_response_process@rbuf:	
  4950                           
  4951                           ; 1 bytes @ 0x1D
  4952  003D                     	ds	5
  4953  0042                     calc_expect_vout_adc_value@t32:	
  4954                           
  4955                           ; 4 bytes @ 0x22
  4956  0042                     	ds	4
  4957  0046                     calc_expect_vout_adc_value@i:	
  4958                           
  4959                           ; 1 bytes @ 0x26
  4960  0046                     	ds	1
  4961                           
  4962                           	psect	maintext
  4963  0DBA                     __pmaintext:	
  4964 ;;
  4965 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  4966 ;;
  4967 ;; *************** function _main *****************
  4968 ;; Defined at:
  4969 ;;		line 17 in file "src/app/main.c"
  4970 ;; Parameters:    Size  Location     Type
  4971 ;;		None
  4972 ;; Auto vars:     Size  Location     Type
  4973 ;;		None
  4974 ;; Return value:  Size  Location     Type
  4975 ;;                  1    wreg      void 
  4976 ;; Registers used:
  4977 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4978 ;; Tracked objects:
  4979 ;;		On entry : B1F/0
  4980 ;;		On exit  : 0/0
  4981 ;;		Unchanged: 0/0
  4982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4985 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4986 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4987 ;;Total ram usage:        2 bytes
  4988 ;; Hardware stack levels required when called:    6
  4989 ;; This function calls:
  4990 ;;		_SYSTEM_Initialize
  4991 ;;		_adc_sample
  4992 ;;		_calc_expect_vout_adc_value
  4993 ;;		_calc_rs_lo_avg
  4994 ;;		_calc_temp_rc
  4995 ;;		_calc_temp_rs
  4996 ;;		_m_mem_cpy_len
  4997 ;;		_modbus_response_process
  4998 ;;		_pid_pwm1_idrv_run
  4999 ;;		_pid_pwm2_vout_run
  5000 ;;		_sys_data_init
  5001 ;;		_uart_received_start
  5002 ;;		_uart_send_len
  5003 ;; This function is called by:
  5004 ;;		Startup code after reset
  5005 ;; This function uses a non-reentrant model
  5006 ;;
  5007                           
  5008                           
  5009                           ;psect for function _main
  5010  0DBA                     _main:	
  5011                           
  5012                           ;main.c: 19: __nop();
  5013                           
  5014                           ;incstack = 0
  5015                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5016  0DBA  0000               	nop
  5017                           
  5018                           ;main.c: 20: isRunInBoot=0xaa;
  5019  0DBB  30AA               	movlw	170
  5020  0DBC  0021               	movlb	1	; select bank1
  5021  0DBD  00DE               	movwf	??_main^(0+128)
  5022  0DBE  085E               	movf	??_main^(0+128),w
  5023  0DBF  003F               	movlb	31	; select bank31
  5024  0DC0  00FF               	movwf	127	;volatile
  5025                           
  5026                           ;main.c: 21: isRunInBoot=isRunInBoot;
  5027  0DC1  087F               	movf	127,w	;volatile
  5028  0DC2  0021               	movlb	1	; select bank1
  5029  0DC3  00DE               	movwf	??_main^(0+128)
  5030  0DC4  085E               	movf	??_main^(0+128),w
  5031  0DC5  003F               	movlb	31	; select bank31
  5032  0DC6  00FF               	movwf	127	;volatile
  5033                           
  5034                           ;main.c: 22: SYSTEM_Initialize();
  5035  0DC7  319D  2555  318D   	fcall	_SYSTEM_Initialize
  5036                           
  5037                           ;main.c: 23: do{ (INTCONbits.GIE = 1); (INTCONbits.PEIE = 1); }while(0);;
  5038  0DCA  178B               	bsf	11,7	;volatile
  5039  0DCB  170B               	bsf	11,6	;volatile
  5040                           
  5041                           ;main.c: 26: TXSTAbits.TXEN=0;
  5042  0DCC  0023               	movlb	3	; select bank3
  5043  0DCD  129E               	bcf	30,5	;volatile
  5044                           
  5045                           ;main.c: 27: sys_data_init();
  5046  0DCE  3196  2653  318D   	fcall	_sys_data_init
  5047                           
  5048                           ;main.c: 30: modbusBuf[0]=0x55;
  5049  0DD1  3055               	movlw	85
  5050  0DD2  0021               	movlb	1	; select bank1
  5051  0DD3  00DE               	movwf	??_main^(0+128)
  5052  0DD4  085E               	movf	??_main^(0+128),w
  5053  0DD5  0022               	movlb	2	; select bank2
  5054  0DD6  00A0               	movwf	_modbusBuf^(0+256)
  5055                           
  5056                           ;main.c: 31: modbusBuf[1]=0xaa;
  5057  0DD7  30AA               	movlw	170
  5058  0DD8  0021               	movlb	1	; select bank1
  5059  0DD9  00DE               	movwf	??_main^(0+128)
  5060  0DDA  085E               	movf	??_main^(0+128),w
  5061  0DDB  0022               	movlb	2	; select bank2
  5062  0DDC  00A1               	movwf	(_modbusBuf^(0+256)+1)
  5063                           
  5064                           ;main.c: 32: uart_send_len(modbusBuf,2);
  5065  0DDD  3002               	movlw	2
  5066  0DDE  0021               	movlb	1	; select bank1
  5067  0DDF  00DE               	movwf	??_main^(0+128)
  5068  0DE0  085E               	movf	??_main^(0+128),w
  5069  0DE1  00F8               	movwf	uart_send_len@len
  5070  0DE2  3020               	movlw	(low (_modbusBuf| (0+256)))& (0+255)
  5071  0DE3  318F  27C4  318D   	fcall	_uart_send_len
  5072  0DE6                     l5327:	
  5073                           ;main.c: 33: while (1){
  5074                           
  5075                           
  5076                           ;main.c: 34: if(Event & (1<<2)){
  5077  0DE6  0020               	movlb	0	; select bank0
  5078  0DE7  1D6B               	btfss	_Event,2	;volatile
  5079  0DE8  2E8F               	goto	l5357
  5080                           
  5081                           ;main.c: 35: Event &= ~(1<<2);
  5082  0DE9  30FB               	movlw	251
  5083  0DEA  0021               	movlb	1	; select bank1
  5084  0DEB  00DE               	movwf	??_main^(0+128)
  5085  0DEC  085E               	movf	??_main^(0+128),w
  5086  0DED  0020               	movlb	0	; select bank0
  5087  0DEE  05EB               	andwf	_Event,f	;volatile
  5088                           
  5089                           ;main.c: 37: rtAdcValueRsLo=adc_sample(channel_AN6,1,32);
  5090  0DEF  01F4               	clrf	adc_sample@gfvr
  5091  0DF0  0AF4               	incf	adc_sample@gfvr,f
  5092  0DF1  3020               	movlw	32
  5093  0DF2  0021               	movlb	1	; select bank1
  5094  0DF3  00DE               	movwf	??_main^(0+128)
  5095  0DF4  085E               	movf	??_main^(0+128),w
  5096  0DF5  00F5               	movwf	adc_sample@num
  5097  0DF6  3006               	movlw	6
  5098  0DF7  3192  2233  318D   	fcall	_adc_sample
  5099  0DFA  0875               	movf	?_adc_sample+1,w
  5100  0DFB  0020               	movlb	0	; select bank0
  5101  0DFC  00E0               	movwf	_rtAdcValueRsLo+1
  5102  0DFD  0874               	movf	?_adc_sample,w
  5103  0DFE  00DF               	movwf	_rtAdcValueRsLo
  5104                           
  5105                           ;main.c: 39: rtAdcValueRsHi=adc_sample(channel_AN5,3,32);
  5106  0DFF  3003               	movlw	3
  5107  0E00  0021               	movlb	1	; select bank1
  5108  0E01  00DE               	movwf	??_main^(0+128)
  5109  0E02  085E               	movf	??_main^(0+128),w
  5110  0E03  00F4               	movwf	adc_sample@gfvr
  5111  0E04  3020               	movlw	32
  5112  0E05  00DF               	movwf	(??_main+1)^(0+128)
  5113  0E06  085F               	movf	(??_main+1)^(0+128),w
  5114  0E07  00F5               	movwf	adc_sample@num
  5115  0E08  3005               	movlw	5
  5116  0E09  3192  2233  318D   	fcall	_adc_sample
  5117  0E0C  0875               	movf	?_adc_sample+1,w
  5118  0E0D  0020               	movlb	0	; select bank0
  5119  0E0E  00DE               	movwf	_rtAdcValueRsHi+1
  5120  0E0F  0874               	movf	?_adc_sample,w
  5121  0E10  00DD               	movwf	_rtAdcValueRsHi
  5122                           
  5123                           ;main.c: 42: rtAdcValueRcLo=adc_sample(channel_AN4,3,32);
  5124  0E11  3003               	movlw	3
  5125  0E12  0021               	movlb	1	; select bank1
  5126  0E13  00DE               	movwf	??_main^(0+128)
  5127  0E14  085E               	movf	??_main^(0+128),w
  5128  0E15  00F4               	movwf	adc_sample@gfvr
  5129  0E16  3020               	movlw	32
  5130  0E17  00DF               	movwf	(??_main+1)^(0+128)
  5131  0E18  085F               	movf	(??_main+1)^(0+128),w
  5132  0E19  00F5               	movwf	adc_sample@num
  5133  0E1A  3004               	movlw	4
  5134  0E1B  3192  2233  318D   	fcall	_adc_sample
  5135  0E1E  0875               	movf	?_adc_sample+1,w
  5136  0E1F  0020               	movlb	0	; select bank0
  5137  0E20  00DC               	movwf	_rtAdcValueRcLo+1
  5138  0E21  0874               	movf	?_adc_sample,w
  5139  0E22  00DB               	movwf	_rtAdcValueRcLo
  5140                           
  5141                           ;main.c: 43: rtAdcValueRcLo>>=1;
  5142  0E23  3001               	movlw	1
  5143  0E24                     u4905:	
  5144  0E24  36DC               	lsrf	_rtAdcValueRcLo+1,f
  5145  0E25  0CDB               	rrf	_rtAdcValueRcLo,f
  5146  0E26  0B89               	decfsz	9,f
  5147  0E27  2E24               	goto	u4905
  5148                           
  5149                           ;main.c: 44: rtAdcValueRcHi=adc_sample(channel_AN2,3,32);
  5150  0E28  3003               	movlw	3
  5151  0E29  0021               	movlb	1	; select bank1
  5152  0E2A  00DE               	movwf	??_main^(0+128)
  5153  0E2B  085E               	movf	??_main^(0+128),w
  5154  0E2C  00F4               	movwf	adc_sample@gfvr
  5155  0E2D  3020               	movlw	32
  5156  0E2E  00DF               	movwf	(??_main+1)^(0+128)
  5157  0E2F  085F               	movf	(??_main+1)^(0+128),w
  5158  0E30  00F5               	movwf	adc_sample@num
  5159  0E31  3002               	movlw	2
  5160  0E32  3192  2233  318D   	fcall	_adc_sample
  5161  0E35  0875               	movf	?_adc_sample+1,w
  5162  0E36  0020               	movlb	0	; select bank0
  5163  0E37  00DA               	movwf	_rtAdcValueRcHi+1
  5164  0E38  0874               	movf	?_adc_sample,w
  5165  0E39  00D9               	movwf	_rtAdcValueRcHi
  5166                           
  5167                           ;main.c: 45: rtAdcValueRcHi>>=1;
  5168  0E3A  3001               	movlw	1
  5169  0E3B                     u4915:	
  5170  0E3B  36DA               	lsrf	_rtAdcValueRcHi+1,f
  5171  0E3C  0CD9               	rrf	_rtAdcValueRcHi,f
  5172  0E3D  0B89               	decfsz	9,f
  5173  0E3E  2E3B               	goto	u4915
  5174                           
  5175                           ;main.c: 47: rtAdcValueVoFb=adc_sample(channel_AN7,3,32);
  5176  0E3F  3003               	movlw	3
  5177  0E40  0021               	movlb	1	; select bank1
  5178  0E41  00DE               	movwf	??_main^(0+128)
  5179  0E42  085E               	movf	??_main^(0+128),w
  5180  0E43  00F4               	movwf	adc_sample@gfvr
  5181  0E44  3020               	movlw	32
  5182  0E45  00DF               	movwf	(??_main+1)^(0+128)
  5183  0E46  085F               	movf	(??_main+1)^(0+128),w
  5184  0E47  00F5               	movwf	adc_sample@num
  5185  0E48  3007               	movlw	7
  5186  0E49  3192  2233  318D   	fcall	_adc_sample
  5187  0E4C  0875               	movf	?_adc_sample+1,w
  5188  0E4D  0020               	movlb	0	; select bank0
  5189  0E4E  00D8               	movwf	_rtAdcValueVoFb+1
  5190  0E4F  0874               	movf	?_adc_sample,w
  5191  0E50  00D7               	movwf	_rtAdcValueVoFb
  5192                           
  5193                           ;main.c: 48: rtAdcValueVoFb>>=1;
  5194  0E51  3001               	movlw	1
  5195  0E52                     u4925:	
  5196  0E52  36D8               	lsrf	_rtAdcValueVoFb+1,f
  5197  0E53  0CD7               	rrf	_rtAdcValueVoFb,f
  5198  0E54  0B89               	decfsz	9,f
  5199  0E55  2E52               	goto	u4925
  5200                           
  5201                           ;main.c: 50: resRc=calc_temp_rc();
  5202  0E56  3197  2727  318D   	fcall	_calc_temp_rc
  5203  0E59  0020               	movlb	0	; select bank0
  5204  0E5A  0826               	movf	?_calc_temp_rc+1,w
  5205  0E5B  00EF               	movwf	_resRc+1
  5206  0E5C  0825               	movf	?_calc_temp_rc,w
  5207  0E5D  00EE               	movwf	_resRc
  5208                           
  5209                           ;main.c: 51: resRs=calc_temp_rs();
  5210  0E5E  3194  2473  318D   	fcall	_calc_temp_rs
  5211  0E61  0020               	movlb	0	; select bank0
  5212  0E62  0826               	movf	?_calc_temp_rs+1,w
  5213  0E63  00ED               	movwf	_resRs+1
  5214  0E64  0825               	movf	?_calc_temp_rs,w
  5215  0E65  00EC               	movwf	_resRs
  5216                           
  5217                           ;main.c: 53: pid_pwm1_idrv_run();
  5218  0E66  318A  22D8  318D   	fcall	_pid_pwm1_idrv_run
  5219                           
  5220                           ;main.c: 54: rsLoAvg=calc_rs_lo_avg(rtAdcValueRsLo);
  5221  0E69  0020               	movlb	0	; select bank0
  5222  0E6A  0860               	movf	_rtAdcValueRsLo+1,w
  5223  0E6B  00A6               	movwf	calc_rs_lo_avg@x+1
  5224  0E6C  085F               	movf	_rtAdcValueRsLo,w
  5225  0E6D  00A5               	movwf	calc_rs_lo_avg@x
  5226  0E6E  3192  2290  318D   	fcall	_calc_rs_lo_avg
  5227  0E71  0020               	movlb	0	; select bank0
  5228  0E72  0826               	movf	?_calc_rs_lo_avg+1,w
  5229  0E73  00D4               	movwf	_rsLoAvg+1
  5230  0E74  0825               	movf	?_calc_rs_lo_avg,w
  5231  0E75  00D3               	movwf	_rsLoAvg
  5232                           
  5233                           ;main.c: 56: voExpectMv=calc_expect_vout_adc_value(rsLoAvg);
  5234  0E76  0854               	movf	_rsLoAvg+1,w
  5235  0E77  00B3               	movwf	calc_expect_vout_adc_value@x+1
  5236  0E78  0853               	movf	_rsLoAvg,w
  5237  0E79  00B2               	movwf	calc_expect_vout_adc_value@x
  5238  0E7A  3188  20E4  318D   	fcall	_calc_expect_vout_adc_value
  5239  0E7D  0020               	movlb	0	; select bank0
  5240  0E7E  0833               	movf	?_calc_expect_vout_adc_value+1,w
  5241  0E7F  0021               	movlb	1	; select bank1
  5242  0E80  00CB               	movwf	(_voExpectMv+1)^(0+128)
  5243  0E81  0020               	movlb	0	; select bank0
  5244  0E82  0832               	movf	?_calc_expect_vout_adc_value,w
  5245  0E83  0021               	movlb	1	; select bank1
  5246  0E84  00CA               	movwf	_voExpectMv^(0+128)
  5247                           
  5248                           ;main.c: 57: voExpectAdcValue=(voExpectMv<<1);
  5249  0E85  354A               	lslf	_voExpectMv^(0+128),w
  5250  0E86  0020               	movlb	0	; select bank0
  5251  0E87  00D5               	movwf	_voExpectAdcValue
  5252  0E88  0021               	movlb	1	; select bank1
  5253  0E89  0D4B               	rlf	(_voExpectMv+1)^(0+128),w
  5254  0E8A  0020               	movlb	0	; select bank0
  5255  0E8B  00D6               	movwf	_voExpectAdcValue+1
  5256                           
  5257                           ;main.c: 58: pid_pwm2_vout_run();
  5258  0E8C  3195  2503  318D   	fcall	_pid_pwm2_vout_run
  5259  0E8F                     l5357:	
  5260                           
  5261                           ;main.c: 60: };main.c: 62: if(Event & (1<<3)){
  5262  0E8F  0020               	movlb	0	; select bank0
  5263  0E90  1DEB               	btfss	_Event,3	;volatile
  5264  0E91  2E98               	goto	l5361
  5265                           
  5266                           ;main.c: 63: Event &= ~(1<<3);
  5267  0E92  30F7               	movlw	247
  5268  0E93  0021               	movlb	1	; select bank1
  5269  0E94  00DE               	movwf	??_main^(0+128)
  5270  0E95  085E               	movf	??_main^(0+128),w
  5271  0E96  0020               	movlb	0	; select bank0
  5272  0E97  05EB               	andwf	_Event,f	;volatile
  5273  0E98                     l5361:	
  5274                           
  5275                           ;main.c: 105: };main.c: 107: if(Event & (1<<0)){
  5276  0E98  1C6B               	btfss	_Event,0	;volatile
  5277  0E99  2EC9               	goto	l5371
  5278                           
  5279                           ;main.c: 108: Event &= ~ (1<<0);
  5280  0E9A  30FE               	movlw	254
  5281  0E9B  0021               	movlb	1	; select bank1
  5282  0E9C  00DE               	movwf	??_main^(0+128)
  5283  0E9D  085E               	movf	??_main^(0+128),w
  5284  0E9E  0020               	movlb	0	; select bank0
  5285  0E9F  05EB               	andwf	_Event,f	;volatile
  5286                           
  5287                           ;main.c: 109: if(eusartRxCount>0){
  5288  0EA0  086A               	movf	_eusartRxCount,w	;volatile
  5289  0EA1  1903               	btfsc	3,2
  5290  0EA2  2EC6               	goto	l5369
  5291                           
  5292                           ;main.c: 110: m_mem_cpy_len(modbusBuf,eusartRxBuffer,eusartRxCount);
  5293  0EA3  3020               	movlw	low _modbusBuf
  5294  0EA4  00F1               	movwf	m_mem_cpy_len@d
  5295  0EA5  3001               	movlw	high _modbusBuf
  5296  0EA6  00F2               	movwf	m_mem_cpy_len@d+1
  5297  0EA7  3040               	movlw	low _eusartRxBuffer
  5298  0EA8  00F3               	movwf	m_mem_cpy_len@s
  5299  0EA9  3001               	movlw	high _eusartRxBuffer
  5300  0EAA  00F4               	movwf	m_mem_cpy_len@s+1
  5301  0EAB  086A               	movf	_eusartRxCount,w	;volatile
  5302  0EAC  0021               	movlb	1	; select bank1
  5303  0EAD  00DE               	movwf	??_main^(0+128)
  5304  0EAE  01DF               	clrf	(??_main^(0+128)+1)
  5305  0EAF  085E               	movf	??_main^(0+128),w
  5306  0EB0  00F5               	movwf	m_mem_cpy_len@len
  5307  0EB1  085F               	movf	(??_main+1)^(0+128),w
  5308  0EB2  00F6               	movwf	m_mem_cpy_len@len+1
  5309  0EB3  319D  25DF  318D   	fcall	_m_mem_cpy_len
  5310                           
  5311                           ;main.c: 111: modbus_response_process(modbusBuf,eusartRxCount);
  5312  0EB6  0020               	movlb	0	; select bank0
  5313  0EB7  086A               	movf	_eusartRxCount,w	;volatile
  5314  0EB8  0021               	movlb	1	; select bank1
  5315  0EB9  00DE               	movwf	??_main^(0+128)
  5316  0EBA  01DF               	clrf	(??_main^(0+128)+1)
  5317  0EBB  085E               	movf	??_main^(0+128),w
  5318  0EBC  0020               	movlb	0	; select bank0
  5319  0EBD  00B8               	movwf	modbus_response_process@rlen
  5320  0EBE  0021               	movlb	1	; select bank1
  5321  0EBF  085F               	movf	(??_main+1)^(0+128),w
  5322  0EC0  0020               	movlb	0	; select bank0
  5323  0EC1  00B9               	movwf	modbus_response_process@rlen+1
  5324  0EC2  3020               	movlw	(low (_modbusBuf| (0+256)))& (0+255)
  5325  0EC3  3191  2189  318D   	fcall	_modbus_response_process
  5326  0EC6                     l5369:	
  5327                           
  5328                           ;main.c: 113: };main.c: 115: uart_received_start();
  5329  0EC6  319C  2470  318D   	fcall	_uart_received_start
  5330  0EC9                     l5371:	
  5331                           
  5332                           ;main.c: 116: };main.c: 118: __nop();
  5333  0EC9  0000               	nop
  5334  0ECA  2DE6               	goto	l5327
  5335  0ECB                     __end_of_main:	
  5336                           
  5337                           	psect	text1
  5338  1C70                     __ptext1:	
  5339 ;; *************** function _uart_received_start *****************
  5340 ;; Defined at:
  5341 ;;		line 59 in file "src/api/my_uart.c"
  5342 ;; Parameters:    Size  Location     Type
  5343 ;;		None
  5344 ;; Auto vars:     Size  Location     Type
  5345 ;;		None
  5346 ;; Return value:  Size  Location     Type
  5347 ;;                  1    wreg      void 
  5348 ;; Registers used:
  5349 ;;		status,2
  5350 ;; Tracked objects:
  5351 ;;		On entry : 0/0
  5352 ;;		On exit  : 0/0
  5353 ;;		Unchanged: 0/0
  5354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5358 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5359 ;;Total ram usage:        0 bytes
  5360 ;; Hardware stack levels used:    1
  5361 ;; Hardware stack levels required when called:    1
  5362 ;; This function calls:
  5363 ;;		Nothing
  5364 ;; This function is called by:
  5365 ;;		_main
  5366 ;; This function uses a non-reentrant model
  5367 ;;
  5368                           
  5369                           
  5370                           ;psect for function _uart_received_start
  5371  1C70                     _uart_received_start:	
  5372                           
  5373                           ;my_uart.c: 61: eusartRxCount=0;
  5374                           
  5375                           ;incstack = 0
  5376                           ; Regs used in _uart_received_start: [status,2]
  5377  1C70  0020               	movlb	0	; select bank0
  5378  1C71  01EA               	clrf	_eusartRxCount	;volatile
  5379                           
  5380                           ;my_uart.c: 70: eusartRxIdleTime_ms=0;
  5381  1C72  01FC               	clrf	_eusartRxIdleTime_ms	;volatile
  5382  1C73  0008               	return
  5383  1C74                     __end_of_uart_received_start:	
  5384                           
  5385                           	psect	text2
  5386  1653                     __ptext2:	
  5387 ;; *************** function _sys_data_init *****************
  5388 ;; Defined at:
  5389 ;;		line 104 in file "src/api/sysData.c"
  5390 ;; Parameters:    Size  Location     Type
  5391 ;;		None
  5392 ;; Auto vars:     Size  Location     Type
  5393 ;;  i               2   22[BANK0 ] unsigned int 
  5394 ;;  ret             2   20[BANK0 ] unsigned int 
  5395 ;; Return value:  Size  Location     Type
  5396 ;;                  2  751[None  ] unsigned int 
  5397 ;; Registers used:
  5398 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5399 ;; Tracked objects:
  5400 ;;		On entry : 0/0
  5401 ;;		On exit  : 0/0
  5402 ;;		Unchanged: 0/0
  5403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5405 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5406 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5407 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5408 ;;Total ram usage:       10 bytes
  5409 ;; Hardware stack levels used:    1
  5410 ;; Hardware stack levels required when called:    4
  5411 ;; This function calls:
  5412 ;;		___wmul
  5413 ;;		_crc_verify
  5414 ;;		_my_flash_system_read
  5415 ;;		_sys_data_save
  5416 ;; This function is called by:
  5417 ;;		_main
  5418 ;; This function uses a non-reentrant model
  5419 ;;
  5420                           
  5421                           
  5422                           ;psect for function _sys_data_init
  5423  1653                     _sys_data_init:	
  5424                           
  5425                           ;sysData.c: 106: uint16_t ret,i;;sysData.c: 107: my_flash_system_read((uint8_t*)&sysData
      +                          ,sizeof(sysData_t));
  5426                           
  5427                           ;incstack = 0
  5428                           ; Regs used in _sys_data_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5429  1653  305C               	movlw	92
  5430  1654  00F1               	movwf	my_flash_system_read@buf
  5431  1655  3023               	movlw	35
  5432  1656  00F2               	movwf	my_flash_system_read@buf+1
  5433  1657  3084               	movlw	132
  5434  1658  00F3               	movwf	my_flash_system_read@len
  5435  1659  3000               	movlw	0
  5436  165A  00F4               	movwf	my_flash_system_read@len+1
  5437  165B  3190  202C  3196   	fcall	_my_flash_system_read
  5438                           
  5439                           ;sysData.c: 108: ret=crc_verify((uint8_t*)&sysData,sizeof(sysData_t));
  5440  165E  305C               	movlw	92
  5441  165F  0020               	movlb	0	; select bank0
  5442  1660  00A6               	movwf	crc_verify@message
  5443  1661  3023               	movlw	35
  5444  1662  00A7               	movwf	crc_verify@message+1
  5445  1663  3084               	movlw	132
  5446  1664  00A8               	movwf	crc_verify@n
  5447  1665  3000               	movlw	0
  5448  1666  00A9               	movwf	crc_verify@n+1
  5449  1667  319E  26C9  3196   	fcall	_crc_verify
  5450  166A  0020               	movlb	0	; select bank0
  5451  166B  00AE               	movwf	??_sys_data_init
  5452  166C  01AF               	clrf	??_sys_data_init+1
  5453  166D  082E               	movf	??_sys_data_init,w
  5454  166E  00B4               	movwf	sys_data_init@ret
  5455  166F  082F               	movf	??_sys_data_init+1,w
  5456  1670  00B5               	movwf	sys_data_init@ret+1
  5457                           
  5458                           ;sysData.c: 109: if(!ret){
  5459  1671  0834               	movf	sys_data_init@ret,w
  5460  1672  0435               	iorwf	sys_data_init@ret+1,w
  5461  1673  1D03               	btfss	3,2
  5462  1674  2F0A               	goto	l5241
  5463                           
  5464                           ;sysData.c: 110: sysData.pidSetFlg0=0x55;
  5465  1675  305C               	movlw	92
  5466  1676  0086               	movwf	6
  5467  1677  3023               	movlw	35
  5468  1678  0087               	movwf	7
  5469  1679  3055               	movlw	85
  5470  167A  3FC0               	movwi [0]fsr1
  5471                           
  5472                           ;sysData.c: 111: sysData.pidSetFlg1=0xaa;
  5473  167B  305D               	movlw	93
  5474  167C  0086               	movwf	6
  5475  167D  3023               	movlw	35
  5476  167E  0087               	movwf	7
  5477  167F  30AA               	movlw	170
  5478  1680  0081               	movwf	1
  5479                           
  5480                           ;sysData.c: 112: sysData.id=0x01;
  5481  1681  305E               	movlw	94
  5482  1682  0086               	movwf	6
  5483  1683  3023               	movlw	35
  5484  1684  0087               	movwf	7
  5485  1685  3001               	movlw	1
  5486  1686  0081               	movwf	1
  5487                           
  5488                           ;sysData.c: 113: for(i=0;i<30;i++){
  5489  1687  01B6               	clrf	sys_data_init@i
  5490  1688  01B7               	clrf	sys_data_init@i+1
  5491  1689  3000               	movlw	0
  5492  168A  0237               	subwf	sys_data_init@i+1,w
  5493  168B  301E               	movlw	30
  5494  168C  1903               	skipnz
  5495  168D  0236               	subwf	sys_data_init@i,w
  5496  168E  1803               	btfsc	3,0
  5497  168F  2EE1               	goto	l5237
  5498  1690                     l5231:	
  5499                           
  5500                           ;sysData.c: 115: sysData.calibRsAdc[i]=9400+i*720;
  5501  1690  0837               	movf	sys_data_init@i+1,w
  5502  1691  00F2               	movwf	___wmul@multiplier+1
  5503  1692  0836               	movf	sys_data_init@i,w
  5504  1693  00F1               	movwf	___wmul@multiplier
  5505  1694  30D0               	movlw	208
  5506  1695  00F3               	movwf	___wmul@multiplicand
  5507  1696  3002               	movlw	2
  5508  1697  00F4               	movwf	___wmul@multiplicand+1
  5509  1698  319D  2570  3196   	fcall	___wmul
  5510  169B  0871               	movf	?___wmul,w
  5511  169C  3EB8               	addlw	184
  5512  169D  0020               	movlb	0	; select bank0
  5513  169E  00AE               	movwf	??_sys_data_init
  5514  169F  3024               	movlw	36
  5515  16A0  3D72               	addwfc	?___wmul+1,w
  5516  16A1  00AF               	movwf	??_sys_data_init+1
  5517  16A2  0837               	movf	sys_data_init@i+1,w
  5518  16A3  00B1               	movwf	??_sys_data_init+3
  5519  16A4  0836               	movf	sys_data_init@i,w
  5520  16A5  00B0               	movwf	??_sys_data_init+2
  5521  16A6  35B0               	lslf	??_sys_data_init+2,f
  5522  16A7  0DB1               	rlf	??_sys_data_init+3,f
  5523  16A8  3066               	movlw	102
  5524  16A9  00B2               	movwf	??_sys_data_init+4
  5525  16AA  3023               	movlw	35
  5526  16AB  00B3               	movwf	??_sys_data_init+5
  5527  16AC  0830               	movf	??_sys_data_init+2,w
  5528  16AD  0732               	addwf	??_sys_data_init+4,w
  5529  16AE  0086               	movwf	6
  5530  16AF  0831               	movf	??_sys_data_init+3,w
  5531  16B0  3D33               	addwfc	??_sys_data_init+5,w
  5532  16B1  0087               	movwf	7
  5533  16B2  082E               	movf	??_sys_data_init,w
  5534  16B3  3FC0               	movwi [0]fsr1
  5535  16B4  082F               	movf	??_sys_data_init+1,w
  5536  16B5  3FC1               	movwi [1]fsr1
  5537                           
  5538                           ;sysData.c: 116: sysData.calibVoMV[i]=i*333;
  5539  16B6  0837               	movf	sys_data_init@i+1,w
  5540  16B7  00F2               	movwf	___wmul@multiplier+1
  5541  16B8  0836               	movf	sys_data_init@i,w
  5542  16B9  00F1               	movwf	___wmul@multiplier
  5543  16BA  304D               	movlw	77
  5544  16BB  00F3               	movwf	___wmul@multiplicand
  5545  16BC  3001               	movlw	1
  5546  16BD  00F4               	movwf	___wmul@multiplicand+1
  5547  16BE  319D  2570  3196   	fcall	___wmul
  5548  16C1  0020               	movlb	0	; select bank0
  5549  16C2  0837               	movf	sys_data_init@i+1,w
  5550  16C3  00AF               	movwf	??_sys_data_init+1
  5551  16C4  0836               	movf	sys_data_init@i,w
  5552  16C5  00AE               	movwf	??_sys_data_init
  5553  16C6  35AE               	lslf	??_sys_data_init,f
  5554  16C7  0DAF               	rlf	??_sys_data_init+1,f
  5555  16C8  30A2               	movlw	162
  5556  16C9  00B0               	movwf	??_sys_data_init+2
  5557  16CA  3023               	movlw	35
  5558  16CB  00B1               	movwf	??_sys_data_init+3
  5559  16CC  082E               	movf	??_sys_data_init,w
  5560  16CD  0730               	addwf	??_sys_data_init+2,w
  5561  16CE  0086               	movwf	6
  5562  16CF  082F               	movf	??_sys_data_init+1,w
  5563  16D0  3D31               	addwfc	??_sys_data_init+3,w
  5564  16D1  0087               	movwf	7
  5565  16D2  0871               	movf	?___wmul,w
  5566  16D3  3FC0               	movwi [0]fsr1
  5567  16D4  0872               	movf	?___wmul+1,w
  5568  16D5  3FC1               	movwi [1]fsr1
  5569  16D6  3001               	movlw	1
  5570  16D7  07B6               	addwf	sys_data_init@i,f
  5571  16D8  3000               	movlw	0
  5572  16D9  3DB7               	addwfc	sys_data_init@i+1,f
  5573  16DA  3000               	movlw	0
  5574  16DB  0237               	subwf	sys_data_init@i+1,w
  5575  16DC  301E               	movlw	30
  5576  16DD  1903               	skipnz
  5577  16DE  0236               	subwf	sys_data_init@i,w
  5578  16DF  1C03               	skipc
  5579  16E0  2E90               	goto	l5231
  5580  16E1                     l5237:	
  5581                           
  5582                           ;sysData.c: 117: };sysData.c: 119: sysData.pidKp=3200;
  5583  16E1  3080               	movlw	128
  5584  16E2  00AE               	movwf	??_sys_data_init
  5585  16E3  300C               	movlw	12
  5586  16E4  00AF               	movwf	??_sys_data_init+1
  5587  16E5  305C               	movlw	92
  5588  16E6  0086               	movwf	6
  5589  16E7  3023               	movlw	35
  5590  16E8  0087               	movwf	7
  5591  16E9  3144               	addfsr 1,4
  5592  16EA  082E               	movf	??_sys_data_init,w
  5593  16EB  3FC0               	movwi [0]fsr1
  5594  16EC  082F               	movf	??_sys_data_init+1,w
  5595  16ED  3FC1               	movwi [1]fsr1
  5596                           
  5597                           ;sysData.c: 120: sysData.pidTi=20;
  5598  16EE  3014               	movlw	20
  5599  16EF  00AE               	movwf	??_sys_data_init
  5600  16F0  3000               	movlw	0
  5601  16F1  00AF               	movwf	??_sys_data_init+1
  5602  16F2  305C               	movlw	92
  5603  16F3  0086               	movwf	6
  5604  16F4  3023               	movlw	35
  5605  16F5  0087               	movwf	7
  5606  16F6  3146               	addfsr 1,6
  5607  16F7  082E               	movf	??_sys_data_init,w
  5608  16F8  3FC0               	movwi [0]fsr1
  5609  16F9  082F               	movf	??_sys_data_init+1,w
  5610  16FA  3FC1               	movwi [1]fsr1
  5611                           
  5612                           ;sysData.c: 121: sysData.pidTd=5;
  5613  16FB  3005               	movlw	5
  5614  16FC  00AE               	movwf	??_sys_data_init
  5615  16FD  3000               	movlw	0
  5616  16FE  00AF               	movwf	??_sys_data_init+1
  5617  16FF  305C               	movlw	92
  5618  1700  0086               	movwf	6
  5619  1701  3023               	movlw	35
  5620  1702  0087               	movwf	7
  5621  1703  3148               	addfsr 1,8
  5622  1704  082E               	movf	??_sys_data_init,w
  5623  1705  3FC0               	movwi [0]fsr1
  5624  1706  082F               	movf	??_sys_data_init+1,w
  5625  1707  3FC1               	movwi [1]fsr1
  5626                           
  5627                           ;sysData.c: 123: sys_data_save();
  5628  1708  319E  2693         	fcall	_sys_data_save
  5629  170A                     l5241:	
  5630                           
  5631                           ;sysData.c: 125: };sysData.c: 126: PidKp=sysData.pidKp;
  5632  170A  305C               	movlw	92
  5633  170B  0086               	movwf	6
  5634  170C  3023               	movlw	35
  5635  170D  0087               	movwf	7
  5636  170E  3144               	addfsr 1,4
  5637  170F  3F40               	moviw [0]fsr1
  5638  1710  0021               	movlb	1	; select bank1
  5639  1711  00D0               	movwf	_PidKp^(0+128)
  5640  1712  3F41               	moviw [1]fsr1
  5641  1713  00D1               	movwf	(_PidKp+1)^(0+128)
  5642                           
  5643                           ;sysData.c: 127: PidTi=sysData.pidTi;
  5644  1714  305C               	movlw	92
  5645  1715  0086               	movwf	6
  5646  1716  3023               	movlw	35
  5647  1717  0087               	movwf	7
  5648  1718  3146               	addfsr 1,6
  5649  1719  3F40               	moviw [0]fsr1
  5650  171A  00CE               	movwf	_PidTi^(0+128)
  5651  171B  3F41               	moviw [1]fsr1
  5652  171C  00CF               	movwf	(_PidTi+1)^(0+128)
  5653                           
  5654                           ;sysData.c: 128: PidTd=sysData.pidTd;;
  5655  171D  305C               	movlw	92
  5656  171E  0086               	movwf	6
  5657  171F  3023               	movlw	35
  5658  1720  0087               	movwf	7
  5659  1721  3148               	addfsr 1,8
  5660  1722  3F40               	moviw [0]fsr1
  5661  1723  00CC               	movwf	_PidTd^(0+128)
  5662  1724  3F41               	moviw [1]fsr1
  5663  1725  00CD               	movwf	(_PidTd+1)^(0+128)
  5664  1726  0008               	return
  5665  1727                     __end_of_sys_data_init:	
  5666                           ;sysData.c: 129: return ret;;	Return value of _sys_data_init is never used
  5667                           
  5668                           
  5669                           	psect	text3
  5670  102C                     __ptext3:	
  5671 ;; *************** function _my_flash_system_read *****************
  5672 ;; Defined at:
  5673 ;;		line 23 in file "src/api/sysData.c"
  5674 ;; Parameters:    Size  Location     Type
  5675 ;;  buf             2    1[COMMON] PTR unsigned char 
  5676 ;;		 -> sysData(132), 
  5677 ;;  len             2    3[COMMON] unsigned int 
  5678 ;; Auto vars:     Size  Location     Type
  5679 ;;  i               2   10[COMMON] unsigned int 
  5680 ;;  flashAddr       2    8[COMMON] unsigned int 
  5681 ;;  GIEBitValue     1    7[COMMON] unsigned char 
  5682 ;; Return value:  Size  Location     Type
  5683 ;;                  1    wreg      void 
  5684 ;; Registers used:
  5685 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5686 ;; Tracked objects:
  5687 ;;		On entry : 0/0
  5688 ;;		On exit  : 0/0
  5689 ;;		Unchanged: 0/0
  5690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5691 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5692 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5693 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5694 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5695 ;;Total ram usage:       11 bytes
  5696 ;; Hardware stack levels used:    1
  5697 ;; Hardware stack levels required when called:    1
  5698 ;; This function calls:
  5699 ;;		Nothing
  5700 ;; This function is called by:
  5701 ;;		_sys_data_init
  5702 ;; This function uses a non-reentrant model
  5703 ;;
  5704                           
  5705                           
  5706                           ;psect for function _my_flash_system_read
  5707  102C                     _my_flash_system_read:	
  5708                           
  5709                           ;sysData.c: 25: uint16_t flashAddr=0x1f00;
  5710                           
  5711                           ;incstack = 0
  5712                           ; Regs used in _my_flash_system_read: [wreg+fsr1l+fsr1h+status,2+status,0]
  5713  102C  3000               	movlw	0
  5714  102D  00F8               	movwf	my_flash_system_read@flashAddr
  5715  102E  301F               	movlw	31
  5716  102F  00F9               	movwf	my_flash_system_read@flashAddr+1
  5717                           
  5718                           ;sysData.c: 26: uint16_t i;;sysData.c: 28: uint8_t GIEBitValue = INTCONbits.GIE;
  5719  1030  3000               	movlw	0
  5720  1031  1B8B               	btfsc	11,7	;volatile
  5721  1032  3001               	movlw	1
  5722  1033  00F7               	movwf	my_flash_system_read@GIEBitValue
  5723                           
  5724                           ;sysData.c: 30: INTCONbits.GIE = 0;
  5725  1034  138B               	bcf	11,7	;volatile
  5726                           
  5727                           ;sysData.c: 32: for(i=0;i<len;i++){
  5728  1035  01FA               	clrf	my_flash_system_read@i
  5729  1036  01FB               	clrf	my_flash_system_read@i+1
  5730  1037                     l3759:	
  5731  1037  0874               	movf	my_flash_system_read@len+1,w
  5732  1038  027B               	subwf	my_flash_system_read@i+1,w
  5733  1039  1D03               	skipz
  5734  103A  283D               	goto	u2465
  5735  103B  0873               	movf	my_flash_system_read@len,w
  5736  103C  027A               	subwf	my_flash_system_read@i,w
  5737  103D                     u2465:	
  5738  103D  1803               	btfsc	3,0
  5739  103E  285E               	goto	l3761
  5740                           
  5741                           ;sysData.c: 34: PMADRL = (flashAddr & 0x00FF);
  5742  103F  0878               	movf	my_flash_system_read@flashAddr,w
  5743  1040  0023               	movlb	3	; select bank3
  5744  1041  0091               	movwf	17	;volatile
  5745                           
  5746                           ;sysData.c: 35: PMADRH = ((flashAddr & 0xFF00) >> 8);
  5747  1042  0879               	movf	my_flash_system_read@flashAddr+1,w
  5748  1043  0092               	movwf	18	;volatile
  5749                           
  5750                           ;sysData.c: 37: PMCON1bits.CFGS = 0;
  5751  1044  1315               	bcf	21,6	;volatile
  5752                           
  5753                           ;sysData.c: 38: PMCON1bits.RD = 1;
  5754  1045  1415               	bsf	21,0	;volatile
  5755                           
  5756                           ;sysData.c: 39: __nop();
  5757  1046  0000               	nop
  5758                           
  5759                           ;sysData.c: 40: __nop();
  5760  1047  0000               	nop
  5761                           
  5762                           ;sysData.c: 41: buf[i]=PMDATL;
  5763  1048  087A               	movf	my_flash_system_read@i,w
  5764  1049  0771               	addwf	my_flash_system_read@buf,w
  5765  104A  00F5               	movwf	??_my_flash_system_read
  5766  104B  087B               	movf	my_flash_system_read@i+1,w
  5767  104C  3D72               	addwfc	my_flash_system_read@buf+1,w
  5768  104D  00F6               	movwf	??_my_flash_system_read+1
  5769  104E  0875               	movf	??_my_flash_system_read,w
  5770  104F  0086               	movwf	6
  5771  1050  0876               	movf	??_my_flash_system_read+1,w
  5772  1051  0087               	movwf	7
  5773  1052  0023               	movlb	3	; select bank3
  5774  1053  0813               	movf	19,w	;volatile
  5775  1054  0081               	movwf	1
  5776                           
  5777                           ;sysData.c: 42: flashAddr++;
  5778  1055  3001               	movlw	1
  5779  1056  07F8               	addwf	my_flash_system_read@flashAddr,f
  5780  1057  3000               	movlw	0
  5781  1058  3DF9               	addwfc	my_flash_system_read@flashAddr+1,f
  5782  1059  3001               	movlw	1
  5783  105A  07FA               	addwf	my_flash_system_read@i,f
  5784  105B  3000               	movlw	0
  5785  105C  3DFB               	addwfc	my_flash_system_read@i+1,f
  5786  105D  2837               	goto	l3759
  5787  105E                     l3761:	
  5788                           
  5789                           ;sysData.c: 43: };sysData.c: 44: INTCONbits.GIE = GIEBitValue;
  5790  105E  0C77               	rrf	my_flash_system_read@GIEBitValue,w
  5791  105F  1C03               	skipc
  5792  1060  138B               	bcf	11,7	;volatile
  5793  1061  1803               	skipnc
  5794  1062  178B               	bsf	11,7	;volatile
  5795  1063  0008               	return
  5796  1064                     __end_of_my_flash_system_read:	
  5797                           
  5798                           	psect	text4
  5799  1D70                     __ptext4:	
  5800 ;; *************** function ___wmul *****************
  5801 ;; Defined at:
  5802 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  5803 ;; Parameters:    Size  Location     Type
  5804 ;;  multiplier      2    1[COMMON] unsigned int 
  5805 ;;  multiplicand    2    3[COMMON] unsigned int 
  5806 ;; Auto vars:     Size  Location     Type
  5807 ;;  product         2    5[COMMON] unsigned int 
  5808 ;; Return value:  Size  Location     Type
  5809 ;;                  2    1[COMMON] unsigned int 
  5810 ;; Registers used:
  5811 ;;		wreg, status,2, status,0
  5812 ;; Tracked objects:
  5813 ;;		On entry : 0/0
  5814 ;;		On exit  : 0/0
  5815 ;;		Unchanged: 0/0
  5816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5817 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5818 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5820 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5821 ;;Total ram usage:        6 bytes
  5822 ;; Hardware stack levels used:    1
  5823 ;; Hardware stack levels required when called:    1
  5824 ;; This function calls:
  5825 ;;		Nothing
  5826 ;; This function is called by:
  5827 ;;		_sys_data_init
  5828 ;; This function uses a non-reentrant model
  5829 ;;
  5830                           
  5831                           
  5832                           ;psect for function ___wmul
  5833  1D70                     ___wmul:	
  5834                           
  5835                           ;incstack = 0
  5836                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5837  1D70  01F5               	clrf	___wmul@product
  5838  1D71  01F6               	clrf	___wmul@product+1
  5839  1D72                     l3947:	
  5840  1D72  1C71               	btfss	___wmul@multiplier,0
  5841  1D73  2D78               	goto	l1092
  5842  1D74  0873               	movf	___wmul@multiplicand,w
  5843  1D75  07F5               	addwf	___wmul@product,f
  5844  1D76  0874               	movf	___wmul@multiplicand+1,w
  5845  1D77  3DF6               	addwfc	___wmul@product+1,f
  5846  1D78                     l1092:	
  5847  1D78  3001               	movlw	1
  5848  1D79                     u2765:	
  5849  1D79  35F3               	lslf	___wmul@multiplicand,f
  5850  1D7A  0DF4               	rlf	___wmul@multiplicand+1,f
  5851  1D7B  0B89               	decfsz	9,f
  5852  1D7C  2D79               	goto	u2765
  5853  1D7D  3001               	movlw	1
  5854  1D7E                     u2775:	
  5855  1D7E  36F2               	lsrf	___wmul@multiplier+1,f
  5856  1D7F  0CF1               	rrf	___wmul@multiplier,f
  5857  1D80  0B89               	decfsz	9,f
  5858  1D81  2D7E               	goto	u2775
  5859  1D82  0871               	movf	___wmul@multiplier,w
  5860  1D83  0472               	iorwf	___wmul@multiplier+1,w
  5861  1D84  1D03               	btfss	3,2
  5862  1D85  2D72               	goto	l3947
  5863  1D86  0876               	movf	___wmul@product+1,w
  5864  1D87  00F2               	movwf	?___wmul+1
  5865  1D88  0875               	movf	___wmul@product,w
  5866  1D89  00F1               	movwf	?___wmul
  5867  1D8A  0008               	return
  5868  1D8B                     __end_of___wmul:	
  5869                           
  5870                           	psect	text5
  5871  1503                     __ptext5:	
  5872 ;; *************** function _pid_pwm2_vout_run *****************
  5873 ;; Defined at:
  5874 ;;		line 375 in file "src/api/sample.c"
  5875 ;; Parameters:    Size  Location     Type
  5876 ;;		None
  5877 ;; Auto vars:     Size  Location     Type
  5878 ;;  t16             2    4[BANK0 ] int 
  5879 ;;  __ei            2    2[BANK0 ] int 
  5880 ;; Return value:  Size  Location     Type
  5881 ;;                  1    wreg      void 
  5882 ;; Registers used:
  5883 ;;		wreg, status,2, status,0, pclath, cstack
  5884 ;; Tracked objects:
  5885 ;;		On entry : 0/0
  5886 ;;		On exit  : 0/0
  5887 ;;		Unchanged: 0/0
  5888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5890 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5891 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5892 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5893 ;;Total ram usage:        6 bytes
  5894 ;; Hardware stack levels used:    1
  5895 ;; Hardware stack levels required when called:    3
  5896 ;; This function calls:
  5897 ;;		___awdiv
  5898 ;;		___lwdiv
  5899 ;;		_set_vout_pwm2_duty
  5900 ;; This function is called by:
  5901 ;;		_main
  5902 ;; This function uses a non-reentrant model
  5903 ;;
  5904                           
  5905                           
  5906                           ;psect for function _pid_pwm2_vout_run
  5907  1503                     _pid_pwm2_vout_run:	
  5908                           
  5909                           ;sample.c: 377: int16_t t16,__ei;;sample.c: 378: t16=voExpectAdcValue-rtAdcValueVoFb;
  5910                           
  5911                           ;incstack = 0
  5912                           ; Regs used in _pid_pwm2_vout_run: [wreg+status,2+status,0+pclath+cstack]
  5913  1503  0020               	movlb	0	; select bank0
  5914  1504  0957               	comf	_rtAdcValueVoFb,w
  5915  1505  00A0               	movwf	??_pid_pwm2_vout_run
  5916  1506  0958               	comf	_rtAdcValueVoFb+1,w
  5917  1507  00A1               	movwf	??_pid_pwm2_vout_run+1
  5918  1508  0AA0               	incf	??_pid_pwm2_vout_run,f
  5919  1509  1903               	skipnz
  5920  150A  0AA1               	incf	??_pid_pwm2_vout_run+1,f
  5921  150B  0855               	movf	_voExpectAdcValue,w
  5922  150C  0720               	addwf	??_pid_pwm2_vout_run,w
  5923  150D  00A4               	movwf	pid_pwm2_vout_run@t16
  5924  150E  0856               	movf	_voExpectAdcValue+1,w
  5925  150F  3D21               	addwfc	??_pid_pwm2_vout_run+1,w
  5926  1510  00A5               	movwf	pid_pwm2_vout_run@t16+1
  5927                           
  5928                           ;sample.c: 379: __ei=t16/150;
  5929  1511  3096               	movlw	150
  5930  1512  00F1               	movwf	___awdiv@divisor
  5931  1513  3000               	movlw	0
  5932  1514  00F2               	movwf	___awdiv@divisor+1
  5933  1515  0825               	movf	pid_pwm2_vout_run@t16+1,w
  5934  1516  00F4               	movwf	___awdiv@dividend+1
  5935  1517  0824               	movf	pid_pwm2_vout_run@t16,w
  5936  1518  00F3               	movwf	___awdiv@dividend
  5937  1519  3190  20E5  3195   	fcall	___awdiv
  5938  151C  0872               	movf	?___awdiv+1,w
  5939  151D  0020               	movlb	0	; select bank0
  5940  151E  00A3               	movwf	pid_pwm2_vout_run@__ei+1
  5941  151F  0871               	movf	?___awdiv,w
  5942  1520  00A2               	movwf	pid_pwm2_vout_run@__ei
  5943                           
  5944                           ;sample.c: 380: if(__ei==0){
  5945  1521  0822               	movf	pid_pwm2_vout_run@__ei,w
  5946  1522  0423               	iorwf	pid_pwm2_vout_run@__ei+1,w
  5947  1523  1D03               	btfss	3,2
  5948  1524  2D46               	goto	l5151
  5949                           
  5950                           ;sample.c: 381: if(t16>16)__ei=1;
  5951  1525  0825               	movf	pid_pwm2_vout_run@t16+1,w
  5952  1526  3A80               	xorlw	128
  5953  1527  00A0               	movwf	??_pid_pwm2_vout_run
  5954  1528  3080               	movlw	128
  5955  1529  0220               	subwf	??_pid_pwm2_vout_run,w
  5956  152A  1D03               	skipz
  5957  152B  2D2E               	goto	u4645
  5958  152C  3011               	movlw	17
  5959  152D  0224               	subwf	pid_pwm2_vout_run@t16,w
  5960  152E                     u4645:	
  5961  152E  1C03               	skipc
  5962  152F  2D35               	goto	l668
  5963  1530  3001               	movlw	1
  5964  1531  0020               	movlb	0	; select bank0
  5965  1532  00A2               	movwf	pid_pwm2_vout_run@__ei
  5966  1533  3000               	movlw	0
  5967  1534  00A3               	movwf	pid_pwm2_vout_run@__ei+1
  5968  1535                     l668:	
  5969                           
  5970                           ;sample.c: 382: if(t16<-16)__ei=-1;
  5971  1535  0020               	movlb	0	; select bank0
  5972  1536  0825               	movf	pid_pwm2_vout_run@t16+1,w
  5973  1537  3A80               	xorlw	128
  5974  1538  00A0               	movwf	??_pid_pwm2_vout_run
  5975  1539  307F               	movlw	127
  5976  153A  0220               	subwf	??_pid_pwm2_vout_run,w
  5977  153B  1D03               	skipz
  5978  153C  2D3F               	goto	u4655
  5979  153D  30F0               	movlw	240
  5980  153E  0224               	subwf	pid_pwm2_vout_run@t16,w
  5981  153F                     u4655:	
  5982  153F  1803               	skipnc
  5983  1540  2D46               	goto	l5151
  5984  1541  30FF               	movlw	255
  5985  1542  0020               	movlb	0	; select bank0
  5986  1543  00A2               	movwf	pid_pwm2_vout_run@__ei
  5987  1544  30FF               	movlw	255
  5988  1545  00A3               	movwf	pid_pwm2_vout_run@__ei+1
  5989  1546                     l5151:	
  5990                           
  5991                           ;sample.c: 383: };sample.c: 385: pwm2Ei=pwm2Ei+__ei;
  5992  1546  0020               	movlb	0	; select bank0
  5993  1547  0822               	movf	pid_pwm2_vout_run@__ei,w
  5994  1548  0021               	movlb	1	; select bank1
  5995  1549  0748               	addwf	_pwm2Ei^(0+128),w
  5996  154A  00C8               	movwf	_pwm2Ei^(0+128)
  5997  154B  0020               	movlb	0	; select bank0
  5998  154C  0823               	movf	pid_pwm2_vout_run@__ei+1,w
  5999  154D  0021               	movlb	1	; select bank1
  6000  154E  3D49               	addwfc	(_pwm2Ei+1)^(0+128),w
  6001  154F  00C9               	movwf	(_pwm2Ei+1)^(0+128)
  6002                           
  6003                           ;sample.c: 389: t16=voExpectAdcValue/10;
  6004  1550  300A               	movlw	10
  6005  1551  00F1               	movwf	___lwdiv@divisor
  6006  1552  3000               	movlw	0
  6007  1553  00F2               	movwf	___lwdiv@divisor+1
  6008  1554  0020               	movlb	0	; select bank0
  6009  1555  0856               	movf	_voExpectAdcValue+1,w
  6010  1556  00F4               	movwf	___lwdiv@dividend+1
  6011  1557  0855               	movf	_voExpectAdcValue,w
  6012  1558  00F3               	movwf	___lwdiv@dividend
  6013  1559  319E  265F  3195   	fcall	___lwdiv
  6014  155C  0872               	movf	?___lwdiv+1,w
  6015  155D  0020               	movlb	0	; select bank0
  6016  155E  00A5               	movwf	pid_pwm2_vout_run@t16+1
  6017  155F  0871               	movf	?___lwdiv,w
  6018  1560  00A4               	movwf	pid_pwm2_vout_run@t16
  6019                           
  6020                           ;sample.c: 391: t16=t16+pwm2Ei;
  6021  1561  0021               	movlb	1	; select bank1
  6022  1562  0848               	movf	_pwm2Ei^(0+128),w
  6023  1563  0020               	movlb	0	; select bank0
  6024  1564  0724               	addwf	pid_pwm2_vout_run@t16,w
  6025  1565  00A4               	movwf	pid_pwm2_vout_run@t16
  6026  1566  0021               	movlb	1	; select bank1
  6027  1567  0849               	movf	(_pwm2Ei+1)^(0+128),w
  6028  1568  0020               	movlb	0	; select bank0
  6029  1569  3D25               	addwfc	pid_pwm2_vout_run@t16+1,w
  6030  156A  00A5               	movwf	pid_pwm2_vout_run@t16+1
  6031                           
  6032                           ;sample.c: 392: if(t16>1580)t16=1580;
  6033  156B  0825               	movf	pid_pwm2_vout_run@t16+1,w
  6034  156C  3A80               	xorlw	128
  6035  156D  00A0               	movwf	??_pid_pwm2_vout_run
  6036  156E  3086               	movlw	134
  6037  156F  0220               	subwf	??_pid_pwm2_vout_run,w
  6038  1570  1D03               	skipz
  6039  1571  2D74               	goto	u4665
  6040  1572  302D               	movlw	45
  6041  1573  0224               	subwf	pid_pwm2_vout_run@t16,w
  6042  1574                     u4665:	
  6043  1574  1C03               	skipc
  6044  1575  2D7B               	goto	l670
  6045  1576  302C               	movlw	44
  6046  1577  0020               	movlb	0	; select bank0
  6047  1578  00A4               	movwf	pid_pwm2_vout_run@t16
  6048  1579  3006               	movlw	6
  6049  157A  00A5               	movwf	pid_pwm2_vout_run@t16+1
  6050  157B                     l670:	
  6051                           
  6052                           ;sample.c: 393: if(t16<5)t16=5;
  6053  157B  0020               	movlb	0	; select bank0
  6054  157C  0825               	movf	pid_pwm2_vout_run@t16+1,w
  6055  157D  3A80               	xorlw	128
  6056  157E  00A0               	movwf	??_pid_pwm2_vout_run
  6057  157F  3080               	movlw	128
  6058  1580  0220               	subwf	??_pid_pwm2_vout_run,w
  6059  1581  1D03               	skipz
  6060  1582  2D85               	goto	u4675
  6061  1583  3005               	movlw	5
  6062  1584  0224               	subwf	pid_pwm2_vout_run@t16,w
  6063  1585                     u4675:	
  6064  1585  1803               	skipnc
  6065  1586  2D8C               	goto	l5163
  6066  1587  3005               	movlw	5
  6067  1588  0020               	movlb	0	; select bank0
  6068  1589  00A4               	movwf	pid_pwm2_vout_run@t16
  6069  158A  3000               	movlw	0
  6070  158B  00A5               	movwf	pid_pwm2_vout_run@t16+1
  6071  158C                     l5163:	
  6072                           
  6073                           ;sample.c: 394: set_vout_pwm2_duty((uint16_t)t16);
  6074  158C  0020               	movlb	0	; select bank0
  6075  158D  0825               	movf	pid_pwm2_vout_run@t16+1,w
  6076  158E  00F8               	movwf	set_vout_pwm2_duty@duty+1
  6077  158F  0824               	movf	pid_pwm2_vout_run@t16,w
  6078  1590  00F7               	movwf	set_vout_pwm2_duty@duty
  6079  1591  319D  25C3         	fcall	_set_vout_pwm2_duty
  6080  1593  0008               	return
  6081  1594                     __end_of_pid_pwm2_vout_run:	
  6082                           
  6083                           	psect	text6
  6084  1DC3                     __ptext6:	
  6085 ;; *************** function _set_vout_pwm2_duty *****************
  6086 ;; Defined at:
  6087 ;;		line 111 in file "src/api/sample.c"
  6088 ;; Parameters:    Size  Location     Type
  6089 ;;  duty            2    7[COMMON] unsigned int 
  6090 ;; Auto vars:     Size  Location     Type
  6091 ;;  t16             2    9[COMMON] unsigned int 
  6092 ;; Return value:  Size  Location     Type
  6093 ;;                  1    wreg      void 
  6094 ;; Registers used:
  6095 ;;		wreg, status,2, pclath, cstack
  6096 ;; Tracked objects:
  6097 ;;		On entry : 0/0
  6098 ;;		On exit  : 0/0
  6099 ;;		Unchanged: 0/0
  6100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6101 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6102 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6104 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6105 ;;Total ram usage:        4 bytes
  6106 ;; Hardware stack levels used:    1
  6107 ;; Hardware stack levels required when called:    2
  6108 ;; This function calls:
  6109 ;;		_get_vout_pwm2_duty
  6110 ;; This function is called by:
  6111 ;;		_pid_pwm2_vout_run
  6112 ;; This function uses a non-reentrant model
  6113 ;;
  6114                           
  6115                           
  6116                           ;psect for function _set_vout_pwm2_duty
  6117  1DC3                     _set_vout_pwm2_duty:	
  6118                           
  6119                           ;sample.c: 114: uint16_t t16;;sample.c: 115: pwm2DutyForVout=duty;
  6120                           
  6121                           ;incstack = 0
  6122                           ; Regs used in _set_vout_pwm2_duty: [wreg+status,2+pclath+cstack]
  6123  1DC3  0878               	movf	set_vout_pwm2_duty@duty+1,w
  6124  1DC4  0021               	movlb	1	; select bank1
  6125  1DC5  00DD               	movwf	(_pwm2DutyForVout+1)^(0+128)
  6126  1DC6  0877               	movf	set_vout_pwm2_duty@duty,w
  6127  1DC7  00DC               	movwf	_pwm2DutyForVout^(0+128)
  6128                           
  6129                           ;sample.c: 116: t16=get_vout_pwm2_duty();
  6130  1DC8  319D  253C  319D   	fcall	_get_vout_pwm2_duty
  6131  1DCB  0872               	movf	?_get_vout_pwm2_duty+1,w
  6132  1DCC  00FA               	movwf	set_vout_pwm2_duty@t16+1
  6133  1DCD  0871               	movf	?_get_vout_pwm2_duty,w
  6134  1DCE  00F9               	movwf	set_vout_pwm2_duty@t16
  6135                           
  6136                           ;sample.c: 117: if(t16==duty)return;
  6137  1DCF  0878               	movf	set_vout_pwm2_duty@duty+1,w
  6138  1DD0  067A               	xorwf	set_vout_pwm2_duty@t16+1,w
  6139  1DD1  1D03               	skipz
  6140  1DD2  2DD5               	goto	u2425
  6141  1DD3  0877               	movf	set_vout_pwm2_duty@duty,w
  6142  1DD4  0679               	xorwf	set_vout_pwm2_duty@t16,w
  6143  1DD5                     u2425:	
  6144  1DD5  1903               	btfsc	3,2
  6145  1DD6  0008               	return
  6146                           
  6147                           ;sample.c: 121: PWM2CONbits.EN = 0;
  6148  1DD7  003B               	movlb	27	; select bank27
  6149  1DD8  13AB               	bcf	43,7	;volatile
  6150                           
  6151                           ;sample.c: 122: PWM2DCL= (uint8_t)(duty&0xff);
  6152  1DD9  0877               	movf	set_vout_pwm2_duty@duty,w
  6153  1DDA  00A3               	movwf	35	;volatile
  6154                           
  6155                           ;sample.c: 123: PWM2DCH=(uint8_t)(duty>>8);
  6156  1DDB  0878               	movf	set_vout_pwm2_duty@duty+1,w
  6157  1DDC  00A4               	movwf	36	;volatile
  6158                           
  6159                           ;sample.c: 124: PWM2CONbits.EN = 1;
  6160  1DDD  17AB               	bsf	43,7	;volatile
  6161  1DDE  0008               	return
  6162  1DDF                     __end_of_set_vout_pwm2_duty:	
  6163                           
  6164                           	psect	text7
  6165  1D3C                     __ptext7:	
  6166 ;; *************** function _get_vout_pwm2_duty *****************
  6167 ;; Defined at:
  6168 ;;		line 102 in file "src/api/sample.c"
  6169 ;; Parameters:    Size  Location     Type
  6170 ;;		None
  6171 ;; Auto vars:     Size  Location     Type
  6172 ;;  t16             2    5[COMMON] unsigned int 
  6173 ;; Return value:  Size  Location     Type
  6174 ;;                  2    1[COMMON] unsigned int 
  6175 ;; Registers used:
  6176 ;;		wreg
  6177 ;; Tracked objects:
  6178 ;;		On entry : 0/0
  6179 ;;		On exit  : 0/0
  6180 ;;		Unchanged: 0/0
  6181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6182 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6183 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6184 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6185 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6186 ;;Total ram usage:        6 bytes
  6187 ;; Hardware stack levels used:    1
  6188 ;; Hardware stack levels required when called:    1
  6189 ;; This function calls:
  6190 ;;		Nothing
  6191 ;; This function is called by:
  6192 ;;		_set_vout_pwm2_duty
  6193 ;; This function uses a non-reentrant model
  6194 ;;
  6195                           
  6196                           
  6197                           ;psect for function _get_vout_pwm2_duty
  6198  1D3C                     _get_vout_pwm2_duty:	
  6199                           
  6200                           ;sample.c: 105: uint16_t t16=PWM2DCH;
  6201                           
  6202                           ;incstack = 0
  6203                           ; Regs used in _get_vout_pwm2_duty: [wreg]
  6204  1D3C  003B               	movlb	27	; select bank27
  6205  1D3D  0824               	movf	36,w	;volatile
  6206  1D3E  00F3               	movwf	??_get_vout_pwm2_duty
  6207  1D3F  01F4               	clrf	??_get_vout_pwm2_duty+1
  6208  1D40  0873               	movf	??_get_vout_pwm2_duty,w
  6209  1D41  00F5               	movwf	get_vout_pwm2_duty@t16
  6210  1D42  0874               	movf	??_get_vout_pwm2_duty+1,w
  6211  1D43  00F6               	movwf	get_vout_pwm2_duty@t16+1
  6212                           
  6213                           ;sample.c: 106: t16<<=8;
  6214  1D44  3008               	movlw	8
  6215  1D45                     u2355:	
  6216  1D45  35F5               	lslf	get_vout_pwm2_duty@t16,f
  6217  1D46  0DF6               	rlf	get_vout_pwm2_duty@t16+1,f
  6218  1D47  0B89               	decfsz	9,f
  6219  1D48  2D45               	goto	u2355
  6220                           
  6221                           ;sample.c: 107: t16|=PWM2DCL;
  6222  1D49  0823               	movf	35,w	;volatile
  6223  1D4A  00F3               	movwf	??_get_vout_pwm2_duty
  6224  1D4B  01F4               	clrf	??_get_vout_pwm2_duty+1
  6225  1D4C  0873               	movf	??_get_vout_pwm2_duty,w
  6226  1D4D  04F5               	iorwf	get_vout_pwm2_duty@t16,f
  6227  1D4E  0874               	movf	??_get_vout_pwm2_duty+1,w
  6228  1D4F  04F6               	iorwf	get_vout_pwm2_duty@t16+1,f
  6229                           
  6230                           ;sample.c: 108: return t16;
  6231  1D50  0876               	movf	get_vout_pwm2_duty@t16+1,w
  6232  1D51  00F2               	movwf	?_get_vout_pwm2_duty+1
  6233  1D52  0875               	movf	get_vout_pwm2_duty@t16,w
  6234  1D53  00F1               	movwf	?_get_vout_pwm2_duty
  6235  1D54  0008               	return
  6236  1D55                     __end_of_get_vout_pwm2_duty:	
  6237                           
  6238                           	psect	text8
  6239  1E5F                     __ptext8:	
  6240 ;; *************** function ___lwdiv *****************
  6241 ;; Defined at:
  6242 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwdiv.c"
  6243 ;; Parameters:    Size  Location     Type
  6244 ;;  divisor         2    1[COMMON] unsigned int 
  6245 ;;  dividend        2    3[COMMON] unsigned int 
  6246 ;; Auto vars:     Size  Location     Type
  6247 ;;  quotient        2    6[COMMON] unsigned int 
  6248 ;;  counter         1    8[COMMON] unsigned char 
  6249 ;; Return value:  Size  Location     Type
  6250 ;;                  2    1[COMMON] unsigned int 
  6251 ;; Registers used:
  6252 ;;		wreg, status,2, status,0
  6253 ;; Tracked objects:
  6254 ;;		On entry : 0/0
  6255 ;;		On exit  : 0/0
  6256 ;;		Unchanged: 0/0
  6257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6258 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6259 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6260 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6261 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6262 ;;Total ram usage:        8 bytes
  6263 ;; Hardware stack levels used:    1
  6264 ;; Hardware stack levels required when called:    1
  6265 ;; This function calls:
  6266 ;;		Nothing
  6267 ;; This function is called by:
  6268 ;;		_pid_pwm2_vout_run
  6269 ;; This function uses a non-reentrant model
  6270 ;;
  6271                           
  6272                           
  6273                           ;psect for function ___lwdiv
  6274  1E5F                     ___lwdiv:	
  6275                           
  6276                           ;incstack = 0
  6277                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6278  1E5F  01F6               	clrf	___lwdiv@quotient
  6279  1E60  01F7               	clrf	___lwdiv@quotient+1
  6280  1E61  0871               	movf	___lwdiv@divisor,w
  6281  1E62  0472               	iorwf	___lwdiv@divisor+1,w
  6282  1E63  1903               	btfsc	3,2
  6283  1E64  2E8E               	goto	l4103
  6284  1E65  01F8               	clrf	___lwdiv@counter
  6285  1E66  0AF8               	incf	___lwdiv@counter,f
  6286  1E67                     l4091:	
  6287  1E67  1BF2               	btfsc	___lwdiv@divisor+1,7
  6288  1E68  2E73               	goto	l4093
  6289  1E69  3001               	movlw	1
  6290  1E6A                     u3115:	
  6291  1E6A  35F1               	lslf	___lwdiv@divisor,f
  6292  1E6B  0DF2               	rlf	___lwdiv@divisor+1,f
  6293  1E6C  0B89               	decfsz	9,f
  6294  1E6D  2E6A               	goto	u3115
  6295  1E6E  3001               	movlw	1
  6296  1E6F  00F5               	movwf	??___lwdiv
  6297  1E70  0875               	movf	??___lwdiv,w
  6298  1E71  07F8               	addwf	___lwdiv@counter,f
  6299  1E72  2E67               	goto	l4091
  6300  1E73                     l4093:	
  6301  1E73  3001               	movlw	1
  6302  1E74                     u3135:	
  6303  1E74  35F6               	lslf	___lwdiv@quotient,f
  6304  1E75  0DF7               	rlf	___lwdiv@quotient+1,f
  6305  1E76  0B89               	decfsz	9,f
  6306  1E77  2E74               	goto	u3135
  6307  1E78  0872               	movf	___lwdiv@divisor+1,w
  6308  1E79  0274               	subwf	___lwdiv@dividend+1,w
  6309  1E7A  1D03               	skipz
  6310  1E7B  2E7E               	goto	u3145
  6311  1E7C  0871               	movf	___lwdiv@divisor,w
  6312  1E7D  0273               	subwf	___lwdiv@dividend,w
  6313  1E7E                     u3145:	
  6314  1E7E  1C03               	skipc
  6315  1E7F  2E85               	goto	l4099
  6316  1E80  0871               	movf	___lwdiv@divisor,w
  6317  1E81  02F3               	subwf	___lwdiv@dividend,f
  6318  1E82  0872               	movf	___lwdiv@divisor+1,w
  6319  1E83  3BF4               	subwfb	___lwdiv@dividend+1,f
  6320  1E84  1476               	bsf	___lwdiv@quotient,0
  6321  1E85                     l4099:	
  6322  1E85  3001               	movlw	1
  6323  1E86                     u3155:	
  6324  1E86  36F2               	lsrf	___lwdiv@divisor+1,f
  6325  1E87  0CF1               	rrf	___lwdiv@divisor,f
  6326  1E88  0B89               	decfsz	9,f
  6327  1E89  2E86               	goto	u3155
  6328  1E8A  3001               	movlw	1
  6329  1E8B  02F8               	subwf	___lwdiv@counter,f
  6330  1E8C  1D03               	btfss	3,2
  6331  1E8D  2E73               	goto	l4093
  6332  1E8E                     l4103:	
  6333  1E8E  0877               	movf	___lwdiv@quotient+1,w
  6334  1E8F  00F2               	movwf	?___lwdiv+1
  6335  1E90  0876               	movf	___lwdiv@quotient,w
  6336  1E91  00F1               	movwf	?___lwdiv
  6337  1E92  0008               	return
  6338  1E93                     __end_of___lwdiv:	
  6339                           
  6340                           	psect	text9
  6341  10E5                     __ptext9:	
  6342 ;; *************** function ___awdiv *****************
  6343 ;; Defined at:
  6344 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awdiv.c"
  6345 ;; Parameters:    Size  Location     Type
  6346 ;;  divisor         2    1[COMMON] int 
  6347 ;;  dividend        2    3[COMMON] int 
  6348 ;; Auto vars:     Size  Location     Type
  6349 ;;  quotient        2    8[COMMON] int 
  6350 ;;  sign            1    7[COMMON] unsigned char 
  6351 ;;  counter         1    6[COMMON] unsigned char 
  6352 ;; Return value:  Size  Location     Type
  6353 ;;                  2    1[COMMON] int 
  6354 ;; Registers used:
  6355 ;;		wreg, status,2, status,0
  6356 ;; Tracked objects:
  6357 ;;		On entry : 0/0
  6358 ;;		On exit  : 0/0
  6359 ;;		Unchanged: 0/0
  6360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6361 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6362 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6363 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6364 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6365 ;;Total ram usage:        9 bytes
  6366 ;; Hardware stack levels used:    1
  6367 ;; Hardware stack levels required when called:    1
  6368 ;; This function calls:
  6369 ;;		Nothing
  6370 ;; This function is called by:
  6371 ;;		_pid_pwm2_vout_run
  6372 ;; This function uses a non-reentrant model
  6373 ;;
  6374                           
  6375                           
  6376                           ;psect for function ___awdiv
  6377  10E5                     ___awdiv:	
  6378                           
  6379                           ;incstack = 0
  6380                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6381  10E5  01F7               	clrf	___awdiv@sign
  6382  10E6  1FF2               	btfss	___awdiv@divisor+1,7
  6383  10E7  28EF               	goto	l4045
  6384  10E8  09F1               	comf	___awdiv@divisor,f
  6385  10E9  09F2               	comf	___awdiv@divisor+1,f
  6386  10EA  0AF1               	incf	___awdiv@divisor,f
  6387  10EB  1903               	skipnz
  6388  10EC  0AF2               	incf	___awdiv@divisor+1,f
  6389  10ED  01F7               	clrf	___awdiv@sign
  6390  10EE  0AF7               	incf	___awdiv@sign,f
  6391  10EF                     l4045:	
  6392  10EF  1FF4               	btfss	___awdiv@dividend+1,7
  6393  10F0  28FA               	goto	l4051
  6394  10F1  09F3               	comf	___awdiv@dividend,f
  6395  10F2  09F4               	comf	___awdiv@dividend+1,f
  6396  10F3  0AF3               	incf	___awdiv@dividend,f
  6397  10F4  1903               	skipnz
  6398  10F5  0AF4               	incf	___awdiv@dividend+1,f
  6399  10F6  3001               	movlw	1
  6400  10F7  00F5               	movwf	??___awdiv
  6401  10F8  0875               	movf	??___awdiv,w
  6402  10F9  06F7               	xorwf	___awdiv@sign,f
  6403  10FA                     l4051:	
  6404  10FA  01F8               	clrf	___awdiv@quotient
  6405  10FB  01F9               	clrf	___awdiv@quotient+1
  6406  10FC  0871               	movf	___awdiv@divisor,w
  6407  10FD  0472               	iorwf	___awdiv@divisor+1,w
  6408  10FE  1903               	btfsc	3,2
  6409  10FF  2929               	goto	l4073
  6410  1100  01F6               	clrf	___awdiv@counter
  6411  1101  0AF6               	incf	___awdiv@counter,f
  6412  1102                     l4061:	
  6413  1102  1BF2               	btfsc	___awdiv@divisor+1,7
  6414  1103  290E               	goto	l4063
  6415  1104  3001               	movlw	1
  6416  1105                     u3035:	
  6417  1105  35F1               	lslf	___awdiv@divisor,f
  6418  1106  0DF2               	rlf	___awdiv@divisor+1,f
  6419  1107  0B89               	decfsz	9,f
  6420  1108  2905               	goto	u3035
  6421  1109  3001               	movlw	1
  6422  110A  00F5               	movwf	??___awdiv
  6423  110B  0875               	movf	??___awdiv,w
  6424  110C  07F6               	addwf	___awdiv@counter,f
  6425  110D  2902               	goto	l4061
  6426  110E                     l4063:	
  6427  110E  3001               	movlw	1
  6428  110F                     u3055:	
  6429  110F  35F8               	lslf	___awdiv@quotient,f
  6430  1110  0DF9               	rlf	___awdiv@quotient+1,f
  6431  1111  0B89               	decfsz	9,f
  6432  1112  290F               	goto	u3055
  6433  1113  0872               	movf	___awdiv@divisor+1,w
  6434  1114  0274               	subwf	___awdiv@dividend+1,w
  6435  1115  1D03               	skipz
  6436  1116  2919               	goto	u3065
  6437  1117  0871               	movf	___awdiv@divisor,w
  6438  1118  0273               	subwf	___awdiv@dividend,w
  6439  1119                     u3065:	
  6440  1119  1C03               	skipc
  6441  111A  2920               	goto	l4069
  6442  111B  0871               	movf	___awdiv@divisor,w
  6443  111C  02F3               	subwf	___awdiv@dividend,f
  6444  111D  0872               	movf	___awdiv@divisor+1,w
  6445  111E  3BF4               	subwfb	___awdiv@dividend+1,f
  6446  111F  1478               	bsf	___awdiv@quotient,0
  6447  1120                     l4069:	
  6448  1120  3001               	movlw	1
  6449  1121                     u3075:	
  6450  1121  36F2               	lsrf	___awdiv@divisor+1,f
  6451  1122  0CF1               	rrf	___awdiv@divisor,f
  6452  1123  0B89               	decfsz	9,f
  6453  1124  2921               	goto	u3075
  6454  1125  3001               	movlw	1
  6455  1126  02F6               	subwf	___awdiv@counter,f
  6456  1127  1D03               	btfss	3,2
  6457  1128  290E               	goto	l4063
  6458  1129                     l4073:	
  6459  1129  0877               	movf	___awdiv@sign,w
  6460  112A  1903               	btfsc	3,2
  6461  112B  2931               	goto	l4077
  6462  112C  09F8               	comf	___awdiv@quotient,f
  6463  112D  09F9               	comf	___awdiv@quotient+1,f
  6464  112E  0AF8               	incf	___awdiv@quotient,f
  6465  112F  1903               	skipnz
  6466  1130  0AF9               	incf	___awdiv@quotient+1,f
  6467  1131                     l4077:	
  6468  1131  0879               	movf	___awdiv@quotient+1,w
  6469  1132  00F2               	movwf	?___awdiv+1
  6470  1133  0878               	movf	___awdiv@quotient,w
  6471  1134  00F1               	movwf	?___awdiv
  6472  1135  0008               	return
  6473  1136                     __end_of___awdiv:	
  6474                           
  6475                           	psect	text10
  6476  0AD8                     __ptext10:	
  6477 ;; *************** function _pid_pwm1_idrv_run *****************
  6478 ;; Defined at:
  6479 ;;		line 337 in file "src/api/sample.c"
  6480 ;; Parameters:    Size  Location     Type
  6481 ;;		None
  6482 ;; Auto vars:     Size  Location     Type
  6483 ;;  t32             4   26[BANK0 ] long 
  6484 ;; Return value:  Size  Location     Type
  6485 ;;                  1    wreg      void 
  6486 ;; Registers used:
  6487 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6488 ;; Tracked objects:
  6489 ;;		On entry : 0/0
  6490 ;;		On exit  : 0/0
  6491 ;;		Unchanged: 0/0
  6492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6494 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6495 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6496 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6497 ;;Total ram usage:       12 bytes
  6498 ;; Hardware stack levels used:    1
  6499 ;; Hardware stack levels required when called:    3
  6500 ;; This function calls:
  6501 ;;		___aldiv
  6502 ;;		___lmul
  6503 ;;		_set_idrv_pwm1_duty
  6504 ;; This function is called by:
  6505 ;;		_main
  6506 ;; This function uses a non-reentrant model
  6507 ;;
  6508                           
  6509                           
  6510                           ;psect for function _pid_pwm1_idrv_run
  6511  0AD8                     _pid_pwm1_idrv_run:	
  6512                           
  6513                           ;sample.c: 344: int32_t t32;;sample.c: 345: t32=((int32_t)resRs-(int32_t)resRc);
  6514                           
  6515                           ;incstack = 0
  6516                           ; Regs used in _pid_pwm1_idrv_run: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6517  0AD8  0020               	movlb	0	; select bank0
  6518  0AD9  086E               	movf	_resRc,w
  6519  0ADA  00B2               	movwf	??_pid_pwm1_idrv_run
  6520  0ADB  086F               	movf	_resRc+1,w
  6521  0ADC  00B3               	movwf	??_pid_pwm1_idrv_run+1
  6522  0ADD  01B4               	clrf	??_pid_pwm1_idrv_run+2
  6523  0ADE  01B5               	clrf	??_pid_pwm1_idrv_run+3
  6524  0ADF  09B2               	comf	??_pid_pwm1_idrv_run,f
  6525  0AE0  09B3               	comf	??_pid_pwm1_idrv_run+1,f
  6526  0AE1  09B4               	comf	??_pid_pwm1_idrv_run+2,f
  6527  0AE2  09B5               	comf	??_pid_pwm1_idrv_run+3,f
  6528  0AE3  0AB2               	incf	??_pid_pwm1_idrv_run,f
  6529  0AE4  1903               	skipnz
  6530  0AE5  0AB3               	incf	??_pid_pwm1_idrv_run+1,f
  6531  0AE6  1903               	skipnz
  6532  0AE7  0AB4               	incf	??_pid_pwm1_idrv_run+2,f
  6533  0AE8  1903               	skipnz
  6534  0AE9  0AB5               	incf	??_pid_pwm1_idrv_run+3,f
  6535  0AEA  086C               	movf	_resRs,w
  6536  0AEB  00B6               	movwf	??_pid_pwm1_idrv_run+4
  6537  0AEC  086D               	movf	_resRs+1,w
  6538  0AED  00B7               	movwf	??_pid_pwm1_idrv_run+5
  6539  0AEE  01B8               	clrf	??_pid_pwm1_idrv_run+6
  6540  0AEF  01B9               	clrf	??_pid_pwm1_idrv_run+7
  6541  0AF0  0836               	movf	??_pid_pwm1_idrv_run+4,w
  6542  0AF1  07B2               	addwf	??_pid_pwm1_idrv_run,f
  6543  0AF2  0837               	movf	??_pid_pwm1_idrv_run+5,w
  6544  0AF3  3DB3               	addwfc	??_pid_pwm1_idrv_run+1,f
  6545  0AF4  0838               	movf	??_pid_pwm1_idrv_run+6,w
  6546  0AF5  3DB4               	addwfc	??_pid_pwm1_idrv_run+2,f
  6547  0AF6  0839               	movf	??_pid_pwm1_idrv_run+7,w
  6548  0AF7  3DB5               	addwfc	??_pid_pwm1_idrv_run+3,f
  6549  0AF8  0835               	movf	??_pid_pwm1_idrv_run+3,w
  6550  0AF9  00BD               	movwf	pid_pwm1_idrv_run@t32+3
  6551  0AFA  0834               	movf	??_pid_pwm1_idrv_run+2,w
  6552  0AFB  00BC               	movwf	pid_pwm1_idrv_run@t32+2
  6553  0AFC  0833               	movf	??_pid_pwm1_idrv_run+1,w
  6554  0AFD  00BB               	movwf	pid_pwm1_idrv_run@t32+1
  6555  0AFE  0832               	movf	??_pid_pwm1_idrv_run,w
  6556  0AFF  00BA               	movwf	pid_pwm1_idrv_run@t32
  6557                           
  6558                           ;sample.c: 346: t32=2000-t32;
  6559  0B00  30D0               	movlw	208
  6560  0B01  00B2               	movwf	??_pid_pwm1_idrv_run
  6561  0B02  3007               	movlw	7
  6562  0B03  00B3               	movwf	??_pid_pwm1_idrv_run+1
  6563  0B04  3000               	movlw	0
  6564  0B05  00B4               	movwf	??_pid_pwm1_idrv_run+2
  6565  0B06  3000               	movlw	0
  6566  0B07  00B5               	movwf	??_pid_pwm1_idrv_run+3
  6567  0B08  093A               	comf	pid_pwm1_idrv_run@t32,w
  6568  0B09  00B6               	movwf	??_pid_pwm1_idrv_run+4
  6569  0B0A  093B               	comf	pid_pwm1_idrv_run@t32+1,w
  6570  0B0B  00B7               	movwf	??_pid_pwm1_idrv_run+5
  6571  0B0C  093C               	comf	pid_pwm1_idrv_run@t32+2,w
  6572  0B0D  00B8               	movwf	??_pid_pwm1_idrv_run+6
  6573  0B0E  093D               	comf	pid_pwm1_idrv_run@t32+3,w
  6574  0B0F  00B9               	movwf	??_pid_pwm1_idrv_run+7
  6575  0B10  0AB6               	incf	??_pid_pwm1_idrv_run+4,f
  6576  0B11  1903               	skipnz
  6577  0B12  0AB7               	incf	??_pid_pwm1_idrv_run+5,f
  6578  0B13  1903               	skipnz
  6579  0B14  0AB8               	incf	??_pid_pwm1_idrv_run+6,f
  6580  0B15  1903               	skipnz
  6581  0B16  0AB9               	incf	??_pid_pwm1_idrv_run+7,f
  6582  0B17  0836               	movf	??_pid_pwm1_idrv_run+4,w
  6583  0B18  07B2               	addwf	??_pid_pwm1_idrv_run,f
  6584  0B19  0837               	movf	??_pid_pwm1_idrv_run+5,w
  6585  0B1A  3DB3               	addwfc	??_pid_pwm1_idrv_run+1,f
  6586  0B1B  0838               	movf	??_pid_pwm1_idrv_run+6,w
  6587  0B1C  3DB4               	addwfc	??_pid_pwm1_idrv_run+2,f
  6588  0B1D  0839               	movf	??_pid_pwm1_idrv_run+7,w
  6589  0B1E  3DB5               	addwfc	??_pid_pwm1_idrv_run+3,f
  6590  0B1F  0835               	movf	??_pid_pwm1_idrv_run+3,w
  6591  0B20  00BD               	movwf	pid_pwm1_idrv_run@t32+3
  6592  0B21  0834               	movf	??_pid_pwm1_idrv_run+2,w
  6593  0B22  00BC               	movwf	pid_pwm1_idrv_run@t32+2
  6594  0B23  0833               	movf	??_pid_pwm1_idrv_run+1,w
  6595  0B24  00BB               	movwf	pid_pwm1_idrv_run@t32+1
  6596  0B25  0832               	movf	??_pid_pwm1_idrv_run,w
  6597  0B26  00BA               	movwf	pid_pwm1_idrv_run@t32
  6598                           
  6599                           ;sample.c: 348: err[2]=err[1];
  6600  0B27  3004               	movlw	4
  6601  0B28  3EA0               	addlw	(low (_err| 0))& (0+255)
  6602  0B29  0086               	movwf	6
  6603  0B2A  0187               	clrf	7
  6604  0B2B  3F40               	moviw [0]fsr1
  6605  0B2C  0021               	movlb	1	; select bank1
  6606  0B2D  00A8               	movwf	(_err^(0+128)+8)
  6607  0B2E  3F41               	moviw [1]fsr1
  6608  0B2F  00A9               	movwf	((_err+1)^(0+128)+8)
  6609  0B30  3F42               	moviw [2]fsr1
  6610  0B31  00AA               	movwf	((_err+2)^(0+128)+8)
  6611  0B32  3F43               	moviw [3]fsr1
  6612  0B33  00AB               	movwf	((_err+3)^(0+128)+8)
  6613                           
  6614                           ;sample.c: 349: err[1]=err[0];
  6615  0B34  0823               	movf	(_err+3)^(0+128),w
  6616  0B35  00A7               	movwf	((_err+3)^(0+128)+4)
  6617  0B36  0822               	movf	(_err+2)^(0+128),w
  6618  0B37  00A6               	movwf	((_err+2)^(0+128)+4)
  6619  0B38  0821               	movf	(_err+1)^(0+128),w
  6620  0B39  00A5               	movwf	((_err+1)^(0+128)+4)
  6621  0B3A  0820               	movf	_err^(0+128),w
  6622  0B3B  00A4               	movwf	(_err^(0+128)+4)
  6623                           
  6624                           ;sample.c: 350: err[0]=t32;
  6625  0B3C  0020               	movlb	0	; select bank0
  6626  0B3D  083D               	movf	pid_pwm1_idrv_run@t32+3,w
  6627  0B3E  0021               	movlb	1	; select bank1
  6628  0B3F  00A3               	movwf	(_err+3)^(0+128)
  6629  0B40  0020               	movlb	0	; select bank0
  6630  0B41  083C               	movf	pid_pwm1_idrv_run@t32+2,w
  6631  0B42  0021               	movlb	1	; select bank1
  6632  0B43  00A2               	movwf	(_err+2)^(0+128)
  6633  0B44  0020               	movlb	0	; select bank0
  6634  0B45  083B               	movf	pid_pwm1_idrv_run@t32+1,w
  6635  0B46  0021               	movlb	1	; select bank1
  6636  0B47  00A1               	movwf	(_err+1)^(0+128)
  6637  0B48  0020               	movlb	0	; select bank0
  6638  0B49  083A               	movf	pid_pwm1_idrv_run@t32,w
  6639  0B4A  0021               	movlb	1	; select bank1
  6640  0B4B  00A0               	movwf	_err^(0+128)
  6641                           
  6642                           ;sample.c: 353: x0=(err[0]-err[1])*PidKp;
  6643  0B4C  0820               	movf	_err^(0+128),w
  6644  0B4D  0020               	movlb	0	; select bank0
  6645  0B4E  00B2               	movwf	??_pid_pwm1_idrv_run
  6646  0B4F  0021               	movlb	1	; select bank1
  6647  0B50  0821               	movf	(_err+1)^(0+128),w
  6648  0B51  0020               	movlb	0	; select bank0
  6649  0B52  00B3               	movwf	??_pid_pwm1_idrv_run+1
  6650  0B53  0021               	movlb	1	; select bank1
  6651  0B54  0822               	movf	(_err+2)^(0+128),w
  6652  0B55  0020               	movlb	0	; select bank0
  6653  0B56  00B4               	movwf	??_pid_pwm1_idrv_run+2
  6654  0B57  0021               	movlb	1	; select bank1
  6655  0B58  0823               	movf	(_err+3)^(0+128),w
  6656  0B59  0020               	movlb	0	; select bank0
  6657  0B5A  00B5               	movwf	??_pid_pwm1_idrv_run+3
  6658  0B5B  0021               	movlb	1	; select bank1
  6659  0B5C  0924               	comf	(_err^(0+128)+4),w
  6660  0B5D  0020               	movlb	0	; select bank0
  6661  0B5E  00B6               	movwf	??_pid_pwm1_idrv_run+4
  6662  0B5F  0021               	movlb	1	; select bank1
  6663  0B60  0925               	comf	((_err+1)^(0+128)+4),w
  6664  0B61  0020               	movlb	0	; select bank0
  6665  0B62  00B7               	movwf	??_pid_pwm1_idrv_run+5
  6666  0B63  0021               	movlb	1	; select bank1
  6667  0B64  0926               	comf	((_err+2)^(0+128)+4),w
  6668  0B65  0020               	movlb	0	; select bank0
  6669  0B66  00B8               	movwf	??_pid_pwm1_idrv_run+6
  6670  0B67  0021               	movlb	1	; select bank1
  6671  0B68  0927               	comf	((_err+3)^(0+128)+4),w
  6672  0B69  0020               	movlb	0	; select bank0
  6673  0B6A  00B9               	movwf	??_pid_pwm1_idrv_run+7
  6674  0B6B  0AB6               	incf	??_pid_pwm1_idrv_run+4,f
  6675  0B6C  1903               	skipnz
  6676  0B6D  0AB7               	incf	??_pid_pwm1_idrv_run+5,f
  6677  0B6E  1903               	skipnz
  6678  0B6F  0AB8               	incf	??_pid_pwm1_idrv_run+6,f
  6679  0B70  1903               	skipnz
  6680  0B71  0AB9               	incf	??_pid_pwm1_idrv_run+7,f
  6681  0B72  0836               	movf	??_pid_pwm1_idrv_run+4,w
  6682  0B73  07B2               	addwf	??_pid_pwm1_idrv_run,f
  6683  0B74  0837               	movf	??_pid_pwm1_idrv_run+5,w
  6684  0B75  3DB3               	addwfc	??_pid_pwm1_idrv_run+1,f
  6685  0B76  0838               	movf	??_pid_pwm1_idrv_run+6,w
  6686  0B77  3DB4               	addwfc	??_pid_pwm1_idrv_run+2,f
  6687  0B78  0839               	movf	??_pid_pwm1_idrv_run+7,w
  6688  0B79  3DB5               	addwfc	??_pid_pwm1_idrv_run+3,f
  6689  0B7A  0835               	movf	??_pid_pwm1_idrv_run+3,w
  6690  0B7B  00F4               	movwf	___lmul@multiplier+3
  6691  0B7C  0834               	movf	??_pid_pwm1_idrv_run+2,w
  6692  0B7D  00F3               	movwf	___lmul@multiplier+2
  6693  0B7E  0833               	movf	??_pid_pwm1_idrv_run+1,w
  6694  0B7F  00F2               	movwf	___lmul@multiplier+1
  6695  0B80  0832               	movf	??_pid_pwm1_idrv_run,w
  6696  0B81  00F1               	movwf	___lmul@multiplier
  6697  0B82  0021               	movlb	1	; select bank1
  6698  0B83  0850               	movf	_PidKp^(0+128),w
  6699  0B84  00F5               	movwf	___lmul@multiplicand
  6700  0B85  0851               	movf	(_PidKp+1)^(0+128),w
  6701  0B86  00F6               	movwf	___lmul@multiplicand+1
  6702  0B87  01F7               	clrf	___lmul@multiplicand+2
  6703  0B88  01F8               	clrf	___lmul@multiplicand+3
  6704  0B89  319E  262D  318A   	fcall	___lmul
  6705  0B8C  0874               	movf	?___lmul+3,w
  6706  0B8D  0020               	movlb	0	; select bank0
  6707  0B8E  00CE               	movwf	_x0+3
  6708  0B8F  0873               	movf	?___lmul+2,w
  6709  0B90  00CD               	movwf	_x0+2
  6710  0B91  0872               	movf	?___lmul+1,w
  6711  0B92  00CC               	movwf	_x0+1
  6712  0B93  0871               	movf	?___lmul,w
  6713  0B94  00CB               	movwf	_x0
  6714                           
  6715                           ;sample.c: 354: x1=PidKp*err[0]/PidTi;
  6716  0B95  0021               	movlb	1	; select bank1
  6717  0B96  084E               	movf	_PidTi^(0+128),w
  6718  0B97  0020               	movlb	0	; select bank0
  6719  0B98  00A4               	movwf	___aldiv@divisor
  6720  0B99  0021               	movlb	1	; select bank1
  6721  0B9A  084F               	movf	(_PidTi+1)^(0+128),w
  6722  0B9B  0020               	movlb	0	; select bank0
  6723  0B9C  00A5               	movwf	___aldiv@divisor+1
  6724  0B9D  01A6               	clrf	___aldiv@divisor+2
  6725  0B9E  01A7               	clrf	___aldiv@divisor+3
  6726  0B9F  0021               	movlb	1	; select bank1
  6727  0BA0  0850               	movf	_PidKp^(0+128),w
  6728  0BA1  00F1               	movwf	___lmul@multiplier
  6729  0BA2  0851               	movf	(_PidKp+1)^(0+128),w
  6730  0BA3  00F2               	movwf	___lmul@multiplier+1
  6731  0BA4  01F3               	clrf	___lmul@multiplier+2
  6732  0BA5  01F4               	clrf	___lmul@multiplier+3
  6733  0BA6  0823               	movf	(_err+3)^(0+128),w
  6734  0BA7  00F8               	movwf	___lmul@multiplicand+3
  6735  0BA8  0822               	movf	(_err+2)^(0+128),w
  6736  0BA9  00F7               	movwf	___lmul@multiplicand+2
  6737  0BAA  0821               	movf	(_err+1)^(0+128),w
  6738  0BAB  00F6               	movwf	___lmul@multiplicand+1
  6739  0BAC  0820               	movf	_err^(0+128),w
  6740  0BAD  00F5               	movwf	___lmul@multiplicand
  6741  0BAE  319E  262D  318A   	fcall	___lmul
  6742  0BB1  0874               	movf	?___lmul+3,w
  6743  0BB2  0020               	movlb	0	; select bank0
  6744  0BB3  00AB               	movwf	___aldiv@dividend+3
  6745  0BB4  0873               	movf	?___lmul+2,w
  6746  0BB5  00AA               	movwf	___aldiv@dividend+2
  6747  0BB6  0872               	movf	?___lmul+1,w
  6748  0BB7  00A9               	movwf	___aldiv@dividend+1
  6749  0BB8  0871               	movf	?___lmul,w
  6750  0BB9  00A8               	movwf	___aldiv@dividend
  6751  0BBA  3193  2363  318A   	fcall	___aldiv
  6752  0BBD  0020               	movlb	0	; select bank0
  6753  0BBE  0827               	movf	?___aldiv+3,w
  6754  0BBF  0021               	movlb	1	; select bank1
  6755  0BC0  00BF               	movwf	(_x1+3)^(0+128)
  6756  0BC1  0020               	movlb	0	; select bank0
  6757  0BC2  0826               	movf	?___aldiv+2,w
  6758  0BC3  0021               	movlb	1	; select bank1
  6759  0BC4  00BE               	movwf	(_x1+2)^(0+128)
  6760  0BC5  0020               	movlb	0	; select bank0
  6761  0BC6  0825               	movf	?___aldiv+1,w
  6762  0BC7  0021               	movlb	1	; select bank1
  6763  0BC8  00BD               	movwf	(_x1+1)^(0+128)
  6764  0BC9  0020               	movlb	0	; select bank0
  6765  0BCA  0824               	movf	?___aldiv,w
  6766  0BCB  0021               	movlb	1	; select bank1
  6767  0BCC  00BC               	movwf	_x1^(0+128)
  6768                           
  6769                           ;sample.c: 357: y0=0;
  6770  0BCD  3000               	movlw	0
  6771  0BCE  0020               	movlb	0	; select bank0
  6772  0BCF  00D2               	movwf	_y0+3
  6773  0BD0  3000               	movlw	0
  6774  0BD1  00D1               	movwf	_y0+2
  6775  0BD2  3000               	movlw	0
  6776  0BD3  00D0               	movwf	_y0+1
  6777  0BD4  3000               	movlw	0
  6778  0BD5  00CF               	movwf	_y0
  6779                           
  6780                           ;sample.c: 358: t32=x0+x1+y0;
  6781  0BD6  084F               	movf	_y0,w
  6782  0BD7  00B2               	movwf	??_pid_pwm1_idrv_run
  6783  0BD8  0850               	movf	_y0+1,w
  6784  0BD9  00B3               	movwf	??_pid_pwm1_idrv_run+1
  6785  0BDA  0851               	movf	_y0+2,w
  6786  0BDB  00B4               	movwf	??_pid_pwm1_idrv_run+2
  6787  0BDC  0852               	movf	_y0+3,w
  6788  0BDD  00B5               	movwf	??_pid_pwm1_idrv_run+3
  6789  0BDE  084B               	movf	_x0,w
  6790  0BDF  0021               	movlb	1	; select bank1
  6791  0BE0  073C               	addwf	_x1^(0+128),w
  6792  0BE1  0020               	movlb	0	; select bank0
  6793  0BE2  00B6               	movwf	??_pid_pwm1_idrv_run+4
  6794  0BE3  084C               	movf	_x0+1,w
  6795  0BE4  0021               	movlb	1	; select bank1
  6796  0BE5  3D3D               	addwfc	(_x1+1)^(0+128),w
  6797  0BE6  0020               	movlb	0	; select bank0
  6798  0BE7  00B7               	movwf	??_pid_pwm1_idrv_run+5
  6799  0BE8  084D               	movf	_x0+2,w
  6800  0BE9  0021               	movlb	1	; select bank1
  6801  0BEA  3D3E               	addwfc	(_x1+2)^(0+128),w
  6802  0BEB  0020               	movlb	0	; select bank0
  6803  0BEC  00B8               	movwf	??_pid_pwm1_idrv_run+6
  6804  0BED  084E               	movf	_x0+3,w
  6805  0BEE  0021               	movlb	1	; select bank1
  6806  0BEF  3D3F               	addwfc	(_x1+3)^(0+128),w
  6807  0BF0  0020               	movlb	0	; select bank0
  6808  0BF1  00B9               	movwf	??_pid_pwm1_idrv_run+7
  6809  0BF2  0836               	movf	??_pid_pwm1_idrv_run+4,w
  6810  0BF3  07B2               	addwf	??_pid_pwm1_idrv_run,f
  6811  0BF4  0837               	movf	??_pid_pwm1_idrv_run+5,w
  6812  0BF5  3DB3               	addwfc	??_pid_pwm1_idrv_run+1,f
  6813  0BF6  0838               	movf	??_pid_pwm1_idrv_run+6,w
  6814  0BF7  3DB4               	addwfc	??_pid_pwm1_idrv_run+2,f
  6815  0BF8  0839               	movf	??_pid_pwm1_idrv_run+7,w
  6816  0BF9  3DB5               	addwfc	??_pid_pwm1_idrv_run+3,f
  6817  0BFA  0835               	movf	??_pid_pwm1_idrv_run+3,w
  6818  0BFB  00BD               	movwf	pid_pwm1_idrv_run@t32+3
  6819  0BFC  0834               	movf	??_pid_pwm1_idrv_run+2,w
  6820  0BFD  00BC               	movwf	pid_pwm1_idrv_run@t32+2
  6821  0BFE  0833               	movf	??_pid_pwm1_idrv_run+1,w
  6822  0BFF  00BB               	movwf	pid_pwm1_idrv_run@t32+1
  6823  0C00  0832               	movf	??_pid_pwm1_idrv_run,w
  6824  0C01  00BA               	movwf	pid_pwm1_idrv_run@t32
  6825                           
  6826                           ;sample.c: 359: t32/=10000;
  6827  0C02  3000               	movlw	0
  6828  0C03  00A7               	movwf	___aldiv@divisor+3
  6829  0C04  3000               	movlw	0
  6830  0C05  00A6               	movwf	___aldiv@divisor+2
  6831  0C06  3027               	movlw	39
  6832  0C07  00A5               	movwf	___aldiv@divisor+1
  6833  0C08  3010               	movlw	16
  6834  0C09  00A4               	movwf	___aldiv@divisor
  6835  0C0A  083D               	movf	pid_pwm1_idrv_run@t32+3,w
  6836  0C0B  00AB               	movwf	___aldiv@dividend+3
  6837  0C0C  083C               	movf	pid_pwm1_idrv_run@t32+2,w
  6838  0C0D  00AA               	movwf	___aldiv@dividend+2
  6839  0C0E  083B               	movf	pid_pwm1_idrv_run@t32+1,w
  6840  0C0F  00A9               	movwf	___aldiv@dividend+1
  6841  0C10  083A               	movf	pid_pwm1_idrv_run@t32,w
  6842  0C11  00A8               	movwf	___aldiv@dividend
  6843  0C12  3193  2363  318A   	fcall	___aldiv
  6844  0C15  0020               	movlb	0	; select bank0
  6845  0C16  0827               	movf	?___aldiv+3,w
  6846  0C17  00BD               	movwf	pid_pwm1_idrv_run@t32+3
  6847  0C18  0826               	movf	?___aldiv+2,w
  6848  0C19  00BC               	movwf	pid_pwm1_idrv_run@t32+2
  6849  0C1A  0825               	movf	?___aldiv+1,w
  6850  0C1B  00BB               	movwf	pid_pwm1_idrv_run@t32+1
  6851  0C1C  0824               	movf	?___aldiv,w
  6852  0C1D  00BA               	movwf	pid_pwm1_idrv_run@t32
  6853                           
  6854                           ;sample.c: 360: t32+=pidU;
  6855  0C1E  0021               	movlb	1	; select bank1
  6856  0C1F  0856               	movf	_pidU^(0+128),w
  6857  0C20  0020               	movlb	0	; select bank0
  6858  0C21  07BA               	addwf	pid_pwm1_idrv_run@t32,f
  6859  0C22  0021               	movlb	1	; select bank1
  6860  0C23  0857               	movf	(_pidU+1)^(0+128),w
  6861  0C24  0020               	movlb	0	; select bank0
  6862  0C25  3DBB               	addwfc	pid_pwm1_idrv_run@t32+1,f
  6863  0C26  3000               	movlw	0
  6864  0C27  3DBC               	addwfc	pid_pwm1_idrv_run@t32+2,f
  6865  0C28  3DBD               	addwfc	pid_pwm1_idrv_run@t32+3,f
  6866                           
  6867                           ;sample.c: 362: __nop();
  6868  0C29  0000               	nop
  6869                           
  6870                           ;sample.c: 363: if(t32>1200)t32=1200;
  6871  0C2A  0020               	movlb	0	; select bank0
  6872  0C2B  1BBD               	btfsc	pid_pwm1_idrv_run@t32+3,7
  6873  0C2C  2C41               	goto	l5133
  6874  0C2D  083D               	movf	pid_pwm1_idrv_run@t32+3,w
  6875  0C2E  1D03               	btfss	3,2
  6876  0C2F  2C39               	goto	l5131
  6877  0C30  083C               	movf	pid_pwm1_idrv_run@t32+2,w
  6878  0C31  1D03               	btfss	3,2
  6879  0C32  2C39               	goto	l5131
  6880  0C33  30B1               	movlw	177
  6881  0C34  023A               	subwf	pid_pwm1_idrv_run@t32,w
  6882  0C35  3004               	movlw	4
  6883  0C36  3B3B               	subwfb	pid_pwm1_idrv_run@t32+1,w
  6884  0C37  1C03               	btfss	3,0
  6885  0C38  2C41               	goto	l5133
  6886  0C39                     l5131:	
  6887  0C39  3000               	movlw	0
  6888  0C3A  00BD               	movwf	pid_pwm1_idrv_run@t32+3
  6889  0C3B  3000               	movlw	0
  6890  0C3C  00BC               	movwf	pid_pwm1_idrv_run@t32+2
  6891  0C3D  3004               	movlw	4
  6892  0C3E  00BB               	movwf	pid_pwm1_idrv_run@t32+1
  6893  0C3F  30B0               	movlw	176
  6894  0C40  00BA               	movwf	pid_pwm1_idrv_run@t32
  6895  0C41                     l5133:	
  6896                           
  6897                           ;sample.c: 364: if(t32<5)t32=5;
  6898  0C41  1BBD               	btfsc	pid_pwm1_idrv_run@t32+3,7
  6899  0C42  2C50               	goto	l5135
  6900  0C43  083D               	movf	pid_pwm1_idrv_run@t32+3,w
  6901  0C44  1D03               	btfss	3,2
  6902  0C45  2C58               	goto	l663
  6903  0C46  083C               	movf	pid_pwm1_idrv_run@t32+2,w
  6904  0C47  1D03               	btfss	3,2
  6905  0C48  2C58               	goto	l663
  6906  0C49  083B               	movf	pid_pwm1_idrv_run@t32+1,w
  6907  0C4A  1D03               	btfss	3,2
  6908  0C4B  2C58               	goto	l663
  6909  0C4C  3005               	movlw	5
  6910  0C4D  023A               	subwf	pid_pwm1_idrv_run@t32,w
  6911  0C4E  1803               	btfsc	3,0
  6912  0C4F  2C58               	goto	l663
  6913  0C50                     l5135:	
  6914  0C50  3000               	movlw	0
  6915  0C51  00BD               	movwf	pid_pwm1_idrv_run@t32+3
  6916  0C52  3000               	movlw	0
  6917  0C53  00BC               	movwf	pid_pwm1_idrv_run@t32+2
  6918  0C54  3000               	movlw	0
  6919  0C55  00BB               	movwf	pid_pwm1_idrv_run@t32+1
  6920  0C56  3005               	movlw	5
  6921  0C57  00BA               	movwf	pid_pwm1_idrv_run@t32
  6922  0C58                     l663:	
  6923                           
  6924                           ;sample.c: 365: pidU=(uint16_t)t32;
  6925  0C58  083B               	movf	pid_pwm1_idrv_run@t32+1,w
  6926  0C59  0021               	movlb	1	; select bank1
  6927  0C5A  00D7               	movwf	(_pidU+1)^(0+128)
  6928  0C5B  0020               	movlb	0	; select bank0
  6929  0C5C  083A               	movf	pid_pwm1_idrv_run@t32,w
  6930  0C5D  0021               	movlb	1	; select bank1
  6931  0C5E  00D6               	movwf	_pidU^(0+128)
  6932                           
  6933                           ;sample.c: 370: set_idrv_pwm1_duty(pidU);
  6934  0C5F  0857               	movf	(_pidU+1)^(0+128),w
  6935  0C60  00F8               	movwf	set_idrv_pwm1_duty@duty+1
  6936  0C61  0856               	movf	_pidU^(0+128),w
  6937  0C62  00F7               	movwf	set_idrv_pwm1_duty@duty
  6938  0C63  319D  25A7         	fcall	_set_idrv_pwm1_duty
  6939  0C65  0008               	return
  6940  0C66                     __end_of_pid_pwm1_idrv_run:	
  6941                           
  6942                           	psect	text11
  6943  1DA7                     __ptext11:	
  6944 ;; *************** function _set_idrv_pwm1_duty *****************
  6945 ;; Defined at:
  6946 ;;		line 82 in file "src/api/sample.c"
  6947 ;; Parameters:    Size  Location     Type
  6948 ;;  duty            2    7[COMMON] unsigned int 
  6949 ;; Auto vars:     Size  Location     Type
  6950 ;;  t16             2    9[COMMON] unsigned int 
  6951 ;; Return value:  Size  Location     Type
  6952 ;;                  1    wreg      void 
  6953 ;; Registers used:
  6954 ;;		wreg, status,2, pclath, cstack
  6955 ;; Tracked objects:
  6956 ;;		On entry : 0/0
  6957 ;;		On exit  : 0/0
  6958 ;;		Unchanged: 0/0
  6959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6960 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6961 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6963 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6964 ;;Total ram usage:        4 bytes
  6965 ;; Hardware stack levels used:    1
  6966 ;; Hardware stack levels required when called:    2
  6967 ;; This function calls:
  6968 ;;		_get_idrv_pwm1_duty
  6969 ;; This function is called by:
  6970 ;;		_pid_pwm1_idrv_run
  6971 ;; This function uses a non-reentrant model
  6972 ;;
  6973                           
  6974                           
  6975                           ;psect for function _set_idrv_pwm1_duty
  6976  1DA7                     _set_idrv_pwm1_duty:	
  6977                           
  6978                           ;sample.c: 85: uint16_t t16;;sample.c: 86: pwm1DutyForIdrv=duty;
  6979                           
  6980                           ;incstack = 0
  6981                           ; Regs used in _set_idrv_pwm1_duty: [wreg+status,2+pclath+cstack]
  6982  1DA7  0878               	movf	set_idrv_pwm1_duty@duty+1,w
  6983  1DA8  0021               	movlb	1	; select bank1
  6984  1DA9  00DB               	movwf	(_pwm1DutyForIdrv+1)^(0+128)
  6985  1DAA  0877               	movf	set_idrv_pwm1_duty@duty,w
  6986  1DAB  00DA               	movwf	_pwm1DutyForIdrv^(0+128)
  6987                           
  6988                           ;sample.c: 87: t16=get_idrv_pwm1_duty();
  6989  1DAC  319D  2523  319D   	fcall	_get_idrv_pwm1_duty
  6990  1DAF  0872               	movf	?_get_idrv_pwm1_duty+1,w
  6991  1DB0  00FA               	movwf	set_idrv_pwm1_duty@t16+1
  6992  1DB1  0871               	movf	?_get_idrv_pwm1_duty,w
  6993  1DB2  00F9               	movwf	set_idrv_pwm1_duty@t16
  6994                           
  6995                           ;sample.c: 88: if(t16==duty)return;
  6996  1DB3  0878               	movf	set_idrv_pwm1_duty@duty+1,w
  6997  1DB4  067A               	xorwf	set_idrv_pwm1_duty@t16+1,w
  6998  1DB5  1D03               	skipz
  6999  1DB6  2DB9               	goto	u2415
  7000  1DB7  0877               	movf	set_idrv_pwm1_duty@duty,w
  7001  1DB8  0679               	xorwf	set_idrv_pwm1_duty@t16,w
  7002  1DB9                     u2415:	
  7003  1DB9  1903               	btfsc	3,2
  7004  1DBA  0008               	return
  7005                           
  7006                           ;sample.c: 91: PWM1CONbits.EN = 0;
  7007  1DBB  003B               	movlb	27	; select bank27
  7008  1DBC  139B               	bcf	27,7	;volatile
  7009                           
  7010                           ;sample.c: 92: PWM1DCL= (uint8_t)(duty&0xff);
  7011  1DBD  0877               	movf	set_idrv_pwm1_duty@duty,w
  7012  1DBE  0093               	movwf	19	;volatile
  7013                           
  7014                           ;sample.c: 93: PWM1DCH=(uint8_t)(duty>>8);
  7015  1DBF  0878               	movf	set_idrv_pwm1_duty@duty+1,w
  7016  1DC0  0094               	movwf	20	;volatile
  7017                           
  7018                           ;sample.c: 94: PWM1CONbits.EN = 1;
  7019  1DC1  179B               	bsf	27,7	;volatile
  7020  1DC2  0008               	return
  7021  1DC3                     __end_of_set_idrv_pwm1_duty:	
  7022                           
  7023                           	psect	text12
  7024  1D23                     __ptext12:	
  7025 ;; *************** function _get_idrv_pwm1_duty *****************
  7026 ;; Defined at:
  7027 ;;		line 73 in file "src/api/sample.c"
  7028 ;; Parameters:    Size  Location     Type
  7029 ;;		None
  7030 ;; Auto vars:     Size  Location     Type
  7031 ;;  t16             2    5[COMMON] unsigned int 
  7032 ;; Return value:  Size  Location     Type
  7033 ;;                  2    1[COMMON] unsigned int 
  7034 ;; Registers used:
  7035 ;;		wreg
  7036 ;; Tracked objects:
  7037 ;;		On entry : 0/0
  7038 ;;		On exit  : 0/0
  7039 ;;		Unchanged: 0/0
  7040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7041 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7042 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7043 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7044 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7045 ;;Total ram usage:        6 bytes
  7046 ;; Hardware stack levels used:    1
  7047 ;; Hardware stack levels required when called:    1
  7048 ;; This function calls:
  7049 ;;		Nothing
  7050 ;; This function is called by:
  7051 ;;		_set_idrv_pwm1_duty
  7052 ;; This function uses a non-reentrant model
  7053 ;;
  7054                           
  7055                           
  7056                           ;psect for function _get_idrv_pwm1_duty
  7057  1D23                     _get_idrv_pwm1_duty:	
  7058                           
  7059                           ;sample.c: 76: uint16_t t16=PWM1DCH;
  7060                           
  7061                           ;incstack = 0
  7062                           ; Regs used in _get_idrv_pwm1_duty: [wreg]
  7063  1D23  003B               	movlb	27	; select bank27
  7064  1D24  0814               	movf	20,w	;volatile
  7065  1D25  00F3               	movwf	??_get_idrv_pwm1_duty
  7066  1D26  01F4               	clrf	??_get_idrv_pwm1_duty+1
  7067  1D27  0873               	movf	??_get_idrv_pwm1_duty,w
  7068  1D28  00F5               	movwf	get_idrv_pwm1_duty@t16
  7069  1D29  0874               	movf	??_get_idrv_pwm1_duty+1,w
  7070  1D2A  00F6               	movwf	get_idrv_pwm1_duty@t16+1
  7071                           
  7072                           ;sample.c: 77: t16<<=8;
  7073  1D2B  3008               	movlw	8
  7074  1D2C                     u2345:	
  7075  1D2C  35F5               	lslf	get_idrv_pwm1_duty@t16,f
  7076  1D2D  0DF6               	rlf	get_idrv_pwm1_duty@t16+1,f
  7077  1D2E  0B89               	decfsz	9,f
  7078  1D2F  2D2C               	goto	u2345
  7079                           
  7080                           ;sample.c: 78: t16|=PWM1DCL;
  7081  1D30  0813               	movf	19,w	;volatile
  7082  1D31  00F3               	movwf	??_get_idrv_pwm1_duty
  7083  1D32  01F4               	clrf	??_get_idrv_pwm1_duty+1
  7084  1D33  0873               	movf	??_get_idrv_pwm1_duty,w
  7085  1D34  04F5               	iorwf	get_idrv_pwm1_duty@t16,f
  7086  1D35  0874               	movf	??_get_idrv_pwm1_duty+1,w
  7087  1D36  04F6               	iorwf	get_idrv_pwm1_duty@t16+1,f
  7088                           
  7089                           ;sample.c: 79: return t16;
  7090  1D37  0876               	movf	get_idrv_pwm1_duty@t16+1,w
  7091  1D38  00F2               	movwf	?_get_idrv_pwm1_duty+1
  7092  1D39  0875               	movf	get_idrv_pwm1_duty@t16,w
  7093  1D3A  00F1               	movwf	?_get_idrv_pwm1_duty
  7094  1D3B  0008               	return
  7095  1D3C                     __end_of_get_idrv_pwm1_duty:	
  7096                           
  7097                           	psect	text13
  7098  1189                     __ptext13:	
  7099 ;; *************** function _modbus_response_process *****************
  7100 ;; Defined at:
  7101 ;;		line 210 in file "src/api/modbus.c"
  7102 ;; Parameters:    Size  Location     Type
  7103 ;;  rbuf            1    wreg     PTR unsigned char 
  7104 ;;		 -> modbusBuf(32), 
  7105 ;;  rlen            2   24[BANK0 ] unsigned int 
  7106 ;; Auto vars:     Size  Location     Type
  7107 ;;  rbuf            1   29[BANK0 ] PTR unsigned char 
  7108 ;;		 -> modbusBuf(32), 
  7109 ;;  pmdbs           1   28[BANK0 ] PTR struct .
  7110 ;;		 -> modbusBuf(32), 
  7111 ;;  resp            1   27[BANK0 ] unsigned char 
  7112 ;; Return value:  Size  Location     Type
  7113 ;;                  1    wreg      void 
  7114 ;; Registers used:
  7115 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7116 ;; Tracked objects:
  7117 ;;		On entry : 0/0
  7118 ;;		On exit  : 0/0
  7119 ;;		Unchanged: 0/0
  7120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7121 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7122 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7123 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7124 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7125 ;;Total ram usage:        6 bytes
  7126 ;; Hardware stack levels used:    1
  7127 ;; Hardware stack levels required when called:    5
  7128 ;; This function calls:
  7129 ;;		_crc_verify
  7130 ;;		_modbus_response_command
  7131 ;;		_modbus_response_illgeal_function
  7132 ;;		_modbus_response_write_mult_register
  7133 ;;		_modbus_response_write_single_register
  7134 ;; This function is called by:
  7135 ;;		_main
  7136 ;; This function uses a non-reentrant model
  7137 ;;
  7138                           
  7139                           
  7140                           ;psect for function _modbus_response_process
  7141  1189                     _modbus_response_process:	
  7142                           
  7143                           ;incstack = 0
  7144                           ; Regs used in _modbus_response_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7145                           ;modbus_response_process@rbuf stored from wreg
  7146  1189  0020               	movlb	0	; select bank0
  7147  118A  00BD               	movwf	modbus_response_process@rbuf
  7148                           
  7149                           ;modbus.c: 211: uint8_t resp=0;
  7150  118B  01BB               	clrf	modbus_response_process@resp
  7151                           
  7152                           ;modbus.c: 212: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)rbuf;
  7153  118C  083D               	movf	modbus_response_process@rbuf,w
  7154  118D  00BA               	movwf	??_modbus_response_process
  7155  118E  083A               	movf	??_modbus_response_process,w
  7156  118F  00BC               	movwf	modbus_response_process@pmdbs
  7157                           
  7158                           ;modbus.c: 215: if((pmdbs->addr!=sysData.id) && (pmdbs->addr!=0x00))return;
  7159  1190  305C               	movlw	92
  7160  1191  0086               	movwf	6
  7161  1192  3023               	movlw	35
  7162  1193  0087               	movwf	7
  7163  1194  3142               	addfsr 1,2
  7164  1195  083C               	movf	modbus_response_process@pmdbs,w
  7165  1196  0084               	movwf	4
  7166  1197  3001               	movlw	1	; select bank2/3
  7167  1198  0085               	movwf	5
  7168  1199  0800               	movf	0,w
  7169  119A  0601               	xorwf	1,w
  7170  119B  1903               	skipnz
  7171  119C  29A4               	goto	l5259
  7172  119D  083C               	movf	modbus_response_process@pmdbs,w
  7173  119E  0086               	movwf	6
  7174  119F  3001               	movlw	1	; select bank2/3
  7175  11A0  0087               	movwf	7
  7176  11A1  0801               	movf	1,w
  7177  11A2  1D03               	btfss	3,2
  7178  11A3  0008               	return
  7179  11A4                     l5259:	
  7180                           
  7181                           ;modbus.c: 216: if(!(crc_verify(rbuf,rlen)))return ;
  7182  11A4  083D               	movf	modbus_response_process@rbuf,w
  7183  11A5  00A6               	movwf	crc_verify@message
  7184  11A6  3001               	movlw	1
  7185  11A7  00A7               	movwf	crc_verify@message+1
  7186  11A8  0839               	movf	modbus_response_process@rlen+1,w
  7187  11A9  00A9               	movwf	crc_verify@n+1
  7188  11AA  0838               	movf	modbus_response_process@rlen,w
  7189  11AB  00A8               	movwf	crc_verify@n
  7190  11AC  319E  26C9  3191   	fcall	_crc_verify
  7191  11AF  3A00               	xorlw	0
  7192  11B0  1903               	btfsc	3,2
  7193  11B1  0008               	return
  7194  11B2  29C9               	goto	l5273
  7195  11B3                     l5263:	
  7196                           ;modbus.c: 219: case 0x03:
  7197                           
  7198                           ;modbus.c: 218: switch(pmdbs->func){
  7199                           
  7200                           
  7201                           ;modbus.c: 220: modbus_response_command(rbuf);
  7202  11B3  0020               	movlb	0	; select bank0
  7203  11B4  083D               	movf	modbus_response_process@rbuf,w
  7204  11B5  3195  2594         	fcall	_modbus_response_command
  7205                           
  7206                           ;modbus.c: 221: break;
  7207  11B7  0008               	return
  7208  11B8                     l5265:	
  7209                           ;modbus.c: 222: case 0x06:
  7210                           
  7211                           
  7212                           ;modbus.c: 223: case 0x26:;modbus.c: 224: modbus_response_write_single_register(rbuf);
  7213  11B8  0020               	movlb	0	; select bank0
  7214  11B9  083D               	movf	modbus_response_process@rbuf,w
  7215  11BA  318C  2466         	fcall	_modbus_response_write_single_register
  7216                           
  7217                           ;modbus.c: 225: break;
  7218  11BC  0008               	return
  7219  11BD                     l5267:	
  7220                           ;modbus.c: 226: case 0x10:
  7221                           
  7222                           
  7223                           ;modbus.c: 227: modbus_response_write_mult_register(rbuf);
  7224  11BD  0020               	movlb	0	; select bank0
  7225  11BE  083D               	movf	modbus_response_process@rbuf,w
  7226  11BF  3192  22F1         	fcall	_modbus_response_write_mult_register
  7227                           
  7228                           ;modbus.c: 228: break;
  7229  11C1  0008               	return
  7230  11C2                     l5269:	
  7231                           ;modbus.c: 251: default:
  7232                           
  7233                           
  7234                           ;modbus.c: 252: modbus_response_illgeal_function(rbuf,0x01);break;
  7235  11C2  0020               	movlb	0	; select bank0
  7236  11C3  01AC               	clrf	modbus_response_illgeal_function@errcode
  7237  11C4  0AAC               	incf	modbus_response_illgeal_function@errcode,f
  7238  11C5  083D               	movf	modbus_response_process@rbuf,w
  7239  11C6  3190  20A3         	fcall	_modbus_response_illgeal_function
  7240                           
  7241                           ;modbus.c: 253: }
  7242  11C8  0008               	return
  7243  11C9                     l5273:	
  7244  11C9  0020               	movlb	0	; select bank0
  7245  11CA  0A3C               	incf	modbus_response_process@pmdbs,w
  7246  11CB  0086               	movwf	6
  7247  11CC  3001               	movlw	1	; select bank2/3
  7248  11CD  0087               	movwf	7
  7249  11CE  0801               	movf	1,w
  7250                           
  7251                           ; Switch size 1, requested type "space"
  7252                           ; Number of cases is 4, Range of values is 3 to 38
  7253                           ; switch strategies available:
  7254                           ; Name         Instructions Cycles
  7255                           ; simple_byte           13     7 (average)
  7256                           ; direct_byte           81     9 (fixed)
  7257                           ; jumptable            263     9 (fixed)
  7258                           ;	Chosen strategy is simple_byte
  7259  11CF  3A03               	xorlw	3	; case 3
  7260  11D0  1903               	skipnz
  7261  11D1  29B3               	goto	l5263
  7262  11D2  3A05               	xorlw	5	; case 6
  7263  11D3  1903               	skipnz
  7264  11D4  29B8               	goto	l5265
  7265  11D5  3A16               	xorlw	22	; case 16
  7266  11D6  1903               	skipnz
  7267  11D7  29BD               	goto	l5267
  7268  11D8  3A36               	xorlw	54	; case 38
  7269  11D9  1903               	skipnz
  7270  11DA  29B8               	goto	l5265
  7271  11DB  29C2               	goto	l5269
  7272  11DC  0008               	return
  7273  11DD                     __end_of_modbus_response_process:	
  7274                           
  7275                           	psect	text14
  7276  0C66                     __ptext14:	
  7277 ;; *************** function _modbus_response_write_single_register *****************
  7278 ;; Defined at:
  7279 ;;		line 115 in file "src/api/modbus.c"
  7280 ;; Parameters:    Size  Location     Type
  7281 ;;  rbuf            1    wreg     PTR unsigned char 
  7282 ;;		 -> modbusBuf(32), 
  7283 ;; Auto vars:     Size  Location     Type
  7284 ;;  rbuf            1   21[BANK0 ] PTR unsigned char 
  7285 ;;		 -> modbusBuf(32), 
  7286 ;;  startAddr       2   22[BANK0 ] unsigned int 
  7287 ;;  t16             2   17[BANK0 ] unsigned int 
  7288 ;;  pmdbs           1   20[BANK0 ] PTR struct .
  7289 ;;		 -> modbusBuf(32), 
  7290 ;;  i               1   19[BANK0 ] unsigned char 
  7291 ;;  fiSave          1   16[BANK0 ] unsigned char 
  7292 ;; Return value:  Size  Location     Type
  7293 ;;                  1    wreg      void 
  7294 ;; Registers used:
  7295 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7296 ;; Tracked objects:
  7297 ;;		On entry : 0/0
  7298 ;;		On exit  : 0/0
  7299 ;;		Unchanged: 0/0
  7300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7302 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7303 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7304 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7305 ;;Total ram usage:       12 bytes
  7306 ;; Hardware stack levels used:    1
  7307 ;; Hardware stack levels required when called:    4
  7308 ;; This function calls:
  7309 ;;		_crc_append
  7310 ;;		_sys_data_save
  7311 ;;		_uart_send_len
  7312 ;; This function is called by:
  7313 ;;		_modbus_response_process
  7314 ;; This function uses a non-reentrant model
  7315 ;;
  7316                           
  7317                           
  7318                           ;psect for function _modbus_response_write_single_register
  7319  0C66                     _modbus_response_write_single_register:	
  7320                           
  7321                           ;incstack = 0
  7322                           ; Regs used in _modbus_response_write_single_register: [wreg-fsr1h+status,2+status,0+pcl
      +                          ath+cstack]
  7323                           ;modbus_response_write_single_register@rbuf stored from wreg
  7324  0C66  0020               	movlb	0	; select bank0
  7325  0C67  00B5               	movwf	modbus_response_write_single_register@rbuf
  7326                           
  7327                           ;modbus.c: 117: uint16_t startAddr=0;
  7328  0C68  01B6               	clrf	modbus_response_write_single_register@startAddr
  7329  0C69  01B7               	clrf	modbus_response_write_single_register@startAddr+1
  7330                           
  7331                           ;modbus.c: 118: uint16_t t16;;modbus.c: 119: uint8_t fiSave=0,i;
  7332  0C6A  01B0               	clrf	modbus_response_write_single_register@fiSave
  7333                           
  7334                           ;modbus.c: 120: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)rbuf;
  7335  0C6B  0835               	movf	modbus_response_write_single_register@rbuf,w
  7336  0C6C  00AC               	movwf	??_modbus_response_write_single_register
  7337  0C6D  082C               	movf	??_modbus_response_write_single_register,w
  7338  0C6E  00B4               	movwf	modbus_response_write_single_register@pmdbs
  7339                           
  7340                           ;modbus.c: 121: if(pmdbs->addr!=sysData.id && pmdbs->addr!=0)return;
  7341  0C6F  305C               	movlw	92
  7342  0C70  0086               	movwf	6
  7343  0C71  3023               	movlw	35
  7344  0C72  0087               	movwf	7
  7345  0C73  3142               	addfsr 1,2
  7346  0C74  0834               	movf	modbus_response_write_single_register@pmdbs,w
  7347  0C75  0084               	movwf	4
  7348  0C76  3001               	movlw	1	; select bank2/3
  7349  0C77  0085               	movwf	5
  7350  0C78  0800               	movf	0,w
  7351  0C79  0601               	xorwf	1,w
  7352  0C7A  1903               	skipnz
  7353  0C7B  2C83               	goto	l4875
  7354  0C7C  0834               	movf	modbus_response_write_single_register@pmdbs,w
  7355  0C7D  0086               	movwf	6
  7356  0C7E  3001               	movlw	1	; select bank2/3
  7357  0C7F  0087               	movwf	7
  7358  0C80  0801               	movf	1,w
  7359  0C81  1D03               	btfss	3,2
  7360  0C82  0008               	return
  7361  0C83                     l4875:	
  7362                           
  7363                           ;modbus.c: 122: if(sysData.id==253 && pmdbs->addr==0)return;
  7364  0C83  305C               	movlw	92
  7365  0C84  0086               	movwf	6
  7366  0C85  3023               	movlw	35
  7367  0C86  0087               	movwf	7
  7368  0C87  3142               	addfsr 1,2
  7369  0C88  30FD               	movlw	253
  7370  0C89  0601               	xorwf	1,w
  7371  0C8A  1D03               	btfss	3,2
  7372  0C8B  2C93               	goto	l4881
  7373  0C8C  0834               	movf	modbus_response_write_single_register@pmdbs,w
  7374  0C8D  0086               	movwf	6
  7375  0C8E  3001               	movlw	1	; select bank2/3
  7376  0C8F  0087               	movwf	7
  7377  0C90  0801               	movf	1,w
  7378  0C91  1903               	btfsc	3,2
  7379  0C92  0008               	return
  7380  0C93                     l4881:	
  7381                           
  7382                           ;modbus.c: 123: startAddr=pmdbs->addr_hi;
  7383  0C93  0834               	movf	modbus_response_write_single_register@pmdbs,w
  7384  0C94  3E02               	addlw	2
  7385  0C95  0086               	movwf	6
  7386  0C96  3001               	movlw	1	; select bank2/3
  7387  0C97  0087               	movwf	7
  7388  0C98  0801               	movf	1,w
  7389  0C99  00AC               	movwf	??_modbus_response_write_single_register
  7390  0C9A  01AD               	clrf	??_modbus_response_write_single_register+1
  7391  0C9B  082C               	movf	??_modbus_response_write_single_register,w
  7392  0C9C  00B6               	movwf	modbus_response_write_single_register@startAddr
  7393  0C9D  082D               	movf	??_modbus_response_write_single_register+1,w
  7394  0C9E  00B7               	movwf	modbus_response_write_single_register@startAddr+1
  7395                           
  7396                           ;modbus.c: 124: startAddr<<=8;
  7397  0C9F  3008               	movlw	8
  7398  0CA0                     u4225:	
  7399  0CA0  35B6               	lslf	modbus_response_write_single_register@startAddr,f
  7400  0CA1  0DB7               	rlf	modbus_response_write_single_register@startAddr+1,f
  7401  0CA2  0B89               	decfsz	9,f
  7402  0CA3  2CA0               	goto	u4225
  7403                           
  7404                           ;modbus.c: 125: startAddr |= pmdbs->addr_lo;
  7405  0CA4  0834               	movf	modbus_response_write_single_register@pmdbs,w
  7406  0CA5  3E03               	addlw	3
  7407  0CA6  0086               	movwf	6
  7408  0CA7  3001               	movlw	1	; select bank2/3
  7409  0CA8  0087               	movwf	7
  7410  0CA9  0801               	movf	1,w
  7411  0CAA  00AC               	movwf	??_modbus_response_write_single_register
  7412  0CAB  01AD               	clrf	??_modbus_response_write_single_register+1
  7413  0CAC  082C               	movf	??_modbus_response_write_single_register,w
  7414  0CAD  04B6               	iorwf	modbus_response_write_single_register@startAddr,f
  7415  0CAE  082D               	movf	??_modbus_response_write_single_register+1,w
  7416  0CAF  04B7               	iorwf	modbus_response_write_single_register@startAddr+1,f
  7417                           
  7418                           ;modbus.c: 126: startAddr = startAddr & 0xff;
  7419  0CB0  30FF               	movlw	255
  7420  0CB1  0536               	andwf	modbus_response_write_single_register@startAddr,w
  7421  0CB2  00B6               	movwf	modbus_response_write_single_register@startAddr
  7422  0CB3  3000               	movlw	0
  7423  0CB4  0537               	andwf	modbus_response_write_single_register@startAddr+1,w
  7424  0CB5  00B7               	movwf	modbus_response_write_single_register@startAddr+1
  7425                           
  7426                           ;modbus.c: 127: if(startAddr==0x02){
  7427  0CB6  3002               	movlw	2
  7428  0CB7  0636               	xorwf	modbus_response_write_single_register@startAddr,w
  7429  0CB8  0437               	iorwf	modbus_response_write_single_register@startAddr+1,w
  7430  0CB9  1D03               	btfss	3,2
  7431  0CBA  2CC9               	goto	l4893
  7432                           
  7433                           ;modbus.c: 128: sysData.id=rbuf[5];
  7434  0CBB  0835               	movf	modbus_response_write_single_register@rbuf,w
  7435  0CBC  3E05               	addlw	5
  7436  0CBD  0086               	movwf	6
  7437  0CBE  3001               	movlw	1	; select bank2/3
  7438  0CBF  0087               	movwf	7
  7439  0CC0  0801               	movf	1,w
  7440  0CC1  00AC               	movwf	??_modbus_response_write_single_register
  7441  0CC2  305E               	movlw	94
  7442  0CC3  0086               	movwf	6
  7443  0CC4  3023               	movlw	35
  7444  0CC5  0087               	movwf	7
  7445  0CC6  082C               	movf	??_modbus_response_write_single_register,w
  7446  0CC7  0081               	movwf	1
  7447  0CC8  2D89               	goto	l828
  7448  0CC9                     l4893:	
  7449                           ;modbus.c: 130: }else if(startAddr==0x03){
  7450                           
  7451                           ;modbus.c: 129: fiSave=1;
  7452                           
  7453  0CC9  3003               	movlw	3
  7454  0CCA  0636               	xorwf	modbus_response_write_single_register@startAddr,w
  7455  0CCB  0437               	iorwf	modbus_response_write_single_register@startAddr+1,w
  7456  0CCC  1D03               	btfss	3,2
  7457  0CCD  2CE7               	goto	l4901
  7458                           
  7459                           ;modbus.c: 131: sysData.pidSetFlg1=rbuf[4];
  7460  0CCE  0835               	movf	modbus_response_write_single_register@rbuf,w
  7461  0CCF  3E04               	addlw	4
  7462  0CD0  0086               	movwf	6
  7463  0CD1  3001               	movlw	1	; select bank2/3
  7464  0CD2  0087               	movwf	7
  7465  0CD3  0801               	movf	1,w
  7466  0CD4  00AC               	movwf	??_modbus_response_write_single_register
  7467  0CD5  305D               	movlw	93
  7468  0CD6  0086               	movwf	6
  7469  0CD7  3023               	movlw	35
  7470  0CD8  0087               	movwf	7
  7471  0CD9  082C               	movf	??_modbus_response_write_single_register,w
  7472  0CDA  0081               	movwf	1
  7473                           
  7474                           ;modbus.c: 132: sysData.pidSetFlg0=rbuf[5];
  7475  0CDB  305C               	movlw	92
  7476  0CDC  0086               	movwf	6
  7477  0CDD  3023               	movlw	35
  7478  0CDE  0087               	movwf	7
  7479  0CDF  0835               	movf	modbus_response_write_single_register@rbuf,w
  7480  0CE0  3E05               	addlw	5
  7481  0CE1  0084               	movwf	4
  7482  0CE2  3001               	movlw	1	; select bank2/3
  7483  0CE3  0085               	movwf	5
  7484  0CE4  0800               	movf	0,w
  7485  0CE5  3FC0               	movwi [0]fsr1
  7486  0CE6  2D89               	goto	l828
  7487  0CE7                     l4901:	
  7488                           ;modbus.c: 134: }else if(startAddr>0x0f && startAddr < 0x10+30*2){
  7489                           
  7490                           ;modbus.c: 133: fiSave=1;
  7491                           
  7492  0CE7  3000               	movlw	0
  7493  0CE8  0237               	subwf	modbus_response_write_single_register@startAddr+1,w
  7494  0CE9  3010               	movlw	16
  7495  0CEA  1903               	skipnz
  7496  0CEB  0236               	subwf	modbus_response_write_single_register@startAddr,w
  7497  0CEC  1C03               	skipc
  7498  0CED  0008               	return
  7499  0CEE  3000               	movlw	0
  7500  0CEF  0237               	subwf	modbus_response_write_single_register@startAddr+1,w
  7501  0CF0  304C               	movlw	76
  7502  0CF1  1903               	skipnz
  7503  0CF2  0236               	subwf	modbus_response_write_single_register@startAddr,w
  7504  0CF3  1803               	skipnc
  7505  0CF4  0008               	return
  7506                           
  7507                           ;modbus.c: 135: startAddr-=0x10;
  7508  0CF5  3010               	movlw	16
  7509  0CF6  02B6               	subwf	modbus_response_write_single_register@startAddr,f
  7510  0CF7  3000               	movlw	0
  7511  0CF8  3BB7               	subwfb	modbus_response_write_single_register@startAddr+1,f
  7512                           
  7513                           ;modbus.c: 136: if(startAddr & 0x01){
  7514  0CF9  1C36               	btfss	modbus_response_write_single_register@startAddr,0
  7515  0CFA  2D8B               	goto	l4933
  7516                           
  7517                           ;modbus.c: 137: t16=rbuf[4];
  7518  0CFB  0835               	movf	modbus_response_write_single_register@rbuf,w
  7519  0CFC  3E04               	addlw	4
  7520  0CFD  0086               	movwf	6
  7521  0CFE  3001               	movlw	1	; select bank2/3
  7522  0CFF  0087               	movwf	7
  7523  0D00  0801               	movf	1,w
  7524  0D01  00AC               	movwf	??_modbus_response_write_single_register
  7525  0D02  01AD               	clrf	??_modbus_response_write_single_register+1
  7526  0D03  082C               	movf	??_modbus_response_write_single_register,w
  7527  0D04  00B1               	movwf	modbus_response_write_single_register@t16
  7528  0D05  082D               	movf	??_modbus_response_write_single_register+1,w
  7529  0D06  00B2               	movwf	modbus_response_write_single_register@t16+1
  7530                           
  7531                           ;modbus.c: 138: t16<<=8;
  7532  0D07  3008               	movlw	8
  7533  0D08                     u4285:	
  7534  0D08  35B1               	lslf	modbus_response_write_single_register@t16,f
  7535  0D09  0DB2               	rlf	modbus_response_write_single_register@t16+1,f
  7536  0D0A  0B89               	decfsz	9,f
  7537  0D0B  2D08               	goto	u4285
  7538                           
  7539                           ;modbus.c: 139: t16 |= rbuf[5];
  7540  0D0C  0835               	movf	modbus_response_write_single_register@rbuf,w
  7541  0D0D  3E05               	addlw	5
  7542  0D0E  0086               	movwf	6
  7543  0D0F  3001               	movlw	1	; select bank2/3
  7544  0D10  0087               	movwf	7
  7545  0D11  0801               	movf	1,w
  7546  0D12  00AC               	movwf	??_modbus_response_write_single_register
  7547  0D13  01AD               	clrf	??_modbus_response_write_single_register+1
  7548  0D14  082C               	movf	??_modbus_response_write_single_register,w
  7549  0D15  04B1               	iorwf	modbus_response_write_single_register@t16,f
  7550  0D16  082D               	movf	??_modbus_response_write_single_register+1,w
  7551  0D17  04B2               	iorwf	modbus_response_write_single_register@t16+1,f
  7552                           
  7553                           ;modbus.c: 140: sysData.calibVoMV[startAddr>>1]=t16;
  7554  0D18  0837               	movf	modbus_response_write_single_register@startAddr+1,w
  7555  0D19  00AD               	movwf	??_modbus_response_write_single_register+1
  7556  0D1A  0836               	movf	modbus_response_write_single_register@startAddr,w
  7557  0D1B  00AC               	movwf	??_modbus_response_write_single_register
  7558  0D1C  36AD               	lsrf	??_modbus_response_write_single_register+1,f
  7559  0D1D  0CAC               	rrf	??_modbus_response_write_single_register,f
  7560  0D1E  35AC               	lslf	??_modbus_response_write_single_register,f
  7561  0D1F  0DAD               	rlf	??_modbus_response_write_single_register+1,f
  7562  0D20  30A2               	movlw	162
  7563  0D21  00AE               	movwf	??_modbus_response_write_single_register+2
  7564  0D22  3023               	movlw	35
  7565  0D23  00AF               	movwf	??_modbus_response_write_single_register+3
  7566  0D24  082C               	movf	??_modbus_response_write_single_register,w
  7567  0D25  072E               	addwf	??_modbus_response_write_single_register+2,w
  7568  0D26  0086               	movwf	6
  7569  0D27  082D               	movf	??_modbus_response_write_single_register+1,w
  7570  0D28  3D2F               	addwfc	??_modbus_response_write_single_register+3,w
  7571  0D29  0087               	movwf	7
  7572  0D2A  0831               	movf	modbus_response_write_single_register@t16,w
  7573  0D2B  3FC0               	movwi [0]fsr1
  7574  0D2C  0832               	movf	modbus_response_write_single_register@t16+1,w
  7575  0D2D  3FC1               	movwi [1]fsr1
  7576                           
  7577                           ;modbus.c: 141: sysData.calibRsAdc[startAddr>>1]=rsLoAvg;
  7578  0D2E  0837               	movf	modbus_response_write_single_register@startAddr+1,w
  7579  0D2F  00AD               	movwf	??_modbus_response_write_single_register+1
  7580  0D30  0836               	movf	modbus_response_write_single_register@startAddr,w
  7581  0D31  00AC               	movwf	??_modbus_response_write_single_register
  7582  0D32  36AD               	lsrf	??_modbus_response_write_single_register+1,f
  7583  0D33  0CAC               	rrf	??_modbus_response_write_single_register,f
  7584  0D34  35AC               	lslf	??_modbus_response_write_single_register,f
  7585  0D35  0DAD               	rlf	??_modbus_response_write_single_register+1,f
  7586  0D36  3066               	movlw	102
  7587  0D37  00AE               	movwf	??_modbus_response_write_single_register+2
  7588  0D38  3023               	movlw	35
  7589  0D39  00AF               	movwf	??_modbus_response_write_single_register+3
  7590  0D3A  082C               	movf	??_modbus_response_write_single_register,w
  7591  0D3B  072E               	addwf	??_modbus_response_write_single_register+2,w
  7592  0D3C  0086               	movwf	6
  7593  0D3D  082D               	movf	??_modbus_response_write_single_register+1,w
  7594  0D3E  3D2F               	addwfc	??_modbus_response_write_single_register+3,w
  7595  0D3F  0087               	movwf	7
  7596  0D40  0853               	movf	_rsLoAvg,w
  7597  0D41  3FC0               	movwi [0]fsr1
  7598  0D42  0854               	movf	_rsLoAvg+1,w
  7599  0D43  3FC1               	movwi [1]fsr1
  7600                           
  7601                           ;modbus.c: 143: if(rbuf[1]==0x26){
  7602  0D44  0A35               	incf	modbus_response_write_single_register@rbuf,w
  7603  0D45  0086               	movwf	6
  7604  0D46  3001               	movlw	1	; select bank2/3
  7605  0D47  0087               	movwf	7
  7606  0D48  3026               	movlw	38
  7607  0D49  0601               	xorwf	1,w
  7608  0D4A  1D03               	btfss	3,2
  7609  0D4B  2D89               	goto	l828
  7610                           
  7611                           ;modbus.c: 144: for(i=(startAddr>>1)+1;i<30;i++){
  7612  0D4C  0837               	movf	modbus_response_write_single_register@startAddr+1,w
  7613  0D4D  00AD               	movwf	??_modbus_response_write_single_register+1
  7614  0D4E  0836               	movf	modbus_response_write_single_register@startAddr,w
  7615  0D4F  00AC               	movwf	??_modbus_response_write_single_register
  7616  0D50  36AD               	lsrf	??_modbus_response_write_single_register+1,f
  7617  0D51  0CAC               	rrf	??_modbus_response_write_single_register,f
  7618  0D52  082C               	movf	??_modbus_response_write_single_register,w
  7619  0D53  3E01               	addlw	1
  7620  0D54  00AE               	movwf	??_modbus_response_write_single_register+2
  7621  0D55  082E               	movf	??_modbus_response_write_single_register+2,w
  7622  0D56  00B3               	movwf	modbus_response_write_single_register@i
  7623  0D57  301E               	movlw	30
  7624  0D58  0233               	subwf	modbus_response_write_single_register@i,w
  7625  0D59  1803               	btfsc	3,0
  7626  0D5A  2D89               	goto	l828
  7627  0D5B                     l4927:	
  7628                           
  7629                           ;modbus.c: 145: sysData.calibVoMV[i]=t16;
  7630  0D5B  0833               	movf	modbus_response_write_single_register@i,w
  7631  0D5C  00AC               	movwf	??_modbus_response_write_single_register
  7632  0D5D  01AD               	clrf	??_modbus_response_write_single_register+1
  7633  0D5E  35AC               	lslf	??_modbus_response_write_single_register,f
  7634  0D5F  0DAD               	rlf	??_modbus_response_write_single_register+1,f
  7635  0D60  30A2               	movlw	162
  7636  0D61  00AE               	movwf	??_modbus_response_write_single_register+2
  7637  0D62  3023               	movlw	35
  7638  0D63  00AF               	movwf	??_modbus_response_write_single_register+3
  7639  0D64  082C               	movf	??_modbus_response_write_single_register,w
  7640  0D65  072E               	addwf	??_modbus_response_write_single_register+2,w
  7641  0D66  0086               	movwf	6
  7642  0D67  082D               	movf	??_modbus_response_write_single_register+1,w
  7643  0D68  3D2F               	addwfc	??_modbus_response_write_single_register+3,w
  7644  0D69  0087               	movwf	7
  7645  0D6A  0831               	movf	modbus_response_write_single_register@t16,w
  7646  0D6B  3FC0               	movwi [0]fsr1
  7647  0D6C  0832               	movf	modbus_response_write_single_register@t16+1,w
  7648  0D6D  3FC1               	movwi [1]fsr1
  7649                           
  7650                           ;modbus.c: 146: sysData.calibRsAdc[i]=rsLoAvg;
  7651  0D6E  0833               	movf	modbus_response_write_single_register@i,w
  7652  0D6F  00AC               	movwf	??_modbus_response_write_single_register
  7653  0D70  01AD               	clrf	??_modbus_response_write_single_register+1
  7654  0D71  35AC               	lslf	??_modbus_response_write_single_register,f
  7655  0D72  0DAD               	rlf	??_modbus_response_write_single_register+1,f
  7656  0D73  3066               	movlw	102
  7657  0D74  00AE               	movwf	??_modbus_response_write_single_register+2
  7658  0D75  3023               	movlw	35
  7659  0D76  00AF               	movwf	??_modbus_response_write_single_register+3
  7660  0D77  082C               	movf	??_modbus_response_write_single_register,w
  7661  0D78  072E               	addwf	??_modbus_response_write_single_register+2,w
  7662  0D79  0086               	movwf	6
  7663  0D7A  082D               	movf	??_modbus_response_write_single_register+1,w
  7664  0D7B  3D2F               	addwfc	??_modbus_response_write_single_register+3,w
  7665  0D7C  0087               	movwf	7
  7666  0D7D  0853               	movf	_rsLoAvg,w
  7667  0D7E  3FC0               	movwi [0]fsr1
  7668  0D7F  0854               	movf	_rsLoAvg+1,w
  7669  0D80  3FC1               	movwi [1]fsr1
  7670  0D81  3001               	movlw	1
  7671  0D82  00AC               	movwf	??_modbus_response_write_single_register
  7672  0D83  082C               	movf	??_modbus_response_write_single_register,w
  7673  0D84  07B3               	addwf	modbus_response_write_single_register@i,f
  7674  0D85  301E               	movlw	30
  7675  0D86  0233               	subwf	modbus_response_write_single_register@i,w
  7676  0D87  1C03               	skipc
  7677  0D88  2D5B               	goto	l4927
  7678  0D89                     l828:	
  7679                           
  7680                           ;modbus.c: 147: };modbus.c: 148: };modbus.c: 149: fiSave=1;
  7681  0D89  01B0               	clrf	modbus_response_write_single_register@fiSave
  7682  0D8A  0AB0               	incf	modbus_response_write_single_register@fiSave,f
  7683  0D8B                     l4933:	
  7684                           ;modbus.c: 153: return;
  7685                           
  7686                           ;modbus.c: 150: };modbus.c: 151: }else{
  7687                           
  7688                           
  7689                           ;modbus.c: 154: };modbus.c: 155: if(fiSave)sys_data_save();
  7690  0D8B  0830               	movf	modbus_response_write_single_register@fiSave,w
  7691  0D8C  1903               	btfsc	3,2
  7692  0D8D  2D91               	goto	l4937
  7693  0D8E  319E  2693  318C   	fcall	_sys_data_save
  7694  0D91                     l4937:	
  7695                           
  7696                           ;modbus.c: 156: if(pmdbs->addr==0)return;
  7697  0D91  0020               	movlb	0	; select bank0
  7698  0D92  0834               	movf	modbus_response_write_single_register@pmdbs,w
  7699  0D93  0086               	movwf	6
  7700  0D94  3001               	movlw	1	; select bank2/3
  7701  0D95  0087               	movwf	7
  7702  0D96  0801               	movf	1,w
  7703  0D97  1903               	btfsc	3,2
  7704  0D98  0008               	return
  7705                           
  7706                           ;modbus.c: 157: rbuf[0]=sysData.id;
  7707  0D99  305C               	movlw	92
  7708  0D9A  0086               	movwf	6
  7709  0D9B  3023               	movlw	35
  7710  0D9C  0087               	movwf	7
  7711  0D9D  3142               	addfsr 1,2
  7712  0D9E  0801               	movf	1,w
  7713  0D9F  00AC               	movwf	??_modbus_response_write_single_register
  7714  0DA0  0835               	movf	modbus_response_write_single_register@rbuf,w
  7715  0DA1  0086               	movwf	6
  7716  0DA2  3001               	movlw	1	; select bank2/3
  7717  0DA3  0087               	movwf	7
  7718  0DA4  082C               	movf	??_modbus_response_write_single_register,w
  7719  0DA5  0081               	movwf	1
  7720                           
  7721                           ;modbus.c: 158: crc_append(rbuf,6);
  7722  0DA6  0835               	movf	modbus_response_write_single_register@rbuf,w
  7723  0DA7  00A6               	movwf	crc_append@message
  7724  0DA8  3001               	movlw	1
  7725  0DA9  00A7               	movwf	crc_append@message+1
  7726  0DAA  3006               	movlw	6
  7727  0DAB  00A8               	movwf	crc_append@n
  7728  0DAC  3000               	movlw	0
  7729  0DAD  00A9               	movwf	crc_append@n+1
  7730  0DAE  319D  25FC  318C   	fcall	_crc_append
  7731                           
  7732                           ;modbus.c: 159: uart_send_len(rbuf,8);
  7733  0DB1  3008               	movlw	8
  7734  0DB2  0020               	movlb	0	; select bank0
  7735  0DB3  00AC               	movwf	??_modbus_response_write_single_register
  7736  0DB4  082C               	movf	??_modbus_response_write_single_register,w
  7737  0DB5  00F8               	movwf	uart_send_len@len
  7738  0DB6  0835               	movf	modbus_response_write_single_register@rbuf,w
  7739  0DB7  318F  27C4         	fcall	_uart_send_len
  7740  0DB9  0008               	return
  7741  0DBA                     __end_of_modbus_response_write_single_register:	
  7742                           
  7743                           	psect	text15
  7744  12F1                     __ptext15:	
  7745 ;; *************** function _modbus_response_write_mult_register *****************
  7746 ;; Defined at:
  7747 ;;		line 162 in file "src/api/modbus.c"
  7748 ;; Parameters:    Size  Location     Type
  7749 ;;  rbuf            1    wreg     PTR unsigned char 
  7750 ;;		 -> modbusBuf(32), 
  7751 ;; Auto vars:     Size  Location     Type
  7752 ;;  rbuf            1   15[BANK0 ] PTR unsigned char 
  7753 ;;		 -> modbusBuf(32), 
  7754 ;;  stb             1   16[BANK0 ] PTR struct .
  7755 ;;		 -> modbusBuf(32), 
  7756 ;;  len             1   14[BANK0 ] unsigned char 
  7757 ;;  startAddr       1   13[BANK0 ] unsigned char 
  7758 ;; Return value:  Size  Location     Type
  7759 ;;                  1    wreg      void 
  7760 ;; Registers used:
  7761 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7762 ;; Tracked objects:
  7763 ;;		On entry : 0/0
  7764 ;;		On exit  : 0/0
  7765 ;;		Unchanged: 0/0
  7766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7768 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7769 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7770 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7771 ;;Total ram usage:        5 bytes
  7772 ;; Hardware stack levels used:    1
  7773 ;; Hardware stack levels required when called:    4
  7774 ;; This function calls:
  7775 ;;		_crc_append
  7776 ;;		_sys_data_save
  7777 ;;		_uart_send_len
  7778 ;; This function is called by:
  7779 ;;		_modbus_response_process
  7780 ;; This function uses a non-reentrant model
  7781 ;;
  7782                           
  7783                           
  7784                           ;psect for function _modbus_response_write_mult_register
  7785  12F1                     _modbus_response_write_mult_register:	
  7786                           
  7787                           ;incstack = 0
  7788                           ; Regs used in _modbus_response_write_mult_register: [wreg-fsr1h+status,2+status,0+pclat
      +                          h+cstack]
  7789                           ;modbus_response_write_mult_register@rbuf stored from wreg
  7790  12F1  0020               	movlb	0	; select bank0
  7791  12F2  00AF               	movwf	modbus_response_write_mult_register@rbuf
  7792                           
  7793                           ;modbus.c: 164: uint8_t startAddr,len;;modbus.c: 166: st_modbusWriteMultReg_t* stb=(st_m
      +                          odbusWriteMultReg_t*)rbuf;
  7794  12F3  082F               	movf	modbus_response_write_mult_register@rbuf,w
  7795  12F4  00AC               	movwf	??_modbus_response_write_mult_register
  7796  12F5  082C               	movf	??_modbus_response_write_mult_register,w
  7797  12F6  00B0               	movwf	modbus_response_write_mult_register@stb
  7798                           
  7799                           ;modbus.c: 167: if(stb->addr!=sysData.id || stb->addr==0)return;
  7800  12F7  305C               	movlw	92
  7801  12F8  0086               	movwf	6
  7802  12F9  3023               	movlw	35
  7803  12FA  0087               	movwf	7
  7804  12FB  3142               	addfsr 1,2
  7805  12FC  0830               	movf	modbus_response_write_mult_register@stb,w
  7806  12FD  0084               	movwf	4
  7807  12FE  3001               	movlw	1	; select bank2/3
  7808  12FF  0085               	movwf	5
  7809  1300  0800               	movf	0,w
  7810  1301  0601               	xorwf	1,w
  7811  1302  1D03               	skipz
  7812  1303  0008               	return
  7813  1304  0830               	movf	modbus_response_write_mult_register@stb,w
  7814  1305  0086               	movwf	6
  7815  1306  3001               	movlw	1	; select bank2/3
  7816  1307  0087               	movwf	7
  7817  1308  0801               	movf	1,w
  7818  1309  1903               	btfsc	3,2
  7819  130A  0008               	return
  7820                           
  7821                           ;modbus.c: 168: startAddr=stb->addr_lo;
  7822  130B  0830               	movf	modbus_response_write_mult_register@stb,w
  7823  130C  0086               	movwf	6
  7824  130D  3001               	movlw	1	; select bank2/3
  7825  130E  0087               	movwf	7
  7826  130F  3001               	movlw	1	; select bank2/3
  7827  1310  3F43               	moviw [3]fsr1
  7828  1311  00AD               	movwf	modbus_response_write_mult_register@startAddr
  7829                           
  7830                           ;modbus.c: 169: len=stb->len_lo;
  7831  1312  0830               	movf	modbus_response_write_mult_register@stb,w
  7832  1313  0086               	movwf	6
  7833  1314  3001               	movlw	1	; select bank2/3
  7834  1315  0087               	movwf	7
  7835  1316  3001               	movlw	1	; select bank2/3
  7836  1317  3F45               	moviw [5]fsr1
  7837  1318  00AE               	movwf	modbus_response_write_mult_register@len
  7838                           
  7839                           ;modbus.c: 170: if(len!=3)return ;
  7840  1319  3003               	movlw	3
  7841  131A  062E               	xorwf	modbus_response_write_mult_register@len,w
  7842  131B  1D03               	btfss	3,2
  7843  131C  0008               	return
  7844                           
  7845                           ;modbus.c: 171: if(startAddr!=4)return;
  7846  131D  3004               	movlw	4
  7847  131E  062D               	xorwf	modbus_response_write_mult_register@startAddr,w
  7848  131F  1D03               	btfss	3,2
  7849  1320  0008               	return
  7850                           
  7851                           ;modbus.c: 173: sysData.pidKp=(stb->data[0]<<8)|(stb->data[1]);
  7852  1321  0830               	movf	modbus_response_write_mult_register@stb,w
  7853  1322  3E06               	addlw	6
  7854  1323  0084               	movwf	4
  7855  1324  3001               	movlw	1	; select bank2/3
  7856  1325  0085               	movwf	5
  7857  1326  0800               	movf	0,w
  7858  1327  00AC               	movwf	??_modbus_response_write_mult_register
  7859  1328  0830               	movf	modbus_response_write_mult_register@stb,w
  7860  1329  3E07               	addlw	7
  7861  132A  0084               	movwf	4
  7862  132B  3001               	movlw	1	; select bank2/3
  7863  132C  0085               	movwf	5
  7864  132D  305C               	movlw	92
  7865  132E  0086               	movwf	6
  7866  132F  3023               	movlw	35
  7867  1330  0087               	movwf	7
  7868  1331  3144               	addfsr 1,4
  7869  1332  0800               	movf	0,w
  7870  1333  3FC0               	movwi [0]fsr1
  7871  1334  082C               	movf	??_modbus_response_write_mult_register,w
  7872  1335  3FC1               	movwi [1]fsr1
  7873                           
  7874                           ;modbus.c: 174: sysData.pidTi=(stb->data[2]<<8)|(stb->data[3]);
  7875  1336  0830               	movf	modbus_response_write_mult_register@stb,w
  7876  1337  3E08               	addlw	8
  7877  1338  0084               	movwf	4
  7878  1339  3001               	movlw	1	; select bank2/3
  7879  133A  0085               	movwf	5
  7880  133B  0800               	movf	0,w
  7881  133C  00AC               	movwf	??_modbus_response_write_mult_register
  7882  133D  0830               	movf	modbus_response_write_mult_register@stb,w
  7883  133E  3E09               	addlw	9
  7884  133F  0084               	movwf	4
  7885  1340  3001               	movlw	1	; select bank2/3
  7886  1341  0085               	movwf	5
  7887  1342  305C               	movlw	92
  7888  1343  0086               	movwf	6
  7889  1344  3023               	movlw	35
  7890  1345  0087               	movwf	7
  7891  1346  3146               	addfsr 1,6
  7892  1347  0800               	movf	0,w
  7893  1348  3FC0               	movwi [0]fsr1
  7894  1349  082C               	movf	??_modbus_response_write_mult_register,w
  7895  134A  3FC1               	movwi [1]fsr1
  7896                           
  7897                           ;modbus.c: 176: sys_data_save();
  7898  134B  319E  2693  3192   	fcall	_sys_data_save
  7899                           
  7900                           ;modbus.c: 177: crc_append(rbuf,sizeof(st_modbusWriteMultReg_t)-2);
  7901  134E  0020               	movlb	0	; select bank0
  7902  134F  082F               	movf	modbus_response_write_mult_register@rbuf,w
  7903  1350  00A6               	movwf	crc_append@message
  7904  1351  3001               	movlw	1
  7905  1352  00A7               	movwf	crc_append@message+1
  7906  1353  3006               	movlw	6
  7907  1354  00A8               	movwf	crc_append@n
  7908  1355  3000               	movlw	0
  7909  1356  00A9               	movwf	crc_append@n+1
  7910  1357  319D  25FC  3192   	fcall	_crc_append
  7911                           
  7912                           ;modbus.c: 178: uart_send_len(rbuf,sizeof(st_modbusWriteMultReg_t));
  7913  135A  3008               	movlw	8
  7914  135B  0020               	movlb	0	; select bank0
  7915  135C  00AC               	movwf	??_modbus_response_write_mult_register
  7916  135D  082C               	movf	??_modbus_response_write_mult_register,w
  7917  135E  00F8               	movwf	uart_send_len@len
  7918  135F  082F               	movf	modbus_response_write_mult_register@rbuf,w
  7919  1360  318F  27C4         	fcall	_uart_send_len
  7920  1362  0008               	return
  7921  1363                     __end_of_modbus_response_write_mult_register:	
  7922                           
  7923                           	psect	text16
  7924  1E93                     __ptext16:	
  7925 ;; *************** function _sys_data_save *****************
  7926 ;; Defined at:
  7927 ;;		line 95 in file "src/api/sysData.c"
  7928 ;; Parameters:    Size  Location     Type
  7929 ;;		None
  7930 ;; Auto vars:     Size  Location     Type
  7931 ;;		None
  7932 ;; Return value:  Size  Location     Type
  7933 ;;                  1    wreg      void 
  7934 ;; Registers used:
  7935 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7936 ;; Tracked objects:
  7937 ;;		On entry : 0/0
  7938 ;;		On exit  : 0/0
  7939 ;;		Unchanged: 0/0
  7940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7944 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7945 ;;Total ram usage:        0 bytes
  7946 ;; Hardware stack levels used:    1
  7947 ;; Hardware stack levels required when called:    3
  7948 ;; This function calls:
  7949 ;;		_crc_append
  7950 ;;		_my_flash_read_system_erase
  7951 ;;		_my_flash_system_write
  7952 ;; This function is called by:
  7953 ;;		_sys_data_init
  7954 ;;		_modbus_response_write_single_register
  7955 ;;		_modbus_response_write_mult_register
  7956 ;; This function uses a non-reentrant model
  7957 ;;
  7958                           
  7959                           
  7960                           ;psect for function _sys_data_save
  7961  1E93                     _sys_data_save:	
  7962                           
  7963                           ;sysData.c: 97: crc_append((uint8_t*)&sysData,sizeof(sysData_t)-2);
  7964                           
  7965                           ;incstack = 0
  7966                           ; Regs used in _sys_data_save: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7967  1E93  305C               	movlw	92
  7968  1E94  0020               	movlb	0	; select bank0
  7969  1E95  00A6               	movwf	crc_append@message
  7970  1E96  3023               	movlw	35
  7971  1E97  00A7               	movwf	crc_append@message+1
  7972  1E98  3082               	movlw	130
  7973  1E99  00A8               	movwf	crc_append@n
  7974  1E9A  3000               	movlw	0
  7975  1E9B  00A9               	movwf	crc_append@n+1
  7976  1E9C  319D  25FC  319E   	fcall	_crc_append
  7977                           
  7978                           ;sysData.c: 98: my_flash_read_system_erase();
  7979  1E9F  3190  2009  319E   	fcall	_my_flash_read_system_erase
  7980                           
  7981                           ;sysData.c: 99: my_flash_system_write((uint8_t*)&sysData,sizeof(sysData_t));
  7982  1EA2  305C               	movlw	92
  7983  1EA3  00F1               	movwf	my_flash_system_write@buf
  7984  1EA4  3023               	movlw	35
  7985  1EA5  00F2               	movwf	my_flash_system_write@buf+1
  7986  1EA6  3084               	movlw	132
  7987  1EA7  00F3               	movwf	my_flash_system_write@len
  7988  1EA8  3000               	movlw	0
  7989  1EA9  00F4               	movwf	my_flash_system_write@len+1
  7990  1EAA  3193  23E5         	fcall	_my_flash_system_write
  7991                           
  7992                           ;sysData.c: 100: PidKp=sysData.pidKp;
  7993  1EAC  305C               	movlw	92
  7994  1EAD  0086               	movwf	6
  7995  1EAE  3023               	movlw	35
  7996  1EAF  0087               	movwf	7
  7997  1EB0  3144               	addfsr 1,4
  7998  1EB1  3F40               	moviw [0]fsr1
  7999  1EB2  0021               	movlb	1	; select bank1
  8000  1EB3  00D0               	movwf	_PidKp^(0+128)
  8001  1EB4  3F41               	moviw [1]fsr1
  8002  1EB5  00D1               	movwf	(_PidKp+1)^(0+128)
  8003                           
  8004                           ;sysData.c: 101: PidTi=sysData.pidTi;
  8005  1EB6  305C               	movlw	92
  8006  1EB7  0086               	movwf	6
  8007  1EB8  3023               	movlw	35
  8008  1EB9  0087               	movwf	7
  8009  1EBA  3146               	addfsr 1,6
  8010  1EBB  3F40               	moviw [0]fsr1
  8011  1EBC  00CE               	movwf	_PidTi^(0+128)
  8012  1EBD  3F41               	moviw [1]fsr1
  8013  1EBE  00CF               	movwf	(_PidTi+1)^(0+128)
  8014                           
  8015                           ;sysData.c: 102: PidTd=sysData.pidTd;;
  8016  1EBF  305C               	movlw	92
  8017  1EC0  0086               	movwf	6
  8018  1EC1  3023               	movlw	35
  8019  1EC2  0087               	movwf	7
  8020  1EC3  3148               	addfsr 1,8
  8021  1EC4  3F40               	moviw [0]fsr1
  8022  1EC5  00CC               	movwf	_PidTd^(0+128)
  8023  1EC6  3F41               	moviw [1]fsr1
  8024  1EC7  00CD               	movwf	(_PidTd+1)^(0+128)
  8025  1EC8  0008               	return
  8026  1EC9                     __end_of_sys_data_save:	
  8027                           
  8028                           	psect	text17
  8029  13E5                     __ptext17:	
  8030 ;; *************** function _my_flash_system_write *****************
  8031 ;; Defined at:
  8032 ;;		line 47 in file "src/api/sysData.c"
  8033 ;; Parameters:    Size  Location     Type
  8034 ;;  buf             2    1[COMMON] PTR unsigned char 
  8035 ;;		 -> sysData(132), 
  8036 ;;  len             2    3[COMMON] unsigned int 
  8037 ;; Auto vars:     Size  Location     Type
  8038 ;;  flashAddr       2    7[BANK0 ] unsigned int 
  8039 ;;  loc             2    5[BANK0 ] unsigned int 
  8040 ;;  blocNum         2    3[BANK0 ] unsigned int 
  8041 ;;  j               2    0[BANK0 ] unsigned int 
  8042 ;;  i               1    9[BANK0 ] unsigned char 
  8043 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
  8044 ;; Return value:  Size  Location     Type
  8045 ;;                  2    1[COMMON] unsigned int 
  8046 ;; Registers used:
  8047 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8048 ;; Tracked objects:
  8049 ;;		On entry : 0/0
  8050 ;;		On exit  : 0/0
  8051 ;;		Unchanged: 0/0
  8052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8053 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8054 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8055 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8056 ;;      Totals:         6      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8057 ;;Total ram usage:       16 bytes
  8058 ;; Hardware stack levels used:    1
  8059 ;; Hardware stack levels required when called:    1
  8060 ;; This function calls:
  8061 ;;		Nothing
  8062 ;; This function is called by:
  8063 ;;		_sys_data_save
  8064 ;; This function uses a non-reentrant model
  8065 ;;
  8066                           
  8067                           
  8068                           ;psect for function _my_flash_system_write
  8069  13E5                     _my_flash_system_write:	
  8070                           
  8071                           ;sysData.c: 49: uint16_t blocNum=0;
  8072                           
  8073                           ;incstack = 0
  8074                           ; Regs used in _my_flash_system_write: [wreg+fsr1l+fsr1h+status,2+status,0]
  8075  13E5  0020               	movlb	0	; select bank0
  8076  13E6  01A3               	clrf	my_flash_system_write@blocNum
  8077  13E7  01A4               	clrf	my_flash_system_write@blocNum+1
  8078                           
  8079                           ;sysData.c: 50: uint16_t loc,j;;sysData.c: 51: uint16_t flashAddr=0x1f00;
  8080  13E8  3000               	movlw	0
  8081  13E9  00A7               	movwf	my_flash_system_write@flashAddr
  8082  13EA  301F               	movlw	31
  8083  13EB  00A8               	movwf	my_flash_system_write@flashAddr+1
  8084                           
  8085                           ;sysData.c: 52: uint8_t GIEBitValue=INTCONbits.GIE;
  8086  13EC  3000               	movlw	0
  8087  13ED  1B8B               	btfsc	11,7	;volatile
  8088  13EE  3001               	movlw	1
  8089  13EF  00A2               	movwf	my_flash_system_write@GIEBitValue
  8090                           
  8091                           ;sysData.c: 53: uint8_t i=0;
  8092  13F0  01A9               	clrf	my_flash_system_write@i
  8093                           
  8094                           ;sysData.c: 54: blocNum=len/32;
  8095  13F1  0874               	movf	my_flash_system_write@len+1,w
  8096  13F2  00F6               	movwf	??_my_flash_system_write+1
  8097  13F3  0873               	movf	my_flash_system_write@len,w
  8098  13F4  00F5               	movwf	??_my_flash_system_write
  8099  13F5  3005               	movlw	5
  8100  13F6                     u2215:	
  8101  13F6  36F6               	lsrf	??_my_flash_system_write+1,f
  8102  13F7  0CF5               	rrf	??_my_flash_system_write,f
  8103  13F8  0B89               	decfsz	9,f
  8104  13F9  2BF6               	goto	u2215
  8105  13FA  0875               	movf	??_my_flash_system_write,w
  8106  13FB  00A3               	movwf	my_flash_system_write@blocNum
  8107  13FC  0876               	movf	??_my_flash_system_write+1,w
  8108  13FD  00A4               	movwf	my_flash_system_write@blocNum+1
  8109                           
  8110                           ;sysData.c: 55: if(len%32)blocNum++;
  8111  13FE  301F               	movlw	31
  8112  13FF  0573               	andwf	my_flash_system_write@len,w
  8113  1400  00F5               	movwf	??_my_flash_system_write
  8114  1401  3000               	movlw	0
  8115  1402  0574               	andwf	my_flash_system_write@len+1,w
  8116  1403  00F6               	movwf	??_my_flash_system_write+1
  8117  1404  0875               	movf	??_my_flash_system_write,w
  8118  1405  0476               	iorwf	??_my_flash_system_write+1,w
  8119  1406  1903               	btfsc	3,2
  8120  1407  2C0C               	goto	l3403
  8121  1408  3001               	movlw	1
  8122  1409  07A3               	addwf	my_flash_system_write@blocNum,f
  8123  140A  3000               	movlw	0
  8124  140B  3DA4               	addwfc	my_flash_system_write@blocNum+1,f
  8125  140C                     l3403:	
  8126                           
  8127                           ;sysData.c: 57: INTCONbits.GIE = 0;
  8128  140C  138B               	bcf	11,7	;volatile
  8129                           
  8130                           ;sysData.c: 58: loc=0;
  8131  140D  01A5               	clrf	my_flash_system_write@loc
  8132  140E  01A6               	clrf	my_flash_system_write@loc+1
  8133                           
  8134                           ;sysData.c: 59: for(j=0;j<blocNum;j++){
  8135  140F  01A0               	clrf	my_flash_system_write@j
  8136  1410  01A1               	clrf	my_flash_system_write@j+1
  8137  1411                     l738:	
  8138  1411  0824               	movf	my_flash_system_write@blocNum+1,w
  8139  1412  0221               	subwf	my_flash_system_write@j+1,w
  8140  1413  1D03               	skipz
  8141  1414  2C17               	goto	u2275
  8142  1415  0823               	movf	my_flash_system_write@blocNum,w
  8143  1416  0220               	subwf	my_flash_system_write@j,w
  8144  1417                     u2275:	
  8145  1417  1803               	btfsc	3,0
  8146  1418  2C6D               	goto	l3447
  8147                           
  8148                           ;sysData.c: 60: PMCON1bits.CFGS = 0;
  8149  1419  0023               	movlb	3	; select bank3
  8150  141A  1315               	bcf	21,6	;volatile
  8151                           
  8152                           ;sysData.c: 61: PMCON1bits.WREN = 1;
  8153  141B  1515               	bsf	21,2	;volatile
  8154                           
  8155                           ;sysData.c: 62: PMCON1bits.LWLO = 1;
  8156  141C  1695               	bsf	21,5	;volatile
  8157                           
  8158                           ;sysData.c: 64: for(i=0;i<32;i++){
  8159  141D  0020               	movlb	0	; select bank0
  8160  141E  01A9               	clrf	my_flash_system_write@i
  8161  141F  3020               	movlw	32
  8162  1420  0229               	subwf	my_flash_system_write@i,w
  8163  1421  1803               	btfsc	3,0
  8164  1422  2C65               	goto	l741
  8165  1423                     l3415:	
  8166                           
  8167                           ;sysData.c: 66: PMADRL = (flashAddr & 0xFF);
  8168  1423  0827               	movf	my_flash_system_write@flashAddr,w
  8169  1424  0023               	movlb	3	; select bank3
  8170  1425  0091               	movwf	17	;volatile
  8171                           
  8172                           ;sysData.c: 68: PMADRH = ((flashAddr & 0xFF00) >> 8);
  8173  1426  0020               	movlb	0	; select bank0
  8174  1427  0828               	movf	my_flash_system_write@flashAddr+1,w
  8175  1428  0023               	movlb	3	; select bank3
  8176  1429  0092               	movwf	18	;volatile
  8177                           
  8178                           ;sysData.c: 71: if(loc<len){
  8179  142A  0874               	movf	my_flash_system_write@len+1,w
  8180  142B  0020               	movlb	0	; select bank0
  8181  142C  0226               	subwf	my_flash_system_write@loc+1,w
  8182  142D  1D03               	skipz
  8183  142E  2C31               	goto	u2245
  8184  142F  0873               	movf	my_flash_system_write@len,w
  8185  1430  0225               	subwf	my_flash_system_write@loc,w
  8186  1431                     u2245:	
  8187  1431  1803               	skipnc
  8188  1432  2C3D               	goto	l3423
  8189                           
  8190                           ;sysData.c: 72: PMDATL = buf[loc];
  8191  1433  0825               	movf	my_flash_system_write@loc,w
  8192  1434  0771               	addwf	my_flash_system_write@buf,w
  8193  1435  0086               	movwf	6
  8194  1436  0826               	movf	my_flash_system_write@loc+1,w
  8195  1437  3D72               	addwfc	my_flash_system_write@buf+1,w
  8196  1438  0087               	movwf	7
  8197  1439  0801               	movf	1,w
  8198  143A  0023               	movlb	3	; select bank3
  8199  143B  0093               	movwf	19	;volatile
  8200                           
  8201                           ;sysData.c: 73: }else{
  8202  143C  2C3F               	goto	l3425
  8203  143D                     l3423:	
  8204                           
  8205                           ;sysData.c: 74: PMDATL = 0x00;
  8206  143D  0023               	movlb	3	; select bank3
  8207  143E  0193               	clrf	19	;volatile
  8208  143F                     l3425:	
  8209                           
  8210                           ;sysData.c: 75: };sysData.c: 76: loc++;
  8211  143F  3001               	movlw	1
  8212  1440  0020               	movlb	0	; select bank0
  8213  1441  07A5               	addwf	my_flash_system_write@loc,f
  8214  1442  3000               	movlw	0
  8215  1443  3DA6               	addwfc	my_flash_system_write@loc+1,f
  8216                           
  8217                           ;sysData.c: 77: PMDATH = 0x00;
  8218  1444  0023               	movlb	3	; select bank3
  8219  1445  0194               	clrf	20	;volatile
  8220                           
  8221                           ;sysData.c: 78: if((i%32) == 32 -1 ){
  8222  1446  301F               	movlw	31
  8223  1447  0020               	movlb	0	; select bank0
  8224  1448  0529               	andwf	my_flash_system_write@i,w
  8225  1449  00F5               	movwf	??_my_flash_system_write
  8226  144A  301F               	movlw	31
  8227  144B  0675               	xorwf	??_my_flash_system_write,w
  8228  144C  1D03               	btfss	3,2
  8229  144D  2C50               	goto	l3433
  8230                           
  8231                           ;sysData.c: 79: PMCON1bits.LWLO = 0;
  8232  144E  0023               	movlb	3	; select bank3
  8233  144F  1295               	bcf	21,5	;volatile
  8234  1450                     l3433:	
  8235                           
  8236                           ;sysData.c: 80: };sysData.c: 82: PMCON2 = 0x55;
  8237  1450  3055               	movlw	85
  8238  1451  0023               	movlb	3	; select bank3
  8239  1452  0096               	movwf	22	;volsfr
  8240                           
  8241                           ;sysData.c: 83: PMCON2 = 0xAA;
  8242  1453  30AA               	movlw	170
  8243  1454  0096               	movwf	22	;volsfr
  8244                           
  8245                           ;sysData.c: 84: PMCON1bits.WR = 1;
  8246  1455  1495               	bsf	21,1	;volatile
  8247                           
  8248                           ;sysData.c: 85: __nop();
  8249  1456  0000               	nop
  8250                           
  8251                           ;sysData.c: 86: __nop();
  8252  1457  0000               	nop
  8253                           
  8254                           ;sysData.c: 87: flashAddr++;
  8255  1458  3001               	movlw	1
  8256  1459  0020               	movlb	0	; select bank0
  8257  145A  07A7               	addwf	my_flash_system_write@flashAddr,f
  8258  145B  3000               	movlw	0
  8259  145C  3DA8               	addwfc	my_flash_system_write@flashAddr+1,f
  8260  145D  3001               	movlw	1
  8261  145E  00F5               	movwf	??_my_flash_system_write
  8262  145F  0875               	movf	??_my_flash_system_write,w
  8263  1460  07A9               	addwf	my_flash_system_write@i,f
  8264  1461  3020               	movlw	32
  8265  1462  0229               	subwf	my_flash_system_write@i,w
  8266  1463  1C03               	skipc
  8267  1464  2C23               	goto	l3415
  8268  1465                     l741:	
  8269                           
  8270                           ;sysData.c: 88: };sysData.c: 89: PMCON1bits.WREN = 0;
  8271  1465  0023               	movlb	3	; select bank3
  8272  1466  1115               	bcf	21,2	;volatile
  8273  1467  3001               	movlw	1
  8274  1468  0020               	movlb	0	; select bank0
  8275  1469  07A0               	addwf	my_flash_system_write@j,f
  8276  146A  3000               	movlw	0
  8277  146B  3DA1               	addwfc	my_flash_system_write@j+1,f
  8278  146C  2C11               	goto	l738
  8279  146D                     l3447:	
  8280                           
  8281                           ;sysData.c: 90: };sysData.c: 91: INTCONbits.GIE = GIEBitValue;
  8282  146D  0C22               	rrf	my_flash_system_write@GIEBitValue,w
  8283  146E  1C03               	skipc
  8284  146F  138B               	bcf	11,7	;volatile
  8285  1470  1803               	skipnc
  8286  1471  178B               	bsf	11,7	;volatile
  8287  1472  0008               	return
  8288  1473                     __end_of_my_flash_system_write:	
  8289                           ;sysData.c: 93: return 0;;	Return value of _my_flash_system_write is never used
  8290                           
  8291                           
  8292                           	psect	text18
  8293  1009                     __ptext18:	
  8294 ;; *************** function _my_flash_read_system_erase *****************
  8295 ;; Defined at:
  8296 ;;		line 9 in file "src/api/sysData.c"
  8297 ;; Parameters:    Size  Location     Type
  8298 ;;		None
  8299 ;; Auto vars:     Size  Location     Type
  8300 ;;		None
  8301 ;; Return value:  Size  Location     Type
  8302 ;;                  1    wreg      void 
  8303 ;; Registers used:
  8304 ;;		wreg, status,2, status,0, pclath, cstack
  8305 ;; Tracked objects:
  8306 ;;		On entry : 0/0
  8307 ;;		On exit  : 0/0
  8308 ;;		Unchanged: 0/0
  8309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8313 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8314 ;;Total ram usage:        0 bytes
  8315 ;; Hardware stack levels used:    1
  8316 ;; Hardware stack levels required when called:    2
  8317 ;; This function calls:
  8318 ;;		_FLASH_EraseBlock
  8319 ;; This function is called by:
  8320 ;;		_sys_data_save
  8321 ;; This function uses a non-reentrant model
  8322 ;;
  8323                           
  8324                           
  8325                           ;psect for function _my_flash_read_system_erase
  8326  1009                     _my_flash_read_system_erase:	
  8327                           
  8328                           ;sysData.c: 16: FLASH_EraseBlock(0x1f00);
  8329                           
  8330                           ;incstack = 0
  8331                           ; Regs used in _my_flash_read_system_erase: [wreg+status,2+status,0+pclath+cstack]
  8332  1009  3000               	movlw	0
  8333  100A  00F1               	movwf	FLASH_EraseBlock@startAddr
  8334  100B  301F               	movlw	31
  8335  100C  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  8336  100D  319D  258B  3190   	fcall	_FLASH_EraseBlock
  8337                           
  8338                           ;sysData.c: 17: FLASH_EraseBlock(0x1f00+32);
  8339  1010  3020               	movlw	32
  8340  1011  00F1               	movwf	FLASH_EraseBlock@startAddr
  8341  1012  301F               	movlw	31
  8342  1013  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  8343  1014  319D  258B  3190   	fcall	_FLASH_EraseBlock
  8344                           
  8345                           ;sysData.c: 18: FLASH_EraseBlock(0x1f00+64);
  8346  1017  3040               	movlw	64
  8347  1018  00F1               	movwf	FLASH_EraseBlock@startAddr
  8348  1019  301F               	movlw	31
  8349  101A  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  8350  101B  319D  258B  3190   	fcall	_FLASH_EraseBlock
  8351                           
  8352                           ;sysData.c: 19: FLASH_EraseBlock(0x1f00+96);
  8353  101E  3060               	movlw	96
  8354  101F  00F1               	movwf	FLASH_EraseBlock@startAddr
  8355  1020  301F               	movlw	31
  8356  1021  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  8357  1022  319D  258B  3190   	fcall	_FLASH_EraseBlock
  8358                           
  8359                           ;sysData.c: 20: FLASH_EraseBlock(0x1f00+128);
  8360  1025  3080               	movlw	128
  8361  1026  00F1               	movwf	FLASH_EraseBlock@startAddr
  8362  1027  301F               	movlw	31
  8363  1028  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  8364  1029  319D  258B         	fcall	_FLASH_EraseBlock
  8365  102B  0008               	return
  8366  102C                     __end_of_my_flash_read_system_erase:	
  8367                           
  8368                           	psect	text19
  8369  1D8B                     __ptext19:	
  8370 ;; *************** function _FLASH_EraseBlock *****************
  8371 ;; Defined at:
  8372 ;;		line 147 in file "mcc_generated_files/memory.c"
  8373 ;; Parameters:    Size  Location     Type
  8374 ;;  startAddr       2    1[COMMON] unsigned int 
  8375 ;; Auto vars:     Size  Location     Type
  8376 ;;  GIEBitValue     1    3[COMMON] unsigned char 
  8377 ;; Return value:  Size  Location     Type
  8378 ;;                  1    wreg      void 
  8379 ;; Registers used:
  8380 ;;		wreg, status,2, status,0
  8381 ;; Tracked objects:
  8382 ;;		On entry : 0/0
  8383 ;;		On exit  : 0/0
  8384 ;;		Unchanged: 0/0
  8385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8386 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8387 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8389 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8390 ;;Total ram usage:        3 bytes
  8391 ;; Hardware stack levels used:    1
  8392 ;; Hardware stack levels required when called:    1
  8393 ;; This function calls:
  8394 ;;		Nothing
  8395 ;; This function is called by:
  8396 ;;		_my_flash_read_system_erase
  8397 ;;		_FLASH_WriteBlock
  8398 ;; This function uses a non-reentrant model
  8399 ;;
  8400                           
  8401                           
  8402                           ;psect for function _FLASH_EraseBlock
  8403  1D8B                     _FLASH_EraseBlock:	
  8404                           
  8405                           ;memory.c: 149: uint8_t GIEBitValue = INTCONbits.GIE;
  8406                           
  8407                           ;incstack = 0
  8408                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  8409  1D8B  3000               	movlw	0
  8410  1D8C  1B8B               	btfsc	11,7	;volatile
  8411  1D8D  3001               	movlw	1
  8412  1D8E  00F3               	movwf	FLASH_EraseBlock@GIEBitValue
  8413                           
  8414                           ;memory.c: 152: INTCONbits.GIE = 0;
  8415  1D8F  138B               	bcf	11,7	;volatile
  8416                           
  8417                           ;memory.c: 154: PMADRL = (startAddr & 0xFF);
  8418  1D90  0871               	movf	FLASH_EraseBlock@startAddr,w
  8419  1D91  0023               	movlb	3	; select bank3
  8420  1D92  0091               	movwf	17	;volatile
  8421                           
  8422                           ;memory.c: 156: PMADRH = ((startAddr & 0xFF00) >> 8);
  8423  1D93  0872               	movf	FLASH_EraseBlock@startAddr+1,w
  8424  1D94  0092               	movwf	18	;volatile
  8425                           
  8426                           ;memory.c: 159: PMCON1bits.CFGS = 0;
  8427  1D95  1315               	bcf	21,6	;volatile
  8428                           
  8429                           ;memory.c: 160: PMCON1bits.FREE = 1;
  8430  1D96  1615               	bsf	21,4	;volatile
  8431                           
  8432                           ;memory.c: 161: PMCON1bits.WREN = 1;
  8433  1D97  1515               	bsf	21,2	;volatile
  8434                           
  8435                           ;memory.c: 164: PMCON2 = 0x55;
  8436  1D98  3055               	movlw	85
  8437  1D99  0096               	movwf	22	;volsfr
  8438                           
  8439                           ;memory.c: 165: PMCON2 = 0xAA;
  8440  1D9A  30AA               	movlw	170
  8441  1D9B  0096               	movwf	22	;volsfr
  8442                           
  8443                           ;memory.c: 166: PMCON1bits.WR = 1;
  8444  1D9C  1495               	bsf	21,1	;volatile
  8445                           
  8446                           ;memory.c: 167: __nop();
  8447  1D9D  0000               	nop
  8448                           
  8449                           ;memory.c: 168: __nop();
  8450  1D9E  0000               	nop
  8451                           
  8452                           ;memory.c: 170: PMCON1bits.WREN = 0;
  8453  1D9F  0023               	movlb	3	; select bank3
  8454  1DA0  1115               	bcf	21,2	;volatile
  8455                           
  8456                           ;memory.c: 171: INTCONbits.GIE = GIEBitValue;
  8457  1DA1  0C73               	rrf	FLASH_EraseBlock@GIEBitValue,w
  8458  1DA2  1C03               	skipc
  8459  1DA3  138B               	bcf	11,7	;volatile
  8460  1DA4  1803               	skipnc
  8461  1DA5  178B               	bsf	11,7	;volatile
  8462  1DA6  0008               	return
  8463  1DA7                     __end_of_FLASH_EraseBlock:	
  8464                           
  8465                           	psect	text20
  8466  10A3                     __ptext20:	
  8467 ;; *************** function _modbus_response_illgeal_function *****************
  8468 ;; Defined at:
  8469 ;;		line 8 in file "src/api/modbus.c"
  8470 ;; Parameters:    Size  Location     Type
  8471 ;;  buf             1    wreg     PTR unsigned char 
  8472 ;;		 -> modbusBuf(32), 
  8473 ;;  errcode         1   12[BANK0 ] unsigned char 
  8474 ;; Auto vars:     Size  Location     Type
  8475 ;;  buf             1   14[BANK0 ] PTR unsigned char 
  8476 ;;		 -> modbusBuf(32), 
  8477 ;;  pmdbs           1   15[BANK0 ] PTR struct .
  8478 ;;		 -> modbusBuf(32), 
  8479 ;; Return value:  Size  Location     Type
  8480 ;;                  1    wreg      void 
  8481 ;; Registers used:
  8482 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8483 ;; Tracked objects:
  8484 ;;		On entry : 0/0
  8485 ;;		On exit  : 0/0
  8486 ;;		Unchanged: 0/0
  8487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8488 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8489 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8490 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8491 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8492 ;;Total ram usage:        4 bytes
  8493 ;; Hardware stack levels used:    1
  8494 ;; Hardware stack levels required when called:    3
  8495 ;; This function calls:
  8496 ;;		_crc_append
  8497 ;;		_uart_send_len
  8498 ;; This function is called by:
  8499 ;;		_modbus_response_process
  8500 ;; This function uses a non-reentrant model
  8501 ;;
  8502                           
  8503                           
  8504                           ;psect for function _modbus_response_illgeal_function
  8505  10A3                     _modbus_response_illgeal_function:	
  8506                           
  8507                           ;incstack = 0
  8508                           ; Regs used in _modbus_response_illgeal_function: [wreg+fsr1l+fsr1h+status,2+status,0+pc
      +                          lath+cstack]
  8509                           ;modbus_response_illgeal_function@buf stored from wreg
  8510  10A3  0020               	movlb	0	; select bank0
  8511  10A4  00AE               	movwf	modbus_response_illgeal_function@buf
  8512                           
  8513                           ;modbus.c: 10: st_modbusErrRespStructDef* pmdbs=(st_modbusErrRespStructDef*)buf;
  8514  10A5  082E               	movf	modbus_response_illgeal_function@buf,w
  8515  10A6  00AD               	movwf	??_modbus_response_illgeal_function
  8516  10A7  082D               	movf	??_modbus_response_illgeal_function,w
  8517  10A8  00AF               	movwf	modbus_response_illgeal_function@pmdbs
  8518                           
  8519                           ;modbus.c: 11: if(pmdbs->addr==0x00)return;
  8520  10A9  082F               	movf	modbus_response_illgeal_function@pmdbs,w
  8521  10AA  0086               	movwf	6
  8522  10AB  3001               	movlw	1	; select bank2/3
  8523  10AC  0087               	movwf	7
  8524  10AD  0801               	movf	1,w
  8525  10AE  1903               	btfsc	3,2
  8526  10AF  0008               	return
  8527                           
  8528                           ;modbus.c: 12: pmdbs->addr=sysData.id;
  8529  10B0  305C               	movlw	92
  8530  10B1  0086               	movwf	6
  8531  10B2  3023               	movlw	35
  8532  10B3  0087               	movwf	7
  8533  10B4  3142               	addfsr 1,2
  8534  10B5  0801               	movf	1,w
  8535  10B6  00AD               	movwf	??_modbus_response_illgeal_function
  8536  10B7  082F               	movf	modbus_response_illgeal_function@pmdbs,w
  8537  10B8  0086               	movwf	6
  8538  10B9  3001               	movlw	1	; select bank2/3
  8539  10BA  0087               	movwf	7
  8540  10BB  082D               	movf	??_modbus_response_illgeal_function,w
  8541  10BC  0081               	movwf	1
  8542                           
  8543                           ;modbus.c: 13: if(errcode){
  8544  10BD  082C               	movf	modbus_response_illgeal_function@errcode,w
  8545  10BE  1903               	btfsc	3,2
  8546  10BF  28C8               	goto	l792
  8547                           
  8548                           ;modbus.c: 14: pmdbs->func+=0x80;
  8549  10C0  3080               	movlw	128
  8550  10C1  00AD               	movwf	??_modbus_response_illgeal_function
  8551  10C2  0A2F               	incf	modbus_response_illgeal_function@pmdbs,w
  8552  10C3  0086               	movwf	6
  8553  10C4  3001               	movlw	1	; select bank2/3
  8554  10C5  0087               	movwf	7
  8555  10C6  082D               	movf	??_modbus_response_illgeal_function,w
  8556  10C7  0781               	addwf	1,f
  8557  10C8                     l792:	
  8558                           
  8559                           ;modbus.c: 15: };modbus.c: 16: pmdbs->errcord=errcode;
  8560  10C8  082C               	movf	modbus_response_illgeal_function@errcode,w
  8561  10C9  00AD               	movwf	??_modbus_response_illgeal_function
  8562  10CA  082F               	movf	modbus_response_illgeal_function@pmdbs,w
  8563  10CB  3E02               	addlw	2
  8564  10CC  0086               	movwf	6
  8565  10CD  3001               	movlw	1	; select bank2/3
  8566  10CE  0087               	movwf	7
  8567  10CF  082D               	movf	??_modbus_response_illgeal_function,w
  8568  10D0  0081               	movwf	1
  8569                           
  8570                           ;modbus.c: 17: crc_append(buf,3);
  8571  10D1  082E               	movf	modbus_response_illgeal_function@buf,w
  8572  10D2  00A6               	movwf	crc_append@message
  8573  10D3  3001               	movlw	1
  8574  10D4  00A7               	movwf	crc_append@message+1
  8575  10D5  3003               	movlw	3
  8576  10D6  00A8               	movwf	crc_append@n
  8577  10D7  3000               	movlw	0
  8578  10D8  00A9               	movwf	crc_append@n+1
  8579  10D9  319D  25FC  3190   	fcall	_crc_append
  8580                           
  8581                           ;modbus.c: 18: uart_send_len(buf,5);
  8582  10DC  3005               	movlw	5
  8583  10DD  0020               	movlb	0	; select bank0
  8584  10DE  00AD               	movwf	??_modbus_response_illgeal_function
  8585  10DF  082D               	movf	??_modbus_response_illgeal_function,w
  8586  10E0  00F8               	movwf	uart_send_len@len
  8587  10E1  082E               	movf	modbus_response_illgeal_function@buf,w
  8588  10E2  318F  27C4         	fcall	_uart_send_len
  8589  10E4  0008               	return
  8590  10E5                     __end_of_modbus_response_illgeal_function:	
  8591                           
  8592                           	psect	text21
  8593  1594                     __ptext21:	
  8594 ;; *************** function _modbus_response_command *****************
  8595 ;; Defined at:
  8596 ;;		line 181 in file "src/api/modbus.c"
  8597 ;; Parameters:    Size  Location     Type
  8598 ;;  rbuf            1    wreg     PTR unsigned char 
  8599 ;;		 -> modbusBuf(32), 
  8600 ;; Auto vars:     Size  Location     Type
  8601 ;;  rbuf            1   21[BANK0 ] PTR unsigned char 
  8602 ;;		 -> modbusBuf(32), 
  8603 ;;  tempData        2   22[BANK0 ] unsigned int 
  8604 ;;  startAddr       2   16[BANK0 ] unsigned int 
  8605 ;;  tmpAddr         2   14[BANK0 ] unsigned int 
  8606 ;;  len             1   20[BANK0 ] unsigned char 
  8607 ;;  pmdbs           1   19[BANK0 ] PTR struct .
  8608 ;;		 -> modbusBuf(32), 
  8609 ;;  i               1   18[BANK0 ] unsigned char 
  8610 ;; Return value:  Size  Location     Type
  8611 ;;                  1    wreg      void 
  8612 ;; Registers used:
  8613 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8614 ;; Tracked objects:
  8615 ;;		On entry : 0/0
  8616 ;;		On exit  : 0/0
  8617 ;;		Unchanged: 0/0
  8618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8620 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8621 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8622 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8623 ;;Total ram usage:       12 bytes
  8624 ;; Hardware stack levels used:    1
  8625 ;; Hardware stack levels required when called:    3
  8626 ;; This function calls:
  8627 ;;		_crc_append
  8628 ;;		_getRegisterVal
  8629 ;;		_uart_send_len
  8630 ;; This function is called by:
  8631 ;;		_modbus_response_process
  8632 ;; This function uses a non-reentrant model
  8633 ;;
  8634                           
  8635                           
  8636                           ;psect for function _modbus_response_command
  8637  1594                     _modbus_response_command:	
  8638                           
  8639                           ;incstack = 0
  8640                           ; Regs used in _modbus_response_command: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8641                           ;modbus_response_command@rbuf stored from wreg
  8642  1594  0020               	movlb	0	; select bank0
  8643  1595  00B5               	movwf	modbus_response_command@rbuf
  8644                           
  8645                           ;modbus.c: 182: uint8_t i;;modbus.c: 183: uint16_t startAddr=0;
  8646  1596  01B0               	clrf	modbus_response_command@startAddr
  8647  1597  01B1               	clrf	modbus_response_command@startAddr+1
  8648                           
  8649                           ;modbus.c: 184: uint16_t tempData,tmpAddr;;modbus.c: 185: uint8_t len=0;
  8650  1598  01B4               	clrf	modbus_response_command@len
  8651                           
  8652                           ;modbus.c: 186: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)rbuf;
  8653  1599  0835               	movf	modbus_response_command@rbuf,w
  8654  159A  00AC               	movwf	??_modbus_response_command
  8655  159B  082C               	movf	??_modbus_response_command,w
  8656  159C  00B3               	movwf	modbus_response_command@pmdbs
  8657                           
  8658                           ;modbus.c: 187: if(pmdbs->addr!=sysData.id || pmdbs->addr==0)return;
  8659  159D  305C               	movlw	92
  8660  159E  0086               	movwf	6
  8661  159F  3023               	movlw	35
  8662  15A0  0087               	movwf	7
  8663  15A1  3142               	addfsr 1,2
  8664  15A2  0833               	movf	modbus_response_command@pmdbs,w
  8665  15A3  0084               	movwf	4
  8666  15A4  3001               	movlw	1	; select bank2/3
  8667  15A5  0085               	movwf	5
  8668  15A6  0800               	movf	0,w
  8669  15A7  0601               	xorwf	1,w
  8670  15A8  1D03               	skipz
  8671  15A9  0008               	return
  8672  15AA  0833               	movf	modbus_response_command@pmdbs,w
  8673  15AB  0086               	movwf	6
  8674  15AC  3001               	movlw	1	; select bank2/3
  8675  15AD  0087               	movwf	7
  8676  15AE  0801               	movf	1,w
  8677  15AF  1903               	btfsc	3,2
  8678  15B0  0008               	return
  8679                           
  8680                           ;modbus.c: 188: startAddr=pmdbs->addr_hi;
  8681  15B1  0833               	movf	modbus_response_command@pmdbs,w
  8682  15B2  3E02               	addlw	2
  8683  15B3  0086               	movwf	6
  8684  15B4  3001               	movlw	1	; select bank2/3
  8685  15B5  0087               	movwf	7
  8686  15B6  0801               	movf	1,w
  8687  15B7  00AC               	movwf	??_modbus_response_command
  8688  15B8  01AD               	clrf	??_modbus_response_command+1
  8689  15B9  082C               	movf	??_modbus_response_command,w
  8690  15BA  00B0               	movwf	modbus_response_command@startAddr
  8691  15BB  082D               	movf	??_modbus_response_command+1,w
  8692  15BC  00B1               	movwf	modbus_response_command@startAddr+1
  8693                           
  8694                           ;modbus.c: 189: startAddr<<=8;
  8695  15BD  3008               	movlw	8
  8696  15BE                     u4405:	
  8697  15BE  35B0               	lslf	modbus_response_command@startAddr,f
  8698  15BF  0DB1               	rlf	modbus_response_command@startAddr+1,f
  8699  15C0  0B89               	decfsz	9,f
  8700  15C1  2DBE               	goto	u4405
  8701                           
  8702                           ;modbus.c: 190: startAddr |= pmdbs->addr_lo;
  8703  15C2  0833               	movf	modbus_response_command@pmdbs,w
  8704  15C3  3E03               	addlw	3
  8705  15C4  0086               	movwf	6
  8706  15C5  3001               	movlw	1	; select bank2/3
  8707  15C6  0087               	movwf	7
  8708  15C7  0801               	movf	1,w
  8709  15C8  00AC               	movwf	??_modbus_response_command
  8710  15C9  01AD               	clrf	??_modbus_response_command+1
  8711  15CA  082C               	movf	??_modbus_response_command,w
  8712  15CB  04B0               	iorwf	modbus_response_command@startAddr,f
  8713  15CC  082D               	movf	??_modbus_response_command+1,w
  8714  15CD  04B1               	iorwf	modbus_response_command@startAddr+1,f
  8715                           
  8716                           ;modbus.c: 191: tmpAddr=startAddr;
  8717  15CE  0831               	movf	modbus_response_command@startAddr+1,w
  8718  15CF  00AF               	movwf	modbus_response_command@tmpAddr+1
  8719  15D0  0830               	movf	modbus_response_command@startAddr,w
  8720  15D1  00AE               	movwf	modbus_response_command@tmpAddr
  8721                           
  8722                           ;modbus.c: 192: len = pmdbs->len_lo;
  8723  15D2  0833               	movf	modbus_response_command@pmdbs,w
  8724  15D3  0086               	movwf	6
  8725  15D4  3001               	movlw	1	; select bank2/3
  8726  15D5  0087               	movwf	7
  8727  15D6  3001               	movlw	1	; select bank2/3
  8728  15D7  3F45               	moviw [5]fsr1
  8729  15D8  00B4               	movwf	modbus_response_command@len
  8730                           
  8731                           ;modbus.c: 193: len<<=1;
  8732  15D9  1003               	clrc
  8733  15DA  0DB4               	rlf	modbus_response_command@len,f
  8734                           
  8735                           ;modbus.c: 194: if(len>32)len=32;
  8736  15DB  3021               	movlw	33
  8737  15DC  0234               	subwf	modbus_response_command@len,w
  8738  15DD  1C03               	skipc
  8739  15DE  2DE3               	goto	l4993
  8740  15DF  3020               	movlw	32
  8741  15E0  00AC               	movwf	??_modbus_response_command
  8742  15E1  082C               	movf	??_modbus_response_command,w
  8743  15E2  00B4               	movwf	modbus_response_command@len
  8744  15E3                     l4993:	
  8745                           
  8746                           ;modbus.c: 195: for(i=0;i<len;i=i+2,tmpAddr++){
  8747  15E3  01B2               	clrf	modbus_response_command@i
  8748  15E4                     l5005:	
  8749  15E4  0834               	movf	modbus_response_command@len,w
  8750  15E5  0232               	subwf	modbus_response_command@i,w
  8751  15E6  1803               	btfsc	3,0
  8752  15E7  2E16               	goto	l5007
  8753                           
  8754                           ;modbus.c: 196: getRegisterVal(tmpAddr,&tempData);
  8755  15E8  082F               	movf	modbus_response_command@tmpAddr+1,w
  8756  15E9  00F2               	movwf	getRegisterVal@addr+1
  8757  15EA  082E               	movf	modbus_response_command@tmpAddr,w
  8758  15EB  00F1               	movwf	getRegisterVal@addr
  8759  15EC  3036               	movlw	(low (modbus_response_command@tempData| 0))& (0+255)
  8760  15ED  00AC               	movwf	??_modbus_response_command
  8761  15EE  082C               	movf	??_modbus_response_command,w
  8762  15EF  00F3               	movwf	getRegisterVal@tempData
  8763  15F0  318E  26CB  3195   	fcall	_getRegisterVal
  8764                           
  8765                           ;modbus.c: 197: rbuf[i+3] = (uint8_t)(tempData >> 8);
  8766  15F3  0020               	movlb	0	; select bank0
  8767  15F4  0837               	movf	modbus_response_command@tempData+1,w
  8768  15F5  00AC               	movwf	??_modbus_response_command
  8769  15F6  0832               	movf	modbus_response_command@i,w
  8770  15F7  3E03               	addlw	3
  8771  15F8  0735               	addwf	modbus_response_command@rbuf,w
  8772  15F9  00AD               	movwf	??_modbus_response_command+1
  8773  15FA  082D               	movf	??_modbus_response_command+1,w
  8774  15FB  0086               	movwf	6
  8775  15FC  3001               	movlw	1	; select bank2/3
  8776  15FD  0087               	movwf	7
  8777  15FE  082C               	movf	??_modbus_response_command,w
  8778  15FF  0081               	movwf	1
  8779                           
  8780                           ;modbus.c: 198: rbuf[i+4] = (uint8_t)(tempData & 0xff);
  8781  1600  0836               	movf	modbus_response_command@tempData,w
  8782  1601  00AC               	movwf	??_modbus_response_command
  8783  1602  0832               	movf	modbus_response_command@i,w
  8784  1603  3E04               	addlw	4
  8785  1604  0735               	addwf	modbus_response_command@rbuf,w
  8786  1605  00AD               	movwf	??_modbus_response_command+1
  8787  1606  082D               	movf	??_modbus_response_command+1,w
  8788  1607  0086               	movwf	6
  8789  1608  3001               	movlw	1	; select bank2/3
  8790  1609  0087               	movwf	7
  8791  160A  082C               	movf	??_modbus_response_command,w
  8792  160B  0081               	movwf	1
  8793  160C  0832               	movf	modbus_response_command@i,w
  8794  160D  3E02               	addlw	2
  8795  160E  00AC               	movwf	??_modbus_response_command
  8796  160F  082C               	movf	??_modbus_response_command,w
  8797  1610  00B2               	movwf	modbus_response_command@i
  8798  1611  3001               	movlw	1
  8799  1612  07AE               	addwf	modbus_response_command@tmpAddr,f
  8800  1613  3000               	movlw	0
  8801  1614  3DAF               	addwfc	modbus_response_command@tmpAddr+1,f
  8802  1615  2DE4               	goto	l5005
  8803  1616                     l5007:	
  8804                           
  8805                           ;modbus.c: 200: };modbus.c: 201: rbuf[0] = sysData.id;
  8806  1616  305C               	movlw	92
  8807  1617  0086               	movwf	6
  8808  1618  3023               	movlw	35
  8809  1619  0087               	movwf	7
  8810  161A  3142               	addfsr 1,2
  8811  161B  0801               	movf	1,w
  8812  161C  00AC               	movwf	??_modbus_response_command
  8813  161D  0835               	movf	modbus_response_command@rbuf,w
  8814  161E  0086               	movwf	6
  8815  161F  3001               	movlw	1	; select bank2/3
  8816  1620  0087               	movwf	7
  8817  1621  082C               	movf	??_modbus_response_command,w
  8818  1622  0081               	movwf	1
  8819                           
  8820                           ;modbus.c: 202: rbuf[1] = 3;
  8821  1623  3003               	movlw	3
  8822  1624  00AC               	movwf	??_modbus_response_command
  8823  1625  0A35               	incf	modbus_response_command@rbuf,w
  8824  1626  0086               	movwf	6
  8825  1627  3001               	movlw	1	; select bank2/3
  8826  1628  0087               	movwf	7
  8827  1629  082C               	movf	??_modbus_response_command,w
  8828  162A  0081               	movwf	1
  8829                           
  8830                           ;modbus.c: 203: rbuf[2] = len;
  8831  162B  0834               	movf	modbus_response_command@len,w
  8832  162C  00AC               	movwf	??_modbus_response_command
  8833  162D  0835               	movf	modbus_response_command@rbuf,w
  8834  162E  3E02               	addlw	2
  8835  162F  0086               	movwf	6
  8836  1630  3001               	movlw	1	; select bank2/3
  8837  1631  0087               	movwf	7
  8838  1632  082C               	movf	??_modbus_response_command,w
  8839  1633  0081               	movwf	1
  8840                           
  8841                           ;modbus.c: 204: len += 3;
  8842  1634  3003               	movlw	3
  8843  1635  00AC               	movwf	??_modbus_response_command
  8844  1636  082C               	movf	??_modbus_response_command,w
  8845  1637  07B4               	addwf	modbus_response_command@len,f
  8846                           
  8847                           ;modbus.c: 205: crc_append(rbuf,len);
  8848  1638  0835               	movf	modbus_response_command@rbuf,w
  8849  1639  00A6               	movwf	crc_append@message
  8850  163A  3001               	movlw	1
  8851  163B  00A7               	movwf	crc_append@message+1
  8852  163C  0834               	movf	modbus_response_command@len,w
  8853  163D  00AC               	movwf	??_modbus_response_command
  8854  163E  01AD               	clrf	??_modbus_response_command+1
  8855  163F  082C               	movf	??_modbus_response_command,w
  8856  1640  00A8               	movwf	crc_append@n
  8857  1641  082D               	movf	??_modbus_response_command+1,w
  8858  1642  00A9               	movwf	crc_append@n+1
  8859  1643  319D  25FC  3195   	fcall	_crc_append
  8860                           
  8861                           ;modbus.c: 206: len += 2;
  8862  1646  3002               	movlw	2
  8863  1647  0020               	movlb	0	; select bank0
  8864  1648  00AC               	movwf	??_modbus_response_command
  8865  1649  082C               	movf	??_modbus_response_command,w
  8866  164A  07B4               	addwf	modbus_response_command@len,f
  8867                           
  8868                           ;modbus.c: 207: uart_send_len(rbuf,len);
  8869  164B  0834               	movf	modbus_response_command@len,w
  8870  164C  00AC               	movwf	??_modbus_response_command
  8871  164D  082C               	movf	??_modbus_response_command,w
  8872  164E  00F8               	movwf	uart_send_len@len
  8873  164F  0835               	movf	modbus_response_command@rbuf,w
  8874  1650  318F  27C4         	fcall	_uart_send_len
  8875  1652  0008               	return
  8876  1653                     __end_of_modbus_response_command:	
  8877                           
  8878                           	psect	text22
  8879  0FC4                     __ptext22:	
  8880 ;; *************** function _uart_send_len *****************
  8881 ;; Defined at:
  8882 ;;		line 41 in file "src/api/my_uart.c"
  8883 ;; Parameters:    Size  Location     Type
  8884 ;;  buf             1    wreg     PTR unsigned char 
  8885 ;;		 -> modbusBuf(32), 
  8886 ;;  len             1    8[COMMON] unsigned char 
  8887 ;; Auto vars:     Size  Location     Type
  8888 ;;  buf             1   11[COMMON] PTR unsigned char 
  8889 ;;		 -> modbusBuf(32), 
  8890 ;; Return value:  Size  Location     Type
  8891 ;;                  1    wreg      void 
  8892 ;; Registers used:
  8893 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8894 ;; Tracked objects:
  8895 ;;		On entry : 0/0
  8896 ;;		On exit  : 0/0
  8897 ;;		Unchanged: 0/0
  8898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8899 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8900 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8901 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8902 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8903 ;;Total ram usage:        4 bytes
  8904 ;; Hardware stack levels used:    1
  8905 ;; Hardware stack levels required when called:    2
  8906 ;; This function calls:
  8907 ;;		_m_mem_cpy_len
  8908 ;; This function is called by:
  8909 ;;		_modbus_response_illgeal_function
  8910 ;;		_modbus_response_write_single_register
  8911 ;;		_modbus_response_write_mult_register
  8912 ;;		_modbus_response_command
  8913 ;;		_main
  8914 ;; This function uses a non-reentrant model
  8915 ;;
  8916                           
  8917                           
  8918                           ;psect for function _uart_send_len
  8919  0FC4                     _uart_send_len:	
  8920                           
  8921                           ;incstack = 0
  8922                           ; Regs used in _uart_send_len: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8923                           ;uart_send_len@buf stored from wreg
  8924  0FC4  00FB               	movwf	uart_send_len@buf
  8925                           
  8926                           ;my_uart.c: 45: if(!TXSTAbits.TXEN)TXSTAbits.TXEN=1;
  8927  0FC5  0023               	movlb	3	; select bank3
  8928  0FC6  1E9E               	btfss	30,5	;volatile
  8929  0FC7  169E               	bsf	30,5	;volatile
  8930                           
  8931                           ;my_uart.c: 47: if(txBufLen>0)return;
  8932  0FC8  0020               	movlb	0	; select bank0
  8933  0FC9  0866               	movf	_txBufLen,w
  8934  0FCA  1D03               	btfss	3,2
  8935  0FCB  0008               	return
  8936                           
  8937                           ;my_uart.c: 48: if(len>sizeof(txBuf))len=sizeof(txBuf);
  8938  0FCC  3041               	movlw	65
  8939  0FCD  0278               	subwf	uart_send_len@len,w
  8940  0FCE  1C03               	skipc
  8941  0FCF  2FD4               	goto	l4809
  8942  0FD0  3040               	movlw	64
  8943  0FD1  00F9               	movwf	??_uart_send_len
  8944  0FD2  0879               	movf	??_uart_send_len,w
  8945  0FD3  00F8               	movwf	uart_send_len@len
  8946  0FD4                     l4809:	
  8947                           
  8948                           ;my_uart.c: 49: m_mem_cpy_len(txBuf,buf,len);
  8949  0FD4  30A0               	movlw	low _txBuf
  8950  0FD5  00F1               	movwf	m_mem_cpy_len@d
  8951  0FD6  3001               	movlw	high _txBuf
  8952  0FD7  00F2               	movwf	m_mem_cpy_len@d+1
  8953  0FD8  087B               	movf	uart_send_len@buf,w
  8954  0FD9  00F3               	movwf	m_mem_cpy_len@s
  8955  0FDA  3001               	movlw	1
  8956  0FDB  00F4               	movwf	m_mem_cpy_len@s+1
  8957  0FDC  0878               	movf	uart_send_len@len,w
  8958  0FDD  00F9               	movwf	??_uart_send_len
  8959  0FDE  01FA               	clrf	??_uart_send_len+1
  8960  0FDF  0879               	movf	??_uart_send_len,w
  8961  0FE0  00F5               	movwf	m_mem_cpy_len@len
  8962  0FE1  087A               	movf	??_uart_send_len+1,w
  8963  0FE2  00F6               	movwf	m_mem_cpy_len@len+1
  8964  0FE3  319D  25DF  318F   	fcall	_m_mem_cpy_len
  8965                           
  8966                           ;my_uart.c: 50: if(len==0)return;
  8967  0FE6  0878               	movf	uart_send_len@len,w
  8968  0FE7  1903               	btfsc	3,2
  8969  0FE8  0008               	return
  8970  0FE9                     l511:	
  8971                           ;my_uart.c: 51: while(0 == PIR1bits.TXIF);
  8972                           
  8973  0FE9  0020               	movlb	0	; select bank0
  8974  0FEA  1E11               	btfss	17,4	;volatile
  8975  0FEB  2FE9               	goto	l511
  8976                           
  8977                           ;my_uart.c: 52: TXREG=txBuf[0];
  8978  0FEC  0023               	movlb	3	; select bank3
  8979  0FED  0820               	movf	_txBuf^(0+384),w
  8980  0FEE  009A               	movwf	26	;volatile
  8981                           
  8982                           ;my_uart.c: 53: txBufLen=len;
  8983  0FEF  0878               	movf	uart_send_len@len,w
  8984  0FF0  00F9               	movwf	??_uart_send_len
  8985  0FF1  0879               	movf	??_uart_send_len,w
  8986  0FF2  0020               	movlb	0	; select bank0
  8987  0FF3  00E6               	movwf	_txBufLen
  8988                           
  8989                           ;my_uart.c: 54: txBufLen--;
  8990  0FF4  3001               	movlw	1
  8991  0FF5  02E6               	subwf	_txBufLen,f
  8992                           
  8993                           ;my_uart.c: 55: txCount++;
  8994  0FF6  3001               	movlw	1
  8995  0FF7  00F9               	movwf	??_uart_send_len
  8996  0FF8  0879               	movf	??_uart_send_len,w
  8997  0FF9  07E5               	addwf	_txCount,f
  8998                           
  8999                           ;my_uart.c: 56: if(!PIE1bits.TXIE)PIE1bits.TXIE=1;
  9000  0FFA  0021               	movlb	1	; select bank1
  9001  0FFB  1A11               	btfsc	17,4	;volatile
  9002  0FFC  0008               	return
  9003  0FFD  1611               	bsf	17,4	;volatile
  9004  0FFE  0008               	return
  9005  0FFF                     __end_of_uart_send_len:	
  9006                           
  9007                           	psect	text23
  9008  0ECB                     __ptext23:	
  9009 ;; *************** function _getRegisterVal *****************
  9010 ;; Defined at:
  9011 ;;		line 80 in file "src/api/modbus.c"
  9012 ;; Parameters:    Size  Location     Type
  9013 ;;  addr            2    1[COMMON] unsigned int 
  9014 ;;  tempData        1    3[COMMON] PTR unsigned int 
  9015 ;;		 -> modbus_response_command@tempData(2), 
  9016 ;; Auto vars:     Size  Location     Type
  9017 ;;  t16             2    8[COMMON] unsigned int 
  9018 ;;  tempAddr        1   10[COMMON] unsigned char 
  9019 ;; Return value:  Size  Location     Type
  9020 ;;                  2    1[COMMON] unsigned int 
  9021 ;; Registers used:
  9022 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  9023 ;; Tracked objects:
  9024 ;;		On entry : 0/0
  9025 ;;		On exit  : 0/0
  9026 ;;		Unchanged: 0/0
  9027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9028 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9029 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9030 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9031 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9032 ;;Total ram usage:       10 bytes
  9033 ;; Hardware stack levels used:    1
  9034 ;; Hardware stack levels required when called:    1
  9035 ;; This function calls:
  9036 ;;		Nothing
  9037 ;; This function is called by:
  9038 ;;		_modbus_response_command
  9039 ;; This function uses a non-reentrant model
  9040 ;;
  9041                           
  9042                           
  9043                           ;psect for function _getRegisterVal
  9044  0ECB                     _getRegisterVal:	
  9045                           
  9046                           ;modbus.c: 82: uint16_t t16 = 0;
  9047                           
  9048                           ;incstack = 0
  9049                           ; Regs used in _getRegisterVal: [wreg-fsr1h+status,2+status,0]
  9050  0ECB  01F8               	clrf	getRegisterVal@t16
  9051  0ECC  01F9               	clrf	getRegisterVal@t16+1
  9052                           
  9053                           ;modbus.c: 83: uint8_t tempAddr;;modbus.c: 85: tempAddr = addr & 0xff;
  9054  0ECD  0871               	movf	getRegisterVal@addr,w
  9055  0ECE  00F4               	movwf	??_getRegisterVal
  9056  0ECF  0874               	movf	??_getRegisterVal,w
  9057  0ED0  00FA               	movwf	getRegisterVal@tempAddr
  9058                           
  9059                           ;modbus.c: 86: switch(tempAddr){
  9060  0ED1  2F7D               	goto	l3547
  9061  0ED2                     l3513:	
  9062                           ;modbus.c: 87: case 0x01:*tempData = 0100; break;
  9063                           
  9064  0ED2  0873               	movf	getRegisterVal@tempData,w
  9065  0ED3  0086               	movwf	6
  9066  0ED4  0187               	clrf	7
  9067  0ED5  3040               	movlw	64
  9068  0ED6  3FC0               	movwi [0]fsr1
  9069  0ED7  3000               	movlw	0
  9070  0ED8  3FC1               	movwi [1]fsr1
  9071  0ED9  2F8A               	goto	l3549
  9072  0EDA                     l3515:	
  9073                           ;modbus.c: 88: case 0x02:*tempData=sysData.id;break;
  9074                           
  9075  0EDA  305C               	movlw	92
  9076  0EDB  0086               	movwf	6
  9077  0EDC  3023               	movlw	35
  9078  0EDD  0087               	movwf	7
  9079  0EDE  3142               	addfsr 1,2
  9080  0EDF  0801               	movf	1,w
  9081  0EE0  00F4               	movwf	??_getRegisterVal
  9082  0EE1  01F5               	clrf	??_getRegisterVal+1
  9083  0EE2  0873               	movf	getRegisterVal@tempData,w
  9084  0EE3  0086               	movwf	6
  9085  0EE4  0187               	clrf	7
  9086  0EE5  0874               	movf	??_getRegisterVal,w
  9087  0EE6  3FC0               	movwi [0]fsr1
  9088  0EE7  0875               	movf	??_getRegisterVal+1,w
  9089  0EE8  3FC1               	movwi [1]fsr1
  9090  0EE9  2F8A               	goto	l3549
  9091  0EEA                     l3517:	
  9092                           ;modbus.c: 89: case 0x03:*tempData=(sysData.pidSetFlg1<<8 | sysData.pidSetFlg0);break;
  9093                           
  9094  0EEA  305C               	movlw	92
  9095  0EEB  0084               	movwf	4
  9096  0EEC  3023               	movlw	35
  9097  0EED  0085               	movwf	5
  9098  0EEE  3101               	addfsr 0,1
  9099  0EEF  0800               	movf	0,w
  9100  0EF0  00F4               	movwf	??_getRegisterVal
  9101  0EF1  305C               	movlw	92
  9102  0EF2  0084               	movwf	4
  9103  0EF3  3023               	movlw	35
  9104  0EF4  0085               	movwf	5
  9105  0EF5  0873               	movf	getRegisterVal@tempData,w
  9106  0EF6  0086               	movwf	6
  9107  0EF7  0187               	clrf	7
  9108  0EF8  0800               	movf	0,w
  9109  0EF9  3FC0               	movwi [0]fsr1
  9110  0EFA  0874               	movf	??_getRegisterVal,w
  9111  0EFB  3FC1               	movwi [1]fsr1
  9112  0EFC  2F8A               	goto	l3549
  9113  0EFD                     l3519:	
  9114                           ;modbus.c: 90: case 0x04:*tempData=sysData.pidKp;break;
  9115                           
  9116  0EFD  305C               	movlw	92
  9117  0EFE  0086               	movwf	6
  9118  0EFF  3023               	movlw	35
  9119  0F00  0087               	movwf	7
  9120  0F01  3144               	addfsr 1,4
  9121  0F02  0873               	movf	getRegisterVal@tempData,w
  9122  0F03  0084               	movwf	4
  9123  0F04  0185               	clrf	5
  9124  0F05  3F40               	moviw [0]fsr1
  9125  0F06  3F80               	movwi [0]fsr0
  9126  0F07  3F41               	moviw [1]fsr1
  9127  0F08  3F81               	movwi [1]fsr0
  9128  0F09  2F8A               	goto	l3549
  9129  0F0A                     l3521:	
  9130                           ;modbus.c: 91: case 0x05:*tempData=sysData.pidTi;break;
  9131                           
  9132  0F0A  305C               	movlw	92
  9133  0F0B  0086               	movwf	6
  9134  0F0C  3023               	movlw	35
  9135  0F0D  0087               	movwf	7
  9136  0F0E  3146               	addfsr 1,6
  9137  0F0F  0873               	movf	getRegisterVal@tempData,w
  9138  0F10  0084               	movwf	4
  9139  0F11  0185               	clrf	5
  9140  0F12  3F40               	moviw [0]fsr1
  9141  0F13  3F80               	movwi [0]fsr0
  9142  0F14  3F41               	moviw [1]fsr1
  9143  0F15  3F81               	movwi [1]fsr0
  9144  0F16  2F8A               	goto	l3549
  9145  0F17                     l3523:	
  9146                           ;modbus.c: 92: case 0x06:*tempData=sysData.pidTd;break;
  9147                           
  9148  0F17  305C               	movlw	92
  9149  0F18  0086               	movwf	6
  9150  0F19  3023               	movlw	35
  9151  0F1A  0087               	movwf	7
  9152  0F1B  3148               	addfsr 1,8
  9153  0F1C  0873               	movf	getRegisterVal@tempData,w
  9154  0F1D  0084               	movwf	4
  9155  0F1E  0185               	clrf	5
  9156  0F1F  3F40               	moviw [0]fsr1
  9157  0F20  3F80               	movwi [0]fsr0
  9158  0F21  3F41               	moviw [1]fsr1
  9159  0F22  3F81               	movwi [1]fsr0
  9160  0F23  2F8A               	goto	l3549
  9161  0F24                     l3525:	
  9162                           ;modbus.c: 93: case 0x07:*tempData=rtAdcValueRsLo; break;
  9163                           
  9164  0F24  0873               	movf	getRegisterVal@tempData,w
  9165  0F25  0086               	movwf	6
  9166  0F26  0187               	clrf	7
  9167  0F27  0020               	movlb	0	; select bank0
  9168  0F28  085F               	movf	_rtAdcValueRsLo,w
  9169  0F29  3FC0               	movwi [0]fsr1
  9170  0F2A  0860               	movf	_rtAdcValueRsLo+1,w
  9171  0F2B  3FC1               	movwi [1]fsr1
  9172  0F2C  2F8A               	goto	l3549
  9173  0F2D                     l3527:	
  9174                           ;modbus.c: 94: case 0x08:*tempData=rtAdcValueRsHi;break;
  9175                           
  9176  0F2D  0873               	movf	getRegisterVal@tempData,w
  9177  0F2E  0086               	movwf	6
  9178  0F2F  0187               	clrf	7
  9179  0F30  0020               	movlb	0	; select bank0
  9180  0F31  085D               	movf	_rtAdcValueRsHi,w
  9181  0F32  3FC0               	movwi [0]fsr1
  9182  0F33  085E               	movf	_rtAdcValueRsHi+1,w
  9183  0F34  3FC1               	movwi [1]fsr1
  9184  0F35  2F8A               	goto	l3549
  9185  0F36                     l3529:	
  9186                           ;modbus.c: 95: case 0x09:*tempData=rtAdcValueRcLo;break;
  9187                           
  9188  0F36  0873               	movf	getRegisterVal@tempData,w
  9189  0F37  0086               	movwf	6
  9190  0F38  0187               	clrf	7
  9191  0F39  0020               	movlb	0	; select bank0
  9192  0F3A  085B               	movf	_rtAdcValueRcLo,w
  9193  0F3B  3FC0               	movwi [0]fsr1
  9194  0F3C  085C               	movf	_rtAdcValueRcLo+1,w
  9195  0F3D  3FC1               	movwi [1]fsr1
  9196  0F3E  2F8A               	goto	l3549
  9197  0F3F                     l3531:	
  9198                           ;modbus.c: 96: case 0x0a:*tempData=rtAdcValueRcHi;break;
  9199                           
  9200  0F3F  0873               	movf	getRegisterVal@tempData,w
  9201  0F40  0086               	movwf	6
  9202  0F41  0187               	clrf	7
  9203  0F42  0020               	movlb	0	; select bank0
  9204  0F43  0859               	movf	_rtAdcValueRcHi,w
  9205  0F44  3FC0               	movwi [0]fsr1
  9206  0F45  085A               	movf	_rtAdcValueRcHi+1,w
  9207  0F46  3FC1               	movwi [1]fsr1
  9208  0F47  2F8A               	goto	l3549
  9209  0F48                     l3533:	
  9210                           ;modbus.c: 97: case 0x0b:*tempData=resRc;break;
  9211                           
  9212  0F48  0873               	movf	getRegisterVal@tempData,w
  9213  0F49  0086               	movwf	6
  9214  0F4A  0187               	clrf	7
  9215  0F4B  0020               	movlb	0	; select bank0
  9216  0F4C  086E               	movf	_resRc,w
  9217  0F4D  3FC0               	movwi [0]fsr1
  9218  0F4E  086F               	movf	_resRc+1,w
  9219  0F4F  3FC1               	movwi [1]fsr1
  9220  0F50  2F8A               	goto	l3549
  9221  0F51                     l3535:	
  9222                           ;modbus.c: 98: case 0x0c:*tempData=resRs;break;
  9223                           
  9224  0F51  0873               	movf	getRegisterVal@tempData,w
  9225  0F52  0086               	movwf	6
  9226  0F53  0187               	clrf	7
  9227  0F54  0020               	movlb	0	; select bank0
  9228  0F55  086C               	movf	_resRs,w
  9229  0F56  3FC0               	movwi [0]fsr1
  9230  0F57  086D               	movf	_resRs+1,w
  9231  0F58  3FC1               	movwi [1]fsr1
  9232  0F59  2F8A               	goto	l3549
  9233  0F5A                     l3537:	
  9234                           ;modbus.c: 99: case 0x0d:*tempData=rtAdcValueVoFb;break;
  9235                           
  9236  0F5A  0873               	movf	getRegisterVal@tempData,w
  9237  0F5B  0086               	movwf	6
  9238  0F5C  0187               	clrf	7
  9239  0F5D  0020               	movlb	0	; select bank0
  9240  0F5E  0857               	movf	_rtAdcValueVoFb,w
  9241  0F5F  3FC0               	movwi [0]fsr1
  9242  0F60  0858               	movf	_rtAdcValueVoFb+1,w
  9243  0F61  3FC1               	movwi [1]fsr1
  9244  0F62  2F8A               	goto	l3549
  9245  0F63                     l3539:	
  9246                           ;modbus.c: 100: case 0x0e:*tempData=voExpectMv;break;
  9247                           
  9248  0F63  0873               	movf	getRegisterVal@tempData,w
  9249  0F64  0086               	movwf	6
  9250  0F65  0187               	clrf	7
  9251  0F66  0021               	movlb	1	; select bank1
  9252  0F67  084A               	movf	_voExpectMv^(0+128),w
  9253  0F68  3FC0               	movwi [0]fsr1
  9254  0F69  084B               	movf	(_voExpectMv+1)^(0+128),w
  9255  0F6A  3FC1               	movwi [1]fsr1
  9256  0F6B  2F8A               	goto	l3549
  9257  0F6C                     l3541:	
  9258                           ;modbus.c: 101: case 0x0f:*tempData=voExpectAdcValue;break;
  9259                           
  9260  0F6C  0873               	movf	getRegisterVal@tempData,w
  9261  0F6D  0086               	movwf	6
  9262  0F6E  0187               	clrf	7
  9263  0F6F  0020               	movlb	0	; select bank0
  9264  0F70  0855               	movf	_voExpectAdcValue,w
  9265  0F71  3FC0               	movwi [0]fsr1
  9266  0F72  0856               	movf	_voExpectAdcValue+1,w
  9267  0F73  3FC1               	movwi [1]fsr1
  9268  0F74  2F8A               	goto	l3549
  9269  0F75                     l3543:	
  9270                           ;modbus.c: 102: default: *tempData=0x55aa;break;
  9271                           
  9272  0F75  0873               	movf	getRegisterVal@tempData,w
  9273  0F76  0086               	movwf	6
  9274  0F77  0187               	clrf	7
  9275  0F78  30AA               	movlw	170
  9276  0F79  3FC0               	movwi [0]fsr1
  9277  0F7A  3055               	movlw	85
  9278  0F7B  3FC1               	movwi [1]fsr1
  9279                           
  9280                           ;modbus.c: 103: }
  9281  0F7C  2F8A               	goto	l3549
  9282  0F7D                     l3547:	
  9283  0F7D  087A               	movf	getRegisterVal@tempAddr,w
  9284                           
  9285                           ; Switch size 1, requested type "space"
  9286                           ; Number of cases is 15, Range of values is 1 to 15
  9287                           ; switch strategies available:
  9288                           ; Name         Instructions Cycles
  9289                           ; direct_byte           39     9 (fixed)
  9290                           ; simple_byte           46    24 (average)
  9291                           ; jumptable            263     9 (fixed)
  9292                           ;	Chosen strategy is direct_byte
  9293  0F7E  3EFF               	addlw	-1
  9294  0F7F  1C03               	skipc
  9295  0F80  2F75               	goto	l3543
  9296  0F81  0084               	movwf	4
  9297  0F82  300F               	movlw	15
  9298  0F83  0204               	subwf	4,w
  9299  0F84  1803               	skipnc
  9300  0F85  2F75               	goto	l3543
  9301  0F86  3198               	movlp	high S5443
  9302  0F87  3504               	lslf	4,w
  9303  0F88  3E00               	addlw	low S5443
  9304  0F89  0082               	movwf	2
  9305  0F8A                     l3549:	
  9306                           
  9307                           ;modbus.c: 104: if(tempAddr>0x0f && tempAddr < 0x10+30*2){
  9308  0F8A  3010               	movlw	16
  9309  0F8B  027A               	subwf	getRegisterVal@tempAddr,w
  9310  0F8C  1C03               	skipc
  9311  0F8D  0008               	return
  9312  0F8E  304C               	movlw	76
  9313  0F8F  027A               	subwf	getRegisterVal@tempAddr,w
  9314  0F90  1803               	skipnc
  9315  0F91  0008               	return
  9316                           
  9317                           ;modbus.c: 105: tempAddr-=0x10;
  9318  0F92  3010               	movlw	16
  9319  0F93  02FA               	subwf	getRegisterVal@tempAddr,f
  9320                           
  9321                           ;modbus.c: 106: if(tempAddr & 0x01){
  9322  0F94  1C7A               	btfss	getRegisterVal@tempAddr,0
  9323  0F95  2FAD               	goto	l3559
  9324                           
  9325                           ;modbus.c: 107: *tempData=sysData.calibVoMV[tempAddr>>1];
  9326  0F96  367A               	lsrf	getRegisterVal@tempAddr,w
  9327  0F97  00F4               	movwf	??_getRegisterVal
  9328  0F98  01F5               	clrf	??_getRegisterVal+1
  9329  0F99  35F4               	lslf	??_getRegisterVal,f
  9330  0F9A  0DF5               	rlf	??_getRegisterVal+1,f
  9331  0F9B  30A2               	movlw	162
  9332  0F9C  00F6               	movwf	??_getRegisterVal+2
  9333  0F9D  3023               	movlw	35
  9334  0F9E  00F7               	movwf	??_getRegisterVal+3
  9335  0F9F  0874               	movf	??_getRegisterVal,w
  9336  0FA0  0776               	addwf	??_getRegisterVal+2,w
  9337  0FA1  0086               	movwf	6
  9338  0FA2  0875               	movf	??_getRegisterVal+1,w
  9339  0FA3  3D77               	addwfc	??_getRegisterVal+3,w
  9340  0FA4  0087               	movwf	7
  9341  0FA5  0873               	movf	getRegisterVal@tempData,w
  9342  0FA6  0084               	movwf	4
  9343  0FA7  0185               	clrf	5
  9344  0FA8  3F40               	moviw [0]fsr1
  9345  0FA9  3F80               	movwi [0]fsr0
  9346  0FAA  3F41               	moviw [1]fsr1
  9347  0FAB  3F81               	movwi [1]fsr0
  9348                           
  9349                           ;modbus.c: 108: }else{
  9350  0FAC  0008               	return
  9351  0FAD                     l3559:	
  9352                           
  9353                           ;modbus.c: 109: *tempData=sysData.calibRsAdc[tempAddr>>1];
  9354  0FAD  367A               	lsrf	getRegisterVal@tempAddr,w
  9355  0FAE  00F4               	movwf	??_getRegisterVal
  9356  0FAF  01F5               	clrf	??_getRegisterVal+1
  9357  0FB0  35F4               	lslf	??_getRegisterVal,f
  9358  0FB1  0DF5               	rlf	??_getRegisterVal+1,f
  9359  0FB2  3066               	movlw	102
  9360  0FB3  00F6               	movwf	??_getRegisterVal+2
  9361  0FB4  3023               	movlw	35
  9362  0FB5  00F7               	movwf	??_getRegisterVal+3
  9363  0FB6  0874               	movf	??_getRegisterVal,w
  9364  0FB7  0776               	addwf	??_getRegisterVal+2,w
  9365  0FB8  0086               	movwf	6
  9366  0FB9  0875               	movf	??_getRegisterVal+1,w
  9367  0FBA  3D77               	addwfc	??_getRegisterVal+3,w
  9368  0FBB  0087               	movwf	7
  9369  0FBC  0873               	movf	getRegisterVal@tempData,w
  9370  0FBD  0084               	movwf	4
  9371  0FBE  0185               	clrf	5
  9372  0FBF  3F40               	moviw [0]fsr1
  9373  0FC0  3F80               	movwi [0]fsr0
  9374  0FC1  3F41               	moviw [1]fsr1
  9375  0FC2  3F81               	movwi [1]fsr0
  9376  0FC3  0008               	return
  9377  0FC4                     __end_of_getRegisterVal:	
  9378                           ;modbus.c: 110: };modbus.c: 111: };modbus.c: 112: return t16;;	Return value of _getRegis
      +                          terVal is never used
  9379                           
  9380                           
  9381                           	psect	swtext1
  9382  1800                     __pswtext1:	
  9383  1800                     S5443:	
  9384  1800  318E  2ED2         	ljmp	l3513
  9385  1802  318E  2EDA         	ljmp	l3515
  9386  1804  318E  2EEA         	ljmp	l3517
  9387  1806  318E  2EFD         	ljmp	l3519
  9388  1808  318F  2F0A         	ljmp	l3521
  9389  180A  318F  2F17         	ljmp	l3523
  9390  180C  318F  2F24         	ljmp	l3525
  9391  180E  318F  2F2D         	ljmp	l3527
  9392  1810  318F  2F36         	ljmp	l3529
  9393  1812  318F  2F3F         	ljmp	l3531
  9394  1814  318F  2F48         	ljmp	l3533
  9395  1816  318F  2F51         	ljmp	l3535
  9396  1818  318F  2F5A         	ljmp	l3537
  9397  181A  318F  2F63         	ljmp	l3539
  9398  181C  318F  2F6C         	ljmp	l3541
  9399                           
  9400                           	psect	text24
  9401  1DFC                     __ptext24:	
  9402 ;; *************** function _crc_append *****************
  9403 ;; Defined at:
  9404 ;;		line 143 in file "src/depend/crc16.c"
  9405 ;; Parameters:    Size  Location     Type
  9406 ;;  message         2    6[BANK0 ] PTR unsigned char 
  9407 ;;		 -> modbusBuf(32), sysData(132), 
  9408 ;;  n               2    8[BANK0 ] unsigned int 
  9409 ;; Auto vars:     Size  Location     Type
  9410 ;;  crc             2   10[BANK0 ] unsigned int 
  9411 ;; Return value:  Size  Location     Type
  9412 ;;                  1    wreg      void 
  9413 ;; Registers used:
  9414 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9415 ;; Tracked objects:
  9416 ;;		On entry : 0/0
  9417 ;;		On exit  : 0/0
  9418 ;;		Unchanged: 0/0
  9419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9420 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9421 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9422 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9423 ;;      Totals:         5       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9424 ;;Total ram usage:       11 bytes
  9425 ;; Hardware stack levels used:    1
  9426 ;; Hardware stack levels required when called:    2
  9427 ;; This function calls:
  9428 ;;		_crc_sum
  9429 ;; This function is called by:
  9430 ;;		_sys_data_save
  9431 ;;		_modbus_response_illgeal_function
  9432 ;;		_modbus_response_write_single_register
  9433 ;;		_modbus_response_write_mult_register
  9434 ;;		_modbus_response_command
  9435 ;; This function uses a non-reentrant model
  9436 ;;
  9437                           
  9438                           
  9439                           ;psect for function _crc_append
  9440  1DFC                     _crc_append:	
  9441                           
  9442                           ;crc16.c: 145: uint16_t crc;;crc16.c: 146: crc = crc_sum(message, n);
  9443                           
  9444                           ;incstack = 0
  9445                           ; Regs used in _crc_append: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9446  1DFC  0020               	movlb	0	; select bank0
  9447  1DFD  0827               	movf	crc_append@message+1,w
  9448  1DFE  00F2               	movwf	crc_sum@buf+1
  9449  1DFF  0826               	movf	crc_append@message,w
  9450  1E00  00F1               	movwf	crc_sum@buf
  9451  1E01  0829               	movf	crc_append@n+1,w
  9452  1E02  00F4               	movwf	crc_sum@len+1
  9453  1E03  0828               	movf	crc_append@n,w
  9454  1E04  00F3               	movwf	crc_sum@len
  9455  1E05  3191  21DD         	fcall	_crc_sum
  9456  1E07  0872               	movf	?_crc_sum+1,w
  9457  1E08  0020               	movlb	0	; select bank0
  9458  1E09  00AB               	movwf	crc_append@crc+1
  9459  1E0A  0871               	movf	?_crc_sum,w
  9460  1E0B  00AA               	movwf	crc_append@crc
  9461                           
  9462                           ;crc16.c: 147: message[n] = (uint8_t)(crc & 0xff);
  9463  1E0C  0828               	movf	crc_append@n,w
  9464  1E0D  0726               	addwf	crc_append@message,w
  9465  1E0E  00F7               	movwf	??_crc_append
  9466  1E0F  0829               	movf	crc_append@n+1,w
  9467  1E10  3D27               	addwfc	crc_append@message+1,w
  9468  1E11  00F8               	movwf	??_crc_append+1
  9469  1E12  0877               	movf	??_crc_append,w
  9470  1E13  0086               	movwf	6
  9471  1E14  0878               	movf	??_crc_append+1,w
  9472  1E15  0087               	movwf	7
  9473  1E16  082A               	movf	crc_append@crc,w
  9474  1E17  0081               	movwf	1
  9475                           
  9476                           ;crc16.c: 148: message[n+1] = (uint8_t)((crc >> 8) & 0xff);
  9477  1E18  082B               	movf	crc_append@crc+1,w
  9478  1E19  00F7               	movwf	??_crc_append
  9479  1E1A  0828               	movf	crc_append@n,w
  9480  1E1B  3E01               	addlw	1
  9481  1E1C  00F8               	movwf	??_crc_append+1
  9482  1E1D  3000               	movlw	0
  9483  1E1E  3D29               	addwfc	crc_append@n+1,w
  9484  1E1F  00F9               	movwf	??_crc_append+2
  9485  1E20  0878               	movf	??_crc_append+1,w
  9486  1E21  0726               	addwf	crc_append@message,w
  9487  1E22  00FA               	movwf	??_crc_append+3
  9488  1E23  0879               	movf	??_crc_append+2,w
  9489  1E24  3D27               	addwfc	crc_append@message+1,w
  9490  1E25  00FB               	movwf	??_crc_append+4
  9491  1E26  087A               	movf	??_crc_append+3,w
  9492  1E27  0086               	movwf	6
  9493  1E28  087B               	movf	??_crc_append+4,w
  9494  1E29  0087               	movwf	7
  9495  1E2A  0877               	movf	??_crc_append,w
  9496  1E2B  0081               	movwf	1
  9497  1E2C  0008               	return
  9498  1E2D                     __end_of_crc_append:	
  9499                           
  9500                           	psect	text25
  9501  1EC9                     __ptext25:	
  9502 ;; *************** function _crc_verify *****************
  9503 ;; Defined at:
  9504 ;;		line 135 in file "src/depend/crc16.c"
  9505 ;; Parameters:    Size  Location     Type
  9506 ;;  message         2    6[BANK0 ] PTR unsigned char 
  9507 ;;		 -> modbusBuf(32), sysData(132), 
  9508 ;;  n               2    8[BANK0 ] unsigned int 
  9509 ;; Auto vars:     Size  Location     Type
  9510 ;;  expected        2   12[BANK0 ] unsigned int 
  9511 ;;  crccal          2   10[BANK0 ] unsigned int 
  9512 ;; Return value:  Size  Location     Type
  9513 ;;                  1    wreg      unsigned char 
  9514 ;; Registers used:
  9515 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9516 ;; Tracked objects:
  9517 ;;		On entry : 0/0
  9518 ;;		On exit  : 0/0
  9519 ;;		Unchanged: 0/0
  9520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9521 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9522 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9523 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9524 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9525 ;;Total ram usage:       10 bytes
  9526 ;; Hardware stack levels used:    1
  9527 ;; Hardware stack levels required when called:    2
  9528 ;; This function calls:
  9529 ;;		_crc_sum
  9530 ;;		_m_mem_cpy_len
  9531 ;; This function is called by:
  9532 ;;		_sys_data_init
  9533 ;;		_modbus_response_process
  9534 ;; This function uses a non-reentrant model
  9535 ;;
  9536                           
  9537                           
  9538                           ;psect for function _crc_verify
  9539  1EC9                     _crc_verify:	
  9540                           
  9541                           ;crc16.c: 137: uint16_t expected,crccal;;crc16.c: 138: m_mem_cpy_len((uint8_t*)(&expecte
      +                          d),(message+n-2),2);
  9542                           
  9543                           ;incstack = 0
  9544                           ; Regs used in _crc_verify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9545  1EC9  302C               	movlw	low crc_verify@expected
  9546  1ECA  00F1               	movwf	m_mem_cpy_len@d
  9547  1ECB  3000               	movlw	high crc_verify@expected
  9548  1ECC  00F2               	movwf	m_mem_cpy_len@d+1
  9549  1ECD  0020               	movlb	0	; select bank0
  9550  1ECE  0828               	movf	crc_verify@n,w
  9551  1ECF  0726               	addwf	crc_verify@message,w
  9552  1ED0  00F8               	movwf	??_crc_verify
  9553  1ED1  0829               	movf	crc_verify@n+1,w
  9554  1ED2  3D27               	addwfc	crc_verify@message+1,w
  9555  1ED3  00F9               	movwf	??_crc_verify+1
  9556  1ED4  0878               	movf	??_crc_verify,w
  9557  1ED5  3EFE               	addlw	254
  9558  1ED6  00F3               	movwf	m_mem_cpy_len@s
  9559  1ED7  30FF               	movlw	255
  9560  1ED8  3D79               	addwfc	??_crc_verify+1,w
  9561  1ED9  00F4               	movwf	m_mem_cpy_len@s+1
  9562  1EDA  3002               	movlw	2
  9563  1EDB  00F5               	movwf	m_mem_cpy_len@len
  9564  1EDC  3000               	movlw	0
  9565  1EDD  00F6               	movwf	m_mem_cpy_len@len+1
  9566  1EDE  319D  25DF  319E   	fcall	_m_mem_cpy_len
  9567                           
  9568                           ;crc16.c: 139: crccal=crc_sum(message,n - 2);
  9569  1EE1  0020               	movlb	0	; select bank0
  9570  1EE2  0827               	movf	crc_verify@message+1,w
  9571  1EE3  00F2               	movwf	crc_sum@buf+1
  9572  1EE4  0826               	movf	crc_verify@message,w
  9573  1EE5  00F1               	movwf	crc_sum@buf
  9574  1EE6  0828               	movf	crc_verify@n,w
  9575  1EE7  3EFE               	addlw	254
  9576  1EE8  00F3               	movwf	crc_sum@len
  9577  1EE9  30FF               	movlw	255
  9578  1EEA  3D29               	addwfc	crc_verify@n+1,w
  9579  1EEB  00F4               	movwf	crc_sum@len+1
  9580  1EEC  3191  21DD  319E   	fcall	_crc_sum
  9581  1EEF  0872               	movf	?_crc_sum+1,w
  9582  1EF0  0020               	movlb	0	; select bank0
  9583  1EF1  00AB               	movwf	crc_verify@crccal+1
  9584  1EF2  0871               	movf	?_crc_sum,w
  9585  1EF3  00AA               	movwf	crc_verify@crccal
  9586                           
  9587                           ;crc16.c: 140: if(expected!=crccal)return 0;
  9588  1EF4  082B               	movf	crc_verify@crccal+1,w
  9589  1EF5  062D               	xorwf	crc_verify@expected+1,w
  9590  1EF6  1D03               	skipz
  9591  1EF7  2EFA               	goto	u4155
  9592  1EF8  082A               	movf	crc_verify@crccal,w
  9593  1EF9  062C               	xorwf	crc_verify@expected,w
  9594  1EFA                     u4155:	
  9595  1EFA  1903               	skipnz
  9596  1EFB  2EFE               	goto	l4845
  9597  1EFC  3000               	movlw	0
  9598  1EFD  0008               	return
  9599  1EFE                     l4845:	
  9600                           
  9601                           ;crc16.c: 141: return 1;
  9602  1EFE  3001               	movlw	1
  9603  1EFF  0008               	return
  9604  1F00                     __end_of_crc_verify:	
  9605                           
  9606                           	psect	text26
  9607  1DDF                     __ptext26:	
  9608 ;; *************** function _m_mem_cpy_len *****************
  9609 ;; Defined at:
  9610 ;;		line 50 in file "src/depend/m_string.c"
  9611 ;; Parameters:    Size  Location     Type
  9612 ;;  d               2    1[COMMON] PTR unsigned char 
  9613 ;;		 -> crc_verify@expected(2), modbusBuf(32), txBuf(64), 
  9614 ;;  s               2    3[COMMON] PTR unsigned char 
  9615 ;;		 -> modbusBuf(32), sysData(132), eusartRxBuffer(32), 
  9616 ;;  len             2    5[COMMON] unsigned int 
  9617 ;; Auto vars:     Size  Location     Type
  9618 ;;		None
  9619 ;; Return value:  Size  Location     Type
  9620 ;;                  1    wreg      void 
  9621 ;; Registers used:
  9622 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9623 ;; Tracked objects:
  9624 ;;		On entry : 0/0
  9625 ;;		On exit  : 0/0
  9626 ;;		Unchanged: 0/0
  9627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9628 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9630 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9631 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9632 ;;Total ram usage:        7 bytes
  9633 ;; Hardware stack levels used:    1
  9634 ;; Hardware stack levels required when called:    1
  9635 ;; This function calls:
  9636 ;;		Nothing
  9637 ;; This function is called by:
  9638 ;;		_uart_send_len
  9639 ;;		_main
  9640 ;;		_crc_verify
  9641 ;; This function uses a non-reentrant model
  9642 ;;
  9643                           
  9644                           
  9645                           ;psect for function _m_mem_cpy_len
  9646  1DDF                     _m_mem_cpy_len:	
  9647  1DDF                     l4789:	
  9648                           ;m_string.c: 53: while(len)
  9649                           
  9650                           ;incstack = 0
  9651                           ; Regs used in _m_mem_cpy_len: [wreg+fsr1l+fsr1h+status,2+status,0]
  9652                           
  9653  1DDF  0875               	movf	m_mem_cpy_len@len,w
  9654  1DE0  0476               	iorwf	m_mem_cpy_len@len+1,w
  9655  1DE1  1903               	btfsc	3,2
  9656  1DE2  0008               	return
  9657                           
  9658                           ;m_string.c: 54: {;m_string.c: 55: *d++=*s++;
  9659  1DE3  0873               	movf	m_mem_cpy_len@s,w
  9660  1DE4  0086               	movwf	6
  9661  1DE5  0874               	movf	m_mem_cpy_len@s+1,w
  9662  1DE6  0087               	movwf	7
  9663  1DE7  0801               	movf	1,w
  9664  1DE8  00F7               	movwf	??_m_mem_cpy_len
  9665  1DE9  0871               	movf	m_mem_cpy_len@d,w
  9666  1DEA  0086               	movwf	6
  9667  1DEB  0872               	movf	m_mem_cpy_len@d+1,w
  9668  1DEC  0087               	movwf	7
  9669  1DED  0877               	movf	??_m_mem_cpy_len,w
  9670  1DEE  0081               	movwf	1
  9671  1DEF  3001               	movlw	1
  9672  1DF0  07F3               	addwf	m_mem_cpy_len@s,f
  9673  1DF1  3000               	movlw	0
  9674  1DF2  3DF4               	addwfc	m_mem_cpy_len@s+1,f
  9675  1DF3  3001               	movlw	1
  9676  1DF4  07F1               	addwf	m_mem_cpy_len@d,f
  9677  1DF5  3000               	movlw	0
  9678  1DF6  3DF2               	addwfc	m_mem_cpy_len@d+1,f
  9679                           
  9680                           ;m_string.c: 56: len--;
  9681  1DF7  3001               	movlw	1
  9682  1DF8  02F5               	subwf	m_mem_cpy_len@len,f
  9683  1DF9  3000               	movlw	0
  9684  1DFA  3BF6               	subwfb	m_mem_cpy_len@len+1,f
  9685  1DFB  2DDF               	goto	l4789
  9686  1DFC                     __end_of_m_mem_cpy_len:	
  9687                           
  9688                           	psect	text27
  9689  11DD                     __ptext27:	
  9690 ;; *************** function _crc_sum *****************
  9691 ;; Defined at:
  9692 ;;		line 116 in file "src/depend/crc16.c"
  9693 ;; Parameters:    Size  Location     Type
  9694 ;;  buf             2    1[COMMON] PTR unsigned char 
  9695 ;;		 -> modbusBuf(32), sysData(132), 
  9696 ;;  len             2    3[COMMON] unsigned int 
  9697 ;; Auto vars:     Size  Location     Type
  9698 ;;  crc             2    4[BANK0 ] unsigned int 
  9699 ;;  i               2    2[BANK0 ] unsigned int 
  9700 ;;  j               2    0[BANK0 ] unsigned int 
  9701 ;; Return value:  Size  Location     Type
  9702 ;;                  2    1[COMMON] unsigned int 
  9703 ;; Registers used:
  9704 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9705 ;; Tracked objects:
  9706 ;;		On entry : 0/0
  9707 ;;		On exit  : 0/0
  9708 ;;		Unchanged: 0/0
  9709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9710 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9711 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9712 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9713 ;;      Totals:         6       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9714 ;;Total ram usage:       12 bytes
  9715 ;; Hardware stack levels used:    1
  9716 ;; Hardware stack levels required when called:    1
  9717 ;; This function calls:
  9718 ;;		Nothing
  9719 ;; This function is called by:
  9720 ;;		_crc_verify
  9721 ;;		_crc_append
  9722 ;; This function uses a non-reentrant model
  9723 ;;
  9724                           
  9725                           
  9726                           ;psect for function _crc_sum
  9727  11DD                     _crc_sum:	
  9728                           
  9729                           ;crc16.c: 118: uint16_t crc=0xFFFF;
  9730                           
  9731                           ;incstack = 0
  9732                           ; Regs used in _crc_sum: [wreg+fsr1l+fsr1h+status,2+status,0]
  9733  11DD  30FF               	movlw	255
  9734  11DE  0020               	movlb	0	; select bank0
  9735  11DF  00A4               	movwf	crc_sum@crc
  9736  11E0  30FF               	movlw	255
  9737  11E1  00A5               	movwf	crc_sum@crc+1
  9738                           
  9739                           ;crc16.c: 119: uint16_t i, j;;crc16.c: 120: for ( j=0; j<len;j++){
  9740  11E2  01A0               	clrf	crc_sum@j
  9741  11E3  01A1               	clrf	crc_sum@j+1
  9742  11E4                     l1068:	
  9743  11E4  0874               	movf	crc_sum@len+1,w
  9744  11E5  0221               	subwf	crc_sum@j+1,w
  9745  11E6  1D03               	skipz
  9746  11E7  29EA               	goto	u4075
  9747  11E8  0873               	movf	crc_sum@len,w
  9748  11E9  0220               	subwf	crc_sum@j,w
  9749  11EA                     u4075:	
  9750  11EA  1803               	btfsc	3,0
  9751  11EB  2A2E               	goto	l4775
  9752                           
  9753                           ;crc16.c: 121: crc=crc ^*buf++;
  9754  11EC  0871               	movf	crc_sum@buf,w
  9755  11ED  0086               	movwf	6
  9756  11EE  0872               	movf	crc_sum@buf+1,w
  9757  11EF  0087               	movwf	7
  9758  11F0  0824               	movf	crc_sum@crc,w
  9759  11F1  0601               	xorwf	1,w
  9760  11F2  00A4               	movwf	crc_sum@crc
  9761  11F3  0825               	movf	crc_sum@crc+1,w
  9762  11F4  00A5               	movwf	crc_sum@crc+1
  9763  11F5  3001               	movlw	1
  9764  11F6  07F1               	addwf	crc_sum@buf,f
  9765  11F7  3000               	movlw	0
  9766  11F8  3DF2               	addwfc	crc_sum@buf+1,f
  9767                           
  9768                           ;crc16.c: 122: for ( i=0; i<8; i++){
  9769  11F9  01A2               	clrf	crc_sum@i
  9770  11FA  01A3               	clrf	crc_sum@i+1
  9771  11FB  3000               	movlw	0
  9772  11FC  0223               	subwf	crc_sum@i+1,w
  9773  11FD  3008               	movlw	8
  9774  11FE  1903               	skipnz
  9775  11FF  0222               	subwf	crc_sum@i,w
  9776  1200  1803               	btfsc	3,0
  9777  1201  2A29               	goto	l4773
  9778  1202                     l1070:	
  9779                           
  9780                           ;crc16.c: 124: if(crc&0x0001){
  9781  1202  1C24               	btfss	crc_sum@crc,0
  9782  1203  2A14               	goto	l4767
  9783                           
  9784                           ;crc16.c: 125: crc=crc>>1;
  9785  1204  0825               	movf	crc_sum@crc+1,w
  9786  1205  00F6               	movwf	??_crc_sum+1
  9787  1206  0824               	movf	crc_sum@crc,w
  9788  1207  00F5               	movwf	??_crc_sum
  9789  1208  36F6               	lsrf	??_crc_sum+1,f
  9790  1209  0CF5               	rrf	??_crc_sum,f
  9791  120A  0875               	movf	??_crc_sum,w
  9792  120B  00A4               	movwf	crc_sum@crc
  9793  120C  0876               	movf	??_crc_sum+1,w
  9794  120D  00A5               	movwf	crc_sum@crc+1
  9795                           
  9796                           ;crc16.c: 126: crc=crc^ 0xa001;
  9797  120E  3001               	movlw	1
  9798  120F  0624               	xorwf	crc_sum@crc,w
  9799  1210  00A4               	movwf	crc_sum@crc
  9800  1211  30A0               	movlw	160
  9801  1212  0625               	xorwf	crc_sum@crc+1,w
  9802  1213  2A1D               	goto	L1
  9803  1214                     l4767:	
  9804                           ;crc16.c: 127: }else{
  9805                           
  9806                           
  9807                           ;crc16.c: 128: crc=crc>>1;
  9808  1214  0825               	movf	crc_sum@crc+1,w
  9809  1215  00F6               	movwf	??_crc_sum+1
  9810  1216  0824               	movf	crc_sum@crc,w
  9811  1217  00F5               	movwf	??_crc_sum
  9812  1218  36F6               	lsrf	??_crc_sum+1,f
  9813  1219  0CF5               	rrf	??_crc_sum,f
  9814  121A  0875               	movf	??_crc_sum,w
  9815  121B  00A4               	movwf	crc_sum@crc
  9816  121C  0876               	movf	??_crc_sum+1,w
  9817  121D                     L1:	
  9818  121D  00A5               	movwf	crc_sum@crc+1
  9819  121E  3001               	movlw	1
  9820  121F  07A2               	addwf	crc_sum@i,f
  9821  1220  3000               	movlw	0
  9822  1221  3DA3               	addwfc	crc_sum@i+1,f
  9823  1222  3000               	movlw	0
  9824  1223  0223               	subwf	crc_sum@i+1,w
  9825  1224  3008               	movlw	8
  9826  1225  1903               	skipnz
  9827  1226  0222               	subwf	crc_sum@i,w
  9828  1227  1C03               	skipc
  9829  1228  2A02               	goto	l1070
  9830  1229                     l4773:	
  9831  1229  3001               	movlw	1
  9832  122A  07A0               	addwf	crc_sum@j,f
  9833  122B  3000               	movlw	0
  9834  122C  3DA1               	addwfc	crc_sum@j+1,f
  9835  122D  29E4               	goto	l1068
  9836  122E                     l4775:	
  9837                           
  9838                           ;crc16.c: 129: };crc16.c: 130: };crc16.c: 132: };crc16.c: 133: return ( crc);
  9839  122E  0825               	movf	crc_sum@crc+1,w
  9840  122F  00F2               	movwf	?_crc_sum+1
  9841  1230  0824               	movf	crc_sum@crc,w
  9842  1231  00F1               	movwf	?_crc_sum
  9843  1232  0008               	return
  9844  1233                     __end_of_crc_sum:	
  9845                           
  9846                           	psect	text28
  9847  1473                     __ptext28:	
  9848 ;; *************** function _calc_temp_rs *****************
  9849 ;; Defined at:
  9850 ;;		line 216 in file "src/api/sample.c"
  9851 ;; Parameters:    Size  Location     Type
  9852 ;;		None
  9853 ;; Auto vars:     Size  Location     Type
  9854 ;;		None
  9855 ;; Return value:  Size  Location     Type
  9856 ;;                  4    5[BANK0 ] unsigned long 
  9857 ;; Registers used:
  9858 ;;		wreg, status,2, status,0, pclath, cstack
  9859 ;; Tracked objects:
  9860 ;;		On entry : 0/0
  9861 ;;		On exit  : 0/0
  9862 ;;		Unchanged: 0/0
  9863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9864 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9866 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9867 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9868 ;;Total ram usage:        8 bytes
  9869 ;; Hardware stack levels used:    1
  9870 ;; Hardware stack levels required when called:    2
  9871 ;; This function calls:
  9872 ;;		___lldiv
  9873 ;;		___lmul
  9874 ;; This function is called by:
  9875 ;;		_main
  9876 ;; This function uses a non-reentrant model
  9877 ;;
  9878                           
  9879                           
  9880                           ;psect for function _calc_temp_rs
  9881  1473                     _calc_temp_rs:	
  9882                           
  9883                           ;sample.c: 230: y32=12000UL;
  9884                           
  9885                           ;incstack = 0
  9886                           ; Regs used in _calc_temp_rs: [wreg+status,2+status,0+pclath+cstack]
  9887  1473  3000               	movlw	0
  9888  1474  0020               	movlb	0	; select bank0
  9889  1475  00CA               	movwf	_y32+3
  9890  1476  3000               	movlw	0
  9891  1477  00C9               	movwf	_y32+2
  9892  1478  302E               	movlw	46
  9893  1479  00C8               	movwf	_y32+1
  9894  147A  30E0               	movlw	224
  9895  147B  00C7               	movwf	_y32
  9896                           
  9897                           ;sample.c: 231: y32=y32*rtAdcValueRsHi;
  9898  147C  085D               	movf	_rtAdcValueRsHi,w
  9899  147D  00F1               	movwf	___lmul@multiplier
  9900  147E  085E               	movf	_rtAdcValueRsHi+1,w
  9901  147F  00F2               	movwf	___lmul@multiplier+1
  9902  1480  01F3               	clrf	___lmul@multiplier+2
  9903  1481  01F4               	clrf	___lmul@multiplier+3
  9904  1482  084A               	movf	_y32+3,w
  9905  1483  00F8               	movwf	___lmul@multiplicand+3
  9906  1484  0849               	movf	_y32+2,w
  9907  1485  00F7               	movwf	___lmul@multiplicand+2
  9908  1486  0848               	movf	_y32+1,w
  9909  1487  00F6               	movwf	___lmul@multiplicand+1
  9910  1488  0847               	movf	_y32,w
  9911  1489  00F5               	movwf	___lmul@multiplicand
  9912  148A  319E  262D  3194   	fcall	___lmul
  9913  148D  0874               	movf	?___lmul+3,w
  9914  148E  0020               	movlb	0	; select bank0
  9915  148F  00CA               	movwf	_y32+3
  9916  1490  0873               	movf	?___lmul+2,w
  9917  1491  00C9               	movwf	_y32+2
  9918  1492  0872               	movf	?___lmul+1,w
  9919  1493  00C8               	movwf	_y32+1
  9920  1494  0871               	movf	?___lmul,w
  9921  1495  00C7               	movwf	_y32
  9922                           
  9923                           ;sample.c: 232: x32=rtAdcValueRsLo;
  9924  1496  085F               	movf	_rtAdcValueRsLo,w
  9925  1497  0021               	movlb	1	; select bank1
  9926  1498  00B8               	movwf	_x32^(0+128)
  9927  1499  0020               	movlb	0	; select bank0
  9928  149A  0860               	movf	_rtAdcValueRsLo+1,w
  9929  149B  0021               	movlb	1	; select bank1
  9930  149C  00B9               	movwf	(_x32^(0+128)+1)
  9931  149D  01BA               	clrf	(_x32^(0+128)+2)
  9932  149E  01BB               	clrf	(_x32^(0+128)+3)
  9933                           
  9934                           ;sample.c: 233: y32=y32/x32;
  9935  149F  083B               	movf	(_x32+3)^(0+128),w
  9936  14A0  00F4               	movwf	___lldiv@divisor+3
  9937  14A1  083A               	movf	(_x32+2)^(0+128),w
  9938  14A2  00F3               	movwf	___lldiv@divisor+2
  9939  14A3  0839               	movf	(_x32+1)^(0+128),w
  9940  14A4  00F2               	movwf	___lldiv@divisor+1
  9941  14A5  0838               	movf	_x32^(0+128),w
  9942  14A6  00F1               	movwf	___lldiv@divisor
  9943  14A7  0020               	movlb	0	; select bank0
  9944  14A8  084A               	movf	_y32+3,w
  9945  14A9  00F8               	movwf	___lldiv@dividend+3
  9946  14AA  0849               	movf	_y32+2,w
  9947  14AB  00F7               	movwf	___lldiv@dividend+2
  9948  14AC  0848               	movf	_y32+1,w
  9949  14AD  00F6               	movwf	___lldiv@dividend+1
  9950  14AE  0847               	movf	_y32,w
  9951  14AF  00F5               	movwf	___lldiv@dividend
  9952  14B0  3191  2136  3194   	fcall	___lldiv
  9953  14B3  0874               	movf	?___lldiv+3,w
  9954  14B4  0020               	movlb	0	; select bank0
  9955  14B5  00CA               	movwf	_y32+3
  9956  14B6  0873               	movf	?___lldiv+2,w
  9957  14B7  00C9               	movwf	_y32+2
  9958  14B8  0872               	movf	?___lldiv+1,w
  9959  14B9  00C8               	movwf	_y32+1
  9960  14BA  0871               	movf	?___lldiv,w
  9961  14BB  00C7               	movwf	_y32
  9962                           
  9963                           ;sample.c: 234: if(y32<2000)y32=2000;
  9964  14BC  084A               	movf	_y32+3,w
  9965  14BD  1D03               	btfss	3,2
  9966  14BE  2CD0               	goto	l5083
  9967  14BF  0849               	movf	_y32+2,w
  9968  14C0  1D03               	btfss	3,2
  9969  14C1  2CD0               	goto	l5083
  9970  14C2  30D0               	movlw	208
  9971  14C3  0247               	subwf	_y32,w
  9972  14C4  3007               	movlw	7
  9973  14C5  3B48               	subwfb	_y32+1,w
  9974  14C6  1803               	btfsc	3,0
  9975  14C7  2CD0               	goto	l5083
  9976  14C8  3000               	movlw	0
  9977  14C9  00CA               	movwf	_y32+3
  9978  14CA  3000               	movlw	0
  9979  14CB  00C9               	movwf	_y32+2
  9980  14CC  3007               	movlw	7
  9981  14CD  00C8               	movwf	_y32+1
  9982  14CE  30D0               	movlw	208
  9983  14CF  00C7               	movwf	_y32
  9984  14D0                     l5083:	
  9985                           
  9986                           ;sample.c: 235: if(y32>25000)y32=25000;
  9987  14D0  084A               	movf	_y32+3,w
  9988  14D1  1D03               	btfss	3,2
  9989  14D2  2CDC               	goto	l5085
  9990  14D3  0849               	movf	_y32+2,w
  9991  14D4  1D03               	btfss	3,2
  9992  14D5  2CDC               	goto	l5085
  9993  14D6  30A9               	movlw	169
  9994  14D7  0247               	subwf	_y32,w
  9995  14D8  3061               	movlw	97
  9996  14D9  3B48               	subwfb	_y32+1,w
  9997  14DA  1C03               	btfss	3,0
  9998  14DB  2CE4               	goto	l647
  9999  14DC                     l5085:	
 10000  14DC  3000               	movlw	0
 10001  14DD  00CA               	movwf	_y32+3
 10002  14DE  3000               	movlw	0
 10003  14DF  00C9               	movwf	_y32+2
 10004  14E0  3061               	movlw	97
 10005  14E1  00C8               	movwf	_y32+1
 10006  14E2  30A8               	movlw	168
 10007  14E3  00C7               	movwf	_y32
 10008  14E4                     l647:	
 10009                           
 10010                           ;sample.c: 236: y32=y32-1000;
 10011  14E4  3018               	movlw	24
 10012  14E5  00A9               	movwf	??_calc_temp_rs
 10013  14E6  30FC               	movlw	252
 10014  14E7  00AA               	movwf	??_calc_temp_rs+1
 10015  14E8  30FF               	movlw	255
 10016  14E9  00AB               	movwf	??_calc_temp_rs+2
 10017  14EA  30FF               	movlw	255
 10018  14EB  00AC               	movwf	??_calc_temp_rs+3
 10019  14EC  0847               	movf	_y32,w
 10020  14ED  07A9               	addwf	??_calc_temp_rs,f
 10021  14EE  0848               	movf	_y32+1,w
 10022  14EF  3DAA               	addwfc	??_calc_temp_rs+1,f
 10023  14F0  0849               	movf	_y32+2,w
 10024  14F1  3DAB               	addwfc	??_calc_temp_rs+2,f
 10025  14F2  084A               	movf	_y32+3,w
 10026  14F3  3DAC               	addwfc	??_calc_temp_rs+3,f
 10027  14F4  082C               	movf	??_calc_temp_rs+3,w
 10028  14F5  00CA               	movwf	_y32+3
 10029  14F6  082B               	movf	??_calc_temp_rs+2,w
 10030  14F7  00C9               	movwf	_y32+2
 10031  14F8  082A               	movf	??_calc_temp_rs+1,w
 10032  14F9  00C8               	movwf	_y32+1
 10033  14FA  0829               	movf	??_calc_temp_rs,w
 10034  14FB  00C7               	movwf	_y32
 10035                           
 10036                           ;sample.c: 237: return (uint16_t)y32;
 10037  14FC  0847               	movf	_y32,w
 10038  14FD  00A5               	movwf	?_calc_temp_rs
 10039  14FE  0848               	movf	_y32+1,w
 10040  14FF  00A6               	movwf	?_calc_temp_rs+1
 10041  1500  01A7               	clrf	?_calc_temp_rs+2
 10042  1501  01A8               	clrf	?_calc_temp_rs+3
 10043  1502  0008               	return
 10044  1503                     __end_of_calc_temp_rs:	
 10045                           
 10046                           	psect	text29
 10047  1727                     __ptext29:	
 10048 ;; *************** function _calc_temp_rc *****************
 10049 ;; Defined at:
 10050 ;;		line 240 in file "src/api/sample.c"
 10051 ;; Parameters:    Size  Location     Type
 10052 ;;		None
 10053 ;; Auto vars:     Size  Location     Type
 10054 ;;		None
 10055 ;; Return value:  Size  Location     Type
 10056 ;;                  4    5[BANK0 ] unsigned long 
 10057 ;; Registers used:
 10058 ;;		wreg, status,2, status,0, pclath, cstack
 10059 ;; Tracked objects:
 10060 ;;		On entry : 0/0
 10061 ;;		On exit  : 0/0
 10062 ;;		Unchanged: 0/0
 10063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10064 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10066 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10067 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10068 ;;Total ram usage:       12 bytes
 10069 ;; Hardware stack levels used:    1
 10070 ;; Hardware stack levels required when called:    2
 10071 ;; This function calls:
 10072 ;;		___lldiv
 10073 ;;		___lmul
 10074 ;; This function is called by:
 10075 ;;		_main
 10076 ;; This function uses a non-reentrant model
 10077 ;;
 10078                           
 10079                           
 10080                           ;psect for function _calc_temp_rc
 10081  1727                     _calc_temp_rc:	
 10082                           
 10083                           ;sample.c: 244: x32=300000UL;
 10084                           
 10085                           ;incstack = 0
 10086                           ; Regs used in _calc_temp_rc: [wreg+status,2+status,0+pclath+cstack]
 10087  1727  3000               	movlw	0
 10088  1728  0021               	movlb	1	; select bank1
 10089  1729  00BB               	movwf	(_x32+3)^(0+128)
 10090  172A  3004               	movlw	4
 10091  172B  00BA               	movwf	(_x32+2)^(0+128)
 10092  172C  3093               	movlw	147
 10093  172D  00B9               	movwf	(_x32+1)^(0+128)
 10094  172E  30E0               	movlw	224
 10095  172F  00B8               	movwf	_x32^(0+128)
 10096                           
 10097                           ;sample.c: 245: x32=x32*rtAdcValueRcLo;
 10098  1730  0020               	movlb	0	; select bank0
 10099  1731  085B               	movf	_rtAdcValueRcLo,w
 10100  1732  00F1               	movwf	___lmul@multiplier
 10101  1733  085C               	movf	_rtAdcValueRcLo+1,w
 10102  1734  00F2               	movwf	___lmul@multiplier+1
 10103  1735  01F3               	clrf	___lmul@multiplier+2
 10104  1736  01F4               	clrf	___lmul@multiplier+3
 10105  1737  0021               	movlb	1	; select bank1
 10106  1738  083B               	movf	(_x32+3)^(0+128),w
 10107  1739  00F8               	movwf	___lmul@multiplicand+3
 10108  173A  083A               	movf	(_x32+2)^(0+128),w
 10109  173B  00F7               	movwf	___lmul@multiplicand+2
 10110  173C  0839               	movf	(_x32+1)^(0+128),w
 10111  173D  00F6               	movwf	___lmul@multiplicand+1
 10112  173E  0838               	movf	_x32^(0+128),w
 10113  173F  00F5               	movwf	___lmul@multiplicand
 10114  1740  319E  262D  3197   	fcall	___lmul
 10115  1743  0874               	movf	?___lmul+3,w
 10116  1744  0021               	movlb	1	; select bank1
 10117  1745  00BB               	movwf	(_x32+3)^(0+128)
 10118  1746  0873               	movf	?___lmul+2,w
 10119  1747  00BA               	movwf	(_x32+2)^(0+128)
 10120  1748  0872               	movf	?___lmul+1,w
 10121  1749  00B9               	movwf	(_x32+1)^(0+128)
 10122  174A  0871               	movf	?___lmul,w
 10123  174B  00B8               	movwf	_x32^(0+128)
 10124                           
 10125                           ;sample.c: 248: y32=rtAdcValueRcHi;
 10126  174C  0020               	movlb	0	; select bank0
 10127  174D  0859               	movf	_rtAdcValueRcHi,w
 10128  174E  00C7               	movwf	_y32
 10129  174F  085A               	movf	_rtAdcValueRcHi+1,w
 10130  1750  00C8               	movwf	_y32+1
 10131  1751  01C9               	clrf	_y32+2
 10132  1752  01CA               	clrf	_y32+3
 10133                           
 10134                           ;sample.c: 249: y32=y32*3100;
 10135  1753  084A               	movf	_y32+3,w
 10136  1754  00F4               	movwf	___lmul@multiplier+3
 10137  1755  0849               	movf	_y32+2,w
 10138  1756  00F3               	movwf	___lmul@multiplier+2
 10139  1757  0848               	movf	_y32+1,w
 10140  1758  00F2               	movwf	___lmul@multiplier+1
 10141  1759  0847               	movf	_y32,w
 10142  175A  00F1               	movwf	___lmul@multiplier
 10143  175B  3000               	movlw	0
 10144  175C  00F8               	movwf	___lmul@multiplicand+3
 10145  175D  3000               	movlw	0
 10146  175E  00F7               	movwf	___lmul@multiplicand+2
 10147  175F  300C               	movlw	12
 10148  1760  00F6               	movwf	___lmul@multiplicand+1
 10149  1761  301C               	movlw	28
 10150  1762  00F5               	movwf	___lmul@multiplicand
 10151  1763  319E  262D  3197   	fcall	___lmul
 10152  1766  0874               	movf	?___lmul+3,w
 10153  1767  0020               	movlb	0	; select bank0
 10154  1768  00CA               	movwf	_y32+3
 10155  1769  0873               	movf	?___lmul+2,w
 10156  176A  00C9               	movwf	_y32+2
 10157  176B  0872               	movf	?___lmul+1,w
 10158  176C  00C8               	movwf	_y32+1
 10159  176D  0871               	movf	?___lmul,w
 10160  176E  00C7               	movwf	_y32
 10161                           
 10162                           ;sample.c: 250: y32=y32/100;
 10163  176F  3000               	movlw	0
 10164  1770  00F4               	movwf	___lldiv@divisor+3
 10165  1771  3000               	movlw	0
 10166  1772  00F3               	movwf	___lldiv@divisor+2
 10167  1773  3000               	movlw	0
 10168  1774  00F2               	movwf	___lldiv@divisor+1
 10169  1775  3064               	movlw	100
 10170  1776  00F1               	movwf	___lldiv@divisor
 10171  1777  084A               	movf	_y32+3,w
 10172  1778  00F8               	movwf	___lldiv@dividend+3
 10173  1779  0849               	movf	_y32+2,w
 10174  177A  00F7               	movwf	___lldiv@dividend+2
 10175  177B  0848               	movf	_y32+1,w
 10176  177C  00F6               	movwf	___lldiv@dividend+1
 10177  177D  0847               	movf	_y32,w
 10178  177E  00F5               	movwf	___lldiv@dividend
 10179  177F  3191  2136  3197   	fcall	___lldiv
 10180  1782  0874               	movf	?___lldiv+3,w
 10181  1783  0020               	movlb	0	; select bank0
 10182  1784  00CA               	movwf	_y32+3
 10183  1785  0873               	movf	?___lldiv+2,w
 10184  1786  00C9               	movwf	_y32+2
 10185  1787  0872               	movf	?___lldiv+1,w
 10186  1788  00C8               	movwf	_y32+1
 10187  1789  0871               	movf	?___lldiv,w
 10188  178A  00C7               	movwf	_y32
 10189                           
 10190                           ;sample.c: 251: y32=y32-rtAdcValueRcLo;
 10191  178B  0847               	movf	_y32,w
 10192  178C  00A9               	movwf	??_calc_temp_rc
 10193  178D  0848               	movf	_y32+1,w
 10194  178E  00AA               	movwf	??_calc_temp_rc+1
 10195  178F  0849               	movf	_y32+2,w
 10196  1790  00AB               	movwf	??_calc_temp_rc+2
 10197  1791  084A               	movf	_y32+3,w
 10198  1792  00AC               	movwf	??_calc_temp_rc+3
 10199  1793  085B               	movf	_rtAdcValueRcLo,w
 10200  1794  00AD               	movwf	??_calc_temp_rc+4
 10201  1795  085C               	movf	_rtAdcValueRcLo+1,w
 10202  1796  00AE               	movwf	??_calc_temp_rc+5
 10203  1797  01AF               	clrf	??_calc_temp_rc+6
 10204  1798  01B0               	clrf	??_calc_temp_rc+7
 10205  1799  09AD               	comf	??_calc_temp_rc+4,f
 10206  179A  09AE               	comf	??_calc_temp_rc+5,f
 10207  179B  09AF               	comf	??_calc_temp_rc+6,f
 10208  179C  09B0               	comf	??_calc_temp_rc+7,f
 10209  179D  0AAD               	incf	??_calc_temp_rc+4,f
 10210  179E  1903               	skipnz
 10211  179F  0AAE               	incf	??_calc_temp_rc+5,f
 10212  17A0  1903               	skipnz
 10213  17A1  0AAF               	incf	??_calc_temp_rc+6,f
 10214  17A2  1903               	skipnz
 10215  17A3  0AB0               	incf	??_calc_temp_rc+7,f
 10216  17A4  082D               	movf	??_calc_temp_rc+4,w
 10217  17A5  07A9               	addwf	??_calc_temp_rc,f
 10218  17A6  082E               	movf	??_calc_temp_rc+5,w
 10219  17A7  3DAA               	addwfc	??_calc_temp_rc+1,f
 10220  17A8  082F               	movf	??_calc_temp_rc+6,w
 10221  17A9  3DAB               	addwfc	??_calc_temp_rc+2,f
 10222  17AA  0830               	movf	??_calc_temp_rc+7,w
 10223  17AB  3DAC               	addwfc	??_calc_temp_rc+3,f
 10224  17AC  082C               	movf	??_calc_temp_rc+3,w
 10225  17AD  00CA               	movwf	_y32+3
 10226  17AE  082B               	movf	??_calc_temp_rc+2,w
 10227  17AF  00C9               	movwf	_y32+2
 10228  17B0  082A               	movf	??_calc_temp_rc+1,w
 10229  17B1  00C8               	movwf	_y32+1
 10230  17B2  0829               	movf	??_calc_temp_rc,w
 10231  17B3  00C7               	movwf	_y32
 10232                           
 10233                           ;sample.c: 254: y32=x32/y32;
 10234  17B4  084A               	movf	_y32+3,w
 10235  17B5  00F4               	movwf	___lldiv@divisor+3
 10236  17B6  0849               	movf	_y32+2,w
 10237  17B7  00F3               	movwf	___lldiv@divisor+2
 10238  17B8  0848               	movf	_y32+1,w
 10239  17B9  00F2               	movwf	___lldiv@divisor+1
 10240  17BA  0847               	movf	_y32,w
 10241  17BB  00F1               	movwf	___lldiv@divisor
 10242  17BC  0021               	movlb	1	; select bank1
 10243  17BD  083B               	movf	(_x32+3)^(0+128),w
 10244  17BE  00F8               	movwf	___lldiv@dividend+3
 10245  17BF  083A               	movf	(_x32+2)^(0+128),w
 10246  17C0  00F7               	movwf	___lldiv@dividend+2
 10247  17C1  0839               	movf	(_x32+1)^(0+128),w
 10248  17C2  00F6               	movwf	___lldiv@dividend+1
 10249  17C3  0838               	movf	_x32^(0+128),w
 10250  17C4  00F5               	movwf	___lldiv@dividend
 10251  17C5  3191  2136  3197   	fcall	___lldiv
 10252  17C8  0874               	movf	?___lldiv+3,w
 10253  17C9  0020               	movlb	0	; select bank0
 10254  17CA  00CA               	movwf	_y32+3
 10255  17CB  0873               	movf	?___lldiv+2,w
 10256  17CC  00C9               	movwf	_y32+2
 10257  17CD  0872               	movf	?___lldiv+1,w
 10258  17CE  00C8               	movwf	_y32+1
 10259  17CF  0871               	movf	?___lldiv,w
 10260  17D0  00C7               	movwf	_y32
 10261                           
 10262                           ;sample.c: 255: if(y32<2000)y32=2000;
 10263  17D1  084A               	movf	_y32+3,w
 10264  17D2  1D03               	btfss	3,2
 10265  17D3  2FE5               	goto	l5101
 10266  17D4  0849               	movf	_y32+2,w
 10267  17D5  1D03               	btfss	3,2
 10268  17D6  2FE5               	goto	l5101
 10269  17D7  30D0               	movlw	208
 10270  17D8  0247               	subwf	_y32,w
 10271  17D9  3007               	movlw	7
 10272  17DA  3B48               	subwfb	_y32+1,w
 10273  17DB  1803               	btfsc	3,0
 10274  17DC  2FE5               	goto	l5101
 10275  17DD  3000               	movlw	0
 10276  17DE  00CA               	movwf	_y32+3
 10277  17DF  3000               	movlw	0
 10278  17E0  00C9               	movwf	_y32+2
 10279  17E1  3007               	movlw	7
 10280  17E2  00C8               	movwf	_y32+1
 10281  17E3  30D0               	movlw	208
 10282  17E4  00C7               	movwf	_y32
 10283  17E5                     l5101:	
 10284                           
 10285                           ;sample.c: 256: if(y32>25000)y32=25000;
 10286  17E5  084A               	movf	_y32+3,w
 10287  17E6  1D03               	btfss	3,2
 10288  17E7  2FF1               	goto	l5103
 10289  17E8  0849               	movf	_y32+2,w
 10290  17E9  1D03               	btfss	3,2
 10291  17EA  2FF1               	goto	l5103
 10292  17EB  30A9               	movlw	169
 10293  17EC  0247               	subwf	_y32,w
 10294  17ED  3061               	movlw	97
 10295  17EE  3B48               	subwfb	_y32+1,w
 10296  17EF  1C03               	btfss	3,0
 10297  17F0  2FF9               	goto	l652
 10298  17F1                     l5103:	
 10299  17F1  3000               	movlw	0
 10300  17F2  00CA               	movwf	_y32+3
 10301  17F3  3000               	movlw	0
 10302  17F4  00C9               	movwf	_y32+2
 10303  17F5  3061               	movlw	97
 10304  17F6  00C8               	movwf	_y32+1
 10305  17F7  30A8               	movlw	168
 10306  17F8  00C7               	movwf	_y32
 10307  17F9                     l652:	
 10308                           
 10309                           ;sample.c: 258: return (uint16_t)y32;
 10310  17F9  0847               	movf	_y32,w
 10311  17FA  00A5               	movwf	?_calc_temp_rc
 10312  17FB  0848               	movf	_y32+1,w
 10313  17FC  00A6               	movwf	?_calc_temp_rc+1
 10314  17FD  01A7               	clrf	?_calc_temp_rc+2
 10315  17FE  01A8               	clrf	?_calc_temp_rc+3
 10316  17FF  0008               	return
 10317  1800                     __end_of_calc_temp_rc:	
 10318                           
 10319                           	psect	text30
 10320  1290                     __ptext30:	
 10321 ;; *************** function _calc_rs_lo_avg *****************
 10322 ;; Defined at:
 10323 ;;		line 447 in file "src/api/sample.c"
 10324 ;; Parameters:    Size  Location     Type
 10325 ;;  x               2    5[BANK0 ] unsigned int 
 10326 ;; Auto vars:     Size  Location     Type
 10327 ;;  t32             4    7[BANK0 ] unsigned long 
 10328 ;;  i               1   11[BANK0 ] unsigned char 
 10329 ;; Return value:  Size  Location     Type
 10330 ;;                  2    5[BANK0 ] unsigned int 
 10331 ;; Registers used:
 10332 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10333 ;; Tracked objects:
 10334 ;;		On entry : 0/0
 10335 ;;		On exit  : 0/0
 10336 ;;		Unchanged: 0/0
 10337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10338 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10339 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10340 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10341 ;;      Totals:         2       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10342 ;;Total ram usage:        9 bytes
 10343 ;; Hardware stack levels used:    1
 10344 ;; Hardware stack levels required when called:    2
 10345 ;; This function calls:
 10346 ;;		___lldiv
 10347 ;; This function is called by:
 10348 ;;		_main
 10349 ;; This function uses a non-reentrant model
 10350 ;;
 10351                           
 10352                           
 10353                           ;psect for function _calc_rs_lo_avg
 10354  1290                     _calc_rs_lo_avg:	
 10355                           
 10356                           ;sample.c: 449: uint8_t i;;sample.c: 450: uint32_t t32=0;
 10357                           
 10358                           ;incstack = 0
 10359                           ; Regs used in _calc_rs_lo_avg: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10360  1290  3000               	movlw	0
 10361  1291  0020               	movlb	0	; select bank0
 10362  1292  00AA               	movwf	calc_rs_lo_avg@t32+3
 10363  1293  3000               	movlw	0
 10364  1294  00A9               	movwf	calc_rs_lo_avg@t32+2
 10365  1295  3000               	movlw	0
 10366  1296  00A8               	movwf	calc_rs_lo_avg@t32+1
 10367  1297  3000               	movlw	0
 10368  1298  00A7               	movwf	calc_rs_lo_avg@t32
 10369                           
 10370                           ;sample.c: 452: for(i=0;i<6-1;i++){
 10371  1299  01AB               	clrf	calc_rs_lo_avg@i
 10372  129A  3005               	movlw	5
 10373  129B  022B               	subwf	calc_rs_lo_avg@i,w
 10374  129C  1803               	btfsc	3,0
 10375  129D  2AC2               	goto	l4283
 10376  129E                     l4275:	
 10377                           
 10378                           ;sample.c: 453: rsLoAvgBuf[i]=rsLoAvgBuf[i+1];
 10379  129E  352B               	lslf	calc_rs_lo_avg@i,w
 10380  129F  3E02               	addlw	2
 10381  12A0  3EAC               	addlw	(low (_rsLoAvgBuf| 0))& (0+255)
 10382  12A1  0086               	movwf	6
 10383  12A2  0187               	clrf	7
 10384  12A3  352B               	lslf	calc_rs_lo_avg@i,w
 10385  12A4  3EAC               	addlw	(low (_rsLoAvgBuf| 0))& (0+255)
 10386  12A5  0084               	movwf	4
 10387  12A6  0185               	clrf	5
 10388  12A7  3F40               	moviw [0]fsr1
 10389  12A8  3F80               	movwi [0]fsr0
 10390  12A9  3F41               	moviw [1]fsr1
 10391  12AA  3F81               	movwi [1]fsr0
 10392                           
 10393                           ;sample.c: 454: t32+=((uint32_t)rsLoAvgBuf[i]);
 10394  12AB  352B               	lslf	calc_rs_lo_avg@i,w
 10395  12AC  3EAC               	addlw	(low (_rsLoAvgBuf| 0))& (0+255)
 10396  12AD  0086               	movwf	6
 10397  12AE  0187               	clrf	7
 10398  12AF  3F40               	moviw [0]fsr1
 10399  12B0  00FA               	movwf	??_calc_rs_lo_avg
 10400  12B1  3F41               	moviw [1]fsr1
 10401  12B2  00FB               	movwf	??_calc_rs_lo_avg+1
 10402  12B3  087A               	movf	??_calc_rs_lo_avg,w
 10403  12B4  07A7               	addwf	calc_rs_lo_avg@t32,f
 10404  12B5  087B               	movf	??_calc_rs_lo_avg+1,w
 10405  12B6  3DA8               	addwfc	calc_rs_lo_avg@t32+1,f
 10406  12B7  3000               	movlw	0
 10407  12B8  3DA9               	addwfc	calc_rs_lo_avg@t32+2,f
 10408  12B9  3DAA               	addwfc	calc_rs_lo_avg@t32+3,f
 10409  12BA  3001               	movlw	1
 10410  12BB  00FA               	movwf	??_calc_rs_lo_avg
 10411  12BC  087A               	movf	??_calc_rs_lo_avg,w
 10412  12BD  07AB               	addwf	calc_rs_lo_avg@i,f
 10413  12BE  3005               	movlw	5
 10414  12BF  022B               	subwf	calc_rs_lo_avg@i,w
 10415  12C0  1C03               	skipc
 10416  12C1  2A9E               	goto	l4275
 10417  12C2                     l4283:	
 10418                           
 10419                           ;sample.c: 455: };sample.c: 456: rsLoAvgBuf[i]=x;
 10420  12C2  352B               	lslf	calc_rs_lo_avg@i,w
 10421  12C3  3EAC               	addlw	(low (_rsLoAvgBuf| 0))& (0+255)
 10422  12C4  0086               	movwf	6
 10423  12C5  0187               	clrf	7
 10424  12C6  0825               	movf	calc_rs_lo_avg@x,w
 10425  12C7  3FC0               	movwi [0]fsr1
 10426  12C8  0826               	movf	calc_rs_lo_avg@x+1,w
 10427  12C9  3FC1               	movwi [1]fsr1
 10428                           
 10429                           ;sample.c: 457: t32+=x;
 10430  12CA  0825               	movf	calc_rs_lo_avg@x,w
 10431  12CB  07A7               	addwf	calc_rs_lo_avg@t32,f
 10432  12CC  0826               	movf	calc_rs_lo_avg@x+1,w
 10433  12CD  3DA8               	addwfc	calc_rs_lo_avg@t32+1,f
 10434  12CE  3000               	movlw	0
 10435  12CF  3DA9               	addwfc	calc_rs_lo_avg@t32+2,f
 10436  12D0  3DAA               	addwfc	calc_rs_lo_avg@t32+3,f
 10437                           
 10438                           ;sample.c: 458: t32/=6;
 10439  12D1  3000               	movlw	0
 10440  12D2  00F4               	movwf	___lldiv@divisor+3
 10441  12D3  3000               	movlw	0
 10442  12D4  00F3               	movwf	___lldiv@divisor+2
 10443  12D5  3000               	movlw	0
 10444  12D6  00F2               	movwf	___lldiv@divisor+1
 10445  12D7  3006               	movlw	6
 10446  12D8  00F1               	movwf	___lldiv@divisor
 10447  12D9  082A               	movf	calc_rs_lo_avg@t32+3,w
 10448  12DA  00F8               	movwf	___lldiv@dividend+3
 10449  12DB  0829               	movf	calc_rs_lo_avg@t32+2,w
 10450  12DC  00F7               	movwf	___lldiv@dividend+2
 10451  12DD  0828               	movf	calc_rs_lo_avg@t32+1,w
 10452  12DE  00F6               	movwf	___lldiv@dividend+1
 10453  12DF  0827               	movf	calc_rs_lo_avg@t32,w
 10454  12E0  00F5               	movwf	___lldiv@dividend
 10455  12E1  3191  2136         	fcall	___lldiv
 10456  12E3  0874               	movf	?___lldiv+3,w
 10457  12E4  0020               	movlb	0	; select bank0
 10458  12E5  00AA               	movwf	calc_rs_lo_avg@t32+3
 10459  12E6  0873               	movf	?___lldiv+2,w
 10460  12E7  00A9               	movwf	calc_rs_lo_avg@t32+2
 10461  12E8  0872               	movf	?___lldiv+1,w
 10462  12E9  00A8               	movwf	calc_rs_lo_avg@t32+1
 10463  12EA  0871               	movf	?___lldiv,w
 10464  12EB  00A7               	movwf	calc_rs_lo_avg@t32
 10465                           
 10466                           ;sample.c: 459: return (uint16_t)t32;
 10467  12EC  0828               	movf	calc_rs_lo_avg@t32+1,w
 10468  12ED  00A6               	movwf	?_calc_rs_lo_avg+1
 10469  12EE  0827               	movf	calc_rs_lo_avg@t32,w
 10470  12EF  00A5               	movwf	?_calc_rs_lo_avg
 10471  12F0  0008               	return
 10472  12F1                     __end_of_calc_rs_lo_avg:	
 10473                           
 10474                           	psect	text31
 10475  1136                     __ptext31:	
 10476 ;; *************** function ___lldiv *****************
 10477 ;; Defined at:
 10478 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
 10479 ;; Parameters:    Size  Location     Type
 10480 ;;  divisor         4    1[COMMON] unsigned long 
 10481 ;;  dividend        4    5[COMMON] unsigned long 
 10482 ;; Auto vars:     Size  Location     Type
 10483 ;;  quotient        4    0[BANK0 ] unsigned long 
 10484 ;;  counter         1    4[BANK0 ] unsigned char 
 10485 ;; Return value:  Size  Location     Type
 10486 ;;                  4    1[COMMON] unsigned long 
 10487 ;; Registers used:
 10488 ;;		wreg, status,2, status,0
 10489 ;; Tracked objects:
 10490 ;;		On entry : 0/0
 10491 ;;		On exit  : 0/0
 10492 ;;		Unchanged: 0/0
 10493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10494 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10495 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10496 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10497 ;;      Totals:         9       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10498 ;;Total ram usage:       14 bytes
 10499 ;; Hardware stack levels used:    1
 10500 ;; Hardware stack levels required when called:    1
 10501 ;; This function calls:
 10502 ;;		Nothing
 10503 ;; This function is called by:
 10504 ;;		_calc_temp_rs
 10505 ;;		_calc_temp_rc
 10506 ;;		_calc_rs_lo_avg
 10507 ;; This function uses a non-reentrant model
 10508 ;;
 10509                           
 10510                           
 10511                           ;psect for function ___lldiv
 10512  1136                     ___lldiv:	
 10513                           
 10514                           ;incstack = 0
 10515                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 10516  1136  3000               	movlw	0
 10517  1137  0020               	movlb	0	; select bank0
 10518  1138  00A3               	movwf	___lldiv@quotient+3
 10519  1139  3000               	movlw	0
 10520  113A  00A2               	movwf	___lldiv@quotient+2
 10521  113B  3000               	movlw	0
 10522  113C  00A1               	movwf	___lldiv@quotient+1
 10523  113D  3000               	movlw	0
 10524  113E  00A0               	movwf	___lldiv@quotient
 10525  113F  0874               	movf	___lldiv@divisor+3,w
 10526  1140  0473               	iorwf	___lldiv@divisor+2,w
 10527  1141  0472               	iorwf	___lldiv@divisor+1,w
 10528  1142  0471               	iorwf	___lldiv@divisor,w
 10529  1143  1903               	skipnz
 10530  1144  2980               	goto	l3993
 10531  1145  01A4               	clrf	___lldiv@counter
 10532  1146  0AA4               	incf	___lldiv@counter,f
 10533  1147                     l3979:	
 10534  1147  1BF4               	btfsc	___lldiv@divisor+3,7
 10535  1148  2955               	goto	l3981
 10536  1149  3001               	movlw	1
 10537  114A                     u2845:	
 10538  114A  35F1               	lslf	___lldiv@divisor,f
 10539  114B  0DF2               	rlf	___lldiv@divisor+1,f
 10540  114C  0DF3               	rlf	___lldiv@divisor+2,f
 10541  114D  0DF4               	rlf	___lldiv@divisor+3,f
 10542  114E  0B89               	decfsz	9,f
 10543  114F  294A               	goto	u2845
 10544  1150  3001               	movlw	1
 10545  1151  00F9               	movwf	??___lldiv
 10546  1152  0879               	movf	??___lldiv,w
 10547  1153  07A4               	addwf	___lldiv@counter,f
 10548  1154  2947               	goto	l3979
 10549  1155                     l3981:	
 10550  1155  3001               	movlw	1
 10551  1156                     u2865:	
 10552  1156  35A0               	lslf	___lldiv@quotient,f
 10553  1157  0DA1               	rlf	___lldiv@quotient+1,f
 10554  1158  0DA2               	rlf	___lldiv@quotient+2,f
 10555  1159  0DA3               	rlf	___lldiv@quotient+3,f
 10556  115A  0B89               	decfsz	9,f
 10557  115B  2956               	goto	u2865
 10558  115C  0874               	movf	___lldiv@divisor+3,w
 10559  115D  0278               	subwf	___lldiv@dividend+3,w
 10560  115E  1D03               	skipz
 10561  115F  296A               	goto	u2875
 10562  1160  0873               	movf	___lldiv@divisor+2,w
 10563  1161  0277               	subwf	___lldiv@dividend+2,w
 10564  1162  1D03               	skipz
 10565  1163  296A               	goto	u2875
 10566  1164  0872               	movf	___lldiv@divisor+1,w
 10567  1165  0276               	subwf	___lldiv@dividend+1,w
 10568  1166  1D03               	skipz
 10569  1167  296A               	goto	u2875
 10570  1168  0871               	movf	___lldiv@divisor,w
 10571  1169  0275               	subwf	___lldiv@dividend,w
 10572  116A                     u2875:	
 10573  116A  1C03               	skipc
 10574  116B  2975               	goto	l3989
 10575  116C  0871               	movf	___lldiv@divisor,w
 10576  116D  02F5               	subwf	___lldiv@dividend,f
 10577  116E  0872               	movf	___lldiv@divisor+1,w
 10578  116F  3BF6               	subwfb	___lldiv@dividend+1,f
 10579  1170  0873               	movf	___lldiv@divisor+2,w
 10580  1171  3BF7               	subwfb	___lldiv@dividend+2,f
 10581  1172  0874               	movf	___lldiv@divisor+3,w
 10582  1173  3BF8               	subwfb	___lldiv@dividend+3,f
 10583  1174  1420               	bsf	___lldiv@quotient,0
 10584  1175                     l3989:	
 10585  1175  3001               	movlw	1
 10586  1176                     u2885:	
 10587  1176  36F4               	lsrf	___lldiv@divisor+3,f
 10588  1177  0CF3               	rrf	___lldiv@divisor+2,f
 10589  1178  0CF2               	rrf	___lldiv@divisor+1,f
 10590  1179  0CF1               	rrf	___lldiv@divisor,f
 10591  117A  0B89               	decfsz	9,f
 10592  117B  2976               	goto	u2885
 10593  117C  3001               	movlw	1
 10594  117D  02A4               	subwf	___lldiv@counter,f
 10595  117E  1D03               	btfss	3,2
 10596  117F  2955               	goto	l3981
 10597  1180                     l3993:	
 10598  1180  0823               	movf	___lldiv@quotient+3,w
 10599  1181  00F4               	movwf	?___lldiv+3
 10600  1182  0822               	movf	___lldiv@quotient+2,w
 10601  1183  00F3               	movwf	?___lldiv+2
 10602  1184  0821               	movf	___lldiv@quotient+1,w
 10603  1185  00F2               	movwf	?___lldiv+1
 10604  1186  0820               	movf	___lldiv@quotient,w
 10605  1187  00F1               	movwf	?___lldiv
 10606  1188  0008               	return
 10607  1189                     __end_of___lldiv:	
 10608                           
 10609                           	psect	text32
 10610  08E4                     __ptext32:	
 10611 ;; *************** function _calc_expect_vout_adc_value *****************
 10612 ;; Defined at:
 10613 ;;		line 464 in file "src/api/sample.c"
 10614 ;; Parameters:    Size  Location     Type
 10615 ;;  x               2   18[BANK0 ] unsigned int 
 10616 ;; Auto vars:     Size  Location     Type
 10617 ;;  t32             4   34[BANK0 ] long 
 10618 ;;  i               1   38[BANK0 ] unsigned char 
 10619 ;; Return value:  Size  Location     Type
 10620 ;;                  2   18[BANK0 ] unsigned int 
 10621 ;; Registers used:
 10622 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10623 ;; Tracked objects:
 10624 ;;		On entry : 0/0
 10625 ;;		On exit  : 0/0
 10626 ;;		Unchanged: 0/0
 10627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10628 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10629 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10630 ;;      Temps:          0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10631 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10632 ;;Total ram usage:       21 bytes
 10633 ;; Hardware stack levels used:    1
 10634 ;; Hardware stack levels required when called:    2
 10635 ;; This function calls:
 10636 ;;		___aldiv
 10637 ;;		___lmul
 10638 ;; This function is called by:
 10639 ;;		_main
 10640 ;; This function uses a non-reentrant model
 10641 ;;
 10642                           
 10643                           
 10644                           ;psect for function _calc_expect_vout_adc_value
 10645  08E4                     _calc_expect_vout_adc_value:	
 10646                           
 10647                           ;sample.c: 467: uint8_t i;;sample.c: 468: int32_t t32;;sample.c: 471: for (i = 0; i < 30
      +                          -1; i++) {
 10648                           
 10649                           ;incstack = 0
 10650                           ; Regs used in _calc_expect_vout_adc_value: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 10651  08E4  0020               	movlb	0	; select bank0
 10652  08E5  01C6               	clrf	calc_expect_vout_adc_value@i
 10653  08E6  301D               	movlw	29
 10654  08E7  0246               	subwf	calc_expect_vout_adc_value@i,w
 10655  08E8  1803               	btfsc	3,0
 10656  08E9  2947               	goto	l5181
 10657  08EA                     l5171:	
 10658                           
 10659                           ;sample.c: 472: if(sysData.calibRsAdc[i]<sysData.calibRsAdc[i+1]){
 10660  08EA  0846               	movf	calc_expect_vout_adc_value@i,w
 10661  08EB  00B4               	movwf	??_calc_expect_vout_adc_value
 10662  08EC  01B5               	clrf	??_calc_expect_vout_adc_value+1
 10663  08ED  35B4               	lslf	??_calc_expect_vout_adc_value,f
 10664  08EE  0DB5               	rlf	??_calc_expect_vout_adc_value+1,f
 10665  08EF  0834               	movf	??_calc_expect_vout_adc_value,w
 10666  08F0  3E02               	addlw	2
 10667  08F1  00B6               	movwf	??_calc_expect_vout_adc_value+2
 10668  08F2  3000               	movlw	0
 10669  08F3  3D35               	addwfc	??_calc_expect_vout_adc_value+1,w
 10670  08F4  00B7               	movwf	??_calc_expect_vout_adc_value+3
 10671  08F5  3066               	movlw	102
 10672  08F6  00B8               	movwf	??_calc_expect_vout_adc_value+4
 10673  08F7  3023               	movlw	35
 10674  08F8  00B9               	movwf	??_calc_expect_vout_adc_value+5
 10675  08F9  0836               	movf	??_calc_expect_vout_adc_value+2,w
 10676  08FA  0738               	addwf	??_calc_expect_vout_adc_value+4,w
 10677  08FB  0086               	movwf	6
 10678  08FC  0837               	movf	??_calc_expect_vout_adc_value+3,w
 10679  08FD  3D39               	addwfc	??_calc_expect_vout_adc_value+5,w
 10680  08FE  0087               	movwf	7
 10681  08FF  3F40               	moviw [0]fsr1
 10682  0900  00BA               	movwf	??_calc_expect_vout_adc_value+6
 10683  0901  3F41               	moviw [1]fsr1
 10684  0902  00BB               	movwf	??_calc_expect_vout_adc_value+7
 10685  0903  0846               	movf	calc_expect_vout_adc_value@i,w
 10686  0904  00BC               	movwf	??_calc_expect_vout_adc_value+8
 10687  0905  01BD               	clrf	??_calc_expect_vout_adc_value+9
 10688  0906  35BC               	lslf	??_calc_expect_vout_adc_value+8,f
 10689  0907  0DBD               	rlf	??_calc_expect_vout_adc_value+9,f
 10690  0908  3066               	movlw	102
 10691  0909  00BE               	movwf	??_calc_expect_vout_adc_value+10
 10692  090A  3023               	movlw	35
 10693  090B  00BF               	movwf	??_calc_expect_vout_adc_value+11
 10694  090C  083C               	movf	??_calc_expect_vout_adc_value+8,w
 10695  090D  073E               	addwf	??_calc_expect_vout_adc_value+10,w
 10696  090E  0086               	movwf	6
 10697  090F  083D               	movf	??_calc_expect_vout_adc_value+9,w
 10698  0910  3D3F               	addwfc	??_calc_expect_vout_adc_value+11,w
 10699  0911  0087               	movwf	7
 10700  0912  3F40               	moviw [0]fsr1
 10701  0913  00C0               	movwf	??_calc_expect_vout_adc_value+12
 10702  0914  3F41               	moviw [1]fsr1
 10703  0915  00C1               	movwf	??_calc_expect_vout_adc_value+13
 10704  0916  083B               	movf	??_calc_expect_vout_adc_value+7,w
 10705  0917  0241               	subwf	??_calc_expect_vout_adc_value+13,w
 10706  0918  1D03               	skipz
 10707  0919  291C               	goto	u4695
 10708  091A  083A               	movf	??_calc_expect_vout_adc_value+6,w
 10709  091B  0240               	subwf	??_calc_expect_vout_adc_value+12,w
 10710  091C                     u4695:	
 10711  091C  1803               	skipnc
 10712  091D  2947               	goto	l5181
 10713                           
 10714                           ;sample.c: 473: if (x <= sysData.calibRsAdc[i+1])break;
 10715  091E  0846               	movf	calc_expect_vout_adc_value@i,w
 10716  091F  00B4               	movwf	??_calc_expect_vout_adc_value
 10717  0920  01B5               	clrf	??_calc_expect_vout_adc_value+1
 10718  0921  35B4               	lslf	??_calc_expect_vout_adc_value,f
 10719  0922  0DB5               	rlf	??_calc_expect_vout_adc_value+1,f
 10720  0923  0834               	movf	??_calc_expect_vout_adc_value,w
 10721  0924  3E02               	addlw	2
 10722  0925  00B6               	movwf	??_calc_expect_vout_adc_value+2
 10723  0926  3000               	movlw	0
 10724  0927  3D35               	addwfc	??_calc_expect_vout_adc_value+1,w
 10725  0928  00B7               	movwf	??_calc_expect_vout_adc_value+3
 10726  0929  3066               	movlw	102
 10727  092A  00B8               	movwf	??_calc_expect_vout_adc_value+4
 10728  092B  3023               	movlw	35
 10729  092C  00B9               	movwf	??_calc_expect_vout_adc_value+5
 10730  092D  0836               	movf	??_calc_expect_vout_adc_value+2,w
 10731  092E  0738               	addwf	??_calc_expect_vout_adc_value+4,w
 10732  092F  0086               	movwf	6
 10733  0930  0837               	movf	??_calc_expect_vout_adc_value+3,w
 10734  0931  3D39               	addwfc	??_calc_expect_vout_adc_value+5,w
 10735  0932  0087               	movwf	7
 10736  0933  3F40               	moviw [0]fsr1
 10737  0934  00BA               	movwf	??_calc_expect_vout_adc_value+6
 10738  0935  3F41               	moviw [1]fsr1
 10739  0936  00BB               	movwf	??_calc_expect_vout_adc_value+7
 10740  0937  0833               	movf	calc_expect_vout_adc_value@x+1,w
 10741  0938  023B               	subwf	??_calc_expect_vout_adc_value+7,w
 10742  0939  1D03               	skipz
 10743  093A  293D               	goto	u4705
 10744  093B  0832               	movf	calc_expect_vout_adc_value@x,w
 10745  093C  023A               	subwf	??_calc_expect_vout_adc_value+6,w
 10746  093D                     u4705:	
 10747  093D  1803               	btfsc	3,0
 10748  093E  2947               	goto	l5181
 10749                           
 10750                           ;sample.c: 476: break;
 10751                           
 10752                           ;sample.c: 474: }else{
 10753  093F  3001               	movlw	1
 10754  0940  00B4               	movwf	??_calc_expect_vout_adc_value
 10755  0941  0834               	movf	??_calc_expect_vout_adc_value,w
 10756  0942  07C6               	addwf	calc_expect_vout_adc_value@i,f
 10757  0943  301D               	movlw	29
 10758  0944  0246               	subwf	calc_expect_vout_adc_value@i,w
 10759  0945  1C03               	skipc
 10760  0946  28EA               	goto	l5171
 10761  0947                     l5181:	
 10762                           
 10763                           ;sample.c: 477: };sample.c: 478: };sample.c: 480: if (i > 30-2)i=30-2;
 10764  0947  301D               	movlw	29
 10765  0948  0246               	subwf	calc_expect_vout_adc_value@i,w
 10766  0949  1C03               	skipc
 10767  094A  294F               	goto	l5185
 10768  094B  301C               	movlw	28
 10769  094C  00B4               	movwf	??_calc_expect_vout_adc_value
 10770  094D  0834               	movf	??_calc_expect_vout_adc_value,w
 10771  094E  00C6               	movwf	calc_expect_vout_adc_value@i
 10772  094F                     l5185:	
 10773                           
 10774                           ;sample.c: 481: y1=sysData.calibVoMV[i+1];
 10775  094F  0846               	movf	calc_expect_vout_adc_value@i,w
 10776  0950  00B4               	movwf	??_calc_expect_vout_adc_value
 10777  0951  01B5               	clrf	??_calc_expect_vout_adc_value+1
 10778  0952  35B4               	lslf	??_calc_expect_vout_adc_value,f
 10779  0953  0DB5               	rlf	??_calc_expect_vout_adc_value+1,f
 10780  0954  0834               	movf	??_calc_expect_vout_adc_value,w
 10781  0955  3E02               	addlw	2
 10782  0956  00B6               	movwf	??_calc_expect_vout_adc_value+2
 10783  0957  3000               	movlw	0
 10784  0958  3D35               	addwfc	??_calc_expect_vout_adc_value+1,w
 10785  0959  00B7               	movwf	??_calc_expect_vout_adc_value+3
 10786  095A  30A2               	movlw	162
 10787  095B  00B8               	movwf	??_calc_expect_vout_adc_value+4
 10788  095C  3023               	movlw	35
 10789  095D  00B9               	movwf	??_calc_expect_vout_adc_value+5
 10790  095E  0836               	movf	??_calc_expect_vout_adc_value+2,w
 10791  095F  0738               	addwf	??_calc_expect_vout_adc_value+4,w
 10792  0960  0086               	movwf	6
 10793  0961  0837               	movf	??_calc_expect_vout_adc_value+3,w
 10794  0962  3D39               	addwfc	??_calc_expect_vout_adc_value+5,w
 10795  0963  0087               	movwf	7
 10796  0964  3F40               	moviw [0]fsr1
 10797  0965  00BA               	movwf	??_calc_expect_vout_adc_value+6
 10798  0966  3F41               	moviw [1]fsr1
 10799  0967  00BB               	movwf	??_calc_expect_vout_adc_value+7
 10800  0968  083A               	movf	??_calc_expect_vout_adc_value+6,w
 10801  0969  0021               	movlb	1	; select bank1
 10802  096A  00C0               	movwf	_y1^(0+128)
 10803  096B  0020               	movlb	0	; select bank0
 10804  096C  083B               	movf	??_calc_expect_vout_adc_value+7,w
 10805  096D  0021               	movlb	1	; select bank1
 10806  096E  00C1               	movwf	(_y1^(0+128)+1)
 10807  096F  01C2               	clrf	(_y1^(0+128)+2)
 10808  0970  01C3               	clrf	(_y1^(0+128)+3)
 10809                           
 10810                           ;sample.c: 482: y0=sysData.calibVoMV[i];
 10811  0971  0020               	movlb	0	; select bank0
 10812  0972  0846               	movf	calc_expect_vout_adc_value@i,w
 10813  0973  00B4               	movwf	??_calc_expect_vout_adc_value
 10814  0974  01B5               	clrf	??_calc_expect_vout_adc_value+1
 10815  0975  35B4               	lslf	??_calc_expect_vout_adc_value,f
 10816  0976  0DB5               	rlf	??_calc_expect_vout_adc_value+1,f
 10817  0977  30A2               	movlw	162
 10818  0978  00B6               	movwf	??_calc_expect_vout_adc_value+2
 10819  0979  3023               	movlw	35
 10820  097A  00B7               	movwf	??_calc_expect_vout_adc_value+3
 10821  097B  0834               	movf	??_calc_expect_vout_adc_value,w
 10822  097C  0736               	addwf	??_calc_expect_vout_adc_value+2,w
 10823  097D  0086               	movwf	6
 10824  097E  0835               	movf	??_calc_expect_vout_adc_value+1,w
 10825  097F  3D37               	addwfc	??_calc_expect_vout_adc_value+3,w
 10826  0980  0087               	movwf	7
 10827  0981  3F40               	moviw [0]fsr1
 10828  0982  00B8               	movwf	??_calc_expect_vout_adc_value+4
 10829  0983  3F41               	moviw [1]fsr1
 10830  0984  00B9               	movwf	??_calc_expect_vout_adc_value+5
 10831  0985  0838               	movf	??_calc_expect_vout_adc_value+4,w
 10832  0986  00CF               	movwf	_y0
 10833  0987  0839               	movf	??_calc_expect_vout_adc_value+5,w
 10834  0988  00D0               	movwf	_y0+1
 10835  0989  01D1               	clrf	_y0+2
 10836  098A  01D2               	clrf	_y0+3
 10837                           
 10838                           ;sample.c: 485: x1=sysData.calibRsAdc[i+1];
 10839  098B  0846               	movf	calc_expect_vout_adc_value@i,w
 10840  098C  00B4               	movwf	??_calc_expect_vout_adc_value
 10841  098D  01B5               	clrf	??_calc_expect_vout_adc_value+1
 10842  098E  35B4               	lslf	??_calc_expect_vout_adc_value,f
 10843  098F  0DB5               	rlf	??_calc_expect_vout_adc_value+1,f
 10844  0990  0834               	movf	??_calc_expect_vout_adc_value,w
 10845  0991  3E02               	addlw	2
 10846  0992  00B6               	movwf	??_calc_expect_vout_adc_value+2
 10847  0993  3000               	movlw	0
 10848  0994  3D35               	addwfc	??_calc_expect_vout_adc_value+1,w
 10849  0995  00B7               	movwf	??_calc_expect_vout_adc_value+3
 10850  0996  3066               	movlw	102
 10851  0997  00B8               	movwf	??_calc_expect_vout_adc_value+4
 10852  0998  3023               	movlw	35
 10853  0999  00B9               	movwf	??_calc_expect_vout_adc_value+5
 10854  099A  0836               	movf	??_calc_expect_vout_adc_value+2,w
 10855  099B  0738               	addwf	??_calc_expect_vout_adc_value+4,w
 10856  099C  0086               	movwf	6
 10857  099D  0837               	movf	??_calc_expect_vout_adc_value+3,w
 10858  099E  3D39               	addwfc	??_calc_expect_vout_adc_value+5,w
 10859  099F  0087               	movwf	7
 10860  09A0  3F40               	moviw [0]fsr1
 10861  09A1  00BA               	movwf	??_calc_expect_vout_adc_value+6
 10862  09A2  3F41               	moviw [1]fsr1
 10863  09A3  00BB               	movwf	??_calc_expect_vout_adc_value+7
 10864  09A4  083A               	movf	??_calc_expect_vout_adc_value+6,w
 10865  09A5  0021               	movlb	1	; select bank1
 10866  09A6  00BC               	movwf	_x1^(0+128)
 10867  09A7  0020               	movlb	0	; select bank0
 10868  09A8  083B               	movf	??_calc_expect_vout_adc_value+7,w
 10869  09A9  0021               	movlb	1	; select bank1
 10870  09AA  00BD               	movwf	(_x1^(0+128)+1)
 10871  09AB  01BE               	clrf	(_x1^(0+128)+2)
 10872  09AC  01BF               	clrf	(_x1^(0+128)+3)
 10873                           
 10874                           ;sample.c: 486: x0=sysData.calibRsAdc[i];
 10875  09AD  0020               	movlb	0	; select bank0
 10876  09AE  0846               	movf	calc_expect_vout_adc_value@i,w
 10877  09AF  00B4               	movwf	??_calc_expect_vout_adc_value
 10878  09B0  01B5               	clrf	??_calc_expect_vout_adc_value+1
 10879  09B1  35B4               	lslf	??_calc_expect_vout_adc_value,f
 10880  09B2  0DB5               	rlf	??_calc_expect_vout_adc_value+1,f
 10881  09B3  3066               	movlw	102
 10882  09B4  00B6               	movwf	??_calc_expect_vout_adc_value+2
 10883  09B5  3023               	movlw	35
 10884  09B6  00B7               	movwf	??_calc_expect_vout_adc_value+3
 10885  09B7  0834               	movf	??_calc_expect_vout_adc_value,w
 10886  09B8  0736               	addwf	??_calc_expect_vout_adc_value+2,w
 10887  09B9  0086               	movwf	6
 10888  09BA  0835               	movf	??_calc_expect_vout_adc_value+1,w
 10889  09BB  3D37               	addwfc	??_calc_expect_vout_adc_value+3,w
 10890  09BC  0087               	movwf	7
 10891  09BD  3F40               	moviw [0]fsr1
 10892  09BE  00B8               	movwf	??_calc_expect_vout_adc_value+4
 10893  09BF  3F41               	moviw [1]fsr1
 10894  09C0  00B9               	movwf	??_calc_expect_vout_adc_value+5
 10895  09C1  0838               	movf	??_calc_expect_vout_adc_value+4,w
 10896  09C2  00CB               	movwf	_x0
 10897  09C3  0839               	movf	??_calc_expect_vout_adc_value+5,w
 10898  09C4  00CC               	movwf	_x0+1
 10899  09C5  01CD               	clrf	_x0+2
 10900  09C6  01CE               	clrf	_x0+3
 10901                           
 10902                           ;sample.c: 488: if(x<=x0 && i==0)return (uint16_t)y0;
 10903  09C7  0832               	movf	calc_expect_vout_adc_value@x,w
 10904  09C8  00B4               	movwf	??_calc_expect_vout_adc_value
 10905  09C9  0833               	movf	calc_expect_vout_adc_value@x+1,w
 10906  09CA  00B5               	movwf	??_calc_expect_vout_adc_value+1
 10907  09CB  01B6               	clrf	??_calc_expect_vout_adc_value+2
 10908  09CC  01B7               	clrf	??_calc_expect_vout_adc_value+3
 10909  09CD  084E               	movf	_x0+3,w
 10910  09CE  3A80               	xorlw	128
 10911  09CF  00B8               	movwf	??_calc_expect_vout_adc_value+4
 10912  09D0  0837               	movf	??_calc_expect_vout_adc_value+3,w
 10913  09D1  3A80               	xorlw	128
 10914  09D2  0238               	subwf	??_calc_expect_vout_adc_value+4,w
 10915  09D3  1D03               	skipz
 10916  09D4  29DF               	goto	u4733
 10917  09D5  0836               	movf	??_calc_expect_vout_adc_value+2,w
 10918  09D6  024D               	subwf	_x0+2,w
 10919  09D7  1D03               	skipz
 10920  09D8  29DF               	goto	u4733
 10921  09D9  0835               	movf	??_calc_expect_vout_adc_value+1,w
 10922  09DA  024C               	subwf	_x0+1,w
 10923  09DB  1D03               	skipz
 10924  09DC  29DF               	goto	u4733
 10925  09DD  0834               	movf	??_calc_expect_vout_adc_value,w
 10926  09DE  024B               	subwf	_x0,w
 10927  09DF                     u4733:	
 10928  09DF  1C03               	skipc
 10929  09E0  29E9               	goto	l5199
 10930  09E1  0846               	movf	calc_expect_vout_adc_value@i,w
 10931  09E2  1D03               	btfss	3,2
 10932  09E3  29E9               	goto	l5199
 10933  09E4  0850               	movf	_y0+1,w
 10934  09E5  00B3               	movwf	?_calc_expect_vout_adc_value+1
 10935  09E6  084F               	movf	_y0,w
 10936  09E7  00B2               	movwf	?_calc_expect_vout_adc_value
 10937  09E8  0008               	return
 10938  09E9                     l5199:	
 10939                           
 10940                           ;sample.c: 489: if(x1<=x0)return (uint16_t)y0;
 10941  09E9  084E               	movf	_x0+3,w
 10942  09EA  3A80               	xorlw	128
 10943  09EB  00B4               	movwf	??_calc_expect_vout_adc_value
 10944  09EC  0021               	movlb	1	; select bank1
 10945  09ED  083F               	movf	(_x1+3)^(0+128),w
 10946  09EE  3A80               	xorlw	128
 10947  09EF  0020               	movlb	0	; select bank0
 10948  09F0  0234               	subwf	??_calc_expect_vout_adc_value,w
 10949  09F1  1D03               	skipz
 10950  09F2  2A03               	goto	u4753
 10951  09F3  0021               	movlb	1	; select bank1
 10952  09F4  083E               	movf	(_x1+2)^(0+128),w
 10953  09F5  0020               	movlb	0	; select bank0
 10954  09F6  024D               	subwf	_x0+2,w
 10955  09F7  1D03               	skipz
 10956  09F8  2A03               	goto	u4753
 10957  09F9  0021               	movlb	1	; select bank1
 10958  09FA  083D               	movf	(_x1+1)^(0+128),w
 10959  09FB  0020               	movlb	0	; select bank0
 10960  09FC  024C               	subwf	_x0+1,w
 10961  09FD  1D03               	skipz
 10962  09FE  2A03               	goto	u4753
 10963  09FF  0021               	movlb	1	; select bank1
 10964  0A00  083C               	movf	_x1^(0+128),w
 10965  0A01  0020               	movlb	0	; select bank0
 10966  0A02  024B               	subwf	_x0,w
 10967  0A03                     u4753:	
 10968  0A03  1C03               	skipc
 10969  0A04  2A0A               	goto	l5205
 10970  0A05  0850               	movf	_y0+1,w
 10971  0A06  00B3               	movwf	?_calc_expect_vout_adc_value+1
 10972  0A07  084F               	movf	_y0,w
 10973  0A08  00B2               	movwf	?_calc_expect_vout_adc_value
 10974  0A09  0008               	return
 10975  0A0A                     l5205:	
 10976                           
 10977                           ;sample.c: 492: t32=(x-x0);
 10978  0A0A  094B               	comf	_x0,w
 10979  0A0B  00B4               	movwf	??_calc_expect_vout_adc_value
 10980  0A0C  094C               	comf	_x0+1,w
 10981  0A0D  00B5               	movwf	??_calc_expect_vout_adc_value+1
 10982  0A0E  094D               	comf	_x0+2,w
 10983  0A0F  00B6               	movwf	??_calc_expect_vout_adc_value+2
 10984  0A10  094E               	comf	_x0+3,w
 10985  0A11  00B7               	movwf	??_calc_expect_vout_adc_value+3
 10986  0A12  0AB4               	incf	??_calc_expect_vout_adc_value,f
 10987  0A13  1903               	skipnz
 10988  0A14  0AB5               	incf	??_calc_expect_vout_adc_value+1,f
 10989  0A15  1903               	skipnz
 10990  0A16  0AB6               	incf	??_calc_expect_vout_adc_value+2,f
 10991  0A17  1903               	skipnz
 10992  0A18  0AB7               	incf	??_calc_expect_vout_adc_value+3,f
 10993  0A19  0832               	movf	calc_expect_vout_adc_value@x,w
 10994  0A1A  00B8               	movwf	??_calc_expect_vout_adc_value+4
 10995  0A1B  0833               	movf	calc_expect_vout_adc_value@x+1,w
 10996  0A1C  00B9               	movwf	??_calc_expect_vout_adc_value+5
 10997  0A1D  01BA               	clrf	??_calc_expect_vout_adc_value+6
 10998  0A1E  01BB               	clrf	??_calc_expect_vout_adc_value+7
 10999  0A1F  0838               	movf	??_calc_expect_vout_adc_value+4,w
 11000  0A20  07B4               	addwf	??_calc_expect_vout_adc_value,f
 11001  0A21  0839               	movf	??_calc_expect_vout_adc_value+5,w
 11002  0A22  3DB5               	addwfc	??_calc_expect_vout_adc_value+1,f
 11003  0A23  083A               	movf	??_calc_expect_vout_adc_value+6,w
 11004  0A24  3DB6               	addwfc	??_calc_expect_vout_adc_value+2,f
 11005  0A25  083B               	movf	??_calc_expect_vout_adc_value+7,w
 11006  0A26  3DB7               	addwfc	??_calc_expect_vout_adc_value+3,f
 11007  0A27  0837               	movf	??_calc_expect_vout_adc_value+3,w
 11008  0A28  00C5               	movwf	calc_expect_vout_adc_value@t32+3
 11009  0A29  0836               	movf	??_calc_expect_vout_adc_value+2,w
 11010  0A2A  00C4               	movwf	calc_expect_vout_adc_value@t32+2
 11011  0A2B  0835               	movf	??_calc_expect_vout_adc_value+1,w
 11012  0A2C  00C3               	movwf	calc_expect_vout_adc_value@t32+1
 11013  0A2D  0834               	movf	??_calc_expect_vout_adc_value,w
 11014  0A2E  00C2               	movwf	calc_expect_vout_adc_value@t32
 11015                           
 11016                           ;sample.c: 493: t32=t32*(y1-y0);
 11017  0A2F  0021               	movlb	1	; select bank1
 11018  0A30  0840               	movf	_y1^(0+128),w
 11019  0A31  0020               	movlb	0	; select bank0
 11020  0A32  00B4               	movwf	??_calc_expect_vout_adc_value
 11021  0A33  0021               	movlb	1	; select bank1
 11022  0A34  0841               	movf	(_y1+1)^(0+128),w
 11023  0A35  0020               	movlb	0	; select bank0
 11024  0A36  00B5               	movwf	??_calc_expect_vout_adc_value+1
 11025  0A37  0021               	movlb	1	; select bank1
 11026  0A38  0842               	movf	(_y1+2)^(0+128),w
 11027  0A39  0020               	movlb	0	; select bank0
 11028  0A3A  00B6               	movwf	??_calc_expect_vout_adc_value+2
 11029  0A3B  0021               	movlb	1	; select bank1
 11030  0A3C  0843               	movf	(_y1+3)^(0+128),w
 11031  0A3D  0020               	movlb	0	; select bank0
 11032  0A3E  00B7               	movwf	??_calc_expect_vout_adc_value+3
 11033  0A3F  094F               	comf	_y0,w
 11034  0A40  00B8               	movwf	??_calc_expect_vout_adc_value+4
 11035  0A41  0950               	comf	_y0+1,w
 11036  0A42  00B9               	movwf	??_calc_expect_vout_adc_value+5
 11037  0A43  0951               	comf	_y0+2,w
 11038  0A44  00BA               	movwf	??_calc_expect_vout_adc_value+6
 11039  0A45  0952               	comf	_y0+3,w
 11040  0A46  00BB               	movwf	??_calc_expect_vout_adc_value+7
 11041  0A47  0AB8               	incf	??_calc_expect_vout_adc_value+4,f
 11042  0A48  1903               	skipnz
 11043  0A49  0AB9               	incf	??_calc_expect_vout_adc_value+5,f
 11044  0A4A  1903               	skipnz
 11045  0A4B  0ABA               	incf	??_calc_expect_vout_adc_value+6,f
 11046  0A4C  1903               	skipnz
 11047  0A4D  0ABB               	incf	??_calc_expect_vout_adc_value+7,f
 11048  0A4E  0838               	movf	??_calc_expect_vout_adc_value+4,w
 11049  0A4F  07B4               	addwf	??_calc_expect_vout_adc_value,f
 11050  0A50  0839               	movf	??_calc_expect_vout_adc_value+5,w
 11051  0A51  3DB5               	addwfc	??_calc_expect_vout_adc_value+1,f
 11052  0A52  083A               	movf	??_calc_expect_vout_adc_value+6,w
 11053  0A53  3DB6               	addwfc	??_calc_expect_vout_adc_value+2,f
 11054  0A54  083B               	movf	??_calc_expect_vout_adc_value+7,w
 11055  0A55  3DB7               	addwfc	??_calc_expect_vout_adc_value+3,f
 11056  0A56  0837               	movf	??_calc_expect_vout_adc_value+3,w
 11057  0A57  00F4               	movwf	___lmul@multiplier+3
 11058  0A58  0836               	movf	??_calc_expect_vout_adc_value+2,w
 11059  0A59  00F3               	movwf	___lmul@multiplier+2
 11060  0A5A  0835               	movf	??_calc_expect_vout_adc_value+1,w
 11061  0A5B  00F2               	movwf	___lmul@multiplier+1
 11062  0A5C  0834               	movf	??_calc_expect_vout_adc_value,w
 11063  0A5D  00F1               	movwf	___lmul@multiplier
 11064  0A5E  0845               	movf	calc_expect_vout_adc_value@t32+3,w
 11065  0A5F  00F8               	movwf	___lmul@multiplicand+3
 11066  0A60  0844               	movf	calc_expect_vout_adc_value@t32+2,w
 11067  0A61  00F7               	movwf	___lmul@multiplicand+2
 11068  0A62  0843               	movf	calc_expect_vout_adc_value@t32+1,w
 11069  0A63  00F6               	movwf	___lmul@multiplicand+1
 11070  0A64  0842               	movf	calc_expect_vout_adc_value@t32,w
 11071  0A65  00F5               	movwf	___lmul@multiplicand
 11072  0A66  319E  262D  3188   	fcall	___lmul
 11073  0A69  0874               	movf	?___lmul+3,w
 11074  0A6A  0020               	movlb	0	; select bank0
 11075  0A6B  00C5               	movwf	calc_expect_vout_adc_value@t32+3
 11076  0A6C  0873               	movf	?___lmul+2,w
 11077  0A6D  00C4               	movwf	calc_expect_vout_adc_value@t32+2
 11078  0A6E  0872               	movf	?___lmul+1,w
 11079  0A6F  00C3               	movwf	calc_expect_vout_adc_value@t32+1
 11080  0A70  0871               	movf	?___lmul,w
 11081  0A71  00C2               	movwf	calc_expect_vout_adc_value@t32
 11082                           
 11083                           ;sample.c: 494: t32=t32/(x1-x0);
 11084  0A72  0021               	movlb	1	; select bank1
 11085  0A73  083C               	movf	_x1^(0+128),w
 11086  0A74  0020               	movlb	0	; select bank0
 11087  0A75  00B4               	movwf	??_calc_expect_vout_adc_value
 11088  0A76  0021               	movlb	1	; select bank1
 11089  0A77  083D               	movf	(_x1+1)^(0+128),w
 11090  0A78  0020               	movlb	0	; select bank0
 11091  0A79  00B5               	movwf	??_calc_expect_vout_adc_value+1
 11092  0A7A  0021               	movlb	1	; select bank1
 11093  0A7B  083E               	movf	(_x1+2)^(0+128),w
 11094  0A7C  0020               	movlb	0	; select bank0
 11095  0A7D  00B6               	movwf	??_calc_expect_vout_adc_value+2
 11096  0A7E  0021               	movlb	1	; select bank1
 11097  0A7F  083F               	movf	(_x1+3)^(0+128),w
 11098  0A80  0020               	movlb	0	; select bank0
 11099  0A81  00B7               	movwf	??_calc_expect_vout_adc_value+3
 11100  0A82  094B               	comf	_x0,w
 11101  0A83  00B8               	movwf	??_calc_expect_vout_adc_value+4
 11102  0A84  094C               	comf	_x0+1,w
 11103  0A85  00B9               	movwf	??_calc_expect_vout_adc_value+5
 11104  0A86  094D               	comf	_x0+2,w
 11105  0A87  00BA               	movwf	??_calc_expect_vout_adc_value+6
 11106  0A88  094E               	comf	_x0+3,w
 11107  0A89  00BB               	movwf	??_calc_expect_vout_adc_value+7
 11108  0A8A  0AB8               	incf	??_calc_expect_vout_adc_value+4,f
 11109  0A8B  1903               	skipnz
 11110  0A8C  0AB9               	incf	??_calc_expect_vout_adc_value+5,f
 11111  0A8D  1903               	skipnz
 11112  0A8E  0ABA               	incf	??_calc_expect_vout_adc_value+6,f
 11113  0A8F  1903               	skipnz
 11114  0A90  0ABB               	incf	??_calc_expect_vout_adc_value+7,f
 11115  0A91  0838               	movf	??_calc_expect_vout_adc_value+4,w
 11116  0A92  07B4               	addwf	??_calc_expect_vout_adc_value,f
 11117  0A93  0839               	movf	??_calc_expect_vout_adc_value+5,w
 11118  0A94  3DB5               	addwfc	??_calc_expect_vout_adc_value+1,f
 11119  0A95  083A               	movf	??_calc_expect_vout_adc_value+6,w
 11120  0A96  3DB6               	addwfc	??_calc_expect_vout_adc_value+2,f
 11121  0A97  083B               	movf	??_calc_expect_vout_adc_value+7,w
 11122  0A98  3DB7               	addwfc	??_calc_expect_vout_adc_value+3,f
 11123  0A99  0837               	movf	??_calc_expect_vout_adc_value+3,w
 11124  0A9A  00A7               	movwf	___aldiv@divisor+3
 11125  0A9B  0836               	movf	??_calc_expect_vout_adc_value+2,w
 11126  0A9C  00A6               	movwf	___aldiv@divisor+2
 11127  0A9D  0835               	movf	??_calc_expect_vout_adc_value+1,w
 11128  0A9E  00A5               	movwf	___aldiv@divisor+1
 11129  0A9F  0834               	movf	??_calc_expect_vout_adc_value,w
 11130  0AA0  00A4               	movwf	___aldiv@divisor
 11131  0AA1  0845               	movf	calc_expect_vout_adc_value@t32+3,w
 11132  0AA2  00AB               	movwf	___aldiv@dividend+3
 11133  0AA3  0844               	movf	calc_expect_vout_adc_value@t32+2,w
 11134  0AA4  00AA               	movwf	___aldiv@dividend+2
 11135  0AA5  0843               	movf	calc_expect_vout_adc_value@t32+1,w
 11136  0AA6  00A9               	movwf	___aldiv@dividend+1
 11137  0AA7  0842               	movf	calc_expect_vout_adc_value@t32,w
 11138  0AA8  00A8               	movwf	___aldiv@dividend
 11139  0AA9  3193  2363  3188   	fcall	___aldiv
 11140  0AAC  0020               	movlb	0	; select bank0
 11141  0AAD  0827               	movf	?___aldiv+3,w
 11142  0AAE  00C5               	movwf	calc_expect_vout_adc_value@t32+3
 11143  0AAF  0826               	movf	?___aldiv+2,w
 11144  0AB0  00C4               	movwf	calc_expect_vout_adc_value@t32+2
 11145  0AB1  0825               	movf	?___aldiv+1,w
 11146  0AB2  00C3               	movwf	calc_expect_vout_adc_value@t32+1
 11147  0AB3  0824               	movf	?___aldiv,w
 11148  0AB4  00C2               	movwf	calc_expect_vout_adc_value@t32
 11149                           
 11150                           ;sample.c: 495: t32=t32+y0;
 11151  0AB5  0842               	movf	calc_expect_vout_adc_value@t32,w
 11152  0AB6  074F               	addwf	_y0,w
 11153  0AB7  00B4               	movwf	??_calc_expect_vout_adc_value
 11154  0AB8  0843               	movf	calc_expect_vout_adc_value@t32+1,w
 11155  0AB9  3D50               	addwfc	_y0+1,w
 11156  0ABA  00B5               	movwf	??_calc_expect_vout_adc_value+1
 11157  0ABB  0844               	movf	calc_expect_vout_adc_value@t32+2,w
 11158  0ABC  3D51               	addwfc	_y0+2,w
 11159  0ABD  00B6               	movwf	??_calc_expect_vout_adc_value+2
 11160  0ABE  0845               	movf	calc_expect_vout_adc_value@t32+3,w
 11161  0ABF  3D52               	addwfc	_y0+3,w
 11162  0AC0  00B7               	movwf	??_calc_expect_vout_adc_value+3
 11163  0AC1  0837               	movf	??_calc_expect_vout_adc_value+3,w
 11164  0AC2  00C5               	movwf	calc_expect_vout_adc_value@t32+3
 11165  0AC3  0836               	movf	??_calc_expect_vout_adc_value+2,w
 11166  0AC4  00C4               	movwf	calc_expect_vout_adc_value@t32+2
 11167  0AC5  0835               	movf	??_calc_expect_vout_adc_value+1,w
 11168  0AC6  00C3               	movwf	calc_expect_vout_adc_value@t32+1
 11169  0AC7  0834               	movf	??_calc_expect_vout_adc_value,w
 11170  0AC8  00C2               	movwf	calc_expect_vout_adc_value@t32
 11171                           
 11172                           ;sample.c: 496: if(t32<0)t32=0;
 11173  0AC9  1FC5               	btfss	calc_expect_vout_adc_value@t32+3,7
 11174  0ACA  2AD3               	goto	l689
 11175  0ACB  3000               	movlw	0
 11176  0ACC  00C5               	movwf	calc_expect_vout_adc_value@t32+3
 11177  0ACD  3000               	movlw	0
 11178  0ACE  00C4               	movwf	calc_expect_vout_adc_value@t32+2
 11179  0ACF  3000               	movlw	0
 11180  0AD0  00C3               	movwf	calc_expect_vout_adc_value@t32+1
 11181  0AD1  3000               	movlw	0
 11182  0AD2  00C2               	movwf	calc_expect_vout_adc_value@t32
 11183  0AD3                     l689:	
 11184                           
 11185                           ;sample.c: 497: return (uint16_t)t32;
 11186  0AD3  0843               	movf	calc_expect_vout_adc_value@t32+1,w
 11187  0AD4  00B3               	movwf	?_calc_expect_vout_adc_value+1
 11188  0AD5  0842               	movf	calc_expect_vout_adc_value@t32,w
 11189  0AD6  00B2               	movwf	?_calc_expect_vout_adc_value
 11190  0AD7  0008               	return
 11191  0AD8                     __end_of_calc_expect_vout_adc_value:	
 11192                           
 11193                           	psect	text33
 11194  1E2D                     __ptext33:	
 11195 ;; *************** function ___lmul *****************
 11196 ;; Defined at:
 11197 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul32.c"
 11198 ;; Parameters:    Size  Location     Type
 11199 ;;  multiplier      4    1[COMMON] unsigned long 
 11200 ;;  multiplicand    4    5[COMMON] unsigned long 
 11201 ;; Auto vars:     Size  Location     Type
 11202 ;;  product         4    0[BANK0 ] unsigned long 
 11203 ;; Return value:  Size  Location     Type
 11204 ;;                  4    1[COMMON] unsigned long 
 11205 ;; Registers used:
 11206 ;;		wreg, status,2, status,0
 11207 ;; Tracked objects:
 11208 ;;		On entry : 0/0
 11209 ;;		On exit  : 0/0
 11210 ;;		Unchanged: 0/0
 11211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11212 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11213 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11215 ;;      Totals:         8       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11216 ;;Total ram usage:       12 bytes
 11217 ;; Hardware stack levels used:    1
 11218 ;; Hardware stack levels required when called:    1
 11219 ;; This function calls:
 11220 ;;		Nothing
 11221 ;; This function is called by:
 11222 ;;		_calc_temp_rs
 11223 ;;		_calc_temp_rc
 11224 ;;		_pid_pwm1_idrv_run
 11225 ;;		_calc_expect_vout_adc_value
 11226 ;;		_cal_rs_simulate_power
 11227 ;;		_m_math_pow
 11228 ;; This function uses a non-reentrant model
 11229 ;;
 11230                           
 11231                           
 11232                           ;psect for function ___lmul
 11233  1E2D                     ___lmul:	
 11234                           
 11235                           ;incstack = 0
 11236                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 11237  1E2D  3000               	movlw	0
 11238  1E2E  0020               	movlb	0	; select bank0
 11239  1E2F  00A3               	movwf	___lmul@product+3
 11240  1E30  3000               	movlw	0
 11241  1E31  00A2               	movwf	___lmul@product+2
 11242  1E32  3000               	movlw	0
 11243  1E33  00A1               	movwf	___lmul@product+1
 11244  1E34  3000               	movlw	0
 11245  1E35  00A0               	movwf	___lmul@product
 11246  1E36                     l5021:	
 11247  1E36  1C71               	btfss	___lmul@multiplier,0
 11248  1E37  2E41               	goto	l5025
 11249  1E38  0875               	movf	___lmul@multiplicand,w
 11250  1E39  0020               	movlb	0	; select bank0
 11251  1E3A  07A0               	addwf	___lmul@product,f
 11252  1E3B  0876               	movf	___lmul@multiplicand+1,w
 11253  1E3C  3DA1               	addwfc	___lmul@product+1,f
 11254  1E3D  0877               	movf	___lmul@multiplicand+2,w
 11255  1E3E  3DA2               	addwfc	___lmul@product+2,f
 11256  1E3F  0878               	movf	___lmul@multiplicand+3,w
 11257  1E40  3DA3               	addwfc	___lmul@product+3,f
 11258  1E41                     l5025:	
 11259  1E41  3001               	movlw	1
 11260  1E42                     u4445:	
 11261  1E42  35F5               	lslf	___lmul@multiplicand,f
 11262  1E43  0DF6               	rlf	___lmul@multiplicand+1,f
 11263  1E44  0DF7               	rlf	___lmul@multiplicand+2,f
 11264  1E45  0DF8               	rlf	___lmul@multiplicand+3,f
 11265  1E46  0B89               	decfsz	9,f
 11266  1E47  2E42               	goto	u4445
 11267  1E48  3001               	movlw	1
 11268  1E49                     u4455:	
 11269  1E49  36F4               	lsrf	___lmul@multiplier+3,f
 11270  1E4A  0CF3               	rrf	___lmul@multiplier+2,f
 11271  1E4B  0CF2               	rrf	___lmul@multiplier+1,f
 11272  1E4C  0CF1               	rrf	___lmul@multiplier,f
 11273  1E4D  0B89               	decfsz	9,f
 11274  1E4E  2E49               	goto	u4455
 11275  1E4F  0874               	movf	___lmul@multiplier+3,w
 11276  1E50  0473               	iorwf	___lmul@multiplier+2,w
 11277  1E51  0472               	iorwf	___lmul@multiplier+1,w
 11278  1E52  0471               	iorwf	___lmul@multiplier,w
 11279  1E53  1D03               	skipz
 11280  1E54  2E36               	goto	l5021
 11281  1E55  0020               	movlb	0	; select bank0
 11282  1E56  0823               	movf	___lmul@product+3,w
 11283  1E57  00F4               	movwf	?___lmul+3
 11284  1E58  0822               	movf	___lmul@product+2,w
 11285  1E59  00F3               	movwf	?___lmul+2
 11286  1E5A  0821               	movf	___lmul@product+1,w
 11287  1E5B  00F2               	movwf	?___lmul+1
 11288  1E5C  0820               	movf	___lmul@product,w
 11289  1E5D  00F1               	movwf	?___lmul
 11290  1E5E  0008               	return
 11291  1E5F                     __end_of___lmul:	
 11292                           
 11293                           	psect	text34
 11294  1363                     __ptext34:	
 11295 ;; *************** function ___aldiv *****************
 11296 ;; Defined at:
 11297 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\aldiv.c"
 11298 ;; Parameters:    Size  Location     Type
 11299 ;;  divisor         4    4[BANK0 ] long 
 11300 ;;  dividend        4    8[BANK0 ] long 
 11301 ;; Auto vars:     Size  Location     Type
 11302 ;;  quotient        4   14[BANK0 ] long 
 11303 ;;  sign            1   13[BANK0 ] unsigned char 
 11304 ;;  counter         1   12[BANK0 ] unsigned char 
 11305 ;; Return value:  Size  Location     Type
 11306 ;;                  4    4[BANK0 ] long 
 11307 ;; Registers used:
 11308 ;;		wreg, status,2, status,0
 11309 ;; Tracked objects:
 11310 ;;		On entry : 0/0
 11311 ;;		On exit  : 0/0
 11312 ;;		Unchanged: 0/0
 11313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11314 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11315 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11316 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11317 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11318 ;;Total ram usage:       15 bytes
 11319 ;; Hardware stack levels used:    1
 11320 ;; Hardware stack levels required when called:    1
 11321 ;; This function calls:
 11322 ;;		Nothing
 11323 ;; This function is called by:
 11324 ;;		_pid_pwm1_idrv_run
 11325 ;;		_calc_expect_vout_adc_value
 11326 ;;		_m_int_2_str
 11327 ;;		_m_int_2_str_ex
 11328 ;; This function uses a non-reentrant model
 11329 ;;
 11330                           
 11331                           
 11332                           ;psect for function ___aldiv
 11333  1363                     ___aldiv:	
 11334                           
 11335                           ;incstack = 0
 11336                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 11337  1363  0020               	movlb	0	; select bank0
 11338  1364  01AD               	clrf	___aldiv@sign
 11339  1365  1FA7               	btfss	___aldiv@divisor+3,7
 11340  1366  2B74               	goto	l1157
 11341  1367  09A4               	comf	___aldiv@divisor,f
 11342  1368  09A5               	comf	___aldiv@divisor+1,f
 11343  1369  09A6               	comf	___aldiv@divisor+2,f
 11344  136A  09A7               	comf	___aldiv@divisor+3,f
 11345  136B  0AA4               	incf	___aldiv@divisor,f
 11346  136C  1903               	skipnz
 11347  136D  0AA5               	incf	___aldiv@divisor+1,f
 11348  136E  1903               	skipnz
 11349  136F  0AA6               	incf	___aldiv@divisor+2,f
 11350  1370  1903               	skipnz
 11351  1371  0AA7               	incf	___aldiv@divisor+3,f
 11352  1372  01AD               	clrf	___aldiv@sign
 11353  1373  0AAD               	incf	___aldiv@sign,f
 11354  1374                     l1157:	
 11355  1374  1FAB               	btfss	___aldiv@dividend+3,7
 11356  1375  2B85               	goto	l5043
 11357  1376  09A8               	comf	___aldiv@dividend,f
 11358  1377  09A9               	comf	___aldiv@dividend+1,f
 11359  1378  09AA               	comf	___aldiv@dividend+2,f
 11360  1379  09AB               	comf	___aldiv@dividend+3,f
 11361  137A  0AA8               	incf	___aldiv@dividend,f
 11362  137B  1903               	skipnz
 11363  137C  0AA9               	incf	___aldiv@dividend+1,f
 11364  137D  1903               	skipnz
 11365  137E  0AAA               	incf	___aldiv@dividend+2,f
 11366  137F  1903               	skipnz
 11367  1380  0AAB               	incf	___aldiv@dividend+3,f
 11368  1381  3001               	movlw	1
 11369  1382  00F9               	movwf	??___aldiv
 11370  1383  0879               	movf	??___aldiv,w
 11371  1384  06AD               	xorwf	___aldiv@sign,f
 11372  1385                     l5043:	
 11373  1385  3000               	movlw	0
 11374  1386  00B1               	movwf	___aldiv@quotient+3
 11375  1387  3000               	movlw	0
 11376  1388  00B0               	movwf	___aldiv@quotient+2
 11377  1389  3000               	movlw	0
 11378  138A  00AF               	movwf	___aldiv@quotient+1
 11379  138B  3000               	movlw	0
 11380  138C  00AE               	movwf	___aldiv@quotient
 11381  138D  0827               	movf	___aldiv@divisor+3,w
 11382  138E  0426               	iorwf	___aldiv@divisor+2,w
 11383  138F  0425               	iorwf	___aldiv@divisor+1,w
 11384  1390  0424               	iorwf	___aldiv@divisor,w
 11385  1391  1903               	skipnz
 11386  1392  2BCE               	goto	l5065
 11387  1393  01AC               	clrf	___aldiv@counter
 11388  1394  0AAC               	incf	___aldiv@counter,f
 11389  1395                     l5051:	
 11390  1395  1BA7               	btfsc	___aldiv@divisor+3,7
 11391  1396  2BA3               	goto	l5053
 11392  1397  3001               	movlw	1
 11393  1398                     u4505:	
 11394  1398  35A4               	lslf	___aldiv@divisor,f
 11395  1399  0DA5               	rlf	___aldiv@divisor+1,f
 11396  139A  0DA6               	rlf	___aldiv@divisor+2,f
 11397  139B  0DA7               	rlf	___aldiv@divisor+3,f
 11398  139C  0B89               	decfsz	9,f
 11399  139D  2B98               	goto	u4505
 11400  139E  3001               	movlw	1
 11401  139F  00F9               	movwf	??___aldiv
 11402  13A0  0879               	movf	??___aldiv,w
 11403  13A1  07AC               	addwf	___aldiv@counter,f
 11404  13A2  2B95               	goto	l5051
 11405  13A3                     l5053:	
 11406  13A3  3001               	movlw	1
 11407  13A4                     u4525:	
 11408  13A4  35AE               	lslf	___aldiv@quotient,f
 11409  13A5  0DAF               	rlf	___aldiv@quotient+1,f
 11410  13A6  0DB0               	rlf	___aldiv@quotient+2,f
 11411  13A7  0DB1               	rlf	___aldiv@quotient+3,f
 11412  13A8  0B89               	decfsz	9,f
 11413  13A9  2BA4               	goto	u4525
 11414  13AA  0827               	movf	___aldiv@divisor+3,w
 11415  13AB  022B               	subwf	___aldiv@dividend+3,w
 11416  13AC  1D03               	skipz
 11417  13AD  2BB8               	goto	u4535
 11418  13AE  0826               	movf	___aldiv@divisor+2,w
 11419  13AF  022A               	subwf	___aldiv@dividend+2,w
 11420  13B0  1D03               	skipz
 11421  13B1  2BB8               	goto	u4535
 11422  13B2  0825               	movf	___aldiv@divisor+1,w
 11423  13B3  0229               	subwf	___aldiv@dividend+1,w
 11424  13B4  1D03               	skipz
 11425  13B5  2BB8               	goto	u4535
 11426  13B6  0824               	movf	___aldiv@divisor,w
 11427  13B7  0228               	subwf	___aldiv@dividend,w
 11428  13B8                     u4535:	
 11429  13B8  1C03               	skipc
 11430  13B9  2BC3               	goto	l5061
 11431  13BA  0824               	movf	___aldiv@divisor,w
 11432  13BB  02A8               	subwf	___aldiv@dividend,f
 11433  13BC  0825               	movf	___aldiv@divisor+1,w
 11434  13BD  3BA9               	subwfb	___aldiv@dividend+1,f
 11435  13BE  0826               	movf	___aldiv@divisor+2,w
 11436  13BF  3BAA               	subwfb	___aldiv@dividend+2,f
 11437  13C0  0827               	movf	___aldiv@divisor+3,w
 11438  13C1  3BAB               	subwfb	___aldiv@dividend+3,f
 11439  13C2  142E               	bsf	___aldiv@quotient,0
 11440  13C3                     l5061:	
 11441  13C3  3001               	movlw	1
 11442  13C4                     u4545:	
 11443  13C4  36A7               	lsrf	___aldiv@divisor+3,f
 11444  13C5  0CA6               	rrf	___aldiv@divisor+2,f
 11445  13C6  0CA5               	rrf	___aldiv@divisor+1,f
 11446  13C7  0CA4               	rrf	___aldiv@divisor,f
 11447  13C8  0B89               	decfsz	9,f
 11448  13C9  2BC4               	goto	u4545
 11449  13CA  3001               	movlw	1
 11450  13CB  02AC               	subwf	___aldiv@counter,f
 11451  13CC  1D03               	btfss	3,2
 11452  13CD  2BA3               	goto	l5053
 11453  13CE                     l5065:	
 11454  13CE  082D               	movf	___aldiv@sign,w
 11455  13CF  1903               	btfsc	3,2
 11456  13D0  2BDC               	goto	l5069
 11457  13D1  09AE               	comf	___aldiv@quotient,f
 11458  13D2  09AF               	comf	___aldiv@quotient+1,f
 11459  13D3  09B0               	comf	___aldiv@quotient+2,f
 11460  13D4  09B1               	comf	___aldiv@quotient+3,f
 11461  13D5  0AAE               	incf	___aldiv@quotient,f
 11462  13D6  1903               	skipnz
 11463  13D7  0AAF               	incf	___aldiv@quotient+1,f
 11464  13D8  1903               	skipnz
 11465  13D9  0AB0               	incf	___aldiv@quotient+2,f
 11466  13DA  1903               	skipnz
 11467  13DB  0AB1               	incf	___aldiv@quotient+3,f
 11468  13DC                     l5069:	
 11469  13DC  0831               	movf	___aldiv@quotient+3,w
 11470  13DD  00A7               	movwf	?___aldiv+3
 11471  13DE  0830               	movf	___aldiv@quotient+2,w
 11472  13DF  00A6               	movwf	?___aldiv+2
 11473  13E0  082F               	movf	___aldiv@quotient+1,w
 11474  13E1  00A5               	movwf	?___aldiv+1
 11475  13E2  082E               	movf	___aldiv@quotient,w
 11476  13E3  00A4               	movwf	?___aldiv
 11477  13E4  0008               	return
 11478  13E5                     __end_of___aldiv:	
 11479                           
 11480                           	psect	text35
 11481  1233                     __ptext35:	
 11482 ;; *************** function _adc_sample *****************
 11483 ;; Defined at:
 11484 ;;		line 187 in file "src/api/sample.c"
 11485 ;; Parameters:    Size  Location     Type
 11486 ;;  ch              1    wreg     unsigned char 
 11487 ;;  gfvr            1    4[COMMON] unsigned char 
 11488 ;;  num             1    5[COMMON] unsigned char 
 11489 ;; Auto vars:     Size  Location     Type
 11490 ;;  ch              1    0[BANK0 ] unsigned char 
 11491 ;;  t16             2    5[BANK0 ] unsigned int 
 11492 ;;  ret             2    3[BANK0 ] unsigned int 
 11493 ;;  i               2    1[BANK0 ] unsigned int 
 11494 ;; Return value:  Size  Location     Type
 11495 ;;                  2    4[COMMON] unsigned int 
 11496 ;; Registers used:
 11497 ;;		wreg, status,2, status,0, pclath, cstack
 11498 ;; Tracked objects:
 11499 ;;		On entry : 0/0
 11500 ;;		On exit  : 0/0
 11501 ;;		Unchanged: 0/0
 11502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11503 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11504 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11505 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11506 ;;      Totals:         5       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11507 ;;Total ram usage:       12 bytes
 11508 ;; Hardware stack levels used:    1
 11509 ;; Hardware stack levels required when called:    2
 11510 ;; This function calls:
 11511 ;;		_adc_init
 11512 ;;		_fvr_set_gain
 11513 ;; This function is called by:
 11514 ;;		_main
 11515 ;; This function uses a non-reentrant model
 11516 ;;
 11517                           
 11518                           
 11519                           ;psect for function _adc_sample
 11520  1233                     _adc_sample:	
 11521                           
 11522                           ;incstack = 0
 11523                           ; Regs used in _adc_sample: [wreg+status,2+status,0+pclath+cstack]
 11524                           ;adc_sample@ch stored from wreg
 11525  1233  0020               	movlb	0	; select bank0
 11526  1234  00A0               	movwf	adc_sample@ch
 11527                           
 11528                           ;sample.c: 189: uint16_t i;;sample.c: 190: uint16_t ret=0;
 11529  1235  01A3               	clrf	adc_sample@ret
 11530  1236  01A4               	clrf	adc_sample@ret+1
 11531                           
 11532                           ;sample.c: 191: uint16_t t16=0;
 11533  1237  01A5               	clrf	adc_sample@t16
 11534  1238  01A6               	clrf	adc_sample@t16+1
 11535                           
 11536                           ;sample.c: 193: fvr_set_gain(gfvr);
 11537  1239  0874               	movf	adc_sample@gfvr,w
 11538  123A  319C  24DA  3192   	fcall	_fvr_set_gain
 11539                           
 11540                           ;sample.c: 194: adc_init((adc_channel_t)ch);
 11541  123D  0020               	movlb	0	; select bank0
 11542  123E  0820               	movf	adc_sample@ch,w
 11543  123F  319C  24C6  3192   	fcall	_adc_init
 11544                           
 11545                           ;sample.c: 195: _delay((unsigned long)((50)*(16000000/4000000.0)));
 11546  1242  3042               	movlw	66
 11547  1243                     u5047:	
 11548  1243  0B89               	decfsz	9,f
 11549  1244  2A43               	goto	u5047
 11550  1245  3200               	nop2
 11551                           
 11552                           ;sample.c: 196: ADCON0bits.GO_nDONE = 1;
 11553  1246  0021               	movlb	1	; select bank1
 11554  1247  149D               	bsf	29,1	;volatile
 11555  1248                     l633:	
 11556                           ;sample.c: 197: while (ADCON0bits.GO_nDONE);
 11557                           
 11558  1248  189D               	btfsc	29,1	;volatile
 11559  1249  2A48               	goto	l633
 11560                           
 11561                           ;sample.c: 198: if(num>64)num=64;
 11562  124A  3041               	movlw	65
 11563  124B  0275               	subwf	adc_sample@num,w
 11564  124C  1C03               	skipc
 11565  124D  2A52               	goto	l4159
 11566  124E  3040               	movlw	64
 11567  124F  00F6               	movwf	??_adc_sample
 11568  1250  0876               	movf	??_adc_sample,w
 11569  1251  00F5               	movwf	adc_sample@num
 11570  1252                     l4159:	
 11571                           
 11572                           ;sample.c: 199: for(i=0;i<num;i++){
 11573  1252  0020               	movlb	0	; select bank0
 11574  1253  01A1               	clrf	adc_sample@i
 11575  1254  01A2               	clrf	adc_sample@i+1
 11576  1255                     l4169:	
 11577  1255  0875               	movf	adc_sample@num,w
 11578  1256  00F6               	movwf	??_adc_sample
 11579  1257  01F7               	clrf	??_adc_sample+1
 11580  1258  0877               	movf	??_adc_sample+1,w
 11581  1259  0222               	subwf	adc_sample@i+1,w
 11582  125A  1D03               	skipz
 11583  125B  2A5E               	goto	u3235
 11584  125C  0876               	movf	??_adc_sample,w
 11585  125D  0221               	subwf	adc_sample@i,w
 11586  125E                     u3235:	
 11587  125E  1803               	btfsc	3,0
 11588  125F  2A8B               	goto	l4171
 11589                           
 11590                           ;sample.c: 200: ADCON0bits.GO_nDONE = 1;
 11591  1260  0021               	movlb	1	; select bank1
 11592  1261  149D               	bsf	29,1	;volatile
 11593  1262                     l639:	
 11594                           ;sample.c: 201: while (ADCON0bits.GO_nDONE);
 11595                           
 11596  1262  189D               	btfsc	29,1	;volatile
 11597  1263  2A62               	goto	l639
 11598                           
 11599                           ;sample.c: 202: __nop();
 11600  1264  0000               	nop
 11601                           
 11602                           ;sample.c: 203: t16=ADRESH;
 11603  1265  0021               	movlb	1	; select bank1
 11604  1266  081C               	movf	28,w	;volatile
 11605  1267  00F6               	movwf	??_adc_sample
 11606  1268  01F7               	clrf	??_adc_sample+1
 11607  1269  0876               	movf	??_adc_sample,w
 11608  126A  0020               	movlb	0	; select bank0
 11609  126B  00A5               	movwf	adc_sample@t16
 11610  126C  0877               	movf	??_adc_sample+1,w
 11611  126D  00A6               	movwf	adc_sample@t16+1
 11612                           
 11613                           ;sample.c: 204: t16<<=2;
 11614  126E  3002               	movlw	2
 11615  126F                     u3215:	
 11616  126F  35A5               	lslf	adc_sample@t16,f
 11617  1270  0DA6               	rlf	adc_sample@t16+1,f
 11618  1271  0B89               	decfsz	9,f
 11619  1272  2A6F               	goto	u3215
 11620                           
 11621                           ;sample.c: 205: t16|=(uint16_t)(ADRESL>>6);
 11622  1273  0021               	movlb	1	; select bank1
 11623  1274  081B               	movf	27,w	;volatile
 11624  1275  00F6               	movwf	??_adc_sample
 11625  1276  3006               	movlw	6
 11626  1277                     u3225:	
 11627  1277  36F6               	lsrf	??_adc_sample,f
 11628  1278  0B89               	decfsz	9,f
 11629  1279  2A77               	goto	u3225
 11630  127A  0876               	movf	??_adc_sample,w
 11631  127B  00F7               	movwf	??_adc_sample+1
 11632  127C  01F8               	clrf	??_adc_sample+2
 11633  127D  0877               	movf	??_adc_sample+1,w
 11634  127E  0020               	movlb	0	; select bank0
 11635  127F  04A5               	iorwf	adc_sample@t16,f
 11636  1280  0878               	movf	??_adc_sample+2,w
 11637  1281  04A6               	iorwf	adc_sample@t16+1,f
 11638                           
 11639                           ;sample.c: 207: ret+=t16;
 11640  1282  0825               	movf	adc_sample@t16,w
 11641  1283  07A3               	addwf	adc_sample@ret,f
 11642  1284  0826               	movf	adc_sample@t16+1,w
 11643  1285  3DA4               	addwfc	adc_sample@ret+1,f
 11644  1286  3001               	movlw	1
 11645  1287  07A1               	addwf	adc_sample@i,f
 11646  1288  3000               	movlw	0
 11647  1289  3DA2               	addwfc	adc_sample@i+1,f
 11648  128A  2A55               	goto	l4169
 11649  128B                     l4171:	
 11650                           
 11651                           ;sample.c: 212: return ret;
 11652  128B  0824               	movf	adc_sample@ret+1,w
 11653  128C  00F5               	movwf	?_adc_sample+1
 11654  128D  0823               	movf	adc_sample@ret,w
 11655  128E  00F4               	movwf	?_adc_sample
 11656  128F  0008               	return
 11657  1290                     __end_of_adc_sample:	
 11658                           
 11659                           	psect	text36
 11660  1CDA                     __ptext36:	
 11661 ;; *************** function _fvr_set_gain *****************
 11662 ;; Defined at:
 11663 ;;		line 134 in file "src/api/sample.c"
 11664 ;; Parameters:    Size  Location     Type
 11665 ;;  g               1    wreg     unsigned char 
 11666 ;; Auto vars:     Size  Location     Type
 11667 ;;  g               1    3[COMMON] unsigned char 
 11668 ;;  t8              1    2[COMMON] unsigned char 
 11669 ;; Return value:  Size  Location     Type
 11670 ;;                  1    wreg      void 
 11671 ;; Registers used:
 11672 ;;		wreg, status,2, status,0
 11673 ;; Tracked objects:
 11674 ;;		On entry : 0/0
 11675 ;;		On exit  : 0/0
 11676 ;;		Unchanged: 0/0
 11677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11679 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11680 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11681 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11682 ;;Total ram usage:        3 bytes
 11683 ;; Hardware stack levels used:    1
 11684 ;; Hardware stack levels required when called:    1
 11685 ;; This function calls:
 11686 ;;		Nothing
 11687 ;; This function is called by:
 11688 ;;		_adc_sample
 11689 ;; This function uses a non-reentrant model
 11690 ;;
 11691                           
 11692                           
 11693                           ;psect for function _fvr_set_gain
 11694  1CDA                     _fvr_set_gain:	
 11695                           
 11696                           ;incstack = 0
 11697                           ; Regs used in _fvr_set_gain: [wreg+status,2+status,0]
 11698                           ;fvr_set_gain@g stored from wreg
 11699  1CDA  00F3               	movwf	fvr_set_gain@g
 11700                           
 11701                           ;sample.c: 136: uint8_t t8=0x80;
 11702  1CDB  3080               	movlw	128
 11703  1CDC  00F1               	movwf	??_fvr_set_gain
 11704  1CDD  0871               	movf	??_fvr_set_gain,w
 11705  1CDE  00F2               	movwf	fvr_set_gain@t8
 11706                           
 11707                           ;sample.c: 137: if(g>3)g=3;
 11708  1CDF  3004               	movlw	4
 11709  1CE0  0273               	subwf	fvr_set_gain@g,w
 11710  1CE1  1C03               	skipc
 11711  1CE2  2CE7               	goto	l3717
 11712  1CE3  3003               	movlw	3
 11713  1CE4  00F1               	movwf	??_fvr_set_gain
 11714  1CE5  0871               	movf	??_fvr_set_gain,w
 11715  1CE6  00F3               	movwf	fvr_set_gain@g
 11716  1CE7                     l3717:	
 11717                           
 11718                           ;sample.c: 138: t8|=g;
 11719  1CE7  0873               	movf	fvr_set_gain@g,w
 11720  1CE8  00F1               	movwf	??_fvr_set_gain
 11721  1CE9  0871               	movf	??_fvr_set_gain,w
 11722  1CEA  04F2               	iorwf	fvr_set_gain@t8,f
 11723                           
 11724                           ;sample.c: 139: FVRCON = t8;
 11725  1CEB  0872               	movf	fvr_set_gain@t8,w
 11726  1CEC  0022               	movlb	2	; select bank2
 11727  1CED  0097               	movwf	23	;volatile
 11728  1CEE                     l621:	
 11729                           ;sample.c: 140: while(!(FVRCONbits.FVRRDY));
 11730                           
 11731  1CEE  1B17               	btfsc	23,6	;volatile
 11732  1CEF  0008               	return
 11733  1CF0  2CEE               	goto	l621
 11734  1CF1                     __end_of_fvr_set_gain:	
 11735                           
 11736                           	psect	text37
 11737  1CC6                     __ptext37:	
 11738 ;; *************** function _adc_init *****************
 11739 ;; Defined at:
 11740 ;;		line 143 in file "src/api/sample.c"
 11741 ;; Parameters:    Size  Location     Type
 11742 ;;  ch              1    wreg     enum E4099
 11743 ;; Auto vars:     Size  Location     Type
 11744 ;;  ch              1    2[COMMON] enum E4099
 11745 ;; Return value:  Size  Location     Type
 11746 ;;                  1    wreg      void 
 11747 ;; Registers used:
 11748 ;;		wreg, status,2, status,0
 11749 ;; Tracked objects:
 11750 ;;		On entry : 0/0
 11751 ;;		On exit  : 0/0
 11752 ;;		Unchanged: 0/0
 11753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11755 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11756 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11757 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11758 ;;Total ram usage:        2 bytes
 11759 ;; Hardware stack levels used:    1
 11760 ;; Hardware stack levels required when called:    1
 11761 ;; This function calls:
 11762 ;;		Nothing
 11763 ;; This function is called by:
 11764 ;;		_adc_sample
 11765 ;; This function uses a non-reentrant model
 11766 ;;
 11767                           
 11768                           
 11769                           ;psect for function _adc_init
 11770  1CC6                     _adc_init:	
 11771                           
 11772                           ;incstack = 0
 11773                           ; Regs used in _adc_init: [wreg+status,2+status,0]
 11774                           ;adc_init@ch stored from wreg
 11775  1CC6  00F2               	movwf	adc_init@ch
 11776  1CC7                     l627:	
 11777                           ;sample.c: 145: while (ADCON0bits.GO_nDONE);
 11778                           
 11779  1CC7  0021               	movlb	1	; select bank1
 11780  1CC8  189D               	btfsc	29,1	;volatile
 11781  1CC9  2CC7               	goto	l627
 11782                           
 11783                           ;sample.c: 146: ADCON0bits.CHS = ch;
 11784  1CCA  0872               	movf	adc_init@ch,w
 11785  1CCB  00F1               	movwf	??_adc_init
 11786  1CCC  0DF1               	rlf	??_adc_init,f
 11787  1CCD  0DF1               	rlf	??_adc_init,f
 11788  1CCE  081D               	movf	29,w	;volatile
 11789  1CCF  0671               	xorwf	??_adc_init,w
 11790  1CD0  3983               	andlw	-125
 11791  1CD1  0671               	xorwf	??_adc_init,w
 11792  1CD2  009D               	movwf	29	;volatile
 11793                           
 11794                           ;sample.c: 147: ADCON0bits.ADON = 1;
 11795  1CD3  141D               	bsf	29,0	;volatile
 11796                           
 11797                           ;sample.c: 148: ADCON1 = 0x63;
 11798  1CD4  3063               	movlw	99
 11799  1CD5  009E               	movwf	30	;volatile
 11800                           
 11801                           ;sample.c: 149: ADCON2 = 0x00;
 11802  1CD6  019F               	clrf	31	;volatile
 11803                           
 11804                           ;sample.c: 150: ADRESL = 0x00;
 11805  1CD7  019B               	clrf	27	;volatile
 11806                           
 11807                           ;sample.c: 151: ADRESH = 0x00;
 11808  1CD8  019C               	clrf	28	;volatile
 11809  1CD9  0008               	return
 11810  1CDA                     __end_of_adc_init:	
 11811                           
 11812                           	psect	text38
 11813  1D55                     __ptext38:	
 11814 ;; *************** function _SYSTEM_Initialize *****************
 11815 ;; Defined at:
 11816 ;;		line 70 in file "mcc_generated_files/mcc.c"
 11817 ;; Parameters:    Size  Location     Type
 11818 ;;		None
 11819 ;; Auto vars:     Size  Location     Type
 11820 ;;		None
 11821 ;; Return value:  Size  Location     Type
 11822 ;;                  1    wreg      void 
 11823 ;; Registers used:
 11824 ;;		wreg, status,2, status,0, pclath, cstack
 11825 ;; Tracked objects:
 11826 ;;		On entry : 0/0
 11827 ;;		On exit  : 0/0
 11828 ;;		Unchanged: 0/0
 11829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11833 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11834 ;;Total ram usage:        0 bytes
 11835 ;; Hardware stack levels used:    1
 11836 ;; Hardware stack levels required when called:    3
 11837 ;; This function calls:
 11838 ;;		_ADC1_Initialize
 11839 ;;		_EUSART_Initialize
 11840 ;;		_FVR_Initialize
 11841 ;;		_OSCILLATOR_Initialize
 11842 ;;		_PIN_MANAGER_Initialize
 11843 ;;		_PWM1_Initialize
 11844 ;;		_PWM2_Initialize
 11845 ;;		_TMR2_Initialize
 11846 ;;		_WDT_Initialize
 11847 ;; This function is called by:
 11848 ;;		_main
 11849 ;; This function uses a non-reentrant model
 11850 ;;
 11851                           
 11852                           
 11853                           ;psect for function _SYSTEM_Initialize
 11854  1D55                     _SYSTEM_Initialize:	
 11855                           
 11856                           ;mcc.c: 73: PIN_MANAGER_Initialize();
 11857                           
 11858                           ;incstack = 0
 11859                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 11860  1D55  3190  2064  319D   	fcall	_PIN_MANAGER_Initialize
 11861                           
 11862                           ;mcc.c: 74: OSCILLATOR_Initialize();
 11863  1D58  318F  27FF  319D   	fcall	_OSCILLATOR_Initialize
 11864                           
 11865                           ;mcc.c: 75: WDT_Initialize();
 11866  1D5B  319C  246C  319D   	fcall	_WDT_Initialize
 11867                           
 11868                           ;mcc.c: 76: FVR_Initialize();
 11869  1D5E  319C  2468  319D   	fcall	_FVR_Initialize
 11870                           
 11871                           ;mcc.c: 77: PWM1_Initialize();
 11872  1D61  319C  24F1  319D   	fcall	_PWM1_Initialize
 11873                           
 11874                           ;mcc.c: 78: PWM2_Initialize();
 11875  1D64  319D  250A  319D   	fcall	_PWM2_Initialize
 11876                           
 11877                           ;mcc.c: 79: ADC1_Initialize();
 11878  1D67  3190  2000  319D   	fcall	_ADC1_Initialize
 11879                           
 11880                           ;mcc.c: 80: TMR2_Initialize();
 11881  1D6A  319C  24B3  319D   	fcall	_TMR2_Initialize
 11882                           
 11883                           ;mcc.c: 81: EUSART_Initialize();
 11884  1D6D  319C  24A0         	fcall	_EUSART_Initialize
 11885  1D6F  0008               	return
 11886  1D70                     __end_of_SYSTEM_Initialize:	
 11887                           
 11888                           	psect	text39
 11889  1C6C                     __ptext39:	
 11890 ;; *************** function _WDT_Initialize *****************
 11891 ;; Defined at:
 11892 ;;		line 94 in file "mcc_generated_files/mcc.c"
 11893 ;; Parameters:    Size  Location     Type
 11894 ;;		None
 11895 ;; Auto vars:     Size  Location     Type
 11896 ;;		None
 11897 ;; Return value:  Size  Location     Type
 11898 ;;                  1    wreg      void 
 11899 ;; Registers used:
 11900 ;;		wreg
 11901 ;; Tracked objects:
 11902 ;;		On entry : 0/0
 11903 ;;		On exit  : 0/0
 11904 ;;		Unchanged: 0/0
 11905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11909 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11910 ;;Total ram usage:        0 bytes
 11911 ;; Hardware stack levels used:    1
 11912 ;; Hardware stack levels required when called:    1
 11913 ;; This function calls:
 11914 ;;		Nothing
 11915 ;; This function is called by:
 11916 ;;		_SYSTEM_Initialize
 11917 ;; This function uses a non-reentrant model
 11918 ;;
 11919                           
 11920                           
 11921                           ;psect for function _WDT_Initialize
 11922  1C6C                     _WDT_Initialize:	
 11923                           
 11924                           ;mcc.c: 97: WDTCON = 0x16;
 11925                           
 11926                           ;incstack = 0
 11927                           ; Regs used in _WDT_Initialize: [wreg]
 11928  1C6C  3016               	movlw	22
 11929  1C6D  0021               	movlb	1	; select bank1
 11930  1C6E  0097               	movwf	23	;volatile
 11931  1C6F  0008               	return
 11932  1C70                     __end_of_WDT_Initialize:	
 11933                           
 11934                           	psect	text40
 11935  1CB3                     __ptext40:	
 11936 ;; *************** function _TMR2_Initialize *****************
 11937 ;; Defined at:
 11938 ;;		line 63 in file "mcc_generated_files/tmr2.c"
 11939 ;; Parameters:    Size  Location     Type
 11940 ;;		None
 11941 ;; Auto vars:     Size  Location     Type
 11942 ;;		None
 11943 ;; Return value:  Size  Location     Type
 11944 ;;                  1    wreg      void 
 11945 ;; Registers used:
 11946 ;;		wreg, status,2, status,0, pclath, cstack
 11947 ;; Tracked objects:
 11948 ;;		On entry : 0/0
 11949 ;;		On exit  : 0/0
 11950 ;;		Unchanged: 0/0
 11951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11955 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11956 ;;Total ram usage:        0 bytes
 11957 ;; Hardware stack levels used:    1
 11958 ;; Hardware stack levels required when called:    2
 11959 ;; This function calls:
 11960 ;;		_TMR2_SetInterruptHandler
 11961 ;;		_TMR2_StartTimer
 11962 ;; This function is called by:
 11963 ;;		_SYSTEM_Initialize
 11964 ;; This function uses a non-reentrant model
 11965 ;;
 11966                           
 11967                           
 11968                           ;psect for function _TMR2_Initialize
 11969  1CB3                     _TMR2_Initialize:	
 11970                           
 11971                           ;tmr2.c: 68: T2CON = 0x4B;
 11972                           
 11973                           ;incstack = 0
 11974                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
 11975  1CB3  304B               	movlw	75
 11976  1CB4  0020               	movlb	0	; select bank0
 11977  1CB5  009C               	movwf	28	;volatile
 11978                           
 11979                           ;tmr2.c: 71: PR2 = 0x7C;
 11980  1CB6  307C               	movlw	124
 11981  1CB7  009B               	movwf	27	;volatile
 11982                           
 11983                           ;tmr2.c: 74: TMR2 = 0x00;
 11984  1CB8  019A               	clrf	26	;volatile
 11985                           
 11986                           ;tmr2.c: 77: PIR1bits.TMR2IF = 0;
 11987  1CB9  1091               	bcf	17,1	;volatile
 11988                           
 11989                           ;tmr2.c: 80: PIE1bits.TMR2IE = 1;
 11990  1CBA  0021               	movlb	1	; select bank1
 11991  1CBB  1491               	bsf	17,1	;volatile
 11992                           
 11993                           ;tmr2.c: 83: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
 11994  1CBC  3000               	movlw	0
 11995  1CBD  00F1               	movwf	TMR2_SetInterruptHandler@InterruptHandler
 11996  1CBE  3000               	movlw	0
 11997  1CBF  00F2               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
 11998  1CC0  319C  2478  319C   	fcall	_TMR2_SetInterruptHandler
 11999                           
 12000                           ;tmr2.c: 86: TMR2_StartTimer();
 12001  1CC3  319C  2465         	fcall	_TMR2_StartTimer
 12002  1CC5  0008               	return
 12003  1CC6                     __end_of_TMR2_Initialize:	
 12004                           
 12005                           	psect	text41
 12006  1C65                     __ptext41:	
 12007 ;; *************** function _TMR2_StartTimer *****************
 12008 ;; Defined at:
 12009 ;;		line 89 in file "mcc_generated_files/tmr2.c"
 12010 ;; Parameters:    Size  Location     Type
 12011 ;;		None
 12012 ;; Auto vars:     Size  Location     Type
 12013 ;;		None
 12014 ;; Return value:  Size  Location     Type
 12015 ;;                  1    wreg      void 
 12016 ;; Registers used:
 12017 ;;		None
 12018 ;; Tracked objects:
 12019 ;;		On entry : 0/0
 12020 ;;		On exit  : 0/0
 12021 ;;		Unchanged: 0/0
 12022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12026 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12027 ;;Total ram usage:        0 bytes
 12028 ;; Hardware stack levels used:    1
 12029 ;; Hardware stack levels required when called:    1
 12030 ;; This function calls:
 12031 ;;		Nothing
 12032 ;; This function is called by:
 12033 ;;		_TMR2_Initialize
 12034 ;; This function uses a non-reentrant model
 12035 ;;
 12036                           
 12037                           
 12038                           ;psect for function _TMR2_StartTimer
 12039  1C65                     _TMR2_StartTimer:	
 12040                           
 12041                           ;tmr2.c: 92: T2CONbits.TMR2ON = 1;
 12042                           
 12043                           ;incstack = 0
 12044                           ; Regs used in _TMR2_StartTimer: []
 12045  1C65  0020               	movlb	0	; select bank0
 12046  1C66  151C               	bsf	28,2	;volatile
 12047  1C67  0008               	return
 12048  1C68                     __end_of_TMR2_StartTimer:	
 12049                           
 12050                           	psect	text42
 12051  1C78                     __ptext42:	
 12052 ;; *************** function _TMR2_SetInterruptHandler *****************
 12053 ;; Defined at:
 12054 ;;		line 142 in file "mcc_generated_files/tmr2.c"
 12055 ;; Parameters:    Size  Location     Type
 12056 ;;  InterruptHan    2    1[COMMON] PTR FTN()void 
 12057 ;;		 -> TMR2_DefaultInterruptHandler(1), 
 12058 ;; Auto vars:     Size  Location     Type
 12059 ;;		None
 12060 ;; Return value:  Size  Location     Type
 12061 ;;                  1    wreg      void 
 12062 ;; Registers used:
 12063 ;;		wreg
 12064 ;; Tracked objects:
 12065 ;;		On entry : 0/0
 12066 ;;		On exit  : 0/0
 12067 ;;		Unchanged: 0/0
 12068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12069 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12072 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12073 ;;Total ram usage:        2 bytes
 12074 ;; Hardware stack levels used:    1
 12075 ;; Hardware stack levels required when called:    1
 12076 ;; This function calls:
 12077 ;;		Nothing
 12078 ;; This function is called by:
 12079 ;;		_TMR2_Initialize
 12080 ;; This function uses a non-reentrant model
 12081 ;;
 12082                           
 12083                           
 12084                           ;psect for function _TMR2_SetInterruptHandler
 12085  1C78                     _TMR2_SetInterruptHandler:	
 12086                           
 12087                           ;tmr2.c: 143: TMR2_InterruptHandler = InterruptHandler;
 12088                           
 12089                           ;incstack = 0
 12090                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
 12091  1C78  0872               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
 12092  1C79  0020               	movlb	0	; select bank0
 12093  1C7A  00E2               	movwf	_TMR2_InterruptHandler+1
 12094  1C7B  0871               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
 12095  1C7C  00E1               	movwf	_TMR2_InterruptHandler
 12096  1C7D  0008               	return
 12097  1C7E                     __end_of_TMR2_SetInterruptHandler:	
 12098                           
 12099                           	psect	text43
 12100  1D0A                     __ptext43:	
 12101 ;; *************** function _PWM2_Initialize *****************
 12102 ;; Defined at:
 12103 ;;		line 58 in file "mcc_generated_files/pwm2.c"
 12104 ;; Parameters:    Size  Location     Type
 12105 ;;		None
 12106 ;; Auto vars:     Size  Location     Type
 12107 ;;		None
 12108 ;; Return value:  Size  Location     Type
 12109 ;;                  1    wreg      void 
 12110 ;; Registers used:
 12111 ;;		wreg, status,2
 12112 ;; Tracked objects:
 12113 ;;		On entry : 0/0
 12114 ;;		On exit  : 0/0
 12115 ;;		Unchanged: 0/0
 12116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12120 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12121 ;;Total ram usage:        0 bytes
 12122 ;; Hardware stack levels used:    1
 12123 ;; Hardware stack levels required when called:    1
 12124 ;; This function calls:
 12125 ;;		Nothing
 12126 ;; This function is called by:
 12127 ;;		_SYSTEM_Initialize
 12128 ;; This function uses a non-reentrant model
 12129 ;;
 12130                           
 12131                           
 12132                           ;psect for function _PWM2_Initialize
 12133  1D0A                     _PWM2_Initialize:	
 12134                           
 12135                           ;pwm2.c: 63: PWM2INTE = 0x01;
 12136                           
 12137                           ;incstack = 0
 12138                           ; Regs used in _PWM2_Initialize: [wreg+status,2]
 12139  1D0A  3001               	movlw	1
 12140  1D0B  003B               	movlb	27	; select bank27
 12141  1D0C  00AC               	movwf	44	;volatile
 12142                           
 12143                           ;pwm2.c: 66: PWM2INTF = 0x00;
 12144  1D0D  01AD               	clrf	45	;volatile
 12145                           
 12146                           ;pwm2.c: 69: PWM2CLKCON = 0x00;
 12147  1D0E  01AE               	clrf	46	;volatile
 12148                           
 12149                           ;pwm2.c: 72: PWM2LDCON = 0x00;
 12150  1D0F  01AF               	clrf	47	;volatile
 12151                           
 12152                           ;pwm2.c: 75: PWM2OFCON = 0x00;
 12153  1D10  01B0               	clrf	48	;volatile
 12154                           
 12155                           ;pwm2.c: 78: PWM2PHH = 0x00;
 12156  1D11  01A2               	clrf	34	;volatile
 12157                           
 12158                           ;pwm2.c: 81: PWM2PHL = 0x02;
 12159  1D12  3002               	movlw	2
 12160  1D13  00A1               	movwf	33	;volatile
 12161                           
 12162                           ;pwm2.c: 84: PWM2DCH = 0x00;
 12163  1D14  01A4               	clrf	36	;volatile
 12164                           
 12165                           ;pwm2.c: 87: PWM2DCL = 0xA0;
 12166  1D15  30A0               	movlw	160
 12167  1D16  00A3               	movwf	35	;volatile
 12168                           
 12169                           ;pwm2.c: 90: PWM2PRH = 0x06;
 12170  1D17  3006               	movlw	6
 12171  1D18  00A6               	movwf	38	;volatile
 12172                           
 12173                           ;pwm2.c: 93: PWM2PRL = 0x3F;
 12174  1D19  303F               	movlw	63
 12175  1D1A  00A5               	movwf	37	;volatile
 12176                           
 12177                           ;pwm2.c: 96: PWM2OFH = 0x00;
 12178  1D1B  01A8               	clrf	40	;volatile
 12179                           
 12180                           ;pwm2.c: 99: PWM2OFL = 0x01;
 12181  1D1C  3001               	movlw	1
 12182  1D1D  00A7               	movwf	39	;volatile
 12183                           
 12184                           ;pwm2.c: 102: PWM2TMRH = 0x00;
 12185  1D1E  01AA               	clrf	42	;volatile
 12186                           
 12187                           ;pwm2.c: 105: PWM2TMRL = 0x00;
 12188  1D1F  01A9               	clrf	41	;volatile
 12189                           
 12190                           ;pwm2.c: 108: PWM2CON = 0x90;
 12191  1D20  3090               	movlw	144
 12192  1D21  00AB               	movwf	43	;volatile
 12193  1D22  0008               	return
 12194  1D23                     __end_of_PWM2_Initialize:	
 12195                           
 12196                           	psect	text44
 12197  1CF1                     __ptext44:	
 12198 ;; *************** function _PWM1_Initialize *****************
 12199 ;; Defined at:
 12200 ;;		line 58 in file "mcc_generated_files/pwm1.c"
 12201 ;; Parameters:    Size  Location     Type
 12202 ;;		None
 12203 ;; Auto vars:     Size  Location     Type
 12204 ;;		None
 12205 ;; Return value:  Size  Location     Type
 12206 ;;                  1    wreg      void 
 12207 ;; Registers used:
 12208 ;;		wreg, status,2
 12209 ;; Tracked objects:
 12210 ;;		On entry : 0/0
 12211 ;;		On exit  : 0/0
 12212 ;;		Unchanged: 0/0
 12213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12217 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12218 ;;Total ram usage:        0 bytes
 12219 ;; Hardware stack levels used:    1
 12220 ;; Hardware stack levels required when called:    1
 12221 ;; This function calls:
 12222 ;;		Nothing
 12223 ;; This function is called by:
 12224 ;;		_SYSTEM_Initialize
 12225 ;; This function uses a non-reentrant model
 12226 ;;
 12227                           
 12228                           
 12229                           ;psect for function _PWM1_Initialize
 12230  1CF1                     _PWM1_Initialize:	
 12231                           
 12232                           ;pwm1.c: 63: PWM1INTE = 0x01;
 12233                           
 12234                           ;incstack = 0
 12235                           ; Regs used in _PWM1_Initialize: [wreg+status,2]
 12236  1CF1  3001               	movlw	1
 12237  1CF2  003B               	movlb	27	; select bank27
 12238  1CF3  009C               	movwf	28	;volatile
 12239                           
 12240                           ;pwm1.c: 66: PWM1INTF = 0x00;
 12241  1CF4  019D               	clrf	29	;volatile
 12242                           
 12243                           ;pwm1.c: 69: PWM1CLKCON = 0x00;
 12244  1CF5  019E               	clrf	30	;volatile
 12245                           
 12246                           ;pwm1.c: 72: PWM1LDCON = 0x00;
 12247  1CF6  019F               	clrf	31	;volatile
 12248                           
 12249                           ;pwm1.c: 75: PWM1OFCON = 0x00;
 12250  1CF7  01A0               	clrf	32	;volatile
 12251                           
 12252                           ;pwm1.c: 78: PWM1PHH = 0x00;
 12253  1CF8  0192               	clrf	18	;volatile
 12254                           
 12255                           ;pwm1.c: 81: PWM1PHL = 0x02;
 12256  1CF9  3002               	movlw	2
 12257  1CFA  0091               	movwf	17	;volatile
 12258                           
 12259                           ;pwm1.c: 84: PWM1DCH = 0x00;
 12260  1CFB  0194               	clrf	20	;volatile
 12261                           
 12262                           ;pwm1.c: 87: PWM1DCL = 0xa0;
 12263  1CFC  30A0               	movlw	160
 12264  1CFD  0093               	movwf	19	;volatile
 12265                           
 12266                           ;pwm1.c: 90: PWM1PRH = 0x06;
 12267  1CFE  3006               	movlw	6
 12268  1CFF  0096               	movwf	22	;volatile
 12269                           
 12270                           ;pwm1.c: 93: PWM1PRL = 0x3F;
 12271  1D00  303F               	movlw	63
 12272  1D01  0095               	movwf	21	;volatile
 12273                           
 12274                           ;pwm1.c: 96: PWM1OFH = 0x00;
 12275  1D02  0198               	clrf	24	;volatile
 12276                           
 12277                           ;pwm1.c: 99: PWM1OFL = 0x01;
 12278  1D03  3001               	movlw	1
 12279  1D04  0097               	movwf	23	;volatile
 12280                           
 12281                           ;pwm1.c: 102: PWM1TMRH = 0x00;
 12282  1D05  019A               	clrf	26	;volatile
 12283                           
 12284                           ;pwm1.c: 105: PWM1TMRL = 0x00;
 12285  1D06  0199               	clrf	25	;volatile
 12286                           
 12287                           ;pwm1.c: 108: PWM1CON = 0x90;
 12288  1D07  3090               	movlw	144
 12289  1D08  009B               	movwf	27	;volatile
 12290  1D09  0008               	return
 12291  1D0A                     __end_of_PWM1_Initialize:	
 12292                           
 12293                           	psect	text45
 12294  1064                     __ptext45:	
 12295 ;; *************** function _PIN_MANAGER_Initialize *****************
 12296 ;; Defined at:
 12297 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
 12298 ;; Parameters:    Size  Location     Type
 12299 ;;		None
 12300 ;; Auto vars:     Size  Location     Type
 12301 ;;  state           1    1[COMMON] unsigned char 
 12302 ;; Return value:  Size  Location     Type
 12303 ;;                  1    wreg      void 
 12304 ;; Registers used:
 12305 ;;		wreg, status,2, status,0
 12306 ;; Tracked objects:
 12307 ;;		On entry : 0/0
 12308 ;;		On exit  : 0/0
 12309 ;;		Unchanged: 0/0
 12310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12312 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12314 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12315 ;;Total ram usage:        1 bytes
 12316 ;; Hardware stack levels used:    1
 12317 ;; Hardware stack levels required when called:    1
 12318 ;; This function calls:
 12319 ;;		Nothing
 12320 ;; This function is called by:
 12321 ;;		_SYSTEM_Initialize
 12322 ;; This function uses a non-reentrant model
 12323 ;;
 12324                           
 12325                           
 12326                           ;psect for function _PIN_MANAGER_Initialize
 12327  1064                     _PIN_MANAGER_Initialize:	
 12328                           
 12329                           ;pin_manager.c: 57: LATA = 0x00;
 12330                           
 12331                           ;incstack = 0
 12332                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
 12333  1064  0022               	movlb	2	; select bank2
 12334  1065  018C               	clrf	12	;volatile
 12335                           
 12336                           ;pin_manager.c: 58: LATC = 0x00;
 12337  1066  018E               	clrf	14	;volatile
 12338                           
 12339                           ;pin_manager.c: 63: TRISA = 0x0F;
 12340  1067  300F               	movlw	15
 12341  1068  0021               	movlb	1	; select bank1
 12342  1069  008C               	movwf	12	;volatile
 12343                           
 12344                           ;pin_manager.c: 64: TRISC = 0x1f;
 12345  106A  301F               	movlw	31
 12346  106B  008E               	movwf	14	;volatile
 12347                           
 12348                           ;pin_manager.c: 69: ANSELC = 0x0F;
 12349  106C  300F               	movlw	15
 12350  106D  0023               	movlb	3	; select bank3
 12351  106E  008E               	movwf	14	;volatile
 12352                           
 12353                           ;pin_manager.c: 70: ANSELA = 0x17;
 12354  106F  3017               	movlw	23
 12355  1070  008C               	movwf	12	;volatile
 12356                           
 12357                           ;pin_manager.c: 75: WPUA = 0x3B;
 12358  1071  303B               	movlw	59
 12359  1072  0024               	movlb	4	; select bank4
 12360  1073  008C               	movwf	12	;volatile
 12361                           
 12362                           ;pin_manager.c: 76: WPUC = 0x30;
 12363  1074  3030               	movlw	48
 12364  1075  008E               	movwf	14	;volatile
 12365                           
 12366                           ;pin_manager.c: 77: OPTION_REGbits.nWPUEN = 0;
 12367  1076  0021               	movlb	1	; select bank1
 12368  1077  1395               	bcf	21,7	;volatile
 12369                           
 12370                           ;pin_manager.c: 82: ODCONA = 0x00;
 12371  1078  0025               	movlb	5	; select bank5
 12372  1079  018C               	clrf	12	;volatile
 12373                           
 12374                           ;pin_manager.c: 83: ODCONC = 0x00;
 12375  107A  018E               	clrf	14	;volatile
 12376                           
 12377                           ;pin_manager.c: 85: bool state = (unsigned char)GIE;
 12378  107B  3000               	movlw	0
 12379  107C  1B8B               	btfsc	11,7	;volatile
 12380  107D  3001               	movlw	1
 12381  107E  00F1               	movwf	PIN_MANAGER_Initialize@state
 12382                           
 12383                           ;pin_manager.c: 86: GIE = 0;
 12384  107F  138B               	bcf	11,7	;volatile
 12385                           
 12386                           ;pin_manager.c: 87: PPSLOCK = 0x55;
 12387  1080  3055               	movlw	85
 12388  1081  003C               	movlb	28	; select bank28
 12389  1082  008F               	movwf	15	;volsfr
 12390                           
 12391                           ;pin_manager.c: 88: PPSLOCK = 0xAA;
 12392  1083  30AA               	movlw	170
 12393  1084  008F               	movwf	15	;volsfr
 12394                           
 12395                           ;pin_manager.c: 89: PPSLOCKbits.PPSLOCKED = 0x00;
 12396  1085  100F               	bcf	15,0	;volsfr
 12397                           
 12398                           ;pin_manager.c: 91: RXPPSbits.RXPPS = 0x14;
 12399  1086  0815               	movf	21,w	;volatile
 12400  1087  39E0               	andlw	-32
 12401  1088  3814               	iorlw	20
 12402  1089  0095               	movwf	21	;volatile
 12403                           
 12404                           ;pin_manager.c: 92: RA4PPSbits.RA4PPS = 0x04;
 12405  108A  003D               	movlb	29	; select bank29
 12406  108B  0814               	movf	20,w	;volatile
 12407  108C  39F0               	andlw	-16
 12408  108D  3804               	iorlw	4
 12409  108E  0094               	movwf	20	;volatile
 12410                           
 12411                           ;pin_manager.c: 93: RA5PPSbits.RA5PPS = 0x03;
 12412  108F  0815               	movf	21,w	;volatile
 12413  1090  39F0               	andlw	-16
 12414  1091  3803               	iorlw	3
 12415  1092  0095               	movwf	21	;volatile
 12416                           
 12417                           ;pin_manager.c: 94: RC5PPSbits.RC5PPS = 0x09;
 12418  1093  0825               	movf	37,w	;volatile
 12419  1094  39F0               	andlw	-16
 12420  1095  3809               	iorlw	9
 12421  1096  00A5               	movwf	37	;volatile
 12422                           
 12423                           ;pin_manager.c: 96: PPSLOCK = 0x55;
 12424  1097  3055               	movlw	85
 12425  1098  003C               	movlb	28	; select bank28
 12426  1099  008F               	movwf	15	;volsfr
 12427                           
 12428                           ;pin_manager.c: 97: PPSLOCK = 0xAA;
 12429  109A  30AA               	movlw	170
 12430  109B  008F               	movwf	15	;volsfr
 12431                           
 12432                           ;pin_manager.c: 98: PPSLOCKbits.PPSLOCKED = 0x01;
 12433  109C  140F               	bsf	15,0	;volsfr
 12434                           
 12435                           ;pin_manager.c: 100: GIE = state;
 12436  109D  1C71               	btfss	PIN_MANAGER_Initialize@state,0
 12437  109E  28A1               	goto	u2390
 12438  109F  178B               	bsf	11,7	;volatile
 12439  10A0  0008               	return
 12440  10A1                     u2390:	
 12441  10A1  138B               	bcf	11,7	;volatile
 12442  10A2  0008               	return
 12443  10A3                     __end_of_PIN_MANAGER_Initialize:	
 12444                           
 12445                           	psect	text46
 12446  0FFF                     __ptext46:	
 12447 ;; *************** function _OSCILLATOR_Initialize *****************
 12448 ;; Defined at:
 12449 ;;		line 84 in file "mcc_generated_files/mcc.c"
 12450 ;; Parameters:    Size  Location     Type
 12451 ;;		None
 12452 ;; Auto vars:     Size  Location     Type
 12453 ;;		None
 12454 ;; Return value:  Size  Location     Type
 12455 ;;                  1    wreg      void 
 12456 ;; Registers used:
 12457 ;;		None
 12458 ;; Tracked objects:
 12459 ;;		On entry : 0/0
 12460 ;;		On exit  : 0/0
 12461 ;;		Unchanged: 0/0
 12462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12466 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12467 ;;Total ram usage:        0 bytes
 12468 ;; Hardware stack levels used:    1
 12469 ;; Hardware stack levels required when called:    1
 12470 ;; This function calls:
 12471 ;;		Nothing
 12472 ;; This function is called by:
 12473 ;;		_SYSTEM_Initialize
 12474 ;; This function uses a non-reentrant model
 12475 ;;
 12476                           
 12477                           
 12478                           ;psect for function _OSCILLATOR_Initialize
 12479  0FFF                     _OSCILLATOR_Initialize:	
 12480                           
 12481                           ;incstack = 0
 12482                           ; Regs used in _OSCILLATOR_Initialize: []
 12483  0FFF  0008               	return
 12484  1000                     __end_of_OSCILLATOR_Initialize:	
 12485                           
 12486                           	psect	text47
 12487  1C68                     __ptext47:	
 12488 ;; *************** function _FVR_Initialize *****************
 12489 ;; Defined at:
 12490 ;;		line 57 in file "mcc_generated_files/fvr.c"
 12491 ;; Parameters:    Size  Location     Type
 12492 ;;		None
 12493 ;; Auto vars:     Size  Location     Type
 12494 ;;		None
 12495 ;; Return value:  Size  Location     Type
 12496 ;;                  1    wreg      void 
 12497 ;; Registers used:
 12498 ;;		wreg
 12499 ;; Tracked objects:
 12500 ;;		On entry : 0/0
 12501 ;;		On exit  : 0/0
 12502 ;;		Unchanged: 0/0
 12503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12508 ;;Total ram usage:        0 bytes
 12509 ;; Hardware stack levels used:    1
 12510 ;; Hardware stack levels required when called:    1
 12511 ;; This function calls:
 12512 ;;		Nothing
 12513 ;; This function is called by:
 12514 ;;		_SYSTEM_Initialize
 12515 ;; This function uses a non-reentrant model
 12516 ;;
 12517                           
 12518                           
 12519                           ;psect for function _FVR_Initialize
 12520  1C68                     _FVR_Initialize:	
 12521                           
 12522                           ;fvr.c: 60: FVRCON = 0x81;
 12523                           
 12524                           ;incstack = 0
 12525                           ; Regs used in _FVR_Initialize: [wreg]
 12526  1C68  3081               	movlw	129
 12527  1C69  0022               	movlb	2	; select bank2
 12528  1C6A  0097               	movwf	23	;volatile
 12529  1C6B  0008               	return
 12530  1C6C                     __end_of_FVR_Initialize:	
 12531                           
 12532                           	psect	text48
 12533  1CA0                     __ptext48:	
 12534 ;; *************** function _EUSART_Initialize *****************
 12535 ;; Defined at:
 12536 ;;		line 55 in file "mcc_generated_files/eusart.c"
 12537 ;; Parameters:    Size  Location     Type
 12538 ;;		None
 12539 ;; Auto vars:     Size  Location     Type
 12540 ;;		None
 12541 ;; Return value:  Size  Location     Type
 12542 ;;                  1    wreg      void 
 12543 ;; Registers used:
 12544 ;;		wreg
 12545 ;; Tracked objects:
 12546 ;;		On entry : 0/0
 12547 ;;		On exit  : 0/0
 12548 ;;		Unchanged: 0/0
 12549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12553 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12554 ;;Total ram usage:        0 bytes
 12555 ;; Hardware stack levels used:    1
 12556 ;; Hardware stack levels required when called:    1
 12557 ;; This function calls:
 12558 ;;		Nothing
 12559 ;; This function is called by:
 12560 ;;		_SYSTEM_Initialize
 12561 ;; This function uses a non-reentrant model
 12562 ;;
 12563                           
 12564                           
 12565                           ;psect for function _EUSART_Initialize
 12566  1CA0                     _EUSART_Initialize:	
 12567                           
 12568                           ;eusart.c: 58: PIE1bits.RCIE = 0;
 12569                           
 12570                           ;incstack = 0
 12571                           ; Regs used in _EUSART_Initialize: [wreg]
 12572  1CA0  0021               	movlb	1	; select bank1
 12573  1CA1  1291               	bcf	17,5	;volatile
 12574                           
 12575                           ;eusart.c: 59: PIE1bits.TXIE = 0;
 12576  1CA2  1211               	bcf	17,4	;volatile
 12577                           
 12578                           ;eusart.c: 61: BAUDCON = 0x08;
 12579  1CA3  3008               	movlw	8
 12580  1CA4  0023               	movlb	3	; select bank3
 12581  1CA5  009F               	movwf	31	;volatile
 12582                           
 12583                           ;eusart.c: 64: RCSTA = 0x90;
 12584  1CA6  3090               	movlw	144
 12585  1CA7  009D               	movwf	29	;volatile
 12586                           
 12587                           ;eusart.c: 67: TXSTA = 0x24;
 12588  1CA8  3024               	movlw	36
 12589  1CA9  009E               	movwf	30	;volatile
 12590                           
 12591                           ;eusart.c: 71: SPBRGL = 0xA0;
 12592  1CAA  30A0               	movlw	160
 12593  1CAB  009B               	movwf	27	;volatile
 12594                           
 12595                           ;eusart.c: 76: SPBRGH = 0x01;
 12596  1CAC  3001               	movlw	1
 12597  1CAD  009C               	movwf	28	;volatile
 12598                           
 12599                           ;eusart.c: 77: PIE1bits.RCIE = 1;
 12600  1CAE  0021               	movlb	1	; select bank1
 12601  1CAF  1691               	bsf	17,5	;volatile
 12602                           
 12603                           ;eusart.c: 78: PIR1bits.TXIF=0;
 12604  1CB0  0020               	movlb	0	; select bank0
 12605  1CB1  1211               	bcf	17,4	;volatile
 12606  1CB2  0008               	return
 12607  1CB3                     __end_of_EUSART_Initialize:	
 12608                           
 12609                           	psect	text49
 12610  1000                     __ptext49:	
 12611 ;; *************** function _ADC1_Initialize *****************
 12612 ;; Defined at:
 12613 ;;		line 64 in file "mcc_generated_files/adc1.c"
 12614 ;; Parameters:    Size  Location     Type
 12615 ;;		None
 12616 ;; Auto vars:     Size  Location     Type
 12617 ;;		None
 12618 ;; Return value:  Size  Location     Type
 12619 ;;                  1    wreg      void 
 12620 ;; Registers used:
 12621 ;;		wreg, status,2
 12622 ;; Tracked objects:
 12623 ;;		On entry : 0/0
 12624 ;;		On exit  : 0/0
 12625 ;;		Unchanged: 0/0
 12626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12630 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12631 ;;Total ram usage:        0 bytes
 12632 ;; Hardware stack levels used:    1
 12633 ;; Hardware stack levels required when called:    1
 12634 ;; This function calls:
 12635 ;;		Nothing
 12636 ;; This function is called by:
 12637 ;;		_SYSTEM_Initialize
 12638 ;; This function uses a non-reentrant model
 12639 ;;
 12640                           
 12641                           
 12642                           ;psect for function _ADC1_Initialize
 12643  1000                     _ADC1_Initialize:	
 12644                           
 12645                           ;adc1.c: 69: ADCON0 = 0x01;
 12646                           
 12647                           ;incstack = 0
 12648                           ; Regs used in _ADC1_Initialize: [wreg+status,2]
 12649  1000  3001               	movlw	1
 12650  1001  0021               	movlb	1	; select bank1
 12651  1002  009D               	movwf	29	;volatile
 12652                           
 12653                           ;adc1.c: 72: ADCON1 = 0x63;
 12654  1003  3063               	movlw	99
 12655  1004  009E               	movwf	30	;volatile
 12656                           
 12657                           ;adc1.c: 75: ADCON2 = 0x00;
 12658  1005  019F               	clrf	31	;volatile
 12659                           
 12660                           ;adc1.c: 78: ADRESL = 0x00;
 12661  1006  019B               	clrf	27	;volatile
 12662                           
 12663                           ;adc1.c: 81: ADRESH = 0x00;
 12664  1007  019C               	clrf	28	;volatile
 12665  1008  0008               	return
 12666  1009                     __end_of_ADC1_Initialize:	
 12667                           
 12668                           	psect	intentry
 12669  0804                     __pintentry:	
 12670 ;; *************** function _INTERRUPT_InterruptManager *****************
 12671 ;; Defined at:
 12672 ;;		line 59 in file "mcc_generated_files/interrupt_manager.c"
 12673 ;; Parameters:    Size  Location     Type
 12674 ;;		None
 12675 ;; Auto vars:     Size  Location     Type
 12676 ;;		None
 12677 ;; Return value:  Size  Location     Type
 12678 ;;                  1    wreg      void 
 12679 ;; Registers used:
 12680 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12681 ;; Tracked objects:
 12682 ;;		On entry : 0/0
 12683 ;;		On exit  : 0/0
 12684 ;;		Unchanged: 0/0
 12685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12688 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12689 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12690 ;;Total ram usage:        1 bytes
 12691 ;; Hardware stack levels used:    1
 12692 ;; This function calls:
 12693 ;;		Nothing
 12694 ;; This function is called by:
 12695 ;;		Interrupt level 1
 12696 ;; This function uses a non-reentrant model
 12697 ;;
 12698                           
 12699  0804                     _INTERRUPT_InterruptManager:	
 12700                           
 12701                           ;incstack = 0
 12702  0804  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12703                           
 12704                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0]
 12705  0805  3188               	pagesel	$
 12706                           
 12707                           ;interrupt_manager.c: 63: if(INTCONbits.PEIE == 1 && PIE1bits.TMR2IE == 1 && PIR1bits.TM
      +                          R2IF == 1)
 12708  0806  1F0B               	btfss	11,6	;volatile
 12709  0807  2836               	goto	i1l4525
 12710  0808  0021               	movlb	1	; select bank1
 12711  0809  1C91               	btfss	17,1	;volatile
 12712  080A  2836               	goto	i1l4525
 12713  080B  0020               	movlb	0	; select bank0
 12714  080C  1C91               	btfss	17,1	;volatile
 12715  080D  2836               	goto	i1l4525
 12716                           
 12717                           ;interrupt_manager.c: 64: {;interrupt_manager.c: 66: PIR1bits.TMR2IF = 0;
 12718  080E  1091               	bcf	17,1	;volatile
 12719                           
 12720                           ;interrupt_manager.c: 67: Event |= (1<<1);
 12721  080F  14EB               	bsf	_Event,1	;volatile
 12722                           
 12723                           ;interrupt_manager.c: 68: subTickerX++;
 12724  0810  3001               	movlw	1
 12725  0811  00F0               	movwf	??_INTERRUPT_InterruptManager
 12726  0812  0870               	movf	??_INTERRUPT_InterruptManager,w
 12727  0813  07E9               	addwf	_subTickerX,f
 12728                           
 12729                           ;interrupt_manager.c: 69: subTickerX_1s++;
 12730  0814  3001               	movlw	1
 12731  0815  00F0               	movwf	??_INTERRUPT_InterruptManager
 12732  0816  0870               	movf	??_INTERRUPT_InterruptManager,w
 12733  0817  07E8               	addwf	_subTickerX_1s,f
 12734                           
 12735                           ;interrupt_manager.c: 70: if(subTickerX>=5){
 12736  0818  3005               	movlw	5
 12737  0819  0269               	subwf	_subTickerX,w
 12738  081A  1C03               	skipc
 12739  081B  281E               	goto	i1l4507
 12740                           
 12741                           ;interrupt_manager.c: 71: subTickerX=0;
 12742  081C  01E9               	clrf	_subTickerX
 12743                           
 12744                           ;interrupt_manager.c: 72: Event |= (1<<2);
 12745  081D  156B               	bsf	_Event,2	;volatile
 12746  081E                     i1l4507:	
 12747                           
 12748                           ;interrupt_manager.c: 73: };interrupt_manager.c: 74: if(subTickerX_1s>=50){
 12749  081E  3032               	movlw	50
 12750  081F  0268               	subwf	_subTickerX_1s,w
 12751  0820  1C03               	skipc
 12752  0821  2824               	goto	i1l4513
 12753                           
 12754                           ;interrupt_manager.c: 75: subTickerX_1s=0;
 12755  0822  01E8               	clrf	_subTickerX_1s
 12756                           
 12757                           ;interrupt_manager.c: 76: Event |= (1<<3);
 12758  0823  15EB               	bsf	_Event,3	;volatile
 12759  0824                     i1l4513:	
 12760                           
 12761                           ;interrupt_manager.c: 77: };interrupt_manager.c: 79: if(eusartRxIdleTime_ms){
 12762  0824  087C               	movf	_eusartRxIdleTime_ms,w	;volatile
 12763  0825  1903               	btfsc	3,2
 12764  0826  2831               	goto	i1l4523
 12765                           
 12766                           ;interrupt_manager.c: 80: eusartRxIdleTime_ms++;
 12767  0827  3001               	movlw	1
 12768  0828  00F0               	movwf	??_INTERRUPT_InterruptManager
 12769  0829  0870               	movf	??_INTERRUPT_InterruptManager,w
 12770  082A  07FC               	addwf	_eusartRxIdleTime_ms,f	;volatile
 12771                           
 12772                           ;interrupt_manager.c: 81: if(eusartRxIdleTime_ms>5){
 12773  082B  3006               	movlw	6
 12774  082C  027C               	subwf	_eusartRxIdleTime_ms,w	;volatile
 12775  082D  1C03               	skipc
 12776  082E  2831               	goto	i1l4523
 12777                           
 12778                           ;interrupt_manager.c: 82: Event|=(1<<0);
 12779  082F  146B               	bsf	_Event,0	;volatile
 12780                           
 12781                           ;interrupt_manager.c: 83: eusartRxIdleTime_ms=0;
 12782  0830  01FC               	clrf	_eusartRxIdleTime_ms	;volatile
 12783  0831                     i1l4523:	
 12784                           
 12785                           ;interrupt_manager.c: 84: };interrupt_manager.c: 85: };interrupt_manager.c: 86: globalTi
      +                          cker++;
 12786  0831  3001               	movlw	1
 12787  0832  0021               	movlb	1	; select bank1
 12788  0833  07D2               	addwf	_globalTicker^(0+128),f	;volatile
 12789  0834  3000               	movlw	0
 12790  0835  3DD3               	addwfc	(_globalTicker+1)^(0+128),f	;volatile
 12791  0836                     i1l4525:	
 12792                           
 12793                           ;interrupt_manager.c: 87: };interrupt_manager.c: 88: if(INTCONbits.PEIE == 1 && PIE1bits
      +                          .RCIE == 1 && PIR1bits.RCIF == 1)
 12794  0836  1F0B               	btfss	11,6	;volatile
 12795  0837  285E               	goto	i1l4543
 12796  0838  0021               	movlb	1	; select bank1
 12797  0839  1E91               	btfss	17,5	;volatile
 12798  083A  285E               	goto	i1l4543
 12799  083B  0020               	movlb	0	; select bank0
 12800  083C  1E91               	btfss	17,5	;volatile
 12801  083D  285E               	goto	i1l4543
 12802                           
 12803                           ;interrupt_manager.c: 89: {;interrupt_manager.c: 91: PIR1bits.RCIF=0;
 12804  083E  1291               	bcf	17,5	;volatile
 12805                           
 12806                           ;interrupt_manager.c: 92: if(1 == RCSTAbits.OERR){
 12807  083F  0023               	movlb	3	; select bank3
 12808  0840  1C9D               	btfss	29,1	;volatile
 12809  0841  2844               	goto	i1l4535
 12810                           
 12811                           ;interrupt_manager.c: 93: RCSTAbits.CREN = 0;
 12812  0842  121D               	bcf	29,4	;volatile
 12813                           
 12814                           ;interrupt_manager.c: 94: RCSTAbits.CREN = 1;
 12815  0843  161D               	bsf	29,4	;volatile
 12816  0844                     i1l4535:	
 12817                           
 12818                           ;interrupt_manager.c: 95: };interrupt_manager.c: 96: rxtemp=RCREG;
 12819  0844  0819               	movf	25,w	;volatile
 12820  0845  00F0               	movwf	??_INTERRUPT_InterruptManager
 12821  0846  0870               	movf	??_INTERRUPT_InterruptManager,w
 12822  0847  0020               	movlb	0	; select bank0
 12823  0848  00E7               	movwf	_rxtemp
 12824                           
 12825                           ;interrupt_manager.c: 97: if(eusartRxCount<32){
 12826  0849  3020               	movlw	32
 12827  084A  026A               	subwf	_eusartRxCount,w	;volatile
 12828  084B  1803               	skipnc
 12829  084C  285A               	goto	i1l4541
 12830                           
 12831                           ;interrupt_manager.c: 98: eusartRxBuffer[eusartRxCount]=rxtemp;
 12832  084D  0867               	movf	_rxtemp,w
 12833  084E  00F0               	movwf	??_INTERRUPT_InterruptManager
 12834  084F  086A               	movf	_eusartRxCount,w
 12835  0850  3E40               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 12836  0851  0086               	movwf	6
 12837  0852  3001               	movlw	1	; select bank2/3
 12838  0853  0087               	movwf	7
 12839  0854  0870               	movf	??_INTERRUPT_InterruptManager,w
 12840  0855  0081               	movwf	1
 12841                           
 12842                           ;interrupt_manager.c: 99: eusartRxCount++;
 12843  0856  3001               	movlw	1
 12844  0857  00F0               	movwf	??_INTERRUPT_InterruptManager
 12845  0858  0870               	movf	??_INTERRUPT_InterruptManager,w
 12846  0859  07EA               	addwf	_eusartRxCount,f	;volatile
 12847  085A                     i1l4541:	
 12848                           
 12849                           ;interrupt_manager.c: 101: };interrupt_manager.c: 102: eusartRxIdleTime_ms=1;
 12850  085A  3001               	movlw	1
 12851  085B  00F0               	movwf	??_INTERRUPT_InterruptManager
 12852  085C  0870               	movf	??_INTERRUPT_InterruptManager,w
 12853  085D  00FC               	movwf	_eusartRxIdleTime_ms	;volatile
 12854  085E                     i1l4543:	
 12855                           
 12856                           ;interrupt_manager.c: 103: };interrupt_manager.c: 105: if( PIR1bits.TXIF == 1 && INTCONb
      +                          its.PEIE && PIE1bits.TXIE)
 12857  085E  0020               	movlb	0	; select bank0
 12858  085F  1A11               	btfsc	17,4	;volatile
 12859  0860  1F0B               	btfss	11,6	;volatile
 12860  0861  2884               	goto	i1l4565
 12861  0862  0021               	movlb	1	; select bank1
 12862  0863  1E11               	btfss	17,4	;volatile
 12863  0864  2884               	goto	i1l4565
 12864                           
 12865                           ;interrupt_manager.c: 106: {;interrupt_manager.c: 109: if(1 == RCSTAbits.OERR){
 12866  0865  0023               	movlb	3	; select bank3
 12867  0866  1C9D               	btfss	29,1	;volatile
 12868  0867  286C               	goto	i1l4553
 12869                           
 12870                           ;interrupt_manager.c: 110: RCSTAbits.CREN = 0;
 12871  0868  121D               	bcf	29,4	;volatile
 12872                           
 12873                           ;interrupt_manager.c: 111: RCSTAbits.CREN = 1;
 12874  0869  161D               	bsf	29,4	;volatile
 12875                           
 12876                           ;interrupt_manager.c: 112: RCSTAbits.SREN=0;
 12877  086A  129D               	bcf	29,5	;volatile
 12878                           
 12879                           ;interrupt_manager.c: 113: RCSTAbits.SREN=1;
 12880  086B  169D               	bsf	29,5	;volatile
 12881  086C                     i1l4553:	
 12882                           
 12883                           ;interrupt_manager.c: 114: };interrupt_manager.c: 115: if(txBufLen>0){
 12884  086C  0020               	movlb	0	; select bank0
 12885  086D  0866               	movf	_txBufLen,w
 12886  086E  1903               	btfsc	3,2
 12887  086F  2880               	goto	i1l4561
 12888                           
 12889                           ;interrupt_manager.c: 116: TXREG=txBuf[txCount];
 12890  0870  0865               	movf	_txCount,w
 12891  0871  3EA0               	addlw	(low (_txBuf| (0+256)))& (0+255)
 12892  0872  0086               	movwf	6
 12893  0873  3001               	movlw	1	; select bank3/4
 12894  0874  0087               	movwf	7
 12895  0875  0801               	movf	1,w
 12896  0876  0023               	movlb	3	; select bank3
 12897  0877  009A               	movwf	26	;volatile
 12898                           
 12899                           ;interrupt_manager.c: 117: txBufLen--;
 12900  0878  3001               	movlw	1
 12901  0879  0020               	movlb	0	; select bank0
 12902  087A  02E6               	subwf	_txBufLen,f
 12903                           
 12904                           ;interrupt_manager.c: 118: txCount++;
 12905  087B  3001               	movlw	1
 12906  087C  00F0               	movwf	??_INTERRUPT_InterruptManager
 12907  087D  0870               	movf	??_INTERRUPT_InterruptManager,w
 12908  087E  07E5               	addwf	_txCount,f
 12909                           
 12910                           ;interrupt_manager.c: 119: }else{
 12911  087F  2884               	goto	i1l4565
 12912  0880                     i1l4561:	
 12913                           
 12914                           ;interrupt_manager.c: 120: txBufLen=0;
 12915  0880  01E6               	clrf	_txBufLen
 12916                           
 12917                           ;interrupt_manager.c: 121: txCount=0;
 12918  0881  01E5               	clrf	_txCount
 12919                           
 12920                           ;interrupt_manager.c: 122: PIE1bits.TXIE=0;
 12921  0882  0021               	movlb	1	; select bank1
 12922  0883  1211               	bcf	17,4	;volatile
 12923  0884                     i1l4565:	
 12924                           
 12925                           ;interrupt_manager.c: 123: };interrupt_manager.c: 125: };interrupt_manager.c: 127: if(PI
      +                          R3bits.PWM2IF){
 12926  0884  0020               	movlb	0	; select bank0
 12927  0885  1A93               	btfsc	19,5	;volatile
 12928                           
 12929                           ;interrupt_manager.c: 128: PIR3bits.PWM2IF = 0;
 12930  0886  1293               	bcf	19,5	;volatile
 12931                           
 12932                           ;interrupt_manager.c: 129: };interrupt_manager.c: 131: if(PIR3bits.PWM1IF){
 12933  0887  1A13               	btfsc	19,4	;volatile
 12934                           
 12935                           ;interrupt_manager.c: 132: PIR3bits.PWM1IF=0;
 12936  0888  1213               	bcf	19,4	;volatile
 12937  0889  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12938  088A  0009               	retfie
 12939  088B                     __end_of_INTERRUPT_InterruptManager:	
 12940  007E                     btemp	set	126	;btemp
 12941  007E                     int$flags	set	126
 12942  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    17
    Data        14
    BSS         218
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     39      80
    BANK1            80      2      64
    BANK2            80      0      64
    BANK3            80      0      64
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           60      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    crc_append@message	PTR unsigned char  size(2) Largest target is 132
		 -> modbusBuf(BANK2[32]), sysData(BIGRAM[132]), 

    crc_verify@message	PTR unsigned char  size(2) Largest target is 132
		 -> modbusBuf(BANK2[32]), sysData(BIGRAM[132]), 

    crc_sum@buf	PTR unsigned char  size(2) Largest target is 132
		 -> modbusBuf(BANK2[32]), sysData(BIGRAM[132]), 

    m_mem_cpy_len@s	PTR unsigned char  size(2) Largest target is 132
		 -> modbusBuf(BANK2[32]), sysData(BIGRAM[132]), eusartRxBuffer(BANK2[32]), 

    m_mem_cpy_len@d	PTR unsigned char  size(2) Largest target is 64
		 -> crc_verify@expected(BANK0[2]), modbusBuf(BANK2[32]), txBuf(BANK3[64]), 

    modbus_response_process@rbuf	PTR unsigned char  size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    modbus_response_process@pmdbs	PTR struct . size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    modbus_response_command@rbuf	PTR unsigned char  size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    modbus_response_command@pmdbs	PTR struct . size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    modbus_response_write_mult_register@rbuf	PTR unsigned char  size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    modbus_response_write_mult_register@stb	PTR struct . size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    modbus_response_write_single_register@rbuf	PTR unsigned char  size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    modbus_response_write_single_register@pmdbs	PTR struct . size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    getRegisterVal@tempData	PTR unsigned int  size(1) Largest target is 2
		 -> modbus_response_command@tempData(BANK0[2]), 

    modbus_response_illgeal_function@buf	PTR unsigned char  size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    modbus_response_illgeal_function@pmdbs	PTR struct . size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    my_flash_system_write@buf	PTR unsigned char  size(2) Largest target is 132
		 -> sysData(BIGRAM[132]), 

    my_flash_system_read@buf	PTR unsigned char  size(2) Largest target is 132
		 -> sysData(BIGRAM[132]), 

    uart_send_len@buf	PTR unsigned char  size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_calc_rs_lo_avg
    _main->_uart_send_len
    _sys_data_init->_my_flash_system_read
    _pid_pwm2_vout_run->_set_vout_pwm2_duty
    _set_vout_pwm2_duty->_get_vout_pwm2_duty
    _pid_pwm1_idrv_run->_set_idrv_pwm1_duty
    _set_idrv_pwm1_duty->_get_idrv_pwm1_duty
    _modbus_response_write_single_register->_crc_append
    _modbus_response_write_single_register->_uart_send_len
    _modbus_response_write_mult_register->_crc_append
    _modbus_response_write_mult_register->_uart_send_len
    _sys_data_save->_crc_append
    _my_flash_read_system_erase->_FLASH_EraseBlock
    _modbus_response_illgeal_function->_crc_append
    _modbus_response_illgeal_function->_uart_send_len
    _modbus_response_command->_crc_append
    _modbus_response_command->_uart_send_len
    _uart_send_len->_m_mem_cpy_len
    _crc_append->_crc_sum
    _crc_verify->_m_mem_cpy_len
    _calc_temp_rs->___lldiv
    _calc_temp_rc->___lldiv
    _calc_rs_lo_avg->___lldiv
    _calc_expect_vout_adc_value->___aldiv
    ___aldiv->___lmul
    _adc_sample->_fvr_set_gain
    _TMR2_Initialize->_TMR2_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_calc_expect_vout_adc_value
    _sys_data_init->_crc_verify
    _pid_pwm1_idrv_run->___aldiv
    _modbus_response_process->_modbus_response_command
    _modbus_response_process->_modbus_response_write_single_register
    _modbus_response_write_single_register->_crc_append
    _modbus_response_write_mult_register->_crc_append
    _sys_data_save->_crc_append
    _modbus_response_illgeal_function->_crc_append
    _modbus_response_command->_crc_append
    _crc_append->_crc_sum
    _crc_verify->_crc_sum
    _calc_temp_rs->___lldiv
    _calc_temp_rc->___lldiv
    _calc_rs_lo_avg->___lldiv
    _calc_expect_vout_adc_value->___aldiv
    ___aldiv->___lmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   49027
                                              0 BANK1      2     2      0
                  _SYSTEM_Initialize
                         _adc_sample
         _calc_expect_vout_adc_value
                     _calc_rs_lo_avg
                       _calc_temp_rc
                       _calc_temp_rs
                      _m_mem_cpy_len
            _modbus_response_process
                  _pid_pwm1_idrv_run
                  _pid_pwm2_vout_run
                      _sys_data_init
                _uart_received_start
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (1) _uart_received_start                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sys_data_init                                       10    10      0    5897
                                             14 BANK0     10    10      0
                             ___wmul
                         _crc_verify
               _my_flash_system_read
                      _sys_data_save
 ---------------------------------------------------------------------------------
 (2) _my_flash_system_read                                11     7      4     311
                                              1 COMMON    11     7      4
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     396
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _pid_pwm2_vout_run                                    6     6      0    1281
                                              0 BANK0      6     6      0
                            ___awdiv
                            ___lwdiv
                 _set_vout_pwm2_duty
 ---------------------------------------------------------------------------------
 (2) _set_vout_pwm2_duty                                   4     2      2     212
                                              7 COMMON     4     2      2
                 _get_vout_pwm2_duty
 ---------------------------------------------------------------------------------
 (3) _get_vout_pwm2_duty                                   6     4      2      25
                                              1 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              1 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     452
                                              1 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (1) _pid_pwm1_idrv_run                                   12    12      0    3340
                                             18 BANK0     12    12      0
                            ___aldiv
                             ___lmul
                 _set_idrv_pwm1_duty
 ---------------------------------------------------------------------------------
 (2) _set_idrv_pwm1_duty                                   4     2      2     212
                                              7 COMMON     4     2      2
                 _get_idrv_pwm1_duty
 ---------------------------------------------------------------------------------
 (3) _get_idrv_pwm1_duty                                   6     4      2      25
                                              1 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _modbus_response_process                              6     4      2   25674
                                             24 BANK0      6     4      2
                         _crc_verify
            _modbus_response_command
   _modbus_response_illgeal_function
_modbus_response_write_mult_register
_modbus_response_write_single_regist
 ---------------------------------------------------------------------------------
 (2) _modbus_response_write_single_register               12    12      0    7386
                                             12 BANK0     12    12      0
                         _crc_append
                      _sys_data_save
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (2) _modbus_response_write_mult_register                  5     5      0    6758
                                             12 BANK0      5     5      0
                         _crc_append
                      _sys_data_save
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (2) _sys_data_save                                        0     0      0    2878
                         _crc_append
         _my_flash_read_system_erase
              _my_flash_system_write
 ---------------------------------------------------------------------------------
 (3) _my_flash_system_write                               16    12      4     473
                                              1 COMMON     6     2      4
                                              0 BANK0     10    10      0
 ---------------------------------------------------------------------------------
 (3) _my_flash_read_system_erase                           0     0      0     523
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     3     1      2     523
                                              1 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (2) _modbus_response_illgeal_function                     4     3      1    3840
                                             12 BANK0      4     3      1
                         _crc_append
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (2) _modbus_response_command                             12    12      0    5169
                                             12 BANK0     12    12      0
                         _crc_append
                     _getRegisterVal
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (1) _uart_send_len                                        4     3      1    1550
                                              8 COMMON     4     3      1
                      _m_mem_cpy_len
 ---------------------------------------------------------------------------------
 (3) _getRegisterVal                                      10     7      3     711
                                              1 COMMON    10     7      3
 ---------------------------------------------------------------------------------
 (3) _crc_append                                          11     7      4    1882
                                              7 COMMON     5     5      0
                                              6 BANK0      6     2      4
                            _crc_sum
 ---------------------------------------------------------------------------------
 (2) _crc_verify                                          10     6      4    2079
                                              8 COMMON     2     2      0
                                              6 BANK0      8     4      4
                            _crc_sum
                      _m_mem_cpy_len
 ---------------------------------------------------------------------------------
 (2) _m_mem_cpy_len                                        7     1      6     762
                                              1 COMMON     7     1      6
 ---------------------------------------------------------------------------------
 (4) _crc_sum                                             12     8      4     731
                                              1 COMMON     6     2      4
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _calc_temp_rs                                         8     4      4    2346
                                              5 BANK0      8     4      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) _calc_temp_rc                                        12     8      4    2346
                                              5 BANK0     12     8      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) _calc_rs_lo_avg                                       9     7      2    1072
                                             10 COMMON     2     2      0
                                              5 BANK0      7     5      2
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     770
                                              1 COMMON     9     1      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _calc_expect_vout_adc_value                          21    19      2    3624
                                             18 BANK0     21    19      2
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8    1576
                                              1 COMMON     8     0      8
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8    1345
                                              9 COMMON     1     1      0
                                              4 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _adc_sample                                          12    10      2    1014
                                              4 COMMON     5     3      2
                                              0 BANK0      7     7      0
                           _adc_init
                       _fvr_set_gain
 ---------------------------------------------------------------------------------
 (2) _fvr_set_gain                                         3     3      0      69
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _adc_init                                             2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     121
                    _ADC1_Initialize
                  _EUSART_Initialize
                     _FVR_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM1_Initialize
                    _PWM2_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0      98
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR2_SetInterruptHandler                             2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _ADC1_Initialize
     _EUSART_Initialize
     _FVR_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM1_Initialize
     _PWM2_Initialize
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
       _TMR2_StartTimer
     _WDT_Initialize
   _adc_sample
     _adc_init
     _fvr_set_gain
   _calc_expect_vout_adc_value
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _calc_rs_lo_avg
     ___lldiv
   _calc_temp_rc
     ___lldiv
     ___lmul
   _calc_temp_rs
     ___lldiv
     ___lmul
   _m_mem_cpy_len
   _modbus_response_process
     _crc_verify
       _crc_sum
       _m_mem_cpy_len
     _modbus_response_command
       _crc_append
         _crc_sum
       _getRegisterVal
       _uart_send_len
         _m_mem_cpy_len
     _modbus_response_illgeal_function
       _crc_append
         _crc_sum
       _uart_send_len
         _m_mem_cpy_len
     _modbus_response_write_mult_register
       _crc_append
         _crc_sum
       _sys_data_save
         _crc_append
           _crc_sum
         _my_flash_read_system_erase
           _FLASH_EraseBlock
         _my_flash_system_write
       _uart_send_len
         _m_mem_cpy_len
     _modbus_response_write_single_register
       _crc_append
         _crc_sum
       _sys_data_save
         _crc_append
           _crc_sum
         _my_flash_read_system_erase
           _FLASH_EraseBlock
         _my_flash_system_write
       _uart_send_len
         _m_mem_cpy_len
   _pid_pwm1_idrv_run
     ___aldiv
       ___lmul (ARG)
     ___lmul
     _set_idrv_pwm1_duty
       _get_idrv_pwm1_duty
   _pid_pwm2_vout_run
     ___awdiv
     ___lwdiv
     _set_vout_pwm2_duty
       _get_vout_pwm2_duty
   _sys_data_init
     ___wmul
     _crc_verify
       _crc_sum
       _m_mem_cpy_len
     _my_flash_system_read
     _sys_data_save
       _crc_append
         _crc_sum
       _my_flash_read_system_erase
         _FLASH_EraseBlock
       _my_flash_system_write
   _uart_received_start
   _uart_send_len
     _m_mem_cpy_len

 _INTERRUPT_InterruptManager (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3E0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     27      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      2      40       7       80.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      40       9       80.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      40      11       80.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     11D      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              3C      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           20      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     11D      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Tue Apr 09 20:05:11 2019

              __end_of_TMR2_SetInterruptHandler 1C7E                                               pc 0002  
                  ??_my_flash_read_system_erase 0074                                    ___awdiv@sign 0077  
                                            _x0 004B                                              _x1 00BC  
                                            _y0 004F                                              _y1 00C0  
                                            _ik 00D4                          __end_of_FVR_Initialize 1C6C  
                           ___wmul@multiplicand 0073                                             l511 0FE9  
                                           l621 1CEE                                             l633 1248  
                                           l627 1CC7                                             l652 17F9  
                                           l741 1465                                             l670 157B  
                                           l639 1262                                             l647 14E4  
                                           l663 0C58                                             l738 1411  
                                           l828 0D89                                             l668 1535  
                                           l792 10C8                                             l689 0AD3  
                                           _GIE 005F                                             _PR2 001B  
                               _pwm1DutyForIdrv 00DA                                             _x32 00B8  
                                           _y32 0047                                             _err 00A0  
                               _TMR2_Initialize 1CB3                                             wreg 0009  
                          ??_get_vout_pwm2_duty 0073                            ??_set_vout_pwm2_duty 0079  
                               ??_uart_send_len 0079                                            S5443 1800  
                                          l1070 1202                                            l1068 11E4  
                                          l1092 1D78                                            l1157 1374  
                                          l4103 1E8E                                            l3403 140C  
                                          l4051 10FA                                            l5021 1E36  
                                          l5101 17E5                                            l5005 15E4  
                                          l4061 1102                                            l4045 10EF  
                                          l5103 17F1                                            l5007 1616  
                                          l3423 143D                                            l3415 1423  
                                          l4063 110E                                            l5025 1E41  
                                          l3521 0F0A                                            l3513 0ED2  
                                          l3433 1450                                            l3425 143F  
                                          l4073 1129                                            l4171 128B  
                                          l5051 1395                                            l5043 1385  
                                          l3531 0F3F                                            l3523 0F17  
                                          l3515 0EDA                                            l5131 0C39  
                                          l4091 1E67                                            l5061 13C3  
                                          l5053 13A3                                            l5205 0A0A  
                                          l3541 0F6C                                            l3533 0F48  
                                          l3525 0F24                                            l3517 0EEA  
                                          l5133 0C41                                            l4077 1131  
                                          l4069 1120                                            l4093 1E73  
                                          l4159 1252                                            l3543 0F75  
                                          l3535 0F51                                            l3527 0F2D  
                                          l3519 0EFD                                            l3447 146D  
                                          l5135 0C50                                            l5151 1546  
                                          l5231 1690                                            l4169 1255  
                                          l5065 13CE                                            l3537 0F5A  
                                          l3529 0F36                                            l5241 170A  
                                          l5171 08EA                                            l4283 12C2  
                                          l4275 129E                                            l5083 14D0  
                                          l3539 0F63                                            l3547 0F7D  
                                          l4099 1E85                                            l5163 158C  
                                          l3717 1CE7                                            l5069 13DC  
                                          l5181 0947                                            l5085 14DC  
                                          l3549 0F8A                                            l5237 16E1  
                                          l3559 0FAD                                            l5263 11B3  
                                          l5327 0DE6                                            l5185 094F  
                                          l5265 11B8                                            l5273 11C9  
                                          l3761 105E                                            l5361 0E98  
                                          l5267 11BD                                            l5259 11A4  
                                          l5371 0EC9                                            l4901 0CE7  
                                          l5269 11C2                                            l5357 0E8F  
                                          l5199 09E9                                            l3759 1037  
                                          l4809 0FD4                                            l5369 0EC6  
                                          l3947 1D72                                            l3981 1155  
                                          l4773 1229                                            l4845 1EFE  
                                          l4933 0D8B                                            l4775 122E  
                                          l4767 1214                                            l4927 0D5B  
                                          l3993 1180                                            l4937 0D91  
                                          l4881 0C93                                            l3979 1147  
                                          l4875 0C83                                            l3989 1175  
                                          l4789 1DDF                                            l4893 0CC9  
                                          l4993 15E3                         __end_of_PWM1_Initialize 1D0A  
                                          _LATA 010C                                            u2215 13F6  
                                          _LATC 010E                                            u3035 1105  
                                          u3115 1E6A                                            u2245 1431  
                                          u3215 126F                                            u2415 1DB9  
                                          u3055 110F                                            u3135 1E74  
                                          u3225 1277                                            u2345 1D2C  
                                          u3065 1119                                            u3145 1E7E  
                                          u2425 1DD5                                            u3235 125E  
                                          u2275 1417                                            u3075 1121  
                                          u3155 1E86                                            u2355 1D45  
                                          u2390 10A1                                            u4225 0CA0  
                                          u2465 103D                                            u4075 11EA  
                                          u4155 1EFA                                            u4405 15BE  
                                          u5047 1243                                            u4505 1398  
                                          u4525 13A4                                            u4445 1E42  
                                          u2845 114A                                            u4285 0D08  
                                          u2765 1D79                                            u4535 13B8  
                                          u4455 1E49                                            u2775 1D7E  
                                          u4545 13C4                                            u4705 093D  
                                          u2865 1156                                            u2875 116A  
                                          u4733 09DF                                            u2885 1176  
                                          u4645 152E                                            u4655 153F  
                                          u4753 0A03                                            u4665 1574  
                                          u4905 0E24                                            u4675 1585  
                                          u4915 0E3B                                            u4925 0E52  
                                          u4695 091C                                   _m_mem_cpy_len 1DDF  
                                          _TMR2 001A                                            _WPUA 020C  
                                          _WPUC 020E                                            _main 0DBA  
modbus_response_write_single_register@startAddr 0036                                            _pidU 00D6  
           __size_of_my_flash_read_system_erase 0023                                            fsr0h 0005  
                                          fsr1h 0007                                            indf0 0000  
                                          fsr0l 0004                                            indf1 0001  
                                          fsr1l 0006                                            _xlen 0064  
                                          btemp 007E                                            start 088B  
                               _pwm2DutyForVout 00DC                       ??_modbus_response_command 002C  
                       __end_of_PWM2_Initialize 1D23                       ??_modbus_response_process 003A  
                               ?_FVR_Initialize 0070                  __size_of_OSCILLATOR_Initialize 0001  
                 __end_of_OSCILLATOR_Initialize 1000                                 __end_of___aldiv 13E5  
                                         ?_main 0070                                 __end_of___awdiv 1136  
                               __end_of___lldiv 1189                                 ___awdiv@divisor 0071  
                                         _T2CON 001C                                 __end_of___lwdiv 1E93  
                               ___awdiv@counter 0076                                           _RCREG 0199  
                                         _RCSTA 019D                                           _TRISA 008C  
                                         _TRISC 008E                                           _TXREG 019A  
                                         _TXSTA 019E                modbus_response_command@startAddr 0030  
                           ___lmul@multiplicand 0075                                           _PidKp 00D0  
                                         _PidTd 00CC                                           _Event 006B  
                                         _PidTi 00CE                                 __end_of_crc_sum 1233  
                                _WDT_Initialize 1C6C                                           _resRc 006E  
                                         _resRs 006C                                           _txBuf 01A0  
        modbus_response_write_mult_register@len 002E                                  ?_m_mem_cpy_len 0071  
        modbus_response_write_mult_register@stb 0030                      __end_of_get_idrv_pwm1_duty 1D3C  
                    __end_of_set_idrv_pwm1_duty 1DC3                              crc_verify@expected 002C  
                                         status 0003                                           wtemp0 007E  
                               _TMR2_StartTimer 1C65                                   fvr_set_gain@g 0073  
   __end_of_modbus_response_write_mult_register 1363    __size_of_modbus_response_write_mult_register 0072  
         ??_modbus_response_write_mult_register 002C            ?_modbus_response_write_mult_register 0070  
           _modbus_response_write_mult_register 12F1              __end_of_calc_expect_vout_adc_value 0AD8  
                    _calc_expect_vout_adc_value 08E4                                __end_of_HexTable 182F  
                          pid_pwm1_idrv_run@t32 003A                                 __initialization 088D  
                                  __end_of_main 0ECB                           __size_of_calc_temp_rc 00D9  
                         __size_of_calc_temp_rs 0090                         __end_of_TMR2_Initialize 1CC6  
                   ?_INTERRUPT_InterruptManager 0070             modbus_response_illgeal_function@buf 002E  
                      _TMR2_SetInterruptHandler 1C78                                          ??_main 00DE  
                              ??_calc_rs_lo_avg 007A                     modbus_response_process@rbuf 003D  
                 __size_of_my_flash_system_read 0038                     modbus_response_process@rlen 0038  
                   modbus_response_process@resp 003B                 __end_of_modbus_response_command 1653  
                        __end_of_WDT_Initialize 1C70                    my_flash_system_write@blocNum 0023  
                                        _ADCON0 009D                                          _ADCON1 009E  
                                        _ADCON2 009F                                          _ADRESH 009C  
                                        _ADRESL 009B                                ___awdiv@dividend 0073  
                                        _ANSELA 018C                                          _ANSELC 018E  
               __end_of_modbus_response_process 11DD                                __end_of_adc_init 1CDA  
                              ?_PWM1_Initialize 0070                                          _ODCONA 028C  
                                        _ODCONC 028E                                          i1l4513 0824  
                                        i1l4523 0831                                          i1l4507 081E  
                                        i1l4541 085A                                          i1l4525 0836  
                                        i1l4535 0844                                          i1l4543 085E  
                                        i1l4561 0880                                          i1l4553 086C  
                                        i1l4565 0884                                          _FVRCON 0117  
                                        _PMADRH 0192                                          _PMADRL 0191  
                                        _PMDATH 0194                                          _PMDATL 0193  
                                        _PMCON2 0196                       __size_of_FLASH_EraseBlock 001C  
                   __end_of_uart_received_start 1C74                                          _SPBRGH 019C  
                                        _SPBRGL 019B                                          _WDTCON 0097  
                                  _calc_temp_rc 1727                                    _calc_temp_rs 1473  
                               calc_rs_lo_avg@i 002B                                 calc_rs_lo_avg@x 0025  
            __end_of_my_flash_read_system_erase 102C                      _my_flash_read_system_erase 1009  
    modbus_response_write_single_register@pmdbs 0034                                          ___lmul 1E2D  
                                     ??___aldiv 0079                                          ___wmul 1D70  
                                     ??___awdiv 0075                                       ??___lldiv 0079  
                                     ??___lwdiv 0075                                          _idelta 00C4  
                              ?_PWM2_Initialize 0070                                          _pwm2Ei 00C8  
                              ___awdiv@quotient 0078                        my_flash_system_write@buf 0071  
                      my_flash_system_write@len 0073                        my_flash_system_write@loc 0025  
                                     ??_crc_sum 0075                        __size_of_ADC1_Initialize 0009  
                                        _rxtemp 0067                                 ?_WDT_Initialize 0070  
                               ??_m_mem_cpy_len 0077                my_flash_system_write@GIEBitValue 0022  
                       __end_of_TMR2_StartTimer 1C68        TMR2_SetInterruptHandler@InterruptHandler 0071  
               modbus_response_command@tempData 0036        __end_of_modbus_response_illgeal_function 10E5  
     __size_of_modbus_response_illgeal_function 0042              ??_modbus_response_illgeal_function 002D  
             ?_modbus_response_illgeal_function 002C                _modbus_response_illgeal_function 10A3  
                                 ?_fvr_set_gain 0070                                  fvr_set_gain@t8 0072  
                             _SYSTEM_Initialize 1D55                         __end_of__initialization 08E0  
                        __size_of_sys_data_init 00D4                           _my_flash_system_write 13E5  
                            ?_SYSTEM_Initialize 0070                          __size_of_sys_data_save 0036  
                            getRegisterVal@addr 0071                                  __pcstackCOMMON 0070  
                                  __pidataBANK0 1C74                                    __pidataBANK1 1C7E  
                           ??_SYSTEM_Initialize 0073                                      _adc_sample 1233  
        modbus_response_write_single_register@i 0033                                ?_TMR2_Initialize 0070  
                                _OPTION_REGbits 0095        modbus_response_write_single_register@t16 0031  
                             crc_append@message 0026                          getRegisterVal@tempAddr 007A  
                        my_flash_system_write@i 0029                          my_flash_system_write@j 0020  
                        getRegisterVal@tempData 0073                       __end_of_SYSTEM_Initialize 1D70  
                                ??_fvr_set_gain 0071                                      __pbssBANK0 0047  
                                    __pbssBANK1 00A0                                      __pbssBANK2 0120  
                                    __pbssBANK3 01A0                  modbus_response_command@tmpAddr 002E  
               my_flash_system_read@GIEBitValue 0077                                      adc_init@ch 0072  
                              ??_FVR_Initialize 0071                                      __pmaintext 0DBA  
                    modbus_response_command@len 0034                                         ?___lmul 0071  
                                       ?___wmul 0071                                      __pintentry 0804  
                  ??_calc_expect_vout_adc_value 0034                                         _BAUDCON 019F  
                                ___lmul@product 0020                                      _crc_append 1DFC  
                                     ?_adc_init 0070                                    adc_sample@ch 0020  
                                 _sys_data_init 1653                                   _sys_data_save 1E93  
                                    _crc_verify 1EC9                                   _eusartRxCount 006A  
                   __size_of_get_vout_pwm2_duty 0019                     __size_of_set_vout_pwm2_duty 001C  
                                       _PWM1DCH 0D94                                         _PWM1DCL 0D93  
                                       _PWM2DCH 0DA4                                         _PWM2DCL 0DA3  
                                       _PWM1CON 0D9B                                         _PWM2CON 0DAB  
                                       _PWM1OFH 0D98                                         _PWM1OFL 0D97  
                                       _PWM2OFH 0DA8                                         _PWM1PHH 0D92  
                                       _PWM2OFL 0DA7                                         _PWM1PHL 0D91  
                                       _PWM2PHH 0DA2                                         _PWM2PHL 0DA1  
                                       _PWM1PRH 0D96                                         _PWM1PRL 0D95  
                                       _PWM2PRH 0DA6                                         _PWM2PRL 0DA5  
         modbus_response_illgeal_function@pmdbs 002F                                         _PPSLOCK 0E0F  
                             ??_ADC1_Initialize 0071                                ?_TMR2_StartTimer 0070  
                        set_idrv_pwm1_duty@duty 0077                           __end_of_uart_send_len 0FFF  
                              _FLASH_EraseBlock 1D8B                          ?_my_flash_system_write 0071  
                       __size_of_getRegisterVal 00F9                     ?_calc_expect_vout_adc_value 0032  
   modbus_response_write_single_register@fiSave 0030                      ??_TMR2_SetInterruptHandler 0073  
                                       ___aldiv 1363                                         ___awdiv 10E5  
                               __size_of___lmul 0032                                         ___lldiv 1136  
                               __size_of___wmul 001B                              _get_idrv_pwm1_duty 1D23  
                            _set_idrv_pwm1_duty 1DA7                                         ___lwdiv 1E5F  
                                   ?_adc_sample 0074                                  adc_sample@gfvr 0074  
                                ?_sys_data_init 0070                                  ?_sys_data_save 0070  
                                    ??_adc_init 0071                                         __ptext1 1C70  
                                       __ptext2 1653                                         __ptext3 102C  
                                       __ptext4 1D70                                         __ptext5 1503  
                                       __ptext6 1DC3                                         __ptext7 1D3C  
                                       __ptext8 1E5F                                         __ptext9 10E5  
                                       _crc_sum 11DD                                         _pidBbSm 0063  
                                       _iexcept 00C6                             ?_get_idrv_pwm1_duty 0071  
                           ?_set_idrv_pwm1_duty 0077                           _OSCILLATOR_Initialize 0FFF  
                                     _T2CONbits 001C                                      _rsLoAvgBuf 00AC  
                                       _rsLoAvg 0053                                ___aldiv@dividend 0028  
                      ??_PIN_MANAGER_Initialize 0071                                         _txCount 0065  
                                       _sysData 235C                      __size_of_SYSTEM_Initialize 001B  
                                       clrloop0 1C89                            end_of_initialization 08E0  
                                       init_ram 1C94                        ?_modbus_response_command 0070  
                                       initloop 1C95                    __end_of_my_flash_system_read 1064  
                          ??_get_idrv_pwm1_duty 0073                            ??_set_idrv_pwm1_duty 0079  
                             _EUSART_Initialize 1CA0                                 ___lldiv@divisor 0071  
                                    _voExpectMv 00CA                                 ___lldiv@counter 0024  
                            ?_EUSART_Initialize 0070                        ?_modbus_response_process 0038  
                                     _RCSTAbits 019D                     ?_my_flash_read_system_erase 0070  
                              ___aldiv@quotient 002E                                       _PWM1LDCON 0D9F  
                                     _PWM2LDCON 0DAF                                       _PWM1OFCON 0DA0  
                                     _PWM2OFCON 0DB0                            __end_of_fvr_set_gain 1CF1  
                                   ?_crc_append 0026                                      _subTickerX 0069  
                           ??_EUSART_Initialize 0071                                ??_WDT_Initialize 0071  
                                   ?_crc_verify 0026                                      crc_sum@crc 0024  
                                    crc_sum@buf 0071                                      crc_sum@len 0073  
                                     _RXPPSbits 0E15                             __size_of_adc_sample 005D  
                     __end_of_EUSART_Initialize 1CB3                                    _globalTicker 00D2  
                                     _TXSTAbits 019E                        __size_of_PWM1_Initialize 0019  
                  __size_of_uart_received_start 0004                    _TMR2_DefaultInterruptHandler 0000  
                               ??_sys_data_init 002E                                 ??_sys_data_save 007C  
                                __end_of___lmul 1E5F                                  __end_of___wmul 1D8B  
                              _voExpectAdcValue 0055                                  _rtAdcValueRcHi 0059  
                                _rtAdcValueRcLo 005B                                  _rtAdcValueRsHi 005D  
                                _rtAdcValueVoFb 0057                                  _rtAdcValueRsLo 005F  
                        ?_OSCILLATOR_Initialize 0070                               crc_verify@message 0026  
                           start_initialization 088D                        __size_of_PWM2_Initialize 0019  
               __size_of_PIN_MANAGER_Initialize 003F                                   _PWM1LDCONbits 0D9F  
                       my_flash_system_read@buf 0071                         my_flash_system_read@len 0073  
                         __end_of_m_mem_cpy_len 1DFC                                   _PWM2LDCONbits 0DAF  
                                _getRegisterVal 0ECB                         __size_of_calc_rs_lo_avg 0061  
                           __size_of_crc_append 0031                             __size_of_crc_verify 0037  
     modbus_response_write_single_register@rbuf 0035                                        ??___lmul 0079  
                                      ??___wmul 0075                                     __pdataBANK0 006C  
                                   __pdataBANK1 00D4                     FLASH_EraseBlock@GIEBitValue 0073  
                               _ADC1_Initialize 1000                        __end_of_FLASH_EraseBlock 1DA7  
                          _my_flash_system_read 102C                                     __pbssBIGRAM 235C  
                             __size_of_adc_init 0014                                     __pbssCOMMON 007C  
                                     ___latbits 0002                               getRegisterVal@t16 0078  
                                 __pcstackBANK0 0020                                   __pcstackBANK1 00DE  
                      __size_of_TMR2_Initialize 0013                         ??_my_flash_system_write 0075  
                        __end_of_getRegisterVal 0FC4                           my_flash_system_read@i 007A  
                    __size_of_EUSART_Initialize 0013         modbus_response_illgeal_function@errcode 002C  
                         __size_of_fvr_set_gain 0017                                ___lwdiv@dividend 0073  
                        _PIN_MANAGER_Initialize 1064                     modbus_response_command@rbuf 0035  
                                      ?___aldiv 0024                           get_idrv_pwm1_duty@t16 0075  
                                      ?___awdiv 0071                                        ?___lldiv 0071  
                                  ??_adc_sample 0076                                     adc_sample@i 0021  
                                      ?___lwdiv 0071                               ??_PWM1_Initialize 0071  
                  ??_INTERRUPT_InterruptManager 0070                           set_idrv_pwm1_duty@t16 0079  
                                     __pswtext1 1800                                        ?_crc_sum 0071  
                 my_flash_system_read@flashAddr 0078                      __end_of_get_vout_pwm2_duty 1D55  
                         ?_my_flash_system_read 0071                      __end_of_set_vout_pwm2_duty 1DDF  
                              uart_send_len@buf 007B                                uart_send_len@len 0078  
                                 adc_sample@t16 0025                                ___lwdiv@quotient 0076  
                                 adc_sample@ret 0023                                   adc_sample@num 0075  
                               ?_getRegisterVal 0071                                    _fvr_set_gain 1CDA  
                                _eusartRxBuffer 0140                                       _modbusBuf 0120  
                               ___aldiv@divisor 0024                               ??_PWM2_Initialize 0071  
                            __end_of_adc_sample 1290                                 ___aldiv@counter 002C  
                                ___wmul@product 0075                                       _pidpwm2_U 00D8  
                             _pid_pwm1_idrv_run 0AD8                                       clear_ram0 1C88  
                                m_mem_cpy_len@d 0071                                  m_mem_cpy_len@s 0073  
                                 ?_calc_temp_rc 0025                                   ?_calc_temp_rs 0025  
                                      _PIE1bits 0091                        __size_of_TMR2_StartTimer 0003  
                        set_vout_pwm2_duty@duty 0077             __size_of_INTERRUPT_InterruptManager 0087  
                            ?_pid_pwm1_idrv_run 0070                         __end_of_ADC1_Initialize 1009  
                                      _PIR1bits 0011                                        _PIR3bits 0013  
                     FLASH_EraseBlock@startAddr 0071                                        _PWM1INTE 0D9C  
                                      _PWM1INTF 0D9D                                        _PWM2INTE 0DAC  
                                      _PWM2INTF 0DAD                                        _PWM1TMRH 0D9A  
                                      _PWM1TMRL 0D99                                        _PWM2TMRH 0DAA  
                                      _PWM2TMRL 0DA9                                    ??_crc_append 0077  
              __size_of_modbus_response_command 00BF                             ??_pid_pwm1_idrv_run 0032  
                        __size_of_uart_send_len 003B                                      _ADCON0bits 009D  
                             ___wmul@multiplier 0071                                    ??_crc_verify 0078  
                       __size_of_FVR_Initialize 0004                __size_of_modbus_response_process 0054  
             __size_of_TMR2_SetInterruptHandler 0006                       ?_TMR2_SetInterruptHandler 0071  
                                   _isRunInBoot 0FFF                             _uart_received_start 1C70  
                             _pid_pwm2_vout_run 1503                                        _HexTable 181E  
                             ___lmul@multiplier 0071                                crc_verify@crccal 002A  
                                _calc_rs_lo_avg 1290                              ?_pid_pwm2_vout_run 0070  
                     __end_of_pid_pwm1_idrv_run 0C66                               ??_TMR2_Initialize 0073  
                                ??_calc_temp_rc 0029                                  ??_calc_temp_rs 0029  
                            __end_of_crc_append 1E2D                               calc_rs_lo_avg@t32 0027  
                   __size_of_get_idrv_pwm1_duty 0019                     __size_of_set_idrv_pwm1_duty 001C  
                           ??_pid_pwm2_vout_run 0020                              __end_of_crc_verify 1F00  
                                  _PWM1INTFbits 0D9D                            ?_uart_received_start 0070  
                                  _PWM2INTFbits 0DAD                         ??_OSCILLATOR_Initialize 0071  
       modbus_response_write_mult_register@rbuf 002F                                __size_of___aldiv 0082  
                              __size_of___awdiv 0051                                __size_of___lldiv 0053  
                              __size_of___lwdiv 0034                          ??_my_flash_system_read 0075  
                                      _adc_init 1CC6                                __size_of_crc_sum 0056  
                         pid_pwm2_vout_run@__ei 0022                             _eusartRxIdleTime_ms 007C  
                     __end_of_pid_pwm2_vout_run 1594                                   crc_append@crc 002A  
                              sys_data_init@ret 0034                                 ___lwdiv@divisor 0071  
                               ___lwdiv@counter 0078                                        __ptext10 0AD8  
                                      __ptext11 1DA7                                        __ptext20 10A3  
                                      __ptext12 1D23                                        __ptext21 1594  
                                      __ptext13 1189                                        __ptext30 1290  
                                      __ptext22 0FC4                                        __ptext14 0C66  
                                      __ptext31 1136                                        __ptext23 0ECB  
                                      __ptext15 12F1                                        __ptext40 1CB3  
                                      __ptext32 08E4                                        __ptext24 1DFC  
                                      __ptext16 1E93                                        __ptext41 1C65  
                                      __ptext33 1E2D                                        __ptext25 1EC9  
                                      __ptext17 13E5                                        __ptext42 1C78  
                                      __ptext34 1363                                        __ptext26 1DDF  
                                      __ptext18 1009                                        __ptext43 1D0A  
                                      __ptext35 1233                                        __ptext27 11DD  
                                      __ptext19 1D8B                                        __ptext44 1CF1  
                                      __ptext36 1CDA                                        __ptext28 1473  
                                      __ptext45 1064                                        __ptext37 1CC6  
                                      __ptext29 1727                                        __ptext46 0FFF  
                                      __ptext38 1D55                                        __ptext47 1C68  
                                      __ptext39 1C6C                                        __ptext48 1CA0  
                                      __ptext49 1000                          __end_of_calc_rs_lo_avg 12F1  
                                 _uart_send_len 0FC4                           get_vout_pwm2_duty@t16 0075  
                                 __size_of_main 0111                                   _subTickerX_1s 0068  
                         set_vout_pwm2_duty@t16 0079                                      _RA4PPSbits 0E94  
                         ??_uart_received_start 0071                                      _RA5PPSbits 0E95  
                                      _txBufLen 0066                                ?_ADC1_Initialize 0070  
                my_flash_system_write@flashAddr 0027                                        int$flags 007E  
                                      crc_sum@i 0022                                        crc_sum@j 0020  
                                    _RC5PPSbits 0EA5   __end_of_modbus_response_write_single_register 0DBA  
__size_of_modbus_response_write_single_register 0154         ??_modbus_response_write_single_register 002C  
        ?_modbus_response_write_single_register 0070           _modbus_response_write_single_register 0C66  
                             ??_TMR2_StartTimer 0071              __end_of_INTERRUPT_InterruptManager 088B  
                    _INTERRUPT_InterruptManager 0804                           __end_of_sys_data_init 1727  
                         __end_of_sys_data_save 1EC9                               ?_FLASH_EraseBlock 0071  
                 calc_expect_vout_adc_value@t32 0042                     PIN_MANAGER_Initialize@state 0071  
                      modbus_response_command@i 0032                              ??_FLASH_EraseBlock 0073  
                                    _INTCONbits 000B                                     _PWM1CONbits 0D9B  
                              m_mem_cpy_len@len 0075                                      _FVRCONbits 0117  
                                   _PWM2CONbits 0DAB                                 ?_calc_rs_lo_avg 0025  
                  modbus_response_process@pmdbs 003C                         __size_of_WDT_Initialize 0004  
                                ?_uart_send_len 0078                                        intlevel1 0000  
                __size_of_my_flash_system_write 008E                            pid_pwm2_vout_run@t16 0024  
                 __end_of_my_flash_system_write 1473                      __size_of_pid_pwm1_idrv_run 018E  
                                    _PMCON1bits 0195                                ___lldiv@dividend 0075  
                       ?_PIN_MANAGER_Initialize 0070    modbus_response_write_mult_register@startAddr 002D  
                                   _PPSLOCKbits 0E0F                                 _PWM1_Initialize 1CF1  
                  modbus_response_command@pmdbs 0033                         _modbus_response_command 1594  
                                    _PWM1CLKCON 0D9E                                      _PWM2CLKCON 0DAE  
                        __size_of_m_mem_cpy_len 001D                                   __pstringtext1 181E  
                                _FVR_Initialize 1C68                         _modbus_response_process 1189  
                                sys_data_init@i 0036                                     crc_append@n 0028  
                          __end_of_calc_temp_rc 1800                            __end_of_calc_temp_rs 1503  
                              ___lldiv@quotient 0020                                ??_getRegisterVal 0074  
                               _PWM2_Initialize 1D0A                      __size_of_pid_pwm2_vout_run 0091  
                                  ___aldiv@sign 002D                     calc_expect_vout_adc_value@i 0046  
                   calc_expect_vout_adc_value@x 0032             __size_of_calc_expect_vout_adc_value 01F4  
                __end_of_PIN_MANAGER_Initialize 10A3                              _get_vout_pwm2_duty 1D3C  
                            _set_vout_pwm2_duty 1DC3                           _TMR2_InterruptHandler 0061  
                                   crc_verify@n 0028                             ?_get_vout_pwm2_duty 0071  
                           ?_set_vout_pwm2_duty 0077  
