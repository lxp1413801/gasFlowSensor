

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Sat Mar 30 14:14:00 2019

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16F1575
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	swtext1,local,class=CONST,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    55                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	intentry,global,class=CODE,delta=2
    72                           	dabs	1,0x620,32
    73                           	dabs	1,0x5A0,80
    74                           	dabs	1,0x55C,20
    75                           	dabs	1,0xFFF,1,_isRunInBoot
    76                           	dabs	1,0x235C,0,_sysData
    77                           	dabs	1,0x7E,2
    78  0000                     
    79                           ; Version 2.00
    80                           ; Generated 27/05/2018 GMT
    81                           ; 
    82                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution.
    96                           ; 
    97                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    98                           ;        software without specific prior written permission.
    99                           ; 
   100                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   101                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   102                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   103                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   104                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   105                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   106                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   107                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   108                           ; 
   109                           ; 
   110                           ; Code-generator required, PIC16F1575 Definitions
   111                           ; 
   112                           ; SFR Addresses
   113  0000                     	;# 
   114  0001                     	;# 
   115  0002                     	;# 
   116  0003                     	;# 
   117  0004                     	;# 
   118  0005                     	;# 
   119  0006                     	;# 
   120  0007                     	;# 
   121  0008                     	;# 
   122  0009                     	;# 
   123  000A                     	;# 
   124  000B                     	;# 
   125  000C                     	;# 
   126  000E                     	;# 
   127  0011                     	;# 
   128  0012                     	;# 
   129  0013                     	;# 
   130  0015                     	;# 
   131  0016                     	;# 
   132  0016                     	;# 
   133  0017                     	;# 
   134  0018                     	;# 
   135  0019                     	;# 
   136  001A                     	;# 
   137  001B                     	;# 
   138  001C                     	;# 
   139  008C                     	;# 
   140  008E                     	;# 
   141  0091                     	;# 
   142  0092                     	;# 
   143  0093                     	;# 
   144  0095                     	;# 
   145  0096                     	;# 
   146  0097                     	;# 
   147  0098                     	;# 
   148  0099                     	;# 
   149  009A                     	;# 
   150  009B                     	;# 
   151  009B                     	;# 
   152  009C                     	;# 
   153  009D                     	;# 
   154  009E                     	;# 
   155  009F                     	;# 
   156  010C                     	;# 
   157  010E                     	;# 
   158  0111                     	;# 
   159  0112                     	;# 
   160  0113                     	;# 
   161  0114                     	;# 
   162  0115                     	;# 
   163  0116                     	;# 
   164  0117                     	;# 
   165  0118                     	;# 
   166  0119                     	;# 
   167  018C                     	;# 
   168  018E                     	;# 
   169  0191                     	;# 
   170  0191                     	;# 
   171  0192                     	;# 
   172  0193                     	;# 
   173  0193                     	;# 
   174  0194                     	;# 
   175  0195                     	;# 
   176  0196                     	;# 
   177  0197                     	;# 
   178  0199                     	;# 
   179  019A                     	;# 
   180  019B                     	;# 
   181  019B                     	;# 
   182  019C                     	;# 
   183  019D                     	;# 
   184  019E                     	;# 
   185  019F                     	;# 
   186  020C                     	;# 
   187  020E                     	;# 
   188  028C                     	;# 
   189  028E                     	;# 
   190  030C                     	;# 
   191  030E                     	;# 
   192  038C                     	;# 
   193  038E                     	;# 
   194  0391                     	;# 
   195  0392                     	;# 
   196  0393                     	;# 
   197  0397                     	;# 
   198  0398                     	;# 
   199  0399                     	;# 
   200  0691                     	;# 
   201  0692                     	;# 
   202  0693                     	;# 
   203  0694                     	;# 
   204  0695                     	;# 
   205  0D8E                     	;# 
   206  0D8F                     	;# 
   207  0D90                     	;# 
   208  0D91                     	;# 
   209  0D91                     	;# 
   210  0D92                     	;# 
   211  0D93                     	;# 
   212  0D93                     	;# 
   213  0D94                     	;# 
   214  0D95                     	;# 
   215  0D95                     	;# 
   216  0D96                     	;# 
   217  0D97                     	;# 
   218  0D97                     	;# 
   219  0D98                     	;# 
   220  0D99                     	;# 
   221  0D99                     	;# 
   222  0D9A                     	;# 
   223  0D9B                     	;# 
   224  0D9C                     	;# 
   225  0D9C                     	;# 
   226  0D9D                     	;# 
   227  0D9D                     	;# 
   228  0D9E                     	;# 
   229  0D9F                     	;# 
   230  0DA0                     	;# 
   231  0DA1                     	;# 
   232  0DA1                     	;# 
   233  0DA2                     	;# 
   234  0DA3                     	;# 
   235  0DA3                     	;# 
   236  0DA4                     	;# 
   237  0DA5                     	;# 
   238  0DA5                     	;# 
   239  0DA6                     	;# 
   240  0DA7                     	;# 
   241  0DA7                     	;# 
   242  0DA8                     	;# 
   243  0DA9                     	;# 
   244  0DA9                     	;# 
   245  0DAA                     	;# 
   246  0DAB                     	;# 
   247  0DAC                     	;# 
   248  0DAC                     	;# 
   249  0DAD                     	;# 
   250  0DAD                     	;# 
   251  0DAE                     	;# 
   252  0DAF                     	;# 
   253  0DB0                     	;# 
   254  0DB1                     	;# 
   255  0DB1                     	;# 
   256  0DB2                     	;# 
   257  0DB3                     	;# 
   258  0DB3                     	;# 
   259  0DB4                     	;# 
   260  0DB5                     	;# 
   261  0DB5                     	;# 
   262  0DB6                     	;# 
   263  0DB7                     	;# 
   264  0DB7                     	;# 
   265  0DB8                     	;# 
   266  0DB9                     	;# 
   267  0DB9                     	;# 
   268  0DBA                     	;# 
   269  0DBB                     	;# 
   270  0DBC                     	;# 
   271  0DBC                     	;# 
   272  0DBD                     	;# 
   273  0DBD                     	;# 
   274  0DBE                     	;# 
   275  0DBF                     	;# 
   276  0DC0                     	;# 
   277  0DC1                     	;# 
   278  0DC1                     	;# 
   279  0DC2                     	;# 
   280  0DC3                     	;# 
   281  0DC3                     	;# 
   282  0DC4                     	;# 
   283  0DC5                     	;# 
   284  0DC5                     	;# 
   285  0DC6                     	;# 
   286  0DC7                     	;# 
   287  0DC7                     	;# 
   288  0DC8                     	;# 
   289  0DC9                     	;# 
   290  0DC9                     	;# 
   291  0DCA                     	;# 
   292  0DCB                     	;# 
   293  0DCC                     	;# 
   294  0DCC                     	;# 
   295  0DCD                     	;# 
   296  0DCD                     	;# 
   297  0DCE                     	;# 
   298  0DCF                     	;# 
   299  0DD0                     	;# 
   300  0E0F                     	;# 
   301  0E10                     	;# 
   302  0E11                     	;# 
   303  0E12                     	;# 
   304  0E13                     	;# 
   305  0E14                     	;# 
   306  0E15                     	;# 
   307  0E16                     	;# 
   308  0E17                     	;# 
   309  0E90                     	;# 
   310  0E91                     	;# 
   311  0E92                     	;# 
   312  0E94                     	;# 
   313  0E95                     	;# 
   314  0EA0                     	;# 
   315  0EA1                     	;# 
   316  0EA2                     	;# 
   317  0EA3                     	;# 
   318  0EA4                     	;# 
   319  0EA5                     	;# 
   320  0FE4                     	;# 
   321  0FE5                     	;# 
   322  0FE6                     	;# 
   323  0FE7                     	;# 
   324  0FE8                     	;# 
   325  0FE8                     	;# 
   326  0FE9                     	;# 
   327  0FEA                     	;# 
   328  0FEA                     	;# 
   329  0FEB                     	;# 
   330  0FED                     	;# 
   331  0FEE                     	;# 
   332  0FEE                     	;# 
   333  0FEF                     	;# 
   334  0000                     	;# 
   335  0001                     	;# 
   336  0002                     	;# 
   337  0003                     	;# 
   338  0004                     	;# 
   339  0005                     	;# 
   340  0006                     	;# 
   341  0007                     	;# 
   342  0008                     	;# 
   343  0009                     	;# 
   344  000A                     	;# 
   345  000B                     	;# 
   346  000C                     	;# 
   347  000E                     	;# 
   348  0011                     	;# 
   349  0012                     	;# 
   350  0013                     	;# 
   351  0015                     	;# 
   352  0016                     	;# 
   353  0016                     	;# 
   354  0017                     	;# 
   355  0018                     	;# 
   356  0019                     	;# 
   357  001A                     	;# 
   358  001B                     	;# 
   359  001C                     	;# 
   360  008C                     	;# 
   361  008E                     	;# 
   362  0091                     	;# 
   363  0092                     	;# 
   364  0093                     	;# 
   365  0095                     	;# 
   366  0096                     	;# 
   367  0097                     	;# 
   368  0098                     	;# 
   369  0099                     	;# 
   370  009A                     	;# 
   371  009B                     	;# 
   372  009B                     	;# 
   373  009C                     	;# 
   374  009D                     	;# 
   375  009E                     	;# 
   376  009F                     	;# 
   377  010C                     	;# 
   378  010E                     	;# 
   379  0111                     	;# 
   380  0112                     	;# 
   381  0113                     	;# 
   382  0114                     	;# 
   383  0115                     	;# 
   384  0116                     	;# 
   385  0117                     	;# 
   386  0118                     	;# 
   387  0119                     	;# 
   388  018C                     	;# 
   389  018E                     	;# 
   390  0191                     	;# 
   391  0191                     	;# 
   392  0192                     	;# 
   393  0193                     	;# 
   394  0193                     	;# 
   395  0194                     	;# 
   396  0195                     	;# 
   397  0196                     	;# 
   398  0197                     	;# 
   399  0199                     	;# 
   400  019A                     	;# 
   401  019B                     	;# 
   402  019B                     	;# 
   403  019C                     	;# 
   404  019D                     	;# 
   405  019E                     	;# 
   406  019F                     	;# 
   407  020C                     	;# 
   408  020E                     	;# 
   409  028C                     	;# 
   410  028E                     	;# 
   411  030C                     	;# 
   412  030E                     	;# 
   413  038C                     	;# 
   414  038E                     	;# 
   415  0391                     	;# 
   416  0392                     	;# 
   417  0393                     	;# 
   418  0397                     	;# 
   419  0398                     	;# 
   420  0399                     	;# 
   421  0691                     	;# 
   422  0692                     	;# 
   423  0693                     	;# 
   424  0694                     	;# 
   425  0695                     	;# 
   426  0D8E                     	;# 
   427  0D8F                     	;# 
   428  0D90                     	;# 
   429  0D91                     	;# 
   430  0D91                     	;# 
   431  0D92                     	;# 
   432  0D93                     	;# 
   433  0D93                     	;# 
   434  0D94                     	;# 
   435  0D95                     	;# 
   436  0D95                     	;# 
   437  0D96                     	;# 
   438  0D97                     	;# 
   439  0D97                     	;# 
   440  0D98                     	;# 
   441  0D99                     	;# 
   442  0D99                     	;# 
   443  0D9A                     	;# 
   444  0D9B                     	;# 
   445  0D9C                     	;# 
   446  0D9C                     	;# 
   447  0D9D                     	;# 
   448  0D9D                     	;# 
   449  0D9E                     	;# 
   450  0D9F                     	;# 
   451  0DA0                     	;# 
   452  0DA1                     	;# 
   453  0DA1                     	;# 
   454  0DA2                     	;# 
   455  0DA3                     	;# 
   456  0DA3                     	;# 
   457  0DA4                     	;# 
   458  0DA5                     	;# 
   459  0DA5                     	;# 
   460  0DA6                     	;# 
   461  0DA7                     	;# 
   462  0DA7                     	;# 
   463  0DA8                     	;# 
   464  0DA9                     	;# 
   465  0DA9                     	;# 
   466  0DAA                     	;# 
   467  0DAB                     	;# 
   468  0DAC                     	;# 
   469  0DAC                     	;# 
   470  0DAD                     	;# 
   471  0DAD                     	;# 
   472  0DAE                     	;# 
   473  0DAF                     	;# 
   474  0DB0                     	;# 
   475  0DB1                     	;# 
   476  0DB1                     	;# 
   477  0DB2                     	;# 
   478  0DB3                     	;# 
   479  0DB3                     	;# 
   480  0DB4                     	;# 
   481  0DB5                     	;# 
   482  0DB5                     	;# 
   483  0DB6                     	;# 
   484  0DB7                     	;# 
   485  0DB7                     	;# 
   486  0DB8                     	;# 
   487  0DB9                     	;# 
   488  0DB9                     	;# 
   489  0DBA                     	;# 
   490  0DBB                     	;# 
   491  0DBC                     	;# 
   492  0DBC                     	;# 
   493  0DBD                     	;# 
   494  0DBD                     	;# 
   495  0DBE                     	;# 
   496  0DBF                     	;# 
   497  0DC0                     	;# 
   498  0DC1                     	;# 
   499  0DC1                     	;# 
   500  0DC2                     	;# 
   501  0DC3                     	;# 
   502  0DC3                     	;# 
   503  0DC4                     	;# 
   504  0DC5                     	;# 
   505  0DC5                     	;# 
   506  0DC6                     	;# 
   507  0DC7                     	;# 
   508  0DC7                     	;# 
   509  0DC8                     	;# 
   510  0DC9                     	;# 
   511  0DC9                     	;# 
   512  0DCA                     	;# 
   513  0DCB                     	;# 
   514  0DCC                     	;# 
   515  0DCC                     	;# 
   516  0DCD                     	;# 
   517  0DCD                     	;# 
   518  0DCE                     	;# 
   519  0DCF                     	;# 
   520  0DD0                     	;# 
   521  0E0F                     	;# 
   522  0E10                     	;# 
   523  0E11                     	;# 
   524  0E12                     	;# 
   525  0E13                     	;# 
   526  0E14                     	;# 
   527  0E15                     	;# 
   528  0E16                     	;# 
   529  0E17                     	;# 
   530  0E90                     	;# 
   531  0E91                     	;# 
   532  0E92                     	;# 
   533  0E94                     	;# 
   534  0E95                     	;# 
   535  0EA0                     	;# 
   536  0EA1                     	;# 
   537  0EA2                     	;# 
   538  0EA3                     	;# 
   539  0EA4                     	;# 
   540  0EA5                     	;# 
   541  0FE4                     	;# 
   542  0FE5                     	;# 
   543  0FE6                     	;# 
   544  0FE7                     	;# 
   545  0FE8                     	;# 
   546  0FE8                     	;# 
   547  0FE9                     	;# 
   548  0FEA                     	;# 
   549  0FEA                     	;# 
   550  0FEB                     	;# 
   551  0FED                     	;# 
   552  0FEE                     	;# 
   553  0FEE                     	;# 
   554  0FEF                     	;# 
   555  0000                     	;# 
   556  0001                     	;# 
   557  0002                     	;# 
   558  0003                     	;# 
   559  0004                     	;# 
   560  0005                     	;# 
   561  0006                     	;# 
   562  0007                     	;# 
   563  0008                     	;# 
   564  0009                     	;# 
   565  000A                     	;# 
   566  000B                     	;# 
   567  000C                     	;# 
   568  000E                     	;# 
   569  0011                     	;# 
   570  0012                     	;# 
   571  0013                     	;# 
   572  0015                     	;# 
   573  0016                     	;# 
   574  0016                     	;# 
   575  0017                     	;# 
   576  0018                     	;# 
   577  0019                     	;# 
   578  001A                     	;# 
   579  001B                     	;# 
   580  001C                     	;# 
   581  008C                     	;# 
   582  008E                     	;# 
   583  0091                     	;# 
   584  0092                     	;# 
   585  0093                     	;# 
   586  0095                     	;# 
   587  0096                     	;# 
   588  0097                     	;# 
   589  0098                     	;# 
   590  0099                     	;# 
   591  009A                     	;# 
   592  009B                     	;# 
   593  009B                     	;# 
   594  009C                     	;# 
   595  009D                     	;# 
   596  009E                     	;# 
   597  009F                     	;# 
   598  010C                     	;# 
   599  010E                     	;# 
   600  0111                     	;# 
   601  0112                     	;# 
   602  0113                     	;# 
   603  0114                     	;# 
   604  0115                     	;# 
   605  0116                     	;# 
   606  0117                     	;# 
   607  0118                     	;# 
   608  0119                     	;# 
   609  018C                     	;# 
   610  018E                     	;# 
   611  0191                     	;# 
   612  0191                     	;# 
   613  0192                     	;# 
   614  0193                     	;# 
   615  0193                     	;# 
   616  0194                     	;# 
   617  0195                     	;# 
   618  0196                     	;# 
   619  0197                     	;# 
   620  0199                     	;# 
   621  019A                     	;# 
   622  019B                     	;# 
   623  019B                     	;# 
   624  019C                     	;# 
   625  019D                     	;# 
   626  019E                     	;# 
   627  019F                     	;# 
   628  020C                     	;# 
   629  020E                     	;# 
   630  028C                     	;# 
   631  028E                     	;# 
   632  030C                     	;# 
   633  030E                     	;# 
   634  038C                     	;# 
   635  038E                     	;# 
   636  0391                     	;# 
   637  0392                     	;# 
   638  0393                     	;# 
   639  0397                     	;# 
   640  0398                     	;# 
   641  0399                     	;# 
   642  0691                     	;# 
   643  0692                     	;# 
   644  0693                     	;# 
   645  0694                     	;# 
   646  0695                     	;# 
   647  0D8E                     	;# 
   648  0D8F                     	;# 
   649  0D90                     	;# 
   650  0D91                     	;# 
   651  0D91                     	;# 
   652  0D92                     	;# 
   653  0D93                     	;# 
   654  0D93                     	;# 
   655  0D94                     	;# 
   656  0D95                     	;# 
   657  0D95                     	;# 
   658  0D96                     	;# 
   659  0D97                     	;# 
   660  0D97                     	;# 
   661  0D98                     	;# 
   662  0D99                     	;# 
   663  0D99                     	;# 
   664  0D9A                     	;# 
   665  0D9B                     	;# 
   666  0D9C                     	;# 
   667  0D9C                     	;# 
   668  0D9D                     	;# 
   669  0D9D                     	;# 
   670  0D9E                     	;# 
   671  0D9F                     	;# 
   672  0DA0                     	;# 
   673  0DA1                     	;# 
   674  0DA1                     	;# 
   675  0DA2                     	;# 
   676  0DA3                     	;# 
   677  0DA3                     	;# 
   678  0DA4                     	;# 
   679  0DA5                     	;# 
   680  0DA5                     	;# 
   681  0DA6                     	;# 
   682  0DA7                     	;# 
   683  0DA7                     	;# 
   684  0DA8                     	;# 
   685  0DA9                     	;# 
   686  0DA9                     	;# 
   687  0DAA                     	;# 
   688  0DAB                     	;# 
   689  0DAC                     	;# 
   690  0DAC                     	;# 
   691  0DAD                     	;# 
   692  0DAD                     	;# 
   693  0DAE                     	;# 
   694  0DAF                     	;# 
   695  0DB0                     	;# 
   696  0DB1                     	;# 
   697  0DB1                     	;# 
   698  0DB2                     	;# 
   699  0DB3                     	;# 
   700  0DB3                     	;# 
   701  0DB4                     	;# 
   702  0DB5                     	;# 
   703  0DB5                     	;# 
   704  0DB6                     	;# 
   705  0DB7                     	;# 
   706  0DB7                     	;# 
   707  0DB8                     	;# 
   708  0DB9                     	;# 
   709  0DB9                     	;# 
   710  0DBA                     	;# 
   711  0DBB                     	;# 
   712  0DBC                     	;# 
   713  0DBC                     	;# 
   714  0DBD                     	;# 
   715  0DBD                     	;# 
   716  0DBE                     	;# 
   717  0DBF                     	;# 
   718  0DC0                     	;# 
   719  0DC1                     	;# 
   720  0DC1                     	;# 
   721  0DC2                     	;# 
   722  0DC3                     	;# 
   723  0DC3                     	;# 
   724  0DC4                     	;# 
   725  0DC5                     	;# 
   726  0DC5                     	;# 
   727  0DC6                     	;# 
   728  0DC7                     	;# 
   729  0DC7                     	;# 
   730  0DC8                     	;# 
   731  0DC9                     	;# 
   732  0DC9                     	;# 
   733  0DCA                     	;# 
   734  0DCB                     	;# 
   735  0DCC                     	;# 
   736  0DCC                     	;# 
   737  0DCD                     	;# 
   738  0DCD                     	;# 
   739  0DCE                     	;# 
   740  0DCF                     	;# 
   741  0DD0                     	;# 
   742  0E0F                     	;# 
   743  0E10                     	;# 
   744  0E11                     	;# 
   745  0E12                     	;# 
   746  0E13                     	;# 
   747  0E14                     	;# 
   748  0E15                     	;# 
   749  0E16                     	;# 
   750  0E17                     	;# 
   751  0E90                     	;# 
   752  0E91                     	;# 
   753  0E92                     	;# 
   754  0E94                     	;# 
   755  0E95                     	;# 
   756  0EA0                     	;# 
   757  0EA1                     	;# 
   758  0EA2                     	;# 
   759  0EA3                     	;# 
   760  0EA4                     	;# 
   761  0EA5                     	;# 
   762  0FE4                     	;# 
   763  0FE5                     	;# 
   764  0FE6                     	;# 
   765  0FE7                     	;# 
   766  0FE8                     	;# 
   767  0FE8                     	;# 
   768  0FE9                     	;# 
   769  0FEA                     	;# 
   770  0FEA                     	;# 
   771  0FEB                     	;# 
   772  0FED                     	;# 
   773  0FEE                     	;# 
   774  0FEE                     	;# 
   775  0FEF                     	;# 
   776  0000                     	;# 
   777  0001                     	;# 
   778  0002                     	;# 
   779  0003                     	;# 
   780  0004                     	;# 
   781  0005                     	;# 
   782  0006                     	;# 
   783  0007                     	;# 
   784  0008                     	;# 
   785  0009                     	;# 
   786  000A                     	;# 
   787  000B                     	;# 
   788  000C                     	;# 
   789  000E                     	;# 
   790  0011                     	;# 
   791  0012                     	;# 
   792  0013                     	;# 
   793  0015                     	;# 
   794  0016                     	;# 
   795  0016                     	;# 
   796  0017                     	;# 
   797  0018                     	;# 
   798  0019                     	;# 
   799  001A                     	;# 
   800  001B                     	;# 
   801  001C                     	;# 
   802  008C                     	;# 
   803  008E                     	;# 
   804  0091                     	;# 
   805  0092                     	;# 
   806  0093                     	;# 
   807  0095                     	;# 
   808  0096                     	;# 
   809  0097                     	;# 
   810  0098                     	;# 
   811  0099                     	;# 
   812  009A                     	;# 
   813  009B                     	;# 
   814  009B                     	;# 
   815  009C                     	;# 
   816  009D                     	;# 
   817  009E                     	;# 
   818  009F                     	;# 
   819  010C                     	;# 
   820  010E                     	;# 
   821  0111                     	;# 
   822  0112                     	;# 
   823  0113                     	;# 
   824  0114                     	;# 
   825  0115                     	;# 
   826  0116                     	;# 
   827  0117                     	;# 
   828  0118                     	;# 
   829  0119                     	;# 
   830  018C                     	;# 
   831  018E                     	;# 
   832  0191                     	;# 
   833  0191                     	;# 
   834  0192                     	;# 
   835  0193                     	;# 
   836  0193                     	;# 
   837  0194                     	;# 
   838  0195                     	;# 
   839  0196                     	;# 
   840  0197                     	;# 
   841  0199                     	;# 
   842  019A                     	;# 
   843  019B                     	;# 
   844  019B                     	;# 
   845  019C                     	;# 
   846  019D                     	;# 
   847  019E                     	;# 
   848  019F                     	;# 
   849  020C                     	;# 
   850  020E                     	;# 
   851  028C                     	;# 
   852  028E                     	;# 
   853  030C                     	;# 
   854  030E                     	;# 
   855  038C                     	;# 
   856  038E                     	;# 
   857  0391                     	;# 
   858  0392                     	;# 
   859  0393                     	;# 
   860  0397                     	;# 
   861  0398                     	;# 
   862  0399                     	;# 
   863  0691                     	;# 
   864  0692                     	;# 
   865  0693                     	;# 
   866  0694                     	;# 
   867  0695                     	;# 
   868  0D8E                     	;# 
   869  0D8F                     	;# 
   870  0D90                     	;# 
   871  0D91                     	;# 
   872  0D91                     	;# 
   873  0D92                     	;# 
   874  0D93                     	;# 
   875  0D93                     	;# 
   876  0D94                     	;# 
   877  0D95                     	;# 
   878  0D95                     	;# 
   879  0D96                     	;# 
   880  0D97                     	;# 
   881  0D97                     	;# 
   882  0D98                     	;# 
   883  0D99                     	;# 
   884  0D99                     	;# 
   885  0D9A                     	;# 
   886  0D9B                     	;# 
   887  0D9C                     	;# 
   888  0D9C                     	;# 
   889  0D9D                     	;# 
   890  0D9D                     	;# 
   891  0D9E                     	;# 
   892  0D9F                     	;# 
   893  0DA0                     	;# 
   894  0DA1                     	;# 
   895  0DA1                     	;# 
   896  0DA2                     	;# 
   897  0DA3                     	;# 
   898  0DA3                     	;# 
   899  0DA4                     	;# 
   900  0DA5                     	;# 
   901  0DA5                     	;# 
   902  0DA6                     	;# 
   903  0DA7                     	;# 
   904  0DA7                     	;# 
   905  0DA8                     	;# 
   906  0DA9                     	;# 
   907  0DA9                     	;# 
   908  0DAA                     	;# 
   909  0DAB                     	;# 
   910  0DAC                     	;# 
   911  0DAC                     	;# 
   912  0DAD                     	;# 
   913  0DAD                     	;# 
   914  0DAE                     	;# 
   915  0DAF                     	;# 
   916  0DB0                     	;# 
   917  0DB1                     	;# 
   918  0DB1                     	;# 
   919  0DB2                     	;# 
   920  0DB3                     	;# 
   921  0DB3                     	;# 
   922  0DB4                     	;# 
   923  0DB5                     	;# 
   924  0DB5                     	;# 
   925  0DB6                     	;# 
   926  0DB7                     	;# 
   927  0DB7                     	;# 
   928  0DB8                     	;# 
   929  0DB9                     	;# 
   930  0DB9                     	;# 
   931  0DBA                     	;# 
   932  0DBB                     	;# 
   933  0DBC                     	;# 
   934  0DBC                     	;# 
   935  0DBD                     	;# 
   936  0DBD                     	;# 
   937  0DBE                     	;# 
   938  0DBF                     	;# 
   939  0DC0                     	;# 
   940  0DC1                     	;# 
   941  0DC1                     	;# 
   942  0DC2                     	;# 
   943  0DC3                     	;# 
   944  0DC3                     	;# 
   945  0DC4                     	;# 
   946  0DC5                     	;# 
   947  0DC5                     	;# 
   948  0DC6                     	;# 
   949  0DC7                     	;# 
   950  0DC7                     	;# 
   951  0DC8                     	;# 
   952  0DC9                     	;# 
   953  0DC9                     	;# 
   954  0DCA                     	;# 
   955  0DCB                     	;# 
   956  0DCC                     	;# 
   957  0DCC                     	;# 
   958  0DCD                     	;# 
   959  0DCD                     	;# 
   960  0DCE                     	;# 
   961  0DCF                     	;# 
   962  0DD0                     	;# 
   963  0E0F                     	;# 
   964  0E10                     	;# 
   965  0E11                     	;# 
   966  0E12                     	;# 
   967  0E13                     	;# 
   968  0E14                     	;# 
   969  0E15                     	;# 
   970  0E16                     	;# 
   971  0E17                     	;# 
   972  0E90                     	;# 
   973  0E91                     	;# 
   974  0E92                     	;# 
   975  0E94                     	;# 
   976  0E95                     	;# 
   977  0EA0                     	;# 
   978  0EA1                     	;# 
   979  0EA2                     	;# 
   980  0EA3                     	;# 
   981  0EA4                     	;# 
   982  0EA5                     	;# 
   983  0FE4                     	;# 
   984  0FE5                     	;# 
   985  0FE6                     	;# 
   986  0FE7                     	;# 
   987  0FE8                     	;# 
   988  0FE8                     	;# 
   989  0FE9                     	;# 
   990  0FEA                     	;# 
   991  0FEA                     	;# 
   992  0FEB                     	;# 
   993  0FED                     	;# 
   994  0FEE                     	;# 
   995  0FEE                     	;# 
   996  0FEF                     	;# 
   997  0000                     	;# 
   998  0001                     	;# 
   999  0002                     	;# 
  1000  0003                     	;# 
  1001  0004                     	;# 
  1002  0005                     	;# 
  1003  0006                     	;# 
  1004  0007                     	;# 
  1005  0008                     	;# 
  1006  0009                     	;# 
  1007  000A                     	;# 
  1008  000B                     	;# 
  1009  000C                     	;# 
  1010  000E                     	;# 
  1011  0011                     	;# 
  1012  0012                     	;# 
  1013  0013                     	;# 
  1014  0015                     	;# 
  1015  0016                     	;# 
  1016  0016                     	;# 
  1017  0017                     	;# 
  1018  0018                     	;# 
  1019  0019                     	;# 
  1020  001A                     	;# 
  1021  001B                     	;# 
  1022  001C                     	;# 
  1023  008C                     	;# 
  1024  008E                     	;# 
  1025  0091                     	;# 
  1026  0092                     	;# 
  1027  0093                     	;# 
  1028  0095                     	;# 
  1029  0096                     	;# 
  1030  0097                     	;# 
  1031  0098                     	;# 
  1032  0099                     	;# 
  1033  009A                     	;# 
  1034  009B                     	;# 
  1035  009B                     	;# 
  1036  009C                     	;# 
  1037  009D                     	;# 
  1038  009E                     	;# 
  1039  009F                     	;# 
  1040  010C                     	;# 
  1041  010E                     	;# 
  1042  0111                     	;# 
  1043  0112                     	;# 
  1044  0113                     	;# 
  1045  0114                     	;# 
  1046  0115                     	;# 
  1047  0116                     	;# 
  1048  0117                     	;# 
  1049  0118                     	;# 
  1050  0119                     	;# 
  1051  018C                     	;# 
  1052  018E                     	;# 
  1053  0191                     	;# 
  1054  0191                     	;# 
  1055  0192                     	;# 
  1056  0193                     	;# 
  1057  0193                     	;# 
  1058  0194                     	;# 
  1059  0195                     	;# 
  1060  0196                     	;# 
  1061  0197                     	;# 
  1062  0199                     	;# 
  1063  019A                     	;# 
  1064  019B                     	;# 
  1065  019B                     	;# 
  1066  019C                     	;# 
  1067  019D                     	;# 
  1068  019E                     	;# 
  1069  019F                     	;# 
  1070  020C                     	;# 
  1071  020E                     	;# 
  1072  028C                     	;# 
  1073  028E                     	;# 
  1074  030C                     	;# 
  1075  030E                     	;# 
  1076  038C                     	;# 
  1077  038E                     	;# 
  1078  0391                     	;# 
  1079  0392                     	;# 
  1080  0393                     	;# 
  1081  0397                     	;# 
  1082  0398                     	;# 
  1083  0399                     	;# 
  1084  0691                     	;# 
  1085  0692                     	;# 
  1086  0693                     	;# 
  1087  0694                     	;# 
  1088  0695                     	;# 
  1089  0D8E                     	;# 
  1090  0D8F                     	;# 
  1091  0D90                     	;# 
  1092  0D91                     	;# 
  1093  0D91                     	;# 
  1094  0D92                     	;# 
  1095  0D93                     	;# 
  1096  0D93                     	;# 
  1097  0D94                     	;# 
  1098  0D95                     	;# 
  1099  0D95                     	;# 
  1100  0D96                     	;# 
  1101  0D97                     	;# 
  1102  0D97                     	;# 
  1103  0D98                     	;# 
  1104  0D99                     	;# 
  1105  0D99                     	;# 
  1106  0D9A                     	;# 
  1107  0D9B                     	;# 
  1108  0D9C                     	;# 
  1109  0D9C                     	;# 
  1110  0D9D                     	;# 
  1111  0D9D                     	;# 
  1112  0D9E                     	;# 
  1113  0D9F                     	;# 
  1114  0DA0                     	;# 
  1115  0DA1                     	;# 
  1116  0DA1                     	;# 
  1117  0DA2                     	;# 
  1118  0DA3                     	;# 
  1119  0DA3                     	;# 
  1120  0DA4                     	;# 
  1121  0DA5                     	;# 
  1122  0DA5                     	;# 
  1123  0DA6                     	;# 
  1124  0DA7                     	;# 
  1125  0DA7                     	;# 
  1126  0DA8                     	;# 
  1127  0DA9                     	;# 
  1128  0DA9                     	;# 
  1129  0DAA                     	;# 
  1130  0DAB                     	;# 
  1131  0DAC                     	;# 
  1132  0DAC                     	;# 
  1133  0DAD                     	;# 
  1134  0DAD                     	;# 
  1135  0DAE                     	;# 
  1136  0DAF                     	;# 
  1137  0DB0                     	;# 
  1138  0DB1                     	;# 
  1139  0DB1                     	;# 
  1140  0DB2                     	;# 
  1141  0DB3                     	;# 
  1142  0DB3                     	;# 
  1143  0DB4                     	;# 
  1144  0DB5                     	;# 
  1145  0DB5                     	;# 
  1146  0DB6                     	;# 
  1147  0DB7                     	;# 
  1148  0DB7                     	;# 
  1149  0DB8                     	;# 
  1150  0DB9                     	;# 
  1151  0DB9                     	;# 
  1152  0DBA                     	;# 
  1153  0DBB                     	;# 
  1154  0DBC                     	;# 
  1155  0DBC                     	;# 
  1156  0DBD                     	;# 
  1157  0DBD                     	;# 
  1158  0DBE                     	;# 
  1159  0DBF                     	;# 
  1160  0DC0                     	;# 
  1161  0DC1                     	;# 
  1162  0DC1                     	;# 
  1163  0DC2                     	;# 
  1164  0DC3                     	;# 
  1165  0DC3                     	;# 
  1166  0DC4                     	;# 
  1167  0DC5                     	;# 
  1168  0DC5                     	;# 
  1169  0DC6                     	;# 
  1170  0DC7                     	;# 
  1171  0DC7                     	;# 
  1172  0DC8                     	;# 
  1173  0DC9                     	;# 
  1174  0DC9                     	;# 
  1175  0DCA                     	;# 
  1176  0DCB                     	;# 
  1177  0DCC                     	;# 
  1178  0DCC                     	;# 
  1179  0DCD                     	;# 
  1180  0DCD                     	;# 
  1181  0DCE                     	;# 
  1182  0DCF                     	;# 
  1183  0DD0                     	;# 
  1184  0E0F                     	;# 
  1185  0E10                     	;# 
  1186  0E11                     	;# 
  1187  0E12                     	;# 
  1188  0E13                     	;# 
  1189  0E14                     	;# 
  1190  0E15                     	;# 
  1191  0E16                     	;# 
  1192  0E17                     	;# 
  1193  0E90                     	;# 
  1194  0E91                     	;# 
  1195  0E92                     	;# 
  1196  0E94                     	;# 
  1197  0E95                     	;# 
  1198  0EA0                     	;# 
  1199  0EA1                     	;# 
  1200  0EA2                     	;# 
  1201  0EA3                     	;# 
  1202  0EA4                     	;# 
  1203  0EA5                     	;# 
  1204  0FE4                     	;# 
  1205  0FE5                     	;# 
  1206  0FE6                     	;# 
  1207  0FE7                     	;# 
  1208  0FE8                     	;# 
  1209  0FE8                     	;# 
  1210  0FE9                     	;# 
  1211  0FEA                     	;# 
  1212  0FEA                     	;# 
  1213  0FEB                     	;# 
  1214  0FED                     	;# 
  1215  0FEE                     	;# 
  1216  0FEE                     	;# 
  1217  0FEF                     	;# 
  1218  0FFF                     	;# 
  1219  0000                     	;# 
  1220  0001                     	;# 
  1221  0002                     	;# 
  1222  0003                     	;# 
  1223  0004                     	;# 
  1224  0005                     	;# 
  1225  0006                     	;# 
  1226  0007                     	;# 
  1227  0008                     	;# 
  1228  0009                     	;# 
  1229  000A                     	;# 
  1230  000B                     	;# 
  1231  000C                     	;# 
  1232  000E                     	;# 
  1233  0011                     	;# 
  1234  0012                     	;# 
  1235  0013                     	;# 
  1236  0015                     	;# 
  1237  0016                     	;# 
  1238  0016                     	;# 
  1239  0017                     	;# 
  1240  0018                     	;# 
  1241  0019                     	;# 
  1242  001A                     	;# 
  1243  001B                     	;# 
  1244  001C                     	;# 
  1245  008C                     	;# 
  1246  008E                     	;# 
  1247  0091                     	;# 
  1248  0092                     	;# 
  1249  0093                     	;# 
  1250  0095                     	;# 
  1251  0096                     	;# 
  1252  0097                     	;# 
  1253  0098                     	;# 
  1254  0099                     	;# 
  1255  009A                     	;# 
  1256  009B                     	;# 
  1257  009B                     	;# 
  1258  009C                     	;# 
  1259  009D                     	;# 
  1260  009E                     	;# 
  1261  009F                     	;# 
  1262  010C                     	;# 
  1263  010E                     	;# 
  1264  0111                     	;# 
  1265  0112                     	;# 
  1266  0113                     	;# 
  1267  0114                     	;# 
  1268  0115                     	;# 
  1269  0116                     	;# 
  1270  0117                     	;# 
  1271  0118                     	;# 
  1272  0119                     	;# 
  1273  018C                     	;# 
  1274  018E                     	;# 
  1275  0191                     	;# 
  1276  0191                     	;# 
  1277  0192                     	;# 
  1278  0193                     	;# 
  1279  0193                     	;# 
  1280  0194                     	;# 
  1281  0195                     	;# 
  1282  0196                     	;# 
  1283  0197                     	;# 
  1284  0199                     	;# 
  1285  019A                     	;# 
  1286  019B                     	;# 
  1287  019B                     	;# 
  1288  019C                     	;# 
  1289  019D                     	;# 
  1290  019E                     	;# 
  1291  019F                     	;# 
  1292  020C                     	;# 
  1293  020E                     	;# 
  1294  028C                     	;# 
  1295  028E                     	;# 
  1296  030C                     	;# 
  1297  030E                     	;# 
  1298  038C                     	;# 
  1299  038E                     	;# 
  1300  0391                     	;# 
  1301  0392                     	;# 
  1302  0393                     	;# 
  1303  0397                     	;# 
  1304  0398                     	;# 
  1305  0399                     	;# 
  1306  0691                     	;# 
  1307  0692                     	;# 
  1308  0693                     	;# 
  1309  0694                     	;# 
  1310  0695                     	;# 
  1311  0D8E                     	;# 
  1312  0D8F                     	;# 
  1313  0D90                     	;# 
  1314  0D91                     	;# 
  1315  0D91                     	;# 
  1316  0D92                     	;# 
  1317  0D93                     	;# 
  1318  0D93                     	;# 
  1319  0D94                     	;# 
  1320  0D95                     	;# 
  1321  0D95                     	;# 
  1322  0D96                     	;# 
  1323  0D97                     	;# 
  1324  0D97                     	;# 
  1325  0D98                     	;# 
  1326  0D99                     	;# 
  1327  0D99                     	;# 
  1328  0D9A                     	;# 
  1329  0D9B                     	;# 
  1330  0D9C                     	;# 
  1331  0D9C                     	;# 
  1332  0D9D                     	;# 
  1333  0D9D                     	;# 
  1334  0D9E                     	;# 
  1335  0D9F                     	;# 
  1336  0DA0                     	;# 
  1337  0DA1                     	;# 
  1338  0DA1                     	;# 
  1339  0DA2                     	;# 
  1340  0DA3                     	;# 
  1341  0DA3                     	;# 
  1342  0DA4                     	;# 
  1343  0DA5                     	;# 
  1344  0DA5                     	;# 
  1345  0DA6                     	;# 
  1346  0DA7                     	;# 
  1347  0DA7                     	;# 
  1348  0DA8                     	;# 
  1349  0DA9                     	;# 
  1350  0DA9                     	;# 
  1351  0DAA                     	;# 
  1352  0DAB                     	;# 
  1353  0DAC                     	;# 
  1354  0DAC                     	;# 
  1355  0DAD                     	;# 
  1356  0DAD                     	;# 
  1357  0DAE                     	;# 
  1358  0DAF                     	;# 
  1359  0DB0                     	;# 
  1360  0DB1                     	;# 
  1361  0DB1                     	;# 
  1362  0DB2                     	;# 
  1363  0DB3                     	;# 
  1364  0DB3                     	;# 
  1365  0DB4                     	;# 
  1366  0DB5                     	;# 
  1367  0DB5                     	;# 
  1368  0DB6                     	;# 
  1369  0DB7                     	;# 
  1370  0DB7                     	;# 
  1371  0DB8                     	;# 
  1372  0DB9                     	;# 
  1373  0DB9                     	;# 
  1374  0DBA                     	;# 
  1375  0DBB                     	;# 
  1376  0DBC                     	;# 
  1377  0DBC                     	;# 
  1378  0DBD                     	;# 
  1379  0DBD                     	;# 
  1380  0DBE                     	;# 
  1381  0DBF                     	;# 
  1382  0DC0                     	;# 
  1383  0DC1                     	;# 
  1384  0DC1                     	;# 
  1385  0DC2                     	;# 
  1386  0DC3                     	;# 
  1387  0DC3                     	;# 
  1388  0DC4                     	;# 
  1389  0DC5                     	;# 
  1390  0DC5                     	;# 
  1391  0DC6                     	;# 
  1392  0DC7                     	;# 
  1393  0DC7                     	;# 
  1394  0DC8                     	;# 
  1395  0DC9                     	;# 
  1396  0DC9                     	;# 
  1397  0DCA                     	;# 
  1398  0DCB                     	;# 
  1399  0DCC                     	;# 
  1400  0DCC                     	;# 
  1401  0DCD                     	;# 
  1402  0DCD                     	;# 
  1403  0DCE                     	;# 
  1404  0DCF                     	;# 
  1405  0DD0                     	;# 
  1406  0E0F                     	;# 
  1407  0E10                     	;# 
  1408  0E11                     	;# 
  1409  0E12                     	;# 
  1410  0E13                     	;# 
  1411  0E14                     	;# 
  1412  0E15                     	;# 
  1413  0E16                     	;# 
  1414  0E17                     	;# 
  1415  0E90                     	;# 
  1416  0E91                     	;# 
  1417  0E92                     	;# 
  1418  0E94                     	;# 
  1419  0E95                     	;# 
  1420  0EA0                     	;# 
  1421  0EA1                     	;# 
  1422  0EA2                     	;# 
  1423  0EA3                     	;# 
  1424  0EA4                     	;# 
  1425  0EA5                     	;# 
  1426  0FE4                     	;# 
  1427  0FE5                     	;# 
  1428  0FE6                     	;# 
  1429  0FE7                     	;# 
  1430  0FE8                     	;# 
  1431  0FE8                     	;# 
  1432  0FE9                     	;# 
  1433  0FEA                     	;# 
  1434  0FEA                     	;# 
  1435  0FEB                     	;# 
  1436  0FED                     	;# 
  1437  0FEE                     	;# 
  1438  0FEE                     	;# 
  1439  0FEF                     	;# 
  1440  0000                     	;# 
  1441  0001                     	;# 
  1442  0002                     	;# 
  1443  0003                     	;# 
  1444  0004                     	;# 
  1445  0005                     	;# 
  1446  0006                     	;# 
  1447  0007                     	;# 
  1448  0008                     	;# 
  1449  0009                     	;# 
  1450  000A                     	;# 
  1451  000B                     	;# 
  1452  000C                     	;# 
  1453  000E                     	;# 
  1454  0011                     	;# 
  1455  0012                     	;# 
  1456  0013                     	;# 
  1457  0015                     	;# 
  1458  0016                     	;# 
  1459  0016                     	;# 
  1460  0017                     	;# 
  1461  0018                     	;# 
  1462  0019                     	;# 
  1463  001A                     	;# 
  1464  001B                     	;# 
  1465  001C                     	;# 
  1466  008C                     	;# 
  1467  008E                     	;# 
  1468  0091                     	;# 
  1469  0092                     	;# 
  1470  0093                     	;# 
  1471  0095                     	;# 
  1472  0096                     	;# 
  1473  0097                     	;# 
  1474  0098                     	;# 
  1475  0099                     	;# 
  1476  009A                     	;# 
  1477  009B                     	;# 
  1478  009B                     	;# 
  1479  009C                     	;# 
  1480  009D                     	;# 
  1481  009E                     	;# 
  1482  009F                     	;# 
  1483  010C                     	;# 
  1484  010E                     	;# 
  1485  0111                     	;# 
  1486  0112                     	;# 
  1487  0113                     	;# 
  1488  0114                     	;# 
  1489  0115                     	;# 
  1490  0116                     	;# 
  1491  0117                     	;# 
  1492  0118                     	;# 
  1493  0119                     	;# 
  1494  018C                     	;# 
  1495  018E                     	;# 
  1496  0191                     	;# 
  1497  0191                     	;# 
  1498  0192                     	;# 
  1499  0193                     	;# 
  1500  0193                     	;# 
  1501  0194                     	;# 
  1502  0195                     	;# 
  1503  0196                     	;# 
  1504  0197                     	;# 
  1505  0199                     	;# 
  1506  019A                     	;# 
  1507  019B                     	;# 
  1508  019B                     	;# 
  1509  019C                     	;# 
  1510  019D                     	;# 
  1511  019E                     	;# 
  1512  019F                     	;# 
  1513  020C                     	;# 
  1514  020E                     	;# 
  1515  028C                     	;# 
  1516  028E                     	;# 
  1517  030C                     	;# 
  1518  030E                     	;# 
  1519  038C                     	;# 
  1520  038E                     	;# 
  1521  0391                     	;# 
  1522  0392                     	;# 
  1523  0393                     	;# 
  1524  0397                     	;# 
  1525  0398                     	;# 
  1526  0399                     	;# 
  1527  0691                     	;# 
  1528  0692                     	;# 
  1529  0693                     	;# 
  1530  0694                     	;# 
  1531  0695                     	;# 
  1532  0D8E                     	;# 
  1533  0D8F                     	;# 
  1534  0D90                     	;# 
  1535  0D91                     	;# 
  1536  0D91                     	;# 
  1537  0D92                     	;# 
  1538  0D93                     	;# 
  1539  0D93                     	;# 
  1540  0D94                     	;# 
  1541  0D95                     	;# 
  1542  0D95                     	;# 
  1543  0D96                     	;# 
  1544  0D97                     	;# 
  1545  0D97                     	;# 
  1546  0D98                     	;# 
  1547  0D99                     	;# 
  1548  0D99                     	;# 
  1549  0D9A                     	;# 
  1550  0D9B                     	;# 
  1551  0D9C                     	;# 
  1552  0D9C                     	;# 
  1553  0D9D                     	;# 
  1554  0D9D                     	;# 
  1555  0D9E                     	;# 
  1556  0D9F                     	;# 
  1557  0DA0                     	;# 
  1558  0DA1                     	;# 
  1559  0DA1                     	;# 
  1560  0DA2                     	;# 
  1561  0DA3                     	;# 
  1562  0DA3                     	;# 
  1563  0DA4                     	;# 
  1564  0DA5                     	;# 
  1565  0DA5                     	;# 
  1566  0DA6                     	;# 
  1567  0DA7                     	;# 
  1568  0DA7                     	;# 
  1569  0DA8                     	;# 
  1570  0DA9                     	;# 
  1571  0DA9                     	;# 
  1572  0DAA                     	;# 
  1573  0DAB                     	;# 
  1574  0DAC                     	;# 
  1575  0DAC                     	;# 
  1576  0DAD                     	;# 
  1577  0DAD                     	;# 
  1578  0DAE                     	;# 
  1579  0DAF                     	;# 
  1580  0DB0                     	;# 
  1581  0DB1                     	;# 
  1582  0DB1                     	;# 
  1583  0DB2                     	;# 
  1584  0DB3                     	;# 
  1585  0DB3                     	;# 
  1586  0DB4                     	;# 
  1587  0DB5                     	;# 
  1588  0DB5                     	;# 
  1589  0DB6                     	;# 
  1590  0DB7                     	;# 
  1591  0DB7                     	;# 
  1592  0DB8                     	;# 
  1593  0DB9                     	;# 
  1594  0DB9                     	;# 
  1595  0DBA                     	;# 
  1596  0DBB                     	;# 
  1597  0DBC                     	;# 
  1598  0DBC                     	;# 
  1599  0DBD                     	;# 
  1600  0DBD                     	;# 
  1601  0DBE                     	;# 
  1602  0DBF                     	;# 
  1603  0DC0                     	;# 
  1604  0DC1                     	;# 
  1605  0DC1                     	;# 
  1606  0DC2                     	;# 
  1607  0DC3                     	;# 
  1608  0DC3                     	;# 
  1609  0DC4                     	;# 
  1610  0DC5                     	;# 
  1611  0DC5                     	;# 
  1612  0DC6                     	;# 
  1613  0DC7                     	;# 
  1614  0DC7                     	;# 
  1615  0DC8                     	;# 
  1616  0DC9                     	;# 
  1617  0DC9                     	;# 
  1618  0DCA                     	;# 
  1619  0DCB                     	;# 
  1620  0DCC                     	;# 
  1621  0DCC                     	;# 
  1622  0DCD                     	;# 
  1623  0DCD                     	;# 
  1624  0DCE                     	;# 
  1625  0DCF                     	;# 
  1626  0DD0                     	;# 
  1627  0E0F                     	;# 
  1628  0E10                     	;# 
  1629  0E11                     	;# 
  1630  0E12                     	;# 
  1631  0E13                     	;# 
  1632  0E14                     	;# 
  1633  0E15                     	;# 
  1634  0E16                     	;# 
  1635  0E17                     	;# 
  1636  0E90                     	;# 
  1637  0E91                     	;# 
  1638  0E92                     	;# 
  1639  0E94                     	;# 
  1640  0E95                     	;# 
  1641  0EA0                     	;# 
  1642  0EA1                     	;# 
  1643  0EA2                     	;# 
  1644  0EA3                     	;# 
  1645  0EA4                     	;# 
  1646  0EA5                     	;# 
  1647  0FE4                     	;# 
  1648  0FE5                     	;# 
  1649  0FE6                     	;# 
  1650  0FE7                     	;# 
  1651  0FE8                     	;# 
  1652  0FE8                     	;# 
  1653  0FE9                     	;# 
  1654  0FEA                     	;# 
  1655  0FEA                     	;# 
  1656  0FEB                     	;# 
  1657  0FED                     	;# 
  1658  0FEE                     	;# 
  1659  0FEE                     	;# 
  1660  0FEF                     	;# 
  1661  0000                     	;# 
  1662  0001                     	;# 
  1663  0002                     	;# 
  1664  0003                     	;# 
  1665  0004                     	;# 
  1666  0005                     	;# 
  1667  0006                     	;# 
  1668  0007                     	;# 
  1669  0008                     	;# 
  1670  0009                     	;# 
  1671  000A                     	;# 
  1672  000B                     	;# 
  1673  000C                     	;# 
  1674  000E                     	;# 
  1675  0011                     	;# 
  1676  0012                     	;# 
  1677  0013                     	;# 
  1678  0015                     	;# 
  1679  0016                     	;# 
  1680  0016                     	;# 
  1681  0017                     	;# 
  1682  0018                     	;# 
  1683  0019                     	;# 
  1684  001A                     	;# 
  1685  001B                     	;# 
  1686  001C                     	;# 
  1687  008C                     	;# 
  1688  008E                     	;# 
  1689  0091                     	;# 
  1690  0092                     	;# 
  1691  0093                     	;# 
  1692  0095                     	;# 
  1693  0096                     	;# 
  1694  0097                     	;# 
  1695  0098                     	;# 
  1696  0099                     	;# 
  1697  009A                     	;# 
  1698  009B                     	;# 
  1699  009B                     	;# 
  1700  009C                     	;# 
  1701  009D                     	;# 
  1702  009E                     	;# 
  1703  009F                     	;# 
  1704  010C                     	;# 
  1705  010E                     	;# 
  1706  0111                     	;# 
  1707  0112                     	;# 
  1708  0113                     	;# 
  1709  0114                     	;# 
  1710  0115                     	;# 
  1711  0116                     	;# 
  1712  0117                     	;# 
  1713  0118                     	;# 
  1714  0119                     	;# 
  1715  018C                     	;# 
  1716  018E                     	;# 
  1717  0191                     	;# 
  1718  0191                     	;# 
  1719  0192                     	;# 
  1720  0193                     	;# 
  1721  0193                     	;# 
  1722  0194                     	;# 
  1723  0195                     	;# 
  1724  0196                     	;# 
  1725  0197                     	;# 
  1726  0199                     	;# 
  1727  019A                     	;# 
  1728  019B                     	;# 
  1729  019B                     	;# 
  1730  019C                     	;# 
  1731  019D                     	;# 
  1732  019E                     	;# 
  1733  019F                     	;# 
  1734  020C                     	;# 
  1735  020E                     	;# 
  1736  028C                     	;# 
  1737  028E                     	;# 
  1738  030C                     	;# 
  1739  030E                     	;# 
  1740  038C                     	;# 
  1741  038E                     	;# 
  1742  0391                     	;# 
  1743  0392                     	;# 
  1744  0393                     	;# 
  1745  0397                     	;# 
  1746  0398                     	;# 
  1747  0399                     	;# 
  1748  0691                     	;# 
  1749  0692                     	;# 
  1750  0693                     	;# 
  1751  0694                     	;# 
  1752  0695                     	;# 
  1753  0D8E                     	;# 
  1754  0D8F                     	;# 
  1755  0D90                     	;# 
  1756  0D91                     	;# 
  1757  0D91                     	;# 
  1758  0D92                     	;# 
  1759  0D93                     	;# 
  1760  0D93                     	;# 
  1761  0D94                     	;# 
  1762  0D95                     	;# 
  1763  0D95                     	;# 
  1764  0D96                     	;# 
  1765  0D97                     	;# 
  1766  0D97                     	;# 
  1767  0D98                     	;# 
  1768  0D99                     	;# 
  1769  0D99                     	;# 
  1770  0D9A                     	;# 
  1771  0D9B                     	;# 
  1772  0D9C                     	;# 
  1773  0D9C                     	;# 
  1774  0D9D                     	;# 
  1775  0D9D                     	;# 
  1776  0D9E                     	;# 
  1777  0D9F                     	;# 
  1778  0DA0                     	;# 
  1779  0DA1                     	;# 
  1780  0DA1                     	;# 
  1781  0DA2                     	;# 
  1782  0DA3                     	;# 
  1783  0DA3                     	;# 
  1784  0DA4                     	;# 
  1785  0DA5                     	;# 
  1786  0DA5                     	;# 
  1787  0DA6                     	;# 
  1788  0DA7                     	;# 
  1789  0DA7                     	;# 
  1790  0DA8                     	;# 
  1791  0DA9                     	;# 
  1792  0DA9                     	;# 
  1793  0DAA                     	;# 
  1794  0DAB                     	;# 
  1795  0DAC                     	;# 
  1796  0DAC                     	;# 
  1797  0DAD                     	;# 
  1798  0DAD                     	;# 
  1799  0DAE                     	;# 
  1800  0DAF                     	;# 
  1801  0DB0                     	;# 
  1802  0DB1                     	;# 
  1803  0DB1                     	;# 
  1804  0DB2                     	;# 
  1805  0DB3                     	;# 
  1806  0DB3                     	;# 
  1807  0DB4                     	;# 
  1808  0DB5                     	;# 
  1809  0DB5                     	;# 
  1810  0DB6                     	;# 
  1811  0DB7                     	;# 
  1812  0DB7                     	;# 
  1813  0DB8                     	;# 
  1814  0DB9                     	;# 
  1815  0DB9                     	;# 
  1816  0DBA                     	;# 
  1817  0DBB                     	;# 
  1818  0DBC                     	;# 
  1819  0DBC                     	;# 
  1820  0DBD                     	;# 
  1821  0DBD                     	;# 
  1822  0DBE                     	;# 
  1823  0DBF                     	;# 
  1824  0DC0                     	;# 
  1825  0DC1                     	;# 
  1826  0DC1                     	;# 
  1827  0DC2                     	;# 
  1828  0DC3                     	;# 
  1829  0DC3                     	;# 
  1830  0DC4                     	;# 
  1831  0DC5                     	;# 
  1832  0DC5                     	;# 
  1833  0DC6                     	;# 
  1834  0DC7                     	;# 
  1835  0DC7                     	;# 
  1836  0DC8                     	;# 
  1837  0DC9                     	;# 
  1838  0DC9                     	;# 
  1839  0DCA                     	;# 
  1840  0DCB                     	;# 
  1841  0DCC                     	;# 
  1842  0DCC                     	;# 
  1843  0DCD                     	;# 
  1844  0DCD                     	;# 
  1845  0DCE                     	;# 
  1846  0DCF                     	;# 
  1847  0DD0                     	;# 
  1848  0E0F                     	;# 
  1849  0E10                     	;# 
  1850  0E11                     	;# 
  1851  0E12                     	;# 
  1852  0E13                     	;# 
  1853  0E14                     	;# 
  1854  0E15                     	;# 
  1855  0E16                     	;# 
  1856  0E17                     	;# 
  1857  0E90                     	;# 
  1858  0E91                     	;# 
  1859  0E92                     	;# 
  1860  0E94                     	;# 
  1861  0E95                     	;# 
  1862  0EA0                     	;# 
  1863  0EA1                     	;# 
  1864  0EA2                     	;# 
  1865  0EA3                     	;# 
  1866  0EA4                     	;# 
  1867  0EA5                     	;# 
  1868  0FE4                     	;# 
  1869  0FE5                     	;# 
  1870  0FE6                     	;# 
  1871  0FE7                     	;# 
  1872  0FE8                     	;# 
  1873  0FE8                     	;# 
  1874  0FE9                     	;# 
  1875  0FEA                     	;# 
  1876  0FEA                     	;# 
  1877  0FEB                     	;# 
  1878  0FED                     	;# 
  1879  0FEE                     	;# 
  1880  0FEE                     	;# 
  1881  0FEF                     	;# 
  1882  0000                     	;# 
  1883  0001                     	;# 
  1884  0002                     	;# 
  1885  0003                     	;# 
  1886  0004                     	;# 
  1887  0005                     	;# 
  1888  0006                     	;# 
  1889  0007                     	;# 
  1890  0008                     	;# 
  1891  0009                     	;# 
  1892  000A                     	;# 
  1893  000B                     	;# 
  1894  000C                     	;# 
  1895  000E                     	;# 
  1896  0011                     	;# 
  1897  0012                     	;# 
  1898  0013                     	;# 
  1899  0015                     	;# 
  1900  0016                     	;# 
  1901  0016                     	;# 
  1902  0017                     	;# 
  1903  0018                     	;# 
  1904  0019                     	;# 
  1905  001A                     	;# 
  1906  001B                     	;# 
  1907  001C                     	;# 
  1908  008C                     	;# 
  1909  008E                     	;# 
  1910  0091                     	;# 
  1911  0092                     	;# 
  1912  0093                     	;# 
  1913  0095                     	;# 
  1914  0096                     	;# 
  1915  0097                     	;# 
  1916  0098                     	;# 
  1917  0099                     	;# 
  1918  009A                     	;# 
  1919  009B                     	;# 
  1920  009B                     	;# 
  1921  009C                     	;# 
  1922  009D                     	;# 
  1923  009E                     	;# 
  1924  009F                     	;# 
  1925  010C                     	;# 
  1926  010E                     	;# 
  1927  0111                     	;# 
  1928  0112                     	;# 
  1929  0113                     	;# 
  1930  0114                     	;# 
  1931  0115                     	;# 
  1932  0116                     	;# 
  1933  0117                     	;# 
  1934  0118                     	;# 
  1935  0119                     	;# 
  1936  018C                     	;# 
  1937  018E                     	;# 
  1938  0191                     	;# 
  1939  0191                     	;# 
  1940  0192                     	;# 
  1941  0193                     	;# 
  1942  0193                     	;# 
  1943  0194                     	;# 
  1944  0195                     	;# 
  1945  0196                     	;# 
  1946  0197                     	;# 
  1947  0199                     	;# 
  1948  019A                     	;# 
  1949  019B                     	;# 
  1950  019B                     	;# 
  1951  019C                     	;# 
  1952  019D                     	;# 
  1953  019E                     	;# 
  1954  019F                     	;# 
  1955  020C                     	;# 
  1956  020E                     	;# 
  1957  028C                     	;# 
  1958  028E                     	;# 
  1959  030C                     	;# 
  1960  030E                     	;# 
  1961  038C                     	;# 
  1962  038E                     	;# 
  1963  0391                     	;# 
  1964  0392                     	;# 
  1965  0393                     	;# 
  1966  0397                     	;# 
  1967  0398                     	;# 
  1968  0399                     	;# 
  1969  0691                     	;# 
  1970  0692                     	;# 
  1971  0693                     	;# 
  1972  0694                     	;# 
  1973  0695                     	;# 
  1974  0D8E                     	;# 
  1975  0D8F                     	;# 
  1976  0D90                     	;# 
  1977  0D91                     	;# 
  1978  0D91                     	;# 
  1979  0D92                     	;# 
  1980  0D93                     	;# 
  1981  0D93                     	;# 
  1982  0D94                     	;# 
  1983  0D95                     	;# 
  1984  0D95                     	;# 
  1985  0D96                     	;# 
  1986  0D97                     	;# 
  1987  0D97                     	;# 
  1988  0D98                     	;# 
  1989  0D99                     	;# 
  1990  0D99                     	;# 
  1991  0D9A                     	;# 
  1992  0D9B                     	;# 
  1993  0D9C                     	;# 
  1994  0D9C                     	;# 
  1995  0D9D                     	;# 
  1996  0D9D                     	;# 
  1997  0D9E                     	;# 
  1998  0D9F                     	;# 
  1999  0DA0                     	;# 
  2000  0DA1                     	;# 
  2001  0DA1                     	;# 
  2002  0DA2                     	;# 
  2003  0DA3                     	;# 
  2004  0DA3                     	;# 
  2005  0DA4                     	;# 
  2006  0DA5                     	;# 
  2007  0DA5                     	;# 
  2008  0DA6                     	;# 
  2009  0DA7                     	;# 
  2010  0DA7                     	;# 
  2011  0DA8                     	;# 
  2012  0DA9                     	;# 
  2013  0DA9                     	;# 
  2014  0DAA                     	;# 
  2015  0DAB                     	;# 
  2016  0DAC                     	;# 
  2017  0DAC                     	;# 
  2018  0DAD                     	;# 
  2019  0DAD                     	;# 
  2020  0DAE                     	;# 
  2021  0DAF                     	;# 
  2022  0DB0                     	;# 
  2023  0DB1                     	;# 
  2024  0DB1                     	;# 
  2025  0DB2                     	;# 
  2026  0DB3                     	;# 
  2027  0DB3                     	;# 
  2028  0DB4                     	;# 
  2029  0DB5                     	;# 
  2030  0DB5                     	;# 
  2031  0DB6                     	;# 
  2032  0DB7                     	;# 
  2033  0DB7                     	;# 
  2034  0DB8                     	;# 
  2035  0DB9                     	;# 
  2036  0DB9                     	;# 
  2037  0DBA                     	;# 
  2038  0DBB                     	;# 
  2039  0DBC                     	;# 
  2040  0DBC                     	;# 
  2041  0DBD                     	;# 
  2042  0DBD                     	;# 
  2043  0DBE                     	;# 
  2044  0DBF                     	;# 
  2045  0DC0                     	;# 
  2046  0DC1                     	;# 
  2047  0DC1                     	;# 
  2048  0DC2                     	;# 
  2049  0DC3                     	;# 
  2050  0DC3                     	;# 
  2051  0DC4                     	;# 
  2052  0DC5                     	;# 
  2053  0DC5                     	;# 
  2054  0DC6                     	;# 
  2055  0DC7                     	;# 
  2056  0DC7                     	;# 
  2057  0DC8                     	;# 
  2058  0DC9                     	;# 
  2059  0DC9                     	;# 
  2060  0DCA                     	;# 
  2061  0DCB                     	;# 
  2062  0DCC                     	;# 
  2063  0DCC                     	;# 
  2064  0DCD                     	;# 
  2065  0DCD                     	;# 
  2066  0DCE                     	;# 
  2067  0DCF                     	;# 
  2068  0DD0                     	;# 
  2069  0E0F                     	;# 
  2070  0E10                     	;# 
  2071  0E11                     	;# 
  2072  0E12                     	;# 
  2073  0E13                     	;# 
  2074  0E14                     	;# 
  2075  0E15                     	;# 
  2076  0E16                     	;# 
  2077  0E17                     	;# 
  2078  0E90                     	;# 
  2079  0E91                     	;# 
  2080  0E92                     	;# 
  2081  0E94                     	;# 
  2082  0E95                     	;# 
  2083  0EA0                     	;# 
  2084  0EA1                     	;# 
  2085  0EA2                     	;# 
  2086  0EA3                     	;# 
  2087  0EA4                     	;# 
  2088  0EA5                     	;# 
  2089  0FE4                     	;# 
  2090  0FE5                     	;# 
  2091  0FE6                     	;# 
  2092  0FE7                     	;# 
  2093  0FE8                     	;# 
  2094  0FE8                     	;# 
  2095  0FE9                     	;# 
  2096  0FEA                     	;# 
  2097  0FEA                     	;# 
  2098  0FEB                     	;# 
  2099  0FED                     	;# 
  2100  0FEE                     	;# 
  2101  0FEE                     	;# 
  2102  0FEF                     	;# 
  2103  0000                     	;# 
  2104  0001                     	;# 
  2105  0002                     	;# 
  2106  0003                     	;# 
  2107  0004                     	;# 
  2108  0005                     	;# 
  2109  0006                     	;# 
  2110  0007                     	;# 
  2111  0008                     	;# 
  2112  0009                     	;# 
  2113  000A                     	;# 
  2114  000B                     	;# 
  2115  000C                     	;# 
  2116  000E                     	;# 
  2117  0011                     	;# 
  2118  0012                     	;# 
  2119  0013                     	;# 
  2120  0015                     	;# 
  2121  0016                     	;# 
  2122  0016                     	;# 
  2123  0017                     	;# 
  2124  0018                     	;# 
  2125  0019                     	;# 
  2126  001A                     	;# 
  2127  001B                     	;# 
  2128  001C                     	;# 
  2129  008C                     	;# 
  2130  008E                     	;# 
  2131  0091                     	;# 
  2132  0092                     	;# 
  2133  0093                     	;# 
  2134  0095                     	;# 
  2135  0096                     	;# 
  2136  0097                     	;# 
  2137  0098                     	;# 
  2138  0099                     	;# 
  2139  009A                     	;# 
  2140  009B                     	;# 
  2141  009B                     	;# 
  2142  009C                     	;# 
  2143  009D                     	;# 
  2144  009E                     	;# 
  2145  009F                     	;# 
  2146  010C                     	;# 
  2147  010E                     	;# 
  2148  0111                     	;# 
  2149  0112                     	;# 
  2150  0113                     	;# 
  2151  0114                     	;# 
  2152  0115                     	;# 
  2153  0116                     	;# 
  2154  0117                     	;# 
  2155  0118                     	;# 
  2156  0119                     	;# 
  2157  018C                     	;# 
  2158  018E                     	;# 
  2159  0191                     	;# 
  2160  0191                     	;# 
  2161  0192                     	;# 
  2162  0193                     	;# 
  2163  0193                     	;# 
  2164  0194                     	;# 
  2165  0195                     	;# 
  2166  0196                     	;# 
  2167  0197                     	;# 
  2168  0199                     	;# 
  2169  019A                     	;# 
  2170  019B                     	;# 
  2171  019B                     	;# 
  2172  019C                     	;# 
  2173  019D                     	;# 
  2174  019E                     	;# 
  2175  019F                     	;# 
  2176  020C                     	;# 
  2177  020E                     	;# 
  2178  028C                     	;# 
  2179  028E                     	;# 
  2180  030C                     	;# 
  2181  030E                     	;# 
  2182  038C                     	;# 
  2183  038E                     	;# 
  2184  0391                     	;# 
  2185  0392                     	;# 
  2186  0393                     	;# 
  2187  0397                     	;# 
  2188  0398                     	;# 
  2189  0399                     	;# 
  2190  0691                     	;# 
  2191  0692                     	;# 
  2192  0693                     	;# 
  2193  0694                     	;# 
  2194  0695                     	;# 
  2195  0D8E                     	;# 
  2196  0D8F                     	;# 
  2197  0D90                     	;# 
  2198  0D91                     	;# 
  2199  0D91                     	;# 
  2200  0D92                     	;# 
  2201  0D93                     	;# 
  2202  0D93                     	;# 
  2203  0D94                     	;# 
  2204  0D95                     	;# 
  2205  0D95                     	;# 
  2206  0D96                     	;# 
  2207  0D97                     	;# 
  2208  0D97                     	;# 
  2209  0D98                     	;# 
  2210  0D99                     	;# 
  2211  0D99                     	;# 
  2212  0D9A                     	;# 
  2213  0D9B                     	;# 
  2214  0D9C                     	;# 
  2215  0D9C                     	;# 
  2216  0D9D                     	;# 
  2217  0D9D                     	;# 
  2218  0D9E                     	;# 
  2219  0D9F                     	;# 
  2220  0DA0                     	;# 
  2221  0DA1                     	;# 
  2222  0DA1                     	;# 
  2223  0DA2                     	;# 
  2224  0DA3                     	;# 
  2225  0DA3                     	;# 
  2226  0DA4                     	;# 
  2227  0DA5                     	;# 
  2228  0DA5                     	;# 
  2229  0DA6                     	;# 
  2230  0DA7                     	;# 
  2231  0DA7                     	;# 
  2232  0DA8                     	;# 
  2233  0DA9                     	;# 
  2234  0DA9                     	;# 
  2235  0DAA                     	;# 
  2236  0DAB                     	;# 
  2237  0DAC                     	;# 
  2238  0DAC                     	;# 
  2239  0DAD                     	;# 
  2240  0DAD                     	;# 
  2241  0DAE                     	;# 
  2242  0DAF                     	;# 
  2243  0DB0                     	;# 
  2244  0DB1                     	;# 
  2245  0DB1                     	;# 
  2246  0DB2                     	;# 
  2247  0DB3                     	;# 
  2248  0DB3                     	;# 
  2249  0DB4                     	;# 
  2250  0DB5                     	;# 
  2251  0DB5                     	;# 
  2252  0DB6                     	;# 
  2253  0DB7                     	;# 
  2254  0DB7                     	;# 
  2255  0DB8                     	;# 
  2256  0DB9                     	;# 
  2257  0DB9                     	;# 
  2258  0DBA                     	;# 
  2259  0DBB                     	;# 
  2260  0DBC                     	;# 
  2261  0DBC                     	;# 
  2262  0DBD                     	;# 
  2263  0DBD                     	;# 
  2264  0DBE                     	;# 
  2265  0DBF                     	;# 
  2266  0DC0                     	;# 
  2267  0DC1                     	;# 
  2268  0DC1                     	;# 
  2269  0DC2                     	;# 
  2270  0DC3                     	;# 
  2271  0DC3                     	;# 
  2272  0DC4                     	;# 
  2273  0DC5                     	;# 
  2274  0DC5                     	;# 
  2275  0DC6                     	;# 
  2276  0DC7                     	;# 
  2277  0DC7                     	;# 
  2278  0DC8                     	;# 
  2279  0DC9                     	;# 
  2280  0DC9                     	;# 
  2281  0DCA                     	;# 
  2282  0DCB                     	;# 
  2283  0DCC                     	;# 
  2284  0DCC                     	;# 
  2285  0DCD                     	;# 
  2286  0DCD                     	;# 
  2287  0DCE                     	;# 
  2288  0DCF                     	;# 
  2289  0DD0                     	;# 
  2290  0E0F                     	;# 
  2291  0E10                     	;# 
  2292  0E11                     	;# 
  2293  0E12                     	;# 
  2294  0E13                     	;# 
  2295  0E14                     	;# 
  2296  0E15                     	;# 
  2297  0E16                     	;# 
  2298  0E17                     	;# 
  2299  0E90                     	;# 
  2300  0E91                     	;# 
  2301  0E92                     	;# 
  2302  0E94                     	;# 
  2303  0E95                     	;# 
  2304  0EA0                     	;# 
  2305  0EA1                     	;# 
  2306  0EA2                     	;# 
  2307  0EA3                     	;# 
  2308  0EA4                     	;# 
  2309  0EA5                     	;# 
  2310  0FE4                     	;# 
  2311  0FE5                     	;# 
  2312  0FE6                     	;# 
  2313  0FE7                     	;# 
  2314  0FE8                     	;# 
  2315  0FE8                     	;# 
  2316  0FE9                     	;# 
  2317  0FEA                     	;# 
  2318  0FEA                     	;# 
  2319  0FEB                     	;# 
  2320  0FED                     	;# 
  2321  0FEE                     	;# 
  2322  0FEE                     	;# 
  2323  0FEF                     	;# 
  2324  0000                     	;# 
  2325  0001                     	;# 
  2326  0002                     	;# 
  2327  0003                     	;# 
  2328  0004                     	;# 
  2329  0005                     	;# 
  2330  0006                     	;# 
  2331  0007                     	;# 
  2332  0008                     	;# 
  2333  0009                     	;# 
  2334  000A                     	;# 
  2335  000B                     	;# 
  2336  000C                     	;# 
  2337  000E                     	;# 
  2338  0011                     	;# 
  2339  0012                     	;# 
  2340  0013                     	;# 
  2341  0015                     	;# 
  2342  0016                     	;# 
  2343  0016                     	;# 
  2344  0017                     	;# 
  2345  0018                     	;# 
  2346  0019                     	;# 
  2347  001A                     	;# 
  2348  001B                     	;# 
  2349  001C                     	;# 
  2350  008C                     	;# 
  2351  008E                     	;# 
  2352  0091                     	;# 
  2353  0092                     	;# 
  2354  0093                     	;# 
  2355  0095                     	;# 
  2356  0096                     	;# 
  2357  0097                     	;# 
  2358  0098                     	;# 
  2359  0099                     	;# 
  2360  009A                     	;# 
  2361  009B                     	;# 
  2362  009B                     	;# 
  2363  009C                     	;# 
  2364  009D                     	;# 
  2365  009E                     	;# 
  2366  009F                     	;# 
  2367  010C                     	;# 
  2368  010E                     	;# 
  2369  0111                     	;# 
  2370  0112                     	;# 
  2371  0113                     	;# 
  2372  0114                     	;# 
  2373  0115                     	;# 
  2374  0116                     	;# 
  2375  0117                     	;# 
  2376  0118                     	;# 
  2377  0119                     	;# 
  2378  018C                     	;# 
  2379  018E                     	;# 
  2380  0191                     	;# 
  2381  0191                     	;# 
  2382  0192                     	;# 
  2383  0193                     	;# 
  2384  0193                     	;# 
  2385  0194                     	;# 
  2386  0195                     	;# 
  2387  0196                     	;# 
  2388  0197                     	;# 
  2389  0199                     	;# 
  2390  019A                     	;# 
  2391  019B                     	;# 
  2392  019B                     	;# 
  2393  019C                     	;# 
  2394  019D                     	;# 
  2395  019E                     	;# 
  2396  019F                     	;# 
  2397  020C                     	;# 
  2398  020E                     	;# 
  2399  028C                     	;# 
  2400  028E                     	;# 
  2401  030C                     	;# 
  2402  030E                     	;# 
  2403  038C                     	;# 
  2404  038E                     	;# 
  2405  0391                     	;# 
  2406  0392                     	;# 
  2407  0393                     	;# 
  2408  0397                     	;# 
  2409  0398                     	;# 
  2410  0399                     	;# 
  2411  0691                     	;# 
  2412  0692                     	;# 
  2413  0693                     	;# 
  2414  0694                     	;# 
  2415  0695                     	;# 
  2416  0D8E                     	;# 
  2417  0D8F                     	;# 
  2418  0D90                     	;# 
  2419  0D91                     	;# 
  2420  0D91                     	;# 
  2421  0D92                     	;# 
  2422  0D93                     	;# 
  2423  0D93                     	;# 
  2424  0D94                     	;# 
  2425  0D95                     	;# 
  2426  0D95                     	;# 
  2427  0D96                     	;# 
  2428  0D97                     	;# 
  2429  0D97                     	;# 
  2430  0D98                     	;# 
  2431  0D99                     	;# 
  2432  0D99                     	;# 
  2433  0D9A                     	;# 
  2434  0D9B                     	;# 
  2435  0D9C                     	;# 
  2436  0D9C                     	;# 
  2437  0D9D                     	;# 
  2438  0D9D                     	;# 
  2439  0D9E                     	;# 
  2440  0D9F                     	;# 
  2441  0DA0                     	;# 
  2442  0DA1                     	;# 
  2443  0DA1                     	;# 
  2444  0DA2                     	;# 
  2445  0DA3                     	;# 
  2446  0DA3                     	;# 
  2447  0DA4                     	;# 
  2448  0DA5                     	;# 
  2449  0DA5                     	;# 
  2450  0DA6                     	;# 
  2451  0DA7                     	;# 
  2452  0DA7                     	;# 
  2453  0DA8                     	;# 
  2454  0DA9                     	;# 
  2455  0DA9                     	;# 
  2456  0DAA                     	;# 
  2457  0DAB                     	;# 
  2458  0DAC                     	;# 
  2459  0DAC                     	;# 
  2460  0DAD                     	;# 
  2461  0DAD                     	;# 
  2462  0DAE                     	;# 
  2463  0DAF                     	;# 
  2464  0DB0                     	;# 
  2465  0DB1                     	;# 
  2466  0DB1                     	;# 
  2467  0DB2                     	;# 
  2468  0DB3                     	;# 
  2469  0DB3                     	;# 
  2470  0DB4                     	;# 
  2471  0DB5                     	;# 
  2472  0DB5                     	;# 
  2473  0DB6                     	;# 
  2474  0DB7                     	;# 
  2475  0DB7                     	;# 
  2476  0DB8                     	;# 
  2477  0DB9                     	;# 
  2478  0DB9                     	;# 
  2479  0DBA                     	;# 
  2480  0DBB                     	;# 
  2481  0DBC                     	;# 
  2482  0DBC                     	;# 
  2483  0DBD                     	;# 
  2484  0DBD                     	;# 
  2485  0DBE                     	;# 
  2486  0DBF                     	;# 
  2487  0DC0                     	;# 
  2488  0DC1                     	;# 
  2489  0DC1                     	;# 
  2490  0DC2                     	;# 
  2491  0DC3                     	;# 
  2492  0DC3                     	;# 
  2493  0DC4                     	;# 
  2494  0DC5                     	;# 
  2495  0DC5                     	;# 
  2496  0DC6                     	;# 
  2497  0DC7                     	;# 
  2498  0DC7                     	;# 
  2499  0DC8                     	;# 
  2500  0DC9                     	;# 
  2501  0DC9                     	;# 
  2502  0DCA                     	;# 
  2503  0DCB                     	;# 
  2504  0DCC                     	;# 
  2505  0DCC                     	;# 
  2506  0DCD                     	;# 
  2507  0DCD                     	;# 
  2508  0DCE                     	;# 
  2509  0DCF                     	;# 
  2510  0DD0                     	;# 
  2511  0E0F                     	;# 
  2512  0E10                     	;# 
  2513  0E11                     	;# 
  2514  0E12                     	;# 
  2515  0E13                     	;# 
  2516  0E14                     	;# 
  2517  0E15                     	;# 
  2518  0E16                     	;# 
  2519  0E17                     	;# 
  2520  0E90                     	;# 
  2521  0E91                     	;# 
  2522  0E92                     	;# 
  2523  0E94                     	;# 
  2524  0E95                     	;# 
  2525  0EA0                     	;# 
  2526  0EA1                     	;# 
  2527  0EA2                     	;# 
  2528  0EA3                     	;# 
  2529  0EA4                     	;# 
  2530  0EA5                     	;# 
  2531  0FE4                     	;# 
  2532  0FE5                     	;# 
  2533  0FE6                     	;# 
  2534  0FE7                     	;# 
  2535  0FE8                     	;# 
  2536  0FE8                     	;# 
  2537  0FE9                     	;# 
  2538  0FEA                     	;# 
  2539  0FEA                     	;# 
  2540  0FEB                     	;# 
  2541  0FED                     	;# 
  2542  0FEE                     	;# 
  2543  0FEE                     	;# 
  2544  0FEF                     	;# 
  2545  0FFF                     	;# 
  2546  0000                     	;# 
  2547  0001                     	;# 
  2548  0002                     	;# 
  2549  0003                     	;# 
  2550  0004                     	;# 
  2551  0005                     	;# 
  2552  0006                     	;# 
  2553  0007                     	;# 
  2554  0008                     	;# 
  2555  0009                     	;# 
  2556  000A                     	;# 
  2557  000B                     	;# 
  2558  000C                     	;# 
  2559  000E                     	;# 
  2560  0011                     	;# 
  2561  0012                     	;# 
  2562  0013                     	;# 
  2563  0015                     	;# 
  2564  0016                     	;# 
  2565  0016                     	;# 
  2566  0017                     	;# 
  2567  0018                     	;# 
  2568  0019                     	;# 
  2569  001A                     	;# 
  2570  001B                     	;# 
  2571  001C                     	;# 
  2572  008C                     	;# 
  2573  008E                     	;# 
  2574  0091                     	;# 
  2575  0092                     	;# 
  2576  0093                     	;# 
  2577  0095                     	;# 
  2578  0096                     	;# 
  2579  0097                     	;# 
  2580  0098                     	;# 
  2581  0099                     	;# 
  2582  009A                     	;# 
  2583  009B                     	;# 
  2584  009B                     	;# 
  2585  009C                     	;# 
  2586  009D                     	;# 
  2587  009E                     	;# 
  2588  009F                     	;# 
  2589  010C                     	;# 
  2590  010E                     	;# 
  2591  0111                     	;# 
  2592  0112                     	;# 
  2593  0113                     	;# 
  2594  0114                     	;# 
  2595  0115                     	;# 
  2596  0116                     	;# 
  2597  0117                     	;# 
  2598  0118                     	;# 
  2599  0119                     	;# 
  2600  018C                     	;# 
  2601  018E                     	;# 
  2602  0191                     	;# 
  2603  0191                     	;# 
  2604  0192                     	;# 
  2605  0193                     	;# 
  2606  0193                     	;# 
  2607  0194                     	;# 
  2608  0195                     	;# 
  2609  0196                     	;# 
  2610  0197                     	;# 
  2611  0199                     	;# 
  2612  019A                     	;# 
  2613  019B                     	;# 
  2614  019B                     	;# 
  2615  019C                     	;# 
  2616  019D                     	;# 
  2617  019E                     	;# 
  2618  019F                     	;# 
  2619  020C                     	;# 
  2620  020E                     	;# 
  2621  028C                     	;# 
  2622  028E                     	;# 
  2623  030C                     	;# 
  2624  030E                     	;# 
  2625  038C                     	;# 
  2626  038E                     	;# 
  2627  0391                     	;# 
  2628  0392                     	;# 
  2629  0393                     	;# 
  2630  0397                     	;# 
  2631  0398                     	;# 
  2632  0399                     	;# 
  2633  0691                     	;# 
  2634  0692                     	;# 
  2635  0693                     	;# 
  2636  0694                     	;# 
  2637  0695                     	;# 
  2638  0D8E                     	;# 
  2639  0D8F                     	;# 
  2640  0D90                     	;# 
  2641  0D91                     	;# 
  2642  0D91                     	;# 
  2643  0D92                     	;# 
  2644  0D93                     	;# 
  2645  0D93                     	;# 
  2646  0D94                     	;# 
  2647  0D95                     	;# 
  2648  0D95                     	;# 
  2649  0D96                     	;# 
  2650  0D97                     	;# 
  2651  0D97                     	;# 
  2652  0D98                     	;# 
  2653  0D99                     	;# 
  2654  0D99                     	;# 
  2655  0D9A                     	;# 
  2656  0D9B                     	;# 
  2657  0D9C                     	;# 
  2658  0D9C                     	;# 
  2659  0D9D                     	;# 
  2660  0D9D                     	;# 
  2661  0D9E                     	;# 
  2662  0D9F                     	;# 
  2663  0DA0                     	;# 
  2664  0DA1                     	;# 
  2665  0DA1                     	;# 
  2666  0DA2                     	;# 
  2667  0DA3                     	;# 
  2668  0DA3                     	;# 
  2669  0DA4                     	;# 
  2670  0DA5                     	;# 
  2671  0DA5                     	;# 
  2672  0DA6                     	;# 
  2673  0DA7                     	;# 
  2674  0DA7                     	;# 
  2675  0DA8                     	;# 
  2676  0DA9                     	;# 
  2677  0DA9                     	;# 
  2678  0DAA                     	;# 
  2679  0DAB                     	;# 
  2680  0DAC                     	;# 
  2681  0DAC                     	;# 
  2682  0DAD                     	;# 
  2683  0DAD                     	;# 
  2684  0DAE                     	;# 
  2685  0DAF                     	;# 
  2686  0DB0                     	;# 
  2687  0DB1                     	;# 
  2688  0DB1                     	;# 
  2689  0DB2                     	;# 
  2690  0DB3                     	;# 
  2691  0DB3                     	;# 
  2692  0DB4                     	;# 
  2693  0DB5                     	;# 
  2694  0DB5                     	;# 
  2695  0DB6                     	;# 
  2696  0DB7                     	;# 
  2697  0DB7                     	;# 
  2698  0DB8                     	;# 
  2699  0DB9                     	;# 
  2700  0DB9                     	;# 
  2701  0DBA                     	;# 
  2702  0DBB                     	;# 
  2703  0DBC                     	;# 
  2704  0DBC                     	;# 
  2705  0DBD                     	;# 
  2706  0DBD                     	;# 
  2707  0DBE                     	;# 
  2708  0DBF                     	;# 
  2709  0DC0                     	;# 
  2710  0DC1                     	;# 
  2711  0DC1                     	;# 
  2712  0DC2                     	;# 
  2713  0DC3                     	;# 
  2714  0DC3                     	;# 
  2715  0DC4                     	;# 
  2716  0DC5                     	;# 
  2717  0DC5                     	;# 
  2718  0DC6                     	;# 
  2719  0DC7                     	;# 
  2720  0DC7                     	;# 
  2721  0DC8                     	;# 
  2722  0DC9                     	;# 
  2723  0DC9                     	;# 
  2724  0DCA                     	;# 
  2725  0DCB                     	;# 
  2726  0DCC                     	;# 
  2727  0DCC                     	;# 
  2728  0DCD                     	;# 
  2729  0DCD                     	;# 
  2730  0DCE                     	;# 
  2731  0DCF                     	;# 
  2732  0DD0                     	;# 
  2733  0E0F                     	;# 
  2734  0E10                     	;# 
  2735  0E11                     	;# 
  2736  0E12                     	;# 
  2737  0E13                     	;# 
  2738  0E14                     	;# 
  2739  0E15                     	;# 
  2740  0E16                     	;# 
  2741  0E17                     	;# 
  2742  0E90                     	;# 
  2743  0E91                     	;# 
  2744  0E92                     	;# 
  2745  0E94                     	;# 
  2746  0E95                     	;# 
  2747  0EA0                     	;# 
  2748  0EA1                     	;# 
  2749  0EA2                     	;# 
  2750  0EA3                     	;# 
  2751  0EA4                     	;# 
  2752  0EA5                     	;# 
  2753  0FE4                     	;# 
  2754  0FE5                     	;# 
  2755  0FE6                     	;# 
  2756  0FE7                     	;# 
  2757  0FE8                     	;# 
  2758  0FE8                     	;# 
  2759  0FE9                     	;# 
  2760  0FEA                     	;# 
  2761  0FEA                     	;# 
  2762  0FEB                     	;# 
  2763  0FED                     	;# 
  2764  0FEE                     	;# 
  2765  0FEE                     	;# 
  2766  0FEF                     	;# 
  2767  0FFF                     	;# 
  2768  0000                     	;# 
  2769  0001                     	;# 
  2770  0002                     	;# 
  2771  0003                     	;# 
  2772  0004                     	;# 
  2773  0005                     	;# 
  2774  0006                     	;# 
  2775  0007                     	;# 
  2776  0008                     	;# 
  2777  0009                     	;# 
  2778  000A                     	;# 
  2779  000B                     	;# 
  2780  000C                     	;# 
  2781  000E                     	;# 
  2782  0011                     	;# 
  2783  0012                     	;# 
  2784  0013                     	;# 
  2785  0015                     	;# 
  2786  0016                     	;# 
  2787  0016                     	;# 
  2788  0017                     	;# 
  2789  0018                     	;# 
  2790  0019                     	;# 
  2791  001A                     	;# 
  2792  001B                     	;# 
  2793  001C                     	;# 
  2794  008C                     	;# 
  2795  008E                     	;# 
  2796  0091                     	;# 
  2797  0092                     	;# 
  2798  0093                     	;# 
  2799  0095                     	;# 
  2800  0096                     	;# 
  2801  0097                     	;# 
  2802  0098                     	;# 
  2803  0099                     	;# 
  2804  009A                     	;# 
  2805  009B                     	;# 
  2806  009B                     	;# 
  2807  009C                     	;# 
  2808  009D                     	;# 
  2809  009E                     	;# 
  2810  009F                     	;# 
  2811  010C                     	;# 
  2812  010E                     	;# 
  2813  0111                     	;# 
  2814  0112                     	;# 
  2815  0113                     	;# 
  2816  0114                     	;# 
  2817  0115                     	;# 
  2818  0116                     	;# 
  2819  0117                     	;# 
  2820  0118                     	;# 
  2821  0119                     	;# 
  2822  018C                     	;# 
  2823  018E                     	;# 
  2824  0191                     	;# 
  2825  0191                     	;# 
  2826  0192                     	;# 
  2827  0193                     	;# 
  2828  0193                     	;# 
  2829  0194                     	;# 
  2830  0195                     	;# 
  2831  0196                     	;# 
  2832  0197                     	;# 
  2833  0199                     	;# 
  2834  019A                     	;# 
  2835  019B                     	;# 
  2836  019B                     	;# 
  2837  019C                     	;# 
  2838  019D                     	;# 
  2839  019E                     	;# 
  2840  019F                     	;# 
  2841  020C                     	;# 
  2842  020E                     	;# 
  2843  028C                     	;# 
  2844  028E                     	;# 
  2845  030C                     	;# 
  2846  030E                     	;# 
  2847  038C                     	;# 
  2848  038E                     	;# 
  2849  0391                     	;# 
  2850  0392                     	;# 
  2851  0393                     	;# 
  2852  0397                     	;# 
  2853  0398                     	;# 
  2854  0399                     	;# 
  2855  0691                     	;# 
  2856  0692                     	;# 
  2857  0693                     	;# 
  2858  0694                     	;# 
  2859  0695                     	;# 
  2860  0D8E                     	;# 
  2861  0D8F                     	;# 
  2862  0D90                     	;# 
  2863  0D91                     	;# 
  2864  0D91                     	;# 
  2865  0D92                     	;# 
  2866  0D93                     	;# 
  2867  0D93                     	;# 
  2868  0D94                     	;# 
  2869  0D95                     	;# 
  2870  0D95                     	;# 
  2871  0D96                     	;# 
  2872  0D97                     	;# 
  2873  0D97                     	;# 
  2874  0D98                     	;# 
  2875  0D99                     	;# 
  2876  0D99                     	;# 
  2877  0D9A                     	;# 
  2878  0D9B                     	;# 
  2879  0D9C                     	;# 
  2880  0D9C                     	;# 
  2881  0D9D                     	;# 
  2882  0D9D                     	;# 
  2883  0D9E                     	;# 
  2884  0D9F                     	;# 
  2885  0DA0                     	;# 
  2886  0DA1                     	;# 
  2887  0DA1                     	;# 
  2888  0DA2                     	;# 
  2889  0DA3                     	;# 
  2890  0DA3                     	;# 
  2891  0DA4                     	;# 
  2892  0DA5                     	;# 
  2893  0DA5                     	;# 
  2894  0DA6                     	;# 
  2895  0DA7                     	;# 
  2896  0DA7                     	;# 
  2897  0DA8                     	;# 
  2898  0DA9                     	;# 
  2899  0DA9                     	;# 
  2900  0DAA                     	;# 
  2901  0DAB                     	;# 
  2902  0DAC                     	;# 
  2903  0DAC                     	;# 
  2904  0DAD                     	;# 
  2905  0DAD                     	;# 
  2906  0DAE                     	;# 
  2907  0DAF                     	;# 
  2908  0DB0                     	;# 
  2909  0DB1                     	;# 
  2910  0DB1                     	;# 
  2911  0DB2                     	;# 
  2912  0DB3                     	;# 
  2913  0DB3                     	;# 
  2914  0DB4                     	;# 
  2915  0DB5                     	;# 
  2916  0DB5                     	;# 
  2917  0DB6                     	;# 
  2918  0DB7                     	;# 
  2919  0DB7                     	;# 
  2920  0DB8                     	;# 
  2921  0DB9                     	;# 
  2922  0DB9                     	;# 
  2923  0DBA                     	;# 
  2924  0DBB                     	;# 
  2925  0DBC                     	;# 
  2926  0DBC                     	;# 
  2927  0DBD                     	;# 
  2928  0DBD                     	;# 
  2929  0DBE                     	;# 
  2930  0DBF                     	;# 
  2931  0DC0                     	;# 
  2932  0DC1                     	;# 
  2933  0DC1                     	;# 
  2934  0DC2                     	;# 
  2935  0DC3                     	;# 
  2936  0DC3                     	;# 
  2937  0DC4                     	;# 
  2938  0DC5                     	;# 
  2939  0DC5                     	;# 
  2940  0DC6                     	;# 
  2941  0DC7                     	;# 
  2942  0DC7                     	;# 
  2943  0DC8                     	;# 
  2944  0DC9                     	;# 
  2945  0DC9                     	;# 
  2946  0DCA                     	;# 
  2947  0DCB                     	;# 
  2948  0DCC                     	;# 
  2949  0DCC                     	;# 
  2950  0DCD                     	;# 
  2951  0DCD                     	;# 
  2952  0DCE                     	;# 
  2953  0DCF                     	;# 
  2954  0DD0                     	;# 
  2955  0E0F                     	;# 
  2956  0E10                     	;# 
  2957  0E11                     	;# 
  2958  0E12                     	;# 
  2959  0E13                     	;# 
  2960  0E14                     	;# 
  2961  0E15                     	;# 
  2962  0E16                     	;# 
  2963  0E17                     	;# 
  2964  0E90                     	;# 
  2965  0E91                     	;# 
  2966  0E92                     	;# 
  2967  0E94                     	;# 
  2968  0E95                     	;# 
  2969  0EA0                     	;# 
  2970  0EA1                     	;# 
  2971  0EA2                     	;# 
  2972  0EA3                     	;# 
  2973  0EA4                     	;# 
  2974  0EA5                     	;# 
  2975  0FE4                     	;# 
  2976  0FE5                     	;# 
  2977  0FE6                     	;# 
  2978  0FE7                     	;# 
  2979  0FE8                     	;# 
  2980  0FE8                     	;# 
  2981  0FE9                     	;# 
  2982  0FEA                     	;# 
  2983  0FEA                     	;# 
  2984  0FEB                     	;# 
  2985  0FED                     	;# 
  2986  0FEE                     	;# 
  2987  0FEE                     	;# 
  2988  0FEF                     	;# 
  2989  0FFF                     	;# 
  2990  0000                     	;# 
  2991  0001                     	;# 
  2992  0002                     	;# 
  2993  0003                     	;# 
  2994  0004                     	;# 
  2995  0005                     	;# 
  2996  0006                     	;# 
  2997  0007                     	;# 
  2998  0008                     	;# 
  2999  0009                     	;# 
  3000  000A                     	;# 
  3001  000B                     	;# 
  3002  000C                     	;# 
  3003  000E                     	;# 
  3004  0011                     	;# 
  3005  0012                     	;# 
  3006  0013                     	;# 
  3007  0015                     	;# 
  3008  0016                     	;# 
  3009  0016                     	;# 
  3010  0017                     	;# 
  3011  0018                     	;# 
  3012  0019                     	;# 
  3013  001A                     	;# 
  3014  001B                     	;# 
  3015  001C                     	;# 
  3016  008C                     	;# 
  3017  008E                     	;# 
  3018  0091                     	;# 
  3019  0092                     	;# 
  3020  0093                     	;# 
  3021  0095                     	;# 
  3022  0096                     	;# 
  3023  0097                     	;# 
  3024  0098                     	;# 
  3025  0099                     	;# 
  3026  009A                     	;# 
  3027  009B                     	;# 
  3028  009B                     	;# 
  3029  009C                     	;# 
  3030  009D                     	;# 
  3031  009E                     	;# 
  3032  009F                     	;# 
  3033  010C                     	;# 
  3034  010E                     	;# 
  3035  0111                     	;# 
  3036  0112                     	;# 
  3037  0113                     	;# 
  3038  0114                     	;# 
  3039  0115                     	;# 
  3040  0116                     	;# 
  3041  0117                     	;# 
  3042  0118                     	;# 
  3043  0119                     	;# 
  3044  018C                     	;# 
  3045  018E                     	;# 
  3046  0191                     	;# 
  3047  0191                     	;# 
  3048  0192                     	;# 
  3049  0193                     	;# 
  3050  0193                     	;# 
  3051  0194                     	;# 
  3052  0195                     	;# 
  3053  0196                     	;# 
  3054  0197                     	;# 
  3055  0199                     	;# 
  3056  019A                     	;# 
  3057  019B                     	;# 
  3058  019B                     	;# 
  3059  019C                     	;# 
  3060  019D                     	;# 
  3061  019E                     	;# 
  3062  019F                     	;# 
  3063  020C                     	;# 
  3064  020E                     	;# 
  3065  028C                     	;# 
  3066  028E                     	;# 
  3067  030C                     	;# 
  3068  030E                     	;# 
  3069  038C                     	;# 
  3070  038E                     	;# 
  3071  0391                     	;# 
  3072  0392                     	;# 
  3073  0393                     	;# 
  3074  0397                     	;# 
  3075  0398                     	;# 
  3076  0399                     	;# 
  3077  0691                     	;# 
  3078  0692                     	;# 
  3079  0693                     	;# 
  3080  0694                     	;# 
  3081  0695                     	;# 
  3082  0D8E                     	;# 
  3083  0D8F                     	;# 
  3084  0D90                     	;# 
  3085  0D91                     	;# 
  3086  0D91                     	;# 
  3087  0D92                     	;# 
  3088  0D93                     	;# 
  3089  0D93                     	;# 
  3090  0D94                     	;# 
  3091  0D95                     	;# 
  3092  0D95                     	;# 
  3093  0D96                     	;# 
  3094  0D97                     	;# 
  3095  0D97                     	;# 
  3096  0D98                     	;# 
  3097  0D99                     	;# 
  3098  0D99                     	;# 
  3099  0D9A                     	;# 
  3100  0D9B                     	;# 
  3101  0D9C                     	;# 
  3102  0D9C                     	;# 
  3103  0D9D                     	;# 
  3104  0D9D                     	;# 
  3105  0D9E                     	;# 
  3106  0D9F                     	;# 
  3107  0DA0                     	;# 
  3108  0DA1                     	;# 
  3109  0DA1                     	;# 
  3110  0DA2                     	;# 
  3111  0DA3                     	;# 
  3112  0DA3                     	;# 
  3113  0DA4                     	;# 
  3114  0DA5                     	;# 
  3115  0DA5                     	;# 
  3116  0DA6                     	;# 
  3117  0DA7                     	;# 
  3118  0DA7                     	;# 
  3119  0DA8                     	;# 
  3120  0DA9                     	;# 
  3121  0DA9                     	;# 
  3122  0DAA                     	;# 
  3123  0DAB                     	;# 
  3124  0DAC                     	;# 
  3125  0DAC                     	;# 
  3126  0DAD                     	;# 
  3127  0DAD                     	;# 
  3128  0DAE                     	;# 
  3129  0DAF                     	;# 
  3130  0DB0                     	;# 
  3131  0DB1                     	;# 
  3132  0DB1                     	;# 
  3133  0DB2                     	;# 
  3134  0DB3                     	;# 
  3135  0DB3                     	;# 
  3136  0DB4                     	;# 
  3137  0DB5                     	;# 
  3138  0DB5                     	;# 
  3139  0DB6                     	;# 
  3140  0DB7                     	;# 
  3141  0DB7                     	;# 
  3142  0DB8                     	;# 
  3143  0DB9                     	;# 
  3144  0DB9                     	;# 
  3145  0DBA                     	;# 
  3146  0DBB                     	;# 
  3147  0DBC                     	;# 
  3148  0DBC                     	;# 
  3149  0DBD                     	;# 
  3150  0DBD                     	;# 
  3151  0DBE                     	;# 
  3152  0DBF                     	;# 
  3153  0DC0                     	;# 
  3154  0DC1                     	;# 
  3155  0DC1                     	;# 
  3156  0DC2                     	;# 
  3157  0DC3                     	;# 
  3158  0DC3                     	;# 
  3159  0DC4                     	;# 
  3160  0DC5                     	;# 
  3161  0DC5                     	;# 
  3162  0DC6                     	;# 
  3163  0DC7                     	;# 
  3164  0DC7                     	;# 
  3165  0DC8                     	;# 
  3166  0DC9                     	;# 
  3167  0DC9                     	;# 
  3168  0DCA                     	;# 
  3169  0DCB                     	;# 
  3170  0DCC                     	;# 
  3171  0DCC                     	;# 
  3172  0DCD                     	;# 
  3173  0DCD                     	;# 
  3174  0DCE                     	;# 
  3175  0DCF                     	;# 
  3176  0DD0                     	;# 
  3177  0E0F                     	;# 
  3178  0E10                     	;# 
  3179  0E11                     	;# 
  3180  0E12                     	;# 
  3181  0E13                     	;# 
  3182  0E14                     	;# 
  3183  0E15                     	;# 
  3184  0E16                     	;# 
  3185  0E17                     	;# 
  3186  0E90                     	;# 
  3187  0E91                     	;# 
  3188  0E92                     	;# 
  3189  0E94                     	;# 
  3190  0E95                     	;# 
  3191  0EA0                     	;# 
  3192  0EA1                     	;# 
  3193  0EA2                     	;# 
  3194  0EA3                     	;# 
  3195  0EA4                     	;# 
  3196  0EA5                     	;# 
  3197  0FE4                     	;# 
  3198  0FE5                     	;# 
  3199  0FE6                     	;# 
  3200  0FE7                     	;# 
  3201  0FE8                     	;# 
  3202  0FE8                     	;# 
  3203  0FE9                     	;# 
  3204  0FEA                     	;# 
  3205  0FEA                     	;# 
  3206  0FEB                     	;# 
  3207  0FED                     	;# 
  3208  0FEE                     	;# 
  3209  0FEE                     	;# 
  3210  0FEF                     	;# 
  3211  0FFF                     	;# 
  3212  0000                     	;# 
  3213  0001                     	;# 
  3214  0002                     	;# 
  3215  0003                     	;# 
  3216  0004                     	;# 
  3217  0005                     	;# 
  3218  0006                     	;# 
  3219  0007                     	;# 
  3220  0008                     	;# 
  3221  0009                     	;# 
  3222  000A                     	;# 
  3223  000B                     	;# 
  3224  000C                     	;# 
  3225  000E                     	;# 
  3226  0011                     	;# 
  3227  0012                     	;# 
  3228  0013                     	;# 
  3229  0015                     	;# 
  3230  0016                     	;# 
  3231  0016                     	;# 
  3232  0017                     	;# 
  3233  0018                     	;# 
  3234  0019                     	;# 
  3235  001A                     	;# 
  3236  001B                     	;# 
  3237  001C                     	;# 
  3238  008C                     	;# 
  3239  008E                     	;# 
  3240  0091                     	;# 
  3241  0092                     	;# 
  3242  0093                     	;# 
  3243  0095                     	;# 
  3244  0096                     	;# 
  3245  0097                     	;# 
  3246  0098                     	;# 
  3247  0099                     	;# 
  3248  009A                     	;# 
  3249  009B                     	;# 
  3250  009B                     	;# 
  3251  009C                     	;# 
  3252  009D                     	;# 
  3253  009E                     	;# 
  3254  009F                     	;# 
  3255  010C                     	;# 
  3256  010E                     	;# 
  3257  0111                     	;# 
  3258  0112                     	;# 
  3259  0113                     	;# 
  3260  0114                     	;# 
  3261  0115                     	;# 
  3262  0116                     	;# 
  3263  0117                     	;# 
  3264  0118                     	;# 
  3265  0119                     	;# 
  3266  018C                     	;# 
  3267  018E                     	;# 
  3268  0191                     	;# 
  3269  0191                     	;# 
  3270  0192                     	;# 
  3271  0193                     	;# 
  3272  0193                     	;# 
  3273  0194                     	;# 
  3274  0195                     	;# 
  3275  0196                     	;# 
  3276  0197                     	;# 
  3277  0199                     	;# 
  3278  019A                     	;# 
  3279  019B                     	;# 
  3280  019B                     	;# 
  3281  019C                     	;# 
  3282  019D                     	;# 
  3283  019E                     	;# 
  3284  019F                     	;# 
  3285  020C                     	;# 
  3286  020E                     	;# 
  3287  028C                     	;# 
  3288  028E                     	;# 
  3289  030C                     	;# 
  3290  030E                     	;# 
  3291  038C                     	;# 
  3292  038E                     	;# 
  3293  0391                     	;# 
  3294  0392                     	;# 
  3295  0393                     	;# 
  3296  0397                     	;# 
  3297  0398                     	;# 
  3298  0399                     	;# 
  3299  0691                     	;# 
  3300  0692                     	;# 
  3301  0693                     	;# 
  3302  0694                     	;# 
  3303  0695                     	;# 
  3304  0D8E                     	;# 
  3305  0D8F                     	;# 
  3306  0D90                     	;# 
  3307  0D91                     	;# 
  3308  0D91                     	;# 
  3309  0D92                     	;# 
  3310  0D93                     	;# 
  3311  0D93                     	;# 
  3312  0D94                     	;# 
  3313  0D95                     	;# 
  3314  0D95                     	;# 
  3315  0D96                     	;# 
  3316  0D97                     	;# 
  3317  0D97                     	;# 
  3318  0D98                     	;# 
  3319  0D99                     	;# 
  3320  0D99                     	;# 
  3321  0D9A                     	;# 
  3322  0D9B                     	;# 
  3323  0D9C                     	;# 
  3324  0D9C                     	;# 
  3325  0D9D                     	;# 
  3326  0D9D                     	;# 
  3327  0D9E                     	;# 
  3328  0D9F                     	;# 
  3329  0DA0                     	;# 
  3330  0DA1                     	;# 
  3331  0DA1                     	;# 
  3332  0DA2                     	;# 
  3333  0DA3                     	;# 
  3334  0DA3                     	;# 
  3335  0DA4                     	;# 
  3336  0DA5                     	;# 
  3337  0DA5                     	;# 
  3338  0DA6                     	;# 
  3339  0DA7                     	;# 
  3340  0DA7                     	;# 
  3341  0DA8                     	;# 
  3342  0DA9                     	;# 
  3343  0DA9                     	;# 
  3344  0DAA                     	;# 
  3345  0DAB                     	;# 
  3346  0DAC                     	;# 
  3347  0DAC                     	;# 
  3348  0DAD                     	;# 
  3349  0DAD                     	;# 
  3350  0DAE                     	;# 
  3351  0DAF                     	;# 
  3352  0DB0                     	;# 
  3353  0DB1                     	;# 
  3354  0DB1                     	;# 
  3355  0DB2                     	;# 
  3356  0DB3                     	;# 
  3357  0DB3                     	;# 
  3358  0DB4                     	;# 
  3359  0DB5                     	;# 
  3360  0DB5                     	;# 
  3361  0DB6                     	;# 
  3362  0DB7                     	;# 
  3363  0DB7                     	;# 
  3364  0DB8                     	;# 
  3365  0DB9                     	;# 
  3366  0DB9                     	;# 
  3367  0DBA                     	;# 
  3368  0DBB                     	;# 
  3369  0DBC                     	;# 
  3370  0DBC                     	;# 
  3371  0DBD                     	;# 
  3372  0DBD                     	;# 
  3373  0DBE                     	;# 
  3374  0DBF                     	;# 
  3375  0DC0                     	;# 
  3376  0DC1                     	;# 
  3377  0DC1                     	;# 
  3378  0DC2                     	;# 
  3379  0DC3                     	;# 
  3380  0DC3                     	;# 
  3381  0DC4                     	;# 
  3382  0DC5                     	;# 
  3383  0DC5                     	;# 
  3384  0DC6                     	;# 
  3385  0DC7                     	;# 
  3386  0DC7                     	;# 
  3387  0DC8                     	;# 
  3388  0DC9                     	;# 
  3389  0DC9                     	;# 
  3390  0DCA                     	;# 
  3391  0DCB                     	;# 
  3392  0DCC                     	;# 
  3393  0DCC                     	;# 
  3394  0DCD                     	;# 
  3395  0DCD                     	;# 
  3396  0DCE                     	;# 
  3397  0DCF                     	;# 
  3398  0DD0                     	;# 
  3399  0E0F                     	;# 
  3400  0E10                     	;# 
  3401  0E11                     	;# 
  3402  0E12                     	;# 
  3403  0E13                     	;# 
  3404  0E14                     	;# 
  3405  0E15                     	;# 
  3406  0E16                     	;# 
  3407  0E17                     	;# 
  3408  0E90                     	;# 
  3409  0E91                     	;# 
  3410  0E92                     	;# 
  3411  0E94                     	;# 
  3412  0E95                     	;# 
  3413  0EA0                     	;# 
  3414  0EA1                     	;# 
  3415  0EA2                     	;# 
  3416  0EA3                     	;# 
  3417  0EA4                     	;# 
  3418  0EA5                     	;# 
  3419  0FE4                     	;# 
  3420  0FE5                     	;# 
  3421  0FE6                     	;# 
  3422  0FE7                     	;# 
  3423  0FE8                     	;# 
  3424  0FE8                     	;# 
  3425  0FE9                     	;# 
  3426  0FEA                     	;# 
  3427  0FEA                     	;# 
  3428  0FEB                     	;# 
  3429  0FED                     	;# 
  3430  0FEE                     	;# 
  3431  0FEE                     	;# 
  3432  0FEF                     	;# 
  3433  0FFF                     	;# 
  3434  0000                     	;# 
  3435  0001                     	;# 
  3436  0002                     	;# 
  3437  0003                     	;# 
  3438  0004                     	;# 
  3439  0005                     	;# 
  3440  0006                     	;# 
  3441  0007                     	;# 
  3442  0008                     	;# 
  3443  0009                     	;# 
  3444  000A                     	;# 
  3445  000B                     	;# 
  3446  000C                     	;# 
  3447  000E                     	;# 
  3448  0011                     	;# 
  3449  0012                     	;# 
  3450  0013                     	;# 
  3451  0015                     	;# 
  3452  0016                     	;# 
  3453  0016                     	;# 
  3454  0017                     	;# 
  3455  0018                     	;# 
  3456  0019                     	;# 
  3457  001A                     	;# 
  3458  001B                     	;# 
  3459  001C                     	;# 
  3460  008C                     	;# 
  3461  008E                     	;# 
  3462  0091                     	;# 
  3463  0092                     	;# 
  3464  0093                     	;# 
  3465  0095                     	;# 
  3466  0096                     	;# 
  3467  0097                     	;# 
  3468  0098                     	;# 
  3469  0099                     	;# 
  3470  009A                     	;# 
  3471  009B                     	;# 
  3472  009B                     	;# 
  3473  009C                     	;# 
  3474  009D                     	;# 
  3475  009E                     	;# 
  3476  009F                     	;# 
  3477  010C                     	;# 
  3478  010E                     	;# 
  3479  0111                     	;# 
  3480  0112                     	;# 
  3481  0113                     	;# 
  3482  0114                     	;# 
  3483  0115                     	;# 
  3484  0116                     	;# 
  3485  0117                     	;# 
  3486  0118                     	;# 
  3487  0119                     	;# 
  3488  018C                     	;# 
  3489  018E                     	;# 
  3490  0191                     	;# 
  3491  0191                     	;# 
  3492  0192                     	;# 
  3493  0193                     	;# 
  3494  0193                     	;# 
  3495  0194                     	;# 
  3496  0195                     	;# 
  3497  0196                     	;# 
  3498  0197                     	;# 
  3499  0199                     	;# 
  3500  019A                     	;# 
  3501  019B                     	;# 
  3502  019B                     	;# 
  3503  019C                     	;# 
  3504  019D                     	;# 
  3505  019E                     	;# 
  3506  019F                     	;# 
  3507  020C                     	;# 
  3508  020E                     	;# 
  3509  028C                     	;# 
  3510  028E                     	;# 
  3511  030C                     	;# 
  3512  030E                     	;# 
  3513  038C                     	;# 
  3514  038E                     	;# 
  3515  0391                     	;# 
  3516  0392                     	;# 
  3517  0393                     	;# 
  3518  0397                     	;# 
  3519  0398                     	;# 
  3520  0399                     	;# 
  3521  0691                     	;# 
  3522  0692                     	;# 
  3523  0693                     	;# 
  3524  0694                     	;# 
  3525  0695                     	;# 
  3526  0D8E                     	;# 
  3527  0D8F                     	;# 
  3528  0D90                     	;# 
  3529  0D91                     	;# 
  3530  0D91                     	;# 
  3531  0D92                     	;# 
  3532  0D93                     	;# 
  3533  0D93                     	;# 
  3534  0D94                     	;# 
  3535  0D95                     	;# 
  3536  0D95                     	;# 
  3537  0D96                     	;# 
  3538  0D97                     	;# 
  3539  0D97                     	;# 
  3540  0D98                     	;# 
  3541  0D99                     	;# 
  3542  0D99                     	;# 
  3543  0D9A                     	;# 
  3544  0D9B                     	;# 
  3545  0D9C                     	;# 
  3546  0D9C                     	;# 
  3547  0D9D                     	;# 
  3548  0D9D                     	;# 
  3549  0D9E                     	;# 
  3550  0D9F                     	;# 
  3551  0DA0                     	;# 
  3552  0DA1                     	;# 
  3553  0DA1                     	;# 
  3554  0DA2                     	;# 
  3555  0DA3                     	;# 
  3556  0DA3                     	;# 
  3557  0DA4                     	;# 
  3558  0DA5                     	;# 
  3559  0DA5                     	;# 
  3560  0DA6                     	;# 
  3561  0DA7                     	;# 
  3562  0DA7                     	;# 
  3563  0DA8                     	;# 
  3564  0DA9                     	;# 
  3565  0DA9                     	;# 
  3566  0DAA                     	;# 
  3567  0DAB                     	;# 
  3568  0DAC                     	;# 
  3569  0DAC                     	;# 
  3570  0DAD                     	;# 
  3571  0DAD                     	;# 
  3572  0DAE                     	;# 
  3573  0DAF                     	;# 
  3574  0DB0                     	;# 
  3575  0DB1                     	;# 
  3576  0DB1                     	;# 
  3577  0DB2                     	;# 
  3578  0DB3                     	;# 
  3579  0DB3                     	;# 
  3580  0DB4                     	;# 
  3581  0DB5                     	;# 
  3582  0DB5                     	;# 
  3583  0DB6                     	;# 
  3584  0DB7                     	;# 
  3585  0DB7                     	;# 
  3586  0DB8                     	;# 
  3587  0DB9                     	;# 
  3588  0DB9                     	;# 
  3589  0DBA                     	;# 
  3590  0DBB                     	;# 
  3591  0DBC                     	;# 
  3592  0DBC                     	;# 
  3593  0DBD                     	;# 
  3594  0DBD                     	;# 
  3595  0DBE                     	;# 
  3596  0DBF                     	;# 
  3597  0DC0                     	;# 
  3598  0DC1                     	;# 
  3599  0DC1                     	;# 
  3600  0DC2                     	;# 
  3601  0DC3                     	;# 
  3602  0DC3                     	;# 
  3603  0DC4                     	;# 
  3604  0DC5                     	;# 
  3605  0DC5                     	;# 
  3606  0DC6                     	;# 
  3607  0DC7                     	;# 
  3608  0DC7                     	;# 
  3609  0DC8                     	;# 
  3610  0DC9                     	;# 
  3611  0DC9                     	;# 
  3612  0DCA                     	;# 
  3613  0DCB                     	;# 
  3614  0DCC                     	;# 
  3615  0DCC                     	;# 
  3616  0DCD                     	;# 
  3617  0DCD                     	;# 
  3618  0DCE                     	;# 
  3619  0DCF                     	;# 
  3620  0DD0                     	;# 
  3621  0E0F                     	;# 
  3622  0E10                     	;# 
  3623  0E11                     	;# 
  3624  0E12                     	;# 
  3625  0E13                     	;# 
  3626  0E14                     	;# 
  3627  0E15                     	;# 
  3628  0E16                     	;# 
  3629  0E17                     	;# 
  3630  0E90                     	;# 
  3631  0E91                     	;# 
  3632  0E92                     	;# 
  3633  0E94                     	;# 
  3634  0E95                     	;# 
  3635  0EA0                     	;# 
  3636  0EA1                     	;# 
  3637  0EA2                     	;# 
  3638  0EA3                     	;# 
  3639  0EA4                     	;# 
  3640  0EA5                     	;# 
  3641  0FE4                     	;# 
  3642  0FE5                     	;# 
  3643  0FE6                     	;# 
  3644  0FE7                     	;# 
  3645  0FE8                     	;# 
  3646  0FE8                     	;# 
  3647  0FE9                     	;# 
  3648  0FEA                     	;# 
  3649  0FEA                     	;# 
  3650  0FEB                     	;# 
  3651  0FED                     	;# 
  3652  0FEE                     	;# 
  3653  0FEE                     	;# 
  3654  0FEF                     	;# 
  3655  0FFF                     	;# 
  3656  0000                     	;# 
  3657  0001                     	;# 
  3658  0002                     	;# 
  3659  0003                     	;# 
  3660  0004                     	;# 
  3661  0005                     	;# 
  3662  0006                     	;# 
  3663  0007                     	;# 
  3664  0008                     	;# 
  3665  0009                     	;# 
  3666  000A                     	;# 
  3667  000B                     	;# 
  3668  000C                     	;# 
  3669  000E                     	;# 
  3670  0011                     	;# 
  3671  0012                     	;# 
  3672  0013                     	;# 
  3673  0015                     	;# 
  3674  0016                     	;# 
  3675  0016                     	;# 
  3676  0017                     	;# 
  3677  0018                     	;# 
  3678  0019                     	;# 
  3679  001A                     	;# 
  3680  001B                     	;# 
  3681  001C                     	;# 
  3682  008C                     	;# 
  3683  008E                     	;# 
  3684  0091                     	;# 
  3685  0092                     	;# 
  3686  0093                     	;# 
  3687  0095                     	;# 
  3688  0096                     	;# 
  3689  0097                     	;# 
  3690  0098                     	;# 
  3691  0099                     	;# 
  3692  009A                     	;# 
  3693  009B                     	;# 
  3694  009B                     	;# 
  3695  009C                     	;# 
  3696  009D                     	;# 
  3697  009E                     	;# 
  3698  009F                     	;# 
  3699  010C                     	;# 
  3700  010E                     	;# 
  3701  0111                     	;# 
  3702  0112                     	;# 
  3703  0113                     	;# 
  3704  0114                     	;# 
  3705  0115                     	;# 
  3706  0116                     	;# 
  3707  0117                     	;# 
  3708  0118                     	;# 
  3709  0119                     	;# 
  3710  018C                     	;# 
  3711  018E                     	;# 
  3712  0191                     	;# 
  3713  0191                     	;# 
  3714  0192                     	;# 
  3715  0193                     	;# 
  3716  0193                     	;# 
  3717  0194                     	;# 
  3718  0195                     	;# 
  3719  0196                     	;# 
  3720  0197                     	;# 
  3721  0199                     	;# 
  3722  019A                     	;# 
  3723  019B                     	;# 
  3724  019B                     	;# 
  3725  019C                     	;# 
  3726  019D                     	;# 
  3727  019E                     	;# 
  3728  019F                     	;# 
  3729  020C                     	;# 
  3730  020E                     	;# 
  3731  028C                     	;# 
  3732  028E                     	;# 
  3733  030C                     	;# 
  3734  030E                     	;# 
  3735  038C                     	;# 
  3736  038E                     	;# 
  3737  0391                     	;# 
  3738  0392                     	;# 
  3739  0393                     	;# 
  3740  0397                     	;# 
  3741  0398                     	;# 
  3742  0399                     	;# 
  3743  0691                     	;# 
  3744  0692                     	;# 
  3745  0693                     	;# 
  3746  0694                     	;# 
  3747  0695                     	;# 
  3748  0D8E                     	;# 
  3749  0D8F                     	;# 
  3750  0D90                     	;# 
  3751  0D91                     	;# 
  3752  0D91                     	;# 
  3753  0D92                     	;# 
  3754  0D93                     	;# 
  3755  0D93                     	;# 
  3756  0D94                     	;# 
  3757  0D95                     	;# 
  3758  0D95                     	;# 
  3759  0D96                     	;# 
  3760  0D97                     	;# 
  3761  0D97                     	;# 
  3762  0D98                     	;# 
  3763  0D99                     	;# 
  3764  0D99                     	;# 
  3765  0D9A                     	;# 
  3766  0D9B                     	;# 
  3767  0D9C                     	;# 
  3768  0D9C                     	;# 
  3769  0D9D                     	;# 
  3770  0D9D                     	;# 
  3771  0D9E                     	;# 
  3772  0D9F                     	;# 
  3773  0DA0                     	;# 
  3774  0DA1                     	;# 
  3775  0DA1                     	;# 
  3776  0DA2                     	;# 
  3777  0DA3                     	;# 
  3778  0DA3                     	;# 
  3779  0DA4                     	;# 
  3780  0DA5                     	;# 
  3781  0DA5                     	;# 
  3782  0DA6                     	;# 
  3783  0DA7                     	;# 
  3784  0DA7                     	;# 
  3785  0DA8                     	;# 
  3786  0DA9                     	;# 
  3787  0DA9                     	;# 
  3788  0DAA                     	;# 
  3789  0DAB                     	;# 
  3790  0DAC                     	;# 
  3791  0DAC                     	;# 
  3792  0DAD                     	;# 
  3793  0DAD                     	;# 
  3794  0DAE                     	;# 
  3795  0DAF                     	;# 
  3796  0DB0                     	;# 
  3797  0DB1                     	;# 
  3798  0DB1                     	;# 
  3799  0DB2                     	;# 
  3800  0DB3                     	;# 
  3801  0DB3                     	;# 
  3802  0DB4                     	;# 
  3803  0DB5                     	;# 
  3804  0DB5                     	;# 
  3805  0DB6                     	;# 
  3806  0DB7                     	;# 
  3807  0DB7                     	;# 
  3808  0DB8                     	;# 
  3809  0DB9                     	;# 
  3810  0DB9                     	;# 
  3811  0DBA                     	;# 
  3812  0DBB                     	;# 
  3813  0DBC                     	;# 
  3814  0DBC                     	;# 
  3815  0DBD                     	;# 
  3816  0DBD                     	;# 
  3817  0DBE                     	;# 
  3818  0DBF                     	;# 
  3819  0DC0                     	;# 
  3820  0DC1                     	;# 
  3821  0DC1                     	;# 
  3822  0DC2                     	;# 
  3823  0DC3                     	;# 
  3824  0DC3                     	;# 
  3825  0DC4                     	;# 
  3826  0DC5                     	;# 
  3827  0DC5                     	;# 
  3828  0DC6                     	;# 
  3829  0DC7                     	;# 
  3830  0DC7                     	;# 
  3831  0DC8                     	;# 
  3832  0DC9                     	;# 
  3833  0DC9                     	;# 
  3834  0DCA                     	;# 
  3835  0DCB                     	;# 
  3836  0DCC                     	;# 
  3837  0DCC                     	;# 
  3838  0DCD                     	;# 
  3839  0DCD                     	;# 
  3840  0DCE                     	;# 
  3841  0DCF                     	;# 
  3842  0DD0                     	;# 
  3843  0E0F                     	;# 
  3844  0E10                     	;# 
  3845  0E11                     	;# 
  3846  0E12                     	;# 
  3847  0E13                     	;# 
  3848  0E14                     	;# 
  3849  0E15                     	;# 
  3850  0E16                     	;# 
  3851  0E17                     	;# 
  3852  0E90                     	;# 
  3853  0E91                     	;# 
  3854  0E92                     	;# 
  3855  0E94                     	;# 
  3856  0E95                     	;# 
  3857  0EA0                     	;# 
  3858  0EA1                     	;# 
  3859  0EA2                     	;# 
  3860  0EA3                     	;# 
  3861  0EA4                     	;# 
  3862  0EA5                     	;# 
  3863  0FE4                     	;# 
  3864  0FE5                     	;# 
  3865  0FE6                     	;# 
  3866  0FE7                     	;# 
  3867  0FE8                     	;# 
  3868  0FE8                     	;# 
  3869  0FE9                     	;# 
  3870  0FEA                     	;# 
  3871  0FEA                     	;# 
  3872  0FEB                     	;# 
  3873  0FED                     	;# 
  3874  0FEE                     	;# 
  3875  0FEE                     	;# 
  3876  0FEF                     	;# 
  3877  0FFF                     	;_sysData
  3878                           
  3879 ;; Function _TMR2_DefaultInterruptHandler is unused but had its address taken
  3880  0000                     
  3881                           	psect	idataBANK0
  3882  1CAA                     __pidataBANK0:	
  3883                           
  3884                           ;initializer for _resRs
  3885  1CAA  3410               	retlw	16
  3886  1CAB  3427               	retlw	39
  3887                           
  3888                           ;initializer for _resRc
  3889  1CAC  3410               	retlw	16
  3890  1CAD  3427               	retlw	39
  3891                           
  3892                           	psect	idataBANK1
  3893  1CAE                     __pidataBANK1:	
  3894                           
  3895                           ;initializer for _pidU
  3896  1CAE  3414               	retlw	20
  3897  1CAF  3400               	retlw	0
  3898                           
  3899                           ;initializer for _pidpwm2_U
  3900  1CB0  3414               	retlw	20
  3901  1CB1  3400               	retlw	0
  3902                           
  3903                           ;initializer for _pwm1DutyForIdrv
  3904  1CB2  3405               	retlw	5
  3905  1CB3  3400               	retlw	0
  3906                           
  3907                           ;initializer for _pwm2DutyForVout
  3908  1CB4  3405               	retlw	5
  3909  1CB5  3400               	retlw	0
  3910                           
  3911                           	psect	stringtext1
  3912  181E                     __pstringtext1:	
  3913  181E                     _HexTable:	
  3914  181E  3430               	retlw	48
  3915  181F  3431               	retlw	49
  3916  1820  3432               	retlw	50
  3917  1821  3433               	retlw	51
  3918  1822  3434               	retlw	52
  3919  1823  3435               	retlw	53
  3920  1824  3436               	retlw	54
  3921  1825  3437               	retlw	55
  3922  1826  3438               	retlw	56
  3923  1827  3439               	retlw	57
  3924  1828  3441               	retlw	65
  3925  1829  3442               	retlw	66
  3926  182A  3443               	retlw	67
  3927  182B  3444               	retlw	68
  3928  182C  3445               	retlw	69
  3929  182D  3446               	retlw	70
  3930  182E  3400               	retlw	0
  3931  182F                     __end_of_HexTable:	
  3932  0013                     _PIR3bits	set	19
  3933  001C                     _T2CONbits	set	28
  3934  0011                     _PIR1bits	set	17
  3935  001A                     _TMR2	set	26
  3936  001B                     _PR2	set	27
  3937  001C                     _T2CON	set	28
  3938  000B                     _INTCONbits	set	11
  3939  005F                     _GIE	set	95
  3940  0095                     _OPTION_REGbits	set	149
  3941  008E                     _TRISC	set	142
  3942  008C                     _TRISA	set	140
  3943  009D                     _ADCON0bits	set	157
  3944  009C                     _ADRESH	set	156
  3945  009B                     _ADRESL	set	155
  3946  009F                     _ADCON2	set	159
  3947  009E                     _ADCON1	set	158
  3948  009D                     _ADCON0	set	157
  3949  0097                     _WDTCON	set	151
  3950  0091                     _PIE1bits	set	145
  3951  010E                     _LATC	set	270
  3952  010C                     _LATA	set	268
  3953  0117                     _FVRCONbits	set	279
  3954  0117                     _FVRCON	set	279
  3955  019E                     _TXSTAbits	set	414
  3956  018C                     _ANSELA	set	396
  3957  018E                     _ANSELC	set	398
  3958  019C                     _SPBRGH	set	412
  3959  019B                     _SPBRGL	set	411
  3960  019E                     _TXSTA	set	414
  3961  019D                     _RCSTA	set	413
  3962  019F                     _BAUDCON	set	415
  3963  019A                     _TXREG	set	410
  3964  0199                     _RCREG	set	409
  3965  019D                     _RCSTAbits	set	413
  3966  0196                     _PMCON2	set	406
  3967  0193                     _PMDATL	set	403
  3968  0194                     _PMDATH	set	404
  3969  0195                     _PMCON1bits	set	405
  3970  0192                     _PMADRH	set	402
  3971  0191                     _PMADRL	set	401
  3972  020E                     _WPUC	set	526
  3973  020C                     _WPUA	set	524
  3974  028E                     _ODCONC	set	654
  3975  028C                     _ODCONA	set	652
  3976  0D9D                     _PWM1INTFbits	set	3485
  3977  0D9F                     _PWM1LDCONbits	set	3487
  3978  0D9B                     _PWM1CONbits	set	3483
  3979  0D9B                     _PWM1CON	set	3483
  3980  0D99                     _PWM1TMRL	set	3481
  3981  0D9A                     _PWM1TMRH	set	3482
  3982  0D97                     _PWM1OFL	set	3479
  3983  0D98                     _PWM1OFH	set	3480
  3984  0D95                     _PWM1PRL	set	3477
  3985  0D96                     _PWM1PRH	set	3478
  3986  0D93                     _PWM1DCL	set	3475
  3987  0D94                     _PWM1DCH	set	3476
  3988  0D91                     _PWM1PHL	set	3473
  3989  0D92                     _PWM1PHH	set	3474
  3990  0DA0                     _PWM1OFCON	set	3488
  3991  0D9F                     _PWM1LDCON	set	3487
  3992  0D9E                     _PWM1CLKCON	set	3486
  3993  0D9D                     _PWM1INTF	set	3485
  3994  0D9C                     _PWM1INTE	set	3484
  3995  0DAD                     _PWM2INTFbits	set	3501
  3996  0DAF                     _PWM2LDCONbits	set	3503
  3997  0DAB                     _PWM2CONbits	set	3499
  3998  0DAB                     _PWM2CON	set	3499
  3999  0DA9                     _PWM2TMRL	set	3497
  4000  0DAA                     _PWM2TMRH	set	3498
  4001  0DA7                     _PWM2OFL	set	3495
  4002  0DA8                     _PWM2OFH	set	3496
  4003  0DA5                     _PWM2PRL	set	3493
  4004  0DA6                     _PWM2PRH	set	3494
  4005  0DA3                     _PWM2DCL	set	3491
  4006  0DA4                     _PWM2DCH	set	3492
  4007  0DA1                     _PWM2PHL	set	3489
  4008  0DA2                     _PWM2PHH	set	3490
  4009  0DB0                     _PWM2OFCON	set	3504
  4010  0DAF                     _PWM2LDCON	set	3503
  4011  0DAE                     _PWM2CLKCON	set	3502
  4012  0DAD                     _PWM2INTF	set	3501
  4013  0DAC                     _PWM2INTE	set	3500
  4014  0E15                     _RXPPSbits	set	3605
  4015  0E0F                     _PPSLOCKbits	set	3599
  4016  0E0F                     _PPSLOCK	set	3599
  4017  0EA5                     _RC5PPSbits	set	3749
  4018  0E95                     _RA5PPSbits	set	3733
  4019  0E94                     _RA4PPSbits	set	3732
  4020                           
  4021                           	psect	cinit
  4022  088D                     start_initialization:	
  4023                           ; #config settings
  4024                           
  4025  088D                     __initialization:		;BIGRAM
  4026                           
  4027                           ; Initialize objects allocated to BANK0
  4028  088D  30AA               	movlw	low __pidataBANK0
  4029  088E  0084               	movwf	4
  4030  088F  309C               	movlw	(high __pidataBANK0)| (0+128)
  4031  0890  0085               	movwf	5
  4032  0891  306C               	movlw	low __pdataBANK0
  4033  0892  0086               	movwf	6
  4034  0893  3000               	movlw	high __pdataBANK0
  4035  0894  0087               	movwf	7
  4036  0895  3000               	movlw	0
  4037  0896  00FF               	movwf	btemp+1
  4038  0897  3004               	movlw	4
  4039  0898  319C  24CB  3188   	fcall	init_ram
  4040                           
  4041                           ; Initialize objects allocated to BANK1
  4042  089B  30AE               	movlw	low __pidataBANK1
  4043  089C  0084               	movwf	4
  4044  089D  309C               	movlw	(high __pidataBANK1)| (0+128)
  4045  089E  0085               	movwf	5
  4046  089F  30D0               	movlw	low __pdataBANK1
  4047  08A0  0086               	movwf	6
  4048  08A1  3000               	movlw	high __pdataBANK1
  4049  08A2  0087               	movwf	7
  4050  08A3  3000               	movlw	0
  4051  08A4  00FF               	movwf	btemp+1
  4052  08A5  3008               	movlw	8
  4053  08A6  319C  24CB  3188   	fcall	init_ram
  4054                           
  4055                           ; Clear objects allocated to BIGRAM
  4056  08A9  305C               	movlw	low (0+9052)
  4057  08AA  0084               	movwf	4
  4058  08AB  3023               	movlw	high (0+9052)
  4059  08AC  0085               	movwf	5
  4060  08AD  3084               	movlw	132
  4061  08AE  00FE               	movwf	btemp
  4062  08AF  3000               	movlw	0
  4063  08B0  00FF               	movwf	btemp+1
  4064  08B1  319C  24BF  3188   	fcall	clear_ram0
  4065                           
  4066                           ; Clear objects allocated to COMMON
  4067  08B4  01FC               	clrf	__pbssCOMMON& (0+127)
  4068                           
  4069                           ; Clear objects allocated to BANK0
  4070  08B5  3047               	movlw	low __pbssBANK0
  4071  08B6  0084               	movwf	4
  4072  08B7  3000               	movlw	high __pbssBANK0
  4073  08B8  0085               	movwf	5
  4074  08B9  3025               	movlw	37
  4075  08BA  00FE               	movwf	btemp
  4076  08BB  3000               	movlw	0
  4077  08BC  00FF               	movwf	btemp+1
  4078  08BD  319C  24BF  3188   	fcall	clear_ram0
  4079                           
  4080                           ; Clear objects allocated to BANK1
  4081  08C0  30A0               	movlw	low __pbssBANK1
  4082  08C1  0084               	movwf	4
  4083  08C2  3000               	movlw	high __pbssBANK1
  4084  08C3  0085               	movwf	5
  4085  08C4  3030               	movlw	48
  4086  08C5  00FE               	movwf	btemp
  4087  08C6  3000               	movlw	0
  4088  08C7  00FF               	movwf	btemp+1
  4089  08C8  319C  24BF  3188   	fcall	clear_ram0
  4090                           
  4091                           ; Clear objects allocated to BANK2
  4092  08CB  3020               	movlw	low __pbssBANK2
  4093  08CC  0084               	movwf	4
  4094  08CD  3001               	movlw	high __pbssBANK2
  4095  08CE  0085               	movwf	5
  4096  08CF  3040               	movlw	64
  4097  08D0  00FE               	movwf	btemp
  4098  08D1  3000               	movlw	0
  4099  08D2  00FF               	movwf	btemp+1
  4100  08D3  319C  24BF  3188   	fcall	clear_ram0
  4101                           
  4102                           ; Clear objects allocated to BANK3
  4103  08D6  30A0               	movlw	low __pbssBANK3
  4104  08D7  0084               	movwf	4
  4105  08D8  3001               	movlw	high __pbssBANK3
  4106  08D9  0085               	movwf	5
  4107  08DA  3040               	movlw	64
  4108  08DB  00FE               	movwf	btemp
  4109  08DC  3000               	movlw	0
  4110  08DD  00FF               	movwf	btemp+1
  4111  08DE  319C  24BF         	fcall	clear_ram0
  4112  08E0                     end_of_initialization:	
  4113                           ;End of C runtime variable initialization code
  4114                           
  4115  08E0                     __end_of__initialization:	
  4116  08E0  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4117  08E1  0020               	movlb	0
  4118  08E2  318D  2DA2         	ljmp	_main	;jump to C main() function
  4119                           
  4120                           	psect	bssCOMMON
  4121  007C                     __pbssCOMMON:	
  4122  007C                     _eusartRxIdleTime_ms:	
  4123  007C                     	ds	1
  4124                           
  4125                           	psect	bssBANK0
  4126  0047                     __pbssBANK0:	
  4127  0047                     _y32:	
  4128  0047                     	ds	4
  4129  004B                     _x0:	
  4130  004B                     	ds	4
  4131  004F                     _y0:	
  4132  004F                     	ds	4
  4133  0053                     _rsLoAvg:	
  4134  0053                     	ds	2
  4135  0055                     _voExpectAdcValue:	
  4136  0055                     	ds	2
  4137  0057                     _rtAdcValueVoFb:	
  4138  0057                     	ds	2
  4139  0059                     _rtAdcValueRcHi:	
  4140  0059                     	ds	2
  4141  005B                     _rtAdcValueRcLo:	
  4142  005B                     	ds	2
  4143  005D                     _rtAdcValueRsHi:	
  4144  005D                     	ds	2
  4145  005F                     _rtAdcValueRsLo:	
  4146  005F                     	ds	2
  4147  0061                     _TMR2_InterruptHandler:	
  4148  0061                     	ds	2
  4149  0063                     _pidBbSm:	
  4150  0063                     	ds	1
  4151  0064                     _xlen:	
  4152  0064                     	ds	1
  4153  0065                     _txCount:	
  4154  0065                     	ds	1
  4155  0066                     _txBufLen:	
  4156  0066                     	ds	1
  4157  0067                     _rxtemp:	
  4158  0067                     	ds	1
  4159  0068                     _subTickerX_1s:	
  4160  0068                     	ds	1
  4161  0069                     _subTickerX:	
  4162  0069                     	ds	1
  4163  006A                     _eusartRxCount:	
  4164  006A                     	ds	1
  4165  006B                     _Event:	
  4166  006B                     	ds	1
  4167                           
  4168                           	psect	dataBANK0
  4169  006C                     __pdataBANK0:	
  4170  006C                     _resRs:	
  4171  006C                     	ds	2
  4172  006E                     _resRc:	
  4173  006E                     	ds	2
  4174                           
  4175                           	psect	bssBANK1
  4176  00A0                     __pbssBANK1:	
  4177  00A0                     _err:	
  4178  00A0                     	ds	12
  4179  00AC                     _rsLoAvgBuf:	
  4180  00AC                     	ds	12
  4181  00B8                     _x32:	
  4182  00B8                     	ds	4
  4183  00BC                     _x1:	
  4184  00BC                     	ds	4
  4185  00C0                     _y1:	
  4186  00C0                     	ds	4
  4187  00C4                     _pwm2Ei:	
  4188  00C4                     	ds	2
  4189  00C6                     _voExpectMv:	
  4190  00C6                     	ds	2
  4191  00C8                     _PidTd:	
  4192  00C8                     	ds	2
  4193  00CA                     _PidTi:	
  4194  00CA                     	ds	2
  4195  00CC                     _PidKp:	
  4196  00CC                     	ds	2
  4197  00CE                     _globalTicker:	
  4198  00CE                     	ds	2
  4199                           
  4200                           	psect	dataBANK1
  4201  00D0                     __pdataBANK1:	
  4202  00D0                     _pidU:	
  4203  00D0                     	ds	2
  4204  00D2                     _pidpwm2_U:	
  4205  00D2                     	ds	2
  4206  00D4                     _pwm1DutyForIdrv:	
  4207  00D4                     	ds	2
  4208  00D6                     _pwm2DutyForVout:	
  4209  00D6                     	ds	2
  4210                           
  4211                           	psect	bssBANK2
  4212  0120                     __pbssBANK2:	
  4213  0120                     _modbusBuf:	
  4214  0120                     	ds	32
  4215  0140                     _eusartRxBuffer:	
  4216  0140                     	ds	32
  4217                           
  4218                           	psect	bssBANK3
  4219  01A0                     __pbssBANK3:	
  4220  01A0                     _txBuf:	
  4221  01A0                     	ds	64
  4222                           
  4223                           	psect	inittext
  4224  1CCB                     init_ram:	
  4225  1CCB  00FE               	movwf	126
  4226  1CCC                     initloop:	
  4227  1CCC  0012               	moviw fsr0++
  4228  1CCD  001E               	movwi fsr1++
  4229  1CCE  3001               	movlw	1
  4230  1CCF  02FE               	subwf	126,f
  4231  1CD0  3000               	movlw	0
  4232  1CD1  3BFF               	subwfb	127,f
  4233  1CD2  087F               	movf	127,w
  4234  1CD3  047E               	iorwf	126,w
  4235  1CD4  1903               	btfsc	3,2
  4236  1CD5  3400               	retlw	0
  4237  1CD6  2CCC               	goto	initloop
  4238                           
  4239                           	psect	clrtext
  4240  1CBF                     clear_ram0:	
  4241                           ;	Called with FSR0 containing the base address, and
  4242                           ;	btemp/btemp+1 has the size to clear
  4243                           
  4244  1CBF  0064               	clrwdt	;clear the watchdog before getting into this loop
  4245  1CC0                     clrloop0:	
  4246  1CC0  0180               	clrf	0	;clear RAM location pointed to by FSR
  4247  1CC1  3101               	addfsr 0,1
  4248  1CC2  3001               	movlw	1
  4249  1CC3  02FE               	subwf	126,f
  4250  1CC4  3000               	movlw	0
  4251  1CC5  3BFF               	subwfb	127,f
  4252  1CC6  087F               	movf	127,w
  4253  1CC7  047E               	iorwf	126,w
  4254  1CC8  1903               	btfsc	3,2
  4255  1CC9  3400               	retlw	0	;all done for this memory range, return
  4256  1CCA  2CC0               	goto	clrloop0	;have we reached the end yet?
  4257                           
  4258                           	psect	cstackBANK1
  4259  00D8                     __pcstackBANK1:	
  4260  00D8                     ??_main:	
  4261                           
  4262                           ; 1 bytes @ 0x0
  4263  00D8                     	ds	2
  4264                           
  4265                           	psect	cstackCOMMON
  4266  0070                     __pcstackCOMMON:	
  4267  0070                     ?_TMR2_StartTimer:	
  4268  0070                     ?_PIN_MANAGER_Initialize:	
  4269                           ; 1 bytes @ 0x0
  4270                           
  4271  0070                     ?_OSCILLATOR_Initialize:	
  4272                           ; 1 bytes @ 0x0
  4273                           
  4274  0070                     ?_WDT_Initialize:	
  4275                           ; 1 bytes @ 0x0
  4276                           
  4277  0070                     ?_ADC1_Initialize:	
  4278                           ; 1 bytes @ 0x0
  4279                           
  4280  0070                     ?_EUSART_Initialize:	
  4281                           ; 1 bytes @ 0x0
  4282                           
  4283  0070                     ?_PWM2_Initialize:	
  4284                           ; 1 bytes @ 0x0
  4285                           
  4286  0070                     ?_PWM1_Initialize:	
  4287                           ; 1 bytes @ 0x0
  4288                           
  4289  0070                     ?_TMR2_Initialize:	
  4290                           ; 1 bytes @ 0x0
  4291                           
  4292  0070                     ?_INTERRUPT_InterruptManager:	
  4293                           ; 1 bytes @ 0x0
  4294                           
  4295  0070                     ??_INTERRUPT_InterruptManager:	
  4296                           ; 1 bytes @ 0x0
  4297                           
  4298  0070                     ?_FVR_Initialize:	
  4299                           ; 1 bytes @ 0x0
  4300                           
  4301  0070                     ?_SYSTEM_Initialize:	
  4302                           ; 1 bytes @ 0x0
  4303                           
  4304  0070                     ?_uart_received_start:	
  4305                           ; 1 bytes @ 0x0
  4306                           
  4307  0070                     ?_fvr_set_gain:	
  4308                           ; 1 bytes @ 0x0
  4309                           
  4310  0070                     ?_adc_init:	
  4311                           ; 1 bytes @ 0x0
  4312                           
  4313  0070                     ?_pid_pwm1_idrv_run:	
  4314                           ; 1 bytes @ 0x0
  4315                           
  4316  0070                     ?_pid_pwm2_vout_run:	
  4317                           ; 1 bytes @ 0x0
  4318                           
  4319  0070                     ?_my_flash_read_system_erase:	
  4320                           ; 1 bytes @ 0x0
  4321                           
  4322  0070                     ?_sys_data_save:	
  4323                           ; 1 bytes @ 0x0
  4324                           
  4325  0070                     ?_modbus_response_write_single_register:	
  4326                           ; 1 bytes @ 0x0
  4327                           
  4328  0070                     ?_modbus_response_write_mult_register:	
  4329                           ; 1 bytes @ 0x0
  4330                           
  4331  0070                     ?_modbus_response_command:	
  4332                           ; 1 bytes @ 0x0
  4333                           
  4334  0070                     ?_main:	
  4335                           ; 1 bytes @ 0x0
  4336                           
  4337  0070                     ?_sys_data_init:	
  4338                           ; 1 bytes @ 0x0
  4339                           
  4340                           
  4341                           ; 2 bytes @ 0x0
  4342  0070                     	ds	1
  4343  0071                     ?_FLASH_EraseBlock:	
  4344  0071                     ?_TMR2_SetInterruptHandler:	
  4345                           ; 1 bytes @ 0x1
  4346                           
  4347  0071                     ??_TMR2_StartTimer:	
  4348                           ; 1 bytes @ 0x1
  4349                           
  4350  0071                     ??_PIN_MANAGER_Initialize:	
  4351                           ; 1 bytes @ 0x1
  4352                           
  4353  0071                     ??_OSCILLATOR_Initialize:	
  4354                           ; 1 bytes @ 0x1
  4355                           
  4356  0071                     ??_WDT_Initialize:	
  4357                           ; 1 bytes @ 0x1
  4358                           
  4359  0071                     ??_ADC1_Initialize:	
  4360                           ; 1 bytes @ 0x1
  4361                           
  4362  0071                     ??_EUSART_Initialize:	
  4363                           ; 1 bytes @ 0x1
  4364                           
  4365  0071                     ?_m_mem_cpy_len:	
  4366                           ; 1 bytes @ 0x1
  4367                           
  4368  0071                     ??_PWM2_Initialize:	
  4369                           ; 1 bytes @ 0x1
  4370                           
  4371  0071                     ??_PWM1_Initialize:	
  4372                           ; 1 bytes @ 0x1
  4373                           
  4374  0071                     ??_FVR_Initialize:	
  4375                           ; 1 bytes @ 0x1
  4376                           
  4377  0071                     ??_uart_received_start:	
  4378                           ; 1 bytes @ 0x1
  4379                           
  4380  0071                     ??_fvr_set_gain:	
  4381                           ; 1 bytes @ 0x1
  4382                           
  4383  0071                     ??_adc_init:	
  4384                           ; 1 bytes @ 0x1
  4385                           
  4386  0071                     ?_my_flash_system_read:	
  4387                           ; 1 bytes @ 0x1
  4388                           
  4389  0071                     ?_get_idrv_pwm1_duty:	
  4390                           ; 1 bytes @ 0x1
  4391                           
  4392  0071                     ?_get_vout_pwm2_duty:	
  4393                           ; 2 bytes @ 0x1
  4394                           
  4395  0071                     ?_my_flash_system_write:	
  4396                           ; 2 bytes @ 0x1
  4397                           
  4398  0071                     ?_getRegisterVal:	
  4399                           ; 2 bytes @ 0x1
  4400                           
  4401  0071                     ?_crc_sum:	
  4402                           ; 2 bytes @ 0x1
  4403                           
  4404  0071                     ?___wmul:	
  4405                           ; 2 bytes @ 0x1
  4406                           
  4407  0071                     ?___awdiv:	
  4408                           ; 2 bytes @ 0x1
  4409                           
  4410  0071                     ?___lwdiv:	
  4411                           ; 2 bytes @ 0x1
  4412                           
  4413  0071                     ?___lmul:	
  4414                           ; 2 bytes @ 0x1
  4415                           
  4416  0071                     ?___lldiv:	
  4417                           ; 4 bytes @ 0x1
  4418                           
  4419  0071                     PIN_MANAGER_Initialize@state:	
  4420                           ; 4 bytes @ 0x1
  4421                           
  4422  0071                     FLASH_EraseBlock@startAddr:	
  4423                           ; 1 bytes @ 0x1
  4424                           
  4425  0071                     TMR2_SetInterruptHandler@InterruptHandler:	
  4426                           ; 2 bytes @ 0x1
  4427                           
  4428  0071                     my_flash_system_read@buf:	
  4429                           ; 2 bytes @ 0x1
  4430                           
  4431  0071                     my_flash_system_write@buf:	
  4432                           ; 2 bytes @ 0x1
  4433                           
  4434  0071                     getRegisterVal@addr:	
  4435                           ; 2 bytes @ 0x1
  4436                           
  4437  0071                     m_mem_cpy_len@d:	
  4438                           ; 2 bytes @ 0x1
  4439                           
  4440  0071                     crc_sum@buf:	
  4441                           ; 2 bytes @ 0x1
  4442                           
  4443  0071                     ___wmul@multiplier:	
  4444                           ; 2 bytes @ 0x1
  4445                           
  4446  0071                     ___awdiv@divisor:	
  4447                           ; 2 bytes @ 0x1
  4448                           
  4449  0071                     ___lwdiv@divisor:	
  4450                           ; 2 bytes @ 0x1
  4451                           
  4452  0071                     ___lmul@multiplier:	
  4453                           ; 2 bytes @ 0x1
  4454                           
  4455  0071                     ___lldiv@divisor:	
  4456                           ; 4 bytes @ 0x1
  4457                           
  4458                           
  4459                           ; 4 bytes @ 0x1
  4460  0071                     	ds	1
  4461  0072                     fvr_set_gain@t8:	
  4462  0072                     adc_init@ch:	
  4463                           ; 1 bytes @ 0x2
  4464                           
  4465                           
  4466                           ; 1 bytes @ 0x2
  4467  0072                     	ds	1
  4468  0073                     ??_FLASH_EraseBlock:	
  4469  0073                     ??_TMR2_SetInterruptHandler:	
  4470                           ; 1 bytes @ 0x3
  4471                           
  4472  0073                     ??_TMR2_Initialize:	
  4473                           ; 1 bytes @ 0x3
  4474                           
  4475  0073                     ??_SYSTEM_Initialize:	
  4476                           ; 1 bytes @ 0x3
  4477                           
  4478  0073                     ??_get_idrv_pwm1_duty:	
  4479                           ; 1 bytes @ 0x3
  4480                           
  4481  0073                     ??_get_vout_pwm2_duty:	
  4482                           ; 1 bytes @ 0x3
  4483                           
  4484  0073                     FLASH_EraseBlock@GIEBitValue:	
  4485                           ; 1 bytes @ 0x3
  4486                           
  4487  0073                     fvr_set_gain@g:	
  4488                           ; 1 bytes @ 0x3
  4489                           
  4490  0073                     getRegisterVal@tempData:	
  4491                           ; 1 bytes @ 0x3
  4492                           
  4493  0073                     my_flash_system_read@len:	
  4494                           ; 1 bytes @ 0x3
  4495                           
  4496  0073                     my_flash_system_write@len:	
  4497                           ; 2 bytes @ 0x3
  4498                           
  4499  0073                     m_mem_cpy_len@s:	
  4500                           ; 2 bytes @ 0x3
  4501                           
  4502  0073                     crc_sum@len:	
  4503                           ; 2 bytes @ 0x3
  4504                           
  4505  0073                     ___wmul@multiplicand:	
  4506                           ; 2 bytes @ 0x3
  4507                           
  4508  0073                     ___awdiv@dividend:	
  4509                           ; 2 bytes @ 0x3
  4510                           
  4511  0073                     ___lwdiv@dividend:	
  4512                           ; 2 bytes @ 0x3
  4513                           
  4514                           
  4515                           ; 2 bytes @ 0x3
  4516  0073                     	ds	1
  4517  0074                     ??_my_flash_read_system_erase:	
  4518  0074                     ??_getRegisterVal:	
  4519                           ; 1 bytes @ 0x4
  4520                           
  4521  0074                     ?_adc_sample:	
  4522                           ; 1 bytes @ 0x4
  4523                           
  4524  0074                     adc_sample@gfvr:	
  4525                           ; 2 bytes @ 0x4
  4526                           
  4527                           
  4528                           ; 1 bytes @ 0x4
  4529  0074                     	ds	1
  4530  0075                     ??_my_flash_system_read:	
  4531  0075                     ??_my_flash_system_write:	
  4532                           ; 1 bytes @ 0x5
  4533                           
  4534  0075                     ??_crc_sum:	
  4535                           ; 1 bytes @ 0x5
  4536                           
  4537  0075                     ??___wmul:	
  4538                           ; 1 bytes @ 0x5
  4539                           
  4540  0075                     ??___awdiv:	
  4541                           ; 1 bytes @ 0x5
  4542                           
  4543  0075                     ??___lwdiv:	
  4544                           ; 1 bytes @ 0x5
  4545                           
  4546  0075                     adc_sample@num:	
  4547                           ; 1 bytes @ 0x5
  4548                           
  4549  0075                     get_idrv_pwm1_duty@t16:	
  4550                           ; 1 bytes @ 0x5
  4551                           
  4552  0075                     get_vout_pwm2_duty@t16:	
  4553                           ; 2 bytes @ 0x5
  4554                           
  4555  0075                     m_mem_cpy_len@len:	
  4556                           ; 2 bytes @ 0x5
  4557                           
  4558  0075                     ___wmul@product:	
  4559                           ; 2 bytes @ 0x5
  4560                           
  4561  0075                     ___lmul@multiplicand:	
  4562                           ; 2 bytes @ 0x5
  4563                           
  4564  0075                     ___lldiv@dividend:	
  4565                           ; 4 bytes @ 0x5
  4566                           
  4567                           
  4568                           ; 4 bytes @ 0x5
  4569  0075                     	ds	1
  4570  0076                     ??_adc_sample:	
  4571  0076                     ___awdiv@counter:	
  4572                           ; 1 bytes @ 0x6
  4573                           
  4574  0076                     ___lwdiv@quotient:	
  4575                           ; 1 bytes @ 0x6
  4576                           
  4577                           
  4578                           ; 2 bytes @ 0x6
  4579  0076                     	ds	1
  4580  0077                     ??_m_mem_cpy_len:	
  4581  0077                     ??_crc_append:	
  4582                           ; 1 bytes @ 0x7
  4583                           
  4584  0077                     ?_set_idrv_pwm1_duty:	
  4585                           ; 1 bytes @ 0x7
  4586                           
  4587  0077                     ?_set_vout_pwm2_duty:	
  4588                           ; 1 bytes @ 0x7
  4589                           
  4590  0077                     my_flash_system_read@GIEBitValue:	
  4591                           ; 1 bytes @ 0x7
  4592                           
  4593  0077                     ___awdiv@sign:	
  4594                           ; 1 bytes @ 0x7
  4595                           
  4596  0077                     set_idrv_pwm1_duty@duty:	
  4597                           ; 1 bytes @ 0x7
  4598                           
  4599  0077                     set_vout_pwm2_duty@duty:	
  4600                           ; 2 bytes @ 0x7
  4601                           
  4602                           
  4603                           ; 2 bytes @ 0x7
  4604  0077                     	ds	1
  4605  0078                     ??_crc_verify:	
  4606  0078                     ?_uart_send_len:	
  4607                           ; 1 bytes @ 0x8
  4608                           
  4609  0078                     uart_send_len@len:	
  4610                           ; 1 bytes @ 0x8
  4611                           
  4612  0078                     ___lwdiv@counter:	
  4613                           ; 1 bytes @ 0x8
  4614                           
  4615  0078                     my_flash_system_read@flashAddr:	
  4616                           ; 1 bytes @ 0x8
  4617                           
  4618  0078                     getRegisterVal@t16:	
  4619                           ; 2 bytes @ 0x8
  4620                           
  4621  0078                     ___awdiv@quotient:	
  4622                           ; 2 bytes @ 0x8
  4623                           
  4624                           
  4625                           ; 2 bytes @ 0x8
  4626  0078                     	ds	1
  4627  0079                     ??_uart_send_len:	
  4628  0079                     ??_set_idrv_pwm1_duty:	
  4629                           ; 1 bytes @ 0x9
  4630                           
  4631  0079                     ??_set_vout_pwm2_duty:	
  4632                           ; 1 bytes @ 0x9
  4633                           
  4634  0079                     ??___lmul:	
  4635                           ; 1 bytes @ 0x9
  4636                           
  4637  0079                     ??___lldiv:	
  4638                           ; 1 bytes @ 0x9
  4639                           
  4640  0079                     ??___aldiv:	
  4641                           ; 1 bytes @ 0x9
  4642                           
  4643  0079                     set_idrv_pwm1_duty@t16:	
  4644                           ; 1 bytes @ 0x9
  4645                           
  4646  0079                     set_vout_pwm2_duty@t16:	
  4647                           ; 2 bytes @ 0x9
  4648                           
  4649                           
  4650                           ; 2 bytes @ 0x9
  4651  0079                     	ds	1
  4652  007A                     ??_calc_rs_lo_avg:	
  4653  007A                     getRegisterVal@tempAddr:	
  4654                           ; 1 bytes @ 0xA
  4655                           
  4656  007A                     my_flash_system_read@i:	
  4657                           ; 1 bytes @ 0xA
  4658                           
  4659                           
  4660                           ; 2 bytes @ 0xA
  4661  007A                     	ds	1
  4662  007B                     uart_send_len@buf:	
  4663                           
  4664                           ; 1 bytes @ 0xB
  4665  007B                     	ds	1
  4666  007C                     ??_sys_data_save:	
  4667                           
  4668                           	psect	cstackBANK0
  4669  0020                     __pcstackBANK0:	
  4670                           ; 1 bytes @ 0xC
  4671                           
  4672  0020                     ??_pid_pwm2_vout_run:	
  4673  0020                     adc_sample@ch:	
  4674                           ; 1 bytes @ 0x0
  4675                           
  4676  0020                     my_flash_system_write@j:	
  4677                           ; 1 bytes @ 0x0
  4678                           
  4679  0020                     crc_sum@j:	
  4680                           ; 2 bytes @ 0x0
  4681                           
  4682  0020                     ___lmul@product:	
  4683                           ; 2 bytes @ 0x0
  4684                           
  4685  0020                     ___lldiv@quotient:	
  4686                           ; 4 bytes @ 0x0
  4687                           
  4688                           
  4689                           ; 4 bytes @ 0x0
  4690  0020                     	ds	1
  4691  0021                     adc_sample@i:	
  4692                           
  4693                           ; 2 bytes @ 0x1
  4694  0021                     	ds	1
  4695  0022                     my_flash_system_write@GIEBitValue:	
  4696  0022                     pid_pwm2_vout_run@__ei:	
  4697                           ; 1 bytes @ 0x2
  4698                           
  4699  0022                     crc_sum@i:	
  4700                           ; 2 bytes @ 0x2
  4701                           
  4702                           
  4703                           ; 2 bytes @ 0x2
  4704  0022                     	ds	1
  4705  0023                     adc_sample@ret:	
  4706  0023                     my_flash_system_write@blocNum:	
  4707                           ; 2 bytes @ 0x3
  4708                           
  4709                           
  4710                           ; 2 bytes @ 0x3
  4711  0023                     	ds	1
  4712  0024                     ?___aldiv:	
  4713  0024                     ___lldiv@counter:	
  4714                           ; 4 bytes @ 0x4
  4715                           
  4716  0024                     pid_pwm2_vout_run@t16:	
  4717                           ; 1 bytes @ 0x4
  4718                           
  4719  0024                     crc_sum@crc:	
  4720                           ; 2 bytes @ 0x4
  4721                           
  4722  0024                     ___aldiv@divisor:	
  4723                           ; 2 bytes @ 0x4
  4724                           
  4725                           
  4726                           ; 4 bytes @ 0x4
  4727  0024                     	ds	1
  4728  0025                     ?_calc_rs_lo_avg:	
  4729  0025                     ?_calc_temp_rs:	
  4730                           ; 2 bytes @ 0x5
  4731                           
  4732  0025                     ?_calc_temp_rc:	
  4733                           ; 4 bytes @ 0x5
  4734                           
  4735  0025                     adc_sample@t16:	
  4736                           ; 4 bytes @ 0x5
  4737                           
  4738  0025                     calc_rs_lo_avg@x:	
  4739                           ; 2 bytes @ 0x5
  4740                           
  4741  0025                     my_flash_system_write@loc:	
  4742                           ; 2 bytes @ 0x5
  4743                           
  4744                           
  4745                           ; 2 bytes @ 0x5
  4746  0025                     	ds	1
  4747  0026                     ?_crc_append:	
  4748  0026                     ?_crc_verify:	
  4749                           ; 1 bytes @ 0x6
  4750                           
  4751  0026                     crc_verify@message:	
  4752                           ; 1 bytes @ 0x6
  4753                           
  4754  0026                     crc_append@message:	
  4755                           ; 2 bytes @ 0x6
  4756                           
  4757                           
  4758                           ; 2 bytes @ 0x6
  4759  0026                     	ds	1
  4760  0027                     my_flash_system_write@flashAddr:	
  4761  0027                     calc_rs_lo_avg@t32:	
  4762                           ; 2 bytes @ 0x7
  4763                           
  4764                           
  4765                           ; 4 bytes @ 0x7
  4766  0027                     	ds	1
  4767  0028                     crc_verify@n:	
  4768  0028                     crc_append@n:	
  4769                           ; 2 bytes @ 0x8
  4770                           
  4771  0028                     ___aldiv@dividend:	
  4772                           ; 2 bytes @ 0x8
  4773                           
  4774                           
  4775                           ; 4 bytes @ 0x8
  4776  0028                     	ds	1
  4777  0029                     ??_calc_temp_rs:	
  4778  0029                     ??_calc_temp_rc:	
  4779                           ; 1 bytes @ 0x9
  4780                           
  4781  0029                     my_flash_system_write@i:	
  4782                           ; 1 bytes @ 0x9
  4783                           
  4784                           
  4785                           ; 1 bytes @ 0x9
  4786  0029                     	ds	1
  4787  002A                     crc_verify@crccal:	
  4788  002A                     crc_append@crc:	
  4789                           ; 2 bytes @ 0xA
  4790                           
  4791                           
  4792                           ; 2 bytes @ 0xA
  4793  002A                     	ds	1
  4794  002B                     calc_rs_lo_avg@i:	
  4795                           
  4796                           ; 1 bytes @ 0xB
  4797  002B                     	ds	1
  4798  002C                     ?_modbus_response_illgeal_function:	
  4799  002C                     ??_modbus_response_write_single_register:	
  4800                           ; 1 bytes @ 0xC
  4801                           
  4802  002C                     ??_modbus_response_write_mult_register:	
  4803                           ; 1 bytes @ 0xC
  4804                           
  4805  002C                     ??_modbus_response_command:	
  4806                           ; 1 bytes @ 0xC
  4807                           
  4808  002C                     modbus_response_illgeal_function@errcode:	
  4809                           ; 1 bytes @ 0xC
  4810                           
  4811  002C                     ___aldiv@counter:	
  4812                           ; 1 bytes @ 0xC
  4813                           
  4814  002C                     crc_verify@expected:	
  4815                           ; 1 bytes @ 0xC
  4816                           
  4817                           
  4818                           ; 2 bytes @ 0xC
  4819  002C                     	ds	1
  4820  002D                     ??_modbus_response_illgeal_function:	
  4821  002D                     modbus_response_write_mult_register@startAddr:	
  4822                           ; 1 bytes @ 0xD
  4823                           
  4824  002D                     ___aldiv@sign:	
  4825                           ; 1 bytes @ 0xD
  4826                           
  4827                           
  4828                           ; 1 bytes @ 0xD
  4829  002D                     	ds	1
  4830  002E                     ??_sys_data_init:	
  4831  002E                     modbus_response_illgeal_function@buf:	
  4832                           ; 1 bytes @ 0xE
  4833                           
  4834  002E                     modbus_response_write_mult_register@len:	
  4835                           ; 1 bytes @ 0xE
  4836                           
  4837  002E                     modbus_response_command@tmpAddr:	
  4838                           ; 1 bytes @ 0xE
  4839                           
  4840  002E                     ___aldiv@quotient:	
  4841                           ; 2 bytes @ 0xE
  4842                           
  4843                           
  4844                           ; 4 bytes @ 0xE
  4845  002E                     	ds	1
  4846  002F                     modbus_response_illgeal_function@pmdbs:	
  4847  002F                     modbus_response_write_mult_register@rbuf:	
  4848                           ; 1 bytes @ 0xF
  4849                           
  4850                           
  4851                           ; 1 bytes @ 0xF
  4852  002F                     	ds	1
  4853  0030                     modbus_response_write_single_register@fiSave:	
  4854  0030                     modbus_response_write_mult_register@stb:	
  4855                           ; 1 bytes @ 0x10
  4856                           
  4857  0030                     modbus_response_command@startAddr:	
  4858                           ; 1 bytes @ 0x10
  4859                           
  4860                           
  4861                           ; 2 bytes @ 0x10
  4862  0030                     	ds	1
  4863  0031                     modbus_response_write_single_register@t16:	
  4864                           
  4865                           ; 2 bytes @ 0x11
  4866  0031                     	ds	1
  4867  0032                     ??_pid_pwm1_idrv_run:	
  4868  0032                     ?_calc_expect_vout_adc_value:	
  4869                           ; 1 bytes @ 0x12
  4870                           
  4871  0032                     modbus_response_command@i:	
  4872                           ; 2 bytes @ 0x12
  4873                           
  4874  0032                     calc_expect_vout_adc_value@x:	
  4875                           ; 1 bytes @ 0x12
  4876                           
  4877                           
  4878                           ; 2 bytes @ 0x12
  4879  0032                     	ds	1
  4880  0033                     modbus_response_write_single_register@i:	
  4881  0033                     modbus_response_command@pmdbs:	
  4882                           ; 1 bytes @ 0x13
  4883                           
  4884                           
  4885                           ; 1 bytes @ 0x13
  4886  0033                     	ds	1
  4887  0034                     ??_calc_expect_vout_adc_value:	
  4888  0034                     modbus_response_write_single_register@pmdbs:	
  4889                           ; 1 bytes @ 0x14
  4890                           
  4891  0034                     modbus_response_command@len:	
  4892                           ; 1 bytes @ 0x14
  4893                           
  4894  0034                     sys_data_init@ret:	
  4895                           ; 1 bytes @ 0x14
  4896                           
  4897                           
  4898                           ; 2 bytes @ 0x14
  4899  0034                     	ds	1
  4900  0035                     modbus_response_write_single_register@rbuf:	
  4901  0035                     modbus_response_command@rbuf:	
  4902                           ; 1 bytes @ 0x15
  4903                           
  4904                           
  4905                           ; 1 bytes @ 0x15
  4906  0035                     	ds	1
  4907  0036                     sys_data_init@i:	
  4908  0036                     modbus_response_write_single_register@startAddr:	
  4909                           ; 2 bytes @ 0x16
  4910                           
  4911  0036                     modbus_response_command@tempData:	
  4912                           ; 2 bytes @ 0x16
  4913                           
  4914                           
  4915                           ; 2 bytes @ 0x16
  4916  0036                     	ds	2
  4917  0038                     ?_modbus_response_process:	
  4918  0038                     modbus_response_process@rlen:	
  4919                           ; 1 bytes @ 0x18
  4920                           
  4921                           
  4922                           ; 2 bytes @ 0x18
  4923  0038                     	ds	2
  4924  003A                     ??_modbus_response_process:	
  4925  003A                     pid_pwm1_idrv_run@t32:	
  4926                           ; 1 bytes @ 0x1A
  4927                           
  4928                           
  4929                           ; 4 bytes @ 0x1A
  4930  003A                     	ds	1
  4931  003B                     modbus_response_process@resp:	
  4932                           
  4933                           ; 1 bytes @ 0x1B
  4934  003B                     	ds	1
  4935  003C                     modbus_response_process@pmdbs:	
  4936                           
  4937                           ; 1 bytes @ 0x1C
  4938  003C                     	ds	1
  4939  003D                     modbus_response_process@rbuf:	
  4940                           
  4941                           ; 1 bytes @ 0x1D
  4942  003D                     	ds	5
  4943  0042                     calc_expect_vout_adc_value@t32:	
  4944                           
  4945                           ; 4 bytes @ 0x22
  4946  0042                     	ds	4
  4947  0046                     calc_expect_vout_adc_value@i:	
  4948                           
  4949                           ; 1 bytes @ 0x26
  4950  0046                     	ds	1
  4951                           
  4952                           	psect	maintext
  4953  0DA2                     __pmaintext:	
  4954 ;;
  4955 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  4956 ;;
  4957 ;; *************** function _main *****************
  4958 ;; Defined at:
  4959 ;;		line 17 in file "src/app/main.c"
  4960 ;; Parameters:    Size  Location     Type
  4961 ;;		None
  4962 ;; Auto vars:     Size  Location     Type
  4963 ;;		None
  4964 ;; Return value:  Size  Location     Type
  4965 ;;                  1    wreg      void 
  4966 ;; Registers used:
  4967 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4968 ;; Tracked objects:
  4969 ;;		On entry : B1F/0
  4970 ;;		On exit  : 0/0
  4971 ;;		Unchanged: 0/0
  4972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4975 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4976 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4977 ;;Total ram usage:        2 bytes
  4978 ;; Hardware stack levels required when called:    6
  4979 ;; This function calls:
  4980 ;;		_SYSTEM_Initialize
  4981 ;;		_adc_sample
  4982 ;;		_calc_expect_vout_adc_value
  4983 ;;		_calc_rs_lo_avg
  4984 ;;		_calc_temp_rc
  4985 ;;		_calc_temp_rs
  4986 ;;		_m_mem_cpy_len
  4987 ;;		_modbus_response_process
  4988 ;;		_pid_pwm1_idrv_run
  4989 ;;		_pid_pwm2_vout_run
  4990 ;;		_sys_data_init
  4991 ;;		_uart_received_start
  4992 ;;		_uart_send_len
  4993 ;; This function is called by:
  4994 ;;		Startup code after reset
  4995 ;; This function uses a non-reentrant model
  4996 ;;
  4997                           
  4998                           
  4999                           ;psect for function _main
  5000  0DA2                     _main:	
  5001                           
  5002                           ;main.c: 19: __nop();
  5003                           
  5004                           ;incstack = 0
  5005                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5006  0DA2  0000               	nop
  5007                           
  5008                           ;main.c: 20: isRunInBoot=0xaa;
  5009  0DA3  30AA               	movlw	170
  5010  0DA4  0021               	movlb	1	; select bank1
  5011  0DA5  00D8               	movwf	??_main^(0+128)
  5012  0DA6  0858               	movf	??_main^(0+128),w
  5013  0DA7  003F               	movlb	31	; select bank31
  5014  0DA8  00FF               	movwf	127	;volatile
  5015                           
  5016                           ;main.c: 21: isRunInBoot=isRunInBoot;
  5017  0DA9  087F               	movf	127,w	;volatile
  5018  0DAA  0021               	movlb	1	; select bank1
  5019  0DAB  00D8               	movwf	??_main^(0+128)
  5020  0DAC  0858               	movf	??_main^(0+128),w
  5021  0DAD  003F               	movlb	31	; select bank31
  5022  0DAE  00FF               	movwf	127	;volatile
  5023                           
  5024                           ;main.c: 22: SYSTEM_Initialize();
  5025  0DAF  319D  258C  318D   	fcall	_SYSTEM_Initialize
  5026                           
  5027                           ;main.c: 23: do{ (INTCONbits.GIE = 1); (INTCONbits.PEIE = 1); }while(0);;
  5028  0DB2  178B               	bsf	11,7	;volatile
  5029  0DB3  170B               	bsf	11,6	;volatile
  5030                           
  5031                           ;main.c: 26: TXSTAbits.TXEN=0;
  5032  0DB4  0023               	movlb	3	; select bank3
  5033  0DB5  129E               	bcf	30,5	;volatile
  5034                           
  5035                           ;main.c: 27: sys_data_init();
  5036  0DB6  3195  25B0  318D   	fcall	_sys_data_init
  5037                           
  5038                           ;main.c: 30: modbusBuf[0]=0x55;
  5039  0DB9  3055               	movlw	85
  5040  0DBA  0021               	movlb	1	; select bank1
  5041  0DBB  00D8               	movwf	??_main^(0+128)
  5042  0DBC  0858               	movf	??_main^(0+128),w
  5043  0DBD  0022               	movlb	2	; select bank2
  5044  0DBE  00A0               	movwf	_modbusBuf^(0+256)
  5045                           
  5046                           ;main.c: 31: modbusBuf[1]=0xaa;
  5047  0DBF  30AA               	movlw	170
  5048  0DC0  0021               	movlb	1	; select bank1
  5049  0DC1  00D8               	movwf	??_main^(0+128)
  5050  0DC2  0858               	movf	??_main^(0+128),w
  5051  0DC3  0022               	movlb	2	; select bank2
  5052  0DC4  00A1               	movwf	(_modbusBuf^(0+256)+1)
  5053                           
  5054                           ;main.c: 32: uart_send_len(modbusBuf,2);
  5055  0DC5  3002               	movlw	2
  5056  0DC6  0021               	movlb	1	; select bank1
  5057  0DC7  00D8               	movwf	??_main^(0+128)
  5058  0DC8  0858               	movf	??_main^(0+128),w
  5059  0DC9  00F8               	movwf	uart_send_len@len
  5060  0DCA  3020               	movlw	(low (_modbusBuf| (0+256)))& (0+255)
  5061  0DCB  3190  2099  318D   	fcall	_uart_send_len
  5062  0DCE                     l5297:	
  5063                           ;main.c: 33: while (1){
  5064                           
  5065                           
  5066                           ;main.c: 34: if(Event & (1<<2)){
  5067  0DCE  0020               	movlb	0	; select bank0
  5068  0DCF  1D6B               	btfss	_Event,2	;volatile
  5069  0DD0  2E77               	goto	l5327
  5070                           
  5071                           ;main.c: 35: Event &= ~(1<<2);
  5072  0DD1  30FB               	movlw	251
  5073  0DD2  0021               	movlb	1	; select bank1
  5074  0DD3  00D8               	movwf	??_main^(0+128)
  5075  0DD4  0858               	movf	??_main^(0+128),w
  5076  0DD5  0020               	movlb	0	; select bank0
  5077  0DD6  05EB               	andwf	_Event,f	;volatile
  5078                           
  5079                           ;main.c: 37: rtAdcValueRsLo=adc_sample(channel_AN6,1,32);
  5080  0DD7  01F4               	clrf	adc_sample@gfvr
  5081  0DD8  0AF4               	incf	adc_sample@gfvr,f
  5082  0DD9  3020               	movlw	32
  5083  0DDA  0021               	movlb	1	; select bank1
  5084  0DDB  00D8               	movwf	??_main^(0+128)
  5085  0DDC  0858               	movf	??_main^(0+128),w
  5086  0DDD  00F5               	movwf	adc_sample@num
  5087  0DDE  3006               	movlw	6
  5088  0DDF  3192  224F  318D   	fcall	_adc_sample
  5089  0DE2  0875               	movf	?_adc_sample+1,w
  5090  0DE3  0020               	movlb	0	; select bank0
  5091  0DE4  00E0               	movwf	_rtAdcValueRsLo+1
  5092  0DE5  0874               	movf	?_adc_sample,w
  5093  0DE6  00DF               	movwf	_rtAdcValueRsLo
  5094                           
  5095                           ;main.c: 39: rtAdcValueRsHi=adc_sample(channel_AN5,3,32);
  5096  0DE7  3003               	movlw	3
  5097  0DE8  0021               	movlb	1	; select bank1
  5098  0DE9  00D8               	movwf	??_main^(0+128)
  5099  0DEA  0858               	movf	??_main^(0+128),w
  5100  0DEB  00F4               	movwf	adc_sample@gfvr
  5101  0DEC  3020               	movlw	32
  5102  0DED  00D9               	movwf	(??_main+1)^(0+128)
  5103  0DEE  0859               	movf	(??_main+1)^(0+128),w
  5104  0DEF  00F5               	movwf	adc_sample@num
  5105  0DF0  3005               	movlw	5
  5106  0DF1  3192  224F  318D   	fcall	_adc_sample
  5107  0DF4  0875               	movf	?_adc_sample+1,w
  5108  0DF5  0020               	movlb	0	; select bank0
  5109  0DF6  00DE               	movwf	_rtAdcValueRsHi+1
  5110  0DF7  0874               	movf	?_adc_sample,w
  5111  0DF8  00DD               	movwf	_rtAdcValueRsHi
  5112                           
  5113                           ;main.c: 42: rtAdcValueRcLo=adc_sample(channel_AN4,3,32);
  5114  0DF9  3003               	movlw	3
  5115  0DFA  0021               	movlb	1	; select bank1
  5116  0DFB  00D8               	movwf	??_main^(0+128)
  5117  0DFC  0858               	movf	??_main^(0+128),w
  5118  0DFD  00F4               	movwf	adc_sample@gfvr
  5119  0DFE  3020               	movlw	32
  5120  0DFF  00D9               	movwf	(??_main+1)^(0+128)
  5121  0E00  0859               	movf	(??_main+1)^(0+128),w
  5122  0E01  00F5               	movwf	adc_sample@num
  5123  0E02  3004               	movlw	4
  5124  0E03  3192  224F  318D   	fcall	_adc_sample
  5125  0E06  0875               	movf	?_adc_sample+1,w
  5126  0E07  0020               	movlb	0	; select bank0
  5127  0E08  00DC               	movwf	_rtAdcValueRcLo+1
  5128  0E09  0874               	movf	?_adc_sample,w
  5129  0E0A  00DB               	movwf	_rtAdcValueRcLo
  5130                           
  5131                           ;main.c: 43: rtAdcValueRcLo>>=1;
  5132  0E0B  3001               	movlw	1
  5133  0E0C                     u4905:	
  5134  0E0C  36DC               	lsrf	_rtAdcValueRcLo+1,f
  5135  0E0D  0CDB               	rrf	_rtAdcValueRcLo,f
  5136  0E0E  0B89               	decfsz	9,f
  5137  0E0F  2E0C               	goto	u4905
  5138                           
  5139                           ;main.c: 44: rtAdcValueRcHi=adc_sample(channel_AN2,3,32);
  5140  0E10  3003               	movlw	3
  5141  0E11  0021               	movlb	1	; select bank1
  5142  0E12  00D8               	movwf	??_main^(0+128)
  5143  0E13  0858               	movf	??_main^(0+128),w
  5144  0E14  00F4               	movwf	adc_sample@gfvr
  5145  0E15  3020               	movlw	32
  5146  0E16  00D9               	movwf	(??_main+1)^(0+128)
  5147  0E17  0859               	movf	(??_main+1)^(0+128),w
  5148  0E18  00F5               	movwf	adc_sample@num
  5149  0E19  3002               	movlw	2
  5150  0E1A  3192  224F  318D   	fcall	_adc_sample
  5151  0E1D  0875               	movf	?_adc_sample+1,w
  5152  0E1E  0020               	movlb	0	; select bank0
  5153  0E1F  00DA               	movwf	_rtAdcValueRcHi+1
  5154  0E20  0874               	movf	?_adc_sample,w
  5155  0E21  00D9               	movwf	_rtAdcValueRcHi
  5156                           
  5157                           ;main.c: 45: rtAdcValueRcHi>>=1;
  5158  0E22  3001               	movlw	1
  5159  0E23                     u4915:	
  5160  0E23  36DA               	lsrf	_rtAdcValueRcHi+1,f
  5161  0E24  0CD9               	rrf	_rtAdcValueRcHi,f
  5162  0E25  0B89               	decfsz	9,f
  5163  0E26  2E23               	goto	u4915
  5164                           
  5165                           ;main.c: 47: rtAdcValueVoFb=adc_sample(channel_AN7,3,32);
  5166  0E27  3003               	movlw	3
  5167  0E28  0021               	movlb	1	; select bank1
  5168  0E29  00D8               	movwf	??_main^(0+128)
  5169  0E2A  0858               	movf	??_main^(0+128),w
  5170  0E2B  00F4               	movwf	adc_sample@gfvr
  5171  0E2C  3020               	movlw	32
  5172  0E2D  00D9               	movwf	(??_main+1)^(0+128)
  5173  0E2E  0859               	movf	(??_main+1)^(0+128),w
  5174  0E2F  00F5               	movwf	adc_sample@num
  5175  0E30  3007               	movlw	7
  5176  0E31  3192  224F  318D   	fcall	_adc_sample
  5177  0E34  0875               	movf	?_adc_sample+1,w
  5178  0E35  0020               	movlb	0	; select bank0
  5179  0E36  00D8               	movwf	_rtAdcValueVoFb+1
  5180  0E37  0874               	movf	?_adc_sample,w
  5181  0E38  00D7               	movwf	_rtAdcValueVoFb
  5182                           
  5183                           ;main.c: 48: rtAdcValueVoFb>>=1;
  5184  0E39  3001               	movlw	1
  5185  0E3A                     u4925:	
  5186  0E3A  36D8               	lsrf	_rtAdcValueVoFb+1,f
  5187  0E3B  0CD7               	rrf	_rtAdcValueVoFb,f
  5188  0E3C  0B89               	decfsz	9,f
  5189  0E3D  2E3A               	goto	u4925
  5190                           
  5191                           ;main.c: 50: resRc=calc_temp_rc();
  5192  0E3E  3197  2727  318D   	fcall	_calc_temp_rc
  5193  0E41  0020               	movlb	0	; select bank0
  5194  0E42  0826               	movf	?_calc_temp_rc+1,w
  5195  0E43  00EF               	movwf	_resRc+1
  5196  0E44  0825               	movf	?_calc_temp_rc,w
  5197  0E45  00EE               	movwf	_resRc
  5198                           
  5199                           ;main.c: 51: resRs=calc_temp_rs();
  5200  0E46  3194  248F  318D   	fcall	_calc_temp_rs
  5201  0E49  0020               	movlb	0	; select bank0
  5202  0E4A  0826               	movf	?_calc_temp_rs+1,w
  5203  0E4B  00ED               	movwf	_resRs+1
  5204  0E4C  0825               	movf	?_calc_temp_rs,w
  5205  0E4D  00EC               	movwf	_resRs
  5206                           
  5207                           ;main.c: 53: pid_pwm1_idrv_run();
  5208  0E4E  318A  22D8  318D   	fcall	_pid_pwm1_idrv_run
  5209                           
  5210                           ;main.c: 54: rsLoAvg=calc_rs_lo_avg(rtAdcValueRsLo);
  5211  0E51  0020               	movlb	0	; select bank0
  5212  0E52  0860               	movf	_rtAdcValueRsLo+1,w
  5213  0E53  00A6               	movwf	calc_rs_lo_avg@x+1
  5214  0E54  085F               	movf	_rtAdcValueRsLo,w
  5215  0E55  00A5               	movwf	calc_rs_lo_avg@x
  5216  0E56  3192  22AC  318D   	fcall	_calc_rs_lo_avg
  5217  0E59  0020               	movlb	0	; select bank0
  5218  0E5A  0826               	movf	?_calc_rs_lo_avg+1,w
  5219  0E5B  00D4               	movwf	_rsLoAvg+1
  5220  0E5C  0825               	movf	?_calc_rs_lo_avg,w
  5221  0E5D  00D3               	movwf	_rsLoAvg
  5222                           
  5223                           ;main.c: 55: voExpectMv=calc_expect_vout_adc_value(rsLoAvg);
  5224  0E5E  0854               	movf	_rsLoAvg+1,w
  5225  0E5F  00B3               	movwf	calc_expect_vout_adc_value@x+1
  5226  0E60  0853               	movf	_rsLoAvg,w
  5227  0E61  00B2               	movwf	calc_expect_vout_adc_value@x
  5228  0E62  3188  20E4  318D   	fcall	_calc_expect_vout_adc_value
  5229  0E65  0020               	movlb	0	; select bank0
  5230  0E66  0833               	movf	?_calc_expect_vout_adc_value+1,w
  5231  0E67  0021               	movlb	1	; select bank1
  5232  0E68  00C7               	movwf	(_voExpectMv+1)^(0+128)
  5233  0E69  0020               	movlb	0	; select bank0
  5234  0E6A  0832               	movf	?_calc_expect_vout_adc_value,w
  5235  0E6B  0021               	movlb	1	; select bank1
  5236  0E6C  00C6               	movwf	_voExpectMv^(0+128)
  5237                           
  5238                           ;main.c: 56: voExpectAdcValue=(voExpectMv<<1);
  5239  0E6D  3546               	lslf	_voExpectMv^(0+128),w
  5240  0E6E  0020               	movlb	0	; select bank0
  5241  0E6F  00D5               	movwf	_voExpectAdcValue
  5242  0E70  0021               	movlb	1	; select bank1
  5243  0E71  0D47               	rlf	(_voExpectMv+1)^(0+128),w
  5244  0E72  0020               	movlb	0	; select bank0
  5245  0E73  00D6               	movwf	_voExpectAdcValue+1
  5246                           
  5247                           ;main.c: 57: pid_pwm2_vout_run();
  5248  0E74  3195  251F  318D   	fcall	_pid_pwm2_vout_run
  5249  0E77                     l5327:	
  5250                           
  5251                           ;main.c: 59: };main.c: 61: if(Event & (1<<3)){
  5252  0E77  0020               	movlb	0	; select bank0
  5253  0E78  1DEB               	btfss	_Event,3	;volatile
  5254  0E79  2E80               	goto	l5331
  5255                           
  5256                           ;main.c: 62: Event &= ~(1<<3);
  5257  0E7A  30F7               	movlw	247
  5258  0E7B  0021               	movlb	1	; select bank1
  5259  0E7C  00D8               	movwf	??_main^(0+128)
  5260  0E7D  0858               	movf	??_main^(0+128),w
  5261  0E7E  0020               	movlb	0	; select bank0
  5262  0E7F  05EB               	andwf	_Event,f	;volatile
  5263  0E80                     l5331:	
  5264                           
  5265                           ;main.c: 104: };main.c: 106: if(Event & (1<<0)){
  5266  0E80  1C6B               	btfss	_Event,0	;volatile
  5267  0E81  2EB1               	goto	l5341
  5268                           
  5269                           ;main.c: 107: Event &= ~ (1<<0);
  5270  0E82  30FE               	movlw	254
  5271  0E83  0021               	movlb	1	; select bank1
  5272  0E84  00D8               	movwf	??_main^(0+128)
  5273  0E85  0858               	movf	??_main^(0+128),w
  5274  0E86  0020               	movlb	0	; select bank0
  5275  0E87  05EB               	andwf	_Event,f	;volatile
  5276                           
  5277                           ;main.c: 108: if(eusartRxCount>0){
  5278  0E88  086A               	movf	_eusartRxCount,w	;volatile
  5279  0E89  1903               	btfsc	3,2
  5280  0E8A  2EAE               	goto	l5339
  5281                           
  5282                           ;main.c: 109: m_mem_cpy_len(modbusBuf,eusartRxBuffer,eusartRxCount);
  5283  0E8B  3020               	movlw	low _modbusBuf
  5284  0E8C  00F1               	movwf	m_mem_cpy_len@d
  5285  0E8D  3001               	movlw	high _modbusBuf
  5286  0E8E  00F2               	movwf	m_mem_cpy_len@d+1
  5287  0E8F  3040               	movlw	low _eusartRxBuffer
  5288  0E90  00F3               	movwf	m_mem_cpy_len@s
  5289  0E91  3001               	movlw	high _eusartRxBuffer
  5290  0E92  00F4               	movwf	m_mem_cpy_len@s+1
  5291  0E93  086A               	movf	_eusartRxCount,w	;volatile
  5292  0E94  0021               	movlb	1	; select bank1
  5293  0E95  00D8               	movwf	??_main^(0+128)
  5294  0E96  01D9               	clrf	(??_main^(0+128)+1)
  5295  0E97  0858               	movf	??_main^(0+128),w
  5296  0E98  00F5               	movwf	m_mem_cpy_len@len
  5297  0E99  0859               	movf	(??_main+1)^(0+128),w
  5298  0E9A  00F6               	movwf	m_mem_cpy_len@len+1
  5299  0E9B  319E  2616  318D   	fcall	_m_mem_cpy_len
  5300                           
  5301                           ;main.c: 110: modbus_response_process(modbusBuf,eusartRxCount);
  5302  0E9E  0020               	movlb	0	; select bank0
  5303  0E9F  086A               	movf	_eusartRxCount,w	;volatile
  5304  0EA0  0021               	movlb	1	; select bank1
  5305  0EA1  00D8               	movwf	??_main^(0+128)
  5306  0EA2  01D9               	clrf	(??_main^(0+128)+1)
  5307  0EA3  0858               	movf	??_main^(0+128),w
  5308  0EA4  0020               	movlb	0	; select bank0
  5309  0EA5  00B8               	movwf	modbus_response_process@rlen
  5310  0EA6  0021               	movlb	1	; select bank1
  5311  0EA7  0859               	movf	(??_main+1)^(0+128),w
  5312  0EA8  0020               	movlb	0	; select bank0
  5313  0EA9  00B9               	movwf	modbus_response_process@rlen+1
  5314  0EAA  3020               	movlw	(low (_modbusBuf| (0+256)))& (0+255)
  5315  0EAB  318F  27AC  318D   	fcall	_modbus_response_process
  5316  0EAE                     l5339:	
  5317                           
  5318                           ;main.c: 112: };main.c: 114: uart_received_start();
  5319  0EAE  319C  24A6  318D   	fcall	_uart_received_start
  5320  0EB1                     l5341:	
  5321                           
  5322                           ;main.c: 115: };main.c: 117: __nop();
  5323  0EB1  0000               	nop
  5324  0EB2  2DCE               	goto	l5297
  5325  0EB3                     __end_of_main:	
  5326                           
  5327                           	psect	text1
  5328  1CA6                     __ptext1:	
  5329 ;; *************** function _uart_received_start *****************
  5330 ;; Defined at:
  5331 ;;		line 59 in file "src/api/my_uart.c"
  5332 ;; Parameters:    Size  Location     Type
  5333 ;;		None
  5334 ;; Auto vars:     Size  Location     Type
  5335 ;;		None
  5336 ;; Return value:  Size  Location     Type
  5337 ;;                  1    wreg      void 
  5338 ;; Registers used:
  5339 ;;		status,2
  5340 ;; Tracked objects:
  5341 ;;		On entry : 0/0
  5342 ;;		On exit  : 0/0
  5343 ;;		Unchanged: 0/0
  5344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5348 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5349 ;;Total ram usage:        0 bytes
  5350 ;; Hardware stack levels used:    1
  5351 ;; Hardware stack levels required when called:    1
  5352 ;; This function calls:
  5353 ;;		Nothing
  5354 ;; This function is called by:
  5355 ;;		_main
  5356 ;; This function uses a non-reentrant model
  5357 ;;
  5358                           
  5359                           
  5360                           ;psect for function _uart_received_start
  5361  1CA6                     _uart_received_start:	
  5362                           
  5363                           ;my_uart.c: 61: eusartRxCount=0;
  5364                           
  5365                           ;incstack = 0
  5366                           ; Regs used in _uart_received_start: [status,2]
  5367  1CA6  0020               	movlb	0	; select bank0
  5368  1CA7  01EA               	clrf	_eusartRxCount	;volatile
  5369                           
  5370                           ;my_uart.c: 70: eusartRxIdleTime_ms=0;
  5371  1CA8  01FC               	clrf	_eusartRxIdleTime_ms	;volatile
  5372  1CA9  0008               	return
  5373  1CAA                     __end_of_uart_received_start:	
  5374                           
  5375                           	psect	text2
  5376  15B0                     __ptext2:	
  5377 ;; *************** function _sys_data_init *****************
  5378 ;; Defined at:
  5379 ;;		line 104 in file "src/api/sysData.c"
  5380 ;; Parameters:    Size  Location     Type
  5381 ;;		None
  5382 ;; Auto vars:     Size  Location     Type
  5383 ;;  i               2   22[BANK0 ] unsigned int 
  5384 ;;  ret             2   20[BANK0 ] unsigned int 
  5385 ;; Return value:  Size  Location     Type
  5386 ;;                  2  745[None  ] unsigned int 
  5387 ;; Registers used:
  5388 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5389 ;; Tracked objects:
  5390 ;;		On entry : 0/0
  5391 ;;		On exit  : 0/0
  5392 ;;		Unchanged: 0/0
  5393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5395 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5396 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5397 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5398 ;;Total ram usage:       10 bytes
  5399 ;; Hardware stack levels used:    1
  5400 ;; Hardware stack levels required when called:    4
  5401 ;; This function calls:
  5402 ;;		___wmul
  5403 ;;		_crc_verify
  5404 ;;		_my_flash_system_read
  5405 ;;		_sys_data_save
  5406 ;; This function is called by:
  5407 ;;		_main
  5408 ;; This function uses a non-reentrant model
  5409 ;;
  5410                           
  5411                           
  5412                           ;psect for function _sys_data_init
  5413  15B0                     _sys_data_init:	
  5414                           
  5415                           ;sysData.c: 106: uint16_t ret,i;;sysData.c: 107: my_flash_system_read((uint8_t*)&sysData
      +                          ,sizeof(sysData_t));
  5416                           
  5417                           ;incstack = 0
  5418                           ; Regs used in _sys_data_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5419  15B0  305C               	movlw	92
  5420  15B1  00F1               	movwf	my_flash_system_read@buf
  5421  15B2  3023               	movlw	35
  5422  15B3  00F2               	movwf	my_flash_system_read@buf+1
  5423  15B4  3084               	movlw	132
  5424  15B5  00F3               	movwf	my_flash_system_read@len
  5425  15B6  3000               	movlw	0
  5426  15B7  00F4               	movwf	my_flash_system_read@len+1
  5427  15B8  3190  2061  3195   	fcall	_my_flash_system_read
  5428                           
  5429                           ;sysData.c: 108: ret=crc_verify((uint8_t*)&sysData,sizeof(sysData_t));
  5430  15BB  305C               	movlw	92
  5431  15BC  0020               	movlb	0	; select bank0
  5432  15BD  00A6               	movwf	crc_verify@message
  5433  15BE  3023               	movlw	35
  5434  15BF  00A7               	movwf	crc_verify@message+1
  5435  15C0  3084               	movlw	132
  5436  15C1  00A8               	movwf	crc_verify@n
  5437  15C2  3000               	movlw	0
  5438  15C3  00A9               	movwf	crc_verify@n+1
  5439  15C4  3190  202A  3195   	fcall	_crc_verify
  5440  15C7  0020               	movlb	0	; select bank0
  5441  15C8  00AE               	movwf	??_sys_data_init
  5442  15C9  01AF               	clrf	??_sys_data_init+1
  5443  15CA  082E               	movf	??_sys_data_init,w
  5444  15CB  00B4               	movwf	sys_data_init@ret
  5445  15CC  082F               	movf	??_sys_data_init+1,w
  5446  15CD  00B5               	movwf	sys_data_init@ret+1
  5447                           
  5448                           ;sysData.c: 109: if(!ret){
  5449  15CE  0834               	movf	sys_data_init@ret,w
  5450  15CF  0435               	iorwf	sys_data_init@ret+1,w
  5451  15D0  1D03               	btfss	3,2
  5452  15D1  0008               	return
  5453                           
  5454                           ;sysData.c: 110: sysData.pidSetFlg0=0x55;
  5455  15D2  305C               	movlw	92
  5456  15D3  0086               	movwf	6
  5457  15D4  3023               	movlw	35
  5458  15D5  0087               	movwf	7
  5459  15D6  3055               	movlw	85
  5460  15D7  3FC0               	movwi [0]fsr1
  5461                           
  5462                           ;sysData.c: 111: sysData.pidSetFlg1=0xaa;
  5463  15D8  305D               	movlw	93
  5464  15D9  0086               	movwf	6
  5465  15DA  3023               	movlw	35
  5466  15DB  0087               	movwf	7
  5467  15DC  30AA               	movlw	170
  5468  15DD  0081               	movwf	1
  5469                           
  5470                           ;sysData.c: 112: sysData.id=0x01;
  5471  15DE  305E               	movlw	94
  5472  15DF  0086               	movwf	6
  5473  15E0  3023               	movlw	35
  5474  15E1  0087               	movwf	7
  5475  15E2  3001               	movlw	1
  5476  15E3  0081               	movwf	1
  5477                           
  5478                           ;sysData.c: 113: for(i=0;i<30;i++){
  5479  15E4  01B6               	clrf	sys_data_init@i
  5480  15E5  01B7               	clrf	sys_data_init@i+1
  5481  15E6  3000               	movlw	0
  5482  15E7  0237               	subwf	sys_data_init@i+1,w
  5483  15E8  301E               	movlw	30
  5484  15E9  1903               	skipnz
  5485  15EA  0236               	subwf	sys_data_init@i,w
  5486  15EB  1803               	btfsc	3,0
  5487  15EC  2E3E               	goto	l5213
  5488  15ED                     l5207:	
  5489                           
  5490                           ;sysData.c: 115: sysData.calibRsAdc[i]=9400+i*720;
  5491  15ED  0837               	movf	sys_data_init@i+1,w
  5492  15EE  00F2               	movwf	___wmul@multiplier+1
  5493  15EF  0836               	movf	sys_data_init@i,w
  5494  15F0  00F1               	movwf	___wmul@multiplier
  5495  15F1  30D0               	movlw	208
  5496  15F2  00F3               	movwf	___wmul@multiplicand
  5497  15F3  3002               	movlw	2
  5498  15F4  00F4               	movwf	___wmul@multiplicand+1
  5499  15F5  319D  25A7  3195   	fcall	___wmul
  5500  15F8  0871               	movf	?___wmul,w
  5501  15F9  3EB8               	addlw	184
  5502  15FA  0020               	movlb	0	; select bank0
  5503  15FB  00AE               	movwf	??_sys_data_init
  5504  15FC  3024               	movlw	36
  5505  15FD  3D72               	addwfc	?___wmul+1,w
  5506  15FE  00AF               	movwf	??_sys_data_init+1
  5507  15FF  0837               	movf	sys_data_init@i+1,w
  5508  1600  00B1               	movwf	??_sys_data_init+3
  5509  1601  0836               	movf	sys_data_init@i,w
  5510  1602  00B0               	movwf	??_sys_data_init+2
  5511  1603  35B0               	lslf	??_sys_data_init+2,f
  5512  1604  0DB1               	rlf	??_sys_data_init+3,f
  5513  1605  3066               	movlw	102
  5514  1606  00B2               	movwf	??_sys_data_init+4
  5515  1607  3023               	movlw	35
  5516  1608  00B3               	movwf	??_sys_data_init+5
  5517  1609  0830               	movf	??_sys_data_init+2,w
  5518  160A  0732               	addwf	??_sys_data_init+4,w
  5519  160B  0086               	movwf	6
  5520  160C  0831               	movf	??_sys_data_init+3,w
  5521  160D  3D33               	addwfc	??_sys_data_init+5,w
  5522  160E  0087               	movwf	7
  5523  160F  082E               	movf	??_sys_data_init,w
  5524  1610  3FC0               	movwi [0]fsr1
  5525  1611  082F               	movf	??_sys_data_init+1,w
  5526  1612  3FC1               	movwi [1]fsr1
  5527                           
  5528                           ;sysData.c: 116: sysData.calibVoMV[i]=i*333;
  5529  1613  0837               	movf	sys_data_init@i+1,w
  5530  1614  00F2               	movwf	___wmul@multiplier+1
  5531  1615  0836               	movf	sys_data_init@i,w
  5532  1616  00F1               	movwf	___wmul@multiplier
  5533  1617  304D               	movlw	77
  5534  1618  00F3               	movwf	___wmul@multiplicand
  5535  1619  3001               	movlw	1
  5536  161A  00F4               	movwf	___wmul@multiplicand+1
  5537  161B  319D  25A7  3195   	fcall	___wmul
  5538  161E  0020               	movlb	0	; select bank0
  5539  161F  0837               	movf	sys_data_init@i+1,w
  5540  1620  00AF               	movwf	??_sys_data_init+1
  5541  1621  0836               	movf	sys_data_init@i,w
  5542  1622  00AE               	movwf	??_sys_data_init
  5543  1623  35AE               	lslf	??_sys_data_init,f
  5544  1624  0DAF               	rlf	??_sys_data_init+1,f
  5545  1625  30A2               	movlw	162
  5546  1626  00B0               	movwf	??_sys_data_init+2
  5547  1627  3023               	movlw	35
  5548  1628  00B1               	movwf	??_sys_data_init+3
  5549  1629  082E               	movf	??_sys_data_init,w
  5550  162A  0730               	addwf	??_sys_data_init+2,w
  5551  162B  0086               	movwf	6
  5552  162C  082F               	movf	??_sys_data_init+1,w
  5553  162D  3D31               	addwfc	??_sys_data_init+3,w
  5554  162E  0087               	movwf	7
  5555  162F  0871               	movf	?___wmul,w
  5556  1630  3FC0               	movwi [0]fsr1
  5557  1631  0872               	movf	?___wmul+1,w
  5558  1632  3FC1               	movwi [1]fsr1
  5559  1633  3001               	movlw	1
  5560  1634  07B6               	addwf	sys_data_init@i,f
  5561  1635  3000               	movlw	0
  5562  1636  3DB7               	addwfc	sys_data_init@i+1,f
  5563  1637  3000               	movlw	0
  5564  1638  0237               	subwf	sys_data_init@i+1,w
  5565  1639  301E               	movlw	30
  5566  163A  1903               	skipnz
  5567  163B  0236               	subwf	sys_data_init@i,w
  5568  163C  1C03               	skipc
  5569  163D  2DED               	goto	l5207
  5570  163E                     l5213:	
  5571                           
  5572                           ;sysData.c: 117: };sysData.c: 119: sysData.pidKp=3200;
  5573  163E  3080               	movlw	128
  5574  163F  00AE               	movwf	??_sys_data_init
  5575  1640  300C               	movlw	12
  5576  1641  00AF               	movwf	??_sys_data_init+1
  5577  1642  305C               	movlw	92
  5578  1643  0086               	movwf	6
  5579  1644  3023               	movlw	35
  5580  1645  0087               	movwf	7
  5581  1646  3144               	addfsr 1,4
  5582  1647  082E               	movf	??_sys_data_init,w
  5583  1648  3FC0               	movwi [0]fsr1
  5584  1649  082F               	movf	??_sys_data_init+1,w
  5585  164A  3FC1               	movwi [1]fsr1
  5586                           
  5587                           ;sysData.c: 120: sysData.pidTi=20;
  5588  164B  3014               	movlw	20
  5589  164C  00AE               	movwf	??_sys_data_init
  5590  164D  3000               	movlw	0
  5591  164E  00AF               	movwf	??_sys_data_init+1
  5592  164F  305C               	movlw	92
  5593  1650  0086               	movwf	6
  5594  1651  3023               	movlw	35
  5595  1652  0087               	movwf	7
  5596  1653  3146               	addfsr 1,6
  5597  1654  082E               	movf	??_sys_data_init,w
  5598  1655  3FC0               	movwi [0]fsr1
  5599  1656  082F               	movf	??_sys_data_init+1,w
  5600  1657  3FC1               	movwi [1]fsr1
  5601                           
  5602                           ;sysData.c: 121: sysData.pidTd=5;
  5603  1658  3005               	movlw	5
  5604  1659  00AE               	movwf	??_sys_data_init
  5605  165A  3000               	movlw	0
  5606  165B  00AF               	movwf	??_sys_data_init+1
  5607  165C  305C               	movlw	92
  5608  165D  0086               	movwf	6
  5609  165E  3023               	movlw	35
  5610  165F  0087               	movwf	7
  5611  1660  3148               	addfsr 1,8
  5612  1661  082E               	movf	??_sys_data_init,w
  5613  1662  3FC0               	movwi [0]fsr1
  5614  1663  082F               	movf	??_sys_data_init+1,w
  5615  1664  3FC1               	movwi [1]fsr1
  5616                           
  5617                           ;sysData.c: 123: sys_data_save();
  5618  1665  319E  26CA         	fcall	_sys_data_save
  5619  1667  0008               	return
  5620  1668                     __end_of_sys_data_init:	
  5621                           ;sysData.c: 125: };sysData.c: 126: return ret;;	Return value of _sys_data_init is never 
      +                          used
  5622                           
  5623                           
  5624                           	psect	text3
  5625  1061                     __ptext3:	
  5626 ;; *************** function _my_flash_system_read *****************
  5627 ;; Defined at:
  5628 ;;		line 23 in file "src/api/sysData.c"
  5629 ;; Parameters:    Size  Location     Type
  5630 ;;  buf             2    1[COMMON] PTR unsigned char 
  5631 ;;		 -> sysData(132), 
  5632 ;;  len             2    3[COMMON] unsigned int 
  5633 ;; Auto vars:     Size  Location     Type
  5634 ;;  i               2   10[COMMON] unsigned int 
  5635 ;;  flashAddr       2    8[COMMON] unsigned int 
  5636 ;;  GIEBitValue     1    7[COMMON] unsigned char 
  5637 ;; Return value:  Size  Location     Type
  5638 ;;                  1    wreg      void 
  5639 ;; Registers used:
  5640 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5641 ;; Tracked objects:
  5642 ;;		On entry : 0/0
  5643 ;;		On exit  : 0/0
  5644 ;;		Unchanged: 0/0
  5645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5646 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5647 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5648 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5649 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5650 ;;Total ram usage:       11 bytes
  5651 ;; Hardware stack levels used:    1
  5652 ;; Hardware stack levels required when called:    1
  5653 ;; This function calls:
  5654 ;;		Nothing
  5655 ;; This function is called by:
  5656 ;;		_sys_data_init
  5657 ;; This function uses a non-reentrant model
  5658 ;;
  5659                           
  5660                           
  5661                           ;psect for function _my_flash_system_read
  5662  1061                     _my_flash_system_read:	
  5663                           
  5664                           ;sysData.c: 25: uint16_t flashAddr=0x1f00;
  5665                           
  5666                           ;incstack = 0
  5667                           ; Regs used in _my_flash_system_read: [wreg+fsr1l+fsr1h+status,2+status,0]
  5668  1061  3000               	movlw	0
  5669  1062  00F8               	movwf	my_flash_system_read@flashAddr
  5670  1063  301F               	movlw	31
  5671  1064  00F9               	movwf	my_flash_system_read@flashAddr+1
  5672                           
  5673                           ;sysData.c: 26: uint16_t i;;sysData.c: 28: uint8_t GIEBitValue = INTCONbits.GIE;
  5674  1065  3000               	movlw	0
  5675  1066  1B8B               	btfsc	11,7	;volatile
  5676  1067  3001               	movlw	1
  5677  1068  00F7               	movwf	my_flash_system_read@GIEBitValue
  5678                           
  5679                           ;sysData.c: 30: INTCONbits.GIE = 0;
  5680  1069  138B               	bcf	11,7	;volatile
  5681                           
  5682                           ;sysData.c: 32: for(i=0;i<len;i++){
  5683  106A  01FA               	clrf	my_flash_system_read@i
  5684  106B  01FB               	clrf	my_flash_system_read@i+1
  5685  106C                     l3745:	
  5686  106C  0874               	movf	my_flash_system_read@len+1,w
  5687  106D  027B               	subwf	my_flash_system_read@i+1,w
  5688  106E  1D03               	skipz
  5689  106F  2872               	goto	u2465
  5690  1070  0873               	movf	my_flash_system_read@len,w
  5691  1071  027A               	subwf	my_flash_system_read@i,w
  5692  1072                     u2465:	
  5693  1072  1803               	btfsc	3,0
  5694  1073  2893               	goto	l3747
  5695                           
  5696                           ;sysData.c: 34: PMADRL = (flashAddr & 0x00FF);
  5697  1074  0878               	movf	my_flash_system_read@flashAddr,w
  5698  1075  0023               	movlb	3	; select bank3
  5699  1076  0091               	movwf	17	;volatile
  5700                           
  5701                           ;sysData.c: 35: PMADRH = ((flashAddr & 0xFF00) >> 8);
  5702  1077  0879               	movf	my_flash_system_read@flashAddr+1,w
  5703  1078  0092               	movwf	18	;volatile
  5704                           
  5705                           ;sysData.c: 37: PMCON1bits.CFGS = 0;
  5706  1079  1315               	bcf	21,6	;volatile
  5707                           
  5708                           ;sysData.c: 38: PMCON1bits.RD = 1;
  5709  107A  1415               	bsf	21,0	;volatile
  5710                           
  5711                           ;sysData.c: 39: __nop();
  5712  107B  0000               	nop
  5713                           
  5714                           ;sysData.c: 40: __nop();
  5715  107C  0000               	nop
  5716                           
  5717                           ;sysData.c: 41: buf[i]=PMDATL;
  5718  107D  087A               	movf	my_flash_system_read@i,w
  5719  107E  0771               	addwf	my_flash_system_read@buf,w
  5720  107F  00F5               	movwf	??_my_flash_system_read
  5721  1080  087B               	movf	my_flash_system_read@i+1,w
  5722  1081  3D72               	addwfc	my_flash_system_read@buf+1,w
  5723  1082  00F6               	movwf	??_my_flash_system_read+1
  5724  1083  0875               	movf	??_my_flash_system_read,w
  5725  1084  0086               	movwf	6
  5726  1085  0876               	movf	??_my_flash_system_read+1,w
  5727  1086  0087               	movwf	7
  5728  1087  0023               	movlb	3	; select bank3
  5729  1088  0813               	movf	19,w	;volatile
  5730  1089  0081               	movwf	1
  5731                           
  5732                           ;sysData.c: 42: flashAddr++;
  5733  108A  3001               	movlw	1
  5734  108B  07F8               	addwf	my_flash_system_read@flashAddr,f
  5735  108C  3000               	movlw	0
  5736  108D  3DF9               	addwfc	my_flash_system_read@flashAddr+1,f
  5737  108E  3001               	movlw	1
  5738  108F  07FA               	addwf	my_flash_system_read@i,f
  5739  1090  3000               	movlw	0
  5740  1091  3DFB               	addwfc	my_flash_system_read@i+1,f
  5741  1092  286C               	goto	l3745
  5742  1093                     l3747:	
  5743                           
  5744                           ;sysData.c: 43: };sysData.c: 44: INTCONbits.GIE = GIEBitValue;
  5745  1093  0C77               	rrf	my_flash_system_read@GIEBitValue,w
  5746  1094  1C03               	skipc
  5747  1095  138B               	bcf	11,7	;volatile
  5748  1096  1803               	skipnc
  5749  1097  178B               	bsf	11,7	;volatile
  5750  1098  0008               	return
  5751  1099                     __end_of_my_flash_system_read:	
  5752                           
  5753                           	psect	text4
  5754  1DA7                     __ptext4:	
  5755 ;; *************** function ___wmul *****************
  5756 ;; Defined at:
  5757 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  5758 ;; Parameters:    Size  Location     Type
  5759 ;;  multiplier      2    1[COMMON] unsigned int 
  5760 ;;  multiplicand    2    3[COMMON] unsigned int 
  5761 ;; Auto vars:     Size  Location     Type
  5762 ;;  product         2    5[COMMON] unsigned int 
  5763 ;; Return value:  Size  Location     Type
  5764 ;;                  2    1[COMMON] unsigned int 
  5765 ;; Registers used:
  5766 ;;		wreg, status,2, status,0
  5767 ;; Tracked objects:
  5768 ;;		On entry : 0/0
  5769 ;;		On exit  : 0/0
  5770 ;;		Unchanged: 0/0
  5771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5772 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5773 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5775 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5776 ;;Total ram usage:        6 bytes
  5777 ;; Hardware stack levels used:    1
  5778 ;; Hardware stack levels required when called:    1
  5779 ;; This function calls:
  5780 ;;		Nothing
  5781 ;; This function is called by:
  5782 ;;		_sys_data_init
  5783 ;; This function uses a non-reentrant model
  5784 ;;
  5785                           
  5786                           
  5787                           ;psect for function ___wmul
  5788  1DA7                     ___wmul:	
  5789                           
  5790                           ;incstack = 0
  5791                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5792  1DA7  01F5               	clrf	___wmul@product
  5793  1DA8  01F6               	clrf	___wmul@product+1
  5794  1DA9                     l3933:	
  5795  1DA9  1C71               	btfss	___wmul@multiplier,0
  5796  1DAA  2DAF               	goto	l1086
  5797  1DAB  0873               	movf	___wmul@multiplicand,w
  5798  1DAC  07F5               	addwf	___wmul@product,f
  5799  1DAD  0874               	movf	___wmul@multiplicand+1,w
  5800  1DAE  3DF6               	addwfc	___wmul@product+1,f
  5801  1DAF                     l1086:	
  5802  1DAF  3001               	movlw	1
  5803  1DB0                     u2765:	
  5804  1DB0  35F3               	lslf	___wmul@multiplicand,f
  5805  1DB1  0DF4               	rlf	___wmul@multiplicand+1,f
  5806  1DB2  0B89               	decfsz	9,f
  5807  1DB3  2DB0               	goto	u2765
  5808  1DB4  3001               	movlw	1
  5809  1DB5                     u2775:	
  5810  1DB5  36F2               	lsrf	___wmul@multiplier+1,f
  5811  1DB6  0CF1               	rrf	___wmul@multiplier,f
  5812  1DB7  0B89               	decfsz	9,f
  5813  1DB8  2DB5               	goto	u2775
  5814  1DB9  0871               	movf	___wmul@multiplier,w
  5815  1DBA  0472               	iorwf	___wmul@multiplier+1,w
  5816  1DBB  1D03               	btfss	3,2
  5817  1DBC  2DA9               	goto	l3933
  5818  1DBD  0876               	movf	___wmul@product+1,w
  5819  1DBE  00F2               	movwf	?___wmul+1
  5820  1DBF  0875               	movf	___wmul@product,w
  5821  1DC0  00F1               	movwf	?___wmul
  5822  1DC1  0008               	return
  5823  1DC2                     __end_of___wmul:	
  5824                           
  5825                           	psect	text5
  5826  151F                     __ptext5:	
  5827 ;; *************** function _pid_pwm2_vout_run *****************
  5828 ;; Defined at:
  5829 ;;		line 363 in file "src/api/sample.c"
  5830 ;; Parameters:    Size  Location     Type
  5831 ;;		None
  5832 ;; Auto vars:     Size  Location     Type
  5833 ;;  t16             2    4[BANK0 ] int 
  5834 ;;  __ei            2    2[BANK0 ] int 
  5835 ;; Return value:  Size  Location     Type
  5836 ;;                  1    wreg      void 
  5837 ;; Registers used:
  5838 ;;		wreg, status,2, status,0, pclath, cstack
  5839 ;; Tracked objects:
  5840 ;;		On entry : 0/0
  5841 ;;		On exit  : 0/0
  5842 ;;		Unchanged: 0/0
  5843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5845 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5846 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5847 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5848 ;;Total ram usage:        6 bytes
  5849 ;; Hardware stack levels used:    1
  5850 ;; Hardware stack levels required when called:    3
  5851 ;; This function calls:
  5852 ;;		___awdiv
  5853 ;;		___lwdiv
  5854 ;;		_set_vout_pwm2_duty
  5855 ;; This function is called by:
  5856 ;;		_main
  5857 ;; This function uses a non-reentrant model
  5858 ;;
  5859                           
  5860                           
  5861                           ;psect for function _pid_pwm2_vout_run
  5862  151F                     _pid_pwm2_vout_run:	
  5863                           
  5864                           ;sample.c: 365: int16_t t16,__ei;;sample.c: 366: t16=voExpectAdcValue-rtAdcValueVoFb;
  5865                           
  5866                           ;incstack = 0
  5867                           ; Regs used in _pid_pwm2_vout_run: [wreg+status,2+status,0+pclath+cstack]
  5868  151F  0020               	movlb	0	; select bank0
  5869  1520  0957               	comf	_rtAdcValueVoFb,w
  5870  1521  00A0               	movwf	??_pid_pwm2_vout_run
  5871  1522  0958               	comf	_rtAdcValueVoFb+1,w
  5872  1523  00A1               	movwf	??_pid_pwm2_vout_run+1
  5873  1524  0AA0               	incf	??_pid_pwm2_vout_run,f
  5874  1525  1903               	skipnz
  5875  1526  0AA1               	incf	??_pid_pwm2_vout_run+1,f
  5876  1527  0855               	movf	_voExpectAdcValue,w
  5877  1528  0720               	addwf	??_pid_pwm2_vout_run,w
  5878  1529  00A4               	movwf	pid_pwm2_vout_run@t16
  5879  152A  0856               	movf	_voExpectAdcValue+1,w
  5880  152B  3D21               	addwfc	??_pid_pwm2_vout_run+1,w
  5881  152C  00A5               	movwf	pid_pwm2_vout_run@t16+1
  5882                           
  5883                           ;sample.c: 367: __ei=t16/150;
  5884  152D  3096               	movlw	150
  5885  152E  00F1               	movwf	___awdiv@divisor
  5886  152F  3000               	movlw	0
  5887  1530  00F2               	movwf	___awdiv@divisor+1
  5888  1531  0825               	movf	pid_pwm2_vout_run@t16+1,w
  5889  1532  00F4               	movwf	___awdiv@dividend+1
  5890  1533  0824               	movf	pid_pwm2_vout_run@t16,w
  5891  1534  00F3               	movwf	___awdiv@dividend
  5892  1535  3191  2155  3195   	fcall	___awdiv
  5893  1538  0872               	movf	?___awdiv+1,w
  5894  1539  0020               	movlb	0	; select bank0
  5895  153A  00A3               	movwf	pid_pwm2_vout_run@__ei+1
  5896  153B  0871               	movf	?___awdiv,w
  5897  153C  00A2               	movwf	pid_pwm2_vout_run@__ei
  5898                           
  5899                           ;sample.c: 368: if(__ei==0){
  5900  153D  0822               	movf	pid_pwm2_vout_run@__ei,w
  5901  153E  0423               	iorwf	pid_pwm2_vout_run@__ei+1,w
  5902  153F  1D03               	btfss	3,2
  5903  1540  2D62               	goto	l5127
  5904                           
  5905                           ;sample.c: 369: if(t16>16)__ei=1;
  5906  1541  0825               	movf	pid_pwm2_vout_run@t16+1,w
  5907  1542  3A80               	xorlw	128
  5908  1543  00A0               	movwf	??_pid_pwm2_vout_run
  5909  1544  3080               	movlw	128
  5910  1545  0220               	subwf	??_pid_pwm2_vout_run,w
  5911  1546  1D03               	skipz
  5912  1547  2D4A               	goto	u4645
  5913  1548  3011               	movlw	17
  5914  1549  0224               	subwf	pid_pwm2_vout_run@t16,w
  5915  154A                     u4645:	
  5916  154A  1C03               	skipc
  5917  154B  2D51               	goto	l662
  5918  154C  3001               	movlw	1
  5919  154D  0020               	movlb	0	; select bank0
  5920  154E  00A2               	movwf	pid_pwm2_vout_run@__ei
  5921  154F  3000               	movlw	0
  5922  1550  00A3               	movwf	pid_pwm2_vout_run@__ei+1
  5923  1551                     l662:	
  5924                           
  5925                           ;sample.c: 370: if(t16<-16)__ei=-1;
  5926  1551  0020               	movlb	0	; select bank0
  5927  1552  0825               	movf	pid_pwm2_vout_run@t16+1,w
  5928  1553  3A80               	xorlw	128
  5929  1554  00A0               	movwf	??_pid_pwm2_vout_run
  5930  1555  307F               	movlw	127
  5931  1556  0220               	subwf	??_pid_pwm2_vout_run,w
  5932  1557  1D03               	skipz
  5933  1558  2D5B               	goto	u4655
  5934  1559  30F0               	movlw	240
  5935  155A  0224               	subwf	pid_pwm2_vout_run@t16,w
  5936  155B                     u4655:	
  5937  155B  1803               	skipnc
  5938  155C  2D62               	goto	l5127
  5939  155D  30FF               	movlw	255
  5940  155E  0020               	movlb	0	; select bank0
  5941  155F  00A2               	movwf	pid_pwm2_vout_run@__ei
  5942  1560  30FF               	movlw	255
  5943  1561  00A3               	movwf	pid_pwm2_vout_run@__ei+1
  5944  1562                     l5127:	
  5945                           
  5946                           ;sample.c: 371: };sample.c: 373: pwm2Ei=pwm2Ei+__ei;
  5947  1562  0020               	movlb	0	; select bank0
  5948  1563  0822               	movf	pid_pwm2_vout_run@__ei,w
  5949  1564  0021               	movlb	1	; select bank1
  5950  1565  0744               	addwf	_pwm2Ei^(0+128),w
  5951  1566  00C4               	movwf	_pwm2Ei^(0+128)
  5952  1567  0020               	movlb	0	; select bank0
  5953  1568  0823               	movf	pid_pwm2_vout_run@__ei+1,w
  5954  1569  0021               	movlb	1	; select bank1
  5955  156A  3D45               	addwfc	(_pwm2Ei+1)^(0+128),w
  5956  156B  00C5               	movwf	(_pwm2Ei+1)^(0+128)
  5957                           
  5958                           ;sample.c: 377: t16=voExpectAdcValue/10;
  5959  156C  300A               	movlw	10
  5960  156D  00F1               	movwf	___lwdiv@divisor
  5961  156E  3000               	movlw	0
  5962  156F  00F2               	movwf	___lwdiv@divisor+1
  5963  1570  0020               	movlb	0	; select bank0
  5964  1571  0856               	movf	_voExpectAdcValue+1,w
  5965  1572  00F4               	movwf	___lwdiv@dividend+1
  5966  1573  0855               	movf	_voExpectAdcValue,w
  5967  1574  00F3               	movwf	___lwdiv@dividend
  5968  1575  319E  2696  3195   	fcall	___lwdiv
  5969  1578  0872               	movf	?___lwdiv+1,w
  5970  1579  0020               	movlb	0	; select bank0
  5971  157A  00A5               	movwf	pid_pwm2_vout_run@t16+1
  5972  157B  0871               	movf	?___lwdiv,w
  5973  157C  00A4               	movwf	pid_pwm2_vout_run@t16
  5974                           
  5975                           ;sample.c: 379: t16=t16+pwm2Ei;
  5976  157D  0021               	movlb	1	; select bank1
  5977  157E  0844               	movf	_pwm2Ei^(0+128),w
  5978  157F  0020               	movlb	0	; select bank0
  5979  1580  0724               	addwf	pid_pwm2_vout_run@t16,w
  5980  1581  00A4               	movwf	pid_pwm2_vout_run@t16
  5981  1582  0021               	movlb	1	; select bank1
  5982  1583  0845               	movf	(_pwm2Ei+1)^(0+128),w
  5983  1584  0020               	movlb	0	; select bank0
  5984  1585  3D25               	addwfc	pid_pwm2_vout_run@t16+1,w
  5985  1586  00A5               	movwf	pid_pwm2_vout_run@t16+1
  5986                           
  5987                           ;sample.c: 380: if(t16>1580)t16=1580;
  5988  1587  0825               	movf	pid_pwm2_vout_run@t16+1,w
  5989  1588  3A80               	xorlw	128
  5990  1589  00A0               	movwf	??_pid_pwm2_vout_run
  5991  158A  3086               	movlw	134
  5992  158B  0220               	subwf	??_pid_pwm2_vout_run,w
  5993  158C  1D03               	skipz
  5994  158D  2D90               	goto	u4665
  5995  158E  302D               	movlw	45
  5996  158F  0224               	subwf	pid_pwm2_vout_run@t16,w
  5997  1590                     u4665:	
  5998  1590  1C03               	skipc
  5999  1591  2D97               	goto	l664
  6000  1592  302C               	movlw	44
  6001  1593  0020               	movlb	0	; select bank0
  6002  1594  00A4               	movwf	pid_pwm2_vout_run@t16
  6003  1595  3006               	movlw	6
  6004  1596  00A5               	movwf	pid_pwm2_vout_run@t16+1
  6005  1597                     l664:	
  6006                           
  6007                           ;sample.c: 381: if(t16<5)t16=5;
  6008  1597  0020               	movlb	0	; select bank0
  6009  1598  0825               	movf	pid_pwm2_vout_run@t16+1,w
  6010  1599  3A80               	xorlw	128
  6011  159A  00A0               	movwf	??_pid_pwm2_vout_run
  6012  159B  3080               	movlw	128
  6013  159C  0220               	subwf	??_pid_pwm2_vout_run,w
  6014  159D  1D03               	skipz
  6015  159E  2DA1               	goto	u4675
  6016  159F  3005               	movlw	5
  6017  15A0  0224               	subwf	pid_pwm2_vout_run@t16,w
  6018  15A1                     u4675:	
  6019  15A1  1803               	skipnc
  6020  15A2  2DA8               	goto	l5139
  6021  15A3  3005               	movlw	5
  6022  15A4  0020               	movlb	0	; select bank0
  6023  15A5  00A4               	movwf	pid_pwm2_vout_run@t16
  6024  15A6  3000               	movlw	0
  6025  15A7  00A5               	movwf	pid_pwm2_vout_run@t16+1
  6026  15A8                     l5139:	
  6027                           
  6028                           ;sample.c: 382: set_vout_pwm2_duty((uint16_t)t16);
  6029  15A8  0020               	movlb	0	; select bank0
  6030  15A9  0825               	movf	pid_pwm2_vout_run@t16+1,w
  6031  15AA  00F8               	movwf	set_vout_pwm2_duty@duty+1
  6032  15AB  0824               	movf	pid_pwm2_vout_run@t16,w
  6033  15AC  00F7               	movwf	set_vout_pwm2_duty@duty
  6034  15AD  319D  25FA         	fcall	_set_vout_pwm2_duty
  6035  15AF  0008               	return
  6036  15B0                     __end_of_pid_pwm2_vout_run:	
  6037                           
  6038                           	psect	text6
  6039  1DFA                     __ptext6:	
  6040 ;; *************** function _set_vout_pwm2_duty *****************
  6041 ;; Defined at:
  6042 ;;		line 111 in file "src/api/sample.c"
  6043 ;; Parameters:    Size  Location     Type
  6044 ;;  duty            2    7[COMMON] unsigned int 
  6045 ;; Auto vars:     Size  Location     Type
  6046 ;;  t16             2    9[COMMON] unsigned int 
  6047 ;; Return value:  Size  Location     Type
  6048 ;;                  1    wreg      void 
  6049 ;; Registers used:
  6050 ;;		wreg, status,2, pclath, cstack
  6051 ;; Tracked objects:
  6052 ;;		On entry : 0/0
  6053 ;;		On exit  : 0/0
  6054 ;;		Unchanged: 0/0
  6055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6056 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6057 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6059 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6060 ;;Total ram usage:        4 bytes
  6061 ;; Hardware stack levels used:    1
  6062 ;; Hardware stack levels required when called:    2
  6063 ;; This function calls:
  6064 ;;		_get_vout_pwm2_duty
  6065 ;; This function is called by:
  6066 ;;		_pid_pwm2_vout_run
  6067 ;; This function uses a non-reentrant model
  6068 ;;
  6069                           
  6070                           
  6071                           ;psect for function _set_vout_pwm2_duty
  6072  1DFA                     _set_vout_pwm2_duty:	
  6073                           
  6074                           ;sample.c: 114: uint16_t t16;;sample.c: 115: pwm2DutyForVout=duty;
  6075                           
  6076                           ;incstack = 0
  6077                           ; Regs used in _set_vout_pwm2_duty: [wreg+status,2+pclath+cstack]
  6078  1DFA  0878               	movf	set_vout_pwm2_duty@duty+1,w
  6079  1DFB  0021               	movlb	1	; select bank1
  6080  1DFC  00D7               	movwf	(_pwm2DutyForVout+1)^(0+128)
  6081  1DFD  0877               	movf	set_vout_pwm2_duty@duty,w
  6082  1DFE  00D6               	movwf	_pwm2DutyForVout^(0+128)
  6083                           
  6084                           ;sample.c: 116: t16=get_vout_pwm2_duty();
  6085  1DFF  319D  2573  319D   	fcall	_get_vout_pwm2_duty
  6086  1E02  0872               	movf	?_get_vout_pwm2_duty+1,w
  6087  1E03  00FA               	movwf	set_vout_pwm2_duty@t16+1
  6088  1E04  0871               	movf	?_get_vout_pwm2_duty,w
  6089  1E05  00F9               	movwf	set_vout_pwm2_duty@t16
  6090                           
  6091                           ;sample.c: 117: if(t16==duty)return;
  6092  1E06  0878               	movf	set_vout_pwm2_duty@duty+1,w
  6093  1E07  067A               	xorwf	set_vout_pwm2_duty@t16+1,w
  6094  1E08  1D03               	skipz
  6095  1E09  2E0C               	goto	u2425
  6096  1E0A  0877               	movf	set_vout_pwm2_duty@duty,w
  6097  1E0B  0679               	xorwf	set_vout_pwm2_duty@t16,w
  6098  1E0C                     u2425:	
  6099  1E0C  1903               	btfsc	3,2
  6100  1E0D  0008               	return
  6101                           
  6102                           ;sample.c: 121: PWM2CONbits.EN = 0;
  6103  1E0E  003B               	movlb	27	; select bank27
  6104  1E0F  13AB               	bcf	43,7	;volatile
  6105                           
  6106                           ;sample.c: 122: PWM2DCL= (uint8_t)(duty&0xff);
  6107  1E10  0877               	movf	set_vout_pwm2_duty@duty,w
  6108  1E11  00A3               	movwf	35	;volatile
  6109                           
  6110                           ;sample.c: 123: PWM2DCH=(uint8_t)(duty>>8);
  6111  1E12  0878               	movf	set_vout_pwm2_duty@duty+1,w
  6112  1E13  00A4               	movwf	36	;volatile
  6113                           
  6114                           ;sample.c: 124: PWM2CONbits.EN = 1;
  6115  1E14  17AB               	bsf	43,7	;volatile
  6116  1E15  0008               	return
  6117  1E16                     __end_of_set_vout_pwm2_duty:	
  6118                           
  6119                           	psect	text7
  6120  1D73                     __ptext7:	
  6121 ;; *************** function _get_vout_pwm2_duty *****************
  6122 ;; Defined at:
  6123 ;;		line 102 in file "src/api/sample.c"
  6124 ;; Parameters:    Size  Location     Type
  6125 ;;		None
  6126 ;; Auto vars:     Size  Location     Type
  6127 ;;  t16             2    5[COMMON] unsigned int 
  6128 ;; Return value:  Size  Location     Type
  6129 ;;                  2    1[COMMON] unsigned int 
  6130 ;; Registers used:
  6131 ;;		wreg
  6132 ;; Tracked objects:
  6133 ;;		On entry : 0/0
  6134 ;;		On exit  : 0/0
  6135 ;;		Unchanged: 0/0
  6136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6137 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6138 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6139 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6140 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6141 ;;Total ram usage:        6 bytes
  6142 ;; Hardware stack levels used:    1
  6143 ;; Hardware stack levels required when called:    1
  6144 ;; This function calls:
  6145 ;;		Nothing
  6146 ;; This function is called by:
  6147 ;;		_set_vout_pwm2_duty
  6148 ;; This function uses a non-reentrant model
  6149 ;;
  6150                           
  6151                           
  6152                           ;psect for function _get_vout_pwm2_duty
  6153  1D73                     _get_vout_pwm2_duty:	
  6154                           
  6155                           ;sample.c: 105: uint16_t t16=PWM2DCH;
  6156                           
  6157                           ;incstack = 0
  6158                           ; Regs used in _get_vout_pwm2_duty: [wreg]
  6159  1D73  003B               	movlb	27	; select bank27
  6160  1D74  0824               	movf	36,w	;volatile
  6161  1D75  00F3               	movwf	??_get_vout_pwm2_duty
  6162  1D76  01F4               	clrf	??_get_vout_pwm2_duty+1
  6163  1D77  0873               	movf	??_get_vout_pwm2_duty,w
  6164  1D78  00F5               	movwf	get_vout_pwm2_duty@t16
  6165  1D79  0874               	movf	??_get_vout_pwm2_duty+1,w
  6166  1D7A  00F6               	movwf	get_vout_pwm2_duty@t16+1
  6167                           
  6168                           ;sample.c: 106: t16<<=8;
  6169  1D7B  3008               	movlw	8
  6170  1D7C                     u2355:	
  6171  1D7C  35F5               	lslf	get_vout_pwm2_duty@t16,f
  6172  1D7D  0DF6               	rlf	get_vout_pwm2_duty@t16+1,f
  6173  1D7E  0B89               	decfsz	9,f
  6174  1D7F  2D7C               	goto	u2355
  6175                           
  6176                           ;sample.c: 107: t16|=PWM2DCL;
  6177  1D80  0823               	movf	35,w	;volatile
  6178  1D81  00F3               	movwf	??_get_vout_pwm2_duty
  6179  1D82  01F4               	clrf	??_get_vout_pwm2_duty+1
  6180  1D83  0873               	movf	??_get_vout_pwm2_duty,w
  6181  1D84  04F5               	iorwf	get_vout_pwm2_duty@t16,f
  6182  1D85  0874               	movf	??_get_vout_pwm2_duty+1,w
  6183  1D86  04F6               	iorwf	get_vout_pwm2_duty@t16+1,f
  6184                           
  6185                           ;sample.c: 108: return t16;
  6186  1D87  0876               	movf	get_vout_pwm2_duty@t16+1,w
  6187  1D88  00F2               	movwf	?_get_vout_pwm2_duty+1
  6188  1D89  0875               	movf	get_vout_pwm2_duty@t16,w
  6189  1D8A  00F1               	movwf	?_get_vout_pwm2_duty
  6190  1D8B  0008               	return
  6191  1D8C                     __end_of_get_vout_pwm2_duty:	
  6192                           
  6193                           	psect	text8
  6194  1E96                     __ptext8:	
  6195 ;; *************** function ___lwdiv *****************
  6196 ;; Defined at:
  6197 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwdiv.c"
  6198 ;; Parameters:    Size  Location     Type
  6199 ;;  divisor         2    1[COMMON] unsigned int 
  6200 ;;  dividend        2    3[COMMON] unsigned int 
  6201 ;; Auto vars:     Size  Location     Type
  6202 ;;  quotient        2    6[COMMON] unsigned int 
  6203 ;;  counter         1    8[COMMON] unsigned char 
  6204 ;; Return value:  Size  Location     Type
  6205 ;;                  2    1[COMMON] unsigned int 
  6206 ;; Registers used:
  6207 ;;		wreg, status,2, status,0
  6208 ;; Tracked objects:
  6209 ;;		On entry : 0/0
  6210 ;;		On exit  : 0/0
  6211 ;;		Unchanged: 0/0
  6212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6213 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6214 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6215 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6216 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6217 ;;Total ram usage:        8 bytes
  6218 ;; Hardware stack levels used:    1
  6219 ;; Hardware stack levels required when called:    1
  6220 ;; This function calls:
  6221 ;;		Nothing
  6222 ;; This function is called by:
  6223 ;;		_pid_pwm2_vout_run
  6224 ;; This function uses a non-reentrant model
  6225 ;;
  6226                           
  6227                           
  6228                           ;psect for function ___lwdiv
  6229  1E96                     ___lwdiv:	
  6230                           
  6231                           ;incstack = 0
  6232                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6233  1E96  01F6               	clrf	___lwdiv@quotient
  6234  1E97  01F7               	clrf	___lwdiv@quotient+1
  6235  1E98  0871               	movf	___lwdiv@divisor,w
  6236  1E99  0472               	iorwf	___lwdiv@divisor+1,w
  6237  1E9A  1903               	btfsc	3,2
  6238  1E9B  2EC5               	goto	l4089
  6239  1E9C  01F8               	clrf	___lwdiv@counter
  6240  1E9D  0AF8               	incf	___lwdiv@counter,f
  6241  1E9E                     l4077:	
  6242  1E9E  1BF2               	btfsc	___lwdiv@divisor+1,7
  6243  1E9F  2EAA               	goto	l4079
  6244  1EA0  3001               	movlw	1
  6245  1EA1                     u3115:	
  6246  1EA1  35F1               	lslf	___lwdiv@divisor,f
  6247  1EA2  0DF2               	rlf	___lwdiv@divisor+1,f
  6248  1EA3  0B89               	decfsz	9,f
  6249  1EA4  2EA1               	goto	u3115
  6250  1EA5  3001               	movlw	1
  6251  1EA6  00F5               	movwf	??___lwdiv
  6252  1EA7  0875               	movf	??___lwdiv,w
  6253  1EA8  07F8               	addwf	___lwdiv@counter,f
  6254  1EA9  2E9E               	goto	l4077
  6255  1EAA                     l4079:	
  6256  1EAA  3001               	movlw	1
  6257  1EAB                     u3135:	
  6258  1EAB  35F6               	lslf	___lwdiv@quotient,f
  6259  1EAC  0DF7               	rlf	___lwdiv@quotient+1,f
  6260  1EAD  0B89               	decfsz	9,f
  6261  1EAE  2EAB               	goto	u3135
  6262  1EAF  0872               	movf	___lwdiv@divisor+1,w
  6263  1EB0  0274               	subwf	___lwdiv@dividend+1,w
  6264  1EB1  1D03               	skipz
  6265  1EB2  2EB5               	goto	u3145
  6266  1EB3  0871               	movf	___lwdiv@divisor,w
  6267  1EB4  0273               	subwf	___lwdiv@dividend,w
  6268  1EB5                     u3145:	
  6269  1EB5  1C03               	skipc
  6270  1EB6  2EBC               	goto	l4085
  6271  1EB7  0871               	movf	___lwdiv@divisor,w
  6272  1EB8  02F3               	subwf	___lwdiv@dividend,f
  6273  1EB9  0872               	movf	___lwdiv@divisor+1,w
  6274  1EBA  3BF4               	subwfb	___lwdiv@dividend+1,f
  6275  1EBB  1476               	bsf	___lwdiv@quotient,0
  6276  1EBC                     l4085:	
  6277  1EBC  3001               	movlw	1
  6278  1EBD                     u3155:	
  6279  1EBD  36F2               	lsrf	___lwdiv@divisor+1,f
  6280  1EBE  0CF1               	rrf	___lwdiv@divisor,f
  6281  1EBF  0B89               	decfsz	9,f
  6282  1EC0  2EBD               	goto	u3155
  6283  1EC1  3001               	movlw	1
  6284  1EC2  02F8               	subwf	___lwdiv@counter,f
  6285  1EC3  1D03               	btfss	3,2
  6286  1EC4  2EAA               	goto	l4079
  6287  1EC5                     l4089:	
  6288  1EC5  0877               	movf	___lwdiv@quotient+1,w
  6289  1EC6  00F2               	movwf	?___lwdiv+1
  6290  1EC7  0876               	movf	___lwdiv@quotient,w
  6291  1EC8  00F1               	movwf	?___lwdiv
  6292  1EC9  0008               	return
  6293  1ECA                     __end_of___lwdiv:	
  6294                           
  6295                           	psect	text9
  6296  1155                     __ptext9:	
  6297 ;; *************** function ___awdiv *****************
  6298 ;; Defined at:
  6299 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awdiv.c"
  6300 ;; Parameters:    Size  Location     Type
  6301 ;;  divisor         2    1[COMMON] int 
  6302 ;;  dividend        2    3[COMMON] int 
  6303 ;; Auto vars:     Size  Location     Type
  6304 ;;  quotient        2    8[COMMON] int 
  6305 ;;  sign            1    7[COMMON] unsigned char 
  6306 ;;  counter         1    6[COMMON] unsigned char 
  6307 ;; Return value:  Size  Location     Type
  6308 ;;                  2    1[COMMON] int 
  6309 ;; Registers used:
  6310 ;;		wreg, status,2, status,0
  6311 ;; Tracked objects:
  6312 ;;		On entry : 0/0
  6313 ;;		On exit  : 0/0
  6314 ;;		Unchanged: 0/0
  6315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6316 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6317 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6318 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6319 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6320 ;;Total ram usage:        9 bytes
  6321 ;; Hardware stack levels used:    1
  6322 ;; Hardware stack levels required when called:    1
  6323 ;; This function calls:
  6324 ;;		Nothing
  6325 ;; This function is called by:
  6326 ;;		_pid_pwm2_vout_run
  6327 ;; This function uses a non-reentrant model
  6328 ;;
  6329                           
  6330                           
  6331                           ;psect for function ___awdiv
  6332  1155                     ___awdiv:	
  6333                           
  6334                           ;incstack = 0
  6335                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6336  1155  01F7               	clrf	___awdiv@sign
  6337  1156  1FF2               	btfss	___awdiv@divisor+1,7
  6338  1157  295F               	goto	l4031
  6339  1158  09F1               	comf	___awdiv@divisor,f
  6340  1159  09F2               	comf	___awdiv@divisor+1,f
  6341  115A  0AF1               	incf	___awdiv@divisor,f
  6342  115B  1903               	skipnz
  6343  115C  0AF2               	incf	___awdiv@divisor+1,f
  6344  115D  01F7               	clrf	___awdiv@sign
  6345  115E  0AF7               	incf	___awdiv@sign,f
  6346  115F                     l4031:	
  6347  115F  1FF4               	btfss	___awdiv@dividend+1,7
  6348  1160  296A               	goto	l4037
  6349  1161  09F3               	comf	___awdiv@dividend,f
  6350  1162  09F4               	comf	___awdiv@dividend+1,f
  6351  1163  0AF3               	incf	___awdiv@dividend,f
  6352  1164  1903               	skipnz
  6353  1165  0AF4               	incf	___awdiv@dividend+1,f
  6354  1166  3001               	movlw	1
  6355  1167  00F5               	movwf	??___awdiv
  6356  1168  0875               	movf	??___awdiv,w
  6357  1169  06F7               	xorwf	___awdiv@sign,f
  6358  116A                     l4037:	
  6359  116A  01F8               	clrf	___awdiv@quotient
  6360  116B  01F9               	clrf	___awdiv@quotient+1
  6361  116C  0871               	movf	___awdiv@divisor,w
  6362  116D  0472               	iorwf	___awdiv@divisor+1,w
  6363  116E  1903               	btfsc	3,2
  6364  116F  2999               	goto	l4059
  6365  1170  01F6               	clrf	___awdiv@counter
  6366  1171  0AF6               	incf	___awdiv@counter,f
  6367  1172                     l4047:	
  6368  1172  1BF2               	btfsc	___awdiv@divisor+1,7
  6369  1173  297E               	goto	l4049
  6370  1174  3001               	movlw	1
  6371  1175                     u3035:	
  6372  1175  35F1               	lslf	___awdiv@divisor,f
  6373  1176  0DF2               	rlf	___awdiv@divisor+1,f
  6374  1177  0B89               	decfsz	9,f
  6375  1178  2975               	goto	u3035
  6376  1179  3001               	movlw	1
  6377  117A  00F5               	movwf	??___awdiv
  6378  117B  0875               	movf	??___awdiv,w
  6379  117C  07F6               	addwf	___awdiv@counter,f
  6380  117D  2972               	goto	l4047
  6381  117E                     l4049:	
  6382  117E  3001               	movlw	1
  6383  117F                     u3055:	
  6384  117F  35F8               	lslf	___awdiv@quotient,f
  6385  1180  0DF9               	rlf	___awdiv@quotient+1,f
  6386  1181  0B89               	decfsz	9,f
  6387  1182  297F               	goto	u3055
  6388  1183  0872               	movf	___awdiv@divisor+1,w
  6389  1184  0274               	subwf	___awdiv@dividend+1,w
  6390  1185  1D03               	skipz
  6391  1186  2989               	goto	u3065
  6392  1187  0871               	movf	___awdiv@divisor,w
  6393  1188  0273               	subwf	___awdiv@dividend,w
  6394  1189                     u3065:	
  6395  1189  1C03               	skipc
  6396  118A  2990               	goto	l4055
  6397  118B  0871               	movf	___awdiv@divisor,w
  6398  118C  02F3               	subwf	___awdiv@dividend,f
  6399  118D  0872               	movf	___awdiv@divisor+1,w
  6400  118E  3BF4               	subwfb	___awdiv@dividend+1,f
  6401  118F  1478               	bsf	___awdiv@quotient,0
  6402  1190                     l4055:	
  6403  1190  3001               	movlw	1
  6404  1191                     u3075:	
  6405  1191  36F2               	lsrf	___awdiv@divisor+1,f
  6406  1192  0CF1               	rrf	___awdiv@divisor,f
  6407  1193  0B89               	decfsz	9,f
  6408  1194  2991               	goto	u3075
  6409  1195  3001               	movlw	1
  6410  1196  02F6               	subwf	___awdiv@counter,f
  6411  1197  1D03               	btfss	3,2
  6412  1198  297E               	goto	l4049
  6413  1199                     l4059:	
  6414  1199  0877               	movf	___awdiv@sign,w
  6415  119A  1903               	btfsc	3,2
  6416  119B  29A1               	goto	l4063
  6417  119C  09F8               	comf	___awdiv@quotient,f
  6418  119D  09F9               	comf	___awdiv@quotient+1,f
  6419  119E  0AF8               	incf	___awdiv@quotient,f
  6420  119F  1903               	skipnz
  6421  11A0  0AF9               	incf	___awdiv@quotient+1,f
  6422  11A1                     l4063:	
  6423  11A1  0879               	movf	___awdiv@quotient+1,w
  6424  11A2  00F2               	movwf	?___awdiv+1
  6425  11A3  0878               	movf	___awdiv@quotient,w
  6426  11A4  00F1               	movwf	?___awdiv
  6427  11A5  0008               	return
  6428  11A6                     __end_of___awdiv:	
  6429                           
  6430                           	psect	text10
  6431  0AD8                     __ptext10:	
  6432 ;; *************** function _pid_pwm1_idrv_run *****************
  6433 ;; Defined at:
  6434 ;;		line 333 in file "src/api/sample.c"
  6435 ;; Parameters:    Size  Location     Type
  6436 ;;		None
  6437 ;; Auto vars:     Size  Location     Type
  6438 ;;  t32             4   26[BANK0 ] long 
  6439 ;; Return value:  Size  Location     Type
  6440 ;;                  1    wreg      void 
  6441 ;; Registers used:
  6442 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6443 ;; Tracked objects:
  6444 ;;		On entry : 0/0
  6445 ;;		On exit  : 0/0
  6446 ;;		Unchanged: 0/0
  6447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6449 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6450 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6451 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6452 ;;Total ram usage:       12 bytes
  6453 ;; Hardware stack levels used:    1
  6454 ;; Hardware stack levels required when called:    3
  6455 ;; This function calls:
  6456 ;;		___aldiv
  6457 ;;		___lmul
  6458 ;;		_set_idrv_pwm1_duty
  6459 ;; This function is called by:
  6460 ;;		_main
  6461 ;; This function uses a non-reentrant model
  6462 ;;
  6463                           
  6464                           
  6465                           ;psect for function _pid_pwm1_idrv_run
  6466  0AD8                     _pid_pwm1_idrv_run:	
  6467                           
  6468                           ;sample.c: 337: int32_t t32;;sample.c: 338: t32=((int32_t)resRs-(int32_t)resRc);
  6469                           
  6470                           ;incstack = 0
  6471                           ; Regs used in _pid_pwm1_idrv_run: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6472  0AD8  0020               	movlb	0	; select bank0
  6473  0AD9  086E               	movf	_resRc,w
  6474  0ADA  00B2               	movwf	??_pid_pwm1_idrv_run
  6475  0ADB  086F               	movf	_resRc+1,w
  6476  0ADC  00B3               	movwf	??_pid_pwm1_idrv_run+1
  6477  0ADD  01B4               	clrf	??_pid_pwm1_idrv_run+2
  6478  0ADE  01B5               	clrf	??_pid_pwm1_idrv_run+3
  6479  0ADF  09B2               	comf	??_pid_pwm1_idrv_run,f
  6480  0AE0  09B3               	comf	??_pid_pwm1_idrv_run+1,f
  6481  0AE1  09B4               	comf	??_pid_pwm1_idrv_run+2,f
  6482  0AE2  09B5               	comf	??_pid_pwm1_idrv_run+3,f
  6483  0AE3  0AB2               	incf	??_pid_pwm1_idrv_run,f
  6484  0AE4  1903               	skipnz
  6485  0AE5  0AB3               	incf	??_pid_pwm1_idrv_run+1,f
  6486  0AE6  1903               	skipnz
  6487  0AE7  0AB4               	incf	??_pid_pwm1_idrv_run+2,f
  6488  0AE8  1903               	skipnz
  6489  0AE9  0AB5               	incf	??_pid_pwm1_idrv_run+3,f
  6490  0AEA  086C               	movf	_resRs,w
  6491  0AEB  00B6               	movwf	??_pid_pwm1_idrv_run+4
  6492  0AEC  086D               	movf	_resRs+1,w
  6493  0AED  00B7               	movwf	??_pid_pwm1_idrv_run+5
  6494  0AEE  01B8               	clrf	??_pid_pwm1_idrv_run+6
  6495  0AEF  01B9               	clrf	??_pid_pwm1_idrv_run+7
  6496  0AF0  0836               	movf	??_pid_pwm1_idrv_run+4,w
  6497  0AF1  07B2               	addwf	??_pid_pwm1_idrv_run,f
  6498  0AF2  0837               	movf	??_pid_pwm1_idrv_run+5,w
  6499  0AF3  3DB3               	addwfc	??_pid_pwm1_idrv_run+1,f
  6500  0AF4  0838               	movf	??_pid_pwm1_idrv_run+6,w
  6501  0AF5  3DB4               	addwfc	??_pid_pwm1_idrv_run+2,f
  6502  0AF6  0839               	movf	??_pid_pwm1_idrv_run+7,w
  6503  0AF7  3DB5               	addwfc	??_pid_pwm1_idrv_run+3,f
  6504  0AF8  0835               	movf	??_pid_pwm1_idrv_run+3,w
  6505  0AF9  00BD               	movwf	pid_pwm1_idrv_run@t32+3
  6506  0AFA  0834               	movf	??_pid_pwm1_idrv_run+2,w
  6507  0AFB  00BC               	movwf	pid_pwm1_idrv_run@t32+2
  6508  0AFC  0833               	movf	??_pid_pwm1_idrv_run+1,w
  6509  0AFD  00BB               	movwf	pid_pwm1_idrv_run@t32+1
  6510  0AFE  0832               	movf	??_pid_pwm1_idrv_run,w
  6511  0AFF  00BA               	movwf	pid_pwm1_idrv_run@t32
  6512                           
  6513                           ;sample.c: 339: t32=2000-t32;
  6514  0B00  30D0               	movlw	208
  6515  0B01  00B2               	movwf	??_pid_pwm1_idrv_run
  6516  0B02  3007               	movlw	7
  6517  0B03  00B3               	movwf	??_pid_pwm1_idrv_run+1
  6518  0B04  3000               	movlw	0
  6519  0B05  00B4               	movwf	??_pid_pwm1_idrv_run+2
  6520  0B06  3000               	movlw	0
  6521  0B07  00B5               	movwf	??_pid_pwm1_idrv_run+3
  6522  0B08  093A               	comf	pid_pwm1_idrv_run@t32,w
  6523  0B09  00B6               	movwf	??_pid_pwm1_idrv_run+4
  6524  0B0A  093B               	comf	pid_pwm1_idrv_run@t32+1,w
  6525  0B0B  00B7               	movwf	??_pid_pwm1_idrv_run+5
  6526  0B0C  093C               	comf	pid_pwm1_idrv_run@t32+2,w
  6527  0B0D  00B8               	movwf	??_pid_pwm1_idrv_run+6
  6528  0B0E  093D               	comf	pid_pwm1_idrv_run@t32+3,w
  6529  0B0F  00B9               	movwf	??_pid_pwm1_idrv_run+7
  6530  0B10  0AB6               	incf	??_pid_pwm1_idrv_run+4,f
  6531  0B11  1903               	skipnz
  6532  0B12  0AB7               	incf	??_pid_pwm1_idrv_run+5,f
  6533  0B13  1903               	skipnz
  6534  0B14  0AB8               	incf	??_pid_pwm1_idrv_run+6,f
  6535  0B15  1903               	skipnz
  6536  0B16  0AB9               	incf	??_pid_pwm1_idrv_run+7,f
  6537  0B17  0836               	movf	??_pid_pwm1_idrv_run+4,w
  6538  0B18  07B2               	addwf	??_pid_pwm1_idrv_run,f
  6539  0B19  0837               	movf	??_pid_pwm1_idrv_run+5,w
  6540  0B1A  3DB3               	addwfc	??_pid_pwm1_idrv_run+1,f
  6541  0B1B  0838               	movf	??_pid_pwm1_idrv_run+6,w
  6542  0B1C  3DB4               	addwfc	??_pid_pwm1_idrv_run+2,f
  6543  0B1D  0839               	movf	??_pid_pwm1_idrv_run+7,w
  6544  0B1E  3DB5               	addwfc	??_pid_pwm1_idrv_run+3,f
  6545  0B1F  0835               	movf	??_pid_pwm1_idrv_run+3,w
  6546  0B20  00BD               	movwf	pid_pwm1_idrv_run@t32+3
  6547  0B21  0834               	movf	??_pid_pwm1_idrv_run+2,w
  6548  0B22  00BC               	movwf	pid_pwm1_idrv_run@t32+2
  6549  0B23  0833               	movf	??_pid_pwm1_idrv_run+1,w
  6550  0B24  00BB               	movwf	pid_pwm1_idrv_run@t32+1
  6551  0B25  0832               	movf	??_pid_pwm1_idrv_run,w
  6552  0B26  00BA               	movwf	pid_pwm1_idrv_run@t32
  6553                           
  6554                           ;sample.c: 341: err[2]=err[1];
  6555  0B27  3004               	movlw	4
  6556  0B28  3EA0               	addlw	(low (_err| 0))& (0+255)
  6557  0B29  0086               	movwf	6
  6558  0B2A  0187               	clrf	7
  6559  0B2B  3F40               	moviw [0]fsr1
  6560  0B2C  0021               	movlb	1	; select bank1
  6561  0B2D  00A8               	movwf	(_err^(0+128)+8)
  6562  0B2E  3F41               	moviw [1]fsr1
  6563  0B2F  00A9               	movwf	((_err+1)^(0+128)+8)
  6564  0B30  3F42               	moviw [2]fsr1
  6565  0B31  00AA               	movwf	((_err+2)^(0+128)+8)
  6566  0B32  3F43               	moviw [3]fsr1
  6567  0B33  00AB               	movwf	((_err+3)^(0+128)+8)
  6568                           
  6569                           ;sample.c: 342: err[1]=err[0];
  6570  0B34  0823               	movf	(_err+3)^(0+128),w
  6571  0B35  00A7               	movwf	((_err+3)^(0+128)+4)
  6572  0B36  0822               	movf	(_err+2)^(0+128),w
  6573  0B37  00A6               	movwf	((_err+2)^(0+128)+4)
  6574  0B38  0821               	movf	(_err+1)^(0+128),w
  6575  0B39  00A5               	movwf	((_err+1)^(0+128)+4)
  6576  0B3A  0820               	movf	_err^(0+128),w
  6577  0B3B  00A4               	movwf	(_err^(0+128)+4)
  6578                           
  6579                           ;sample.c: 343: err[0]=t32;
  6580  0B3C  0020               	movlb	0	; select bank0
  6581  0B3D  083D               	movf	pid_pwm1_idrv_run@t32+3,w
  6582  0B3E  0021               	movlb	1	; select bank1
  6583  0B3F  00A3               	movwf	(_err+3)^(0+128)
  6584  0B40  0020               	movlb	0	; select bank0
  6585  0B41  083C               	movf	pid_pwm1_idrv_run@t32+2,w
  6586  0B42  0021               	movlb	1	; select bank1
  6587  0B43  00A2               	movwf	(_err+2)^(0+128)
  6588  0B44  0020               	movlb	0	; select bank0
  6589  0B45  083B               	movf	pid_pwm1_idrv_run@t32+1,w
  6590  0B46  0021               	movlb	1	; select bank1
  6591  0B47  00A1               	movwf	(_err+1)^(0+128)
  6592  0B48  0020               	movlb	0	; select bank0
  6593  0B49  083A               	movf	pid_pwm1_idrv_run@t32,w
  6594  0B4A  0021               	movlb	1	; select bank1
  6595  0B4B  00A0               	movwf	_err^(0+128)
  6596                           
  6597                           ;sample.c: 346: x0=(err[0]-err[1])*PidKp;
  6598  0B4C  0820               	movf	_err^(0+128),w
  6599  0B4D  0020               	movlb	0	; select bank0
  6600  0B4E  00B2               	movwf	??_pid_pwm1_idrv_run
  6601  0B4F  0021               	movlb	1	; select bank1
  6602  0B50  0821               	movf	(_err+1)^(0+128),w
  6603  0B51  0020               	movlb	0	; select bank0
  6604  0B52  00B3               	movwf	??_pid_pwm1_idrv_run+1
  6605  0B53  0021               	movlb	1	; select bank1
  6606  0B54  0822               	movf	(_err+2)^(0+128),w
  6607  0B55  0020               	movlb	0	; select bank0
  6608  0B56  00B4               	movwf	??_pid_pwm1_idrv_run+2
  6609  0B57  0021               	movlb	1	; select bank1
  6610  0B58  0823               	movf	(_err+3)^(0+128),w
  6611  0B59  0020               	movlb	0	; select bank0
  6612  0B5A  00B5               	movwf	??_pid_pwm1_idrv_run+3
  6613  0B5B  0021               	movlb	1	; select bank1
  6614  0B5C  0924               	comf	(_err^(0+128)+4),w
  6615  0B5D  0020               	movlb	0	; select bank0
  6616  0B5E  00B6               	movwf	??_pid_pwm1_idrv_run+4
  6617  0B5F  0021               	movlb	1	; select bank1
  6618  0B60  0925               	comf	((_err+1)^(0+128)+4),w
  6619  0B61  0020               	movlb	0	; select bank0
  6620  0B62  00B7               	movwf	??_pid_pwm1_idrv_run+5
  6621  0B63  0021               	movlb	1	; select bank1
  6622  0B64  0926               	comf	((_err+2)^(0+128)+4),w
  6623  0B65  0020               	movlb	0	; select bank0
  6624  0B66  00B8               	movwf	??_pid_pwm1_idrv_run+6
  6625  0B67  0021               	movlb	1	; select bank1
  6626  0B68  0927               	comf	((_err+3)^(0+128)+4),w
  6627  0B69  0020               	movlb	0	; select bank0
  6628  0B6A  00B9               	movwf	??_pid_pwm1_idrv_run+7
  6629  0B6B  0AB6               	incf	??_pid_pwm1_idrv_run+4,f
  6630  0B6C  1903               	skipnz
  6631  0B6D  0AB7               	incf	??_pid_pwm1_idrv_run+5,f
  6632  0B6E  1903               	skipnz
  6633  0B6F  0AB8               	incf	??_pid_pwm1_idrv_run+6,f
  6634  0B70  1903               	skipnz
  6635  0B71  0AB9               	incf	??_pid_pwm1_idrv_run+7,f
  6636  0B72  0836               	movf	??_pid_pwm1_idrv_run+4,w
  6637  0B73  07B2               	addwf	??_pid_pwm1_idrv_run,f
  6638  0B74  0837               	movf	??_pid_pwm1_idrv_run+5,w
  6639  0B75  3DB3               	addwfc	??_pid_pwm1_idrv_run+1,f
  6640  0B76  0838               	movf	??_pid_pwm1_idrv_run+6,w
  6641  0B77  3DB4               	addwfc	??_pid_pwm1_idrv_run+2,f
  6642  0B78  0839               	movf	??_pid_pwm1_idrv_run+7,w
  6643  0B79  3DB5               	addwfc	??_pid_pwm1_idrv_run+3,f
  6644  0B7A  0835               	movf	??_pid_pwm1_idrv_run+3,w
  6645  0B7B  00F4               	movwf	___lmul@multiplier+3
  6646  0B7C  0834               	movf	??_pid_pwm1_idrv_run+2,w
  6647  0B7D  00F3               	movwf	___lmul@multiplier+2
  6648  0B7E  0833               	movf	??_pid_pwm1_idrv_run+1,w
  6649  0B7F  00F2               	movwf	___lmul@multiplier+1
  6650  0B80  0832               	movf	??_pid_pwm1_idrv_run,w
  6651  0B81  00F1               	movwf	___lmul@multiplier
  6652  0B82  0021               	movlb	1	; select bank1
  6653  0B83  084C               	movf	_PidKp^(0+128),w
  6654  0B84  00F5               	movwf	___lmul@multiplicand
  6655  0B85  084D               	movf	(_PidKp+1)^(0+128),w
  6656  0B86  00F6               	movwf	___lmul@multiplicand+1
  6657  0B87  01F7               	clrf	___lmul@multiplicand+2
  6658  0B88  01F8               	clrf	___lmul@multiplicand+3
  6659  0B89  319E  2664  318A   	fcall	___lmul
  6660  0B8C  0874               	movf	?___lmul+3,w
  6661  0B8D  0020               	movlb	0	; select bank0
  6662  0B8E  00CE               	movwf	_x0+3
  6663  0B8F  0873               	movf	?___lmul+2,w
  6664  0B90  00CD               	movwf	_x0+2
  6665  0B91  0872               	movf	?___lmul+1,w
  6666  0B92  00CC               	movwf	_x0+1
  6667  0B93  0871               	movf	?___lmul,w
  6668  0B94  00CB               	movwf	_x0
  6669                           
  6670                           ;sample.c: 347: x1=PidKp*err[0]/PidTi;
  6671  0B95  0021               	movlb	1	; select bank1
  6672  0B96  084A               	movf	_PidTi^(0+128),w
  6673  0B97  0020               	movlb	0	; select bank0
  6674  0B98  00A4               	movwf	___aldiv@divisor
  6675  0B99  0021               	movlb	1	; select bank1
  6676  0B9A  084B               	movf	(_PidTi+1)^(0+128),w
  6677  0B9B  0020               	movlb	0	; select bank0
  6678  0B9C  00A5               	movwf	___aldiv@divisor+1
  6679  0B9D  01A6               	clrf	___aldiv@divisor+2
  6680  0B9E  01A7               	clrf	___aldiv@divisor+3
  6681  0B9F  0021               	movlb	1	; select bank1
  6682  0BA0  084C               	movf	_PidKp^(0+128),w
  6683  0BA1  00F1               	movwf	___lmul@multiplier
  6684  0BA2  084D               	movf	(_PidKp+1)^(0+128),w
  6685  0BA3  00F2               	movwf	___lmul@multiplier+1
  6686  0BA4  01F3               	clrf	___lmul@multiplier+2
  6687  0BA5  01F4               	clrf	___lmul@multiplier+3
  6688  0BA6  0823               	movf	(_err+3)^(0+128),w
  6689  0BA7  00F8               	movwf	___lmul@multiplicand+3
  6690  0BA8  0822               	movf	(_err+2)^(0+128),w
  6691  0BA9  00F7               	movwf	___lmul@multiplicand+2
  6692  0BAA  0821               	movf	(_err+1)^(0+128),w
  6693  0BAB  00F6               	movwf	___lmul@multiplicand+1
  6694  0BAC  0820               	movf	_err^(0+128),w
  6695  0BAD  00F5               	movwf	___lmul@multiplicand
  6696  0BAE  319E  2664  318A   	fcall	___lmul
  6697  0BB1  0874               	movf	?___lmul+3,w
  6698  0BB2  0020               	movlb	0	; select bank0
  6699  0BB3  00AB               	movwf	___aldiv@dividend+3
  6700  0BB4  0873               	movf	?___lmul+2,w
  6701  0BB5  00AA               	movwf	___aldiv@dividend+2
  6702  0BB6  0872               	movf	?___lmul+1,w
  6703  0BB7  00A9               	movwf	___aldiv@dividend+1
  6704  0BB8  0871               	movf	?___lmul,w
  6705  0BB9  00A8               	movwf	___aldiv@dividend
  6706  0BBA  3193  237F  318A   	fcall	___aldiv
  6707  0BBD  0020               	movlb	0	; select bank0
  6708  0BBE  0827               	movf	?___aldiv+3,w
  6709  0BBF  0021               	movlb	1	; select bank1
  6710  0BC0  00BF               	movwf	(_x1+3)^(0+128)
  6711  0BC1  0020               	movlb	0	; select bank0
  6712  0BC2  0826               	movf	?___aldiv+2,w
  6713  0BC3  0021               	movlb	1	; select bank1
  6714  0BC4  00BE               	movwf	(_x1+2)^(0+128)
  6715  0BC5  0020               	movlb	0	; select bank0
  6716  0BC6  0825               	movf	?___aldiv+1,w
  6717  0BC7  0021               	movlb	1	; select bank1
  6718  0BC8  00BD               	movwf	(_x1+1)^(0+128)
  6719  0BC9  0020               	movlb	0	; select bank0
  6720  0BCA  0824               	movf	?___aldiv,w
  6721  0BCB  0021               	movlb	1	; select bank1
  6722  0BCC  00BC               	movwf	_x1^(0+128)
  6723                           
  6724                           ;sample.c: 350: t32=x0+x1;
  6725  0BCD  0020               	movlb	0	; select bank0
  6726  0BCE  084B               	movf	_x0,w
  6727  0BCF  0021               	movlb	1	; select bank1
  6728  0BD0  073C               	addwf	_x1^(0+128),w
  6729  0BD1  0020               	movlb	0	; select bank0
  6730  0BD2  00B2               	movwf	??_pid_pwm1_idrv_run
  6731  0BD3  084C               	movf	_x0+1,w
  6732  0BD4  0021               	movlb	1	; select bank1
  6733  0BD5  3D3D               	addwfc	(_x1+1)^(0+128),w
  6734  0BD6  0020               	movlb	0	; select bank0
  6735  0BD7  00B3               	movwf	??_pid_pwm1_idrv_run+1
  6736  0BD8  084D               	movf	_x0+2,w
  6737  0BD9  0021               	movlb	1	; select bank1
  6738  0BDA  3D3E               	addwfc	(_x1+2)^(0+128),w
  6739  0BDB  0020               	movlb	0	; select bank0
  6740  0BDC  00B4               	movwf	??_pid_pwm1_idrv_run+2
  6741  0BDD  084E               	movf	_x0+3,w
  6742  0BDE  0021               	movlb	1	; select bank1
  6743  0BDF  3D3F               	addwfc	(_x1+3)^(0+128),w
  6744  0BE0  0020               	movlb	0	; select bank0
  6745  0BE1  00B5               	movwf	??_pid_pwm1_idrv_run+3
  6746  0BE2  0835               	movf	??_pid_pwm1_idrv_run+3,w
  6747  0BE3  00BD               	movwf	pid_pwm1_idrv_run@t32+3
  6748  0BE4  0834               	movf	??_pid_pwm1_idrv_run+2,w
  6749  0BE5  00BC               	movwf	pid_pwm1_idrv_run@t32+2
  6750  0BE6  0833               	movf	??_pid_pwm1_idrv_run+1,w
  6751  0BE7  00BB               	movwf	pid_pwm1_idrv_run@t32+1
  6752  0BE8  0832               	movf	??_pid_pwm1_idrv_run,w
  6753  0BE9  00BA               	movwf	pid_pwm1_idrv_run@t32
  6754                           
  6755                           ;sample.c: 351: t32/=10000;
  6756  0BEA  3000               	movlw	0
  6757  0BEB  00A7               	movwf	___aldiv@divisor+3
  6758  0BEC  3000               	movlw	0
  6759  0BED  00A6               	movwf	___aldiv@divisor+2
  6760  0BEE  3027               	movlw	39
  6761  0BEF  00A5               	movwf	___aldiv@divisor+1
  6762  0BF0  3010               	movlw	16
  6763  0BF1  00A4               	movwf	___aldiv@divisor
  6764  0BF2  083D               	movf	pid_pwm1_idrv_run@t32+3,w
  6765  0BF3  00AB               	movwf	___aldiv@dividend+3
  6766  0BF4  083C               	movf	pid_pwm1_idrv_run@t32+2,w
  6767  0BF5  00AA               	movwf	___aldiv@dividend+2
  6768  0BF6  083B               	movf	pid_pwm1_idrv_run@t32+1,w
  6769  0BF7  00A9               	movwf	___aldiv@dividend+1
  6770  0BF8  083A               	movf	pid_pwm1_idrv_run@t32,w
  6771  0BF9  00A8               	movwf	___aldiv@dividend
  6772  0BFA  3193  237F  318A   	fcall	___aldiv
  6773  0BFD  0020               	movlb	0	; select bank0
  6774  0BFE  0827               	movf	?___aldiv+3,w
  6775  0BFF  00BD               	movwf	pid_pwm1_idrv_run@t32+3
  6776  0C00  0826               	movf	?___aldiv+2,w
  6777  0C01  00BC               	movwf	pid_pwm1_idrv_run@t32+2
  6778  0C02  0825               	movf	?___aldiv+1,w
  6779  0C03  00BB               	movwf	pid_pwm1_idrv_run@t32+1
  6780  0C04  0824               	movf	?___aldiv,w
  6781  0C05  00BA               	movwf	pid_pwm1_idrv_run@t32
  6782                           
  6783                           ;sample.c: 352: t32+=pidU;
  6784  0C06  0021               	movlb	1	; select bank1
  6785  0C07  0850               	movf	_pidU^(0+128),w
  6786  0C08  0020               	movlb	0	; select bank0
  6787  0C09  07BA               	addwf	pid_pwm1_idrv_run@t32,f
  6788  0C0A  0021               	movlb	1	; select bank1
  6789  0C0B  0851               	movf	(_pidU+1)^(0+128),w
  6790  0C0C  0020               	movlb	0	; select bank0
  6791  0C0D  3DBB               	addwfc	pid_pwm1_idrv_run@t32+1,f
  6792  0C0E  3000               	movlw	0
  6793  0C0F  3DBC               	addwfc	pid_pwm1_idrv_run@t32+2,f
  6794  0C10  3DBD               	addwfc	pid_pwm1_idrv_run@t32+3,f
  6795                           
  6796                           ;sample.c: 354: __nop();
  6797  0C11  0000               	nop
  6798                           
  6799                           ;sample.c: 355: if(t32>1200)t32=1200;
  6800  0C12  0020               	movlb	0	; select bank0
  6801  0C13  1BBD               	btfsc	pid_pwm1_idrv_run@t32+3,7
  6802  0C14  2C29               	goto	l5109
  6803  0C15  083D               	movf	pid_pwm1_idrv_run@t32+3,w
  6804  0C16  1D03               	btfss	3,2
  6805  0C17  2C21               	goto	l5107
  6806  0C18  083C               	movf	pid_pwm1_idrv_run@t32+2,w
  6807  0C19  1D03               	btfss	3,2
  6808  0C1A  2C21               	goto	l5107
  6809  0C1B  30B1               	movlw	177
  6810  0C1C  023A               	subwf	pid_pwm1_idrv_run@t32,w
  6811  0C1D  3004               	movlw	4
  6812  0C1E  3B3B               	subwfb	pid_pwm1_idrv_run@t32+1,w
  6813  0C1F  1C03               	btfss	3,0
  6814  0C20  2C29               	goto	l5109
  6815  0C21                     l5107:	
  6816  0C21  3000               	movlw	0
  6817  0C22  00BD               	movwf	pid_pwm1_idrv_run@t32+3
  6818  0C23  3000               	movlw	0
  6819  0C24  00BC               	movwf	pid_pwm1_idrv_run@t32+2
  6820  0C25  3004               	movlw	4
  6821  0C26  00BB               	movwf	pid_pwm1_idrv_run@t32+1
  6822  0C27  30B0               	movlw	176
  6823  0C28  00BA               	movwf	pid_pwm1_idrv_run@t32
  6824  0C29                     l5109:	
  6825                           
  6826                           ;sample.c: 356: if(t32<5)t32=5;
  6827  0C29  1BBD               	btfsc	pid_pwm1_idrv_run@t32+3,7
  6828  0C2A  2C38               	goto	l5111
  6829  0C2B  083D               	movf	pid_pwm1_idrv_run@t32+3,w
  6830  0C2C  1D03               	btfss	3,2
  6831  0C2D  2C40               	goto	l657
  6832  0C2E  083C               	movf	pid_pwm1_idrv_run@t32+2,w
  6833  0C2F  1D03               	btfss	3,2
  6834  0C30  2C40               	goto	l657
  6835  0C31  083B               	movf	pid_pwm1_idrv_run@t32+1,w
  6836  0C32  1D03               	btfss	3,2
  6837  0C33  2C40               	goto	l657
  6838  0C34  3005               	movlw	5
  6839  0C35  023A               	subwf	pid_pwm1_idrv_run@t32,w
  6840  0C36  1803               	btfsc	3,0
  6841  0C37  2C40               	goto	l657
  6842  0C38                     l5111:	
  6843  0C38  3000               	movlw	0
  6844  0C39  00BD               	movwf	pid_pwm1_idrv_run@t32+3
  6845  0C3A  3000               	movlw	0
  6846  0C3B  00BC               	movwf	pid_pwm1_idrv_run@t32+2
  6847  0C3C  3000               	movlw	0
  6848  0C3D  00BB               	movwf	pid_pwm1_idrv_run@t32+1
  6849  0C3E  3005               	movlw	5
  6850  0C3F  00BA               	movwf	pid_pwm1_idrv_run@t32
  6851  0C40                     l657:	
  6852                           
  6853                           ;sample.c: 357: pidU=(uint16_t)t32;
  6854  0C40  083B               	movf	pid_pwm1_idrv_run@t32+1,w
  6855  0C41  0021               	movlb	1	; select bank1
  6856  0C42  00D1               	movwf	(_pidU+1)^(0+128)
  6857  0C43  0020               	movlb	0	; select bank0
  6858  0C44  083A               	movf	pid_pwm1_idrv_run@t32,w
  6859  0C45  0021               	movlb	1	; select bank1
  6860  0C46  00D0               	movwf	_pidU^(0+128)
  6861                           
  6862                           ;sample.c: 359: set_idrv_pwm1_duty(pidU);
  6863  0C47  0851               	movf	(_pidU+1)^(0+128),w
  6864  0C48  00F8               	movwf	set_idrv_pwm1_duty@duty+1
  6865  0C49  0850               	movf	_pidU^(0+128),w
  6866  0C4A  00F7               	movwf	set_idrv_pwm1_duty@duty
  6867  0C4B  319D  25DE         	fcall	_set_idrv_pwm1_duty
  6868  0C4D  0008               	return
  6869  0C4E                     __end_of_pid_pwm1_idrv_run:	
  6870                           
  6871                           	psect	text11
  6872  1DDE                     __ptext11:	
  6873 ;; *************** function _set_idrv_pwm1_duty *****************
  6874 ;; Defined at:
  6875 ;;		line 82 in file "src/api/sample.c"
  6876 ;; Parameters:    Size  Location     Type
  6877 ;;  duty            2    7[COMMON] unsigned int 
  6878 ;; Auto vars:     Size  Location     Type
  6879 ;;  t16             2    9[COMMON] unsigned int 
  6880 ;; Return value:  Size  Location     Type
  6881 ;;                  1    wreg      void 
  6882 ;; Registers used:
  6883 ;;		wreg, status,2, pclath, cstack
  6884 ;; Tracked objects:
  6885 ;;		On entry : 0/0
  6886 ;;		On exit  : 0/0
  6887 ;;		Unchanged: 0/0
  6888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6889 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6890 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6892 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6893 ;;Total ram usage:        4 bytes
  6894 ;; Hardware stack levels used:    1
  6895 ;; Hardware stack levels required when called:    2
  6896 ;; This function calls:
  6897 ;;		_get_idrv_pwm1_duty
  6898 ;; This function is called by:
  6899 ;;		_pid_pwm1_idrv_run
  6900 ;; This function uses a non-reentrant model
  6901 ;;
  6902                           
  6903                           
  6904                           ;psect for function _set_idrv_pwm1_duty
  6905  1DDE                     _set_idrv_pwm1_duty:	
  6906                           
  6907                           ;sample.c: 85: uint16_t t16;;sample.c: 86: pwm1DutyForIdrv=duty;
  6908                           
  6909                           ;incstack = 0
  6910                           ; Regs used in _set_idrv_pwm1_duty: [wreg+status,2+pclath+cstack]
  6911  1DDE  0878               	movf	set_idrv_pwm1_duty@duty+1,w
  6912  1DDF  0021               	movlb	1	; select bank1
  6913  1DE0  00D5               	movwf	(_pwm1DutyForIdrv+1)^(0+128)
  6914  1DE1  0877               	movf	set_idrv_pwm1_duty@duty,w
  6915  1DE2  00D4               	movwf	_pwm1DutyForIdrv^(0+128)
  6916                           
  6917                           ;sample.c: 87: t16=get_idrv_pwm1_duty();
  6918  1DE3  319D  255A  319D   	fcall	_get_idrv_pwm1_duty
  6919  1DE6  0872               	movf	?_get_idrv_pwm1_duty+1,w
  6920  1DE7  00FA               	movwf	set_idrv_pwm1_duty@t16+1
  6921  1DE8  0871               	movf	?_get_idrv_pwm1_duty,w
  6922  1DE9  00F9               	movwf	set_idrv_pwm1_duty@t16
  6923                           
  6924                           ;sample.c: 88: if(t16==duty)return;
  6925  1DEA  0878               	movf	set_idrv_pwm1_duty@duty+1,w
  6926  1DEB  067A               	xorwf	set_idrv_pwm1_duty@t16+1,w
  6927  1DEC  1D03               	skipz
  6928  1DED  2DF0               	goto	u2415
  6929  1DEE  0877               	movf	set_idrv_pwm1_duty@duty,w
  6930  1DEF  0679               	xorwf	set_idrv_pwm1_duty@t16,w
  6931  1DF0                     u2415:	
  6932  1DF0  1903               	btfsc	3,2
  6933  1DF1  0008               	return
  6934                           
  6935                           ;sample.c: 91: PWM1CONbits.EN = 0;
  6936  1DF2  003B               	movlb	27	; select bank27
  6937  1DF3  139B               	bcf	27,7	;volatile
  6938                           
  6939                           ;sample.c: 92: PWM1DCL= (uint8_t)(duty&0xff);
  6940  1DF4  0877               	movf	set_idrv_pwm1_duty@duty,w
  6941  1DF5  0093               	movwf	19	;volatile
  6942                           
  6943                           ;sample.c: 93: PWM1DCH=(uint8_t)(duty>>8);
  6944  1DF6  0878               	movf	set_idrv_pwm1_duty@duty+1,w
  6945  1DF7  0094               	movwf	20	;volatile
  6946                           
  6947                           ;sample.c: 94: PWM1CONbits.EN = 1;
  6948  1DF8  179B               	bsf	27,7	;volatile
  6949  1DF9  0008               	return
  6950  1DFA                     __end_of_set_idrv_pwm1_duty:	
  6951                           
  6952                           	psect	text12
  6953  1D5A                     __ptext12:	
  6954 ;; *************** function _get_idrv_pwm1_duty *****************
  6955 ;; Defined at:
  6956 ;;		line 73 in file "src/api/sample.c"
  6957 ;; Parameters:    Size  Location     Type
  6958 ;;		None
  6959 ;; Auto vars:     Size  Location     Type
  6960 ;;  t16             2    5[COMMON] unsigned int 
  6961 ;; Return value:  Size  Location     Type
  6962 ;;                  2    1[COMMON] unsigned int 
  6963 ;; Registers used:
  6964 ;;		wreg
  6965 ;; Tracked objects:
  6966 ;;		On entry : 0/0
  6967 ;;		On exit  : 0/0
  6968 ;;		Unchanged: 0/0
  6969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6970 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6971 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6972 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6973 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6974 ;;Total ram usage:        6 bytes
  6975 ;; Hardware stack levels used:    1
  6976 ;; Hardware stack levels required when called:    1
  6977 ;; This function calls:
  6978 ;;		Nothing
  6979 ;; This function is called by:
  6980 ;;		_set_idrv_pwm1_duty
  6981 ;; This function uses a non-reentrant model
  6982 ;;
  6983                           
  6984                           
  6985                           ;psect for function _get_idrv_pwm1_duty
  6986  1D5A                     _get_idrv_pwm1_duty:	
  6987                           
  6988                           ;sample.c: 76: uint16_t t16=PWM1DCH;
  6989                           
  6990                           ;incstack = 0
  6991                           ; Regs used in _get_idrv_pwm1_duty: [wreg]
  6992  1D5A  003B               	movlb	27	; select bank27
  6993  1D5B  0814               	movf	20,w	;volatile
  6994  1D5C  00F3               	movwf	??_get_idrv_pwm1_duty
  6995  1D5D  01F4               	clrf	??_get_idrv_pwm1_duty+1
  6996  1D5E  0873               	movf	??_get_idrv_pwm1_duty,w
  6997  1D5F  00F5               	movwf	get_idrv_pwm1_duty@t16
  6998  1D60  0874               	movf	??_get_idrv_pwm1_duty+1,w
  6999  1D61  00F6               	movwf	get_idrv_pwm1_duty@t16+1
  7000                           
  7001                           ;sample.c: 77: t16<<=8;
  7002  1D62  3008               	movlw	8
  7003  1D63                     u2345:	
  7004  1D63  35F5               	lslf	get_idrv_pwm1_duty@t16,f
  7005  1D64  0DF6               	rlf	get_idrv_pwm1_duty@t16+1,f
  7006  1D65  0B89               	decfsz	9,f
  7007  1D66  2D63               	goto	u2345
  7008                           
  7009                           ;sample.c: 78: t16|=PWM1DCL;
  7010  1D67  0813               	movf	19,w	;volatile
  7011  1D68  00F3               	movwf	??_get_idrv_pwm1_duty
  7012  1D69  01F4               	clrf	??_get_idrv_pwm1_duty+1
  7013  1D6A  0873               	movf	??_get_idrv_pwm1_duty,w
  7014  1D6B  04F5               	iorwf	get_idrv_pwm1_duty@t16,f
  7015  1D6C  0874               	movf	??_get_idrv_pwm1_duty+1,w
  7016  1D6D  04F6               	iorwf	get_idrv_pwm1_duty@t16+1,f
  7017                           
  7018                           ;sample.c: 79: return t16;
  7019  1D6E  0876               	movf	get_idrv_pwm1_duty@t16+1,w
  7020  1D6F  00F2               	movwf	?_get_idrv_pwm1_duty+1
  7021  1D70  0875               	movf	get_idrv_pwm1_duty@t16,w
  7022  1D71  00F1               	movwf	?_get_idrv_pwm1_duty
  7023  1D72  0008               	return
  7024  1D73                     __end_of_get_idrv_pwm1_duty:	
  7025                           
  7026                           	psect	text13
  7027  0FAC                     __ptext13:	
  7028 ;; *************** function _modbus_response_process *****************
  7029 ;; Defined at:
  7030 ;;		line 210 in file "src/api/modbus.c"
  7031 ;; Parameters:    Size  Location     Type
  7032 ;;  rbuf            1    wreg     PTR unsigned char 
  7033 ;;		 -> modbusBuf(32), 
  7034 ;;  rlen            2   24[BANK0 ] unsigned int 
  7035 ;; Auto vars:     Size  Location     Type
  7036 ;;  rbuf            1   29[BANK0 ] PTR unsigned char 
  7037 ;;		 -> modbusBuf(32), 
  7038 ;;  pmdbs           1   28[BANK0 ] PTR struct .
  7039 ;;		 -> modbusBuf(32), 
  7040 ;;  resp            1   27[BANK0 ] unsigned char 
  7041 ;; Return value:  Size  Location     Type
  7042 ;;                  1    wreg      void 
  7043 ;; Registers used:
  7044 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7045 ;; Tracked objects:
  7046 ;;		On entry : 0/0
  7047 ;;		On exit  : 0/0
  7048 ;;		Unchanged: 0/0
  7049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7050 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7051 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7052 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7053 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7054 ;;Total ram usage:        6 bytes
  7055 ;; Hardware stack levels used:    1
  7056 ;; Hardware stack levels required when called:    5
  7057 ;; This function calls:
  7058 ;;		_crc_verify
  7059 ;;		_modbus_response_command
  7060 ;;		_modbus_response_illgeal_function
  7061 ;;		_modbus_response_write_mult_register
  7062 ;;		_modbus_response_write_single_register
  7063 ;; This function is called by:
  7064 ;;		_main
  7065 ;; This function uses a non-reentrant model
  7066 ;;
  7067                           
  7068                           
  7069                           ;psect for function _modbus_response_process
  7070  0FAC                     _modbus_response_process:	
  7071                           
  7072                           ;incstack = 0
  7073                           ; Regs used in _modbus_response_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7074                           ;modbus_response_process@rbuf stored from wreg
  7075  0FAC  0020               	movlb	0	; select bank0
  7076  0FAD  00BD               	movwf	modbus_response_process@rbuf
  7077                           
  7078                           ;modbus.c: 211: uint8_t resp=0;
  7079  0FAE  01BB               	clrf	modbus_response_process@resp
  7080                           
  7081                           ;modbus.c: 212: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)rbuf;
  7082  0FAF  083D               	movf	modbus_response_process@rbuf,w
  7083  0FB0  00BA               	movwf	??_modbus_response_process
  7084  0FB1  083A               	movf	??_modbus_response_process,w
  7085  0FB2  00BC               	movwf	modbus_response_process@pmdbs
  7086                           
  7087                           ;modbus.c: 215: if((pmdbs->addr!=sysData.id) && (pmdbs->addr!=0x00))return;
  7088  0FB3  305C               	movlw	92
  7089  0FB4  0086               	movwf	6
  7090  0FB5  3023               	movlw	35
  7091  0FB6  0087               	movwf	7
  7092  0FB7  3142               	addfsr 1,2
  7093  0FB8  083C               	movf	modbus_response_process@pmdbs,w
  7094  0FB9  0084               	movwf	4
  7095  0FBA  3001               	movlw	1	; select bank2/3
  7096  0FBB  0085               	movwf	5
  7097  0FBC  0800               	movf	0,w
  7098  0FBD  0601               	xorwf	1,w
  7099  0FBE  1903               	skipnz
  7100  0FBF  2FC7               	goto	l5229
  7101  0FC0  083C               	movf	modbus_response_process@pmdbs,w
  7102  0FC1  0086               	movwf	6
  7103  0FC2  3001               	movlw	1	; select bank2/3
  7104  0FC3  0087               	movwf	7
  7105  0FC4  0801               	movf	1,w
  7106  0FC5  1D03               	btfss	3,2
  7107  0FC6  0008               	return
  7108  0FC7                     l5229:	
  7109                           
  7110                           ;modbus.c: 216: if(!(crc_verify(rbuf,rlen)))return ;
  7111  0FC7  083D               	movf	modbus_response_process@rbuf,w
  7112  0FC8  00A6               	movwf	crc_verify@message
  7113  0FC9  3001               	movlw	1
  7114  0FCA  00A7               	movwf	crc_verify@message+1
  7115  0FCB  0839               	movf	modbus_response_process@rlen+1,w
  7116  0FCC  00A9               	movwf	crc_verify@n+1
  7117  0FCD  0838               	movf	modbus_response_process@rlen,w
  7118  0FCE  00A8               	movwf	crc_verify@n
  7119  0FCF  3190  202A  318F   	fcall	_crc_verify
  7120  0FD2  3A00               	xorlw	0
  7121  0FD3  1903               	btfsc	3,2
  7122  0FD4  0008               	return
  7123  0FD5  2FEC               	goto	l5243
  7124  0FD6                     l5233:	
  7125                           ;modbus.c: 219: case 0x03:
  7126                           
  7127                           ;modbus.c: 218: switch(pmdbs->func){
  7128                           
  7129                           
  7130                           ;modbus.c: 220: modbus_response_command(rbuf);
  7131  0FD6  0020               	movlb	0	; select bank0
  7132  0FD7  083D               	movf	modbus_response_process@rbuf,w
  7133  0FD8  3196  2668         	fcall	_modbus_response_command
  7134                           
  7135                           ;modbus.c: 221: break;
  7136  0FDA  0008               	return
  7137  0FDB                     l5235:	
  7138                           ;modbus.c: 222: case 0x06:
  7139                           
  7140                           
  7141                           ;modbus.c: 223: case 0x26:;modbus.c: 224: modbus_response_write_single_register(rbuf);
  7142  0FDB  0020               	movlb	0	; select bank0
  7143  0FDC  083D               	movf	modbus_response_process@rbuf,w
  7144  0FDD  318C  244E         	fcall	_modbus_response_write_single_register
  7145                           
  7146                           ;modbus.c: 225: break;
  7147  0FDF  0008               	return
  7148  0FE0                     l5237:	
  7149                           ;modbus.c: 226: case 0x10:
  7150                           
  7151                           
  7152                           ;modbus.c: 227: modbus_response_write_mult_register(rbuf);
  7153  0FE0  0020               	movlb	0	; select bank0
  7154  0FE1  083D               	movf	modbus_response_process@rbuf,w
  7155  0FE2  3193  230D         	fcall	_modbus_response_write_mult_register
  7156                           
  7157                           ;modbus.c: 228: break;
  7158  0FE4  0008               	return
  7159  0FE5                     l5239:	
  7160                           ;modbus.c: 251: default:
  7161                           
  7162                           
  7163                           ;modbus.c: 252: modbus_response_illgeal_function(rbuf,0x01);break;
  7164  0FE5  0020               	movlb	0	; select bank0
  7165  0FE6  01AC               	clrf	modbus_response_illgeal_function@errcode
  7166  0FE7  0AAC               	incf	modbus_response_illgeal_function@errcode,f
  7167  0FE8  083D               	movf	modbus_response_process@rbuf,w
  7168  0FE9  3191  2113         	fcall	_modbus_response_illgeal_function
  7169                           
  7170                           ;modbus.c: 253: }
  7171  0FEB  0008               	return
  7172  0FEC                     l5243:	
  7173  0FEC  0020               	movlb	0	; select bank0
  7174  0FED  0A3C               	incf	modbus_response_process@pmdbs,w
  7175  0FEE  0086               	movwf	6
  7176  0FEF  3001               	movlw	1	; select bank2/3
  7177  0FF0  0087               	movwf	7
  7178  0FF1  0801               	movf	1,w
  7179                           
  7180                           ; Switch size 1, requested type "space"
  7181                           ; Number of cases is 4, Range of values is 3 to 38
  7182                           ; switch strategies available:
  7183                           ; Name         Instructions Cycles
  7184                           ; simple_byte           13     7 (average)
  7185                           ; direct_byte           81     9 (fixed)
  7186                           ; jumptable            263     9 (fixed)
  7187                           ;	Chosen strategy is simple_byte
  7188  0FF2  3A03               	xorlw	3	; case 3
  7189  0FF3  1903               	skipnz
  7190  0FF4  2FD6               	goto	l5233
  7191  0FF5  3A05               	xorlw	5	; case 6
  7192  0FF6  1903               	skipnz
  7193  0FF7  2FDB               	goto	l5235
  7194  0FF8  3A16               	xorlw	22	; case 16
  7195  0FF9  1903               	skipnz
  7196  0FFA  2FE0               	goto	l5237
  7197  0FFB  3A36               	xorlw	54	; case 38
  7198  0FFC  1903               	skipnz
  7199  0FFD  2FDB               	goto	l5235
  7200  0FFE  2FE5               	goto	l5239
  7201  0FFF  0008               	return
  7202  1000                     __end_of_modbus_response_process:	
  7203                           
  7204                           	psect	text14
  7205  0C4E                     __ptext14:	
  7206 ;; *************** function _modbus_response_write_single_register *****************
  7207 ;; Defined at:
  7208 ;;		line 115 in file "src/api/modbus.c"
  7209 ;; Parameters:    Size  Location     Type
  7210 ;;  rbuf            1    wreg     PTR unsigned char 
  7211 ;;		 -> modbusBuf(32), 
  7212 ;; Auto vars:     Size  Location     Type
  7213 ;;  rbuf            1   21[BANK0 ] PTR unsigned char 
  7214 ;;		 -> modbusBuf(32), 
  7215 ;;  startAddr       2   22[BANK0 ] unsigned int 
  7216 ;;  t16             2   17[BANK0 ] unsigned int 
  7217 ;;  pmdbs           1   20[BANK0 ] PTR struct .
  7218 ;;		 -> modbusBuf(32), 
  7219 ;;  i               1   19[BANK0 ] unsigned char 
  7220 ;;  fiSave          1   16[BANK0 ] unsigned char 
  7221 ;; Return value:  Size  Location     Type
  7222 ;;                  1    wreg      void 
  7223 ;; Registers used:
  7224 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7225 ;; Tracked objects:
  7226 ;;		On entry : 0/0
  7227 ;;		On exit  : 0/0
  7228 ;;		Unchanged: 0/0
  7229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7231 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7232 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7233 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7234 ;;Total ram usage:       12 bytes
  7235 ;; Hardware stack levels used:    1
  7236 ;; Hardware stack levels required when called:    4
  7237 ;; This function calls:
  7238 ;;		_crc_append
  7239 ;;		_sys_data_save
  7240 ;;		_uart_send_len
  7241 ;; This function is called by:
  7242 ;;		_modbus_response_process
  7243 ;; This function uses a non-reentrant model
  7244 ;;
  7245                           
  7246                           
  7247                           ;psect for function _modbus_response_write_single_register
  7248  0C4E                     _modbus_response_write_single_register:	
  7249                           
  7250                           ;incstack = 0
  7251                           ; Regs used in _modbus_response_write_single_register: [wreg-fsr1h+status,2+status,0+pcl
      +                          ath+cstack]
  7252                           ;modbus_response_write_single_register@rbuf stored from wreg
  7253  0C4E  0020               	movlb	0	; select bank0
  7254  0C4F  00B5               	movwf	modbus_response_write_single_register@rbuf
  7255                           
  7256                           ;modbus.c: 117: uint16_t startAddr=0;
  7257  0C50  01B6               	clrf	modbus_response_write_single_register@startAddr
  7258  0C51  01B7               	clrf	modbus_response_write_single_register@startAddr+1
  7259                           
  7260                           ;modbus.c: 118: uint16_t t16;;modbus.c: 119: uint8_t fiSave=0,i;
  7261  0C52  01B0               	clrf	modbus_response_write_single_register@fiSave
  7262                           
  7263                           ;modbus.c: 120: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)rbuf;
  7264  0C53  0835               	movf	modbus_response_write_single_register@rbuf,w
  7265  0C54  00AC               	movwf	??_modbus_response_write_single_register
  7266  0C55  082C               	movf	??_modbus_response_write_single_register,w
  7267  0C56  00B4               	movwf	modbus_response_write_single_register@pmdbs
  7268                           
  7269                           ;modbus.c: 121: if(pmdbs->addr!=sysData.id && pmdbs->addr!=0)return;
  7270  0C57  305C               	movlw	92
  7271  0C58  0086               	movwf	6
  7272  0C59  3023               	movlw	35
  7273  0C5A  0087               	movwf	7
  7274  0C5B  3142               	addfsr 1,2
  7275  0C5C  0834               	movf	modbus_response_write_single_register@pmdbs,w
  7276  0C5D  0084               	movwf	4
  7277  0C5E  3001               	movlw	1	; select bank2/3
  7278  0C5F  0085               	movwf	5
  7279  0C60  0800               	movf	0,w
  7280  0C61  0601               	xorwf	1,w
  7281  0C62  1903               	skipnz
  7282  0C63  2C6B               	goto	l4853
  7283  0C64  0834               	movf	modbus_response_write_single_register@pmdbs,w
  7284  0C65  0086               	movwf	6
  7285  0C66  3001               	movlw	1	; select bank2/3
  7286  0C67  0087               	movwf	7
  7287  0C68  0801               	movf	1,w
  7288  0C69  1D03               	btfss	3,2
  7289  0C6A  0008               	return
  7290  0C6B                     l4853:	
  7291                           
  7292                           ;modbus.c: 122: if(sysData.id==253 && pmdbs->addr==0)return;
  7293  0C6B  305C               	movlw	92
  7294  0C6C  0086               	movwf	6
  7295  0C6D  3023               	movlw	35
  7296  0C6E  0087               	movwf	7
  7297  0C6F  3142               	addfsr 1,2
  7298  0C70  30FD               	movlw	253
  7299  0C71  0601               	xorwf	1,w
  7300  0C72  1D03               	btfss	3,2
  7301  0C73  2C7B               	goto	l4859
  7302  0C74  0834               	movf	modbus_response_write_single_register@pmdbs,w
  7303  0C75  0086               	movwf	6
  7304  0C76  3001               	movlw	1	; select bank2/3
  7305  0C77  0087               	movwf	7
  7306  0C78  0801               	movf	1,w
  7307  0C79  1903               	btfsc	3,2
  7308  0C7A  0008               	return
  7309  0C7B                     l4859:	
  7310                           
  7311                           ;modbus.c: 123: startAddr=pmdbs->addr_hi;
  7312  0C7B  0834               	movf	modbus_response_write_single_register@pmdbs,w
  7313  0C7C  3E02               	addlw	2
  7314  0C7D  0086               	movwf	6
  7315  0C7E  3001               	movlw	1	; select bank2/3
  7316  0C7F  0087               	movwf	7
  7317  0C80  0801               	movf	1,w
  7318  0C81  00AC               	movwf	??_modbus_response_write_single_register
  7319  0C82  01AD               	clrf	??_modbus_response_write_single_register+1
  7320  0C83  082C               	movf	??_modbus_response_write_single_register,w
  7321  0C84  00B6               	movwf	modbus_response_write_single_register@startAddr
  7322  0C85  082D               	movf	??_modbus_response_write_single_register+1,w
  7323  0C86  00B7               	movwf	modbus_response_write_single_register@startAddr+1
  7324                           
  7325                           ;modbus.c: 124: startAddr<<=8;
  7326  0C87  3008               	movlw	8
  7327  0C88                     u4225:	
  7328  0C88  35B6               	lslf	modbus_response_write_single_register@startAddr,f
  7329  0C89  0DB7               	rlf	modbus_response_write_single_register@startAddr+1,f
  7330  0C8A  0B89               	decfsz	9,f
  7331  0C8B  2C88               	goto	u4225
  7332                           
  7333                           ;modbus.c: 125: startAddr |= pmdbs->addr_lo;
  7334  0C8C  0834               	movf	modbus_response_write_single_register@pmdbs,w
  7335  0C8D  3E03               	addlw	3
  7336  0C8E  0086               	movwf	6
  7337  0C8F  3001               	movlw	1	; select bank2/3
  7338  0C90  0087               	movwf	7
  7339  0C91  0801               	movf	1,w
  7340  0C92  00AC               	movwf	??_modbus_response_write_single_register
  7341  0C93  01AD               	clrf	??_modbus_response_write_single_register+1
  7342  0C94  082C               	movf	??_modbus_response_write_single_register,w
  7343  0C95  04B6               	iorwf	modbus_response_write_single_register@startAddr,f
  7344  0C96  082D               	movf	??_modbus_response_write_single_register+1,w
  7345  0C97  04B7               	iorwf	modbus_response_write_single_register@startAddr+1,f
  7346                           
  7347                           ;modbus.c: 126: startAddr = startAddr & 0xff;
  7348  0C98  30FF               	movlw	255
  7349  0C99  0536               	andwf	modbus_response_write_single_register@startAddr,w
  7350  0C9A  00B6               	movwf	modbus_response_write_single_register@startAddr
  7351  0C9B  3000               	movlw	0
  7352  0C9C  0537               	andwf	modbus_response_write_single_register@startAddr+1,w
  7353  0C9D  00B7               	movwf	modbus_response_write_single_register@startAddr+1
  7354                           
  7355                           ;modbus.c: 127: if(startAddr==0x02){
  7356  0C9E  3002               	movlw	2
  7357  0C9F  0636               	xorwf	modbus_response_write_single_register@startAddr,w
  7358  0CA0  0437               	iorwf	modbus_response_write_single_register@startAddr+1,w
  7359  0CA1  1D03               	btfss	3,2
  7360  0CA2  2CB1               	goto	l4871
  7361                           
  7362                           ;modbus.c: 128: sysData.id=rbuf[5];
  7363  0CA3  0835               	movf	modbus_response_write_single_register@rbuf,w
  7364  0CA4  3E05               	addlw	5
  7365  0CA5  0086               	movwf	6
  7366  0CA6  3001               	movlw	1	; select bank2/3
  7367  0CA7  0087               	movwf	7
  7368  0CA8  0801               	movf	1,w
  7369  0CA9  00AC               	movwf	??_modbus_response_write_single_register
  7370  0CAA  305E               	movlw	94
  7371  0CAB  0086               	movwf	6
  7372  0CAC  3023               	movlw	35
  7373  0CAD  0087               	movwf	7
  7374  0CAE  082C               	movf	??_modbus_response_write_single_register,w
  7375  0CAF  0081               	movwf	1
  7376  0CB0  2D71               	goto	l822
  7377  0CB1                     l4871:	
  7378                           ;modbus.c: 130: }else if(startAddr==0x03){
  7379                           
  7380                           ;modbus.c: 129: fiSave=1;
  7381                           
  7382  0CB1  3003               	movlw	3
  7383  0CB2  0636               	xorwf	modbus_response_write_single_register@startAddr,w
  7384  0CB3  0437               	iorwf	modbus_response_write_single_register@startAddr+1,w
  7385  0CB4  1D03               	btfss	3,2
  7386  0CB5  2CCF               	goto	l4879
  7387                           
  7388                           ;modbus.c: 131: sysData.pidSetFlg1=rbuf[4];
  7389  0CB6  0835               	movf	modbus_response_write_single_register@rbuf,w
  7390  0CB7  3E04               	addlw	4
  7391  0CB8  0086               	movwf	6
  7392  0CB9  3001               	movlw	1	; select bank2/3
  7393  0CBA  0087               	movwf	7
  7394  0CBB  0801               	movf	1,w
  7395  0CBC  00AC               	movwf	??_modbus_response_write_single_register
  7396  0CBD  305D               	movlw	93
  7397  0CBE  0086               	movwf	6
  7398  0CBF  3023               	movlw	35
  7399  0CC0  0087               	movwf	7
  7400  0CC1  082C               	movf	??_modbus_response_write_single_register,w
  7401  0CC2  0081               	movwf	1
  7402                           
  7403                           ;modbus.c: 132: sysData.pidSetFlg0=rbuf[5];
  7404  0CC3  305C               	movlw	92
  7405  0CC4  0086               	movwf	6
  7406  0CC5  3023               	movlw	35
  7407  0CC6  0087               	movwf	7
  7408  0CC7  0835               	movf	modbus_response_write_single_register@rbuf,w
  7409  0CC8  3E05               	addlw	5
  7410  0CC9  0084               	movwf	4
  7411  0CCA  3001               	movlw	1	; select bank2/3
  7412  0CCB  0085               	movwf	5
  7413  0CCC  0800               	movf	0,w
  7414  0CCD  3FC0               	movwi [0]fsr1
  7415  0CCE  2D71               	goto	l822
  7416  0CCF                     l4879:	
  7417                           ;modbus.c: 134: }else if(startAddr>0x0f && startAddr < 0x10+30*2){
  7418                           
  7419                           ;modbus.c: 133: fiSave=1;
  7420                           
  7421  0CCF  3000               	movlw	0
  7422  0CD0  0237               	subwf	modbus_response_write_single_register@startAddr+1,w
  7423  0CD1  3010               	movlw	16
  7424  0CD2  1903               	skipnz
  7425  0CD3  0236               	subwf	modbus_response_write_single_register@startAddr,w
  7426  0CD4  1C03               	skipc
  7427  0CD5  0008               	return
  7428  0CD6  3000               	movlw	0
  7429  0CD7  0237               	subwf	modbus_response_write_single_register@startAddr+1,w
  7430  0CD8  304C               	movlw	76
  7431  0CD9  1903               	skipnz
  7432  0CDA  0236               	subwf	modbus_response_write_single_register@startAddr,w
  7433  0CDB  1803               	skipnc
  7434  0CDC  0008               	return
  7435                           
  7436                           ;modbus.c: 135: startAddr-=0x10;
  7437  0CDD  3010               	movlw	16
  7438  0CDE  02B6               	subwf	modbus_response_write_single_register@startAddr,f
  7439  0CDF  3000               	movlw	0
  7440  0CE0  3BB7               	subwfb	modbus_response_write_single_register@startAddr+1,f
  7441                           
  7442                           ;modbus.c: 136: if(startAddr & 0x01){
  7443  0CE1  1C36               	btfss	modbus_response_write_single_register@startAddr,0
  7444  0CE2  2D73               	goto	l4911
  7445                           
  7446                           ;modbus.c: 137: t16=rbuf[4];
  7447  0CE3  0835               	movf	modbus_response_write_single_register@rbuf,w
  7448  0CE4  3E04               	addlw	4
  7449  0CE5  0086               	movwf	6
  7450  0CE6  3001               	movlw	1	; select bank2/3
  7451  0CE7  0087               	movwf	7
  7452  0CE8  0801               	movf	1,w
  7453  0CE9  00AC               	movwf	??_modbus_response_write_single_register
  7454  0CEA  01AD               	clrf	??_modbus_response_write_single_register+1
  7455  0CEB  082C               	movf	??_modbus_response_write_single_register,w
  7456  0CEC  00B1               	movwf	modbus_response_write_single_register@t16
  7457  0CED  082D               	movf	??_modbus_response_write_single_register+1,w
  7458  0CEE  00B2               	movwf	modbus_response_write_single_register@t16+1
  7459                           
  7460                           ;modbus.c: 138: t16<<=8;
  7461  0CEF  3008               	movlw	8
  7462  0CF0                     u4285:	
  7463  0CF0  35B1               	lslf	modbus_response_write_single_register@t16,f
  7464  0CF1  0DB2               	rlf	modbus_response_write_single_register@t16+1,f
  7465  0CF2  0B89               	decfsz	9,f
  7466  0CF3  2CF0               	goto	u4285
  7467                           
  7468                           ;modbus.c: 139: t16 |= rbuf[5];
  7469  0CF4  0835               	movf	modbus_response_write_single_register@rbuf,w
  7470  0CF5  3E05               	addlw	5
  7471  0CF6  0086               	movwf	6
  7472  0CF7  3001               	movlw	1	; select bank2/3
  7473  0CF8  0087               	movwf	7
  7474  0CF9  0801               	movf	1,w
  7475  0CFA  00AC               	movwf	??_modbus_response_write_single_register
  7476  0CFB  01AD               	clrf	??_modbus_response_write_single_register+1
  7477  0CFC  082C               	movf	??_modbus_response_write_single_register,w
  7478  0CFD  04B1               	iorwf	modbus_response_write_single_register@t16,f
  7479  0CFE  082D               	movf	??_modbus_response_write_single_register+1,w
  7480  0CFF  04B2               	iorwf	modbus_response_write_single_register@t16+1,f
  7481                           
  7482                           ;modbus.c: 140: sysData.calibVoMV[startAddr>>1]=t16;
  7483  0D00  0837               	movf	modbus_response_write_single_register@startAddr+1,w
  7484  0D01  00AD               	movwf	??_modbus_response_write_single_register+1
  7485  0D02  0836               	movf	modbus_response_write_single_register@startAddr,w
  7486  0D03  00AC               	movwf	??_modbus_response_write_single_register
  7487  0D04  36AD               	lsrf	??_modbus_response_write_single_register+1,f
  7488  0D05  0CAC               	rrf	??_modbus_response_write_single_register,f
  7489  0D06  35AC               	lslf	??_modbus_response_write_single_register,f
  7490  0D07  0DAD               	rlf	??_modbus_response_write_single_register+1,f
  7491  0D08  30A2               	movlw	162
  7492  0D09  00AE               	movwf	??_modbus_response_write_single_register+2
  7493  0D0A  3023               	movlw	35
  7494  0D0B  00AF               	movwf	??_modbus_response_write_single_register+3
  7495  0D0C  082C               	movf	??_modbus_response_write_single_register,w
  7496  0D0D  072E               	addwf	??_modbus_response_write_single_register+2,w
  7497  0D0E  0086               	movwf	6
  7498  0D0F  082D               	movf	??_modbus_response_write_single_register+1,w
  7499  0D10  3D2F               	addwfc	??_modbus_response_write_single_register+3,w
  7500  0D11  0087               	movwf	7
  7501  0D12  0831               	movf	modbus_response_write_single_register@t16,w
  7502  0D13  3FC0               	movwi [0]fsr1
  7503  0D14  0832               	movf	modbus_response_write_single_register@t16+1,w
  7504  0D15  3FC1               	movwi [1]fsr1
  7505                           
  7506                           ;modbus.c: 141: sysData.calibRsAdc[startAddr>>1]=rsLoAvg;
  7507  0D16  0837               	movf	modbus_response_write_single_register@startAddr+1,w
  7508  0D17  00AD               	movwf	??_modbus_response_write_single_register+1
  7509  0D18  0836               	movf	modbus_response_write_single_register@startAddr,w
  7510  0D19  00AC               	movwf	??_modbus_response_write_single_register
  7511  0D1A  36AD               	lsrf	??_modbus_response_write_single_register+1,f
  7512  0D1B  0CAC               	rrf	??_modbus_response_write_single_register,f
  7513  0D1C  35AC               	lslf	??_modbus_response_write_single_register,f
  7514  0D1D  0DAD               	rlf	??_modbus_response_write_single_register+1,f
  7515  0D1E  3066               	movlw	102
  7516  0D1F  00AE               	movwf	??_modbus_response_write_single_register+2
  7517  0D20  3023               	movlw	35
  7518  0D21  00AF               	movwf	??_modbus_response_write_single_register+3
  7519  0D22  082C               	movf	??_modbus_response_write_single_register,w
  7520  0D23  072E               	addwf	??_modbus_response_write_single_register+2,w
  7521  0D24  0086               	movwf	6
  7522  0D25  082D               	movf	??_modbus_response_write_single_register+1,w
  7523  0D26  3D2F               	addwfc	??_modbus_response_write_single_register+3,w
  7524  0D27  0087               	movwf	7
  7525  0D28  0853               	movf	_rsLoAvg,w
  7526  0D29  3FC0               	movwi [0]fsr1
  7527  0D2A  0854               	movf	_rsLoAvg+1,w
  7528  0D2B  3FC1               	movwi [1]fsr1
  7529                           
  7530                           ;modbus.c: 143: if(rbuf[1]==0x26){
  7531  0D2C  0A35               	incf	modbus_response_write_single_register@rbuf,w
  7532  0D2D  0086               	movwf	6
  7533  0D2E  3001               	movlw	1	; select bank2/3
  7534  0D2F  0087               	movwf	7
  7535  0D30  3026               	movlw	38
  7536  0D31  0601               	xorwf	1,w
  7537  0D32  1D03               	btfss	3,2
  7538  0D33  2D71               	goto	l822
  7539                           
  7540                           ;modbus.c: 144: for(i=(startAddr>>1)+1;i<30;i++){
  7541  0D34  0837               	movf	modbus_response_write_single_register@startAddr+1,w
  7542  0D35  00AD               	movwf	??_modbus_response_write_single_register+1
  7543  0D36  0836               	movf	modbus_response_write_single_register@startAddr,w
  7544  0D37  00AC               	movwf	??_modbus_response_write_single_register
  7545  0D38  36AD               	lsrf	??_modbus_response_write_single_register+1,f
  7546  0D39  0CAC               	rrf	??_modbus_response_write_single_register,f
  7547  0D3A  082C               	movf	??_modbus_response_write_single_register,w
  7548  0D3B  3E01               	addlw	1
  7549  0D3C  00AE               	movwf	??_modbus_response_write_single_register+2
  7550  0D3D  082E               	movf	??_modbus_response_write_single_register+2,w
  7551  0D3E  00B3               	movwf	modbus_response_write_single_register@i
  7552  0D3F  301E               	movlw	30
  7553  0D40  0233               	subwf	modbus_response_write_single_register@i,w
  7554  0D41  1803               	btfsc	3,0
  7555  0D42  2D71               	goto	l822
  7556  0D43                     l4905:	
  7557                           
  7558                           ;modbus.c: 145: sysData.calibVoMV[i]=t16;
  7559  0D43  0833               	movf	modbus_response_write_single_register@i,w
  7560  0D44  00AC               	movwf	??_modbus_response_write_single_register
  7561  0D45  01AD               	clrf	??_modbus_response_write_single_register+1
  7562  0D46  35AC               	lslf	??_modbus_response_write_single_register,f
  7563  0D47  0DAD               	rlf	??_modbus_response_write_single_register+1,f
  7564  0D48  30A2               	movlw	162
  7565  0D49  00AE               	movwf	??_modbus_response_write_single_register+2
  7566  0D4A  3023               	movlw	35
  7567  0D4B  00AF               	movwf	??_modbus_response_write_single_register+3
  7568  0D4C  082C               	movf	??_modbus_response_write_single_register,w
  7569  0D4D  072E               	addwf	??_modbus_response_write_single_register+2,w
  7570  0D4E  0086               	movwf	6
  7571  0D4F  082D               	movf	??_modbus_response_write_single_register+1,w
  7572  0D50  3D2F               	addwfc	??_modbus_response_write_single_register+3,w
  7573  0D51  0087               	movwf	7
  7574  0D52  0831               	movf	modbus_response_write_single_register@t16,w
  7575  0D53  3FC0               	movwi [0]fsr1
  7576  0D54  0832               	movf	modbus_response_write_single_register@t16+1,w
  7577  0D55  3FC1               	movwi [1]fsr1
  7578                           
  7579                           ;modbus.c: 146: sysData.calibRsAdc[i]=rsLoAvg;
  7580  0D56  0833               	movf	modbus_response_write_single_register@i,w
  7581  0D57  00AC               	movwf	??_modbus_response_write_single_register
  7582  0D58  01AD               	clrf	??_modbus_response_write_single_register+1
  7583  0D59  35AC               	lslf	??_modbus_response_write_single_register,f
  7584  0D5A  0DAD               	rlf	??_modbus_response_write_single_register+1,f
  7585  0D5B  3066               	movlw	102
  7586  0D5C  00AE               	movwf	??_modbus_response_write_single_register+2
  7587  0D5D  3023               	movlw	35
  7588  0D5E  00AF               	movwf	??_modbus_response_write_single_register+3
  7589  0D5F  082C               	movf	??_modbus_response_write_single_register,w
  7590  0D60  072E               	addwf	??_modbus_response_write_single_register+2,w
  7591  0D61  0086               	movwf	6
  7592  0D62  082D               	movf	??_modbus_response_write_single_register+1,w
  7593  0D63  3D2F               	addwfc	??_modbus_response_write_single_register+3,w
  7594  0D64  0087               	movwf	7
  7595  0D65  0853               	movf	_rsLoAvg,w
  7596  0D66  3FC0               	movwi [0]fsr1
  7597  0D67  0854               	movf	_rsLoAvg+1,w
  7598  0D68  3FC1               	movwi [1]fsr1
  7599  0D69  3001               	movlw	1
  7600  0D6A  00AC               	movwf	??_modbus_response_write_single_register
  7601  0D6B  082C               	movf	??_modbus_response_write_single_register,w
  7602  0D6C  07B3               	addwf	modbus_response_write_single_register@i,f
  7603  0D6D  301E               	movlw	30
  7604  0D6E  0233               	subwf	modbus_response_write_single_register@i,w
  7605  0D6F  1C03               	skipc
  7606  0D70  2D43               	goto	l4905
  7607  0D71                     l822:	
  7608                           
  7609                           ;modbus.c: 147: };modbus.c: 148: };modbus.c: 149: fiSave=1;
  7610  0D71  01B0               	clrf	modbus_response_write_single_register@fiSave
  7611  0D72  0AB0               	incf	modbus_response_write_single_register@fiSave,f
  7612  0D73                     l4911:	
  7613                           ;modbus.c: 153: return;
  7614                           
  7615                           ;modbus.c: 150: };modbus.c: 151: }else{
  7616                           
  7617                           
  7618                           ;modbus.c: 154: };modbus.c: 155: if(fiSave)sys_data_save();
  7619  0D73  0830               	movf	modbus_response_write_single_register@fiSave,w
  7620  0D74  1903               	btfsc	3,2
  7621  0D75  2D79               	goto	l4915
  7622  0D76  319E  26CA  318C   	fcall	_sys_data_save
  7623  0D79                     l4915:	
  7624                           
  7625                           ;modbus.c: 156: if(pmdbs->addr==0)return;
  7626  0D79  0020               	movlb	0	; select bank0
  7627  0D7A  0834               	movf	modbus_response_write_single_register@pmdbs,w
  7628  0D7B  0086               	movwf	6
  7629  0D7C  3001               	movlw	1	; select bank2/3
  7630  0D7D  0087               	movwf	7
  7631  0D7E  0801               	movf	1,w
  7632  0D7F  1903               	btfsc	3,2
  7633  0D80  0008               	return
  7634                           
  7635                           ;modbus.c: 157: rbuf[0]=sysData.id;
  7636  0D81  305C               	movlw	92
  7637  0D82  0086               	movwf	6
  7638  0D83  3023               	movlw	35
  7639  0D84  0087               	movwf	7
  7640  0D85  3142               	addfsr 1,2
  7641  0D86  0801               	movf	1,w
  7642  0D87  00AC               	movwf	??_modbus_response_write_single_register
  7643  0D88  0835               	movf	modbus_response_write_single_register@rbuf,w
  7644  0D89  0086               	movwf	6
  7645  0D8A  3001               	movlw	1	; select bank2/3
  7646  0D8B  0087               	movwf	7
  7647  0D8C  082C               	movf	??_modbus_response_write_single_register,w
  7648  0D8D  0081               	movwf	1
  7649                           
  7650                           ;modbus.c: 158: crc_append(rbuf,6);
  7651  0D8E  0835               	movf	modbus_response_write_single_register@rbuf,w
  7652  0D8F  00A6               	movwf	crc_append@message
  7653  0D90  3001               	movlw	1
  7654  0D91  00A7               	movwf	crc_append@message+1
  7655  0D92  3006               	movlw	6
  7656  0D93  00A8               	movwf	crc_append@n
  7657  0D94  3000               	movlw	0
  7658  0D95  00A9               	movwf	crc_append@n+1
  7659  0D96  319E  2633  318C   	fcall	_crc_append
  7660                           
  7661                           ;modbus.c: 159: uart_send_len(rbuf,8);
  7662  0D99  3008               	movlw	8
  7663  0D9A  0020               	movlb	0	; select bank0
  7664  0D9B  00AC               	movwf	??_modbus_response_write_single_register
  7665  0D9C  082C               	movf	??_modbus_response_write_single_register,w
  7666  0D9D  00F8               	movwf	uart_send_len@len
  7667  0D9E  0835               	movf	modbus_response_write_single_register@rbuf,w
  7668  0D9F  3190  2099         	fcall	_uart_send_len
  7669  0DA1  0008               	return
  7670  0DA2                     __end_of_modbus_response_write_single_register:	
  7671                           
  7672                           	psect	text15
  7673  130D                     __ptext15:	
  7674 ;; *************** function _modbus_response_write_mult_register *****************
  7675 ;; Defined at:
  7676 ;;		line 162 in file "src/api/modbus.c"
  7677 ;; Parameters:    Size  Location     Type
  7678 ;;  rbuf            1    wreg     PTR unsigned char 
  7679 ;;		 -> modbusBuf(32), 
  7680 ;; Auto vars:     Size  Location     Type
  7681 ;;  rbuf            1   15[BANK0 ] PTR unsigned char 
  7682 ;;		 -> modbusBuf(32), 
  7683 ;;  stb             1   16[BANK0 ] PTR struct .
  7684 ;;		 -> modbusBuf(32), 
  7685 ;;  len             1   14[BANK0 ] unsigned char 
  7686 ;;  startAddr       1   13[BANK0 ] unsigned char 
  7687 ;; Return value:  Size  Location     Type
  7688 ;;                  1    wreg      void 
  7689 ;; Registers used:
  7690 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7691 ;; Tracked objects:
  7692 ;;		On entry : 0/0
  7693 ;;		On exit  : 0/0
  7694 ;;		Unchanged: 0/0
  7695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7697 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7698 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7699 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7700 ;;Total ram usage:        5 bytes
  7701 ;; Hardware stack levels used:    1
  7702 ;; Hardware stack levels required when called:    4
  7703 ;; This function calls:
  7704 ;;		_crc_append
  7705 ;;		_sys_data_save
  7706 ;;		_uart_send_len
  7707 ;; This function is called by:
  7708 ;;		_modbus_response_process
  7709 ;; This function uses a non-reentrant model
  7710 ;;
  7711                           
  7712                           
  7713                           ;psect for function _modbus_response_write_mult_register
  7714  130D                     _modbus_response_write_mult_register:	
  7715                           
  7716                           ;incstack = 0
  7717                           ; Regs used in _modbus_response_write_mult_register: [wreg-fsr1h+status,2+status,0+pclat
      +                          h+cstack]
  7718                           ;modbus_response_write_mult_register@rbuf stored from wreg
  7719  130D  0020               	movlb	0	; select bank0
  7720  130E  00AF               	movwf	modbus_response_write_mult_register@rbuf
  7721                           
  7722                           ;modbus.c: 164: uint8_t startAddr,len;;modbus.c: 166: st_modbusWriteMultReg_t* stb=(st_m
      +                          odbusWriteMultReg_t*)rbuf;
  7723  130F  082F               	movf	modbus_response_write_mult_register@rbuf,w
  7724  1310  00AC               	movwf	??_modbus_response_write_mult_register
  7725  1311  082C               	movf	??_modbus_response_write_mult_register,w
  7726  1312  00B0               	movwf	modbus_response_write_mult_register@stb
  7727                           
  7728                           ;modbus.c: 167: if(stb->addr!=sysData.id || stb->addr==0)return;
  7729  1313  305C               	movlw	92
  7730  1314  0086               	movwf	6
  7731  1315  3023               	movlw	35
  7732  1316  0087               	movwf	7
  7733  1317  3142               	addfsr 1,2
  7734  1318  0830               	movf	modbus_response_write_mult_register@stb,w
  7735  1319  0084               	movwf	4
  7736  131A  3001               	movlw	1	; select bank2/3
  7737  131B  0085               	movwf	5
  7738  131C  0800               	movf	0,w
  7739  131D  0601               	xorwf	1,w
  7740  131E  1D03               	skipz
  7741  131F  0008               	return
  7742  1320  0830               	movf	modbus_response_write_mult_register@stb,w
  7743  1321  0086               	movwf	6
  7744  1322  3001               	movlw	1	; select bank2/3
  7745  1323  0087               	movwf	7
  7746  1324  0801               	movf	1,w
  7747  1325  1903               	btfsc	3,2
  7748  1326  0008               	return
  7749                           
  7750                           ;modbus.c: 168: startAddr=stb->addr_lo;
  7751  1327  0830               	movf	modbus_response_write_mult_register@stb,w
  7752  1328  0086               	movwf	6
  7753  1329  3001               	movlw	1	; select bank2/3
  7754  132A  0087               	movwf	7
  7755  132B  3001               	movlw	1	; select bank2/3
  7756  132C  3F43               	moviw [3]fsr1
  7757  132D  00AD               	movwf	modbus_response_write_mult_register@startAddr
  7758                           
  7759                           ;modbus.c: 169: len=stb->len_lo;
  7760  132E  0830               	movf	modbus_response_write_mult_register@stb,w
  7761  132F  0086               	movwf	6
  7762  1330  3001               	movlw	1	; select bank2/3
  7763  1331  0087               	movwf	7
  7764  1332  3001               	movlw	1	; select bank2/3
  7765  1333  3F45               	moviw [5]fsr1
  7766  1334  00AE               	movwf	modbus_response_write_mult_register@len
  7767                           
  7768                           ;modbus.c: 170: if(len!=3)return ;
  7769  1335  3003               	movlw	3
  7770  1336  062E               	xorwf	modbus_response_write_mult_register@len,w
  7771  1337  1D03               	btfss	3,2
  7772  1338  0008               	return
  7773                           
  7774                           ;modbus.c: 171: if(startAddr!=4)return;
  7775  1339  3004               	movlw	4
  7776  133A  062D               	xorwf	modbus_response_write_mult_register@startAddr,w
  7777  133B  1D03               	btfss	3,2
  7778  133C  0008               	return
  7779                           
  7780                           ;modbus.c: 173: sysData.pidKp=(stb->data[0]<<8)|(stb->data[1]);
  7781  133D  0830               	movf	modbus_response_write_mult_register@stb,w
  7782  133E  3E06               	addlw	6
  7783  133F  0084               	movwf	4
  7784  1340  3001               	movlw	1	; select bank2/3
  7785  1341  0085               	movwf	5
  7786  1342  0800               	movf	0,w
  7787  1343  00AC               	movwf	??_modbus_response_write_mult_register
  7788  1344  0830               	movf	modbus_response_write_mult_register@stb,w
  7789  1345  3E07               	addlw	7
  7790  1346  0084               	movwf	4
  7791  1347  3001               	movlw	1	; select bank2/3
  7792  1348  0085               	movwf	5
  7793  1349  305C               	movlw	92
  7794  134A  0086               	movwf	6
  7795  134B  3023               	movlw	35
  7796  134C  0087               	movwf	7
  7797  134D  3144               	addfsr 1,4
  7798  134E  0800               	movf	0,w
  7799  134F  3FC0               	movwi [0]fsr1
  7800  1350  082C               	movf	??_modbus_response_write_mult_register,w
  7801  1351  3FC1               	movwi [1]fsr1
  7802                           
  7803                           ;modbus.c: 174: sysData.pidTi=(stb->data[2]<<8)|(stb->data[3]);
  7804  1352  0830               	movf	modbus_response_write_mult_register@stb,w
  7805  1353  3E08               	addlw	8
  7806  1354  0084               	movwf	4
  7807  1355  3001               	movlw	1	; select bank2/3
  7808  1356  0085               	movwf	5
  7809  1357  0800               	movf	0,w
  7810  1358  00AC               	movwf	??_modbus_response_write_mult_register
  7811  1359  0830               	movf	modbus_response_write_mult_register@stb,w
  7812  135A  3E09               	addlw	9
  7813  135B  0084               	movwf	4
  7814  135C  3001               	movlw	1	; select bank2/3
  7815  135D  0085               	movwf	5
  7816  135E  305C               	movlw	92
  7817  135F  0086               	movwf	6
  7818  1360  3023               	movlw	35
  7819  1361  0087               	movwf	7
  7820  1362  3146               	addfsr 1,6
  7821  1363  0800               	movf	0,w
  7822  1364  3FC0               	movwi [0]fsr1
  7823  1365  082C               	movf	??_modbus_response_write_mult_register,w
  7824  1366  3FC1               	movwi [1]fsr1
  7825                           
  7826                           ;modbus.c: 176: sys_data_save();
  7827  1367  319E  26CA  3193   	fcall	_sys_data_save
  7828                           
  7829                           ;modbus.c: 177: crc_append(rbuf,sizeof(st_modbusWriteMultReg_t)-2);
  7830  136A  0020               	movlb	0	; select bank0
  7831  136B  082F               	movf	modbus_response_write_mult_register@rbuf,w
  7832  136C  00A6               	movwf	crc_append@message
  7833  136D  3001               	movlw	1
  7834  136E  00A7               	movwf	crc_append@message+1
  7835  136F  3006               	movlw	6
  7836  1370  00A8               	movwf	crc_append@n
  7837  1371  3000               	movlw	0
  7838  1372  00A9               	movwf	crc_append@n+1
  7839  1373  319E  2633  3193   	fcall	_crc_append
  7840                           
  7841                           ;modbus.c: 178: uart_send_len(rbuf,sizeof(st_modbusWriteMultReg_t));
  7842  1376  3008               	movlw	8
  7843  1377  0020               	movlb	0	; select bank0
  7844  1378  00AC               	movwf	??_modbus_response_write_mult_register
  7845  1379  082C               	movf	??_modbus_response_write_mult_register,w
  7846  137A  00F8               	movwf	uart_send_len@len
  7847  137B  082F               	movf	modbus_response_write_mult_register@rbuf,w
  7848  137C  3190  2099         	fcall	_uart_send_len
  7849  137E  0008               	return
  7850  137F                     __end_of_modbus_response_write_mult_register:	
  7851                           
  7852                           	psect	text16
  7853  1ECA                     __ptext16:	
  7854 ;; *************** function _sys_data_save *****************
  7855 ;; Defined at:
  7856 ;;		line 95 in file "src/api/sysData.c"
  7857 ;; Parameters:    Size  Location     Type
  7858 ;;		None
  7859 ;; Auto vars:     Size  Location     Type
  7860 ;;		None
  7861 ;; Return value:  Size  Location     Type
  7862 ;;                  1    wreg      void 
  7863 ;; Registers used:
  7864 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7865 ;; Tracked objects:
  7866 ;;		On entry : 0/0
  7867 ;;		On exit  : 0/0
  7868 ;;		Unchanged: 0/0
  7869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7873 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7874 ;;Total ram usage:        0 bytes
  7875 ;; Hardware stack levels used:    1
  7876 ;; Hardware stack levels required when called:    3
  7877 ;; This function calls:
  7878 ;;		_crc_append
  7879 ;;		_my_flash_read_system_erase
  7880 ;;		_my_flash_system_write
  7881 ;; This function is called by:
  7882 ;;		_sys_data_init
  7883 ;;		_modbus_response_write_single_register
  7884 ;;		_modbus_response_write_mult_register
  7885 ;; This function uses a non-reentrant model
  7886 ;;
  7887                           
  7888                           
  7889                           ;psect for function _sys_data_save
  7890  1ECA                     _sys_data_save:	
  7891                           
  7892                           ;sysData.c: 97: crc_append((uint8_t*)&sysData,sizeof(sysData_t)-2);
  7893                           
  7894                           ;incstack = 0
  7895                           ; Regs used in _sys_data_save: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7896  1ECA  305C               	movlw	92
  7897  1ECB  0020               	movlb	0	; select bank0
  7898  1ECC  00A6               	movwf	crc_append@message
  7899  1ECD  3023               	movlw	35
  7900  1ECE  00A7               	movwf	crc_append@message+1
  7901  1ECF  3082               	movlw	130
  7902  1ED0  00A8               	movwf	crc_append@n
  7903  1ED1  3000               	movlw	0
  7904  1ED2  00A9               	movwf	crc_append@n+1
  7905  1ED3  319E  2633  319E   	fcall	_crc_append
  7906                           
  7907                           ;sysData.c: 98: my_flash_read_system_erase();
  7908  1ED6  3190  2007  319E   	fcall	_my_flash_read_system_erase
  7909                           
  7910                           ;sysData.c: 99: my_flash_system_write((uint8_t*)&sysData,sizeof(sysData_t));
  7911  1ED9  305C               	movlw	92
  7912  1EDA  00F1               	movwf	my_flash_system_write@buf
  7913  1EDB  3023               	movlw	35
  7914  1EDC  00F2               	movwf	my_flash_system_write@buf+1
  7915  1EDD  3084               	movlw	132
  7916  1EDE  00F3               	movwf	my_flash_system_write@len
  7917  1EDF  3000               	movlw	0
  7918  1EE0  00F4               	movwf	my_flash_system_write@len+1
  7919  1EE1  3194  2401         	fcall	_my_flash_system_write
  7920                           
  7921                           ;sysData.c: 100: PidKp=sysData.pidKp;
  7922  1EE3  305C               	movlw	92
  7923  1EE4  0086               	movwf	6
  7924  1EE5  3023               	movlw	35
  7925  1EE6  0087               	movwf	7
  7926  1EE7  3144               	addfsr 1,4
  7927  1EE8  3F40               	moviw [0]fsr1
  7928  1EE9  0021               	movlb	1	; select bank1
  7929  1EEA  00CC               	movwf	_PidKp^(0+128)
  7930  1EEB  3F41               	moviw [1]fsr1
  7931  1EEC  00CD               	movwf	(_PidKp+1)^(0+128)
  7932                           
  7933                           ;sysData.c: 101: PidTi=sysData.pidTi;
  7934  1EED  305C               	movlw	92
  7935  1EEE  0086               	movwf	6
  7936  1EEF  3023               	movlw	35
  7937  1EF0  0087               	movwf	7
  7938  1EF1  3146               	addfsr 1,6
  7939  1EF2  3F40               	moviw [0]fsr1
  7940  1EF3  00CA               	movwf	_PidTi^(0+128)
  7941  1EF4  3F41               	moviw [1]fsr1
  7942  1EF5  00CB               	movwf	(_PidTi+1)^(0+128)
  7943                           
  7944                           ;sysData.c: 102: PidTd=sysData.pidTd;;
  7945  1EF6  305C               	movlw	92
  7946  1EF7  0086               	movwf	6
  7947  1EF8  3023               	movlw	35
  7948  1EF9  0087               	movwf	7
  7949  1EFA  3148               	addfsr 1,8
  7950  1EFB  3F40               	moviw [0]fsr1
  7951  1EFC  00C8               	movwf	_PidTd^(0+128)
  7952  1EFD  3F41               	moviw [1]fsr1
  7953  1EFE  00C9               	movwf	(_PidTd+1)^(0+128)
  7954  1EFF  0008               	return
  7955  1F00                     __end_of_sys_data_save:	
  7956                           
  7957                           	psect	text17
  7958  1401                     __ptext17:	
  7959 ;; *************** function _my_flash_system_write *****************
  7960 ;; Defined at:
  7961 ;;		line 47 in file "src/api/sysData.c"
  7962 ;; Parameters:    Size  Location     Type
  7963 ;;  buf             2    1[COMMON] PTR unsigned char 
  7964 ;;		 -> sysData(132), 
  7965 ;;  len             2    3[COMMON] unsigned int 
  7966 ;; Auto vars:     Size  Location     Type
  7967 ;;  flashAddr       2    7[BANK0 ] unsigned int 
  7968 ;;  loc             2    5[BANK0 ] unsigned int 
  7969 ;;  blocNum         2    3[BANK0 ] unsigned int 
  7970 ;;  j               2    0[BANK0 ] unsigned int 
  7971 ;;  i               1    9[BANK0 ] unsigned char 
  7972 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
  7973 ;; Return value:  Size  Location     Type
  7974 ;;                  2    1[COMMON] unsigned int 
  7975 ;; Registers used:
  7976 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7977 ;; Tracked objects:
  7978 ;;		On entry : 0/0
  7979 ;;		On exit  : 0/0
  7980 ;;		Unchanged: 0/0
  7981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7982 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7983 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7984 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7985 ;;      Totals:         6      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7986 ;;Total ram usage:       16 bytes
  7987 ;; Hardware stack levels used:    1
  7988 ;; Hardware stack levels required when called:    1
  7989 ;; This function calls:
  7990 ;;		Nothing
  7991 ;; This function is called by:
  7992 ;;		_sys_data_save
  7993 ;; This function uses a non-reentrant model
  7994 ;;
  7995                           
  7996                           
  7997                           ;psect for function _my_flash_system_write
  7998  1401                     _my_flash_system_write:	
  7999                           
  8000                           ;sysData.c: 49: uint16_t blocNum=0;
  8001                           
  8002                           ;incstack = 0
  8003                           ; Regs used in _my_flash_system_write: [wreg+fsr1l+fsr1h+status,2+status,0]
  8004  1401  0020               	movlb	0	; select bank0
  8005  1402  01A3               	clrf	my_flash_system_write@blocNum
  8006  1403  01A4               	clrf	my_flash_system_write@blocNum+1
  8007                           
  8008                           ;sysData.c: 50: uint16_t loc,j;;sysData.c: 51: uint16_t flashAddr=0x1f00;
  8009  1404  3000               	movlw	0
  8010  1405  00A7               	movwf	my_flash_system_write@flashAddr
  8011  1406  301F               	movlw	31
  8012  1407  00A8               	movwf	my_flash_system_write@flashAddr+1
  8013                           
  8014                           ;sysData.c: 52: uint8_t GIEBitValue=INTCONbits.GIE;
  8015  1408  3000               	movlw	0
  8016  1409  1B8B               	btfsc	11,7	;volatile
  8017  140A  3001               	movlw	1
  8018  140B  00A2               	movwf	my_flash_system_write@GIEBitValue
  8019                           
  8020                           ;sysData.c: 53: uint8_t i=0;
  8021  140C  01A9               	clrf	my_flash_system_write@i
  8022                           
  8023                           ;sysData.c: 54: blocNum=len/32;
  8024  140D  0874               	movf	my_flash_system_write@len+1,w
  8025  140E  00F6               	movwf	??_my_flash_system_write+1
  8026  140F  0873               	movf	my_flash_system_write@len,w
  8027  1410  00F5               	movwf	??_my_flash_system_write
  8028  1411  3005               	movlw	5
  8029  1412                     u2215:	
  8030  1412  36F6               	lsrf	??_my_flash_system_write+1,f
  8031  1413  0CF5               	rrf	??_my_flash_system_write,f
  8032  1414  0B89               	decfsz	9,f
  8033  1415  2C12               	goto	u2215
  8034  1416  0875               	movf	??_my_flash_system_write,w
  8035  1417  00A3               	movwf	my_flash_system_write@blocNum
  8036  1418  0876               	movf	??_my_flash_system_write+1,w
  8037  1419  00A4               	movwf	my_flash_system_write@blocNum+1
  8038                           
  8039                           ;sysData.c: 55: if(len%32)blocNum++;
  8040  141A  301F               	movlw	31
  8041  141B  0573               	andwf	my_flash_system_write@len,w
  8042  141C  00F5               	movwf	??_my_flash_system_write
  8043  141D  3000               	movlw	0
  8044  141E  0574               	andwf	my_flash_system_write@len+1,w
  8045  141F  00F6               	movwf	??_my_flash_system_write+1
  8046  1420  0875               	movf	??_my_flash_system_write,w
  8047  1421  0476               	iorwf	??_my_flash_system_write+1,w
  8048  1422  1903               	btfsc	3,2
  8049  1423  2C28               	goto	l3389
  8050  1424  3001               	movlw	1
  8051  1425  07A3               	addwf	my_flash_system_write@blocNum,f
  8052  1426  3000               	movlw	0
  8053  1427  3DA4               	addwfc	my_flash_system_write@blocNum+1,f
  8054  1428                     l3389:	
  8055                           
  8056                           ;sysData.c: 57: INTCONbits.GIE = 0;
  8057  1428  138B               	bcf	11,7	;volatile
  8058                           
  8059                           ;sysData.c: 58: loc=0;
  8060  1429  01A5               	clrf	my_flash_system_write@loc
  8061  142A  01A6               	clrf	my_flash_system_write@loc+1
  8062                           
  8063                           ;sysData.c: 59: for(j=0;j<blocNum;j++){
  8064  142B  01A0               	clrf	my_flash_system_write@j
  8065  142C  01A1               	clrf	my_flash_system_write@j+1
  8066  142D                     l732:	
  8067  142D  0824               	movf	my_flash_system_write@blocNum+1,w
  8068  142E  0221               	subwf	my_flash_system_write@j+1,w
  8069  142F  1D03               	skipz
  8070  1430  2C33               	goto	u2275
  8071  1431  0823               	movf	my_flash_system_write@blocNum,w
  8072  1432  0220               	subwf	my_flash_system_write@j,w
  8073  1433                     u2275:	
  8074  1433  1803               	btfsc	3,0
  8075  1434  2C89               	goto	l3433
  8076                           
  8077                           ;sysData.c: 60: PMCON1bits.CFGS = 0;
  8078  1435  0023               	movlb	3	; select bank3
  8079  1436  1315               	bcf	21,6	;volatile
  8080                           
  8081                           ;sysData.c: 61: PMCON1bits.WREN = 1;
  8082  1437  1515               	bsf	21,2	;volatile
  8083                           
  8084                           ;sysData.c: 62: PMCON1bits.LWLO = 1;
  8085  1438  1695               	bsf	21,5	;volatile
  8086                           
  8087                           ;sysData.c: 64: for(i=0;i<32;i++){
  8088  1439  0020               	movlb	0	; select bank0
  8089  143A  01A9               	clrf	my_flash_system_write@i
  8090  143B  3020               	movlw	32
  8091  143C  0229               	subwf	my_flash_system_write@i,w
  8092  143D  1803               	btfsc	3,0
  8093  143E  2C81               	goto	l735
  8094  143F                     l3401:	
  8095                           
  8096                           ;sysData.c: 66: PMADRL = (flashAddr & 0xFF);
  8097  143F  0827               	movf	my_flash_system_write@flashAddr,w
  8098  1440  0023               	movlb	3	; select bank3
  8099  1441  0091               	movwf	17	;volatile
  8100                           
  8101                           ;sysData.c: 68: PMADRH = ((flashAddr & 0xFF00) >> 8);
  8102  1442  0020               	movlb	0	; select bank0
  8103  1443  0828               	movf	my_flash_system_write@flashAddr+1,w
  8104  1444  0023               	movlb	3	; select bank3
  8105  1445  0092               	movwf	18	;volatile
  8106                           
  8107                           ;sysData.c: 71: if(loc<len){
  8108  1446  0874               	movf	my_flash_system_write@len+1,w
  8109  1447  0020               	movlb	0	; select bank0
  8110  1448  0226               	subwf	my_flash_system_write@loc+1,w
  8111  1449  1D03               	skipz
  8112  144A  2C4D               	goto	u2245
  8113  144B  0873               	movf	my_flash_system_write@len,w
  8114  144C  0225               	subwf	my_flash_system_write@loc,w
  8115  144D                     u2245:	
  8116  144D  1803               	skipnc
  8117  144E  2C59               	goto	l3409
  8118                           
  8119                           ;sysData.c: 72: PMDATL = buf[loc];
  8120  144F  0825               	movf	my_flash_system_write@loc,w
  8121  1450  0771               	addwf	my_flash_system_write@buf,w
  8122  1451  0086               	movwf	6
  8123  1452  0826               	movf	my_flash_system_write@loc+1,w
  8124  1453  3D72               	addwfc	my_flash_system_write@buf+1,w
  8125  1454  0087               	movwf	7
  8126  1455  0801               	movf	1,w
  8127  1456  0023               	movlb	3	; select bank3
  8128  1457  0093               	movwf	19	;volatile
  8129                           
  8130                           ;sysData.c: 73: }else{
  8131  1458  2C5B               	goto	l3411
  8132  1459                     l3409:	
  8133                           
  8134                           ;sysData.c: 74: PMDATL = 0x00;
  8135  1459  0023               	movlb	3	; select bank3
  8136  145A  0193               	clrf	19	;volatile
  8137  145B                     l3411:	
  8138                           
  8139                           ;sysData.c: 75: };sysData.c: 76: loc++;
  8140  145B  3001               	movlw	1
  8141  145C  0020               	movlb	0	; select bank0
  8142  145D  07A5               	addwf	my_flash_system_write@loc,f
  8143  145E  3000               	movlw	0
  8144  145F  3DA6               	addwfc	my_flash_system_write@loc+1,f
  8145                           
  8146                           ;sysData.c: 77: PMDATH = 0x00;
  8147  1460  0023               	movlb	3	; select bank3
  8148  1461  0194               	clrf	20	;volatile
  8149                           
  8150                           ;sysData.c: 78: if((i%32) == 32 -1 ){
  8151  1462  301F               	movlw	31
  8152  1463  0020               	movlb	0	; select bank0
  8153  1464  0529               	andwf	my_flash_system_write@i,w
  8154  1465  00F5               	movwf	??_my_flash_system_write
  8155  1466  301F               	movlw	31
  8156  1467  0675               	xorwf	??_my_flash_system_write,w
  8157  1468  1D03               	btfss	3,2
  8158  1469  2C6C               	goto	l3419
  8159                           
  8160                           ;sysData.c: 79: PMCON1bits.LWLO = 0;
  8161  146A  0023               	movlb	3	; select bank3
  8162  146B  1295               	bcf	21,5	;volatile
  8163  146C                     l3419:	
  8164                           
  8165                           ;sysData.c: 80: };sysData.c: 82: PMCON2 = 0x55;
  8166  146C  3055               	movlw	85
  8167  146D  0023               	movlb	3	; select bank3
  8168  146E  0096               	movwf	22	;volsfr
  8169                           
  8170                           ;sysData.c: 83: PMCON2 = 0xAA;
  8171  146F  30AA               	movlw	170
  8172  1470  0096               	movwf	22	;volsfr
  8173                           
  8174                           ;sysData.c: 84: PMCON1bits.WR = 1;
  8175  1471  1495               	bsf	21,1	;volatile
  8176                           
  8177                           ;sysData.c: 85: __nop();
  8178  1472  0000               	nop
  8179                           
  8180                           ;sysData.c: 86: __nop();
  8181  1473  0000               	nop
  8182                           
  8183                           ;sysData.c: 87: flashAddr++;
  8184  1474  3001               	movlw	1
  8185  1475  0020               	movlb	0	; select bank0
  8186  1476  07A7               	addwf	my_flash_system_write@flashAddr,f
  8187  1477  3000               	movlw	0
  8188  1478  3DA8               	addwfc	my_flash_system_write@flashAddr+1,f
  8189  1479  3001               	movlw	1
  8190  147A  00F5               	movwf	??_my_flash_system_write
  8191  147B  0875               	movf	??_my_flash_system_write,w
  8192  147C  07A9               	addwf	my_flash_system_write@i,f
  8193  147D  3020               	movlw	32
  8194  147E  0229               	subwf	my_flash_system_write@i,w
  8195  147F  1C03               	skipc
  8196  1480  2C3F               	goto	l3401
  8197  1481                     l735:	
  8198                           
  8199                           ;sysData.c: 88: };sysData.c: 89: PMCON1bits.WREN = 0;
  8200  1481  0023               	movlb	3	; select bank3
  8201  1482  1115               	bcf	21,2	;volatile
  8202  1483  3001               	movlw	1
  8203  1484  0020               	movlb	0	; select bank0
  8204  1485  07A0               	addwf	my_flash_system_write@j,f
  8205  1486  3000               	movlw	0
  8206  1487  3DA1               	addwfc	my_flash_system_write@j+1,f
  8207  1488  2C2D               	goto	l732
  8208  1489                     l3433:	
  8209                           
  8210                           ;sysData.c: 90: };sysData.c: 91: INTCONbits.GIE = GIEBitValue;
  8211  1489  0C22               	rrf	my_flash_system_write@GIEBitValue,w
  8212  148A  1C03               	skipc
  8213  148B  138B               	bcf	11,7	;volatile
  8214  148C  1803               	skipnc
  8215  148D  178B               	bsf	11,7	;volatile
  8216  148E  0008               	return
  8217  148F                     __end_of_my_flash_system_write:	
  8218                           ;sysData.c: 93: return 0;;	Return value of _my_flash_system_write is never used
  8219                           
  8220                           
  8221                           	psect	text18
  8222  1007                     __ptext18:	
  8223 ;; *************** function _my_flash_read_system_erase *****************
  8224 ;; Defined at:
  8225 ;;		line 9 in file "src/api/sysData.c"
  8226 ;; Parameters:    Size  Location     Type
  8227 ;;		None
  8228 ;; Auto vars:     Size  Location     Type
  8229 ;;		None
  8230 ;; Return value:  Size  Location     Type
  8231 ;;                  1    wreg      void 
  8232 ;; Registers used:
  8233 ;;		wreg, status,2, status,0, pclath, cstack
  8234 ;; Tracked objects:
  8235 ;;		On entry : 0/0
  8236 ;;		On exit  : 0/0
  8237 ;;		Unchanged: 0/0
  8238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8242 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8243 ;;Total ram usage:        0 bytes
  8244 ;; Hardware stack levels used:    1
  8245 ;; Hardware stack levels required when called:    2
  8246 ;; This function calls:
  8247 ;;		_FLASH_EraseBlock
  8248 ;; This function is called by:
  8249 ;;		_sys_data_save
  8250 ;; This function uses a non-reentrant model
  8251 ;;
  8252                           
  8253                           
  8254                           ;psect for function _my_flash_read_system_erase
  8255  1007                     _my_flash_read_system_erase:	
  8256                           
  8257                           ;sysData.c: 16: FLASH_EraseBlock(0x1f00);
  8258                           
  8259                           ;incstack = 0
  8260                           ; Regs used in _my_flash_read_system_erase: [wreg+status,2+status,0+pclath+cstack]
  8261  1007  3000               	movlw	0
  8262  1008  00F1               	movwf	FLASH_EraseBlock@startAddr
  8263  1009  301F               	movlw	31
  8264  100A  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  8265  100B  319D  25C2  3190   	fcall	_FLASH_EraseBlock
  8266                           
  8267                           ;sysData.c: 17: FLASH_EraseBlock(0x1f00+32);
  8268  100E  3020               	movlw	32
  8269  100F  00F1               	movwf	FLASH_EraseBlock@startAddr
  8270  1010  301F               	movlw	31
  8271  1011  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  8272  1012  319D  25C2  3190   	fcall	_FLASH_EraseBlock
  8273                           
  8274                           ;sysData.c: 18: FLASH_EraseBlock(0x1f00+64);
  8275  1015  3040               	movlw	64
  8276  1016  00F1               	movwf	FLASH_EraseBlock@startAddr
  8277  1017  301F               	movlw	31
  8278  1018  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  8279  1019  319D  25C2  3190   	fcall	_FLASH_EraseBlock
  8280                           
  8281                           ;sysData.c: 19: FLASH_EraseBlock(0x1f00+96);
  8282  101C  3060               	movlw	96
  8283  101D  00F1               	movwf	FLASH_EraseBlock@startAddr
  8284  101E  301F               	movlw	31
  8285  101F  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  8286  1020  319D  25C2  3190   	fcall	_FLASH_EraseBlock
  8287                           
  8288                           ;sysData.c: 20: FLASH_EraseBlock(0x1f00+128);
  8289  1023  3080               	movlw	128
  8290  1024  00F1               	movwf	FLASH_EraseBlock@startAddr
  8291  1025  301F               	movlw	31
  8292  1026  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  8293  1027  319D  25C2         	fcall	_FLASH_EraseBlock
  8294  1029  0008               	return
  8295  102A                     __end_of_my_flash_read_system_erase:	
  8296                           
  8297                           	psect	text19
  8298  1DC2                     __ptext19:	
  8299 ;; *************** function _FLASH_EraseBlock *****************
  8300 ;; Defined at:
  8301 ;;		line 147 in file "mcc_generated_files/memory.c"
  8302 ;; Parameters:    Size  Location     Type
  8303 ;;  startAddr       2    1[COMMON] unsigned int 
  8304 ;; Auto vars:     Size  Location     Type
  8305 ;;  GIEBitValue     1    3[COMMON] unsigned char 
  8306 ;; Return value:  Size  Location     Type
  8307 ;;                  1    wreg      void 
  8308 ;; Registers used:
  8309 ;;		wreg, status,2, status,0
  8310 ;; Tracked objects:
  8311 ;;		On entry : 0/0
  8312 ;;		On exit  : 0/0
  8313 ;;		Unchanged: 0/0
  8314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8315 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8316 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8318 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8319 ;;Total ram usage:        3 bytes
  8320 ;; Hardware stack levels used:    1
  8321 ;; Hardware stack levels required when called:    1
  8322 ;; This function calls:
  8323 ;;		Nothing
  8324 ;; This function is called by:
  8325 ;;		_my_flash_read_system_erase
  8326 ;;		_FLASH_WriteBlock
  8327 ;; This function uses a non-reentrant model
  8328 ;;
  8329                           
  8330                           
  8331                           ;psect for function _FLASH_EraseBlock
  8332  1DC2                     _FLASH_EraseBlock:	
  8333                           
  8334                           ;memory.c: 149: uint8_t GIEBitValue = INTCONbits.GIE;
  8335                           
  8336                           ;incstack = 0
  8337                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  8338  1DC2  3000               	movlw	0
  8339  1DC3  1B8B               	btfsc	11,7	;volatile
  8340  1DC4  3001               	movlw	1
  8341  1DC5  00F3               	movwf	FLASH_EraseBlock@GIEBitValue
  8342                           
  8343                           ;memory.c: 152: INTCONbits.GIE = 0;
  8344  1DC6  138B               	bcf	11,7	;volatile
  8345                           
  8346                           ;memory.c: 154: PMADRL = (startAddr & 0xFF);
  8347  1DC7  0871               	movf	FLASH_EraseBlock@startAddr,w
  8348  1DC8  0023               	movlb	3	; select bank3
  8349  1DC9  0091               	movwf	17	;volatile
  8350                           
  8351                           ;memory.c: 156: PMADRH = ((startAddr & 0xFF00) >> 8);
  8352  1DCA  0872               	movf	FLASH_EraseBlock@startAddr+1,w
  8353  1DCB  0092               	movwf	18	;volatile
  8354                           
  8355                           ;memory.c: 159: PMCON1bits.CFGS = 0;
  8356  1DCC  1315               	bcf	21,6	;volatile
  8357                           
  8358                           ;memory.c: 160: PMCON1bits.FREE = 1;
  8359  1DCD  1615               	bsf	21,4	;volatile
  8360                           
  8361                           ;memory.c: 161: PMCON1bits.WREN = 1;
  8362  1DCE  1515               	bsf	21,2	;volatile
  8363                           
  8364                           ;memory.c: 164: PMCON2 = 0x55;
  8365  1DCF  3055               	movlw	85
  8366  1DD0  0096               	movwf	22	;volsfr
  8367                           
  8368                           ;memory.c: 165: PMCON2 = 0xAA;
  8369  1DD1  30AA               	movlw	170
  8370  1DD2  0096               	movwf	22	;volsfr
  8371                           
  8372                           ;memory.c: 166: PMCON1bits.WR = 1;
  8373  1DD3  1495               	bsf	21,1	;volatile
  8374                           
  8375                           ;memory.c: 167: __nop();
  8376  1DD4  0000               	nop
  8377                           
  8378                           ;memory.c: 168: __nop();
  8379  1DD5  0000               	nop
  8380                           
  8381                           ;memory.c: 170: PMCON1bits.WREN = 0;
  8382  1DD6  0023               	movlb	3	; select bank3
  8383  1DD7  1115               	bcf	21,2	;volatile
  8384                           
  8385                           ;memory.c: 171: INTCONbits.GIE = GIEBitValue;
  8386  1DD8  0C73               	rrf	FLASH_EraseBlock@GIEBitValue,w
  8387  1DD9  1C03               	skipc
  8388  1DDA  138B               	bcf	11,7	;volatile
  8389  1DDB  1803               	skipnc
  8390  1DDC  178B               	bsf	11,7	;volatile
  8391  1DDD  0008               	return
  8392  1DDE                     __end_of_FLASH_EraseBlock:	
  8393                           
  8394                           	psect	text20
  8395  1113                     __ptext20:	
  8396 ;; *************** function _modbus_response_illgeal_function *****************
  8397 ;; Defined at:
  8398 ;;		line 8 in file "src/api/modbus.c"
  8399 ;; Parameters:    Size  Location     Type
  8400 ;;  buf             1    wreg     PTR unsigned char 
  8401 ;;		 -> modbusBuf(32), 
  8402 ;;  errcode         1   12[BANK0 ] unsigned char 
  8403 ;; Auto vars:     Size  Location     Type
  8404 ;;  buf             1   14[BANK0 ] PTR unsigned char 
  8405 ;;		 -> modbusBuf(32), 
  8406 ;;  pmdbs           1   15[BANK0 ] PTR struct .
  8407 ;;		 -> modbusBuf(32), 
  8408 ;; Return value:  Size  Location     Type
  8409 ;;                  1    wreg      void 
  8410 ;; Registers used:
  8411 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8412 ;; Tracked objects:
  8413 ;;		On entry : 0/0
  8414 ;;		On exit  : 0/0
  8415 ;;		Unchanged: 0/0
  8416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8417 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8418 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8419 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8420 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8421 ;;Total ram usage:        4 bytes
  8422 ;; Hardware stack levels used:    1
  8423 ;; Hardware stack levels required when called:    3
  8424 ;; This function calls:
  8425 ;;		_crc_append
  8426 ;;		_uart_send_len
  8427 ;; This function is called by:
  8428 ;;		_modbus_response_process
  8429 ;; This function uses a non-reentrant model
  8430 ;;
  8431                           
  8432                           
  8433                           ;psect for function _modbus_response_illgeal_function
  8434  1113                     _modbus_response_illgeal_function:	
  8435                           
  8436                           ;incstack = 0
  8437                           ; Regs used in _modbus_response_illgeal_function: [wreg+fsr1l+fsr1h+status,2+status,0+pc
      +                          lath+cstack]
  8438                           ;modbus_response_illgeal_function@buf stored from wreg
  8439  1113  0020               	movlb	0	; select bank0
  8440  1114  00AE               	movwf	modbus_response_illgeal_function@buf
  8441                           
  8442                           ;modbus.c: 10: st_modbusErrRespStructDef* pmdbs=(st_modbusErrRespStructDef*)buf;
  8443  1115  082E               	movf	modbus_response_illgeal_function@buf,w
  8444  1116  00AD               	movwf	??_modbus_response_illgeal_function
  8445  1117  082D               	movf	??_modbus_response_illgeal_function,w
  8446  1118  00AF               	movwf	modbus_response_illgeal_function@pmdbs
  8447                           
  8448                           ;modbus.c: 11: if(pmdbs->addr==0x00)return;
  8449  1119  082F               	movf	modbus_response_illgeal_function@pmdbs,w
  8450  111A  0086               	movwf	6
  8451  111B  3001               	movlw	1	; select bank2/3
  8452  111C  0087               	movwf	7
  8453  111D  0801               	movf	1,w
  8454  111E  1903               	btfsc	3,2
  8455  111F  0008               	return
  8456                           
  8457                           ;modbus.c: 12: pmdbs->addr=sysData.id;
  8458  1120  305C               	movlw	92
  8459  1121  0086               	movwf	6
  8460  1122  3023               	movlw	35
  8461  1123  0087               	movwf	7
  8462  1124  3142               	addfsr 1,2
  8463  1125  0801               	movf	1,w
  8464  1126  00AD               	movwf	??_modbus_response_illgeal_function
  8465  1127  082F               	movf	modbus_response_illgeal_function@pmdbs,w
  8466  1128  0086               	movwf	6
  8467  1129  3001               	movlw	1	; select bank2/3
  8468  112A  0087               	movwf	7
  8469  112B  082D               	movf	??_modbus_response_illgeal_function,w
  8470  112C  0081               	movwf	1
  8471                           
  8472                           ;modbus.c: 13: if(errcode){
  8473  112D  082C               	movf	modbus_response_illgeal_function@errcode,w
  8474  112E  1903               	btfsc	3,2
  8475  112F  2938               	goto	l786
  8476                           
  8477                           ;modbus.c: 14: pmdbs->func+=0x80;
  8478  1130  3080               	movlw	128
  8479  1131  00AD               	movwf	??_modbus_response_illgeal_function
  8480  1132  0A2F               	incf	modbus_response_illgeal_function@pmdbs,w
  8481  1133  0086               	movwf	6
  8482  1134  3001               	movlw	1	; select bank2/3
  8483  1135  0087               	movwf	7
  8484  1136  082D               	movf	??_modbus_response_illgeal_function,w
  8485  1137  0781               	addwf	1,f
  8486  1138                     l786:	
  8487                           
  8488                           ;modbus.c: 15: };modbus.c: 16: pmdbs->errcord=errcode;
  8489  1138  082C               	movf	modbus_response_illgeal_function@errcode,w
  8490  1139  00AD               	movwf	??_modbus_response_illgeal_function
  8491  113A  082F               	movf	modbus_response_illgeal_function@pmdbs,w
  8492  113B  3E02               	addlw	2
  8493  113C  0086               	movwf	6
  8494  113D  3001               	movlw	1	; select bank2/3
  8495  113E  0087               	movwf	7
  8496  113F  082D               	movf	??_modbus_response_illgeal_function,w
  8497  1140  0081               	movwf	1
  8498                           
  8499                           ;modbus.c: 17: crc_append(buf,3);
  8500  1141  082E               	movf	modbus_response_illgeal_function@buf,w
  8501  1142  00A6               	movwf	crc_append@message
  8502  1143  3001               	movlw	1
  8503  1144  00A7               	movwf	crc_append@message+1
  8504  1145  3003               	movlw	3
  8505  1146  00A8               	movwf	crc_append@n
  8506  1147  3000               	movlw	0
  8507  1148  00A9               	movwf	crc_append@n+1
  8508  1149  319E  2633  3191   	fcall	_crc_append
  8509                           
  8510                           ;modbus.c: 18: uart_send_len(buf,5);
  8511  114C  3005               	movlw	5
  8512  114D  0020               	movlb	0	; select bank0
  8513  114E  00AD               	movwf	??_modbus_response_illgeal_function
  8514  114F  082D               	movf	??_modbus_response_illgeal_function,w
  8515  1150  00F8               	movwf	uart_send_len@len
  8516  1151  082E               	movf	modbus_response_illgeal_function@buf,w
  8517  1152  3190  2099         	fcall	_uart_send_len
  8518  1154  0008               	return
  8519  1155                     __end_of_modbus_response_illgeal_function:	
  8520                           
  8521                           	psect	text21
  8522  1668                     __ptext21:	
  8523 ;; *************** function _modbus_response_command *****************
  8524 ;; Defined at:
  8525 ;;		line 181 in file "src/api/modbus.c"
  8526 ;; Parameters:    Size  Location     Type
  8527 ;;  rbuf            1    wreg     PTR unsigned char 
  8528 ;;		 -> modbusBuf(32), 
  8529 ;; Auto vars:     Size  Location     Type
  8530 ;;  rbuf            1   21[BANK0 ] PTR unsigned char 
  8531 ;;		 -> modbusBuf(32), 
  8532 ;;  tempData        2   22[BANK0 ] unsigned int 
  8533 ;;  startAddr       2   16[BANK0 ] unsigned int 
  8534 ;;  tmpAddr         2   14[BANK0 ] unsigned int 
  8535 ;;  len             1   20[BANK0 ] unsigned char 
  8536 ;;  pmdbs           1   19[BANK0 ] PTR struct .
  8537 ;;		 -> modbusBuf(32), 
  8538 ;;  i               1   18[BANK0 ] unsigned char 
  8539 ;; Return value:  Size  Location     Type
  8540 ;;                  1    wreg      void 
  8541 ;; Registers used:
  8542 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8543 ;; Tracked objects:
  8544 ;;		On entry : 0/0
  8545 ;;		On exit  : 0/0
  8546 ;;		Unchanged: 0/0
  8547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8549 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8550 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8551 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8552 ;;Total ram usage:       12 bytes
  8553 ;; Hardware stack levels used:    1
  8554 ;; Hardware stack levels required when called:    3
  8555 ;; This function calls:
  8556 ;;		_crc_append
  8557 ;;		_getRegisterVal
  8558 ;;		_uart_send_len
  8559 ;; This function is called by:
  8560 ;;		_modbus_response_process
  8561 ;; This function uses a non-reentrant model
  8562 ;;
  8563                           
  8564                           
  8565                           ;psect for function _modbus_response_command
  8566  1668                     _modbus_response_command:	
  8567                           
  8568                           ;incstack = 0
  8569                           ; Regs used in _modbus_response_command: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8570                           ;modbus_response_command@rbuf stored from wreg
  8571  1668  0020               	movlb	0	; select bank0
  8572  1669  00B5               	movwf	modbus_response_command@rbuf
  8573                           
  8574                           ;modbus.c: 182: uint8_t i;;modbus.c: 183: uint16_t startAddr=0;
  8575  166A  01B0               	clrf	modbus_response_command@startAddr
  8576  166B  01B1               	clrf	modbus_response_command@startAddr+1
  8577                           
  8578                           ;modbus.c: 184: uint16_t tempData,tmpAddr;;modbus.c: 185: uint8_t len=0;
  8579  166C  01B4               	clrf	modbus_response_command@len
  8580                           
  8581                           ;modbus.c: 186: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)rbuf;
  8582  166D  0835               	movf	modbus_response_command@rbuf,w
  8583  166E  00AC               	movwf	??_modbus_response_command
  8584  166F  082C               	movf	??_modbus_response_command,w
  8585  1670  00B3               	movwf	modbus_response_command@pmdbs
  8586                           
  8587                           ;modbus.c: 187: if(pmdbs->addr!=sysData.id || pmdbs->addr==0)return;
  8588  1671  305C               	movlw	92
  8589  1672  0086               	movwf	6
  8590  1673  3023               	movlw	35
  8591  1674  0087               	movwf	7
  8592  1675  3142               	addfsr 1,2
  8593  1676  0833               	movf	modbus_response_command@pmdbs,w
  8594  1677  0084               	movwf	4
  8595  1678  3001               	movlw	1	; select bank2/3
  8596  1679  0085               	movwf	5
  8597  167A  0800               	movf	0,w
  8598  167B  0601               	xorwf	1,w
  8599  167C  1D03               	skipz
  8600  167D  0008               	return
  8601  167E  0833               	movf	modbus_response_command@pmdbs,w
  8602  167F  0086               	movwf	6
  8603  1680  3001               	movlw	1	; select bank2/3
  8604  1681  0087               	movwf	7
  8605  1682  0801               	movf	1,w
  8606  1683  1903               	btfsc	3,2
  8607  1684  0008               	return
  8608                           
  8609                           ;modbus.c: 188: startAddr=pmdbs->addr_hi;
  8610  1685  0833               	movf	modbus_response_command@pmdbs,w
  8611  1686  3E02               	addlw	2
  8612  1687  0086               	movwf	6
  8613  1688  3001               	movlw	1	; select bank2/3
  8614  1689  0087               	movwf	7
  8615  168A  0801               	movf	1,w
  8616  168B  00AC               	movwf	??_modbus_response_command
  8617  168C  01AD               	clrf	??_modbus_response_command+1
  8618  168D  082C               	movf	??_modbus_response_command,w
  8619  168E  00B0               	movwf	modbus_response_command@startAddr
  8620  168F  082D               	movf	??_modbus_response_command+1,w
  8621  1690  00B1               	movwf	modbus_response_command@startAddr+1
  8622                           
  8623                           ;modbus.c: 189: startAddr<<=8;
  8624  1691  3008               	movlw	8
  8625  1692                     u4405:	
  8626  1692  35B0               	lslf	modbus_response_command@startAddr,f
  8627  1693  0DB1               	rlf	modbus_response_command@startAddr+1,f
  8628  1694  0B89               	decfsz	9,f
  8629  1695  2E92               	goto	u4405
  8630                           
  8631                           ;modbus.c: 190: startAddr |= pmdbs->addr_lo;
  8632  1696  0833               	movf	modbus_response_command@pmdbs,w
  8633  1697  3E03               	addlw	3
  8634  1698  0086               	movwf	6
  8635  1699  3001               	movlw	1	; select bank2/3
  8636  169A  0087               	movwf	7
  8637  169B  0801               	movf	1,w
  8638  169C  00AC               	movwf	??_modbus_response_command
  8639  169D  01AD               	clrf	??_modbus_response_command+1
  8640  169E  082C               	movf	??_modbus_response_command,w
  8641  169F  04B0               	iorwf	modbus_response_command@startAddr,f
  8642  16A0  082D               	movf	??_modbus_response_command+1,w
  8643  16A1  04B1               	iorwf	modbus_response_command@startAddr+1,f
  8644                           
  8645                           ;modbus.c: 191: tmpAddr=startAddr;
  8646  16A2  0831               	movf	modbus_response_command@startAddr+1,w
  8647  16A3  00AF               	movwf	modbus_response_command@tmpAddr+1
  8648  16A4  0830               	movf	modbus_response_command@startAddr,w
  8649  16A5  00AE               	movwf	modbus_response_command@tmpAddr
  8650                           
  8651                           ;modbus.c: 192: len = pmdbs->len_lo;
  8652  16A6  0833               	movf	modbus_response_command@pmdbs,w
  8653  16A7  0086               	movwf	6
  8654  16A8  3001               	movlw	1	; select bank2/3
  8655  16A9  0087               	movwf	7
  8656  16AA  3001               	movlw	1	; select bank2/3
  8657  16AB  3F45               	moviw [5]fsr1
  8658  16AC  00B4               	movwf	modbus_response_command@len
  8659                           
  8660                           ;modbus.c: 193: len<<=1;
  8661  16AD  1003               	clrc
  8662  16AE  0DB4               	rlf	modbus_response_command@len,f
  8663                           
  8664                           ;modbus.c: 194: if(len>32)len=32;
  8665  16AF  3021               	movlw	33
  8666  16B0  0234               	subwf	modbus_response_command@len,w
  8667  16B1  1C03               	skipc
  8668  16B2  2EB7               	goto	l4971
  8669  16B3  3020               	movlw	32
  8670  16B4  00AC               	movwf	??_modbus_response_command
  8671  16B5  082C               	movf	??_modbus_response_command,w
  8672  16B6  00B4               	movwf	modbus_response_command@len
  8673  16B7                     l4971:	
  8674                           
  8675                           ;modbus.c: 195: for(i=0;i<len;i=i+2,tmpAddr++){
  8676  16B7  01B2               	clrf	modbus_response_command@i
  8677  16B8                     l4983:	
  8678  16B8  0834               	movf	modbus_response_command@len,w
  8679  16B9  0232               	subwf	modbus_response_command@i,w
  8680  16BA  1803               	btfsc	3,0
  8681  16BB  2EEA               	goto	l4985
  8682                           
  8683                           ;modbus.c: 196: getRegisterVal(tmpAddr,&tempData);
  8684  16BC  082F               	movf	modbus_response_command@tmpAddr+1,w
  8685  16BD  00F2               	movwf	getRegisterVal@addr+1
  8686  16BE  082E               	movf	modbus_response_command@tmpAddr,w
  8687  16BF  00F1               	movwf	getRegisterVal@addr
  8688  16C0  3036               	movlw	(low (modbus_response_command@tempData| 0))& (0+255)
  8689  16C1  00AC               	movwf	??_modbus_response_command
  8690  16C2  082C               	movf	??_modbus_response_command,w
  8691  16C3  00F3               	movwf	getRegisterVal@tempData
  8692  16C4  318E  26B3  3196   	fcall	_getRegisterVal
  8693                           
  8694                           ;modbus.c: 197: rbuf[i+3] = (uint8_t)(tempData >> 8);
  8695  16C7  0020               	movlb	0	; select bank0
  8696  16C8  0837               	movf	modbus_response_command@tempData+1,w
  8697  16C9  00AC               	movwf	??_modbus_response_command
  8698  16CA  0832               	movf	modbus_response_command@i,w
  8699  16CB  3E03               	addlw	3
  8700  16CC  0735               	addwf	modbus_response_command@rbuf,w
  8701  16CD  00AD               	movwf	??_modbus_response_command+1
  8702  16CE  082D               	movf	??_modbus_response_command+1,w
  8703  16CF  0086               	movwf	6
  8704  16D0  3001               	movlw	1	; select bank2/3
  8705  16D1  0087               	movwf	7
  8706  16D2  082C               	movf	??_modbus_response_command,w
  8707  16D3  0081               	movwf	1
  8708                           
  8709                           ;modbus.c: 198: rbuf[i+4] = (uint8_t)(tempData & 0xff);
  8710  16D4  0836               	movf	modbus_response_command@tempData,w
  8711  16D5  00AC               	movwf	??_modbus_response_command
  8712  16D6  0832               	movf	modbus_response_command@i,w
  8713  16D7  3E04               	addlw	4
  8714  16D8  0735               	addwf	modbus_response_command@rbuf,w
  8715  16D9  00AD               	movwf	??_modbus_response_command+1
  8716  16DA  082D               	movf	??_modbus_response_command+1,w
  8717  16DB  0086               	movwf	6
  8718  16DC  3001               	movlw	1	; select bank2/3
  8719  16DD  0087               	movwf	7
  8720  16DE  082C               	movf	??_modbus_response_command,w
  8721  16DF  0081               	movwf	1
  8722  16E0  0832               	movf	modbus_response_command@i,w
  8723  16E1  3E02               	addlw	2
  8724  16E2  00AC               	movwf	??_modbus_response_command
  8725  16E3  082C               	movf	??_modbus_response_command,w
  8726  16E4  00B2               	movwf	modbus_response_command@i
  8727  16E5  3001               	movlw	1
  8728  16E6  07AE               	addwf	modbus_response_command@tmpAddr,f
  8729  16E7  3000               	movlw	0
  8730  16E8  3DAF               	addwfc	modbus_response_command@tmpAddr+1,f
  8731  16E9  2EB8               	goto	l4983
  8732  16EA                     l4985:	
  8733                           
  8734                           ;modbus.c: 200: };modbus.c: 201: rbuf[0] = sysData.id;
  8735  16EA  305C               	movlw	92
  8736  16EB  0086               	movwf	6
  8737  16EC  3023               	movlw	35
  8738  16ED  0087               	movwf	7
  8739  16EE  3142               	addfsr 1,2
  8740  16EF  0801               	movf	1,w
  8741  16F0  00AC               	movwf	??_modbus_response_command
  8742  16F1  0835               	movf	modbus_response_command@rbuf,w
  8743  16F2  0086               	movwf	6
  8744  16F3  3001               	movlw	1	; select bank2/3
  8745  16F4  0087               	movwf	7
  8746  16F5  082C               	movf	??_modbus_response_command,w
  8747  16F6  0081               	movwf	1
  8748                           
  8749                           ;modbus.c: 202: rbuf[1] = 3;
  8750  16F7  3003               	movlw	3
  8751  16F8  00AC               	movwf	??_modbus_response_command
  8752  16F9  0A35               	incf	modbus_response_command@rbuf,w
  8753  16FA  0086               	movwf	6
  8754  16FB  3001               	movlw	1	; select bank2/3
  8755  16FC  0087               	movwf	7
  8756  16FD  082C               	movf	??_modbus_response_command,w
  8757  16FE  0081               	movwf	1
  8758                           
  8759                           ;modbus.c: 203: rbuf[2] = len;
  8760  16FF  0834               	movf	modbus_response_command@len,w
  8761  1700  00AC               	movwf	??_modbus_response_command
  8762  1701  0835               	movf	modbus_response_command@rbuf,w
  8763  1702  3E02               	addlw	2
  8764  1703  0086               	movwf	6
  8765  1704  3001               	movlw	1	; select bank2/3
  8766  1705  0087               	movwf	7
  8767  1706  082C               	movf	??_modbus_response_command,w
  8768  1707  0081               	movwf	1
  8769                           
  8770                           ;modbus.c: 204: len += 3;
  8771  1708  3003               	movlw	3
  8772  1709  00AC               	movwf	??_modbus_response_command
  8773  170A  082C               	movf	??_modbus_response_command,w
  8774  170B  07B4               	addwf	modbus_response_command@len,f
  8775                           
  8776                           ;modbus.c: 205: crc_append(rbuf,len);
  8777  170C  0835               	movf	modbus_response_command@rbuf,w
  8778  170D  00A6               	movwf	crc_append@message
  8779  170E  3001               	movlw	1
  8780  170F  00A7               	movwf	crc_append@message+1
  8781  1710  0834               	movf	modbus_response_command@len,w
  8782  1711  00AC               	movwf	??_modbus_response_command
  8783  1712  01AD               	clrf	??_modbus_response_command+1
  8784  1713  082C               	movf	??_modbus_response_command,w
  8785  1714  00A8               	movwf	crc_append@n
  8786  1715  082D               	movf	??_modbus_response_command+1,w
  8787  1716  00A9               	movwf	crc_append@n+1
  8788  1717  319E  2633  3196   	fcall	_crc_append
  8789                           
  8790                           ;modbus.c: 206: len += 2;
  8791  171A  3002               	movlw	2
  8792  171B  0020               	movlb	0	; select bank0
  8793  171C  00AC               	movwf	??_modbus_response_command
  8794  171D  082C               	movf	??_modbus_response_command,w
  8795  171E  07B4               	addwf	modbus_response_command@len,f
  8796                           
  8797                           ;modbus.c: 207: uart_send_len(rbuf,len);
  8798  171F  0834               	movf	modbus_response_command@len,w
  8799  1720  00AC               	movwf	??_modbus_response_command
  8800  1721  082C               	movf	??_modbus_response_command,w
  8801  1722  00F8               	movwf	uart_send_len@len
  8802  1723  0835               	movf	modbus_response_command@rbuf,w
  8803  1724  3190  2099         	fcall	_uart_send_len
  8804  1726  0008               	return
  8805  1727                     __end_of_modbus_response_command:	
  8806                           
  8807                           	psect	text22
  8808  1099                     __ptext22:	
  8809 ;; *************** function _uart_send_len *****************
  8810 ;; Defined at:
  8811 ;;		line 41 in file "src/api/my_uart.c"
  8812 ;; Parameters:    Size  Location     Type
  8813 ;;  buf             1    wreg     PTR unsigned char 
  8814 ;;		 -> modbusBuf(32), 
  8815 ;;  len             1    8[COMMON] unsigned char 
  8816 ;; Auto vars:     Size  Location     Type
  8817 ;;  buf             1   11[COMMON] PTR unsigned char 
  8818 ;;		 -> modbusBuf(32), 
  8819 ;; Return value:  Size  Location     Type
  8820 ;;                  1    wreg      void 
  8821 ;; Registers used:
  8822 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8823 ;; Tracked objects:
  8824 ;;		On entry : 0/0
  8825 ;;		On exit  : 0/0
  8826 ;;		Unchanged: 0/0
  8827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8828 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8829 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8830 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8831 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8832 ;;Total ram usage:        4 bytes
  8833 ;; Hardware stack levels used:    1
  8834 ;; Hardware stack levels required when called:    2
  8835 ;; This function calls:
  8836 ;;		_m_mem_cpy_len
  8837 ;; This function is called by:
  8838 ;;		_modbus_response_illgeal_function
  8839 ;;		_modbus_response_write_single_register
  8840 ;;		_modbus_response_write_mult_register
  8841 ;;		_modbus_response_command
  8842 ;;		_main
  8843 ;; This function uses a non-reentrant model
  8844 ;;
  8845                           
  8846                           
  8847                           ;psect for function _uart_send_len
  8848  1099                     _uart_send_len:	
  8849                           
  8850                           ;incstack = 0
  8851                           ; Regs used in _uart_send_len: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8852                           ;uart_send_len@buf stored from wreg
  8853  1099  00FB               	movwf	uart_send_len@buf
  8854                           
  8855                           ;my_uart.c: 45: if(!TXSTAbits.TXEN)TXSTAbits.TXEN=1;
  8856  109A  0023               	movlb	3	; select bank3
  8857  109B  1E9E               	btfss	30,5	;volatile
  8858  109C  169E               	bsf	30,5	;volatile
  8859                           
  8860                           ;my_uart.c: 47: if(txBufLen>0)return;
  8861  109D  0020               	movlb	0	; select bank0
  8862  109E  0866               	movf	_txBufLen,w
  8863  109F  1D03               	btfss	3,2
  8864  10A0  0008               	return
  8865                           
  8866                           ;my_uart.c: 48: if(len>sizeof(txBuf))len=sizeof(txBuf);
  8867  10A1  3041               	movlw	65
  8868  10A2  0278               	subwf	uart_send_len@len,w
  8869  10A3  1C03               	skipc
  8870  10A4  28A9               	goto	l4787
  8871  10A5  3040               	movlw	64
  8872  10A6  00F9               	movwf	??_uart_send_len
  8873  10A7  0879               	movf	??_uart_send_len,w
  8874  10A8  00F8               	movwf	uart_send_len@len
  8875  10A9                     l4787:	
  8876                           
  8877                           ;my_uart.c: 49: m_mem_cpy_len(txBuf,buf,len);
  8878  10A9  30A0               	movlw	low _txBuf
  8879  10AA  00F1               	movwf	m_mem_cpy_len@d
  8880  10AB  3001               	movlw	high _txBuf
  8881  10AC  00F2               	movwf	m_mem_cpy_len@d+1
  8882  10AD  087B               	movf	uart_send_len@buf,w
  8883  10AE  00F3               	movwf	m_mem_cpy_len@s
  8884  10AF  3001               	movlw	1
  8885  10B0  00F4               	movwf	m_mem_cpy_len@s+1
  8886  10B1  0878               	movf	uart_send_len@len,w
  8887  10B2  00F9               	movwf	??_uart_send_len
  8888  10B3  01FA               	clrf	??_uart_send_len+1
  8889  10B4  0879               	movf	??_uart_send_len,w
  8890  10B5  00F5               	movwf	m_mem_cpy_len@len
  8891  10B6  087A               	movf	??_uart_send_len+1,w
  8892  10B7  00F6               	movwf	m_mem_cpy_len@len+1
  8893  10B8  319E  2616  3190   	fcall	_m_mem_cpy_len
  8894                           
  8895                           ;my_uart.c: 50: if(len==0)return;
  8896  10BB  0878               	movf	uart_send_len@len,w
  8897  10BC  1903               	btfsc	3,2
  8898  10BD  0008               	return
  8899  10BE                     l511:	
  8900                           ;my_uart.c: 51: while(0 == PIR1bits.TXIF);
  8901                           
  8902  10BE  0020               	movlb	0	; select bank0
  8903  10BF  1E11               	btfss	17,4	;volatile
  8904  10C0  28BE               	goto	l511
  8905                           
  8906                           ;my_uart.c: 52: TXREG=txBuf[0];
  8907  10C1  0023               	movlb	3	; select bank3
  8908  10C2  0820               	movf	_txBuf^(0+384),w
  8909  10C3  009A               	movwf	26	;volatile
  8910                           
  8911                           ;my_uart.c: 53: txBufLen=len;
  8912  10C4  0878               	movf	uart_send_len@len,w
  8913  10C5  00F9               	movwf	??_uart_send_len
  8914  10C6  0879               	movf	??_uart_send_len,w
  8915  10C7  0020               	movlb	0	; select bank0
  8916  10C8  00E6               	movwf	_txBufLen
  8917                           
  8918                           ;my_uart.c: 54: txBufLen--;
  8919  10C9  3001               	movlw	1
  8920  10CA  02E6               	subwf	_txBufLen,f
  8921                           
  8922                           ;my_uart.c: 55: txCount++;
  8923  10CB  3001               	movlw	1
  8924  10CC  00F9               	movwf	??_uart_send_len
  8925  10CD  0879               	movf	??_uart_send_len,w
  8926  10CE  07E5               	addwf	_txCount,f
  8927                           
  8928                           ;my_uart.c: 56: if(!PIE1bits.TXIE)PIE1bits.TXIE=1;
  8929  10CF  0021               	movlb	1	; select bank1
  8930  10D0  1A11               	btfsc	17,4	;volatile
  8931  10D1  0008               	return
  8932  10D2  1611               	bsf	17,4	;volatile
  8933  10D3  0008               	return
  8934  10D4                     __end_of_uart_send_len:	
  8935                           
  8936                           	psect	text23
  8937  0EB3                     __ptext23:	
  8938 ;; *************** function _getRegisterVal *****************
  8939 ;; Defined at:
  8940 ;;		line 80 in file "src/api/modbus.c"
  8941 ;; Parameters:    Size  Location     Type
  8942 ;;  addr            2    1[COMMON] unsigned int 
  8943 ;;  tempData        1    3[COMMON] PTR unsigned int 
  8944 ;;		 -> modbus_response_command@tempData(2), 
  8945 ;; Auto vars:     Size  Location     Type
  8946 ;;  t16             2    8[COMMON] unsigned int 
  8947 ;;  tempAddr        1   10[COMMON] unsigned char 
  8948 ;; Return value:  Size  Location     Type
  8949 ;;                  2    1[COMMON] unsigned int 
  8950 ;; Registers used:
  8951 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  8952 ;; Tracked objects:
  8953 ;;		On entry : 0/0
  8954 ;;		On exit  : 0/0
  8955 ;;		Unchanged: 0/0
  8956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8957 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8958 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8959 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8960 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8961 ;;Total ram usage:       10 bytes
  8962 ;; Hardware stack levels used:    1
  8963 ;; Hardware stack levels required when called:    1
  8964 ;; This function calls:
  8965 ;;		Nothing
  8966 ;; This function is called by:
  8967 ;;		_modbus_response_command
  8968 ;; This function uses a non-reentrant model
  8969 ;;
  8970                           
  8971                           
  8972                           ;psect for function _getRegisterVal
  8973  0EB3                     _getRegisterVal:	
  8974                           
  8975                           ;modbus.c: 82: uint16_t t16 = 0;
  8976                           
  8977                           ;incstack = 0
  8978                           ; Regs used in _getRegisterVal: [wreg-fsr1h+status,2+status,0]
  8979  0EB3  01F8               	clrf	getRegisterVal@t16
  8980  0EB4  01F9               	clrf	getRegisterVal@t16+1
  8981                           
  8982                           ;modbus.c: 83: uint8_t tempAddr;;modbus.c: 85: tempAddr = addr & 0xff;
  8983  0EB5  0871               	movf	getRegisterVal@addr,w
  8984  0EB6  00F4               	movwf	??_getRegisterVal
  8985  0EB7  0874               	movf	??_getRegisterVal,w
  8986  0EB8  00FA               	movwf	getRegisterVal@tempAddr
  8987                           
  8988                           ;modbus.c: 86: switch(tempAddr){
  8989  0EB9  2F65               	goto	l3533
  8990  0EBA                     l3499:	
  8991                           ;modbus.c: 87: case 0x01:*tempData = 0100; break;
  8992                           
  8993  0EBA  0873               	movf	getRegisterVal@tempData,w
  8994  0EBB  0086               	movwf	6
  8995  0EBC  0187               	clrf	7
  8996  0EBD  3040               	movlw	64
  8997  0EBE  3FC0               	movwi [0]fsr1
  8998  0EBF  3000               	movlw	0
  8999  0EC0  3FC1               	movwi [1]fsr1
  9000  0EC1  2F72               	goto	l3535
  9001  0EC2                     l3501:	
  9002                           ;modbus.c: 88: case 0x02:*tempData=sysData.id;break;
  9003                           
  9004  0EC2  305C               	movlw	92
  9005  0EC3  0086               	movwf	6
  9006  0EC4  3023               	movlw	35
  9007  0EC5  0087               	movwf	7
  9008  0EC6  3142               	addfsr 1,2
  9009  0EC7  0801               	movf	1,w
  9010  0EC8  00F4               	movwf	??_getRegisterVal
  9011  0EC9  01F5               	clrf	??_getRegisterVal+1
  9012  0ECA  0873               	movf	getRegisterVal@tempData,w
  9013  0ECB  0086               	movwf	6
  9014  0ECC  0187               	clrf	7
  9015  0ECD  0874               	movf	??_getRegisterVal,w
  9016  0ECE  3FC0               	movwi [0]fsr1
  9017  0ECF  0875               	movf	??_getRegisterVal+1,w
  9018  0ED0  3FC1               	movwi [1]fsr1
  9019  0ED1  2F72               	goto	l3535
  9020  0ED2                     l3503:	
  9021                           ;modbus.c: 89: case 0x03:*tempData=(sysData.pidSetFlg1<<8 | sysData.pidSetFlg0);break;
  9022                           
  9023  0ED2  305C               	movlw	92
  9024  0ED3  0084               	movwf	4
  9025  0ED4  3023               	movlw	35
  9026  0ED5  0085               	movwf	5
  9027  0ED6  3101               	addfsr 0,1
  9028  0ED7  0800               	movf	0,w
  9029  0ED8  00F4               	movwf	??_getRegisterVal
  9030  0ED9  305C               	movlw	92
  9031  0EDA  0084               	movwf	4
  9032  0EDB  3023               	movlw	35
  9033  0EDC  0085               	movwf	5
  9034  0EDD  0873               	movf	getRegisterVal@tempData,w
  9035  0EDE  0086               	movwf	6
  9036  0EDF  0187               	clrf	7
  9037  0EE0  0800               	movf	0,w
  9038  0EE1  3FC0               	movwi [0]fsr1
  9039  0EE2  0874               	movf	??_getRegisterVal,w
  9040  0EE3  3FC1               	movwi [1]fsr1
  9041  0EE4  2F72               	goto	l3535
  9042  0EE5                     l3505:	
  9043                           ;modbus.c: 90: case 0x04:*tempData=sysData.pidKp;break;
  9044                           
  9045  0EE5  305C               	movlw	92
  9046  0EE6  0086               	movwf	6
  9047  0EE7  3023               	movlw	35
  9048  0EE8  0087               	movwf	7
  9049  0EE9  3144               	addfsr 1,4
  9050  0EEA  0873               	movf	getRegisterVal@tempData,w
  9051  0EEB  0084               	movwf	4
  9052  0EEC  0185               	clrf	5
  9053  0EED  3F40               	moviw [0]fsr1
  9054  0EEE  3F80               	movwi [0]fsr0
  9055  0EEF  3F41               	moviw [1]fsr1
  9056  0EF0  3F81               	movwi [1]fsr0
  9057  0EF1  2F72               	goto	l3535
  9058  0EF2                     l3507:	
  9059                           ;modbus.c: 91: case 0x05:*tempData=sysData.pidTi;break;
  9060                           
  9061  0EF2  305C               	movlw	92
  9062  0EF3  0086               	movwf	6
  9063  0EF4  3023               	movlw	35
  9064  0EF5  0087               	movwf	7
  9065  0EF6  3146               	addfsr 1,6
  9066  0EF7  0873               	movf	getRegisterVal@tempData,w
  9067  0EF8  0084               	movwf	4
  9068  0EF9  0185               	clrf	5
  9069  0EFA  3F40               	moviw [0]fsr1
  9070  0EFB  3F80               	movwi [0]fsr0
  9071  0EFC  3F41               	moviw [1]fsr1
  9072  0EFD  3F81               	movwi [1]fsr0
  9073  0EFE  2F72               	goto	l3535
  9074  0EFF                     l3509:	
  9075                           ;modbus.c: 92: case 0x06:*tempData=sysData.pidTd;break;
  9076                           
  9077  0EFF  305C               	movlw	92
  9078  0F00  0086               	movwf	6
  9079  0F01  3023               	movlw	35
  9080  0F02  0087               	movwf	7
  9081  0F03  3148               	addfsr 1,8
  9082  0F04  0873               	movf	getRegisterVal@tempData,w
  9083  0F05  0084               	movwf	4
  9084  0F06  0185               	clrf	5
  9085  0F07  3F40               	moviw [0]fsr1
  9086  0F08  3F80               	movwi [0]fsr0
  9087  0F09  3F41               	moviw [1]fsr1
  9088  0F0A  3F81               	movwi [1]fsr0
  9089  0F0B  2F72               	goto	l3535
  9090  0F0C                     l3511:	
  9091                           ;modbus.c: 93: case 0x07:*tempData=rtAdcValueRsLo; break;
  9092                           
  9093  0F0C  0873               	movf	getRegisterVal@tempData,w
  9094  0F0D  0086               	movwf	6
  9095  0F0E  0187               	clrf	7
  9096  0F0F  0020               	movlb	0	; select bank0
  9097  0F10  085F               	movf	_rtAdcValueRsLo,w
  9098  0F11  3FC0               	movwi [0]fsr1
  9099  0F12  0860               	movf	_rtAdcValueRsLo+1,w
  9100  0F13  3FC1               	movwi [1]fsr1
  9101  0F14  2F72               	goto	l3535
  9102  0F15                     l3513:	
  9103                           ;modbus.c: 94: case 0x08:*tempData=rtAdcValueRsHi;break;
  9104                           
  9105  0F15  0873               	movf	getRegisterVal@tempData,w
  9106  0F16  0086               	movwf	6
  9107  0F17  0187               	clrf	7
  9108  0F18  0020               	movlb	0	; select bank0
  9109  0F19  085D               	movf	_rtAdcValueRsHi,w
  9110  0F1A  3FC0               	movwi [0]fsr1
  9111  0F1B  085E               	movf	_rtAdcValueRsHi+1,w
  9112  0F1C  3FC1               	movwi [1]fsr1
  9113  0F1D  2F72               	goto	l3535
  9114  0F1E                     l3515:	
  9115                           ;modbus.c: 95: case 0x09:*tempData=rtAdcValueRcLo;break;
  9116                           
  9117  0F1E  0873               	movf	getRegisterVal@tempData,w
  9118  0F1F  0086               	movwf	6
  9119  0F20  0187               	clrf	7
  9120  0F21  0020               	movlb	0	; select bank0
  9121  0F22  085B               	movf	_rtAdcValueRcLo,w
  9122  0F23  3FC0               	movwi [0]fsr1
  9123  0F24  085C               	movf	_rtAdcValueRcLo+1,w
  9124  0F25  3FC1               	movwi [1]fsr1
  9125  0F26  2F72               	goto	l3535
  9126  0F27                     l3517:	
  9127                           ;modbus.c: 96: case 0x0a:*tempData=rtAdcValueRcHi;break;
  9128                           
  9129  0F27  0873               	movf	getRegisterVal@tempData,w
  9130  0F28  0086               	movwf	6
  9131  0F29  0187               	clrf	7
  9132  0F2A  0020               	movlb	0	; select bank0
  9133  0F2B  0859               	movf	_rtAdcValueRcHi,w
  9134  0F2C  3FC0               	movwi [0]fsr1
  9135  0F2D  085A               	movf	_rtAdcValueRcHi+1,w
  9136  0F2E  3FC1               	movwi [1]fsr1
  9137  0F2F  2F72               	goto	l3535
  9138  0F30                     l3519:	
  9139                           ;modbus.c: 97: case 0x0b:*tempData=resRc;break;
  9140                           
  9141  0F30  0873               	movf	getRegisterVal@tempData,w
  9142  0F31  0086               	movwf	6
  9143  0F32  0187               	clrf	7
  9144  0F33  0020               	movlb	0	; select bank0
  9145  0F34  086E               	movf	_resRc,w
  9146  0F35  3FC0               	movwi [0]fsr1
  9147  0F36  086F               	movf	_resRc+1,w
  9148  0F37  3FC1               	movwi [1]fsr1
  9149  0F38  2F72               	goto	l3535
  9150  0F39                     l3521:	
  9151                           ;modbus.c: 98: case 0x0c:*tempData=resRs;break;
  9152                           
  9153  0F39  0873               	movf	getRegisterVal@tempData,w
  9154  0F3A  0086               	movwf	6
  9155  0F3B  0187               	clrf	7
  9156  0F3C  0020               	movlb	0	; select bank0
  9157  0F3D  086C               	movf	_resRs,w
  9158  0F3E  3FC0               	movwi [0]fsr1
  9159  0F3F  086D               	movf	_resRs+1,w
  9160  0F40  3FC1               	movwi [1]fsr1
  9161  0F41  2F72               	goto	l3535
  9162  0F42                     l3523:	
  9163                           ;modbus.c: 99: case 0x0d:*tempData=rtAdcValueVoFb;break;
  9164                           
  9165  0F42  0873               	movf	getRegisterVal@tempData,w
  9166  0F43  0086               	movwf	6
  9167  0F44  0187               	clrf	7
  9168  0F45  0020               	movlb	0	; select bank0
  9169  0F46  0857               	movf	_rtAdcValueVoFb,w
  9170  0F47  3FC0               	movwi [0]fsr1
  9171  0F48  0858               	movf	_rtAdcValueVoFb+1,w
  9172  0F49  3FC1               	movwi [1]fsr1
  9173  0F4A  2F72               	goto	l3535
  9174  0F4B                     l3525:	
  9175                           ;modbus.c: 100: case 0x0e:*tempData=voExpectMv;break;
  9176                           
  9177  0F4B  0873               	movf	getRegisterVal@tempData,w
  9178  0F4C  0086               	movwf	6
  9179  0F4D  0187               	clrf	7
  9180  0F4E  0021               	movlb	1	; select bank1
  9181  0F4F  0846               	movf	_voExpectMv^(0+128),w
  9182  0F50  3FC0               	movwi [0]fsr1
  9183  0F51  0847               	movf	(_voExpectMv+1)^(0+128),w
  9184  0F52  3FC1               	movwi [1]fsr1
  9185  0F53  2F72               	goto	l3535
  9186  0F54                     l3527:	
  9187                           ;modbus.c: 101: case 0x0f:*tempData=voExpectAdcValue;break;
  9188                           
  9189  0F54  0873               	movf	getRegisterVal@tempData,w
  9190  0F55  0086               	movwf	6
  9191  0F56  0187               	clrf	7
  9192  0F57  0020               	movlb	0	; select bank0
  9193  0F58  0855               	movf	_voExpectAdcValue,w
  9194  0F59  3FC0               	movwi [0]fsr1
  9195  0F5A  0856               	movf	_voExpectAdcValue+1,w
  9196  0F5B  3FC1               	movwi [1]fsr1
  9197  0F5C  2F72               	goto	l3535
  9198  0F5D                     l3529:	
  9199                           ;modbus.c: 102: default: *tempData=0x55aa;break;
  9200                           
  9201  0F5D  0873               	movf	getRegisterVal@tempData,w
  9202  0F5E  0086               	movwf	6
  9203  0F5F  0187               	clrf	7
  9204  0F60  30AA               	movlw	170
  9205  0F61  3FC0               	movwi [0]fsr1
  9206  0F62  3055               	movlw	85
  9207  0F63  3FC1               	movwi [1]fsr1
  9208                           
  9209                           ;modbus.c: 103: }
  9210  0F64  2F72               	goto	l3535
  9211  0F65                     l3533:	
  9212  0F65  087A               	movf	getRegisterVal@tempAddr,w
  9213                           
  9214                           ; Switch size 1, requested type "space"
  9215                           ; Number of cases is 15, Range of values is 1 to 15
  9216                           ; switch strategies available:
  9217                           ; Name         Instructions Cycles
  9218                           ; direct_byte           39     9 (fixed)
  9219                           ; simple_byte           46    24 (average)
  9220                           ; jumptable            263     9 (fixed)
  9221                           ;	Chosen strategy is direct_byte
  9222  0F66  3EFF               	addlw	-1
  9223  0F67  1C03               	skipc
  9224  0F68  2F5D               	goto	l3529
  9225  0F69  0084               	movwf	4
  9226  0F6A  300F               	movlw	15
  9227  0F6B  0204               	subwf	4,w
  9228  0F6C  1803               	skipnc
  9229  0F6D  2F5D               	goto	l3529
  9230  0F6E  3198               	movlp	high S5413
  9231  0F6F  3504               	lslf	4,w
  9232  0F70  3E00               	addlw	low S5413
  9233  0F71  0082               	movwf	2
  9234  0F72                     l3535:	
  9235                           
  9236                           ;modbus.c: 104: if(tempAddr>0x0f && tempAddr < 0x10+30*2){
  9237  0F72  3010               	movlw	16
  9238  0F73  027A               	subwf	getRegisterVal@tempAddr,w
  9239  0F74  1C03               	skipc
  9240  0F75  0008               	return
  9241  0F76  304C               	movlw	76
  9242  0F77  027A               	subwf	getRegisterVal@tempAddr,w
  9243  0F78  1803               	skipnc
  9244  0F79  0008               	return
  9245                           
  9246                           ;modbus.c: 105: tempAddr-=0x10;
  9247  0F7A  3010               	movlw	16
  9248  0F7B  02FA               	subwf	getRegisterVal@tempAddr,f
  9249                           
  9250                           ;modbus.c: 106: if(tempAddr & 0x01){
  9251  0F7C  1C7A               	btfss	getRegisterVal@tempAddr,0
  9252  0F7D  2F95               	goto	l3545
  9253                           
  9254                           ;modbus.c: 107: *tempData=sysData.calibVoMV[tempAddr>>1];
  9255  0F7E  367A               	lsrf	getRegisterVal@tempAddr,w
  9256  0F7F  00F4               	movwf	??_getRegisterVal
  9257  0F80  01F5               	clrf	??_getRegisterVal+1
  9258  0F81  35F4               	lslf	??_getRegisterVal,f
  9259  0F82  0DF5               	rlf	??_getRegisterVal+1,f
  9260  0F83  30A2               	movlw	162
  9261  0F84  00F6               	movwf	??_getRegisterVal+2
  9262  0F85  3023               	movlw	35
  9263  0F86  00F7               	movwf	??_getRegisterVal+3
  9264  0F87  0874               	movf	??_getRegisterVal,w
  9265  0F88  0776               	addwf	??_getRegisterVal+2,w
  9266  0F89  0086               	movwf	6
  9267  0F8A  0875               	movf	??_getRegisterVal+1,w
  9268  0F8B  3D77               	addwfc	??_getRegisterVal+3,w
  9269  0F8C  0087               	movwf	7
  9270  0F8D  0873               	movf	getRegisterVal@tempData,w
  9271  0F8E  0084               	movwf	4
  9272  0F8F  0185               	clrf	5
  9273  0F90  3F40               	moviw [0]fsr1
  9274  0F91  3F80               	movwi [0]fsr0
  9275  0F92  3F41               	moviw [1]fsr1
  9276  0F93  3F81               	movwi [1]fsr0
  9277                           
  9278                           ;modbus.c: 108: }else{
  9279  0F94  0008               	return
  9280  0F95                     l3545:	
  9281                           
  9282                           ;modbus.c: 109: *tempData=sysData.calibRsAdc[tempAddr>>1];
  9283  0F95  367A               	lsrf	getRegisterVal@tempAddr,w
  9284  0F96  00F4               	movwf	??_getRegisterVal
  9285  0F97  01F5               	clrf	??_getRegisterVal+1
  9286  0F98  35F4               	lslf	??_getRegisterVal,f
  9287  0F99  0DF5               	rlf	??_getRegisterVal+1,f
  9288  0F9A  3066               	movlw	102
  9289  0F9B  00F6               	movwf	??_getRegisterVal+2
  9290  0F9C  3023               	movlw	35
  9291  0F9D  00F7               	movwf	??_getRegisterVal+3
  9292  0F9E  0874               	movf	??_getRegisterVal,w
  9293  0F9F  0776               	addwf	??_getRegisterVal+2,w
  9294  0FA0  0086               	movwf	6
  9295  0FA1  0875               	movf	??_getRegisterVal+1,w
  9296  0FA2  3D77               	addwfc	??_getRegisterVal+3,w
  9297  0FA3  0087               	movwf	7
  9298  0FA4  0873               	movf	getRegisterVal@tempData,w
  9299  0FA5  0084               	movwf	4
  9300  0FA6  0185               	clrf	5
  9301  0FA7  3F40               	moviw [0]fsr1
  9302  0FA8  3F80               	movwi [0]fsr0
  9303  0FA9  3F41               	moviw [1]fsr1
  9304  0FAA  3F81               	movwi [1]fsr0
  9305  0FAB  0008               	return
  9306  0FAC                     __end_of_getRegisterVal:	
  9307                           ;modbus.c: 110: };modbus.c: 111: };modbus.c: 112: return t16;;	Return value of _getRegis
      +                          terVal is never used
  9308                           
  9309                           
  9310                           	psect	swtext1
  9311  1800                     __pswtext1:	
  9312  1800                     S5413:	
  9313  1800  318E  2EBA         	ljmp	l3499
  9314  1802  318E  2EC2         	ljmp	l3501
  9315  1804  318E  2ED2         	ljmp	l3503
  9316  1806  318E  2EE5         	ljmp	l3505
  9317  1808  318E  2EF2         	ljmp	l3507
  9318  180A  318E  2EFF         	ljmp	l3509
  9319  180C  318F  2F0C         	ljmp	l3511
  9320  180E  318F  2F15         	ljmp	l3513
  9321  1810  318F  2F1E         	ljmp	l3515
  9322  1812  318F  2F27         	ljmp	l3517
  9323  1814  318F  2F30         	ljmp	l3519
  9324  1816  318F  2F39         	ljmp	l3521
  9325  1818  318F  2F42         	ljmp	l3523
  9326  181A  318F  2F4B         	ljmp	l3525
  9327  181C  318F  2F54         	ljmp	l3527
  9328                           
  9329                           	psect	text24
  9330  1E33                     __ptext24:	
  9331 ;; *************** function _crc_append *****************
  9332 ;; Defined at:
  9333 ;;		line 143 in file "src/depend/crc16.c"
  9334 ;; Parameters:    Size  Location     Type
  9335 ;;  message         2    6[BANK0 ] PTR unsigned char 
  9336 ;;		 -> modbusBuf(32), sysData(132), 
  9337 ;;  n               2    8[BANK0 ] unsigned int 
  9338 ;; Auto vars:     Size  Location     Type
  9339 ;;  crc             2   10[BANK0 ] unsigned int 
  9340 ;; Return value:  Size  Location     Type
  9341 ;;                  1    wreg      void 
  9342 ;; Registers used:
  9343 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9344 ;; Tracked objects:
  9345 ;;		On entry : 0/0
  9346 ;;		On exit  : 0/0
  9347 ;;		Unchanged: 0/0
  9348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9349 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9350 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9351 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9352 ;;      Totals:         5       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9353 ;;Total ram usage:       11 bytes
  9354 ;; Hardware stack levels used:    1
  9355 ;; Hardware stack levels required when called:    2
  9356 ;; This function calls:
  9357 ;;		_crc_sum
  9358 ;; This function is called by:
  9359 ;;		_sys_data_save
  9360 ;;		_modbus_response_illgeal_function
  9361 ;;		_modbus_response_write_single_register
  9362 ;;		_modbus_response_write_mult_register
  9363 ;;		_modbus_response_command
  9364 ;; This function uses a non-reentrant model
  9365 ;;
  9366                           
  9367                           
  9368                           ;psect for function _crc_append
  9369  1E33                     _crc_append:	
  9370                           
  9371                           ;crc16.c: 145: uint16_t crc;;crc16.c: 146: crc = crc_sum(message, n);
  9372                           
  9373                           ;incstack = 0
  9374                           ; Regs used in _crc_append: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9375  1E33  0020               	movlb	0	; select bank0
  9376  1E34  0827               	movf	crc_append@message+1,w
  9377  1E35  00F2               	movwf	crc_sum@buf+1
  9378  1E36  0826               	movf	crc_append@message,w
  9379  1E37  00F1               	movwf	crc_sum@buf
  9380  1E38  0829               	movf	crc_append@n+1,w
  9381  1E39  00F4               	movwf	crc_sum@len+1
  9382  1E3A  0828               	movf	crc_append@n,w
  9383  1E3B  00F3               	movwf	crc_sum@len
  9384  1E3C  3191  21F9         	fcall	_crc_sum
  9385  1E3E  0872               	movf	?_crc_sum+1,w
  9386  1E3F  0020               	movlb	0	; select bank0
  9387  1E40  00AB               	movwf	crc_append@crc+1
  9388  1E41  0871               	movf	?_crc_sum,w
  9389  1E42  00AA               	movwf	crc_append@crc
  9390                           
  9391                           ;crc16.c: 147: message[n] = (uint8_t)(crc & 0xff);
  9392  1E43  0828               	movf	crc_append@n,w
  9393  1E44  0726               	addwf	crc_append@message,w
  9394  1E45  00F7               	movwf	??_crc_append
  9395  1E46  0829               	movf	crc_append@n+1,w
  9396  1E47  3D27               	addwfc	crc_append@message+1,w
  9397  1E48  00F8               	movwf	??_crc_append+1
  9398  1E49  0877               	movf	??_crc_append,w
  9399  1E4A  0086               	movwf	6
  9400  1E4B  0878               	movf	??_crc_append+1,w
  9401  1E4C  0087               	movwf	7
  9402  1E4D  082A               	movf	crc_append@crc,w
  9403  1E4E  0081               	movwf	1
  9404                           
  9405                           ;crc16.c: 148: message[n+1] = (uint8_t)((crc >> 8) & 0xff);
  9406  1E4F  082B               	movf	crc_append@crc+1,w
  9407  1E50  00F7               	movwf	??_crc_append
  9408  1E51  0828               	movf	crc_append@n,w
  9409  1E52  3E01               	addlw	1
  9410  1E53  00F8               	movwf	??_crc_append+1
  9411  1E54  3000               	movlw	0
  9412  1E55  3D29               	addwfc	crc_append@n+1,w
  9413  1E56  00F9               	movwf	??_crc_append+2
  9414  1E57  0878               	movf	??_crc_append+1,w
  9415  1E58  0726               	addwf	crc_append@message,w
  9416  1E59  00FA               	movwf	??_crc_append+3
  9417  1E5A  0879               	movf	??_crc_append+2,w
  9418  1E5B  3D27               	addwfc	crc_append@message+1,w
  9419  1E5C  00FB               	movwf	??_crc_append+4
  9420  1E5D  087A               	movf	??_crc_append+3,w
  9421  1E5E  0086               	movwf	6
  9422  1E5F  087B               	movf	??_crc_append+4,w
  9423  1E60  0087               	movwf	7
  9424  1E61  0877               	movf	??_crc_append,w
  9425  1E62  0081               	movwf	1
  9426  1E63  0008               	return
  9427  1E64                     __end_of_crc_append:	
  9428                           
  9429                           	psect	text25
  9430  102A                     __ptext25:	
  9431 ;; *************** function _crc_verify *****************
  9432 ;; Defined at:
  9433 ;;		line 135 in file "src/depend/crc16.c"
  9434 ;; Parameters:    Size  Location     Type
  9435 ;;  message         2    6[BANK0 ] PTR unsigned char 
  9436 ;;		 -> modbusBuf(32), sysData(132), 
  9437 ;;  n               2    8[BANK0 ] unsigned int 
  9438 ;; Auto vars:     Size  Location     Type
  9439 ;;  expected        2   12[BANK0 ] unsigned int 
  9440 ;;  crccal          2   10[BANK0 ] unsigned int 
  9441 ;; Return value:  Size  Location     Type
  9442 ;;                  1    wreg      unsigned char 
  9443 ;; Registers used:
  9444 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9445 ;; Tracked objects:
  9446 ;;		On entry : 0/0
  9447 ;;		On exit  : 0/0
  9448 ;;		Unchanged: 0/0
  9449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9450 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9451 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9452 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9453 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9454 ;;Total ram usage:       10 bytes
  9455 ;; Hardware stack levels used:    1
  9456 ;; Hardware stack levels required when called:    2
  9457 ;; This function calls:
  9458 ;;		_crc_sum
  9459 ;;		_m_mem_cpy_len
  9460 ;; This function is called by:
  9461 ;;		_sys_data_init
  9462 ;;		_modbus_response_process
  9463 ;; This function uses a non-reentrant model
  9464 ;;
  9465                           
  9466                           
  9467                           ;psect for function _crc_verify
  9468  102A                     _crc_verify:	
  9469                           
  9470                           ;crc16.c: 137: uint16_t expected,crccal;;crc16.c: 138: m_mem_cpy_len((uint8_t*)(&expecte
      +                          d),(message+n-2),2);
  9471                           
  9472                           ;incstack = 0
  9473                           ; Regs used in _crc_verify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9474  102A  302C               	movlw	low crc_verify@expected
  9475  102B  00F1               	movwf	m_mem_cpy_len@d
  9476  102C  3000               	movlw	high crc_verify@expected
  9477  102D  00F2               	movwf	m_mem_cpy_len@d+1
  9478  102E  0020               	movlb	0	; select bank0
  9479  102F  0828               	movf	crc_verify@n,w
  9480  1030  0726               	addwf	crc_verify@message,w
  9481  1031  00F8               	movwf	??_crc_verify
  9482  1032  0829               	movf	crc_verify@n+1,w
  9483  1033  3D27               	addwfc	crc_verify@message+1,w
  9484  1034  00F9               	movwf	??_crc_verify+1
  9485  1035  0878               	movf	??_crc_verify,w
  9486  1036  3EFE               	addlw	254
  9487  1037  00F3               	movwf	m_mem_cpy_len@s
  9488  1038  30FF               	movlw	255
  9489  1039  3D79               	addwfc	??_crc_verify+1,w
  9490  103A  00F4               	movwf	m_mem_cpy_len@s+1
  9491  103B  3002               	movlw	2
  9492  103C  00F5               	movwf	m_mem_cpy_len@len
  9493  103D  3000               	movlw	0
  9494  103E  00F6               	movwf	m_mem_cpy_len@len+1
  9495  103F  319E  2616  3190   	fcall	_m_mem_cpy_len
  9496                           
  9497                           ;crc16.c: 139: crccal=crc_sum(message,n - 2);
  9498  1042  0020               	movlb	0	; select bank0
  9499  1043  0827               	movf	crc_verify@message+1,w
  9500  1044  00F2               	movwf	crc_sum@buf+1
  9501  1045  0826               	movf	crc_verify@message,w
  9502  1046  00F1               	movwf	crc_sum@buf
  9503  1047  0828               	movf	crc_verify@n,w
  9504  1048  3EFE               	addlw	254
  9505  1049  00F3               	movwf	crc_sum@len
  9506  104A  30FF               	movlw	255
  9507  104B  3D29               	addwfc	crc_verify@n+1,w
  9508  104C  00F4               	movwf	crc_sum@len+1
  9509  104D  3191  21F9  3190   	fcall	_crc_sum
  9510  1050  0872               	movf	?_crc_sum+1,w
  9511  1051  0020               	movlb	0	; select bank0
  9512  1052  00AB               	movwf	crc_verify@crccal+1
  9513  1053  0871               	movf	?_crc_sum,w
  9514  1054  00AA               	movwf	crc_verify@crccal
  9515                           
  9516                           ;crc16.c: 140: if(expected!=crccal)return 0;
  9517  1055  082B               	movf	crc_verify@crccal+1,w
  9518  1056  062D               	xorwf	crc_verify@expected+1,w
  9519  1057  1D03               	skipz
  9520  1058  285B               	goto	u4155
  9521  1059  082A               	movf	crc_verify@crccal,w
  9522  105A  062C               	xorwf	crc_verify@expected,w
  9523  105B                     u4155:	
  9524  105B  1903               	skipnz
  9525  105C  285F               	goto	l4823
  9526  105D  3000               	movlw	0
  9527  105E  0008               	return
  9528  105F                     l4823:	
  9529                           
  9530                           ;crc16.c: 141: return 1;
  9531  105F  3001               	movlw	1
  9532  1060  0008               	return
  9533  1061                     __end_of_crc_verify:	
  9534                           
  9535                           	psect	text26
  9536  1E16                     __ptext26:	
  9537 ;; *************** function _m_mem_cpy_len *****************
  9538 ;; Defined at:
  9539 ;;		line 50 in file "src/depend/m_string.c"
  9540 ;; Parameters:    Size  Location     Type
  9541 ;;  d               2    1[COMMON] PTR unsigned char 
  9542 ;;		 -> crc_verify@expected(2), modbusBuf(32), txBuf(64), 
  9543 ;;  s               2    3[COMMON] PTR unsigned char 
  9544 ;;		 -> modbusBuf(32), sysData(132), eusartRxBuffer(32), 
  9545 ;;  len             2    5[COMMON] unsigned int 
  9546 ;; Auto vars:     Size  Location     Type
  9547 ;;		None
  9548 ;; Return value:  Size  Location     Type
  9549 ;;                  1    wreg      void 
  9550 ;; Registers used:
  9551 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9552 ;; Tracked objects:
  9553 ;;		On entry : 0/0
  9554 ;;		On exit  : 0/0
  9555 ;;		Unchanged: 0/0
  9556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9557 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9559 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9560 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9561 ;;Total ram usage:        7 bytes
  9562 ;; Hardware stack levels used:    1
  9563 ;; Hardware stack levels required when called:    1
  9564 ;; This function calls:
  9565 ;;		Nothing
  9566 ;; This function is called by:
  9567 ;;		_uart_send_len
  9568 ;;		_main
  9569 ;;		_crc_verify
  9570 ;; This function uses a non-reentrant model
  9571 ;;
  9572                           
  9573                           
  9574                           ;psect for function _m_mem_cpy_len
  9575  1E16                     _m_mem_cpy_len:	
  9576  1E16                     l4767:	
  9577                           ;m_string.c: 53: while(len)
  9578                           
  9579                           ;incstack = 0
  9580                           ; Regs used in _m_mem_cpy_len: [wreg+fsr1l+fsr1h+status,2+status,0]
  9581                           
  9582  1E16  0875               	movf	m_mem_cpy_len@len,w
  9583  1E17  0476               	iorwf	m_mem_cpy_len@len+1,w
  9584  1E18  1903               	btfsc	3,2
  9585  1E19  0008               	return
  9586                           
  9587                           ;m_string.c: 54: {;m_string.c: 55: *d++=*s++;
  9588  1E1A  0873               	movf	m_mem_cpy_len@s,w
  9589  1E1B  0086               	movwf	6
  9590  1E1C  0874               	movf	m_mem_cpy_len@s+1,w
  9591  1E1D  0087               	movwf	7
  9592  1E1E  0801               	movf	1,w
  9593  1E1F  00F7               	movwf	??_m_mem_cpy_len
  9594  1E20  0871               	movf	m_mem_cpy_len@d,w
  9595  1E21  0086               	movwf	6
  9596  1E22  0872               	movf	m_mem_cpy_len@d+1,w
  9597  1E23  0087               	movwf	7
  9598  1E24  0877               	movf	??_m_mem_cpy_len,w
  9599  1E25  0081               	movwf	1
  9600  1E26  3001               	movlw	1
  9601  1E27  07F3               	addwf	m_mem_cpy_len@s,f
  9602  1E28  3000               	movlw	0
  9603  1E29  3DF4               	addwfc	m_mem_cpy_len@s+1,f
  9604  1E2A  3001               	movlw	1
  9605  1E2B  07F1               	addwf	m_mem_cpy_len@d,f
  9606  1E2C  3000               	movlw	0
  9607  1E2D  3DF2               	addwfc	m_mem_cpy_len@d+1,f
  9608                           
  9609                           ;m_string.c: 56: len--;
  9610  1E2E  3001               	movlw	1
  9611  1E2F  02F5               	subwf	m_mem_cpy_len@len,f
  9612  1E30  3000               	movlw	0
  9613  1E31  3BF6               	subwfb	m_mem_cpy_len@len+1,f
  9614  1E32  2E16               	goto	l4767
  9615  1E33                     __end_of_m_mem_cpy_len:	
  9616                           
  9617                           	psect	text27
  9618  11F9                     __ptext27:	
  9619 ;; *************** function _crc_sum *****************
  9620 ;; Defined at:
  9621 ;;		line 116 in file "src/depend/crc16.c"
  9622 ;; Parameters:    Size  Location     Type
  9623 ;;  buf             2    1[COMMON] PTR unsigned char 
  9624 ;;		 -> modbusBuf(32), sysData(132), 
  9625 ;;  len             2    3[COMMON] unsigned int 
  9626 ;; Auto vars:     Size  Location     Type
  9627 ;;  crc             2    4[BANK0 ] unsigned int 
  9628 ;;  i               2    2[BANK0 ] unsigned int 
  9629 ;;  j               2    0[BANK0 ] unsigned int 
  9630 ;; Return value:  Size  Location     Type
  9631 ;;                  2    1[COMMON] unsigned int 
  9632 ;; Registers used:
  9633 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9634 ;; Tracked objects:
  9635 ;;		On entry : 0/0
  9636 ;;		On exit  : 0/0
  9637 ;;		Unchanged: 0/0
  9638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9639 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9640 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9641 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9642 ;;      Totals:         6       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9643 ;;Total ram usage:       12 bytes
  9644 ;; Hardware stack levels used:    1
  9645 ;; Hardware stack levels required when called:    1
  9646 ;; This function calls:
  9647 ;;		Nothing
  9648 ;; This function is called by:
  9649 ;;		_crc_verify
  9650 ;;		_crc_append
  9651 ;; This function uses a non-reentrant model
  9652 ;;
  9653                           
  9654                           
  9655                           ;psect for function _crc_sum
  9656  11F9                     _crc_sum:	
  9657                           
  9658                           ;crc16.c: 118: uint16_t crc=0xFFFF;
  9659                           
  9660                           ;incstack = 0
  9661                           ; Regs used in _crc_sum: [wreg+fsr1l+fsr1h+status,2+status,0]
  9662  11F9  30FF               	movlw	255
  9663  11FA  0020               	movlb	0	; select bank0
  9664  11FB  00A4               	movwf	crc_sum@crc
  9665  11FC  30FF               	movlw	255
  9666  11FD  00A5               	movwf	crc_sum@crc+1
  9667                           
  9668                           ;crc16.c: 119: uint16_t i, j;;crc16.c: 120: for ( j=0; j<len;j++){
  9669  11FE  01A0               	clrf	crc_sum@j
  9670  11FF  01A1               	clrf	crc_sum@j+1
  9671  1200                     l1062:	
  9672  1200  0874               	movf	crc_sum@len+1,w
  9673  1201  0221               	subwf	crc_sum@j+1,w
  9674  1202  1D03               	skipz
  9675  1203  2A06               	goto	u4075
  9676  1204  0873               	movf	crc_sum@len,w
  9677  1205  0220               	subwf	crc_sum@j,w
  9678  1206                     u4075:	
  9679  1206  1803               	btfsc	3,0
  9680  1207  2A4A               	goto	l4753
  9681                           
  9682                           ;crc16.c: 121: crc=crc ^*buf++;
  9683  1208  0871               	movf	crc_sum@buf,w
  9684  1209  0086               	movwf	6
  9685  120A  0872               	movf	crc_sum@buf+1,w
  9686  120B  0087               	movwf	7
  9687  120C  0824               	movf	crc_sum@crc,w
  9688  120D  0601               	xorwf	1,w
  9689  120E  00A4               	movwf	crc_sum@crc
  9690  120F  0825               	movf	crc_sum@crc+1,w
  9691  1210  00A5               	movwf	crc_sum@crc+1
  9692  1211  3001               	movlw	1
  9693  1212  07F1               	addwf	crc_sum@buf,f
  9694  1213  3000               	movlw	0
  9695  1214  3DF2               	addwfc	crc_sum@buf+1,f
  9696                           
  9697                           ;crc16.c: 122: for ( i=0; i<8; i++){
  9698  1215  01A2               	clrf	crc_sum@i
  9699  1216  01A3               	clrf	crc_sum@i+1
  9700  1217  3000               	movlw	0
  9701  1218  0223               	subwf	crc_sum@i+1,w
  9702  1219  3008               	movlw	8
  9703  121A  1903               	skipnz
  9704  121B  0222               	subwf	crc_sum@i,w
  9705  121C  1803               	btfsc	3,0
  9706  121D  2A45               	goto	l4751
  9707  121E                     l1064:	
  9708                           
  9709                           ;crc16.c: 124: if(crc&0x0001){
  9710  121E  1C24               	btfss	crc_sum@crc,0
  9711  121F  2A30               	goto	l4745
  9712                           
  9713                           ;crc16.c: 125: crc=crc>>1;
  9714  1220  0825               	movf	crc_sum@crc+1,w
  9715  1221  00F6               	movwf	??_crc_sum+1
  9716  1222  0824               	movf	crc_sum@crc,w
  9717  1223  00F5               	movwf	??_crc_sum
  9718  1224  36F6               	lsrf	??_crc_sum+1,f
  9719  1225  0CF5               	rrf	??_crc_sum,f
  9720  1226  0875               	movf	??_crc_sum,w
  9721  1227  00A4               	movwf	crc_sum@crc
  9722  1228  0876               	movf	??_crc_sum+1,w
  9723  1229  00A5               	movwf	crc_sum@crc+1
  9724                           
  9725                           ;crc16.c: 126: crc=crc^ 0xa001;
  9726  122A  3001               	movlw	1
  9727  122B  0624               	xorwf	crc_sum@crc,w
  9728  122C  00A4               	movwf	crc_sum@crc
  9729  122D  30A0               	movlw	160
  9730  122E  0625               	xorwf	crc_sum@crc+1,w
  9731  122F  2A39               	goto	L1
  9732  1230                     l4745:	
  9733                           ;crc16.c: 127: }else{
  9734                           
  9735                           
  9736                           ;crc16.c: 128: crc=crc>>1;
  9737  1230  0825               	movf	crc_sum@crc+1,w
  9738  1231  00F6               	movwf	??_crc_sum+1
  9739  1232  0824               	movf	crc_sum@crc,w
  9740  1233  00F5               	movwf	??_crc_sum
  9741  1234  36F6               	lsrf	??_crc_sum+1,f
  9742  1235  0CF5               	rrf	??_crc_sum,f
  9743  1236  0875               	movf	??_crc_sum,w
  9744  1237  00A4               	movwf	crc_sum@crc
  9745  1238  0876               	movf	??_crc_sum+1,w
  9746  1239                     L1:	
  9747  1239  00A5               	movwf	crc_sum@crc+1
  9748  123A  3001               	movlw	1
  9749  123B  07A2               	addwf	crc_sum@i,f
  9750  123C  3000               	movlw	0
  9751  123D  3DA3               	addwfc	crc_sum@i+1,f
  9752  123E  3000               	movlw	0
  9753  123F  0223               	subwf	crc_sum@i+1,w
  9754  1240  3008               	movlw	8
  9755  1241  1903               	skipnz
  9756  1242  0222               	subwf	crc_sum@i,w
  9757  1243  1C03               	skipc
  9758  1244  2A1E               	goto	l1064
  9759  1245                     l4751:	
  9760  1245  3001               	movlw	1
  9761  1246  07A0               	addwf	crc_sum@j,f
  9762  1247  3000               	movlw	0
  9763  1248  3DA1               	addwfc	crc_sum@j+1,f
  9764  1249  2A00               	goto	l1062
  9765  124A                     l4753:	
  9766                           
  9767                           ;crc16.c: 129: };crc16.c: 130: };crc16.c: 132: };crc16.c: 133: return ( crc);
  9768  124A  0825               	movf	crc_sum@crc+1,w
  9769  124B  00F2               	movwf	?_crc_sum+1
  9770  124C  0824               	movf	crc_sum@crc,w
  9771  124D  00F1               	movwf	?_crc_sum
  9772  124E  0008               	return
  9773  124F                     __end_of_crc_sum:	
  9774                           
  9775                           	psect	text28
  9776  148F                     __ptext28:	
  9777 ;; *************** function _calc_temp_rs *****************
  9778 ;; Defined at:
  9779 ;;		line 216 in file "src/api/sample.c"
  9780 ;; Parameters:    Size  Location     Type
  9781 ;;		None
  9782 ;; Auto vars:     Size  Location     Type
  9783 ;;		None
  9784 ;; Return value:  Size  Location     Type
  9785 ;;                  4    5[BANK0 ] unsigned long 
  9786 ;; Registers used:
  9787 ;;		wreg, status,2, status,0, pclath, cstack
  9788 ;; Tracked objects:
  9789 ;;		On entry : 0/0
  9790 ;;		On exit  : 0/0
  9791 ;;		Unchanged: 0/0
  9792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9793 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9795 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9796 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9797 ;;Total ram usage:        8 bytes
  9798 ;; Hardware stack levels used:    1
  9799 ;; Hardware stack levels required when called:    2
  9800 ;; This function calls:
  9801 ;;		___lldiv
  9802 ;;		___lmul
  9803 ;; This function is called by:
  9804 ;;		_main
  9805 ;; This function uses a non-reentrant model
  9806 ;;
  9807                           
  9808                           
  9809                           ;psect for function _calc_temp_rs
  9810  148F                     _calc_temp_rs:	
  9811                           
  9812                           ;sample.c: 230: y32=12000UL;
  9813                           
  9814                           ;incstack = 0
  9815                           ; Regs used in _calc_temp_rs: [wreg+status,2+status,0+pclath+cstack]
  9816  148F  3000               	movlw	0
  9817  1490  0020               	movlb	0	; select bank0
  9818  1491  00CA               	movwf	_y32+3
  9819  1492  3000               	movlw	0
  9820  1493  00C9               	movwf	_y32+2
  9821  1494  302E               	movlw	46
  9822  1495  00C8               	movwf	_y32+1
  9823  1496  30E0               	movlw	224
  9824  1497  00C7               	movwf	_y32
  9825                           
  9826                           ;sample.c: 231: y32=y32*rtAdcValueRsHi;
  9827  1498  085D               	movf	_rtAdcValueRsHi,w
  9828  1499  00F1               	movwf	___lmul@multiplier
  9829  149A  085E               	movf	_rtAdcValueRsHi+1,w
  9830  149B  00F2               	movwf	___lmul@multiplier+1
  9831  149C  01F3               	clrf	___lmul@multiplier+2
  9832  149D  01F4               	clrf	___lmul@multiplier+3
  9833  149E  084A               	movf	_y32+3,w
  9834  149F  00F8               	movwf	___lmul@multiplicand+3
  9835  14A0  0849               	movf	_y32+2,w
  9836  14A1  00F7               	movwf	___lmul@multiplicand+2
  9837  14A2  0848               	movf	_y32+1,w
  9838  14A3  00F6               	movwf	___lmul@multiplicand+1
  9839  14A4  0847               	movf	_y32,w
  9840  14A5  00F5               	movwf	___lmul@multiplicand
  9841  14A6  319E  2664  3194   	fcall	___lmul
  9842  14A9  0874               	movf	?___lmul+3,w
  9843  14AA  0020               	movlb	0	; select bank0
  9844  14AB  00CA               	movwf	_y32+3
  9845  14AC  0873               	movf	?___lmul+2,w
  9846  14AD  00C9               	movwf	_y32+2
  9847  14AE  0872               	movf	?___lmul+1,w
  9848  14AF  00C8               	movwf	_y32+1
  9849  14B0  0871               	movf	?___lmul,w
  9850  14B1  00C7               	movwf	_y32
  9851                           
  9852                           ;sample.c: 232: x32=rtAdcValueRsLo;
  9853  14B2  085F               	movf	_rtAdcValueRsLo,w
  9854  14B3  0021               	movlb	1	; select bank1
  9855  14B4  00B8               	movwf	_x32^(0+128)
  9856  14B5  0020               	movlb	0	; select bank0
  9857  14B6  0860               	movf	_rtAdcValueRsLo+1,w
  9858  14B7  0021               	movlb	1	; select bank1
  9859  14B8  00B9               	movwf	(_x32^(0+128)+1)
  9860  14B9  01BA               	clrf	(_x32^(0+128)+2)
  9861  14BA  01BB               	clrf	(_x32^(0+128)+3)
  9862                           
  9863                           ;sample.c: 233: y32=y32/x32;
  9864  14BB  083B               	movf	(_x32+3)^(0+128),w
  9865  14BC  00F4               	movwf	___lldiv@divisor+3
  9866  14BD  083A               	movf	(_x32+2)^(0+128),w
  9867  14BE  00F3               	movwf	___lldiv@divisor+2
  9868  14BF  0839               	movf	(_x32+1)^(0+128),w
  9869  14C0  00F2               	movwf	___lldiv@divisor+1
  9870  14C1  0838               	movf	_x32^(0+128),w
  9871  14C2  00F1               	movwf	___lldiv@divisor
  9872  14C3  0020               	movlb	0	; select bank0
  9873  14C4  084A               	movf	_y32+3,w
  9874  14C5  00F8               	movwf	___lldiv@dividend+3
  9875  14C6  0849               	movf	_y32+2,w
  9876  14C7  00F7               	movwf	___lldiv@dividend+2
  9877  14C8  0848               	movf	_y32+1,w
  9878  14C9  00F6               	movwf	___lldiv@dividend+1
  9879  14CA  0847               	movf	_y32,w
  9880  14CB  00F5               	movwf	___lldiv@dividend
  9881  14CC  3191  21A6  3194   	fcall	___lldiv
  9882  14CF  0874               	movf	?___lldiv+3,w
  9883  14D0  0020               	movlb	0	; select bank0
  9884  14D1  00CA               	movwf	_y32+3
  9885  14D2  0873               	movf	?___lldiv+2,w
  9886  14D3  00C9               	movwf	_y32+2
  9887  14D4  0872               	movf	?___lldiv+1,w
  9888  14D5  00C8               	movwf	_y32+1
  9889  14D6  0871               	movf	?___lldiv,w
  9890  14D7  00C7               	movwf	_y32
  9891                           
  9892                           ;sample.c: 234: if(y32<2000)y32=2000;
  9893  14D8  084A               	movf	_y32+3,w
  9894  14D9  1D03               	btfss	3,2
  9895  14DA  2CEC               	goto	l5061
  9896  14DB  0849               	movf	_y32+2,w
  9897  14DC  1D03               	btfss	3,2
  9898  14DD  2CEC               	goto	l5061
  9899  14DE  30D0               	movlw	208
  9900  14DF  0247               	subwf	_y32,w
  9901  14E0  3007               	movlw	7
  9902  14E1  3B48               	subwfb	_y32+1,w
  9903  14E2  1803               	btfsc	3,0
  9904  14E3  2CEC               	goto	l5061
  9905  14E4  3000               	movlw	0
  9906  14E5  00CA               	movwf	_y32+3
  9907  14E6  3000               	movlw	0
  9908  14E7  00C9               	movwf	_y32+2
  9909  14E8  3007               	movlw	7
  9910  14E9  00C8               	movwf	_y32+1
  9911  14EA  30D0               	movlw	208
  9912  14EB  00C7               	movwf	_y32
  9913  14EC                     l5061:	
  9914                           
  9915                           ;sample.c: 235: if(y32>25000)y32=25000;
  9916  14EC  084A               	movf	_y32+3,w
  9917  14ED  1D03               	btfss	3,2
  9918  14EE  2CF8               	goto	l5063
  9919  14EF  0849               	movf	_y32+2,w
  9920  14F0  1D03               	btfss	3,2
  9921  14F1  2CF8               	goto	l5063
  9922  14F2  30A9               	movlw	169
  9923  14F3  0247               	subwf	_y32,w
  9924  14F4  3061               	movlw	97
  9925  14F5  3B48               	subwfb	_y32+1,w
  9926  14F6  1C03               	btfss	3,0
  9927  14F7  2D00               	goto	l647
  9928  14F8                     l5063:	
  9929  14F8  3000               	movlw	0
  9930  14F9  00CA               	movwf	_y32+3
  9931  14FA  3000               	movlw	0
  9932  14FB  00C9               	movwf	_y32+2
  9933  14FC  3061               	movlw	97
  9934  14FD  00C8               	movwf	_y32+1
  9935  14FE  30A8               	movlw	168
  9936  14FF  00C7               	movwf	_y32
  9937  1500                     l647:	
  9938                           
  9939                           ;sample.c: 236: y32=y32-1000;
  9940  1500  3018               	movlw	24
  9941  1501  00A9               	movwf	??_calc_temp_rs
  9942  1502  30FC               	movlw	252
  9943  1503  00AA               	movwf	??_calc_temp_rs+1
  9944  1504  30FF               	movlw	255
  9945  1505  00AB               	movwf	??_calc_temp_rs+2
  9946  1506  30FF               	movlw	255
  9947  1507  00AC               	movwf	??_calc_temp_rs+3
  9948  1508  0847               	movf	_y32,w
  9949  1509  07A9               	addwf	??_calc_temp_rs,f
  9950  150A  0848               	movf	_y32+1,w
  9951  150B  3DAA               	addwfc	??_calc_temp_rs+1,f
  9952  150C  0849               	movf	_y32+2,w
  9953  150D  3DAB               	addwfc	??_calc_temp_rs+2,f
  9954  150E  084A               	movf	_y32+3,w
  9955  150F  3DAC               	addwfc	??_calc_temp_rs+3,f
  9956  1510  082C               	movf	??_calc_temp_rs+3,w
  9957  1511  00CA               	movwf	_y32+3
  9958  1512  082B               	movf	??_calc_temp_rs+2,w
  9959  1513  00C9               	movwf	_y32+2
  9960  1514  082A               	movf	??_calc_temp_rs+1,w
  9961  1515  00C8               	movwf	_y32+1
  9962  1516  0829               	movf	??_calc_temp_rs,w
  9963  1517  00C7               	movwf	_y32
  9964                           
  9965                           ;sample.c: 237: return (uint16_t)y32;
  9966  1518  0847               	movf	_y32,w
  9967  1519  00A5               	movwf	?_calc_temp_rs
  9968  151A  0848               	movf	_y32+1,w
  9969  151B  00A6               	movwf	?_calc_temp_rs+1
  9970  151C  01A7               	clrf	?_calc_temp_rs+2
  9971  151D  01A8               	clrf	?_calc_temp_rs+3
  9972  151E  0008               	return
  9973  151F                     __end_of_calc_temp_rs:	
  9974                           
  9975                           	psect	text29
  9976  1727                     __ptext29:	
  9977 ;; *************** function _calc_temp_rc *****************
  9978 ;; Defined at:
  9979 ;;		line 240 in file "src/api/sample.c"
  9980 ;; Parameters:    Size  Location     Type
  9981 ;;		None
  9982 ;; Auto vars:     Size  Location     Type
  9983 ;;		None
  9984 ;; Return value:  Size  Location     Type
  9985 ;;                  4    5[BANK0 ] unsigned long 
  9986 ;; Registers used:
  9987 ;;		wreg, status,2, status,0, pclath, cstack
  9988 ;; Tracked objects:
  9989 ;;		On entry : 0/0
  9990 ;;		On exit  : 0/0
  9991 ;;		Unchanged: 0/0
  9992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9993 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9995 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9996 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9997 ;;Total ram usage:       12 bytes
  9998 ;; Hardware stack levels used:    1
  9999 ;; Hardware stack levels required when called:    2
 10000 ;; This function calls:
 10001 ;;		___lldiv
 10002 ;;		___lmul
 10003 ;; This function is called by:
 10004 ;;		_main
 10005 ;; This function uses a non-reentrant model
 10006 ;;
 10007                           
 10008                           
 10009                           ;psect for function _calc_temp_rc
 10010  1727                     _calc_temp_rc:	
 10011                           
 10012                           ;sample.c: 244: x32=300000UL;
 10013                           
 10014                           ;incstack = 0
 10015                           ; Regs used in _calc_temp_rc: [wreg+status,2+status,0+pclath+cstack]
 10016  1727  3000               	movlw	0
 10017  1728  0021               	movlb	1	; select bank1
 10018  1729  00BB               	movwf	(_x32+3)^(0+128)
 10019  172A  3004               	movlw	4
 10020  172B  00BA               	movwf	(_x32+2)^(0+128)
 10021  172C  3093               	movlw	147
 10022  172D  00B9               	movwf	(_x32+1)^(0+128)
 10023  172E  30E0               	movlw	224
 10024  172F  00B8               	movwf	_x32^(0+128)
 10025                           
 10026                           ;sample.c: 245: x32=x32*rtAdcValueRcLo;
 10027  1730  0020               	movlb	0	; select bank0
 10028  1731  085B               	movf	_rtAdcValueRcLo,w
 10029  1732  00F1               	movwf	___lmul@multiplier
 10030  1733  085C               	movf	_rtAdcValueRcLo+1,w
 10031  1734  00F2               	movwf	___lmul@multiplier+1
 10032  1735  01F3               	clrf	___lmul@multiplier+2
 10033  1736  01F4               	clrf	___lmul@multiplier+3
 10034  1737  0021               	movlb	1	; select bank1
 10035  1738  083B               	movf	(_x32+3)^(0+128),w
 10036  1739  00F8               	movwf	___lmul@multiplicand+3
 10037  173A  083A               	movf	(_x32+2)^(0+128),w
 10038  173B  00F7               	movwf	___lmul@multiplicand+2
 10039  173C  0839               	movf	(_x32+1)^(0+128),w
 10040  173D  00F6               	movwf	___lmul@multiplicand+1
 10041  173E  0838               	movf	_x32^(0+128),w
 10042  173F  00F5               	movwf	___lmul@multiplicand
 10043  1740  319E  2664  3197   	fcall	___lmul
 10044  1743  0874               	movf	?___lmul+3,w
 10045  1744  0021               	movlb	1	; select bank1
 10046  1745  00BB               	movwf	(_x32+3)^(0+128)
 10047  1746  0873               	movf	?___lmul+2,w
 10048  1747  00BA               	movwf	(_x32+2)^(0+128)
 10049  1748  0872               	movf	?___lmul+1,w
 10050  1749  00B9               	movwf	(_x32+1)^(0+128)
 10051  174A  0871               	movf	?___lmul,w
 10052  174B  00B8               	movwf	_x32^(0+128)
 10053                           
 10054                           ;sample.c: 248: y32=rtAdcValueRcHi;
 10055  174C  0020               	movlb	0	; select bank0
 10056  174D  0859               	movf	_rtAdcValueRcHi,w
 10057  174E  00C7               	movwf	_y32
 10058  174F  085A               	movf	_rtAdcValueRcHi+1,w
 10059  1750  00C8               	movwf	_y32+1
 10060  1751  01C9               	clrf	_y32+2
 10061  1752  01CA               	clrf	_y32+3
 10062                           
 10063                           ;sample.c: 249: y32=y32*3100;
 10064  1753  084A               	movf	_y32+3,w
 10065  1754  00F4               	movwf	___lmul@multiplier+3
 10066  1755  0849               	movf	_y32+2,w
 10067  1756  00F3               	movwf	___lmul@multiplier+2
 10068  1757  0848               	movf	_y32+1,w
 10069  1758  00F2               	movwf	___lmul@multiplier+1
 10070  1759  0847               	movf	_y32,w
 10071  175A  00F1               	movwf	___lmul@multiplier
 10072  175B  3000               	movlw	0
 10073  175C  00F8               	movwf	___lmul@multiplicand+3
 10074  175D  3000               	movlw	0
 10075  175E  00F7               	movwf	___lmul@multiplicand+2
 10076  175F  300C               	movlw	12
 10077  1760  00F6               	movwf	___lmul@multiplicand+1
 10078  1761  301C               	movlw	28
 10079  1762  00F5               	movwf	___lmul@multiplicand
 10080  1763  319E  2664  3197   	fcall	___lmul
 10081  1766  0874               	movf	?___lmul+3,w
 10082  1767  0020               	movlb	0	; select bank0
 10083  1768  00CA               	movwf	_y32+3
 10084  1769  0873               	movf	?___lmul+2,w
 10085  176A  00C9               	movwf	_y32+2
 10086  176B  0872               	movf	?___lmul+1,w
 10087  176C  00C8               	movwf	_y32+1
 10088  176D  0871               	movf	?___lmul,w
 10089  176E  00C7               	movwf	_y32
 10090                           
 10091                           ;sample.c: 250: y32=y32/100;
 10092  176F  3000               	movlw	0
 10093  1770  00F4               	movwf	___lldiv@divisor+3
 10094  1771  3000               	movlw	0
 10095  1772  00F3               	movwf	___lldiv@divisor+2
 10096  1773  3000               	movlw	0
 10097  1774  00F2               	movwf	___lldiv@divisor+1
 10098  1775  3064               	movlw	100
 10099  1776  00F1               	movwf	___lldiv@divisor
 10100  1777  084A               	movf	_y32+3,w
 10101  1778  00F8               	movwf	___lldiv@dividend+3
 10102  1779  0849               	movf	_y32+2,w
 10103  177A  00F7               	movwf	___lldiv@dividend+2
 10104  177B  0848               	movf	_y32+1,w
 10105  177C  00F6               	movwf	___lldiv@dividend+1
 10106  177D  0847               	movf	_y32,w
 10107  177E  00F5               	movwf	___lldiv@dividend
 10108  177F  3191  21A6  3197   	fcall	___lldiv
 10109  1782  0874               	movf	?___lldiv+3,w
 10110  1783  0020               	movlb	0	; select bank0
 10111  1784  00CA               	movwf	_y32+3
 10112  1785  0873               	movf	?___lldiv+2,w
 10113  1786  00C9               	movwf	_y32+2
 10114  1787  0872               	movf	?___lldiv+1,w
 10115  1788  00C8               	movwf	_y32+1
 10116  1789  0871               	movf	?___lldiv,w
 10117  178A  00C7               	movwf	_y32
 10118                           
 10119                           ;sample.c: 251: y32=y32-rtAdcValueRcLo;
 10120  178B  0847               	movf	_y32,w
 10121  178C  00A9               	movwf	??_calc_temp_rc
 10122  178D  0848               	movf	_y32+1,w
 10123  178E  00AA               	movwf	??_calc_temp_rc+1
 10124  178F  0849               	movf	_y32+2,w
 10125  1790  00AB               	movwf	??_calc_temp_rc+2
 10126  1791  084A               	movf	_y32+3,w
 10127  1792  00AC               	movwf	??_calc_temp_rc+3
 10128  1793  085B               	movf	_rtAdcValueRcLo,w
 10129  1794  00AD               	movwf	??_calc_temp_rc+4
 10130  1795  085C               	movf	_rtAdcValueRcLo+1,w
 10131  1796  00AE               	movwf	??_calc_temp_rc+5
 10132  1797  01AF               	clrf	??_calc_temp_rc+6
 10133  1798  01B0               	clrf	??_calc_temp_rc+7
 10134  1799  09AD               	comf	??_calc_temp_rc+4,f
 10135  179A  09AE               	comf	??_calc_temp_rc+5,f
 10136  179B  09AF               	comf	??_calc_temp_rc+6,f
 10137  179C  09B0               	comf	??_calc_temp_rc+7,f
 10138  179D  0AAD               	incf	??_calc_temp_rc+4,f
 10139  179E  1903               	skipnz
 10140  179F  0AAE               	incf	??_calc_temp_rc+5,f
 10141  17A0  1903               	skipnz
 10142  17A1  0AAF               	incf	??_calc_temp_rc+6,f
 10143  17A2  1903               	skipnz
 10144  17A3  0AB0               	incf	??_calc_temp_rc+7,f
 10145  17A4  082D               	movf	??_calc_temp_rc+4,w
 10146  17A5  07A9               	addwf	??_calc_temp_rc,f
 10147  17A6  082E               	movf	??_calc_temp_rc+5,w
 10148  17A7  3DAA               	addwfc	??_calc_temp_rc+1,f
 10149  17A8  082F               	movf	??_calc_temp_rc+6,w
 10150  17A9  3DAB               	addwfc	??_calc_temp_rc+2,f
 10151  17AA  0830               	movf	??_calc_temp_rc+7,w
 10152  17AB  3DAC               	addwfc	??_calc_temp_rc+3,f
 10153  17AC  082C               	movf	??_calc_temp_rc+3,w
 10154  17AD  00CA               	movwf	_y32+3
 10155  17AE  082B               	movf	??_calc_temp_rc+2,w
 10156  17AF  00C9               	movwf	_y32+2
 10157  17B0  082A               	movf	??_calc_temp_rc+1,w
 10158  17B1  00C8               	movwf	_y32+1
 10159  17B2  0829               	movf	??_calc_temp_rc,w
 10160  17B3  00C7               	movwf	_y32
 10161                           
 10162                           ;sample.c: 254: y32=x32/y32;
 10163  17B4  084A               	movf	_y32+3,w
 10164  17B5  00F4               	movwf	___lldiv@divisor+3
 10165  17B6  0849               	movf	_y32+2,w
 10166  17B7  00F3               	movwf	___lldiv@divisor+2
 10167  17B8  0848               	movf	_y32+1,w
 10168  17B9  00F2               	movwf	___lldiv@divisor+1
 10169  17BA  0847               	movf	_y32,w
 10170  17BB  00F1               	movwf	___lldiv@divisor
 10171  17BC  0021               	movlb	1	; select bank1
 10172  17BD  083B               	movf	(_x32+3)^(0+128),w
 10173  17BE  00F8               	movwf	___lldiv@dividend+3
 10174  17BF  083A               	movf	(_x32+2)^(0+128),w
 10175  17C0  00F7               	movwf	___lldiv@dividend+2
 10176  17C1  0839               	movf	(_x32+1)^(0+128),w
 10177  17C2  00F6               	movwf	___lldiv@dividend+1
 10178  17C3  0838               	movf	_x32^(0+128),w
 10179  17C4  00F5               	movwf	___lldiv@dividend
 10180  17C5  3191  21A6  3197   	fcall	___lldiv
 10181  17C8  0874               	movf	?___lldiv+3,w
 10182  17C9  0020               	movlb	0	; select bank0
 10183  17CA  00CA               	movwf	_y32+3
 10184  17CB  0873               	movf	?___lldiv+2,w
 10185  17CC  00C9               	movwf	_y32+2
 10186  17CD  0872               	movf	?___lldiv+1,w
 10187  17CE  00C8               	movwf	_y32+1
 10188  17CF  0871               	movf	?___lldiv,w
 10189  17D0  00C7               	movwf	_y32
 10190                           
 10191                           ;sample.c: 255: if(y32<2000)y32=2000;
 10192  17D1  084A               	movf	_y32+3,w
 10193  17D2  1D03               	btfss	3,2
 10194  17D3  2FE5               	goto	l5079
 10195  17D4  0849               	movf	_y32+2,w
 10196  17D5  1D03               	btfss	3,2
 10197  17D6  2FE5               	goto	l5079
 10198  17D7  30D0               	movlw	208
 10199  17D8  0247               	subwf	_y32,w
 10200  17D9  3007               	movlw	7
 10201  17DA  3B48               	subwfb	_y32+1,w
 10202  17DB  1803               	btfsc	3,0
 10203  17DC  2FE5               	goto	l5079
 10204  17DD  3000               	movlw	0
 10205  17DE  00CA               	movwf	_y32+3
 10206  17DF  3000               	movlw	0
 10207  17E0  00C9               	movwf	_y32+2
 10208  17E1  3007               	movlw	7
 10209  17E2  00C8               	movwf	_y32+1
 10210  17E3  30D0               	movlw	208
 10211  17E4  00C7               	movwf	_y32
 10212  17E5                     l5079:	
 10213                           
 10214                           ;sample.c: 256: if(y32>25000)y32=25000;
 10215  17E5  084A               	movf	_y32+3,w
 10216  17E6  1D03               	btfss	3,2
 10217  17E7  2FF1               	goto	l5081
 10218  17E8  0849               	movf	_y32+2,w
 10219  17E9  1D03               	btfss	3,2
 10220  17EA  2FF1               	goto	l5081
 10221  17EB  30A9               	movlw	169
 10222  17EC  0247               	subwf	_y32,w
 10223  17ED  3061               	movlw	97
 10224  17EE  3B48               	subwfb	_y32+1,w
 10225  17EF  1C03               	btfss	3,0
 10226  17F0  2FF9               	goto	l652
 10227  17F1                     l5081:	
 10228  17F1  3000               	movlw	0
 10229  17F2  00CA               	movwf	_y32+3
 10230  17F3  3000               	movlw	0
 10231  17F4  00C9               	movwf	_y32+2
 10232  17F5  3061               	movlw	97
 10233  17F6  00C8               	movwf	_y32+1
 10234  17F7  30A8               	movlw	168
 10235  17F8  00C7               	movwf	_y32
 10236  17F9                     l652:	
 10237                           
 10238                           ;sample.c: 258: return (uint16_t)y32;
 10239  17F9  0847               	movf	_y32,w
 10240  17FA  00A5               	movwf	?_calc_temp_rc
 10241  17FB  0848               	movf	_y32+1,w
 10242  17FC  00A6               	movwf	?_calc_temp_rc+1
 10243  17FD  01A7               	clrf	?_calc_temp_rc+2
 10244  17FE  01A8               	clrf	?_calc_temp_rc+3
 10245  17FF  0008               	return
 10246  1800                     __end_of_calc_temp_rc:	
 10247                           
 10248                           	psect	text30
 10249  12AC                     __ptext30:	
 10250 ;; *************** function _calc_rs_lo_avg *****************
 10251 ;; Defined at:
 10252 ;;		line 435 in file "src/api/sample.c"
 10253 ;; Parameters:    Size  Location     Type
 10254 ;;  x               2    5[BANK0 ] unsigned int 
 10255 ;; Auto vars:     Size  Location     Type
 10256 ;;  t32             4    7[BANK0 ] unsigned long 
 10257 ;;  i               1   11[BANK0 ] unsigned char 
 10258 ;; Return value:  Size  Location     Type
 10259 ;;                  2    5[BANK0 ] unsigned int 
 10260 ;; Registers used:
 10261 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10262 ;; Tracked objects:
 10263 ;;		On entry : 0/0
 10264 ;;		On exit  : 0/0
 10265 ;;		Unchanged: 0/0
 10266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10267 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10268 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10269 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10270 ;;      Totals:         2       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10271 ;;Total ram usage:        9 bytes
 10272 ;; Hardware stack levels used:    1
 10273 ;; Hardware stack levels required when called:    2
 10274 ;; This function calls:
 10275 ;;		___lldiv
 10276 ;; This function is called by:
 10277 ;;		_main
 10278 ;; This function uses a non-reentrant model
 10279 ;;
 10280                           
 10281                           
 10282                           ;psect for function _calc_rs_lo_avg
 10283  12AC                     _calc_rs_lo_avg:	
 10284                           
 10285                           ;sample.c: 437: uint8_t i;;sample.c: 438: uint32_t t32=0;
 10286                           
 10287                           ;incstack = 0
 10288                           ; Regs used in _calc_rs_lo_avg: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10289  12AC  3000               	movlw	0
 10290  12AD  0020               	movlb	0	; select bank0
 10291  12AE  00AA               	movwf	calc_rs_lo_avg@t32+3
 10292  12AF  3000               	movlw	0
 10293  12B0  00A9               	movwf	calc_rs_lo_avg@t32+2
 10294  12B1  3000               	movlw	0
 10295  12B2  00A8               	movwf	calc_rs_lo_avg@t32+1
 10296  12B3  3000               	movlw	0
 10297  12B4  00A7               	movwf	calc_rs_lo_avg@t32
 10298                           
 10299                           ;sample.c: 440: for(i=0;i<6-1;i++){
 10300  12B5  01AB               	clrf	calc_rs_lo_avg@i
 10301  12B6  3005               	movlw	5
 10302  12B7  022B               	subwf	calc_rs_lo_avg@i,w
 10303  12B8  1803               	btfsc	3,0
 10304  12B9  2ADE               	goto	l4267
 10305  12BA                     l4259:	
 10306                           
 10307                           ;sample.c: 441: rsLoAvgBuf[i]=rsLoAvgBuf[i+1];
 10308  12BA  352B               	lslf	calc_rs_lo_avg@i,w
 10309  12BB  3E02               	addlw	2
 10310  12BC  3EAC               	addlw	(low (_rsLoAvgBuf| 0))& (0+255)
 10311  12BD  0086               	movwf	6
 10312  12BE  0187               	clrf	7
 10313  12BF  352B               	lslf	calc_rs_lo_avg@i,w
 10314  12C0  3EAC               	addlw	(low (_rsLoAvgBuf| 0))& (0+255)
 10315  12C1  0084               	movwf	4
 10316  12C2  0185               	clrf	5
 10317  12C3  3F40               	moviw [0]fsr1
 10318  12C4  3F80               	movwi [0]fsr0
 10319  12C5  3F41               	moviw [1]fsr1
 10320  12C6  3F81               	movwi [1]fsr0
 10321                           
 10322                           ;sample.c: 442: t32+=((uint32_t)rsLoAvgBuf[i]);
 10323  12C7  352B               	lslf	calc_rs_lo_avg@i,w
 10324  12C8  3EAC               	addlw	(low (_rsLoAvgBuf| 0))& (0+255)
 10325  12C9  0086               	movwf	6
 10326  12CA  0187               	clrf	7
 10327  12CB  3F40               	moviw [0]fsr1
 10328  12CC  00FA               	movwf	??_calc_rs_lo_avg
 10329  12CD  3F41               	moviw [1]fsr1
 10330  12CE  00FB               	movwf	??_calc_rs_lo_avg+1
 10331  12CF  087A               	movf	??_calc_rs_lo_avg,w
 10332  12D0  07A7               	addwf	calc_rs_lo_avg@t32,f
 10333  12D1  087B               	movf	??_calc_rs_lo_avg+1,w
 10334  12D2  3DA8               	addwfc	calc_rs_lo_avg@t32+1,f
 10335  12D3  3000               	movlw	0
 10336  12D4  3DA9               	addwfc	calc_rs_lo_avg@t32+2,f
 10337  12D5  3DAA               	addwfc	calc_rs_lo_avg@t32+3,f
 10338  12D6  3001               	movlw	1
 10339  12D7  00FA               	movwf	??_calc_rs_lo_avg
 10340  12D8  087A               	movf	??_calc_rs_lo_avg,w
 10341  12D9  07AB               	addwf	calc_rs_lo_avg@i,f
 10342  12DA  3005               	movlw	5
 10343  12DB  022B               	subwf	calc_rs_lo_avg@i,w
 10344  12DC  1C03               	skipc
 10345  12DD  2ABA               	goto	l4259
 10346  12DE                     l4267:	
 10347                           
 10348                           ;sample.c: 443: };sample.c: 444: rsLoAvgBuf[i]=x;
 10349  12DE  352B               	lslf	calc_rs_lo_avg@i,w
 10350  12DF  3EAC               	addlw	(low (_rsLoAvgBuf| 0))& (0+255)
 10351  12E0  0086               	movwf	6
 10352  12E1  0187               	clrf	7
 10353  12E2  0825               	movf	calc_rs_lo_avg@x,w
 10354  12E3  3FC0               	movwi [0]fsr1
 10355  12E4  0826               	movf	calc_rs_lo_avg@x+1,w
 10356  12E5  3FC1               	movwi [1]fsr1
 10357                           
 10358                           ;sample.c: 445: t32+=x;
 10359  12E6  0825               	movf	calc_rs_lo_avg@x,w
 10360  12E7  07A7               	addwf	calc_rs_lo_avg@t32,f
 10361  12E8  0826               	movf	calc_rs_lo_avg@x+1,w
 10362  12E9  3DA8               	addwfc	calc_rs_lo_avg@t32+1,f
 10363  12EA  3000               	movlw	0
 10364  12EB  3DA9               	addwfc	calc_rs_lo_avg@t32+2,f
 10365  12EC  3DAA               	addwfc	calc_rs_lo_avg@t32+3,f
 10366                           
 10367                           ;sample.c: 446: t32/=6;
 10368  12ED  3000               	movlw	0
 10369  12EE  00F4               	movwf	___lldiv@divisor+3
 10370  12EF  3000               	movlw	0
 10371  12F0  00F3               	movwf	___lldiv@divisor+2
 10372  12F1  3000               	movlw	0
 10373  12F2  00F2               	movwf	___lldiv@divisor+1
 10374  12F3  3006               	movlw	6
 10375  12F4  00F1               	movwf	___lldiv@divisor
 10376  12F5  082A               	movf	calc_rs_lo_avg@t32+3,w
 10377  12F6  00F8               	movwf	___lldiv@dividend+3
 10378  12F7  0829               	movf	calc_rs_lo_avg@t32+2,w
 10379  12F8  00F7               	movwf	___lldiv@dividend+2
 10380  12F9  0828               	movf	calc_rs_lo_avg@t32+1,w
 10381  12FA  00F6               	movwf	___lldiv@dividend+1
 10382  12FB  0827               	movf	calc_rs_lo_avg@t32,w
 10383  12FC  00F5               	movwf	___lldiv@dividend
 10384  12FD  3191  21A6         	fcall	___lldiv
 10385  12FF  0874               	movf	?___lldiv+3,w
 10386  1300  0020               	movlb	0	; select bank0
 10387  1301  00AA               	movwf	calc_rs_lo_avg@t32+3
 10388  1302  0873               	movf	?___lldiv+2,w
 10389  1303  00A9               	movwf	calc_rs_lo_avg@t32+2
 10390  1304  0872               	movf	?___lldiv+1,w
 10391  1305  00A8               	movwf	calc_rs_lo_avg@t32+1
 10392  1306  0871               	movf	?___lldiv,w
 10393  1307  00A7               	movwf	calc_rs_lo_avg@t32
 10394                           
 10395                           ;sample.c: 447: return (uint16_t)t32;
 10396  1308  0828               	movf	calc_rs_lo_avg@t32+1,w
 10397  1309  00A6               	movwf	?_calc_rs_lo_avg+1
 10398  130A  0827               	movf	calc_rs_lo_avg@t32,w
 10399  130B  00A5               	movwf	?_calc_rs_lo_avg
 10400  130C  0008               	return
 10401  130D                     __end_of_calc_rs_lo_avg:	
 10402                           
 10403                           	psect	text31
 10404  11A6                     __ptext31:	
 10405 ;; *************** function ___lldiv *****************
 10406 ;; Defined at:
 10407 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
 10408 ;; Parameters:    Size  Location     Type
 10409 ;;  divisor         4    1[COMMON] unsigned long 
 10410 ;;  dividend        4    5[COMMON] unsigned long 
 10411 ;; Auto vars:     Size  Location     Type
 10412 ;;  quotient        4    0[BANK0 ] unsigned long 
 10413 ;;  counter         1    4[BANK0 ] unsigned char 
 10414 ;; Return value:  Size  Location     Type
 10415 ;;                  4    1[COMMON] unsigned long 
 10416 ;; Registers used:
 10417 ;;		wreg, status,2, status,0
 10418 ;; Tracked objects:
 10419 ;;		On entry : 0/0
 10420 ;;		On exit  : 0/0
 10421 ;;		Unchanged: 0/0
 10422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10423 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10424 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10425 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10426 ;;      Totals:         9       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10427 ;;Total ram usage:       14 bytes
 10428 ;; Hardware stack levels used:    1
 10429 ;; Hardware stack levels required when called:    1
 10430 ;; This function calls:
 10431 ;;		Nothing
 10432 ;; This function is called by:
 10433 ;;		_calc_temp_rs
 10434 ;;		_calc_temp_rc
 10435 ;;		_calc_rs_lo_avg
 10436 ;; This function uses a non-reentrant model
 10437 ;;
 10438                           
 10439                           
 10440                           ;psect for function ___lldiv
 10441  11A6                     ___lldiv:	
 10442                           
 10443                           ;incstack = 0
 10444                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 10445  11A6  3000               	movlw	0
 10446  11A7  0020               	movlb	0	; select bank0
 10447  11A8  00A3               	movwf	___lldiv@quotient+3
 10448  11A9  3000               	movlw	0
 10449  11AA  00A2               	movwf	___lldiv@quotient+2
 10450  11AB  3000               	movlw	0
 10451  11AC  00A1               	movwf	___lldiv@quotient+1
 10452  11AD  3000               	movlw	0
 10453  11AE  00A0               	movwf	___lldiv@quotient
 10454  11AF  0874               	movf	___lldiv@divisor+3,w
 10455  11B0  0473               	iorwf	___lldiv@divisor+2,w
 10456  11B1  0472               	iorwf	___lldiv@divisor+1,w
 10457  11B2  0471               	iorwf	___lldiv@divisor,w
 10458  11B3  1903               	skipnz
 10459  11B4  29F0               	goto	l3979
 10460  11B5  01A4               	clrf	___lldiv@counter
 10461  11B6  0AA4               	incf	___lldiv@counter,f
 10462  11B7                     l3965:	
 10463  11B7  1BF4               	btfsc	___lldiv@divisor+3,7
 10464  11B8  29C5               	goto	l3967
 10465  11B9  3001               	movlw	1
 10466  11BA                     u2845:	
 10467  11BA  35F1               	lslf	___lldiv@divisor,f
 10468  11BB  0DF2               	rlf	___lldiv@divisor+1,f
 10469  11BC  0DF3               	rlf	___lldiv@divisor+2,f
 10470  11BD  0DF4               	rlf	___lldiv@divisor+3,f
 10471  11BE  0B89               	decfsz	9,f
 10472  11BF  29BA               	goto	u2845
 10473  11C0  3001               	movlw	1
 10474  11C1  00F9               	movwf	??___lldiv
 10475  11C2  0879               	movf	??___lldiv,w
 10476  11C3  07A4               	addwf	___lldiv@counter,f
 10477  11C4  29B7               	goto	l3965
 10478  11C5                     l3967:	
 10479  11C5  3001               	movlw	1
 10480  11C6                     u2865:	
 10481  11C6  35A0               	lslf	___lldiv@quotient,f
 10482  11C7  0DA1               	rlf	___lldiv@quotient+1,f
 10483  11C8  0DA2               	rlf	___lldiv@quotient+2,f
 10484  11C9  0DA3               	rlf	___lldiv@quotient+3,f
 10485  11CA  0B89               	decfsz	9,f
 10486  11CB  29C6               	goto	u2865
 10487  11CC  0874               	movf	___lldiv@divisor+3,w
 10488  11CD  0278               	subwf	___lldiv@dividend+3,w
 10489  11CE  1D03               	skipz
 10490  11CF  29DA               	goto	u2875
 10491  11D0  0873               	movf	___lldiv@divisor+2,w
 10492  11D1  0277               	subwf	___lldiv@dividend+2,w
 10493  11D2  1D03               	skipz
 10494  11D3  29DA               	goto	u2875
 10495  11D4  0872               	movf	___lldiv@divisor+1,w
 10496  11D5  0276               	subwf	___lldiv@dividend+1,w
 10497  11D6  1D03               	skipz
 10498  11D7  29DA               	goto	u2875
 10499  11D8  0871               	movf	___lldiv@divisor,w
 10500  11D9  0275               	subwf	___lldiv@dividend,w
 10501  11DA                     u2875:	
 10502  11DA  1C03               	skipc
 10503  11DB  29E5               	goto	l3975
 10504  11DC  0871               	movf	___lldiv@divisor,w
 10505  11DD  02F5               	subwf	___lldiv@dividend,f
 10506  11DE  0872               	movf	___lldiv@divisor+1,w
 10507  11DF  3BF6               	subwfb	___lldiv@dividend+1,f
 10508  11E0  0873               	movf	___lldiv@divisor+2,w
 10509  11E1  3BF7               	subwfb	___lldiv@dividend+2,f
 10510  11E2  0874               	movf	___lldiv@divisor+3,w
 10511  11E3  3BF8               	subwfb	___lldiv@dividend+3,f
 10512  11E4  1420               	bsf	___lldiv@quotient,0
 10513  11E5                     l3975:	
 10514  11E5  3001               	movlw	1
 10515  11E6                     u2885:	
 10516  11E6  36F4               	lsrf	___lldiv@divisor+3,f
 10517  11E7  0CF3               	rrf	___lldiv@divisor+2,f
 10518  11E8  0CF2               	rrf	___lldiv@divisor+1,f
 10519  11E9  0CF1               	rrf	___lldiv@divisor,f
 10520  11EA  0B89               	decfsz	9,f
 10521  11EB  29E6               	goto	u2885
 10522  11EC  3001               	movlw	1
 10523  11ED  02A4               	subwf	___lldiv@counter,f
 10524  11EE  1D03               	btfss	3,2
 10525  11EF  29C5               	goto	l3967
 10526  11F0                     l3979:	
 10527  11F0  0823               	movf	___lldiv@quotient+3,w
 10528  11F1  00F4               	movwf	?___lldiv+3
 10529  11F2  0822               	movf	___lldiv@quotient+2,w
 10530  11F3  00F3               	movwf	?___lldiv+2
 10531  11F4  0821               	movf	___lldiv@quotient+1,w
 10532  11F5  00F2               	movwf	?___lldiv+1
 10533  11F6  0820               	movf	___lldiv@quotient,w
 10534  11F7  00F1               	movwf	?___lldiv
 10535  11F8  0008               	return
 10536  11F9                     __end_of___lldiv:	
 10537                           
 10538                           	psect	text32
 10539  08E4                     __ptext32:	
 10540 ;; *************** function _calc_expect_vout_adc_value *****************
 10541 ;; Defined at:
 10542 ;;		line 452 in file "src/api/sample.c"
 10543 ;; Parameters:    Size  Location     Type
 10544 ;;  x               2   18[BANK0 ] unsigned int 
 10545 ;; Auto vars:     Size  Location     Type
 10546 ;;  t32             4   34[BANK0 ] long 
 10547 ;;  i               1   38[BANK0 ] unsigned char 
 10548 ;; Return value:  Size  Location     Type
 10549 ;;                  2   18[BANK0 ] unsigned int 
 10550 ;; Registers used:
 10551 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10552 ;; Tracked objects:
 10553 ;;		On entry : 0/0
 10554 ;;		On exit  : 0/0
 10555 ;;		Unchanged: 0/0
 10556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10557 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10558 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10559 ;;      Temps:          0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10560 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10561 ;;Total ram usage:       21 bytes
 10562 ;; Hardware stack levels used:    1
 10563 ;; Hardware stack levels required when called:    2
 10564 ;; This function calls:
 10565 ;;		___aldiv
 10566 ;;		___lmul
 10567 ;; This function is called by:
 10568 ;;		_main
 10569 ;; This function uses a non-reentrant model
 10570 ;;
 10571                           
 10572                           
 10573                           ;psect for function _calc_expect_vout_adc_value
 10574  08E4                     _calc_expect_vout_adc_value:	
 10575                           
 10576                           ;sample.c: 455: uint8_t i;;sample.c: 456: int32_t t32;;sample.c: 459: for (i = 0; i < 30
      +                          -1; i++) {
 10577                           
 10578                           ;incstack = 0
 10579                           ; Regs used in _calc_expect_vout_adc_value: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 10580  08E4  0020               	movlb	0	; select bank0
 10581  08E5  01C6               	clrf	calc_expect_vout_adc_value@i
 10582  08E6  301D               	movlw	29
 10583  08E7  0246               	subwf	calc_expect_vout_adc_value@i,w
 10584  08E8  1803               	btfsc	3,0
 10585  08E9  2947               	goto	l5157
 10586  08EA                     l5147:	
 10587                           
 10588                           ;sample.c: 460: if(sysData.calibRsAdc[i]<sysData.calibRsAdc[i+1]){
 10589  08EA  0846               	movf	calc_expect_vout_adc_value@i,w
 10590  08EB  00B4               	movwf	??_calc_expect_vout_adc_value
 10591  08EC  01B5               	clrf	??_calc_expect_vout_adc_value+1
 10592  08ED  35B4               	lslf	??_calc_expect_vout_adc_value,f
 10593  08EE  0DB5               	rlf	??_calc_expect_vout_adc_value+1,f
 10594  08EF  0834               	movf	??_calc_expect_vout_adc_value,w
 10595  08F0  3E02               	addlw	2
 10596  08F1  00B6               	movwf	??_calc_expect_vout_adc_value+2
 10597  08F2  3000               	movlw	0
 10598  08F3  3D35               	addwfc	??_calc_expect_vout_adc_value+1,w
 10599  08F4  00B7               	movwf	??_calc_expect_vout_adc_value+3
 10600  08F5  3066               	movlw	102
 10601  08F6  00B8               	movwf	??_calc_expect_vout_adc_value+4
 10602  08F7  3023               	movlw	35
 10603  08F8  00B9               	movwf	??_calc_expect_vout_adc_value+5
 10604  08F9  0836               	movf	??_calc_expect_vout_adc_value+2,w
 10605  08FA  0738               	addwf	??_calc_expect_vout_adc_value+4,w
 10606  08FB  0086               	movwf	6
 10607  08FC  0837               	movf	??_calc_expect_vout_adc_value+3,w
 10608  08FD  3D39               	addwfc	??_calc_expect_vout_adc_value+5,w
 10609  08FE  0087               	movwf	7
 10610  08FF  3F40               	moviw [0]fsr1
 10611  0900  00BA               	movwf	??_calc_expect_vout_adc_value+6
 10612  0901  3F41               	moviw [1]fsr1
 10613  0902  00BB               	movwf	??_calc_expect_vout_adc_value+7
 10614  0903  0846               	movf	calc_expect_vout_adc_value@i,w
 10615  0904  00BC               	movwf	??_calc_expect_vout_adc_value+8
 10616  0905  01BD               	clrf	??_calc_expect_vout_adc_value+9
 10617  0906  35BC               	lslf	??_calc_expect_vout_adc_value+8,f
 10618  0907  0DBD               	rlf	??_calc_expect_vout_adc_value+9,f
 10619  0908  3066               	movlw	102
 10620  0909  00BE               	movwf	??_calc_expect_vout_adc_value+10
 10621  090A  3023               	movlw	35
 10622  090B  00BF               	movwf	??_calc_expect_vout_adc_value+11
 10623  090C  083C               	movf	??_calc_expect_vout_adc_value+8,w
 10624  090D  073E               	addwf	??_calc_expect_vout_adc_value+10,w
 10625  090E  0086               	movwf	6
 10626  090F  083D               	movf	??_calc_expect_vout_adc_value+9,w
 10627  0910  3D3F               	addwfc	??_calc_expect_vout_adc_value+11,w
 10628  0911  0087               	movwf	7
 10629  0912  3F40               	moviw [0]fsr1
 10630  0913  00C0               	movwf	??_calc_expect_vout_adc_value+12
 10631  0914  3F41               	moviw [1]fsr1
 10632  0915  00C1               	movwf	??_calc_expect_vout_adc_value+13
 10633  0916  083B               	movf	??_calc_expect_vout_adc_value+7,w
 10634  0917  0241               	subwf	??_calc_expect_vout_adc_value+13,w
 10635  0918  1D03               	skipz
 10636  0919  291C               	goto	u4695
 10637  091A  083A               	movf	??_calc_expect_vout_adc_value+6,w
 10638  091B  0240               	subwf	??_calc_expect_vout_adc_value+12,w
 10639  091C                     u4695:	
 10640  091C  1803               	skipnc
 10641  091D  2947               	goto	l5157
 10642                           
 10643                           ;sample.c: 461: if (x <= sysData.calibRsAdc[i+1])break;
 10644  091E  0846               	movf	calc_expect_vout_adc_value@i,w
 10645  091F  00B4               	movwf	??_calc_expect_vout_adc_value
 10646  0920  01B5               	clrf	??_calc_expect_vout_adc_value+1
 10647  0921  35B4               	lslf	??_calc_expect_vout_adc_value,f
 10648  0922  0DB5               	rlf	??_calc_expect_vout_adc_value+1,f
 10649  0923  0834               	movf	??_calc_expect_vout_adc_value,w
 10650  0924  3E02               	addlw	2
 10651  0925  00B6               	movwf	??_calc_expect_vout_adc_value+2
 10652  0926  3000               	movlw	0
 10653  0927  3D35               	addwfc	??_calc_expect_vout_adc_value+1,w
 10654  0928  00B7               	movwf	??_calc_expect_vout_adc_value+3
 10655  0929  3066               	movlw	102
 10656  092A  00B8               	movwf	??_calc_expect_vout_adc_value+4
 10657  092B  3023               	movlw	35
 10658  092C  00B9               	movwf	??_calc_expect_vout_adc_value+5
 10659  092D  0836               	movf	??_calc_expect_vout_adc_value+2,w
 10660  092E  0738               	addwf	??_calc_expect_vout_adc_value+4,w
 10661  092F  0086               	movwf	6
 10662  0930  0837               	movf	??_calc_expect_vout_adc_value+3,w
 10663  0931  3D39               	addwfc	??_calc_expect_vout_adc_value+5,w
 10664  0932  0087               	movwf	7
 10665  0933  3F40               	moviw [0]fsr1
 10666  0934  00BA               	movwf	??_calc_expect_vout_adc_value+6
 10667  0935  3F41               	moviw [1]fsr1
 10668  0936  00BB               	movwf	??_calc_expect_vout_adc_value+7
 10669  0937  0833               	movf	calc_expect_vout_adc_value@x+1,w
 10670  0938  023B               	subwf	??_calc_expect_vout_adc_value+7,w
 10671  0939  1D03               	skipz
 10672  093A  293D               	goto	u4705
 10673  093B  0832               	movf	calc_expect_vout_adc_value@x,w
 10674  093C  023A               	subwf	??_calc_expect_vout_adc_value+6,w
 10675  093D                     u4705:	
 10676  093D  1803               	btfsc	3,0
 10677  093E  2947               	goto	l5157
 10678                           
 10679                           ;sample.c: 464: break;
 10680                           
 10681                           ;sample.c: 462: }else{
 10682  093F  3001               	movlw	1
 10683  0940  00B4               	movwf	??_calc_expect_vout_adc_value
 10684  0941  0834               	movf	??_calc_expect_vout_adc_value,w
 10685  0942  07C6               	addwf	calc_expect_vout_adc_value@i,f
 10686  0943  301D               	movlw	29
 10687  0944  0246               	subwf	calc_expect_vout_adc_value@i,w
 10688  0945  1C03               	skipc
 10689  0946  28EA               	goto	l5147
 10690  0947                     l5157:	
 10691                           
 10692                           ;sample.c: 465: };sample.c: 466: };sample.c: 468: if (i > 30-2)i=30-2;
 10693  0947  301D               	movlw	29
 10694  0948  0246               	subwf	calc_expect_vout_adc_value@i,w
 10695  0949  1C03               	skipc
 10696  094A  294F               	goto	l5161
 10697  094B  301C               	movlw	28
 10698  094C  00B4               	movwf	??_calc_expect_vout_adc_value
 10699  094D  0834               	movf	??_calc_expect_vout_adc_value,w
 10700  094E  00C6               	movwf	calc_expect_vout_adc_value@i
 10701  094F                     l5161:	
 10702                           
 10703                           ;sample.c: 469: y1=sysData.calibVoMV[i+1];
 10704  094F  0846               	movf	calc_expect_vout_adc_value@i,w
 10705  0950  00B4               	movwf	??_calc_expect_vout_adc_value
 10706  0951  01B5               	clrf	??_calc_expect_vout_adc_value+1
 10707  0952  35B4               	lslf	??_calc_expect_vout_adc_value,f
 10708  0953  0DB5               	rlf	??_calc_expect_vout_adc_value+1,f
 10709  0954  0834               	movf	??_calc_expect_vout_adc_value,w
 10710  0955  3E02               	addlw	2
 10711  0956  00B6               	movwf	??_calc_expect_vout_adc_value+2
 10712  0957  3000               	movlw	0
 10713  0958  3D35               	addwfc	??_calc_expect_vout_adc_value+1,w
 10714  0959  00B7               	movwf	??_calc_expect_vout_adc_value+3
 10715  095A  30A2               	movlw	162
 10716  095B  00B8               	movwf	??_calc_expect_vout_adc_value+4
 10717  095C  3023               	movlw	35
 10718  095D  00B9               	movwf	??_calc_expect_vout_adc_value+5
 10719  095E  0836               	movf	??_calc_expect_vout_adc_value+2,w
 10720  095F  0738               	addwf	??_calc_expect_vout_adc_value+4,w
 10721  0960  0086               	movwf	6
 10722  0961  0837               	movf	??_calc_expect_vout_adc_value+3,w
 10723  0962  3D39               	addwfc	??_calc_expect_vout_adc_value+5,w
 10724  0963  0087               	movwf	7
 10725  0964  3F40               	moviw [0]fsr1
 10726  0965  00BA               	movwf	??_calc_expect_vout_adc_value+6
 10727  0966  3F41               	moviw [1]fsr1
 10728  0967  00BB               	movwf	??_calc_expect_vout_adc_value+7
 10729  0968  083A               	movf	??_calc_expect_vout_adc_value+6,w
 10730  0969  0021               	movlb	1	; select bank1
 10731  096A  00C0               	movwf	_y1^(0+128)
 10732  096B  0020               	movlb	0	; select bank0
 10733  096C  083B               	movf	??_calc_expect_vout_adc_value+7,w
 10734  096D  0021               	movlb	1	; select bank1
 10735  096E  00C1               	movwf	(_y1^(0+128)+1)
 10736  096F  01C2               	clrf	(_y1^(0+128)+2)
 10737  0970  01C3               	clrf	(_y1^(0+128)+3)
 10738                           
 10739                           ;sample.c: 470: y0=sysData.calibVoMV[i];
 10740  0971  0020               	movlb	0	; select bank0
 10741  0972  0846               	movf	calc_expect_vout_adc_value@i,w
 10742  0973  00B4               	movwf	??_calc_expect_vout_adc_value
 10743  0974  01B5               	clrf	??_calc_expect_vout_adc_value+1
 10744  0975  35B4               	lslf	??_calc_expect_vout_adc_value,f
 10745  0976  0DB5               	rlf	??_calc_expect_vout_adc_value+1,f
 10746  0977  30A2               	movlw	162
 10747  0978  00B6               	movwf	??_calc_expect_vout_adc_value+2
 10748  0979  3023               	movlw	35
 10749  097A  00B7               	movwf	??_calc_expect_vout_adc_value+3
 10750  097B  0834               	movf	??_calc_expect_vout_adc_value,w
 10751  097C  0736               	addwf	??_calc_expect_vout_adc_value+2,w
 10752  097D  0086               	movwf	6
 10753  097E  0835               	movf	??_calc_expect_vout_adc_value+1,w
 10754  097F  3D37               	addwfc	??_calc_expect_vout_adc_value+3,w
 10755  0980  0087               	movwf	7
 10756  0981  3F40               	moviw [0]fsr1
 10757  0982  00B8               	movwf	??_calc_expect_vout_adc_value+4
 10758  0983  3F41               	moviw [1]fsr1
 10759  0984  00B9               	movwf	??_calc_expect_vout_adc_value+5
 10760  0985  0838               	movf	??_calc_expect_vout_adc_value+4,w
 10761  0986  00CF               	movwf	_y0
 10762  0987  0839               	movf	??_calc_expect_vout_adc_value+5,w
 10763  0988  00D0               	movwf	_y0+1
 10764  0989  01D1               	clrf	_y0+2
 10765  098A  01D2               	clrf	_y0+3
 10766                           
 10767                           ;sample.c: 473: x1=sysData.calibRsAdc[i+1];
 10768  098B  0846               	movf	calc_expect_vout_adc_value@i,w
 10769  098C  00B4               	movwf	??_calc_expect_vout_adc_value
 10770  098D  01B5               	clrf	??_calc_expect_vout_adc_value+1
 10771  098E  35B4               	lslf	??_calc_expect_vout_adc_value,f
 10772  098F  0DB5               	rlf	??_calc_expect_vout_adc_value+1,f
 10773  0990  0834               	movf	??_calc_expect_vout_adc_value,w
 10774  0991  3E02               	addlw	2
 10775  0992  00B6               	movwf	??_calc_expect_vout_adc_value+2
 10776  0993  3000               	movlw	0
 10777  0994  3D35               	addwfc	??_calc_expect_vout_adc_value+1,w
 10778  0995  00B7               	movwf	??_calc_expect_vout_adc_value+3
 10779  0996  3066               	movlw	102
 10780  0997  00B8               	movwf	??_calc_expect_vout_adc_value+4
 10781  0998  3023               	movlw	35
 10782  0999  00B9               	movwf	??_calc_expect_vout_adc_value+5
 10783  099A  0836               	movf	??_calc_expect_vout_adc_value+2,w
 10784  099B  0738               	addwf	??_calc_expect_vout_adc_value+4,w
 10785  099C  0086               	movwf	6
 10786  099D  0837               	movf	??_calc_expect_vout_adc_value+3,w
 10787  099E  3D39               	addwfc	??_calc_expect_vout_adc_value+5,w
 10788  099F  0087               	movwf	7
 10789  09A0  3F40               	moviw [0]fsr1
 10790  09A1  00BA               	movwf	??_calc_expect_vout_adc_value+6
 10791  09A2  3F41               	moviw [1]fsr1
 10792  09A3  00BB               	movwf	??_calc_expect_vout_adc_value+7
 10793  09A4  083A               	movf	??_calc_expect_vout_adc_value+6,w
 10794  09A5  0021               	movlb	1	; select bank1
 10795  09A6  00BC               	movwf	_x1^(0+128)
 10796  09A7  0020               	movlb	0	; select bank0
 10797  09A8  083B               	movf	??_calc_expect_vout_adc_value+7,w
 10798  09A9  0021               	movlb	1	; select bank1
 10799  09AA  00BD               	movwf	(_x1^(0+128)+1)
 10800  09AB  01BE               	clrf	(_x1^(0+128)+2)
 10801  09AC  01BF               	clrf	(_x1^(0+128)+3)
 10802                           
 10803                           ;sample.c: 474: x0=sysData.calibRsAdc[i];
 10804  09AD  0020               	movlb	0	; select bank0
 10805  09AE  0846               	movf	calc_expect_vout_adc_value@i,w
 10806  09AF  00B4               	movwf	??_calc_expect_vout_adc_value
 10807  09B0  01B5               	clrf	??_calc_expect_vout_adc_value+1
 10808  09B1  35B4               	lslf	??_calc_expect_vout_adc_value,f
 10809  09B2  0DB5               	rlf	??_calc_expect_vout_adc_value+1,f
 10810  09B3  3066               	movlw	102
 10811  09B4  00B6               	movwf	??_calc_expect_vout_adc_value+2
 10812  09B5  3023               	movlw	35
 10813  09B6  00B7               	movwf	??_calc_expect_vout_adc_value+3
 10814  09B7  0834               	movf	??_calc_expect_vout_adc_value,w
 10815  09B8  0736               	addwf	??_calc_expect_vout_adc_value+2,w
 10816  09B9  0086               	movwf	6
 10817  09BA  0835               	movf	??_calc_expect_vout_adc_value+1,w
 10818  09BB  3D37               	addwfc	??_calc_expect_vout_adc_value+3,w
 10819  09BC  0087               	movwf	7
 10820  09BD  3F40               	moviw [0]fsr1
 10821  09BE  00B8               	movwf	??_calc_expect_vout_adc_value+4
 10822  09BF  3F41               	moviw [1]fsr1
 10823  09C0  00B9               	movwf	??_calc_expect_vout_adc_value+5
 10824  09C1  0838               	movf	??_calc_expect_vout_adc_value+4,w
 10825  09C2  00CB               	movwf	_x0
 10826  09C3  0839               	movf	??_calc_expect_vout_adc_value+5,w
 10827  09C4  00CC               	movwf	_x0+1
 10828  09C5  01CD               	clrf	_x0+2
 10829  09C6  01CE               	clrf	_x0+3
 10830                           
 10831                           ;sample.c: 476: if(x<=x0 && i==0)return (uint16_t)y0;
 10832  09C7  0832               	movf	calc_expect_vout_adc_value@x,w
 10833  09C8  00B4               	movwf	??_calc_expect_vout_adc_value
 10834  09C9  0833               	movf	calc_expect_vout_adc_value@x+1,w
 10835  09CA  00B5               	movwf	??_calc_expect_vout_adc_value+1
 10836  09CB  01B6               	clrf	??_calc_expect_vout_adc_value+2
 10837  09CC  01B7               	clrf	??_calc_expect_vout_adc_value+3
 10838  09CD  084E               	movf	_x0+3,w
 10839  09CE  3A80               	xorlw	128
 10840  09CF  00B8               	movwf	??_calc_expect_vout_adc_value+4
 10841  09D0  0837               	movf	??_calc_expect_vout_adc_value+3,w
 10842  09D1  3A80               	xorlw	128
 10843  09D2  0238               	subwf	??_calc_expect_vout_adc_value+4,w
 10844  09D3  1D03               	skipz
 10845  09D4  29DF               	goto	u4733
 10846  09D5  0836               	movf	??_calc_expect_vout_adc_value+2,w
 10847  09D6  024D               	subwf	_x0+2,w
 10848  09D7  1D03               	skipz
 10849  09D8  29DF               	goto	u4733
 10850  09D9  0835               	movf	??_calc_expect_vout_adc_value+1,w
 10851  09DA  024C               	subwf	_x0+1,w
 10852  09DB  1D03               	skipz
 10853  09DC  29DF               	goto	u4733
 10854  09DD  0834               	movf	??_calc_expect_vout_adc_value,w
 10855  09DE  024B               	subwf	_x0,w
 10856  09DF                     u4733:	
 10857  09DF  1C03               	skipc
 10858  09E0  29E9               	goto	l5175
 10859  09E1  0846               	movf	calc_expect_vout_adc_value@i,w
 10860  09E2  1D03               	btfss	3,2
 10861  09E3  29E9               	goto	l5175
 10862  09E4  0850               	movf	_y0+1,w
 10863  09E5  00B3               	movwf	?_calc_expect_vout_adc_value+1
 10864  09E6  084F               	movf	_y0,w
 10865  09E7  00B2               	movwf	?_calc_expect_vout_adc_value
 10866  09E8  0008               	return
 10867  09E9                     l5175:	
 10868                           
 10869                           ;sample.c: 477: if(x1<=x0)return (uint16_t)y0;
 10870  09E9  084E               	movf	_x0+3,w
 10871  09EA  3A80               	xorlw	128
 10872  09EB  00B4               	movwf	??_calc_expect_vout_adc_value
 10873  09EC  0021               	movlb	1	; select bank1
 10874  09ED  083F               	movf	(_x1+3)^(0+128),w
 10875  09EE  3A80               	xorlw	128
 10876  09EF  0020               	movlb	0	; select bank0
 10877  09F0  0234               	subwf	??_calc_expect_vout_adc_value,w
 10878  09F1  1D03               	skipz
 10879  09F2  2A03               	goto	u4753
 10880  09F3  0021               	movlb	1	; select bank1
 10881  09F4  083E               	movf	(_x1+2)^(0+128),w
 10882  09F5  0020               	movlb	0	; select bank0
 10883  09F6  024D               	subwf	_x0+2,w
 10884  09F7  1D03               	skipz
 10885  09F8  2A03               	goto	u4753
 10886  09F9  0021               	movlb	1	; select bank1
 10887  09FA  083D               	movf	(_x1+1)^(0+128),w
 10888  09FB  0020               	movlb	0	; select bank0
 10889  09FC  024C               	subwf	_x0+1,w
 10890  09FD  1D03               	skipz
 10891  09FE  2A03               	goto	u4753
 10892  09FF  0021               	movlb	1	; select bank1
 10893  0A00  083C               	movf	_x1^(0+128),w
 10894  0A01  0020               	movlb	0	; select bank0
 10895  0A02  024B               	subwf	_x0,w
 10896  0A03                     u4753:	
 10897  0A03  1C03               	skipc
 10898  0A04  2A0A               	goto	l5181
 10899  0A05  0850               	movf	_y0+1,w
 10900  0A06  00B3               	movwf	?_calc_expect_vout_adc_value+1
 10901  0A07  084F               	movf	_y0,w
 10902  0A08  00B2               	movwf	?_calc_expect_vout_adc_value
 10903  0A09  0008               	return
 10904  0A0A                     l5181:	
 10905                           
 10906                           ;sample.c: 480: t32=(x-x0);
 10907  0A0A  094B               	comf	_x0,w
 10908  0A0B  00B4               	movwf	??_calc_expect_vout_adc_value
 10909  0A0C  094C               	comf	_x0+1,w
 10910  0A0D  00B5               	movwf	??_calc_expect_vout_adc_value+1
 10911  0A0E  094D               	comf	_x0+2,w
 10912  0A0F  00B6               	movwf	??_calc_expect_vout_adc_value+2
 10913  0A10  094E               	comf	_x0+3,w
 10914  0A11  00B7               	movwf	??_calc_expect_vout_adc_value+3
 10915  0A12  0AB4               	incf	??_calc_expect_vout_adc_value,f
 10916  0A13  1903               	skipnz
 10917  0A14  0AB5               	incf	??_calc_expect_vout_adc_value+1,f
 10918  0A15  1903               	skipnz
 10919  0A16  0AB6               	incf	??_calc_expect_vout_adc_value+2,f
 10920  0A17  1903               	skipnz
 10921  0A18  0AB7               	incf	??_calc_expect_vout_adc_value+3,f
 10922  0A19  0832               	movf	calc_expect_vout_adc_value@x,w
 10923  0A1A  00B8               	movwf	??_calc_expect_vout_adc_value+4
 10924  0A1B  0833               	movf	calc_expect_vout_adc_value@x+1,w
 10925  0A1C  00B9               	movwf	??_calc_expect_vout_adc_value+5
 10926  0A1D  01BA               	clrf	??_calc_expect_vout_adc_value+6
 10927  0A1E  01BB               	clrf	??_calc_expect_vout_adc_value+7
 10928  0A1F  0838               	movf	??_calc_expect_vout_adc_value+4,w
 10929  0A20  07B4               	addwf	??_calc_expect_vout_adc_value,f
 10930  0A21  0839               	movf	??_calc_expect_vout_adc_value+5,w
 10931  0A22  3DB5               	addwfc	??_calc_expect_vout_adc_value+1,f
 10932  0A23  083A               	movf	??_calc_expect_vout_adc_value+6,w
 10933  0A24  3DB6               	addwfc	??_calc_expect_vout_adc_value+2,f
 10934  0A25  083B               	movf	??_calc_expect_vout_adc_value+7,w
 10935  0A26  3DB7               	addwfc	??_calc_expect_vout_adc_value+3,f
 10936  0A27  0837               	movf	??_calc_expect_vout_adc_value+3,w
 10937  0A28  00C5               	movwf	calc_expect_vout_adc_value@t32+3
 10938  0A29  0836               	movf	??_calc_expect_vout_adc_value+2,w
 10939  0A2A  00C4               	movwf	calc_expect_vout_adc_value@t32+2
 10940  0A2B  0835               	movf	??_calc_expect_vout_adc_value+1,w
 10941  0A2C  00C3               	movwf	calc_expect_vout_adc_value@t32+1
 10942  0A2D  0834               	movf	??_calc_expect_vout_adc_value,w
 10943  0A2E  00C2               	movwf	calc_expect_vout_adc_value@t32
 10944                           
 10945                           ;sample.c: 481: t32=t32*(y1-y0);
 10946  0A2F  0021               	movlb	1	; select bank1
 10947  0A30  0840               	movf	_y1^(0+128),w
 10948  0A31  0020               	movlb	0	; select bank0
 10949  0A32  00B4               	movwf	??_calc_expect_vout_adc_value
 10950  0A33  0021               	movlb	1	; select bank1
 10951  0A34  0841               	movf	(_y1+1)^(0+128),w
 10952  0A35  0020               	movlb	0	; select bank0
 10953  0A36  00B5               	movwf	??_calc_expect_vout_adc_value+1
 10954  0A37  0021               	movlb	1	; select bank1
 10955  0A38  0842               	movf	(_y1+2)^(0+128),w
 10956  0A39  0020               	movlb	0	; select bank0
 10957  0A3A  00B6               	movwf	??_calc_expect_vout_adc_value+2
 10958  0A3B  0021               	movlb	1	; select bank1
 10959  0A3C  0843               	movf	(_y1+3)^(0+128),w
 10960  0A3D  0020               	movlb	0	; select bank0
 10961  0A3E  00B7               	movwf	??_calc_expect_vout_adc_value+3
 10962  0A3F  094F               	comf	_y0,w
 10963  0A40  00B8               	movwf	??_calc_expect_vout_adc_value+4
 10964  0A41  0950               	comf	_y0+1,w
 10965  0A42  00B9               	movwf	??_calc_expect_vout_adc_value+5
 10966  0A43  0951               	comf	_y0+2,w
 10967  0A44  00BA               	movwf	??_calc_expect_vout_adc_value+6
 10968  0A45  0952               	comf	_y0+3,w
 10969  0A46  00BB               	movwf	??_calc_expect_vout_adc_value+7
 10970  0A47  0AB8               	incf	??_calc_expect_vout_adc_value+4,f
 10971  0A48  1903               	skipnz
 10972  0A49  0AB9               	incf	??_calc_expect_vout_adc_value+5,f
 10973  0A4A  1903               	skipnz
 10974  0A4B  0ABA               	incf	??_calc_expect_vout_adc_value+6,f
 10975  0A4C  1903               	skipnz
 10976  0A4D  0ABB               	incf	??_calc_expect_vout_adc_value+7,f
 10977  0A4E  0838               	movf	??_calc_expect_vout_adc_value+4,w
 10978  0A4F  07B4               	addwf	??_calc_expect_vout_adc_value,f
 10979  0A50  0839               	movf	??_calc_expect_vout_adc_value+5,w
 10980  0A51  3DB5               	addwfc	??_calc_expect_vout_adc_value+1,f
 10981  0A52  083A               	movf	??_calc_expect_vout_adc_value+6,w
 10982  0A53  3DB6               	addwfc	??_calc_expect_vout_adc_value+2,f
 10983  0A54  083B               	movf	??_calc_expect_vout_adc_value+7,w
 10984  0A55  3DB7               	addwfc	??_calc_expect_vout_adc_value+3,f
 10985  0A56  0837               	movf	??_calc_expect_vout_adc_value+3,w
 10986  0A57  00F4               	movwf	___lmul@multiplier+3
 10987  0A58  0836               	movf	??_calc_expect_vout_adc_value+2,w
 10988  0A59  00F3               	movwf	___lmul@multiplier+2
 10989  0A5A  0835               	movf	??_calc_expect_vout_adc_value+1,w
 10990  0A5B  00F2               	movwf	___lmul@multiplier+1
 10991  0A5C  0834               	movf	??_calc_expect_vout_adc_value,w
 10992  0A5D  00F1               	movwf	___lmul@multiplier
 10993  0A5E  0845               	movf	calc_expect_vout_adc_value@t32+3,w
 10994  0A5F  00F8               	movwf	___lmul@multiplicand+3
 10995  0A60  0844               	movf	calc_expect_vout_adc_value@t32+2,w
 10996  0A61  00F7               	movwf	___lmul@multiplicand+2
 10997  0A62  0843               	movf	calc_expect_vout_adc_value@t32+1,w
 10998  0A63  00F6               	movwf	___lmul@multiplicand+1
 10999  0A64  0842               	movf	calc_expect_vout_adc_value@t32,w
 11000  0A65  00F5               	movwf	___lmul@multiplicand
 11001  0A66  319E  2664  3188   	fcall	___lmul
 11002  0A69  0874               	movf	?___lmul+3,w
 11003  0A6A  0020               	movlb	0	; select bank0
 11004  0A6B  00C5               	movwf	calc_expect_vout_adc_value@t32+3
 11005  0A6C  0873               	movf	?___lmul+2,w
 11006  0A6D  00C4               	movwf	calc_expect_vout_adc_value@t32+2
 11007  0A6E  0872               	movf	?___lmul+1,w
 11008  0A6F  00C3               	movwf	calc_expect_vout_adc_value@t32+1
 11009  0A70  0871               	movf	?___lmul,w
 11010  0A71  00C2               	movwf	calc_expect_vout_adc_value@t32
 11011                           
 11012                           ;sample.c: 482: t32=t32/(x1-x0);
 11013  0A72  0021               	movlb	1	; select bank1
 11014  0A73  083C               	movf	_x1^(0+128),w
 11015  0A74  0020               	movlb	0	; select bank0
 11016  0A75  00B4               	movwf	??_calc_expect_vout_adc_value
 11017  0A76  0021               	movlb	1	; select bank1
 11018  0A77  083D               	movf	(_x1+1)^(0+128),w
 11019  0A78  0020               	movlb	0	; select bank0
 11020  0A79  00B5               	movwf	??_calc_expect_vout_adc_value+1
 11021  0A7A  0021               	movlb	1	; select bank1
 11022  0A7B  083E               	movf	(_x1+2)^(0+128),w
 11023  0A7C  0020               	movlb	0	; select bank0
 11024  0A7D  00B6               	movwf	??_calc_expect_vout_adc_value+2
 11025  0A7E  0021               	movlb	1	; select bank1
 11026  0A7F  083F               	movf	(_x1+3)^(0+128),w
 11027  0A80  0020               	movlb	0	; select bank0
 11028  0A81  00B7               	movwf	??_calc_expect_vout_adc_value+3
 11029  0A82  094B               	comf	_x0,w
 11030  0A83  00B8               	movwf	??_calc_expect_vout_adc_value+4
 11031  0A84  094C               	comf	_x0+1,w
 11032  0A85  00B9               	movwf	??_calc_expect_vout_adc_value+5
 11033  0A86  094D               	comf	_x0+2,w
 11034  0A87  00BA               	movwf	??_calc_expect_vout_adc_value+6
 11035  0A88  094E               	comf	_x0+3,w
 11036  0A89  00BB               	movwf	??_calc_expect_vout_adc_value+7
 11037  0A8A  0AB8               	incf	??_calc_expect_vout_adc_value+4,f
 11038  0A8B  1903               	skipnz
 11039  0A8C  0AB9               	incf	??_calc_expect_vout_adc_value+5,f
 11040  0A8D  1903               	skipnz
 11041  0A8E  0ABA               	incf	??_calc_expect_vout_adc_value+6,f
 11042  0A8F  1903               	skipnz
 11043  0A90  0ABB               	incf	??_calc_expect_vout_adc_value+7,f
 11044  0A91  0838               	movf	??_calc_expect_vout_adc_value+4,w
 11045  0A92  07B4               	addwf	??_calc_expect_vout_adc_value,f
 11046  0A93  0839               	movf	??_calc_expect_vout_adc_value+5,w
 11047  0A94  3DB5               	addwfc	??_calc_expect_vout_adc_value+1,f
 11048  0A95  083A               	movf	??_calc_expect_vout_adc_value+6,w
 11049  0A96  3DB6               	addwfc	??_calc_expect_vout_adc_value+2,f
 11050  0A97  083B               	movf	??_calc_expect_vout_adc_value+7,w
 11051  0A98  3DB7               	addwfc	??_calc_expect_vout_adc_value+3,f
 11052  0A99  0837               	movf	??_calc_expect_vout_adc_value+3,w
 11053  0A9A  00A7               	movwf	___aldiv@divisor+3
 11054  0A9B  0836               	movf	??_calc_expect_vout_adc_value+2,w
 11055  0A9C  00A6               	movwf	___aldiv@divisor+2
 11056  0A9D  0835               	movf	??_calc_expect_vout_adc_value+1,w
 11057  0A9E  00A5               	movwf	___aldiv@divisor+1
 11058  0A9F  0834               	movf	??_calc_expect_vout_adc_value,w
 11059  0AA0  00A4               	movwf	___aldiv@divisor
 11060  0AA1  0845               	movf	calc_expect_vout_adc_value@t32+3,w
 11061  0AA2  00AB               	movwf	___aldiv@dividend+3
 11062  0AA3  0844               	movf	calc_expect_vout_adc_value@t32+2,w
 11063  0AA4  00AA               	movwf	___aldiv@dividend+2
 11064  0AA5  0843               	movf	calc_expect_vout_adc_value@t32+1,w
 11065  0AA6  00A9               	movwf	___aldiv@dividend+1
 11066  0AA7  0842               	movf	calc_expect_vout_adc_value@t32,w
 11067  0AA8  00A8               	movwf	___aldiv@dividend
 11068  0AA9  3193  237F  3188   	fcall	___aldiv
 11069  0AAC  0020               	movlb	0	; select bank0
 11070  0AAD  0827               	movf	?___aldiv+3,w
 11071  0AAE  00C5               	movwf	calc_expect_vout_adc_value@t32+3
 11072  0AAF  0826               	movf	?___aldiv+2,w
 11073  0AB0  00C4               	movwf	calc_expect_vout_adc_value@t32+2
 11074  0AB1  0825               	movf	?___aldiv+1,w
 11075  0AB2  00C3               	movwf	calc_expect_vout_adc_value@t32+1
 11076  0AB3  0824               	movf	?___aldiv,w
 11077  0AB4  00C2               	movwf	calc_expect_vout_adc_value@t32
 11078                           
 11079                           ;sample.c: 483: t32=t32+y0;
 11080  0AB5  0842               	movf	calc_expect_vout_adc_value@t32,w
 11081  0AB6  074F               	addwf	_y0,w
 11082  0AB7  00B4               	movwf	??_calc_expect_vout_adc_value
 11083  0AB8  0843               	movf	calc_expect_vout_adc_value@t32+1,w
 11084  0AB9  3D50               	addwfc	_y0+1,w
 11085  0ABA  00B5               	movwf	??_calc_expect_vout_adc_value+1
 11086  0ABB  0844               	movf	calc_expect_vout_adc_value@t32+2,w
 11087  0ABC  3D51               	addwfc	_y0+2,w
 11088  0ABD  00B6               	movwf	??_calc_expect_vout_adc_value+2
 11089  0ABE  0845               	movf	calc_expect_vout_adc_value@t32+3,w
 11090  0ABF  3D52               	addwfc	_y0+3,w
 11091  0AC0  00B7               	movwf	??_calc_expect_vout_adc_value+3
 11092  0AC1  0837               	movf	??_calc_expect_vout_adc_value+3,w
 11093  0AC2  00C5               	movwf	calc_expect_vout_adc_value@t32+3
 11094  0AC3  0836               	movf	??_calc_expect_vout_adc_value+2,w
 11095  0AC4  00C4               	movwf	calc_expect_vout_adc_value@t32+2
 11096  0AC5  0835               	movf	??_calc_expect_vout_adc_value+1,w
 11097  0AC6  00C3               	movwf	calc_expect_vout_adc_value@t32+1
 11098  0AC7  0834               	movf	??_calc_expect_vout_adc_value,w
 11099  0AC8  00C2               	movwf	calc_expect_vout_adc_value@t32
 11100                           
 11101                           ;sample.c: 484: if(t32<0)t32=0;
 11102  0AC9  1FC5               	btfss	calc_expect_vout_adc_value@t32+3,7
 11103  0ACA  2AD3               	goto	l683
 11104  0ACB  3000               	movlw	0
 11105  0ACC  00C5               	movwf	calc_expect_vout_adc_value@t32+3
 11106  0ACD  3000               	movlw	0
 11107  0ACE  00C4               	movwf	calc_expect_vout_adc_value@t32+2
 11108  0ACF  3000               	movlw	0
 11109  0AD0  00C3               	movwf	calc_expect_vout_adc_value@t32+1
 11110  0AD1  3000               	movlw	0
 11111  0AD2  00C2               	movwf	calc_expect_vout_adc_value@t32
 11112  0AD3                     l683:	
 11113                           
 11114                           ;sample.c: 485: return (uint16_t)t32;
 11115  0AD3  0843               	movf	calc_expect_vout_adc_value@t32+1,w
 11116  0AD4  00B3               	movwf	?_calc_expect_vout_adc_value+1
 11117  0AD5  0842               	movf	calc_expect_vout_adc_value@t32,w
 11118  0AD6  00B2               	movwf	?_calc_expect_vout_adc_value
 11119  0AD7  0008               	return
 11120  0AD8                     __end_of_calc_expect_vout_adc_value:	
 11121                           
 11122                           	psect	text33
 11123  1E64                     __ptext33:	
 11124 ;; *************** function ___lmul *****************
 11125 ;; Defined at:
 11126 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul32.c"
 11127 ;; Parameters:    Size  Location     Type
 11128 ;;  multiplier      4    1[COMMON] unsigned long 
 11129 ;;  multiplicand    4    5[COMMON] unsigned long 
 11130 ;; Auto vars:     Size  Location     Type
 11131 ;;  product         4    0[BANK0 ] unsigned long 
 11132 ;; Return value:  Size  Location     Type
 11133 ;;                  4    1[COMMON] unsigned long 
 11134 ;; Registers used:
 11135 ;;		wreg, status,2, status,0
 11136 ;; Tracked objects:
 11137 ;;		On entry : 0/0
 11138 ;;		On exit  : 0/0
 11139 ;;		Unchanged: 0/0
 11140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11141 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11142 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11144 ;;      Totals:         8       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11145 ;;Total ram usage:       12 bytes
 11146 ;; Hardware stack levels used:    1
 11147 ;; Hardware stack levels required when called:    1
 11148 ;; This function calls:
 11149 ;;		Nothing
 11150 ;; This function is called by:
 11151 ;;		_calc_temp_rs
 11152 ;;		_calc_temp_rc
 11153 ;;		_pid_pwm1_idrv_run
 11154 ;;		_calc_expect_vout_adc_value
 11155 ;;		_cal_rs_simulate_power
 11156 ;;		_m_math_pow
 11157 ;; This function uses a non-reentrant model
 11158 ;;
 11159                           
 11160                           
 11161                           ;psect for function ___lmul
 11162  1E64                     ___lmul:	
 11163                           
 11164                           ;incstack = 0
 11165                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 11166  1E64  3000               	movlw	0
 11167  1E65  0020               	movlb	0	; select bank0
 11168  1E66  00A3               	movwf	___lmul@product+3
 11169  1E67  3000               	movlw	0
 11170  1E68  00A2               	movwf	___lmul@product+2
 11171  1E69  3000               	movlw	0
 11172  1E6A  00A1               	movwf	___lmul@product+1
 11173  1E6B  3000               	movlw	0
 11174  1E6C  00A0               	movwf	___lmul@product
 11175  1E6D                     l4999:	
 11176  1E6D  1C71               	btfss	___lmul@multiplier,0
 11177  1E6E  2E78               	goto	l5003
 11178  1E6F  0875               	movf	___lmul@multiplicand,w
 11179  1E70  0020               	movlb	0	; select bank0
 11180  1E71  07A0               	addwf	___lmul@product,f
 11181  1E72  0876               	movf	___lmul@multiplicand+1,w
 11182  1E73  3DA1               	addwfc	___lmul@product+1,f
 11183  1E74  0877               	movf	___lmul@multiplicand+2,w
 11184  1E75  3DA2               	addwfc	___lmul@product+2,f
 11185  1E76  0878               	movf	___lmul@multiplicand+3,w
 11186  1E77  3DA3               	addwfc	___lmul@product+3,f
 11187  1E78                     l5003:	
 11188  1E78  3001               	movlw	1
 11189  1E79                     u4445:	
 11190  1E79  35F5               	lslf	___lmul@multiplicand,f
 11191  1E7A  0DF6               	rlf	___lmul@multiplicand+1,f
 11192  1E7B  0DF7               	rlf	___lmul@multiplicand+2,f
 11193  1E7C  0DF8               	rlf	___lmul@multiplicand+3,f
 11194  1E7D  0B89               	decfsz	9,f
 11195  1E7E  2E79               	goto	u4445
 11196  1E7F  3001               	movlw	1
 11197  1E80                     u4455:	
 11198  1E80  36F4               	lsrf	___lmul@multiplier+3,f
 11199  1E81  0CF3               	rrf	___lmul@multiplier+2,f
 11200  1E82  0CF2               	rrf	___lmul@multiplier+1,f
 11201  1E83  0CF1               	rrf	___lmul@multiplier,f
 11202  1E84  0B89               	decfsz	9,f
 11203  1E85  2E80               	goto	u4455
 11204  1E86  0874               	movf	___lmul@multiplier+3,w
 11205  1E87  0473               	iorwf	___lmul@multiplier+2,w
 11206  1E88  0472               	iorwf	___lmul@multiplier+1,w
 11207  1E89  0471               	iorwf	___lmul@multiplier,w
 11208  1E8A  1D03               	skipz
 11209  1E8B  2E6D               	goto	l4999
 11210  1E8C  0020               	movlb	0	; select bank0
 11211  1E8D  0823               	movf	___lmul@product+3,w
 11212  1E8E  00F4               	movwf	?___lmul+3
 11213  1E8F  0822               	movf	___lmul@product+2,w
 11214  1E90  00F3               	movwf	?___lmul+2
 11215  1E91  0821               	movf	___lmul@product+1,w
 11216  1E92  00F2               	movwf	?___lmul+1
 11217  1E93  0820               	movf	___lmul@product,w
 11218  1E94  00F1               	movwf	?___lmul
 11219  1E95  0008               	return
 11220  1E96                     __end_of___lmul:	
 11221                           
 11222                           	psect	text34
 11223  137F                     __ptext34:	
 11224 ;; *************** function ___aldiv *****************
 11225 ;; Defined at:
 11226 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\aldiv.c"
 11227 ;; Parameters:    Size  Location     Type
 11228 ;;  divisor         4    4[BANK0 ] long 
 11229 ;;  dividend        4    8[BANK0 ] long 
 11230 ;; Auto vars:     Size  Location     Type
 11231 ;;  quotient        4   14[BANK0 ] long 
 11232 ;;  sign            1   13[BANK0 ] unsigned char 
 11233 ;;  counter         1   12[BANK0 ] unsigned char 
 11234 ;; Return value:  Size  Location     Type
 11235 ;;                  4    4[BANK0 ] long 
 11236 ;; Registers used:
 11237 ;;		wreg, status,2, status,0
 11238 ;; Tracked objects:
 11239 ;;		On entry : 0/0
 11240 ;;		On exit  : 0/0
 11241 ;;		Unchanged: 0/0
 11242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11243 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11244 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11245 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11246 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11247 ;;Total ram usage:       15 bytes
 11248 ;; Hardware stack levels used:    1
 11249 ;; Hardware stack levels required when called:    1
 11250 ;; This function calls:
 11251 ;;		Nothing
 11252 ;; This function is called by:
 11253 ;;		_pid_pwm1_idrv_run
 11254 ;;		_calc_expect_vout_adc_value
 11255 ;;		_m_int_2_str
 11256 ;;		_m_int_2_str_ex
 11257 ;; This function uses a non-reentrant model
 11258 ;;
 11259                           
 11260                           
 11261                           ;psect for function ___aldiv
 11262  137F                     ___aldiv:	
 11263                           
 11264                           ;incstack = 0
 11265                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 11266  137F  0020               	movlb	0	; select bank0
 11267  1380  01AD               	clrf	___aldiv@sign
 11268  1381  1FA7               	btfss	___aldiv@divisor+3,7
 11269  1382  2B90               	goto	l1151
 11270  1383  09A4               	comf	___aldiv@divisor,f
 11271  1384  09A5               	comf	___aldiv@divisor+1,f
 11272  1385  09A6               	comf	___aldiv@divisor+2,f
 11273  1386  09A7               	comf	___aldiv@divisor+3,f
 11274  1387  0AA4               	incf	___aldiv@divisor,f
 11275  1388  1903               	skipnz
 11276  1389  0AA5               	incf	___aldiv@divisor+1,f
 11277  138A  1903               	skipnz
 11278  138B  0AA6               	incf	___aldiv@divisor+2,f
 11279  138C  1903               	skipnz
 11280  138D  0AA7               	incf	___aldiv@divisor+3,f
 11281  138E  01AD               	clrf	___aldiv@sign
 11282  138F  0AAD               	incf	___aldiv@sign,f
 11283  1390                     l1151:	
 11284  1390  1FAB               	btfss	___aldiv@dividend+3,7
 11285  1391  2BA1               	goto	l5021
 11286  1392  09A8               	comf	___aldiv@dividend,f
 11287  1393  09A9               	comf	___aldiv@dividend+1,f
 11288  1394  09AA               	comf	___aldiv@dividend+2,f
 11289  1395  09AB               	comf	___aldiv@dividend+3,f
 11290  1396  0AA8               	incf	___aldiv@dividend,f
 11291  1397  1903               	skipnz
 11292  1398  0AA9               	incf	___aldiv@dividend+1,f
 11293  1399  1903               	skipnz
 11294  139A  0AAA               	incf	___aldiv@dividend+2,f
 11295  139B  1903               	skipnz
 11296  139C  0AAB               	incf	___aldiv@dividend+3,f
 11297  139D  3001               	movlw	1
 11298  139E  00F9               	movwf	??___aldiv
 11299  139F  0879               	movf	??___aldiv,w
 11300  13A0  06AD               	xorwf	___aldiv@sign,f
 11301  13A1                     l5021:	
 11302  13A1  3000               	movlw	0
 11303  13A2  00B1               	movwf	___aldiv@quotient+3
 11304  13A3  3000               	movlw	0
 11305  13A4  00B0               	movwf	___aldiv@quotient+2
 11306  13A5  3000               	movlw	0
 11307  13A6  00AF               	movwf	___aldiv@quotient+1
 11308  13A7  3000               	movlw	0
 11309  13A8  00AE               	movwf	___aldiv@quotient
 11310  13A9  0827               	movf	___aldiv@divisor+3,w
 11311  13AA  0426               	iorwf	___aldiv@divisor+2,w
 11312  13AB  0425               	iorwf	___aldiv@divisor+1,w
 11313  13AC  0424               	iorwf	___aldiv@divisor,w
 11314  13AD  1903               	skipnz
 11315  13AE  2BEA               	goto	l5043
 11316  13AF  01AC               	clrf	___aldiv@counter
 11317  13B0  0AAC               	incf	___aldiv@counter,f
 11318  13B1                     l5029:	
 11319  13B1  1BA7               	btfsc	___aldiv@divisor+3,7
 11320  13B2  2BBF               	goto	l5031
 11321  13B3  3001               	movlw	1
 11322  13B4                     u4505:	
 11323  13B4  35A4               	lslf	___aldiv@divisor,f
 11324  13B5  0DA5               	rlf	___aldiv@divisor+1,f
 11325  13B6  0DA6               	rlf	___aldiv@divisor+2,f
 11326  13B7  0DA7               	rlf	___aldiv@divisor+3,f
 11327  13B8  0B89               	decfsz	9,f
 11328  13B9  2BB4               	goto	u4505
 11329  13BA  3001               	movlw	1
 11330  13BB  00F9               	movwf	??___aldiv
 11331  13BC  0879               	movf	??___aldiv,w
 11332  13BD  07AC               	addwf	___aldiv@counter,f
 11333  13BE  2BB1               	goto	l5029
 11334  13BF                     l5031:	
 11335  13BF  3001               	movlw	1
 11336  13C0                     u4525:	
 11337  13C0  35AE               	lslf	___aldiv@quotient,f
 11338  13C1  0DAF               	rlf	___aldiv@quotient+1,f
 11339  13C2  0DB0               	rlf	___aldiv@quotient+2,f
 11340  13C3  0DB1               	rlf	___aldiv@quotient+3,f
 11341  13C4  0B89               	decfsz	9,f
 11342  13C5  2BC0               	goto	u4525
 11343  13C6  0827               	movf	___aldiv@divisor+3,w
 11344  13C7  022B               	subwf	___aldiv@dividend+3,w
 11345  13C8  1D03               	skipz
 11346  13C9  2BD4               	goto	u4535
 11347  13CA  0826               	movf	___aldiv@divisor+2,w
 11348  13CB  022A               	subwf	___aldiv@dividend+2,w
 11349  13CC  1D03               	skipz
 11350  13CD  2BD4               	goto	u4535
 11351  13CE  0825               	movf	___aldiv@divisor+1,w
 11352  13CF  0229               	subwf	___aldiv@dividend+1,w
 11353  13D0  1D03               	skipz
 11354  13D1  2BD4               	goto	u4535
 11355  13D2  0824               	movf	___aldiv@divisor,w
 11356  13D3  0228               	subwf	___aldiv@dividend,w
 11357  13D4                     u4535:	
 11358  13D4  1C03               	skipc
 11359  13D5  2BDF               	goto	l5039
 11360  13D6  0824               	movf	___aldiv@divisor,w
 11361  13D7  02A8               	subwf	___aldiv@dividend,f
 11362  13D8  0825               	movf	___aldiv@divisor+1,w
 11363  13D9  3BA9               	subwfb	___aldiv@dividend+1,f
 11364  13DA  0826               	movf	___aldiv@divisor+2,w
 11365  13DB  3BAA               	subwfb	___aldiv@dividend+2,f
 11366  13DC  0827               	movf	___aldiv@divisor+3,w
 11367  13DD  3BAB               	subwfb	___aldiv@dividend+3,f
 11368  13DE  142E               	bsf	___aldiv@quotient,0
 11369  13DF                     l5039:	
 11370  13DF  3001               	movlw	1
 11371  13E0                     u4545:	
 11372  13E0  36A7               	lsrf	___aldiv@divisor+3,f
 11373  13E1  0CA6               	rrf	___aldiv@divisor+2,f
 11374  13E2  0CA5               	rrf	___aldiv@divisor+1,f
 11375  13E3  0CA4               	rrf	___aldiv@divisor,f
 11376  13E4  0B89               	decfsz	9,f
 11377  13E5  2BE0               	goto	u4545
 11378  13E6  3001               	movlw	1
 11379  13E7  02AC               	subwf	___aldiv@counter,f
 11380  13E8  1D03               	btfss	3,2
 11381  13E9  2BBF               	goto	l5031
 11382  13EA                     l5043:	
 11383  13EA  082D               	movf	___aldiv@sign,w
 11384  13EB  1903               	btfsc	3,2
 11385  13EC  2BF8               	goto	l5047
 11386  13ED  09AE               	comf	___aldiv@quotient,f
 11387  13EE  09AF               	comf	___aldiv@quotient+1,f
 11388  13EF  09B0               	comf	___aldiv@quotient+2,f
 11389  13F0  09B1               	comf	___aldiv@quotient+3,f
 11390  13F1  0AAE               	incf	___aldiv@quotient,f
 11391  13F2  1903               	skipnz
 11392  13F3  0AAF               	incf	___aldiv@quotient+1,f
 11393  13F4  1903               	skipnz
 11394  13F5  0AB0               	incf	___aldiv@quotient+2,f
 11395  13F6  1903               	skipnz
 11396  13F7  0AB1               	incf	___aldiv@quotient+3,f
 11397  13F8                     l5047:	
 11398  13F8  0831               	movf	___aldiv@quotient+3,w
 11399  13F9  00A7               	movwf	?___aldiv+3
 11400  13FA  0830               	movf	___aldiv@quotient+2,w
 11401  13FB  00A6               	movwf	?___aldiv+2
 11402  13FC  082F               	movf	___aldiv@quotient+1,w
 11403  13FD  00A5               	movwf	?___aldiv+1
 11404  13FE  082E               	movf	___aldiv@quotient,w
 11405  13FF  00A4               	movwf	?___aldiv
 11406  1400  0008               	return
 11407  1401                     __end_of___aldiv:	
 11408                           
 11409                           	psect	text35
 11410  124F                     __ptext35:	
 11411 ;; *************** function _adc_sample *****************
 11412 ;; Defined at:
 11413 ;;		line 187 in file "src/api/sample.c"
 11414 ;; Parameters:    Size  Location     Type
 11415 ;;  ch              1    wreg     unsigned char 
 11416 ;;  gfvr            1    4[COMMON] unsigned char 
 11417 ;;  num             1    5[COMMON] unsigned char 
 11418 ;; Auto vars:     Size  Location     Type
 11419 ;;  ch              1    0[BANK0 ] unsigned char 
 11420 ;;  t16             2    5[BANK0 ] unsigned int 
 11421 ;;  ret             2    3[BANK0 ] unsigned int 
 11422 ;;  i               2    1[BANK0 ] unsigned int 
 11423 ;; Return value:  Size  Location     Type
 11424 ;;                  2    4[COMMON] unsigned int 
 11425 ;; Registers used:
 11426 ;;		wreg, status,2, status,0, pclath, cstack
 11427 ;; Tracked objects:
 11428 ;;		On entry : 0/0
 11429 ;;		On exit  : 0/0
 11430 ;;		Unchanged: 0/0
 11431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11432 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11433 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11434 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11435 ;;      Totals:         5       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11436 ;;Total ram usage:       12 bytes
 11437 ;; Hardware stack levels used:    1
 11438 ;; Hardware stack levels required when called:    2
 11439 ;; This function calls:
 11440 ;;		_adc_init
 11441 ;;		_fvr_set_gain
 11442 ;; This function is called by:
 11443 ;;		_main
 11444 ;; This function uses a non-reentrant model
 11445 ;;
 11446                           
 11447                           
 11448                           ;psect for function _adc_sample
 11449  124F                     _adc_sample:	
 11450                           
 11451                           ;incstack = 0
 11452                           ; Regs used in _adc_sample: [wreg+status,2+status,0+pclath+cstack]
 11453                           ;adc_sample@ch stored from wreg
 11454  124F  0020               	movlb	0	; select bank0
 11455  1250  00A0               	movwf	adc_sample@ch
 11456                           
 11457                           ;sample.c: 189: uint16_t i;;sample.c: 190: uint16_t ret=0;
 11458  1251  01A3               	clrf	adc_sample@ret
 11459  1252  01A4               	clrf	adc_sample@ret+1
 11460                           
 11461                           ;sample.c: 191: uint16_t t16=0;
 11462  1253  01A5               	clrf	adc_sample@t16
 11463  1254  01A6               	clrf	adc_sample@t16+1
 11464                           
 11465                           ;sample.c: 193: fvr_set_gain(gfvr);
 11466  1255  0874               	movf	adc_sample@gfvr,w
 11467  1256  319D  2511  3192   	fcall	_fvr_set_gain
 11468                           
 11469                           ;sample.c: 194: adc_init((adc_channel_t)ch);
 11470  1259  0020               	movlb	0	; select bank0
 11471  125A  0820               	movf	adc_sample@ch,w
 11472  125B  319C  24FD  3192   	fcall	_adc_init
 11473                           
 11474                           ;sample.c: 195: _delay((unsigned long)((50)*(16000000/4000000.0)));
 11475  125E  3042               	movlw	66
 11476  125F                     u5047:	
 11477  125F  0B89               	decfsz	9,f
 11478  1260  2A5F               	goto	u5047
 11479  1261  3200               	nop2
 11480                           
 11481                           ;sample.c: 196: ADCON0bits.GO_nDONE = 1;
 11482  1262  0021               	movlb	1	; select bank1
 11483  1263  149D               	bsf	29,1	;volatile
 11484  1264                     l633:	
 11485                           ;sample.c: 197: while (ADCON0bits.GO_nDONE);
 11486                           
 11487  1264  189D               	btfsc	29,1	;volatile
 11488  1265  2A64               	goto	l633
 11489                           
 11490                           ;sample.c: 198: if(num>64)num=64;
 11491  1266  3041               	movlw	65
 11492  1267  0275               	subwf	adc_sample@num,w
 11493  1268  1C03               	skipc
 11494  1269  2A6E               	goto	l4145
 11495  126A  3040               	movlw	64
 11496  126B  00F6               	movwf	??_adc_sample
 11497  126C  0876               	movf	??_adc_sample,w
 11498  126D  00F5               	movwf	adc_sample@num
 11499  126E                     l4145:	
 11500                           
 11501                           ;sample.c: 199: for(i=0;i<num;i++){
 11502  126E  0020               	movlb	0	; select bank0
 11503  126F  01A1               	clrf	adc_sample@i
 11504  1270  01A2               	clrf	adc_sample@i+1
 11505  1271                     l4155:	
 11506  1271  0875               	movf	adc_sample@num,w
 11507  1272  00F6               	movwf	??_adc_sample
 11508  1273  01F7               	clrf	??_adc_sample+1
 11509  1274  0877               	movf	??_adc_sample+1,w
 11510  1275  0222               	subwf	adc_sample@i+1,w
 11511  1276  1D03               	skipz
 11512  1277  2A7A               	goto	u3235
 11513  1278  0876               	movf	??_adc_sample,w
 11514  1279  0221               	subwf	adc_sample@i,w
 11515  127A                     u3235:	
 11516  127A  1803               	btfsc	3,0
 11517  127B  2AA7               	goto	l4157
 11518                           
 11519                           ;sample.c: 200: ADCON0bits.GO_nDONE = 1;
 11520  127C  0021               	movlb	1	; select bank1
 11521  127D  149D               	bsf	29,1	;volatile
 11522  127E                     l639:	
 11523                           ;sample.c: 201: while (ADCON0bits.GO_nDONE);
 11524                           
 11525  127E  189D               	btfsc	29,1	;volatile
 11526  127F  2A7E               	goto	l639
 11527                           
 11528                           ;sample.c: 202: __nop();
 11529  1280  0000               	nop
 11530                           
 11531                           ;sample.c: 203: t16=ADRESH;
 11532  1281  0021               	movlb	1	; select bank1
 11533  1282  081C               	movf	28,w	;volatile
 11534  1283  00F6               	movwf	??_adc_sample
 11535  1284  01F7               	clrf	??_adc_sample+1
 11536  1285  0876               	movf	??_adc_sample,w
 11537  1286  0020               	movlb	0	; select bank0
 11538  1287  00A5               	movwf	adc_sample@t16
 11539  1288  0877               	movf	??_adc_sample+1,w
 11540  1289  00A6               	movwf	adc_sample@t16+1
 11541                           
 11542                           ;sample.c: 204: t16<<=2;
 11543  128A  3002               	movlw	2
 11544  128B                     u3215:	
 11545  128B  35A5               	lslf	adc_sample@t16,f
 11546  128C  0DA6               	rlf	adc_sample@t16+1,f
 11547  128D  0B89               	decfsz	9,f
 11548  128E  2A8B               	goto	u3215
 11549                           
 11550                           ;sample.c: 205: t16|=(uint16_t)(ADRESL>>6);
 11551  128F  0021               	movlb	1	; select bank1
 11552  1290  081B               	movf	27,w	;volatile
 11553  1291  00F6               	movwf	??_adc_sample
 11554  1292  3006               	movlw	6
 11555  1293                     u3225:	
 11556  1293  36F6               	lsrf	??_adc_sample,f
 11557  1294  0B89               	decfsz	9,f
 11558  1295  2A93               	goto	u3225
 11559  1296  0876               	movf	??_adc_sample,w
 11560  1297  00F7               	movwf	??_adc_sample+1
 11561  1298  01F8               	clrf	??_adc_sample+2
 11562  1299  0877               	movf	??_adc_sample+1,w
 11563  129A  0020               	movlb	0	; select bank0
 11564  129B  04A5               	iorwf	adc_sample@t16,f
 11565  129C  0878               	movf	??_adc_sample+2,w
 11566  129D  04A6               	iorwf	adc_sample@t16+1,f
 11567                           
 11568                           ;sample.c: 207: ret+=t16;
 11569  129E  0825               	movf	adc_sample@t16,w
 11570  129F  07A3               	addwf	adc_sample@ret,f
 11571  12A0  0826               	movf	adc_sample@t16+1,w
 11572  12A1  3DA4               	addwfc	adc_sample@ret+1,f
 11573  12A2  3001               	movlw	1
 11574  12A3  07A1               	addwf	adc_sample@i,f
 11575  12A4  3000               	movlw	0
 11576  12A5  3DA2               	addwfc	adc_sample@i+1,f
 11577  12A6  2A71               	goto	l4155
 11578  12A7                     l4157:	
 11579                           
 11580                           ;sample.c: 212: return ret;
 11581  12A7  0824               	movf	adc_sample@ret+1,w
 11582  12A8  00F5               	movwf	?_adc_sample+1
 11583  12A9  0823               	movf	adc_sample@ret,w
 11584  12AA  00F4               	movwf	?_adc_sample
 11585  12AB  0008               	return
 11586  12AC                     __end_of_adc_sample:	
 11587                           
 11588                           	psect	text36
 11589  1D11                     __ptext36:	
 11590 ;; *************** function _fvr_set_gain *****************
 11591 ;; Defined at:
 11592 ;;		line 134 in file "src/api/sample.c"
 11593 ;; Parameters:    Size  Location     Type
 11594 ;;  g               1    wreg     unsigned char 
 11595 ;; Auto vars:     Size  Location     Type
 11596 ;;  g               1    3[COMMON] unsigned char 
 11597 ;;  t8              1    2[COMMON] unsigned char 
 11598 ;; Return value:  Size  Location     Type
 11599 ;;                  1    wreg      void 
 11600 ;; Registers used:
 11601 ;;		wreg, status,2, status,0
 11602 ;; Tracked objects:
 11603 ;;		On entry : 0/0
 11604 ;;		On exit  : 0/0
 11605 ;;		Unchanged: 0/0
 11606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11608 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11609 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11610 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11611 ;;Total ram usage:        3 bytes
 11612 ;; Hardware stack levels used:    1
 11613 ;; Hardware stack levels required when called:    1
 11614 ;; This function calls:
 11615 ;;		Nothing
 11616 ;; This function is called by:
 11617 ;;		_adc_sample
 11618 ;; This function uses a non-reentrant model
 11619 ;;
 11620                           
 11621                           
 11622                           ;psect for function _fvr_set_gain
 11623  1D11                     _fvr_set_gain:	
 11624                           
 11625                           ;incstack = 0
 11626                           ; Regs used in _fvr_set_gain: [wreg+status,2+status,0]
 11627                           ;fvr_set_gain@g stored from wreg
 11628  1D11  00F3               	movwf	fvr_set_gain@g
 11629                           
 11630                           ;sample.c: 136: uint8_t t8=0x80;
 11631  1D12  3080               	movlw	128
 11632  1D13  00F1               	movwf	??_fvr_set_gain
 11633  1D14  0871               	movf	??_fvr_set_gain,w
 11634  1D15  00F2               	movwf	fvr_set_gain@t8
 11635                           
 11636                           ;sample.c: 137: if(g>3)g=3;
 11637  1D16  3004               	movlw	4
 11638  1D17  0273               	subwf	fvr_set_gain@g,w
 11639  1D18  1C03               	skipc
 11640  1D19  2D1E               	goto	l3703
 11641  1D1A  3003               	movlw	3
 11642  1D1B  00F1               	movwf	??_fvr_set_gain
 11643  1D1C  0871               	movf	??_fvr_set_gain,w
 11644  1D1D  00F3               	movwf	fvr_set_gain@g
 11645  1D1E                     l3703:	
 11646                           
 11647                           ;sample.c: 138: t8|=g;
 11648  1D1E  0873               	movf	fvr_set_gain@g,w
 11649  1D1F  00F1               	movwf	??_fvr_set_gain
 11650  1D20  0871               	movf	??_fvr_set_gain,w
 11651  1D21  04F2               	iorwf	fvr_set_gain@t8,f
 11652                           
 11653                           ;sample.c: 139: FVRCON = t8;
 11654  1D22  0872               	movf	fvr_set_gain@t8,w
 11655  1D23  0022               	movlb	2	; select bank2
 11656  1D24  0097               	movwf	23	;volatile
 11657  1D25                     l621:	
 11658                           ;sample.c: 140: while(!(FVRCONbits.FVRRDY));
 11659                           
 11660  1D25  1B17               	btfsc	23,6	;volatile
 11661  1D26  0008               	return
 11662  1D27  2D25               	goto	l621
 11663  1D28                     __end_of_fvr_set_gain:	
 11664                           
 11665                           	psect	text37
 11666  1CFD                     __ptext37:	
 11667 ;; *************** function _adc_init *****************
 11668 ;; Defined at:
 11669 ;;		line 143 in file "src/api/sample.c"
 11670 ;; Parameters:    Size  Location     Type
 11671 ;;  ch              1    wreg     enum E4099
 11672 ;; Auto vars:     Size  Location     Type
 11673 ;;  ch              1    2[COMMON] enum E4099
 11674 ;; Return value:  Size  Location     Type
 11675 ;;                  1    wreg      void 
 11676 ;; Registers used:
 11677 ;;		wreg, status,2, status,0
 11678 ;; Tracked objects:
 11679 ;;		On entry : 0/0
 11680 ;;		On exit  : 0/0
 11681 ;;		Unchanged: 0/0
 11682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11684 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11685 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11686 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11687 ;;Total ram usage:        2 bytes
 11688 ;; Hardware stack levels used:    1
 11689 ;; Hardware stack levels required when called:    1
 11690 ;; This function calls:
 11691 ;;		Nothing
 11692 ;; This function is called by:
 11693 ;;		_adc_sample
 11694 ;; This function uses a non-reentrant model
 11695 ;;
 11696                           
 11697                           
 11698                           ;psect for function _adc_init
 11699  1CFD                     _adc_init:	
 11700                           
 11701                           ;incstack = 0
 11702                           ; Regs used in _adc_init: [wreg+status,2+status,0]
 11703                           ;adc_init@ch stored from wreg
 11704  1CFD  00F2               	movwf	adc_init@ch
 11705  1CFE                     l627:	
 11706                           ;sample.c: 145: while (ADCON0bits.GO_nDONE);
 11707                           
 11708  1CFE  0021               	movlb	1	; select bank1
 11709  1CFF  189D               	btfsc	29,1	;volatile
 11710  1D00  2CFE               	goto	l627
 11711                           
 11712                           ;sample.c: 146: ADCON0bits.CHS = ch;
 11713  1D01  0872               	movf	adc_init@ch,w
 11714  1D02  00F1               	movwf	??_adc_init
 11715  1D03  0DF1               	rlf	??_adc_init,f
 11716  1D04  0DF1               	rlf	??_adc_init,f
 11717  1D05  081D               	movf	29,w	;volatile
 11718  1D06  0671               	xorwf	??_adc_init,w
 11719  1D07  3983               	andlw	-125
 11720  1D08  0671               	xorwf	??_adc_init,w
 11721  1D09  009D               	movwf	29	;volatile
 11722                           
 11723                           ;sample.c: 147: ADCON0bits.ADON = 1;
 11724  1D0A  141D               	bsf	29,0	;volatile
 11725                           
 11726                           ;sample.c: 148: ADCON1 = 0x63;
 11727  1D0B  3063               	movlw	99
 11728  1D0C  009E               	movwf	30	;volatile
 11729                           
 11730                           ;sample.c: 149: ADCON2 = 0x00;
 11731  1D0D  019F               	clrf	31	;volatile
 11732                           
 11733                           ;sample.c: 150: ADRESL = 0x00;
 11734  1D0E  019B               	clrf	27	;volatile
 11735                           
 11736                           ;sample.c: 151: ADRESH = 0x00;
 11737  1D0F  019C               	clrf	28	;volatile
 11738  1D10  0008               	return
 11739  1D11                     __end_of_adc_init:	
 11740                           
 11741                           	psect	text38
 11742  1D8C                     __ptext38:	
 11743 ;; *************** function _SYSTEM_Initialize *****************
 11744 ;; Defined at:
 11745 ;;		line 70 in file "mcc_generated_files/mcc.c"
 11746 ;; Parameters:    Size  Location     Type
 11747 ;;		None
 11748 ;; Auto vars:     Size  Location     Type
 11749 ;;		None
 11750 ;; Return value:  Size  Location     Type
 11751 ;;                  1    wreg      void 
 11752 ;; Registers used:
 11753 ;;		wreg, status,2, status,0, pclath, cstack
 11754 ;; Tracked objects:
 11755 ;;		On entry : 0/0
 11756 ;;		On exit  : 0/0
 11757 ;;		Unchanged: 0/0
 11758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11762 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11763 ;;Total ram usage:        0 bytes
 11764 ;; Hardware stack levels used:    1
 11765 ;; Hardware stack levels required when called:    3
 11766 ;; This function calls:
 11767 ;;		_ADC1_Initialize
 11768 ;;		_EUSART_Initialize
 11769 ;;		_FVR_Initialize
 11770 ;;		_OSCILLATOR_Initialize
 11771 ;;		_PIN_MANAGER_Initialize
 11772 ;;		_PWM1_Initialize
 11773 ;;		_PWM2_Initialize
 11774 ;;		_TMR2_Initialize
 11775 ;;		_WDT_Initialize
 11776 ;; This function is called by:
 11777 ;;		_main
 11778 ;; This function uses a non-reentrant model
 11779 ;;
 11780                           
 11781                           
 11782                           ;psect for function _SYSTEM_Initialize
 11783  1D8C                     _SYSTEM_Initialize:	
 11784                           
 11785                           ;mcc.c: 73: PIN_MANAGER_Initialize();
 11786                           
 11787                           ;incstack = 0
 11788                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 11789  1D8C  3190  20D4  319D   	fcall	_PIN_MANAGER_Initialize
 11790                           
 11791                           ;mcc.c: 74: OSCILLATOR_Initialize();
 11792  1D8F  3188  2003  319D   	fcall	_OSCILLATOR_Initialize
 11793                           
 11794                           ;mcc.c: 75: WDT_Initialize();
 11795  1D92  319C  24A2  319D   	fcall	_WDT_Initialize
 11796                           
 11797                           ;mcc.c: 76: FVR_Initialize();
 11798  1D95  319C  249E  319D   	fcall	_FVR_Initialize
 11799                           
 11800                           ;mcc.c: 77: PWM1_Initialize();
 11801  1D98  319D  2528  319D   	fcall	_PWM1_Initialize
 11802                           
 11803                           ;mcc.c: 78: PWM2_Initialize();
 11804  1D9B  319D  2541  319D   	fcall	_PWM2_Initialize
 11805                           
 11806                           ;mcc.c: 79: ADC1_Initialize();
 11807  1D9E  319C  24B6  319D   	fcall	_ADC1_Initialize
 11808                           
 11809                           ;mcc.c: 80: TMR2_Initialize();
 11810  1DA1  319C  24EA  319D   	fcall	_TMR2_Initialize
 11811                           
 11812                           ;mcc.c: 81: EUSART_Initialize();
 11813  1DA4  319C  24D7         	fcall	_EUSART_Initialize
 11814  1DA6  0008               	return
 11815  1DA7                     __end_of_SYSTEM_Initialize:	
 11816                           
 11817                           	psect	text39
 11818  1CA2                     __ptext39:	
 11819 ;; *************** function _WDT_Initialize *****************
 11820 ;; Defined at:
 11821 ;;		line 94 in file "mcc_generated_files/mcc.c"
 11822 ;; Parameters:    Size  Location     Type
 11823 ;;		None
 11824 ;; Auto vars:     Size  Location     Type
 11825 ;;		None
 11826 ;; Return value:  Size  Location     Type
 11827 ;;                  1    wreg      void 
 11828 ;; Registers used:
 11829 ;;		wreg
 11830 ;; Tracked objects:
 11831 ;;		On entry : 0/0
 11832 ;;		On exit  : 0/0
 11833 ;;		Unchanged: 0/0
 11834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11838 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11839 ;;Total ram usage:        0 bytes
 11840 ;; Hardware stack levels used:    1
 11841 ;; Hardware stack levels required when called:    1
 11842 ;; This function calls:
 11843 ;;		Nothing
 11844 ;; This function is called by:
 11845 ;;		_SYSTEM_Initialize
 11846 ;; This function uses a non-reentrant model
 11847 ;;
 11848                           
 11849                           
 11850                           ;psect for function _WDT_Initialize
 11851  1CA2                     _WDT_Initialize:	
 11852                           
 11853                           ;mcc.c: 97: WDTCON = 0x16;
 11854                           
 11855                           ;incstack = 0
 11856                           ; Regs used in _WDT_Initialize: [wreg]
 11857  1CA2  3016               	movlw	22
 11858  1CA3  0021               	movlb	1	; select bank1
 11859  1CA4  0097               	movwf	23	;volatile
 11860  1CA5  0008               	return
 11861  1CA6                     __end_of_WDT_Initialize:	
 11862                           
 11863                           	psect	text40
 11864  1CEA                     __ptext40:	
 11865 ;; *************** function _TMR2_Initialize *****************
 11866 ;; Defined at:
 11867 ;;		line 63 in file "mcc_generated_files/tmr2.c"
 11868 ;; Parameters:    Size  Location     Type
 11869 ;;		None
 11870 ;; Auto vars:     Size  Location     Type
 11871 ;;		None
 11872 ;; Return value:  Size  Location     Type
 11873 ;;                  1    wreg      void 
 11874 ;; Registers used:
 11875 ;;		wreg, status,2, status,0, pclath, cstack
 11876 ;; Tracked objects:
 11877 ;;		On entry : 0/0
 11878 ;;		On exit  : 0/0
 11879 ;;		Unchanged: 0/0
 11880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11884 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11885 ;;Total ram usage:        0 bytes
 11886 ;; Hardware stack levels used:    1
 11887 ;; Hardware stack levels required when called:    2
 11888 ;; This function calls:
 11889 ;;		_TMR2_SetInterruptHandler
 11890 ;;		_TMR2_StartTimer
 11891 ;; This function is called by:
 11892 ;;		_SYSTEM_Initialize
 11893 ;; This function uses a non-reentrant model
 11894 ;;
 11895                           
 11896                           
 11897                           ;psect for function _TMR2_Initialize
 11898  1CEA                     _TMR2_Initialize:	
 11899                           
 11900                           ;tmr2.c: 68: T2CON = 0x4B;
 11901                           
 11902                           ;incstack = 0
 11903                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
 11904  1CEA  304B               	movlw	75
 11905  1CEB  0020               	movlb	0	; select bank0
 11906  1CEC  009C               	movwf	28	;volatile
 11907                           
 11908                           ;tmr2.c: 71: PR2 = 0x7C;
 11909  1CED  307C               	movlw	124
 11910  1CEE  009B               	movwf	27	;volatile
 11911                           
 11912                           ;tmr2.c: 74: TMR2 = 0x00;
 11913  1CEF  019A               	clrf	26	;volatile
 11914                           
 11915                           ;tmr2.c: 77: PIR1bits.TMR2IF = 0;
 11916  1CF0  1091               	bcf	17,1	;volatile
 11917                           
 11918                           ;tmr2.c: 80: PIE1bits.TMR2IE = 1;
 11919  1CF1  0021               	movlb	1	; select bank1
 11920  1CF2  1491               	bsf	17,1	;volatile
 11921                           
 11922                           ;tmr2.c: 83: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
 11923  1CF3  3000               	movlw	0
 11924  1CF4  00F1               	movwf	TMR2_SetInterruptHandler@InterruptHandler
 11925  1CF5  3000               	movlw	0
 11926  1CF6  00F2               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
 11927  1CF7  3190  2001  319C   	fcall	_TMR2_SetInterruptHandler
 11928                           
 11929                           ;tmr2.c: 86: TMR2_StartTimer();
 11930  1CFA  319C  249B         	fcall	_TMR2_StartTimer
 11931  1CFC  0008               	return
 11932  1CFD                     __end_of_TMR2_Initialize:	
 11933                           
 11934                           	psect	text41
 11935  1C9B                     __ptext41:	
 11936 ;; *************** function _TMR2_StartTimer *****************
 11937 ;; Defined at:
 11938 ;;		line 89 in file "mcc_generated_files/tmr2.c"
 11939 ;; Parameters:    Size  Location     Type
 11940 ;;		None
 11941 ;; Auto vars:     Size  Location     Type
 11942 ;;		None
 11943 ;; Return value:  Size  Location     Type
 11944 ;;                  1    wreg      void 
 11945 ;; Registers used:
 11946 ;;		None
 11947 ;; Tracked objects:
 11948 ;;		On entry : 0/0
 11949 ;;		On exit  : 0/0
 11950 ;;		Unchanged: 0/0
 11951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11955 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11956 ;;Total ram usage:        0 bytes
 11957 ;; Hardware stack levels used:    1
 11958 ;; Hardware stack levels required when called:    1
 11959 ;; This function calls:
 11960 ;;		Nothing
 11961 ;; This function is called by:
 11962 ;;		_TMR2_Initialize
 11963 ;; This function uses a non-reentrant model
 11964 ;;
 11965                           
 11966                           
 11967                           ;psect for function _TMR2_StartTimer
 11968  1C9B                     _TMR2_StartTimer:	
 11969                           
 11970                           ;tmr2.c: 92: T2CONbits.TMR2ON = 1;
 11971                           
 11972                           ;incstack = 0
 11973                           ; Regs used in _TMR2_StartTimer: []
 11974  1C9B  0020               	movlb	0	; select bank0
 11975  1C9C  151C               	bsf	28,2	;volatile
 11976  1C9D  0008               	return
 11977  1C9E                     __end_of_TMR2_StartTimer:	
 11978                           
 11979                           	psect	text42
 11980  1001                     __ptext42:	
 11981 ;; *************** function _TMR2_SetInterruptHandler *****************
 11982 ;; Defined at:
 11983 ;;		line 142 in file "mcc_generated_files/tmr2.c"
 11984 ;; Parameters:    Size  Location     Type
 11985 ;;  InterruptHan    2    1[COMMON] PTR FTN()void 
 11986 ;;		 -> TMR2_DefaultInterruptHandler(1), 
 11987 ;; Auto vars:     Size  Location     Type
 11988 ;;		None
 11989 ;; Return value:  Size  Location     Type
 11990 ;;                  1    wreg      void 
 11991 ;; Registers used:
 11992 ;;		wreg
 11993 ;; Tracked objects:
 11994 ;;		On entry : 0/0
 11995 ;;		On exit  : 0/0
 11996 ;;		Unchanged: 0/0
 11997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11998 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12001 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12002 ;;Total ram usage:        2 bytes
 12003 ;; Hardware stack levels used:    1
 12004 ;; Hardware stack levels required when called:    1
 12005 ;; This function calls:
 12006 ;;		Nothing
 12007 ;; This function is called by:
 12008 ;;		_TMR2_Initialize
 12009 ;; This function uses a non-reentrant model
 12010 ;;
 12011                           
 12012                           
 12013                           ;psect for function _TMR2_SetInterruptHandler
 12014  1001                     _TMR2_SetInterruptHandler:	
 12015                           
 12016                           ;tmr2.c: 143: TMR2_InterruptHandler = InterruptHandler;
 12017                           
 12018                           ;incstack = 0
 12019                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
 12020  1001  0872               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
 12021  1002  0020               	movlb	0	; select bank0
 12022  1003  00E2               	movwf	_TMR2_InterruptHandler+1
 12023  1004  0871               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
 12024  1005  00E1               	movwf	_TMR2_InterruptHandler
 12025  1006  0008               	return
 12026  1007                     __end_of_TMR2_SetInterruptHandler:	
 12027                           
 12028                           	psect	text43
 12029  1D41                     __ptext43:	
 12030 ;; *************** function _PWM2_Initialize *****************
 12031 ;; Defined at:
 12032 ;;		line 58 in file "mcc_generated_files/pwm2.c"
 12033 ;; Parameters:    Size  Location     Type
 12034 ;;		None
 12035 ;; Auto vars:     Size  Location     Type
 12036 ;;		None
 12037 ;; Return value:  Size  Location     Type
 12038 ;;                  1    wreg      void 
 12039 ;; Registers used:
 12040 ;;		wreg, status,2
 12041 ;; Tracked objects:
 12042 ;;		On entry : 0/0
 12043 ;;		On exit  : 0/0
 12044 ;;		Unchanged: 0/0
 12045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12047 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12049 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12050 ;;Total ram usage:        0 bytes
 12051 ;; Hardware stack levels used:    1
 12052 ;; Hardware stack levels required when called:    1
 12053 ;; This function calls:
 12054 ;;		Nothing
 12055 ;; This function is called by:
 12056 ;;		_SYSTEM_Initialize
 12057 ;; This function uses a non-reentrant model
 12058 ;;
 12059                           
 12060                           
 12061                           ;psect for function _PWM2_Initialize
 12062  1D41                     _PWM2_Initialize:	
 12063                           
 12064                           ;pwm2.c: 63: PWM2INTE = 0x01;
 12065                           
 12066                           ;incstack = 0
 12067                           ; Regs used in _PWM2_Initialize: [wreg+status,2]
 12068  1D41  3001               	movlw	1
 12069  1D42  003B               	movlb	27	; select bank27
 12070  1D43  00AC               	movwf	44	;volatile
 12071                           
 12072                           ;pwm2.c: 66: PWM2INTF = 0x00;
 12073  1D44  01AD               	clrf	45	;volatile
 12074                           
 12075                           ;pwm2.c: 69: PWM2CLKCON = 0x00;
 12076  1D45  01AE               	clrf	46	;volatile
 12077                           
 12078                           ;pwm2.c: 72: PWM2LDCON = 0x00;
 12079  1D46  01AF               	clrf	47	;volatile
 12080                           
 12081                           ;pwm2.c: 75: PWM2OFCON = 0x00;
 12082  1D47  01B0               	clrf	48	;volatile
 12083                           
 12084                           ;pwm2.c: 78: PWM2PHH = 0x00;
 12085  1D48  01A2               	clrf	34	;volatile
 12086                           
 12087                           ;pwm2.c: 81: PWM2PHL = 0x02;
 12088  1D49  3002               	movlw	2
 12089  1D4A  00A1               	movwf	33	;volatile
 12090                           
 12091                           ;pwm2.c: 84: PWM2DCH = 0x00;
 12092  1D4B  01A4               	clrf	36	;volatile
 12093                           
 12094                           ;pwm2.c: 87: PWM2DCL = 0xA0;
 12095  1D4C  30A0               	movlw	160
 12096  1D4D  00A3               	movwf	35	;volatile
 12097                           
 12098                           ;pwm2.c: 90: PWM2PRH = 0x06;
 12099  1D4E  3006               	movlw	6
 12100  1D4F  00A6               	movwf	38	;volatile
 12101                           
 12102                           ;pwm2.c: 93: PWM2PRL = 0x3F;
 12103  1D50  303F               	movlw	63
 12104  1D51  00A5               	movwf	37	;volatile
 12105                           
 12106                           ;pwm2.c: 96: PWM2OFH = 0x00;
 12107  1D52  01A8               	clrf	40	;volatile
 12108                           
 12109                           ;pwm2.c: 99: PWM2OFL = 0x01;
 12110  1D53  3001               	movlw	1
 12111  1D54  00A7               	movwf	39	;volatile
 12112                           
 12113                           ;pwm2.c: 102: PWM2TMRH = 0x00;
 12114  1D55  01AA               	clrf	42	;volatile
 12115                           
 12116                           ;pwm2.c: 105: PWM2TMRL = 0x00;
 12117  1D56  01A9               	clrf	41	;volatile
 12118                           
 12119                           ;pwm2.c: 108: PWM2CON = 0x90;
 12120  1D57  3090               	movlw	144
 12121  1D58  00AB               	movwf	43	;volatile
 12122  1D59  0008               	return
 12123  1D5A                     __end_of_PWM2_Initialize:	
 12124                           
 12125                           	psect	text44
 12126  1D28                     __ptext44:	
 12127 ;; *************** function _PWM1_Initialize *****************
 12128 ;; Defined at:
 12129 ;;		line 58 in file "mcc_generated_files/pwm1.c"
 12130 ;; Parameters:    Size  Location     Type
 12131 ;;		None
 12132 ;; Auto vars:     Size  Location     Type
 12133 ;;		None
 12134 ;; Return value:  Size  Location     Type
 12135 ;;                  1    wreg      void 
 12136 ;; Registers used:
 12137 ;;		wreg, status,2
 12138 ;; Tracked objects:
 12139 ;;		On entry : 0/0
 12140 ;;		On exit  : 0/0
 12141 ;;		Unchanged: 0/0
 12142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12146 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12147 ;;Total ram usage:        0 bytes
 12148 ;; Hardware stack levels used:    1
 12149 ;; Hardware stack levels required when called:    1
 12150 ;; This function calls:
 12151 ;;		Nothing
 12152 ;; This function is called by:
 12153 ;;		_SYSTEM_Initialize
 12154 ;; This function uses a non-reentrant model
 12155 ;;
 12156                           
 12157                           
 12158                           ;psect for function _PWM1_Initialize
 12159  1D28                     _PWM1_Initialize:	
 12160                           
 12161                           ;pwm1.c: 63: PWM1INTE = 0x01;
 12162                           
 12163                           ;incstack = 0
 12164                           ; Regs used in _PWM1_Initialize: [wreg+status,2]
 12165  1D28  3001               	movlw	1
 12166  1D29  003B               	movlb	27	; select bank27
 12167  1D2A  009C               	movwf	28	;volatile
 12168                           
 12169                           ;pwm1.c: 66: PWM1INTF = 0x00;
 12170  1D2B  019D               	clrf	29	;volatile
 12171                           
 12172                           ;pwm1.c: 69: PWM1CLKCON = 0x00;
 12173  1D2C  019E               	clrf	30	;volatile
 12174                           
 12175                           ;pwm1.c: 72: PWM1LDCON = 0x00;
 12176  1D2D  019F               	clrf	31	;volatile
 12177                           
 12178                           ;pwm1.c: 75: PWM1OFCON = 0x00;
 12179  1D2E  01A0               	clrf	32	;volatile
 12180                           
 12181                           ;pwm1.c: 78: PWM1PHH = 0x00;
 12182  1D2F  0192               	clrf	18	;volatile
 12183                           
 12184                           ;pwm1.c: 81: PWM1PHL = 0x02;
 12185  1D30  3002               	movlw	2
 12186  1D31  0091               	movwf	17	;volatile
 12187                           
 12188                           ;pwm1.c: 84: PWM1DCH = 0x00;
 12189  1D32  0194               	clrf	20	;volatile
 12190                           
 12191                           ;pwm1.c: 87: PWM1DCL = 0xa0;
 12192  1D33  30A0               	movlw	160
 12193  1D34  0093               	movwf	19	;volatile
 12194                           
 12195                           ;pwm1.c: 90: PWM1PRH = 0x06;
 12196  1D35  3006               	movlw	6
 12197  1D36  0096               	movwf	22	;volatile
 12198                           
 12199                           ;pwm1.c: 93: PWM1PRL = 0x3F;
 12200  1D37  303F               	movlw	63
 12201  1D38  0095               	movwf	21	;volatile
 12202                           
 12203                           ;pwm1.c: 96: PWM1OFH = 0x00;
 12204  1D39  0198               	clrf	24	;volatile
 12205                           
 12206                           ;pwm1.c: 99: PWM1OFL = 0x01;
 12207  1D3A  3001               	movlw	1
 12208  1D3B  0097               	movwf	23	;volatile
 12209                           
 12210                           ;pwm1.c: 102: PWM1TMRH = 0x00;
 12211  1D3C  019A               	clrf	26	;volatile
 12212                           
 12213                           ;pwm1.c: 105: PWM1TMRL = 0x00;
 12214  1D3D  0199               	clrf	25	;volatile
 12215                           
 12216                           ;pwm1.c: 108: PWM1CON = 0x90;
 12217  1D3E  3090               	movlw	144
 12218  1D3F  009B               	movwf	27	;volatile
 12219  1D40  0008               	return
 12220  1D41                     __end_of_PWM1_Initialize:	
 12221                           
 12222                           	psect	text45
 12223  10D4                     __ptext45:	
 12224 ;; *************** function _PIN_MANAGER_Initialize *****************
 12225 ;; Defined at:
 12226 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
 12227 ;; Parameters:    Size  Location     Type
 12228 ;;		None
 12229 ;; Auto vars:     Size  Location     Type
 12230 ;;  state           1    1[COMMON] unsigned char 
 12231 ;; Return value:  Size  Location     Type
 12232 ;;                  1    wreg      void 
 12233 ;; Registers used:
 12234 ;;		wreg, status,2, status,0
 12235 ;; Tracked objects:
 12236 ;;		On entry : 0/0
 12237 ;;		On exit  : 0/0
 12238 ;;		Unchanged: 0/0
 12239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12241 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12243 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12244 ;;Total ram usage:        1 bytes
 12245 ;; Hardware stack levels used:    1
 12246 ;; Hardware stack levels required when called:    1
 12247 ;; This function calls:
 12248 ;;		Nothing
 12249 ;; This function is called by:
 12250 ;;		_SYSTEM_Initialize
 12251 ;; This function uses a non-reentrant model
 12252 ;;
 12253                           
 12254                           
 12255                           ;psect for function _PIN_MANAGER_Initialize
 12256  10D4                     _PIN_MANAGER_Initialize:	
 12257                           
 12258                           ;pin_manager.c: 57: LATA = 0x00;
 12259                           
 12260                           ;incstack = 0
 12261                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
 12262  10D4  0022               	movlb	2	; select bank2
 12263  10D5  018C               	clrf	12	;volatile
 12264                           
 12265                           ;pin_manager.c: 58: LATC = 0x00;
 12266  10D6  018E               	clrf	14	;volatile
 12267                           
 12268                           ;pin_manager.c: 63: TRISA = 0x0F;
 12269  10D7  300F               	movlw	15
 12270  10D8  0021               	movlb	1	; select bank1
 12271  10D9  008C               	movwf	12	;volatile
 12272                           
 12273                           ;pin_manager.c: 64: TRISC = 0x1f;
 12274  10DA  301F               	movlw	31
 12275  10DB  008E               	movwf	14	;volatile
 12276                           
 12277                           ;pin_manager.c: 69: ANSELC = 0x0F;
 12278  10DC  300F               	movlw	15
 12279  10DD  0023               	movlb	3	; select bank3
 12280  10DE  008E               	movwf	14	;volatile
 12281                           
 12282                           ;pin_manager.c: 70: ANSELA = 0x17;
 12283  10DF  3017               	movlw	23
 12284  10E0  008C               	movwf	12	;volatile
 12285                           
 12286                           ;pin_manager.c: 75: WPUA = 0x3B;
 12287  10E1  303B               	movlw	59
 12288  10E2  0024               	movlb	4	; select bank4
 12289  10E3  008C               	movwf	12	;volatile
 12290                           
 12291                           ;pin_manager.c: 76: WPUC = 0x30;
 12292  10E4  3030               	movlw	48
 12293  10E5  008E               	movwf	14	;volatile
 12294                           
 12295                           ;pin_manager.c: 77: OPTION_REGbits.nWPUEN = 0;
 12296  10E6  0021               	movlb	1	; select bank1
 12297  10E7  1395               	bcf	21,7	;volatile
 12298                           
 12299                           ;pin_manager.c: 82: ODCONA = 0x00;
 12300  10E8  0025               	movlb	5	; select bank5
 12301  10E9  018C               	clrf	12	;volatile
 12302                           
 12303                           ;pin_manager.c: 83: ODCONC = 0x00;
 12304  10EA  018E               	clrf	14	;volatile
 12305                           
 12306                           ;pin_manager.c: 85: bool state = (unsigned char)GIE;
 12307  10EB  3000               	movlw	0
 12308  10EC  1B8B               	btfsc	11,7	;volatile
 12309  10ED  3001               	movlw	1
 12310  10EE  00F1               	movwf	PIN_MANAGER_Initialize@state
 12311                           
 12312                           ;pin_manager.c: 86: GIE = 0;
 12313  10EF  138B               	bcf	11,7	;volatile
 12314                           
 12315                           ;pin_manager.c: 87: PPSLOCK = 0x55;
 12316  10F0  3055               	movlw	85
 12317  10F1  003C               	movlb	28	; select bank28
 12318  10F2  008F               	movwf	15	;volsfr
 12319                           
 12320                           ;pin_manager.c: 88: PPSLOCK = 0xAA;
 12321  10F3  30AA               	movlw	170
 12322  10F4  008F               	movwf	15	;volsfr
 12323                           
 12324                           ;pin_manager.c: 89: PPSLOCKbits.PPSLOCKED = 0x00;
 12325  10F5  100F               	bcf	15,0	;volsfr
 12326                           
 12327                           ;pin_manager.c: 91: RXPPSbits.RXPPS = 0x14;
 12328  10F6  0815               	movf	21,w	;volatile
 12329  10F7  39E0               	andlw	-32
 12330  10F8  3814               	iorlw	20
 12331  10F9  0095               	movwf	21	;volatile
 12332                           
 12333                           ;pin_manager.c: 92: RA4PPSbits.RA4PPS = 0x04;
 12334  10FA  003D               	movlb	29	; select bank29
 12335  10FB  0814               	movf	20,w	;volatile
 12336  10FC  39F0               	andlw	-16
 12337  10FD  3804               	iorlw	4
 12338  10FE  0094               	movwf	20	;volatile
 12339                           
 12340                           ;pin_manager.c: 93: RA5PPSbits.RA5PPS = 0x03;
 12341  10FF  0815               	movf	21,w	;volatile
 12342  1100  39F0               	andlw	-16
 12343  1101  3803               	iorlw	3
 12344  1102  0095               	movwf	21	;volatile
 12345                           
 12346                           ;pin_manager.c: 94: RC5PPSbits.RC5PPS = 0x09;
 12347  1103  0825               	movf	37,w	;volatile
 12348  1104  39F0               	andlw	-16
 12349  1105  3809               	iorlw	9
 12350  1106  00A5               	movwf	37	;volatile
 12351                           
 12352                           ;pin_manager.c: 96: PPSLOCK = 0x55;
 12353  1107  3055               	movlw	85
 12354  1108  003C               	movlb	28	; select bank28
 12355  1109  008F               	movwf	15	;volsfr
 12356                           
 12357                           ;pin_manager.c: 97: PPSLOCK = 0xAA;
 12358  110A  30AA               	movlw	170
 12359  110B  008F               	movwf	15	;volsfr
 12360                           
 12361                           ;pin_manager.c: 98: PPSLOCKbits.PPSLOCKED = 0x01;
 12362  110C  140F               	bsf	15,0	;volsfr
 12363                           
 12364                           ;pin_manager.c: 100: GIE = state;
 12365  110D  1C71               	btfss	PIN_MANAGER_Initialize@state,0
 12366  110E  2911               	goto	u2390
 12367  110F  178B               	bsf	11,7	;volatile
 12368  1110  0008               	return
 12369  1111                     u2390:	
 12370  1111  138B               	bcf	11,7	;volatile
 12371  1112  0008               	return
 12372  1113                     __end_of_PIN_MANAGER_Initialize:	
 12373                           
 12374                           	psect	text46
 12375  0803                     __ptext46:	
 12376 ;; *************** function _OSCILLATOR_Initialize *****************
 12377 ;; Defined at:
 12378 ;;		line 84 in file "mcc_generated_files/mcc.c"
 12379 ;; Parameters:    Size  Location     Type
 12380 ;;		None
 12381 ;; Auto vars:     Size  Location     Type
 12382 ;;		None
 12383 ;; Return value:  Size  Location     Type
 12384 ;;                  1    wreg      void 
 12385 ;; Registers used:
 12386 ;;		None
 12387 ;; Tracked objects:
 12388 ;;		On entry : 0/0
 12389 ;;		On exit  : 0/0
 12390 ;;		Unchanged: 0/0
 12391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12395 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12396 ;;Total ram usage:        0 bytes
 12397 ;; Hardware stack levels used:    1
 12398 ;; Hardware stack levels required when called:    1
 12399 ;; This function calls:
 12400 ;;		Nothing
 12401 ;; This function is called by:
 12402 ;;		_SYSTEM_Initialize
 12403 ;; This function uses a non-reentrant model
 12404 ;;
 12405                           
 12406                           
 12407                           ;psect for function _OSCILLATOR_Initialize
 12408  0803                     _OSCILLATOR_Initialize:	
 12409                           
 12410                           ;incstack = 0
 12411                           ; Regs used in _OSCILLATOR_Initialize: []
 12412  0803  0008               	return
 12413  0804                     __end_of_OSCILLATOR_Initialize:	
 12414                           
 12415                           	psect	text47
 12416  1C9E                     __ptext47:	
 12417 ;; *************** function _FVR_Initialize *****************
 12418 ;; Defined at:
 12419 ;;		line 57 in file "mcc_generated_files/fvr.c"
 12420 ;; Parameters:    Size  Location     Type
 12421 ;;		None
 12422 ;; Auto vars:     Size  Location     Type
 12423 ;;		None
 12424 ;; Return value:  Size  Location     Type
 12425 ;;                  1    wreg      void 
 12426 ;; Registers used:
 12427 ;;		wreg
 12428 ;; Tracked objects:
 12429 ;;		On entry : 0/0
 12430 ;;		On exit  : 0/0
 12431 ;;		Unchanged: 0/0
 12432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12436 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12437 ;;Total ram usage:        0 bytes
 12438 ;; Hardware stack levels used:    1
 12439 ;; Hardware stack levels required when called:    1
 12440 ;; This function calls:
 12441 ;;		Nothing
 12442 ;; This function is called by:
 12443 ;;		_SYSTEM_Initialize
 12444 ;; This function uses a non-reentrant model
 12445 ;;
 12446                           
 12447                           
 12448                           ;psect for function _FVR_Initialize
 12449  1C9E                     _FVR_Initialize:	
 12450                           
 12451                           ;fvr.c: 60: FVRCON = 0x81;
 12452                           
 12453                           ;incstack = 0
 12454                           ; Regs used in _FVR_Initialize: [wreg]
 12455  1C9E  3081               	movlw	129
 12456  1C9F  0022               	movlb	2	; select bank2
 12457  1CA0  0097               	movwf	23	;volatile
 12458  1CA1  0008               	return
 12459  1CA2                     __end_of_FVR_Initialize:	
 12460                           
 12461                           	psect	text48
 12462  1CD7                     __ptext48:	
 12463 ;; *************** function _EUSART_Initialize *****************
 12464 ;; Defined at:
 12465 ;;		line 55 in file "mcc_generated_files/eusart.c"
 12466 ;; Parameters:    Size  Location     Type
 12467 ;;		None
 12468 ;; Auto vars:     Size  Location     Type
 12469 ;;		None
 12470 ;; Return value:  Size  Location     Type
 12471 ;;                  1    wreg      void 
 12472 ;; Registers used:
 12473 ;;		wreg
 12474 ;; Tracked objects:
 12475 ;;		On entry : 0/0
 12476 ;;		On exit  : 0/0
 12477 ;;		Unchanged: 0/0
 12478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12482 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12483 ;;Total ram usage:        0 bytes
 12484 ;; Hardware stack levels used:    1
 12485 ;; Hardware stack levels required when called:    1
 12486 ;; This function calls:
 12487 ;;		Nothing
 12488 ;; This function is called by:
 12489 ;;		_SYSTEM_Initialize
 12490 ;; This function uses a non-reentrant model
 12491 ;;
 12492                           
 12493                           
 12494                           ;psect for function _EUSART_Initialize
 12495  1CD7                     _EUSART_Initialize:	
 12496                           
 12497                           ;eusart.c: 58: PIE1bits.RCIE = 0;
 12498                           
 12499                           ;incstack = 0
 12500                           ; Regs used in _EUSART_Initialize: [wreg]
 12501  1CD7  0021               	movlb	1	; select bank1
 12502  1CD8  1291               	bcf	17,5	;volatile
 12503                           
 12504                           ;eusart.c: 59: PIE1bits.TXIE = 0;
 12505  1CD9  1211               	bcf	17,4	;volatile
 12506                           
 12507                           ;eusart.c: 61: BAUDCON = 0x08;
 12508  1CDA  3008               	movlw	8
 12509  1CDB  0023               	movlb	3	; select bank3
 12510  1CDC  009F               	movwf	31	;volatile
 12511                           
 12512                           ;eusart.c: 64: RCSTA = 0x90;
 12513  1CDD  3090               	movlw	144
 12514  1CDE  009D               	movwf	29	;volatile
 12515                           
 12516                           ;eusart.c: 67: TXSTA = 0x24;
 12517  1CDF  3024               	movlw	36
 12518  1CE0  009E               	movwf	30	;volatile
 12519                           
 12520                           ;eusart.c: 71: SPBRGL = 0xA0;
 12521  1CE1  30A0               	movlw	160
 12522  1CE2  009B               	movwf	27	;volatile
 12523                           
 12524                           ;eusart.c: 76: SPBRGH = 0x01;
 12525  1CE3  3001               	movlw	1
 12526  1CE4  009C               	movwf	28	;volatile
 12527                           
 12528                           ;eusart.c: 77: PIE1bits.RCIE = 1;
 12529  1CE5  0021               	movlb	1	; select bank1
 12530  1CE6  1691               	bsf	17,5	;volatile
 12531                           
 12532                           ;eusart.c: 78: PIR1bits.TXIF=0;
 12533  1CE7  0020               	movlb	0	; select bank0
 12534  1CE8  1211               	bcf	17,4	;volatile
 12535  1CE9  0008               	return
 12536  1CEA                     __end_of_EUSART_Initialize:	
 12537                           
 12538                           	psect	text49
 12539  1CB6                     __ptext49:	
 12540 ;; *************** function _ADC1_Initialize *****************
 12541 ;; Defined at:
 12542 ;;		line 64 in file "mcc_generated_files/adc1.c"
 12543 ;; Parameters:    Size  Location     Type
 12544 ;;		None
 12545 ;; Auto vars:     Size  Location     Type
 12546 ;;		None
 12547 ;; Return value:  Size  Location     Type
 12548 ;;                  1    wreg      void 
 12549 ;; Registers used:
 12550 ;;		wreg, status,2
 12551 ;; Tracked objects:
 12552 ;;		On entry : 0/0
 12553 ;;		On exit  : 0/0
 12554 ;;		Unchanged: 0/0
 12555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12559 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12560 ;;Total ram usage:        0 bytes
 12561 ;; Hardware stack levels used:    1
 12562 ;; Hardware stack levels required when called:    1
 12563 ;; This function calls:
 12564 ;;		Nothing
 12565 ;; This function is called by:
 12566 ;;		_SYSTEM_Initialize
 12567 ;; This function uses a non-reentrant model
 12568 ;;
 12569                           
 12570                           
 12571                           ;psect for function _ADC1_Initialize
 12572  1CB6                     _ADC1_Initialize:	
 12573                           
 12574                           ;adc1.c: 69: ADCON0 = 0x01;
 12575                           
 12576                           ;incstack = 0
 12577                           ; Regs used in _ADC1_Initialize: [wreg+status,2]
 12578  1CB6  3001               	movlw	1
 12579  1CB7  0021               	movlb	1	; select bank1
 12580  1CB8  009D               	movwf	29	;volatile
 12581                           
 12582                           ;adc1.c: 72: ADCON1 = 0x63;
 12583  1CB9  3063               	movlw	99
 12584  1CBA  009E               	movwf	30	;volatile
 12585                           
 12586                           ;adc1.c: 75: ADCON2 = 0x00;
 12587  1CBB  019F               	clrf	31	;volatile
 12588                           
 12589                           ;adc1.c: 78: ADRESL = 0x00;
 12590  1CBC  019B               	clrf	27	;volatile
 12591                           
 12592                           ;adc1.c: 81: ADRESH = 0x00;
 12593  1CBD  019C               	clrf	28	;volatile
 12594  1CBE  0008               	return
 12595  1CBF                     __end_of_ADC1_Initialize:	
 12596                           
 12597                           	psect	intentry
 12598  0804                     __pintentry:	
 12599 ;; *************** function _INTERRUPT_InterruptManager *****************
 12600 ;; Defined at:
 12601 ;;		line 59 in file "mcc_generated_files/interrupt_manager.c"
 12602 ;; Parameters:    Size  Location     Type
 12603 ;;		None
 12604 ;; Auto vars:     Size  Location     Type
 12605 ;;		None
 12606 ;; Return value:  Size  Location     Type
 12607 ;;                  1    wreg      void 
 12608 ;; Registers used:
 12609 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12610 ;; Tracked objects:
 12611 ;;		On entry : 0/0
 12612 ;;		On exit  : 0/0
 12613 ;;		Unchanged: 0/0
 12614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12617 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12618 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12619 ;;Total ram usage:        1 bytes
 12620 ;; Hardware stack levels used:    1
 12621 ;; This function calls:
 12622 ;;		Nothing
 12623 ;; This function is called by:
 12624 ;;		Interrupt level 1
 12625 ;; This function uses a non-reentrant model
 12626 ;;
 12627                           
 12628  0804                     _INTERRUPT_InterruptManager:	
 12629                           
 12630                           ;incstack = 0
 12631  0804  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12632                           
 12633                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0]
 12634  0805  3188               	pagesel	$
 12635                           
 12636                           ;interrupt_manager.c: 63: if(INTCONbits.PEIE == 1 && PIE1bits.TMR2IE == 1 && PIR1bits.TM
      +                          R2IF == 1)
 12637  0806  1F0B               	btfss	11,6	;volatile
 12638  0807  2836               	goto	i1l4503
 12639  0808  0021               	movlb	1	; select bank1
 12640  0809  1C91               	btfss	17,1	;volatile
 12641  080A  2836               	goto	i1l4503
 12642  080B  0020               	movlb	0	; select bank0
 12643  080C  1C91               	btfss	17,1	;volatile
 12644  080D  2836               	goto	i1l4503
 12645                           
 12646                           ;interrupt_manager.c: 64: {;interrupt_manager.c: 66: PIR1bits.TMR2IF = 0;
 12647  080E  1091               	bcf	17,1	;volatile
 12648                           
 12649                           ;interrupt_manager.c: 67: Event |= (1<<1);
 12650  080F  14EB               	bsf	_Event,1	;volatile
 12651                           
 12652                           ;interrupt_manager.c: 68: subTickerX++;
 12653  0810  3001               	movlw	1
 12654  0811  00F0               	movwf	??_INTERRUPT_InterruptManager
 12655  0812  0870               	movf	??_INTERRUPT_InterruptManager,w
 12656  0813  07E9               	addwf	_subTickerX,f
 12657                           
 12658                           ;interrupt_manager.c: 69: subTickerX_1s++;
 12659  0814  3001               	movlw	1
 12660  0815  00F0               	movwf	??_INTERRUPT_InterruptManager
 12661  0816  0870               	movf	??_INTERRUPT_InterruptManager,w
 12662  0817  07E8               	addwf	_subTickerX_1s,f
 12663                           
 12664                           ;interrupt_manager.c: 70: if(subTickerX>=5){
 12665  0818  3005               	movlw	5
 12666  0819  0269               	subwf	_subTickerX,w
 12667  081A  1C03               	skipc
 12668  081B  281E               	goto	i1l4485
 12669                           
 12670                           ;interrupt_manager.c: 71: subTickerX=0;
 12671  081C  01E9               	clrf	_subTickerX
 12672                           
 12673                           ;interrupt_manager.c: 72: Event |= (1<<2);
 12674  081D  156B               	bsf	_Event,2	;volatile
 12675  081E                     i1l4485:	
 12676                           
 12677                           ;interrupt_manager.c: 73: };interrupt_manager.c: 74: if(subTickerX_1s>=50){
 12678  081E  3032               	movlw	50
 12679  081F  0268               	subwf	_subTickerX_1s,w
 12680  0820  1C03               	skipc
 12681  0821  2824               	goto	i1l4491
 12682                           
 12683                           ;interrupt_manager.c: 75: subTickerX_1s=0;
 12684  0822  01E8               	clrf	_subTickerX_1s
 12685                           
 12686                           ;interrupt_manager.c: 76: Event |= (1<<3);
 12687  0823  15EB               	bsf	_Event,3	;volatile
 12688  0824                     i1l4491:	
 12689                           
 12690                           ;interrupt_manager.c: 77: };interrupt_manager.c: 79: if(eusartRxIdleTime_ms){
 12691  0824  087C               	movf	_eusartRxIdleTime_ms,w	;volatile
 12692  0825  1903               	btfsc	3,2
 12693  0826  2831               	goto	i1l4501
 12694                           
 12695                           ;interrupt_manager.c: 80: eusartRxIdleTime_ms++;
 12696  0827  3001               	movlw	1
 12697  0828  00F0               	movwf	??_INTERRUPT_InterruptManager
 12698  0829  0870               	movf	??_INTERRUPT_InterruptManager,w
 12699  082A  07FC               	addwf	_eusartRxIdleTime_ms,f	;volatile
 12700                           
 12701                           ;interrupt_manager.c: 81: if(eusartRxIdleTime_ms>5){
 12702  082B  3006               	movlw	6
 12703  082C  027C               	subwf	_eusartRxIdleTime_ms,w	;volatile
 12704  082D  1C03               	skipc
 12705  082E  2831               	goto	i1l4501
 12706                           
 12707                           ;interrupt_manager.c: 82: Event|=(1<<0);
 12708  082F  146B               	bsf	_Event,0	;volatile
 12709                           
 12710                           ;interrupt_manager.c: 83: eusartRxIdleTime_ms=0;
 12711  0830  01FC               	clrf	_eusartRxIdleTime_ms	;volatile
 12712  0831                     i1l4501:	
 12713                           
 12714                           ;interrupt_manager.c: 84: };interrupt_manager.c: 85: };interrupt_manager.c: 86: globalTi
      +                          cker++;
 12715  0831  3001               	movlw	1
 12716  0832  0021               	movlb	1	; select bank1
 12717  0833  07CE               	addwf	_globalTicker^(0+128),f	;volatile
 12718  0834  3000               	movlw	0
 12719  0835  3DCF               	addwfc	(_globalTicker+1)^(0+128),f	;volatile
 12720  0836                     i1l4503:	
 12721                           
 12722                           ;interrupt_manager.c: 87: };interrupt_manager.c: 88: if(INTCONbits.PEIE == 1 && PIE1bits
      +                          .RCIE == 1 && PIR1bits.RCIF == 1)
 12723  0836  1F0B               	btfss	11,6	;volatile
 12724  0837  285E               	goto	i1l4521
 12725  0838  0021               	movlb	1	; select bank1
 12726  0839  1E91               	btfss	17,5	;volatile
 12727  083A  285E               	goto	i1l4521
 12728  083B  0020               	movlb	0	; select bank0
 12729  083C  1E91               	btfss	17,5	;volatile
 12730  083D  285E               	goto	i1l4521
 12731                           
 12732                           ;interrupt_manager.c: 89: {;interrupt_manager.c: 91: PIR1bits.RCIF=0;
 12733  083E  1291               	bcf	17,5	;volatile
 12734                           
 12735                           ;interrupt_manager.c: 92: if(1 == RCSTAbits.OERR){
 12736  083F  0023               	movlb	3	; select bank3
 12737  0840  1C9D               	btfss	29,1	;volatile
 12738  0841  2844               	goto	i1l4513
 12739                           
 12740                           ;interrupt_manager.c: 93: RCSTAbits.CREN = 0;
 12741  0842  121D               	bcf	29,4	;volatile
 12742                           
 12743                           ;interrupt_manager.c: 94: RCSTAbits.CREN = 1;
 12744  0843  161D               	bsf	29,4	;volatile
 12745  0844                     i1l4513:	
 12746                           
 12747                           ;interrupt_manager.c: 95: };interrupt_manager.c: 96: rxtemp=RCREG;
 12748  0844  0819               	movf	25,w	;volatile
 12749  0845  00F0               	movwf	??_INTERRUPT_InterruptManager
 12750  0846  0870               	movf	??_INTERRUPT_InterruptManager,w
 12751  0847  0020               	movlb	0	; select bank0
 12752  0848  00E7               	movwf	_rxtemp
 12753                           
 12754                           ;interrupt_manager.c: 97: if(eusartRxCount<32){
 12755  0849  3020               	movlw	32
 12756  084A  026A               	subwf	_eusartRxCount,w	;volatile
 12757  084B  1803               	skipnc
 12758  084C  285A               	goto	i1l4519
 12759                           
 12760                           ;interrupt_manager.c: 98: eusartRxBuffer[eusartRxCount]=rxtemp;
 12761  084D  0867               	movf	_rxtemp,w
 12762  084E  00F0               	movwf	??_INTERRUPT_InterruptManager
 12763  084F  086A               	movf	_eusartRxCount,w
 12764  0850  3E40               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 12765  0851  0086               	movwf	6
 12766  0852  3001               	movlw	1	; select bank2/3
 12767  0853  0087               	movwf	7
 12768  0854  0870               	movf	??_INTERRUPT_InterruptManager,w
 12769  0855  0081               	movwf	1
 12770                           
 12771                           ;interrupt_manager.c: 99: eusartRxCount++;
 12772  0856  3001               	movlw	1
 12773  0857  00F0               	movwf	??_INTERRUPT_InterruptManager
 12774  0858  0870               	movf	??_INTERRUPT_InterruptManager,w
 12775  0859  07EA               	addwf	_eusartRxCount,f	;volatile
 12776  085A                     i1l4519:	
 12777                           
 12778                           ;interrupt_manager.c: 101: };interrupt_manager.c: 102: eusartRxIdleTime_ms=1;
 12779  085A  3001               	movlw	1
 12780  085B  00F0               	movwf	??_INTERRUPT_InterruptManager
 12781  085C  0870               	movf	??_INTERRUPT_InterruptManager,w
 12782  085D  00FC               	movwf	_eusartRxIdleTime_ms	;volatile
 12783  085E                     i1l4521:	
 12784                           
 12785                           ;interrupt_manager.c: 103: };interrupt_manager.c: 105: if( PIR1bits.TXIF == 1 && INTCONb
      +                          its.PEIE && PIE1bits.TXIE)
 12786  085E  0020               	movlb	0	; select bank0
 12787  085F  1A11               	btfsc	17,4	;volatile
 12788  0860  1F0B               	btfss	11,6	;volatile
 12789  0861  2884               	goto	i1l4543
 12790  0862  0021               	movlb	1	; select bank1
 12791  0863  1E11               	btfss	17,4	;volatile
 12792  0864  2884               	goto	i1l4543
 12793                           
 12794                           ;interrupt_manager.c: 106: {;interrupt_manager.c: 109: if(1 == RCSTAbits.OERR){
 12795  0865  0023               	movlb	3	; select bank3
 12796  0866  1C9D               	btfss	29,1	;volatile
 12797  0867  286C               	goto	i1l4531
 12798                           
 12799                           ;interrupt_manager.c: 110: RCSTAbits.CREN = 0;
 12800  0868  121D               	bcf	29,4	;volatile
 12801                           
 12802                           ;interrupt_manager.c: 111: RCSTAbits.CREN = 1;
 12803  0869  161D               	bsf	29,4	;volatile
 12804                           
 12805                           ;interrupt_manager.c: 112: RCSTAbits.SREN=0;
 12806  086A  129D               	bcf	29,5	;volatile
 12807                           
 12808                           ;interrupt_manager.c: 113: RCSTAbits.SREN=1;
 12809  086B  169D               	bsf	29,5	;volatile
 12810  086C                     i1l4531:	
 12811                           
 12812                           ;interrupt_manager.c: 114: };interrupt_manager.c: 115: if(txBufLen>0){
 12813  086C  0020               	movlb	0	; select bank0
 12814  086D  0866               	movf	_txBufLen,w
 12815  086E  1903               	btfsc	3,2
 12816  086F  2880               	goto	i1l4539
 12817                           
 12818                           ;interrupt_manager.c: 116: TXREG=txBuf[txCount];
 12819  0870  0865               	movf	_txCount,w
 12820  0871  3EA0               	addlw	(low (_txBuf| (0+256)))& (0+255)
 12821  0872  0086               	movwf	6
 12822  0873  3001               	movlw	1	; select bank3/4
 12823  0874  0087               	movwf	7
 12824  0875  0801               	movf	1,w
 12825  0876  0023               	movlb	3	; select bank3
 12826  0877  009A               	movwf	26	;volatile
 12827                           
 12828                           ;interrupt_manager.c: 117: txBufLen--;
 12829  0878  3001               	movlw	1
 12830  0879  0020               	movlb	0	; select bank0
 12831  087A  02E6               	subwf	_txBufLen,f
 12832                           
 12833                           ;interrupt_manager.c: 118: txCount++;
 12834  087B  3001               	movlw	1
 12835  087C  00F0               	movwf	??_INTERRUPT_InterruptManager
 12836  087D  0870               	movf	??_INTERRUPT_InterruptManager,w
 12837  087E  07E5               	addwf	_txCount,f
 12838                           
 12839                           ;interrupt_manager.c: 119: }else{
 12840  087F  2884               	goto	i1l4543
 12841  0880                     i1l4539:	
 12842                           
 12843                           ;interrupt_manager.c: 120: txBufLen=0;
 12844  0880  01E6               	clrf	_txBufLen
 12845                           
 12846                           ;interrupt_manager.c: 121: txCount=0;
 12847  0881  01E5               	clrf	_txCount
 12848                           
 12849                           ;interrupt_manager.c: 122: PIE1bits.TXIE=0;
 12850  0882  0021               	movlb	1	; select bank1
 12851  0883  1211               	bcf	17,4	;volatile
 12852  0884                     i1l4543:	
 12853                           
 12854                           ;interrupt_manager.c: 123: };interrupt_manager.c: 125: };interrupt_manager.c: 127: if(PI
      +                          R3bits.PWM2IF){
 12855  0884  0020               	movlb	0	; select bank0
 12856  0885  1A93               	btfsc	19,5	;volatile
 12857                           
 12858                           ;interrupt_manager.c: 128: PIR3bits.PWM2IF = 0;
 12859  0886  1293               	bcf	19,5	;volatile
 12860                           
 12861                           ;interrupt_manager.c: 129: };interrupt_manager.c: 131: if(PIR3bits.PWM1IF){
 12862  0887  1A13               	btfsc	19,4	;volatile
 12863                           
 12864                           ;interrupt_manager.c: 132: PIR3bits.PWM1IF=0;
 12865  0888  1213               	bcf	19,4	;volatile
 12866  0889  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12867  088A  0009               	retfie
 12868  088B                     __end_of_INTERRUPT_InterruptManager:	
 12869  007E                     btemp	set	126	;btemp
 12870  007E                     int$flags	set	126
 12871  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    17
    Data        12
    BSS         214
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     39      80
    BANK1            80      2      58
    BANK2            80      0      64
    BANK3            80      0      64
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           60      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    crc_append@message	PTR unsigned char  size(2) Largest target is 132
		 -> modbusBuf(BANK2[32]), sysData(BIGRAM[132]), 

    crc_verify@message	PTR unsigned char  size(2) Largest target is 132
		 -> modbusBuf(BANK2[32]), sysData(BIGRAM[132]), 

    crc_sum@buf	PTR unsigned char  size(2) Largest target is 132
		 -> modbusBuf(BANK2[32]), sysData(BIGRAM[132]), 

    m_mem_cpy_len@s	PTR unsigned char  size(2) Largest target is 132
		 -> modbusBuf(BANK2[32]), sysData(BIGRAM[132]), eusartRxBuffer(BANK2[32]), 

    m_mem_cpy_len@d	PTR unsigned char  size(2) Largest target is 64
		 -> crc_verify@expected(BANK0[2]), modbusBuf(BANK2[32]), txBuf(BANK3[64]), 

    modbus_response_process@rbuf	PTR unsigned char  size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    modbus_response_process@pmdbs	PTR struct . size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    modbus_response_command@rbuf	PTR unsigned char  size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    modbus_response_command@pmdbs	PTR struct . size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    modbus_response_write_mult_register@rbuf	PTR unsigned char  size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    modbus_response_write_mult_register@stb	PTR struct . size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    modbus_response_write_single_register@rbuf	PTR unsigned char  size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    modbus_response_write_single_register@pmdbs	PTR struct . size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    getRegisterVal@tempData	PTR unsigned int  size(1) Largest target is 2
		 -> modbus_response_command@tempData(BANK0[2]), 

    modbus_response_illgeal_function@buf	PTR unsigned char  size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    modbus_response_illgeal_function@pmdbs	PTR struct . size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    my_flash_system_write@buf	PTR unsigned char  size(2) Largest target is 132
		 -> sysData(BIGRAM[132]), 

    my_flash_system_read@buf	PTR unsigned char  size(2) Largest target is 132
		 -> sysData(BIGRAM[132]), 

    uart_send_len@buf	PTR unsigned char  size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_calc_rs_lo_avg
    _main->_uart_send_len
    _sys_data_init->_my_flash_system_read
    _pid_pwm2_vout_run->_set_vout_pwm2_duty
    _set_vout_pwm2_duty->_get_vout_pwm2_duty
    _pid_pwm1_idrv_run->_set_idrv_pwm1_duty
    _set_idrv_pwm1_duty->_get_idrv_pwm1_duty
    _modbus_response_write_single_register->_crc_append
    _modbus_response_write_single_register->_uart_send_len
    _modbus_response_write_mult_register->_crc_append
    _modbus_response_write_mult_register->_uart_send_len
    _sys_data_save->_crc_append
    _my_flash_read_system_erase->_FLASH_EraseBlock
    _modbus_response_illgeal_function->_crc_append
    _modbus_response_illgeal_function->_uart_send_len
    _modbus_response_command->_crc_append
    _modbus_response_command->_uart_send_len
    _uart_send_len->_m_mem_cpy_len
    _crc_append->_crc_sum
    _crc_verify->_m_mem_cpy_len
    _calc_temp_rs->___lldiv
    _calc_temp_rc->___lldiv
    _calc_rs_lo_avg->___lldiv
    _calc_expect_vout_adc_value->___aldiv
    ___aldiv->___lmul
    _adc_sample->_fvr_set_gain
    _TMR2_Initialize->_TMR2_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_calc_expect_vout_adc_value
    _sys_data_init->_crc_verify
    _pid_pwm1_idrv_run->___aldiv
    _modbus_response_process->_modbus_response_command
    _modbus_response_process->_modbus_response_write_single_register
    _modbus_response_write_single_register->_crc_append
    _modbus_response_write_mult_register->_crc_append
    _sys_data_save->_crc_append
    _modbus_response_illgeal_function->_crc_append
    _modbus_response_command->_crc_append
    _crc_append->_crc_sum
    _crc_verify->_crc_sum
    _calc_temp_rs->___lldiv
    _calc_temp_rc->___lldiv
    _calc_rs_lo_avg->___lldiv
    _calc_expect_vout_adc_value->___aldiv
    ___aldiv->___lmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   49027
                                              0 BANK1      2     2      0
                  _SYSTEM_Initialize
                         _adc_sample
         _calc_expect_vout_adc_value
                     _calc_rs_lo_avg
                       _calc_temp_rc
                       _calc_temp_rs
                      _m_mem_cpy_len
            _modbus_response_process
                  _pid_pwm1_idrv_run
                  _pid_pwm2_vout_run
                      _sys_data_init
                _uart_received_start
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (1) _uart_received_start                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sys_data_init                                       10    10      0    5897
                                             14 BANK0     10    10      0
                             ___wmul
                         _crc_verify
               _my_flash_system_read
                      _sys_data_save
 ---------------------------------------------------------------------------------
 (2) _my_flash_system_read                                11     7      4     311
                                              1 COMMON    11     7      4
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     396
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _pid_pwm2_vout_run                                    6     6      0    1281
                                              0 BANK0      6     6      0
                            ___awdiv
                            ___lwdiv
                 _set_vout_pwm2_duty
 ---------------------------------------------------------------------------------
 (2) _set_vout_pwm2_duty                                   4     2      2     212
                                              7 COMMON     4     2      2
                 _get_vout_pwm2_duty
 ---------------------------------------------------------------------------------
 (3) _get_vout_pwm2_duty                                   6     4      2      25
                                              1 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              1 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     452
                                              1 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (1) _pid_pwm1_idrv_run                                   12    12      0    3340
                                             18 BANK0     12    12      0
                            ___aldiv
                             ___lmul
                 _set_idrv_pwm1_duty
 ---------------------------------------------------------------------------------
 (2) _set_idrv_pwm1_duty                                   4     2      2     212
                                              7 COMMON     4     2      2
                 _get_idrv_pwm1_duty
 ---------------------------------------------------------------------------------
 (3) _get_idrv_pwm1_duty                                   6     4      2      25
                                              1 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _modbus_response_process                              6     4      2   25674
                                             24 BANK0      6     4      2
                         _crc_verify
            _modbus_response_command
   _modbus_response_illgeal_function
_modbus_response_write_mult_register
_modbus_response_write_single_regist
 ---------------------------------------------------------------------------------
 (2) _modbus_response_write_single_register               12    12      0    7386
                                             12 BANK0     12    12      0
                         _crc_append
                      _sys_data_save
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (2) _modbus_response_write_mult_register                  5     5      0    6758
                                             12 BANK0      5     5      0
                         _crc_append
                      _sys_data_save
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (2) _sys_data_save                                        0     0      0    2878
                         _crc_append
         _my_flash_read_system_erase
              _my_flash_system_write
 ---------------------------------------------------------------------------------
 (3) _my_flash_system_write                               16    12      4     473
                                              1 COMMON     6     2      4
                                              0 BANK0     10    10      0
 ---------------------------------------------------------------------------------
 (3) _my_flash_read_system_erase                           0     0      0     523
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     3     1      2     523
                                              1 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (2) _modbus_response_illgeal_function                     4     3      1    3840
                                             12 BANK0      4     3      1
                         _crc_append
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (2) _modbus_response_command                             12    12      0    5169
                                             12 BANK0     12    12      0
                         _crc_append
                     _getRegisterVal
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (1) _uart_send_len                                        4     3      1    1550
                                              8 COMMON     4     3      1
                      _m_mem_cpy_len
 ---------------------------------------------------------------------------------
 (3) _getRegisterVal                                      10     7      3     711
                                              1 COMMON    10     7      3
 ---------------------------------------------------------------------------------
 (3) _crc_append                                          11     7      4    1882
                                              7 COMMON     5     5      0
                                              6 BANK0      6     2      4
                            _crc_sum
 ---------------------------------------------------------------------------------
 (2) _crc_verify                                          10     6      4    2079
                                              8 COMMON     2     2      0
                                              6 BANK0      8     4      4
                            _crc_sum
                      _m_mem_cpy_len
 ---------------------------------------------------------------------------------
 (2) _m_mem_cpy_len                                        7     1      6     762
                                              1 COMMON     7     1      6
 ---------------------------------------------------------------------------------
 (4) _crc_sum                                             12     8      4     731
                                              1 COMMON     6     2      4
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _calc_temp_rs                                         8     4      4    2346
                                              5 BANK0      8     4      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) _calc_temp_rc                                        12     8      4    2346
                                              5 BANK0     12     8      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) _calc_rs_lo_avg                                       9     7      2    1072
                                             10 COMMON     2     2      0
                                              5 BANK0      7     5      2
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     770
                                              1 COMMON     9     1      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _calc_expect_vout_adc_value                          21    19      2    3624
                                             18 BANK0     21    19      2
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8    1576
                                              1 COMMON     8     0      8
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8    1345
                                              9 COMMON     1     1      0
                                              4 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _adc_sample                                          12    10      2    1014
                                              4 COMMON     5     3      2
                                              0 BANK0      7     7      0
                           _adc_init
                       _fvr_set_gain
 ---------------------------------------------------------------------------------
 (2) _fvr_set_gain                                         3     3      0      69
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _adc_init                                             2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     121
                    _ADC1_Initialize
                  _EUSART_Initialize
                     _FVR_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM1_Initialize
                    _PWM2_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0      98
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR2_SetInterruptHandler                             2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _ADC1_Initialize
     _EUSART_Initialize
     _FVR_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM1_Initialize
     _PWM2_Initialize
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
       _TMR2_StartTimer
     _WDT_Initialize
   _adc_sample
     _adc_init
     _fvr_set_gain
   _calc_expect_vout_adc_value
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _calc_rs_lo_avg
     ___lldiv
   _calc_temp_rc
     ___lldiv
     ___lmul
   _calc_temp_rs
     ___lldiv
     ___lmul
   _m_mem_cpy_len
   _modbus_response_process
     _crc_verify
       _crc_sum
       _m_mem_cpy_len
     _modbus_response_command
       _crc_append
         _crc_sum
       _getRegisterVal
       _uart_send_len
         _m_mem_cpy_len
     _modbus_response_illgeal_function
       _crc_append
         _crc_sum
       _uart_send_len
         _m_mem_cpy_len
     _modbus_response_write_mult_register
       _crc_append
         _crc_sum
       _sys_data_save
         _crc_append
           _crc_sum
         _my_flash_read_system_erase
           _FLASH_EraseBlock
         _my_flash_system_write
       _uart_send_len
         _m_mem_cpy_len
     _modbus_response_write_single_register
       _crc_append
         _crc_sum
       _sys_data_save
         _crc_append
           _crc_sum
         _my_flash_read_system_erase
           _FLASH_EraseBlock
         _my_flash_system_write
       _uart_send_len
         _m_mem_cpy_len
   _pid_pwm1_idrv_run
     ___aldiv
       ___lmul (ARG)
     ___lmul
     _set_idrv_pwm1_duty
       _get_idrv_pwm1_duty
   _pid_pwm2_vout_run
     ___awdiv
     ___lwdiv
     _set_vout_pwm2_duty
       _get_vout_pwm2_duty
   _sys_data_init
     ___wmul
     _crc_verify
       _crc_sum
       _m_mem_cpy_len
     _my_flash_system_read
     _sys_data_save
       _crc_append
         _crc_sum
       _my_flash_read_system_erase
         _FLASH_EraseBlock
       _my_flash_system_write
   _uart_received_start
   _uart_send_len
     _m_mem_cpy_len

 _INTERRUPT_InterruptManager (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3E0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     27      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      2      3A       7       72.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      40       9       80.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      40      11       80.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     117      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              3C      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           20      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     117      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Sat Mar 30 14:14:00 2019

              __end_of_TMR2_SetInterruptHandler 1007                                               pc 0002  
                  ??_my_flash_read_system_erase 0074                                    ___awdiv@sign 0077  
                                            _x0 004B                                              _x1 00BC  
                                            _y0 004F                                              _y1 00C0  
                        __end_of_FVR_Initialize 1CA2                             ___wmul@multiplicand 0073  
                                           l511 10BE                                             l621 1D25  
                                           l633 1264                                             l627 1CFE  
                                           l652 17F9                                             l732 142D  
                                           l822 0D71                                             l662 1551  
                                           l639 127E                                             l647 1500  
                                           l735 1481                                             l664 1597  
                                           l657 0C40                                             l683 0AD3  
                                           l786 1138                                             _GIE 005F  
                                           _PR2 001B                                 _pwm1DutyForIdrv 00D4  
                                           _x32 00B8                                             _y32 0047  
                                           _err 00A0                                 _TMR2_Initialize 1CEA  
                                           wreg 0009                            ??_get_vout_pwm2_duty 0073  
                          ??_set_vout_pwm2_duty 0079                                 ??_uart_send_len 0079  
                                          S5413 1800                                            l1062 1200  
                                          l1151 1390                                            l1064 121E  
                                          l1086 1DAF                                            l4031 115F  
                                          l3401 143F                                            l5003 1E78  
                                          l3411 145B                                            l5021 13A1  
                                          l3501 0EC2                                            l4037 116A  
                                          l5031 13BF                                            l3511 0F0C  
                                          l3503 0ED2                                            l5111 0C38  
                                          l4063 11A1                                            l4055 1190  
                                          l4047 1172                                            l4145 126E  
                                          l3521 0F39                                            l3513 0F15  
                                          l3505 0EE5                                            l3433 1489  
                                          l3409 1459                                            l4049 117E  
                                          l4155 1271                                            l5043 13EA  
                                          l3523 0F42                                            l3515 0F1E  
                                          l3507 0EF2                                            l3419 146C  
                                          l5107 0C21                                            l4059 1199  
                                          l4157 12A7                                            l5029 13B1  
                                          l5061 14EC                                            l3525 0F4B  
                                          l3517 0F27                                            l3509 0EFF  
                                          l3533 0F65                                            l5109 0C29  
                                          l4085 1EBC                                            l4077 1E9E  
                                          l5213 163E                                            l3703 1D1E  
                                          l5047 13F8                                            l5039 13DF  
                                          l5063 14F8                                            l3527 0F54  
                                          l3519 0F30                                            l3535 0F72  
                                          l4079 1EAA                                            l5127 1562  
                                          l5207 15ED                                            l5161 094F  
                                          l5081 17F1                                            l3545 0F95  
                                          l3529 0F5D                                            l5233 0FD6  
                                          l4089 1EC5                                            l5147 08EA  
                                          l4267 12DE                                            l4259 12BA  
                                          l5235 0FDB                                            l5243 0FEC  
                                          l5139 15A8                                            l5331 0E80  
                                          l5181 0A0A                                            l5157 0947  
                                          l3389 1428                                            l5237 0FE0  
                                          l5229 0FC7                                            l5341 0EB1  
                                          l5175 09E9                                            l5079 17E5  
                                          l5239 0FE5                                            l5327 0E77  
                                          l3745 106C                                            l3499 0EBA  
                                          l3747 1093                                            l5339 0EAE  
                                          l3933 1DA9                                            l4751 1245  
                                          l4823 105F                                            l4911 0D73  
                                          l4753 124A                                            l4745 1230  
                                          l4905 0D43                                            l5297 0DCE  
                                          l4915 0D79                                            l3965 11B7  
                                          l4853 0C6B                                            l3975 11E5  
                                          l3967 11C5                                            l4767 1E16  
                                          l4871 0CB1                                            l3979 11F0  
                                          l4787 10A9                                            l4971 16B7  
                                          l4859 0C7B                                            l4983 16B8  
                                          l4879 0CCF                                            l4985 16EA  
                                          l4999 1E6D                         __end_of_PWM1_Initialize 1D41  
                                          _LATA 010C                                            u2215 1412  
                                          _LATC 010E                                            u3035 1175  
                                          u3115 1EA1                                            u2245 144D  
                                          u3215 128B                                            u2415 1DF0  
                                          u3055 117F                                            u3135 1EAB  
                                          u3225 1293                                            u2345 1D63  
                                          u3065 1189                                            u3145 1EB5  
                                          u2425 1E0C                                            u3235 127A  
                                          u2275 1433                                            u3075 1191  
                                          u3155 1EBD                                            u2355 1D7C  
                                          u2390 1111                                            u4225 0C88  
                                          u2465 1072                                            u4075 1206  
                                          u4155 105B                                            u4405 1692  
                                          u5047 125F                                            u4505 13B4  
                                          u4525 13C0                                            u4445 1E79  
                                          u2845 11BA                                            u4285 0CF0  
                                          u2765 1DB0                                            u4535 13D4  
                                          u4455 1E80                                            u2775 1DB5  
                                          u4545 13E0                                            u4705 093D  
                                          u2865 11C6                                            u2875 11DA  
                                          u4733 09DF                                            u2885 11E6  
                                          u4645 154A                                            u4655 155B  
                                          u4753 0A03                                            u4665 1590  
                                          u4905 0E0C                                            u4675 15A1  
                                          u4915 0E23                                            u4925 0E3A  
                                          u4695 091C                                   _m_mem_cpy_len 1E16  
                                          _TMR2 001A                                            _WPUA 020C  
                                          _WPUC 020E                                            _main 0DA2  
modbus_response_write_single_register@startAddr 0036                                            _pidU 00D0  
           __size_of_my_flash_read_system_erase 0023                                            fsr0h 0005  
                                          fsr1h 0007                                            indf0 0000  
                                          fsr0l 0004                                            indf1 0001  
                                          fsr1l 0006                                            _xlen 0064  
                                          btemp 007E                                            start 088B  
                               _pwm2DutyForVout 00D6                       ??_modbus_response_command 002C  
                       __end_of_PWM2_Initialize 1D5A                       ??_modbus_response_process 003A  
                               ?_FVR_Initialize 0070                  __size_of_OSCILLATOR_Initialize 0001  
                 __end_of_OSCILLATOR_Initialize 0804                                 __end_of___aldiv 1401  
                                         ?_main 0070                                 __end_of___awdiv 11A6  
                               __end_of___lldiv 11F9                                 ___awdiv@divisor 0071  
                                         _T2CON 001C                                 __end_of___lwdiv 1ECA  
                               ___awdiv@counter 0076                                           _RCREG 0199  
                                         _RCSTA 019D                                           _TRISA 008C  
                                         _TRISC 008E                                           _TXREG 019A  
                                         _TXSTA 019E                modbus_response_command@startAddr 0030  
                           ___lmul@multiplicand 0075                                           _PidKp 00CC  
                                         _PidTd 00C8                                           _Event 006B  
                                         _PidTi 00CA                                 __end_of_crc_sum 124F  
                                _WDT_Initialize 1CA2                                           _resRc 006E  
                                         _resRs 006C                                           _txBuf 01A0  
        modbus_response_write_mult_register@len 002E                                  ?_m_mem_cpy_len 0071  
        modbus_response_write_mult_register@stb 0030                      __end_of_get_idrv_pwm1_duty 1D73  
                    __end_of_set_idrv_pwm1_duty 1DFA                              crc_verify@expected 002C  
                                         status 0003                                           wtemp0 007E  
                               _TMR2_StartTimer 1C9B                                   fvr_set_gain@g 0073  
   __end_of_modbus_response_write_mult_register 137F    __size_of_modbus_response_write_mult_register 0072  
         ??_modbus_response_write_mult_register 002C            ?_modbus_response_write_mult_register 0070  
           _modbus_response_write_mult_register 130D              __end_of_calc_expect_vout_adc_value 0AD8  
                    _calc_expect_vout_adc_value 08E4                                __end_of_HexTable 182F  
                          pid_pwm1_idrv_run@t32 003A                                 __initialization 088D  
                                  __end_of_main 0EB3                           __size_of_calc_temp_rc 00D9  
                         __size_of_calc_temp_rs 0090                         __end_of_TMR2_Initialize 1CFD  
                   ?_INTERRUPT_InterruptManager 0070             modbus_response_illgeal_function@buf 002E  
                      _TMR2_SetInterruptHandler 1001                                          ??_main 00D8  
                              ??_calc_rs_lo_avg 007A                     modbus_response_process@rbuf 003D  
                 __size_of_my_flash_system_read 0038                     modbus_response_process@rlen 0038  
                   modbus_response_process@resp 003B                 __end_of_modbus_response_command 1727  
                        __end_of_WDT_Initialize 1CA6                    my_flash_system_write@blocNum 0023  
                                        _ADCON0 009D                                          _ADCON1 009E  
                                        _ADCON2 009F                                          _ADRESH 009C  
                                        _ADRESL 009B                                ___awdiv@dividend 0073  
                                        _ANSELA 018C                                          _ANSELC 018E  
               __end_of_modbus_response_process 1000                                __end_of_adc_init 1D11  
                              ?_PWM1_Initialize 0070                                          _ODCONA 028C  
                                        _ODCONC 028E                                          i1l4501 0831  
                                        i1l4503 0836                                          i1l4513 0844  
                                        i1l4521 085E                                          i1l4531 086C  
                                        i1l4543 0884                                          i1l4519 085A  
                                        i1l4539 0880                                          i1l4491 0824  
                                        i1l4485 081E                                          _FVRCON 0117  
                                        _PMADRH 0192                                          _PMADRL 0191  
                                        _PMDATH 0194                                          _PMDATL 0193  
                                        _PMCON2 0196                       __size_of_FLASH_EraseBlock 001C  
                   __end_of_uart_received_start 1CAA                                          _SPBRGH 019C  
                                        _SPBRGL 019B                                          _WDTCON 0097  
                                  _calc_temp_rc 1727                                    _calc_temp_rs 148F  
                               calc_rs_lo_avg@i 002B                                 calc_rs_lo_avg@x 0025  
            __end_of_my_flash_read_system_erase 102A                      _my_flash_read_system_erase 1007  
    modbus_response_write_single_register@pmdbs 0034                                          ___lmul 1E64  
                                     ??___aldiv 0079                                          ___wmul 1DA7  
                                     ??___awdiv 0075                                       ??___lldiv 0079  
                                     ??___lwdiv 0075                                ?_PWM2_Initialize 0070  
                                        _pwm2Ei 00C4                                ___awdiv@quotient 0078  
                      my_flash_system_write@buf 0071                        my_flash_system_write@len 0073  
                      my_flash_system_write@loc 0025                                       ??_crc_sum 0075  
                      __size_of_ADC1_Initialize 0009                                          _rxtemp 0067  
                               ?_WDT_Initialize 0070                                 ??_m_mem_cpy_len 0077  
              my_flash_system_write@GIEBitValue 0022                         __end_of_TMR2_StartTimer 1C9E  
      TMR2_SetInterruptHandler@InterruptHandler 0071                 modbus_response_command@tempData 0036  
      __end_of_modbus_response_illgeal_function 1155       __size_of_modbus_response_illgeal_function 0042  
            ??_modbus_response_illgeal_function 002D               ?_modbus_response_illgeal_function 002C  
              _modbus_response_illgeal_function 1113                                   ?_fvr_set_gain 0070  
                                fvr_set_gain@t8 0072                               _SYSTEM_Initialize 1D8C  
                       __end_of__initialization 08E0                          __size_of_sys_data_init 00B8  
                         _my_flash_system_write 1401                              ?_SYSTEM_Initialize 0070  
                        __size_of_sys_data_save 0036                              getRegisterVal@addr 0071  
                                __pcstackCOMMON 0070                                    __pidataBANK0 1CAA  
                                  __pidataBANK1 1CAE                             ??_SYSTEM_Initialize 0073  
                                    _adc_sample 124F          modbus_response_write_single_register@i 0033  
                              ?_TMR2_Initialize 0070                                  _OPTION_REGbits 0095  
      modbus_response_write_single_register@t16 0031                               crc_append@message 0026  
                        getRegisterVal@tempAddr 007A                          my_flash_system_write@i 0029  
                        my_flash_system_write@j 0020                          getRegisterVal@tempData 0073  
                     __end_of_SYSTEM_Initialize 1DA7                                  ??_fvr_set_gain 0071  
                                    __pbssBANK0 0047                                      __pbssBANK1 00A0  
                                    __pbssBANK2 0120                                      __pbssBANK3 01A0  
                modbus_response_command@tmpAddr 002E                 my_flash_system_read@GIEBitValue 0077  
                                    adc_init@ch 0072                                ??_FVR_Initialize 0071  
                                    __pmaintext 0DA2                      modbus_response_command@len 0034  
                                       ?___lmul 0071                                         ?___wmul 0071  
                                    __pintentry 0804                    ??_calc_expect_vout_adc_value 0034  
                                       _BAUDCON 019F                                  ___lmul@product 0020  
                                    _crc_append 1E33                                       ?_adc_init 0070  
                                  adc_sample@ch 0020                                   _sys_data_init 15B0  
                                 _sys_data_save 1ECA                                      _crc_verify 102A  
                                 _eusartRxCount 006A                     __size_of_get_vout_pwm2_duty 0019  
                   __size_of_set_vout_pwm2_duty 001C                                         _PWM1DCH 0D94  
                                       _PWM1DCL 0D93                                         _PWM2DCH 0DA4  
                                       _PWM2DCL 0DA3                                         _PWM1CON 0D9B  
                                       _PWM2CON 0DAB                                         _PWM1OFH 0D98  
                                       _PWM1OFL 0D97                                         _PWM2OFH 0DA8  
                                       _PWM1PHH 0D92                                         _PWM2OFL 0DA7  
                                       _PWM1PHL 0D91                                         _PWM2PHH 0DA2  
                                       _PWM2PHL 0DA1                                         _PWM1PRH 0D96  
                                       _PWM1PRL 0D95                                         _PWM2PRH 0DA6  
                                       _PWM2PRL 0DA5           modbus_response_illgeal_function@pmdbs 002F  
                                       _PPSLOCK 0E0F                               ??_ADC1_Initialize 0071  
                              ?_TMR2_StartTimer 0070                          set_idrv_pwm1_duty@duty 0077  
                         __end_of_uart_send_len 10D4                                _FLASH_EraseBlock 1DC2  
                        ?_my_flash_system_write 0071                         __size_of_getRegisterVal 00F9  
                   ?_calc_expect_vout_adc_value 0032     modbus_response_write_single_register@fiSave 0030  
                    ??_TMR2_SetInterruptHandler 0073                                         ___aldiv 137F  
                                       ___awdiv 1155                                 __size_of___lmul 0032  
                                       ___lldiv 11A6                                 __size_of___wmul 001B  
                            _get_idrv_pwm1_duty 1D5A                              _set_idrv_pwm1_duty 1DDE  
                                       ___lwdiv 1E96                                     ?_adc_sample 0074  
                                adc_sample@gfvr 0074                                  ?_sys_data_init 0070  
                                ?_sys_data_save 0070                                      ??_adc_init 0071  
                                       __ptext1 1CA6                                         __ptext2 15B0  
                                       __ptext3 1061                                         __ptext4 1DA7  
                                       __ptext5 151F                                         __ptext6 1DFA  
                                       __ptext7 1D73                                         __ptext8 1E96  
                                       __ptext9 1155                                         _crc_sum 11F9  
                                       _pidBbSm 0063                             ?_get_idrv_pwm1_duty 0071  
                           ?_set_idrv_pwm1_duty 0077                           _OSCILLATOR_Initialize 0803  
                                     _T2CONbits 001C                                      _rsLoAvgBuf 00AC  
                                       _rsLoAvg 0053                                ___aldiv@dividend 0028  
                      ??_PIN_MANAGER_Initialize 0071                                         _txCount 0065  
                                       _sysData 235C                      __size_of_SYSTEM_Initialize 001B  
                                       clrloop0 1CC0                            end_of_initialization 08E0  
                                       init_ram 1CCB                        ?_modbus_response_command 0070  
                                       initloop 1CCC                    __end_of_my_flash_system_read 1099  
                          ??_get_idrv_pwm1_duty 0073                            ??_set_idrv_pwm1_duty 0079  
                             _EUSART_Initialize 1CD7                                 ___lldiv@divisor 0071  
                                    _voExpectMv 00C6                                 ___lldiv@counter 0024  
                            ?_EUSART_Initialize 0070                        ?_modbus_response_process 0038  
                                     _RCSTAbits 019D                     ?_my_flash_read_system_erase 0070  
                              ___aldiv@quotient 002E                                       _PWM1LDCON 0D9F  
                                     _PWM2LDCON 0DAF                                       _PWM1OFCON 0DA0  
                                     _PWM2OFCON 0DB0                            __end_of_fvr_set_gain 1D28  
                                   ?_crc_append 0026                                      _subTickerX 0069  
                           ??_EUSART_Initialize 0071                                ??_WDT_Initialize 0071  
                                   ?_crc_verify 0026                                      crc_sum@crc 0024  
                                    crc_sum@buf 0071                                      crc_sum@len 0073  
                                     _RXPPSbits 0E15                             __size_of_adc_sample 005D  
                     __end_of_EUSART_Initialize 1CEA                                    _globalTicker 00CE  
                                     _TXSTAbits 019E                        __size_of_PWM1_Initialize 0019  
                  __size_of_uart_received_start 0004                    _TMR2_DefaultInterruptHandler 0000  
                               ??_sys_data_init 002E                                 ??_sys_data_save 007C  
                                __end_of___lmul 1E96                                  __end_of___wmul 1DC2  
                              _voExpectAdcValue 0055                                  _rtAdcValueRcHi 0059  
                                _rtAdcValueRcLo 005B                                  _rtAdcValueRsHi 005D  
                                _rtAdcValueVoFb 0057                                  _rtAdcValueRsLo 005F  
                        ?_OSCILLATOR_Initialize 0070                               crc_verify@message 0026  
                           start_initialization 088D                        __size_of_PWM2_Initialize 0019  
               __size_of_PIN_MANAGER_Initialize 003F                                   _PWM1LDCONbits 0D9F  
                       my_flash_system_read@buf 0071                         my_flash_system_read@len 0073  
                         __end_of_m_mem_cpy_len 1E33                                   _PWM2LDCONbits 0DAF  
                                _getRegisterVal 0EB3                         __size_of_calc_rs_lo_avg 0061  
                           __size_of_crc_append 0031                             __size_of_crc_verify 0037  
     modbus_response_write_single_register@rbuf 0035                                        ??___lmul 0079  
                                      ??___wmul 0075                                     __pdataBANK0 006C  
                                   __pdataBANK1 00D0                     FLASH_EraseBlock@GIEBitValue 0073  
                               _ADC1_Initialize 1CB6                        __end_of_FLASH_EraseBlock 1DDE  
                          _my_flash_system_read 1061                                     __pbssBIGRAM 235C  
                             __size_of_adc_init 0014                                     __pbssCOMMON 007C  
                                     ___latbits 0002                               getRegisterVal@t16 0078  
                                 __pcstackBANK0 0020                                   __pcstackBANK1 00D8  
                      __size_of_TMR2_Initialize 0013                         ??_my_flash_system_write 0075  
                        __end_of_getRegisterVal 0FAC                           my_flash_system_read@i 007A  
                    __size_of_EUSART_Initialize 0013         modbus_response_illgeal_function@errcode 002C  
                         __size_of_fvr_set_gain 0017                                ___lwdiv@dividend 0073  
                        _PIN_MANAGER_Initialize 10D4                     modbus_response_command@rbuf 0035  
                                      ?___aldiv 0024                           get_idrv_pwm1_duty@t16 0075  
                                      ?___awdiv 0071                                        ?___lldiv 0071  
                                  ??_adc_sample 0076                                     adc_sample@i 0021  
                                      ?___lwdiv 0071                               ??_PWM1_Initialize 0071  
                  ??_INTERRUPT_InterruptManager 0070                           set_idrv_pwm1_duty@t16 0079  
                                     __pswtext1 1800                                        ?_crc_sum 0071  
                 my_flash_system_read@flashAddr 0078                      __end_of_get_vout_pwm2_duty 1D8C  
                         ?_my_flash_system_read 0071                      __end_of_set_vout_pwm2_duty 1E16  
                              uart_send_len@buf 007B                                uart_send_len@len 0078  
                                 adc_sample@t16 0025                                ___lwdiv@quotient 0076  
                                 adc_sample@ret 0023                                   adc_sample@num 0075  
                               ?_getRegisterVal 0071                                    _fvr_set_gain 1D11  
                                _eusartRxBuffer 0140                                       _modbusBuf 0120  
                               ___aldiv@divisor 0024                               ??_PWM2_Initialize 0071  
                            __end_of_adc_sample 12AC                                 ___aldiv@counter 002C  
                                ___wmul@product 0075                                       _pidpwm2_U 00D2  
                             _pid_pwm1_idrv_run 0AD8                                       clear_ram0 1CBF  
                                m_mem_cpy_len@d 0071                                  m_mem_cpy_len@s 0073  
                                 ?_calc_temp_rc 0025                                   ?_calc_temp_rs 0025  
                                      _PIE1bits 0091                        __size_of_TMR2_StartTimer 0003  
                        set_vout_pwm2_duty@duty 0077             __size_of_INTERRUPT_InterruptManager 0087  
                            ?_pid_pwm1_idrv_run 0070                         __end_of_ADC1_Initialize 1CBF  
                                      _PIR1bits 0011                                        _PIR3bits 0013  
                     FLASH_EraseBlock@startAddr 0071                                        _PWM1INTE 0D9C  
                                      _PWM1INTF 0D9D                                        _PWM2INTE 0DAC  
                                      _PWM2INTF 0DAD                                        _PWM1TMRH 0D9A  
                                      _PWM1TMRL 0D99                                        _PWM2TMRH 0DAA  
                                      _PWM2TMRL 0DA9                                    ??_crc_append 0077  
              __size_of_modbus_response_command 00BF                             ??_pid_pwm1_idrv_run 0032  
                        __size_of_uart_send_len 003B                                      _ADCON0bits 009D  
                             ___wmul@multiplier 0071                                    ??_crc_verify 0078  
                       __size_of_FVR_Initialize 0004                __size_of_modbus_response_process 0054  
             __size_of_TMR2_SetInterruptHandler 0006                       ?_TMR2_SetInterruptHandler 0071  
                                   _isRunInBoot 0FFF                             _uart_received_start 1CA6  
                             _pid_pwm2_vout_run 151F                                        _HexTable 181E  
                             ___lmul@multiplier 0071                                crc_verify@crccal 002A  
                                _calc_rs_lo_avg 12AC                              ?_pid_pwm2_vout_run 0070  
                     __end_of_pid_pwm1_idrv_run 0C4E                               ??_TMR2_Initialize 0073  
                                ??_calc_temp_rc 0029                                  ??_calc_temp_rs 0029  
                            __end_of_crc_append 1E64                               calc_rs_lo_avg@t32 0027  
                   __size_of_get_idrv_pwm1_duty 0019                     __size_of_set_idrv_pwm1_duty 001C  
                           ??_pid_pwm2_vout_run 0020                              __end_of_crc_verify 1061  
                                  _PWM1INTFbits 0D9D                            ?_uart_received_start 0070  
                                  _PWM2INTFbits 0DAD                         ??_OSCILLATOR_Initialize 0071  
       modbus_response_write_mult_register@rbuf 002F                                __size_of___aldiv 0082  
                              __size_of___awdiv 0051                                __size_of___lldiv 0053  
                              __size_of___lwdiv 0034                          ??_my_flash_system_read 0075  
                                      _adc_init 1CFD                                __size_of_crc_sum 0056  
                         pid_pwm2_vout_run@__ei 0022                             _eusartRxIdleTime_ms 007C  
                     __end_of_pid_pwm2_vout_run 15B0                                   crc_append@crc 002A  
                              sys_data_init@ret 0034                                 ___lwdiv@divisor 0071  
                               ___lwdiv@counter 0078                                        __ptext10 0AD8  
                                      __ptext11 1DDE                                        __ptext20 1113  
                                      __ptext12 1D5A                                        __ptext21 1668  
                                      __ptext13 0FAC                                        __ptext30 12AC  
                                      __ptext22 1099                                        __ptext14 0C4E  
                                      __ptext31 11A6                                        __ptext23 0EB3  
                                      __ptext15 130D                                        __ptext40 1CEA  
                                      __ptext32 08E4                                        __ptext24 1E33  
                                      __ptext16 1ECA                                        __ptext41 1C9B  
                                      __ptext33 1E64                                        __ptext25 102A  
                                      __ptext17 1401                                        __ptext42 1001  
                                      __ptext34 137F                                        __ptext26 1E16  
                                      __ptext18 1007                                        __ptext43 1D41  
                                      __ptext35 124F                                        __ptext27 11F9  
                                      __ptext19 1DC2                                        __ptext44 1D28  
                                      __ptext36 1D11                                        __ptext28 148F  
                                      __ptext45 10D4                                        __ptext37 1CFD  
                                      __ptext29 1727                                        __ptext46 0803  
                                      __ptext38 1D8C                                        __ptext47 1C9E  
                                      __ptext39 1CA2                                        __ptext48 1CD7  
                                      __ptext49 1CB6                          __end_of_calc_rs_lo_avg 130D  
                                 _uart_send_len 1099                           get_vout_pwm2_duty@t16 0075  
                                 __size_of_main 0111                                   _subTickerX_1s 0068  
                         set_vout_pwm2_duty@t16 0079                                      _RA4PPSbits 0E94  
                         ??_uart_received_start 0071                                      _RA5PPSbits 0E95  
                                      _txBufLen 0066                                ?_ADC1_Initialize 0070  
                my_flash_system_write@flashAddr 0027                                        int$flags 007E  
                                      crc_sum@i 0022                                        crc_sum@j 0020  
                                    _RC5PPSbits 0EA5   __end_of_modbus_response_write_single_register 0DA2  
__size_of_modbus_response_write_single_register 0154         ??_modbus_response_write_single_register 002C  
        ?_modbus_response_write_single_register 0070           _modbus_response_write_single_register 0C4E  
                             ??_TMR2_StartTimer 0071              __end_of_INTERRUPT_InterruptManager 088B  
                    _INTERRUPT_InterruptManager 0804                           __end_of_sys_data_init 1668  
                         __end_of_sys_data_save 1F00                               ?_FLASH_EraseBlock 0071  
                 calc_expect_vout_adc_value@t32 0042                     PIN_MANAGER_Initialize@state 0071  
                      modbus_response_command@i 0032                              ??_FLASH_EraseBlock 0073  
                                    _INTCONbits 000B                                     _PWM1CONbits 0D9B  
                              m_mem_cpy_len@len 0075                                      _FVRCONbits 0117  
                                   _PWM2CONbits 0DAB                                 ?_calc_rs_lo_avg 0025  
                  modbus_response_process@pmdbs 003C                         __size_of_WDT_Initialize 0004  
                                ?_uart_send_len 0078                                        intlevel1 0000  
                __size_of_my_flash_system_write 008E                            pid_pwm2_vout_run@t16 0024  
                 __end_of_my_flash_system_write 148F                      __size_of_pid_pwm1_idrv_run 0176  
                                    _PMCON1bits 0195                                ___lldiv@dividend 0075  
                       ?_PIN_MANAGER_Initialize 0070    modbus_response_write_mult_register@startAddr 002D  
                                   _PPSLOCKbits 0E0F                                 _PWM1_Initialize 1D28  
                  modbus_response_command@pmdbs 0033                         _modbus_response_command 1668  
                                    _PWM1CLKCON 0D9E                                      _PWM2CLKCON 0DAE  
                        __size_of_m_mem_cpy_len 001D                                   __pstringtext1 181E  
                                _FVR_Initialize 1C9E                         _modbus_response_process 0FAC  
                                sys_data_init@i 0036                                     crc_append@n 0028  
                          __end_of_calc_temp_rc 1800                            __end_of_calc_temp_rs 151F  
                              ___lldiv@quotient 0020                                ??_getRegisterVal 0074  
                               _PWM2_Initialize 1D41                      __size_of_pid_pwm2_vout_run 0091  
                                  ___aldiv@sign 002D                     calc_expect_vout_adc_value@i 0046  
                   calc_expect_vout_adc_value@x 0032             __size_of_calc_expect_vout_adc_value 01F4  
                __end_of_PIN_MANAGER_Initialize 1113                              _get_vout_pwm2_duty 1D73  
                            _set_vout_pwm2_duty 1DFA                           _TMR2_InterruptHandler 0061  
                                   crc_verify@n 0028                             ?_get_vout_pwm2_duty 0071  
                           ?_set_vout_pwm2_duty 0077  
