

Microchip Technology PIC PRO Macro Assembler V1.37 build -260352376 
                                                                                               Sat Nov 24 14:47:36 2018

Microchip Technology Omniscient Code Generator v1.37 (PRO mode) build 201603110536
     1                           	processor	16F1575
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	swtext1,local,class=CONST,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	text23,local,class=CODE,merge=1,delta=2
    27                           	psect	swtext2,local,class=CONST,delta=2
    28                           	psect	text32,local,class=CODE,merge=1,delta=2
    29                           	psect	text35,local,class=CODE,merge=1,delta=2
    30                           	psect	intentry,global,class=CODE,delta=2
    31                           	psect	pa_nodes,global,class=CODE,delta=2
    32                           	dabs	1,0x620,32
    33                           	dabs	1,0x5A0,80
    34                           	dabs	1,0x55C,20
    35                           	dabs	1,0xFFF,1,_isRunInBoot
    36                           	dabs	1,0x235C,0,_sysData
    37                           	dabs	1,0x7E,2
    38  0000                     	;# 
    39  0001                     	;# 
    40  0002                     	;# 
    41  0003                     	;# 
    42  0004                     	;# 
    43  0005                     	;# 
    44  0006                     	;# 
    45  0007                     	;# 
    46  0008                     	;# 
    47  0009                     	;# 
    48  000A                     	;# 
    49  000B                     	;# 
    50  000C                     	;# 
    51  000E                     	;# 
    52  0011                     	;# 
    53  0012                     	;# 
    54  0013                     	;# 
    55  0015                     	;# 
    56  0016                     	;# 
    57  0016                     	;# 
    58  0017                     	;# 
    59  0018                     	;# 
    60  0019                     	;# 
    61  001A                     	;# 
    62  001B                     	;# 
    63  001C                     	;# 
    64  008C                     	;# 
    65  008E                     	;# 
    66  0091                     	;# 
    67  0092                     	;# 
    68  0093                     	;# 
    69  0095                     	;# 
    70  0096                     	;# 
    71  0097                     	;# 
    72  0098                     	;# 
    73  0099                     	;# 
    74  009A                     	;# 
    75  009B                     	;# 
    76  009B                     	;# 
    77  009C                     	;# 
    78  009D                     	;# 
    79  009E                     	;# 
    80  009F                     	;# 
    81  010C                     	;# 
    82  010E                     	;# 
    83  0111                     	;# 
    84  0112                     	;# 
    85  0113                     	;# 
    86  0114                     	;# 
    87  0115                     	;# 
    88  0116                     	;# 
    89  0117                     	;# 
    90  0118                     	;# 
    91  0119                     	;# 
    92  018C                     	;# 
    93  018E                     	;# 
    94  0191                     	;# 
    95  0191                     	;# 
    96  0192                     	;# 
    97  0193                     	;# 
    98  0193                     	;# 
    99  0194                     	;# 
   100  0195                     	;# 
   101  0196                     	;# 
   102  0197                     	;# 
   103  0199                     	;# 
   104  019A                     	;# 
   105  019B                     	;# 
   106  019B                     	;# 
   107  019C                     	;# 
   108  019D                     	;# 
   109  019E                     	;# 
   110  019F                     	;# 
   111  020C                     	;# 
   112  020E                     	;# 
   113  028C                     	;# 
   114  028E                     	;# 
   115  030C                     	;# 
   116  030E                     	;# 
   117  038C                     	;# 
   118  038E                     	;# 
   119  0391                     	;# 
   120  0392                     	;# 
   121  0393                     	;# 
   122  0397                     	;# 
   123  0398                     	;# 
   124  0399                     	;# 
   125  0691                     	;# 
   126  0692                     	;# 
   127  0693                     	;# 
   128  0694                     	;# 
   129  0695                     	;# 
   130  0D8E                     	;# 
   131  0D8F                     	;# 
   132  0D90                     	;# 
   133  0D91                     	;# 
   134  0D91                     	;# 
   135  0D92                     	;# 
   136  0D93                     	;# 
   137  0D93                     	;# 
   138  0D94                     	;# 
   139  0D95                     	;# 
   140  0D95                     	;# 
   141  0D96                     	;# 
   142  0D97                     	;# 
   143  0D97                     	;# 
   144  0D98                     	;# 
   145  0D99                     	;# 
   146  0D99                     	;# 
   147  0D9A                     	;# 
   148  0D9B                     	;# 
   149  0D9C                     	;# 
   150  0D9C                     	;# 
   151  0D9D                     	;# 
   152  0D9D                     	;# 
   153  0D9E                     	;# 
   154  0D9F                     	;# 
   155  0DA0                     	;# 
   156  0DA1                     	;# 
   157  0DA1                     	;# 
   158  0DA2                     	;# 
   159  0DA3                     	;# 
   160  0DA3                     	;# 
   161  0DA4                     	;# 
   162  0DA5                     	;# 
   163  0DA5                     	;# 
   164  0DA6                     	;# 
   165  0DA7                     	;# 
   166  0DA7                     	;# 
   167  0DA8                     	;# 
   168  0DA9                     	;# 
   169  0DA9                     	;# 
   170  0DAA                     	;# 
   171  0DAB                     	;# 
   172  0DAC                     	;# 
   173  0DAC                     	;# 
   174  0DAD                     	;# 
   175  0DAD                     	;# 
   176  0DAE                     	;# 
   177  0DAF                     	;# 
   178  0DB0                     	;# 
   179  0DB1                     	;# 
   180  0DB1                     	;# 
   181  0DB2                     	;# 
   182  0DB3                     	;# 
   183  0DB3                     	;# 
   184  0DB4                     	;# 
   185  0DB5                     	;# 
   186  0DB5                     	;# 
   187  0DB6                     	;# 
   188  0DB7                     	;# 
   189  0DB7                     	;# 
   190  0DB8                     	;# 
   191  0DB9                     	;# 
   192  0DB9                     	;# 
   193  0DBA                     	;# 
   194  0DBB                     	;# 
   195  0DBC                     	;# 
   196  0DBC                     	;# 
   197  0DBD                     	;# 
   198  0DBD                     	;# 
   199  0DBE                     	;# 
   200  0DBF                     	;# 
   201  0DC0                     	;# 
   202  0DC1                     	;# 
   203  0DC1                     	;# 
   204  0DC2                     	;# 
   205  0DC3                     	;# 
   206  0DC3                     	;# 
   207  0DC4                     	;# 
   208  0DC5                     	;# 
   209  0DC5                     	;# 
   210  0DC6                     	;# 
   211  0DC7                     	;# 
   212  0DC7                     	;# 
   213  0DC8                     	;# 
   214  0DC9                     	;# 
   215  0DC9                     	;# 
   216  0DCA                     	;# 
   217  0DCB                     	;# 
   218  0DCC                     	;# 
   219  0DCC                     	;# 
   220  0DCD                     	;# 
   221  0DCD                     	;# 
   222  0DCE                     	;# 
   223  0DCF                     	;# 
   224  0DD0                     	;# 
   225  0E0F                     	;# 
   226  0E10                     	;# 
   227  0E11                     	;# 
   228  0E12                     	;# 
   229  0E13                     	;# 
   230  0E14                     	;# 
   231  0E15                     	;# 
   232  0E16                     	;# 
   233  0E17                     	;# 
   234  0E90                     	;# 
   235  0E91                     	;# 
   236  0E92                     	;# 
   237  0E94                     	;# 
   238  0E95                     	;# 
   239  0EA0                     	;# 
   240  0EA1                     	;# 
   241  0EA2                     	;# 
   242  0EA3                     	;# 
   243  0EA4                     	;# 
   244  0EA5                     	;# 
   245  0FE4                     	;# 
   246  0FE5                     	;# 
   247  0FE6                     	;# 
   248  0FE7                     	;# 
   249  0FE8                     	;# 
   250  0FE8                     	;# 
   251  0FE9                     	;# 
   252  0FEA                     	;# 
   253  0FEA                     	;# 
   254  0FEB                     	;# 
   255  0FED                     	;# 
   256  0FEE                     	;# 
   257  0FEE                     	;# 
   258  0FEF                     	;# 
   259  0000                     	;# 
   260  0001                     	;# 
   261  0002                     	;# 
   262  0003                     	;# 
   263  0004                     	;# 
   264  0005                     	;# 
   265  0006                     	;# 
   266  0007                     	;# 
   267  0008                     	;# 
   268  0009                     	;# 
   269  000A                     	;# 
   270  000B                     	;# 
   271  000C                     	;# 
   272  000E                     	;# 
   273  0011                     	;# 
   274  0012                     	;# 
   275  0013                     	;# 
   276  0015                     	;# 
   277  0016                     	;# 
   278  0016                     	;# 
   279  0017                     	;# 
   280  0018                     	;# 
   281  0019                     	;# 
   282  001A                     	;# 
   283  001B                     	;# 
   284  001C                     	;# 
   285  008C                     	;# 
   286  008E                     	;# 
   287  0091                     	;# 
   288  0092                     	;# 
   289  0093                     	;# 
   290  0095                     	;# 
   291  0096                     	;# 
   292  0097                     	;# 
   293  0098                     	;# 
   294  0099                     	;# 
   295  009A                     	;# 
   296  009B                     	;# 
   297  009B                     	;# 
   298  009C                     	;# 
   299  009D                     	;# 
   300  009E                     	;# 
   301  009F                     	;# 
   302  010C                     	;# 
   303  010E                     	;# 
   304  0111                     	;# 
   305  0112                     	;# 
   306  0113                     	;# 
   307  0114                     	;# 
   308  0115                     	;# 
   309  0116                     	;# 
   310  0117                     	;# 
   311  0118                     	;# 
   312  0119                     	;# 
   313  018C                     	;# 
   314  018E                     	;# 
   315  0191                     	;# 
   316  0191                     	;# 
   317  0192                     	;# 
   318  0193                     	;# 
   319  0193                     	;# 
   320  0194                     	;# 
   321  0195                     	;# 
   322  0196                     	;# 
   323  0197                     	;# 
   324  0199                     	;# 
   325  019A                     	;# 
   326  019B                     	;# 
   327  019B                     	;# 
   328  019C                     	;# 
   329  019D                     	;# 
   330  019E                     	;# 
   331  019F                     	;# 
   332  020C                     	;# 
   333  020E                     	;# 
   334  028C                     	;# 
   335  028E                     	;# 
   336  030C                     	;# 
   337  030E                     	;# 
   338  038C                     	;# 
   339  038E                     	;# 
   340  0391                     	;# 
   341  0392                     	;# 
   342  0393                     	;# 
   343  0397                     	;# 
   344  0398                     	;# 
   345  0399                     	;# 
   346  0691                     	;# 
   347  0692                     	;# 
   348  0693                     	;# 
   349  0694                     	;# 
   350  0695                     	;# 
   351  0D8E                     	;# 
   352  0D8F                     	;# 
   353  0D90                     	;# 
   354  0D91                     	;# 
   355  0D91                     	;# 
   356  0D92                     	;# 
   357  0D93                     	;# 
   358  0D93                     	;# 
   359  0D94                     	;# 
   360  0D95                     	;# 
   361  0D95                     	;# 
   362  0D96                     	;# 
   363  0D97                     	;# 
   364  0D97                     	;# 
   365  0D98                     	;# 
   366  0D99                     	;# 
   367  0D99                     	;# 
   368  0D9A                     	;# 
   369  0D9B                     	;# 
   370  0D9C                     	;# 
   371  0D9C                     	;# 
   372  0D9D                     	;# 
   373  0D9D                     	;# 
   374  0D9E                     	;# 
   375  0D9F                     	;# 
   376  0DA0                     	;# 
   377  0DA1                     	;# 
   378  0DA1                     	;# 
   379  0DA2                     	;# 
   380  0DA3                     	;# 
   381  0DA3                     	;# 
   382  0DA4                     	;# 
   383  0DA5                     	;# 
   384  0DA5                     	;# 
   385  0DA6                     	;# 
   386  0DA7                     	;# 
   387  0DA7                     	;# 
   388  0DA8                     	;# 
   389  0DA9                     	;# 
   390  0DA9                     	;# 
   391  0DAA                     	;# 
   392  0DAB                     	;# 
   393  0DAC                     	;# 
   394  0DAC                     	;# 
   395  0DAD                     	;# 
   396  0DAD                     	;# 
   397  0DAE                     	;# 
   398  0DAF                     	;# 
   399  0DB0                     	;# 
   400  0DB1                     	;# 
   401  0DB1                     	;# 
   402  0DB2                     	;# 
   403  0DB3                     	;# 
   404  0DB3                     	;# 
   405  0DB4                     	;# 
   406  0DB5                     	;# 
   407  0DB5                     	;# 
   408  0DB6                     	;# 
   409  0DB7                     	;# 
   410  0DB7                     	;# 
   411  0DB8                     	;# 
   412  0DB9                     	;# 
   413  0DB9                     	;# 
   414  0DBA                     	;# 
   415  0DBB                     	;# 
   416  0DBC                     	;# 
   417  0DBC                     	;# 
   418  0DBD                     	;# 
   419  0DBD                     	;# 
   420  0DBE                     	;# 
   421  0DBF                     	;# 
   422  0DC0                     	;# 
   423  0DC1                     	;# 
   424  0DC1                     	;# 
   425  0DC2                     	;# 
   426  0DC3                     	;# 
   427  0DC3                     	;# 
   428  0DC4                     	;# 
   429  0DC5                     	;# 
   430  0DC5                     	;# 
   431  0DC6                     	;# 
   432  0DC7                     	;# 
   433  0DC7                     	;# 
   434  0DC8                     	;# 
   435  0DC9                     	;# 
   436  0DC9                     	;# 
   437  0DCA                     	;# 
   438  0DCB                     	;# 
   439  0DCC                     	;# 
   440  0DCC                     	;# 
   441  0DCD                     	;# 
   442  0DCD                     	;# 
   443  0DCE                     	;# 
   444  0DCF                     	;# 
   445  0DD0                     	;# 
   446  0E0F                     	;# 
   447  0E10                     	;# 
   448  0E11                     	;# 
   449  0E12                     	;# 
   450  0E13                     	;# 
   451  0E14                     	;# 
   452  0E15                     	;# 
   453  0E16                     	;# 
   454  0E17                     	;# 
   455  0E90                     	;# 
   456  0E91                     	;# 
   457  0E92                     	;# 
   458  0E94                     	;# 
   459  0E95                     	;# 
   460  0EA0                     	;# 
   461  0EA1                     	;# 
   462  0EA2                     	;# 
   463  0EA3                     	;# 
   464  0EA4                     	;# 
   465  0EA5                     	;# 
   466  0FE4                     	;# 
   467  0FE5                     	;# 
   468  0FE6                     	;# 
   469  0FE7                     	;# 
   470  0FE8                     	;# 
   471  0FE8                     	;# 
   472  0FE9                     	;# 
   473  0FEA                     	;# 
   474  0FEA                     	;# 
   475  0FEB                     	;# 
   476  0FED                     	;# 
   477  0FEE                     	;# 
   478  0FEE                     	;# 
   479  0FEF                     	;# 
   480  0000                     	;# 
   481  0001                     	;# 
   482  0002                     	;# 
   483  0003                     	;# 
   484  0004                     	;# 
   485  0005                     	;# 
   486  0006                     	;# 
   487  0007                     	;# 
   488  0008                     	;# 
   489  0009                     	;# 
   490  000A                     	;# 
   491  000B                     	;# 
   492  000C                     	;# 
   493  000E                     	;# 
   494  0011                     	;# 
   495  0012                     	;# 
   496  0013                     	;# 
   497  0015                     	;# 
   498  0016                     	;# 
   499  0016                     	;# 
   500  0017                     	;# 
   501  0018                     	;# 
   502  0019                     	;# 
   503  001A                     	;# 
   504  001B                     	;# 
   505  001C                     	;# 
   506  008C                     	;# 
   507  008E                     	;# 
   508  0091                     	;# 
   509  0092                     	;# 
   510  0093                     	;# 
   511  0095                     	;# 
   512  0096                     	;# 
   513  0097                     	;# 
   514  0098                     	;# 
   515  0099                     	;# 
   516  009A                     	;# 
   517  009B                     	;# 
   518  009B                     	;# 
   519  009C                     	;# 
   520  009D                     	;# 
   521  009E                     	;# 
   522  009F                     	;# 
   523  010C                     	;# 
   524  010E                     	;# 
   525  0111                     	;# 
   526  0112                     	;# 
   527  0113                     	;# 
   528  0114                     	;# 
   529  0115                     	;# 
   530  0116                     	;# 
   531  0117                     	;# 
   532  0118                     	;# 
   533  0119                     	;# 
   534  018C                     	;# 
   535  018E                     	;# 
   536  0191                     	;# 
   537  0191                     	;# 
   538  0192                     	;# 
   539  0193                     	;# 
   540  0193                     	;# 
   541  0194                     	;# 
   542  0195                     	;# 
   543  0196                     	;# 
   544  0197                     	;# 
   545  0199                     	;# 
   546  019A                     	;# 
   547  019B                     	;# 
   548  019B                     	;# 
   549  019C                     	;# 
   550  019D                     	;# 
   551  019E                     	;# 
   552  019F                     	;# 
   553  020C                     	;# 
   554  020E                     	;# 
   555  028C                     	;# 
   556  028E                     	;# 
   557  030C                     	;# 
   558  030E                     	;# 
   559  038C                     	;# 
   560  038E                     	;# 
   561  0391                     	;# 
   562  0392                     	;# 
   563  0393                     	;# 
   564  0397                     	;# 
   565  0398                     	;# 
   566  0399                     	;# 
   567  0691                     	;# 
   568  0692                     	;# 
   569  0693                     	;# 
   570  0694                     	;# 
   571  0695                     	;# 
   572  0D8E                     	;# 
   573  0D8F                     	;# 
   574  0D90                     	;# 
   575  0D91                     	;# 
   576  0D91                     	;# 
   577  0D92                     	;# 
   578  0D93                     	;# 
   579  0D93                     	;# 
   580  0D94                     	;# 
   581  0D95                     	;# 
   582  0D95                     	;# 
   583  0D96                     	;# 
   584  0D97                     	;# 
   585  0D97                     	;# 
   586  0D98                     	;# 
   587  0D99                     	;# 
   588  0D99                     	;# 
   589  0D9A                     	;# 
   590  0D9B                     	;# 
   591  0D9C                     	;# 
   592  0D9C                     	;# 
   593  0D9D                     	;# 
   594  0D9D                     	;# 
   595  0D9E                     	;# 
   596  0D9F                     	;# 
   597  0DA0                     	;# 
   598  0DA1                     	;# 
   599  0DA1                     	;# 
   600  0DA2                     	;# 
   601  0DA3                     	;# 
   602  0DA3                     	;# 
   603  0DA4                     	;# 
   604  0DA5                     	;# 
   605  0DA5                     	;# 
   606  0DA6                     	;# 
   607  0DA7                     	;# 
   608  0DA7                     	;# 
   609  0DA8                     	;# 
   610  0DA9                     	;# 
   611  0DA9                     	;# 
   612  0DAA                     	;# 
   613  0DAB                     	;# 
   614  0DAC                     	;# 
   615  0DAC                     	;# 
   616  0DAD                     	;# 
   617  0DAD                     	;# 
   618  0DAE                     	;# 
   619  0DAF                     	;# 
   620  0DB0                     	;# 
   621  0DB1                     	;# 
   622  0DB1                     	;# 
   623  0DB2                     	;# 
   624  0DB3                     	;# 
   625  0DB3                     	;# 
   626  0DB4                     	;# 
   627  0DB5                     	;# 
   628  0DB5                     	;# 
   629  0DB6                     	;# 
   630  0DB7                     	;# 
   631  0DB7                     	;# 
   632  0DB8                     	;# 
   633  0DB9                     	;# 
   634  0DB9                     	;# 
   635  0DBA                     	;# 
   636  0DBB                     	;# 
   637  0DBC                     	;# 
   638  0DBC                     	;# 
   639  0DBD                     	;# 
   640  0DBD                     	;# 
   641  0DBE                     	;# 
   642  0DBF                     	;# 
   643  0DC0                     	;# 
   644  0DC1                     	;# 
   645  0DC1                     	;# 
   646  0DC2                     	;# 
   647  0DC3                     	;# 
   648  0DC3                     	;# 
   649  0DC4                     	;# 
   650  0DC5                     	;# 
   651  0DC5                     	;# 
   652  0DC6                     	;# 
   653  0DC7                     	;# 
   654  0DC7                     	;# 
   655  0DC8                     	;# 
   656  0DC9                     	;# 
   657  0DC9                     	;# 
   658  0DCA                     	;# 
   659  0DCB                     	;# 
   660  0DCC                     	;# 
   661  0DCC                     	;# 
   662  0DCD                     	;# 
   663  0DCD                     	;# 
   664  0DCE                     	;# 
   665  0DCF                     	;# 
   666  0DD0                     	;# 
   667  0E0F                     	;# 
   668  0E10                     	;# 
   669  0E11                     	;# 
   670  0E12                     	;# 
   671  0E13                     	;# 
   672  0E14                     	;# 
   673  0E15                     	;# 
   674  0E16                     	;# 
   675  0E17                     	;# 
   676  0E90                     	;# 
   677  0E91                     	;# 
   678  0E92                     	;# 
   679  0E94                     	;# 
   680  0E95                     	;# 
   681  0EA0                     	;# 
   682  0EA1                     	;# 
   683  0EA2                     	;# 
   684  0EA3                     	;# 
   685  0EA4                     	;# 
   686  0EA5                     	;# 
   687  0FE4                     	;# 
   688  0FE5                     	;# 
   689  0FE6                     	;# 
   690  0FE7                     	;# 
   691  0FE8                     	;# 
   692  0FE8                     	;# 
   693  0FE9                     	;# 
   694  0FEA                     	;# 
   695  0FEA                     	;# 
   696  0FEB                     	;# 
   697  0FED                     	;# 
   698  0FEE                     	;# 
   699  0FEE                     	;# 
   700  0FEF                     	;# 
   701  0000                     	;# 
   702  0001                     	;# 
   703  0002                     	;# 
   704  0003                     	;# 
   705  0004                     	;# 
   706  0005                     	;# 
   707  0006                     	;# 
   708  0007                     	;# 
   709  0008                     	;# 
   710  0009                     	;# 
   711  000A                     	;# 
   712  000B                     	;# 
   713  000C                     	;# 
   714  000E                     	;# 
   715  0011                     	;# 
   716  0012                     	;# 
   717  0013                     	;# 
   718  0015                     	;# 
   719  0016                     	;# 
   720  0016                     	;# 
   721  0017                     	;# 
   722  0018                     	;# 
   723  0019                     	;# 
   724  001A                     	;# 
   725  001B                     	;# 
   726  001C                     	;# 
   727  008C                     	;# 
   728  008E                     	;# 
   729  0091                     	;# 
   730  0092                     	;# 
   731  0093                     	;# 
   732  0095                     	;# 
   733  0096                     	;# 
   734  0097                     	;# 
   735  0098                     	;# 
   736  0099                     	;# 
   737  009A                     	;# 
   738  009B                     	;# 
   739  009B                     	;# 
   740  009C                     	;# 
   741  009D                     	;# 
   742  009E                     	;# 
   743  009F                     	;# 
   744  010C                     	;# 
   745  010E                     	;# 
   746  0111                     	;# 
   747  0112                     	;# 
   748  0113                     	;# 
   749  0114                     	;# 
   750  0115                     	;# 
   751  0116                     	;# 
   752  0117                     	;# 
   753  0118                     	;# 
   754  0119                     	;# 
   755  018C                     	;# 
   756  018E                     	;# 
   757  0191                     	;# 
   758  0191                     	;# 
   759  0192                     	;# 
   760  0193                     	;# 
   761  0193                     	;# 
   762  0194                     	;# 
   763  0195                     	;# 
   764  0196                     	;# 
   765  0197                     	;# 
   766  0199                     	;# 
   767  019A                     	;# 
   768  019B                     	;# 
   769  019B                     	;# 
   770  019C                     	;# 
   771  019D                     	;# 
   772  019E                     	;# 
   773  019F                     	;# 
   774  020C                     	;# 
   775  020E                     	;# 
   776  028C                     	;# 
   777  028E                     	;# 
   778  030C                     	;# 
   779  030E                     	;# 
   780  038C                     	;# 
   781  038E                     	;# 
   782  0391                     	;# 
   783  0392                     	;# 
   784  0393                     	;# 
   785  0397                     	;# 
   786  0398                     	;# 
   787  0399                     	;# 
   788  0691                     	;# 
   789  0692                     	;# 
   790  0693                     	;# 
   791  0694                     	;# 
   792  0695                     	;# 
   793  0D8E                     	;# 
   794  0D8F                     	;# 
   795  0D90                     	;# 
   796  0D91                     	;# 
   797  0D91                     	;# 
   798  0D92                     	;# 
   799  0D93                     	;# 
   800  0D93                     	;# 
   801  0D94                     	;# 
   802  0D95                     	;# 
   803  0D95                     	;# 
   804  0D96                     	;# 
   805  0D97                     	;# 
   806  0D97                     	;# 
   807  0D98                     	;# 
   808  0D99                     	;# 
   809  0D99                     	;# 
   810  0D9A                     	;# 
   811  0D9B                     	;# 
   812  0D9C                     	;# 
   813  0D9C                     	;# 
   814  0D9D                     	;# 
   815  0D9D                     	;# 
   816  0D9E                     	;# 
   817  0D9F                     	;# 
   818  0DA0                     	;# 
   819  0DA1                     	;# 
   820  0DA1                     	;# 
   821  0DA2                     	;# 
   822  0DA3                     	;# 
   823  0DA3                     	;# 
   824  0DA4                     	;# 
   825  0DA5                     	;# 
   826  0DA5                     	;# 
   827  0DA6                     	;# 
   828  0DA7                     	;# 
   829  0DA7                     	;# 
   830  0DA8                     	;# 
   831  0DA9                     	;# 
   832  0DA9                     	;# 
   833  0DAA                     	;# 
   834  0DAB                     	;# 
   835  0DAC                     	;# 
   836  0DAC                     	;# 
   837  0DAD                     	;# 
   838  0DAD                     	;# 
   839  0DAE                     	;# 
   840  0DAF                     	;# 
   841  0DB0                     	;# 
   842  0DB1                     	;# 
   843  0DB1                     	;# 
   844  0DB2                     	;# 
   845  0DB3                     	;# 
   846  0DB3                     	;# 
   847  0DB4                     	;# 
   848  0DB5                     	;# 
   849  0DB5                     	;# 
   850  0DB6                     	;# 
   851  0DB7                     	;# 
   852  0DB7                     	;# 
   853  0DB8                     	;# 
   854  0DB9                     	;# 
   855  0DB9                     	;# 
   856  0DBA                     	;# 
   857  0DBB                     	;# 
   858  0DBC                     	;# 
   859  0DBC                     	;# 
   860  0DBD                     	;# 
   861  0DBD                     	;# 
   862  0DBE                     	;# 
   863  0DBF                     	;# 
   864  0DC0                     	;# 
   865  0DC1                     	;# 
   866  0DC1                     	;# 
   867  0DC2                     	;# 
   868  0DC3                     	;# 
   869  0DC3                     	;# 
   870  0DC4                     	;# 
   871  0DC5                     	;# 
   872  0DC5                     	;# 
   873  0DC6                     	;# 
   874  0DC7                     	;# 
   875  0DC7                     	;# 
   876  0DC8                     	;# 
   877  0DC9                     	;# 
   878  0DC9                     	;# 
   879  0DCA                     	;# 
   880  0DCB                     	;# 
   881  0DCC                     	;# 
   882  0DCC                     	;# 
   883  0DCD                     	;# 
   884  0DCD                     	;# 
   885  0DCE                     	;# 
   886  0DCF                     	;# 
   887  0DD0                     	;# 
   888  0E0F                     	;# 
   889  0E10                     	;# 
   890  0E11                     	;# 
   891  0E12                     	;# 
   892  0E13                     	;# 
   893  0E14                     	;# 
   894  0E15                     	;# 
   895  0E16                     	;# 
   896  0E17                     	;# 
   897  0E90                     	;# 
   898  0E91                     	;# 
   899  0E92                     	;# 
   900  0E94                     	;# 
   901  0E95                     	;# 
   902  0EA0                     	;# 
   903  0EA1                     	;# 
   904  0EA2                     	;# 
   905  0EA3                     	;# 
   906  0EA4                     	;# 
   907  0EA5                     	;# 
   908  0FE4                     	;# 
   909  0FE5                     	;# 
   910  0FE6                     	;# 
   911  0FE7                     	;# 
   912  0FE8                     	;# 
   913  0FE8                     	;# 
   914  0FE9                     	;# 
   915  0FEA                     	;# 
   916  0FEA                     	;# 
   917  0FEB                     	;# 
   918  0FED                     	;# 
   919  0FEE                     	;# 
   920  0FEE                     	;# 
   921  0FEF                     	;# 
   922  0000                     	;# 
   923  0001                     	;# 
   924  0002                     	;# 
   925  0003                     	;# 
   926  0004                     	;# 
   927  0005                     	;# 
   928  0006                     	;# 
   929  0007                     	;# 
   930  0008                     	;# 
   931  0009                     	;# 
   932  000A                     	;# 
   933  000B                     	;# 
   934  000C                     	;# 
   935  000E                     	;# 
   936  0011                     	;# 
   937  0012                     	;# 
   938  0013                     	;# 
   939  0015                     	;# 
   940  0016                     	;# 
   941  0016                     	;# 
   942  0017                     	;# 
   943  0018                     	;# 
   944  0019                     	;# 
   945  001A                     	;# 
   946  001B                     	;# 
   947  001C                     	;# 
   948  008C                     	;# 
   949  008E                     	;# 
   950  0091                     	;# 
   951  0092                     	;# 
   952  0093                     	;# 
   953  0095                     	;# 
   954  0096                     	;# 
   955  0097                     	;# 
   956  0098                     	;# 
   957  0099                     	;# 
   958  009A                     	;# 
   959  009B                     	;# 
   960  009B                     	;# 
   961  009C                     	;# 
   962  009D                     	;# 
   963  009E                     	;# 
   964  009F                     	;# 
   965  010C                     	;# 
   966  010E                     	;# 
   967  0111                     	;# 
   968  0112                     	;# 
   969  0113                     	;# 
   970  0114                     	;# 
   971  0115                     	;# 
   972  0116                     	;# 
   973  0117                     	;# 
   974  0118                     	;# 
   975  0119                     	;# 
   976  018C                     	;# 
   977  018E                     	;# 
   978  0191                     	;# 
   979  0191                     	;# 
   980  0192                     	;# 
   981  0193                     	;# 
   982  0193                     	;# 
   983  0194                     	;# 
   984  0195                     	;# 
   985  0196                     	;# 
   986  0197                     	;# 
   987  0199                     	;# 
   988  019A                     	;# 
   989  019B                     	;# 
   990  019B                     	;# 
   991  019C                     	;# 
   992  019D                     	;# 
   993  019E                     	;# 
   994  019F                     	;# 
   995  020C                     	;# 
   996  020E                     	;# 
   997  028C                     	;# 
   998  028E                     	;# 
   999  030C                     	;# 
  1000  030E                     	;# 
  1001  038C                     	;# 
  1002  038E                     	;# 
  1003  0391                     	;# 
  1004  0392                     	;# 
  1005  0393                     	;# 
  1006  0397                     	;# 
  1007  0398                     	;# 
  1008  0399                     	;# 
  1009  0691                     	;# 
  1010  0692                     	;# 
  1011  0693                     	;# 
  1012  0694                     	;# 
  1013  0695                     	;# 
  1014  0D8E                     	;# 
  1015  0D8F                     	;# 
  1016  0D90                     	;# 
  1017  0D91                     	;# 
  1018  0D91                     	;# 
  1019  0D92                     	;# 
  1020  0D93                     	;# 
  1021  0D93                     	;# 
  1022  0D94                     	;# 
  1023  0D95                     	;# 
  1024  0D95                     	;# 
  1025  0D96                     	;# 
  1026  0D97                     	;# 
  1027  0D97                     	;# 
  1028  0D98                     	;# 
  1029  0D99                     	;# 
  1030  0D99                     	;# 
  1031  0D9A                     	;# 
  1032  0D9B                     	;# 
  1033  0D9C                     	;# 
  1034  0D9C                     	;# 
  1035  0D9D                     	;# 
  1036  0D9D                     	;# 
  1037  0D9E                     	;# 
  1038  0D9F                     	;# 
  1039  0DA0                     	;# 
  1040  0DA1                     	;# 
  1041  0DA1                     	;# 
  1042  0DA2                     	;# 
  1043  0DA3                     	;# 
  1044  0DA3                     	;# 
  1045  0DA4                     	;# 
  1046  0DA5                     	;# 
  1047  0DA5                     	;# 
  1048  0DA6                     	;# 
  1049  0DA7                     	;# 
  1050  0DA7                     	;# 
  1051  0DA8                     	;# 
  1052  0DA9                     	;# 
  1053  0DA9                     	;# 
  1054  0DAA                     	;# 
  1055  0DAB                     	;# 
  1056  0DAC                     	;# 
  1057  0DAC                     	;# 
  1058  0DAD                     	;# 
  1059  0DAD                     	;# 
  1060  0DAE                     	;# 
  1061  0DAF                     	;# 
  1062  0DB0                     	;# 
  1063  0DB1                     	;# 
  1064  0DB1                     	;# 
  1065  0DB2                     	;# 
  1066  0DB3                     	;# 
  1067  0DB3                     	;# 
  1068  0DB4                     	;# 
  1069  0DB5                     	;# 
  1070  0DB5                     	;# 
  1071  0DB6                     	;# 
  1072  0DB7                     	;# 
  1073  0DB7                     	;# 
  1074  0DB8                     	;# 
  1075  0DB9                     	;# 
  1076  0DB9                     	;# 
  1077  0DBA                     	;# 
  1078  0DBB                     	;# 
  1079  0DBC                     	;# 
  1080  0DBC                     	;# 
  1081  0DBD                     	;# 
  1082  0DBD                     	;# 
  1083  0DBE                     	;# 
  1084  0DBF                     	;# 
  1085  0DC0                     	;# 
  1086  0DC1                     	;# 
  1087  0DC1                     	;# 
  1088  0DC2                     	;# 
  1089  0DC3                     	;# 
  1090  0DC3                     	;# 
  1091  0DC4                     	;# 
  1092  0DC5                     	;# 
  1093  0DC5                     	;# 
  1094  0DC6                     	;# 
  1095  0DC7                     	;# 
  1096  0DC7                     	;# 
  1097  0DC8                     	;# 
  1098  0DC9                     	;# 
  1099  0DC9                     	;# 
  1100  0DCA                     	;# 
  1101  0DCB                     	;# 
  1102  0DCC                     	;# 
  1103  0DCC                     	;# 
  1104  0DCD                     	;# 
  1105  0DCD                     	;# 
  1106  0DCE                     	;# 
  1107  0DCF                     	;# 
  1108  0DD0                     	;# 
  1109  0E0F                     	;# 
  1110  0E10                     	;# 
  1111  0E11                     	;# 
  1112  0E12                     	;# 
  1113  0E13                     	;# 
  1114  0E14                     	;# 
  1115  0E15                     	;# 
  1116  0E16                     	;# 
  1117  0E17                     	;# 
  1118  0E90                     	;# 
  1119  0E91                     	;# 
  1120  0E92                     	;# 
  1121  0E94                     	;# 
  1122  0E95                     	;# 
  1123  0EA0                     	;# 
  1124  0EA1                     	;# 
  1125  0EA2                     	;# 
  1126  0EA3                     	;# 
  1127  0EA4                     	;# 
  1128  0EA5                     	;# 
  1129  0FE4                     	;# 
  1130  0FE5                     	;# 
  1131  0FE6                     	;# 
  1132  0FE7                     	;# 
  1133  0FE8                     	;# 
  1134  0FE8                     	;# 
  1135  0FE9                     	;# 
  1136  0FEA                     	;# 
  1137  0FEA                     	;# 
  1138  0FEB                     	;# 
  1139  0FED                     	;# 
  1140  0FEE                     	;# 
  1141  0FEE                     	;# 
  1142  0FEF                     	;# 
  1143  0FFF                     	;# 
  1144  0000                     	;# 
  1145  0001                     	;# 
  1146  0002                     	;# 
  1147  0003                     	;# 
  1148  0004                     	;# 
  1149  0005                     	;# 
  1150  0006                     	;# 
  1151  0007                     	;# 
  1152  0008                     	;# 
  1153  0009                     	;# 
  1154  000A                     	;# 
  1155  000B                     	;# 
  1156  000C                     	;# 
  1157  000E                     	;# 
  1158  0011                     	;# 
  1159  0012                     	;# 
  1160  0013                     	;# 
  1161  0015                     	;# 
  1162  0016                     	;# 
  1163  0016                     	;# 
  1164  0017                     	;# 
  1165  0018                     	;# 
  1166  0019                     	;# 
  1167  001A                     	;# 
  1168  001B                     	;# 
  1169  001C                     	;# 
  1170  008C                     	;# 
  1171  008E                     	;# 
  1172  0091                     	;# 
  1173  0092                     	;# 
  1174  0093                     	;# 
  1175  0095                     	;# 
  1176  0096                     	;# 
  1177  0097                     	;# 
  1178  0098                     	;# 
  1179  0099                     	;# 
  1180  009A                     	;# 
  1181  009B                     	;# 
  1182  009B                     	;# 
  1183  009C                     	;# 
  1184  009D                     	;# 
  1185  009E                     	;# 
  1186  009F                     	;# 
  1187  010C                     	;# 
  1188  010E                     	;# 
  1189  0111                     	;# 
  1190  0112                     	;# 
  1191  0113                     	;# 
  1192  0114                     	;# 
  1193  0115                     	;# 
  1194  0116                     	;# 
  1195  0117                     	;# 
  1196  0118                     	;# 
  1197  0119                     	;# 
  1198  018C                     	;# 
  1199  018E                     	;# 
  1200  0191                     	;# 
  1201  0191                     	;# 
  1202  0192                     	;# 
  1203  0193                     	;# 
  1204  0193                     	;# 
  1205  0194                     	;# 
  1206  0195                     	;# 
  1207  0196                     	;# 
  1208  0197                     	;# 
  1209  0199                     	;# 
  1210  019A                     	;# 
  1211  019B                     	;# 
  1212  019B                     	;# 
  1213  019C                     	;# 
  1214  019D                     	;# 
  1215  019E                     	;# 
  1216  019F                     	;# 
  1217  020C                     	;# 
  1218  020E                     	;# 
  1219  028C                     	;# 
  1220  028E                     	;# 
  1221  030C                     	;# 
  1222  030E                     	;# 
  1223  038C                     	;# 
  1224  038E                     	;# 
  1225  0391                     	;# 
  1226  0392                     	;# 
  1227  0393                     	;# 
  1228  0397                     	;# 
  1229  0398                     	;# 
  1230  0399                     	;# 
  1231  0691                     	;# 
  1232  0692                     	;# 
  1233  0693                     	;# 
  1234  0694                     	;# 
  1235  0695                     	;# 
  1236  0D8E                     	;# 
  1237  0D8F                     	;# 
  1238  0D90                     	;# 
  1239  0D91                     	;# 
  1240  0D91                     	;# 
  1241  0D92                     	;# 
  1242  0D93                     	;# 
  1243  0D93                     	;# 
  1244  0D94                     	;# 
  1245  0D95                     	;# 
  1246  0D95                     	;# 
  1247  0D96                     	;# 
  1248  0D97                     	;# 
  1249  0D97                     	;# 
  1250  0D98                     	;# 
  1251  0D99                     	;# 
  1252  0D99                     	;# 
  1253  0D9A                     	;# 
  1254  0D9B                     	;# 
  1255  0D9C                     	;# 
  1256  0D9C                     	;# 
  1257  0D9D                     	;# 
  1258  0D9D                     	;# 
  1259  0D9E                     	;# 
  1260  0D9F                     	;# 
  1261  0DA0                     	;# 
  1262  0DA1                     	;# 
  1263  0DA1                     	;# 
  1264  0DA2                     	;# 
  1265  0DA3                     	;# 
  1266  0DA3                     	;# 
  1267  0DA4                     	;# 
  1268  0DA5                     	;# 
  1269  0DA5                     	;# 
  1270  0DA6                     	;# 
  1271  0DA7                     	;# 
  1272  0DA7                     	;# 
  1273  0DA8                     	;# 
  1274  0DA9                     	;# 
  1275  0DA9                     	;# 
  1276  0DAA                     	;# 
  1277  0DAB                     	;# 
  1278  0DAC                     	;# 
  1279  0DAC                     	;# 
  1280  0DAD                     	;# 
  1281  0DAD                     	;# 
  1282  0DAE                     	;# 
  1283  0DAF                     	;# 
  1284  0DB0                     	;# 
  1285  0DB1                     	;# 
  1286  0DB1                     	;# 
  1287  0DB2                     	;# 
  1288  0DB3                     	;# 
  1289  0DB3                     	;# 
  1290  0DB4                     	;# 
  1291  0DB5                     	;# 
  1292  0DB5                     	;# 
  1293  0DB6                     	;# 
  1294  0DB7                     	;# 
  1295  0DB7                     	;# 
  1296  0DB8                     	;# 
  1297  0DB9                     	;# 
  1298  0DB9                     	;# 
  1299  0DBA                     	;# 
  1300  0DBB                     	;# 
  1301  0DBC                     	;# 
  1302  0DBC                     	;# 
  1303  0DBD                     	;# 
  1304  0DBD                     	;# 
  1305  0DBE                     	;# 
  1306  0DBF                     	;# 
  1307  0DC0                     	;# 
  1308  0DC1                     	;# 
  1309  0DC1                     	;# 
  1310  0DC2                     	;# 
  1311  0DC3                     	;# 
  1312  0DC3                     	;# 
  1313  0DC4                     	;# 
  1314  0DC5                     	;# 
  1315  0DC5                     	;# 
  1316  0DC6                     	;# 
  1317  0DC7                     	;# 
  1318  0DC7                     	;# 
  1319  0DC8                     	;# 
  1320  0DC9                     	;# 
  1321  0DC9                     	;# 
  1322  0DCA                     	;# 
  1323  0DCB                     	;# 
  1324  0DCC                     	;# 
  1325  0DCC                     	;# 
  1326  0DCD                     	;# 
  1327  0DCD                     	;# 
  1328  0DCE                     	;# 
  1329  0DCF                     	;# 
  1330  0DD0                     	;# 
  1331  0E0F                     	;# 
  1332  0E10                     	;# 
  1333  0E11                     	;# 
  1334  0E12                     	;# 
  1335  0E13                     	;# 
  1336  0E14                     	;# 
  1337  0E15                     	;# 
  1338  0E16                     	;# 
  1339  0E17                     	;# 
  1340  0E90                     	;# 
  1341  0E91                     	;# 
  1342  0E92                     	;# 
  1343  0E94                     	;# 
  1344  0E95                     	;# 
  1345  0EA0                     	;# 
  1346  0EA1                     	;# 
  1347  0EA2                     	;# 
  1348  0EA3                     	;# 
  1349  0EA4                     	;# 
  1350  0EA5                     	;# 
  1351  0FE4                     	;# 
  1352  0FE5                     	;# 
  1353  0FE6                     	;# 
  1354  0FE7                     	;# 
  1355  0FE8                     	;# 
  1356  0FE8                     	;# 
  1357  0FE9                     	;# 
  1358  0FEA                     	;# 
  1359  0FEA                     	;# 
  1360  0FEB                     	;# 
  1361  0FED                     	;# 
  1362  0FEE                     	;# 
  1363  0FEE                     	;# 
  1364  0FEF                     	;# 
  1365  0000                     	;# 
  1366  0001                     	;# 
  1367  0002                     	;# 
  1368  0003                     	;# 
  1369  0004                     	;# 
  1370  0005                     	;# 
  1371  0006                     	;# 
  1372  0007                     	;# 
  1373  0008                     	;# 
  1374  0009                     	;# 
  1375  000A                     	;# 
  1376  000B                     	;# 
  1377  000C                     	;# 
  1378  000E                     	;# 
  1379  0011                     	;# 
  1380  0012                     	;# 
  1381  0013                     	;# 
  1382  0015                     	;# 
  1383  0016                     	;# 
  1384  0016                     	;# 
  1385  0017                     	;# 
  1386  0018                     	;# 
  1387  0019                     	;# 
  1388  001A                     	;# 
  1389  001B                     	;# 
  1390  001C                     	;# 
  1391  008C                     	;# 
  1392  008E                     	;# 
  1393  0091                     	;# 
  1394  0092                     	;# 
  1395  0093                     	;# 
  1396  0095                     	;# 
  1397  0096                     	;# 
  1398  0097                     	;# 
  1399  0098                     	;# 
  1400  0099                     	;# 
  1401  009A                     	;# 
  1402  009B                     	;# 
  1403  009B                     	;# 
  1404  009C                     	;# 
  1405  009D                     	;# 
  1406  009E                     	;# 
  1407  009F                     	;# 
  1408  010C                     	;# 
  1409  010E                     	;# 
  1410  0111                     	;# 
  1411  0112                     	;# 
  1412  0113                     	;# 
  1413  0114                     	;# 
  1414  0115                     	;# 
  1415  0116                     	;# 
  1416  0117                     	;# 
  1417  0118                     	;# 
  1418  0119                     	;# 
  1419  018C                     	;# 
  1420  018E                     	;# 
  1421  0191                     	;# 
  1422  0191                     	;# 
  1423  0192                     	;# 
  1424  0193                     	;# 
  1425  0193                     	;# 
  1426  0194                     	;# 
  1427  0195                     	;# 
  1428  0196                     	;# 
  1429  0197                     	;# 
  1430  0199                     	;# 
  1431  019A                     	;# 
  1432  019B                     	;# 
  1433  019B                     	;# 
  1434  019C                     	;# 
  1435  019D                     	;# 
  1436  019E                     	;# 
  1437  019F                     	;# 
  1438  020C                     	;# 
  1439  020E                     	;# 
  1440  028C                     	;# 
  1441  028E                     	;# 
  1442  030C                     	;# 
  1443  030E                     	;# 
  1444  038C                     	;# 
  1445  038E                     	;# 
  1446  0391                     	;# 
  1447  0392                     	;# 
  1448  0393                     	;# 
  1449  0397                     	;# 
  1450  0398                     	;# 
  1451  0399                     	;# 
  1452  0691                     	;# 
  1453  0692                     	;# 
  1454  0693                     	;# 
  1455  0694                     	;# 
  1456  0695                     	;# 
  1457  0D8E                     	;# 
  1458  0D8F                     	;# 
  1459  0D90                     	;# 
  1460  0D91                     	;# 
  1461  0D91                     	;# 
  1462  0D92                     	;# 
  1463  0D93                     	;# 
  1464  0D93                     	;# 
  1465  0D94                     	;# 
  1466  0D95                     	;# 
  1467  0D95                     	;# 
  1468  0D96                     	;# 
  1469  0D97                     	;# 
  1470  0D97                     	;# 
  1471  0D98                     	;# 
  1472  0D99                     	;# 
  1473  0D99                     	;# 
  1474  0D9A                     	;# 
  1475  0D9B                     	;# 
  1476  0D9C                     	;# 
  1477  0D9C                     	;# 
  1478  0D9D                     	;# 
  1479  0D9D                     	;# 
  1480  0D9E                     	;# 
  1481  0D9F                     	;# 
  1482  0DA0                     	;# 
  1483  0DA1                     	;# 
  1484  0DA1                     	;# 
  1485  0DA2                     	;# 
  1486  0DA3                     	;# 
  1487  0DA3                     	;# 
  1488  0DA4                     	;# 
  1489  0DA5                     	;# 
  1490  0DA5                     	;# 
  1491  0DA6                     	;# 
  1492  0DA7                     	;# 
  1493  0DA7                     	;# 
  1494  0DA8                     	;# 
  1495  0DA9                     	;# 
  1496  0DA9                     	;# 
  1497  0DAA                     	;# 
  1498  0DAB                     	;# 
  1499  0DAC                     	;# 
  1500  0DAC                     	;# 
  1501  0DAD                     	;# 
  1502  0DAD                     	;# 
  1503  0DAE                     	;# 
  1504  0DAF                     	;# 
  1505  0DB0                     	;# 
  1506  0DB1                     	;# 
  1507  0DB1                     	;# 
  1508  0DB2                     	;# 
  1509  0DB3                     	;# 
  1510  0DB3                     	;# 
  1511  0DB4                     	;# 
  1512  0DB5                     	;# 
  1513  0DB5                     	;# 
  1514  0DB6                     	;# 
  1515  0DB7                     	;# 
  1516  0DB7                     	;# 
  1517  0DB8                     	;# 
  1518  0DB9                     	;# 
  1519  0DB9                     	;# 
  1520  0DBA                     	;# 
  1521  0DBB                     	;# 
  1522  0DBC                     	;# 
  1523  0DBC                     	;# 
  1524  0DBD                     	;# 
  1525  0DBD                     	;# 
  1526  0DBE                     	;# 
  1527  0DBF                     	;# 
  1528  0DC0                     	;# 
  1529  0DC1                     	;# 
  1530  0DC1                     	;# 
  1531  0DC2                     	;# 
  1532  0DC3                     	;# 
  1533  0DC3                     	;# 
  1534  0DC4                     	;# 
  1535  0DC5                     	;# 
  1536  0DC5                     	;# 
  1537  0DC6                     	;# 
  1538  0DC7                     	;# 
  1539  0DC7                     	;# 
  1540  0DC8                     	;# 
  1541  0DC9                     	;# 
  1542  0DC9                     	;# 
  1543  0DCA                     	;# 
  1544  0DCB                     	;# 
  1545  0DCC                     	;# 
  1546  0DCC                     	;# 
  1547  0DCD                     	;# 
  1548  0DCD                     	;# 
  1549  0DCE                     	;# 
  1550  0DCF                     	;# 
  1551  0DD0                     	;# 
  1552  0E0F                     	;# 
  1553  0E10                     	;# 
  1554  0E11                     	;# 
  1555  0E12                     	;# 
  1556  0E13                     	;# 
  1557  0E14                     	;# 
  1558  0E15                     	;# 
  1559  0E16                     	;# 
  1560  0E17                     	;# 
  1561  0E90                     	;# 
  1562  0E91                     	;# 
  1563  0E92                     	;# 
  1564  0E94                     	;# 
  1565  0E95                     	;# 
  1566  0EA0                     	;# 
  1567  0EA1                     	;# 
  1568  0EA2                     	;# 
  1569  0EA3                     	;# 
  1570  0EA4                     	;# 
  1571  0EA5                     	;# 
  1572  0FE4                     	;# 
  1573  0FE5                     	;# 
  1574  0FE6                     	;# 
  1575  0FE7                     	;# 
  1576  0FE8                     	;# 
  1577  0FE8                     	;# 
  1578  0FE9                     	;# 
  1579  0FEA                     	;# 
  1580  0FEA                     	;# 
  1581  0FEB                     	;# 
  1582  0FED                     	;# 
  1583  0FEE                     	;# 
  1584  0FEE                     	;# 
  1585  0FEF                     	;# 
  1586  0000                     	;# 
  1587  0001                     	;# 
  1588  0002                     	;# 
  1589  0003                     	;# 
  1590  0004                     	;# 
  1591  0005                     	;# 
  1592  0006                     	;# 
  1593  0007                     	;# 
  1594  0008                     	;# 
  1595  0009                     	;# 
  1596  000A                     	;# 
  1597  000B                     	;# 
  1598  000C                     	;# 
  1599  000E                     	;# 
  1600  0011                     	;# 
  1601  0012                     	;# 
  1602  0013                     	;# 
  1603  0015                     	;# 
  1604  0016                     	;# 
  1605  0016                     	;# 
  1606  0017                     	;# 
  1607  0018                     	;# 
  1608  0019                     	;# 
  1609  001A                     	;# 
  1610  001B                     	;# 
  1611  001C                     	;# 
  1612  008C                     	;# 
  1613  008E                     	;# 
  1614  0091                     	;# 
  1615  0092                     	;# 
  1616  0093                     	;# 
  1617  0095                     	;# 
  1618  0096                     	;# 
  1619  0097                     	;# 
  1620  0098                     	;# 
  1621  0099                     	;# 
  1622  009A                     	;# 
  1623  009B                     	;# 
  1624  009B                     	;# 
  1625  009C                     	;# 
  1626  009D                     	;# 
  1627  009E                     	;# 
  1628  009F                     	;# 
  1629  010C                     	;# 
  1630  010E                     	;# 
  1631  0111                     	;# 
  1632  0112                     	;# 
  1633  0113                     	;# 
  1634  0114                     	;# 
  1635  0115                     	;# 
  1636  0116                     	;# 
  1637  0117                     	;# 
  1638  0118                     	;# 
  1639  0119                     	;# 
  1640  018C                     	;# 
  1641  018E                     	;# 
  1642  0191                     	;# 
  1643  0191                     	;# 
  1644  0192                     	;# 
  1645  0193                     	;# 
  1646  0193                     	;# 
  1647  0194                     	;# 
  1648  0195                     	;# 
  1649  0196                     	;# 
  1650  0197                     	;# 
  1651  0199                     	;# 
  1652  019A                     	;# 
  1653  019B                     	;# 
  1654  019B                     	;# 
  1655  019C                     	;# 
  1656  019D                     	;# 
  1657  019E                     	;# 
  1658  019F                     	;# 
  1659  020C                     	;# 
  1660  020E                     	;# 
  1661  028C                     	;# 
  1662  028E                     	;# 
  1663  030C                     	;# 
  1664  030E                     	;# 
  1665  038C                     	;# 
  1666  038E                     	;# 
  1667  0391                     	;# 
  1668  0392                     	;# 
  1669  0393                     	;# 
  1670  0397                     	;# 
  1671  0398                     	;# 
  1672  0399                     	;# 
  1673  0691                     	;# 
  1674  0692                     	;# 
  1675  0693                     	;# 
  1676  0694                     	;# 
  1677  0695                     	;# 
  1678  0D8E                     	;# 
  1679  0D8F                     	;# 
  1680  0D90                     	;# 
  1681  0D91                     	;# 
  1682  0D91                     	;# 
  1683  0D92                     	;# 
  1684  0D93                     	;# 
  1685  0D93                     	;# 
  1686  0D94                     	;# 
  1687  0D95                     	;# 
  1688  0D95                     	;# 
  1689  0D96                     	;# 
  1690  0D97                     	;# 
  1691  0D97                     	;# 
  1692  0D98                     	;# 
  1693  0D99                     	;# 
  1694  0D99                     	;# 
  1695  0D9A                     	;# 
  1696  0D9B                     	;# 
  1697  0D9C                     	;# 
  1698  0D9C                     	;# 
  1699  0D9D                     	;# 
  1700  0D9D                     	;# 
  1701  0D9E                     	;# 
  1702  0D9F                     	;# 
  1703  0DA0                     	;# 
  1704  0DA1                     	;# 
  1705  0DA1                     	;# 
  1706  0DA2                     	;# 
  1707  0DA3                     	;# 
  1708  0DA3                     	;# 
  1709  0DA4                     	;# 
  1710  0DA5                     	;# 
  1711  0DA5                     	;# 
  1712  0DA6                     	;# 
  1713  0DA7                     	;# 
  1714  0DA7                     	;# 
  1715  0DA8                     	;# 
  1716  0DA9                     	;# 
  1717  0DA9                     	;# 
  1718  0DAA                     	;# 
  1719  0DAB                     	;# 
  1720  0DAC                     	;# 
  1721  0DAC                     	;# 
  1722  0DAD                     	;# 
  1723  0DAD                     	;# 
  1724  0DAE                     	;# 
  1725  0DAF                     	;# 
  1726  0DB0                     	;# 
  1727  0DB1                     	;# 
  1728  0DB1                     	;# 
  1729  0DB2                     	;# 
  1730  0DB3                     	;# 
  1731  0DB3                     	;# 
  1732  0DB4                     	;# 
  1733  0DB5                     	;# 
  1734  0DB5                     	;# 
  1735  0DB6                     	;# 
  1736  0DB7                     	;# 
  1737  0DB7                     	;# 
  1738  0DB8                     	;# 
  1739  0DB9                     	;# 
  1740  0DB9                     	;# 
  1741  0DBA                     	;# 
  1742  0DBB                     	;# 
  1743  0DBC                     	;# 
  1744  0DBC                     	;# 
  1745  0DBD                     	;# 
  1746  0DBD                     	;# 
  1747  0DBE                     	;# 
  1748  0DBF                     	;# 
  1749  0DC0                     	;# 
  1750  0DC1                     	;# 
  1751  0DC1                     	;# 
  1752  0DC2                     	;# 
  1753  0DC3                     	;# 
  1754  0DC3                     	;# 
  1755  0DC4                     	;# 
  1756  0DC5                     	;# 
  1757  0DC5                     	;# 
  1758  0DC6                     	;# 
  1759  0DC7                     	;# 
  1760  0DC7                     	;# 
  1761  0DC8                     	;# 
  1762  0DC9                     	;# 
  1763  0DC9                     	;# 
  1764  0DCA                     	;# 
  1765  0DCB                     	;# 
  1766  0DCC                     	;# 
  1767  0DCC                     	;# 
  1768  0DCD                     	;# 
  1769  0DCD                     	;# 
  1770  0DCE                     	;# 
  1771  0DCF                     	;# 
  1772  0DD0                     	;# 
  1773  0E0F                     	;# 
  1774  0E10                     	;# 
  1775  0E11                     	;# 
  1776  0E12                     	;# 
  1777  0E13                     	;# 
  1778  0E14                     	;# 
  1779  0E15                     	;# 
  1780  0E16                     	;# 
  1781  0E17                     	;# 
  1782  0E90                     	;# 
  1783  0E91                     	;# 
  1784  0E92                     	;# 
  1785  0E94                     	;# 
  1786  0E95                     	;# 
  1787  0EA0                     	;# 
  1788  0EA1                     	;# 
  1789  0EA2                     	;# 
  1790  0EA3                     	;# 
  1791  0EA4                     	;# 
  1792  0EA5                     	;# 
  1793  0FE4                     	;# 
  1794  0FE5                     	;# 
  1795  0FE6                     	;# 
  1796  0FE7                     	;# 
  1797  0FE8                     	;# 
  1798  0FE8                     	;# 
  1799  0FE9                     	;# 
  1800  0FEA                     	;# 
  1801  0FEA                     	;# 
  1802  0FEB                     	;# 
  1803  0FED                     	;# 
  1804  0FEE                     	;# 
  1805  0FEE                     	;# 
  1806  0FEF                     	;# 
  1807  0000                     	;# 
  1808  0001                     	;# 
  1809  0002                     	;# 
  1810  0003                     	;# 
  1811  0004                     	;# 
  1812  0005                     	;# 
  1813  0006                     	;# 
  1814  0007                     	;# 
  1815  0008                     	;# 
  1816  0009                     	;# 
  1817  000A                     	;# 
  1818  000B                     	;# 
  1819  000C                     	;# 
  1820  000E                     	;# 
  1821  0011                     	;# 
  1822  0012                     	;# 
  1823  0013                     	;# 
  1824  0015                     	;# 
  1825  0016                     	;# 
  1826  0016                     	;# 
  1827  0017                     	;# 
  1828  0018                     	;# 
  1829  0019                     	;# 
  1830  001A                     	;# 
  1831  001B                     	;# 
  1832  001C                     	;# 
  1833  008C                     	;# 
  1834  008E                     	;# 
  1835  0091                     	;# 
  1836  0092                     	;# 
  1837  0093                     	;# 
  1838  0095                     	;# 
  1839  0096                     	;# 
  1840  0097                     	;# 
  1841  0098                     	;# 
  1842  0099                     	;# 
  1843  009A                     	;# 
  1844  009B                     	;# 
  1845  009B                     	;# 
  1846  009C                     	;# 
  1847  009D                     	;# 
  1848  009E                     	;# 
  1849  009F                     	;# 
  1850  010C                     	;# 
  1851  010E                     	;# 
  1852  0111                     	;# 
  1853  0112                     	;# 
  1854  0113                     	;# 
  1855  0114                     	;# 
  1856  0115                     	;# 
  1857  0116                     	;# 
  1858  0117                     	;# 
  1859  0118                     	;# 
  1860  0119                     	;# 
  1861  018C                     	;# 
  1862  018E                     	;# 
  1863  0191                     	;# 
  1864  0191                     	;# 
  1865  0192                     	;# 
  1866  0193                     	;# 
  1867  0193                     	;# 
  1868  0194                     	;# 
  1869  0195                     	;# 
  1870  0196                     	;# 
  1871  0197                     	;# 
  1872  0199                     	;# 
  1873  019A                     	;# 
  1874  019B                     	;# 
  1875  019B                     	;# 
  1876  019C                     	;# 
  1877  019D                     	;# 
  1878  019E                     	;# 
  1879  019F                     	;# 
  1880  020C                     	;# 
  1881  020E                     	;# 
  1882  028C                     	;# 
  1883  028E                     	;# 
  1884  030C                     	;# 
  1885  030E                     	;# 
  1886  038C                     	;# 
  1887  038E                     	;# 
  1888  0391                     	;# 
  1889  0392                     	;# 
  1890  0393                     	;# 
  1891  0397                     	;# 
  1892  0398                     	;# 
  1893  0399                     	;# 
  1894  0691                     	;# 
  1895  0692                     	;# 
  1896  0693                     	;# 
  1897  0694                     	;# 
  1898  0695                     	;# 
  1899  0D8E                     	;# 
  1900  0D8F                     	;# 
  1901  0D90                     	;# 
  1902  0D91                     	;# 
  1903  0D91                     	;# 
  1904  0D92                     	;# 
  1905  0D93                     	;# 
  1906  0D93                     	;# 
  1907  0D94                     	;# 
  1908  0D95                     	;# 
  1909  0D95                     	;# 
  1910  0D96                     	;# 
  1911  0D97                     	;# 
  1912  0D97                     	;# 
  1913  0D98                     	;# 
  1914  0D99                     	;# 
  1915  0D99                     	;# 
  1916  0D9A                     	;# 
  1917  0D9B                     	;# 
  1918  0D9C                     	;# 
  1919  0D9C                     	;# 
  1920  0D9D                     	;# 
  1921  0D9D                     	;# 
  1922  0D9E                     	;# 
  1923  0D9F                     	;# 
  1924  0DA0                     	;# 
  1925  0DA1                     	;# 
  1926  0DA1                     	;# 
  1927  0DA2                     	;# 
  1928  0DA3                     	;# 
  1929  0DA3                     	;# 
  1930  0DA4                     	;# 
  1931  0DA5                     	;# 
  1932  0DA5                     	;# 
  1933  0DA6                     	;# 
  1934  0DA7                     	;# 
  1935  0DA7                     	;# 
  1936  0DA8                     	;# 
  1937  0DA9                     	;# 
  1938  0DA9                     	;# 
  1939  0DAA                     	;# 
  1940  0DAB                     	;# 
  1941  0DAC                     	;# 
  1942  0DAC                     	;# 
  1943  0DAD                     	;# 
  1944  0DAD                     	;# 
  1945  0DAE                     	;# 
  1946  0DAF                     	;# 
  1947  0DB0                     	;# 
  1948  0DB1                     	;# 
  1949  0DB1                     	;# 
  1950  0DB2                     	;# 
  1951  0DB3                     	;# 
  1952  0DB3                     	;# 
  1953  0DB4                     	;# 
  1954  0DB5                     	;# 
  1955  0DB5                     	;# 
  1956  0DB6                     	;# 
  1957  0DB7                     	;# 
  1958  0DB7                     	;# 
  1959  0DB8                     	;# 
  1960  0DB9                     	;# 
  1961  0DB9                     	;# 
  1962  0DBA                     	;# 
  1963  0DBB                     	;# 
  1964  0DBC                     	;# 
  1965  0DBC                     	;# 
  1966  0DBD                     	;# 
  1967  0DBD                     	;# 
  1968  0DBE                     	;# 
  1969  0DBF                     	;# 
  1970  0DC0                     	;# 
  1971  0DC1                     	;# 
  1972  0DC1                     	;# 
  1973  0DC2                     	;# 
  1974  0DC3                     	;# 
  1975  0DC3                     	;# 
  1976  0DC4                     	;# 
  1977  0DC5                     	;# 
  1978  0DC5                     	;# 
  1979  0DC6                     	;# 
  1980  0DC7                     	;# 
  1981  0DC7                     	;# 
  1982  0DC8                     	;# 
  1983  0DC9                     	;# 
  1984  0DC9                     	;# 
  1985  0DCA                     	;# 
  1986  0DCB                     	;# 
  1987  0DCC                     	;# 
  1988  0DCC                     	;# 
  1989  0DCD                     	;# 
  1990  0DCD                     	;# 
  1991  0DCE                     	;# 
  1992  0DCF                     	;# 
  1993  0DD0                     	;# 
  1994  0E0F                     	;# 
  1995  0E10                     	;# 
  1996  0E11                     	;# 
  1997  0E12                     	;# 
  1998  0E13                     	;# 
  1999  0E14                     	;# 
  2000  0E15                     	;# 
  2001  0E16                     	;# 
  2002  0E17                     	;# 
  2003  0E90                     	;# 
  2004  0E91                     	;# 
  2005  0E92                     	;# 
  2006  0E94                     	;# 
  2007  0E95                     	;# 
  2008  0EA0                     	;# 
  2009  0EA1                     	;# 
  2010  0EA2                     	;# 
  2011  0EA3                     	;# 
  2012  0EA4                     	;# 
  2013  0EA5                     	;# 
  2014  0FE4                     	;# 
  2015  0FE5                     	;# 
  2016  0FE6                     	;# 
  2017  0FE7                     	;# 
  2018  0FE8                     	;# 
  2019  0FE8                     	;# 
  2020  0FE9                     	;# 
  2021  0FEA                     	;# 
  2022  0FEA                     	;# 
  2023  0FEB                     	;# 
  2024  0FED                     	;# 
  2025  0FEE                     	;# 
  2026  0FEE                     	;# 
  2027  0FEF                     	;# 
  2028  0000                     	;# 
  2029  0001                     	;# 
  2030  0002                     	;# 
  2031  0003                     	;# 
  2032  0004                     	;# 
  2033  0005                     	;# 
  2034  0006                     	;# 
  2035  0007                     	;# 
  2036  0008                     	;# 
  2037  0009                     	;# 
  2038  000A                     	;# 
  2039  000B                     	;# 
  2040  000C                     	;# 
  2041  000E                     	;# 
  2042  0011                     	;# 
  2043  0012                     	;# 
  2044  0013                     	;# 
  2045  0015                     	;# 
  2046  0016                     	;# 
  2047  0016                     	;# 
  2048  0017                     	;# 
  2049  0018                     	;# 
  2050  0019                     	;# 
  2051  001A                     	;# 
  2052  001B                     	;# 
  2053  001C                     	;# 
  2054  008C                     	;# 
  2055  008E                     	;# 
  2056  0091                     	;# 
  2057  0092                     	;# 
  2058  0093                     	;# 
  2059  0095                     	;# 
  2060  0096                     	;# 
  2061  0097                     	;# 
  2062  0098                     	;# 
  2063  0099                     	;# 
  2064  009A                     	;# 
  2065  009B                     	;# 
  2066  009B                     	;# 
  2067  009C                     	;# 
  2068  009D                     	;# 
  2069  009E                     	;# 
  2070  009F                     	;# 
  2071  010C                     	;# 
  2072  010E                     	;# 
  2073  0111                     	;# 
  2074  0112                     	;# 
  2075  0113                     	;# 
  2076  0114                     	;# 
  2077  0115                     	;# 
  2078  0116                     	;# 
  2079  0117                     	;# 
  2080  0118                     	;# 
  2081  0119                     	;# 
  2082  018C                     	;# 
  2083  018E                     	;# 
  2084  0191                     	;# 
  2085  0191                     	;# 
  2086  0192                     	;# 
  2087  0193                     	;# 
  2088  0193                     	;# 
  2089  0194                     	;# 
  2090  0195                     	;# 
  2091  0196                     	;# 
  2092  0197                     	;# 
  2093  0199                     	;# 
  2094  019A                     	;# 
  2095  019B                     	;# 
  2096  019B                     	;# 
  2097  019C                     	;# 
  2098  019D                     	;# 
  2099  019E                     	;# 
  2100  019F                     	;# 
  2101  020C                     	;# 
  2102  020E                     	;# 
  2103  028C                     	;# 
  2104  028E                     	;# 
  2105  030C                     	;# 
  2106  030E                     	;# 
  2107  038C                     	;# 
  2108  038E                     	;# 
  2109  0391                     	;# 
  2110  0392                     	;# 
  2111  0393                     	;# 
  2112  0397                     	;# 
  2113  0398                     	;# 
  2114  0399                     	;# 
  2115  0691                     	;# 
  2116  0692                     	;# 
  2117  0693                     	;# 
  2118  0694                     	;# 
  2119  0695                     	;# 
  2120  0D8E                     	;# 
  2121  0D8F                     	;# 
  2122  0D90                     	;# 
  2123  0D91                     	;# 
  2124  0D91                     	;# 
  2125  0D92                     	;# 
  2126  0D93                     	;# 
  2127  0D93                     	;# 
  2128  0D94                     	;# 
  2129  0D95                     	;# 
  2130  0D95                     	;# 
  2131  0D96                     	;# 
  2132  0D97                     	;# 
  2133  0D97                     	;# 
  2134  0D98                     	;# 
  2135  0D99                     	;# 
  2136  0D99                     	;# 
  2137  0D9A                     	;# 
  2138  0D9B                     	;# 
  2139  0D9C                     	;# 
  2140  0D9C                     	;# 
  2141  0D9D                     	;# 
  2142  0D9D                     	;# 
  2143  0D9E                     	;# 
  2144  0D9F                     	;# 
  2145  0DA0                     	;# 
  2146  0DA1                     	;# 
  2147  0DA1                     	;# 
  2148  0DA2                     	;# 
  2149  0DA3                     	;# 
  2150  0DA3                     	;# 
  2151  0DA4                     	;# 
  2152  0DA5                     	;# 
  2153  0DA5                     	;# 
  2154  0DA6                     	;# 
  2155  0DA7                     	;# 
  2156  0DA7                     	;# 
  2157  0DA8                     	;# 
  2158  0DA9                     	;# 
  2159  0DA9                     	;# 
  2160  0DAA                     	;# 
  2161  0DAB                     	;# 
  2162  0DAC                     	;# 
  2163  0DAC                     	;# 
  2164  0DAD                     	;# 
  2165  0DAD                     	;# 
  2166  0DAE                     	;# 
  2167  0DAF                     	;# 
  2168  0DB0                     	;# 
  2169  0DB1                     	;# 
  2170  0DB1                     	;# 
  2171  0DB2                     	;# 
  2172  0DB3                     	;# 
  2173  0DB3                     	;# 
  2174  0DB4                     	;# 
  2175  0DB5                     	;# 
  2176  0DB5                     	;# 
  2177  0DB6                     	;# 
  2178  0DB7                     	;# 
  2179  0DB7                     	;# 
  2180  0DB8                     	;# 
  2181  0DB9                     	;# 
  2182  0DB9                     	;# 
  2183  0DBA                     	;# 
  2184  0DBB                     	;# 
  2185  0DBC                     	;# 
  2186  0DBC                     	;# 
  2187  0DBD                     	;# 
  2188  0DBD                     	;# 
  2189  0DBE                     	;# 
  2190  0DBF                     	;# 
  2191  0DC0                     	;# 
  2192  0DC1                     	;# 
  2193  0DC1                     	;# 
  2194  0DC2                     	;# 
  2195  0DC3                     	;# 
  2196  0DC3                     	;# 
  2197  0DC4                     	;# 
  2198  0DC5                     	;# 
  2199  0DC5                     	;# 
  2200  0DC6                     	;# 
  2201  0DC7                     	;# 
  2202  0DC7                     	;# 
  2203  0DC8                     	;# 
  2204  0DC9                     	;# 
  2205  0DC9                     	;# 
  2206  0DCA                     	;# 
  2207  0DCB                     	;# 
  2208  0DCC                     	;# 
  2209  0DCC                     	;# 
  2210  0DCD                     	;# 
  2211  0DCD                     	;# 
  2212  0DCE                     	;# 
  2213  0DCF                     	;# 
  2214  0DD0                     	;# 
  2215  0E0F                     	;# 
  2216  0E10                     	;# 
  2217  0E11                     	;# 
  2218  0E12                     	;# 
  2219  0E13                     	;# 
  2220  0E14                     	;# 
  2221  0E15                     	;# 
  2222  0E16                     	;# 
  2223  0E17                     	;# 
  2224  0E90                     	;# 
  2225  0E91                     	;# 
  2226  0E92                     	;# 
  2227  0E94                     	;# 
  2228  0E95                     	;# 
  2229  0EA0                     	;# 
  2230  0EA1                     	;# 
  2231  0EA2                     	;# 
  2232  0EA3                     	;# 
  2233  0EA4                     	;# 
  2234  0EA5                     	;# 
  2235  0FE4                     	;# 
  2236  0FE5                     	;# 
  2237  0FE6                     	;# 
  2238  0FE7                     	;# 
  2239  0FE8                     	;# 
  2240  0FE8                     	;# 
  2241  0FE9                     	;# 
  2242  0FEA                     	;# 
  2243  0FEA                     	;# 
  2244  0FEB                     	;# 
  2245  0FED                     	;# 
  2246  0FEE                     	;# 
  2247  0FEE                     	;# 
  2248  0FEF                     	;# 
  2249  0000                     	;# 
  2250  0001                     	;# 
  2251  0002                     	;# 
  2252  0003                     	;# 
  2253  0004                     	;# 
  2254  0005                     	;# 
  2255  0006                     	;# 
  2256  0007                     	;# 
  2257  0008                     	;# 
  2258  0009                     	;# 
  2259  000A                     	;# 
  2260  000B                     	;# 
  2261  000C                     	;# 
  2262  000E                     	;# 
  2263  0011                     	;# 
  2264  0012                     	;# 
  2265  0013                     	;# 
  2266  0015                     	;# 
  2267  0016                     	;# 
  2268  0016                     	;# 
  2269  0017                     	;# 
  2270  0018                     	;# 
  2271  0019                     	;# 
  2272  001A                     	;# 
  2273  001B                     	;# 
  2274  001C                     	;# 
  2275  008C                     	;# 
  2276  008E                     	;# 
  2277  0091                     	;# 
  2278  0092                     	;# 
  2279  0093                     	;# 
  2280  0095                     	;# 
  2281  0096                     	;# 
  2282  0097                     	;# 
  2283  0098                     	;# 
  2284  0099                     	;# 
  2285  009A                     	;# 
  2286  009B                     	;# 
  2287  009B                     	;# 
  2288  009C                     	;# 
  2289  009D                     	;# 
  2290  009E                     	;# 
  2291  009F                     	;# 
  2292  010C                     	;# 
  2293  010E                     	;# 
  2294  0111                     	;# 
  2295  0112                     	;# 
  2296  0113                     	;# 
  2297  0114                     	;# 
  2298  0115                     	;# 
  2299  0116                     	;# 
  2300  0117                     	;# 
  2301  0118                     	;# 
  2302  0119                     	;# 
  2303  018C                     	;# 
  2304  018E                     	;# 
  2305  0191                     	;# 
  2306  0191                     	;# 
  2307  0192                     	;# 
  2308  0193                     	;# 
  2309  0193                     	;# 
  2310  0194                     	;# 
  2311  0195                     	;# 
  2312  0196                     	;# 
  2313  0197                     	;# 
  2314  0199                     	;# 
  2315  019A                     	;# 
  2316  019B                     	;# 
  2317  019B                     	;# 
  2318  019C                     	;# 
  2319  019D                     	;# 
  2320  019E                     	;# 
  2321  019F                     	;# 
  2322  020C                     	;# 
  2323  020E                     	;# 
  2324  028C                     	;# 
  2325  028E                     	;# 
  2326  030C                     	;# 
  2327  030E                     	;# 
  2328  038C                     	;# 
  2329  038E                     	;# 
  2330  0391                     	;# 
  2331  0392                     	;# 
  2332  0393                     	;# 
  2333  0397                     	;# 
  2334  0398                     	;# 
  2335  0399                     	;# 
  2336  0691                     	;# 
  2337  0692                     	;# 
  2338  0693                     	;# 
  2339  0694                     	;# 
  2340  0695                     	;# 
  2341  0D8E                     	;# 
  2342  0D8F                     	;# 
  2343  0D90                     	;# 
  2344  0D91                     	;# 
  2345  0D91                     	;# 
  2346  0D92                     	;# 
  2347  0D93                     	;# 
  2348  0D93                     	;# 
  2349  0D94                     	;# 
  2350  0D95                     	;# 
  2351  0D95                     	;# 
  2352  0D96                     	;# 
  2353  0D97                     	;# 
  2354  0D97                     	;# 
  2355  0D98                     	;# 
  2356  0D99                     	;# 
  2357  0D99                     	;# 
  2358  0D9A                     	;# 
  2359  0D9B                     	;# 
  2360  0D9C                     	;# 
  2361  0D9C                     	;# 
  2362  0D9D                     	;# 
  2363  0D9D                     	;# 
  2364  0D9E                     	;# 
  2365  0D9F                     	;# 
  2366  0DA0                     	;# 
  2367  0DA1                     	;# 
  2368  0DA1                     	;# 
  2369  0DA2                     	;# 
  2370  0DA3                     	;# 
  2371  0DA3                     	;# 
  2372  0DA4                     	;# 
  2373  0DA5                     	;# 
  2374  0DA5                     	;# 
  2375  0DA6                     	;# 
  2376  0DA7                     	;# 
  2377  0DA7                     	;# 
  2378  0DA8                     	;# 
  2379  0DA9                     	;# 
  2380  0DA9                     	;# 
  2381  0DAA                     	;# 
  2382  0DAB                     	;# 
  2383  0DAC                     	;# 
  2384  0DAC                     	;# 
  2385  0DAD                     	;# 
  2386  0DAD                     	;# 
  2387  0DAE                     	;# 
  2388  0DAF                     	;# 
  2389  0DB0                     	;# 
  2390  0DB1                     	;# 
  2391  0DB1                     	;# 
  2392  0DB2                     	;# 
  2393  0DB3                     	;# 
  2394  0DB3                     	;# 
  2395  0DB4                     	;# 
  2396  0DB5                     	;# 
  2397  0DB5                     	;# 
  2398  0DB6                     	;# 
  2399  0DB7                     	;# 
  2400  0DB7                     	;# 
  2401  0DB8                     	;# 
  2402  0DB9                     	;# 
  2403  0DB9                     	;# 
  2404  0DBA                     	;# 
  2405  0DBB                     	;# 
  2406  0DBC                     	;# 
  2407  0DBC                     	;# 
  2408  0DBD                     	;# 
  2409  0DBD                     	;# 
  2410  0DBE                     	;# 
  2411  0DBF                     	;# 
  2412  0DC0                     	;# 
  2413  0DC1                     	;# 
  2414  0DC1                     	;# 
  2415  0DC2                     	;# 
  2416  0DC3                     	;# 
  2417  0DC3                     	;# 
  2418  0DC4                     	;# 
  2419  0DC5                     	;# 
  2420  0DC5                     	;# 
  2421  0DC6                     	;# 
  2422  0DC7                     	;# 
  2423  0DC7                     	;# 
  2424  0DC8                     	;# 
  2425  0DC9                     	;# 
  2426  0DC9                     	;# 
  2427  0DCA                     	;# 
  2428  0DCB                     	;# 
  2429  0DCC                     	;# 
  2430  0DCC                     	;# 
  2431  0DCD                     	;# 
  2432  0DCD                     	;# 
  2433  0DCE                     	;# 
  2434  0DCF                     	;# 
  2435  0DD0                     	;# 
  2436  0E0F                     	;# 
  2437  0E10                     	;# 
  2438  0E11                     	;# 
  2439  0E12                     	;# 
  2440  0E13                     	;# 
  2441  0E14                     	;# 
  2442  0E15                     	;# 
  2443  0E16                     	;# 
  2444  0E17                     	;# 
  2445  0E90                     	;# 
  2446  0E91                     	;# 
  2447  0E92                     	;# 
  2448  0E94                     	;# 
  2449  0E95                     	;# 
  2450  0EA0                     	;# 
  2451  0EA1                     	;# 
  2452  0EA2                     	;# 
  2453  0EA3                     	;# 
  2454  0EA4                     	;# 
  2455  0EA5                     	;# 
  2456  0FE4                     	;# 
  2457  0FE5                     	;# 
  2458  0FE6                     	;# 
  2459  0FE7                     	;# 
  2460  0FE8                     	;# 
  2461  0FE8                     	;# 
  2462  0FE9                     	;# 
  2463  0FEA                     	;# 
  2464  0FEA                     	;# 
  2465  0FEB                     	;# 
  2466  0FED                     	;# 
  2467  0FEE                     	;# 
  2468  0FEE                     	;# 
  2469  0FEF                     	;# 
  2470  0FFF                     	;# 
  2471  0000                     	;# 
  2472  0001                     	;# 
  2473  0002                     	;# 
  2474  0003                     	;# 
  2475  0004                     	;# 
  2476  0005                     	;# 
  2477  0006                     	;# 
  2478  0007                     	;# 
  2479  0008                     	;# 
  2480  0009                     	;# 
  2481  000A                     	;# 
  2482  000B                     	;# 
  2483  000C                     	;# 
  2484  000E                     	;# 
  2485  0011                     	;# 
  2486  0012                     	;# 
  2487  0013                     	;# 
  2488  0015                     	;# 
  2489  0016                     	;# 
  2490  0016                     	;# 
  2491  0017                     	;# 
  2492  0018                     	;# 
  2493  0019                     	;# 
  2494  001A                     	;# 
  2495  001B                     	;# 
  2496  001C                     	;# 
  2497  008C                     	;# 
  2498  008E                     	;# 
  2499  0091                     	;# 
  2500  0092                     	;# 
  2501  0093                     	;# 
  2502  0095                     	;# 
  2503  0096                     	;# 
  2504  0097                     	;# 
  2505  0098                     	;# 
  2506  0099                     	;# 
  2507  009A                     	;# 
  2508  009B                     	;# 
  2509  009B                     	;# 
  2510  009C                     	;# 
  2511  009D                     	;# 
  2512  009E                     	;# 
  2513  009F                     	;# 
  2514  010C                     	;# 
  2515  010E                     	;# 
  2516  0111                     	;# 
  2517  0112                     	;# 
  2518  0113                     	;# 
  2519  0114                     	;# 
  2520  0115                     	;# 
  2521  0116                     	;# 
  2522  0117                     	;# 
  2523  0118                     	;# 
  2524  0119                     	;# 
  2525  018C                     	;# 
  2526  018E                     	;# 
  2527  0191                     	;# 
  2528  0191                     	;# 
  2529  0192                     	;# 
  2530  0193                     	;# 
  2531  0193                     	;# 
  2532  0194                     	;# 
  2533  0195                     	;# 
  2534  0196                     	;# 
  2535  0197                     	;# 
  2536  0199                     	;# 
  2537  019A                     	;# 
  2538  019B                     	;# 
  2539  019B                     	;# 
  2540  019C                     	;# 
  2541  019D                     	;# 
  2542  019E                     	;# 
  2543  019F                     	;# 
  2544  020C                     	;# 
  2545  020E                     	;# 
  2546  028C                     	;# 
  2547  028E                     	;# 
  2548  030C                     	;# 
  2549  030E                     	;# 
  2550  038C                     	;# 
  2551  038E                     	;# 
  2552  0391                     	;# 
  2553  0392                     	;# 
  2554  0393                     	;# 
  2555  0397                     	;# 
  2556  0398                     	;# 
  2557  0399                     	;# 
  2558  0691                     	;# 
  2559  0692                     	;# 
  2560  0693                     	;# 
  2561  0694                     	;# 
  2562  0695                     	;# 
  2563  0D8E                     	;# 
  2564  0D8F                     	;# 
  2565  0D90                     	;# 
  2566  0D91                     	;# 
  2567  0D91                     	;# 
  2568  0D92                     	;# 
  2569  0D93                     	;# 
  2570  0D93                     	;# 
  2571  0D94                     	;# 
  2572  0D95                     	;# 
  2573  0D95                     	;# 
  2574  0D96                     	;# 
  2575  0D97                     	;# 
  2576  0D97                     	;# 
  2577  0D98                     	;# 
  2578  0D99                     	;# 
  2579  0D99                     	;# 
  2580  0D9A                     	;# 
  2581  0D9B                     	;# 
  2582  0D9C                     	;# 
  2583  0D9C                     	;# 
  2584  0D9D                     	;# 
  2585  0D9D                     	;# 
  2586  0D9E                     	;# 
  2587  0D9F                     	;# 
  2588  0DA0                     	;# 
  2589  0DA1                     	;# 
  2590  0DA1                     	;# 
  2591  0DA2                     	;# 
  2592  0DA3                     	;# 
  2593  0DA3                     	;# 
  2594  0DA4                     	;# 
  2595  0DA5                     	;# 
  2596  0DA5                     	;# 
  2597  0DA6                     	;# 
  2598  0DA7                     	;# 
  2599  0DA7                     	;# 
  2600  0DA8                     	;# 
  2601  0DA9                     	;# 
  2602  0DA9                     	;# 
  2603  0DAA                     	;# 
  2604  0DAB                     	;# 
  2605  0DAC                     	;# 
  2606  0DAC                     	;# 
  2607  0DAD                     	;# 
  2608  0DAD                     	;# 
  2609  0DAE                     	;# 
  2610  0DAF                     	;# 
  2611  0DB0                     	;# 
  2612  0DB1                     	;# 
  2613  0DB1                     	;# 
  2614  0DB2                     	;# 
  2615  0DB3                     	;# 
  2616  0DB3                     	;# 
  2617  0DB4                     	;# 
  2618  0DB5                     	;# 
  2619  0DB5                     	;# 
  2620  0DB6                     	;# 
  2621  0DB7                     	;# 
  2622  0DB7                     	;# 
  2623  0DB8                     	;# 
  2624  0DB9                     	;# 
  2625  0DB9                     	;# 
  2626  0DBA                     	;# 
  2627  0DBB                     	;# 
  2628  0DBC                     	;# 
  2629  0DBC                     	;# 
  2630  0DBD                     	;# 
  2631  0DBD                     	;# 
  2632  0DBE                     	;# 
  2633  0DBF                     	;# 
  2634  0DC0                     	;# 
  2635  0DC1                     	;# 
  2636  0DC1                     	;# 
  2637  0DC2                     	;# 
  2638  0DC3                     	;# 
  2639  0DC3                     	;# 
  2640  0DC4                     	;# 
  2641  0DC5                     	;# 
  2642  0DC5                     	;# 
  2643  0DC6                     	;# 
  2644  0DC7                     	;# 
  2645  0DC7                     	;# 
  2646  0DC8                     	;# 
  2647  0DC9                     	;# 
  2648  0DC9                     	;# 
  2649  0DCA                     	;# 
  2650  0DCB                     	;# 
  2651  0DCC                     	;# 
  2652  0DCC                     	;# 
  2653  0DCD                     	;# 
  2654  0DCD                     	;# 
  2655  0DCE                     	;# 
  2656  0DCF                     	;# 
  2657  0DD0                     	;# 
  2658  0E0F                     	;# 
  2659  0E10                     	;# 
  2660  0E11                     	;# 
  2661  0E12                     	;# 
  2662  0E13                     	;# 
  2663  0E14                     	;# 
  2664  0E15                     	;# 
  2665  0E16                     	;# 
  2666  0E17                     	;# 
  2667  0E90                     	;# 
  2668  0E91                     	;# 
  2669  0E92                     	;# 
  2670  0E94                     	;# 
  2671  0E95                     	;# 
  2672  0EA0                     	;# 
  2673  0EA1                     	;# 
  2674  0EA2                     	;# 
  2675  0EA3                     	;# 
  2676  0EA4                     	;# 
  2677  0EA5                     	;# 
  2678  0FE4                     	;# 
  2679  0FE5                     	;# 
  2680  0FE6                     	;# 
  2681  0FE7                     	;# 
  2682  0FE8                     	;# 
  2683  0FE8                     	;# 
  2684  0FE9                     	;# 
  2685  0FEA                     	;# 
  2686  0FEA                     	;# 
  2687  0FEB                     	;# 
  2688  0FED                     	;# 
  2689  0FEE                     	;# 
  2690  0FEE                     	;# 
  2691  0FEF                     	;# 
  2692  0FFF                     	;# 
  2693  0000                     	;# 
  2694  0001                     	;# 
  2695  0002                     	;# 
  2696  0003                     	;# 
  2697  0004                     	;# 
  2698  0005                     	;# 
  2699  0006                     	;# 
  2700  0007                     	;# 
  2701  0008                     	;# 
  2702  0009                     	;# 
  2703  000A                     	;# 
  2704  000B                     	;# 
  2705  000C                     	;# 
  2706  000E                     	;# 
  2707  0011                     	;# 
  2708  0012                     	;# 
  2709  0013                     	;# 
  2710  0015                     	;# 
  2711  0016                     	;# 
  2712  0016                     	;# 
  2713  0017                     	;# 
  2714  0018                     	;# 
  2715  0019                     	;# 
  2716  001A                     	;# 
  2717  001B                     	;# 
  2718  001C                     	;# 
  2719  008C                     	;# 
  2720  008E                     	;# 
  2721  0091                     	;# 
  2722  0092                     	;# 
  2723  0093                     	;# 
  2724  0095                     	;# 
  2725  0096                     	;# 
  2726  0097                     	;# 
  2727  0098                     	;# 
  2728  0099                     	;# 
  2729  009A                     	;# 
  2730  009B                     	;# 
  2731  009B                     	;# 
  2732  009C                     	;# 
  2733  009D                     	;# 
  2734  009E                     	;# 
  2735  009F                     	;# 
  2736  010C                     	;# 
  2737  010E                     	;# 
  2738  0111                     	;# 
  2739  0112                     	;# 
  2740  0113                     	;# 
  2741  0114                     	;# 
  2742  0115                     	;# 
  2743  0116                     	;# 
  2744  0117                     	;# 
  2745  0118                     	;# 
  2746  0119                     	;# 
  2747  018C                     	;# 
  2748  018E                     	;# 
  2749  0191                     	;# 
  2750  0191                     	;# 
  2751  0192                     	;# 
  2752  0193                     	;# 
  2753  0193                     	;# 
  2754  0194                     	;# 
  2755  0195                     	;# 
  2756  0196                     	;# 
  2757  0197                     	;# 
  2758  0199                     	;# 
  2759  019A                     	;# 
  2760  019B                     	;# 
  2761  019B                     	;# 
  2762  019C                     	;# 
  2763  019D                     	;# 
  2764  019E                     	;# 
  2765  019F                     	;# 
  2766  020C                     	;# 
  2767  020E                     	;# 
  2768  028C                     	;# 
  2769  028E                     	;# 
  2770  030C                     	;# 
  2771  030E                     	;# 
  2772  038C                     	;# 
  2773  038E                     	;# 
  2774  0391                     	;# 
  2775  0392                     	;# 
  2776  0393                     	;# 
  2777  0397                     	;# 
  2778  0398                     	;# 
  2779  0399                     	;# 
  2780  0691                     	;# 
  2781  0692                     	;# 
  2782  0693                     	;# 
  2783  0694                     	;# 
  2784  0695                     	;# 
  2785  0D8E                     	;# 
  2786  0D8F                     	;# 
  2787  0D90                     	;# 
  2788  0D91                     	;# 
  2789  0D91                     	;# 
  2790  0D92                     	;# 
  2791  0D93                     	;# 
  2792  0D93                     	;# 
  2793  0D94                     	;# 
  2794  0D95                     	;# 
  2795  0D95                     	;# 
  2796  0D96                     	;# 
  2797  0D97                     	;# 
  2798  0D97                     	;# 
  2799  0D98                     	;# 
  2800  0D99                     	;# 
  2801  0D99                     	;# 
  2802  0D9A                     	;# 
  2803  0D9B                     	;# 
  2804  0D9C                     	;# 
  2805  0D9C                     	;# 
  2806  0D9D                     	;# 
  2807  0D9D                     	;# 
  2808  0D9E                     	;# 
  2809  0D9F                     	;# 
  2810  0DA0                     	;# 
  2811  0DA1                     	;# 
  2812  0DA1                     	;# 
  2813  0DA2                     	;# 
  2814  0DA3                     	;# 
  2815  0DA3                     	;# 
  2816  0DA4                     	;# 
  2817  0DA5                     	;# 
  2818  0DA5                     	;# 
  2819  0DA6                     	;# 
  2820  0DA7                     	;# 
  2821  0DA7                     	;# 
  2822  0DA8                     	;# 
  2823  0DA9                     	;# 
  2824  0DA9                     	;# 
  2825  0DAA                     	;# 
  2826  0DAB                     	;# 
  2827  0DAC                     	;# 
  2828  0DAC                     	;# 
  2829  0DAD                     	;# 
  2830  0DAD                     	;# 
  2831  0DAE                     	;# 
  2832  0DAF                     	;# 
  2833  0DB0                     	;# 
  2834  0DB1                     	;# 
  2835  0DB1                     	;# 
  2836  0DB2                     	;# 
  2837  0DB3                     	;# 
  2838  0DB3                     	;# 
  2839  0DB4                     	;# 
  2840  0DB5                     	;# 
  2841  0DB5                     	;# 
  2842  0DB6                     	;# 
  2843  0DB7                     	;# 
  2844  0DB7                     	;# 
  2845  0DB8                     	;# 
  2846  0DB9                     	;# 
  2847  0DB9                     	;# 
  2848  0DBA                     	;# 
  2849  0DBB                     	;# 
  2850  0DBC                     	;# 
  2851  0DBC                     	;# 
  2852  0DBD                     	;# 
  2853  0DBD                     	;# 
  2854  0DBE                     	;# 
  2855  0DBF                     	;# 
  2856  0DC0                     	;# 
  2857  0DC1                     	;# 
  2858  0DC1                     	;# 
  2859  0DC2                     	;# 
  2860  0DC3                     	;# 
  2861  0DC3                     	;# 
  2862  0DC4                     	;# 
  2863  0DC5                     	;# 
  2864  0DC5                     	;# 
  2865  0DC6                     	;# 
  2866  0DC7                     	;# 
  2867  0DC7                     	;# 
  2868  0DC8                     	;# 
  2869  0DC9                     	;# 
  2870  0DC9                     	;# 
  2871  0DCA                     	;# 
  2872  0DCB                     	;# 
  2873  0DCC                     	;# 
  2874  0DCC                     	;# 
  2875  0DCD                     	;# 
  2876  0DCD                     	;# 
  2877  0DCE                     	;# 
  2878  0DCF                     	;# 
  2879  0DD0                     	;# 
  2880  0E0F                     	;# 
  2881  0E10                     	;# 
  2882  0E11                     	;# 
  2883  0E12                     	;# 
  2884  0E13                     	;# 
  2885  0E14                     	;# 
  2886  0E15                     	;# 
  2887  0E16                     	;# 
  2888  0E17                     	;# 
  2889  0E90                     	;# 
  2890  0E91                     	;# 
  2891  0E92                     	;# 
  2892  0E94                     	;# 
  2893  0E95                     	;# 
  2894  0EA0                     	;# 
  2895  0EA1                     	;# 
  2896  0EA2                     	;# 
  2897  0EA3                     	;# 
  2898  0EA4                     	;# 
  2899  0EA5                     	;# 
  2900  0FE4                     	;# 
  2901  0FE5                     	;# 
  2902  0FE6                     	;# 
  2903  0FE7                     	;# 
  2904  0FE8                     	;# 
  2905  0FE8                     	;# 
  2906  0FE9                     	;# 
  2907  0FEA                     	;# 
  2908  0FEA                     	;# 
  2909  0FEB                     	;# 
  2910  0FED                     	;# 
  2911  0FEE                     	;# 
  2912  0FEE                     	;# 
  2913  0FEF                     	;# 
  2914  0FFF                     	;# 
  2915  0000                     	;# 
  2916  0001                     	;# 
  2917  0002                     	;# 
  2918  0003                     	;# 
  2919  0004                     	;# 
  2920  0005                     	;# 
  2921  0006                     	;# 
  2922  0007                     	;# 
  2923  0008                     	;# 
  2924  0009                     	;# 
  2925  000A                     	;# 
  2926  000B                     	;# 
  2927  000C                     	;# 
  2928  000E                     	;# 
  2929  0011                     	;# 
  2930  0012                     	;# 
  2931  0013                     	;# 
  2932  0015                     	;# 
  2933  0016                     	;# 
  2934  0016                     	;# 
  2935  0017                     	;# 
  2936  0018                     	;# 
  2937  0019                     	;# 
  2938  001A                     	;# 
  2939  001B                     	;# 
  2940  001C                     	;# 
  2941  008C                     	;# 
  2942  008E                     	;# 
  2943  0091                     	;# 
  2944  0092                     	;# 
  2945  0093                     	;# 
  2946  0095                     	;# 
  2947  0096                     	;# 
  2948  0097                     	;# 
  2949  0098                     	;# 
  2950  0099                     	;# 
  2951  009A                     	;# 
  2952  009B                     	;# 
  2953  009B                     	;# 
  2954  009C                     	;# 
  2955  009D                     	;# 
  2956  009E                     	;# 
  2957  009F                     	;# 
  2958  010C                     	;# 
  2959  010E                     	;# 
  2960  0111                     	;# 
  2961  0112                     	;# 
  2962  0113                     	;# 
  2963  0114                     	;# 
  2964  0115                     	;# 
  2965  0116                     	;# 
  2966  0117                     	;# 
  2967  0118                     	;# 
  2968  0119                     	;# 
  2969  018C                     	;# 
  2970  018E                     	;# 
  2971  0191                     	;# 
  2972  0191                     	;# 
  2973  0192                     	;# 
  2974  0193                     	;# 
  2975  0193                     	;# 
  2976  0194                     	;# 
  2977  0195                     	;# 
  2978  0196                     	;# 
  2979  0197                     	;# 
  2980  0199                     	;# 
  2981  019A                     	;# 
  2982  019B                     	;# 
  2983  019B                     	;# 
  2984  019C                     	;# 
  2985  019D                     	;# 
  2986  019E                     	;# 
  2987  019F                     	;# 
  2988  020C                     	;# 
  2989  020E                     	;# 
  2990  028C                     	;# 
  2991  028E                     	;# 
  2992  030C                     	;# 
  2993  030E                     	;# 
  2994  038C                     	;# 
  2995  038E                     	;# 
  2996  0391                     	;# 
  2997  0392                     	;# 
  2998  0393                     	;# 
  2999  0397                     	;# 
  3000  0398                     	;# 
  3001  0399                     	;# 
  3002  0691                     	;# 
  3003  0692                     	;# 
  3004  0693                     	;# 
  3005  0694                     	;# 
  3006  0695                     	;# 
  3007  0D8E                     	;# 
  3008  0D8F                     	;# 
  3009  0D90                     	;# 
  3010  0D91                     	;# 
  3011  0D91                     	;# 
  3012  0D92                     	;# 
  3013  0D93                     	;# 
  3014  0D93                     	;# 
  3015  0D94                     	;# 
  3016  0D95                     	;# 
  3017  0D95                     	;# 
  3018  0D96                     	;# 
  3019  0D97                     	;# 
  3020  0D97                     	;# 
  3021  0D98                     	;# 
  3022  0D99                     	;# 
  3023  0D99                     	;# 
  3024  0D9A                     	;# 
  3025  0D9B                     	;# 
  3026  0D9C                     	;# 
  3027  0D9C                     	;# 
  3028  0D9D                     	;# 
  3029  0D9D                     	;# 
  3030  0D9E                     	;# 
  3031  0D9F                     	;# 
  3032  0DA0                     	;# 
  3033  0DA1                     	;# 
  3034  0DA1                     	;# 
  3035  0DA2                     	;# 
  3036  0DA3                     	;# 
  3037  0DA3                     	;# 
  3038  0DA4                     	;# 
  3039  0DA5                     	;# 
  3040  0DA5                     	;# 
  3041  0DA6                     	;# 
  3042  0DA7                     	;# 
  3043  0DA7                     	;# 
  3044  0DA8                     	;# 
  3045  0DA9                     	;# 
  3046  0DA9                     	;# 
  3047  0DAA                     	;# 
  3048  0DAB                     	;# 
  3049  0DAC                     	;# 
  3050  0DAC                     	;# 
  3051  0DAD                     	;# 
  3052  0DAD                     	;# 
  3053  0DAE                     	;# 
  3054  0DAF                     	;# 
  3055  0DB0                     	;# 
  3056  0DB1                     	;# 
  3057  0DB1                     	;# 
  3058  0DB2                     	;# 
  3059  0DB3                     	;# 
  3060  0DB3                     	;# 
  3061  0DB4                     	;# 
  3062  0DB5                     	;# 
  3063  0DB5                     	;# 
  3064  0DB6                     	;# 
  3065  0DB7                     	;# 
  3066  0DB7                     	;# 
  3067  0DB8                     	;# 
  3068  0DB9                     	;# 
  3069  0DB9                     	;# 
  3070  0DBA                     	;# 
  3071  0DBB                     	;# 
  3072  0DBC                     	;# 
  3073  0DBC                     	;# 
  3074  0DBD                     	;# 
  3075  0DBD                     	;# 
  3076  0DBE                     	;# 
  3077  0DBF                     	;# 
  3078  0DC0                     	;# 
  3079  0DC1                     	;# 
  3080  0DC1                     	;# 
  3081  0DC2                     	;# 
  3082  0DC3                     	;# 
  3083  0DC3                     	;# 
  3084  0DC4                     	;# 
  3085  0DC5                     	;# 
  3086  0DC5                     	;# 
  3087  0DC6                     	;# 
  3088  0DC7                     	;# 
  3089  0DC7                     	;# 
  3090  0DC8                     	;# 
  3091  0DC9                     	;# 
  3092  0DC9                     	;# 
  3093  0DCA                     	;# 
  3094  0DCB                     	;# 
  3095  0DCC                     	;# 
  3096  0DCC                     	;# 
  3097  0DCD                     	;# 
  3098  0DCD                     	;# 
  3099  0DCE                     	;# 
  3100  0DCF                     	;# 
  3101  0DD0                     	;# 
  3102  0E0F                     	;# 
  3103  0E10                     	;# 
  3104  0E11                     	;# 
  3105  0E12                     	;# 
  3106  0E13                     	;# 
  3107  0E14                     	;# 
  3108  0E15                     	;# 
  3109  0E16                     	;# 
  3110  0E17                     	;# 
  3111  0E90                     	;# 
  3112  0E91                     	;# 
  3113  0E92                     	;# 
  3114  0E94                     	;# 
  3115  0E95                     	;# 
  3116  0EA0                     	;# 
  3117  0EA1                     	;# 
  3118  0EA2                     	;# 
  3119  0EA3                     	;# 
  3120  0EA4                     	;# 
  3121  0EA5                     	;# 
  3122  0FE4                     	;# 
  3123  0FE5                     	;# 
  3124  0FE6                     	;# 
  3125  0FE7                     	;# 
  3126  0FE8                     	;# 
  3127  0FE8                     	;# 
  3128  0FE9                     	;# 
  3129  0FEA                     	;# 
  3130  0FEA                     	;# 
  3131  0FEB                     	;# 
  3132  0FED                     	;# 
  3133  0FEE                     	;# 
  3134  0FEE                     	;# 
  3135  0FEF                     	;# 
  3136  0FFF                     	;# 
  3137  0000                     	;# 
  3138  0001                     	;# 
  3139  0002                     	;# 
  3140  0003                     	;# 
  3141  0004                     	;# 
  3142  0005                     	;# 
  3143  0006                     	;# 
  3144  0007                     	;# 
  3145  0008                     	;# 
  3146  0009                     	;# 
  3147  000A                     	;# 
  3148  000B                     	;# 
  3149  000C                     	;# 
  3150  000E                     	;# 
  3151  0011                     	;# 
  3152  0012                     	;# 
  3153  0013                     	;# 
  3154  0015                     	;# 
  3155  0016                     	;# 
  3156  0016                     	;# 
  3157  0017                     	;# 
  3158  0018                     	;# 
  3159  0019                     	;# 
  3160  001A                     	;# 
  3161  001B                     	;# 
  3162  001C                     	;# 
  3163  008C                     	;# 
  3164  008E                     	;# 
  3165  0091                     	;# 
  3166  0092                     	;# 
  3167  0093                     	;# 
  3168  0095                     	;# 
  3169  0096                     	;# 
  3170  0097                     	;# 
  3171  0098                     	;# 
  3172  0099                     	;# 
  3173  009A                     	;# 
  3174  009B                     	;# 
  3175  009B                     	;# 
  3176  009C                     	;# 
  3177  009D                     	;# 
  3178  009E                     	;# 
  3179  009F                     	;# 
  3180  010C                     	;# 
  3181  010E                     	;# 
  3182  0111                     	;# 
  3183  0112                     	;# 
  3184  0113                     	;# 
  3185  0114                     	;# 
  3186  0115                     	;# 
  3187  0116                     	;# 
  3188  0117                     	;# 
  3189  0118                     	;# 
  3190  0119                     	;# 
  3191  018C                     	;# 
  3192  018E                     	;# 
  3193  0191                     	;# 
  3194  0191                     	;# 
  3195  0192                     	;# 
  3196  0193                     	;# 
  3197  0193                     	;# 
  3198  0194                     	;# 
  3199  0195                     	;# 
  3200  0196                     	;# 
  3201  0197                     	;# 
  3202  0199                     	;# 
  3203  019A                     	;# 
  3204  019B                     	;# 
  3205  019B                     	;# 
  3206  019C                     	;# 
  3207  019D                     	;# 
  3208  019E                     	;# 
  3209  019F                     	;# 
  3210  020C                     	;# 
  3211  020E                     	;# 
  3212  028C                     	;# 
  3213  028E                     	;# 
  3214  030C                     	;# 
  3215  030E                     	;# 
  3216  038C                     	;# 
  3217  038E                     	;# 
  3218  0391                     	;# 
  3219  0392                     	;# 
  3220  0393                     	;# 
  3221  0397                     	;# 
  3222  0398                     	;# 
  3223  0399                     	;# 
  3224  0691                     	;# 
  3225  0692                     	;# 
  3226  0693                     	;# 
  3227  0694                     	;# 
  3228  0695                     	;# 
  3229  0D8E                     	;# 
  3230  0D8F                     	;# 
  3231  0D90                     	;# 
  3232  0D91                     	;# 
  3233  0D91                     	;# 
  3234  0D92                     	;# 
  3235  0D93                     	;# 
  3236  0D93                     	;# 
  3237  0D94                     	;# 
  3238  0D95                     	;# 
  3239  0D95                     	;# 
  3240  0D96                     	;# 
  3241  0D97                     	;# 
  3242  0D97                     	;# 
  3243  0D98                     	;# 
  3244  0D99                     	;# 
  3245  0D99                     	;# 
  3246  0D9A                     	;# 
  3247  0D9B                     	;# 
  3248  0D9C                     	;# 
  3249  0D9C                     	;# 
  3250  0D9D                     	;# 
  3251  0D9D                     	;# 
  3252  0D9E                     	;# 
  3253  0D9F                     	;# 
  3254  0DA0                     	;# 
  3255  0DA1                     	;# 
  3256  0DA1                     	;# 
  3257  0DA2                     	;# 
  3258  0DA3                     	;# 
  3259  0DA3                     	;# 
  3260  0DA4                     	;# 
  3261  0DA5                     	;# 
  3262  0DA5                     	;# 
  3263  0DA6                     	;# 
  3264  0DA7                     	;# 
  3265  0DA7                     	;# 
  3266  0DA8                     	;# 
  3267  0DA9                     	;# 
  3268  0DA9                     	;# 
  3269  0DAA                     	;# 
  3270  0DAB                     	;# 
  3271  0DAC                     	;# 
  3272  0DAC                     	;# 
  3273  0DAD                     	;# 
  3274  0DAD                     	;# 
  3275  0DAE                     	;# 
  3276  0DAF                     	;# 
  3277  0DB0                     	;# 
  3278  0DB1                     	;# 
  3279  0DB1                     	;# 
  3280  0DB2                     	;# 
  3281  0DB3                     	;# 
  3282  0DB3                     	;# 
  3283  0DB4                     	;# 
  3284  0DB5                     	;# 
  3285  0DB5                     	;# 
  3286  0DB6                     	;# 
  3287  0DB7                     	;# 
  3288  0DB7                     	;# 
  3289  0DB8                     	;# 
  3290  0DB9                     	;# 
  3291  0DB9                     	;# 
  3292  0DBA                     	;# 
  3293  0DBB                     	;# 
  3294  0DBC                     	;# 
  3295  0DBC                     	;# 
  3296  0DBD                     	;# 
  3297  0DBD                     	;# 
  3298  0DBE                     	;# 
  3299  0DBF                     	;# 
  3300  0DC0                     	;# 
  3301  0DC1                     	;# 
  3302  0DC1                     	;# 
  3303  0DC2                     	;# 
  3304  0DC3                     	;# 
  3305  0DC3                     	;# 
  3306  0DC4                     	;# 
  3307  0DC5                     	;# 
  3308  0DC5                     	;# 
  3309  0DC6                     	;# 
  3310  0DC7                     	;# 
  3311  0DC7                     	;# 
  3312  0DC8                     	;# 
  3313  0DC9                     	;# 
  3314  0DC9                     	;# 
  3315  0DCA                     	;# 
  3316  0DCB                     	;# 
  3317  0DCC                     	;# 
  3318  0DCC                     	;# 
  3319  0DCD                     	;# 
  3320  0DCD                     	;# 
  3321  0DCE                     	;# 
  3322  0DCF                     	;# 
  3323  0DD0                     	;# 
  3324  0E0F                     	;# 
  3325  0E10                     	;# 
  3326  0E11                     	;# 
  3327  0E12                     	;# 
  3328  0E13                     	;# 
  3329  0E14                     	;# 
  3330  0E15                     	;# 
  3331  0E16                     	;# 
  3332  0E17                     	;# 
  3333  0E90                     	;# 
  3334  0E91                     	;# 
  3335  0E92                     	;# 
  3336  0E94                     	;# 
  3337  0E95                     	;# 
  3338  0EA0                     	;# 
  3339  0EA1                     	;# 
  3340  0EA2                     	;# 
  3341  0EA3                     	;# 
  3342  0EA4                     	;# 
  3343  0EA5                     	;# 
  3344  0FE4                     	;# 
  3345  0FE5                     	;# 
  3346  0FE6                     	;# 
  3347  0FE7                     	;# 
  3348  0FE8                     	;# 
  3349  0FE8                     	;# 
  3350  0FE9                     	;# 
  3351  0FEA                     	;# 
  3352  0FEA                     	;# 
  3353  0FEB                     	;# 
  3354  0FED                     	;# 
  3355  0FEE                     	;# 
  3356  0FEE                     	;# 
  3357  0FEF                     	;# 
  3358  0FFF                     	;# 
  3359  0000                     	;# 
  3360  0001                     	;# 
  3361  0002                     	;# 
  3362  0003                     	;# 
  3363  0004                     	;# 
  3364  0005                     	;# 
  3365  0006                     	;# 
  3366  0007                     	;# 
  3367  0008                     	;# 
  3368  0009                     	;# 
  3369  000A                     	;# 
  3370  000B                     	;# 
  3371  000C                     	;# 
  3372  000E                     	;# 
  3373  0011                     	;# 
  3374  0012                     	;# 
  3375  0013                     	;# 
  3376  0015                     	;# 
  3377  0016                     	;# 
  3378  0016                     	;# 
  3379  0017                     	;# 
  3380  0018                     	;# 
  3381  0019                     	;# 
  3382  001A                     	;# 
  3383  001B                     	;# 
  3384  001C                     	;# 
  3385  008C                     	;# 
  3386  008E                     	;# 
  3387  0091                     	;# 
  3388  0092                     	;# 
  3389  0093                     	;# 
  3390  0095                     	;# 
  3391  0096                     	;# 
  3392  0097                     	;# 
  3393  0098                     	;# 
  3394  0099                     	;# 
  3395  009A                     	;# 
  3396  009B                     	;# 
  3397  009B                     	;# 
  3398  009C                     	;# 
  3399  009D                     	;# 
  3400  009E                     	;# 
  3401  009F                     	;# 
  3402  010C                     	;# 
  3403  010E                     	;# 
  3404  0111                     	;# 
  3405  0112                     	;# 
  3406  0113                     	;# 
  3407  0114                     	;# 
  3408  0115                     	;# 
  3409  0116                     	;# 
  3410  0117                     	;# 
  3411  0118                     	;# 
  3412  0119                     	;# 
  3413  018C                     	;# 
  3414  018E                     	;# 
  3415  0191                     	;# 
  3416  0191                     	;# 
  3417  0192                     	;# 
  3418  0193                     	;# 
  3419  0193                     	;# 
  3420  0194                     	;# 
  3421  0195                     	;# 
  3422  0196                     	;# 
  3423  0197                     	;# 
  3424  0199                     	;# 
  3425  019A                     	;# 
  3426  019B                     	;# 
  3427  019B                     	;# 
  3428  019C                     	;# 
  3429  019D                     	;# 
  3430  019E                     	;# 
  3431  019F                     	;# 
  3432  020C                     	;# 
  3433  020E                     	;# 
  3434  028C                     	;# 
  3435  028E                     	;# 
  3436  030C                     	;# 
  3437  030E                     	;# 
  3438  038C                     	;# 
  3439  038E                     	;# 
  3440  0391                     	;# 
  3441  0392                     	;# 
  3442  0393                     	;# 
  3443  0397                     	;# 
  3444  0398                     	;# 
  3445  0399                     	;# 
  3446  0691                     	;# 
  3447  0692                     	;# 
  3448  0693                     	;# 
  3449  0694                     	;# 
  3450  0695                     	;# 
  3451  0D8E                     	;# 
  3452  0D8F                     	;# 
  3453  0D90                     	;# 
  3454  0D91                     	;# 
  3455  0D91                     	;# 
  3456  0D92                     	;# 
  3457  0D93                     	;# 
  3458  0D93                     	;# 
  3459  0D94                     	;# 
  3460  0D95                     	;# 
  3461  0D95                     	;# 
  3462  0D96                     	;# 
  3463  0D97                     	;# 
  3464  0D97                     	;# 
  3465  0D98                     	;# 
  3466  0D99                     	;# 
  3467  0D99                     	;# 
  3468  0D9A                     	;# 
  3469  0D9B                     	;# 
  3470  0D9C                     	;# 
  3471  0D9C                     	;# 
  3472  0D9D                     	;# 
  3473  0D9D                     	;# 
  3474  0D9E                     	;# 
  3475  0D9F                     	;# 
  3476  0DA0                     	;# 
  3477  0DA1                     	;# 
  3478  0DA1                     	;# 
  3479  0DA2                     	;# 
  3480  0DA3                     	;# 
  3481  0DA3                     	;# 
  3482  0DA4                     	;# 
  3483  0DA5                     	;# 
  3484  0DA5                     	;# 
  3485  0DA6                     	;# 
  3486  0DA7                     	;# 
  3487  0DA7                     	;# 
  3488  0DA8                     	;# 
  3489  0DA9                     	;# 
  3490  0DA9                     	;# 
  3491  0DAA                     	;# 
  3492  0DAB                     	;# 
  3493  0DAC                     	;# 
  3494  0DAC                     	;# 
  3495  0DAD                     	;# 
  3496  0DAD                     	;# 
  3497  0DAE                     	;# 
  3498  0DAF                     	;# 
  3499  0DB0                     	;# 
  3500  0DB1                     	;# 
  3501  0DB1                     	;# 
  3502  0DB2                     	;# 
  3503  0DB3                     	;# 
  3504  0DB3                     	;# 
  3505  0DB4                     	;# 
  3506  0DB5                     	;# 
  3507  0DB5                     	;# 
  3508  0DB6                     	;# 
  3509  0DB7                     	;# 
  3510  0DB7                     	;# 
  3511  0DB8                     	;# 
  3512  0DB9                     	;# 
  3513  0DB9                     	;# 
  3514  0DBA                     	;# 
  3515  0DBB                     	;# 
  3516  0DBC                     	;# 
  3517  0DBC                     	;# 
  3518  0DBD                     	;# 
  3519  0DBD                     	;# 
  3520  0DBE                     	;# 
  3521  0DBF                     	;# 
  3522  0DC0                     	;# 
  3523  0DC1                     	;# 
  3524  0DC1                     	;# 
  3525  0DC2                     	;# 
  3526  0DC3                     	;# 
  3527  0DC3                     	;# 
  3528  0DC4                     	;# 
  3529  0DC5                     	;# 
  3530  0DC5                     	;# 
  3531  0DC6                     	;# 
  3532  0DC7                     	;# 
  3533  0DC7                     	;# 
  3534  0DC8                     	;# 
  3535  0DC9                     	;# 
  3536  0DC9                     	;# 
  3537  0DCA                     	;# 
  3538  0DCB                     	;# 
  3539  0DCC                     	;# 
  3540  0DCC                     	;# 
  3541  0DCD                     	;# 
  3542  0DCD                     	;# 
  3543  0DCE                     	;# 
  3544  0DCF                     	;# 
  3545  0DD0                     	;# 
  3546  0E0F                     	;# 
  3547  0E10                     	;# 
  3548  0E11                     	;# 
  3549  0E12                     	;# 
  3550  0E13                     	;# 
  3551  0E14                     	;# 
  3552  0E15                     	;# 
  3553  0E16                     	;# 
  3554  0E17                     	;# 
  3555  0E90                     	;# 
  3556  0E91                     	;# 
  3557  0E92                     	;# 
  3558  0E94                     	;# 
  3559  0E95                     	;# 
  3560  0EA0                     	;# 
  3561  0EA1                     	;# 
  3562  0EA2                     	;# 
  3563  0EA3                     	;# 
  3564  0EA4                     	;# 
  3565  0EA5                     	;# 
  3566  0FE4                     	;# 
  3567  0FE5                     	;# 
  3568  0FE6                     	;# 
  3569  0FE7                     	;# 
  3570  0FE8                     	;# 
  3571  0FE8                     	;# 
  3572  0FE9                     	;# 
  3573  0FEA                     	;# 
  3574  0FEA                     	;# 
  3575  0FEB                     	;# 
  3576  0FED                     	;# 
  3577  0FEE                     	;# 
  3578  0FEE                     	;# 
  3579  0FEF                     	;# 
  3580  0FFF                     	;# 
  3581  0000                     	;# 
  3582  0001                     	;# 
  3583  0002                     	;# 
  3584  0003                     	;# 
  3585  0004                     	;# 
  3586  0005                     	;# 
  3587  0006                     	;# 
  3588  0007                     	;# 
  3589  0008                     	;# 
  3590  0009                     	;# 
  3591  000A                     	;# 
  3592  000B                     	;# 
  3593  000C                     	;# 
  3594  000E                     	;# 
  3595  0011                     	;# 
  3596  0012                     	;# 
  3597  0013                     	;# 
  3598  0015                     	;# 
  3599  0016                     	;# 
  3600  0016                     	;# 
  3601  0017                     	;# 
  3602  0018                     	;# 
  3603  0019                     	;# 
  3604  001A                     	;# 
  3605  001B                     	;# 
  3606  001C                     	;# 
  3607  008C                     	;# 
  3608  008E                     	;# 
  3609  0091                     	;# 
  3610  0092                     	;# 
  3611  0093                     	;# 
  3612  0095                     	;# 
  3613  0096                     	;# 
  3614  0097                     	;# 
  3615  0098                     	;# 
  3616  0099                     	;# 
  3617  009A                     	;# 
  3618  009B                     	;# 
  3619  009B                     	;# 
  3620  009C                     	;# 
  3621  009D                     	;# 
  3622  009E                     	;# 
  3623  009F                     	;# 
  3624  010C                     	;# 
  3625  010E                     	;# 
  3626  0111                     	;# 
  3627  0112                     	;# 
  3628  0113                     	;# 
  3629  0114                     	;# 
  3630  0115                     	;# 
  3631  0116                     	;# 
  3632  0117                     	;# 
  3633  0118                     	;# 
  3634  0119                     	;# 
  3635  018C                     	;# 
  3636  018E                     	;# 
  3637  0191                     	;# 
  3638  0191                     	;# 
  3639  0192                     	;# 
  3640  0193                     	;# 
  3641  0193                     	;# 
  3642  0194                     	;# 
  3643  0195                     	;# 
  3644  0196                     	;# 
  3645  0197                     	;# 
  3646  0199                     	;# 
  3647  019A                     	;# 
  3648  019B                     	;# 
  3649  019B                     	;# 
  3650  019C                     	;# 
  3651  019D                     	;# 
  3652  019E                     	;# 
  3653  019F                     	;# 
  3654  020C                     	;# 
  3655  020E                     	;# 
  3656  028C                     	;# 
  3657  028E                     	;# 
  3658  030C                     	;# 
  3659  030E                     	;# 
  3660  038C                     	;# 
  3661  038E                     	;# 
  3662  0391                     	;# 
  3663  0392                     	;# 
  3664  0393                     	;# 
  3665  0397                     	;# 
  3666  0398                     	;# 
  3667  0399                     	;# 
  3668  0691                     	;# 
  3669  0692                     	;# 
  3670  0693                     	;# 
  3671  0694                     	;# 
  3672  0695                     	;# 
  3673  0D8E                     	;# 
  3674  0D8F                     	;# 
  3675  0D90                     	;# 
  3676  0D91                     	;# 
  3677  0D91                     	;# 
  3678  0D92                     	;# 
  3679  0D93                     	;# 
  3680  0D93                     	;# 
  3681  0D94                     	;# 
  3682  0D95                     	;# 
  3683  0D95                     	;# 
  3684  0D96                     	;# 
  3685  0D97                     	;# 
  3686  0D97                     	;# 
  3687  0D98                     	;# 
  3688  0D99                     	;# 
  3689  0D99                     	;# 
  3690  0D9A                     	;# 
  3691  0D9B                     	;# 
  3692  0D9C                     	;# 
  3693  0D9C                     	;# 
  3694  0D9D                     	;# 
  3695  0D9D                     	;# 
  3696  0D9E                     	;# 
  3697  0D9F                     	;# 
  3698  0DA0                     	;# 
  3699  0DA1                     	;# 
  3700  0DA1                     	;# 
  3701  0DA2                     	;# 
  3702  0DA3                     	;# 
  3703  0DA3                     	;# 
  3704  0DA4                     	;# 
  3705  0DA5                     	;# 
  3706  0DA5                     	;# 
  3707  0DA6                     	;# 
  3708  0DA7                     	;# 
  3709  0DA7                     	;# 
  3710  0DA8                     	;# 
  3711  0DA9                     	;# 
  3712  0DA9                     	;# 
  3713  0DAA                     	;# 
  3714  0DAB                     	;# 
  3715  0DAC                     	;# 
  3716  0DAC                     	;# 
  3717  0DAD                     	;# 
  3718  0DAD                     	;# 
  3719  0DAE                     	;# 
  3720  0DAF                     	;# 
  3721  0DB0                     	;# 
  3722  0DB1                     	;# 
  3723  0DB1                     	;# 
  3724  0DB2                     	;# 
  3725  0DB3                     	;# 
  3726  0DB3                     	;# 
  3727  0DB4                     	;# 
  3728  0DB5                     	;# 
  3729  0DB5                     	;# 
  3730  0DB6                     	;# 
  3731  0DB7                     	;# 
  3732  0DB7                     	;# 
  3733  0DB8                     	;# 
  3734  0DB9                     	;# 
  3735  0DB9                     	;# 
  3736  0DBA                     	;# 
  3737  0DBB                     	;# 
  3738  0DBC                     	;# 
  3739  0DBC                     	;# 
  3740  0DBD                     	;# 
  3741  0DBD                     	;# 
  3742  0DBE                     	;# 
  3743  0DBF                     	;# 
  3744  0DC0                     	;# 
  3745  0DC1                     	;# 
  3746  0DC1                     	;# 
  3747  0DC2                     	;# 
  3748  0DC3                     	;# 
  3749  0DC3                     	;# 
  3750  0DC4                     	;# 
  3751  0DC5                     	;# 
  3752  0DC5                     	;# 
  3753  0DC6                     	;# 
  3754  0DC7                     	;# 
  3755  0DC7                     	;# 
  3756  0DC8                     	;# 
  3757  0DC9                     	;# 
  3758  0DC9                     	;# 
  3759  0DCA                     	;# 
  3760  0DCB                     	;# 
  3761  0DCC                     	;# 
  3762  0DCC                     	;# 
  3763  0DCD                     	;# 
  3764  0DCD                     	;# 
  3765  0DCE                     	;# 
  3766  0DCF                     	;# 
  3767  0DD0                     	;# 
  3768  0E0F                     	;# 
  3769  0E10                     	;# 
  3770  0E11                     	;# 
  3771  0E12                     	;# 
  3772  0E13                     	;# 
  3773  0E14                     	;# 
  3774  0E15                     	;# 
  3775  0E16                     	;# 
  3776  0E17                     	;# 
  3777  0E90                     	;# 
  3778  0E91                     	;# 
  3779  0E92                     	;# 
  3780  0E94                     	;# 
  3781  0E95                     	;# 
  3782  0EA0                     	;# 
  3783  0EA1                     	;# 
  3784  0EA2                     	;# 
  3785  0EA3                     	;# 
  3786  0EA4                     	;# 
  3787  0EA5                     	;# 
  3788  0FE4                     	;# 
  3789  0FE5                     	;# 
  3790  0FE6                     	;# 
  3791  0FE7                     	;# 
  3792  0FE8                     	;# 
  3793  0FE8                     	;# 
  3794  0FE9                     	;# 
  3795  0FEA                     	;# 
  3796  0FEA                     	;# 
  3797  0FEB                     	;# 
  3798  0FED                     	;# 
  3799  0FEE                     	;# 
  3800  0FEE                     	;# 
  3801  0FEF                     	;# 
  3802  0FFF                     	;_sysData
  3803                           
  3804 ;; Function _TMR2_DefaultInterruptHandler is unused but had its address taken
  3805  0000                     
  3806                           	psect	idataBANK0
  3807  0FC0                     __pidataBANK0:	
  3808                           
  3809                           ;initializer for _pwm1DutyForIdrv
  3810  0FC0  3405               	retlw	5
  3811  0FC1  3400               	retlw	0
  3812                           
  3813                           ;initializer for _pwm2DutyForVout
  3814  0FC2  3405               	retlw	5
  3815  0FC3  3400               	retlw	0
  3816                           
  3817                           	psect	idataBANK1
  3818  0F88                     __pidataBANK1:	
  3819                           
  3820                           ;initializer for _bbmax
  3821  0F88  34C0               	retlw	192
  3822  0F89  34F2               	retlw	242
  3823  0F8A  34FC               	retlw	252
  3824  0F8B  34FF               	retlw	255
  3825                           
  3826                           ;initializer for _bbmin
  3827  0F8C  3440               	retlw	64
  3828  0F8D  340D               	retlw	13
  3829  0F8E  3403               	retlw	3
  3830  0F8F  3400               	retlw	0
  3831                           
  3832                           ;initializer for _pidU
  3833  0F90  3414               	retlw	20
  3834  0F91  3400               	retlw	0
  3835  0F92  3400               	retlw	0
  3836  0F93  3400               	retlw	0
  3837                           
  3838                           ;initializer for _resRc
  3839  0F94  3410               	retlw	16
  3840  0F95  3427               	retlw	39
  3841  0F96  3400               	retlw	0
  3842  0F97  3400               	retlw	0
  3843                           
  3844                           ;initializer for _resRs
  3845  0F98  3410               	retlw	16
  3846  0F99  3427               	retlw	39
  3847  0F9A  3400               	retlw	0
  3848  0F9B  3400               	retlw	0
  3849  000B                     _INTCONbits	set	11
  3850  0011                     _PIR1bits	set	17
  3851  0013                     _PIR3bits	set	19
  3852  001B                     _PR2	set	27
  3853  001C                     _T2CON	set	28
  3854  001C                     _T2CONbits	set	28
  3855  001A                     _TMR2	set	26
  3856  005F                     _GIE	set	95
  3857  009D                     _ADCON0	set	157
  3858  009D                     _ADCON0bits	set	157
  3859  009E                     _ADCON1	set	158
  3860  009F                     _ADCON2	set	159
  3861  009C                     _ADRESH	set	156
  3862  009B                     _ADRESL	set	155
  3863  0095                     _OPTION_REGbits	set	149
  3864  0091                     _PIE1bits	set	145
  3865  0093                     _PIE3bits	set	147
  3866  008C                     _TRISA	set	140
  3867  008E                     _TRISC	set	142
  3868  0097                     _WDTCON	set	151
  3869  0117                     _FVRCON	set	279
  3870  0117                     _FVRCONbits	set	279
  3871  010C                     _LATA	set	268
  3872  010E                     _LATC	set	270
  3873  018C                     _ANSELA	set	396
  3874  018E                     _ANSELC	set	398
  3875  019F                     _BAUDCON	set	415
  3876  0192                     _PMADRH	set	402
  3877  0191                     _PMADRL	set	401
  3878  0195                     _PMCON1bits	set	405
  3879  0196                     _PMCON2	set	406
  3880  0194                     _PMDATH	set	404
  3881  0193                     _PMDATL	set	403
  3882  0199                     _RCREG	set	409
  3883  019D                     _RCSTA	set	413
  3884  019D                     _RCSTAbits	set	413
  3885  019C                     _SPBRGH	set	412
  3886  019B                     _SPBRGL	set	411
  3887  019A                     _TXREG	set	410
  3888  019E                     _TXSTA	set	414
  3889  019E                     _TXSTAbits	set	414
  3890  020C                     _WPUA	set	524
  3891  020E                     _WPUC	set	526
  3892  028C                     _ODCONA	set	652
  3893  028E                     _ODCONC	set	654
  3894  0D9E                     _PWM1CLKCON	set	3486
  3895  0D9B                     _PWM1CON	set	3483
  3896  0D9B                     _PWM1CONbits	set	3483
  3897  0D94                     _PWM1DCH	set	3476
  3898  0D93                     _PWM1DCL	set	3475
  3899  0D9C                     _PWM1INTE	set	3484
  3900  0D9D                     _PWM1INTF	set	3485
  3901  0D9D                     _PWM1INTFbits	set	3485
  3902  0D9F                     _PWM1LDCON	set	3487
  3903  0DA0                     _PWM1OFCON	set	3488
  3904  0D98                     _PWM1OFH	set	3480
  3905  0D97                     _PWM1OFL	set	3479
  3906  0D92                     _PWM1PHH	set	3474
  3907  0D91                     _PWM1PHL	set	3473
  3908  0D96                     _PWM1PRH	set	3478
  3909  0D95                     _PWM1PRL	set	3477
  3910  0D9A                     _PWM1TMRH	set	3482
  3911  0D99                     _PWM1TMRL	set	3481
  3912  0DAE                     _PWM2CLKCON	set	3502
  3913  0DAB                     _PWM2CON	set	3499
  3914  0DAB                     _PWM2CONbits	set	3499
  3915  0DA4                     _PWM2DCH	set	3492
  3916  0DA3                     _PWM2DCL	set	3491
  3917  0DAC                     _PWM2INTE	set	3500
  3918  0DAD                     _PWM2INTF	set	3501
  3919  0DAD                     _PWM2INTFbits	set	3501
  3920  0DAF                     _PWM2LDCON	set	3503
  3921  0DB0                     _PWM2OFCON	set	3504
  3922  0DA8                     _PWM2OFH	set	3496
  3923  0DA7                     _PWM2OFL	set	3495
  3924  0DA2                     _PWM2PHH	set	3490
  3925  0DA1                     _PWM2PHL	set	3489
  3926  0DA6                     _PWM2PRH	set	3494
  3927  0DA5                     _PWM2PRL	set	3493
  3928  0DAA                     _PWM2TMRH	set	3498
  3929  0DA9                     _PWM2TMRL	set	3497
  3930  0E0F                     _PPSLOCK	set	3599
  3931  0E0F                     _PPSLOCKbits	set	3599
  3932  0E15                     _RXPPSbits	set	3605
  3933  0E94                     _RA4PPSbits	set	3732
  3934  0E95                     _RA5PPSbits	set	3733
  3935  0EA5                     _RC5PPSbits	set	3749
  3936                           
  3937                           	psect	stringtext
  3938  1800                     __pstringtext:	
  3939  1800                     STR_1:	
  3940  1800  3456               	retlw	86	;'V'
  3941  1801  3445               	retlw	69	;'E'
  3942  1802  3452               	retlw	82	;'R'
  3943  1803  3431               	retlw	49	;'1'
  3944  1804  342E               	retlw	46	;'.'
  3945  1805  3430               	retlw	48	;'0'
  3946  1806  3430               	retlw	48	;'0'
  3947  1807  340D               	retlw	13
  3948  1808  340A               	retlw	10
  3949  1809  3400               	retlw	0
  3950                           
  3951                           	psect	cinit
  3952  087F                     start_initialization:	
  3953                           ; #config settings
  3954                           
  3955  087F                     __initialization:		;BIGRAM
  3956                           
  3957                           ; Clear objects allocated to BIGRAM
  3958  087F  305C               	movlw	92
  3959  0880  0084               	movwf	4
  3960  0881  3023               	movlw	35
  3961  0882  0085               	movwf	5
  3962  0883  3084               	movlw	132
  3963  0884  00FE               	movwf	126
  3964  0885  01FF               	clrf	127
  3965  0886  318F  279C  3188   	fcall	clear_ram0
  3966  0889  304A               	movlw	low __pbssBANK0
  3967                           
  3968                           ; Clear objects allocated to COMMON
  3969  088A  01FC               	clrf	__pbssCOMMON& (0+127)
  3970                           
  3971                           ; Clear objects allocated to BANK0
  3972  088B  0084               	movwf	4
  3973  088C  3000               	movlw	high __pbssBANK0
  3974  088D  0085               	movwf	5
  3975  088E  3018               	movlw	24
  3976  088F  00FE               	movwf	126
  3977  0890  3000               	movlw	0
  3978  0891  00FF               	movwf	127
  3979  0892  318F  279C  3188   	fcall	clear_ram0
  3980                           
  3981                           ; Clear objects allocated to BANK1
  3982  0895  30A0               	movlw	low __pbssBANK1
  3983  0896  0084               	movwf	4
  3984  0897  3000               	movlw	high __pbssBANK1
  3985  0898  0085               	movwf	5
  3986  0899  3034               	movlw	52
  3987  089A  00FE               	movwf	126
  3988  089B  3000               	movlw	0
  3989  089C  00FF               	movwf	127
  3990  089D  318F  279C  3188   	fcall	clear_ram0
  3991                           
  3992                           ; Clear objects allocated to BANK2
  3993  08A0  3020               	movlw	low __pbssBANK2
  3994  08A1  0084               	movwf	4
  3995  08A2  3001               	movlw	high __pbssBANK2
  3996  08A3  0085               	movwf	5
  3997  08A4  301C               	movlw	28
  3998  08A5  00FE               	movwf	126
  3999  08A6  3000               	movlw	0
  4000  08A7  00FF               	movwf	127
  4001  08A8  318F  279C  3188   	fcall	clear_ram0
  4002                           
  4003                           ; Clear objects allocated to BANK3
  4004  08AB  30A0               	movlw	low __pbssBANK3
  4005  08AC  0084               	movwf	4
  4006  08AD  3001               	movlw	high __pbssBANK3
  4007  08AE  0085               	movwf	5
  4008  08AF  3040               	movlw	64
  4009  08B0  00FE               	movwf	126
  4010  08B1  3000               	movlw	0
  4011  08B2  00FF               	movwf	127
  4012  08B3  318F  279C  3188   	fcall	clear_ram0
  4013                           
  4014                           ; Clear objects allocated to BANK4
  4015  08B6  3020               	movlw	low __pbssBANK4
  4016  08B7  0084               	movwf	4
  4017  08B8  3002               	movlw	high __pbssBANK4
  4018  08B9  0085               	movwf	5
  4019  08BA  3040               	movlw	64
  4020  08BB  00FE               	movwf	126
  4021  08BC  3000               	movlw	0
  4022  08BD  00FF               	movwf	127
  4023  08BE  318F  279C  3188   	fcall	clear_ram0
  4024                           
  4025                           ; Initialize objects allocated to BANK0
  4026  08C1  30C0               	movlw	low __pidataBANK0
  4027  08C2  0084               	movwf	4
  4028  08C3  308F               	movlw	(high __pidataBANK0)| (0+128)
  4029  08C4  0085               	movwf	5
  4030  08C5  3062               	movlw	low __pdataBANK0
  4031  08C6  0086               	movwf	6
  4032  08C7  3000               	movlw	high __pdataBANK0
  4033  08C8  0087               	movwf	7
  4034  08C9  3000               	movlw	0
  4035  08CA  00FF               	movwf	127
  4036  08CB  3004               	movlw	4
  4037  08CC  318F  27A8  3188   	fcall	init_ram
  4038                           
  4039                           ; Initialize objects allocated to BANK1
  4040  08CF  3088               	movlw	low __pidataBANK1
  4041  08D0  0084               	movwf	4
  4042  08D1  308F               	movlw	(high __pidataBANK1)| (0+128)
  4043  08D2  0085               	movwf	5
  4044  08D3  30D4               	movlw	low __pdataBANK1
  4045  08D4  0086               	movwf	6
  4046  08D5  3000               	movlw	high __pdataBANK1
  4047  08D6  0087               	movwf	7
  4048  08D7  3000               	movlw	0
  4049  08D8  00FF               	movwf	127
  4050  08D9  3014               	movlw	20
  4051  08DA  318F  27A8  3188   	fcall	init_ram
  4052  08DD                     end_of_initialization:	
  4053                           ;End of C runtime variable initialization code
  4054                           
  4055  08DD                     __end_of__initialization:	
  4056  08DD  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4057  08DE  0020               	movlb	0
  4058  08DF  28E0               	ljmp	_main	;jump to C main() function
  4059  08E0                     __pmaintext:	
  4060 ;;
  4061 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  4062 ;;
  4063 ;; *************** function _main *****************
  4064 ;; Defined at:
  4065 ;;		line 17 in file "src/app/main.c"
  4066 ;; Parameters:    Size  Location     Type
  4067 ;;		None
  4068 ;; Auto vars:     Size  Location     Type
  4069 ;;		None
  4070 ;; Return value:  Size  Location     Type
  4071 ;;                  1    wreg      void 
  4072 ;; Registers used:
  4073 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4074 ;; Tracked objects:
  4075 ;;		On entry : B1F/0
  4076 ;;		On exit  : 0/0
  4077 ;;		Unchanged: 0/0
  4078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4081 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4082 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4083 ;;Total ram usage:        2 bytes
  4084 ;; Hardware stack levels required when called:    6
  4085 ;; This function calls:
  4086 ;;		_SYSTEM_Initialize
  4087 ;;		_adc_sample
  4088 ;;		_calc_expect_vout_adc_value
  4089 ;;		_calc_rs_lo_avg
  4090 ;;		_calc_temp_rc
  4091 ;;		_calc_temp_rs
  4092 ;;		_m_mem_cpy
  4093 ;;		_m_mem_cpy_len
  4094 ;;		_modbus_response_process
  4095 ;;		_pid_pwm1_idrv_b_b
  4096 ;;		_pid_pwm1_idrv_run
  4097 ;;		_pid_pwm2_vout_run
  4098 ;;		_sys_data_init
  4099 ;;		_sys_data_save
  4100 ;;		_uart_received_start
  4101 ;;		_uart_send_len
  4102 ;;		_uart_send_str
  4103 ;; This function is called by:
  4104 ;;		Startup code after reset
  4105 ;; This function uses a non-reentrant model
  4106 ;;
  4107                           
  4108                           
  4109                           ;psect for function _main
  4110  08E0                     _main:	
  4111                           
  4112                           ;main.c: 19: __nop();
  4113                           
  4114                           ;incstack = 0
  4115                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4116  08E0  0000               	nop
  4117                           
  4118                           ;main.c: 20: isRunInBoot=0xaa;
  4119  08E1  30AA               	movlw	170
  4120  08E2  003F               	movlb	31	; select bank31
  4121  08E3  00FF               	movwf	127	;volatile
  4122                           
  4123                           ;main.c: 21: SYSTEM_Initialize();
  4124  08E4  2243               	fcall	_SYSTEM_Initialize
  4125  08E5  178B               	bsf	11,7	;volatile
  4126  08E6  170B               	bsf	11,6	;volatile
  4127                           
  4128                           ;main.c: 25: TXSTAbits.TXEN=0;
  4129  08E7  0023               	movlb	3	; select bank3
  4130  08E8  129E               	bcf	30,5	;volatile
  4131                           
  4132                           ;main.c: 26: sys_data_init();
  4133  08E9  319D  251E  3188   	fcall	_sys_data_init
  4134                           
  4135                           ;main.c: 27: m_mem_cpy(str,(uint8_t*)"VER1.00\r\n");
  4136  08EC  3000               	movlw	low (STR_1| (0+32768))
  4137  08ED  00F1               	movwf	m_mem_cpy@s
  4138  08EE  3098               	movlw	high (STR_1| (0+32768))
  4139  08EF  00F2               	movwf	m_mem_cpy@s+1
  4140  08F0  302C               	movlw	(low (_str| (0+256)))& (0+255)
  4141  08F1  2693  3188         	fcall	_m_mem_cpy
  4142                           
  4143                           ;main.c: 28: uart_send_str(str);
  4144  08F3  302C               	movlw	(low (_str| (0+256)))& (0+255)
  4145  08F4  26E3  3188         	fcall	_uart_send_str
  4146                           
  4147                           ;main.c: 30: if(sysData.pidSetFlg0 != 0x55 || sysData.pidSetFlg1 != 0xaa){
  4148  08F6  2733  3188         	fcall	PL58	;call to abstracted procedure
  4149  08F8  0601               	xorwf	1,w
  4150  08F9  1D03               	btfss	3,2
  4151  08FA  2902               	goto	l4813
  4152  08FB  305C               	movlw	92
  4153  08FC  0086               	movwf	6
  4154  08FD  30AA               	movlw	170
  4155  08FE  3141               	addfsr 1,1
  4156  08FF  0601               	xorwf	1,w
  4157  0900  1903               	btfsc	3,2
  4158  0901  2904               	goto	l4815
  4159  0902                     l4813:	
  4160                           
  4161                           ;main.c: 31: pidBbSm=0;
  4162  0902  01DE               	clrf	_pidBbSm
  4163                           
  4164                           ;main.c: 32: }else{
  4165  0903  292D               	goto	l4823
  4166  0904                     l4815:	
  4167                           
  4168                           ;main.c: 33: pidBbSm=5;
  4169  0904  3005               	movlw	5
  4170  0905  00DE               	movwf	_pidBbSm
  4171                           
  4172                           ;main.c: 34: PidKp=sysData.pidKp;
  4173  0906  3197  27B5  3188   	fcall	PL30	;call to abstracted procedure
  4174  0909  3F40               	moviw [0]fsr1
  4175  090A  00C8               	movwf	??_main
  4176  090B  3F41               	moviw [1]fsr1
  4177  090C  00C9               	movwf	??_main+1
  4178  090D  0848               	movf	??_main,w
  4179  090E  0021               	movlb	1	; select bank1
  4180  090F  00AC               	movwf	_PidKp^(0+128)
  4181  0910  0020               	movlb	0	; select bank0
  4182  0911  0849               	movf	??_main+1,w
  4183                           
  4184                           ;main.c: 35: PidTd=sysData.pidTd;
  4185  0912  3197  27A6  3188   	fcall	PL22	;call to abstracted procedure
  4186  0915  3148               	addfsr 1,8
  4187  0916  271E  3188         	fcall	PL36	;call to abstracted procedure
  4188  0918  00B0               	movwf	_PidTd^(0+128)
  4189  0919  0020               	movlb	0	; select bank0
  4190  091A  0849               	movf	??_main+1,w
  4191  091B  0021               	movlb	1	; select bank1
  4192  091C  00B1               	movwf	(_PidTd^(0+128)+1)
  4193  091D  305C               	movlw	92
  4194  091E  01B2               	clrf	(_PidTd^(0+128)+2)
  4195  091F  01B3               	clrf	(_PidTd^(0+128)+3)
  4196                           
  4197                           ;main.c: 36: PidTi=sysData.pidTi;
  4198  0920  0086               	movwf	6
  4199  0921  3023               	movlw	35
  4200  0922  0087               	movwf	7
  4201  0923  3146               	addfsr 1,6
  4202  0924  271E  3188         	fcall	PL36	;call to abstracted procedure
  4203  0926  00B4               	movwf	_PidTi^(0+128)
  4204  0927  0020               	movlb	0	; select bank0
  4205  0928  0849               	movf	??_main+1,w
  4206  0929  0021               	movlb	1	; select bank1
  4207  092A  00B5               	movwf	(_PidTi^(0+128)+1)
  4208  092B  01B6               	clrf	(_PidTi^(0+128)+2)
  4209  092C  01B7               	clrf	(_PidTi^(0+128)+3)
  4210  092D                     l4823:	
  4211                           
  4212                           ;main.c: 40: if(Event & (1<<2)){
  4213  092D  0020               	movlb	0	; select bank0
  4214  092E  1D5C               	btfss	_Event,2	;volatile
  4215  092F  29EB               	goto	l4865
  4216                           
  4217                           ;main.c: 41: Event &= ~(1<<2);
  4218  0930  115C               	bcf	_Event,2	;volatile
  4219  0931  3020               	movlw	32
  4220                           
  4221                           ;main.c: 43: rtAdcValueRsLo=adc_sample(channel_AN6,1,32);
  4222  0932  01F3               	clrf	adc_sample@gfvr
  4223  0933  0AF3               	incf	adc_sample@gfvr,f
  4224  0934  00F4               	movwf	adc_sample@num
  4225  0935  3006               	movlw	6
  4226  0936  220B  3188         	fcall	_adc_sample
  4227  0938  0874               	movf	?_adc_sample+1,w
  4228  0939  0020               	movlb	0	; select bank0
  4229  093A  00D5               	movwf	_rtAdcValueRsLo+1
  4230  093B  0873               	movf	?_adc_sample,w
  4231  093C  00D4               	movwf	_rtAdcValueRsLo
  4232                           
  4233                           ;main.c: 45: rtAdcValueRsHi=adc_sample(channel_AN5,3,32);
  4234  093D  3003               	movlw	3
  4235  093E  00F3               	movwf	adc_sample@gfvr
  4236  093F  3020               	movlw	32
  4237  0940  00F4               	movwf	adc_sample@num
  4238  0941  3005               	movlw	5
  4239  0942  220B  3188         	fcall	_adc_sample
  4240  0944  0874               	movf	?_adc_sample+1,w
  4241  0945  0020               	movlb	0	; select bank0
  4242  0946  00D3               	movwf	_rtAdcValueRsHi+1
  4243  0947  0873               	movf	?_adc_sample,w
  4244  0948  00D2               	movwf	_rtAdcValueRsHi
  4245                           
  4246                           ;main.c: 48: rtAdcValueRcLo=adc_sample(channel_AN4,3,32);
  4247  0949  3003               	movlw	3
  4248  094A  00F3               	movwf	adc_sample@gfvr
  4249  094B  3020               	movlw	32
  4250  094C  00F4               	movwf	adc_sample@num
  4251  094D  3004               	movlw	4
  4252  094E  220B  3188         	fcall	_adc_sample
  4253  0950  0874               	movf	?_adc_sample+1,w
  4254  0951  0020               	movlb	0	; select bank0
  4255  0952  00D1               	movwf	_rtAdcValueRcLo+1
  4256  0953  0873               	movf	?_adc_sample,w
  4257  0954  00D0               	movwf	_rtAdcValueRcLo
  4258  0955  3003               	movlw	3
  4259                           
  4260                           ;main.c: 49: rtAdcValueRcLo>>=1;
  4261  0956  36D1               	lsrf	_rtAdcValueRcLo+1,f
  4262  0957  0CD0               	rrf	_rtAdcValueRcLo,f
  4263                           
  4264                           ;main.c: 50: rtAdcValueRcHi=adc_sample(channel_AN2,3,32);
  4265  0958  00F3               	movwf	adc_sample@gfvr
  4266  0959  3020               	movlw	32
  4267  095A  00F4               	movwf	adc_sample@num
  4268  095B  3002               	movlw	2
  4269  095C  220B  3188         	fcall	_adc_sample
  4270  095E  0874               	movf	?_adc_sample+1,w
  4271  095F  0020               	movlb	0	; select bank0
  4272  0960  00CF               	movwf	_rtAdcValueRcHi+1
  4273  0961  0873               	movf	?_adc_sample,w
  4274  0962  00CE               	movwf	_rtAdcValueRcHi
  4275  0963  3003               	movlw	3
  4276                           
  4277                           ;main.c: 51: rtAdcValueRcHi>>=1;
  4278  0964  36CF               	lsrf	_rtAdcValueRcHi+1,f
  4279  0965  0CCE               	rrf	_rtAdcValueRcHi,f
  4280                           
  4281                           ;main.c: 53: rtAdcValueVoFb=adc_sample(channel_AN7,3,32);
  4282  0966  00F3               	movwf	adc_sample@gfvr
  4283  0967  3020               	movlw	32
  4284  0968  00F4               	movwf	adc_sample@num
  4285  0969  3007               	movlw	7
  4286  096A  220B               	fcall	_adc_sample
  4287  096B  0874               	movf	?_adc_sample+1,w
  4288  096C  0020               	movlb	0	; select bank0
  4289  096D  00D7               	movwf	_rtAdcValueVoFb+1
  4290  096E  0873               	movf	?_adc_sample,w
  4291  096F  00D6               	movwf	_rtAdcValueVoFb
  4292                           
  4293                           ;main.c: 54: rtAdcValueVoFb>>=1;
  4294  0970  36D7               	lsrf	_rtAdcValueVoFb+1,f
  4295  0971  0CD6               	rrf	_rtAdcValueVoFb,f
  4296                           
  4297                           ;main.c: 56: resRc=calc_temp_rc();
  4298  0972  3190  203E  3188   	fcall	_calc_temp_rc
  4299  0975  0828               	movf	?_calc_temp_rc+3,w
  4300  0976  0021               	movlb	1	; select bank1
  4301  0977  00E3               	movwf	(_resRc+3)^(0+128)
  4302  0978  0020               	movlb	0	; select bank0
  4303  0979  0827               	movf	?_calc_temp_rc+2,w
  4304  097A  0021               	movlb	1	; select bank1
  4305  097B  00E2               	movwf	(_resRc+2)^(0+128)
  4306  097C  0020               	movlb	0	; select bank0
  4307  097D  0826               	movf	?_calc_temp_rc+1,w
  4308  097E  0021               	movlb	1	; select bank1
  4309  097F  00E1               	movwf	(_resRc+1)^(0+128)
  4310  0980  0020               	movlb	0	; select bank0
  4311  0981  0825               	movf	?_calc_temp_rc,w
  4312  0982  0021               	movlb	1	; select bank1
  4313  0983  00E0               	movwf	_resRc^(0+128)
  4314                           
  4315                           ;main.c: 57: resRs=calc_temp_rs();
  4316  0984  233A  3188         	fcall	_calc_temp_rs
  4317  0986  0828               	movf	?_calc_temp_rs+3,w
  4318  0987  0021               	movlb	1	; select bank1
  4319  0988  00E7               	movwf	(_resRs+3)^(0+128)
  4320  0989  0020               	movlb	0	; select bank0
  4321  098A  0827               	movf	?_calc_temp_rs+2,w
  4322  098B  0021               	movlb	1	; select bank1
  4323  098C  00E6               	movwf	(_resRs+2)^(0+128)
  4324  098D  0020               	movlb	0	; select bank0
  4325  098E  0826               	movf	?_calc_temp_rs+1,w
  4326  098F  0021               	movlb	1	; select bank1
  4327  0990  00E5               	movwf	(_resRs+1)^(0+128)
  4328  0991  0020               	movlb	0	; select bank0
  4329  0992  0825               	movf	?_calc_temp_rs,w
  4330  0993  0021               	movlb	1	; select bank1
  4331  0994  00E4               	movwf	_resRs^(0+128)
  4332                           
  4333                           ;main.c: 59: __nop();
  4334  0995  0000               	nop
  4335                           
  4336                           ;main.c: 60: if(pidBbSm>=5){
  4337  0996  3005               	movlw	5
  4338  0997  0020               	movlb	0	; select bank0
  4339  0998  025E               	subwf	_pidBbSm,w
  4340  0999  1C03               	skipc
  4341  099A  29BB               	goto	l4851
  4342                           
  4343                           ;main.c: 61: pid_pwm1_idrv_run();
  4344  099B  3190  20E7  3188   	fcall	_pid_pwm1_idrv_run
  4345                           
  4346                           ;main.c: 64: rsLoAvg=calc_rs_lo_avg(rtAdcValueRsLo);
  4347  099E  0020               	movlb	0	; select bank0
  4348  099F  0855               	movf	_rtAdcValueRsLo+1,w
  4349  09A0  00FA               	movwf	calc_rs_lo_avg@x+1
  4350  09A1  0854               	movf	_rtAdcValueRsLo,w
  4351  09A2  00F9               	movwf	calc_rs_lo_avg@x
  4352  09A3  22EB               	fcall	_calc_rs_lo_avg
  4353  09A4  087A               	movf	?_calc_rs_lo_avg+1,w
  4354  09A5  00CD               	movwf	_rsLoAvg+1
  4355  09A6  0879               	movf	?_calc_rs_lo_avg,w
  4356  09A7  00CC               	movwf	_rsLoAvg
  4357                           
  4358                           ;main.c: 65: voExpectMv=calc_expect_vout_adc_value(rsLoAvg);
  4359  09A8  084D               	movf	_rsLoAvg+1,w
  4360  09A9  00B3               	movwf	calc_expect_vout_adc_value@x+1
  4361  09AA  084C               	movf	_rsLoAvg,w
  4362  09AB  00B2               	movwf	calc_expect_vout_adc_value@x
  4363  09AC  3193  2360  3188   	fcall	_calc_expect_vout_adc_value
  4364  09AF  0833               	movf	?_calc_expect_vout_adc_value+1,w
  4365  09B0  00DB               	movwf	_voExpectMv+1
  4366  09B1  0832               	movf	?_calc_expect_vout_adc_value,w
  4367  09B2  00DA               	movwf	_voExpectMv
  4368                           
  4369                           ;main.c: 66: voExpectAdcValue=(voExpectMv<<1);
  4370  09B3  355A               	lslf	_voExpectMv,w
  4371  09B4  00D8               	movwf	_voExpectAdcValue
  4372  09B5  0D5B               	rlf	_voExpectMv+1,w
  4373  09B6  00D9               	movwf	_voExpectAdcValue+1
  4374                           
  4375                           ;main.c: 67: pid_pwm2_vout_run();
  4376  09B7  319E  2608  3188   	fcall	_pid_pwm2_vout_run
  4377                           
  4378                           ;main.c: 68: }else{
  4379  09BA  29EB               	goto	l4865
  4380  09BB                     l4851:	
  4381                           
  4382                           ;main.c: 69: pid_pwm1_idrv_b_b();
  4383  09BB  23C8  3188         	fcall	_pid_pwm1_idrv_b_b
  4384                           
  4385                           ;main.c: 71: if(pidBbSm>=5){
  4386  09BD  3005               	movlw	5
  4387  09BE  0020               	movlb	0	; select bank0
  4388  09BF  025E               	subwf	_pidBbSm,w
  4389  09C0  1C03               	skipc
  4390  09C1  29EB               	goto	l4865
  4391                           
  4392                           ;main.c: 72: sysData.pidSetFlg0 = 0x55;
  4393  09C2  2733               	fcall	PL58	;call to abstracted procedure
  4394  09C3  3FC0               	movwi [0]fsr1
  4395                           
  4396                           ;main.c: 73: sysData.pidSetFlg1 = 0xaa;
  4397  09C4  305D               	movlw	93
  4398  09C5  0086               	movwf	6
  4399  09C6  30AA               	movlw	170
  4400  09C7  0081               	movwf	1
  4401                           
  4402                           ;main.c: 74: sysData.pidKp=(uint16_t)PidKp;
  4403  09C8  305C               	movlw	92
  4404  09C9  0086               	movwf	6
  4405  09CA  3144               	addfsr 1,4
  4406  09CB  0021               	movlb	1	; select bank1
  4407  09CC  082C               	movf	_PidKp^(0+128),w
  4408  09CD  3FC0               	movwi [0]fsr1
  4409  09CE  082D               	movf	(_PidKp+1)^(0+128),w
  4410  09CF  3FC1               	movwi [1]fsr1
  4411                           
  4412                           ;main.c: 75: sysData.pidTd=(uint16_t)PidTd;
  4413  09D0  3197  27C9  3188   	fcall	PL40	;call to abstracted procedure
  4414  09D3  0830               	movf	_PidTd^(0+128),w
  4415  09D4  3FC0               	movwi [0]fsr1
  4416  09D5  0831               	movf	(_PidTd+1)^(0+128),w
  4417  09D6  3FC1               	movwi [1]fsr1
  4418                           
  4419                           ;main.c: 76: sysData.pidTi=(uint16_t)PidTi;
  4420  09D7  3197  27D4  3188   	fcall	PL44	;call to abstracted procedure
  4421  09DA  0834               	movf	_PidTi^(0+128),w
  4422  09DB  3FC0               	movwi [0]fsr1
  4423  09DC  0835               	movf	(_PidTi+1)^(0+128),w
  4424  09DD  3FC1               	movwi [1]fsr1
  4425                           
  4426                           ;main.c: 77: sys_data_save();
  4427  09DE  3196  2619  3188   	fcall	_sys_data_save
  4428                           
  4429                           ;main.c: 78: modbusBuf[0]=0x55;
  4430  09E1  3055               	movlw	85
  4431  09E2  0024               	movlb	4	; select bank4
  4432  09E3  00A0               	movwf	_modbusBuf^(0+512)
  4433                           
  4434                           ;main.c: 79: modbusBuf[1]=0xaa;
  4435  09E4  30AA               	movlw	170
  4436  09E5  00A1               	movwf	(_modbusBuf^(0+512)+1)
  4437                           
  4438                           ;main.c: 80: uart_send_len(modbusBuf,2);
  4439  09E6  3002               	movlw	2
  4440  09E7  00F1               	movwf	uart_send_len@len
  4441  09E8  3020               	movlw	(low (_modbusBuf| (0+512)))& (0+255)
  4442  09E9  26B0  3188         	fcall	_uart_send_len
  4443  09EB                     l4865:	
  4444                           
  4445                           ;main.c: 81: }
  4446                           ;main.c: 82: }
  4447                           ;main.c: 84: }
  4448                           ;main.c: 86: if(Event & (1<<3)){
  4449  09EB  0020               	movlb	0	; select bank0
  4450  09EC  19DC               	btfsc	_Event,3	;volatile
  4451                           
  4452                           ;main.c: 87: Event &= ~(1<<3);
  4453  09ED  11DC               	bcf	_Event,3	;volatile
  4454                           
  4455                           ;main.c: 129: }
  4456                           ;main.c: 131: if(Event & (1<<0)){
  4457  09EE  1C5C               	btfss	_Event,0	;volatile
  4458  09EF  2A09               	goto	l4879
  4459                           
  4460                           ;main.c: 132: Event &= ~ (1<<0);
  4461  09F0  105C               	bcf	_Event,0	;volatile
  4462                           
  4463                           ;main.c: 133: if(eusartRxCount>0){
  4464  09F1  087C               	movf	_eusartRxCount,w	;volatile
  4465  09F2  1903               	btfsc	3,2
  4466  09F3  2A07               	goto	l4877
  4467                           
  4468                           ;main.c: 134: m_mem_cpy_len(modbusBuf,eusartRxBuffer,eusartRxCount);
  4469  09F4  3020               	movlw	low _modbusBuf
  4470  09F5  00F1               	movwf	m_mem_cpy_len@d
  4471  09F6  3002               	movlw	high _modbusBuf
  4472  09F7  00F2               	movwf	m_mem_cpy_len@d+1
  4473  09F8  30A0               	movlw	low _eusartRxBuffer
  4474  09F9  00F3               	movwf	m_mem_cpy_len@s
  4475  09FA  3001               	movlw	high _eusartRxBuffer
  4476  09FB  00F4               	movwf	m_mem_cpy_len@s+1
  4477  09FC  087C               	movf	_eusartRxCount,w	;volatile
  4478  09FD  00F5               	movwf	m_mem_cpy_len@len
  4479  09FE  01F6               	clrf	m_mem_cpy_len@len+1
  4480  09FF  23AD               	fcall	_m_mem_cpy_len
  4481                           
  4482                           ;main.c: 135: modbus_response_process(modbusBuf,eusartRxCount);
  4483  0A00  087C               	movf	_eusartRxCount,w	;volatile
  4484  0A01  00BA               	movwf	modbus_response_process@rlen
  4485  0A02  3020               	movlw	(low (_modbusBuf| (0+512)))& (0+255)
  4486  0A03  01BB               	clrf	modbus_response_process@rlen+1
  4487  0A04  3194  24C3  3188   	fcall	_modbus_response_process
  4488  0A07                     l4877:	
  4489                           
  4490                           ;main.c: 137: }
  4491                           ;main.c: 139: uart_received_start();
  4492  0A07  26D5  3188         	fcall	_uart_received_start
  4493  0A09                     l4879:	
  4494                           
  4495                           ;main.c: 140: }
  4496                           ;main.c: 142: __nop();
  4497  0A09  0000               	nop
  4498  0A0A  292D               	goto	l4823
  4499  0A0B                     __end_of_main:	
  4500  0A0B                     __ptext38:	
  4501 ;; *************** function _adc_sample *****************
  4502 ;; Defined at:
  4503 ;;		line 149 in file "src/api/sample.c"
  4504 ;; Parameters:    Size  Location     Type
  4505 ;;  ch              1    wreg     unsigned char 
  4506 ;;  gfvr            1    3[COMMON] unsigned char 
  4507 ;;  num             1    4[COMMON] unsigned char 
  4508 ;; Auto vars:     Size  Location     Type
  4509 ;;  ch              1    6[COMMON] unsigned char 
  4510 ;;  t16             2   10[COMMON] unsigned int 
  4511 ;;  ret             2    7[COMMON] unsigned int 
  4512 ;;  i               1    9[COMMON] unsigned char 
  4513 ;; Return value:  Size  Location     Type
  4514 ;;                  2    3[COMMON] unsigned int 
  4515 ;; Registers used:
  4516 ;;		wreg, status,2, status,0, pclath, cstack
  4517 ;; Tracked objects:
  4518 ;;		On entry : 1F/0
  4519 ;;		On exit  : 0/0
  4520 ;;		Unchanged: 0/0
  4521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4522 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4523 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4524 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4525 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4526 ;;Total ram usage:        9 bytes
  4527 ;; Hardware stack levels used:    1
  4528 ;; Hardware stack levels required when called:    2
  4529 ;; This function calls:
  4530 ;;		_adc_init
  4531 ;;		_fvr_set_gain
  4532 ;; This function is called by:
  4533 ;;		_main
  4534 ;; This function uses a non-reentrant model
  4535 ;;
  4536                           
  4537                           
  4538                           ;psect for function _adc_sample
  4539  0A0B                     _adc_sample:	
  4540                           
  4541                           ;incstack = 0
  4542                           ; Regs used in _adc_sample: [wreg+status,2+status,0+pclath+cstack]
  4543                           ;adc_sample@ch stored from wreg
  4544  0A0B  00F6               	movwf	adc_sample@ch
  4545                           
  4546                           ;sample.c: 151: uint8_t i;
  4547                           ;sample.c: 152: uint16_t ret=0;
  4548  0A0C  01F7               	clrf	adc_sample@ret
  4549  0A0D  01F8               	clrf	adc_sample@ret+1
  4550                           
  4551                           ;sample.c: 155: fvr_set_gain(gfvr);
  4552  0A0E  0873               	movf	adc_sample@gfvr,w
  4553  0A0F  22DA  3188         	fcall	_fvr_set_gain
  4554                           
  4555                           ;sample.c: 156: adc_init((adc_channel_t)ch);
  4556  0A11  0876               	movf	adc_sample@ch,w
  4557  0A12  22CB  3188         	fcall	_adc_init
  4558                           
  4559                           ;sample.c: 157: _delay((unsigned long)((10)*(16000000/4000000.0)));
  4560  0A14  300D               	movlw	13
  4561  0A15  00F5               	movwf	??_adc_sample
  4562  0A16                     u3697:	
  4563  0A16  0BF5               	decfsz	??_adc_sample,f
  4564  0A17  2A16               	goto	u3697
  4565                           
  4566                           ;sample.c: 158: if(num>64)num=64;
  4567  0A18  3041               	movlw	65
  4568  0A19  0274               	subwf	adc_sample@num,w
  4569  0A1A  1C03               	skipc
  4570  0A1B  2A1E               	goto	l3711
  4571  0A1C  3040               	movlw	64
  4572  0A1D  00F4               	movwf	adc_sample@num
  4573  0A1E                     l3711:	
  4574                           
  4575                           ;sample.c: 159: for(i=0;i<num;i++){
  4576  0A1E  01F9               	clrf	adc_sample@i
  4577  0A1F                     l3719:	
  4578  0A1F  0874               	movf	adc_sample@num,w
  4579  0A20  0279               	subwf	adc_sample@i,w
  4580  0A21  1803               	btfsc	3,0
  4581  0A22  2A3E               	goto	l3721
  4582                           
  4583                           ;sample.c: 160: ADCON0bits.GO_nDONE = 1;
  4584  0A23  0021               	movlb	1	; select bank1
  4585  0A24  149D               	bsf	29,1	;volatile
  4586  0A25                     l629:	
  4587                           ;sample.c: 161: while (ADCON0bits.GO_nDONE);
  4588                           
  4589  0A25  189D               	btfsc	29,1	;volatile
  4590  0A26  2A25               	goto	l629
  4591                           
  4592                           ;sample.c: 162: __nop();
  4593  0A27  0000               	nop
  4594                           
  4595                           ;sample.c: 163: t16=ADRESH;
  4596  0A28  0021               	movlb	1	; select bank1
  4597  0A29  081C               	movf	28,w	;volatile
  4598  0A2A  00FA               	movwf	adc_sample@t16
  4599  0A2B  01FB               	clrf	adc_sample@t16+1
  4600                           
  4601                           ;sample.c: 164: t16<<=2;
  4602  0A2C  35FA               	lslf	adc_sample@t16,f
  4603  0A2D  0DFB               	rlf	adc_sample@t16+1,f
  4604  0A2E  35FA               	lslf	adc_sample@t16,f
  4605  0A2F  0DFB               	rlf	adc_sample@t16+1,f
  4606                           
  4607                           ;sample.c: 165: t16|=(ADRESL>>6);
  4608  0A30  081B               	movf	27,w	;volatile
  4609  0A31  00F5               	movwf	??_adc_sample
  4610  0A32  3006               	movlw	6
  4611  0A33                     u2335:	
  4612  0A33  36F5               	lsrf	??_adc_sample,f
  4613  0A34  0B89               	decfsz	9,f
  4614  0A35  2A33               	goto	u2335
  4615  0A36  0875               	movf	??_adc_sample,w
  4616  0A37  04FA               	iorwf	adc_sample@t16,f
  4617                           
  4618                           ;sample.c: 167: ret+=t16;
  4619  0A38  087A               	movf	adc_sample@t16,w
  4620  0A39  07F7               	addwf	adc_sample@ret,f
  4621  0A3A  087B               	movf	adc_sample@t16+1,w
  4622  0A3B  3DF8               	addwfc	adc_sample@ret+1,f
  4623  0A3C  0AF9               	incf	adc_sample@i,f
  4624  0A3D  2A1F               	goto	l3719
  4625  0A3E                     l3721:	
  4626                           
  4627                           ;sample.c: 172: return ret;
  4628  0A3E  0878               	movf	adc_sample@ret+1,w
  4629  0A3F  00F4               	movwf	?_adc_sample+1
  4630  0A40  0877               	movf	adc_sample@ret,w
  4631  0A41  00F3               	movwf	?_adc_sample
  4632  0A42  0008               	return
  4633  0A43                     __end_of_adc_sample:	
  4634  0A43                     __ptext41:	
  4635 ;; *************** function _SYSTEM_Initialize *****************
  4636 ;; Defined at:
  4637 ;;		line 70 in file "mcc_generated_files/mcc.c"
  4638 ;; Parameters:    Size  Location     Type
  4639 ;;		None
  4640 ;; Auto vars:     Size  Location     Type
  4641 ;;		None
  4642 ;; Return value:  Size  Location     Type
  4643 ;;                  1    wreg      void 
  4644 ;; Registers used:
  4645 ;;		wreg, status,2, status,0, pclath, cstack
  4646 ;; Tracked objects:
  4647 ;;		On entry : 1F/1F
  4648 ;;		On exit  : 1F/0
  4649 ;;		Unchanged: 0/0
  4650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4654 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4655 ;;Total ram usage:        0 bytes
  4656 ;; Hardware stack levels used:    1
  4657 ;; Hardware stack levels required when called:    3
  4658 ;; This function calls:
  4659 ;;		_ADC1_Initialize
  4660 ;;		_EUSART_Initialize
  4661 ;;		_FVR_Initialize
  4662 ;;		_OSCILLATOR_Initialize
  4663 ;;		_PIN_MANAGER_Initialize
  4664 ;;		_PWM1_Initialize
  4665 ;;		_PWM2_Initialize
  4666 ;;		_TMR2_Initialize
  4667 ;;		_WDT_Initialize
  4668 ;; This function is called by:
  4669 ;;		_main
  4670 ;; This function uses a non-reentrant model
  4671 ;;
  4672                           
  4673                           
  4674                           ;psect for function _SYSTEM_Initialize
  4675  0A43                     _SYSTEM_Initialize:	
  4676                           
  4677                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  4678                           
  4679                           ;incstack = 0
  4680                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4681  0A43  225D  3188         	fcall	_PIN_MANAGER_Initialize
  4682                           
  4683                           ;mcc.c: 74: OSCILLATOR_Initialize();
  4684  0A45  225C  3188         	fcall	_OSCILLATOR_Initialize
  4685                           
  4686                           ;mcc.c: 75: WDT_Initialize();
  4687  0A47  22C7  3188         	fcall	_WDT_Initialize
  4688                           
  4689                           ;mcc.c: 76: FVR_Initialize();
  4690  0A49  2258  3188         	fcall	_FVR_Initialize
  4691                           
  4692                           ;mcc.c: 77: PWM1_Initialize();
  4693  0A4B  2296  3188         	fcall	_PWM1_Initialize
  4694                           
  4695                           ;mcc.c: 78: PWM2_Initialize();
  4696  0A4D  22AF  3188         	fcall	_PWM2_Initialize
  4697                           
  4698                           ;mcc.c: 79: ADC1_Initialize();
  4699  0A4F  2254  3188         	fcall	_ADC1_Initialize
  4700                           
  4701                           ;mcc.c: 80: TMR2_Initialize();
  4702  0A51  2757  3188         	fcall	_TMR2_Initialize
  4703                           
  4704                           ;mcc.c: 81: EUSART_Initialize();
  4705  0A53  2F44               	ljmp	l3233
  4706  0A54                     __end_of_SYSTEM_Initialize:	
  4707  0A54                     __ptext52:	
  4708 ;; *************** function _ADC1_Initialize *****************
  4709 ;; Defined at:
  4710 ;;		line 64 in file "mcc_generated_files/adc1.c"
  4711 ;; Parameters:    Size  Location     Type
  4712 ;;		None
  4713 ;; Auto vars:     Size  Location     Type
  4714 ;;		None
  4715 ;; Return value:  Size  Location     Type
  4716 ;;                  1    wreg      void 
  4717 ;; Registers used:
  4718 ;;		wreg, status,2
  4719 ;; Tracked objects:
  4720 ;;		On entry : 1F/1B
  4721 ;;		On exit  : 1F/1
  4722 ;;		Unchanged: 0/0
  4723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4727 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4728 ;;Total ram usage:        0 bytes
  4729 ;; Hardware stack levels used:    1
  4730 ;; Hardware stack levels required when called:    1
  4731 ;; This function calls:
  4732 ;;		Nothing
  4733 ;; This function is called by:
  4734 ;;		_SYSTEM_Initialize
  4735 ;; This function uses a non-reentrant model
  4736 ;;
  4737                           
  4738                           
  4739                           ;psect for function _ADC1_Initialize
  4740  0A54                     _ADC1_Initialize:	
  4741                           
  4742                           ;adc1.c: 69: ADCON0 = 0x01;
  4743                           
  4744                           ;incstack = 0
  4745                           ; Regs used in _ADC1_Initialize: [wreg+status,2]
  4746  0A54  3001               	movlw	1
  4747  0A55  0021               	movlb	1	; select bank1
  4748  0A56  009D               	movwf	29	;volatile
  4749                           
  4750                           ;adc1.c: 72: ADCON1 = 0x63;
  4751                           
  4752                           ;adc1.c: 75: ADCON2 = 0x00;
  4753                           
  4754                           ;adc1.c: 78: ADRESL = 0x00;
  4755                           
  4756                           ;adc1.c: 81: ADRESH = 0x00;
  4757  0A57  2F26               	ljmp	PL46	;call to abstracted procedure
  4758  0A58                     __end_of_ADC1_Initialize:	
  4759  0A58                     __ptext50:	
  4760 ;; *************** function _FVR_Initialize *****************
  4761 ;; Defined at:
  4762 ;;		line 57 in file "mcc_generated_files/fvr.c"
  4763 ;; Parameters:    Size  Location     Type
  4764 ;;		None
  4765 ;; Auto vars:     Size  Location     Type
  4766 ;;		None
  4767 ;; Return value:  Size  Location     Type
  4768 ;;                  1    wreg      void 
  4769 ;; Registers used:
  4770 ;;		wreg
  4771 ;; Tracked objects:
  4772 ;;		On entry : 1F/1
  4773 ;;		On exit  : 1F/2
  4774 ;;		Unchanged: 0/0
  4775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4779 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4780 ;;Total ram usage:        0 bytes
  4781 ;; Hardware stack levels used:    1
  4782 ;; Hardware stack levels required when called:    1
  4783 ;; This function calls:
  4784 ;;		Nothing
  4785 ;; This function is called by:
  4786 ;;		_SYSTEM_Initialize
  4787 ;; This function uses a non-reentrant model
  4788 ;;
  4789                           
  4790                           
  4791                           ;psect for function _FVR_Initialize
  4792  0A58                     _FVR_Initialize:	
  4793                           
  4794                           ;fvr.c: 60: FVRCON = 0x81;
  4795                           
  4796                           ;incstack = 0
  4797                           ; Regs used in _FVR_Initialize: [wreg]
  4798  0A58  3081               	movlw	129
  4799  0A59  0022               	movlb	2	; select bank2
  4800  0A5A  0097               	movwf	23	;volatile
  4801  0A5B  0008               	return
  4802  0A5C                     __end_of_FVR_Initialize:	
  4803  0A5C                     __ptext49:	
  4804 ;; *************** function _OSCILLATOR_Initialize *****************
  4805 ;; Defined at:
  4806 ;;		line 84 in file "mcc_generated_files/mcc.c"
  4807 ;; Parameters:    Size  Location     Type
  4808 ;;		None
  4809 ;; Auto vars:     Size  Location     Type
  4810 ;;		None
  4811 ;; Return value:  Size  Location     Type
  4812 ;;                  1    wreg      void 
  4813 ;; Registers used:
  4814 ;;		None
  4815 ;; Tracked objects:
  4816 ;;		On entry : 0/1F
  4817 ;;		On exit  : 0/0
  4818 ;;		Unchanged: 0/0
  4819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4823 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4824 ;;Total ram usage:        0 bytes
  4825 ;; Hardware stack levels used:    1
  4826 ;; Hardware stack levels required when called:    1
  4827 ;; This function calls:
  4828 ;;		Nothing
  4829 ;; This function is called by:
  4830 ;;		_SYSTEM_Initialize
  4831 ;; This function uses a non-reentrant model
  4832 ;;
  4833                           
  4834                           
  4835                           ;psect for function _OSCILLATOR_Initialize
  4836  0A5C                     _OSCILLATOR_Initialize:	
  4837                           
  4838                           ;incstack = 0
  4839                           ; Regs used in _OSCILLATOR_Initialize: []
  4840  0A5C  0008               	return
  4841  0A5D                     __end_of_OSCILLATOR_Initialize:	
  4842  0A5D                     __ptext48:	
  4843 ;; *************** function _PIN_MANAGER_Initialize *****************
  4844 ;; Defined at:
  4845 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  4846 ;; Parameters:    Size  Location     Type
  4847 ;;		None
  4848 ;; Auto vars:     Size  Location     Type
  4849 ;;  state           1    1[COMMON] unsigned char 
  4850 ;; Return value:  Size  Location     Type
  4851 ;;                  1    wreg      void 
  4852 ;; Registers used:
  4853 ;;		wreg, status,2, status,0
  4854 ;; Tracked objects:
  4855 ;;		On entry : 1F/1F
  4856 ;;		On exit  : 0/0
  4857 ;;		Unchanged: 0/0
  4858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4860 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4862 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4863 ;;Total ram usage:        1 bytes
  4864 ;; Hardware stack levels used:    1
  4865 ;; Hardware stack levels required when called:    1
  4866 ;; This function calls:
  4867 ;;		Nothing
  4868 ;; This function is called by:
  4869 ;;		_SYSTEM_Initialize
  4870 ;; This function uses a non-reentrant model
  4871 ;;
  4872                           
  4873                           
  4874                           ;psect for function _PIN_MANAGER_Initialize
  4875  0A5D                     _PIN_MANAGER_Initialize:	
  4876                           
  4877                           ;pin_manager.c: 57: LATA = 0x00;
  4878                           
  4879                           ;incstack = 0
  4880                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
  4881  0A5D  0022               	movlb	2	; select bank2
  4882  0A5E  018C               	clrf	12	;volatile
  4883                           
  4884                           ;pin_manager.c: 58: LATC = 0x00;
  4885  0A5F  018E               	clrf	14	;volatile
  4886                           
  4887                           ;pin_manager.c: 63: TRISA = 0x0F;
  4888  0A60  300F               	movlw	15
  4889  0A61  0021               	movlb	1	; select bank1
  4890  0A62  008C               	movwf	12	;volatile
  4891                           
  4892                           ;pin_manager.c: 64: TRISC = 0x1f;
  4893  0A63  301F               	movlw	31
  4894  0A64  008E               	movwf	14	;volatile
  4895                           
  4896                           ;pin_manager.c: 69: ANSELC = 0x0F;
  4897  0A65  300F               	movlw	15
  4898  0A66  0023               	movlb	3	; select bank3
  4899  0A67  008E               	movwf	14	;volatile
  4900                           
  4901                           ;pin_manager.c: 70: ANSELA = 0x17;
  4902  0A68  3017               	movlw	23
  4903  0A69  008C               	movwf	12	;volatile
  4904                           
  4905                           ;pin_manager.c: 75: WPUA = 0x3B;
  4906  0A6A  303B               	movlw	59
  4907  0A6B  0024               	movlb	4	; select bank4
  4908  0A6C  008C               	movwf	12	;volatile
  4909                           
  4910                           ;pin_manager.c: 76: WPUC = 0x30;
  4911  0A6D  3030               	movlw	48
  4912  0A6E  008E               	movwf	14	;volatile
  4913                           
  4914                           ;pin_manager.c: 77: OPTION_REGbits.nWPUEN = 0;
  4915  0A6F  0021               	movlb	1	; select bank1
  4916  0A70  1395               	bcf	21,7	;volatile
  4917                           
  4918                           ;pin_manager.c: 82: ODCONA = 0x00;
  4919  0A71  0025               	movlb	5	; select bank5
  4920  0A72  018C               	clrf	12	;volatile
  4921                           
  4922                           ;pin_manager.c: 83: ODCONC = 0x00;
  4923  0A73  018E               	clrf	14	;volatile
  4924                           
  4925                           ;pin_manager.c: 85: bool state = (unsigned char)GIE;
  4926  0A74  3000               	movlw	0
  4927  0A75  1B8B               	btfsc	11,7	;volatile
  4928  0A76  3001               	movlw	1
  4929  0A77  00F1               	movwf	PIN_MANAGER_Initialize@state
  4930                           
  4931                           ;pin_manager.c: 86: GIE = 0;
  4932  0A78  138B               	bcf	11,7	;volatile
  4933                           
  4934                           ;pin_manager.c: 87: PPSLOCK = 0x55;
  4935                           
  4936                           ;pin_manager.c: 88: PPSLOCK = 0xAA;
  4937  0A79  2738  3188         	fcall	PL60	;call to abstracted procedure
  4938                           
  4939                           ;pin_manager.c: 89: PPSLOCKbits.PPSLOCKED = 0x00;
  4940  0A7B  100F               	bcf	15,0	;volatile
  4941                           
  4942                           ;pin_manager.c: 91: RXPPSbits.RXPPS = 0x14;
  4943  0A7C  0815               	movf	21,w	;volatile
  4944  0A7D  39E0               	andlw	-32
  4945  0A7E  3814               	iorlw	20
  4946  0A7F  0095               	movwf	21	;volatile
  4947                           
  4948                           ;pin_manager.c: 92: RA4PPSbits.RA4PPS = 0x04;
  4949  0A80  003D               	movlb	29	; select bank29
  4950  0A81  0814               	movf	20,w	;volatile
  4951  0A82  39F0               	andlw	-16
  4952  0A83  3804               	iorlw	4
  4953  0A84  0094               	movwf	20	;volatile
  4954                           
  4955                           ;pin_manager.c: 93: RA5PPSbits.RA5PPS = 0x03;
  4956  0A85  0815               	movf	21,w	;volatile
  4957  0A86  39F0               	andlw	-16
  4958  0A87  3803               	iorlw	3
  4959  0A88  0095               	movwf	21	;volatile
  4960                           
  4961                           ;pin_manager.c: 94: RC5PPSbits.RC5PPS = 0x09;
  4962  0A89  0825               	movf	37,w	;volatile
  4963  0A8A  39F0               	andlw	-16
  4964  0A8B  3809               	iorlw	9
  4965  0A8C  00A5               	movwf	37	;volatile
  4966                           
  4967                           ;pin_manager.c: 96: PPSLOCK = 0x55;
  4968                           
  4969                           ;pin_manager.c: 97: PPSLOCK = 0xAA;
  4970  0A8D  2738  3188         	fcall	PL60	;call to abstracted procedure
  4971                           
  4972                           ;pin_manager.c: 98: PPSLOCKbits.PPSLOCKED = 0x01;
  4973  0A8F  140F               	bsf	15,0	;volatile
  4974                           
  4975                           ;pin_manager.c: 100: GIE = state;
  4976  0A90  1C71               	btfss	PIN_MANAGER_Initialize@state,0
  4977  0A91  2A94               	goto	u1670
  4978  0A92  178B               	bsf	11,7	;volatile
  4979  0A93  0008               	return
  4980  0A94                     u1670:	
  4981  0A94  138B               	bcf	11,7	;volatile
  4982  0A95  0008               	return
  4983  0A96                     __end_of_PIN_MANAGER_Initialize:	
  4984  0A96                     __ptext47:	
  4985 ;; *************** function _PWM1_Initialize *****************
  4986 ;; Defined at:
  4987 ;;		line 58 in file "mcc_generated_files/pwm1.c"
  4988 ;; Parameters:    Size  Location     Type
  4989 ;;		None
  4990 ;; Auto vars:     Size  Location     Type
  4991 ;;		None
  4992 ;; Return value:  Size  Location     Type
  4993 ;;                  1    wreg      void 
  4994 ;; Registers used:
  4995 ;;		wreg, status,2
  4996 ;; Tracked objects:
  4997 ;;		On entry : 1F/2
  4998 ;;		On exit  : 1F/1B
  4999 ;;		Unchanged: 0/0
  5000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5004 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5005 ;;Total ram usage:        0 bytes
  5006 ;; Hardware stack levels used:    1
  5007 ;; Hardware stack levels required when called:    1
  5008 ;; This function calls:
  5009 ;;		Nothing
  5010 ;; This function is called by:
  5011 ;;		_SYSTEM_Initialize
  5012 ;; This function uses a non-reentrant model
  5013 ;;
  5014                           
  5015                           
  5016                           ;psect for function _PWM1_Initialize
  5017  0A96                     _PWM1_Initialize:	
  5018                           
  5019                           ;pwm1.c: 63: PWM1INTE = 0x01;
  5020                           
  5021                           ;incstack = 0
  5022                           ; Regs used in _PWM1_Initialize: [wreg+status,2]
  5023  0A96  3001               	movlw	1
  5024  0A97  003B               	movlb	27	; select bank27
  5025  0A98  009C               	movwf	28	;volatile
  5026                           
  5027                           ;pwm1.c: 66: PWM1INTF = 0x00;
  5028  0A99  019D               	clrf	29	;volatile
  5029                           
  5030                           ;pwm1.c: 69: PWM1CLKCON = 0x00;
  5031  0A9A  019E               	clrf	30	;volatile
  5032                           
  5033                           ;pwm1.c: 72: PWM1LDCON = 0x00;
  5034  0A9B  019F               	clrf	31	;volatile
  5035                           
  5036                           ;pwm1.c: 75: PWM1OFCON = 0x00;
  5037  0A9C  01A0               	clrf	32	;volatile
  5038                           
  5039                           ;pwm1.c: 78: PWM1PHH = 0x00;
  5040  0A9D  0192               	clrf	18	;volatile
  5041                           
  5042                           ;pwm1.c: 81: PWM1PHL = 0x02;
  5043  0A9E  3002               	movlw	2
  5044  0A9F  0091               	movwf	17	;volatile
  5045                           
  5046                           ;pwm1.c: 84: PWM1DCH = 0x00;
  5047  0AA0  0194               	clrf	20	;volatile
  5048                           
  5049                           ;pwm1.c: 87: PWM1DCL = 0xa0;
  5050  0AA1  30A0               	movlw	160
  5051  0AA2  0093               	movwf	19	;volatile
  5052                           
  5053                           ;pwm1.c: 90: PWM1PRH = 0x06;
  5054  0AA3  3006               	movlw	6
  5055  0AA4  0096               	movwf	22	;volatile
  5056                           
  5057                           ;pwm1.c: 93: PWM1PRL = 0x3F;
  5058  0AA5  303F               	movlw	63
  5059  0AA6  0095               	movwf	21	;volatile
  5060                           
  5061                           ;pwm1.c: 96: PWM1OFH = 0x00;
  5062  0AA7  0198               	clrf	24	;volatile
  5063                           
  5064                           ;pwm1.c: 99: PWM1OFL = 0x01;
  5065  0AA8  3001               	movlw	1
  5066  0AA9  0097               	movwf	23	;volatile
  5067                           
  5068                           ;pwm1.c: 102: PWM1TMRH = 0x00;
  5069  0AAA  019A               	clrf	26	;volatile
  5070                           
  5071                           ;pwm1.c: 105: PWM1TMRL = 0x00;
  5072  0AAB  0199               	clrf	25	;volatile
  5073                           
  5074                           ;pwm1.c: 108: PWM1CON = 0x90;
  5075  0AAC  3090               	movlw	144
  5076  0AAD  009B               	movwf	27	;volatile
  5077  0AAE  0008               	return
  5078  0AAF                     __end_of_PWM1_Initialize:	
  5079  0AAF                     __ptext46:	
  5080 ;; *************** function _PWM2_Initialize *****************
  5081 ;; Defined at:
  5082 ;;		line 58 in file "mcc_generated_files/pwm2.c"
  5083 ;; Parameters:    Size  Location     Type
  5084 ;;		None
  5085 ;; Auto vars:     Size  Location     Type
  5086 ;;		None
  5087 ;; Return value:  Size  Location     Type
  5088 ;;                  1    wreg      void 
  5089 ;; Registers used:
  5090 ;;		wreg, status,2
  5091 ;; Tracked objects:
  5092 ;;		On entry : 1F/1B
  5093 ;;		On exit  : 1F/1B
  5094 ;;		Unchanged: 0/0
  5095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5099 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5100 ;;Total ram usage:        0 bytes
  5101 ;; Hardware stack levels used:    1
  5102 ;; Hardware stack levels required when called:    1
  5103 ;; This function calls:
  5104 ;;		Nothing
  5105 ;; This function is called by:
  5106 ;;		_SYSTEM_Initialize
  5107 ;; This function uses a non-reentrant model
  5108 ;;
  5109                           
  5110                           
  5111                           ;psect for function _PWM2_Initialize
  5112  0AAF                     _PWM2_Initialize:	
  5113                           
  5114                           ;pwm2.c: 63: PWM2INTE = 0x01;
  5115                           
  5116                           ;incstack = 0
  5117                           ; Regs used in _PWM2_Initialize: [wreg+status,2]
  5118  0AAF  3001               	movlw	1
  5119  0AB0  00AC               	movwf	44	;volatile
  5120                           
  5121                           ;pwm2.c: 66: PWM2INTF = 0x00;
  5122  0AB1  01AD               	clrf	45	;volatile
  5123                           
  5124                           ;pwm2.c: 69: PWM2CLKCON = 0x00;
  5125  0AB2  01AE               	clrf	46	;volatile
  5126                           
  5127                           ;pwm2.c: 72: PWM2LDCON = 0x00;
  5128  0AB3  01AF               	clrf	47	;volatile
  5129                           
  5130                           ;pwm2.c: 75: PWM2OFCON = 0x00;
  5131  0AB4  01B0               	clrf	48	;volatile
  5132                           
  5133                           ;pwm2.c: 78: PWM2PHH = 0x00;
  5134  0AB5  01A2               	clrf	34	;volatile
  5135                           
  5136                           ;pwm2.c: 81: PWM2PHL = 0x02;
  5137  0AB6  3002               	movlw	2
  5138  0AB7  00A1               	movwf	33	;volatile
  5139                           
  5140                           ;pwm2.c: 84: PWM2DCH = 0x00;
  5141  0AB8  01A4               	clrf	36	;volatile
  5142                           
  5143                           ;pwm2.c: 87: PWM2DCL = 0xA0;
  5144  0AB9  30A0               	movlw	160
  5145  0ABA  00A3               	movwf	35	;volatile
  5146                           
  5147                           ;pwm2.c: 90: PWM2PRH = 0x06;
  5148  0ABB  3006               	movlw	6
  5149  0ABC  00A6               	movwf	38	;volatile
  5150                           
  5151                           ;pwm2.c: 93: PWM2PRL = 0x3F;
  5152  0ABD  303F               	movlw	63
  5153  0ABE  00A5               	movwf	37	;volatile
  5154                           
  5155                           ;pwm2.c: 96: PWM2OFH = 0x00;
  5156  0ABF  01A8               	clrf	40	;volatile
  5157                           
  5158                           ;pwm2.c: 99: PWM2OFL = 0x01;
  5159  0AC0  3001               	movlw	1
  5160  0AC1  00A7               	movwf	39	;volatile
  5161                           
  5162                           ;pwm2.c: 102: PWM2TMRH = 0x00;
  5163  0AC2  01AA               	clrf	42	;volatile
  5164                           
  5165                           ;pwm2.c: 105: PWM2TMRL = 0x00;
  5166  0AC3  01A9               	clrf	41	;volatile
  5167                           
  5168                           ;pwm2.c: 108: PWM2CON = 0x90;
  5169  0AC4  3090               	movlw	144
  5170  0AC5  00AB               	movwf	43	;volatile
  5171  0AC6  0008               	return
  5172  0AC7                     __end_of_PWM2_Initialize:	
  5173  0AC7                     __ptext42:	
  5174 ;; *************** function _WDT_Initialize *****************
  5175 ;; Defined at:
  5176 ;;		line 94 in file "mcc_generated_files/mcc.c"
  5177 ;; Parameters:    Size  Location     Type
  5178 ;;		None
  5179 ;; Auto vars:     Size  Location     Type
  5180 ;;		None
  5181 ;; Return value:  Size  Location     Type
  5182 ;;                  1    wreg      void 
  5183 ;; Registers used:
  5184 ;;		wreg
  5185 ;; Tracked objects:
  5186 ;;		On entry : 0/1F
  5187 ;;		On exit  : 1F/1
  5188 ;;		Unchanged: 0/0
  5189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5193 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5194 ;;Total ram usage:        0 bytes
  5195 ;; Hardware stack levels used:    1
  5196 ;; Hardware stack levels required when called:    1
  5197 ;; This function calls:
  5198 ;;		Nothing
  5199 ;; This function is called by:
  5200 ;;		_SYSTEM_Initialize
  5201 ;; This function uses a non-reentrant model
  5202 ;;
  5203                           
  5204                           
  5205                           ;psect for function _WDT_Initialize
  5206  0AC7                     _WDT_Initialize:	
  5207                           
  5208                           ;mcc.c: 97: WDTCON = 0x16;
  5209                           
  5210                           ;incstack = 0
  5211                           ; Regs used in _WDT_Initialize: [wreg]
  5212  0AC7  3016               	movlw	22
  5213  0AC8  0021               	movlb	1	; select bank1
  5214  0AC9  0097               	movwf	23	;volatile
  5215  0ACA  0008               	return
  5216  0ACB                     __end_of_WDT_Initialize:	
  5217  0ACB                     __ptext40:	
  5218 ;; *************** function _adc_init *****************
  5219 ;; Defined at:
  5220 ;;		line 105 in file "src/api/sample.c"
  5221 ;; Parameters:    Size  Location     Type
  5222 ;;  ch              1    wreg     enum E4978
  5223 ;; Auto vars:     Size  Location     Type
  5224 ;;  ch              1    2[COMMON] enum E4978
  5225 ;; Return value:  Size  Location     Type
  5226 ;;                  1    wreg      void 
  5227 ;; Registers used:
  5228 ;;		wreg, status,2, status,0
  5229 ;; Tracked objects:
  5230 ;;		On entry : 1F/2
  5231 ;;		On exit  : 1F/1
  5232 ;;		Unchanged: 0/0
  5233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5235 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5236 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5237 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5238 ;;Total ram usage:        2 bytes
  5239 ;; Hardware stack levels used:    1
  5240 ;; Hardware stack levels required when called:    1
  5241 ;; This function calls:
  5242 ;;		Nothing
  5243 ;; This function is called by:
  5244 ;;		_adc_sample
  5245 ;; This function uses a non-reentrant model
  5246 ;;
  5247                           
  5248                           
  5249                           ;psect for function _adc_init
  5250  0ACB                     _adc_init:	
  5251                           
  5252                           ;incstack = 0
  5253                           ; Regs used in _adc_init: [wreg+status,2+status,0]
  5254                           ;adc_init@ch stored from wreg
  5255  0ACB  00F2               	movwf	adc_init@ch
  5256  0ACC                     l610:	
  5257                           ;sample.c: 107: while (ADCON0bits.GO_nDONE);
  5258                           
  5259  0ACC  0021               	movlb	1	; select bank1
  5260  0ACD  189D               	btfsc	29,1	;volatile
  5261  0ACE  2ACC               	goto	l610
  5262                           
  5263                           ;sample.c: 108: ADCON0bits.CHS = ch;
  5264  0ACF  0872               	movf	adc_init@ch,w
  5265  0AD0  00F1               	movwf	??_adc_init
  5266  0AD1  0DF1               	rlf	??_adc_init,f
  5267  0AD2  0DF1               	rlf	??_adc_init,f
  5268  0AD3  081D               	movf	29,w	;volatile
  5269  0AD4  0671               	xorwf	??_adc_init,w
  5270  0AD5  3983               	andlw	-125
  5271  0AD6  0671               	xorwf	??_adc_init,w
  5272  0AD7  009D               	movwf	29	;volatile
  5273                           
  5274                           ;sample.c: 109: ADCON0bits.ADON = 1;
  5275  0AD8  141D               	bsf	29,0	;volatile
  5276                           
  5277                           ;sample.c: 110: ADCON1 = 0x63;
  5278                           
  5279                           ;sample.c: 111: ADCON2 = 0x00;
  5280                           
  5281                           ;sample.c: 112: ADRESL = 0x00;
  5282                           
  5283                           ;sample.c: 113: ADRESH = 0x00;
  5284  0AD9  2F26               	ljmp	PL46	;call to abstracted procedure
  5285  0ADA                     __end_of_adc_init:	
  5286  0ADA                     __ptext39:	
  5287 ;; *************** function _fvr_set_gain *****************
  5288 ;; Defined at:
  5289 ;;		line 96 in file "src/api/sample.c"
  5290 ;; Parameters:    Size  Location     Type
  5291 ;;  g               1    wreg     unsigned char 
  5292 ;; Auto vars:     Size  Location     Type
  5293 ;;  g               1    2[COMMON] unsigned char 
  5294 ;;  t8              1    1[COMMON] unsigned char 
  5295 ;; Return value:  Size  Location     Type
  5296 ;;                  1    wreg      void 
  5297 ;; Registers used:
  5298 ;;		wreg, status,2, status,0
  5299 ;; Tracked objects:
  5300 ;;		On entry : 1F/0
  5301 ;;		On exit  : 1F/2
  5302 ;;		Unchanged: 0/0
  5303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5305 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5307 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5308 ;;Total ram usage:        2 bytes
  5309 ;; Hardware stack levels used:    1
  5310 ;; Hardware stack levels required when called:    1
  5311 ;; This function calls:
  5312 ;;		Nothing
  5313 ;; This function is called by:
  5314 ;;		_adc_sample
  5315 ;; This function uses a non-reentrant model
  5316 ;;
  5317                           
  5318                           
  5319                           ;psect for function _fvr_set_gain
  5320  0ADA                     _fvr_set_gain:	
  5321                           
  5322                           ;incstack = 0
  5323                           ; Regs used in _fvr_set_gain: [wreg+status,2+status,0]
  5324                           ;fvr_set_gain@g stored from wreg
  5325  0ADA  00F2               	movwf	fvr_set_gain@g
  5326                           
  5327                           ;sample.c: 98: uint8_t t8=0x80;
  5328  0ADB  3080               	movlw	128
  5329  0ADC  00F1               	movwf	fvr_set_gain@t8
  5330                           
  5331                           ;sample.c: 99: if(g>3)g=3;
  5332  0ADD  3004               	movlw	4
  5333  0ADE  0272               	subwf	fvr_set_gain@g,w
  5334  0ADF  1C03               	skipc
  5335  0AE0  2AE3               	goto	l3269
  5336  0AE1  3003               	movlw	3
  5337  0AE2  00F2               	movwf	fvr_set_gain@g
  5338  0AE3                     l3269:	
  5339                           
  5340                           ;sample.c: 100: t8|=g;
  5341  0AE3  0872               	movf	fvr_set_gain@g,w
  5342  0AE4  04F1               	iorwf	fvr_set_gain@t8,f
  5343                           
  5344                           ;sample.c: 101: FVRCON = t8;
  5345  0AE5  0871               	movf	fvr_set_gain@t8,w
  5346  0AE6  0022               	movlb	2	; select bank2
  5347  0AE7  0097               	movwf	23	;volatile
  5348  0AE8                     l604:	
  5349                           ;sample.c: 102: while(!(FVRCONbits.FVRRDY));
  5350                           
  5351  0AE8  1B17               	btfsc	23,6	;volatile
  5352  0AE9  0008               	return
  5353  0AEA  2AE8               	goto	l604
  5354  0AEB                     __end_of_fvr_set_gain:	
  5355  0AEB                     __ptext33:	
  5356 ;; *************** function _calc_rs_lo_avg *****************
  5357 ;; Defined at:
  5358 ;;		line 404 in file "src/api/sample.c"
  5359 ;; Parameters:    Size  Location     Type
  5360 ;;  x               2    9[COMMON] unsigned int 
  5361 ;; Auto vars:     Size  Location     Type
  5362 ;;  t32             4    7[BANK0 ] unsigned long 
  5363 ;;  i               1   11[BANK0 ] unsigned char 
  5364 ;; Return value:  Size  Location     Type
  5365 ;;                  2    9[COMMON] unsigned int 
  5366 ;; Registers used:
  5367 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5368 ;; Tracked objects:
  5369 ;;		On entry : 1F/0
  5370 ;;		On exit  : 1F/0
  5371 ;;		Unchanged: 0/0
  5372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5373 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5374 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5375 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5376 ;;      Totals:         2       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5377 ;;Total ram usage:        9 bytes
  5378 ;; Hardware stack levels used:    1
  5379 ;; Hardware stack levels required when called:    2
  5380 ;; This function calls:
  5381 ;;		___lldiv
  5382 ;; This function is called by:
  5383 ;;		_main
  5384 ;; This function uses a non-reentrant model
  5385 ;;
  5386                           
  5387                           
  5388                           ;psect for function _calc_rs_lo_avg
  5389  0AEB                     _calc_rs_lo_avg:	
  5390                           
  5391                           ;sample.c: 406: uint8_t i;
  5392                           ;sample.c: 407: uint32_t t32=0;
  5393                           
  5394                           ;incstack = 0
  5395                           ; Regs used in _calc_rs_lo_avg: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5396  0AEB  01A7               	clrf	calc_rs_lo_avg@t32
  5397  0AEC  01A8               	clrf	calc_rs_lo_avg@t32+1
  5398  0AED  01A9               	clrf	calc_rs_lo_avg@t32+2
  5399  0AEE  01AA               	clrf	calc_rs_lo_avg@t32+3
  5400                           
  5401                           ;sample.c: 409: for(i=0;i<sizeof(rsLoAvgBuf)/sizeof(rsLoAvgBuf[0])-1;i++){
  5402  0AEF  01AB               	clrf	calc_rs_lo_avg@i
  5403  0AF0                     l4669:	
  5404                           
  5405                           ;sample.c: 410: rsLoAvgBuf[i]=rsLoAvgBuf[i+1];
  5406  0AF0  352B               	lslf	calc_rs_lo_avg@i,w
  5407  0AF1  3E22               	addlw	(low ((_rsLoAvgBuf| (0+256)+2)))& (0+255)
  5408  0AF2  0086               	movwf	6
  5409  0AF3  3001               	movlw	1	; select bank2/3
  5410  0AF4  0087               	movwf	7
  5411  0AF5  352B               	lslf	calc_rs_lo_avg@i,w
  5412  0AF6  3E20               	addlw	(low (_rsLoAvgBuf| (0+256)))& (0+255)
  5413  0AF7  0084               	movwf	4
  5414  0AF8  3001               	movlw	1	; select bank2/3
  5415  0AF9  0085               	movwf	5
  5416  0AFA  3F40               	moviw [0]fsr1
  5417  0AFB  3F80               	movwi [0]fsr0
  5418  0AFC  3F41               	moviw [1]fsr1
  5419  0AFD  3F81               	movwi [1]fsr0
  5420                           
  5421                           ;sample.c: 411: t32+=rsLoAvgBuf[i];
  5422  0AFE  352B               	lslf	calc_rs_lo_avg@i,w
  5423  0AFF  3E20               	addlw	(low (_rsLoAvgBuf| (0+256)))& (0+255)
  5424  0B00  0086               	movwf	6
  5425  0B01  3F40               	moviw [0]fsr1
  5426  0B02  00A5               	movwf	??_calc_rs_lo_avg
  5427  0B03  3F41               	moviw [1]fsr1
  5428  0B04  00A6               	movwf	??_calc_rs_lo_avg+1
  5429  0B05  0825               	movf	??_calc_rs_lo_avg,w
  5430  0B06  07A7               	addwf	calc_rs_lo_avg@t32,f
  5431  0B07  0826               	movf	??_calc_rs_lo_avg+1,w
  5432  0B08  3DA8               	addwfc	calc_rs_lo_avg@t32+1,f
  5433  0B09  3000               	movlw	0
  5434  0B0A  3DA9               	addwfc	calc_rs_lo_avg@t32+2,f
  5435  0B0B  3DAA               	addwfc	calc_rs_lo_avg@t32+3,f
  5436  0B0C  3005               	movlw	5
  5437  0B0D  0AAB               	incf	calc_rs_lo_avg@i,f
  5438  0B0E  022B               	subwf	calc_rs_lo_avg@i,w
  5439  0B0F  1C03               	skipc
  5440  0B10  2AF0               	goto	l4669
  5441                           
  5442                           ;sample.c: 412: }
  5443                           ;sample.c: 413: rsLoAvgBuf[i]=x;
  5444  0B11  352B               	lslf	calc_rs_lo_avg@i,w
  5445  0B12  3E20               	addlw	(low (_rsLoAvgBuf| (0+256)))& (0+255)
  5446  0B13  0086               	movwf	6
  5447  0B14  0879               	movf	calc_rs_lo_avg@x,w
  5448  0B15  3FC0               	movwi [0]fsr1
  5449  0B16  087A               	movf	calc_rs_lo_avg@x+1,w
  5450  0B17  3FC1               	movwi [1]fsr1
  5451                           
  5452                           ;sample.c: 414: t32+=x;
  5453  0B18  0879               	movf	calc_rs_lo_avg@x,w
  5454  0B19  07A7               	addwf	calc_rs_lo_avg@t32,f
  5455  0B1A  087A               	movf	calc_rs_lo_avg@x+1,w
  5456  0B1B  3DA8               	addwfc	calc_rs_lo_avg@t32+1,f
  5457  0B1C  3000               	movlw	0
  5458  0B1D  3DA9               	addwfc	calc_rs_lo_avg@t32+2,f
  5459  0B1E  3DAA               	addwfc	calc_rs_lo_avg@t32+3,f
  5460                           
  5461                           ;sample.c: 415: t32/=(sizeof(rsLoAvgBuf)/sizeof(rsLoAvgBuf[0]));
  5462  0B1F  3006               	movlw	6
  5463  0B20  00F1               	movwf	___lldiv@divisor
  5464  0B21  01F2               	clrf	___lldiv@divisor+1
  5465  0B22  01F3               	clrf	___lldiv@divisor+2
  5466  0B23  01F4               	clrf	___lldiv@divisor+3
  5467  0B24  082A               	movf	calc_rs_lo_avg@t32+3,w
  5468  0B25  00F8               	movwf	___lldiv@dividend+3
  5469  0B26  0829               	movf	calc_rs_lo_avg@t32+2,w
  5470  0B27  00F7               	movwf	___lldiv@dividend+2
  5471  0B28  0828               	movf	calc_rs_lo_avg@t32+1,w
  5472  0B29  00F6               	movwf	___lldiv@dividend+1
  5473  0B2A  0827               	movf	calc_rs_lo_avg@t32,w
  5474  0B2B  00F5               	movwf	___lldiv@dividend
  5475  0B2C  2654               	fcall	___lldiv
  5476  0B2D  0874               	movf	?___lldiv+3,w
  5477  0B2E  00AA               	movwf	calc_rs_lo_avg@t32+3
  5478  0B2F  0873               	movf	?___lldiv+2,w
  5479  0B30  00A9               	movwf	calc_rs_lo_avg@t32+2
  5480  0B31  0872               	movf	?___lldiv+1,w
  5481  0B32  00A8               	movwf	calc_rs_lo_avg@t32+1
  5482  0B33  0871               	movf	?___lldiv,w
  5483  0B34  00A7               	movwf	calc_rs_lo_avg@t32
  5484                           
  5485                           ;sample.c: 416: return (uint16_t)t32;
  5486  0B35  0828               	movf	calc_rs_lo_avg@t32+1,w
  5487  0B36  00FA               	movwf	?_calc_rs_lo_avg+1
  5488  0B37  0827               	movf	calc_rs_lo_avg@t32,w
  5489  0B38  00F9               	movwf	?_calc_rs_lo_avg
  5490  0B39  0008               	return
  5491  0B3A                     __end_of_calc_rs_lo_avg:	
  5492  0B3A                     __ptext31:	
  5493 ;; *************** function _calc_temp_rs *****************
  5494 ;; Defined at:
  5495 ;;		line 176 in file "src/api/sample.c"
  5496 ;; Parameters:    Size  Location     Type
  5497 ;;		None
  5498 ;; Auto vars:     Size  Location     Type
  5499 ;;  y               4   13[BANK0 ] unsigned long 
  5500 ;;  x               4    9[BANK0 ] unsigned long 
  5501 ;; Return value:  Size  Location     Type
  5502 ;;                  4    5[BANK0 ] unsigned long 
  5503 ;; Registers used:
  5504 ;;		wreg, status,2, status,0, pclath, cstack
  5505 ;; Tracked objects:
  5506 ;;		On entry : 1F/1
  5507 ;;		On exit  : 1F/0
  5508 ;;		Unchanged: 0/0
  5509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5510 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5511 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5513 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5514 ;;Total ram usage:       12 bytes
  5515 ;; Hardware stack levels used:    1
  5516 ;; Hardware stack levels required when called:    2
  5517 ;; This function calls:
  5518 ;;		___lldiv
  5519 ;;		___lmul
  5520 ;; This function is called by:
  5521 ;;		_main
  5522 ;; This function uses a non-reentrant model
  5523 ;;
  5524                           
  5525                           
  5526                           ;psect for function _calc_temp_rs
  5527  0B3A                     _calc_temp_rs:	
  5528                           
  5529                           ;sample.c: 189: uint32_t x,y;
  5530                           ;sample.c: 190: y=12000UL;
  5531                           
  5532                           ;incstack = 0
  5533                           ; Regs used in _calc_temp_rs: [wreg+status,2+status,0+pclath+cstack]
  5534  0B3A  0020               	movlb	0	; select bank0
  5535  0B3B  302E               	movlw	46
  5536  0B3C  01B0               	clrf	calc_temp_rs@y+3
  5537  0B3D  01AF               	clrf	calc_temp_rs@y+2
  5538  0B3E  00AE               	movwf	calc_temp_rs@y+1
  5539  0B3F  30E0               	movlw	224
  5540  0B40  00AD               	movwf	calc_temp_rs@y
  5541                           
  5542                           ;sample.c: 191: y=y*rtAdcValueRsHi;
  5543  0B41  0852               	movf	_rtAdcValueRsHi,w
  5544  0B42  00F1               	movwf	___lmul@multiplier
  5545  0B43  0853               	movf	_rtAdcValueRsHi+1,w
  5546  0B44  00F2               	movwf	___lmul@multiplier+1
  5547  0B45  01F3               	clrf	___lmul@multiplier+2
  5548  0B46  01F4               	clrf	___lmul@multiplier+3
  5549  0B47  0830               	movf	calc_temp_rs@y+3,w
  5550  0B48  00F8               	movwf	___lmul@multiplicand+3
  5551  0B49  082F               	movf	calc_temp_rs@y+2,w
  5552  0B4A  00F7               	movwf	___lmul@multiplicand+2
  5553  0B4B  082E               	movf	calc_temp_rs@y+1,w
  5554  0B4C  00F6               	movwf	___lmul@multiplicand+1
  5555  0B4D  082D               	movf	calc_temp_rs@y,w
  5556  0B4E  00F5               	movwf	___lmul@multiplicand
  5557  0B4F  2613  3188         	fcall	___lmul
  5558  0B51  0874               	movf	?___lmul+3,w
  5559  0B52  00B0               	movwf	calc_temp_rs@y+3
  5560  0B53  0873               	movf	?___lmul+2,w
  5561  0B54  00AF               	movwf	calc_temp_rs@y+2
  5562  0B55  0872               	movf	?___lmul+1,w
  5563  0B56  00AE               	movwf	calc_temp_rs@y+1
  5564  0B57  0871               	movf	?___lmul,w
  5565  0B58  00AD               	movwf	calc_temp_rs@y
  5566                           
  5567                           ;sample.c: 192: x=rtAdcValueRsLo;
  5568  0B59  0854               	movf	_rtAdcValueRsLo,w
  5569  0B5A  00A9               	movwf	calc_temp_rs@x
  5570  0B5B  0855               	movf	_rtAdcValueRsLo+1,w
  5571  0B5C  00AA               	movwf	calc_temp_rs@x+1
  5572  0B5D  01AB               	clrf	calc_temp_rs@x+2
  5573  0B5E  01AC               	clrf	calc_temp_rs@x+3
  5574                           
  5575                           ;sample.c: 193: y=y/x;
  5576  0B5F  082C               	movf	calc_temp_rs@x+3,w
  5577  0B60  00F4               	movwf	___lldiv@divisor+3
  5578  0B61  082B               	movf	calc_temp_rs@x+2,w
  5579  0B62  00F3               	movwf	___lldiv@divisor+2
  5580  0B63  082A               	movf	calc_temp_rs@x+1,w
  5581  0B64  00F2               	movwf	___lldiv@divisor+1
  5582  0B65  0829               	movf	calc_temp_rs@x,w
  5583  0B66  00F1               	movwf	___lldiv@divisor
  5584  0B67  0830               	movf	calc_temp_rs@y+3,w
  5585  0B68  00F8               	movwf	___lldiv@dividend+3
  5586  0B69  082F               	movf	calc_temp_rs@y+2,w
  5587  0B6A  00F7               	movwf	___lldiv@dividend+2
  5588  0B6B  082E               	movf	calc_temp_rs@y+1,w
  5589  0B6C  00F6               	movwf	___lldiv@dividend+1
  5590  0B6D  082D               	movf	calc_temp_rs@y,w
  5591  0B6E  00F5               	movwf	___lldiv@dividend
  5592  0B6F  2654  3188         	fcall	___lldiv
  5593  0B71  0874               	movf	?___lldiv+3,w
  5594  0B72  00B0               	movwf	calc_temp_rs@y+3
  5595  0B73  0873               	movf	?___lldiv+2,w
  5596  0B74  00AF               	movwf	calc_temp_rs@y+2
  5597  0B75  0872               	movf	?___lldiv+1,w
  5598  0B76  00AE               	movwf	calc_temp_rs@y+1
  5599  0B77  0871               	movf	?___lldiv,w
  5600  0B78  00AD               	movwf	calc_temp_rs@y
  5601                           
  5602                           ;sample.c: 194: if(y<2000)y=2000;
  5603  0B79  0830               	movf	calc_temp_rs@y+3,w
  5604  0B7A  1D03               	btfss	3,2
  5605  0B7B  2B8B               	goto	l4535
  5606  0B7C  082F               	movf	calc_temp_rs@y+2,w
  5607  0B7D  1D03               	btfss	3,2
  5608  0B7E  2B8B               	goto	l4535
  5609  0B7F  30D0               	movlw	208
  5610  0B80  022D               	subwf	calc_temp_rs@y,w
  5611  0B81  3007               	movlw	7
  5612  0B82  3B2E               	subwfb	calc_temp_rs@y+1,w
  5613  0B83  1803               	btfsc	3,0
  5614  0B84  2B8B               	goto	l4535
  5615  0B85  3007               	movlw	7
  5616  0B86  01B0               	clrf	calc_temp_rs@y+3
  5617  0B87  01AF               	clrf	calc_temp_rs@y+2
  5618  0B88  00AE               	movwf	calc_temp_rs@y+1
  5619  0B89  30D0               	movlw	208
  5620  0B8A  00AD               	movwf	calc_temp_rs@y
  5621  0B8B                     l4535:	
  5622                           
  5623                           ;sample.c: 195: if(y>25000)y=25000;
  5624  0B8B  0830               	movf	calc_temp_rs@y+3,w
  5625  0B8C  1D03               	btfss	3,2
  5626  0B8D  2B97               	goto	l4537
  5627  0B8E  082F               	movf	calc_temp_rs@y+2,w
  5628  0B8F  1D03               	btfss	3,2
  5629  0B90  2B97               	goto	l4537
  5630  0B91  30A9               	movlw	169
  5631  0B92  022D               	subwf	calc_temp_rs@y,w
  5632  0B93  3061               	movlw	97
  5633  0B94  3B2E               	subwfb	calc_temp_rs@y+1,w
  5634  0B95  1C03               	btfss	3,0
  5635  0B96  2B9D               	goto	l4539
  5636  0B97                     l4537:	
  5637  0B97  3061               	movlw	97
  5638  0B98  01B0               	clrf	calc_temp_rs@y+3
  5639  0B99  01AF               	clrf	calc_temp_rs@y+2
  5640  0B9A  00AE               	movwf	calc_temp_rs@y+1
  5641  0B9B  30A8               	movlw	168
  5642  0B9C  00AD               	movwf	calc_temp_rs@y
  5643  0B9D                     l4539:	
  5644                           
  5645                           ;sample.c: 196: y=y-1000;
  5646  0B9D  3018               	movlw	24
  5647  0B9E  07AD               	addwf	calc_temp_rs@y,f
  5648  0B9F  30FC               	movlw	252
  5649  0BA0  3DAE               	addwfc	calc_temp_rs@y+1,f
  5650  0BA1  30FF               	movlw	255
  5651  0BA2  3DAF               	addwfc	calc_temp_rs@y+2,f
  5652  0BA3  3DB0               	addwfc	calc_temp_rs@y+3,f
  5653                           
  5654                           ;sample.c: 198: return y;
  5655  0BA4  0830               	movf	calc_temp_rs@y+3,w
  5656  0BA5  00A8               	movwf	?_calc_temp_rs+3
  5657  0BA6  082F               	movf	calc_temp_rs@y+2,w
  5658  0BA7  00A7               	movwf	?_calc_temp_rs+2
  5659  0BA8  082E               	movf	calc_temp_rs@y+1,w
  5660  0BA9  00A6               	movwf	?_calc_temp_rs+1
  5661  0BAA  082D               	movf	calc_temp_rs@y,w
  5662  0BAB  00A5               	movwf	?_calc_temp_rs
  5663  0BAC  0008               	return
  5664  0BAD                     __end_of_calc_temp_rs:	
  5665  0BAD                     __ptext28:	
  5666 ;; *************** function _m_mem_cpy_len *****************
  5667 ;; Defined at:
  5668 ;;		line 47 in file "src/depend/m_string.c"
  5669 ;; Parameters:    Size  Location     Type
  5670 ;;  d               2    1[COMMON] PTR unsigned char 
  5671 ;;		 -> crc_verify@expected(2), modbusBuf(64), 
  5672 ;;  s               2    3[COMMON] PTR unsigned char 
  5673 ;;		 -> modbusBuf(64), sysData(132), eusartRxBuffer(64), 
  5674 ;;  len             2    5[COMMON] unsigned int 
  5675 ;; Auto vars:     Size  Location     Type
  5676 ;;		None
  5677 ;; Return value:  Size  Location     Type
  5678 ;;                  1    wreg      void 
  5679 ;; Registers used:
  5680 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5681 ;; Tracked objects:
  5682 ;;		On entry : 1F/0
  5683 ;;		On exit  : 1F/0
  5684 ;;		Unchanged: 1F/0
  5685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5686 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5688 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5689 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5690 ;;Total ram usage:        7 bytes
  5691 ;; Hardware stack levels used:    1
  5692 ;; Hardware stack levels required when called:    1
  5693 ;; This function calls:
  5694 ;;		Nothing
  5695 ;; This function is called by:
  5696 ;;		_main
  5697 ;;		_crc_verify
  5698 ;; This function uses a non-reentrant model
  5699 ;;
  5700                           
  5701                           
  5702                           ;psect for function _m_mem_cpy_len
  5703  0BAD                     _m_mem_cpy_len:	
  5704  0BAD                     l3121:	
  5705                           ;m_string.c: 50: while(len)
  5706                           
  5707                           ;incstack = 0
  5708                           ; Regs used in _m_mem_cpy_len: [wreg+fsr1l+fsr1h+status,2+status,0]
  5709                           
  5710  0BAD  0875               	movf	m_mem_cpy_len@len,w
  5711  0BAE  0476               	iorwf	m_mem_cpy_len@len+1,w
  5712  0BAF  1903               	btfsc	3,2
  5713  0BB0  0008               	return
  5714                           
  5715                           ;m_string.c: 51: {
  5716                           ;m_string.c: 52: *d++=*s++;
  5717  0BB1  0873               	movf	m_mem_cpy_len@s,w
  5718  0BB2  0086               	movwf	6
  5719  0BB3  0874               	movf	m_mem_cpy_len@s+1,w
  5720  0BB4  0087               	movwf	7
  5721  0BB5  0801               	movf	1,w
  5722  0BB6  00F7               	movwf	??_m_mem_cpy_len
  5723  0BB7  0871               	movf	m_mem_cpy_len@d,w
  5724  0BB8  0086               	movwf	6
  5725  0BB9  0872               	movf	m_mem_cpy_len@d+1,w
  5726  0BBA  0087               	movwf	7
  5727  0BBB  0877               	movf	??_m_mem_cpy_len,w
  5728  0BBC  0081               	movwf	1
  5729  0BBD  0AF3               	incf	m_mem_cpy_len@s,f
  5730  0BBE  1903               	skipnz
  5731  0BBF  0AF4               	incf	m_mem_cpy_len@s+1,f
  5732  0BC0  0AF1               	incf	m_mem_cpy_len@d,f
  5733  0BC1  1903               	skipnz
  5734  0BC2  0AF2               	incf	m_mem_cpy_len@d+1,f
  5735                           
  5736                           ;m_string.c: 53: len--;
  5737  0BC3  3001               	movlw	1
  5738  0BC4  02F5               	subwf	m_mem_cpy_len@len,f
  5739  0BC5  3000               	movlw	0
  5740  0BC6  3BF6               	subwfb	m_mem_cpy_len@len+1,f
  5741  0BC7  2BAD               	goto	l3121
  5742  0BC8                     __end_of_m_mem_cpy_len:	
  5743  0BC8                     __ptext12:	
  5744 ;; *************** function _pid_pwm1_idrv_b_b *****************
  5745 ;; Defined at:
  5746 ;;		line 239 in file "src/api/sample.c"
  5747 ;; Parameters:    Size  Location     Type
  5748 ;;		None
  5749 ;; Auto vars:     Size  Location     Type
  5750 ;;  t32             4   18[BANK0 ] long 
  5751 ;; Return value:  Size  Location     Type
  5752 ;;                  1    wreg      void 
  5753 ;; Registers used:
  5754 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5755 ;; Tracked objects:
  5756 ;;		On entry : 1F/0
  5757 ;;		On exit  : 1E/0
  5758 ;;		Unchanged: 0/0
  5759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5761 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5762 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5763 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5764 ;;Total ram usage:        5 bytes
  5765 ;; Hardware stack levels used:    1
  5766 ;; Hardware stack levels required when called:    3
  5767 ;; This function calls:
  5768 ;;		___aldiv
  5769 ;;		___lmul
  5770 ;;		_set_idrv_pwm1_duty
  5771 ;; This function is called by:
  5772 ;;		_main
  5773 ;; This function uses a non-reentrant model
  5774 ;;
  5775                           
  5776                           
  5777                           ;psect for function _pid_pwm1_idrv_b_b
  5778  0BC8                     _pid_pwm1_idrv_b_b:	
  5779                           
  5780                           ;sample.c: 241: int32_t t32;
  5781                           ;sample.c: 242: t32=(resRs-resRc);
  5782                           
  5783                           ;incstack = 0
  5784                           ; Regs used in _pid_pwm1_idrv_b_b: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5785  0BC8  0021               	movlb	1	; select bank1
  5786  0BC9  0867               	movf	(_resRs+3)^(0+128),w
  5787  0BCA  0020               	movlb	0	; select bank0
  5788  0BCB  00B5               	movwf	pid_pwm1_idrv_b_b@t32+3
  5789  0BCC  0021               	movlb	1	; select bank1
  5790  0BCD  0866               	movf	(_resRs+2)^(0+128),w
  5791  0BCE  0020               	movlb	0	; select bank0
  5792  0BCF  00B4               	movwf	pid_pwm1_idrv_b_b@t32+2
  5793  0BD0  0021               	movlb	1	; select bank1
  5794  0BD1  0865               	movf	(_resRs+1)^(0+128),w
  5795  0BD2  0020               	movlb	0	; select bank0
  5796  0BD3  00B3               	movwf	pid_pwm1_idrv_b_b@t32+1
  5797  0BD4  0021               	movlb	1	; select bank1
  5798  0BD5  0864               	movf	_resRs^(0+128),w
  5799  0BD6  0020               	movlb	0	; select bank0
  5800  0BD7  00B2               	movwf	pid_pwm1_idrv_b_b@t32
  5801  0BD8  0021               	movlb	1	; select bank1
  5802  0BD9  0860               	movf	_resRc^(0+128),w
  5803  0BDA  0020               	movlb	0	; select bank0
  5804  0BDB  02B2               	subwf	pid_pwm1_idrv_b_b@t32,f
  5805  0BDC  0021               	movlb	1	; select bank1
  5806  0BDD  0861               	movf	(_resRc+1)^(0+128),w
  5807  0BDE  0020               	movlb	0	; select bank0
  5808  0BDF  3BB3               	subwfb	pid_pwm1_idrv_b_b@t32+1,f
  5809  0BE0  0021               	movlb	1	; select bank1
  5810  0BE1  0862               	movf	(_resRc+2)^(0+128),w
  5811  0BE2  0020               	movlb	0	; select bank0
  5812  0BE3  3BB4               	subwfb	pid_pwm1_idrv_b_b@t32+2,f
  5813  0BE4  0021               	movlb	1	; select bank1
  5814  0BE5  0863               	movf	(_resRc+3)^(0+128),w
  5815  0BE6  0020               	movlb	0	; select bank0
  5816  0BE7  3BB5               	subwfb	pid_pwm1_idrv_b_b@t32+3,f
  5817                           
  5818                           ;sample.c: 243: switch(pidBbSm){
  5819  0BE8  2D3F               	goto	l4613
  5820  0BE9                     l4567:	
  5821                           
  5822                           ;sample.c: 246: case 1:
  5823                           ;sample.c: 247: pidTestNum=0;
  5824  0BE9  01DF               	clrf	_pidTestNum
  5825  0BEA                     l4569:	
  5826                           
  5827                           ;sample.c: 248: set_idrv_pwm1_duty(1200);
  5828  0BEA  30B0               	movlw	176
  5829  0BEB  00F3               	movwf	set_idrv_pwm1_duty@duty
  5830  0BEC  3004               	movlw	4
  5831  0BED  00F4               	movwf	set_idrv_pwm1_duty@duty+1
  5832  0BEE  263B  3188         	fcall	_set_idrv_pwm1_duty
  5833                           
  5834                           ;sample.c: 249: pidBbSm=2;
  5835  0BF0  3002               	movlw	2
  5836  0BF1  2D3C               	goto	L6
  5837  0BF2                     l4573:	
  5838                           ;sample.c: 250: break;
  5839                           
  5840                           
  5841                           ;sample.c: 252: if(t32>4500){
  5842  0BF2  1BB5               	btfsc	pid_pwm1_idrv_b_b@t32+3,7
  5843  0BF3  2D49               	goto	l4615
  5844  0BF4  0835               	movf	pid_pwm1_idrv_b_b@t32+3,w
  5845  0BF5  1D03               	btfss	3,2
  5846  0BF6  2C00               	goto	l4575
  5847  0BF7  0834               	movf	pid_pwm1_idrv_b_b@t32+2,w
  5848  0BF8  1D03               	btfss	3,2
  5849  0BF9  2C00               	goto	l4575
  5850  0BFA  3095               	movlw	149
  5851  0BFB  0232               	subwf	pid_pwm1_idrv_b_b@t32,w
  5852  0BFC  3011               	movlw	17
  5853  0BFD  3B33               	subwfb	pid_pwm1_idrv_b_b@t32+1,w
  5854  0BFE  1C03               	btfss	3,0
  5855  0BFF  2D49               	goto	l4615
  5856  0C00                     l4575:	
  5857                           
  5858                           ;sample.c: 253: set_idrv_pwm1_duty(5);
  5859  0C00  3005               	movlw	5
  5860  0C01  00F3               	movwf	set_idrv_pwm1_duty@duty
  5861  0C02  01F4               	clrf	set_idrv_pwm1_duty@duty+1
  5862  0C03  263B  3188         	fcall	_set_idrv_pwm1_duty
  5863                           
  5864                           ;sample.c: 254: pidBbSm=3;
  5865  0C05  3003               	movlw	3
  5866  0C06  2D3C               	goto	L6
  5867  0C07                     l4579:	
  5868                           ;sample.c: 255: break;
  5869                           
  5870                           
  5871                           ;sample.c: 259: if(t32<1500){
  5872  0C07  1BB5               	btfsc	pid_pwm1_idrv_b_b@t32+3,7
  5873  0C08  2C15               	goto	l4581
  5874  0C09  0835               	movf	pid_pwm1_idrv_b_b@t32+3,w
  5875  0C0A  1D03               	btfss	3,2
  5876  0C0B  2D49               	goto	l4615
  5877  0C0C  0834               	movf	pid_pwm1_idrv_b_b@t32+2,w
  5878  0C0D  1D03               	btfss	3,2
  5879  0C0E  2D49               	goto	l4615
  5880  0C0F  30DC               	movlw	220
  5881  0C10  0232               	subwf	pid_pwm1_idrv_b_b@t32,w
  5882  0C11  3005               	movlw	5
  5883  0C12  3B33               	subwfb	pid_pwm1_idrv_b_b@t32+1,w
  5884  0C13  1803               	btfsc	3,0
  5885  0C14  2D49               	goto	l4615
  5886  0C15                     l4581:	
  5887                           
  5888                           ;sample.c: 260: bbt0=bbt1;
  5889  0C15  0021               	movlb	1	; select bank1
  5890  0C16  0843               	movf	(_bbt1+3)^(0+128),w
  5891  0C17  00BF               	movwf	(_bbt0+3)^(0+128)
  5892  0C18  0842               	movf	(_bbt1+2)^(0+128),w
  5893  0C19  00BE               	movwf	(_bbt0+2)^(0+128)
  5894  0C1A  0841               	movf	(_bbt1+1)^(0+128),w
  5895  0C1B  00BD               	movwf	(_bbt0+1)^(0+128)
  5896  0C1C  0840               	movf	_bbt1^(0+128),w
  5897  0C1D  00BC               	movwf	_bbt0^(0+128)
  5898                           
  5899                           ;sample.c: 261: bbt1=globalTicker;
  5900  0C1E  0853               	movf	(_globalTicker+3)^(0+128),w	;volatile
  5901  0C1F  00C3               	movwf	(_bbt1+3)^(0+128)
  5902  0C20  0852               	movf	(_globalTicker+2)^(0+128),w	;volatile
  5903  0C21  00C2               	movwf	(_bbt1+2)^(0+128)
  5904  0C22  0851               	movf	(_globalTicker+1)^(0+128),w	;volatile
  5905  0C23  00C1               	movwf	(_bbt1+1)^(0+128)
  5906  0C24  0850               	movf	_globalTicker^(0+128),w	;volatile
  5907  0C25  00C0               	movwf	_bbt1^(0+128)
  5908                           
  5909                           ;sample.c: 262: pidTestNum++;
  5910  0C26  0020               	movlb	0	; select bank0
  5911  0C27  3005               	movlw	5
  5912  0C28  0ADF               	incf	_pidTestNum,f
  5913                           
  5914                           ;sample.c: 263: if(pidTestNum>4){
  5915  0C29  025F               	subwf	_pidTestNum,w
  5916  0C2A  1C03               	skipc
  5917  0C2B  2BEA               	goto	l4569
  5918                           
  5919                           ;sample.c: 264: pidBbSm=4;
  5920  0C2C  3004               	movlw	4
  5921  0C2D  2D3D               	goto	L5
  5922  0C2E                     l4593:	
  5923                           ;sample.c: 265: break;
  5924                           
  5925                           
  5926                           ;sample.c: 273: bbtu=bbt1-bbt0;
  5927  0C2E  0021               	movlb	1	; select bank1
  5928  0C2F  0843               	movf	(_bbt1+3)^(0+128),w
  5929  0C30  00CB               	movwf	(_bbtu+3)^(0+128)
  5930  0C31  0842               	movf	(_bbt1+2)^(0+128),w
  5931  0C32  00CA               	movwf	(_bbtu+2)^(0+128)
  5932  0C33  0841               	movf	(_bbt1+1)^(0+128),w
  5933  0C34  00C9               	movwf	(_bbtu+1)^(0+128)
  5934  0C35  0840               	movf	_bbt1^(0+128),w
  5935  0C36  00C8               	movwf	_bbtu^(0+128)
  5936  0C37  083C               	movf	_bbt0^(0+128),w
  5937  0C38  02C8               	subwf	_bbtu^(0+128),f
  5938  0C39  083D               	movf	(_bbt0+1)^(0+128),w
  5939  0C3A  3BC9               	subwfb	(_bbtu+1)^(0+128),f
  5940  0C3B  083E               	movf	(_bbt0+2)^(0+128),w
  5941  0C3C  3BCA               	subwfb	(_bbtu+2)^(0+128),f
  5942  0C3D  083F               	movf	(_bbt0+3)^(0+128),w
  5943  0C3E  3BCB               	subwfb	(_bbtu+3)^(0+128),f
  5944                           
  5945                           ;sample.c: 274: bbtu=bbtu/5;
  5946  0C3F  3005               	movlw	5
  5947  0C40  0020               	movlb	0	; select bank0
  5948  0C41  00A4               	movwf	___aldiv@divisor
  5949  0C42  01A5               	clrf	___aldiv@divisor+1
  5950  0C43  26FB  3188         	fcall	PL10	;call to abstracted procedure
  5951  0C45  25A7  3188         	fcall	___aldiv
  5952  0C47  0827               	movf	?___aldiv+3,w
  5953  0C48  0021               	movlb	1	; select bank1
  5954  0C49  00CB               	movwf	(_bbtu+3)^(0+128)
  5955  0C4A  0020               	movlb	0	; select bank0
  5956  0C4B  0826               	movf	?___aldiv+2,w
  5957  0C4C  0021               	movlb	1	; select bank1
  5958  0C4D  00CA               	movwf	(_bbtu+2)^(0+128)
  5959  0C4E  0020               	movlb	0	; select bank0
  5960  0C4F  0825               	movf	?___aldiv+1,w
  5961  0C50  0021               	movlb	1	; select bank1
  5962  0C51  00C9               	movwf	(_bbtu+1)^(0+128)
  5963  0C52  0020               	movlb	0	; select bank0
  5964  0C53  0824               	movf	?___aldiv,w
  5965  0C54  0021               	movlb	1	; select bank1
  5966  0C55  00C8               	movwf	_bbtu^(0+128)
  5967                           
  5968                           ;sample.c: 275: bbta=(bbmax-bbmin)/2;
  5969  0C56  0857               	movf	(_bbmax+3)^(0+128),w
  5970  0C57  0020               	movlb	0	; select bank0
  5971  0C58  00AB               	movwf	___aldiv@dividend+3
  5972  0C59  0021               	movlb	1	; select bank1
  5973  0C5A  0856               	movf	(_bbmax+2)^(0+128),w
  5974  0C5B  0020               	movlb	0	; select bank0
  5975  0C5C  00AA               	movwf	___aldiv@dividend+2
  5976  0C5D  0021               	movlb	1	; select bank1
  5977  0C5E  0855               	movf	(_bbmax+1)^(0+128),w
  5978  0C5F  0020               	movlb	0	; select bank0
  5979  0C60  00A9               	movwf	___aldiv@dividend+1
  5980  0C61  0021               	movlb	1	; select bank1
  5981  0C62  0854               	movf	_bbmax^(0+128),w
  5982  0C63  0020               	movlb	0	; select bank0
  5983  0C64  00A8               	movwf	___aldiv@dividend
  5984  0C65  0021               	movlb	1	; select bank1
  5985  0C66  0858               	movf	_bbmin^(0+128),w
  5986  0C67  0020               	movlb	0	; select bank0
  5987  0C68  02A8               	subwf	___aldiv@dividend,f
  5988  0C69  0021               	movlb	1	; select bank1
  5989  0C6A  0859               	movf	(_bbmin+1)^(0+128),w
  5990  0C6B  0020               	movlb	0	; select bank0
  5991  0C6C  3BA9               	subwfb	___aldiv@dividend+1,f
  5992  0C6D  0021               	movlb	1	; select bank1
  5993  0C6E  085A               	movf	(_bbmin+2)^(0+128),w
  5994  0C6F  0020               	movlb	0	; select bank0
  5995  0C70  3BAA               	subwfb	___aldiv@dividend+2,f
  5996  0C71  0021               	movlb	1	; select bank1
  5997  0C72  085B               	movf	(_bbmin+3)^(0+128),w
  5998  0C73  0020               	movlb	0	; select bank0
  5999  0C74  3BAB               	subwfb	___aldiv@dividend+3,f
  6000  0C75  3002               	movlw	2
  6001  0C76  00A4               	movwf	___aldiv@divisor
  6002  0C77  01A5               	clrf	___aldiv@divisor+1
  6003  0C78  01A6               	clrf	___aldiv@divisor+2
  6004  0C79  01A7               	clrf	___aldiv@divisor+3
  6005  0C7A  25A7  3188         	fcall	___aldiv
  6006  0C7C  0827               	movf	?___aldiv+3,w
  6007  0C7D  0021               	movlb	1	; select bank1
  6008  0C7E  00C7               	movwf	(_bbta+3)^(0+128)
  6009  0C7F  0020               	movlb	0	; select bank0
  6010  0C80  0826               	movf	?___aldiv+2,w
  6011  0C81  0021               	movlb	1	; select bank1
  6012  0C82  00C6               	movwf	(_bbta+2)^(0+128)
  6013  0C83  0020               	movlb	0	; select bank0
  6014  0C84  0825               	movf	?___aldiv+1,w
  6015  0C85  0021               	movlb	1	; select bank1
  6016  0C86  00C5               	movwf	(_bbta+1)^(0+128)
  6017  0C87  0020               	movlb	0	; select bank0
  6018  0C88  0824               	movf	?___aldiv,w
  6019  0C89  0021               	movlb	1	; select bank1
  6020  0C8A  00C4               	movwf	_bbta^(0+128)
  6021                           
  6022                           ;sample.c: 276: bbu=(1200-5)/2;
  6023  0C8B  3002               	movlw	2
  6024  0C8C  01CF               	clrf	(_bbu+3)^(0+128)
  6025  0C8D  01CE               	clrf	(_bbu+2)^(0+128)
  6026  0C8E  00CD               	movwf	(_bbu+1)^(0+128)
  6027  0C8F  3055               	movlw	85
  6028  0C90  00CC               	movwf	_bbu^(0+128)
  6029                           
  6030                           ;sample.c: 278: bbku=(bbu*40000)/(bbta*314);
  6031  0C91  0847               	movf	(_bbta+3)^(0+128),w
  6032  0C92  00F4               	movwf	___lmul@multiplier+3
  6033  0C93  0846               	movf	(_bbta+2)^(0+128),w
  6034  0C94  00F3               	movwf	___lmul@multiplier+2
  6035  0C95  0845               	movf	(_bbta+1)^(0+128),w
  6036  0C96  00F2               	movwf	___lmul@multiplier+1
  6037  0C97  0844               	movf	_bbta^(0+128),w
  6038  0C98  00F1               	movwf	___lmul@multiplier
  6039  0C99  3001               	movlw	1
  6040  0C9A  01F8               	clrf	___lmul@multiplicand+3
  6041  0C9B  01F7               	clrf	___lmul@multiplicand+2
  6042  0C9C  00F6               	movwf	___lmul@multiplicand+1
  6043  0C9D  303A               	movlw	58
  6044  0C9E  00F5               	movwf	___lmul@multiplicand
  6045  0C9F  2613  3188         	fcall	___lmul
  6046  0CA1  0874               	movf	?___lmul+3,w
  6047  0CA2  00A7               	movwf	___aldiv@divisor+3
  6048  0CA3  0873               	movf	?___lmul+2,w
  6049  0CA4  00A6               	movwf	___aldiv@divisor+2
  6050  0CA5  0872               	movf	?___lmul+1,w
  6051  0CA6  00A5               	movwf	___aldiv@divisor+1
  6052  0CA7  0871               	movf	?___lmul,w
  6053  0CA8  00A4               	movwf	___aldiv@divisor
  6054  0CA9  3002               	movlw	2
  6055  0CAA  01F4               	clrf	___lmul@multiplier+3
  6056  0CAB  01F3               	clrf	___lmul@multiplier+2
  6057  0CAC  00F2               	movwf	___lmul@multiplier+1
  6058  0CAD  3055               	movlw	85
  6059  0CAE  00F1               	movwf	___lmul@multiplier
  6060  0CAF  309C               	movlw	156
  6061  0CB0  01F8               	clrf	___lmul@multiplicand+3
  6062  0CB1  01F7               	clrf	___lmul@multiplicand+2
  6063  0CB2  00F6               	movwf	___lmul@multiplicand+1
  6064  0CB3  3040               	movlw	64
  6065  0CB4  00F5               	movwf	___lmul@multiplicand
  6066  0CB5  2613  3188         	fcall	___lmul
  6067  0CB7  270E  3188         	fcall	PL14	;call to abstracted procedure
  6068  0CB9  25A7  3188         	fcall	___aldiv
  6069  0CBB  0827               	movf	?___aldiv+3,w
  6070  0CBC  0021               	movlb	1	; select bank1
  6071  0CBD  00BB               	movwf	(_bbku+3)^(0+128)
  6072  0CBE  0020               	movlb	0	; select bank0
  6073  0CBF  0826               	movf	?___aldiv+2,w
  6074  0CC0  0021               	movlb	1	; select bank1
  6075  0CC1  00BA               	movwf	(_bbku+2)^(0+128)
  6076  0CC2  0020               	movlb	0	; select bank0
  6077  0CC3  0825               	movf	?___aldiv+1,w
  6078  0CC4  0021               	movlb	1	; select bank1
  6079  0CC5  00B9               	movwf	(_bbku+1)^(0+128)
  6080  0CC6  0020               	movlb	0	; select bank0
  6081  0CC7  0824               	movf	?___aldiv,w
  6082  0CC8  0021               	movlb	1	; select bank1
  6083  0CC9  00B8               	movwf	_bbku^(0+128)
  6084                           
  6085                           ;sample.c: 279: bbku*=100;
  6086  0CCA  3064               	movlw	100
  6087  0CCB  00F1               	movwf	___lmul@multiplier
  6088  0CCC  01F2               	clrf	___lmul@multiplier+1
  6089  0CCD  01F3               	clrf	___lmul@multiplier+2
  6090  0CCE  01F4               	clrf	___lmul@multiplier+3
  6091  0CCF  083B               	movf	(_bbku+3)^(0+128),w
  6092  0CD0  00F8               	movwf	___lmul@multiplicand+3
  6093  0CD1  083A               	movf	(_bbku+2)^(0+128),w
  6094  0CD2  00F7               	movwf	___lmul@multiplicand+2
  6095  0CD3  0839               	movf	(_bbku+1)^(0+128),w
  6096  0CD4  00F6               	movwf	___lmul@multiplicand+1
  6097  0CD5  0838               	movf	_bbku^(0+128),w
  6098  0CD6  00F5               	movwf	___lmul@multiplicand
  6099  0CD7  2613  3188         	fcall	___lmul
  6100  0CD9  0874               	movf	?___lmul+3,w
  6101  0CDA  0021               	movlb	1	; select bank1
  6102  0CDB  00BB               	movwf	(_bbku+3)^(0+128)
  6103  0CDC  0873               	movf	?___lmul+2,w
  6104  0CDD  00BA               	movwf	(_bbku+2)^(0+128)
  6105  0CDE  0872               	movf	?___lmul+1,w
  6106  0CDF  00B9               	movwf	(_bbku+1)^(0+128)
  6107  0CE0  0871               	movf	?___lmul,w
  6108  0CE1  00B8               	movwf	_bbku^(0+128)
  6109                           
  6110                           ;sample.c: 281: PidKp=bbku*10/14;
  6111  0CE2  300E               	movlw	14
  6112  0CE3  2717  3188         	fcall	PL16	;call to abstracted procedure
  6113  0CE5  083B               	movf	(_bbku+3)^(0+128),w
  6114  0CE6  00F4               	movwf	___lmul@multiplier+3
  6115  0CE7  083A               	movf	(_bbku+2)^(0+128),w
  6116  0CE8  00F3               	movwf	___lmul@multiplier+2
  6117  0CE9  0839               	movf	(_bbku+1)^(0+128),w
  6118  0CEA  00F2               	movwf	___lmul@multiplier+1
  6119  0CEB  0838               	movf	_bbku^(0+128),w
  6120  0CEC  272C  3188         	fcall	PL52	;call to abstracted procedure
  6121  0CEE  2613  3188         	fcall	___lmul
  6122  0CF0  270E  3188         	fcall	PL14	;call to abstracted procedure
  6123  0CF2  25A7  3188         	fcall	___aldiv
  6124  0CF4  0827               	movf	?___aldiv+3,w
  6125  0CF5  0021               	movlb	1	; select bank1
  6126  0CF6  00AF               	movwf	(_PidKp+3)^(0+128)
  6127  0CF7  0020               	movlb	0	; select bank0
  6128  0CF8  0826               	movf	?___aldiv+2,w
  6129  0CF9  0021               	movlb	1	; select bank1
  6130  0CFA  00AE               	movwf	(_PidKp+2)^(0+128)
  6131  0CFB  0020               	movlb	0	; select bank0
  6132  0CFC  0825               	movf	?___aldiv+1,w
  6133  0CFD  0021               	movlb	1	; select bank1
  6134  0CFE  00AD               	movwf	(_PidKp+1)^(0+128)
  6135  0CFF  0020               	movlb	0	; select bank0
  6136  0D00  0824               	movf	?___aldiv,w
  6137  0D01  0021               	movlb	1	; select bank1
  6138  0D02  00AC               	movwf	_PidKp^(0+128)
  6139                           
  6140                           ;sample.c: 282: PidTi=bbtu*10/20;
  6141  0D03  3014               	movlw	20
  6142  0D04  2717  3188         	fcall	PL16	;call to abstracted procedure
  6143  0D06  084B               	movf	(_bbtu+3)^(0+128),w
  6144  0D07  00F4               	movwf	___lmul@multiplier+3
  6145  0D08  084A               	movf	(_bbtu+2)^(0+128),w
  6146  0D09  00F3               	movwf	___lmul@multiplier+2
  6147  0D0A  0849               	movf	(_bbtu+1)^(0+128),w
  6148  0D0B  00F2               	movwf	___lmul@multiplier+1
  6149  0D0C  0848               	movf	_bbtu^(0+128),w
  6150  0D0D  272C  3188         	fcall	PL52	;call to abstracted procedure
  6151  0D0F  2613  3188         	fcall	___lmul
  6152  0D11  270E  3188         	fcall	PL14	;call to abstracted procedure
  6153  0D13  25A7  3188         	fcall	___aldiv
  6154  0D15  0827               	movf	?___aldiv+3,w
  6155  0D16  0021               	movlb	1	; select bank1
  6156  0D17  00B7               	movwf	(_PidTi+3)^(0+128)
  6157  0D18  0020               	movlb	0	; select bank0
  6158  0D19  0826               	movf	?___aldiv+2,w
  6159  0D1A  0021               	movlb	1	; select bank1
  6160  0D1B  00B6               	movwf	(_PidTi+2)^(0+128)
  6161  0D1C  0020               	movlb	0	; select bank0
  6162  0D1D  0825               	movf	?___aldiv+1,w
  6163  0D1E  0021               	movlb	1	; select bank1
  6164  0D1F  00B5               	movwf	(_PidTi+1)^(0+128)
  6165  0D20  0020               	movlb	0	; select bank0
  6166  0D21  0824               	movf	?___aldiv,w
  6167  0D22  0021               	movlb	1	; select bank1
  6168  0D23  00B4               	movwf	_PidTi^(0+128)
  6169                           
  6170                           ;sample.c: 283: PidTd=bbtu/8;
  6171  0D24  3008               	movlw	8
  6172  0D25  0020               	movlb	0	; select bank0
  6173  0D26  00A4               	movwf	___aldiv@divisor
  6174  0D27  01A5               	clrf	___aldiv@divisor+1
  6175  0D28  26FB  3188         	fcall	PL10	;call to abstracted procedure
  6176  0D2A  25A7  3188         	fcall	___aldiv
  6177  0D2C  0827               	movf	?___aldiv+3,w
  6178  0D2D  0021               	movlb	1	; select bank1
  6179  0D2E  00B3               	movwf	(_PidTd+3)^(0+128)
  6180  0D2F  0020               	movlb	0	; select bank0
  6181  0D30  0826               	movf	?___aldiv+2,w
  6182  0D31  0021               	movlb	1	; select bank1
  6183  0D32  00B2               	movwf	(_PidTd+2)^(0+128)
  6184  0D33  0020               	movlb	0	; select bank0
  6185  0D34  0825               	movf	?___aldiv+1,w
  6186  0D35  0021               	movlb	1	; select bank1
  6187  0D36  00B1               	movwf	(_PidTd+1)^(0+128)
  6188  0D37  0020               	movlb	0	; select bank0
  6189  0D38  0824               	movf	?___aldiv,w
  6190  0D39  0021               	movlb	1	; select bank1
  6191  0D3A  00B0               	movwf	_PidTd^(0+128)
  6192                           
  6193                           ;sample.c: 284: pidBbSm=5;
  6194  0D3B  3005               	movlw	5
  6195  0D3C                     L6:	
  6196  0D3C  0020               	movlb	0	; select bank0
  6197  0D3D                     L5:	
  6198  0D3D  00DE               	movwf	_pidBbSm
  6199                           
  6200                           ;sample.c: 285: break;
  6201  0D3E  2D49               	goto	l4615
  6202  0D3F                     l4613:	
  6203  0D3F  085E               	movf	_pidBbSm,w
  6204                           
  6205                           ; Switch size 1, requested type "space"
  6206                           ; Number of cases is 6, Range of values is 0 to 5
  6207                           ; switch strategies available:
  6208                           ; Name         Instructions Cycles
  6209                           ; direct_byte           18     6 (fixed)
  6210                           ; simple_byte           19    10 (average)
  6211                           ; jumptable            260     6 (fixed)
  6212                           ;	Chosen strategy is direct_byte
  6213  0D40  0084               	movwf	4
  6214  0D41  3006               	movlw	6
  6215  0D42  0204               	subwf	4,w
  6216  0D43  1803               	skipnc
  6217  0D44  2D49               	goto	l4615
  6218  0D45  318F               	movlp	high S4921
  6219  0D46  3504               	lslf	4,w
  6220  0D47  3EB4               	addlw	low S4921
  6221  0D48  0082               	movwf	2
  6222  0D49                     l4615:	
  6223                           
  6224                           ;sample.c: 287: if(pidTestNum>2){
  6225  0D49  3003               	movlw	3
  6226  0D4A  025F               	subwf	_pidTestNum,w
  6227  0D4B  1C03               	skipc
  6228  0D4C  0008               	return
  6229                           
  6230                           ;sample.c: 288: if(bbmax<t32)bbmax=t32;
  6231  0D4D  0021               	movlb	1	; select bank1
  6232  0D4E  0857               	movf	(_bbmax+3)^(0+128),w
  6233  0D4F  3A80               	xorlw	128
  6234  0D50  00F9               	movwf	??_pid_pwm1_idrv_b_b
  6235  0D51  0020               	movlb	0	; select bank0
  6236  0D52  0835               	movf	pid_pwm1_idrv_b_b@t32+3,w
  6237  0D53  3A80               	xorlw	128
  6238  0D54  0279               	subwf	??_pid_pwm1_idrv_b_b,w
  6239  0D55  0021               	movlb	1	; select bank1
  6240  0D56  1D03               	skipz
  6241  0D57  2D68               	goto	u3423
  6242  0D58  0020               	movlb	0	; select bank0
  6243  0D59  0834               	movf	pid_pwm1_idrv_b_b@t32+2,w
  6244  0D5A  0021               	movlb	1	; select bank1
  6245  0D5B  0256               	subwf	(_bbmax+2)^(0+128),w
  6246  0D5C  1D03               	skipz
  6247  0D5D  2D68               	goto	u3423
  6248  0D5E  0020               	movlb	0	; select bank0
  6249  0D5F  0833               	movf	pid_pwm1_idrv_b_b@t32+1,w
  6250  0D60  0021               	movlb	1	; select bank1
  6251  0D61  0255               	subwf	(_bbmax+1)^(0+128),w
  6252  0D62  1D03               	skipz
  6253  0D63  2D68               	goto	u3423
  6254  0D64  0020               	movlb	0	; select bank0
  6255  0D65  0832               	movf	pid_pwm1_idrv_b_b@t32,w
  6256  0D66  0021               	movlb	1	; select bank1
  6257  0D67  0254               	subwf	_bbmax^(0+128),w
  6258  0D68                     u3423:	
  6259  0D68  1803               	skipnc
  6260  0D69  2D7A               	goto	l677
  6261  0D6A  0020               	movlb	0	; select bank0
  6262  0D6B  0835               	movf	pid_pwm1_idrv_b_b@t32+3,w
  6263  0D6C  0021               	movlb	1	; select bank1
  6264  0D6D  00D7               	movwf	(_bbmax+3)^(0+128)
  6265  0D6E  0020               	movlb	0	; select bank0
  6266  0D6F  0834               	movf	pid_pwm1_idrv_b_b@t32+2,w
  6267  0D70  0021               	movlb	1	; select bank1
  6268  0D71  00D6               	movwf	(_bbmax+2)^(0+128)
  6269  0D72  0020               	movlb	0	; select bank0
  6270  0D73  0833               	movf	pid_pwm1_idrv_b_b@t32+1,w
  6271  0D74  0021               	movlb	1	; select bank1
  6272  0D75  00D5               	movwf	(_bbmax+1)^(0+128)
  6273  0D76  0020               	movlb	0	; select bank0
  6274  0D77  0832               	movf	pid_pwm1_idrv_b_b@t32,w
  6275  0D78  0021               	movlb	1	; select bank1
  6276  0D79  00D4               	movwf	_bbmax^(0+128)
  6277  0D7A                     l677:	
  6278                           
  6279                           ;sample.c: 289: if(bbmin>t32)bbmin=t32;
  6280  0D7A  0020               	movlb	0	; select bank0
  6281  0D7B  0835               	movf	pid_pwm1_idrv_b_b@t32+3,w
  6282  0D7C  3A80               	xorlw	128
  6283  0D7D  00F9               	movwf	??_pid_pwm1_idrv_b_b
  6284  0D7E  0021               	movlb	1	; select bank1
  6285  0D7F  085B               	movf	(_bbmin+3)^(0+128),w
  6286  0D80  3A80               	xorlw	128
  6287  0D81  0279               	subwf	??_pid_pwm1_idrv_b_b,w
  6288  0D82  0020               	movlb	0	; select bank0
  6289  0D83  1D03               	skipz
  6290  0D84  2D95               	goto	u3433
  6291  0D85  0021               	movlb	1	; select bank1
  6292  0D86  085A               	movf	(_bbmin+2)^(0+128),w
  6293  0D87  0020               	movlb	0	; select bank0
  6294  0D88  0234               	subwf	pid_pwm1_idrv_b_b@t32+2,w
  6295  0D89  1D03               	skipz
  6296  0D8A  2D95               	goto	u3433
  6297  0D8B  0021               	movlb	1	; select bank1
  6298  0D8C  0859               	movf	(_bbmin+1)^(0+128),w
  6299  0D8D  0020               	movlb	0	; select bank0
  6300  0D8E  0233               	subwf	pid_pwm1_idrv_b_b@t32+1,w
  6301  0D8F  1D03               	skipz
  6302  0D90  2D95               	goto	u3433
  6303  0D91  0021               	movlb	1	; select bank1
  6304  0D92  0858               	movf	_bbmin^(0+128),w
  6305  0D93  0020               	movlb	0	; select bank0
  6306  0D94  0232               	subwf	pid_pwm1_idrv_b_b@t32,w
  6307  0D95                     u3433:	
  6308  0D95  1803               	skipnc
  6309  0D96  0008               	return
  6310  0D97  0835               	movf	pid_pwm1_idrv_b_b@t32+3,w
  6311  0D98  0021               	movlb	1	; select bank1
  6312  0D99  00DB               	movwf	(_bbmin+3)^(0+128)
  6313  0D9A  0020               	movlb	0	; select bank0
  6314  0D9B  0834               	movf	pid_pwm1_idrv_b_b@t32+2,w
  6315  0D9C  0021               	movlb	1	; select bank1
  6316  0D9D  00DA               	movwf	(_bbmin+2)^(0+128)
  6317  0D9E  0020               	movlb	0	; select bank0
  6318  0D9F  0833               	movf	pid_pwm1_idrv_b_b@t32+1,w
  6319  0DA0  0021               	movlb	1	; select bank1
  6320  0DA1  00D9               	movwf	(_bbmin+1)^(0+128)
  6321  0DA2  0020               	movlb	0	; select bank0
  6322  0DA3  0832               	movf	pid_pwm1_idrv_b_b@t32,w
  6323  0DA4  0021               	movlb	1	; select bank1
  6324  0DA5  00D8               	movwf	_bbmin^(0+128)
  6325  0DA6                     l666:	
  6326  0DA6  0008               	return
  6327  0DA7                     __end_of_pid_pwm1_idrv_b_b:	
  6328  0DA7                     __ptext37:	
  6329 ;; *************** function ___aldiv *****************
  6330 ;; Defined at:
  6331 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  6332 ;; Parameters:    Size  Location     Type
  6333 ;;  divisor         4    4[BANK0 ] long 
  6334 ;;  dividend        4    8[BANK0 ] long 
  6335 ;; Auto vars:     Size  Location     Type
  6336 ;;  quotient        4   14[BANK0 ] long 
  6337 ;;  sign            1   13[BANK0 ] unsigned char 
  6338 ;;  counter         1   12[BANK0 ] unsigned char 
  6339 ;; Return value:  Size  Location     Type
  6340 ;;                  4    4[BANK0 ] long 
  6341 ;; Registers used:
  6342 ;;		wreg, status,2, status,0
  6343 ;; Tracked objects:
  6344 ;;		On entry : 1F/0
  6345 ;;		On exit  : 1F/0
  6346 ;;		Unchanged: 0/0
  6347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6348 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6349 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6351 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6352 ;;Total ram usage:       14 bytes
  6353 ;; Hardware stack levels used:    1
  6354 ;; Hardware stack levels required when called:    1
  6355 ;; This function calls:
  6356 ;;		Nothing
  6357 ;; This function is called by:
  6358 ;;		_pid_pwm1_idrv_b_b
  6359 ;;		_pid_pwm1_idrv_run
  6360 ;;		_calc_expect_vout_adc_value
  6361 ;; This function uses a non-reentrant model
  6362 ;;
  6363                           
  6364                           
  6365                           ;psect for function ___aldiv
  6366  0DA7                     ___aldiv:	
  6367                           
  6368                           ;incstack = 0
  6369                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  6370  0DA7  01AD               	clrf	___aldiv@sign
  6371  0DA8  1FA7               	btfss	___aldiv@divisor+3,7
  6372  0DA9  2DB7               	goto	l1210
  6373  0DAA  09A4               	comf	___aldiv@divisor,f
  6374  0DAB  09A5               	comf	___aldiv@divisor+1,f
  6375  0DAC  09A6               	comf	___aldiv@divisor+2,f
  6376  0DAD  09A7               	comf	___aldiv@divisor+3,f
  6377  0DAE  0AA4               	incf	___aldiv@divisor,f
  6378  0DAF  1903               	skipnz
  6379  0DB0  0AA5               	incf	___aldiv@divisor+1,f
  6380  0DB1  1903               	skipnz
  6381  0DB2  0AA6               	incf	___aldiv@divisor+2,f
  6382  0DB3  1903               	skipnz
  6383  0DB4  0AA7               	incf	___aldiv@divisor+3,f
  6384  0DB5  01AD               	clrf	___aldiv@sign
  6385  0DB6  0AAD               	incf	___aldiv@sign,f
  6386  0DB7                     l1210:	
  6387  0DB7  1FAB               	btfss	___aldiv@dividend+3,7
  6388  0DB8  2DC6               	goto	l4495
  6389  0DB9  09A8               	comf	___aldiv@dividend,f
  6390  0DBA  09A9               	comf	___aldiv@dividend+1,f
  6391  0DBB  09AA               	comf	___aldiv@dividend+2,f
  6392  0DBC  09AB               	comf	___aldiv@dividend+3,f
  6393  0DBD  0AA8               	incf	___aldiv@dividend,f
  6394  0DBE  1903               	skipnz
  6395  0DBF  0AA9               	incf	___aldiv@dividend+1,f
  6396  0DC0  1903               	skipnz
  6397  0DC1  0AAA               	incf	___aldiv@dividend+2,f
  6398  0DC2  1903               	skipnz
  6399  0DC3  0AAB               	incf	___aldiv@dividend+3,f
  6400  0DC4  3001               	movlw	1
  6401  0DC5  06AD               	xorwf	___aldiv@sign,f
  6402  0DC6                     l4495:	
  6403  0DC6  01AE               	clrf	___aldiv@quotient
  6404  0DC7  01AF               	clrf	___aldiv@quotient+1
  6405  0DC8  01B0               	clrf	___aldiv@quotient+2
  6406  0DC9  01B1               	clrf	___aldiv@quotient+3
  6407  0DCA  0827               	movf	___aldiv@divisor+3,w
  6408  0DCB  0426               	iorwf	___aldiv@divisor+2,w
  6409  0DCC  0425               	iorwf	___aldiv@divisor+1,w
  6410  0DCD  0424               	iorwf	___aldiv@divisor,w
  6411  0DCE  1903               	skipnz
  6412  0DCF  2DFC               	goto	l4517
  6413  0DD0  01AC               	clrf	___aldiv@counter
  6414  0DD1                     L9:	
  6415  0DD1  0AAC               	incf	___aldiv@counter,f
  6416  0DD2  1BA7               	btfsc	___aldiv@divisor+3,7
  6417  0DD3  2DD9               	goto	l4505
  6418  0DD4  35A4               	lslf	___aldiv@divisor,f
  6419  0DD5  0DA5               	rlf	___aldiv@divisor+1,f
  6420  0DD6  0DA6               	rlf	___aldiv@divisor+2,f
  6421  0DD7  0DA7               	rlf	___aldiv@divisor+3,f
  6422  0DD8  2DD1               	goto	L9
  6423  0DD9                     l4505:	
  6424  0DD9  35AE               	lslf	___aldiv@quotient,f
  6425  0DDA  0DAF               	rlf	___aldiv@quotient+1,f
  6426  0DDB  0DB0               	rlf	___aldiv@quotient+2,f
  6427  0DDC  0DB1               	rlf	___aldiv@quotient+3,f
  6428  0DDD  0827               	movf	___aldiv@divisor+3,w
  6429  0DDE  022B               	subwf	___aldiv@dividend+3,w
  6430  0DDF  1D03               	skipz
  6431  0DE0  2DEB               	goto	u3315
  6432  0DE1  0826               	movf	___aldiv@divisor+2,w
  6433  0DE2  022A               	subwf	___aldiv@dividend+2,w
  6434  0DE3  1D03               	skipz
  6435  0DE4  2DEB               	goto	u3315
  6436  0DE5  0825               	movf	___aldiv@divisor+1,w
  6437  0DE6  0229               	subwf	___aldiv@dividend+1,w
  6438  0DE7  1D03               	skipz
  6439  0DE8  2DEB               	goto	u3315
  6440  0DE9  0824               	movf	___aldiv@divisor,w
  6441  0DEA  0228               	subwf	___aldiv@dividend,w
  6442  0DEB                     u3315:	
  6443  0DEB  1C03               	skipc
  6444  0DEC  2DF6               	goto	l4513
  6445  0DED  0824               	movf	___aldiv@divisor,w
  6446  0DEE  02A8               	subwf	___aldiv@dividend,f
  6447  0DEF  0825               	movf	___aldiv@divisor+1,w
  6448  0DF0  3BA9               	subwfb	___aldiv@dividend+1,f
  6449  0DF1  0826               	movf	___aldiv@divisor+2,w
  6450  0DF2  3BAA               	subwfb	___aldiv@dividend+2,f
  6451  0DF3  0827               	movf	___aldiv@divisor+3,w
  6452  0DF4  3BAB               	subwfb	___aldiv@dividend+3,f
  6453  0DF5  142E               	bsf	___aldiv@quotient,0
  6454  0DF6                     l4513:	
  6455  0DF6  36A7               	lsrf	___aldiv@divisor+3,f
  6456  0DF7  0CA6               	rrf	___aldiv@divisor+2,f
  6457  0DF8  0CA5               	rrf	___aldiv@divisor+1,f
  6458  0DF9  0CA4               	rrf	___aldiv@divisor,f
  6459  0DFA  0BAC               	decfsz	___aldiv@counter,f
  6460  0DFB  2DD9               	goto	l4505
  6461  0DFC                     l4517:	
  6462  0DFC  082D               	movf	___aldiv@sign,w
  6463  0DFD  1903               	btfsc	3,2
  6464  0DFE  2E0A               	goto	l4521
  6465  0DFF  09AE               	comf	___aldiv@quotient,f
  6466  0E00  09AF               	comf	___aldiv@quotient+1,f
  6467  0E01  09B0               	comf	___aldiv@quotient+2,f
  6468  0E02  09B1               	comf	___aldiv@quotient+3,f
  6469  0E03  0AAE               	incf	___aldiv@quotient,f
  6470  0E04  1903               	skipnz
  6471  0E05  0AAF               	incf	___aldiv@quotient+1,f
  6472  0E06  1903               	skipnz
  6473  0E07  0AB0               	incf	___aldiv@quotient+2,f
  6474  0E08  1903               	skipnz
  6475  0E09  0AB1               	incf	___aldiv@quotient+3,f
  6476  0E0A                     l4521:	
  6477  0E0A  0831               	movf	___aldiv@quotient+3,w
  6478  0E0B  00A7               	movwf	?___aldiv+3
  6479  0E0C  0830               	movf	___aldiv@quotient+2,w
  6480  0E0D  00A6               	movwf	?___aldiv+2
  6481  0E0E  082F               	movf	___aldiv@quotient+1,w
  6482  0E0F  00A5               	movwf	?___aldiv+1
  6483  0E10  082E               	movf	___aldiv@quotient,w
  6484  0E11  00A4               	movwf	?___aldiv
  6485  0E12  0008               	return
  6486  0E13                     __end_of___aldiv:	
  6487  0E13                     __ptext36:	
  6488 ;; *************** function ___lmul *****************
  6489 ;; Defined at:
  6490 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
  6491 ;; Parameters:    Size  Location     Type
  6492 ;;  multiplier      4    1[COMMON] unsigned long 
  6493 ;;  multiplicand    4    5[COMMON] unsigned long 
  6494 ;; Auto vars:     Size  Location     Type
  6495 ;;  product         4    0[BANK0 ] unsigned long 
  6496 ;; Return value:  Size  Location     Type
  6497 ;;                  4    1[COMMON] unsigned long 
  6498 ;; Registers used:
  6499 ;;		wreg, status,2, status,0
  6500 ;; Tracked objects:
  6501 ;;		On entry : 1C/1
  6502 ;;		On exit  : 1F/0
  6503 ;;		Unchanged: 0/0
  6504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6505 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6506 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6508 ;;      Totals:         8       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6509 ;;Total ram usage:       12 bytes
  6510 ;; Hardware stack levels used:    1
  6511 ;; Hardware stack levels required when called:    1
  6512 ;; This function calls:
  6513 ;;		Nothing
  6514 ;; This function is called by:
  6515 ;;		_calc_temp_rs
  6516 ;;		_calc_temp_rc
  6517 ;;		_pid_pwm1_idrv_b_b
  6518 ;;		_pid_pwm1_idrv_run
  6519 ;;		_calc_expect_vout_adc_value
  6520 ;; This function uses a non-reentrant model
  6521 ;;
  6522                           
  6523                           
  6524                           ;psect for function ___lmul
  6525  0E13                     ___lmul:	
  6526                           
  6527                           ;incstack = 0
  6528                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  6529  0E13  0020               	movlb	0	; select bank0
  6530  0E14  01A0               	clrf	___lmul@product
  6531  0E15  01A1               	clrf	___lmul@product+1
  6532  0E16  01A2               	clrf	___lmul@product+2
  6533  0E17  01A3               	clrf	___lmul@product+3
  6534  0E18                     l1166:	
  6535  0E18  1C71               	btfss	___lmul@multiplier,0
  6536  0E19  2E23               	goto	l4477
  6537  0E1A  0875               	movf	___lmul@multiplicand,w
  6538  0E1B  0020               	movlb	0	; select bank0
  6539  0E1C  07A0               	addwf	___lmul@product,f
  6540  0E1D  0876               	movf	___lmul@multiplicand+1,w
  6541  0E1E  3DA1               	addwfc	___lmul@product+1,f
  6542  0E1F  0877               	movf	___lmul@multiplicand+2,w
  6543  0E20  3DA2               	addwfc	___lmul@product+2,f
  6544  0E21  0878               	movf	___lmul@multiplicand+3,w
  6545  0E22  3DA3               	addwfc	___lmul@product+3,f
  6546  0E23                     l4477:	
  6547  0E23  35F5               	lslf	___lmul@multiplicand,f
  6548  0E24  0DF6               	rlf	___lmul@multiplicand+1,f
  6549  0E25  0DF7               	rlf	___lmul@multiplicand+2,f
  6550  0E26  0DF8               	rlf	___lmul@multiplicand+3,f
  6551  0E27  36F4               	lsrf	___lmul@multiplier+3,f
  6552  0E28  0CF3               	rrf	___lmul@multiplier+2,f
  6553  0E29  0CF2               	rrf	___lmul@multiplier+1,f
  6554  0E2A  0CF1               	rrf	___lmul@multiplier,f
  6555  0E2B  0874               	movf	___lmul@multiplier+3,w
  6556  0E2C  0473               	iorwf	___lmul@multiplier+2,w
  6557  0E2D  0472               	iorwf	___lmul@multiplier+1,w
  6558  0E2E  0471               	iorwf	___lmul@multiplier,w
  6559  0E2F  1D03               	skipz
  6560  0E30  2E18               	goto	l1166
  6561  0E31  0020               	movlb	0	; select bank0
  6562  0E32  0823               	movf	___lmul@product+3,w
  6563  0E33  00F4               	movwf	?___lmul+3
  6564  0E34  0822               	movf	___lmul@product+2,w
  6565  0E35  00F3               	movwf	?___lmul+2
  6566  0E36  0821               	movf	___lmul@product+1,w
  6567  0E37  00F2               	movwf	?___lmul+1
  6568  0E38  0820               	movf	___lmul@product,w
  6569  0E39  00F1               	movwf	?___lmul
  6570  0E3A  0008               	return
  6571  0E3B                     __end_of___lmul:	
  6572  0E3B                     __ptext13:	
  6573 ;; *************** function _set_idrv_pwm1_duty *****************
  6574 ;; Defined at:
  6575 ;;		line 48 in file "src/api/sample.c"
  6576 ;; Parameters:    Size  Location     Type
  6577 ;;  duty            2    3[COMMON] unsigned int 
  6578 ;; Auto vars:     Size  Location     Type
  6579 ;;  t16             2    5[COMMON] unsigned int 
  6580 ;; Return value:  Size  Location     Type
  6581 ;;                  1    wreg      void 
  6582 ;; Registers used:
  6583 ;;		wreg, pclath, cstack
  6584 ;; Tracked objects:
  6585 ;;		On entry : 1F/0
  6586 ;;		On exit  : 1F/1B
  6587 ;;		Unchanged: 0/0
  6588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6589 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6590 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6592 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6593 ;;Total ram usage:        4 bytes
  6594 ;; Hardware stack levels used:    1
  6595 ;; Hardware stack levels required when called:    2
  6596 ;; This function calls:
  6597 ;;		_get_idrv_pwm1_duty
  6598 ;; This function is called by:
  6599 ;;		_pid_pwm1_idrv_b_b
  6600 ;;		_pid_pwm1_idrv_run
  6601 ;; This function uses a non-reentrant model
  6602 ;;
  6603                           
  6604                           
  6605                           ;psect for function _set_idrv_pwm1_duty
  6606  0E3B                     _set_idrv_pwm1_duty:	
  6607  0E3B                     l3241:	
  6608                           ;incstack = 0
  6609                           ; Regs used in _set_idrv_pwm1_duty: [wreg+pclath+cstack]
  6610                           
  6611                           
  6612                           ;sample.c: 51: uint16_t t16;
  6613                           ;sample.c: 52: pwm1DutyForIdrv=duty;
  6614  0E3B  0874               	movf	set_idrv_pwm1_duty@duty+1,w
  6615  0E3C  00E3               	movwf	_pwm1DutyForIdrv+1
  6616  0E3D  0873               	movf	set_idrv_pwm1_duty@duty,w
  6617  0E3E  00E2               	movwf	_pwm1DutyForIdrv
  6618                           
  6619                           ;sample.c: 53: t16=get_idrv_pwm1_duty();
  6620  0E3F  26CE  3188         	fcall	_get_idrv_pwm1_duty
  6621  0E41  0872               	movf	?_get_idrv_pwm1_duty+1,w
  6622  0E42  00F6               	movwf	set_idrv_pwm1_duty@t16+1
  6623  0E43  0871               	movf	?_get_idrv_pwm1_duty,w
  6624  0E44  00F5               	movwf	set_idrv_pwm1_duty@t16
  6625                           
  6626                           ;sample.c: 54: if(t16==duty)return;
  6627  0E45  0874               	movf	set_idrv_pwm1_duty@duty+1,w
  6628  0E46  0676               	xorwf	set_idrv_pwm1_duty@t16+1,w
  6629  0E47  1D03               	skipz
  6630  0E48  2E4B               	goto	u1695
  6631  0E49  0873               	movf	set_idrv_pwm1_duty@duty,w
  6632  0E4A  0675               	xorwf	set_idrv_pwm1_duty@t16,w
  6633  0E4B                     u1695:	
  6634  0E4B  1903               	btfsc	3,2
  6635  0E4C  0008               	return
  6636                           
  6637                           ;sample.c: 57: PWM1CONbits.EN = 0;
  6638  0E4D  139B               	bcf	27,7	;volatile
  6639                           
  6640                           ;sample.c: 58: PWM1DCL= (uint8_t)(duty&0xff);
  6641  0E4E  0873               	movf	set_idrv_pwm1_duty@duty,w
  6642  0E4F  0093               	movwf	19	;volatile
  6643                           
  6644                           ;sample.c: 59: PWM1DCH=(uint8_t)(duty>>8);
  6645  0E50  0874               	movf	set_idrv_pwm1_duty@duty+1,w
  6646  0E51  0094               	movwf	20	;volatile
  6647                           
  6648                           ;sample.c: 60: PWM1CONbits.EN = 1;
  6649  0E52  179B               	bsf	27,7	;volatile
  6650  0E53  0008               	return
  6651  0E54                     __end_of_set_idrv_pwm1_duty:	
  6652  0E54                     __ptext34:	
  6653 ;; *************** function ___lldiv *****************
  6654 ;; Defined at:
  6655 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lldiv.c"
  6656 ;; Parameters:    Size  Location     Type
  6657 ;;  divisor         4    1[COMMON] unsigned long 
  6658 ;;  dividend        4    5[COMMON] unsigned long 
  6659 ;; Auto vars:     Size  Location     Type
  6660 ;;  quotient        4    0[BANK0 ] unsigned long 
  6661 ;;  counter         1    4[BANK0 ] unsigned char 
  6662 ;; Return value:  Size  Location     Type
  6663 ;;                  4    1[COMMON] unsigned long 
  6664 ;; Registers used:
  6665 ;;		wreg, status,2, status,0
  6666 ;; Tracked objects:
  6667 ;;		On entry : 1F/0
  6668 ;;		On exit  : 1F/0
  6669 ;;		Unchanged: 0/0
  6670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6671 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6672 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6674 ;;      Totals:         8       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6675 ;;Total ram usage:       13 bytes
  6676 ;; Hardware stack levels used:    1
  6677 ;; Hardware stack levels required when called:    1
  6678 ;; This function calls:
  6679 ;;		Nothing
  6680 ;; This function is called by:
  6681 ;;		_calc_temp_rs
  6682 ;;		_calc_temp_rc
  6683 ;;		_calc_rs_lo_avg
  6684 ;; This function uses a non-reentrant model
  6685 ;;
  6686                           
  6687                           
  6688                           ;psect for function ___lldiv
  6689  0E54                     ___lldiv:	
  6690                           
  6691                           ;incstack = 0
  6692                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  6693  0E54  01A0               	clrf	___lldiv@quotient
  6694  0E55  01A1               	clrf	___lldiv@quotient+1
  6695  0E56  01A2               	clrf	___lldiv@quotient+2
  6696  0E57  01A3               	clrf	___lldiv@quotient+3
  6697  0E58  0874               	movf	___lldiv@divisor+3,w
  6698  0E59  0473               	iorwf	___lldiv@divisor+2,w
  6699  0E5A  0472               	iorwf	___lldiv@divisor+1,w
  6700  0E5B  0471               	iorwf	___lldiv@divisor,w
  6701  0E5C  1903               	skipnz
  6702  0E5D  2E8A               	goto	l3631
  6703  0E5E  01A4               	clrf	___lldiv@counter
  6704  0E5F                     L8:	
  6705  0E5F  0AA4               	incf	___lldiv@counter,f
  6706  0E60  1BF4               	btfsc	___lldiv@divisor+3,7
  6707  0E61  2E67               	goto	l3619
  6708  0E62  35F1               	lslf	___lldiv@divisor,f
  6709  0E63  0DF2               	rlf	___lldiv@divisor+1,f
  6710  0E64  0DF3               	rlf	___lldiv@divisor+2,f
  6711  0E65  0DF4               	rlf	___lldiv@divisor+3,f
  6712  0E66  2E5F               	goto	L8
  6713  0E67                     l3619:	
  6714  0E67  35A0               	lslf	___lldiv@quotient,f
  6715  0E68  0DA1               	rlf	___lldiv@quotient+1,f
  6716  0E69  0DA2               	rlf	___lldiv@quotient+2,f
  6717  0E6A  0DA3               	rlf	___lldiv@quotient+3,f
  6718  0E6B  0874               	movf	___lldiv@divisor+3,w
  6719  0E6C  0278               	subwf	___lldiv@dividend+3,w
  6720  0E6D  1D03               	skipz
  6721  0E6E  2E79               	goto	u2205
  6722  0E6F  0873               	movf	___lldiv@divisor+2,w
  6723  0E70  0277               	subwf	___lldiv@dividend+2,w
  6724  0E71  1D03               	skipz
  6725  0E72  2E79               	goto	u2205
  6726  0E73  0872               	movf	___lldiv@divisor+1,w
  6727  0E74  0276               	subwf	___lldiv@dividend+1,w
  6728  0E75  1D03               	skipz
  6729  0E76  2E79               	goto	u2205
  6730  0E77  0871               	movf	___lldiv@divisor,w
  6731  0E78  0275               	subwf	___lldiv@dividend,w
  6732  0E79                     u2205:	
  6733  0E79  1C03               	skipc
  6734  0E7A  2E84               	goto	l3627
  6735  0E7B  0871               	movf	___lldiv@divisor,w
  6736  0E7C  02F5               	subwf	___lldiv@dividend,f
  6737  0E7D  0872               	movf	___lldiv@divisor+1,w
  6738  0E7E  3BF6               	subwfb	___lldiv@dividend+1,f
  6739  0E7F  0873               	movf	___lldiv@divisor+2,w
  6740  0E80  3BF7               	subwfb	___lldiv@dividend+2,f
  6741  0E81  0874               	movf	___lldiv@divisor+3,w
  6742  0E82  3BF8               	subwfb	___lldiv@dividend+3,f
  6743  0E83  1420               	bsf	___lldiv@quotient,0
  6744  0E84                     l3627:	
  6745  0E84  36F4               	lsrf	___lldiv@divisor+3,f
  6746  0E85  0CF3               	rrf	___lldiv@divisor+2,f
  6747  0E86  0CF2               	rrf	___lldiv@divisor+1,f
  6748  0E87  0CF1               	rrf	___lldiv@divisor,f
  6749  0E88  0BA4               	decfsz	___lldiv@counter,f
  6750  0E89  2E67               	goto	l3619
  6751  0E8A                     l3631:	
  6752  0E8A  0823               	movf	___lldiv@quotient+3,w
  6753  0E8B  00F4               	movwf	?___lldiv+3
  6754  0E8C  0822               	movf	___lldiv@quotient+2,w
  6755  0E8D  00F3               	movwf	?___lldiv+2
  6756  0E8E  0821               	movf	___lldiv@quotient+1,w
  6757  0E8F  00F2               	movwf	?___lldiv+1
  6758  0E90  0820               	movf	___lldiv@quotient,w
  6759  0E91  00F1               	movwf	?___lldiv
  6760  0E92  0008               	return
  6761  0E93                     __end_of___lldiv:	
  6762  0E93                     __ptext30:	
  6763 ;; *************** function _m_mem_cpy *****************
  6764 ;; Defined at:
  6765 ;;		line 39 in file "src/depend/m_string.c"
  6766 ;; Parameters:    Size  Location     Type
  6767 ;;  d               1    wreg     PTR unsigned char 
  6768 ;;		 -> str(16), 
  6769 ;;  s               2    1[COMMON] PTR unsigned char 
  6770 ;;		 -> STR_1(10), 
  6771 ;; Auto vars:     Size  Location     Type
  6772 ;;  d               1    4[COMMON] PTR unsigned char 
  6773 ;;		 -> str(16), 
  6774 ;; Return value:  Size  Location     Type
  6775 ;;                  1    wreg      void 
  6776 ;; Registers used:
  6777 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  6778 ;; Tracked objects:
  6779 ;;		On entry : 1E/1
  6780 ;;		On exit  : 1E/0
  6781 ;;		Unchanged: 1E/0
  6782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6783 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6784 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6785 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6786 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6787 ;;Total ram usage:        4 bytes
  6788 ;; Hardware stack levels used:    1
  6789 ;; Hardware stack levels required when called:    1
  6790 ;; This function calls:
  6791 ;;		Nothing
  6792 ;; This function is called by:
  6793 ;;		_main
  6794 ;; This function uses a non-reentrant model
  6795 ;;
  6796                           
  6797                           
  6798                           ;psect for function _m_mem_cpy
  6799  0E93                     _m_mem_cpy:	
  6800                           
  6801                           ;incstack = 0
  6802                           ; Regs used in _m_mem_cpy: [wreg-fsr1h+status,2+status,0+pclath]
  6803                           ;m_mem_cpy@d stored from wreg
  6804  0E93  00F4               	movwf	m_mem_cpy@d
  6805  0E94                     l4025:	
  6806                           ;m_string.c: 41: while(*s!='\0')
  6807                           
  6808  0E94  0871               	movf	m_mem_cpy@s,w
  6809  0E95  0084               	movwf	4
  6810  0E96  0872               	movf	m_mem_cpy@s+1,w
  6811  0E97  0085               	movwf	5
  6812  0E98  0012               	moviw fsr0++
  6813  0E99  1903               	btfsc	3,2
  6814  0E9A  2EAA               	goto	l4027
  6815                           
  6816                           ;m_string.c: 42: {
  6817                           ;m_string.c: 43: *d++=*s++;
  6818  0E9B  0874               	movf	m_mem_cpy@d,w
  6819  0E9C  0086               	movwf	6
  6820  0E9D  3001               	movlw	1	; select bank2/3
  6821  0E9E  0087               	movwf	7
  6822  0E9F  0871               	movf	m_mem_cpy@s,w
  6823  0EA0  0084               	movwf	4
  6824  0EA1  0872               	movf	m_mem_cpy@s+1,w
  6825  0EA2  0085               	movwf	5
  6826  0EA3  0800               	movf	0,w	;code access
  6827  0EA4  0081               	movwf	1
  6828  0EA5  0AF1               	incf	m_mem_cpy@s,f
  6829  0EA6  1903               	skipnz
  6830  0EA7  0AF2               	incf	m_mem_cpy@s+1,f
  6831  0EA8  0AF4               	incf	m_mem_cpy@d,f
  6832  0EA9  2E94               	goto	l4025
  6833  0EAA                     l4027:	
  6834                           
  6835                           ;m_string.c: 44: }
  6836                           ;m_string.c: 45: *d='\0';
  6837  0EAA  0874               	movf	m_mem_cpy@d,w
  6838  0EAB  0086               	movwf	6
  6839  0EAC  3001               	movlw	1	; select bank2/3
  6840  0EAD  0087               	movwf	7
  6841  0EAE  0181               	clrf	1
  6842  0EAF  0008               	return
  6843  0EB0                     __end_of_m_mem_cpy:	
  6844  0EB0                     __ptext24:	
  6845 ;; *************** function _uart_send_len *****************
  6846 ;; Defined at:
  6847 ;;		line 39 in file "src/api/my_uart.c"
  6848 ;; Parameters:    Size  Location     Type
  6849 ;;  buf             1    wreg     PTR unsigned char 
  6850 ;;		 -> modbusBuf(64), 
  6851 ;;  len             1    1[COMMON] unsigned char 
  6852 ;; Auto vars:     Size  Location     Type
  6853 ;;  buf             1    4[COMMON] PTR unsigned char 
  6854 ;;		 -> modbusBuf(64), 
  6855 ;;  i               1    3[COMMON] unsigned char 
  6856 ;; Return value:  Size  Location     Type
  6857 ;;                  1    wreg      void 
  6858 ;; Registers used:
  6859 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6860 ;; Tracked objects:
  6861 ;;		On entry : 1B/4
  6862 ;;		On exit  : 1F/0
  6863 ;;		Unchanged: 0/0
  6864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6865 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6866 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6867 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6868 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6869 ;;Total ram usage:        4 bytes
  6870 ;; Hardware stack levels used:    1
  6871 ;; Hardware stack levels required when called:    1
  6872 ;; This function calls:
  6873 ;;		Nothing
  6874 ;; This function is called by:
  6875 ;;		_modbus_response_illgeal_function
  6876 ;;		_modbus_response_write_single_register
  6877 ;;		_modbus_response_write_mult_register
  6878 ;;		_modbus_response_command
  6879 ;;		_main
  6880 ;; This function uses a non-reentrant model
  6881 ;;
  6882                           
  6883                           
  6884                           ;psect for function _uart_send_len
  6885  0EB0                     _uart_send_len:	
  6886                           
  6887                           ;incstack = 0
  6888                           ; Regs used in _uart_send_len: [wreg+fsr1l+fsr1h+status,2+status,0]
  6889                           ;uart_send_len@buf stored from wreg
  6890  0EB0  00F4               	movwf	uart_send_len@buf
  6891                           
  6892                           ;my_uart.c: 41: uint8_t i;
  6893                           ;my_uart.c: 42: if(!TXSTAbits.TXEN)TXSTAbits.TXEN=1;
  6894  0EB1  0023               	movlb	3	; select bank3
  6895  0EB2  1E9E               	btfss	30,5	;volatile
  6896  0EB3  169E               	bsf	30,5	;volatile
  6897  0EB4                     l509:	
  6898  0EB4  0020               	movlb	0	; select bank0
  6899  0EB5  1E11               	btfss	17,4	;volatile
  6900  0EB6  2EB4               	goto	l509
  6901                           
  6902                           ;my_uart.c: 44: for(i=0;i<len;i++){
  6903  0EB7  01F3               	clrf	uart_send_len@i
  6904  0EB8                     l3031:	
  6905  0EB8  0871               	movf	uart_send_len@len,w
  6906  0EB9  0273               	subwf	uart_send_len@i,w
  6907  0EBA  1803               	btfsc	3,0
  6908  0EBB  2ECA               	goto	l518
  6909  0EBC                     l514:	
  6910  0EBC  0020               	movlb	0	; select bank0
  6911  0EBD  1E11               	btfss	17,4	;volatile
  6912  0EBE  2EBC               	goto	l514
  6913                           
  6914                           ;my_uart.c: 46: TXREG = buf[i];
  6915  0EBF  0873               	movf	uart_send_len@i,w
  6916  0EC0  0774               	addwf	uart_send_len@buf,w
  6917  0EC1  00F2               	movwf	??_uart_send_len
  6918  0EC2  0086               	movwf	6
  6919  0EC3  3002               	movlw	2	; select bank4/5
  6920  0EC4  0087               	movwf	7
  6921  0EC5  0801               	movf	1,w
  6922  0EC6  0023               	movlb	3	; select bank3
  6923  0EC7  009A               	movwf	26	;volatile
  6924  0EC8  0AF3               	incf	uart_send_len@i,f
  6925  0EC9  2EB8               	goto	l3031
  6926  0ECA                     l518:	
  6927  0ECA  0020               	movlb	0	; select bank0
  6928  0ECB  1A11               	btfsc	17,4	;volatile
  6929  0ECC  0008               	return
  6930  0ECD  2ECA               	goto	l518
  6931  0ECE                     __end_of_uart_send_len:	
  6932  0ECE                     __ptext14:	
  6933 ;; *************** function _get_idrv_pwm1_duty *****************
  6934 ;; Defined at:
  6935 ;;		line 43 in file "src/api/sample.c"
  6936 ;; Parameters:    Size  Location     Type
  6937 ;;		None
  6938 ;; Auto vars:     Size  Location     Type
  6939 ;;		None
  6940 ;; Return value:  Size  Location     Type
  6941 ;;                  2    1[COMMON] unsigned int 
  6942 ;; Registers used:
  6943 ;;		wreg
  6944 ;; Tracked objects:
  6945 ;;		On entry : 1F/0
  6946 ;;		On exit  : 1F/1B
  6947 ;;		Unchanged: 0/0
  6948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6949 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6952 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6953 ;;Total ram usage:        2 bytes
  6954 ;; Hardware stack levels used:    1
  6955 ;; Hardware stack levels required when called:    1
  6956 ;; This function calls:
  6957 ;;		Nothing
  6958 ;; This function is called by:
  6959 ;;		_set_idrv_pwm1_duty
  6960 ;; This function uses a non-reentrant model
  6961 ;;
  6962                           
  6963                           
  6964                           ;psect for function _get_idrv_pwm1_duty
  6965  0ECE                     _get_idrv_pwm1_duty:	
  6966                           
  6967                           ;sample.c: 45: return ((PWM1DCH<<8)|PWM1DCL);
  6968                           
  6969                           ;incstack = 0
  6970                           ; Regs used in _get_idrv_pwm1_duty: [wreg]
  6971  0ECE  003B               	movlb	27	; select bank27
  6972  0ECF  0814               	movf	20,w	;volatile
  6973  0ED0  00F2               	movwf	?_get_idrv_pwm1_duty+1
  6974  0ED1  01F1               	clrf	?_get_idrv_pwm1_duty
  6975  0ED2  0813               	movf	19,w	;volatile
  6976  0ED3  04F1               	iorwf	?_get_idrv_pwm1_duty,f
  6977  0ED4  0008               	return
  6978  0ED5                     __end_of_get_idrv_pwm1_duty:	
  6979  0ED5                     __ptext2:	
  6980 ;; *************** function _uart_received_start *****************
  6981 ;; Defined at:
  6982 ;;		line 51 in file "src/api/my_uart.c"
  6983 ;; Parameters:    Size  Location     Type
  6984 ;;		None
  6985 ;; Auto vars:     Size  Location     Type
  6986 ;;		None
  6987 ;; Return value:  Size  Location     Type
  6988 ;;                  1    wreg      void 
  6989 ;; Registers used:
  6990 ;;		status,2
  6991 ;; Tracked objects:
  6992 ;;		On entry : 1F/0
  6993 ;;		On exit  : 1F/0
  6994 ;;		Unchanged: 0/0
  6995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7000 ;;Total ram usage:        0 bytes
  7001 ;; Hardware stack levels used:    1
  7002 ;; Hardware stack levels required when called:    1
  7003 ;; This function calls:
  7004 ;;		Nothing
  7005 ;; This function is called by:
  7006 ;;		_main
  7007 ;; This function uses a non-reentrant model
  7008 ;;
  7009                           
  7010                           
  7011                           ;psect for function _uart_received_start
  7012  0ED5                     _uart_received_start:	
  7013                           
  7014                           ;my_uart.c: 53: eusartRxCount=0;
  7015                           
  7016                           ;incstack = 0
  7017                           ; Regs used in _uart_received_start: [status,2]
  7018  0ED5  01FC               	clrf	_eusartRxCount	;volatile
  7019                           
  7020                           ;my_uart.c: 54: RCSTAbits.CREN=0;
  7021  0ED6  0023               	movlb	3	; select bank3
  7022  0ED7  121D               	bcf	29,4	;volatile
  7023                           
  7024                           ;my_uart.c: 55: PIE1bits.RCIE = 0;
  7025  0ED8  0021               	movlb	1	; select bank1
  7026  0ED9  1291               	bcf	17,5	;volatile
  7027                           
  7028                           ;my_uart.c: 56: PIR1bits.RCIF=0;
  7029  0EDA  0020               	movlb	0	; select bank0
  7030  0EDB  1291               	bcf	17,5	;volatile
  7031                           
  7032                           ;my_uart.c: 58: RCSTAbits.CREN=1;
  7033  0EDC  0023               	movlb	3	; select bank3
  7034  0EDD  161D               	bsf	29,4	;volatile
  7035                           
  7036                           ;my_uart.c: 59: PIE1bits.RCIE = 1;
  7037  0EDE  0021               	movlb	1	; select bank1
  7038  0EDF  1691               	bsf	17,5	;volatile
  7039                           
  7040                           ;my_uart.c: 61: eusartRxIdleTime_ms=0;
  7041  0EE0  0020               	movlb	0	; select bank0
  7042  0EE1  01DD               	clrf	_eusartRxIdleTime_ms	;volatile
  7043  0EE2  0008               	return
  7044  0EE3                     __end_of_uart_received_start:	
  7045  0EE3                     __ptext1:	
  7046 ;; *************** function _uart_send_str *****************
  7047 ;; Defined at:
  7048 ;;		line 21 in file "src/api/my_uart.c"
  7049 ;; Parameters:    Size  Location     Type
  7050 ;;  str             1    wreg     PTR unsigned char 
  7051 ;;		 -> str(16), 
  7052 ;; Auto vars:     Size  Location     Type
  7053 ;;  str             1    1[COMMON] PTR unsigned char 
  7054 ;;		 -> str(16), 
  7055 ;; Return value:  Size  Location     Type
  7056 ;;                  1    wreg      void 
  7057 ;; Registers used:
  7058 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7059 ;; Tracked objects:
  7060 ;;		On entry : 1E/1
  7061 ;;		On exit  : 1F/0
  7062 ;;		Unchanged: 0/0
  7063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7065 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7067 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7068 ;;Total ram usage:        1 bytes
  7069 ;; Hardware stack levels used:    1
  7070 ;; Hardware stack levels required when called:    1
  7071 ;; This function calls:
  7072 ;;		Nothing
  7073 ;; This function is called by:
  7074 ;;		_main
  7075 ;; This function uses a non-reentrant model
  7076 ;;
  7077                           
  7078                           
  7079                           ;psect for function _uart_send_str
  7080  0EE3                     _uart_send_str:	
  7081                           
  7082                           ;incstack = 0
  7083                           ; Regs used in _uart_send_str: [wreg+fsr1l+fsr1h+status,2+status,0]
  7084                           ;uart_send_str@str stored from wreg
  7085  0EE3  00F1               	movwf	uart_send_str@str
  7086                           
  7087                           ;my_uart.c: 24: if(!TXSTAbits.TXEN)TXSTAbits.TXEN=1;
  7088  0EE4  0023               	movlb	3	; select bank3
  7089  0EE5  1E9E               	btfss	30,5	;volatile
  7090  0EE6  169E               	bsf	30,5	;volatile
  7091  0EE7                     l493:	
  7092  0EE7  0020               	movlb	0	; select bank0
  7093  0EE8  1A11               	btfsc	17,4	;volatile
  7094  0EE9  2EF3               	goto	l496
  7095  0EEA  2EE7               	goto	l493
  7096  0EEB                     l498:	
  7097  0EEB  0020               	movlb	0	; select bank0
  7098  0EEC  1E11               	btfss	17,4	;volatile
  7099  0EED  2EEB               	goto	l498
  7100                           
  7101                           ;my_uart.c: 28: TXREG = *str;
  7102  0EEE  273E  3188         	fcall	PL68	;call to abstracted procedure
  7103  0EF0  0023               	movlb	3	; select bank3
  7104  0EF1  009A               	movwf	26	;volatile
  7105                           
  7106                           ;my_uart.c: 29: str++;
  7107  0EF2  0AF1               	incf	uart_send_str@str,f
  7108  0EF3                     l496:	
  7109  0EF3  273E  3188         	fcall	PL68	;call to abstracted procedure
  7110  0EF5  1D03               	btfss	3,2
  7111  0EF6  2EEB               	goto	l498
  7112  0EF7                     l502:	
  7113  0EF7  0020               	movlb	0	; select bank0
  7114  0EF8  1A11               	btfsc	17,4	;volatile
  7115  0EF9  0008               	return
  7116  0EFA  2EF7               	goto	l502
  7117  0EFB                     __end_of_uart_send_str:	
  7118  0EFB                     PL10:	
  7119  0EFB  01A6               	clrf	___aldiv@divisor+2
  7120  0EFC  01A7               	clrf	___aldiv@divisor+3
  7121  0EFD  0021               	movlb	1	; select bank1
  7122  0EFE  084B               	movf	(_bbtu+3)^(0+128),w
  7123  0EFF  0020               	movlb	0	; select bank0
  7124  0F00  00AB               	movwf	___aldiv@dividend+3
  7125  0F01  0021               	movlb	1	; select bank1
  7126  0F02  084A               	movf	(_bbtu+2)^(0+128),w
  7127  0F03  0020               	movlb	0	; select bank0
  7128  0F04  00AA               	movwf	___aldiv@dividend+2
  7129  0F05  0021               	movlb	1	; select bank1
  7130  0F06  0849               	movf	(_bbtu+1)^(0+128),w
  7131  0F07  0020               	movlb	0	; select bank0
  7132  0F08  00A9               	movwf	___aldiv@dividend+1
  7133  0F09  0021               	movlb	1	; select bank1
  7134  0F0A  0848               	movf	_bbtu^(0+128),w
  7135  0F0B  0020               	movlb	0	; select bank0
  7136  0F0C  00A8               	movwf	___aldiv@dividend
  7137  0F0D  0008               	return
  7138  0F0E                     __end_ofPL10:	
  7139  0F0E                     PL14:	
  7140  0F0E  0874               	movf	?___lmul+3,w
  7141  0F0F  00AB               	movwf	___aldiv@dividend+3
  7142  0F10  0873               	movf	?___lmul+2,w
  7143  0F11  00AA               	movwf	___aldiv@dividend+2
  7144  0F12  0872               	movf	?___lmul+1,w
  7145  0F13  00A9               	movwf	___aldiv@dividend+1
  7146  0F14  0871               	movf	?___lmul,w
  7147  0F15  00A8               	movwf	___aldiv@dividend
  7148  0F16  0008               	return
  7149  0F17                     __end_ofPL14:	
  7150  0F17                     PL16:	
  7151  0F17  0020               	movlb	0	; select bank0
  7152  0F18  00A4               	movwf	___aldiv@divisor
  7153  0F19  01A5               	clrf	___aldiv@divisor+1
  7154  0F1A  01A6               	clrf	___aldiv@divisor+2
  7155  0F1B  01A7               	clrf	___aldiv@divisor+3
  7156  0F1C  0021               	movlb	1	; select bank1
  7157  0F1D  0008               	return
  7158  0F1E                     __end_ofPL16:	
  7159  0F1E                     PL36:	
  7160  0F1E  3F40               	moviw [0]fsr1
  7161  0F1F  0020               	movlb	0	; select bank0
  7162  0F20  00C8               	movwf	??_main
  7163  0F21  3F41               	moviw [1]fsr1
  7164  0F22  00C9               	movwf	??_main+1
  7165  0F23  0848               	movf	??_main,w
  7166  0F24  0021               	movlb	1	; select bank1
  7167  0F25  0008               	return
  7168  0F26                     __end_ofPL36:	
  7169  0F26                     PL46:	
  7170  0F26  3063               	movlw	99
  7171  0F27  009E               	movwf	30	;volatile
  7172  0F28  019F               	clrf	31	;volatile
  7173  0F29  019B               	clrf	27	;volatile
  7174  0F2A  019C               	clrf	28	;volatile
  7175  0F2B  0008               	return
  7176  0F2C                     __end_ofPL46:	
  7177  0F2C                     PL52:	
  7178  0F2C  00F1               	movwf	___lmul@multiplier
  7179  0F2D  300A               	movlw	10
  7180  0F2E  00F5               	movwf	___lmul@multiplicand
  7181  0F2F  01F6               	clrf	___lmul@multiplicand+1
  7182  0F30  01F7               	clrf	___lmul@multiplicand+2
  7183  0F31  01F8               	clrf	___lmul@multiplicand+3
  7184  0F32  0008               	return
  7185  0F33                     __end_ofPL52:	
  7186  0F33                     PL58:	
  7187  0F33  305C               	movlw	92
  7188  0F34  0086               	movwf	6
  7189  0F35  3023               	movlw	35
  7190  0F36  0087               	movwf	7
  7191  0F37  3455               	retlw	85
  7192  0F38                     __end_ofPL58:	
  7193  0F38                     PL60:	
  7194  0F38  3055               	movlw	85
  7195  0F39  003C               	movlb	28	; select bank28
  7196  0F3A  008F               	movwf	15	;volatile
  7197  0F3B  30AA               	movlw	170
  7198  0F3C  008F               	movwf	15	;volatile
  7199  0F3D  0008               	return
  7200  0F3E                     __end_ofPL60:	
  7201  0F3E                     PL68:	
  7202  0F3E  0871               	movf	uart_send_str@str,w
  7203  0F3F  0086               	movwf	6
  7204  0F40  3001               	movlw	1	; select bank2/3
  7205  0F41  0087               	movwf	7
  7206  0F42  0801               	movf	1,w
  7207  0F43  0008               	return
  7208  0F44                     __end_ofPL68:	
  7209  0F44                     __ptext51:	
  7210 ;; *************** function _EUSART_Initialize *****************
  7211 ;; Defined at:
  7212 ;;		line 55 in file "mcc_generated_files/eusart.c"
  7213 ;; Parameters:    Size  Location     Type
  7214 ;;		None
  7215 ;; Auto vars:     Size  Location     Type
  7216 ;;		None
  7217 ;; Return value:  Size  Location     Type
  7218 ;;                  1    wreg      void 
  7219 ;; Registers used:
  7220 ;;		wreg
  7221 ;; Tracked objects:
  7222 ;;		On entry : 1F/0
  7223 ;;		On exit  : 1F/0
  7224 ;;		Unchanged: 0/0
  7225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7229 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7230 ;;Total ram usage:        0 bytes
  7231 ;; Hardware stack levels used:    1
  7232 ;; Hardware stack levels required when called:    1
  7233 ;; This function calls:
  7234 ;;		Nothing
  7235 ;; This function is called by:
  7236 ;;		_SYSTEM_Initialize
  7237 ;; This function uses a non-reentrant model
  7238 ;;
  7239                           
  7240                           
  7241                           ;psect for function _EUSART_Initialize
  7242  0F44                     _EUSART_Initialize:	
  7243  0F44                     l3233:	
  7244                           ;incstack = 0
  7245                           ; Regs used in _EUSART_Initialize: [wreg]
  7246                           
  7247                           
  7248                           ;eusart.c: 58: PIE1bits.RCIE = 0;
  7249  0F44  0021               	movlb	1	; select bank1
  7250  0F45  1291               	bcf	17,5	;volatile
  7251                           
  7252                           ;eusart.c: 59: PIE1bits.TXIE = 0;
  7253  0F46  1211               	bcf	17,4	;volatile
  7254                           
  7255                           ;eusart.c: 61: BAUDCON = 0x08;
  7256  0F47  3008               	movlw	8
  7257  0F48  0023               	movlb	3	; select bank3
  7258  0F49  009F               	movwf	31	;volatile
  7259                           
  7260                           ;eusart.c: 64: RCSTA = 0x90;
  7261  0F4A  3090               	movlw	144
  7262  0F4B  009D               	movwf	29	;volatile
  7263                           
  7264                           ;eusart.c: 67: TXSTA = 0x24;
  7265  0F4C  3024               	movlw	36
  7266  0F4D  009E               	movwf	30	;volatile
  7267                           
  7268                           ;eusart.c: 71: SPBRGL = 0xA0;
  7269  0F4E  30A0               	movlw	160
  7270  0F4F  009B               	movwf	27	;volatile
  7271                           
  7272                           ;eusart.c: 76: SPBRGH = 0x01;
  7273  0F50  3001               	movlw	1
  7274  0F51  009C               	movwf	28	;volatile
  7275                           
  7276                           ;eusart.c: 77: PIE1bits.RCIE = 1;
  7277  0F52  0021               	movlb	1	; select bank1
  7278  0F53  1691               	bsf	17,5	;volatile
  7279                           
  7280                           ;eusart.c: 78: PIR1bits.TXIF=0;
  7281  0F54  0020               	movlb	0	; select bank0
  7282  0F55  1211               	bcf	17,4	;volatile
  7283  0F56  0008               	return
  7284  0F57                     __end_of_EUSART_Initialize:	
  7285  0F57                     __ptext43:	
  7286 ;; *************** function _TMR2_Initialize *****************
  7287 ;; Defined at:
  7288 ;;		line 63 in file "mcc_generated_files/tmr2.c"
  7289 ;; Parameters:    Size  Location     Type
  7290 ;;		None
  7291 ;; Auto vars:     Size  Location     Type
  7292 ;;		None
  7293 ;; Return value:  Size  Location     Type
  7294 ;;                  1    wreg      void 
  7295 ;; Registers used:
  7296 ;;		wreg, status,2, status,0, pclath, cstack
  7297 ;; Tracked objects:
  7298 ;;		On entry : 1F/1
  7299 ;;		On exit  : 1F/0
  7300 ;;		Unchanged: 0/0
  7301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7305 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7306 ;;Total ram usage:        0 bytes
  7307 ;; Hardware stack levels used:    1
  7308 ;; Hardware stack levels required when called:    2
  7309 ;; This function calls:
  7310 ;;		_TMR2_SetInterruptHandler
  7311 ;;		_TMR2_StartTimer
  7312 ;; This function is called by:
  7313 ;;		_SYSTEM_Initialize
  7314 ;; This function uses a non-reentrant model
  7315 ;;
  7316                           
  7317                           
  7318                           ;psect for function _TMR2_Initialize
  7319  0F57                     _TMR2_Initialize:	
  7320                           
  7321                           ;tmr2.c: 68: T2CON = 0x4B;
  7322                           
  7323                           ;incstack = 0
  7324                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7325  0F57  304B               	movlw	75
  7326  0F58  0020               	movlb	0	; select bank0
  7327  0F59  009C               	movwf	28	;volatile
  7328                           
  7329                           ;tmr2.c: 71: PR2 = 0x7C;
  7330  0F5A  307C               	movlw	124
  7331  0F5B  009B               	movwf	27	;volatile
  7332                           
  7333                           ;tmr2.c: 74: TMR2 = 0x00;
  7334  0F5C  019A               	clrf	26	;volatile
  7335                           
  7336                           ;tmr2.c: 77: PIR1bits.TMR2IF = 0;
  7337  0F5D  1091               	bcf	17,1	;volatile
  7338                           
  7339                           ;tmr2.c: 80: PIE1bits.TMR2IE = 1;
  7340  0F5E  0021               	movlb	1	; select bank1
  7341  0F5F  1491               	bsf	17,1	;volatile
  7342                           
  7343                           ;tmr2.c: 83: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
  7344  0F60  3000               	movlw	0
  7345  0F61  01F1               	clrf	TMR2_SetInterruptHandler@InterruptHandler
  7346  0F62  01F2               	clrf	TMR2_SetInterruptHandler@InterruptHandler+1
  7347  0F63  2766  3188         	fcall	_TMR2_SetInterruptHandler
  7348                           
  7349                           ;tmr2.c: 86: TMR2_StartTimer();
  7350  0F65  2F67               	ljmp	l3019
  7351  0F66                     __end_of_TMR2_Initialize:	
  7352  0F66                     __ptext45:	
  7353 ;; *************** function _TMR2_SetInterruptHandler *****************
  7354 ;; Defined at:
  7355 ;;		line 142 in file "mcc_generated_files/tmr2.c"
  7356 ;; Parameters:    Size  Location     Type
  7357 ;;  InterruptHan    2    1[COMMON] PTR FTN()void 
  7358 ;;		 -> TMR2_DefaultInterruptHandler(1), 
  7359 ;; Auto vars:     Size  Location     Type
  7360 ;;		None
  7361 ;; Return value:  Size  Location     Type
  7362 ;;                  1    wreg      void 
  7363 ;; Registers used:
  7364 ;;		None
  7365 ;; Tracked objects:
  7366 ;;		On entry : 1F/1
  7367 ;;		On exit  : 1F/1
  7368 ;;		Unchanged: 1F/0
  7369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7370 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7373 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7374 ;;Total ram usage:        2 bytes
  7375 ;; Hardware stack levels used:    1
  7376 ;; Hardware stack levels required when called:    1
  7377 ;; This function calls:
  7378 ;;		Nothing
  7379 ;; This function is called by:
  7380 ;;		_TMR2_Initialize
  7381 ;; This function uses a non-reentrant model
  7382 ;;
  7383                           
  7384                           
  7385                           ;psect for function _TMR2_SetInterruptHandler
  7386  0F66                     _TMR2_SetInterruptHandler:	
  7387                           
  7388                           ;incstack = 0
  7389                           ; Regs used in _TMR2_SetInterruptHandler: []
  7390  0F66  0008               	return
  7391  0F67                     __end_of_TMR2_SetInterruptHandler:	
  7392  0F67                     __ptext44:	
  7393 ;; *************** function _TMR2_StartTimer *****************
  7394 ;; Defined at:
  7395 ;;		line 89 in file "mcc_generated_files/tmr2.c"
  7396 ;; Parameters:    Size  Location     Type
  7397 ;;		None
  7398 ;; Auto vars:     Size  Location     Type
  7399 ;;		None
  7400 ;; Return value:  Size  Location     Type
  7401 ;;                  1    wreg      void 
  7402 ;; Registers used:
  7403 ;;		None
  7404 ;; Tracked objects:
  7405 ;;		On entry : 1F/1
  7406 ;;		On exit  : 1F/0
  7407 ;;		Unchanged: 0/0
  7408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7412 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7413 ;;Total ram usage:        0 bytes
  7414 ;; Hardware stack levels used:    1
  7415 ;; Hardware stack levels required when called:    1
  7416 ;; This function calls:
  7417 ;;		Nothing
  7418 ;; This function is called by:
  7419 ;;		_TMR2_Initialize
  7420 ;; This function uses a non-reentrant model
  7421 ;;
  7422                           
  7423                           
  7424                           ;psect for function _TMR2_StartTimer
  7425  0F67                     _TMR2_StartTimer:	
  7426  0F67                     l3019:	
  7427                           ;incstack = 0
  7428                           ; Regs used in _TMR2_StartTimer: []
  7429                           
  7430                           
  7431                           ;tmr2.c: 92: T2CONbits.TMR2ON = 1;
  7432  0F67  0020               	movlb	0	; select bank0
  7433  0F68  151C               	bsf	28,2	;volatile
  7434  0F69  0008               	return
  7435  0F6A                     __end_of_TMR2_StartTimer:	
  7436                           
  7437                           	psect	bssCOMMON
  7438  007C                     __pbssCOMMON:	
  7439  007C                     _eusartRxCount:	
  7440  007C                     	ds	1
  7441                           
  7442                           	psect	bssBANK0
  7443  004A                     __pbssBANK0:	
  7444  004A                     _pwm2Ei:	
  7445  004A                     	ds	2
  7446  004C                     _rsLoAvg:	
  7447  004C                     	ds	2
  7448  004E                     _rtAdcValueRcHi:	
  7449  004E                     	ds	2
  7450  0050                     _rtAdcValueRcLo:	
  7451  0050                     	ds	2
  7452  0052                     _rtAdcValueRsHi:	
  7453  0052                     	ds	2
  7454  0054                     _rtAdcValueRsLo:	
  7455  0054                     	ds	2
  7456  0056                     _rtAdcValueVoFb:	
  7457  0056                     	ds	2
  7458  0058                     _voExpectAdcValue:	
  7459  0058                     	ds	2
  7460  005A                     _voExpectMv:	
  7461  005A                     	ds	2
  7462  005C                     _Event:	
  7463  005C                     	ds	1
  7464  005D                     _eusartRxIdleTime_ms:	
  7465  005D                     	ds	1
  7466  005E                     _pidBbSm:	
  7467  005E                     	ds	1
  7468  005F                     _pidTestNum:	
  7469  005F                     	ds	1
  7470  0060                     _subTickerX:	
  7471  0060                     	ds	1
  7472  0061                     _subTickerX_1s:	
  7473  0061                     	ds	1
  7474                           
  7475                           	psect	dataBANK0
  7476  0062                     __pdataBANK0:	
  7477  0062                     _pwm1DutyForIdrv:	
  7478  0062                     	ds	2
  7479  0064                     _pwm2DutyForVout:	
  7480  0064                     	ds	2
  7481                           
  7482                           	psect	bssBANK1
  7483  00A0                     __pbssBANK1:	
  7484  00A0                     _err:	
  7485  00A0                     	ds	12
  7486  00AC                     _PidKp:	
  7487  00AC                     	ds	4
  7488  00B0                     _PidTd:	
  7489  00B0                     	ds	4
  7490  00B4                     _PidTi:	
  7491  00B4                     	ds	4
  7492  00B8                     _bbku:	
  7493  00B8                     	ds	4
  7494  00BC                     _bbt0:	
  7495  00BC                     	ds	4
  7496  00C0                     _bbt1:	
  7497  00C0                     	ds	4
  7498  00C4                     _bbta:	
  7499  00C4                     	ds	4
  7500  00C8                     _bbtu:	
  7501  00C8                     	ds	4
  7502  00CC                     _bbu:	
  7503  00CC                     	ds	4
  7504  00D0                     _globalTicker:	
  7505  00D0                     	ds	4
  7506                           
  7507                           	psect	dataBANK1
  7508  00D4                     __pdataBANK1:	
  7509  00D4                     _bbmax:	
  7510  00D4                     	ds	4
  7511  00D8                     _bbmin:	
  7512  00D8                     	ds	4
  7513  00DC                     _pidU:	
  7514  00DC                     	ds	4
  7515  00E0                     _resRc:	
  7516  00E0                     	ds	4
  7517  00E4                     _resRs:	
  7518  00E4                     	ds	4
  7519                           
  7520                           	psect	bssBANK2
  7521  0120                     __pbssBANK2:	
  7522  0120                     _rsLoAvgBuf:	
  7523  0120                     	ds	12
  7524  012C                     _str:	
  7525  012C                     	ds	16
  7526                           
  7527                           	psect	bssBANK3
  7528  01A0                     __pbssBANK3:	
  7529  01A0                     _eusartRxBuffer:	
  7530  01A0                     	ds	64
  7531                           
  7532                           	psect	bssBANK4
  7533  0220                     __pbssBANK4:	
  7534  0220                     _modbusBuf:	
  7535  0220                     	ds	64
  7536                           
  7537                           	psect	clrtext
  7538  0F9C                     clear_ram0:	
  7539                           ;	Called with FSR0 containing the base address, and
  7540                           ;	btemp/btemp+1 has the size to clear
  7541                           
  7542  0F9C  0064               	clrwdt	;clear the watchdog before getting into this loop
  7543  0F9D                     clrloop0:	
  7544  0F9D  3001               	movlw	1
  7545  0F9E  0180               	clrf	0	;clear RAM location pointed to by FSR
  7546  0F9F  3101               	addfsr 0,1
  7547  0FA0  02FE               	subwf	126,f
  7548  0FA1  3000               	movlw	0
  7549  0FA2  3BFF               	subwfb	127,f
  7550  0FA3  087F               	movf	127,w
  7551  0FA4  047E               	iorwf	126,w
  7552  0FA5  1903               	btfsc	3,2
  7553  0FA6  3400               	retlw	0	;all done for this memory range, return
  7554  0FA7  2F9D               	goto	clrloop0	;have we reached the end yet?
  7555                           
  7556                           	psect	inittext
  7557  0FA8                     init_ram:	
  7558  0FA8  00FE               	movwf	126
  7559  0FA9                     initloop:	
  7560  0FA9  0012               	moviw fsr0++
  7561  0FAA  001E               	movwi fsr1++
  7562  0FAB  3001               	movlw	1
  7563  0FAC  02FE               	subwf	126,f
  7564  0FAD  3000               	movlw	0
  7565  0FAE  3BFF               	subwfb	127,f
  7566  0FAF  087F               	movf	127,w
  7567  0FB0  047E               	iorwf	126,w
  7568  0FB1  1903               	btfsc	3,2
  7569  0FB2  3400               	retlw	0
  7570  0FB3  2FA9               	goto	initloop
  7571                           
  7572                           	psect	cstackBANK2
  7573  013C                     __pcstackBANK2:	
  7574  013C                     calc_expect_vout_adc_value@y1:	
  7575                           
  7576                           ; 4 bytes @ 0x0
  7577  013C                     	ds	4
  7578  0140                     calc_expect_vout_adc_value@x1:	
  7579                           
  7580                           ; 4 bytes @ 0x4
  7581  0140                     	ds	4
  7582  0144                     calc_expect_vout_adc_value@y0:	
  7583                           
  7584                           ; 4 bytes @ 0x8
  7585  0144                     	ds	4
  7586  0148                     calc_expect_vout_adc_value@x0:	
  7587                           
  7588                           ; 4 bytes @ 0xC
  7589  0148                     	ds	4
  7590  014C                     calc_expect_vout_adc_value@t32:	
  7591                           
  7592                           ; 4 bytes @ 0x10
  7593  014C                     	ds	4
  7594  0150                     calc_expect_vout_adc_value@i:	
  7595                           
  7596                           ; 1 bytes @ 0x14
  7597  0150                     	ds	1
  7598                           
  7599                           	psect	cstackCOMMON
  7600  0070                     __pcstackCOMMON:	
  7601  0070                     ?_TMR2_StartTimer:	
  7602  0070                     ?_PIN_MANAGER_Initialize:	
  7603                           ; 1 bytes @ 0x0
  7604                           
  7605  0070                     ?_OSCILLATOR_Initialize:	
  7606                           ; 1 bytes @ 0x0
  7607                           
  7608  0070                     ?_WDT_Initialize:	
  7609                           ; 1 bytes @ 0x0
  7610                           
  7611  0070                     ?_ADC1_Initialize:	
  7612                           ; 1 bytes @ 0x0
  7613                           
  7614  0070                     ?_EUSART_Initialize:	
  7615                           ; 1 bytes @ 0x0
  7616                           
  7617  0070                     ?_PWM2_Initialize:	
  7618                           ; 1 bytes @ 0x0
  7619                           
  7620  0070                     ?_PWM1_Initialize:	
  7621                           ; 1 bytes @ 0x0
  7622                           
  7623  0070                     ?_TMR2_Initialize:	
  7624                           ; 1 bytes @ 0x0
  7625                           
  7626  0070                     ?_INTERRUPT_InterruptManager:	
  7627                           ; 1 bytes @ 0x0
  7628                           
  7629  0070                     ??_INTERRUPT_InterruptManager:	
  7630                           ; 1 bytes @ 0x0
  7631                           
  7632  0070                     ?_FVR_Initialize:	
  7633                           ; 1 bytes @ 0x0
  7634                           
  7635  0070                     ?_SYSTEM_Initialize:	
  7636                           ; 1 bytes @ 0x0
  7637                           
  7638  0070                     ?_uart_send_str:	
  7639                           ; 1 bytes @ 0x0
  7640                           
  7641  0070                     ?_uart_received_start:	
  7642                           ; 1 bytes @ 0x0
  7643                           
  7644  0070                     ?_fvr_set_gain:	
  7645                           ; 1 bytes @ 0x0
  7646                           
  7647  0070                     ?_adc_init:	
  7648                           ; 1 bytes @ 0x0
  7649                           
  7650  0070                     ?_pid_pwm1_idrv_b_b:	
  7651                           ; 1 bytes @ 0x0
  7652                           
  7653  0070                     ?_pid_pwm1_idrv_run:	
  7654                           ; 1 bytes @ 0x0
  7655                           
  7656  0070                     ?_pid_pwm2_vout_run:	
  7657                           ; 1 bytes @ 0x0
  7658                           
  7659  0070                     ?_my_flash_read_system_erase:	
  7660                           ; 1 bytes @ 0x0
  7661                           
  7662  0070                     ?_sys_data_save:	
  7663                           ; 1 bytes @ 0x0
  7664                           
  7665  0070                     ?_modbus_response_write_single_register:	
  7666                           ; 1 bytes @ 0x0
  7667                           
  7668  0070                     ?_modbus_response_write_mult_register:	
  7669                           ; 1 bytes @ 0x0
  7670                           
  7671  0070                     ?_modbus_response_command:	
  7672                           ; 1 bytes @ 0x0
  7673                           
  7674  0070                     ?_main:	
  7675                           ; 1 bytes @ 0x0
  7676                           
  7677  0070                     ?_sys_data_init:	
  7678                           ; 1 bytes @ 0x0
  7679                           
  7680  0070                     INTERRUPT_InterruptManager@t8:	
  7681                           ; 2 bytes @ 0x0
  7682                           
  7683                           
  7684                           ; 1 bytes @ 0x0
  7685  0070                     	ds	1
  7686  0071                     ?_FLASH_EraseBlock:	
  7687  0071                     ?_TMR2_SetInterruptHandler:	
  7688                           ; 1 bytes @ 0x1
  7689                           
  7690  0071                     ??_TMR2_StartTimer:	
  7691                           ; 1 bytes @ 0x1
  7692                           
  7693  0071                     ??_PIN_MANAGER_Initialize:	
  7694                           ; 1 bytes @ 0x1
  7695                           
  7696  0071                     ??_OSCILLATOR_Initialize:	
  7697                           ; 1 bytes @ 0x1
  7698                           
  7699  0071                     ??_WDT_Initialize:	
  7700                           ; 1 bytes @ 0x1
  7701                           
  7702  0071                     ??_ADC1_Initialize:	
  7703                           ; 1 bytes @ 0x1
  7704                           
  7705  0071                     ??_EUSART_Initialize:	
  7706                           ; 1 bytes @ 0x1
  7707                           
  7708  0071                     ?_m_mem_cpy:	
  7709                           ; 1 bytes @ 0x1
  7710                           
  7711  0071                     ?_m_mem_cpy_len:	
  7712                           ; 1 bytes @ 0x1
  7713                           
  7714  0071                     ??_PWM2_Initialize:	
  7715                           ; 1 bytes @ 0x1
  7716                           
  7717  0071                     ??_PWM1_Initialize:	
  7718                           ; 1 bytes @ 0x1
  7719                           
  7720  0071                     ??_FVR_Initialize:	
  7721                           ; 1 bytes @ 0x1
  7722                           
  7723  0071                     ??_uart_send_str:	
  7724                           ; 1 bytes @ 0x1
  7725                           
  7726  0071                     ?_uart_send_len:	
  7727                           ; 1 bytes @ 0x1
  7728                           
  7729  0071                     ??_uart_received_start:	
  7730                           ; 1 bytes @ 0x1
  7731                           
  7732  0071                     ??_fvr_set_gain:	
  7733                           ; 1 bytes @ 0x1
  7734                           
  7735  0071                     ??_adc_init:	
  7736                           ; 1 bytes @ 0x1
  7737                           
  7738  0071                     ?_my_flash_system_read:	
  7739                           ; 1 bytes @ 0x1
  7740                           
  7741  0071                     ?_get_idrv_pwm1_duty:	
  7742                           ; 1 bytes @ 0x1
  7743                           
  7744  0071                     ?_get_vout_pwm2_duty:	
  7745                           ; 2 bytes @ 0x1
  7746                           
  7747  0071                     ?_my_flash_system_write:	
  7748                           ; 2 bytes @ 0x1
  7749                           
  7750  0071                     ?_getRegisterVal:	
  7751                           ; 2 bytes @ 0x1
  7752                           
  7753  0071                     ?_crc_sum:	
  7754                           ; 2 bytes @ 0x1
  7755                           
  7756  0071                     ?___wmul:	
  7757                           ; 2 bytes @ 0x1
  7758                           
  7759  0071                     ?___awdiv:	
  7760                           ; 2 bytes @ 0x1
  7761                           
  7762  0071                     ?___lwdiv:	
  7763                           ; 2 bytes @ 0x1
  7764                           
  7765  0071                     ?___lmul:	
  7766                           ; 2 bytes @ 0x1
  7767                           
  7768  0071                     ?___lldiv:	
  7769                           ; 4 bytes @ 0x1
  7770                           
  7771  0071                     PIN_MANAGER_Initialize@state:	
  7772                           ; 4 bytes @ 0x1
  7773                           
  7774  0071                     uart_send_str@str:	
  7775                           ; 1 bytes @ 0x1
  7776                           
  7777  0071                     uart_send_len@len:	
  7778                           ; 1 bytes @ 0x1
  7779                           
  7780  0071                     fvr_set_gain@t8:	
  7781                           ; 1 bytes @ 0x1
  7782                           
  7783  0071                     FLASH_EraseBlock@startAddr:	
  7784                           ; 1 bytes @ 0x1
  7785                           
  7786  0071                     TMR2_SetInterruptHandler@InterruptHandler:	
  7787                           ; 2 bytes @ 0x1
  7788                           
  7789  0071                     my_flash_system_read@buf:	
  7790                           ; 2 bytes @ 0x1
  7791                           
  7792  0071                     my_flash_system_write@buf:	
  7793                           ; 2 bytes @ 0x1
  7794                           
  7795  0071                     getRegisterVal@addr:	
  7796                           ; 2 bytes @ 0x1
  7797                           
  7798  0071                     m_mem_cpy@s:	
  7799                           ; 2 bytes @ 0x1
  7800                           
  7801  0071                     m_mem_cpy_len@d:	
  7802                           ; 2 bytes @ 0x1
  7803                           
  7804  0071                     crc_sum@buf:	
  7805                           ; 2 bytes @ 0x1
  7806                           
  7807  0071                     ___wmul@multiplier:	
  7808                           ; 2 bytes @ 0x1
  7809                           
  7810  0071                     ___awdiv@divisor:	
  7811                           ; 2 bytes @ 0x1
  7812                           
  7813  0071                     ___lwdiv@divisor:	
  7814                           ; 2 bytes @ 0x1
  7815                           
  7816  0071                     ___lmul@multiplier:	
  7817                           ; 2 bytes @ 0x1
  7818                           
  7819  0071                     ___lldiv@divisor:	
  7820                           ; 4 bytes @ 0x1
  7821                           
  7822                           
  7823                           ; 4 bytes @ 0x1
  7824  0071                     	ds	1
  7825  0072                     ??_uart_send_len:	
  7826  0072                     fvr_set_gain@g:	
  7827                           ; 1 bytes @ 0x2
  7828                           
  7829  0072                     adc_init@ch:	
  7830                           ; 1 bytes @ 0x2
  7831                           
  7832                           
  7833                           ; 1 bytes @ 0x2
  7834  0072                     	ds	1
  7835  0073                     ??_FLASH_EraseBlock:	
  7836  0073                     ??_TMR2_SetInterruptHandler:	
  7837                           ; 1 bytes @ 0x3
  7838                           
  7839  0073                     ??_m_mem_cpy:	
  7840                           ; 1 bytes @ 0x3
  7841                           
  7842  0073                     ??_TMR2_Initialize:	
  7843                           ; 1 bytes @ 0x3
  7844                           
  7845  0073                     ??_SYSTEM_Initialize:	
  7846                           ; 1 bytes @ 0x3
  7847                           
  7848  0073                     ??_get_idrv_pwm1_duty:	
  7849                           ; 1 bytes @ 0x3
  7850                           
  7851  0073                     ?_set_idrv_pwm1_duty:	
  7852                           ; 1 bytes @ 0x3
  7853                           
  7854  0073                     ??_get_vout_pwm2_duty:	
  7855                           ; 1 bytes @ 0x3
  7856                           
  7857  0073                     ?_set_vout_pwm2_duty:	
  7858                           ; 1 bytes @ 0x3
  7859                           
  7860  0073                     ?_adc_sample:	
  7861                           ; 1 bytes @ 0x3
  7862                           
  7863  0073                     FLASH_EraseBlock@GIEBitValue:	
  7864                           ; 2 bytes @ 0x3
  7865                           
  7866  0073                     uart_send_len@i:	
  7867                           ; 1 bytes @ 0x3
  7868                           
  7869  0073                     adc_sample@gfvr:	
  7870                           ; 1 bytes @ 0x3
  7871                           
  7872  0073                     getRegisterVal@tempData:	
  7873                           ; 1 bytes @ 0x3
  7874                           
  7875  0073                     set_idrv_pwm1_duty@duty:	
  7876                           ; 1 bytes @ 0x3
  7877                           
  7878  0073                     set_vout_pwm2_duty@duty:	
  7879                           ; 2 bytes @ 0x3
  7880                           
  7881  0073                     my_flash_system_read@len:	
  7882                           ; 2 bytes @ 0x3
  7883                           
  7884  0073                     my_flash_system_write@len:	
  7885                           ; 2 bytes @ 0x3
  7886                           
  7887  0073                     m_mem_cpy_len@s:	
  7888                           ; 2 bytes @ 0x3
  7889                           
  7890  0073                     crc_sum@len:	
  7891                           ; 2 bytes @ 0x3
  7892                           
  7893  0073                     ___wmul@multiplicand:	
  7894                           ; 2 bytes @ 0x3
  7895                           
  7896  0073                     ___awdiv@dividend:	
  7897                           ; 2 bytes @ 0x3
  7898                           
  7899  0073                     ___lwdiv@dividend:	
  7900                           ; 2 bytes @ 0x3
  7901                           
  7902                           
  7903                           ; 2 bytes @ 0x3
  7904  0073                     	ds	1
  7905  0074                     ??_my_flash_read_system_erase:	
  7906  0074                     ??_getRegisterVal:	
  7907                           ; 1 bytes @ 0x4
  7908                           
  7909  0074                     uart_send_len@buf:	
  7910                           ; 1 bytes @ 0x4
  7911                           
  7912  0074                     adc_sample@num:	
  7913                           ; 1 bytes @ 0x4
  7914                           
  7915  0074                     m_mem_cpy@d:	
  7916                           ; 1 bytes @ 0x4
  7917                           
  7918                           
  7919                           ; 1 bytes @ 0x4
  7920  0074                     	ds	1
  7921  0075                     ??_set_idrv_pwm1_duty:	
  7922  0075                     ??_set_vout_pwm2_duty:	
  7923                           ; 1 bytes @ 0x5
  7924                           
  7925  0075                     ??_adc_sample:	
  7926                           ; 1 bytes @ 0x5
  7927                           
  7928  0075                     ??_my_flash_system_read:	
  7929                           ; 1 bytes @ 0x5
  7930                           
  7931  0075                     ??_my_flash_system_write:	
  7932                           ; 1 bytes @ 0x5
  7933                           
  7934  0075                     ??_crc_sum:	
  7935                           ; 1 bytes @ 0x5
  7936                           
  7937  0075                     ??___wmul:	
  7938                           ; 1 bytes @ 0x5
  7939                           
  7940  0075                     ??___awdiv:	
  7941                           ; 1 bytes @ 0x5
  7942                           
  7943  0075                     ??___lwdiv:	
  7944                           ; 1 bytes @ 0x5
  7945                           
  7946  0075                     ___awdiv@counter:	
  7947                           ; 1 bytes @ 0x5
  7948                           
  7949  0075                     set_idrv_pwm1_duty@t16:	
  7950                           ; 1 bytes @ 0x5
  7951                           
  7952  0075                     set_vout_pwm2_duty@t16:	
  7953                           ; 2 bytes @ 0x5
  7954                           
  7955  0075                     m_mem_cpy_len@len:	
  7956                           ; 2 bytes @ 0x5
  7957                           
  7958  0075                     crc_sum@j:	
  7959                           ; 2 bytes @ 0x5
  7960                           
  7961  0075                     ___wmul@product:	
  7962                           ; 2 bytes @ 0x5
  7963                           
  7964  0075                     ___lwdiv@quotient:	
  7965                           ; 2 bytes @ 0x5
  7966                           
  7967  0075                     ___lmul@multiplicand:	
  7968                           ; 2 bytes @ 0x5
  7969                           
  7970  0075                     ___lldiv@dividend:	
  7971                           ; 4 bytes @ 0x5
  7972                           
  7973                           
  7974                           ; 4 bytes @ 0x5
  7975  0075                     	ds	1
  7976  0076                     adc_sample@ch:	
  7977  0076                     ___awdiv@sign:	
  7978                           ; 1 bytes @ 0x6
  7979                           
  7980                           
  7981                           ; 1 bytes @ 0x6
  7982  0076                     	ds	1
  7983  0077                     ??_m_mem_cpy_len:	
  7984  0077                     my_flash_system_read@GIEBitValue:	
  7985                           ; 1 bytes @ 0x7
  7986                           
  7987  0077                     ___lwdiv@counter:	
  7988                           ; 1 bytes @ 0x7
  7989                           
  7990  0077                     adc_sample@ret:	
  7991                           ; 1 bytes @ 0x7
  7992                           
  7993  0077                     crc_sum@i:	
  7994                           ; 2 bytes @ 0x7
  7995                           
  7996  0077                     ___awdiv@quotient:	
  7997                           ; 2 bytes @ 0x7
  7998                           
  7999                           
  8000                           ; 2 bytes @ 0x7
  8001  0077                     	ds	1
  8002  0078                     my_flash_system_read@i:	
  8003                           
  8004                           ; 2 bytes @ 0x8
  8005  0078                     	ds	1
  8006  0079                     ??_calc_temp_rs:	
  8007  0079                     ??_pid_pwm1_idrv_b_b:	
  8008                           ; 1 bytes @ 0x9
  8009                           
  8010  0079                     ??_pid_pwm2_vout_run:	
  8011                           ; 1 bytes @ 0x9
  8012                           
  8013  0079                     ??___lmul:	
  8014                           ; 1 bytes @ 0x9
  8015                           
  8016  0079                     ??___aldiv:	
  8017                           ; 1 bytes @ 0x9
  8018                           
  8019  0079                     ??___lldiv:	
  8020                           ; 1 bytes @ 0x9
  8021                           
  8022  0079                     ?_calc_rs_lo_avg:	
  8023                           ; 1 bytes @ 0x9
  8024                           
  8025  0079                     adc_sample@i:	
  8026                           ; 2 bytes @ 0x9
  8027                           
  8028  0079                     calc_rs_lo_avg@x:	
  8029                           ; 1 bytes @ 0x9
  8030                           
  8031  0079                     crc_sum@crc:	
  8032                           ; 2 bytes @ 0x9
  8033                           
  8034                           
  8035                           ; 2 bytes @ 0x9
  8036  0079                     	ds	1
  8037  007A                     getRegisterVal@tempAddr:	
  8038  007A                     adc_sample@t16:	
  8039                           ; 1 bytes @ 0xA
  8040                           
  8041  007A                     my_flash_system_read@flashAddr:	
  8042                           ; 2 bytes @ 0xA
  8043                           
  8044                           
  8045                           ; 2 bytes @ 0xA
  8046  007A                     	ds	1
  8047  007B                     ??_crc_verify:	
  8048  007B                     ??_modbus_response_illgeal_function:	
  8049                           ; 1 bytes @ 0xB
  8050                           
  8051  007B                     ??_modbus_response_write_mult_register:	
  8052                           ; 1 bytes @ 0xB
  8053                           
  8054  007B                     ??_modbus_response_command:	
  8055                           ; 1 bytes @ 0xB
  8056                           
  8057                           
  8058                           ; 1 bytes @ 0xB
  8059  007B                     	ds	1
  8060  007C                     ??_modbus_response_process:	
  8061                           
  8062                           	psect	cstackBANK0
  8063  0020                     __pcstackBANK0:	
  8064                           ; 1 bytes @ 0xC
  8065                           
  8066  0020                     ?_crc_append:	
  8067  0020                     ?_crc_verify:	
  8068                           ; 1 bytes @ 0x0
  8069                           
  8070  0020                     pid_pwm2_vout_run@ei:	
  8071                           ; 1 bytes @ 0x0
  8072                           
  8073  0020                     my_flash_system_write@j:	
  8074                           ; 2 bytes @ 0x0
  8075                           
  8076  0020                     crc_verify@message:	
  8077                           ; 2 bytes @ 0x0
  8078                           
  8079  0020                     crc_append@message:	
  8080                           ; 2 bytes @ 0x0
  8081                           
  8082  0020                     ___lmul@product:	
  8083                           ; 2 bytes @ 0x0
  8084                           
  8085  0020                     ___lldiv@quotient:	
  8086                           ; 4 bytes @ 0x0
  8087                           
  8088                           
  8089                           ; 4 bytes @ 0x0
  8090  0020                     	ds	2
  8091  0022                     my_flash_system_write@GIEBitValue:	
  8092  0022                     pid_pwm2_vout_run@t16:	
  8093                           ; 1 bytes @ 0x2
  8094                           
  8095  0022                     crc_verify@n:	
  8096                           ; 2 bytes @ 0x2
  8097                           
  8098  0022                     crc_append@n:	
  8099                           ; 2 bytes @ 0x2
  8100                           
  8101                           
  8102                           ; 2 bytes @ 0x2
  8103  0022                     	ds	1
  8104  0023                     my_flash_system_write@blocNum:	
  8105                           
  8106                           ; 2 bytes @ 0x3
  8107  0023                     	ds	1
  8108  0024                     ??_crc_append:	
  8109  0024                     ?___aldiv:	
  8110                           ; 1 bytes @ 0x4
  8111                           
  8112  0024                     ___lldiv@counter:	
  8113                           ; 4 bytes @ 0x4
  8114                           
  8115  0024                     crc_verify@crccal:	
  8116                           ; 1 bytes @ 0x4
  8117                           
  8118  0024                     ___aldiv@divisor:	
  8119                           ; 2 bytes @ 0x4
  8120                           
  8121                           
  8122                           ; 4 bytes @ 0x4
  8123  0024                     	ds	1
  8124  0025                     ??_calc_rs_lo_avg:	
  8125  0025                     ?_calc_temp_rs:	
  8126                           ; 1 bytes @ 0x5
  8127                           
  8128  0025                     ?_calc_temp_rc:	
  8129                           ; 4 bytes @ 0x5
  8130                           
  8131  0025                     my_flash_system_write@loc:	
  8132                           ; 4 bytes @ 0x5
  8133                           
  8134                           
  8135                           ; 2 bytes @ 0x5
  8136  0025                     	ds	1
  8137  0026                     crc_verify@expected:	
  8138                           
  8139                           ; 2 bytes @ 0x6
  8140  0026                     	ds	1
  8141  0027                     my_flash_system_write@flashAddr:	
  8142  0027                     calc_rs_lo_avg@t32:	
  8143                           ; 2 bytes @ 0x7
  8144                           
  8145                           
  8146                           ; 4 bytes @ 0x7
  8147  0027                     	ds	1
  8148  0028                     ___aldiv@dividend:	
  8149                           
  8150                           ; 4 bytes @ 0x8
  8151  0028                     	ds	1
  8152  0029                     ??_calc_temp_rc:	
  8153  0029                     my_flash_system_write@i:	
  8154                           ; 1 bytes @ 0x9
  8155                           
  8156  0029                     crc_append@crc:	
  8157                           ; 2 bytes @ 0x9
  8158                           
  8159  0029                     calc_temp_rs@x:	
  8160                           ; 2 bytes @ 0x9
  8161                           
  8162                           
  8163                           ; 4 bytes @ 0x9
  8164  0029                     	ds	2
  8165  002B                     ??_sys_data_save:	
  8166  002B                     ?_modbus_response_illgeal_function:	
  8167                           ; 1 bytes @ 0xB
  8168                           
  8169  002B                     calc_rs_lo_avg@i:	
  8170                           ; 1 bytes @ 0xB
  8171                           
  8172  002B                     modbus_response_illgeal_function@errcode:	
  8173                           ; 1 bytes @ 0xB
  8174                           
  8175  002B                     modbus_response_command@tmpAddr:	
  8176                           ; 1 bytes @ 0xB
  8177                           
  8178                           
  8179                           ; 2 bytes @ 0xB
  8180  002B                     	ds	1
  8181  002C                     modbus_response_illgeal_function@buf:	
  8182  002C                     ___aldiv@counter:	
  8183                           ; 1 bytes @ 0xC
  8184                           
  8185                           
  8186                           ; 1 bytes @ 0xC
  8187  002C                     	ds	1
  8188  002D                     ??_sys_data_init:	
  8189  002D                     ??_modbus_response_write_single_register:	
  8190                           ; 1 bytes @ 0xD
  8191                           
  8192  002D                     modbus_response_illgeal_function@pmdbs:	
  8193                           ; 1 bytes @ 0xD
  8194                           
  8195  002D                     modbus_response_write_mult_register@startAddr:	
  8196                           ; 1 bytes @ 0xD
  8197                           
  8198  002D                     ___aldiv@sign:	
  8199                           ; 1 bytes @ 0xD
  8200                           
  8201  002D                     modbus_response_command@startAddr:	
  8202                           ; 1 bytes @ 0xD
  8203                           
  8204  002D                     calc_temp_rs@y:	
  8205                           ; 2 bytes @ 0xD
  8206                           
  8207  002D                     calc_temp_rc@x:	
  8208                           ; 4 bytes @ 0xD
  8209                           
  8210                           
  8211                           ; 4 bytes @ 0xD
  8212  002D                     	ds	1
  8213  002E                     modbus_response_write_mult_register@len:	
  8214  002E                     ___aldiv@quotient:	
  8215                           ; 1 bytes @ 0xE
  8216                           
  8217                           
  8218                           ; 4 bytes @ 0xE
  8219  002E                     	ds	1
  8220  002F                     modbus_response_write_mult_register@rbuf:	
  8221  002F                     modbus_response_command@i:	
  8222                           ; 1 bytes @ 0xF
  8223                           
  8224                           
  8225                           ; 1 bytes @ 0xF
  8226  002F                     	ds	1
  8227  0030                     modbus_response_write_mult_register@stb:	
  8228  0030                     modbus_response_command@pmdbs:	
  8229                           ; 1 bytes @ 0x10
  8230                           
  8231                           
  8232                           ; 1 bytes @ 0x10
  8233  0030                     	ds	1
  8234  0031                     modbus_response_write_single_register@fiSave:	
  8235  0031                     modbus_response_command@len:	
  8236                           ; 1 bytes @ 0x11
  8237                           
  8238  0031                     calc_temp_rc@y:	
  8239                           ; 1 bytes @ 0x11
  8240                           
  8241                           
  8242                           ; 4 bytes @ 0x11
  8243  0031                     	ds	1
  8244  0032                     ??_pid_pwm1_idrv_run:	
  8245  0032                     ?_calc_expect_vout_adc_value:	
  8246                           ; 1 bytes @ 0x12
  8247                           
  8248  0032                     modbus_response_command@rbuf:	
  8249                           ; 2 bytes @ 0x12
  8250                           
  8251  0032                     calc_expect_vout_adc_value@x:	
  8252                           ; 1 bytes @ 0x12
  8253                           
  8254  0032                     modbus_response_write_single_register@t16:	
  8255                           ; 2 bytes @ 0x12
  8256                           
  8257  0032                     pid_pwm1_idrv_b_b@t32:	
  8258                           ; 2 bytes @ 0x12
  8259                           
  8260                           
  8261                           ; 4 bytes @ 0x12
  8262  0032                     	ds	1
  8263  0033                     sys_data_init@ret:	
  8264  0033                     modbus_response_command@tempData:	
  8265                           ; 2 bytes @ 0x13
  8266                           
  8267                           
  8268                           ; 2 bytes @ 0x13
  8269  0033                     	ds	1
  8270  0034                     ??_calc_expect_vout_adc_value:	
  8271  0034                     modbus_response_write_single_register@i:	
  8272                           ; 1 bytes @ 0x14
  8273                           
  8274                           
  8275                           ; 2 bytes @ 0x14
  8276  0034                     	ds	1
  8277  0035                     sys_data_init@i:	
  8278                           
  8279                           ; 2 bytes @ 0x15
  8280  0035                     	ds	1
  8281  0036                     modbus_response_write_single_register@pmdbs:	
  8282  0036                     pid_pwm1_idrv_run@ep:	
  8283                           ; 1 bytes @ 0x16
  8284                           
  8285                           
  8286                           ; 4 bytes @ 0x16
  8287  0036                     	ds	1
  8288  0037                     modbus_response_write_single_register@startAddr:	
  8289                           
  8290                           ; 2 bytes @ 0x17
  8291  0037                     	ds	2
  8292  0039                     modbus_response_write_single_register@rbuf:	
  8293                           
  8294                           ; 1 bytes @ 0x19
  8295  0039                     	ds	1
  8296  003A                     ?_modbus_response_process:	
  8297  003A                     modbus_response_process@rlen:	
  8298                           ; 1 bytes @ 0x1A
  8299                           
  8300  003A                     pid_pwm1_idrv_run@ei:	
  8301                           ; 2 bytes @ 0x1A
  8302                           
  8303                           
  8304                           ; 4 bytes @ 0x1A
  8305  003A                     	ds	2
  8306  003C                     modbus_response_process@pmdbs:	
  8307                           
  8308                           ; 1 bytes @ 0x1C
  8309  003C                     	ds	1
  8310  003D                     modbus_response_process@rbuf:	
  8311                           
  8312                           ; 1 bytes @ 0x1D
  8313  003D                     	ds	5
  8314  0042                     pid_pwm1_idrv_run@t16:	
  8315                           
  8316                           ; 2 bytes @ 0x22
  8317  0042                     	ds	2
  8318  0044                     pid_pwm1_idrv_run@t32:	
  8319                           
  8320                           ; 4 bytes @ 0x24
  8321  0044                     	ds	4
  8322  0048                     ??_main:	
  8323                           
  8324                           ; 1 bytes @ 0x28
  8325  0048                     	ds	2
  8326                           
  8327                           	psect	text3
  8328  1D1E                     __ptext3:	
  8329 ;; *************** function _sys_data_init *****************
  8330 ;; Defined at:
  8331 ;;		line 104 in file "src/api/sysData.c"
  8332 ;; Parameters:    Size  Location     Type
  8333 ;;		None
  8334 ;; Auto vars:     Size  Location     Type
  8335 ;;  i               2   21[BANK0 ] unsigned int 
  8336 ;;  ret             2   19[BANK0 ] unsigned int 
  8337 ;; Return value:  Size  Location     Type
  8338 ;;                  2  789[None  ] unsigned int 
  8339 ;; Registers used:
  8340 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8341 ;; Tracked objects:
  8342 ;;		On entry : 1F/3
  8343 ;;		On exit  : 1E/0
  8344 ;;		Unchanged: 0/0
  8345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8347 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8348 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8349 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8350 ;;Total ram usage:       10 bytes
  8351 ;; Hardware stack levels used:    1
  8352 ;; Hardware stack levels required when called:    4
  8353 ;; This function calls:
  8354 ;;		___wmul
  8355 ;;		_crc_verify
  8356 ;;		_my_flash_system_read
  8357 ;;		_sys_data_save
  8358 ;; This function is called by:
  8359 ;;		_main
  8360 ;; This function uses a non-reentrant model
  8361 ;;
  8362                           
  8363                           
  8364                           ;psect for function _sys_data_init
  8365  1D1E                     _sys_data_init:	
  8366                           
  8367                           ;sysData.c: 106: uint16_t ret,i;
  8368                           ;sysData.c: 107: my_flash_system_read((uint8_t*)&sysData,sizeof(sysData_t));
  8369                           
  8370                           ;incstack = 0
  8371                           ; Regs used in _sys_data_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8372  1D1E  305C               	movlw	92
  8373  1D1F  00F1               	movwf	my_flash_system_read@buf
  8374  1D20  3023               	movlw	35
  8375  1D21  00F2               	movwf	my_flash_system_read@buf+1
  8376  1D22  3084               	movlw	132
  8377  1D23  00F3               	movwf	my_flash_system_read@len
  8378  1D24  01F4               	clrf	my_flash_system_read@len+1
  8379  1D25  25D7  319D         	fcall	_my_flash_system_read
  8380                           
  8381                           ;sysData.c: 108: ret=crc_verify((uint8_t*)&sysData,sizeof(sysData_t));
  8382  1D27  305C               	movlw	92
  8383  1D28  0020               	movlb	0	; select bank0
  8384  1D29  00A0               	movwf	crc_verify@message
  8385  1D2A  3023               	movlw	35
  8386  1D2B  00A1               	movwf	crc_verify@message+1
  8387  1D2C  3084               	movlw	132
  8388  1D2D  00A2               	movwf	crc_verify@n
  8389  1D2E  01A3               	clrf	crc_verify@n+1
  8390  1D2F  25A9  319D         	fcall	_crc_verify
  8391  1D31  00B3               	movwf	sys_data_init@ret
  8392  1D32  01B4               	clrf	sys_data_init@ret+1
  8393                           
  8394                           ;sysData.c: 109: if(!ret){
  8395  1D33  0434               	iorwf	sys_data_init@ret+1,w
  8396  1D34  1D03               	btfss	3,2
  8397  1D35  0008               	return
  8398                           
  8399                           ;sysData.c: 110: sysData.pidSetFlg0=0xff;
  8400  1D36  305C               	movlw	92
  8401  1D37  0086               	movwf	6
  8402  1D38  3023               	movlw	35
  8403  1D39  0087               	movwf	7
  8404  1D3A  30FF               	movlw	255
  8405  1D3B  3FC0               	movwi [0]fsr1
  8406                           
  8407                           ;sysData.c: 111: sysData.pidSetFlg1=0xff;
  8408  1D3C  305D               	movlw	93
  8409  1D3D  0086               	movwf	6
  8410  1D3E  30FF               	movlw	255
  8411  1D3F  0081               	movwf	1
  8412                           
  8413                           ;sysData.c: 112: sysData.id=0xff;
  8414  1D40  305E               	movlw	94
  8415  1D41  0086               	movwf	6
  8416  1D42  30FF               	movlw	255
  8417  1D43  0081               	movwf	1
  8418                           
  8419                           ;sysData.c: 113: for(i=0;i<30;i++){
  8420  1D44  01B5               	clrf	sys_data_init@i
  8421  1D45  01B6               	clrf	sys_data_init@i+1
  8422  1D46                     l4757:	
  8423                           
  8424                           ;sysData.c: 115: sysData.calibRsAdc[i]=6400+i*720;
  8425  1D46  0836               	movf	sys_data_init@i+1,w
  8426  1D47  00F2               	movwf	___wmul@multiplier+1
  8427  1D48  0835               	movf	sys_data_init@i,w
  8428  1D49  00F1               	movwf	___wmul@multiplier
  8429  1D4A  30D0               	movlw	208
  8430  1D4B  00F3               	movwf	___wmul@multiplicand
  8431  1D4C  3002               	movlw	2
  8432  1D4D  00F4               	movwf	___wmul@multiplicand+1
  8433  1D4E  2594  319D         	fcall	___wmul
  8434  1D50  0871               	movf	?___wmul,w
  8435  1D51  3E00               	addlw	0
  8436  1D52  00AD               	movwf	??_sys_data_init
  8437  1D53  3019               	movlw	25
  8438  1D54  3D72               	addwfc	?___wmul+1,w
  8439  1D55  00AE               	movwf	??_sys_data_init+1
  8440  1D56  0836               	movf	sys_data_init@i+1,w
  8441  1D57  00B0               	movwf	??_sys_data_init+3
  8442  1D58  0835               	movf	sys_data_init@i,w
  8443  1D59  00AF               	movwf	??_sys_data_init+2
  8444  1D5A  3066               	movlw	102
  8445  1D5B  35AF               	lslf	??_sys_data_init+2,f
  8446  1D5C  0DB0               	rlf	??_sys_data_init+3,f
  8447  1D5D  00B1               	movwf	??_sys_data_init+4
  8448  1D5E  3023               	movlw	35
  8449  1D5F  00B2               	movwf	??_sys_data_init+5
  8450  1D60  082F               	movf	??_sys_data_init+2,w
  8451  1D61  0731               	addwf	??_sys_data_init+4,w
  8452  1D62  0086               	movwf	6
  8453  1D63  0830               	movf	??_sys_data_init+3,w
  8454  1D64  3D32               	addwfc	??_sys_data_init+5,w
  8455  1D65  0087               	movwf	7
  8456  1D66  082D               	movf	??_sys_data_init,w
  8457  1D67  3FC0               	movwi [0]fsr1
  8458  1D68  082E               	movf	??_sys_data_init+1,w
  8459  1D69  3FC1               	movwi [1]fsr1
  8460                           
  8461                           ;sysData.c: 116: sysData.calibVoMV[i]=i*333;
  8462  1D6A  0836               	movf	sys_data_init@i+1,w
  8463  1D6B  00F2               	movwf	___wmul@multiplier+1
  8464  1D6C  0835               	movf	sys_data_init@i,w
  8465  1D6D  00F1               	movwf	___wmul@multiplier
  8466  1D6E  304D               	movlw	77
  8467  1D6F  00F3               	movwf	___wmul@multiplicand
  8468  1D70  3001               	movlw	1
  8469  1D71  00F4               	movwf	___wmul@multiplicand+1
  8470  1D72  2594  319D         	fcall	___wmul
  8471  1D74  0836               	movf	sys_data_init@i+1,w
  8472  1D75  00AE               	movwf	??_sys_data_init+1
  8473  1D76  0835               	movf	sys_data_init@i,w
  8474  1D77  00AD               	movwf	??_sys_data_init
  8475  1D78  30A2               	movlw	162
  8476  1D79  35AD               	lslf	??_sys_data_init,f
  8477  1D7A  0DAE               	rlf	??_sys_data_init+1,f
  8478  1D7B  00AF               	movwf	??_sys_data_init+2
  8479  1D7C  3023               	movlw	35
  8480  1D7D  00B0               	movwf	??_sys_data_init+3
  8481  1D7E  082D               	movf	??_sys_data_init,w
  8482  1D7F  072F               	addwf	??_sys_data_init+2,w
  8483  1D80  0086               	movwf	6
  8484  1D81  082E               	movf	??_sys_data_init+1,w
  8485  1D82  3D30               	addwfc	??_sys_data_init+3,w
  8486  1D83  0087               	movwf	7
  8487  1D84  0871               	movf	?___wmul,w
  8488  1D85  3FC0               	movwi [0]fsr1
  8489  1D86  0872               	movf	?___wmul+1,w
  8490  1D87  3FC1               	movwi [1]fsr1
  8491  1D88  0AB5               	incf	sys_data_init@i,f
  8492  1D89  1903               	skipnz
  8493  1D8A  0AB6               	incf	sys_data_init@i+1,f
  8494  1D8B  3000               	movlw	0
  8495  1D8C  0236               	subwf	sys_data_init@i+1,w
  8496  1D8D  301E               	movlw	30
  8497  1D8E  1903               	skipnz
  8498  1D8F  0235               	subwf	sys_data_init@i,w
  8499  1D90  1C03               	skipc
  8500  1D91  2D46               	goto	l4757
  8501                           
  8502                           ;sysData.c: 117: }
  8503                           ;sysData.c: 118: sys_data_save();
  8504  1D92  3196  2E19         	ljmp	l4277
  8505  1D94                     __end_of_sys_data_init:	
  8506  1D94                     __ptext5:	
  8507 ;; *************** function ___wmul *****************
  8508 ;; Defined at:
  8509 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  8510 ;; Parameters:    Size  Location     Type
  8511 ;;  multiplier      2    1[COMMON] unsigned int 
  8512 ;;  multiplicand    2    3[COMMON] unsigned int 
  8513 ;; Auto vars:     Size  Location     Type
  8514 ;;  product         2    5[COMMON] unsigned int 
  8515 ;; Return value:  Size  Location     Type
  8516 ;;                  2    1[COMMON] unsigned int 
  8517 ;; Registers used:
  8518 ;;		wreg, status,2, status,0
  8519 ;; Tracked objects:
  8520 ;;		On entry : 1F/0
  8521 ;;		On exit  : 1F/0
  8522 ;;		Unchanged: 1F/0
  8523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8524 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8525 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8527 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8528 ;;Total ram usage:        6 bytes
  8529 ;; Hardware stack levels used:    1
  8530 ;; Hardware stack levels required when called:    1
  8531 ;; This function calls:
  8532 ;;		Nothing
  8533 ;; This function is called by:
  8534 ;;		_sys_data_init
  8535 ;; This function uses a non-reentrant model
  8536 ;;
  8537                           
  8538                           
  8539                           ;psect for function ___wmul
  8540  1D94                     ___wmul:	
  8541                           
  8542                           ;incstack = 0
  8543                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8544  1D94  01F5               	clrf	___wmul@product
  8545  1D95  01F6               	clrf	___wmul@product+1
  8546  1D96                     l3499:	
  8547  1D96  1C71               	btfss	___wmul@multiplier,0
  8548  1D97  2D9C               	goto	l3503
  8549  1D98  0873               	movf	___wmul@multiplicand,w
  8550  1D99  07F5               	addwf	___wmul@product,f
  8551  1D9A  0874               	movf	___wmul@multiplicand+1,w
  8552  1D9B  3DF6               	addwfc	___wmul@product+1,f
  8553  1D9C                     l3503:	
  8554  1D9C  35F3               	lslf	___wmul@multiplicand,f
  8555  1D9D  0DF4               	rlf	___wmul@multiplicand+1,f
  8556  1D9E  36F2               	lsrf	___wmul@multiplier+1,f
  8557  1D9F  0CF1               	rrf	___wmul@multiplier,f
  8558  1DA0  0871               	movf	___wmul@multiplier,w
  8559  1DA1  0472               	iorwf	___wmul@multiplier+1,w
  8560  1DA2  1D03               	btfss	3,2
  8561  1DA3  2D96               	goto	l3499
  8562  1DA4  0876               	movf	___wmul@product+1,w
  8563  1DA5  00F2               	movwf	?___wmul+1
  8564  1DA6  0875               	movf	___wmul@product,w
  8565  1DA7  00F1               	movwf	?___wmul
  8566  1DA8  0008               	return
  8567  1DA9                     __end_of___wmul:	
  8568  1DA9                     __ptext27:	
  8569 ;; *************** function _crc_verify *****************
  8570 ;; Defined at:
  8571 ;;		line 135 in file "src/depend/crc16.c"
  8572 ;; Parameters:    Size  Location     Type
  8573 ;;  message         2    0[BANK0 ] PTR unsigned char 
  8574 ;;		 -> modbusBuf(64), sysData(132), 
  8575 ;;  n               2    2[BANK0 ] unsigned int 
  8576 ;; Auto vars:     Size  Location     Type
  8577 ;;  expected        2    6[BANK0 ] unsigned int 
  8578 ;;  crccal          2    4[BANK0 ] unsigned int 
  8579 ;; Return value:  Size  Location     Type
  8580 ;;                  1    wreg      unsigned char 
  8581 ;; Registers used:
  8582 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8583 ;; Tracked objects:
  8584 ;;		On entry : 1F/0
  8585 ;;		On exit  : 1F/0
  8586 ;;		Unchanged: 0/0
  8587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8588 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8589 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8591 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8592 ;;Total ram usage:        8 bytes
  8593 ;; Hardware stack levels used:    1
  8594 ;; Hardware stack levels required when called:    2
  8595 ;; This function calls:
  8596 ;;		_crc_sum
  8597 ;;		_m_mem_cpy_len
  8598 ;; This function is called by:
  8599 ;;		_sys_data_init
  8600 ;;		_modbus_response_process
  8601 ;; This function uses a non-reentrant model
  8602 ;;
  8603                           
  8604                           
  8605                           ;psect for function _crc_verify
  8606  1DA9                     _crc_verify:	
  8607                           
  8608                           ;crc16.c: 137: uint16_t expected,crccal;
  8609                           ;crc16.c: 138: m_mem_cpy_len((uint8_t*)(&expected),(message+n-2),2);
  8610                           
  8611                           ;incstack = 0
  8612                           ; Regs used in _crc_verify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8613  1DA9  0822               	movf	crc_verify@n,w
  8614  1DAA  0720               	addwf	crc_verify@message,w
  8615  1DAB  00F3               	movwf	m_mem_cpy_len@s
  8616  1DAC  0823               	movf	crc_verify@n+1,w
  8617  1DAD  3D21               	addwfc	crc_verify@message+1,w
  8618  1DAE  00F4               	movwf	m_mem_cpy_len@s+1
  8619  1DAF  30FE               	movlw	-2
  8620  1DB0  07F3               	addwf	m_mem_cpy_len@s,f
  8621  1DB1  1C03               	skipc
  8622  1DB2  03F4               	decf	m_mem_cpy_len@s+1,f
  8623  1DB3  3026               	movlw	low crc_verify@expected
  8624  1DB4  00F1               	movwf	m_mem_cpy_len@d
  8625  1DB5  3000               	movlw	high crc_verify@expected
  8626  1DB6  00F2               	movwf	m_mem_cpy_len@d+1
  8627  1DB7  3002               	movlw	2
  8628  1DB8  00F5               	movwf	m_mem_cpy_len@len
  8629  1DB9  01F6               	clrf	m_mem_cpy_len@len+1
  8630  1DBA  318B  23AD  319D   	fcall	_m_mem_cpy_len
  8631                           
  8632                           ;crc16.c: 139: crccal=crc_sum(message,n - 2);
  8633  1DBD  0821               	movf	crc_verify@message+1,w
  8634  1DBE  00F2               	movwf	crc_sum@buf+1
  8635  1DBF  0820               	movf	crc_verify@message,w
  8636  1DC0  00F1               	movwf	crc_sum@buf
  8637  1DC1  0822               	movf	crc_verify@n,w
  8638  1DC2  3EFE               	addlw	254
  8639  1DC3  00F3               	movwf	crc_sum@len
  8640  1DC4  30FF               	movlw	255
  8641  1DC5  3D23               	addwfc	crc_verify@n+1,w
  8642  1DC6  00F4               	movwf	crc_sum@len+1
  8643  1DC7  3197  272D  319D   	fcall	_crc_sum
  8644  1DCA  0872               	movf	?_crc_sum+1,w
  8645  1DCB  00A5               	movwf	crc_verify@crccal+1
  8646  1DCC  0871               	movf	?_crc_sum,w
  8647  1DCD  00A4               	movwf	crc_verify@crccal
  8648                           
  8649                           ;crc16.c: 140: if(expected!=crccal)return 0;
  8650  1DCE  0825               	movf	crc_verify@crccal+1,w
  8651  1DCF  0627               	xorwf	crc_verify@expected+1,w
  8652  1DD0  1D03               	skipz
  8653  1DD1  2DD4               	goto	u3005
  8654  1DD2  0824               	movf	crc_verify@crccal,w
  8655  1DD3  0626               	xorwf	crc_verify@expected,w
  8656  1DD4                     u3005:	
  8657  1DD4  1D03               	btfss	3,2
  8658  1DD5  3400               	retlw	0
  8659                           
  8660                           ;crc16.c: 141: return 1;
  8661  1DD6  3401               	retlw	1
  8662  1DD7                     __end_of_crc_verify:	
  8663  1DD7                     __ptext4:	
  8664 ;; *************** function _my_flash_system_read *****************
  8665 ;; Defined at:
  8666 ;;		line 23 in file "src/api/sysData.c"
  8667 ;; Parameters:    Size  Location     Type
  8668 ;;  buf             2    1[COMMON] PTR unsigned char 
  8669 ;;		 -> sysData(132), 
  8670 ;;  len             2    3[COMMON] unsigned int 
  8671 ;; Auto vars:     Size  Location     Type
  8672 ;;  flashAddr       2   10[COMMON] unsigned int 
  8673 ;;  i               2    8[COMMON] unsigned int 
  8674 ;;  GIEBitValue     1    7[COMMON] unsigned char 
  8675 ;; Return value:  Size  Location     Type
  8676 ;;                  1    wreg      void 
  8677 ;; Registers used:
  8678 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8679 ;; Tracked objects:
  8680 ;;		On entry : 1F/3
  8681 ;;		On exit  : 1F/3
  8682 ;;		Unchanged: 0/0
  8683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8684 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8685 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8686 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8687 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8688 ;;Total ram usage:       11 bytes
  8689 ;; Hardware stack levels used:    1
  8690 ;; Hardware stack levels required when called:    1
  8691 ;; This function calls:
  8692 ;;		Nothing
  8693 ;; This function is called by:
  8694 ;;		_sys_data_init
  8695 ;; This function uses a non-reentrant model
  8696 ;;
  8697                           
  8698                           
  8699                           ;psect for function _my_flash_system_read
  8700  1DD7                     _my_flash_system_read:	
  8701                           
  8702                           ;sysData.c: 25: uint16_t flashAddr=0x1f00;
  8703                           
  8704                           ;incstack = 0
  8705                           ; Regs used in _my_flash_system_read: [wreg+fsr1l+fsr1h+status,2+status,0]
  8706  1DD7  301F               	movlw	31
  8707  1DD8  01FA               	clrf	my_flash_system_read@flashAddr
  8708  1DD9  00FB               	movwf	my_flash_system_read@flashAddr+1
  8709                           
  8710                           ;sysData.c: 26: uint16_t i;
  8711                           ;sysData.c: 28: uint8_t GIEBitValue = INTCONbits.GIE;
  8712  1DDA  3000               	movlw	0
  8713  1DDB  1B8B               	btfsc	11,7	;volatile
  8714  1DDC  3001               	movlw	1
  8715  1DDD  00F7               	movwf	my_flash_system_read@GIEBitValue
  8716                           
  8717                           ;sysData.c: 30: INTCONbits.GIE = 0;
  8718  1DDE  138B               	bcf	11,7	;volatile
  8719                           
  8720                           ;sysData.c: 32: for(i=0;i<len;i++){
  8721  1DDF  01F8               	clrf	my_flash_system_read@i
  8722  1DE0  01F9               	clrf	my_flash_system_read@i+1
  8723  1DE1                     l3309:	
  8724  1DE1  0874               	movf	my_flash_system_read@len+1,w
  8725  1DE2  0279               	subwf	my_flash_system_read@i+1,w
  8726  1DE3  1D03               	skipz
  8727  1DE4  2DE7               	goto	u1745
  8728  1DE5  0873               	movf	my_flash_system_read@len,w
  8729  1DE6  0278               	subwf	my_flash_system_read@i,w
  8730  1DE7                     u1745:	
  8731  1DE7  1803               	btfsc	3,0
  8732  1DE8  2E05               	goto	l3311
  8733                           
  8734                           ;sysData.c: 34: PMADRL = (flashAddr & 0x00FF);
  8735  1DE9  087A               	movf	my_flash_system_read@flashAddr,w
  8736  1DEA  0091               	movwf	17	;volatile
  8737                           
  8738                           ;sysData.c: 35: PMADRH = ((flashAddr & 0xFF00) >> 8);
  8739  1DEB  087B               	movf	my_flash_system_read@flashAddr+1,w
  8740  1DEC  0092               	movwf	18	;volatile
  8741                           
  8742                           ;sysData.c: 37: PMCON1bits.CFGS = 0;
  8743  1DED  1315               	bcf	21,6	;volatile
  8744                           
  8745                           ;sysData.c: 38: PMCON1bits.RD = 1;
  8746  1DEE  1415               	bsf	21,0	;volatile
  8747                           
  8748                           ;sysData.c: 39: __nop();
  8749  1DEF  0000               	nop
  8750                           
  8751                           ;sysData.c: 40: __nop();
  8752  1DF0  0000               	nop
  8753                           
  8754                           ;sysData.c: 41: buf[i]=PMDATL;
  8755  1DF1  0878               	movf	my_flash_system_read@i,w
  8756  1DF2  0771               	addwf	my_flash_system_read@buf,w
  8757  1DF3  00F5               	movwf	??_my_flash_system_read
  8758  1DF4  0879               	movf	my_flash_system_read@i+1,w
  8759  1DF5  3D72               	addwfc	my_flash_system_read@buf+1,w
  8760  1DF6  00F6               	movwf	??_my_flash_system_read+1
  8761  1DF7  0875               	movf	??_my_flash_system_read,w
  8762  1DF8  0086               	movwf	6
  8763  1DF9  0876               	movf	??_my_flash_system_read+1,w
  8764  1DFA  0087               	movwf	7
  8765  1DFB  0023               	movlb	3	; select bank3
  8766  1DFC  0813               	movf	19,w	;volatile
  8767  1DFD  0081               	movwf	1
  8768                           
  8769                           ;sysData.c: 42: flashAddr++;
  8770  1DFE  0AFA               	incf	my_flash_system_read@flashAddr,f
  8771  1DFF  1903               	skipnz
  8772  1E00  0AFB               	incf	my_flash_system_read@flashAddr+1,f
  8773  1E01  0AF8               	incf	my_flash_system_read@i,f
  8774  1E02  1903               	skipnz
  8775  1E03  0AF9               	incf	my_flash_system_read@i+1,f
  8776  1E04  2DE1               	goto	l3309
  8777  1E05                     l3311:	
  8778                           
  8779                           ;sysData.c: 43: }
  8780                           ;sysData.c: 44: INTCONbits.GIE = GIEBitValue;
  8781  1E05  0C77               	rrf	my_flash_system_read@GIEBitValue,w
  8782  1E06  3197  2FCF         	ljmp	PL42	;call to abstracted procedure
  8783  1E08                     __end_of_my_flash_system_read:	
  8784                           
  8785                           	psect	text6
  8786  1E08                     __ptext6:	
  8787 ;; *************** function _pid_pwm2_vout_run *****************
  8788 ;; Defined at:
  8789 ;;		line 328 in file "src/api/sample.c"
  8790 ;; Parameters:    Size  Location     Type
  8791 ;;		None
  8792 ;; Auto vars:     Size  Location     Type
  8793 ;;  t16             2    2[BANK0 ] int 
  8794 ;;  ei              2    0[BANK0 ] int 
  8795 ;; Return value:  Size  Location     Type
  8796 ;;                  1    wreg      void 
  8797 ;; Registers used:
  8798 ;;		wreg, status,2, status,0, pclath, cstack
  8799 ;; Tracked objects:
  8800 ;;		On entry : 1F/0
  8801 ;;		On exit  : 1F/1B
  8802 ;;		Unchanged: 0/0
  8803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8805 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8806 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8807 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8808 ;;Total ram usage:        5 bytes
  8809 ;; Hardware stack levels used:    1
  8810 ;; Hardware stack levels required when called:    3
  8811 ;; This function calls:
  8812 ;;		___awdiv
  8813 ;;		___lwdiv
  8814 ;;		_set_vout_pwm2_duty
  8815 ;; This function is called by:
  8816 ;;		_main
  8817 ;; This function uses a non-reentrant model
  8818 ;;
  8819                           
  8820                           
  8821                           ;psect for function _pid_pwm2_vout_run
  8822  1E08                     _pid_pwm2_vout_run:	
  8823                           
  8824                           ;sample.c: 330: int16_t t16,ei;
  8825                           ;sample.c: 331: t16=voExpectAdcValue-rtAdcValueVoFb;
  8826                           
  8827                           ;incstack = 0
  8828                           ; Regs used in _pid_pwm2_vout_run: [wreg+status,2+status,0+pclath+cstack]
  8829  1E08  0859               	movf	_voExpectAdcValue+1,w
  8830  1E09  00A3               	movwf	pid_pwm2_vout_run@t16+1
  8831  1E0A  0858               	movf	_voExpectAdcValue,w
  8832  1E0B  00A2               	movwf	pid_pwm2_vout_run@t16
  8833  1E0C  0856               	movf	_rtAdcValueVoFb,w
  8834  1E0D  02A2               	subwf	pid_pwm2_vout_run@t16,f
  8835  1E0E  0857               	movf	_rtAdcValueVoFb+1,w
  8836  1E0F  3BA3               	subwfb	pid_pwm2_vout_run@t16+1,f
  8837                           
  8838                           ;sample.c: 332: ei=t16/150;
  8839  1E10  3096               	movlw	150
  8840  1E11  00F1               	movwf	___awdiv@divisor
  8841  1E12  01F2               	clrf	___awdiv@divisor+1
  8842  1E13  0823               	movf	pid_pwm2_vout_run@t16+1,w
  8843  1E14  00F4               	movwf	___awdiv@dividend+1
  8844  1E15  0822               	movf	pid_pwm2_vout_run@t16,w
  8845  1E16  00F3               	movwf	___awdiv@dividend
  8846  1E17  2675  319E         	fcall	___awdiv
  8847  1E19  0872               	movf	?___awdiv+1,w
  8848  1E1A  00A1               	movwf	pid_pwm2_vout_run@ei+1
  8849  1E1B  0871               	movf	?___awdiv,w
  8850  1E1C  00A0               	movwf	pid_pwm2_vout_run@ei
  8851                           
  8852                           ;sample.c: 333: if(ei==0){
  8853  1E1D  0421               	iorwf	pid_pwm2_vout_run@ei+1,w
  8854  1E1E  1D03               	btfss	3,2
  8855  1E1F  2E3C               	goto	l696
  8856                           
  8857                           ;sample.c: 334: if(t16>16)ei=1;
  8858  1E20  26FA  319E         	fcall	PL66	;call to abstracted procedure
  8859  1E22  1D03               	skipz
  8860  1E23  2E26               	goto	u2485
  8861  1E24  3011               	movlw	17
  8862  1E25  0222               	subwf	pid_pwm2_vout_run@t16,w
  8863  1E26                     u2485:	
  8864  1E26  1C03               	skipc
  8865  1E27  2E2C               	goto	l3871
  8866  1E28  0020               	movlb	0	; select bank0
  8867  1E29  01A0               	clrf	pid_pwm2_vout_run@ei
  8868  1E2A  0AA0               	incf	pid_pwm2_vout_run@ei,f
  8869  1E2B  01A1               	clrf	pid_pwm2_vout_run@ei+1
  8870  1E2C                     l3871:	
  8871                           
  8872                           ;sample.c: 335: if(t16<-16)ei=-1;
  8873  1E2C  0020               	movlb	0	; select bank0
  8874  1E2D  0823               	movf	pid_pwm2_vout_run@t16+1,w
  8875  1E2E  3A80               	xorlw	128
  8876  1E2F  00F9               	movwf	??_pid_pwm2_vout_run
  8877  1E30  307F               	movlw	127
  8878  1E31  0279               	subwf	??_pid_pwm2_vout_run,w
  8879  1E32  1D03               	skipz
  8880  1E33  2E36               	goto	u2495
  8881  1E34  30F0               	movlw	240
  8882  1E35  0222               	subwf	pid_pwm2_vout_run@t16,w
  8883  1E36                     u2495:	
  8884  1E36  1803               	skipnc
  8885  1E37  2E3C               	goto	l696
  8886  1E38  30FF               	movlw	255
  8887  1E39  0020               	movlb	0	; select bank0
  8888  1E3A  00A0               	movwf	pid_pwm2_vout_run@ei
  8889  1E3B  00A1               	movwf	pid_pwm2_vout_run@ei+1
  8890  1E3C                     l696:	
  8891                           
  8892                           ;sample.c: 336: }
  8893                           ;sample.c: 338: pwm2Ei=pwm2Ei+ei;
  8894  1E3C  0020               	movlb	0	; select bank0
  8895  1E3D  0820               	movf	pid_pwm2_vout_run@ei,w
  8896  1E3E  07CA               	addwf	_pwm2Ei,f
  8897  1E3F  0821               	movf	pid_pwm2_vout_run@ei+1,w
  8898  1E40  3DCB               	addwfc	_pwm2Ei+1,f
  8899                           
  8900                           ;sample.c: 342: t16=voExpectAdcValue/10;
  8901  1E41  300A               	movlw	10
  8902  1E42  00F1               	movwf	___lwdiv@divisor
  8903  1E43  01F2               	clrf	___lwdiv@divisor+1
  8904  1E44  0859               	movf	_voExpectAdcValue+1,w
  8905  1E45  00F4               	movwf	___lwdiv@dividend+1
  8906  1E46  0858               	movf	_voExpectAdcValue,w
  8907  1E47  00F3               	movwf	___lwdiv@dividend
  8908  1E48  26B5  319E         	fcall	___lwdiv
  8909  1E4A  0872               	movf	?___lwdiv+1,w
  8910  1E4B  00A3               	movwf	pid_pwm2_vout_run@t16+1
  8911  1E4C  0871               	movf	?___lwdiv,w
  8912  1E4D  00A2               	movwf	pid_pwm2_vout_run@t16
  8913                           
  8914                           ;sample.c: 344: t16=t16+pwm2Ei;
  8915  1E4E  084A               	movf	_pwm2Ei,w
  8916  1E4F  07A2               	addwf	pid_pwm2_vout_run@t16,f
  8917  1E50  084B               	movf	_pwm2Ei+1,w
  8918  1E51  3DA3               	addwfc	pid_pwm2_vout_run@t16+1,f
  8919                           
  8920                           ;sample.c: 345: if(t16>1580)t16=1580;
  8921  1E52  0823               	movf	pid_pwm2_vout_run@t16+1,w
  8922  1E53  3A80               	xorlw	128
  8923  1E54  00F9               	movwf	??_pid_pwm2_vout_run
  8924  1E55  3086               	movlw	134
  8925  1E56  0279               	subwf	??_pid_pwm2_vout_run,w
  8926  1E57  1D03               	skipz
  8927  1E58  2E5B               	goto	u2505
  8928  1E59  302D               	movlw	45
  8929  1E5A  0222               	subwf	pid_pwm2_vout_run@t16,w
  8930  1E5B                     u2505:	
  8931  1E5B  1C03               	skipc
  8932  1E5C  2E62               	goto	l699
  8933  1E5D  302C               	movlw	44
  8934  1E5E  0020               	movlb	0	; select bank0
  8935  1E5F  00A2               	movwf	pid_pwm2_vout_run@t16
  8936  1E60  3006               	movlw	6
  8937  1E61  00A3               	movwf	pid_pwm2_vout_run@t16+1
  8938  1E62                     l699:	
  8939                           
  8940                           ;sample.c: 346: if(t16<5)t16=5;
  8941  1E62  0020               	movlb	0	; select bank0
  8942  1E63  26FA  319E         	fcall	PL66	;call to abstracted procedure
  8943  1E65  1D03               	skipz
  8944  1E66  2E69               	goto	u2515
  8945  1E67  3005               	movlw	5
  8946  1E68  0222               	subwf	pid_pwm2_vout_run@t16,w
  8947  1E69                     u2515:	
  8948  1E69  1803               	skipnc
  8949  1E6A  2E6F               	goto	l3885
  8950  1E6B  3005               	movlw	5
  8951  1E6C  0020               	movlb	0	; select bank0
  8952  1E6D  00A2               	movwf	pid_pwm2_vout_run@t16
  8953  1E6E  01A3               	clrf	pid_pwm2_vout_run@t16+1
  8954  1E6F                     l3885:	
  8955                           
  8956                           ;sample.c: 347: set_vout_pwm2_duty(t16);
  8957  1E6F  0020               	movlb	0	; select bank0
  8958  1E70  0823               	movf	pid_pwm2_vout_run@t16+1,w
  8959  1E71  00F4               	movwf	set_vout_pwm2_duty@duty+1
  8960  1E72  0822               	movf	pid_pwm2_vout_run@t16,w
  8961  1E73  00F3               	movwf	set_vout_pwm2_duty@duty
  8962  1E74  2EDA               	ljmp	l3253
  8963  1E75                     __end_of_pid_pwm2_vout_run:	
  8964  1E75                     __ptext10:	
  8965 ;; *************** function ___awdiv *****************
  8966 ;; Defined at:
  8967 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  8968 ;; Parameters:    Size  Location     Type
  8969 ;;  divisor         2    1[COMMON] int 
  8970 ;;  dividend        2    3[COMMON] int 
  8971 ;; Auto vars:     Size  Location     Type
  8972 ;;  quotient        2    7[COMMON] int 
  8973 ;;  sign            1    6[COMMON] unsigned char 
  8974 ;;  counter         1    5[COMMON] unsigned char 
  8975 ;; Return value:  Size  Location     Type
  8976 ;;                  2    1[COMMON] int 
  8977 ;; Registers used:
  8978 ;;		wreg, status,2, status,0
  8979 ;; Tracked objects:
  8980 ;;		On entry : 1F/0
  8981 ;;		On exit  : 1F/0
  8982 ;;		Unchanged: 1F/0
  8983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8984 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8985 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8987 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8988 ;;Total ram usage:        8 bytes
  8989 ;; Hardware stack levels used:    1
  8990 ;; Hardware stack levels required when called:    1
  8991 ;; This function calls:
  8992 ;;		Nothing
  8993 ;; This function is called by:
  8994 ;;		_pid_pwm2_vout_run
  8995 ;; This function uses a non-reentrant model
  8996 ;;
  8997                           
  8998                           
  8999                           ;psect for function ___awdiv
  9000  1E75                     ___awdiv:	
  9001                           
  9002                           ;incstack = 0
  9003                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  9004  1E75  01F6               	clrf	___awdiv@sign
  9005  1E76  1FF2               	btfss	___awdiv@divisor+1,7
  9006  1E77  2E7F               	goto	l3573
  9007  1E78  09F1               	comf	___awdiv@divisor,f
  9008  1E79  09F2               	comf	___awdiv@divisor+1,f
  9009  1E7A  0AF1               	incf	___awdiv@divisor,f
  9010  1E7B  1903               	skipnz
  9011  1E7C  0AF2               	incf	___awdiv@divisor+1,f
  9012  1E7D  01F6               	clrf	___awdiv@sign
  9013  1E7E  0AF6               	incf	___awdiv@sign,f
  9014  1E7F                     l3573:	
  9015  1E7F  1FF4               	btfss	___awdiv@dividend+1,7
  9016  1E80  2E88               	goto	l3579
  9017  1E81  09F3               	comf	___awdiv@dividend,f
  9018  1E82  09F4               	comf	___awdiv@dividend+1,f
  9019  1E83  0AF3               	incf	___awdiv@dividend,f
  9020  1E84  1903               	skipnz
  9021  1E85  0AF4               	incf	___awdiv@dividend+1,f
  9022  1E86  3001               	movlw	1
  9023  1E87  06F6               	xorwf	___awdiv@sign,f
  9024  1E88                     l3579:	
  9025  1E88  01F7               	clrf	___awdiv@quotient
  9026  1E89  01F8               	clrf	___awdiv@quotient+1
  9027  1E8A  0871               	movf	___awdiv@divisor,w
  9028  1E8B  0472               	iorwf	___awdiv@divisor+1,w
  9029  1E8C  1903               	btfsc	3,2
  9030  1E8D  2EA8               	goto	l3601
  9031  1E8E  01F5               	clrf	___awdiv@counter
  9032  1E8F                     L2:	
  9033  1E8F  0AF5               	incf	___awdiv@counter,f
  9034  1E90  1BF2               	btfsc	___awdiv@divisor+1,7
  9035  1E91  2E95               	goto	l3589
  9036  1E92  35F1               	lslf	___awdiv@divisor,f
  9037  1E93  0DF2               	rlf	___awdiv@divisor+1,f
  9038  1E94  2E8F               	goto	L2
  9039  1E95                     l3589:	
  9040  1E95  35F7               	lslf	___awdiv@quotient,f
  9041  1E96  0DF8               	rlf	___awdiv@quotient+1,f
  9042  1E97  0872               	movf	___awdiv@divisor+1,w
  9043  1E98  0274               	subwf	___awdiv@dividend+1,w
  9044  1E99  1D03               	skipz
  9045  1E9A  2E9D               	goto	u2155
  9046  1E9B  0871               	movf	___awdiv@divisor,w
  9047  1E9C  0273               	subwf	___awdiv@dividend,w
  9048  1E9D                     u2155:	
  9049  1E9D  1C03               	skipc
  9050  1E9E  2EA4               	goto	l3597
  9051  1E9F  0871               	movf	___awdiv@divisor,w
  9052  1EA0  02F3               	subwf	___awdiv@dividend,f
  9053  1EA1  0872               	movf	___awdiv@divisor+1,w
  9054  1EA2  3BF4               	subwfb	___awdiv@dividend+1,f
  9055  1EA3  1477               	bsf	___awdiv@quotient,0
  9056  1EA4                     l3597:	
  9057  1EA4  36F2               	lsrf	___awdiv@divisor+1,f
  9058  1EA5  0CF1               	rrf	___awdiv@divisor,f
  9059  1EA6  0BF5               	decfsz	___awdiv@counter,f
  9060  1EA7  2E95               	goto	l3589
  9061  1EA8                     l3601:	
  9062  1EA8  0876               	movf	___awdiv@sign,w
  9063  1EA9  1903               	btfsc	3,2
  9064  1EAA  2EB0               	goto	l3605
  9065  1EAB  09F7               	comf	___awdiv@quotient,f
  9066  1EAC  09F8               	comf	___awdiv@quotient+1,f
  9067  1EAD  0AF7               	incf	___awdiv@quotient,f
  9068  1EAE  1903               	skipnz
  9069  1EAF  0AF8               	incf	___awdiv@quotient+1,f
  9070  1EB0                     l3605:	
  9071  1EB0  0878               	movf	___awdiv@quotient+1,w
  9072  1EB1  00F2               	movwf	?___awdiv+1
  9073  1EB2  0877               	movf	___awdiv@quotient,w
  9074  1EB3  00F1               	movwf	?___awdiv
  9075  1EB4  0008               	return
  9076  1EB5                     __end_of___awdiv:	
  9077  1EB5                     __ptext9:	
  9078 ;; *************** function ___lwdiv *****************
  9079 ;; Defined at:
  9080 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  9081 ;; Parameters:    Size  Location     Type
  9082 ;;  divisor         2    1[COMMON] unsigned int 
  9083 ;;  dividend        2    3[COMMON] unsigned int 
  9084 ;; Auto vars:     Size  Location     Type
  9085 ;;  quotient        2    5[COMMON] unsigned int 
  9086 ;;  counter         1    7[COMMON] unsigned char 
  9087 ;; Return value:  Size  Location     Type
  9088 ;;                  2    1[COMMON] unsigned int 
  9089 ;; Registers used:
  9090 ;;		wreg, status,2, status,0
  9091 ;; Tracked objects:
  9092 ;;		On entry : 1F/0
  9093 ;;		On exit  : 1F/0
  9094 ;;		Unchanged: 1F/0
  9095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9096 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9097 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9099 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9100 ;;Total ram usage:        7 bytes
  9101 ;; Hardware stack levels used:    1
  9102 ;; Hardware stack levels required when called:    1
  9103 ;; This function calls:
  9104 ;;		Nothing
  9105 ;; This function is called by:
  9106 ;;		_pid_pwm2_vout_run
  9107 ;; This function uses a non-reentrant model
  9108 ;;
  9109                           
  9110                           
  9111                           ;psect for function ___lwdiv
  9112  1EB5                     ___lwdiv:	
  9113                           
  9114                           ;incstack = 0
  9115                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  9116  1EB5  01F5               	clrf	___lwdiv@quotient
  9117  1EB6  01F6               	clrf	___lwdiv@quotient+1
  9118  1EB7  0871               	movf	___lwdiv@divisor,w
  9119  1EB8  0472               	iorwf	___lwdiv@divisor+1,w
  9120  1EB9  1903               	btfsc	3,2
  9121  1EBA  2ED5               	goto	l3657
  9122  1EBB  01F7               	clrf	___lwdiv@counter
  9123  1EBC                     L1:	
  9124  1EBC  0AF7               	incf	___lwdiv@counter,f
  9125  1EBD  1BF2               	btfsc	___lwdiv@divisor+1,7
  9126  1EBE  2EC2               	goto	l3645
  9127  1EBF  35F1               	lslf	___lwdiv@divisor,f
  9128  1EC0  0DF2               	rlf	___lwdiv@divisor+1,f
  9129  1EC1  2EBC               	goto	L1
  9130  1EC2                     l3645:	
  9131  1EC2  35F5               	lslf	___lwdiv@quotient,f
  9132  1EC3  0DF6               	rlf	___lwdiv@quotient+1,f
  9133  1EC4  0872               	movf	___lwdiv@divisor+1,w
  9134  1EC5  0274               	subwf	___lwdiv@dividend+1,w
  9135  1EC6  1D03               	skipz
  9136  1EC7  2ECA               	goto	u2245
  9137  1EC8  0871               	movf	___lwdiv@divisor,w
  9138  1EC9  0273               	subwf	___lwdiv@dividend,w
  9139  1ECA                     u2245:	
  9140  1ECA  1C03               	skipc
  9141  1ECB  2ED1               	goto	l3653
  9142  1ECC  0871               	movf	___lwdiv@divisor,w
  9143  1ECD  02F3               	subwf	___lwdiv@dividend,f
  9144  1ECE  0872               	movf	___lwdiv@divisor+1,w
  9145  1ECF  3BF4               	subwfb	___lwdiv@dividend+1,f
  9146  1ED0  1475               	bsf	___lwdiv@quotient,0
  9147  1ED1                     l3653:	
  9148  1ED1  36F2               	lsrf	___lwdiv@divisor+1,f
  9149  1ED2  0CF1               	rrf	___lwdiv@divisor,f
  9150  1ED3  0BF7               	decfsz	___lwdiv@counter,f
  9151  1ED4  2EC2               	goto	l3645
  9152  1ED5                     l3657:	
  9153  1ED5  0876               	movf	___lwdiv@quotient+1,w
  9154  1ED6  00F2               	movwf	?___lwdiv+1
  9155  1ED7  0875               	movf	___lwdiv@quotient,w
  9156  1ED8  00F1               	movwf	?___lwdiv
  9157  1ED9  0008               	return
  9158  1EDA                     __end_of___lwdiv:	
  9159  1EDA                     __ptext7:	
  9160 ;; *************** function _set_vout_pwm2_duty *****************
  9161 ;; Defined at:
  9162 ;;		line 73 in file "src/api/sample.c"
  9163 ;; Parameters:    Size  Location     Type
  9164 ;;  duty            2    3[COMMON] unsigned int 
  9165 ;; Auto vars:     Size  Location     Type
  9166 ;;  t16             2    5[COMMON] unsigned int 
  9167 ;; Return value:  Size  Location     Type
  9168 ;;                  1    wreg      void 
  9169 ;; Registers used:
  9170 ;;		wreg, pclath, cstack
  9171 ;; Tracked objects:
  9172 ;;		On entry : 1F/0
  9173 ;;		On exit  : 1F/1B
  9174 ;;		Unchanged: 0/0
  9175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9176 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9177 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9179 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9180 ;;Total ram usage:        4 bytes
  9181 ;; Hardware stack levels used:    1
  9182 ;; Hardware stack levels required when called:    2
  9183 ;; This function calls:
  9184 ;;		_get_vout_pwm2_duty
  9185 ;; This function is called by:
  9186 ;;		_pid_pwm2_vout_run
  9187 ;; This function uses a non-reentrant model
  9188 ;;
  9189                           
  9190                           
  9191                           ;psect for function _set_vout_pwm2_duty
  9192  1EDA                     _set_vout_pwm2_duty:	
  9193  1EDA                     l3253:	
  9194                           ;incstack = 0
  9195                           ; Regs used in _set_vout_pwm2_duty: [wreg+pclath+cstack]
  9196                           
  9197                           
  9198                           ;sample.c: 76: uint16_t t16;
  9199                           ;sample.c: 77: pwm2DutyForVout=duty;
  9200  1EDA  0874               	movf	set_vout_pwm2_duty@duty+1,w
  9201  1EDB  00E5               	movwf	_pwm2DutyForVout+1
  9202  1EDC  0873               	movf	set_vout_pwm2_duty@duty,w
  9203  1EDD  00E4               	movwf	_pwm2DutyForVout
  9204                           
  9205                           ;sample.c: 78: t16=get_vout_pwm2_duty();
  9206  1EDE  26F3  319E         	fcall	_get_vout_pwm2_duty
  9207  1EE0  0872               	movf	?_get_vout_pwm2_duty+1,w
  9208  1EE1  00F6               	movwf	set_vout_pwm2_duty@t16+1
  9209  1EE2  0871               	movf	?_get_vout_pwm2_duty,w
  9210  1EE3  00F5               	movwf	set_vout_pwm2_duty@t16
  9211                           
  9212                           ;sample.c: 79: if(t16==duty)return;
  9213  1EE4  0874               	movf	set_vout_pwm2_duty@duty+1,w
  9214  1EE5  0676               	xorwf	set_vout_pwm2_duty@t16+1,w
  9215  1EE6  1D03               	skipz
  9216  1EE7  2EEA               	goto	u1705
  9217  1EE8  0873               	movf	set_vout_pwm2_duty@duty,w
  9218  1EE9  0675               	xorwf	set_vout_pwm2_duty@t16,w
  9219  1EEA                     u1705:	
  9220  1EEA  1903               	btfsc	3,2
  9221  1EEB  0008               	return
  9222                           
  9223                           ;sample.c: 83: PWM2CONbits.EN = 0;
  9224  1EEC  13AB               	bcf	43,7	;volatile
  9225                           
  9226                           ;sample.c: 84: PWM2DCL= (uint8_t)(duty&0xff);
  9227  1EED  0873               	movf	set_vout_pwm2_duty@duty,w
  9228  1EEE  00A3               	movwf	35	;volatile
  9229                           
  9230                           ;sample.c: 85: PWM2DCH=(uint8_t)(duty>>8);
  9231  1EEF  0874               	movf	set_vout_pwm2_duty@duty+1,w
  9232  1EF0  00A4               	movwf	36	;volatile
  9233                           
  9234                           ;sample.c: 86: PWM2CONbits.EN = 1;
  9235  1EF1  17AB               	bsf	43,7	;volatile
  9236  1EF2  0008               	return
  9237  1EF3                     __end_of_set_vout_pwm2_duty:	
  9238  1EF3                     __ptext8:	
  9239 ;; *************** function _get_vout_pwm2_duty *****************
  9240 ;; Defined at:
  9241 ;;		line 68 in file "src/api/sample.c"
  9242 ;; Parameters:    Size  Location     Type
  9243 ;;		None
  9244 ;; Auto vars:     Size  Location     Type
  9245 ;;		None
  9246 ;; Return value:  Size  Location     Type
  9247 ;;                  2    1[COMMON] unsigned int 
  9248 ;; Registers used:
  9249 ;;		wreg
  9250 ;; Tracked objects:
  9251 ;;		On entry : 1F/0
  9252 ;;		On exit  : 1F/1B
  9253 ;;		Unchanged: 0/0
  9254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9255 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9258 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9259 ;;Total ram usage:        2 bytes
  9260 ;; Hardware stack levels used:    1
  9261 ;; Hardware stack levels required when called:    1
  9262 ;; This function calls:
  9263 ;;		Nothing
  9264 ;; This function is called by:
  9265 ;;		_set_vout_pwm2_duty
  9266 ;; This function uses a non-reentrant model
  9267 ;;
  9268                           
  9269                           
  9270                           ;psect for function _get_vout_pwm2_duty
  9271  1EF3                     _get_vout_pwm2_duty:	
  9272                           
  9273                           ;sample.c: 70: return ((PWM2DCH<<8)|PWM2DCL);
  9274                           
  9275                           ;incstack = 0
  9276                           ; Regs used in _get_vout_pwm2_duty: [wreg]
  9277  1EF3  003B               	movlb	27	; select bank27
  9278  1EF4  0824               	movf	36,w	;volatile
  9279  1EF5  00F2               	movwf	?_get_vout_pwm2_duty+1
  9280  1EF6  01F1               	clrf	?_get_vout_pwm2_duty
  9281  1EF7  0823               	movf	35,w	;volatile
  9282  1EF8  04F1               	iorwf	?_get_vout_pwm2_duty,f
  9283  1EF9  0008               	return
  9284  1EFA                     __end_of_get_vout_pwm2_duty:	
  9285  1EFA                     PL66:	
  9286  1EFA  0823               	movf	pid_pwm2_vout_run@t16+1,w
  9287  1EFB  3A80               	xorlw	128
  9288  1EFC  00F9               	movwf	??_pid_pwm2_vout_run
  9289  1EFD  3080               	movlw	128
  9290  1EFE  0279               	subwf	??_pid_pwm2_vout_run,w
  9291  1EFF  0008               	return
  9292  1F00                     __end_ofPL66:	
  9293                           
  9294                           	psect	text11
  9295  10E7                     __ptext11:	
  9296 ;; *************** function _pid_pwm1_idrv_run *****************
  9297 ;; Defined at:
  9298 ;;		line 295 in file "src/api/sample.c"
  9299 ;; Parameters:    Size  Location     Type
  9300 ;;		None
  9301 ;; Auto vars:     Size  Location     Type
  9302 ;;  t32             4   36[BANK0 ] long 
  9303 ;;  ed              4    0        long 
  9304 ;;  ei              4   26[BANK0 ] long 
  9305 ;;  ep              4   22[BANK0 ] long 
  9306 ;;  t16             2   34[BANK0 ] unsigned int 
  9307 ;; Return value:  Size  Location     Type
  9308 ;;                  1    wreg      void 
  9309 ;; Registers used:
  9310 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9311 ;; Tracked objects:
  9312 ;;		On entry : 1F/0
  9313 ;;		On exit  : 1F/1B
  9314 ;;		Unchanged: 0/0
  9315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9317 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9318 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9319 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9320 ;;Total ram usage:       22 bytes
  9321 ;; Hardware stack levels used:    1
  9322 ;; Hardware stack levels required when called:    3
  9323 ;; This function calls:
  9324 ;;		___aldiv
  9325 ;;		___lmul
  9326 ;;		_set_idrv_pwm1_duty
  9327 ;; This function is called by:
  9328 ;;		_main
  9329 ;; This function uses a non-reentrant model
  9330 ;;
  9331                           
  9332                           
  9333                           ;psect for function _pid_pwm1_idrv_run
  9334  10E7                     _pid_pwm1_idrv_run:	
  9335                           
  9336                           ;sample.c: 298: int32_t ep,ei,ed;
  9337                           ;sample.c: 299: int32_t t32;
  9338                           ;sample.c: 300: t32=(resRs-resRc);
  9339                           
  9340                           ;incstack = 0
  9341                           ; Regs used in _pid_pwm1_idrv_run: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9342  10E7  0021               	movlb	1	; select bank1
  9343  10E8  0867               	movf	(_resRs+3)^(0+128),w
  9344  10E9  0020               	movlb	0	; select bank0
  9345  10EA  00C7               	movwf	pid_pwm1_idrv_run@t32+3
  9346  10EB  0021               	movlb	1	; select bank1
  9347  10EC  0866               	movf	(_resRs+2)^(0+128),w
  9348  10ED  0020               	movlb	0	; select bank0
  9349  10EE  00C6               	movwf	pid_pwm1_idrv_run@t32+2
  9350  10EF  0021               	movlb	1	; select bank1
  9351  10F0  0865               	movf	(_resRs+1)^(0+128),w
  9352  10F1  0020               	movlb	0	; select bank0
  9353  10F2  00C5               	movwf	pid_pwm1_idrv_run@t32+1
  9354  10F3  0021               	movlb	1	; select bank1
  9355  10F4  0864               	movf	_resRs^(0+128),w
  9356  10F5  0020               	movlb	0	; select bank0
  9357  10F6  00C4               	movwf	pid_pwm1_idrv_run@t32
  9358  10F7  0021               	movlb	1	; select bank1
  9359  10F8  0860               	movf	_resRc^(0+128),w
  9360  10F9  0020               	movlb	0	; select bank0
  9361  10FA  02C4               	subwf	pid_pwm1_idrv_run@t32,f
  9362  10FB  0021               	movlb	1	; select bank1
  9363  10FC  0861               	movf	(_resRc+1)^(0+128),w
  9364  10FD  0020               	movlb	0	; select bank0
  9365  10FE  3BC5               	subwfb	pid_pwm1_idrv_run@t32+1,f
  9366  10FF  0021               	movlb	1	; select bank1
  9367  1100  0862               	movf	(_resRc+2)^(0+128),w
  9368  1101  0020               	movlb	0	; select bank0
  9369  1102  3BC6               	subwfb	pid_pwm1_idrv_run@t32+2,f
  9370  1103  0021               	movlb	1	; select bank1
  9371  1104  0863               	movf	(_resRc+3)^(0+128),w
  9372  1105  0020               	movlb	0	; select bank0
  9373  1106  3BC7               	subwfb	pid_pwm1_idrv_run@t32+3,f
  9374                           
  9375                           ;sample.c: 301: t32=2000-t32;
  9376  1107  30D0               	movlw	208
  9377  1108  00B2               	movwf	??_pid_pwm1_idrv_run
  9378  1109  3007               	movlw	7
  9379  110A  00B3               	movwf	??_pid_pwm1_idrv_run+1
  9380  110B  01B4               	clrf	??_pid_pwm1_idrv_run+2
  9381  110C  01B5               	clrf	??_pid_pwm1_idrv_run+3
  9382  110D  0844               	movf	pid_pwm1_idrv_run@t32,w
  9383  110E  02B2               	subwf	??_pid_pwm1_idrv_run,f
  9384  110F  0845               	movf	pid_pwm1_idrv_run@t32+1,w
  9385  1110  3BB3               	subwfb	??_pid_pwm1_idrv_run+1,f
  9386  1111  0846               	movf	pid_pwm1_idrv_run@t32+2,w
  9387  1112  3BB4               	subwfb	??_pid_pwm1_idrv_run+2,f
  9388  1113  0847               	movf	pid_pwm1_idrv_run@t32+3,w
  9389  1114  3BB5               	subwfb	??_pid_pwm1_idrv_run+3,f
  9390  1115  0835               	movf	??_pid_pwm1_idrv_run+3,w
  9391  1116  2213  3190         	fcall	PL34	;call to abstracted procedure
  9392                           
  9393                           ;sample.c: 303: err[2]=err[1];
  9394  1118  30A4               	movlw	((low (_err| 0))& (0+255)+4)
  9395  1119  0086               	movwf	6
  9396  111A  0187               	clrf	7
  9397  111B  3F40               	moviw [0]fsr1
  9398  111C  0021               	movlb	1	; select bank1
  9399  111D  00A8               	movwf	(_err^(0+128)+8)
  9400  111E  3F41               	moviw [1]fsr1
  9401  111F  00A9               	movwf	((_err+1)^(0+128)+8)
  9402  1120  3F42               	moviw [2]fsr1
  9403  1121  00AA               	movwf	((_err+2)^(0+128)+8)
  9404  1122  3F43               	moviw [3]fsr1
  9405  1123  00AB               	movwf	((_err+3)^(0+128)+8)
  9406                           
  9407                           ;sample.c: 304: err[1]=err[0];
  9408  1124  0823               	movf	(_err+3)^(0+128),w
  9409  1125  00A7               	movwf	((_err+3)^(0+128)+4)
  9410  1126  0822               	movf	(_err+2)^(0+128),w
  9411  1127  00A6               	movwf	((_err+2)^(0+128)+4)
  9412  1128  0821               	movf	(_err+1)^(0+128),w
  9413  1129  00A5               	movwf	((_err+1)^(0+128)+4)
  9414  112A  0820               	movf	_err^(0+128),w
  9415  112B  00A4               	movwf	(_err^(0+128)+4)
  9416                           
  9417                           ;sample.c: 305: err[0]=t32;
  9418  112C  0020               	movlb	0	; select bank0
  9419  112D  0847               	movf	pid_pwm1_idrv_run@t32+3,w
  9420  112E  0021               	movlb	1	; select bank1
  9421  112F  00A3               	movwf	(_err+3)^(0+128)
  9422  1130  0020               	movlb	0	; select bank0
  9423  1131  0846               	movf	pid_pwm1_idrv_run@t32+2,w
  9424  1132  0021               	movlb	1	; select bank1
  9425  1133  00A2               	movwf	(_err+2)^(0+128)
  9426  1134  0020               	movlb	0	; select bank0
  9427  1135  0845               	movf	pid_pwm1_idrv_run@t32+1,w
  9428  1136  0021               	movlb	1	; select bank1
  9429  1137  00A1               	movwf	(_err+1)^(0+128)
  9430  1138  0020               	movlb	0	; select bank0
  9431  1139  0844               	movf	pid_pwm1_idrv_run@t32,w
  9432  113A  0021               	movlb	1	; select bank1
  9433  113B  00A0               	movwf	_err^(0+128)
  9434                           
  9435                           ;sample.c: 308: ep=(err[0]-err[1])*PidKp;
  9436  113C  0824               	movf	(_err^(0+128)+4),w
  9437  113D  0220               	subwf	_err^(0+128),w
  9438  113E  0020               	movlb	0	; select bank0
  9439  113F  00B2               	movwf	??_pid_pwm1_idrv_run
  9440  1140  0021               	movlb	1	; select bank1
  9441  1141  0825               	movf	((_err+1)^(0+128)+4),w
  9442  1142  3B21               	subwfb	(_err+1)^(0+128),w
  9443  1143  0020               	movlb	0	; select bank0
  9444  1144  00B3               	movwf	??_pid_pwm1_idrv_run+1
  9445  1145  0021               	movlb	1	; select bank1
  9446  1146  0826               	movf	((_err+2)^(0+128)+4),w
  9447  1147  3B22               	subwfb	(_err+2)^(0+128),w
  9448  1148  0020               	movlb	0	; select bank0
  9449  1149  00B4               	movwf	??_pid_pwm1_idrv_run+2
  9450  114A  0021               	movlb	1	; select bank1
  9451  114B  0827               	movf	((_err+3)^(0+128)+4),w
  9452  114C  3B23               	subwfb	(_err+3)^(0+128),w
  9453  114D  0020               	movlb	0	; select bank0
  9454  114E  00B5               	movwf	??_pid_pwm1_idrv_run+3
  9455  114F  00F4               	movwf	___lmul@multiplier+3
  9456  1150  0834               	movf	??_pid_pwm1_idrv_run+2,w
  9457  1151  00F3               	movwf	___lmul@multiplier+2
  9458  1152  0833               	movf	??_pid_pwm1_idrv_run+1,w
  9459  1153  00F2               	movwf	___lmul@multiplier+1
  9460  1154  0832               	movf	??_pid_pwm1_idrv_run,w
  9461  1155  00F1               	movwf	___lmul@multiplier
  9462  1156  0021               	movlb	1	; select bank1
  9463  1157  220A               	fcall	PL28	;call to abstracted procedure
  9464  1158  318E  2613  3190   	fcall	___lmul
  9465  115B  0874               	movf	?___lmul+3,w
  9466  115C  00B9               	movwf	pid_pwm1_idrv_run@ep+3
  9467  115D  0873               	movf	?___lmul+2,w
  9468  115E  00B8               	movwf	pid_pwm1_idrv_run@ep+2
  9469  115F  0872               	movf	?___lmul+1,w
  9470  1160  00B7               	movwf	pid_pwm1_idrv_run@ep+1
  9471  1161  0871               	movf	?___lmul,w
  9472  1162  00B6               	movwf	pid_pwm1_idrv_run@ep
  9473                           
  9474                           ;sample.c: 309: ei=PidKp*err[0]/PidTi;
  9475  1163  0021               	movlb	1	; select bank1
  9476  1164  0837               	movf	(_PidTi+3)^(0+128),w
  9477  1165  0020               	movlb	0	; select bank0
  9478  1166  00A7               	movwf	___aldiv@divisor+3
  9479  1167  0021               	movlb	1	; select bank1
  9480  1168  0836               	movf	(_PidTi+2)^(0+128),w
  9481  1169  0020               	movlb	0	; select bank0
  9482  116A  00A6               	movwf	___aldiv@divisor+2
  9483  116B  0021               	movlb	1	; select bank1
  9484  116C  0835               	movf	(_PidTi+1)^(0+128),w
  9485  116D  0020               	movlb	0	; select bank0
  9486  116E  00A5               	movwf	___aldiv@divisor+1
  9487  116F  0021               	movlb	1	; select bank1
  9488  1170  0834               	movf	_PidTi^(0+128),w
  9489  1171  0020               	movlb	0	; select bank0
  9490  1172  00A4               	movwf	___aldiv@divisor
  9491  1173  0021               	movlb	1	; select bank1
  9492  1174  0823               	movf	(_err+3)^(0+128),w
  9493  1175  00F4               	movwf	___lmul@multiplier+3
  9494  1176  0822               	movf	(_err+2)^(0+128),w
  9495  1177  00F3               	movwf	___lmul@multiplier+2
  9496  1178  0821               	movf	(_err+1)^(0+128),w
  9497  1179  00F2               	movwf	___lmul@multiplier+1
  9498  117A  0820               	movf	_err^(0+128),w
  9499  117B  00F1               	movwf	___lmul@multiplier
  9500  117C  220A               	fcall	PL28	;call to abstracted procedure
  9501  117D  318E  2613  3190   	fcall	___lmul
  9502  1180  318F  270E  3190   	fcall	PL14	;call to abstracted procedure
  9503  1183  318D  25A7  3190   	fcall	___aldiv
  9504  1186  0827               	movf	?___aldiv+3,w
  9505  1187  00BD               	movwf	pid_pwm1_idrv_run@ei+3
  9506  1188  0826               	movf	?___aldiv+2,w
  9507  1189  00BC               	movwf	pid_pwm1_idrv_run@ei+2
  9508  118A  0825               	movf	?___aldiv+1,w
  9509  118B  00BB               	movwf	pid_pwm1_idrv_run@ei+1
  9510  118C  0824               	movf	?___aldiv,w
  9511  118D  00BA               	movwf	pid_pwm1_idrv_run@ei
  9512                           
  9513                           ;sample.c: 312: t32=ep+ei+ed;
  9514  118E  0836               	movf	pid_pwm1_idrv_run@ep,w
  9515  118F  073A               	addwf	pid_pwm1_idrv_run@ei,w
  9516  1190  00B2               	movwf	??_pid_pwm1_idrv_run
  9517  1191  0837               	movf	pid_pwm1_idrv_run@ep+1,w
  9518  1192  3D3B               	addwfc	pid_pwm1_idrv_run@ei+1,w
  9519  1193  00B3               	movwf	??_pid_pwm1_idrv_run+1
  9520  1194  0838               	movf	pid_pwm1_idrv_run@ep+2,w
  9521  1195  3D3C               	addwfc	pid_pwm1_idrv_run@ei+2,w
  9522  1196  00B4               	movwf	??_pid_pwm1_idrv_run+2
  9523  1197  0839               	movf	pid_pwm1_idrv_run@ep+3,w
  9524  1198  3D3D               	addwfc	pid_pwm1_idrv_run@ei+3,w
  9525  1199  00B5               	movwf	??_pid_pwm1_idrv_run+3
  9526  119A  2213               	fcall	PL34	;call to abstracted procedure
  9527                           
  9528                           ;sample.c: 313: t32/=10000;
  9529  119B  3027               	movlw	39
  9530  119C  01A7               	clrf	___aldiv@divisor+3
  9531  119D  01A6               	clrf	___aldiv@divisor+2
  9532  119E  00A5               	movwf	___aldiv@divisor+1
  9533  119F  3010               	movlw	16
  9534  11A0  00A4               	movwf	___aldiv@divisor
  9535  11A1  0847               	movf	pid_pwm1_idrv_run@t32+3,w
  9536  11A2  00AB               	movwf	___aldiv@dividend+3
  9537  11A3  0846               	movf	pid_pwm1_idrv_run@t32+2,w
  9538  11A4  00AA               	movwf	___aldiv@dividend+2
  9539  11A5  0845               	movf	pid_pwm1_idrv_run@t32+1,w
  9540  11A6  00A9               	movwf	___aldiv@dividend+1
  9541  11A7  0844               	movf	pid_pwm1_idrv_run@t32,w
  9542  11A8  00A8               	movwf	___aldiv@dividend
  9543  11A9  318D  25A7  3190   	fcall	___aldiv
  9544  11AC  0827               	movf	?___aldiv+3,w
  9545  11AD  00C7               	movwf	pid_pwm1_idrv_run@t32+3
  9546  11AE  0826               	movf	?___aldiv+2,w
  9547  11AF  00C6               	movwf	pid_pwm1_idrv_run@t32+2
  9548  11B0  0825               	movf	?___aldiv+1,w
  9549  11B1  00C5               	movwf	pid_pwm1_idrv_run@t32+1
  9550  11B2  0824               	movf	?___aldiv,w
  9551  11B3  00C4               	movwf	pid_pwm1_idrv_run@t32
  9552                           
  9553                           ;sample.c: 314: t32+=pidU;
  9554  11B4  0021               	movlb	1	; select bank1
  9555  11B5  085C               	movf	_pidU^(0+128),w
  9556  11B6  0020               	movlb	0	; select bank0
  9557  11B7  07C4               	addwf	pid_pwm1_idrv_run@t32,f
  9558  11B8  0021               	movlb	1	; select bank1
  9559  11B9  085D               	movf	(_pidU+1)^(0+128),w
  9560  11BA  0020               	movlb	0	; select bank0
  9561  11BB  3DC5               	addwfc	pid_pwm1_idrv_run@t32+1,f
  9562  11BC  0021               	movlb	1	; select bank1
  9563  11BD  085E               	movf	(_pidU+2)^(0+128),w
  9564  11BE  0020               	movlb	0	; select bank0
  9565  11BF  3DC6               	addwfc	pid_pwm1_idrv_run@t32+2,f
  9566  11C0  0021               	movlb	1	; select bank1
  9567  11C1  085F               	movf	(_pidU+3)^(0+128),w
  9568  11C2  0020               	movlb	0	; select bank0
  9569  11C3  3DC7               	addwfc	pid_pwm1_idrv_run@t32+3,f
  9570                           
  9571                           ;sample.c: 316: __nop();
  9572  11C4  0000               	nop
  9573                           
  9574                           ;sample.c: 317: if(t32>1200)t32=1200;
  9575  11C5  0020               	movlb	0	; select bank0
  9576  11C6  1BC7               	btfsc	pid_pwm1_idrv_run@t32+3,7
  9577  11C7  29DA               	goto	l4655
  9578  11C8  0847               	movf	pid_pwm1_idrv_run@t32+3,w
  9579  11C9  1D03               	btfss	3,2
  9580  11CA  29D4               	goto	l4653
  9581  11CB  0846               	movf	pid_pwm1_idrv_run@t32+2,w
  9582  11CC  1D03               	btfss	3,2
  9583  11CD  29D4               	goto	l4653
  9584  11CE  30B1               	movlw	177
  9585  11CF  0244               	subwf	pid_pwm1_idrv_run@t32,w
  9586  11D0  3004               	movlw	4
  9587  11D1  3B45               	subwfb	pid_pwm1_idrv_run@t32+1,w
  9588  11D2  1C03               	btfss	3,0
  9589  11D3  29DA               	goto	l4655
  9590  11D4                     l4653:	
  9591  11D4  3004               	movlw	4
  9592  11D5  01C7               	clrf	pid_pwm1_idrv_run@t32+3
  9593  11D6  01C6               	clrf	pid_pwm1_idrv_run@t32+2
  9594  11D7  00C5               	movwf	pid_pwm1_idrv_run@t32+1
  9595  11D8  30B0               	movlw	176
  9596  11D9  00C4               	movwf	pid_pwm1_idrv_run@t32
  9597  11DA                     l4655:	
  9598                           
  9599                           ;sample.c: 318: if(t32<5)t32=5;
  9600  11DA  1BC7               	btfsc	pid_pwm1_idrv_run@t32+3,7
  9601  11DB  29E9               	goto	l4657
  9602  11DC  0847               	movf	pid_pwm1_idrv_run@t32+3,w
  9603  11DD  1D03               	btfss	3,2
  9604  11DE  29EE               	goto	l686
  9605  11DF  0846               	movf	pid_pwm1_idrv_run@t32+2,w
  9606  11E0  1D03               	btfss	3,2
  9607  11E1  29EE               	goto	l686
  9608  11E2  0845               	movf	pid_pwm1_idrv_run@t32+1,w
  9609  11E3  1D03               	btfss	3,2
  9610  11E4  29EE               	goto	l686
  9611  11E5  3005               	movlw	5
  9612  11E6  0244               	subwf	pid_pwm1_idrv_run@t32,w
  9613  11E7  1803               	btfsc	3,0
  9614  11E8  29EE               	goto	l686
  9615  11E9                     l4657:	
  9616  11E9  3005               	movlw	5
  9617  11EA  00C4               	movwf	pid_pwm1_idrv_run@t32
  9618  11EB  01C5               	clrf	pid_pwm1_idrv_run@t32+1
  9619  11EC  01C6               	clrf	pid_pwm1_idrv_run@t32+2
  9620  11ED  01C7               	clrf	pid_pwm1_idrv_run@t32+3
  9621  11EE                     l686:	
  9622                           
  9623                           ;sample.c: 319: pidU=t32;
  9624  11EE  0847               	movf	pid_pwm1_idrv_run@t32+3,w
  9625  11EF  0021               	movlb	1	; select bank1
  9626  11F0  00DF               	movwf	(_pidU+3)^(0+128)
  9627  11F1  0020               	movlb	0	; select bank0
  9628  11F2  0846               	movf	pid_pwm1_idrv_run@t32+2,w
  9629  11F3  0021               	movlb	1	; select bank1
  9630  11F4  00DE               	movwf	(_pidU+2)^(0+128)
  9631  11F5  0020               	movlb	0	; select bank0
  9632  11F6  0845               	movf	pid_pwm1_idrv_run@t32+1,w
  9633  11F7  0021               	movlb	1	; select bank1
  9634  11F8  00DD               	movwf	(_pidU+1)^(0+128)
  9635  11F9  0020               	movlb	0	; select bank0
  9636  11FA  0844               	movf	pid_pwm1_idrv_run@t32,w
  9637  11FB  0021               	movlb	1	; select bank1
  9638  11FC  00DC               	movwf	_pidU^(0+128)
  9639                           
  9640                           ;sample.c: 320: uint16_t t16;
  9641                           ;sample.c: 321: t16=(uint16_t)pidU;
  9642  11FD  085D               	movf	(_pidU+1)^(0+128),w
  9643  11FE  0020               	movlb	0	; select bank0
  9644  11FF  00C3               	movwf	pid_pwm1_idrv_run@t16+1
  9645  1200  0021               	movlb	1	; select bank1
  9646  1201  085C               	movf	_pidU^(0+128),w
  9647  1202  0020               	movlb	0	; select bank0
  9648  1203  00C2               	movwf	pid_pwm1_idrv_run@t16
  9649                           
  9650                           ;sample.c: 322: set_idrv_pwm1_duty(t16);
  9651  1204  0843               	movf	pid_pwm1_idrv_run@t16+1,w
  9652  1205  00F4               	movwf	set_idrv_pwm1_duty@duty+1
  9653  1206  0842               	movf	pid_pwm1_idrv_run@t16,w
  9654  1207  00F3               	movwf	set_idrv_pwm1_duty@duty
  9655  1208  318E  2E3B         	ljmp	l3241
  9656  120A                     __end_of_pid_pwm1_idrv_run:	
  9657  120A                     PL28:	
  9658  120A  082F               	movf	(_PidKp+3)^(0+128),w
  9659  120B  00F8               	movwf	___lmul@multiplicand+3
  9660  120C  082E               	movf	(_PidKp+2)^(0+128),w
  9661  120D  00F7               	movwf	___lmul@multiplicand+2
  9662  120E  082D               	movf	(_PidKp+1)^(0+128),w
  9663  120F  00F6               	movwf	___lmul@multiplicand+1
  9664  1210  082C               	movf	_PidKp^(0+128),w
  9665  1211  00F5               	movwf	___lmul@multiplicand
  9666  1212  0008               	return
  9667  1213                     __end_ofPL28:	
  9668  1213                     PL34:	
  9669  1213  00C7               	movwf	pid_pwm1_idrv_run@t32+3
  9670  1214  0834               	movf	??_pid_pwm1_idrv_run+2,w
  9671  1215  00C6               	movwf	pid_pwm1_idrv_run@t32+2
  9672  1216  0833               	movf	??_pid_pwm1_idrv_run+1,w
  9673  1217  00C5               	movwf	pid_pwm1_idrv_run@t32+1
  9674  1218  0832               	movf	??_pid_pwm1_idrv_run,w
  9675  1219  00C4               	movwf	pid_pwm1_idrv_run@t32
  9676  121A  0008               	return
  9677  121B                     __end_ofPL34:	
  9678                           
  9679                           	psect	swtext1
  9680  0FB4                     __pswtext1:	
  9681  0FB4                     S4921:	
  9682  0FB4  318B  2BE9         	ljmp	l4567
  9683  0FB6  318B  2BE9         	ljmp	l4567
  9684  0FB8  318B  2BF2         	ljmp	l4573
  9685  0FBA  318C  2C07         	ljmp	l4579
  9686  0FBC  318C  2C2E         	ljmp	l4593
  9687  0FBE  318D  2DA6         	ljmp	l666
  9688                           
  9689                           	psect	text15
  9690  14C3                     __ptext15:	
  9691 ;; *************** function _modbus_response_process *****************
  9692 ;; Defined at:
  9693 ;;		line 208 in file "src/api/modbus.c"
  9694 ;; Parameters:    Size  Location     Type
  9695 ;;  rbuf            1    wreg     PTR unsigned char 
  9696 ;;		 -> modbusBuf(64), 
  9697 ;;  rlen            2   26[BANK0 ] unsigned int 
  9698 ;; Auto vars:     Size  Location     Type
  9699 ;;  rbuf            1   29[BANK0 ] PTR unsigned char 
  9700 ;;		 -> modbusBuf(64), 
  9701 ;;  pmdbs           1   28[BANK0 ] PTR struct .
  9702 ;;		 -> modbusBuf(64), 
  9703 ;;  resp            1    0        unsigned char 
  9704 ;; Return value:  Size  Location     Type
  9705 ;;                  1    wreg      void 
  9706 ;; Registers used:
  9707 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9708 ;; Tracked objects:
  9709 ;;		On entry : 1F/0
  9710 ;;		On exit  : 1F/0
  9711 ;;		Unchanged: 0/0
  9712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9713 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9714 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9716 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9717 ;;Total ram usage:        4 bytes
  9718 ;; Hardware stack levels used:    1
  9719 ;; Hardware stack levels required when called:    5
  9720 ;; This function calls:
  9721 ;;		_crc_verify
  9722 ;;		_modbus_response_command
  9723 ;;		_modbus_response_illgeal_function
  9724 ;;		_modbus_response_write_mult_register
  9725 ;;		_modbus_response_write_single_register
  9726 ;; This function is called by:
  9727 ;;		_main
  9728 ;; This function uses a non-reentrant model
  9729 ;;
  9730                           
  9731                           
  9732                           ;psect for function _modbus_response_process
  9733  14C3                     _modbus_response_process:	
  9734                           
  9735                           ;incstack = 0
  9736                           ; Regs used in _modbus_response_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9737                           ;modbus_response_process@rbuf stored from wreg
  9738  14C3  00BD               	movwf	modbus_response_process@rbuf
  9739                           
  9740                           ;modbus.c: 210: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)rbuf;
  9741  14C4  00BC               	movwf	modbus_response_process@pmdbs
  9742                           
  9743                           ;modbus.c: 213: if((pmdbs->addr!=sysData.id) && (pmdbs->addr!=0x00))return;
  9744  14C5  27A0  3194         	fcall	PL20	;call to abstracted procedure
  9745  14C7  083C               	movf	modbus_response_process@pmdbs,w
  9746  14C8  27AF  3194         	fcall	PL26	;call to abstracted procedure
  9747  14CA  1903               	skipnz
  9748  14CB  2CD1               	goto	l4775
  9749  14CC  083C               	movf	modbus_response_process@pmdbs,w
  9750  14CD  27EF  3194         	fcall	PL56	;call to abstracted procedure
  9751  14CF  1D03               	btfss	3,2
  9752  14D0  0008               	return
  9753  14D1                     l4775:	
  9754                           
  9755                           ;modbus.c: 214: if(!(crc_verify(rbuf,rlen)))return ;
  9756  14D1  083D               	movf	modbus_response_process@rbuf,w
  9757  14D2  00A0               	movwf	crc_verify@message
  9758  14D3  3002               	movlw	2
  9759  14D4  00A1               	movwf	crc_verify@message+1
  9760  14D5  083B               	movf	modbus_response_process@rlen+1,w
  9761  14D6  00A3               	movwf	crc_verify@n+1
  9762  14D7  083A               	movf	modbus_response_process@rlen,w
  9763  14D8  00A2               	movwf	crc_verify@n
  9764  14D9  319D  25A9  3194   	fcall	_crc_verify
  9765  14DC  3A00               	xorlw	0
  9766  14DD  1903               	btfsc	3,2
  9767  14DE  0008               	return
  9768  14DF  0A3C               	incf	modbus_response_process@pmdbs,w
  9769  14E0  27EF  3194         	fcall	PL56	;call to abstracted procedure
  9770                           
  9771                           ; Switch size 1, requested type "space"
  9772                           ; Number of cases is 4, Range of values is 3 to 38
  9773                           ; switch strategies available:
  9774                           ; Name         Instructions Cycles
  9775                           ; simple_byte           13     7 (average)
  9776                           ; direct_byte           81     9 (fixed)
  9777                           ; jumptable            263     9 (fixed)
  9778                           ;	Chosen strategy is simple_byte
  9779  14E2  3A03               	xorlw	3	; case 3
  9780  14E3  1903               	skipnz
  9781  14E4  2CF0               	goto	l4779
  9782  14E5  3A05               	xorlw	5	; case 6
  9783  14E6  1903               	skipnz
  9784  14E7  2CF3               	goto	l4781
  9785  14E8  3A16               	xorlw	22	; case 16
  9786  14E9  1903               	skipnz
  9787  14EA  2CF5               	goto	l4783
  9788  14EB  3A36               	xorlw	54	; case 38
  9789  14EC  1903               	skipnz
  9790  14ED  2CF3               	goto	l4781
  9791  14EE  2CF7               	goto	l4785
  9792  14EF  0008               	return
  9793  14F0                     l4779:	
  9794                           
  9795                           ;modbus.c: 218: modbus_response_command(rbuf);
  9796  14F0  083D               	movf	modbus_response_process@rbuf,w
  9797  14F1  3192  2A1B         	ljmp	_modbus_response_command
  9798  14F3                     l4781:	
  9799                           ;modbus.c: 219: break;
  9800                           
  9801                           
  9802                           ;modbus.c: 221: case 0x26:
  9803                           ;modbus.c: 222: modbus_response_write_single_register(rbuf);
  9804  14F3  083D               	movf	modbus_response_process@rbuf,w
  9805  14F4  2D46               	ljmp	_modbus_response_write_single_register
  9806  14F5                     l4783:	
  9807                           ;modbus.c: 223: break;
  9808                           
  9809                           
  9810                           ;modbus.c: 225: modbus_response_write_mult_register(rbuf);
  9811  14F5  083D               	movf	modbus_response_process@rbuf,w
  9812  14F6  2CFB               	ljmp	_modbus_response_write_mult_register
  9813  14F7                     l4785:	
  9814                           ;modbus.c: 226: break;
  9815                           
  9816                           
  9817                           ;modbus.c: 250: modbus_response_illgeal_function(rbuf,0x01);break;
  9818  14F7  01AB               	clrf	modbus_response_illgeal_function@errcode
  9819  14F8  0AAB               	incf	modbus_response_illgeal_function@errcode,f
  9820  14F9  083D               	movf	modbus_response_process@rbuf,w
  9821  14FA  2F63               	ljmp	_modbus_response_illgeal_function
  9822  14FB                     __end_of_modbus_response_process:	
  9823  14FB                     __ptext17:	
  9824 ;; *************** function _modbus_response_write_mult_register *****************
  9825 ;; Defined at:
  9826 ;;		line 162 in file "src/api/modbus.c"
  9827 ;; Parameters:    Size  Location     Type
  9828 ;;  rbuf            1    wreg     PTR unsigned char 
  9829 ;;		 -> modbusBuf(64), 
  9830 ;; Auto vars:     Size  Location     Type
  9831 ;;  rbuf            1   15[BANK0 ] PTR unsigned char 
  9832 ;;		 -> modbusBuf(64), 
  9833 ;;  stb             1   16[BANK0 ] PTR struct .
  9834 ;;		 -> modbusBuf(64), 
  9835 ;;  len             1   14[BANK0 ] unsigned char 
  9836 ;;  startAddr       1   13[BANK0 ] unsigned char 
  9837 ;; Return value:  Size  Location     Type
  9838 ;;                  1    wreg      void 
  9839 ;; Registers used:
  9840 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9841 ;; Tracked objects:
  9842 ;;		On entry : 1F/0
  9843 ;;		On exit  : 1F/0
  9844 ;;		Unchanged: 0/0
  9845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9847 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9848 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9849 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9850 ;;Total ram usage:        5 bytes
  9851 ;; Hardware stack levels used:    1
  9852 ;; Hardware stack levels required when called:    4
  9853 ;; This function calls:
  9854 ;;		_crc_append
  9855 ;;		_sys_data_save
  9856 ;;		_uart_send_len
  9857 ;; This function is called by:
  9858 ;;		_modbus_response_process
  9859 ;; This function uses a non-reentrant model
  9860 ;;
  9861                           
  9862                           
  9863                           ;psect for function _modbus_response_write_mult_register
  9864  14FB                     _modbus_response_write_mult_register:	
  9865                           
  9866                           ;incstack = 0
  9867                           ; Regs used in _modbus_response_write_mult_register: [wreg-fsr1h+status,2+status,0+pclat
      +                          h+cstack]
  9868                           ;modbus_response_write_mult_register@rbuf stored from wreg
  9869  14FB  00AF               	movwf	modbus_response_write_mult_register@rbuf
  9870                           
  9871                           ;modbus.c: 164: uint8_t startAddr,len;
  9872                           ;modbus.c: 165: st_modbusWriteMultReg_t* stb=(st_modbusWriteMultReg_t*)rbuf;
  9873  14FC  00B0               	movwf	modbus_response_write_mult_register@stb
  9874                           
  9875                           ;modbus.c: 166: if(stb->addr!=sysData.id || stb->addr==0)return;
  9876  14FD  27A0  3194         	fcall	PL20	;call to abstracted procedure
  9877  14FF  0830               	movf	modbus_response_write_mult_register@stb,w
  9878  1500  27AF  3194         	fcall	PL26	;call to abstracted procedure
  9879  1502  1D03               	skipz
  9880  1503  0008               	return
  9881  1504  0830               	movf	modbus_response_write_mult_register@stb,w
  9882  1505  0086               	movwf	6
  9883  1506  3002               	movlw	2	; select bank4/5
  9884  1507  0087               	movwf	7
  9885  1508  0801               	movf	1,w
  9886  1509  1903               	btfsc	3,2
  9887  150A  0008               	return
  9888                           
  9889                           ;modbus.c: 167: startAddr=stb->addr_lo;
  9890  150B  0830               	movf	modbus_response_write_mult_register@stb,w
  9891  150C  0086               	movwf	6
  9892  150D  3F43               	moviw [3]fsr1
  9893  150E  00AD               	movwf	modbus_response_write_mult_register@startAddr
  9894                           
  9895                           ;modbus.c: 168: len=stb->len_lo;
  9896  150F  0830               	movf	modbus_response_write_mult_register@stb,w
  9897  1510  0086               	movwf	6
  9898  1511  3F45               	moviw [5]fsr1
  9899  1512  00AE               	movwf	modbus_response_write_mult_register@len
  9900                           
  9901                           ;modbus.c: 169: if(len!=3)return ;
  9902  1513  3A03               	xorlw	3
  9903  1514  1D03               	btfss	3,2
  9904  1515  0008               	return
  9905                           
  9906                           ;modbus.c: 170: if(startAddr!=4)return;
  9907  1516  3004               	movlw	4
  9908  1517  062D               	xorwf	modbus_response_write_mult_register@startAddr,w
  9909  1518  1D03               	btfss	3,2
  9910  1519  0008               	return
  9911                           
  9912                           ;modbus.c: 171: sysData.pidKp=(stb->data[0]<<8)|(stb->data[1]);
  9913  151A  0830               	movf	modbus_response_write_mult_register@stb,w
  9914  151B  3E06               	addlw	6
  9915  151C  0084               	movwf	4
  9916  151D  0800               	movf	0,w
  9917  151E  00FB               	movwf	??_modbus_response_write_mult_register
  9918  151F  0830               	movf	modbus_response_write_mult_register@stb,w
  9919  1520  3E07               	addlw	7
  9920  1521  0084               	movwf	4
  9921  1522  27B5  3194         	fcall	PL30	;call to abstracted procedure
  9922                           
  9923                           ;modbus.c: 172: sysData.pidTi=(stb->data[2]<<8)|(stb->data[3]);
  9924  1524  27FA  3194         	fcall	PL64	;call to abstracted procedure
  9925  1526  3E08               	addlw	8
  9926  1527  27E8  3194         	fcall	PL54	;call to abstracted procedure
  9927  1529  3E09               	addlw	9
  9928  152A  0084               	movwf	4
  9929  152B  27D4  3194         	fcall	PL44	;call to abstracted procedure
  9930                           
  9931                           ;modbus.c: 173: sysData.pidTd=(stb->data[4]<<8)|(stb->data[5]);
  9932  152D  27FA  3194         	fcall	PL64	;call to abstracted procedure
  9933  152F  3E0A               	addlw	10
  9934  1530  27E8  3194         	fcall	PL54	;call to abstracted procedure
  9935  1532  3E0B               	addlw	11
  9936  1533  0084               	movwf	4
  9937  1534  27C9  3194         	fcall	PL40	;call to abstracted procedure
  9938  1536  0800               	movf	0,w
  9939  1537  3FC0               	movwi [0]fsr1
  9940  1538  087B               	movf	??_modbus_response_write_mult_register,w
  9941  1539  3FC1               	movwi [1]fsr1
  9942                           
  9943                           ;modbus.c: 174: sys_data_save();
  9944  153A  2619  3194         	fcall	_sys_data_save
  9945                           
  9946                           ;modbus.c: 175: crc_append(rbuf,sizeof(st_modbusWriteMultReg_t)-2);
  9947  153C  0020               	movlb	0	; select bank0
  9948  153D  082F               	movf	modbus_response_write_mult_register@rbuf,w
  9949  153E  27E1  3194         	fcall	PL50	;call to abstracted procedure
  9950  1540  2653               	fcall	_crc_append
  9951                           
  9952                           ;modbus.c: 176: uart_send_len(rbuf,sizeof(st_modbusWriteMultReg_t));
  9953  1541  3008               	movlw	8
  9954  1542  00F1               	movwf	uart_send_len@len
  9955  1543  082F               	movf	modbus_response_write_mult_register@rbuf,w
  9956  1544  318E  2EB0         	ljmp	_uart_send_len
  9957  1546                     __end_of_modbus_response_write_mult_register:	
  9958  1546                     __ptext16:	
  9959 ;; *************** function _modbus_response_write_single_register *****************
  9960 ;; Defined at:
  9961 ;;		line 115 in file "src/api/modbus.c"
  9962 ;; Parameters:    Size  Location     Type
  9963 ;;  rbuf            1    wreg     PTR unsigned char 
  9964 ;;		 -> modbusBuf(64), 
  9965 ;; Auto vars:     Size  Location     Type
  9966 ;;  rbuf            1   25[BANK0 ] PTR unsigned char 
  9967 ;;		 -> modbusBuf(64), 
  9968 ;;  startAddr       2   23[BANK0 ] unsigned int 
  9969 ;;  i               2   20[BANK0 ] unsigned int 
  9970 ;;  t16             2   18[BANK0 ] unsigned int 
  9971 ;;  pmdbs           1   22[BANK0 ] PTR struct .
  9972 ;;		 -> modbusBuf(64), 
  9973 ;;  fiSave          1   17[BANK0 ] unsigned char 
  9974 ;; Return value:  Size  Location     Type
  9975 ;;                  1    wreg      void 
  9976 ;; Registers used:
  9977 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9978 ;; Tracked objects:
  9979 ;;		On entry : 1F/0
  9980 ;;		On exit  : 1F/0
  9981 ;;		Unchanged: 0/0
  9982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9984 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9985 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9986 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9987 ;;Total ram usage:       13 bytes
  9988 ;; Hardware stack levels used:    1
  9989 ;; Hardware stack levels required when called:    4
  9990 ;; This function calls:
  9991 ;;		_crc_append
  9992 ;;		_sys_data_save
  9993 ;;		_uart_send_len
  9994 ;; This function is called by:
  9995 ;;		_modbus_response_process
  9996 ;; This function uses a non-reentrant model
  9997 ;;
  9998                           
  9999                           
 10000                           ;psect for function _modbus_response_write_single_register
 10001  1546                     _modbus_response_write_single_register:	
 10002                           
 10003                           ;incstack = 0
 10004                           ; Regs used in _modbus_response_write_single_register: [wreg-fsr1h+status,2+status,0+pcl
      +                          ath+cstack]
 10005                           ;modbus_response_write_single_register@rbuf stored from wreg
 10006  1546  00B9               	movwf	modbus_response_write_single_register@rbuf
 10007                           
 10008                           ;modbus.c: 118: uint16_t t16,i;
 10009                           ;modbus.c: 119: uint8_t fiSave=0;
 10010  1547  01B1               	clrf	modbus_response_write_single_register@fiSave
 10011                           
 10012                           ;modbus.c: 120: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)rbuf;
 10013  1548  00B6               	movwf	modbus_response_write_single_register@pmdbs
 10014                           
 10015                           ;modbus.c: 121: if(pmdbs->addr!=sysData.id && pmdbs->addr!=0)return;
 10016  1549  27A0  3194         	fcall	PL20	;call to abstracted procedure
 10017  154B  0836               	movf	modbus_response_write_single_register@pmdbs,w
 10018  154C  27AF  3194         	fcall	PL26	;call to abstracted procedure
 10019  154E  1903               	skipnz
 10020  154F  2D54               	goto	l4327
 10021  1550  27C3  3194         	fcall	PL38	;call to abstracted procedure
 10022  1552  1D03               	btfss	3,2
 10023  1553  0008               	return
 10024  1554                     l4327:	
 10025                           
 10026                           ;modbus.c: 122: if(sysData.id==253 && pmdbs->addr==0)return;
 10027  1554  305C               	movlw	92
 10028  1555  0086               	movwf	6
 10029  1556  3023               	movlw	35
 10030  1557  0087               	movwf	7
 10031  1558  30FD               	movlw	253
 10032  1559  3142               	addfsr 1,2
 10033  155A  0601               	xorwf	1,w
 10034  155B  1D03               	btfss	3,2
 10035  155C  2D61               	goto	l4333
 10036  155D  27C3  3194         	fcall	PL38	;call to abstracted procedure
 10037  155F  1903               	btfsc	3,2
 10038  1560  0008               	return
 10039  1561                     l4333:	
 10040                           
 10041                           ;modbus.c: 123: startAddr=pmdbs->addr_hi;
 10042  1561  0836               	movf	modbus_response_write_single_register@pmdbs,w
 10043  1562  3E02               	addlw	2
 10044  1563  0086               	movwf	6
 10045  1564  3002               	movlw	2	; select bank4/5
 10046  1565  0087               	movwf	7
 10047  1566  0801               	movf	1,w
 10048  1567  00B7               	movwf	modbus_response_write_single_register@startAddr
 10049  1568  01B8               	clrf	modbus_response_write_single_register@startAddr+1
 10050                           
 10051                           ;modbus.c: 124: startAddr<<=8;
 10052  1569  00B8               	movwf	modbus_response_write_single_register@startAddr+1
 10053  156A  01B7               	clrf	modbus_response_write_single_register@startAddr
 10054                           
 10055                           ;modbus.c: 125: startAddr |= pmdbs->addr_lo;
 10056  156B  0836               	movf	modbus_response_write_single_register@pmdbs,w
 10057  156C  3E03               	addlw	3
 10058  156D  0086               	movwf	6
 10059  156E  0801               	movf	1,w
 10060  156F  04B7               	iorwf	modbus_response_write_single_register@startAddr,f
 10061  1570  3002               	movlw	2
 10062                           
 10063                           ;modbus.c: 126: startAddr = startAddr & 0xff;
 10064  1571  01B8               	clrf	modbus_response_write_single_register@startAddr+1
 10065                           
 10066                           ;modbus.c: 127: if(startAddr==0x02){
 10067  1572  0637               	xorwf	modbus_response_write_single_register@startAddr,w
 10068  1573  0438               	iorwf	modbus_response_write_single_register@startAddr+1,w
 10069  1574  1D03               	btfss	3,2
 10070  1575  2D7F               	goto	l4345
 10071                           
 10072                           ;modbus.c: 128: sysData.id=rbuf[5];
 10073  1576  0839               	movf	modbus_response_write_single_register@rbuf,w
 10074  1577  3E05               	addlw	5
 10075  1578  0086               	movwf	6
 10076  1579  0801               	movf	1,w
 10077  157A  00AD               	movwf	??_modbus_response_write_single_register
 10078  157B  305E               	movlw	94
 10079  157C  27F4  3194         	fcall	PL62	;call to abstracted procedure
 10080                           
 10081                           ;modbus.c: 130: }else if(startAddr==0x03){
 10082  157E  2E00               	goto	l4343
 10083  157F                     l4345:	
 10084  157F  3003               	movlw	3
 10085  1580  0637               	xorwf	modbus_response_write_single_register@startAddr,w
 10086  1581  0438               	iorwf	modbus_response_write_single_register@startAddr+1,w
 10087  1582  1D03               	btfss	3,2
 10088  1583  2D94               	goto	l4353
 10089                           
 10090                           ;modbus.c: 131: sysData.pidSetFlg1=rbuf[4];
 10091  1584  27DA  3194         	fcall	PL48	;call to abstracted procedure
 10092  1586  00AD               	movwf	??_modbus_response_write_single_register
 10093  1587  305D               	movlw	93
 10094  1588  27F4  3194         	fcall	PL62	;call to abstracted procedure
 10095                           
 10096                           ;modbus.c: 132: sysData.pidSetFlg0=rbuf[5];
 10097  158A  305C               	movlw	92
 10098  158B  0086               	movwf	6
 10099  158C  0839               	movf	modbus_response_write_single_register@rbuf,w
 10100  158D  3E05               	addlw	5
 10101  158E  0084               	movwf	4
 10102  158F  3002               	movlw	2	; select bank4/5
 10103  1590  0085               	movwf	5
 10104  1591  0800               	movf	0,w
 10105  1592  3FC0               	movwi [0]fsr1
 10106  1593  2E00               	goto	l4343
 10107  1594                     l4353:	
 10108  1594  3000               	movlw	0
 10109  1595  0238               	subwf	modbus_response_write_single_register@startAddr+1,w
 10110  1596  3010               	movlw	16
 10111  1597  1903               	skipnz
 10112  1598  0237               	subwf	modbus_response_write_single_register@startAddr,w
 10113  1599  1C03               	skipc
 10114  159A  0008               	return
 10115  159B  3000               	movlw	0
 10116  159C  0238               	subwf	modbus_response_write_single_register@startAddr+1,w
 10117  159D  304C               	movlw	76
 10118  159E  1903               	skipnz
 10119  159F  0237               	subwf	modbus_response_write_single_register@startAddr,w
 10120  15A0  1803               	skipnc
 10121  15A1  0008               	return
 10122                           
 10123                           ;modbus.c: 135: startAddr-=0x10;
 10124  15A2  3010               	movlw	16
 10125  15A3  02B7               	subwf	modbus_response_write_single_register@startAddr,f
 10126  15A4  3000               	movlw	0
 10127  15A5  3BB8               	subwfb	modbus_response_write_single_register@startAddr+1,f
 10128                           
 10129                           ;modbus.c: 136: if(startAddr & 0x01){
 10130  15A6  1C37               	btfss	modbus_response_write_single_register@startAddr,0
 10131  15A7  2E02               	goto	l4385
 10132                           
 10133                           ;modbus.c: 137: t16=rbuf[4];
 10134  15A8  27DA  3194         	fcall	PL48	;call to abstracted procedure
 10135  15AA  00B2               	movwf	modbus_response_write_single_register@t16
 10136  15AB  01B3               	clrf	modbus_response_write_single_register@t16+1
 10137                           
 10138                           ;modbus.c: 138: t16<<=8;
 10139  15AC  00B3               	movwf	modbus_response_write_single_register@t16+1
 10140  15AD  01B2               	clrf	modbus_response_write_single_register@t16
 10141                           
 10142                           ;modbus.c: 139: t16 |= rbuf[5];
 10143  15AE  0839               	movf	modbus_response_write_single_register@rbuf,w
 10144  15AF  3E05               	addlw	5
 10145  15B0  0086               	movwf	6
 10146  15B1  0801               	movf	1,w
 10147  15B2  04B2               	iorwf	modbus_response_write_single_register@t16,f
 10148                           
 10149                           ;modbus.c: 140: sysData.calibVoMV[startAddr>>1]=t16;
 10150  15B3  0838               	movf	modbus_response_write_single_register@startAddr+1,w
 10151  15B4  00AE               	movwf	??_modbus_response_write_single_register+1
 10152  15B5  0837               	movf	modbus_response_write_single_register@startAddr,w
 10153  15B6  00AD               	movwf	??_modbus_response_write_single_register
 10154  15B7  30A2               	movlw	162
 10155  15B8  36AE               	lsrf	??_modbus_response_write_single_register+1,f
 10156  15B9  0CAD               	rrf	??_modbus_response_write_single_register,f
 10157  15BA  278C  3194         	fcall	PL6	;call to abstracted procedure
 10158  15BC  0832               	movf	modbus_response_write_single_register@t16,w
 10159  15BD  3FC0               	movwi [0]fsr1
 10160  15BE  0833               	movf	modbus_response_write_single_register@t16+1,w
 10161  15BF  3FC1               	movwi [1]fsr1
 10162                           
 10163                           ;modbus.c: 141: sysData.calibRsAdc[startAddr>>1]=rsLoAvg;
 10164  15C0  0838               	movf	modbus_response_write_single_register@startAddr+1,w
 10165  15C1  00AE               	movwf	??_modbus_response_write_single_register+1
 10166  15C2  0837               	movf	modbus_response_write_single_register@startAddr,w
 10167  15C3  00AD               	movwf	??_modbus_response_write_single_register
 10168  15C4  3066               	movlw	102
 10169  15C5  36AE               	lsrf	??_modbus_response_write_single_register+1,f
 10170  15C6  0CAD               	rrf	??_modbus_response_write_single_register,f
 10171  15C7  278C  3194         	fcall	PL6	;call to abstracted procedure
 10172  15C9  084C               	movf	_rsLoAvg,w
 10173  15CA  3FC0               	movwi [0]fsr1
 10174  15CB  084D               	movf	_rsLoAvg+1,w
 10175  15CC  3FC1               	movwi [1]fsr1
 10176                           
 10177                           ;modbus.c: 143: if(rbuf[1]==0x26){
 10178  15CD  0A39               	incf	modbus_response_write_single_register@rbuf,w
 10179  15CE  0086               	movwf	6
 10180  15CF  3002               	movlw	2	; select bank4/5
 10181  15D0  0087               	movwf	7
 10182  15D1  3026               	movlw	38
 10183  15D2  0601               	xorwf	1,w
 10184  15D3  1D03               	btfss	3,2
 10185  15D4  2E00               	goto	l4343
 10186                           
 10187                           ;modbus.c: 144: for(i=(startAddr>>1)+1;i<30;i++){
 10188  15D5  0838               	movf	modbus_response_write_single_register@startAddr+1,w
 10189  15D6  00AE               	movwf	??_modbus_response_write_single_register+1
 10190  15D7  0837               	movf	modbus_response_write_single_register@startAddr,w
 10191  15D8  00AD               	movwf	??_modbus_response_write_single_register
 10192  15D9  36AE               	lsrf	??_modbus_response_write_single_register+1,f
 10193  15DA  0CAD               	rrf	??_modbus_response_write_single_register,f
 10194  15DB  082D               	movf	??_modbus_response_write_single_register,w
 10195  15DC  00B4               	movwf	modbus_response_write_single_register@i
 10196  15DD  082E               	movf	??_modbus_response_write_single_register+1,w
 10197  15DE  00B5               	movwf	modbus_response_write_single_register@i+1
 10198  15DF                     L7:	
 10199  15DF  0AB4               	incf	modbus_response_write_single_register@i,f
 10200  15E0  1903               	skipnz
 10201  15E1  0AB5               	incf	modbus_response_write_single_register@i+1,f
 10202  15E2  3000               	movlw	0
 10203  15E3  0235               	subwf	modbus_response_write_single_register@i+1,w
 10204  15E4  301E               	movlw	30
 10205  15E5  1903               	skipnz
 10206  15E6  0234               	subwf	modbus_response_write_single_register@i,w
 10207  15E7  1803               	btfsc	3,0
 10208  15E8  2E00               	goto	l4343
 10209                           
 10210                           ;modbus.c: 145: sysData.calibVoMV[i]=t16;
 10211  15E9  0835               	movf	modbus_response_write_single_register@i+1,w
 10212  15EA  00AE               	movwf	??_modbus_response_write_single_register+1
 10213  15EB  0834               	movf	modbus_response_write_single_register@i,w
 10214  15EC  00AD               	movwf	??_modbus_response_write_single_register
 10215  15ED  30A2               	movlw	162
 10216  15EE  278C  3194         	fcall	PL6	;call to abstracted procedure
 10217  15F0  0832               	movf	modbus_response_write_single_register@t16,w
 10218  15F1  3FC0               	movwi [0]fsr1
 10219  15F2  0833               	movf	modbus_response_write_single_register@t16+1,w
 10220  15F3  3FC1               	movwi [1]fsr1
 10221                           
 10222                           ;modbus.c: 146: sysData.calibRsAdc[i]=rsLoAvg;
 10223  15F4  0835               	movf	modbus_response_write_single_register@i+1,w
 10224  15F5  00AE               	movwf	??_modbus_response_write_single_register+1
 10225  15F6  0834               	movf	modbus_response_write_single_register@i,w
 10226  15F7  00AD               	movwf	??_modbus_response_write_single_register
 10227  15F8  3066               	movlw	102
 10228  15F9  278C  3194         	fcall	PL6	;call to abstracted procedure
 10229  15FB  084C               	movf	_rsLoAvg,w
 10230  15FC  3FC0               	movwi [0]fsr1
 10231  15FD  084D               	movf	_rsLoAvg+1,w
 10232  15FE  3FC1               	movwi [1]fsr1
 10233  15FF  2DDF               	goto	L7
 10234  1600                     l4343:	
 10235                           
 10236                           ;modbus.c: 129: fiSave=1;
 10237  1600  01B1               	clrf	modbus_response_write_single_register@fiSave
 10238  1601  0AB1               	incf	modbus_response_write_single_register@fiSave,f
 10239  1602                     l4385:	
 10240                           
 10241                           ;modbus.c: 154: }
 10242                           ;modbus.c: 155: if(fiSave)sys_data_save();
 10243  1602  0831               	movf	modbus_response_write_single_register@fiSave,w
 10244  1603  1903               	btfsc	3,2
 10245  1604  2E07               	goto	l4389
 10246  1605  2619  3194         	fcall	_sys_data_save
 10247  1607                     l4389:	
 10248                           
 10249                           ;modbus.c: 156: if(pmdbs->addr==0)return;
 10250  1607  0020               	movlb	0	; select bank0
 10251  1608  27C3  3194         	fcall	PL38	;call to abstracted procedure
 10252  160A  1903               	btfsc	3,2
 10253  160B  0008               	return
 10254                           
 10255                           ;modbus.c: 157: rbuf[0]=sysData.id;
 10256  160C  0839               	movf	modbus_response_write_single_register@rbuf,w
 10257  160D  0086               	movwf	6
 10258  160E  2798  3194         	fcall	PL18	;call to abstracted procedure
 10259                           
 10260                           ;modbus.c: 158: crc_append(rbuf,6);
 10261  1610  0839               	movf	modbus_response_write_single_register@rbuf,w
 10262  1611  27E1  3194         	fcall	PL50	;call to abstracted procedure
 10263  1613  2653               	fcall	_crc_append
 10264                           
 10265                           ;modbus.c: 159: uart_send_len(rbuf,8);
 10266  1614  3008               	movlw	8
 10267  1615  00F1               	movwf	uart_send_len@len
 10268  1616  0839               	movf	modbus_response_write_single_register@rbuf,w
 10269  1617  318E  2EB0         	ljmp	_uart_send_len
 10270  1619                     __end_of_modbus_response_write_single_register:	
 10271  1619                     __ptext18:	
 10272 ;; *************** function _sys_data_save *****************
 10273 ;; Defined at:
 10274 ;;		line 95 in file "src/api/sysData.c"
 10275 ;; Parameters:    Size  Location     Type
 10276 ;;		None
 10277 ;; Auto vars:     Size  Location     Type
 10278 ;;		None
 10279 ;; Return value:  Size  Location     Type
 10280 ;;                  1    wreg      void 
 10281 ;; Registers used:
 10282 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10283 ;; Tracked objects:
 10284 ;;		On entry : 1E/1
 10285 ;;		On exit  : 1F/1
 10286 ;;		Unchanged: 0/0
 10287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10290 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10291 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10292 ;;Total ram usage:        2 bytes
 10293 ;; Hardware stack levels used:    1
 10294 ;; Hardware stack levels required when called:    3
 10295 ;; This function calls:
 10296 ;;		_crc_append
 10297 ;;		_my_flash_read_system_erase
 10298 ;;		_my_flash_system_write
 10299 ;; This function is called by:
 10300 ;;		_sys_data_init
 10301 ;;		_modbus_response_write_single_register
 10302 ;;		_modbus_response_write_mult_register
 10303 ;;		_main
 10304 ;; This function uses a non-reentrant model
 10305 ;;
 10306                           
 10307                           
 10308                           ;psect for function _sys_data_save
 10309  1619                     _sys_data_save:	
 10310  1619                     l4277:	
 10311                           ;incstack = 0
 10312                           ; Regs used in _sys_data_save: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10313                           
 10314                           
 10315                           ;sysData.c: 97: crc_append((uint8_t*)&sysData,sizeof(sysData_t)-2);
 10316  1619  305C               	movlw	92
 10317  161A  0020               	movlb	0	; select bank0
 10318  161B  00A0               	movwf	crc_append@message
 10319  161C  3023               	movlw	35
 10320  161D  00A1               	movwf	crc_append@message+1
 10321  161E  3082               	movlw	130
 10322  161F  00A2               	movwf	crc_append@n
 10323  1620  01A3               	clrf	crc_append@n+1
 10324  1621  2653  3194         	fcall	_crc_append
 10325                           
 10326                           ;sysData.c: 98: my_flash_read_system_erase();
 10327  1623  2681  3194         	fcall	_my_flash_read_system_erase
 10328                           
 10329                           ;sysData.c: 99: my_flash_system_write((uint8_t*)&sysData,sizeof(sysData_t));
 10330  1625  305C               	movlw	92
 10331  1626  00F1               	movwf	my_flash_system_write@buf
 10332  1627  3023               	movlw	35
 10333  1628  00F2               	movwf	my_flash_system_write@buf+1
 10334  1629  3084               	movlw	132
 10335  162A  00F3               	movwf	my_flash_system_write@len
 10336  162B  01F4               	clrf	my_flash_system_write@len+1
 10337  162C  26B5  3194         	fcall	_my_flash_system_write
 10338                           
 10339                           ;sysData.c: 100: PidKp=sysData.pidKp;
 10340  162E  27B5  3194         	fcall	PL30	;call to abstracted procedure
 10341  1630  3F40               	moviw [0]fsr1
 10342  1631  00AB               	movwf	??_sys_data_save
 10343  1632  3F41               	moviw [1]fsr1
 10344  1633  00AC               	movwf	??_sys_data_save+1
 10345  1634  082B               	movf	??_sys_data_save,w
 10346  1635  0021               	movlb	1	; select bank1
 10347  1636  00AC               	movwf	_PidKp^(0+128)
 10348  1637  0020               	movlb	0	; select bank0
 10349  1638  082C               	movf	??_sys_data_save+1,w
 10350                           
 10351                           ;sysData.c: 101: PidTi=sysData.pidTi;
 10352  1639  27A6  3194         	fcall	PL22	;call to abstracted procedure
 10353  163B  3146               	addfsr 1,6
 10354  163C  27BB  3194         	fcall	PL32	;call to abstracted procedure
 10355  163E  00B4               	movwf	_PidTi^(0+128)
 10356  163F  0020               	movlb	0	; select bank0
 10357  1640  082C               	movf	??_sys_data_save+1,w
 10358  1641  0021               	movlb	1	; select bank1
 10359  1642  00B5               	movwf	(_PidTi^(0+128)+1)
 10360  1643  305C               	movlw	92
 10361  1644  01B6               	clrf	(_PidTi^(0+128)+2)
 10362  1645  01B7               	clrf	(_PidTi^(0+128)+3)
 10363                           
 10364                           ;sysData.c: 102: PidTd=sysData.pidTd;;
 10365  1646  0086               	movwf	6
 10366  1647  3023               	movlw	35
 10367  1648  0087               	movwf	7
 10368  1649  3148               	addfsr 1,8
 10369  164A  27BB               	fcall	PL32	;call to abstracted procedure
 10370  164B  00B0               	movwf	_PidTd^(0+128)
 10371  164C  0020               	movlb	0	; select bank0
 10372  164D  082C               	movf	??_sys_data_save+1,w
 10373  164E  0021               	movlb	1	; select bank1
 10374  164F  00B1               	movwf	(_PidTd^(0+128)+1)
 10375  1650  01B2               	clrf	(_PidTd^(0+128)+2)
 10376  1651  01B3               	clrf	(_PidTd^(0+128)+3)
 10377  1652  0008               	return
 10378  1653                     __end_of_sys_data_save:	
 10379  1653                     __ptext26:	
 10380 ;; *************** function _crc_append *****************
 10381 ;; Defined at:
 10382 ;;		line 143 in file "src/depend/crc16.c"
 10383 ;; Parameters:    Size  Location     Type
 10384 ;;  message         2    0[BANK0 ] PTR unsigned char 
 10385 ;;		 -> modbusBuf(64), sysData(132), 
 10386 ;;  n               2    2[BANK0 ] unsigned int 
 10387 ;; Auto vars:     Size  Location     Type
 10388 ;;  crc             2    9[BANK0 ] unsigned int 
 10389 ;; Return value:  Size  Location     Type
 10390 ;;                  1    wreg      void 
 10391 ;; Registers used:
 10392 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10393 ;; Tracked objects:
 10394 ;;		On entry : 1F/0
 10395 ;;		On exit  : 1F/0
 10396 ;;		Unchanged: 0/0
 10397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10398 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10399 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10400 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10401 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10402 ;;Total ram usage:       11 bytes
 10403 ;; Hardware stack levels used:    1
 10404 ;; Hardware stack levels required when called:    2
 10405 ;; This function calls:
 10406 ;;		_crc_sum
 10407 ;; This function is called by:
 10408 ;;		_sys_data_save
 10409 ;;		_modbus_response_illgeal_function
 10410 ;;		_modbus_response_write_single_register
 10411 ;;		_modbus_response_write_mult_register
 10412 ;;		_modbus_response_command
 10413 ;; This function uses a non-reentrant model
 10414 ;;
 10415                           
 10416                           
 10417                           ;psect for function _crc_append
 10418  1653                     _crc_append:	
 10419                           
 10420                           ;crc16.c: 145: uint16_t crc;
 10421                           ;crc16.c: 146: crc = crc_sum(message, n);
 10422                           
 10423                           ;incstack = 0
 10424                           ; Regs used in _crc_append: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10425  1653  0821               	movf	crc_append@message+1,w
 10426  1654  00F2               	movwf	crc_sum@buf+1
 10427  1655  0820               	movf	crc_append@message,w
 10428  1656  00F1               	movwf	crc_sum@buf
 10429  1657  0823               	movf	crc_append@n+1,w
 10430  1658  00F4               	movwf	crc_sum@len+1
 10431  1659  0822               	movf	crc_append@n,w
 10432  165A  00F3               	movwf	crc_sum@len
 10433  165B  272D               	fcall	_crc_sum
 10434  165C  0872               	movf	?_crc_sum+1,w
 10435  165D  00AA               	movwf	crc_append@crc+1
 10436  165E  0871               	movf	?_crc_sum,w
 10437  165F  00A9               	movwf	crc_append@crc
 10438                           
 10439                           ;crc16.c: 147: message[n] = (uint8_t)(crc & 0xff);
 10440  1660  0822               	movf	crc_append@n,w
 10441  1661  0720               	addwf	crc_append@message,w
 10442  1662  00A4               	movwf	??_crc_append
 10443  1663  0823               	movf	crc_append@n+1,w
 10444  1664  3D21               	addwfc	crc_append@message+1,w
 10445  1665  00A5               	movwf	??_crc_append+1
 10446  1666  0824               	movf	??_crc_append,w
 10447  1667  0086               	movwf	6
 10448  1668  0825               	movf	??_crc_append+1,w
 10449  1669  0087               	movwf	7
 10450  166A  0829               	movf	crc_append@crc,w
 10451  166B  0081               	movwf	1
 10452                           
 10453                           ;crc16.c: 148: message[n+1] = (uint8_t)((crc >> 8) & 0xff);
 10454  166C  082A               	movf	crc_append@crc+1,w
 10455  166D  00A4               	movwf	??_crc_append
 10456  166E  0822               	movf	crc_append@n,w
 10457  166F  0720               	addwf	crc_append@message,w
 10458  1670  00A5               	movwf	??_crc_append+1
 10459  1671  0823               	movf	crc_append@n+1,w
 10460  1672  3D21               	addwfc	crc_append@message+1,w
 10461  1673  00A6               	movwf	??_crc_append+2
 10462  1674  0825               	movf	??_crc_append+1,w
 10463  1675  3E01               	addlw	1
 10464  1676  00A7               	movwf	??_crc_append+3
 10465  1677  3000               	movlw	0
 10466  1678  3D26               	addwfc	??_crc_append+2,w
 10467  1679  00A8               	movwf	??_crc_append+4
 10468  167A  0827               	movf	??_crc_append+3,w
 10469  167B  0086               	movwf	6
 10470  167C  0828               	movf	??_crc_append+4,w
 10471  167D  0087               	movwf	7
 10472  167E  0824               	movf	??_crc_append,w
 10473  167F  0081               	movwf	1
 10474  1680  0008               	return
 10475  1681                     __end_of_crc_append:	
 10476  1681                     __ptext20:	
 10477 ;; *************** function _my_flash_read_system_erase *****************
 10478 ;; Defined at:
 10479 ;;		line 9 in file "src/api/sysData.c"
 10480 ;; Parameters:    Size  Location     Type
 10481 ;;		None
 10482 ;; Auto vars:     Size  Location     Type
 10483 ;;		None
 10484 ;; Return value:  Size  Location     Type
 10485 ;;                  1    wreg      void 
 10486 ;; Registers used:
 10487 ;;		wreg, status,2, status,0, pclath, cstack
 10488 ;; Tracked objects:
 10489 ;;		On entry : 1F/0
 10490 ;;		On exit  : 1F/3
 10491 ;;		Unchanged: 0/0
 10492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10496 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10497 ;;Total ram usage:        0 bytes
 10498 ;; Hardware stack levels used:    1
 10499 ;; Hardware stack levels required when called:    2
 10500 ;; This function calls:
 10501 ;;		_FLASH_EraseBlock
 10502 ;; This function is called by:
 10503 ;;		_sys_data_save
 10504 ;; This function uses a non-reentrant model
 10505 ;;
 10506                           
 10507                           
 10508                           ;psect for function _my_flash_read_system_erase
 10509  1681                     _my_flash_read_system_erase:	
 10510                           
 10511                           ;sysData.c: 16: FLASH_EraseBlock(0x1f00);
 10512                           
 10513                           ;incstack = 0
 10514                           ; Regs used in _my_flash_read_system_erase: [wreg+status,2+status,0+pclath+cstack]
 10515  1681  301F               	movlw	31
 10516  1682  01F1               	clrf	FLASH_EraseBlock@startAddr
 10517  1683  00F2               	movwf	FLASH_EraseBlock@startAddr+1
 10518  1684  269D  3194         	fcall	_FLASH_EraseBlock
 10519                           
 10520                           ;sysData.c: 17: FLASH_EraseBlock(0x1f00+32);
 10521  1686  3020               	movlw	32
 10522  1687  00F1               	movwf	FLASH_EraseBlock@startAddr
 10523  1688  301F               	movlw	31
 10524  1689  00F2               	movwf	FLASH_EraseBlock@startAddr+1
 10525  168A  269D  3194         	fcall	_FLASH_EraseBlock
 10526                           
 10527                           ;sysData.c: 18: FLASH_EraseBlock(0x1f00+64);
 10528  168C  3040               	movlw	64
 10529  168D  00F1               	movwf	FLASH_EraseBlock@startAddr
 10530  168E  301F               	movlw	31
 10531  168F  00F2               	movwf	FLASH_EraseBlock@startAddr+1
 10532  1690  269D  3194         	fcall	_FLASH_EraseBlock
 10533                           
 10534                           ;sysData.c: 19: FLASH_EraseBlock(0x1f00+96);
 10535  1692  3060               	movlw	96
 10536  1693  00F1               	movwf	FLASH_EraseBlock@startAddr
 10537  1694  301F               	movlw	31
 10538  1695  00F2               	movwf	FLASH_EraseBlock@startAddr+1
 10539  1696  269D  3194         	fcall	_FLASH_EraseBlock
 10540                           
 10541                           ;sysData.c: 20: FLASH_EraseBlock(0x1f00+128);
 10542  1698  3080               	movlw	128
 10543  1699  00F1               	movwf	FLASH_EraseBlock@startAddr
 10544  169A  301F               	movlw	31
 10545  169B  00F2               	movwf	FLASH_EraseBlock@startAddr+1
 10546  169C  2E9D               	ljmp	l2895
 10547  169D                     __end_of_my_flash_read_system_erase:	
 10548  169D                     __ptext21:	
 10549 ;; *************** function _FLASH_EraseBlock *****************
 10550 ;; Defined at:
 10551 ;;		line 147 in file "mcc_generated_files/memory.c"
 10552 ;; Parameters:    Size  Location     Type
 10553 ;;  startAddr       2    1[COMMON] unsigned int 
 10554 ;; Auto vars:     Size  Location     Type
 10555 ;;  GIEBitValue     1    3[COMMON] unsigned char 
 10556 ;; Return value:  Size  Location     Type
 10557 ;;                  1    wreg      void 
 10558 ;; Registers used:
 10559 ;;		wreg, status,2, status,0
 10560 ;; Tracked objects:
 10561 ;;		On entry : 1C/0
 10562 ;;		On exit  : 1F/3
 10563 ;;		Unchanged: 0/0
 10564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10565 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10566 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10568 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10569 ;;Total ram usage:        3 bytes
 10570 ;; Hardware stack levels used:    1
 10571 ;; Hardware stack levels required when called:    1
 10572 ;; This function calls:
 10573 ;;		Nothing
 10574 ;; This function is called by:
 10575 ;;		_my_flash_read_system_erase
 10576 ;; This function uses a non-reentrant model
 10577 ;;
 10578                           
 10579                           
 10580                           ;psect for function _FLASH_EraseBlock
 10581  169D                     _FLASH_EraseBlock:	
 10582  169D                     l2895:	
 10583                           ;incstack = 0
 10584                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
 10585                           
 10586                           
 10587                           ;memory.c: 149: uint8_t GIEBitValue = INTCONbits.GIE;
 10588  169D  3000               	movlw	0
 10589  169E  1B8B               	btfsc	11,7	;volatile
 10590  169F  3001               	movlw	1
 10591  16A0  00F3               	movwf	FLASH_EraseBlock@GIEBitValue
 10592                           
 10593                           ;memory.c: 152: INTCONbits.GIE = 0;
 10594  16A1  138B               	bcf	11,7	;volatile
 10595                           
 10596                           ;memory.c: 154: PMADRL = (startAddr & 0xFF);
 10597  16A2  0871               	movf	FLASH_EraseBlock@startAddr,w
 10598  16A3  0023               	movlb	3	; select bank3
 10599  16A4  0091               	movwf	17	;volatile
 10600                           
 10601                           ;memory.c: 156: PMADRH = ((startAddr & 0xFF00) >> 8);
 10602  16A5  0872               	movf	FLASH_EraseBlock@startAddr+1,w
 10603  16A6  0092               	movwf	18	;volatile
 10604                           
 10605                           ;memory.c: 159: PMCON1bits.CFGS = 0;
 10606  16A7  1315               	bcf	21,6	;volatile
 10607                           
 10608                           ;memory.c: 160: PMCON1bits.FREE = 1;
 10609  16A8  1615               	bsf	21,4	;volatile
 10610                           
 10611                           ;memory.c: 161: PMCON1bits.WREN = 1;
 10612  16A9  1515               	bsf	21,2	;volatile
 10613                           
 10614                           ;memory.c: 164: PMCON2 = 0x55;
 10615  16AA  3055               	movlw	85
 10616  16AB  0096               	movwf	22	;volsfr
 10617                           
 10618                           ;memory.c: 165: PMCON2 = 0xAA;
 10619  16AC  30AA               	movlw	170
 10620  16AD  0096               	movwf	22	;volsfr
 10621                           
 10622                           ;memory.c: 166: PMCON1bits.WR = 1;
 10623  16AE  1495               	bsf	21,1	;volatile
 10624                           
 10625                           ;memory.c: 167: __nop();
 10626  16AF  0000               	nop
 10627                           
 10628                           ;memory.c: 168: __nop();
 10629  16B0  0000               	nop
 10630                           
 10631                           ;memory.c: 170: PMCON1bits.WREN = 0;
 10632  16B1  0023               	movlb	3	; select bank3
 10633  16B2  1115               	bcf	21,2	;volatile
 10634                           
 10635                           ;memory.c: 171: INTCONbits.GIE = GIEBitValue;
 10636  16B3  0C73               	rrf	FLASH_EraseBlock@GIEBitValue,w
 10637  16B4  2FCF               	ljmp	PL42	;call to abstracted procedure
 10638  16B5                     __end_of_FLASH_EraseBlock:	
 10639  16B5                     __ptext19:	
 10640 ;; *************** function _my_flash_system_write *****************
 10641 ;; Defined at:
 10642 ;;		line 47 in file "src/api/sysData.c"
 10643 ;; Parameters:    Size  Location     Type
 10644 ;;  buf             2    1[COMMON] PTR unsigned char 
 10645 ;;		 -> sysData(132), 
 10646 ;;  len             2    3[COMMON] unsigned int 
 10647 ;; Auto vars:     Size  Location     Type
 10648 ;;  i               2    9[BANK0 ] unsigned int 
 10649 ;;  flashAddr       2    7[BANK0 ] unsigned int 
 10650 ;;  loc             2    5[BANK0 ] unsigned int 
 10651 ;;  blocNum         2    3[BANK0 ] unsigned int 
 10652 ;;  j               2    0[BANK0 ] unsigned int 
 10653 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
 10654 ;; Return value:  Size  Location     Type
 10655 ;;                  2    1[COMMON] unsigned int 
 10656 ;; Registers used:
 10657 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10658 ;; Tracked objects:
 10659 ;;		On entry : 1F/3
 10660 ;;		On exit  : 1F/0
 10661 ;;		Unchanged: 0/0
 10662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10663 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10664 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10665 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10666 ;;      Totals:         5      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10667 ;;Total ram usage:       16 bytes
 10668 ;; Hardware stack levels used:    1
 10669 ;; Hardware stack levels required when called:    1
 10670 ;; This function calls:
 10671 ;;		Nothing
 10672 ;; This function is called by:
 10673 ;;		_sys_data_save
 10674 ;; This function uses a non-reentrant model
 10675 ;;
 10676                           
 10677                           
 10678                           ;psect for function _my_flash_system_write
 10679  16B5                     _my_flash_system_write:	
 10680                           
 10681                           ;sysData.c: 50: uint16_t loc,j,i=0;
 10682                           
 10683                           ;incstack = 0
 10684                           ; Regs used in _my_flash_system_write: [wreg+fsr1l+fsr1h+status,2+status,0]
 10685  16B5  0020               	movlb	0	; select bank0
 10686  16B6  301F               	movlw	31
 10687  16B7  01A9               	clrf	my_flash_system_write@i
 10688  16B8  01AA               	clrf	my_flash_system_write@i+1
 10689                           
 10690                           ;sysData.c: 51: uint16_t flashAddr=0x1f00;
 10691  16B9  01A7               	clrf	my_flash_system_write@flashAddr
 10692  16BA  00A8               	movwf	my_flash_system_write@flashAddr+1
 10693                           
 10694                           ;sysData.c: 52: uint8_t GIEBitValue=INTCONbits.GIE;
 10695  16BB  3000               	movlw	0
 10696  16BC  1B8B               	btfsc	11,7	;volatile
 10697  16BD  3001               	movlw	1
 10698  16BE  00A2               	movwf	my_flash_system_write@GIEBitValue
 10699                           
 10700                           ;sysData.c: 54: blocNum=len/32;
 10701  16BF  0874               	movf	my_flash_system_write@len+1,w
 10702  16C0  00A4               	movwf	my_flash_system_write@blocNum+1
 10703  16C1  0873               	movf	my_flash_system_write@len,w
 10704  16C2  00A3               	movwf	my_flash_system_write@blocNum
 10705  16C3  3005               	movlw	5
 10706  16C4                     u1525:	
 10707  16C4  36A4               	lsrf	my_flash_system_write@blocNum+1,f
 10708  16C5  0CA3               	rrf	my_flash_system_write@blocNum,f
 10709  16C6  0B89               	decfsz	9,f
 10710  16C7  2EC4               	goto	u1525
 10711                           
 10712                           ;sysData.c: 55: if(len%32)blocNum++;
 10713  16C8  0873               	movf	my_flash_system_write@len,w
 10714  16C9  391F               	andlw	31
 10715  16CA  1903               	btfsc	3,2
 10716  16CB  2ECF               	goto	l2967
 10717  16CC  0AA3               	incf	my_flash_system_write@blocNum,f
 10718  16CD  1903               	skipnz
 10719  16CE  0AA4               	incf	my_flash_system_write@blocNum+1,f
 10720  16CF                     l2967:	
 10721                           
 10722                           ;sysData.c: 57: INTCONbits.GIE = 0;
 10723  16CF  138B               	bcf	11,7	;volatile
 10724                           
 10725                           ;sysData.c: 58: loc=0;
 10726  16D0  01A5               	clrf	my_flash_system_write@loc
 10727  16D1  01A6               	clrf	my_flash_system_write@loc+1
 10728                           
 10729                           ;sysData.c: 59: for(j=0;j<blocNum;j++){
 10730  16D2  01A0               	clrf	my_flash_system_write@j
 10731  16D3  01A1               	clrf	my_flash_system_write@j+1
 10732  16D4                     l3007:	
 10733  16D4  0824               	movf	my_flash_system_write@blocNum+1,w
 10734  16D5  0221               	subwf	my_flash_system_write@j+1,w
 10735  16D6  1D03               	skipz
 10736  16D7  2EDA               	goto	u1575
 10737  16D8  0823               	movf	my_flash_system_write@blocNum,w
 10738  16D9  0220               	subwf	my_flash_system_write@j,w
 10739  16DA                     u1575:	
 10740  16DA  1803               	btfsc	3,0
 10741  16DB  2F2B               	goto	l3009
 10742                           
 10743                           ;sysData.c: 60: PMCON1bits.CFGS = 0;
 10744  16DC  0023               	movlb	3	; select bank3
 10745  16DD  1315               	bcf	21,6	;volatile
 10746                           
 10747                           ;sysData.c: 61: PMCON1bits.WREN = 1;
 10748  16DE  1515               	bsf	21,2	;volatile
 10749                           
 10750                           ;sysData.c: 62: PMCON1bits.LWLO = 1;
 10751  16DF  1695               	bsf	21,5	;volatile
 10752                           
 10753                           ;sysData.c: 64: for(i=0;i<32;i++){
 10754  16E0  0020               	movlb	0	; select bank0
 10755  16E1  01A9               	clrf	my_flash_system_write@i
 10756  16E2  01AA               	clrf	my_flash_system_write@i+1
 10757  16E3                     l2979:	
 10758                           
 10759                           ;sysData.c: 66: PMADRL = (flashAddr & 0xFF);
 10760  16E3  0827               	movf	my_flash_system_write@flashAddr,w
 10761  16E4  0023               	movlb	3	; select bank3
 10762  16E5  0091               	movwf	17	;volatile
 10763                           
 10764                           ;sysData.c: 68: PMADRH = ((flashAddr & 0xFF00) >> 8);
 10765  16E6  0020               	movlb	0	; select bank0
 10766  16E7  0828               	movf	my_flash_system_write@flashAddr+1,w
 10767  16E8  0023               	movlb	3	; select bank3
 10768  16E9  0092               	movwf	18	;volatile
 10769                           
 10770                           ;sysData.c: 71: if(loc<len){
 10771  16EA  0874               	movf	my_flash_system_write@len+1,w
 10772  16EB  0020               	movlb	0	; select bank0
 10773  16EC  0226               	subwf	my_flash_system_write@loc+1,w
 10774  16ED  1D03               	skipz
 10775  16EE  2EF1               	goto	u1545
 10776  16EF  0873               	movf	my_flash_system_write@len,w
 10777  16F0  0225               	subwf	my_flash_system_write@loc,w
 10778  16F1                     u1545:	
 10779  16F1  1803               	skipnc
 10780  16F2  2EFD               	goto	l2983
 10781                           
 10782                           ;sysData.c: 72: PMDATL = buf[loc];
 10783  16F3  0825               	movf	my_flash_system_write@loc,w
 10784  16F4  0771               	addwf	my_flash_system_write@buf,w
 10785  16F5  0086               	movwf	6
 10786  16F6  0826               	movf	my_flash_system_write@loc+1,w
 10787  16F7  3D72               	addwfc	my_flash_system_write@buf+1,w
 10788  16F8  0087               	movwf	7
 10789  16F9  0801               	movf	1,w
 10790  16FA  0023               	movlb	3	; select bank3
 10791  16FB  0093               	movwf	19	;volatile
 10792                           
 10793                           ;sysData.c: 73: }else{
 10794  16FC  2EFF               	goto	l2985
 10795  16FD                     l2983:	
 10796                           
 10797                           ;sysData.c: 74: PMDATL = 0x00;
 10798  16FD  0023               	movlb	3	; select bank3
 10799  16FE  0193               	clrf	19	;volatile
 10800  16FF                     l2985:	
 10801                           
 10802                           ;sysData.c: 75: }
 10803                           ;sysData.c: 76: loc++;
 10804  16FF  0020               	movlb	0	; select bank0
 10805  1700  0AA5               	incf	my_flash_system_write@loc,f
 10806  1701  1903               	skipnz
 10807  1702  0AA6               	incf	my_flash_system_write@loc+1,f
 10808                           
 10809                           ;sysData.c: 77: PMDATH = 0x00;
 10810  1703  0023               	movlb	3	; select bank3
 10811  1704  0194               	clrf	20	;volatile
 10812                           
 10813                           ;sysData.c: 78: if((i%32) == 32 -1 ){
 10814  1705  301F               	movlw	31
 10815  1706  0020               	movlb	0	; select bank0
 10816  1707  0529               	andwf	my_flash_system_write@i,w
 10817  1708  00F5               	movwf	??_my_flash_system_write
 10818  1709  3A1F               	xorlw	31
 10819  170A  1D03               	btfss	3,2
 10820  170B  2F0E               	goto	l2993
 10821                           
 10822                           ;sysData.c: 79: PMCON1bits.LWLO = 0;
 10823  170C  0023               	movlb	3	; select bank3
 10824  170D  1295               	bcf	21,5	;volatile
 10825  170E                     l2993:	
 10826                           
 10827                           ;sysData.c: 80: }
 10828                           ;sysData.c: 82: PMCON2 = 0x55;
 10829  170E  3055               	movlw	85
 10830  170F  0023               	movlb	3	; select bank3
 10831  1710  0096               	movwf	22	;volsfr
 10832                           
 10833                           ;sysData.c: 83: PMCON2 = 0xAA;
 10834  1711  30AA               	movlw	170
 10835  1712  0096               	movwf	22	;volsfr
 10836                           
 10837                           ;sysData.c: 84: PMCON1bits.WR = 1;
 10838  1713  1495               	bsf	21,1	;volatile
 10839                           
 10840                           ;sysData.c: 85: __nop();
 10841  1714  0000               	nop
 10842                           
 10843                           ;sysData.c: 86: __nop();
 10844  1715  0000               	nop
 10845                           
 10846                           ;sysData.c: 87: flashAddr++;
 10847  1716  0020               	movlb	0	; select bank0
 10848  1717  0AA7               	incf	my_flash_system_write@flashAddr,f
 10849  1718  1903               	skipnz
 10850  1719  0AA8               	incf	my_flash_system_write@flashAddr+1,f
 10851  171A  0AA9               	incf	my_flash_system_write@i,f
 10852  171B  1903               	skipnz
 10853  171C  0AAA               	incf	my_flash_system_write@i+1,f
 10854  171D  3000               	movlw	0
 10855  171E  022A               	subwf	my_flash_system_write@i+1,w
 10856  171F  3020               	movlw	32
 10857  1720  1903               	skipnz
 10858  1721  0229               	subwf	my_flash_system_write@i,w
 10859  1722  1C03               	skipc
 10860  1723  2EE3               	goto	l2979
 10861                           
 10862                           ;sysData.c: 88: }
 10863                           ;sysData.c: 89: PMCON1bits.WREN = 0;
 10864  1724  0023               	movlb	3	; select bank3
 10865  1725  1115               	bcf	21,2	;volatile
 10866  1726  0020               	movlb	0	; select bank0
 10867  1727  0AA0               	incf	my_flash_system_write@j,f
 10868  1728  1903               	skipnz
 10869  1729  0AA1               	incf	my_flash_system_write@j+1,f
 10870  172A  2ED4               	goto	l3007
 10871  172B                     l3009:	
 10872                           
 10873                           ;sysData.c: 90: }
 10874                           ;sysData.c: 91: INTCONbits.GIE = GIEBitValue;
 10875  172B  0C22               	rrf	my_flash_system_write@GIEBitValue,w
 10876  172C  2FCF               	ljmp	PL42	;call to abstracted procedure
 10877  172D                     __end_of_my_flash_system_write:	
 10878  172D                     __ptext29:	
 10879 ;; *************** function _crc_sum *****************
 10880 ;; Defined at:
 10881 ;;		line 116 in file "src/depend/crc16.c"
 10882 ;; Parameters:    Size  Location     Type
 10883 ;;  buf             2    1[COMMON] PTR unsigned char 
 10884 ;;		 -> modbusBuf(64), sysData(132), 
 10885 ;;  len             2    3[COMMON] unsigned int 
 10886 ;; Auto vars:     Size  Location     Type
 10887 ;;  crc             2    9[COMMON] unsigned int 
 10888 ;;  i               2    7[COMMON] unsigned int 
 10889 ;;  j               2    5[COMMON] unsigned int 
 10890 ;; Return value:  Size  Location     Type
 10891 ;;                  2    1[COMMON] unsigned int 
 10892 ;; Registers used:
 10893 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10894 ;; Tracked objects:
 10895 ;;		On entry : 1F/0
 10896 ;;		On exit  : 1F/0
 10897 ;;		Unchanged: 1F/0
 10898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10899 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10900 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10902 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10903 ;;Total ram usage:       10 bytes
 10904 ;; Hardware stack levels used:    1
 10905 ;; Hardware stack levels required when called:    1
 10906 ;; This function calls:
 10907 ;;		Nothing
 10908 ;; This function is called by:
 10909 ;;		_crc_verify
 10910 ;;		_crc_append
 10911 ;; This function uses a non-reentrant model
 10912 ;;
 10913                           
 10914                           
 10915                           ;psect for function _crc_sum
 10916  172D                     _crc_sum:	
 10917                           
 10918                           ;crc16.c: 118: uint16_t crc=0xFFFF;
 10919                           
 10920                           ;incstack = 0
 10921                           ; Regs used in _crc_sum: [wreg+fsr1l+fsr1h+status,2+status,0]
 10922  172D  30FF               	movlw	255
 10923  172E  00F9               	movwf	crc_sum@crc
 10924  172F  00FA               	movwf	crc_sum@crc+1
 10925                           
 10926                           ;crc16.c: 119: uint16_t i, j;
 10927                           ;crc16.c: 120: for ( j=0; j<len;j++){
 10928  1730  01F5               	clrf	crc_sum@j
 10929  1731  01F6               	clrf	crc_sum@j+1
 10930  1732                     l4265:	
 10931  1732  0874               	movf	crc_sum@len+1,w
 10932  1733  0276               	subwf	crc_sum@j+1,w
 10933  1734  1D03               	skipz
 10934  1735  2F38               	goto	u2995
 10935  1736  0873               	movf	crc_sum@len,w
 10936  1737  0275               	subwf	crc_sum@j,w
 10937  1738                     u2995:	
 10938  1738  1803               	btfsc	3,0
 10939  1739  2F5E               	goto	l4267
 10940                           
 10941                           ;crc16.c: 121: crc=crc ^*buf++;
 10942  173A  0871               	movf	crc_sum@buf,w
 10943  173B  0086               	movwf	6
 10944  173C  0872               	movf	crc_sum@buf+1,w
 10945  173D  0087               	movwf	7
 10946  173E  0801               	movf	1,w
 10947  173F  06F9               	xorwf	crc_sum@crc,f
 10948  1740  0AF1               	incf	crc_sum@buf,f
 10949  1741  1903               	skipnz
 10950  1742  0AF2               	incf	crc_sum@buf+1,f
 10951                           
 10952                           ;crc16.c: 122: for ( i=0; i<8; i++){
 10953  1743  01F7               	clrf	crc_sum@i
 10954  1744  01F8               	clrf	crc_sum@i+1
 10955  1745                     l1133:	
 10956                           
 10957                           ;crc16.c: 124: if(crc&0x0001){
 10958  1745  1C79               	btfss	crc_sum@crc,0
 10959  1746  2F4E               	goto	l4259
 10960  1747  3001               	movlw	1
 10961                           
 10962                           ;crc16.c: 125: crc=crc>>1;
 10963  1748  36FA               	lsrf	crc_sum@crc+1,f
 10964  1749  0CF9               	rrf	crc_sum@crc,f
 10965                           
 10966                           ;crc16.c: 126: crc=crc^ 0xa001;
 10967  174A  06F9               	xorwf	crc_sum@crc,f
 10968  174B  30A0               	movlw	160
 10969  174C  06FA               	xorwf	crc_sum@crc+1,f
 10970                           
 10971                           ;crc16.c: 127: }else{
 10972  174D  2F50               	goto	l1136
 10973  174E                     l4259:	
 10974                           
 10975                           ;crc16.c: 128: crc=crc>>1;
 10976  174E  36FA               	lsrf	crc_sum@crc+1,f
 10977  174F  0CF9               	rrf	crc_sum@crc,f
 10978  1750                     l1136:	
 10979  1750  0AF7               	incf	crc_sum@i,f
 10980  1751  1903               	skipnz
 10981  1752  0AF8               	incf	crc_sum@i+1,f
 10982  1753  3000               	movlw	0
 10983  1754  0278               	subwf	crc_sum@i+1,w
 10984  1755  3008               	movlw	8
 10985  1756  1903               	skipnz
 10986  1757  0277               	subwf	crc_sum@i,w
 10987  1758  1C03               	skipc
 10988  1759  2F45               	goto	l1133
 10989  175A  0AF5               	incf	crc_sum@j,f
 10990  175B  1903               	skipnz
 10991  175C  0AF6               	incf	crc_sum@j+1,f
 10992  175D  2F32               	goto	l4265
 10993  175E                     l4267:	
 10994                           
 10995                           ;crc16.c: 129: }
 10996                           ;crc16.c: 130: }
 10997                           ;crc16.c: 132: }
 10998                           ;crc16.c: 133: return ( crc);
 10999  175E  087A               	movf	crc_sum@crc+1,w
 11000  175F  00F2               	movwf	?_crc_sum+1
 11001  1760  0879               	movf	crc_sum@crc,w
 11002  1761  00F1               	movwf	?_crc_sum
 11003  1762  0008               	return
 11004  1763                     __end_of_crc_sum:	
 11005  1763                     __ptext22:	
 11006 ;; *************** function _modbus_response_illgeal_function *****************
 11007 ;; Defined at:
 11008 ;;		line 8 in file "src/api/modbus.c"
 11009 ;; Parameters:    Size  Location     Type
 11010 ;;  buf             1    wreg     PTR unsigned char 
 11011 ;;		 -> modbusBuf(64), 
 11012 ;;  errcode         1   11[BANK0 ] unsigned char 
 11013 ;; Auto vars:     Size  Location     Type
 11014 ;;  buf             1   12[BANK0 ] PTR unsigned char 
 11015 ;;		 -> modbusBuf(64), 
 11016 ;;  pmdbs           1   13[BANK0 ] PTR struct .
 11017 ;;		 -> modbusBuf(64), 
 11018 ;; Return value:  Size  Location     Type
 11019 ;;                  1    wreg      void 
 11020 ;; Registers used:
 11021 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11022 ;; Tracked objects:
 11023 ;;		On entry : 1F/0
 11024 ;;		On exit  : 1F/0
 11025 ;;		Unchanged: 0/0
 11026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11027 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11028 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11030 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11031 ;;Total ram usage:        3 bytes
 11032 ;; Hardware stack levels used:    1
 11033 ;; Hardware stack levels required when called:    3
 11034 ;; This function calls:
 11035 ;;		_crc_append
 11036 ;;		_uart_send_len
 11037 ;; This function is called by:
 11038 ;;		_modbus_response_process
 11039 ;; This function uses a non-reentrant model
 11040 ;;
 11041                           
 11042                           
 11043                           ;psect for function _modbus_response_illgeal_function
 11044  1763                     _modbus_response_illgeal_function:	
 11045                           
 11046                           ;incstack = 0
 11047                           ; Regs used in _modbus_response_illgeal_function: [wreg-fsr1h+status,2+status,0+pclath+c
      +                          stack]
 11048                           ;modbus_response_illgeal_function@buf stored from wreg
 11049  1763  00AC               	movwf	modbus_response_illgeal_function@buf
 11050                           
 11051                           ;modbus.c: 10: st_modbusErrRespStructDef* pmdbs=(st_modbusErrRespStructDef*)buf;
 11052  1764  00AD               	movwf	modbus_response_illgeal_function@pmdbs
 11053                           
 11054                           ;modbus.c: 11: if(pmdbs->addr==0x00)return;
 11055  1765  0086               	movwf	6
 11056  1766  3002               	movlw	2	; select bank4/5
 11057  1767  0087               	movwf	7
 11058  1768  0801               	movf	1,w
 11059  1769  1903               	btfsc	3,2
 11060  176A  0008               	return
 11061                           
 11062                           ;modbus.c: 12: pmdbs->addr=sysData.id;
 11063  176B  082D               	movf	modbus_response_illgeal_function@pmdbs,w
 11064  176C  0086               	movwf	6
 11065  176D  2798  3194         	fcall	PL18	;call to abstracted procedure
 11066                           
 11067                           ;modbus.c: 13: if(errcode){
 11068  176F  082B               	movf	modbus_response_illgeal_function@errcode,w
 11069  1770  1903               	btfsc	3,2
 11070  1771  2F78               	goto	l830
 11071                           
 11072                           ;modbus.c: 14: pmdbs->func+=0x80;
 11073  1772  0A2D               	incf	modbus_response_illgeal_function@pmdbs,w
 11074  1773  0086               	movwf	6
 11075  1774  3002               	movlw	2	; select bank4/5
 11076  1775  0087               	movwf	7
 11077  1776  3080               	movlw	128
 11078  1777  0781               	addwf	1,f
 11079  1778                     l830:	
 11080                           
 11081                           ;modbus.c: 15: }
 11082                           ;modbus.c: 16: pmdbs->errcord=errcode;
 11083  1778  082D               	movf	modbus_response_illgeal_function@pmdbs,w
 11084  1779  3E02               	addlw	2
 11085  177A  0086               	movwf	6
 11086  177B  3002               	movlw	2	; select bank4/5
 11087  177C  0087               	movwf	7
 11088  177D  082B               	movf	modbus_response_illgeal_function@errcode,w
 11089  177E  0081               	movwf	1
 11090                           
 11091                           ;modbus.c: 17: crc_append(buf,3);
 11092  177F  082C               	movf	modbus_response_illgeal_function@buf,w
 11093  1780  00A0               	movwf	crc_append@message
 11094  1781  3002               	movlw	2
 11095  1782  00A1               	movwf	crc_append@message+1
 11096  1783  3003               	movlw	3
 11097  1784  00A2               	movwf	crc_append@n
 11098  1785  01A3               	clrf	crc_append@n+1
 11099  1786  2653               	fcall	_crc_append
 11100                           
 11101                           ;modbus.c: 18: uart_send_len(buf,5);
 11102  1787  3005               	movlw	5
 11103  1788  00F1               	movwf	uart_send_len@len
 11104  1789  082C               	movf	modbus_response_illgeal_function@buf,w
 11105  178A  318E  2EB0         	ljmp	_uart_send_len
 11106  178C                     __end_of_modbus_response_illgeal_function:	
 11107  178C                     PL6:	
 11108  178C  35AD               	lslf	??_modbus_response_write_single_register,f
 11109  178D  0DAE               	rlf	??_modbus_response_write_single_register+1,f
 11110  178E  00AF               	movwf	??_modbus_response_write_single_register+2
 11111  178F  3023               	movlw	35
 11112  1790  00B0               	movwf	??_modbus_response_write_single_register+3
 11113  1791  082D               	movf	??_modbus_response_write_single_register,w
 11114  1792  072F               	addwf	??_modbus_response_write_single_register+2,w
 11115  1793  0086               	movwf	6
 11116  1794  082E               	movf	??_modbus_response_write_single_register+1,w
 11117  1795  3D30               	addwfc	??_modbus_response_write_single_register+3,w
 11118  1796  0087               	movwf	7
 11119  1797  0008               	return
 11120  1798                     __end_ofPL6:	
 11121  1798                     PL18:	
 11122  1798  305C               	movlw	92
 11123  1799  0084               	movwf	4
 11124  179A  3023               	movlw	35
 11125  179B  0085               	movwf	5
 11126  179C  3102               	addfsr 0,2
 11127  179D  0800               	movf	0,w
 11128  179E  0081               	movwf	1
 11129  179F  0008               	return
 11130  17A0                     __end_ofPL18:	
 11131  17A0                     PL20:	
 11132  17A0  305C               	movlw	92
 11133  17A1  0086               	movwf	6
 11134  17A2  3023               	movlw	35
 11135  17A3  0087               	movwf	7
 11136  17A4  3142               	addfsr 1,2
 11137  17A5  0008               	return
 11138  17A6                     __end_ofPL20:	
 11139  17A6                     PL22:	
 11140  17A6  0021               	movlb	1	; select bank1
 11141  17A7  00AD               	movwf	(_PidKp^(0+128)+1)
 11142  17A8  305C               	movlw	92
 11143  17A9  01AE               	clrf	(_PidKp^(0+128)+2)
 11144  17AA  01AF               	clrf	(_PidKp^(0+128)+3)
 11145  17AB  0086               	movwf	6
 11146  17AC  3023               	movlw	35
 11147  17AD  0087               	movwf	7
 11148  17AE  0008               	return
 11149  17AF                     __end_ofPL22:	
 11150  17AF                     PL26:	
 11151  17AF  0084               	movwf	4
 11152  17B0  3002               	movlw	2	; select bank4/5
 11153  17B1  0085               	movwf	5
 11154  17B2  0800               	movf	0,w
 11155  17B3  0601               	xorwf	1,w
 11156  17B4  0008               	return
 11157  17B5                     __end_ofPL26:	
 11158  17B5                     PL30:	
 11159  17B5  305C               	movlw	92
 11160  17B6  0086               	movwf	6
 11161  17B7  3023               	movlw	35
 11162  17B8  0087               	movwf	7
 11163  17B9  3144               	addfsr 1,4
 11164  17BA  0008               	return
 11165  17BB                     __end_ofPL30:	
 11166  17BB                     PL32:	
 11167  17BB  3F40               	moviw [0]fsr1
 11168  17BC  0020               	movlb	0	; select bank0
 11169  17BD  00AB               	movwf	??_sys_data_save
 11170  17BE  3F41               	moviw [1]fsr1
 11171  17BF  00AC               	movwf	??_sys_data_save+1
 11172  17C0  082B               	movf	??_sys_data_save,w
 11173  17C1  0021               	movlb	1	; select bank1
 11174  17C2  0008               	return
 11175  17C3                     __end_ofPL32:	
 11176  17C3                     PL38:	
 11177  17C3  0836               	movf	modbus_response_write_single_register@pmdbs,w
 11178  17C4  0086               	movwf	6
 11179  17C5  3002               	movlw	2	; select bank4/5
 11180  17C6  0087               	movwf	7
 11181  17C7  0801               	movf	1,w
 11182  17C8  0008               	return
 11183  17C9                     __end_ofPL38:	
 11184  17C9                     PL40:	
 11185  17C9  305C               	movlw	92
 11186  17CA  0086               	movwf	6
 11187  17CB  3023               	movlw	35
 11188  17CC  0087               	movwf	7
 11189  17CD  3148               	addfsr 1,8
 11190  17CE  0008               	return
 11191  17CF                     __end_ofPL40:	
 11192  17CF                     PL42:	
 11193  17CF  1C03               	skipc
 11194  17D0  138B               	bcf	11,7	;volatile
 11195  17D1  1803               	skipnc
 11196  17D2  178B               	bsf	11,7	;volatile
 11197  17D3  0008               	return
 11198  17D4                     __end_ofPL42:	
 11199  17D4                     PL44:	
 11200  17D4  305C               	movlw	92
 11201  17D5  0086               	movwf	6
 11202  17D6  3023               	movlw	35
 11203  17D7  0087               	movwf	7
 11204  17D8  3146               	addfsr 1,6
 11205  17D9  0008               	return
 11206  17DA                     __end_ofPL44:	
 11207  17DA                     PL48:	
 11208  17DA  0839               	movf	modbus_response_write_single_register@rbuf,w
 11209  17DB  3E04               	addlw	4
 11210  17DC  0086               	movwf	6
 11211  17DD  3002               	movlw	2	; select bank4/5
 11212  17DE  0087               	movwf	7
 11213  17DF  0801               	movf	1,w
 11214  17E0  0008               	return
 11215  17E1                     __end_ofPL48:	
 11216  17E1                     PL50:	
 11217  17E1  00A0               	movwf	crc_append@message
 11218  17E2  3002               	movlw	2
 11219  17E3  00A1               	movwf	crc_append@message+1
 11220  17E4  3006               	movlw	6
 11221  17E5  00A2               	movwf	crc_append@n
 11222  17E6  01A3               	clrf	crc_append@n+1
 11223  17E7  0008               	return
 11224  17E8                     __end_ofPL50:	
 11225  17E8                     PL54:	
 11226  17E8  0084               	movwf	4
 11227  17E9  3002               	movlw	2	; select bank4/5
 11228  17EA  0085               	movwf	5
 11229  17EB  0800               	movf	0,w
 11230  17EC  00FB               	movwf	??_modbus_response_write_mult_register
 11231  17ED  0830               	movf	modbus_response_write_mult_register@stb,w
 11232  17EE  0008               	return
 11233  17EF                     __end_ofPL54:	
 11234  17EF                     PL56:	
 11235  17EF  0086               	movwf	6
 11236  17F0  3002               	movlw	2	; select bank4/5
 11237  17F1  0087               	movwf	7
 11238  17F2  0801               	movf	1,w
 11239  17F3  0008               	return
 11240  17F4                     __end_ofPL56:	
 11241  17F4                     PL62:	
 11242  17F4  0086               	movwf	6
 11243  17F5  3023               	movlw	35
 11244  17F6  0087               	movwf	7
 11245  17F7  082D               	movf	??_modbus_response_write_single_register,w
 11246  17F8  0081               	movwf	1
 11247  17F9  0008               	return
 11248  17FA                     __end_ofPL62:	
 11249  17FA                     PL64:	
 11250  17FA  0800               	movf	0,w
 11251  17FB  3FC0               	movwi [0]fsr1
 11252  17FC  087B               	movf	??_modbus_response_write_mult_register,w
 11253  17FD  3FC1               	movwi [1]fsr1
 11254  17FE  0830               	movf	modbus_response_write_mult_register@stb,w
 11255  17FF  0008               	return
 11256  1800                     __end_ofPL64:	
 11257                           
 11258                           	psect	text23
 11259  121B                     __ptext23:	
 11260 ;; *************** function _modbus_response_command *****************
 11261 ;; Defined at:
 11262 ;;		line 179 in file "src/api/modbus.c"
 11263 ;; Parameters:    Size  Location     Type
 11264 ;;  rbuf            1    wreg     PTR unsigned char 
 11265 ;;		 -> modbusBuf(64), 
 11266 ;; Auto vars:     Size  Location     Type
 11267 ;;  rbuf            1   18[BANK0 ] PTR unsigned char 
 11268 ;;		 -> modbusBuf(64), 
 11269 ;;  tempData        2   19[BANK0 ] unsigned int 
 11270 ;;  startAddr       2   13[BANK0 ] unsigned int 
 11271 ;;  tmpAddr         2   11[BANK0 ] unsigned int 
 11272 ;;  len             1   17[BANK0 ] unsigned char 
 11273 ;;  pmdbs           1   16[BANK0 ] PTR struct .
 11274 ;;		 -> modbusBuf(64), 
 11275 ;;  i               1   15[BANK0 ] unsigned char 
 11276 ;; Return value:  Size  Location     Type
 11277 ;;                  1    wreg      void 
 11278 ;; Registers used:
 11279 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11280 ;; Tracked objects:
 11281 ;;		On entry : 1F/0
 11282 ;;		On exit  : 1F/0
 11283 ;;		Unchanged: 0/0
 11284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11286 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11287 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11288 ;;      Totals:         1      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11289 ;;Total ram usage:       11 bytes
 11290 ;; Hardware stack levels used:    1
 11291 ;; Hardware stack levels required when called:    3
 11292 ;; This function calls:
 11293 ;;		_crc_append
 11294 ;;		_getRegisterVal
 11295 ;;		_uart_send_len
 11296 ;; This function is called by:
 11297 ;;		_modbus_response_process
 11298 ;; This function uses a non-reentrant model
 11299 ;;
 11300                           
 11301                           
 11302                           ;psect for function _modbus_response_command
 11303  121B                     _modbus_response_command:	
 11304                           
 11305                           ;incstack = 0
 11306                           ; Regs used in _modbus_response_command: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11307                           ;modbus_response_command@rbuf stored from wreg
 11308  121B  00B2               	movwf	modbus_response_command@rbuf
 11309                           
 11310                           ;modbus.c: 182: uint16_t tempData,tmpAddr;
 11311                           ;modbus.c: 183: uint8_t len=0;
 11312  121C  01B1               	clrf	modbus_response_command@len
 11313                           
 11314                           ;modbus.c: 184: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)rbuf;
 11315  121D  00B0               	movwf	modbus_response_command@pmdbs
 11316                           
 11317                           ;modbus.c: 185: if(pmdbs->addr!=sysData.id || pmdbs->addr==0)return;
 11318  121E  3197  27A0  3192   	fcall	PL20	;call to abstracted procedure
 11319  1221  0830               	movf	modbus_response_command@pmdbs,w
 11320  1222  3197  27AF  3192   	fcall	PL26	;call to abstracted procedure
 11321  1225  1D03               	skipz
 11322  1226  0008               	return
 11323  1227  0830               	movf	modbus_response_command@pmdbs,w
 11324  1228  0086               	movwf	6
 11325  1229  3002               	movlw	2	; select bank4/5
 11326  122A  0087               	movwf	7
 11327  122B  0801               	movf	1,w
 11328  122C  1903               	btfsc	3,2
 11329  122D  0008               	return
 11330                           
 11331                           ;modbus.c: 186: startAddr=pmdbs->addr_hi;
 11332  122E  0830               	movf	modbus_response_command@pmdbs,w
 11333  122F  3E02               	addlw	2
 11334  1230  0086               	movwf	6
 11335  1231  0801               	movf	1,w
 11336  1232  00AD               	movwf	modbus_response_command@startAddr
 11337  1233  01AE               	clrf	modbus_response_command@startAddr+1
 11338                           
 11339                           ;modbus.c: 187: startAddr<<=8;
 11340  1234  00AE               	movwf	modbus_response_command@startAddr+1
 11341  1235  01AD               	clrf	modbus_response_command@startAddr
 11342                           
 11343                           ;modbus.c: 188: startAddr |= pmdbs->addr_lo;
 11344  1236  0830               	movf	modbus_response_command@pmdbs,w
 11345  1237  3E03               	addlw	3
 11346  1238  0086               	movwf	6
 11347  1239  0801               	movf	1,w
 11348  123A  04AD               	iorwf	modbus_response_command@startAddr,f
 11349                           
 11350                           ;modbus.c: 189: tmpAddr=startAddr;
 11351  123B  082E               	movf	modbus_response_command@startAddr+1,w
 11352  123C  00AC               	movwf	modbus_response_command@tmpAddr+1
 11353  123D  082D               	movf	modbus_response_command@startAddr,w
 11354  123E  00AB               	movwf	modbus_response_command@tmpAddr
 11355                           
 11356                           ;modbus.c: 190: len = pmdbs->len_lo;
 11357  123F  0830               	movf	modbus_response_command@pmdbs,w
 11358  1240  0086               	movwf	6
 11359  1241  3F45               	moviw [5]fsr1
 11360  1242  00B1               	movwf	modbus_response_command@len
 11361  1243  3021               	movlw	33
 11362                           
 11363                           ;modbus.c: 191: len<<=1;
 11364  1244  35B1               	lslf	modbus_response_command@len,f
 11365                           
 11366                           ;modbus.c: 192: if(len>32)len=32;
 11367  1245  0231               	subwf	modbus_response_command@len,w
 11368  1246  1C03               	skipc
 11369  1247  2A4A               	goto	l4445
 11370  1248  3020               	movlw	32
 11371  1249  00B1               	movwf	modbus_response_command@len
 11372  124A                     l4445:	
 11373                           
 11374                           ;modbus.c: 193: for(i=0;i<len;i=i+2,tmpAddr++){
 11375  124A  01AF               	clrf	modbus_response_command@i
 11376  124B                     l4457:	
 11377  124B  0831               	movf	modbus_response_command@len,w
 11378  124C  022F               	subwf	modbus_response_command@i,w
 11379  124D  1803               	btfsc	3,0
 11380  124E  2A6E               	goto	l4459
 11381                           
 11382                           ;modbus.c: 194: getRegisterVal(tmpAddr,&tempData);
 11383  124F  082C               	movf	modbus_response_command@tmpAddr+1,w
 11384  1250  00F2               	movwf	getRegisterVal@addr+1
 11385  1251  082B               	movf	modbus_response_command@tmpAddr,w
 11386  1252  00F1               	movwf	getRegisterVal@addr
 11387  1253  3033               	movlw	(low (modbus_response_command@tempData| 0))& (0+255)
 11388  1254  00F3               	movwf	getRegisterVal@tempData
 11389  1255  2293  3192         	fcall	_getRegisterVal
 11390                           
 11391                           ;modbus.c: 195: rbuf[i+3] = tempData >> 8;
 11392  1257  0020               	movlb	0	; select bank0
 11393  1258  082F               	movf	modbus_response_command@i,w
 11394  1259  0732               	addwf	modbus_response_command@rbuf,w
 11395  125A  00FB               	movwf	??_modbus_response_command
 11396  125B  3E03               	addlw	3
 11397  125C  0086               	movwf	6
 11398  125D  3002               	movlw	2	; select bank4/5
 11399  125E  0087               	movwf	7
 11400  125F  0834               	movf	modbus_response_command@tempData+1,w
 11401  1260  0081               	movwf	1
 11402                           
 11403                           ;modbus.c: 196: rbuf[i+4] = tempData & 0xff;
 11404  1261  082F               	movf	modbus_response_command@i,w
 11405  1262  0732               	addwf	modbus_response_command@rbuf,w
 11406  1263  00FB               	movwf	??_modbus_response_command
 11407  1264  3E04               	addlw	4
 11408  1265  0086               	movwf	6
 11409  1266  0833               	movf	modbus_response_command@tempData,w
 11410  1267  0081               	movwf	1
 11411  1268  0AAF               	incf	modbus_response_command@i,f
 11412  1269  0AAF               	incf	modbus_response_command@i,f
 11413  126A  0AAB               	incf	modbus_response_command@tmpAddr,f
 11414  126B  1903               	skipnz
 11415  126C  0AAC               	incf	modbus_response_command@tmpAddr+1,f
 11416  126D  2A4B               	goto	l4457
 11417  126E                     l4459:	
 11418                           
 11419                           ;modbus.c: 198: }
 11420                           ;modbus.c: 199: rbuf[0] = sysData.id;
 11421  126E  0832               	movf	modbus_response_command@rbuf,w
 11422  126F  0086               	movwf	6
 11423  1270  3002               	movlw	2	; select bank4/5
 11424  1271  0087               	movwf	7
 11425  1272  3197  2798  3192   	fcall	PL18	;call to abstracted procedure
 11426                           
 11427                           ;modbus.c: 200: rbuf[1] = 3;
 11428  1275  0A32               	incf	modbus_response_command@rbuf,w
 11429  1276  0086               	movwf	6
 11430  1277  3002               	movlw	2	; select bank4/5
 11431  1278  0087               	movwf	7
 11432  1279  3003               	movlw	3
 11433  127A  0081               	movwf	1
 11434                           
 11435                           ;modbus.c: 201: rbuf[2] = len;
 11436  127B  0832               	movf	modbus_response_command@rbuf,w
 11437  127C  3E02               	addlw	2
 11438  127D  0086               	movwf	6
 11439  127E  0831               	movf	modbus_response_command@len,w
 11440  127F  0081               	movwf	1
 11441                           
 11442                           ;modbus.c: 202: len += 3;
 11443  1280  3003               	movlw	3
 11444  1281  07B1               	addwf	modbus_response_command@len,f
 11445                           
 11446                           ;modbus.c: 203: crc_append(rbuf,len);
 11447  1282  0832               	movf	modbus_response_command@rbuf,w
 11448  1283  00A0               	movwf	crc_append@message
 11449  1284  3002               	movlw	2
 11450  1285  00A1               	movwf	crc_append@message+1
 11451  1286  0831               	movf	modbus_response_command@len,w
 11452  1287  00A2               	movwf	crc_append@n
 11453  1288  01A3               	clrf	crc_append@n+1
 11454  1289  3196  2653  3192   	fcall	_crc_append
 11455                           
 11456                           ;modbus.c: 204: len += 2;
 11457  128C  0AB1               	incf	modbus_response_command@len,f
 11458  128D  0AB1               	incf	modbus_response_command@len,f
 11459                           
 11460                           ;modbus.c: 205: uart_send_len(rbuf,len);
 11461  128E  0831               	movf	modbus_response_command@len,w
 11462  128F  00F1               	movwf	uart_send_len@len
 11463  1290  0832               	movf	modbus_response_command@rbuf,w
 11464  1291  318E  2EB0         	ljmp	_uart_send_len
 11465  1293                     __end_of_modbus_response_command:	
 11466  1293                     __ptext25:	
 11467 ;; *************** function _getRegisterVal *****************
 11468 ;; Defined at:
 11469 ;;		line 80 in file "src/api/modbus.c"
 11470 ;; Parameters:    Size  Location     Type
 11471 ;;  addr            2    1[COMMON] unsigned int 
 11472 ;;  tempData        1    3[COMMON] PTR unsigned int 
 11473 ;;		 -> modbus_response_command@tempData(2), 
 11474 ;; Auto vars:     Size  Location     Type
 11475 ;;  t16             2    0        unsigned int 
 11476 ;;  tempAddr        1   10[COMMON] unsigned char 
 11477 ;; Return value:  Size  Location     Type
 11478 ;;                  2    1[COMMON] unsigned int 
 11479 ;; Registers used:
 11480 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 11481 ;; Tracked objects:
 11482 ;;		On entry : 1F/0
 11483 ;;		On exit  : 1E/0
 11484 ;;		Unchanged: 0/0
 11485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11486 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11487 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11488 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11489 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11490 ;;Total ram usage:       10 bytes
 11491 ;; Hardware stack levels used:    1
 11492 ;; Hardware stack levels required when called:    1
 11493 ;; This function calls:
 11494 ;;		Nothing
 11495 ;; This function is called by:
 11496 ;;		_modbus_response_command
 11497 ;; This function uses a non-reentrant model
 11498 ;;
 11499                           
 11500                           
 11501                           ;psect for function _getRegisterVal
 11502  1293                     _getRegisterVal:	
 11503                           
 11504                           ;modbus.c: 83: uint8_t tempAddr;
 11505                           ;modbus.c: 85: tempAddr = addr & 0xff;
 11506                           
 11507                           ;incstack = 0
 11508                           ; Regs used in _getRegisterVal: [wreg-fsr1h+status,2+status,0]
 11509  1293  0871               	movf	getRegisterVal@addr,w
 11510  1294  00FA               	movwf	getRegisterVal@tempAddr
 11511                           
 11512                           ;modbus.c: 86: switch(tempAddr){
 11513  1295  2B23               	goto	l3091
 11514  1296                     l3057:	
 11515  1296  0873               	movf	getRegisterVal@tempData,w
 11516  1297  0086               	movwf	6
 11517  1298  3040               	movlw	64
 11518  1299  0187               	clrf	7
 11519  129A  3FC0               	movwi [0]fsr1
 11520  129B  3000               	movlw	0
 11521  129C  3FC1               	movwi [1]fsr1
 11522  129D  2B30               	goto	l3093
 11523  129E                     l3059:	
 11524  129E  3197  27A0  3192   	fcall	PL20	;call to abstracted procedure
 11525  12A1  0801               	movf	1,w
 11526  12A2  00F4               	movwf	??_getRegisterVal
 11527  12A3  01F5               	clrf	??_getRegisterVal+1
 11528  12A4  0873               	movf	getRegisterVal@tempData,w
 11529  12A5  0086               	movwf	6
 11530  12A6  0187               	clrf	7
 11531  12A7  0874               	movf	??_getRegisterVal,w
 11532  12A8  3FC0               	movwi [0]fsr1
 11533  12A9  0875               	movf	??_getRegisterVal+1,w
 11534  12AA  3FC1               	movwi [1]fsr1
 11535  12AB  2B30               	goto	l3093
 11536  12AC                     l3061:	
 11537  12AC  305C               	movlw	92
 11538  12AD  0084               	movwf	4
 11539  12AE  3023               	movlw	35
 11540  12AF  0085               	movwf	5
 11541  12B0  3101               	addfsr 0,1
 11542  12B1  0800               	movf	0,w
 11543  12B2  00F4               	movwf	??_getRegisterVal
 11544  12B3  305C               	movlw	92
 11545  12B4  0084               	movwf	4
 11546  12B5  3023               	movlw	35
 11547  12B6  0085               	movwf	5
 11548  12B7  0873               	movf	getRegisterVal@tempData,w
 11549  12B8  0086               	movwf	6
 11550  12B9  0187               	clrf	7
 11551  12BA  0800               	movf	0,w
 11552  12BB  3FC0               	movwi [0]fsr1
 11553  12BC  0874               	movf	??_getRegisterVal,w
 11554  12BD  3FC1               	movwi [1]fsr1
 11555  12BE  2B30               	goto	l3093
 11556  12BF                     l3063:	
 11557  12BF  3197  27B5  3192   	fcall	PL30	;call to abstracted procedure
 11558  12C2  2358  3192         	fcall	PL12	;call to abstracted procedure
 11559  12C4  2B30               	goto	l3093
 11560  12C5                     l3065:	
 11561  12C5  3197  27D4  3192   	fcall	PL44	;call to abstracted procedure
 11562  12C8  2358  3192         	fcall	PL12	;call to abstracted procedure
 11563  12CA  2B30               	goto	l3093
 11564  12CB                     l3067:	
 11565  12CB  3197  27C9  3192   	fcall	PL40	;call to abstracted procedure
 11566  12CE  2358  3192         	fcall	PL12	;call to abstracted procedure
 11567  12D0  2B30               	goto	l3093
 11568  12D1                     l3069:	
 11569  12D1  0873               	movf	getRegisterVal@tempData,w
 11570  12D2  0086               	movwf	6
 11571  12D3  0187               	clrf	7
 11572  12D4  0854               	movf	_rtAdcValueRsLo,w
 11573  12D5  3FC0               	movwi [0]fsr1
 11574  12D6  0855               	movf	_rtAdcValueRsLo+1,w
 11575  12D7  3FC1               	movwi [1]fsr1
 11576  12D8  2B30               	goto	l3093
 11577  12D9                     l3071:	
 11578  12D9  0873               	movf	getRegisterVal@tempData,w
 11579  12DA  0086               	movwf	6
 11580  12DB  0187               	clrf	7
 11581  12DC  0852               	movf	_rtAdcValueRsHi,w
 11582  12DD  3FC0               	movwi [0]fsr1
 11583  12DE  0853               	movf	_rtAdcValueRsHi+1,w
 11584  12DF  3FC1               	movwi [1]fsr1
 11585  12E0  2B30               	goto	l3093
 11586  12E1                     l3073:	
 11587  12E1  0873               	movf	getRegisterVal@tempData,w
 11588  12E2  0086               	movwf	6
 11589  12E3  0187               	clrf	7
 11590  12E4  0850               	movf	_rtAdcValueRcLo,w
 11591  12E5  3FC0               	movwi [0]fsr1
 11592  12E6  0851               	movf	_rtAdcValueRcLo+1,w
 11593  12E7  3FC1               	movwi [1]fsr1
 11594  12E8  2B30               	goto	l3093
 11595  12E9                     l3075:	
 11596  12E9  0873               	movf	getRegisterVal@tempData,w
 11597  12EA  0086               	movwf	6
 11598  12EB  0187               	clrf	7
 11599  12EC  084E               	movf	_rtAdcValueRcHi,w
 11600  12ED  3FC0               	movwi [0]fsr1
 11601  12EE  084F               	movf	_rtAdcValueRcHi+1,w
 11602  12EF  3FC1               	movwi [1]fsr1
 11603  12F0  2B30               	goto	l3093
 11604  12F1                     l3077:	
 11605  12F1  0873               	movf	getRegisterVal@tempData,w
 11606  12F2  0086               	movwf	6
 11607  12F3  0187               	clrf	7
 11608  12F4  0021               	movlb	1	; select bank1
 11609  12F5  0860               	movf	_resRc^(0+128),w
 11610  12F6  3FC0               	movwi [0]fsr1
 11611  12F7  0861               	movf	(_resRc+1)^(0+128),w
 11612  12F8  3FC1               	movwi [1]fsr1
 11613  12F9  2B30               	goto	l3093
 11614  12FA                     l3079:	
 11615  12FA  0873               	movf	getRegisterVal@tempData,w
 11616  12FB  0086               	movwf	6
 11617  12FC  0187               	clrf	7
 11618  12FD  0021               	movlb	1	; select bank1
 11619  12FE  0864               	movf	_resRs^(0+128),w
 11620  12FF  3FC0               	movwi [0]fsr1
 11621  1300  0865               	movf	(_resRs+1)^(0+128),w
 11622  1301  3FC1               	movwi [1]fsr1
 11623  1302  2B30               	goto	l3093
 11624  1303                     l3081:	
 11625  1303  0873               	movf	getRegisterVal@tempData,w
 11626  1304  0086               	movwf	6
 11627  1305  0187               	clrf	7
 11628  1306  0856               	movf	_rtAdcValueVoFb,w
 11629  1307  3FC0               	movwi [0]fsr1
 11630  1308  0857               	movf	_rtAdcValueVoFb+1,w
 11631  1309  3FC1               	movwi [1]fsr1
 11632  130A  2B30               	goto	l3093
 11633  130B                     l3083:	
 11634  130B  0873               	movf	getRegisterVal@tempData,w
 11635  130C  0086               	movwf	6
 11636  130D  0187               	clrf	7
 11637  130E  085A               	movf	_voExpectMv,w
 11638  130F  3FC0               	movwi [0]fsr1
 11639  1310  085B               	movf	_voExpectMv+1,w
 11640  1311  3FC1               	movwi [1]fsr1
 11641  1312  2B30               	goto	l3093
 11642  1313                     l3085:	
 11643  1313  0873               	movf	getRegisterVal@tempData,w
 11644  1314  0086               	movwf	6
 11645  1315  0187               	clrf	7
 11646  1316  0858               	movf	_voExpectAdcValue,w
 11647  1317  3FC0               	movwi [0]fsr1
 11648  1318  0859               	movf	_voExpectAdcValue+1,w
 11649  1319  3FC1               	movwi [1]fsr1
 11650  131A  2B30               	goto	l3093
 11651  131B                     l3087:	
 11652  131B  0873               	movf	getRegisterVal@tempData,w
 11653  131C  0086               	movwf	6
 11654  131D  30AA               	movlw	170
 11655  131E  0187               	clrf	7
 11656  131F  3FC0               	movwi [0]fsr1
 11657  1320  3055               	movlw	85
 11658  1321  3FC1               	movwi [1]fsr1
 11659  1322  2B30               	goto	l3093
 11660  1323                     l3091:	
 11661  1323  087A               	movf	getRegisterVal@tempAddr,w
 11662                           
 11663                           ; Switch size 1, requested type "space"
 11664                           ; Number of cases is 15, Range of values is 1 to 15
 11665                           ; switch strategies available:
 11666                           ; Name         Instructions Cycles
 11667                           ; direct_byte           39     9 (fixed)
 11668                           ; simple_byte           46    24 (average)
 11669                           ; jumptable            263     9 (fixed)
 11670                           ;	Chosen strategy is direct_byte
 11671  1324  3EFF               	addlw	-1
 11672  1325  1C03               	skipc
 11673  1326  2B1B               	goto	l3087
 11674  1327  0084               	movwf	4
 11675  1328  300F               	movlw	15
 11676  1329  0204               	subwf	4,w
 11677  132A  1803               	skipnc
 11678  132B  2B1B               	goto	l3087
 11679  132C  318F               	movlp	high S4923
 11680  132D  3504               	lslf	4,w
 11681  132E  3E6A               	addlw	low S4923
 11682  132F  0082               	movwf	2
 11683  1330                     l3093:	
 11684                           
 11685                           ;modbus.c: 104: if(tempAddr>0x0f && tempAddr < 0x10+30*2){
 11686  1330  3010               	movlw	16
 11687  1331  027A               	subwf	getRegisterVal@tempAddr,w
 11688  1332  1C03               	skipc
 11689  1333  0008               	return
 11690  1334  304C               	movlw	76
 11691  1335  027A               	subwf	getRegisterVal@tempAddr,w
 11692  1336  1803               	skipnc
 11693  1337  0008               	return
 11694                           
 11695                           ;modbus.c: 105: tempAddr-=0x10;
 11696  1338  3010               	movlw	16
 11697  1339  02FA               	subwf	getRegisterVal@tempAddr,f
 11698                           
 11699                           ;modbus.c: 106: if(tempAddr & 0x01){
 11700  133A  1C7A               	btfss	getRegisterVal@tempAddr,0
 11701  133B  2B40               	goto	l3103
 11702                           
 11703                           ;modbus.c: 107: *tempData=sysData.calibVoMV[tempAddr>>1];
 11704  133C  367A               	lsrf	getRegisterVal@tempAddr,w
 11705  133D  00F4               	movwf	??_getRegisterVal
 11706  133E  30A2               	movlw	162
 11707                           
 11708                           ;modbus.c: 108: }else{
 11709  133F  2B44               	ljmp	PL8	;call to abstracted procedure
 11710  1340                     l3103:	
 11711                           
 11712                           ;modbus.c: 109: *tempData=sysData.calibRsAdc[tempAddr>>1];
 11713  1340  367A               	lsrf	getRegisterVal@tempAddr,w
 11714  1341  00F4               	movwf	??_getRegisterVal
 11715  1342  3066               	movlw	102
 11716  1343  2B44               	ljmp	PL8	;call to abstracted procedure
 11717  1344                     __end_of_getRegisterVal:	
 11718  1344                     PL8:	
 11719  1344  01F5               	clrf	??_getRegisterVal+1
 11720  1345  35F4               	lslf	??_getRegisterVal,f
 11721  1346  0DF5               	rlf	??_getRegisterVal+1,f
 11722  1347  00F6               	movwf	??_getRegisterVal+2
 11723  1348  3023               	movlw	35
 11724  1349  00F7               	movwf	??_getRegisterVal+3
 11725  134A  0874               	movf	??_getRegisterVal,w
 11726  134B  0776               	addwf	??_getRegisterVal+2,w
 11727  134C  0086               	movwf	6
 11728  134D  0875               	movf	??_getRegisterVal+1,w
 11729  134E  3D77               	addwfc	??_getRegisterVal+3,w
 11730  134F  0087               	movwf	7
 11731  1350  0873               	movf	getRegisterVal@tempData,w
 11732  1351  0084               	movwf	4
 11733  1352  0185               	clrf	5
 11734  1353  3F40               	moviw [0]fsr1
 11735  1354  3F80               	movwi [0]fsr0
 11736  1355  3F41               	moviw [1]fsr1
 11737  1356  3F81               	movwi [1]fsr0
 11738  1357  0008               	return
 11739  1358                     __end_ofPL8:	
 11740  1358                     PL12:	
 11741  1358  0873               	movf	getRegisterVal@tempData,w
 11742  1359  0084               	movwf	4
 11743  135A  0185               	clrf	5
 11744  135B  3F40               	moviw [0]fsr1
 11745  135C  3F80               	movwi [0]fsr0
 11746  135D  3F41               	moviw [1]fsr1
 11747  135E  3F81               	movwi [1]fsr0
 11748  135F  0008               	return
 11749  1360                     __end_ofPL12:	
 11750                           
 11751                           	psect	swtext2
 11752  0F6A                     __pswtext2:	
 11753  0F6A                     S4923:	
 11754  0F6A  3192  2A96         	ljmp	l3057
 11755  0F6C  3192  2A9E         	ljmp	l3059
 11756  0F6E  3192  2AAC         	ljmp	l3061
 11757  0F70  3192  2ABF         	ljmp	l3063
 11758  0F72  3192  2AC5         	ljmp	l3065
 11759  0F74  3192  2ACB         	ljmp	l3067
 11760  0F76  3192  2AD1         	ljmp	l3069
 11761  0F78  3192  2AD9         	ljmp	l3071
 11762  0F7A  3192  2AE1         	ljmp	l3073
 11763  0F7C  3192  2AE9         	ljmp	l3075
 11764  0F7E  3192  2AF1         	ljmp	l3077
 11765  0F80  3192  2AFA         	ljmp	l3079
 11766  0F82  3193  2B03         	ljmp	l3081
 11767  0F84  3193  2B0B         	ljmp	l3083
 11768  0F86  3193  2B13         	ljmp	l3085
 11769                           
 11770                           	psect	text32
 11771  103E                     __ptext32:	
 11772 ;; *************** function _calc_temp_rc *****************
 11773 ;; Defined at:
 11774 ;;		line 202 in file "src/api/sample.c"
 11775 ;; Parameters:    Size  Location     Type
 11776 ;;		None
 11777 ;; Auto vars:     Size  Location     Type
 11778 ;;  y               4   17[BANK0 ] unsigned long 
 11779 ;;  x               4   13[BANK0 ] unsigned long 
 11780 ;; Return value:  Size  Location     Type
 11781 ;;                  4    5[BANK0 ] unsigned long 
 11782 ;; Registers used:
 11783 ;;		wreg, status,2, status,0, pclath, cstack
 11784 ;; Tracked objects:
 11785 ;;		On entry : 1F/0
 11786 ;;		On exit  : 1F/0
 11787 ;;		Unchanged: 0/0
 11788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11789 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11790 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11791 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11792 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11793 ;;Total ram usage:       16 bytes
 11794 ;; Hardware stack levels used:    1
 11795 ;; Hardware stack levels required when called:    2
 11796 ;; This function calls:
 11797 ;;		___lldiv
 11798 ;;		___lmul
 11799 ;; This function is called by:
 11800 ;;		_main
 11801 ;; This function uses a non-reentrant model
 11802 ;;
 11803                           
 11804                           
 11805                           ;psect for function _calc_temp_rc
 11806  103E                     _calc_temp_rc:	
 11807                           
 11808                           ;sample.c: 205: uint32_t x,y;
 11809                           ;sample.c: 206: x=300000UL;
 11810                           
 11811                           ;incstack = 0
 11812                           ; Regs used in _calc_temp_rc: [wreg+status,2+status,0+pclath+cstack]
 11813  103E  3004               	movlw	4
 11814  103F  01B0               	clrf	calc_temp_rc@x+3
 11815  1040  00AF               	movwf	calc_temp_rc@x+2
 11816  1041  3093               	movlw	147
 11817  1042  00AE               	movwf	calc_temp_rc@x+1
 11818  1043  30E0               	movlw	224
 11819  1044  00AD               	movwf	calc_temp_rc@x
 11820                           
 11821                           ;sample.c: 207: x=x*rtAdcValueRcLo;
 11822  1045  0850               	movf	_rtAdcValueRcLo,w
 11823  1046  00F1               	movwf	___lmul@multiplier
 11824  1047  0851               	movf	_rtAdcValueRcLo+1,w
 11825  1048  00F2               	movwf	___lmul@multiplier+1
 11826  1049  01F3               	clrf	___lmul@multiplier+2
 11827  104A  01F4               	clrf	___lmul@multiplier+3
 11828  104B  0830               	movf	calc_temp_rc@x+3,w
 11829  104C  00F8               	movwf	___lmul@multiplicand+3
 11830  104D  082F               	movf	calc_temp_rc@x+2,w
 11831  104E  00F7               	movwf	___lmul@multiplicand+2
 11832  104F  082E               	movf	calc_temp_rc@x+1,w
 11833  1050  00F6               	movwf	___lmul@multiplicand+1
 11834  1051  082D               	movf	calc_temp_rc@x,w
 11835  1052  00F5               	movwf	___lmul@multiplicand
 11836  1053  318E  2613  3190   	fcall	___lmul
 11837  1056  0874               	movf	?___lmul+3,w
 11838  1057  00B0               	movwf	calc_temp_rc@x+3
 11839  1058  0873               	movf	?___lmul+2,w
 11840  1059  00AF               	movwf	calc_temp_rc@x+2
 11841  105A  0872               	movf	?___lmul+1,w
 11842  105B  00AE               	movwf	calc_temp_rc@x+1
 11843  105C  0871               	movf	?___lmul,w
 11844  105D  00AD               	movwf	calc_temp_rc@x
 11845                           
 11846                           ;sample.c: 210: y=rtAdcValueRcHi;
 11847  105E  084E               	movf	_rtAdcValueRcHi,w
 11848  105F  00B1               	movwf	calc_temp_rc@y
 11849  1060  084F               	movf	_rtAdcValueRcHi+1,w
 11850  1061  00B2               	movwf	calc_temp_rc@y+1
 11851  1062  300C               	movlw	12
 11852  1063  01B3               	clrf	calc_temp_rc@y+2
 11853  1064  01B4               	clrf	calc_temp_rc@y+3
 11854                           
 11855                           ;sample.c: 211: y=y*3140;
 11856  1065  01F4               	clrf	___lmul@multiplier+3
 11857  1066  01F3               	clrf	___lmul@multiplier+2
 11858  1067  00F2               	movwf	___lmul@multiplier+1
 11859  1068  3044               	movlw	68
 11860  1069  00F1               	movwf	___lmul@multiplier
 11861  106A  0834               	movf	calc_temp_rc@y+3,w
 11862  106B  00F8               	movwf	___lmul@multiplicand+3
 11863  106C  0833               	movf	calc_temp_rc@y+2,w
 11864  106D  00F7               	movwf	___lmul@multiplicand+2
 11865  106E  0832               	movf	calc_temp_rc@y+1,w
 11866  106F  00F6               	movwf	___lmul@multiplicand+1
 11867  1070  0831               	movf	calc_temp_rc@y,w
 11868  1071  00F5               	movwf	___lmul@multiplicand
 11869  1072  318E  2613  3190   	fcall	___lmul
 11870  1075  0874               	movf	?___lmul+3,w
 11871  1076  00B4               	movwf	calc_temp_rc@y+3
 11872  1077  0873               	movf	?___lmul+2,w
 11873  1078  00B3               	movwf	calc_temp_rc@y+2
 11874  1079  0872               	movf	?___lmul+1,w
 11875  107A  00B2               	movwf	calc_temp_rc@y+1
 11876  107B  0871               	movf	?___lmul,w
 11877  107C  00B1               	movwf	calc_temp_rc@y
 11878                           
 11879                           ;sample.c: 212: y=y/100;
 11880  107D  3064               	movlw	100
 11881  107E  00F1               	movwf	___lldiv@divisor
 11882  107F  01F2               	clrf	___lldiv@divisor+1
 11883  1080  01F3               	clrf	___lldiv@divisor+2
 11884  1081  01F4               	clrf	___lldiv@divisor+3
 11885  1082  0834               	movf	calc_temp_rc@y+3,w
 11886  1083  00F8               	movwf	___lldiv@dividend+3
 11887  1084  0833               	movf	calc_temp_rc@y+2,w
 11888  1085  00F7               	movwf	___lldiv@dividend+2
 11889  1086  0832               	movf	calc_temp_rc@y+1,w
 11890  1087  00F6               	movwf	___lldiv@dividend+1
 11891  1088  0831               	movf	calc_temp_rc@y,w
 11892  1089  00F5               	movwf	___lldiv@dividend
 11893  108A  318E  2654  3190   	fcall	___lldiv
 11894  108D  20DE               	fcall	PL24	;call to abstracted procedure
 11895                           
 11896                           ;sample.c: 213: y=y-rtAdcValueRcLo;
 11897  108E  0850               	movf	_rtAdcValueRcLo,w
 11898  108F  00A9               	movwf	??_calc_temp_rc
 11899  1090  0851               	movf	_rtAdcValueRcLo+1,w
 11900  1091  00AA               	movwf	??_calc_temp_rc+1
 11901  1092  01AB               	clrf	??_calc_temp_rc+2
 11902  1093  01AC               	clrf	??_calc_temp_rc+3
 11903  1094  0829               	movf	??_calc_temp_rc,w
 11904  1095  02B1               	subwf	calc_temp_rc@y,f
 11905  1096  082A               	movf	??_calc_temp_rc+1,w
 11906  1097  3BB2               	subwfb	calc_temp_rc@y+1,f
 11907  1098  082B               	movf	??_calc_temp_rc+2,w
 11908  1099  3BB3               	subwfb	calc_temp_rc@y+2,f
 11909  109A  082C               	movf	??_calc_temp_rc+3,w
 11910  109B  3BB4               	subwfb	calc_temp_rc@y+3,f
 11911                           
 11912                           ;sample.c: 216: y=x/y;
 11913  109C  0834               	movf	calc_temp_rc@y+3,w
 11914  109D  00F4               	movwf	___lldiv@divisor+3
 11915  109E  0833               	movf	calc_temp_rc@y+2,w
 11916  109F  00F3               	movwf	___lldiv@divisor+2
 11917  10A0  0832               	movf	calc_temp_rc@y+1,w
 11918  10A1  00F2               	movwf	___lldiv@divisor+1
 11919  10A2  0831               	movf	calc_temp_rc@y,w
 11920  10A3  00F1               	movwf	___lldiv@divisor
 11921  10A4  0830               	movf	calc_temp_rc@x+3,w
 11922  10A5  00F8               	movwf	___lldiv@dividend+3
 11923  10A6  082F               	movf	calc_temp_rc@x+2,w
 11924  10A7  00F7               	movwf	___lldiv@dividend+2
 11925  10A8  082E               	movf	calc_temp_rc@x+1,w
 11926  10A9  00F6               	movwf	___lldiv@dividend+1
 11927  10AA  082D               	movf	calc_temp_rc@x,w
 11928  10AB  00F5               	movwf	___lldiv@dividend
 11929  10AC  318E  2654  3190   	fcall	___lldiv
 11930  10AF  20DE  3190         	fcall	PL24	;call to abstracted procedure
 11931                           
 11932                           ;sample.c: 217: if(y<2000)y=2000;
 11933  10B1  0834               	movf	calc_temp_rc@y+3,w
 11934  10B2  1D03               	btfss	3,2
 11935  10B3  28C3               	goto	l4559
 11936  10B4  0833               	movf	calc_temp_rc@y+2,w
 11937  10B5  1D03               	btfss	3,2
 11938  10B6  28C3               	goto	l4559
 11939  10B7  30D0               	movlw	208
 11940  10B8  0231               	subwf	calc_temp_rc@y,w
 11941  10B9  3007               	movlw	7
 11942  10BA  3B32               	subwfb	calc_temp_rc@y+1,w
 11943  10BB  1803               	btfsc	3,0
 11944  10BC  28C3               	goto	l4559
 11945  10BD  3007               	movlw	7
 11946  10BE  01B4               	clrf	calc_temp_rc@y+3
 11947  10BF  01B3               	clrf	calc_temp_rc@y+2
 11948  10C0  00B2               	movwf	calc_temp_rc@y+1
 11949  10C1  30D0               	movlw	208
 11950  10C2  00B1               	movwf	calc_temp_rc@y
 11951  10C3                     l4559:	
 11952                           
 11953                           ;sample.c: 218: if(y>25000)y=25000;
 11954  10C3  0834               	movf	calc_temp_rc@y+3,w
 11955  10C4  1D03               	btfss	3,2
 11956  10C5  28CF               	goto	l4561
 11957  10C6  0833               	movf	calc_temp_rc@y+2,w
 11958  10C7  1D03               	btfss	3,2
 11959  10C8  28CF               	goto	l4561
 11960  10C9  30A9               	movlw	169
 11961  10CA  0231               	subwf	calc_temp_rc@y,w
 11962  10CB  3061               	movlw	97
 11963  10CC  3B32               	subwfb	calc_temp_rc@y+1,w
 11964  10CD  1C03               	btfss	3,0
 11965  10CE  28D5               	goto	l642
 11966  10CF                     l4561:	
 11967  10CF  3061               	movlw	97
 11968  10D0  01B4               	clrf	calc_temp_rc@y+3
 11969  10D1  01B3               	clrf	calc_temp_rc@y+2
 11970  10D2  00B2               	movwf	calc_temp_rc@y+1
 11971  10D3  30A8               	movlw	168
 11972  10D4  00B1               	movwf	calc_temp_rc@y
 11973  10D5                     l642:	
 11974                           
 11975                           ;sample.c: 220: return y;
 11976  10D5  0834               	movf	calc_temp_rc@y+3,w
 11977  10D6  00A8               	movwf	?_calc_temp_rc+3
 11978  10D7  0833               	movf	calc_temp_rc@y+2,w
 11979  10D8  00A7               	movwf	?_calc_temp_rc+2
 11980  10D9  0832               	movf	calc_temp_rc@y+1,w
 11981  10DA  00A6               	movwf	?_calc_temp_rc+1
 11982  10DB  0831               	movf	calc_temp_rc@y,w
 11983  10DC  00A5               	movwf	?_calc_temp_rc
 11984  10DD  0008               	return
 11985  10DE                     __end_of_calc_temp_rc:	
 11986  10DE                     PL24:	
 11987  10DE  0874               	movf	?___lldiv+3,w
 11988  10DF  00B4               	movwf	calc_temp_rc@y+3
 11989  10E0  0873               	movf	?___lldiv+2,w
 11990  10E1  00B3               	movwf	calc_temp_rc@y+2
 11991  10E2  0872               	movf	?___lldiv+1,w
 11992  10E3  00B2               	movwf	calc_temp_rc@y+1
 11993  10E4  0871               	movf	?___lldiv,w
 11994  10E5  00B1               	movwf	calc_temp_rc@y
 11995  10E6  0008               	return
 11996  10E7                     __end_ofPL24:	
 11997                           
 11998                           	psect	text35
 11999  1360                     __ptext35:	
 12000 ;; *************** function _calc_expect_vout_adc_value *****************
 12001 ;; Defined at:
 12002 ;;		line 418 in file "src/api/sample.c"
 12003 ;; Parameters:    Size  Location     Type
 12004 ;;  x               2   18[BANK0 ] unsigned int 
 12005 ;; Auto vars:     Size  Location     Type
 12006 ;;  t32             4   16[BANK2 ] long 
 12007 ;;  x0              4   12[BANK2 ] long 
 12008 ;;  y0              4    8[BANK2 ] long 
 12009 ;;  x1              4    4[BANK2 ] long 
 12010 ;;  y1              4    0[BANK2 ] long 
 12011 ;;  i               1   20[BANK2 ] unsigned char 
 12012 ;;  index           1    0        unsigned char 
 12013 ;; Return value:  Size  Location     Type
 12014 ;;                  2   18[BANK0 ] unsigned int 
 12015 ;; Registers used:
 12016 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12017 ;; Tracked objects:
 12018 ;;		On entry : 1F/0
 12019 ;;		On exit  : 1F/0
 12020 ;;		Unchanged: 0/0
 12021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12022 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12023 ;;      Locals:         0       0       0      21       0       0       0       0       0       0       0       0       
      +0       0
 12024 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12025 ;;      Totals:         0      14       0      21       0       0       0       0       0       0       0       0       
      +0       0
 12026 ;;Total ram usage:       35 bytes
 12027 ;; Hardware stack levels used:    1
 12028 ;; Hardware stack levels required when called:    2
 12029 ;; This function calls:
 12030 ;;		___aldiv
 12031 ;;		___lmul
 12032 ;; This function is called by:
 12033 ;;		_main
 12034 ;; This function uses a non-reentrant model
 12035 ;;
 12036                           
 12037                           
 12038                           ;psect for function _calc_expect_vout_adc_value
 12039  1360                     _calc_expect_vout_adc_value:	
 12040                           
 12041                           ;sample.c: 421: int32_t y0,y1,x0,x1;
 12042                           ;sample.c: 422: uint8_t i;
 12043                           ;sample.c: 423: int32_t t32;
 12044                           ;sample.c: 424: for (i = 0; i < 30-1; i++) {
 12045                           
 12046                           ;incstack = 0
 12047                           ; Regs used in _calc_expect_vout_adc_value: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 12048  1360  0022               	movlb	2	; select bank2
 12049  1361  01D0               	clrf	calc_expect_vout_adc_value@i^(0+256)
 12050  1362                     l4693:	
 12051                           
 12052                           ;sample.c: 425: if(sysData.calibRsAdc[i]<sysData.calibRsAdc[i+1]){
 12053  1362  24BF  3193         	fcall	PL4	;call to abstracted procedure
 12054  1364  24AE  3193         	fcall	PL2	;call to abstracted procedure
 12055  1366  0022               	movlb	2	; select bank2
 12056  1367  0850               	movf	calc_expect_vout_adc_value@i^(0+256),w
 12057  1368  0020               	movlb	0	; select bank0
 12058  1369  00BA               	movwf	??_calc_expect_vout_adc_value+6
 12059  136A  3066               	movlw	102
 12060  136B  01BB               	clrf	??_calc_expect_vout_adc_value+7
 12061  136C  35BA               	lslf	??_calc_expect_vout_adc_value+6,f
 12062  136D  0DBB               	rlf	??_calc_expect_vout_adc_value+7,f
 12063  136E  00BC               	movwf	??_calc_expect_vout_adc_value+8
 12064  136F  3023               	movlw	35
 12065  1370  00BD               	movwf	??_calc_expect_vout_adc_value+9
 12066  1371  083A               	movf	??_calc_expect_vout_adc_value+6,w
 12067  1372  073C               	addwf	??_calc_expect_vout_adc_value+8,w
 12068  1373  0086               	movwf	6
 12069  1374  083B               	movf	??_calc_expect_vout_adc_value+7,w
 12070  1375  3D3D               	addwfc	??_calc_expect_vout_adc_value+9,w
 12071  1376  0087               	movwf	7
 12072  1377  3F40               	moviw [0]fsr1
 12073  1378  00BE               	movwf	??_calc_expect_vout_adc_value+10
 12074  1379  3F41               	moviw [1]fsr1
 12075  137A  00BF               	movwf	??_calc_expect_vout_adc_value+11
 12076  137B  0839               	movf	??_calc_expect_vout_adc_value+5,w
 12077  137C  023F               	subwf	??_calc_expect_vout_adc_value+11,w
 12078  137D  1D03               	skipz
 12079  137E  2B81               	goto	u3475
 12080  137F  0838               	movf	??_calc_expect_vout_adc_value+4,w
 12081  1380  023E               	subwf	??_calc_expect_vout_adc_value+10,w
 12082  1381                     u3475:	
 12083  1381  1803               	skipnc
 12084  1382  2B8F               	goto	l4699
 12085                           
 12086                           ;sample.c: 426: if (x <= sysData.calibRsAdc[i+1])break;
 12087  1383  0022               	movlb	2	; select bank2
 12088  1384  24BF  3193         	fcall	PL4	;call to abstracted procedure
 12089  1386  24AE  3193         	fcall	PL2	;call to abstracted procedure
 12090  1388  0833               	movf	calc_expect_vout_adc_value@x+1,w
 12091  1389  0239               	subwf	??_calc_expect_vout_adc_value+5,w
 12092  138A  1D03               	skipz
 12093  138B  2B99               	goto	u3495
 12094  138C  0832               	movf	calc_expect_vout_adc_value@x,w
 12095  138D  0238               	subwf	??_calc_expect_vout_adc_value+4,w
 12096  138E  2B99               	goto	u3495
 12097  138F                     l4699:	
 12098                           
 12099                           ;sample.c: 428: if (x >= sysData.calibRsAdc[i+1])break;
 12100  138F  0022               	movlb	2	; select bank2
 12101  1390  24BF  3193         	fcall	PL4	;call to abstracted procedure
 12102  1392  24AE  3193         	fcall	PL2	;call to abstracted procedure
 12103  1394  0233               	subwf	calc_expect_vout_adc_value@x+1,w
 12104  1395  1D03               	skipz
 12105  1396  2B99               	goto	u3495
 12106  1397  0838               	movf	??_calc_expect_vout_adc_value+4,w
 12107  1398  0232               	subwf	calc_expect_vout_adc_value@x,w
 12108  1399                     u3495:	
 12109  1399  1803               	btfsc	3,0
 12110  139A  2BA1               	goto	l4707
 12111  139B  0022               	movlb	2	; select bank2
 12112  139C  301D               	movlw	29
 12113  139D  0AD0               	incf	calc_expect_vout_adc_value@i^(0+256),f
 12114  139E  0250               	subwf	calc_expect_vout_adc_value@i^(0+256),w
 12115  139F  1C03               	skipc
 12116  13A0  2B62               	goto	l4693
 12117  13A1                     l4707:	
 12118                           
 12119                           ;sample.c: 429: }
 12120                           ;sample.c: 430: }
 12121                           ;sample.c: 432: if (i > 30-2)i=30-2;
 12122  13A1  301D               	movlw	29
 12123  13A2  0022               	movlb	2	; select bank2
 12124  13A3  0250               	subwf	calc_expect_vout_adc_value@i^(0+256),w
 12125  13A4  1C03               	skipc
 12126  13A5  2BA8               	goto	l4711
 12127  13A6  301C               	movlw	28
 12128  13A7  00D0               	movwf	calc_expect_vout_adc_value@i^(0+256)
 12129  13A8                     l4711:	
 12130                           
 12131                           ;sample.c: 433: y1=sysData.calibVoMV[i+1];
 12132  13A8  0850               	movf	calc_expect_vout_adc_value@i^(0+256),w
 12133  13A9  0020               	movlb	0	; select bank0
 12134  13AA  00B4               	movwf	??_calc_expect_vout_adc_value
 12135  13AB  30A4               	movlw	164
 12136  13AC  24AE  3193         	fcall	PL2	;call to abstracted procedure
 12137  13AE  0838               	movf	??_calc_expect_vout_adc_value+4,w
 12138  13AF  0022               	movlb	2	; select bank2
 12139  13B0  00BC               	movwf	calc_expect_vout_adc_value@y1^(0+256)
 12140  13B1  0020               	movlb	0	; select bank0
 12141  13B2  0839               	movf	??_calc_expect_vout_adc_value+5,w
 12142  13B3  0022               	movlb	2	; select bank2
 12143  13B4  00BD               	movwf	(calc_expect_vout_adc_value@y1^(0+256)+1)
 12144  13B5  01BE               	clrf	(calc_expect_vout_adc_value@y1^(0+256)+2)
 12145  13B6  01BF               	clrf	(calc_expect_vout_adc_value@y1^(0+256)+3)
 12146                           
 12147                           ;sample.c: 434: y0=sysData.calibVoMV[i];
 12148  13B7  0850               	movf	calc_expect_vout_adc_value@i^(0+256),w
 12149  13B8  0020               	movlb	0	; select bank0
 12150  13B9  00B4               	movwf	??_calc_expect_vout_adc_value
 12151  13BA  30A2               	movlw	162
 12152  13BB  24AE  3193         	fcall	PL2	;call to abstracted procedure
 12153  13BD  0838               	movf	??_calc_expect_vout_adc_value+4,w
 12154  13BE  0022               	movlb	2	; select bank2
 12155  13BF  00C4               	movwf	calc_expect_vout_adc_value@y0^(0+256)
 12156  13C0  0020               	movlb	0	; select bank0
 12157  13C1  0839               	movf	??_calc_expect_vout_adc_value+5,w
 12158  13C2  0022               	movlb	2	; select bank2
 12159  13C3  00C5               	movwf	(calc_expect_vout_adc_value@y0^(0+256)+1)
 12160  13C4  01C6               	clrf	(calc_expect_vout_adc_value@y0^(0+256)+2)
 12161  13C5  01C7               	clrf	(calc_expect_vout_adc_value@y0^(0+256)+3)
 12162                           
 12163                           ;sample.c: 437: x1=sysData.calibRsAdc[i+1];
 12164  13C6  24BF  3193         	fcall	PL4	;call to abstracted procedure
 12165  13C8  24AE  3193         	fcall	PL2	;call to abstracted procedure
 12166  13CA  0838               	movf	??_calc_expect_vout_adc_value+4,w
 12167  13CB  0022               	movlb	2	; select bank2
 12168  13CC  00C0               	movwf	calc_expect_vout_adc_value@x1^(0+256)
 12169  13CD  0020               	movlb	0	; select bank0
 12170  13CE  0839               	movf	??_calc_expect_vout_adc_value+5,w
 12171  13CF  0022               	movlb	2	; select bank2
 12172  13D0  00C1               	movwf	(calc_expect_vout_adc_value@x1^(0+256)+1)
 12173  13D1  01C2               	clrf	(calc_expect_vout_adc_value@x1^(0+256)+2)
 12174  13D2  01C3               	clrf	(calc_expect_vout_adc_value@x1^(0+256)+3)
 12175                           
 12176                           ;sample.c: 438: x0=sysData.calibRsAdc[i];
 12177  13D3  0850               	movf	calc_expect_vout_adc_value@i^(0+256),w
 12178  13D4  0020               	movlb	0	; select bank0
 12179  13D5  00B4               	movwf	??_calc_expect_vout_adc_value
 12180  13D6  3066               	movlw	102
 12181  13D7  24AE  3193         	fcall	PL2	;call to abstracted procedure
 12182  13D9  0838               	movf	??_calc_expect_vout_adc_value+4,w
 12183  13DA  0022               	movlb	2	; select bank2
 12184  13DB  00C8               	movwf	calc_expect_vout_adc_value@x0^(0+256)
 12185  13DC  0020               	movlb	0	; select bank0
 12186  13DD  0839               	movf	??_calc_expect_vout_adc_value+5,w
 12187  13DE  0022               	movlb	2	; select bank2
 12188  13DF  00C9               	movwf	(calc_expect_vout_adc_value@x0^(0+256)+1)
 12189  13E0  01CA               	clrf	(calc_expect_vout_adc_value@x0^(0+256)+2)
 12190  13E1  01CB               	clrf	(calc_expect_vout_adc_value@x0^(0+256)+3)
 12191                           
 12192                           ;sample.c: 440: if(x<=x0 && i==0)return y0;
 12193  13E2  0020               	movlb	0	; select bank0
 12194  13E3  0832               	movf	calc_expect_vout_adc_value@x,w
 12195  13E4  00B4               	movwf	??_calc_expect_vout_adc_value
 12196  13E5  0833               	movf	calc_expect_vout_adc_value@x+1,w
 12197  13E6  00B5               	movwf	??_calc_expect_vout_adc_value+1
 12198  13E7  01B6               	clrf	??_calc_expect_vout_adc_value+2
 12199  13E8  01B7               	clrf	??_calc_expect_vout_adc_value+3
 12200  13E9  0022               	movlb	2	; select bank2
 12201  13EA  084B               	movf	(calc_expect_vout_adc_value@x0+3)^(0+256),w
 12202  13EB  3A80               	xorlw	128
 12203  13EC  0020               	movlb	0	; select bank0
 12204  13ED  00B8               	movwf	??_calc_expect_vout_adc_value+4
 12205  13EE  0837               	movf	??_calc_expect_vout_adc_value+3,w
 12206  13EF  3A80               	xorlw	128
 12207  13F0  0238               	subwf	??_calc_expect_vout_adc_value+4,w
 12208  13F1  0022               	movlb	2	; select bank2
 12209  13F2  1D03               	skipz
 12210  13F3  2C04               	goto	u3523
 12211  13F4  0020               	movlb	0	; select bank0
 12212  13F5  0836               	movf	??_calc_expect_vout_adc_value+2,w
 12213  13F6  0022               	movlb	2	; select bank2
 12214  13F7  024A               	subwf	(calc_expect_vout_adc_value@x0+2)^(0+256),w
 12215  13F8  1D03               	skipz
 12216  13F9  2C04               	goto	u3523
 12217  13FA  0020               	movlb	0	; select bank0
 12218  13FB  0835               	movf	??_calc_expect_vout_adc_value+1,w
 12219  13FC  0022               	movlb	2	; select bank2
 12220  13FD  0249               	subwf	(calc_expect_vout_adc_value@x0+1)^(0+256),w
 12221  13FE  1D03               	skipz
 12222  13FF  2C04               	goto	u3523
 12223  1400  0020               	movlb	0	; select bank0
 12224  1401  0834               	movf	??_calc_expect_vout_adc_value,w
 12225  1402  0022               	movlb	2	; select bank2
 12226  1403  0248               	subwf	calc_expect_vout_adc_value@x0^(0+256),w
 12227  1404                     u3523:	
 12228  1404  1C03               	skipc
 12229  1405  2C11               	goto	l4725
 12230  1406  0850               	movf	calc_expect_vout_adc_value@i^(0+256),w
 12231  1407  1D03               	btfss	3,2
 12232  1408  2C11               	goto	l4725
 12233  1409                     l4721:	
 12234  1409  0845               	movf	(calc_expect_vout_adc_value@y0+1)^(0+256),w
 12235  140A  0020               	movlb	0	; select bank0
 12236  140B  00B3               	movwf	?_calc_expect_vout_adc_value+1
 12237  140C  0022               	movlb	2	; select bank2
 12238  140D  0844               	movf	calc_expect_vout_adc_value@y0^(0+256),w
 12239  140E  0020               	movlb	0	; select bank0
 12240  140F  00B2               	movwf	?_calc_expect_vout_adc_value
 12241  1410  0008               	return
 12242  1411                     l4725:	
 12243                           
 12244                           ;sample.c: 441: if(x1==x0)return y0;
 12245  1411  084B               	movf	(calc_expect_vout_adc_value@x0+3)^(0+256),w
 12246  1412  0643               	xorwf	(calc_expect_vout_adc_value@x1+3)^(0+256),w
 12247  1413  1D03               	skipz
 12248  1414  2C1F               	goto	u3545
 12249  1415  084A               	movf	(calc_expect_vout_adc_value@x0+2)^(0+256),w
 12250  1416  0642               	xorwf	(calc_expect_vout_adc_value@x1+2)^(0+256),w
 12251  1417  1D03               	skipz
 12252  1418  2C1F               	goto	u3545
 12253  1419  0849               	movf	(calc_expect_vout_adc_value@x0+1)^(0+256),w
 12254  141A  0641               	xorwf	(calc_expect_vout_adc_value@x1+1)^(0+256),w
 12255  141B  1D03               	skipz
 12256  141C  2C1F               	goto	u3545
 12257  141D  0848               	movf	calc_expect_vout_adc_value@x0^(0+256),w
 12258  141E  0640               	xorwf	calc_expect_vout_adc_value@x1^(0+256),w
 12259  141F                     u3545:	
 12260  141F  1903               	btfsc	3,2
 12261  1420  2C09               	goto	l4721
 12262                           
 12263                           ;sample.c: 444: t32=(x-x0);
 12264  1421  0020               	movlb	0	; select bank0
 12265  1422  0832               	movf	calc_expect_vout_adc_value@x,w
 12266  1423  0022               	movlb	2	; select bank2
 12267  1424  00CC               	movwf	calc_expect_vout_adc_value@t32^(0+256)
 12268  1425  0020               	movlb	0	; select bank0
 12269  1426  0833               	movf	calc_expect_vout_adc_value@x+1,w
 12270  1427  0022               	movlb	2	; select bank2
 12271  1428  00CD               	movwf	(calc_expect_vout_adc_value@t32^(0+256)+1)
 12272  1429  01CE               	clrf	(calc_expect_vout_adc_value@t32^(0+256)+2)
 12273  142A  01CF               	clrf	(calc_expect_vout_adc_value@t32^(0+256)+3)
 12274  142B  0848               	movf	calc_expect_vout_adc_value@x0^(0+256),w
 12275  142C  02CC               	subwf	calc_expect_vout_adc_value@t32^(0+256),f
 12276  142D  0849               	movf	(calc_expect_vout_adc_value@x0+1)^(0+256),w
 12277  142E  3BCD               	subwfb	(calc_expect_vout_adc_value@t32+1)^(0+256),f
 12278  142F  084A               	movf	(calc_expect_vout_adc_value@x0+2)^(0+256),w
 12279  1430  3BCE               	subwfb	(calc_expect_vout_adc_value@t32+2)^(0+256),f
 12280  1431  084B               	movf	(calc_expect_vout_adc_value@x0+3)^(0+256),w
 12281  1432  3BCF               	subwfb	(calc_expect_vout_adc_value@t32+3)^(0+256),f
 12282                           
 12283                           ;sample.c: 445: t32=t32*(y1-y0);
 12284  1433  083F               	movf	(calc_expect_vout_adc_value@y1+3)^(0+256),w
 12285  1434  00F4               	movwf	___lmul@multiplier+3
 12286  1435  083E               	movf	(calc_expect_vout_adc_value@y1+2)^(0+256),w
 12287  1436  00F3               	movwf	___lmul@multiplier+2
 12288  1437  083D               	movf	(calc_expect_vout_adc_value@y1+1)^(0+256),w
 12289  1438  00F2               	movwf	___lmul@multiplier+1
 12290  1439  083C               	movf	calc_expect_vout_adc_value@y1^(0+256),w
 12291  143A  00F1               	movwf	___lmul@multiplier
 12292  143B  0844               	movf	calc_expect_vout_adc_value@y0^(0+256),w
 12293  143C  02F1               	subwf	___lmul@multiplier,f
 12294  143D  0845               	movf	(calc_expect_vout_adc_value@y0+1)^(0+256),w
 12295  143E  3BF2               	subwfb	___lmul@multiplier+1,f
 12296  143F  0846               	movf	(calc_expect_vout_adc_value@y0+2)^(0+256),w
 12297  1440  3BF3               	subwfb	___lmul@multiplier+2,f
 12298  1441  0847               	movf	(calc_expect_vout_adc_value@y0+3)^(0+256),w
 12299  1442  3BF4               	subwfb	___lmul@multiplier+3,f
 12300  1443  084F               	movf	(calc_expect_vout_adc_value@t32+3)^(0+256),w
 12301  1444  00F8               	movwf	___lmul@multiplicand+3
 12302  1445  084E               	movf	(calc_expect_vout_adc_value@t32+2)^(0+256),w
 12303  1446  00F7               	movwf	___lmul@multiplicand+2
 12304  1447  084D               	movf	(calc_expect_vout_adc_value@t32+1)^(0+256),w
 12305  1448  00F6               	movwf	___lmul@multiplicand+1
 12306  1449  084C               	movf	calc_expect_vout_adc_value@t32^(0+256),w
 12307  144A  00F5               	movwf	___lmul@multiplicand
 12308  144B  318E  2613  3193   	fcall	___lmul
 12309  144E  0874               	movf	?___lmul+3,w
 12310  144F  0022               	movlb	2	; select bank2
 12311  1450  00CF               	movwf	(calc_expect_vout_adc_value@t32+3)^(0+256)
 12312  1451  0873               	movf	?___lmul+2,w
 12313  1452  00CE               	movwf	(calc_expect_vout_adc_value@t32+2)^(0+256)
 12314  1453  0872               	movf	?___lmul+1,w
 12315  1454  00CD               	movwf	(calc_expect_vout_adc_value@t32+1)^(0+256)
 12316  1455  0871               	movf	?___lmul,w
 12317  1456  00CC               	movwf	calc_expect_vout_adc_value@t32^(0+256)
 12318                           
 12319                           ;sample.c: 446: t32=t32/(x1-x0);
 12320  1457  0843               	movf	(calc_expect_vout_adc_value@x1+3)^(0+256),w
 12321  1458  0020               	movlb	0	; select bank0
 12322  1459  00A7               	movwf	___aldiv@divisor+3
 12323  145A  0022               	movlb	2	; select bank2
 12324  145B  0842               	movf	(calc_expect_vout_adc_value@x1+2)^(0+256),w
 12325  145C  0020               	movlb	0	; select bank0
 12326  145D  00A6               	movwf	___aldiv@divisor+2
 12327  145E  0022               	movlb	2	; select bank2
 12328  145F  0841               	movf	(calc_expect_vout_adc_value@x1+1)^(0+256),w
 12329  1460  0020               	movlb	0	; select bank0
 12330  1461  00A5               	movwf	___aldiv@divisor+1
 12331  1462  0022               	movlb	2	; select bank2
 12332  1463  0840               	movf	calc_expect_vout_adc_value@x1^(0+256),w
 12333  1464  0020               	movlb	0	; select bank0
 12334  1465  00A4               	movwf	___aldiv@divisor
 12335  1466  0022               	movlb	2	; select bank2
 12336  1467  0848               	movf	calc_expect_vout_adc_value@x0^(0+256),w
 12337  1468  0020               	movlb	0	; select bank0
 12338  1469  02A4               	subwf	___aldiv@divisor,f
 12339  146A  0022               	movlb	2	; select bank2
 12340  146B  0849               	movf	(calc_expect_vout_adc_value@x0+1)^(0+256),w
 12341  146C  0020               	movlb	0	; select bank0
 12342  146D  3BA5               	subwfb	___aldiv@divisor+1,f
 12343  146E  0022               	movlb	2	; select bank2
 12344  146F  084A               	movf	(calc_expect_vout_adc_value@x0+2)^(0+256),w
 12345  1470  0020               	movlb	0	; select bank0
 12346  1471  3BA6               	subwfb	___aldiv@divisor+2,f
 12347  1472  0022               	movlb	2	; select bank2
 12348  1473  084B               	movf	(calc_expect_vout_adc_value@x0+3)^(0+256),w
 12349  1474  0020               	movlb	0	; select bank0
 12350  1475  3BA7               	subwfb	___aldiv@divisor+3,f
 12351  1476  0022               	movlb	2	; select bank2
 12352  1477  084F               	movf	(calc_expect_vout_adc_value@t32+3)^(0+256),w
 12353  1478  0020               	movlb	0	; select bank0
 12354  1479  00AB               	movwf	___aldiv@dividend+3
 12355  147A  0022               	movlb	2	; select bank2
 12356  147B  084E               	movf	(calc_expect_vout_adc_value@t32+2)^(0+256),w
 12357  147C  0020               	movlb	0	; select bank0
 12358  147D  00AA               	movwf	___aldiv@dividend+2
 12359  147E  0022               	movlb	2	; select bank2
 12360  147F  084D               	movf	(calc_expect_vout_adc_value@t32+1)^(0+256),w
 12361  1480  0020               	movlb	0	; select bank0
 12362  1481  00A9               	movwf	___aldiv@dividend+1
 12363  1482  0022               	movlb	2	; select bank2
 12364  1483  084C               	movf	calc_expect_vout_adc_value@t32^(0+256),w
 12365  1484  0020               	movlb	0	; select bank0
 12366  1485  00A8               	movwf	___aldiv@dividend
 12367  1486  318D  25A7  3193   	fcall	___aldiv
 12368  1489  0827               	movf	?___aldiv+3,w
 12369  148A  0022               	movlb	2	; select bank2
 12370  148B  00CF               	movwf	(calc_expect_vout_adc_value@t32+3)^(0+256)
 12371  148C  0020               	movlb	0	; select bank0
 12372  148D  0826               	movf	?___aldiv+2,w
 12373  148E  0022               	movlb	2	; select bank2
 12374  148F  00CE               	movwf	(calc_expect_vout_adc_value@t32+2)^(0+256)
 12375  1490  0020               	movlb	0	; select bank0
 12376  1491  0825               	movf	?___aldiv+1,w
 12377  1492  0022               	movlb	2	; select bank2
 12378  1493  00CD               	movwf	(calc_expect_vout_adc_value@t32+1)^(0+256)
 12379  1494  0020               	movlb	0	; select bank0
 12380  1495  0824               	movf	?___aldiv,w
 12381  1496  0022               	movlb	2	; select bank2
 12382  1497  00CC               	movwf	calc_expect_vout_adc_value@t32^(0+256)
 12383                           
 12384                           ;sample.c: 447: t32=t32+y0;
 12385  1498  0844               	movf	calc_expect_vout_adc_value@y0^(0+256),w
 12386  1499  07CC               	addwf	calc_expect_vout_adc_value@t32^(0+256),f
 12387  149A  0845               	movf	(calc_expect_vout_adc_value@y0+1)^(0+256),w
 12388  149B  3DCD               	addwfc	(calc_expect_vout_adc_value@t32+1)^(0+256),f
 12389  149C  0846               	movf	(calc_expect_vout_adc_value@y0+2)^(0+256),w
 12390  149D  3DCE               	addwfc	(calc_expect_vout_adc_value@t32+2)^(0+256),f
 12391  149E  0847               	movf	(calc_expect_vout_adc_value@y0+3)^(0+256),w
 12392  149F  3DCF               	addwfc	(calc_expect_vout_adc_value@t32+3)^(0+256),f
 12393                           
 12394                           ;sample.c: 448: if(t32<0)t32=0;
 12395  14A0  1FCF               	btfss	(calc_expect_vout_adc_value@t32+3)^(0+256),7
 12396  14A1  2CA6               	goto	l4741
 12397  14A2  01CC               	clrf	calc_expect_vout_adc_value@t32^(0+256)
 12398  14A3  01CD               	clrf	(calc_expect_vout_adc_value@t32+1)^(0+256)
 12399  14A4  01CE               	clrf	(calc_expect_vout_adc_value@t32+2)^(0+256)
 12400  14A5  01CF               	clrf	(calc_expect_vout_adc_value@t32+3)^(0+256)
 12401  14A6                     l4741:	
 12402                           
 12403                           ;sample.c: 449: return (uint16_t)t32;
 12404  14A6  084D               	movf	(calc_expect_vout_adc_value@t32+1)^(0+256),w
 12405  14A7  0020               	movlb	0	; select bank0
 12406  14A8  00B3               	movwf	?_calc_expect_vout_adc_value+1
 12407  14A9  0022               	movlb	2	; select bank2
 12408  14AA  084C               	movf	calc_expect_vout_adc_value@t32^(0+256),w
 12409  14AB  0020               	movlb	0	; select bank0
 12410  14AC  00B2               	movwf	?_calc_expect_vout_adc_value
 12411  14AD  0008               	return
 12412  14AE                     __end_of_calc_expect_vout_adc_value:	
 12413  14AE                     PL2:	
 12414  14AE  01B5               	clrf	??_calc_expect_vout_adc_value+1
 12415  14AF  35B4               	lslf	??_calc_expect_vout_adc_value,f
 12416  14B0  0DB5               	rlf	??_calc_expect_vout_adc_value+1,f
 12417  14B1  00B6               	movwf	??_calc_expect_vout_adc_value+2
 12418  14B2  3023               	movlw	35
 12419  14B3  00B7               	movwf	??_calc_expect_vout_adc_value+3
 12420  14B4  0834               	movf	??_calc_expect_vout_adc_value,w
 12421  14B5  0736               	addwf	??_calc_expect_vout_adc_value+2,w
 12422  14B6  0086               	movwf	6
 12423  14B7  0835               	movf	??_calc_expect_vout_adc_value+1,w
 12424  14B8  3D37               	addwfc	??_calc_expect_vout_adc_value+3,w
 12425  14B9  0087               	movwf	7
 12426  14BA  3F40               	moviw [0]fsr1
 12427  14BB  00B8               	movwf	??_calc_expect_vout_adc_value+4
 12428  14BC  3F41               	moviw [1]fsr1
 12429  14BD  00B9               	movwf	??_calc_expect_vout_adc_value+5
 12430  14BE  0008               	return
 12431  14BF                     __end_ofPL2:	
 12432  14BF                     PL4:	
 12433  14BF  0850               	movf	calc_expect_vout_adc_value@i^(0+256),w
 12434  14C0  0020               	movlb	0	; select bank0
 12435  14C1  00B4               	movwf	??_calc_expect_vout_adc_value
 12436  14C2  3468               	retlw	104
 12437  14C3                     __end_ofPL4:	
 12438                           
 12439                           	psect	intentry
 12440  0804                     __pintentry:	
 12441 ;; *************** function _INTERRUPT_InterruptManager *****************
 12442 ;; Defined at:
 12443 ;;		line 55 in file "mcc_generated_files/interrupt_manager.c"
 12444 ;; Parameters:    Size  Location     Type
 12445 ;;		None
 12446 ;; Auto vars:     Size  Location     Type
 12447 ;;  t8              1    0[COMMON] unsigned char 
 12448 ;; Return value:  Size  Location     Type
 12449 ;;                  1    wreg      void 
 12450 ;; Registers used:
 12451 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12452 ;; Tracked objects:
 12453 ;;		On entry : 0/0
 12454 ;;		On exit  : 4/0
 12455 ;;		Unchanged: 0/0
 12456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12458 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12460 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12461 ;;Total ram usage:        1 bytes
 12462 ;; Hardware stack levels used:    1
 12463 ;; This function calls:
 12464 ;;		Nothing
 12465 ;; This function is called by:
 12466 ;;		Interrupt level 1
 12467 ;; This function uses a non-reentrant model
 12468 ;;
 12469                           
 12470  0804                     _INTERRUPT_InterruptManager:	
 12471                           
 12472                           ;incstack = 0
 12473                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0]
 12474  0804  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12475  0805  3188               	pagesel	$
 12476                           
 12477                           ;interrupt_manager.c: 58: uint8_t t8;
 12478                           ;interrupt_manager.c: 59: if(INTCONbits.PEIE == 1 && PIE1bits.TMR2IE == 1 && PIR1bits.TM
      +                          R2IF == 1)
 12479  0806  1F0B               	btfss	11,6	;volatile
 12480  0807  282F               	goto	i1l4063
 12481  0808  0021               	movlb	1	; select bank1
 12482  0809  1C91               	btfss	17,1	;volatile
 12483  080A  282F               	goto	i1l4063
 12484  080B  0020               	movlb	0	; select bank0
 12485  080C  1C91               	btfss	17,1	;volatile
 12486  080D  282F               	goto	i1l4063
 12487                           
 12488                           ;interrupt_manager.c: 60: {
 12489                           ;interrupt_manager.c: 62: PIR1bits.TMR2IF = 0;
 12490  080E  1091               	bcf	17,1	;volatile
 12491                           
 12492                           ;interrupt_manager.c: 63: Event |= (1<<1);
 12493  080F  14DC               	bsf	_Event,1	;volatile
 12494  0810  3005               	movlw	5
 12495                           
 12496                           ;interrupt_manager.c: 64: subTickerX++;
 12497  0811  0AE0               	incf	_subTickerX,f
 12498                           
 12499                           ;interrupt_manager.c: 65: subTickerX_1s++;
 12500  0812  0AE1               	incf	_subTickerX_1s,f
 12501                           
 12502                           ;interrupt_manager.c: 66: if(subTickerX>=5){
 12503  0813  0260               	subwf	_subTickerX,w
 12504  0814  1C03               	skipc
 12505  0815  2818               	goto	i1l4045
 12506                           
 12507                           ;interrupt_manager.c: 67: subTickerX=0;
 12508  0816  01E0               	clrf	_subTickerX
 12509                           
 12510                           ;interrupt_manager.c: 68: Event |= (1<<2);
 12511  0817  155C               	bsf	_Event,2	;volatile
 12512  0818                     i1l4045:	
 12513                           
 12514                           ;interrupt_manager.c: 69: }
 12515                           ;interrupt_manager.c: 70: if(subTickerX_1s>=50){
 12516  0818  3032               	movlw	50
 12517  0819  0261               	subwf	_subTickerX_1s,w
 12518  081A  1C03               	skipc
 12519  081B  281E               	goto	i1l4051
 12520                           
 12521                           ;interrupt_manager.c: 71: subTickerX_1s=0;
 12522  081C  01E1               	clrf	_subTickerX_1s
 12523                           
 12524                           ;interrupt_manager.c: 72: Event |= (1<<3);
 12525  081D  15DC               	bsf	_Event,3	;volatile
 12526  081E                     i1l4051:	
 12527                           
 12528                           ;interrupt_manager.c: 73: }
 12529                           ;interrupt_manager.c: 75: if(eusartRxIdleTime_ms){
 12530  081E  085D               	movf	_eusartRxIdleTime_ms,w	;volatile
 12531  081F  1903               	btfsc	3,2
 12532  0820  2828               	goto	i1l4061
 12533                           
 12534                           ;interrupt_manager.c: 76: eusartRxIdleTime_ms++;
 12535  0821  0ADD               	incf	_eusartRxIdleTime_ms,f	;volatile
 12536                           
 12537                           ;interrupt_manager.c: 77: if(eusartRxIdleTime_ms>5){
 12538  0822  3006               	movlw	6
 12539  0823  025D               	subwf	_eusartRxIdleTime_ms,w	;volatile
 12540  0824  1C03               	skipc
 12541  0825  2828               	goto	i1l4061
 12542                           
 12543                           ;interrupt_manager.c: 78: Event|=(1<<0);
 12544  0826  145C               	bsf	_Event,0	;volatile
 12545                           
 12546                           ;interrupt_manager.c: 79: eusartRxIdleTime_ms=0;
 12547  0827  01DD               	clrf	_eusartRxIdleTime_ms	;volatile
 12548  0828                     i1l4061:	
 12549                           
 12550                           ;interrupt_manager.c: 80: }
 12551                           ;interrupt_manager.c: 81: }
 12552                           ;interrupt_manager.c: 82: globalTicker++;
 12553  0828  3001               	movlw	1
 12554  0829  0021               	movlb	1	; select bank1
 12555  082A  07D0               	addwf	_globalTicker^(0+128),f	;volatile
 12556  082B  3000               	movlw	0
 12557  082C  3DD1               	addwfc	(_globalTicker+1)^(0+128),f	;volatile
 12558  082D  3DD2               	addwfc	(_globalTicker+2)^(0+128),f	;volatile
 12559  082E  3DD3               	addwfc	(_globalTicker+3)^(0+128),f	;volatile
 12560  082F                     i1l4063:	
 12561                           
 12562                           ;interrupt_manager.c: 83: }
 12563                           ;interrupt_manager.c: 84: if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits.RCIF
      +                           == 1)
 12564  082F  1F0B               	btfss	11,6	;volatile
 12565  0830  284E               	goto	i1l4081
 12566  0831  0021               	movlb	1	; select bank1
 12567  0832  1E91               	btfss	17,5	;volatile
 12568  0833  284E               	goto	i1l4081
 12569  0834  0020               	movlb	0	; select bank0
 12570  0835  1E91               	btfss	17,5	;volatile
 12571  0836  284E               	goto	i1l4081
 12572                           
 12573                           ;interrupt_manager.c: 85: {
 12574                           ;interrupt_manager.c: 87: PIR1bits.RCIF=0;
 12575  0837  1291               	bcf	17,5	;volatile
 12576                           
 12577                           ;interrupt_manager.c: 88: if(1 == RCSTAbits.OERR){
 12578  0838  0023               	movlb	3	; select bank3
 12579  0839  1C9D               	btfss	29,1	;volatile
 12580  083A  283D               	goto	i1l4073
 12581                           
 12582                           ;interrupt_manager.c: 89: RCSTAbits.CREN = 0;
 12583  083B  121D               	bcf	29,4	;volatile
 12584                           
 12585                           ;interrupt_manager.c: 90: RCSTAbits.CREN = 1;
 12586  083C  161D               	bsf	29,4	;volatile
 12587  083D                     i1l4073:	
 12588                           
 12589                           ;interrupt_manager.c: 91: }
 12590                           ;interrupt_manager.c: 92: t8=RCREG;
 12591  083D  0819               	movf	25,w	;volatile
 12592  083E  00F0               	movwf	INTERRUPT_InterruptManager@t8
 12593                           
 12594                           ;interrupt_manager.c: 93: if(eusartRxCount<64){
 12595  083F  3040               	movlw	64
 12596  0840  027C               	subwf	_eusartRxCount,w	;volatile
 12597  0841  1803               	skipnc
 12598  0842  284B               	goto	i1l4079
 12599                           
 12600                           ;interrupt_manager.c: 94: eusartRxBuffer[eusartRxCount]=t8;
 12601  0843  087C               	movf	_eusartRxCount,w
 12602  0844  3EA0               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 12603  0845  0086               	movwf	6
 12604  0846  3001               	movlw	1	; select bank3/4
 12605  0847  0087               	movwf	7
 12606  0848  0870               	movf	INTERRUPT_InterruptManager@t8,w
 12607  0849  0081               	movwf	1
 12608                           
 12609                           ;interrupt_manager.c: 95: eusartRxCount++;
 12610  084A  0AFC               	incf	_eusartRxCount,f	;volatile
 12611  084B                     i1l4079:	
 12612                           
 12613                           ;interrupt_manager.c: 97: }
 12614                           ;interrupt_manager.c: 98: eusartRxIdleTime_ms=1;
 12615  084B  3001               	movlw	1
 12616  084C  0020               	movlb	0	; select bank0
 12617  084D  00DD               	movwf	_eusartRxIdleTime_ms	;volatile
 12618  084E                     i1l4081:	
 12619                           
 12620                           ;interrupt_manager.c: 99: }
 12621                           ;interrupt_manager.c: 101: if( PIR1bits.TXIF == 1)
 12622  084E  0020               	movlb	0	; select bank0
 12623  084F  1A11               	btfsc	17,4	;volatile
 12624                           
 12625                           ;interrupt_manager.c: 102: {
 12626                           ;interrupt_manager.c: 103: PIR1bits.TXIF=0;
 12627  0850  1211               	bcf	17,4	;volatile
 12628                           
 12629                           ;interrupt_manager.c: 104: }
 12630                           ;interrupt_manager.c: 106: if(INTCONbits.PEIE == 1 && PIE3bits.PWM2IE == 1 && PIR3bits.P
      +                          WM2IF == 1){
 12631  0851  1F0B               	btfss	11,6	;volatile
 12632  0852  2866               	goto	i1l4097
 12633  0853  0021               	movlb	1	; select bank1
 12634  0854  1E93               	btfss	19,5	;volatile
 12635  0855  2866               	goto	i1l4097
 12636  0856  0020               	movlb	0	; select bank0
 12637  0857  1E93               	btfss	19,5	;volatile
 12638  0858  2866               	goto	i1l4097
 12639                           
 12640                           ;interrupt_manager.c: 108: PIR3bits.PWM2IF = 0;
 12641  0859  1293               	bcf	19,5	;volatile
 12642                           
 12643                           ;interrupt_manager.c: 109: if(PWM2INTFbits.PRIF){
 12644  085A  003B               	movlb	27	; select bank27
 12645  085B  1C2D               	btfss	45,0	;volatile
 12646  085C  2866               	goto	i1l4097
 12647                           
 12648                           ;interrupt_manager.c: 110: PWM2INTFbits.PRIF=0;
 12649  085D  102D               	bcf	45,0	;volatile
 12650                           
 12651                           ;interrupt_manager.c: 111: PWM2DCH = (pwm2DutyForVout>>8);
 12652  085E  0020               	movlb	0	; select bank0
 12653  085F  0865               	movf	_pwm2DutyForVout+1,w
 12654  0860  003B               	movlb	27	; select bank27
 12655  0861  00A4               	movwf	36	;volatile
 12656                           
 12657                           ;interrupt_manager.c: 112: PWM2DCL = (pwm2DutyForVout);
 12658  0862  0020               	movlb	0	; select bank0
 12659  0863  0864               	movf	_pwm2DutyForVout,w
 12660  0864  003B               	movlb	27	; select bank27
 12661  0865  00A3               	movwf	35	;volatile
 12662  0866                     i1l4097:	
 12663                           
 12664                           ;interrupt_manager.c: 113: }
 12665                           ;interrupt_manager.c: 114: }
 12666                           ;interrupt_manager.c: 115: if(INTCONbits.PEIE == 1 && PIE3bits.PWM1IE == 1 && PIR3bits.P
      +                          WM1IF == 1){
 12667  0866  1F0B               	btfss	11,6	;volatile
 12668  0867  287B               	goto	i1l312
 12669  0868  0021               	movlb	1	; select bank1
 12670  0869  1E13               	btfss	19,4	;volatile
 12671  086A  287B               	goto	i1l312
 12672  086B  0020               	movlb	0	; select bank0
 12673  086C  1E13               	btfss	19,4	;volatile
 12674  086D  287B               	goto	i1l312
 12675                           
 12676                           ;interrupt_manager.c: 116: PIR3bits.PWM1IF = 0;
 12677  086E  1213               	bcf	19,4	;volatile
 12678                           
 12679                           ;interrupt_manager.c: 117: if(PWM1INTFbits.PRIF){
 12680  086F  003B               	movlb	27	; select bank27
 12681  0870  1C1D               	btfss	29,0	;volatile
 12682  0871  287B               	goto	i1l312
 12683                           
 12684                           ;interrupt_manager.c: 118: PWM1INTFbits.PRIF=0;
 12685  0872  101D               	bcf	29,0	;volatile
 12686                           
 12687                           ;interrupt_manager.c: 119: PWM1DCH = (pwm1DutyForIdrv>>8);
 12688  0873  0020               	movlb	0	; select bank0
 12689  0874  0863               	movf	_pwm1DutyForIdrv+1,w
 12690  0875  003B               	movlb	27	; select bank27
 12691  0876  0094               	movwf	20	;volatile
 12692                           
 12693                           ;interrupt_manager.c: 120: PWM1DCL = (pwm1DutyForIdrv);
 12694  0877  0020               	movlb	0	; select bank0
 12695  0878  0862               	movf	_pwm1DutyForIdrv,w
 12696  0879  003B               	movlb	27	; select bank27
 12697  087A  0093               	movwf	19	;volatile
 12698  087B                     i1l312:	
 12699  087B  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12700  087C  0009               	retfie
 12701  087D                     __end_of_INTERRUPT_InterruptManager:	
 12702  007E                     btemp	set	126	;btemp
 12703  007E                     int$flags	set	126
 12704  007E                     wtemp	set	126
 12705  007E                     wtemp0	set	126
 12706  0080                     wtemp1	set	128
 12707  0082                     wtemp2	set	130
 12708  0084                     wtemp3	set	132
 12709  0086                     wtemp4	set	134
 12710  0088                     wtemp5	set	136
 12711  007F                     wtemp6	set	127
 12712  007E                     ttemp	set	126
 12713  007E                     ttemp0	set	126
 12714  0081                     ttemp1	set	129
 12715  0084                     ttemp2	set	132
 12716  0087                     ttemp3	set	135
 12717  007F                     ttemp4	set	127
 12718  007E                     ltemp	set	126
 12719  007E                     ltemp0	set	126
 12720  0082                     ltemp1	set	130
 12721  0086                     ltemp2	set	134
 12722  0080                     ltemp3	set	128


Data Sizes:
    Strings     10
    Constant    0
    Data        24
    BSS         233
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     42      70
    BANK1            80      0      72
    BANK2            80     21      49
    BANK3            80      0      64
    BANK4            80      0      64
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           60      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    crc_append@message	PTR unsigned char  size(2) Largest target is 132
		 -> modbusBuf(BANK4[64]), sysData(BIGRAM[132]), 

    crc_verify@message	PTR unsigned char  size(2) Largest target is 132
		 -> modbusBuf(BANK4[64]), sysData(BIGRAM[132]), 

    crc_sum@buf	PTR unsigned char  size(2) Largest target is 132
		 -> modbusBuf(BANK4[64]), sysData(BIGRAM[132]), 

    m_mem_cpy_len@s	PTR unsigned char  size(2) Largest target is 132
		 -> modbusBuf(BANK4[64]), sysData(BIGRAM[132]), eusartRxBuffer(BANK3[64]), 

    m_mem_cpy_len@d	PTR unsigned char  size(2) Largest target is 64
		 -> crc_verify@expected(BANK0[2]), modbusBuf(BANK4[64]), 

    m_mem_cpy@s	PTR unsigned char  size(2) Largest target is 10
		 -> STR_1(CODE[10]), 

    m_mem_cpy@d	PTR unsigned char  size(1) Largest target is 16
		 -> str(BANK2[16]), 

    modbus_response_process@rbuf	PTR unsigned char  size(1) Largest target is 64
		 -> modbusBuf(BANK4[64]), 

    modbus_response_process@pmdbs	PTR struct . size(1) Largest target is 64
		 -> modbusBuf(BANK4[64]), 

    modbus_response_command@rbuf	PTR unsigned char  size(1) Largest target is 64
		 -> modbusBuf(BANK4[64]), 

    modbus_response_command@pmdbs	PTR struct . size(1) Largest target is 64
		 -> modbusBuf(BANK4[64]), 

    modbus_response_write_mult_register@rbuf	PTR unsigned char  size(1) Largest target is 64
		 -> modbusBuf(BANK4[64]), 

    modbus_response_write_mult_register@stb	PTR struct . size(1) Largest target is 64
		 -> modbusBuf(BANK4[64]), 

    modbus_response_write_single_register@rbuf	PTR unsigned char  size(1) Largest target is 64
		 -> modbusBuf(BANK4[64]), 

    modbus_response_write_single_register@pmdbs	PTR struct . size(1) Largest target is 64
		 -> modbusBuf(BANK4[64]), 

    getRegisterVal@tempData	PTR unsigned int  size(1) Largest target is 2
		 -> modbus_response_command@tempData(BANK0[2]), 

    modbus_response_illgeal_function@buf	PTR unsigned char  size(1) Largest target is 64
		 -> modbusBuf(BANK4[64]), 

    modbus_response_illgeal_function@pmdbs	PTR struct . size(1) Largest target is 64
		 -> modbusBuf(BANK4[64]), 

    my_flash_system_write@buf	PTR unsigned char  size(2) Largest target is 132
		 -> sysData(BIGRAM[132]), 

    my_flash_system_read@buf	PTR unsigned char  size(2) Largest target is 132
		 -> sysData(BIGRAM[132]), 

    uart_send_len@buf	PTR unsigned char  size(1) Largest target is 64
		 -> modbusBuf(BANK4[64]), 

    uart_send_str@str	PTR unsigned char  size(1) Largest target is 16
		 -> str(BANK2[16]), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_adc_sample
    _sys_data_init->_my_flash_system_read
    _pid_pwm2_vout_run->___awdiv
    _set_vout_pwm2_duty->_get_vout_pwm2_duty
    _pid_pwm1_idrv_run->___lmul
    _pid_pwm1_idrv_b_b->___lmul
    _set_idrv_pwm1_duty->_get_idrv_pwm1_duty
    _modbus_response_process->_modbus_response_command
    _modbus_response_process->_modbus_response_write_mult_register
    _my_flash_read_system_erase->_FLASH_EraseBlock
    _modbus_response_command->_getRegisterVal
    _crc_append->_crc_sum
    _crc_verify->_crc_sum
    _calc_temp_rs->___lldiv
    _calc_temp_rs->___lmul
    _calc_temp_rc->___lldiv
    _calc_temp_rc->___lmul
    _calc_rs_lo_avg->___lldiv
    _calc_expect_vout_adc_value->___lmul
    ___aldiv->___lmul
    _adc_sample->_adc_init
    _adc_sample->_fvr_set_gain
    _TMR2_Initialize->_TMR2_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_pid_pwm1_idrv_run
    _sys_data_init->_sys_data_save
    _pid_pwm1_idrv_run->___aldiv
    _pid_pwm1_idrv_b_b->___aldiv
    _modbus_response_process->_modbus_response_write_single_register
    _modbus_response_write_single_register->_sys_data_save
    _modbus_response_write_mult_register->_sys_data_save
    _sys_data_save->_crc_append
    _sys_data_save->_my_flash_system_write
    _modbus_response_illgeal_function->_crc_append
    _modbus_response_command->_crc_append
    _calc_temp_rs->___lldiv
    _calc_temp_rc->___lldiv
    _calc_rs_lo_avg->___lldiv
    _calc_expect_vout_adc_value->___aldiv
    ___aldiv->___lmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_calc_expect_vout_adc_value

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   52103
                                             40 BANK0      2     2      0
                  _SYSTEM_Initialize
                         _adc_sample
         _calc_expect_vout_adc_value
                     _calc_rs_lo_avg
                       _calc_temp_rc
                       _calc_temp_rs
                          _m_mem_cpy
                      _m_mem_cpy_len
            _modbus_response_process
                  _pid_pwm1_idrv_b_b
                  _pid_pwm1_idrv_run
                  _pid_pwm2_vout_run
                      _sys_data_init
                      _sys_data_save
                _uart_received_start
                      _uart_send_len
                      _uart_send_str
 ---------------------------------------------------------------------------------
 (1) _uart_send_str                                        1     1      0      75
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _uart_received_start                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sys_data_init                                       10    10      0    4836
                                             13 BANK0     10    10      0
                             ___wmul
                         _crc_verify
               _my_flash_system_read
                      _sys_data_save
 ---------------------------------------------------------------------------------
 (2) _my_flash_system_read                                11     7      4     288
                                              1 COMMON    11     7      4
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     348
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _pid_pwm2_vout_run                                    5     5      0    1079
                                              9 COMMON     1     1      0
                                              0 BANK0      4     4      0
                            ___awdiv
                            ___lwdiv
                 _set_vout_pwm2_duty
 ---------------------------------------------------------------------------------
 (2) _set_vout_pwm2_duty                                   4     2      2     176
                                              3 COMMON     4     2      2
                 _get_vout_pwm2_duty
 ---------------------------------------------------------------------------------
 (3) _get_vout_pwm2_duty                                   2     0      2       0
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                              1 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     428
                                              1 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _pid_pwm1_idrv_run                                   22    22      0    4927
                                             18 BANK0     22    22      0
                            ___aldiv
                             ___lmul
                 _set_idrv_pwm1_duty
 ---------------------------------------------------------------------------------
 (1) _pid_pwm1_idrv_b_b                                    5     5      0    4770
                                              9 COMMON     1     1      0
                                             18 BANK0      4     4      0
                            ___aldiv
                             ___lmul
                 _set_idrv_pwm1_duty
 ---------------------------------------------------------------------------------
 (2) _set_idrv_pwm1_duty                                   4     2      2     368
                                              3 COMMON     4     2      2
                 _get_idrv_pwm1_duty
 ---------------------------------------------------------------------------------
 (3) _get_idrv_pwm1_duty                                   2     0      2       0
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _modbus_response_process                              5     3      2   19041
                                             26 BANK0      4     2      2
                         _crc_verify
            _modbus_response_command
   _modbus_response_illgeal_function
_modbus_response_write_mult_register
_modbus_response_write_single_regist
 ---------------------------------------------------------------------------------
 (2) _modbus_response_write_single_register               13    13      0    5653
                                             13 BANK0     13    13      0
                         _crc_append
                      _sys_data_save
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (2) _modbus_response_write_mult_register                  5     5      0    5115
                                             11 COMMON     1     1      0
                                             13 BANK0      4     4      0
                         _crc_append
                      _sys_data_save
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (1) _sys_data_save                                        2     2      0    2469
                                             11 BANK0      2     2      0
                         _crc_append
         _my_flash_read_system_erase
              _my_flash_system_write
 ---------------------------------------------------------------------------------
 (2) _my_flash_system_write                               16    12      4     451
                                              1 COMMON     5     1      4
                                              0 BANK0     11    11      0
 ---------------------------------------------------------------------------------
 (2) _my_flash_read_system_erase                           0     0      0     439
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_EraseBlock                                     3     1      2     439
                                              1 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (2) _modbus_response_illgeal_function                     3     2      1    2531
                                             11 BANK0      3     2      1
                         _crc_append
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (2) _modbus_response_command                             11    11      0    3821
                                             11 COMMON     1     1      0
                                             11 BANK0     10    10      0
                         _crc_append
                     _getRegisterVal
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (1) _uart_send_len                                        4     3      1     560
                                              1 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (3) _getRegisterVal                                      10     7      3     687
                                              1 COMMON    10     7      3
 ---------------------------------------------------------------------------------
 (2) _crc_append                                          11     7      4    1579
                                              0 BANK0     11     7      4
                            _crc_sum
 ---------------------------------------------------------------------------------
 (2) _crc_verify                                           8     4      4    1498
                                              0 BANK0      8     4      4
                            _crc_sum
                      _m_mem_cpy_len
 ---------------------------------------------------------------------------------
 (3) _m_mem_cpy_len                                        7     1      6     409
                                              1 COMMON     7     1      6
 ---------------------------------------------------------------------------------
 (3) _crc_sum                                             10     6      4     555
                                              1 COMMON    10     6      4
 ---------------------------------------------------------------------------------
 (1) _m_mem_cpy                                            4     2      2     265
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _calc_temp_rs                                        12     8      4    3072
                                              5 BANK0     12     8      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) _calc_temp_rc                                        16    12      4    3140
                                              5 BANK0     16    12      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) _calc_rs_lo_avg                                       9     7      2    1181
                                              9 COMMON     2     0      2
                                              5 BANK0      7     7      0
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     776
                                              1 COMMON     8     0      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _calc_expect_vout_adc_value                          36    34      2    5287
                                             18 BANK0     14    12      2
                                              0 BANK2     21    21      0
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8    2089
                                              1 COMMON     8     0      8
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8    2121
                                              4 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _adc_sample                                           9     7      2     894
                                              3 COMMON     9     7      2
                           _adc_init
                       _fvr_set_gain
 ---------------------------------------------------------------------------------
 (2) _fvr_set_gain                                         2     2      0      69
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _adc_init                                             2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      98
                    _ADC1_Initialize
                  _EUSART_Initialize
                     _FVR_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM1_Initialize
                    _PWM2_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0      75
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR2_SetInterruptHandler                             2     0      2      75
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _ADC1_Initialize
     _EUSART_Initialize
     _FVR_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM1_Initialize
     _PWM2_Initialize
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
       _TMR2_StartTimer
     _WDT_Initialize
   _adc_sample
     _adc_init
     _fvr_set_gain
   _calc_expect_vout_adc_value
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _calc_rs_lo_avg
     ___lldiv
   _calc_temp_rc
     ___lldiv
     ___lmul
   _calc_temp_rs
     ___lldiv
     ___lmul
   _m_mem_cpy
   _m_mem_cpy_len
   _modbus_response_process
     _crc_verify
       _crc_sum
       _m_mem_cpy_len
     _modbus_response_command
       _crc_append
         _crc_sum
       _getRegisterVal
       _uart_send_len
     _modbus_response_illgeal_function
       _crc_append
         _crc_sum
       _uart_send_len
     _modbus_response_write_mult_register
       _crc_append
         _crc_sum
       _sys_data_save
         _crc_append
           _crc_sum
         _my_flash_read_system_erase
           _FLASH_EraseBlock
         _my_flash_system_write
       _uart_send_len
     _modbus_response_write_single_register
       _crc_append
         _crc_sum
       _sys_data_save
         _crc_append
           _crc_sum
         _my_flash_read_system_erase
           _FLASH_EraseBlock
         _my_flash_system_write
       _uart_send_len
   _pid_pwm1_idrv_b_b
     ___aldiv
       ___lmul (ARG)
     ___lmul
     _set_idrv_pwm1_duty
       _get_idrv_pwm1_duty
   _pid_pwm1_idrv_run
     ___aldiv
       ___lmul (ARG)
     ___lmul
     _set_idrv_pwm1_duty
       _get_idrv_pwm1_duty
   _pid_pwm2_vout_run
     ___awdiv
     ___lwdiv
     _set_vout_pwm2_duty
       _get_vout_pwm2_duty
   _sys_data_init
     ___wmul
     _crc_verify
       _crc_sum
       _m_mem_cpy_len
     _my_flash_system_read
     _sys_data_save
       _crc_append
         _crc_sum
       _my_flash_read_system_erase
         _FLASH_EraseBlock
       _my_flash_system_write
   _sys_data_save
     _crc_append
       _crc_sum
     _my_flash_read_system_erase
       _FLASH_EraseBlock
     _my_flash_system_write
   _uart_received_start
   _uart_send_len
   _uart_send_str

 _INTERRUPT_InterruptManager (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3E0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     2A      46       5       87.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      48       7       90.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     15      31       9       61.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      40      11       80.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      40      13       80.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     14C      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              3C      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           20      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     14C      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sat Nov 24 14:47:36 2018

              __end_of_TMR2_SetInterruptHandler 0F67                                               pc 0002  
                  ??_my_flash_read_system_erase 0074                                              PL2 14AE  
                                            PL4 14BF                                              PL6 178C  
                                            PL8 1344                                    ___awdiv@sign 0076  
                        __end_of_FVR_Initialize 0A5C                             ___wmul@multiplicand 0073  
                                           PL10 0EFB                                             PL20 17A0  
                                           PL12 1358                                             PL30 17B5  
                                           PL22 17A6                                             PL14 0F0E  
                                           PL40 17C9                                             PL32 17BB  
                                           PL24 10DE                                             PL16 0F17  
                                           PL50 17E1                                             PL42 17CF  
                                           PL34 1213                                             PL26 17AF  
                                           PL18 1798                                             PL60 0F38  
                                           PL52 0F2C                                             PL44 17D4  
                                           PL36 0F1E                                             PL28 120A  
                                           PL62 17F4                                             PL54 17E8  
                                           PL46 0F26                                             PL38 17C3  
                                           PL64 17FA                                             PL56 17EF  
                                           PL48 17DA                                             PL66 1EFA  
                                           PL58 0F33                                             PL68 0F3E  
                                           l502 0EF7                                             l610 0ACC  
                                           l514 0EBC                                             l604 0AE8  
                                           l509 0EB4                                             l518 0ECA  
                                           l642 10D5                                             l629 0A25  
                                           l493 0EE7                                             l830 1778  
                                           l496 0EF3                                             l666 0DA6  
                                           l498 0EEB                                             l677 0D7A  
                                           l686 11EE                                             l696 1E3C  
                                           l699 1E62                                             _GIE 005F  
                                           _PR2 001B                                 _pwm1DutyForIdrv 0062  
                                           _bbu 00CC                                             _err 00A0  
                                           _str 012C                                 _TMR2_Initialize 0F57  
                                           wreg 0009                            ??_get_vout_pwm2_duty 0073  
                          ??_set_vout_pwm2_duty 0075                                 ??_uart_send_len 0072  
                               ??_uart_send_str 0071                                            S4921 0FB4  
                                          S4923 0F6A                                            l1210 0DB7  
                                          l1133 1745                                   calc_temp_rc@x 002D  
                                 calc_temp_rc@y 0031                                            l1136 1750  
                                          l1166 0E18                                            l3103 1340  
                                          l3031 0EB8                                            l3007 16D4  
                                          l3121 0BAD                                            l3009 172B  
                                          l3019 0F67                                            l3061 12AC  
                                          l3071 12D9                                            l3063 12BF  
                                          l3311 1E05                                            l3233 0F44  
                                          l4025 0E94                                            l3081 1303  
                                          l3073 12E1                                            l3065 12C5  
                                          l3057 1296                                            l3241 0E3B  
                                          l4027 0EAA                                            l3083 130B  
                                          l3075 12E9                                            l3067 12CB  
                                          l3059 129E                                            l3091 1323  
                                          l3085 1313                                            l3077 12F1  
                                          l3069 12D1                                            l3093 1330  
                                          l3253 1EDA                                            l3309 1DE1  
                                          l3087 131B                                            l3079 12FA  
                                          l3503 1D9C                                            l3601 1EA8  
                                          l3269 0AE3                                            l4333 1561  
                                          l3605 1EB0                                            l3711 0A1E  
                                          l3631 0E8A                                            l4343 1600  
                                          l4327 1554                                            l3721 0A3E  
                                          l4521 0E0A                                            l4513 0DF6  
                                          l4505 0DD9                                            l4265 1732  
                                          l4353 1594                                            l4345 157F  
                                          l3627 0E84                                            l3619 0E67  
                                          l4267 175E                                            l4259 174E  
                                          l4517 0DFC                                            l4445 124A  
                                          l4277 1619                                            l4613 0D3F  
                                          l3573 1E7F                                            l3653 1ED1  
                                          l3645 1EC2                                            l3719 0A1F  
                                          l4711 13A8                                            l4535 0B8B  
                                          l4615 0D49                                            l4721 1409  
                                          l4561 10CF                                            l4537 0B97  
                                          l4457 124B                                            l4385 1602  
                                          l3657 1ED5                                            l4707 13A1  
                                          l4539 0B9D                                            l4459 126E  
                                          l3579 1E88                                            l3499 1D96  
                                          l4477 0E23                                            l4741 14A6  
                                          l4725 1411                                            l4389 1607  
                                          l4581 0C15                                            l4573 0BF2  
                                          l4653 11D4                                            l3597 1EA4  
                                          l3589 1E95                                            l4813 0902  
                                          l4495 0DC6                                            l4559 10C3  
                                          l2895 169D                                            l2983 16FD  
                                          l2967 16CF                                            l4575 0C00  
                                          l4567 0BE9                                            l4655 11DA  
                                          l3871 1E2C                                            l4823 092D  
                                          l4815 0904                                            l2993 170E  
                                          l2985 16FF                                            l4593 0C2E  
                                          l4569 0BEA                                            l4657 11E9  
                                          l2979 16E3                                            l4579 0C07  
                                          l4851 09BB                                            l4693 1362  
                                          l4669 0AF0                                            l4781 14F3  
                                          l3885 1E6F                                            l4757 1D46  
                                          l4783 14F5                                            l4775 14D1  
                                          l4785 14F7                                            l4865 09EB  
                                          l4699 138F                                            l4779 14F0  
                                          l4877 0A07                                   calc_temp_rs@x 0029  
                                 calc_temp_rs@y 002D                                            l4879 0A09  
                                          STR_1 1800                         __end_of_PWM1_Initialize 0AAF  
                                          u2205 0E79                                            u3005 1DD4  
                                          _LATA 010C                                            _LATC 010E  
                                          u2155 1E9D                                            u1525 16C4  
                                          u2245 1ECA                                            u2335 0A33  
                                          u1545 16F1                                            u1705 1EEA  
                                          u2505 1E5B                                            u3315 0DEB  
                                          u2515 1E69                                            u1670 0A94  
                                          u1575 16DA                                            u3423 0D68  
                                          u3433 0D95                                            u1745 1DE7  
                                          u3523 1404                                            u2485 1E26  
                                          u1695 0E4B                                            u2495 1E36  
                                          u3545 141F                                            u3475 1381  
                                          u3495 1399                                            u3697 0A16  
                                          u2995 1738                                   _m_mem_cpy_len 0BAD  
                                          _TMR2 001A                                            _WPUA 020C  
                                          _WPUC 020E                                            _bbt0 00BC  
                                          _bbt1 00C0                                            _bbta 00C4  
                                          _bbku 00B8                                            _bbtu 00C8  
                                          _main 08E0  modbus_response_write_single_register@startAddr 0037  
                                          _pidU 00DC             __size_of_my_flash_read_system_erase 001C  
                                          fsr0h 0005                                            fsr1h 0007  
                                          fsr0l 0004                                            indf0 0000  
                                          indf1 0001                                            fsr1l 0006  
                                          btemp 007E                                            ltemp 007E  
                                          start 087D                                 _pwm2DutyForVout 0064  
                                          ttemp 007E                                            wtemp 007E  
                     ??_modbus_response_command 007B                             pid_pwm1_idrv_run@ei 003A  
                           pid_pwm1_idrv_run@ep 0036                         __end_of_PWM2_Initialize 0AC7  
                     ??_modbus_response_process 007C                                 ?_FVR_Initialize 0070  
                __size_of_OSCILLATOR_Initialize 0001                   __end_of_OSCILLATOR_Initialize 0A5D  
                               __end_of___aldiv 0E13                                           ?_main 0070  
                               __end_of___awdiv 1EB5                                 __end_of___lldiv 0E93  
                               ___awdiv@divisor 0071                                           _T2CON 001C  
                               __end_of___lwdiv 1EDA                                           i1l312 087B  
                               ___awdiv@counter 0075                                           _RCREG 0199  
                                         _RCSTA 019D                                           _TRISA 008C  
                                         _TRISC 008E                                           _TXREG 019A  
                                         _TXSTA 019E                modbus_response_command@startAddr 002D  
                           ___lmul@multiplicand 0075                                           _PidKp 00AC  
                                         _PidTd 00B0                                           _Event 005C  
                                         _PidTi 00B4                                 __end_of_crc_sum 1763  
                          pid_pwm1_idrv_b_b@t32 0032                                           _bbmax 00D4  
                                         _bbmin 00D8                                  _WDT_Initialize 0AC7  
                                         _resRc 00E0                                           _resRs 00E4  
        modbus_response_write_mult_register@len 002E                                  ?_m_mem_cpy_len 0071  
        modbus_response_write_mult_register@stb 0030                                           ltemp0 007E  
                                         ltemp1 0082                                           ltemp2 0086  
                                         ltemp3 0080                      __end_of_get_idrv_pwm1_duty 0ED5  
                    __end_of_set_idrv_pwm1_duty 0E54                                           ttemp0 007E  
                                         ttemp1 0081                                           ttemp2 0084  
                                         ttemp3 0087                                           ttemp4 007F  
                            crc_verify@expected 0026                                           status 0003  
                                         wtemp0 007E                                           wtemp1 0080  
                                         wtemp2 0082                                           wtemp3 0084  
                                         wtemp4 0086                                           wtemp5 0088  
                                         wtemp6 007F                                 _TMR2_StartTimer 0F67  
                                 fvr_set_gain@g 0072     __end_of_modbus_response_write_mult_register 1546  
  __size_of_modbus_response_write_mult_register 004B           ??_modbus_response_write_mult_register 007B  
          ?_modbus_response_write_mult_register 0070             _modbus_response_write_mult_register 14FB  
            __end_of_calc_expect_vout_adc_value 14AE                      _calc_expect_vout_adc_value 1360  
                          pid_pwm1_idrv_run@t32 0044                            pid_pwm1_idrv_run@t16 0042  
                               __initialization 087F                                    __end_of_main 0A0B  
                         __size_of_calc_temp_rc 00A0                           __size_of_calc_temp_rs 0073  
                       __end_of_TMR2_Initialize 0F66                     ?_INTERRUPT_InterruptManager 0070  
           modbus_response_illgeal_function@buf 002C                        _TMR2_SetInterruptHandler 0F66  
                                        ??_main 0048                                ??_calc_rs_lo_avg 0025  
                   modbus_response_process@rbuf 003D                   __size_of_my_flash_system_read 0031  
                   modbus_response_process@rlen 003A                 __end_of_modbus_response_command 1293  
                        __end_of_WDT_Initialize 0ACB                    my_flash_system_write@blocNum 0023  
                                        _ADCON0 009D                                          _ADCON1 009E  
                                        _ADCON2 009F                                          _ADRESH 009C  
                                        _ADRESL 009B                                ___awdiv@dividend 0073  
                                        _ANSELA 018C                                          _ANSELC 018E  
               __end_of_modbus_response_process 14FB                                __end_of_adc_init 0ADA  
                              ?_PWM1_Initialize 0070                                          _ODCONA 028C  
                                        _ODCONC 028E                                          i1l4051 081E  
                                        i1l4061 0828                                          i1l4045 0818  
                                        i1l4063 082F                                          i1l4073 083D  
                                        i1l4081 084E                                          i1l4079 084B  
                                        i1l4097 0866                                          _FVRCON 0117  
                                        _PMADRH 0192                                          _PMADRL 0191  
                                        _PMDATH 0194                                          _PMDATL 0193  
                                        _PMCON2 0196                       __size_of_FLASH_EraseBlock 0018  
                   __end_of_uart_received_start 0EE3                                          _SPBRGH 019C  
                                        _SPBRGL 019B                                          _WDTCON 0097  
                                  _calc_temp_rc 103E                                    _calc_temp_rs 0B3A  
                               calc_rs_lo_avg@i 002B                                 calc_rs_lo_avg@x 0079  
            __end_of_my_flash_read_system_erase 169D                      _my_flash_read_system_erase 1681  
    modbus_response_write_single_register@pmdbs 0036                                          ___lmul 0E13  
                                     ??___aldiv 0079                                          ___wmul 1D94  
                                     ??___awdiv 0075                                       ??___lldiv 0079  
                                     ??___lwdiv 0075                                ?_PWM2_Initialize 0070  
                                        _pwm2Ei 004A                                ___awdiv@quotient 0077  
                      my_flash_system_write@buf 0071                        my_flash_system_write@len 0073  
                      my_flash_system_write@loc 0025                                       ??_crc_sum 0075  
                      __size_of_ADC1_Initialize 0004                                 ?_WDT_Initialize 0070  
                               ??_m_mem_cpy_len 0077                my_flash_system_write@GIEBitValue 0022  
                       __end_of_TMR2_StartTimer 0F6A        TMR2_SetInterruptHandler@InterruptHandler 0071  
               modbus_response_command@tempData 0033        __end_of_modbus_response_illgeal_function 178C  
     __size_of_modbus_response_illgeal_function 0029               ?_modbus_response_illgeal_function 002B  
            ??_modbus_response_illgeal_function 007B                _modbus_response_illgeal_function 1763  
                                 ?_fvr_set_gain 0070                                  fvr_set_gain@t8 0071  
                             _SYSTEM_Initialize 0A43                         __end_of__initialization 08DD  
                        __size_of_sys_data_init 0076                           _my_flash_system_write 16B5  
                            ?_SYSTEM_Initialize 0070                          __size_of_sys_data_save 003A  
                            getRegisterVal@addr 0071                                  __pcstackCOMMON 0070  
                                  __pidataBANK0 0FC0                                    __pidataBANK1 0F88  
                           ??_SYSTEM_Initialize 0073                                      _adc_sample 0A0B  
        modbus_response_write_single_register@i 0034                                ?_TMR2_Initialize 0070  
                                    __end_ofPL2 14BF                                      __end_ofPL4 14C3  
                                    __end_ofPL6 1798                                      __end_ofPL8 1358  
                                _OPTION_REGbits 0095        modbus_response_write_single_register@t16 0032  
                             crc_append@message 0020                          getRegisterVal@tempAddr 007A  
                        my_flash_system_write@i 0029                          my_flash_system_write@j 0020  
                        getRegisterVal@tempData 0073                       __end_of_SYSTEM_Initialize 0A54  
                                ??_fvr_set_gain 0071                              __size_of_m_mem_cpy 001D  
                                    __pbssBANK0 004A                                      __pbssBANK1 00A0  
                                    __pbssBANK2 0120                                      __pbssBANK3 01A0  
                                    __pbssBANK4 0220                  modbus_response_command@tmpAddr 002B  
               my_flash_system_read@GIEBitValue 0077                                      adc_init@ch 0072  
                              ??_FVR_Initialize 0071                                      __pmaintext 08E0  
                    modbus_response_command@len 0031                                         ?___lmul 0071  
                                       ?___wmul 0071                                      __pintentry 0804  
                  ??_calc_expect_vout_adc_value 0034                                         _BAUDCON 019F  
                                ___lmul@product 0020                                      _crc_append 1653  
                                     ?_adc_init 0070                                    adc_sample@ch 0076  
                                 _sys_data_init 1D1E                                   _sys_data_save 1619  
                                    _crc_verify 1DA9                                   _eusartRxCount 007C  
                   __size_of_get_vout_pwm2_duty 0007                     __size_of_set_vout_pwm2_duty 0019  
                                       _PWM1DCH 0D94                                         _PWM1DCL 0D93  
                                       _PWM2DCH 0DA4                                         _PWM2DCL 0DA3  
                                       _PWM1CON 0D9B                                         _PWM2CON 0DAB  
                                       _PWM1OFH 0D98                                         _PWM1OFL 0D97  
                                       _PWM2OFH 0DA8                                         _PWM1PHH 0D92  
                                       _PWM2OFL 0DA7                                         _PWM1PHL 0D91  
                                       _PWM2PHH 0DA2                                         _PWM2PHL 0DA1  
                                       _PWM1PRH 0D96                                         _PWM1PRL 0D95  
                                       _PWM2PRH 0DA6                                         _PWM2PRL 0DA5  
         modbus_response_illgeal_function@pmdbs 002D                                         _PPSLOCK 0E0F  
                             ??_ADC1_Initialize 0071                                ?_TMR2_StartTimer 0070  
                        set_idrv_pwm1_duty@duty 0073                           __end_of_uart_send_len 0ECE  
                         __end_of_uart_send_str 0EFB                                _FLASH_EraseBlock 169D  
                        ?_my_flash_system_write 0071                         __size_of_getRegisterVal 00B1  
                   ?_calc_expect_vout_adc_value 0032     modbus_response_write_single_register@fiSave 0031  
                    ??_TMR2_SetInterruptHandler 0073                                         ___aldiv 0DA7  
                                       ___awdiv 1E75                                 __size_of___lmul 0028  
                                       ___lldiv 0E54                                 __size_of___wmul 0015  
                            _get_idrv_pwm1_duty 0ECE                              _set_idrv_pwm1_duty 0E3B  
                                       ___lwdiv 1EB5                                     ?_adc_sample 0073  
                             __end_of_m_mem_cpy 0EB0                                  adc_sample@gfvr 0073  
                                    _pidTestNum 005F                                  ?_sys_data_init 0070  
                                ?_sys_data_save 0070                                      ??_adc_init 0071  
                                       __ptext1 0EE3                                         __ptext2 0ED5  
                                       __ptext3 1D1E                                         __ptext4 1DD7  
                                       __ptext5 1D94                                         __ptext6 1E08  
                                       __ptext7 1EDA                                         __ptext8 1EF3  
                                       __ptext9 1EB5                                         _crc_sum 172D  
                                       _pidBbSm 005E                             ?_get_idrv_pwm1_duty 0071  
                           ?_set_idrv_pwm1_duty 0073                           _OSCILLATOR_Initialize 0A5C  
                                     _T2CONbits 001C                                      _rsLoAvgBuf 0120  
                                       _rsLoAvg 004C                                ___aldiv@dividend 0028  
                      ??_PIN_MANAGER_Initialize 0071                                         _sysData 235C  
                    __size_of_SYSTEM_Initialize 0011                                         clrloop0 0F9D  
                          end_of_initialization 08DD                                         init_ram 0FA8  
                      ?_modbus_response_command 0070                                         initloop 0FA9  
                  __end_of_my_flash_system_read 1E08                            ??_get_idrv_pwm1_duty 0073  
                           pid_pwm2_vout_run@ei 0020                            ??_set_idrv_pwm1_duty 0075  
                             _EUSART_Initialize 0F44                                 ___lldiv@divisor 0071  
                                    _voExpectMv 005A                                 ___lldiv@counter 0024  
                            ?_EUSART_Initialize 0070                        ?_modbus_response_process 003A  
                                     _RCSTAbits 019D                     ?_my_flash_read_system_erase 0070  
                              ___aldiv@quotient 002E                                       _PWM1LDCON 0D9F  
                                     _PWM2LDCON 0DAF                                       _PWM1OFCON 0DA0  
                                     _PWM2OFCON 0DB0                                    __pstringtext 1800  
                          __end_of_fvr_set_gain 0AEB                                     ?_crc_append 0020  
                                    _subTickerX 0060                             ??_EUSART_Initialize 0071  
                              ??_WDT_Initialize 0071                                     ?_crc_verify 0020  
                                    crc_sum@crc 0079                                      crc_sum@buf 0071  
                                    crc_sum@len 0073                                       _RXPPSbits 0E15  
                           __size_of_adc_sample 0038                       __end_of_EUSART_Initialize 0F57  
                                  _globalTicker 00D0                                       _TXSTAbits 019E  
                      __size_of_PWM1_Initialize 0019                    __size_of_uart_received_start 000E  
                  _TMR2_DefaultInterruptHandler 0000                                 ??_sys_data_init 002D  
                                    m_mem_cpy@d 0074                                 ??_sys_data_save 002B  
                                    m_mem_cpy@s 0071                                  __end_of___lmul 0E3B  
                                __end_of___wmul 1DA9                                _voExpectAdcValue 0058  
                                _rtAdcValueRcHi 004E                                  _rtAdcValueRcLo 0050  
                                _rtAdcValueRsHi 0052                                  _rtAdcValueVoFb 0056  
                                _rtAdcValueRsLo 0054                          ?_OSCILLATOR_Initialize 0070  
                             crc_verify@message 0020                                     __end_ofPL10 0F0E  
                                   __end_ofPL20 17A6                                     __end_ofPL12 1360  
                                   __end_ofPL30 17BB                                     __end_ofPL22 17AF  
                                   __end_ofPL14 0F17                                     __end_ofPL40 17CF  
                                   __end_ofPL32 17C3                                     __end_ofPL24 10E7  
                                   __end_ofPL16 0F1E                                     __end_ofPL50 17E8  
                                   __end_ofPL42 17D4                                     __end_ofPL34 121B  
                                   __end_ofPL26 17B5                                     __end_ofPL18 17A0  
                                   __end_ofPL60 0F3E                                     __end_ofPL52 0F33  
                                   __end_ofPL44 17DA                                     __end_ofPL36 0F26  
                                   __end_ofPL28 1213                                     __end_ofPL62 17FA  
                                   __end_ofPL54 17EF                                     __end_ofPL46 0F2C  
                                   __end_ofPL38 17C9                                     __end_ofPL64 1800  
                                   __end_ofPL56 17F4                                     __end_ofPL48 17E1  
                                   __end_ofPL66 1F00                                     __end_ofPL58 0F38  
                                   __end_ofPL68 0F44                             start_initialization 087F  
                      __size_of_PWM2_Initialize 0018                 __size_of_PIN_MANAGER_Initialize 0039  
                       my_flash_system_read@buf 0071                         my_flash_system_read@len 0073  
                         __end_of_m_mem_cpy_len 0BC8                                  _getRegisterVal 1293  
                       __size_of_calc_rs_lo_avg 004F                             __size_of_crc_append 002E  
                           __size_of_crc_verify 002E       modbus_response_write_single_register@rbuf 0039  
                                      ??___lmul 0079                                        ??___wmul 0075  
                                   __pdataBANK0 0062                                     __pdataBANK1 00D4  
                   FLASH_EraseBlock@GIEBitValue 0073                                 _ADC1_Initialize 0A54  
                      __end_of_FLASH_EraseBlock 16B5                            _my_flash_system_read 1DD7  
                                   __pbssBIGRAM 235C                               __size_of_adc_init 000F  
                                   __pbssCOMMON 007C                                       ___latbits 0002  
                                 __pcstackBANK0 0020                                   __pcstackBANK2 013C  
                      __size_of_TMR2_Initialize 000F                         ??_my_flash_system_write 0075  
                        __end_of_getRegisterVal 1344                           my_flash_system_read@i 0078  
                    __size_of_EUSART_Initialize 0013         modbus_response_illgeal_function@errcode 002B  
                         __size_of_fvr_set_gain 0011                                ___lwdiv@dividend 0073  
                        _PIN_MANAGER_Initialize 0A5D                     modbus_response_command@rbuf 0032  
                                      ?___aldiv 0024                                        ?___awdiv 0071  
                                      ?___lldiv 0071                                    ??_adc_sample 0075  
                                   adc_sample@i 0079                                        ?___lwdiv 0071  
                             ??_PWM1_Initialize 0071                    ??_INTERRUPT_InterruptManager 0070  
                         set_idrv_pwm1_duty@t16 0075                                       __pswtext1 0FB4  
                                     __pswtext2 0F6A                                        ?_crc_sum 0071  
                 my_flash_system_read@flashAddr 007A                      __end_of_get_vout_pwm2_duty 1EFA  
                         ?_my_flash_system_read 0071                      __end_of_set_vout_pwm2_duty 1EF3  
                                     _m_mem_cpy 0E93                                uart_send_len@buf 0074  
                              uart_send_len@len 0071                                   adc_sample@t16 007A  
                              ___lwdiv@quotient 0075                                   adc_sample@ret 0077  
                                 adc_sample@num 0074                                 ?_getRegisterVal 0071  
                              uart_send_str@str 0071                                    _fvr_set_gain 0ADA  
                                _eusartRxBuffer 01A0                                       _modbusBuf 0220  
                               ___aldiv@divisor 0024                               ??_PWM2_Initialize 0071  
                            __end_of_adc_sample 0A43                                 ___aldiv@counter 002C  
                                ___wmul@product 0075                               _pid_pwm1_idrv_b_b 0BC8  
                             _pid_pwm1_idrv_run 10E7                                       clear_ram0 0F9C  
                                m_mem_cpy_len@d 0071                                  m_mem_cpy_len@s 0073  
                                 ?_calc_temp_rc 0025                                   ?_calc_temp_rs 0025  
                                      _PIE1bits 0091                                        _PIE3bits 0093  
                      __size_of_TMR2_StartTimer 0003                          set_vout_pwm2_duty@duty 0073  
                            ?_pid_pwm1_idrv_b_b 0070             __size_of_INTERRUPT_InterruptManager 0079  
                            ?_pid_pwm1_idrv_run 0070                         __end_of_ADC1_Initialize 0A58  
                                      _PIR1bits 0011                                        _PIR3bits 0013  
                     FLASH_EraseBlock@startAddr 0071                                        _PWM1INTE 0D9C  
                                      _PWM1INTF 0D9D                                        _PWM2INTE 0DAC  
                                      _PWM2INTF 0DAD                                        _PWM1TMRH 0D9A  
                                      _PWM1TMRL 0D99                                        _PWM2TMRH 0DAA  
                                      _PWM2TMRL 0DA9                             ??_pid_pwm1_idrv_b_b 0079  
                                  ??_crc_append 0024                __size_of_modbus_response_command 0078  
                           ??_pid_pwm1_idrv_run 0032                          __size_of_uart_send_len 001E  
                        __size_of_uart_send_str 0018                                      _ADCON0bits 009D  
                             ___wmul@multiplier 0071                                    ??_crc_verify 007B  
                                    ?_m_mem_cpy 0071                         __size_of_FVR_Initialize 0004  
              __size_of_modbus_response_process 0038               __size_of_TMR2_SetInterruptHandler 0001  
                     ?_TMR2_SetInterruptHandler 0071                                     _isRunInBoot 0FFF  
                           _uart_received_start 0ED5                               _pid_pwm2_vout_run 1E08  
                             ___lmul@multiplier 0071                                crc_verify@crccal 0024  
                     __end_of_pid_pwm1_idrv_b_b 0DA7                                  _calc_rs_lo_avg 0AEB  
                            ?_pid_pwm2_vout_run 0070                       __end_of_pid_pwm1_idrv_run 120A  
                             ??_TMR2_Initialize 0073                                  ??_calc_temp_rc 0029  
                                ??_calc_temp_rs 0079                              __end_of_crc_append 1681  
                             calc_rs_lo_avg@t32 0027                     __size_of_get_idrv_pwm1_duty 0007  
                   __size_of_set_idrv_pwm1_duty 0019                             ??_pid_pwm2_vout_run 0079  
                            __end_of_crc_verify 1DD7                                    _PWM1INTFbits 0D9D  
                          ?_uart_received_start 0070                                    _PWM2INTFbits 0DAD  
                       ??_OSCILLATOR_Initialize 0071         modbus_response_write_mult_register@rbuf 002F  
                              __size_of___aldiv 006C                                __size_of___awdiv 0040  
                              __size_of___lldiv 003F                                __size_of___lwdiv 0025  
                        ??_my_flash_system_read 0075                                        _adc_init 0ACB  
                              __size_of_crc_sum 0036                             _eusartRxIdleTime_ms 005D  
                     __end_of_pid_pwm2_vout_run 1E75                                   crc_append@crc 0029  
                              sys_data_init@ret 0033                                 ___lwdiv@divisor 0071  
                               ___lwdiv@counter 0077                                        __ptext10 1E75  
                                      __ptext11 10E7                                        __ptext20 1681  
                                      __ptext12 0BC8                                        __ptext21 169D  
                                      __ptext13 0E3B                                        __ptext30 0E93  
                                      __ptext22 1763                                        __ptext14 0ECE  
                                      __ptext31 0B3A                                        __ptext23 121B  
                                      __ptext15 14C3                                        __ptext40 0ACB  
                                      __ptext32 103E                                        __ptext24 0EB0  
                                      __ptext16 1546                                        __ptext41 0A43  
                                      __ptext33 0AEB                                        __ptext25 1293  
                                      __ptext17 14FB                                        __ptext50 0A58  
                                      __ptext42 0AC7                                        __ptext34 0E54  
                                      __ptext26 1653                                        __ptext18 1619  
                                      __ptext51 0F44                                        __ptext43 0F57  
                                      __ptext35 1360                                        __ptext27 1DA9  
                                      __ptext19 16B5                                        __ptext52 0A54  
                                      __ptext44 0F67                                        __ptext36 0E13  
                                      __ptext28 0BAD                                        __ptext45 0F66  
                                      __ptext37 0DA7                                        __ptext29 172D  
                                      __ptext46 0AAF                                        __ptext38 0A0B  
                                      __ptext47 0A96                                        __ptext39 0ADA  
                                      __ptext48 0A5D                                        __ptext49 0A5C  
                        __end_of_calc_rs_lo_avg 0B3A                                   _uart_send_len 0EB0  
                                 _uart_send_str 0EE3                                   __size_of_main 012B  
                                 _subTickerX_1s 0061                           set_vout_pwm2_duty@t16 0075  
                                    _RA4PPSbits 0E94                           ??_uart_received_start 0071  
                                    _RA5PPSbits 0E95                                ?_ADC1_Initialize 0070  
                my_flash_system_write@flashAddr 0027                                        int$flags 007E  
                                      crc_sum@i 0077                                        crc_sum@j 0075  
                                    _RC5PPSbits 0EA5   __end_of_modbus_response_write_single_register 1619  
__size_of_modbus_response_write_single_register 00D3         ??_modbus_response_write_single_register 002D  
        ?_modbus_response_write_single_register 0070           _modbus_response_write_single_register 1546  
                             ??_TMR2_StartTimer 0071              __end_of_INTERRUPT_InterruptManager 087D  
                    _INTERRUPT_InterruptManager 0804                           __end_of_sys_data_init 1D94  
                         __end_of_sys_data_save 1653                               ?_FLASH_EraseBlock 0071  
                 calc_expect_vout_adc_value@t32 014C                     PIN_MANAGER_Initialize@state 0071  
                                   ??_m_mem_cpy 0073                        modbus_response_command@i 002F  
                            ??_FLASH_EraseBlock 0073                                      _INTCONbits 000B  
                                   _PWM1CONbits 0D9B                                m_mem_cpy_len@len 0075  
                                    _FVRCONbits 0117                                     _PWM2CONbits 0DAB  
                  INTERRUPT_InterruptManager@t8 0070                                 ?_calc_rs_lo_avg 0079  
                  modbus_response_process@pmdbs 003C                         __size_of_WDT_Initialize 0004  
                                ?_uart_send_len 0071                                  ?_uart_send_str 0070  
                                      intlevel1 0000                  __size_of_my_flash_system_write 0078  
                          pid_pwm2_vout_run@t16 0022                      __size_of_pid_pwm1_idrv_b_b 01DF  
                 __end_of_my_flash_system_write 172D                      __size_of_pid_pwm1_idrv_run 0123  
                                    _PMCON1bits 0195                                ___lldiv@dividend 0075  
                       ?_PIN_MANAGER_Initialize 0070    modbus_response_write_mult_register@startAddr 002D  
                                uart_send_len@i 0073                                     _PPSLOCKbits 0E0F  
                               _PWM1_Initialize 0A96                    modbus_response_command@pmdbs 0030  
                       _modbus_response_command 121B                    calc_expect_vout_adc_value@x0 0148  
                  calc_expect_vout_adc_value@x1 0140                    calc_expect_vout_adc_value@y0 0144  
                  calc_expect_vout_adc_value@y1 013C                                      _PWM1CLKCON 0D9E  
                                    _PWM2CLKCON 0DAE                          __size_of_m_mem_cpy_len 001B  
                                _FVR_Initialize 0A58                         _modbus_response_process 14C3  
                                sys_data_init@i 0035                                     crc_append@n 0022  
                          __end_of_calc_temp_rc 10DE                            __end_of_calc_temp_rs 0BAD  
                              ___lldiv@quotient 0020                                ??_getRegisterVal 0074  
                               _PWM2_Initialize 0AAF                      __size_of_pid_pwm2_vout_run 006D  
                                  ___aldiv@sign 002D                     calc_expect_vout_adc_value@i 0150  
                   calc_expect_vout_adc_value@x 0032             __size_of_calc_expect_vout_adc_value 014E  
                __end_of_PIN_MANAGER_Initialize 0A96                              _get_vout_pwm2_duty 1EF3  
                            _set_vout_pwm2_duty 1EDA                                     crc_verify@n 0022  
                           ?_get_vout_pwm2_duty 0071                             ?_set_vout_pwm2_duty 0073  
