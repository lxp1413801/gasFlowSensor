

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Sat Mar 30 16:58:58 2019

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16F1575
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	swtext1,local,class=CONST,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    55                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	intentry,global,class=CODE,delta=2
    72                           	dabs	1,0x620,32
    73                           	dabs	1,0x5A0,80
    74                           	dabs	1,0x55C,20
    75                           	dabs	1,0xFFF,1,_isRunInBoot
    76                           	dabs	1,0x235C,0,_sysData
    77                           	dabs	1,0x7E,2
    78  0000                     
    79                           ; Version 2.00
    80                           ; Generated 27/05/2018 GMT
    81                           ; 
    82                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution.
    96                           ; 
    97                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    98                           ;        software without specific prior written permission.
    99                           ; 
   100                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   101                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   102                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   103                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   104                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   105                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   106                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   107                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   108                           ; 
   109                           ; 
   110                           ; Code-generator required, PIC16F1575 Definitions
   111                           ; 
   112                           ; SFR Addresses
   113  0000                     	;# 
   114  0001                     	;# 
   115  0002                     	;# 
   116  0003                     	;# 
   117  0004                     	;# 
   118  0005                     	;# 
   119  0006                     	;# 
   120  0007                     	;# 
   121  0008                     	;# 
   122  0009                     	;# 
   123  000A                     	;# 
   124  000B                     	;# 
   125  000C                     	;# 
   126  000E                     	;# 
   127  0011                     	;# 
   128  0012                     	;# 
   129  0013                     	;# 
   130  0015                     	;# 
   131  0016                     	;# 
   132  0016                     	;# 
   133  0017                     	;# 
   134  0018                     	;# 
   135  0019                     	;# 
   136  001A                     	;# 
   137  001B                     	;# 
   138  001C                     	;# 
   139  008C                     	;# 
   140  008E                     	;# 
   141  0091                     	;# 
   142  0092                     	;# 
   143  0093                     	;# 
   144  0095                     	;# 
   145  0096                     	;# 
   146  0097                     	;# 
   147  0098                     	;# 
   148  0099                     	;# 
   149  009A                     	;# 
   150  009B                     	;# 
   151  009B                     	;# 
   152  009C                     	;# 
   153  009D                     	;# 
   154  009E                     	;# 
   155  009F                     	;# 
   156  010C                     	;# 
   157  010E                     	;# 
   158  0111                     	;# 
   159  0112                     	;# 
   160  0113                     	;# 
   161  0114                     	;# 
   162  0115                     	;# 
   163  0116                     	;# 
   164  0117                     	;# 
   165  0118                     	;# 
   166  0119                     	;# 
   167  018C                     	;# 
   168  018E                     	;# 
   169  0191                     	;# 
   170  0191                     	;# 
   171  0192                     	;# 
   172  0193                     	;# 
   173  0193                     	;# 
   174  0194                     	;# 
   175  0195                     	;# 
   176  0196                     	;# 
   177  0197                     	;# 
   178  0199                     	;# 
   179  019A                     	;# 
   180  019B                     	;# 
   181  019B                     	;# 
   182  019C                     	;# 
   183  019D                     	;# 
   184  019E                     	;# 
   185  019F                     	;# 
   186  020C                     	;# 
   187  020E                     	;# 
   188  028C                     	;# 
   189  028E                     	;# 
   190  030C                     	;# 
   191  030E                     	;# 
   192  038C                     	;# 
   193  038E                     	;# 
   194  0391                     	;# 
   195  0392                     	;# 
   196  0393                     	;# 
   197  0397                     	;# 
   198  0398                     	;# 
   199  0399                     	;# 
   200  0691                     	;# 
   201  0692                     	;# 
   202  0693                     	;# 
   203  0694                     	;# 
   204  0695                     	;# 
   205  0D8E                     	;# 
   206  0D8F                     	;# 
   207  0D90                     	;# 
   208  0D91                     	;# 
   209  0D91                     	;# 
   210  0D92                     	;# 
   211  0D93                     	;# 
   212  0D93                     	;# 
   213  0D94                     	;# 
   214  0D95                     	;# 
   215  0D95                     	;# 
   216  0D96                     	;# 
   217  0D97                     	;# 
   218  0D97                     	;# 
   219  0D98                     	;# 
   220  0D99                     	;# 
   221  0D99                     	;# 
   222  0D9A                     	;# 
   223  0D9B                     	;# 
   224  0D9C                     	;# 
   225  0D9C                     	;# 
   226  0D9D                     	;# 
   227  0D9D                     	;# 
   228  0D9E                     	;# 
   229  0D9F                     	;# 
   230  0DA0                     	;# 
   231  0DA1                     	;# 
   232  0DA1                     	;# 
   233  0DA2                     	;# 
   234  0DA3                     	;# 
   235  0DA3                     	;# 
   236  0DA4                     	;# 
   237  0DA5                     	;# 
   238  0DA5                     	;# 
   239  0DA6                     	;# 
   240  0DA7                     	;# 
   241  0DA7                     	;# 
   242  0DA8                     	;# 
   243  0DA9                     	;# 
   244  0DA9                     	;# 
   245  0DAA                     	;# 
   246  0DAB                     	;# 
   247  0DAC                     	;# 
   248  0DAC                     	;# 
   249  0DAD                     	;# 
   250  0DAD                     	;# 
   251  0DAE                     	;# 
   252  0DAF                     	;# 
   253  0DB0                     	;# 
   254  0DB1                     	;# 
   255  0DB1                     	;# 
   256  0DB2                     	;# 
   257  0DB3                     	;# 
   258  0DB3                     	;# 
   259  0DB4                     	;# 
   260  0DB5                     	;# 
   261  0DB5                     	;# 
   262  0DB6                     	;# 
   263  0DB7                     	;# 
   264  0DB7                     	;# 
   265  0DB8                     	;# 
   266  0DB9                     	;# 
   267  0DB9                     	;# 
   268  0DBA                     	;# 
   269  0DBB                     	;# 
   270  0DBC                     	;# 
   271  0DBC                     	;# 
   272  0DBD                     	;# 
   273  0DBD                     	;# 
   274  0DBE                     	;# 
   275  0DBF                     	;# 
   276  0DC0                     	;# 
   277  0DC1                     	;# 
   278  0DC1                     	;# 
   279  0DC2                     	;# 
   280  0DC3                     	;# 
   281  0DC3                     	;# 
   282  0DC4                     	;# 
   283  0DC5                     	;# 
   284  0DC5                     	;# 
   285  0DC6                     	;# 
   286  0DC7                     	;# 
   287  0DC7                     	;# 
   288  0DC8                     	;# 
   289  0DC9                     	;# 
   290  0DC9                     	;# 
   291  0DCA                     	;# 
   292  0DCB                     	;# 
   293  0DCC                     	;# 
   294  0DCC                     	;# 
   295  0DCD                     	;# 
   296  0DCD                     	;# 
   297  0DCE                     	;# 
   298  0DCF                     	;# 
   299  0DD0                     	;# 
   300  0E0F                     	;# 
   301  0E10                     	;# 
   302  0E11                     	;# 
   303  0E12                     	;# 
   304  0E13                     	;# 
   305  0E14                     	;# 
   306  0E15                     	;# 
   307  0E16                     	;# 
   308  0E17                     	;# 
   309  0E90                     	;# 
   310  0E91                     	;# 
   311  0E92                     	;# 
   312  0E94                     	;# 
   313  0E95                     	;# 
   314  0EA0                     	;# 
   315  0EA1                     	;# 
   316  0EA2                     	;# 
   317  0EA3                     	;# 
   318  0EA4                     	;# 
   319  0EA5                     	;# 
   320  0FE4                     	;# 
   321  0FE5                     	;# 
   322  0FE6                     	;# 
   323  0FE7                     	;# 
   324  0FE8                     	;# 
   325  0FE8                     	;# 
   326  0FE9                     	;# 
   327  0FEA                     	;# 
   328  0FEA                     	;# 
   329  0FEB                     	;# 
   330  0FED                     	;# 
   331  0FEE                     	;# 
   332  0FEE                     	;# 
   333  0FEF                     	;# 
   334  0000                     	;# 
   335  0001                     	;# 
   336  0002                     	;# 
   337  0003                     	;# 
   338  0004                     	;# 
   339  0005                     	;# 
   340  0006                     	;# 
   341  0007                     	;# 
   342  0008                     	;# 
   343  0009                     	;# 
   344  000A                     	;# 
   345  000B                     	;# 
   346  000C                     	;# 
   347  000E                     	;# 
   348  0011                     	;# 
   349  0012                     	;# 
   350  0013                     	;# 
   351  0015                     	;# 
   352  0016                     	;# 
   353  0016                     	;# 
   354  0017                     	;# 
   355  0018                     	;# 
   356  0019                     	;# 
   357  001A                     	;# 
   358  001B                     	;# 
   359  001C                     	;# 
   360  008C                     	;# 
   361  008E                     	;# 
   362  0091                     	;# 
   363  0092                     	;# 
   364  0093                     	;# 
   365  0095                     	;# 
   366  0096                     	;# 
   367  0097                     	;# 
   368  0098                     	;# 
   369  0099                     	;# 
   370  009A                     	;# 
   371  009B                     	;# 
   372  009B                     	;# 
   373  009C                     	;# 
   374  009D                     	;# 
   375  009E                     	;# 
   376  009F                     	;# 
   377  010C                     	;# 
   378  010E                     	;# 
   379  0111                     	;# 
   380  0112                     	;# 
   381  0113                     	;# 
   382  0114                     	;# 
   383  0115                     	;# 
   384  0116                     	;# 
   385  0117                     	;# 
   386  0118                     	;# 
   387  0119                     	;# 
   388  018C                     	;# 
   389  018E                     	;# 
   390  0191                     	;# 
   391  0191                     	;# 
   392  0192                     	;# 
   393  0193                     	;# 
   394  0193                     	;# 
   395  0194                     	;# 
   396  0195                     	;# 
   397  0196                     	;# 
   398  0197                     	;# 
   399  0199                     	;# 
   400  019A                     	;# 
   401  019B                     	;# 
   402  019B                     	;# 
   403  019C                     	;# 
   404  019D                     	;# 
   405  019E                     	;# 
   406  019F                     	;# 
   407  020C                     	;# 
   408  020E                     	;# 
   409  028C                     	;# 
   410  028E                     	;# 
   411  030C                     	;# 
   412  030E                     	;# 
   413  038C                     	;# 
   414  038E                     	;# 
   415  0391                     	;# 
   416  0392                     	;# 
   417  0393                     	;# 
   418  0397                     	;# 
   419  0398                     	;# 
   420  0399                     	;# 
   421  0691                     	;# 
   422  0692                     	;# 
   423  0693                     	;# 
   424  0694                     	;# 
   425  0695                     	;# 
   426  0D8E                     	;# 
   427  0D8F                     	;# 
   428  0D90                     	;# 
   429  0D91                     	;# 
   430  0D91                     	;# 
   431  0D92                     	;# 
   432  0D93                     	;# 
   433  0D93                     	;# 
   434  0D94                     	;# 
   435  0D95                     	;# 
   436  0D95                     	;# 
   437  0D96                     	;# 
   438  0D97                     	;# 
   439  0D97                     	;# 
   440  0D98                     	;# 
   441  0D99                     	;# 
   442  0D99                     	;# 
   443  0D9A                     	;# 
   444  0D9B                     	;# 
   445  0D9C                     	;# 
   446  0D9C                     	;# 
   447  0D9D                     	;# 
   448  0D9D                     	;# 
   449  0D9E                     	;# 
   450  0D9F                     	;# 
   451  0DA0                     	;# 
   452  0DA1                     	;# 
   453  0DA1                     	;# 
   454  0DA2                     	;# 
   455  0DA3                     	;# 
   456  0DA3                     	;# 
   457  0DA4                     	;# 
   458  0DA5                     	;# 
   459  0DA5                     	;# 
   460  0DA6                     	;# 
   461  0DA7                     	;# 
   462  0DA7                     	;# 
   463  0DA8                     	;# 
   464  0DA9                     	;# 
   465  0DA9                     	;# 
   466  0DAA                     	;# 
   467  0DAB                     	;# 
   468  0DAC                     	;# 
   469  0DAC                     	;# 
   470  0DAD                     	;# 
   471  0DAD                     	;# 
   472  0DAE                     	;# 
   473  0DAF                     	;# 
   474  0DB0                     	;# 
   475  0DB1                     	;# 
   476  0DB1                     	;# 
   477  0DB2                     	;# 
   478  0DB3                     	;# 
   479  0DB3                     	;# 
   480  0DB4                     	;# 
   481  0DB5                     	;# 
   482  0DB5                     	;# 
   483  0DB6                     	;# 
   484  0DB7                     	;# 
   485  0DB7                     	;# 
   486  0DB8                     	;# 
   487  0DB9                     	;# 
   488  0DB9                     	;# 
   489  0DBA                     	;# 
   490  0DBB                     	;# 
   491  0DBC                     	;# 
   492  0DBC                     	;# 
   493  0DBD                     	;# 
   494  0DBD                     	;# 
   495  0DBE                     	;# 
   496  0DBF                     	;# 
   497  0DC0                     	;# 
   498  0DC1                     	;# 
   499  0DC1                     	;# 
   500  0DC2                     	;# 
   501  0DC3                     	;# 
   502  0DC3                     	;# 
   503  0DC4                     	;# 
   504  0DC5                     	;# 
   505  0DC5                     	;# 
   506  0DC6                     	;# 
   507  0DC7                     	;# 
   508  0DC7                     	;# 
   509  0DC8                     	;# 
   510  0DC9                     	;# 
   511  0DC9                     	;# 
   512  0DCA                     	;# 
   513  0DCB                     	;# 
   514  0DCC                     	;# 
   515  0DCC                     	;# 
   516  0DCD                     	;# 
   517  0DCD                     	;# 
   518  0DCE                     	;# 
   519  0DCF                     	;# 
   520  0DD0                     	;# 
   521  0E0F                     	;# 
   522  0E10                     	;# 
   523  0E11                     	;# 
   524  0E12                     	;# 
   525  0E13                     	;# 
   526  0E14                     	;# 
   527  0E15                     	;# 
   528  0E16                     	;# 
   529  0E17                     	;# 
   530  0E90                     	;# 
   531  0E91                     	;# 
   532  0E92                     	;# 
   533  0E94                     	;# 
   534  0E95                     	;# 
   535  0EA0                     	;# 
   536  0EA1                     	;# 
   537  0EA2                     	;# 
   538  0EA3                     	;# 
   539  0EA4                     	;# 
   540  0EA5                     	;# 
   541  0FE4                     	;# 
   542  0FE5                     	;# 
   543  0FE6                     	;# 
   544  0FE7                     	;# 
   545  0FE8                     	;# 
   546  0FE8                     	;# 
   547  0FE9                     	;# 
   548  0FEA                     	;# 
   549  0FEA                     	;# 
   550  0FEB                     	;# 
   551  0FED                     	;# 
   552  0FEE                     	;# 
   553  0FEE                     	;# 
   554  0FEF                     	;# 
   555  0000                     	;# 
   556  0001                     	;# 
   557  0002                     	;# 
   558  0003                     	;# 
   559  0004                     	;# 
   560  0005                     	;# 
   561  0006                     	;# 
   562  0007                     	;# 
   563  0008                     	;# 
   564  0009                     	;# 
   565  000A                     	;# 
   566  000B                     	;# 
   567  000C                     	;# 
   568  000E                     	;# 
   569  0011                     	;# 
   570  0012                     	;# 
   571  0013                     	;# 
   572  0015                     	;# 
   573  0016                     	;# 
   574  0016                     	;# 
   575  0017                     	;# 
   576  0018                     	;# 
   577  0019                     	;# 
   578  001A                     	;# 
   579  001B                     	;# 
   580  001C                     	;# 
   581  008C                     	;# 
   582  008E                     	;# 
   583  0091                     	;# 
   584  0092                     	;# 
   585  0093                     	;# 
   586  0095                     	;# 
   587  0096                     	;# 
   588  0097                     	;# 
   589  0098                     	;# 
   590  0099                     	;# 
   591  009A                     	;# 
   592  009B                     	;# 
   593  009B                     	;# 
   594  009C                     	;# 
   595  009D                     	;# 
   596  009E                     	;# 
   597  009F                     	;# 
   598  010C                     	;# 
   599  010E                     	;# 
   600  0111                     	;# 
   601  0112                     	;# 
   602  0113                     	;# 
   603  0114                     	;# 
   604  0115                     	;# 
   605  0116                     	;# 
   606  0117                     	;# 
   607  0118                     	;# 
   608  0119                     	;# 
   609  018C                     	;# 
   610  018E                     	;# 
   611  0191                     	;# 
   612  0191                     	;# 
   613  0192                     	;# 
   614  0193                     	;# 
   615  0193                     	;# 
   616  0194                     	;# 
   617  0195                     	;# 
   618  0196                     	;# 
   619  0197                     	;# 
   620  0199                     	;# 
   621  019A                     	;# 
   622  019B                     	;# 
   623  019B                     	;# 
   624  019C                     	;# 
   625  019D                     	;# 
   626  019E                     	;# 
   627  019F                     	;# 
   628  020C                     	;# 
   629  020E                     	;# 
   630  028C                     	;# 
   631  028E                     	;# 
   632  030C                     	;# 
   633  030E                     	;# 
   634  038C                     	;# 
   635  038E                     	;# 
   636  0391                     	;# 
   637  0392                     	;# 
   638  0393                     	;# 
   639  0397                     	;# 
   640  0398                     	;# 
   641  0399                     	;# 
   642  0691                     	;# 
   643  0692                     	;# 
   644  0693                     	;# 
   645  0694                     	;# 
   646  0695                     	;# 
   647  0D8E                     	;# 
   648  0D8F                     	;# 
   649  0D90                     	;# 
   650  0D91                     	;# 
   651  0D91                     	;# 
   652  0D92                     	;# 
   653  0D93                     	;# 
   654  0D93                     	;# 
   655  0D94                     	;# 
   656  0D95                     	;# 
   657  0D95                     	;# 
   658  0D96                     	;# 
   659  0D97                     	;# 
   660  0D97                     	;# 
   661  0D98                     	;# 
   662  0D99                     	;# 
   663  0D99                     	;# 
   664  0D9A                     	;# 
   665  0D9B                     	;# 
   666  0D9C                     	;# 
   667  0D9C                     	;# 
   668  0D9D                     	;# 
   669  0D9D                     	;# 
   670  0D9E                     	;# 
   671  0D9F                     	;# 
   672  0DA0                     	;# 
   673  0DA1                     	;# 
   674  0DA1                     	;# 
   675  0DA2                     	;# 
   676  0DA3                     	;# 
   677  0DA3                     	;# 
   678  0DA4                     	;# 
   679  0DA5                     	;# 
   680  0DA5                     	;# 
   681  0DA6                     	;# 
   682  0DA7                     	;# 
   683  0DA7                     	;# 
   684  0DA8                     	;# 
   685  0DA9                     	;# 
   686  0DA9                     	;# 
   687  0DAA                     	;# 
   688  0DAB                     	;# 
   689  0DAC                     	;# 
   690  0DAC                     	;# 
   691  0DAD                     	;# 
   692  0DAD                     	;# 
   693  0DAE                     	;# 
   694  0DAF                     	;# 
   695  0DB0                     	;# 
   696  0DB1                     	;# 
   697  0DB1                     	;# 
   698  0DB2                     	;# 
   699  0DB3                     	;# 
   700  0DB3                     	;# 
   701  0DB4                     	;# 
   702  0DB5                     	;# 
   703  0DB5                     	;# 
   704  0DB6                     	;# 
   705  0DB7                     	;# 
   706  0DB7                     	;# 
   707  0DB8                     	;# 
   708  0DB9                     	;# 
   709  0DB9                     	;# 
   710  0DBA                     	;# 
   711  0DBB                     	;# 
   712  0DBC                     	;# 
   713  0DBC                     	;# 
   714  0DBD                     	;# 
   715  0DBD                     	;# 
   716  0DBE                     	;# 
   717  0DBF                     	;# 
   718  0DC0                     	;# 
   719  0DC1                     	;# 
   720  0DC1                     	;# 
   721  0DC2                     	;# 
   722  0DC3                     	;# 
   723  0DC3                     	;# 
   724  0DC4                     	;# 
   725  0DC5                     	;# 
   726  0DC5                     	;# 
   727  0DC6                     	;# 
   728  0DC7                     	;# 
   729  0DC7                     	;# 
   730  0DC8                     	;# 
   731  0DC9                     	;# 
   732  0DC9                     	;# 
   733  0DCA                     	;# 
   734  0DCB                     	;# 
   735  0DCC                     	;# 
   736  0DCC                     	;# 
   737  0DCD                     	;# 
   738  0DCD                     	;# 
   739  0DCE                     	;# 
   740  0DCF                     	;# 
   741  0DD0                     	;# 
   742  0E0F                     	;# 
   743  0E10                     	;# 
   744  0E11                     	;# 
   745  0E12                     	;# 
   746  0E13                     	;# 
   747  0E14                     	;# 
   748  0E15                     	;# 
   749  0E16                     	;# 
   750  0E17                     	;# 
   751  0E90                     	;# 
   752  0E91                     	;# 
   753  0E92                     	;# 
   754  0E94                     	;# 
   755  0E95                     	;# 
   756  0EA0                     	;# 
   757  0EA1                     	;# 
   758  0EA2                     	;# 
   759  0EA3                     	;# 
   760  0EA4                     	;# 
   761  0EA5                     	;# 
   762  0FE4                     	;# 
   763  0FE5                     	;# 
   764  0FE6                     	;# 
   765  0FE7                     	;# 
   766  0FE8                     	;# 
   767  0FE8                     	;# 
   768  0FE9                     	;# 
   769  0FEA                     	;# 
   770  0FEA                     	;# 
   771  0FEB                     	;# 
   772  0FED                     	;# 
   773  0FEE                     	;# 
   774  0FEE                     	;# 
   775  0FEF                     	;# 
   776  0000                     	;# 
   777  0001                     	;# 
   778  0002                     	;# 
   779  0003                     	;# 
   780  0004                     	;# 
   781  0005                     	;# 
   782  0006                     	;# 
   783  0007                     	;# 
   784  0008                     	;# 
   785  0009                     	;# 
   786  000A                     	;# 
   787  000B                     	;# 
   788  000C                     	;# 
   789  000E                     	;# 
   790  0011                     	;# 
   791  0012                     	;# 
   792  0013                     	;# 
   793  0015                     	;# 
   794  0016                     	;# 
   795  0016                     	;# 
   796  0017                     	;# 
   797  0018                     	;# 
   798  0019                     	;# 
   799  001A                     	;# 
   800  001B                     	;# 
   801  001C                     	;# 
   802  008C                     	;# 
   803  008E                     	;# 
   804  0091                     	;# 
   805  0092                     	;# 
   806  0093                     	;# 
   807  0095                     	;# 
   808  0096                     	;# 
   809  0097                     	;# 
   810  0098                     	;# 
   811  0099                     	;# 
   812  009A                     	;# 
   813  009B                     	;# 
   814  009B                     	;# 
   815  009C                     	;# 
   816  009D                     	;# 
   817  009E                     	;# 
   818  009F                     	;# 
   819  010C                     	;# 
   820  010E                     	;# 
   821  0111                     	;# 
   822  0112                     	;# 
   823  0113                     	;# 
   824  0114                     	;# 
   825  0115                     	;# 
   826  0116                     	;# 
   827  0117                     	;# 
   828  0118                     	;# 
   829  0119                     	;# 
   830  018C                     	;# 
   831  018E                     	;# 
   832  0191                     	;# 
   833  0191                     	;# 
   834  0192                     	;# 
   835  0193                     	;# 
   836  0193                     	;# 
   837  0194                     	;# 
   838  0195                     	;# 
   839  0196                     	;# 
   840  0197                     	;# 
   841  0199                     	;# 
   842  019A                     	;# 
   843  019B                     	;# 
   844  019B                     	;# 
   845  019C                     	;# 
   846  019D                     	;# 
   847  019E                     	;# 
   848  019F                     	;# 
   849  020C                     	;# 
   850  020E                     	;# 
   851  028C                     	;# 
   852  028E                     	;# 
   853  030C                     	;# 
   854  030E                     	;# 
   855  038C                     	;# 
   856  038E                     	;# 
   857  0391                     	;# 
   858  0392                     	;# 
   859  0393                     	;# 
   860  0397                     	;# 
   861  0398                     	;# 
   862  0399                     	;# 
   863  0691                     	;# 
   864  0692                     	;# 
   865  0693                     	;# 
   866  0694                     	;# 
   867  0695                     	;# 
   868  0D8E                     	;# 
   869  0D8F                     	;# 
   870  0D90                     	;# 
   871  0D91                     	;# 
   872  0D91                     	;# 
   873  0D92                     	;# 
   874  0D93                     	;# 
   875  0D93                     	;# 
   876  0D94                     	;# 
   877  0D95                     	;# 
   878  0D95                     	;# 
   879  0D96                     	;# 
   880  0D97                     	;# 
   881  0D97                     	;# 
   882  0D98                     	;# 
   883  0D99                     	;# 
   884  0D99                     	;# 
   885  0D9A                     	;# 
   886  0D9B                     	;# 
   887  0D9C                     	;# 
   888  0D9C                     	;# 
   889  0D9D                     	;# 
   890  0D9D                     	;# 
   891  0D9E                     	;# 
   892  0D9F                     	;# 
   893  0DA0                     	;# 
   894  0DA1                     	;# 
   895  0DA1                     	;# 
   896  0DA2                     	;# 
   897  0DA3                     	;# 
   898  0DA3                     	;# 
   899  0DA4                     	;# 
   900  0DA5                     	;# 
   901  0DA5                     	;# 
   902  0DA6                     	;# 
   903  0DA7                     	;# 
   904  0DA7                     	;# 
   905  0DA8                     	;# 
   906  0DA9                     	;# 
   907  0DA9                     	;# 
   908  0DAA                     	;# 
   909  0DAB                     	;# 
   910  0DAC                     	;# 
   911  0DAC                     	;# 
   912  0DAD                     	;# 
   913  0DAD                     	;# 
   914  0DAE                     	;# 
   915  0DAF                     	;# 
   916  0DB0                     	;# 
   917  0DB1                     	;# 
   918  0DB1                     	;# 
   919  0DB2                     	;# 
   920  0DB3                     	;# 
   921  0DB3                     	;# 
   922  0DB4                     	;# 
   923  0DB5                     	;# 
   924  0DB5                     	;# 
   925  0DB6                     	;# 
   926  0DB7                     	;# 
   927  0DB7                     	;# 
   928  0DB8                     	;# 
   929  0DB9                     	;# 
   930  0DB9                     	;# 
   931  0DBA                     	;# 
   932  0DBB                     	;# 
   933  0DBC                     	;# 
   934  0DBC                     	;# 
   935  0DBD                     	;# 
   936  0DBD                     	;# 
   937  0DBE                     	;# 
   938  0DBF                     	;# 
   939  0DC0                     	;# 
   940  0DC1                     	;# 
   941  0DC1                     	;# 
   942  0DC2                     	;# 
   943  0DC3                     	;# 
   944  0DC3                     	;# 
   945  0DC4                     	;# 
   946  0DC5                     	;# 
   947  0DC5                     	;# 
   948  0DC6                     	;# 
   949  0DC7                     	;# 
   950  0DC7                     	;# 
   951  0DC8                     	;# 
   952  0DC9                     	;# 
   953  0DC9                     	;# 
   954  0DCA                     	;# 
   955  0DCB                     	;# 
   956  0DCC                     	;# 
   957  0DCC                     	;# 
   958  0DCD                     	;# 
   959  0DCD                     	;# 
   960  0DCE                     	;# 
   961  0DCF                     	;# 
   962  0DD0                     	;# 
   963  0E0F                     	;# 
   964  0E10                     	;# 
   965  0E11                     	;# 
   966  0E12                     	;# 
   967  0E13                     	;# 
   968  0E14                     	;# 
   969  0E15                     	;# 
   970  0E16                     	;# 
   971  0E17                     	;# 
   972  0E90                     	;# 
   973  0E91                     	;# 
   974  0E92                     	;# 
   975  0E94                     	;# 
   976  0E95                     	;# 
   977  0EA0                     	;# 
   978  0EA1                     	;# 
   979  0EA2                     	;# 
   980  0EA3                     	;# 
   981  0EA4                     	;# 
   982  0EA5                     	;# 
   983  0FE4                     	;# 
   984  0FE5                     	;# 
   985  0FE6                     	;# 
   986  0FE7                     	;# 
   987  0FE8                     	;# 
   988  0FE8                     	;# 
   989  0FE9                     	;# 
   990  0FEA                     	;# 
   991  0FEA                     	;# 
   992  0FEB                     	;# 
   993  0FED                     	;# 
   994  0FEE                     	;# 
   995  0FEE                     	;# 
   996  0FEF                     	;# 
   997  0000                     	;# 
   998  0001                     	;# 
   999  0002                     	;# 
  1000  0003                     	;# 
  1001  0004                     	;# 
  1002  0005                     	;# 
  1003  0006                     	;# 
  1004  0007                     	;# 
  1005  0008                     	;# 
  1006  0009                     	;# 
  1007  000A                     	;# 
  1008  000B                     	;# 
  1009  000C                     	;# 
  1010  000E                     	;# 
  1011  0011                     	;# 
  1012  0012                     	;# 
  1013  0013                     	;# 
  1014  0015                     	;# 
  1015  0016                     	;# 
  1016  0016                     	;# 
  1017  0017                     	;# 
  1018  0018                     	;# 
  1019  0019                     	;# 
  1020  001A                     	;# 
  1021  001B                     	;# 
  1022  001C                     	;# 
  1023  008C                     	;# 
  1024  008E                     	;# 
  1025  0091                     	;# 
  1026  0092                     	;# 
  1027  0093                     	;# 
  1028  0095                     	;# 
  1029  0096                     	;# 
  1030  0097                     	;# 
  1031  0098                     	;# 
  1032  0099                     	;# 
  1033  009A                     	;# 
  1034  009B                     	;# 
  1035  009B                     	;# 
  1036  009C                     	;# 
  1037  009D                     	;# 
  1038  009E                     	;# 
  1039  009F                     	;# 
  1040  010C                     	;# 
  1041  010E                     	;# 
  1042  0111                     	;# 
  1043  0112                     	;# 
  1044  0113                     	;# 
  1045  0114                     	;# 
  1046  0115                     	;# 
  1047  0116                     	;# 
  1048  0117                     	;# 
  1049  0118                     	;# 
  1050  0119                     	;# 
  1051  018C                     	;# 
  1052  018E                     	;# 
  1053  0191                     	;# 
  1054  0191                     	;# 
  1055  0192                     	;# 
  1056  0193                     	;# 
  1057  0193                     	;# 
  1058  0194                     	;# 
  1059  0195                     	;# 
  1060  0196                     	;# 
  1061  0197                     	;# 
  1062  0199                     	;# 
  1063  019A                     	;# 
  1064  019B                     	;# 
  1065  019B                     	;# 
  1066  019C                     	;# 
  1067  019D                     	;# 
  1068  019E                     	;# 
  1069  019F                     	;# 
  1070  020C                     	;# 
  1071  020E                     	;# 
  1072  028C                     	;# 
  1073  028E                     	;# 
  1074  030C                     	;# 
  1075  030E                     	;# 
  1076  038C                     	;# 
  1077  038E                     	;# 
  1078  0391                     	;# 
  1079  0392                     	;# 
  1080  0393                     	;# 
  1081  0397                     	;# 
  1082  0398                     	;# 
  1083  0399                     	;# 
  1084  0691                     	;# 
  1085  0692                     	;# 
  1086  0693                     	;# 
  1087  0694                     	;# 
  1088  0695                     	;# 
  1089  0D8E                     	;# 
  1090  0D8F                     	;# 
  1091  0D90                     	;# 
  1092  0D91                     	;# 
  1093  0D91                     	;# 
  1094  0D92                     	;# 
  1095  0D93                     	;# 
  1096  0D93                     	;# 
  1097  0D94                     	;# 
  1098  0D95                     	;# 
  1099  0D95                     	;# 
  1100  0D96                     	;# 
  1101  0D97                     	;# 
  1102  0D97                     	;# 
  1103  0D98                     	;# 
  1104  0D99                     	;# 
  1105  0D99                     	;# 
  1106  0D9A                     	;# 
  1107  0D9B                     	;# 
  1108  0D9C                     	;# 
  1109  0D9C                     	;# 
  1110  0D9D                     	;# 
  1111  0D9D                     	;# 
  1112  0D9E                     	;# 
  1113  0D9F                     	;# 
  1114  0DA0                     	;# 
  1115  0DA1                     	;# 
  1116  0DA1                     	;# 
  1117  0DA2                     	;# 
  1118  0DA3                     	;# 
  1119  0DA3                     	;# 
  1120  0DA4                     	;# 
  1121  0DA5                     	;# 
  1122  0DA5                     	;# 
  1123  0DA6                     	;# 
  1124  0DA7                     	;# 
  1125  0DA7                     	;# 
  1126  0DA8                     	;# 
  1127  0DA9                     	;# 
  1128  0DA9                     	;# 
  1129  0DAA                     	;# 
  1130  0DAB                     	;# 
  1131  0DAC                     	;# 
  1132  0DAC                     	;# 
  1133  0DAD                     	;# 
  1134  0DAD                     	;# 
  1135  0DAE                     	;# 
  1136  0DAF                     	;# 
  1137  0DB0                     	;# 
  1138  0DB1                     	;# 
  1139  0DB1                     	;# 
  1140  0DB2                     	;# 
  1141  0DB3                     	;# 
  1142  0DB3                     	;# 
  1143  0DB4                     	;# 
  1144  0DB5                     	;# 
  1145  0DB5                     	;# 
  1146  0DB6                     	;# 
  1147  0DB7                     	;# 
  1148  0DB7                     	;# 
  1149  0DB8                     	;# 
  1150  0DB9                     	;# 
  1151  0DB9                     	;# 
  1152  0DBA                     	;# 
  1153  0DBB                     	;# 
  1154  0DBC                     	;# 
  1155  0DBC                     	;# 
  1156  0DBD                     	;# 
  1157  0DBD                     	;# 
  1158  0DBE                     	;# 
  1159  0DBF                     	;# 
  1160  0DC0                     	;# 
  1161  0DC1                     	;# 
  1162  0DC1                     	;# 
  1163  0DC2                     	;# 
  1164  0DC3                     	;# 
  1165  0DC3                     	;# 
  1166  0DC4                     	;# 
  1167  0DC5                     	;# 
  1168  0DC5                     	;# 
  1169  0DC6                     	;# 
  1170  0DC7                     	;# 
  1171  0DC7                     	;# 
  1172  0DC8                     	;# 
  1173  0DC9                     	;# 
  1174  0DC9                     	;# 
  1175  0DCA                     	;# 
  1176  0DCB                     	;# 
  1177  0DCC                     	;# 
  1178  0DCC                     	;# 
  1179  0DCD                     	;# 
  1180  0DCD                     	;# 
  1181  0DCE                     	;# 
  1182  0DCF                     	;# 
  1183  0DD0                     	;# 
  1184  0E0F                     	;# 
  1185  0E10                     	;# 
  1186  0E11                     	;# 
  1187  0E12                     	;# 
  1188  0E13                     	;# 
  1189  0E14                     	;# 
  1190  0E15                     	;# 
  1191  0E16                     	;# 
  1192  0E17                     	;# 
  1193  0E90                     	;# 
  1194  0E91                     	;# 
  1195  0E92                     	;# 
  1196  0E94                     	;# 
  1197  0E95                     	;# 
  1198  0EA0                     	;# 
  1199  0EA1                     	;# 
  1200  0EA2                     	;# 
  1201  0EA3                     	;# 
  1202  0EA4                     	;# 
  1203  0EA5                     	;# 
  1204  0FE4                     	;# 
  1205  0FE5                     	;# 
  1206  0FE6                     	;# 
  1207  0FE7                     	;# 
  1208  0FE8                     	;# 
  1209  0FE8                     	;# 
  1210  0FE9                     	;# 
  1211  0FEA                     	;# 
  1212  0FEA                     	;# 
  1213  0FEB                     	;# 
  1214  0FED                     	;# 
  1215  0FEE                     	;# 
  1216  0FEE                     	;# 
  1217  0FEF                     	;# 
  1218  0FFF                     	;# 
  1219  0000                     	;# 
  1220  0001                     	;# 
  1221  0002                     	;# 
  1222  0003                     	;# 
  1223  0004                     	;# 
  1224  0005                     	;# 
  1225  0006                     	;# 
  1226  0007                     	;# 
  1227  0008                     	;# 
  1228  0009                     	;# 
  1229  000A                     	;# 
  1230  000B                     	;# 
  1231  000C                     	;# 
  1232  000E                     	;# 
  1233  0011                     	;# 
  1234  0012                     	;# 
  1235  0013                     	;# 
  1236  0015                     	;# 
  1237  0016                     	;# 
  1238  0016                     	;# 
  1239  0017                     	;# 
  1240  0018                     	;# 
  1241  0019                     	;# 
  1242  001A                     	;# 
  1243  001B                     	;# 
  1244  001C                     	;# 
  1245  008C                     	;# 
  1246  008E                     	;# 
  1247  0091                     	;# 
  1248  0092                     	;# 
  1249  0093                     	;# 
  1250  0095                     	;# 
  1251  0096                     	;# 
  1252  0097                     	;# 
  1253  0098                     	;# 
  1254  0099                     	;# 
  1255  009A                     	;# 
  1256  009B                     	;# 
  1257  009B                     	;# 
  1258  009C                     	;# 
  1259  009D                     	;# 
  1260  009E                     	;# 
  1261  009F                     	;# 
  1262  010C                     	;# 
  1263  010E                     	;# 
  1264  0111                     	;# 
  1265  0112                     	;# 
  1266  0113                     	;# 
  1267  0114                     	;# 
  1268  0115                     	;# 
  1269  0116                     	;# 
  1270  0117                     	;# 
  1271  0118                     	;# 
  1272  0119                     	;# 
  1273  018C                     	;# 
  1274  018E                     	;# 
  1275  0191                     	;# 
  1276  0191                     	;# 
  1277  0192                     	;# 
  1278  0193                     	;# 
  1279  0193                     	;# 
  1280  0194                     	;# 
  1281  0195                     	;# 
  1282  0196                     	;# 
  1283  0197                     	;# 
  1284  0199                     	;# 
  1285  019A                     	;# 
  1286  019B                     	;# 
  1287  019B                     	;# 
  1288  019C                     	;# 
  1289  019D                     	;# 
  1290  019E                     	;# 
  1291  019F                     	;# 
  1292  020C                     	;# 
  1293  020E                     	;# 
  1294  028C                     	;# 
  1295  028E                     	;# 
  1296  030C                     	;# 
  1297  030E                     	;# 
  1298  038C                     	;# 
  1299  038E                     	;# 
  1300  0391                     	;# 
  1301  0392                     	;# 
  1302  0393                     	;# 
  1303  0397                     	;# 
  1304  0398                     	;# 
  1305  0399                     	;# 
  1306  0691                     	;# 
  1307  0692                     	;# 
  1308  0693                     	;# 
  1309  0694                     	;# 
  1310  0695                     	;# 
  1311  0D8E                     	;# 
  1312  0D8F                     	;# 
  1313  0D90                     	;# 
  1314  0D91                     	;# 
  1315  0D91                     	;# 
  1316  0D92                     	;# 
  1317  0D93                     	;# 
  1318  0D93                     	;# 
  1319  0D94                     	;# 
  1320  0D95                     	;# 
  1321  0D95                     	;# 
  1322  0D96                     	;# 
  1323  0D97                     	;# 
  1324  0D97                     	;# 
  1325  0D98                     	;# 
  1326  0D99                     	;# 
  1327  0D99                     	;# 
  1328  0D9A                     	;# 
  1329  0D9B                     	;# 
  1330  0D9C                     	;# 
  1331  0D9C                     	;# 
  1332  0D9D                     	;# 
  1333  0D9D                     	;# 
  1334  0D9E                     	;# 
  1335  0D9F                     	;# 
  1336  0DA0                     	;# 
  1337  0DA1                     	;# 
  1338  0DA1                     	;# 
  1339  0DA2                     	;# 
  1340  0DA3                     	;# 
  1341  0DA3                     	;# 
  1342  0DA4                     	;# 
  1343  0DA5                     	;# 
  1344  0DA5                     	;# 
  1345  0DA6                     	;# 
  1346  0DA7                     	;# 
  1347  0DA7                     	;# 
  1348  0DA8                     	;# 
  1349  0DA9                     	;# 
  1350  0DA9                     	;# 
  1351  0DAA                     	;# 
  1352  0DAB                     	;# 
  1353  0DAC                     	;# 
  1354  0DAC                     	;# 
  1355  0DAD                     	;# 
  1356  0DAD                     	;# 
  1357  0DAE                     	;# 
  1358  0DAF                     	;# 
  1359  0DB0                     	;# 
  1360  0DB1                     	;# 
  1361  0DB1                     	;# 
  1362  0DB2                     	;# 
  1363  0DB3                     	;# 
  1364  0DB3                     	;# 
  1365  0DB4                     	;# 
  1366  0DB5                     	;# 
  1367  0DB5                     	;# 
  1368  0DB6                     	;# 
  1369  0DB7                     	;# 
  1370  0DB7                     	;# 
  1371  0DB8                     	;# 
  1372  0DB9                     	;# 
  1373  0DB9                     	;# 
  1374  0DBA                     	;# 
  1375  0DBB                     	;# 
  1376  0DBC                     	;# 
  1377  0DBC                     	;# 
  1378  0DBD                     	;# 
  1379  0DBD                     	;# 
  1380  0DBE                     	;# 
  1381  0DBF                     	;# 
  1382  0DC0                     	;# 
  1383  0DC1                     	;# 
  1384  0DC1                     	;# 
  1385  0DC2                     	;# 
  1386  0DC3                     	;# 
  1387  0DC3                     	;# 
  1388  0DC4                     	;# 
  1389  0DC5                     	;# 
  1390  0DC5                     	;# 
  1391  0DC6                     	;# 
  1392  0DC7                     	;# 
  1393  0DC7                     	;# 
  1394  0DC8                     	;# 
  1395  0DC9                     	;# 
  1396  0DC9                     	;# 
  1397  0DCA                     	;# 
  1398  0DCB                     	;# 
  1399  0DCC                     	;# 
  1400  0DCC                     	;# 
  1401  0DCD                     	;# 
  1402  0DCD                     	;# 
  1403  0DCE                     	;# 
  1404  0DCF                     	;# 
  1405  0DD0                     	;# 
  1406  0E0F                     	;# 
  1407  0E10                     	;# 
  1408  0E11                     	;# 
  1409  0E12                     	;# 
  1410  0E13                     	;# 
  1411  0E14                     	;# 
  1412  0E15                     	;# 
  1413  0E16                     	;# 
  1414  0E17                     	;# 
  1415  0E90                     	;# 
  1416  0E91                     	;# 
  1417  0E92                     	;# 
  1418  0E94                     	;# 
  1419  0E95                     	;# 
  1420  0EA0                     	;# 
  1421  0EA1                     	;# 
  1422  0EA2                     	;# 
  1423  0EA3                     	;# 
  1424  0EA4                     	;# 
  1425  0EA5                     	;# 
  1426  0FE4                     	;# 
  1427  0FE5                     	;# 
  1428  0FE6                     	;# 
  1429  0FE7                     	;# 
  1430  0FE8                     	;# 
  1431  0FE8                     	;# 
  1432  0FE9                     	;# 
  1433  0FEA                     	;# 
  1434  0FEA                     	;# 
  1435  0FEB                     	;# 
  1436  0FED                     	;# 
  1437  0FEE                     	;# 
  1438  0FEE                     	;# 
  1439  0FEF                     	;# 
  1440  0000                     	;# 
  1441  0001                     	;# 
  1442  0002                     	;# 
  1443  0003                     	;# 
  1444  0004                     	;# 
  1445  0005                     	;# 
  1446  0006                     	;# 
  1447  0007                     	;# 
  1448  0008                     	;# 
  1449  0009                     	;# 
  1450  000A                     	;# 
  1451  000B                     	;# 
  1452  000C                     	;# 
  1453  000E                     	;# 
  1454  0011                     	;# 
  1455  0012                     	;# 
  1456  0013                     	;# 
  1457  0015                     	;# 
  1458  0016                     	;# 
  1459  0016                     	;# 
  1460  0017                     	;# 
  1461  0018                     	;# 
  1462  0019                     	;# 
  1463  001A                     	;# 
  1464  001B                     	;# 
  1465  001C                     	;# 
  1466  008C                     	;# 
  1467  008E                     	;# 
  1468  0091                     	;# 
  1469  0092                     	;# 
  1470  0093                     	;# 
  1471  0095                     	;# 
  1472  0096                     	;# 
  1473  0097                     	;# 
  1474  0098                     	;# 
  1475  0099                     	;# 
  1476  009A                     	;# 
  1477  009B                     	;# 
  1478  009B                     	;# 
  1479  009C                     	;# 
  1480  009D                     	;# 
  1481  009E                     	;# 
  1482  009F                     	;# 
  1483  010C                     	;# 
  1484  010E                     	;# 
  1485  0111                     	;# 
  1486  0112                     	;# 
  1487  0113                     	;# 
  1488  0114                     	;# 
  1489  0115                     	;# 
  1490  0116                     	;# 
  1491  0117                     	;# 
  1492  0118                     	;# 
  1493  0119                     	;# 
  1494  018C                     	;# 
  1495  018E                     	;# 
  1496  0191                     	;# 
  1497  0191                     	;# 
  1498  0192                     	;# 
  1499  0193                     	;# 
  1500  0193                     	;# 
  1501  0194                     	;# 
  1502  0195                     	;# 
  1503  0196                     	;# 
  1504  0197                     	;# 
  1505  0199                     	;# 
  1506  019A                     	;# 
  1507  019B                     	;# 
  1508  019B                     	;# 
  1509  019C                     	;# 
  1510  019D                     	;# 
  1511  019E                     	;# 
  1512  019F                     	;# 
  1513  020C                     	;# 
  1514  020E                     	;# 
  1515  028C                     	;# 
  1516  028E                     	;# 
  1517  030C                     	;# 
  1518  030E                     	;# 
  1519  038C                     	;# 
  1520  038E                     	;# 
  1521  0391                     	;# 
  1522  0392                     	;# 
  1523  0393                     	;# 
  1524  0397                     	;# 
  1525  0398                     	;# 
  1526  0399                     	;# 
  1527  0691                     	;# 
  1528  0692                     	;# 
  1529  0693                     	;# 
  1530  0694                     	;# 
  1531  0695                     	;# 
  1532  0D8E                     	;# 
  1533  0D8F                     	;# 
  1534  0D90                     	;# 
  1535  0D91                     	;# 
  1536  0D91                     	;# 
  1537  0D92                     	;# 
  1538  0D93                     	;# 
  1539  0D93                     	;# 
  1540  0D94                     	;# 
  1541  0D95                     	;# 
  1542  0D95                     	;# 
  1543  0D96                     	;# 
  1544  0D97                     	;# 
  1545  0D97                     	;# 
  1546  0D98                     	;# 
  1547  0D99                     	;# 
  1548  0D99                     	;# 
  1549  0D9A                     	;# 
  1550  0D9B                     	;# 
  1551  0D9C                     	;# 
  1552  0D9C                     	;# 
  1553  0D9D                     	;# 
  1554  0D9D                     	;# 
  1555  0D9E                     	;# 
  1556  0D9F                     	;# 
  1557  0DA0                     	;# 
  1558  0DA1                     	;# 
  1559  0DA1                     	;# 
  1560  0DA2                     	;# 
  1561  0DA3                     	;# 
  1562  0DA3                     	;# 
  1563  0DA4                     	;# 
  1564  0DA5                     	;# 
  1565  0DA5                     	;# 
  1566  0DA6                     	;# 
  1567  0DA7                     	;# 
  1568  0DA7                     	;# 
  1569  0DA8                     	;# 
  1570  0DA9                     	;# 
  1571  0DA9                     	;# 
  1572  0DAA                     	;# 
  1573  0DAB                     	;# 
  1574  0DAC                     	;# 
  1575  0DAC                     	;# 
  1576  0DAD                     	;# 
  1577  0DAD                     	;# 
  1578  0DAE                     	;# 
  1579  0DAF                     	;# 
  1580  0DB0                     	;# 
  1581  0DB1                     	;# 
  1582  0DB1                     	;# 
  1583  0DB2                     	;# 
  1584  0DB3                     	;# 
  1585  0DB3                     	;# 
  1586  0DB4                     	;# 
  1587  0DB5                     	;# 
  1588  0DB5                     	;# 
  1589  0DB6                     	;# 
  1590  0DB7                     	;# 
  1591  0DB7                     	;# 
  1592  0DB8                     	;# 
  1593  0DB9                     	;# 
  1594  0DB9                     	;# 
  1595  0DBA                     	;# 
  1596  0DBB                     	;# 
  1597  0DBC                     	;# 
  1598  0DBC                     	;# 
  1599  0DBD                     	;# 
  1600  0DBD                     	;# 
  1601  0DBE                     	;# 
  1602  0DBF                     	;# 
  1603  0DC0                     	;# 
  1604  0DC1                     	;# 
  1605  0DC1                     	;# 
  1606  0DC2                     	;# 
  1607  0DC3                     	;# 
  1608  0DC3                     	;# 
  1609  0DC4                     	;# 
  1610  0DC5                     	;# 
  1611  0DC5                     	;# 
  1612  0DC6                     	;# 
  1613  0DC7                     	;# 
  1614  0DC7                     	;# 
  1615  0DC8                     	;# 
  1616  0DC9                     	;# 
  1617  0DC9                     	;# 
  1618  0DCA                     	;# 
  1619  0DCB                     	;# 
  1620  0DCC                     	;# 
  1621  0DCC                     	;# 
  1622  0DCD                     	;# 
  1623  0DCD                     	;# 
  1624  0DCE                     	;# 
  1625  0DCF                     	;# 
  1626  0DD0                     	;# 
  1627  0E0F                     	;# 
  1628  0E10                     	;# 
  1629  0E11                     	;# 
  1630  0E12                     	;# 
  1631  0E13                     	;# 
  1632  0E14                     	;# 
  1633  0E15                     	;# 
  1634  0E16                     	;# 
  1635  0E17                     	;# 
  1636  0E90                     	;# 
  1637  0E91                     	;# 
  1638  0E92                     	;# 
  1639  0E94                     	;# 
  1640  0E95                     	;# 
  1641  0EA0                     	;# 
  1642  0EA1                     	;# 
  1643  0EA2                     	;# 
  1644  0EA3                     	;# 
  1645  0EA4                     	;# 
  1646  0EA5                     	;# 
  1647  0FE4                     	;# 
  1648  0FE5                     	;# 
  1649  0FE6                     	;# 
  1650  0FE7                     	;# 
  1651  0FE8                     	;# 
  1652  0FE8                     	;# 
  1653  0FE9                     	;# 
  1654  0FEA                     	;# 
  1655  0FEA                     	;# 
  1656  0FEB                     	;# 
  1657  0FED                     	;# 
  1658  0FEE                     	;# 
  1659  0FEE                     	;# 
  1660  0FEF                     	;# 
  1661  0000                     	;# 
  1662  0001                     	;# 
  1663  0002                     	;# 
  1664  0003                     	;# 
  1665  0004                     	;# 
  1666  0005                     	;# 
  1667  0006                     	;# 
  1668  0007                     	;# 
  1669  0008                     	;# 
  1670  0009                     	;# 
  1671  000A                     	;# 
  1672  000B                     	;# 
  1673  000C                     	;# 
  1674  000E                     	;# 
  1675  0011                     	;# 
  1676  0012                     	;# 
  1677  0013                     	;# 
  1678  0015                     	;# 
  1679  0016                     	;# 
  1680  0016                     	;# 
  1681  0017                     	;# 
  1682  0018                     	;# 
  1683  0019                     	;# 
  1684  001A                     	;# 
  1685  001B                     	;# 
  1686  001C                     	;# 
  1687  008C                     	;# 
  1688  008E                     	;# 
  1689  0091                     	;# 
  1690  0092                     	;# 
  1691  0093                     	;# 
  1692  0095                     	;# 
  1693  0096                     	;# 
  1694  0097                     	;# 
  1695  0098                     	;# 
  1696  0099                     	;# 
  1697  009A                     	;# 
  1698  009B                     	;# 
  1699  009B                     	;# 
  1700  009C                     	;# 
  1701  009D                     	;# 
  1702  009E                     	;# 
  1703  009F                     	;# 
  1704  010C                     	;# 
  1705  010E                     	;# 
  1706  0111                     	;# 
  1707  0112                     	;# 
  1708  0113                     	;# 
  1709  0114                     	;# 
  1710  0115                     	;# 
  1711  0116                     	;# 
  1712  0117                     	;# 
  1713  0118                     	;# 
  1714  0119                     	;# 
  1715  018C                     	;# 
  1716  018E                     	;# 
  1717  0191                     	;# 
  1718  0191                     	;# 
  1719  0192                     	;# 
  1720  0193                     	;# 
  1721  0193                     	;# 
  1722  0194                     	;# 
  1723  0195                     	;# 
  1724  0196                     	;# 
  1725  0197                     	;# 
  1726  0199                     	;# 
  1727  019A                     	;# 
  1728  019B                     	;# 
  1729  019B                     	;# 
  1730  019C                     	;# 
  1731  019D                     	;# 
  1732  019E                     	;# 
  1733  019F                     	;# 
  1734  020C                     	;# 
  1735  020E                     	;# 
  1736  028C                     	;# 
  1737  028E                     	;# 
  1738  030C                     	;# 
  1739  030E                     	;# 
  1740  038C                     	;# 
  1741  038E                     	;# 
  1742  0391                     	;# 
  1743  0392                     	;# 
  1744  0393                     	;# 
  1745  0397                     	;# 
  1746  0398                     	;# 
  1747  0399                     	;# 
  1748  0691                     	;# 
  1749  0692                     	;# 
  1750  0693                     	;# 
  1751  0694                     	;# 
  1752  0695                     	;# 
  1753  0D8E                     	;# 
  1754  0D8F                     	;# 
  1755  0D90                     	;# 
  1756  0D91                     	;# 
  1757  0D91                     	;# 
  1758  0D92                     	;# 
  1759  0D93                     	;# 
  1760  0D93                     	;# 
  1761  0D94                     	;# 
  1762  0D95                     	;# 
  1763  0D95                     	;# 
  1764  0D96                     	;# 
  1765  0D97                     	;# 
  1766  0D97                     	;# 
  1767  0D98                     	;# 
  1768  0D99                     	;# 
  1769  0D99                     	;# 
  1770  0D9A                     	;# 
  1771  0D9B                     	;# 
  1772  0D9C                     	;# 
  1773  0D9C                     	;# 
  1774  0D9D                     	;# 
  1775  0D9D                     	;# 
  1776  0D9E                     	;# 
  1777  0D9F                     	;# 
  1778  0DA0                     	;# 
  1779  0DA1                     	;# 
  1780  0DA1                     	;# 
  1781  0DA2                     	;# 
  1782  0DA3                     	;# 
  1783  0DA3                     	;# 
  1784  0DA4                     	;# 
  1785  0DA5                     	;# 
  1786  0DA5                     	;# 
  1787  0DA6                     	;# 
  1788  0DA7                     	;# 
  1789  0DA7                     	;# 
  1790  0DA8                     	;# 
  1791  0DA9                     	;# 
  1792  0DA9                     	;# 
  1793  0DAA                     	;# 
  1794  0DAB                     	;# 
  1795  0DAC                     	;# 
  1796  0DAC                     	;# 
  1797  0DAD                     	;# 
  1798  0DAD                     	;# 
  1799  0DAE                     	;# 
  1800  0DAF                     	;# 
  1801  0DB0                     	;# 
  1802  0DB1                     	;# 
  1803  0DB1                     	;# 
  1804  0DB2                     	;# 
  1805  0DB3                     	;# 
  1806  0DB3                     	;# 
  1807  0DB4                     	;# 
  1808  0DB5                     	;# 
  1809  0DB5                     	;# 
  1810  0DB6                     	;# 
  1811  0DB7                     	;# 
  1812  0DB7                     	;# 
  1813  0DB8                     	;# 
  1814  0DB9                     	;# 
  1815  0DB9                     	;# 
  1816  0DBA                     	;# 
  1817  0DBB                     	;# 
  1818  0DBC                     	;# 
  1819  0DBC                     	;# 
  1820  0DBD                     	;# 
  1821  0DBD                     	;# 
  1822  0DBE                     	;# 
  1823  0DBF                     	;# 
  1824  0DC0                     	;# 
  1825  0DC1                     	;# 
  1826  0DC1                     	;# 
  1827  0DC2                     	;# 
  1828  0DC3                     	;# 
  1829  0DC3                     	;# 
  1830  0DC4                     	;# 
  1831  0DC5                     	;# 
  1832  0DC5                     	;# 
  1833  0DC6                     	;# 
  1834  0DC7                     	;# 
  1835  0DC7                     	;# 
  1836  0DC8                     	;# 
  1837  0DC9                     	;# 
  1838  0DC9                     	;# 
  1839  0DCA                     	;# 
  1840  0DCB                     	;# 
  1841  0DCC                     	;# 
  1842  0DCC                     	;# 
  1843  0DCD                     	;# 
  1844  0DCD                     	;# 
  1845  0DCE                     	;# 
  1846  0DCF                     	;# 
  1847  0DD0                     	;# 
  1848  0E0F                     	;# 
  1849  0E10                     	;# 
  1850  0E11                     	;# 
  1851  0E12                     	;# 
  1852  0E13                     	;# 
  1853  0E14                     	;# 
  1854  0E15                     	;# 
  1855  0E16                     	;# 
  1856  0E17                     	;# 
  1857  0E90                     	;# 
  1858  0E91                     	;# 
  1859  0E92                     	;# 
  1860  0E94                     	;# 
  1861  0E95                     	;# 
  1862  0EA0                     	;# 
  1863  0EA1                     	;# 
  1864  0EA2                     	;# 
  1865  0EA3                     	;# 
  1866  0EA4                     	;# 
  1867  0EA5                     	;# 
  1868  0FE4                     	;# 
  1869  0FE5                     	;# 
  1870  0FE6                     	;# 
  1871  0FE7                     	;# 
  1872  0FE8                     	;# 
  1873  0FE8                     	;# 
  1874  0FE9                     	;# 
  1875  0FEA                     	;# 
  1876  0FEA                     	;# 
  1877  0FEB                     	;# 
  1878  0FED                     	;# 
  1879  0FEE                     	;# 
  1880  0FEE                     	;# 
  1881  0FEF                     	;# 
  1882  0000                     	;# 
  1883  0001                     	;# 
  1884  0002                     	;# 
  1885  0003                     	;# 
  1886  0004                     	;# 
  1887  0005                     	;# 
  1888  0006                     	;# 
  1889  0007                     	;# 
  1890  0008                     	;# 
  1891  0009                     	;# 
  1892  000A                     	;# 
  1893  000B                     	;# 
  1894  000C                     	;# 
  1895  000E                     	;# 
  1896  0011                     	;# 
  1897  0012                     	;# 
  1898  0013                     	;# 
  1899  0015                     	;# 
  1900  0016                     	;# 
  1901  0016                     	;# 
  1902  0017                     	;# 
  1903  0018                     	;# 
  1904  0019                     	;# 
  1905  001A                     	;# 
  1906  001B                     	;# 
  1907  001C                     	;# 
  1908  008C                     	;# 
  1909  008E                     	;# 
  1910  0091                     	;# 
  1911  0092                     	;# 
  1912  0093                     	;# 
  1913  0095                     	;# 
  1914  0096                     	;# 
  1915  0097                     	;# 
  1916  0098                     	;# 
  1917  0099                     	;# 
  1918  009A                     	;# 
  1919  009B                     	;# 
  1920  009B                     	;# 
  1921  009C                     	;# 
  1922  009D                     	;# 
  1923  009E                     	;# 
  1924  009F                     	;# 
  1925  010C                     	;# 
  1926  010E                     	;# 
  1927  0111                     	;# 
  1928  0112                     	;# 
  1929  0113                     	;# 
  1930  0114                     	;# 
  1931  0115                     	;# 
  1932  0116                     	;# 
  1933  0117                     	;# 
  1934  0118                     	;# 
  1935  0119                     	;# 
  1936  018C                     	;# 
  1937  018E                     	;# 
  1938  0191                     	;# 
  1939  0191                     	;# 
  1940  0192                     	;# 
  1941  0193                     	;# 
  1942  0193                     	;# 
  1943  0194                     	;# 
  1944  0195                     	;# 
  1945  0196                     	;# 
  1946  0197                     	;# 
  1947  0199                     	;# 
  1948  019A                     	;# 
  1949  019B                     	;# 
  1950  019B                     	;# 
  1951  019C                     	;# 
  1952  019D                     	;# 
  1953  019E                     	;# 
  1954  019F                     	;# 
  1955  020C                     	;# 
  1956  020E                     	;# 
  1957  028C                     	;# 
  1958  028E                     	;# 
  1959  030C                     	;# 
  1960  030E                     	;# 
  1961  038C                     	;# 
  1962  038E                     	;# 
  1963  0391                     	;# 
  1964  0392                     	;# 
  1965  0393                     	;# 
  1966  0397                     	;# 
  1967  0398                     	;# 
  1968  0399                     	;# 
  1969  0691                     	;# 
  1970  0692                     	;# 
  1971  0693                     	;# 
  1972  0694                     	;# 
  1973  0695                     	;# 
  1974  0D8E                     	;# 
  1975  0D8F                     	;# 
  1976  0D90                     	;# 
  1977  0D91                     	;# 
  1978  0D91                     	;# 
  1979  0D92                     	;# 
  1980  0D93                     	;# 
  1981  0D93                     	;# 
  1982  0D94                     	;# 
  1983  0D95                     	;# 
  1984  0D95                     	;# 
  1985  0D96                     	;# 
  1986  0D97                     	;# 
  1987  0D97                     	;# 
  1988  0D98                     	;# 
  1989  0D99                     	;# 
  1990  0D99                     	;# 
  1991  0D9A                     	;# 
  1992  0D9B                     	;# 
  1993  0D9C                     	;# 
  1994  0D9C                     	;# 
  1995  0D9D                     	;# 
  1996  0D9D                     	;# 
  1997  0D9E                     	;# 
  1998  0D9F                     	;# 
  1999  0DA0                     	;# 
  2000  0DA1                     	;# 
  2001  0DA1                     	;# 
  2002  0DA2                     	;# 
  2003  0DA3                     	;# 
  2004  0DA3                     	;# 
  2005  0DA4                     	;# 
  2006  0DA5                     	;# 
  2007  0DA5                     	;# 
  2008  0DA6                     	;# 
  2009  0DA7                     	;# 
  2010  0DA7                     	;# 
  2011  0DA8                     	;# 
  2012  0DA9                     	;# 
  2013  0DA9                     	;# 
  2014  0DAA                     	;# 
  2015  0DAB                     	;# 
  2016  0DAC                     	;# 
  2017  0DAC                     	;# 
  2018  0DAD                     	;# 
  2019  0DAD                     	;# 
  2020  0DAE                     	;# 
  2021  0DAF                     	;# 
  2022  0DB0                     	;# 
  2023  0DB1                     	;# 
  2024  0DB1                     	;# 
  2025  0DB2                     	;# 
  2026  0DB3                     	;# 
  2027  0DB3                     	;# 
  2028  0DB4                     	;# 
  2029  0DB5                     	;# 
  2030  0DB5                     	;# 
  2031  0DB6                     	;# 
  2032  0DB7                     	;# 
  2033  0DB7                     	;# 
  2034  0DB8                     	;# 
  2035  0DB9                     	;# 
  2036  0DB9                     	;# 
  2037  0DBA                     	;# 
  2038  0DBB                     	;# 
  2039  0DBC                     	;# 
  2040  0DBC                     	;# 
  2041  0DBD                     	;# 
  2042  0DBD                     	;# 
  2043  0DBE                     	;# 
  2044  0DBF                     	;# 
  2045  0DC0                     	;# 
  2046  0DC1                     	;# 
  2047  0DC1                     	;# 
  2048  0DC2                     	;# 
  2049  0DC3                     	;# 
  2050  0DC3                     	;# 
  2051  0DC4                     	;# 
  2052  0DC5                     	;# 
  2053  0DC5                     	;# 
  2054  0DC6                     	;# 
  2055  0DC7                     	;# 
  2056  0DC7                     	;# 
  2057  0DC8                     	;# 
  2058  0DC9                     	;# 
  2059  0DC9                     	;# 
  2060  0DCA                     	;# 
  2061  0DCB                     	;# 
  2062  0DCC                     	;# 
  2063  0DCC                     	;# 
  2064  0DCD                     	;# 
  2065  0DCD                     	;# 
  2066  0DCE                     	;# 
  2067  0DCF                     	;# 
  2068  0DD0                     	;# 
  2069  0E0F                     	;# 
  2070  0E10                     	;# 
  2071  0E11                     	;# 
  2072  0E12                     	;# 
  2073  0E13                     	;# 
  2074  0E14                     	;# 
  2075  0E15                     	;# 
  2076  0E16                     	;# 
  2077  0E17                     	;# 
  2078  0E90                     	;# 
  2079  0E91                     	;# 
  2080  0E92                     	;# 
  2081  0E94                     	;# 
  2082  0E95                     	;# 
  2083  0EA0                     	;# 
  2084  0EA1                     	;# 
  2085  0EA2                     	;# 
  2086  0EA3                     	;# 
  2087  0EA4                     	;# 
  2088  0EA5                     	;# 
  2089  0FE4                     	;# 
  2090  0FE5                     	;# 
  2091  0FE6                     	;# 
  2092  0FE7                     	;# 
  2093  0FE8                     	;# 
  2094  0FE8                     	;# 
  2095  0FE9                     	;# 
  2096  0FEA                     	;# 
  2097  0FEA                     	;# 
  2098  0FEB                     	;# 
  2099  0FED                     	;# 
  2100  0FEE                     	;# 
  2101  0FEE                     	;# 
  2102  0FEF                     	;# 
  2103  0000                     	;# 
  2104  0001                     	;# 
  2105  0002                     	;# 
  2106  0003                     	;# 
  2107  0004                     	;# 
  2108  0005                     	;# 
  2109  0006                     	;# 
  2110  0007                     	;# 
  2111  0008                     	;# 
  2112  0009                     	;# 
  2113  000A                     	;# 
  2114  000B                     	;# 
  2115  000C                     	;# 
  2116  000E                     	;# 
  2117  0011                     	;# 
  2118  0012                     	;# 
  2119  0013                     	;# 
  2120  0015                     	;# 
  2121  0016                     	;# 
  2122  0016                     	;# 
  2123  0017                     	;# 
  2124  0018                     	;# 
  2125  0019                     	;# 
  2126  001A                     	;# 
  2127  001B                     	;# 
  2128  001C                     	;# 
  2129  008C                     	;# 
  2130  008E                     	;# 
  2131  0091                     	;# 
  2132  0092                     	;# 
  2133  0093                     	;# 
  2134  0095                     	;# 
  2135  0096                     	;# 
  2136  0097                     	;# 
  2137  0098                     	;# 
  2138  0099                     	;# 
  2139  009A                     	;# 
  2140  009B                     	;# 
  2141  009B                     	;# 
  2142  009C                     	;# 
  2143  009D                     	;# 
  2144  009E                     	;# 
  2145  009F                     	;# 
  2146  010C                     	;# 
  2147  010E                     	;# 
  2148  0111                     	;# 
  2149  0112                     	;# 
  2150  0113                     	;# 
  2151  0114                     	;# 
  2152  0115                     	;# 
  2153  0116                     	;# 
  2154  0117                     	;# 
  2155  0118                     	;# 
  2156  0119                     	;# 
  2157  018C                     	;# 
  2158  018E                     	;# 
  2159  0191                     	;# 
  2160  0191                     	;# 
  2161  0192                     	;# 
  2162  0193                     	;# 
  2163  0193                     	;# 
  2164  0194                     	;# 
  2165  0195                     	;# 
  2166  0196                     	;# 
  2167  0197                     	;# 
  2168  0199                     	;# 
  2169  019A                     	;# 
  2170  019B                     	;# 
  2171  019B                     	;# 
  2172  019C                     	;# 
  2173  019D                     	;# 
  2174  019E                     	;# 
  2175  019F                     	;# 
  2176  020C                     	;# 
  2177  020E                     	;# 
  2178  028C                     	;# 
  2179  028E                     	;# 
  2180  030C                     	;# 
  2181  030E                     	;# 
  2182  038C                     	;# 
  2183  038E                     	;# 
  2184  0391                     	;# 
  2185  0392                     	;# 
  2186  0393                     	;# 
  2187  0397                     	;# 
  2188  0398                     	;# 
  2189  0399                     	;# 
  2190  0691                     	;# 
  2191  0692                     	;# 
  2192  0693                     	;# 
  2193  0694                     	;# 
  2194  0695                     	;# 
  2195  0D8E                     	;# 
  2196  0D8F                     	;# 
  2197  0D90                     	;# 
  2198  0D91                     	;# 
  2199  0D91                     	;# 
  2200  0D92                     	;# 
  2201  0D93                     	;# 
  2202  0D93                     	;# 
  2203  0D94                     	;# 
  2204  0D95                     	;# 
  2205  0D95                     	;# 
  2206  0D96                     	;# 
  2207  0D97                     	;# 
  2208  0D97                     	;# 
  2209  0D98                     	;# 
  2210  0D99                     	;# 
  2211  0D99                     	;# 
  2212  0D9A                     	;# 
  2213  0D9B                     	;# 
  2214  0D9C                     	;# 
  2215  0D9C                     	;# 
  2216  0D9D                     	;# 
  2217  0D9D                     	;# 
  2218  0D9E                     	;# 
  2219  0D9F                     	;# 
  2220  0DA0                     	;# 
  2221  0DA1                     	;# 
  2222  0DA1                     	;# 
  2223  0DA2                     	;# 
  2224  0DA3                     	;# 
  2225  0DA3                     	;# 
  2226  0DA4                     	;# 
  2227  0DA5                     	;# 
  2228  0DA5                     	;# 
  2229  0DA6                     	;# 
  2230  0DA7                     	;# 
  2231  0DA7                     	;# 
  2232  0DA8                     	;# 
  2233  0DA9                     	;# 
  2234  0DA9                     	;# 
  2235  0DAA                     	;# 
  2236  0DAB                     	;# 
  2237  0DAC                     	;# 
  2238  0DAC                     	;# 
  2239  0DAD                     	;# 
  2240  0DAD                     	;# 
  2241  0DAE                     	;# 
  2242  0DAF                     	;# 
  2243  0DB0                     	;# 
  2244  0DB1                     	;# 
  2245  0DB1                     	;# 
  2246  0DB2                     	;# 
  2247  0DB3                     	;# 
  2248  0DB3                     	;# 
  2249  0DB4                     	;# 
  2250  0DB5                     	;# 
  2251  0DB5                     	;# 
  2252  0DB6                     	;# 
  2253  0DB7                     	;# 
  2254  0DB7                     	;# 
  2255  0DB8                     	;# 
  2256  0DB9                     	;# 
  2257  0DB9                     	;# 
  2258  0DBA                     	;# 
  2259  0DBB                     	;# 
  2260  0DBC                     	;# 
  2261  0DBC                     	;# 
  2262  0DBD                     	;# 
  2263  0DBD                     	;# 
  2264  0DBE                     	;# 
  2265  0DBF                     	;# 
  2266  0DC0                     	;# 
  2267  0DC1                     	;# 
  2268  0DC1                     	;# 
  2269  0DC2                     	;# 
  2270  0DC3                     	;# 
  2271  0DC3                     	;# 
  2272  0DC4                     	;# 
  2273  0DC5                     	;# 
  2274  0DC5                     	;# 
  2275  0DC6                     	;# 
  2276  0DC7                     	;# 
  2277  0DC7                     	;# 
  2278  0DC8                     	;# 
  2279  0DC9                     	;# 
  2280  0DC9                     	;# 
  2281  0DCA                     	;# 
  2282  0DCB                     	;# 
  2283  0DCC                     	;# 
  2284  0DCC                     	;# 
  2285  0DCD                     	;# 
  2286  0DCD                     	;# 
  2287  0DCE                     	;# 
  2288  0DCF                     	;# 
  2289  0DD0                     	;# 
  2290  0E0F                     	;# 
  2291  0E10                     	;# 
  2292  0E11                     	;# 
  2293  0E12                     	;# 
  2294  0E13                     	;# 
  2295  0E14                     	;# 
  2296  0E15                     	;# 
  2297  0E16                     	;# 
  2298  0E17                     	;# 
  2299  0E90                     	;# 
  2300  0E91                     	;# 
  2301  0E92                     	;# 
  2302  0E94                     	;# 
  2303  0E95                     	;# 
  2304  0EA0                     	;# 
  2305  0EA1                     	;# 
  2306  0EA2                     	;# 
  2307  0EA3                     	;# 
  2308  0EA4                     	;# 
  2309  0EA5                     	;# 
  2310  0FE4                     	;# 
  2311  0FE5                     	;# 
  2312  0FE6                     	;# 
  2313  0FE7                     	;# 
  2314  0FE8                     	;# 
  2315  0FE8                     	;# 
  2316  0FE9                     	;# 
  2317  0FEA                     	;# 
  2318  0FEA                     	;# 
  2319  0FEB                     	;# 
  2320  0FED                     	;# 
  2321  0FEE                     	;# 
  2322  0FEE                     	;# 
  2323  0FEF                     	;# 
  2324  0000                     	;# 
  2325  0001                     	;# 
  2326  0002                     	;# 
  2327  0003                     	;# 
  2328  0004                     	;# 
  2329  0005                     	;# 
  2330  0006                     	;# 
  2331  0007                     	;# 
  2332  0008                     	;# 
  2333  0009                     	;# 
  2334  000A                     	;# 
  2335  000B                     	;# 
  2336  000C                     	;# 
  2337  000E                     	;# 
  2338  0011                     	;# 
  2339  0012                     	;# 
  2340  0013                     	;# 
  2341  0015                     	;# 
  2342  0016                     	;# 
  2343  0016                     	;# 
  2344  0017                     	;# 
  2345  0018                     	;# 
  2346  0019                     	;# 
  2347  001A                     	;# 
  2348  001B                     	;# 
  2349  001C                     	;# 
  2350  008C                     	;# 
  2351  008E                     	;# 
  2352  0091                     	;# 
  2353  0092                     	;# 
  2354  0093                     	;# 
  2355  0095                     	;# 
  2356  0096                     	;# 
  2357  0097                     	;# 
  2358  0098                     	;# 
  2359  0099                     	;# 
  2360  009A                     	;# 
  2361  009B                     	;# 
  2362  009B                     	;# 
  2363  009C                     	;# 
  2364  009D                     	;# 
  2365  009E                     	;# 
  2366  009F                     	;# 
  2367  010C                     	;# 
  2368  010E                     	;# 
  2369  0111                     	;# 
  2370  0112                     	;# 
  2371  0113                     	;# 
  2372  0114                     	;# 
  2373  0115                     	;# 
  2374  0116                     	;# 
  2375  0117                     	;# 
  2376  0118                     	;# 
  2377  0119                     	;# 
  2378  018C                     	;# 
  2379  018E                     	;# 
  2380  0191                     	;# 
  2381  0191                     	;# 
  2382  0192                     	;# 
  2383  0193                     	;# 
  2384  0193                     	;# 
  2385  0194                     	;# 
  2386  0195                     	;# 
  2387  0196                     	;# 
  2388  0197                     	;# 
  2389  0199                     	;# 
  2390  019A                     	;# 
  2391  019B                     	;# 
  2392  019B                     	;# 
  2393  019C                     	;# 
  2394  019D                     	;# 
  2395  019E                     	;# 
  2396  019F                     	;# 
  2397  020C                     	;# 
  2398  020E                     	;# 
  2399  028C                     	;# 
  2400  028E                     	;# 
  2401  030C                     	;# 
  2402  030E                     	;# 
  2403  038C                     	;# 
  2404  038E                     	;# 
  2405  0391                     	;# 
  2406  0392                     	;# 
  2407  0393                     	;# 
  2408  0397                     	;# 
  2409  0398                     	;# 
  2410  0399                     	;# 
  2411  0691                     	;# 
  2412  0692                     	;# 
  2413  0693                     	;# 
  2414  0694                     	;# 
  2415  0695                     	;# 
  2416  0D8E                     	;# 
  2417  0D8F                     	;# 
  2418  0D90                     	;# 
  2419  0D91                     	;# 
  2420  0D91                     	;# 
  2421  0D92                     	;# 
  2422  0D93                     	;# 
  2423  0D93                     	;# 
  2424  0D94                     	;# 
  2425  0D95                     	;# 
  2426  0D95                     	;# 
  2427  0D96                     	;# 
  2428  0D97                     	;# 
  2429  0D97                     	;# 
  2430  0D98                     	;# 
  2431  0D99                     	;# 
  2432  0D99                     	;# 
  2433  0D9A                     	;# 
  2434  0D9B                     	;# 
  2435  0D9C                     	;# 
  2436  0D9C                     	;# 
  2437  0D9D                     	;# 
  2438  0D9D                     	;# 
  2439  0D9E                     	;# 
  2440  0D9F                     	;# 
  2441  0DA0                     	;# 
  2442  0DA1                     	;# 
  2443  0DA1                     	;# 
  2444  0DA2                     	;# 
  2445  0DA3                     	;# 
  2446  0DA3                     	;# 
  2447  0DA4                     	;# 
  2448  0DA5                     	;# 
  2449  0DA5                     	;# 
  2450  0DA6                     	;# 
  2451  0DA7                     	;# 
  2452  0DA7                     	;# 
  2453  0DA8                     	;# 
  2454  0DA9                     	;# 
  2455  0DA9                     	;# 
  2456  0DAA                     	;# 
  2457  0DAB                     	;# 
  2458  0DAC                     	;# 
  2459  0DAC                     	;# 
  2460  0DAD                     	;# 
  2461  0DAD                     	;# 
  2462  0DAE                     	;# 
  2463  0DAF                     	;# 
  2464  0DB0                     	;# 
  2465  0DB1                     	;# 
  2466  0DB1                     	;# 
  2467  0DB2                     	;# 
  2468  0DB3                     	;# 
  2469  0DB3                     	;# 
  2470  0DB4                     	;# 
  2471  0DB5                     	;# 
  2472  0DB5                     	;# 
  2473  0DB6                     	;# 
  2474  0DB7                     	;# 
  2475  0DB7                     	;# 
  2476  0DB8                     	;# 
  2477  0DB9                     	;# 
  2478  0DB9                     	;# 
  2479  0DBA                     	;# 
  2480  0DBB                     	;# 
  2481  0DBC                     	;# 
  2482  0DBC                     	;# 
  2483  0DBD                     	;# 
  2484  0DBD                     	;# 
  2485  0DBE                     	;# 
  2486  0DBF                     	;# 
  2487  0DC0                     	;# 
  2488  0DC1                     	;# 
  2489  0DC1                     	;# 
  2490  0DC2                     	;# 
  2491  0DC3                     	;# 
  2492  0DC3                     	;# 
  2493  0DC4                     	;# 
  2494  0DC5                     	;# 
  2495  0DC5                     	;# 
  2496  0DC6                     	;# 
  2497  0DC7                     	;# 
  2498  0DC7                     	;# 
  2499  0DC8                     	;# 
  2500  0DC9                     	;# 
  2501  0DC9                     	;# 
  2502  0DCA                     	;# 
  2503  0DCB                     	;# 
  2504  0DCC                     	;# 
  2505  0DCC                     	;# 
  2506  0DCD                     	;# 
  2507  0DCD                     	;# 
  2508  0DCE                     	;# 
  2509  0DCF                     	;# 
  2510  0DD0                     	;# 
  2511  0E0F                     	;# 
  2512  0E10                     	;# 
  2513  0E11                     	;# 
  2514  0E12                     	;# 
  2515  0E13                     	;# 
  2516  0E14                     	;# 
  2517  0E15                     	;# 
  2518  0E16                     	;# 
  2519  0E17                     	;# 
  2520  0E90                     	;# 
  2521  0E91                     	;# 
  2522  0E92                     	;# 
  2523  0E94                     	;# 
  2524  0E95                     	;# 
  2525  0EA0                     	;# 
  2526  0EA1                     	;# 
  2527  0EA2                     	;# 
  2528  0EA3                     	;# 
  2529  0EA4                     	;# 
  2530  0EA5                     	;# 
  2531  0FE4                     	;# 
  2532  0FE5                     	;# 
  2533  0FE6                     	;# 
  2534  0FE7                     	;# 
  2535  0FE8                     	;# 
  2536  0FE8                     	;# 
  2537  0FE9                     	;# 
  2538  0FEA                     	;# 
  2539  0FEA                     	;# 
  2540  0FEB                     	;# 
  2541  0FED                     	;# 
  2542  0FEE                     	;# 
  2543  0FEE                     	;# 
  2544  0FEF                     	;# 
  2545  0FFF                     	;# 
  2546  0000                     	;# 
  2547  0001                     	;# 
  2548  0002                     	;# 
  2549  0003                     	;# 
  2550  0004                     	;# 
  2551  0005                     	;# 
  2552  0006                     	;# 
  2553  0007                     	;# 
  2554  0008                     	;# 
  2555  0009                     	;# 
  2556  000A                     	;# 
  2557  000B                     	;# 
  2558  000C                     	;# 
  2559  000E                     	;# 
  2560  0011                     	;# 
  2561  0012                     	;# 
  2562  0013                     	;# 
  2563  0015                     	;# 
  2564  0016                     	;# 
  2565  0016                     	;# 
  2566  0017                     	;# 
  2567  0018                     	;# 
  2568  0019                     	;# 
  2569  001A                     	;# 
  2570  001B                     	;# 
  2571  001C                     	;# 
  2572  008C                     	;# 
  2573  008E                     	;# 
  2574  0091                     	;# 
  2575  0092                     	;# 
  2576  0093                     	;# 
  2577  0095                     	;# 
  2578  0096                     	;# 
  2579  0097                     	;# 
  2580  0098                     	;# 
  2581  0099                     	;# 
  2582  009A                     	;# 
  2583  009B                     	;# 
  2584  009B                     	;# 
  2585  009C                     	;# 
  2586  009D                     	;# 
  2587  009E                     	;# 
  2588  009F                     	;# 
  2589  010C                     	;# 
  2590  010E                     	;# 
  2591  0111                     	;# 
  2592  0112                     	;# 
  2593  0113                     	;# 
  2594  0114                     	;# 
  2595  0115                     	;# 
  2596  0116                     	;# 
  2597  0117                     	;# 
  2598  0118                     	;# 
  2599  0119                     	;# 
  2600  018C                     	;# 
  2601  018E                     	;# 
  2602  0191                     	;# 
  2603  0191                     	;# 
  2604  0192                     	;# 
  2605  0193                     	;# 
  2606  0193                     	;# 
  2607  0194                     	;# 
  2608  0195                     	;# 
  2609  0196                     	;# 
  2610  0197                     	;# 
  2611  0199                     	;# 
  2612  019A                     	;# 
  2613  019B                     	;# 
  2614  019B                     	;# 
  2615  019C                     	;# 
  2616  019D                     	;# 
  2617  019E                     	;# 
  2618  019F                     	;# 
  2619  020C                     	;# 
  2620  020E                     	;# 
  2621  028C                     	;# 
  2622  028E                     	;# 
  2623  030C                     	;# 
  2624  030E                     	;# 
  2625  038C                     	;# 
  2626  038E                     	;# 
  2627  0391                     	;# 
  2628  0392                     	;# 
  2629  0393                     	;# 
  2630  0397                     	;# 
  2631  0398                     	;# 
  2632  0399                     	;# 
  2633  0691                     	;# 
  2634  0692                     	;# 
  2635  0693                     	;# 
  2636  0694                     	;# 
  2637  0695                     	;# 
  2638  0D8E                     	;# 
  2639  0D8F                     	;# 
  2640  0D90                     	;# 
  2641  0D91                     	;# 
  2642  0D91                     	;# 
  2643  0D92                     	;# 
  2644  0D93                     	;# 
  2645  0D93                     	;# 
  2646  0D94                     	;# 
  2647  0D95                     	;# 
  2648  0D95                     	;# 
  2649  0D96                     	;# 
  2650  0D97                     	;# 
  2651  0D97                     	;# 
  2652  0D98                     	;# 
  2653  0D99                     	;# 
  2654  0D99                     	;# 
  2655  0D9A                     	;# 
  2656  0D9B                     	;# 
  2657  0D9C                     	;# 
  2658  0D9C                     	;# 
  2659  0D9D                     	;# 
  2660  0D9D                     	;# 
  2661  0D9E                     	;# 
  2662  0D9F                     	;# 
  2663  0DA0                     	;# 
  2664  0DA1                     	;# 
  2665  0DA1                     	;# 
  2666  0DA2                     	;# 
  2667  0DA3                     	;# 
  2668  0DA3                     	;# 
  2669  0DA4                     	;# 
  2670  0DA5                     	;# 
  2671  0DA5                     	;# 
  2672  0DA6                     	;# 
  2673  0DA7                     	;# 
  2674  0DA7                     	;# 
  2675  0DA8                     	;# 
  2676  0DA9                     	;# 
  2677  0DA9                     	;# 
  2678  0DAA                     	;# 
  2679  0DAB                     	;# 
  2680  0DAC                     	;# 
  2681  0DAC                     	;# 
  2682  0DAD                     	;# 
  2683  0DAD                     	;# 
  2684  0DAE                     	;# 
  2685  0DAF                     	;# 
  2686  0DB0                     	;# 
  2687  0DB1                     	;# 
  2688  0DB1                     	;# 
  2689  0DB2                     	;# 
  2690  0DB3                     	;# 
  2691  0DB3                     	;# 
  2692  0DB4                     	;# 
  2693  0DB5                     	;# 
  2694  0DB5                     	;# 
  2695  0DB6                     	;# 
  2696  0DB7                     	;# 
  2697  0DB7                     	;# 
  2698  0DB8                     	;# 
  2699  0DB9                     	;# 
  2700  0DB9                     	;# 
  2701  0DBA                     	;# 
  2702  0DBB                     	;# 
  2703  0DBC                     	;# 
  2704  0DBC                     	;# 
  2705  0DBD                     	;# 
  2706  0DBD                     	;# 
  2707  0DBE                     	;# 
  2708  0DBF                     	;# 
  2709  0DC0                     	;# 
  2710  0DC1                     	;# 
  2711  0DC1                     	;# 
  2712  0DC2                     	;# 
  2713  0DC3                     	;# 
  2714  0DC3                     	;# 
  2715  0DC4                     	;# 
  2716  0DC5                     	;# 
  2717  0DC5                     	;# 
  2718  0DC6                     	;# 
  2719  0DC7                     	;# 
  2720  0DC7                     	;# 
  2721  0DC8                     	;# 
  2722  0DC9                     	;# 
  2723  0DC9                     	;# 
  2724  0DCA                     	;# 
  2725  0DCB                     	;# 
  2726  0DCC                     	;# 
  2727  0DCC                     	;# 
  2728  0DCD                     	;# 
  2729  0DCD                     	;# 
  2730  0DCE                     	;# 
  2731  0DCF                     	;# 
  2732  0DD0                     	;# 
  2733  0E0F                     	;# 
  2734  0E10                     	;# 
  2735  0E11                     	;# 
  2736  0E12                     	;# 
  2737  0E13                     	;# 
  2738  0E14                     	;# 
  2739  0E15                     	;# 
  2740  0E16                     	;# 
  2741  0E17                     	;# 
  2742  0E90                     	;# 
  2743  0E91                     	;# 
  2744  0E92                     	;# 
  2745  0E94                     	;# 
  2746  0E95                     	;# 
  2747  0EA0                     	;# 
  2748  0EA1                     	;# 
  2749  0EA2                     	;# 
  2750  0EA3                     	;# 
  2751  0EA4                     	;# 
  2752  0EA5                     	;# 
  2753  0FE4                     	;# 
  2754  0FE5                     	;# 
  2755  0FE6                     	;# 
  2756  0FE7                     	;# 
  2757  0FE8                     	;# 
  2758  0FE8                     	;# 
  2759  0FE9                     	;# 
  2760  0FEA                     	;# 
  2761  0FEA                     	;# 
  2762  0FEB                     	;# 
  2763  0FED                     	;# 
  2764  0FEE                     	;# 
  2765  0FEE                     	;# 
  2766  0FEF                     	;# 
  2767  0FFF                     	;# 
  2768  0000                     	;# 
  2769  0001                     	;# 
  2770  0002                     	;# 
  2771  0003                     	;# 
  2772  0004                     	;# 
  2773  0005                     	;# 
  2774  0006                     	;# 
  2775  0007                     	;# 
  2776  0008                     	;# 
  2777  0009                     	;# 
  2778  000A                     	;# 
  2779  000B                     	;# 
  2780  000C                     	;# 
  2781  000E                     	;# 
  2782  0011                     	;# 
  2783  0012                     	;# 
  2784  0013                     	;# 
  2785  0015                     	;# 
  2786  0016                     	;# 
  2787  0016                     	;# 
  2788  0017                     	;# 
  2789  0018                     	;# 
  2790  0019                     	;# 
  2791  001A                     	;# 
  2792  001B                     	;# 
  2793  001C                     	;# 
  2794  008C                     	;# 
  2795  008E                     	;# 
  2796  0091                     	;# 
  2797  0092                     	;# 
  2798  0093                     	;# 
  2799  0095                     	;# 
  2800  0096                     	;# 
  2801  0097                     	;# 
  2802  0098                     	;# 
  2803  0099                     	;# 
  2804  009A                     	;# 
  2805  009B                     	;# 
  2806  009B                     	;# 
  2807  009C                     	;# 
  2808  009D                     	;# 
  2809  009E                     	;# 
  2810  009F                     	;# 
  2811  010C                     	;# 
  2812  010E                     	;# 
  2813  0111                     	;# 
  2814  0112                     	;# 
  2815  0113                     	;# 
  2816  0114                     	;# 
  2817  0115                     	;# 
  2818  0116                     	;# 
  2819  0117                     	;# 
  2820  0118                     	;# 
  2821  0119                     	;# 
  2822  018C                     	;# 
  2823  018E                     	;# 
  2824  0191                     	;# 
  2825  0191                     	;# 
  2826  0192                     	;# 
  2827  0193                     	;# 
  2828  0193                     	;# 
  2829  0194                     	;# 
  2830  0195                     	;# 
  2831  0196                     	;# 
  2832  0197                     	;# 
  2833  0199                     	;# 
  2834  019A                     	;# 
  2835  019B                     	;# 
  2836  019B                     	;# 
  2837  019C                     	;# 
  2838  019D                     	;# 
  2839  019E                     	;# 
  2840  019F                     	;# 
  2841  020C                     	;# 
  2842  020E                     	;# 
  2843  028C                     	;# 
  2844  028E                     	;# 
  2845  030C                     	;# 
  2846  030E                     	;# 
  2847  038C                     	;# 
  2848  038E                     	;# 
  2849  0391                     	;# 
  2850  0392                     	;# 
  2851  0393                     	;# 
  2852  0397                     	;# 
  2853  0398                     	;# 
  2854  0399                     	;# 
  2855  0691                     	;# 
  2856  0692                     	;# 
  2857  0693                     	;# 
  2858  0694                     	;# 
  2859  0695                     	;# 
  2860  0D8E                     	;# 
  2861  0D8F                     	;# 
  2862  0D90                     	;# 
  2863  0D91                     	;# 
  2864  0D91                     	;# 
  2865  0D92                     	;# 
  2866  0D93                     	;# 
  2867  0D93                     	;# 
  2868  0D94                     	;# 
  2869  0D95                     	;# 
  2870  0D95                     	;# 
  2871  0D96                     	;# 
  2872  0D97                     	;# 
  2873  0D97                     	;# 
  2874  0D98                     	;# 
  2875  0D99                     	;# 
  2876  0D99                     	;# 
  2877  0D9A                     	;# 
  2878  0D9B                     	;# 
  2879  0D9C                     	;# 
  2880  0D9C                     	;# 
  2881  0D9D                     	;# 
  2882  0D9D                     	;# 
  2883  0D9E                     	;# 
  2884  0D9F                     	;# 
  2885  0DA0                     	;# 
  2886  0DA1                     	;# 
  2887  0DA1                     	;# 
  2888  0DA2                     	;# 
  2889  0DA3                     	;# 
  2890  0DA3                     	;# 
  2891  0DA4                     	;# 
  2892  0DA5                     	;# 
  2893  0DA5                     	;# 
  2894  0DA6                     	;# 
  2895  0DA7                     	;# 
  2896  0DA7                     	;# 
  2897  0DA8                     	;# 
  2898  0DA9                     	;# 
  2899  0DA9                     	;# 
  2900  0DAA                     	;# 
  2901  0DAB                     	;# 
  2902  0DAC                     	;# 
  2903  0DAC                     	;# 
  2904  0DAD                     	;# 
  2905  0DAD                     	;# 
  2906  0DAE                     	;# 
  2907  0DAF                     	;# 
  2908  0DB0                     	;# 
  2909  0DB1                     	;# 
  2910  0DB1                     	;# 
  2911  0DB2                     	;# 
  2912  0DB3                     	;# 
  2913  0DB3                     	;# 
  2914  0DB4                     	;# 
  2915  0DB5                     	;# 
  2916  0DB5                     	;# 
  2917  0DB6                     	;# 
  2918  0DB7                     	;# 
  2919  0DB7                     	;# 
  2920  0DB8                     	;# 
  2921  0DB9                     	;# 
  2922  0DB9                     	;# 
  2923  0DBA                     	;# 
  2924  0DBB                     	;# 
  2925  0DBC                     	;# 
  2926  0DBC                     	;# 
  2927  0DBD                     	;# 
  2928  0DBD                     	;# 
  2929  0DBE                     	;# 
  2930  0DBF                     	;# 
  2931  0DC0                     	;# 
  2932  0DC1                     	;# 
  2933  0DC1                     	;# 
  2934  0DC2                     	;# 
  2935  0DC3                     	;# 
  2936  0DC3                     	;# 
  2937  0DC4                     	;# 
  2938  0DC5                     	;# 
  2939  0DC5                     	;# 
  2940  0DC6                     	;# 
  2941  0DC7                     	;# 
  2942  0DC7                     	;# 
  2943  0DC8                     	;# 
  2944  0DC9                     	;# 
  2945  0DC9                     	;# 
  2946  0DCA                     	;# 
  2947  0DCB                     	;# 
  2948  0DCC                     	;# 
  2949  0DCC                     	;# 
  2950  0DCD                     	;# 
  2951  0DCD                     	;# 
  2952  0DCE                     	;# 
  2953  0DCF                     	;# 
  2954  0DD0                     	;# 
  2955  0E0F                     	;# 
  2956  0E10                     	;# 
  2957  0E11                     	;# 
  2958  0E12                     	;# 
  2959  0E13                     	;# 
  2960  0E14                     	;# 
  2961  0E15                     	;# 
  2962  0E16                     	;# 
  2963  0E17                     	;# 
  2964  0E90                     	;# 
  2965  0E91                     	;# 
  2966  0E92                     	;# 
  2967  0E94                     	;# 
  2968  0E95                     	;# 
  2969  0EA0                     	;# 
  2970  0EA1                     	;# 
  2971  0EA2                     	;# 
  2972  0EA3                     	;# 
  2973  0EA4                     	;# 
  2974  0EA5                     	;# 
  2975  0FE4                     	;# 
  2976  0FE5                     	;# 
  2977  0FE6                     	;# 
  2978  0FE7                     	;# 
  2979  0FE8                     	;# 
  2980  0FE8                     	;# 
  2981  0FE9                     	;# 
  2982  0FEA                     	;# 
  2983  0FEA                     	;# 
  2984  0FEB                     	;# 
  2985  0FED                     	;# 
  2986  0FEE                     	;# 
  2987  0FEE                     	;# 
  2988  0FEF                     	;# 
  2989  0FFF                     	;# 
  2990  0000                     	;# 
  2991  0001                     	;# 
  2992  0002                     	;# 
  2993  0003                     	;# 
  2994  0004                     	;# 
  2995  0005                     	;# 
  2996  0006                     	;# 
  2997  0007                     	;# 
  2998  0008                     	;# 
  2999  0009                     	;# 
  3000  000A                     	;# 
  3001  000B                     	;# 
  3002  000C                     	;# 
  3003  000E                     	;# 
  3004  0011                     	;# 
  3005  0012                     	;# 
  3006  0013                     	;# 
  3007  0015                     	;# 
  3008  0016                     	;# 
  3009  0016                     	;# 
  3010  0017                     	;# 
  3011  0018                     	;# 
  3012  0019                     	;# 
  3013  001A                     	;# 
  3014  001B                     	;# 
  3015  001C                     	;# 
  3016  008C                     	;# 
  3017  008E                     	;# 
  3018  0091                     	;# 
  3019  0092                     	;# 
  3020  0093                     	;# 
  3021  0095                     	;# 
  3022  0096                     	;# 
  3023  0097                     	;# 
  3024  0098                     	;# 
  3025  0099                     	;# 
  3026  009A                     	;# 
  3027  009B                     	;# 
  3028  009B                     	;# 
  3029  009C                     	;# 
  3030  009D                     	;# 
  3031  009E                     	;# 
  3032  009F                     	;# 
  3033  010C                     	;# 
  3034  010E                     	;# 
  3035  0111                     	;# 
  3036  0112                     	;# 
  3037  0113                     	;# 
  3038  0114                     	;# 
  3039  0115                     	;# 
  3040  0116                     	;# 
  3041  0117                     	;# 
  3042  0118                     	;# 
  3043  0119                     	;# 
  3044  018C                     	;# 
  3045  018E                     	;# 
  3046  0191                     	;# 
  3047  0191                     	;# 
  3048  0192                     	;# 
  3049  0193                     	;# 
  3050  0193                     	;# 
  3051  0194                     	;# 
  3052  0195                     	;# 
  3053  0196                     	;# 
  3054  0197                     	;# 
  3055  0199                     	;# 
  3056  019A                     	;# 
  3057  019B                     	;# 
  3058  019B                     	;# 
  3059  019C                     	;# 
  3060  019D                     	;# 
  3061  019E                     	;# 
  3062  019F                     	;# 
  3063  020C                     	;# 
  3064  020E                     	;# 
  3065  028C                     	;# 
  3066  028E                     	;# 
  3067  030C                     	;# 
  3068  030E                     	;# 
  3069  038C                     	;# 
  3070  038E                     	;# 
  3071  0391                     	;# 
  3072  0392                     	;# 
  3073  0393                     	;# 
  3074  0397                     	;# 
  3075  0398                     	;# 
  3076  0399                     	;# 
  3077  0691                     	;# 
  3078  0692                     	;# 
  3079  0693                     	;# 
  3080  0694                     	;# 
  3081  0695                     	;# 
  3082  0D8E                     	;# 
  3083  0D8F                     	;# 
  3084  0D90                     	;# 
  3085  0D91                     	;# 
  3086  0D91                     	;# 
  3087  0D92                     	;# 
  3088  0D93                     	;# 
  3089  0D93                     	;# 
  3090  0D94                     	;# 
  3091  0D95                     	;# 
  3092  0D95                     	;# 
  3093  0D96                     	;# 
  3094  0D97                     	;# 
  3095  0D97                     	;# 
  3096  0D98                     	;# 
  3097  0D99                     	;# 
  3098  0D99                     	;# 
  3099  0D9A                     	;# 
  3100  0D9B                     	;# 
  3101  0D9C                     	;# 
  3102  0D9C                     	;# 
  3103  0D9D                     	;# 
  3104  0D9D                     	;# 
  3105  0D9E                     	;# 
  3106  0D9F                     	;# 
  3107  0DA0                     	;# 
  3108  0DA1                     	;# 
  3109  0DA1                     	;# 
  3110  0DA2                     	;# 
  3111  0DA3                     	;# 
  3112  0DA3                     	;# 
  3113  0DA4                     	;# 
  3114  0DA5                     	;# 
  3115  0DA5                     	;# 
  3116  0DA6                     	;# 
  3117  0DA7                     	;# 
  3118  0DA7                     	;# 
  3119  0DA8                     	;# 
  3120  0DA9                     	;# 
  3121  0DA9                     	;# 
  3122  0DAA                     	;# 
  3123  0DAB                     	;# 
  3124  0DAC                     	;# 
  3125  0DAC                     	;# 
  3126  0DAD                     	;# 
  3127  0DAD                     	;# 
  3128  0DAE                     	;# 
  3129  0DAF                     	;# 
  3130  0DB0                     	;# 
  3131  0DB1                     	;# 
  3132  0DB1                     	;# 
  3133  0DB2                     	;# 
  3134  0DB3                     	;# 
  3135  0DB3                     	;# 
  3136  0DB4                     	;# 
  3137  0DB5                     	;# 
  3138  0DB5                     	;# 
  3139  0DB6                     	;# 
  3140  0DB7                     	;# 
  3141  0DB7                     	;# 
  3142  0DB8                     	;# 
  3143  0DB9                     	;# 
  3144  0DB9                     	;# 
  3145  0DBA                     	;# 
  3146  0DBB                     	;# 
  3147  0DBC                     	;# 
  3148  0DBC                     	;# 
  3149  0DBD                     	;# 
  3150  0DBD                     	;# 
  3151  0DBE                     	;# 
  3152  0DBF                     	;# 
  3153  0DC0                     	;# 
  3154  0DC1                     	;# 
  3155  0DC1                     	;# 
  3156  0DC2                     	;# 
  3157  0DC3                     	;# 
  3158  0DC3                     	;# 
  3159  0DC4                     	;# 
  3160  0DC5                     	;# 
  3161  0DC5                     	;# 
  3162  0DC6                     	;# 
  3163  0DC7                     	;# 
  3164  0DC7                     	;# 
  3165  0DC8                     	;# 
  3166  0DC9                     	;# 
  3167  0DC9                     	;# 
  3168  0DCA                     	;# 
  3169  0DCB                     	;# 
  3170  0DCC                     	;# 
  3171  0DCC                     	;# 
  3172  0DCD                     	;# 
  3173  0DCD                     	;# 
  3174  0DCE                     	;# 
  3175  0DCF                     	;# 
  3176  0DD0                     	;# 
  3177  0E0F                     	;# 
  3178  0E10                     	;# 
  3179  0E11                     	;# 
  3180  0E12                     	;# 
  3181  0E13                     	;# 
  3182  0E14                     	;# 
  3183  0E15                     	;# 
  3184  0E16                     	;# 
  3185  0E17                     	;# 
  3186  0E90                     	;# 
  3187  0E91                     	;# 
  3188  0E92                     	;# 
  3189  0E94                     	;# 
  3190  0E95                     	;# 
  3191  0EA0                     	;# 
  3192  0EA1                     	;# 
  3193  0EA2                     	;# 
  3194  0EA3                     	;# 
  3195  0EA4                     	;# 
  3196  0EA5                     	;# 
  3197  0FE4                     	;# 
  3198  0FE5                     	;# 
  3199  0FE6                     	;# 
  3200  0FE7                     	;# 
  3201  0FE8                     	;# 
  3202  0FE8                     	;# 
  3203  0FE9                     	;# 
  3204  0FEA                     	;# 
  3205  0FEA                     	;# 
  3206  0FEB                     	;# 
  3207  0FED                     	;# 
  3208  0FEE                     	;# 
  3209  0FEE                     	;# 
  3210  0FEF                     	;# 
  3211  0FFF                     	;# 
  3212  0000                     	;# 
  3213  0001                     	;# 
  3214  0002                     	;# 
  3215  0003                     	;# 
  3216  0004                     	;# 
  3217  0005                     	;# 
  3218  0006                     	;# 
  3219  0007                     	;# 
  3220  0008                     	;# 
  3221  0009                     	;# 
  3222  000A                     	;# 
  3223  000B                     	;# 
  3224  000C                     	;# 
  3225  000E                     	;# 
  3226  0011                     	;# 
  3227  0012                     	;# 
  3228  0013                     	;# 
  3229  0015                     	;# 
  3230  0016                     	;# 
  3231  0016                     	;# 
  3232  0017                     	;# 
  3233  0018                     	;# 
  3234  0019                     	;# 
  3235  001A                     	;# 
  3236  001B                     	;# 
  3237  001C                     	;# 
  3238  008C                     	;# 
  3239  008E                     	;# 
  3240  0091                     	;# 
  3241  0092                     	;# 
  3242  0093                     	;# 
  3243  0095                     	;# 
  3244  0096                     	;# 
  3245  0097                     	;# 
  3246  0098                     	;# 
  3247  0099                     	;# 
  3248  009A                     	;# 
  3249  009B                     	;# 
  3250  009B                     	;# 
  3251  009C                     	;# 
  3252  009D                     	;# 
  3253  009E                     	;# 
  3254  009F                     	;# 
  3255  010C                     	;# 
  3256  010E                     	;# 
  3257  0111                     	;# 
  3258  0112                     	;# 
  3259  0113                     	;# 
  3260  0114                     	;# 
  3261  0115                     	;# 
  3262  0116                     	;# 
  3263  0117                     	;# 
  3264  0118                     	;# 
  3265  0119                     	;# 
  3266  018C                     	;# 
  3267  018E                     	;# 
  3268  0191                     	;# 
  3269  0191                     	;# 
  3270  0192                     	;# 
  3271  0193                     	;# 
  3272  0193                     	;# 
  3273  0194                     	;# 
  3274  0195                     	;# 
  3275  0196                     	;# 
  3276  0197                     	;# 
  3277  0199                     	;# 
  3278  019A                     	;# 
  3279  019B                     	;# 
  3280  019B                     	;# 
  3281  019C                     	;# 
  3282  019D                     	;# 
  3283  019E                     	;# 
  3284  019F                     	;# 
  3285  020C                     	;# 
  3286  020E                     	;# 
  3287  028C                     	;# 
  3288  028E                     	;# 
  3289  030C                     	;# 
  3290  030E                     	;# 
  3291  038C                     	;# 
  3292  038E                     	;# 
  3293  0391                     	;# 
  3294  0392                     	;# 
  3295  0393                     	;# 
  3296  0397                     	;# 
  3297  0398                     	;# 
  3298  0399                     	;# 
  3299  0691                     	;# 
  3300  0692                     	;# 
  3301  0693                     	;# 
  3302  0694                     	;# 
  3303  0695                     	;# 
  3304  0D8E                     	;# 
  3305  0D8F                     	;# 
  3306  0D90                     	;# 
  3307  0D91                     	;# 
  3308  0D91                     	;# 
  3309  0D92                     	;# 
  3310  0D93                     	;# 
  3311  0D93                     	;# 
  3312  0D94                     	;# 
  3313  0D95                     	;# 
  3314  0D95                     	;# 
  3315  0D96                     	;# 
  3316  0D97                     	;# 
  3317  0D97                     	;# 
  3318  0D98                     	;# 
  3319  0D99                     	;# 
  3320  0D99                     	;# 
  3321  0D9A                     	;# 
  3322  0D9B                     	;# 
  3323  0D9C                     	;# 
  3324  0D9C                     	;# 
  3325  0D9D                     	;# 
  3326  0D9D                     	;# 
  3327  0D9E                     	;# 
  3328  0D9F                     	;# 
  3329  0DA0                     	;# 
  3330  0DA1                     	;# 
  3331  0DA1                     	;# 
  3332  0DA2                     	;# 
  3333  0DA3                     	;# 
  3334  0DA3                     	;# 
  3335  0DA4                     	;# 
  3336  0DA5                     	;# 
  3337  0DA5                     	;# 
  3338  0DA6                     	;# 
  3339  0DA7                     	;# 
  3340  0DA7                     	;# 
  3341  0DA8                     	;# 
  3342  0DA9                     	;# 
  3343  0DA9                     	;# 
  3344  0DAA                     	;# 
  3345  0DAB                     	;# 
  3346  0DAC                     	;# 
  3347  0DAC                     	;# 
  3348  0DAD                     	;# 
  3349  0DAD                     	;# 
  3350  0DAE                     	;# 
  3351  0DAF                     	;# 
  3352  0DB0                     	;# 
  3353  0DB1                     	;# 
  3354  0DB1                     	;# 
  3355  0DB2                     	;# 
  3356  0DB3                     	;# 
  3357  0DB3                     	;# 
  3358  0DB4                     	;# 
  3359  0DB5                     	;# 
  3360  0DB5                     	;# 
  3361  0DB6                     	;# 
  3362  0DB7                     	;# 
  3363  0DB7                     	;# 
  3364  0DB8                     	;# 
  3365  0DB9                     	;# 
  3366  0DB9                     	;# 
  3367  0DBA                     	;# 
  3368  0DBB                     	;# 
  3369  0DBC                     	;# 
  3370  0DBC                     	;# 
  3371  0DBD                     	;# 
  3372  0DBD                     	;# 
  3373  0DBE                     	;# 
  3374  0DBF                     	;# 
  3375  0DC0                     	;# 
  3376  0DC1                     	;# 
  3377  0DC1                     	;# 
  3378  0DC2                     	;# 
  3379  0DC3                     	;# 
  3380  0DC3                     	;# 
  3381  0DC4                     	;# 
  3382  0DC5                     	;# 
  3383  0DC5                     	;# 
  3384  0DC6                     	;# 
  3385  0DC7                     	;# 
  3386  0DC7                     	;# 
  3387  0DC8                     	;# 
  3388  0DC9                     	;# 
  3389  0DC9                     	;# 
  3390  0DCA                     	;# 
  3391  0DCB                     	;# 
  3392  0DCC                     	;# 
  3393  0DCC                     	;# 
  3394  0DCD                     	;# 
  3395  0DCD                     	;# 
  3396  0DCE                     	;# 
  3397  0DCF                     	;# 
  3398  0DD0                     	;# 
  3399  0E0F                     	;# 
  3400  0E10                     	;# 
  3401  0E11                     	;# 
  3402  0E12                     	;# 
  3403  0E13                     	;# 
  3404  0E14                     	;# 
  3405  0E15                     	;# 
  3406  0E16                     	;# 
  3407  0E17                     	;# 
  3408  0E90                     	;# 
  3409  0E91                     	;# 
  3410  0E92                     	;# 
  3411  0E94                     	;# 
  3412  0E95                     	;# 
  3413  0EA0                     	;# 
  3414  0EA1                     	;# 
  3415  0EA2                     	;# 
  3416  0EA3                     	;# 
  3417  0EA4                     	;# 
  3418  0EA5                     	;# 
  3419  0FE4                     	;# 
  3420  0FE5                     	;# 
  3421  0FE6                     	;# 
  3422  0FE7                     	;# 
  3423  0FE8                     	;# 
  3424  0FE8                     	;# 
  3425  0FE9                     	;# 
  3426  0FEA                     	;# 
  3427  0FEA                     	;# 
  3428  0FEB                     	;# 
  3429  0FED                     	;# 
  3430  0FEE                     	;# 
  3431  0FEE                     	;# 
  3432  0FEF                     	;# 
  3433  0FFF                     	;# 
  3434  0000                     	;# 
  3435  0001                     	;# 
  3436  0002                     	;# 
  3437  0003                     	;# 
  3438  0004                     	;# 
  3439  0005                     	;# 
  3440  0006                     	;# 
  3441  0007                     	;# 
  3442  0008                     	;# 
  3443  0009                     	;# 
  3444  000A                     	;# 
  3445  000B                     	;# 
  3446  000C                     	;# 
  3447  000E                     	;# 
  3448  0011                     	;# 
  3449  0012                     	;# 
  3450  0013                     	;# 
  3451  0015                     	;# 
  3452  0016                     	;# 
  3453  0016                     	;# 
  3454  0017                     	;# 
  3455  0018                     	;# 
  3456  0019                     	;# 
  3457  001A                     	;# 
  3458  001B                     	;# 
  3459  001C                     	;# 
  3460  008C                     	;# 
  3461  008E                     	;# 
  3462  0091                     	;# 
  3463  0092                     	;# 
  3464  0093                     	;# 
  3465  0095                     	;# 
  3466  0096                     	;# 
  3467  0097                     	;# 
  3468  0098                     	;# 
  3469  0099                     	;# 
  3470  009A                     	;# 
  3471  009B                     	;# 
  3472  009B                     	;# 
  3473  009C                     	;# 
  3474  009D                     	;# 
  3475  009E                     	;# 
  3476  009F                     	;# 
  3477  010C                     	;# 
  3478  010E                     	;# 
  3479  0111                     	;# 
  3480  0112                     	;# 
  3481  0113                     	;# 
  3482  0114                     	;# 
  3483  0115                     	;# 
  3484  0116                     	;# 
  3485  0117                     	;# 
  3486  0118                     	;# 
  3487  0119                     	;# 
  3488  018C                     	;# 
  3489  018E                     	;# 
  3490  0191                     	;# 
  3491  0191                     	;# 
  3492  0192                     	;# 
  3493  0193                     	;# 
  3494  0193                     	;# 
  3495  0194                     	;# 
  3496  0195                     	;# 
  3497  0196                     	;# 
  3498  0197                     	;# 
  3499  0199                     	;# 
  3500  019A                     	;# 
  3501  019B                     	;# 
  3502  019B                     	;# 
  3503  019C                     	;# 
  3504  019D                     	;# 
  3505  019E                     	;# 
  3506  019F                     	;# 
  3507  020C                     	;# 
  3508  020E                     	;# 
  3509  028C                     	;# 
  3510  028E                     	;# 
  3511  030C                     	;# 
  3512  030E                     	;# 
  3513  038C                     	;# 
  3514  038E                     	;# 
  3515  0391                     	;# 
  3516  0392                     	;# 
  3517  0393                     	;# 
  3518  0397                     	;# 
  3519  0398                     	;# 
  3520  0399                     	;# 
  3521  0691                     	;# 
  3522  0692                     	;# 
  3523  0693                     	;# 
  3524  0694                     	;# 
  3525  0695                     	;# 
  3526  0D8E                     	;# 
  3527  0D8F                     	;# 
  3528  0D90                     	;# 
  3529  0D91                     	;# 
  3530  0D91                     	;# 
  3531  0D92                     	;# 
  3532  0D93                     	;# 
  3533  0D93                     	;# 
  3534  0D94                     	;# 
  3535  0D95                     	;# 
  3536  0D95                     	;# 
  3537  0D96                     	;# 
  3538  0D97                     	;# 
  3539  0D97                     	;# 
  3540  0D98                     	;# 
  3541  0D99                     	;# 
  3542  0D99                     	;# 
  3543  0D9A                     	;# 
  3544  0D9B                     	;# 
  3545  0D9C                     	;# 
  3546  0D9C                     	;# 
  3547  0D9D                     	;# 
  3548  0D9D                     	;# 
  3549  0D9E                     	;# 
  3550  0D9F                     	;# 
  3551  0DA0                     	;# 
  3552  0DA1                     	;# 
  3553  0DA1                     	;# 
  3554  0DA2                     	;# 
  3555  0DA3                     	;# 
  3556  0DA3                     	;# 
  3557  0DA4                     	;# 
  3558  0DA5                     	;# 
  3559  0DA5                     	;# 
  3560  0DA6                     	;# 
  3561  0DA7                     	;# 
  3562  0DA7                     	;# 
  3563  0DA8                     	;# 
  3564  0DA9                     	;# 
  3565  0DA9                     	;# 
  3566  0DAA                     	;# 
  3567  0DAB                     	;# 
  3568  0DAC                     	;# 
  3569  0DAC                     	;# 
  3570  0DAD                     	;# 
  3571  0DAD                     	;# 
  3572  0DAE                     	;# 
  3573  0DAF                     	;# 
  3574  0DB0                     	;# 
  3575  0DB1                     	;# 
  3576  0DB1                     	;# 
  3577  0DB2                     	;# 
  3578  0DB3                     	;# 
  3579  0DB3                     	;# 
  3580  0DB4                     	;# 
  3581  0DB5                     	;# 
  3582  0DB5                     	;# 
  3583  0DB6                     	;# 
  3584  0DB7                     	;# 
  3585  0DB7                     	;# 
  3586  0DB8                     	;# 
  3587  0DB9                     	;# 
  3588  0DB9                     	;# 
  3589  0DBA                     	;# 
  3590  0DBB                     	;# 
  3591  0DBC                     	;# 
  3592  0DBC                     	;# 
  3593  0DBD                     	;# 
  3594  0DBD                     	;# 
  3595  0DBE                     	;# 
  3596  0DBF                     	;# 
  3597  0DC0                     	;# 
  3598  0DC1                     	;# 
  3599  0DC1                     	;# 
  3600  0DC2                     	;# 
  3601  0DC3                     	;# 
  3602  0DC3                     	;# 
  3603  0DC4                     	;# 
  3604  0DC5                     	;# 
  3605  0DC5                     	;# 
  3606  0DC6                     	;# 
  3607  0DC7                     	;# 
  3608  0DC7                     	;# 
  3609  0DC8                     	;# 
  3610  0DC9                     	;# 
  3611  0DC9                     	;# 
  3612  0DCA                     	;# 
  3613  0DCB                     	;# 
  3614  0DCC                     	;# 
  3615  0DCC                     	;# 
  3616  0DCD                     	;# 
  3617  0DCD                     	;# 
  3618  0DCE                     	;# 
  3619  0DCF                     	;# 
  3620  0DD0                     	;# 
  3621  0E0F                     	;# 
  3622  0E10                     	;# 
  3623  0E11                     	;# 
  3624  0E12                     	;# 
  3625  0E13                     	;# 
  3626  0E14                     	;# 
  3627  0E15                     	;# 
  3628  0E16                     	;# 
  3629  0E17                     	;# 
  3630  0E90                     	;# 
  3631  0E91                     	;# 
  3632  0E92                     	;# 
  3633  0E94                     	;# 
  3634  0E95                     	;# 
  3635  0EA0                     	;# 
  3636  0EA1                     	;# 
  3637  0EA2                     	;# 
  3638  0EA3                     	;# 
  3639  0EA4                     	;# 
  3640  0EA5                     	;# 
  3641  0FE4                     	;# 
  3642  0FE5                     	;# 
  3643  0FE6                     	;# 
  3644  0FE7                     	;# 
  3645  0FE8                     	;# 
  3646  0FE8                     	;# 
  3647  0FE9                     	;# 
  3648  0FEA                     	;# 
  3649  0FEA                     	;# 
  3650  0FEB                     	;# 
  3651  0FED                     	;# 
  3652  0FEE                     	;# 
  3653  0FEE                     	;# 
  3654  0FEF                     	;# 
  3655  0FFF                     	;# 
  3656  0000                     	;# 
  3657  0001                     	;# 
  3658  0002                     	;# 
  3659  0003                     	;# 
  3660  0004                     	;# 
  3661  0005                     	;# 
  3662  0006                     	;# 
  3663  0007                     	;# 
  3664  0008                     	;# 
  3665  0009                     	;# 
  3666  000A                     	;# 
  3667  000B                     	;# 
  3668  000C                     	;# 
  3669  000E                     	;# 
  3670  0011                     	;# 
  3671  0012                     	;# 
  3672  0013                     	;# 
  3673  0015                     	;# 
  3674  0016                     	;# 
  3675  0016                     	;# 
  3676  0017                     	;# 
  3677  0018                     	;# 
  3678  0019                     	;# 
  3679  001A                     	;# 
  3680  001B                     	;# 
  3681  001C                     	;# 
  3682  008C                     	;# 
  3683  008E                     	;# 
  3684  0091                     	;# 
  3685  0092                     	;# 
  3686  0093                     	;# 
  3687  0095                     	;# 
  3688  0096                     	;# 
  3689  0097                     	;# 
  3690  0098                     	;# 
  3691  0099                     	;# 
  3692  009A                     	;# 
  3693  009B                     	;# 
  3694  009B                     	;# 
  3695  009C                     	;# 
  3696  009D                     	;# 
  3697  009E                     	;# 
  3698  009F                     	;# 
  3699  010C                     	;# 
  3700  010E                     	;# 
  3701  0111                     	;# 
  3702  0112                     	;# 
  3703  0113                     	;# 
  3704  0114                     	;# 
  3705  0115                     	;# 
  3706  0116                     	;# 
  3707  0117                     	;# 
  3708  0118                     	;# 
  3709  0119                     	;# 
  3710  018C                     	;# 
  3711  018E                     	;# 
  3712  0191                     	;# 
  3713  0191                     	;# 
  3714  0192                     	;# 
  3715  0193                     	;# 
  3716  0193                     	;# 
  3717  0194                     	;# 
  3718  0195                     	;# 
  3719  0196                     	;# 
  3720  0197                     	;# 
  3721  0199                     	;# 
  3722  019A                     	;# 
  3723  019B                     	;# 
  3724  019B                     	;# 
  3725  019C                     	;# 
  3726  019D                     	;# 
  3727  019E                     	;# 
  3728  019F                     	;# 
  3729  020C                     	;# 
  3730  020E                     	;# 
  3731  028C                     	;# 
  3732  028E                     	;# 
  3733  030C                     	;# 
  3734  030E                     	;# 
  3735  038C                     	;# 
  3736  038E                     	;# 
  3737  0391                     	;# 
  3738  0392                     	;# 
  3739  0393                     	;# 
  3740  0397                     	;# 
  3741  0398                     	;# 
  3742  0399                     	;# 
  3743  0691                     	;# 
  3744  0692                     	;# 
  3745  0693                     	;# 
  3746  0694                     	;# 
  3747  0695                     	;# 
  3748  0D8E                     	;# 
  3749  0D8F                     	;# 
  3750  0D90                     	;# 
  3751  0D91                     	;# 
  3752  0D91                     	;# 
  3753  0D92                     	;# 
  3754  0D93                     	;# 
  3755  0D93                     	;# 
  3756  0D94                     	;# 
  3757  0D95                     	;# 
  3758  0D95                     	;# 
  3759  0D96                     	;# 
  3760  0D97                     	;# 
  3761  0D97                     	;# 
  3762  0D98                     	;# 
  3763  0D99                     	;# 
  3764  0D99                     	;# 
  3765  0D9A                     	;# 
  3766  0D9B                     	;# 
  3767  0D9C                     	;# 
  3768  0D9C                     	;# 
  3769  0D9D                     	;# 
  3770  0D9D                     	;# 
  3771  0D9E                     	;# 
  3772  0D9F                     	;# 
  3773  0DA0                     	;# 
  3774  0DA1                     	;# 
  3775  0DA1                     	;# 
  3776  0DA2                     	;# 
  3777  0DA3                     	;# 
  3778  0DA3                     	;# 
  3779  0DA4                     	;# 
  3780  0DA5                     	;# 
  3781  0DA5                     	;# 
  3782  0DA6                     	;# 
  3783  0DA7                     	;# 
  3784  0DA7                     	;# 
  3785  0DA8                     	;# 
  3786  0DA9                     	;# 
  3787  0DA9                     	;# 
  3788  0DAA                     	;# 
  3789  0DAB                     	;# 
  3790  0DAC                     	;# 
  3791  0DAC                     	;# 
  3792  0DAD                     	;# 
  3793  0DAD                     	;# 
  3794  0DAE                     	;# 
  3795  0DAF                     	;# 
  3796  0DB0                     	;# 
  3797  0DB1                     	;# 
  3798  0DB1                     	;# 
  3799  0DB2                     	;# 
  3800  0DB3                     	;# 
  3801  0DB3                     	;# 
  3802  0DB4                     	;# 
  3803  0DB5                     	;# 
  3804  0DB5                     	;# 
  3805  0DB6                     	;# 
  3806  0DB7                     	;# 
  3807  0DB7                     	;# 
  3808  0DB8                     	;# 
  3809  0DB9                     	;# 
  3810  0DB9                     	;# 
  3811  0DBA                     	;# 
  3812  0DBB                     	;# 
  3813  0DBC                     	;# 
  3814  0DBC                     	;# 
  3815  0DBD                     	;# 
  3816  0DBD                     	;# 
  3817  0DBE                     	;# 
  3818  0DBF                     	;# 
  3819  0DC0                     	;# 
  3820  0DC1                     	;# 
  3821  0DC1                     	;# 
  3822  0DC2                     	;# 
  3823  0DC3                     	;# 
  3824  0DC3                     	;# 
  3825  0DC4                     	;# 
  3826  0DC5                     	;# 
  3827  0DC5                     	;# 
  3828  0DC6                     	;# 
  3829  0DC7                     	;# 
  3830  0DC7                     	;# 
  3831  0DC8                     	;# 
  3832  0DC9                     	;# 
  3833  0DC9                     	;# 
  3834  0DCA                     	;# 
  3835  0DCB                     	;# 
  3836  0DCC                     	;# 
  3837  0DCC                     	;# 
  3838  0DCD                     	;# 
  3839  0DCD                     	;# 
  3840  0DCE                     	;# 
  3841  0DCF                     	;# 
  3842  0DD0                     	;# 
  3843  0E0F                     	;# 
  3844  0E10                     	;# 
  3845  0E11                     	;# 
  3846  0E12                     	;# 
  3847  0E13                     	;# 
  3848  0E14                     	;# 
  3849  0E15                     	;# 
  3850  0E16                     	;# 
  3851  0E17                     	;# 
  3852  0E90                     	;# 
  3853  0E91                     	;# 
  3854  0E92                     	;# 
  3855  0E94                     	;# 
  3856  0E95                     	;# 
  3857  0EA0                     	;# 
  3858  0EA1                     	;# 
  3859  0EA2                     	;# 
  3860  0EA3                     	;# 
  3861  0EA4                     	;# 
  3862  0EA5                     	;# 
  3863  0FE4                     	;# 
  3864  0FE5                     	;# 
  3865  0FE6                     	;# 
  3866  0FE7                     	;# 
  3867  0FE8                     	;# 
  3868  0FE8                     	;# 
  3869  0FE9                     	;# 
  3870  0FEA                     	;# 
  3871  0FEA                     	;# 
  3872  0FEB                     	;# 
  3873  0FED                     	;# 
  3874  0FEE                     	;# 
  3875  0FEE                     	;# 
  3876  0FEF                     	;# 
  3877  0FFF                     	;_sysData
  3878                           
  3879 ;; Function _TMR2_DefaultInterruptHandler is unused but had its address taken
  3880  0000                     
  3881                           	psect	idataBANK0
  3882  1C8D                     __pidataBANK0:	
  3883                           
  3884                           ;initializer for _resRs
  3885  1C8D  3410               	retlw	16
  3886  1C8E  3427               	retlw	39
  3887                           
  3888                           ;initializer for _resRc
  3889  1C8F  3410               	retlw	16
  3890  1C90  3427               	retlw	39
  3891                           
  3892                           	psect	idataBANK1
  3893  1C97                     __pidataBANK1:	
  3894                           
  3895                           ;initializer for _pidU
  3896  1C97  3414               	retlw	20
  3897  1C98  3400               	retlw	0
  3898                           
  3899                           ;initializer for _pidpwm2_U
  3900  1C99  3414               	retlw	20
  3901  1C9A  3400               	retlw	0
  3902                           
  3903                           ;initializer for _pwm1DutyForIdrv
  3904  1C9B  3405               	retlw	5
  3905  1C9C  3400               	retlw	0
  3906                           
  3907                           ;initializer for _pwm2DutyForVout
  3908  1C9D  3405               	retlw	5
  3909  1C9E  3400               	retlw	0
  3910                           
  3911                           	psect	stringtext1
  3912  181E                     __pstringtext1:	
  3913  181E                     _HexTable:	
  3914  181E  3430               	retlw	48
  3915  181F  3431               	retlw	49
  3916  1820  3432               	retlw	50
  3917  1821  3433               	retlw	51
  3918  1822  3434               	retlw	52
  3919  1823  3435               	retlw	53
  3920  1824  3436               	retlw	54
  3921  1825  3437               	retlw	55
  3922  1826  3438               	retlw	56
  3923  1827  3439               	retlw	57
  3924  1828  3441               	retlw	65
  3925  1829  3442               	retlw	66
  3926  182A  3443               	retlw	67
  3927  182B  3444               	retlw	68
  3928  182C  3445               	retlw	69
  3929  182D  3446               	retlw	70
  3930  182E  3400               	retlw	0
  3931  182F                     __end_of_HexTable:	
  3932  0013                     _PIR3bits	set	19
  3933  001C                     _T2CONbits	set	28
  3934  0011                     _PIR1bits	set	17
  3935  001A                     _TMR2	set	26
  3936  001B                     _PR2	set	27
  3937  001C                     _T2CON	set	28
  3938  000B                     _INTCONbits	set	11
  3939  005F                     _GIE	set	95
  3940  0095                     _OPTION_REGbits	set	149
  3941  008E                     _TRISC	set	142
  3942  008C                     _TRISA	set	140
  3943  009D                     _ADCON0bits	set	157
  3944  009C                     _ADRESH	set	156
  3945  009B                     _ADRESL	set	155
  3946  009F                     _ADCON2	set	159
  3947  009E                     _ADCON1	set	158
  3948  009D                     _ADCON0	set	157
  3949  0097                     _WDTCON	set	151
  3950  0091                     _PIE1bits	set	145
  3951  010E                     _LATC	set	270
  3952  010C                     _LATA	set	268
  3953  0117                     _FVRCONbits	set	279
  3954  0117                     _FVRCON	set	279
  3955  019E                     _TXSTAbits	set	414
  3956  018C                     _ANSELA	set	396
  3957  018E                     _ANSELC	set	398
  3958  019C                     _SPBRGH	set	412
  3959  019B                     _SPBRGL	set	411
  3960  019E                     _TXSTA	set	414
  3961  019D                     _RCSTA	set	413
  3962  019F                     _BAUDCON	set	415
  3963  019A                     _TXREG	set	410
  3964  0199                     _RCREG	set	409
  3965  019D                     _RCSTAbits	set	413
  3966  0196                     _PMCON2	set	406
  3967  0193                     _PMDATL	set	403
  3968  0194                     _PMDATH	set	404
  3969  0195                     _PMCON1bits	set	405
  3970  0192                     _PMADRH	set	402
  3971  0191                     _PMADRL	set	401
  3972  020E                     _WPUC	set	526
  3973  020C                     _WPUA	set	524
  3974  028E                     _ODCONC	set	654
  3975  028C                     _ODCONA	set	652
  3976  0D9D                     _PWM1INTFbits	set	3485
  3977  0D9F                     _PWM1LDCONbits	set	3487
  3978  0D9B                     _PWM1CONbits	set	3483
  3979  0D9B                     _PWM1CON	set	3483
  3980  0D99                     _PWM1TMRL	set	3481
  3981  0D9A                     _PWM1TMRH	set	3482
  3982  0D97                     _PWM1OFL	set	3479
  3983  0D98                     _PWM1OFH	set	3480
  3984  0D95                     _PWM1PRL	set	3477
  3985  0D96                     _PWM1PRH	set	3478
  3986  0D93                     _PWM1DCL	set	3475
  3987  0D94                     _PWM1DCH	set	3476
  3988  0D91                     _PWM1PHL	set	3473
  3989  0D92                     _PWM1PHH	set	3474
  3990  0DA0                     _PWM1OFCON	set	3488
  3991  0D9F                     _PWM1LDCON	set	3487
  3992  0D9E                     _PWM1CLKCON	set	3486
  3993  0D9D                     _PWM1INTF	set	3485
  3994  0D9C                     _PWM1INTE	set	3484
  3995  0DAD                     _PWM2INTFbits	set	3501
  3996  0DAF                     _PWM2LDCONbits	set	3503
  3997  0DAB                     _PWM2CONbits	set	3499
  3998  0DAB                     _PWM2CON	set	3499
  3999  0DA9                     _PWM2TMRL	set	3497
  4000  0DAA                     _PWM2TMRH	set	3498
  4001  0DA7                     _PWM2OFL	set	3495
  4002  0DA8                     _PWM2OFH	set	3496
  4003  0DA5                     _PWM2PRL	set	3493
  4004  0DA6                     _PWM2PRH	set	3494
  4005  0DA3                     _PWM2DCL	set	3491
  4006  0DA4                     _PWM2DCH	set	3492
  4007  0DA1                     _PWM2PHL	set	3489
  4008  0DA2                     _PWM2PHH	set	3490
  4009  0DB0                     _PWM2OFCON	set	3504
  4010  0DAF                     _PWM2LDCON	set	3503
  4011  0DAE                     _PWM2CLKCON	set	3502
  4012  0DAD                     _PWM2INTF	set	3501
  4013  0DAC                     _PWM2INTE	set	3500
  4014  0E15                     _RXPPSbits	set	3605
  4015  0E0F                     _PPSLOCKbits	set	3599
  4016  0E0F                     _PPSLOCK	set	3599
  4017  0EA5                     _RC5PPSbits	set	3749
  4018  0E95                     _RA5PPSbits	set	3733
  4019  0E94                     _RA4PPSbits	set	3732
  4020                           
  4021                           	psect	cinit
  4022  088D                     start_initialization:	
  4023                           ; #config settings
  4024                           
  4025  088D                     __initialization:		;BIGRAM
  4026                           
  4027                           ; Initialize objects allocated to BANK0
  4028  088D  308D               	movlw	low __pidataBANK0
  4029  088E  0084               	movwf	4
  4030  088F  309C               	movlw	(high __pidataBANK0)| (0+128)
  4031  0890  0085               	movwf	5
  4032  0891  306C               	movlw	low __pdataBANK0
  4033  0892  0086               	movwf	6
  4034  0893  3000               	movlw	high __pdataBANK0
  4035  0894  0087               	movwf	7
  4036  0895  3000               	movlw	0
  4037  0896  00FF               	movwf	btemp+1
  4038  0897  3004               	movlw	4
  4039  0898  3190  2002  3188   	fcall	init_ram
  4040                           
  4041                           ; Initialize objects allocated to BANK1
  4042  089B  3097               	movlw	low __pidataBANK1
  4043  089C  0084               	movwf	4
  4044  089D  309C               	movlw	(high __pidataBANK1)| (0+128)
  4045  089E  0085               	movwf	5
  4046  089F  30D0               	movlw	low __pdataBANK1
  4047  08A0  0086               	movwf	6
  4048  08A1  3000               	movlw	high __pdataBANK1
  4049  08A2  0087               	movwf	7
  4050  08A3  3000               	movlw	0
  4051  08A4  00FF               	movwf	btemp+1
  4052  08A5  3008               	movlw	8
  4053  08A6  3190  2002  3188   	fcall	init_ram
  4054                           
  4055                           ; Clear objects allocated to BIGRAM
  4056  08A9  305C               	movlw	low (0+9052)
  4057  08AA  0084               	movwf	4
  4058  08AB  3023               	movlw	high (0+9052)
  4059  08AC  0085               	movwf	5
  4060  08AD  3084               	movlw	132
  4061  08AE  00FE               	movwf	btemp
  4062  08AF  3000               	movlw	0
  4063  08B0  00FF               	movwf	btemp+1
  4064  08B1  319C  24A8  3188   	fcall	clear_ram0
  4065                           
  4066                           ; Clear objects allocated to COMMON
  4067  08B4  01FC               	clrf	__pbssCOMMON& (0+127)
  4068                           
  4069                           ; Clear objects allocated to BANK0
  4070  08B5  3047               	movlw	low __pbssBANK0
  4071  08B6  0084               	movwf	4
  4072  08B7  3000               	movlw	high __pbssBANK0
  4073  08B8  0085               	movwf	5
  4074  08B9  3025               	movlw	37
  4075  08BA  00FE               	movwf	btemp
  4076  08BB  3000               	movlw	0
  4077  08BC  00FF               	movwf	btemp+1
  4078  08BD  319C  24A8  3188   	fcall	clear_ram0
  4079                           
  4080                           ; Clear objects allocated to BANK1
  4081  08C0  30A0               	movlw	low __pbssBANK1
  4082  08C1  0084               	movwf	4
  4083  08C2  3000               	movlw	high __pbssBANK1
  4084  08C3  0085               	movwf	5
  4085  08C4  3030               	movlw	48
  4086  08C5  00FE               	movwf	btemp
  4087  08C6  3000               	movlw	0
  4088  08C7  00FF               	movwf	btemp+1
  4089  08C8  319C  24A8  3188   	fcall	clear_ram0
  4090                           
  4091                           ; Clear objects allocated to BANK2
  4092  08CB  3020               	movlw	low __pbssBANK2
  4093  08CC  0084               	movwf	4
  4094  08CD  3001               	movlw	high __pbssBANK2
  4095  08CE  0085               	movwf	5
  4096  08CF  3040               	movlw	64
  4097  08D0  00FE               	movwf	btemp
  4098  08D1  3000               	movlw	0
  4099  08D2  00FF               	movwf	btemp+1
  4100  08D3  319C  24A8  3188   	fcall	clear_ram0
  4101                           
  4102                           ; Clear objects allocated to BANK3
  4103  08D6  30A0               	movlw	low __pbssBANK3
  4104  08D7  0084               	movwf	4
  4105  08D8  3001               	movlw	high __pbssBANK3
  4106  08D9  0085               	movwf	5
  4107  08DA  3040               	movlw	64
  4108  08DB  00FE               	movwf	btemp
  4109  08DC  3000               	movlw	0
  4110  08DD  00FF               	movwf	btemp+1
  4111  08DE  319C  24A8         	fcall	clear_ram0
  4112  08E0                     end_of_initialization:	
  4113                           ;End of C runtime variable initialization code
  4114                           
  4115  08E0                     __end_of__initialization:	
  4116  08E0  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4117  08E1  0020               	movlb	0
  4118  08E2  318D  2DA2         	ljmp	_main	;jump to C main() function
  4119                           
  4120                           	psect	bssCOMMON
  4121  007C                     __pbssCOMMON:	
  4122  007C                     _eusartRxIdleTime_ms:	
  4123  007C                     	ds	1
  4124                           
  4125                           	psect	bssBANK0
  4126  0047                     __pbssBANK0:	
  4127  0047                     _y32:	
  4128  0047                     	ds	4
  4129  004B                     _x0:	
  4130  004B                     	ds	4
  4131  004F                     _y0:	
  4132  004F                     	ds	4
  4133  0053                     _rsLoAvg:	
  4134  0053                     	ds	2
  4135  0055                     _voExpectAdcValue:	
  4136  0055                     	ds	2
  4137  0057                     _rtAdcValueVoFb:	
  4138  0057                     	ds	2
  4139  0059                     _rtAdcValueRcHi:	
  4140  0059                     	ds	2
  4141  005B                     _rtAdcValueRcLo:	
  4142  005B                     	ds	2
  4143  005D                     _rtAdcValueRsHi:	
  4144  005D                     	ds	2
  4145  005F                     _rtAdcValueRsLo:	
  4146  005F                     	ds	2
  4147  0061                     _TMR2_InterruptHandler:	
  4148  0061                     	ds	2
  4149  0063                     _pidBbSm:	
  4150  0063                     	ds	1
  4151  0064                     _xlen:	
  4152  0064                     	ds	1
  4153  0065                     _txCount:	
  4154  0065                     	ds	1
  4155  0066                     _txBufLen:	
  4156  0066                     	ds	1
  4157  0067                     _rxtemp:	
  4158  0067                     	ds	1
  4159  0068                     _subTickerX_1s:	
  4160  0068                     	ds	1
  4161  0069                     _subTickerX:	
  4162  0069                     	ds	1
  4163  006A                     _eusartRxCount:	
  4164  006A                     	ds	1
  4165  006B                     _Event:	
  4166  006B                     	ds	1
  4167                           
  4168                           	psect	dataBANK0
  4169  006C                     __pdataBANK0:	
  4170  006C                     _resRs:	
  4171  006C                     	ds	2
  4172  006E                     _resRc:	
  4173  006E                     	ds	2
  4174                           
  4175                           	psect	bssBANK1
  4176  00A0                     __pbssBANK1:	
  4177  00A0                     _err:	
  4178  00A0                     	ds	12
  4179  00AC                     _rsLoAvgBuf:	
  4180  00AC                     	ds	12
  4181  00B8                     _x32:	
  4182  00B8                     	ds	4
  4183  00BC                     _x1:	
  4184  00BC                     	ds	4
  4185  00C0                     _y1:	
  4186  00C0                     	ds	4
  4187  00C4                     _pwm2Ei:	
  4188  00C4                     	ds	2
  4189  00C6                     _voExpectMv:	
  4190  00C6                     	ds	2
  4191  00C8                     _PidTd:	
  4192  00C8                     	ds	2
  4193  00CA                     _PidTi:	
  4194  00CA                     	ds	2
  4195  00CC                     _PidKp:	
  4196  00CC                     	ds	2
  4197  00CE                     _globalTicker:	
  4198  00CE                     	ds	2
  4199                           
  4200                           	psect	dataBANK1
  4201  00D0                     __pdataBANK1:	
  4202  00D0                     _pidU:	
  4203  00D0                     	ds	2
  4204  00D2                     _pidpwm2_U:	
  4205  00D2                     	ds	2
  4206  00D4                     _pwm1DutyForIdrv:	
  4207  00D4                     	ds	2
  4208  00D6                     _pwm2DutyForVout:	
  4209  00D6                     	ds	2
  4210                           
  4211                           	psect	bssBANK2
  4212  0120                     __pbssBANK2:	
  4213  0120                     _modbusBuf:	
  4214  0120                     	ds	32
  4215  0140                     _eusartRxBuffer:	
  4216  0140                     	ds	32
  4217                           
  4218                           	psect	bssBANK3
  4219  01A0                     __pbssBANK3:	
  4220  01A0                     _txBuf:	
  4221  01A0                     	ds	64
  4222                           
  4223                           	psect	inittext
  4224  1002                     init_ram:	
  4225  1002  00FE               	movwf	126
  4226  1003                     initloop:	
  4227  1003  0012               	moviw fsr0++
  4228  1004  001E               	movwi fsr1++
  4229  1005  3001               	movlw	1
  4230  1006  02FE               	subwf	126,f
  4231  1007  3000               	movlw	0
  4232  1008  3BFF               	subwfb	127,f
  4233  1009  087F               	movf	127,w
  4234  100A  047E               	iorwf	126,w
  4235  100B  1903               	btfsc	3,2
  4236  100C  3400               	retlw	0
  4237  100D  2803               	goto	initloop
  4238                           
  4239                           	psect	clrtext
  4240  1CA8                     clear_ram0:	
  4241                           ;	Called with FSR0 containing the base address, and
  4242                           ;	btemp/btemp+1 has the size to clear
  4243                           
  4244  1CA8  0064               	clrwdt	;clear the watchdog before getting into this loop
  4245  1CA9                     clrloop0:	
  4246  1CA9  0180               	clrf	0	;clear RAM location pointed to by FSR
  4247  1CAA  3101               	addfsr 0,1
  4248  1CAB  3001               	movlw	1
  4249  1CAC  02FE               	subwf	126,f
  4250  1CAD  3000               	movlw	0
  4251  1CAE  3BFF               	subwfb	127,f
  4252  1CAF  087F               	movf	127,w
  4253  1CB0  047E               	iorwf	126,w
  4254  1CB1  1903               	btfsc	3,2
  4255  1CB2  3400               	retlw	0	;all done for this memory range, return
  4256  1CB3  2CA9               	goto	clrloop0	;have we reached the end yet?
  4257                           
  4258                           	psect	cstackBANK1
  4259  00D8                     __pcstackBANK1:	
  4260  00D8                     ??_main:	
  4261                           
  4262                           ; 1 bytes @ 0x0
  4263  00D8                     	ds	2
  4264                           
  4265                           	psect	cstackCOMMON
  4266  0070                     __pcstackCOMMON:	
  4267  0070                     ?_TMR2_StartTimer:	
  4268  0070                     ?_PIN_MANAGER_Initialize:	
  4269                           ; 1 bytes @ 0x0
  4270                           
  4271  0070                     ?_OSCILLATOR_Initialize:	
  4272                           ; 1 bytes @ 0x0
  4273                           
  4274  0070                     ?_WDT_Initialize:	
  4275                           ; 1 bytes @ 0x0
  4276                           
  4277  0070                     ?_ADC1_Initialize:	
  4278                           ; 1 bytes @ 0x0
  4279                           
  4280  0070                     ?_EUSART_Initialize:	
  4281                           ; 1 bytes @ 0x0
  4282                           
  4283  0070                     ?_PWM2_Initialize:	
  4284                           ; 1 bytes @ 0x0
  4285                           
  4286  0070                     ?_PWM1_Initialize:	
  4287                           ; 1 bytes @ 0x0
  4288                           
  4289  0070                     ?_TMR2_Initialize:	
  4290                           ; 1 bytes @ 0x0
  4291                           
  4292  0070                     ?_INTERRUPT_InterruptManager:	
  4293                           ; 1 bytes @ 0x0
  4294                           
  4295  0070                     ??_INTERRUPT_InterruptManager:	
  4296                           ; 1 bytes @ 0x0
  4297                           
  4298  0070                     ?_FVR_Initialize:	
  4299                           ; 1 bytes @ 0x0
  4300                           
  4301  0070                     ?_SYSTEM_Initialize:	
  4302                           ; 1 bytes @ 0x0
  4303                           
  4304  0070                     ?_uart_received_start:	
  4305                           ; 1 bytes @ 0x0
  4306                           
  4307  0070                     ?_fvr_set_gain:	
  4308                           ; 1 bytes @ 0x0
  4309                           
  4310  0070                     ?_adc_init:	
  4311                           ; 1 bytes @ 0x0
  4312                           
  4313  0070                     ?_pid_pwm1_idrv_run:	
  4314                           ; 1 bytes @ 0x0
  4315                           
  4316  0070                     ?_pid_pwm2_vout_run:	
  4317                           ; 1 bytes @ 0x0
  4318                           
  4319  0070                     ?_my_flash_read_system_erase:	
  4320                           ; 1 bytes @ 0x0
  4321                           
  4322  0070                     ?_sys_data_save:	
  4323                           ; 1 bytes @ 0x0
  4324                           
  4325  0070                     ?_modbus_response_write_single_register:	
  4326                           ; 1 bytes @ 0x0
  4327                           
  4328  0070                     ?_modbus_response_write_mult_register:	
  4329                           ; 1 bytes @ 0x0
  4330                           
  4331  0070                     ?_modbus_response_command:	
  4332                           ; 1 bytes @ 0x0
  4333                           
  4334  0070                     ?_main:	
  4335                           ; 1 bytes @ 0x0
  4336                           
  4337  0070                     ?_sys_data_init:	
  4338                           ; 1 bytes @ 0x0
  4339                           
  4340                           
  4341                           ; 2 bytes @ 0x0
  4342  0070                     	ds	1
  4343  0071                     ?_FLASH_EraseBlock:	
  4344  0071                     ?_TMR2_SetInterruptHandler:	
  4345                           ; 1 bytes @ 0x1
  4346                           
  4347  0071                     ??_TMR2_StartTimer:	
  4348                           ; 1 bytes @ 0x1
  4349                           
  4350  0071                     ??_PIN_MANAGER_Initialize:	
  4351                           ; 1 bytes @ 0x1
  4352                           
  4353  0071                     ??_OSCILLATOR_Initialize:	
  4354                           ; 1 bytes @ 0x1
  4355                           
  4356  0071                     ??_WDT_Initialize:	
  4357                           ; 1 bytes @ 0x1
  4358                           
  4359  0071                     ??_ADC1_Initialize:	
  4360                           ; 1 bytes @ 0x1
  4361                           
  4362  0071                     ??_EUSART_Initialize:	
  4363                           ; 1 bytes @ 0x1
  4364                           
  4365  0071                     ?_m_mem_cpy_len:	
  4366                           ; 1 bytes @ 0x1
  4367                           
  4368  0071                     ??_PWM2_Initialize:	
  4369                           ; 1 bytes @ 0x1
  4370                           
  4371  0071                     ??_PWM1_Initialize:	
  4372                           ; 1 bytes @ 0x1
  4373                           
  4374  0071                     ??_FVR_Initialize:	
  4375                           ; 1 bytes @ 0x1
  4376                           
  4377  0071                     ??_uart_received_start:	
  4378                           ; 1 bytes @ 0x1
  4379                           
  4380  0071                     ??_fvr_set_gain:	
  4381                           ; 1 bytes @ 0x1
  4382                           
  4383  0071                     ??_adc_init:	
  4384                           ; 1 bytes @ 0x1
  4385                           
  4386  0071                     ?_my_flash_system_read:	
  4387                           ; 1 bytes @ 0x1
  4388                           
  4389  0071                     ?_get_idrv_pwm1_duty:	
  4390                           ; 1 bytes @ 0x1
  4391                           
  4392  0071                     ?_get_vout_pwm2_duty:	
  4393                           ; 2 bytes @ 0x1
  4394                           
  4395  0071                     ?_my_flash_system_write:	
  4396                           ; 2 bytes @ 0x1
  4397                           
  4398  0071                     ?_getRegisterVal:	
  4399                           ; 2 bytes @ 0x1
  4400                           
  4401  0071                     ?_crc_sum:	
  4402                           ; 2 bytes @ 0x1
  4403                           
  4404  0071                     ?___wmul:	
  4405                           ; 2 bytes @ 0x1
  4406                           
  4407  0071                     ?___awdiv:	
  4408                           ; 2 bytes @ 0x1
  4409                           
  4410  0071                     ?___lwdiv:	
  4411                           ; 2 bytes @ 0x1
  4412                           
  4413  0071                     ?___lmul:	
  4414                           ; 2 bytes @ 0x1
  4415                           
  4416  0071                     ?___lldiv:	
  4417                           ; 4 bytes @ 0x1
  4418                           
  4419  0071                     PIN_MANAGER_Initialize@state:	
  4420                           ; 4 bytes @ 0x1
  4421                           
  4422  0071                     FLASH_EraseBlock@startAddr:	
  4423                           ; 1 bytes @ 0x1
  4424                           
  4425  0071                     TMR2_SetInterruptHandler@InterruptHandler:	
  4426                           ; 2 bytes @ 0x1
  4427                           
  4428  0071                     my_flash_system_read@buf:	
  4429                           ; 2 bytes @ 0x1
  4430                           
  4431  0071                     my_flash_system_write@buf:	
  4432                           ; 2 bytes @ 0x1
  4433                           
  4434  0071                     getRegisterVal@addr:	
  4435                           ; 2 bytes @ 0x1
  4436                           
  4437  0071                     m_mem_cpy_len@d:	
  4438                           ; 2 bytes @ 0x1
  4439                           
  4440  0071                     crc_sum@buf:	
  4441                           ; 2 bytes @ 0x1
  4442                           
  4443  0071                     ___wmul@multiplier:	
  4444                           ; 2 bytes @ 0x1
  4445                           
  4446  0071                     ___awdiv@divisor:	
  4447                           ; 2 bytes @ 0x1
  4448                           
  4449  0071                     ___lwdiv@divisor:	
  4450                           ; 2 bytes @ 0x1
  4451                           
  4452  0071                     ___lmul@multiplier:	
  4453                           ; 2 bytes @ 0x1
  4454                           
  4455  0071                     ___lldiv@divisor:	
  4456                           ; 4 bytes @ 0x1
  4457                           
  4458                           
  4459                           ; 4 bytes @ 0x1
  4460  0071                     	ds	1
  4461  0072                     fvr_set_gain@t8:	
  4462  0072                     adc_init@ch:	
  4463                           ; 1 bytes @ 0x2
  4464                           
  4465                           
  4466                           ; 1 bytes @ 0x2
  4467  0072                     	ds	1
  4468  0073                     ??_FLASH_EraseBlock:	
  4469  0073                     ??_TMR2_SetInterruptHandler:	
  4470                           ; 1 bytes @ 0x3
  4471                           
  4472  0073                     ??_TMR2_Initialize:	
  4473                           ; 1 bytes @ 0x3
  4474                           
  4475  0073                     ??_SYSTEM_Initialize:	
  4476                           ; 1 bytes @ 0x3
  4477                           
  4478  0073                     ??_get_idrv_pwm1_duty:	
  4479                           ; 1 bytes @ 0x3
  4480                           
  4481  0073                     ??_get_vout_pwm2_duty:	
  4482                           ; 1 bytes @ 0x3
  4483                           
  4484  0073                     FLASH_EraseBlock@GIEBitValue:	
  4485                           ; 1 bytes @ 0x3
  4486                           
  4487  0073                     fvr_set_gain@g:	
  4488                           ; 1 bytes @ 0x3
  4489                           
  4490  0073                     getRegisterVal@tempData:	
  4491                           ; 1 bytes @ 0x3
  4492                           
  4493  0073                     my_flash_system_read@len:	
  4494                           ; 1 bytes @ 0x3
  4495                           
  4496  0073                     my_flash_system_write@len:	
  4497                           ; 2 bytes @ 0x3
  4498                           
  4499  0073                     m_mem_cpy_len@s:	
  4500                           ; 2 bytes @ 0x3
  4501                           
  4502  0073                     crc_sum@len:	
  4503                           ; 2 bytes @ 0x3
  4504                           
  4505  0073                     ___wmul@multiplicand:	
  4506                           ; 2 bytes @ 0x3
  4507                           
  4508  0073                     ___awdiv@dividend:	
  4509                           ; 2 bytes @ 0x3
  4510                           
  4511  0073                     ___lwdiv@dividend:	
  4512                           ; 2 bytes @ 0x3
  4513                           
  4514                           
  4515                           ; 2 bytes @ 0x3
  4516  0073                     	ds	1
  4517  0074                     ??_my_flash_read_system_erase:	
  4518  0074                     ??_getRegisterVal:	
  4519                           ; 1 bytes @ 0x4
  4520                           
  4521  0074                     ?_adc_sample:	
  4522                           ; 1 bytes @ 0x4
  4523                           
  4524  0074                     adc_sample@gfvr:	
  4525                           ; 2 bytes @ 0x4
  4526                           
  4527                           
  4528                           ; 1 bytes @ 0x4
  4529  0074                     	ds	1
  4530  0075                     ??_my_flash_system_read:	
  4531  0075                     ??_my_flash_system_write:	
  4532                           ; 1 bytes @ 0x5
  4533                           
  4534  0075                     ??_crc_sum:	
  4535                           ; 1 bytes @ 0x5
  4536                           
  4537  0075                     ??___wmul:	
  4538                           ; 1 bytes @ 0x5
  4539                           
  4540  0075                     ??___awdiv:	
  4541                           ; 1 bytes @ 0x5
  4542                           
  4543  0075                     ??___lwdiv:	
  4544                           ; 1 bytes @ 0x5
  4545                           
  4546  0075                     adc_sample@num:	
  4547                           ; 1 bytes @ 0x5
  4548                           
  4549  0075                     get_idrv_pwm1_duty@t16:	
  4550                           ; 1 bytes @ 0x5
  4551                           
  4552  0075                     get_vout_pwm2_duty@t16:	
  4553                           ; 2 bytes @ 0x5
  4554                           
  4555  0075                     m_mem_cpy_len@len:	
  4556                           ; 2 bytes @ 0x5
  4557                           
  4558  0075                     ___wmul@product:	
  4559                           ; 2 bytes @ 0x5
  4560                           
  4561  0075                     ___lmul@multiplicand:	
  4562                           ; 2 bytes @ 0x5
  4563                           
  4564  0075                     ___lldiv@dividend:	
  4565                           ; 4 bytes @ 0x5
  4566                           
  4567                           
  4568                           ; 4 bytes @ 0x5
  4569  0075                     	ds	1
  4570  0076                     ??_adc_sample:	
  4571  0076                     ___awdiv@counter:	
  4572                           ; 1 bytes @ 0x6
  4573                           
  4574  0076                     ___lwdiv@quotient:	
  4575                           ; 1 bytes @ 0x6
  4576                           
  4577                           
  4578                           ; 2 bytes @ 0x6
  4579  0076                     	ds	1
  4580  0077                     ??_m_mem_cpy_len:	
  4581  0077                     ??_crc_append:	
  4582                           ; 1 bytes @ 0x7
  4583                           
  4584  0077                     ?_set_idrv_pwm1_duty:	
  4585                           ; 1 bytes @ 0x7
  4586                           
  4587  0077                     ?_set_vout_pwm2_duty:	
  4588                           ; 1 bytes @ 0x7
  4589                           
  4590  0077                     my_flash_system_read@GIEBitValue:	
  4591                           ; 1 bytes @ 0x7
  4592                           
  4593  0077                     ___awdiv@sign:	
  4594                           ; 1 bytes @ 0x7
  4595                           
  4596  0077                     set_idrv_pwm1_duty@duty:	
  4597                           ; 1 bytes @ 0x7
  4598                           
  4599  0077                     set_vout_pwm2_duty@duty:	
  4600                           ; 2 bytes @ 0x7
  4601                           
  4602                           
  4603                           ; 2 bytes @ 0x7
  4604  0077                     	ds	1
  4605  0078                     ??_crc_verify:	
  4606  0078                     ?_uart_send_len:	
  4607                           ; 1 bytes @ 0x8
  4608                           
  4609  0078                     uart_send_len@len:	
  4610                           ; 1 bytes @ 0x8
  4611                           
  4612  0078                     ___lwdiv@counter:	
  4613                           ; 1 bytes @ 0x8
  4614                           
  4615  0078                     my_flash_system_read@flashAddr:	
  4616                           ; 1 bytes @ 0x8
  4617                           
  4618  0078                     getRegisterVal@t16:	
  4619                           ; 2 bytes @ 0x8
  4620                           
  4621  0078                     ___awdiv@quotient:	
  4622                           ; 2 bytes @ 0x8
  4623                           
  4624                           
  4625                           ; 2 bytes @ 0x8
  4626  0078                     	ds	1
  4627  0079                     ??_uart_send_len:	
  4628  0079                     ??_set_idrv_pwm1_duty:	
  4629                           ; 1 bytes @ 0x9
  4630                           
  4631  0079                     ??_set_vout_pwm2_duty:	
  4632                           ; 1 bytes @ 0x9
  4633                           
  4634  0079                     ??___lmul:	
  4635                           ; 1 bytes @ 0x9
  4636                           
  4637  0079                     ??___lldiv:	
  4638                           ; 1 bytes @ 0x9
  4639                           
  4640  0079                     ??___aldiv:	
  4641                           ; 1 bytes @ 0x9
  4642                           
  4643  0079                     set_idrv_pwm1_duty@t16:	
  4644                           ; 1 bytes @ 0x9
  4645                           
  4646  0079                     set_vout_pwm2_duty@t16:	
  4647                           ; 2 bytes @ 0x9
  4648                           
  4649                           
  4650                           ; 2 bytes @ 0x9
  4651  0079                     	ds	1
  4652  007A                     ??_calc_rs_lo_avg:	
  4653  007A                     getRegisterVal@tempAddr:	
  4654                           ; 1 bytes @ 0xA
  4655                           
  4656  007A                     my_flash_system_read@i:	
  4657                           ; 1 bytes @ 0xA
  4658                           
  4659                           
  4660                           ; 2 bytes @ 0xA
  4661  007A                     	ds	1
  4662  007B                     uart_send_len@buf:	
  4663                           
  4664                           ; 1 bytes @ 0xB
  4665  007B                     	ds	1
  4666  007C                     ??_sys_data_save:	
  4667                           
  4668                           	psect	cstackBANK0
  4669  0020                     __pcstackBANK0:	
  4670                           ; 1 bytes @ 0xC
  4671                           
  4672  0020                     ??_pid_pwm2_vout_run:	
  4673  0020                     adc_sample@ch:	
  4674                           ; 1 bytes @ 0x0
  4675                           
  4676  0020                     my_flash_system_write@j:	
  4677                           ; 1 bytes @ 0x0
  4678                           
  4679  0020                     crc_sum@j:	
  4680                           ; 2 bytes @ 0x0
  4681                           
  4682  0020                     ___lmul@product:	
  4683                           ; 2 bytes @ 0x0
  4684                           
  4685  0020                     ___lldiv@quotient:	
  4686                           ; 4 bytes @ 0x0
  4687                           
  4688                           
  4689                           ; 4 bytes @ 0x0
  4690  0020                     	ds	1
  4691  0021                     adc_sample@i:	
  4692                           
  4693                           ; 2 bytes @ 0x1
  4694  0021                     	ds	1
  4695  0022                     my_flash_system_write@GIEBitValue:	
  4696  0022                     pid_pwm2_vout_run@__ei:	
  4697                           ; 1 bytes @ 0x2
  4698                           
  4699  0022                     crc_sum@i:	
  4700                           ; 2 bytes @ 0x2
  4701                           
  4702                           
  4703                           ; 2 bytes @ 0x2
  4704  0022                     	ds	1
  4705  0023                     adc_sample@ret:	
  4706  0023                     my_flash_system_write@blocNum:	
  4707                           ; 2 bytes @ 0x3
  4708                           
  4709                           
  4710                           ; 2 bytes @ 0x3
  4711  0023                     	ds	1
  4712  0024                     ?___aldiv:	
  4713  0024                     ___lldiv@counter:	
  4714                           ; 4 bytes @ 0x4
  4715                           
  4716  0024                     pid_pwm2_vout_run@t16:	
  4717                           ; 1 bytes @ 0x4
  4718                           
  4719  0024                     crc_sum@crc:	
  4720                           ; 2 bytes @ 0x4
  4721                           
  4722  0024                     ___aldiv@divisor:	
  4723                           ; 2 bytes @ 0x4
  4724                           
  4725                           
  4726                           ; 4 bytes @ 0x4
  4727  0024                     	ds	1
  4728  0025                     ?_calc_rs_lo_avg:	
  4729  0025                     ?_calc_temp_rs:	
  4730                           ; 2 bytes @ 0x5
  4731                           
  4732  0025                     ?_calc_temp_rc:	
  4733                           ; 4 bytes @ 0x5
  4734                           
  4735  0025                     adc_sample@t16:	
  4736                           ; 4 bytes @ 0x5
  4737                           
  4738  0025                     calc_rs_lo_avg@x:	
  4739                           ; 2 bytes @ 0x5
  4740                           
  4741  0025                     my_flash_system_write@loc:	
  4742                           ; 2 bytes @ 0x5
  4743                           
  4744                           
  4745                           ; 2 bytes @ 0x5
  4746  0025                     	ds	1
  4747  0026                     ?_crc_append:	
  4748  0026                     ?_crc_verify:	
  4749                           ; 1 bytes @ 0x6
  4750                           
  4751  0026                     crc_verify@message:	
  4752                           ; 1 bytes @ 0x6
  4753                           
  4754  0026                     crc_append@message:	
  4755                           ; 2 bytes @ 0x6
  4756                           
  4757                           
  4758                           ; 2 bytes @ 0x6
  4759  0026                     	ds	1
  4760  0027                     my_flash_system_write@flashAddr:	
  4761  0027                     calc_rs_lo_avg@t32:	
  4762                           ; 2 bytes @ 0x7
  4763                           
  4764                           
  4765                           ; 4 bytes @ 0x7
  4766  0027                     	ds	1
  4767  0028                     crc_verify@n:	
  4768  0028                     crc_append@n:	
  4769                           ; 2 bytes @ 0x8
  4770                           
  4771  0028                     ___aldiv@dividend:	
  4772                           ; 2 bytes @ 0x8
  4773                           
  4774                           
  4775                           ; 4 bytes @ 0x8
  4776  0028                     	ds	1
  4777  0029                     ??_calc_temp_rs:	
  4778  0029                     ??_calc_temp_rc:	
  4779                           ; 1 bytes @ 0x9
  4780                           
  4781  0029                     my_flash_system_write@i:	
  4782                           ; 1 bytes @ 0x9
  4783                           
  4784                           
  4785                           ; 1 bytes @ 0x9
  4786  0029                     	ds	1
  4787  002A                     crc_verify@crccal:	
  4788  002A                     crc_append@crc:	
  4789                           ; 2 bytes @ 0xA
  4790                           
  4791                           
  4792                           ; 2 bytes @ 0xA
  4793  002A                     	ds	1
  4794  002B                     calc_rs_lo_avg@i:	
  4795                           
  4796                           ; 1 bytes @ 0xB
  4797  002B                     	ds	1
  4798  002C                     ?_modbus_response_illgeal_function:	
  4799  002C                     ??_modbus_response_write_single_register:	
  4800                           ; 1 bytes @ 0xC
  4801                           
  4802  002C                     ??_modbus_response_write_mult_register:	
  4803                           ; 1 bytes @ 0xC
  4804                           
  4805  002C                     ??_modbus_response_command:	
  4806                           ; 1 bytes @ 0xC
  4807                           
  4808  002C                     modbus_response_illgeal_function@errcode:	
  4809                           ; 1 bytes @ 0xC
  4810                           
  4811  002C                     ___aldiv@counter:	
  4812                           ; 1 bytes @ 0xC
  4813                           
  4814  002C                     crc_verify@expected:	
  4815                           ; 1 bytes @ 0xC
  4816                           
  4817                           
  4818                           ; 2 bytes @ 0xC
  4819  002C                     	ds	1
  4820  002D                     ??_modbus_response_illgeal_function:	
  4821  002D                     modbus_response_write_mult_register@startAddr:	
  4822                           ; 1 bytes @ 0xD
  4823                           
  4824  002D                     ___aldiv@sign:	
  4825                           ; 1 bytes @ 0xD
  4826                           
  4827                           
  4828                           ; 1 bytes @ 0xD
  4829  002D                     	ds	1
  4830  002E                     ??_sys_data_init:	
  4831  002E                     modbus_response_illgeal_function@buf:	
  4832                           ; 1 bytes @ 0xE
  4833                           
  4834  002E                     modbus_response_write_mult_register@len:	
  4835                           ; 1 bytes @ 0xE
  4836                           
  4837  002E                     modbus_response_command@tmpAddr:	
  4838                           ; 1 bytes @ 0xE
  4839                           
  4840  002E                     ___aldiv@quotient:	
  4841                           ; 2 bytes @ 0xE
  4842                           
  4843                           
  4844                           ; 4 bytes @ 0xE
  4845  002E                     	ds	1
  4846  002F                     modbus_response_illgeal_function@pmdbs:	
  4847  002F                     modbus_response_write_mult_register@rbuf:	
  4848                           ; 1 bytes @ 0xF
  4849                           
  4850                           
  4851                           ; 1 bytes @ 0xF
  4852  002F                     	ds	1
  4853  0030                     modbus_response_write_single_register@fiSave:	
  4854  0030                     modbus_response_write_mult_register@stb:	
  4855                           ; 1 bytes @ 0x10
  4856                           
  4857  0030                     modbus_response_command@startAddr:	
  4858                           ; 1 bytes @ 0x10
  4859                           
  4860                           
  4861                           ; 2 bytes @ 0x10
  4862  0030                     	ds	1
  4863  0031                     modbus_response_write_single_register@t16:	
  4864                           
  4865                           ; 2 bytes @ 0x11
  4866  0031                     	ds	1
  4867  0032                     ??_pid_pwm1_idrv_run:	
  4868  0032                     ?_calc_expect_vout_adc_value:	
  4869                           ; 1 bytes @ 0x12
  4870                           
  4871  0032                     modbus_response_command@i:	
  4872                           ; 2 bytes @ 0x12
  4873                           
  4874  0032                     calc_expect_vout_adc_value@x:	
  4875                           ; 1 bytes @ 0x12
  4876                           
  4877                           
  4878                           ; 2 bytes @ 0x12
  4879  0032                     	ds	1
  4880  0033                     modbus_response_write_single_register@i:	
  4881  0033                     modbus_response_command@pmdbs:	
  4882                           ; 1 bytes @ 0x13
  4883                           
  4884                           
  4885                           ; 1 bytes @ 0x13
  4886  0033                     	ds	1
  4887  0034                     ??_calc_expect_vout_adc_value:	
  4888  0034                     modbus_response_write_single_register@pmdbs:	
  4889                           ; 1 bytes @ 0x14
  4890                           
  4891  0034                     modbus_response_command@len:	
  4892                           ; 1 bytes @ 0x14
  4893                           
  4894  0034                     sys_data_init@ret:	
  4895                           ; 1 bytes @ 0x14
  4896                           
  4897                           
  4898                           ; 2 bytes @ 0x14
  4899  0034                     	ds	1
  4900  0035                     modbus_response_write_single_register@rbuf:	
  4901  0035                     modbus_response_command@rbuf:	
  4902                           ; 1 bytes @ 0x15
  4903                           
  4904                           
  4905                           ; 1 bytes @ 0x15
  4906  0035                     	ds	1
  4907  0036                     sys_data_init@i:	
  4908  0036                     modbus_response_write_single_register@startAddr:	
  4909                           ; 2 bytes @ 0x16
  4910                           
  4911  0036                     modbus_response_command@tempData:	
  4912                           ; 2 bytes @ 0x16
  4913                           
  4914                           
  4915                           ; 2 bytes @ 0x16
  4916  0036                     	ds	2
  4917  0038                     ?_modbus_response_process:	
  4918  0038                     modbus_response_process@rlen:	
  4919                           ; 1 bytes @ 0x18
  4920                           
  4921                           
  4922                           ; 2 bytes @ 0x18
  4923  0038                     	ds	2
  4924  003A                     ??_modbus_response_process:	
  4925  003A                     pid_pwm1_idrv_run@t32:	
  4926                           ; 1 bytes @ 0x1A
  4927                           
  4928                           
  4929                           ; 4 bytes @ 0x1A
  4930  003A                     	ds	1
  4931  003B                     modbus_response_process@resp:	
  4932                           
  4933                           ; 1 bytes @ 0x1B
  4934  003B                     	ds	1
  4935  003C                     modbus_response_process@pmdbs:	
  4936                           
  4937                           ; 1 bytes @ 0x1C
  4938  003C                     	ds	1
  4939  003D                     modbus_response_process@rbuf:	
  4940                           
  4941                           ; 1 bytes @ 0x1D
  4942  003D                     	ds	5
  4943  0042                     calc_expect_vout_adc_value@t32:	
  4944                           
  4945                           ; 4 bytes @ 0x22
  4946  0042                     	ds	4
  4947  0046                     calc_expect_vout_adc_value@i:	
  4948                           
  4949                           ; 1 bytes @ 0x26
  4950  0046                     	ds	1
  4951                           
  4952                           	psect	maintext
  4953  0DA2                     __pmaintext:	
  4954 ;;
  4955 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  4956 ;;
  4957 ;; *************** function _main *****************
  4958 ;; Defined at:
  4959 ;;		line 17 in file "src/app/main.c"
  4960 ;; Parameters:    Size  Location     Type
  4961 ;;		None
  4962 ;; Auto vars:     Size  Location     Type
  4963 ;;		None
  4964 ;; Return value:  Size  Location     Type
  4965 ;;                  1    wreg      void 
  4966 ;; Registers used:
  4967 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4968 ;; Tracked objects:
  4969 ;;		On entry : B1F/0
  4970 ;;		On exit  : 0/0
  4971 ;;		Unchanged: 0/0
  4972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4975 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4976 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4977 ;;Total ram usage:        2 bytes
  4978 ;; Hardware stack levels required when called:    6
  4979 ;; This function calls:
  4980 ;;		_SYSTEM_Initialize
  4981 ;;		_adc_sample
  4982 ;;		_calc_expect_vout_adc_value
  4983 ;;		_calc_rs_lo_avg
  4984 ;;		_calc_temp_rc
  4985 ;;		_calc_temp_rs
  4986 ;;		_m_mem_cpy_len
  4987 ;;		_modbus_response_process
  4988 ;;		_pid_pwm1_idrv_run
  4989 ;;		_pid_pwm2_vout_run
  4990 ;;		_sys_data_init
  4991 ;;		_uart_received_start
  4992 ;;		_uart_send_len
  4993 ;; This function is called by:
  4994 ;;		Startup code after reset
  4995 ;; This function uses a non-reentrant model
  4996 ;;
  4997                           
  4998                           
  4999                           ;psect for function _main
  5000  0DA2                     _main:	
  5001                           
  5002                           ;main.c: 19: __nop();
  5003                           
  5004                           ;incstack = 0
  5005                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5006  0DA2  0000               	nop
  5007                           
  5008                           ;main.c: 20: isRunInBoot=0xaa;
  5009  0DA3  30AA               	movlw	170
  5010  0DA4  0021               	movlb	1	; select bank1
  5011  0DA5  00D8               	movwf	??_main^(0+128)
  5012  0DA6  0858               	movf	??_main^(0+128),w
  5013  0DA7  003F               	movlb	31	; select bank31
  5014  0DA8  00FF               	movwf	127	;volatile
  5015                           
  5016                           ;main.c: 21: isRunInBoot=isRunInBoot;
  5017  0DA9  087F               	movf	127,w	;volatile
  5018  0DAA  0021               	movlb	1	; select bank1
  5019  0DAB  00D8               	movwf	??_main^(0+128)
  5020  0DAC  0858               	movf	??_main^(0+128),w
  5021  0DAD  003F               	movlb	31	; select bank31
  5022  0DAE  00FF               	movwf	127	;volatile
  5023                           
  5024                           ;main.c: 22: SYSTEM_Initialize();
  5025  0DAF  319D  2569  318D   	fcall	_SYSTEM_Initialize
  5026                           
  5027                           ;main.c: 23: do{ (INTCONbits.GIE = 1); (INTCONbits.PEIE = 1); }while(0);;
  5028  0DB2  178B               	bsf	11,7	;volatile
  5029  0DB3  170B               	bsf	11,6	;volatile
  5030                           
  5031                           ;main.c: 26: TXSTAbits.TXEN=0;
  5032  0DB4  0023               	movlb	3	; select bank3
  5033  0DB5  129E               	bcf	30,5	;volatile
  5034                           
  5035                           ;main.c: 27: sys_data_init();
  5036  0DB6  3196  2653  318D   	fcall	_sys_data_init
  5037                           
  5038                           ;main.c: 30: modbusBuf[0]=0x55;
  5039  0DB9  3055               	movlw	85
  5040  0DBA  0021               	movlb	1	; select bank1
  5041  0DBB  00D8               	movwf	??_main^(0+128)
  5042  0DBC  0858               	movf	??_main^(0+128),w
  5043  0DBD  0022               	movlb	2	; select bank2
  5044  0DBE  00A0               	movwf	_modbusBuf^(0+256)
  5045                           
  5046                           ;main.c: 31: modbusBuf[1]=0xaa;
  5047  0DBF  30AA               	movlw	170
  5048  0DC0  0021               	movlb	1	; select bank1
  5049  0DC1  00D8               	movwf	??_main^(0+128)
  5050  0DC2  0858               	movf	??_main^(0+128),w
  5051  0DC3  0022               	movlb	2	; select bank2
  5052  0DC4  00A1               	movwf	(_modbusBuf^(0+256)+1)
  5053                           
  5054                           ;main.c: 32: uart_send_len(modbusBuf,2);
  5055  0DC5  3002               	movlw	2
  5056  0DC6  0021               	movlb	1	; select bank1
  5057  0DC7  00D8               	movwf	??_main^(0+128)
  5058  0DC8  0858               	movf	??_main^(0+128),w
  5059  0DC9  00F8               	movwf	uart_send_len@len
  5060  0DCA  3020               	movlw	(low (_modbusBuf| (0+256)))& (0+255)
  5061  0DCB  3190  207D  318D   	fcall	_uart_send_len
  5062  0DCE                     l5315:	
  5063                           ;main.c: 33: while (1){
  5064                           
  5065                           
  5066                           ;main.c: 34: if(Event & (1<<2)){
  5067  0DCE  0020               	movlb	0	; select bank0
  5068  0DCF  1D6B               	btfss	_Event,2	;volatile
  5069  0DD0  2E77               	goto	l5345
  5070                           
  5071                           ;main.c: 35: Event &= ~(1<<2);
  5072  0DD1  30FB               	movlw	251
  5073  0DD2  0021               	movlb	1	; select bank1
  5074  0DD3  00D8               	movwf	??_main^(0+128)
  5075  0DD4  0858               	movf	??_main^(0+128),w
  5076  0DD5  0020               	movlb	0	; select bank0
  5077  0DD6  05EB               	andwf	_Event,f	;volatile
  5078                           
  5079                           ;main.c: 37: rtAdcValueRsLo=adc_sample(channel_AN6,1,32);
  5080  0DD7  01F4               	clrf	adc_sample@gfvr
  5081  0DD8  0AF4               	incf	adc_sample@gfvr,f
  5082  0DD9  3020               	movlw	32
  5083  0DDA  0021               	movlb	1	; select bank1
  5084  0DDB  00D8               	movwf	??_main^(0+128)
  5085  0DDC  0858               	movf	??_main^(0+128),w
  5086  0DDD  00F5               	movwf	adc_sample@num
  5087  0DDE  3006               	movlw	6
  5088  0DDF  3192  2233  318D   	fcall	_adc_sample
  5089  0DE2  0875               	movf	?_adc_sample+1,w
  5090  0DE3  0020               	movlb	0	; select bank0
  5091  0DE4  00E0               	movwf	_rtAdcValueRsLo+1
  5092  0DE5  0874               	movf	?_adc_sample,w
  5093  0DE6  00DF               	movwf	_rtAdcValueRsLo
  5094                           
  5095                           ;main.c: 39: rtAdcValueRsHi=adc_sample(channel_AN5,3,32);
  5096  0DE7  3003               	movlw	3
  5097  0DE8  0021               	movlb	1	; select bank1
  5098  0DE9  00D8               	movwf	??_main^(0+128)
  5099  0DEA  0858               	movf	??_main^(0+128),w
  5100  0DEB  00F4               	movwf	adc_sample@gfvr
  5101  0DEC  3020               	movlw	32
  5102  0DED  00D9               	movwf	(??_main+1)^(0+128)
  5103  0DEE  0859               	movf	(??_main+1)^(0+128),w
  5104  0DEF  00F5               	movwf	adc_sample@num
  5105  0DF0  3005               	movlw	5
  5106  0DF1  3192  2233  318D   	fcall	_adc_sample
  5107  0DF4  0875               	movf	?_adc_sample+1,w
  5108  0DF5  0020               	movlb	0	; select bank0
  5109  0DF6  00DE               	movwf	_rtAdcValueRsHi+1
  5110  0DF7  0874               	movf	?_adc_sample,w
  5111  0DF8  00DD               	movwf	_rtAdcValueRsHi
  5112                           
  5113                           ;main.c: 42: rtAdcValueRcLo=adc_sample(channel_AN4,3,32);
  5114  0DF9  3003               	movlw	3
  5115  0DFA  0021               	movlb	1	; select bank1
  5116  0DFB  00D8               	movwf	??_main^(0+128)
  5117  0DFC  0858               	movf	??_main^(0+128),w
  5118  0DFD  00F4               	movwf	adc_sample@gfvr
  5119  0DFE  3020               	movlw	32
  5120  0DFF  00D9               	movwf	(??_main+1)^(0+128)
  5121  0E00  0859               	movf	(??_main+1)^(0+128),w
  5122  0E01  00F5               	movwf	adc_sample@num
  5123  0E02  3004               	movlw	4
  5124  0E03  3192  2233  318D   	fcall	_adc_sample
  5125  0E06  0875               	movf	?_adc_sample+1,w
  5126  0E07  0020               	movlb	0	; select bank0
  5127  0E08  00DC               	movwf	_rtAdcValueRcLo+1
  5128  0E09  0874               	movf	?_adc_sample,w
  5129  0E0A  00DB               	movwf	_rtAdcValueRcLo
  5130                           
  5131                           ;main.c: 43: rtAdcValueRcLo>>=1;
  5132  0E0B  3001               	movlw	1
  5133  0E0C                     u4905:	
  5134  0E0C  36DC               	lsrf	_rtAdcValueRcLo+1,f
  5135  0E0D  0CDB               	rrf	_rtAdcValueRcLo,f
  5136  0E0E  0B89               	decfsz	9,f
  5137  0E0F  2E0C               	goto	u4905
  5138                           
  5139                           ;main.c: 44: rtAdcValueRcHi=adc_sample(channel_AN2,3,32);
  5140  0E10  3003               	movlw	3
  5141  0E11  0021               	movlb	1	; select bank1
  5142  0E12  00D8               	movwf	??_main^(0+128)
  5143  0E13  0858               	movf	??_main^(0+128),w
  5144  0E14  00F4               	movwf	adc_sample@gfvr
  5145  0E15  3020               	movlw	32
  5146  0E16  00D9               	movwf	(??_main+1)^(0+128)
  5147  0E17  0859               	movf	(??_main+1)^(0+128),w
  5148  0E18  00F5               	movwf	adc_sample@num
  5149  0E19  3002               	movlw	2
  5150  0E1A  3192  2233  318D   	fcall	_adc_sample
  5151  0E1D  0875               	movf	?_adc_sample+1,w
  5152  0E1E  0020               	movlb	0	; select bank0
  5153  0E1F  00DA               	movwf	_rtAdcValueRcHi+1
  5154  0E20  0874               	movf	?_adc_sample,w
  5155  0E21  00D9               	movwf	_rtAdcValueRcHi
  5156                           
  5157                           ;main.c: 45: rtAdcValueRcHi>>=1;
  5158  0E22  3001               	movlw	1
  5159  0E23                     u4915:	
  5160  0E23  36DA               	lsrf	_rtAdcValueRcHi+1,f
  5161  0E24  0CD9               	rrf	_rtAdcValueRcHi,f
  5162  0E25  0B89               	decfsz	9,f
  5163  0E26  2E23               	goto	u4915
  5164                           
  5165                           ;main.c: 47: rtAdcValueVoFb=adc_sample(channel_AN7,3,32);
  5166  0E27  3003               	movlw	3
  5167  0E28  0021               	movlb	1	; select bank1
  5168  0E29  00D8               	movwf	??_main^(0+128)
  5169  0E2A  0858               	movf	??_main^(0+128),w
  5170  0E2B  00F4               	movwf	adc_sample@gfvr
  5171  0E2C  3020               	movlw	32
  5172  0E2D  00D9               	movwf	(??_main+1)^(0+128)
  5173  0E2E  0859               	movf	(??_main+1)^(0+128),w
  5174  0E2F  00F5               	movwf	adc_sample@num
  5175  0E30  3007               	movlw	7
  5176  0E31  3192  2233  318D   	fcall	_adc_sample
  5177  0E34  0875               	movf	?_adc_sample+1,w
  5178  0E35  0020               	movlb	0	; select bank0
  5179  0E36  00D8               	movwf	_rtAdcValueVoFb+1
  5180  0E37  0874               	movf	?_adc_sample,w
  5181  0E38  00D7               	movwf	_rtAdcValueVoFb
  5182                           
  5183                           ;main.c: 48: rtAdcValueVoFb>>=1;
  5184  0E39  3001               	movlw	1
  5185  0E3A                     u4925:	
  5186  0E3A  36D8               	lsrf	_rtAdcValueVoFb+1,f
  5187  0E3B  0CD7               	rrf	_rtAdcValueVoFb,f
  5188  0E3C  0B89               	decfsz	9,f
  5189  0E3D  2E3A               	goto	u4925
  5190                           
  5191                           ;main.c: 50: resRc=calc_temp_rc();
  5192  0E3E  3197  2727  318D   	fcall	_calc_temp_rc
  5193  0E41  0020               	movlb	0	; select bank0
  5194  0E42  0826               	movf	?_calc_temp_rc+1,w
  5195  0E43  00EF               	movwf	_resRc+1
  5196  0E44  0825               	movf	?_calc_temp_rc,w
  5197  0E45  00EE               	movwf	_resRc
  5198                           
  5199                           ;main.c: 51: resRs=calc_temp_rs();
  5200  0E46  3194  2473  318D   	fcall	_calc_temp_rs
  5201  0E49  0020               	movlb	0	; select bank0
  5202  0E4A  0826               	movf	?_calc_temp_rs+1,w
  5203  0E4B  00ED               	movwf	_resRs+1
  5204  0E4C  0825               	movf	?_calc_temp_rs,w
  5205  0E4D  00EC               	movwf	_resRs
  5206                           
  5207                           ;main.c: 53: pid_pwm1_idrv_run();
  5208  0E4E  318A  22D8  318D   	fcall	_pid_pwm1_idrv_run
  5209                           
  5210                           ;main.c: 54: rsLoAvg=calc_rs_lo_avg(rtAdcValueRsLo);
  5211  0E51  0020               	movlb	0	; select bank0
  5212  0E52  0860               	movf	_rtAdcValueRsLo+1,w
  5213  0E53  00A6               	movwf	calc_rs_lo_avg@x+1
  5214  0E54  085F               	movf	_rtAdcValueRsLo,w
  5215  0E55  00A5               	movwf	calc_rs_lo_avg@x
  5216  0E56  3192  2290  318D   	fcall	_calc_rs_lo_avg
  5217  0E59  0020               	movlb	0	; select bank0
  5218  0E5A  0826               	movf	?_calc_rs_lo_avg+1,w
  5219  0E5B  00D4               	movwf	_rsLoAvg+1
  5220  0E5C  0825               	movf	?_calc_rs_lo_avg,w
  5221  0E5D  00D3               	movwf	_rsLoAvg
  5222                           
  5223                           ;main.c: 56: voExpectMv=calc_expect_vout_adc_value(rsLoAvg);
  5224  0E5E  0854               	movf	_rsLoAvg+1,w
  5225  0E5F  00B3               	movwf	calc_expect_vout_adc_value@x+1
  5226  0E60  0853               	movf	_rsLoAvg,w
  5227  0E61  00B2               	movwf	calc_expect_vout_adc_value@x
  5228  0E62  3188  20E4  318D   	fcall	_calc_expect_vout_adc_value
  5229  0E65  0020               	movlb	0	; select bank0
  5230  0E66  0833               	movf	?_calc_expect_vout_adc_value+1,w
  5231  0E67  0021               	movlb	1	; select bank1
  5232  0E68  00C7               	movwf	(_voExpectMv+1)^(0+128)
  5233  0E69  0020               	movlb	0	; select bank0
  5234  0E6A  0832               	movf	?_calc_expect_vout_adc_value,w
  5235  0E6B  0021               	movlb	1	; select bank1
  5236  0E6C  00C6               	movwf	_voExpectMv^(0+128)
  5237                           
  5238                           ;main.c: 57: voExpectAdcValue=(voExpectMv<<1);
  5239  0E6D  3546               	lslf	_voExpectMv^(0+128),w
  5240  0E6E  0020               	movlb	0	; select bank0
  5241  0E6F  00D5               	movwf	_voExpectAdcValue
  5242  0E70  0021               	movlb	1	; select bank1
  5243  0E71  0D47               	rlf	(_voExpectMv+1)^(0+128),w
  5244  0E72  0020               	movlb	0	; select bank0
  5245  0E73  00D6               	movwf	_voExpectAdcValue+1
  5246                           
  5247                           ;main.c: 58: pid_pwm2_vout_run();
  5248  0E74  3195  2503  318D   	fcall	_pid_pwm2_vout_run
  5249  0E77                     l5345:	
  5250                           
  5251                           ;main.c: 60: };main.c: 62: if(Event & (1<<3)){
  5252  0E77  0020               	movlb	0	; select bank0
  5253  0E78  1DEB               	btfss	_Event,3	;volatile
  5254  0E79  2E80               	goto	l5349
  5255                           
  5256                           ;main.c: 63: Event &= ~(1<<3);
  5257  0E7A  30F7               	movlw	247
  5258  0E7B  0021               	movlb	1	; select bank1
  5259  0E7C  00D8               	movwf	??_main^(0+128)
  5260  0E7D  0858               	movf	??_main^(0+128),w
  5261  0E7E  0020               	movlb	0	; select bank0
  5262  0E7F  05EB               	andwf	_Event,f	;volatile
  5263  0E80                     l5349:	
  5264                           
  5265                           ;main.c: 105: };main.c: 107: if(Event & (1<<0)){
  5266  0E80  1C6B               	btfss	_Event,0	;volatile
  5267  0E81  2EB1               	goto	l5359
  5268                           
  5269                           ;main.c: 108: Event &= ~ (1<<0);
  5270  0E82  30FE               	movlw	254
  5271  0E83  0021               	movlb	1	; select bank1
  5272  0E84  00D8               	movwf	??_main^(0+128)
  5273  0E85  0858               	movf	??_main^(0+128),w
  5274  0E86  0020               	movlb	0	; select bank0
  5275  0E87  05EB               	andwf	_Event,f	;volatile
  5276                           
  5277                           ;main.c: 109: if(eusartRxCount>0){
  5278  0E88  086A               	movf	_eusartRxCount,w	;volatile
  5279  0E89  1903               	btfsc	3,2
  5280  0E8A  2EAE               	goto	l5357
  5281                           
  5282                           ;main.c: 110: m_mem_cpy_len(modbusBuf,eusartRxBuffer,eusartRxCount);
  5283  0E8B  3020               	movlw	low _modbusBuf
  5284  0E8C  00F1               	movwf	m_mem_cpy_len@d
  5285  0E8D  3001               	movlw	high _modbusBuf
  5286  0E8E  00F2               	movwf	m_mem_cpy_len@d+1
  5287  0E8F  3040               	movlw	low _eusartRxBuffer
  5288  0E90  00F3               	movwf	m_mem_cpy_len@s
  5289  0E91  3001               	movlw	high _eusartRxBuffer
  5290  0E92  00F4               	movwf	m_mem_cpy_len@s+1
  5291  0E93  086A               	movf	_eusartRxCount,w	;volatile
  5292  0E94  0021               	movlb	1	; select bank1
  5293  0E95  00D8               	movwf	??_main^(0+128)
  5294  0E96  01D9               	clrf	(??_main^(0+128)+1)
  5295  0E97  0858               	movf	??_main^(0+128),w
  5296  0E98  00F5               	movwf	m_mem_cpy_len@len
  5297  0E99  0859               	movf	(??_main+1)^(0+128),w
  5298  0E9A  00F6               	movwf	m_mem_cpy_len@len+1
  5299  0E9B  319D  25F3  318D   	fcall	_m_mem_cpy_len
  5300                           
  5301                           ;main.c: 111: modbus_response_process(modbusBuf,eusartRxCount);
  5302  0E9E  0020               	movlb	0	; select bank0
  5303  0E9F  086A               	movf	_eusartRxCount,w	;volatile
  5304  0EA0  0021               	movlb	1	; select bank1
  5305  0EA1  00D8               	movwf	??_main^(0+128)
  5306  0EA2  01D9               	clrf	(??_main^(0+128)+1)
  5307  0EA3  0858               	movf	??_main^(0+128),w
  5308  0EA4  0020               	movlb	0	; select bank0
  5309  0EA5  00B8               	movwf	modbus_response_process@rlen
  5310  0EA6  0021               	movlb	1	; select bank1
  5311  0EA7  0859               	movf	(??_main+1)^(0+128),w
  5312  0EA8  0020               	movlb	0	; select bank0
  5313  0EA9  00B9               	movwf	modbus_response_process@rlen+1
  5314  0EAA  3020               	movlw	(low (_modbusBuf| (0+256)))& (0+255)
  5315  0EAB  318F  27AC  318D   	fcall	_modbus_response_process
  5316  0EAE                     l5357:	
  5317                           
  5318                           ;main.c: 113: };main.c: 115: uart_received_start();
  5319  0EAE  319C  2489  318D   	fcall	_uart_received_start
  5320  0EB1                     l5359:	
  5321                           
  5322                           ;main.c: 116: };main.c: 118: __nop();
  5323  0EB1  0000               	nop
  5324  0EB2  2DCE               	goto	l5315
  5325  0EB3                     __end_of_main:	
  5326                           
  5327                           	psect	text1
  5328  1C89                     __ptext1:	
  5329 ;; *************** function _uart_received_start *****************
  5330 ;; Defined at:
  5331 ;;		line 59 in file "src/api/my_uart.c"
  5332 ;; Parameters:    Size  Location     Type
  5333 ;;		None
  5334 ;; Auto vars:     Size  Location     Type
  5335 ;;		None
  5336 ;; Return value:  Size  Location     Type
  5337 ;;                  1    wreg      void 
  5338 ;; Registers used:
  5339 ;;		status,2
  5340 ;; Tracked objects:
  5341 ;;		On entry : 0/0
  5342 ;;		On exit  : 0/0
  5343 ;;		Unchanged: 0/0
  5344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5348 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5349 ;;Total ram usage:        0 bytes
  5350 ;; Hardware stack levels used:    1
  5351 ;; Hardware stack levels required when called:    1
  5352 ;; This function calls:
  5353 ;;		Nothing
  5354 ;; This function is called by:
  5355 ;;		_main
  5356 ;; This function uses a non-reentrant model
  5357 ;;
  5358                           
  5359                           
  5360                           ;psect for function _uart_received_start
  5361  1C89                     _uart_received_start:	
  5362                           
  5363                           ;my_uart.c: 61: eusartRxCount=0;
  5364                           
  5365                           ;incstack = 0
  5366                           ; Regs used in _uart_received_start: [status,2]
  5367  1C89  0020               	movlb	0	; select bank0
  5368  1C8A  01EA               	clrf	_eusartRxCount	;volatile
  5369                           
  5370                           ;my_uart.c: 70: eusartRxIdleTime_ms=0;
  5371  1C8B  01FC               	clrf	_eusartRxIdleTime_ms	;volatile
  5372  1C8C  0008               	return
  5373  1C8D                     __end_of_uart_received_start:	
  5374                           
  5375                           	psect	text2
  5376  1653                     __ptext2:	
  5377 ;; *************** function _sys_data_init *****************
  5378 ;; Defined at:
  5379 ;;		line 104 in file "src/api/sysData.c"
  5380 ;; Parameters:    Size  Location     Type
  5381 ;;		None
  5382 ;; Auto vars:     Size  Location     Type
  5383 ;;  i               2   22[BANK0 ] unsigned int 
  5384 ;;  ret             2   20[BANK0 ] unsigned int 
  5385 ;; Return value:  Size  Location     Type
  5386 ;;                  2  745[None  ] unsigned int 
  5387 ;; Registers used:
  5388 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5389 ;; Tracked objects:
  5390 ;;		On entry : 0/0
  5391 ;;		On exit  : 0/0
  5392 ;;		Unchanged: 0/0
  5393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5395 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5396 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5397 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5398 ;;Total ram usage:       10 bytes
  5399 ;; Hardware stack levels used:    1
  5400 ;; Hardware stack levels required when called:    4
  5401 ;; This function calls:
  5402 ;;		___wmul
  5403 ;;		_crc_verify
  5404 ;;		_my_flash_system_read
  5405 ;;		_sys_data_save
  5406 ;; This function is called by:
  5407 ;;		_main
  5408 ;; This function uses a non-reentrant model
  5409 ;;
  5410                           
  5411                           
  5412                           ;psect for function _sys_data_init
  5413  1653                     _sys_data_init:	
  5414                           
  5415                           ;sysData.c: 106: uint16_t ret,i;;sysData.c: 107: my_flash_system_read((uint8_t*)&sysData
      +                          ,sizeof(sysData_t));
  5416                           
  5417                           ;incstack = 0
  5418                           ; Regs used in _sys_data_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5419  1653  305C               	movlw	92
  5420  1654  00F1               	movwf	my_flash_system_read@buf
  5421  1655  3023               	movlw	35
  5422  1656  00F2               	movwf	my_flash_system_read@buf+1
  5423  1657  3084               	movlw	132
  5424  1658  00F3               	movwf	my_flash_system_read@len
  5425  1659  3000               	movlw	0
  5426  165A  00F4               	movwf	my_flash_system_read@len+1
  5427  165B  3190  2045  3196   	fcall	_my_flash_system_read
  5428                           
  5429                           ;sysData.c: 108: ret=crc_verify((uint8_t*)&sysData,sizeof(sysData_t));
  5430  165E  305C               	movlw	92
  5431  165F  0020               	movlb	0	; select bank0
  5432  1660  00A6               	movwf	crc_verify@message
  5433  1661  3023               	movlw	35
  5434  1662  00A7               	movwf	crc_verify@message+1
  5435  1663  3084               	movlw	132
  5436  1664  00A8               	movwf	crc_verify@n
  5437  1665  3000               	movlw	0
  5438  1666  00A9               	movwf	crc_verify@n+1
  5439  1667  3190  200E  3196   	fcall	_crc_verify
  5440  166A  0020               	movlb	0	; select bank0
  5441  166B  00AE               	movwf	??_sys_data_init
  5442  166C  01AF               	clrf	??_sys_data_init+1
  5443  166D  082E               	movf	??_sys_data_init,w
  5444  166E  00B4               	movwf	sys_data_init@ret
  5445  166F  082F               	movf	??_sys_data_init+1,w
  5446  1670  00B5               	movwf	sys_data_init@ret+1
  5447                           
  5448                           ;sysData.c: 109: if(!ret){
  5449  1671  0834               	movf	sys_data_init@ret,w
  5450  1672  0435               	iorwf	sys_data_init@ret+1,w
  5451  1673  1D03               	btfss	3,2
  5452  1674  2F0A               	goto	l5229
  5453                           
  5454                           ;sysData.c: 110: sysData.pidSetFlg0=0x55;
  5455  1675  305C               	movlw	92
  5456  1676  0086               	movwf	6
  5457  1677  3023               	movlw	35
  5458  1678  0087               	movwf	7
  5459  1679  3055               	movlw	85
  5460  167A  3FC0               	movwi [0]fsr1
  5461                           
  5462                           ;sysData.c: 111: sysData.pidSetFlg1=0xaa;
  5463  167B  305D               	movlw	93
  5464  167C  0086               	movwf	6
  5465  167D  3023               	movlw	35
  5466  167E  0087               	movwf	7
  5467  167F  30AA               	movlw	170
  5468  1680  0081               	movwf	1
  5469                           
  5470                           ;sysData.c: 112: sysData.id=0x01;
  5471  1681  305E               	movlw	94
  5472  1682  0086               	movwf	6
  5473  1683  3023               	movlw	35
  5474  1684  0087               	movwf	7
  5475  1685  3001               	movlw	1
  5476  1686  0081               	movwf	1
  5477                           
  5478                           ;sysData.c: 113: for(i=0;i<30;i++){
  5479  1687  01B6               	clrf	sys_data_init@i
  5480  1688  01B7               	clrf	sys_data_init@i+1
  5481  1689  3000               	movlw	0
  5482  168A  0237               	subwf	sys_data_init@i+1,w
  5483  168B  301E               	movlw	30
  5484  168C  1903               	skipnz
  5485  168D  0236               	subwf	sys_data_init@i,w
  5486  168E  1803               	btfsc	3,0
  5487  168F  2EE1               	goto	l5225
  5488  1690                     l5219:	
  5489                           
  5490                           ;sysData.c: 115: sysData.calibRsAdc[i]=9400+i*720;
  5491  1690  0837               	movf	sys_data_init@i+1,w
  5492  1691  00F2               	movwf	___wmul@multiplier+1
  5493  1692  0836               	movf	sys_data_init@i,w
  5494  1693  00F1               	movwf	___wmul@multiplier
  5495  1694  30D0               	movlw	208
  5496  1695  00F3               	movwf	___wmul@multiplicand
  5497  1696  3002               	movlw	2
  5498  1697  00F4               	movwf	___wmul@multiplicand+1
  5499  1698  319D  2584  3196   	fcall	___wmul
  5500  169B  0871               	movf	?___wmul,w
  5501  169C  3EB8               	addlw	184
  5502  169D  0020               	movlb	0	; select bank0
  5503  169E  00AE               	movwf	??_sys_data_init
  5504  169F  3024               	movlw	36
  5505  16A0  3D72               	addwfc	?___wmul+1,w
  5506  16A1  00AF               	movwf	??_sys_data_init+1
  5507  16A2  0837               	movf	sys_data_init@i+1,w
  5508  16A3  00B1               	movwf	??_sys_data_init+3
  5509  16A4  0836               	movf	sys_data_init@i,w
  5510  16A5  00B0               	movwf	??_sys_data_init+2
  5511  16A6  35B0               	lslf	??_sys_data_init+2,f
  5512  16A7  0DB1               	rlf	??_sys_data_init+3,f
  5513  16A8  3066               	movlw	102
  5514  16A9  00B2               	movwf	??_sys_data_init+4
  5515  16AA  3023               	movlw	35
  5516  16AB  00B3               	movwf	??_sys_data_init+5
  5517  16AC  0830               	movf	??_sys_data_init+2,w
  5518  16AD  0732               	addwf	??_sys_data_init+4,w
  5519  16AE  0086               	movwf	6
  5520  16AF  0831               	movf	??_sys_data_init+3,w
  5521  16B0  3D33               	addwfc	??_sys_data_init+5,w
  5522  16B1  0087               	movwf	7
  5523  16B2  082E               	movf	??_sys_data_init,w
  5524  16B3  3FC0               	movwi [0]fsr1
  5525  16B4  082F               	movf	??_sys_data_init+1,w
  5526  16B5  3FC1               	movwi [1]fsr1
  5527                           
  5528                           ;sysData.c: 116: sysData.calibVoMV[i]=i*333;
  5529  16B6  0837               	movf	sys_data_init@i+1,w
  5530  16B7  00F2               	movwf	___wmul@multiplier+1
  5531  16B8  0836               	movf	sys_data_init@i,w
  5532  16B9  00F1               	movwf	___wmul@multiplier
  5533  16BA  304D               	movlw	77
  5534  16BB  00F3               	movwf	___wmul@multiplicand
  5535  16BC  3001               	movlw	1
  5536  16BD  00F4               	movwf	___wmul@multiplicand+1
  5537  16BE  319D  2584  3196   	fcall	___wmul
  5538  16C1  0020               	movlb	0	; select bank0
  5539  16C2  0837               	movf	sys_data_init@i+1,w
  5540  16C3  00AF               	movwf	??_sys_data_init+1
  5541  16C4  0836               	movf	sys_data_init@i,w
  5542  16C5  00AE               	movwf	??_sys_data_init
  5543  16C6  35AE               	lslf	??_sys_data_init,f
  5544  16C7  0DAF               	rlf	??_sys_data_init+1,f
  5545  16C8  30A2               	movlw	162
  5546  16C9  00B0               	movwf	??_sys_data_init+2
  5547  16CA  3023               	movlw	35
  5548  16CB  00B1               	movwf	??_sys_data_init+3
  5549  16CC  082E               	movf	??_sys_data_init,w
  5550  16CD  0730               	addwf	??_sys_data_init+2,w
  5551  16CE  0086               	movwf	6
  5552  16CF  082F               	movf	??_sys_data_init+1,w
  5553  16D0  3D31               	addwfc	??_sys_data_init+3,w
  5554  16D1  0087               	movwf	7
  5555  16D2  0871               	movf	?___wmul,w
  5556  16D3  3FC0               	movwi [0]fsr1
  5557  16D4  0872               	movf	?___wmul+1,w
  5558  16D5  3FC1               	movwi [1]fsr1
  5559  16D6  3001               	movlw	1
  5560  16D7  07B6               	addwf	sys_data_init@i,f
  5561  16D8  3000               	movlw	0
  5562  16D9  3DB7               	addwfc	sys_data_init@i+1,f
  5563  16DA  3000               	movlw	0
  5564  16DB  0237               	subwf	sys_data_init@i+1,w
  5565  16DC  301E               	movlw	30
  5566  16DD  1903               	skipnz
  5567  16DE  0236               	subwf	sys_data_init@i,w
  5568  16DF  1C03               	skipc
  5569  16E0  2E90               	goto	l5219
  5570  16E1                     l5225:	
  5571                           
  5572                           ;sysData.c: 117: };sysData.c: 119: sysData.pidKp=3200;
  5573  16E1  3080               	movlw	128
  5574  16E2  00AE               	movwf	??_sys_data_init
  5575  16E3  300C               	movlw	12
  5576  16E4  00AF               	movwf	??_sys_data_init+1
  5577  16E5  305C               	movlw	92
  5578  16E6  0086               	movwf	6
  5579  16E7  3023               	movlw	35
  5580  16E8  0087               	movwf	7
  5581  16E9  3144               	addfsr 1,4
  5582  16EA  082E               	movf	??_sys_data_init,w
  5583  16EB  3FC0               	movwi [0]fsr1
  5584  16EC  082F               	movf	??_sys_data_init+1,w
  5585  16ED  3FC1               	movwi [1]fsr1
  5586                           
  5587                           ;sysData.c: 120: sysData.pidTi=20;
  5588  16EE  3014               	movlw	20
  5589  16EF  00AE               	movwf	??_sys_data_init
  5590  16F0  3000               	movlw	0
  5591  16F1  00AF               	movwf	??_sys_data_init+1
  5592  16F2  305C               	movlw	92
  5593  16F3  0086               	movwf	6
  5594  16F4  3023               	movlw	35
  5595  16F5  0087               	movwf	7
  5596  16F6  3146               	addfsr 1,6
  5597  16F7  082E               	movf	??_sys_data_init,w
  5598  16F8  3FC0               	movwi [0]fsr1
  5599  16F9  082F               	movf	??_sys_data_init+1,w
  5600  16FA  3FC1               	movwi [1]fsr1
  5601                           
  5602                           ;sysData.c: 121: sysData.pidTd=5;
  5603  16FB  3005               	movlw	5
  5604  16FC  00AE               	movwf	??_sys_data_init
  5605  16FD  3000               	movlw	0
  5606  16FE  00AF               	movwf	??_sys_data_init+1
  5607  16FF  305C               	movlw	92
  5608  1700  0086               	movwf	6
  5609  1701  3023               	movlw	35
  5610  1702  0087               	movwf	7
  5611  1703  3148               	addfsr 1,8
  5612  1704  082E               	movf	??_sys_data_init,w
  5613  1705  3FC0               	movwi [0]fsr1
  5614  1706  082F               	movf	??_sys_data_init+1,w
  5615  1707  3FC1               	movwi [1]fsr1
  5616                           
  5617                           ;sysData.c: 123: sys_data_save();
  5618  1708  319E  26CA         	fcall	_sys_data_save
  5619  170A                     l5229:	
  5620                           
  5621                           ;sysData.c: 125: };sysData.c: 126: PidKp=sysData.pidKp;
  5622  170A  305C               	movlw	92
  5623  170B  0086               	movwf	6
  5624  170C  3023               	movlw	35
  5625  170D  0087               	movwf	7
  5626  170E  3144               	addfsr 1,4
  5627  170F  3F40               	moviw [0]fsr1
  5628  1710  0021               	movlb	1	; select bank1
  5629  1711  00CC               	movwf	_PidKp^(0+128)
  5630  1712  3F41               	moviw [1]fsr1
  5631  1713  00CD               	movwf	(_PidKp+1)^(0+128)
  5632                           
  5633                           ;sysData.c: 127: PidTi=sysData.pidTi;
  5634  1714  305C               	movlw	92
  5635  1715  0086               	movwf	6
  5636  1716  3023               	movlw	35
  5637  1717  0087               	movwf	7
  5638  1718  3146               	addfsr 1,6
  5639  1719  3F40               	moviw [0]fsr1
  5640  171A  00CA               	movwf	_PidTi^(0+128)
  5641  171B  3F41               	moviw [1]fsr1
  5642  171C  00CB               	movwf	(_PidTi+1)^(0+128)
  5643                           
  5644                           ;sysData.c: 128: PidTd=sysData.pidTd;;
  5645  171D  305C               	movlw	92
  5646  171E  0086               	movwf	6
  5647  171F  3023               	movlw	35
  5648  1720  0087               	movwf	7
  5649  1721  3148               	addfsr 1,8
  5650  1722  3F40               	moviw [0]fsr1
  5651  1723  00C8               	movwf	_PidTd^(0+128)
  5652  1724  3F41               	moviw [1]fsr1
  5653  1725  00C9               	movwf	(_PidTd+1)^(0+128)
  5654  1726  0008               	return
  5655  1727                     __end_of_sys_data_init:	
  5656                           ;sysData.c: 129: return ret;;	Return value of _sys_data_init is never used
  5657                           
  5658                           
  5659                           	psect	text3
  5660  1045                     __ptext3:	
  5661 ;; *************** function _my_flash_system_read *****************
  5662 ;; Defined at:
  5663 ;;		line 23 in file "src/api/sysData.c"
  5664 ;; Parameters:    Size  Location     Type
  5665 ;;  buf             2    1[COMMON] PTR unsigned char 
  5666 ;;		 -> sysData(132), 
  5667 ;;  len             2    3[COMMON] unsigned int 
  5668 ;; Auto vars:     Size  Location     Type
  5669 ;;  i               2   10[COMMON] unsigned int 
  5670 ;;  flashAddr       2    8[COMMON] unsigned int 
  5671 ;;  GIEBitValue     1    7[COMMON] unsigned char 
  5672 ;; Return value:  Size  Location     Type
  5673 ;;                  1    wreg      void 
  5674 ;; Registers used:
  5675 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5676 ;; Tracked objects:
  5677 ;;		On entry : 0/0
  5678 ;;		On exit  : 0/0
  5679 ;;		Unchanged: 0/0
  5680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5681 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5682 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5683 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5684 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5685 ;;Total ram usage:       11 bytes
  5686 ;; Hardware stack levels used:    1
  5687 ;; Hardware stack levels required when called:    1
  5688 ;; This function calls:
  5689 ;;		Nothing
  5690 ;; This function is called by:
  5691 ;;		_sys_data_init
  5692 ;; This function uses a non-reentrant model
  5693 ;;
  5694                           
  5695                           
  5696                           ;psect for function _my_flash_system_read
  5697  1045                     _my_flash_system_read:	
  5698                           
  5699                           ;sysData.c: 25: uint16_t flashAddr=0x1f00;
  5700                           
  5701                           ;incstack = 0
  5702                           ; Regs used in _my_flash_system_read: [wreg+fsr1l+fsr1h+status,2+status,0]
  5703  1045  3000               	movlw	0
  5704  1046  00F8               	movwf	my_flash_system_read@flashAddr
  5705  1047  301F               	movlw	31
  5706  1048  00F9               	movwf	my_flash_system_read@flashAddr+1
  5707                           
  5708                           ;sysData.c: 26: uint16_t i;;sysData.c: 28: uint8_t GIEBitValue = INTCONbits.GIE;
  5709  1049  3000               	movlw	0
  5710  104A  1B8B               	btfsc	11,7	;volatile
  5711  104B  3001               	movlw	1
  5712  104C  00F7               	movwf	my_flash_system_read@GIEBitValue
  5713                           
  5714                           ;sysData.c: 30: INTCONbits.GIE = 0;
  5715  104D  138B               	bcf	11,7	;volatile
  5716                           
  5717                           ;sysData.c: 32: for(i=0;i<len;i++){
  5718  104E  01FA               	clrf	my_flash_system_read@i
  5719  104F  01FB               	clrf	my_flash_system_read@i+1
  5720  1050                     l3751:	
  5721  1050  0874               	movf	my_flash_system_read@len+1,w
  5722  1051  027B               	subwf	my_flash_system_read@i+1,w
  5723  1052  1D03               	skipz
  5724  1053  2856               	goto	u2465
  5725  1054  0873               	movf	my_flash_system_read@len,w
  5726  1055  027A               	subwf	my_flash_system_read@i,w
  5727  1056                     u2465:	
  5728  1056  1803               	btfsc	3,0
  5729  1057  2877               	goto	l3753
  5730                           
  5731                           ;sysData.c: 34: PMADRL = (flashAddr & 0x00FF);
  5732  1058  0878               	movf	my_flash_system_read@flashAddr,w
  5733  1059  0023               	movlb	3	; select bank3
  5734  105A  0091               	movwf	17	;volatile
  5735                           
  5736                           ;sysData.c: 35: PMADRH = ((flashAddr & 0xFF00) >> 8);
  5737  105B  0879               	movf	my_flash_system_read@flashAddr+1,w
  5738  105C  0092               	movwf	18	;volatile
  5739                           
  5740                           ;sysData.c: 37: PMCON1bits.CFGS = 0;
  5741  105D  1315               	bcf	21,6	;volatile
  5742                           
  5743                           ;sysData.c: 38: PMCON1bits.RD = 1;
  5744  105E  1415               	bsf	21,0	;volatile
  5745                           
  5746                           ;sysData.c: 39: __nop();
  5747  105F  0000               	nop
  5748                           
  5749                           ;sysData.c: 40: __nop();
  5750  1060  0000               	nop
  5751                           
  5752                           ;sysData.c: 41: buf[i]=PMDATL;
  5753  1061  087A               	movf	my_flash_system_read@i,w
  5754  1062  0771               	addwf	my_flash_system_read@buf,w
  5755  1063  00F5               	movwf	??_my_flash_system_read
  5756  1064  087B               	movf	my_flash_system_read@i+1,w
  5757  1065  3D72               	addwfc	my_flash_system_read@buf+1,w
  5758  1066  00F6               	movwf	??_my_flash_system_read+1
  5759  1067  0875               	movf	??_my_flash_system_read,w
  5760  1068  0086               	movwf	6
  5761  1069  0876               	movf	??_my_flash_system_read+1,w
  5762  106A  0087               	movwf	7
  5763  106B  0023               	movlb	3	; select bank3
  5764  106C  0813               	movf	19,w	;volatile
  5765  106D  0081               	movwf	1
  5766                           
  5767                           ;sysData.c: 42: flashAddr++;
  5768  106E  3001               	movlw	1
  5769  106F  07F8               	addwf	my_flash_system_read@flashAddr,f
  5770  1070  3000               	movlw	0
  5771  1071  3DF9               	addwfc	my_flash_system_read@flashAddr+1,f
  5772  1072  3001               	movlw	1
  5773  1073  07FA               	addwf	my_flash_system_read@i,f
  5774  1074  3000               	movlw	0
  5775  1075  3DFB               	addwfc	my_flash_system_read@i+1,f
  5776  1076  2850               	goto	l3751
  5777  1077                     l3753:	
  5778                           
  5779                           ;sysData.c: 43: };sysData.c: 44: INTCONbits.GIE = GIEBitValue;
  5780  1077  0C77               	rrf	my_flash_system_read@GIEBitValue,w
  5781  1078  1C03               	skipc
  5782  1079  138B               	bcf	11,7	;volatile
  5783  107A  1803               	skipnc
  5784  107B  178B               	bsf	11,7	;volatile
  5785  107C  0008               	return
  5786  107D                     __end_of_my_flash_system_read:	
  5787                           
  5788                           	psect	text4
  5789  1D84                     __ptext4:	
  5790 ;; *************** function ___wmul *****************
  5791 ;; Defined at:
  5792 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  5793 ;; Parameters:    Size  Location     Type
  5794 ;;  multiplier      2    1[COMMON] unsigned int 
  5795 ;;  multiplicand    2    3[COMMON] unsigned int 
  5796 ;; Auto vars:     Size  Location     Type
  5797 ;;  product         2    5[COMMON] unsigned int 
  5798 ;; Return value:  Size  Location     Type
  5799 ;;                  2    1[COMMON] unsigned int 
  5800 ;; Registers used:
  5801 ;;		wreg, status,2, status,0
  5802 ;; Tracked objects:
  5803 ;;		On entry : 0/0
  5804 ;;		On exit  : 0/0
  5805 ;;		Unchanged: 0/0
  5806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5807 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5808 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5810 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5811 ;;Total ram usage:        6 bytes
  5812 ;; Hardware stack levels used:    1
  5813 ;; Hardware stack levels required when called:    1
  5814 ;; This function calls:
  5815 ;;		Nothing
  5816 ;; This function is called by:
  5817 ;;		_sys_data_init
  5818 ;; This function uses a non-reentrant model
  5819 ;;
  5820                           
  5821                           
  5822                           ;psect for function ___wmul
  5823  1D84                     ___wmul:	
  5824                           
  5825                           ;incstack = 0
  5826                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5827  1D84  01F5               	clrf	___wmul@product
  5828  1D85  01F6               	clrf	___wmul@product+1
  5829  1D86                     l3939:	
  5830  1D86  1C71               	btfss	___wmul@multiplier,0
  5831  1D87  2D8C               	goto	l1086
  5832  1D88  0873               	movf	___wmul@multiplicand,w
  5833  1D89  07F5               	addwf	___wmul@product,f
  5834  1D8A  0874               	movf	___wmul@multiplicand+1,w
  5835  1D8B  3DF6               	addwfc	___wmul@product+1,f
  5836  1D8C                     l1086:	
  5837  1D8C  3001               	movlw	1
  5838  1D8D                     u2765:	
  5839  1D8D  35F3               	lslf	___wmul@multiplicand,f
  5840  1D8E  0DF4               	rlf	___wmul@multiplicand+1,f
  5841  1D8F  0B89               	decfsz	9,f
  5842  1D90  2D8D               	goto	u2765
  5843  1D91  3001               	movlw	1
  5844  1D92                     u2775:	
  5845  1D92  36F2               	lsrf	___wmul@multiplier+1,f
  5846  1D93  0CF1               	rrf	___wmul@multiplier,f
  5847  1D94  0B89               	decfsz	9,f
  5848  1D95  2D92               	goto	u2775
  5849  1D96  0871               	movf	___wmul@multiplier,w
  5850  1D97  0472               	iorwf	___wmul@multiplier+1,w
  5851  1D98  1D03               	btfss	3,2
  5852  1D99  2D86               	goto	l3939
  5853  1D9A  0876               	movf	___wmul@product+1,w
  5854  1D9B  00F2               	movwf	?___wmul+1
  5855  1D9C  0875               	movf	___wmul@product,w
  5856  1D9D  00F1               	movwf	?___wmul
  5857  1D9E  0008               	return
  5858  1D9F                     __end_of___wmul:	
  5859                           
  5860                           	psect	text5
  5861  1503                     __ptext5:	
  5862 ;; *************** function _pid_pwm2_vout_run *****************
  5863 ;; Defined at:
  5864 ;;		line 363 in file "src/api/sample.c"
  5865 ;; Parameters:    Size  Location     Type
  5866 ;;		None
  5867 ;; Auto vars:     Size  Location     Type
  5868 ;;  t16             2    4[BANK0 ] int 
  5869 ;;  __ei            2    2[BANK0 ] int 
  5870 ;; Return value:  Size  Location     Type
  5871 ;;                  1    wreg      void 
  5872 ;; Registers used:
  5873 ;;		wreg, status,2, status,0, pclath, cstack
  5874 ;; Tracked objects:
  5875 ;;		On entry : 0/0
  5876 ;;		On exit  : 0/0
  5877 ;;		Unchanged: 0/0
  5878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5880 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5881 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5882 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5883 ;;Total ram usage:        6 bytes
  5884 ;; Hardware stack levels used:    1
  5885 ;; Hardware stack levels required when called:    3
  5886 ;; This function calls:
  5887 ;;		___awdiv
  5888 ;;		___lwdiv
  5889 ;;		_set_vout_pwm2_duty
  5890 ;; This function is called by:
  5891 ;;		_main
  5892 ;; This function uses a non-reentrant model
  5893 ;;
  5894                           
  5895                           
  5896                           ;psect for function _pid_pwm2_vout_run
  5897  1503                     _pid_pwm2_vout_run:	
  5898                           
  5899                           ;sample.c: 365: int16_t t16,__ei;;sample.c: 366: t16=voExpectAdcValue-rtAdcValueVoFb;
  5900                           
  5901                           ;incstack = 0
  5902                           ; Regs used in _pid_pwm2_vout_run: [wreg+status,2+status,0+pclath+cstack]
  5903  1503  0020               	movlb	0	; select bank0
  5904  1504  0957               	comf	_rtAdcValueVoFb,w
  5905  1505  00A0               	movwf	??_pid_pwm2_vout_run
  5906  1506  0958               	comf	_rtAdcValueVoFb+1,w
  5907  1507  00A1               	movwf	??_pid_pwm2_vout_run+1
  5908  1508  0AA0               	incf	??_pid_pwm2_vout_run,f
  5909  1509  1903               	skipnz
  5910  150A  0AA1               	incf	??_pid_pwm2_vout_run+1,f
  5911  150B  0855               	movf	_voExpectAdcValue,w
  5912  150C  0720               	addwf	??_pid_pwm2_vout_run,w
  5913  150D  00A4               	movwf	pid_pwm2_vout_run@t16
  5914  150E  0856               	movf	_voExpectAdcValue+1,w
  5915  150F  3D21               	addwfc	??_pid_pwm2_vout_run+1,w
  5916  1510  00A5               	movwf	pid_pwm2_vout_run@t16+1
  5917                           
  5918                           ;sample.c: 367: __ei=t16/150;
  5919  1511  3096               	movlw	150
  5920  1512  00F1               	movwf	___awdiv@divisor
  5921  1513  3000               	movlw	0
  5922  1514  00F2               	movwf	___awdiv@divisor+1
  5923  1515  0825               	movf	pid_pwm2_vout_run@t16+1,w
  5924  1516  00F4               	movwf	___awdiv@dividend+1
  5925  1517  0824               	movf	pid_pwm2_vout_run@t16,w
  5926  1518  00F3               	movwf	___awdiv@dividend
  5927  1519  3191  2139  3195   	fcall	___awdiv
  5928  151C  0872               	movf	?___awdiv+1,w
  5929  151D  0020               	movlb	0	; select bank0
  5930  151E  00A3               	movwf	pid_pwm2_vout_run@__ei+1
  5931  151F  0871               	movf	?___awdiv,w
  5932  1520  00A2               	movwf	pid_pwm2_vout_run@__ei
  5933                           
  5934                           ;sample.c: 368: if(__ei==0){
  5935  1521  0822               	movf	pid_pwm2_vout_run@__ei,w
  5936  1522  0423               	iorwf	pid_pwm2_vout_run@__ei+1,w
  5937  1523  1D03               	btfss	3,2
  5938  1524  2D46               	goto	l5139
  5939                           
  5940                           ;sample.c: 369: if(t16>16)__ei=1;
  5941  1525  0825               	movf	pid_pwm2_vout_run@t16+1,w
  5942  1526  3A80               	xorlw	128
  5943  1527  00A0               	movwf	??_pid_pwm2_vout_run
  5944  1528  3080               	movlw	128
  5945  1529  0220               	subwf	??_pid_pwm2_vout_run,w
  5946  152A  1D03               	skipz
  5947  152B  2D2E               	goto	u4645
  5948  152C  3011               	movlw	17
  5949  152D  0224               	subwf	pid_pwm2_vout_run@t16,w
  5950  152E                     u4645:	
  5951  152E  1C03               	skipc
  5952  152F  2D35               	goto	l662
  5953  1530  3001               	movlw	1
  5954  1531  0020               	movlb	0	; select bank0
  5955  1532  00A2               	movwf	pid_pwm2_vout_run@__ei
  5956  1533  3000               	movlw	0
  5957  1534  00A3               	movwf	pid_pwm2_vout_run@__ei+1
  5958  1535                     l662:	
  5959                           
  5960                           ;sample.c: 370: if(t16<-16)__ei=-1;
  5961  1535  0020               	movlb	0	; select bank0
  5962  1536  0825               	movf	pid_pwm2_vout_run@t16+1,w
  5963  1537  3A80               	xorlw	128
  5964  1538  00A0               	movwf	??_pid_pwm2_vout_run
  5965  1539  307F               	movlw	127
  5966  153A  0220               	subwf	??_pid_pwm2_vout_run,w
  5967  153B  1D03               	skipz
  5968  153C  2D3F               	goto	u4655
  5969  153D  30F0               	movlw	240
  5970  153E  0224               	subwf	pid_pwm2_vout_run@t16,w
  5971  153F                     u4655:	
  5972  153F  1803               	skipnc
  5973  1540  2D46               	goto	l5139
  5974  1541  30FF               	movlw	255
  5975  1542  0020               	movlb	0	; select bank0
  5976  1543  00A2               	movwf	pid_pwm2_vout_run@__ei
  5977  1544  30FF               	movlw	255
  5978  1545  00A3               	movwf	pid_pwm2_vout_run@__ei+1
  5979  1546                     l5139:	
  5980                           
  5981                           ;sample.c: 371: };sample.c: 373: pwm2Ei=pwm2Ei+__ei;
  5982  1546  0020               	movlb	0	; select bank0
  5983  1547  0822               	movf	pid_pwm2_vout_run@__ei,w
  5984  1548  0021               	movlb	1	; select bank1
  5985  1549  0744               	addwf	_pwm2Ei^(0+128),w
  5986  154A  00C4               	movwf	_pwm2Ei^(0+128)
  5987  154B  0020               	movlb	0	; select bank0
  5988  154C  0823               	movf	pid_pwm2_vout_run@__ei+1,w
  5989  154D  0021               	movlb	1	; select bank1
  5990  154E  3D45               	addwfc	(_pwm2Ei+1)^(0+128),w
  5991  154F  00C5               	movwf	(_pwm2Ei+1)^(0+128)
  5992                           
  5993                           ;sample.c: 377: t16=voExpectAdcValue/10;
  5994  1550  300A               	movlw	10
  5995  1551  00F1               	movwf	___lwdiv@divisor
  5996  1552  3000               	movlw	0
  5997  1553  00F2               	movwf	___lwdiv@divisor+1
  5998  1554  0020               	movlb	0	; select bank0
  5999  1555  0856               	movf	_voExpectAdcValue+1,w
  6000  1556  00F4               	movwf	___lwdiv@dividend+1
  6001  1557  0855               	movf	_voExpectAdcValue,w
  6002  1558  00F3               	movwf	___lwdiv@dividend
  6003  1559  319E  2696  3195   	fcall	___lwdiv
  6004  155C  0872               	movf	?___lwdiv+1,w
  6005  155D  0020               	movlb	0	; select bank0
  6006  155E  00A5               	movwf	pid_pwm2_vout_run@t16+1
  6007  155F  0871               	movf	?___lwdiv,w
  6008  1560  00A4               	movwf	pid_pwm2_vout_run@t16
  6009                           
  6010                           ;sample.c: 379: t16=t16+pwm2Ei;
  6011  1561  0021               	movlb	1	; select bank1
  6012  1562  0844               	movf	_pwm2Ei^(0+128),w
  6013  1563  0020               	movlb	0	; select bank0
  6014  1564  0724               	addwf	pid_pwm2_vout_run@t16,w
  6015  1565  00A4               	movwf	pid_pwm2_vout_run@t16
  6016  1566  0021               	movlb	1	; select bank1
  6017  1567  0845               	movf	(_pwm2Ei+1)^(0+128),w
  6018  1568  0020               	movlb	0	; select bank0
  6019  1569  3D25               	addwfc	pid_pwm2_vout_run@t16+1,w
  6020  156A  00A5               	movwf	pid_pwm2_vout_run@t16+1
  6021                           
  6022                           ;sample.c: 380: if(t16>1580)t16=1580;
  6023  156B  0825               	movf	pid_pwm2_vout_run@t16+1,w
  6024  156C  3A80               	xorlw	128
  6025  156D  00A0               	movwf	??_pid_pwm2_vout_run
  6026  156E  3086               	movlw	134
  6027  156F  0220               	subwf	??_pid_pwm2_vout_run,w
  6028  1570  1D03               	skipz
  6029  1571  2D74               	goto	u4665
  6030  1572  302D               	movlw	45
  6031  1573  0224               	subwf	pid_pwm2_vout_run@t16,w
  6032  1574                     u4665:	
  6033  1574  1C03               	skipc
  6034  1575  2D7B               	goto	l664
  6035  1576  302C               	movlw	44
  6036  1577  0020               	movlb	0	; select bank0
  6037  1578  00A4               	movwf	pid_pwm2_vout_run@t16
  6038  1579  3006               	movlw	6
  6039  157A  00A5               	movwf	pid_pwm2_vout_run@t16+1
  6040  157B                     l664:	
  6041                           
  6042                           ;sample.c: 381: if(t16<5)t16=5;
  6043  157B  0020               	movlb	0	; select bank0
  6044  157C  0825               	movf	pid_pwm2_vout_run@t16+1,w
  6045  157D  3A80               	xorlw	128
  6046  157E  00A0               	movwf	??_pid_pwm2_vout_run
  6047  157F  3080               	movlw	128
  6048  1580  0220               	subwf	??_pid_pwm2_vout_run,w
  6049  1581  1D03               	skipz
  6050  1582  2D85               	goto	u4675
  6051  1583  3005               	movlw	5
  6052  1584  0224               	subwf	pid_pwm2_vout_run@t16,w
  6053  1585                     u4675:	
  6054  1585  1803               	skipnc
  6055  1586  2D8C               	goto	l5151
  6056  1587  3005               	movlw	5
  6057  1588  0020               	movlb	0	; select bank0
  6058  1589  00A4               	movwf	pid_pwm2_vout_run@t16
  6059  158A  3000               	movlw	0
  6060  158B  00A5               	movwf	pid_pwm2_vout_run@t16+1
  6061  158C                     l5151:	
  6062                           
  6063                           ;sample.c: 382: set_vout_pwm2_duty((uint16_t)t16);
  6064  158C  0020               	movlb	0	; select bank0
  6065  158D  0825               	movf	pid_pwm2_vout_run@t16+1,w
  6066  158E  00F8               	movwf	set_vout_pwm2_duty@duty+1
  6067  158F  0824               	movf	pid_pwm2_vout_run@t16,w
  6068  1590  00F7               	movwf	set_vout_pwm2_duty@duty
  6069  1591  319D  25D7         	fcall	_set_vout_pwm2_duty
  6070  1593  0008               	return
  6071  1594                     __end_of_pid_pwm2_vout_run:	
  6072                           
  6073                           	psect	text6
  6074  1DD7                     __ptext6:	
  6075 ;; *************** function _set_vout_pwm2_duty *****************
  6076 ;; Defined at:
  6077 ;;		line 111 in file "src/api/sample.c"
  6078 ;; Parameters:    Size  Location     Type
  6079 ;;  duty            2    7[COMMON] unsigned int 
  6080 ;; Auto vars:     Size  Location     Type
  6081 ;;  t16             2    9[COMMON] unsigned int 
  6082 ;; Return value:  Size  Location     Type
  6083 ;;                  1    wreg      void 
  6084 ;; Registers used:
  6085 ;;		wreg, status,2, pclath, cstack
  6086 ;; Tracked objects:
  6087 ;;		On entry : 0/0
  6088 ;;		On exit  : 0/0
  6089 ;;		Unchanged: 0/0
  6090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6091 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6092 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6094 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6095 ;;Total ram usage:        4 bytes
  6096 ;; Hardware stack levels used:    1
  6097 ;; Hardware stack levels required when called:    2
  6098 ;; This function calls:
  6099 ;;		_get_vout_pwm2_duty
  6100 ;; This function is called by:
  6101 ;;		_pid_pwm2_vout_run
  6102 ;; This function uses a non-reentrant model
  6103 ;;
  6104                           
  6105                           
  6106                           ;psect for function _set_vout_pwm2_duty
  6107  1DD7                     _set_vout_pwm2_duty:	
  6108                           
  6109                           ;sample.c: 114: uint16_t t16;;sample.c: 115: pwm2DutyForVout=duty;
  6110                           
  6111                           ;incstack = 0
  6112                           ; Regs used in _set_vout_pwm2_duty: [wreg+status,2+pclath+cstack]
  6113  1DD7  0878               	movf	set_vout_pwm2_duty@duty+1,w
  6114  1DD8  0021               	movlb	1	; select bank1
  6115  1DD9  00D7               	movwf	(_pwm2DutyForVout+1)^(0+128)
  6116  1DDA  0877               	movf	set_vout_pwm2_duty@duty,w
  6117  1DDB  00D6               	movwf	_pwm2DutyForVout^(0+128)
  6118                           
  6119                           ;sample.c: 116: t16=get_vout_pwm2_duty();
  6120  1DDC  319D  2550  319D   	fcall	_get_vout_pwm2_duty
  6121  1DDF  0872               	movf	?_get_vout_pwm2_duty+1,w
  6122  1DE0  00FA               	movwf	set_vout_pwm2_duty@t16+1
  6123  1DE1  0871               	movf	?_get_vout_pwm2_duty,w
  6124  1DE2  00F9               	movwf	set_vout_pwm2_duty@t16
  6125                           
  6126                           ;sample.c: 117: if(t16==duty)return;
  6127  1DE3  0878               	movf	set_vout_pwm2_duty@duty+1,w
  6128  1DE4  067A               	xorwf	set_vout_pwm2_duty@t16+1,w
  6129  1DE5  1D03               	skipz
  6130  1DE6  2DE9               	goto	u2425
  6131  1DE7  0877               	movf	set_vout_pwm2_duty@duty,w
  6132  1DE8  0679               	xorwf	set_vout_pwm2_duty@t16,w
  6133  1DE9                     u2425:	
  6134  1DE9  1903               	btfsc	3,2
  6135  1DEA  0008               	return
  6136                           
  6137                           ;sample.c: 121: PWM2CONbits.EN = 0;
  6138  1DEB  003B               	movlb	27	; select bank27
  6139  1DEC  13AB               	bcf	43,7	;volatile
  6140                           
  6141                           ;sample.c: 122: PWM2DCL= (uint8_t)(duty&0xff);
  6142  1DED  0877               	movf	set_vout_pwm2_duty@duty,w
  6143  1DEE  00A3               	movwf	35	;volatile
  6144                           
  6145                           ;sample.c: 123: PWM2DCH=(uint8_t)(duty>>8);
  6146  1DEF  0878               	movf	set_vout_pwm2_duty@duty+1,w
  6147  1DF0  00A4               	movwf	36	;volatile
  6148                           
  6149                           ;sample.c: 124: PWM2CONbits.EN = 1;
  6150  1DF1  17AB               	bsf	43,7	;volatile
  6151  1DF2  0008               	return
  6152  1DF3                     __end_of_set_vout_pwm2_duty:	
  6153                           
  6154                           	psect	text7
  6155  1D50                     __ptext7:	
  6156 ;; *************** function _get_vout_pwm2_duty *****************
  6157 ;; Defined at:
  6158 ;;		line 102 in file "src/api/sample.c"
  6159 ;; Parameters:    Size  Location     Type
  6160 ;;		None
  6161 ;; Auto vars:     Size  Location     Type
  6162 ;;  t16             2    5[COMMON] unsigned int 
  6163 ;; Return value:  Size  Location     Type
  6164 ;;                  2    1[COMMON] unsigned int 
  6165 ;; Registers used:
  6166 ;;		wreg
  6167 ;; Tracked objects:
  6168 ;;		On entry : 0/0
  6169 ;;		On exit  : 0/0
  6170 ;;		Unchanged: 0/0
  6171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6172 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6173 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6174 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6175 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6176 ;;Total ram usage:        6 bytes
  6177 ;; Hardware stack levels used:    1
  6178 ;; Hardware stack levels required when called:    1
  6179 ;; This function calls:
  6180 ;;		Nothing
  6181 ;; This function is called by:
  6182 ;;		_set_vout_pwm2_duty
  6183 ;; This function uses a non-reentrant model
  6184 ;;
  6185                           
  6186                           
  6187                           ;psect for function _get_vout_pwm2_duty
  6188  1D50                     _get_vout_pwm2_duty:	
  6189                           
  6190                           ;sample.c: 105: uint16_t t16=PWM2DCH;
  6191                           
  6192                           ;incstack = 0
  6193                           ; Regs used in _get_vout_pwm2_duty: [wreg]
  6194  1D50  003B               	movlb	27	; select bank27
  6195  1D51  0824               	movf	36,w	;volatile
  6196  1D52  00F3               	movwf	??_get_vout_pwm2_duty
  6197  1D53  01F4               	clrf	??_get_vout_pwm2_duty+1
  6198  1D54  0873               	movf	??_get_vout_pwm2_duty,w
  6199  1D55  00F5               	movwf	get_vout_pwm2_duty@t16
  6200  1D56  0874               	movf	??_get_vout_pwm2_duty+1,w
  6201  1D57  00F6               	movwf	get_vout_pwm2_duty@t16+1
  6202                           
  6203                           ;sample.c: 106: t16<<=8;
  6204  1D58  3008               	movlw	8
  6205  1D59                     u2355:	
  6206  1D59  35F5               	lslf	get_vout_pwm2_duty@t16,f
  6207  1D5A  0DF6               	rlf	get_vout_pwm2_duty@t16+1,f
  6208  1D5B  0B89               	decfsz	9,f
  6209  1D5C  2D59               	goto	u2355
  6210                           
  6211                           ;sample.c: 107: t16|=PWM2DCL;
  6212  1D5D  0823               	movf	35,w	;volatile
  6213  1D5E  00F3               	movwf	??_get_vout_pwm2_duty
  6214  1D5F  01F4               	clrf	??_get_vout_pwm2_duty+1
  6215  1D60  0873               	movf	??_get_vout_pwm2_duty,w
  6216  1D61  04F5               	iorwf	get_vout_pwm2_duty@t16,f
  6217  1D62  0874               	movf	??_get_vout_pwm2_duty+1,w
  6218  1D63  04F6               	iorwf	get_vout_pwm2_duty@t16+1,f
  6219                           
  6220                           ;sample.c: 108: return t16;
  6221  1D64  0876               	movf	get_vout_pwm2_duty@t16+1,w
  6222  1D65  00F2               	movwf	?_get_vout_pwm2_duty+1
  6223  1D66  0875               	movf	get_vout_pwm2_duty@t16,w
  6224  1D67  00F1               	movwf	?_get_vout_pwm2_duty
  6225  1D68  0008               	return
  6226  1D69                     __end_of_get_vout_pwm2_duty:	
  6227                           
  6228                           	psect	text8
  6229  1E96                     __ptext8:	
  6230 ;; *************** function ___lwdiv *****************
  6231 ;; Defined at:
  6232 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwdiv.c"
  6233 ;; Parameters:    Size  Location     Type
  6234 ;;  divisor         2    1[COMMON] unsigned int 
  6235 ;;  dividend        2    3[COMMON] unsigned int 
  6236 ;; Auto vars:     Size  Location     Type
  6237 ;;  quotient        2    6[COMMON] unsigned int 
  6238 ;;  counter         1    8[COMMON] unsigned char 
  6239 ;; Return value:  Size  Location     Type
  6240 ;;                  2    1[COMMON] unsigned int 
  6241 ;; Registers used:
  6242 ;;		wreg, status,2, status,0
  6243 ;; Tracked objects:
  6244 ;;		On entry : 0/0
  6245 ;;		On exit  : 0/0
  6246 ;;		Unchanged: 0/0
  6247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6248 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6249 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6250 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6251 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6252 ;;Total ram usage:        8 bytes
  6253 ;; Hardware stack levels used:    1
  6254 ;; Hardware stack levels required when called:    1
  6255 ;; This function calls:
  6256 ;;		Nothing
  6257 ;; This function is called by:
  6258 ;;		_pid_pwm2_vout_run
  6259 ;; This function uses a non-reentrant model
  6260 ;;
  6261                           
  6262                           
  6263                           ;psect for function ___lwdiv
  6264  1E96                     ___lwdiv:	
  6265                           
  6266                           ;incstack = 0
  6267                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6268  1E96  01F6               	clrf	___lwdiv@quotient
  6269  1E97  01F7               	clrf	___lwdiv@quotient+1
  6270  1E98  0871               	movf	___lwdiv@divisor,w
  6271  1E99  0472               	iorwf	___lwdiv@divisor+1,w
  6272  1E9A  1903               	btfsc	3,2
  6273  1E9B  2EC5               	goto	l4095
  6274  1E9C  01F8               	clrf	___lwdiv@counter
  6275  1E9D  0AF8               	incf	___lwdiv@counter,f
  6276  1E9E                     l4083:	
  6277  1E9E  1BF2               	btfsc	___lwdiv@divisor+1,7
  6278  1E9F  2EAA               	goto	l4085
  6279  1EA0  3001               	movlw	1
  6280  1EA1                     u3115:	
  6281  1EA1  35F1               	lslf	___lwdiv@divisor,f
  6282  1EA2  0DF2               	rlf	___lwdiv@divisor+1,f
  6283  1EA3  0B89               	decfsz	9,f
  6284  1EA4  2EA1               	goto	u3115
  6285  1EA5  3001               	movlw	1
  6286  1EA6  00F5               	movwf	??___lwdiv
  6287  1EA7  0875               	movf	??___lwdiv,w
  6288  1EA8  07F8               	addwf	___lwdiv@counter,f
  6289  1EA9  2E9E               	goto	l4083
  6290  1EAA                     l4085:	
  6291  1EAA  3001               	movlw	1
  6292  1EAB                     u3135:	
  6293  1EAB  35F6               	lslf	___lwdiv@quotient,f
  6294  1EAC  0DF7               	rlf	___lwdiv@quotient+1,f
  6295  1EAD  0B89               	decfsz	9,f
  6296  1EAE  2EAB               	goto	u3135
  6297  1EAF  0872               	movf	___lwdiv@divisor+1,w
  6298  1EB0  0274               	subwf	___lwdiv@dividend+1,w
  6299  1EB1  1D03               	skipz
  6300  1EB2  2EB5               	goto	u3145
  6301  1EB3  0871               	movf	___lwdiv@divisor,w
  6302  1EB4  0273               	subwf	___lwdiv@dividend,w
  6303  1EB5                     u3145:	
  6304  1EB5  1C03               	skipc
  6305  1EB6  2EBC               	goto	l4091
  6306  1EB7  0871               	movf	___lwdiv@divisor,w
  6307  1EB8  02F3               	subwf	___lwdiv@dividend,f
  6308  1EB9  0872               	movf	___lwdiv@divisor+1,w
  6309  1EBA  3BF4               	subwfb	___lwdiv@dividend+1,f
  6310  1EBB  1476               	bsf	___lwdiv@quotient,0
  6311  1EBC                     l4091:	
  6312  1EBC  3001               	movlw	1
  6313  1EBD                     u3155:	
  6314  1EBD  36F2               	lsrf	___lwdiv@divisor+1,f
  6315  1EBE  0CF1               	rrf	___lwdiv@divisor,f
  6316  1EBF  0B89               	decfsz	9,f
  6317  1EC0  2EBD               	goto	u3155
  6318  1EC1  3001               	movlw	1
  6319  1EC2  02F8               	subwf	___lwdiv@counter,f
  6320  1EC3  1D03               	btfss	3,2
  6321  1EC4  2EAA               	goto	l4085
  6322  1EC5                     l4095:	
  6323  1EC5  0877               	movf	___lwdiv@quotient+1,w
  6324  1EC6  00F2               	movwf	?___lwdiv+1
  6325  1EC7  0876               	movf	___lwdiv@quotient,w
  6326  1EC8  00F1               	movwf	?___lwdiv
  6327  1EC9  0008               	return
  6328  1ECA                     __end_of___lwdiv:	
  6329                           
  6330                           	psect	text9
  6331  1139                     __ptext9:	
  6332 ;; *************** function ___awdiv *****************
  6333 ;; Defined at:
  6334 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awdiv.c"
  6335 ;; Parameters:    Size  Location     Type
  6336 ;;  divisor         2    1[COMMON] int 
  6337 ;;  dividend        2    3[COMMON] int 
  6338 ;; Auto vars:     Size  Location     Type
  6339 ;;  quotient        2    8[COMMON] int 
  6340 ;;  sign            1    7[COMMON] unsigned char 
  6341 ;;  counter         1    6[COMMON] unsigned char 
  6342 ;; Return value:  Size  Location     Type
  6343 ;;                  2    1[COMMON] int 
  6344 ;; Registers used:
  6345 ;;		wreg, status,2, status,0
  6346 ;; Tracked objects:
  6347 ;;		On entry : 0/0
  6348 ;;		On exit  : 0/0
  6349 ;;		Unchanged: 0/0
  6350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6351 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6352 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6353 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6354 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6355 ;;Total ram usage:        9 bytes
  6356 ;; Hardware stack levels used:    1
  6357 ;; Hardware stack levels required when called:    1
  6358 ;; This function calls:
  6359 ;;		Nothing
  6360 ;; This function is called by:
  6361 ;;		_pid_pwm2_vout_run
  6362 ;; This function uses a non-reentrant model
  6363 ;;
  6364                           
  6365                           
  6366                           ;psect for function ___awdiv
  6367  1139                     ___awdiv:	
  6368                           
  6369                           ;incstack = 0
  6370                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6371  1139  01F7               	clrf	___awdiv@sign
  6372  113A  1FF2               	btfss	___awdiv@divisor+1,7
  6373  113B  2943               	goto	l4037
  6374  113C  09F1               	comf	___awdiv@divisor,f
  6375  113D  09F2               	comf	___awdiv@divisor+1,f
  6376  113E  0AF1               	incf	___awdiv@divisor,f
  6377  113F  1903               	skipnz
  6378  1140  0AF2               	incf	___awdiv@divisor+1,f
  6379  1141  01F7               	clrf	___awdiv@sign
  6380  1142  0AF7               	incf	___awdiv@sign,f
  6381  1143                     l4037:	
  6382  1143  1FF4               	btfss	___awdiv@dividend+1,7
  6383  1144  294E               	goto	l4043
  6384  1145  09F3               	comf	___awdiv@dividend,f
  6385  1146  09F4               	comf	___awdiv@dividend+1,f
  6386  1147  0AF3               	incf	___awdiv@dividend,f
  6387  1148  1903               	skipnz
  6388  1149  0AF4               	incf	___awdiv@dividend+1,f
  6389  114A  3001               	movlw	1
  6390  114B  00F5               	movwf	??___awdiv
  6391  114C  0875               	movf	??___awdiv,w
  6392  114D  06F7               	xorwf	___awdiv@sign,f
  6393  114E                     l4043:	
  6394  114E  01F8               	clrf	___awdiv@quotient
  6395  114F  01F9               	clrf	___awdiv@quotient+1
  6396  1150  0871               	movf	___awdiv@divisor,w
  6397  1151  0472               	iorwf	___awdiv@divisor+1,w
  6398  1152  1903               	btfsc	3,2
  6399  1153  297D               	goto	l4065
  6400  1154  01F6               	clrf	___awdiv@counter
  6401  1155  0AF6               	incf	___awdiv@counter,f
  6402  1156                     l4053:	
  6403  1156  1BF2               	btfsc	___awdiv@divisor+1,7
  6404  1157  2962               	goto	l4055
  6405  1158  3001               	movlw	1
  6406  1159                     u3035:	
  6407  1159  35F1               	lslf	___awdiv@divisor,f
  6408  115A  0DF2               	rlf	___awdiv@divisor+1,f
  6409  115B  0B89               	decfsz	9,f
  6410  115C  2959               	goto	u3035
  6411  115D  3001               	movlw	1
  6412  115E  00F5               	movwf	??___awdiv
  6413  115F  0875               	movf	??___awdiv,w
  6414  1160  07F6               	addwf	___awdiv@counter,f
  6415  1161  2956               	goto	l4053
  6416  1162                     l4055:	
  6417  1162  3001               	movlw	1
  6418  1163                     u3055:	
  6419  1163  35F8               	lslf	___awdiv@quotient,f
  6420  1164  0DF9               	rlf	___awdiv@quotient+1,f
  6421  1165  0B89               	decfsz	9,f
  6422  1166  2963               	goto	u3055
  6423  1167  0872               	movf	___awdiv@divisor+1,w
  6424  1168  0274               	subwf	___awdiv@dividend+1,w
  6425  1169  1D03               	skipz
  6426  116A  296D               	goto	u3065
  6427  116B  0871               	movf	___awdiv@divisor,w
  6428  116C  0273               	subwf	___awdiv@dividend,w
  6429  116D                     u3065:	
  6430  116D  1C03               	skipc
  6431  116E  2974               	goto	l4061
  6432  116F  0871               	movf	___awdiv@divisor,w
  6433  1170  02F3               	subwf	___awdiv@dividend,f
  6434  1171  0872               	movf	___awdiv@divisor+1,w
  6435  1172  3BF4               	subwfb	___awdiv@dividend+1,f
  6436  1173  1478               	bsf	___awdiv@quotient,0
  6437  1174                     l4061:	
  6438  1174  3001               	movlw	1
  6439  1175                     u3075:	
  6440  1175  36F2               	lsrf	___awdiv@divisor+1,f
  6441  1176  0CF1               	rrf	___awdiv@divisor,f
  6442  1177  0B89               	decfsz	9,f
  6443  1178  2975               	goto	u3075
  6444  1179  3001               	movlw	1
  6445  117A  02F6               	subwf	___awdiv@counter,f
  6446  117B  1D03               	btfss	3,2
  6447  117C  2962               	goto	l4055
  6448  117D                     l4065:	
  6449  117D  0877               	movf	___awdiv@sign,w
  6450  117E  1903               	btfsc	3,2
  6451  117F  2985               	goto	l4069
  6452  1180  09F8               	comf	___awdiv@quotient,f
  6453  1181  09F9               	comf	___awdiv@quotient+1,f
  6454  1182  0AF8               	incf	___awdiv@quotient,f
  6455  1183  1903               	skipnz
  6456  1184  0AF9               	incf	___awdiv@quotient+1,f
  6457  1185                     l4069:	
  6458  1185  0879               	movf	___awdiv@quotient+1,w
  6459  1186  00F2               	movwf	?___awdiv+1
  6460  1187  0878               	movf	___awdiv@quotient,w
  6461  1188  00F1               	movwf	?___awdiv
  6462  1189  0008               	return
  6463  118A                     __end_of___awdiv:	
  6464                           
  6465                           	psect	text10
  6466  0AD8                     __ptext10:	
  6467 ;; *************** function _pid_pwm1_idrv_run *****************
  6468 ;; Defined at:
  6469 ;;		line 333 in file "src/api/sample.c"
  6470 ;; Parameters:    Size  Location     Type
  6471 ;;		None
  6472 ;; Auto vars:     Size  Location     Type
  6473 ;;  t32             4   26[BANK0 ] long 
  6474 ;; Return value:  Size  Location     Type
  6475 ;;                  1    wreg      void 
  6476 ;; Registers used:
  6477 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6478 ;; Tracked objects:
  6479 ;;		On entry : 0/0
  6480 ;;		On exit  : 0/0
  6481 ;;		Unchanged: 0/0
  6482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6484 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6485 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6486 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6487 ;;Total ram usage:       12 bytes
  6488 ;; Hardware stack levels used:    1
  6489 ;; Hardware stack levels required when called:    3
  6490 ;; This function calls:
  6491 ;;		___aldiv
  6492 ;;		___lmul
  6493 ;;		_set_idrv_pwm1_duty
  6494 ;; This function is called by:
  6495 ;;		_main
  6496 ;; This function uses a non-reentrant model
  6497 ;;
  6498                           
  6499                           
  6500                           ;psect for function _pid_pwm1_idrv_run
  6501  0AD8                     _pid_pwm1_idrv_run:	
  6502                           
  6503                           ;sample.c: 337: int32_t t32;;sample.c: 338: t32=((int32_t)resRs-(int32_t)resRc);
  6504                           
  6505                           ;incstack = 0
  6506                           ; Regs used in _pid_pwm1_idrv_run: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6507  0AD8  0020               	movlb	0	; select bank0
  6508  0AD9  086E               	movf	_resRc,w
  6509  0ADA  00B2               	movwf	??_pid_pwm1_idrv_run
  6510  0ADB  086F               	movf	_resRc+1,w
  6511  0ADC  00B3               	movwf	??_pid_pwm1_idrv_run+1
  6512  0ADD  01B4               	clrf	??_pid_pwm1_idrv_run+2
  6513  0ADE  01B5               	clrf	??_pid_pwm1_idrv_run+3
  6514  0ADF  09B2               	comf	??_pid_pwm1_idrv_run,f
  6515  0AE0  09B3               	comf	??_pid_pwm1_idrv_run+1,f
  6516  0AE1  09B4               	comf	??_pid_pwm1_idrv_run+2,f
  6517  0AE2  09B5               	comf	??_pid_pwm1_idrv_run+3,f
  6518  0AE3  0AB2               	incf	??_pid_pwm1_idrv_run,f
  6519  0AE4  1903               	skipnz
  6520  0AE5  0AB3               	incf	??_pid_pwm1_idrv_run+1,f
  6521  0AE6  1903               	skipnz
  6522  0AE7  0AB4               	incf	??_pid_pwm1_idrv_run+2,f
  6523  0AE8  1903               	skipnz
  6524  0AE9  0AB5               	incf	??_pid_pwm1_idrv_run+3,f
  6525  0AEA  086C               	movf	_resRs,w
  6526  0AEB  00B6               	movwf	??_pid_pwm1_idrv_run+4
  6527  0AEC  086D               	movf	_resRs+1,w
  6528  0AED  00B7               	movwf	??_pid_pwm1_idrv_run+5
  6529  0AEE  01B8               	clrf	??_pid_pwm1_idrv_run+6
  6530  0AEF  01B9               	clrf	??_pid_pwm1_idrv_run+7
  6531  0AF0  0836               	movf	??_pid_pwm1_idrv_run+4,w
  6532  0AF1  07B2               	addwf	??_pid_pwm1_idrv_run,f
  6533  0AF2  0837               	movf	??_pid_pwm1_idrv_run+5,w
  6534  0AF3  3DB3               	addwfc	??_pid_pwm1_idrv_run+1,f
  6535  0AF4  0838               	movf	??_pid_pwm1_idrv_run+6,w
  6536  0AF5  3DB4               	addwfc	??_pid_pwm1_idrv_run+2,f
  6537  0AF6  0839               	movf	??_pid_pwm1_idrv_run+7,w
  6538  0AF7  3DB5               	addwfc	??_pid_pwm1_idrv_run+3,f
  6539  0AF8  0835               	movf	??_pid_pwm1_idrv_run+3,w
  6540  0AF9  00BD               	movwf	pid_pwm1_idrv_run@t32+3
  6541  0AFA  0834               	movf	??_pid_pwm1_idrv_run+2,w
  6542  0AFB  00BC               	movwf	pid_pwm1_idrv_run@t32+2
  6543  0AFC  0833               	movf	??_pid_pwm1_idrv_run+1,w
  6544  0AFD  00BB               	movwf	pid_pwm1_idrv_run@t32+1
  6545  0AFE  0832               	movf	??_pid_pwm1_idrv_run,w
  6546  0AFF  00BA               	movwf	pid_pwm1_idrv_run@t32
  6547                           
  6548                           ;sample.c: 339: t32=2000-t32;
  6549  0B00  30D0               	movlw	208
  6550  0B01  00B2               	movwf	??_pid_pwm1_idrv_run
  6551  0B02  3007               	movlw	7
  6552  0B03  00B3               	movwf	??_pid_pwm1_idrv_run+1
  6553  0B04  3000               	movlw	0
  6554  0B05  00B4               	movwf	??_pid_pwm1_idrv_run+2
  6555  0B06  3000               	movlw	0
  6556  0B07  00B5               	movwf	??_pid_pwm1_idrv_run+3
  6557  0B08  093A               	comf	pid_pwm1_idrv_run@t32,w
  6558  0B09  00B6               	movwf	??_pid_pwm1_idrv_run+4
  6559  0B0A  093B               	comf	pid_pwm1_idrv_run@t32+1,w
  6560  0B0B  00B7               	movwf	??_pid_pwm1_idrv_run+5
  6561  0B0C  093C               	comf	pid_pwm1_idrv_run@t32+2,w
  6562  0B0D  00B8               	movwf	??_pid_pwm1_idrv_run+6
  6563  0B0E  093D               	comf	pid_pwm1_idrv_run@t32+3,w
  6564  0B0F  00B9               	movwf	??_pid_pwm1_idrv_run+7
  6565  0B10  0AB6               	incf	??_pid_pwm1_idrv_run+4,f
  6566  0B11  1903               	skipnz
  6567  0B12  0AB7               	incf	??_pid_pwm1_idrv_run+5,f
  6568  0B13  1903               	skipnz
  6569  0B14  0AB8               	incf	??_pid_pwm1_idrv_run+6,f
  6570  0B15  1903               	skipnz
  6571  0B16  0AB9               	incf	??_pid_pwm1_idrv_run+7,f
  6572  0B17  0836               	movf	??_pid_pwm1_idrv_run+4,w
  6573  0B18  07B2               	addwf	??_pid_pwm1_idrv_run,f
  6574  0B19  0837               	movf	??_pid_pwm1_idrv_run+5,w
  6575  0B1A  3DB3               	addwfc	??_pid_pwm1_idrv_run+1,f
  6576  0B1B  0838               	movf	??_pid_pwm1_idrv_run+6,w
  6577  0B1C  3DB4               	addwfc	??_pid_pwm1_idrv_run+2,f
  6578  0B1D  0839               	movf	??_pid_pwm1_idrv_run+7,w
  6579  0B1E  3DB5               	addwfc	??_pid_pwm1_idrv_run+3,f
  6580  0B1F  0835               	movf	??_pid_pwm1_idrv_run+3,w
  6581  0B20  00BD               	movwf	pid_pwm1_idrv_run@t32+3
  6582  0B21  0834               	movf	??_pid_pwm1_idrv_run+2,w
  6583  0B22  00BC               	movwf	pid_pwm1_idrv_run@t32+2
  6584  0B23  0833               	movf	??_pid_pwm1_idrv_run+1,w
  6585  0B24  00BB               	movwf	pid_pwm1_idrv_run@t32+1
  6586  0B25  0832               	movf	??_pid_pwm1_idrv_run,w
  6587  0B26  00BA               	movwf	pid_pwm1_idrv_run@t32
  6588                           
  6589                           ;sample.c: 341: err[2]=err[1];
  6590  0B27  3004               	movlw	4
  6591  0B28  3EA0               	addlw	(low (_err| 0))& (0+255)
  6592  0B29  0086               	movwf	6
  6593  0B2A  0187               	clrf	7
  6594  0B2B  3F40               	moviw [0]fsr1
  6595  0B2C  0021               	movlb	1	; select bank1
  6596  0B2D  00A8               	movwf	(_err^(0+128)+8)
  6597  0B2E  3F41               	moviw [1]fsr1
  6598  0B2F  00A9               	movwf	((_err+1)^(0+128)+8)
  6599  0B30  3F42               	moviw [2]fsr1
  6600  0B31  00AA               	movwf	((_err+2)^(0+128)+8)
  6601  0B32  3F43               	moviw [3]fsr1
  6602  0B33  00AB               	movwf	((_err+3)^(0+128)+8)
  6603                           
  6604                           ;sample.c: 342: err[1]=err[0];
  6605  0B34  0823               	movf	(_err+3)^(0+128),w
  6606  0B35  00A7               	movwf	((_err+3)^(0+128)+4)
  6607  0B36  0822               	movf	(_err+2)^(0+128),w
  6608  0B37  00A6               	movwf	((_err+2)^(0+128)+4)
  6609  0B38  0821               	movf	(_err+1)^(0+128),w
  6610  0B39  00A5               	movwf	((_err+1)^(0+128)+4)
  6611  0B3A  0820               	movf	_err^(0+128),w
  6612  0B3B  00A4               	movwf	(_err^(0+128)+4)
  6613                           
  6614                           ;sample.c: 343: err[0]=t32;
  6615  0B3C  0020               	movlb	0	; select bank0
  6616  0B3D  083D               	movf	pid_pwm1_idrv_run@t32+3,w
  6617  0B3E  0021               	movlb	1	; select bank1
  6618  0B3F  00A3               	movwf	(_err+3)^(0+128)
  6619  0B40  0020               	movlb	0	; select bank0
  6620  0B41  083C               	movf	pid_pwm1_idrv_run@t32+2,w
  6621  0B42  0021               	movlb	1	; select bank1
  6622  0B43  00A2               	movwf	(_err+2)^(0+128)
  6623  0B44  0020               	movlb	0	; select bank0
  6624  0B45  083B               	movf	pid_pwm1_idrv_run@t32+1,w
  6625  0B46  0021               	movlb	1	; select bank1
  6626  0B47  00A1               	movwf	(_err+1)^(0+128)
  6627  0B48  0020               	movlb	0	; select bank0
  6628  0B49  083A               	movf	pid_pwm1_idrv_run@t32,w
  6629  0B4A  0021               	movlb	1	; select bank1
  6630  0B4B  00A0               	movwf	_err^(0+128)
  6631                           
  6632                           ;sample.c: 346: x0=(err[0]-err[1])*PidKp;
  6633  0B4C  0820               	movf	_err^(0+128),w
  6634  0B4D  0020               	movlb	0	; select bank0
  6635  0B4E  00B2               	movwf	??_pid_pwm1_idrv_run
  6636  0B4F  0021               	movlb	1	; select bank1
  6637  0B50  0821               	movf	(_err+1)^(0+128),w
  6638  0B51  0020               	movlb	0	; select bank0
  6639  0B52  00B3               	movwf	??_pid_pwm1_idrv_run+1
  6640  0B53  0021               	movlb	1	; select bank1
  6641  0B54  0822               	movf	(_err+2)^(0+128),w
  6642  0B55  0020               	movlb	0	; select bank0
  6643  0B56  00B4               	movwf	??_pid_pwm1_idrv_run+2
  6644  0B57  0021               	movlb	1	; select bank1
  6645  0B58  0823               	movf	(_err+3)^(0+128),w
  6646  0B59  0020               	movlb	0	; select bank0
  6647  0B5A  00B5               	movwf	??_pid_pwm1_idrv_run+3
  6648  0B5B  0021               	movlb	1	; select bank1
  6649  0B5C  0924               	comf	(_err^(0+128)+4),w
  6650  0B5D  0020               	movlb	0	; select bank0
  6651  0B5E  00B6               	movwf	??_pid_pwm1_idrv_run+4
  6652  0B5F  0021               	movlb	1	; select bank1
  6653  0B60  0925               	comf	((_err+1)^(0+128)+4),w
  6654  0B61  0020               	movlb	0	; select bank0
  6655  0B62  00B7               	movwf	??_pid_pwm1_idrv_run+5
  6656  0B63  0021               	movlb	1	; select bank1
  6657  0B64  0926               	comf	((_err+2)^(0+128)+4),w
  6658  0B65  0020               	movlb	0	; select bank0
  6659  0B66  00B8               	movwf	??_pid_pwm1_idrv_run+6
  6660  0B67  0021               	movlb	1	; select bank1
  6661  0B68  0927               	comf	((_err+3)^(0+128)+4),w
  6662  0B69  0020               	movlb	0	; select bank0
  6663  0B6A  00B9               	movwf	??_pid_pwm1_idrv_run+7
  6664  0B6B  0AB6               	incf	??_pid_pwm1_idrv_run+4,f
  6665  0B6C  1903               	skipnz
  6666  0B6D  0AB7               	incf	??_pid_pwm1_idrv_run+5,f
  6667  0B6E  1903               	skipnz
  6668  0B6F  0AB8               	incf	??_pid_pwm1_idrv_run+6,f
  6669  0B70  1903               	skipnz
  6670  0B71  0AB9               	incf	??_pid_pwm1_idrv_run+7,f
  6671  0B72  0836               	movf	??_pid_pwm1_idrv_run+4,w
  6672  0B73  07B2               	addwf	??_pid_pwm1_idrv_run,f
  6673  0B74  0837               	movf	??_pid_pwm1_idrv_run+5,w
  6674  0B75  3DB3               	addwfc	??_pid_pwm1_idrv_run+1,f
  6675  0B76  0838               	movf	??_pid_pwm1_idrv_run+6,w
  6676  0B77  3DB4               	addwfc	??_pid_pwm1_idrv_run+2,f
  6677  0B78  0839               	movf	??_pid_pwm1_idrv_run+7,w
  6678  0B79  3DB5               	addwfc	??_pid_pwm1_idrv_run+3,f
  6679  0B7A  0835               	movf	??_pid_pwm1_idrv_run+3,w
  6680  0B7B  00F4               	movwf	___lmul@multiplier+3
  6681  0B7C  0834               	movf	??_pid_pwm1_idrv_run+2,w
  6682  0B7D  00F3               	movwf	___lmul@multiplier+2
  6683  0B7E  0833               	movf	??_pid_pwm1_idrv_run+1,w
  6684  0B7F  00F2               	movwf	___lmul@multiplier+1
  6685  0B80  0832               	movf	??_pid_pwm1_idrv_run,w
  6686  0B81  00F1               	movwf	___lmul@multiplier
  6687  0B82  0021               	movlb	1	; select bank1
  6688  0B83  084C               	movf	_PidKp^(0+128),w
  6689  0B84  00F5               	movwf	___lmul@multiplicand
  6690  0B85  084D               	movf	(_PidKp+1)^(0+128),w
  6691  0B86  00F6               	movwf	___lmul@multiplicand+1
  6692  0B87  01F7               	clrf	___lmul@multiplicand+2
  6693  0B88  01F8               	clrf	___lmul@multiplicand+3
  6694  0B89  319E  2664  318A   	fcall	___lmul
  6695  0B8C  0874               	movf	?___lmul+3,w
  6696  0B8D  0020               	movlb	0	; select bank0
  6697  0B8E  00CE               	movwf	_x0+3
  6698  0B8F  0873               	movf	?___lmul+2,w
  6699  0B90  00CD               	movwf	_x0+2
  6700  0B91  0872               	movf	?___lmul+1,w
  6701  0B92  00CC               	movwf	_x0+1
  6702  0B93  0871               	movf	?___lmul,w
  6703  0B94  00CB               	movwf	_x0
  6704                           
  6705                           ;sample.c: 347: x1=PidKp*err[0]/PidTi;
  6706  0B95  0021               	movlb	1	; select bank1
  6707  0B96  084A               	movf	_PidTi^(0+128),w
  6708  0B97  0020               	movlb	0	; select bank0
  6709  0B98  00A4               	movwf	___aldiv@divisor
  6710  0B99  0021               	movlb	1	; select bank1
  6711  0B9A  084B               	movf	(_PidTi+1)^(0+128),w
  6712  0B9B  0020               	movlb	0	; select bank0
  6713  0B9C  00A5               	movwf	___aldiv@divisor+1
  6714  0B9D  01A6               	clrf	___aldiv@divisor+2
  6715  0B9E  01A7               	clrf	___aldiv@divisor+3
  6716  0B9F  0021               	movlb	1	; select bank1
  6717  0BA0  084C               	movf	_PidKp^(0+128),w
  6718  0BA1  00F1               	movwf	___lmul@multiplier
  6719  0BA2  084D               	movf	(_PidKp+1)^(0+128),w
  6720  0BA3  00F2               	movwf	___lmul@multiplier+1
  6721  0BA4  01F3               	clrf	___lmul@multiplier+2
  6722  0BA5  01F4               	clrf	___lmul@multiplier+3
  6723  0BA6  0823               	movf	(_err+3)^(0+128),w
  6724  0BA7  00F8               	movwf	___lmul@multiplicand+3
  6725  0BA8  0822               	movf	(_err+2)^(0+128),w
  6726  0BA9  00F7               	movwf	___lmul@multiplicand+2
  6727  0BAA  0821               	movf	(_err+1)^(0+128),w
  6728  0BAB  00F6               	movwf	___lmul@multiplicand+1
  6729  0BAC  0820               	movf	_err^(0+128),w
  6730  0BAD  00F5               	movwf	___lmul@multiplicand
  6731  0BAE  319E  2664  318A   	fcall	___lmul
  6732  0BB1  0874               	movf	?___lmul+3,w
  6733  0BB2  0020               	movlb	0	; select bank0
  6734  0BB3  00AB               	movwf	___aldiv@dividend+3
  6735  0BB4  0873               	movf	?___lmul+2,w
  6736  0BB5  00AA               	movwf	___aldiv@dividend+2
  6737  0BB6  0872               	movf	?___lmul+1,w
  6738  0BB7  00A9               	movwf	___aldiv@dividend+1
  6739  0BB8  0871               	movf	?___lmul,w
  6740  0BB9  00A8               	movwf	___aldiv@dividend
  6741  0BBA  3193  2363  318A   	fcall	___aldiv
  6742  0BBD  0020               	movlb	0	; select bank0
  6743  0BBE  0827               	movf	?___aldiv+3,w
  6744  0BBF  0021               	movlb	1	; select bank1
  6745  0BC0  00BF               	movwf	(_x1+3)^(0+128)
  6746  0BC1  0020               	movlb	0	; select bank0
  6747  0BC2  0826               	movf	?___aldiv+2,w
  6748  0BC3  0021               	movlb	1	; select bank1
  6749  0BC4  00BE               	movwf	(_x1+2)^(0+128)
  6750  0BC5  0020               	movlb	0	; select bank0
  6751  0BC6  0825               	movf	?___aldiv+1,w
  6752  0BC7  0021               	movlb	1	; select bank1
  6753  0BC8  00BD               	movwf	(_x1+1)^(0+128)
  6754  0BC9  0020               	movlb	0	; select bank0
  6755  0BCA  0824               	movf	?___aldiv,w
  6756  0BCB  0021               	movlb	1	; select bank1
  6757  0BCC  00BC               	movwf	_x1^(0+128)
  6758                           
  6759                           ;sample.c: 350: t32=x0+x1;
  6760  0BCD  0020               	movlb	0	; select bank0
  6761  0BCE  084B               	movf	_x0,w
  6762  0BCF  0021               	movlb	1	; select bank1
  6763  0BD0  073C               	addwf	_x1^(0+128),w
  6764  0BD1  0020               	movlb	0	; select bank0
  6765  0BD2  00B2               	movwf	??_pid_pwm1_idrv_run
  6766  0BD3  084C               	movf	_x0+1,w
  6767  0BD4  0021               	movlb	1	; select bank1
  6768  0BD5  3D3D               	addwfc	(_x1+1)^(0+128),w
  6769  0BD6  0020               	movlb	0	; select bank0
  6770  0BD7  00B3               	movwf	??_pid_pwm1_idrv_run+1
  6771  0BD8  084D               	movf	_x0+2,w
  6772  0BD9  0021               	movlb	1	; select bank1
  6773  0BDA  3D3E               	addwfc	(_x1+2)^(0+128),w
  6774  0BDB  0020               	movlb	0	; select bank0
  6775  0BDC  00B4               	movwf	??_pid_pwm1_idrv_run+2
  6776  0BDD  084E               	movf	_x0+3,w
  6777  0BDE  0021               	movlb	1	; select bank1
  6778  0BDF  3D3F               	addwfc	(_x1+3)^(0+128),w
  6779  0BE0  0020               	movlb	0	; select bank0
  6780  0BE1  00B5               	movwf	??_pid_pwm1_idrv_run+3
  6781  0BE2  0835               	movf	??_pid_pwm1_idrv_run+3,w
  6782  0BE3  00BD               	movwf	pid_pwm1_idrv_run@t32+3
  6783  0BE4  0834               	movf	??_pid_pwm1_idrv_run+2,w
  6784  0BE5  00BC               	movwf	pid_pwm1_idrv_run@t32+2
  6785  0BE6  0833               	movf	??_pid_pwm1_idrv_run+1,w
  6786  0BE7  00BB               	movwf	pid_pwm1_idrv_run@t32+1
  6787  0BE8  0832               	movf	??_pid_pwm1_idrv_run,w
  6788  0BE9  00BA               	movwf	pid_pwm1_idrv_run@t32
  6789                           
  6790                           ;sample.c: 351: t32/=10000;
  6791  0BEA  3000               	movlw	0
  6792  0BEB  00A7               	movwf	___aldiv@divisor+3
  6793  0BEC  3000               	movlw	0
  6794  0BED  00A6               	movwf	___aldiv@divisor+2
  6795  0BEE  3027               	movlw	39
  6796  0BEF  00A5               	movwf	___aldiv@divisor+1
  6797  0BF0  3010               	movlw	16
  6798  0BF1  00A4               	movwf	___aldiv@divisor
  6799  0BF2  083D               	movf	pid_pwm1_idrv_run@t32+3,w
  6800  0BF3  00AB               	movwf	___aldiv@dividend+3
  6801  0BF4  083C               	movf	pid_pwm1_idrv_run@t32+2,w
  6802  0BF5  00AA               	movwf	___aldiv@dividend+2
  6803  0BF6  083B               	movf	pid_pwm1_idrv_run@t32+1,w
  6804  0BF7  00A9               	movwf	___aldiv@dividend+1
  6805  0BF8  083A               	movf	pid_pwm1_idrv_run@t32,w
  6806  0BF9  00A8               	movwf	___aldiv@dividend
  6807  0BFA  3193  2363  318A   	fcall	___aldiv
  6808  0BFD  0020               	movlb	0	; select bank0
  6809  0BFE  0827               	movf	?___aldiv+3,w
  6810  0BFF  00BD               	movwf	pid_pwm1_idrv_run@t32+3
  6811  0C00  0826               	movf	?___aldiv+2,w
  6812  0C01  00BC               	movwf	pid_pwm1_idrv_run@t32+2
  6813  0C02  0825               	movf	?___aldiv+1,w
  6814  0C03  00BB               	movwf	pid_pwm1_idrv_run@t32+1
  6815  0C04  0824               	movf	?___aldiv,w
  6816  0C05  00BA               	movwf	pid_pwm1_idrv_run@t32
  6817                           
  6818                           ;sample.c: 352: t32+=pidU;
  6819  0C06  0021               	movlb	1	; select bank1
  6820  0C07  0850               	movf	_pidU^(0+128),w
  6821  0C08  0020               	movlb	0	; select bank0
  6822  0C09  07BA               	addwf	pid_pwm1_idrv_run@t32,f
  6823  0C0A  0021               	movlb	1	; select bank1
  6824  0C0B  0851               	movf	(_pidU+1)^(0+128),w
  6825  0C0C  0020               	movlb	0	; select bank0
  6826  0C0D  3DBB               	addwfc	pid_pwm1_idrv_run@t32+1,f
  6827  0C0E  3000               	movlw	0
  6828  0C0F  3DBC               	addwfc	pid_pwm1_idrv_run@t32+2,f
  6829  0C10  3DBD               	addwfc	pid_pwm1_idrv_run@t32+3,f
  6830                           
  6831                           ;sample.c: 354: __nop();
  6832  0C11  0000               	nop
  6833                           
  6834                           ;sample.c: 355: if(t32>1200)t32=1200;
  6835  0C12  0020               	movlb	0	; select bank0
  6836  0C13  1BBD               	btfsc	pid_pwm1_idrv_run@t32+3,7
  6837  0C14  2C29               	goto	l5121
  6838  0C15  083D               	movf	pid_pwm1_idrv_run@t32+3,w
  6839  0C16  1D03               	btfss	3,2
  6840  0C17  2C21               	goto	l5119
  6841  0C18  083C               	movf	pid_pwm1_idrv_run@t32+2,w
  6842  0C19  1D03               	btfss	3,2
  6843  0C1A  2C21               	goto	l5119
  6844  0C1B  30B1               	movlw	177
  6845  0C1C  023A               	subwf	pid_pwm1_idrv_run@t32,w
  6846  0C1D  3004               	movlw	4
  6847  0C1E  3B3B               	subwfb	pid_pwm1_idrv_run@t32+1,w
  6848  0C1F  1C03               	btfss	3,0
  6849  0C20  2C29               	goto	l5121
  6850  0C21                     l5119:	
  6851  0C21  3000               	movlw	0
  6852  0C22  00BD               	movwf	pid_pwm1_idrv_run@t32+3
  6853  0C23  3000               	movlw	0
  6854  0C24  00BC               	movwf	pid_pwm1_idrv_run@t32+2
  6855  0C25  3004               	movlw	4
  6856  0C26  00BB               	movwf	pid_pwm1_idrv_run@t32+1
  6857  0C27  30B0               	movlw	176
  6858  0C28  00BA               	movwf	pid_pwm1_idrv_run@t32
  6859  0C29                     l5121:	
  6860                           
  6861                           ;sample.c: 356: if(t32<5)t32=5;
  6862  0C29  1BBD               	btfsc	pid_pwm1_idrv_run@t32+3,7
  6863  0C2A  2C38               	goto	l5123
  6864  0C2B  083D               	movf	pid_pwm1_idrv_run@t32+3,w
  6865  0C2C  1D03               	btfss	3,2
  6866  0C2D  2C40               	goto	l657
  6867  0C2E  083C               	movf	pid_pwm1_idrv_run@t32+2,w
  6868  0C2F  1D03               	btfss	3,2
  6869  0C30  2C40               	goto	l657
  6870  0C31  083B               	movf	pid_pwm1_idrv_run@t32+1,w
  6871  0C32  1D03               	btfss	3,2
  6872  0C33  2C40               	goto	l657
  6873  0C34  3005               	movlw	5
  6874  0C35  023A               	subwf	pid_pwm1_idrv_run@t32,w
  6875  0C36  1803               	btfsc	3,0
  6876  0C37  2C40               	goto	l657
  6877  0C38                     l5123:	
  6878  0C38  3000               	movlw	0
  6879  0C39  00BD               	movwf	pid_pwm1_idrv_run@t32+3
  6880  0C3A  3000               	movlw	0
  6881  0C3B  00BC               	movwf	pid_pwm1_idrv_run@t32+2
  6882  0C3C  3000               	movlw	0
  6883  0C3D  00BB               	movwf	pid_pwm1_idrv_run@t32+1
  6884  0C3E  3005               	movlw	5
  6885  0C3F  00BA               	movwf	pid_pwm1_idrv_run@t32
  6886  0C40                     l657:	
  6887                           
  6888                           ;sample.c: 357: pidU=(uint16_t)t32;
  6889  0C40  083B               	movf	pid_pwm1_idrv_run@t32+1,w
  6890  0C41  0021               	movlb	1	; select bank1
  6891  0C42  00D1               	movwf	(_pidU+1)^(0+128)
  6892  0C43  0020               	movlb	0	; select bank0
  6893  0C44  083A               	movf	pid_pwm1_idrv_run@t32,w
  6894  0C45  0021               	movlb	1	; select bank1
  6895  0C46  00D0               	movwf	_pidU^(0+128)
  6896                           
  6897                           ;sample.c: 359: set_idrv_pwm1_duty(pidU);
  6898  0C47  0851               	movf	(_pidU+1)^(0+128),w
  6899  0C48  00F8               	movwf	set_idrv_pwm1_duty@duty+1
  6900  0C49  0850               	movf	_pidU^(0+128),w
  6901  0C4A  00F7               	movwf	set_idrv_pwm1_duty@duty
  6902  0C4B  319D  25BB         	fcall	_set_idrv_pwm1_duty
  6903  0C4D  0008               	return
  6904  0C4E                     __end_of_pid_pwm1_idrv_run:	
  6905                           
  6906                           	psect	text11
  6907  1DBB                     __ptext11:	
  6908 ;; *************** function _set_idrv_pwm1_duty *****************
  6909 ;; Defined at:
  6910 ;;		line 82 in file "src/api/sample.c"
  6911 ;; Parameters:    Size  Location     Type
  6912 ;;  duty            2    7[COMMON] unsigned int 
  6913 ;; Auto vars:     Size  Location     Type
  6914 ;;  t16             2    9[COMMON] unsigned int 
  6915 ;; Return value:  Size  Location     Type
  6916 ;;                  1    wreg      void 
  6917 ;; Registers used:
  6918 ;;		wreg, status,2, pclath, cstack
  6919 ;; Tracked objects:
  6920 ;;		On entry : 0/0
  6921 ;;		On exit  : 0/0
  6922 ;;		Unchanged: 0/0
  6923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6924 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6925 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6927 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6928 ;;Total ram usage:        4 bytes
  6929 ;; Hardware stack levels used:    1
  6930 ;; Hardware stack levels required when called:    2
  6931 ;; This function calls:
  6932 ;;		_get_idrv_pwm1_duty
  6933 ;; This function is called by:
  6934 ;;		_pid_pwm1_idrv_run
  6935 ;; This function uses a non-reentrant model
  6936 ;;
  6937                           
  6938                           
  6939                           ;psect for function _set_idrv_pwm1_duty
  6940  1DBB                     _set_idrv_pwm1_duty:	
  6941                           
  6942                           ;sample.c: 85: uint16_t t16;;sample.c: 86: pwm1DutyForIdrv=duty;
  6943                           
  6944                           ;incstack = 0
  6945                           ; Regs used in _set_idrv_pwm1_duty: [wreg+status,2+pclath+cstack]
  6946  1DBB  0878               	movf	set_idrv_pwm1_duty@duty+1,w
  6947  1DBC  0021               	movlb	1	; select bank1
  6948  1DBD  00D5               	movwf	(_pwm1DutyForIdrv+1)^(0+128)
  6949  1DBE  0877               	movf	set_idrv_pwm1_duty@duty,w
  6950  1DBF  00D4               	movwf	_pwm1DutyForIdrv^(0+128)
  6951                           
  6952                           ;sample.c: 87: t16=get_idrv_pwm1_duty();
  6953  1DC0  319D  2537  319D   	fcall	_get_idrv_pwm1_duty
  6954  1DC3  0872               	movf	?_get_idrv_pwm1_duty+1,w
  6955  1DC4  00FA               	movwf	set_idrv_pwm1_duty@t16+1
  6956  1DC5  0871               	movf	?_get_idrv_pwm1_duty,w
  6957  1DC6  00F9               	movwf	set_idrv_pwm1_duty@t16
  6958                           
  6959                           ;sample.c: 88: if(t16==duty)return;
  6960  1DC7  0878               	movf	set_idrv_pwm1_duty@duty+1,w
  6961  1DC8  067A               	xorwf	set_idrv_pwm1_duty@t16+1,w
  6962  1DC9  1D03               	skipz
  6963  1DCA  2DCD               	goto	u2415
  6964  1DCB  0877               	movf	set_idrv_pwm1_duty@duty,w
  6965  1DCC  0679               	xorwf	set_idrv_pwm1_duty@t16,w
  6966  1DCD                     u2415:	
  6967  1DCD  1903               	btfsc	3,2
  6968  1DCE  0008               	return
  6969                           
  6970                           ;sample.c: 91: PWM1CONbits.EN = 0;
  6971  1DCF  003B               	movlb	27	; select bank27
  6972  1DD0  139B               	bcf	27,7	;volatile
  6973                           
  6974                           ;sample.c: 92: PWM1DCL= (uint8_t)(duty&0xff);
  6975  1DD1  0877               	movf	set_idrv_pwm1_duty@duty,w
  6976  1DD2  0093               	movwf	19	;volatile
  6977                           
  6978                           ;sample.c: 93: PWM1DCH=(uint8_t)(duty>>8);
  6979  1DD3  0878               	movf	set_idrv_pwm1_duty@duty+1,w
  6980  1DD4  0094               	movwf	20	;volatile
  6981                           
  6982                           ;sample.c: 94: PWM1CONbits.EN = 1;
  6983  1DD5  179B               	bsf	27,7	;volatile
  6984  1DD6  0008               	return
  6985  1DD7                     __end_of_set_idrv_pwm1_duty:	
  6986                           
  6987                           	psect	text12
  6988  1D37                     __ptext12:	
  6989 ;; *************** function _get_idrv_pwm1_duty *****************
  6990 ;; Defined at:
  6991 ;;		line 73 in file "src/api/sample.c"
  6992 ;; Parameters:    Size  Location     Type
  6993 ;;		None
  6994 ;; Auto vars:     Size  Location     Type
  6995 ;;  t16             2    5[COMMON] unsigned int 
  6996 ;; Return value:  Size  Location     Type
  6997 ;;                  2    1[COMMON] unsigned int 
  6998 ;; Registers used:
  6999 ;;		wreg
  7000 ;; Tracked objects:
  7001 ;;		On entry : 0/0
  7002 ;;		On exit  : 0/0
  7003 ;;		Unchanged: 0/0
  7004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7005 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7006 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7007 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7008 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7009 ;;Total ram usage:        6 bytes
  7010 ;; Hardware stack levels used:    1
  7011 ;; Hardware stack levels required when called:    1
  7012 ;; This function calls:
  7013 ;;		Nothing
  7014 ;; This function is called by:
  7015 ;;		_set_idrv_pwm1_duty
  7016 ;; This function uses a non-reentrant model
  7017 ;;
  7018                           
  7019                           
  7020                           ;psect for function _get_idrv_pwm1_duty
  7021  1D37                     _get_idrv_pwm1_duty:	
  7022                           
  7023                           ;sample.c: 76: uint16_t t16=PWM1DCH;
  7024                           
  7025                           ;incstack = 0
  7026                           ; Regs used in _get_idrv_pwm1_duty: [wreg]
  7027  1D37  003B               	movlb	27	; select bank27
  7028  1D38  0814               	movf	20,w	;volatile
  7029  1D39  00F3               	movwf	??_get_idrv_pwm1_duty
  7030  1D3A  01F4               	clrf	??_get_idrv_pwm1_duty+1
  7031  1D3B  0873               	movf	??_get_idrv_pwm1_duty,w
  7032  1D3C  00F5               	movwf	get_idrv_pwm1_duty@t16
  7033  1D3D  0874               	movf	??_get_idrv_pwm1_duty+1,w
  7034  1D3E  00F6               	movwf	get_idrv_pwm1_duty@t16+1
  7035                           
  7036                           ;sample.c: 77: t16<<=8;
  7037  1D3F  3008               	movlw	8
  7038  1D40                     u2345:	
  7039  1D40  35F5               	lslf	get_idrv_pwm1_duty@t16,f
  7040  1D41  0DF6               	rlf	get_idrv_pwm1_duty@t16+1,f
  7041  1D42  0B89               	decfsz	9,f
  7042  1D43  2D40               	goto	u2345
  7043                           
  7044                           ;sample.c: 78: t16|=PWM1DCL;
  7045  1D44  0813               	movf	19,w	;volatile
  7046  1D45  00F3               	movwf	??_get_idrv_pwm1_duty
  7047  1D46  01F4               	clrf	??_get_idrv_pwm1_duty+1
  7048  1D47  0873               	movf	??_get_idrv_pwm1_duty,w
  7049  1D48  04F5               	iorwf	get_idrv_pwm1_duty@t16,f
  7050  1D49  0874               	movf	??_get_idrv_pwm1_duty+1,w
  7051  1D4A  04F6               	iorwf	get_idrv_pwm1_duty@t16+1,f
  7052                           
  7053                           ;sample.c: 79: return t16;
  7054  1D4B  0876               	movf	get_idrv_pwm1_duty@t16+1,w
  7055  1D4C  00F2               	movwf	?_get_idrv_pwm1_duty+1
  7056  1D4D  0875               	movf	get_idrv_pwm1_duty@t16,w
  7057  1D4E  00F1               	movwf	?_get_idrv_pwm1_duty
  7058  1D4F  0008               	return
  7059  1D50                     __end_of_get_idrv_pwm1_duty:	
  7060                           
  7061                           	psect	text13
  7062  0FAC                     __ptext13:	
  7063 ;; *************** function _modbus_response_process *****************
  7064 ;; Defined at:
  7065 ;;		line 210 in file "src/api/modbus.c"
  7066 ;; Parameters:    Size  Location     Type
  7067 ;;  rbuf            1    wreg     PTR unsigned char 
  7068 ;;		 -> modbusBuf(32), 
  7069 ;;  rlen            2   24[BANK0 ] unsigned int 
  7070 ;; Auto vars:     Size  Location     Type
  7071 ;;  rbuf            1   29[BANK0 ] PTR unsigned char 
  7072 ;;		 -> modbusBuf(32), 
  7073 ;;  pmdbs           1   28[BANK0 ] PTR struct .
  7074 ;;		 -> modbusBuf(32), 
  7075 ;;  resp            1   27[BANK0 ] unsigned char 
  7076 ;; Return value:  Size  Location     Type
  7077 ;;                  1    wreg      void 
  7078 ;; Registers used:
  7079 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7080 ;; Tracked objects:
  7081 ;;		On entry : 0/0
  7082 ;;		On exit  : 0/0
  7083 ;;		Unchanged: 0/0
  7084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7085 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7086 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7087 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7088 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7089 ;;Total ram usage:        6 bytes
  7090 ;; Hardware stack levels used:    1
  7091 ;; Hardware stack levels required when called:    5
  7092 ;; This function calls:
  7093 ;;		_crc_verify
  7094 ;;		_modbus_response_command
  7095 ;;		_modbus_response_illgeal_function
  7096 ;;		_modbus_response_write_mult_register
  7097 ;;		_modbus_response_write_single_register
  7098 ;; This function is called by:
  7099 ;;		_main
  7100 ;; This function uses a non-reentrant model
  7101 ;;
  7102                           
  7103                           
  7104                           ;psect for function _modbus_response_process
  7105  0FAC                     _modbus_response_process:	
  7106                           
  7107                           ;incstack = 0
  7108                           ; Regs used in _modbus_response_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7109                           ;modbus_response_process@rbuf stored from wreg
  7110  0FAC  0020               	movlb	0	; select bank0
  7111  0FAD  00BD               	movwf	modbus_response_process@rbuf
  7112                           
  7113                           ;modbus.c: 211: uint8_t resp=0;
  7114  0FAE  01BB               	clrf	modbus_response_process@resp
  7115                           
  7116                           ;modbus.c: 212: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)rbuf;
  7117  0FAF  083D               	movf	modbus_response_process@rbuf,w
  7118  0FB0  00BA               	movwf	??_modbus_response_process
  7119  0FB1  083A               	movf	??_modbus_response_process,w
  7120  0FB2  00BC               	movwf	modbus_response_process@pmdbs
  7121                           
  7122                           ;modbus.c: 215: if((pmdbs->addr!=sysData.id) && (pmdbs->addr!=0x00))return;
  7123  0FB3  305C               	movlw	92
  7124  0FB4  0086               	movwf	6
  7125  0FB5  3023               	movlw	35
  7126  0FB6  0087               	movwf	7
  7127  0FB7  3142               	addfsr 1,2
  7128  0FB8  083C               	movf	modbus_response_process@pmdbs,w
  7129  0FB9  0084               	movwf	4
  7130  0FBA  3001               	movlw	1	; select bank2/3
  7131  0FBB  0085               	movwf	5
  7132  0FBC  0800               	movf	0,w
  7133  0FBD  0601               	xorwf	1,w
  7134  0FBE  1903               	skipnz
  7135  0FBF  2FC7               	goto	l5247
  7136  0FC0  083C               	movf	modbus_response_process@pmdbs,w
  7137  0FC1  0086               	movwf	6
  7138  0FC2  3001               	movlw	1	; select bank2/3
  7139  0FC3  0087               	movwf	7
  7140  0FC4  0801               	movf	1,w
  7141  0FC5  1D03               	btfss	3,2
  7142  0FC6  0008               	return
  7143  0FC7                     l5247:	
  7144                           
  7145                           ;modbus.c: 216: if(!(crc_verify(rbuf,rlen)))return ;
  7146  0FC7  083D               	movf	modbus_response_process@rbuf,w
  7147  0FC8  00A6               	movwf	crc_verify@message
  7148  0FC9  3001               	movlw	1
  7149  0FCA  00A7               	movwf	crc_verify@message+1
  7150  0FCB  0839               	movf	modbus_response_process@rlen+1,w
  7151  0FCC  00A9               	movwf	crc_verify@n+1
  7152  0FCD  0838               	movf	modbus_response_process@rlen,w
  7153  0FCE  00A8               	movwf	crc_verify@n
  7154  0FCF  3190  200E  318F   	fcall	_crc_verify
  7155  0FD2  3A00               	xorlw	0
  7156  0FD3  1903               	btfsc	3,2
  7157  0FD4  0008               	return
  7158  0FD5  2FEC               	goto	l5261
  7159  0FD6                     l5251:	
  7160                           ;modbus.c: 219: case 0x03:
  7161                           
  7162                           ;modbus.c: 218: switch(pmdbs->func){
  7163                           
  7164                           
  7165                           ;modbus.c: 220: modbus_response_command(rbuf);
  7166  0FD6  0020               	movlb	0	; select bank0
  7167  0FD7  083D               	movf	modbus_response_process@rbuf,w
  7168  0FD8  3195  2594         	fcall	_modbus_response_command
  7169                           
  7170                           ;modbus.c: 221: break;
  7171  0FDA  0008               	return
  7172  0FDB                     l5253:	
  7173                           ;modbus.c: 222: case 0x06:
  7174                           
  7175                           
  7176                           ;modbus.c: 223: case 0x26:;modbus.c: 224: modbus_response_write_single_register(rbuf);
  7177  0FDB  0020               	movlb	0	; select bank0
  7178  0FDC  083D               	movf	modbus_response_process@rbuf,w
  7179  0FDD  318C  244E         	fcall	_modbus_response_write_single_register
  7180                           
  7181                           ;modbus.c: 225: break;
  7182  0FDF  0008               	return
  7183  0FE0                     l5255:	
  7184                           ;modbus.c: 226: case 0x10:
  7185                           
  7186                           
  7187                           ;modbus.c: 227: modbus_response_write_mult_register(rbuf);
  7188  0FE0  0020               	movlb	0	; select bank0
  7189  0FE1  083D               	movf	modbus_response_process@rbuf,w
  7190  0FE2  3192  22F1         	fcall	_modbus_response_write_mult_register
  7191                           
  7192                           ;modbus.c: 228: break;
  7193  0FE4  0008               	return
  7194  0FE5                     l5257:	
  7195                           ;modbus.c: 251: default:
  7196                           
  7197                           
  7198                           ;modbus.c: 252: modbus_response_illgeal_function(rbuf,0x01);break;
  7199  0FE5  0020               	movlb	0	; select bank0
  7200  0FE6  01AC               	clrf	modbus_response_illgeal_function@errcode
  7201  0FE7  0AAC               	incf	modbus_response_illgeal_function@errcode,f
  7202  0FE8  083D               	movf	modbus_response_process@rbuf,w
  7203  0FE9  3190  20F7         	fcall	_modbus_response_illgeal_function
  7204                           
  7205                           ;modbus.c: 253: }
  7206  0FEB  0008               	return
  7207  0FEC                     l5261:	
  7208  0FEC  0020               	movlb	0	; select bank0
  7209  0FED  0A3C               	incf	modbus_response_process@pmdbs,w
  7210  0FEE  0086               	movwf	6
  7211  0FEF  3001               	movlw	1	; select bank2/3
  7212  0FF0  0087               	movwf	7
  7213  0FF1  0801               	movf	1,w
  7214                           
  7215                           ; Switch size 1, requested type "space"
  7216                           ; Number of cases is 4, Range of values is 3 to 38
  7217                           ; switch strategies available:
  7218                           ; Name         Instructions Cycles
  7219                           ; simple_byte           13     7 (average)
  7220                           ; direct_byte           81     9 (fixed)
  7221                           ; jumptable            263     9 (fixed)
  7222                           ;	Chosen strategy is simple_byte
  7223  0FF2  3A03               	xorlw	3	; case 3
  7224  0FF3  1903               	skipnz
  7225  0FF4  2FD6               	goto	l5251
  7226  0FF5  3A05               	xorlw	5	; case 6
  7227  0FF6  1903               	skipnz
  7228  0FF7  2FDB               	goto	l5253
  7229  0FF8  3A16               	xorlw	22	; case 16
  7230  0FF9  1903               	skipnz
  7231  0FFA  2FE0               	goto	l5255
  7232  0FFB  3A36               	xorlw	54	; case 38
  7233  0FFC  1903               	skipnz
  7234  0FFD  2FDB               	goto	l5253
  7235  0FFE  2FE5               	goto	l5257
  7236  0FFF  0008               	return
  7237  1000                     __end_of_modbus_response_process:	
  7238                           
  7239                           	psect	text14
  7240  0C4E                     __ptext14:	
  7241 ;; *************** function _modbus_response_write_single_register *****************
  7242 ;; Defined at:
  7243 ;;		line 115 in file "src/api/modbus.c"
  7244 ;; Parameters:    Size  Location     Type
  7245 ;;  rbuf            1    wreg     PTR unsigned char 
  7246 ;;		 -> modbusBuf(32), 
  7247 ;; Auto vars:     Size  Location     Type
  7248 ;;  rbuf            1   21[BANK0 ] PTR unsigned char 
  7249 ;;		 -> modbusBuf(32), 
  7250 ;;  startAddr       2   22[BANK0 ] unsigned int 
  7251 ;;  t16             2   17[BANK0 ] unsigned int 
  7252 ;;  pmdbs           1   20[BANK0 ] PTR struct .
  7253 ;;		 -> modbusBuf(32), 
  7254 ;;  i               1   19[BANK0 ] unsigned char 
  7255 ;;  fiSave          1   16[BANK0 ] unsigned char 
  7256 ;; Return value:  Size  Location     Type
  7257 ;;                  1    wreg      void 
  7258 ;; Registers used:
  7259 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7260 ;; Tracked objects:
  7261 ;;		On entry : 0/0
  7262 ;;		On exit  : 0/0
  7263 ;;		Unchanged: 0/0
  7264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7266 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7267 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7268 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7269 ;;Total ram usage:       12 bytes
  7270 ;; Hardware stack levels used:    1
  7271 ;; Hardware stack levels required when called:    4
  7272 ;; This function calls:
  7273 ;;		_crc_append
  7274 ;;		_sys_data_save
  7275 ;;		_uart_send_len
  7276 ;; This function is called by:
  7277 ;;		_modbus_response_process
  7278 ;; This function uses a non-reentrant model
  7279 ;;
  7280                           
  7281                           
  7282                           ;psect for function _modbus_response_write_single_register
  7283  0C4E                     _modbus_response_write_single_register:	
  7284                           
  7285                           ;incstack = 0
  7286                           ; Regs used in _modbus_response_write_single_register: [wreg-fsr1h+status,2+status,0+pcl
      +                          ath+cstack]
  7287                           ;modbus_response_write_single_register@rbuf stored from wreg
  7288  0C4E  0020               	movlb	0	; select bank0
  7289  0C4F  00B5               	movwf	modbus_response_write_single_register@rbuf
  7290                           
  7291                           ;modbus.c: 117: uint16_t startAddr=0;
  7292  0C50  01B6               	clrf	modbus_response_write_single_register@startAddr
  7293  0C51  01B7               	clrf	modbus_response_write_single_register@startAddr+1
  7294                           
  7295                           ;modbus.c: 118: uint16_t t16;;modbus.c: 119: uint8_t fiSave=0,i;
  7296  0C52  01B0               	clrf	modbus_response_write_single_register@fiSave
  7297                           
  7298                           ;modbus.c: 120: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)rbuf;
  7299  0C53  0835               	movf	modbus_response_write_single_register@rbuf,w
  7300  0C54  00AC               	movwf	??_modbus_response_write_single_register
  7301  0C55  082C               	movf	??_modbus_response_write_single_register,w
  7302  0C56  00B4               	movwf	modbus_response_write_single_register@pmdbs
  7303                           
  7304                           ;modbus.c: 121: if(pmdbs->addr!=sysData.id && pmdbs->addr!=0)return;
  7305  0C57  305C               	movlw	92
  7306  0C58  0086               	movwf	6
  7307  0C59  3023               	movlw	35
  7308  0C5A  0087               	movwf	7
  7309  0C5B  3142               	addfsr 1,2
  7310  0C5C  0834               	movf	modbus_response_write_single_register@pmdbs,w
  7311  0C5D  0084               	movwf	4
  7312  0C5E  3001               	movlw	1	; select bank2/3
  7313  0C5F  0085               	movwf	5
  7314  0C60  0800               	movf	0,w
  7315  0C61  0601               	xorwf	1,w
  7316  0C62  1903               	skipnz
  7317  0C63  2C6B               	goto	l4865
  7318  0C64  0834               	movf	modbus_response_write_single_register@pmdbs,w
  7319  0C65  0086               	movwf	6
  7320  0C66  3001               	movlw	1	; select bank2/3
  7321  0C67  0087               	movwf	7
  7322  0C68  0801               	movf	1,w
  7323  0C69  1D03               	btfss	3,2
  7324  0C6A  0008               	return
  7325  0C6B                     l4865:	
  7326                           
  7327                           ;modbus.c: 122: if(sysData.id==253 && pmdbs->addr==0)return;
  7328  0C6B  305C               	movlw	92
  7329  0C6C  0086               	movwf	6
  7330  0C6D  3023               	movlw	35
  7331  0C6E  0087               	movwf	7
  7332  0C6F  3142               	addfsr 1,2
  7333  0C70  30FD               	movlw	253
  7334  0C71  0601               	xorwf	1,w
  7335  0C72  1D03               	btfss	3,2
  7336  0C73  2C7B               	goto	l4871
  7337  0C74  0834               	movf	modbus_response_write_single_register@pmdbs,w
  7338  0C75  0086               	movwf	6
  7339  0C76  3001               	movlw	1	; select bank2/3
  7340  0C77  0087               	movwf	7
  7341  0C78  0801               	movf	1,w
  7342  0C79  1903               	btfsc	3,2
  7343  0C7A  0008               	return
  7344  0C7B                     l4871:	
  7345                           
  7346                           ;modbus.c: 123: startAddr=pmdbs->addr_hi;
  7347  0C7B  0834               	movf	modbus_response_write_single_register@pmdbs,w
  7348  0C7C  3E02               	addlw	2
  7349  0C7D  0086               	movwf	6
  7350  0C7E  3001               	movlw	1	; select bank2/3
  7351  0C7F  0087               	movwf	7
  7352  0C80  0801               	movf	1,w
  7353  0C81  00AC               	movwf	??_modbus_response_write_single_register
  7354  0C82  01AD               	clrf	??_modbus_response_write_single_register+1
  7355  0C83  082C               	movf	??_modbus_response_write_single_register,w
  7356  0C84  00B6               	movwf	modbus_response_write_single_register@startAddr
  7357  0C85  082D               	movf	??_modbus_response_write_single_register+1,w
  7358  0C86  00B7               	movwf	modbus_response_write_single_register@startAddr+1
  7359                           
  7360                           ;modbus.c: 124: startAddr<<=8;
  7361  0C87  3008               	movlw	8
  7362  0C88                     u4225:	
  7363  0C88  35B6               	lslf	modbus_response_write_single_register@startAddr,f
  7364  0C89  0DB7               	rlf	modbus_response_write_single_register@startAddr+1,f
  7365  0C8A  0B89               	decfsz	9,f
  7366  0C8B  2C88               	goto	u4225
  7367                           
  7368                           ;modbus.c: 125: startAddr |= pmdbs->addr_lo;
  7369  0C8C  0834               	movf	modbus_response_write_single_register@pmdbs,w
  7370  0C8D  3E03               	addlw	3
  7371  0C8E  0086               	movwf	6
  7372  0C8F  3001               	movlw	1	; select bank2/3
  7373  0C90  0087               	movwf	7
  7374  0C91  0801               	movf	1,w
  7375  0C92  00AC               	movwf	??_modbus_response_write_single_register
  7376  0C93  01AD               	clrf	??_modbus_response_write_single_register+1
  7377  0C94  082C               	movf	??_modbus_response_write_single_register,w
  7378  0C95  04B6               	iorwf	modbus_response_write_single_register@startAddr,f
  7379  0C96  082D               	movf	??_modbus_response_write_single_register+1,w
  7380  0C97  04B7               	iorwf	modbus_response_write_single_register@startAddr+1,f
  7381                           
  7382                           ;modbus.c: 126: startAddr = startAddr & 0xff;
  7383  0C98  30FF               	movlw	255
  7384  0C99  0536               	andwf	modbus_response_write_single_register@startAddr,w
  7385  0C9A  00B6               	movwf	modbus_response_write_single_register@startAddr
  7386  0C9B  3000               	movlw	0
  7387  0C9C  0537               	andwf	modbus_response_write_single_register@startAddr+1,w
  7388  0C9D  00B7               	movwf	modbus_response_write_single_register@startAddr+1
  7389                           
  7390                           ;modbus.c: 127: if(startAddr==0x02){
  7391  0C9E  3002               	movlw	2
  7392  0C9F  0636               	xorwf	modbus_response_write_single_register@startAddr,w
  7393  0CA0  0437               	iorwf	modbus_response_write_single_register@startAddr+1,w
  7394  0CA1  1D03               	btfss	3,2
  7395  0CA2  2CB1               	goto	l4883
  7396                           
  7397                           ;modbus.c: 128: sysData.id=rbuf[5];
  7398  0CA3  0835               	movf	modbus_response_write_single_register@rbuf,w
  7399  0CA4  3E05               	addlw	5
  7400  0CA5  0086               	movwf	6
  7401  0CA6  3001               	movlw	1	; select bank2/3
  7402  0CA7  0087               	movwf	7
  7403  0CA8  0801               	movf	1,w
  7404  0CA9  00AC               	movwf	??_modbus_response_write_single_register
  7405  0CAA  305E               	movlw	94
  7406  0CAB  0086               	movwf	6
  7407  0CAC  3023               	movlw	35
  7408  0CAD  0087               	movwf	7
  7409  0CAE  082C               	movf	??_modbus_response_write_single_register,w
  7410  0CAF  0081               	movwf	1
  7411  0CB0  2D71               	goto	l822
  7412  0CB1                     l4883:	
  7413                           ;modbus.c: 130: }else if(startAddr==0x03){
  7414                           
  7415                           ;modbus.c: 129: fiSave=1;
  7416                           
  7417  0CB1  3003               	movlw	3
  7418  0CB2  0636               	xorwf	modbus_response_write_single_register@startAddr,w
  7419  0CB3  0437               	iorwf	modbus_response_write_single_register@startAddr+1,w
  7420  0CB4  1D03               	btfss	3,2
  7421  0CB5  2CCF               	goto	l4891
  7422                           
  7423                           ;modbus.c: 131: sysData.pidSetFlg1=rbuf[4];
  7424  0CB6  0835               	movf	modbus_response_write_single_register@rbuf,w
  7425  0CB7  3E04               	addlw	4
  7426  0CB8  0086               	movwf	6
  7427  0CB9  3001               	movlw	1	; select bank2/3
  7428  0CBA  0087               	movwf	7
  7429  0CBB  0801               	movf	1,w
  7430  0CBC  00AC               	movwf	??_modbus_response_write_single_register
  7431  0CBD  305D               	movlw	93
  7432  0CBE  0086               	movwf	6
  7433  0CBF  3023               	movlw	35
  7434  0CC0  0087               	movwf	7
  7435  0CC1  082C               	movf	??_modbus_response_write_single_register,w
  7436  0CC2  0081               	movwf	1
  7437                           
  7438                           ;modbus.c: 132: sysData.pidSetFlg0=rbuf[5];
  7439  0CC3  305C               	movlw	92
  7440  0CC4  0086               	movwf	6
  7441  0CC5  3023               	movlw	35
  7442  0CC6  0087               	movwf	7
  7443  0CC7  0835               	movf	modbus_response_write_single_register@rbuf,w
  7444  0CC8  3E05               	addlw	5
  7445  0CC9  0084               	movwf	4
  7446  0CCA  3001               	movlw	1	; select bank2/3
  7447  0CCB  0085               	movwf	5
  7448  0CCC  0800               	movf	0,w
  7449  0CCD  3FC0               	movwi [0]fsr1
  7450  0CCE  2D71               	goto	l822
  7451  0CCF                     l4891:	
  7452                           ;modbus.c: 134: }else if(startAddr>0x0f && startAddr < 0x10+30*2){
  7453                           
  7454                           ;modbus.c: 133: fiSave=1;
  7455                           
  7456  0CCF  3000               	movlw	0
  7457  0CD0  0237               	subwf	modbus_response_write_single_register@startAddr+1,w
  7458  0CD1  3010               	movlw	16
  7459  0CD2  1903               	skipnz
  7460  0CD3  0236               	subwf	modbus_response_write_single_register@startAddr,w
  7461  0CD4  1C03               	skipc
  7462  0CD5  0008               	return
  7463  0CD6  3000               	movlw	0
  7464  0CD7  0237               	subwf	modbus_response_write_single_register@startAddr+1,w
  7465  0CD8  304C               	movlw	76
  7466  0CD9  1903               	skipnz
  7467  0CDA  0236               	subwf	modbus_response_write_single_register@startAddr,w
  7468  0CDB  1803               	skipnc
  7469  0CDC  0008               	return
  7470                           
  7471                           ;modbus.c: 135: startAddr-=0x10;
  7472  0CDD  3010               	movlw	16
  7473  0CDE  02B6               	subwf	modbus_response_write_single_register@startAddr,f
  7474  0CDF  3000               	movlw	0
  7475  0CE0  3BB7               	subwfb	modbus_response_write_single_register@startAddr+1,f
  7476                           
  7477                           ;modbus.c: 136: if(startAddr & 0x01){
  7478  0CE1  1C36               	btfss	modbus_response_write_single_register@startAddr,0
  7479  0CE2  2D73               	goto	l4923
  7480                           
  7481                           ;modbus.c: 137: t16=rbuf[4];
  7482  0CE3  0835               	movf	modbus_response_write_single_register@rbuf,w
  7483  0CE4  3E04               	addlw	4
  7484  0CE5  0086               	movwf	6
  7485  0CE6  3001               	movlw	1	; select bank2/3
  7486  0CE7  0087               	movwf	7
  7487  0CE8  0801               	movf	1,w
  7488  0CE9  00AC               	movwf	??_modbus_response_write_single_register
  7489  0CEA  01AD               	clrf	??_modbus_response_write_single_register+1
  7490  0CEB  082C               	movf	??_modbus_response_write_single_register,w
  7491  0CEC  00B1               	movwf	modbus_response_write_single_register@t16
  7492  0CED  082D               	movf	??_modbus_response_write_single_register+1,w
  7493  0CEE  00B2               	movwf	modbus_response_write_single_register@t16+1
  7494                           
  7495                           ;modbus.c: 138: t16<<=8;
  7496  0CEF  3008               	movlw	8
  7497  0CF0                     u4285:	
  7498  0CF0  35B1               	lslf	modbus_response_write_single_register@t16,f
  7499  0CF1  0DB2               	rlf	modbus_response_write_single_register@t16+1,f
  7500  0CF2  0B89               	decfsz	9,f
  7501  0CF3  2CF0               	goto	u4285
  7502                           
  7503                           ;modbus.c: 139: t16 |= rbuf[5];
  7504  0CF4  0835               	movf	modbus_response_write_single_register@rbuf,w
  7505  0CF5  3E05               	addlw	5
  7506  0CF6  0086               	movwf	6
  7507  0CF7  3001               	movlw	1	; select bank2/3
  7508  0CF8  0087               	movwf	7
  7509  0CF9  0801               	movf	1,w
  7510  0CFA  00AC               	movwf	??_modbus_response_write_single_register
  7511  0CFB  01AD               	clrf	??_modbus_response_write_single_register+1
  7512  0CFC  082C               	movf	??_modbus_response_write_single_register,w
  7513  0CFD  04B1               	iorwf	modbus_response_write_single_register@t16,f
  7514  0CFE  082D               	movf	??_modbus_response_write_single_register+1,w
  7515  0CFF  04B2               	iorwf	modbus_response_write_single_register@t16+1,f
  7516                           
  7517                           ;modbus.c: 140: sysData.calibVoMV[startAddr>>1]=t16;
  7518  0D00  0837               	movf	modbus_response_write_single_register@startAddr+1,w
  7519  0D01  00AD               	movwf	??_modbus_response_write_single_register+1
  7520  0D02  0836               	movf	modbus_response_write_single_register@startAddr,w
  7521  0D03  00AC               	movwf	??_modbus_response_write_single_register
  7522  0D04  36AD               	lsrf	??_modbus_response_write_single_register+1,f
  7523  0D05  0CAC               	rrf	??_modbus_response_write_single_register,f
  7524  0D06  35AC               	lslf	??_modbus_response_write_single_register,f
  7525  0D07  0DAD               	rlf	??_modbus_response_write_single_register+1,f
  7526  0D08  30A2               	movlw	162
  7527  0D09  00AE               	movwf	??_modbus_response_write_single_register+2
  7528  0D0A  3023               	movlw	35
  7529  0D0B  00AF               	movwf	??_modbus_response_write_single_register+3
  7530  0D0C  082C               	movf	??_modbus_response_write_single_register,w
  7531  0D0D  072E               	addwf	??_modbus_response_write_single_register+2,w
  7532  0D0E  0086               	movwf	6
  7533  0D0F  082D               	movf	??_modbus_response_write_single_register+1,w
  7534  0D10  3D2F               	addwfc	??_modbus_response_write_single_register+3,w
  7535  0D11  0087               	movwf	7
  7536  0D12  0831               	movf	modbus_response_write_single_register@t16,w
  7537  0D13  3FC0               	movwi [0]fsr1
  7538  0D14  0832               	movf	modbus_response_write_single_register@t16+1,w
  7539  0D15  3FC1               	movwi [1]fsr1
  7540                           
  7541                           ;modbus.c: 141: sysData.calibRsAdc[startAddr>>1]=rsLoAvg;
  7542  0D16  0837               	movf	modbus_response_write_single_register@startAddr+1,w
  7543  0D17  00AD               	movwf	??_modbus_response_write_single_register+1
  7544  0D18  0836               	movf	modbus_response_write_single_register@startAddr,w
  7545  0D19  00AC               	movwf	??_modbus_response_write_single_register
  7546  0D1A  36AD               	lsrf	??_modbus_response_write_single_register+1,f
  7547  0D1B  0CAC               	rrf	??_modbus_response_write_single_register,f
  7548  0D1C  35AC               	lslf	??_modbus_response_write_single_register,f
  7549  0D1D  0DAD               	rlf	??_modbus_response_write_single_register+1,f
  7550  0D1E  3066               	movlw	102
  7551  0D1F  00AE               	movwf	??_modbus_response_write_single_register+2
  7552  0D20  3023               	movlw	35
  7553  0D21  00AF               	movwf	??_modbus_response_write_single_register+3
  7554  0D22  082C               	movf	??_modbus_response_write_single_register,w
  7555  0D23  072E               	addwf	??_modbus_response_write_single_register+2,w
  7556  0D24  0086               	movwf	6
  7557  0D25  082D               	movf	??_modbus_response_write_single_register+1,w
  7558  0D26  3D2F               	addwfc	??_modbus_response_write_single_register+3,w
  7559  0D27  0087               	movwf	7
  7560  0D28  0853               	movf	_rsLoAvg,w
  7561  0D29  3FC0               	movwi [0]fsr1
  7562  0D2A  0854               	movf	_rsLoAvg+1,w
  7563  0D2B  3FC1               	movwi [1]fsr1
  7564                           
  7565                           ;modbus.c: 143: if(rbuf[1]==0x26){
  7566  0D2C  0A35               	incf	modbus_response_write_single_register@rbuf,w
  7567  0D2D  0086               	movwf	6
  7568  0D2E  3001               	movlw	1	; select bank2/3
  7569  0D2F  0087               	movwf	7
  7570  0D30  3026               	movlw	38
  7571  0D31  0601               	xorwf	1,w
  7572  0D32  1D03               	btfss	3,2
  7573  0D33  2D71               	goto	l822
  7574                           
  7575                           ;modbus.c: 144: for(i=(startAddr>>1)+1;i<30;i++){
  7576  0D34  0837               	movf	modbus_response_write_single_register@startAddr+1,w
  7577  0D35  00AD               	movwf	??_modbus_response_write_single_register+1
  7578  0D36  0836               	movf	modbus_response_write_single_register@startAddr,w
  7579  0D37  00AC               	movwf	??_modbus_response_write_single_register
  7580  0D38  36AD               	lsrf	??_modbus_response_write_single_register+1,f
  7581  0D39  0CAC               	rrf	??_modbus_response_write_single_register,f
  7582  0D3A  082C               	movf	??_modbus_response_write_single_register,w
  7583  0D3B  3E01               	addlw	1
  7584  0D3C  00AE               	movwf	??_modbus_response_write_single_register+2
  7585  0D3D  082E               	movf	??_modbus_response_write_single_register+2,w
  7586  0D3E  00B3               	movwf	modbus_response_write_single_register@i
  7587  0D3F  301E               	movlw	30
  7588  0D40  0233               	subwf	modbus_response_write_single_register@i,w
  7589  0D41  1803               	btfsc	3,0
  7590  0D42  2D71               	goto	l822
  7591  0D43                     l4917:	
  7592                           
  7593                           ;modbus.c: 145: sysData.calibVoMV[i]=t16;
  7594  0D43  0833               	movf	modbus_response_write_single_register@i,w
  7595  0D44  00AC               	movwf	??_modbus_response_write_single_register
  7596  0D45  01AD               	clrf	??_modbus_response_write_single_register+1
  7597  0D46  35AC               	lslf	??_modbus_response_write_single_register,f
  7598  0D47  0DAD               	rlf	??_modbus_response_write_single_register+1,f
  7599  0D48  30A2               	movlw	162
  7600  0D49  00AE               	movwf	??_modbus_response_write_single_register+2
  7601  0D4A  3023               	movlw	35
  7602  0D4B  00AF               	movwf	??_modbus_response_write_single_register+3
  7603  0D4C  082C               	movf	??_modbus_response_write_single_register,w
  7604  0D4D  072E               	addwf	??_modbus_response_write_single_register+2,w
  7605  0D4E  0086               	movwf	6
  7606  0D4F  082D               	movf	??_modbus_response_write_single_register+1,w
  7607  0D50  3D2F               	addwfc	??_modbus_response_write_single_register+3,w
  7608  0D51  0087               	movwf	7
  7609  0D52  0831               	movf	modbus_response_write_single_register@t16,w
  7610  0D53  3FC0               	movwi [0]fsr1
  7611  0D54  0832               	movf	modbus_response_write_single_register@t16+1,w
  7612  0D55  3FC1               	movwi [1]fsr1
  7613                           
  7614                           ;modbus.c: 146: sysData.calibRsAdc[i]=rsLoAvg;
  7615  0D56  0833               	movf	modbus_response_write_single_register@i,w
  7616  0D57  00AC               	movwf	??_modbus_response_write_single_register
  7617  0D58  01AD               	clrf	??_modbus_response_write_single_register+1
  7618  0D59  35AC               	lslf	??_modbus_response_write_single_register,f
  7619  0D5A  0DAD               	rlf	??_modbus_response_write_single_register+1,f
  7620  0D5B  3066               	movlw	102
  7621  0D5C  00AE               	movwf	??_modbus_response_write_single_register+2
  7622  0D5D  3023               	movlw	35
  7623  0D5E  00AF               	movwf	??_modbus_response_write_single_register+3
  7624  0D5F  082C               	movf	??_modbus_response_write_single_register,w
  7625  0D60  072E               	addwf	??_modbus_response_write_single_register+2,w
  7626  0D61  0086               	movwf	6
  7627  0D62  082D               	movf	??_modbus_response_write_single_register+1,w
  7628  0D63  3D2F               	addwfc	??_modbus_response_write_single_register+3,w
  7629  0D64  0087               	movwf	7
  7630  0D65  0853               	movf	_rsLoAvg,w
  7631  0D66  3FC0               	movwi [0]fsr1
  7632  0D67  0854               	movf	_rsLoAvg+1,w
  7633  0D68  3FC1               	movwi [1]fsr1
  7634  0D69  3001               	movlw	1
  7635  0D6A  00AC               	movwf	??_modbus_response_write_single_register
  7636  0D6B  082C               	movf	??_modbus_response_write_single_register,w
  7637  0D6C  07B3               	addwf	modbus_response_write_single_register@i,f
  7638  0D6D  301E               	movlw	30
  7639  0D6E  0233               	subwf	modbus_response_write_single_register@i,w
  7640  0D6F  1C03               	skipc
  7641  0D70  2D43               	goto	l4917
  7642  0D71                     l822:	
  7643                           
  7644                           ;modbus.c: 147: };modbus.c: 148: };modbus.c: 149: fiSave=1;
  7645  0D71  01B0               	clrf	modbus_response_write_single_register@fiSave
  7646  0D72  0AB0               	incf	modbus_response_write_single_register@fiSave,f
  7647  0D73                     l4923:	
  7648                           ;modbus.c: 153: return;
  7649                           
  7650                           ;modbus.c: 150: };modbus.c: 151: }else{
  7651                           
  7652                           
  7653                           ;modbus.c: 154: };modbus.c: 155: if(fiSave)sys_data_save();
  7654  0D73  0830               	movf	modbus_response_write_single_register@fiSave,w
  7655  0D74  1903               	btfsc	3,2
  7656  0D75  2D79               	goto	l4927
  7657  0D76  319E  26CA  318C   	fcall	_sys_data_save
  7658  0D79                     l4927:	
  7659                           
  7660                           ;modbus.c: 156: if(pmdbs->addr==0)return;
  7661  0D79  0020               	movlb	0	; select bank0
  7662  0D7A  0834               	movf	modbus_response_write_single_register@pmdbs,w
  7663  0D7B  0086               	movwf	6
  7664  0D7C  3001               	movlw	1	; select bank2/3
  7665  0D7D  0087               	movwf	7
  7666  0D7E  0801               	movf	1,w
  7667  0D7F  1903               	btfsc	3,2
  7668  0D80  0008               	return
  7669                           
  7670                           ;modbus.c: 157: rbuf[0]=sysData.id;
  7671  0D81  305C               	movlw	92
  7672  0D82  0086               	movwf	6
  7673  0D83  3023               	movlw	35
  7674  0D84  0087               	movwf	7
  7675  0D85  3142               	addfsr 1,2
  7676  0D86  0801               	movf	1,w
  7677  0D87  00AC               	movwf	??_modbus_response_write_single_register
  7678  0D88  0835               	movf	modbus_response_write_single_register@rbuf,w
  7679  0D89  0086               	movwf	6
  7680  0D8A  3001               	movlw	1	; select bank2/3
  7681  0D8B  0087               	movwf	7
  7682  0D8C  082C               	movf	??_modbus_response_write_single_register,w
  7683  0D8D  0081               	movwf	1
  7684                           
  7685                           ;modbus.c: 158: crc_append(rbuf,6);
  7686  0D8E  0835               	movf	modbus_response_write_single_register@rbuf,w
  7687  0D8F  00A6               	movwf	crc_append@message
  7688  0D90  3001               	movlw	1
  7689  0D91  00A7               	movwf	crc_append@message+1
  7690  0D92  3006               	movlw	6
  7691  0D93  00A8               	movwf	crc_append@n
  7692  0D94  3000               	movlw	0
  7693  0D95  00A9               	movwf	crc_append@n+1
  7694  0D96  319E  2633  318C   	fcall	_crc_append
  7695                           
  7696                           ;modbus.c: 159: uart_send_len(rbuf,8);
  7697  0D99  3008               	movlw	8
  7698  0D9A  0020               	movlb	0	; select bank0
  7699  0D9B  00AC               	movwf	??_modbus_response_write_single_register
  7700  0D9C  082C               	movf	??_modbus_response_write_single_register,w
  7701  0D9D  00F8               	movwf	uart_send_len@len
  7702  0D9E  0835               	movf	modbus_response_write_single_register@rbuf,w
  7703  0D9F  3190  207D         	fcall	_uart_send_len
  7704  0DA1  0008               	return
  7705  0DA2                     __end_of_modbus_response_write_single_register:	
  7706                           
  7707                           	psect	text15
  7708  12F1                     __ptext15:	
  7709 ;; *************** function _modbus_response_write_mult_register *****************
  7710 ;; Defined at:
  7711 ;;		line 162 in file "src/api/modbus.c"
  7712 ;; Parameters:    Size  Location     Type
  7713 ;;  rbuf            1    wreg     PTR unsigned char 
  7714 ;;		 -> modbusBuf(32), 
  7715 ;; Auto vars:     Size  Location     Type
  7716 ;;  rbuf            1   15[BANK0 ] PTR unsigned char 
  7717 ;;		 -> modbusBuf(32), 
  7718 ;;  stb             1   16[BANK0 ] PTR struct .
  7719 ;;		 -> modbusBuf(32), 
  7720 ;;  len             1   14[BANK0 ] unsigned char 
  7721 ;;  startAddr       1   13[BANK0 ] unsigned char 
  7722 ;; Return value:  Size  Location     Type
  7723 ;;                  1    wreg      void 
  7724 ;; Registers used:
  7725 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7726 ;; Tracked objects:
  7727 ;;		On entry : 0/0
  7728 ;;		On exit  : 0/0
  7729 ;;		Unchanged: 0/0
  7730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7732 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7733 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7734 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7735 ;;Total ram usage:        5 bytes
  7736 ;; Hardware stack levels used:    1
  7737 ;; Hardware stack levels required when called:    4
  7738 ;; This function calls:
  7739 ;;		_crc_append
  7740 ;;		_sys_data_save
  7741 ;;		_uart_send_len
  7742 ;; This function is called by:
  7743 ;;		_modbus_response_process
  7744 ;; This function uses a non-reentrant model
  7745 ;;
  7746                           
  7747                           
  7748                           ;psect for function _modbus_response_write_mult_register
  7749  12F1                     _modbus_response_write_mult_register:	
  7750                           
  7751                           ;incstack = 0
  7752                           ; Regs used in _modbus_response_write_mult_register: [wreg-fsr1h+status,2+status,0+pclat
      +                          h+cstack]
  7753                           ;modbus_response_write_mult_register@rbuf stored from wreg
  7754  12F1  0020               	movlb	0	; select bank0
  7755  12F2  00AF               	movwf	modbus_response_write_mult_register@rbuf
  7756                           
  7757                           ;modbus.c: 164: uint8_t startAddr,len;;modbus.c: 166: st_modbusWriteMultReg_t* stb=(st_m
      +                          odbusWriteMultReg_t*)rbuf;
  7758  12F3  082F               	movf	modbus_response_write_mult_register@rbuf,w
  7759  12F4  00AC               	movwf	??_modbus_response_write_mult_register
  7760  12F5  082C               	movf	??_modbus_response_write_mult_register,w
  7761  12F6  00B0               	movwf	modbus_response_write_mult_register@stb
  7762                           
  7763                           ;modbus.c: 167: if(stb->addr!=sysData.id || stb->addr==0)return;
  7764  12F7  305C               	movlw	92
  7765  12F8  0086               	movwf	6
  7766  12F9  3023               	movlw	35
  7767  12FA  0087               	movwf	7
  7768  12FB  3142               	addfsr 1,2
  7769  12FC  0830               	movf	modbus_response_write_mult_register@stb,w
  7770  12FD  0084               	movwf	4
  7771  12FE  3001               	movlw	1	; select bank2/3
  7772  12FF  0085               	movwf	5
  7773  1300  0800               	movf	0,w
  7774  1301  0601               	xorwf	1,w
  7775  1302  1D03               	skipz
  7776  1303  0008               	return
  7777  1304  0830               	movf	modbus_response_write_mult_register@stb,w
  7778  1305  0086               	movwf	6
  7779  1306  3001               	movlw	1	; select bank2/3
  7780  1307  0087               	movwf	7
  7781  1308  0801               	movf	1,w
  7782  1309  1903               	btfsc	3,2
  7783  130A  0008               	return
  7784                           
  7785                           ;modbus.c: 168: startAddr=stb->addr_lo;
  7786  130B  0830               	movf	modbus_response_write_mult_register@stb,w
  7787  130C  0086               	movwf	6
  7788  130D  3001               	movlw	1	; select bank2/3
  7789  130E  0087               	movwf	7
  7790  130F  3001               	movlw	1	; select bank2/3
  7791  1310  3F43               	moviw [3]fsr1
  7792  1311  00AD               	movwf	modbus_response_write_mult_register@startAddr
  7793                           
  7794                           ;modbus.c: 169: len=stb->len_lo;
  7795  1312  0830               	movf	modbus_response_write_mult_register@stb,w
  7796  1313  0086               	movwf	6
  7797  1314  3001               	movlw	1	; select bank2/3
  7798  1315  0087               	movwf	7
  7799  1316  3001               	movlw	1	; select bank2/3
  7800  1317  3F45               	moviw [5]fsr1
  7801  1318  00AE               	movwf	modbus_response_write_mult_register@len
  7802                           
  7803                           ;modbus.c: 170: if(len!=3)return ;
  7804  1319  3003               	movlw	3
  7805  131A  062E               	xorwf	modbus_response_write_mult_register@len,w
  7806  131B  1D03               	btfss	3,2
  7807  131C  0008               	return
  7808                           
  7809                           ;modbus.c: 171: if(startAddr!=4)return;
  7810  131D  3004               	movlw	4
  7811  131E  062D               	xorwf	modbus_response_write_mult_register@startAddr,w
  7812  131F  1D03               	btfss	3,2
  7813  1320  0008               	return
  7814                           
  7815                           ;modbus.c: 173: sysData.pidKp=(stb->data[0]<<8)|(stb->data[1]);
  7816  1321  0830               	movf	modbus_response_write_mult_register@stb,w
  7817  1322  3E06               	addlw	6
  7818  1323  0084               	movwf	4
  7819  1324  3001               	movlw	1	; select bank2/3
  7820  1325  0085               	movwf	5
  7821  1326  0800               	movf	0,w
  7822  1327  00AC               	movwf	??_modbus_response_write_mult_register
  7823  1328  0830               	movf	modbus_response_write_mult_register@stb,w
  7824  1329  3E07               	addlw	7
  7825  132A  0084               	movwf	4
  7826  132B  3001               	movlw	1	; select bank2/3
  7827  132C  0085               	movwf	5
  7828  132D  305C               	movlw	92
  7829  132E  0086               	movwf	6
  7830  132F  3023               	movlw	35
  7831  1330  0087               	movwf	7
  7832  1331  3144               	addfsr 1,4
  7833  1332  0800               	movf	0,w
  7834  1333  3FC0               	movwi [0]fsr1
  7835  1334  082C               	movf	??_modbus_response_write_mult_register,w
  7836  1335  3FC1               	movwi [1]fsr1
  7837                           
  7838                           ;modbus.c: 174: sysData.pidTi=(stb->data[2]<<8)|(stb->data[3]);
  7839  1336  0830               	movf	modbus_response_write_mult_register@stb,w
  7840  1337  3E08               	addlw	8
  7841  1338  0084               	movwf	4
  7842  1339  3001               	movlw	1	; select bank2/3
  7843  133A  0085               	movwf	5
  7844  133B  0800               	movf	0,w
  7845  133C  00AC               	movwf	??_modbus_response_write_mult_register
  7846  133D  0830               	movf	modbus_response_write_mult_register@stb,w
  7847  133E  3E09               	addlw	9
  7848  133F  0084               	movwf	4
  7849  1340  3001               	movlw	1	; select bank2/3
  7850  1341  0085               	movwf	5
  7851  1342  305C               	movlw	92
  7852  1343  0086               	movwf	6
  7853  1344  3023               	movlw	35
  7854  1345  0087               	movwf	7
  7855  1346  3146               	addfsr 1,6
  7856  1347  0800               	movf	0,w
  7857  1348  3FC0               	movwi [0]fsr1
  7858  1349  082C               	movf	??_modbus_response_write_mult_register,w
  7859  134A  3FC1               	movwi [1]fsr1
  7860                           
  7861                           ;modbus.c: 176: sys_data_save();
  7862  134B  319E  26CA  3192   	fcall	_sys_data_save
  7863                           
  7864                           ;modbus.c: 177: crc_append(rbuf,sizeof(st_modbusWriteMultReg_t)-2);
  7865  134E  0020               	movlb	0	; select bank0
  7866  134F  082F               	movf	modbus_response_write_mult_register@rbuf,w
  7867  1350  00A6               	movwf	crc_append@message
  7868  1351  3001               	movlw	1
  7869  1352  00A7               	movwf	crc_append@message+1
  7870  1353  3006               	movlw	6
  7871  1354  00A8               	movwf	crc_append@n
  7872  1355  3000               	movlw	0
  7873  1356  00A9               	movwf	crc_append@n+1
  7874  1357  319E  2633  3192   	fcall	_crc_append
  7875                           
  7876                           ;modbus.c: 178: uart_send_len(rbuf,sizeof(st_modbusWriteMultReg_t));
  7877  135A  3008               	movlw	8
  7878  135B  0020               	movlb	0	; select bank0
  7879  135C  00AC               	movwf	??_modbus_response_write_mult_register
  7880  135D  082C               	movf	??_modbus_response_write_mult_register,w
  7881  135E  00F8               	movwf	uart_send_len@len
  7882  135F  082F               	movf	modbus_response_write_mult_register@rbuf,w
  7883  1360  3190  207D         	fcall	_uart_send_len
  7884  1362  0008               	return
  7885  1363                     __end_of_modbus_response_write_mult_register:	
  7886                           
  7887                           	psect	text16
  7888  1ECA                     __ptext16:	
  7889 ;; *************** function _sys_data_save *****************
  7890 ;; Defined at:
  7891 ;;		line 95 in file "src/api/sysData.c"
  7892 ;; Parameters:    Size  Location     Type
  7893 ;;		None
  7894 ;; Auto vars:     Size  Location     Type
  7895 ;;		None
  7896 ;; Return value:  Size  Location     Type
  7897 ;;                  1    wreg      void 
  7898 ;; Registers used:
  7899 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7900 ;; Tracked objects:
  7901 ;;		On entry : 0/0
  7902 ;;		On exit  : 0/0
  7903 ;;		Unchanged: 0/0
  7904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7908 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7909 ;;Total ram usage:        0 bytes
  7910 ;; Hardware stack levels used:    1
  7911 ;; Hardware stack levels required when called:    3
  7912 ;; This function calls:
  7913 ;;		_crc_append
  7914 ;;		_my_flash_read_system_erase
  7915 ;;		_my_flash_system_write
  7916 ;; This function is called by:
  7917 ;;		_sys_data_init
  7918 ;;		_modbus_response_write_single_register
  7919 ;;		_modbus_response_write_mult_register
  7920 ;; This function uses a non-reentrant model
  7921 ;;
  7922                           
  7923                           
  7924                           ;psect for function _sys_data_save
  7925  1ECA                     _sys_data_save:	
  7926                           
  7927                           ;sysData.c: 97: crc_append((uint8_t*)&sysData,sizeof(sysData_t)-2);
  7928                           
  7929                           ;incstack = 0
  7930                           ; Regs used in _sys_data_save: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7931  1ECA  305C               	movlw	92
  7932  1ECB  0020               	movlb	0	; select bank0
  7933  1ECC  00A6               	movwf	crc_append@message
  7934  1ECD  3023               	movlw	35
  7935  1ECE  00A7               	movwf	crc_append@message+1
  7936  1ECF  3082               	movlw	130
  7937  1ED0  00A8               	movwf	crc_append@n
  7938  1ED1  3000               	movlw	0
  7939  1ED2  00A9               	movwf	crc_append@n+1
  7940  1ED3  319E  2633  319E   	fcall	_crc_append
  7941                           
  7942                           ;sysData.c: 98: my_flash_read_system_erase();
  7943  1ED6  319E  2610  319E   	fcall	_my_flash_read_system_erase
  7944                           
  7945                           ;sysData.c: 99: my_flash_system_write((uint8_t*)&sysData,sizeof(sysData_t));
  7946  1ED9  305C               	movlw	92
  7947  1EDA  00F1               	movwf	my_flash_system_write@buf
  7948  1EDB  3023               	movlw	35
  7949  1EDC  00F2               	movwf	my_flash_system_write@buf+1
  7950  1EDD  3084               	movlw	132
  7951  1EDE  00F3               	movwf	my_flash_system_write@len
  7952  1EDF  3000               	movlw	0
  7953  1EE0  00F4               	movwf	my_flash_system_write@len+1
  7954  1EE1  3193  23E5         	fcall	_my_flash_system_write
  7955                           
  7956                           ;sysData.c: 100: PidKp=sysData.pidKp;
  7957  1EE3  305C               	movlw	92
  7958  1EE4  0086               	movwf	6
  7959  1EE5  3023               	movlw	35
  7960  1EE6  0087               	movwf	7
  7961  1EE7  3144               	addfsr 1,4
  7962  1EE8  3F40               	moviw [0]fsr1
  7963  1EE9  0021               	movlb	1	; select bank1
  7964  1EEA  00CC               	movwf	_PidKp^(0+128)
  7965  1EEB  3F41               	moviw [1]fsr1
  7966  1EEC  00CD               	movwf	(_PidKp+1)^(0+128)
  7967                           
  7968                           ;sysData.c: 101: PidTi=sysData.pidTi;
  7969  1EED  305C               	movlw	92
  7970  1EEE  0086               	movwf	6
  7971  1EEF  3023               	movlw	35
  7972  1EF0  0087               	movwf	7
  7973  1EF1  3146               	addfsr 1,6
  7974  1EF2  3F40               	moviw [0]fsr1
  7975  1EF3  00CA               	movwf	_PidTi^(0+128)
  7976  1EF4  3F41               	moviw [1]fsr1
  7977  1EF5  00CB               	movwf	(_PidTi+1)^(0+128)
  7978                           
  7979                           ;sysData.c: 102: PidTd=sysData.pidTd;;
  7980  1EF6  305C               	movlw	92
  7981  1EF7  0086               	movwf	6
  7982  1EF8  3023               	movlw	35
  7983  1EF9  0087               	movwf	7
  7984  1EFA  3148               	addfsr 1,8
  7985  1EFB  3F40               	moviw [0]fsr1
  7986  1EFC  00C8               	movwf	_PidTd^(0+128)
  7987  1EFD  3F41               	moviw [1]fsr1
  7988  1EFE  00C9               	movwf	(_PidTd+1)^(0+128)
  7989  1EFF  0008               	return
  7990  1F00                     __end_of_sys_data_save:	
  7991                           
  7992                           	psect	text17
  7993  13E5                     __ptext17:	
  7994 ;; *************** function _my_flash_system_write *****************
  7995 ;; Defined at:
  7996 ;;		line 47 in file "src/api/sysData.c"
  7997 ;; Parameters:    Size  Location     Type
  7998 ;;  buf             2    1[COMMON] PTR unsigned char 
  7999 ;;		 -> sysData(132), 
  8000 ;;  len             2    3[COMMON] unsigned int 
  8001 ;; Auto vars:     Size  Location     Type
  8002 ;;  flashAddr       2    7[BANK0 ] unsigned int 
  8003 ;;  loc             2    5[BANK0 ] unsigned int 
  8004 ;;  blocNum         2    3[BANK0 ] unsigned int 
  8005 ;;  j               2    0[BANK0 ] unsigned int 
  8006 ;;  i               1    9[BANK0 ] unsigned char 
  8007 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
  8008 ;; Return value:  Size  Location     Type
  8009 ;;                  2    1[COMMON] unsigned int 
  8010 ;; Registers used:
  8011 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8012 ;; Tracked objects:
  8013 ;;		On entry : 0/0
  8014 ;;		On exit  : 0/0
  8015 ;;		Unchanged: 0/0
  8016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8017 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8018 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8019 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8020 ;;      Totals:         6      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8021 ;;Total ram usage:       16 bytes
  8022 ;; Hardware stack levels used:    1
  8023 ;; Hardware stack levels required when called:    1
  8024 ;; This function calls:
  8025 ;;		Nothing
  8026 ;; This function is called by:
  8027 ;;		_sys_data_save
  8028 ;; This function uses a non-reentrant model
  8029 ;;
  8030                           
  8031                           
  8032                           ;psect for function _my_flash_system_write
  8033  13E5                     _my_flash_system_write:	
  8034                           
  8035                           ;sysData.c: 49: uint16_t blocNum=0;
  8036                           
  8037                           ;incstack = 0
  8038                           ; Regs used in _my_flash_system_write: [wreg+fsr1l+fsr1h+status,2+status,0]
  8039  13E5  0020               	movlb	0	; select bank0
  8040  13E6  01A3               	clrf	my_flash_system_write@blocNum
  8041  13E7  01A4               	clrf	my_flash_system_write@blocNum+1
  8042                           
  8043                           ;sysData.c: 50: uint16_t loc,j;;sysData.c: 51: uint16_t flashAddr=0x1f00;
  8044  13E8  3000               	movlw	0
  8045  13E9  00A7               	movwf	my_flash_system_write@flashAddr
  8046  13EA  301F               	movlw	31
  8047  13EB  00A8               	movwf	my_flash_system_write@flashAddr+1
  8048                           
  8049                           ;sysData.c: 52: uint8_t GIEBitValue=INTCONbits.GIE;
  8050  13EC  3000               	movlw	0
  8051  13ED  1B8B               	btfsc	11,7	;volatile
  8052  13EE  3001               	movlw	1
  8053  13EF  00A2               	movwf	my_flash_system_write@GIEBitValue
  8054                           
  8055                           ;sysData.c: 53: uint8_t i=0;
  8056  13F0  01A9               	clrf	my_flash_system_write@i
  8057                           
  8058                           ;sysData.c: 54: blocNum=len/32;
  8059  13F1  0874               	movf	my_flash_system_write@len+1,w
  8060  13F2  00F6               	movwf	??_my_flash_system_write+1
  8061  13F3  0873               	movf	my_flash_system_write@len,w
  8062  13F4  00F5               	movwf	??_my_flash_system_write
  8063  13F5  3005               	movlw	5
  8064  13F6                     u2215:	
  8065  13F6  36F6               	lsrf	??_my_flash_system_write+1,f
  8066  13F7  0CF5               	rrf	??_my_flash_system_write,f
  8067  13F8  0B89               	decfsz	9,f
  8068  13F9  2BF6               	goto	u2215
  8069  13FA  0875               	movf	??_my_flash_system_write,w
  8070  13FB  00A3               	movwf	my_flash_system_write@blocNum
  8071  13FC  0876               	movf	??_my_flash_system_write+1,w
  8072  13FD  00A4               	movwf	my_flash_system_write@blocNum+1
  8073                           
  8074                           ;sysData.c: 55: if(len%32)blocNum++;
  8075  13FE  301F               	movlw	31
  8076  13FF  0573               	andwf	my_flash_system_write@len,w
  8077  1400  00F5               	movwf	??_my_flash_system_write
  8078  1401  3000               	movlw	0
  8079  1402  0574               	andwf	my_flash_system_write@len+1,w
  8080  1403  00F6               	movwf	??_my_flash_system_write+1
  8081  1404  0875               	movf	??_my_flash_system_write,w
  8082  1405  0476               	iorwf	??_my_flash_system_write+1,w
  8083  1406  1903               	btfsc	3,2
  8084  1407  2C0C               	goto	l3395
  8085  1408  3001               	movlw	1
  8086  1409  07A3               	addwf	my_flash_system_write@blocNum,f
  8087  140A  3000               	movlw	0
  8088  140B  3DA4               	addwfc	my_flash_system_write@blocNum+1,f
  8089  140C                     l3395:	
  8090                           
  8091                           ;sysData.c: 57: INTCONbits.GIE = 0;
  8092  140C  138B               	bcf	11,7	;volatile
  8093                           
  8094                           ;sysData.c: 58: loc=0;
  8095  140D  01A5               	clrf	my_flash_system_write@loc
  8096  140E  01A6               	clrf	my_flash_system_write@loc+1
  8097                           
  8098                           ;sysData.c: 59: for(j=0;j<blocNum;j++){
  8099  140F  01A0               	clrf	my_flash_system_write@j
  8100  1410  01A1               	clrf	my_flash_system_write@j+1
  8101  1411                     l732:	
  8102  1411  0824               	movf	my_flash_system_write@blocNum+1,w
  8103  1412  0221               	subwf	my_flash_system_write@j+1,w
  8104  1413  1D03               	skipz
  8105  1414  2C17               	goto	u2275
  8106  1415  0823               	movf	my_flash_system_write@blocNum,w
  8107  1416  0220               	subwf	my_flash_system_write@j,w
  8108  1417                     u2275:	
  8109  1417  1803               	btfsc	3,0
  8110  1418  2C6D               	goto	l3439
  8111                           
  8112                           ;sysData.c: 60: PMCON1bits.CFGS = 0;
  8113  1419  0023               	movlb	3	; select bank3
  8114  141A  1315               	bcf	21,6	;volatile
  8115                           
  8116                           ;sysData.c: 61: PMCON1bits.WREN = 1;
  8117  141B  1515               	bsf	21,2	;volatile
  8118                           
  8119                           ;sysData.c: 62: PMCON1bits.LWLO = 1;
  8120  141C  1695               	bsf	21,5	;volatile
  8121                           
  8122                           ;sysData.c: 64: for(i=0;i<32;i++){
  8123  141D  0020               	movlb	0	; select bank0
  8124  141E  01A9               	clrf	my_flash_system_write@i
  8125  141F  3020               	movlw	32
  8126  1420  0229               	subwf	my_flash_system_write@i,w
  8127  1421  1803               	btfsc	3,0
  8128  1422  2C65               	goto	l735
  8129  1423                     l3407:	
  8130                           
  8131                           ;sysData.c: 66: PMADRL = (flashAddr & 0xFF);
  8132  1423  0827               	movf	my_flash_system_write@flashAddr,w
  8133  1424  0023               	movlb	3	; select bank3
  8134  1425  0091               	movwf	17	;volatile
  8135                           
  8136                           ;sysData.c: 68: PMADRH = ((flashAddr & 0xFF00) >> 8);
  8137  1426  0020               	movlb	0	; select bank0
  8138  1427  0828               	movf	my_flash_system_write@flashAddr+1,w
  8139  1428  0023               	movlb	3	; select bank3
  8140  1429  0092               	movwf	18	;volatile
  8141                           
  8142                           ;sysData.c: 71: if(loc<len){
  8143  142A  0874               	movf	my_flash_system_write@len+1,w
  8144  142B  0020               	movlb	0	; select bank0
  8145  142C  0226               	subwf	my_flash_system_write@loc+1,w
  8146  142D  1D03               	skipz
  8147  142E  2C31               	goto	u2245
  8148  142F  0873               	movf	my_flash_system_write@len,w
  8149  1430  0225               	subwf	my_flash_system_write@loc,w
  8150  1431                     u2245:	
  8151  1431  1803               	skipnc
  8152  1432  2C3D               	goto	l3415
  8153                           
  8154                           ;sysData.c: 72: PMDATL = buf[loc];
  8155  1433  0825               	movf	my_flash_system_write@loc,w
  8156  1434  0771               	addwf	my_flash_system_write@buf,w
  8157  1435  0086               	movwf	6
  8158  1436  0826               	movf	my_flash_system_write@loc+1,w
  8159  1437  3D72               	addwfc	my_flash_system_write@buf+1,w
  8160  1438  0087               	movwf	7
  8161  1439  0801               	movf	1,w
  8162  143A  0023               	movlb	3	; select bank3
  8163  143B  0093               	movwf	19	;volatile
  8164                           
  8165                           ;sysData.c: 73: }else{
  8166  143C  2C3F               	goto	l3417
  8167  143D                     l3415:	
  8168                           
  8169                           ;sysData.c: 74: PMDATL = 0x00;
  8170  143D  0023               	movlb	3	; select bank3
  8171  143E  0193               	clrf	19	;volatile
  8172  143F                     l3417:	
  8173                           
  8174                           ;sysData.c: 75: };sysData.c: 76: loc++;
  8175  143F  3001               	movlw	1
  8176  1440  0020               	movlb	0	; select bank0
  8177  1441  07A5               	addwf	my_flash_system_write@loc,f
  8178  1442  3000               	movlw	0
  8179  1443  3DA6               	addwfc	my_flash_system_write@loc+1,f
  8180                           
  8181                           ;sysData.c: 77: PMDATH = 0x00;
  8182  1444  0023               	movlb	3	; select bank3
  8183  1445  0194               	clrf	20	;volatile
  8184                           
  8185                           ;sysData.c: 78: if((i%32) == 32 -1 ){
  8186  1446  301F               	movlw	31
  8187  1447  0020               	movlb	0	; select bank0
  8188  1448  0529               	andwf	my_flash_system_write@i,w
  8189  1449  00F5               	movwf	??_my_flash_system_write
  8190  144A  301F               	movlw	31
  8191  144B  0675               	xorwf	??_my_flash_system_write,w
  8192  144C  1D03               	btfss	3,2
  8193  144D  2C50               	goto	l3425
  8194                           
  8195                           ;sysData.c: 79: PMCON1bits.LWLO = 0;
  8196  144E  0023               	movlb	3	; select bank3
  8197  144F  1295               	bcf	21,5	;volatile
  8198  1450                     l3425:	
  8199                           
  8200                           ;sysData.c: 80: };sysData.c: 82: PMCON2 = 0x55;
  8201  1450  3055               	movlw	85
  8202  1451  0023               	movlb	3	; select bank3
  8203  1452  0096               	movwf	22	;volsfr
  8204                           
  8205                           ;sysData.c: 83: PMCON2 = 0xAA;
  8206  1453  30AA               	movlw	170
  8207  1454  0096               	movwf	22	;volsfr
  8208                           
  8209                           ;sysData.c: 84: PMCON1bits.WR = 1;
  8210  1455  1495               	bsf	21,1	;volatile
  8211                           
  8212                           ;sysData.c: 85: __nop();
  8213  1456  0000               	nop
  8214                           
  8215                           ;sysData.c: 86: __nop();
  8216  1457  0000               	nop
  8217                           
  8218                           ;sysData.c: 87: flashAddr++;
  8219  1458  3001               	movlw	1
  8220  1459  0020               	movlb	0	; select bank0
  8221  145A  07A7               	addwf	my_flash_system_write@flashAddr,f
  8222  145B  3000               	movlw	0
  8223  145C  3DA8               	addwfc	my_flash_system_write@flashAddr+1,f
  8224  145D  3001               	movlw	1
  8225  145E  00F5               	movwf	??_my_flash_system_write
  8226  145F  0875               	movf	??_my_flash_system_write,w
  8227  1460  07A9               	addwf	my_flash_system_write@i,f
  8228  1461  3020               	movlw	32
  8229  1462  0229               	subwf	my_flash_system_write@i,w
  8230  1463  1C03               	skipc
  8231  1464  2C23               	goto	l3407
  8232  1465                     l735:	
  8233                           
  8234                           ;sysData.c: 88: };sysData.c: 89: PMCON1bits.WREN = 0;
  8235  1465  0023               	movlb	3	; select bank3
  8236  1466  1115               	bcf	21,2	;volatile
  8237  1467  3001               	movlw	1
  8238  1468  0020               	movlb	0	; select bank0
  8239  1469  07A0               	addwf	my_flash_system_write@j,f
  8240  146A  3000               	movlw	0
  8241  146B  3DA1               	addwfc	my_flash_system_write@j+1,f
  8242  146C  2C11               	goto	l732
  8243  146D                     l3439:	
  8244                           
  8245                           ;sysData.c: 90: };sysData.c: 91: INTCONbits.GIE = GIEBitValue;
  8246  146D  0C22               	rrf	my_flash_system_write@GIEBitValue,w
  8247  146E  1C03               	skipc
  8248  146F  138B               	bcf	11,7	;volatile
  8249  1470  1803               	skipnc
  8250  1471  178B               	bsf	11,7	;volatile
  8251  1472  0008               	return
  8252  1473                     __end_of_my_flash_system_write:	
  8253                           ;sysData.c: 93: return 0;;	Return value of _my_flash_system_write is never used
  8254                           
  8255                           
  8256                           	psect	text18
  8257  1E10                     __ptext18:	
  8258 ;; *************** function _my_flash_read_system_erase *****************
  8259 ;; Defined at:
  8260 ;;		line 9 in file "src/api/sysData.c"
  8261 ;; Parameters:    Size  Location     Type
  8262 ;;		None
  8263 ;; Auto vars:     Size  Location     Type
  8264 ;;		None
  8265 ;; Return value:  Size  Location     Type
  8266 ;;                  1    wreg      void 
  8267 ;; Registers used:
  8268 ;;		wreg, status,2, status,0, pclath, cstack
  8269 ;; Tracked objects:
  8270 ;;		On entry : 0/0
  8271 ;;		On exit  : 0/0
  8272 ;;		Unchanged: 0/0
  8273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8275 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8277 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8278 ;;Total ram usage:        0 bytes
  8279 ;; Hardware stack levels used:    1
  8280 ;; Hardware stack levels required when called:    2
  8281 ;; This function calls:
  8282 ;;		_FLASH_EraseBlock
  8283 ;; This function is called by:
  8284 ;;		_sys_data_save
  8285 ;; This function uses a non-reentrant model
  8286 ;;
  8287                           
  8288                           
  8289                           ;psect for function _my_flash_read_system_erase
  8290  1E10                     _my_flash_read_system_erase:	
  8291                           
  8292                           ;sysData.c: 16: FLASH_EraseBlock(0x1f00);
  8293                           
  8294                           ;incstack = 0
  8295                           ; Regs used in _my_flash_read_system_erase: [wreg+status,2+status,0+pclath+cstack]
  8296  1E10  3000               	movlw	0
  8297  1E11  00F1               	movwf	FLASH_EraseBlock@startAddr
  8298  1E12  301F               	movlw	31
  8299  1E13  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  8300  1E14  319D  259F  319E   	fcall	_FLASH_EraseBlock
  8301                           
  8302                           ;sysData.c: 17: FLASH_EraseBlock(0x1f00+32);
  8303  1E17  3020               	movlw	32
  8304  1E18  00F1               	movwf	FLASH_EraseBlock@startAddr
  8305  1E19  301F               	movlw	31
  8306  1E1A  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  8307  1E1B  319D  259F  319E   	fcall	_FLASH_EraseBlock
  8308                           
  8309                           ;sysData.c: 18: FLASH_EraseBlock(0x1f00+64);
  8310  1E1E  3040               	movlw	64
  8311  1E1F  00F1               	movwf	FLASH_EraseBlock@startAddr
  8312  1E20  301F               	movlw	31
  8313  1E21  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  8314  1E22  319D  259F  319E   	fcall	_FLASH_EraseBlock
  8315                           
  8316                           ;sysData.c: 19: FLASH_EraseBlock(0x1f00+96);
  8317  1E25  3060               	movlw	96
  8318  1E26  00F1               	movwf	FLASH_EraseBlock@startAddr
  8319  1E27  301F               	movlw	31
  8320  1E28  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  8321  1E29  319D  259F  319E   	fcall	_FLASH_EraseBlock
  8322                           
  8323                           ;sysData.c: 20: FLASH_EraseBlock(0x1f00+128);
  8324  1E2C  3080               	movlw	128
  8325  1E2D  00F1               	movwf	FLASH_EraseBlock@startAddr
  8326  1E2E  301F               	movlw	31
  8327  1E2F  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  8328  1E30  319D  259F         	fcall	_FLASH_EraseBlock
  8329  1E32  0008               	return
  8330  1E33                     __end_of_my_flash_read_system_erase:	
  8331                           
  8332                           	psect	text19
  8333  1D9F                     __ptext19:	
  8334 ;; *************** function _FLASH_EraseBlock *****************
  8335 ;; Defined at:
  8336 ;;		line 147 in file "mcc_generated_files/memory.c"
  8337 ;; Parameters:    Size  Location     Type
  8338 ;;  startAddr       2    1[COMMON] unsigned int 
  8339 ;; Auto vars:     Size  Location     Type
  8340 ;;  GIEBitValue     1    3[COMMON] unsigned char 
  8341 ;; Return value:  Size  Location     Type
  8342 ;;                  1    wreg      void 
  8343 ;; Registers used:
  8344 ;;		wreg, status,2, status,0
  8345 ;; Tracked objects:
  8346 ;;		On entry : 0/0
  8347 ;;		On exit  : 0/0
  8348 ;;		Unchanged: 0/0
  8349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8350 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8351 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8353 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8354 ;;Total ram usage:        3 bytes
  8355 ;; Hardware stack levels used:    1
  8356 ;; Hardware stack levels required when called:    1
  8357 ;; This function calls:
  8358 ;;		Nothing
  8359 ;; This function is called by:
  8360 ;;		_my_flash_read_system_erase
  8361 ;;		_FLASH_WriteBlock
  8362 ;; This function uses a non-reentrant model
  8363 ;;
  8364                           
  8365                           
  8366                           ;psect for function _FLASH_EraseBlock
  8367  1D9F                     _FLASH_EraseBlock:	
  8368                           
  8369                           ;memory.c: 149: uint8_t GIEBitValue = INTCONbits.GIE;
  8370                           
  8371                           ;incstack = 0
  8372                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  8373  1D9F  3000               	movlw	0
  8374  1DA0  1B8B               	btfsc	11,7	;volatile
  8375  1DA1  3001               	movlw	1
  8376  1DA2  00F3               	movwf	FLASH_EraseBlock@GIEBitValue
  8377                           
  8378                           ;memory.c: 152: INTCONbits.GIE = 0;
  8379  1DA3  138B               	bcf	11,7	;volatile
  8380                           
  8381                           ;memory.c: 154: PMADRL = (startAddr & 0xFF);
  8382  1DA4  0871               	movf	FLASH_EraseBlock@startAddr,w
  8383  1DA5  0023               	movlb	3	; select bank3
  8384  1DA6  0091               	movwf	17	;volatile
  8385                           
  8386                           ;memory.c: 156: PMADRH = ((startAddr & 0xFF00) >> 8);
  8387  1DA7  0872               	movf	FLASH_EraseBlock@startAddr+1,w
  8388  1DA8  0092               	movwf	18	;volatile
  8389                           
  8390                           ;memory.c: 159: PMCON1bits.CFGS = 0;
  8391  1DA9  1315               	bcf	21,6	;volatile
  8392                           
  8393                           ;memory.c: 160: PMCON1bits.FREE = 1;
  8394  1DAA  1615               	bsf	21,4	;volatile
  8395                           
  8396                           ;memory.c: 161: PMCON1bits.WREN = 1;
  8397  1DAB  1515               	bsf	21,2	;volatile
  8398                           
  8399                           ;memory.c: 164: PMCON2 = 0x55;
  8400  1DAC  3055               	movlw	85
  8401  1DAD  0096               	movwf	22	;volsfr
  8402                           
  8403                           ;memory.c: 165: PMCON2 = 0xAA;
  8404  1DAE  30AA               	movlw	170
  8405  1DAF  0096               	movwf	22	;volsfr
  8406                           
  8407                           ;memory.c: 166: PMCON1bits.WR = 1;
  8408  1DB0  1495               	bsf	21,1	;volatile
  8409                           
  8410                           ;memory.c: 167: __nop();
  8411  1DB1  0000               	nop
  8412                           
  8413                           ;memory.c: 168: __nop();
  8414  1DB2  0000               	nop
  8415                           
  8416                           ;memory.c: 170: PMCON1bits.WREN = 0;
  8417  1DB3  0023               	movlb	3	; select bank3
  8418  1DB4  1115               	bcf	21,2	;volatile
  8419                           
  8420                           ;memory.c: 171: INTCONbits.GIE = GIEBitValue;
  8421  1DB5  0C73               	rrf	FLASH_EraseBlock@GIEBitValue,w
  8422  1DB6  1C03               	skipc
  8423  1DB7  138B               	bcf	11,7	;volatile
  8424  1DB8  1803               	skipnc
  8425  1DB9  178B               	bsf	11,7	;volatile
  8426  1DBA  0008               	return
  8427  1DBB                     __end_of_FLASH_EraseBlock:	
  8428                           
  8429                           	psect	text20
  8430  10F7                     __ptext20:	
  8431 ;; *************** function _modbus_response_illgeal_function *****************
  8432 ;; Defined at:
  8433 ;;		line 8 in file "src/api/modbus.c"
  8434 ;; Parameters:    Size  Location     Type
  8435 ;;  buf             1    wreg     PTR unsigned char 
  8436 ;;		 -> modbusBuf(32), 
  8437 ;;  errcode         1   12[BANK0 ] unsigned char 
  8438 ;; Auto vars:     Size  Location     Type
  8439 ;;  buf             1   14[BANK0 ] PTR unsigned char 
  8440 ;;		 -> modbusBuf(32), 
  8441 ;;  pmdbs           1   15[BANK0 ] PTR struct .
  8442 ;;		 -> modbusBuf(32), 
  8443 ;; Return value:  Size  Location     Type
  8444 ;;                  1    wreg      void 
  8445 ;; Registers used:
  8446 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8447 ;; Tracked objects:
  8448 ;;		On entry : 0/0
  8449 ;;		On exit  : 0/0
  8450 ;;		Unchanged: 0/0
  8451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8452 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8453 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8454 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8455 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8456 ;;Total ram usage:        4 bytes
  8457 ;; Hardware stack levels used:    1
  8458 ;; Hardware stack levels required when called:    3
  8459 ;; This function calls:
  8460 ;;		_crc_append
  8461 ;;		_uart_send_len
  8462 ;; This function is called by:
  8463 ;;		_modbus_response_process
  8464 ;; This function uses a non-reentrant model
  8465 ;;
  8466                           
  8467                           
  8468                           ;psect for function _modbus_response_illgeal_function
  8469  10F7                     _modbus_response_illgeal_function:	
  8470                           
  8471                           ;incstack = 0
  8472                           ; Regs used in _modbus_response_illgeal_function: [wreg+fsr1l+fsr1h+status,2+status,0+pc
      +                          lath+cstack]
  8473                           ;modbus_response_illgeal_function@buf stored from wreg
  8474  10F7  0020               	movlb	0	; select bank0
  8475  10F8  00AE               	movwf	modbus_response_illgeal_function@buf
  8476                           
  8477                           ;modbus.c: 10: st_modbusErrRespStructDef* pmdbs=(st_modbusErrRespStructDef*)buf;
  8478  10F9  082E               	movf	modbus_response_illgeal_function@buf,w
  8479  10FA  00AD               	movwf	??_modbus_response_illgeal_function
  8480  10FB  082D               	movf	??_modbus_response_illgeal_function,w
  8481  10FC  00AF               	movwf	modbus_response_illgeal_function@pmdbs
  8482                           
  8483                           ;modbus.c: 11: if(pmdbs->addr==0x00)return;
  8484  10FD  082F               	movf	modbus_response_illgeal_function@pmdbs,w
  8485  10FE  0086               	movwf	6
  8486  10FF  3001               	movlw	1	; select bank2/3
  8487  1100  0087               	movwf	7
  8488  1101  0801               	movf	1,w
  8489  1102  1903               	btfsc	3,2
  8490  1103  0008               	return
  8491                           
  8492                           ;modbus.c: 12: pmdbs->addr=sysData.id;
  8493  1104  305C               	movlw	92
  8494  1105  0086               	movwf	6
  8495  1106  3023               	movlw	35
  8496  1107  0087               	movwf	7
  8497  1108  3142               	addfsr 1,2
  8498  1109  0801               	movf	1,w
  8499  110A  00AD               	movwf	??_modbus_response_illgeal_function
  8500  110B  082F               	movf	modbus_response_illgeal_function@pmdbs,w
  8501  110C  0086               	movwf	6
  8502  110D  3001               	movlw	1	; select bank2/3
  8503  110E  0087               	movwf	7
  8504  110F  082D               	movf	??_modbus_response_illgeal_function,w
  8505  1110  0081               	movwf	1
  8506                           
  8507                           ;modbus.c: 13: if(errcode){
  8508  1111  082C               	movf	modbus_response_illgeal_function@errcode,w
  8509  1112  1903               	btfsc	3,2
  8510  1113  291C               	goto	l786
  8511                           
  8512                           ;modbus.c: 14: pmdbs->func+=0x80;
  8513  1114  3080               	movlw	128
  8514  1115  00AD               	movwf	??_modbus_response_illgeal_function
  8515  1116  0A2F               	incf	modbus_response_illgeal_function@pmdbs,w
  8516  1117  0086               	movwf	6
  8517  1118  3001               	movlw	1	; select bank2/3
  8518  1119  0087               	movwf	7
  8519  111A  082D               	movf	??_modbus_response_illgeal_function,w
  8520  111B  0781               	addwf	1,f
  8521  111C                     l786:	
  8522                           
  8523                           ;modbus.c: 15: };modbus.c: 16: pmdbs->errcord=errcode;
  8524  111C  082C               	movf	modbus_response_illgeal_function@errcode,w
  8525  111D  00AD               	movwf	??_modbus_response_illgeal_function
  8526  111E  082F               	movf	modbus_response_illgeal_function@pmdbs,w
  8527  111F  3E02               	addlw	2
  8528  1120  0086               	movwf	6
  8529  1121  3001               	movlw	1	; select bank2/3
  8530  1122  0087               	movwf	7
  8531  1123  082D               	movf	??_modbus_response_illgeal_function,w
  8532  1124  0081               	movwf	1
  8533                           
  8534                           ;modbus.c: 17: crc_append(buf,3);
  8535  1125  082E               	movf	modbus_response_illgeal_function@buf,w
  8536  1126  00A6               	movwf	crc_append@message
  8537  1127  3001               	movlw	1
  8538  1128  00A7               	movwf	crc_append@message+1
  8539  1129  3003               	movlw	3
  8540  112A  00A8               	movwf	crc_append@n
  8541  112B  3000               	movlw	0
  8542  112C  00A9               	movwf	crc_append@n+1
  8543  112D  319E  2633  3190   	fcall	_crc_append
  8544                           
  8545                           ;modbus.c: 18: uart_send_len(buf,5);
  8546  1130  3005               	movlw	5
  8547  1131  0020               	movlb	0	; select bank0
  8548  1132  00AD               	movwf	??_modbus_response_illgeal_function
  8549  1133  082D               	movf	??_modbus_response_illgeal_function,w
  8550  1134  00F8               	movwf	uart_send_len@len
  8551  1135  082E               	movf	modbus_response_illgeal_function@buf,w
  8552  1136  3190  207D         	fcall	_uart_send_len
  8553  1138  0008               	return
  8554  1139                     __end_of_modbus_response_illgeal_function:	
  8555                           
  8556                           	psect	text21
  8557  1594                     __ptext21:	
  8558 ;; *************** function _modbus_response_command *****************
  8559 ;; Defined at:
  8560 ;;		line 181 in file "src/api/modbus.c"
  8561 ;; Parameters:    Size  Location     Type
  8562 ;;  rbuf            1    wreg     PTR unsigned char 
  8563 ;;		 -> modbusBuf(32), 
  8564 ;; Auto vars:     Size  Location     Type
  8565 ;;  rbuf            1   21[BANK0 ] PTR unsigned char 
  8566 ;;		 -> modbusBuf(32), 
  8567 ;;  tempData        2   22[BANK0 ] unsigned int 
  8568 ;;  startAddr       2   16[BANK0 ] unsigned int 
  8569 ;;  tmpAddr         2   14[BANK0 ] unsigned int 
  8570 ;;  len             1   20[BANK0 ] unsigned char 
  8571 ;;  pmdbs           1   19[BANK0 ] PTR struct .
  8572 ;;		 -> modbusBuf(32), 
  8573 ;;  i               1   18[BANK0 ] unsigned char 
  8574 ;; Return value:  Size  Location     Type
  8575 ;;                  1    wreg      void 
  8576 ;; Registers used:
  8577 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8578 ;; Tracked objects:
  8579 ;;		On entry : 0/0
  8580 ;;		On exit  : 0/0
  8581 ;;		Unchanged: 0/0
  8582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8584 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8585 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8586 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8587 ;;Total ram usage:       12 bytes
  8588 ;; Hardware stack levels used:    1
  8589 ;; Hardware stack levels required when called:    3
  8590 ;; This function calls:
  8591 ;;		_crc_append
  8592 ;;		_getRegisterVal
  8593 ;;		_uart_send_len
  8594 ;; This function is called by:
  8595 ;;		_modbus_response_process
  8596 ;; This function uses a non-reentrant model
  8597 ;;
  8598                           
  8599                           
  8600                           ;psect for function _modbus_response_command
  8601  1594                     _modbus_response_command:	
  8602                           
  8603                           ;incstack = 0
  8604                           ; Regs used in _modbus_response_command: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8605                           ;modbus_response_command@rbuf stored from wreg
  8606  1594  0020               	movlb	0	; select bank0
  8607  1595  00B5               	movwf	modbus_response_command@rbuf
  8608                           
  8609                           ;modbus.c: 182: uint8_t i;;modbus.c: 183: uint16_t startAddr=0;
  8610  1596  01B0               	clrf	modbus_response_command@startAddr
  8611  1597  01B1               	clrf	modbus_response_command@startAddr+1
  8612                           
  8613                           ;modbus.c: 184: uint16_t tempData,tmpAddr;;modbus.c: 185: uint8_t len=0;
  8614  1598  01B4               	clrf	modbus_response_command@len
  8615                           
  8616                           ;modbus.c: 186: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)rbuf;
  8617  1599  0835               	movf	modbus_response_command@rbuf,w
  8618  159A  00AC               	movwf	??_modbus_response_command
  8619  159B  082C               	movf	??_modbus_response_command,w
  8620  159C  00B3               	movwf	modbus_response_command@pmdbs
  8621                           
  8622                           ;modbus.c: 187: if(pmdbs->addr!=sysData.id || pmdbs->addr==0)return;
  8623  159D  305C               	movlw	92
  8624  159E  0086               	movwf	6
  8625  159F  3023               	movlw	35
  8626  15A0  0087               	movwf	7
  8627  15A1  3142               	addfsr 1,2
  8628  15A2  0833               	movf	modbus_response_command@pmdbs,w
  8629  15A3  0084               	movwf	4
  8630  15A4  3001               	movlw	1	; select bank2/3
  8631  15A5  0085               	movwf	5
  8632  15A6  0800               	movf	0,w
  8633  15A7  0601               	xorwf	1,w
  8634  15A8  1D03               	skipz
  8635  15A9  0008               	return
  8636  15AA  0833               	movf	modbus_response_command@pmdbs,w
  8637  15AB  0086               	movwf	6
  8638  15AC  3001               	movlw	1	; select bank2/3
  8639  15AD  0087               	movwf	7
  8640  15AE  0801               	movf	1,w
  8641  15AF  1903               	btfsc	3,2
  8642  15B0  0008               	return
  8643                           
  8644                           ;modbus.c: 188: startAddr=pmdbs->addr_hi;
  8645  15B1  0833               	movf	modbus_response_command@pmdbs,w
  8646  15B2  3E02               	addlw	2
  8647  15B3  0086               	movwf	6
  8648  15B4  3001               	movlw	1	; select bank2/3
  8649  15B5  0087               	movwf	7
  8650  15B6  0801               	movf	1,w
  8651  15B7  00AC               	movwf	??_modbus_response_command
  8652  15B8  01AD               	clrf	??_modbus_response_command+1
  8653  15B9  082C               	movf	??_modbus_response_command,w
  8654  15BA  00B0               	movwf	modbus_response_command@startAddr
  8655  15BB  082D               	movf	??_modbus_response_command+1,w
  8656  15BC  00B1               	movwf	modbus_response_command@startAddr+1
  8657                           
  8658                           ;modbus.c: 189: startAddr<<=8;
  8659  15BD  3008               	movlw	8
  8660  15BE                     u4405:	
  8661  15BE  35B0               	lslf	modbus_response_command@startAddr,f
  8662  15BF  0DB1               	rlf	modbus_response_command@startAddr+1,f
  8663  15C0  0B89               	decfsz	9,f
  8664  15C1  2DBE               	goto	u4405
  8665                           
  8666                           ;modbus.c: 190: startAddr |= pmdbs->addr_lo;
  8667  15C2  0833               	movf	modbus_response_command@pmdbs,w
  8668  15C3  3E03               	addlw	3
  8669  15C4  0086               	movwf	6
  8670  15C5  3001               	movlw	1	; select bank2/3
  8671  15C6  0087               	movwf	7
  8672  15C7  0801               	movf	1,w
  8673  15C8  00AC               	movwf	??_modbus_response_command
  8674  15C9  01AD               	clrf	??_modbus_response_command+1
  8675  15CA  082C               	movf	??_modbus_response_command,w
  8676  15CB  04B0               	iorwf	modbus_response_command@startAddr,f
  8677  15CC  082D               	movf	??_modbus_response_command+1,w
  8678  15CD  04B1               	iorwf	modbus_response_command@startAddr+1,f
  8679                           
  8680                           ;modbus.c: 191: tmpAddr=startAddr;
  8681  15CE  0831               	movf	modbus_response_command@startAddr+1,w
  8682  15CF  00AF               	movwf	modbus_response_command@tmpAddr+1
  8683  15D0  0830               	movf	modbus_response_command@startAddr,w
  8684  15D1  00AE               	movwf	modbus_response_command@tmpAddr
  8685                           
  8686                           ;modbus.c: 192: len = pmdbs->len_lo;
  8687  15D2  0833               	movf	modbus_response_command@pmdbs,w
  8688  15D3  0086               	movwf	6
  8689  15D4  3001               	movlw	1	; select bank2/3
  8690  15D5  0087               	movwf	7
  8691  15D6  3001               	movlw	1	; select bank2/3
  8692  15D7  3F45               	moviw [5]fsr1
  8693  15D8  00B4               	movwf	modbus_response_command@len
  8694                           
  8695                           ;modbus.c: 193: len<<=1;
  8696  15D9  1003               	clrc
  8697  15DA  0DB4               	rlf	modbus_response_command@len,f
  8698                           
  8699                           ;modbus.c: 194: if(len>32)len=32;
  8700  15DB  3021               	movlw	33
  8701  15DC  0234               	subwf	modbus_response_command@len,w
  8702  15DD  1C03               	skipc
  8703  15DE  2DE3               	goto	l4983
  8704  15DF  3020               	movlw	32
  8705  15E0  00AC               	movwf	??_modbus_response_command
  8706  15E1  082C               	movf	??_modbus_response_command,w
  8707  15E2  00B4               	movwf	modbus_response_command@len
  8708  15E3                     l4983:	
  8709                           
  8710                           ;modbus.c: 195: for(i=0;i<len;i=i+2,tmpAddr++){
  8711  15E3  01B2               	clrf	modbus_response_command@i
  8712  15E4                     l4995:	
  8713  15E4  0834               	movf	modbus_response_command@len,w
  8714  15E5  0232               	subwf	modbus_response_command@i,w
  8715  15E6  1803               	btfsc	3,0
  8716  15E7  2E16               	goto	l4997
  8717                           
  8718                           ;modbus.c: 196: getRegisterVal(tmpAddr,&tempData);
  8719  15E8  082F               	movf	modbus_response_command@tmpAddr+1,w
  8720  15E9  00F2               	movwf	getRegisterVal@addr+1
  8721  15EA  082E               	movf	modbus_response_command@tmpAddr,w
  8722  15EB  00F1               	movwf	getRegisterVal@addr
  8723  15EC  3036               	movlw	(low (modbus_response_command@tempData| 0))& (0+255)
  8724  15ED  00AC               	movwf	??_modbus_response_command
  8725  15EE  082C               	movf	??_modbus_response_command,w
  8726  15EF  00F3               	movwf	getRegisterVal@tempData
  8727  15F0  318E  26B3  3195   	fcall	_getRegisterVal
  8728                           
  8729                           ;modbus.c: 197: rbuf[i+3] = (uint8_t)(tempData >> 8);
  8730  15F3  0020               	movlb	0	; select bank0
  8731  15F4  0837               	movf	modbus_response_command@tempData+1,w
  8732  15F5  00AC               	movwf	??_modbus_response_command
  8733  15F6  0832               	movf	modbus_response_command@i,w
  8734  15F7  3E03               	addlw	3
  8735  15F8  0735               	addwf	modbus_response_command@rbuf,w
  8736  15F9  00AD               	movwf	??_modbus_response_command+1
  8737  15FA  082D               	movf	??_modbus_response_command+1,w
  8738  15FB  0086               	movwf	6
  8739  15FC  3001               	movlw	1	; select bank2/3
  8740  15FD  0087               	movwf	7
  8741  15FE  082C               	movf	??_modbus_response_command,w
  8742  15FF  0081               	movwf	1
  8743                           
  8744                           ;modbus.c: 198: rbuf[i+4] = (uint8_t)(tempData & 0xff);
  8745  1600  0836               	movf	modbus_response_command@tempData,w
  8746  1601  00AC               	movwf	??_modbus_response_command
  8747  1602  0832               	movf	modbus_response_command@i,w
  8748  1603  3E04               	addlw	4
  8749  1604  0735               	addwf	modbus_response_command@rbuf,w
  8750  1605  00AD               	movwf	??_modbus_response_command+1
  8751  1606  082D               	movf	??_modbus_response_command+1,w
  8752  1607  0086               	movwf	6
  8753  1608  3001               	movlw	1	; select bank2/3
  8754  1609  0087               	movwf	7
  8755  160A  082C               	movf	??_modbus_response_command,w
  8756  160B  0081               	movwf	1
  8757  160C  0832               	movf	modbus_response_command@i,w
  8758  160D  3E02               	addlw	2
  8759  160E  00AC               	movwf	??_modbus_response_command
  8760  160F  082C               	movf	??_modbus_response_command,w
  8761  1610  00B2               	movwf	modbus_response_command@i
  8762  1611  3001               	movlw	1
  8763  1612  07AE               	addwf	modbus_response_command@tmpAddr,f
  8764  1613  3000               	movlw	0
  8765  1614  3DAF               	addwfc	modbus_response_command@tmpAddr+1,f
  8766  1615  2DE4               	goto	l4995
  8767  1616                     l4997:	
  8768                           
  8769                           ;modbus.c: 200: };modbus.c: 201: rbuf[0] = sysData.id;
  8770  1616  305C               	movlw	92
  8771  1617  0086               	movwf	6
  8772  1618  3023               	movlw	35
  8773  1619  0087               	movwf	7
  8774  161A  3142               	addfsr 1,2
  8775  161B  0801               	movf	1,w
  8776  161C  00AC               	movwf	??_modbus_response_command
  8777  161D  0835               	movf	modbus_response_command@rbuf,w
  8778  161E  0086               	movwf	6
  8779  161F  3001               	movlw	1	; select bank2/3
  8780  1620  0087               	movwf	7
  8781  1621  082C               	movf	??_modbus_response_command,w
  8782  1622  0081               	movwf	1
  8783                           
  8784                           ;modbus.c: 202: rbuf[1] = 3;
  8785  1623  3003               	movlw	3
  8786  1624  00AC               	movwf	??_modbus_response_command
  8787  1625  0A35               	incf	modbus_response_command@rbuf,w
  8788  1626  0086               	movwf	6
  8789  1627  3001               	movlw	1	; select bank2/3
  8790  1628  0087               	movwf	7
  8791  1629  082C               	movf	??_modbus_response_command,w
  8792  162A  0081               	movwf	1
  8793                           
  8794                           ;modbus.c: 203: rbuf[2] = len;
  8795  162B  0834               	movf	modbus_response_command@len,w
  8796  162C  00AC               	movwf	??_modbus_response_command
  8797  162D  0835               	movf	modbus_response_command@rbuf,w
  8798  162E  3E02               	addlw	2
  8799  162F  0086               	movwf	6
  8800  1630  3001               	movlw	1	; select bank2/3
  8801  1631  0087               	movwf	7
  8802  1632  082C               	movf	??_modbus_response_command,w
  8803  1633  0081               	movwf	1
  8804                           
  8805                           ;modbus.c: 204: len += 3;
  8806  1634  3003               	movlw	3
  8807  1635  00AC               	movwf	??_modbus_response_command
  8808  1636  082C               	movf	??_modbus_response_command,w
  8809  1637  07B4               	addwf	modbus_response_command@len,f
  8810                           
  8811                           ;modbus.c: 205: crc_append(rbuf,len);
  8812  1638  0835               	movf	modbus_response_command@rbuf,w
  8813  1639  00A6               	movwf	crc_append@message
  8814  163A  3001               	movlw	1
  8815  163B  00A7               	movwf	crc_append@message+1
  8816  163C  0834               	movf	modbus_response_command@len,w
  8817  163D  00AC               	movwf	??_modbus_response_command
  8818  163E  01AD               	clrf	??_modbus_response_command+1
  8819  163F  082C               	movf	??_modbus_response_command,w
  8820  1640  00A8               	movwf	crc_append@n
  8821  1641  082D               	movf	??_modbus_response_command+1,w
  8822  1642  00A9               	movwf	crc_append@n+1
  8823  1643  319E  2633  3195   	fcall	_crc_append
  8824                           
  8825                           ;modbus.c: 206: len += 2;
  8826  1646  3002               	movlw	2
  8827  1647  0020               	movlb	0	; select bank0
  8828  1648  00AC               	movwf	??_modbus_response_command
  8829  1649  082C               	movf	??_modbus_response_command,w
  8830  164A  07B4               	addwf	modbus_response_command@len,f
  8831                           
  8832                           ;modbus.c: 207: uart_send_len(rbuf,len);
  8833  164B  0834               	movf	modbus_response_command@len,w
  8834  164C  00AC               	movwf	??_modbus_response_command
  8835  164D  082C               	movf	??_modbus_response_command,w
  8836  164E  00F8               	movwf	uart_send_len@len
  8837  164F  0835               	movf	modbus_response_command@rbuf,w
  8838  1650  3190  207D         	fcall	_uart_send_len
  8839  1652  0008               	return
  8840  1653                     __end_of_modbus_response_command:	
  8841                           
  8842                           	psect	text22
  8843  107D                     __ptext22:	
  8844 ;; *************** function _uart_send_len *****************
  8845 ;; Defined at:
  8846 ;;		line 41 in file "src/api/my_uart.c"
  8847 ;; Parameters:    Size  Location     Type
  8848 ;;  buf             1    wreg     PTR unsigned char 
  8849 ;;		 -> modbusBuf(32), 
  8850 ;;  len             1    8[COMMON] unsigned char 
  8851 ;; Auto vars:     Size  Location     Type
  8852 ;;  buf             1   11[COMMON] PTR unsigned char 
  8853 ;;		 -> modbusBuf(32), 
  8854 ;; Return value:  Size  Location     Type
  8855 ;;                  1    wreg      void 
  8856 ;; Registers used:
  8857 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8858 ;; Tracked objects:
  8859 ;;		On entry : 0/0
  8860 ;;		On exit  : 0/0
  8861 ;;		Unchanged: 0/0
  8862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8863 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8864 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8865 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8866 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8867 ;;Total ram usage:        4 bytes
  8868 ;; Hardware stack levels used:    1
  8869 ;; Hardware stack levels required when called:    2
  8870 ;; This function calls:
  8871 ;;		_m_mem_cpy_len
  8872 ;; This function is called by:
  8873 ;;		_modbus_response_illgeal_function
  8874 ;;		_modbus_response_write_single_register
  8875 ;;		_modbus_response_write_mult_register
  8876 ;;		_modbus_response_command
  8877 ;;		_main
  8878 ;; This function uses a non-reentrant model
  8879 ;;
  8880                           
  8881                           
  8882                           ;psect for function _uart_send_len
  8883  107D                     _uart_send_len:	
  8884                           
  8885                           ;incstack = 0
  8886                           ; Regs used in _uart_send_len: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8887                           ;uart_send_len@buf stored from wreg
  8888  107D  00FB               	movwf	uart_send_len@buf
  8889                           
  8890                           ;my_uart.c: 45: if(!TXSTAbits.TXEN)TXSTAbits.TXEN=1;
  8891  107E  0023               	movlb	3	; select bank3
  8892  107F  1E9E               	btfss	30,5	;volatile
  8893  1080  169E               	bsf	30,5	;volatile
  8894                           
  8895                           ;my_uart.c: 47: if(txBufLen>0)return;
  8896  1081  0020               	movlb	0	; select bank0
  8897  1082  0866               	movf	_txBufLen,w
  8898  1083  1D03               	btfss	3,2
  8899  1084  0008               	return
  8900                           
  8901                           ;my_uart.c: 48: if(len>sizeof(txBuf))len=sizeof(txBuf);
  8902  1085  3041               	movlw	65
  8903  1086  0278               	subwf	uart_send_len@len,w
  8904  1087  1C03               	skipc
  8905  1088  288D               	goto	l4799
  8906  1089  3040               	movlw	64
  8907  108A  00F9               	movwf	??_uart_send_len
  8908  108B  0879               	movf	??_uart_send_len,w
  8909  108C  00F8               	movwf	uart_send_len@len
  8910  108D                     l4799:	
  8911                           
  8912                           ;my_uart.c: 49: m_mem_cpy_len(txBuf,buf,len);
  8913  108D  30A0               	movlw	low _txBuf
  8914  108E  00F1               	movwf	m_mem_cpy_len@d
  8915  108F  3001               	movlw	high _txBuf
  8916  1090  00F2               	movwf	m_mem_cpy_len@d+1
  8917  1091  087B               	movf	uart_send_len@buf,w
  8918  1092  00F3               	movwf	m_mem_cpy_len@s
  8919  1093  3001               	movlw	1
  8920  1094  00F4               	movwf	m_mem_cpy_len@s+1
  8921  1095  0878               	movf	uart_send_len@len,w
  8922  1096  00F9               	movwf	??_uart_send_len
  8923  1097  01FA               	clrf	??_uart_send_len+1
  8924  1098  0879               	movf	??_uart_send_len,w
  8925  1099  00F5               	movwf	m_mem_cpy_len@len
  8926  109A  087A               	movf	??_uart_send_len+1,w
  8927  109B  00F6               	movwf	m_mem_cpy_len@len+1
  8928  109C  319D  25F3  3190   	fcall	_m_mem_cpy_len
  8929                           
  8930                           ;my_uart.c: 50: if(len==0)return;
  8931  109F  0878               	movf	uart_send_len@len,w
  8932  10A0  1903               	btfsc	3,2
  8933  10A1  0008               	return
  8934  10A2                     l511:	
  8935                           ;my_uart.c: 51: while(0 == PIR1bits.TXIF);
  8936                           
  8937  10A2  0020               	movlb	0	; select bank0
  8938  10A3  1E11               	btfss	17,4	;volatile
  8939  10A4  28A2               	goto	l511
  8940                           
  8941                           ;my_uart.c: 52: TXREG=txBuf[0];
  8942  10A5  0023               	movlb	3	; select bank3
  8943  10A6  0820               	movf	_txBuf^(0+384),w
  8944  10A7  009A               	movwf	26	;volatile
  8945                           
  8946                           ;my_uart.c: 53: txBufLen=len;
  8947  10A8  0878               	movf	uart_send_len@len,w
  8948  10A9  00F9               	movwf	??_uart_send_len
  8949  10AA  0879               	movf	??_uart_send_len,w
  8950  10AB  0020               	movlb	0	; select bank0
  8951  10AC  00E6               	movwf	_txBufLen
  8952                           
  8953                           ;my_uart.c: 54: txBufLen--;
  8954  10AD  3001               	movlw	1
  8955  10AE  02E6               	subwf	_txBufLen,f
  8956                           
  8957                           ;my_uart.c: 55: txCount++;
  8958  10AF  3001               	movlw	1
  8959  10B0  00F9               	movwf	??_uart_send_len
  8960  10B1  0879               	movf	??_uart_send_len,w
  8961  10B2  07E5               	addwf	_txCount,f
  8962                           
  8963                           ;my_uart.c: 56: if(!PIE1bits.TXIE)PIE1bits.TXIE=1;
  8964  10B3  0021               	movlb	1	; select bank1
  8965  10B4  1A11               	btfsc	17,4	;volatile
  8966  10B5  0008               	return
  8967  10B6  1611               	bsf	17,4	;volatile
  8968  10B7  0008               	return
  8969  10B8                     __end_of_uart_send_len:	
  8970                           
  8971                           	psect	text23
  8972  0EB3                     __ptext23:	
  8973 ;; *************** function _getRegisterVal *****************
  8974 ;; Defined at:
  8975 ;;		line 80 in file "src/api/modbus.c"
  8976 ;; Parameters:    Size  Location     Type
  8977 ;;  addr            2    1[COMMON] unsigned int 
  8978 ;;  tempData        1    3[COMMON] PTR unsigned int 
  8979 ;;		 -> modbus_response_command@tempData(2), 
  8980 ;; Auto vars:     Size  Location     Type
  8981 ;;  t16             2    8[COMMON] unsigned int 
  8982 ;;  tempAddr        1   10[COMMON] unsigned char 
  8983 ;; Return value:  Size  Location     Type
  8984 ;;                  2    1[COMMON] unsigned int 
  8985 ;; Registers used:
  8986 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  8987 ;; Tracked objects:
  8988 ;;		On entry : 0/0
  8989 ;;		On exit  : 0/0
  8990 ;;		Unchanged: 0/0
  8991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8992 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8993 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8994 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8995 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8996 ;;Total ram usage:       10 bytes
  8997 ;; Hardware stack levels used:    1
  8998 ;; Hardware stack levels required when called:    1
  8999 ;; This function calls:
  9000 ;;		Nothing
  9001 ;; This function is called by:
  9002 ;;		_modbus_response_command
  9003 ;; This function uses a non-reentrant model
  9004 ;;
  9005                           
  9006                           
  9007                           ;psect for function _getRegisterVal
  9008  0EB3                     _getRegisterVal:	
  9009                           
  9010                           ;modbus.c: 82: uint16_t t16 = 0;
  9011                           
  9012                           ;incstack = 0
  9013                           ; Regs used in _getRegisterVal: [wreg-fsr1h+status,2+status,0]
  9014  0EB3  01F8               	clrf	getRegisterVal@t16
  9015  0EB4  01F9               	clrf	getRegisterVal@t16+1
  9016                           
  9017                           ;modbus.c: 83: uint8_t tempAddr;;modbus.c: 85: tempAddr = addr & 0xff;
  9018  0EB5  0871               	movf	getRegisterVal@addr,w
  9019  0EB6  00F4               	movwf	??_getRegisterVal
  9020  0EB7  0874               	movf	??_getRegisterVal,w
  9021  0EB8  00FA               	movwf	getRegisterVal@tempAddr
  9022                           
  9023                           ;modbus.c: 86: switch(tempAddr){
  9024  0EB9  2F65               	goto	l3539
  9025  0EBA                     l3505:	
  9026                           ;modbus.c: 87: case 0x01:*tempData = 0100; break;
  9027                           
  9028  0EBA  0873               	movf	getRegisterVal@tempData,w
  9029  0EBB  0086               	movwf	6
  9030  0EBC  0187               	clrf	7
  9031  0EBD  3040               	movlw	64
  9032  0EBE  3FC0               	movwi [0]fsr1
  9033  0EBF  3000               	movlw	0
  9034  0EC0  3FC1               	movwi [1]fsr1
  9035  0EC1  2F72               	goto	l3541
  9036  0EC2                     l3507:	
  9037                           ;modbus.c: 88: case 0x02:*tempData=sysData.id;break;
  9038                           
  9039  0EC2  305C               	movlw	92
  9040  0EC3  0086               	movwf	6
  9041  0EC4  3023               	movlw	35
  9042  0EC5  0087               	movwf	7
  9043  0EC6  3142               	addfsr 1,2
  9044  0EC7  0801               	movf	1,w
  9045  0EC8  00F4               	movwf	??_getRegisterVal
  9046  0EC9  01F5               	clrf	??_getRegisterVal+1
  9047  0ECA  0873               	movf	getRegisterVal@tempData,w
  9048  0ECB  0086               	movwf	6
  9049  0ECC  0187               	clrf	7
  9050  0ECD  0874               	movf	??_getRegisterVal,w
  9051  0ECE  3FC0               	movwi [0]fsr1
  9052  0ECF  0875               	movf	??_getRegisterVal+1,w
  9053  0ED0  3FC1               	movwi [1]fsr1
  9054  0ED1  2F72               	goto	l3541
  9055  0ED2                     l3509:	
  9056                           ;modbus.c: 89: case 0x03:*tempData=(sysData.pidSetFlg1<<8 | sysData.pidSetFlg0);break;
  9057                           
  9058  0ED2  305C               	movlw	92
  9059  0ED3  0084               	movwf	4
  9060  0ED4  3023               	movlw	35
  9061  0ED5  0085               	movwf	5
  9062  0ED6  3101               	addfsr 0,1
  9063  0ED7  0800               	movf	0,w
  9064  0ED8  00F4               	movwf	??_getRegisterVal
  9065  0ED9  305C               	movlw	92
  9066  0EDA  0084               	movwf	4
  9067  0EDB  3023               	movlw	35
  9068  0EDC  0085               	movwf	5
  9069  0EDD  0873               	movf	getRegisterVal@tempData,w
  9070  0EDE  0086               	movwf	6
  9071  0EDF  0187               	clrf	7
  9072  0EE0  0800               	movf	0,w
  9073  0EE1  3FC0               	movwi [0]fsr1
  9074  0EE2  0874               	movf	??_getRegisterVal,w
  9075  0EE3  3FC1               	movwi [1]fsr1
  9076  0EE4  2F72               	goto	l3541
  9077  0EE5                     l3511:	
  9078                           ;modbus.c: 90: case 0x04:*tempData=sysData.pidKp;break;
  9079                           
  9080  0EE5  305C               	movlw	92
  9081  0EE6  0086               	movwf	6
  9082  0EE7  3023               	movlw	35
  9083  0EE8  0087               	movwf	7
  9084  0EE9  3144               	addfsr 1,4
  9085  0EEA  0873               	movf	getRegisterVal@tempData,w
  9086  0EEB  0084               	movwf	4
  9087  0EEC  0185               	clrf	5
  9088  0EED  3F40               	moviw [0]fsr1
  9089  0EEE  3F80               	movwi [0]fsr0
  9090  0EEF  3F41               	moviw [1]fsr1
  9091  0EF0  3F81               	movwi [1]fsr0
  9092  0EF1  2F72               	goto	l3541
  9093  0EF2                     l3513:	
  9094                           ;modbus.c: 91: case 0x05:*tempData=sysData.pidTi;break;
  9095                           
  9096  0EF2  305C               	movlw	92
  9097  0EF3  0086               	movwf	6
  9098  0EF4  3023               	movlw	35
  9099  0EF5  0087               	movwf	7
  9100  0EF6  3146               	addfsr 1,6
  9101  0EF7  0873               	movf	getRegisterVal@tempData,w
  9102  0EF8  0084               	movwf	4
  9103  0EF9  0185               	clrf	5
  9104  0EFA  3F40               	moviw [0]fsr1
  9105  0EFB  3F80               	movwi [0]fsr0
  9106  0EFC  3F41               	moviw [1]fsr1
  9107  0EFD  3F81               	movwi [1]fsr0
  9108  0EFE  2F72               	goto	l3541
  9109  0EFF                     l3515:	
  9110                           ;modbus.c: 92: case 0x06:*tempData=sysData.pidTd;break;
  9111                           
  9112  0EFF  305C               	movlw	92
  9113  0F00  0086               	movwf	6
  9114  0F01  3023               	movlw	35
  9115  0F02  0087               	movwf	7
  9116  0F03  3148               	addfsr 1,8
  9117  0F04  0873               	movf	getRegisterVal@tempData,w
  9118  0F05  0084               	movwf	4
  9119  0F06  0185               	clrf	5
  9120  0F07  3F40               	moviw [0]fsr1
  9121  0F08  3F80               	movwi [0]fsr0
  9122  0F09  3F41               	moviw [1]fsr1
  9123  0F0A  3F81               	movwi [1]fsr0
  9124  0F0B  2F72               	goto	l3541
  9125  0F0C                     l3517:	
  9126                           ;modbus.c: 93: case 0x07:*tempData=rtAdcValueRsLo; break;
  9127                           
  9128  0F0C  0873               	movf	getRegisterVal@tempData,w
  9129  0F0D  0086               	movwf	6
  9130  0F0E  0187               	clrf	7
  9131  0F0F  0020               	movlb	0	; select bank0
  9132  0F10  085F               	movf	_rtAdcValueRsLo,w
  9133  0F11  3FC0               	movwi [0]fsr1
  9134  0F12  0860               	movf	_rtAdcValueRsLo+1,w
  9135  0F13  3FC1               	movwi [1]fsr1
  9136  0F14  2F72               	goto	l3541
  9137  0F15                     l3519:	
  9138                           ;modbus.c: 94: case 0x08:*tempData=rtAdcValueRsHi;break;
  9139                           
  9140  0F15  0873               	movf	getRegisterVal@tempData,w
  9141  0F16  0086               	movwf	6
  9142  0F17  0187               	clrf	7
  9143  0F18  0020               	movlb	0	; select bank0
  9144  0F19  085D               	movf	_rtAdcValueRsHi,w
  9145  0F1A  3FC0               	movwi [0]fsr1
  9146  0F1B  085E               	movf	_rtAdcValueRsHi+1,w
  9147  0F1C  3FC1               	movwi [1]fsr1
  9148  0F1D  2F72               	goto	l3541
  9149  0F1E                     l3521:	
  9150                           ;modbus.c: 95: case 0x09:*tempData=rtAdcValueRcLo;break;
  9151                           
  9152  0F1E  0873               	movf	getRegisterVal@tempData,w
  9153  0F1F  0086               	movwf	6
  9154  0F20  0187               	clrf	7
  9155  0F21  0020               	movlb	0	; select bank0
  9156  0F22  085B               	movf	_rtAdcValueRcLo,w
  9157  0F23  3FC0               	movwi [0]fsr1
  9158  0F24  085C               	movf	_rtAdcValueRcLo+1,w
  9159  0F25  3FC1               	movwi [1]fsr1
  9160  0F26  2F72               	goto	l3541
  9161  0F27                     l3523:	
  9162                           ;modbus.c: 96: case 0x0a:*tempData=rtAdcValueRcHi;break;
  9163                           
  9164  0F27  0873               	movf	getRegisterVal@tempData,w
  9165  0F28  0086               	movwf	6
  9166  0F29  0187               	clrf	7
  9167  0F2A  0020               	movlb	0	; select bank0
  9168  0F2B  0859               	movf	_rtAdcValueRcHi,w
  9169  0F2C  3FC0               	movwi [0]fsr1
  9170  0F2D  085A               	movf	_rtAdcValueRcHi+1,w
  9171  0F2E  3FC1               	movwi [1]fsr1
  9172  0F2F  2F72               	goto	l3541
  9173  0F30                     l3525:	
  9174                           ;modbus.c: 97: case 0x0b:*tempData=resRc;break;
  9175                           
  9176  0F30  0873               	movf	getRegisterVal@tempData,w
  9177  0F31  0086               	movwf	6
  9178  0F32  0187               	clrf	7
  9179  0F33  0020               	movlb	0	; select bank0
  9180  0F34  086E               	movf	_resRc,w
  9181  0F35  3FC0               	movwi [0]fsr1
  9182  0F36  086F               	movf	_resRc+1,w
  9183  0F37  3FC1               	movwi [1]fsr1
  9184  0F38  2F72               	goto	l3541
  9185  0F39                     l3527:	
  9186                           ;modbus.c: 98: case 0x0c:*tempData=resRs;break;
  9187                           
  9188  0F39  0873               	movf	getRegisterVal@tempData,w
  9189  0F3A  0086               	movwf	6
  9190  0F3B  0187               	clrf	7
  9191  0F3C  0020               	movlb	0	; select bank0
  9192  0F3D  086C               	movf	_resRs,w
  9193  0F3E  3FC0               	movwi [0]fsr1
  9194  0F3F  086D               	movf	_resRs+1,w
  9195  0F40  3FC1               	movwi [1]fsr1
  9196  0F41  2F72               	goto	l3541
  9197  0F42                     l3529:	
  9198                           ;modbus.c: 99: case 0x0d:*tempData=rtAdcValueVoFb;break;
  9199                           
  9200  0F42  0873               	movf	getRegisterVal@tempData,w
  9201  0F43  0086               	movwf	6
  9202  0F44  0187               	clrf	7
  9203  0F45  0020               	movlb	0	; select bank0
  9204  0F46  0857               	movf	_rtAdcValueVoFb,w
  9205  0F47  3FC0               	movwi [0]fsr1
  9206  0F48  0858               	movf	_rtAdcValueVoFb+1,w
  9207  0F49  3FC1               	movwi [1]fsr1
  9208  0F4A  2F72               	goto	l3541
  9209  0F4B                     l3531:	
  9210                           ;modbus.c: 100: case 0x0e:*tempData=voExpectMv;break;
  9211                           
  9212  0F4B  0873               	movf	getRegisterVal@tempData,w
  9213  0F4C  0086               	movwf	6
  9214  0F4D  0187               	clrf	7
  9215  0F4E  0021               	movlb	1	; select bank1
  9216  0F4F  0846               	movf	_voExpectMv^(0+128),w
  9217  0F50  3FC0               	movwi [0]fsr1
  9218  0F51  0847               	movf	(_voExpectMv+1)^(0+128),w
  9219  0F52  3FC1               	movwi [1]fsr1
  9220  0F53  2F72               	goto	l3541
  9221  0F54                     l3533:	
  9222                           ;modbus.c: 101: case 0x0f:*tempData=voExpectAdcValue;break;
  9223                           
  9224  0F54  0873               	movf	getRegisterVal@tempData,w
  9225  0F55  0086               	movwf	6
  9226  0F56  0187               	clrf	7
  9227  0F57  0020               	movlb	0	; select bank0
  9228  0F58  0855               	movf	_voExpectAdcValue,w
  9229  0F59  3FC0               	movwi [0]fsr1
  9230  0F5A  0856               	movf	_voExpectAdcValue+1,w
  9231  0F5B  3FC1               	movwi [1]fsr1
  9232  0F5C  2F72               	goto	l3541
  9233  0F5D                     l3535:	
  9234                           ;modbus.c: 102: default: *tempData=0x55aa;break;
  9235                           
  9236  0F5D  0873               	movf	getRegisterVal@tempData,w
  9237  0F5E  0086               	movwf	6
  9238  0F5F  0187               	clrf	7
  9239  0F60  30AA               	movlw	170
  9240  0F61  3FC0               	movwi [0]fsr1
  9241  0F62  3055               	movlw	85
  9242  0F63  3FC1               	movwi [1]fsr1
  9243                           
  9244                           ;modbus.c: 103: }
  9245  0F64  2F72               	goto	l3541
  9246  0F65                     l3539:	
  9247  0F65  087A               	movf	getRegisterVal@tempAddr,w
  9248                           
  9249                           ; Switch size 1, requested type "space"
  9250                           ; Number of cases is 15, Range of values is 1 to 15
  9251                           ; switch strategies available:
  9252                           ; Name         Instructions Cycles
  9253                           ; direct_byte           39     9 (fixed)
  9254                           ; simple_byte           46    24 (average)
  9255                           ; jumptable            263     9 (fixed)
  9256                           ;	Chosen strategy is direct_byte
  9257  0F66  3EFF               	addlw	-1
  9258  0F67  1C03               	skipc
  9259  0F68  2F5D               	goto	l3535
  9260  0F69  0084               	movwf	4
  9261  0F6A  300F               	movlw	15
  9262  0F6B  0204               	subwf	4,w
  9263  0F6C  1803               	skipnc
  9264  0F6D  2F5D               	goto	l3535
  9265  0F6E  3198               	movlp	high S5431
  9266  0F6F  3504               	lslf	4,w
  9267  0F70  3E00               	addlw	low S5431
  9268  0F71  0082               	movwf	2
  9269  0F72                     l3541:	
  9270                           
  9271                           ;modbus.c: 104: if(tempAddr>0x0f && tempAddr < 0x10+30*2){
  9272  0F72  3010               	movlw	16
  9273  0F73  027A               	subwf	getRegisterVal@tempAddr,w
  9274  0F74  1C03               	skipc
  9275  0F75  0008               	return
  9276  0F76  304C               	movlw	76
  9277  0F77  027A               	subwf	getRegisterVal@tempAddr,w
  9278  0F78  1803               	skipnc
  9279  0F79  0008               	return
  9280                           
  9281                           ;modbus.c: 105: tempAddr-=0x10;
  9282  0F7A  3010               	movlw	16
  9283  0F7B  02FA               	subwf	getRegisterVal@tempAddr,f
  9284                           
  9285                           ;modbus.c: 106: if(tempAddr & 0x01){
  9286  0F7C  1C7A               	btfss	getRegisterVal@tempAddr,0
  9287  0F7D  2F95               	goto	l3551
  9288                           
  9289                           ;modbus.c: 107: *tempData=sysData.calibVoMV[tempAddr>>1];
  9290  0F7E  367A               	lsrf	getRegisterVal@tempAddr,w
  9291  0F7F  00F4               	movwf	??_getRegisterVal
  9292  0F80  01F5               	clrf	??_getRegisterVal+1
  9293  0F81  35F4               	lslf	??_getRegisterVal,f
  9294  0F82  0DF5               	rlf	??_getRegisterVal+1,f
  9295  0F83  30A2               	movlw	162
  9296  0F84  00F6               	movwf	??_getRegisterVal+2
  9297  0F85  3023               	movlw	35
  9298  0F86  00F7               	movwf	??_getRegisterVal+3
  9299  0F87  0874               	movf	??_getRegisterVal,w
  9300  0F88  0776               	addwf	??_getRegisterVal+2,w
  9301  0F89  0086               	movwf	6
  9302  0F8A  0875               	movf	??_getRegisterVal+1,w
  9303  0F8B  3D77               	addwfc	??_getRegisterVal+3,w
  9304  0F8C  0087               	movwf	7
  9305  0F8D  0873               	movf	getRegisterVal@tempData,w
  9306  0F8E  0084               	movwf	4
  9307  0F8F  0185               	clrf	5
  9308  0F90  3F40               	moviw [0]fsr1
  9309  0F91  3F80               	movwi [0]fsr0
  9310  0F92  3F41               	moviw [1]fsr1
  9311  0F93  3F81               	movwi [1]fsr0
  9312                           
  9313                           ;modbus.c: 108: }else{
  9314  0F94  0008               	return
  9315  0F95                     l3551:	
  9316                           
  9317                           ;modbus.c: 109: *tempData=sysData.calibRsAdc[tempAddr>>1];
  9318  0F95  367A               	lsrf	getRegisterVal@tempAddr,w
  9319  0F96  00F4               	movwf	??_getRegisterVal
  9320  0F97  01F5               	clrf	??_getRegisterVal+1
  9321  0F98  35F4               	lslf	??_getRegisterVal,f
  9322  0F99  0DF5               	rlf	??_getRegisterVal+1,f
  9323  0F9A  3066               	movlw	102
  9324  0F9B  00F6               	movwf	??_getRegisterVal+2
  9325  0F9C  3023               	movlw	35
  9326  0F9D  00F7               	movwf	??_getRegisterVal+3
  9327  0F9E  0874               	movf	??_getRegisterVal,w
  9328  0F9F  0776               	addwf	??_getRegisterVal+2,w
  9329  0FA0  0086               	movwf	6
  9330  0FA1  0875               	movf	??_getRegisterVal+1,w
  9331  0FA2  3D77               	addwfc	??_getRegisterVal+3,w
  9332  0FA3  0087               	movwf	7
  9333  0FA4  0873               	movf	getRegisterVal@tempData,w
  9334  0FA5  0084               	movwf	4
  9335  0FA6  0185               	clrf	5
  9336  0FA7  3F40               	moviw [0]fsr1
  9337  0FA8  3F80               	movwi [0]fsr0
  9338  0FA9  3F41               	moviw [1]fsr1
  9339  0FAA  3F81               	movwi [1]fsr0
  9340  0FAB  0008               	return
  9341  0FAC                     __end_of_getRegisterVal:	
  9342                           ;modbus.c: 110: };modbus.c: 111: };modbus.c: 112: return t16;;	Return value of _getRegis
      +                          terVal is never used
  9343                           
  9344                           
  9345                           	psect	swtext1
  9346  1800                     __pswtext1:	
  9347  1800                     S5431:	
  9348  1800  318E  2EBA         	ljmp	l3505
  9349  1802  318E  2EC2         	ljmp	l3507
  9350  1804  318E  2ED2         	ljmp	l3509
  9351  1806  318E  2EE5         	ljmp	l3511
  9352  1808  318E  2EF2         	ljmp	l3513
  9353  180A  318E  2EFF         	ljmp	l3515
  9354  180C  318F  2F0C         	ljmp	l3517
  9355  180E  318F  2F15         	ljmp	l3519
  9356  1810  318F  2F1E         	ljmp	l3521
  9357  1812  318F  2F27         	ljmp	l3523
  9358  1814  318F  2F30         	ljmp	l3525
  9359  1816  318F  2F39         	ljmp	l3527
  9360  1818  318F  2F42         	ljmp	l3529
  9361  181A  318F  2F4B         	ljmp	l3531
  9362  181C  318F  2F54         	ljmp	l3533
  9363                           
  9364                           	psect	text24
  9365  1E33                     __ptext24:	
  9366 ;; *************** function _crc_append *****************
  9367 ;; Defined at:
  9368 ;;		line 143 in file "src/depend/crc16.c"
  9369 ;; Parameters:    Size  Location     Type
  9370 ;;  message         2    6[BANK0 ] PTR unsigned char 
  9371 ;;		 -> modbusBuf(32), sysData(132), 
  9372 ;;  n               2    8[BANK0 ] unsigned int 
  9373 ;; Auto vars:     Size  Location     Type
  9374 ;;  crc             2   10[BANK0 ] unsigned int 
  9375 ;; Return value:  Size  Location     Type
  9376 ;;                  1    wreg      void 
  9377 ;; Registers used:
  9378 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9379 ;; Tracked objects:
  9380 ;;		On entry : 0/0
  9381 ;;		On exit  : 0/0
  9382 ;;		Unchanged: 0/0
  9383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9384 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9385 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9386 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9387 ;;      Totals:         5       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9388 ;;Total ram usage:       11 bytes
  9389 ;; Hardware stack levels used:    1
  9390 ;; Hardware stack levels required when called:    2
  9391 ;; This function calls:
  9392 ;;		_crc_sum
  9393 ;; This function is called by:
  9394 ;;		_sys_data_save
  9395 ;;		_modbus_response_illgeal_function
  9396 ;;		_modbus_response_write_single_register
  9397 ;;		_modbus_response_write_mult_register
  9398 ;;		_modbus_response_command
  9399 ;; This function uses a non-reentrant model
  9400 ;;
  9401                           
  9402                           
  9403                           ;psect for function _crc_append
  9404  1E33                     _crc_append:	
  9405                           
  9406                           ;crc16.c: 145: uint16_t crc;;crc16.c: 146: crc = crc_sum(message, n);
  9407                           
  9408                           ;incstack = 0
  9409                           ; Regs used in _crc_append: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9410  1E33  0020               	movlb	0	; select bank0
  9411  1E34  0827               	movf	crc_append@message+1,w
  9412  1E35  00F2               	movwf	crc_sum@buf+1
  9413  1E36  0826               	movf	crc_append@message,w
  9414  1E37  00F1               	movwf	crc_sum@buf
  9415  1E38  0829               	movf	crc_append@n+1,w
  9416  1E39  00F4               	movwf	crc_sum@len+1
  9417  1E3A  0828               	movf	crc_append@n,w
  9418  1E3B  00F3               	movwf	crc_sum@len
  9419  1E3C  3191  21DD         	fcall	_crc_sum
  9420  1E3E  0872               	movf	?_crc_sum+1,w
  9421  1E3F  0020               	movlb	0	; select bank0
  9422  1E40  00AB               	movwf	crc_append@crc+1
  9423  1E41  0871               	movf	?_crc_sum,w
  9424  1E42  00AA               	movwf	crc_append@crc
  9425                           
  9426                           ;crc16.c: 147: message[n] = (uint8_t)(crc & 0xff);
  9427  1E43  0828               	movf	crc_append@n,w
  9428  1E44  0726               	addwf	crc_append@message,w
  9429  1E45  00F7               	movwf	??_crc_append
  9430  1E46  0829               	movf	crc_append@n+1,w
  9431  1E47  3D27               	addwfc	crc_append@message+1,w
  9432  1E48  00F8               	movwf	??_crc_append+1
  9433  1E49  0877               	movf	??_crc_append,w
  9434  1E4A  0086               	movwf	6
  9435  1E4B  0878               	movf	??_crc_append+1,w
  9436  1E4C  0087               	movwf	7
  9437  1E4D  082A               	movf	crc_append@crc,w
  9438  1E4E  0081               	movwf	1
  9439                           
  9440                           ;crc16.c: 148: message[n+1] = (uint8_t)((crc >> 8) & 0xff);
  9441  1E4F  082B               	movf	crc_append@crc+1,w
  9442  1E50  00F7               	movwf	??_crc_append
  9443  1E51  0828               	movf	crc_append@n,w
  9444  1E52  3E01               	addlw	1
  9445  1E53  00F8               	movwf	??_crc_append+1
  9446  1E54  3000               	movlw	0
  9447  1E55  3D29               	addwfc	crc_append@n+1,w
  9448  1E56  00F9               	movwf	??_crc_append+2
  9449  1E57  0878               	movf	??_crc_append+1,w
  9450  1E58  0726               	addwf	crc_append@message,w
  9451  1E59  00FA               	movwf	??_crc_append+3
  9452  1E5A  0879               	movf	??_crc_append+2,w
  9453  1E5B  3D27               	addwfc	crc_append@message+1,w
  9454  1E5C  00FB               	movwf	??_crc_append+4
  9455  1E5D  087A               	movf	??_crc_append+3,w
  9456  1E5E  0086               	movwf	6
  9457  1E5F  087B               	movf	??_crc_append+4,w
  9458  1E60  0087               	movwf	7
  9459  1E61  0877               	movf	??_crc_append,w
  9460  1E62  0081               	movwf	1
  9461  1E63  0008               	return
  9462  1E64                     __end_of_crc_append:	
  9463                           
  9464                           	psect	text25
  9465  100E                     __ptext25:	
  9466 ;; *************** function _crc_verify *****************
  9467 ;; Defined at:
  9468 ;;		line 135 in file "src/depend/crc16.c"
  9469 ;; Parameters:    Size  Location     Type
  9470 ;;  message         2    6[BANK0 ] PTR unsigned char 
  9471 ;;		 -> modbusBuf(32), sysData(132), 
  9472 ;;  n               2    8[BANK0 ] unsigned int 
  9473 ;; Auto vars:     Size  Location     Type
  9474 ;;  expected        2   12[BANK0 ] unsigned int 
  9475 ;;  crccal          2   10[BANK0 ] unsigned int 
  9476 ;; Return value:  Size  Location     Type
  9477 ;;                  1    wreg      unsigned char 
  9478 ;; Registers used:
  9479 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9480 ;; Tracked objects:
  9481 ;;		On entry : 0/0
  9482 ;;		On exit  : 0/0
  9483 ;;		Unchanged: 0/0
  9484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9485 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9486 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9487 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9488 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9489 ;;Total ram usage:       10 bytes
  9490 ;; Hardware stack levels used:    1
  9491 ;; Hardware stack levels required when called:    2
  9492 ;; This function calls:
  9493 ;;		_crc_sum
  9494 ;;		_m_mem_cpy_len
  9495 ;; This function is called by:
  9496 ;;		_sys_data_init
  9497 ;;		_modbus_response_process
  9498 ;; This function uses a non-reentrant model
  9499 ;;
  9500                           
  9501                           
  9502                           ;psect for function _crc_verify
  9503  100E                     _crc_verify:	
  9504                           
  9505                           ;crc16.c: 137: uint16_t expected,crccal;;crc16.c: 138: m_mem_cpy_len((uint8_t*)(&expecte
      +                          d),(message+n-2),2);
  9506                           
  9507                           ;incstack = 0
  9508                           ; Regs used in _crc_verify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9509  100E  302C               	movlw	low crc_verify@expected
  9510  100F  00F1               	movwf	m_mem_cpy_len@d
  9511  1010  3000               	movlw	high crc_verify@expected
  9512  1011  00F2               	movwf	m_mem_cpy_len@d+1
  9513  1012  0020               	movlb	0	; select bank0
  9514  1013  0828               	movf	crc_verify@n,w
  9515  1014  0726               	addwf	crc_verify@message,w
  9516  1015  00F8               	movwf	??_crc_verify
  9517  1016  0829               	movf	crc_verify@n+1,w
  9518  1017  3D27               	addwfc	crc_verify@message+1,w
  9519  1018  00F9               	movwf	??_crc_verify+1
  9520  1019  0878               	movf	??_crc_verify,w
  9521  101A  3EFE               	addlw	254
  9522  101B  00F3               	movwf	m_mem_cpy_len@s
  9523  101C  30FF               	movlw	255
  9524  101D  3D79               	addwfc	??_crc_verify+1,w
  9525  101E  00F4               	movwf	m_mem_cpy_len@s+1
  9526  101F  3002               	movlw	2
  9527  1020  00F5               	movwf	m_mem_cpy_len@len
  9528  1021  3000               	movlw	0
  9529  1022  00F6               	movwf	m_mem_cpy_len@len+1
  9530  1023  319D  25F3  3190   	fcall	_m_mem_cpy_len
  9531                           
  9532                           ;crc16.c: 139: crccal=crc_sum(message,n - 2);
  9533  1026  0020               	movlb	0	; select bank0
  9534  1027  0827               	movf	crc_verify@message+1,w
  9535  1028  00F2               	movwf	crc_sum@buf+1
  9536  1029  0826               	movf	crc_verify@message,w
  9537  102A  00F1               	movwf	crc_sum@buf
  9538  102B  0828               	movf	crc_verify@n,w
  9539  102C  3EFE               	addlw	254
  9540  102D  00F3               	movwf	crc_sum@len
  9541  102E  30FF               	movlw	255
  9542  102F  3D29               	addwfc	crc_verify@n+1,w
  9543  1030  00F4               	movwf	crc_sum@len+1
  9544  1031  3191  21DD  3190   	fcall	_crc_sum
  9545  1034  0872               	movf	?_crc_sum+1,w
  9546  1035  0020               	movlb	0	; select bank0
  9547  1036  00AB               	movwf	crc_verify@crccal+1
  9548  1037  0871               	movf	?_crc_sum,w
  9549  1038  00AA               	movwf	crc_verify@crccal
  9550                           
  9551                           ;crc16.c: 140: if(expected!=crccal)return 0;
  9552  1039  082B               	movf	crc_verify@crccal+1,w
  9553  103A  062D               	xorwf	crc_verify@expected+1,w
  9554  103B  1D03               	skipz
  9555  103C  283F               	goto	u4155
  9556  103D  082A               	movf	crc_verify@crccal,w
  9557  103E  062C               	xorwf	crc_verify@expected,w
  9558  103F                     u4155:	
  9559  103F  1903               	skipnz
  9560  1040  2843               	goto	l4835
  9561  1041  3000               	movlw	0
  9562  1042  0008               	return
  9563  1043                     l4835:	
  9564                           
  9565                           ;crc16.c: 141: return 1;
  9566  1043  3001               	movlw	1
  9567  1044  0008               	return
  9568  1045                     __end_of_crc_verify:	
  9569                           
  9570                           	psect	text26
  9571  1DF3                     __ptext26:	
  9572 ;; *************** function _m_mem_cpy_len *****************
  9573 ;; Defined at:
  9574 ;;		line 50 in file "src/depend/m_string.c"
  9575 ;; Parameters:    Size  Location     Type
  9576 ;;  d               2    1[COMMON] PTR unsigned char 
  9577 ;;		 -> crc_verify@expected(2), modbusBuf(32), txBuf(64), 
  9578 ;;  s               2    3[COMMON] PTR unsigned char 
  9579 ;;		 -> modbusBuf(32), sysData(132), eusartRxBuffer(32), 
  9580 ;;  len             2    5[COMMON] unsigned int 
  9581 ;; Auto vars:     Size  Location     Type
  9582 ;;		None
  9583 ;; Return value:  Size  Location     Type
  9584 ;;                  1    wreg      void 
  9585 ;; Registers used:
  9586 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9587 ;; Tracked objects:
  9588 ;;		On entry : 0/0
  9589 ;;		On exit  : 0/0
  9590 ;;		Unchanged: 0/0
  9591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9592 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9594 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9595 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9596 ;;Total ram usage:        7 bytes
  9597 ;; Hardware stack levels used:    1
  9598 ;; Hardware stack levels required when called:    1
  9599 ;; This function calls:
  9600 ;;		Nothing
  9601 ;; This function is called by:
  9602 ;;		_uart_send_len
  9603 ;;		_main
  9604 ;;		_crc_verify
  9605 ;; This function uses a non-reentrant model
  9606 ;;
  9607                           
  9608                           
  9609                           ;psect for function _m_mem_cpy_len
  9610  1DF3                     _m_mem_cpy_len:	
  9611  1DF3                     l4779:	
  9612                           ;m_string.c: 53: while(len)
  9613                           
  9614                           ;incstack = 0
  9615                           ; Regs used in _m_mem_cpy_len: [wreg+fsr1l+fsr1h+status,2+status,0]
  9616                           
  9617  1DF3  0875               	movf	m_mem_cpy_len@len,w
  9618  1DF4  0476               	iorwf	m_mem_cpy_len@len+1,w
  9619  1DF5  1903               	btfsc	3,2
  9620  1DF6  0008               	return
  9621                           
  9622                           ;m_string.c: 54: {;m_string.c: 55: *d++=*s++;
  9623  1DF7  0873               	movf	m_mem_cpy_len@s,w
  9624  1DF8  0086               	movwf	6
  9625  1DF9  0874               	movf	m_mem_cpy_len@s+1,w
  9626  1DFA  0087               	movwf	7
  9627  1DFB  0801               	movf	1,w
  9628  1DFC  00F7               	movwf	??_m_mem_cpy_len
  9629  1DFD  0871               	movf	m_mem_cpy_len@d,w
  9630  1DFE  0086               	movwf	6
  9631  1DFF  0872               	movf	m_mem_cpy_len@d+1,w
  9632  1E00  0087               	movwf	7
  9633  1E01  0877               	movf	??_m_mem_cpy_len,w
  9634  1E02  0081               	movwf	1
  9635  1E03  3001               	movlw	1
  9636  1E04  07F3               	addwf	m_mem_cpy_len@s,f
  9637  1E05  3000               	movlw	0
  9638  1E06  3DF4               	addwfc	m_mem_cpy_len@s+1,f
  9639  1E07  3001               	movlw	1
  9640  1E08  07F1               	addwf	m_mem_cpy_len@d,f
  9641  1E09  3000               	movlw	0
  9642  1E0A  3DF2               	addwfc	m_mem_cpy_len@d+1,f
  9643                           
  9644                           ;m_string.c: 56: len--;
  9645  1E0B  3001               	movlw	1
  9646  1E0C  02F5               	subwf	m_mem_cpy_len@len,f
  9647  1E0D  3000               	movlw	0
  9648  1E0E  3BF6               	subwfb	m_mem_cpy_len@len+1,f
  9649  1E0F  2DF3               	goto	l4779
  9650  1E10                     __end_of_m_mem_cpy_len:	
  9651                           
  9652                           	psect	text27
  9653  11DD                     __ptext27:	
  9654 ;; *************** function _crc_sum *****************
  9655 ;; Defined at:
  9656 ;;		line 116 in file "src/depend/crc16.c"
  9657 ;; Parameters:    Size  Location     Type
  9658 ;;  buf             2    1[COMMON] PTR unsigned char 
  9659 ;;		 -> modbusBuf(32), sysData(132), 
  9660 ;;  len             2    3[COMMON] unsigned int 
  9661 ;; Auto vars:     Size  Location     Type
  9662 ;;  crc             2    4[BANK0 ] unsigned int 
  9663 ;;  i               2    2[BANK0 ] unsigned int 
  9664 ;;  j               2    0[BANK0 ] unsigned int 
  9665 ;; Return value:  Size  Location     Type
  9666 ;;                  2    1[COMMON] unsigned int 
  9667 ;; Registers used:
  9668 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9669 ;; Tracked objects:
  9670 ;;		On entry : 0/0
  9671 ;;		On exit  : 0/0
  9672 ;;		Unchanged: 0/0
  9673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9674 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9675 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9676 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9677 ;;      Totals:         6       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9678 ;;Total ram usage:       12 bytes
  9679 ;; Hardware stack levels used:    1
  9680 ;; Hardware stack levels required when called:    1
  9681 ;; This function calls:
  9682 ;;		Nothing
  9683 ;; This function is called by:
  9684 ;;		_crc_verify
  9685 ;;		_crc_append
  9686 ;; This function uses a non-reentrant model
  9687 ;;
  9688                           
  9689                           
  9690                           ;psect for function _crc_sum
  9691  11DD                     _crc_sum:	
  9692                           
  9693                           ;crc16.c: 118: uint16_t crc=0xFFFF;
  9694                           
  9695                           ;incstack = 0
  9696                           ; Regs used in _crc_sum: [wreg+fsr1l+fsr1h+status,2+status,0]
  9697  11DD  30FF               	movlw	255
  9698  11DE  0020               	movlb	0	; select bank0
  9699  11DF  00A4               	movwf	crc_sum@crc
  9700  11E0  30FF               	movlw	255
  9701  11E1  00A5               	movwf	crc_sum@crc+1
  9702                           
  9703                           ;crc16.c: 119: uint16_t i, j;;crc16.c: 120: for ( j=0; j<len;j++){
  9704  11E2  01A0               	clrf	crc_sum@j
  9705  11E3  01A1               	clrf	crc_sum@j+1
  9706  11E4                     l1062:	
  9707  11E4  0874               	movf	crc_sum@len+1,w
  9708  11E5  0221               	subwf	crc_sum@j+1,w
  9709  11E6  1D03               	skipz
  9710  11E7  29EA               	goto	u4075
  9711  11E8  0873               	movf	crc_sum@len,w
  9712  11E9  0220               	subwf	crc_sum@j,w
  9713  11EA                     u4075:	
  9714  11EA  1803               	btfsc	3,0
  9715  11EB  2A2E               	goto	l4765
  9716                           
  9717                           ;crc16.c: 121: crc=crc ^*buf++;
  9718  11EC  0871               	movf	crc_sum@buf,w
  9719  11ED  0086               	movwf	6
  9720  11EE  0872               	movf	crc_sum@buf+1,w
  9721  11EF  0087               	movwf	7
  9722  11F0  0824               	movf	crc_sum@crc,w
  9723  11F1  0601               	xorwf	1,w
  9724  11F2  00A4               	movwf	crc_sum@crc
  9725  11F3  0825               	movf	crc_sum@crc+1,w
  9726  11F4  00A5               	movwf	crc_sum@crc+1
  9727  11F5  3001               	movlw	1
  9728  11F6  07F1               	addwf	crc_sum@buf,f
  9729  11F7  3000               	movlw	0
  9730  11F8  3DF2               	addwfc	crc_sum@buf+1,f
  9731                           
  9732                           ;crc16.c: 122: for ( i=0; i<8; i++){
  9733  11F9  01A2               	clrf	crc_sum@i
  9734  11FA  01A3               	clrf	crc_sum@i+1
  9735  11FB  3000               	movlw	0
  9736  11FC  0223               	subwf	crc_sum@i+1,w
  9737  11FD  3008               	movlw	8
  9738  11FE  1903               	skipnz
  9739  11FF  0222               	subwf	crc_sum@i,w
  9740  1200  1803               	btfsc	3,0
  9741  1201  2A29               	goto	l4763
  9742  1202                     l1064:	
  9743                           
  9744                           ;crc16.c: 124: if(crc&0x0001){
  9745  1202  1C24               	btfss	crc_sum@crc,0
  9746  1203  2A14               	goto	l4757
  9747                           
  9748                           ;crc16.c: 125: crc=crc>>1;
  9749  1204  0825               	movf	crc_sum@crc+1,w
  9750  1205  00F6               	movwf	??_crc_sum+1
  9751  1206  0824               	movf	crc_sum@crc,w
  9752  1207  00F5               	movwf	??_crc_sum
  9753  1208  36F6               	lsrf	??_crc_sum+1,f
  9754  1209  0CF5               	rrf	??_crc_sum,f
  9755  120A  0875               	movf	??_crc_sum,w
  9756  120B  00A4               	movwf	crc_sum@crc
  9757  120C  0876               	movf	??_crc_sum+1,w
  9758  120D  00A5               	movwf	crc_sum@crc+1
  9759                           
  9760                           ;crc16.c: 126: crc=crc^ 0xa001;
  9761  120E  3001               	movlw	1
  9762  120F  0624               	xorwf	crc_sum@crc,w
  9763  1210  00A4               	movwf	crc_sum@crc
  9764  1211  30A0               	movlw	160
  9765  1212  0625               	xorwf	crc_sum@crc+1,w
  9766  1213  2A1D               	goto	L1
  9767  1214                     l4757:	
  9768                           ;crc16.c: 127: }else{
  9769                           
  9770                           
  9771                           ;crc16.c: 128: crc=crc>>1;
  9772  1214  0825               	movf	crc_sum@crc+1,w
  9773  1215  00F6               	movwf	??_crc_sum+1
  9774  1216  0824               	movf	crc_sum@crc,w
  9775  1217  00F5               	movwf	??_crc_sum
  9776  1218  36F6               	lsrf	??_crc_sum+1,f
  9777  1219  0CF5               	rrf	??_crc_sum,f
  9778  121A  0875               	movf	??_crc_sum,w
  9779  121B  00A4               	movwf	crc_sum@crc
  9780  121C  0876               	movf	??_crc_sum+1,w
  9781  121D                     L1:	
  9782  121D  00A5               	movwf	crc_sum@crc+1
  9783  121E  3001               	movlw	1
  9784  121F  07A2               	addwf	crc_sum@i,f
  9785  1220  3000               	movlw	0
  9786  1221  3DA3               	addwfc	crc_sum@i+1,f
  9787  1222  3000               	movlw	0
  9788  1223  0223               	subwf	crc_sum@i+1,w
  9789  1224  3008               	movlw	8
  9790  1225  1903               	skipnz
  9791  1226  0222               	subwf	crc_sum@i,w
  9792  1227  1C03               	skipc
  9793  1228  2A02               	goto	l1064
  9794  1229                     l4763:	
  9795  1229  3001               	movlw	1
  9796  122A  07A0               	addwf	crc_sum@j,f
  9797  122B  3000               	movlw	0
  9798  122C  3DA1               	addwfc	crc_sum@j+1,f
  9799  122D  29E4               	goto	l1062
  9800  122E                     l4765:	
  9801                           
  9802                           ;crc16.c: 129: };crc16.c: 130: };crc16.c: 132: };crc16.c: 133: return ( crc);
  9803  122E  0825               	movf	crc_sum@crc+1,w
  9804  122F  00F2               	movwf	?_crc_sum+1
  9805  1230  0824               	movf	crc_sum@crc,w
  9806  1231  00F1               	movwf	?_crc_sum
  9807  1232  0008               	return
  9808  1233                     __end_of_crc_sum:	
  9809                           
  9810                           	psect	text28
  9811  1473                     __ptext28:	
  9812 ;; *************** function _calc_temp_rs *****************
  9813 ;; Defined at:
  9814 ;;		line 216 in file "src/api/sample.c"
  9815 ;; Parameters:    Size  Location     Type
  9816 ;;		None
  9817 ;; Auto vars:     Size  Location     Type
  9818 ;;		None
  9819 ;; Return value:  Size  Location     Type
  9820 ;;                  4    5[BANK0 ] unsigned long 
  9821 ;; Registers used:
  9822 ;;		wreg, status,2, status,0, pclath, cstack
  9823 ;; Tracked objects:
  9824 ;;		On entry : 0/0
  9825 ;;		On exit  : 0/0
  9826 ;;		Unchanged: 0/0
  9827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9828 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9830 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9831 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9832 ;;Total ram usage:        8 bytes
  9833 ;; Hardware stack levels used:    1
  9834 ;; Hardware stack levels required when called:    2
  9835 ;; This function calls:
  9836 ;;		___lldiv
  9837 ;;		___lmul
  9838 ;; This function is called by:
  9839 ;;		_main
  9840 ;; This function uses a non-reentrant model
  9841 ;;
  9842                           
  9843                           
  9844                           ;psect for function _calc_temp_rs
  9845  1473                     _calc_temp_rs:	
  9846                           
  9847                           ;sample.c: 230: y32=12000UL;
  9848                           
  9849                           ;incstack = 0
  9850                           ; Regs used in _calc_temp_rs: [wreg+status,2+status,0+pclath+cstack]
  9851  1473  3000               	movlw	0
  9852  1474  0020               	movlb	0	; select bank0
  9853  1475  00CA               	movwf	_y32+3
  9854  1476  3000               	movlw	0
  9855  1477  00C9               	movwf	_y32+2
  9856  1478  302E               	movlw	46
  9857  1479  00C8               	movwf	_y32+1
  9858  147A  30E0               	movlw	224
  9859  147B  00C7               	movwf	_y32
  9860                           
  9861                           ;sample.c: 231: y32=y32*rtAdcValueRsHi;
  9862  147C  085D               	movf	_rtAdcValueRsHi,w
  9863  147D  00F1               	movwf	___lmul@multiplier
  9864  147E  085E               	movf	_rtAdcValueRsHi+1,w
  9865  147F  00F2               	movwf	___lmul@multiplier+1
  9866  1480  01F3               	clrf	___lmul@multiplier+2
  9867  1481  01F4               	clrf	___lmul@multiplier+3
  9868  1482  084A               	movf	_y32+3,w
  9869  1483  00F8               	movwf	___lmul@multiplicand+3
  9870  1484  0849               	movf	_y32+2,w
  9871  1485  00F7               	movwf	___lmul@multiplicand+2
  9872  1486  0848               	movf	_y32+1,w
  9873  1487  00F6               	movwf	___lmul@multiplicand+1
  9874  1488  0847               	movf	_y32,w
  9875  1489  00F5               	movwf	___lmul@multiplicand
  9876  148A  319E  2664  3194   	fcall	___lmul
  9877  148D  0874               	movf	?___lmul+3,w
  9878  148E  0020               	movlb	0	; select bank0
  9879  148F  00CA               	movwf	_y32+3
  9880  1490  0873               	movf	?___lmul+2,w
  9881  1491  00C9               	movwf	_y32+2
  9882  1492  0872               	movf	?___lmul+1,w
  9883  1493  00C8               	movwf	_y32+1
  9884  1494  0871               	movf	?___lmul,w
  9885  1495  00C7               	movwf	_y32
  9886                           
  9887                           ;sample.c: 232: x32=rtAdcValueRsLo;
  9888  1496  085F               	movf	_rtAdcValueRsLo,w
  9889  1497  0021               	movlb	1	; select bank1
  9890  1498  00B8               	movwf	_x32^(0+128)
  9891  1499  0020               	movlb	0	; select bank0
  9892  149A  0860               	movf	_rtAdcValueRsLo+1,w
  9893  149B  0021               	movlb	1	; select bank1
  9894  149C  00B9               	movwf	(_x32^(0+128)+1)
  9895  149D  01BA               	clrf	(_x32^(0+128)+2)
  9896  149E  01BB               	clrf	(_x32^(0+128)+3)
  9897                           
  9898                           ;sample.c: 233: y32=y32/x32;
  9899  149F  083B               	movf	(_x32+3)^(0+128),w
  9900  14A0  00F4               	movwf	___lldiv@divisor+3
  9901  14A1  083A               	movf	(_x32+2)^(0+128),w
  9902  14A2  00F3               	movwf	___lldiv@divisor+2
  9903  14A3  0839               	movf	(_x32+1)^(0+128),w
  9904  14A4  00F2               	movwf	___lldiv@divisor+1
  9905  14A5  0838               	movf	_x32^(0+128),w
  9906  14A6  00F1               	movwf	___lldiv@divisor
  9907  14A7  0020               	movlb	0	; select bank0
  9908  14A8  084A               	movf	_y32+3,w
  9909  14A9  00F8               	movwf	___lldiv@dividend+3
  9910  14AA  0849               	movf	_y32+2,w
  9911  14AB  00F7               	movwf	___lldiv@dividend+2
  9912  14AC  0848               	movf	_y32+1,w
  9913  14AD  00F6               	movwf	___lldiv@dividend+1
  9914  14AE  0847               	movf	_y32,w
  9915  14AF  00F5               	movwf	___lldiv@dividend
  9916  14B0  3191  218A  3194   	fcall	___lldiv
  9917  14B3  0874               	movf	?___lldiv+3,w
  9918  14B4  0020               	movlb	0	; select bank0
  9919  14B5  00CA               	movwf	_y32+3
  9920  14B6  0873               	movf	?___lldiv+2,w
  9921  14B7  00C9               	movwf	_y32+2
  9922  14B8  0872               	movf	?___lldiv+1,w
  9923  14B9  00C8               	movwf	_y32+1
  9924  14BA  0871               	movf	?___lldiv,w
  9925  14BB  00C7               	movwf	_y32
  9926                           
  9927                           ;sample.c: 234: if(y32<2000)y32=2000;
  9928  14BC  084A               	movf	_y32+3,w
  9929  14BD  1D03               	btfss	3,2
  9930  14BE  2CD0               	goto	l5073
  9931  14BF  0849               	movf	_y32+2,w
  9932  14C0  1D03               	btfss	3,2
  9933  14C1  2CD0               	goto	l5073
  9934  14C2  30D0               	movlw	208
  9935  14C3  0247               	subwf	_y32,w
  9936  14C4  3007               	movlw	7
  9937  14C5  3B48               	subwfb	_y32+1,w
  9938  14C6  1803               	btfsc	3,0
  9939  14C7  2CD0               	goto	l5073
  9940  14C8  3000               	movlw	0
  9941  14C9  00CA               	movwf	_y32+3
  9942  14CA  3000               	movlw	0
  9943  14CB  00C9               	movwf	_y32+2
  9944  14CC  3007               	movlw	7
  9945  14CD  00C8               	movwf	_y32+1
  9946  14CE  30D0               	movlw	208
  9947  14CF  00C7               	movwf	_y32
  9948  14D0                     l5073:	
  9949                           
  9950                           ;sample.c: 235: if(y32>25000)y32=25000;
  9951  14D0  084A               	movf	_y32+3,w
  9952  14D1  1D03               	btfss	3,2
  9953  14D2  2CDC               	goto	l5075
  9954  14D3  0849               	movf	_y32+2,w
  9955  14D4  1D03               	btfss	3,2
  9956  14D5  2CDC               	goto	l5075
  9957  14D6  30A9               	movlw	169
  9958  14D7  0247               	subwf	_y32,w
  9959  14D8  3061               	movlw	97
  9960  14D9  3B48               	subwfb	_y32+1,w
  9961  14DA  1C03               	btfss	3,0
  9962  14DB  2CE4               	goto	l647
  9963  14DC                     l5075:	
  9964  14DC  3000               	movlw	0
  9965  14DD  00CA               	movwf	_y32+3
  9966  14DE  3000               	movlw	0
  9967  14DF  00C9               	movwf	_y32+2
  9968  14E0  3061               	movlw	97
  9969  14E1  00C8               	movwf	_y32+1
  9970  14E2  30A8               	movlw	168
  9971  14E3  00C7               	movwf	_y32
  9972  14E4                     l647:	
  9973                           
  9974                           ;sample.c: 236: y32=y32-1000;
  9975  14E4  3018               	movlw	24
  9976  14E5  00A9               	movwf	??_calc_temp_rs
  9977  14E6  30FC               	movlw	252
  9978  14E7  00AA               	movwf	??_calc_temp_rs+1
  9979  14E8  30FF               	movlw	255
  9980  14E9  00AB               	movwf	??_calc_temp_rs+2
  9981  14EA  30FF               	movlw	255
  9982  14EB  00AC               	movwf	??_calc_temp_rs+3
  9983  14EC  0847               	movf	_y32,w
  9984  14ED  07A9               	addwf	??_calc_temp_rs,f
  9985  14EE  0848               	movf	_y32+1,w
  9986  14EF  3DAA               	addwfc	??_calc_temp_rs+1,f
  9987  14F0  0849               	movf	_y32+2,w
  9988  14F1  3DAB               	addwfc	??_calc_temp_rs+2,f
  9989  14F2  084A               	movf	_y32+3,w
  9990  14F3  3DAC               	addwfc	??_calc_temp_rs+3,f
  9991  14F4  082C               	movf	??_calc_temp_rs+3,w
  9992  14F5  00CA               	movwf	_y32+3
  9993  14F6  082B               	movf	??_calc_temp_rs+2,w
  9994  14F7  00C9               	movwf	_y32+2
  9995  14F8  082A               	movf	??_calc_temp_rs+1,w
  9996  14F9  00C8               	movwf	_y32+1
  9997  14FA  0829               	movf	??_calc_temp_rs,w
  9998  14FB  00C7               	movwf	_y32
  9999                           
 10000                           ;sample.c: 237: return (uint16_t)y32;
 10001  14FC  0847               	movf	_y32,w
 10002  14FD  00A5               	movwf	?_calc_temp_rs
 10003  14FE  0848               	movf	_y32+1,w
 10004  14FF  00A6               	movwf	?_calc_temp_rs+1
 10005  1500  01A7               	clrf	?_calc_temp_rs+2
 10006  1501  01A8               	clrf	?_calc_temp_rs+3
 10007  1502  0008               	return
 10008  1503                     __end_of_calc_temp_rs:	
 10009                           
 10010                           	psect	text29
 10011  1727                     __ptext29:	
 10012 ;; *************** function _calc_temp_rc *****************
 10013 ;; Defined at:
 10014 ;;		line 240 in file "src/api/sample.c"
 10015 ;; Parameters:    Size  Location     Type
 10016 ;;		None
 10017 ;; Auto vars:     Size  Location     Type
 10018 ;;		None
 10019 ;; Return value:  Size  Location     Type
 10020 ;;                  4    5[BANK0 ] unsigned long 
 10021 ;; Registers used:
 10022 ;;		wreg, status,2, status,0, pclath, cstack
 10023 ;; Tracked objects:
 10024 ;;		On entry : 0/0
 10025 ;;		On exit  : 0/0
 10026 ;;		Unchanged: 0/0
 10027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10028 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10030 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10031 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10032 ;;Total ram usage:       12 bytes
 10033 ;; Hardware stack levels used:    1
 10034 ;; Hardware stack levels required when called:    2
 10035 ;; This function calls:
 10036 ;;		___lldiv
 10037 ;;		___lmul
 10038 ;; This function is called by:
 10039 ;;		_main
 10040 ;; This function uses a non-reentrant model
 10041 ;;
 10042                           
 10043                           
 10044                           ;psect for function _calc_temp_rc
 10045  1727                     _calc_temp_rc:	
 10046                           
 10047                           ;sample.c: 244: x32=300000UL;
 10048                           
 10049                           ;incstack = 0
 10050                           ; Regs used in _calc_temp_rc: [wreg+status,2+status,0+pclath+cstack]
 10051  1727  3000               	movlw	0
 10052  1728  0021               	movlb	1	; select bank1
 10053  1729  00BB               	movwf	(_x32+3)^(0+128)
 10054  172A  3004               	movlw	4
 10055  172B  00BA               	movwf	(_x32+2)^(0+128)
 10056  172C  3093               	movlw	147
 10057  172D  00B9               	movwf	(_x32+1)^(0+128)
 10058  172E  30E0               	movlw	224
 10059  172F  00B8               	movwf	_x32^(0+128)
 10060                           
 10061                           ;sample.c: 245: x32=x32*rtAdcValueRcLo;
 10062  1730  0020               	movlb	0	; select bank0
 10063  1731  085B               	movf	_rtAdcValueRcLo,w
 10064  1732  00F1               	movwf	___lmul@multiplier
 10065  1733  085C               	movf	_rtAdcValueRcLo+1,w
 10066  1734  00F2               	movwf	___lmul@multiplier+1
 10067  1735  01F3               	clrf	___lmul@multiplier+2
 10068  1736  01F4               	clrf	___lmul@multiplier+3
 10069  1737  0021               	movlb	1	; select bank1
 10070  1738  083B               	movf	(_x32+3)^(0+128),w
 10071  1739  00F8               	movwf	___lmul@multiplicand+3
 10072  173A  083A               	movf	(_x32+2)^(0+128),w
 10073  173B  00F7               	movwf	___lmul@multiplicand+2
 10074  173C  0839               	movf	(_x32+1)^(0+128),w
 10075  173D  00F6               	movwf	___lmul@multiplicand+1
 10076  173E  0838               	movf	_x32^(0+128),w
 10077  173F  00F5               	movwf	___lmul@multiplicand
 10078  1740  319E  2664  3197   	fcall	___lmul
 10079  1743  0874               	movf	?___lmul+3,w
 10080  1744  0021               	movlb	1	; select bank1
 10081  1745  00BB               	movwf	(_x32+3)^(0+128)
 10082  1746  0873               	movf	?___lmul+2,w
 10083  1747  00BA               	movwf	(_x32+2)^(0+128)
 10084  1748  0872               	movf	?___lmul+1,w
 10085  1749  00B9               	movwf	(_x32+1)^(0+128)
 10086  174A  0871               	movf	?___lmul,w
 10087  174B  00B8               	movwf	_x32^(0+128)
 10088                           
 10089                           ;sample.c: 248: y32=rtAdcValueRcHi;
 10090  174C  0020               	movlb	0	; select bank0
 10091  174D  0859               	movf	_rtAdcValueRcHi,w
 10092  174E  00C7               	movwf	_y32
 10093  174F  085A               	movf	_rtAdcValueRcHi+1,w
 10094  1750  00C8               	movwf	_y32+1
 10095  1751  01C9               	clrf	_y32+2
 10096  1752  01CA               	clrf	_y32+3
 10097                           
 10098                           ;sample.c: 249: y32=y32*3100;
 10099  1753  084A               	movf	_y32+3,w
 10100  1754  00F4               	movwf	___lmul@multiplier+3
 10101  1755  0849               	movf	_y32+2,w
 10102  1756  00F3               	movwf	___lmul@multiplier+2
 10103  1757  0848               	movf	_y32+1,w
 10104  1758  00F2               	movwf	___lmul@multiplier+1
 10105  1759  0847               	movf	_y32,w
 10106  175A  00F1               	movwf	___lmul@multiplier
 10107  175B  3000               	movlw	0
 10108  175C  00F8               	movwf	___lmul@multiplicand+3
 10109  175D  3000               	movlw	0
 10110  175E  00F7               	movwf	___lmul@multiplicand+2
 10111  175F  300C               	movlw	12
 10112  1760  00F6               	movwf	___lmul@multiplicand+1
 10113  1761  301C               	movlw	28
 10114  1762  00F5               	movwf	___lmul@multiplicand
 10115  1763  319E  2664  3197   	fcall	___lmul
 10116  1766  0874               	movf	?___lmul+3,w
 10117  1767  0020               	movlb	0	; select bank0
 10118  1768  00CA               	movwf	_y32+3
 10119  1769  0873               	movf	?___lmul+2,w
 10120  176A  00C9               	movwf	_y32+2
 10121  176B  0872               	movf	?___lmul+1,w
 10122  176C  00C8               	movwf	_y32+1
 10123  176D  0871               	movf	?___lmul,w
 10124  176E  00C7               	movwf	_y32
 10125                           
 10126                           ;sample.c: 250: y32=y32/100;
 10127  176F  3000               	movlw	0
 10128  1770  00F4               	movwf	___lldiv@divisor+3
 10129  1771  3000               	movlw	0
 10130  1772  00F3               	movwf	___lldiv@divisor+2
 10131  1773  3000               	movlw	0
 10132  1774  00F2               	movwf	___lldiv@divisor+1
 10133  1775  3064               	movlw	100
 10134  1776  00F1               	movwf	___lldiv@divisor
 10135  1777  084A               	movf	_y32+3,w
 10136  1778  00F8               	movwf	___lldiv@dividend+3
 10137  1779  0849               	movf	_y32+2,w
 10138  177A  00F7               	movwf	___lldiv@dividend+2
 10139  177B  0848               	movf	_y32+1,w
 10140  177C  00F6               	movwf	___lldiv@dividend+1
 10141  177D  0847               	movf	_y32,w
 10142  177E  00F5               	movwf	___lldiv@dividend
 10143  177F  3191  218A  3197   	fcall	___lldiv
 10144  1782  0874               	movf	?___lldiv+3,w
 10145  1783  0020               	movlb	0	; select bank0
 10146  1784  00CA               	movwf	_y32+3
 10147  1785  0873               	movf	?___lldiv+2,w
 10148  1786  00C9               	movwf	_y32+2
 10149  1787  0872               	movf	?___lldiv+1,w
 10150  1788  00C8               	movwf	_y32+1
 10151  1789  0871               	movf	?___lldiv,w
 10152  178A  00C7               	movwf	_y32
 10153                           
 10154                           ;sample.c: 251: y32=y32-rtAdcValueRcLo;
 10155  178B  0847               	movf	_y32,w
 10156  178C  00A9               	movwf	??_calc_temp_rc
 10157  178D  0848               	movf	_y32+1,w
 10158  178E  00AA               	movwf	??_calc_temp_rc+1
 10159  178F  0849               	movf	_y32+2,w
 10160  1790  00AB               	movwf	??_calc_temp_rc+2
 10161  1791  084A               	movf	_y32+3,w
 10162  1792  00AC               	movwf	??_calc_temp_rc+3
 10163  1793  085B               	movf	_rtAdcValueRcLo,w
 10164  1794  00AD               	movwf	??_calc_temp_rc+4
 10165  1795  085C               	movf	_rtAdcValueRcLo+1,w
 10166  1796  00AE               	movwf	??_calc_temp_rc+5
 10167  1797  01AF               	clrf	??_calc_temp_rc+6
 10168  1798  01B0               	clrf	??_calc_temp_rc+7
 10169  1799  09AD               	comf	??_calc_temp_rc+4,f
 10170  179A  09AE               	comf	??_calc_temp_rc+5,f
 10171  179B  09AF               	comf	??_calc_temp_rc+6,f
 10172  179C  09B0               	comf	??_calc_temp_rc+7,f
 10173  179D  0AAD               	incf	??_calc_temp_rc+4,f
 10174  179E  1903               	skipnz
 10175  179F  0AAE               	incf	??_calc_temp_rc+5,f
 10176  17A0  1903               	skipnz
 10177  17A1  0AAF               	incf	??_calc_temp_rc+6,f
 10178  17A2  1903               	skipnz
 10179  17A3  0AB0               	incf	??_calc_temp_rc+7,f
 10180  17A4  082D               	movf	??_calc_temp_rc+4,w
 10181  17A5  07A9               	addwf	??_calc_temp_rc,f
 10182  17A6  082E               	movf	??_calc_temp_rc+5,w
 10183  17A7  3DAA               	addwfc	??_calc_temp_rc+1,f
 10184  17A8  082F               	movf	??_calc_temp_rc+6,w
 10185  17A9  3DAB               	addwfc	??_calc_temp_rc+2,f
 10186  17AA  0830               	movf	??_calc_temp_rc+7,w
 10187  17AB  3DAC               	addwfc	??_calc_temp_rc+3,f
 10188  17AC  082C               	movf	??_calc_temp_rc+3,w
 10189  17AD  00CA               	movwf	_y32+3
 10190  17AE  082B               	movf	??_calc_temp_rc+2,w
 10191  17AF  00C9               	movwf	_y32+2
 10192  17B0  082A               	movf	??_calc_temp_rc+1,w
 10193  17B1  00C8               	movwf	_y32+1
 10194  17B2  0829               	movf	??_calc_temp_rc,w
 10195  17B3  00C7               	movwf	_y32
 10196                           
 10197                           ;sample.c: 254: y32=x32/y32;
 10198  17B4  084A               	movf	_y32+3,w
 10199  17B5  00F4               	movwf	___lldiv@divisor+3
 10200  17B6  0849               	movf	_y32+2,w
 10201  17B7  00F3               	movwf	___lldiv@divisor+2
 10202  17B8  0848               	movf	_y32+1,w
 10203  17B9  00F2               	movwf	___lldiv@divisor+1
 10204  17BA  0847               	movf	_y32,w
 10205  17BB  00F1               	movwf	___lldiv@divisor
 10206  17BC  0021               	movlb	1	; select bank1
 10207  17BD  083B               	movf	(_x32+3)^(0+128),w
 10208  17BE  00F8               	movwf	___lldiv@dividend+3
 10209  17BF  083A               	movf	(_x32+2)^(0+128),w
 10210  17C0  00F7               	movwf	___lldiv@dividend+2
 10211  17C1  0839               	movf	(_x32+1)^(0+128),w
 10212  17C2  00F6               	movwf	___lldiv@dividend+1
 10213  17C3  0838               	movf	_x32^(0+128),w
 10214  17C4  00F5               	movwf	___lldiv@dividend
 10215  17C5  3191  218A  3197   	fcall	___lldiv
 10216  17C8  0874               	movf	?___lldiv+3,w
 10217  17C9  0020               	movlb	0	; select bank0
 10218  17CA  00CA               	movwf	_y32+3
 10219  17CB  0873               	movf	?___lldiv+2,w
 10220  17CC  00C9               	movwf	_y32+2
 10221  17CD  0872               	movf	?___lldiv+1,w
 10222  17CE  00C8               	movwf	_y32+1
 10223  17CF  0871               	movf	?___lldiv,w
 10224  17D0  00C7               	movwf	_y32
 10225                           
 10226                           ;sample.c: 255: if(y32<2000)y32=2000;
 10227  17D1  084A               	movf	_y32+3,w
 10228  17D2  1D03               	btfss	3,2
 10229  17D3  2FE5               	goto	l5091
 10230  17D4  0849               	movf	_y32+2,w
 10231  17D5  1D03               	btfss	3,2
 10232  17D6  2FE5               	goto	l5091
 10233  17D7  30D0               	movlw	208
 10234  17D8  0247               	subwf	_y32,w
 10235  17D9  3007               	movlw	7
 10236  17DA  3B48               	subwfb	_y32+1,w
 10237  17DB  1803               	btfsc	3,0
 10238  17DC  2FE5               	goto	l5091
 10239  17DD  3000               	movlw	0
 10240  17DE  00CA               	movwf	_y32+3
 10241  17DF  3000               	movlw	0
 10242  17E0  00C9               	movwf	_y32+2
 10243  17E1  3007               	movlw	7
 10244  17E2  00C8               	movwf	_y32+1
 10245  17E3  30D0               	movlw	208
 10246  17E4  00C7               	movwf	_y32
 10247  17E5                     l5091:	
 10248                           
 10249                           ;sample.c: 256: if(y32>25000)y32=25000;
 10250  17E5  084A               	movf	_y32+3,w
 10251  17E6  1D03               	btfss	3,2
 10252  17E7  2FF1               	goto	l5093
 10253  17E8  0849               	movf	_y32+2,w
 10254  17E9  1D03               	btfss	3,2
 10255  17EA  2FF1               	goto	l5093
 10256  17EB  30A9               	movlw	169
 10257  17EC  0247               	subwf	_y32,w
 10258  17ED  3061               	movlw	97
 10259  17EE  3B48               	subwfb	_y32+1,w
 10260  17EF  1C03               	btfss	3,0
 10261  17F0  2FF9               	goto	l652
 10262  17F1                     l5093:	
 10263  17F1  3000               	movlw	0
 10264  17F2  00CA               	movwf	_y32+3
 10265  17F3  3000               	movlw	0
 10266  17F4  00C9               	movwf	_y32+2
 10267  17F5  3061               	movlw	97
 10268  17F6  00C8               	movwf	_y32+1
 10269  17F7  30A8               	movlw	168
 10270  17F8  00C7               	movwf	_y32
 10271  17F9                     l652:	
 10272                           
 10273                           ;sample.c: 258: return (uint16_t)y32;
 10274  17F9  0847               	movf	_y32,w
 10275  17FA  00A5               	movwf	?_calc_temp_rc
 10276  17FB  0848               	movf	_y32+1,w
 10277  17FC  00A6               	movwf	?_calc_temp_rc+1
 10278  17FD  01A7               	clrf	?_calc_temp_rc+2
 10279  17FE  01A8               	clrf	?_calc_temp_rc+3
 10280  17FF  0008               	return
 10281  1800                     __end_of_calc_temp_rc:	
 10282                           
 10283                           	psect	text30
 10284  1290                     __ptext30:	
 10285 ;; *************** function _calc_rs_lo_avg *****************
 10286 ;; Defined at:
 10287 ;;		line 435 in file "src/api/sample.c"
 10288 ;; Parameters:    Size  Location     Type
 10289 ;;  x               2    5[BANK0 ] unsigned int 
 10290 ;; Auto vars:     Size  Location     Type
 10291 ;;  t32             4    7[BANK0 ] unsigned long 
 10292 ;;  i               1   11[BANK0 ] unsigned char 
 10293 ;; Return value:  Size  Location     Type
 10294 ;;                  2    5[BANK0 ] unsigned int 
 10295 ;; Registers used:
 10296 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10297 ;; Tracked objects:
 10298 ;;		On entry : 0/0
 10299 ;;		On exit  : 0/0
 10300 ;;		Unchanged: 0/0
 10301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10302 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10303 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10304 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10305 ;;      Totals:         2       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10306 ;;Total ram usage:        9 bytes
 10307 ;; Hardware stack levels used:    1
 10308 ;; Hardware stack levels required when called:    2
 10309 ;; This function calls:
 10310 ;;		___lldiv
 10311 ;; This function is called by:
 10312 ;;		_main
 10313 ;; This function uses a non-reentrant model
 10314 ;;
 10315                           
 10316                           
 10317                           ;psect for function _calc_rs_lo_avg
 10318  1290                     _calc_rs_lo_avg:	
 10319                           
 10320                           ;sample.c: 437: uint8_t i;;sample.c: 438: uint32_t t32=0;
 10321                           
 10322                           ;incstack = 0
 10323                           ; Regs used in _calc_rs_lo_avg: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10324  1290  3000               	movlw	0
 10325  1291  0020               	movlb	0	; select bank0
 10326  1292  00AA               	movwf	calc_rs_lo_avg@t32+3
 10327  1293  3000               	movlw	0
 10328  1294  00A9               	movwf	calc_rs_lo_avg@t32+2
 10329  1295  3000               	movlw	0
 10330  1296  00A8               	movwf	calc_rs_lo_avg@t32+1
 10331  1297  3000               	movlw	0
 10332  1298  00A7               	movwf	calc_rs_lo_avg@t32
 10333                           
 10334                           ;sample.c: 440: for(i=0;i<6-1;i++){
 10335  1299  01AB               	clrf	calc_rs_lo_avg@i
 10336  129A  3005               	movlw	5
 10337  129B  022B               	subwf	calc_rs_lo_avg@i,w
 10338  129C  1803               	btfsc	3,0
 10339  129D  2AC2               	goto	l4273
 10340  129E                     l4265:	
 10341                           
 10342                           ;sample.c: 441: rsLoAvgBuf[i]=rsLoAvgBuf[i+1];
 10343  129E  352B               	lslf	calc_rs_lo_avg@i,w
 10344  129F  3E02               	addlw	2
 10345  12A0  3EAC               	addlw	(low (_rsLoAvgBuf| 0))& (0+255)
 10346  12A1  0086               	movwf	6
 10347  12A2  0187               	clrf	7
 10348  12A3  352B               	lslf	calc_rs_lo_avg@i,w
 10349  12A4  3EAC               	addlw	(low (_rsLoAvgBuf| 0))& (0+255)
 10350  12A5  0084               	movwf	4
 10351  12A6  0185               	clrf	5
 10352  12A7  3F40               	moviw [0]fsr1
 10353  12A8  3F80               	movwi [0]fsr0
 10354  12A9  3F41               	moviw [1]fsr1
 10355  12AA  3F81               	movwi [1]fsr0
 10356                           
 10357                           ;sample.c: 442: t32+=((uint32_t)rsLoAvgBuf[i]);
 10358  12AB  352B               	lslf	calc_rs_lo_avg@i,w
 10359  12AC  3EAC               	addlw	(low (_rsLoAvgBuf| 0))& (0+255)
 10360  12AD  0086               	movwf	6
 10361  12AE  0187               	clrf	7
 10362  12AF  3F40               	moviw [0]fsr1
 10363  12B0  00FA               	movwf	??_calc_rs_lo_avg
 10364  12B1  3F41               	moviw [1]fsr1
 10365  12B2  00FB               	movwf	??_calc_rs_lo_avg+1
 10366  12B3  087A               	movf	??_calc_rs_lo_avg,w
 10367  12B4  07A7               	addwf	calc_rs_lo_avg@t32,f
 10368  12B5  087B               	movf	??_calc_rs_lo_avg+1,w
 10369  12B6  3DA8               	addwfc	calc_rs_lo_avg@t32+1,f
 10370  12B7  3000               	movlw	0
 10371  12B8  3DA9               	addwfc	calc_rs_lo_avg@t32+2,f
 10372  12B9  3DAA               	addwfc	calc_rs_lo_avg@t32+3,f
 10373  12BA  3001               	movlw	1
 10374  12BB  00FA               	movwf	??_calc_rs_lo_avg
 10375  12BC  087A               	movf	??_calc_rs_lo_avg,w
 10376  12BD  07AB               	addwf	calc_rs_lo_avg@i,f
 10377  12BE  3005               	movlw	5
 10378  12BF  022B               	subwf	calc_rs_lo_avg@i,w
 10379  12C0  1C03               	skipc
 10380  12C1  2A9E               	goto	l4265
 10381  12C2                     l4273:	
 10382                           
 10383                           ;sample.c: 443: };sample.c: 444: rsLoAvgBuf[i]=x;
 10384  12C2  352B               	lslf	calc_rs_lo_avg@i,w
 10385  12C3  3EAC               	addlw	(low (_rsLoAvgBuf| 0))& (0+255)
 10386  12C4  0086               	movwf	6
 10387  12C5  0187               	clrf	7
 10388  12C6  0825               	movf	calc_rs_lo_avg@x,w
 10389  12C7  3FC0               	movwi [0]fsr1
 10390  12C8  0826               	movf	calc_rs_lo_avg@x+1,w
 10391  12C9  3FC1               	movwi [1]fsr1
 10392                           
 10393                           ;sample.c: 445: t32+=x;
 10394  12CA  0825               	movf	calc_rs_lo_avg@x,w
 10395  12CB  07A7               	addwf	calc_rs_lo_avg@t32,f
 10396  12CC  0826               	movf	calc_rs_lo_avg@x+1,w
 10397  12CD  3DA8               	addwfc	calc_rs_lo_avg@t32+1,f
 10398  12CE  3000               	movlw	0
 10399  12CF  3DA9               	addwfc	calc_rs_lo_avg@t32+2,f
 10400  12D0  3DAA               	addwfc	calc_rs_lo_avg@t32+3,f
 10401                           
 10402                           ;sample.c: 446: t32/=6;
 10403  12D1  3000               	movlw	0
 10404  12D2  00F4               	movwf	___lldiv@divisor+3
 10405  12D3  3000               	movlw	0
 10406  12D4  00F3               	movwf	___lldiv@divisor+2
 10407  12D5  3000               	movlw	0
 10408  12D6  00F2               	movwf	___lldiv@divisor+1
 10409  12D7  3006               	movlw	6
 10410  12D8  00F1               	movwf	___lldiv@divisor
 10411  12D9  082A               	movf	calc_rs_lo_avg@t32+3,w
 10412  12DA  00F8               	movwf	___lldiv@dividend+3
 10413  12DB  0829               	movf	calc_rs_lo_avg@t32+2,w
 10414  12DC  00F7               	movwf	___lldiv@dividend+2
 10415  12DD  0828               	movf	calc_rs_lo_avg@t32+1,w
 10416  12DE  00F6               	movwf	___lldiv@dividend+1
 10417  12DF  0827               	movf	calc_rs_lo_avg@t32,w
 10418  12E0  00F5               	movwf	___lldiv@dividend
 10419  12E1  3191  218A         	fcall	___lldiv
 10420  12E3  0874               	movf	?___lldiv+3,w
 10421  12E4  0020               	movlb	0	; select bank0
 10422  12E5  00AA               	movwf	calc_rs_lo_avg@t32+3
 10423  12E6  0873               	movf	?___lldiv+2,w
 10424  12E7  00A9               	movwf	calc_rs_lo_avg@t32+2
 10425  12E8  0872               	movf	?___lldiv+1,w
 10426  12E9  00A8               	movwf	calc_rs_lo_avg@t32+1
 10427  12EA  0871               	movf	?___lldiv,w
 10428  12EB  00A7               	movwf	calc_rs_lo_avg@t32
 10429                           
 10430                           ;sample.c: 447: return (uint16_t)t32;
 10431  12EC  0828               	movf	calc_rs_lo_avg@t32+1,w
 10432  12ED  00A6               	movwf	?_calc_rs_lo_avg+1
 10433  12EE  0827               	movf	calc_rs_lo_avg@t32,w
 10434  12EF  00A5               	movwf	?_calc_rs_lo_avg
 10435  12F0  0008               	return
 10436  12F1                     __end_of_calc_rs_lo_avg:	
 10437                           
 10438                           	psect	text31
 10439  118A                     __ptext31:	
 10440 ;; *************** function ___lldiv *****************
 10441 ;; Defined at:
 10442 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
 10443 ;; Parameters:    Size  Location     Type
 10444 ;;  divisor         4    1[COMMON] unsigned long 
 10445 ;;  dividend        4    5[COMMON] unsigned long 
 10446 ;; Auto vars:     Size  Location     Type
 10447 ;;  quotient        4    0[BANK0 ] unsigned long 
 10448 ;;  counter         1    4[BANK0 ] unsigned char 
 10449 ;; Return value:  Size  Location     Type
 10450 ;;                  4    1[COMMON] unsigned long 
 10451 ;; Registers used:
 10452 ;;		wreg, status,2, status,0
 10453 ;; Tracked objects:
 10454 ;;		On entry : 0/0
 10455 ;;		On exit  : 0/0
 10456 ;;		Unchanged: 0/0
 10457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10458 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10459 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10460 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10461 ;;      Totals:         9       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10462 ;;Total ram usage:       14 bytes
 10463 ;; Hardware stack levels used:    1
 10464 ;; Hardware stack levels required when called:    1
 10465 ;; This function calls:
 10466 ;;		Nothing
 10467 ;; This function is called by:
 10468 ;;		_calc_temp_rs
 10469 ;;		_calc_temp_rc
 10470 ;;		_calc_rs_lo_avg
 10471 ;; This function uses a non-reentrant model
 10472 ;;
 10473                           
 10474                           
 10475                           ;psect for function ___lldiv
 10476  118A                     ___lldiv:	
 10477                           
 10478                           ;incstack = 0
 10479                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 10480  118A  3000               	movlw	0
 10481  118B  0020               	movlb	0	; select bank0
 10482  118C  00A3               	movwf	___lldiv@quotient+3
 10483  118D  3000               	movlw	0
 10484  118E  00A2               	movwf	___lldiv@quotient+2
 10485  118F  3000               	movlw	0
 10486  1190  00A1               	movwf	___lldiv@quotient+1
 10487  1191  3000               	movlw	0
 10488  1192  00A0               	movwf	___lldiv@quotient
 10489  1193  0874               	movf	___lldiv@divisor+3,w
 10490  1194  0473               	iorwf	___lldiv@divisor+2,w
 10491  1195  0472               	iorwf	___lldiv@divisor+1,w
 10492  1196  0471               	iorwf	___lldiv@divisor,w
 10493  1197  1903               	skipnz
 10494  1198  29D4               	goto	l3985
 10495  1199  01A4               	clrf	___lldiv@counter
 10496  119A  0AA4               	incf	___lldiv@counter,f
 10497  119B                     l3971:	
 10498  119B  1BF4               	btfsc	___lldiv@divisor+3,7
 10499  119C  29A9               	goto	l3973
 10500  119D  3001               	movlw	1
 10501  119E                     u2845:	
 10502  119E  35F1               	lslf	___lldiv@divisor,f
 10503  119F  0DF2               	rlf	___lldiv@divisor+1,f
 10504  11A0  0DF3               	rlf	___lldiv@divisor+2,f
 10505  11A1  0DF4               	rlf	___lldiv@divisor+3,f
 10506  11A2  0B89               	decfsz	9,f
 10507  11A3  299E               	goto	u2845
 10508  11A4  3001               	movlw	1
 10509  11A5  00F9               	movwf	??___lldiv
 10510  11A6  0879               	movf	??___lldiv,w
 10511  11A7  07A4               	addwf	___lldiv@counter,f
 10512  11A8  299B               	goto	l3971
 10513  11A9                     l3973:	
 10514  11A9  3001               	movlw	1
 10515  11AA                     u2865:	
 10516  11AA  35A0               	lslf	___lldiv@quotient,f
 10517  11AB  0DA1               	rlf	___lldiv@quotient+1,f
 10518  11AC  0DA2               	rlf	___lldiv@quotient+2,f
 10519  11AD  0DA3               	rlf	___lldiv@quotient+3,f
 10520  11AE  0B89               	decfsz	9,f
 10521  11AF  29AA               	goto	u2865
 10522  11B0  0874               	movf	___lldiv@divisor+3,w
 10523  11B1  0278               	subwf	___lldiv@dividend+3,w
 10524  11B2  1D03               	skipz
 10525  11B3  29BE               	goto	u2875
 10526  11B4  0873               	movf	___lldiv@divisor+2,w
 10527  11B5  0277               	subwf	___lldiv@dividend+2,w
 10528  11B6  1D03               	skipz
 10529  11B7  29BE               	goto	u2875
 10530  11B8  0872               	movf	___lldiv@divisor+1,w
 10531  11B9  0276               	subwf	___lldiv@dividend+1,w
 10532  11BA  1D03               	skipz
 10533  11BB  29BE               	goto	u2875
 10534  11BC  0871               	movf	___lldiv@divisor,w
 10535  11BD  0275               	subwf	___lldiv@dividend,w
 10536  11BE                     u2875:	
 10537  11BE  1C03               	skipc
 10538  11BF  29C9               	goto	l3981
 10539  11C0  0871               	movf	___lldiv@divisor,w
 10540  11C1  02F5               	subwf	___lldiv@dividend,f
 10541  11C2  0872               	movf	___lldiv@divisor+1,w
 10542  11C3  3BF6               	subwfb	___lldiv@dividend+1,f
 10543  11C4  0873               	movf	___lldiv@divisor+2,w
 10544  11C5  3BF7               	subwfb	___lldiv@dividend+2,f
 10545  11C6  0874               	movf	___lldiv@divisor+3,w
 10546  11C7  3BF8               	subwfb	___lldiv@dividend+3,f
 10547  11C8  1420               	bsf	___lldiv@quotient,0
 10548  11C9                     l3981:	
 10549  11C9  3001               	movlw	1
 10550  11CA                     u2885:	
 10551  11CA  36F4               	lsrf	___lldiv@divisor+3,f
 10552  11CB  0CF3               	rrf	___lldiv@divisor+2,f
 10553  11CC  0CF2               	rrf	___lldiv@divisor+1,f
 10554  11CD  0CF1               	rrf	___lldiv@divisor,f
 10555  11CE  0B89               	decfsz	9,f
 10556  11CF  29CA               	goto	u2885
 10557  11D0  3001               	movlw	1
 10558  11D1  02A4               	subwf	___lldiv@counter,f
 10559  11D2  1D03               	btfss	3,2
 10560  11D3  29A9               	goto	l3973
 10561  11D4                     l3985:	
 10562  11D4  0823               	movf	___lldiv@quotient+3,w
 10563  11D5  00F4               	movwf	?___lldiv+3
 10564  11D6  0822               	movf	___lldiv@quotient+2,w
 10565  11D7  00F3               	movwf	?___lldiv+2
 10566  11D8  0821               	movf	___lldiv@quotient+1,w
 10567  11D9  00F2               	movwf	?___lldiv+1
 10568  11DA  0820               	movf	___lldiv@quotient,w
 10569  11DB  00F1               	movwf	?___lldiv
 10570  11DC  0008               	return
 10571  11DD                     __end_of___lldiv:	
 10572                           
 10573                           	psect	text32
 10574  08E4                     __ptext32:	
 10575 ;; *************** function _calc_expect_vout_adc_value *****************
 10576 ;; Defined at:
 10577 ;;		line 452 in file "src/api/sample.c"
 10578 ;; Parameters:    Size  Location     Type
 10579 ;;  x               2   18[BANK0 ] unsigned int 
 10580 ;; Auto vars:     Size  Location     Type
 10581 ;;  t32             4   34[BANK0 ] long 
 10582 ;;  i               1   38[BANK0 ] unsigned char 
 10583 ;; Return value:  Size  Location     Type
 10584 ;;                  2   18[BANK0 ] unsigned int 
 10585 ;; Registers used:
 10586 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10587 ;; Tracked objects:
 10588 ;;		On entry : 0/0
 10589 ;;		On exit  : 0/0
 10590 ;;		Unchanged: 0/0
 10591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10592 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10593 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10594 ;;      Temps:          0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10595 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10596 ;;Total ram usage:       21 bytes
 10597 ;; Hardware stack levels used:    1
 10598 ;; Hardware stack levels required when called:    2
 10599 ;; This function calls:
 10600 ;;		___aldiv
 10601 ;;		___lmul
 10602 ;; This function is called by:
 10603 ;;		_main
 10604 ;; This function uses a non-reentrant model
 10605 ;;
 10606                           
 10607                           
 10608                           ;psect for function _calc_expect_vout_adc_value
 10609  08E4                     _calc_expect_vout_adc_value:	
 10610                           
 10611                           ;sample.c: 455: uint8_t i;;sample.c: 456: int32_t t32;;sample.c: 459: for (i = 0; i < 30
      +                          -1; i++) {
 10612                           
 10613                           ;incstack = 0
 10614                           ; Regs used in _calc_expect_vout_adc_value: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 10615  08E4  0020               	movlb	0	; select bank0
 10616  08E5  01C6               	clrf	calc_expect_vout_adc_value@i
 10617  08E6  301D               	movlw	29
 10618  08E7  0246               	subwf	calc_expect_vout_adc_value@i,w
 10619  08E8  1803               	btfsc	3,0
 10620  08E9  2947               	goto	l5169
 10621  08EA                     l5159:	
 10622                           
 10623                           ;sample.c: 460: if(sysData.calibRsAdc[i]<sysData.calibRsAdc[i+1]){
 10624  08EA  0846               	movf	calc_expect_vout_adc_value@i,w
 10625  08EB  00B4               	movwf	??_calc_expect_vout_adc_value
 10626  08EC  01B5               	clrf	??_calc_expect_vout_adc_value+1
 10627  08ED  35B4               	lslf	??_calc_expect_vout_adc_value,f
 10628  08EE  0DB5               	rlf	??_calc_expect_vout_adc_value+1,f
 10629  08EF  0834               	movf	??_calc_expect_vout_adc_value,w
 10630  08F0  3E02               	addlw	2
 10631  08F1  00B6               	movwf	??_calc_expect_vout_adc_value+2
 10632  08F2  3000               	movlw	0
 10633  08F3  3D35               	addwfc	??_calc_expect_vout_adc_value+1,w
 10634  08F4  00B7               	movwf	??_calc_expect_vout_adc_value+3
 10635  08F5  3066               	movlw	102
 10636  08F6  00B8               	movwf	??_calc_expect_vout_adc_value+4
 10637  08F7  3023               	movlw	35
 10638  08F8  00B9               	movwf	??_calc_expect_vout_adc_value+5
 10639  08F9  0836               	movf	??_calc_expect_vout_adc_value+2,w
 10640  08FA  0738               	addwf	??_calc_expect_vout_adc_value+4,w
 10641  08FB  0086               	movwf	6
 10642  08FC  0837               	movf	??_calc_expect_vout_adc_value+3,w
 10643  08FD  3D39               	addwfc	??_calc_expect_vout_adc_value+5,w
 10644  08FE  0087               	movwf	7
 10645  08FF  3F40               	moviw [0]fsr1
 10646  0900  00BA               	movwf	??_calc_expect_vout_adc_value+6
 10647  0901  3F41               	moviw [1]fsr1
 10648  0902  00BB               	movwf	??_calc_expect_vout_adc_value+7
 10649  0903  0846               	movf	calc_expect_vout_adc_value@i,w
 10650  0904  00BC               	movwf	??_calc_expect_vout_adc_value+8
 10651  0905  01BD               	clrf	??_calc_expect_vout_adc_value+9
 10652  0906  35BC               	lslf	??_calc_expect_vout_adc_value+8,f
 10653  0907  0DBD               	rlf	??_calc_expect_vout_adc_value+9,f
 10654  0908  3066               	movlw	102
 10655  0909  00BE               	movwf	??_calc_expect_vout_adc_value+10
 10656  090A  3023               	movlw	35
 10657  090B  00BF               	movwf	??_calc_expect_vout_adc_value+11
 10658  090C  083C               	movf	??_calc_expect_vout_adc_value+8,w
 10659  090D  073E               	addwf	??_calc_expect_vout_adc_value+10,w
 10660  090E  0086               	movwf	6
 10661  090F  083D               	movf	??_calc_expect_vout_adc_value+9,w
 10662  0910  3D3F               	addwfc	??_calc_expect_vout_adc_value+11,w
 10663  0911  0087               	movwf	7
 10664  0912  3F40               	moviw [0]fsr1
 10665  0913  00C0               	movwf	??_calc_expect_vout_adc_value+12
 10666  0914  3F41               	moviw [1]fsr1
 10667  0915  00C1               	movwf	??_calc_expect_vout_adc_value+13
 10668  0916  083B               	movf	??_calc_expect_vout_adc_value+7,w
 10669  0917  0241               	subwf	??_calc_expect_vout_adc_value+13,w
 10670  0918  1D03               	skipz
 10671  0919  291C               	goto	u4695
 10672  091A  083A               	movf	??_calc_expect_vout_adc_value+6,w
 10673  091B  0240               	subwf	??_calc_expect_vout_adc_value+12,w
 10674  091C                     u4695:	
 10675  091C  1803               	skipnc
 10676  091D  2947               	goto	l5169
 10677                           
 10678                           ;sample.c: 461: if (x <= sysData.calibRsAdc[i+1])break;
 10679  091E  0846               	movf	calc_expect_vout_adc_value@i,w
 10680  091F  00B4               	movwf	??_calc_expect_vout_adc_value
 10681  0920  01B5               	clrf	??_calc_expect_vout_adc_value+1
 10682  0921  35B4               	lslf	??_calc_expect_vout_adc_value,f
 10683  0922  0DB5               	rlf	??_calc_expect_vout_adc_value+1,f
 10684  0923  0834               	movf	??_calc_expect_vout_adc_value,w
 10685  0924  3E02               	addlw	2
 10686  0925  00B6               	movwf	??_calc_expect_vout_adc_value+2
 10687  0926  3000               	movlw	0
 10688  0927  3D35               	addwfc	??_calc_expect_vout_adc_value+1,w
 10689  0928  00B7               	movwf	??_calc_expect_vout_adc_value+3
 10690  0929  3066               	movlw	102
 10691  092A  00B8               	movwf	??_calc_expect_vout_adc_value+4
 10692  092B  3023               	movlw	35
 10693  092C  00B9               	movwf	??_calc_expect_vout_adc_value+5
 10694  092D  0836               	movf	??_calc_expect_vout_adc_value+2,w
 10695  092E  0738               	addwf	??_calc_expect_vout_adc_value+4,w
 10696  092F  0086               	movwf	6
 10697  0930  0837               	movf	??_calc_expect_vout_adc_value+3,w
 10698  0931  3D39               	addwfc	??_calc_expect_vout_adc_value+5,w
 10699  0932  0087               	movwf	7
 10700  0933  3F40               	moviw [0]fsr1
 10701  0934  00BA               	movwf	??_calc_expect_vout_adc_value+6
 10702  0935  3F41               	moviw [1]fsr1
 10703  0936  00BB               	movwf	??_calc_expect_vout_adc_value+7
 10704  0937  0833               	movf	calc_expect_vout_adc_value@x+1,w
 10705  0938  023B               	subwf	??_calc_expect_vout_adc_value+7,w
 10706  0939  1D03               	skipz
 10707  093A  293D               	goto	u4705
 10708  093B  0832               	movf	calc_expect_vout_adc_value@x,w
 10709  093C  023A               	subwf	??_calc_expect_vout_adc_value+6,w
 10710  093D                     u4705:	
 10711  093D  1803               	btfsc	3,0
 10712  093E  2947               	goto	l5169
 10713                           
 10714                           ;sample.c: 464: break;
 10715                           
 10716                           ;sample.c: 462: }else{
 10717  093F  3001               	movlw	1
 10718  0940  00B4               	movwf	??_calc_expect_vout_adc_value
 10719  0941  0834               	movf	??_calc_expect_vout_adc_value,w
 10720  0942  07C6               	addwf	calc_expect_vout_adc_value@i,f
 10721  0943  301D               	movlw	29
 10722  0944  0246               	subwf	calc_expect_vout_adc_value@i,w
 10723  0945  1C03               	skipc
 10724  0946  28EA               	goto	l5159
 10725  0947                     l5169:	
 10726                           
 10727                           ;sample.c: 465: };sample.c: 466: };sample.c: 468: if (i > 30-2)i=30-2;
 10728  0947  301D               	movlw	29
 10729  0948  0246               	subwf	calc_expect_vout_adc_value@i,w
 10730  0949  1C03               	skipc
 10731  094A  294F               	goto	l5173
 10732  094B  301C               	movlw	28
 10733  094C  00B4               	movwf	??_calc_expect_vout_adc_value
 10734  094D  0834               	movf	??_calc_expect_vout_adc_value,w
 10735  094E  00C6               	movwf	calc_expect_vout_adc_value@i
 10736  094F                     l5173:	
 10737                           
 10738                           ;sample.c: 469: y1=sysData.calibVoMV[i+1];
 10739  094F  0846               	movf	calc_expect_vout_adc_value@i,w
 10740  0950  00B4               	movwf	??_calc_expect_vout_adc_value
 10741  0951  01B5               	clrf	??_calc_expect_vout_adc_value+1
 10742  0952  35B4               	lslf	??_calc_expect_vout_adc_value,f
 10743  0953  0DB5               	rlf	??_calc_expect_vout_adc_value+1,f
 10744  0954  0834               	movf	??_calc_expect_vout_adc_value,w
 10745  0955  3E02               	addlw	2
 10746  0956  00B6               	movwf	??_calc_expect_vout_adc_value+2
 10747  0957  3000               	movlw	0
 10748  0958  3D35               	addwfc	??_calc_expect_vout_adc_value+1,w
 10749  0959  00B7               	movwf	??_calc_expect_vout_adc_value+3
 10750  095A  30A2               	movlw	162
 10751  095B  00B8               	movwf	??_calc_expect_vout_adc_value+4
 10752  095C  3023               	movlw	35
 10753  095D  00B9               	movwf	??_calc_expect_vout_adc_value+5
 10754  095E  0836               	movf	??_calc_expect_vout_adc_value+2,w
 10755  095F  0738               	addwf	??_calc_expect_vout_adc_value+4,w
 10756  0960  0086               	movwf	6
 10757  0961  0837               	movf	??_calc_expect_vout_adc_value+3,w
 10758  0962  3D39               	addwfc	??_calc_expect_vout_adc_value+5,w
 10759  0963  0087               	movwf	7
 10760  0964  3F40               	moviw [0]fsr1
 10761  0965  00BA               	movwf	??_calc_expect_vout_adc_value+6
 10762  0966  3F41               	moviw [1]fsr1
 10763  0967  00BB               	movwf	??_calc_expect_vout_adc_value+7
 10764  0968  083A               	movf	??_calc_expect_vout_adc_value+6,w
 10765  0969  0021               	movlb	1	; select bank1
 10766  096A  00C0               	movwf	_y1^(0+128)
 10767  096B  0020               	movlb	0	; select bank0
 10768  096C  083B               	movf	??_calc_expect_vout_adc_value+7,w
 10769  096D  0021               	movlb	1	; select bank1
 10770  096E  00C1               	movwf	(_y1^(0+128)+1)
 10771  096F  01C2               	clrf	(_y1^(0+128)+2)
 10772  0970  01C3               	clrf	(_y1^(0+128)+3)
 10773                           
 10774                           ;sample.c: 470: y0=sysData.calibVoMV[i];
 10775  0971  0020               	movlb	0	; select bank0
 10776  0972  0846               	movf	calc_expect_vout_adc_value@i,w
 10777  0973  00B4               	movwf	??_calc_expect_vout_adc_value
 10778  0974  01B5               	clrf	??_calc_expect_vout_adc_value+1
 10779  0975  35B4               	lslf	??_calc_expect_vout_adc_value,f
 10780  0976  0DB5               	rlf	??_calc_expect_vout_adc_value+1,f
 10781  0977  30A2               	movlw	162
 10782  0978  00B6               	movwf	??_calc_expect_vout_adc_value+2
 10783  0979  3023               	movlw	35
 10784  097A  00B7               	movwf	??_calc_expect_vout_adc_value+3
 10785  097B  0834               	movf	??_calc_expect_vout_adc_value,w
 10786  097C  0736               	addwf	??_calc_expect_vout_adc_value+2,w
 10787  097D  0086               	movwf	6
 10788  097E  0835               	movf	??_calc_expect_vout_adc_value+1,w
 10789  097F  3D37               	addwfc	??_calc_expect_vout_adc_value+3,w
 10790  0980  0087               	movwf	7
 10791  0981  3F40               	moviw [0]fsr1
 10792  0982  00B8               	movwf	??_calc_expect_vout_adc_value+4
 10793  0983  3F41               	moviw [1]fsr1
 10794  0984  00B9               	movwf	??_calc_expect_vout_adc_value+5
 10795  0985  0838               	movf	??_calc_expect_vout_adc_value+4,w
 10796  0986  00CF               	movwf	_y0
 10797  0987  0839               	movf	??_calc_expect_vout_adc_value+5,w
 10798  0988  00D0               	movwf	_y0+1
 10799  0989  01D1               	clrf	_y0+2
 10800  098A  01D2               	clrf	_y0+3
 10801                           
 10802                           ;sample.c: 473: x1=sysData.calibRsAdc[i+1];
 10803  098B  0846               	movf	calc_expect_vout_adc_value@i,w
 10804  098C  00B4               	movwf	??_calc_expect_vout_adc_value
 10805  098D  01B5               	clrf	??_calc_expect_vout_adc_value+1
 10806  098E  35B4               	lslf	??_calc_expect_vout_adc_value,f
 10807  098F  0DB5               	rlf	??_calc_expect_vout_adc_value+1,f
 10808  0990  0834               	movf	??_calc_expect_vout_adc_value,w
 10809  0991  3E02               	addlw	2
 10810  0992  00B6               	movwf	??_calc_expect_vout_adc_value+2
 10811  0993  3000               	movlw	0
 10812  0994  3D35               	addwfc	??_calc_expect_vout_adc_value+1,w
 10813  0995  00B7               	movwf	??_calc_expect_vout_adc_value+3
 10814  0996  3066               	movlw	102
 10815  0997  00B8               	movwf	??_calc_expect_vout_adc_value+4
 10816  0998  3023               	movlw	35
 10817  0999  00B9               	movwf	??_calc_expect_vout_adc_value+5
 10818  099A  0836               	movf	??_calc_expect_vout_adc_value+2,w
 10819  099B  0738               	addwf	??_calc_expect_vout_adc_value+4,w
 10820  099C  0086               	movwf	6
 10821  099D  0837               	movf	??_calc_expect_vout_adc_value+3,w
 10822  099E  3D39               	addwfc	??_calc_expect_vout_adc_value+5,w
 10823  099F  0087               	movwf	7
 10824  09A0  3F40               	moviw [0]fsr1
 10825  09A1  00BA               	movwf	??_calc_expect_vout_adc_value+6
 10826  09A2  3F41               	moviw [1]fsr1
 10827  09A3  00BB               	movwf	??_calc_expect_vout_adc_value+7
 10828  09A4  083A               	movf	??_calc_expect_vout_adc_value+6,w
 10829  09A5  0021               	movlb	1	; select bank1
 10830  09A6  00BC               	movwf	_x1^(0+128)
 10831  09A7  0020               	movlb	0	; select bank0
 10832  09A8  083B               	movf	??_calc_expect_vout_adc_value+7,w
 10833  09A9  0021               	movlb	1	; select bank1
 10834  09AA  00BD               	movwf	(_x1^(0+128)+1)
 10835  09AB  01BE               	clrf	(_x1^(0+128)+2)
 10836  09AC  01BF               	clrf	(_x1^(0+128)+3)
 10837                           
 10838                           ;sample.c: 474: x0=sysData.calibRsAdc[i];
 10839  09AD  0020               	movlb	0	; select bank0
 10840  09AE  0846               	movf	calc_expect_vout_adc_value@i,w
 10841  09AF  00B4               	movwf	??_calc_expect_vout_adc_value
 10842  09B0  01B5               	clrf	??_calc_expect_vout_adc_value+1
 10843  09B1  35B4               	lslf	??_calc_expect_vout_adc_value,f
 10844  09B2  0DB5               	rlf	??_calc_expect_vout_adc_value+1,f
 10845  09B3  3066               	movlw	102
 10846  09B4  00B6               	movwf	??_calc_expect_vout_adc_value+2
 10847  09B5  3023               	movlw	35
 10848  09B6  00B7               	movwf	??_calc_expect_vout_adc_value+3
 10849  09B7  0834               	movf	??_calc_expect_vout_adc_value,w
 10850  09B8  0736               	addwf	??_calc_expect_vout_adc_value+2,w
 10851  09B9  0086               	movwf	6
 10852  09BA  0835               	movf	??_calc_expect_vout_adc_value+1,w
 10853  09BB  3D37               	addwfc	??_calc_expect_vout_adc_value+3,w
 10854  09BC  0087               	movwf	7
 10855  09BD  3F40               	moviw [0]fsr1
 10856  09BE  00B8               	movwf	??_calc_expect_vout_adc_value+4
 10857  09BF  3F41               	moviw [1]fsr1
 10858  09C0  00B9               	movwf	??_calc_expect_vout_adc_value+5
 10859  09C1  0838               	movf	??_calc_expect_vout_adc_value+4,w
 10860  09C2  00CB               	movwf	_x0
 10861  09C3  0839               	movf	??_calc_expect_vout_adc_value+5,w
 10862  09C4  00CC               	movwf	_x0+1
 10863  09C5  01CD               	clrf	_x0+2
 10864  09C6  01CE               	clrf	_x0+3
 10865                           
 10866                           ;sample.c: 476: if(x<=x0 && i==0)return (uint16_t)y0;
 10867  09C7  0832               	movf	calc_expect_vout_adc_value@x,w
 10868  09C8  00B4               	movwf	??_calc_expect_vout_adc_value
 10869  09C9  0833               	movf	calc_expect_vout_adc_value@x+1,w
 10870  09CA  00B5               	movwf	??_calc_expect_vout_adc_value+1
 10871  09CB  01B6               	clrf	??_calc_expect_vout_adc_value+2
 10872  09CC  01B7               	clrf	??_calc_expect_vout_adc_value+3
 10873  09CD  084E               	movf	_x0+3,w
 10874  09CE  3A80               	xorlw	128
 10875  09CF  00B8               	movwf	??_calc_expect_vout_adc_value+4
 10876  09D0  0837               	movf	??_calc_expect_vout_adc_value+3,w
 10877  09D1  3A80               	xorlw	128
 10878  09D2  0238               	subwf	??_calc_expect_vout_adc_value+4,w
 10879  09D3  1D03               	skipz
 10880  09D4  29DF               	goto	u4733
 10881  09D5  0836               	movf	??_calc_expect_vout_adc_value+2,w
 10882  09D6  024D               	subwf	_x0+2,w
 10883  09D7  1D03               	skipz
 10884  09D8  29DF               	goto	u4733
 10885  09D9  0835               	movf	??_calc_expect_vout_adc_value+1,w
 10886  09DA  024C               	subwf	_x0+1,w
 10887  09DB  1D03               	skipz
 10888  09DC  29DF               	goto	u4733
 10889  09DD  0834               	movf	??_calc_expect_vout_adc_value,w
 10890  09DE  024B               	subwf	_x0,w
 10891  09DF                     u4733:	
 10892  09DF  1C03               	skipc
 10893  09E0  29E9               	goto	l5187
 10894  09E1  0846               	movf	calc_expect_vout_adc_value@i,w
 10895  09E2  1D03               	btfss	3,2
 10896  09E3  29E9               	goto	l5187
 10897  09E4  0850               	movf	_y0+1,w
 10898  09E5  00B3               	movwf	?_calc_expect_vout_adc_value+1
 10899  09E6  084F               	movf	_y0,w
 10900  09E7  00B2               	movwf	?_calc_expect_vout_adc_value
 10901  09E8  0008               	return
 10902  09E9                     l5187:	
 10903                           
 10904                           ;sample.c: 477: if(x1<=x0)return (uint16_t)y0;
 10905  09E9  084E               	movf	_x0+3,w
 10906  09EA  3A80               	xorlw	128
 10907  09EB  00B4               	movwf	??_calc_expect_vout_adc_value
 10908  09EC  0021               	movlb	1	; select bank1
 10909  09ED  083F               	movf	(_x1+3)^(0+128),w
 10910  09EE  3A80               	xorlw	128
 10911  09EF  0020               	movlb	0	; select bank0
 10912  09F0  0234               	subwf	??_calc_expect_vout_adc_value,w
 10913  09F1  1D03               	skipz
 10914  09F2  2A03               	goto	u4753
 10915  09F3  0021               	movlb	1	; select bank1
 10916  09F4  083E               	movf	(_x1+2)^(0+128),w
 10917  09F5  0020               	movlb	0	; select bank0
 10918  09F6  024D               	subwf	_x0+2,w
 10919  09F7  1D03               	skipz
 10920  09F8  2A03               	goto	u4753
 10921  09F9  0021               	movlb	1	; select bank1
 10922  09FA  083D               	movf	(_x1+1)^(0+128),w
 10923  09FB  0020               	movlb	0	; select bank0
 10924  09FC  024C               	subwf	_x0+1,w
 10925  09FD  1D03               	skipz
 10926  09FE  2A03               	goto	u4753
 10927  09FF  0021               	movlb	1	; select bank1
 10928  0A00  083C               	movf	_x1^(0+128),w
 10929  0A01  0020               	movlb	0	; select bank0
 10930  0A02  024B               	subwf	_x0,w
 10931  0A03                     u4753:	
 10932  0A03  1C03               	skipc
 10933  0A04  2A0A               	goto	l5193
 10934  0A05  0850               	movf	_y0+1,w
 10935  0A06  00B3               	movwf	?_calc_expect_vout_adc_value+1
 10936  0A07  084F               	movf	_y0,w
 10937  0A08  00B2               	movwf	?_calc_expect_vout_adc_value
 10938  0A09  0008               	return
 10939  0A0A                     l5193:	
 10940                           
 10941                           ;sample.c: 480: t32=(x-x0);
 10942  0A0A  094B               	comf	_x0,w
 10943  0A0B  00B4               	movwf	??_calc_expect_vout_adc_value
 10944  0A0C  094C               	comf	_x0+1,w
 10945  0A0D  00B5               	movwf	??_calc_expect_vout_adc_value+1
 10946  0A0E  094D               	comf	_x0+2,w
 10947  0A0F  00B6               	movwf	??_calc_expect_vout_adc_value+2
 10948  0A10  094E               	comf	_x0+3,w
 10949  0A11  00B7               	movwf	??_calc_expect_vout_adc_value+3
 10950  0A12  0AB4               	incf	??_calc_expect_vout_adc_value,f
 10951  0A13  1903               	skipnz
 10952  0A14  0AB5               	incf	??_calc_expect_vout_adc_value+1,f
 10953  0A15  1903               	skipnz
 10954  0A16  0AB6               	incf	??_calc_expect_vout_adc_value+2,f
 10955  0A17  1903               	skipnz
 10956  0A18  0AB7               	incf	??_calc_expect_vout_adc_value+3,f
 10957  0A19  0832               	movf	calc_expect_vout_adc_value@x,w
 10958  0A1A  00B8               	movwf	??_calc_expect_vout_adc_value+4
 10959  0A1B  0833               	movf	calc_expect_vout_adc_value@x+1,w
 10960  0A1C  00B9               	movwf	??_calc_expect_vout_adc_value+5
 10961  0A1D  01BA               	clrf	??_calc_expect_vout_adc_value+6
 10962  0A1E  01BB               	clrf	??_calc_expect_vout_adc_value+7
 10963  0A1F  0838               	movf	??_calc_expect_vout_adc_value+4,w
 10964  0A20  07B4               	addwf	??_calc_expect_vout_adc_value,f
 10965  0A21  0839               	movf	??_calc_expect_vout_adc_value+5,w
 10966  0A22  3DB5               	addwfc	??_calc_expect_vout_adc_value+1,f
 10967  0A23  083A               	movf	??_calc_expect_vout_adc_value+6,w
 10968  0A24  3DB6               	addwfc	??_calc_expect_vout_adc_value+2,f
 10969  0A25  083B               	movf	??_calc_expect_vout_adc_value+7,w
 10970  0A26  3DB7               	addwfc	??_calc_expect_vout_adc_value+3,f
 10971  0A27  0837               	movf	??_calc_expect_vout_adc_value+3,w
 10972  0A28  00C5               	movwf	calc_expect_vout_adc_value@t32+3
 10973  0A29  0836               	movf	??_calc_expect_vout_adc_value+2,w
 10974  0A2A  00C4               	movwf	calc_expect_vout_adc_value@t32+2
 10975  0A2B  0835               	movf	??_calc_expect_vout_adc_value+1,w
 10976  0A2C  00C3               	movwf	calc_expect_vout_adc_value@t32+1
 10977  0A2D  0834               	movf	??_calc_expect_vout_adc_value,w
 10978  0A2E  00C2               	movwf	calc_expect_vout_adc_value@t32
 10979                           
 10980                           ;sample.c: 481: t32=t32*(y1-y0);
 10981  0A2F  0021               	movlb	1	; select bank1
 10982  0A30  0840               	movf	_y1^(0+128),w
 10983  0A31  0020               	movlb	0	; select bank0
 10984  0A32  00B4               	movwf	??_calc_expect_vout_adc_value
 10985  0A33  0021               	movlb	1	; select bank1
 10986  0A34  0841               	movf	(_y1+1)^(0+128),w
 10987  0A35  0020               	movlb	0	; select bank0
 10988  0A36  00B5               	movwf	??_calc_expect_vout_adc_value+1
 10989  0A37  0021               	movlb	1	; select bank1
 10990  0A38  0842               	movf	(_y1+2)^(0+128),w
 10991  0A39  0020               	movlb	0	; select bank0
 10992  0A3A  00B6               	movwf	??_calc_expect_vout_adc_value+2
 10993  0A3B  0021               	movlb	1	; select bank1
 10994  0A3C  0843               	movf	(_y1+3)^(0+128),w
 10995  0A3D  0020               	movlb	0	; select bank0
 10996  0A3E  00B7               	movwf	??_calc_expect_vout_adc_value+3
 10997  0A3F  094F               	comf	_y0,w
 10998  0A40  00B8               	movwf	??_calc_expect_vout_adc_value+4
 10999  0A41  0950               	comf	_y0+1,w
 11000  0A42  00B9               	movwf	??_calc_expect_vout_adc_value+5
 11001  0A43  0951               	comf	_y0+2,w
 11002  0A44  00BA               	movwf	??_calc_expect_vout_adc_value+6
 11003  0A45  0952               	comf	_y0+3,w
 11004  0A46  00BB               	movwf	??_calc_expect_vout_adc_value+7
 11005  0A47  0AB8               	incf	??_calc_expect_vout_adc_value+4,f
 11006  0A48  1903               	skipnz
 11007  0A49  0AB9               	incf	??_calc_expect_vout_adc_value+5,f
 11008  0A4A  1903               	skipnz
 11009  0A4B  0ABA               	incf	??_calc_expect_vout_adc_value+6,f
 11010  0A4C  1903               	skipnz
 11011  0A4D  0ABB               	incf	??_calc_expect_vout_adc_value+7,f
 11012  0A4E  0838               	movf	??_calc_expect_vout_adc_value+4,w
 11013  0A4F  07B4               	addwf	??_calc_expect_vout_adc_value,f
 11014  0A50  0839               	movf	??_calc_expect_vout_adc_value+5,w
 11015  0A51  3DB5               	addwfc	??_calc_expect_vout_adc_value+1,f
 11016  0A52  083A               	movf	??_calc_expect_vout_adc_value+6,w
 11017  0A53  3DB6               	addwfc	??_calc_expect_vout_adc_value+2,f
 11018  0A54  083B               	movf	??_calc_expect_vout_adc_value+7,w
 11019  0A55  3DB7               	addwfc	??_calc_expect_vout_adc_value+3,f
 11020  0A56  0837               	movf	??_calc_expect_vout_adc_value+3,w
 11021  0A57  00F4               	movwf	___lmul@multiplier+3
 11022  0A58  0836               	movf	??_calc_expect_vout_adc_value+2,w
 11023  0A59  00F3               	movwf	___lmul@multiplier+2
 11024  0A5A  0835               	movf	??_calc_expect_vout_adc_value+1,w
 11025  0A5B  00F2               	movwf	___lmul@multiplier+1
 11026  0A5C  0834               	movf	??_calc_expect_vout_adc_value,w
 11027  0A5D  00F1               	movwf	___lmul@multiplier
 11028  0A5E  0845               	movf	calc_expect_vout_adc_value@t32+3,w
 11029  0A5F  00F8               	movwf	___lmul@multiplicand+3
 11030  0A60  0844               	movf	calc_expect_vout_adc_value@t32+2,w
 11031  0A61  00F7               	movwf	___lmul@multiplicand+2
 11032  0A62  0843               	movf	calc_expect_vout_adc_value@t32+1,w
 11033  0A63  00F6               	movwf	___lmul@multiplicand+1
 11034  0A64  0842               	movf	calc_expect_vout_adc_value@t32,w
 11035  0A65  00F5               	movwf	___lmul@multiplicand
 11036  0A66  319E  2664  3188   	fcall	___lmul
 11037  0A69  0874               	movf	?___lmul+3,w
 11038  0A6A  0020               	movlb	0	; select bank0
 11039  0A6B  00C5               	movwf	calc_expect_vout_adc_value@t32+3
 11040  0A6C  0873               	movf	?___lmul+2,w
 11041  0A6D  00C4               	movwf	calc_expect_vout_adc_value@t32+2
 11042  0A6E  0872               	movf	?___lmul+1,w
 11043  0A6F  00C3               	movwf	calc_expect_vout_adc_value@t32+1
 11044  0A70  0871               	movf	?___lmul,w
 11045  0A71  00C2               	movwf	calc_expect_vout_adc_value@t32
 11046                           
 11047                           ;sample.c: 482: t32=t32/(x1-x0);
 11048  0A72  0021               	movlb	1	; select bank1
 11049  0A73  083C               	movf	_x1^(0+128),w
 11050  0A74  0020               	movlb	0	; select bank0
 11051  0A75  00B4               	movwf	??_calc_expect_vout_adc_value
 11052  0A76  0021               	movlb	1	; select bank1
 11053  0A77  083D               	movf	(_x1+1)^(0+128),w
 11054  0A78  0020               	movlb	0	; select bank0
 11055  0A79  00B5               	movwf	??_calc_expect_vout_adc_value+1
 11056  0A7A  0021               	movlb	1	; select bank1
 11057  0A7B  083E               	movf	(_x1+2)^(0+128),w
 11058  0A7C  0020               	movlb	0	; select bank0
 11059  0A7D  00B6               	movwf	??_calc_expect_vout_adc_value+2
 11060  0A7E  0021               	movlb	1	; select bank1
 11061  0A7F  083F               	movf	(_x1+3)^(0+128),w
 11062  0A80  0020               	movlb	0	; select bank0
 11063  0A81  00B7               	movwf	??_calc_expect_vout_adc_value+3
 11064  0A82  094B               	comf	_x0,w
 11065  0A83  00B8               	movwf	??_calc_expect_vout_adc_value+4
 11066  0A84  094C               	comf	_x0+1,w
 11067  0A85  00B9               	movwf	??_calc_expect_vout_adc_value+5
 11068  0A86  094D               	comf	_x0+2,w
 11069  0A87  00BA               	movwf	??_calc_expect_vout_adc_value+6
 11070  0A88  094E               	comf	_x0+3,w
 11071  0A89  00BB               	movwf	??_calc_expect_vout_adc_value+7
 11072  0A8A  0AB8               	incf	??_calc_expect_vout_adc_value+4,f
 11073  0A8B  1903               	skipnz
 11074  0A8C  0AB9               	incf	??_calc_expect_vout_adc_value+5,f
 11075  0A8D  1903               	skipnz
 11076  0A8E  0ABA               	incf	??_calc_expect_vout_adc_value+6,f
 11077  0A8F  1903               	skipnz
 11078  0A90  0ABB               	incf	??_calc_expect_vout_adc_value+7,f
 11079  0A91  0838               	movf	??_calc_expect_vout_adc_value+4,w
 11080  0A92  07B4               	addwf	??_calc_expect_vout_adc_value,f
 11081  0A93  0839               	movf	??_calc_expect_vout_adc_value+5,w
 11082  0A94  3DB5               	addwfc	??_calc_expect_vout_adc_value+1,f
 11083  0A95  083A               	movf	??_calc_expect_vout_adc_value+6,w
 11084  0A96  3DB6               	addwfc	??_calc_expect_vout_adc_value+2,f
 11085  0A97  083B               	movf	??_calc_expect_vout_adc_value+7,w
 11086  0A98  3DB7               	addwfc	??_calc_expect_vout_adc_value+3,f
 11087  0A99  0837               	movf	??_calc_expect_vout_adc_value+3,w
 11088  0A9A  00A7               	movwf	___aldiv@divisor+3
 11089  0A9B  0836               	movf	??_calc_expect_vout_adc_value+2,w
 11090  0A9C  00A6               	movwf	___aldiv@divisor+2
 11091  0A9D  0835               	movf	??_calc_expect_vout_adc_value+1,w
 11092  0A9E  00A5               	movwf	___aldiv@divisor+1
 11093  0A9F  0834               	movf	??_calc_expect_vout_adc_value,w
 11094  0AA0  00A4               	movwf	___aldiv@divisor
 11095  0AA1  0845               	movf	calc_expect_vout_adc_value@t32+3,w
 11096  0AA2  00AB               	movwf	___aldiv@dividend+3
 11097  0AA3  0844               	movf	calc_expect_vout_adc_value@t32+2,w
 11098  0AA4  00AA               	movwf	___aldiv@dividend+2
 11099  0AA5  0843               	movf	calc_expect_vout_adc_value@t32+1,w
 11100  0AA6  00A9               	movwf	___aldiv@dividend+1
 11101  0AA7  0842               	movf	calc_expect_vout_adc_value@t32,w
 11102  0AA8  00A8               	movwf	___aldiv@dividend
 11103  0AA9  3193  2363  3188   	fcall	___aldiv
 11104  0AAC  0020               	movlb	0	; select bank0
 11105  0AAD  0827               	movf	?___aldiv+3,w
 11106  0AAE  00C5               	movwf	calc_expect_vout_adc_value@t32+3
 11107  0AAF  0826               	movf	?___aldiv+2,w
 11108  0AB0  00C4               	movwf	calc_expect_vout_adc_value@t32+2
 11109  0AB1  0825               	movf	?___aldiv+1,w
 11110  0AB2  00C3               	movwf	calc_expect_vout_adc_value@t32+1
 11111  0AB3  0824               	movf	?___aldiv,w
 11112  0AB4  00C2               	movwf	calc_expect_vout_adc_value@t32
 11113                           
 11114                           ;sample.c: 483: t32=t32+y0;
 11115  0AB5  0842               	movf	calc_expect_vout_adc_value@t32,w
 11116  0AB6  074F               	addwf	_y0,w
 11117  0AB7  00B4               	movwf	??_calc_expect_vout_adc_value
 11118  0AB8  0843               	movf	calc_expect_vout_adc_value@t32+1,w
 11119  0AB9  3D50               	addwfc	_y0+1,w
 11120  0ABA  00B5               	movwf	??_calc_expect_vout_adc_value+1
 11121  0ABB  0844               	movf	calc_expect_vout_adc_value@t32+2,w
 11122  0ABC  3D51               	addwfc	_y0+2,w
 11123  0ABD  00B6               	movwf	??_calc_expect_vout_adc_value+2
 11124  0ABE  0845               	movf	calc_expect_vout_adc_value@t32+3,w
 11125  0ABF  3D52               	addwfc	_y0+3,w
 11126  0AC0  00B7               	movwf	??_calc_expect_vout_adc_value+3
 11127  0AC1  0837               	movf	??_calc_expect_vout_adc_value+3,w
 11128  0AC2  00C5               	movwf	calc_expect_vout_adc_value@t32+3
 11129  0AC3  0836               	movf	??_calc_expect_vout_adc_value+2,w
 11130  0AC4  00C4               	movwf	calc_expect_vout_adc_value@t32+2
 11131  0AC5  0835               	movf	??_calc_expect_vout_adc_value+1,w
 11132  0AC6  00C3               	movwf	calc_expect_vout_adc_value@t32+1
 11133  0AC7  0834               	movf	??_calc_expect_vout_adc_value,w
 11134  0AC8  00C2               	movwf	calc_expect_vout_adc_value@t32
 11135                           
 11136                           ;sample.c: 484: if(t32<0)t32=0;
 11137  0AC9  1FC5               	btfss	calc_expect_vout_adc_value@t32+3,7
 11138  0ACA  2AD3               	goto	l683
 11139  0ACB  3000               	movlw	0
 11140  0ACC  00C5               	movwf	calc_expect_vout_adc_value@t32+3
 11141  0ACD  3000               	movlw	0
 11142  0ACE  00C4               	movwf	calc_expect_vout_adc_value@t32+2
 11143  0ACF  3000               	movlw	0
 11144  0AD0  00C3               	movwf	calc_expect_vout_adc_value@t32+1
 11145  0AD1  3000               	movlw	0
 11146  0AD2  00C2               	movwf	calc_expect_vout_adc_value@t32
 11147  0AD3                     l683:	
 11148                           
 11149                           ;sample.c: 485: return (uint16_t)t32;
 11150  0AD3  0843               	movf	calc_expect_vout_adc_value@t32+1,w
 11151  0AD4  00B3               	movwf	?_calc_expect_vout_adc_value+1
 11152  0AD5  0842               	movf	calc_expect_vout_adc_value@t32,w
 11153  0AD6  00B2               	movwf	?_calc_expect_vout_adc_value
 11154  0AD7  0008               	return
 11155  0AD8                     __end_of_calc_expect_vout_adc_value:	
 11156                           
 11157                           	psect	text33
 11158  1E64                     __ptext33:	
 11159 ;; *************** function ___lmul *****************
 11160 ;; Defined at:
 11161 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul32.c"
 11162 ;; Parameters:    Size  Location     Type
 11163 ;;  multiplier      4    1[COMMON] unsigned long 
 11164 ;;  multiplicand    4    5[COMMON] unsigned long 
 11165 ;; Auto vars:     Size  Location     Type
 11166 ;;  product         4    0[BANK0 ] unsigned long 
 11167 ;; Return value:  Size  Location     Type
 11168 ;;                  4    1[COMMON] unsigned long 
 11169 ;; Registers used:
 11170 ;;		wreg, status,2, status,0
 11171 ;; Tracked objects:
 11172 ;;		On entry : 0/0
 11173 ;;		On exit  : 0/0
 11174 ;;		Unchanged: 0/0
 11175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11176 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11177 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11179 ;;      Totals:         8       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11180 ;;Total ram usage:       12 bytes
 11181 ;; Hardware stack levels used:    1
 11182 ;; Hardware stack levels required when called:    1
 11183 ;; This function calls:
 11184 ;;		Nothing
 11185 ;; This function is called by:
 11186 ;;		_calc_temp_rs
 11187 ;;		_calc_temp_rc
 11188 ;;		_pid_pwm1_idrv_run
 11189 ;;		_calc_expect_vout_adc_value
 11190 ;;		_cal_rs_simulate_power
 11191 ;;		_m_math_pow
 11192 ;; This function uses a non-reentrant model
 11193 ;;
 11194                           
 11195                           
 11196                           ;psect for function ___lmul
 11197  1E64                     ___lmul:	
 11198                           
 11199                           ;incstack = 0
 11200                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 11201  1E64  3000               	movlw	0
 11202  1E65  0020               	movlb	0	; select bank0
 11203  1E66  00A3               	movwf	___lmul@product+3
 11204  1E67  3000               	movlw	0
 11205  1E68  00A2               	movwf	___lmul@product+2
 11206  1E69  3000               	movlw	0
 11207  1E6A  00A1               	movwf	___lmul@product+1
 11208  1E6B  3000               	movlw	0
 11209  1E6C  00A0               	movwf	___lmul@product
 11210  1E6D                     l5011:	
 11211  1E6D  1C71               	btfss	___lmul@multiplier,0
 11212  1E6E  2E78               	goto	l5015
 11213  1E6F  0875               	movf	___lmul@multiplicand,w
 11214  1E70  0020               	movlb	0	; select bank0
 11215  1E71  07A0               	addwf	___lmul@product,f
 11216  1E72  0876               	movf	___lmul@multiplicand+1,w
 11217  1E73  3DA1               	addwfc	___lmul@product+1,f
 11218  1E74  0877               	movf	___lmul@multiplicand+2,w
 11219  1E75  3DA2               	addwfc	___lmul@product+2,f
 11220  1E76  0878               	movf	___lmul@multiplicand+3,w
 11221  1E77  3DA3               	addwfc	___lmul@product+3,f
 11222  1E78                     l5015:	
 11223  1E78  3001               	movlw	1
 11224  1E79                     u4445:	
 11225  1E79  35F5               	lslf	___lmul@multiplicand,f
 11226  1E7A  0DF6               	rlf	___lmul@multiplicand+1,f
 11227  1E7B  0DF7               	rlf	___lmul@multiplicand+2,f
 11228  1E7C  0DF8               	rlf	___lmul@multiplicand+3,f
 11229  1E7D  0B89               	decfsz	9,f
 11230  1E7E  2E79               	goto	u4445
 11231  1E7F  3001               	movlw	1
 11232  1E80                     u4455:	
 11233  1E80  36F4               	lsrf	___lmul@multiplier+3,f
 11234  1E81  0CF3               	rrf	___lmul@multiplier+2,f
 11235  1E82  0CF2               	rrf	___lmul@multiplier+1,f
 11236  1E83  0CF1               	rrf	___lmul@multiplier,f
 11237  1E84  0B89               	decfsz	9,f
 11238  1E85  2E80               	goto	u4455
 11239  1E86  0874               	movf	___lmul@multiplier+3,w
 11240  1E87  0473               	iorwf	___lmul@multiplier+2,w
 11241  1E88  0472               	iorwf	___lmul@multiplier+1,w
 11242  1E89  0471               	iorwf	___lmul@multiplier,w
 11243  1E8A  1D03               	skipz
 11244  1E8B  2E6D               	goto	l5011
 11245  1E8C  0020               	movlb	0	; select bank0
 11246  1E8D  0823               	movf	___lmul@product+3,w
 11247  1E8E  00F4               	movwf	?___lmul+3
 11248  1E8F  0822               	movf	___lmul@product+2,w
 11249  1E90  00F3               	movwf	?___lmul+2
 11250  1E91  0821               	movf	___lmul@product+1,w
 11251  1E92  00F2               	movwf	?___lmul+1
 11252  1E93  0820               	movf	___lmul@product,w
 11253  1E94  00F1               	movwf	?___lmul
 11254  1E95  0008               	return
 11255  1E96                     __end_of___lmul:	
 11256                           
 11257                           	psect	text34
 11258  1363                     __ptext34:	
 11259 ;; *************** function ___aldiv *****************
 11260 ;; Defined at:
 11261 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\aldiv.c"
 11262 ;; Parameters:    Size  Location     Type
 11263 ;;  divisor         4    4[BANK0 ] long 
 11264 ;;  dividend        4    8[BANK0 ] long 
 11265 ;; Auto vars:     Size  Location     Type
 11266 ;;  quotient        4   14[BANK0 ] long 
 11267 ;;  sign            1   13[BANK0 ] unsigned char 
 11268 ;;  counter         1   12[BANK0 ] unsigned char 
 11269 ;; Return value:  Size  Location     Type
 11270 ;;                  4    4[BANK0 ] long 
 11271 ;; Registers used:
 11272 ;;		wreg, status,2, status,0
 11273 ;; Tracked objects:
 11274 ;;		On entry : 0/0
 11275 ;;		On exit  : 0/0
 11276 ;;		Unchanged: 0/0
 11277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11278 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11279 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11280 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11281 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11282 ;;Total ram usage:       15 bytes
 11283 ;; Hardware stack levels used:    1
 11284 ;; Hardware stack levels required when called:    1
 11285 ;; This function calls:
 11286 ;;		Nothing
 11287 ;; This function is called by:
 11288 ;;		_pid_pwm1_idrv_run
 11289 ;;		_calc_expect_vout_adc_value
 11290 ;;		_m_int_2_str
 11291 ;;		_m_int_2_str_ex
 11292 ;; This function uses a non-reentrant model
 11293 ;;
 11294                           
 11295                           
 11296                           ;psect for function ___aldiv
 11297  1363                     ___aldiv:	
 11298                           
 11299                           ;incstack = 0
 11300                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 11301  1363  0020               	movlb	0	; select bank0
 11302  1364  01AD               	clrf	___aldiv@sign
 11303  1365  1FA7               	btfss	___aldiv@divisor+3,7
 11304  1366  2B74               	goto	l1151
 11305  1367  09A4               	comf	___aldiv@divisor,f
 11306  1368  09A5               	comf	___aldiv@divisor+1,f
 11307  1369  09A6               	comf	___aldiv@divisor+2,f
 11308  136A  09A7               	comf	___aldiv@divisor+3,f
 11309  136B  0AA4               	incf	___aldiv@divisor,f
 11310  136C  1903               	skipnz
 11311  136D  0AA5               	incf	___aldiv@divisor+1,f
 11312  136E  1903               	skipnz
 11313  136F  0AA6               	incf	___aldiv@divisor+2,f
 11314  1370  1903               	skipnz
 11315  1371  0AA7               	incf	___aldiv@divisor+3,f
 11316  1372  01AD               	clrf	___aldiv@sign
 11317  1373  0AAD               	incf	___aldiv@sign,f
 11318  1374                     l1151:	
 11319  1374  1FAB               	btfss	___aldiv@dividend+3,7
 11320  1375  2B85               	goto	l5033
 11321  1376  09A8               	comf	___aldiv@dividend,f
 11322  1377  09A9               	comf	___aldiv@dividend+1,f
 11323  1378  09AA               	comf	___aldiv@dividend+2,f
 11324  1379  09AB               	comf	___aldiv@dividend+3,f
 11325  137A  0AA8               	incf	___aldiv@dividend,f
 11326  137B  1903               	skipnz
 11327  137C  0AA9               	incf	___aldiv@dividend+1,f
 11328  137D  1903               	skipnz
 11329  137E  0AAA               	incf	___aldiv@dividend+2,f
 11330  137F  1903               	skipnz
 11331  1380  0AAB               	incf	___aldiv@dividend+3,f
 11332  1381  3001               	movlw	1
 11333  1382  00F9               	movwf	??___aldiv
 11334  1383  0879               	movf	??___aldiv,w
 11335  1384  06AD               	xorwf	___aldiv@sign,f
 11336  1385                     l5033:	
 11337  1385  3000               	movlw	0
 11338  1386  00B1               	movwf	___aldiv@quotient+3
 11339  1387  3000               	movlw	0
 11340  1388  00B0               	movwf	___aldiv@quotient+2
 11341  1389  3000               	movlw	0
 11342  138A  00AF               	movwf	___aldiv@quotient+1
 11343  138B  3000               	movlw	0
 11344  138C  00AE               	movwf	___aldiv@quotient
 11345  138D  0827               	movf	___aldiv@divisor+3,w
 11346  138E  0426               	iorwf	___aldiv@divisor+2,w
 11347  138F  0425               	iorwf	___aldiv@divisor+1,w
 11348  1390  0424               	iorwf	___aldiv@divisor,w
 11349  1391  1903               	skipnz
 11350  1392  2BCE               	goto	l5055
 11351  1393  01AC               	clrf	___aldiv@counter
 11352  1394  0AAC               	incf	___aldiv@counter,f
 11353  1395                     l5041:	
 11354  1395  1BA7               	btfsc	___aldiv@divisor+3,7
 11355  1396  2BA3               	goto	l5043
 11356  1397  3001               	movlw	1
 11357  1398                     u4505:	
 11358  1398  35A4               	lslf	___aldiv@divisor,f
 11359  1399  0DA5               	rlf	___aldiv@divisor+1,f
 11360  139A  0DA6               	rlf	___aldiv@divisor+2,f
 11361  139B  0DA7               	rlf	___aldiv@divisor+3,f
 11362  139C  0B89               	decfsz	9,f
 11363  139D  2B98               	goto	u4505
 11364  139E  3001               	movlw	1
 11365  139F  00F9               	movwf	??___aldiv
 11366  13A0  0879               	movf	??___aldiv,w
 11367  13A1  07AC               	addwf	___aldiv@counter,f
 11368  13A2  2B95               	goto	l5041
 11369  13A3                     l5043:	
 11370  13A3  3001               	movlw	1
 11371  13A4                     u4525:	
 11372  13A4  35AE               	lslf	___aldiv@quotient,f
 11373  13A5  0DAF               	rlf	___aldiv@quotient+1,f
 11374  13A6  0DB0               	rlf	___aldiv@quotient+2,f
 11375  13A7  0DB1               	rlf	___aldiv@quotient+3,f
 11376  13A8  0B89               	decfsz	9,f
 11377  13A9  2BA4               	goto	u4525
 11378  13AA  0827               	movf	___aldiv@divisor+3,w
 11379  13AB  022B               	subwf	___aldiv@dividend+3,w
 11380  13AC  1D03               	skipz
 11381  13AD  2BB8               	goto	u4535
 11382  13AE  0826               	movf	___aldiv@divisor+2,w
 11383  13AF  022A               	subwf	___aldiv@dividend+2,w
 11384  13B0  1D03               	skipz
 11385  13B1  2BB8               	goto	u4535
 11386  13B2  0825               	movf	___aldiv@divisor+1,w
 11387  13B3  0229               	subwf	___aldiv@dividend+1,w
 11388  13B4  1D03               	skipz
 11389  13B5  2BB8               	goto	u4535
 11390  13B6  0824               	movf	___aldiv@divisor,w
 11391  13B7  0228               	subwf	___aldiv@dividend,w
 11392  13B8                     u4535:	
 11393  13B8  1C03               	skipc
 11394  13B9  2BC3               	goto	l5051
 11395  13BA  0824               	movf	___aldiv@divisor,w
 11396  13BB  02A8               	subwf	___aldiv@dividend,f
 11397  13BC  0825               	movf	___aldiv@divisor+1,w
 11398  13BD  3BA9               	subwfb	___aldiv@dividend+1,f
 11399  13BE  0826               	movf	___aldiv@divisor+2,w
 11400  13BF  3BAA               	subwfb	___aldiv@dividend+2,f
 11401  13C0  0827               	movf	___aldiv@divisor+3,w
 11402  13C1  3BAB               	subwfb	___aldiv@dividend+3,f
 11403  13C2  142E               	bsf	___aldiv@quotient,0
 11404  13C3                     l5051:	
 11405  13C3  3001               	movlw	1
 11406  13C4                     u4545:	
 11407  13C4  36A7               	lsrf	___aldiv@divisor+3,f
 11408  13C5  0CA6               	rrf	___aldiv@divisor+2,f
 11409  13C6  0CA5               	rrf	___aldiv@divisor+1,f
 11410  13C7  0CA4               	rrf	___aldiv@divisor,f
 11411  13C8  0B89               	decfsz	9,f
 11412  13C9  2BC4               	goto	u4545
 11413  13CA  3001               	movlw	1
 11414  13CB  02AC               	subwf	___aldiv@counter,f
 11415  13CC  1D03               	btfss	3,2
 11416  13CD  2BA3               	goto	l5043
 11417  13CE                     l5055:	
 11418  13CE  082D               	movf	___aldiv@sign,w
 11419  13CF  1903               	btfsc	3,2
 11420  13D0  2BDC               	goto	l5059
 11421  13D1  09AE               	comf	___aldiv@quotient,f
 11422  13D2  09AF               	comf	___aldiv@quotient+1,f
 11423  13D3  09B0               	comf	___aldiv@quotient+2,f
 11424  13D4  09B1               	comf	___aldiv@quotient+3,f
 11425  13D5  0AAE               	incf	___aldiv@quotient,f
 11426  13D6  1903               	skipnz
 11427  13D7  0AAF               	incf	___aldiv@quotient+1,f
 11428  13D8  1903               	skipnz
 11429  13D9  0AB0               	incf	___aldiv@quotient+2,f
 11430  13DA  1903               	skipnz
 11431  13DB  0AB1               	incf	___aldiv@quotient+3,f
 11432  13DC                     l5059:	
 11433  13DC  0831               	movf	___aldiv@quotient+3,w
 11434  13DD  00A7               	movwf	?___aldiv+3
 11435  13DE  0830               	movf	___aldiv@quotient+2,w
 11436  13DF  00A6               	movwf	?___aldiv+2
 11437  13E0  082F               	movf	___aldiv@quotient+1,w
 11438  13E1  00A5               	movwf	?___aldiv+1
 11439  13E2  082E               	movf	___aldiv@quotient,w
 11440  13E3  00A4               	movwf	?___aldiv
 11441  13E4  0008               	return
 11442  13E5                     __end_of___aldiv:	
 11443                           
 11444                           	psect	text35
 11445  1233                     __ptext35:	
 11446 ;; *************** function _adc_sample *****************
 11447 ;; Defined at:
 11448 ;;		line 187 in file "src/api/sample.c"
 11449 ;; Parameters:    Size  Location     Type
 11450 ;;  ch              1    wreg     unsigned char 
 11451 ;;  gfvr            1    4[COMMON] unsigned char 
 11452 ;;  num             1    5[COMMON] unsigned char 
 11453 ;; Auto vars:     Size  Location     Type
 11454 ;;  ch              1    0[BANK0 ] unsigned char 
 11455 ;;  t16             2    5[BANK0 ] unsigned int 
 11456 ;;  ret             2    3[BANK0 ] unsigned int 
 11457 ;;  i               2    1[BANK0 ] unsigned int 
 11458 ;; Return value:  Size  Location     Type
 11459 ;;                  2    4[COMMON] unsigned int 
 11460 ;; Registers used:
 11461 ;;		wreg, status,2, status,0, pclath, cstack
 11462 ;; Tracked objects:
 11463 ;;		On entry : 0/0
 11464 ;;		On exit  : 0/0
 11465 ;;		Unchanged: 0/0
 11466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11467 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11468 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11469 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11470 ;;      Totals:         5       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11471 ;;Total ram usage:       12 bytes
 11472 ;; Hardware stack levels used:    1
 11473 ;; Hardware stack levels required when called:    2
 11474 ;; This function calls:
 11475 ;;		_adc_init
 11476 ;;		_fvr_set_gain
 11477 ;; This function is called by:
 11478 ;;		_main
 11479 ;; This function uses a non-reentrant model
 11480 ;;
 11481                           
 11482                           
 11483                           ;psect for function _adc_sample
 11484  1233                     _adc_sample:	
 11485                           
 11486                           ;incstack = 0
 11487                           ; Regs used in _adc_sample: [wreg+status,2+status,0+pclath+cstack]
 11488                           ;adc_sample@ch stored from wreg
 11489  1233  0020               	movlb	0	; select bank0
 11490  1234  00A0               	movwf	adc_sample@ch
 11491                           
 11492                           ;sample.c: 189: uint16_t i;;sample.c: 190: uint16_t ret=0;
 11493  1235  01A3               	clrf	adc_sample@ret
 11494  1236  01A4               	clrf	adc_sample@ret+1
 11495                           
 11496                           ;sample.c: 191: uint16_t t16=0;
 11497  1237  01A5               	clrf	adc_sample@t16
 11498  1238  01A6               	clrf	adc_sample@t16+1
 11499                           
 11500                           ;sample.c: 193: fvr_set_gain(gfvr);
 11501  1239  0874               	movf	adc_sample@gfvr,w
 11502  123A  319C  24EE  3192   	fcall	_fvr_set_gain
 11503                           
 11504                           ;sample.c: 194: adc_init((adc_channel_t)ch);
 11505  123D  0020               	movlb	0	; select bank0
 11506  123E  0820               	movf	adc_sample@ch,w
 11507  123F  319C  24DA  3192   	fcall	_adc_init
 11508                           
 11509                           ;sample.c: 195: _delay((unsigned long)((50)*(16000000/4000000.0)));
 11510  1242  3042               	movlw	66
 11511  1243                     u5047:	
 11512  1243  0B89               	decfsz	9,f
 11513  1244  2A43               	goto	u5047
 11514  1245  3200               	nop2
 11515                           
 11516                           ;sample.c: 196: ADCON0bits.GO_nDONE = 1;
 11517  1246  0021               	movlb	1	; select bank1
 11518  1247  149D               	bsf	29,1	;volatile
 11519  1248                     l633:	
 11520                           ;sample.c: 197: while (ADCON0bits.GO_nDONE);
 11521                           
 11522  1248  189D               	btfsc	29,1	;volatile
 11523  1249  2A48               	goto	l633
 11524                           
 11525                           ;sample.c: 198: if(num>64)num=64;
 11526  124A  3041               	movlw	65
 11527  124B  0275               	subwf	adc_sample@num,w
 11528  124C  1C03               	skipc
 11529  124D  2A52               	goto	l4151
 11530  124E  3040               	movlw	64
 11531  124F  00F6               	movwf	??_adc_sample
 11532  1250  0876               	movf	??_adc_sample,w
 11533  1251  00F5               	movwf	adc_sample@num
 11534  1252                     l4151:	
 11535                           
 11536                           ;sample.c: 199: for(i=0;i<num;i++){
 11537  1252  0020               	movlb	0	; select bank0
 11538  1253  01A1               	clrf	adc_sample@i
 11539  1254  01A2               	clrf	adc_sample@i+1
 11540  1255                     l4161:	
 11541  1255  0875               	movf	adc_sample@num,w
 11542  1256  00F6               	movwf	??_adc_sample
 11543  1257  01F7               	clrf	??_adc_sample+1
 11544  1258  0877               	movf	??_adc_sample+1,w
 11545  1259  0222               	subwf	adc_sample@i+1,w
 11546  125A  1D03               	skipz
 11547  125B  2A5E               	goto	u3235
 11548  125C  0876               	movf	??_adc_sample,w
 11549  125D  0221               	subwf	adc_sample@i,w
 11550  125E                     u3235:	
 11551  125E  1803               	btfsc	3,0
 11552  125F  2A8B               	goto	l4163
 11553                           
 11554                           ;sample.c: 200: ADCON0bits.GO_nDONE = 1;
 11555  1260  0021               	movlb	1	; select bank1
 11556  1261  149D               	bsf	29,1	;volatile
 11557  1262                     l639:	
 11558                           ;sample.c: 201: while (ADCON0bits.GO_nDONE);
 11559                           
 11560  1262  189D               	btfsc	29,1	;volatile
 11561  1263  2A62               	goto	l639
 11562                           
 11563                           ;sample.c: 202: __nop();
 11564  1264  0000               	nop
 11565                           
 11566                           ;sample.c: 203: t16=ADRESH;
 11567  1265  0021               	movlb	1	; select bank1
 11568  1266  081C               	movf	28,w	;volatile
 11569  1267  00F6               	movwf	??_adc_sample
 11570  1268  01F7               	clrf	??_adc_sample+1
 11571  1269  0876               	movf	??_adc_sample,w
 11572  126A  0020               	movlb	0	; select bank0
 11573  126B  00A5               	movwf	adc_sample@t16
 11574  126C  0877               	movf	??_adc_sample+1,w
 11575  126D  00A6               	movwf	adc_sample@t16+1
 11576                           
 11577                           ;sample.c: 204: t16<<=2;
 11578  126E  3002               	movlw	2
 11579  126F                     u3215:	
 11580  126F  35A5               	lslf	adc_sample@t16,f
 11581  1270  0DA6               	rlf	adc_sample@t16+1,f
 11582  1271  0B89               	decfsz	9,f
 11583  1272  2A6F               	goto	u3215
 11584                           
 11585                           ;sample.c: 205: t16|=(uint16_t)(ADRESL>>6);
 11586  1273  0021               	movlb	1	; select bank1
 11587  1274  081B               	movf	27,w	;volatile
 11588  1275  00F6               	movwf	??_adc_sample
 11589  1276  3006               	movlw	6
 11590  1277                     u3225:	
 11591  1277  36F6               	lsrf	??_adc_sample,f
 11592  1278  0B89               	decfsz	9,f
 11593  1279  2A77               	goto	u3225
 11594  127A  0876               	movf	??_adc_sample,w
 11595  127B  00F7               	movwf	??_adc_sample+1
 11596  127C  01F8               	clrf	??_adc_sample+2
 11597  127D  0877               	movf	??_adc_sample+1,w
 11598  127E  0020               	movlb	0	; select bank0
 11599  127F  04A5               	iorwf	adc_sample@t16,f
 11600  1280  0878               	movf	??_adc_sample+2,w
 11601  1281  04A6               	iorwf	adc_sample@t16+1,f
 11602                           
 11603                           ;sample.c: 207: ret+=t16;
 11604  1282  0825               	movf	adc_sample@t16,w
 11605  1283  07A3               	addwf	adc_sample@ret,f
 11606  1284  0826               	movf	adc_sample@t16+1,w
 11607  1285  3DA4               	addwfc	adc_sample@ret+1,f
 11608  1286  3001               	movlw	1
 11609  1287  07A1               	addwf	adc_sample@i,f
 11610  1288  3000               	movlw	0
 11611  1289  3DA2               	addwfc	adc_sample@i+1,f
 11612  128A  2A55               	goto	l4161
 11613  128B                     l4163:	
 11614                           
 11615                           ;sample.c: 212: return ret;
 11616  128B  0824               	movf	adc_sample@ret+1,w
 11617  128C  00F5               	movwf	?_adc_sample+1
 11618  128D  0823               	movf	adc_sample@ret,w
 11619  128E  00F4               	movwf	?_adc_sample
 11620  128F  0008               	return
 11621  1290                     __end_of_adc_sample:	
 11622                           
 11623                           	psect	text36
 11624  1CEE                     __ptext36:	
 11625 ;; *************** function _fvr_set_gain *****************
 11626 ;; Defined at:
 11627 ;;		line 134 in file "src/api/sample.c"
 11628 ;; Parameters:    Size  Location     Type
 11629 ;;  g               1    wreg     unsigned char 
 11630 ;; Auto vars:     Size  Location     Type
 11631 ;;  g               1    3[COMMON] unsigned char 
 11632 ;;  t8              1    2[COMMON] unsigned char 
 11633 ;; Return value:  Size  Location     Type
 11634 ;;                  1    wreg      void 
 11635 ;; Registers used:
 11636 ;;		wreg, status,2, status,0
 11637 ;; Tracked objects:
 11638 ;;		On entry : 0/0
 11639 ;;		On exit  : 0/0
 11640 ;;		Unchanged: 0/0
 11641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11643 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11644 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11645 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11646 ;;Total ram usage:        3 bytes
 11647 ;; Hardware stack levels used:    1
 11648 ;; Hardware stack levels required when called:    1
 11649 ;; This function calls:
 11650 ;;		Nothing
 11651 ;; This function is called by:
 11652 ;;		_adc_sample
 11653 ;; This function uses a non-reentrant model
 11654 ;;
 11655                           
 11656                           
 11657                           ;psect for function _fvr_set_gain
 11658  1CEE                     _fvr_set_gain:	
 11659                           
 11660                           ;incstack = 0
 11661                           ; Regs used in _fvr_set_gain: [wreg+status,2+status,0]
 11662                           ;fvr_set_gain@g stored from wreg
 11663  1CEE  00F3               	movwf	fvr_set_gain@g
 11664                           
 11665                           ;sample.c: 136: uint8_t t8=0x80;
 11666  1CEF  3080               	movlw	128
 11667  1CF0  00F1               	movwf	??_fvr_set_gain
 11668  1CF1  0871               	movf	??_fvr_set_gain,w
 11669  1CF2  00F2               	movwf	fvr_set_gain@t8
 11670                           
 11671                           ;sample.c: 137: if(g>3)g=3;
 11672  1CF3  3004               	movlw	4
 11673  1CF4  0273               	subwf	fvr_set_gain@g,w
 11674  1CF5  1C03               	skipc
 11675  1CF6  2CFB               	goto	l3709
 11676  1CF7  3003               	movlw	3
 11677  1CF8  00F1               	movwf	??_fvr_set_gain
 11678  1CF9  0871               	movf	??_fvr_set_gain,w
 11679  1CFA  00F3               	movwf	fvr_set_gain@g
 11680  1CFB                     l3709:	
 11681                           
 11682                           ;sample.c: 138: t8|=g;
 11683  1CFB  0873               	movf	fvr_set_gain@g,w
 11684  1CFC  00F1               	movwf	??_fvr_set_gain
 11685  1CFD  0871               	movf	??_fvr_set_gain,w
 11686  1CFE  04F2               	iorwf	fvr_set_gain@t8,f
 11687                           
 11688                           ;sample.c: 139: FVRCON = t8;
 11689  1CFF  0872               	movf	fvr_set_gain@t8,w
 11690  1D00  0022               	movlb	2	; select bank2
 11691  1D01  0097               	movwf	23	;volatile
 11692  1D02                     l621:	
 11693                           ;sample.c: 140: while(!(FVRCONbits.FVRRDY));
 11694                           
 11695  1D02  1B17               	btfsc	23,6	;volatile
 11696  1D03  0008               	return
 11697  1D04  2D02               	goto	l621
 11698  1D05                     __end_of_fvr_set_gain:	
 11699                           
 11700                           	psect	text37
 11701  1CDA                     __ptext37:	
 11702 ;; *************** function _adc_init *****************
 11703 ;; Defined at:
 11704 ;;		line 143 in file "src/api/sample.c"
 11705 ;; Parameters:    Size  Location     Type
 11706 ;;  ch              1    wreg     enum E4099
 11707 ;; Auto vars:     Size  Location     Type
 11708 ;;  ch              1    2[COMMON] enum E4099
 11709 ;; Return value:  Size  Location     Type
 11710 ;;                  1    wreg      void 
 11711 ;; Registers used:
 11712 ;;		wreg, status,2, status,0
 11713 ;; Tracked objects:
 11714 ;;		On entry : 0/0
 11715 ;;		On exit  : 0/0
 11716 ;;		Unchanged: 0/0
 11717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11719 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11720 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11721 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11722 ;;Total ram usage:        2 bytes
 11723 ;; Hardware stack levels used:    1
 11724 ;; Hardware stack levels required when called:    1
 11725 ;; This function calls:
 11726 ;;		Nothing
 11727 ;; This function is called by:
 11728 ;;		_adc_sample
 11729 ;; This function uses a non-reentrant model
 11730 ;;
 11731                           
 11732                           
 11733                           ;psect for function _adc_init
 11734  1CDA                     _adc_init:	
 11735                           
 11736                           ;incstack = 0
 11737                           ; Regs used in _adc_init: [wreg+status,2+status,0]
 11738                           ;adc_init@ch stored from wreg
 11739  1CDA  00F2               	movwf	adc_init@ch
 11740  1CDB                     l627:	
 11741                           ;sample.c: 145: while (ADCON0bits.GO_nDONE);
 11742                           
 11743  1CDB  0021               	movlb	1	; select bank1
 11744  1CDC  189D               	btfsc	29,1	;volatile
 11745  1CDD  2CDB               	goto	l627
 11746                           
 11747                           ;sample.c: 146: ADCON0bits.CHS = ch;
 11748  1CDE  0872               	movf	adc_init@ch,w
 11749  1CDF  00F1               	movwf	??_adc_init
 11750  1CE0  0DF1               	rlf	??_adc_init,f
 11751  1CE1  0DF1               	rlf	??_adc_init,f
 11752  1CE2  081D               	movf	29,w	;volatile
 11753  1CE3  0671               	xorwf	??_adc_init,w
 11754  1CE4  3983               	andlw	-125
 11755  1CE5  0671               	xorwf	??_adc_init,w
 11756  1CE6  009D               	movwf	29	;volatile
 11757                           
 11758                           ;sample.c: 147: ADCON0bits.ADON = 1;
 11759  1CE7  141D               	bsf	29,0	;volatile
 11760                           
 11761                           ;sample.c: 148: ADCON1 = 0x63;
 11762  1CE8  3063               	movlw	99
 11763  1CE9  009E               	movwf	30	;volatile
 11764                           
 11765                           ;sample.c: 149: ADCON2 = 0x00;
 11766  1CEA  019F               	clrf	31	;volatile
 11767                           
 11768                           ;sample.c: 150: ADRESL = 0x00;
 11769  1CEB  019B               	clrf	27	;volatile
 11770                           
 11771                           ;sample.c: 151: ADRESH = 0x00;
 11772  1CEC  019C               	clrf	28	;volatile
 11773  1CED  0008               	return
 11774  1CEE                     __end_of_adc_init:	
 11775                           
 11776                           	psect	text38
 11777  1D69                     __ptext38:	
 11778 ;; *************** function _SYSTEM_Initialize *****************
 11779 ;; Defined at:
 11780 ;;		line 70 in file "mcc_generated_files/mcc.c"
 11781 ;; Parameters:    Size  Location     Type
 11782 ;;		None
 11783 ;; Auto vars:     Size  Location     Type
 11784 ;;		None
 11785 ;; Return value:  Size  Location     Type
 11786 ;;                  1    wreg      void 
 11787 ;; Registers used:
 11788 ;;		wreg, status,2, status,0, pclath, cstack
 11789 ;; Tracked objects:
 11790 ;;		On entry : 0/0
 11791 ;;		On exit  : 0/0
 11792 ;;		Unchanged: 0/0
 11793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11797 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11798 ;;Total ram usage:        0 bytes
 11799 ;; Hardware stack levels used:    1
 11800 ;; Hardware stack levels required when called:    3
 11801 ;; This function calls:
 11802 ;;		_ADC1_Initialize
 11803 ;;		_EUSART_Initialize
 11804 ;;		_FVR_Initialize
 11805 ;;		_OSCILLATOR_Initialize
 11806 ;;		_PIN_MANAGER_Initialize
 11807 ;;		_PWM1_Initialize
 11808 ;;		_PWM2_Initialize
 11809 ;;		_TMR2_Initialize
 11810 ;;		_WDT_Initialize
 11811 ;; This function is called by:
 11812 ;;		_main
 11813 ;; This function uses a non-reentrant model
 11814 ;;
 11815                           
 11816                           
 11817                           ;psect for function _SYSTEM_Initialize
 11818  1D69                     _SYSTEM_Initialize:	
 11819                           
 11820                           ;mcc.c: 73: PIN_MANAGER_Initialize();
 11821                           
 11822                           ;incstack = 0
 11823                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 11824  1D69  3190  20B8  319D   	fcall	_PIN_MANAGER_Initialize
 11825                           
 11826                           ;mcc.c: 74: OSCILLATOR_Initialize();
 11827  1D6C  3188  2003  319D   	fcall	_OSCILLATOR_Initialize
 11828                           
 11829                           ;mcc.c: 75: WDT_Initialize();
 11830  1D6F  319C  2485  319D   	fcall	_WDT_Initialize
 11831                           
 11832                           ;mcc.c: 76: FVR_Initialize();
 11833  1D72  319C  2481  319D   	fcall	_FVR_Initialize
 11834                           
 11835                           ;mcc.c: 77: PWM1_Initialize();
 11836  1D75  319D  2505  319D   	fcall	_PWM1_Initialize
 11837                           
 11838                           ;mcc.c: 78: PWM2_Initialize();
 11839  1D78  319D  251E  319D   	fcall	_PWM2_Initialize
 11840                           
 11841                           ;mcc.c: 79: ADC1_Initialize();
 11842  1D7B  319C  249F  319D   	fcall	_ADC1_Initialize
 11843                           
 11844                           ;mcc.c: 80: TMR2_Initialize();
 11845  1D7E  319C  24C7  319D   	fcall	_TMR2_Initialize
 11846                           
 11847                           ;mcc.c: 81: EUSART_Initialize();
 11848  1D81  319C  24B4         	fcall	_EUSART_Initialize
 11849  1D83  0008               	return
 11850  1D84                     __end_of_SYSTEM_Initialize:	
 11851                           
 11852                           	psect	text39
 11853  1C85                     __ptext39:	
 11854 ;; *************** function _WDT_Initialize *****************
 11855 ;; Defined at:
 11856 ;;		line 94 in file "mcc_generated_files/mcc.c"
 11857 ;; Parameters:    Size  Location     Type
 11858 ;;		None
 11859 ;; Auto vars:     Size  Location     Type
 11860 ;;		None
 11861 ;; Return value:  Size  Location     Type
 11862 ;;                  1    wreg      void 
 11863 ;; Registers used:
 11864 ;;		wreg
 11865 ;; Tracked objects:
 11866 ;;		On entry : 0/0
 11867 ;;		On exit  : 0/0
 11868 ;;		Unchanged: 0/0
 11869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11873 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11874 ;;Total ram usage:        0 bytes
 11875 ;; Hardware stack levels used:    1
 11876 ;; Hardware stack levels required when called:    1
 11877 ;; This function calls:
 11878 ;;		Nothing
 11879 ;; This function is called by:
 11880 ;;		_SYSTEM_Initialize
 11881 ;; This function uses a non-reentrant model
 11882 ;;
 11883                           
 11884                           
 11885                           ;psect for function _WDT_Initialize
 11886  1C85                     _WDT_Initialize:	
 11887                           
 11888                           ;mcc.c: 97: WDTCON = 0x16;
 11889                           
 11890                           ;incstack = 0
 11891                           ; Regs used in _WDT_Initialize: [wreg]
 11892  1C85  3016               	movlw	22
 11893  1C86  0021               	movlb	1	; select bank1
 11894  1C87  0097               	movwf	23	;volatile
 11895  1C88  0008               	return
 11896  1C89                     __end_of_WDT_Initialize:	
 11897                           
 11898                           	psect	text40
 11899  1CC7                     __ptext40:	
 11900 ;; *************** function _TMR2_Initialize *****************
 11901 ;; Defined at:
 11902 ;;		line 63 in file "mcc_generated_files/tmr2.c"
 11903 ;; Parameters:    Size  Location     Type
 11904 ;;		None
 11905 ;; Auto vars:     Size  Location     Type
 11906 ;;		None
 11907 ;; Return value:  Size  Location     Type
 11908 ;;                  1    wreg      void 
 11909 ;; Registers used:
 11910 ;;		wreg, status,2, status,0, pclath, cstack
 11911 ;; Tracked objects:
 11912 ;;		On entry : 0/0
 11913 ;;		On exit  : 0/0
 11914 ;;		Unchanged: 0/0
 11915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11920 ;;Total ram usage:        0 bytes
 11921 ;; Hardware stack levels used:    1
 11922 ;; Hardware stack levels required when called:    2
 11923 ;; This function calls:
 11924 ;;		_TMR2_SetInterruptHandler
 11925 ;;		_TMR2_StartTimer
 11926 ;; This function is called by:
 11927 ;;		_SYSTEM_Initialize
 11928 ;; This function uses a non-reentrant model
 11929 ;;
 11930                           
 11931                           
 11932                           ;psect for function _TMR2_Initialize
 11933  1CC7                     _TMR2_Initialize:	
 11934                           
 11935                           ;tmr2.c: 68: T2CON = 0x4B;
 11936                           
 11937                           ;incstack = 0
 11938                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
 11939  1CC7  304B               	movlw	75
 11940  1CC8  0020               	movlb	0	; select bank0
 11941  1CC9  009C               	movwf	28	;volatile
 11942                           
 11943                           ;tmr2.c: 71: PR2 = 0x7C;
 11944  1CCA  307C               	movlw	124
 11945  1CCB  009B               	movwf	27	;volatile
 11946                           
 11947                           ;tmr2.c: 74: TMR2 = 0x00;
 11948  1CCC  019A               	clrf	26	;volatile
 11949                           
 11950                           ;tmr2.c: 77: PIR1bits.TMR2IF = 0;
 11951  1CCD  1091               	bcf	17,1	;volatile
 11952                           
 11953                           ;tmr2.c: 80: PIE1bits.TMR2IE = 1;
 11954  1CCE  0021               	movlb	1	; select bank1
 11955  1CCF  1491               	bsf	17,1	;volatile
 11956                           
 11957                           ;tmr2.c: 83: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
 11958  1CD0  3000               	movlw	0
 11959  1CD1  00F1               	movwf	TMR2_SetInterruptHandler@InterruptHandler
 11960  1CD2  3000               	movlw	0
 11961  1CD3  00F2               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
 11962  1CD4  319C  2491  319C   	fcall	_TMR2_SetInterruptHandler
 11963                           
 11964                           ;tmr2.c: 86: TMR2_StartTimer();
 11965  1CD7  319C  247E         	fcall	_TMR2_StartTimer
 11966  1CD9  0008               	return
 11967  1CDA                     __end_of_TMR2_Initialize:	
 11968                           
 11969                           	psect	text41
 11970  1C7E                     __ptext41:	
 11971 ;; *************** function _TMR2_StartTimer *****************
 11972 ;; Defined at:
 11973 ;;		line 89 in file "mcc_generated_files/tmr2.c"
 11974 ;; Parameters:    Size  Location     Type
 11975 ;;		None
 11976 ;; Auto vars:     Size  Location     Type
 11977 ;;		None
 11978 ;; Return value:  Size  Location     Type
 11979 ;;                  1    wreg      void 
 11980 ;; Registers used:
 11981 ;;		None
 11982 ;; Tracked objects:
 11983 ;;		On entry : 0/0
 11984 ;;		On exit  : 0/0
 11985 ;;		Unchanged: 0/0
 11986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11990 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11991 ;;Total ram usage:        0 bytes
 11992 ;; Hardware stack levels used:    1
 11993 ;; Hardware stack levels required when called:    1
 11994 ;; This function calls:
 11995 ;;		Nothing
 11996 ;; This function is called by:
 11997 ;;		_TMR2_Initialize
 11998 ;; This function uses a non-reentrant model
 11999 ;;
 12000                           
 12001                           
 12002                           ;psect for function _TMR2_StartTimer
 12003  1C7E                     _TMR2_StartTimer:	
 12004                           
 12005                           ;tmr2.c: 92: T2CONbits.TMR2ON = 1;
 12006                           
 12007                           ;incstack = 0
 12008                           ; Regs used in _TMR2_StartTimer: []
 12009  1C7E  0020               	movlb	0	; select bank0
 12010  1C7F  151C               	bsf	28,2	;volatile
 12011  1C80  0008               	return
 12012  1C81                     __end_of_TMR2_StartTimer:	
 12013                           
 12014                           	psect	text42
 12015  1C91                     __ptext42:	
 12016 ;; *************** function _TMR2_SetInterruptHandler *****************
 12017 ;; Defined at:
 12018 ;;		line 142 in file "mcc_generated_files/tmr2.c"
 12019 ;; Parameters:    Size  Location     Type
 12020 ;;  InterruptHan    2    1[COMMON] PTR FTN()void 
 12021 ;;		 -> TMR2_DefaultInterruptHandler(1), 
 12022 ;; Auto vars:     Size  Location     Type
 12023 ;;		None
 12024 ;; Return value:  Size  Location     Type
 12025 ;;                  1    wreg      void 
 12026 ;; Registers used:
 12027 ;;		wreg
 12028 ;; Tracked objects:
 12029 ;;		On entry : 0/0
 12030 ;;		On exit  : 0/0
 12031 ;;		Unchanged: 0/0
 12032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12033 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12036 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12037 ;;Total ram usage:        2 bytes
 12038 ;; Hardware stack levels used:    1
 12039 ;; Hardware stack levels required when called:    1
 12040 ;; This function calls:
 12041 ;;		Nothing
 12042 ;; This function is called by:
 12043 ;;		_TMR2_Initialize
 12044 ;; This function uses a non-reentrant model
 12045 ;;
 12046                           
 12047                           
 12048                           ;psect for function _TMR2_SetInterruptHandler
 12049  1C91                     _TMR2_SetInterruptHandler:	
 12050                           
 12051                           ;tmr2.c: 143: TMR2_InterruptHandler = InterruptHandler;
 12052                           
 12053                           ;incstack = 0
 12054                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
 12055  1C91  0872               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
 12056  1C92  0020               	movlb	0	; select bank0
 12057  1C93  00E2               	movwf	_TMR2_InterruptHandler+1
 12058  1C94  0871               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
 12059  1C95  00E1               	movwf	_TMR2_InterruptHandler
 12060  1C96  0008               	return
 12061  1C97                     __end_of_TMR2_SetInterruptHandler:	
 12062                           
 12063                           	psect	text43
 12064  1D1E                     __ptext43:	
 12065 ;; *************** function _PWM2_Initialize *****************
 12066 ;; Defined at:
 12067 ;;		line 58 in file "mcc_generated_files/pwm2.c"
 12068 ;; Parameters:    Size  Location     Type
 12069 ;;		None
 12070 ;; Auto vars:     Size  Location     Type
 12071 ;;		None
 12072 ;; Return value:  Size  Location     Type
 12073 ;;                  1    wreg      void 
 12074 ;; Registers used:
 12075 ;;		wreg, status,2
 12076 ;; Tracked objects:
 12077 ;;		On entry : 0/0
 12078 ;;		On exit  : 0/0
 12079 ;;		Unchanged: 0/0
 12080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12084 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12085 ;;Total ram usage:        0 bytes
 12086 ;; Hardware stack levels used:    1
 12087 ;; Hardware stack levels required when called:    1
 12088 ;; This function calls:
 12089 ;;		Nothing
 12090 ;; This function is called by:
 12091 ;;		_SYSTEM_Initialize
 12092 ;; This function uses a non-reentrant model
 12093 ;;
 12094                           
 12095                           
 12096                           ;psect for function _PWM2_Initialize
 12097  1D1E                     _PWM2_Initialize:	
 12098                           
 12099                           ;pwm2.c: 63: PWM2INTE = 0x01;
 12100                           
 12101                           ;incstack = 0
 12102                           ; Regs used in _PWM2_Initialize: [wreg+status,2]
 12103  1D1E  3001               	movlw	1
 12104  1D1F  003B               	movlb	27	; select bank27
 12105  1D20  00AC               	movwf	44	;volatile
 12106                           
 12107                           ;pwm2.c: 66: PWM2INTF = 0x00;
 12108  1D21  01AD               	clrf	45	;volatile
 12109                           
 12110                           ;pwm2.c: 69: PWM2CLKCON = 0x00;
 12111  1D22  01AE               	clrf	46	;volatile
 12112                           
 12113                           ;pwm2.c: 72: PWM2LDCON = 0x00;
 12114  1D23  01AF               	clrf	47	;volatile
 12115                           
 12116                           ;pwm2.c: 75: PWM2OFCON = 0x00;
 12117  1D24  01B0               	clrf	48	;volatile
 12118                           
 12119                           ;pwm2.c: 78: PWM2PHH = 0x00;
 12120  1D25  01A2               	clrf	34	;volatile
 12121                           
 12122                           ;pwm2.c: 81: PWM2PHL = 0x02;
 12123  1D26  3002               	movlw	2
 12124  1D27  00A1               	movwf	33	;volatile
 12125                           
 12126                           ;pwm2.c: 84: PWM2DCH = 0x00;
 12127  1D28  01A4               	clrf	36	;volatile
 12128                           
 12129                           ;pwm2.c: 87: PWM2DCL = 0xA0;
 12130  1D29  30A0               	movlw	160
 12131  1D2A  00A3               	movwf	35	;volatile
 12132                           
 12133                           ;pwm2.c: 90: PWM2PRH = 0x06;
 12134  1D2B  3006               	movlw	6
 12135  1D2C  00A6               	movwf	38	;volatile
 12136                           
 12137                           ;pwm2.c: 93: PWM2PRL = 0x3F;
 12138  1D2D  303F               	movlw	63
 12139  1D2E  00A5               	movwf	37	;volatile
 12140                           
 12141                           ;pwm2.c: 96: PWM2OFH = 0x00;
 12142  1D2F  01A8               	clrf	40	;volatile
 12143                           
 12144                           ;pwm2.c: 99: PWM2OFL = 0x01;
 12145  1D30  3001               	movlw	1
 12146  1D31  00A7               	movwf	39	;volatile
 12147                           
 12148                           ;pwm2.c: 102: PWM2TMRH = 0x00;
 12149  1D32  01AA               	clrf	42	;volatile
 12150                           
 12151                           ;pwm2.c: 105: PWM2TMRL = 0x00;
 12152  1D33  01A9               	clrf	41	;volatile
 12153                           
 12154                           ;pwm2.c: 108: PWM2CON = 0x90;
 12155  1D34  3090               	movlw	144
 12156  1D35  00AB               	movwf	43	;volatile
 12157  1D36  0008               	return
 12158  1D37                     __end_of_PWM2_Initialize:	
 12159                           
 12160                           	psect	text44
 12161  1D05                     __ptext44:	
 12162 ;; *************** function _PWM1_Initialize *****************
 12163 ;; Defined at:
 12164 ;;		line 58 in file "mcc_generated_files/pwm1.c"
 12165 ;; Parameters:    Size  Location     Type
 12166 ;;		None
 12167 ;; Auto vars:     Size  Location     Type
 12168 ;;		None
 12169 ;; Return value:  Size  Location     Type
 12170 ;;                  1    wreg      void 
 12171 ;; Registers used:
 12172 ;;		wreg, status,2
 12173 ;; Tracked objects:
 12174 ;;		On entry : 0/0
 12175 ;;		On exit  : 0/0
 12176 ;;		Unchanged: 0/0
 12177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12181 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12182 ;;Total ram usage:        0 bytes
 12183 ;; Hardware stack levels used:    1
 12184 ;; Hardware stack levels required when called:    1
 12185 ;; This function calls:
 12186 ;;		Nothing
 12187 ;; This function is called by:
 12188 ;;		_SYSTEM_Initialize
 12189 ;; This function uses a non-reentrant model
 12190 ;;
 12191                           
 12192                           
 12193                           ;psect for function _PWM1_Initialize
 12194  1D05                     _PWM1_Initialize:	
 12195                           
 12196                           ;pwm1.c: 63: PWM1INTE = 0x01;
 12197                           
 12198                           ;incstack = 0
 12199                           ; Regs used in _PWM1_Initialize: [wreg+status,2]
 12200  1D05  3001               	movlw	1
 12201  1D06  003B               	movlb	27	; select bank27
 12202  1D07  009C               	movwf	28	;volatile
 12203                           
 12204                           ;pwm1.c: 66: PWM1INTF = 0x00;
 12205  1D08  019D               	clrf	29	;volatile
 12206                           
 12207                           ;pwm1.c: 69: PWM1CLKCON = 0x00;
 12208  1D09  019E               	clrf	30	;volatile
 12209                           
 12210                           ;pwm1.c: 72: PWM1LDCON = 0x00;
 12211  1D0A  019F               	clrf	31	;volatile
 12212                           
 12213                           ;pwm1.c: 75: PWM1OFCON = 0x00;
 12214  1D0B  01A0               	clrf	32	;volatile
 12215                           
 12216                           ;pwm1.c: 78: PWM1PHH = 0x00;
 12217  1D0C  0192               	clrf	18	;volatile
 12218                           
 12219                           ;pwm1.c: 81: PWM1PHL = 0x02;
 12220  1D0D  3002               	movlw	2
 12221  1D0E  0091               	movwf	17	;volatile
 12222                           
 12223                           ;pwm1.c: 84: PWM1DCH = 0x00;
 12224  1D0F  0194               	clrf	20	;volatile
 12225                           
 12226                           ;pwm1.c: 87: PWM1DCL = 0xa0;
 12227  1D10  30A0               	movlw	160
 12228  1D11  0093               	movwf	19	;volatile
 12229                           
 12230                           ;pwm1.c: 90: PWM1PRH = 0x06;
 12231  1D12  3006               	movlw	6
 12232  1D13  0096               	movwf	22	;volatile
 12233                           
 12234                           ;pwm1.c: 93: PWM1PRL = 0x3F;
 12235  1D14  303F               	movlw	63
 12236  1D15  0095               	movwf	21	;volatile
 12237                           
 12238                           ;pwm1.c: 96: PWM1OFH = 0x00;
 12239  1D16  0198               	clrf	24	;volatile
 12240                           
 12241                           ;pwm1.c: 99: PWM1OFL = 0x01;
 12242  1D17  3001               	movlw	1
 12243  1D18  0097               	movwf	23	;volatile
 12244                           
 12245                           ;pwm1.c: 102: PWM1TMRH = 0x00;
 12246  1D19  019A               	clrf	26	;volatile
 12247                           
 12248                           ;pwm1.c: 105: PWM1TMRL = 0x00;
 12249  1D1A  0199               	clrf	25	;volatile
 12250                           
 12251                           ;pwm1.c: 108: PWM1CON = 0x90;
 12252  1D1B  3090               	movlw	144
 12253  1D1C  009B               	movwf	27	;volatile
 12254  1D1D  0008               	return
 12255  1D1E                     __end_of_PWM1_Initialize:	
 12256                           
 12257                           	psect	text45
 12258  10B8                     __ptext45:	
 12259 ;; *************** function _PIN_MANAGER_Initialize *****************
 12260 ;; Defined at:
 12261 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
 12262 ;; Parameters:    Size  Location     Type
 12263 ;;		None
 12264 ;; Auto vars:     Size  Location     Type
 12265 ;;  state           1    1[COMMON] unsigned char 
 12266 ;; Return value:  Size  Location     Type
 12267 ;;                  1    wreg      void 
 12268 ;; Registers used:
 12269 ;;		wreg, status,2, status,0
 12270 ;; Tracked objects:
 12271 ;;		On entry : 0/0
 12272 ;;		On exit  : 0/0
 12273 ;;		Unchanged: 0/0
 12274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12276 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12278 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12279 ;;Total ram usage:        1 bytes
 12280 ;; Hardware stack levels used:    1
 12281 ;; Hardware stack levels required when called:    1
 12282 ;; This function calls:
 12283 ;;		Nothing
 12284 ;; This function is called by:
 12285 ;;		_SYSTEM_Initialize
 12286 ;; This function uses a non-reentrant model
 12287 ;;
 12288                           
 12289                           
 12290                           ;psect for function _PIN_MANAGER_Initialize
 12291  10B8                     _PIN_MANAGER_Initialize:	
 12292                           
 12293                           ;pin_manager.c: 57: LATA = 0x00;
 12294                           
 12295                           ;incstack = 0
 12296                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
 12297  10B8  0022               	movlb	2	; select bank2
 12298  10B9  018C               	clrf	12	;volatile
 12299                           
 12300                           ;pin_manager.c: 58: LATC = 0x00;
 12301  10BA  018E               	clrf	14	;volatile
 12302                           
 12303                           ;pin_manager.c: 63: TRISA = 0x0F;
 12304  10BB  300F               	movlw	15
 12305  10BC  0021               	movlb	1	; select bank1
 12306  10BD  008C               	movwf	12	;volatile
 12307                           
 12308                           ;pin_manager.c: 64: TRISC = 0x1f;
 12309  10BE  301F               	movlw	31
 12310  10BF  008E               	movwf	14	;volatile
 12311                           
 12312                           ;pin_manager.c: 69: ANSELC = 0x0F;
 12313  10C0  300F               	movlw	15
 12314  10C1  0023               	movlb	3	; select bank3
 12315  10C2  008E               	movwf	14	;volatile
 12316                           
 12317                           ;pin_manager.c: 70: ANSELA = 0x17;
 12318  10C3  3017               	movlw	23
 12319  10C4  008C               	movwf	12	;volatile
 12320                           
 12321                           ;pin_manager.c: 75: WPUA = 0x3B;
 12322  10C5  303B               	movlw	59
 12323  10C6  0024               	movlb	4	; select bank4
 12324  10C7  008C               	movwf	12	;volatile
 12325                           
 12326                           ;pin_manager.c: 76: WPUC = 0x30;
 12327  10C8  3030               	movlw	48
 12328  10C9  008E               	movwf	14	;volatile
 12329                           
 12330                           ;pin_manager.c: 77: OPTION_REGbits.nWPUEN = 0;
 12331  10CA  0021               	movlb	1	; select bank1
 12332  10CB  1395               	bcf	21,7	;volatile
 12333                           
 12334                           ;pin_manager.c: 82: ODCONA = 0x00;
 12335  10CC  0025               	movlb	5	; select bank5
 12336  10CD  018C               	clrf	12	;volatile
 12337                           
 12338                           ;pin_manager.c: 83: ODCONC = 0x00;
 12339  10CE  018E               	clrf	14	;volatile
 12340                           
 12341                           ;pin_manager.c: 85: bool state = (unsigned char)GIE;
 12342  10CF  3000               	movlw	0
 12343  10D0  1B8B               	btfsc	11,7	;volatile
 12344  10D1  3001               	movlw	1
 12345  10D2  00F1               	movwf	PIN_MANAGER_Initialize@state
 12346                           
 12347                           ;pin_manager.c: 86: GIE = 0;
 12348  10D3  138B               	bcf	11,7	;volatile
 12349                           
 12350                           ;pin_manager.c: 87: PPSLOCK = 0x55;
 12351  10D4  3055               	movlw	85
 12352  10D5  003C               	movlb	28	; select bank28
 12353  10D6  008F               	movwf	15	;volsfr
 12354                           
 12355                           ;pin_manager.c: 88: PPSLOCK = 0xAA;
 12356  10D7  30AA               	movlw	170
 12357  10D8  008F               	movwf	15	;volsfr
 12358                           
 12359                           ;pin_manager.c: 89: PPSLOCKbits.PPSLOCKED = 0x00;
 12360  10D9  100F               	bcf	15,0	;volsfr
 12361                           
 12362                           ;pin_manager.c: 91: RXPPSbits.RXPPS = 0x14;
 12363  10DA  0815               	movf	21,w	;volatile
 12364  10DB  39E0               	andlw	-32
 12365  10DC  3814               	iorlw	20
 12366  10DD  0095               	movwf	21	;volatile
 12367                           
 12368                           ;pin_manager.c: 92: RA4PPSbits.RA4PPS = 0x04;
 12369  10DE  003D               	movlb	29	; select bank29
 12370  10DF  0814               	movf	20,w	;volatile
 12371  10E0  39F0               	andlw	-16
 12372  10E1  3804               	iorlw	4
 12373  10E2  0094               	movwf	20	;volatile
 12374                           
 12375                           ;pin_manager.c: 93: RA5PPSbits.RA5PPS = 0x03;
 12376  10E3  0815               	movf	21,w	;volatile
 12377  10E4  39F0               	andlw	-16
 12378  10E5  3803               	iorlw	3
 12379  10E6  0095               	movwf	21	;volatile
 12380                           
 12381                           ;pin_manager.c: 94: RC5PPSbits.RC5PPS = 0x09;
 12382  10E7  0825               	movf	37,w	;volatile
 12383  10E8  39F0               	andlw	-16
 12384  10E9  3809               	iorlw	9
 12385  10EA  00A5               	movwf	37	;volatile
 12386                           
 12387                           ;pin_manager.c: 96: PPSLOCK = 0x55;
 12388  10EB  3055               	movlw	85
 12389  10EC  003C               	movlb	28	; select bank28
 12390  10ED  008F               	movwf	15	;volsfr
 12391                           
 12392                           ;pin_manager.c: 97: PPSLOCK = 0xAA;
 12393  10EE  30AA               	movlw	170
 12394  10EF  008F               	movwf	15	;volsfr
 12395                           
 12396                           ;pin_manager.c: 98: PPSLOCKbits.PPSLOCKED = 0x01;
 12397  10F0  140F               	bsf	15,0	;volsfr
 12398                           
 12399                           ;pin_manager.c: 100: GIE = state;
 12400  10F1  1C71               	btfss	PIN_MANAGER_Initialize@state,0
 12401  10F2  28F5               	goto	u2390
 12402  10F3  178B               	bsf	11,7	;volatile
 12403  10F4  0008               	return
 12404  10F5                     u2390:	
 12405  10F5  138B               	bcf	11,7	;volatile
 12406  10F6  0008               	return
 12407  10F7                     __end_of_PIN_MANAGER_Initialize:	
 12408                           
 12409                           	psect	text46
 12410  0803                     __ptext46:	
 12411 ;; *************** function _OSCILLATOR_Initialize *****************
 12412 ;; Defined at:
 12413 ;;		line 84 in file "mcc_generated_files/mcc.c"
 12414 ;; Parameters:    Size  Location     Type
 12415 ;;		None
 12416 ;; Auto vars:     Size  Location     Type
 12417 ;;		None
 12418 ;; Return value:  Size  Location     Type
 12419 ;;                  1    wreg      void 
 12420 ;; Registers used:
 12421 ;;		None
 12422 ;; Tracked objects:
 12423 ;;		On entry : 0/0
 12424 ;;		On exit  : 0/0
 12425 ;;		Unchanged: 0/0
 12426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12430 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12431 ;;Total ram usage:        0 bytes
 12432 ;; Hardware stack levels used:    1
 12433 ;; Hardware stack levels required when called:    1
 12434 ;; This function calls:
 12435 ;;		Nothing
 12436 ;; This function is called by:
 12437 ;;		_SYSTEM_Initialize
 12438 ;; This function uses a non-reentrant model
 12439 ;;
 12440                           
 12441                           
 12442                           ;psect for function _OSCILLATOR_Initialize
 12443  0803                     _OSCILLATOR_Initialize:	
 12444                           
 12445                           ;incstack = 0
 12446                           ; Regs used in _OSCILLATOR_Initialize: []
 12447  0803  0008               	return
 12448  0804                     __end_of_OSCILLATOR_Initialize:	
 12449                           
 12450                           	psect	text47
 12451  1C81                     __ptext47:	
 12452 ;; *************** function _FVR_Initialize *****************
 12453 ;; Defined at:
 12454 ;;		line 57 in file "mcc_generated_files/fvr.c"
 12455 ;; Parameters:    Size  Location     Type
 12456 ;;		None
 12457 ;; Auto vars:     Size  Location     Type
 12458 ;;		None
 12459 ;; Return value:  Size  Location     Type
 12460 ;;                  1    wreg      void 
 12461 ;; Registers used:
 12462 ;;		wreg
 12463 ;; Tracked objects:
 12464 ;;		On entry : 0/0
 12465 ;;		On exit  : 0/0
 12466 ;;		Unchanged: 0/0
 12467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12471 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12472 ;;Total ram usage:        0 bytes
 12473 ;; Hardware stack levels used:    1
 12474 ;; Hardware stack levels required when called:    1
 12475 ;; This function calls:
 12476 ;;		Nothing
 12477 ;; This function is called by:
 12478 ;;		_SYSTEM_Initialize
 12479 ;; This function uses a non-reentrant model
 12480 ;;
 12481                           
 12482                           
 12483                           ;psect for function _FVR_Initialize
 12484  1C81                     _FVR_Initialize:	
 12485                           
 12486                           ;fvr.c: 60: FVRCON = 0x81;
 12487                           
 12488                           ;incstack = 0
 12489                           ; Regs used in _FVR_Initialize: [wreg]
 12490  1C81  3081               	movlw	129
 12491  1C82  0022               	movlb	2	; select bank2
 12492  1C83  0097               	movwf	23	;volatile
 12493  1C84  0008               	return
 12494  1C85                     __end_of_FVR_Initialize:	
 12495                           
 12496                           	psect	text48
 12497  1CB4                     __ptext48:	
 12498 ;; *************** function _EUSART_Initialize *****************
 12499 ;; Defined at:
 12500 ;;		line 55 in file "mcc_generated_files/eusart.c"
 12501 ;; Parameters:    Size  Location     Type
 12502 ;;		None
 12503 ;; Auto vars:     Size  Location     Type
 12504 ;;		None
 12505 ;; Return value:  Size  Location     Type
 12506 ;;                  1    wreg      void 
 12507 ;; Registers used:
 12508 ;;		wreg
 12509 ;; Tracked objects:
 12510 ;;		On entry : 0/0
 12511 ;;		On exit  : 0/0
 12512 ;;		Unchanged: 0/0
 12513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12517 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12518 ;;Total ram usage:        0 bytes
 12519 ;; Hardware stack levels used:    1
 12520 ;; Hardware stack levels required when called:    1
 12521 ;; This function calls:
 12522 ;;		Nothing
 12523 ;; This function is called by:
 12524 ;;		_SYSTEM_Initialize
 12525 ;; This function uses a non-reentrant model
 12526 ;;
 12527                           
 12528                           
 12529                           ;psect for function _EUSART_Initialize
 12530  1CB4                     _EUSART_Initialize:	
 12531                           
 12532                           ;eusart.c: 58: PIE1bits.RCIE = 0;
 12533                           
 12534                           ;incstack = 0
 12535                           ; Regs used in _EUSART_Initialize: [wreg]
 12536  1CB4  0021               	movlb	1	; select bank1
 12537  1CB5  1291               	bcf	17,5	;volatile
 12538                           
 12539                           ;eusart.c: 59: PIE1bits.TXIE = 0;
 12540  1CB6  1211               	bcf	17,4	;volatile
 12541                           
 12542                           ;eusart.c: 61: BAUDCON = 0x08;
 12543  1CB7  3008               	movlw	8
 12544  1CB8  0023               	movlb	3	; select bank3
 12545  1CB9  009F               	movwf	31	;volatile
 12546                           
 12547                           ;eusart.c: 64: RCSTA = 0x90;
 12548  1CBA  3090               	movlw	144
 12549  1CBB  009D               	movwf	29	;volatile
 12550                           
 12551                           ;eusart.c: 67: TXSTA = 0x24;
 12552  1CBC  3024               	movlw	36
 12553  1CBD  009E               	movwf	30	;volatile
 12554                           
 12555                           ;eusart.c: 71: SPBRGL = 0xA0;
 12556  1CBE  30A0               	movlw	160
 12557  1CBF  009B               	movwf	27	;volatile
 12558                           
 12559                           ;eusart.c: 76: SPBRGH = 0x01;
 12560  1CC0  3001               	movlw	1
 12561  1CC1  009C               	movwf	28	;volatile
 12562                           
 12563                           ;eusart.c: 77: PIE1bits.RCIE = 1;
 12564  1CC2  0021               	movlb	1	; select bank1
 12565  1CC3  1691               	bsf	17,5	;volatile
 12566                           
 12567                           ;eusart.c: 78: PIR1bits.TXIF=0;
 12568  1CC4  0020               	movlb	0	; select bank0
 12569  1CC5  1211               	bcf	17,4	;volatile
 12570  1CC6  0008               	return
 12571  1CC7                     __end_of_EUSART_Initialize:	
 12572                           
 12573                           	psect	text49
 12574  1C9F                     __ptext49:	
 12575 ;; *************** function _ADC1_Initialize *****************
 12576 ;; Defined at:
 12577 ;;		line 64 in file "mcc_generated_files/adc1.c"
 12578 ;; Parameters:    Size  Location     Type
 12579 ;;		None
 12580 ;; Auto vars:     Size  Location     Type
 12581 ;;		None
 12582 ;; Return value:  Size  Location     Type
 12583 ;;                  1    wreg      void 
 12584 ;; Registers used:
 12585 ;;		wreg, status,2
 12586 ;; Tracked objects:
 12587 ;;		On entry : 0/0
 12588 ;;		On exit  : 0/0
 12589 ;;		Unchanged: 0/0
 12590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12594 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12595 ;;Total ram usage:        0 bytes
 12596 ;; Hardware stack levels used:    1
 12597 ;; Hardware stack levels required when called:    1
 12598 ;; This function calls:
 12599 ;;		Nothing
 12600 ;; This function is called by:
 12601 ;;		_SYSTEM_Initialize
 12602 ;; This function uses a non-reentrant model
 12603 ;;
 12604                           
 12605                           
 12606                           ;psect for function _ADC1_Initialize
 12607  1C9F                     _ADC1_Initialize:	
 12608                           
 12609                           ;adc1.c: 69: ADCON0 = 0x01;
 12610                           
 12611                           ;incstack = 0
 12612                           ; Regs used in _ADC1_Initialize: [wreg+status,2]
 12613  1C9F  3001               	movlw	1
 12614  1CA0  0021               	movlb	1	; select bank1
 12615  1CA1  009D               	movwf	29	;volatile
 12616                           
 12617                           ;adc1.c: 72: ADCON1 = 0x63;
 12618  1CA2  3063               	movlw	99
 12619  1CA3  009E               	movwf	30	;volatile
 12620                           
 12621                           ;adc1.c: 75: ADCON2 = 0x00;
 12622  1CA4  019F               	clrf	31	;volatile
 12623                           
 12624                           ;adc1.c: 78: ADRESL = 0x00;
 12625  1CA5  019B               	clrf	27	;volatile
 12626                           
 12627                           ;adc1.c: 81: ADRESH = 0x00;
 12628  1CA6  019C               	clrf	28	;volatile
 12629  1CA7  0008               	return
 12630  1CA8                     __end_of_ADC1_Initialize:	
 12631                           
 12632                           	psect	intentry
 12633  0804                     __pintentry:	
 12634 ;; *************** function _INTERRUPT_InterruptManager *****************
 12635 ;; Defined at:
 12636 ;;		line 59 in file "mcc_generated_files/interrupt_manager.c"
 12637 ;; Parameters:    Size  Location     Type
 12638 ;;		None
 12639 ;; Auto vars:     Size  Location     Type
 12640 ;;		None
 12641 ;; Return value:  Size  Location     Type
 12642 ;;                  1    wreg      void 
 12643 ;; Registers used:
 12644 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12645 ;; Tracked objects:
 12646 ;;		On entry : 0/0
 12647 ;;		On exit  : 0/0
 12648 ;;		Unchanged: 0/0
 12649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12652 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12653 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12654 ;;Total ram usage:        1 bytes
 12655 ;; Hardware stack levels used:    1
 12656 ;; This function calls:
 12657 ;;		Nothing
 12658 ;; This function is called by:
 12659 ;;		Interrupt level 1
 12660 ;; This function uses a non-reentrant model
 12661 ;;
 12662                           
 12663  0804                     _INTERRUPT_InterruptManager:	
 12664                           
 12665                           ;incstack = 0
 12666  0804  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12667                           
 12668                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0]
 12669  0805  3188               	pagesel	$
 12670                           
 12671                           ;interrupt_manager.c: 63: if(INTCONbits.PEIE == 1 && PIE1bits.TMR2IE == 1 && PIR1bits.TM
      +                          R2IF == 1)
 12672  0806  1F0B               	btfss	11,6	;volatile
 12673  0807  2836               	goto	i1l4515
 12674  0808  0021               	movlb	1	; select bank1
 12675  0809  1C91               	btfss	17,1	;volatile
 12676  080A  2836               	goto	i1l4515
 12677  080B  0020               	movlb	0	; select bank0
 12678  080C  1C91               	btfss	17,1	;volatile
 12679  080D  2836               	goto	i1l4515
 12680                           
 12681                           ;interrupt_manager.c: 64: {;interrupt_manager.c: 66: PIR1bits.TMR2IF = 0;
 12682  080E  1091               	bcf	17,1	;volatile
 12683                           
 12684                           ;interrupt_manager.c: 67: Event |= (1<<1);
 12685  080F  14EB               	bsf	_Event,1	;volatile
 12686                           
 12687                           ;interrupt_manager.c: 68: subTickerX++;
 12688  0810  3001               	movlw	1
 12689  0811  00F0               	movwf	??_INTERRUPT_InterruptManager
 12690  0812  0870               	movf	??_INTERRUPT_InterruptManager,w
 12691  0813  07E9               	addwf	_subTickerX,f
 12692                           
 12693                           ;interrupt_manager.c: 69: subTickerX_1s++;
 12694  0814  3001               	movlw	1
 12695  0815  00F0               	movwf	??_INTERRUPT_InterruptManager
 12696  0816  0870               	movf	??_INTERRUPT_InterruptManager,w
 12697  0817  07E8               	addwf	_subTickerX_1s,f
 12698                           
 12699                           ;interrupt_manager.c: 70: if(subTickerX>=5){
 12700  0818  3005               	movlw	5
 12701  0819  0269               	subwf	_subTickerX,w
 12702  081A  1C03               	skipc
 12703  081B  281E               	goto	i1l4497
 12704                           
 12705                           ;interrupt_manager.c: 71: subTickerX=0;
 12706  081C  01E9               	clrf	_subTickerX
 12707                           
 12708                           ;interrupt_manager.c: 72: Event |= (1<<2);
 12709  081D  156B               	bsf	_Event,2	;volatile
 12710  081E                     i1l4497:	
 12711                           
 12712                           ;interrupt_manager.c: 73: };interrupt_manager.c: 74: if(subTickerX_1s>=50){
 12713  081E  3032               	movlw	50
 12714  081F  0268               	subwf	_subTickerX_1s,w
 12715  0820  1C03               	skipc
 12716  0821  2824               	goto	i1l4503
 12717                           
 12718                           ;interrupt_manager.c: 75: subTickerX_1s=0;
 12719  0822  01E8               	clrf	_subTickerX_1s
 12720                           
 12721                           ;interrupt_manager.c: 76: Event |= (1<<3);
 12722  0823  15EB               	bsf	_Event,3	;volatile
 12723  0824                     i1l4503:	
 12724                           
 12725                           ;interrupt_manager.c: 77: };interrupt_manager.c: 79: if(eusartRxIdleTime_ms){
 12726  0824  087C               	movf	_eusartRxIdleTime_ms,w	;volatile
 12727  0825  1903               	btfsc	3,2
 12728  0826  2831               	goto	i1l4513
 12729                           
 12730                           ;interrupt_manager.c: 80: eusartRxIdleTime_ms++;
 12731  0827  3001               	movlw	1
 12732  0828  00F0               	movwf	??_INTERRUPT_InterruptManager
 12733  0829  0870               	movf	??_INTERRUPT_InterruptManager,w
 12734  082A  07FC               	addwf	_eusartRxIdleTime_ms,f	;volatile
 12735                           
 12736                           ;interrupt_manager.c: 81: if(eusartRxIdleTime_ms>5){
 12737  082B  3006               	movlw	6
 12738  082C  027C               	subwf	_eusartRxIdleTime_ms,w	;volatile
 12739  082D  1C03               	skipc
 12740  082E  2831               	goto	i1l4513
 12741                           
 12742                           ;interrupt_manager.c: 82: Event|=(1<<0);
 12743  082F  146B               	bsf	_Event,0	;volatile
 12744                           
 12745                           ;interrupt_manager.c: 83: eusartRxIdleTime_ms=0;
 12746  0830  01FC               	clrf	_eusartRxIdleTime_ms	;volatile
 12747  0831                     i1l4513:	
 12748                           
 12749                           ;interrupt_manager.c: 84: };interrupt_manager.c: 85: };interrupt_manager.c: 86: globalTi
      +                          cker++;
 12750  0831  3001               	movlw	1
 12751  0832  0021               	movlb	1	; select bank1
 12752  0833  07CE               	addwf	_globalTicker^(0+128),f	;volatile
 12753  0834  3000               	movlw	0
 12754  0835  3DCF               	addwfc	(_globalTicker+1)^(0+128),f	;volatile
 12755  0836                     i1l4515:	
 12756                           
 12757                           ;interrupt_manager.c: 87: };interrupt_manager.c: 88: if(INTCONbits.PEIE == 1 && PIE1bits
      +                          .RCIE == 1 && PIR1bits.RCIF == 1)
 12758  0836  1F0B               	btfss	11,6	;volatile
 12759  0837  285E               	goto	i1l4533
 12760  0838  0021               	movlb	1	; select bank1
 12761  0839  1E91               	btfss	17,5	;volatile
 12762  083A  285E               	goto	i1l4533
 12763  083B  0020               	movlb	0	; select bank0
 12764  083C  1E91               	btfss	17,5	;volatile
 12765  083D  285E               	goto	i1l4533
 12766                           
 12767                           ;interrupt_manager.c: 89: {;interrupt_manager.c: 91: PIR1bits.RCIF=0;
 12768  083E  1291               	bcf	17,5	;volatile
 12769                           
 12770                           ;interrupt_manager.c: 92: if(1 == RCSTAbits.OERR){
 12771  083F  0023               	movlb	3	; select bank3
 12772  0840  1C9D               	btfss	29,1	;volatile
 12773  0841  2844               	goto	i1l4525
 12774                           
 12775                           ;interrupt_manager.c: 93: RCSTAbits.CREN = 0;
 12776  0842  121D               	bcf	29,4	;volatile
 12777                           
 12778                           ;interrupt_manager.c: 94: RCSTAbits.CREN = 1;
 12779  0843  161D               	bsf	29,4	;volatile
 12780  0844                     i1l4525:	
 12781                           
 12782                           ;interrupt_manager.c: 95: };interrupt_manager.c: 96: rxtemp=RCREG;
 12783  0844  0819               	movf	25,w	;volatile
 12784  0845  00F0               	movwf	??_INTERRUPT_InterruptManager
 12785  0846  0870               	movf	??_INTERRUPT_InterruptManager,w
 12786  0847  0020               	movlb	0	; select bank0
 12787  0848  00E7               	movwf	_rxtemp
 12788                           
 12789                           ;interrupt_manager.c: 97: if(eusartRxCount<32){
 12790  0849  3020               	movlw	32
 12791  084A  026A               	subwf	_eusartRxCount,w	;volatile
 12792  084B  1803               	skipnc
 12793  084C  285A               	goto	i1l4531
 12794                           
 12795                           ;interrupt_manager.c: 98: eusartRxBuffer[eusartRxCount]=rxtemp;
 12796  084D  0867               	movf	_rxtemp,w
 12797  084E  00F0               	movwf	??_INTERRUPT_InterruptManager
 12798  084F  086A               	movf	_eusartRxCount,w
 12799  0850  3E40               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 12800  0851  0086               	movwf	6
 12801  0852  3001               	movlw	1	; select bank2/3
 12802  0853  0087               	movwf	7
 12803  0854  0870               	movf	??_INTERRUPT_InterruptManager,w
 12804  0855  0081               	movwf	1
 12805                           
 12806                           ;interrupt_manager.c: 99: eusartRxCount++;
 12807  0856  3001               	movlw	1
 12808  0857  00F0               	movwf	??_INTERRUPT_InterruptManager
 12809  0858  0870               	movf	??_INTERRUPT_InterruptManager,w
 12810  0859  07EA               	addwf	_eusartRxCount,f	;volatile
 12811  085A                     i1l4531:	
 12812                           
 12813                           ;interrupt_manager.c: 101: };interrupt_manager.c: 102: eusartRxIdleTime_ms=1;
 12814  085A  3001               	movlw	1
 12815  085B  00F0               	movwf	??_INTERRUPT_InterruptManager
 12816  085C  0870               	movf	??_INTERRUPT_InterruptManager,w
 12817  085D  00FC               	movwf	_eusartRxIdleTime_ms	;volatile
 12818  085E                     i1l4533:	
 12819                           
 12820                           ;interrupt_manager.c: 103: };interrupt_manager.c: 105: if( PIR1bits.TXIF == 1 && INTCONb
      +                          its.PEIE && PIE1bits.TXIE)
 12821  085E  0020               	movlb	0	; select bank0
 12822  085F  1A11               	btfsc	17,4	;volatile
 12823  0860  1F0B               	btfss	11,6	;volatile
 12824  0861  2884               	goto	i1l4555
 12825  0862  0021               	movlb	1	; select bank1
 12826  0863  1E11               	btfss	17,4	;volatile
 12827  0864  2884               	goto	i1l4555
 12828                           
 12829                           ;interrupt_manager.c: 106: {;interrupt_manager.c: 109: if(1 == RCSTAbits.OERR){
 12830  0865  0023               	movlb	3	; select bank3
 12831  0866  1C9D               	btfss	29,1	;volatile
 12832  0867  286C               	goto	i1l4543
 12833                           
 12834                           ;interrupt_manager.c: 110: RCSTAbits.CREN = 0;
 12835  0868  121D               	bcf	29,4	;volatile
 12836                           
 12837                           ;interrupt_manager.c: 111: RCSTAbits.CREN = 1;
 12838  0869  161D               	bsf	29,4	;volatile
 12839                           
 12840                           ;interrupt_manager.c: 112: RCSTAbits.SREN=0;
 12841  086A  129D               	bcf	29,5	;volatile
 12842                           
 12843                           ;interrupt_manager.c: 113: RCSTAbits.SREN=1;
 12844  086B  169D               	bsf	29,5	;volatile
 12845  086C                     i1l4543:	
 12846                           
 12847                           ;interrupt_manager.c: 114: };interrupt_manager.c: 115: if(txBufLen>0){
 12848  086C  0020               	movlb	0	; select bank0
 12849  086D  0866               	movf	_txBufLen,w
 12850  086E  1903               	btfsc	3,2
 12851  086F  2880               	goto	i1l4551
 12852                           
 12853                           ;interrupt_manager.c: 116: TXREG=txBuf[txCount];
 12854  0870  0865               	movf	_txCount,w
 12855  0871  3EA0               	addlw	(low (_txBuf| (0+256)))& (0+255)
 12856  0872  0086               	movwf	6
 12857  0873  3001               	movlw	1	; select bank3/4
 12858  0874  0087               	movwf	7
 12859  0875  0801               	movf	1,w
 12860  0876  0023               	movlb	3	; select bank3
 12861  0877  009A               	movwf	26	;volatile
 12862                           
 12863                           ;interrupt_manager.c: 117: txBufLen--;
 12864  0878  3001               	movlw	1
 12865  0879  0020               	movlb	0	; select bank0
 12866  087A  02E6               	subwf	_txBufLen,f
 12867                           
 12868                           ;interrupt_manager.c: 118: txCount++;
 12869  087B  3001               	movlw	1
 12870  087C  00F0               	movwf	??_INTERRUPT_InterruptManager
 12871  087D  0870               	movf	??_INTERRUPT_InterruptManager,w
 12872  087E  07E5               	addwf	_txCount,f
 12873                           
 12874                           ;interrupt_manager.c: 119: }else{
 12875  087F  2884               	goto	i1l4555
 12876  0880                     i1l4551:	
 12877                           
 12878                           ;interrupt_manager.c: 120: txBufLen=0;
 12879  0880  01E6               	clrf	_txBufLen
 12880                           
 12881                           ;interrupt_manager.c: 121: txCount=0;
 12882  0881  01E5               	clrf	_txCount
 12883                           
 12884                           ;interrupt_manager.c: 122: PIE1bits.TXIE=0;
 12885  0882  0021               	movlb	1	; select bank1
 12886  0883  1211               	bcf	17,4	;volatile
 12887  0884                     i1l4555:	
 12888                           
 12889                           ;interrupt_manager.c: 123: };interrupt_manager.c: 125: };interrupt_manager.c: 127: if(PI
      +                          R3bits.PWM2IF){
 12890  0884  0020               	movlb	0	; select bank0
 12891  0885  1A93               	btfsc	19,5	;volatile
 12892                           
 12893                           ;interrupt_manager.c: 128: PIR3bits.PWM2IF = 0;
 12894  0886  1293               	bcf	19,5	;volatile
 12895                           
 12896                           ;interrupt_manager.c: 129: };interrupt_manager.c: 131: if(PIR3bits.PWM1IF){
 12897  0887  1A13               	btfsc	19,4	;volatile
 12898                           
 12899                           ;interrupt_manager.c: 132: PIR3bits.PWM1IF=0;
 12900  0888  1213               	bcf	19,4	;volatile
 12901  0889  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12902  088A  0009               	retfie
 12903  088B                     __end_of_INTERRUPT_InterruptManager:	
 12904  007E                     btemp	set	126	;btemp
 12905  007E                     int$flags	set	126
 12906  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    17
    Data        12
    BSS         214
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     39      80
    BANK1            80      2      58
    BANK2            80      0      64
    BANK3            80      0      64
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           60      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    crc_append@message	PTR unsigned char  size(2) Largest target is 132
		 -> modbusBuf(BANK2[32]), sysData(BIGRAM[132]), 

    crc_verify@message	PTR unsigned char  size(2) Largest target is 132
		 -> modbusBuf(BANK2[32]), sysData(BIGRAM[132]), 

    crc_sum@buf	PTR unsigned char  size(2) Largest target is 132
		 -> modbusBuf(BANK2[32]), sysData(BIGRAM[132]), 

    m_mem_cpy_len@s	PTR unsigned char  size(2) Largest target is 132
		 -> modbusBuf(BANK2[32]), sysData(BIGRAM[132]), eusartRxBuffer(BANK2[32]), 

    m_mem_cpy_len@d	PTR unsigned char  size(2) Largest target is 64
		 -> crc_verify@expected(BANK0[2]), modbusBuf(BANK2[32]), txBuf(BANK3[64]), 

    modbus_response_process@rbuf	PTR unsigned char  size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    modbus_response_process@pmdbs	PTR struct . size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    modbus_response_command@rbuf	PTR unsigned char  size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    modbus_response_command@pmdbs	PTR struct . size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    modbus_response_write_mult_register@rbuf	PTR unsigned char  size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    modbus_response_write_mult_register@stb	PTR struct . size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    modbus_response_write_single_register@rbuf	PTR unsigned char  size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    modbus_response_write_single_register@pmdbs	PTR struct . size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    getRegisterVal@tempData	PTR unsigned int  size(1) Largest target is 2
		 -> modbus_response_command@tempData(BANK0[2]), 

    modbus_response_illgeal_function@buf	PTR unsigned char  size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    modbus_response_illgeal_function@pmdbs	PTR struct . size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    my_flash_system_write@buf	PTR unsigned char  size(2) Largest target is 132
		 -> sysData(BIGRAM[132]), 

    my_flash_system_read@buf	PTR unsigned char  size(2) Largest target is 132
		 -> sysData(BIGRAM[132]), 

    uart_send_len@buf	PTR unsigned char  size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_calc_rs_lo_avg
    _main->_uart_send_len
    _sys_data_init->_my_flash_system_read
    _pid_pwm2_vout_run->_set_vout_pwm2_duty
    _set_vout_pwm2_duty->_get_vout_pwm2_duty
    _pid_pwm1_idrv_run->_set_idrv_pwm1_duty
    _set_idrv_pwm1_duty->_get_idrv_pwm1_duty
    _modbus_response_write_single_register->_crc_append
    _modbus_response_write_single_register->_uart_send_len
    _modbus_response_write_mult_register->_crc_append
    _modbus_response_write_mult_register->_uart_send_len
    _sys_data_save->_crc_append
    _my_flash_read_system_erase->_FLASH_EraseBlock
    _modbus_response_illgeal_function->_crc_append
    _modbus_response_illgeal_function->_uart_send_len
    _modbus_response_command->_crc_append
    _modbus_response_command->_uart_send_len
    _uart_send_len->_m_mem_cpy_len
    _crc_append->_crc_sum
    _crc_verify->_m_mem_cpy_len
    _calc_temp_rs->___lldiv
    _calc_temp_rc->___lldiv
    _calc_rs_lo_avg->___lldiv
    _calc_expect_vout_adc_value->___aldiv
    ___aldiv->___lmul
    _adc_sample->_fvr_set_gain
    _TMR2_Initialize->_TMR2_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_calc_expect_vout_adc_value
    _sys_data_init->_crc_verify
    _pid_pwm1_idrv_run->___aldiv
    _modbus_response_process->_modbus_response_command
    _modbus_response_process->_modbus_response_write_single_register
    _modbus_response_write_single_register->_crc_append
    _modbus_response_write_mult_register->_crc_append
    _sys_data_save->_crc_append
    _modbus_response_illgeal_function->_crc_append
    _modbus_response_command->_crc_append
    _crc_append->_crc_sum
    _crc_verify->_crc_sum
    _calc_temp_rs->___lldiv
    _calc_temp_rc->___lldiv
    _calc_rs_lo_avg->___lldiv
    _calc_expect_vout_adc_value->___aldiv
    ___aldiv->___lmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   49027
                                              0 BANK1      2     2      0
                  _SYSTEM_Initialize
                         _adc_sample
         _calc_expect_vout_adc_value
                     _calc_rs_lo_avg
                       _calc_temp_rc
                       _calc_temp_rs
                      _m_mem_cpy_len
            _modbus_response_process
                  _pid_pwm1_idrv_run
                  _pid_pwm2_vout_run
                      _sys_data_init
                _uart_received_start
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (1) _uart_received_start                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sys_data_init                                       10    10      0    5897
                                             14 BANK0     10    10      0
                             ___wmul
                         _crc_verify
               _my_flash_system_read
                      _sys_data_save
 ---------------------------------------------------------------------------------
 (2) _my_flash_system_read                                11     7      4     311
                                              1 COMMON    11     7      4
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     396
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _pid_pwm2_vout_run                                    6     6      0    1281
                                              0 BANK0      6     6      0
                            ___awdiv
                            ___lwdiv
                 _set_vout_pwm2_duty
 ---------------------------------------------------------------------------------
 (2) _set_vout_pwm2_duty                                   4     2      2     212
                                              7 COMMON     4     2      2
                 _get_vout_pwm2_duty
 ---------------------------------------------------------------------------------
 (3) _get_vout_pwm2_duty                                   6     4      2      25
                                              1 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              1 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     452
                                              1 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (1) _pid_pwm1_idrv_run                                   12    12      0    3340
                                             18 BANK0     12    12      0
                            ___aldiv
                             ___lmul
                 _set_idrv_pwm1_duty
 ---------------------------------------------------------------------------------
 (2) _set_idrv_pwm1_duty                                   4     2      2     212
                                              7 COMMON     4     2      2
                 _get_idrv_pwm1_duty
 ---------------------------------------------------------------------------------
 (3) _get_idrv_pwm1_duty                                   6     4      2      25
                                              1 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _modbus_response_process                              6     4      2   25674
                                             24 BANK0      6     4      2
                         _crc_verify
            _modbus_response_command
   _modbus_response_illgeal_function
_modbus_response_write_mult_register
_modbus_response_write_single_regist
 ---------------------------------------------------------------------------------
 (2) _modbus_response_write_single_register               12    12      0    7386
                                             12 BANK0     12    12      0
                         _crc_append
                      _sys_data_save
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (2) _modbus_response_write_mult_register                  5     5      0    6758
                                             12 BANK0      5     5      0
                         _crc_append
                      _sys_data_save
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (2) _sys_data_save                                        0     0      0    2878
                         _crc_append
         _my_flash_read_system_erase
              _my_flash_system_write
 ---------------------------------------------------------------------------------
 (3) _my_flash_system_write                               16    12      4     473
                                              1 COMMON     6     2      4
                                              0 BANK0     10    10      0
 ---------------------------------------------------------------------------------
 (3) _my_flash_read_system_erase                           0     0      0     523
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     3     1      2     523
                                              1 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (2) _modbus_response_illgeal_function                     4     3      1    3840
                                             12 BANK0      4     3      1
                         _crc_append
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (2) _modbus_response_command                             12    12      0    5169
                                             12 BANK0     12    12      0
                         _crc_append
                     _getRegisterVal
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (1) _uart_send_len                                        4     3      1    1550
                                              8 COMMON     4     3      1
                      _m_mem_cpy_len
 ---------------------------------------------------------------------------------
 (3) _getRegisterVal                                      10     7      3     711
                                              1 COMMON    10     7      3
 ---------------------------------------------------------------------------------
 (3) _crc_append                                          11     7      4    1882
                                              7 COMMON     5     5      0
                                              6 BANK0      6     2      4
                            _crc_sum
 ---------------------------------------------------------------------------------
 (2) _crc_verify                                          10     6      4    2079
                                              8 COMMON     2     2      0
                                              6 BANK0      8     4      4
                            _crc_sum
                      _m_mem_cpy_len
 ---------------------------------------------------------------------------------
 (2) _m_mem_cpy_len                                        7     1      6     762
                                              1 COMMON     7     1      6
 ---------------------------------------------------------------------------------
 (4) _crc_sum                                             12     8      4     731
                                              1 COMMON     6     2      4
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _calc_temp_rs                                         8     4      4    2346
                                              5 BANK0      8     4      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) _calc_temp_rc                                        12     8      4    2346
                                              5 BANK0     12     8      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) _calc_rs_lo_avg                                       9     7      2    1072
                                             10 COMMON     2     2      0
                                              5 BANK0      7     5      2
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     770
                                              1 COMMON     9     1      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _calc_expect_vout_adc_value                          21    19      2    3624
                                             18 BANK0     21    19      2
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8    1576
                                              1 COMMON     8     0      8
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8    1345
                                              9 COMMON     1     1      0
                                              4 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _adc_sample                                          12    10      2    1014
                                              4 COMMON     5     3      2
                                              0 BANK0      7     7      0
                           _adc_init
                       _fvr_set_gain
 ---------------------------------------------------------------------------------
 (2) _fvr_set_gain                                         3     3      0      69
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _adc_init                                             2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     121
                    _ADC1_Initialize
                  _EUSART_Initialize
                     _FVR_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM1_Initialize
                    _PWM2_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0      98
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR2_SetInterruptHandler                             2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _ADC1_Initialize
     _EUSART_Initialize
     _FVR_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM1_Initialize
     _PWM2_Initialize
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
       _TMR2_StartTimer
     _WDT_Initialize
   _adc_sample
     _adc_init
     _fvr_set_gain
   _calc_expect_vout_adc_value
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _calc_rs_lo_avg
     ___lldiv
   _calc_temp_rc
     ___lldiv
     ___lmul
   _calc_temp_rs
     ___lldiv
     ___lmul
   _m_mem_cpy_len
   _modbus_response_process
     _crc_verify
       _crc_sum
       _m_mem_cpy_len
     _modbus_response_command
       _crc_append
         _crc_sum
       _getRegisterVal
       _uart_send_len
         _m_mem_cpy_len
     _modbus_response_illgeal_function
       _crc_append
         _crc_sum
       _uart_send_len
         _m_mem_cpy_len
     _modbus_response_write_mult_register
       _crc_append
         _crc_sum
       _sys_data_save
         _crc_append
           _crc_sum
         _my_flash_read_system_erase
           _FLASH_EraseBlock
         _my_flash_system_write
       _uart_send_len
         _m_mem_cpy_len
     _modbus_response_write_single_register
       _crc_append
         _crc_sum
       _sys_data_save
         _crc_append
           _crc_sum
         _my_flash_read_system_erase
           _FLASH_EraseBlock
         _my_flash_system_write
       _uart_send_len
         _m_mem_cpy_len
   _pid_pwm1_idrv_run
     ___aldiv
       ___lmul (ARG)
     ___lmul
     _set_idrv_pwm1_duty
       _get_idrv_pwm1_duty
   _pid_pwm2_vout_run
     ___awdiv
     ___lwdiv
     _set_vout_pwm2_duty
       _get_vout_pwm2_duty
   _sys_data_init
     ___wmul
     _crc_verify
       _crc_sum
       _m_mem_cpy_len
     _my_flash_system_read
     _sys_data_save
       _crc_append
         _crc_sum
       _my_flash_read_system_erase
         _FLASH_EraseBlock
       _my_flash_system_write
   _uart_received_start
   _uart_send_len
     _m_mem_cpy_len

 _INTERRUPT_InterruptManager (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3E0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     27      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      2      3A       7       72.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      40       9       80.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      40      11       80.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     117      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              3C      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           20      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     117      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Sat Mar 30 16:58:58 2019

              __end_of_TMR2_SetInterruptHandler 1C97                                               pc 0002  
                  ??_my_flash_read_system_erase 0074                                    ___awdiv@sign 0077  
                                            _x0 004B                                              _x1 00BC  
                                            _y0 004F                                              _y1 00C0  
                        __end_of_FVR_Initialize 1C85                             ___wmul@multiplicand 0073  
                                           l511 10A2                                             l621 1D02  
                                           l633 1248                                             l627 1CDB  
                                           l652 17F9                                             l732 1411  
                                           l822 0D71                                             l662 1535  
                                           l639 1262                                             l647 14E4  
                                           l735 1465                                             l664 157B  
                                           l657 0C40                                             l683 0AD3  
                                           l786 111C                                             _GIE 005F  
                                           _PR2 001B                                 _pwm1DutyForIdrv 00D4  
                                           _x32 00B8                                             _y32 0047  
                                           _err 00A0                                 _TMR2_Initialize 1CC7  
                                           wreg 0009                            ??_get_vout_pwm2_duty 0073  
                          ??_set_vout_pwm2_duty 0079                                 ??_uart_send_len 0079  
                                          S5431 1800                                            l1062 11E4  
                                          l1151 1374                                            l1064 1202  
                                          l1086 1D8C                                            l5011 1E6D  
                                          l4043 114E                                            l4061 1174  
                                          l4053 1156                                            l4037 1143  
                                          l4151 1252                                            l5015 1E78  
                                          l3511 0EE5                                            l3415 143D  
                                          l3407 1423                                            l4055 1162  
                                          l4161 1255                                            l5041 1395  
                                          l5033 1385                                            l3521 0F1E  
                                          l3513 0EF2                                            l3505 0EBA  
                                          l3425 1450                                            l3417 143F  
                                          l5121 0C29                                            l4065 117D  
                                          l4163 128B                                            l5051 13C3  
                                          l5043 13A3                                            l3531 0F4B  
                                          l3523 0F27                                            l3515 0EFF  
                                          l3507 0EC2                                            l5123 0C38  
                                          l4091 1EBC                                            l4083 1E9E  
                                          l3533 0F54                                            l3525 0F30  
                                          l3517 0F0C                                            l3509 0ED2  
                                          l3541 0F72                                            l4069 1185  
                                          l4085 1EAA                                            l5055 13CE  
                                          l3551 0F95                                            l3535 0F5D  
                                          l3527 0F39                                            l3519 0F15  
                                          l3439 146D                                            l5119 0C21  
                                          l4095 1EC5                                            l5151 158C  
                                          l4273 12C2                                            l4265 129E  
                                          l5073 14D0                                            l3529 0F42  
                                          l5225 16E1                                            l5059 13DC  
                                          l5091 17E5                                            l5075 14DC  
                                          l3539 0F65                                            l3395 140C  
                                          l5251 0FD6                                            l5139 1546  
                                          l5219 1690                                            l5315 0DCE  
                                          l3709 1CFB                                            l5173 094F  
                                          l5093 17F1                                            l5253 0FDB  
                                          l5261 0FEC                                            l5229 170A  
                                          l5159 08EA                                            l5255 0FE0  
                                          l5247 0FC7                                            l3751 1050  
                                          l5193 0A0A                                            l5169 0947  
                                          l5257 0FE5                                            l3753 1077  
                                          l5345 0E77                                            l5187 09E9  
                                          l5357 0EAE                                            l5349 0E80  
                                          l5359 0EB1                                            l3971 119B  
                                          l4763 1229                                            l4835 1043  
                                          l4923 0D73                                            l3939 1D86  
                                          l3981 11C9                                            l3973 11A9  
                                          l4765 122E                                            l4757 1214  
                                          l4917 0D43                                            l4927 0D79  
                                          l4871 0C7B                                            l3985 11D4  
                                          l4865 0C6B                                            l4779 1DF3  
                                          l4891 0CCF                                            l4883 0CB1  
                                          l4799 108D                                            l4983 15E3  
                                          l4995 15E4                                            l4997 1616  
                       __end_of_PWM1_Initialize 1D1E                                            _LATA 010C  
                                          u2215 13F6                                            _LATC 010E  
                                          u3035 1159                                            u3115 1EA1  
                                          u2245 1431                                            u3215 126F  
                                          u2415 1DCD                                            u3055 1163  
                                          u3135 1EAB                                            u3225 1277  
                                          u2345 1D40                                            u3065 116D  
                                          u3145 1EB5                                            u2425 1DE9  
                                          u3235 125E                                            u2275 1417  
                                          u3075 1175                                            u3155 1EBD  
                                          u2355 1D59                                            u2390 10F5  
                                          u4225 0C88                                            u2465 1056  
                                          u4075 11EA                                            u4155 103F  
                                          u4405 15BE                                            u5047 1243  
                                          u4505 1398                                            u4525 13A4  
                                          u4445 1E79                                            u2845 119E  
                                          u4285 0CF0                                            u2765 1D8D  
                                          u4535 13B8                                            u4455 1E80  
                                          u2775 1D92                                            u4545 13C4  
                                          u4705 093D                                            u2865 11AA  
                                          u2875 11BE                                            u4733 09DF  
                                          u2885 11CA                                            u4645 152E  
                                          u4655 153F                                            u4753 0A03  
                                          u4665 1574                                            u4905 0E0C  
                                          u4675 1585                                            u4915 0E23  
                                          u4925 0E3A                                            u4695 091C  
                                 _m_mem_cpy_len 1DF3                                            _TMR2 001A  
                                          _WPUA 020C                                            _WPUC 020E  
                                          _main 0DA2  modbus_response_write_single_register@startAddr 0036  
                                          _pidU 00D0             __size_of_my_flash_read_system_erase 0023  
                                          fsr0h 0005                                            fsr1h 0007  
                                          indf0 0000                                            fsr0l 0004  
                                          indf1 0001                                            fsr1l 0006  
                                          _xlen 0064                                            btemp 007E  
                                          start 088B                                 _pwm2DutyForVout 00D6  
                     ??_modbus_response_command 002C                         __end_of_PWM2_Initialize 1D37  
                     ??_modbus_response_process 003A                                 ?_FVR_Initialize 0070  
                __size_of_OSCILLATOR_Initialize 0001                   __end_of_OSCILLATOR_Initialize 0804  
                               __end_of___aldiv 13E5                                           ?_main 0070  
                               __end_of___awdiv 118A                                 __end_of___lldiv 11DD  
                               ___awdiv@divisor 0071                                           _T2CON 001C  
                               __end_of___lwdiv 1ECA                                 ___awdiv@counter 0076  
                                         _RCREG 0199                                           _RCSTA 019D  
                                         _TRISA 008C                                           _TRISC 008E  
                                         _TXREG 019A                                           _TXSTA 019E  
              modbus_response_command@startAddr 0030                             ___lmul@multiplicand 0075  
                                         _PidKp 00CC                                           _PidTd 00C8  
                                         _Event 006B                                           _PidTi 00CA  
                               __end_of_crc_sum 1233                                  _WDT_Initialize 1C85  
                                         _resRc 006E                                           _resRs 006C  
                                         _txBuf 01A0          modbus_response_write_mult_register@len 002E  
                                ?_m_mem_cpy_len 0071          modbus_response_write_mult_register@stb 0030  
                    __end_of_get_idrv_pwm1_duty 1D50                      __end_of_set_idrv_pwm1_duty 1DD7  
                            crc_verify@expected 002C                                           status 0003  
                                         wtemp0 007E                                 _TMR2_StartTimer 1C7E  
                                 fvr_set_gain@g 0073     __end_of_modbus_response_write_mult_register 1363  
  __size_of_modbus_response_write_mult_register 0072           ??_modbus_response_write_mult_register 002C  
          ?_modbus_response_write_mult_register 0070             _modbus_response_write_mult_register 12F1  
            __end_of_calc_expect_vout_adc_value 0AD8                      _calc_expect_vout_adc_value 08E4  
                              __end_of_HexTable 182F                            pid_pwm1_idrv_run@t32 003A  
                               __initialization 088D                                    __end_of_main 0EB3  
                         __size_of_calc_temp_rc 00D9                           __size_of_calc_temp_rs 0090  
                       __end_of_TMR2_Initialize 1CDA                     ?_INTERRUPT_InterruptManager 0070  
           modbus_response_illgeal_function@buf 002E                        _TMR2_SetInterruptHandler 1C91  
                                        ??_main 00D8                                ??_calc_rs_lo_avg 007A  
                   modbus_response_process@rbuf 003D                   __size_of_my_flash_system_read 0038  
                   modbus_response_process@rlen 0038                     modbus_response_process@resp 003B  
               __end_of_modbus_response_command 1653                          __end_of_WDT_Initialize 1C89  
                  my_flash_system_write@blocNum 0023                                          _ADCON0 009D  
                                        _ADCON1 009E                                          _ADCON2 009F  
                                        _ADRESH 009C                                          _ADRESL 009B  
                              ___awdiv@dividend 0073                                          _ANSELA 018C  
                                        _ANSELC 018E                 __end_of_modbus_response_process 1000  
                              __end_of_adc_init 1CEE                                ?_PWM1_Initialize 0070  
                                        _ODCONA 028C                                          _ODCONC 028E  
                                        i1l4503 0824                                          i1l4513 0831  
                                        i1l4531 085A                                          i1l4515 0836  
                                        i1l4525 0844                                          i1l4533 085E  
                                        i1l4551 0880                                          i1l4543 086C  
                                        i1l4555 0884                                          i1l4497 081E  
                                        _FVRCON 0117                                          _PMADRH 0192  
                                        _PMADRL 0191                                          _PMDATH 0194  
                                        _PMDATL 0193                                          _PMCON2 0196  
                     __size_of_FLASH_EraseBlock 001C                     __end_of_uart_received_start 1C8D  
                                        _SPBRGH 019C                                          _SPBRGL 019B  
                                        _WDTCON 0097                                    _calc_temp_rc 1727  
                                  _calc_temp_rs 1473                                 calc_rs_lo_avg@i 002B  
                               calc_rs_lo_avg@x 0025              __end_of_my_flash_read_system_erase 1E33  
                    _my_flash_read_system_erase 1E10      modbus_response_write_single_register@pmdbs 0034  
                                        ___lmul 1E64                                       ??___aldiv 0079  
                                        ___wmul 1D84                                       ??___awdiv 0075  
                                     ??___lldiv 0079                                       ??___lwdiv 0075  
                              ?_PWM2_Initialize 0070                                          _pwm2Ei 00C4  
                              ___awdiv@quotient 0078                        my_flash_system_write@buf 0071  
                      my_flash_system_write@len 0073                        my_flash_system_write@loc 0025  
                                     ??_crc_sum 0075                        __size_of_ADC1_Initialize 0009  
                                        _rxtemp 0067                                 ?_WDT_Initialize 0070  
                               ??_m_mem_cpy_len 0077                my_flash_system_write@GIEBitValue 0022  
                       __end_of_TMR2_StartTimer 1C81        TMR2_SetInterruptHandler@InterruptHandler 0071  
               modbus_response_command@tempData 0036        __end_of_modbus_response_illgeal_function 1139  
     __size_of_modbus_response_illgeal_function 0042              ??_modbus_response_illgeal_function 002D  
             ?_modbus_response_illgeal_function 002C                _modbus_response_illgeal_function 10F7  
                                 ?_fvr_set_gain 0070                                  fvr_set_gain@t8 0072  
                             _SYSTEM_Initialize 1D69                         __end_of__initialization 08E0  
                        __size_of_sys_data_init 00D4                           _my_flash_system_write 13E5  
                            ?_SYSTEM_Initialize 0070                          __size_of_sys_data_save 0036  
                            getRegisterVal@addr 0071                                  __pcstackCOMMON 0070  
                                  __pidataBANK0 1C8D                                    __pidataBANK1 1C97  
                           ??_SYSTEM_Initialize 0073                                      _adc_sample 1233  
        modbus_response_write_single_register@i 0033                                ?_TMR2_Initialize 0070  
                                _OPTION_REGbits 0095        modbus_response_write_single_register@t16 0031  
                             crc_append@message 0026                          getRegisterVal@tempAddr 007A  
                        my_flash_system_write@i 0029                          my_flash_system_write@j 0020  
                        getRegisterVal@tempData 0073                       __end_of_SYSTEM_Initialize 1D84  
                                ??_fvr_set_gain 0071                                      __pbssBANK0 0047  
                                    __pbssBANK1 00A0                                      __pbssBANK2 0120  
                                    __pbssBANK3 01A0                  modbus_response_command@tmpAddr 002E  
               my_flash_system_read@GIEBitValue 0077                                      adc_init@ch 0072  
                              ??_FVR_Initialize 0071                                      __pmaintext 0DA2  
                    modbus_response_command@len 0034                                         ?___lmul 0071  
                                       ?___wmul 0071                                      __pintentry 0804  
                  ??_calc_expect_vout_adc_value 0034                                         _BAUDCON 019F  
                                ___lmul@product 0020                                      _crc_append 1E33  
                                     ?_adc_init 0070                                    adc_sample@ch 0020  
                                 _sys_data_init 1653                                   _sys_data_save 1ECA  
                                    _crc_verify 100E                                   _eusartRxCount 006A  
                   __size_of_get_vout_pwm2_duty 0019                     __size_of_set_vout_pwm2_duty 001C  
                                       _PWM1DCH 0D94                                         _PWM1DCL 0D93  
                                       _PWM2DCH 0DA4                                         _PWM2DCL 0DA3  
                                       _PWM1CON 0D9B                                         _PWM2CON 0DAB  
                                       _PWM1OFH 0D98                                         _PWM1OFL 0D97  
                                       _PWM2OFH 0DA8                                         _PWM1PHH 0D92  
                                       _PWM2OFL 0DA7                                         _PWM1PHL 0D91  
                                       _PWM2PHH 0DA2                                         _PWM2PHL 0DA1  
                                       _PWM1PRH 0D96                                         _PWM1PRL 0D95  
                                       _PWM2PRH 0DA6                                         _PWM2PRL 0DA5  
         modbus_response_illgeal_function@pmdbs 002F                                         _PPSLOCK 0E0F  
                             ??_ADC1_Initialize 0071                                ?_TMR2_StartTimer 0070  
                        set_idrv_pwm1_duty@duty 0077                           __end_of_uart_send_len 10B8  
                              _FLASH_EraseBlock 1D9F                          ?_my_flash_system_write 0071  
                       __size_of_getRegisterVal 00F9                     ?_calc_expect_vout_adc_value 0032  
   modbus_response_write_single_register@fiSave 0030                      ??_TMR2_SetInterruptHandler 0073  
                                       ___aldiv 1363                                         ___awdiv 1139  
                               __size_of___lmul 0032                                         ___lldiv 118A  
                               __size_of___wmul 001B                              _get_idrv_pwm1_duty 1D37  
                            _set_idrv_pwm1_duty 1DBB                                         ___lwdiv 1E96  
                                   ?_adc_sample 0074                                  adc_sample@gfvr 0074  
                                ?_sys_data_init 0070                                  ?_sys_data_save 0070  
                                    ??_adc_init 0071                                         __ptext1 1C89  
                                       __ptext2 1653                                         __ptext3 1045  
                                       __ptext4 1D84                                         __ptext5 1503  
                                       __ptext6 1DD7                                         __ptext7 1D50  
                                       __ptext8 1E96                                         __ptext9 1139  
                                       _crc_sum 11DD                                         _pidBbSm 0063  
                           ?_get_idrv_pwm1_duty 0071                             ?_set_idrv_pwm1_duty 0077  
                         _OSCILLATOR_Initialize 0803                                       _T2CONbits 001C  
                                    _rsLoAvgBuf 00AC                                         _rsLoAvg 0053  
                              ___aldiv@dividend 0028                        ??_PIN_MANAGER_Initialize 0071  
                                       _txCount 0065                                         _sysData 235C  
                    __size_of_SYSTEM_Initialize 001B                                         clrloop0 1CA9  
                          end_of_initialization 08E0                                         init_ram 1002  
                      ?_modbus_response_command 0070                                         initloop 1003  
                  __end_of_my_flash_system_read 107D                            ??_get_idrv_pwm1_duty 0073  
                          ??_set_idrv_pwm1_duty 0079                               _EUSART_Initialize 1CB4  
                               ___lldiv@divisor 0071                                      _voExpectMv 00C6  
                               ___lldiv@counter 0024                              ?_EUSART_Initialize 0070  
                      ?_modbus_response_process 0038                                       _RCSTAbits 019D  
                   ?_my_flash_read_system_erase 0070                                ___aldiv@quotient 002E  
                                     _PWM1LDCON 0D9F                                       _PWM2LDCON 0DAF  
                                     _PWM1OFCON 0DA0                                       _PWM2OFCON 0DB0  
                          __end_of_fvr_set_gain 1D05                                     ?_crc_append 0026  
                                    _subTickerX 0069                             ??_EUSART_Initialize 0071  
                              ??_WDT_Initialize 0071                                     ?_crc_verify 0026  
                                    crc_sum@crc 0024                                      crc_sum@buf 0071  
                                    crc_sum@len 0073                                       _RXPPSbits 0E15  
                           __size_of_adc_sample 005D                       __end_of_EUSART_Initialize 1CC7  
                                  _globalTicker 00CE                                       _TXSTAbits 019E  
                      __size_of_PWM1_Initialize 0019                    __size_of_uart_received_start 0004  
                  _TMR2_DefaultInterruptHandler 0000                                 ??_sys_data_init 002E  
                               ??_sys_data_save 007C                                  __end_of___lmul 1E96  
                                __end_of___wmul 1D9F                                _voExpectAdcValue 0055  
                                _rtAdcValueRcHi 0059                                  _rtAdcValueRcLo 005B  
                                _rtAdcValueRsHi 005D                                  _rtAdcValueVoFb 0057  
                                _rtAdcValueRsLo 005F                          ?_OSCILLATOR_Initialize 0070  
                             crc_verify@message 0026                             start_initialization 088D  
                      __size_of_PWM2_Initialize 0019                 __size_of_PIN_MANAGER_Initialize 003F  
                                 _PWM1LDCONbits 0D9F                         my_flash_system_read@buf 0071  
                       my_flash_system_read@len 0073                           __end_of_m_mem_cpy_len 1E10  
                                 _PWM2LDCONbits 0DAF                                  _getRegisterVal 0EB3  
                       __size_of_calc_rs_lo_avg 0061                             __size_of_crc_append 0031  
                           __size_of_crc_verify 0037       modbus_response_write_single_register@rbuf 0035  
                                      ??___lmul 0079                                        ??___wmul 0075  
                                   __pdataBANK0 006C                                     __pdataBANK1 00D0  
                   FLASH_EraseBlock@GIEBitValue 0073                                 _ADC1_Initialize 1C9F  
                      __end_of_FLASH_EraseBlock 1DBB                            _my_flash_system_read 1045  
                                   __pbssBIGRAM 235C                               __size_of_adc_init 0014  
                                   __pbssCOMMON 007C                                       ___latbits 0002  
                             getRegisterVal@t16 0078                                   __pcstackBANK0 0020  
                                 __pcstackBANK1 00D8                        __size_of_TMR2_Initialize 0013  
                       ??_my_flash_system_write 0075                          __end_of_getRegisterVal 0FAC  
                         my_flash_system_read@i 007A                      __size_of_EUSART_Initialize 0013  
       modbus_response_illgeal_function@errcode 002C                           __size_of_fvr_set_gain 0017  
                              ___lwdiv@dividend 0073                          _PIN_MANAGER_Initialize 10B8  
                   modbus_response_command@rbuf 0035                                        ?___aldiv 0024  
                         get_idrv_pwm1_duty@t16 0075                                        ?___awdiv 0071  
                                      ?___lldiv 0071                                    ??_adc_sample 0076  
                                   adc_sample@i 0021                                        ?___lwdiv 0071  
                             ??_PWM1_Initialize 0071                    ??_INTERRUPT_InterruptManager 0070  
                         set_idrv_pwm1_duty@t16 0079                                       __pswtext1 1800  
                                      ?_crc_sum 0071                   my_flash_system_read@flashAddr 0078  
                    __end_of_get_vout_pwm2_duty 1D69                           ?_my_flash_system_read 0071  
                    __end_of_set_vout_pwm2_duty 1DF3                                uart_send_len@buf 007B  
                              uart_send_len@len 0078                                   adc_sample@t16 0025  
                              ___lwdiv@quotient 0076                                   adc_sample@ret 0023  
                                 adc_sample@num 0075                                 ?_getRegisterVal 0071  
                                  _fvr_set_gain 1CEE                                  _eusartRxBuffer 0140  
                                     _modbusBuf 0120                                 ___aldiv@divisor 0024  
                             ??_PWM2_Initialize 0071                              __end_of_adc_sample 1290  
                               ___aldiv@counter 002C                                  ___wmul@product 0075  
                                     _pidpwm2_U 00D2                               _pid_pwm1_idrv_run 0AD8  
                                     clear_ram0 1CA8                                  m_mem_cpy_len@d 0071  
                                m_mem_cpy_len@s 0073                                   ?_calc_temp_rc 0025  
                                 ?_calc_temp_rs 0025                                        _PIE1bits 0091  
                      __size_of_TMR2_StartTimer 0003                          set_vout_pwm2_duty@duty 0077  
           __size_of_INTERRUPT_InterruptManager 0087                              ?_pid_pwm1_idrv_run 0070  
                       __end_of_ADC1_Initialize 1CA8                                        _PIR1bits 0011  
                                      _PIR3bits 0013                       FLASH_EraseBlock@startAddr 0071  
                                      _PWM1INTE 0D9C                                        _PWM1INTF 0D9D  
                                      _PWM2INTE 0DAC                                        _PWM2INTF 0DAD  
                                      _PWM1TMRH 0D9A                                        _PWM1TMRL 0D99  
                                      _PWM2TMRH 0DAA                                        _PWM2TMRL 0DA9  
                                  ??_crc_append 0077                __size_of_modbus_response_command 00BF  
                           ??_pid_pwm1_idrv_run 0032                          __size_of_uart_send_len 003B  
                                    _ADCON0bits 009D                               ___wmul@multiplier 0071  
                                  ??_crc_verify 0078                         __size_of_FVR_Initialize 0004  
              __size_of_modbus_response_process 0054               __size_of_TMR2_SetInterruptHandler 0006  
                     ?_TMR2_SetInterruptHandler 0071                                     _isRunInBoot 0FFF  
                           _uart_received_start 1C89                               _pid_pwm2_vout_run 1503  
                                      _HexTable 181E                               ___lmul@multiplier 0071  
                              crc_verify@crccal 002A                                  _calc_rs_lo_avg 1290  
                            ?_pid_pwm2_vout_run 0070                       __end_of_pid_pwm1_idrv_run 0C4E  
                             ??_TMR2_Initialize 0073                                  ??_calc_temp_rc 0029  
                                ??_calc_temp_rs 0029                              __end_of_crc_append 1E64  
                             calc_rs_lo_avg@t32 0027                     __size_of_get_idrv_pwm1_duty 0019  
                   __size_of_set_idrv_pwm1_duty 001C                             ??_pid_pwm2_vout_run 0020  
                            __end_of_crc_verify 1045                                    _PWM1INTFbits 0D9D  
                          ?_uart_received_start 0070                                    _PWM2INTFbits 0DAD  
                       ??_OSCILLATOR_Initialize 0071         modbus_response_write_mult_register@rbuf 002F  
                              __size_of___aldiv 0082                                __size_of___awdiv 0051  
                              __size_of___lldiv 0053                                __size_of___lwdiv 0034  
                        ??_my_flash_system_read 0075                                        _adc_init 1CDA  
                              __size_of_crc_sum 0056                           pid_pwm2_vout_run@__ei 0022  
                           _eusartRxIdleTime_ms 007C                       __end_of_pid_pwm2_vout_run 1594  
                                 crc_append@crc 002A                                sys_data_init@ret 0034  
                               ___lwdiv@divisor 0071                                 ___lwdiv@counter 0078  
                                      __ptext10 0AD8                                        __ptext11 1DBB  
                                      __ptext20 10F7                                        __ptext12 1D37  
                                      __ptext21 1594                                        __ptext13 0FAC  
                                      __ptext30 1290                                        __ptext22 107D  
                                      __ptext14 0C4E                                        __ptext31 118A  
                                      __ptext23 0EB3                                        __ptext15 12F1  
                                      __ptext40 1CC7                                        __ptext32 08E4  
                                      __ptext24 1E33                                        __ptext16 1ECA  
                                      __ptext41 1C7E                                        __ptext33 1E64  
                                      __ptext25 100E                                        __ptext17 13E5  
                                      __ptext42 1C91                                        __ptext34 1363  
                                      __ptext26 1DF3                                        __ptext18 1E10  
                                      __ptext43 1D1E                                        __ptext35 1233  
                                      __ptext27 11DD                                        __ptext19 1D9F  
                                      __ptext44 1D05                                        __ptext36 1CEE  
                                      __ptext28 1473                                        __ptext45 10B8  
                                      __ptext37 1CDA                                        __ptext29 1727  
                                      __ptext46 0803                                        __ptext38 1D69  
                                      __ptext47 1C81                                        __ptext39 1C85  
                                      __ptext48 1CB4                                        __ptext49 1C9F  
                        __end_of_calc_rs_lo_avg 12F1                                   _uart_send_len 107D  
                         get_vout_pwm2_duty@t16 0075                                   __size_of_main 0111  
                                 _subTickerX_1s 0068                           set_vout_pwm2_duty@t16 0079  
                                    _RA4PPSbits 0E94                           ??_uart_received_start 0071  
                                    _RA5PPSbits 0E95                                        _txBufLen 0066  
                              ?_ADC1_Initialize 0070                  my_flash_system_write@flashAddr 0027  
                                      int$flags 007E                                        crc_sum@i 0022  
                                      crc_sum@j 0020                                      _RC5PPSbits 0EA5  
 __end_of_modbus_response_write_single_register 0DA2  __size_of_modbus_response_write_single_register 0154  
       ??_modbus_response_write_single_register 002C          ?_modbus_response_write_single_register 0070  
         _modbus_response_write_single_register 0C4E                               ??_TMR2_StartTimer 0071  
            __end_of_INTERRUPT_InterruptManager 088B                      _INTERRUPT_InterruptManager 0804  
                         __end_of_sys_data_init 1727                           __end_of_sys_data_save 1F00  
                             ?_FLASH_EraseBlock 0071                   calc_expect_vout_adc_value@t32 0042  
                   PIN_MANAGER_Initialize@state 0071                        modbus_response_command@i 0032  
                            ??_FLASH_EraseBlock 0073                                      _INTCONbits 000B  
                                   _PWM1CONbits 0D9B                                m_mem_cpy_len@len 0075  
                                    _FVRCONbits 0117                                     _PWM2CONbits 0DAB  
                               ?_calc_rs_lo_avg 0025                    modbus_response_process@pmdbs 003C  
                       __size_of_WDT_Initialize 0004                                  ?_uart_send_len 0078  
                                      intlevel1 0000                  __size_of_my_flash_system_write 008E  
                          pid_pwm2_vout_run@t16 0024                   __end_of_my_flash_system_write 1473  
                    __size_of_pid_pwm1_idrv_run 0176                                      _PMCON1bits 0195  
                              ___lldiv@dividend 0075                         ?_PIN_MANAGER_Initialize 0070  
  modbus_response_write_mult_register@startAddr 002D                                     _PPSLOCKbits 0E0F  
                               _PWM1_Initialize 1D05                    modbus_response_command@pmdbs 0033  
                       _modbus_response_command 1594                                      _PWM1CLKCON 0D9E  
                                    _PWM2CLKCON 0DAE                          __size_of_m_mem_cpy_len 001D  
                                 __pstringtext1 181E                                  _FVR_Initialize 1C81  
                       _modbus_response_process 0FAC                                  sys_data_init@i 0036  
                                   crc_append@n 0028                            __end_of_calc_temp_rc 1800  
                          __end_of_calc_temp_rs 1503                                ___lldiv@quotient 0020  
                              ??_getRegisterVal 0074                                 _PWM2_Initialize 1D1E  
                    __size_of_pid_pwm2_vout_run 0091                                    ___aldiv@sign 002D  
                   calc_expect_vout_adc_value@i 0046                     calc_expect_vout_adc_value@x 0032  
           __size_of_calc_expect_vout_adc_value 01F4                  __end_of_PIN_MANAGER_Initialize 10F7  
                            _get_vout_pwm2_duty 1D50                              _set_vout_pwm2_duty 1DD7  
                         _TMR2_InterruptHandler 0061                                     crc_verify@n 0028  
                           ?_get_vout_pwm2_duty 0071                             ?_set_vout_pwm2_duty 0077  
