

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Mon Nov 26 23:45:07 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16F1575
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	swtext1,local,class=CONST,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	swtext2,local,class=CONST,delta=2
    49                           	psect	text26,local,class=CODE,merge=1,delta=2
    50                           	psect	text27,local,class=CODE,merge=1,delta=2
    51                           	psect	text28,local,class=CODE,merge=1,delta=2
    52                           	psect	text29,local,class=CODE,merge=1,delta=2
    53                           	psect	text30,local,class=CODE,merge=1,delta=2
    54                           	psect	text31,local,class=CODE,merge=1,delta=2
    55                           	psect	text32,local,class=CODE,merge=1,delta=2
    56                           	psect	text33,local,class=CODE,merge=1,delta=2
    57                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text35,local,class=CODE,merge=1,delta=2
    59                           	psect	text36,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text37,local,class=CODE,merge=1,delta=2,group=1
    61                           	psect	text38,local,class=CODE,merge=1,delta=2
    62                           	psect	text39,local,class=CODE,merge=1,delta=2
    63                           	psect	text40,local,class=CODE,merge=1,delta=2
    64                           	psect	text41,local,class=CODE,merge=1,delta=2
    65                           	psect	text42,local,class=CODE,merge=1,delta=2
    66                           	psect	text43,local,class=CODE,merge=1,delta=2
    67                           	psect	text44,local,class=CODE,merge=1,delta=2
    68                           	psect	text45,local,class=CODE,merge=1,delta=2
    69                           	psect	text46,local,class=CODE,merge=1,delta=2
    70                           	psect	text47,local,class=CODE,merge=1,delta=2
    71                           	psect	text48,local,class=CODE,merge=1,delta=2
    72                           	psect	text49,local,class=CODE,merge=1,delta=2
    73                           	psect	text50,local,class=CODE,merge=1,delta=2
    74                           	psect	text51,local,class=CODE,merge=1,delta=2
    75                           	psect	text52,local,class=CODE,merge=1,delta=2
    76                           	psect	intentry,global,class=CODE,delta=2
    77                           	dabs	1,0x620,32
    78                           	dabs	1,0x5A0,80
    79                           	dabs	1,0x55C,20
    80                           	dabs	1,0xFFF,1,_isRunInBoot
    81                           	dabs	1,0x235C,0,_sysData
    82                           	dabs	1,0x7E,2
    83  0000                     
    84                           ; Version 1.42
    85                           ; Generated 13/04/2017 GMT
    86                           ; 
    87                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    88                           ; All rights reserved.
    89                           ; 
    90                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    91                           ; 
    92                           ; Redistribution and use in source and binary forms, with or without modification, are
    93                           ; permitted provided that the following conditions are met:
    94                           ; 
    95                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    96                           ;        conditions and the following disclaimer.
    97                           ; 
    98                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    99                           ;        of conditions and the following disclaimer in the documentation and/or other
   100                           ;        materials provided with the distribution.
   101                           ; 
   102                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   103                           ;        software without specific prior written permission.
   104                           ; 
   105                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   106                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   107                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   108                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   109                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   110                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   111                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   112                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   113                           ; 
   114                           ; 
   115                           ; Code-generator required, PIC16F1575 Definitions
   116                           ; 
   117                           ; SFR Addresses
   118  0000                     	;# 
   119  0001                     	;# 
   120  0002                     	;# 
   121  0003                     	;# 
   122  0004                     	;# 
   123  0005                     	;# 
   124  0006                     	;# 
   125  0007                     	;# 
   126  0008                     	;# 
   127  0009                     	;# 
   128  000A                     	;# 
   129  000B                     	;# 
   130  000C                     	;# 
   131  000E                     	;# 
   132  0011                     	;# 
   133  0012                     	;# 
   134  0013                     	;# 
   135  0015                     	;# 
   136  0016                     	;# 
   137  0016                     	;# 
   138  0017                     	;# 
   139  0018                     	;# 
   140  0019                     	;# 
   141  001A                     	;# 
   142  001B                     	;# 
   143  001C                     	;# 
   144  008C                     	;# 
   145  008E                     	;# 
   146  0091                     	;# 
   147  0092                     	;# 
   148  0093                     	;# 
   149  0095                     	;# 
   150  0096                     	;# 
   151  0097                     	;# 
   152  0098                     	;# 
   153  0099                     	;# 
   154  009A                     	;# 
   155  009B                     	;# 
   156  009B                     	;# 
   157  009C                     	;# 
   158  009D                     	;# 
   159  009E                     	;# 
   160  009F                     	;# 
   161  010C                     	;# 
   162  010E                     	;# 
   163  0111                     	;# 
   164  0112                     	;# 
   165  0113                     	;# 
   166  0114                     	;# 
   167  0115                     	;# 
   168  0116                     	;# 
   169  0117                     	;# 
   170  0118                     	;# 
   171  0119                     	;# 
   172  018C                     	;# 
   173  018E                     	;# 
   174  0191                     	;# 
   175  0191                     	;# 
   176  0192                     	;# 
   177  0193                     	;# 
   178  0193                     	;# 
   179  0194                     	;# 
   180  0195                     	;# 
   181  0196                     	;# 
   182  0197                     	;# 
   183  0199                     	;# 
   184  019A                     	;# 
   185  019B                     	;# 
   186  019B                     	;# 
   187  019C                     	;# 
   188  019D                     	;# 
   189  019E                     	;# 
   190  019F                     	;# 
   191  020C                     	;# 
   192  020E                     	;# 
   193  028C                     	;# 
   194  028E                     	;# 
   195  030C                     	;# 
   196  030E                     	;# 
   197  038C                     	;# 
   198  038E                     	;# 
   199  0391                     	;# 
   200  0392                     	;# 
   201  0393                     	;# 
   202  0397                     	;# 
   203  0398                     	;# 
   204  0399                     	;# 
   205  0691                     	;# 
   206  0692                     	;# 
   207  0693                     	;# 
   208  0694                     	;# 
   209  0695                     	;# 
   210  0D8E                     	;# 
   211  0D8F                     	;# 
   212  0D90                     	;# 
   213  0D91                     	;# 
   214  0D91                     	;# 
   215  0D92                     	;# 
   216  0D93                     	;# 
   217  0D93                     	;# 
   218  0D94                     	;# 
   219  0D95                     	;# 
   220  0D95                     	;# 
   221  0D96                     	;# 
   222  0D97                     	;# 
   223  0D97                     	;# 
   224  0D98                     	;# 
   225  0D99                     	;# 
   226  0D99                     	;# 
   227  0D9A                     	;# 
   228  0D9B                     	;# 
   229  0D9C                     	;# 
   230  0D9C                     	;# 
   231  0D9D                     	;# 
   232  0D9D                     	;# 
   233  0D9E                     	;# 
   234  0D9F                     	;# 
   235  0DA0                     	;# 
   236  0DA1                     	;# 
   237  0DA1                     	;# 
   238  0DA2                     	;# 
   239  0DA3                     	;# 
   240  0DA3                     	;# 
   241  0DA4                     	;# 
   242  0DA5                     	;# 
   243  0DA5                     	;# 
   244  0DA6                     	;# 
   245  0DA7                     	;# 
   246  0DA7                     	;# 
   247  0DA8                     	;# 
   248  0DA9                     	;# 
   249  0DA9                     	;# 
   250  0DAA                     	;# 
   251  0DAB                     	;# 
   252  0DAC                     	;# 
   253  0DAC                     	;# 
   254  0DAD                     	;# 
   255  0DAD                     	;# 
   256  0DAE                     	;# 
   257  0DAF                     	;# 
   258  0DB0                     	;# 
   259  0DB1                     	;# 
   260  0DB1                     	;# 
   261  0DB2                     	;# 
   262  0DB3                     	;# 
   263  0DB3                     	;# 
   264  0DB4                     	;# 
   265  0DB5                     	;# 
   266  0DB5                     	;# 
   267  0DB6                     	;# 
   268  0DB7                     	;# 
   269  0DB7                     	;# 
   270  0DB8                     	;# 
   271  0DB9                     	;# 
   272  0DB9                     	;# 
   273  0DBA                     	;# 
   274  0DBB                     	;# 
   275  0DBC                     	;# 
   276  0DBC                     	;# 
   277  0DBD                     	;# 
   278  0DBD                     	;# 
   279  0DBE                     	;# 
   280  0DBF                     	;# 
   281  0DC0                     	;# 
   282  0DC1                     	;# 
   283  0DC1                     	;# 
   284  0DC2                     	;# 
   285  0DC3                     	;# 
   286  0DC3                     	;# 
   287  0DC4                     	;# 
   288  0DC5                     	;# 
   289  0DC5                     	;# 
   290  0DC6                     	;# 
   291  0DC7                     	;# 
   292  0DC7                     	;# 
   293  0DC8                     	;# 
   294  0DC9                     	;# 
   295  0DC9                     	;# 
   296  0DCA                     	;# 
   297  0DCB                     	;# 
   298  0DCC                     	;# 
   299  0DCC                     	;# 
   300  0DCD                     	;# 
   301  0DCD                     	;# 
   302  0DCE                     	;# 
   303  0DCF                     	;# 
   304  0DD0                     	;# 
   305  0E0F                     	;# 
   306  0E10                     	;# 
   307  0E11                     	;# 
   308  0E12                     	;# 
   309  0E13                     	;# 
   310  0E14                     	;# 
   311  0E15                     	;# 
   312  0E16                     	;# 
   313  0E17                     	;# 
   314  0E90                     	;# 
   315  0E91                     	;# 
   316  0E92                     	;# 
   317  0E94                     	;# 
   318  0E95                     	;# 
   319  0EA0                     	;# 
   320  0EA1                     	;# 
   321  0EA2                     	;# 
   322  0EA3                     	;# 
   323  0EA4                     	;# 
   324  0EA5                     	;# 
   325  0FE4                     	;# 
   326  0FE5                     	;# 
   327  0FE6                     	;# 
   328  0FE7                     	;# 
   329  0FE8                     	;# 
   330  0FE8                     	;# 
   331  0FE9                     	;# 
   332  0FEA                     	;# 
   333  0FEA                     	;# 
   334  0FEB                     	;# 
   335  0FED                     	;# 
   336  0FEE                     	;# 
   337  0FEE                     	;# 
   338  0FEF                     	;# 
   339  0000                     	;# 
   340  0001                     	;# 
   341  0002                     	;# 
   342  0003                     	;# 
   343  0004                     	;# 
   344  0005                     	;# 
   345  0006                     	;# 
   346  0007                     	;# 
   347  0008                     	;# 
   348  0009                     	;# 
   349  000A                     	;# 
   350  000B                     	;# 
   351  000C                     	;# 
   352  000E                     	;# 
   353  0011                     	;# 
   354  0012                     	;# 
   355  0013                     	;# 
   356  0015                     	;# 
   357  0016                     	;# 
   358  0016                     	;# 
   359  0017                     	;# 
   360  0018                     	;# 
   361  0019                     	;# 
   362  001A                     	;# 
   363  001B                     	;# 
   364  001C                     	;# 
   365  008C                     	;# 
   366  008E                     	;# 
   367  0091                     	;# 
   368  0092                     	;# 
   369  0093                     	;# 
   370  0095                     	;# 
   371  0096                     	;# 
   372  0097                     	;# 
   373  0098                     	;# 
   374  0099                     	;# 
   375  009A                     	;# 
   376  009B                     	;# 
   377  009B                     	;# 
   378  009C                     	;# 
   379  009D                     	;# 
   380  009E                     	;# 
   381  009F                     	;# 
   382  010C                     	;# 
   383  010E                     	;# 
   384  0111                     	;# 
   385  0112                     	;# 
   386  0113                     	;# 
   387  0114                     	;# 
   388  0115                     	;# 
   389  0116                     	;# 
   390  0117                     	;# 
   391  0118                     	;# 
   392  0119                     	;# 
   393  018C                     	;# 
   394  018E                     	;# 
   395  0191                     	;# 
   396  0191                     	;# 
   397  0192                     	;# 
   398  0193                     	;# 
   399  0193                     	;# 
   400  0194                     	;# 
   401  0195                     	;# 
   402  0196                     	;# 
   403  0197                     	;# 
   404  0199                     	;# 
   405  019A                     	;# 
   406  019B                     	;# 
   407  019B                     	;# 
   408  019C                     	;# 
   409  019D                     	;# 
   410  019E                     	;# 
   411  019F                     	;# 
   412  020C                     	;# 
   413  020E                     	;# 
   414  028C                     	;# 
   415  028E                     	;# 
   416  030C                     	;# 
   417  030E                     	;# 
   418  038C                     	;# 
   419  038E                     	;# 
   420  0391                     	;# 
   421  0392                     	;# 
   422  0393                     	;# 
   423  0397                     	;# 
   424  0398                     	;# 
   425  0399                     	;# 
   426  0691                     	;# 
   427  0692                     	;# 
   428  0693                     	;# 
   429  0694                     	;# 
   430  0695                     	;# 
   431  0D8E                     	;# 
   432  0D8F                     	;# 
   433  0D90                     	;# 
   434  0D91                     	;# 
   435  0D91                     	;# 
   436  0D92                     	;# 
   437  0D93                     	;# 
   438  0D93                     	;# 
   439  0D94                     	;# 
   440  0D95                     	;# 
   441  0D95                     	;# 
   442  0D96                     	;# 
   443  0D97                     	;# 
   444  0D97                     	;# 
   445  0D98                     	;# 
   446  0D99                     	;# 
   447  0D99                     	;# 
   448  0D9A                     	;# 
   449  0D9B                     	;# 
   450  0D9C                     	;# 
   451  0D9C                     	;# 
   452  0D9D                     	;# 
   453  0D9D                     	;# 
   454  0D9E                     	;# 
   455  0D9F                     	;# 
   456  0DA0                     	;# 
   457  0DA1                     	;# 
   458  0DA1                     	;# 
   459  0DA2                     	;# 
   460  0DA3                     	;# 
   461  0DA3                     	;# 
   462  0DA4                     	;# 
   463  0DA5                     	;# 
   464  0DA5                     	;# 
   465  0DA6                     	;# 
   466  0DA7                     	;# 
   467  0DA7                     	;# 
   468  0DA8                     	;# 
   469  0DA9                     	;# 
   470  0DA9                     	;# 
   471  0DAA                     	;# 
   472  0DAB                     	;# 
   473  0DAC                     	;# 
   474  0DAC                     	;# 
   475  0DAD                     	;# 
   476  0DAD                     	;# 
   477  0DAE                     	;# 
   478  0DAF                     	;# 
   479  0DB0                     	;# 
   480  0DB1                     	;# 
   481  0DB1                     	;# 
   482  0DB2                     	;# 
   483  0DB3                     	;# 
   484  0DB3                     	;# 
   485  0DB4                     	;# 
   486  0DB5                     	;# 
   487  0DB5                     	;# 
   488  0DB6                     	;# 
   489  0DB7                     	;# 
   490  0DB7                     	;# 
   491  0DB8                     	;# 
   492  0DB9                     	;# 
   493  0DB9                     	;# 
   494  0DBA                     	;# 
   495  0DBB                     	;# 
   496  0DBC                     	;# 
   497  0DBC                     	;# 
   498  0DBD                     	;# 
   499  0DBD                     	;# 
   500  0DBE                     	;# 
   501  0DBF                     	;# 
   502  0DC0                     	;# 
   503  0DC1                     	;# 
   504  0DC1                     	;# 
   505  0DC2                     	;# 
   506  0DC3                     	;# 
   507  0DC3                     	;# 
   508  0DC4                     	;# 
   509  0DC5                     	;# 
   510  0DC5                     	;# 
   511  0DC6                     	;# 
   512  0DC7                     	;# 
   513  0DC7                     	;# 
   514  0DC8                     	;# 
   515  0DC9                     	;# 
   516  0DC9                     	;# 
   517  0DCA                     	;# 
   518  0DCB                     	;# 
   519  0DCC                     	;# 
   520  0DCC                     	;# 
   521  0DCD                     	;# 
   522  0DCD                     	;# 
   523  0DCE                     	;# 
   524  0DCF                     	;# 
   525  0DD0                     	;# 
   526  0E0F                     	;# 
   527  0E10                     	;# 
   528  0E11                     	;# 
   529  0E12                     	;# 
   530  0E13                     	;# 
   531  0E14                     	;# 
   532  0E15                     	;# 
   533  0E16                     	;# 
   534  0E17                     	;# 
   535  0E90                     	;# 
   536  0E91                     	;# 
   537  0E92                     	;# 
   538  0E94                     	;# 
   539  0E95                     	;# 
   540  0EA0                     	;# 
   541  0EA1                     	;# 
   542  0EA2                     	;# 
   543  0EA3                     	;# 
   544  0EA4                     	;# 
   545  0EA5                     	;# 
   546  0FE4                     	;# 
   547  0FE5                     	;# 
   548  0FE6                     	;# 
   549  0FE7                     	;# 
   550  0FE8                     	;# 
   551  0FE8                     	;# 
   552  0FE9                     	;# 
   553  0FEA                     	;# 
   554  0FEA                     	;# 
   555  0FEB                     	;# 
   556  0FED                     	;# 
   557  0FEE                     	;# 
   558  0FEE                     	;# 
   559  0FEF                     	;# 
   560  0000                     	;# 
   561  0001                     	;# 
   562  0002                     	;# 
   563  0003                     	;# 
   564  0004                     	;# 
   565  0005                     	;# 
   566  0006                     	;# 
   567  0007                     	;# 
   568  0008                     	;# 
   569  0009                     	;# 
   570  000A                     	;# 
   571  000B                     	;# 
   572  000C                     	;# 
   573  000E                     	;# 
   574  0011                     	;# 
   575  0012                     	;# 
   576  0013                     	;# 
   577  0015                     	;# 
   578  0016                     	;# 
   579  0016                     	;# 
   580  0017                     	;# 
   581  0018                     	;# 
   582  0019                     	;# 
   583  001A                     	;# 
   584  001B                     	;# 
   585  001C                     	;# 
   586  008C                     	;# 
   587  008E                     	;# 
   588  0091                     	;# 
   589  0092                     	;# 
   590  0093                     	;# 
   591  0095                     	;# 
   592  0096                     	;# 
   593  0097                     	;# 
   594  0098                     	;# 
   595  0099                     	;# 
   596  009A                     	;# 
   597  009B                     	;# 
   598  009B                     	;# 
   599  009C                     	;# 
   600  009D                     	;# 
   601  009E                     	;# 
   602  009F                     	;# 
   603  010C                     	;# 
   604  010E                     	;# 
   605  0111                     	;# 
   606  0112                     	;# 
   607  0113                     	;# 
   608  0114                     	;# 
   609  0115                     	;# 
   610  0116                     	;# 
   611  0117                     	;# 
   612  0118                     	;# 
   613  0119                     	;# 
   614  018C                     	;# 
   615  018E                     	;# 
   616  0191                     	;# 
   617  0191                     	;# 
   618  0192                     	;# 
   619  0193                     	;# 
   620  0193                     	;# 
   621  0194                     	;# 
   622  0195                     	;# 
   623  0196                     	;# 
   624  0197                     	;# 
   625  0199                     	;# 
   626  019A                     	;# 
   627  019B                     	;# 
   628  019B                     	;# 
   629  019C                     	;# 
   630  019D                     	;# 
   631  019E                     	;# 
   632  019F                     	;# 
   633  020C                     	;# 
   634  020E                     	;# 
   635  028C                     	;# 
   636  028E                     	;# 
   637  030C                     	;# 
   638  030E                     	;# 
   639  038C                     	;# 
   640  038E                     	;# 
   641  0391                     	;# 
   642  0392                     	;# 
   643  0393                     	;# 
   644  0397                     	;# 
   645  0398                     	;# 
   646  0399                     	;# 
   647  0691                     	;# 
   648  0692                     	;# 
   649  0693                     	;# 
   650  0694                     	;# 
   651  0695                     	;# 
   652  0D8E                     	;# 
   653  0D8F                     	;# 
   654  0D90                     	;# 
   655  0D91                     	;# 
   656  0D91                     	;# 
   657  0D92                     	;# 
   658  0D93                     	;# 
   659  0D93                     	;# 
   660  0D94                     	;# 
   661  0D95                     	;# 
   662  0D95                     	;# 
   663  0D96                     	;# 
   664  0D97                     	;# 
   665  0D97                     	;# 
   666  0D98                     	;# 
   667  0D99                     	;# 
   668  0D99                     	;# 
   669  0D9A                     	;# 
   670  0D9B                     	;# 
   671  0D9C                     	;# 
   672  0D9C                     	;# 
   673  0D9D                     	;# 
   674  0D9D                     	;# 
   675  0D9E                     	;# 
   676  0D9F                     	;# 
   677  0DA0                     	;# 
   678  0DA1                     	;# 
   679  0DA1                     	;# 
   680  0DA2                     	;# 
   681  0DA3                     	;# 
   682  0DA3                     	;# 
   683  0DA4                     	;# 
   684  0DA5                     	;# 
   685  0DA5                     	;# 
   686  0DA6                     	;# 
   687  0DA7                     	;# 
   688  0DA7                     	;# 
   689  0DA8                     	;# 
   690  0DA9                     	;# 
   691  0DA9                     	;# 
   692  0DAA                     	;# 
   693  0DAB                     	;# 
   694  0DAC                     	;# 
   695  0DAC                     	;# 
   696  0DAD                     	;# 
   697  0DAD                     	;# 
   698  0DAE                     	;# 
   699  0DAF                     	;# 
   700  0DB0                     	;# 
   701  0DB1                     	;# 
   702  0DB1                     	;# 
   703  0DB2                     	;# 
   704  0DB3                     	;# 
   705  0DB3                     	;# 
   706  0DB4                     	;# 
   707  0DB5                     	;# 
   708  0DB5                     	;# 
   709  0DB6                     	;# 
   710  0DB7                     	;# 
   711  0DB7                     	;# 
   712  0DB8                     	;# 
   713  0DB9                     	;# 
   714  0DB9                     	;# 
   715  0DBA                     	;# 
   716  0DBB                     	;# 
   717  0DBC                     	;# 
   718  0DBC                     	;# 
   719  0DBD                     	;# 
   720  0DBD                     	;# 
   721  0DBE                     	;# 
   722  0DBF                     	;# 
   723  0DC0                     	;# 
   724  0DC1                     	;# 
   725  0DC1                     	;# 
   726  0DC2                     	;# 
   727  0DC3                     	;# 
   728  0DC3                     	;# 
   729  0DC4                     	;# 
   730  0DC5                     	;# 
   731  0DC5                     	;# 
   732  0DC6                     	;# 
   733  0DC7                     	;# 
   734  0DC7                     	;# 
   735  0DC8                     	;# 
   736  0DC9                     	;# 
   737  0DC9                     	;# 
   738  0DCA                     	;# 
   739  0DCB                     	;# 
   740  0DCC                     	;# 
   741  0DCC                     	;# 
   742  0DCD                     	;# 
   743  0DCD                     	;# 
   744  0DCE                     	;# 
   745  0DCF                     	;# 
   746  0DD0                     	;# 
   747  0E0F                     	;# 
   748  0E10                     	;# 
   749  0E11                     	;# 
   750  0E12                     	;# 
   751  0E13                     	;# 
   752  0E14                     	;# 
   753  0E15                     	;# 
   754  0E16                     	;# 
   755  0E17                     	;# 
   756  0E90                     	;# 
   757  0E91                     	;# 
   758  0E92                     	;# 
   759  0E94                     	;# 
   760  0E95                     	;# 
   761  0EA0                     	;# 
   762  0EA1                     	;# 
   763  0EA2                     	;# 
   764  0EA3                     	;# 
   765  0EA4                     	;# 
   766  0EA5                     	;# 
   767  0FE4                     	;# 
   768  0FE5                     	;# 
   769  0FE6                     	;# 
   770  0FE7                     	;# 
   771  0FE8                     	;# 
   772  0FE8                     	;# 
   773  0FE9                     	;# 
   774  0FEA                     	;# 
   775  0FEA                     	;# 
   776  0FEB                     	;# 
   777  0FED                     	;# 
   778  0FEE                     	;# 
   779  0FEE                     	;# 
   780  0FEF                     	;# 
   781  0000                     	;# 
   782  0001                     	;# 
   783  0002                     	;# 
   784  0003                     	;# 
   785  0004                     	;# 
   786  0005                     	;# 
   787  0006                     	;# 
   788  0007                     	;# 
   789  0008                     	;# 
   790  0009                     	;# 
   791  000A                     	;# 
   792  000B                     	;# 
   793  000C                     	;# 
   794  000E                     	;# 
   795  0011                     	;# 
   796  0012                     	;# 
   797  0013                     	;# 
   798  0015                     	;# 
   799  0016                     	;# 
   800  0016                     	;# 
   801  0017                     	;# 
   802  0018                     	;# 
   803  0019                     	;# 
   804  001A                     	;# 
   805  001B                     	;# 
   806  001C                     	;# 
   807  008C                     	;# 
   808  008E                     	;# 
   809  0091                     	;# 
   810  0092                     	;# 
   811  0093                     	;# 
   812  0095                     	;# 
   813  0096                     	;# 
   814  0097                     	;# 
   815  0098                     	;# 
   816  0099                     	;# 
   817  009A                     	;# 
   818  009B                     	;# 
   819  009B                     	;# 
   820  009C                     	;# 
   821  009D                     	;# 
   822  009E                     	;# 
   823  009F                     	;# 
   824  010C                     	;# 
   825  010E                     	;# 
   826  0111                     	;# 
   827  0112                     	;# 
   828  0113                     	;# 
   829  0114                     	;# 
   830  0115                     	;# 
   831  0116                     	;# 
   832  0117                     	;# 
   833  0118                     	;# 
   834  0119                     	;# 
   835  018C                     	;# 
   836  018E                     	;# 
   837  0191                     	;# 
   838  0191                     	;# 
   839  0192                     	;# 
   840  0193                     	;# 
   841  0193                     	;# 
   842  0194                     	;# 
   843  0195                     	;# 
   844  0196                     	;# 
   845  0197                     	;# 
   846  0199                     	;# 
   847  019A                     	;# 
   848  019B                     	;# 
   849  019B                     	;# 
   850  019C                     	;# 
   851  019D                     	;# 
   852  019E                     	;# 
   853  019F                     	;# 
   854  020C                     	;# 
   855  020E                     	;# 
   856  028C                     	;# 
   857  028E                     	;# 
   858  030C                     	;# 
   859  030E                     	;# 
   860  038C                     	;# 
   861  038E                     	;# 
   862  0391                     	;# 
   863  0392                     	;# 
   864  0393                     	;# 
   865  0397                     	;# 
   866  0398                     	;# 
   867  0399                     	;# 
   868  0691                     	;# 
   869  0692                     	;# 
   870  0693                     	;# 
   871  0694                     	;# 
   872  0695                     	;# 
   873  0D8E                     	;# 
   874  0D8F                     	;# 
   875  0D90                     	;# 
   876  0D91                     	;# 
   877  0D91                     	;# 
   878  0D92                     	;# 
   879  0D93                     	;# 
   880  0D93                     	;# 
   881  0D94                     	;# 
   882  0D95                     	;# 
   883  0D95                     	;# 
   884  0D96                     	;# 
   885  0D97                     	;# 
   886  0D97                     	;# 
   887  0D98                     	;# 
   888  0D99                     	;# 
   889  0D99                     	;# 
   890  0D9A                     	;# 
   891  0D9B                     	;# 
   892  0D9C                     	;# 
   893  0D9C                     	;# 
   894  0D9D                     	;# 
   895  0D9D                     	;# 
   896  0D9E                     	;# 
   897  0D9F                     	;# 
   898  0DA0                     	;# 
   899  0DA1                     	;# 
   900  0DA1                     	;# 
   901  0DA2                     	;# 
   902  0DA3                     	;# 
   903  0DA3                     	;# 
   904  0DA4                     	;# 
   905  0DA5                     	;# 
   906  0DA5                     	;# 
   907  0DA6                     	;# 
   908  0DA7                     	;# 
   909  0DA7                     	;# 
   910  0DA8                     	;# 
   911  0DA9                     	;# 
   912  0DA9                     	;# 
   913  0DAA                     	;# 
   914  0DAB                     	;# 
   915  0DAC                     	;# 
   916  0DAC                     	;# 
   917  0DAD                     	;# 
   918  0DAD                     	;# 
   919  0DAE                     	;# 
   920  0DAF                     	;# 
   921  0DB0                     	;# 
   922  0DB1                     	;# 
   923  0DB1                     	;# 
   924  0DB2                     	;# 
   925  0DB3                     	;# 
   926  0DB3                     	;# 
   927  0DB4                     	;# 
   928  0DB5                     	;# 
   929  0DB5                     	;# 
   930  0DB6                     	;# 
   931  0DB7                     	;# 
   932  0DB7                     	;# 
   933  0DB8                     	;# 
   934  0DB9                     	;# 
   935  0DB9                     	;# 
   936  0DBA                     	;# 
   937  0DBB                     	;# 
   938  0DBC                     	;# 
   939  0DBC                     	;# 
   940  0DBD                     	;# 
   941  0DBD                     	;# 
   942  0DBE                     	;# 
   943  0DBF                     	;# 
   944  0DC0                     	;# 
   945  0DC1                     	;# 
   946  0DC1                     	;# 
   947  0DC2                     	;# 
   948  0DC3                     	;# 
   949  0DC3                     	;# 
   950  0DC4                     	;# 
   951  0DC5                     	;# 
   952  0DC5                     	;# 
   953  0DC6                     	;# 
   954  0DC7                     	;# 
   955  0DC7                     	;# 
   956  0DC8                     	;# 
   957  0DC9                     	;# 
   958  0DC9                     	;# 
   959  0DCA                     	;# 
   960  0DCB                     	;# 
   961  0DCC                     	;# 
   962  0DCC                     	;# 
   963  0DCD                     	;# 
   964  0DCD                     	;# 
   965  0DCE                     	;# 
   966  0DCF                     	;# 
   967  0DD0                     	;# 
   968  0E0F                     	;# 
   969  0E10                     	;# 
   970  0E11                     	;# 
   971  0E12                     	;# 
   972  0E13                     	;# 
   973  0E14                     	;# 
   974  0E15                     	;# 
   975  0E16                     	;# 
   976  0E17                     	;# 
   977  0E90                     	;# 
   978  0E91                     	;# 
   979  0E92                     	;# 
   980  0E94                     	;# 
   981  0E95                     	;# 
   982  0EA0                     	;# 
   983  0EA1                     	;# 
   984  0EA2                     	;# 
   985  0EA3                     	;# 
   986  0EA4                     	;# 
   987  0EA5                     	;# 
   988  0FE4                     	;# 
   989  0FE5                     	;# 
   990  0FE6                     	;# 
   991  0FE7                     	;# 
   992  0FE8                     	;# 
   993  0FE8                     	;# 
   994  0FE9                     	;# 
   995  0FEA                     	;# 
   996  0FEA                     	;# 
   997  0FEB                     	;# 
   998  0FED                     	;# 
   999  0FEE                     	;# 
  1000  0FEE                     	;# 
  1001  0FEF                     	;# 
  1002  0000                     	;# 
  1003  0001                     	;# 
  1004  0002                     	;# 
  1005  0003                     	;# 
  1006  0004                     	;# 
  1007  0005                     	;# 
  1008  0006                     	;# 
  1009  0007                     	;# 
  1010  0008                     	;# 
  1011  0009                     	;# 
  1012  000A                     	;# 
  1013  000B                     	;# 
  1014  000C                     	;# 
  1015  000E                     	;# 
  1016  0011                     	;# 
  1017  0012                     	;# 
  1018  0013                     	;# 
  1019  0015                     	;# 
  1020  0016                     	;# 
  1021  0016                     	;# 
  1022  0017                     	;# 
  1023  0018                     	;# 
  1024  0019                     	;# 
  1025  001A                     	;# 
  1026  001B                     	;# 
  1027  001C                     	;# 
  1028  008C                     	;# 
  1029  008E                     	;# 
  1030  0091                     	;# 
  1031  0092                     	;# 
  1032  0093                     	;# 
  1033  0095                     	;# 
  1034  0096                     	;# 
  1035  0097                     	;# 
  1036  0098                     	;# 
  1037  0099                     	;# 
  1038  009A                     	;# 
  1039  009B                     	;# 
  1040  009B                     	;# 
  1041  009C                     	;# 
  1042  009D                     	;# 
  1043  009E                     	;# 
  1044  009F                     	;# 
  1045  010C                     	;# 
  1046  010E                     	;# 
  1047  0111                     	;# 
  1048  0112                     	;# 
  1049  0113                     	;# 
  1050  0114                     	;# 
  1051  0115                     	;# 
  1052  0116                     	;# 
  1053  0117                     	;# 
  1054  0118                     	;# 
  1055  0119                     	;# 
  1056  018C                     	;# 
  1057  018E                     	;# 
  1058  0191                     	;# 
  1059  0191                     	;# 
  1060  0192                     	;# 
  1061  0193                     	;# 
  1062  0193                     	;# 
  1063  0194                     	;# 
  1064  0195                     	;# 
  1065  0196                     	;# 
  1066  0197                     	;# 
  1067  0199                     	;# 
  1068  019A                     	;# 
  1069  019B                     	;# 
  1070  019B                     	;# 
  1071  019C                     	;# 
  1072  019D                     	;# 
  1073  019E                     	;# 
  1074  019F                     	;# 
  1075  020C                     	;# 
  1076  020E                     	;# 
  1077  028C                     	;# 
  1078  028E                     	;# 
  1079  030C                     	;# 
  1080  030E                     	;# 
  1081  038C                     	;# 
  1082  038E                     	;# 
  1083  0391                     	;# 
  1084  0392                     	;# 
  1085  0393                     	;# 
  1086  0397                     	;# 
  1087  0398                     	;# 
  1088  0399                     	;# 
  1089  0691                     	;# 
  1090  0692                     	;# 
  1091  0693                     	;# 
  1092  0694                     	;# 
  1093  0695                     	;# 
  1094  0D8E                     	;# 
  1095  0D8F                     	;# 
  1096  0D90                     	;# 
  1097  0D91                     	;# 
  1098  0D91                     	;# 
  1099  0D92                     	;# 
  1100  0D93                     	;# 
  1101  0D93                     	;# 
  1102  0D94                     	;# 
  1103  0D95                     	;# 
  1104  0D95                     	;# 
  1105  0D96                     	;# 
  1106  0D97                     	;# 
  1107  0D97                     	;# 
  1108  0D98                     	;# 
  1109  0D99                     	;# 
  1110  0D99                     	;# 
  1111  0D9A                     	;# 
  1112  0D9B                     	;# 
  1113  0D9C                     	;# 
  1114  0D9C                     	;# 
  1115  0D9D                     	;# 
  1116  0D9D                     	;# 
  1117  0D9E                     	;# 
  1118  0D9F                     	;# 
  1119  0DA0                     	;# 
  1120  0DA1                     	;# 
  1121  0DA1                     	;# 
  1122  0DA2                     	;# 
  1123  0DA3                     	;# 
  1124  0DA3                     	;# 
  1125  0DA4                     	;# 
  1126  0DA5                     	;# 
  1127  0DA5                     	;# 
  1128  0DA6                     	;# 
  1129  0DA7                     	;# 
  1130  0DA7                     	;# 
  1131  0DA8                     	;# 
  1132  0DA9                     	;# 
  1133  0DA9                     	;# 
  1134  0DAA                     	;# 
  1135  0DAB                     	;# 
  1136  0DAC                     	;# 
  1137  0DAC                     	;# 
  1138  0DAD                     	;# 
  1139  0DAD                     	;# 
  1140  0DAE                     	;# 
  1141  0DAF                     	;# 
  1142  0DB0                     	;# 
  1143  0DB1                     	;# 
  1144  0DB1                     	;# 
  1145  0DB2                     	;# 
  1146  0DB3                     	;# 
  1147  0DB3                     	;# 
  1148  0DB4                     	;# 
  1149  0DB5                     	;# 
  1150  0DB5                     	;# 
  1151  0DB6                     	;# 
  1152  0DB7                     	;# 
  1153  0DB7                     	;# 
  1154  0DB8                     	;# 
  1155  0DB9                     	;# 
  1156  0DB9                     	;# 
  1157  0DBA                     	;# 
  1158  0DBB                     	;# 
  1159  0DBC                     	;# 
  1160  0DBC                     	;# 
  1161  0DBD                     	;# 
  1162  0DBD                     	;# 
  1163  0DBE                     	;# 
  1164  0DBF                     	;# 
  1165  0DC0                     	;# 
  1166  0DC1                     	;# 
  1167  0DC1                     	;# 
  1168  0DC2                     	;# 
  1169  0DC3                     	;# 
  1170  0DC3                     	;# 
  1171  0DC4                     	;# 
  1172  0DC5                     	;# 
  1173  0DC5                     	;# 
  1174  0DC6                     	;# 
  1175  0DC7                     	;# 
  1176  0DC7                     	;# 
  1177  0DC8                     	;# 
  1178  0DC9                     	;# 
  1179  0DC9                     	;# 
  1180  0DCA                     	;# 
  1181  0DCB                     	;# 
  1182  0DCC                     	;# 
  1183  0DCC                     	;# 
  1184  0DCD                     	;# 
  1185  0DCD                     	;# 
  1186  0DCE                     	;# 
  1187  0DCF                     	;# 
  1188  0DD0                     	;# 
  1189  0E0F                     	;# 
  1190  0E10                     	;# 
  1191  0E11                     	;# 
  1192  0E12                     	;# 
  1193  0E13                     	;# 
  1194  0E14                     	;# 
  1195  0E15                     	;# 
  1196  0E16                     	;# 
  1197  0E17                     	;# 
  1198  0E90                     	;# 
  1199  0E91                     	;# 
  1200  0E92                     	;# 
  1201  0E94                     	;# 
  1202  0E95                     	;# 
  1203  0EA0                     	;# 
  1204  0EA1                     	;# 
  1205  0EA2                     	;# 
  1206  0EA3                     	;# 
  1207  0EA4                     	;# 
  1208  0EA5                     	;# 
  1209  0FE4                     	;# 
  1210  0FE5                     	;# 
  1211  0FE6                     	;# 
  1212  0FE7                     	;# 
  1213  0FE8                     	;# 
  1214  0FE8                     	;# 
  1215  0FE9                     	;# 
  1216  0FEA                     	;# 
  1217  0FEA                     	;# 
  1218  0FEB                     	;# 
  1219  0FED                     	;# 
  1220  0FEE                     	;# 
  1221  0FEE                     	;# 
  1222  0FEF                     	;# 
  1223  0FFF                     	;# 
  1224  0000                     	;# 
  1225  0001                     	;# 
  1226  0002                     	;# 
  1227  0003                     	;# 
  1228  0004                     	;# 
  1229  0005                     	;# 
  1230  0006                     	;# 
  1231  0007                     	;# 
  1232  0008                     	;# 
  1233  0009                     	;# 
  1234  000A                     	;# 
  1235  000B                     	;# 
  1236  000C                     	;# 
  1237  000E                     	;# 
  1238  0011                     	;# 
  1239  0012                     	;# 
  1240  0013                     	;# 
  1241  0015                     	;# 
  1242  0016                     	;# 
  1243  0016                     	;# 
  1244  0017                     	;# 
  1245  0018                     	;# 
  1246  0019                     	;# 
  1247  001A                     	;# 
  1248  001B                     	;# 
  1249  001C                     	;# 
  1250  008C                     	;# 
  1251  008E                     	;# 
  1252  0091                     	;# 
  1253  0092                     	;# 
  1254  0093                     	;# 
  1255  0095                     	;# 
  1256  0096                     	;# 
  1257  0097                     	;# 
  1258  0098                     	;# 
  1259  0099                     	;# 
  1260  009A                     	;# 
  1261  009B                     	;# 
  1262  009B                     	;# 
  1263  009C                     	;# 
  1264  009D                     	;# 
  1265  009E                     	;# 
  1266  009F                     	;# 
  1267  010C                     	;# 
  1268  010E                     	;# 
  1269  0111                     	;# 
  1270  0112                     	;# 
  1271  0113                     	;# 
  1272  0114                     	;# 
  1273  0115                     	;# 
  1274  0116                     	;# 
  1275  0117                     	;# 
  1276  0118                     	;# 
  1277  0119                     	;# 
  1278  018C                     	;# 
  1279  018E                     	;# 
  1280  0191                     	;# 
  1281  0191                     	;# 
  1282  0192                     	;# 
  1283  0193                     	;# 
  1284  0193                     	;# 
  1285  0194                     	;# 
  1286  0195                     	;# 
  1287  0196                     	;# 
  1288  0197                     	;# 
  1289  0199                     	;# 
  1290  019A                     	;# 
  1291  019B                     	;# 
  1292  019B                     	;# 
  1293  019C                     	;# 
  1294  019D                     	;# 
  1295  019E                     	;# 
  1296  019F                     	;# 
  1297  020C                     	;# 
  1298  020E                     	;# 
  1299  028C                     	;# 
  1300  028E                     	;# 
  1301  030C                     	;# 
  1302  030E                     	;# 
  1303  038C                     	;# 
  1304  038E                     	;# 
  1305  0391                     	;# 
  1306  0392                     	;# 
  1307  0393                     	;# 
  1308  0397                     	;# 
  1309  0398                     	;# 
  1310  0399                     	;# 
  1311  0691                     	;# 
  1312  0692                     	;# 
  1313  0693                     	;# 
  1314  0694                     	;# 
  1315  0695                     	;# 
  1316  0D8E                     	;# 
  1317  0D8F                     	;# 
  1318  0D90                     	;# 
  1319  0D91                     	;# 
  1320  0D91                     	;# 
  1321  0D92                     	;# 
  1322  0D93                     	;# 
  1323  0D93                     	;# 
  1324  0D94                     	;# 
  1325  0D95                     	;# 
  1326  0D95                     	;# 
  1327  0D96                     	;# 
  1328  0D97                     	;# 
  1329  0D97                     	;# 
  1330  0D98                     	;# 
  1331  0D99                     	;# 
  1332  0D99                     	;# 
  1333  0D9A                     	;# 
  1334  0D9B                     	;# 
  1335  0D9C                     	;# 
  1336  0D9C                     	;# 
  1337  0D9D                     	;# 
  1338  0D9D                     	;# 
  1339  0D9E                     	;# 
  1340  0D9F                     	;# 
  1341  0DA0                     	;# 
  1342  0DA1                     	;# 
  1343  0DA1                     	;# 
  1344  0DA2                     	;# 
  1345  0DA3                     	;# 
  1346  0DA3                     	;# 
  1347  0DA4                     	;# 
  1348  0DA5                     	;# 
  1349  0DA5                     	;# 
  1350  0DA6                     	;# 
  1351  0DA7                     	;# 
  1352  0DA7                     	;# 
  1353  0DA8                     	;# 
  1354  0DA9                     	;# 
  1355  0DA9                     	;# 
  1356  0DAA                     	;# 
  1357  0DAB                     	;# 
  1358  0DAC                     	;# 
  1359  0DAC                     	;# 
  1360  0DAD                     	;# 
  1361  0DAD                     	;# 
  1362  0DAE                     	;# 
  1363  0DAF                     	;# 
  1364  0DB0                     	;# 
  1365  0DB1                     	;# 
  1366  0DB1                     	;# 
  1367  0DB2                     	;# 
  1368  0DB3                     	;# 
  1369  0DB3                     	;# 
  1370  0DB4                     	;# 
  1371  0DB5                     	;# 
  1372  0DB5                     	;# 
  1373  0DB6                     	;# 
  1374  0DB7                     	;# 
  1375  0DB7                     	;# 
  1376  0DB8                     	;# 
  1377  0DB9                     	;# 
  1378  0DB9                     	;# 
  1379  0DBA                     	;# 
  1380  0DBB                     	;# 
  1381  0DBC                     	;# 
  1382  0DBC                     	;# 
  1383  0DBD                     	;# 
  1384  0DBD                     	;# 
  1385  0DBE                     	;# 
  1386  0DBF                     	;# 
  1387  0DC0                     	;# 
  1388  0DC1                     	;# 
  1389  0DC1                     	;# 
  1390  0DC2                     	;# 
  1391  0DC3                     	;# 
  1392  0DC3                     	;# 
  1393  0DC4                     	;# 
  1394  0DC5                     	;# 
  1395  0DC5                     	;# 
  1396  0DC6                     	;# 
  1397  0DC7                     	;# 
  1398  0DC7                     	;# 
  1399  0DC8                     	;# 
  1400  0DC9                     	;# 
  1401  0DC9                     	;# 
  1402  0DCA                     	;# 
  1403  0DCB                     	;# 
  1404  0DCC                     	;# 
  1405  0DCC                     	;# 
  1406  0DCD                     	;# 
  1407  0DCD                     	;# 
  1408  0DCE                     	;# 
  1409  0DCF                     	;# 
  1410  0DD0                     	;# 
  1411  0E0F                     	;# 
  1412  0E10                     	;# 
  1413  0E11                     	;# 
  1414  0E12                     	;# 
  1415  0E13                     	;# 
  1416  0E14                     	;# 
  1417  0E15                     	;# 
  1418  0E16                     	;# 
  1419  0E17                     	;# 
  1420  0E90                     	;# 
  1421  0E91                     	;# 
  1422  0E92                     	;# 
  1423  0E94                     	;# 
  1424  0E95                     	;# 
  1425  0EA0                     	;# 
  1426  0EA1                     	;# 
  1427  0EA2                     	;# 
  1428  0EA3                     	;# 
  1429  0EA4                     	;# 
  1430  0EA5                     	;# 
  1431  0FE4                     	;# 
  1432  0FE5                     	;# 
  1433  0FE6                     	;# 
  1434  0FE7                     	;# 
  1435  0FE8                     	;# 
  1436  0FE8                     	;# 
  1437  0FE9                     	;# 
  1438  0FEA                     	;# 
  1439  0FEA                     	;# 
  1440  0FEB                     	;# 
  1441  0FED                     	;# 
  1442  0FEE                     	;# 
  1443  0FEE                     	;# 
  1444  0FEF                     	;# 
  1445  0000                     	;# 
  1446  0001                     	;# 
  1447  0002                     	;# 
  1448  0003                     	;# 
  1449  0004                     	;# 
  1450  0005                     	;# 
  1451  0006                     	;# 
  1452  0007                     	;# 
  1453  0008                     	;# 
  1454  0009                     	;# 
  1455  000A                     	;# 
  1456  000B                     	;# 
  1457  000C                     	;# 
  1458  000E                     	;# 
  1459  0011                     	;# 
  1460  0012                     	;# 
  1461  0013                     	;# 
  1462  0015                     	;# 
  1463  0016                     	;# 
  1464  0016                     	;# 
  1465  0017                     	;# 
  1466  0018                     	;# 
  1467  0019                     	;# 
  1468  001A                     	;# 
  1469  001B                     	;# 
  1470  001C                     	;# 
  1471  008C                     	;# 
  1472  008E                     	;# 
  1473  0091                     	;# 
  1474  0092                     	;# 
  1475  0093                     	;# 
  1476  0095                     	;# 
  1477  0096                     	;# 
  1478  0097                     	;# 
  1479  0098                     	;# 
  1480  0099                     	;# 
  1481  009A                     	;# 
  1482  009B                     	;# 
  1483  009B                     	;# 
  1484  009C                     	;# 
  1485  009D                     	;# 
  1486  009E                     	;# 
  1487  009F                     	;# 
  1488  010C                     	;# 
  1489  010E                     	;# 
  1490  0111                     	;# 
  1491  0112                     	;# 
  1492  0113                     	;# 
  1493  0114                     	;# 
  1494  0115                     	;# 
  1495  0116                     	;# 
  1496  0117                     	;# 
  1497  0118                     	;# 
  1498  0119                     	;# 
  1499  018C                     	;# 
  1500  018E                     	;# 
  1501  0191                     	;# 
  1502  0191                     	;# 
  1503  0192                     	;# 
  1504  0193                     	;# 
  1505  0193                     	;# 
  1506  0194                     	;# 
  1507  0195                     	;# 
  1508  0196                     	;# 
  1509  0197                     	;# 
  1510  0199                     	;# 
  1511  019A                     	;# 
  1512  019B                     	;# 
  1513  019B                     	;# 
  1514  019C                     	;# 
  1515  019D                     	;# 
  1516  019E                     	;# 
  1517  019F                     	;# 
  1518  020C                     	;# 
  1519  020E                     	;# 
  1520  028C                     	;# 
  1521  028E                     	;# 
  1522  030C                     	;# 
  1523  030E                     	;# 
  1524  038C                     	;# 
  1525  038E                     	;# 
  1526  0391                     	;# 
  1527  0392                     	;# 
  1528  0393                     	;# 
  1529  0397                     	;# 
  1530  0398                     	;# 
  1531  0399                     	;# 
  1532  0691                     	;# 
  1533  0692                     	;# 
  1534  0693                     	;# 
  1535  0694                     	;# 
  1536  0695                     	;# 
  1537  0D8E                     	;# 
  1538  0D8F                     	;# 
  1539  0D90                     	;# 
  1540  0D91                     	;# 
  1541  0D91                     	;# 
  1542  0D92                     	;# 
  1543  0D93                     	;# 
  1544  0D93                     	;# 
  1545  0D94                     	;# 
  1546  0D95                     	;# 
  1547  0D95                     	;# 
  1548  0D96                     	;# 
  1549  0D97                     	;# 
  1550  0D97                     	;# 
  1551  0D98                     	;# 
  1552  0D99                     	;# 
  1553  0D99                     	;# 
  1554  0D9A                     	;# 
  1555  0D9B                     	;# 
  1556  0D9C                     	;# 
  1557  0D9C                     	;# 
  1558  0D9D                     	;# 
  1559  0D9D                     	;# 
  1560  0D9E                     	;# 
  1561  0D9F                     	;# 
  1562  0DA0                     	;# 
  1563  0DA1                     	;# 
  1564  0DA1                     	;# 
  1565  0DA2                     	;# 
  1566  0DA3                     	;# 
  1567  0DA3                     	;# 
  1568  0DA4                     	;# 
  1569  0DA5                     	;# 
  1570  0DA5                     	;# 
  1571  0DA6                     	;# 
  1572  0DA7                     	;# 
  1573  0DA7                     	;# 
  1574  0DA8                     	;# 
  1575  0DA9                     	;# 
  1576  0DA9                     	;# 
  1577  0DAA                     	;# 
  1578  0DAB                     	;# 
  1579  0DAC                     	;# 
  1580  0DAC                     	;# 
  1581  0DAD                     	;# 
  1582  0DAD                     	;# 
  1583  0DAE                     	;# 
  1584  0DAF                     	;# 
  1585  0DB0                     	;# 
  1586  0DB1                     	;# 
  1587  0DB1                     	;# 
  1588  0DB2                     	;# 
  1589  0DB3                     	;# 
  1590  0DB3                     	;# 
  1591  0DB4                     	;# 
  1592  0DB5                     	;# 
  1593  0DB5                     	;# 
  1594  0DB6                     	;# 
  1595  0DB7                     	;# 
  1596  0DB7                     	;# 
  1597  0DB8                     	;# 
  1598  0DB9                     	;# 
  1599  0DB9                     	;# 
  1600  0DBA                     	;# 
  1601  0DBB                     	;# 
  1602  0DBC                     	;# 
  1603  0DBC                     	;# 
  1604  0DBD                     	;# 
  1605  0DBD                     	;# 
  1606  0DBE                     	;# 
  1607  0DBF                     	;# 
  1608  0DC0                     	;# 
  1609  0DC1                     	;# 
  1610  0DC1                     	;# 
  1611  0DC2                     	;# 
  1612  0DC3                     	;# 
  1613  0DC3                     	;# 
  1614  0DC4                     	;# 
  1615  0DC5                     	;# 
  1616  0DC5                     	;# 
  1617  0DC6                     	;# 
  1618  0DC7                     	;# 
  1619  0DC7                     	;# 
  1620  0DC8                     	;# 
  1621  0DC9                     	;# 
  1622  0DC9                     	;# 
  1623  0DCA                     	;# 
  1624  0DCB                     	;# 
  1625  0DCC                     	;# 
  1626  0DCC                     	;# 
  1627  0DCD                     	;# 
  1628  0DCD                     	;# 
  1629  0DCE                     	;# 
  1630  0DCF                     	;# 
  1631  0DD0                     	;# 
  1632  0E0F                     	;# 
  1633  0E10                     	;# 
  1634  0E11                     	;# 
  1635  0E12                     	;# 
  1636  0E13                     	;# 
  1637  0E14                     	;# 
  1638  0E15                     	;# 
  1639  0E16                     	;# 
  1640  0E17                     	;# 
  1641  0E90                     	;# 
  1642  0E91                     	;# 
  1643  0E92                     	;# 
  1644  0E94                     	;# 
  1645  0E95                     	;# 
  1646  0EA0                     	;# 
  1647  0EA1                     	;# 
  1648  0EA2                     	;# 
  1649  0EA3                     	;# 
  1650  0EA4                     	;# 
  1651  0EA5                     	;# 
  1652  0FE4                     	;# 
  1653  0FE5                     	;# 
  1654  0FE6                     	;# 
  1655  0FE7                     	;# 
  1656  0FE8                     	;# 
  1657  0FE8                     	;# 
  1658  0FE9                     	;# 
  1659  0FEA                     	;# 
  1660  0FEA                     	;# 
  1661  0FEB                     	;# 
  1662  0FED                     	;# 
  1663  0FEE                     	;# 
  1664  0FEE                     	;# 
  1665  0FEF                     	;# 
  1666  0000                     	;# 
  1667  0001                     	;# 
  1668  0002                     	;# 
  1669  0003                     	;# 
  1670  0004                     	;# 
  1671  0005                     	;# 
  1672  0006                     	;# 
  1673  0007                     	;# 
  1674  0008                     	;# 
  1675  0009                     	;# 
  1676  000A                     	;# 
  1677  000B                     	;# 
  1678  000C                     	;# 
  1679  000E                     	;# 
  1680  0011                     	;# 
  1681  0012                     	;# 
  1682  0013                     	;# 
  1683  0015                     	;# 
  1684  0016                     	;# 
  1685  0016                     	;# 
  1686  0017                     	;# 
  1687  0018                     	;# 
  1688  0019                     	;# 
  1689  001A                     	;# 
  1690  001B                     	;# 
  1691  001C                     	;# 
  1692  008C                     	;# 
  1693  008E                     	;# 
  1694  0091                     	;# 
  1695  0092                     	;# 
  1696  0093                     	;# 
  1697  0095                     	;# 
  1698  0096                     	;# 
  1699  0097                     	;# 
  1700  0098                     	;# 
  1701  0099                     	;# 
  1702  009A                     	;# 
  1703  009B                     	;# 
  1704  009B                     	;# 
  1705  009C                     	;# 
  1706  009D                     	;# 
  1707  009E                     	;# 
  1708  009F                     	;# 
  1709  010C                     	;# 
  1710  010E                     	;# 
  1711  0111                     	;# 
  1712  0112                     	;# 
  1713  0113                     	;# 
  1714  0114                     	;# 
  1715  0115                     	;# 
  1716  0116                     	;# 
  1717  0117                     	;# 
  1718  0118                     	;# 
  1719  0119                     	;# 
  1720  018C                     	;# 
  1721  018E                     	;# 
  1722  0191                     	;# 
  1723  0191                     	;# 
  1724  0192                     	;# 
  1725  0193                     	;# 
  1726  0193                     	;# 
  1727  0194                     	;# 
  1728  0195                     	;# 
  1729  0196                     	;# 
  1730  0197                     	;# 
  1731  0199                     	;# 
  1732  019A                     	;# 
  1733  019B                     	;# 
  1734  019B                     	;# 
  1735  019C                     	;# 
  1736  019D                     	;# 
  1737  019E                     	;# 
  1738  019F                     	;# 
  1739  020C                     	;# 
  1740  020E                     	;# 
  1741  028C                     	;# 
  1742  028E                     	;# 
  1743  030C                     	;# 
  1744  030E                     	;# 
  1745  038C                     	;# 
  1746  038E                     	;# 
  1747  0391                     	;# 
  1748  0392                     	;# 
  1749  0393                     	;# 
  1750  0397                     	;# 
  1751  0398                     	;# 
  1752  0399                     	;# 
  1753  0691                     	;# 
  1754  0692                     	;# 
  1755  0693                     	;# 
  1756  0694                     	;# 
  1757  0695                     	;# 
  1758  0D8E                     	;# 
  1759  0D8F                     	;# 
  1760  0D90                     	;# 
  1761  0D91                     	;# 
  1762  0D91                     	;# 
  1763  0D92                     	;# 
  1764  0D93                     	;# 
  1765  0D93                     	;# 
  1766  0D94                     	;# 
  1767  0D95                     	;# 
  1768  0D95                     	;# 
  1769  0D96                     	;# 
  1770  0D97                     	;# 
  1771  0D97                     	;# 
  1772  0D98                     	;# 
  1773  0D99                     	;# 
  1774  0D99                     	;# 
  1775  0D9A                     	;# 
  1776  0D9B                     	;# 
  1777  0D9C                     	;# 
  1778  0D9C                     	;# 
  1779  0D9D                     	;# 
  1780  0D9D                     	;# 
  1781  0D9E                     	;# 
  1782  0D9F                     	;# 
  1783  0DA0                     	;# 
  1784  0DA1                     	;# 
  1785  0DA1                     	;# 
  1786  0DA2                     	;# 
  1787  0DA3                     	;# 
  1788  0DA3                     	;# 
  1789  0DA4                     	;# 
  1790  0DA5                     	;# 
  1791  0DA5                     	;# 
  1792  0DA6                     	;# 
  1793  0DA7                     	;# 
  1794  0DA7                     	;# 
  1795  0DA8                     	;# 
  1796  0DA9                     	;# 
  1797  0DA9                     	;# 
  1798  0DAA                     	;# 
  1799  0DAB                     	;# 
  1800  0DAC                     	;# 
  1801  0DAC                     	;# 
  1802  0DAD                     	;# 
  1803  0DAD                     	;# 
  1804  0DAE                     	;# 
  1805  0DAF                     	;# 
  1806  0DB0                     	;# 
  1807  0DB1                     	;# 
  1808  0DB1                     	;# 
  1809  0DB2                     	;# 
  1810  0DB3                     	;# 
  1811  0DB3                     	;# 
  1812  0DB4                     	;# 
  1813  0DB5                     	;# 
  1814  0DB5                     	;# 
  1815  0DB6                     	;# 
  1816  0DB7                     	;# 
  1817  0DB7                     	;# 
  1818  0DB8                     	;# 
  1819  0DB9                     	;# 
  1820  0DB9                     	;# 
  1821  0DBA                     	;# 
  1822  0DBB                     	;# 
  1823  0DBC                     	;# 
  1824  0DBC                     	;# 
  1825  0DBD                     	;# 
  1826  0DBD                     	;# 
  1827  0DBE                     	;# 
  1828  0DBF                     	;# 
  1829  0DC0                     	;# 
  1830  0DC1                     	;# 
  1831  0DC1                     	;# 
  1832  0DC2                     	;# 
  1833  0DC3                     	;# 
  1834  0DC3                     	;# 
  1835  0DC4                     	;# 
  1836  0DC5                     	;# 
  1837  0DC5                     	;# 
  1838  0DC6                     	;# 
  1839  0DC7                     	;# 
  1840  0DC7                     	;# 
  1841  0DC8                     	;# 
  1842  0DC9                     	;# 
  1843  0DC9                     	;# 
  1844  0DCA                     	;# 
  1845  0DCB                     	;# 
  1846  0DCC                     	;# 
  1847  0DCC                     	;# 
  1848  0DCD                     	;# 
  1849  0DCD                     	;# 
  1850  0DCE                     	;# 
  1851  0DCF                     	;# 
  1852  0DD0                     	;# 
  1853  0E0F                     	;# 
  1854  0E10                     	;# 
  1855  0E11                     	;# 
  1856  0E12                     	;# 
  1857  0E13                     	;# 
  1858  0E14                     	;# 
  1859  0E15                     	;# 
  1860  0E16                     	;# 
  1861  0E17                     	;# 
  1862  0E90                     	;# 
  1863  0E91                     	;# 
  1864  0E92                     	;# 
  1865  0E94                     	;# 
  1866  0E95                     	;# 
  1867  0EA0                     	;# 
  1868  0EA1                     	;# 
  1869  0EA2                     	;# 
  1870  0EA3                     	;# 
  1871  0EA4                     	;# 
  1872  0EA5                     	;# 
  1873  0FE4                     	;# 
  1874  0FE5                     	;# 
  1875  0FE6                     	;# 
  1876  0FE7                     	;# 
  1877  0FE8                     	;# 
  1878  0FE8                     	;# 
  1879  0FE9                     	;# 
  1880  0FEA                     	;# 
  1881  0FEA                     	;# 
  1882  0FEB                     	;# 
  1883  0FED                     	;# 
  1884  0FEE                     	;# 
  1885  0FEE                     	;# 
  1886  0FEF                     	;# 
  1887  0000                     	;# 
  1888  0001                     	;# 
  1889  0002                     	;# 
  1890  0003                     	;# 
  1891  0004                     	;# 
  1892  0005                     	;# 
  1893  0006                     	;# 
  1894  0007                     	;# 
  1895  0008                     	;# 
  1896  0009                     	;# 
  1897  000A                     	;# 
  1898  000B                     	;# 
  1899  000C                     	;# 
  1900  000E                     	;# 
  1901  0011                     	;# 
  1902  0012                     	;# 
  1903  0013                     	;# 
  1904  0015                     	;# 
  1905  0016                     	;# 
  1906  0016                     	;# 
  1907  0017                     	;# 
  1908  0018                     	;# 
  1909  0019                     	;# 
  1910  001A                     	;# 
  1911  001B                     	;# 
  1912  001C                     	;# 
  1913  008C                     	;# 
  1914  008E                     	;# 
  1915  0091                     	;# 
  1916  0092                     	;# 
  1917  0093                     	;# 
  1918  0095                     	;# 
  1919  0096                     	;# 
  1920  0097                     	;# 
  1921  0098                     	;# 
  1922  0099                     	;# 
  1923  009A                     	;# 
  1924  009B                     	;# 
  1925  009B                     	;# 
  1926  009C                     	;# 
  1927  009D                     	;# 
  1928  009E                     	;# 
  1929  009F                     	;# 
  1930  010C                     	;# 
  1931  010E                     	;# 
  1932  0111                     	;# 
  1933  0112                     	;# 
  1934  0113                     	;# 
  1935  0114                     	;# 
  1936  0115                     	;# 
  1937  0116                     	;# 
  1938  0117                     	;# 
  1939  0118                     	;# 
  1940  0119                     	;# 
  1941  018C                     	;# 
  1942  018E                     	;# 
  1943  0191                     	;# 
  1944  0191                     	;# 
  1945  0192                     	;# 
  1946  0193                     	;# 
  1947  0193                     	;# 
  1948  0194                     	;# 
  1949  0195                     	;# 
  1950  0196                     	;# 
  1951  0197                     	;# 
  1952  0199                     	;# 
  1953  019A                     	;# 
  1954  019B                     	;# 
  1955  019B                     	;# 
  1956  019C                     	;# 
  1957  019D                     	;# 
  1958  019E                     	;# 
  1959  019F                     	;# 
  1960  020C                     	;# 
  1961  020E                     	;# 
  1962  028C                     	;# 
  1963  028E                     	;# 
  1964  030C                     	;# 
  1965  030E                     	;# 
  1966  038C                     	;# 
  1967  038E                     	;# 
  1968  0391                     	;# 
  1969  0392                     	;# 
  1970  0393                     	;# 
  1971  0397                     	;# 
  1972  0398                     	;# 
  1973  0399                     	;# 
  1974  0691                     	;# 
  1975  0692                     	;# 
  1976  0693                     	;# 
  1977  0694                     	;# 
  1978  0695                     	;# 
  1979  0D8E                     	;# 
  1980  0D8F                     	;# 
  1981  0D90                     	;# 
  1982  0D91                     	;# 
  1983  0D91                     	;# 
  1984  0D92                     	;# 
  1985  0D93                     	;# 
  1986  0D93                     	;# 
  1987  0D94                     	;# 
  1988  0D95                     	;# 
  1989  0D95                     	;# 
  1990  0D96                     	;# 
  1991  0D97                     	;# 
  1992  0D97                     	;# 
  1993  0D98                     	;# 
  1994  0D99                     	;# 
  1995  0D99                     	;# 
  1996  0D9A                     	;# 
  1997  0D9B                     	;# 
  1998  0D9C                     	;# 
  1999  0D9C                     	;# 
  2000  0D9D                     	;# 
  2001  0D9D                     	;# 
  2002  0D9E                     	;# 
  2003  0D9F                     	;# 
  2004  0DA0                     	;# 
  2005  0DA1                     	;# 
  2006  0DA1                     	;# 
  2007  0DA2                     	;# 
  2008  0DA3                     	;# 
  2009  0DA3                     	;# 
  2010  0DA4                     	;# 
  2011  0DA5                     	;# 
  2012  0DA5                     	;# 
  2013  0DA6                     	;# 
  2014  0DA7                     	;# 
  2015  0DA7                     	;# 
  2016  0DA8                     	;# 
  2017  0DA9                     	;# 
  2018  0DA9                     	;# 
  2019  0DAA                     	;# 
  2020  0DAB                     	;# 
  2021  0DAC                     	;# 
  2022  0DAC                     	;# 
  2023  0DAD                     	;# 
  2024  0DAD                     	;# 
  2025  0DAE                     	;# 
  2026  0DAF                     	;# 
  2027  0DB0                     	;# 
  2028  0DB1                     	;# 
  2029  0DB1                     	;# 
  2030  0DB2                     	;# 
  2031  0DB3                     	;# 
  2032  0DB3                     	;# 
  2033  0DB4                     	;# 
  2034  0DB5                     	;# 
  2035  0DB5                     	;# 
  2036  0DB6                     	;# 
  2037  0DB7                     	;# 
  2038  0DB7                     	;# 
  2039  0DB8                     	;# 
  2040  0DB9                     	;# 
  2041  0DB9                     	;# 
  2042  0DBA                     	;# 
  2043  0DBB                     	;# 
  2044  0DBC                     	;# 
  2045  0DBC                     	;# 
  2046  0DBD                     	;# 
  2047  0DBD                     	;# 
  2048  0DBE                     	;# 
  2049  0DBF                     	;# 
  2050  0DC0                     	;# 
  2051  0DC1                     	;# 
  2052  0DC1                     	;# 
  2053  0DC2                     	;# 
  2054  0DC3                     	;# 
  2055  0DC3                     	;# 
  2056  0DC4                     	;# 
  2057  0DC5                     	;# 
  2058  0DC5                     	;# 
  2059  0DC6                     	;# 
  2060  0DC7                     	;# 
  2061  0DC7                     	;# 
  2062  0DC8                     	;# 
  2063  0DC9                     	;# 
  2064  0DC9                     	;# 
  2065  0DCA                     	;# 
  2066  0DCB                     	;# 
  2067  0DCC                     	;# 
  2068  0DCC                     	;# 
  2069  0DCD                     	;# 
  2070  0DCD                     	;# 
  2071  0DCE                     	;# 
  2072  0DCF                     	;# 
  2073  0DD0                     	;# 
  2074  0E0F                     	;# 
  2075  0E10                     	;# 
  2076  0E11                     	;# 
  2077  0E12                     	;# 
  2078  0E13                     	;# 
  2079  0E14                     	;# 
  2080  0E15                     	;# 
  2081  0E16                     	;# 
  2082  0E17                     	;# 
  2083  0E90                     	;# 
  2084  0E91                     	;# 
  2085  0E92                     	;# 
  2086  0E94                     	;# 
  2087  0E95                     	;# 
  2088  0EA0                     	;# 
  2089  0EA1                     	;# 
  2090  0EA2                     	;# 
  2091  0EA3                     	;# 
  2092  0EA4                     	;# 
  2093  0EA5                     	;# 
  2094  0FE4                     	;# 
  2095  0FE5                     	;# 
  2096  0FE6                     	;# 
  2097  0FE7                     	;# 
  2098  0FE8                     	;# 
  2099  0FE8                     	;# 
  2100  0FE9                     	;# 
  2101  0FEA                     	;# 
  2102  0FEA                     	;# 
  2103  0FEB                     	;# 
  2104  0FED                     	;# 
  2105  0FEE                     	;# 
  2106  0FEE                     	;# 
  2107  0FEF                     	;# 
  2108  0000                     	;# 
  2109  0001                     	;# 
  2110  0002                     	;# 
  2111  0003                     	;# 
  2112  0004                     	;# 
  2113  0005                     	;# 
  2114  0006                     	;# 
  2115  0007                     	;# 
  2116  0008                     	;# 
  2117  0009                     	;# 
  2118  000A                     	;# 
  2119  000B                     	;# 
  2120  000C                     	;# 
  2121  000E                     	;# 
  2122  0011                     	;# 
  2123  0012                     	;# 
  2124  0013                     	;# 
  2125  0015                     	;# 
  2126  0016                     	;# 
  2127  0016                     	;# 
  2128  0017                     	;# 
  2129  0018                     	;# 
  2130  0019                     	;# 
  2131  001A                     	;# 
  2132  001B                     	;# 
  2133  001C                     	;# 
  2134  008C                     	;# 
  2135  008E                     	;# 
  2136  0091                     	;# 
  2137  0092                     	;# 
  2138  0093                     	;# 
  2139  0095                     	;# 
  2140  0096                     	;# 
  2141  0097                     	;# 
  2142  0098                     	;# 
  2143  0099                     	;# 
  2144  009A                     	;# 
  2145  009B                     	;# 
  2146  009B                     	;# 
  2147  009C                     	;# 
  2148  009D                     	;# 
  2149  009E                     	;# 
  2150  009F                     	;# 
  2151  010C                     	;# 
  2152  010E                     	;# 
  2153  0111                     	;# 
  2154  0112                     	;# 
  2155  0113                     	;# 
  2156  0114                     	;# 
  2157  0115                     	;# 
  2158  0116                     	;# 
  2159  0117                     	;# 
  2160  0118                     	;# 
  2161  0119                     	;# 
  2162  018C                     	;# 
  2163  018E                     	;# 
  2164  0191                     	;# 
  2165  0191                     	;# 
  2166  0192                     	;# 
  2167  0193                     	;# 
  2168  0193                     	;# 
  2169  0194                     	;# 
  2170  0195                     	;# 
  2171  0196                     	;# 
  2172  0197                     	;# 
  2173  0199                     	;# 
  2174  019A                     	;# 
  2175  019B                     	;# 
  2176  019B                     	;# 
  2177  019C                     	;# 
  2178  019D                     	;# 
  2179  019E                     	;# 
  2180  019F                     	;# 
  2181  020C                     	;# 
  2182  020E                     	;# 
  2183  028C                     	;# 
  2184  028E                     	;# 
  2185  030C                     	;# 
  2186  030E                     	;# 
  2187  038C                     	;# 
  2188  038E                     	;# 
  2189  0391                     	;# 
  2190  0392                     	;# 
  2191  0393                     	;# 
  2192  0397                     	;# 
  2193  0398                     	;# 
  2194  0399                     	;# 
  2195  0691                     	;# 
  2196  0692                     	;# 
  2197  0693                     	;# 
  2198  0694                     	;# 
  2199  0695                     	;# 
  2200  0D8E                     	;# 
  2201  0D8F                     	;# 
  2202  0D90                     	;# 
  2203  0D91                     	;# 
  2204  0D91                     	;# 
  2205  0D92                     	;# 
  2206  0D93                     	;# 
  2207  0D93                     	;# 
  2208  0D94                     	;# 
  2209  0D95                     	;# 
  2210  0D95                     	;# 
  2211  0D96                     	;# 
  2212  0D97                     	;# 
  2213  0D97                     	;# 
  2214  0D98                     	;# 
  2215  0D99                     	;# 
  2216  0D99                     	;# 
  2217  0D9A                     	;# 
  2218  0D9B                     	;# 
  2219  0D9C                     	;# 
  2220  0D9C                     	;# 
  2221  0D9D                     	;# 
  2222  0D9D                     	;# 
  2223  0D9E                     	;# 
  2224  0D9F                     	;# 
  2225  0DA0                     	;# 
  2226  0DA1                     	;# 
  2227  0DA1                     	;# 
  2228  0DA2                     	;# 
  2229  0DA3                     	;# 
  2230  0DA3                     	;# 
  2231  0DA4                     	;# 
  2232  0DA5                     	;# 
  2233  0DA5                     	;# 
  2234  0DA6                     	;# 
  2235  0DA7                     	;# 
  2236  0DA7                     	;# 
  2237  0DA8                     	;# 
  2238  0DA9                     	;# 
  2239  0DA9                     	;# 
  2240  0DAA                     	;# 
  2241  0DAB                     	;# 
  2242  0DAC                     	;# 
  2243  0DAC                     	;# 
  2244  0DAD                     	;# 
  2245  0DAD                     	;# 
  2246  0DAE                     	;# 
  2247  0DAF                     	;# 
  2248  0DB0                     	;# 
  2249  0DB1                     	;# 
  2250  0DB1                     	;# 
  2251  0DB2                     	;# 
  2252  0DB3                     	;# 
  2253  0DB3                     	;# 
  2254  0DB4                     	;# 
  2255  0DB5                     	;# 
  2256  0DB5                     	;# 
  2257  0DB6                     	;# 
  2258  0DB7                     	;# 
  2259  0DB7                     	;# 
  2260  0DB8                     	;# 
  2261  0DB9                     	;# 
  2262  0DB9                     	;# 
  2263  0DBA                     	;# 
  2264  0DBB                     	;# 
  2265  0DBC                     	;# 
  2266  0DBC                     	;# 
  2267  0DBD                     	;# 
  2268  0DBD                     	;# 
  2269  0DBE                     	;# 
  2270  0DBF                     	;# 
  2271  0DC0                     	;# 
  2272  0DC1                     	;# 
  2273  0DC1                     	;# 
  2274  0DC2                     	;# 
  2275  0DC3                     	;# 
  2276  0DC3                     	;# 
  2277  0DC4                     	;# 
  2278  0DC5                     	;# 
  2279  0DC5                     	;# 
  2280  0DC6                     	;# 
  2281  0DC7                     	;# 
  2282  0DC7                     	;# 
  2283  0DC8                     	;# 
  2284  0DC9                     	;# 
  2285  0DC9                     	;# 
  2286  0DCA                     	;# 
  2287  0DCB                     	;# 
  2288  0DCC                     	;# 
  2289  0DCC                     	;# 
  2290  0DCD                     	;# 
  2291  0DCD                     	;# 
  2292  0DCE                     	;# 
  2293  0DCF                     	;# 
  2294  0DD0                     	;# 
  2295  0E0F                     	;# 
  2296  0E10                     	;# 
  2297  0E11                     	;# 
  2298  0E12                     	;# 
  2299  0E13                     	;# 
  2300  0E14                     	;# 
  2301  0E15                     	;# 
  2302  0E16                     	;# 
  2303  0E17                     	;# 
  2304  0E90                     	;# 
  2305  0E91                     	;# 
  2306  0E92                     	;# 
  2307  0E94                     	;# 
  2308  0E95                     	;# 
  2309  0EA0                     	;# 
  2310  0EA1                     	;# 
  2311  0EA2                     	;# 
  2312  0EA3                     	;# 
  2313  0EA4                     	;# 
  2314  0EA5                     	;# 
  2315  0FE4                     	;# 
  2316  0FE5                     	;# 
  2317  0FE6                     	;# 
  2318  0FE7                     	;# 
  2319  0FE8                     	;# 
  2320  0FE8                     	;# 
  2321  0FE9                     	;# 
  2322  0FEA                     	;# 
  2323  0FEA                     	;# 
  2324  0FEB                     	;# 
  2325  0FED                     	;# 
  2326  0FEE                     	;# 
  2327  0FEE                     	;# 
  2328  0FEF                     	;# 
  2329  0000                     	;# 
  2330  0001                     	;# 
  2331  0002                     	;# 
  2332  0003                     	;# 
  2333  0004                     	;# 
  2334  0005                     	;# 
  2335  0006                     	;# 
  2336  0007                     	;# 
  2337  0008                     	;# 
  2338  0009                     	;# 
  2339  000A                     	;# 
  2340  000B                     	;# 
  2341  000C                     	;# 
  2342  000E                     	;# 
  2343  0011                     	;# 
  2344  0012                     	;# 
  2345  0013                     	;# 
  2346  0015                     	;# 
  2347  0016                     	;# 
  2348  0016                     	;# 
  2349  0017                     	;# 
  2350  0018                     	;# 
  2351  0019                     	;# 
  2352  001A                     	;# 
  2353  001B                     	;# 
  2354  001C                     	;# 
  2355  008C                     	;# 
  2356  008E                     	;# 
  2357  0091                     	;# 
  2358  0092                     	;# 
  2359  0093                     	;# 
  2360  0095                     	;# 
  2361  0096                     	;# 
  2362  0097                     	;# 
  2363  0098                     	;# 
  2364  0099                     	;# 
  2365  009A                     	;# 
  2366  009B                     	;# 
  2367  009B                     	;# 
  2368  009C                     	;# 
  2369  009D                     	;# 
  2370  009E                     	;# 
  2371  009F                     	;# 
  2372  010C                     	;# 
  2373  010E                     	;# 
  2374  0111                     	;# 
  2375  0112                     	;# 
  2376  0113                     	;# 
  2377  0114                     	;# 
  2378  0115                     	;# 
  2379  0116                     	;# 
  2380  0117                     	;# 
  2381  0118                     	;# 
  2382  0119                     	;# 
  2383  018C                     	;# 
  2384  018E                     	;# 
  2385  0191                     	;# 
  2386  0191                     	;# 
  2387  0192                     	;# 
  2388  0193                     	;# 
  2389  0193                     	;# 
  2390  0194                     	;# 
  2391  0195                     	;# 
  2392  0196                     	;# 
  2393  0197                     	;# 
  2394  0199                     	;# 
  2395  019A                     	;# 
  2396  019B                     	;# 
  2397  019B                     	;# 
  2398  019C                     	;# 
  2399  019D                     	;# 
  2400  019E                     	;# 
  2401  019F                     	;# 
  2402  020C                     	;# 
  2403  020E                     	;# 
  2404  028C                     	;# 
  2405  028E                     	;# 
  2406  030C                     	;# 
  2407  030E                     	;# 
  2408  038C                     	;# 
  2409  038E                     	;# 
  2410  0391                     	;# 
  2411  0392                     	;# 
  2412  0393                     	;# 
  2413  0397                     	;# 
  2414  0398                     	;# 
  2415  0399                     	;# 
  2416  0691                     	;# 
  2417  0692                     	;# 
  2418  0693                     	;# 
  2419  0694                     	;# 
  2420  0695                     	;# 
  2421  0D8E                     	;# 
  2422  0D8F                     	;# 
  2423  0D90                     	;# 
  2424  0D91                     	;# 
  2425  0D91                     	;# 
  2426  0D92                     	;# 
  2427  0D93                     	;# 
  2428  0D93                     	;# 
  2429  0D94                     	;# 
  2430  0D95                     	;# 
  2431  0D95                     	;# 
  2432  0D96                     	;# 
  2433  0D97                     	;# 
  2434  0D97                     	;# 
  2435  0D98                     	;# 
  2436  0D99                     	;# 
  2437  0D99                     	;# 
  2438  0D9A                     	;# 
  2439  0D9B                     	;# 
  2440  0D9C                     	;# 
  2441  0D9C                     	;# 
  2442  0D9D                     	;# 
  2443  0D9D                     	;# 
  2444  0D9E                     	;# 
  2445  0D9F                     	;# 
  2446  0DA0                     	;# 
  2447  0DA1                     	;# 
  2448  0DA1                     	;# 
  2449  0DA2                     	;# 
  2450  0DA3                     	;# 
  2451  0DA3                     	;# 
  2452  0DA4                     	;# 
  2453  0DA5                     	;# 
  2454  0DA5                     	;# 
  2455  0DA6                     	;# 
  2456  0DA7                     	;# 
  2457  0DA7                     	;# 
  2458  0DA8                     	;# 
  2459  0DA9                     	;# 
  2460  0DA9                     	;# 
  2461  0DAA                     	;# 
  2462  0DAB                     	;# 
  2463  0DAC                     	;# 
  2464  0DAC                     	;# 
  2465  0DAD                     	;# 
  2466  0DAD                     	;# 
  2467  0DAE                     	;# 
  2468  0DAF                     	;# 
  2469  0DB0                     	;# 
  2470  0DB1                     	;# 
  2471  0DB1                     	;# 
  2472  0DB2                     	;# 
  2473  0DB3                     	;# 
  2474  0DB3                     	;# 
  2475  0DB4                     	;# 
  2476  0DB5                     	;# 
  2477  0DB5                     	;# 
  2478  0DB6                     	;# 
  2479  0DB7                     	;# 
  2480  0DB7                     	;# 
  2481  0DB8                     	;# 
  2482  0DB9                     	;# 
  2483  0DB9                     	;# 
  2484  0DBA                     	;# 
  2485  0DBB                     	;# 
  2486  0DBC                     	;# 
  2487  0DBC                     	;# 
  2488  0DBD                     	;# 
  2489  0DBD                     	;# 
  2490  0DBE                     	;# 
  2491  0DBF                     	;# 
  2492  0DC0                     	;# 
  2493  0DC1                     	;# 
  2494  0DC1                     	;# 
  2495  0DC2                     	;# 
  2496  0DC3                     	;# 
  2497  0DC3                     	;# 
  2498  0DC4                     	;# 
  2499  0DC5                     	;# 
  2500  0DC5                     	;# 
  2501  0DC6                     	;# 
  2502  0DC7                     	;# 
  2503  0DC7                     	;# 
  2504  0DC8                     	;# 
  2505  0DC9                     	;# 
  2506  0DC9                     	;# 
  2507  0DCA                     	;# 
  2508  0DCB                     	;# 
  2509  0DCC                     	;# 
  2510  0DCC                     	;# 
  2511  0DCD                     	;# 
  2512  0DCD                     	;# 
  2513  0DCE                     	;# 
  2514  0DCF                     	;# 
  2515  0DD0                     	;# 
  2516  0E0F                     	;# 
  2517  0E10                     	;# 
  2518  0E11                     	;# 
  2519  0E12                     	;# 
  2520  0E13                     	;# 
  2521  0E14                     	;# 
  2522  0E15                     	;# 
  2523  0E16                     	;# 
  2524  0E17                     	;# 
  2525  0E90                     	;# 
  2526  0E91                     	;# 
  2527  0E92                     	;# 
  2528  0E94                     	;# 
  2529  0E95                     	;# 
  2530  0EA0                     	;# 
  2531  0EA1                     	;# 
  2532  0EA2                     	;# 
  2533  0EA3                     	;# 
  2534  0EA4                     	;# 
  2535  0EA5                     	;# 
  2536  0FE4                     	;# 
  2537  0FE5                     	;# 
  2538  0FE6                     	;# 
  2539  0FE7                     	;# 
  2540  0FE8                     	;# 
  2541  0FE8                     	;# 
  2542  0FE9                     	;# 
  2543  0FEA                     	;# 
  2544  0FEA                     	;# 
  2545  0FEB                     	;# 
  2546  0FED                     	;# 
  2547  0FEE                     	;# 
  2548  0FEE                     	;# 
  2549  0FEF                     	;# 
  2550  0FFF                     	;# 
  2551  0000                     	;# 
  2552  0001                     	;# 
  2553  0002                     	;# 
  2554  0003                     	;# 
  2555  0004                     	;# 
  2556  0005                     	;# 
  2557  0006                     	;# 
  2558  0007                     	;# 
  2559  0008                     	;# 
  2560  0009                     	;# 
  2561  000A                     	;# 
  2562  000B                     	;# 
  2563  000C                     	;# 
  2564  000E                     	;# 
  2565  0011                     	;# 
  2566  0012                     	;# 
  2567  0013                     	;# 
  2568  0015                     	;# 
  2569  0016                     	;# 
  2570  0016                     	;# 
  2571  0017                     	;# 
  2572  0018                     	;# 
  2573  0019                     	;# 
  2574  001A                     	;# 
  2575  001B                     	;# 
  2576  001C                     	;# 
  2577  008C                     	;# 
  2578  008E                     	;# 
  2579  0091                     	;# 
  2580  0092                     	;# 
  2581  0093                     	;# 
  2582  0095                     	;# 
  2583  0096                     	;# 
  2584  0097                     	;# 
  2585  0098                     	;# 
  2586  0099                     	;# 
  2587  009A                     	;# 
  2588  009B                     	;# 
  2589  009B                     	;# 
  2590  009C                     	;# 
  2591  009D                     	;# 
  2592  009E                     	;# 
  2593  009F                     	;# 
  2594  010C                     	;# 
  2595  010E                     	;# 
  2596  0111                     	;# 
  2597  0112                     	;# 
  2598  0113                     	;# 
  2599  0114                     	;# 
  2600  0115                     	;# 
  2601  0116                     	;# 
  2602  0117                     	;# 
  2603  0118                     	;# 
  2604  0119                     	;# 
  2605  018C                     	;# 
  2606  018E                     	;# 
  2607  0191                     	;# 
  2608  0191                     	;# 
  2609  0192                     	;# 
  2610  0193                     	;# 
  2611  0193                     	;# 
  2612  0194                     	;# 
  2613  0195                     	;# 
  2614  0196                     	;# 
  2615  0197                     	;# 
  2616  0199                     	;# 
  2617  019A                     	;# 
  2618  019B                     	;# 
  2619  019B                     	;# 
  2620  019C                     	;# 
  2621  019D                     	;# 
  2622  019E                     	;# 
  2623  019F                     	;# 
  2624  020C                     	;# 
  2625  020E                     	;# 
  2626  028C                     	;# 
  2627  028E                     	;# 
  2628  030C                     	;# 
  2629  030E                     	;# 
  2630  038C                     	;# 
  2631  038E                     	;# 
  2632  0391                     	;# 
  2633  0392                     	;# 
  2634  0393                     	;# 
  2635  0397                     	;# 
  2636  0398                     	;# 
  2637  0399                     	;# 
  2638  0691                     	;# 
  2639  0692                     	;# 
  2640  0693                     	;# 
  2641  0694                     	;# 
  2642  0695                     	;# 
  2643  0D8E                     	;# 
  2644  0D8F                     	;# 
  2645  0D90                     	;# 
  2646  0D91                     	;# 
  2647  0D91                     	;# 
  2648  0D92                     	;# 
  2649  0D93                     	;# 
  2650  0D93                     	;# 
  2651  0D94                     	;# 
  2652  0D95                     	;# 
  2653  0D95                     	;# 
  2654  0D96                     	;# 
  2655  0D97                     	;# 
  2656  0D97                     	;# 
  2657  0D98                     	;# 
  2658  0D99                     	;# 
  2659  0D99                     	;# 
  2660  0D9A                     	;# 
  2661  0D9B                     	;# 
  2662  0D9C                     	;# 
  2663  0D9C                     	;# 
  2664  0D9D                     	;# 
  2665  0D9D                     	;# 
  2666  0D9E                     	;# 
  2667  0D9F                     	;# 
  2668  0DA0                     	;# 
  2669  0DA1                     	;# 
  2670  0DA1                     	;# 
  2671  0DA2                     	;# 
  2672  0DA3                     	;# 
  2673  0DA3                     	;# 
  2674  0DA4                     	;# 
  2675  0DA5                     	;# 
  2676  0DA5                     	;# 
  2677  0DA6                     	;# 
  2678  0DA7                     	;# 
  2679  0DA7                     	;# 
  2680  0DA8                     	;# 
  2681  0DA9                     	;# 
  2682  0DA9                     	;# 
  2683  0DAA                     	;# 
  2684  0DAB                     	;# 
  2685  0DAC                     	;# 
  2686  0DAC                     	;# 
  2687  0DAD                     	;# 
  2688  0DAD                     	;# 
  2689  0DAE                     	;# 
  2690  0DAF                     	;# 
  2691  0DB0                     	;# 
  2692  0DB1                     	;# 
  2693  0DB1                     	;# 
  2694  0DB2                     	;# 
  2695  0DB3                     	;# 
  2696  0DB3                     	;# 
  2697  0DB4                     	;# 
  2698  0DB5                     	;# 
  2699  0DB5                     	;# 
  2700  0DB6                     	;# 
  2701  0DB7                     	;# 
  2702  0DB7                     	;# 
  2703  0DB8                     	;# 
  2704  0DB9                     	;# 
  2705  0DB9                     	;# 
  2706  0DBA                     	;# 
  2707  0DBB                     	;# 
  2708  0DBC                     	;# 
  2709  0DBC                     	;# 
  2710  0DBD                     	;# 
  2711  0DBD                     	;# 
  2712  0DBE                     	;# 
  2713  0DBF                     	;# 
  2714  0DC0                     	;# 
  2715  0DC1                     	;# 
  2716  0DC1                     	;# 
  2717  0DC2                     	;# 
  2718  0DC3                     	;# 
  2719  0DC3                     	;# 
  2720  0DC4                     	;# 
  2721  0DC5                     	;# 
  2722  0DC5                     	;# 
  2723  0DC6                     	;# 
  2724  0DC7                     	;# 
  2725  0DC7                     	;# 
  2726  0DC8                     	;# 
  2727  0DC9                     	;# 
  2728  0DC9                     	;# 
  2729  0DCA                     	;# 
  2730  0DCB                     	;# 
  2731  0DCC                     	;# 
  2732  0DCC                     	;# 
  2733  0DCD                     	;# 
  2734  0DCD                     	;# 
  2735  0DCE                     	;# 
  2736  0DCF                     	;# 
  2737  0DD0                     	;# 
  2738  0E0F                     	;# 
  2739  0E10                     	;# 
  2740  0E11                     	;# 
  2741  0E12                     	;# 
  2742  0E13                     	;# 
  2743  0E14                     	;# 
  2744  0E15                     	;# 
  2745  0E16                     	;# 
  2746  0E17                     	;# 
  2747  0E90                     	;# 
  2748  0E91                     	;# 
  2749  0E92                     	;# 
  2750  0E94                     	;# 
  2751  0E95                     	;# 
  2752  0EA0                     	;# 
  2753  0EA1                     	;# 
  2754  0EA2                     	;# 
  2755  0EA3                     	;# 
  2756  0EA4                     	;# 
  2757  0EA5                     	;# 
  2758  0FE4                     	;# 
  2759  0FE5                     	;# 
  2760  0FE6                     	;# 
  2761  0FE7                     	;# 
  2762  0FE8                     	;# 
  2763  0FE8                     	;# 
  2764  0FE9                     	;# 
  2765  0FEA                     	;# 
  2766  0FEA                     	;# 
  2767  0FEB                     	;# 
  2768  0FED                     	;# 
  2769  0FEE                     	;# 
  2770  0FEE                     	;# 
  2771  0FEF                     	;# 
  2772  0FFF                     	;# 
  2773  0000                     	;# 
  2774  0001                     	;# 
  2775  0002                     	;# 
  2776  0003                     	;# 
  2777  0004                     	;# 
  2778  0005                     	;# 
  2779  0006                     	;# 
  2780  0007                     	;# 
  2781  0008                     	;# 
  2782  0009                     	;# 
  2783  000A                     	;# 
  2784  000B                     	;# 
  2785  000C                     	;# 
  2786  000E                     	;# 
  2787  0011                     	;# 
  2788  0012                     	;# 
  2789  0013                     	;# 
  2790  0015                     	;# 
  2791  0016                     	;# 
  2792  0016                     	;# 
  2793  0017                     	;# 
  2794  0018                     	;# 
  2795  0019                     	;# 
  2796  001A                     	;# 
  2797  001B                     	;# 
  2798  001C                     	;# 
  2799  008C                     	;# 
  2800  008E                     	;# 
  2801  0091                     	;# 
  2802  0092                     	;# 
  2803  0093                     	;# 
  2804  0095                     	;# 
  2805  0096                     	;# 
  2806  0097                     	;# 
  2807  0098                     	;# 
  2808  0099                     	;# 
  2809  009A                     	;# 
  2810  009B                     	;# 
  2811  009B                     	;# 
  2812  009C                     	;# 
  2813  009D                     	;# 
  2814  009E                     	;# 
  2815  009F                     	;# 
  2816  010C                     	;# 
  2817  010E                     	;# 
  2818  0111                     	;# 
  2819  0112                     	;# 
  2820  0113                     	;# 
  2821  0114                     	;# 
  2822  0115                     	;# 
  2823  0116                     	;# 
  2824  0117                     	;# 
  2825  0118                     	;# 
  2826  0119                     	;# 
  2827  018C                     	;# 
  2828  018E                     	;# 
  2829  0191                     	;# 
  2830  0191                     	;# 
  2831  0192                     	;# 
  2832  0193                     	;# 
  2833  0193                     	;# 
  2834  0194                     	;# 
  2835  0195                     	;# 
  2836  0196                     	;# 
  2837  0197                     	;# 
  2838  0199                     	;# 
  2839  019A                     	;# 
  2840  019B                     	;# 
  2841  019B                     	;# 
  2842  019C                     	;# 
  2843  019D                     	;# 
  2844  019E                     	;# 
  2845  019F                     	;# 
  2846  020C                     	;# 
  2847  020E                     	;# 
  2848  028C                     	;# 
  2849  028E                     	;# 
  2850  030C                     	;# 
  2851  030E                     	;# 
  2852  038C                     	;# 
  2853  038E                     	;# 
  2854  0391                     	;# 
  2855  0392                     	;# 
  2856  0393                     	;# 
  2857  0397                     	;# 
  2858  0398                     	;# 
  2859  0399                     	;# 
  2860  0691                     	;# 
  2861  0692                     	;# 
  2862  0693                     	;# 
  2863  0694                     	;# 
  2864  0695                     	;# 
  2865  0D8E                     	;# 
  2866  0D8F                     	;# 
  2867  0D90                     	;# 
  2868  0D91                     	;# 
  2869  0D91                     	;# 
  2870  0D92                     	;# 
  2871  0D93                     	;# 
  2872  0D93                     	;# 
  2873  0D94                     	;# 
  2874  0D95                     	;# 
  2875  0D95                     	;# 
  2876  0D96                     	;# 
  2877  0D97                     	;# 
  2878  0D97                     	;# 
  2879  0D98                     	;# 
  2880  0D99                     	;# 
  2881  0D99                     	;# 
  2882  0D9A                     	;# 
  2883  0D9B                     	;# 
  2884  0D9C                     	;# 
  2885  0D9C                     	;# 
  2886  0D9D                     	;# 
  2887  0D9D                     	;# 
  2888  0D9E                     	;# 
  2889  0D9F                     	;# 
  2890  0DA0                     	;# 
  2891  0DA1                     	;# 
  2892  0DA1                     	;# 
  2893  0DA2                     	;# 
  2894  0DA3                     	;# 
  2895  0DA3                     	;# 
  2896  0DA4                     	;# 
  2897  0DA5                     	;# 
  2898  0DA5                     	;# 
  2899  0DA6                     	;# 
  2900  0DA7                     	;# 
  2901  0DA7                     	;# 
  2902  0DA8                     	;# 
  2903  0DA9                     	;# 
  2904  0DA9                     	;# 
  2905  0DAA                     	;# 
  2906  0DAB                     	;# 
  2907  0DAC                     	;# 
  2908  0DAC                     	;# 
  2909  0DAD                     	;# 
  2910  0DAD                     	;# 
  2911  0DAE                     	;# 
  2912  0DAF                     	;# 
  2913  0DB0                     	;# 
  2914  0DB1                     	;# 
  2915  0DB1                     	;# 
  2916  0DB2                     	;# 
  2917  0DB3                     	;# 
  2918  0DB3                     	;# 
  2919  0DB4                     	;# 
  2920  0DB5                     	;# 
  2921  0DB5                     	;# 
  2922  0DB6                     	;# 
  2923  0DB7                     	;# 
  2924  0DB7                     	;# 
  2925  0DB8                     	;# 
  2926  0DB9                     	;# 
  2927  0DB9                     	;# 
  2928  0DBA                     	;# 
  2929  0DBB                     	;# 
  2930  0DBC                     	;# 
  2931  0DBC                     	;# 
  2932  0DBD                     	;# 
  2933  0DBD                     	;# 
  2934  0DBE                     	;# 
  2935  0DBF                     	;# 
  2936  0DC0                     	;# 
  2937  0DC1                     	;# 
  2938  0DC1                     	;# 
  2939  0DC2                     	;# 
  2940  0DC3                     	;# 
  2941  0DC3                     	;# 
  2942  0DC4                     	;# 
  2943  0DC5                     	;# 
  2944  0DC5                     	;# 
  2945  0DC6                     	;# 
  2946  0DC7                     	;# 
  2947  0DC7                     	;# 
  2948  0DC8                     	;# 
  2949  0DC9                     	;# 
  2950  0DC9                     	;# 
  2951  0DCA                     	;# 
  2952  0DCB                     	;# 
  2953  0DCC                     	;# 
  2954  0DCC                     	;# 
  2955  0DCD                     	;# 
  2956  0DCD                     	;# 
  2957  0DCE                     	;# 
  2958  0DCF                     	;# 
  2959  0DD0                     	;# 
  2960  0E0F                     	;# 
  2961  0E10                     	;# 
  2962  0E11                     	;# 
  2963  0E12                     	;# 
  2964  0E13                     	;# 
  2965  0E14                     	;# 
  2966  0E15                     	;# 
  2967  0E16                     	;# 
  2968  0E17                     	;# 
  2969  0E90                     	;# 
  2970  0E91                     	;# 
  2971  0E92                     	;# 
  2972  0E94                     	;# 
  2973  0E95                     	;# 
  2974  0EA0                     	;# 
  2975  0EA1                     	;# 
  2976  0EA2                     	;# 
  2977  0EA3                     	;# 
  2978  0EA4                     	;# 
  2979  0EA5                     	;# 
  2980  0FE4                     	;# 
  2981  0FE5                     	;# 
  2982  0FE6                     	;# 
  2983  0FE7                     	;# 
  2984  0FE8                     	;# 
  2985  0FE8                     	;# 
  2986  0FE9                     	;# 
  2987  0FEA                     	;# 
  2988  0FEA                     	;# 
  2989  0FEB                     	;# 
  2990  0FED                     	;# 
  2991  0FEE                     	;# 
  2992  0FEE                     	;# 
  2993  0FEF                     	;# 
  2994  0FFF                     	;# 
  2995  0000                     	;# 
  2996  0001                     	;# 
  2997  0002                     	;# 
  2998  0003                     	;# 
  2999  0004                     	;# 
  3000  0005                     	;# 
  3001  0006                     	;# 
  3002  0007                     	;# 
  3003  0008                     	;# 
  3004  0009                     	;# 
  3005  000A                     	;# 
  3006  000B                     	;# 
  3007  000C                     	;# 
  3008  000E                     	;# 
  3009  0011                     	;# 
  3010  0012                     	;# 
  3011  0013                     	;# 
  3012  0015                     	;# 
  3013  0016                     	;# 
  3014  0016                     	;# 
  3015  0017                     	;# 
  3016  0018                     	;# 
  3017  0019                     	;# 
  3018  001A                     	;# 
  3019  001B                     	;# 
  3020  001C                     	;# 
  3021  008C                     	;# 
  3022  008E                     	;# 
  3023  0091                     	;# 
  3024  0092                     	;# 
  3025  0093                     	;# 
  3026  0095                     	;# 
  3027  0096                     	;# 
  3028  0097                     	;# 
  3029  0098                     	;# 
  3030  0099                     	;# 
  3031  009A                     	;# 
  3032  009B                     	;# 
  3033  009B                     	;# 
  3034  009C                     	;# 
  3035  009D                     	;# 
  3036  009E                     	;# 
  3037  009F                     	;# 
  3038  010C                     	;# 
  3039  010E                     	;# 
  3040  0111                     	;# 
  3041  0112                     	;# 
  3042  0113                     	;# 
  3043  0114                     	;# 
  3044  0115                     	;# 
  3045  0116                     	;# 
  3046  0117                     	;# 
  3047  0118                     	;# 
  3048  0119                     	;# 
  3049  018C                     	;# 
  3050  018E                     	;# 
  3051  0191                     	;# 
  3052  0191                     	;# 
  3053  0192                     	;# 
  3054  0193                     	;# 
  3055  0193                     	;# 
  3056  0194                     	;# 
  3057  0195                     	;# 
  3058  0196                     	;# 
  3059  0197                     	;# 
  3060  0199                     	;# 
  3061  019A                     	;# 
  3062  019B                     	;# 
  3063  019B                     	;# 
  3064  019C                     	;# 
  3065  019D                     	;# 
  3066  019E                     	;# 
  3067  019F                     	;# 
  3068  020C                     	;# 
  3069  020E                     	;# 
  3070  028C                     	;# 
  3071  028E                     	;# 
  3072  030C                     	;# 
  3073  030E                     	;# 
  3074  038C                     	;# 
  3075  038E                     	;# 
  3076  0391                     	;# 
  3077  0392                     	;# 
  3078  0393                     	;# 
  3079  0397                     	;# 
  3080  0398                     	;# 
  3081  0399                     	;# 
  3082  0691                     	;# 
  3083  0692                     	;# 
  3084  0693                     	;# 
  3085  0694                     	;# 
  3086  0695                     	;# 
  3087  0D8E                     	;# 
  3088  0D8F                     	;# 
  3089  0D90                     	;# 
  3090  0D91                     	;# 
  3091  0D91                     	;# 
  3092  0D92                     	;# 
  3093  0D93                     	;# 
  3094  0D93                     	;# 
  3095  0D94                     	;# 
  3096  0D95                     	;# 
  3097  0D95                     	;# 
  3098  0D96                     	;# 
  3099  0D97                     	;# 
  3100  0D97                     	;# 
  3101  0D98                     	;# 
  3102  0D99                     	;# 
  3103  0D99                     	;# 
  3104  0D9A                     	;# 
  3105  0D9B                     	;# 
  3106  0D9C                     	;# 
  3107  0D9C                     	;# 
  3108  0D9D                     	;# 
  3109  0D9D                     	;# 
  3110  0D9E                     	;# 
  3111  0D9F                     	;# 
  3112  0DA0                     	;# 
  3113  0DA1                     	;# 
  3114  0DA1                     	;# 
  3115  0DA2                     	;# 
  3116  0DA3                     	;# 
  3117  0DA3                     	;# 
  3118  0DA4                     	;# 
  3119  0DA5                     	;# 
  3120  0DA5                     	;# 
  3121  0DA6                     	;# 
  3122  0DA7                     	;# 
  3123  0DA7                     	;# 
  3124  0DA8                     	;# 
  3125  0DA9                     	;# 
  3126  0DA9                     	;# 
  3127  0DAA                     	;# 
  3128  0DAB                     	;# 
  3129  0DAC                     	;# 
  3130  0DAC                     	;# 
  3131  0DAD                     	;# 
  3132  0DAD                     	;# 
  3133  0DAE                     	;# 
  3134  0DAF                     	;# 
  3135  0DB0                     	;# 
  3136  0DB1                     	;# 
  3137  0DB1                     	;# 
  3138  0DB2                     	;# 
  3139  0DB3                     	;# 
  3140  0DB3                     	;# 
  3141  0DB4                     	;# 
  3142  0DB5                     	;# 
  3143  0DB5                     	;# 
  3144  0DB6                     	;# 
  3145  0DB7                     	;# 
  3146  0DB7                     	;# 
  3147  0DB8                     	;# 
  3148  0DB9                     	;# 
  3149  0DB9                     	;# 
  3150  0DBA                     	;# 
  3151  0DBB                     	;# 
  3152  0DBC                     	;# 
  3153  0DBC                     	;# 
  3154  0DBD                     	;# 
  3155  0DBD                     	;# 
  3156  0DBE                     	;# 
  3157  0DBF                     	;# 
  3158  0DC0                     	;# 
  3159  0DC1                     	;# 
  3160  0DC1                     	;# 
  3161  0DC2                     	;# 
  3162  0DC3                     	;# 
  3163  0DC3                     	;# 
  3164  0DC4                     	;# 
  3165  0DC5                     	;# 
  3166  0DC5                     	;# 
  3167  0DC6                     	;# 
  3168  0DC7                     	;# 
  3169  0DC7                     	;# 
  3170  0DC8                     	;# 
  3171  0DC9                     	;# 
  3172  0DC9                     	;# 
  3173  0DCA                     	;# 
  3174  0DCB                     	;# 
  3175  0DCC                     	;# 
  3176  0DCC                     	;# 
  3177  0DCD                     	;# 
  3178  0DCD                     	;# 
  3179  0DCE                     	;# 
  3180  0DCF                     	;# 
  3181  0DD0                     	;# 
  3182  0E0F                     	;# 
  3183  0E10                     	;# 
  3184  0E11                     	;# 
  3185  0E12                     	;# 
  3186  0E13                     	;# 
  3187  0E14                     	;# 
  3188  0E15                     	;# 
  3189  0E16                     	;# 
  3190  0E17                     	;# 
  3191  0E90                     	;# 
  3192  0E91                     	;# 
  3193  0E92                     	;# 
  3194  0E94                     	;# 
  3195  0E95                     	;# 
  3196  0EA0                     	;# 
  3197  0EA1                     	;# 
  3198  0EA2                     	;# 
  3199  0EA3                     	;# 
  3200  0EA4                     	;# 
  3201  0EA5                     	;# 
  3202  0FE4                     	;# 
  3203  0FE5                     	;# 
  3204  0FE6                     	;# 
  3205  0FE7                     	;# 
  3206  0FE8                     	;# 
  3207  0FE8                     	;# 
  3208  0FE9                     	;# 
  3209  0FEA                     	;# 
  3210  0FEA                     	;# 
  3211  0FEB                     	;# 
  3212  0FED                     	;# 
  3213  0FEE                     	;# 
  3214  0FEE                     	;# 
  3215  0FEF                     	;# 
  3216  0FFF                     	;# 
  3217  0000                     	;# 
  3218  0001                     	;# 
  3219  0002                     	;# 
  3220  0003                     	;# 
  3221  0004                     	;# 
  3222  0005                     	;# 
  3223  0006                     	;# 
  3224  0007                     	;# 
  3225  0008                     	;# 
  3226  0009                     	;# 
  3227  000A                     	;# 
  3228  000B                     	;# 
  3229  000C                     	;# 
  3230  000E                     	;# 
  3231  0011                     	;# 
  3232  0012                     	;# 
  3233  0013                     	;# 
  3234  0015                     	;# 
  3235  0016                     	;# 
  3236  0016                     	;# 
  3237  0017                     	;# 
  3238  0018                     	;# 
  3239  0019                     	;# 
  3240  001A                     	;# 
  3241  001B                     	;# 
  3242  001C                     	;# 
  3243  008C                     	;# 
  3244  008E                     	;# 
  3245  0091                     	;# 
  3246  0092                     	;# 
  3247  0093                     	;# 
  3248  0095                     	;# 
  3249  0096                     	;# 
  3250  0097                     	;# 
  3251  0098                     	;# 
  3252  0099                     	;# 
  3253  009A                     	;# 
  3254  009B                     	;# 
  3255  009B                     	;# 
  3256  009C                     	;# 
  3257  009D                     	;# 
  3258  009E                     	;# 
  3259  009F                     	;# 
  3260  010C                     	;# 
  3261  010E                     	;# 
  3262  0111                     	;# 
  3263  0112                     	;# 
  3264  0113                     	;# 
  3265  0114                     	;# 
  3266  0115                     	;# 
  3267  0116                     	;# 
  3268  0117                     	;# 
  3269  0118                     	;# 
  3270  0119                     	;# 
  3271  018C                     	;# 
  3272  018E                     	;# 
  3273  0191                     	;# 
  3274  0191                     	;# 
  3275  0192                     	;# 
  3276  0193                     	;# 
  3277  0193                     	;# 
  3278  0194                     	;# 
  3279  0195                     	;# 
  3280  0196                     	;# 
  3281  0197                     	;# 
  3282  0199                     	;# 
  3283  019A                     	;# 
  3284  019B                     	;# 
  3285  019B                     	;# 
  3286  019C                     	;# 
  3287  019D                     	;# 
  3288  019E                     	;# 
  3289  019F                     	;# 
  3290  020C                     	;# 
  3291  020E                     	;# 
  3292  028C                     	;# 
  3293  028E                     	;# 
  3294  030C                     	;# 
  3295  030E                     	;# 
  3296  038C                     	;# 
  3297  038E                     	;# 
  3298  0391                     	;# 
  3299  0392                     	;# 
  3300  0393                     	;# 
  3301  0397                     	;# 
  3302  0398                     	;# 
  3303  0399                     	;# 
  3304  0691                     	;# 
  3305  0692                     	;# 
  3306  0693                     	;# 
  3307  0694                     	;# 
  3308  0695                     	;# 
  3309  0D8E                     	;# 
  3310  0D8F                     	;# 
  3311  0D90                     	;# 
  3312  0D91                     	;# 
  3313  0D91                     	;# 
  3314  0D92                     	;# 
  3315  0D93                     	;# 
  3316  0D93                     	;# 
  3317  0D94                     	;# 
  3318  0D95                     	;# 
  3319  0D95                     	;# 
  3320  0D96                     	;# 
  3321  0D97                     	;# 
  3322  0D97                     	;# 
  3323  0D98                     	;# 
  3324  0D99                     	;# 
  3325  0D99                     	;# 
  3326  0D9A                     	;# 
  3327  0D9B                     	;# 
  3328  0D9C                     	;# 
  3329  0D9C                     	;# 
  3330  0D9D                     	;# 
  3331  0D9D                     	;# 
  3332  0D9E                     	;# 
  3333  0D9F                     	;# 
  3334  0DA0                     	;# 
  3335  0DA1                     	;# 
  3336  0DA1                     	;# 
  3337  0DA2                     	;# 
  3338  0DA3                     	;# 
  3339  0DA3                     	;# 
  3340  0DA4                     	;# 
  3341  0DA5                     	;# 
  3342  0DA5                     	;# 
  3343  0DA6                     	;# 
  3344  0DA7                     	;# 
  3345  0DA7                     	;# 
  3346  0DA8                     	;# 
  3347  0DA9                     	;# 
  3348  0DA9                     	;# 
  3349  0DAA                     	;# 
  3350  0DAB                     	;# 
  3351  0DAC                     	;# 
  3352  0DAC                     	;# 
  3353  0DAD                     	;# 
  3354  0DAD                     	;# 
  3355  0DAE                     	;# 
  3356  0DAF                     	;# 
  3357  0DB0                     	;# 
  3358  0DB1                     	;# 
  3359  0DB1                     	;# 
  3360  0DB2                     	;# 
  3361  0DB3                     	;# 
  3362  0DB3                     	;# 
  3363  0DB4                     	;# 
  3364  0DB5                     	;# 
  3365  0DB5                     	;# 
  3366  0DB6                     	;# 
  3367  0DB7                     	;# 
  3368  0DB7                     	;# 
  3369  0DB8                     	;# 
  3370  0DB9                     	;# 
  3371  0DB9                     	;# 
  3372  0DBA                     	;# 
  3373  0DBB                     	;# 
  3374  0DBC                     	;# 
  3375  0DBC                     	;# 
  3376  0DBD                     	;# 
  3377  0DBD                     	;# 
  3378  0DBE                     	;# 
  3379  0DBF                     	;# 
  3380  0DC0                     	;# 
  3381  0DC1                     	;# 
  3382  0DC1                     	;# 
  3383  0DC2                     	;# 
  3384  0DC3                     	;# 
  3385  0DC3                     	;# 
  3386  0DC4                     	;# 
  3387  0DC5                     	;# 
  3388  0DC5                     	;# 
  3389  0DC6                     	;# 
  3390  0DC7                     	;# 
  3391  0DC7                     	;# 
  3392  0DC8                     	;# 
  3393  0DC9                     	;# 
  3394  0DC9                     	;# 
  3395  0DCA                     	;# 
  3396  0DCB                     	;# 
  3397  0DCC                     	;# 
  3398  0DCC                     	;# 
  3399  0DCD                     	;# 
  3400  0DCD                     	;# 
  3401  0DCE                     	;# 
  3402  0DCF                     	;# 
  3403  0DD0                     	;# 
  3404  0E0F                     	;# 
  3405  0E10                     	;# 
  3406  0E11                     	;# 
  3407  0E12                     	;# 
  3408  0E13                     	;# 
  3409  0E14                     	;# 
  3410  0E15                     	;# 
  3411  0E16                     	;# 
  3412  0E17                     	;# 
  3413  0E90                     	;# 
  3414  0E91                     	;# 
  3415  0E92                     	;# 
  3416  0E94                     	;# 
  3417  0E95                     	;# 
  3418  0EA0                     	;# 
  3419  0EA1                     	;# 
  3420  0EA2                     	;# 
  3421  0EA3                     	;# 
  3422  0EA4                     	;# 
  3423  0EA5                     	;# 
  3424  0FE4                     	;# 
  3425  0FE5                     	;# 
  3426  0FE6                     	;# 
  3427  0FE7                     	;# 
  3428  0FE8                     	;# 
  3429  0FE8                     	;# 
  3430  0FE9                     	;# 
  3431  0FEA                     	;# 
  3432  0FEA                     	;# 
  3433  0FEB                     	;# 
  3434  0FED                     	;# 
  3435  0FEE                     	;# 
  3436  0FEE                     	;# 
  3437  0FEF                     	;# 
  3438  0FFF                     	;# 
  3439  0000                     	;# 
  3440  0001                     	;# 
  3441  0002                     	;# 
  3442  0003                     	;# 
  3443  0004                     	;# 
  3444  0005                     	;# 
  3445  0006                     	;# 
  3446  0007                     	;# 
  3447  0008                     	;# 
  3448  0009                     	;# 
  3449  000A                     	;# 
  3450  000B                     	;# 
  3451  000C                     	;# 
  3452  000E                     	;# 
  3453  0011                     	;# 
  3454  0012                     	;# 
  3455  0013                     	;# 
  3456  0015                     	;# 
  3457  0016                     	;# 
  3458  0016                     	;# 
  3459  0017                     	;# 
  3460  0018                     	;# 
  3461  0019                     	;# 
  3462  001A                     	;# 
  3463  001B                     	;# 
  3464  001C                     	;# 
  3465  008C                     	;# 
  3466  008E                     	;# 
  3467  0091                     	;# 
  3468  0092                     	;# 
  3469  0093                     	;# 
  3470  0095                     	;# 
  3471  0096                     	;# 
  3472  0097                     	;# 
  3473  0098                     	;# 
  3474  0099                     	;# 
  3475  009A                     	;# 
  3476  009B                     	;# 
  3477  009B                     	;# 
  3478  009C                     	;# 
  3479  009D                     	;# 
  3480  009E                     	;# 
  3481  009F                     	;# 
  3482  010C                     	;# 
  3483  010E                     	;# 
  3484  0111                     	;# 
  3485  0112                     	;# 
  3486  0113                     	;# 
  3487  0114                     	;# 
  3488  0115                     	;# 
  3489  0116                     	;# 
  3490  0117                     	;# 
  3491  0118                     	;# 
  3492  0119                     	;# 
  3493  018C                     	;# 
  3494  018E                     	;# 
  3495  0191                     	;# 
  3496  0191                     	;# 
  3497  0192                     	;# 
  3498  0193                     	;# 
  3499  0193                     	;# 
  3500  0194                     	;# 
  3501  0195                     	;# 
  3502  0196                     	;# 
  3503  0197                     	;# 
  3504  0199                     	;# 
  3505  019A                     	;# 
  3506  019B                     	;# 
  3507  019B                     	;# 
  3508  019C                     	;# 
  3509  019D                     	;# 
  3510  019E                     	;# 
  3511  019F                     	;# 
  3512  020C                     	;# 
  3513  020E                     	;# 
  3514  028C                     	;# 
  3515  028E                     	;# 
  3516  030C                     	;# 
  3517  030E                     	;# 
  3518  038C                     	;# 
  3519  038E                     	;# 
  3520  0391                     	;# 
  3521  0392                     	;# 
  3522  0393                     	;# 
  3523  0397                     	;# 
  3524  0398                     	;# 
  3525  0399                     	;# 
  3526  0691                     	;# 
  3527  0692                     	;# 
  3528  0693                     	;# 
  3529  0694                     	;# 
  3530  0695                     	;# 
  3531  0D8E                     	;# 
  3532  0D8F                     	;# 
  3533  0D90                     	;# 
  3534  0D91                     	;# 
  3535  0D91                     	;# 
  3536  0D92                     	;# 
  3537  0D93                     	;# 
  3538  0D93                     	;# 
  3539  0D94                     	;# 
  3540  0D95                     	;# 
  3541  0D95                     	;# 
  3542  0D96                     	;# 
  3543  0D97                     	;# 
  3544  0D97                     	;# 
  3545  0D98                     	;# 
  3546  0D99                     	;# 
  3547  0D99                     	;# 
  3548  0D9A                     	;# 
  3549  0D9B                     	;# 
  3550  0D9C                     	;# 
  3551  0D9C                     	;# 
  3552  0D9D                     	;# 
  3553  0D9D                     	;# 
  3554  0D9E                     	;# 
  3555  0D9F                     	;# 
  3556  0DA0                     	;# 
  3557  0DA1                     	;# 
  3558  0DA1                     	;# 
  3559  0DA2                     	;# 
  3560  0DA3                     	;# 
  3561  0DA3                     	;# 
  3562  0DA4                     	;# 
  3563  0DA5                     	;# 
  3564  0DA5                     	;# 
  3565  0DA6                     	;# 
  3566  0DA7                     	;# 
  3567  0DA7                     	;# 
  3568  0DA8                     	;# 
  3569  0DA9                     	;# 
  3570  0DA9                     	;# 
  3571  0DAA                     	;# 
  3572  0DAB                     	;# 
  3573  0DAC                     	;# 
  3574  0DAC                     	;# 
  3575  0DAD                     	;# 
  3576  0DAD                     	;# 
  3577  0DAE                     	;# 
  3578  0DAF                     	;# 
  3579  0DB0                     	;# 
  3580  0DB1                     	;# 
  3581  0DB1                     	;# 
  3582  0DB2                     	;# 
  3583  0DB3                     	;# 
  3584  0DB3                     	;# 
  3585  0DB4                     	;# 
  3586  0DB5                     	;# 
  3587  0DB5                     	;# 
  3588  0DB6                     	;# 
  3589  0DB7                     	;# 
  3590  0DB7                     	;# 
  3591  0DB8                     	;# 
  3592  0DB9                     	;# 
  3593  0DB9                     	;# 
  3594  0DBA                     	;# 
  3595  0DBB                     	;# 
  3596  0DBC                     	;# 
  3597  0DBC                     	;# 
  3598  0DBD                     	;# 
  3599  0DBD                     	;# 
  3600  0DBE                     	;# 
  3601  0DBF                     	;# 
  3602  0DC0                     	;# 
  3603  0DC1                     	;# 
  3604  0DC1                     	;# 
  3605  0DC2                     	;# 
  3606  0DC3                     	;# 
  3607  0DC3                     	;# 
  3608  0DC4                     	;# 
  3609  0DC5                     	;# 
  3610  0DC5                     	;# 
  3611  0DC6                     	;# 
  3612  0DC7                     	;# 
  3613  0DC7                     	;# 
  3614  0DC8                     	;# 
  3615  0DC9                     	;# 
  3616  0DC9                     	;# 
  3617  0DCA                     	;# 
  3618  0DCB                     	;# 
  3619  0DCC                     	;# 
  3620  0DCC                     	;# 
  3621  0DCD                     	;# 
  3622  0DCD                     	;# 
  3623  0DCE                     	;# 
  3624  0DCF                     	;# 
  3625  0DD0                     	;# 
  3626  0E0F                     	;# 
  3627  0E10                     	;# 
  3628  0E11                     	;# 
  3629  0E12                     	;# 
  3630  0E13                     	;# 
  3631  0E14                     	;# 
  3632  0E15                     	;# 
  3633  0E16                     	;# 
  3634  0E17                     	;# 
  3635  0E90                     	;# 
  3636  0E91                     	;# 
  3637  0E92                     	;# 
  3638  0E94                     	;# 
  3639  0E95                     	;# 
  3640  0EA0                     	;# 
  3641  0EA1                     	;# 
  3642  0EA2                     	;# 
  3643  0EA3                     	;# 
  3644  0EA4                     	;# 
  3645  0EA5                     	;# 
  3646  0FE4                     	;# 
  3647  0FE5                     	;# 
  3648  0FE6                     	;# 
  3649  0FE7                     	;# 
  3650  0FE8                     	;# 
  3651  0FE8                     	;# 
  3652  0FE9                     	;# 
  3653  0FEA                     	;# 
  3654  0FEA                     	;# 
  3655  0FEB                     	;# 
  3656  0FED                     	;# 
  3657  0FEE                     	;# 
  3658  0FEE                     	;# 
  3659  0FEF                     	;# 
  3660  0FFF                     	;# 
  3661  0000                     	;# 
  3662  0001                     	;# 
  3663  0002                     	;# 
  3664  0003                     	;# 
  3665  0004                     	;# 
  3666  0005                     	;# 
  3667  0006                     	;# 
  3668  0007                     	;# 
  3669  0008                     	;# 
  3670  0009                     	;# 
  3671  000A                     	;# 
  3672  000B                     	;# 
  3673  000C                     	;# 
  3674  000E                     	;# 
  3675  0011                     	;# 
  3676  0012                     	;# 
  3677  0013                     	;# 
  3678  0015                     	;# 
  3679  0016                     	;# 
  3680  0016                     	;# 
  3681  0017                     	;# 
  3682  0018                     	;# 
  3683  0019                     	;# 
  3684  001A                     	;# 
  3685  001B                     	;# 
  3686  001C                     	;# 
  3687  008C                     	;# 
  3688  008E                     	;# 
  3689  0091                     	;# 
  3690  0092                     	;# 
  3691  0093                     	;# 
  3692  0095                     	;# 
  3693  0096                     	;# 
  3694  0097                     	;# 
  3695  0098                     	;# 
  3696  0099                     	;# 
  3697  009A                     	;# 
  3698  009B                     	;# 
  3699  009B                     	;# 
  3700  009C                     	;# 
  3701  009D                     	;# 
  3702  009E                     	;# 
  3703  009F                     	;# 
  3704  010C                     	;# 
  3705  010E                     	;# 
  3706  0111                     	;# 
  3707  0112                     	;# 
  3708  0113                     	;# 
  3709  0114                     	;# 
  3710  0115                     	;# 
  3711  0116                     	;# 
  3712  0117                     	;# 
  3713  0118                     	;# 
  3714  0119                     	;# 
  3715  018C                     	;# 
  3716  018E                     	;# 
  3717  0191                     	;# 
  3718  0191                     	;# 
  3719  0192                     	;# 
  3720  0193                     	;# 
  3721  0193                     	;# 
  3722  0194                     	;# 
  3723  0195                     	;# 
  3724  0196                     	;# 
  3725  0197                     	;# 
  3726  0199                     	;# 
  3727  019A                     	;# 
  3728  019B                     	;# 
  3729  019B                     	;# 
  3730  019C                     	;# 
  3731  019D                     	;# 
  3732  019E                     	;# 
  3733  019F                     	;# 
  3734  020C                     	;# 
  3735  020E                     	;# 
  3736  028C                     	;# 
  3737  028E                     	;# 
  3738  030C                     	;# 
  3739  030E                     	;# 
  3740  038C                     	;# 
  3741  038E                     	;# 
  3742  0391                     	;# 
  3743  0392                     	;# 
  3744  0393                     	;# 
  3745  0397                     	;# 
  3746  0398                     	;# 
  3747  0399                     	;# 
  3748  0691                     	;# 
  3749  0692                     	;# 
  3750  0693                     	;# 
  3751  0694                     	;# 
  3752  0695                     	;# 
  3753  0D8E                     	;# 
  3754  0D8F                     	;# 
  3755  0D90                     	;# 
  3756  0D91                     	;# 
  3757  0D91                     	;# 
  3758  0D92                     	;# 
  3759  0D93                     	;# 
  3760  0D93                     	;# 
  3761  0D94                     	;# 
  3762  0D95                     	;# 
  3763  0D95                     	;# 
  3764  0D96                     	;# 
  3765  0D97                     	;# 
  3766  0D97                     	;# 
  3767  0D98                     	;# 
  3768  0D99                     	;# 
  3769  0D99                     	;# 
  3770  0D9A                     	;# 
  3771  0D9B                     	;# 
  3772  0D9C                     	;# 
  3773  0D9C                     	;# 
  3774  0D9D                     	;# 
  3775  0D9D                     	;# 
  3776  0D9E                     	;# 
  3777  0D9F                     	;# 
  3778  0DA0                     	;# 
  3779  0DA1                     	;# 
  3780  0DA1                     	;# 
  3781  0DA2                     	;# 
  3782  0DA3                     	;# 
  3783  0DA3                     	;# 
  3784  0DA4                     	;# 
  3785  0DA5                     	;# 
  3786  0DA5                     	;# 
  3787  0DA6                     	;# 
  3788  0DA7                     	;# 
  3789  0DA7                     	;# 
  3790  0DA8                     	;# 
  3791  0DA9                     	;# 
  3792  0DA9                     	;# 
  3793  0DAA                     	;# 
  3794  0DAB                     	;# 
  3795  0DAC                     	;# 
  3796  0DAC                     	;# 
  3797  0DAD                     	;# 
  3798  0DAD                     	;# 
  3799  0DAE                     	;# 
  3800  0DAF                     	;# 
  3801  0DB0                     	;# 
  3802  0DB1                     	;# 
  3803  0DB1                     	;# 
  3804  0DB2                     	;# 
  3805  0DB3                     	;# 
  3806  0DB3                     	;# 
  3807  0DB4                     	;# 
  3808  0DB5                     	;# 
  3809  0DB5                     	;# 
  3810  0DB6                     	;# 
  3811  0DB7                     	;# 
  3812  0DB7                     	;# 
  3813  0DB8                     	;# 
  3814  0DB9                     	;# 
  3815  0DB9                     	;# 
  3816  0DBA                     	;# 
  3817  0DBB                     	;# 
  3818  0DBC                     	;# 
  3819  0DBC                     	;# 
  3820  0DBD                     	;# 
  3821  0DBD                     	;# 
  3822  0DBE                     	;# 
  3823  0DBF                     	;# 
  3824  0DC0                     	;# 
  3825  0DC1                     	;# 
  3826  0DC1                     	;# 
  3827  0DC2                     	;# 
  3828  0DC3                     	;# 
  3829  0DC3                     	;# 
  3830  0DC4                     	;# 
  3831  0DC5                     	;# 
  3832  0DC5                     	;# 
  3833  0DC6                     	;# 
  3834  0DC7                     	;# 
  3835  0DC7                     	;# 
  3836  0DC8                     	;# 
  3837  0DC9                     	;# 
  3838  0DC9                     	;# 
  3839  0DCA                     	;# 
  3840  0DCB                     	;# 
  3841  0DCC                     	;# 
  3842  0DCC                     	;# 
  3843  0DCD                     	;# 
  3844  0DCD                     	;# 
  3845  0DCE                     	;# 
  3846  0DCF                     	;# 
  3847  0DD0                     	;# 
  3848  0E0F                     	;# 
  3849  0E10                     	;# 
  3850  0E11                     	;# 
  3851  0E12                     	;# 
  3852  0E13                     	;# 
  3853  0E14                     	;# 
  3854  0E15                     	;# 
  3855  0E16                     	;# 
  3856  0E17                     	;# 
  3857  0E90                     	;# 
  3858  0E91                     	;# 
  3859  0E92                     	;# 
  3860  0E94                     	;# 
  3861  0E95                     	;# 
  3862  0EA0                     	;# 
  3863  0EA1                     	;# 
  3864  0EA2                     	;# 
  3865  0EA3                     	;# 
  3866  0EA4                     	;# 
  3867  0EA5                     	;# 
  3868  0FE4                     	;# 
  3869  0FE5                     	;# 
  3870  0FE6                     	;# 
  3871  0FE7                     	;# 
  3872  0FE8                     	;# 
  3873  0FE8                     	;# 
  3874  0FE9                     	;# 
  3875  0FEA                     	;# 
  3876  0FEA                     	;# 
  3877  0FEB                     	;# 
  3878  0FED                     	;# 
  3879  0FEE                     	;# 
  3880  0FEE                     	;# 
  3881  0FEF                     	;# 
  3882  0FFF                     	;_sysData
  3883                           
  3884 ;; Function _TMR2_DefaultInterruptHandler is unused but had its address taken
  3885  0000                     
  3886                           	psect	idataBANK0
  3887  1001                     __pidataBANK0:	
  3888                           
  3889                           ;initializer for _resRs
  3890  1001  3410               	retlw	16
  3891  1002  3427               	retlw	39
  3892                           
  3893                           ;initializer for _resRc
  3894  1003  3410               	retlw	16
  3895  1004  3427               	retlw	39
  3896                           
  3897                           	psect	idataBANK1
  3898  19BD                     __pidataBANK1:	
  3899                           
  3900                           ;initializer for _bbmin
  3901  19BD  3440               	retlw	64
  3902  19BE  340D               	retlw	13
  3903  19BF  3403               	retlw	3
  3904  19C0  3400               	retlw	0
  3905                           
  3906                           ;initializer for _bbmax
  3907  19C1  34C0               	retlw	192
  3908  19C2  34F2               	retlw	242
  3909  19C3  34FC               	retlw	252
  3910  19C4  34FF               	retlw	255
  3911                           
  3912                           ;initializer for _pidU
  3913  19C5  3414               	retlw	20
  3914  19C6  3400               	retlw	0
  3915                           
  3916                           ;initializer for _pidpwm2_U
  3917  19C7  3414               	retlw	20
  3918  19C8  3400               	retlw	0
  3919                           
  3920                           ;initializer for _pwm1DutyForIdrv
  3921  19C9  3405               	retlw	5
  3922  19CA  3400               	retlw	0
  3923                           
  3924                           ;initializer for _pwm2DutyForVout
  3925  19CB  3405               	retlw	5
  3926  19CC  3400               	retlw	0
  3927                           
  3928                           	psect	stringtext1
  3929  181E                     __pstringtext1:	
  3930  181E                     _HexTable:	
  3931  181E  3430               	retlw	48
  3932  181F  3431               	retlw	49
  3933  1820  3432               	retlw	50
  3934  1821  3433               	retlw	51
  3935  1822  3434               	retlw	52
  3936  1823  3435               	retlw	53
  3937  1824  3436               	retlw	54
  3938  1825  3437               	retlw	55
  3939  1826  3438               	retlw	56
  3940  1827  3439               	retlw	57
  3941  1828  3441               	retlw	65
  3942  1829  3442               	retlw	66
  3943  182A  3443               	retlw	67
  3944  182B  3444               	retlw	68
  3945  182C  3445               	retlw	69
  3946  182D  3446               	retlw	70
  3947  182E  3400               	retlw	0
  3948  182F                     __end_of_HexTable:	
  3949  0013                     _PIR3bits	set	19
  3950  001C                     _T2CONbits	set	28
  3951  0011                     _PIR1bits	set	17
  3952  001A                     _TMR2	set	26
  3953  001B                     _PR2	set	27
  3954  001C                     _T2CON	set	28
  3955  000B                     _INTCONbits	set	11
  3956  005F                     _GIE	set	95
  3957  0095                     _OPTION_REGbits	set	149
  3958  008E                     _TRISC	set	142
  3959  008C                     _TRISA	set	140
  3960  009D                     _ADCON0bits	set	157
  3961  009C                     _ADRESH	set	156
  3962  009B                     _ADRESL	set	155
  3963  009F                     _ADCON2	set	159
  3964  009E                     _ADCON1	set	158
  3965  009D                     _ADCON0	set	157
  3966  0097                     _WDTCON	set	151
  3967  0093                     _PIE3bits	set	147
  3968  0091                     _PIE1bits	set	145
  3969  010E                     _LATC	set	270
  3970  010C                     _LATA	set	268
  3971  0117                     _FVRCONbits	set	279
  3972  0117                     _FVRCON	set	279
  3973  019E                     _TXSTAbits	set	414
  3974  018C                     _ANSELA	set	396
  3975  018E                     _ANSELC	set	398
  3976  019A                     _TXREG	set	410
  3977  019C                     _SPBRGH	set	412
  3978  019B                     _SPBRGL	set	411
  3979  019E                     _TXSTA	set	414
  3980  019D                     _RCSTA	set	413
  3981  019F                     _BAUDCON	set	415
  3982  0199                     _RCREG	set	409
  3983  019D                     _RCSTAbits	set	413
  3984  0196                     _PMCON2	set	406
  3985  0193                     _PMDATL	set	403
  3986  0194                     _PMDATH	set	404
  3987  0195                     _PMCON1bits	set	405
  3988  0192                     _PMADRH	set	402
  3989  0191                     _PMADRL	set	401
  3990  020E                     _WPUC	set	526
  3991  020C                     _WPUA	set	524
  3992  028E                     _ODCONC	set	654
  3993  028C                     _ODCONA	set	652
  3994  0D9D                     _PWM1INTFbits	set	3485
  3995  0D9F                     _PWM1LDCONbits	set	3487
  3996  0D9B                     _PWM1CONbits	set	3483
  3997  0D9B                     _PWM1CON	set	3483
  3998  0D99                     _PWM1TMRL	set	3481
  3999  0D9A                     _PWM1TMRH	set	3482
  4000  0D97                     _PWM1OFL	set	3479
  4001  0D98                     _PWM1OFH	set	3480
  4002  0D95                     _PWM1PRL	set	3477
  4003  0D96                     _PWM1PRH	set	3478
  4004  0D93                     _PWM1DCL	set	3475
  4005  0D94                     _PWM1DCH	set	3476
  4006  0D91                     _PWM1PHL	set	3473
  4007  0D92                     _PWM1PHH	set	3474
  4008  0DA0                     _PWM1OFCON	set	3488
  4009  0D9F                     _PWM1LDCON	set	3487
  4010  0D9E                     _PWM1CLKCON	set	3486
  4011  0D9D                     _PWM1INTF	set	3485
  4012  0D9C                     _PWM1INTE	set	3484
  4013  0DAD                     _PWM2INTFbits	set	3501
  4014  0DAF                     _PWM2LDCONbits	set	3503
  4015  0DAB                     _PWM2CONbits	set	3499
  4016  0DAB                     _PWM2CON	set	3499
  4017  0DA9                     _PWM2TMRL	set	3497
  4018  0DAA                     _PWM2TMRH	set	3498
  4019  0DA7                     _PWM2OFL	set	3495
  4020  0DA8                     _PWM2OFH	set	3496
  4021  0DA5                     _PWM2PRL	set	3493
  4022  0DA6                     _PWM2PRH	set	3494
  4023  0DA3                     _PWM2DCL	set	3491
  4024  0DA4                     _PWM2DCH	set	3492
  4025  0DA1                     _PWM2PHL	set	3489
  4026  0DA2                     _PWM2PHH	set	3490
  4027  0DB0                     _PWM2OFCON	set	3504
  4028  0DAF                     _PWM2LDCON	set	3503
  4029  0DAE                     _PWM2CLKCON	set	3502
  4030  0DAD                     _PWM2INTF	set	3501
  4031  0DAC                     _PWM2INTE	set	3500
  4032  0E15                     _RXPPSbits	set	3605
  4033  0E0F                     _PPSLOCKbits	set	3599
  4034  0E0F                     _PPSLOCK	set	3599
  4035  0EA5                     _RC5PPSbits	set	3749
  4036  0E95                     _RA5PPSbits	set	3733
  4037  0E94                     _RA4PPSbits	set	3732
  4038  182F                     STR_1:	
  4039  182F  3456               	retlw	86	;'V'
  4040  1830  3445               	retlw	69	;'E'
  4041  1831  3452               	retlw	82	;'R'
  4042  1832  3431               	retlw	49	;'1'
  4043  1833  342E               	retlw	46	;'.'
  4044  1834  3430               	retlw	48	;'0'
  4045  1835  3430               	retlw	48	;'0'
  4046  1836  340D               	retlw	13
  4047  1837  340A               	retlw	10
  4048  1838  3400               	retlw	0
  4049                           
  4050                           	psect	stringtext2
  4051  0000                     __pstringtext2:	
  4052                           
  4053                           	psect	cinit
  4054  0894                     start_initialization:	
  4055                           ; #config settings
  4056                           
  4057  0894                     __initialization:		;BIGRAM
  4058                           
  4059                           ; Initialize objects allocated to BANK0
  4060  0894  3001               	movlw	low __pidataBANK0
  4061  0895  0084               	movwf	4
  4062  0896  3090               	movlw	(high __pidataBANK0)| (0+128)
  4063  0897  0085               	movwf	5
  4064  0898  306C               	movlw	low __pdataBANK0
  4065  0899  0086               	movwf	6
  4066  089A  3000               	movlw	high __pdataBANK0
  4067  089B  0087               	movwf	7
  4068  089C  3000               	movlw	0
  4069  089D  00FF               	movwf	btemp+1
  4070  089E  3004               	movlw	4
  4071  089F  318F  27F4  3188   	fcall	init_ram
  4072                           
  4073                           ; Initialize objects allocated to BANK1
  4074  08A2  30BD               	movlw	low __pidataBANK1
  4075  08A3  0084               	movwf	4
  4076  08A4  3099               	movlw	(high __pidataBANK1)| (0+128)
  4077  08A5  0085               	movwf	5
  4078  08A6  30DA               	movlw	low __pdataBANK1
  4079  08A7  0086               	movwf	6
  4080  08A8  3000               	movlw	high __pdataBANK1
  4081  08A9  0087               	movwf	7
  4082  08AA  3000               	movlw	0
  4083  08AB  00FF               	movwf	btemp+1
  4084  08AC  3010               	movlw	16
  4085  08AD  318F  27F4  3188   	fcall	init_ram
  4086                           
  4087                           ; Clear objects allocated to BIGRAM
  4088  08B0  305C               	movlw	low (0+9052)
  4089  08B1  0084               	movwf	4
  4090  08B2  3023               	movlw	high (0+9052)
  4091  08B3  0085               	movwf	5
  4092  08B4  3084               	movlw	132
  4093  08B5  00FE               	movwf	btemp
  4094  08B6  3000               	movlw	0
  4095  08B7  00FF               	movwf	btemp+1
  4096  08B8  3199  21A4  3188   	fcall	clear_ram0
  4097                           
  4098                           ; Clear objects allocated to COMMON
  4099  08BB  01F8               	clrf	__pbssCOMMON& (0+127)
  4100  08BC  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  4101  08BD  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  4102                           
  4103                           ; Clear objects allocated to BANK0
  4104  08BE  305C               	movlw	low __pbssBANK0
  4105  08BF  0084               	movwf	4
  4106  08C0  3000               	movlw	high __pbssBANK0
  4107  08C1  0085               	movwf	5
  4108  08C2  3010               	movlw	16
  4109  08C3  00FE               	movwf	btemp
  4110  08C4  3000               	movlw	0
  4111  08C5  00FF               	movwf	btemp+1
  4112  08C6  3199  21A4  3188   	fcall	clear_ram0
  4113                           
  4114                           ; Clear objects allocated to BANK1
  4115  08C9  30A0               	movlw	low __pbssBANK1
  4116  08CA  0084               	movwf	4
  4117  08CB  3000               	movlw	high __pbssBANK1
  4118  08CC  0085               	movwf	5
  4119  08CD  303A               	movlw	58
  4120  08CE  00FE               	movwf	btemp
  4121  08CF  3000               	movlw	0
  4122  08D0  00FF               	movwf	btemp+1
  4123  08D1  3199  21A4  3188   	fcall	clear_ram0
  4124                           
  4125                           ; Clear objects allocated to BANK2
  4126  08D4  3020               	movlw	low __pbssBANK2
  4127  08D5  0084               	movwf	4
  4128  08D6  3001               	movlw	high __pbssBANK2
  4129  08D7  0085               	movwf	5
  4130  08D8  304C               	movlw	76
  4131  08D9  00FE               	movwf	btemp
  4132  08DA  3000               	movlw	0
  4133  08DB  00FF               	movwf	btemp+1
  4134  08DC  3199  21A4  3188   	fcall	clear_ram0
  4135                           
  4136                           ; Clear objects allocated to BANK3
  4137  08DF  30A0               	movlw	low __pbssBANK3
  4138  08E0  0084               	movwf	4
  4139  08E1  3001               	movlw	high __pbssBANK3
  4140  08E2  0085               	movwf	5
  4141  08E3  303C               	movlw	60
  4142  08E4  00FE               	movwf	btemp
  4143  08E5  3000               	movlw	0
  4144  08E6  00FF               	movwf	btemp+1
  4145  08E7  3199  21A4         	fcall	clear_ram0
  4146  08E9                     end_of_initialization:	
  4147                           ;End of C runtime variable initialization code
  4148                           
  4149  08E9                     __end_of__initialization:	
  4150  08E9  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4151  08EA  0020               	movlb	0
  4152  08EB  318D  2D0A         	ljmp	_main	;jump to C main() function
  4153                           
  4154                           	psect	bssCOMMON
  4155  0078                     __pbssCOMMON:	
  4156  0078                     _subTickerX:	
  4157  0078                     	ds	1
  4158  0079                     _eusartRxCount:	
  4159  0079                     	ds	1
  4160  007A                     _eusartRxIdleTime_ms:	
  4161  007A                     	ds	1
  4162                           
  4163                           	psect	bssBANK0
  4164  005C                     __pbssBANK0:	
  4165  005C                     _bbtu:	
  4166  005C                     	ds	2
  4167  005E                     _rsLoAvg:	
  4168  005E                     	ds	2
  4169  0060                     _voExpectAdcValue:	
  4170  0060                     	ds	2
  4171  0062                     _PidKp:	
  4172  0062                     	ds	2
  4173  0064                     _rtAdcValueRcLo:	
  4174  0064                     	ds	2
  4175  0066                     _rtAdcValueRsLo:	
  4176  0066                     	ds	2
  4177  0068                     _pidTestNum:	
  4178  0068                     	ds	1
  4179  0069                     _pidBbSm:	
  4180  0069                     	ds	1
  4181  006A                     _subTickerX_1s:	
  4182  006A                     	ds	1
  4183  006B                     _Event:	
  4184  006B                     	ds	1
  4185                           
  4186                           	psect	dataBANK0
  4187  006C                     __pdataBANK0:	
  4188  006C                     _resRs:	
  4189  006C                     	ds	2
  4190  006E                     _resRc:	
  4191  006E                     	ds	2
  4192                           
  4193                           	psect	bssBANK1
  4194  00A0                     __pbssBANK1:	
  4195  00A0                     _err:	
  4196  00A0                     	ds	12
  4197  00AC                     _rsLoAvgBuf:	
  4198  00AC                     	ds	12
  4199  00B8                     _bbku:	
  4200  00B8                     	ds	4
  4201  00BC                     _bbu:	
  4202  00BC                     	ds	4
  4203  00C0                     _bbta:	
  4204  00C0                     	ds	4
  4205  00C4                     _pwm2Ei:	
  4206  00C4                     	ds	2
  4207  00C6                     _bbt1:	
  4208  00C6                     	ds	2
  4209  00C8                     _bbt0:	
  4210  00C8                     	ds	2
  4211  00CA                     _voExpectMv:	
  4212  00CA                     	ds	2
  4213  00CC                     _PidTd:	
  4214  00CC                     	ds	2
  4215  00CE                     _PidTi:	
  4216  00CE                     	ds	2
  4217  00D0                     _rtAdcValueVoFb:	
  4218  00D0                     	ds	2
  4219  00D2                     _rtAdcValueRcHi:	
  4220  00D2                     	ds	2
  4221  00D4                     _rtAdcValueRsHi:	
  4222  00D4                     	ds	2
  4223  00D6                     _globalTicker:	
  4224  00D6                     	ds	2
  4225  00D8                     _TMR2_InterruptHandler:	
  4226  00D8                     	ds	2
  4227                           
  4228                           	psect	dataBANK1
  4229  00DA                     __pdataBANK1:	
  4230  00DA                     _bbmin:	
  4231  00DA                     	ds	4
  4232  00DE                     _bbmax:	
  4233  00DE                     	ds	4
  4234  00E2                     _pidU:	
  4235  00E2                     	ds	2
  4236  00E4                     _pidpwm2_U:	
  4237  00E4                     	ds	2
  4238  00E6                     _pwm1DutyForIdrv:	
  4239  00E6                     	ds	2
  4240  00E8                     _pwm2DutyForVout:	
  4241  00E8                     	ds	2
  4242                           
  4243                           	psect	bssBANK2
  4244  0120                     __pbssBANK2:	
  4245  0120                     _eusartRxBuffer:	
  4246  0120                     	ds	60
  4247  015C                     _str:	
  4248  015C                     	ds	16
  4249                           
  4250                           	psect	bssBANK3
  4251  01A0                     __pbssBANK3:	
  4252  01A0                     _modbusBuf:	
  4253  01A0                     	ds	60
  4254                           
  4255                           	psect	inittext
  4256  0FF4                     init_ram:	
  4257  0FF4  00FE               	movwf	126
  4258  0FF5                     initloop:	
  4259  0FF5  0012               	moviw fsr0++
  4260  0FF6  001E               	movwi fsr1++
  4261  0FF7  3001               	movlw	1
  4262  0FF8  02FE               	subwf	126,f
  4263  0FF9  3000               	movlw	0
  4264  0FFA  3BFF               	subwfb	127,f
  4265  0FFB  087F               	movf	127,w
  4266  0FFC  047E               	iorwf	126,w
  4267  0FFD  1903               	btfsc	3,2
  4268  0FFE  3400               	retlw	0
  4269  0FFF  2FF5               	goto	initloop
  4270                           
  4271                           	psect	clrtext
  4272  19A4                     clear_ram0:	
  4273                           ;	Called with FSR0 containing the base address, and
  4274                           ;	btemp/btemp+1 has the size to clear
  4275                           
  4276  19A4  0064               	clrwdt	;clear the watchdog before getting into this loop
  4277  19A5                     clrloop0:	
  4278  19A5  0180               	clrf	0	;clear RAM location pointed to by FSR
  4279  19A6  3101               	addfsr 0,1
  4280  19A7  3001               	movlw	1
  4281  19A8  02FE               	subwf	126,f
  4282  19A9  3000               	movlw	0
  4283  19AA  3BFF               	subwfb	127,f
  4284  19AB  087F               	movf	127,w
  4285  19AC  047E               	iorwf	126,w
  4286  19AD  1903               	btfsc	3,2
  4287  19AE  3400               	retlw	0	;all done for this memory range, return
  4288  19AF  29A5               	goto	clrloop0	;have we reached the end yet?
  4289                           
  4290                           	psect	cstackBANK1
  4291  00EA                     __pcstackBANK1:	
  4292  00EA                     ??_main:	
  4293                           
  4294                           ; 1 bytes @ 0x0
  4295  00EA                     	ds	2
  4296                           
  4297                           	psect	cstackCOMMON
  4298  0070                     __pcstackCOMMON:	
  4299  0070                     ?_TMR2_StartTimer:	
  4300  0070                     ?_PIN_MANAGER_Initialize:	
  4301                           ; 1 bytes @ 0x0
  4302                           
  4303  0070                     ?_OSCILLATOR_Initialize:	
  4304                           ; 1 bytes @ 0x0
  4305                           
  4306  0070                     ?_WDT_Initialize:	
  4307                           ; 1 bytes @ 0x0
  4308                           
  4309  0070                     ?_ADC1_Initialize:	
  4310                           ; 1 bytes @ 0x0
  4311                           
  4312  0070                     ?_EUSART_Initialize:	
  4313                           ; 1 bytes @ 0x0
  4314                           
  4315  0070                     ?_PWM2_Initialize:	
  4316                           ; 1 bytes @ 0x0
  4317                           
  4318  0070                     ?_PWM1_Initialize:	
  4319                           ; 1 bytes @ 0x0
  4320                           
  4321  0070                     ?_TMR2_Initialize:	
  4322                           ; 1 bytes @ 0x0
  4323                           
  4324  0070                     ?_INTERRUPT_InterruptManager:	
  4325                           ; 1 bytes @ 0x0
  4326                           
  4327  0070                     ??_INTERRUPT_InterruptManager:	
  4328                           ; 1 bytes @ 0x0
  4329                           
  4330  0070                     ?_FVR_Initialize:	
  4331                           ; 1 bytes @ 0x0
  4332                           
  4333  0070                     ?_SYSTEM_Initialize:	
  4334                           ; 1 bytes @ 0x0
  4335                           
  4336  0070                     ?_uart_send_str:	
  4337                           ; 1 bytes @ 0x0
  4338                           
  4339  0070                     ?_uart_received_start:	
  4340                           ; 1 bytes @ 0x0
  4341                           
  4342  0070                     ?_fvr_set_gain:	
  4343                           ; 1 bytes @ 0x0
  4344                           
  4345  0070                     ?_adc_init:	
  4346                           ; 1 bytes @ 0x0
  4347                           
  4348  0070                     ?_pid_pwm1_idrv_b_b:	
  4349                           ; 1 bytes @ 0x0
  4350                           
  4351  0070                     ?_pid_pwm1_idrv_run:	
  4352                           ; 1 bytes @ 0x0
  4353                           
  4354  0070                     ?_pid_pwm2_vout_run:	
  4355                           ; 1 bytes @ 0x0
  4356                           
  4357  0070                     ?_my_flash_read_system_erase:	
  4358                           ; 1 bytes @ 0x0
  4359                           
  4360  0070                     ?_sys_data_save:	
  4361                           ; 1 bytes @ 0x0
  4362                           
  4363  0070                     ?_modbus_response_write_single_register:	
  4364                           ; 1 bytes @ 0x0
  4365                           
  4366  0070                     ?_modbus_response_write_mult_register:	
  4367                           ; 1 bytes @ 0x0
  4368                           
  4369  0070                     ?_modbus_response_command:	
  4370                           ; 1 bytes @ 0x0
  4371                           
  4372  0070                     ?_main:	
  4373                           ; 1 bytes @ 0x0
  4374                           
  4375  0070                     ?_sys_data_init:	
  4376                           ; 1 bytes @ 0x0
  4377                           
  4378                           
  4379                           ; 2 bytes @ 0x0
  4380  0070                     	ds	2
  4381  0072                     INTERRUPT_InterruptManager@t8:	
  4382                           
  4383                           ; 1 bytes @ 0x2
  4384  0072                     	ds	1
  4385  0073                     ?_FLASH_EraseBlock:	
  4386  0073                     ?_TMR2_SetInterruptHandler:	
  4387                           ; 1 bytes @ 0x3
  4388                           
  4389  0073                     ??_TMR2_StartTimer:	
  4390                           ; 1 bytes @ 0x3
  4391                           
  4392  0073                     ??_PIN_MANAGER_Initialize:	
  4393                           ; 1 bytes @ 0x3
  4394                           
  4395  0073                     ??_OSCILLATOR_Initialize:	
  4396                           ; 1 bytes @ 0x3
  4397                           
  4398  0073                     ??_WDT_Initialize:	
  4399                           ; 1 bytes @ 0x3
  4400                           
  4401  0073                     ??_ADC1_Initialize:	
  4402                           ; 1 bytes @ 0x3
  4403                           
  4404  0073                     ??_EUSART_Initialize:	
  4405                           ; 1 bytes @ 0x3
  4406                           
  4407  0073                     ?_m_mem_cpy:	
  4408                           ; 1 bytes @ 0x3
  4409                           
  4410  0073                     ??_m_mem_cpy_len:	
  4411                           ; 1 bytes @ 0x3
  4412                           
  4413  0073                     ??_PWM2_Initialize:	
  4414                           ; 1 bytes @ 0x3
  4415                           
  4416  0073                     ??_PWM1_Initialize:	
  4417                           ; 1 bytes @ 0x3
  4418                           
  4419  0073                     ??_FVR_Initialize:	
  4420                           ; 1 bytes @ 0x3
  4421                           
  4422  0073                     ??_uart_send_str:	
  4423                           ; 1 bytes @ 0x3
  4424                           
  4425  0073                     ?_uart_send_len:	
  4426                           ; 1 bytes @ 0x3
  4427                           
  4428  0073                     ??_uart_received_start:	
  4429                           ; 1 bytes @ 0x3
  4430                           
  4431  0073                     ??_fvr_set_gain:	
  4432                           ; 1 bytes @ 0x3
  4433                           
  4434  0073                     ??_adc_init:	
  4435                           ; 1 bytes @ 0x3
  4436                           
  4437  0073                     ?_my_flash_system_read:	
  4438                           ; 1 bytes @ 0x3
  4439                           
  4440  0073                     ??___lmul:	
  4441                           ; 1 bytes @ 0x3
  4442                           
  4443  0073                     ??___lldiv:	
  4444                           ; 1 bytes @ 0x3
  4445                           
  4446  0073                     ?_get_idrv_pwm1_duty:	
  4447                           ; 1 bytes @ 0x3
  4448                           
  4449  0073                     ?_get_vout_pwm2_duty:	
  4450                           ; 2 bytes @ 0x3
  4451                           
  4452  0073                     ?_my_flash_system_write:	
  4453                           ; 2 bytes @ 0x3
  4454                           
  4455  0073                     ?_getRegisterVal:	
  4456                           ; 2 bytes @ 0x3
  4457                           
  4458  0073                     ?_crc_sum:	
  4459                           ; 2 bytes @ 0x3
  4460                           
  4461  0073                     ?___wmul:	
  4462                           ; 2 bytes @ 0x3
  4463                           
  4464  0073                     ?___awdiv:	
  4465                           ; 2 bytes @ 0x3
  4466                           
  4467  0073                     PIN_MANAGER_Initialize@state:	
  4468                           ; 2 bytes @ 0x3
  4469                           
  4470  0073                     uart_send_len@len:	
  4471                           ; 1 bytes @ 0x3
  4472                           
  4473  0073                     FLASH_EraseBlock@startAddr:	
  4474                           ; 1 bytes @ 0x3
  4475                           
  4476  0073                     TMR2_SetInterruptHandler@InterruptHandler:	
  4477                           ; 2 bytes @ 0x3
  4478                           
  4479  0073                     my_flash_system_read@buf:	
  4480                           ; 2 bytes @ 0x3
  4481                           
  4482  0073                     my_flash_system_write@buf:	
  4483                           ; 2 bytes @ 0x3
  4484                           
  4485  0073                     getRegisterVal@addr:	
  4486                           ; 2 bytes @ 0x3
  4487                           
  4488  0073                     m_mem_cpy@s:	
  4489                           ; 2 bytes @ 0x3
  4490                           
  4491  0073                     crc_sum@buf:	
  4492                           ; 2 bytes @ 0x3
  4493                           
  4494  0073                     ___wmul@multiplier:	
  4495                           ; 2 bytes @ 0x3
  4496                           
  4497  0073                     ___awdiv@divisor:	
  4498                           ; 2 bytes @ 0x3
  4499                           
  4500  0073                     ___lmul@product:	
  4501                           ; 2 bytes @ 0x3
  4502                           
  4503                           
  4504                           ; 4 bytes @ 0x3
  4505  0073                     	ds	1
  4506  0074                     ??_uart_send_len:	
  4507  0074                     ??_calc_rs_lo_avg:	
  4508                           ; 1 bytes @ 0x4
  4509                           
  4510  0074                     uart_send_str@str:	
  4511                           ; 1 bytes @ 0x4
  4512                           
  4513  0074                     fvr_set_gain@t8:	
  4514                           ; 1 bytes @ 0x4
  4515                           
  4516  0074                     adc_init@ch:	
  4517                           ; 1 bytes @ 0x4
  4518                           
  4519                           
  4520                           ; 1 bytes @ 0x4
  4521  0074                     	ds	1
  4522  0075                     ??_FLASH_EraseBlock:	
  4523  0075                     ??_TMR2_SetInterruptHandler:	
  4524                           ; 1 bytes @ 0x5
  4525                           
  4526  0075                     ??_m_mem_cpy:	
  4527                           ; 1 bytes @ 0x5
  4528                           
  4529  0075                     ??_TMR2_Initialize:	
  4530                           ; 1 bytes @ 0x5
  4531                           
  4532  0075                     ??_SYSTEM_Initialize:	
  4533                           ; 1 bytes @ 0x5
  4534                           
  4535  0075                     ??_get_idrv_pwm1_duty:	
  4536                           ; 1 bytes @ 0x5
  4537                           
  4538  0075                     ??_get_vout_pwm2_duty:	
  4539                           ; 1 bytes @ 0x5
  4540                           
  4541  0075                     FLASH_EraseBlock@GIEBitValue:	
  4542                           ; 1 bytes @ 0x5
  4543                           
  4544  0075                     uart_send_len@xlen:	
  4545                           ; 1 bytes @ 0x5
  4546                           
  4547  0075                     fvr_set_gain@g:	
  4548                           ; 1 bytes @ 0x5
  4549                           
  4550  0075                     getRegisterVal@tempData:	
  4551                           ; 1 bytes @ 0x5
  4552                           
  4553  0075                     my_flash_system_read@len:	
  4554                           ; 1 bytes @ 0x5
  4555                           
  4556  0075                     my_flash_system_write@len:	
  4557                           ; 2 bytes @ 0x5
  4558                           
  4559  0075                     crc_sum@len:	
  4560                           ; 2 bytes @ 0x5
  4561                           
  4562  0075                     ___wmul@multiplicand:	
  4563                           ; 2 bytes @ 0x5
  4564                           
  4565  0075                     ___awdiv@dividend:	
  4566                           ; 2 bytes @ 0x5
  4567                           
  4568                           
  4569                           ; 2 bytes @ 0x5
  4570  0075                     	ds	1
  4571  0076                     ??_my_flash_read_system_erase:	
  4572  0076                     ?_adc_sample:	
  4573                           ; 1 bytes @ 0x6
  4574                           
  4575  0076                     uart_send_len@i:	
  4576                           ; 2 bytes @ 0x6
  4577                           
  4578  0076                     adc_sample@gfvr:	
  4579                           ; 1 bytes @ 0x6
  4580                           
  4581  0076                     m_mem_cpy@d:	
  4582                           ; 1 bytes @ 0x6
  4583                           
  4584                           
  4585                           ; 1 bytes @ 0x6
  4586  0076                     	ds	1
  4587  0077                     ??_set_idrv_pwm1_duty:	
  4588  0077                     ??_set_vout_pwm2_duty:	
  4589                           ; 1 bytes @ 0x7
  4590                           
  4591  0077                     ??_sys_data_save:	
  4592                           ; 1 bytes @ 0x7
  4593                           
  4594  0077                     ??___wmul:	
  4595                           ; 1 bytes @ 0x7
  4596                           
  4597  0077                     ??___aldiv:	
  4598                           ; 1 bytes @ 0x7
  4599                           
  4600  0077                     ??___awdiv:	
  4601                           ; 1 bytes @ 0x7
  4602                           
  4603  0077                     ??___lwdiv:	
  4604                           ; 1 bytes @ 0x7
  4605                           
  4606  0077                     uart_send_len@buf:	
  4607                           ; 1 bytes @ 0x7
  4608                           
  4609  0077                     adc_sample@num:	
  4610                           ; 1 bytes @ 0x7
  4611                           
  4612                           
  4613                           ; 1 bytes @ 0x7
  4614  0077                     	ds	1
  4615                           
  4616                           	psect	cstackBANK0
  4617  0020                     __pcstackBANK0:	
  4618  0020                     ?_m_mem_cpy_len:	
  4619  0020                     ??_adc_sample:	
  4620                           ; 1 bytes @ 0x0
  4621                           
  4622  0020                     ??_my_flash_system_read:	
  4623                           ; 1 bytes @ 0x0
  4624                           
  4625  0020                     ??_my_flash_system_write:	
  4626                           ; 1 bytes @ 0x0
  4627                           
  4628  0020                     ??_getRegisterVal:	
  4629                           ; 1 bytes @ 0x0
  4630                           
  4631  0020                     ??_crc_sum:	
  4632                           ; 1 bytes @ 0x0
  4633                           
  4634  0020                     ?___lmul:	
  4635                           ; 1 bytes @ 0x0
  4636                           
  4637  0020                     ?___lldiv:	
  4638                           ; 4 bytes @ 0x0
  4639                           
  4640  0020                     ___awdiv@counter:	
  4641                           ; 4 bytes @ 0x0
  4642                           
  4643  0020                     get_idrv_pwm1_duty@t16:	
  4644                           ; 1 bytes @ 0x0
  4645                           
  4646  0020                     get_vout_pwm2_duty@t16:	
  4647                           ; 2 bytes @ 0x0
  4648                           
  4649  0020                     m_mem_cpy_len@d:	
  4650                           ; 2 bytes @ 0x0
  4651                           
  4652  0020                     ___wmul@product:	
  4653                           ; 2 bytes @ 0x0
  4654                           
  4655  0020                     ___lmul@multiplier:	
  4656                           ; 2 bytes @ 0x0
  4657                           
  4658  0020                     ___lldiv@divisor:	
  4659                           ; 4 bytes @ 0x0
  4660                           
  4661                           
  4662                           ; 4 bytes @ 0x0
  4663  0020                     	ds	1
  4664  0021                     ___awdiv@sign:	
  4665                           
  4666                           ; 1 bytes @ 0x1
  4667  0021                     	ds	1
  4668  0022                     ?_set_idrv_pwm1_duty:	
  4669  0022                     ?_set_vout_pwm2_duty:	
  4670                           ; 1 bytes @ 0x2
  4671                           
  4672  0022                     ?___lwdiv:	
  4673                           ; 1 bytes @ 0x2
  4674                           
  4675  0022                     my_flash_system_read@GIEBitValue:	
  4676                           ; 2 bytes @ 0x2
  4677                           
  4678  0022                     my_flash_system_write@GIEBitValue:	
  4679                           ; 1 bytes @ 0x2
  4680                           
  4681  0022                     set_idrv_pwm1_duty@duty:	
  4682                           ; 1 bytes @ 0x2
  4683                           
  4684  0022                     set_vout_pwm2_duty@duty:	
  4685                           ; 2 bytes @ 0x2
  4686                           
  4687  0022                     m_mem_cpy_len@s:	
  4688                           ; 2 bytes @ 0x2
  4689                           
  4690  0022                     crc_sum@j:	
  4691                           ; 2 bytes @ 0x2
  4692                           
  4693  0022                     ___awdiv@quotient:	
  4694                           ; 2 bytes @ 0x2
  4695                           
  4696  0022                     ___lwdiv@divisor:	
  4697                           ; 2 bytes @ 0x2
  4698                           
  4699                           
  4700                           ; 2 bytes @ 0x2
  4701  0022                     	ds	1
  4702  0023                     adc_sample@ch:	
  4703  0023                     my_flash_system_read@flashAddr:	
  4704                           ; 1 bytes @ 0x3
  4705                           
  4706  0023                     my_flash_system_write@j:	
  4707                           ; 2 bytes @ 0x3
  4708                           
  4709                           
  4710                           ; 2 bytes @ 0x3
  4711  0023                     	ds	1
  4712  0024                     set_idrv_pwm1_duty@t16:	
  4713  0024                     set_vout_pwm2_duty@t16:	
  4714                           ; 2 bytes @ 0x4
  4715                           
  4716  0024                     adc_sample@i:	
  4717                           ; 2 bytes @ 0x4
  4718                           
  4719  0024                     getRegisterVal@t16:	
  4720                           ; 2 bytes @ 0x4
  4721                           
  4722  0024                     m_mem_cpy_len@len:	
  4723                           ; 2 bytes @ 0x4
  4724                           
  4725  0024                     crc_sum@i:	
  4726                           ; 2 bytes @ 0x4
  4727                           
  4728  0024                     ___lwdiv@dividend:	
  4729                           ; 2 bytes @ 0x4
  4730                           
  4731  0024                     ___lmul@multiplicand:	
  4732                           ; 2 bytes @ 0x4
  4733                           
  4734  0024                     ___lldiv@dividend:	
  4735                           ; 4 bytes @ 0x4
  4736                           
  4737                           
  4738                           ; 4 bytes @ 0x4
  4739  0024                     	ds	1
  4740  0025                     my_flash_system_read@i:	
  4741  0025                     my_flash_system_write@blocNum:	
  4742                           ; 2 bytes @ 0x5
  4743                           
  4744                           
  4745                           ; 2 bytes @ 0x5
  4746  0025                     	ds	1
  4747  0026                     getRegisterVal@tempAddr:	
  4748  0026                     adc_sample@ret:	
  4749                           ; 1 bytes @ 0x6
  4750                           
  4751  0026                     crc_sum@crc:	
  4752                           ; 2 bytes @ 0x6
  4753                           
  4754  0026                     ___lwdiv@quotient:	
  4755                           ; 2 bytes @ 0x6
  4756                           
  4757                           
  4758                           ; 2 bytes @ 0x6
  4759  0026                     	ds	1
  4760  0027                     my_flash_system_write@loc:	
  4761                           
  4762                           ; 2 bytes @ 0x7
  4763  0027                     	ds	1
  4764  0028                     ?_crc_append:	
  4765  0028                     ?_crc_verify:	
  4766                           ; 1 bytes @ 0x8
  4767                           
  4768  0028                     ?___aldiv:	
  4769                           ; 1 bytes @ 0x8
  4770                           
  4771  0028                     ___lwdiv@counter:	
  4772                           ; 4 bytes @ 0x8
  4773                           
  4774  0028                     adc_sample@t16:	
  4775                           ; 1 bytes @ 0x8
  4776                           
  4777  0028                     crc_verify@message:	
  4778                           ; 2 bytes @ 0x8
  4779                           
  4780  0028                     crc_append@message:	
  4781                           ; 2 bytes @ 0x8
  4782                           
  4783  0028                     ___aldiv@divisor:	
  4784                           ; 2 bytes @ 0x8
  4785                           
  4786  0028                     ___lldiv@quotient:	
  4787                           ; 4 bytes @ 0x8
  4788                           
  4789                           
  4790                           ; 4 bytes @ 0x8
  4791  0028                     	ds	1
  4792  0029                     ??_pid_pwm2_vout_run:	
  4793  0029                     my_flash_system_write@flashAddr:	
  4794                           ; 1 bytes @ 0x9
  4795                           
  4796                           
  4797                           ; 2 bytes @ 0x9
  4798  0029                     	ds	1
  4799  002A                     crc_verify@n:	
  4800  002A                     crc_append@n:	
  4801                           ; 2 bytes @ 0xA
  4802                           
  4803                           
  4804                           ; 2 bytes @ 0xA
  4805  002A                     	ds	1
  4806  002B                     pid_pwm2_vout_run@ei:	
  4807  002B                     my_flash_system_write@i:	
  4808                           ; 2 bytes @ 0xB
  4809                           
  4810                           
  4811                           ; 2 bytes @ 0xB
  4812  002B                     	ds	1
  4813  002C                     ??_crc_append:	
  4814  002C                     ??_crc_verify:	
  4815                           ; 1 bytes @ 0xC
  4816                           
  4817  002C                     ___lldiv@counter:	
  4818                           ; 1 bytes @ 0xC
  4819                           
  4820  002C                     ___aldiv@dividend:	
  4821                           ; 1 bytes @ 0xC
  4822                           
  4823                           
  4824                           ; 4 bytes @ 0xC
  4825  002C                     	ds	1
  4826  002D                     ?_calc_rs_lo_avg:	
  4827  002D                     ?_calc_temp_rs:	
  4828                           ; 2 bytes @ 0xD
  4829                           
  4830  002D                     ?_calc_temp_rc:	
  4831                           ; 4 bytes @ 0xD
  4832                           
  4833  002D                     pid_pwm2_vout_run@t16:	
  4834                           ; 4 bytes @ 0xD
  4835                           
  4836  002D                     calc_rs_lo_avg@x:	
  4837                           ; 2 bytes @ 0xD
  4838                           
  4839                           
  4840                           ; 2 bytes @ 0xD
  4841  002D                     	ds	1
  4842  002E                     crc_verify@crccal:	
  4843                           
  4844                           ; 2 bytes @ 0xE
  4845  002E                     	ds	1
  4846  002F                     calc_rs_lo_avg@t32:	
  4847                           
  4848                           ; 4 bytes @ 0xF
  4849  002F                     	ds	1
  4850  0030                     ___aldiv@counter:	
  4851  0030                     crc_verify@expected:	
  4852                           ; 1 bytes @ 0x10
  4853                           
  4854                           
  4855                           ; 2 bytes @ 0x10
  4856  0030                     	ds	1
  4857  0031                     ??_calc_temp_rs:	
  4858  0031                     ??_calc_temp_rc:	
  4859                           ; 1 bytes @ 0x11
  4860                           
  4861  0031                     ___aldiv@sign:	
  4862                           ; 1 bytes @ 0x11
  4863                           
  4864  0031                     crc_append@crc:	
  4865                           ; 1 bytes @ 0x11
  4866                           
  4867                           
  4868                           ; 2 bytes @ 0x11
  4869  0031                     	ds	1
  4870  0032                     ___aldiv@quotient:	
  4871                           
  4872                           ; 4 bytes @ 0x12
  4873  0032                     	ds	1
  4874  0033                     ??_sys_data_init:	
  4875  0033                     ?_modbus_response_illgeal_function:	
  4876                           ; 1 bytes @ 0x13
  4877                           
  4878  0033                     ??_modbus_response_write_single_register:	
  4879                           ; 1 bytes @ 0x13
  4880                           
  4881  0033                     ??_modbus_response_write_mult_register:	
  4882                           ; 1 bytes @ 0x13
  4883                           
  4884  0033                     ??_modbus_response_command:	
  4885                           ; 1 bytes @ 0x13
  4886                           
  4887  0033                     calc_rs_lo_avg@i:	
  4888                           ; 1 bytes @ 0x13
  4889                           
  4890  0033                     modbus_response_illgeal_function@errcode:	
  4891                           ; 1 bytes @ 0x13
  4892                           
  4893                           
  4894                           ; 1 bytes @ 0x13
  4895  0033                     	ds	1
  4896  0034                     ??_modbus_response_illgeal_function:	
  4897  0034                     modbus_response_write_mult_register@startAddr:	
  4898                           ; 1 bytes @ 0x14
  4899                           
  4900                           
  4901                           ; 1 bytes @ 0x14
  4902  0034                     	ds	1
  4903  0035                     modbus_response_illgeal_function@buf:	
  4904  0035                     modbus_response_write_mult_register@len:	
  4905                           ; 1 bytes @ 0x15
  4906                           
  4907  0035                     modbus_response_command@tmpAddr:	
  4908                           ; 1 bytes @ 0x15
  4909                           
  4910  0035                     calc_temp_rs@x:	
  4911                           ; 2 bytes @ 0x15
  4912                           
  4913                           
  4914                           ; 4 bytes @ 0x15
  4915  0035                     	ds	1
  4916  0036                     ??_pid_pwm1_idrv_b_b:	
  4917  0036                     ??_pid_pwm1_idrv_run:	
  4918                           ; 1 bytes @ 0x16
  4919                           
  4920  0036                     ?_calc_expect_vout_adc_value:	
  4921                           ; 1 bytes @ 0x16
  4922                           
  4923  0036                     modbus_response_illgeal_function@pmdbs:	
  4924                           ; 2 bytes @ 0x16
  4925                           
  4926  0036                     modbus_response_write_mult_register@rbuf:	
  4927                           ; 1 bytes @ 0x16
  4928                           
  4929  0036                     calc_expect_vout_adc_value@x:	
  4930                           ; 1 bytes @ 0x16
  4931                           
  4932                           
  4933                           ; 2 bytes @ 0x16
  4934  0036                     	ds	1
  4935  0037                     modbus_response_write_single_register@fiSave:	
  4936  0037                     modbus_response_write_mult_register@stb:	
  4937                           ; 1 bytes @ 0x17
  4938                           
  4939  0037                     modbus_response_command@startAddr:	
  4940                           ; 1 bytes @ 0x17
  4941                           
  4942                           
  4943                           ; 2 bytes @ 0x17
  4944  0037                     	ds	1
  4945  0038                     ??_calc_expect_vout_adc_value:	
  4946  0038                     modbus_response_write_single_register@t16:	
  4947                           ; 1 bytes @ 0x18
  4948                           
  4949                           
  4950                           ; 2 bytes @ 0x18
  4951  0038                     	ds	1
  4952  0039                     modbus_response_command@i:	
  4953  0039                     sys_data_init@ret:	
  4954                           ; 1 bytes @ 0x19
  4955                           
  4956  0039                     calc_temp_rs@y:	
  4957                           ; 2 bytes @ 0x19
  4958                           
  4959  0039                     calc_temp_rc@x:	
  4960                           ; 4 bytes @ 0x19
  4961                           
  4962                           
  4963                           ; 4 bytes @ 0x19
  4964  0039                     	ds	1
  4965  003A                     modbus_response_command@pmdbs:	
  4966  003A                     modbus_response_write_single_register@i:	
  4967                           ; 1 bytes @ 0x1A
  4968                           
  4969                           
  4970                           ; 2 bytes @ 0x1A
  4971  003A                     	ds	1
  4972  003B                     modbus_response_command@len:	
  4973  003B                     sys_data_init@i:	
  4974                           ; 1 bytes @ 0x1B
  4975                           
  4976                           
  4977                           ; 2 bytes @ 0x1B
  4978  003B                     	ds	1
  4979  003C                     modbus_response_write_single_register@pmdbs:	
  4980  003C                     modbus_response_command@rbuf:	
  4981                           ; 1 bytes @ 0x1C
  4982                           
  4983                           
  4984                           ; 1 bytes @ 0x1C
  4985  003C                     	ds	1
  4986  003D                     modbus_response_write_single_register@rbuf:	
  4987  003D                     modbus_response_command@tempData:	
  4988                           ; 1 bytes @ 0x1D
  4989                           
  4990  003D                     calc_temp_rc@y:	
  4991                           ; 2 bytes @ 0x1D
  4992                           
  4993                           
  4994                           ; 4 bytes @ 0x1D
  4995  003D                     	ds	1
  4996  003E                     modbus_response_write_single_register@startAddr:	
  4997  003E                     pid_pwm1_idrv_b_b@t32:	
  4998                           ; 2 bytes @ 0x1E
  4999                           
  5000  003E                     pid_pwm1_idrv_run@ep:	
  5001                           ; 4 bytes @ 0x1E
  5002                           
  5003                           
  5004                           ; 4 bytes @ 0x1E
  5005  003E                     	ds	2
  5006  0040                     ?_modbus_response_process:	
  5007  0040                     modbus_response_process@rlen:	
  5008                           ; 1 bytes @ 0x20
  5009                           
  5010                           
  5011                           ; 2 bytes @ 0x20
  5012  0040                     	ds	2
  5013  0042                     ??_modbus_response_process:	
  5014  0042                     pid_pwm1_idrv_run@ei:	
  5015                           ; 1 bytes @ 0x22
  5016                           
  5017                           
  5018                           ; 4 bytes @ 0x22
  5019  0042                     	ds	1
  5020  0043                     modbus_response_process@resp:	
  5021                           
  5022                           ; 1 bytes @ 0x23
  5023  0043                     	ds	1
  5024  0044                     modbus_response_process@pmdbs:	
  5025                           
  5026                           ; 1 bytes @ 0x24
  5027  0044                     	ds	1
  5028  0045                     modbus_response_process@rbuf:	
  5029                           
  5030                           ; 1 bytes @ 0x25
  5031  0045                     	ds	1
  5032  0046                     pid_pwm1_idrv_run@t32:	
  5033  0046                     calc_expect_vout_adc_value@y1:	
  5034                           ; 4 bytes @ 0x26
  5035                           
  5036                           
  5037                           ; 4 bytes @ 0x26
  5038  0046                     	ds	4
  5039  004A                     calc_expect_vout_adc_value@x1:	
  5040                           
  5041                           ; 4 bytes @ 0x2A
  5042  004A                     	ds	4
  5043  004E                     calc_expect_vout_adc_value@y0:	
  5044                           
  5045                           ; 4 bytes @ 0x2E
  5046  004E                     	ds	4
  5047  0052                     calc_expect_vout_adc_value@x0:	
  5048                           
  5049                           ; 4 bytes @ 0x32
  5050  0052                     	ds	4
  5051  0056                     calc_expect_vout_adc_value@t32:	
  5052                           
  5053                           ; 4 bytes @ 0x36
  5054  0056                     	ds	4
  5055  005A                     calc_expect_vout_adc_value@i:	
  5056                           
  5057                           ; 2 bytes @ 0x3A
  5058  005A                     	ds	2
  5059                           
  5060                           	psect	maintext
  5061  0D0A                     __pmaintext:	
  5062 ;;
  5063 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  5064 ;;
  5065 ;; *************** function _main *****************
  5066 ;; Defined at:
  5067 ;;		line 17 in file "src/app/main.c"
  5068 ;; Parameters:    Size  Location     Type
  5069 ;;		None
  5070 ;; Auto vars:     Size  Location     Type
  5071 ;;		None
  5072 ;; Return value:  Size  Location     Type
  5073 ;;                  1    wreg      void 
  5074 ;; Registers used:
  5075 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5076 ;; Tracked objects:
  5077 ;;		On entry : B1F/0
  5078 ;;		On exit  : 0/0
  5079 ;;		Unchanged: 0/0
  5080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5083 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5084 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5085 ;;Total ram usage:        2 bytes
  5086 ;; Hardware stack levels required when called:    6
  5087 ;; This function calls:
  5088 ;;		_SYSTEM_Initialize
  5089 ;;		_adc_sample
  5090 ;;		_calc_expect_vout_adc_value
  5091 ;;		_calc_rs_lo_avg
  5092 ;;		_calc_temp_rc
  5093 ;;		_calc_temp_rs
  5094 ;;		_m_mem_cpy
  5095 ;;		_m_mem_cpy_len
  5096 ;;		_modbus_response_process
  5097 ;;		_pid_pwm1_idrv_b_b
  5098 ;;		_pid_pwm1_idrv_run
  5099 ;;		_pid_pwm2_vout_run
  5100 ;;		_sys_data_init
  5101 ;;		_sys_data_save
  5102 ;;		_uart_received_start
  5103 ;;		_uart_send_len
  5104 ;;		_uart_send_str
  5105 ;; This function is called by:
  5106 ;;		Startup code after reset
  5107 ;; This function uses a non-reentrant model
  5108 ;;
  5109                           
  5110                           
  5111                           ;psect for function _main
  5112  0D0A                     _main:	
  5113                           
  5114                           ;main.c: 19: __nop();
  5115                           
  5116                           ;incstack = 0
  5117                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5118  0D0A  0000               	nop
  5119                           
  5120                           ;main.c: 20: isRunInBoot=0xaa;
  5121  0D0B  30AA               	movlw	170
  5122  0D0C  0021               	movlb	1	; select bank1
  5123  0D0D  00EA               	movwf	??_main^(0+128)
  5124  0D0E  086A               	movf	??_main^(0+128),w
  5125  0D0F  003F               	movlb	31	; select bank31
  5126  0D10  00FF               	movwf	127	;volatile
  5127                           
  5128                           ;main.c: 21: isRunInBoot=isRunInBoot;
  5129  0D11  087F               	movf	127,w	;volatile
  5130  0D12  0021               	movlb	1	; select bank1
  5131  0D13  00EA               	movwf	??_main^(0+128)
  5132  0D14  086A               	movf	??_main^(0+128),w
  5133  0D15  003F               	movlb	31	; select bank31
  5134  0D16  00FF               	movwf	127	;volatile
  5135                           
  5136                           ;main.c: 22: SYSTEM_Initialize();
  5137  0D17  319A  2250  318D   	fcall	_SYSTEM_Initialize
  5138                           
  5139                           ;main.c: 23: do{ (INTCONbits.GIE = 1); (INTCONbits.PEIE = 1); }while(0);;
  5140  0D1A  178B               	bsf	11,7	;volatile
  5141  0D1B  170B               	bsf	11,6	;volatile
  5142                           
  5143                           ;main.c: 26: TXSTAbits.TXEN=0;
  5144  0D1C  0023               	movlb	3	; select bank3
  5145  0D1D  129E               	bcf	30,5	;volatile
  5146                           
  5147                           ;main.c: 27: sys_data_init();
  5148  0D1E  3192  2241  318D   	fcall	_sys_data_init
  5149                           
  5150                           ;main.c: 28: m_mem_cpy(str,(uint8_t*)"VER1.00\r\n");
  5151  0D21  302F               	movlw	low (STR_1| (0+32768))
  5152  0D22  00F3               	movwf	m_mem_cpy@s
  5153  0D23  3098               	movlw	high (STR_1| (0+32768))
  5154  0D24  00F4               	movwf	m_mem_cpy@s+1
  5155  0D25  305C               	movlw	(low (_str| (0+256)))& (0+255)
  5156  0D26  319B  231E  318D   	fcall	_m_mem_cpy
  5157                           
  5158                           ;main.c: 29: uart_send_str(str);
  5159  0D29  305C               	movlw	(low (_str| (0+256)))& (0+255)
  5160  0D2A  319A  22FC  318D   	fcall	_uart_send_str
  5161                           
  5162                           ;main.c: 31: if(sysData.pidSetFlg0 != 0x55 || sysData.pidSetFlg1 != 0xaa){
  5163  0D2D  305C               	movlw	92
  5164  0D2E  0086               	movwf	6
  5165  0D2F  3023               	movlw	35
  5166  0D30  0087               	movwf	7
  5167  0D31  3055               	movlw	85
  5168  0D32  0601               	xorwf	1,w
  5169  0D33  1D03               	btfss	3,2
  5170  0D34  2D3E               	goto	l5745
  5171  0D35  305C               	movlw	92
  5172  0D36  0086               	movwf	6
  5173  0D37  3023               	movlw	35
  5174  0D38  0087               	movwf	7
  5175  0D39  3141               	addfsr 1,1
  5176  0D3A  30AA               	movlw	170
  5177  0D3B  0601               	xorwf	1,w
  5178  0D3C  1903               	btfsc	3,2
  5179  0D3D  2D41               	goto	l5747
  5180  0D3E                     l5745:	
  5181                           
  5182                           ;main.c: 32: pidBbSm=0;
  5183  0D3E  0020               	movlb	0	; select bank0
  5184  0D3F  01E9               	clrf	_pidBbSm
  5185                           
  5186                           ;main.c: 33: }else{
  5187  0D40  2D63               	goto	l5755
  5188  0D41                     l5747:	
  5189                           
  5190                           ;main.c: 34: pidBbSm=5;
  5191  0D41  3005               	movlw	5
  5192  0D42  0021               	movlb	1	; select bank1
  5193  0D43  00EA               	movwf	??_main^(0+128)
  5194  0D44  086A               	movf	??_main^(0+128),w
  5195  0D45  0020               	movlb	0	; select bank0
  5196  0D46  00E9               	movwf	_pidBbSm
  5197                           
  5198                           ;main.c: 35: PidKp=sysData.pidKp;
  5199  0D47  305C               	movlw	92
  5200  0D48  0086               	movwf	6
  5201  0D49  3023               	movlw	35
  5202  0D4A  0087               	movwf	7
  5203  0D4B  3144               	addfsr 1,4
  5204  0D4C  3F40               	moviw [0]fsr1
  5205  0D4D  00E2               	movwf	_PidKp
  5206  0D4E  3F41               	moviw [1]fsr1
  5207  0D4F  00E3               	movwf	_PidKp+1
  5208                           
  5209                           ;main.c: 36: PidTd=sysData.pidTd;
  5210  0D50  305C               	movlw	92
  5211  0D51  0086               	movwf	6
  5212  0D52  3023               	movlw	35
  5213  0D53  0087               	movwf	7
  5214  0D54  3148               	addfsr 1,8
  5215  0D55  3F40               	moviw [0]fsr1
  5216  0D56  0021               	movlb	1	; select bank1
  5217  0D57  00CC               	movwf	_PidTd^(0+128)
  5218  0D58  3F41               	moviw [1]fsr1
  5219  0D59  00CD               	movwf	(_PidTd+1)^(0+128)
  5220                           
  5221                           ;main.c: 37: PidTi=sysData.pidTi;
  5222  0D5A  305C               	movlw	92
  5223  0D5B  0086               	movwf	6
  5224  0D5C  3023               	movlw	35
  5225  0D5D  0087               	movwf	7
  5226  0D5E  3146               	addfsr 1,6
  5227  0D5F  3F40               	moviw [0]fsr1
  5228  0D60  00CE               	movwf	_PidTi^(0+128)
  5229  0D61  3F41               	moviw [1]fsr1
  5230  0D62  00CF               	movwf	(_PidTi+1)^(0+128)
  5231  0D63                     l5755:	
  5232                           ;main.c: 38: }
  5233                           ;main.c: 40: while (1){
  5234                           
  5235                           
  5236                           ;main.c: 41: if(Event & (1<<2)){
  5237  0D63  0020               	movlb	0	; select bank0
  5238  0D64  1D6B               	btfss	_Event,2	;volatile
  5239  0D65  2E59               	goto	l5803
  5240                           
  5241                           ;main.c: 42: Event &= ~(1<<2);
  5242  0D66  30FB               	movlw	251
  5243  0D67  0021               	movlb	1	; select bank1
  5244  0D68  00EA               	movwf	??_main^(0+128)
  5245  0D69  086A               	movf	??_main^(0+128),w
  5246  0D6A  0020               	movlb	0	; select bank0
  5247  0D6B  05EB               	andwf	_Event,f	;volatile
  5248                           
  5249                           ;main.c: 44: rtAdcValueRsLo=adc_sample(channel_AN6,1,32);
  5250  0D6C  01F6               	clrf	adc_sample@gfvr
  5251  0D6D  0AF6               	incf	adc_sample@gfvr,f
  5252  0D6E  3020               	movlw	32
  5253  0D6F  0021               	movlb	1	; select bank1
  5254  0D70  00EA               	movwf	??_main^(0+128)
  5255  0D71  086A               	movf	??_main^(0+128),w
  5256  0D72  00F7               	movwf	adc_sample@num
  5257  0D73  3006               	movlw	6
  5258  0D74  319E  26A2  318D   	fcall	_adc_sample
  5259  0D77  0877               	movf	?_adc_sample+1,w
  5260  0D78  0020               	movlb	0	; select bank0
  5261  0D79  00E7               	movwf	_rtAdcValueRsLo+1
  5262  0D7A  0876               	movf	?_adc_sample,w
  5263  0D7B  00E6               	movwf	_rtAdcValueRsLo
  5264                           
  5265                           ;main.c: 46: rtAdcValueRsHi=adc_sample(channel_AN5,3,32);
  5266  0D7C  3003               	movlw	3
  5267  0D7D  0021               	movlb	1	; select bank1
  5268  0D7E  00EA               	movwf	??_main^(0+128)
  5269  0D7F  086A               	movf	??_main^(0+128),w
  5270  0D80  00F6               	movwf	adc_sample@gfvr
  5271  0D81  3020               	movlw	32
  5272  0D82  00EB               	movwf	(??_main+1)^(0+128)
  5273  0D83  086B               	movf	(??_main+1)^(0+128),w
  5274  0D84  00F7               	movwf	adc_sample@num
  5275  0D85  3005               	movlw	5
  5276  0D86  319E  26A2  318D   	fcall	_adc_sample
  5277  0D89  0877               	movf	?_adc_sample+1,w
  5278  0D8A  0021               	movlb	1	; select bank1
  5279  0D8B  00D5               	movwf	(_rtAdcValueRsHi+1)^(0+128)
  5280  0D8C  0876               	movf	?_adc_sample,w
  5281  0D8D  00D4               	movwf	_rtAdcValueRsHi^(0+128)
  5282                           
  5283                           ;main.c: 49: rtAdcValueRcLo=adc_sample(channel_AN4,3,32);
  5284  0D8E  3003               	movlw	3
  5285  0D8F  00EA               	movwf	??_main^(0+128)
  5286  0D90  086A               	movf	??_main^(0+128),w
  5287  0D91  00F6               	movwf	adc_sample@gfvr
  5288  0D92  3020               	movlw	32
  5289  0D93  00EB               	movwf	(??_main+1)^(0+128)
  5290  0D94  086B               	movf	(??_main+1)^(0+128),w
  5291  0D95  00F7               	movwf	adc_sample@num
  5292  0D96  3004               	movlw	4
  5293  0D97  319E  26A2  318D   	fcall	_adc_sample
  5294  0D9A  0877               	movf	?_adc_sample+1,w
  5295  0D9B  0020               	movlb	0	; select bank0
  5296  0D9C  00E5               	movwf	_rtAdcValueRcLo+1
  5297  0D9D  0876               	movf	?_adc_sample,w
  5298  0D9E  00E4               	movwf	_rtAdcValueRcLo
  5299                           
  5300                           ;main.c: 50: rtAdcValueRcLo>>=1;
  5301  0D9F  3001               	movlw	1
  5302  0DA0                     u5405:	
  5303  0DA0  36E5               	lsrf	_rtAdcValueRcLo+1,f
  5304  0DA1  0CE4               	rrf	_rtAdcValueRcLo,f
  5305  0DA2  0B89               	decfsz	9,f
  5306  0DA3  2DA0               	goto	u5405
  5307                           
  5308                           ;main.c: 51: rtAdcValueRcHi=adc_sample(channel_AN2,3,32);
  5309  0DA4  3003               	movlw	3
  5310  0DA5  0021               	movlb	1	; select bank1
  5311  0DA6  00EA               	movwf	??_main^(0+128)
  5312  0DA7  086A               	movf	??_main^(0+128),w
  5313  0DA8  00F6               	movwf	adc_sample@gfvr
  5314  0DA9  3020               	movlw	32
  5315  0DAA  00EB               	movwf	(??_main+1)^(0+128)
  5316  0DAB  086B               	movf	(??_main+1)^(0+128),w
  5317  0DAC  00F7               	movwf	adc_sample@num
  5318  0DAD  3002               	movlw	2
  5319  0DAE  319E  26A2  318D   	fcall	_adc_sample
  5320  0DB1  0877               	movf	?_adc_sample+1,w
  5321  0DB2  0021               	movlb	1	; select bank1
  5322  0DB3  00D3               	movwf	(_rtAdcValueRcHi+1)^(0+128)
  5323  0DB4  0876               	movf	?_adc_sample,w
  5324  0DB5  00D2               	movwf	_rtAdcValueRcHi^(0+128)
  5325                           
  5326                           ;main.c: 52: rtAdcValueRcHi>>=1;
  5327  0DB6  3001               	movlw	1
  5328  0DB7                     u5415:	
  5329  0DB7  36D3               	lsrf	(_rtAdcValueRcHi+1)^(0+128),f
  5330  0DB8  0CD2               	rrf	_rtAdcValueRcHi^(0+128),f
  5331  0DB9  0B89               	decfsz	9,f
  5332  0DBA  2DB7               	goto	u5415
  5333                           
  5334                           ;main.c: 54: rtAdcValueVoFb=adc_sample(channel_AN7,3,32);
  5335  0DBB  3003               	movlw	3
  5336  0DBC  00EA               	movwf	??_main^(0+128)
  5337  0DBD  086A               	movf	??_main^(0+128),w
  5338  0DBE  00F6               	movwf	adc_sample@gfvr
  5339  0DBF  3020               	movlw	32
  5340  0DC0  00EB               	movwf	(??_main+1)^(0+128)
  5341  0DC1  086B               	movf	(??_main+1)^(0+128),w
  5342  0DC2  00F7               	movwf	adc_sample@num
  5343  0DC3  3007               	movlw	7
  5344  0DC4  319E  26A2  318D   	fcall	_adc_sample
  5345  0DC7  0877               	movf	?_adc_sample+1,w
  5346  0DC8  0021               	movlb	1	; select bank1
  5347  0DC9  00D1               	movwf	(_rtAdcValueVoFb+1)^(0+128)
  5348  0DCA  0876               	movf	?_adc_sample,w
  5349  0DCB  00D0               	movwf	_rtAdcValueVoFb^(0+128)
  5350                           
  5351                           ;main.c: 55: rtAdcValueVoFb>>=1;
  5352  0DCC  3001               	movlw	1
  5353  0DCD                     u5425:	
  5354  0DCD  36D1               	lsrf	(_rtAdcValueVoFb+1)^(0+128),f
  5355  0DCE  0CD0               	rrf	_rtAdcValueVoFb^(0+128),f
  5356  0DCF  0B89               	decfsz	9,f
  5357  0DD0  2DCD               	goto	u5425
  5358                           
  5359                           ;main.c: 57: resRc=calc_temp_rc();
  5360  0DD1  3194  24BF  318D   	fcall	_calc_temp_rc
  5361  0DD4  0020               	movlb	0	; select bank0
  5362  0DD5  082E               	movf	?_calc_temp_rc+1,w
  5363  0DD6  00EF               	movwf	_resRc+1
  5364  0DD7  082D               	movf	?_calc_temp_rc,w
  5365  0DD8  00EE               	movwf	_resRc
  5366                           
  5367                           ;main.c: 58: resRs=calc_temp_rs();
  5368  0DD9  3191  21B1  318D   	fcall	_calc_temp_rs
  5369  0DDC  0020               	movlb	0	; select bank0
  5370  0DDD  082E               	movf	?_calc_temp_rs+1,w
  5371  0DDE  00ED               	movwf	_resRs+1
  5372  0DDF  082D               	movf	?_calc_temp_rs,w
  5373  0DE0  00EC               	movwf	_resRs
  5374                           
  5375                           ;main.c: 60: __nop();
  5376  0DE1  0000               	nop
  5377                           
  5378                           ;main.c: 61: if(pidBbSm>=5){
  5379  0DE2  3005               	movlw	5
  5380  0DE3  0020               	movlb	0	; select bank0
  5381  0DE4  0269               	subwf	_pidBbSm,w
  5382  0DE5  1C03               	skipc
  5383  0DE6  2E11               	goto	l5789
  5384                           
  5385                           ;main.c: 62: pid_pwm1_idrv_run();
  5386  0DE7  3196  2691  318D   	fcall	_pid_pwm1_idrv_run
  5387                           
  5388                           ;main.c: 65: rsLoAvg=calc_rs_lo_avg(rtAdcValueRsLo);
  5389  0DEA  0020               	movlb	0	; select bank0
  5390  0DEB  0867               	movf	_rtAdcValueRsLo+1,w
  5391  0DEC  00AE               	movwf	calc_rs_lo_avg@x+1
  5392  0DED  0866               	movf	_rtAdcValueRsLo,w
  5393  0DEE  00AD               	movwf	calc_rs_lo_avg@x
  5394  0DEF  3190  2047  318D   	fcall	_calc_rs_lo_avg
  5395  0DF2  0020               	movlb	0	; select bank0
  5396  0DF3  082E               	movf	?_calc_rs_lo_avg+1,w
  5397  0DF4  00DF               	movwf	_rsLoAvg+1
  5398  0DF5  082D               	movf	?_calc_rs_lo_avg,w
  5399  0DF6  00DE               	movwf	_rsLoAvg
  5400                           
  5401                           ;main.c: 66: voExpectMv=calc_expect_vout_adc_value(rsLoAvg);
  5402  0DF7  085F               	movf	_rsLoAvg+1,w
  5403  0DF8  00B7               	movwf	calc_expect_vout_adc_value@x+1
  5404  0DF9  085E               	movf	_rsLoAvg,w
  5405  0DFA  00B6               	movwf	calc_expect_vout_adc_value@x
  5406  0DFB  318B  2324  318D   	fcall	_calc_expect_vout_adc_value
  5407  0DFE  0020               	movlb	0	; select bank0
  5408  0DFF  0837               	movf	?_calc_expect_vout_adc_value+1,w
  5409  0E00  0021               	movlb	1	; select bank1
  5410  0E01  00CB               	movwf	(_voExpectMv+1)^(0+128)
  5411  0E02  0020               	movlb	0	; select bank0
  5412  0E03  0836               	movf	?_calc_expect_vout_adc_value,w
  5413  0E04  0021               	movlb	1	; select bank1
  5414  0E05  00CA               	movwf	_voExpectMv^(0+128)
  5415                           
  5416                           ;main.c: 67: voExpectAdcValue=(voExpectMv<<1);
  5417  0E06  354A               	lslf	_voExpectMv^(0+128),w
  5418  0E07  0020               	movlb	0	; select bank0
  5419  0E08  00E0               	movwf	_voExpectAdcValue
  5420  0E09  0021               	movlb	1	; select bank1
  5421  0E0A  0D4B               	rlf	(_voExpectMv+1)^(0+128),w
  5422  0E0B  0020               	movlb	0	; select bank0
  5423  0E0C  00E1               	movwf	_voExpectAdcValue+1
  5424                           
  5425                           ;main.c: 68: pid_pwm2_vout_run();
  5426  0E0D  3192  22D2  318D   	fcall	_pid_pwm2_vout_run
  5427                           
  5428                           ;main.c: 69: }else{
  5429  0E10  2E59               	goto	l5803
  5430  0E11                     l5789:	
  5431                           
  5432                           ;main.c: 70: pid_pwm1_idrv_b_b();
  5433  0E11  3188  20ED  318D   	fcall	_pid_pwm1_idrv_b_b
  5434                           
  5435                           ;main.c: 72: if(pidBbSm>=5){
  5436  0E14  3005               	movlw	5
  5437  0E15  0020               	movlb	0	; select bank0
  5438  0E16  0269               	subwf	_pidBbSm,w
  5439  0E17  1C03               	skipc
  5440  0E18  2E59               	goto	l5803
  5441                           
  5442                           ;main.c: 73: sysData.pidSetFlg0 = 0x55;
  5443  0E19  305C               	movlw	92
  5444  0E1A  0086               	movwf	6
  5445  0E1B  3023               	movlw	35
  5446  0E1C  0087               	movwf	7
  5447  0E1D  3055               	movlw	85
  5448  0E1E  3FC0               	movwi [0]fsr1
  5449                           
  5450                           ;main.c: 74: sysData.pidSetFlg1 = 0xaa;
  5451  0E1F  305D               	movlw	93
  5452  0E20  0086               	movwf	6
  5453  0E21  3023               	movlw	35
  5454  0E22  0087               	movwf	7
  5455  0E23  30AA               	movlw	170
  5456  0E24  0081               	movwf	1
  5457                           
  5458                           ;main.c: 75: sysData.pidKp=(uint16_t)PidKp;
  5459  0E25  305C               	movlw	92
  5460  0E26  0086               	movwf	6
  5461  0E27  3023               	movlw	35
  5462  0E28  0087               	movwf	7
  5463  0E29  3144               	addfsr 1,4
  5464  0E2A  0862               	movf	_PidKp,w
  5465  0E2B  3FC0               	movwi [0]fsr1
  5466  0E2C  0863               	movf	_PidKp+1,w
  5467  0E2D  3FC1               	movwi [1]fsr1
  5468                           
  5469                           ;main.c: 76: sysData.pidTd=(uint16_t)PidTd;
  5470  0E2E  305C               	movlw	92
  5471  0E2F  0086               	movwf	6
  5472  0E30  3023               	movlw	35
  5473  0E31  0087               	movwf	7
  5474  0E32  3148               	addfsr 1,8
  5475  0E33  0021               	movlb	1	; select bank1
  5476  0E34  084C               	movf	_PidTd^(0+128),w
  5477  0E35  3FC0               	movwi [0]fsr1
  5478  0E36  084D               	movf	(_PidTd+1)^(0+128),w
  5479  0E37  3FC1               	movwi [1]fsr1
  5480                           
  5481                           ;main.c: 77: sysData.pidTi=(uint16_t)PidTi;
  5482  0E38  305C               	movlw	92
  5483  0E39  0086               	movwf	6
  5484  0E3A  3023               	movlw	35
  5485  0E3B  0087               	movwf	7
  5486  0E3C  3146               	addfsr 1,6
  5487  0E3D  084E               	movf	_PidTi^(0+128),w
  5488  0E3E  3FC0               	movwi [0]fsr1
  5489  0E3F  084F               	movf	(_PidTi+1)^(0+128),w
  5490  0E40  3FC1               	movwi [1]fsr1
  5491                           
  5492                           ;main.c: 78: sys_data_save();
  5493  0E41  319C  24A0  318D   	fcall	_sys_data_save
  5494                           
  5495                           ;main.c: 79: modbusBuf[0]=0x55;
  5496  0E44  3055               	movlw	85
  5497  0E45  0021               	movlb	1	; select bank1
  5498  0E46  00EA               	movwf	??_main^(0+128)
  5499  0E47  086A               	movf	??_main^(0+128),w
  5500  0E48  0023               	movlb	3	; select bank3
  5501  0E49  00A0               	movwf	_modbusBuf^(0+384)
  5502                           
  5503                           ;main.c: 80: modbusBuf[1]=0xaa;
  5504  0E4A  30AA               	movlw	170
  5505  0E4B  0021               	movlb	1	; select bank1
  5506  0E4C  00EA               	movwf	??_main^(0+128)
  5507  0E4D  086A               	movf	??_main^(0+128),w
  5508  0E4E  0023               	movlb	3	; select bank3
  5509  0E4F  00A1               	movwf	(_modbusBuf^(0+384)+1)
  5510                           
  5511                           ;main.c: 81: uart_send_len(modbusBuf,2);
  5512  0E50  3002               	movlw	2
  5513  0E51  0021               	movlb	1	; select bank1
  5514  0E52  00EA               	movwf	??_main^(0+128)
  5515  0E53  086A               	movf	??_main^(0+128),w
  5516  0E54  00F3               	movwf	uart_send_len@len
  5517  0E55  30A0               	movlw	(low (_modbusBuf| (0+256)))& (0+255)
  5518  0E56  319B  23AC  318D   	fcall	_uart_send_len
  5519  0E59                     l5803:	
  5520                           
  5521                           ;main.c: 82: }
  5522                           ;main.c: 83: }
  5523                           ;main.c: 85: }
  5524                           ;main.c: 87: if(Event & (1<<3)){
  5525  0E59  0020               	movlb	0	; select bank0
  5526  0E5A  1DEB               	btfss	_Event,3	;volatile
  5527  0E5B  2E62               	goto	l5807
  5528                           
  5529                           ;main.c: 88: Event &= ~(1<<3);
  5530  0E5C  30F7               	movlw	247
  5531  0E5D  0021               	movlb	1	; select bank1
  5532  0E5E  00EA               	movwf	??_main^(0+128)
  5533  0E5F  086A               	movf	??_main^(0+128),w
  5534  0E60  0020               	movlb	0	; select bank0
  5535  0E61  05EB               	andwf	_Event,f	;volatile
  5536  0E62                     l5807:	
  5537                           
  5538                           ;main.c: 130: }
  5539                           ;main.c: 132: if(Event & (1<<0)){
  5540  0E62  1C6B               	btfss	_Event,0	;volatile
  5541  0E63  2E95               	goto	l5817
  5542                           
  5543                           ;main.c: 133: Event &= ~ (1<<0);
  5544  0E64  30FE               	movlw	254
  5545  0E65  0021               	movlb	1	; select bank1
  5546  0E66  00EA               	movwf	??_main^(0+128)
  5547  0E67  086A               	movf	??_main^(0+128),w
  5548  0E68  0020               	movlb	0	; select bank0
  5549  0E69  05EB               	andwf	_Event,f	;volatile
  5550                           
  5551                           ;main.c: 134: if(eusartRxCount>0){
  5552  0E6A  0879               	movf	_eusartRxCount,w	;volatile
  5553  0E6B  1903               	btfsc	3,2
  5554  0E6C  2E92               	goto	l5815
  5555                           
  5556                           ;main.c: 135: m_mem_cpy_len(modbusBuf,eusartRxBuffer,eusartRxCount);
  5557  0E6D  30A0               	movlw	low _modbusBuf
  5558  0E6E  00A0               	movwf	m_mem_cpy_len@d
  5559  0E6F  3001               	movlw	high _modbusBuf
  5560  0E70  00A1               	movwf	m_mem_cpy_len@d+1
  5561  0E71  3020               	movlw	low _eusartRxBuffer
  5562  0E72  00A2               	movwf	m_mem_cpy_len@s
  5563  0E73  3001               	movlw	high _eusartRxBuffer
  5564  0E74  00A3               	movwf	m_mem_cpy_len@s+1
  5565  0E75  0879               	movf	_eusartRxCount,w	;volatile
  5566  0E76  0021               	movlb	1	; select bank1
  5567  0E77  00EA               	movwf	??_main^(0+128)
  5568  0E78  01EB               	clrf	(??_main^(0+128)+1)
  5569  0E79  086A               	movf	??_main^(0+128),w
  5570  0E7A  0020               	movlb	0	; select bank0
  5571  0E7B  00A4               	movwf	m_mem_cpy_len@len
  5572  0E7C  0021               	movlb	1	; select bank1
  5573  0E7D  086B               	movf	(??_main+1)^(0+128),w
  5574  0E7E  0020               	movlb	0	; select bank0
  5575  0E7F  00A5               	movwf	m_mem_cpy_len@len+1
  5576  0E80  319A  22DD  318D   	fcall	_m_mem_cpy_len
  5577                           
  5578                           ;main.c: 136: modbus_response_process(modbusBuf,eusartRxCount);
  5579  0E83  0879               	movf	_eusartRxCount,w	;volatile
  5580  0E84  0021               	movlb	1	; select bank1
  5581  0E85  00EA               	movwf	??_main^(0+128)
  5582  0E86  01EB               	clrf	(??_main^(0+128)+1)
  5583  0E87  086A               	movf	??_main^(0+128),w
  5584  0E88  0020               	movlb	0	; select bank0
  5585  0E89  00C0               	movwf	modbus_response_process@rlen
  5586  0E8A  0021               	movlb	1	; select bank1
  5587  0E8B  086B               	movf	(??_main+1)^(0+128),w
  5588  0E8C  0020               	movlb	0	; select bank0
  5589  0E8D  00C1               	movwf	modbus_response_process@rlen+1
  5590  0E8E  30A0               	movlw	(low (_modbusBuf| (0+256)))& (0+255)
  5591  0E8F  319D  25F8  318D   	fcall	_modbus_response_process
  5592  0E92                     l5815:	
  5593                           
  5594                           ;main.c: 138: }
  5595                           ;main.c: 140: uart_received_start();
  5596  0E92  3199  21B0  318D   	fcall	_uart_received_start
  5597  0E95                     l5817:	
  5598                           
  5599                           ;main.c: 141: }
  5600                           ;main.c: 143: __nop();
  5601  0E95  0000               	nop
  5602  0E96  2D63               	goto	l5755
  5603  0E97                     __end_of_main:	
  5604                           
  5605                           	psect	text1
  5606  1AFC                     __ptext1:	
  5607 ;; *************** function _uart_send_str *****************
  5608 ;; Defined at:
  5609 ;;		line 21 in file "src/api/my_uart.c"
  5610 ;; Parameters:    Size  Location     Type
  5611 ;;  str             1    wreg     PTR unsigned char 
  5612 ;;		 -> str(16), 
  5613 ;; Auto vars:     Size  Location     Type
  5614 ;;  str             1    4[COMMON] PTR unsigned char 
  5615 ;;		 -> str(16), 
  5616 ;; Return value:  Size  Location     Type
  5617 ;;                  1    wreg      void 
  5618 ;; Registers used:
  5619 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5620 ;; Tracked objects:
  5621 ;;		On entry : 0/0
  5622 ;;		On exit  : 0/0
  5623 ;;		Unchanged: 0/0
  5624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5626 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5627 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5628 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5629 ;;Total ram usage:        2 bytes
  5630 ;; Hardware stack levels used:    1
  5631 ;; Hardware stack levels required when called:    1
  5632 ;; This function calls:
  5633 ;;		Nothing
  5634 ;; This function is called by:
  5635 ;;		_main
  5636 ;; This function uses a non-reentrant model
  5637 ;;
  5638                           
  5639                           
  5640                           ;psect for function _uart_send_str
  5641  1AFC                     _uart_send_str:	
  5642                           
  5643                           ;incstack = 0
  5644                           ; Regs used in _uart_send_str: [wreg+fsr1l+fsr1h+status,2+status,0]
  5645                           ;uart_send_str@str stored from wreg
  5646  1AFC  00F4               	movwf	uart_send_str@str
  5647                           
  5648                           ;my_uart.c: 24: if(!TXSTAbits.TXEN)TXSTAbits.TXEN=1;
  5649  1AFD  0023               	movlb	3	; select bank3
  5650  1AFE  1E9E               	btfss	30,5	;volatile
  5651  1AFF  169E               	bsf	30,5	;volatile
  5652  1B00                     l4149:	
  5653                           ;my_uart.c: 26: while(*str!='\0'){
  5654                           
  5655  1B00  0874               	movf	uart_send_str@str,w
  5656  1B01  0086               	movwf	6
  5657  1B02  3001               	movlw	1	; select bank2/3
  5658  1B03  0087               	movwf	7
  5659  1B04  0801               	movf	1,w
  5660  1B05  1903               	btfsc	3,2
  5661  1B06  0008               	return
  5662  1B07                     l499:	
  5663                           ;my_uart.c: 27: while(0 == PIR1bits.TXIF);
  5664                           
  5665  1B07  0020               	movlb	0	; select bank0
  5666  1B08  1E11               	btfss	17,4	;volatile
  5667  1B09  2B07               	goto	l499
  5668                           
  5669                           ;my_uart.c: 28: do{__nop();__nop();__nop();__nop();}while(0);;
  5670  1B0A  0000               	nop
  5671  1B0B  0000               	nop
  5672  1B0C  0000               	nop
  5673  1B0D  0000               	nop
  5674                           
  5675                           ;my_uart.c: 29: TXREG = *str;
  5676  1B0E  0874               	movf	uart_send_str@str,w
  5677  1B0F  0086               	movwf	6
  5678  1B10  3001               	movlw	1	; select bank2/3
  5679  1B11  0087               	movwf	7
  5680  1B12  0801               	movf	1,w
  5681  1B13  0023               	movlb	3	; select bank3
  5682  1B14  009A               	movwf	26	;volatile
  5683                           
  5684                           ;my_uart.c: 30: str++;
  5685  1B15  3001               	movlw	1
  5686  1B16  00F3               	movwf	??_uart_send_str
  5687  1B17  0873               	movf	??_uart_send_str,w
  5688  1B18  07F4               	addwf	uart_send_str@str,f
  5689                           
  5690                           ;my_uart.c: 31: do{__nop();__nop();__nop();__nop();}while(0);;
  5691  1B19  0000               	nop
  5692  1B1A  0000               	nop
  5693  1B1B  0000               	nop
  5694  1B1C  0000               	nop
  5695  1B1D  2B00               	goto	l4149
  5696  1B1E                     __end_of_uart_send_str:	
  5697                           
  5698                           	psect	text2
  5699  19B0                     __ptext2:	
  5700 ;; *************** function _uart_received_start *****************
  5701 ;; Defined at:
  5702 ;;		line 51 in file "src/api/my_uart.c"
  5703 ;; Parameters:    Size  Location     Type
  5704 ;;		None
  5705 ;; Auto vars:     Size  Location     Type
  5706 ;;		None
  5707 ;; Return value:  Size  Location     Type
  5708 ;;                  1    wreg      void 
  5709 ;; Registers used:
  5710 ;;		status,2
  5711 ;; Tracked objects:
  5712 ;;		On entry : 0/0
  5713 ;;		On exit  : 0/0
  5714 ;;		Unchanged: 0/0
  5715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5719 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5720 ;;Total ram usage:        0 bytes
  5721 ;; Hardware stack levels used:    1
  5722 ;; Hardware stack levels required when called:    1
  5723 ;; This function calls:
  5724 ;;		Nothing
  5725 ;; This function is called by:
  5726 ;;		_main
  5727 ;; This function uses a non-reentrant model
  5728 ;;
  5729                           
  5730                           
  5731                           ;psect for function _uart_received_start
  5732  19B0                     _uart_received_start:	
  5733                           
  5734                           ;my_uart.c: 53: eusartRxCount=0;
  5735                           
  5736                           ;incstack = 0
  5737                           ; Regs used in _uart_received_start: [status,2]
  5738  19B0  01F9               	clrf	_eusartRxCount	;volatile
  5739                           
  5740                           ;my_uart.c: 54: RCSTAbits.CREN=0;
  5741  19B1  0023               	movlb	3	; select bank3
  5742  19B2  121D               	bcf	29,4	;volatile
  5743                           
  5744                           ;my_uart.c: 55: PIE1bits.RCIE = 0;
  5745  19B3  0021               	movlb	1	; select bank1
  5746  19B4  1291               	bcf	17,5	;volatile
  5747                           
  5748                           ;my_uart.c: 56: PIR1bits.RCIF=0;
  5749  19B5  0020               	movlb	0	; select bank0
  5750  19B6  1291               	bcf	17,5	;volatile
  5751                           
  5752                           ;my_uart.c: 58: RCSTAbits.CREN=1;
  5753  19B7  0023               	movlb	3	; select bank3
  5754  19B8  161D               	bsf	29,4	;volatile
  5755                           
  5756                           ;my_uart.c: 59: PIE1bits.RCIE = 1;
  5757  19B9  0021               	movlb	1	; select bank1
  5758  19BA  1691               	bsf	17,5	;volatile
  5759                           
  5760                           ;my_uart.c: 61: eusartRxIdleTime_ms=0;
  5761  19BB  01FA               	clrf	_eusartRxIdleTime_ms	;volatile
  5762  19BC  0008               	return
  5763  19BD                     __end_of_uart_received_start:	
  5764                           
  5765                           	psect	text3
  5766  1241                     __ptext3:	
  5767 ;; *************** function _sys_data_init *****************
  5768 ;; Defined at:
  5769 ;;		line 104 in file "src/api/sysData.c"
  5770 ;; Parameters:    Size  Location     Type
  5771 ;;		None
  5772 ;; Auto vars:     Size  Location     Type
  5773 ;;  i               2   27[BANK0 ] unsigned int 
  5774 ;;  ret             2   25[BANK0 ] unsigned int 
  5775 ;; Return value:  Size  Location     Type
  5776 ;;                  2  777[None  ] unsigned int 
  5777 ;; Registers used:
  5778 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5779 ;; Tracked objects:
  5780 ;;		On entry : 0/0
  5781 ;;		On exit  : 0/0
  5782 ;;		Unchanged: 0/0
  5783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5785 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5786 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5787 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5788 ;;Total ram usage:       10 bytes
  5789 ;; Hardware stack levels used:    1
  5790 ;; Hardware stack levels required when called:    4
  5791 ;; This function calls:
  5792 ;;		___wmul
  5793 ;;		_crc_verify
  5794 ;;		_my_flash_system_read
  5795 ;;		_sys_data_save
  5796 ;; This function is called by:
  5797 ;;		_main
  5798 ;; This function uses a non-reentrant model
  5799 ;;
  5800                           
  5801                           
  5802                           ;psect for function _sys_data_init
  5803  1241                     _sys_data_init:	
  5804                           
  5805                           ;sysData.c: 106: uint16_t ret,i;
  5806                           ;sysData.c: 107: my_flash_system_read((uint8_t*)&sysData,sizeof(sysData_t));
  5807                           
  5808                           ;incstack = 0
  5809                           ; Regs used in _sys_data_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5810  1241  305C               	movlw	92
  5811  1242  00F3               	movwf	my_flash_system_read@buf
  5812  1243  3023               	movlw	35
  5813  1244  00F4               	movwf	my_flash_system_read@buf+1
  5814  1245  3084               	movlw	132
  5815  1246  00F5               	movwf	my_flash_system_read@len
  5816  1247  3000               	movlw	0
  5817  1248  00F6               	movwf	my_flash_system_read@len+1
  5818  1249  319C  24D7  3192   	fcall	_my_flash_system_read
  5819                           
  5820                           ;sysData.c: 108: ret=crc_verify((uint8_t*)&sysData,sizeof(sysData_t));
  5821  124C  305C               	movlw	92
  5822  124D  0020               	movlb	0	; select bank0
  5823  124E  00A8               	movwf	crc_verify@message
  5824  124F  3023               	movlw	35
  5825  1250  00A9               	movwf	crc_verify@message+1
  5826  1251  3084               	movlw	132
  5827  1252  00AA               	movwf	crc_verify@n
  5828  1253  3000               	movlw	0
  5829  1254  00AB               	movwf	crc_verify@n+1
  5830  1255  319C  2469  3192   	fcall	_crc_verify
  5831  1258  0020               	movlb	0	; select bank0
  5832  1259  00B3               	movwf	??_sys_data_init
  5833  125A  01B4               	clrf	??_sys_data_init+1
  5834  125B  0833               	movf	??_sys_data_init,w
  5835  125C  00B9               	movwf	sys_data_init@ret
  5836  125D  0834               	movf	??_sys_data_init+1,w
  5837  125E  00BA               	movwf	sys_data_init@ret+1
  5838                           
  5839                           ;sysData.c: 109: if(!ret){
  5840  125F  0839               	movf	sys_data_init@ret,w
  5841  1260  043A               	iorwf	sys_data_init@ret+1,w
  5842  1261  1D03               	btfss	3,2
  5843  1262  0008               	return
  5844                           
  5845                           ;sysData.c: 110: sysData.pidSetFlg0=0xff;
  5846  1263  305C               	movlw	92
  5847  1264  0086               	movwf	6
  5848  1265  3023               	movlw	35
  5849  1266  0087               	movwf	7
  5850  1267  30FF               	movlw	255
  5851  1268  3FC0               	movwi [0]fsr1
  5852                           
  5853                           ;sysData.c: 111: sysData.pidSetFlg1=0xff;
  5854  1269  305D               	movlw	93
  5855  126A  0086               	movwf	6
  5856  126B  3023               	movlw	35
  5857  126C  0087               	movwf	7
  5858  126D  30FF               	movlw	255
  5859  126E  0081               	movwf	1
  5860                           
  5861                           ;sysData.c: 112: sysData.id=0xff;
  5862  126F  305E               	movlw	94
  5863  1270  0086               	movwf	6
  5864  1271  3023               	movlw	35
  5865  1272  0087               	movwf	7
  5866  1273  30FF               	movlw	255
  5867  1274  0081               	movwf	1
  5868                           
  5869                           ;sysData.c: 113: for(i=0;i<30;i++){
  5870  1275  01BB               	clrf	sys_data_init@i
  5871  1276  01BC               	clrf	sys_data_init@i+1
  5872  1277  3000               	movlw	0
  5873  1278  023C               	subwf	sys_data_init@i+1,w
  5874  1279  301E               	movlw	30
  5875  127A  1903               	skipnz
  5876  127B  023B               	subwf	sys_data_init@i,w
  5877  127C  1803               	btfsc	3,0
  5878  127D  2ACF               	goto	l5661
  5879  127E                     l5655:	
  5880                           
  5881                           ;sysData.c: 115: sysData.calibRsAdc[i]=6400+i*720;
  5882  127E  083C               	movf	sys_data_init@i+1,w
  5883  127F  00F4               	movwf	___wmul@multiplier+1
  5884  1280  083B               	movf	sys_data_init@i,w
  5885  1281  00F3               	movwf	___wmul@multiplier
  5886  1282  30D0               	movlw	208
  5887  1283  00F5               	movwf	___wmul@multiplicand
  5888  1284  3002               	movlw	2
  5889  1285  00F6               	movwf	___wmul@multiplicand+1
  5890  1286  319A  22BF  3192   	fcall	___wmul
  5891  1289  0873               	movf	?___wmul,w
  5892  128A  3E00               	addlw	0
  5893  128B  0020               	movlb	0	; select bank0
  5894  128C  00B3               	movwf	??_sys_data_init
  5895  128D  3019               	movlw	25
  5896  128E  3D74               	addwfc	?___wmul+1,w
  5897  128F  00B4               	movwf	??_sys_data_init+1
  5898  1290  083C               	movf	sys_data_init@i+1,w
  5899  1291  00B6               	movwf	??_sys_data_init+3
  5900  1292  083B               	movf	sys_data_init@i,w
  5901  1293  00B5               	movwf	??_sys_data_init+2
  5902  1294  35B5               	lslf	??_sys_data_init+2,f
  5903  1295  0DB6               	rlf	??_sys_data_init+3,f
  5904  1296  3066               	movlw	102
  5905  1297  00B7               	movwf	??_sys_data_init+4
  5906  1298  3023               	movlw	35
  5907  1299  00B8               	movwf	??_sys_data_init+5
  5908  129A  0835               	movf	??_sys_data_init+2,w
  5909  129B  0737               	addwf	??_sys_data_init+4,w
  5910  129C  0086               	movwf	6
  5911  129D  0836               	movf	??_sys_data_init+3,w
  5912  129E  3D38               	addwfc	??_sys_data_init+5,w
  5913  129F  0087               	movwf	7
  5914  12A0  0833               	movf	??_sys_data_init,w
  5915  12A1  3FC0               	movwi [0]fsr1
  5916  12A2  0834               	movf	??_sys_data_init+1,w
  5917  12A3  3FC1               	movwi [1]fsr1
  5918                           
  5919                           ;sysData.c: 116: sysData.calibVoMV[i]=i*333;
  5920  12A4  083C               	movf	sys_data_init@i+1,w
  5921  12A5  00F4               	movwf	___wmul@multiplier+1
  5922  12A6  083B               	movf	sys_data_init@i,w
  5923  12A7  00F3               	movwf	___wmul@multiplier
  5924  12A8  304D               	movlw	77
  5925  12A9  00F5               	movwf	___wmul@multiplicand
  5926  12AA  3001               	movlw	1
  5927  12AB  00F6               	movwf	___wmul@multiplicand+1
  5928  12AC  319A  22BF  3192   	fcall	___wmul
  5929  12AF  0020               	movlb	0	; select bank0
  5930  12B0  083C               	movf	sys_data_init@i+1,w
  5931  12B1  00B4               	movwf	??_sys_data_init+1
  5932  12B2  083B               	movf	sys_data_init@i,w
  5933  12B3  00B3               	movwf	??_sys_data_init
  5934  12B4  35B3               	lslf	??_sys_data_init,f
  5935  12B5  0DB4               	rlf	??_sys_data_init+1,f
  5936  12B6  30A2               	movlw	162
  5937  12B7  00B5               	movwf	??_sys_data_init+2
  5938  12B8  3023               	movlw	35
  5939  12B9  00B6               	movwf	??_sys_data_init+3
  5940  12BA  0833               	movf	??_sys_data_init,w
  5941  12BB  0735               	addwf	??_sys_data_init+2,w
  5942  12BC  0086               	movwf	6
  5943  12BD  0834               	movf	??_sys_data_init+1,w
  5944  12BE  3D36               	addwfc	??_sys_data_init+3,w
  5945  12BF  0087               	movwf	7
  5946  12C0  0873               	movf	?___wmul,w
  5947  12C1  3FC0               	movwi [0]fsr1
  5948  12C2  0874               	movf	?___wmul+1,w
  5949  12C3  3FC1               	movwi [1]fsr1
  5950  12C4  3001               	movlw	1
  5951  12C5  07BB               	addwf	sys_data_init@i,f
  5952  12C6  3000               	movlw	0
  5953  12C7  3DBC               	addwfc	sys_data_init@i+1,f
  5954  12C8  3000               	movlw	0
  5955  12C9  023C               	subwf	sys_data_init@i+1,w
  5956  12CA  301E               	movlw	30
  5957  12CB  1903               	skipnz
  5958  12CC  023B               	subwf	sys_data_init@i,w
  5959  12CD  1C03               	skipc
  5960  12CE  2A7E               	goto	l5655
  5961  12CF                     l5661:	
  5962                           
  5963                           ;sysData.c: 117: }
  5964                           ;sysData.c: 118: sys_data_save();
  5965  12CF  319C  24A0         	fcall	_sys_data_save
  5966  12D1  0008               	return
  5967  12D2                     __end_of_sys_data_init:	
  5968                           ;sysData.c: 126: }
  5969                           ;sysData.c: 128: return ret;
  5970                           ;	Return value of _sys_data_init is never used
  5971                           
  5972                           
  5973                           	psect	text4
  5974  1CD7                     __ptext4:	
  5975 ;; *************** function _my_flash_system_read *****************
  5976 ;; Defined at:
  5977 ;;		line 23 in file "src/api/sysData.c"
  5978 ;; Parameters:    Size  Location     Type
  5979 ;;  buf             2    3[COMMON] PTR unsigned char 
  5980 ;;		 -> sysData(132), 
  5981 ;;  len             2    5[COMMON] unsigned int 
  5982 ;; Auto vars:     Size  Location     Type
  5983 ;;  i               2    5[BANK0 ] unsigned int 
  5984 ;;  flashAddr       2    3[BANK0 ] unsigned int 
  5985 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
  5986 ;; Return value:  Size  Location     Type
  5987 ;;                  1    wreg      void 
  5988 ;; Registers used:
  5989 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5990 ;; Tracked objects:
  5991 ;;		On entry : 0/0
  5992 ;;		On exit  : 0/0
  5993 ;;		Unchanged: 0/0
  5994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5995 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5996 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5997 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5998 ;;      Totals:         4       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5999 ;;Total ram usage:       11 bytes
  6000 ;; Hardware stack levels used:    1
  6001 ;; Hardware stack levels required when called:    1
  6002 ;; This function calls:
  6003 ;;		Nothing
  6004 ;; This function is called by:
  6005 ;;		_sys_data_init
  6006 ;; This function uses a non-reentrant model
  6007 ;;
  6008                           
  6009                           
  6010                           ;psect for function _my_flash_system_read
  6011  1CD7                     _my_flash_system_read:	
  6012                           
  6013                           ;sysData.c: 25: uint16_t flashAddr=0x1f00;
  6014                           
  6015                           ;incstack = 0
  6016                           ; Regs used in _my_flash_system_read: [wreg+fsr1l+fsr1h+status,2+status,0]
  6017  1CD7  3000               	movlw	0
  6018  1CD8  0020               	movlb	0	; select bank0
  6019  1CD9  00A3               	movwf	my_flash_system_read@flashAddr
  6020  1CDA  301F               	movlw	31
  6021  1CDB  00A4               	movwf	my_flash_system_read@flashAddr+1
  6022                           
  6023                           ;sysData.c: 26: uint16_t i;
  6024                           ;sysData.c: 28: uint8_t GIEBitValue = INTCONbits.GIE;
  6025  1CDC  3000               	movlw	0
  6026  1CDD  1B8B               	btfsc	11,7	;volatile
  6027  1CDE  3001               	movlw	1
  6028  1CDF  00A2               	movwf	my_flash_system_read@GIEBitValue
  6029                           
  6030                           ;sysData.c: 30: INTCONbits.GIE = 0;
  6031  1CE0  138B               	bcf	11,7	;volatile
  6032                           
  6033                           ;sysData.c: 32: for(i=0;i<len;i++){
  6034  1CE1  01A5               	clrf	my_flash_system_read@i
  6035  1CE2  01A6               	clrf	my_flash_system_read@i+1
  6036  1CE3                     l5103:	
  6037  1CE3  0876               	movf	my_flash_system_read@len+1,w
  6038  1CE4  0226               	subwf	my_flash_system_read@i+1,w
  6039  1CE5  1D03               	skipz
  6040  1CE6  2CE9               	goto	u4375
  6041  1CE7  0875               	movf	my_flash_system_read@len,w
  6042  1CE8  0225               	subwf	my_flash_system_read@i,w
  6043  1CE9                     u4375:	
  6044  1CE9  1803               	btfsc	3,0
  6045  1CEA  2D0E               	goto	l5105
  6046                           
  6047                           ;sysData.c: 34: PMADRL = (flashAddr & 0x00FF);
  6048  1CEB  0823               	movf	my_flash_system_read@flashAddr,w
  6049  1CEC  0023               	movlb	3	; select bank3
  6050  1CED  0091               	movwf	17	;volatile
  6051                           
  6052                           ;sysData.c: 35: PMADRH = ((flashAddr & 0xFF00) >> 8);
  6053  1CEE  0020               	movlb	0	; select bank0
  6054  1CEF  0824               	movf	my_flash_system_read@flashAddr+1,w
  6055  1CF0  0023               	movlb	3	; select bank3
  6056  1CF1  0092               	movwf	18	;volatile
  6057                           
  6058                           ;sysData.c: 37: PMCON1bits.CFGS = 0;
  6059  1CF2  1315               	bcf	21,6	;volatile
  6060                           
  6061                           ;sysData.c: 38: PMCON1bits.RD = 1;
  6062  1CF3  1415               	bsf	21,0	;volatile
  6063                           
  6064                           ;sysData.c: 39: __nop();
  6065  1CF4  0000               	nop
  6066                           
  6067                           ;sysData.c: 40: __nop();
  6068  1CF5  0000               	nop
  6069                           
  6070                           ;sysData.c: 41: buf[i]=PMDATL;
  6071  1CF6  0020               	movlb	0	; select bank0
  6072  1CF7  0825               	movf	my_flash_system_read@i,w
  6073  1CF8  0773               	addwf	my_flash_system_read@buf,w
  6074  1CF9  00A0               	movwf	??_my_flash_system_read
  6075  1CFA  0826               	movf	my_flash_system_read@i+1,w
  6076  1CFB  3D74               	addwfc	my_flash_system_read@buf+1,w
  6077  1CFC  00A1               	movwf	??_my_flash_system_read+1
  6078  1CFD  0820               	movf	??_my_flash_system_read,w
  6079  1CFE  0086               	movwf	6
  6080  1CFF  0821               	movf	??_my_flash_system_read+1,w
  6081  1D00  0087               	movwf	7
  6082  1D01  0023               	movlb	3	; select bank3
  6083  1D02  0813               	movf	19,w	;volatile
  6084  1D03  0081               	movwf	1
  6085                           
  6086                           ;sysData.c: 42: flashAddr++;
  6087  1D04  3001               	movlw	1
  6088  1D05  0020               	movlb	0	; select bank0
  6089  1D06  07A3               	addwf	my_flash_system_read@flashAddr,f
  6090  1D07  3000               	movlw	0
  6091  1D08  3DA4               	addwfc	my_flash_system_read@flashAddr+1,f
  6092  1D09  3001               	movlw	1
  6093  1D0A  07A5               	addwf	my_flash_system_read@i,f
  6094  1D0B  3000               	movlw	0
  6095  1D0C  3DA6               	addwfc	my_flash_system_read@i+1,f
  6096  1D0D  2CE3               	goto	l5103
  6097  1D0E                     l5105:	
  6098                           
  6099                           ;sysData.c: 43: }
  6100                           ;sysData.c: 44: INTCONbits.GIE = GIEBitValue;
  6101  1D0E  0C22               	rrf	my_flash_system_read@GIEBitValue,w
  6102  1D0F  1C03               	skipc
  6103  1D10  138B               	bcf	11,7	;volatile
  6104  1D11  1803               	skipnc
  6105  1D12  178B               	bsf	11,7	;volatile
  6106  1D13  0008               	return
  6107  1D14                     __end_of_my_flash_system_read:	
  6108                           
  6109                           	psect	text5
  6110  12D2                     __ptext5:	
  6111 ;; *************** function _pid_pwm2_vout_run *****************
  6112 ;; Defined at:
  6113 ;;		line 351 in file "src/api/sample.c"
  6114 ;; Parameters:    Size  Location     Type
  6115 ;;		None
  6116 ;; Auto vars:     Size  Location     Type
  6117 ;;  t16             2   13[BANK0 ] int 
  6118 ;;  ei              2   11[BANK0 ] int 
  6119 ;; Return value:  Size  Location     Type
  6120 ;;                  1    wreg      void 
  6121 ;; Registers used:
  6122 ;;		wreg, status,2, status,0, pclath, cstack
  6123 ;; Tracked objects:
  6124 ;;		On entry : 0/0
  6125 ;;		On exit  : 0/0
  6126 ;;		Unchanged: 0/0
  6127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6129 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6130 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6131 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6132 ;;Total ram usage:        6 bytes
  6133 ;; Hardware stack levels used:    1
  6134 ;; Hardware stack levels required when called:    3
  6135 ;; This function calls:
  6136 ;;		___awdiv
  6137 ;;		___lwdiv
  6138 ;;		_set_vout_pwm2_duty
  6139 ;; This function is called by:
  6140 ;;		_main
  6141 ;; This function uses a non-reentrant model
  6142 ;;
  6143                           
  6144                           
  6145                           ;psect for function _pid_pwm2_vout_run
  6146  12D2                     _pid_pwm2_vout_run:	
  6147                           
  6148                           ;sample.c: 353: int16_t t16,ei;
  6149                           ;sample.c: 354: t16=voExpectAdcValue-rtAdcValueVoFb;
  6150                           
  6151                           ;incstack = 0
  6152                           ; Regs used in _pid_pwm2_vout_run: [wreg+status,2+status,0+pclath+cstack]
  6153  12D2  0021               	movlb	1	; select bank1
  6154  12D3  0950               	comf	_rtAdcValueVoFb^(0+128),w
  6155  12D4  0020               	movlb	0	; select bank0
  6156  12D5  00A9               	movwf	??_pid_pwm2_vout_run
  6157  12D6  0021               	movlb	1	; select bank1
  6158  12D7  0951               	comf	(_rtAdcValueVoFb+1)^(0+128),w
  6159  12D8  0020               	movlb	0	; select bank0
  6160  12D9  00AA               	movwf	??_pid_pwm2_vout_run+1
  6161  12DA  0AA9               	incf	??_pid_pwm2_vout_run,f
  6162  12DB  1903               	skipnz
  6163  12DC  0AAA               	incf	??_pid_pwm2_vout_run+1,f
  6164  12DD  0860               	movf	_voExpectAdcValue,w
  6165  12DE  0729               	addwf	??_pid_pwm2_vout_run,w
  6166  12DF  00AD               	movwf	pid_pwm2_vout_run@t16
  6167  12E0  0861               	movf	_voExpectAdcValue+1,w
  6168  12E1  3D2A               	addwfc	??_pid_pwm2_vout_run+1,w
  6169  12E2  00AE               	movwf	pid_pwm2_vout_run@t16+1
  6170                           
  6171                           ;sample.c: 355: ei=t16/150;
  6172  12E3  3096               	movlw	150
  6173  12E4  00F3               	movwf	___awdiv@divisor
  6174  12E5  3000               	movlw	0
  6175  12E6  00F4               	movwf	___awdiv@divisor+1
  6176  12E7  082E               	movf	pid_pwm2_vout_run@t16+1,w
  6177  12E8  00F6               	movwf	___awdiv@dividend+1
  6178  12E9  082D               	movf	pid_pwm2_vout_run@t16,w
  6179  12EA  00F5               	movwf	___awdiv@dividend
  6180  12EB  319D  2553  3192   	fcall	___awdiv
  6181  12EE  0874               	movf	?___awdiv+1,w
  6182  12EF  0020               	movlb	0	; select bank0
  6183  12F0  00AC               	movwf	pid_pwm2_vout_run@ei+1
  6184  12F1  0873               	movf	?___awdiv,w
  6185  12F2  00AB               	movwf	pid_pwm2_vout_run@ei
  6186                           
  6187                           ;sample.c: 356: if(ei==0){
  6188  12F3  082B               	movf	pid_pwm2_vout_run@ei,w
  6189  12F4  042C               	iorwf	pid_pwm2_vout_run@ei+1,w
  6190  12F5  1D03               	btfss	3,2
  6191  12F6  2B18               	goto	l5551
  6192                           
  6193                           ;sample.c: 357: if(t16>16)ei=1;
  6194  12F7  082E               	movf	pid_pwm2_vout_run@t16+1,w
  6195  12F8  3A80               	xorlw	128
  6196  12F9  00A9               	movwf	??_pid_pwm2_vout_run
  6197  12FA  3080               	movlw	128
  6198  12FB  0229               	subwf	??_pid_pwm2_vout_run,w
  6199  12FC  1D03               	skipz
  6200  12FD  2B00               	goto	u5105
  6201  12FE  3011               	movlw	17
  6202  12FF  022D               	subwf	pid_pwm2_vout_run@t16,w
  6203  1300                     u5105:	
  6204  1300  1C03               	skipc
  6205  1301  2B07               	goto	l694
  6206  1302  3001               	movlw	1
  6207  1303  0020               	movlb	0	; select bank0
  6208  1304  00AB               	movwf	pid_pwm2_vout_run@ei
  6209  1305  3000               	movlw	0
  6210  1306  00AC               	movwf	pid_pwm2_vout_run@ei+1
  6211  1307                     l694:	
  6212                           
  6213                           ;sample.c: 358: if(t16<-16)ei=-1;
  6214  1307  0020               	movlb	0	; select bank0
  6215  1308  082E               	movf	pid_pwm2_vout_run@t16+1,w
  6216  1309  3A80               	xorlw	128
  6217  130A  00A9               	movwf	??_pid_pwm2_vout_run
  6218  130B  307F               	movlw	127
  6219  130C  0229               	subwf	??_pid_pwm2_vout_run,w
  6220  130D  1D03               	skipz
  6221  130E  2B11               	goto	u5115
  6222  130F  30F0               	movlw	240
  6223  1310  022D               	subwf	pid_pwm2_vout_run@t16,w
  6224  1311                     u5115:	
  6225  1311  1803               	skipnc
  6226  1312  2B18               	goto	l5551
  6227  1313  30FF               	movlw	255
  6228  1314  0020               	movlb	0	; select bank0
  6229  1315  00AB               	movwf	pid_pwm2_vout_run@ei
  6230  1316  30FF               	movlw	255
  6231  1317  00AC               	movwf	pid_pwm2_vout_run@ei+1
  6232  1318                     l5551:	
  6233                           
  6234                           ;sample.c: 359: }
  6235                           ;sample.c: 361: pwm2Ei=pwm2Ei+ei;
  6236  1318  0020               	movlb	0	; select bank0
  6237  1319  082B               	movf	pid_pwm2_vout_run@ei,w
  6238  131A  0021               	movlb	1	; select bank1
  6239  131B  0744               	addwf	_pwm2Ei^(0+128),w
  6240  131C  00C4               	movwf	_pwm2Ei^(0+128)
  6241  131D  0020               	movlb	0	; select bank0
  6242  131E  082C               	movf	pid_pwm2_vout_run@ei+1,w
  6243  131F  0021               	movlb	1	; select bank1
  6244  1320  3D45               	addwfc	(_pwm2Ei+1)^(0+128),w
  6245  1321  00C5               	movwf	(_pwm2Ei+1)^(0+128)
  6246                           
  6247                           ;sample.c: 365: t16=voExpectAdcValue/10;
  6248  1322  300A               	movlw	10
  6249  1323  0020               	movlb	0	; select bank0
  6250  1324  00A2               	movwf	___lwdiv@divisor
  6251  1325  3000               	movlw	0
  6252  1326  00A3               	movwf	___lwdiv@divisor+1
  6253  1327  0861               	movf	_voExpectAdcValue+1,w
  6254  1328  00A5               	movwf	___lwdiv@dividend+1
  6255  1329  0860               	movf	_voExpectAdcValue,w
  6256  132A  00A4               	movwf	___lwdiv@dividend
  6257  132B  319C  2434  3192   	fcall	___lwdiv
  6258  132E  0020               	movlb	0	; select bank0
  6259  132F  0823               	movf	?___lwdiv+1,w
  6260  1330  00AE               	movwf	pid_pwm2_vout_run@t16+1
  6261  1331  0822               	movf	?___lwdiv,w
  6262  1332  00AD               	movwf	pid_pwm2_vout_run@t16
  6263                           
  6264                           ;sample.c: 367: t16=t16+pwm2Ei;
  6265  1333  0021               	movlb	1	; select bank1
  6266  1334  0844               	movf	_pwm2Ei^(0+128),w
  6267  1335  0020               	movlb	0	; select bank0
  6268  1336  072D               	addwf	pid_pwm2_vout_run@t16,w
  6269  1337  00AD               	movwf	pid_pwm2_vout_run@t16
  6270  1338  0021               	movlb	1	; select bank1
  6271  1339  0845               	movf	(_pwm2Ei+1)^(0+128),w
  6272  133A  0020               	movlb	0	; select bank0
  6273  133B  3D2E               	addwfc	pid_pwm2_vout_run@t16+1,w
  6274  133C  00AE               	movwf	pid_pwm2_vout_run@t16+1
  6275                           
  6276                           ;sample.c: 368: if(t16>1580)t16=1580;
  6277  133D  082E               	movf	pid_pwm2_vout_run@t16+1,w
  6278  133E  3A80               	xorlw	128
  6279  133F  00A9               	movwf	??_pid_pwm2_vout_run
  6280  1340  3086               	movlw	134
  6281  1341  0229               	subwf	??_pid_pwm2_vout_run,w
  6282  1342  1D03               	skipz
  6283  1343  2B46               	goto	u5125
  6284  1344  302D               	movlw	45
  6285  1345  022D               	subwf	pid_pwm2_vout_run@t16,w
  6286  1346                     u5125:	
  6287  1346  1C03               	skipc
  6288  1347  2B4D               	goto	l696
  6289  1348  302C               	movlw	44
  6290  1349  0020               	movlb	0	; select bank0
  6291  134A  00AD               	movwf	pid_pwm2_vout_run@t16
  6292  134B  3006               	movlw	6
  6293  134C  00AE               	movwf	pid_pwm2_vout_run@t16+1
  6294  134D                     l696:	
  6295                           
  6296                           ;sample.c: 369: if(t16<5)t16=5;
  6297  134D  0020               	movlb	0	; select bank0
  6298  134E  082E               	movf	pid_pwm2_vout_run@t16+1,w
  6299  134F  3A80               	xorlw	128
  6300  1350  00A9               	movwf	??_pid_pwm2_vout_run
  6301  1351  3080               	movlw	128
  6302  1352  0229               	subwf	??_pid_pwm2_vout_run,w
  6303  1353  1D03               	skipz
  6304  1354  2B57               	goto	u5135
  6305  1355  3005               	movlw	5
  6306  1356  022D               	subwf	pid_pwm2_vout_run@t16,w
  6307  1357                     u5135:	
  6308  1357  1803               	skipnc
  6309  1358  2B5E               	goto	l5563
  6310  1359  3005               	movlw	5
  6311  135A  0020               	movlb	0	; select bank0
  6312  135B  00AD               	movwf	pid_pwm2_vout_run@t16
  6313  135C  3000               	movlw	0
  6314  135D  00AE               	movwf	pid_pwm2_vout_run@t16+1
  6315  135E                     l5563:	
  6316                           
  6317                           ;sample.c: 370: set_vout_pwm2_duty((uint16_t)t16);
  6318  135E  0020               	movlb	0	; select bank0
  6319  135F  082E               	movf	pid_pwm2_vout_run@t16+1,w
  6320  1360  00A3               	movwf	set_vout_pwm2_duty@duty+1
  6321  1361  082D               	movf	pid_pwm2_vout_run@t16,w
  6322  1362  00A2               	movwf	set_vout_pwm2_duty@duty
  6323  1363  319B  2388         	fcall	_set_vout_pwm2_duty
  6324  1365  0008               	return
  6325  1366                     __end_of_pid_pwm2_vout_run:	
  6326                           
  6327                           	psect	text6
  6328  1B88                     __ptext6:	
  6329 ;; *************** function _set_vout_pwm2_duty *****************
  6330 ;; Defined at:
  6331 ;;		line 101 in file "src/api/sample.c"
  6332 ;; Parameters:    Size  Location     Type
  6333 ;;  duty            2    2[BANK0 ] unsigned int 
  6334 ;; Auto vars:     Size  Location     Type
  6335 ;;  t16             2    4[BANK0 ] unsigned int 
  6336 ;; Return value:  Size  Location     Type
  6337 ;;                  1    wreg      void 
  6338 ;; Registers used:
  6339 ;;		wreg, status,2, pclath, cstack
  6340 ;; Tracked objects:
  6341 ;;		On entry : 0/0
  6342 ;;		On exit  : 0/0
  6343 ;;		Unchanged: 0/0
  6344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6345 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6346 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6348 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6349 ;;Total ram usage:        4 bytes
  6350 ;; Hardware stack levels used:    1
  6351 ;; Hardware stack levels required when called:    2
  6352 ;; This function calls:
  6353 ;;		_get_vout_pwm2_duty
  6354 ;; This function is called by:
  6355 ;;		_pid_pwm2_vout_run
  6356 ;; This function uses a non-reentrant model
  6357 ;;
  6358                           
  6359                           
  6360                           ;psect for function _set_vout_pwm2_duty
  6361  1B88                     _set_vout_pwm2_duty:	
  6362                           
  6363                           ;sample.c: 104: uint16_t t16;
  6364                           ;sample.c: 105: pwm2DutyForVout=duty;
  6365                           
  6366                           ;incstack = 0
  6367                           ; Regs used in _set_vout_pwm2_duty: [wreg+status,2+pclath+cstack]
  6368  1B88  0020               	movlb	0	; select bank0
  6369  1B89  0823               	movf	set_vout_pwm2_duty@duty+1,w
  6370  1B8A  0021               	movlb	1	; select bank1
  6371  1B8B  00E9               	movwf	(_pwm2DutyForVout+1)^(0+128)
  6372  1B8C  0020               	movlb	0	; select bank0
  6373  1B8D  0822               	movf	set_vout_pwm2_duty@duty,w
  6374  1B8E  0021               	movlb	1	; select bank1
  6375  1B8F  00E8               	movwf	_pwm2DutyForVout^(0+128)
  6376                           
  6377                           ;sample.c: 106: t16=get_vout_pwm2_duty();
  6378  1B90  319A  22A3  319B   	fcall	_get_vout_pwm2_duty
  6379  1B93  0874               	movf	?_get_vout_pwm2_duty+1,w
  6380  1B94  0020               	movlb	0	; select bank0
  6381  1B95  00A5               	movwf	set_vout_pwm2_duty@t16+1
  6382  1B96  0873               	movf	?_get_vout_pwm2_duty,w
  6383  1B97  00A4               	movwf	set_vout_pwm2_duty@t16
  6384                           
  6385                           ;sample.c: 107: if(t16==duty)return;
  6386  1B98  0823               	movf	set_vout_pwm2_duty@duty+1,w
  6387  1B99  0625               	xorwf	set_vout_pwm2_duty@t16+1,w
  6388  1B9A  1D03               	skipz
  6389  1B9B  2B9E               	goto	u4365
  6390  1B9C  0822               	movf	set_vout_pwm2_duty@duty,w
  6391  1B9D  0624               	xorwf	set_vout_pwm2_duty@t16,w
  6392  1B9E                     u4365:	
  6393  1B9E  1903               	btfsc	3,2
  6394  1B9F  0008               	return
  6395                           
  6396                           ;sample.c: 111: PWM2CONbits.EN = 0;
  6397  1BA0  003B               	movlb	27	; select bank27
  6398  1BA1  13AB               	bcf	43,7	;volatile
  6399                           
  6400                           ;sample.c: 112: PWM2DCL= (uint8_t)(duty&0xff);
  6401  1BA2  0020               	movlb	0	; select bank0
  6402  1BA3  0822               	movf	set_vout_pwm2_duty@duty,w
  6403  1BA4  003B               	movlb	27	; select bank27
  6404  1BA5  00A3               	movwf	35	;volatile
  6405                           
  6406                           ;sample.c: 113: PWM2DCH=(uint8_t)(duty>>8);
  6407  1BA6  0020               	movlb	0	; select bank0
  6408  1BA7  0823               	movf	set_vout_pwm2_duty@duty+1,w
  6409  1BA8  003B               	movlb	27	; select bank27
  6410  1BA9  00A4               	movwf	36	;volatile
  6411                           
  6412                           ;sample.c: 114: PWM2CONbits.EN = 1;
  6413  1BAA  17AB               	bsf	43,7	;volatile
  6414  1BAB  0008               	return
  6415  1BAC                     __end_of_set_vout_pwm2_duty:	
  6416                           
  6417                           	psect	text7
  6418  1AA3                     __ptext7:	
  6419 ;; *************** function _get_vout_pwm2_duty *****************
  6420 ;; Defined at:
  6421 ;;		line 92 in file "src/api/sample.c"
  6422 ;; Parameters:    Size  Location     Type
  6423 ;;		None
  6424 ;; Auto vars:     Size  Location     Type
  6425 ;;  t16             2    0[BANK0 ] unsigned int 
  6426 ;; Return value:  Size  Location     Type
  6427 ;;                  2    3[COMMON] unsigned int 
  6428 ;; Registers used:
  6429 ;;		wreg
  6430 ;; Tracked objects:
  6431 ;;		On entry : 0/0
  6432 ;;		On exit  : 0/0
  6433 ;;		Unchanged: 0/0
  6434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6435 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6436 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6437 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6438 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6439 ;;Total ram usage:        6 bytes
  6440 ;; Hardware stack levels used:    1
  6441 ;; Hardware stack levels required when called:    1
  6442 ;; This function calls:
  6443 ;;		Nothing
  6444 ;; This function is called by:
  6445 ;;		_set_vout_pwm2_duty
  6446 ;; This function uses a non-reentrant model
  6447 ;;
  6448                           
  6449                           
  6450                           ;psect for function _get_vout_pwm2_duty
  6451  1AA3                     _get_vout_pwm2_duty:	
  6452                           
  6453                           ;sample.c: 95: uint16_t t16=PWM2DCH;
  6454                           
  6455                           ;incstack = 0
  6456                           ; Regs used in _get_vout_pwm2_duty: [wreg]
  6457  1AA3  003B               	movlb	27	; select bank27
  6458  1AA4  0824               	movf	36,w	;volatile
  6459  1AA5  00F5               	movwf	??_get_vout_pwm2_duty
  6460  1AA6  01F6               	clrf	??_get_vout_pwm2_duty+1
  6461  1AA7  0875               	movf	??_get_vout_pwm2_duty,w
  6462  1AA8  0020               	movlb	0	; select bank0
  6463  1AA9  00A0               	movwf	get_vout_pwm2_duty@t16
  6464  1AAA  0876               	movf	??_get_vout_pwm2_duty+1,w
  6465  1AAB  00A1               	movwf	get_vout_pwm2_duty@t16+1
  6466                           
  6467                           ;sample.c: 96: t16<<=8;
  6468  1AAC  3008               	movlw	8
  6469  1AAD                     u4305:	
  6470  1AAD  35A0               	lslf	get_vout_pwm2_duty@t16,f
  6471  1AAE  0DA1               	rlf	get_vout_pwm2_duty@t16+1,f
  6472  1AAF  0B89               	decfsz	9,f
  6473  1AB0  2AAD               	goto	u4305
  6474                           
  6475                           ;sample.c: 97: t16|=PWM2DCL;
  6476  1AB1  003B               	movlb	27	; select bank27
  6477  1AB2  0823               	movf	35,w	;volatile
  6478  1AB3  00F5               	movwf	??_get_vout_pwm2_duty
  6479  1AB4  01F6               	clrf	??_get_vout_pwm2_duty+1
  6480  1AB5  0875               	movf	??_get_vout_pwm2_duty,w
  6481  1AB6  0020               	movlb	0	; select bank0
  6482  1AB7  04A0               	iorwf	get_vout_pwm2_duty@t16,f
  6483  1AB8  0876               	movf	??_get_vout_pwm2_duty+1,w
  6484  1AB9  04A1               	iorwf	get_vout_pwm2_duty@t16+1,f
  6485                           
  6486                           ;sample.c: 98: return t16;
  6487  1ABA  0821               	movf	get_vout_pwm2_duty@t16+1,w
  6488  1ABB  00F4               	movwf	?_get_vout_pwm2_duty+1
  6489  1ABC  0820               	movf	get_vout_pwm2_duty@t16,w
  6490  1ABD  00F3               	movwf	?_get_vout_pwm2_duty
  6491  1ABE  0008               	return
  6492  1ABF                     __end_of_get_vout_pwm2_duty:	
  6493                           
  6494                           	psect	text8
  6495  1D53                     __ptext8:	
  6496 ;; *************** function ___awdiv *****************
  6497 ;; Defined at:
  6498 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  6499 ;; Parameters:    Size  Location     Type
  6500 ;;  divisor         2    3[COMMON] int 
  6501 ;;  dividend        2    5[COMMON] int 
  6502 ;; Auto vars:     Size  Location     Type
  6503 ;;  quotient        2    2[BANK0 ] int 
  6504 ;;  sign            1    1[BANK0 ] unsigned char 
  6505 ;;  counter         1    0[BANK0 ] unsigned char 
  6506 ;; Return value:  Size  Location     Type
  6507 ;;                  2    3[COMMON] int 
  6508 ;; Registers used:
  6509 ;;		wreg, status,2, status,0
  6510 ;; Tracked objects:
  6511 ;;		On entry : 0/0
  6512 ;;		On exit  : 0/0
  6513 ;;		Unchanged: 0/0
  6514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6515 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6516 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6517 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6518 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6519 ;;Total ram usage:        9 bytes
  6520 ;; Hardware stack levels used:    1
  6521 ;; Hardware stack levels required when called:    1
  6522 ;; This function calls:
  6523 ;;		Nothing
  6524 ;; This function is called by:
  6525 ;;		_pid_pwm2_vout_run
  6526 ;; This function uses a non-reentrant model
  6527 ;;
  6528                           
  6529                           
  6530                           ;psect for function ___awdiv
  6531  1D53                     ___awdiv:	
  6532                           
  6533                           ;incstack = 0
  6534                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6535  1D53  0020               	movlb	0	; select bank0
  6536  1D54  01A1               	clrf	___awdiv@sign
  6537  1D55  1FF4               	btfss	___awdiv@divisor+1,7
  6538  1D56  2D5E               	goto	l4029
  6539  1D57  09F3               	comf	___awdiv@divisor,f
  6540  1D58  09F4               	comf	___awdiv@divisor+1,f
  6541  1D59  0AF3               	incf	___awdiv@divisor,f
  6542  1D5A  1903               	skipnz
  6543  1D5B  0AF4               	incf	___awdiv@divisor+1,f
  6544  1D5C  01A1               	clrf	___awdiv@sign
  6545  1D5D  0AA1               	incf	___awdiv@sign,f
  6546  1D5E                     l4029:	
  6547  1D5E  1FF6               	btfss	___awdiv@dividend+1,7
  6548  1D5F  2D69               	goto	l4035
  6549  1D60  09F5               	comf	___awdiv@dividend,f
  6550  1D61  09F6               	comf	___awdiv@dividend+1,f
  6551  1D62  0AF5               	incf	___awdiv@dividend,f
  6552  1D63  1903               	skipnz
  6553  1D64  0AF6               	incf	___awdiv@dividend+1,f
  6554  1D65  3001               	movlw	1
  6555  1D66  00F7               	movwf	??___awdiv
  6556  1D67  0877               	movf	??___awdiv,w
  6557  1D68  06A1               	xorwf	___awdiv@sign,f
  6558  1D69                     l4035:	
  6559  1D69  01A2               	clrf	___awdiv@quotient
  6560  1D6A  01A3               	clrf	___awdiv@quotient+1
  6561  1D6B  0873               	movf	___awdiv@divisor,w
  6562  1D6C  0474               	iorwf	___awdiv@divisor+1,w
  6563  1D6D  1903               	btfsc	3,2
  6564  1D6E  2D98               	goto	l4057
  6565  1D6F  01A0               	clrf	___awdiv@counter
  6566  1D70  0AA0               	incf	___awdiv@counter,f
  6567  1D71                     l4045:	
  6568  1D71  1BF4               	btfsc	___awdiv@divisor+1,7
  6569  1D72  2D7D               	goto	l4047
  6570  1D73  3001               	movlw	1
  6571  1D74                     u3005:	
  6572  1D74  35F3               	lslf	___awdiv@divisor,f
  6573  1D75  0DF4               	rlf	___awdiv@divisor+1,f
  6574  1D76  0B89               	decfsz	9,f
  6575  1D77  2D74               	goto	u3005
  6576  1D78  3001               	movlw	1
  6577  1D79  00F7               	movwf	??___awdiv
  6578  1D7A  0877               	movf	??___awdiv,w
  6579  1D7B  07A0               	addwf	___awdiv@counter,f
  6580  1D7C  2D71               	goto	l4045
  6581  1D7D                     l4047:	
  6582  1D7D  3001               	movlw	1
  6583  1D7E                     u3025:	
  6584  1D7E  35A2               	lslf	___awdiv@quotient,f
  6585  1D7F  0DA3               	rlf	___awdiv@quotient+1,f
  6586  1D80  0B89               	decfsz	9,f
  6587  1D81  2D7E               	goto	u3025
  6588  1D82  0874               	movf	___awdiv@divisor+1,w
  6589  1D83  0276               	subwf	___awdiv@dividend+1,w
  6590  1D84  1D03               	skipz
  6591  1D85  2D88               	goto	u3035
  6592  1D86  0873               	movf	___awdiv@divisor,w
  6593  1D87  0275               	subwf	___awdiv@dividend,w
  6594  1D88                     u3035:	
  6595  1D88  1C03               	skipc
  6596  1D89  2D8F               	goto	l4053
  6597  1D8A  0873               	movf	___awdiv@divisor,w
  6598  1D8B  02F5               	subwf	___awdiv@dividend,f
  6599  1D8C  0874               	movf	___awdiv@divisor+1,w
  6600  1D8D  3BF6               	subwfb	___awdiv@dividend+1,f
  6601  1D8E  1422               	bsf	___awdiv@quotient,0
  6602  1D8F                     l4053:	
  6603  1D8F  3001               	movlw	1
  6604  1D90                     u3045:	
  6605  1D90  36F4               	lsrf	___awdiv@divisor+1,f
  6606  1D91  0CF3               	rrf	___awdiv@divisor,f
  6607  1D92  0B89               	decfsz	9,f
  6608  1D93  2D90               	goto	u3045
  6609  1D94  3001               	movlw	1
  6610  1D95  02A0               	subwf	___awdiv@counter,f
  6611  1D96  1D03               	btfss	3,2
  6612  1D97  2D7D               	goto	l4047
  6613  1D98                     l4057:	
  6614  1D98  0821               	movf	___awdiv@sign,w
  6615  1D99  1903               	btfsc	3,2
  6616  1D9A  2DA0               	goto	l4061
  6617  1D9B  09A2               	comf	___awdiv@quotient,f
  6618  1D9C  09A3               	comf	___awdiv@quotient+1,f
  6619  1D9D  0AA2               	incf	___awdiv@quotient,f
  6620  1D9E  1903               	skipnz
  6621  1D9F  0AA3               	incf	___awdiv@quotient+1,f
  6622  1DA0                     l4061:	
  6623  1DA0  0823               	movf	___awdiv@quotient+1,w
  6624  1DA1  00F4               	movwf	?___awdiv+1
  6625  1DA2  0822               	movf	___awdiv@quotient,w
  6626  1DA3  00F3               	movwf	?___awdiv
  6627  1DA4  0008               	return
  6628  1DA5                     __end_of___awdiv:	
  6629                           
  6630                           	psect	text9
  6631  1691                     __ptext9:	
  6632 ;; *************** function _pid_pwm1_idrv_run *****************
  6633 ;; Defined at:
  6634 ;;		line 321 in file "src/api/sample.c"
  6635 ;; Parameters:    Size  Location     Type
  6636 ;;		None
  6637 ;; Auto vars:     Size  Location     Type
  6638 ;;  t32             4   38[BANK0 ] long 
  6639 ;;  ei              4   34[BANK0 ] long 
  6640 ;;  ep              4   30[BANK0 ] long 
  6641 ;;  ed              4    0        long 
  6642 ;; Return value:  Size  Location     Type
  6643 ;;                  1    wreg      void 
  6644 ;; Registers used:
  6645 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6646 ;; Tracked objects:
  6647 ;;		On entry : 0/0
  6648 ;;		On exit  : 0/0
  6649 ;;		Unchanged: 0/0
  6650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6652 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6653 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6654 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6655 ;;Total ram usage:       20 bytes
  6656 ;; Hardware stack levels used:    1
  6657 ;; Hardware stack levels required when called:    3
  6658 ;; This function calls:
  6659 ;;		___aldiv
  6660 ;;		___lmul
  6661 ;;		_set_idrv_pwm1_duty
  6662 ;; This function is called by:
  6663 ;;		_main
  6664 ;; This function uses a non-reentrant model
  6665 ;;
  6666                           
  6667                           
  6668                           ;psect for function _pid_pwm1_idrv_run
  6669  1691                     _pid_pwm1_idrv_run:	
  6670                           
  6671                           ;sample.c: 324: int32_t ep,ei,ed;
  6672                           ;sample.c: 325: int32_t t32;
  6673                           ;sample.c: 326: t32=((int32_t)resRs-(int32_t)resRc);
  6674                           
  6675                           ;incstack = 0
  6676                           ; Regs used in _pid_pwm1_idrv_run: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6677  1691  0020               	movlb	0	; select bank0
  6678  1692  086E               	movf	_resRc,w
  6679  1693  00B6               	movwf	??_pid_pwm1_idrv_run
  6680  1694  086F               	movf	_resRc+1,w
  6681  1695  00B7               	movwf	??_pid_pwm1_idrv_run+1
  6682  1696  01B8               	clrf	??_pid_pwm1_idrv_run+2
  6683  1697  01B9               	clrf	??_pid_pwm1_idrv_run+3
  6684  1698  09B6               	comf	??_pid_pwm1_idrv_run,f
  6685  1699  09B7               	comf	??_pid_pwm1_idrv_run+1,f
  6686  169A  09B8               	comf	??_pid_pwm1_idrv_run+2,f
  6687  169B  09B9               	comf	??_pid_pwm1_idrv_run+3,f
  6688  169C  0AB6               	incf	??_pid_pwm1_idrv_run,f
  6689  169D  1903               	skipnz
  6690  169E  0AB7               	incf	??_pid_pwm1_idrv_run+1,f
  6691  169F  1903               	skipnz
  6692  16A0  0AB8               	incf	??_pid_pwm1_idrv_run+2,f
  6693  16A1  1903               	skipnz
  6694  16A2  0AB9               	incf	??_pid_pwm1_idrv_run+3,f
  6695  16A3  086C               	movf	_resRs,w
  6696  16A4  00BA               	movwf	??_pid_pwm1_idrv_run+4
  6697  16A5  086D               	movf	_resRs+1,w
  6698  16A6  00BB               	movwf	??_pid_pwm1_idrv_run+5
  6699  16A7  01BC               	clrf	??_pid_pwm1_idrv_run+6
  6700  16A8  01BD               	clrf	??_pid_pwm1_idrv_run+7
  6701  16A9  083A               	movf	??_pid_pwm1_idrv_run+4,w
  6702  16AA  07B6               	addwf	??_pid_pwm1_idrv_run,f
  6703  16AB  083B               	movf	??_pid_pwm1_idrv_run+5,w
  6704  16AC  3DB7               	addwfc	??_pid_pwm1_idrv_run+1,f
  6705  16AD  083C               	movf	??_pid_pwm1_idrv_run+6,w
  6706  16AE  3DB8               	addwfc	??_pid_pwm1_idrv_run+2,f
  6707  16AF  083D               	movf	??_pid_pwm1_idrv_run+7,w
  6708  16B0  3DB9               	addwfc	??_pid_pwm1_idrv_run+3,f
  6709  16B1  0839               	movf	??_pid_pwm1_idrv_run+3,w
  6710  16B2  00C9               	movwf	pid_pwm1_idrv_run@t32+3
  6711  16B3  0838               	movf	??_pid_pwm1_idrv_run+2,w
  6712  16B4  00C8               	movwf	pid_pwm1_idrv_run@t32+2
  6713  16B5  0837               	movf	??_pid_pwm1_idrv_run+1,w
  6714  16B6  00C7               	movwf	pid_pwm1_idrv_run@t32+1
  6715  16B7  0836               	movf	??_pid_pwm1_idrv_run,w
  6716  16B8  00C6               	movwf	pid_pwm1_idrv_run@t32
  6717                           
  6718                           ;sample.c: 327: t32=2000-t32;
  6719  16B9  30D0               	movlw	208
  6720  16BA  00B6               	movwf	??_pid_pwm1_idrv_run
  6721  16BB  3007               	movlw	7
  6722  16BC  00B7               	movwf	??_pid_pwm1_idrv_run+1
  6723  16BD  3000               	movlw	0
  6724  16BE  00B8               	movwf	??_pid_pwm1_idrv_run+2
  6725  16BF  3000               	movlw	0
  6726  16C0  00B9               	movwf	??_pid_pwm1_idrv_run+3
  6727  16C1  0946               	comf	pid_pwm1_idrv_run@t32,w
  6728  16C2  00BA               	movwf	??_pid_pwm1_idrv_run+4
  6729  16C3  0947               	comf	pid_pwm1_idrv_run@t32+1,w
  6730  16C4  00BB               	movwf	??_pid_pwm1_idrv_run+5
  6731  16C5  0948               	comf	pid_pwm1_idrv_run@t32+2,w
  6732  16C6  00BC               	movwf	??_pid_pwm1_idrv_run+6
  6733  16C7  0949               	comf	pid_pwm1_idrv_run@t32+3,w
  6734  16C8  00BD               	movwf	??_pid_pwm1_idrv_run+7
  6735  16C9  0ABA               	incf	??_pid_pwm1_idrv_run+4,f
  6736  16CA  1903               	skipnz
  6737  16CB  0ABB               	incf	??_pid_pwm1_idrv_run+5,f
  6738  16CC  1903               	skipnz
  6739  16CD  0ABC               	incf	??_pid_pwm1_idrv_run+6,f
  6740  16CE  1903               	skipnz
  6741  16CF  0ABD               	incf	??_pid_pwm1_idrv_run+7,f
  6742  16D0  083A               	movf	??_pid_pwm1_idrv_run+4,w
  6743  16D1  07B6               	addwf	??_pid_pwm1_idrv_run,f
  6744  16D2  083B               	movf	??_pid_pwm1_idrv_run+5,w
  6745  16D3  3DB7               	addwfc	??_pid_pwm1_idrv_run+1,f
  6746  16D4  083C               	movf	??_pid_pwm1_idrv_run+6,w
  6747  16D5  3DB8               	addwfc	??_pid_pwm1_idrv_run+2,f
  6748  16D6  083D               	movf	??_pid_pwm1_idrv_run+7,w
  6749  16D7  3DB9               	addwfc	??_pid_pwm1_idrv_run+3,f
  6750  16D8  0839               	movf	??_pid_pwm1_idrv_run+3,w
  6751  16D9  00C9               	movwf	pid_pwm1_idrv_run@t32+3
  6752  16DA  0838               	movf	??_pid_pwm1_idrv_run+2,w
  6753  16DB  00C8               	movwf	pid_pwm1_idrv_run@t32+2
  6754  16DC  0837               	movf	??_pid_pwm1_idrv_run+1,w
  6755  16DD  00C7               	movwf	pid_pwm1_idrv_run@t32+1
  6756  16DE  0836               	movf	??_pid_pwm1_idrv_run,w
  6757  16DF  00C6               	movwf	pid_pwm1_idrv_run@t32
  6758                           
  6759                           ;sample.c: 329: err[2]=err[1];
  6760  16E0  3004               	movlw	4
  6761  16E1  3EA0               	addlw	(low (_err| 0))& (0+255)
  6762  16E2  0086               	movwf	6
  6763  16E3  0187               	clrf	7
  6764  16E4  3F40               	moviw [0]fsr1
  6765  16E5  0021               	movlb	1	; select bank1
  6766  16E6  00A8               	movwf	(_err^(0+128)+8)
  6767  16E7  3F41               	moviw [1]fsr1
  6768  16E8  00A9               	movwf	((_err+1)^(0+128)+8)
  6769  16E9  3F42               	moviw [2]fsr1
  6770  16EA  00AA               	movwf	((_err+2)^(0+128)+8)
  6771  16EB  3F43               	moviw [3]fsr1
  6772  16EC  00AB               	movwf	((_err+3)^(0+128)+8)
  6773                           
  6774                           ;sample.c: 330: err[1]=err[0];
  6775  16ED  0823               	movf	(_err+3)^(0+128),w
  6776  16EE  00A7               	movwf	((_err+3)^(0+128)+4)
  6777  16EF  0822               	movf	(_err+2)^(0+128),w
  6778  16F0  00A6               	movwf	((_err+2)^(0+128)+4)
  6779  16F1  0821               	movf	(_err+1)^(0+128),w
  6780  16F2  00A5               	movwf	((_err+1)^(0+128)+4)
  6781  16F3  0820               	movf	_err^(0+128),w
  6782  16F4  00A4               	movwf	(_err^(0+128)+4)
  6783                           
  6784                           ;sample.c: 331: err[0]=t32;
  6785  16F5  0020               	movlb	0	; select bank0
  6786  16F6  0849               	movf	pid_pwm1_idrv_run@t32+3,w
  6787  16F7  0021               	movlb	1	; select bank1
  6788  16F8  00A3               	movwf	(_err+3)^(0+128)
  6789  16F9  0020               	movlb	0	; select bank0
  6790  16FA  0848               	movf	pid_pwm1_idrv_run@t32+2,w
  6791  16FB  0021               	movlb	1	; select bank1
  6792  16FC  00A2               	movwf	(_err+2)^(0+128)
  6793  16FD  0020               	movlb	0	; select bank0
  6794  16FE  0847               	movf	pid_pwm1_idrv_run@t32+1,w
  6795  16FF  0021               	movlb	1	; select bank1
  6796  1700  00A1               	movwf	(_err+1)^(0+128)
  6797  1701  0020               	movlb	0	; select bank0
  6798  1702  0846               	movf	pid_pwm1_idrv_run@t32,w
  6799  1703  0021               	movlb	1	; select bank1
  6800  1704  00A0               	movwf	_err^(0+128)
  6801                           
  6802                           ;sample.c: 334: ep=(err[0]-err[1])*PidKp;
  6803  1705  0820               	movf	_err^(0+128),w
  6804  1706  0020               	movlb	0	; select bank0
  6805  1707  00B6               	movwf	??_pid_pwm1_idrv_run
  6806  1708  0021               	movlb	1	; select bank1
  6807  1709  0821               	movf	(_err+1)^(0+128),w
  6808  170A  0020               	movlb	0	; select bank0
  6809  170B  00B7               	movwf	??_pid_pwm1_idrv_run+1
  6810  170C  0021               	movlb	1	; select bank1
  6811  170D  0822               	movf	(_err+2)^(0+128),w
  6812  170E  0020               	movlb	0	; select bank0
  6813  170F  00B8               	movwf	??_pid_pwm1_idrv_run+2
  6814  1710  0021               	movlb	1	; select bank1
  6815  1711  0823               	movf	(_err+3)^(0+128),w
  6816  1712  0020               	movlb	0	; select bank0
  6817  1713  00B9               	movwf	??_pid_pwm1_idrv_run+3
  6818  1714  0021               	movlb	1	; select bank1
  6819  1715  0924               	comf	(_err^(0+128)+4),w
  6820  1716  0020               	movlb	0	; select bank0
  6821  1717  00BA               	movwf	??_pid_pwm1_idrv_run+4
  6822  1718  0021               	movlb	1	; select bank1
  6823  1719  0925               	comf	((_err+1)^(0+128)+4),w
  6824  171A  0020               	movlb	0	; select bank0
  6825  171B  00BB               	movwf	??_pid_pwm1_idrv_run+5
  6826  171C  0021               	movlb	1	; select bank1
  6827  171D  0926               	comf	((_err+2)^(0+128)+4),w
  6828  171E  0020               	movlb	0	; select bank0
  6829  171F  00BC               	movwf	??_pid_pwm1_idrv_run+6
  6830  1720  0021               	movlb	1	; select bank1
  6831  1721  0927               	comf	((_err+3)^(0+128)+4),w
  6832  1722  0020               	movlb	0	; select bank0
  6833  1723  00BD               	movwf	??_pid_pwm1_idrv_run+7
  6834  1724  0ABA               	incf	??_pid_pwm1_idrv_run+4,f
  6835  1725  1903               	skipnz
  6836  1726  0ABB               	incf	??_pid_pwm1_idrv_run+5,f
  6837  1727  1903               	skipnz
  6838  1728  0ABC               	incf	??_pid_pwm1_idrv_run+6,f
  6839  1729  1903               	skipnz
  6840  172A  0ABD               	incf	??_pid_pwm1_idrv_run+7,f
  6841  172B  083A               	movf	??_pid_pwm1_idrv_run+4,w
  6842  172C  07B6               	addwf	??_pid_pwm1_idrv_run,f
  6843  172D  083B               	movf	??_pid_pwm1_idrv_run+5,w
  6844  172E  3DB7               	addwfc	??_pid_pwm1_idrv_run+1,f
  6845  172F  083C               	movf	??_pid_pwm1_idrv_run+6,w
  6846  1730  3DB8               	addwfc	??_pid_pwm1_idrv_run+2,f
  6847  1731  083D               	movf	??_pid_pwm1_idrv_run+7,w
  6848  1732  3DB9               	addwfc	??_pid_pwm1_idrv_run+3,f
  6849  1733  0839               	movf	??_pid_pwm1_idrv_run+3,w
  6850  1734  00A3               	movwf	___lmul@multiplier+3
  6851  1735  0838               	movf	??_pid_pwm1_idrv_run+2,w
  6852  1736  00A2               	movwf	___lmul@multiplier+2
  6853  1737  0837               	movf	??_pid_pwm1_idrv_run+1,w
  6854  1738  00A1               	movwf	___lmul@multiplier+1
  6855  1739  0836               	movf	??_pid_pwm1_idrv_run,w
  6856  173A  00A0               	movwf	___lmul@multiplier
  6857  173B  0862               	movf	_PidKp,w
  6858  173C  00A4               	movwf	___lmul@multiplicand
  6859  173D  0863               	movf	_PidKp+1,w
  6860  173E  00A5               	movwf	___lmul@multiplicand+1
  6861  173F  01A6               	clrf	___lmul@multiplicand+2
  6862  1740  01A7               	clrf	___lmul@multiplicand+3
  6863  1741  319B  23D3  3196   	fcall	___lmul
  6864  1744  0020               	movlb	0	; select bank0
  6865  1745  0823               	movf	?___lmul+3,w
  6866  1746  00C1               	movwf	pid_pwm1_idrv_run@ep+3
  6867  1747  0822               	movf	?___lmul+2,w
  6868  1748  00C0               	movwf	pid_pwm1_idrv_run@ep+2
  6869  1749  0821               	movf	?___lmul+1,w
  6870  174A  00BF               	movwf	pid_pwm1_idrv_run@ep+1
  6871  174B  0820               	movf	?___lmul,w
  6872  174C  00BE               	movwf	pid_pwm1_idrv_run@ep
  6873                           
  6874                           ;sample.c: 335: ei=PidKp*err[0]/PidTi;
  6875  174D  0021               	movlb	1	; select bank1
  6876  174E  084E               	movf	_PidTi^(0+128),w
  6877  174F  0020               	movlb	0	; select bank0
  6878  1750  00A8               	movwf	___aldiv@divisor
  6879  1751  0021               	movlb	1	; select bank1
  6880  1752  084F               	movf	(_PidTi+1)^(0+128),w
  6881  1753  0020               	movlb	0	; select bank0
  6882  1754  00A9               	movwf	___aldiv@divisor+1
  6883  1755  01AA               	clrf	___aldiv@divisor+2
  6884  1756  01AB               	clrf	___aldiv@divisor+3
  6885  1757  0862               	movf	_PidKp,w
  6886  1758  00A0               	movwf	___lmul@multiplier
  6887  1759  0863               	movf	_PidKp+1,w
  6888  175A  00A1               	movwf	___lmul@multiplier+1
  6889  175B  01A2               	clrf	___lmul@multiplier+2
  6890  175C  01A3               	clrf	___lmul@multiplier+3
  6891  175D  0021               	movlb	1	; select bank1
  6892  175E  0823               	movf	(_err+3)^(0+128),w
  6893  175F  0020               	movlb	0	; select bank0
  6894  1760  00A7               	movwf	___lmul@multiplicand+3
  6895  1761  0021               	movlb	1	; select bank1
  6896  1762  0822               	movf	(_err+2)^(0+128),w
  6897  1763  0020               	movlb	0	; select bank0
  6898  1764  00A6               	movwf	___lmul@multiplicand+2
  6899  1765  0021               	movlb	1	; select bank1
  6900  1766  0821               	movf	(_err+1)^(0+128),w
  6901  1767  0020               	movlb	0	; select bank0
  6902  1768  00A5               	movwf	___lmul@multiplicand+1
  6903  1769  0021               	movlb	1	; select bank1
  6904  176A  0820               	movf	_err^(0+128),w
  6905  176B  0020               	movlb	0	; select bank0
  6906  176C  00A4               	movwf	___lmul@multiplicand
  6907  176D  319B  23D3  3196   	fcall	___lmul
  6908  1770  0020               	movlb	0	; select bank0
  6909  1771  0823               	movf	?___lmul+3,w
  6910  1772  00AF               	movwf	___aldiv@dividend+3
  6911  1773  0822               	movf	?___lmul+2,w
  6912  1774  00AE               	movwf	___aldiv@dividend+2
  6913  1775  0821               	movf	?___lmul+1,w
  6914  1776  00AD               	movwf	___aldiv@dividend+1
  6915  1777  0820               	movf	?___lmul,w
  6916  1778  00AC               	movwf	___aldiv@dividend
  6917  1779  3190  20A8  3196   	fcall	___aldiv
  6918  177C  0020               	movlb	0	; select bank0
  6919  177D  082B               	movf	?___aldiv+3,w
  6920  177E  00C5               	movwf	pid_pwm1_idrv_run@ei+3
  6921  177F  082A               	movf	?___aldiv+2,w
  6922  1780  00C4               	movwf	pid_pwm1_idrv_run@ei+2
  6923  1781  0829               	movf	?___aldiv+1,w
  6924  1782  00C3               	movwf	pid_pwm1_idrv_run@ei+1
  6925  1783  0828               	movf	?___aldiv,w
  6926  1784  00C2               	movwf	pid_pwm1_idrv_run@ei
  6927                           
  6928                           ;sample.c: 338: t32=ep+ei;
  6929  1785  083E               	movf	pid_pwm1_idrv_run@ep,w
  6930  1786  0742               	addwf	pid_pwm1_idrv_run@ei,w
  6931  1787  00B6               	movwf	??_pid_pwm1_idrv_run
  6932  1788  083F               	movf	pid_pwm1_idrv_run@ep+1,w
  6933  1789  3D43               	addwfc	pid_pwm1_idrv_run@ei+1,w
  6934  178A  00B7               	movwf	??_pid_pwm1_idrv_run+1
  6935  178B  0840               	movf	pid_pwm1_idrv_run@ep+2,w
  6936  178C  3D44               	addwfc	pid_pwm1_idrv_run@ei+2,w
  6937  178D  00B8               	movwf	??_pid_pwm1_idrv_run+2
  6938  178E  0841               	movf	pid_pwm1_idrv_run@ep+3,w
  6939  178F  3D45               	addwfc	pid_pwm1_idrv_run@ei+3,w
  6940  1790  00B9               	movwf	??_pid_pwm1_idrv_run+3
  6941  1791  0839               	movf	??_pid_pwm1_idrv_run+3,w
  6942  1792  00C9               	movwf	pid_pwm1_idrv_run@t32+3
  6943  1793  0838               	movf	??_pid_pwm1_idrv_run+2,w
  6944  1794  00C8               	movwf	pid_pwm1_idrv_run@t32+2
  6945  1795  0837               	movf	??_pid_pwm1_idrv_run+1,w
  6946  1796  00C7               	movwf	pid_pwm1_idrv_run@t32+1
  6947  1797  0836               	movf	??_pid_pwm1_idrv_run,w
  6948  1798  00C6               	movwf	pid_pwm1_idrv_run@t32
  6949                           
  6950                           ;sample.c: 339: t32/=10000;
  6951  1799  3000               	movlw	0
  6952  179A  00AB               	movwf	___aldiv@divisor+3
  6953  179B  3000               	movlw	0
  6954  179C  00AA               	movwf	___aldiv@divisor+2
  6955  179D  3027               	movlw	39
  6956  179E  00A9               	movwf	___aldiv@divisor+1
  6957  179F  3010               	movlw	16
  6958  17A0  00A8               	movwf	___aldiv@divisor
  6959  17A1  0849               	movf	pid_pwm1_idrv_run@t32+3,w
  6960  17A2  00AF               	movwf	___aldiv@dividend+3
  6961  17A3  0848               	movf	pid_pwm1_idrv_run@t32+2,w
  6962  17A4  00AE               	movwf	___aldiv@dividend+2
  6963  17A5  0847               	movf	pid_pwm1_idrv_run@t32+1,w
  6964  17A6  00AD               	movwf	___aldiv@dividend+1
  6965  17A7  0846               	movf	pid_pwm1_idrv_run@t32,w
  6966  17A8  00AC               	movwf	___aldiv@dividend
  6967  17A9  3190  20A8  3196   	fcall	___aldiv
  6968  17AC  0020               	movlb	0	; select bank0
  6969  17AD  082B               	movf	?___aldiv+3,w
  6970  17AE  00C9               	movwf	pid_pwm1_idrv_run@t32+3
  6971  17AF  082A               	movf	?___aldiv+2,w
  6972  17B0  00C8               	movwf	pid_pwm1_idrv_run@t32+2
  6973  17B1  0829               	movf	?___aldiv+1,w
  6974  17B2  00C7               	movwf	pid_pwm1_idrv_run@t32+1
  6975  17B3  0828               	movf	?___aldiv,w
  6976  17B4  00C6               	movwf	pid_pwm1_idrv_run@t32
  6977                           
  6978                           ;sample.c: 340: t32+=pidU;
  6979  17B5  0021               	movlb	1	; select bank1
  6980  17B6  0862               	movf	_pidU^(0+128),w
  6981  17B7  0020               	movlb	0	; select bank0
  6982  17B8  07C6               	addwf	pid_pwm1_idrv_run@t32,f
  6983  17B9  0021               	movlb	1	; select bank1
  6984  17BA  0863               	movf	(_pidU+1)^(0+128),w
  6985  17BB  0020               	movlb	0	; select bank0
  6986  17BC  3DC7               	addwfc	pid_pwm1_idrv_run@t32+1,f
  6987  17BD  3000               	movlw	0
  6988  17BE  3DC8               	addwfc	pid_pwm1_idrv_run@t32+2,f
  6989  17BF  3DC9               	addwfc	pid_pwm1_idrv_run@t32+3,f
  6990                           
  6991                           ;sample.c: 342: __nop();
  6992  17C0  0000               	nop
  6993                           
  6994                           ;sample.c: 343: if(t32>1200)t32=1200;
  6995  17C1  0020               	movlb	0	; select bank0
  6996  17C2  1BC9               	btfsc	pid_pwm1_idrv_run@t32+3,7
  6997  17C3  2FD8               	goto	l5533
  6998  17C4  0849               	movf	pid_pwm1_idrv_run@t32+3,w
  6999  17C5  1D03               	btfss	3,2
  7000  17C6  2FD0               	goto	l5531
  7001  17C7  0848               	movf	pid_pwm1_idrv_run@t32+2,w
  7002  17C8  1D03               	btfss	3,2
  7003  17C9  2FD0               	goto	l5531
  7004  17CA  30B1               	movlw	177
  7005  17CB  0246               	subwf	pid_pwm1_idrv_run@t32,w
  7006  17CC  3004               	movlw	4
  7007  17CD  3B47               	subwfb	pid_pwm1_idrv_run@t32+1,w
  7008  17CE  1C03               	btfss	3,0
  7009  17CF  2FD8               	goto	l5533
  7010  17D0                     l5531:	
  7011  17D0  3000               	movlw	0
  7012  17D1  00C9               	movwf	pid_pwm1_idrv_run@t32+3
  7013  17D2  3000               	movlw	0
  7014  17D3  00C8               	movwf	pid_pwm1_idrv_run@t32+2
  7015  17D4  3004               	movlw	4
  7016  17D5  00C7               	movwf	pid_pwm1_idrv_run@t32+1
  7017  17D6  30B0               	movlw	176
  7018  17D7  00C6               	movwf	pid_pwm1_idrv_run@t32
  7019  17D8                     l5533:	
  7020                           
  7021                           ;sample.c: 344: if(t32<5)t32=5;
  7022  17D8  1BC9               	btfsc	pid_pwm1_idrv_run@t32+3,7
  7023  17D9  2FE7               	goto	l5535
  7024  17DA  0849               	movf	pid_pwm1_idrv_run@t32+3,w
  7025  17DB  1D03               	btfss	3,2
  7026  17DC  2FEF               	goto	l689
  7027  17DD  0848               	movf	pid_pwm1_idrv_run@t32+2,w
  7028  17DE  1D03               	btfss	3,2
  7029  17DF  2FEF               	goto	l689
  7030  17E0  0847               	movf	pid_pwm1_idrv_run@t32+1,w
  7031  17E1  1D03               	btfss	3,2
  7032  17E2  2FEF               	goto	l689
  7033  17E3  3005               	movlw	5
  7034  17E4  0246               	subwf	pid_pwm1_idrv_run@t32,w
  7035  17E5  1803               	btfsc	3,0
  7036  17E6  2FEF               	goto	l689
  7037  17E7                     l5535:	
  7038  17E7  3000               	movlw	0
  7039  17E8  00C9               	movwf	pid_pwm1_idrv_run@t32+3
  7040  17E9  3000               	movlw	0
  7041  17EA  00C8               	movwf	pid_pwm1_idrv_run@t32+2
  7042  17EB  3000               	movlw	0
  7043  17EC  00C7               	movwf	pid_pwm1_idrv_run@t32+1
  7044  17ED  3005               	movlw	5
  7045  17EE  00C6               	movwf	pid_pwm1_idrv_run@t32
  7046  17EF                     l689:	
  7047                           
  7048                           ;sample.c: 345: pidU=(uint16_t)t32;
  7049  17EF  0847               	movf	pid_pwm1_idrv_run@t32+1,w
  7050  17F0  0021               	movlb	1	; select bank1
  7051  17F1  00E3               	movwf	(_pidU+1)^(0+128)
  7052  17F2  0020               	movlb	0	; select bank0
  7053  17F3  0846               	movf	pid_pwm1_idrv_run@t32,w
  7054  17F4  0021               	movlb	1	; select bank1
  7055  17F5  00E2               	movwf	_pidU^(0+128)
  7056                           
  7057                           ;sample.c: 347: set_idrv_pwm1_duty(pidU);
  7058  17F6  0863               	movf	(_pidU+1)^(0+128),w
  7059  17F7  0020               	movlb	0	; select bank0
  7060  17F8  00A3               	movwf	set_idrv_pwm1_duty@duty+1
  7061  17F9  0021               	movlb	1	; select bank1
  7062  17FA  0862               	movf	_pidU^(0+128),w
  7063  17FB  0020               	movlb	0	; select bank0
  7064  17FC  00A2               	movwf	set_idrv_pwm1_duty@duty
  7065  17FD  319B  2364         	fcall	_set_idrv_pwm1_duty
  7066  17FF  0008               	return
  7067  1800                     __end_of_pid_pwm1_idrv_run:	
  7068                           
  7069                           	psect	text10
  7070  08ED                     __ptext10:	
  7071 ;; *************** function _pid_pwm1_idrv_b_b *****************
  7072 ;; Defined at:
  7073 ;;		line 265 in file "src/api/sample.c"
  7074 ;; Parameters:    Size  Location     Type
  7075 ;;		None
  7076 ;; Auto vars:     Size  Location     Type
  7077 ;;  t32             4   30[BANK0 ] long 
  7078 ;; Return value:  Size  Location     Type
  7079 ;;                  1    wreg      void 
  7080 ;; Registers used:
  7081 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7082 ;; Tracked objects:
  7083 ;;		On entry : 0/0
  7084 ;;		On exit  : 0/0
  7085 ;;		Unchanged: 0/0
  7086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7088 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7089 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7090 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7091 ;;Total ram usage:       12 bytes
  7092 ;; Hardware stack levels used:    1
  7093 ;; Hardware stack levels required when called:    3
  7094 ;; This function calls:
  7095 ;;		___aldiv
  7096 ;;		___lmul
  7097 ;;		___lwdiv
  7098 ;;		___wmul
  7099 ;;		_set_idrv_pwm1_duty
  7100 ;; This function is called by:
  7101 ;;		_main
  7102 ;; This function uses a non-reentrant model
  7103 ;;
  7104                           
  7105                           
  7106                           ;psect for function _pid_pwm1_idrv_b_b
  7107  08ED                     _pid_pwm1_idrv_b_b:	
  7108                           
  7109                           ;sample.c: 267: int32_t t32;
  7110                           ;sample.c: 268: t32=(resRs-resRc);
  7111                           
  7112                           ;incstack = 0
  7113                           ; Regs used in _pid_pwm1_idrv_b_b: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7114  08ED  0020               	movlb	0	; select bank0
  7115  08EE  096E               	comf	_resRc,w
  7116  08EF  00B6               	movwf	??_pid_pwm1_idrv_b_b
  7117  08F0  096F               	comf	_resRc+1,w
  7118  08F1  00B7               	movwf	??_pid_pwm1_idrv_b_b+1
  7119  08F2  0AB6               	incf	??_pid_pwm1_idrv_b_b,f
  7120  08F3  1903               	skipnz
  7121  08F4  0AB7               	incf	??_pid_pwm1_idrv_b_b+1,f
  7122  08F5  086C               	movf	_resRs,w
  7123  08F6  0736               	addwf	??_pid_pwm1_idrv_b_b,w
  7124  08F7  00BE               	movwf	pid_pwm1_idrv_b_b@t32
  7125  08F8  086D               	movf	_resRs+1,w
  7126  08F9  3D37               	addwfc	??_pid_pwm1_idrv_b_b+1,w
  7127  08FA  00BF               	movwf	pid_pwm1_idrv_b_b@t32+1
  7128  08FB  01C0               	clrf	pid_pwm1_idrv_b_b@t32+2
  7129  08FC  01C1               	clrf	pid_pwm1_idrv_b_b@t32+3
  7130                           
  7131                           ;sample.c: 269: switch(pidBbSm){
  7132  08FD  2ABB               	goto	l5495
  7133  08FE                     l5447:	
  7134                           ;sample.c: 271: case 0:
  7135                           
  7136                           ;sample.c: 270: case 5:return;
  7137                           
  7138                           
  7139                           ;sample.c: 272: case 1:
  7140                           ;sample.c: 273: pidTestNum=0;
  7141  08FE  01E8               	clrf	_pidTestNum
  7142  08FF  2939               	goto	l5469
  7143  0900                     l5453:	
  7144                           ;sample.c: 277: case 2:
  7145                           
  7146                           ;sample.c: 276: break;
  7147                           
  7148                           ;sample.c: 275: pidBbSm=2;
  7149                           
  7150                           ;sample.c: 274: set_idrv_pwm1_duty(1200);
  7151                           
  7152                           
  7153                           ;sample.c: 278: if(t32>4500){
  7154  0900  1BC1               	btfsc	pid_pwm1_idrv_b_b@t32+3,7
  7155  0901  2AC5               	goto	l5497
  7156  0902  0841               	movf	pid_pwm1_idrv_b_b@t32+3,w
  7157  0903  1D03               	btfss	3,2
  7158  0904  290E               	goto	l5455
  7159  0905  0840               	movf	pid_pwm1_idrv_b_b@t32+2,w
  7160  0906  1D03               	btfss	3,2
  7161  0907  290E               	goto	l5455
  7162  0908  3095               	movlw	149
  7163  0909  023E               	subwf	pid_pwm1_idrv_b_b@t32,w
  7164  090A  3011               	movlw	17
  7165  090B  3B3F               	subwfb	pid_pwm1_idrv_b_b@t32+1,w
  7166  090C  1C03               	btfss	3,0
  7167  090D  2AC5               	goto	l5497
  7168  090E                     l5455:	
  7169                           
  7170                           ;sample.c: 279: set_idrv_pwm1_duty(5);
  7171  090E  3005               	movlw	5
  7172  090F  00A2               	movwf	set_idrv_pwm1_duty@duty
  7173  0910  3000               	movlw	0
  7174  0911  00A3               	movwf	set_idrv_pwm1_duty@duty+1
  7175  0912  319B  2364  3188   	fcall	_set_idrv_pwm1_duty
  7176                           
  7177                           ;sample.c: 280: pidBbSm=3;
  7178  0915  3003               	movlw	3
  7179  0916  2AB6               	goto	L5
  7180  0917                     l5459:	
  7181                           ;sample.c: 284: case 3:
  7182                           
  7183                           ;sample.c: 282: }
  7184                           ;sample.c: 283: break;
  7185                           
  7186                           ;sample.c: 281: break;
  7187                           
  7188                           
  7189                           ;sample.c: 285: if(t32<1500){
  7190  0917  1BC1               	btfsc	pid_pwm1_idrv_b_b@t32+3,7
  7191  0918  2925               	goto	l5461
  7192  0919  0841               	movf	pid_pwm1_idrv_b_b@t32+3,w
  7193  091A  1D03               	btfss	3,2
  7194  091B  2AC5               	goto	l5497
  7195  091C  0840               	movf	pid_pwm1_idrv_b_b@t32+2,w
  7196  091D  1D03               	btfss	3,2
  7197  091E  2AC5               	goto	l5497
  7198  091F  30DC               	movlw	220
  7199  0920  023E               	subwf	pid_pwm1_idrv_b_b@t32,w
  7200  0921  3005               	movlw	5
  7201  0922  3B3F               	subwfb	pid_pwm1_idrv_b_b@t32+1,w
  7202  0923  1803               	btfsc	3,0
  7203  0924  2AC5               	goto	l5497
  7204  0925                     l5461:	
  7205                           
  7206                           ;sample.c: 286: bbt0=bbt1;
  7207  0925  0021               	movlb	1	; select bank1
  7208  0926  0847               	movf	(_bbt1+1)^(0+128),w
  7209  0927  00C9               	movwf	(_bbt0+1)^(0+128)
  7210  0928  0846               	movf	_bbt1^(0+128),w
  7211  0929  00C8               	movwf	_bbt0^(0+128)
  7212                           
  7213                           ;sample.c: 287: bbt1=globalTicker;
  7214  092A  0857               	movf	(_globalTicker+1)^(0+128),w	;volatile
  7215  092B  00C7               	movwf	(_bbt1+1)^(0+128)
  7216  092C  0856               	movf	_globalTicker^(0+128),w	;volatile
  7217  092D  00C6               	movwf	_bbt1^(0+128)
  7218                           
  7219                           ;sample.c: 288: pidTestNum++;
  7220  092E  3001               	movlw	1
  7221  092F  0020               	movlb	0	; select bank0
  7222  0930  00B6               	movwf	??_pid_pwm1_idrv_b_b
  7223  0931  0836               	movf	??_pid_pwm1_idrv_b_b,w
  7224  0932  07E8               	addwf	_pidTestNum,f
  7225                           
  7226                           ;sample.c: 289: if(pidTestNum>4){
  7227  0933  3005               	movlw	5
  7228  0934  0268               	subwf	_pidTestNum,w
  7229  0935  1C03               	skipc
  7230  0936  2939               	goto	l5469
  7231                           
  7232                           ;sample.c: 290: pidBbSm=4;
  7233  0937  3004               	movlw	4
  7234  0938  2AB7               	goto	L4
  7235  0939                     l5469:	
  7236                           ;sample.c: 291: break;
  7237                           
  7238                           
  7239                           ;sample.c: 292: }
  7240                           ;sample.c: 293: set_idrv_pwm1_duty(1200);
  7241  0939  30B0               	movlw	176
  7242  093A  00A2               	movwf	set_idrv_pwm1_duty@duty
  7243  093B  3004               	movlw	4
  7244  093C  00A3               	movwf	set_idrv_pwm1_duty@duty+1
  7245  093D  319B  2364  3188   	fcall	_set_idrv_pwm1_duty
  7246                           
  7247                           ;sample.c: 294: pidBbSm=2;
  7248  0940  3002               	movlw	2
  7249  0941  2AB6               	goto	L5
  7250  0942                     l5473:	
  7251                           ;sample.c: 298: case 4:
  7252                           
  7253                           ;sample.c: 296: }
  7254                           ;sample.c: 297: break;
  7255                           
  7256                           ;sample.c: 295: break;
  7257                           
  7258                           
  7259                           ;sample.c: 299: bbtu=bbt1-bbt0;
  7260  0942  0021               	movlb	1	; select bank1
  7261  0943  0948               	comf	_bbt0^(0+128),w
  7262  0944  0020               	movlb	0	; select bank0
  7263  0945  00B6               	movwf	??_pid_pwm1_idrv_b_b
  7264  0946  0021               	movlb	1	; select bank1
  7265  0947  0949               	comf	(_bbt0+1)^(0+128),w
  7266  0948  0020               	movlb	0	; select bank0
  7267  0949  00B7               	movwf	??_pid_pwm1_idrv_b_b+1
  7268  094A  0AB6               	incf	??_pid_pwm1_idrv_b_b,f
  7269  094B  1903               	skipnz
  7270  094C  0AB7               	incf	??_pid_pwm1_idrv_b_b+1,f
  7271  094D  0021               	movlb	1	; select bank1
  7272  094E  0846               	movf	_bbt1^(0+128),w
  7273  094F  0020               	movlb	0	; select bank0
  7274  0950  0736               	addwf	??_pid_pwm1_idrv_b_b,w
  7275  0951  00DC               	movwf	_bbtu
  7276  0952  0021               	movlb	1	; select bank1
  7277  0953  0847               	movf	(_bbt1+1)^(0+128),w
  7278  0954  0020               	movlb	0	; select bank0
  7279  0955  3D37               	addwfc	??_pid_pwm1_idrv_b_b+1,w
  7280  0956  00DD               	movwf	_bbtu+1
  7281                           
  7282                           ;sample.c: 300: bbtu=bbtu/5;
  7283  0957  3005               	movlw	5
  7284  0958  00A2               	movwf	___lwdiv@divisor
  7285  0959  3000               	movlw	0
  7286  095A  00A3               	movwf	___lwdiv@divisor+1
  7287  095B  085D               	movf	_bbtu+1,w
  7288  095C  00A5               	movwf	___lwdiv@dividend+1
  7289  095D  085C               	movf	_bbtu,w
  7290  095E  00A4               	movwf	___lwdiv@dividend
  7291  095F  319C  2434  3188   	fcall	___lwdiv
  7292  0962  0020               	movlb	0	; select bank0
  7293  0963  0823               	movf	?___lwdiv+1,w
  7294  0964  00DD               	movwf	_bbtu+1
  7295  0965  0822               	movf	?___lwdiv,w
  7296  0966  00DC               	movwf	_bbtu
  7297                           
  7298                           ;sample.c: 301: bbta=(bbmax-bbmin)/2;
  7299  0967  3000               	movlw	0
  7300  0968  00AB               	movwf	___aldiv@divisor+3
  7301  0969  3000               	movlw	0
  7302  096A  00AA               	movwf	___aldiv@divisor+2
  7303  096B  3000               	movlw	0
  7304  096C  00A9               	movwf	___aldiv@divisor+1
  7305  096D  3002               	movlw	2
  7306  096E  00A8               	movwf	___aldiv@divisor
  7307  096F  0021               	movlb	1	; select bank1
  7308  0970  085E               	movf	_bbmax^(0+128),w
  7309  0971  0020               	movlb	0	; select bank0
  7310  0972  00B6               	movwf	??_pid_pwm1_idrv_b_b
  7311  0973  0021               	movlb	1	; select bank1
  7312  0974  085F               	movf	(_bbmax+1)^(0+128),w
  7313  0975  0020               	movlb	0	; select bank0
  7314  0976  00B7               	movwf	??_pid_pwm1_idrv_b_b+1
  7315  0977  0021               	movlb	1	; select bank1
  7316  0978  0860               	movf	(_bbmax+2)^(0+128),w
  7317  0979  0020               	movlb	0	; select bank0
  7318  097A  00B8               	movwf	??_pid_pwm1_idrv_b_b+2
  7319  097B  0021               	movlb	1	; select bank1
  7320  097C  0861               	movf	(_bbmax+3)^(0+128),w
  7321  097D  0020               	movlb	0	; select bank0
  7322  097E  00B9               	movwf	??_pid_pwm1_idrv_b_b+3
  7323  097F  0021               	movlb	1	; select bank1
  7324  0980  095A               	comf	_bbmin^(0+128),w
  7325  0981  0020               	movlb	0	; select bank0
  7326  0982  00BA               	movwf	??_pid_pwm1_idrv_b_b+4
  7327  0983  0021               	movlb	1	; select bank1
  7328  0984  095B               	comf	(_bbmin+1)^(0+128),w
  7329  0985  0020               	movlb	0	; select bank0
  7330  0986  00BB               	movwf	??_pid_pwm1_idrv_b_b+5
  7331  0987  0021               	movlb	1	; select bank1
  7332  0988  095C               	comf	(_bbmin+2)^(0+128),w
  7333  0989  0020               	movlb	0	; select bank0
  7334  098A  00BC               	movwf	??_pid_pwm1_idrv_b_b+6
  7335  098B  0021               	movlb	1	; select bank1
  7336  098C  095D               	comf	(_bbmin+3)^(0+128),w
  7337  098D  0020               	movlb	0	; select bank0
  7338  098E  00BD               	movwf	??_pid_pwm1_idrv_b_b+7
  7339  098F  0ABA               	incf	??_pid_pwm1_idrv_b_b+4,f
  7340  0990  1903               	skipnz
  7341  0991  0ABB               	incf	??_pid_pwm1_idrv_b_b+5,f
  7342  0992  1903               	skipnz
  7343  0993  0ABC               	incf	??_pid_pwm1_idrv_b_b+6,f
  7344  0994  1903               	skipnz
  7345  0995  0ABD               	incf	??_pid_pwm1_idrv_b_b+7,f
  7346  0996  083A               	movf	??_pid_pwm1_idrv_b_b+4,w
  7347  0997  07B6               	addwf	??_pid_pwm1_idrv_b_b,f
  7348  0998  083B               	movf	??_pid_pwm1_idrv_b_b+5,w
  7349  0999  3DB7               	addwfc	??_pid_pwm1_idrv_b_b+1,f
  7350  099A  083C               	movf	??_pid_pwm1_idrv_b_b+6,w
  7351  099B  3DB8               	addwfc	??_pid_pwm1_idrv_b_b+2,f
  7352  099C  083D               	movf	??_pid_pwm1_idrv_b_b+7,w
  7353  099D  3DB9               	addwfc	??_pid_pwm1_idrv_b_b+3,f
  7354  099E  0839               	movf	??_pid_pwm1_idrv_b_b+3,w
  7355  099F  00AF               	movwf	___aldiv@dividend+3
  7356  09A0  0838               	movf	??_pid_pwm1_idrv_b_b+2,w
  7357  09A1  00AE               	movwf	___aldiv@dividend+2
  7358  09A2  0837               	movf	??_pid_pwm1_idrv_b_b+1,w
  7359  09A3  00AD               	movwf	___aldiv@dividend+1
  7360  09A4  0836               	movf	??_pid_pwm1_idrv_b_b,w
  7361  09A5  00AC               	movwf	___aldiv@dividend
  7362  09A6  3190  20A8  3188   	fcall	___aldiv
  7363  09A9  0020               	movlb	0	; select bank0
  7364  09AA  082B               	movf	?___aldiv+3,w
  7365  09AB  0021               	movlb	1	; select bank1
  7366  09AC  00C3               	movwf	(_bbta+3)^(0+128)
  7367  09AD  0020               	movlb	0	; select bank0
  7368  09AE  082A               	movf	?___aldiv+2,w
  7369  09AF  0021               	movlb	1	; select bank1
  7370  09B0  00C2               	movwf	(_bbta+2)^(0+128)
  7371  09B1  0020               	movlb	0	; select bank0
  7372  09B2  0829               	movf	?___aldiv+1,w
  7373  09B3  0021               	movlb	1	; select bank1
  7374  09B4  00C1               	movwf	(_bbta+1)^(0+128)
  7375  09B5  0020               	movlb	0	; select bank0
  7376  09B6  0828               	movf	?___aldiv,w
  7377  09B7  0021               	movlb	1	; select bank1
  7378  09B8  00C0               	movwf	_bbta^(0+128)
  7379                           
  7380                           ;sample.c: 302: bbu=(1200-5)/2;
  7381  09B9  3000               	movlw	0
  7382  09BA  00BF               	movwf	(_bbu+3)^(0+128)
  7383  09BB  3000               	movlw	0
  7384  09BC  00BE               	movwf	(_bbu+2)^(0+128)
  7385  09BD  3002               	movlw	2
  7386  09BE  00BD               	movwf	(_bbu+1)^(0+128)
  7387  09BF  3055               	movlw	85
  7388  09C0  00BC               	movwf	_bbu^(0+128)
  7389                           
  7390                           ;sample.c: 304: bbku=(bbu*40000)/(bbta*314);
  7391  09C1  0843               	movf	(_bbta+3)^(0+128),w
  7392  09C2  0020               	movlb	0	; select bank0
  7393  09C3  00A3               	movwf	___lmul@multiplier+3
  7394  09C4  0021               	movlb	1	; select bank1
  7395  09C5  0842               	movf	(_bbta+2)^(0+128),w
  7396  09C6  0020               	movlb	0	; select bank0
  7397  09C7  00A2               	movwf	___lmul@multiplier+2
  7398  09C8  0021               	movlb	1	; select bank1
  7399  09C9  0841               	movf	(_bbta+1)^(0+128),w
  7400  09CA  0020               	movlb	0	; select bank0
  7401  09CB  00A1               	movwf	___lmul@multiplier+1
  7402  09CC  0021               	movlb	1	; select bank1
  7403  09CD  0840               	movf	_bbta^(0+128),w
  7404  09CE  0020               	movlb	0	; select bank0
  7405  09CF  00A0               	movwf	___lmul@multiplier
  7406  09D0  3000               	movlw	0
  7407  09D1  00A7               	movwf	___lmul@multiplicand+3
  7408  09D2  3000               	movlw	0
  7409  09D3  00A6               	movwf	___lmul@multiplicand+2
  7410  09D4  3001               	movlw	1
  7411  09D5  00A5               	movwf	___lmul@multiplicand+1
  7412  09D6  303A               	movlw	58
  7413  09D7  00A4               	movwf	___lmul@multiplicand
  7414  09D8  319B  23D3  3188   	fcall	___lmul
  7415  09DB  0020               	movlb	0	; select bank0
  7416  09DC  0823               	movf	?___lmul+3,w
  7417  09DD  00AB               	movwf	___aldiv@divisor+3
  7418  09DE  0822               	movf	?___lmul+2,w
  7419  09DF  00AA               	movwf	___aldiv@divisor+2
  7420  09E0  0821               	movf	?___lmul+1,w
  7421  09E1  00A9               	movwf	___aldiv@divisor+1
  7422  09E2  0820               	movf	?___lmul,w
  7423  09E3  00A8               	movwf	___aldiv@divisor
  7424  09E4  0021               	movlb	1	; select bank1
  7425  09E5  083F               	movf	(_bbu+3)^(0+128),w
  7426  09E6  0020               	movlb	0	; select bank0
  7427  09E7  00A3               	movwf	___lmul@multiplier+3
  7428  09E8  0021               	movlb	1	; select bank1
  7429  09E9  083E               	movf	(_bbu+2)^(0+128),w
  7430  09EA  0020               	movlb	0	; select bank0
  7431  09EB  00A2               	movwf	___lmul@multiplier+2
  7432  09EC  0021               	movlb	1	; select bank1
  7433  09ED  083D               	movf	(_bbu+1)^(0+128),w
  7434  09EE  0020               	movlb	0	; select bank0
  7435  09EF  00A1               	movwf	___lmul@multiplier+1
  7436  09F0  0021               	movlb	1	; select bank1
  7437  09F1  083C               	movf	_bbu^(0+128),w
  7438  09F2  0020               	movlb	0	; select bank0
  7439  09F3  00A0               	movwf	___lmul@multiplier
  7440  09F4  3000               	movlw	0
  7441  09F5  00A7               	movwf	___lmul@multiplicand+3
  7442  09F6  3000               	movlw	0
  7443  09F7  00A6               	movwf	___lmul@multiplicand+2
  7444  09F8  309C               	movlw	156
  7445  09F9  00A5               	movwf	___lmul@multiplicand+1
  7446  09FA  3040               	movlw	64
  7447  09FB  00A4               	movwf	___lmul@multiplicand
  7448  09FC  319B  23D3  3188   	fcall	___lmul
  7449  09FF  0020               	movlb	0	; select bank0
  7450  0A00  0823               	movf	?___lmul+3,w
  7451  0A01  00AF               	movwf	___aldiv@dividend+3
  7452  0A02  0822               	movf	?___lmul+2,w
  7453  0A03  00AE               	movwf	___aldiv@dividend+2
  7454  0A04  0821               	movf	?___lmul+1,w
  7455  0A05  00AD               	movwf	___aldiv@dividend+1
  7456  0A06  0820               	movf	?___lmul,w
  7457  0A07  00AC               	movwf	___aldiv@dividend
  7458  0A08  3190  20A8  3188   	fcall	___aldiv
  7459  0A0B  0020               	movlb	0	; select bank0
  7460  0A0C  082B               	movf	?___aldiv+3,w
  7461  0A0D  0021               	movlb	1	; select bank1
  7462  0A0E  00BB               	movwf	(_bbku+3)^(0+128)
  7463  0A0F  0020               	movlb	0	; select bank0
  7464  0A10  082A               	movf	?___aldiv+2,w
  7465  0A11  0021               	movlb	1	; select bank1
  7466  0A12  00BA               	movwf	(_bbku+2)^(0+128)
  7467  0A13  0020               	movlb	0	; select bank0
  7468  0A14  0829               	movf	?___aldiv+1,w
  7469  0A15  0021               	movlb	1	; select bank1
  7470  0A16  00B9               	movwf	(_bbku+1)^(0+128)
  7471  0A17  0020               	movlb	0	; select bank0
  7472  0A18  0828               	movf	?___aldiv,w
  7473  0A19  0021               	movlb	1	; select bank1
  7474  0A1A  00B8               	movwf	_bbku^(0+128)
  7475                           
  7476                           ;sample.c: 305: bbku*=100;
  7477  0A1B  3000               	movlw	0
  7478  0A1C  0020               	movlb	0	; select bank0
  7479  0A1D  00A3               	movwf	___lmul@multiplier+3
  7480  0A1E  3000               	movlw	0
  7481  0A1F  00A2               	movwf	___lmul@multiplier+2
  7482  0A20  3000               	movlw	0
  7483  0A21  00A1               	movwf	___lmul@multiplier+1
  7484  0A22  3064               	movlw	100
  7485  0A23  00A0               	movwf	___lmul@multiplier
  7486  0A24  0021               	movlb	1	; select bank1
  7487  0A25  083B               	movf	(_bbku+3)^(0+128),w
  7488  0A26  0020               	movlb	0	; select bank0
  7489  0A27  00A7               	movwf	___lmul@multiplicand+3
  7490  0A28  0021               	movlb	1	; select bank1
  7491  0A29  083A               	movf	(_bbku+2)^(0+128),w
  7492  0A2A  0020               	movlb	0	; select bank0
  7493  0A2B  00A6               	movwf	___lmul@multiplicand+2
  7494  0A2C  0021               	movlb	1	; select bank1
  7495  0A2D  0839               	movf	(_bbku+1)^(0+128),w
  7496  0A2E  0020               	movlb	0	; select bank0
  7497  0A2F  00A5               	movwf	___lmul@multiplicand+1
  7498  0A30  0021               	movlb	1	; select bank1
  7499  0A31  0838               	movf	_bbku^(0+128),w
  7500  0A32  0020               	movlb	0	; select bank0
  7501  0A33  00A4               	movwf	___lmul@multiplicand
  7502  0A34  319B  23D3  3188   	fcall	___lmul
  7503  0A37  0020               	movlb	0	; select bank0
  7504  0A38  0823               	movf	?___lmul+3,w
  7505  0A39  0021               	movlb	1	; select bank1
  7506  0A3A  00BB               	movwf	(_bbku+3)^(0+128)
  7507  0A3B  0020               	movlb	0	; select bank0
  7508  0A3C  0822               	movf	?___lmul+2,w
  7509  0A3D  0021               	movlb	1	; select bank1
  7510  0A3E  00BA               	movwf	(_bbku+2)^(0+128)
  7511  0A3F  0020               	movlb	0	; select bank0
  7512  0A40  0821               	movf	?___lmul+1,w
  7513  0A41  0021               	movlb	1	; select bank1
  7514  0A42  00B9               	movwf	(_bbku+1)^(0+128)
  7515  0A43  0020               	movlb	0	; select bank0
  7516  0A44  0820               	movf	?___lmul,w
  7517  0A45  0021               	movlb	1	; select bank1
  7518  0A46  00B8               	movwf	_bbku^(0+128)
  7519                           
  7520                           ;sample.c: 307: t32=(bbku*10/14);
  7521  0A47  3000               	movlw	0
  7522  0A48  0020               	movlb	0	; select bank0
  7523  0A49  00AB               	movwf	___aldiv@divisor+3
  7524  0A4A  3000               	movlw	0
  7525  0A4B  00AA               	movwf	___aldiv@divisor+2
  7526  0A4C  3000               	movlw	0
  7527  0A4D  00A9               	movwf	___aldiv@divisor+1
  7528  0A4E  300E               	movlw	14
  7529  0A4F  00A8               	movwf	___aldiv@divisor
  7530  0A50  0021               	movlb	1	; select bank1
  7531  0A51  083B               	movf	(_bbku+3)^(0+128),w
  7532  0A52  0020               	movlb	0	; select bank0
  7533  0A53  00A3               	movwf	___lmul@multiplier+3
  7534  0A54  0021               	movlb	1	; select bank1
  7535  0A55  083A               	movf	(_bbku+2)^(0+128),w
  7536  0A56  0020               	movlb	0	; select bank0
  7537  0A57  00A2               	movwf	___lmul@multiplier+2
  7538  0A58  0021               	movlb	1	; select bank1
  7539  0A59  0839               	movf	(_bbku+1)^(0+128),w
  7540  0A5A  0020               	movlb	0	; select bank0
  7541  0A5B  00A1               	movwf	___lmul@multiplier+1
  7542  0A5C  0021               	movlb	1	; select bank1
  7543  0A5D  0838               	movf	_bbku^(0+128),w
  7544  0A5E  0020               	movlb	0	; select bank0
  7545  0A5F  00A0               	movwf	___lmul@multiplier
  7546  0A60  3000               	movlw	0
  7547  0A61  00A7               	movwf	___lmul@multiplicand+3
  7548  0A62  3000               	movlw	0
  7549  0A63  00A6               	movwf	___lmul@multiplicand+2
  7550  0A64  3000               	movlw	0
  7551  0A65  00A5               	movwf	___lmul@multiplicand+1
  7552  0A66  300A               	movlw	10
  7553  0A67  00A4               	movwf	___lmul@multiplicand
  7554  0A68  319B  23D3  3188   	fcall	___lmul
  7555  0A6B  0020               	movlb	0	; select bank0
  7556  0A6C  0823               	movf	?___lmul+3,w
  7557  0A6D  00AF               	movwf	___aldiv@dividend+3
  7558  0A6E  0822               	movf	?___lmul+2,w
  7559  0A6F  00AE               	movwf	___aldiv@dividend+2
  7560  0A70  0821               	movf	?___lmul+1,w
  7561  0A71  00AD               	movwf	___aldiv@dividend+1
  7562  0A72  0820               	movf	?___lmul,w
  7563  0A73  00AC               	movwf	___aldiv@dividend
  7564  0A74  3190  20A8  3188   	fcall	___aldiv
  7565  0A77  0020               	movlb	0	; select bank0
  7566  0A78  082B               	movf	?___aldiv+3,w
  7567  0A79  00C1               	movwf	pid_pwm1_idrv_b_b@t32+3
  7568  0A7A  082A               	movf	?___aldiv+2,w
  7569  0A7B  00C0               	movwf	pid_pwm1_idrv_b_b@t32+2
  7570  0A7C  0829               	movf	?___aldiv+1,w
  7571  0A7D  00BF               	movwf	pid_pwm1_idrv_b_b@t32+1
  7572  0A7E  0828               	movf	?___aldiv,w
  7573  0A7F  00BE               	movwf	pid_pwm1_idrv_b_b@t32
  7574                           
  7575                           ;sample.c: 308: PidKp=(uint16_t)t32;
  7576  0A80  083F               	movf	pid_pwm1_idrv_b_b@t32+1,w
  7577  0A81  00E3               	movwf	_PidKp+1
  7578  0A82  083E               	movf	pid_pwm1_idrv_b_b@t32,w
  7579  0A83  00E2               	movwf	_PidKp
  7580                           
  7581                           ;sample.c: 309: PidTi=bbtu*10/20;
  7582  0A84  3014               	movlw	20
  7583  0A85  00A2               	movwf	___lwdiv@divisor
  7584  0A86  3000               	movlw	0
  7585  0A87  00A3               	movwf	___lwdiv@divisor+1
  7586  0A88  085D               	movf	_bbtu+1,w
  7587  0A89  00F4               	movwf	___wmul@multiplier+1
  7588  0A8A  085C               	movf	_bbtu,w
  7589  0A8B  00F3               	movwf	___wmul@multiplier
  7590  0A8C  300A               	movlw	10
  7591  0A8D  00F5               	movwf	___wmul@multiplicand
  7592  0A8E  3000               	movlw	0
  7593  0A8F  00F6               	movwf	___wmul@multiplicand+1
  7594  0A90  319A  22BF  3188   	fcall	___wmul
  7595  0A93  0874               	movf	?___wmul+1,w
  7596  0A94  0020               	movlb	0	; select bank0
  7597  0A95  00A5               	movwf	___lwdiv@dividend+1
  7598  0A96  0873               	movf	?___wmul,w
  7599  0A97  00A4               	movwf	___lwdiv@dividend
  7600  0A98  319C  2434  3188   	fcall	___lwdiv
  7601  0A9B  0020               	movlb	0	; select bank0
  7602  0A9C  0823               	movf	?___lwdiv+1,w
  7603  0A9D  0021               	movlb	1	; select bank1
  7604  0A9E  00CF               	movwf	(_PidTi+1)^(0+128)
  7605  0A9F  0020               	movlb	0	; select bank0
  7606  0AA0  0822               	movf	?___lwdiv,w
  7607  0AA1  0021               	movlb	1	; select bank1
  7608  0AA2  00CE               	movwf	_PidTi^(0+128)
  7609                           
  7610                           ;sample.c: 310: PidTd=bbtu/8;
  7611  0AA3  0020               	movlb	0	; select bank0
  7612  0AA4  085D               	movf	_bbtu+1,w
  7613  0AA5  00B7               	movwf	??_pid_pwm1_idrv_b_b+1
  7614  0AA6  085C               	movf	_bbtu,w
  7615  0AA7  00B6               	movwf	??_pid_pwm1_idrv_b_b
  7616  0AA8  36B7               	lsrf	??_pid_pwm1_idrv_b_b+1,f
  7617  0AA9  0CB6               	rrf	??_pid_pwm1_idrv_b_b,f
  7618  0AAA  36B7               	lsrf	??_pid_pwm1_idrv_b_b+1,f
  7619  0AAB  0CB6               	rrf	??_pid_pwm1_idrv_b_b,f
  7620  0AAC  36B7               	lsrf	??_pid_pwm1_idrv_b_b+1,f
  7621  0AAD  0CB6               	rrf	??_pid_pwm1_idrv_b_b,f
  7622  0AAE  0836               	movf	??_pid_pwm1_idrv_b_b,w
  7623  0AAF  0021               	movlb	1	; select bank1
  7624  0AB0  00CC               	movwf	_PidTd^(0+128)
  7625  0AB1  0020               	movlb	0	; select bank0
  7626  0AB2  0837               	movf	??_pid_pwm1_idrv_b_b+1,w
  7627  0AB3  0021               	movlb	1	; select bank1
  7628  0AB4  00CD               	movwf	(_PidTd+1)^(0+128)
  7629                           
  7630                           ;sample.c: 311: pidBbSm=5;
  7631  0AB5  3005               	movlw	5
  7632  0AB6                     L5:	
  7633  0AB6  0020               	movlb	0	; select bank0
  7634  0AB7                     L4:	
  7635  0AB7  00B6               	movwf	??_pid_pwm1_idrv_b_b
  7636  0AB8  0836               	movf	??_pid_pwm1_idrv_b_b,w
  7637  0AB9  00E9               	movwf	_pidBbSm
  7638                           
  7639                           ;sample.c: 313: }
  7640                           
  7641                           ;sample.c: 312: break;
  7642  0ABA  2AC5               	goto	l5497
  7643  0ABB                     l5495:	
  7644  0ABB  0869               	movf	_pidBbSm,w
  7645                           
  7646                           ; Switch size 1, requested type "space"
  7647                           ; Number of cases is 6, Range of values is 0 to 5
  7648                           ; switch strategies available:
  7649                           ; Name         Instructions Cycles
  7650                           ; direct_byte           18     6 (fixed)
  7651                           ; simple_byte           19    10 (average)
  7652                           ; jumptable            260     6 (fixed)
  7653                           ;	Chosen strategy is direct_byte
  7654  0ABC  0084               	movwf	4
  7655  0ABD  3006               	movlw	6
  7656  0ABE  0204               	subwf	4,w
  7657  0ABF  1803               	skipnc
  7658  0AC0  2AC5               	goto	l5497
  7659  0AC1  3198               	movlp	high S5919
  7660  0AC2  3504               	lslf	4,w
  7661  0AC3  3E39               	addlw	low S5919
  7662  0AC4  0082               	movwf	2
  7663  0AC5                     l5497:	
  7664                           
  7665                           ;sample.c: 314: if(pidTestNum>2){
  7666  0AC5  3003               	movlw	3
  7667  0AC6  0268               	subwf	_pidTestNum,w
  7668  0AC7  1C03               	skipc
  7669  0AC8  0008               	return
  7670                           
  7671                           ;sample.c: 315: if(bbmax<t32)bbmax=t32;
  7672  0AC9  0021               	movlb	1	; select bank1
  7673  0ACA  0861               	movf	(_bbmax+3)^(0+128),w
  7674  0ACB  3A80               	xorlw	128
  7675  0ACC  0020               	movlb	0	; select bank0
  7676  0ACD  00B6               	movwf	??_pid_pwm1_idrv_b_b
  7677  0ACE  0841               	movf	pid_pwm1_idrv_b_b@t32+3,w
  7678  0ACF  3A80               	xorlw	128
  7679  0AD0  0236               	subwf	??_pid_pwm1_idrv_b_b,w
  7680  0AD1  0021               	movlb	1	; select bank1
  7681  0AD2  1D03               	skipz
  7682  0AD3  2AE4               	goto	u5053
  7683  0AD4  0020               	movlb	0	; select bank0
  7684  0AD5  0840               	movf	pid_pwm1_idrv_b_b@t32+2,w
  7685  0AD6  0021               	movlb	1	; select bank1
  7686  0AD7  0260               	subwf	(_bbmax+2)^(0+128),w
  7687  0AD8  1D03               	skipz
  7688  0AD9  2AE4               	goto	u5053
  7689  0ADA  0020               	movlb	0	; select bank0
  7690  0ADB  083F               	movf	pid_pwm1_idrv_b_b@t32+1,w
  7691  0ADC  0021               	movlb	1	; select bank1
  7692  0ADD  025F               	subwf	(_bbmax+1)^(0+128),w
  7693  0ADE  1D03               	skipz
  7694  0ADF  2AE4               	goto	u5053
  7695  0AE0  0020               	movlb	0	; select bank0
  7696  0AE1  083E               	movf	pid_pwm1_idrv_b_b@t32,w
  7697  0AE2  0021               	movlb	1	; select bank1
  7698  0AE3  025E               	subwf	_bbmax^(0+128),w
  7699  0AE4                     u5053:	
  7700  0AE4  1803               	skipnc
  7701  0AE5  2AF6               	goto	l684
  7702  0AE6  0020               	movlb	0	; select bank0
  7703  0AE7  0841               	movf	pid_pwm1_idrv_b_b@t32+3,w
  7704  0AE8  0021               	movlb	1	; select bank1
  7705  0AE9  00E1               	movwf	(_bbmax+3)^(0+128)
  7706  0AEA  0020               	movlb	0	; select bank0
  7707  0AEB  0840               	movf	pid_pwm1_idrv_b_b@t32+2,w
  7708  0AEC  0021               	movlb	1	; select bank1
  7709  0AED  00E0               	movwf	(_bbmax+2)^(0+128)
  7710  0AEE  0020               	movlb	0	; select bank0
  7711  0AEF  083F               	movf	pid_pwm1_idrv_b_b@t32+1,w
  7712  0AF0  0021               	movlb	1	; select bank1
  7713  0AF1  00DF               	movwf	(_bbmax+1)^(0+128)
  7714  0AF2  0020               	movlb	0	; select bank0
  7715  0AF3  083E               	movf	pid_pwm1_idrv_b_b@t32,w
  7716  0AF4  0021               	movlb	1	; select bank1
  7717  0AF5  00DE               	movwf	_bbmax^(0+128)
  7718  0AF6                     l684:	
  7719                           
  7720                           ;sample.c: 316: if(bbmin>t32)bbmin=t32;
  7721  0AF6  0020               	movlb	0	; select bank0
  7722  0AF7  0841               	movf	pid_pwm1_idrv_b_b@t32+3,w
  7723  0AF8  3A80               	xorlw	128
  7724  0AF9  00B6               	movwf	??_pid_pwm1_idrv_b_b
  7725  0AFA  0021               	movlb	1	; select bank1
  7726  0AFB  085D               	movf	(_bbmin+3)^(0+128),w
  7727  0AFC  3A80               	xorlw	128
  7728  0AFD  0020               	movlb	0	; select bank0
  7729  0AFE  0236               	subwf	??_pid_pwm1_idrv_b_b,w
  7730  0AFF  1D03               	skipz
  7731  0B00  2B11               	goto	u5063
  7732  0B01  0021               	movlb	1	; select bank1
  7733  0B02  085C               	movf	(_bbmin+2)^(0+128),w
  7734  0B03  0020               	movlb	0	; select bank0
  7735  0B04  0240               	subwf	pid_pwm1_idrv_b_b@t32+2,w
  7736  0B05  1D03               	skipz
  7737  0B06  2B11               	goto	u5063
  7738  0B07  0021               	movlb	1	; select bank1
  7739  0B08  085B               	movf	(_bbmin+1)^(0+128),w
  7740  0B09  0020               	movlb	0	; select bank0
  7741  0B0A  023F               	subwf	pid_pwm1_idrv_b_b@t32+1,w
  7742  0B0B  1D03               	skipz
  7743  0B0C  2B11               	goto	u5063
  7744  0B0D  0021               	movlb	1	; select bank1
  7745  0B0E  085A               	movf	_bbmin^(0+128),w
  7746  0B0F  0020               	movlb	0	; select bank0
  7747  0B10  023E               	subwf	pid_pwm1_idrv_b_b@t32,w
  7748  0B11                     u5063:	
  7749  0B11  1803               	skipnc
  7750  0B12  0008               	return
  7751  0B13  0841               	movf	pid_pwm1_idrv_b_b@t32+3,w
  7752  0B14  0021               	movlb	1	; select bank1
  7753  0B15  00DD               	movwf	(_bbmin+3)^(0+128)
  7754  0B16  0020               	movlb	0	; select bank0
  7755  0B17  0840               	movf	pid_pwm1_idrv_b_b@t32+2,w
  7756  0B18  0021               	movlb	1	; select bank1
  7757  0B19  00DC               	movwf	(_bbmin+2)^(0+128)
  7758  0B1A  0020               	movlb	0	; select bank0
  7759  0B1B  083F               	movf	pid_pwm1_idrv_b_b@t32+1,w
  7760  0B1C  0021               	movlb	1	; select bank1
  7761  0B1D  00DB               	movwf	(_bbmin+1)^(0+128)
  7762  0B1E  0020               	movlb	0	; select bank0
  7763  0B1F  083E               	movf	pid_pwm1_idrv_b_b@t32,w
  7764  0B20  0021               	movlb	1	; select bank1
  7765  0B21  00DA               	movwf	_bbmin^(0+128)
  7766  0B22  0008               	return
  7767  0B23                     l673:	
  7768  0B23  0008               	return
  7769  0B24                     __end_of_pid_pwm1_idrv_b_b:	
  7770                           
  7771                           	psect	swtext1
  7772  1839                     __pswtext1:	
  7773  1839                     S5919:	
  7774  1839  3188  28FE         	ljmp	l5447
  7775  183B  3188  28FE         	ljmp	l5447
  7776  183D  3189  2900         	ljmp	l5453
  7777  183F  3189  2917         	ljmp	l5459
  7778  1841  3189  2942         	ljmp	l5473
  7779  1843  318B  2B23         	ljmp	l673
  7780                           
  7781                           	psect	text11
  7782  1B64                     __ptext11:	
  7783 ;; *************** function _set_idrv_pwm1_duty *****************
  7784 ;; Defined at:
  7785 ;;		line 72 in file "src/api/sample.c"
  7786 ;; Parameters:    Size  Location     Type
  7787 ;;  duty            2    2[BANK0 ] unsigned int 
  7788 ;; Auto vars:     Size  Location     Type
  7789 ;;  t16             2    4[BANK0 ] unsigned int 
  7790 ;; Return value:  Size  Location     Type
  7791 ;;                  1    wreg      void 
  7792 ;; Registers used:
  7793 ;;		wreg, status,2, pclath, cstack
  7794 ;; Tracked objects:
  7795 ;;		On entry : 0/0
  7796 ;;		On exit  : 0/0
  7797 ;;		Unchanged: 0/0
  7798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7799 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7800 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7802 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7803 ;;Total ram usage:        4 bytes
  7804 ;; Hardware stack levels used:    1
  7805 ;; Hardware stack levels required when called:    2
  7806 ;; This function calls:
  7807 ;;		_get_idrv_pwm1_duty
  7808 ;; This function is called by:
  7809 ;;		_pid_pwm1_idrv_b_b
  7810 ;;		_pid_pwm1_idrv_run
  7811 ;; This function uses a non-reentrant model
  7812 ;;
  7813                           
  7814                           
  7815                           ;psect for function _set_idrv_pwm1_duty
  7816  1B64                     _set_idrv_pwm1_duty:	
  7817                           
  7818                           ;sample.c: 75: uint16_t t16;
  7819                           ;sample.c: 76: pwm1DutyForIdrv=duty;
  7820                           
  7821                           ;incstack = 0
  7822                           ; Regs used in _set_idrv_pwm1_duty: [wreg+status,2+pclath+cstack]
  7823  1B64  0020               	movlb	0	; select bank0
  7824  1B65  0823               	movf	set_idrv_pwm1_duty@duty+1,w
  7825  1B66  0021               	movlb	1	; select bank1
  7826  1B67  00E7               	movwf	(_pwm1DutyForIdrv+1)^(0+128)
  7827  1B68  0020               	movlb	0	; select bank0
  7828  1B69  0822               	movf	set_idrv_pwm1_duty@duty,w
  7829  1B6A  0021               	movlb	1	; select bank1
  7830  1B6B  00E6               	movwf	_pwm1DutyForIdrv^(0+128)
  7831                           
  7832                           ;sample.c: 77: t16=get_idrv_pwm1_duty();
  7833  1B6C  319A  2287  319B   	fcall	_get_idrv_pwm1_duty
  7834  1B6F  0874               	movf	?_get_idrv_pwm1_duty+1,w
  7835  1B70  0020               	movlb	0	; select bank0
  7836  1B71  00A5               	movwf	set_idrv_pwm1_duty@t16+1
  7837  1B72  0873               	movf	?_get_idrv_pwm1_duty,w
  7838  1B73  00A4               	movwf	set_idrv_pwm1_duty@t16
  7839                           
  7840                           ;sample.c: 78: if(t16==duty)return;
  7841  1B74  0823               	movf	set_idrv_pwm1_duty@duty+1,w
  7842  1B75  0625               	xorwf	set_idrv_pwm1_duty@t16+1,w
  7843  1B76  1D03               	skipz
  7844  1B77  2B7A               	goto	u4355
  7845  1B78  0822               	movf	set_idrv_pwm1_duty@duty,w
  7846  1B79  0624               	xorwf	set_idrv_pwm1_duty@t16,w
  7847  1B7A                     u4355:	
  7848  1B7A  1903               	btfsc	3,2
  7849  1B7B  0008               	return
  7850                           
  7851                           ;sample.c: 81: PWM1CONbits.EN = 0;
  7852  1B7C  003B               	movlb	27	; select bank27
  7853  1B7D  139B               	bcf	27,7	;volatile
  7854                           
  7855                           ;sample.c: 82: PWM1DCL= (uint8_t)(duty&0xff);
  7856  1B7E  0020               	movlb	0	; select bank0
  7857  1B7F  0822               	movf	set_idrv_pwm1_duty@duty,w
  7858  1B80  003B               	movlb	27	; select bank27
  7859  1B81  0093               	movwf	19	;volatile
  7860                           
  7861                           ;sample.c: 83: PWM1DCH=(uint8_t)(duty>>8);
  7862  1B82  0020               	movlb	0	; select bank0
  7863  1B83  0823               	movf	set_idrv_pwm1_duty@duty+1,w
  7864  1B84  003B               	movlb	27	; select bank27
  7865  1B85  0094               	movwf	20	;volatile
  7866                           
  7867                           ;sample.c: 84: PWM1CONbits.EN = 1;
  7868  1B86  179B               	bsf	27,7	;volatile
  7869  1B87  0008               	return
  7870  1B88                     __end_of_set_idrv_pwm1_duty:	
  7871                           
  7872                           	psect	text12
  7873  1A87                     __ptext12:	
  7874 ;; *************** function _get_idrv_pwm1_duty *****************
  7875 ;; Defined at:
  7876 ;;		line 63 in file "src/api/sample.c"
  7877 ;; Parameters:    Size  Location     Type
  7878 ;;		None
  7879 ;; Auto vars:     Size  Location     Type
  7880 ;;  t16             2    0[BANK0 ] unsigned int 
  7881 ;; Return value:  Size  Location     Type
  7882 ;;                  2    3[COMMON] unsigned int 
  7883 ;; Registers used:
  7884 ;;		wreg
  7885 ;; Tracked objects:
  7886 ;;		On entry : 0/0
  7887 ;;		On exit  : 0/0
  7888 ;;		Unchanged: 0/0
  7889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7890 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7891 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7892 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7893 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7894 ;;Total ram usage:        6 bytes
  7895 ;; Hardware stack levels used:    1
  7896 ;; Hardware stack levels required when called:    1
  7897 ;; This function calls:
  7898 ;;		Nothing
  7899 ;; This function is called by:
  7900 ;;		_set_idrv_pwm1_duty
  7901 ;; This function uses a non-reentrant model
  7902 ;;
  7903                           
  7904                           
  7905                           ;psect for function _get_idrv_pwm1_duty
  7906  1A87                     _get_idrv_pwm1_duty:	
  7907                           
  7908                           ;sample.c: 66: uint16_t t16=PWM1DCH;
  7909                           
  7910                           ;incstack = 0
  7911                           ; Regs used in _get_idrv_pwm1_duty: [wreg]
  7912  1A87  003B               	movlb	27	; select bank27
  7913  1A88  0814               	movf	20,w	;volatile
  7914  1A89  00F5               	movwf	??_get_idrv_pwm1_duty
  7915  1A8A  01F6               	clrf	??_get_idrv_pwm1_duty+1
  7916  1A8B  0875               	movf	??_get_idrv_pwm1_duty,w
  7917  1A8C  0020               	movlb	0	; select bank0
  7918  1A8D  00A0               	movwf	get_idrv_pwm1_duty@t16
  7919  1A8E  0876               	movf	??_get_idrv_pwm1_duty+1,w
  7920  1A8F  00A1               	movwf	get_idrv_pwm1_duty@t16+1
  7921                           
  7922                           ;sample.c: 67: t16<<=8;
  7923  1A90  3008               	movlw	8
  7924  1A91                     u4295:	
  7925  1A91  35A0               	lslf	get_idrv_pwm1_duty@t16,f
  7926  1A92  0DA1               	rlf	get_idrv_pwm1_duty@t16+1,f
  7927  1A93  0B89               	decfsz	9,f
  7928  1A94  2A91               	goto	u4295
  7929                           
  7930                           ;sample.c: 68: t16|=PWM1DCL;
  7931  1A95  003B               	movlb	27	; select bank27
  7932  1A96  0813               	movf	19,w	;volatile
  7933  1A97  00F5               	movwf	??_get_idrv_pwm1_duty
  7934  1A98  01F6               	clrf	??_get_idrv_pwm1_duty+1
  7935  1A99  0875               	movf	??_get_idrv_pwm1_duty,w
  7936  1A9A  0020               	movlb	0	; select bank0
  7937  1A9B  04A0               	iorwf	get_idrv_pwm1_duty@t16,f
  7938  1A9C  0876               	movf	??_get_idrv_pwm1_duty+1,w
  7939  1A9D  04A1               	iorwf	get_idrv_pwm1_duty@t16+1,f
  7940                           
  7941                           ;sample.c: 69: return t16;
  7942  1A9E  0821               	movf	get_idrv_pwm1_duty@t16+1,w
  7943  1A9F  00F4               	movwf	?_get_idrv_pwm1_duty+1
  7944  1AA0  0820               	movf	get_idrv_pwm1_duty@t16,w
  7945  1AA1  00F3               	movwf	?_get_idrv_pwm1_duty
  7946  1AA2  0008               	return
  7947  1AA3                     __end_of_get_idrv_pwm1_duty:	
  7948                           
  7949                           	psect	text13
  7950  1ABF                     __ptext13:	
  7951 ;; *************** function ___wmul *****************
  7952 ;; Defined at:
  7953 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  7954 ;; Parameters:    Size  Location     Type
  7955 ;;  multiplier      2    3[COMMON] unsigned int 
  7956 ;;  multiplicand    2    5[COMMON] unsigned int 
  7957 ;; Auto vars:     Size  Location     Type
  7958 ;;  product         2    0[BANK0 ] unsigned int 
  7959 ;; Return value:  Size  Location     Type
  7960 ;;                  2    3[COMMON] unsigned int 
  7961 ;; Registers used:
  7962 ;;		wreg, status,2, status,0
  7963 ;; Tracked objects:
  7964 ;;		On entry : 0/0
  7965 ;;		On exit  : 0/0
  7966 ;;		Unchanged: 0/0
  7967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7968 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7969 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7971 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7972 ;;Total ram usage:        6 bytes
  7973 ;; Hardware stack levels used:    1
  7974 ;; Hardware stack levels required when called:    1
  7975 ;; This function calls:
  7976 ;;		Nothing
  7977 ;; This function is called by:
  7978 ;;		_pid_pwm1_idrv_b_b
  7979 ;;		_sys_data_init
  7980 ;; This function uses a non-reentrant model
  7981 ;;
  7982                           
  7983                           
  7984                           ;psect for function ___wmul
  7985  1ABF                     ___wmul:	
  7986                           
  7987                           ;incstack = 0
  7988                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7989  1ABF  0020               	movlb	0	; select bank0
  7990  1AC0  01A0               	clrf	___wmul@product
  7991  1AC1  01A1               	clrf	___wmul@product+1
  7992  1AC2                     l5291:	
  7993  1AC2  1C73               	btfss	___wmul@multiplier,0
  7994  1AC3  2AC9               	goto	l1145
  7995  1AC4  0875               	movf	___wmul@multiplicand,w
  7996  1AC5  0020               	movlb	0	; select bank0
  7997  1AC6  07A0               	addwf	___wmul@product,f
  7998  1AC7  0876               	movf	___wmul@multiplicand+1,w
  7999  1AC8  3DA1               	addwfc	___wmul@product+1,f
  8000  1AC9                     l1145:	
  8001  1AC9  3001               	movlw	1
  8002  1ACA                     u4675:	
  8003  1ACA  35F5               	lslf	___wmul@multiplicand,f
  8004  1ACB  0DF6               	rlf	___wmul@multiplicand+1,f
  8005  1ACC  0B89               	decfsz	9,f
  8006  1ACD  2ACA               	goto	u4675
  8007  1ACE  3001               	movlw	1
  8008  1ACF                     u4685:	
  8009  1ACF  36F4               	lsrf	___wmul@multiplier+1,f
  8010  1AD0  0CF3               	rrf	___wmul@multiplier,f
  8011  1AD1  0B89               	decfsz	9,f
  8012  1AD2  2ACF               	goto	u4685
  8013  1AD3  0873               	movf	___wmul@multiplier,w
  8014  1AD4  0474               	iorwf	___wmul@multiplier+1,w
  8015  1AD5  1D03               	btfss	3,2
  8016  1AD6  2AC2               	goto	l5291
  8017  1AD7  0020               	movlb	0	; select bank0
  8018  1AD8  0821               	movf	___wmul@product+1,w
  8019  1AD9  00F4               	movwf	?___wmul+1
  8020  1ADA  0820               	movf	___wmul@product,w
  8021  1ADB  00F3               	movwf	?___wmul
  8022  1ADC  0008               	return
  8023  1ADD                     __end_of___wmul:	
  8024                           
  8025                           	psect	text14
  8026  1C34                     __ptext14:	
  8027 ;; *************** function ___lwdiv *****************
  8028 ;; Defined at:
  8029 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwdiv.c"
  8030 ;; Parameters:    Size  Location     Type
  8031 ;;  divisor         2    2[BANK0 ] unsigned int 
  8032 ;;  dividend        2    4[BANK0 ] unsigned int 
  8033 ;; Auto vars:     Size  Location     Type
  8034 ;;  quotient        2    6[BANK0 ] unsigned int 
  8035 ;;  counter         1    8[BANK0 ] unsigned char 
  8036 ;; Return value:  Size  Location     Type
  8037 ;;                  2    2[BANK0 ] unsigned int 
  8038 ;; Registers used:
  8039 ;;		wreg, status,2, status,0
  8040 ;; Tracked objects:
  8041 ;;		On entry : 0/0
  8042 ;;		On exit  : 0/0
  8043 ;;		Unchanged: 0/0
  8044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8045 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8046 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8047 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8048 ;;      Totals:         1       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8049 ;;Total ram usage:        8 bytes
  8050 ;; Hardware stack levels used:    1
  8051 ;; Hardware stack levels required when called:    1
  8052 ;; This function calls:
  8053 ;;		Nothing
  8054 ;; This function is called by:
  8055 ;;		_pid_pwm1_idrv_b_b
  8056 ;;		_pid_pwm2_vout_run
  8057 ;; This function uses a non-reentrant model
  8058 ;;
  8059                           
  8060                           
  8061                           ;psect for function ___lwdiv
  8062  1C34                     ___lwdiv:	
  8063                           
  8064                           ;incstack = 0
  8065                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  8066  1C34  0020               	movlb	0	; select bank0
  8067  1C35  01A6               	clrf	___lwdiv@quotient
  8068  1C36  01A7               	clrf	___lwdiv@quotient+1
  8069  1C37  0822               	movf	___lwdiv@divisor,w
  8070  1C38  0423               	iorwf	___lwdiv@divisor+1,w
  8071  1C39  1903               	btfsc	3,2
  8072  1C3A  2C64               	goto	l4111
  8073  1C3B  01A8               	clrf	___lwdiv@counter
  8074  1C3C  0AA8               	incf	___lwdiv@counter,f
  8075  1C3D                     l4099:	
  8076  1C3D  1BA3               	btfsc	___lwdiv@divisor+1,7
  8077  1C3E  2C49               	goto	l4101
  8078  1C3F  3001               	movlw	1
  8079  1C40                     u3155:	
  8080  1C40  35A2               	lslf	___lwdiv@divisor,f
  8081  1C41  0DA3               	rlf	___lwdiv@divisor+1,f
  8082  1C42  0B89               	decfsz	9,f
  8083  1C43  2C40               	goto	u3155
  8084  1C44  3001               	movlw	1
  8085  1C45  00F7               	movwf	??___lwdiv
  8086  1C46  0877               	movf	??___lwdiv,w
  8087  1C47  07A8               	addwf	___lwdiv@counter,f
  8088  1C48  2C3D               	goto	l4099
  8089  1C49                     l4101:	
  8090  1C49  3001               	movlw	1
  8091  1C4A                     u3175:	
  8092  1C4A  35A6               	lslf	___lwdiv@quotient,f
  8093  1C4B  0DA7               	rlf	___lwdiv@quotient+1,f
  8094  1C4C  0B89               	decfsz	9,f
  8095  1C4D  2C4A               	goto	u3175
  8096  1C4E  0823               	movf	___lwdiv@divisor+1,w
  8097  1C4F  0225               	subwf	___lwdiv@dividend+1,w
  8098  1C50  1D03               	skipz
  8099  1C51  2C54               	goto	u3185
  8100  1C52  0822               	movf	___lwdiv@divisor,w
  8101  1C53  0224               	subwf	___lwdiv@dividend,w
  8102  1C54                     u3185:	
  8103  1C54  1C03               	skipc
  8104  1C55  2C5B               	goto	l4107
  8105  1C56  0822               	movf	___lwdiv@divisor,w
  8106  1C57  02A4               	subwf	___lwdiv@dividend,f
  8107  1C58  0823               	movf	___lwdiv@divisor+1,w
  8108  1C59  3BA5               	subwfb	___lwdiv@dividend+1,f
  8109  1C5A  1426               	bsf	___lwdiv@quotient,0
  8110  1C5B                     l4107:	
  8111  1C5B  3001               	movlw	1
  8112  1C5C                     u3195:	
  8113  1C5C  36A3               	lsrf	___lwdiv@divisor+1,f
  8114  1C5D  0CA2               	rrf	___lwdiv@divisor,f
  8115  1C5E  0B89               	decfsz	9,f
  8116  1C5F  2C5C               	goto	u3195
  8117  1C60  3001               	movlw	1
  8118  1C61  02A8               	subwf	___lwdiv@counter,f
  8119  1C62  1D03               	btfss	3,2
  8120  1C63  2C49               	goto	l4101
  8121  1C64                     l4111:	
  8122  1C64  0827               	movf	___lwdiv@quotient+1,w
  8123  1C65  00A3               	movwf	?___lwdiv+1
  8124  1C66  0826               	movf	___lwdiv@quotient,w
  8125  1C67  00A2               	movwf	?___lwdiv
  8126  1C68  0008               	return
  8127  1C69                     __end_of___lwdiv:	
  8128                           
  8129                           	psect	text15
  8130  1DF8                     __ptext15:	
  8131 ;; *************** function _modbus_response_process *****************
  8132 ;; Defined at:
  8133 ;;		line 209 in file "src/api/modbus.c"
  8134 ;; Parameters:    Size  Location     Type
  8135 ;;  rbuf            1    wreg     PTR unsigned char 
  8136 ;;		 -> modbusBuf(60), 
  8137 ;;  rlen            2   32[BANK0 ] unsigned int 
  8138 ;; Auto vars:     Size  Location     Type
  8139 ;;  rbuf            1   37[BANK0 ] PTR unsigned char 
  8140 ;;		 -> modbusBuf(60), 
  8141 ;;  pmdbs           1   36[BANK0 ] PTR struct .
  8142 ;;		 -> modbusBuf(60), 
  8143 ;;  resp            1   35[BANK0 ] unsigned char 
  8144 ;; Return value:  Size  Location     Type
  8145 ;;                  1    wreg      void 
  8146 ;; Registers used:
  8147 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8148 ;; Tracked objects:
  8149 ;;		On entry : 0/0
  8150 ;;		On exit  : 0/0
  8151 ;;		Unchanged: 0/0
  8152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8153 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8154 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8155 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8156 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8157 ;;Total ram usage:        6 bytes
  8158 ;; Hardware stack levels used:    1
  8159 ;; Hardware stack levels required when called:    5
  8160 ;; This function calls:
  8161 ;;		_crc_verify
  8162 ;;		_modbus_response_command
  8163 ;;		_modbus_response_illgeal_function
  8164 ;;		_modbus_response_write_mult_register
  8165 ;;		_modbus_response_write_single_register
  8166 ;; This function is called by:
  8167 ;;		_main
  8168 ;; This function uses a non-reentrant model
  8169 ;;
  8170                           
  8171                           
  8172                           ;psect for function _modbus_response_process
  8173  1DF8                     _modbus_response_process:	
  8174                           
  8175                           ;incstack = 0
  8176                           ; Regs used in _modbus_response_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8177                           ;modbus_response_process@rbuf stored from wreg
  8178  1DF8  0020               	movlb	0	; select bank0
  8179  1DF9  00C5               	movwf	modbus_response_process@rbuf
  8180                           
  8181                           ;modbus.c: 210: uint8_t resp=0;
  8182  1DFA  01C3               	clrf	modbus_response_process@resp
  8183                           
  8184                           ;modbus.c: 211: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)rbuf;
  8185  1DFB  0845               	movf	modbus_response_process@rbuf,w
  8186  1DFC  00C2               	movwf	??_modbus_response_process
  8187  1DFD  0842               	movf	??_modbus_response_process,w
  8188  1DFE  00C4               	movwf	modbus_response_process@pmdbs
  8189                           
  8190                           ;modbus.c: 214: if((pmdbs->addr!=sysData.id) && (pmdbs->addr!=0x00))return;
  8191  1DFF  305C               	movlw	92
  8192  1E00  0086               	movwf	6
  8193  1E01  3023               	movlw	35
  8194  1E02  0087               	movwf	7
  8195  1E03  3142               	addfsr 1,2
  8196  1E04  0844               	movf	modbus_response_process@pmdbs,w
  8197  1E05  0084               	movwf	4
  8198  1E06  3001               	movlw	1	; select bank2/3
  8199  1E07  0085               	movwf	5
  8200  1E08  0800               	movf	0,w
  8201  1E09  0601               	xorwf	1,w
  8202  1E0A  1903               	skipnz
  8203  1E0B  2E13               	goto	l5675
  8204  1E0C  0844               	movf	modbus_response_process@pmdbs,w
  8205  1E0D  0086               	movwf	6
  8206  1E0E  3001               	movlw	1	; select bank2/3
  8207  1E0F  0087               	movwf	7
  8208  1E10  0801               	movf	1,w
  8209  1E11  1D03               	btfss	3,2
  8210  1E12  0008               	return
  8211  1E13                     l5675:	
  8212                           
  8213                           ;modbus.c: 215: if(!(crc_verify(rbuf,rlen)))return ;
  8214  1E13  0845               	movf	modbus_response_process@rbuf,w
  8215  1E14  00A8               	movwf	crc_verify@message
  8216  1E15  3001               	movlw	1
  8217  1E16  00A9               	movwf	crc_verify@message+1
  8218  1E17  0841               	movf	modbus_response_process@rlen+1,w
  8219  1E18  00AB               	movwf	crc_verify@n+1
  8220  1E19  0840               	movf	modbus_response_process@rlen,w
  8221  1E1A  00AA               	movwf	crc_verify@n
  8222  1E1B  319C  2469  319D   	fcall	_crc_verify
  8223  1E1E  3A00               	xorlw	0
  8224  1E1F  1903               	btfsc	3,2
  8225  1E20  0008               	return
  8226  1E21  2E38               	goto	l5689
  8227  1E22                     l5679:	
  8228                           ;modbus.c: 218: case 0x03:
  8229                           
  8230                           ;modbus.c: 217: switch(pmdbs->func){
  8231                           
  8232                           
  8233                           ;modbus.c: 219: modbus_response_command(rbuf);
  8234  1E22  0020               	movlb	0	; select bank0
  8235  1E23  0845               	movf	modbus_response_process@rbuf,w
  8236  1E24  3194  2400         	fcall	_modbus_response_command
  8237                           
  8238                           ;modbus.c: 220: break;
  8239  1E26  0008               	return
  8240  1E27                     l5681:	
  8241                           ;modbus.c: 221: case 0x06:
  8242                           
  8243                           
  8244                           ;modbus.c: 222: case 0x26:
  8245                           ;modbus.c: 223: modbus_response_write_single_register(rbuf);
  8246  1E27  0020               	movlb	0	; select bank0
  8247  1E28  0845               	movf	modbus_response_process@rbuf,w
  8248  1E29  318E  2697         	fcall	_modbus_response_write_single_register
  8249                           
  8250                           ;modbus.c: 224: break;
  8251  1E2B  0008               	return
  8252  1E2C                     l5683:	
  8253                           ;modbus.c: 225: case 0x10:
  8254                           
  8255                           
  8256                           ;modbus.c: 226: modbus_response_write_mult_register(rbuf);
  8257  1E2C  0020               	movlb	0	; select bank0
  8258  1E2D  0845               	movf	modbus_response_process@rbuf,w
  8259  1E2E  3191  212A         	fcall	_modbus_response_write_mult_register
  8260                           
  8261                           ;modbus.c: 227: break;
  8262  1E30  0008               	return
  8263  1E31                     l5685:	
  8264                           ;modbus.c: 250: default:
  8265                           
  8266                           
  8267                           ;modbus.c: 251: modbus_response_illgeal_function(rbuf,0x01);break;
  8268  1E31  0020               	movlb	0	; select bank0
  8269  1E32  01B3               	clrf	modbus_response_illgeal_function@errcode
  8270  1E33  0AB3               	incf	modbus_response_illgeal_function@errcode,f
  8271  1E34  0845               	movf	modbus_response_process@rbuf,w
  8272  1E35  3190  2005         	fcall	_modbus_response_illgeal_function
  8273                           
  8274                           ;modbus.c: 252: }
  8275  1E37  0008               	return
  8276  1E38                     l5689:	
  8277  1E38  0020               	movlb	0	; select bank0
  8278  1E39  0A44               	incf	modbus_response_process@pmdbs,w
  8279  1E3A  0086               	movwf	6
  8280  1E3B  3001               	movlw	1	; select bank2/3
  8281  1E3C  0087               	movwf	7
  8282  1E3D  0801               	movf	1,w
  8283                           
  8284                           ; Switch size 1, requested type "space"
  8285                           ; Number of cases is 4, Range of values is 3 to 38
  8286                           ; switch strategies available:
  8287                           ; Name         Instructions Cycles
  8288                           ; simple_byte           13     7 (average)
  8289                           ; direct_byte           81     9 (fixed)
  8290                           ; jumptable            263     9 (fixed)
  8291                           ;	Chosen strategy is simple_byte
  8292  1E3E  3A03               	xorlw	3	; case 3
  8293  1E3F  1903               	skipnz
  8294  1E40  2E22               	goto	l5679
  8295  1E41  3A05               	xorlw	5	; case 6
  8296  1E42  1903               	skipnz
  8297  1E43  2E27               	goto	l5681
  8298  1E44  3A16               	xorlw	22	; case 16
  8299  1E45  1903               	skipnz
  8300  1E46  2E2C               	goto	l5683
  8301  1E47  3A36               	xorlw	54	; case 38
  8302  1E48  1903               	skipnz
  8303  1E49  2E27               	goto	l5681
  8304  1E4A  2E31               	goto	l5685
  8305  1E4B  0008               	return
  8306  1E4C                     __end_of_modbus_response_process:	
  8307                           
  8308                           	psect	text16
  8309  0E97                     __ptext16:	
  8310 ;; *************** function _modbus_response_write_single_register *****************
  8311 ;; Defined at:
  8312 ;;		line 115 in file "src/api/modbus.c"
  8313 ;; Parameters:    Size  Location     Type
  8314 ;;  rbuf            1    wreg     PTR unsigned char 
  8315 ;;		 -> modbusBuf(60), 
  8316 ;; Auto vars:     Size  Location     Type
  8317 ;;  rbuf            1   29[BANK0 ] PTR unsigned char 
  8318 ;;		 -> modbusBuf(60), 
  8319 ;;  startAddr       2   30[BANK0 ] unsigned int 
  8320 ;;  i               2   26[BANK0 ] unsigned int 
  8321 ;;  t16             2   24[BANK0 ] unsigned int 
  8322 ;;  pmdbs           1   28[BANK0 ] PTR struct .
  8323 ;;		 -> modbusBuf(60), 
  8324 ;;  fiSave          1   23[BANK0 ] unsigned char 
  8325 ;; Return value:  Size  Location     Type
  8326 ;;                  1    wreg      void 
  8327 ;; Registers used:
  8328 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8329 ;; Tracked objects:
  8330 ;;		On entry : 0/0
  8331 ;;		On exit  : 0/0
  8332 ;;		Unchanged: 0/0
  8333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8335 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8336 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8337 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8338 ;;Total ram usage:       13 bytes
  8339 ;; Hardware stack levels used:    1
  8340 ;; Hardware stack levels required when called:    4
  8341 ;; This function calls:
  8342 ;;		_crc_append
  8343 ;;		_sys_data_save
  8344 ;;		_uart_send_len
  8345 ;; This function is called by:
  8346 ;;		_modbus_response_process
  8347 ;; This function uses a non-reentrant model
  8348 ;;
  8349                           
  8350                           
  8351                           ;psect for function _modbus_response_write_single_register
  8352  0E97                     _modbus_response_write_single_register:	
  8353                           
  8354                           ;incstack = 0
  8355                           ; Regs used in _modbus_response_write_single_register: [wreg-fsr1h+status,2+status,0+pcl
      +                          ath+cstack]
  8356                           ;modbus_response_write_single_register@rbuf stored from wreg
  8357  0E97  0020               	movlb	0	; select bank0
  8358  0E98  00BD               	movwf	modbus_response_write_single_register@rbuf
  8359                           
  8360                           ;modbus.c: 117: uint16_t startAddr=0;
  8361  0E99  01BE               	clrf	modbus_response_write_single_register@startAddr
  8362  0E9A  01BF               	clrf	modbus_response_write_single_register@startAddr+1
  8363                           
  8364                           ;modbus.c: 118: uint16_t t16,i;
  8365                           ;modbus.c: 119: uint8_t fiSave=0;
  8366  0E9B  01B7               	clrf	modbus_response_write_single_register@fiSave
  8367                           
  8368                           ;modbus.c: 120: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)rbuf;
  8369  0E9C  083D               	movf	modbus_response_write_single_register@rbuf,w
  8370  0E9D  00B3               	movwf	??_modbus_response_write_single_register
  8371  0E9E  0833               	movf	??_modbus_response_write_single_register,w
  8372  0E9F  00BC               	movwf	modbus_response_write_single_register@pmdbs
  8373                           
  8374                           ;modbus.c: 121: if(pmdbs->addr!=sysData.id && pmdbs->addr!=0)return;
  8375  0EA0  305C               	movlw	92
  8376  0EA1  0086               	movwf	6
  8377  0EA2  3023               	movlw	35
  8378  0EA3  0087               	movwf	7
  8379  0EA4  3142               	addfsr 1,2
  8380  0EA5  083C               	movf	modbus_response_write_single_register@pmdbs,w
  8381  0EA6  0084               	movwf	4
  8382  0EA7  3001               	movlw	1	; select bank2/3
  8383  0EA8  0085               	movwf	5
  8384  0EA9  0800               	movf	0,w
  8385  0EAA  0601               	xorwf	1,w
  8386  0EAB  1903               	skipnz
  8387  0EAC  2EB4               	goto	l5145
  8388  0EAD  083C               	movf	modbus_response_write_single_register@pmdbs,w
  8389  0EAE  0086               	movwf	6
  8390  0EAF  3001               	movlw	1	; select bank2/3
  8391  0EB0  0087               	movwf	7
  8392  0EB1  0801               	movf	1,w
  8393  0EB2  1D03               	btfss	3,2
  8394  0EB3  0008               	return
  8395  0EB4                     l5145:	
  8396                           
  8397                           ;modbus.c: 122: if(sysData.id==253 && pmdbs->addr==0)return;
  8398  0EB4  305C               	movlw	92
  8399  0EB5  0086               	movwf	6
  8400  0EB6  3023               	movlw	35
  8401  0EB7  0087               	movwf	7
  8402  0EB8  3142               	addfsr 1,2
  8403  0EB9  30FD               	movlw	253
  8404  0EBA  0601               	xorwf	1,w
  8405  0EBB  1D03               	btfss	3,2
  8406  0EBC  2EC4               	goto	l5151
  8407  0EBD  083C               	movf	modbus_response_write_single_register@pmdbs,w
  8408  0EBE  0086               	movwf	6
  8409  0EBF  3001               	movlw	1	; select bank2/3
  8410  0EC0  0087               	movwf	7
  8411  0EC1  0801               	movf	1,w
  8412  0EC2  1903               	btfsc	3,2
  8413  0EC3  0008               	return
  8414  0EC4                     l5151:	
  8415                           
  8416                           ;modbus.c: 123: startAddr=pmdbs->addr_hi;
  8417  0EC4  083C               	movf	modbus_response_write_single_register@pmdbs,w
  8418  0EC5  3E02               	addlw	2
  8419  0EC6  0086               	movwf	6
  8420  0EC7  3001               	movlw	1	; select bank2/3
  8421  0EC8  0087               	movwf	7
  8422  0EC9  0801               	movf	1,w
  8423  0ECA  00B3               	movwf	??_modbus_response_write_single_register
  8424  0ECB  01B4               	clrf	??_modbus_response_write_single_register+1
  8425  0ECC  0833               	movf	??_modbus_response_write_single_register,w
  8426  0ECD  00BE               	movwf	modbus_response_write_single_register@startAddr
  8427  0ECE  0834               	movf	??_modbus_response_write_single_register+1,w
  8428  0ECF  00BF               	movwf	modbus_response_write_single_register@startAddr+1
  8429                           
  8430                           ;modbus.c: 124: startAddr<<=8;
  8431  0ED0  3008               	movlw	8
  8432  0ED1                     u4455:	
  8433  0ED1  35BE               	lslf	modbus_response_write_single_register@startAddr,f
  8434  0ED2  0DBF               	rlf	modbus_response_write_single_register@startAddr+1,f
  8435  0ED3  0B89               	decfsz	9,f
  8436  0ED4  2ED1               	goto	u4455
  8437                           
  8438                           ;modbus.c: 125: startAddr |= pmdbs->addr_lo;
  8439  0ED5  083C               	movf	modbus_response_write_single_register@pmdbs,w
  8440  0ED6  3E03               	addlw	3
  8441  0ED7  0086               	movwf	6
  8442  0ED8  3001               	movlw	1	; select bank2/3
  8443  0ED9  0087               	movwf	7
  8444  0EDA  0801               	movf	1,w
  8445  0EDB  00B3               	movwf	??_modbus_response_write_single_register
  8446  0EDC  01B4               	clrf	??_modbus_response_write_single_register+1
  8447  0EDD  0833               	movf	??_modbus_response_write_single_register,w
  8448  0EDE  04BE               	iorwf	modbus_response_write_single_register@startAddr,f
  8449  0EDF  0834               	movf	??_modbus_response_write_single_register+1,w
  8450  0EE0  04BF               	iorwf	modbus_response_write_single_register@startAddr+1,f
  8451                           
  8452                           ;modbus.c: 126: startAddr = startAddr & 0xff;
  8453  0EE1  30FF               	movlw	255
  8454  0EE2  053E               	andwf	modbus_response_write_single_register@startAddr,w
  8455  0EE3  00BE               	movwf	modbus_response_write_single_register@startAddr
  8456  0EE4  3000               	movlw	0
  8457  0EE5  053F               	andwf	modbus_response_write_single_register@startAddr+1,w
  8458  0EE6  00BF               	movwf	modbus_response_write_single_register@startAddr+1
  8459                           
  8460                           ;modbus.c: 127: if(startAddr==0x02){
  8461  0EE7  3002               	movlw	2
  8462  0EE8  063E               	xorwf	modbus_response_write_single_register@startAddr,w
  8463  0EE9  043F               	iorwf	modbus_response_write_single_register@startAddr+1,w
  8464  0EEA  1D03               	btfss	3,2
  8465  0EEB  2EFA               	goto	l5163
  8466                           
  8467                           ;modbus.c: 128: sysData.id=rbuf[5];
  8468  0EEC  083D               	movf	modbus_response_write_single_register@rbuf,w
  8469  0EED  3E05               	addlw	5
  8470  0EEE  0086               	movwf	6
  8471  0EEF  3001               	movlw	1	; select bank2/3
  8472  0EF0  0087               	movwf	7
  8473  0EF1  0801               	movf	1,w
  8474  0EF2  00B3               	movwf	??_modbus_response_write_single_register
  8475  0EF3  305E               	movlw	94
  8476  0EF4  0086               	movwf	6
  8477  0EF5  3023               	movlw	35
  8478  0EF6  0087               	movwf	7
  8479  0EF7  0833               	movf	??_modbus_response_write_single_register,w
  8480  0EF8  0081               	movwf	1
  8481  0EF9  2FC3               	goto	l854
  8482  0EFA                     l5163:	
  8483                           ;modbus.c: 130: }else if(startAddr==0x03){
  8484                           
  8485                           ;modbus.c: 129: fiSave=1;
  8486                           
  8487  0EFA  3003               	movlw	3
  8488  0EFB  063E               	xorwf	modbus_response_write_single_register@startAddr,w
  8489  0EFC  043F               	iorwf	modbus_response_write_single_register@startAddr+1,w
  8490  0EFD  1D03               	btfss	3,2
  8491  0EFE  2F18               	goto	l5171
  8492                           
  8493                           ;modbus.c: 131: sysData.pidSetFlg1=rbuf[4];
  8494  0EFF  083D               	movf	modbus_response_write_single_register@rbuf,w
  8495  0F00  3E04               	addlw	4
  8496  0F01  0086               	movwf	6
  8497  0F02  3001               	movlw	1	; select bank2/3
  8498  0F03  0087               	movwf	7
  8499  0F04  0801               	movf	1,w
  8500  0F05  00B3               	movwf	??_modbus_response_write_single_register
  8501  0F06  305D               	movlw	93
  8502  0F07  0086               	movwf	6
  8503  0F08  3023               	movlw	35
  8504  0F09  0087               	movwf	7
  8505  0F0A  0833               	movf	??_modbus_response_write_single_register,w
  8506  0F0B  0081               	movwf	1
  8507                           
  8508                           ;modbus.c: 132: sysData.pidSetFlg0=rbuf[5];
  8509  0F0C  305C               	movlw	92
  8510  0F0D  0086               	movwf	6
  8511  0F0E  3023               	movlw	35
  8512  0F0F  0087               	movwf	7
  8513  0F10  083D               	movf	modbus_response_write_single_register@rbuf,w
  8514  0F11  3E05               	addlw	5
  8515  0F12  0084               	movwf	4
  8516  0F13  3001               	movlw	1	; select bank2/3
  8517  0F14  0085               	movwf	5
  8518  0F15  0800               	movf	0,w
  8519  0F16  3FC0               	movwi [0]fsr1
  8520  0F17  2FC3               	goto	l854
  8521  0F18                     l5171:	
  8522                           ;modbus.c: 134: }else if(startAddr>0x0f && startAddr < 0x10+30*2){
  8523                           
  8524                           ;modbus.c: 133: fiSave=1;
  8525                           
  8526  0F18  3000               	movlw	0
  8527  0F19  023F               	subwf	modbus_response_write_single_register@startAddr+1,w
  8528  0F1A  3010               	movlw	16
  8529  0F1B  1903               	skipnz
  8530  0F1C  023E               	subwf	modbus_response_write_single_register@startAddr,w
  8531  0F1D  1C03               	skipc
  8532  0F1E  0008               	return
  8533  0F1F  3000               	movlw	0
  8534  0F20  023F               	subwf	modbus_response_write_single_register@startAddr+1,w
  8535  0F21  304C               	movlw	76
  8536  0F22  1903               	skipnz
  8537  0F23  023E               	subwf	modbus_response_write_single_register@startAddr,w
  8538  0F24  1803               	skipnc
  8539  0F25  0008               	return
  8540                           
  8541                           ;modbus.c: 135: startAddr-=0x10;
  8542  0F26  3010               	movlw	16
  8543  0F27  02BE               	subwf	modbus_response_write_single_register@startAddr,f
  8544  0F28  3000               	movlw	0
  8545  0F29  3BBF               	subwfb	modbus_response_write_single_register@startAddr+1,f
  8546                           
  8547                           ;modbus.c: 136: if(startAddr & 0x01){
  8548  0F2A  1C3E               	btfss	modbus_response_write_single_register@startAddr,0
  8549  0F2B  2FC5               	goto	l5203
  8550                           
  8551                           ;modbus.c: 137: t16=rbuf[4];
  8552  0F2C  083D               	movf	modbus_response_write_single_register@rbuf,w
  8553  0F2D  3E04               	addlw	4
  8554  0F2E  0086               	movwf	6
  8555  0F2F  3001               	movlw	1	; select bank2/3
  8556  0F30  0087               	movwf	7
  8557  0F31  0801               	movf	1,w
  8558  0F32  00B3               	movwf	??_modbus_response_write_single_register
  8559  0F33  01B4               	clrf	??_modbus_response_write_single_register+1
  8560  0F34  0833               	movf	??_modbus_response_write_single_register,w
  8561  0F35  00B8               	movwf	modbus_response_write_single_register@t16
  8562  0F36  0834               	movf	??_modbus_response_write_single_register+1,w
  8563  0F37  00B9               	movwf	modbus_response_write_single_register@t16+1
  8564                           
  8565                           ;modbus.c: 138: t16<<=8;
  8566  0F38  3008               	movlw	8
  8567  0F39                     u4515:	
  8568  0F39  35B8               	lslf	modbus_response_write_single_register@t16,f
  8569  0F3A  0DB9               	rlf	modbus_response_write_single_register@t16+1,f
  8570  0F3B  0B89               	decfsz	9,f
  8571  0F3C  2F39               	goto	u4515
  8572                           
  8573                           ;modbus.c: 139: t16 |= rbuf[5];
  8574  0F3D  083D               	movf	modbus_response_write_single_register@rbuf,w
  8575  0F3E  3E05               	addlw	5
  8576  0F3F  0086               	movwf	6
  8577  0F40  3001               	movlw	1	; select bank2/3
  8578  0F41  0087               	movwf	7
  8579  0F42  0801               	movf	1,w
  8580  0F43  00B3               	movwf	??_modbus_response_write_single_register
  8581  0F44  01B4               	clrf	??_modbus_response_write_single_register+1
  8582  0F45  0833               	movf	??_modbus_response_write_single_register,w
  8583  0F46  04B8               	iorwf	modbus_response_write_single_register@t16,f
  8584  0F47  0834               	movf	??_modbus_response_write_single_register+1,w
  8585  0F48  04B9               	iorwf	modbus_response_write_single_register@t16+1,f
  8586                           
  8587                           ;modbus.c: 140: sysData.calibVoMV[startAddr>>1]=t16;
  8588  0F49  083F               	movf	modbus_response_write_single_register@startAddr+1,w
  8589  0F4A  00B4               	movwf	??_modbus_response_write_single_register+1
  8590  0F4B  083E               	movf	modbus_response_write_single_register@startAddr,w
  8591  0F4C  00B3               	movwf	??_modbus_response_write_single_register
  8592  0F4D  36B4               	lsrf	??_modbus_response_write_single_register+1,f
  8593  0F4E  0CB3               	rrf	??_modbus_response_write_single_register,f
  8594  0F4F  35B3               	lslf	??_modbus_response_write_single_register,f
  8595  0F50  0DB4               	rlf	??_modbus_response_write_single_register+1,f
  8596  0F51  30A2               	movlw	162
  8597  0F52  00B5               	movwf	??_modbus_response_write_single_register+2
  8598  0F53  3023               	movlw	35
  8599  0F54  00B6               	movwf	??_modbus_response_write_single_register+3
  8600  0F55  0833               	movf	??_modbus_response_write_single_register,w
  8601  0F56  0735               	addwf	??_modbus_response_write_single_register+2,w
  8602  0F57  0086               	movwf	6
  8603  0F58  0834               	movf	??_modbus_response_write_single_register+1,w
  8604  0F59  3D36               	addwfc	??_modbus_response_write_single_register+3,w
  8605  0F5A  0087               	movwf	7
  8606  0F5B  0838               	movf	modbus_response_write_single_register@t16,w
  8607  0F5C  3FC0               	movwi [0]fsr1
  8608  0F5D  0839               	movf	modbus_response_write_single_register@t16+1,w
  8609  0F5E  3FC1               	movwi [1]fsr1
  8610                           
  8611                           ;modbus.c: 141: sysData.calibRsAdc[startAddr>>1]=rsLoAvg;
  8612  0F5F  083F               	movf	modbus_response_write_single_register@startAddr+1,w
  8613  0F60  00B4               	movwf	??_modbus_response_write_single_register+1
  8614  0F61  083E               	movf	modbus_response_write_single_register@startAddr,w
  8615  0F62  00B3               	movwf	??_modbus_response_write_single_register
  8616  0F63  36B4               	lsrf	??_modbus_response_write_single_register+1,f
  8617  0F64  0CB3               	rrf	??_modbus_response_write_single_register,f
  8618  0F65  35B3               	lslf	??_modbus_response_write_single_register,f
  8619  0F66  0DB4               	rlf	??_modbus_response_write_single_register+1,f
  8620  0F67  3066               	movlw	102
  8621  0F68  00B5               	movwf	??_modbus_response_write_single_register+2
  8622  0F69  3023               	movlw	35
  8623  0F6A  00B6               	movwf	??_modbus_response_write_single_register+3
  8624  0F6B  0833               	movf	??_modbus_response_write_single_register,w
  8625  0F6C  0735               	addwf	??_modbus_response_write_single_register+2,w
  8626  0F6D  0086               	movwf	6
  8627  0F6E  0834               	movf	??_modbus_response_write_single_register+1,w
  8628  0F6F  3D36               	addwfc	??_modbus_response_write_single_register+3,w
  8629  0F70  0087               	movwf	7
  8630  0F71  085E               	movf	_rsLoAvg,w
  8631  0F72  3FC0               	movwi [0]fsr1
  8632  0F73  085F               	movf	_rsLoAvg+1,w
  8633  0F74  3FC1               	movwi [1]fsr1
  8634                           
  8635                           ;modbus.c: 143: if(rbuf[1]==0x26){
  8636  0F75  0A3D               	incf	modbus_response_write_single_register@rbuf,w
  8637  0F76  0086               	movwf	6
  8638  0F77  3001               	movlw	1	; select bank2/3
  8639  0F78  0087               	movwf	7
  8640  0F79  3026               	movlw	38
  8641  0F7A  0601               	xorwf	1,w
  8642  0F7B  1D03               	btfss	3,2
  8643  0F7C  2FC3               	goto	l854
  8644                           
  8645                           ;modbus.c: 144: for(i=(startAddr>>1)+1;i<30;i++){
  8646  0F7D  083F               	movf	modbus_response_write_single_register@startAddr+1,w
  8647  0F7E  00B4               	movwf	??_modbus_response_write_single_register+1
  8648  0F7F  083E               	movf	modbus_response_write_single_register@startAddr,w
  8649  0F80  00B3               	movwf	??_modbus_response_write_single_register
  8650  0F81  36B4               	lsrf	??_modbus_response_write_single_register+1,f
  8651  0F82  0CB3               	rrf	??_modbus_response_write_single_register,f
  8652  0F83  0833               	movf	??_modbus_response_write_single_register,w
  8653  0F84  3E01               	addlw	1
  8654  0F85  00BA               	movwf	modbus_response_write_single_register@i
  8655  0F86  3000               	movlw	0
  8656  0F87  3D34               	addwfc	??_modbus_response_write_single_register+1,w
  8657  0F88  00BB               	movwf	modbus_response_write_single_register@i+1
  8658  0F89  3000               	movlw	0
  8659  0F8A  023B               	subwf	modbus_response_write_single_register@i+1,w
  8660  0F8B  301E               	movlw	30
  8661  0F8C  1903               	skipnz
  8662  0F8D  023A               	subwf	modbus_response_write_single_register@i,w
  8663  0F8E  1803               	btfsc	3,0
  8664  0F8F  2FC3               	goto	l854
  8665  0F90                     l5197:	
  8666                           
  8667                           ;modbus.c: 145: sysData.calibVoMV[i]=t16;
  8668  0F90  083B               	movf	modbus_response_write_single_register@i+1,w
  8669  0F91  00B4               	movwf	??_modbus_response_write_single_register+1
  8670  0F92  083A               	movf	modbus_response_write_single_register@i,w
  8671  0F93  00B3               	movwf	??_modbus_response_write_single_register
  8672  0F94  35B3               	lslf	??_modbus_response_write_single_register,f
  8673  0F95  0DB4               	rlf	??_modbus_response_write_single_register+1,f
  8674  0F96  30A2               	movlw	162
  8675  0F97  00B5               	movwf	??_modbus_response_write_single_register+2
  8676  0F98  3023               	movlw	35
  8677  0F99  00B6               	movwf	??_modbus_response_write_single_register+3
  8678  0F9A  0833               	movf	??_modbus_response_write_single_register,w
  8679  0F9B  0735               	addwf	??_modbus_response_write_single_register+2,w
  8680  0F9C  0086               	movwf	6
  8681  0F9D  0834               	movf	??_modbus_response_write_single_register+1,w
  8682  0F9E  3D36               	addwfc	??_modbus_response_write_single_register+3,w
  8683  0F9F  0087               	movwf	7
  8684  0FA0  0838               	movf	modbus_response_write_single_register@t16,w
  8685  0FA1  3FC0               	movwi [0]fsr1
  8686  0FA2  0839               	movf	modbus_response_write_single_register@t16+1,w
  8687  0FA3  3FC1               	movwi [1]fsr1
  8688                           
  8689                           ;modbus.c: 146: sysData.calibRsAdc[i]=rsLoAvg;
  8690  0FA4  083B               	movf	modbus_response_write_single_register@i+1,w
  8691  0FA5  00B4               	movwf	??_modbus_response_write_single_register+1
  8692  0FA6  083A               	movf	modbus_response_write_single_register@i,w
  8693  0FA7  00B3               	movwf	??_modbus_response_write_single_register
  8694  0FA8  35B3               	lslf	??_modbus_response_write_single_register,f
  8695  0FA9  0DB4               	rlf	??_modbus_response_write_single_register+1,f
  8696  0FAA  3066               	movlw	102
  8697  0FAB  00B5               	movwf	??_modbus_response_write_single_register+2
  8698  0FAC  3023               	movlw	35
  8699  0FAD  00B6               	movwf	??_modbus_response_write_single_register+3
  8700  0FAE  0833               	movf	??_modbus_response_write_single_register,w
  8701  0FAF  0735               	addwf	??_modbus_response_write_single_register+2,w
  8702  0FB0  0086               	movwf	6
  8703  0FB1  0834               	movf	??_modbus_response_write_single_register+1,w
  8704  0FB2  3D36               	addwfc	??_modbus_response_write_single_register+3,w
  8705  0FB3  0087               	movwf	7
  8706  0FB4  085E               	movf	_rsLoAvg,w
  8707  0FB5  3FC0               	movwi [0]fsr1
  8708  0FB6  085F               	movf	_rsLoAvg+1,w
  8709  0FB7  3FC1               	movwi [1]fsr1
  8710  0FB8  3001               	movlw	1
  8711  0FB9  07BA               	addwf	modbus_response_write_single_register@i,f
  8712  0FBA  3000               	movlw	0
  8713  0FBB  3DBB               	addwfc	modbus_response_write_single_register@i+1,f
  8714  0FBC  3000               	movlw	0
  8715  0FBD  023B               	subwf	modbus_response_write_single_register@i+1,w
  8716  0FBE  301E               	movlw	30
  8717  0FBF  1903               	skipnz
  8718  0FC0  023A               	subwf	modbus_response_write_single_register@i,w
  8719  0FC1  1C03               	skipc
  8720  0FC2  2F90               	goto	l5197
  8721  0FC3                     l854:	
  8722                           
  8723                           ;modbus.c: 147: }
  8724                           ;modbus.c: 148: }
  8725                           ;modbus.c: 149: fiSave=1;
  8726  0FC3  01B7               	clrf	modbus_response_write_single_register@fiSave
  8727  0FC4  0AB7               	incf	modbus_response_write_single_register@fiSave,f
  8728  0FC5                     l5203:	
  8729                           ;modbus.c: 153: return;
  8730                           
  8731                           ;modbus.c: 150: }
  8732                           ;modbus.c: 151: }else{
  8733                           
  8734                           
  8735                           ;modbus.c: 154: }
  8736                           ;modbus.c: 155: if(fiSave)sys_data_save();
  8737  0FC5  0837               	movf	modbus_response_write_single_register@fiSave,w
  8738  0FC6  1903               	btfsc	3,2
  8739  0FC7  2FCB               	goto	l5207
  8740  0FC8  319C  24A0  318E   	fcall	_sys_data_save
  8741  0FCB                     l5207:	
  8742                           
  8743                           ;modbus.c: 156: if(pmdbs->addr==0)return;
  8744  0FCB  0020               	movlb	0	; select bank0
  8745  0FCC  083C               	movf	modbus_response_write_single_register@pmdbs,w
  8746  0FCD  0086               	movwf	6
  8747  0FCE  3001               	movlw	1	; select bank2/3
  8748  0FCF  0087               	movwf	7
  8749  0FD0  0801               	movf	1,w
  8750  0FD1  1903               	btfsc	3,2
  8751  0FD2  0008               	return
  8752                           
  8753                           ;modbus.c: 157: rbuf[0]=sysData.id;
  8754  0FD3  305C               	movlw	92
  8755  0FD4  0086               	movwf	6
  8756  0FD5  3023               	movlw	35
  8757  0FD6  0087               	movwf	7
  8758  0FD7  3142               	addfsr 1,2
  8759  0FD8  0801               	movf	1,w
  8760  0FD9  00B3               	movwf	??_modbus_response_write_single_register
  8761  0FDA  083D               	movf	modbus_response_write_single_register@rbuf,w
  8762  0FDB  0086               	movwf	6
  8763  0FDC  3001               	movlw	1	; select bank2/3
  8764  0FDD  0087               	movwf	7
  8765  0FDE  0833               	movf	??_modbus_response_write_single_register,w
  8766  0FDF  0081               	movwf	1
  8767                           
  8768                           ;modbus.c: 158: crc_append(rbuf,6);
  8769  0FE0  083D               	movf	modbus_response_write_single_register@rbuf,w
  8770  0FE1  00A8               	movwf	crc_append@message
  8771  0FE2  3001               	movlw	1
  8772  0FE3  00A9               	movwf	crc_append@message+1
  8773  0FE4  3006               	movlw	6
  8774  0FE5  00AA               	movwf	crc_append@n
  8775  0FE6  3000               	movlw	0
  8776  0FE7  00AB               	movwf	crc_append@n+1
  8777  0FE8  319C  2403  318E   	fcall	_crc_append
  8778                           
  8779                           ;modbus.c: 159: uart_send_len(rbuf,8);
  8780  0FEB  3008               	movlw	8
  8781  0FEC  0020               	movlb	0	; select bank0
  8782  0FED  00B3               	movwf	??_modbus_response_write_single_register
  8783  0FEE  0833               	movf	??_modbus_response_write_single_register,w
  8784  0FEF  00F3               	movwf	uart_send_len@len
  8785  0FF0  083D               	movf	modbus_response_write_single_register@rbuf,w
  8786  0FF1  319B  23AC         	fcall	_uart_send_len
  8787  0FF3  0008               	return
  8788  0FF4                     __end_of_modbus_response_write_single_register:	
  8789                           
  8790                           	psect	text17
  8791  112A                     __ptext17:	
  8792 ;; *************** function _modbus_response_write_mult_register *****************
  8793 ;; Defined at:
  8794 ;;		line 162 in file "src/api/modbus.c"
  8795 ;; Parameters:    Size  Location     Type
  8796 ;;  rbuf            1    wreg     PTR unsigned char 
  8797 ;;		 -> modbusBuf(60), 
  8798 ;; Auto vars:     Size  Location     Type
  8799 ;;  rbuf            1   22[BANK0 ] PTR unsigned char 
  8800 ;;		 -> modbusBuf(60), 
  8801 ;;  stb             1   23[BANK0 ] PTR struct .
  8802 ;;		 -> modbusBuf(60), 
  8803 ;;  len             1   21[BANK0 ] unsigned char 
  8804 ;;  startAddr       1   20[BANK0 ] unsigned char 
  8805 ;; Return value:  Size  Location     Type
  8806 ;;                  1    wreg      void 
  8807 ;; Registers used:
  8808 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8809 ;; Tracked objects:
  8810 ;;		On entry : 0/0
  8811 ;;		On exit  : 0/0
  8812 ;;		Unchanged: 0/0
  8813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8815 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8816 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8817 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8818 ;;Total ram usage:        5 bytes
  8819 ;; Hardware stack levels used:    1
  8820 ;; Hardware stack levels required when called:    4
  8821 ;; This function calls:
  8822 ;;		_crc_append
  8823 ;;		_sys_data_save
  8824 ;;		_uart_send_len
  8825 ;; This function is called by:
  8826 ;;		_modbus_response_process
  8827 ;; This function uses a non-reentrant model
  8828 ;;
  8829                           
  8830                           
  8831                           ;psect for function _modbus_response_write_mult_register
  8832  112A                     _modbus_response_write_mult_register:	
  8833                           
  8834                           ;incstack = 0
  8835                           ; Regs used in _modbus_response_write_mult_register: [wreg-fsr1h+status,2+status,0+pclat
      +                          h+cstack]
  8836                           ;modbus_response_write_mult_register@rbuf stored from wreg
  8837  112A  0020               	movlb	0	; select bank0
  8838  112B  00B6               	movwf	modbus_response_write_mult_register@rbuf
  8839                           
  8840                           ;modbus.c: 164: uint8_t startAddr,len;
  8841                           ;modbus.c: 165: st_modbusWriteMultReg_t* stb=(st_modbusWriteMultReg_t*)rbuf;
  8842  112C  0836               	movf	modbus_response_write_mult_register@rbuf,w
  8843  112D  00B3               	movwf	??_modbus_response_write_mult_register
  8844  112E  0833               	movf	??_modbus_response_write_mult_register,w
  8845  112F  00B7               	movwf	modbus_response_write_mult_register@stb
  8846                           
  8847                           ;modbus.c: 166: if(stb->addr!=sysData.id || stb->addr==0)return;
  8848  1130  305C               	movlw	92
  8849  1131  0086               	movwf	6
  8850  1132  3023               	movlw	35
  8851  1133  0087               	movwf	7
  8852  1134  3142               	addfsr 1,2
  8853  1135  0837               	movf	modbus_response_write_mult_register@stb,w
  8854  1136  0084               	movwf	4
  8855  1137  3001               	movlw	1	; select bank2/3
  8856  1138  0085               	movwf	5
  8857  1139  0800               	movf	0,w
  8858  113A  0601               	xorwf	1,w
  8859  113B  1D03               	skipz
  8860  113C  0008               	return
  8861  113D  0837               	movf	modbus_response_write_mult_register@stb,w
  8862  113E  0086               	movwf	6
  8863  113F  3001               	movlw	1	; select bank2/3
  8864  1140  0087               	movwf	7
  8865  1141  0801               	movf	1,w
  8866  1142  1903               	btfsc	3,2
  8867  1143  0008               	return
  8868                           
  8869                           ;modbus.c: 167: startAddr=stb->addr_lo;
  8870  1144  0837               	movf	modbus_response_write_mult_register@stb,w
  8871  1145  0086               	movwf	6
  8872  1146  3001               	movlw	1	; select bank2/3
  8873  1147  0087               	movwf	7
  8874  1148  3001               	movlw	1	; select bank2/3
  8875  1149  3F43               	moviw [3]fsr1
  8876  114A  00B4               	movwf	modbus_response_write_mult_register@startAddr
  8877                           
  8878                           ;modbus.c: 168: len=stb->len_lo;
  8879  114B  0837               	movf	modbus_response_write_mult_register@stb,w
  8880  114C  0086               	movwf	6
  8881  114D  3001               	movlw	1	; select bank2/3
  8882  114E  0087               	movwf	7
  8883  114F  3001               	movlw	1	; select bank2/3
  8884  1150  3F45               	moviw [5]fsr1
  8885  1151  00B5               	movwf	modbus_response_write_mult_register@len
  8886                           
  8887                           ;modbus.c: 169: if(len!=3)return ;
  8888  1152  3003               	movlw	3
  8889  1153  0635               	xorwf	modbus_response_write_mult_register@len,w
  8890  1154  1D03               	btfss	3,2
  8891  1155  0008               	return
  8892                           
  8893                           ;modbus.c: 170: if(startAddr!=4)return;
  8894  1156  3004               	movlw	4
  8895  1157  0634               	xorwf	modbus_response_write_mult_register@startAddr,w
  8896  1158  1D03               	btfss	3,2
  8897  1159  0008               	return
  8898                           
  8899                           ;modbus.c: 171: sysData.pidKp=(stb->data[0]<<8)|(stb->data[1]);
  8900  115A  0837               	movf	modbus_response_write_mult_register@stb,w
  8901  115B  3E06               	addlw	6
  8902  115C  0084               	movwf	4
  8903  115D  3001               	movlw	1	; select bank2/3
  8904  115E  0085               	movwf	5
  8905  115F  0800               	movf	0,w
  8906  1160  00B3               	movwf	??_modbus_response_write_mult_register
  8907  1161  0837               	movf	modbus_response_write_mult_register@stb,w
  8908  1162  3E07               	addlw	7
  8909  1163  0084               	movwf	4
  8910  1164  3001               	movlw	1	; select bank2/3
  8911  1165  0085               	movwf	5
  8912  1166  305C               	movlw	92
  8913  1167  0086               	movwf	6
  8914  1168  3023               	movlw	35
  8915  1169  0087               	movwf	7
  8916  116A  3144               	addfsr 1,4
  8917  116B  0800               	movf	0,w
  8918  116C  3FC0               	movwi [0]fsr1
  8919  116D  0833               	movf	??_modbus_response_write_mult_register,w
  8920  116E  3FC1               	movwi [1]fsr1
  8921                           
  8922                           ;modbus.c: 172: sysData.pidTi=(stb->data[2]<<8)|(stb->data[3]);
  8923  116F  0837               	movf	modbus_response_write_mult_register@stb,w
  8924  1170  3E08               	addlw	8
  8925  1171  0084               	movwf	4
  8926  1172  3001               	movlw	1	; select bank2/3
  8927  1173  0085               	movwf	5
  8928  1174  0800               	movf	0,w
  8929  1175  00B3               	movwf	??_modbus_response_write_mult_register
  8930  1176  0837               	movf	modbus_response_write_mult_register@stb,w
  8931  1177  3E09               	addlw	9
  8932  1178  0084               	movwf	4
  8933  1179  3001               	movlw	1	; select bank2/3
  8934  117A  0085               	movwf	5
  8935  117B  305C               	movlw	92
  8936  117C  0086               	movwf	6
  8937  117D  3023               	movlw	35
  8938  117E  0087               	movwf	7
  8939  117F  3146               	addfsr 1,6
  8940  1180  0800               	movf	0,w
  8941  1181  3FC0               	movwi [0]fsr1
  8942  1182  0833               	movf	??_modbus_response_write_mult_register,w
  8943  1183  3FC1               	movwi [1]fsr1
  8944                           
  8945                           ;modbus.c: 173: sysData.pidTd=(stb->data[4]<<8)|(stb->data[5]);
  8946  1184  0837               	movf	modbus_response_write_mult_register@stb,w
  8947  1185  3E0A               	addlw	10
  8948  1186  0084               	movwf	4
  8949  1187  3001               	movlw	1	; select bank2/3
  8950  1188  0085               	movwf	5
  8951  1189  0800               	movf	0,w
  8952  118A  00B3               	movwf	??_modbus_response_write_mult_register
  8953  118B  0837               	movf	modbus_response_write_mult_register@stb,w
  8954  118C  3E0B               	addlw	11
  8955  118D  0084               	movwf	4
  8956  118E  3001               	movlw	1	; select bank2/3
  8957  118F  0085               	movwf	5
  8958  1190  305C               	movlw	92
  8959  1191  0086               	movwf	6
  8960  1192  3023               	movlw	35
  8961  1193  0087               	movwf	7
  8962  1194  3148               	addfsr 1,8
  8963  1195  0800               	movf	0,w
  8964  1196  3FC0               	movwi [0]fsr1
  8965  1197  0833               	movf	??_modbus_response_write_mult_register,w
  8966  1198  3FC1               	movwi [1]fsr1
  8967                           
  8968                           ;modbus.c: 174: sys_data_save();
  8969  1199  319C  24A0  3191   	fcall	_sys_data_save
  8970                           
  8971                           ;modbus.c: 175: crc_append(rbuf,sizeof(st_modbusWriteMultReg_t)-2);
  8972  119C  0020               	movlb	0	; select bank0
  8973  119D  0836               	movf	modbus_response_write_mult_register@rbuf,w
  8974  119E  00A8               	movwf	crc_append@message
  8975  119F  3001               	movlw	1
  8976  11A0  00A9               	movwf	crc_append@message+1
  8977  11A1  3006               	movlw	6
  8978  11A2  00AA               	movwf	crc_append@n
  8979  11A3  3000               	movlw	0
  8980  11A4  00AB               	movwf	crc_append@n+1
  8981  11A5  319C  2403  3191   	fcall	_crc_append
  8982                           
  8983                           ;modbus.c: 176: uart_send_len(rbuf,sizeof(st_modbusWriteMultReg_t));
  8984  11A8  3008               	movlw	8
  8985  11A9  0020               	movlb	0	; select bank0
  8986  11AA  00B3               	movwf	??_modbus_response_write_mult_register
  8987  11AB  0833               	movf	??_modbus_response_write_mult_register,w
  8988  11AC  00F3               	movwf	uart_send_len@len
  8989  11AD  0836               	movf	modbus_response_write_mult_register@rbuf,w
  8990  11AE  319B  23AC         	fcall	_uart_send_len
  8991  11B0  0008               	return
  8992  11B1                     __end_of_modbus_response_write_mult_register:	
  8993                           
  8994                           	psect	text18
  8995  1CA0                     __ptext18:	
  8996 ;; *************** function _sys_data_save *****************
  8997 ;; Defined at:
  8998 ;;		line 95 in file "src/api/sysData.c"
  8999 ;; Parameters:    Size  Location     Type
  9000 ;;		None
  9001 ;; Auto vars:     Size  Location     Type
  9002 ;;		None
  9003 ;; Return value:  Size  Location     Type
  9004 ;;                  1    wreg      void 
  9005 ;; Registers used:
  9006 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9007 ;; Tracked objects:
  9008 ;;		On entry : 0/0
  9009 ;;		On exit  : 0/0
  9010 ;;		Unchanged: 0/0
  9011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9015 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9016 ;;Total ram usage:        0 bytes
  9017 ;; Hardware stack levels used:    1
  9018 ;; Hardware stack levels required when called:    3
  9019 ;; This function calls:
  9020 ;;		_crc_append
  9021 ;;		_my_flash_read_system_erase
  9022 ;;		_my_flash_system_write
  9023 ;; This function is called by:
  9024 ;;		_sys_data_init
  9025 ;;		_modbus_response_write_single_register
  9026 ;;		_modbus_response_write_mult_register
  9027 ;;		_main
  9028 ;; This function uses a non-reentrant model
  9029 ;;
  9030                           
  9031                           
  9032                           ;psect for function _sys_data_save
  9033  1CA0                     _sys_data_save:	
  9034                           
  9035                           ;sysData.c: 97: crc_append((uint8_t*)&sysData,sizeof(sysData_t)-2);
  9036                           
  9037                           ;incstack = 0
  9038                           ; Regs used in _sys_data_save: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9039  1CA0  305C               	movlw	92
  9040  1CA1  0020               	movlb	0	; select bank0
  9041  1CA2  00A8               	movwf	crc_append@message
  9042  1CA3  3023               	movlw	35
  9043  1CA4  00A9               	movwf	crc_append@message+1
  9044  1CA5  3082               	movlw	130
  9045  1CA6  00AA               	movwf	crc_append@n
  9046  1CA7  3000               	movlw	0
  9047  1CA8  00AB               	movwf	crc_append@n+1
  9048  1CA9  319C  2403  319C   	fcall	_crc_append
  9049                           
  9050                           ;sysData.c: 98: my_flash_read_system_erase();
  9051  1CAC  319B  2341  319C   	fcall	_my_flash_read_system_erase
  9052                           
  9053                           ;sysData.c: 99: my_flash_system_write((uint8_t*)&sysData,sizeof(sysData_t));
  9054  1CAF  305C               	movlw	92
  9055  1CB0  00F3               	movwf	my_flash_system_write@buf
  9056  1CB1  3023               	movlw	35
  9057  1CB2  00F4               	movwf	my_flash_system_write@buf+1
  9058  1CB3  3084               	movlw	132
  9059  1CB4  00F5               	movwf	my_flash_system_write@len
  9060  1CB5  3000               	movlw	0
  9061  1CB6  00F6               	movwf	my_flash_system_write@len+1
  9062  1CB7  3193  2366         	fcall	_my_flash_system_write
  9063                           
  9064                           ;sysData.c: 100: PidKp=sysData.pidKp;
  9065  1CB9  305C               	movlw	92
  9066  1CBA  0086               	movwf	6
  9067  1CBB  3023               	movlw	35
  9068  1CBC  0087               	movwf	7
  9069  1CBD  3144               	addfsr 1,4
  9070  1CBE  3F40               	moviw [0]fsr1
  9071  1CBF  0020               	movlb	0	; select bank0
  9072  1CC0  00E2               	movwf	_PidKp
  9073  1CC1  3F41               	moviw [1]fsr1
  9074  1CC2  00E3               	movwf	_PidKp+1
  9075                           
  9076                           ;sysData.c: 101: PidTi=sysData.pidTi;
  9077  1CC3  305C               	movlw	92
  9078  1CC4  0086               	movwf	6
  9079  1CC5  3023               	movlw	35
  9080  1CC6  0087               	movwf	7
  9081  1CC7  3146               	addfsr 1,6
  9082  1CC8  3F40               	moviw [0]fsr1
  9083  1CC9  0021               	movlb	1	; select bank1
  9084  1CCA  00CE               	movwf	_PidTi^(0+128)
  9085  1CCB  3F41               	moviw [1]fsr1
  9086  1CCC  00CF               	movwf	(_PidTi+1)^(0+128)
  9087                           
  9088                           ;sysData.c: 102: PidTd=sysData.pidTd;;
  9089  1CCD  305C               	movlw	92
  9090  1CCE  0086               	movwf	6
  9091  1CCF  3023               	movlw	35
  9092  1CD0  0087               	movwf	7
  9093  1CD1  3148               	addfsr 1,8
  9094  1CD2  3F40               	moviw [0]fsr1
  9095  1CD3  00CC               	movwf	_PidTd^(0+128)
  9096  1CD4  3F41               	moviw [1]fsr1
  9097  1CD5  00CD               	movwf	(_PidTd+1)^(0+128)
  9098  1CD6  0008               	return
  9099  1CD7                     __end_of_sys_data_save:	
  9100                           
  9101                           	psect	text19
  9102  1366                     __ptext19:	
  9103 ;; *************** function _my_flash_system_write *****************
  9104 ;; Defined at:
  9105 ;;		line 47 in file "src/api/sysData.c"
  9106 ;; Parameters:    Size  Location     Type
  9107 ;;  buf             2    3[COMMON] PTR unsigned char 
  9108 ;;		 -> sysData(132), 
  9109 ;;  len             2    5[COMMON] unsigned int 
  9110 ;; Auto vars:     Size  Location     Type
  9111 ;;  i               2   11[BANK0 ] unsigned int 
  9112 ;;  flashAddr       2    9[BANK0 ] unsigned int 
  9113 ;;  loc             2    7[BANK0 ] unsigned int 
  9114 ;;  blocNum         2    5[BANK0 ] unsigned int 
  9115 ;;  j               2    3[BANK0 ] unsigned int 
  9116 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
  9117 ;; Return value:  Size  Location     Type
  9118 ;;                  2    3[COMMON] unsigned int 
  9119 ;; Registers used:
  9120 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9121 ;; Tracked objects:
  9122 ;;		On entry : 0/0
  9123 ;;		On exit  : 0/0
  9124 ;;		Unchanged: 0/0
  9125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9126 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9127 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9128 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9129 ;;      Totals:         4      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9130 ;;Total ram usage:       17 bytes
  9131 ;; Hardware stack levels used:    1
  9132 ;; Hardware stack levels required when called:    1
  9133 ;; This function calls:
  9134 ;;		Nothing
  9135 ;; This function is called by:
  9136 ;;		_sys_data_save
  9137 ;; This function uses a non-reentrant model
  9138 ;;
  9139                           
  9140                           
  9141                           ;psect for function _my_flash_system_write
  9142  1366                     _my_flash_system_write:	
  9143                           
  9144                           ;sysData.c: 49: uint16_t blocNum=0;
  9145                           
  9146                           ;incstack = 0
  9147                           ; Regs used in _my_flash_system_write: [wreg+fsr1l+fsr1h+status,2+status,0]
  9148  1366  0020               	movlb	0	; select bank0
  9149  1367  01A5               	clrf	my_flash_system_write@blocNum
  9150  1368  01A6               	clrf	my_flash_system_write@blocNum+1
  9151                           
  9152                           ;sysData.c: 50: uint16_t loc,j,i=0;
  9153  1369  01AB               	clrf	my_flash_system_write@i
  9154  136A  01AC               	clrf	my_flash_system_write@i+1
  9155                           
  9156                           ;sysData.c: 51: uint16_t flashAddr=0x1f00;
  9157  136B  3000               	movlw	0
  9158  136C  00A9               	movwf	my_flash_system_write@flashAddr
  9159  136D  301F               	movlw	31
  9160  136E  00AA               	movwf	my_flash_system_write@flashAddr+1
  9161                           
  9162                           ;sysData.c: 52: uint8_t GIEBitValue=INTCONbits.GIE;
  9163  136F  3000               	movlw	0
  9164  1370  1B8B               	btfsc	11,7	;volatile
  9165  1371  3001               	movlw	1
  9166  1372  00A2               	movwf	my_flash_system_write@GIEBitValue
  9167                           
  9168                           ;sysData.c: 54: blocNum=len/32;
  9169  1373  0876               	movf	my_flash_system_write@len+1,w
  9170  1374  00A1               	movwf	??_my_flash_system_write+1
  9171  1375  0875               	movf	my_flash_system_write@len,w
  9172  1376  00A0               	movwf	??_my_flash_system_write
  9173  1377  3005               	movlw	5
  9174  1378                     u4225:	
  9175  1378  36A1               	lsrf	??_my_flash_system_write+1,f
  9176  1379  0CA0               	rrf	??_my_flash_system_write,f
  9177  137A  0B89               	decfsz	9,f
  9178  137B  2B78               	goto	u4225
  9179  137C  0820               	movf	??_my_flash_system_write,w
  9180  137D  00A5               	movwf	my_flash_system_write@blocNum
  9181  137E  0821               	movf	??_my_flash_system_write+1,w
  9182  137F  00A6               	movwf	my_flash_system_write@blocNum+1
  9183                           
  9184                           ;sysData.c: 55: if(len%32)blocNum++;
  9185  1380  301F               	movlw	31
  9186  1381  0575               	andwf	my_flash_system_write@len,w
  9187  1382  00A0               	movwf	??_my_flash_system_write
  9188  1383  3000               	movlw	0
  9189  1384  0576               	andwf	my_flash_system_write@len+1,w
  9190  1385  00A1               	movwf	??_my_flash_system_write+1
  9191  1386  0820               	movf	??_my_flash_system_write,w
  9192  1387  0421               	iorwf	??_my_flash_system_write+1,w
  9193  1388  1903               	btfsc	3,2
  9194  1389  2B8E               	goto	l4909
  9195  138A  3001               	movlw	1
  9196  138B  07A5               	addwf	my_flash_system_write@blocNum,f
  9197  138C  3000               	movlw	0
  9198  138D  3DA6               	addwfc	my_flash_system_write@blocNum+1,f
  9199  138E                     l4909:	
  9200                           
  9201                           ;sysData.c: 57: INTCONbits.GIE = 0;
  9202  138E  138B               	bcf	11,7	;volatile
  9203                           
  9204                           ;sysData.c: 58: loc=0;
  9205  138F  01A7               	clrf	my_flash_system_write@loc
  9206  1390  01A8               	clrf	my_flash_system_write@loc+1
  9207                           
  9208                           ;sysData.c: 59: for(j=0;j<blocNum;j++){
  9209  1391  01A3               	clrf	my_flash_system_write@j
  9210  1392  01A4               	clrf	my_flash_system_write@j+1
  9211  1393                     l764:	
  9212  1393  0826               	movf	my_flash_system_write@blocNum+1,w
  9213  1394  0224               	subwf	my_flash_system_write@j+1,w
  9214  1395  1D03               	skipz
  9215  1396  2B99               	goto	u4285
  9216  1397  0825               	movf	my_flash_system_write@blocNum,w
  9217  1398  0223               	subwf	my_flash_system_write@j,w
  9218  1399                     u4285:	
  9219  1399  1803               	btfsc	3,0
  9220  139A  2BFA               	goto	l4949
  9221                           
  9222                           ;sysData.c: 60: PMCON1bits.CFGS = 0;
  9223  139B  0023               	movlb	3	; select bank3
  9224  139C  1315               	bcf	21,6	;volatile
  9225                           
  9226                           ;sysData.c: 61: PMCON1bits.WREN = 1;
  9227  139D  1515               	bsf	21,2	;volatile
  9228                           
  9229                           ;sysData.c: 62: PMCON1bits.LWLO = 1;
  9230  139E  1695               	bsf	21,5	;volatile
  9231                           
  9232                           ;sysData.c: 64: for(i=0;i<32;i++){
  9233  139F  0020               	movlb	0	; select bank0
  9234  13A0  01AB               	clrf	my_flash_system_write@i
  9235  13A1  01AC               	clrf	my_flash_system_write@i+1
  9236  13A2  3000               	movlw	0
  9237  13A3  022C               	subwf	my_flash_system_write@i+1,w
  9238  13A4  3020               	movlw	32
  9239  13A5  1903               	skipnz
  9240  13A6  022B               	subwf	my_flash_system_write@i,w
  9241  13A7  1803               	btfsc	3,0
  9242  13A8  2BF2               	goto	l767
  9243  13A9                     l4921:	
  9244                           
  9245                           ;sysData.c: 66: PMADRL = (flashAddr & 0xFF);
  9246  13A9  0829               	movf	my_flash_system_write@flashAddr,w
  9247  13AA  0023               	movlb	3	; select bank3
  9248  13AB  0091               	movwf	17	;volatile
  9249                           
  9250                           ;sysData.c: 68: PMADRH = ((flashAddr & 0xFF00) >> 8);
  9251  13AC  0020               	movlb	0	; select bank0
  9252  13AD  082A               	movf	my_flash_system_write@flashAddr+1,w
  9253  13AE  0023               	movlb	3	; select bank3
  9254  13AF  0092               	movwf	18	;volatile
  9255                           
  9256                           ;sysData.c: 71: if(loc<len){
  9257  13B0  0876               	movf	my_flash_system_write@len+1,w
  9258  13B1  0020               	movlb	0	; select bank0
  9259  13B2  0228               	subwf	my_flash_system_write@loc+1,w
  9260  13B3  1D03               	skipz
  9261  13B4  2BB7               	goto	u4255
  9262  13B5  0875               	movf	my_flash_system_write@len,w
  9263  13B6  0227               	subwf	my_flash_system_write@loc,w
  9264  13B7                     u4255:	
  9265  13B7  1803               	skipnc
  9266  13B8  2BC3               	goto	l4929
  9267                           
  9268                           ;sysData.c: 72: PMDATL = buf[loc];
  9269  13B9  0827               	movf	my_flash_system_write@loc,w
  9270  13BA  0773               	addwf	my_flash_system_write@buf,w
  9271  13BB  0086               	movwf	6
  9272  13BC  0828               	movf	my_flash_system_write@loc+1,w
  9273  13BD  3D74               	addwfc	my_flash_system_write@buf+1,w
  9274  13BE  0087               	movwf	7
  9275  13BF  0801               	movf	1,w
  9276  13C0  0023               	movlb	3	; select bank3
  9277  13C1  0093               	movwf	19	;volatile
  9278                           
  9279                           ;sysData.c: 73: }else{
  9280  13C2  2BC5               	goto	l4931
  9281  13C3                     l4929:	
  9282                           
  9283                           ;sysData.c: 74: PMDATL = 0x00;
  9284  13C3  0023               	movlb	3	; select bank3
  9285  13C4  0193               	clrf	19	;volatile
  9286  13C5                     l4931:	
  9287                           
  9288                           ;sysData.c: 75: }
  9289                           ;sysData.c: 76: loc++;
  9290  13C5  3001               	movlw	1
  9291  13C6  0020               	movlb	0	; select bank0
  9292  13C7  07A7               	addwf	my_flash_system_write@loc,f
  9293  13C8  3000               	movlw	0
  9294  13C9  3DA8               	addwfc	my_flash_system_write@loc+1,f
  9295                           
  9296                           ;sysData.c: 77: PMDATH = 0x00;
  9297  13CA  0023               	movlb	3	; select bank3
  9298  13CB  0194               	clrf	20	;volatile
  9299                           
  9300                           ;sysData.c: 78: if((i%32) == 32 -1 ){
  9301  13CC  301F               	movlw	31
  9302  13CD  0020               	movlb	0	; select bank0
  9303  13CE  052B               	andwf	my_flash_system_write@i,w
  9304  13CF  00A0               	movwf	??_my_flash_system_write
  9305  13D0  3000               	movlw	0
  9306  13D1  052C               	andwf	my_flash_system_write@i+1,w
  9307  13D2  00A1               	movwf	??_my_flash_system_write+1
  9308  13D3  301F               	movlw	31
  9309  13D4  0620               	xorwf	??_my_flash_system_write,w
  9310  13D5  0421               	iorwf	??_my_flash_system_write+1,w
  9311  13D6  1D03               	btfss	3,2
  9312  13D7  2BDA               	goto	l4939
  9313                           
  9314                           ;sysData.c: 79: PMCON1bits.LWLO = 0;
  9315  13D8  0023               	movlb	3	; select bank3
  9316  13D9  1295               	bcf	21,5	;volatile
  9317  13DA                     l4939:	
  9318                           
  9319                           ;sysData.c: 80: }
  9320                           ;sysData.c: 82: PMCON2 = 0x55;
  9321  13DA  3055               	movlw	85
  9322  13DB  0023               	movlb	3	; select bank3
  9323  13DC  0096               	movwf	22	;volsfr
  9324                           
  9325                           ;sysData.c: 83: PMCON2 = 0xAA;
  9326  13DD  30AA               	movlw	170
  9327  13DE  0096               	movwf	22	;volsfr
  9328                           
  9329                           ;sysData.c: 84: PMCON1bits.WR = 1;
  9330  13DF  1495               	bsf	21,1	;volatile
  9331                           
  9332                           ;sysData.c: 85: __nop();
  9333  13E0  0000               	nop
  9334                           
  9335                           ;sysData.c: 86: __nop();
  9336  13E1  0000               	nop
  9337                           
  9338                           ;sysData.c: 87: flashAddr++;
  9339  13E2  3001               	movlw	1
  9340  13E3  0020               	movlb	0	; select bank0
  9341  13E4  07A9               	addwf	my_flash_system_write@flashAddr,f
  9342  13E5  3000               	movlw	0
  9343  13E6  3DAA               	addwfc	my_flash_system_write@flashAddr+1,f
  9344  13E7  3001               	movlw	1
  9345  13E8  07AB               	addwf	my_flash_system_write@i,f
  9346  13E9  3000               	movlw	0
  9347  13EA  3DAC               	addwfc	my_flash_system_write@i+1,f
  9348  13EB  3000               	movlw	0
  9349  13EC  022C               	subwf	my_flash_system_write@i+1,w
  9350  13ED  3020               	movlw	32
  9351  13EE  1903               	skipnz
  9352  13EF  022B               	subwf	my_flash_system_write@i,w
  9353  13F0  1C03               	skipc
  9354  13F1  2BA9               	goto	l4921
  9355  13F2                     l767:	
  9356                           
  9357                           ;sysData.c: 88: }
  9358                           ;sysData.c: 89: PMCON1bits.WREN = 0;
  9359  13F2  0023               	movlb	3	; select bank3
  9360  13F3  1115               	bcf	21,2	;volatile
  9361  13F4  3001               	movlw	1
  9362  13F5  0020               	movlb	0	; select bank0
  9363  13F6  07A3               	addwf	my_flash_system_write@j,f
  9364  13F7  3000               	movlw	0
  9365  13F8  3DA4               	addwfc	my_flash_system_write@j+1,f
  9366  13F9  2B93               	goto	l764
  9367  13FA                     l4949:	
  9368                           
  9369                           ;sysData.c: 90: }
  9370                           ;sysData.c: 91: INTCONbits.GIE = GIEBitValue;
  9371  13FA  0C22               	rrf	my_flash_system_write@GIEBitValue,w
  9372  13FB  1C03               	skipc
  9373  13FC  138B               	bcf	11,7	;volatile
  9374  13FD  1803               	skipnc
  9375  13FE  178B               	bsf	11,7	;volatile
  9376  13FF  0008               	return
  9377  1400                     __end_of_my_flash_system_write:	
  9378                           ;sysData.c: 93: return 0;
  9379                           ;	Return value of _my_flash_system_write is never used
  9380                           
  9381                           
  9382                           	psect	text20
  9383  1B41                     __ptext20:	
  9384 ;; *************** function _my_flash_read_system_erase *****************
  9385 ;; Defined at:
  9386 ;;		line 9 in file "src/api/sysData.c"
  9387 ;; Parameters:    Size  Location     Type
  9388 ;;		None
  9389 ;; Auto vars:     Size  Location     Type
  9390 ;;		None
  9391 ;; Return value:  Size  Location     Type
  9392 ;;                  1    wreg      void 
  9393 ;; Registers used:
  9394 ;;		wreg, status,2, status,0, pclath, cstack
  9395 ;; Tracked objects:
  9396 ;;		On entry : 0/0
  9397 ;;		On exit  : 0/0
  9398 ;;		Unchanged: 0/0
  9399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9403 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9404 ;;Total ram usage:        0 bytes
  9405 ;; Hardware stack levels used:    1
  9406 ;; Hardware stack levels required when called:    2
  9407 ;; This function calls:
  9408 ;;		_FLASH_EraseBlock
  9409 ;; This function is called by:
  9410 ;;		_sys_data_save
  9411 ;; This function uses a non-reentrant model
  9412 ;;
  9413                           
  9414                           
  9415                           ;psect for function _my_flash_read_system_erase
  9416  1B41                     _my_flash_read_system_erase:	
  9417                           
  9418                           ;sysData.c: 16: FLASH_EraseBlock(0x1f00);
  9419                           
  9420                           ;incstack = 0
  9421                           ; Regs used in _my_flash_read_system_erase: [wreg+status,2+status,0+pclath+cstack]
  9422  1B41  3000               	movlw	0
  9423  1B42  00F3               	movwf	FLASH_EraseBlock@startAddr
  9424  1B43  301F               	movlw	31
  9425  1B44  00F4               	movwf	FLASH_EraseBlock@startAddr+1
  9426  1B45  319A  226B  319B   	fcall	_FLASH_EraseBlock
  9427                           
  9428                           ;sysData.c: 17: FLASH_EraseBlock(0x1f00+32);
  9429  1B48  3020               	movlw	32
  9430  1B49  00F3               	movwf	FLASH_EraseBlock@startAddr
  9431  1B4A  301F               	movlw	31
  9432  1B4B  00F4               	movwf	FLASH_EraseBlock@startAddr+1
  9433  1B4C  319A  226B  319B   	fcall	_FLASH_EraseBlock
  9434                           
  9435                           ;sysData.c: 18: FLASH_EraseBlock(0x1f00+64);
  9436  1B4F  3040               	movlw	64
  9437  1B50  00F3               	movwf	FLASH_EraseBlock@startAddr
  9438  1B51  301F               	movlw	31
  9439  1B52  00F4               	movwf	FLASH_EraseBlock@startAddr+1
  9440  1B53  319A  226B  319B   	fcall	_FLASH_EraseBlock
  9441                           
  9442                           ;sysData.c: 19: FLASH_EraseBlock(0x1f00+96);
  9443  1B56  3060               	movlw	96
  9444  1B57  00F3               	movwf	FLASH_EraseBlock@startAddr
  9445  1B58  301F               	movlw	31
  9446  1B59  00F4               	movwf	FLASH_EraseBlock@startAddr+1
  9447  1B5A  319A  226B  319B   	fcall	_FLASH_EraseBlock
  9448                           
  9449                           ;sysData.c: 20: FLASH_EraseBlock(0x1f00+128);
  9450  1B5D  3080               	movlw	128
  9451  1B5E  00F3               	movwf	FLASH_EraseBlock@startAddr
  9452  1B5F  301F               	movlw	31
  9453  1B60  00F4               	movwf	FLASH_EraseBlock@startAddr+1
  9454  1B61  319A  226B         	fcall	_FLASH_EraseBlock
  9455  1B63  0008               	return
  9456  1B64                     __end_of_my_flash_read_system_erase:	
  9457                           
  9458                           	psect	text21
  9459  1A6B                     __ptext21:	
  9460 ;; *************** function _FLASH_EraseBlock *****************
  9461 ;; Defined at:
  9462 ;;		line 147 in file "mcc_generated_files/memory.c"
  9463 ;; Parameters:    Size  Location     Type
  9464 ;;  startAddr       2    3[COMMON] unsigned int 
  9465 ;; Auto vars:     Size  Location     Type
  9466 ;;  GIEBitValue     1    5[COMMON] unsigned char 
  9467 ;; Return value:  Size  Location     Type
  9468 ;;                  1    wreg      void 
  9469 ;; Registers used:
  9470 ;;		wreg, status,2, status,0
  9471 ;; Tracked objects:
  9472 ;;		On entry : 0/0
  9473 ;;		On exit  : 0/0
  9474 ;;		Unchanged: 0/0
  9475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9476 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9477 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9479 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9480 ;;Total ram usage:        3 bytes
  9481 ;; Hardware stack levels used:    1
  9482 ;; Hardware stack levels required when called:    1
  9483 ;; This function calls:
  9484 ;;		Nothing
  9485 ;; This function is called by:
  9486 ;;		_my_flash_read_system_erase
  9487 ;;		_FLASH_WriteBlock
  9488 ;; This function uses a non-reentrant model
  9489 ;;
  9490                           
  9491                           
  9492                           ;psect for function _FLASH_EraseBlock
  9493  1A6B                     _FLASH_EraseBlock:	
  9494                           
  9495                           ;memory.c: 149: uint8_t GIEBitValue = INTCONbits.GIE;
  9496                           
  9497                           ;incstack = 0
  9498                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  9499  1A6B  3000               	movlw	0
  9500  1A6C  1B8B               	btfsc	11,7	;volatile
  9501  1A6D  3001               	movlw	1
  9502  1A6E  00F5               	movwf	FLASH_EraseBlock@GIEBitValue
  9503                           
  9504                           ;memory.c: 152: INTCONbits.GIE = 0;
  9505  1A6F  138B               	bcf	11,7	;volatile
  9506                           
  9507                           ;memory.c: 154: PMADRL = (startAddr & 0xFF);
  9508  1A70  0873               	movf	FLASH_EraseBlock@startAddr,w
  9509  1A71  0023               	movlb	3	; select bank3
  9510  1A72  0091               	movwf	17	;volatile
  9511                           
  9512                           ;memory.c: 156: PMADRH = ((startAddr & 0xFF00) >> 8);
  9513  1A73  0874               	movf	FLASH_EraseBlock@startAddr+1,w
  9514  1A74  0092               	movwf	18	;volatile
  9515                           
  9516                           ;memory.c: 159: PMCON1bits.CFGS = 0;
  9517  1A75  1315               	bcf	21,6	;volatile
  9518                           
  9519                           ;memory.c: 160: PMCON1bits.FREE = 1;
  9520  1A76  1615               	bsf	21,4	;volatile
  9521                           
  9522                           ;memory.c: 161: PMCON1bits.WREN = 1;
  9523  1A77  1515               	bsf	21,2	;volatile
  9524                           
  9525                           ;memory.c: 164: PMCON2 = 0x55;
  9526  1A78  3055               	movlw	85
  9527  1A79  0096               	movwf	22	;volsfr
  9528                           
  9529                           ;memory.c: 165: PMCON2 = 0xAA;
  9530  1A7A  30AA               	movlw	170
  9531  1A7B  0096               	movwf	22	;volsfr
  9532                           
  9533                           ;memory.c: 166: PMCON1bits.WR = 1;
  9534  1A7C  1495               	bsf	21,1	;volatile
  9535                           
  9536                           ;memory.c: 167: __nop();
  9537  1A7D  0000               	nop
  9538                           
  9539                           ;memory.c: 168: __nop();
  9540  1A7E  0000               	nop
  9541                           
  9542                           ;memory.c: 170: PMCON1bits.WREN = 0;
  9543  1A7F  0023               	movlb	3	; select bank3
  9544  1A80  1115               	bcf	21,2	;volatile
  9545                           
  9546                           ;memory.c: 171: INTCONbits.GIE = GIEBitValue;
  9547  1A81  0C75               	rrf	FLASH_EraseBlock@GIEBitValue,w
  9548  1A82  1C03               	skipc
  9549  1A83  138B               	bcf	11,7	;volatile
  9550  1A84  1803               	skipnc
  9551  1A85  178B               	bsf	11,7	;volatile
  9552  1A86  0008               	return
  9553  1A87                     __end_of_FLASH_EraseBlock:	
  9554                           
  9555                           	psect	text22
  9556  1005                     __ptext22:	
  9557 ;; *************** function _modbus_response_illgeal_function *****************
  9558 ;; Defined at:
  9559 ;;		line 8 in file "src/api/modbus.c"
  9560 ;; Parameters:    Size  Location     Type
  9561 ;;  buf             1    wreg     PTR unsigned char 
  9562 ;;		 -> modbusBuf(60), 
  9563 ;;  errcode         1   19[BANK0 ] unsigned char 
  9564 ;; Auto vars:     Size  Location     Type
  9565 ;;  buf             1   21[BANK0 ] PTR unsigned char 
  9566 ;;		 -> modbusBuf(60), 
  9567 ;;  pmdbs           1   22[BANK0 ] PTR struct .
  9568 ;;		 -> modbusBuf(60), 
  9569 ;; Return value:  Size  Location     Type
  9570 ;;                  1    wreg      void 
  9571 ;; Registers used:
  9572 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9573 ;; Tracked objects:
  9574 ;;		On entry : 0/0
  9575 ;;		On exit  : 0/0
  9576 ;;		Unchanged: 0/0
  9577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9578 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9579 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9580 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9581 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9582 ;;Total ram usage:        4 bytes
  9583 ;; Hardware stack levels used:    1
  9584 ;; Hardware stack levels required when called:    3
  9585 ;; This function calls:
  9586 ;;		_crc_append
  9587 ;;		_uart_send_len
  9588 ;; This function is called by:
  9589 ;;		_modbus_response_process
  9590 ;; This function uses a non-reentrant model
  9591 ;;
  9592                           
  9593                           
  9594                           ;psect for function _modbus_response_illgeal_function
  9595  1005                     _modbus_response_illgeal_function:	
  9596                           
  9597                           ;incstack = 0
  9598                           ; Regs used in _modbus_response_illgeal_function: [wreg+fsr1l+fsr1h+status,2+status,0+pc
      +                          lath+cstack]
  9599                           ;modbus_response_illgeal_function@buf stored from wreg
  9600  1005  0020               	movlb	0	; select bank0
  9601  1006  00B5               	movwf	modbus_response_illgeal_function@buf
  9602                           
  9603                           ;modbus.c: 10: st_modbusErrRespStructDef* pmdbs=(st_modbusErrRespStructDef*)buf;
  9604  1007  0835               	movf	modbus_response_illgeal_function@buf,w
  9605  1008  00B4               	movwf	??_modbus_response_illgeal_function
  9606  1009  0834               	movf	??_modbus_response_illgeal_function,w
  9607  100A  00B6               	movwf	modbus_response_illgeal_function@pmdbs
  9608                           
  9609                           ;modbus.c: 11: if(pmdbs->addr==0x00)return;
  9610  100B  0836               	movf	modbus_response_illgeal_function@pmdbs,w
  9611  100C  0086               	movwf	6
  9612  100D  3001               	movlw	1	; select bank2/3
  9613  100E  0087               	movwf	7
  9614  100F  0801               	movf	1,w
  9615  1010  1903               	btfsc	3,2
  9616  1011  0008               	return
  9617                           
  9618                           ;modbus.c: 12: pmdbs->addr=sysData.id;
  9619  1012  305C               	movlw	92
  9620  1013  0086               	movwf	6
  9621  1014  3023               	movlw	35
  9622  1015  0087               	movwf	7
  9623  1016  3142               	addfsr 1,2
  9624  1017  0801               	movf	1,w
  9625  1018  00B4               	movwf	??_modbus_response_illgeal_function
  9626  1019  0836               	movf	modbus_response_illgeal_function@pmdbs,w
  9627  101A  0086               	movwf	6
  9628  101B  3001               	movlw	1	; select bank2/3
  9629  101C  0087               	movwf	7
  9630  101D  0834               	movf	??_modbus_response_illgeal_function,w
  9631  101E  0081               	movwf	1
  9632                           
  9633                           ;modbus.c: 13: if(errcode){
  9634  101F  0833               	movf	modbus_response_illgeal_function@errcode,w
  9635  1020  1903               	btfsc	3,2
  9636  1021  282A               	goto	l818
  9637                           
  9638                           ;modbus.c: 14: pmdbs->func+=0x80;
  9639  1022  3080               	movlw	128
  9640  1023  00B4               	movwf	??_modbus_response_illgeal_function
  9641  1024  0A36               	incf	modbus_response_illgeal_function@pmdbs,w
  9642  1025  0086               	movwf	6
  9643  1026  3001               	movlw	1	; select bank2/3
  9644  1027  0087               	movwf	7
  9645  1028  0834               	movf	??_modbus_response_illgeal_function,w
  9646  1029  0781               	addwf	1,f
  9647  102A                     l818:	
  9648                           
  9649                           ;modbus.c: 15: }
  9650                           ;modbus.c: 16: pmdbs->errcord=errcode;
  9651  102A  0833               	movf	modbus_response_illgeal_function@errcode,w
  9652  102B  00B4               	movwf	??_modbus_response_illgeal_function
  9653  102C  0836               	movf	modbus_response_illgeal_function@pmdbs,w
  9654  102D  3E02               	addlw	2
  9655  102E  0086               	movwf	6
  9656  102F  3001               	movlw	1	; select bank2/3
  9657  1030  0087               	movwf	7
  9658  1031  0834               	movf	??_modbus_response_illgeal_function,w
  9659  1032  0081               	movwf	1
  9660                           
  9661                           ;modbus.c: 17: crc_append(buf,3);
  9662  1033  0835               	movf	modbus_response_illgeal_function@buf,w
  9663  1034  00A8               	movwf	crc_append@message
  9664  1035  3001               	movlw	1
  9665  1036  00A9               	movwf	crc_append@message+1
  9666  1037  3003               	movlw	3
  9667  1038  00AA               	movwf	crc_append@n
  9668  1039  3000               	movlw	0
  9669  103A  00AB               	movwf	crc_append@n+1
  9670  103B  319C  2403  3190   	fcall	_crc_append
  9671                           
  9672                           ;modbus.c: 18: uart_send_len(buf,5);
  9673  103E  3005               	movlw	5
  9674  103F  0020               	movlb	0	; select bank0
  9675  1040  00B4               	movwf	??_modbus_response_illgeal_function
  9676  1041  0834               	movf	??_modbus_response_illgeal_function,w
  9677  1042  00F3               	movwf	uart_send_len@len
  9678  1043  0835               	movf	modbus_response_illgeal_function@buf,w
  9679  1044  319B  23AC         	fcall	_uart_send_len
  9680  1046  0008               	return
  9681  1047                     __end_of_modbus_response_illgeal_function:	
  9682                           
  9683                           	psect	text23
  9684  1400                     __ptext23:	
  9685 ;; *************** function _modbus_response_command *****************
  9686 ;; Defined at:
  9687 ;;		line 179 in file "src/api/modbus.c"
  9688 ;; Parameters:    Size  Location     Type
  9689 ;;  rbuf            1    wreg     PTR unsigned char 
  9690 ;;		 -> modbusBuf(60), 
  9691 ;; Auto vars:     Size  Location     Type
  9692 ;;  rbuf            1   28[BANK0 ] PTR unsigned char 
  9693 ;;		 -> modbusBuf(60), 
  9694 ;;  tempData        2   29[BANK0 ] unsigned int 
  9695 ;;  startAddr       2   23[BANK0 ] unsigned int 
  9696 ;;  tmpAddr         2   21[BANK0 ] unsigned int 
  9697 ;;  len             1   27[BANK0 ] unsigned char 
  9698 ;;  pmdbs           1   26[BANK0 ] PTR struct .
  9699 ;;		 -> modbusBuf(60), 
  9700 ;;  i               1   25[BANK0 ] unsigned char 
  9701 ;; Return value:  Size  Location     Type
  9702 ;;                  1    wreg      void 
  9703 ;; Registers used:
  9704 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9705 ;; Tracked objects:
  9706 ;;		On entry : 0/0
  9707 ;;		On exit  : 0/0
  9708 ;;		Unchanged: 0/0
  9709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9711 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9712 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9713 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9714 ;;Total ram usage:       12 bytes
  9715 ;; Hardware stack levels used:    1
  9716 ;; Hardware stack levels required when called:    3
  9717 ;; This function calls:
  9718 ;;		_crc_append
  9719 ;;		_getRegisterVal
  9720 ;;		_uart_send_len
  9721 ;; This function is called by:
  9722 ;;		_modbus_response_process
  9723 ;; This function uses a non-reentrant model
  9724 ;;
  9725                           
  9726                           
  9727                           ;psect for function _modbus_response_command
  9728  1400                     _modbus_response_command:	
  9729                           
  9730                           ;incstack = 0
  9731                           ; Regs used in _modbus_response_command: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9732                           ;modbus_response_command@rbuf stored from wreg
  9733  1400  0020               	movlb	0	; select bank0
  9734  1401  00BC               	movwf	modbus_response_command@rbuf
  9735                           
  9736                           ;modbus.c: 180: uint8_t i;
  9737                           ;modbus.c: 181: uint8_t len=0;
  9738  1402  01BB               	clrf	modbus_response_command@len
  9739                           
  9740                           ;modbus.c: 182: uint16_t startAddr=0;
  9741  1403  01B7               	clrf	modbus_response_command@startAddr
  9742  1404  01B8               	clrf	modbus_response_command@startAddr+1
  9743                           
  9744                           ;modbus.c: 183: uint16_t tempData,tmpAddr;
  9745                           ;modbus.c: 185: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)rbuf;
  9746  1405  083C               	movf	modbus_response_command@rbuf,w
  9747  1406  00B3               	movwf	??_modbus_response_command
  9748  1407  0833               	movf	??_modbus_response_command,w
  9749  1408  00BA               	movwf	modbus_response_command@pmdbs
  9750                           
  9751                           ;modbus.c: 186: if(pmdbs->addr!=sysData.id || pmdbs->addr==0)return;
  9752  1409  305C               	movlw	92
  9753  140A  0086               	movwf	6
  9754  140B  3023               	movlw	35
  9755  140C  0087               	movwf	7
  9756  140D  3142               	addfsr 1,2
  9757  140E  083A               	movf	modbus_response_command@pmdbs,w
  9758  140F  0084               	movwf	4
  9759  1410  3001               	movlw	1	; select bank2/3
  9760  1411  0085               	movwf	5
  9761  1412  0800               	movf	0,w
  9762  1413  0601               	xorwf	1,w
  9763  1414  1D03               	skipz
  9764  1415  0008               	return
  9765  1416  083A               	movf	modbus_response_command@pmdbs,w
  9766  1417  0086               	movwf	6
  9767  1418  3001               	movlw	1	; select bank2/3
  9768  1419  0087               	movwf	7
  9769  141A  0801               	movf	1,w
  9770  141B  1903               	btfsc	3,2
  9771  141C  0008               	return
  9772                           
  9773                           ;modbus.c: 187: startAddr=pmdbs->addr_hi;
  9774  141D  083A               	movf	modbus_response_command@pmdbs,w
  9775  141E  3E02               	addlw	2
  9776  141F  0086               	movwf	6
  9777  1420  3001               	movlw	1	; select bank2/3
  9778  1421  0087               	movwf	7
  9779  1422  0801               	movf	1,w
  9780  1423  00B3               	movwf	??_modbus_response_command
  9781  1424  01B4               	clrf	??_modbus_response_command+1
  9782  1425  0833               	movf	??_modbus_response_command,w
  9783  1426  00B7               	movwf	modbus_response_command@startAddr
  9784  1427  0834               	movf	??_modbus_response_command+1,w
  9785  1428  00B8               	movwf	modbus_response_command@startAddr+1
  9786                           
  9787                           ;modbus.c: 188: startAddr<<=8;
  9788  1429  3008               	movlw	8
  9789  142A                     u4635:	
  9790  142A  35B7               	lslf	modbus_response_command@startAddr,f
  9791  142B  0DB8               	rlf	modbus_response_command@startAddr+1,f
  9792  142C  0B89               	decfsz	9,f
  9793  142D  2C2A               	goto	u4635
  9794                           
  9795                           ;modbus.c: 189: startAddr |= pmdbs->addr_lo;
  9796  142E  083A               	movf	modbus_response_command@pmdbs,w
  9797  142F  3E03               	addlw	3
  9798  1430  0086               	movwf	6
  9799  1431  3001               	movlw	1	; select bank2/3
  9800  1432  0087               	movwf	7
  9801  1433  0801               	movf	1,w
  9802  1434  00B3               	movwf	??_modbus_response_command
  9803  1435  01B4               	clrf	??_modbus_response_command+1
  9804  1436  0833               	movf	??_modbus_response_command,w
  9805  1437  04B7               	iorwf	modbus_response_command@startAddr,f
  9806  1438  0834               	movf	??_modbus_response_command+1,w
  9807  1439  04B8               	iorwf	modbus_response_command@startAddr+1,f
  9808                           
  9809                           ;modbus.c: 190: tmpAddr=startAddr;
  9810  143A  0838               	movf	modbus_response_command@startAddr+1,w
  9811  143B  00B6               	movwf	modbus_response_command@tmpAddr+1
  9812  143C  0837               	movf	modbus_response_command@startAddr,w
  9813  143D  00B5               	movwf	modbus_response_command@tmpAddr
  9814                           
  9815                           ;modbus.c: 191: len = pmdbs->len_lo;
  9816  143E  083A               	movf	modbus_response_command@pmdbs,w
  9817  143F  0086               	movwf	6
  9818  1440  3001               	movlw	1	; select bank2/3
  9819  1441  0087               	movwf	7
  9820  1442  3001               	movlw	1	; select bank2/3
  9821  1443  3F45               	moviw [5]fsr1
  9822  1444  00BB               	movwf	modbus_response_command@len
  9823                           
  9824                           ;modbus.c: 192: len<<=1;
  9825  1445  1003               	clrc
  9826  1446  0DBB               	rlf	modbus_response_command@len,f
  9827                           
  9828                           ;modbus.c: 193: if(len>32)len=32;
  9829  1447  3021               	movlw	33
  9830  1448  023B               	subwf	modbus_response_command@len,w
  9831  1449  1C03               	skipc
  9832  144A  2C4F               	goto	l5263
  9833  144B  3020               	movlw	32
  9834  144C  00B3               	movwf	??_modbus_response_command
  9835  144D  0833               	movf	??_modbus_response_command,w
  9836  144E  00BB               	movwf	modbus_response_command@len
  9837  144F                     l5263:	
  9838                           
  9839                           ;modbus.c: 194: for(i=0;i<len;i=i+2,tmpAddr++){
  9840  144F  01B9               	clrf	modbus_response_command@i
  9841  1450                     l5275:	
  9842  1450  083B               	movf	modbus_response_command@len,w
  9843  1451  0239               	subwf	modbus_response_command@i,w
  9844  1452  1803               	btfsc	3,0
  9845  1453  2C82               	goto	l5277
  9846                           
  9847                           ;modbus.c: 195: getRegisterVal(tmpAddr,&tempData);
  9848  1454  0836               	movf	modbus_response_command@tmpAddr+1,w
  9849  1455  00F4               	movwf	getRegisterVal@addr+1
  9850  1456  0835               	movf	modbus_response_command@tmpAddr,w
  9851  1457  00F3               	movwf	getRegisterVal@addr
  9852  1458  303D               	movlw	(low (modbus_response_command@tempData| 0))& (0+255)
  9853  1459  00B3               	movwf	??_modbus_response_command
  9854  145A  0833               	movf	??_modbus_response_command,w
  9855  145B  00F5               	movwf	getRegisterVal@tempData
  9856  145C  3195  2598  3194   	fcall	_getRegisterVal
  9857                           
  9858                           ;modbus.c: 196: rbuf[i+3] = tempData >> 8;
  9859  145F  0020               	movlb	0	; select bank0
  9860  1460  083E               	movf	modbus_response_command@tempData+1,w
  9861  1461  00B3               	movwf	??_modbus_response_command
  9862  1462  0839               	movf	modbus_response_command@i,w
  9863  1463  3E03               	addlw	3
  9864  1464  073C               	addwf	modbus_response_command@rbuf,w
  9865  1465  00B4               	movwf	??_modbus_response_command+1
  9866  1466  0834               	movf	??_modbus_response_command+1,w
  9867  1467  0086               	movwf	6
  9868  1468  3001               	movlw	1	; select bank2/3
  9869  1469  0087               	movwf	7
  9870  146A  0833               	movf	??_modbus_response_command,w
  9871  146B  0081               	movwf	1
  9872                           
  9873                           ;modbus.c: 197: rbuf[i+4] = tempData & 0xff;
  9874  146C  083D               	movf	modbus_response_command@tempData,w
  9875  146D  00B3               	movwf	??_modbus_response_command
  9876  146E  0839               	movf	modbus_response_command@i,w
  9877  146F  3E04               	addlw	4
  9878  1470  073C               	addwf	modbus_response_command@rbuf,w
  9879  1471  00B4               	movwf	??_modbus_response_command+1
  9880  1472  0834               	movf	??_modbus_response_command+1,w
  9881  1473  0086               	movwf	6
  9882  1474  3001               	movlw	1	; select bank2/3
  9883  1475  0087               	movwf	7
  9884  1476  0833               	movf	??_modbus_response_command,w
  9885  1477  0081               	movwf	1
  9886  1478  0839               	movf	modbus_response_command@i,w
  9887  1479  3E02               	addlw	2
  9888  147A  00B3               	movwf	??_modbus_response_command
  9889  147B  0833               	movf	??_modbus_response_command,w
  9890  147C  00B9               	movwf	modbus_response_command@i
  9891  147D  3001               	movlw	1
  9892  147E  07B5               	addwf	modbus_response_command@tmpAddr,f
  9893  147F  3000               	movlw	0
  9894  1480  3DB6               	addwfc	modbus_response_command@tmpAddr+1,f
  9895  1481  2C50               	goto	l5275
  9896  1482                     l5277:	
  9897                           
  9898                           ;modbus.c: 199: }
  9899                           ;modbus.c: 200: rbuf[0] = sysData.id;
  9900  1482  305C               	movlw	92
  9901  1483  0086               	movwf	6
  9902  1484  3023               	movlw	35
  9903  1485  0087               	movwf	7
  9904  1486  3142               	addfsr 1,2
  9905  1487  0801               	movf	1,w
  9906  1488  00B3               	movwf	??_modbus_response_command
  9907  1489  083C               	movf	modbus_response_command@rbuf,w
  9908  148A  0086               	movwf	6
  9909  148B  3001               	movlw	1	; select bank2/3
  9910  148C  0087               	movwf	7
  9911  148D  0833               	movf	??_modbus_response_command,w
  9912  148E  0081               	movwf	1
  9913                           
  9914                           ;modbus.c: 201: rbuf[1] = 3;
  9915  148F  3003               	movlw	3
  9916  1490  00B3               	movwf	??_modbus_response_command
  9917  1491  0A3C               	incf	modbus_response_command@rbuf,w
  9918  1492  0086               	movwf	6
  9919  1493  3001               	movlw	1	; select bank2/3
  9920  1494  0087               	movwf	7
  9921  1495  0833               	movf	??_modbus_response_command,w
  9922  1496  0081               	movwf	1
  9923                           
  9924                           ;modbus.c: 202: rbuf[2] = len;
  9925  1497  083B               	movf	modbus_response_command@len,w
  9926  1498  00B3               	movwf	??_modbus_response_command
  9927  1499  083C               	movf	modbus_response_command@rbuf,w
  9928  149A  3E02               	addlw	2
  9929  149B  0086               	movwf	6
  9930  149C  3001               	movlw	1	; select bank2/3
  9931  149D  0087               	movwf	7
  9932  149E  0833               	movf	??_modbus_response_command,w
  9933  149F  0081               	movwf	1
  9934                           
  9935                           ;modbus.c: 203: len += 3;
  9936  14A0  3003               	movlw	3
  9937  14A1  00B3               	movwf	??_modbus_response_command
  9938  14A2  0833               	movf	??_modbus_response_command,w
  9939  14A3  07BB               	addwf	modbus_response_command@len,f
  9940                           
  9941                           ;modbus.c: 204: crc_append(rbuf,len);
  9942  14A4  083C               	movf	modbus_response_command@rbuf,w
  9943  14A5  00A8               	movwf	crc_append@message
  9944  14A6  3001               	movlw	1
  9945  14A7  00A9               	movwf	crc_append@message+1
  9946  14A8  083B               	movf	modbus_response_command@len,w
  9947  14A9  00B3               	movwf	??_modbus_response_command
  9948  14AA  01B4               	clrf	??_modbus_response_command+1
  9949  14AB  0833               	movf	??_modbus_response_command,w
  9950  14AC  00AA               	movwf	crc_append@n
  9951  14AD  0834               	movf	??_modbus_response_command+1,w
  9952  14AE  00AB               	movwf	crc_append@n+1
  9953  14AF  319C  2403  3194   	fcall	_crc_append
  9954                           
  9955                           ;modbus.c: 205: len += 2;
  9956  14B2  3002               	movlw	2
  9957  14B3  0020               	movlb	0	; select bank0
  9958  14B4  00B3               	movwf	??_modbus_response_command
  9959  14B5  0833               	movf	??_modbus_response_command,w
  9960  14B6  07BB               	addwf	modbus_response_command@len,f
  9961                           
  9962                           ;modbus.c: 207: uart_send_len(rbuf,len);
  9963  14B7  083B               	movf	modbus_response_command@len,w
  9964  14B8  00B3               	movwf	??_modbus_response_command
  9965  14B9  0833               	movf	??_modbus_response_command,w
  9966  14BA  00F3               	movwf	uart_send_len@len
  9967  14BB  083C               	movf	modbus_response_command@rbuf,w
  9968  14BC  319B  23AC         	fcall	_uart_send_len
  9969  14BE  0008               	return
  9970  14BF                     __end_of_modbus_response_command:	
  9971                           
  9972                           	psect	text24
  9973  1BAC                     __ptext24:	
  9974 ;; *************** function _uart_send_len *****************
  9975 ;; Defined at:
  9976 ;;		line 36 in file "src/api/my_uart.c"
  9977 ;; Parameters:    Size  Location     Type
  9978 ;;  buf             1    wreg     PTR unsigned char 
  9979 ;;		 -> modbusBuf(60), 
  9980 ;;  len             1    3[COMMON] unsigned char 
  9981 ;; Auto vars:     Size  Location     Type
  9982 ;;  buf             1    7[COMMON] PTR unsigned char 
  9983 ;;		 -> modbusBuf(60), 
  9984 ;;  i               1    6[COMMON] unsigned char 
  9985 ;;  xlen            1    5[COMMON] unsigned char 
  9986 ;; Return value:  Size  Location     Type
  9987 ;;                  1    wreg      void 
  9988 ;; Registers used:
  9989 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9990 ;; Tracked objects:
  9991 ;;		On entry : 0/0
  9992 ;;		On exit  : 0/0
  9993 ;;		Unchanged: 0/0
  9994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9995 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9996 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9997 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9998 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9999 ;;Total ram usage:        5 bytes
 10000 ;; Hardware stack levels used:    1
 10001 ;; Hardware stack levels required when called:    1
 10002 ;; This function calls:
 10003 ;;		Nothing
 10004 ;; This function is called by:
 10005 ;;		_modbus_response_illgeal_function
 10006 ;;		_modbus_response_write_single_register
 10007 ;;		_modbus_response_write_mult_register
 10008 ;;		_modbus_response_command
 10009 ;;		_main
 10010 ;; This function uses a non-reentrant model
 10011 ;;
 10012                           
 10013                           
 10014                           ;psect for function _uart_send_len
 10015  1BAC                     _uart_send_len:	
 10016                           
 10017                           ;incstack = 0
 10018                           ; Regs used in _uart_send_len: [wreg+fsr1l+fsr1h+status,2+status,0]
 10019                           ;uart_send_len@buf stored from wreg
 10020  1BAC  00F7               	movwf	uart_send_len@buf
 10021                           
 10022                           ;my_uart.c: 38: uint8_t i;
 10023                           ;my_uart.c: 39: uint8_t xlen=len;
 10024  1BAD  0873               	movf	uart_send_len@len,w
 10025  1BAE  00F4               	movwf	??_uart_send_len
 10026  1BAF  0874               	movf	??_uart_send_len,w
 10027  1BB0  00F5               	movwf	uart_send_len@xlen
 10028                           
 10029                           ;my_uart.c: 40: if(!TXSTAbits.TXEN)TXSTAbits.TXEN=1;
 10030  1BB1  0023               	movlb	3	; select bank3
 10031  1BB2  1E9E               	btfss	30,5	;volatile
 10032  1BB3  169E               	bsf	30,5	;volatile
 10033                           
 10034                           ;my_uart.c: 42: for(i=0;i<xlen;i++){
 10035  1BB4  01F6               	clrf	uart_send_len@i
 10036  1BB5                     l3481:	
 10037  1BB5  0875               	movf	uart_send_len@xlen,w
 10038  1BB6  0276               	subwf	uart_send_len@i,w
 10039  1BB7  1803               	btfsc	3,0
 10040  1BB8  0008               	return
 10041  1BB9                     l513:	
 10042                           ;my_uart.c: 43: while(0 == PIR1bits.TXIF);
 10043                           
 10044  1BB9  0020               	movlb	0	; select bank0
 10045  1BBA  1E11               	btfss	17,4	;volatile
 10046  1BBB  2BB9               	goto	l513
 10047                           
 10048                           ;my_uart.c: 44: do{__nop();__nop();__nop();__nop();}while(0);;
 10049  1BBC  0000               	nop
 10050  1BBD  0000               	nop
 10051  1BBE  0000               	nop
 10052  1BBF  0000               	nop
 10053                           
 10054                           ;my_uart.c: 45: TXREG = buf[i];
 10055  1BC0  0876               	movf	uart_send_len@i,w
 10056  1BC1  0777               	addwf	uart_send_len@buf,w
 10057  1BC2  00F4               	movwf	??_uart_send_len
 10058  1BC3  0874               	movf	??_uart_send_len,w
 10059  1BC4  0086               	movwf	6
 10060  1BC5  3001               	movlw	1	; select bank2/3
 10061  1BC6  0087               	movwf	7
 10062  1BC7  0801               	movf	1,w
 10063  1BC8  0023               	movlb	3	; select bank3
 10064  1BC9  009A               	movwf	26	;volatile
 10065                           
 10066                           ;my_uart.c: 46: do{__nop();__nop();__nop();__nop();}while(0);;
 10067  1BCA  0000               	nop
 10068  1BCB  0000               	nop
 10069  1BCC  0000               	nop
 10070  1BCD  0000               	nop
 10071  1BCE  3001               	movlw	1
 10072  1BCF  00F4               	movwf	??_uart_send_len
 10073  1BD0  0874               	movf	??_uart_send_len,w
 10074  1BD1  07F6               	addwf	uart_send_len@i,f
 10075  1BD2  2BB5               	goto	l3481
 10076  1BD3                     __end_of_uart_send_len:	
 10077                           
 10078                           	psect	text25
 10079  1598                     __ptext25:	
 10080 ;; *************** function _getRegisterVal *****************
 10081 ;; Defined at:
 10082 ;;		line 80 in file "src/api/modbus.c"
 10083 ;; Parameters:    Size  Location     Type
 10084 ;;  addr            2    3[COMMON] unsigned int 
 10085 ;;  tempData        1    5[COMMON] PTR unsigned int 
 10086 ;;		 -> modbus_response_command@tempData(2), 
 10087 ;; Auto vars:     Size  Location     Type
 10088 ;;  t16             2    4[BANK0 ] unsigned int 
 10089 ;;  tempAddr        1    6[BANK0 ] unsigned char 
 10090 ;; Return value:  Size  Location     Type
 10091 ;;                  2    3[COMMON] unsigned int 
 10092 ;; Registers used:
 10093 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 10094 ;; Tracked objects:
 10095 ;;		On entry : 0/0
 10096 ;;		On exit  : 0/0
 10097 ;;		Unchanged: 0/0
 10098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10099 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10100 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10101 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10102 ;;      Totals:         3       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10103 ;;Total ram usage:       10 bytes
 10104 ;; Hardware stack levels used:    1
 10105 ;; Hardware stack levels required when called:    1
 10106 ;; This function calls:
 10107 ;;		Nothing
 10108 ;; This function is called by:
 10109 ;;		_modbus_response_command
 10110 ;; This function uses a non-reentrant model
 10111 ;;
 10112                           
 10113                           
 10114                           ;psect for function _getRegisterVal
 10115  1598                     _getRegisterVal:	
 10116                           
 10117                           ;modbus.c: 82: uint16_t t16 = 0;
 10118                           
 10119                           ;incstack = 0
 10120                           ; Regs used in _getRegisterVal: [wreg-fsr1h+status,2+status,0]
 10121  1598  0020               	movlb	0	; select bank0
 10122  1599  01A4               	clrf	getRegisterVal@t16
 10123  159A  01A5               	clrf	getRegisterVal@t16+1
 10124                           
 10125                           ;modbus.c: 83: uint8_t tempAddr;
 10126                           ;modbus.c: 85: tempAddr = addr & 0xff;
 10127  159B  0873               	movf	getRegisterVal@addr,w
 10128  159C  00A0               	movwf	??_getRegisterVal
 10129  159D  0820               	movf	??_getRegisterVal,w
 10130  159E  00A6               	movwf	getRegisterVal@tempAddr
 10131                           
 10132                           ;modbus.c: 86: switch(tempAddr){
 10133  159F  2E49               	goto	l5017
 10134  15A0                     l4983:	
 10135                           ;modbus.c: 87: case 0x01:*tempData = 0100; break;
 10136                           
 10137  15A0  0875               	movf	getRegisterVal@tempData,w
 10138  15A1  0086               	movwf	6
 10139  15A2  0187               	clrf	7
 10140  15A3  3040               	movlw	64
 10141  15A4  3FC0               	movwi [0]fsr1
 10142  15A5  3000               	movlw	0
 10143  15A6  3FC1               	movwi [1]fsr1
 10144  15A7  2E56               	goto	l5019
 10145  15A8                     l4985:	
 10146                           ;modbus.c: 88: case 0x02:*tempData=sysData.id;break;
 10147                           
 10148  15A8  305C               	movlw	92
 10149  15A9  0086               	movwf	6
 10150  15AA  3023               	movlw	35
 10151  15AB  0087               	movwf	7
 10152  15AC  3142               	addfsr 1,2
 10153  15AD  0801               	movf	1,w
 10154  15AE  00A0               	movwf	??_getRegisterVal
 10155  15AF  01A1               	clrf	??_getRegisterVal+1
 10156  15B0  0875               	movf	getRegisterVal@tempData,w
 10157  15B1  0086               	movwf	6
 10158  15B2  0187               	clrf	7
 10159  15B3  0820               	movf	??_getRegisterVal,w
 10160  15B4  3FC0               	movwi [0]fsr1
 10161  15B5  0821               	movf	??_getRegisterVal+1,w
 10162  15B6  3FC1               	movwi [1]fsr1
 10163  15B7  2E56               	goto	l5019
 10164  15B8                     l4987:	
 10165                           ;modbus.c: 89: case 0x03:*tempData=(sysData.pidSetFlg1<<8 | sysData.pidSetFlg0);break;
 10166                           
 10167  15B8  305C               	movlw	92
 10168  15B9  0084               	movwf	4
 10169  15BA  3023               	movlw	35
 10170  15BB  0085               	movwf	5
 10171  15BC  3101               	addfsr 0,1
 10172  15BD  0800               	movf	0,w
 10173  15BE  00A0               	movwf	??_getRegisterVal
 10174  15BF  305C               	movlw	92
 10175  15C0  0084               	movwf	4
 10176  15C1  3023               	movlw	35
 10177  15C2  0085               	movwf	5
 10178  15C3  0875               	movf	getRegisterVal@tempData,w
 10179  15C4  0086               	movwf	6
 10180  15C5  0187               	clrf	7
 10181  15C6  0800               	movf	0,w
 10182  15C7  3FC0               	movwi [0]fsr1
 10183  15C8  0820               	movf	??_getRegisterVal,w
 10184  15C9  3FC1               	movwi [1]fsr1
 10185  15CA  2E56               	goto	l5019
 10186  15CB                     l4989:	
 10187                           ;modbus.c: 90: case 0x04:*tempData=sysData.pidKp;break;
 10188                           
 10189  15CB  305C               	movlw	92
 10190  15CC  0086               	movwf	6
 10191  15CD  3023               	movlw	35
 10192  15CE  0087               	movwf	7
 10193  15CF  3144               	addfsr 1,4
 10194  15D0  0875               	movf	getRegisterVal@tempData,w
 10195  15D1  0084               	movwf	4
 10196  15D2  0185               	clrf	5
 10197  15D3  3F40               	moviw [0]fsr1
 10198  15D4  3F80               	movwi [0]fsr0
 10199  15D5  3F41               	moviw [1]fsr1
 10200  15D6  3F81               	movwi [1]fsr0
 10201  15D7  2E56               	goto	l5019
 10202  15D8                     l4991:	
 10203                           ;modbus.c: 91: case 0x05:*tempData=sysData.pidTi;break;
 10204                           
 10205  15D8  305C               	movlw	92
 10206  15D9  0086               	movwf	6
 10207  15DA  3023               	movlw	35
 10208  15DB  0087               	movwf	7
 10209  15DC  3146               	addfsr 1,6
 10210  15DD  0875               	movf	getRegisterVal@tempData,w
 10211  15DE  0084               	movwf	4
 10212  15DF  0185               	clrf	5
 10213  15E0  3F40               	moviw [0]fsr1
 10214  15E1  3F80               	movwi [0]fsr0
 10215  15E2  3F41               	moviw [1]fsr1
 10216  15E3  3F81               	movwi [1]fsr0
 10217  15E4  2E56               	goto	l5019
 10218  15E5                     l4993:	
 10219                           ;modbus.c: 92: case 0x06:*tempData=sysData.pidTd;break;
 10220                           
 10221  15E5  305C               	movlw	92
 10222  15E6  0086               	movwf	6
 10223  15E7  3023               	movlw	35
 10224  15E8  0087               	movwf	7
 10225  15E9  3148               	addfsr 1,8
 10226  15EA  0875               	movf	getRegisterVal@tempData,w
 10227  15EB  0084               	movwf	4
 10228  15EC  0185               	clrf	5
 10229  15ED  3F40               	moviw [0]fsr1
 10230  15EE  3F80               	movwi [0]fsr0
 10231  15EF  3F41               	moviw [1]fsr1
 10232  15F0  3F81               	movwi [1]fsr0
 10233  15F1  2E56               	goto	l5019
 10234  15F2                     l4995:	
 10235                           ;modbus.c: 93: case 0x07:*tempData=rtAdcValueRsLo; break;
 10236                           
 10237  15F2  0875               	movf	getRegisterVal@tempData,w
 10238  15F3  0086               	movwf	6
 10239  15F4  0187               	clrf	7
 10240  15F5  0866               	movf	_rtAdcValueRsLo,w
 10241  15F6  3FC0               	movwi [0]fsr1
 10242  15F7  0867               	movf	_rtAdcValueRsLo+1,w
 10243  15F8  3FC1               	movwi [1]fsr1
 10244  15F9  2E56               	goto	l5019
 10245  15FA                     l4997:	
 10246                           ;modbus.c: 94: case 0x08:*tempData=rtAdcValueRsHi;break;
 10247                           
 10248  15FA  0875               	movf	getRegisterVal@tempData,w
 10249  15FB  0086               	movwf	6
 10250  15FC  0187               	clrf	7
 10251  15FD  0021               	movlb	1	; select bank1
 10252  15FE  0854               	movf	_rtAdcValueRsHi^(0+128),w
 10253  15FF  3FC0               	movwi [0]fsr1
 10254  1600  0855               	movf	(_rtAdcValueRsHi+1)^(0+128),w
 10255  1601  3FC1               	movwi [1]fsr1
 10256  1602  2E56               	goto	l5019
 10257  1603                     l4999:	
 10258                           ;modbus.c: 95: case 0x09:*tempData=rtAdcValueRcLo;break;
 10259                           
 10260  1603  0875               	movf	getRegisterVal@tempData,w
 10261  1604  0086               	movwf	6
 10262  1605  0187               	clrf	7
 10263  1606  0020               	movlb	0	; select bank0
 10264  1607  0864               	movf	_rtAdcValueRcLo,w
 10265  1608  3FC0               	movwi [0]fsr1
 10266  1609  0865               	movf	_rtAdcValueRcLo+1,w
 10267  160A  3FC1               	movwi [1]fsr1
 10268  160B  2E56               	goto	l5019
 10269  160C                     l5001:	
 10270                           ;modbus.c: 96: case 0x0a:*tempData=rtAdcValueRcHi;break;
 10271                           
 10272  160C  0875               	movf	getRegisterVal@tempData,w
 10273  160D  0086               	movwf	6
 10274  160E  0187               	clrf	7
 10275  160F  0021               	movlb	1	; select bank1
 10276  1610  0852               	movf	_rtAdcValueRcHi^(0+128),w
 10277  1611  3FC0               	movwi [0]fsr1
 10278  1612  0853               	movf	(_rtAdcValueRcHi+1)^(0+128),w
 10279  1613  3FC1               	movwi [1]fsr1
 10280  1614  2E56               	goto	l5019
 10281  1615                     l5003:	
 10282                           ;modbus.c: 97: case 0x0b:*tempData=resRc;break;
 10283                           
 10284  1615  0875               	movf	getRegisterVal@tempData,w
 10285  1616  0086               	movwf	6
 10286  1617  0187               	clrf	7
 10287  1618  0020               	movlb	0	; select bank0
 10288  1619  086E               	movf	_resRc,w
 10289  161A  3FC0               	movwi [0]fsr1
 10290  161B  086F               	movf	_resRc+1,w
 10291  161C  3FC1               	movwi [1]fsr1
 10292  161D  2E56               	goto	l5019
 10293  161E                     l5005:	
 10294                           ;modbus.c: 98: case 0x0c:*tempData=resRs;break;
 10295                           
 10296  161E  0875               	movf	getRegisterVal@tempData,w
 10297  161F  0086               	movwf	6
 10298  1620  0187               	clrf	7
 10299  1621  086C               	movf	_resRs,w
 10300  1622  3FC0               	movwi [0]fsr1
 10301  1623  086D               	movf	_resRs+1,w
 10302  1624  3FC1               	movwi [1]fsr1
 10303  1625  2E56               	goto	l5019
 10304  1626                     l5007:	
 10305                           ;modbus.c: 99: case 0x0d:*tempData=rtAdcValueVoFb;break;
 10306                           
 10307  1626  0875               	movf	getRegisterVal@tempData,w
 10308  1627  0086               	movwf	6
 10309  1628  0187               	clrf	7
 10310  1629  0021               	movlb	1	; select bank1
 10311  162A  0850               	movf	_rtAdcValueVoFb^(0+128),w
 10312  162B  3FC0               	movwi [0]fsr1
 10313  162C  0851               	movf	(_rtAdcValueVoFb+1)^(0+128),w
 10314  162D  3FC1               	movwi [1]fsr1
 10315  162E  2E56               	goto	l5019
 10316  162F                     l5009:	
 10317                           ;modbus.c: 100: case 0x0e:*tempData=voExpectMv;break;
 10318                           
 10319  162F  0875               	movf	getRegisterVal@tempData,w
 10320  1630  0086               	movwf	6
 10321  1631  0187               	clrf	7
 10322  1632  0021               	movlb	1	; select bank1
 10323  1633  084A               	movf	_voExpectMv^(0+128),w
 10324  1634  3FC0               	movwi [0]fsr1
 10325  1635  084B               	movf	(_voExpectMv+1)^(0+128),w
 10326  1636  3FC1               	movwi [1]fsr1
 10327  1637  2E56               	goto	l5019
 10328  1638                     l5011:	
 10329                           ;modbus.c: 101: case 0x0f:*tempData=voExpectAdcValue;break;
 10330                           
 10331  1638  0875               	movf	getRegisterVal@tempData,w
 10332  1639  0086               	movwf	6
 10333  163A  0187               	clrf	7
 10334  163B  0020               	movlb	0	; select bank0
 10335  163C  0860               	movf	_voExpectAdcValue,w
 10336  163D  3FC0               	movwi [0]fsr1
 10337  163E  0861               	movf	_voExpectAdcValue+1,w
 10338  163F  3FC1               	movwi [1]fsr1
 10339  1640  2E56               	goto	l5019
 10340  1641                     l5013:	
 10341                           ;modbus.c: 102: default: *tempData=0x55aa;break;
 10342                           
 10343  1641  0875               	movf	getRegisterVal@tempData,w
 10344  1642  0086               	movwf	6
 10345  1643  0187               	clrf	7
 10346  1644  30AA               	movlw	170
 10347  1645  3FC0               	movwi [0]fsr1
 10348  1646  3055               	movlw	85
 10349  1647  3FC1               	movwi [1]fsr1
 10350                           
 10351                           ;modbus.c: 103: }
 10352  1648  2E56               	goto	l5019
 10353  1649                     l5017:	
 10354  1649  0826               	movf	getRegisterVal@tempAddr,w
 10355                           
 10356                           ; Switch size 1, requested type "space"
 10357                           ; Number of cases is 15, Range of values is 1 to 15
 10358                           ; switch strategies available:
 10359                           ; Name         Instructions Cycles
 10360                           ; direct_byte           39     9 (fixed)
 10361                           ; simple_byte           46    24 (average)
 10362                           ; jumptable            263     9 (fixed)
 10363                           ;	Chosen strategy is direct_byte
 10364  164A  3EFF               	addlw	-1
 10365  164B  1C03               	skipc
 10366  164C  2E41               	goto	l5013
 10367  164D  0084               	movwf	4
 10368  164E  300F               	movlw	15
 10369  164F  0204               	subwf	4,w
 10370  1650  1803               	skipnc
 10371  1651  2E41               	goto	l5013
 10372  1652  3198               	movlp	high S5921
 10373  1653  3504               	lslf	4,w
 10374  1654  3E00               	addlw	low S5921
 10375  1655  0082               	movwf	2
 10376  1656                     l5019:	
 10377                           
 10378                           ;modbus.c: 104: if(tempAddr>0x0f && tempAddr < 0x10+30*2){
 10379  1656  3010               	movlw	16
 10380  1657  0020               	movlb	0	; select bank0
 10381  1658  0226               	subwf	getRegisterVal@tempAddr,w
 10382  1659  1C03               	skipc
 10383  165A  0008               	return
 10384  165B  304C               	movlw	76
 10385  165C  0226               	subwf	getRegisterVal@tempAddr,w
 10386  165D  1803               	skipnc
 10387  165E  0008               	return
 10388                           
 10389                           ;modbus.c: 105: tempAddr-=0x10;
 10390  165F  3010               	movlw	16
 10391  1660  02A6               	subwf	getRegisterVal@tempAddr,f
 10392                           
 10393                           ;modbus.c: 106: if(tempAddr & 0x01){
 10394  1661  1C26               	btfss	getRegisterVal@tempAddr,0
 10395  1662  2E7A               	goto	l5029
 10396                           
 10397                           ;modbus.c: 107: *tempData=sysData.calibVoMV[tempAddr>>1];
 10398  1663  3626               	lsrf	getRegisterVal@tempAddr,w
 10399  1664  00A0               	movwf	??_getRegisterVal
 10400  1665  01A1               	clrf	??_getRegisterVal+1
 10401  1666  35A0               	lslf	??_getRegisterVal,f
 10402  1667  0DA1               	rlf	??_getRegisterVal+1,f
 10403  1668  30A2               	movlw	162
 10404  1669  00A2               	movwf	??_getRegisterVal+2
 10405  166A  3023               	movlw	35
 10406  166B  00A3               	movwf	??_getRegisterVal+3
 10407  166C  0820               	movf	??_getRegisterVal,w
 10408  166D  0722               	addwf	??_getRegisterVal+2,w
 10409  166E  0086               	movwf	6
 10410  166F  0821               	movf	??_getRegisterVal+1,w
 10411  1670  3D23               	addwfc	??_getRegisterVal+3,w
 10412  1671  0087               	movwf	7
 10413  1672  0875               	movf	getRegisterVal@tempData,w
 10414  1673  0084               	movwf	4
 10415  1674  0185               	clrf	5
 10416  1675  3F40               	moviw [0]fsr1
 10417  1676  3F80               	movwi [0]fsr0
 10418  1677  3F41               	moviw [1]fsr1
 10419  1678  3F81               	movwi [1]fsr0
 10420                           
 10421                           ;modbus.c: 108: }else{
 10422  1679  0008               	return
 10423  167A                     l5029:	
 10424                           
 10425                           ;modbus.c: 109: *tempData=sysData.calibRsAdc[tempAddr>>1];
 10426  167A  3626               	lsrf	getRegisterVal@tempAddr,w
 10427  167B  00A0               	movwf	??_getRegisterVal
 10428  167C  01A1               	clrf	??_getRegisterVal+1
 10429  167D  35A0               	lslf	??_getRegisterVal,f
 10430  167E  0DA1               	rlf	??_getRegisterVal+1,f
 10431  167F  3066               	movlw	102
 10432  1680  00A2               	movwf	??_getRegisterVal+2
 10433  1681  3023               	movlw	35
 10434  1682  00A3               	movwf	??_getRegisterVal+3
 10435  1683  0820               	movf	??_getRegisterVal,w
 10436  1684  0722               	addwf	??_getRegisterVal+2,w
 10437  1685  0086               	movwf	6
 10438  1686  0821               	movf	??_getRegisterVal+1,w
 10439  1687  3D23               	addwfc	??_getRegisterVal+3,w
 10440  1688  0087               	movwf	7
 10441  1689  0875               	movf	getRegisterVal@tempData,w
 10442  168A  0084               	movwf	4
 10443  168B  0185               	clrf	5
 10444  168C  3F40               	moviw [0]fsr1
 10445  168D  3F80               	movwi [0]fsr0
 10446  168E  3F41               	moviw [1]fsr1
 10447  168F  3F81               	movwi [1]fsr0
 10448  1690  0008               	return
 10449  1691                     __end_of_getRegisterVal:	
 10450                           ;modbus.c: 110: }
 10451                           ;modbus.c: 111: }
 10452                           ;modbus.c: 112: return t16;
 10453                           ;	Return value of _getRegisterVal is never used
 10454                           
 10455                           
 10456                           	psect	swtext2
 10457  1800                     __pswtext2:	
 10458  1800                     S5921:	
 10459  1800  3195  2DA0         	ljmp	l4983
 10460  1802  3195  2DA8         	ljmp	l4985
 10461  1804  3195  2DB8         	ljmp	l4987
 10462  1806  3195  2DCB         	ljmp	l4989
 10463  1808  3195  2DD8         	ljmp	l4991
 10464  180A  3195  2DE5         	ljmp	l4993
 10465  180C  3195  2DF2         	ljmp	l4995
 10466  180E  3195  2DFA         	ljmp	l4997
 10467  1810  3196  2E03         	ljmp	l4999
 10468  1812  3196  2E0C         	ljmp	l5001
 10469  1814  3196  2E15         	ljmp	l5003
 10470  1816  3196  2E1E         	ljmp	l5005
 10471  1818  3196  2E26         	ljmp	l5007
 10472  181A  3196  2E2F         	ljmp	l5009
 10473  181C  3196  2E38         	ljmp	l5011
 10474                           
 10475                           	psect	text26
 10476  1C03                     __ptext26:	
 10477 ;; *************** function _crc_append *****************
 10478 ;; Defined at:
 10479 ;;		line 143 in file "src/depend/crc16.c"
 10480 ;; Parameters:    Size  Location     Type
 10481 ;;  message         2    8[BANK0 ] PTR unsigned char 
 10482 ;;		 -> modbusBuf(60), sysData(132), 
 10483 ;;  n               2   10[BANK0 ] unsigned int 
 10484 ;; Auto vars:     Size  Location     Type
 10485 ;;  crc             2   17[BANK0 ] unsigned int 
 10486 ;; Return value:  Size  Location     Type
 10487 ;;                  1    wreg      void 
 10488 ;; Registers used:
 10489 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10490 ;; Tracked objects:
 10491 ;;		On entry : 0/0
 10492 ;;		On exit  : 0/0
 10493 ;;		Unchanged: 0/0
 10494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10495 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10496 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10497 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10498 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10499 ;;Total ram usage:       11 bytes
 10500 ;; Hardware stack levels used:    1
 10501 ;; Hardware stack levels required when called:    2
 10502 ;; This function calls:
 10503 ;;		_crc_sum
 10504 ;; This function is called by:
 10505 ;;		_sys_data_save
 10506 ;;		_modbus_response_illgeal_function
 10507 ;;		_modbus_response_write_single_register
 10508 ;;		_modbus_response_write_mult_register
 10509 ;;		_modbus_response_command
 10510 ;; This function uses a non-reentrant model
 10511 ;;
 10512                           
 10513                           
 10514                           ;psect for function _crc_append
 10515  1C03                     _crc_append:	
 10516                           
 10517                           ;crc16.c: 145: uint16_t crc;
 10518                           ;crc16.c: 146: crc = crc_sum(message, n);
 10519                           
 10520                           ;incstack = 0
 10521                           ; Regs used in _crc_append: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10522  1C03  0020               	movlb	0	; select bank0
 10523  1C04  0829               	movf	crc_append@message+1,w
 10524  1C05  00F4               	movwf	crc_sum@buf+1
 10525  1C06  0828               	movf	crc_append@message,w
 10526  1C07  00F3               	movwf	crc_sum@buf
 10527  1C08  082B               	movf	crc_append@n+1,w
 10528  1C09  00F6               	movwf	crc_sum@len+1
 10529  1C0A  082A               	movf	crc_append@n,w
 10530  1C0B  00F5               	movwf	crc_sum@len
 10531  1C0C  319E  264C         	fcall	_crc_sum
 10532  1C0E  0874               	movf	?_crc_sum+1,w
 10533  1C0F  0020               	movlb	0	; select bank0
 10534  1C10  00B2               	movwf	crc_append@crc+1
 10535  1C11  0873               	movf	?_crc_sum,w
 10536  1C12  00B1               	movwf	crc_append@crc
 10537                           
 10538                           ;crc16.c: 147: message[n] = (uint8_t)(crc & 0xff);
 10539  1C13  082A               	movf	crc_append@n,w
 10540  1C14  0728               	addwf	crc_append@message,w
 10541  1C15  00AC               	movwf	??_crc_append
 10542  1C16  082B               	movf	crc_append@n+1,w
 10543  1C17  3D29               	addwfc	crc_append@message+1,w
 10544  1C18  00AD               	movwf	??_crc_append+1
 10545  1C19  082C               	movf	??_crc_append,w
 10546  1C1A  0086               	movwf	6
 10547  1C1B  082D               	movf	??_crc_append+1,w
 10548  1C1C  0087               	movwf	7
 10549  1C1D  0831               	movf	crc_append@crc,w
 10550  1C1E  0081               	movwf	1
 10551                           
 10552                           ;crc16.c: 148: message[n+1] = (uint8_t)((crc >> 8) & 0xff);
 10553  1C1F  0832               	movf	crc_append@crc+1,w
 10554  1C20  00AC               	movwf	??_crc_append
 10555  1C21  082A               	movf	crc_append@n,w
 10556  1C22  3E01               	addlw	1
 10557  1C23  00AD               	movwf	??_crc_append+1
 10558  1C24  3000               	movlw	0
 10559  1C25  3D2B               	addwfc	crc_append@n+1,w
 10560  1C26  00AE               	movwf	??_crc_append+2
 10561  1C27  082D               	movf	??_crc_append+1,w
 10562  1C28  0728               	addwf	crc_append@message,w
 10563  1C29  00AF               	movwf	??_crc_append+3
 10564  1C2A  082E               	movf	??_crc_append+2,w
 10565  1C2B  3D29               	addwfc	crc_append@message+1,w
 10566  1C2C  00B0               	movwf	??_crc_append+4
 10567  1C2D  082F               	movf	??_crc_append+3,w
 10568  1C2E  0086               	movwf	6
 10569  1C2F  0830               	movf	??_crc_append+4,w
 10570  1C30  0087               	movwf	7
 10571  1C31  082C               	movf	??_crc_append,w
 10572  1C32  0081               	movwf	1
 10573  1C33  0008               	return
 10574  1C34                     __end_of_crc_append:	
 10575                           
 10576                           	psect	text27
 10577  1C69                     __ptext27:	
 10578 ;; *************** function _crc_verify *****************
 10579 ;; Defined at:
 10580 ;;		line 135 in file "src/depend/crc16.c"
 10581 ;; Parameters:    Size  Location     Type
 10582 ;;  message         2    8[BANK0 ] PTR unsigned char 
 10583 ;;		 -> modbusBuf(60), sysData(132), 
 10584 ;;  n               2   10[BANK0 ] unsigned int 
 10585 ;; Auto vars:     Size  Location     Type
 10586 ;;  expected        2   16[BANK0 ] unsigned int 
 10587 ;;  crccal          2   14[BANK0 ] unsigned int 
 10588 ;; Return value:  Size  Location     Type
 10589 ;;                  1    wreg      unsigned char 
 10590 ;; Registers used:
 10591 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10592 ;; Tracked objects:
 10593 ;;		On entry : 0/0
 10594 ;;		On exit  : 0/0
 10595 ;;		Unchanged: 0/0
 10596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10597 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10598 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10599 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10600 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10601 ;;Total ram usage:       10 bytes
 10602 ;; Hardware stack levels used:    1
 10603 ;; Hardware stack levels required when called:    2
 10604 ;; This function calls:
 10605 ;;		_crc_sum
 10606 ;;		_m_mem_cpy_len
 10607 ;; This function is called by:
 10608 ;;		_sys_data_init
 10609 ;;		_modbus_response_process
 10610 ;; This function uses a non-reentrant model
 10611 ;;
 10612                           
 10613                           
 10614                           ;psect for function _crc_verify
 10615  1C69                     _crc_verify:	
 10616                           
 10617                           ;crc16.c: 137: uint16_t expected,crccal;
 10618                           ;crc16.c: 138: m_mem_cpy_len((uint8_t*)(&expected),(message+n-2),2);
 10619                           
 10620                           ;incstack = 0
 10621                           ; Regs used in _crc_verify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10622  1C69  3030               	movlw	low crc_verify@expected
 10623  1C6A  0020               	movlb	0	; select bank0
 10624  1C6B  00A0               	movwf	m_mem_cpy_len@d
 10625  1C6C  3000               	movlw	high crc_verify@expected
 10626  1C6D  00A1               	movwf	m_mem_cpy_len@d+1
 10627  1C6E  082A               	movf	crc_verify@n,w
 10628  1C6F  0728               	addwf	crc_verify@message,w
 10629  1C70  00AC               	movwf	??_crc_verify
 10630  1C71  082B               	movf	crc_verify@n+1,w
 10631  1C72  3D29               	addwfc	crc_verify@message+1,w
 10632  1C73  00AD               	movwf	??_crc_verify+1
 10633  1C74  082C               	movf	??_crc_verify,w
 10634  1C75  3EFE               	addlw	254
 10635  1C76  00A2               	movwf	m_mem_cpy_len@s
 10636  1C77  30FF               	movlw	255
 10637  1C78  3D2D               	addwfc	??_crc_verify+1,w
 10638  1C79  00A3               	movwf	m_mem_cpy_len@s+1
 10639  1C7A  3002               	movlw	2
 10640  1C7B  00A4               	movwf	m_mem_cpy_len@len
 10641  1C7C  3000               	movlw	0
 10642  1C7D  00A5               	movwf	m_mem_cpy_len@len+1
 10643  1C7E  319A  22DD  319C   	fcall	_m_mem_cpy_len
 10644                           
 10645                           ;crc16.c: 139: crccal=crc_sum(message,n - 2);
 10646  1C81  0020               	movlb	0	; select bank0
 10647  1C82  0829               	movf	crc_verify@message+1,w
 10648  1C83  00F4               	movwf	crc_sum@buf+1
 10649  1C84  0828               	movf	crc_verify@message,w
 10650  1C85  00F3               	movwf	crc_sum@buf
 10651  1C86  082A               	movf	crc_verify@n,w
 10652  1C87  3EFE               	addlw	254
 10653  1C88  00F5               	movwf	crc_sum@len
 10654  1C89  30FF               	movlw	255
 10655  1C8A  3D2B               	addwfc	crc_verify@n+1,w
 10656  1C8B  00F6               	movwf	crc_sum@len+1
 10657  1C8C  319E  264C  319C   	fcall	_crc_sum
 10658  1C8F  0874               	movf	?_crc_sum+1,w
 10659  1C90  0020               	movlb	0	; select bank0
 10660  1C91  00AF               	movwf	crc_verify@crccal+1
 10661  1C92  0873               	movf	?_crc_sum,w
 10662  1C93  00AE               	movwf	crc_verify@crccal
 10663                           
 10664                           ;crc16.c: 140: if(expected!=crccal)return 0;
 10665  1C94  082F               	movf	crc_verify@crccal+1,w
 10666  1C95  0631               	xorwf	crc_verify@expected+1,w
 10667  1C96  1D03               	skipz
 10668  1C97  2C9A               	goto	u4385
 10669  1C98  082E               	movf	crc_verify@crccal,w
 10670  1C99  0630               	xorwf	crc_verify@expected,w
 10671  1C9A                     u4385:	
 10672  1C9A  1903               	skipnz
 10673  1C9B  2C9E               	goto	l5115
 10674  1C9C  3000               	movlw	0
 10675  1C9D  0008               	return
 10676  1C9E                     l5115:	
 10677                           
 10678                           ;crc16.c: 141: return 1;
 10679  1C9E  3001               	movlw	1
 10680  1C9F  0008               	return
 10681  1CA0                     __end_of_crc_verify:	
 10682                           
 10683                           	psect	text28
 10684  1ADD                     __ptext28:	
 10685 ;; *************** function _m_mem_cpy_len *****************
 10686 ;; Defined at:
 10687 ;;		line 47 in file "src/depend/m_string.c"
 10688 ;; Parameters:    Size  Location     Type
 10689 ;;  d               2    0[BANK0 ] PTR unsigned char 
 10690 ;;		 -> crc_verify@expected(2), modbusBuf(60), 
 10691 ;;  s               2    2[BANK0 ] PTR unsigned char 
 10692 ;;		 -> modbusBuf(60), sysData(132), eusartRxBuffer(60), 
 10693 ;;  len             2    4[BANK0 ] unsigned int 
 10694 ;; Auto vars:     Size  Location     Type
 10695 ;;		None
 10696 ;; Return value:  Size  Location     Type
 10697 ;;                  1    wreg      void 
 10698 ;; Registers used:
 10699 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10700 ;; Tracked objects:
 10701 ;;		On entry : 0/0
 10702 ;;		On exit  : 0/0
 10703 ;;		Unchanged: 0/0
 10704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10705 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10707 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10708 ;;      Totals:         1       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10709 ;;Total ram usage:        7 bytes
 10710 ;; Hardware stack levels used:    1
 10711 ;; Hardware stack levels required when called:    1
 10712 ;; This function calls:
 10713 ;;		Nothing
 10714 ;; This function is called by:
 10715 ;;		_main
 10716 ;;		_crc_verify
 10717 ;; This function uses a non-reentrant model
 10718 ;;
 10719                           
 10720                           
 10721                           ;psect for function _m_mem_cpy_len
 10722  1ADD                     _m_mem_cpy_len:	
 10723  1ADD                     l5049:	
 10724                           ;m_string.c: 50: while(len)
 10725                           
 10726                           ;incstack = 0
 10727                           ; Regs used in _m_mem_cpy_len: [wreg+fsr1l+fsr1h+status,2+status,0]
 10728                           
 10729  1ADD  0020               	movlb	0	; select bank0
 10730  1ADE  0824               	movf	m_mem_cpy_len@len,w
 10731  1ADF  0425               	iorwf	m_mem_cpy_len@len+1,w
 10732  1AE0  1903               	btfsc	3,2
 10733  1AE1  0008               	return
 10734                           
 10735                           ;m_string.c: 51: {
 10736                           ;m_string.c: 52: *d++=*s++;
 10737  1AE2  0020               	movlb	0	; select bank0
 10738  1AE3  0822               	movf	m_mem_cpy_len@s,w
 10739  1AE4  0086               	movwf	6
 10740  1AE5  0823               	movf	m_mem_cpy_len@s+1,w
 10741  1AE6  0087               	movwf	7
 10742  1AE7  0801               	movf	1,w
 10743  1AE8  00F3               	movwf	??_m_mem_cpy_len
 10744  1AE9  0820               	movf	m_mem_cpy_len@d,w
 10745  1AEA  0086               	movwf	6
 10746  1AEB  0821               	movf	m_mem_cpy_len@d+1,w
 10747  1AEC  0087               	movwf	7
 10748  1AED  0873               	movf	??_m_mem_cpy_len,w
 10749  1AEE  0081               	movwf	1
 10750  1AEF  3001               	movlw	1
 10751  1AF0  07A2               	addwf	m_mem_cpy_len@s,f
 10752  1AF1  3000               	movlw	0
 10753  1AF2  3DA3               	addwfc	m_mem_cpy_len@s+1,f
 10754  1AF3  3001               	movlw	1
 10755  1AF4  07A0               	addwf	m_mem_cpy_len@d,f
 10756  1AF5  3000               	movlw	0
 10757  1AF6  3DA1               	addwfc	m_mem_cpy_len@d+1,f
 10758                           
 10759                           ;m_string.c: 53: len--;
 10760  1AF7  3001               	movlw	1
 10761  1AF8  02A4               	subwf	m_mem_cpy_len@len,f
 10762  1AF9  3000               	movlw	0
 10763  1AFA  3BA5               	subwfb	m_mem_cpy_len@len+1,f
 10764  1AFB  2ADD               	goto	l5049
 10765  1AFC                     __end_of_m_mem_cpy_len:	
 10766                           
 10767                           	psect	text29
 10768  1E4C                     __ptext29:	
 10769 ;; *************** function _crc_sum *****************
 10770 ;; Defined at:
 10771 ;;		line 116 in file "src/depend/crc16.c"
 10772 ;; Parameters:    Size  Location     Type
 10773 ;;  buf             2    3[COMMON] PTR unsigned char 
 10774 ;;		 -> modbusBuf(60), sysData(132), 
 10775 ;;  len             2    5[COMMON] unsigned int 
 10776 ;; Auto vars:     Size  Location     Type
 10777 ;;  crc             2    6[BANK0 ] unsigned int 
 10778 ;;  i               2    4[BANK0 ] unsigned int 
 10779 ;;  j               2    2[BANK0 ] unsigned int 
 10780 ;; Return value:  Size  Location     Type
 10781 ;;                  2    3[COMMON] unsigned int 
 10782 ;; Registers used:
 10783 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10784 ;; Tracked objects:
 10785 ;;		On entry : 0/0
 10786 ;;		On exit  : 0/0
 10787 ;;		Unchanged: 0/0
 10788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10789 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10790 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10791 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10792 ;;      Totals:         4       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10793 ;;Total ram usage:       12 bytes
 10794 ;; Hardware stack levels used:    1
 10795 ;; Hardware stack levels required when called:    1
 10796 ;; This function calls:
 10797 ;;		Nothing
 10798 ;; This function is called by:
 10799 ;;		_crc_verify
 10800 ;;		_crc_append
 10801 ;; This function uses a non-reentrant model
 10802 ;;
 10803                           
 10804                           
 10805                           ;psect for function _crc_sum
 10806  1E4C                     _crc_sum:	
 10807                           
 10808                           ;crc16.c: 118: uint16_t crc=0xFFFF;
 10809                           
 10810                           ;incstack = 0
 10811                           ; Regs used in _crc_sum: [wreg+fsr1l+fsr1h+status,2+status,0]
 10812  1E4C  30FF               	movlw	255
 10813  1E4D  0020               	movlb	0	; select bank0
 10814  1E4E  00A6               	movwf	crc_sum@crc
 10815  1E4F  30FF               	movlw	255
 10816  1E50  00A7               	movwf	crc_sum@crc+1
 10817                           
 10818                           ;crc16.c: 119: uint16_t i, j;
 10819                           ;crc16.c: 120: for ( j=0; j<len;j++){
 10820  1E51  01A2               	clrf	crc_sum@j
 10821  1E52  01A3               	clrf	crc_sum@j+1
 10822  1E53                     l1121:	
 10823  1E53  0876               	movf	crc_sum@len+1,w
 10824  1E54  0223               	subwf	crc_sum@j+1,w
 10825  1E55  1D03               	skipz
 10826  1E56  2E59               	goto	u4215
 10827  1E57  0875               	movf	crc_sum@len,w
 10828  1E58  0222               	subwf	crc_sum@j,w
 10829  1E59                     u4215:	
 10830  1E59  1803               	btfsc	3,0
 10831  1E5A  2E9D               	goto	l4895
 10832                           
 10833                           ;crc16.c: 121: crc=crc ^*buf++;
 10834  1E5B  0873               	movf	crc_sum@buf,w
 10835  1E5C  0086               	movwf	6
 10836  1E5D  0874               	movf	crc_sum@buf+1,w
 10837  1E5E  0087               	movwf	7
 10838  1E5F  0826               	movf	crc_sum@crc,w
 10839  1E60  0601               	xorwf	1,w
 10840  1E61  00A6               	movwf	crc_sum@crc
 10841  1E62  0827               	movf	crc_sum@crc+1,w
 10842  1E63  00A7               	movwf	crc_sum@crc+1
 10843  1E64  3001               	movlw	1
 10844  1E65  07F3               	addwf	crc_sum@buf,f
 10845  1E66  3000               	movlw	0
 10846  1E67  3DF4               	addwfc	crc_sum@buf+1,f
 10847                           
 10848                           ;crc16.c: 122: for ( i=0; i<8; i++){
 10849  1E68  01A4               	clrf	crc_sum@i
 10850  1E69  01A5               	clrf	crc_sum@i+1
 10851  1E6A  3000               	movlw	0
 10852  1E6B  0225               	subwf	crc_sum@i+1,w
 10853  1E6C  3008               	movlw	8
 10854  1E6D  1903               	skipnz
 10855  1E6E  0224               	subwf	crc_sum@i,w
 10856  1E6F  1803               	btfsc	3,0
 10857  1E70  2E98               	goto	l4893
 10858  1E71                     l1123:	
 10859                           
 10860                           ;crc16.c: 124: if(crc&0x0001){
 10861  1E71  1C26               	btfss	crc_sum@crc,0
 10862  1E72  2E83               	goto	l4887
 10863                           
 10864                           ;crc16.c: 125: crc=crc>>1;
 10865  1E73  0827               	movf	crc_sum@crc+1,w
 10866  1E74  00A1               	movwf	??_crc_sum+1
 10867  1E75  0826               	movf	crc_sum@crc,w
 10868  1E76  00A0               	movwf	??_crc_sum
 10869  1E77  36A1               	lsrf	??_crc_sum+1,f
 10870  1E78  0CA0               	rrf	??_crc_sum,f
 10871  1E79  0820               	movf	??_crc_sum,w
 10872  1E7A  00A6               	movwf	crc_sum@crc
 10873  1E7B  0821               	movf	??_crc_sum+1,w
 10874  1E7C  00A7               	movwf	crc_sum@crc+1
 10875                           
 10876                           ;crc16.c: 126: crc=crc^ 0xa001;
 10877  1E7D  3001               	movlw	1
 10878  1E7E  0626               	xorwf	crc_sum@crc,w
 10879  1E7F  00A6               	movwf	crc_sum@crc
 10880  1E80  30A0               	movlw	160
 10881  1E81  0627               	xorwf	crc_sum@crc+1,w
 10882  1E82  2E8C               	goto	L7
 10883  1E83                     l4887:	
 10884                           ;crc16.c: 127: }else{
 10885                           
 10886                           
 10887                           ;crc16.c: 128: crc=crc>>1;
 10888  1E83  0827               	movf	crc_sum@crc+1,w
 10889  1E84  00A1               	movwf	??_crc_sum+1
 10890  1E85  0826               	movf	crc_sum@crc,w
 10891  1E86  00A0               	movwf	??_crc_sum
 10892  1E87  36A1               	lsrf	??_crc_sum+1,f
 10893  1E88  0CA0               	rrf	??_crc_sum,f
 10894  1E89  0820               	movf	??_crc_sum,w
 10895  1E8A  00A6               	movwf	crc_sum@crc
 10896  1E8B  0821               	movf	??_crc_sum+1,w
 10897  1E8C                     L7:	
 10898  1E8C  00A7               	movwf	crc_sum@crc+1
 10899  1E8D  3001               	movlw	1
 10900  1E8E  07A4               	addwf	crc_sum@i,f
 10901  1E8F  3000               	movlw	0
 10902  1E90  3DA5               	addwfc	crc_sum@i+1,f
 10903  1E91  3000               	movlw	0
 10904  1E92  0225               	subwf	crc_sum@i+1,w
 10905  1E93  3008               	movlw	8
 10906  1E94  1903               	skipnz
 10907  1E95  0224               	subwf	crc_sum@i,w
 10908  1E96  1C03               	skipc
 10909  1E97  2E71               	goto	l1123
 10910  1E98                     l4893:	
 10911  1E98  3001               	movlw	1
 10912  1E99  07A2               	addwf	crc_sum@j,f
 10913  1E9A  3000               	movlw	0
 10914  1E9B  3DA3               	addwfc	crc_sum@j+1,f
 10915  1E9C  2E53               	goto	l1121
 10916  1E9D                     l4895:	
 10917                           
 10918                           ;crc16.c: 129: }
 10919                           ;crc16.c: 130: }
 10920                           ;crc16.c: 132: }
 10921                           ;crc16.c: 133: return ( crc);
 10922  1E9D  0827               	movf	crc_sum@crc+1,w
 10923  1E9E  00F4               	movwf	?_crc_sum+1
 10924  1E9F  0826               	movf	crc_sum@crc,w
 10925  1EA0  00F3               	movwf	?_crc_sum
 10926  1EA1  0008               	return
 10927  1EA2                     __end_of_crc_sum:	
 10928                           
 10929                           	psect	text30
 10930  1B1E                     __ptext30:	
 10931 ;; *************** function _m_mem_cpy *****************
 10932 ;; Defined at:
 10933 ;;		line 39 in file "src/depend/m_string.c"
 10934 ;; Parameters:    Size  Location     Type
 10935 ;;  d               1    wreg     PTR unsigned char 
 10936 ;;		 -> str(16), 
 10937 ;;  s               2    3[COMMON] PTR unsigned char 
 10938 ;;		 -> STR_1(10), 
 10939 ;; Auto vars:     Size  Location     Type
 10940 ;;  d               1    6[COMMON] PTR unsigned char 
 10941 ;;		 -> str(16), 
 10942 ;; Return value:  Size  Location     Type
 10943 ;;                  1    wreg      void 
 10944 ;; Registers used:
 10945 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 10946 ;; Tracked objects:
 10947 ;;		On entry : 0/0
 10948 ;;		On exit  : 0/0
 10949 ;;		Unchanged: 0/0
 10950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10951 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10952 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10953 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10954 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10955 ;;Total ram usage:        4 bytes
 10956 ;; Hardware stack levels used:    1
 10957 ;; Hardware stack levels required when called:    1
 10958 ;; This function calls:
 10959 ;;		Nothing
 10960 ;; This function is called by:
 10961 ;;		_main
 10962 ;;		_m_int_2_str_ex
 10963 ;; This function uses a non-reentrant model
 10964 ;;
 10965                           
 10966                           
 10967                           ;psect for function _m_mem_cpy
 10968  1B1E                     _m_mem_cpy:	
 10969                           
 10970                           ;incstack = 0
 10971                           ; Regs used in _m_mem_cpy: [wreg-fsr1h+status,2+status,0+pclath]
 10972                           ;m_mem_cpy@d stored from wreg
 10973  1B1E  00F6               	movwf	m_mem_cpy@d
 10974  1B1F                     l4481:	
 10975                           ;m_string.c: 41: while(*s!='\0')
 10976                           
 10977  1B1F  0873               	movf	m_mem_cpy@s,w
 10978  1B20  0084               	movwf	4
 10979  1B21  0874               	movf	m_mem_cpy@s+1,w
 10980  1B22  0085               	movwf	5
 10981  1B23  0012               	moviw fsr0++
 10982  1B24  1903               	btfsc	3,2
 10983  1B25  2B3B               	goto	l4483
 10984                           
 10985                           ;m_string.c: 42: {
 10986                           ;m_string.c: 43: *d++=*s++;
 10987  1B26  0873               	movf	m_mem_cpy@s,w
 10988  1B27  0084               	movwf	4
 10989  1B28  0874               	movf	m_mem_cpy@s+1,w
 10990  1B29  0085               	movwf	5
 10991  1B2A  0800               	movf	0,w	;code access
 10992  1B2B  00F5               	movwf	??_m_mem_cpy
 10993  1B2C  0876               	movf	m_mem_cpy@d,w
 10994  1B2D  0086               	movwf	6
 10995  1B2E  3001               	movlw	1	; select bank2/3
 10996  1B2F  0087               	movwf	7
 10997  1B30  0875               	movf	??_m_mem_cpy,w
 10998  1B31  0081               	movwf	1
 10999  1B32  3001               	movlw	1
 11000  1B33  07F3               	addwf	m_mem_cpy@s,f
 11001  1B34  3000               	movlw	0
 11002  1B35  3DF4               	addwfc	m_mem_cpy@s+1,f
 11003  1B36  3001               	movlw	1
 11004  1B37  00F5               	movwf	??_m_mem_cpy
 11005  1B38  0875               	movf	??_m_mem_cpy,w
 11006  1B39  07F6               	addwf	m_mem_cpy@d,f
 11007  1B3A  2B1F               	goto	l4481
 11008  1B3B                     l4483:	
 11009                           
 11010                           ;m_string.c: 44: }
 11011                           ;m_string.c: 45: *d='\0';
 11012  1B3B  0876               	movf	m_mem_cpy@d,w
 11013  1B3C  0086               	movwf	6
 11014  1B3D  3001               	movlw	1	; select bank2/3
 11015  1B3E  0087               	movwf	7
 11016  1B3F  0181               	clrf	1
 11017  1B40  0008               	return
 11018  1B41                     __end_of_m_mem_cpy:	
 11019                           
 11020                           	psect	text31
 11021  11B1                     __ptext31:	
 11022 ;; *************** function _calc_temp_rs *****************
 11023 ;; Defined at:
 11024 ;;		line 206 in file "src/api/sample.c"
 11025 ;; Parameters:    Size  Location     Type
 11026 ;;		None
 11027 ;; Auto vars:     Size  Location     Type
 11028 ;;  y               4   25[BANK0 ] unsigned long 
 11029 ;;  x               4   21[BANK0 ] unsigned long 
 11030 ;; Return value:  Size  Location     Type
 11031 ;;                  4   13[BANK0 ] unsigned long 
 11032 ;; Registers used:
 11033 ;;		wreg, status,2, status,0, pclath, cstack
 11034 ;; Tracked objects:
 11035 ;;		On entry : 0/0
 11036 ;;		On exit  : 0/0
 11037 ;;		Unchanged: 0/0
 11038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11039 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11040 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11041 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11042 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11043 ;;Total ram usage:       16 bytes
 11044 ;; Hardware stack levels used:    1
 11045 ;; Hardware stack levels required when called:    2
 11046 ;; This function calls:
 11047 ;;		___lldiv
 11048 ;;		___lmul
 11049 ;; This function is called by:
 11050 ;;		_main
 11051 ;; This function uses a non-reentrant model
 11052 ;;
 11053                           
 11054                           
 11055                           ;psect for function _calc_temp_rs
 11056  11B1                     _calc_temp_rs:	
 11057                           
 11058                           ;sample.c: 219: uint32_t x,y;
 11059                           ;sample.c: 220: y=12000UL;
 11060                           
 11061                           ;incstack = 0
 11062                           ; Regs used in _calc_temp_rs: [wreg+status,2+status,0+pclath+cstack]
 11063  11B1  3000               	movlw	0
 11064  11B2  0020               	movlb	0	; select bank0
 11065  11B3  00BC               	movwf	calc_temp_rs@y+3
 11066  11B4  3000               	movlw	0
 11067  11B5  00BB               	movwf	calc_temp_rs@y+2
 11068  11B6  302E               	movlw	46
 11069  11B7  00BA               	movwf	calc_temp_rs@y+1
 11070  11B8  30E0               	movlw	224
 11071  11B9  00B9               	movwf	calc_temp_rs@y
 11072                           
 11073                           ;sample.c: 221: y=y*rtAdcValueRsHi;
 11074  11BA  0021               	movlb	1	; select bank1
 11075  11BB  0854               	movf	_rtAdcValueRsHi^(0+128),w
 11076  11BC  0020               	movlb	0	; select bank0
 11077  11BD  00A0               	movwf	___lmul@multiplier
 11078  11BE  0021               	movlb	1	; select bank1
 11079  11BF  0855               	movf	(_rtAdcValueRsHi+1)^(0+128),w
 11080  11C0  0020               	movlb	0	; select bank0
 11081  11C1  00A1               	movwf	___lmul@multiplier+1
 11082  11C2  01A2               	clrf	___lmul@multiplier+2
 11083  11C3  01A3               	clrf	___lmul@multiplier+3
 11084  11C4  083C               	movf	calc_temp_rs@y+3,w
 11085  11C5  00A7               	movwf	___lmul@multiplicand+3
 11086  11C6  083B               	movf	calc_temp_rs@y+2,w
 11087  11C7  00A6               	movwf	___lmul@multiplicand+2
 11088  11C8  083A               	movf	calc_temp_rs@y+1,w
 11089  11C9  00A5               	movwf	___lmul@multiplicand+1
 11090  11CA  0839               	movf	calc_temp_rs@y,w
 11091  11CB  00A4               	movwf	___lmul@multiplicand
 11092  11CC  319B  23D3  3191   	fcall	___lmul
 11093  11CF  0020               	movlb	0	; select bank0
 11094  11D0  0823               	movf	?___lmul+3,w
 11095  11D1  00BC               	movwf	calc_temp_rs@y+3
 11096  11D2  0822               	movf	?___lmul+2,w
 11097  11D3  00BB               	movwf	calc_temp_rs@y+2
 11098  11D4  0821               	movf	?___lmul+1,w
 11099  11D5  00BA               	movwf	calc_temp_rs@y+1
 11100  11D6  0820               	movf	?___lmul,w
 11101  11D7  00B9               	movwf	calc_temp_rs@y
 11102                           
 11103                           ;sample.c: 222: x=rtAdcValueRsLo;
 11104  11D8  0866               	movf	_rtAdcValueRsLo,w
 11105  11D9  00B5               	movwf	calc_temp_rs@x
 11106  11DA  0867               	movf	_rtAdcValueRsLo+1,w
 11107  11DB  00B6               	movwf	calc_temp_rs@x+1
 11108  11DC  01B7               	clrf	calc_temp_rs@x+2
 11109  11DD  01B8               	clrf	calc_temp_rs@x+3
 11110                           
 11111                           ;sample.c: 223: y=y/x;
 11112  11DE  0838               	movf	calc_temp_rs@x+3,w
 11113  11DF  00A3               	movwf	___lldiv@divisor+3
 11114  11E0  0837               	movf	calc_temp_rs@x+2,w
 11115  11E1  00A2               	movwf	___lldiv@divisor+2
 11116  11E2  0836               	movf	calc_temp_rs@x+1,w
 11117  11E3  00A1               	movwf	___lldiv@divisor+1
 11118  11E4  0835               	movf	calc_temp_rs@x,w
 11119  11E5  00A0               	movwf	___lldiv@divisor
 11120  11E6  083C               	movf	calc_temp_rs@y+3,w
 11121  11E7  00A7               	movwf	___lldiv@dividend+3
 11122  11E8  083B               	movf	calc_temp_rs@y+2,w
 11123  11E9  00A6               	movwf	___lldiv@dividend+2
 11124  11EA  083A               	movf	calc_temp_rs@y+1,w
 11125  11EB  00A5               	movwf	___lldiv@dividend+1
 11126  11EC  0839               	movf	calc_temp_rs@y,w
 11127  11ED  00A4               	movwf	___lldiv@dividend
 11128  11EE  319D  25A5  3191   	fcall	___lldiv
 11129  11F1  0020               	movlb	0	; select bank0
 11130  11F2  0823               	movf	?___lldiv+3,w
 11131  11F3  00BC               	movwf	calc_temp_rs@y+3
 11132  11F4  0822               	movf	?___lldiv+2,w
 11133  11F5  00BB               	movwf	calc_temp_rs@y+2
 11134  11F6  0821               	movf	?___lldiv+1,w
 11135  11F7  00BA               	movwf	calc_temp_rs@y+1
 11136  11F8  0820               	movf	?___lldiv,w
 11137  11F9  00B9               	movwf	calc_temp_rs@y
 11138                           
 11139                           ;sample.c: 224: if(y<2000)y=2000;
 11140  11FA  083C               	movf	calc_temp_rs@y+3,w
 11141  11FB  1D03               	btfss	3,2
 11142  11FC  2A0E               	goto	l5421
 11143  11FD  083B               	movf	calc_temp_rs@y+2,w
 11144  11FE  1D03               	btfss	3,2
 11145  11FF  2A0E               	goto	l5421
 11146  1200  30D0               	movlw	208
 11147  1201  0239               	subwf	calc_temp_rs@y,w
 11148  1202  3007               	movlw	7
 11149  1203  3B3A               	subwfb	calc_temp_rs@y+1,w
 11150  1204  1803               	btfsc	3,0
 11151  1205  2A0E               	goto	l5421
 11152  1206  3000               	movlw	0
 11153  1207  00BC               	movwf	calc_temp_rs@y+3
 11154  1208  3000               	movlw	0
 11155  1209  00BB               	movwf	calc_temp_rs@y+2
 11156  120A  3007               	movlw	7
 11157  120B  00BA               	movwf	calc_temp_rs@y+1
 11158  120C  30D0               	movlw	208
 11159  120D  00B9               	movwf	calc_temp_rs@y
 11160  120E                     l5421:	
 11161                           
 11162                           ;sample.c: 225: if(y>25000)y=25000;
 11163  120E  083C               	movf	calc_temp_rs@y+3,w
 11164  120F  1D03               	btfss	3,2
 11165  1210  2A1A               	goto	l5423
 11166  1211  083B               	movf	calc_temp_rs@y+2,w
 11167  1212  1D03               	btfss	3,2
 11168  1213  2A1A               	goto	l5423
 11169  1214  30A9               	movlw	169
 11170  1215  0239               	subwf	calc_temp_rs@y,w
 11171  1216  3061               	movlw	97
 11172  1217  3B3A               	subwfb	calc_temp_rs@y+1,w
 11173  1218  1C03               	btfss	3,0
 11174  1219  2A22               	goto	l662
 11175  121A                     l5423:	
 11176  121A  3000               	movlw	0
 11177  121B  00BC               	movwf	calc_temp_rs@y+3
 11178  121C  3000               	movlw	0
 11179  121D  00BB               	movwf	calc_temp_rs@y+2
 11180  121E  3061               	movlw	97
 11181  121F  00BA               	movwf	calc_temp_rs@y+1
 11182  1220  30A8               	movlw	168
 11183  1221  00B9               	movwf	calc_temp_rs@y
 11184  1222                     l662:	
 11185                           
 11186                           ;sample.c: 226: y=y-1000;
 11187  1222  3018               	movlw	24
 11188  1223  00B1               	movwf	??_calc_temp_rs
 11189  1224  30FC               	movlw	252
 11190  1225  00B2               	movwf	??_calc_temp_rs+1
 11191  1226  30FF               	movlw	255
 11192  1227  00B3               	movwf	??_calc_temp_rs+2
 11193  1228  30FF               	movlw	255
 11194  1229  00B4               	movwf	??_calc_temp_rs+3
 11195  122A  0839               	movf	calc_temp_rs@y,w
 11196  122B  07B1               	addwf	??_calc_temp_rs,f
 11197  122C  083A               	movf	calc_temp_rs@y+1,w
 11198  122D  3DB2               	addwfc	??_calc_temp_rs+1,f
 11199  122E  083B               	movf	calc_temp_rs@y+2,w
 11200  122F  3DB3               	addwfc	??_calc_temp_rs+2,f
 11201  1230  083C               	movf	calc_temp_rs@y+3,w
 11202  1231  3DB4               	addwfc	??_calc_temp_rs+3,f
 11203  1232  0834               	movf	??_calc_temp_rs+3,w
 11204  1233  00BC               	movwf	calc_temp_rs@y+3
 11205  1234  0833               	movf	??_calc_temp_rs+2,w
 11206  1235  00BB               	movwf	calc_temp_rs@y+2
 11207  1236  0832               	movf	??_calc_temp_rs+1,w
 11208  1237  00BA               	movwf	calc_temp_rs@y+1
 11209  1238  0831               	movf	??_calc_temp_rs,w
 11210  1239  00B9               	movwf	calc_temp_rs@y
 11211                           
 11212                           ;sample.c: 228: return (uint16_t)y;
 11213  123A  0839               	movf	calc_temp_rs@y,w
 11214  123B  00AD               	movwf	?_calc_temp_rs
 11215  123C  083A               	movf	calc_temp_rs@y+1,w
 11216  123D  00AE               	movwf	?_calc_temp_rs+1
 11217  123E  01AF               	clrf	?_calc_temp_rs+2
 11218  123F  01B0               	clrf	?_calc_temp_rs+3
 11219  1240  0008               	return
 11220  1241                     __end_of_calc_temp_rs:	
 11221                           
 11222                           	psect	text32
 11223  14BF                     __ptext32:	
 11224 ;; *************** function _calc_temp_rc *****************
 11225 ;; Defined at:
 11226 ;;		line 232 in file "src/api/sample.c"
 11227 ;; Parameters:    Size  Location     Type
 11228 ;;		None
 11229 ;; Auto vars:     Size  Location     Type
 11230 ;;  y               4   29[BANK0 ] unsigned long 
 11231 ;;  x               4   25[BANK0 ] unsigned long 
 11232 ;; Return value:  Size  Location     Type
 11233 ;;                  4   13[BANK0 ] unsigned long 
 11234 ;; Registers used:
 11235 ;;		wreg, status,2, status,0, pclath, cstack
 11236 ;; Tracked objects:
 11237 ;;		On entry : 0/0
 11238 ;;		On exit  : 0/0
 11239 ;;		Unchanged: 0/0
 11240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11241 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11242 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11243 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11244 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11245 ;;Total ram usage:       20 bytes
 11246 ;; Hardware stack levels used:    1
 11247 ;; Hardware stack levels required when called:    2
 11248 ;; This function calls:
 11249 ;;		___lldiv
 11250 ;;		___lmul
 11251 ;; This function is called by:
 11252 ;;		_main
 11253 ;; This function uses a non-reentrant model
 11254 ;;
 11255                           
 11256                           
 11257                           ;psect for function _calc_temp_rc
 11258  14BF                     _calc_temp_rc:	
 11259                           
 11260                           ;sample.c: 235: uint32_t x,y;
 11261                           ;sample.c: 236: x=300000UL;
 11262                           
 11263                           ;incstack = 0
 11264                           ; Regs used in _calc_temp_rc: [wreg+status,2+status,0+pclath+cstack]
 11265  14BF  3000               	movlw	0
 11266  14C0  0020               	movlb	0	; select bank0
 11267  14C1  00BC               	movwf	calc_temp_rc@x+3
 11268  14C2  3004               	movlw	4
 11269  14C3  00BB               	movwf	calc_temp_rc@x+2
 11270  14C4  3093               	movlw	147
 11271  14C5  00BA               	movwf	calc_temp_rc@x+1
 11272  14C6  30E0               	movlw	224
 11273  14C7  00B9               	movwf	calc_temp_rc@x
 11274                           
 11275                           ;sample.c: 237: x=x*rtAdcValueRcLo;
 11276  14C8  0864               	movf	_rtAdcValueRcLo,w
 11277  14C9  00A0               	movwf	___lmul@multiplier
 11278  14CA  0865               	movf	_rtAdcValueRcLo+1,w
 11279  14CB  00A1               	movwf	___lmul@multiplier+1
 11280  14CC  01A2               	clrf	___lmul@multiplier+2
 11281  14CD  01A3               	clrf	___lmul@multiplier+3
 11282  14CE  083C               	movf	calc_temp_rc@x+3,w
 11283  14CF  00A7               	movwf	___lmul@multiplicand+3
 11284  14D0  083B               	movf	calc_temp_rc@x+2,w
 11285  14D1  00A6               	movwf	___lmul@multiplicand+2
 11286  14D2  083A               	movf	calc_temp_rc@x+1,w
 11287  14D3  00A5               	movwf	___lmul@multiplicand+1
 11288  14D4  0839               	movf	calc_temp_rc@x,w
 11289  14D5  00A4               	movwf	___lmul@multiplicand
 11290  14D6  319B  23D3  3194   	fcall	___lmul
 11291  14D9  0020               	movlb	0	; select bank0
 11292  14DA  0823               	movf	?___lmul+3,w
 11293  14DB  00BC               	movwf	calc_temp_rc@x+3
 11294  14DC  0822               	movf	?___lmul+2,w
 11295  14DD  00BB               	movwf	calc_temp_rc@x+2
 11296  14DE  0821               	movf	?___lmul+1,w
 11297  14DF  00BA               	movwf	calc_temp_rc@x+1
 11298  14E0  0820               	movf	?___lmul,w
 11299  14E1  00B9               	movwf	calc_temp_rc@x
 11300                           
 11301                           ;sample.c: 240: y=rtAdcValueRcHi;
 11302  14E2  0021               	movlb	1	; select bank1
 11303  14E3  0852               	movf	_rtAdcValueRcHi^(0+128),w
 11304  14E4  0020               	movlb	0	; select bank0
 11305  14E5  00BD               	movwf	calc_temp_rc@y
 11306  14E6  0021               	movlb	1	; select bank1
 11307  14E7  0853               	movf	(_rtAdcValueRcHi+1)^(0+128),w
 11308  14E8  0020               	movlb	0	; select bank0
 11309  14E9  00BE               	movwf	calc_temp_rc@y+1
 11310  14EA  01BF               	clrf	calc_temp_rc@y+2
 11311  14EB  01C0               	clrf	calc_temp_rc@y+3
 11312                           
 11313                           ;sample.c: 241: y=y*3100;
 11314  14EC  0840               	movf	calc_temp_rc@y+3,w
 11315  14ED  00A3               	movwf	___lmul@multiplier+3
 11316  14EE  083F               	movf	calc_temp_rc@y+2,w
 11317  14EF  00A2               	movwf	___lmul@multiplier+2
 11318  14F0  083E               	movf	calc_temp_rc@y+1,w
 11319  14F1  00A1               	movwf	___lmul@multiplier+1
 11320  14F2  083D               	movf	calc_temp_rc@y,w
 11321  14F3  00A0               	movwf	___lmul@multiplier
 11322  14F4  3000               	movlw	0
 11323  14F5  00A7               	movwf	___lmul@multiplicand+3
 11324  14F6  3000               	movlw	0
 11325  14F7  00A6               	movwf	___lmul@multiplicand+2
 11326  14F8  300C               	movlw	12
 11327  14F9  00A5               	movwf	___lmul@multiplicand+1
 11328  14FA  301C               	movlw	28
 11329  14FB  00A4               	movwf	___lmul@multiplicand
 11330  14FC  319B  23D3  3194   	fcall	___lmul
 11331  14FF  0020               	movlb	0	; select bank0
 11332  1500  0823               	movf	?___lmul+3,w
 11333  1501  00C0               	movwf	calc_temp_rc@y+3
 11334  1502  0822               	movf	?___lmul+2,w
 11335  1503  00BF               	movwf	calc_temp_rc@y+2
 11336  1504  0821               	movf	?___lmul+1,w
 11337  1505  00BE               	movwf	calc_temp_rc@y+1
 11338  1506  0820               	movf	?___lmul,w
 11339  1507  00BD               	movwf	calc_temp_rc@y
 11340                           
 11341                           ;sample.c: 242: y=y/100;
 11342  1508  3000               	movlw	0
 11343  1509  00A3               	movwf	___lldiv@divisor+3
 11344  150A  3000               	movlw	0
 11345  150B  00A2               	movwf	___lldiv@divisor+2
 11346  150C  3000               	movlw	0
 11347  150D  00A1               	movwf	___lldiv@divisor+1
 11348  150E  3064               	movlw	100
 11349  150F  00A0               	movwf	___lldiv@divisor
 11350  1510  0840               	movf	calc_temp_rc@y+3,w
 11351  1511  00A7               	movwf	___lldiv@dividend+3
 11352  1512  083F               	movf	calc_temp_rc@y+2,w
 11353  1513  00A6               	movwf	___lldiv@dividend+2
 11354  1514  083E               	movf	calc_temp_rc@y+1,w
 11355  1515  00A5               	movwf	___lldiv@dividend+1
 11356  1516  083D               	movf	calc_temp_rc@y,w
 11357  1517  00A4               	movwf	___lldiv@dividend
 11358  1518  319D  25A5  3194   	fcall	___lldiv
 11359  151B  0020               	movlb	0	; select bank0
 11360  151C  0823               	movf	?___lldiv+3,w
 11361  151D  00C0               	movwf	calc_temp_rc@y+3
 11362  151E  0822               	movf	?___lldiv+2,w
 11363  151F  00BF               	movwf	calc_temp_rc@y+2
 11364  1520  0821               	movf	?___lldiv+1,w
 11365  1521  00BE               	movwf	calc_temp_rc@y+1
 11366  1522  0820               	movf	?___lldiv,w
 11367  1523  00BD               	movwf	calc_temp_rc@y
 11368                           
 11369                           ;sample.c: 243: y=y-rtAdcValueRcLo;
 11370  1524  083D               	movf	calc_temp_rc@y,w
 11371  1525  00B1               	movwf	??_calc_temp_rc
 11372  1526  083E               	movf	calc_temp_rc@y+1,w
 11373  1527  00B2               	movwf	??_calc_temp_rc+1
 11374  1528  083F               	movf	calc_temp_rc@y+2,w
 11375  1529  00B3               	movwf	??_calc_temp_rc+2
 11376  152A  0840               	movf	calc_temp_rc@y+3,w
 11377  152B  00B4               	movwf	??_calc_temp_rc+3
 11378  152C  0864               	movf	_rtAdcValueRcLo,w
 11379  152D  00B5               	movwf	??_calc_temp_rc+4
 11380  152E  0865               	movf	_rtAdcValueRcLo+1,w
 11381  152F  00B6               	movwf	??_calc_temp_rc+5
 11382  1530  01B7               	clrf	??_calc_temp_rc+6
 11383  1531  01B8               	clrf	??_calc_temp_rc+7
 11384  1532  09B5               	comf	??_calc_temp_rc+4,f
 11385  1533  09B6               	comf	??_calc_temp_rc+5,f
 11386  1534  09B7               	comf	??_calc_temp_rc+6,f
 11387  1535  09B8               	comf	??_calc_temp_rc+7,f
 11388  1536  0AB5               	incf	??_calc_temp_rc+4,f
 11389  1537  1903               	skipnz
 11390  1538  0AB6               	incf	??_calc_temp_rc+5,f
 11391  1539  1903               	skipnz
 11392  153A  0AB7               	incf	??_calc_temp_rc+6,f
 11393  153B  1903               	skipnz
 11394  153C  0AB8               	incf	??_calc_temp_rc+7,f
 11395  153D  0835               	movf	??_calc_temp_rc+4,w
 11396  153E  07B1               	addwf	??_calc_temp_rc,f
 11397  153F  0836               	movf	??_calc_temp_rc+5,w
 11398  1540  3DB2               	addwfc	??_calc_temp_rc+1,f
 11399  1541  0837               	movf	??_calc_temp_rc+6,w
 11400  1542  3DB3               	addwfc	??_calc_temp_rc+2,f
 11401  1543  0838               	movf	??_calc_temp_rc+7,w
 11402  1544  3DB4               	addwfc	??_calc_temp_rc+3,f
 11403  1545  0834               	movf	??_calc_temp_rc+3,w
 11404  1546  00C0               	movwf	calc_temp_rc@y+3
 11405  1547  0833               	movf	??_calc_temp_rc+2,w
 11406  1548  00BF               	movwf	calc_temp_rc@y+2
 11407  1549  0832               	movf	??_calc_temp_rc+1,w
 11408  154A  00BE               	movwf	calc_temp_rc@y+1
 11409  154B  0831               	movf	??_calc_temp_rc,w
 11410  154C  00BD               	movwf	calc_temp_rc@y
 11411                           
 11412                           ;sample.c: 246: y=x/y;
 11413  154D  0840               	movf	calc_temp_rc@y+3,w
 11414  154E  00A3               	movwf	___lldiv@divisor+3
 11415  154F  083F               	movf	calc_temp_rc@y+2,w
 11416  1550  00A2               	movwf	___lldiv@divisor+2
 11417  1551  083E               	movf	calc_temp_rc@y+1,w
 11418  1552  00A1               	movwf	___lldiv@divisor+1
 11419  1553  083D               	movf	calc_temp_rc@y,w
 11420  1554  00A0               	movwf	___lldiv@divisor
 11421  1555  083C               	movf	calc_temp_rc@x+3,w
 11422  1556  00A7               	movwf	___lldiv@dividend+3
 11423  1557  083B               	movf	calc_temp_rc@x+2,w
 11424  1558  00A6               	movwf	___lldiv@dividend+2
 11425  1559  083A               	movf	calc_temp_rc@x+1,w
 11426  155A  00A5               	movwf	___lldiv@dividend+1
 11427  155B  0839               	movf	calc_temp_rc@x,w
 11428  155C  00A4               	movwf	___lldiv@dividend
 11429  155D  319D  25A5  3194   	fcall	___lldiv
 11430  1560  0020               	movlb	0	; select bank0
 11431  1561  0823               	movf	?___lldiv+3,w
 11432  1562  00C0               	movwf	calc_temp_rc@y+3
 11433  1563  0822               	movf	?___lldiv+2,w
 11434  1564  00BF               	movwf	calc_temp_rc@y+2
 11435  1565  0821               	movf	?___lldiv+1,w
 11436  1566  00BE               	movwf	calc_temp_rc@y+1
 11437  1567  0820               	movf	?___lldiv,w
 11438  1568  00BD               	movwf	calc_temp_rc@y
 11439                           
 11440                           ;sample.c: 247: if(y<2000)y=2000;
 11441  1569  0840               	movf	calc_temp_rc@y+3,w
 11442  156A  1D03               	btfss	3,2
 11443  156B  2D7D               	goto	l5439
 11444  156C  083F               	movf	calc_temp_rc@y+2,w
 11445  156D  1D03               	btfss	3,2
 11446  156E  2D7D               	goto	l5439
 11447  156F  30D0               	movlw	208
 11448  1570  023D               	subwf	calc_temp_rc@y,w
 11449  1571  3007               	movlw	7
 11450  1572  3B3E               	subwfb	calc_temp_rc@y+1,w
 11451  1573  1803               	btfsc	3,0
 11452  1574  2D7D               	goto	l5439
 11453  1575  3000               	movlw	0
 11454  1576  00C0               	movwf	calc_temp_rc@y+3
 11455  1577  3000               	movlw	0
 11456  1578  00BF               	movwf	calc_temp_rc@y+2
 11457  1579  3007               	movlw	7
 11458  157A  00BE               	movwf	calc_temp_rc@y+1
 11459  157B  30D0               	movlw	208
 11460  157C  00BD               	movwf	calc_temp_rc@y
 11461  157D                     l5439:	
 11462                           
 11463                           ;sample.c: 248: if(y>25000)y=25000;
 11464  157D  0840               	movf	calc_temp_rc@y+3,w
 11465  157E  1D03               	btfss	3,2
 11466  157F  2D89               	goto	l5441
 11467  1580  083F               	movf	calc_temp_rc@y+2,w
 11468  1581  1D03               	btfss	3,2
 11469  1582  2D89               	goto	l5441
 11470  1583  30A9               	movlw	169
 11471  1584  023D               	subwf	calc_temp_rc@y,w
 11472  1585  3061               	movlw	97
 11473  1586  3B3E               	subwfb	calc_temp_rc@y+1,w
 11474  1587  1C03               	btfss	3,0
 11475  1588  2D91               	goto	l667
 11476  1589                     l5441:	
 11477  1589  3000               	movlw	0
 11478  158A  00C0               	movwf	calc_temp_rc@y+3
 11479  158B  3000               	movlw	0
 11480  158C  00BF               	movwf	calc_temp_rc@y+2
 11481  158D  3061               	movlw	97
 11482  158E  00BE               	movwf	calc_temp_rc@y+1
 11483  158F  30A8               	movlw	168
 11484  1590  00BD               	movwf	calc_temp_rc@y
 11485  1591                     l667:	
 11486                           
 11487                           ;sample.c: 250: return (uint16_t)y;
 11488  1591  083D               	movf	calc_temp_rc@y,w
 11489  1592  00AD               	movwf	?_calc_temp_rc
 11490  1593  083E               	movf	calc_temp_rc@y+1,w
 11491  1594  00AE               	movwf	?_calc_temp_rc+1
 11492  1595  01AF               	clrf	?_calc_temp_rc+2
 11493  1596  01B0               	clrf	?_calc_temp_rc+3
 11494  1597  0008               	return
 11495  1598                     __end_of_calc_temp_rc:	
 11496                           
 11497                           	psect	text33
 11498  1047                     __ptext33:	
 11499 ;; *************** function _calc_rs_lo_avg *****************
 11500 ;; Defined at:
 11501 ;;		line 423 in file "src/api/sample.c"
 11502 ;; Parameters:    Size  Location     Type
 11503 ;;  x               2   13[BANK0 ] unsigned int 
 11504 ;; Auto vars:     Size  Location     Type
 11505 ;;  t32             4   15[BANK0 ] unsigned long 
 11506 ;;  i               1   19[BANK0 ] unsigned char 
 11507 ;; Return value:  Size  Location     Type
 11508 ;;                  2   13[BANK0 ] unsigned int 
 11509 ;; Registers used:
 11510 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11511 ;; Tracked objects:
 11512 ;;		On entry : 0/0
 11513 ;;		On exit  : 0/0
 11514 ;;		Unchanged: 0/0
 11515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11516 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11517 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11518 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11519 ;;      Totals:         2       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11520 ;;Total ram usage:        9 bytes
 11521 ;; Hardware stack levels used:    1
 11522 ;; Hardware stack levels required when called:    2
 11523 ;; This function calls:
 11524 ;;		___lldiv
 11525 ;; This function is called by:
 11526 ;;		_main
 11527 ;; This function uses a non-reentrant model
 11528 ;;
 11529                           
 11530                           
 11531                           ;psect for function _calc_rs_lo_avg
 11532  1047                     _calc_rs_lo_avg:	
 11533                           
 11534                           ;sample.c: 425: uint8_t i;
 11535                           ;sample.c: 426: uint32_t t32=0;
 11536                           
 11537                           ;incstack = 0
 11538                           ; Regs used in _calc_rs_lo_avg: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11539  1047  3000               	movlw	0
 11540  1048  0020               	movlb	0	; select bank0
 11541  1049  00B2               	movwf	calc_rs_lo_avg@t32+3
 11542  104A  3000               	movlw	0
 11543  104B  00B1               	movwf	calc_rs_lo_avg@t32+2
 11544  104C  3000               	movlw	0
 11545  104D  00B0               	movwf	calc_rs_lo_avg@t32+1
 11546  104E  3000               	movlw	0
 11547  104F  00AF               	movwf	calc_rs_lo_avg@t32
 11548                           
 11549                           ;sample.c: 428: for(i=0;i<6-1;i++){
 11550  1050  01B3               	clrf	calc_rs_lo_avg@i
 11551  1051  3005               	movlw	5
 11552  1052  0233               	subwf	calc_rs_lo_avg@i,w
 11553  1053  1803               	btfsc	3,0
 11554  1054  2879               	goto	l5581
 11555  1055                     l5573:	
 11556                           
 11557                           ;sample.c: 429: rsLoAvgBuf[i]=rsLoAvgBuf[i+1];
 11558  1055  3533               	lslf	calc_rs_lo_avg@i,w
 11559  1056  3E02               	addlw	2
 11560  1057  3EAC               	addlw	(low (_rsLoAvgBuf| 0))& (0+255)
 11561  1058  0086               	movwf	6
 11562  1059  0187               	clrf	7
 11563  105A  3533               	lslf	calc_rs_lo_avg@i,w
 11564  105B  3EAC               	addlw	(low (_rsLoAvgBuf| 0))& (0+255)
 11565  105C  0084               	movwf	4
 11566  105D  0185               	clrf	5
 11567  105E  3F40               	moviw [0]fsr1
 11568  105F  3F80               	movwi [0]fsr0
 11569  1060  3F41               	moviw [1]fsr1
 11570  1061  3F81               	movwi [1]fsr0
 11571                           
 11572                           ;sample.c: 430: t32+=((uint32_t)rsLoAvgBuf[i]);
 11573  1062  3533               	lslf	calc_rs_lo_avg@i,w
 11574  1063  3EAC               	addlw	(low (_rsLoAvgBuf| 0))& (0+255)
 11575  1064  0086               	movwf	6
 11576  1065  0187               	clrf	7
 11577  1066  3F40               	moviw [0]fsr1
 11578  1067  00F4               	movwf	??_calc_rs_lo_avg
 11579  1068  3F41               	moviw [1]fsr1
 11580  1069  00F5               	movwf	??_calc_rs_lo_avg+1
 11581  106A  0874               	movf	??_calc_rs_lo_avg,w
 11582  106B  07AF               	addwf	calc_rs_lo_avg@t32,f
 11583  106C  0875               	movf	??_calc_rs_lo_avg+1,w
 11584  106D  3DB0               	addwfc	calc_rs_lo_avg@t32+1,f
 11585  106E  3000               	movlw	0
 11586  106F  3DB1               	addwfc	calc_rs_lo_avg@t32+2,f
 11587  1070  3DB2               	addwfc	calc_rs_lo_avg@t32+3,f
 11588  1071  3001               	movlw	1
 11589  1072  00F4               	movwf	??_calc_rs_lo_avg
 11590  1073  0874               	movf	??_calc_rs_lo_avg,w
 11591  1074  07B3               	addwf	calc_rs_lo_avg@i,f
 11592  1075  3005               	movlw	5
 11593  1076  0233               	subwf	calc_rs_lo_avg@i,w
 11594  1077  1C03               	skipc
 11595  1078  2855               	goto	l5573
 11596  1079                     l5581:	
 11597                           
 11598                           ;sample.c: 431: }
 11599                           ;sample.c: 432: rsLoAvgBuf[i]=x;
 11600  1079  3533               	lslf	calc_rs_lo_avg@i,w
 11601  107A  3EAC               	addlw	(low (_rsLoAvgBuf| 0))& (0+255)
 11602  107B  0086               	movwf	6
 11603  107C  0187               	clrf	7
 11604  107D  082D               	movf	calc_rs_lo_avg@x,w
 11605  107E  3FC0               	movwi [0]fsr1
 11606  107F  082E               	movf	calc_rs_lo_avg@x+1,w
 11607  1080  3FC1               	movwi [1]fsr1
 11608                           
 11609                           ;sample.c: 433: t32+=x;
 11610  1081  082D               	movf	calc_rs_lo_avg@x,w
 11611  1082  07AF               	addwf	calc_rs_lo_avg@t32,f
 11612  1083  082E               	movf	calc_rs_lo_avg@x+1,w
 11613  1084  3DB0               	addwfc	calc_rs_lo_avg@t32+1,f
 11614  1085  3000               	movlw	0
 11615  1086  3DB1               	addwfc	calc_rs_lo_avg@t32+2,f
 11616  1087  3DB2               	addwfc	calc_rs_lo_avg@t32+3,f
 11617                           
 11618                           ;sample.c: 434: t32/=6;
 11619  1088  3000               	movlw	0
 11620  1089  00A3               	movwf	___lldiv@divisor+3
 11621  108A  3000               	movlw	0
 11622  108B  00A2               	movwf	___lldiv@divisor+2
 11623  108C  3000               	movlw	0
 11624  108D  00A1               	movwf	___lldiv@divisor+1
 11625  108E  3006               	movlw	6
 11626  108F  00A0               	movwf	___lldiv@divisor
 11627  1090  0832               	movf	calc_rs_lo_avg@t32+3,w
 11628  1091  00A7               	movwf	___lldiv@dividend+3
 11629  1092  0831               	movf	calc_rs_lo_avg@t32+2,w
 11630  1093  00A6               	movwf	___lldiv@dividend+2
 11631  1094  0830               	movf	calc_rs_lo_avg@t32+1,w
 11632  1095  00A5               	movwf	___lldiv@dividend+1
 11633  1096  082F               	movf	calc_rs_lo_avg@t32,w
 11634  1097  00A4               	movwf	___lldiv@dividend
 11635  1098  319D  25A5         	fcall	___lldiv
 11636  109A  0020               	movlb	0	; select bank0
 11637  109B  0823               	movf	?___lldiv+3,w
 11638  109C  00B2               	movwf	calc_rs_lo_avg@t32+3
 11639  109D  0822               	movf	?___lldiv+2,w
 11640  109E  00B1               	movwf	calc_rs_lo_avg@t32+2
 11641  109F  0821               	movf	?___lldiv+1,w
 11642  10A0  00B0               	movwf	calc_rs_lo_avg@t32+1
 11643  10A1  0820               	movf	?___lldiv,w
 11644  10A2  00AF               	movwf	calc_rs_lo_avg@t32
 11645                           
 11646                           ;sample.c: 435: return (uint16_t)t32;
 11647  10A3  0830               	movf	calc_rs_lo_avg@t32+1,w
 11648  10A4  00AE               	movwf	?_calc_rs_lo_avg+1
 11649  10A5  082F               	movf	calc_rs_lo_avg@t32,w
 11650  10A6  00AD               	movwf	?_calc_rs_lo_avg
 11651  10A7  0008               	return
 11652  10A8                     __end_of_calc_rs_lo_avg:	
 11653                           
 11654                           	psect	text34
 11655  1DA5                     __ptext34:	
 11656 ;; *************** function ___lldiv *****************
 11657 ;; Defined at:
 11658 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lldiv.c"
 11659 ;; Parameters:    Size  Location     Type
 11660 ;;  divisor         4    0[BANK0 ] unsigned long 
 11661 ;;  dividend        4    4[BANK0 ] unsigned long 
 11662 ;; Auto vars:     Size  Location     Type
 11663 ;;  quotient        4    8[BANK0 ] unsigned long 
 11664 ;;  counter         1   12[BANK0 ] unsigned char 
 11665 ;; Return value:  Size  Location     Type
 11666 ;;                  4    0[BANK0 ] unsigned long 
 11667 ;; Registers used:
 11668 ;;		wreg, status,2, status,0
 11669 ;; Tracked objects:
 11670 ;;		On entry : 0/0
 11671 ;;		On exit  : 0/0
 11672 ;;		Unchanged: 0/0
 11673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11674 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11675 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11676 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11677 ;;      Totals:         1      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11678 ;;Total ram usage:       14 bytes
 11679 ;; Hardware stack levels used:    1
 11680 ;; Hardware stack levels required when called:    1
 11681 ;; This function calls:
 11682 ;;		Nothing
 11683 ;; This function is called by:
 11684 ;;		_calc_temp_rs
 11685 ;;		_calc_temp_rc
 11686 ;;		_calc_rs_lo_avg
 11687 ;; This function uses a non-reentrant model
 11688 ;;
 11689                           
 11690                           
 11691                           ;psect for function ___lldiv
 11692  1DA5                     ___lldiv:	
 11693                           
 11694                           ;incstack = 0
 11695                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 11696  1DA5  3000               	movlw	0
 11697  1DA6  0020               	movlb	0	; select bank0
 11698  1DA7  00AB               	movwf	___lldiv@quotient+3
 11699  1DA8  3000               	movlw	0
 11700  1DA9  00AA               	movwf	___lldiv@quotient+2
 11701  1DAA  3000               	movlw	0
 11702  1DAB  00A9               	movwf	___lldiv@quotient+1
 11703  1DAC  3000               	movlw	0
 11704  1DAD  00A8               	movwf	___lldiv@quotient
 11705  1DAE  0823               	movf	___lldiv@divisor+3,w
 11706  1DAF  0422               	iorwf	___lldiv@divisor+2,w
 11707  1DB0  0421               	iorwf	___lldiv@divisor+1,w
 11708  1DB1  0420               	iorwf	___lldiv@divisor,w
 11709  1DB2  1903               	skipnz
 11710  1DB3  2DEF               	goto	l5377
 11711  1DB4  01AC               	clrf	___lldiv@counter
 11712  1DB5  0AAC               	incf	___lldiv@counter,f
 11713  1DB6                     l5363:	
 11714  1DB6  1BA3               	btfsc	___lldiv@divisor+3,7
 11715  1DB7  2DC4               	goto	l5365
 11716  1DB8  3001               	movlw	1
 11717  1DB9                     u4855:	
 11718  1DB9  35A0               	lslf	___lldiv@divisor,f
 11719  1DBA  0DA1               	rlf	___lldiv@divisor+1,f
 11720  1DBB  0DA2               	rlf	___lldiv@divisor+2,f
 11721  1DBC  0DA3               	rlf	___lldiv@divisor+3,f
 11722  1DBD  0B89               	decfsz	9,f
 11723  1DBE  2DB9               	goto	u4855
 11724  1DBF  3001               	movlw	1
 11725  1DC0  00F3               	movwf	??___lldiv
 11726  1DC1  0873               	movf	??___lldiv,w
 11727  1DC2  07AC               	addwf	___lldiv@counter,f
 11728  1DC3  2DB6               	goto	l5363
 11729  1DC4                     l5365:	
 11730  1DC4  3001               	movlw	1
 11731  1DC5                     u4875:	
 11732  1DC5  35A8               	lslf	___lldiv@quotient,f
 11733  1DC6  0DA9               	rlf	___lldiv@quotient+1,f
 11734  1DC7  0DAA               	rlf	___lldiv@quotient+2,f
 11735  1DC8  0DAB               	rlf	___lldiv@quotient+3,f
 11736  1DC9  0B89               	decfsz	9,f
 11737  1DCA  2DC5               	goto	u4875
 11738  1DCB  0823               	movf	___lldiv@divisor+3,w
 11739  1DCC  0227               	subwf	___lldiv@dividend+3,w
 11740  1DCD  1D03               	skipz
 11741  1DCE  2DD9               	goto	u4885
 11742  1DCF  0822               	movf	___lldiv@divisor+2,w
 11743  1DD0  0226               	subwf	___lldiv@dividend+2,w
 11744  1DD1  1D03               	skipz
 11745  1DD2  2DD9               	goto	u4885
 11746  1DD3  0821               	movf	___lldiv@divisor+1,w
 11747  1DD4  0225               	subwf	___lldiv@dividend+1,w
 11748  1DD5  1D03               	skipz
 11749  1DD6  2DD9               	goto	u4885
 11750  1DD7  0820               	movf	___lldiv@divisor,w
 11751  1DD8  0224               	subwf	___lldiv@dividend,w
 11752  1DD9                     u4885:	
 11753  1DD9  1C03               	skipc
 11754  1DDA  2DE4               	goto	l5373
 11755  1DDB  0820               	movf	___lldiv@divisor,w
 11756  1DDC  02A4               	subwf	___lldiv@dividend,f
 11757  1DDD  0821               	movf	___lldiv@divisor+1,w
 11758  1DDE  3BA5               	subwfb	___lldiv@dividend+1,f
 11759  1DDF  0822               	movf	___lldiv@divisor+2,w
 11760  1DE0  3BA6               	subwfb	___lldiv@dividend+2,f
 11761  1DE1  0823               	movf	___lldiv@divisor+3,w
 11762  1DE2  3BA7               	subwfb	___lldiv@dividend+3,f
 11763  1DE3  1428               	bsf	___lldiv@quotient,0
 11764  1DE4                     l5373:	
 11765  1DE4  3001               	movlw	1
 11766  1DE5                     u4895:	
 11767  1DE5  36A3               	lsrf	___lldiv@divisor+3,f
 11768  1DE6  0CA2               	rrf	___lldiv@divisor+2,f
 11769  1DE7  0CA1               	rrf	___lldiv@divisor+1,f
 11770  1DE8  0CA0               	rrf	___lldiv@divisor,f
 11771  1DE9  0B89               	decfsz	9,f
 11772  1DEA  2DE5               	goto	u4895
 11773  1DEB  3001               	movlw	1
 11774  1DEC  02AC               	subwf	___lldiv@counter,f
 11775  1DED  1D03               	btfss	3,2
 11776  1DEE  2DC4               	goto	l5365
 11777  1DEF                     l5377:	
 11778  1DEF  082B               	movf	___lldiv@quotient+3,w
 11779  1DF0  00A3               	movwf	?___lldiv+3
 11780  1DF1  082A               	movf	___lldiv@quotient+2,w
 11781  1DF2  00A2               	movwf	?___lldiv+2
 11782  1DF3  0829               	movf	___lldiv@quotient+1,w
 11783  1DF4  00A1               	movwf	?___lldiv+1
 11784  1DF5  0828               	movf	___lldiv@quotient,w
 11785  1DF6  00A0               	movwf	?___lldiv
 11786  1DF7  0008               	return
 11787  1DF8                     __end_of___lldiv:	
 11788                           
 11789                           	psect	text35
 11790  0B24                     __ptext35:	
 11791 ;; *************** function _calc_expect_vout_adc_value *****************
 11792 ;; Defined at:
 11793 ;;		line 438 in file "src/api/sample.c"
 11794 ;; Parameters:    Size  Location     Type
 11795 ;;  x               2   22[BANK0 ] unsigned int 
 11796 ;; Auto vars:     Size  Location     Type
 11797 ;;  t32             4   54[BANK0 ] long 
 11798 ;;  x0              4   50[BANK0 ] long 
 11799 ;;  y0              4   46[BANK0 ] long 
 11800 ;;  x1              4   42[BANK0 ] long 
 11801 ;;  y1              4   38[BANK0 ] long 
 11802 ;;  i               2   58[BANK0 ] unsigned int 
 11803 ;; Return value:  Size  Location     Type
 11804 ;;                  2   22[BANK0 ] unsigned int 
 11805 ;; Registers used:
 11806 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11807 ;; Tracked objects:
 11808 ;;		On entry : 0/0
 11809 ;;		On exit  : 0/0
 11810 ;;		Unchanged: 0/0
 11811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11812 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11813 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11814 ;;      Temps:          0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11815 ;;      Totals:         0      38       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11816 ;;Total ram usage:       38 bytes
 11817 ;; Hardware stack levels used:    1
 11818 ;; Hardware stack levels required when called:    2
 11819 ;; This function calls:
 11820 ;;		___aldiv
 11821 ;;		___lmul
 11822 ;; This function is called by:
 11823 ;;		_main
 11824 ;; This function uses a non-reentrant model
 11825 ;;
 11826                           
 11827                           
 11828                           ;psect for function _calc_expect_vout_adc_value
 11829  0B24                     _calc_expect_vout_adc_value:	
 11830                           
 11831                           ;sample.c: 441: uint16_t i;
 11832                           ;sample.c: 442: int32_t y0;
 11833                           ;sample.c: 443: int32_t y1;
 11834                           ;sample.c: 444: int32_t x0;
 11835                           ;sample.c: 445: int32_t x1;
 11836                           ;sample.c: 446: int32_t t32;
 11837                           ;sample.c: 449: for (i = 0; i < 30-1; i++) {
 11838                           
 11839                           ;incstack = 0
 11840                           ; Regs used in _calc_expect_vout_adc_value: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 11841  0B24  0020               	movlb	0	; select bank0
 11842  0B25  01DA               	clrf	calc_expect_vout_adc_value@i
 11843  0B26  01DB               	clrf	calc_expect_vout_adc_value@i+1
 11844  0B27  3000               	movlw	0
 11845  0B28  025B               	subwf	calc_expect_vout_adc_value@i+1,w
 11846  0B29  301D               	movlw	29
 11847  0B2A  1903               	skipnz
 11848  0B2B  025A               	subwf	calc_expect_vout_adc_value@i,w
 11849  0B2C  1803               	btfsc	3,0
 11850  0B2D  2B91               	goto	l5605
 11851  0B2E                     l5597:	
 11852                           
 11853                           ;sample.c: 450: if(sysData.calibRsAdc[i]<sysData.calibRsAdc[i+1]){
 11854  0B2E  085B               	movf	calc_expect_vout_adc_value@i+1,w
 11855  0B2F  00B9               	movwf	??_calc_expect_vout_adc_value+1
 11856  0B30  085A               	movf	calc_expect_vout_adc_value@i,w
 11857  0B31  00B8               	movwf	??_calc_expect_vout_adc_value
 11858  0B32  35B8               	lslf	??_calc_expect_vout_adc_value,f
 11859  0B33  0DB9               	rlf	??_calc_expect_vout_adc_value+1,f
 11860  0B34  0838               	movf	??_calc_expect_vout_adc_value,w
 11861  0B35  3E02               	addlw	2
 11862  0B36  00BA               	movwf	??_calc_expect_vout_adc_value+2
 11863  0B37  3000               	movlw	0
 11864  0B38  3D39               	addwfc	??_calc_expect_vout_adc_value+1,w
 11865  0B39  00BB               	movwf	??_calc_expect_vout_adc_value+3
 11866  0B3A  3066               	movlw	102
 11867  0B3B  00BC               	movwf	??_calc_expect_vout_adc_value+4
 11868  0B3C  3023               	movlw	35
 11869  0B3D  00BD               	movwf	??_calc_expect_vout_adc_value+5
 11870  0B3E  083A               	movf	??_calc_expect_vout_adc_value+2,w
 11871  0B3F  073C               	addwf	??_calc_expect_vout_adc_value+4,w
 11872  0B40  0086               	movwf	6
 11873  0B41  083B               	movf	??_calc_expect_vout_adc_value+3,w
 11874  0B42  3D3D               	addwfc	??_calc_expect_vout_adc_value+5,w
 11875  0B43  0087               	movwf	7
 11876  0B44  3F40               	moviw [0]fsr1
 11877  0B45  00BE               	movwf	??_calc_expect_vout_adc_value+6
 11878  0B46  3F41               	moviw [1]fsr1
 11879  0B47  00BF               	movwf	??_calc_expect_vout_adc_value+7
 11880  0B48  085B               	movf	calc_expect_vout_adc_value@i+1,w
 11881  0B49  00C1               	movwf	??_calc_expect_vout_adc_value+9
 11882  0B4A  085A               	movf	calc_expect_vout_adc_value@i,w
 11883  0B4B  00C0               	movwf	??_calc_expect_vout_adc_value+8
 11884  0B4C  35C0               	lslf	??_calc_expect_vout_adc_value+8,f
 11885  0B4D  0DC1               	rlf	??_calc_expect_vout_adc_value+9,f
 11886  0B4E  3066               	movlw	102
 11887  0B4F  00C2               	movwf	??_calc_expect_vout_adc_value+10
 11888  0B50  3023               	movlw	35
 11889  0B51  00C3               	movwf	??_calc_expect_vout_adc_value+11
 11890  0B52  0840               	movf	??_calc_expect_vout_adc_value+8,w
 11891  0B53  0742               	addwf	??_calc_expect_vout_adc_value+10,w
 11892  0B54  0086               	movwf	6
 11893  0B55  0841               	movf	??_calc_expect_vout_adc_value+9,w
 11894  0B56  3D43               	addwfc	??_calc_expect_vout_adc_value+11,w
 11895  0B57  0087               	movwf	7
 11896  0B58  3F40               	moviw [0]fsr1
 11897  0B59  00C4               	movwf	??_calc_expect_vout_adc_value+12
 11898  0B5A  3F41               	moviw [1]fsr1
 11899  0B5B  00C5               	movwf	??_calc_expect_vout_adc_value+13
 11900  0B5C  083F               	movf	??_calc_expect_vout_adc_value+7,w
 11901  0B5D  0245               	subwf	??_calc_expect_vout_adc_value+13,w
 11902  0B5E  1D03               	skipz
 11903  0B5F  2B62               	goto	u5175
 11904  0B60  083E               	movf	??_calc_expect_vout_adc_value+6,w
 11905  0B61  0244               	subwf	??_calc_expect_vout_adc_value+12,w
 11906  0B62                     u5175:	
 11907  0B62  1803               	skipnc
 11908  0B63  2B91               	goto	l5605
 11909                           
 11910                           ;sample.c: 451: if (x <= sysData.calibRsAdc[i+1])break;
 11911  0B64  085B               	movf	calc_expect_vout_adc_value@i+1,w
 11912  0B65  00B9               	movwf	??_calc_expect_vout_adc_value+1
 11913  0B66  085A               	movf	calc_expect_vout_adc_value@i,w
 11914  0B67  00B8               	movwf	??_calc_expect_vout_adc_value
 11915  0B68  35B8               	lslf	??_calc_expect_vout_adc_value,f
 11916  0B69  0DB9               	rlf	??_calc_expect_vout_adc_value+1,f
 11917  0B6A  0838               	movf	??_calc_expect_vout_adc_value,w
 11918  0B6B  3E02               	addlw	2
 11919  0B6C  00BA               	movwf	??_calc_expect_vout_adc_value+2
 11920  0B6D  3000               	movlw	0
 11921  0B6E  3D39               	addwfc	??_calc_expect_vout_adc_value+1,w
 11922  0B6F  00BB               	movwf	??_calc_expect_vout_adc_value+3
 11923  0B70  3066               	movlw	102
 11924  0B71  00BC               	movwf	??_calc_expect_vout_adc_value+4
 11925  0B72  3023               	movlw	35
 11926  0B73  00BD               	movwf	??_calc_expect_vout_adc_value+5
 11927  0B74  083A               	movf	??_calc_expect_vout_adc_value+2,w
 11928  0B75  073C               	addwf	??_calc_expect_vout_adc_value+4,w
 11929  0B76  0086               	movwf	6
 11930  0B77  083B               	movf	??_calc_expect_vout_adc_value+3,w
 11931  0B78  3D3D               	addwfc	??_calc_expect_vout_adc_value+5,w
 11932  0B79  0087               	movwf	7
 11933  0B7A  3F40               	moviw [0]fsr1
 11934  0B7B  00BE               	movwf	??_calc_expect_vout_adc_value+6
 11935  0B7C  3F41               	moviw [1]fsr1
 11936  0B7D  00BF               	movwf	??_calc_expect_vout_adc_value+7
 11937  0B7E  0837               	movf	calc_expect_vout_adc_value@x+1,w
 11938  0B7F  023F               	subwf	??_calc_expect_vout_adc_value+7,w
 11939  0B80  1D03               	skipz
 11940  0B81  2B84               	goto	u5185
 11941  0B82  0836               	movf	calc_expect_vout_adc_value@x,w
 11942  0B83  023E               	subwf	??_calc_expect_vout_adc_value+6,w
 11943  0B84                     u5185:	
 11944  0B84  1803               	btfsc	3,0
 11945  0B85  2B91               	goto	l5605
 11946                           
 11947                           ;sample.c: 454: break;
 11948                           
 11949                           ;sample.c: 452: }else{
 11950  0B86  3001               	movlw	1
 11951  0B87  07DA               	addwf	calc_expect_vout_adc_value@i,f
 11952  0B88  3000               	movlw	0
 11953  0B89  3DDB               	addwfc	calc_expect_vout_adc_value@i+1,f
 11954  0B8A  3000               	movlw	0
 11955  0B8B  025B               	subwf	calc_expect_vout_adc_value@i+1,w
 11956  0B8C  301D               	movlw	29
 11957  0B8D  1903               	skipnz
 11958  0B8E  025A               	subwf	calc_expect_vout_adc_value@i,w
 11959  0B8F  1C03               	skipc
 11960  0B90  2B2E               	goto	l5597
 11961  0B91                     l5605:	
 11962                           
 11963                           ;sample.c: 455: }
 11964                           ;sample.c: 456: }
 11965                           ;sample.c: 458: if (i > 30-2)i=30-2;
 11966  0B91  3000               	movlw	0
 11967  0B92  025B               	subwf	calc_expect_vout_adc_value@i+1,w
 11968  0B93  301D               	movlw	29
 11969  0B94  1903               	skipnz
 11970  0B95  025A               	subwf	calc_expect_vout_adc_value@i,w
 11971  0B96  1C03               	skipc
 11972  0B97  2B9C               	goto	l5609
 11973  0B98  301C               	movlw	28
 11974  0B99  00DA               	movwf	calc_expect_vout_adc_value@i
 11975  0B9A  3000               	movlw	0
 11976  0B9B  00DB               	movwf	calc_expect_vout_adc_value@i+1
 11977  0B9C                     l5609:	
 11978                           
 11979                           ;sample.c: 459: y1=sysData.calibVoMV[i+1];
 11980  0B9C  085B               	movf	calc_expect_vout_adc_value@i+1,w
 11981  0B9D  00B9               	movwf	??_calc_expect_vout_adc_value+1
 11982  0B9E  085A               	movf	calc_expect_vout_adc_value@i,w
 11983  0B9F  00B8               	movwf	??_calc_expect_vout_adc_value
 11984  0BA0  35B8               	lslf	??_calc_expect_vout_adc_value,f
 11985  0BA1  0DB9               	rlf	??_calc_expect_vout_adc_value+1,f
 11986  0BA2  0838               	movf	??_calc_expect_vout_adc_value,w
 11987  0BA3  3E02               	addlw	2
 11988  0BA4  00BA               	movwf	??_calc_expect_vout_adc_value+2
 11989  0BA5  3000               	movlw	0
 11990  0BA6  3D39               	addwfc	??_calc_expect_vout_adc_value+1,w
 11991  0BA7  00BB               	movwf	??_calc_expect_vout_adc_value+3
 11992  0BA8  30A2               	movlw	162
 11993  0BA9  00BC               	movwf	??_calc_expect_vout_adc_value+4
 11994  0BAA  3023               	movlw	35
 11995  0BAB  00BD               	movwf	??_calc_expect_vout_adc_value+5
 11996  0BAC  083A               	movf	??_calc_expect_vout_adc_value+2,w
 11997  0BAD  073C               	addwf	??_calc_expect_vout_adc_value+4,w
 11998  0BAE  0086               	movwf	6
 11999  0BAF  083B               	movf	??_calc_expect_vout_adc_value+3,w
 12000  0BB0  3D3D               	addwfc	??_calc_expect_vout_adc_value+5,w
 12001  0BB1  0087               	movwf	7
 12002  0BB2  3F40               	moviw [0]fsr1
 12003  0BB3  00BE               	movwf	??_calc_expect_vout_adc_value+6
 12004  0BB4  3F41               	moviw [1]fsr1
 12005  0BB5  00BF               	movwf	??_calc_expect_vout_adc_value+7
 12006  0BB6  083E               	movf	??_calc_expect_vout_adc_value+6,w
 12007  0BB7  00C6               	movwf	calc_expect_vout_adc_value@y1
 12008  0BB8  083F               	movf	??_calc_expect_vout_adc_value+7,w
 12009  0BB9  00C7               	movwf	calc_expect_vout_adc_value@y1+1
 12010  0BBA  01C8               	clrf	calc_expect_vout_adc_value@y1+2
 12011  0BBB  01C9               	clrf	calc_expect_vout_adc_value@y1+3
 12012                           
 12013                           ;sample.c: 460: y0=sysData.calibVoMV[i];
 12014  0BBC  085B               	movf	calc_expect_vout_adc_value@i+1,w
 12015  0BBD  00B9               	movwf	??_calc_expect_vout_adc_value+1
 12016  0BBE  085A               	movf	calc_expect_vout_adc_value@i,w
 12017  0BBF  00B8               	movwf	??_calc_expect_vout_adc_value
 12018  0BC0  35B8               	lslf	??_calc_expect_vout_adc_value,f
 12019  0BC1  0DB9               	rlf	??_calc_expect_vout_adc_value+1,f
 12020  0BC2  30A2               	movlw	162
 12021  0BC3  00BA               	movwf	??_calc_expect_vout_adc_value+2
 12022  0BC4  3023               	movlw	35
 12023  0BC5  00BB               	movwf	??_calc_expect_vout_adc_value+3
 12024  0BC6  0838               	movf	??_calc_expect_vout_adc_value,w
 12025  0BC7  073A               	addwf	??_calc_expect_vout_adc_value+2,w
 12026  0BC8  0086               	movwf	6
 12027  0BC9  0839               	movf	??_calc_expect_vout_adc_value+1,w
 12028  0BCA  3D3B               	addwfc	??_calc_expect_vout_adc_value+3,w
 12029  0BCB  0087               	movwf	7
 12030  0BCC  3F40               	moviw [0]fsr1
 12031  0BCD  00BC               	movwf	??_calc_expect_vout_adc_value+4
 12032  0BCE  3F41               	moviw [1]fsr1
 12033  0BCF  00BD               	movwf	??_calc_expect_vout_adc_value+5
 12034  0BD0  083C               	movf	??_calc_expect_vout_adc_value+4,w
 12035  0BD1  00CE               	movwf	calc_expect_vout_adc_value@y0
 12036  0BD2  083D               	movf	??_calc_expect_vout_adc_value+5,w
 12037  0BD3  00CF               	movwf	calc_expect_vout_adc_value@y0+1
 12038  0BD4  01D0               	clrf	calc_expect_vout_adc_value@y0+2
 12039  0BD5  01D1               	clrf	calc_expect_vout_adc_value@y0+3
 12040                           
 12041                           ;sample.c: 463: x1=sysData.calibRsAdc[i+1];
 12042  0BD6  085B               	movf	calc_expect_vout_adc_value@i+1,w
 12043  0BD7  00B9               	movwf	??_calc_expect_vout_adc_value+1
 12044  0BD8  085A               	movf	calc_expect_vout_adc_value@i,w
 12045  0BD9  00B8               	movwf	??_calc_expect_vout_adc_value
 12046  0BDA  35B8               	lslf	??_calc_expect_vout_adc_value,f
 12047  0BDB  0DB9               	rlf	??_calc_expect_vout_adc_value+1,f
 12048  0BDC  0838               	movf	??_calc_expect_vout_adc_value,w
 12049  0BDD  3E02               	addlw	2
 12050  0BDE  00BA               	movwf	??_calc_expect_vout_adc_value+2
 12051  0BDF  3000               	movlw	0
 12052  0BE0  3D39               	addwfc	??_calc_expect_vout_adc_value+1,w
 12053  0BE1  00BB               	movwf	??_calc_expect_vout_adc_value+3
 12054  0BE2  3066               	movlw	102
 12055  0BE3  00BC               	movwf	??_calc_expect_vout_adc_value+4
 12056  0BE4  3023               	movlw	35
 12057  0BE5  00BD               	movwf	??_calc_expect_vout_adc_value+5
 12058  0BE6  083A               	movf	??_calc_expect_vout_adc_value+2,w
 12059  0BE7  073C               	addwf	??_calc_expect_vout_adc_value+4,w
 12060  0BE8  0086               	movwf	6
 12061  0BE9  083B               	movf	??_calc_expect_vout_adc_value+3,w
 12062  0BEA  3D3D               	addwfc	??_calc_expect_vout_adc_value+5,w
 12063  0BEB  0087               	movwf	7
 12064  0BEC  3F40               	moviw [0]fsr1
 12065  0BED  00BE               	movwf	??_calc_expect_vout_adc_value+6
 12066  0BEE  3F41               	moviw [1]fsr1
 12067  0BEF  00BF               	movwf	??_calc_expect_vout_adc_value+7
 12068  0BF0  083E               	movf	??_calc_expect_vout_adc_value+6,w
 12069  0BF1  00CA               	movwf	calc_expect_vout_adc_value@x1
 12070  0BF2  083F               	movf	??_calc_expect_vout_adc_value+7,w
 12071  0BF3  00CB               	movwf	calc_expect_vout_adc_value@x1+1
 12072  0BF4  01CC               	clrf	calc_expect_vout_adc_value@x1+2
 12073  0BF5  01CD               	clrf	calc_expect_vout_adc_value@x1+3
 12074                           
 12075                           ;sample.c: 464: x0=sysData.calibRsAdc[i];
 12076  0BF6  085B               	movf	calc_expect_vout_adc_value@i+1,w
 12077  0BF7  00B9               	movwf	??_calc_expect_vout_adc_value+1
 12078  0BF8  085A               	movf	calc_expect_vout_adc_value@i,w
 12079  0BF9  00B8               	movwf	??_calc_expect_vout_adc_value
 12080  0BFA  35B8               	lslf	??_calc_expect_vout_adc_value,f
 12081  0BFB  0DB9               	rlf	??_calc_expect_vout_adc_value+1,f
 12082  0BFC  3066               	movlw	102
 12083  0BFD  00BA               	movwf	??_calc_expect_vout_adc_value+2
 12084  0BFE  3023               	movlw	35
 12085  0BFF  00BB               	movwf	??_calc_expect_vout_adc_value+3
 12086  0C00  0838               	movf	??_calc_expect_vout_adc_value,w
 12087  0C01  073A               	addwf	??_calc_expect_vout_adc_value+2,w
 12088  0C02  0086               	movwf	6
 12089  0C03  0839               	movf	??_calc_expect_vout_adc_value+1,w
 12090  0C04  3D3B               	addwfc	??_calc_expect_vout_adc_value+3,w
 12091  0C05  0087               	movwf	7
 12092  0C06  3F40               	moviw [0]fsr1
 12093  0C07  00BC               	movwf	??_calc_expect_vout_adc_value+4
 12094  0C08  3F41               	moviw [1]fsr1
 12095  0C09  00BD               	movwf	??_calc_expect_vout_adc_value+5
 12096  0C0A  083C               	movf	??_calc_expect_vout_adc_value+4,w
 12097  0C0B  00D2               	movwf	calc_expect_vout_adc_value@x0
 12098  0C0C  083D               	movf	??_calc_expect_vout_adc_value+5,w
 12099  0C0D  00D3               	movwf	calc_expect_vout_adc_value@x0+1
 12100  0C0E  01D4               	clrf	calc_expect_vout_adc_value@x0+2
 12101  0C0F  01D5               	clrf	calc_expect_vout_adc_value@x0+3
 12102                           
 12103                           ;sample.c: 466: if(x<=x0 && i==0)return (uint16_t)y0;
 12104  0C10  0836               	movf	calc_expect_vout_adc_value@x,w
 12105  0C11  00B8               	movwf	??_calc_expect_vout_adc_value
 12106  0C12  0837               	movf	calc_expect_vout_adc_value@x+1,w
 12107  0C13  00B9               	movwf	??_calc_expect_vout_adc_value+1
 12108  0C14  01BA               	clrf	??_calc_expect_vout_adc_value+2
 12109  0C15  01BB               	clrf	??_calc_expect_vout_adc_value+3
 12110  0C16  0855               	movf	calc_expect_vout_adc_value@x0+3,w
 12111  0C17  3A80               	xorlw	128
 12112  0C18  00BC               	movwf	??_calc_expect_vout_adc_value+4
 12113  0C19  083B               	movf	??_calc_expect_vout_adc_value+3,w
 12114  0C1A  3A80               	xorlw	128
 12115  0C1B  023C               	subwf	??_calc_expect_vout_adc_value+4,w
 12116  0C1C  1D03               	skipz
 12117  0C1D  2C28               	goto	u5213
 12118  0C1E  083A               	movf	??_calc_expect_vout_adc_value+2,w
 12119  0C1F  0254               	subwf	calc_expect_vout_adc_value@x0+2,w
 12120  0C20  1D03               	skipz
 12121  0C21  2C28               	goto	u5213
 12122  0C22  0839               	movf	??_calc_expect_vout_adc_value+1,w
 12123  0C23  0253               	subwf	calc_expect_vout_adc_value@x0+1,w
 12124  0C24  1D03               	skipz
 12125  0C25  2C28               	goto	u5213
 12126  0C26  0838               	movf	??_calc_expect_vout_adc_value,w
 12127  0C27  0252               	subwf	calc_expect_vout_adc_value@x0,w
 12128  0C28                     u5213:	
 12129  0C28  1C03               	skipc
 12130  0C29  2C33               	goto	l5623
 12131  0C2A  085A               	movf	calc_expect_vout_adc_value@i,w
 12132  0C2B  045B               	iorwf	calc_expect_vout_adc_value@i+1,w
 12133  0C2C  1D03               	btfss	3,2
 12134  0C2D  2C33               	goto	l5623
 12135  0C2E  084F               	movf	calc_expect_vout_adc_value@y0+1,w
 12136  0C2F  00B7               	movwf	?_calc_expect_vout_adc_value+1
 12137  0C30  084E               	movf	calc_expect_vout_adc_value@y0,w
 12138  0C31  00B6               	movwf	?_calc_expect_vout_adc_value
 12139  0C32  0008               	return
 12140  0C33                     l5623:	
 12141                           
 12142                           ;sample.c: 467: if(x1<=x0)return (uint16_t)y0;
 12143  0C33  0855               	movf	calc_expect_vout_adc_value@x0+3,w
 12144  0C34  3A80               	xorlw	128
 12145  0C35  00B8               	movwf	??_calc_expect_vout_adc_value
 12146  0C36  084D               	movf	calc_expect_vout_adc_value@x1+3,w
 12147  0C37  3A80               	xorlw	128
 12148  0C38  0238               	subwf	??_calc_expect_vout_adc_value,w
 12149  0C39  1D03               	skipz
 12150  0C3A  2C45               	goto	u5233
 12151  0C3B  084C               	movf	calc_expect_vout_adc_value@x1+2,w
 12152  0C3C  0254               	subwf	calc_expect_vout_adc_value@x0+2,w
 12153  0C3D  1D03               	skipz
 12154  0C3E  2C45               	goto	u5233
 12155  0C3F  084B               	movf	calc_expect_vout_adc_value@x1+1,w
 12156  0C40  0253               	subwf	calc_expect_vout_adc_value@x0+1,w
 12157  0C41  1D03               	skipz
 12158  0C42  2C45               	goto	u5233
 12159  0C43  084A               	movf	calc_expect_vout_adc_value@x1,w
 12160  0C44  0252               	subwf	calc_expect_vout_adc_value@x0,w
 12161  0C45                     u5233:	
 12162  0C45  1C03               	skipc
 12163  0C46  2C4C               	goto	l5629
 12164  0C47  084F               	movf	calc_expect_vout_adc_value@y0+1,w
 12165  0C48  00B7               	movwf	?_calc_expect_vout_adc_value+1
 12166  0C49  084E               	movf	calc_expect_vout_adc_value@y0,w
 12167  0C4A  00B6               	movwf	?_calc_expect_vout_adc_value
 12168  0C4B  0008               	return
 12169  0C4C                     l5629:	
 12170                           
 12171                           ;sample.c: 470: t32=(x-x0);
 12172  0C4C  0952               	comf	calc_expect_vout_adc_value@x0,w
 12173  0C4D  00B8               	movwf	??_calc_expect_vout_adc_value
 12174  0C4E  0953               	comf	calc_expect_vout_adc_value@x0+1,w
 12175  0C4F  00B9               	movwf	??_calc_expect_vout_adc_value+1
 12176  0C50  0954               	comf	calc_expect_vout_adc_value@x0+2,w
 12177  0C51  00BA               	movwf	??_calc_expect_vout_adc_value+2
 12178  0C52  0955               	comf	calc_expect_vout_adc_value@x0+3,w
 12179  0C53  00BB               	movwf	??_calc_expect_vout_adc_value+3
 12180  0C54  0AB8               	incf	??_calc_expect_vout_adc_value,f
 12181  0C55  1903               	skipnz
 12182  0C56  0AB9               	incf	??_calc_expect_vout_adc_value+1,f
 12183  0C57  1903               	skipnz
 12184  0C58  0ABA               	incf	??_calc_expect_vout_adc_value+2,f
 12185  0C59  1903               	skipnz
 12186  0C5A  0ABB               	incf	??_calc_expect_vout_adc_value+3,f
 12187  0C5B  0836               	movf	calc_expect_vout_adc_value@x,w
 12188  0C5C  00BC               	movwf	??_calc_expect_vout_adc_value+4
 12189  0C5D  0837               	movf	calc_expect_vout_adc_value@x+1,w
 12190  0C5E  00BD               	movwf	??_calc_expect_vout_adc_value+5
 12191  0C5F  01BE               	clrf	??_calc_expect_vout_adc_value+6
 12192  0C60  01BF               	clrf	??_calc_expect_vout_adc_value+7
 12193  0C61  083C               	movf	??_calc_expect_vout_adc_value+4,w
 12194  0C62  07B8               	addwf	??_calc_expect_vout_adc_value,f
 12195  0C63  083D               	movf	??_calc_expect_vout_adc_value+5,w
 12196  0C64  3DB9               	addwfc	??_calc_expect_vout_adc_value+1,f
 12197  0C65  083E               	movf	??_calc_expect_vout_adc_value+6,w
 12198  0C66  3DBA               	addwfc	??_calc_expect_vout_adc_value+2,f
 12199  0C67  083F               	movf	??_calc_expect_vout_adc_value+7,w
 12200  0C68  3DBB               	addwfc	??_calc_expect_vout_adc_value+3,f
 12201  0C69  083B               	movf	??_calc_expect_vout_adc_value+3,w
 12202  0C6A  00D9               	movwf	calc_expect_vout_adc_value@t32+3
 12203  0C6B  083A               	movf	??_calc_expect_vout_adc_value+2,w
 12204  0C6C  00D8               	movwf	calc_expect_vout_adc_value@t32+2
 12205  0C6D  0839               	movf	??_calc_expect_vout_adc_value+1,w
 12206  0C6E  00D7               	movwf	calc_expect_vout_adc_value@t32+1
 12207  0C6F  0838               	movf	??_calc_expect_vout_adc_value,w
 12208  0C70  00D6               	movwf	calc_expect_vout_adc_value@t32
 12209                           
 12210                           ;sample.c: 471: t32=t32*(y1-y0);
 12211  0C71  0846               	movf	calc_expect_vout_adc_value@y1,w
 12212  0C72  00B8               	movwf	??_calc_expect_vout_adc_value
 12213  0C73  0847               	movf	calc_expect_vout_adc_value@y1+1,w
 12214  0C74  00B9               	movwf	??_calc_expect_vout_adc_value+1
 12215  0C75  0848               	movf	calc_expect_vout_adc_value@y1+2,w
 12216  0C76  00BA               	movwf	??_calc_expect_vout_adc_value+2
 12217  0C77  0849               	movf	calc_expect_vout_adc_value@y1+3,w
 12218  0C78  00BB               	movwf	??_calc_expect_vout_adc_value+3
 12219  0C79  094E               	comf	calc_expect_vout_adc_value@y0,w
 12220  0C7A  00BC               	movwf	??_calc_expect_vout_adc_value+4
 12221  0C7B  094F               	comf	calc_expect_vout_adc_value@y0+1,w
 12222  0C7C  00BD               	movwf	??_calc_expect_vout_adc_value+5
 12223  0C7D  0950               	comf	calc_expect_vout_adc_value@y0+2,w
 12224  0C7E  00BE               	movwf	??_calc_expect_vout_adc_value+6
 12225  0C7F  0951               	comf	calc_expect_vout_adc_value@y0+3,w
 12226  0C80  00BF               	movwf	??_calc_expect_vout_adc_value+7
 12227  0C81  0ABC               	incf	??_calc_expect_vout_adc_value+4,f
 12228  0C82  1903               	skipnz
 12229  0C83  0ABD               	incf	??_calc_expect_vout_adc_value+5,f
 12230  0C84  1903               	skipnz
 12231  0C85  0ABE               	incf	??_calc_expect_vout_adc_value+6,f
 12232  0C86  1903               	skipnz
 12233  0C87  0ABF               	incf	??_calc_expect_vout_adc_value+7,f
 12234  0C88  083C               	movf	??_calc_expect_vout_adc_value+4,w
 12235  0C89  07B8               	addwf	??_calc_expect_vout_adc_value,f
 12236  0C8A  083D               	movf	??_calc_expect_vout_adc_value+5,w
 12237  0C8B  3DB9               	addwfc	??_calc_expect_vout_adc_value+1,f
 12238  0C8C  083E               	movf	??_calc_expect_vout_adc_value+6,w
 12239  0C8D  3DBA               	addwfc	??_calc_expect_vout_adc_value+2,f
 12240  0C8E  083F               	movf	??_calc_expect_vout_adc_value+7,w
 12241  0C8F  3DBB               	addwfc	??_calc_expect_vout_adc_value+3,f
 12242  0C90  083B               	movf	??_calc_expect_vout_adc_value+3,w
 12243  0C91  00A3               	movwf	___lmul@multiplier+3
 12244  0C92  083A               	movf	??_calc_expect_vout_adc_value+2,w
 12245  0C93  00A2               	movwf	___lmul@multiplier+2
 12246  0C94  0839               	movf	??_calc_expect_vout_adc_value+1,w
 12247  0C95  00A1               	movwf	___lmul@multiplier+1
 12248  0C96  0838               	movf	??_calc_expect_vout_adc_value,w
 12249  0C97  00A0               	movwf	___lmul@multiplier
 12250  0C98  0859               	movf	calc_expect_vout_adc_value@t32+3,w
 12251  0C99  00A7               	movwf	___lmul@multiplicand+3
 12252  0C9A  0858               	movf	calc_expect_vout_adc_value@t32+2,w
 12253  0C9B  00A6               	movwf	___lmul@multiplicand+2
 12254  0C9C  0857               	movf	calc_expect_vout_adc_value@t32+1,w
 12255  0C9D  00A5               	movwf	___lmul@multiplicand+1
 12256  0C9E  0856               	movf	calc_expect_vout_adc_value@t32,w
 12257  0C9F  00A4               	movwf	___lmul@multiplicand
 12258  0CA0  319B  23D3  318B   	fcall	___lmul
 12259  0CA3  0020               	movlb	0	; select bank0
 12260  0CA4  0823               	movf	?___lmul+3,w
 12261  0CA5  00D9               	movwf	calc_expect_vout_adc_value@t32+3
 12262  0CA6  0822               	movf	?___lmul+2,w
 12263  0CA7  00D8               	movwf	calc_expect_vout_adc_value@t32+2
 12264  0CA8  0821               	movf	?___lmul+1,w
 12265  0CA9  00D7               	movwf	calc_expect_vout_adc_value@t32+1
 12266  0CAA  0820               	movf	?___lmul,w
 12267  0CAB  00D6               	movwf	calc_expect_vout_adc_value@t32
 12268                           
 12269                           ;sample.c: 472: t32=t32/(x1-x0);
 12270  0CAC  084A               	movf	calc_expect_vout_adc_value@x1,w
 12271  0CAD  00B8               	movwf	??_calc_expect_vout_adc_value
 12272  0CAE  084B               	movf	calc_expect_vout_adc_value@x1+1,w
 12273  0CAF  00B9               	movwf	??_calc_expect_vout_adc_value+1
 12274  0CB0  084C               	movf	calc_expect_vout_adc_value@x1+2,w
 12275  0CB1  00BA               	movwf	??_calc_expect_vout_adc_value+2
 12276  0CB2  084D               	movf	calc_expect_vout_adc_value@x1+3,w
 12277  0CB3  00BB               	movwf	??_calc_expect_vout_adc_value+3
 12278  0CB4  0952               	comf	calc_expect_vout_adc_value@x0,w
 12279  0CB5  00BC               	movwf	??_calc_expect_vout_adc_value+4
 12280  0CB6  0953               	comf	calc_expect_vout_adc_value@x0+1,w
 12281  0CB7  00BD               	movwf	??_calc_expect_vout_adc_value+5
 12282  0CB8  0954               	comf	calc_expect_vout_adc_value@x0+2,w
 12283  0CB9  00BE               	movwf	??_calc_expect_vout_adc_value+6
 12284  0CBA  0955               	comf	calc_expect_vout_adc_value@x0+3,w
 12285  0CBB  00BF               	movwf	??_calc_expect_vout_adc_value+7
 12286  0CBC  0ABC               	incf	??_calc_expect_vout_adc_value+4,f
 12287  0CBD  1903               	skipnz
 12288  0CBE  0ABD               	incf	??_calc_expect_vout_adc_value+5,f
 12289  0CBF  1903               	skipnz
 12290  0CC0  0ABE               	incf	??_calc_expect_vout_adc_value+6,f
 12291  0CC1  1903               	skipnz
 12292  0CC2  0ABF               	incf	??_calc_expect_vout_adc_value+7,f
 12293  0CC3  083C               	movf	??_calc_expect_vout_adc_value+4,w
 12294  0CC4  07B8               	addwf	??_calc_expect_vout_adc_value,f
 12295  0CC5  083D               	movf	??_calc_expect_vout_adc_value+5,w
 12296  0CC6  3DB9               	addwfc	??_calc_expect_vout_adc_value+1,f
 12297  0CC7  083E               	movf	??_calc_expect_vout_adc_value+6,w
 12298  0CC8  3DBA               	addwfc	??_calc_expect_vout_adc_value+2,f
 12299  0CC9  083F               	movf	??_calc_expect_vout_adc_value+7,w
 12300  0CCA  3DBB               	addwfc	??_calc_expect_vout_adc_value+3,f
 12301  0CCB  083B               	movf	??_calc_expect_vout_adc_value+3,w
 12302  0CCC  00AB               	movwf	___aldiv@divisor+3
 12303  0CCD  083A               	movf	??_calc_expect_vout_adc_value+2,w
 12304  0CCE  00AA               	movwf	___aldiv@divisor+2
 12305  0CCF  0839               	movf	??_calc_expect_vout_adc_value+1,w
 12306  0CD0  00A9               	movwf	___aldiv@divisor+1
 12307  0CD1  0838               	movf	??_calc_expect_vout_adc_value,w
 12308  0CD2  00A8               	movwf	___aldiv@divisor
 12309  0CD3  0859               	movf	calc_expect_vout_adc_value@t32+3,w
 12310  0CD4  00AF               	movwf	___aldiv@dividend+3
 12311  0CD5  0858               	movf	calc_expect_vout_adc_value@t32+2,w
 12312  0CD6  00AE               	movwf	___aldiv@dividend+2
 12313  0CD7  0857               	movf	calc_expect_vout_adc_value@t32+1,w
 12314  0CD8  00AD               	movwf	___aldiv@dividend+1
 12315  0CD9  0856               	movf	calc_expect_vout_adc_value@t32,w
 12316  0CDA  00AC               	movwf	___aldiv@dividend
 12317  0CDB  3190  20A8  318B   	fcall	___aldiv
 12318  0CDE  0020               	movlb	0	; select bank0
 12319  0CDF  082B               	movf	?___aldiv+3,w
 12320  0CE0  00D9               	movwf	calc_expect_vout_adc_value@t32+3
 12321  0CE1  082A               	movf	?___aldiv+2,w
 12322  0CE2  00D8               	movwf	calc_expect_vout_adc_value@t32+2
 12323  0CE3  0829               	movf	?___aldiv+1,w
 12324  0CE4  00D7               	movwf	calc_expect_vout_adc_value@t32+1
 12325  0CE5  0828               	movf	?___aldiv,w
 12326  0CE6  00D6               	movwf	calc_expect_vout_adc_value@t32
 12327                           
 12328                           ;sample.c: 473: t32=t32+y0;
 12329  0CE7  0856               	movf	calc_expect_vout_adc_value@t32,w
 12330  0CE8  074E               	addwf	calc_expect_vout_adc_value@y0,w
 12331  0CE9  00B8               	movwf	??_calc_expect_vout_adc_value
 12332  0CEA  0857               	movf	calc_expect_vout_adc_value@t32+1,w
 12333  0CEB  3D4F               	addwfc	calc_expect_vout_adc_value@y0+1,w
 12334  0CEC  00B9               	movwf	??_calc_expect_vout_adc_value+1
 12335  0CED  0858               	movf	calc_expect_vout_adc_value@t32+2,w
 12336  0CEE  3D50               	addwfc	calc_expect_vout_adc_value@y0+2,w
 12337  0CEF  00BA               	movwf	??_calc_expect_vout_adc_value+2
 12338  0CF0  0859               	movf	calc_expect_vout_adc_value@t32+3,w
 12339  0CF1  3D51               	addwfc	calc_expect_vout_adc_value@y0+3,w
 12340  0CF2  00BB               	movwf	??_calc_expect_vout_adc_value+3
 12341  0CF3  083B               	movf	??_calc_expect_vout_adc_value+3,w
 12342  0CF4  00D9               	movwf	calc_expect_vout_adc_value@t32+3
 12343  0CF5  083A               	movf	??_calc_expect_vout_adc_value+2,w
 12344  0CF6  00D8               	movwf	calc_expect_vout_adc_value@t32+2
 12345  0CF7  0839               	movf	??_calc_expect_vout_adc_value+1,w
 12346  0CF8  00D7               	movwf	calc_expect_vout_adc_value@t32+1
 12347  0CF9  0838               	movf	??_calc_expect_vout_adc_value,w
 12348  0CFA  00D6               	movwf	calc_expect_vout_adc_value@t32
 12349                           
 12350                           ;sample.c: 474: if(t32<0)t32=0;
 12351  0CFB  1FD9               	btfss	calc_expect_vout_adc_value@t32+3,7
 12352  0CFC  2D05               	goto	l715
 12353  0CFD  3000               	movlw	0
 12354  0CFE  00D9               	movwf	calc_expect_vout_adc_value@t32+3
 12355  0CFF  3000               	movlw	0
 12356  0D00  00D8               	movwf	calc_expect_vout_adc_value@t32+2
 12357  0D01  3000               	movlw	0
 12358  0D02  00D7               	movwf	calc_expect_vout_adc_value@t32+1
 12359  0D03  3000               	movlw	0
 12360  0D04  00D6               	movwf	calc_expect_vout_adc_value@t32
 12361  0D05                     l715:	
 12362                           
 12363                           ;sample.c: 475: return (uint16_t)t32;
 12364  0D05  0857               	movf	calc_expect_vout_adc_value@t32+1,w
 12365  0D06  00B7               	movwf	?_calc_expect_vout_adc_value+1
 12366  0D07  0856               	movf	calc_expect_vout_adc_value@t32,w
 12367  0D08  00B6               	movwf	?_calc_expect_vout_adc_value
 12368  0D09  0008               	return
 12369  0D0A                     __end_of_calc_expect_vout_adc_value:	
 12370                           
 12371                           	psect	text36
 12372  1BD3                     __ptext36:	
 12373 ;; *************** function ___lmul *****************
 12374 ;; Defined at:
 12375 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul32.c"
 12376 ;; Parameters:    Size  Location     Type
 12377 ;;  multiplier      4    0[BANK0 ] unsigned long 
 12378 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 12379 ;; Auto vars:     Size  Location     Type
 12380 ;;  product         4    3[COMMON] unsigned long 
 12381 ;; Return value:  Size  Location     Type
 12382 ;;                  4    0[BANK0 ] unsigned long 
 12383 ;; Registers used:
 12384 ;;		wreg, status,2, status,0
 12385 ;; Tracked objects:
 12386 ;;		On entry : 0/0
 12387 ;;		On exit  : 0/0
 12388 ;;		Unchanged: 0/0
 12389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12390 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12391 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12393 ;;      Totals:         4       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12394 ;;Total ram usage:       12 bytes
 12395 ;; Hardware stack levels used:    1
 12396 ;; Hardware stack levels required when called:    1
 12397 ;; This function calls:
 12398 ;;		Nothing
 12399 ;; This function is called by:
 12400 ;;		_calc_temp_rs
 12401 ;;		_calc_temp_rc
 12402 ;;		_pid_pwm1_idrv_b_b
 12403 ;;		_pid_pwm1_idrv_run
 12404 ;;		_calc_expect_vout_adc_value
 12405 ;;		_cal_rs_simulate_power
 12406 ;;		_m_math_pow
 12407 ;; This function uses a non-reentrant model
 12408 ;;
 12409                           
 12410                           
 12411                           ;psect for function ___lmul
 12412  1BD3                     ___lmul:	
 12413                           
 12414                           ;incstack = 0
 12415                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 12416  1BD3  3000               	movlw	0
 12417  1BD4  00F6               	movwf	___lmul@product+3
 12418  1BD5  3000               	movlw	0
 12419  1BD6  00F5               	movwf	___lmul@product+2
 12420  1BD7  3000               	movlw	0
 12421  1BD8  00F4               	movwf	___lmul@product+1
 12422  1BD9  3000               	movlw	0
 12423  1BDA  00F3               	movwf	___lmul@product
 12424  1BDB                     l5305:	
 12425  1BDB  0020               	movlb	0	; select bank0
 12426  1BDC  1C20               	btfss	___lmul@multiplier,0
 12427  1BDD  2BE6               	goto	l5309
 12428  1BDE  0824               	movf	___lmul@multiplicand,w
 12429  1BDF  07F3               	addwf	___lmul@product,f
 12430  1BE0  0825               	movf	___lmul@multiplicand+1,w
 12431  1BE1  3DF4               	addwfc	___lmul@product+1,f
 12432  1BE2  0826               	movf	___lmul@multiplicand+2,w
 12433  1BE3  3DF5               	addwfc	___lmul@product+2,f
 12434  1BE4  0827               	movf	___lmul@multiplicand+3,w
 12435  1BE5  3DF6               	addwfc	___lmul@product+3,f
 12436  1BE6                     l5309:	
 12437  1BE6  3001               	movlw	1
 12438  1BE7                     u4715:	
 12439  1BE7  35A4               	lslf	___lmul@multiplicand,f
 12440  1BE8  0DA5               	rlf	___lmul@multiplicand+1,f
 12441  1BE9  0DA6               	rlf	___lmul@multiplicand+2,f
 12442  1BEA  0DA7               	rlf	___lmul@multiplicand+3,f
 12443  1BEB  0B89               	decfsz	9,f
 12444  1BEC  2BE7               	goto	u4715
 12445  1BED  3001               	movlw	1
 12446  1BEE                     u4725:	
 12447  1BEE  36A3               	lsrf	___lmul@multiplier+3,f
 12448  1BEF  0CA2               	rrf	___lmul@multiplier+2,f
 12449  1BF0  0CA1               	rrf	___lmul@multiplier+1,f
 12450  1BF1  0CA0               	rrf	___lmul@multiplier,f
 12451  1BF2  0B89               	decfsz	9,f
 12452  1BF3  2BEE               	goto	u4725
 12453  1BF4  0823               	movf	___lmul@multiplier+3,w
 12454  1BF5  0422               	iorwf	___lmul@multiplier+2,w
 12455  1BF6  0421               	iorwf	___lmul@multiplier+1,w
 12456  1BF7  0420               	iorwf	___lmul@multiplier,w
 12457  1BF8  1D03               	skipz
 12458  1BF9  2BDB               	goto	l5305
 12459  1BFA  0876               	movf	___lmul@product+3,w
 12460  1BFB  00A3               	movwf	?___lmul+3
 12461  1BFC  0875               	movf	___lmul@product+2,w
 12462  1BFD  00A2               	movwf	?___lmul+2
 12463  1BFE  0874               	movf	___lmul@product+1,w
 12464  1BFF  00A1               	movwf	?___lmul+1
 12465  1C00  0873               	movf	___lmul@product,w
 12466  1C01  00A0               	movwf	?___lmul
 12467  1C02  0008               	return
 12468  1C03                     __end_of___lmul:	
 12469                           
 12470                           	psect	text37
 12471  10A8                     __ptext37:	
 12472 ;; *************** function ___aldiv *****************
 12473 ;; Defined at:
 12474 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\aldiv.c"
 12475 ;; Parameters:    Size  Location     Type
 12476 ;;  divisor         4    8[BANK0 ] long 
 12477 ;;  dividend        4   12[BANK0 ] long 
 12478 ;; Auto vars:     Size  Location     Type
 12479 ;;  quotient        4   18[BANK0 ] long 
 12480 ;;  sign            1   17[BANK0 ] unsigned char 
 12481 ;;  counter         1   16[BANK0 ] unsigned char 
 12482 ;; Return value:  Size  Location     Type
 12483 ;;                  4    8[BANK0 ] long 
 12484 ;; Registers used:
 12485 ;;		wreg, status,2, status,0
 12486 ;; Tracked objects:
 12487 ;;		On entry : 0/0
 12488 ;;		On exit  : 0/0
 12489 ;;		Unchanged: 0/0
 12490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12491 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12492 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12493 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12494 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12495 ;;Total ram usage:       15 bytes
 12496 ;; Hardware stack levels used:    1
 12497 ;; Hardware stack levels required when called:    1
 12498 ;; This function calls:
 12499 ;;		Nothing
 12500 ;; This function is called by:
 12501 ;;		_pid_pwm1_idrv_b_b
 12502 ;;		_pid_pwm1_idrv_run
 12503 ;;		_calc_expect_vout_adc_value
 12504 ;;		_m_int_2_str
 12505 ;;		_m_int_2_str_ex
 12506 ;; This function uses a non-reentrant model
 12507 ;;
 12508                           
 12509                           
 12510                           ;psect for function ___aldiv
 12511  10A8                     ___aldiv:	
 12512                           
 12513                           ;incstack = 0
 12514                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 12515  10A8  0020               	movlb	0	; select bank0
 12516  10A9  01B1               	clrf	___aldiv@sign
 12517  10AA  1FAB               	btfss	___aldiv@divisor+3,7
 12518  10AB  28B9               	goto	l1200
 12519  10AC  09A8               	comf	___aldiv@divisor,f
 12520  10AD  09A9               	comf	___aldiv@divisor+1,f
 12521  10AE  09AA               	comf	___aldiv@divisor+2,f
 12522  10AF  09AB               	comf	___aldiv@divisor+3,f
 12523  10B0  0AA8               	incf	___aldiv@divisor,f
 12524  10B1  1903               	skipnz
 12525  10B2  0AA9               	incf	___aldiv@divisor+1,f
 12526  10B3  1903               	skipnz
 12527  10B4  0AAA               	incf	___aldiv@divisor+2,f
 12528  10B5  1903               	skipnz
 12529  10B6  0AAB               	incf	___aldiv@divisor+3,f
 12530  10B7  01B1               	clrf	___aldiv@sign
 12531  10B8  0AB1               	incf	___aldiv@sign,f
 12532  10B9                     l1200:	
 12533  10B9  1FAF               	btfss	___aldiv@dividend+3,7
 12534  10BA  28CA               	goto	l5327
 12535  10BB  09AC               	comf	___aldiv@dividend,f
 12536  10BC  09AD               	comf	___aldiv@dividend+1,f
 12537  10BD  09AE               	comf	___aldiv@dividend+2,f
 12538  10BE  09AF               	comf	___aldiv@dividend+3,f
 12539  10BF  0AAC               	incf	___aldiv@dividend,f
 12540  10C0  1903               	skipnz
 12541  10C1  0AAD               	incf	___aldiv@dividend+1,f
 12542  10C2  1903               	skipnz
 12543  10C3  0AAE               	incf	___aldiv@dividend+2,f
 12544  10C4  1903               	skipnz
 12545  10C5  0AAF               	incf	___aldiv@dividend+3,f
 12546  10C6  3001               	movlw	1
 12547  10C7  00F7               	movwf	??___aldiv
 12548  10C8  0877               	movf	??___aldiv,w
 12549  10C9  06B1               	xorwf	___aldiv@sign,f
 12550  10CA                     l5327:	
 12551  10CA  3000               	movlw	0
 12552  10CB  00B5               	movwf	___aldiv@quotient+3
 12553  10CC  3000               	movlw	0
 12554  10CD  00B4               	movwf	___aldiv@quotient+2
 12555  10CE  3000               	movlw	0
 12556  10CF  00B3               	movwf	___aldiv@quotient+1
 12557  10D0  3000               	movlw	0
 12558  10D1  00B2               	movwf	___aldiv@quotient
 12559  10D2  082B               	movf	___aldiv@divisor+3,w
 12560  10D3  042A               	iorwf	___aldiv@divisor+2,w
 12561  10D4  0429               	iorwf	___aldiv@divisor+1,w
 12562  10D5  0428               	iorwf	___aldiv@divisor,w
 12563  10D6  1903               	skipnz
 12564  10D7  2913               	goto	l5349
 12565  10D8  01B0               	clrf	___aldiv@counter
 12566  10D9  0AB0               	incf	___aldiv@counter,f
 12567  10DA                     l5335:	
 12568  10DA  1BAB               	btfsc	___aldiv@divisor+3,7
 12569  10DB  28E8               	goto	l5337
 12570  10DC  3001               	movlw	1
 12571  10DD                     u4775:	
 12572  10DD  35A8               	lslf	___aldiv@divisor,f
 12573  10DE  0DA9               	rlf	___aldiv@divisor+1,f
 12574  10DF  0DAA               	rlf	___aldiv@divisor+2,f
 12575  10E0  0DAB               	rlf	___aldiv@divisor+3,f
 12576  10E1  0B89               	decfsz	9,f
 12577  10E2  28DD               	goto	u4775
 12578  10E3  3001               	movlw	1
 12579  10E4  00F7               	movwf	??___aldiv
 12580  10E5  0877               	movf	??___aldiv,w
 12581  10E6  07B0               	addwf	___aldiv@counter,f
 12582  10E7  28DA               	goto	l5335
 12583  10E8                     l5337:	
 12584  10E8  3001               	movlw	1
 12585  10E9                     u4795:	
 12586  10E9  35B2               	lslf	___aldiv@quotient,f
 12587  10EA  0DB3               	rlf	___aldiv@quotient+1,f
 12588  10EB  0DB4               	rlf	___aldiv@quotient+2,f
 12589  10EC  0DB5               	rlf	___aldiv@quotient+3,f
 12590  10ED  0B89               	decfsz	9,f
 12591  10EE  28E9               	goto	u4795
 12592  10EF  082B               	movf	___aldiv@divisor+3,w
 12593  10F0  022F               	subwf	___aldiv@dividend+3,w
 12594  10F1  1D03               	skipz
 12595  10F2  28FD               	goto	u4805
 12596  10F3  082A               	movf	___aldiv@divisor+2,w
 12597  10F4  022E               	subwf	___aldiv@dividend+2,w
 12598  10F5  1D03               	skipz
 12599  10F6  28FD               	goto	u4805
 12600  10F7  0829               	movf	___aldiv@divisor+1,w
 12601  10F8  022D               	subwf	___aldiv@dividend+1,w
 12602  10F9  1D03               	skipz
 12603  10FA  28FD               	goto	u4805
 12604  10FB  0828               	movf	___aldiv@divisor,w
 12605  10FC  022C               	subwf	___aldiv@dividend,w
 12606  10FD                     u4805:	
 12607  10FD  1C03               	skipc
 12608  10FE  2908               	goto	l5345
 12609  10FF  0828               	movf	___aldiv@divisor,w
 12610  1100  02AC               	subwf	___aldiv@dividend,f
 12611  1101  0829               	movf	___aldiv@divisor+1,w
 12612  1102  3BAD               	subwfb	___aldiv@dividend+1,f
 12613  1103  082A               	movf	___aldiv@divisor+2,w
 12614  1104  3BAE               	subwfb	___aldiv@dividend+2,f
 12615  1105  082B               	movf	___aldiv@divisor+3,w
 12616  1106  3BAF               	subwfb	___aldiv@dividend+3,f
 12617  1107  1432               	bsf	___aldiv@quotient,0
 12618  1108                     l5345:	
 12619  1108  3001               	movlw	1
 12620  1109                     u4815:	
 12621  1109  36AB               	lsrf	___aldiv@divisor+3,f
 12622  110A  0CAA               	rrf	___aldiv@divisor+2,f
 12623  110B  0CA9               	rrf	___aldiv@divisor+1,f
 12624  110C  0CA8               	rrf	___aldiv@divisor,f
 12625  110D  0B89               	decfsz	9,f
 12626  110E  2909               	goto	u4815
 12627  110F  3001               	movlw	1
 12628  1110  02B0               	subwf	___aldiv@counter,f
 12629  1111  1D03               	btfss	3,2
 12630  1112  28E8               	goto	l5337
 12631  1113                     l5349:	
 12632  1113  0831               	movf	___aldiv@sign,w
 12633  1114  1903               	btfsc	3,2
 12634  1115  2921               	goto	l5353
 12635  1116  09B2               	comf	___aldiv@quotient,f
 12636  1117  09B3               	comf	___aldiv@quotient+1,f
 12637  1118  09B4               	comf	___aldiv@quotient+2,f
 12638  1119  09B5               	comf	___aldiv@quotient+3,f
 12639  111A  0AB2               	incf	___aldiv@quotient,f
 12640  111B  1903               	skipnz
 12641  111C  0AB3               	incf	___aldiv@quotient+1,f
 12642  111D  1903               	skipnz
 12643  111E  0AB4               	incf	___aldiv@quotient+2,f
 12644  111F  1903               	skipnz
 12645  1120  0AB5               	incf	___aldiv@quotient+3,f
 12646  1121                     l5353:	
 12647  1121  0835               	movf	___aldiv@quotient+3,w
 12648  1122  00AB               	movwf	?___aldiv+3
 12649  1123  0834               	movf	___aldiv@quotient+2,w
 12650  1124  00AA               	movwf	?___aldiv+2
 12651  1125  0833               	movf	___aldiv@quotient+1,w
 12652  1126  00A9               	movwf	?___aldiv+1
 12653  1127  0832               	movf	___aldiv@quotient,w
 12654  1128  00A8               	movwf	?___aldiv
 12655  1129  0008               	return
 12656  112A                     __end_of___aldiv:	
 12657                           
 12658                           	psect	text38
 12659  1EA2                     __ptext38:	
 12660 ;; *************** function _adc_sample *****************
 12661 ;; Defined at:
 12662 ;;		line 177 in file "src/api/sample.c"
 12663 ;; Parameters:    Size  Location     Type
 12664 ;;  ch              1    wreg     unsigned char 
 12665 ;;  gfvr            1    6[COMMON] unsigned char 
 12666 ;;  num             1    7[COMMON] unsigned char 
 12667 ;; Auto vars:     Size  Location     Type
 12668 ;;  ch              1    3[BANK0 ] unsigned char 
 12669 ;;  t16             2    8[BANK0 ] unsigned int 
 12670 ;;  ret             2    6[BANK0 ] unsigned int 
 12671 ;;  i               2    4[BANK0 ] unsigned int 
 12672 ;; Return value:  Size  Location     Type
 12673 ;;                  2    6[COMMON] unsigned int 
 12674 ;; Registers used:
 12675 ;;		wreg, status,2, status,0, pclath, cstack
 12676 ;; Tracked objects:
 12677 ;;		On entry : 0/0
 12678 ;;		On exit  : 0/0
 12679 ;;		Unchanged: 0/0
 12680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12681 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12682 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12683 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12684 ;;      Totals:         2      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12685 ;;Total ram usage:       12 bytes
 12686 ;; Hardware stack levels used:    1
 12687 ;; Hardware stack levels required when called:    2
 12688 ;; This function calls:
 12689 ;;		_adc_init
 12690 ;;		_fvr_set_gain
 12691 ;; This function is called by:
 12692 ;;		_main
 12693 ;; This function uses a non-reentrant model
 12694 ;;
 12695                           
 12696                           
 12697                           ;psect for function _adc_sample
 12698  1EA2                     _adc_sample:	
 12699                           
 12700                           ;incstack = 0
 12701                           ; Regs used in _adc_sample: [wreg+status,2+status,0+pclath+cstack]
 12702                           ;adc_sample@ch stored from wreg
 12703  1EA2  0020               	movlb	0	; select bank0
 12704  1EA3  00A3               	movwf	adc_sample@ch
 12705                           
 12706                           ;sample.c: 179: uint16_t i;
 12707                           ;sample.c: 180: uint16_t ret=0;
 12708  1EA4  01A6               	clrf	adc_sample@ret
 12709  1EA5  01A7               	clrf	adc_sample@ret+1
 12710                           
 12711                           ;sample.c: 181: uint16_t t16=0;
 12712  1EA6  01A8               	clrf	adc_sample@t16
 12713  1EA7  01A9               	clrf	adc_sample@t16+1
 12714                           
 12715                           ;sample.c: 183: fvr_set_gain(gfvr);
 12716  1EA8  0876               	movf	adc_sample@gfvr,w
 12717  1EA9  319A  2207  319E   	fcall	_fvr_set_gain
 12718                           
 12719                           ;sample.c: 184: adc_init((adc_channel_t)ch);
 12720  1EAC  0020               	movlb	0	; select bank0
 12721  1EAD  0823               	movf	adc_sample@ch,w
 12722  1EAE  3199  21F3  319E   	fcall	_adc_init
 12723                           
 12724                           ;sample.c: 185: _delay((unsigned long)((50)*(16000000/4000000.0)));
 12725  1EB1  3042               	movlw	66
 12726  1EB2                     u5567:	
 12727  1EB2  0B89               	decfsz	9,f
 12728  1EB3  2EB2               	goto	u5567
 12729  1EB4  3200               	nop2
 12730                           
 12731                           ;sample.c: 186: ADCON0bits.GO_nDONE = 1;
 12732  1EB5  0021               	movlb	1	; select bank1
 12733  1EB6  149D               	bsf	29,1	;volatile
 12734  1EB7                     l648:	
 12735                           ;sample.c: 187: while (ADCON0bits.GO_nDONE);
 12736                           
 12737  1EB7  189D               	btfsc	29,1	;volatile
 12738  1EB8  2EB7               	goto	l648
 12739                           
 12740                           ;sample.c: 188: if(num>64)num=64;
 12741  1EB9  3041               	movlw	65
 12742  1EBA  0277               	subwf	adc_sample@num,w
 12743  1EBB  1C03               	skipc
 12744  1EBC  2EC2               	goto	l5395
 12745  1EBD  3040               	movlw	64
 12746  1EBE  0020               	movlb	0	; select bank0
 12747  1EBF  00A0               	movwf	??_adc_sample
 12748  1EC0  0820               	movf	??_adc_sample,w
 12749  1EC1  00F7               	movwf	adc_sample@num
 12750  1EC2                     l5395:	
 12751                           
 12752                           ;sample.c: 189: for(i=0;i<num;i++){
 12753  1EC2  0020               	movlb	0	; select bank0
 12754  1EC3  01A4               	clrf	adc_sample@i
 12755  1EC4  01A5               	clrf	adc_sample@i+1
 12756  1EC5                     l5405:	
 12757  1EC5  0877               	movf	adc_sample@num,w
 12758  1EC6  00A0               	movwf	??_adc_sample
 12759  1EC7  01A1               	clrf	??_adc_sample+1
 12760  1EC8  0821               	movf	??_adc_sample+1,w
 12761  1EC9  0225               	subwf	adc_sample@i+1,w
 12762  1ECA  1D03               	skipz
 12763  1ECB  2ECE               	goto	u4965
 12764  1ECC  0820               	movf	??_adc_sample,w
 12765  1ECD  0224               	subwf	adc_sample@i,w
 12766  1ECE                     u4965:	
 12767  1ECE  1803               	btfsc	3,0
 12768  1ECF  2EFB               	goto	l5407
 12769                           
 12770                           ;sample.c: 190: ADCON0bits.GO_nDONE = 1;
 12771  1ED0  0021               	movlb	1	; select bank1
 12772  1ED1  149D               	bsf	29,1	;volatile
 12773  1ED2                     l654:	
 12774                           ;sample.c: 191: while (ADCON0bits.GO_nDONE);
 12775                           
 12776  1ED2  189D               	btfsc	29,1	;volatile
 12777  1ED3  2ED2               	goto	l654
 12778                           
 12779                           ;sample.c: 192: __nop();
 12780  1ED4  0000               	nop
 12781                           
 12782                           ;sample.c: 193: t16=ADRESH;
 12783  1ED5  0021               	movlb	1	; select bank1
 12784  1ED6  081C               	movf	28,w	;volatile
 12785  1ED7  0020               	movlb	0	; select bank0
 12786  1ED8  00A0               	movwf	??_adc_sample
 12787  1ED9  01A1               	clrf	??_adc_sample+1
 12788  1EDA  0820               	movf	??_adc_sample,w
 12789  1EDB  00A8               	movwf	adc_sample@t16
 12790  1EDC  0821               	movf	??_adc_sample+1,w
 12791  1EDD  00A9               	movwf	adc_sample@t16+1
 12792                           
 12793                           ;sample.c: 194: t16<<=2;
 12794  1EDE  3002               	movlw	2
 12795  1EDF                     u4945:	
 12796  1EDF  35A8               	lslf	adc_sample@t16,f
 12797  1EE0  0DA9               	rlf	adc_sample@t16+1,f
 12798  1EE1  0B89               	decfsz	9,f
 12799  1EE2  2EDF               	goto	u4945
 12800                           
 12801                           ;sample.c: 195: t16|=(uint16_t)(ADRESL>>6);
 12802  1EE3  0021               	movlb	1	; select bank1
 12803  1EE4  081B               	movf	27,w	;volatile
 12804  1EE5  0020               	movlb	0	; select bank0
 12805  1EE6  00A0               	movwf	??_adc_sample
 12806  1EE7  3006               	movlw	6
 12807  1EE8                     u4955:	
 12808  1EE8  36A0               	lsrf	??_adc_sample,f
 12809  1EE9  0B89               	decfsz	9,f
 12810  1EEA  2EE8               	goto	u4955
 12811  1EEB  0820               	movf	??_adc_sample,w
 12812  1EEC  00A1               	movwf	??_adc_sample+1
 12813  1EED  01A2               	clrf	??_adc_sample+2
 12814  1EEE  0821               	movf	??_adc_sample+1,w
 12815  1EEF  04A8               	iorwf	adc_sample@t16,f
 12816  1EF0  0822               	movf	??_adc_sample+2,w
 12817  1EF1  04A9               	iorwf	adc_sample@t16+1,f
 12818                           
 12819                           ;sample.c: 197: ret+=t16;
 12820  1EF2  0828               	movf	adc_sample@t16,w
 12821  1EF3  07A6               	addwf	adc_sample@ret,f
 12822  1EF4  0829               	movf	adc_sample@t16+1,w
 12823  1EF5  3DA7               	addwfc	adc_sample@ret+1,f
 12824  1EF6  3001               	movlw	1
 12825  1EF7  07A4               	addwf	adc_sample@i,f
 12826  1EF8  3000               	movlw	0
 12827  1EF9  3DA5               	addwfc	adc_sample@i+1,f
 12828  1EFA  2EC5               	goto	l5405
 12829  1EFB                     l5407:	
 12830                           
 12831                           ;sample.c: 202: return ret;
 12832  1EFB  0827               	movf	adc_sample@ret+1,w
 12833  1EFC  00F7               	movwf	?_adc_sample+1
 12834  1EFD  0826               	movf	adc_sample@ret,w
 12835  1EFE  00F6               	movwf	?_adc_sample
 12836  1EFF  0008               	return
 12837  1F00                     __end_of_adc_sample:	
 12838                           
 12839                           	psect	text39
 12840  1A07                     __ptext39:	
 12841 ;; *************** function _fvr_set_gain *****************
 12842 ;; Defined at:
 12843 ;;		line 124 in file "src/api/sample.c"
 12844 ;; Parameters:    Size  Location     Type
 12845 ;;  g               1    wreg     unsigned char 
 12846 ;; Auto vars:     Size  Location     Type
 12847 ;;  g               1    5[COMMON] unsigned char 
 12848 ;;  t8              1    4[COMMON] unsigned char 
 12849 ;; Return value:  Size  Location     Type
 12850 ;;                  1    wreg      void 
 12851 ;; Registers used:
 12852 ;;		wreg, status,2, status,0
 12853 ;; Tracked objects:
 12854 ;;		On entry : 0/0
 12855 ;;		On exit  : 0/0
 12856 ;;		Unchanged: 0/0
 12857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12859 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12860 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12861 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12862 ;;Total ram usage:        3 bytes
 12863 ;; Hardware stack levels used:    1
 12864 ;; Hardware stack levels required when called:    1
 12865 ;; This function calls:
 12866 ;;		Nothing
 12867 ;; This function is called by:
 12868 ;;		_adc_sample
 12869 ;; This function uses a non-reentrant model
 12870 ;;
 12871                           
 12872                           
 12873                           ;psect for function _fvr_set_gain
 12874  1A07                     _fvr_set_gain:	
 12875                           
 12876                           ;incstack = 0
 12877                           ; Regs used in _fvr_set_gain: [wreg+status,2+status,0]
 12878                           ;fvr_set_gain@g stored from wreg
 12879  1A07  00F5               	movwf	fvr_set_gain@g
 12880                           
 12881                           ;sample.c: 126: uint8_t t8=0x80;
 12882  1A08  3080               	movlw	128
 12883  1A09  00F3               	movwf	??_fvr_set_gain
 12884  1A0A  0873               	movf	??_fvr_set_gain,w
 12885  1A0B  00F4               	movwf	fvr_set_gain@t8
 12886                           
 12887                           ;sample.c: 127: if(g>3)g=3;
 12888  1A0C  3004               	movlw	4
 12889  1A0D  0275               	subwf	fvr_set_gain@g,w
 12890  1A0E  1C03               	skipc
 12891  1A0F  2A14               	goto	l3725
 12892  1A10  3003               	movlw	3
 12893  1A11  00F3               	movwf	??_fvr_set_gain
 12894  1A12  0873               	movf	??_fvr_set_gain,w
 12895  1A13  00F5               	movwf	fvr_set_gain@g
 12896  1A14                     l3725:	
 12897                           
 12898                           ;sample.c: 128: t8|=g;
 12899  1A14  0875               	movf	fvr_set_gain@g,w
 12900  1A15  00F3               	movwf	??_fvr_set_gain
 12901  1A16  0873               	movf	??_fvr_set_gain,w
 12902  1A17  04F4               	iorwf	fvr_set_gain@t8,f
 12903                           
 12904                           ;sample.c: 129: FVRCON = t8;
 12905  1A18  0874               	movf	fvr_set_gain@t8,w
 12906  1A19  0022               	movlb	2	; select bank2
 12907  1A1A  0097               	movwf	23	;volatile
 12908  1A1B                     l636:	
 12909                           ;sample.c: 130: while(!(FVRCONbits.FVRRDY));
 12910                           
 12911  1A1B  1B17               	btfsc	23,6	;volatile
 12912  1A1C  0008               	return
 12913  1A1D  2A1B               	goto	l636
 12914  1A1E                     __end_of_fvr_set_gain:	
 12915                           
 12916                           	psect	text40
 12917  19F3                     __ptext40:	
 12918 ;; *************** function _adc_init *****************
 12919 ;; Defined at:
 12920 ;;		line 133 in file "src/api/sample.c"
 12921 ;; Parameters:    Size  Location     Type
 12922 ;;  ch              1    wreg     enum E4992
 12923 ;; Auto vars:     Size  Location     Type
 12924 ;;  ch              1    4[COMMON] enum E4992
 12925 ;; Return value:  Size  Location     Type
 12926 ;;                  1    wreg      void 
 12927 ;; Registers used:
 12928 ;;		wreg, status,2, status,0
 12929 ;; Tracked objects:
 12930 ;;		On entry : 0/0
 12931 ;;		On exit  : 0/0
 12932 ;;		Unchanged: 0/0
 12933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12935 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12936 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12937 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12938 ;;Total ram usage:        2 bytes
 12939 ;; Hardware stack levels used:    1
 12940 ;; Hardware stack levels required when called:    1
 12941 ;; This function calls:
 12942 ;;		Nothing
 12943 ;; This function is called by:
 12944 ;;		_adc_sample
 12945 ;; This function uses a non-reentrant model
 12946 ;;
 12947                           
 12948                           
 12949                           ;psect for function _adc_init
 12950  19F3                     _adc_init:	
 12951                           
 12952                           ;incstack = 0
 12953                           ; Regs used in _adc_init: [wreg+status,2+status,0]
 12954                           ;adc_init@ch stored from wreg
 12955  19F3  00F4               	movwf	adc_init@ch
 12956  19F4                     l642:	
 12957                           ;sample.c: 135: while (ADCON0bits.GO_nDONE);
 12958                           
 12959  19F4  0021               	movlb	1	; select bank1
 12960  19F5  189D               	btfsc	29,1	;volatile
 12961  19F6  29F4               	goto	l642
 12962                           
 12963                           ;sample.c: 136: ADCON0bits.CHS = ch;
 12964  19F7  0874               	movf	adc_init@ch,w
 12965  19F8  00F3               	movwf	??_adc_init
 12966  19F9  0DF3               	rlf	??_adc_init,f
 12967  19FA  0DF3               	rlf	??_adc_init,f
 12968  19FB  081D               	movf	29,w	;volatile
 12969  19FC  0673               	xorwf	??_adc_init,w
 12970  19FD  3983               	andlw	-125
 12971  19FE  0673               	xorwf	??_adc_init,w
 12972  19FF  009D               	movwf	29	;volatile
 12973                           
 12974                           ;sample.c: 137: ADCON0bits.ADON = 1;
 12975  1A00  141D               	bsf	29,0	;volatile
 12976                           
 12977                           ;sample.c: 138: ADCON1 = 0x63;
 12978  1A01  3063               	movlw	99
 12979  1A02  009E               	movwf	30	;volatile
 12980                           
 12981                           ;sample.c: 139: ADCON2 = 0x00;
 12982  1A03  019F               	clrf	31	;volatile
 12983                           
 12984                           ;sample.c: 140: ADRESL = 0x00;
 12985  1A04  019B               	clrf	27	;volatile
 12986                           
 12987                           ;sample.c: 141: ADRESH = 0x00;
 12988  1A05  019C               	clrf	28	;volatile
 12989  1A06  0008               	return
 12990  1A07                     __end_of_adc_init:	
 12991                           
 12992                           	psect	text41
 12993  1A50                     __ptext41:	
 12994 ;; *************** function _SYSTEM_Initialize *****************
 12995 ;; Defined at:
 12996 ;;		line 70 in file "mcc_generated_files/mcc.c"
 12997 ;; Parameters:    Size  Location     Type
 12998 ;;		None
 12999 ;; Auto vars:     Size  Location     Type
 13000 ;;		None
 13001 ;; Return value:  Size  Location     Type
 13002 ;;                  1    wreg      void 
 13003 ;; Registers used:
 13004 ;;		wreg, status,2, status,0, pclath, cstack
 13005 ;; Tracked objects:
 13006 ;;		On entry : 0/0
 13007 ;;		On exit  : 0/0
 13008 ;;		Unchanged: 0/0
 13009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13013 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13014 ;;Total ram usage:        0 bytes
 13015 ;; Hardware stack levels used:    1
 13016 ;; Hardware stack levels required when called:    3
 13017 ;; This function calls:
 13018 ;;		_ADC1_Initialize
 13019 ;;		_EUSART_Initialize
 13020 ;;		_FVR_Initialize
 13021 ;;		_OSCILLATOR_Initialize
 13022 ;;		_PIN_MANAGER_Initialize
 13023 ;;		_PWM1_Initialize
 13024 ;;		_PWM2_Initialize
 13025 ;;		_TMR2_Initialize
 13026 ;;		_WDT_Initialize
 13027 ;; This function is called by:
 13028 ;;		_main
 13029 ;; This function uses a non-reentrant model
 13030 ;;
 13031                           
 13032                           
 13033                           ;psect for function _SYSTEM_Initialize
 13034  1A50                     _SYSTEM_Initialize:	
 13035                           
 13036                           ;mcc.c: 73: PIN_MANAGER_Initialize();
 13037                           
 13038                           ;incstack = 0
 13039                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 13040  1A50  319D  2514  319A   	fcall	_PIN_MANAGER_Initialize
 13041                           
 13042                           ;mcc.c: 74: OSCILLATOR_Initialize();
 13043  1A53  3188  2003  319A   	fcall	_OSCILLATOR_Initialize
 13044                           
 13045                           ;mcc.c: 75: WDT_Initialize();
 13046  1A56  3199  2191  319A   	fcall	_WDT_Initialize
 13047                           
 13048                           ;mcc.c: 76: FVR_Initialize();
 13049  1A59  3199  218D  319A   	fcall	_FVR_Initialize
 13050                           
 13051                           ;mcc.c: 77: PWM1_Initialize();
 13052  1A5C  319A  221E  319A   	fcall	_PWM1_Initialize
 13053                           
 13054                           ;mcc.c: 78: PWM2_Initialize();
 13055  1A5F  319A  2237  319A   	fcall	_PWM2_Initialize
 13056                           
 13057                           ;mcc.c: 79: ADC1_Initialize();
 13058  1A62  3199  219B  319A   	fcall	_ADC1_Initialize
 13059                           
 13060                           ;mcc.c: 80: TMR2_Initialize();
 13061  1A65  3199  21E0  319A   	fcall	_TMR2_Initialize
 13062                           
 13063                           ;mcc.c: 81: EUSART_Initialize();
 13064  1A68  3199  21CD         	fcall	_EUSART_Initialize
 13065  1A6A  0008               	return
 13066  1A6B                     __end_of_SYSTEM_Initialize:	
 13067                           
 13068                           	psect	text42
 13069  1991                     __ptext42:	
 13070 ;; *************** function _WDT_Initialize *****************
 13071 ;; Defined at:
 13072 ;;		line 94 in file "mcc_generated_files/mcc.c"
 13073 ;; Parameters:    Size  Location     Type
 13074 ;;		None
 13075 ;; Auto vars:     Size  Location     Type
 13076 ;;		None
 13077 ;; Return value:  Size  Location     Type
 13078 ;;                  1    wreg      void 
 13079 ;; Registers used:
 13080 ;;		wreg
 13081 ;; Tracked objects:
 13082 ;;		On entry : 0/0
 13083 ;;		On exit  : 0/0
 13084 ;;		Unchanged: 0/0
 13085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13089 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13090 ;;Total ram usage:        0 bytes
 13091 ;; Hardware stack levels used:    1
 13092 ;; Hardware stack levels required when called:    1
 13093 ;; This function calls:
 13094 ;;		Nothing
 13095 ;; This function is called by:
 13096 ;;		_SYSTEM_Initialize
 13097 ;; This function uses a non-reentrant model
 13098 ;;
 13099                           
 13100                           
 13101                           ;psect for function _WDT_Initialize
 13102  1991                     _WDT_Initialize:	
 13103                           
 13104                           ;mcc.c: 97: WDTCON = 0x16;
 13105                           
 13106                           ;incstack = 0
 13107                           ; Regs used in _WDT_Initialize: [wreg]
 13108  1991  3016               	movlw	22
 13109  1992  0021               	movlb	1	; select bank1
 13110  1993  0097               	movwf	23	;volatile
 13111  1994  0008               	return
 13112  1995                     __end_of_WDT_Initialize:	
 13113                           
 13114                           	psect	text43
 13115  19E0                     __ptext43:	
 13116 ;; *************** function _TMR2_Initialize *****************
 13117 ;; Defined at:
 13118 ;;		line 63 in file "mcc_generated_files/tmr2.c"
 13119 ;; Parameters:    Size  Location     Type
 13120 ;;		None
 13121 ;; Auto vars:     Size  Location     Type
 13122 ;;		None
 13123 ;; Return value:  Size  Location     Type
 13124 ;;                  1    wreg      void 
 13125 ;; Registers used:
 13126 ;;		wreg, status,2, status,0, pclath, cstack
 13127 ;; Tracked objects:
 13128 ;;		On entry : 0/0
 13129 ;;		On exit  : 0/0
 13130 ;;		Unchanged: 0/0
 13131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13135 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13136 ;;Total ram usage:        0 bytes
 13137 ;; Hardware stack levels used:    1
 13138 ;; Hardware stack levels required when called:    2
 13139 ;; This function calls:
 13140 ;;		_TMR2_SetInterruptHandler
 13141 ;;		_TMR2_StartTimer
 13142 ;; This function is called by:
 13143 ;;		_SYSTEM_Initialize
 13144 ;; This function uses a non-reentrant model
 13145 ;;
 13146                           
 13147                           
 13148                           ;psect for function _TMR2_Initialize
 13149  19E0                     _TMR2_Initialize:	
 13150                           
 13151                           ;tmr2.c: 68: T2CON = 0x4B;
 13152                           
 13153                           ;incstack = 0
 13154                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
 13155  19E0  304B               	movlw	75
 13156  19E1  0020               	movlb	0	; select bank0
 13157  19E2  009C               	movwf	28	;volatile
 13158                           
 13159                           ;tmr2.c: 71: PR2 = 0x7C;
 13160  19E3  307C               	movlw	124
 13161  19E4  009B               	movwf	27	;volatile
 13162                           
 13163                           ;tmr2.c: 74: TMR2 = 0x00;
 13164  19E5  019A               	clrf	26	;volatile
 13165                           
 13166                           ;tmr2.c: 77: PIR1bits.TMR2IF = 0;
 13167  19E6  1091               	bcf	17,1	;volatile
 13168                           
 13169                           ;tmr2.c: 80: PIE1bits.TMR2IE = 1;
 13170  19E7  0021               	movlb	1	; select bank1
 13171  19E8  1491               	bsf	17,1	;volatile
 13172                           
 13173                           ;tmr2.c: 83: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
 13174  19E9  3000               	movlw	0
 13175  19EA  00F3               	movwf	TMR2_SetInterruptHandler@InterruptHandler
 13176  19EB  3000               	movlw	0
 13177  19EC  00F4               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
 13178  19ED  3199  2195  3199   	fcall	_TMR2_SetInterruptHandler
 13179                           
 13180                           ;tmr2.c: 86: TMR2_StartTimer();
 13181  19F0  3199  218A         	fcall	_TMR2_StartTimer
 13182  19F2  0008               	return
 13183  19F3                     __end_of_TMR2_Initialize:	
 13184                           
 13185                           	psect	text44
 13186  198A                     __ptext44:	
 13187 ;; *************** function _TMR2_StartTimer *****************
 13188 ;; Defined at:
 13189 ;;		line 89 in file "mcc_generated_files/tmr2.c"
 13190 ;; Parameters:    Size  Location     Type
 13191 ;;		None
 13192 ;; Auto vars:     Size  Location     Type
 13193 ;;		None
 13194 ;; Return value:  Size  Location     Type
 13195 ;;                  1    wreg      void 
 13196 ;; Registers used:
 13197 ;;		None
 13198 ;; Tracked objects:
 13199 ;;		On entry : 0/0
 13200 ;;		On exit  : 0/0
 13201 ;;		Unchanged: 0/0
 13202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13206 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13207 ;;Total ram usage:        0 bytes
 13208 ;; Hardware stack levels used:    1
 13209 ;; Hardware stack levels required when called:    1
 13210 ;; This function calls:
 13211 ;;		Nothing
 13212 ;; This function is called by:
 13213 ;;		_TMR2_Initialize
 13214 ;; This function uses a non-reentrant model
 13215 ;;
 13216                           
 13217                           
 13218                           ;psect for function _TMR2_StartTimer
 13219  198A                     _TMR2_StartTimer:	
 13220                           
 13221                           ;tmr2.c: 92: T2CONbits.TMR2ON = 1;
 13222                           
 13223                           ;incstack = 0
 13224                           ; Regs used in _TMR2_StartTimer: []
 13225  198A  0020               	movlb	0	; select bank0
 13226  198B  151C               	bsf	28,2	;volatile
 13227  198C  0008               	return
 13228  198D                     __end_of_TMR2_StartTimer:	
 13229                           
 13230                           	psect	text45
 13231  1995                     __ptext45:	
 13232 ;; *************** function _TMR2_SetInterruptHandler *****************
 13233 ;; Defined at:
 13234 ;;		line 142 in file "mcc_generated_files/tmr2.c"
 13235 ;; Parameters:    Size  Location     Type
 13236 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
 13237 ;;		 -> TMR2_DefaultInterruptHandler(1), 
 13238 ;; Auto vars:     Size  Location     Type
 13239 ;;		None
 13240 ;; Return value:  Size  Location     Type
 13241 ;;                  1    wreg      void 
 13242 ;; Registers used:
 13243 ;;		wreg
 13244 ;; Tracked objects:
 13245 ;;		On entry : 0/0
 13246 ;;		On exit  : 0/0
 13247 ;;		Unchanged: 0/0
 13248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13249 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13252 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13253 ;;Total ram usage:        2 bytes
 13254 ;; Hardware stack levels used:    1
 13255 ;; Hardware stack levels required when called:    1
 13256 ;; This function calls:
 13257 ;;		Nothing
 13258 ;; This function is called by:
 13259 ;;		_TMR2_Initialize
 13260 ;; This function uses a non-reentrant model
 13261 ;;
 13262                           
 13263                           
 13264                           ;psect for function _TMR2_SetInterruptHandler
 13265  1995                     _TMR2_SetInterruptHandler:	
 13266                           
 13267                           ;tmr2.c: 143: TMR2_InterruptHandler = InterruptHandler;
 13268                           
 13269                           ;incstack = 0
 13270                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
 13271  1995  0874               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
 13272  1996  0021               	movlb	1	; select bank1
 13273  1997  00D9               	movwf	(_TMR2_InterruptHandler+1)^(0+128)
 13274  1998  0873               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
 13275  1999  00D8               	movwf	_TMR2_InterruptHandler^(0+128)
 13276  199A  0008               	return
 13277  199B                     __end_of_TMR2_SetInterruptHandler:	
 13278                           
 13279                           	psect	text46
 13280  1A37                     __ptext46:	
 13281 ;; *************** function _PWM2_Initialize *****************
 13282 ;; Defined at:
 13283 ;;		line 58 in file "mcc_generated_files/pwm2.c"
 13284 ;; Parameters:    Size  Location     Type
 13285 ;;		None
 13286 ;; Auto vars:     Size  Location     Type
 13287 ;;		None
 13288 ;; Return value:  Size  Location     Type
 13289 ;;                  1    wreg      void 
 13290 ;; Registers used:
 13291 ;;		wreg, status,2
 13292 ;; Tracked objects:
 13293 ;;		On entry : 0/0
 13294 ;;		On exit  : 0/0
 13295 ;;		Unchanged: 0/0
 13296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13300 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13301 ;;Total ram usage:        0 bytes
 13302 ;; Hardware stack levels used:    1
 13303 ;; Hardware stack levels required when called:    1
 13304 ;; This function calls:
 13305 ;;		Nothing
 13306 ;; This function is called by:
 13307 ;;		_SYSTEM_Initialize
 13308 ;; This function uses a non-reentrant model
 13309 ;;
 13310                           
 13311                           
 13312                           ;psect for function _PWM2_Initialize
 13313  1A37                     _PWM2_Initialize:	
 13314                           
 13315                           ;pwm2.c: 63: PWM2INTE = 0x01;
 13316                           
 13317                           ;incstack = 0
 13318                           ; Regs used in _PWM2_Initialize: [wreg+status,2]
 13319  1A37  3001               	movlw	1
 13320  1A38  003B               	movlb	27	; select bank27
 13321  1A39  00AC               	movwf	44	;volatile
 13322                           
 13323                           ;pwm2.c: 66: PWM2INTF = 0x00;
 13324  1A3A  01AD               	clrf	45	;volatile
 13325                           
 13326                           ;pwm2.c: 69: PWM2CLKCON = 0x00;
 13327  1A3B  01AE               	clrf	46	;volatile
 13328                           
 13329                           ;pwm2.c: 72: PWM2LDCON = 0x00;
 13330  1A3C  01AF               	clrf	47	;volatile
 13331                           
 13332                           ;pwm2.c: 75: PWM2OFCON = 0x00;
 13333  1A3D  01B0               	clrf	48	;volatile
 13334                           
 13335                           ;pwm2.c: 78: PWM2PHH = 0x00;
 13336  1A3E  01A2               	clrf	34	;volatile
 13337                           
 13338                           ;pwm2.c: 81: PWM2PHL = 0x02;
 13339  1A3F  3002               	movlw	2
 13340  1A40  00A1               	movwf	33	;volatile
 13341                           
 13342                           ;pwm2.c: 84: PWM2DCH = 0x00;
 13343  1A41  01A4               	clrf	36	;volatile
 13344                           
 13345                           ;pwm2.c: 87: PWM2DCL = 0xA0;
 13346  1A42  30A0               	movlw	160
 13347  1A43  00A3               	movwf	35	;volatile
 13348                           
 13349                           ;pwm2.c: 90: PWM2PRH = 0x06;
 13350  1A44  3006               	movlw	6
 13351  1A45  00A6               	movwf	38	;volatile
 13352                           
 13353                           ;pwm2.c: 93: PWM2PRL = 0x3F;
 13354  1A46  303F               	movlw	63
 13355  1A47  00A5               	movwf	37	;volatile
 13356                           
 13357                           ;pwm2.c: 96: PWM2OFH = 0x00;
 13358  1A48  01A8               	clrf	40	;volatile
 13359                           
 13360                           ;pwm2.c: 99: PWM2OFL = 0x01;
 13361  1A49  3001               	movlw	1
 13362  1A4A  00A7               	movwf	39	;volatile
 13363                           
 13364                           ;pwm2.c: 102: PWM2TMRH = 0x00;
 13365  1A4B  01AA               	clrf	42	;volatile
 13366                           
 13367                           ;pwm2.c: 105: PWM2TMRL = 0x00;
 13368  1A4C  01A9               	clrf	41	;volatile
 13369                           
 13370                           ;pwm2.c: 108: PWM2CON = 0x90;
 13371  1A4D  3090               	movlw	144
 13372  1A4E  00AB               	movwf	43	;volatile
 13373  1A4F  0008               	return
 13374  1A50                     __end_of_PWM2_Initialize:	
 13375                           
 13376                           	psect	text47
 13377  1A1E                     __ptext47:	
 13378 ;; *************** function _PWM1_Initialize *****************
 13379 ;; Defined at:
 13380 ;;		line 58 in file "mcc_generated_files/pwm1.c"
 13381 ;; Parameters:    Size  Location     Type
 13382 ;;		None
 13383 ;; Auto vars:     Size  Location     Type
 13384 ;;		None
 13385 ;; Return value:  Size  Location     Type
 13386 ;;                  1    wreg      void 
 13387 ;; Registers used:
 13388 ;;		wreg, status,2
 13389 ;; Tracked objects:
 13390 ;;		On entry : 0/0
 13391 ;;		On exit  : 0/0
 13392 ;;		Unchanged: 0/0
 13393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13398 ;;Total ram usage:        0 bytes
 13399 ;; Hardware stack levels used:    1
 13400 ;; Hardware stack levels required when called:    1
 13401 ;; This function calls:
 13402 ;;		Nothing
 13403 ;; This function is called by:
 13404 ;;		_SYSTEM_Initialize
 13405 ;; This function uses a non-reentrant model
 13406 ;;
 13407                           
 13408                           
 13409                           ;psect for function _PWM1_Initialize
 13410  1A1E                     _PWM1_Initialize:	
 13411                           
 13412                           ;pwm1.c: 63: PWM1INTE = 0x01;
 13413                           
 13414                           ;incstack = 0
 13415                           ; Regs used in _PWM1_Initialize: [wreg+status,2]
 13416  1A1E  3001               	movlw	1
 13417  1A1F  003B               	movlb	27	; select bank27
 13418  1A20  009C               	movwf	28	;volatile
 13419                           
 13420                           ;pwm1.c: 66: PWM1INTF = 0x00;
 13421  1A21  019D               	clrf	29	;volatile
 13422                           
 13423                           ;pwm1.c: 69: PWM1CLKCON = 0x00;
 13424  1A22  019E               	clrf	30	;volatile
 13425                           
 13426                           ;pwm1.c: 72: PWM1LDCON = 0x00;
 13427  1A23  019F               	clrf	31	;volatile
 13428                           
 13429                           ;pwm1.c: 75: PWM1OFCON = 0x00;
 13430  1A24  01A0               	clrf	32	;volatile
 13431                           
 13432                           ;pwm1.c: 78: PWM1PHH = 0x00;
 13433  1A25  0192               	clrf	18	;volatile
 13434                           
 13435                           ;pwm1.c: 81: PWM1PHL = 0x02;
 13436  1A26  3002               	movlw	2
 13437  1A27  0091               	movwf	17	;volatile
 13438                           
 13439                           ;pwm1.c: 84: PWM1DCH = 0x00;
 13440  1A28  0194               	clrf	20	;volatile
 13441                           
 13442                           ;pwm1.c: 87: PWM1DCL = 0xa0;
 13443  1A29  30A0               	movlw	160
 13444  1A2A  0093               	movwf	19	;volatile
 13445                           
 13446                           ;pwm1.c: 90: PWM1PRH = 0x06;
 13447  1A2B  3006               	movlw	6
 13448  1A2C  0096               	movwf	22	;volatile
 13449                           
 13450                           ;pwm1.c: 93: PWM1PRL = 0x3F;
 13451  1A2D  303F               	movlw	63
 13452  1A2E  0095               	movwf	21	;volatile
 13453                           
 13454                           ;pwm1.c: 96: PWM1OFH = 0x00;
 13455  1A2F  0198               	clrf	24	;volatile
 13456                           
 13457                           ;pwm1.c: 99: PWM1OFL = 0x01;
 13458  1A30  3001               	movlw	1
 13459  1A31  0097               	movwf	23	;volatile
 13460                           
 13461                           ;pwm1.c: 102: PWM1TMRH = 0x00;
 13462  1A32  019A               	clrf	26	;volatile
 13463                           
 13464                           ;pwm1.c: 105: PWM1TMRL = 0x00;
 13465  1A33  0199               	clrf	25	;volatile
 13466                           
 13467                           ;pwm1.c: 108: PWM1CON = 0x90;
 13468  1A34  3090               	movlw	144
 13469  1A35  009B               	movwf	27	;volatile
 13470  1A36  0008               	return
 13471  1A37                     __end_of_PWM1_Initialize:	
 13472                           
 13473                           	psect	text48
 13474  1D14                     __ptext48:	
 13475 ;; *************** function _PIN_MANAGER_Initialize *****************
 13476 ;; Defined at:
 13477 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
 13478 ;; Parameters:    Size  Location     Type
 13479 ;;		None
 13480 ;; Auto vars:     Size  Location     Type
 13481 ;;  state           1    3[COMMON] unsigned char 
 13482 ;; Return value:  Size  Location     Type
 13483 ;;                  1    wreg      void 
 13484 ;; Registers used:
 13485 ;;		wreg, status,2, status,0
 13486 ;; Tracked objects:
 13487 ;;		On entry : 0/0
 13488 ;;		On exit  : 0/0
 13489 ;;		Unchanged: 0/0
 13490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13492 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13494 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13495 ;;Total ram usage:        1 bytes
 13496 ;; Hardware stack levels used:    1
 13497 ;; Hardware stack levels required when called:    1
 13498 ;; This function calls:
 13499 ;;		Nothing
 13500 ;; This function is called by:
 13501 ;;		_SYSTEM_Initialize
 13502 ;; This function uses a non-reentrant model
 13503 ;;
 13504                           
 13505                           
 13506                           ;psect for function _PIN_MANAGER_Initialize
 13507  1D14                     _PIN_MANAGER_Initialize:	
 13508                           
 13509                           ;pin_manager.c: 57: LATA = 0x00;
 13510                           
 13511                           ;incstack = 0
 13512                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
 13513  1D14  0022               	movlb	2	; select bank2
 13514  1D15  018C               	clrf	12	;volatile
 13515                           
 13516                           ;pin_manager.c: 58: LATC = 0x00;
 13517  1D16  018E               	clrf	14	;volatile
 13518                           
 13519                           ;pin_manager.c: 63: TRISA = 0x0F;
 13520  1D17  300F               	movlw	15
 13521  1D18  0021               	movlb	1	; select bank1
 13522  1D19  008C               	movwf	12	;volatile
 13523                           
 13524                           ;pin_manager.c: 64: TRISC = 0x1f;
 13525  1D1A  301F               	movlw	31
 13526  1D1B  008E               	movwf	14	;volatile
 13527                           
 13528                           ;pin_manager.c: 69: ANSELC = 0x0F;
 13529  1D1C  300F               	movlw	15
 13530  1D1D  0023               	movlb	3	; select bank3
 13531  1D1E  008E               	movwf	14	;volatile
 13532                           
 13533                           ;pin_manager.c: 70: ANSELA = 0x17;
 13534  1D1F  3017               	movlw	23
 13535  1D20  008C               	movwf	12	;volatile
 13536                           
 13537                           ;pin_manager.c: 75: WPUA = 0x3B;
 13538  1D21  303B               	movlw	59
 13539  1D22  0024               	movlb	4	; select bank4
 13540  1D23  008C               	movwf	12	;volatile
 13541                           
 13542                           ;pin_manager.c: 76: WPUC = 0x30;
 13543  1D24  3030               	movlw	48
 13544  1D25  008E               	movwf	14	;volatile
 13545                           
 13546                           ;pin_manager.c: 77: OPTION_REGbits.nWPUEN = 0;
 13547  1D26  0021               	movlb	1	; select bank1
 13548  1D27  1395               	bcf	21,7	;volatile
 13549                           
 13550                           ;pin_manager.c: 82: ODCONA = 0x00;
 13551  1D28  0025               	movlb	5	; select bank5
 13552  1D29  018C               	clrf	12	;volatile
 13553                           
 13554                           ;pin_manager.c: 83: ODCONC = 0x00;
 13555  1D2A  018E               	clrf	14	;volatile
 13556                           
 13557                           ;pin_manager.c: 85: bool state = (unsigned char)GIE;
 13558  1D2B  3000               	movlw	0
 13559  1D2C  1B8B               	btfsc	11,7	;volatile
 13560  1D2D  3001               	movlw	1
 13561  1D2E  00F3               	movwf	PIN_MANAGER_Initialize@state
 13562                           
 13563                           ;pin_manager.c: 86: GIE = 0;
 13564  1D2F  138B               	bcf	11,7	;volatile
 13565                           
 13566                           ;pin_manager.c: 87: PPSLOCK = 0x55;
 13567  1D30  3055               	movlw	85
 13568  1D31  003C               	movlb	28	; select bank28
 13569  1D32  008F               	movwf	15	;volatile
 13570                           
 13571                           ;pin_manager.c: 88: PPSLOCK = 0xAA;
 13572  1D33  30AA               	movlw	170
 13573  1D34  008F               	movwf	15	;volatile
 13574                           
 13575                           ;pin_manager.c: 89: PPSLOCKbits.PPSLOCKED = 0x00;
 13576  1D35  100F               	bcf	15,0	;volatile
 13577                           
 13578                           ;pin_manager.c: 91: RXPPSbits.RXPPS = 0x14;
 13579  1D36  0815               	movf	21,w	;volatile
 13580  1D37  39E0               	andlw	-32
 13581  1D38  3814               	iorlw	20
 13582  1D39  0095               	movwf	21	;volatile
 13583                           
 13584                           ;pin_manager.c: 92: RA4PPSbits.RA4PPS = 0x04;
 13585  1D3A  003D               	movlb	29	; select bank29
 13586  1D3B  0814               	movf	20,w	;volatile
 13587  1D3C  39F0               	andlw	-16
 13588  1D3D  3804               	iorlw	4
 13589  1D3E  0094               	movwf	20	;volatile
 13590                           
 13591                           ;pin_manager.c: 93: RA5PPSbits.RA5PPS = 0x03;
 13592  1D3F  0815               	movf	21,w	;volatile
 13593  1D40  39F0               	andlw	-16
 13594  1D41  3803               	iorlw	3
 13595  1D42  0095               	movwf	21	;volatile
 13596                           
 13597                           ;pin_manager.c: 94: RC5PPSbits.RC5PPS = 0x09;
 13598  1D43  0825               	movf	37,w	;volatile
 13599  1D44  39F0               	andlw	-16
 13600  1D45  3809               	iorlw	9
 13601  1D46  00A5               	movwf	37	;volatile
 13602                           
 13603                           ;pin_manager.c: 96: PPSLOCK = 0x55;
 13604  1D47  3055               	movlw	85
 13605  1D48  003C               	movlb	28	; select bank28
 13606  1D49  008F               	movwf	15	;volatile
 13607                           
 13608                           ;pin_manager.c: 97: PPSLOCK = 0xAA;
 13609  1D4A  30AA               	movlw	170
 13610  1D4B  008F               	movwf	15	;volatile
 13611                           
 13612                           ;pin_manager.c: 98: PPSLOCKbits.PPSLOCKED = 0x01;
 13613  1D4C  140F               	bsf	15,0	;volatile
 13614                           
 13615                           ;pin_manager.c: 100: GIE = state;
 13616  1D4D  1C73               	btfss	PIN_MANAGER_Initialize@state,0
 13617  1D4E  2D51               	goto	u2430
 13618  1D4F  178B               	bsf	11,7	;volatile
 13619  1D50  0008               	return
 13620  1D51                     u2430:	
 13621  1D51  138B               	bcf	11,7	;volatile
 13622  1D52  0008               	return
 13623  1D53                     __end_of_PIN_MANAGER_Initialize:	
 13624                           
 13625                           	psect	text49
 13626  0803                     __ptext49:	
 13627 ;; *************** function _OSCILLATOR_Initialize *****************
 13628 ;; Defined at:
 13629 ;;		line 84 in file "mcc_generated_files/mcc.c"
 13630 ;; Parameters:    Size  Location     Type
 13631 ;;		None
 13632 ;; Auto vars:     Size  Location     Type
 13633 ;;		None
 13634 ;; Return value:  Size  Location     Type
 13635 ;;                  1    wreg      void 
 13636 ;; Registers used:
 13637 ;;		None
 13638 ;; Tracked objects:
 13639 ;;		On entry : 0/0
 13640 ;;		On exit  : 0/0
 13641 ;;		Unchanged: 0/0
 13642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13646 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13647 ;;Total ram usage:        0 bytes
 13648 ;; Hardware stack levels used:    1
 13649 ;; Hardware stack levels required when called:    1
 13650 ;; This function calls:
 13651 ;;		Nothing
 13652 ;; This function is called by:
 13653 ;;		_SYSTEM_Initialize
 13654 ;; This function uses a non-reentrant model
 13655 ;;
 13656                           
 13657                           
 13658                           ;psect for function _OSCILLATOR_Initialize
 13659  0803                     _OSCILLATOR_Initialize:	
 13660                           
 13661                           ;incstack = 0
 13662                           ; Regs used in _OSCILLATOR_Initialize: []
 13663  0803  0008               	return
 13664  0804                     __end_of_OSCILLATOR_Initialize:	
 13665                           
 13666                           	psect	text50
 13667  198D                     __ptext50:	
 13668 ;; *************** function _FVR_Initialize *****************
 13669 ;; Defined at:
 13670 ;;		line 57 in file "mcc_generated_files/fvr.c"
 13671 ;; Parameters:    Size  Location     Type
 13672 ;;		None
 13673 ;; Auto vars:     Size  Location     Type
 13674 ;;		None
 13675 ;; Return value:  Size  Location     Type
 13676 ;;                  1    wreg      void 
 13677 ;; Registers used:
 13678 ;;		wreg
 13679 ;; Tracked objects:
 13680 ;;		On entry : 0/0
 13681 ;;		On exit  : 0/0
 13682 ;;		Unchanged: 0/0
 13683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13687 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13688 ;;Total ram usage:        0 bytes
 13689 ;; Hardware stack levels used:    1
 13690 ;; Hardware stack levels required when called:    1
 13691 ;; This function calls:
 13692 ;;		Nothing
 13693 ;; This function is called by:
 13694 ;;		_SYSTEM_Initialize
 13695 ;; This function uses a non-reentrant model
 13696 ;;
 13697                           
 13698                           
 13699                           ;psect for function _FVR_Initialize
 13700  198D                     _FVR_Initialize:	
 13701                           
 13702                           ;fvr.c: 60: FVRCON = 0x81;
 13703                           
 13704                           ;incstack = 0
 13705                           ; Regs used in _FVR_Initialize: [wreg]
 13706  198D  3081               	movlw	129
 13707  198E  0022               	movlb	2	; select bank2
 13708  198F  0097               	movwf	23	;volatile
 13709  1990  0008               	return
 13710  1991                     __end_of_FVR_Initialize:	
 13711                           
 13712                           	psect	text51
 13713  19CD                     __ptext51:	
 13714 ;; *************** function _EUSART_Initialize *****************
 13715 ;; Defined at:
 13716 ;;		line 55 in file "mcc_generated_files/eusart.c"
 13717 ;; Parameters:    Size  Location     Type
 13718 ;;		None
 13719 ;; Auto vars:     Size  Location     Type
 13720 ;;		None
 13721 ;; Return value:  Size  Location     Type
 13722 ;;                  1    wreg      void 
 13723 ;; Registers used:
 13724 ;;		wreg
 13725 ;; Tracked objects:
 13726 ;;		On entry : 0/0
 13727 ;;		On exit  : 0/0
 13728 ;;		Unchanged: 0/0
 13729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13733 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13734 ;;Total ram usage:        0 bytes
 13735 ;; Hardware stack levels used:    1
 13736 ;; Hardware stack levels required when called:    1
 13737 ;; This function calls:
 13738 ;;		Nothing
 13739 ;; This function is called by:
 13740 ;;		_SYSTEM_Initialize
 13741 ;; This function uses a non-reentrant model
 13742 ;;
 13743                           
 13744                           
 13745                           ;psect for function _EUSART_Initialize
 13746  19CD                     _EUSART_Initialize:	
 13747                           
 13748                           ;eusart.c: 58: PIE1bits.RCIE = 0;
 13749                           
 13750                           ;incstack = 0
 13751                           ; Regs used in _EUSART_Initialize: [wreg]
 13752  19CD  0021               	movlb	1	; select bank1
 13753  19CE  1291               	bcf	17,5	;volatile
 13754                           
 13755                           ;eusart.c: 59: PIE1bits.TXIE = 0;
 13756  19CF  1211               	bcf	17,4	;volatile
 13757                           
 13758                           ;eusart.c: 61: BAUDCON = 0x08;
 13759  19D0  3008               	movlw	8
 13760  19D1  0023               	movlb	3	; select bank3
 13761  19D2  009F               	movwf	31	;volatile
 13762                           
 13763                           ;eusart.c: 64: RCSTA = 0x90;
 13764  19D3  3090               	movlw	144
 13765  19D4  009D               	movwf	29	;volatile
 13766                           
 13767                           ;eusart.c: 67: TXSTA = 0x24;
 13768  19D5  3024               	movlw	36
 13769  19D6  009E               	movwf	30	;volatile
 13770                           
 13771                           ;eusart.c: 71: SPBRGL = 0xA0;
 13772  19D7  30A0               	movlw	160
 13773  19D8  009B               	movwf	27	;volatile
 13774                           
 13775                           ;eusart.c: 76: SPBRGH = 0x01;
 13776  19D9  3001               	movlw	1
 13777  19DA  009C               	movwf	28	;volatile
 13778                           
 13779                           ;eusart.c: 77: PIE1bits.RCIE = 1;
 13780  19DB  0021               	movlb	1	; select bank1
 13781  19DC  1691               	bsf	17,5	;volatile
 13782                           
 13783                           ;eusart.c: 78: PIR1bits.TXIF=0;
 13784  19DD  0020               	movlb	0	; select bank0
 13785  19DE  1211               	bcf	17,4	;volatile
 13786  19DF  0008               	return
 13787  19E0                     __end_of_EUSART_Initialize:	
 13788                           
 13789                           	psect	text52
 13790  199B                     __ptext52:	
 13791 ;; *************** function _ADC1_Initialize *****************
 13792 ;; Defined at:
 13793 ;;		line 64 in file "mcc_generated_files/adc1.c"
 13794 ;; Parameters:    Size  Location     Type
 13795 ;;		None
 13796 ;; Auto vars:     Size  Location     Type
 13797 ;;		None
 13798 ;; Return value:  Size  Location     Type
 13799 ;;                  1    wreg      void 
 13800 ;; Registers used:
 13801 ;;		wreg, status,2
 13802 ;; Tracked objects:
 13803 ;;		On entry : 0/0
 13804 ;;		On exit  : 0/0
 13805 ;;		Unchanged: 0/0
 13806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13810 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13811 ;;Total ram usage:        0 bytes
 13812 ;; Hardware stack levels used:    1
 13813 ;; Hardware stack levels required when called:    1
 13814 ;; This function calls:
 13815 ;;		Nothing
 13816 ;; This function is called by:
 13817 ;;		_SYSTEM_Initialize
 13818 ;; This function uses a non-reentrant model
 13819 ;;
 13820                           
 13821                           
 13822                           ;psect for function _ADC1_Initialize
 13823  199B                     _ADC1_Initialize:	
 13824                           
 13825                           ;adc1.c: 69: ADCON0 = 0x01;
 13826                           
 13827                           ;incstack = 0
 13828                           ; Regs used in _ADC1_Initialize: [wreg+status,2]
 13829  199B  3001               	movlw	1
 13830  199C  0021               	movlb	1	; select bank1
 13831  199D  009D               	movwf	29	;volatile
 13832                           
 13833                           ;adc1.c: 72: ADCON1 = 0x63;
 13834  199E  3063               	movlw	99
 13835  199F  009E               	movwf	30	;volatile
 13836                           
 13837                           ;adc1.c: 75: ADCON2 = 0x00;
 13838  19A0  019F               	clrf	31	;volatile
 13839                           
 13840                           ;adc1.c: 78: ADRESL = 0x00;
 13841  19A1  019B               	clrf	27	;volatile
 13842                           
 13843                           ;adc1.c: 81: ADRESH = 0x00;
 13844  19A2  019C               	clrf	28	;volatile
 13845  19A3  0008               	return
 13846  19A4                     __end_of_ADC1_Initialize:	
 13847                           
 13848                           	psect	intentry
 13849  0804                     __pintentry:	
 13850 ;; *************** function _INTERRUPT_InterruptManager *****************
 13851 ;; Defined at:
 13852 ;;		line 55 in file "mcc_generated_files/interrupt_manager.c"
 13853 ;; Parameters:    Size  Location     Type
 13854 ;;		None
 13855 ;; Auto vars:     Size  Location     Type
 13856 ;;  t8              1    2[COMMON] unsigned char 
 13857 ;; Return value:  Size  Location     Type
 13858 ;;                  1    wreg      void 
 13859 ;; Registers used:
 13860 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13861 ;; Tracked objects:
 13862 ;;		On entry : 0/0
 13863 ;;		On exit  : 0/0
 13864 ;;		Unchanged: 0/0
 13865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13867 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13868 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13869 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13870 ;;Total ram usage:        3 bytes
 13871 ;; Hardware stack levels used:    1
 13872 ;; This function calls:
 13873 ;;		Nothing
 13874 ;; This function is called by:
 13875 ;;		Interrupt level 1
 13876 ;; This function uses a non-reentrant model
 13877 ;;
 13878                           
 13879  0804                     _INTERRUPT_InterruptManager:	
 13880                           
 13881                           ;incstack = 0
 13882  0804  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 13883                           
 13884                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0]
 13885  0805  3188               	pagesel	$
 13886  0806  0020               	movlb	0	; select bank0
 13887  0807  087F               	movf	127,w
 13888  0808  00F1               	movwf	??_INTERRUPT_InterruptManager+1
 13889                           
 13890                           ;interrupt_manager.c: 58: uint8_t t8;
 13891                           ;interrupt_manager.c: 59: if(INTCONbits.PEIE == 1 && PIE1bits.TMR2IE == 1 && PIR1bits.TM
      +                          R2IF == 1)
 13892  0809  1F0B               	btfss	11,6	;volatile
 13893  080A  2839               	goto	i1l4607
 13894  080B  0021               	movlb	1	; select bank1
 13895  080C  1C91               	btfss	17,1	;volatile
 13896  080D  2839               	goto	i1l4607
 13897  080E  0020               	movlb	0	; select bank0
 13898  080F  1C91               	btfss	17,1	;volatile
 13899  0810  2839               	goto	i1l4607
 13900                           
 13901                           ;interrupt_manager.c: 60: {
 13902                           ;interrupt_manager.c: 62: PIR1bits.TMR2IF = 0;
 13903  0811  1091               	bcf	17,1	;volatile
 13904                           
 13905                           ;interrupt_manager.c: 63: Event |= (1<<1);
 13906  0812  14EB               	bsf	_Event,1	;volatile
 13907                           
 13908                           ;interrupt_manager.c: 64: subTickerX++;
 13909  0813  3001               	movlw	1
 13910  0814  00F0               	movwf	??_INTERRUPT_InterruptManager
 13911  0815  0870               	movf	??_INTERRUPT_InterruptManager,w
 13912  0816  07F8               	addwf	_subTickerX,f
 13913                           
 13914                           ;interrupt_manager.c: 65: subTickerX_1s++;
 13915  0817  3001               	movlw	1
 13916  0818  00F0               	movwf	??_INTERRUPT_InterruptManager
 13917  0819  0870               	movf	??_INTERRUPT_InterruptManager,w
 13918  081A  07EA               	addwf	_subTickerX_1s,f
 13919                           
 13920                           ;interrupt_manager.c: 66: if(subTickerX>=5){
 13921  081B  3005               	movlw	5
 13922  081C  0278               	subwf	_subTickerX,w
 13923  081D  1C03               	skipc
 13924  081E  2821               	goto	i1l4589
 13925                           
 13926                           ;interrupt_manager.c: 67: subTickerX=0;
 13927  081F  01F8               	clrf	_subTickerX
 13928                           
 13929                           ;interrupt_manager.c: 68: Event |= (1<<2);
 13930  0820  156B               	bsf	_Event,2	;volatile
 13931  0821                     i1l4589:	
 13932                           
 13933                           ;interrupt_manager.c: 69: }
 13934                           ;interrupt_manager.c: 70: if(subTickerX_1s>=50){
 13935  0821  3032               	movlw	50
 13936  0822  026A               	subwf	_subTickerX_1s,w
 13937  0823  1C03               	skipc
 13938  0824  2827               	goto	i1l4595
 13939                           
 13940                           ;interrupt_manager.c: 71: subTickerX_1s=0;
 13941  0825  01EA               	clrf	_subTickerX_1s
 13942                           
 13943                           ;interrupt_manager.c: 72: Event |= (1<<3);
 13944  0826  15EB               	bsf	_Event,3	;volatile
 13945  0827                     i1l4595:	
 13946                           
 13947                           ;interrupt_manager.c: 73: }
 13948                           ;interrupt_manager.c: 75: if(eusartRxIdleTime_ms){
 13949  0827  087A               	movf	_eusartRxIdleTime_ms,w	;volatile
 13950  0828  1903               	btfsc	3,2
 13951  0829  2834               	goto	i1l4605
 13952                           
 13953                           ;interrupt_manager.c: 76: eusartRxIdleTime_ms++;
 13954  082A  3001               	movlw	1
 13955  082B  00F0               	movwf	??_INTERRUPT_InterruptManager
 13956  082C  0870               	movf	??_INTERRUPT_InterruptManager,w
 13957  082D  07FA               	addwf	_eusartRxIdleTime_ms,f	;volatile
 13958                           
 13959                           ;interrupt_manager.c: 77: if(eusartRxIdleTime_ms>5){
 13960  082E  3006               	movlw	6
 13961  082F  027A               	subwf	_eusartRxIdleTime_ms,w	;volatile
 13962  0830  1C03               	skipc
 13963  0831  2834               	goto	i1l4605
 13964                           
 13965                           ;interrupt_manager.c: 78: Event|=(1<<0);
 13966  0832  146B               	bsf	_Event,0	;volatile
 13967                           
 13968                           ;interrupt_manager.c: 79: eusartRxIdleTime_ms=0;
 13969  0833  01FA               	clrf	_eusartRxIdleTime_ms	;volatile
 13970  0834                     i1l4605:	
 13971                           
 13972                           ;interrupt_manager.c: 80: }
 13973                           ;interrupt_manager.c: 81: }
 13974                           ;interrupt_manager.c: 82: globalTicker++;
 13975  0834  3001               	movlw	1
 13976  0835  0021               	movlb	1	; select bank1
 13977  0836  07D6               	addwf	_globalTicker^(0+128),f	;volatile
 13978  0837  3000               	movlw	0
 13979  0838  3DD7               	addwfc	(_globalTicker+1)^(0+128),f	;volatile
 13980  0839                     i1l4607:	
 13981                           
 13982                           ;interrupt_manager.c: 83: }
 13983                           ;interrupt_manager.c: 84: if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits.RCIF
      +                           == 1)
 13984  0839  1F0B               	btfss	11,6	;volatile
 13985  083A  2860               	goto	i1l4625
 13986  083B  0021               	movlb	1	; select bank1
 13987  083C  1E91               	btfss	17,5	;volatile
 13988  083D  2860               	goto	i1l4625
 13989  083E  0020               	movlb	0	; select bank0
 13990  083F  1E91               	btfss	17,5	;volatile
 13991  0840  2860               	goto	i1l4625
 13992                           
 13993                           ;interrupt_manager.c: 85: {
 13994                           ;interrupt_manager.c: 87: PIR1bits.RCIF=0;
 13995  0841  1291               	bcf	17,5	;volatile
 13996                           
 13997                           ;interrupt_manager.c: 88: if(1 == RCSTAbits.OERR){
 13998  0842  0023               	movlb	3	; select bank3
 13999  0843  1C9D               	btfss	29,1	;volatile
 14000  0844  2847               	goto	i1l4617
 14001                           
 14002                           ;interrupt_manager.c: 89: RCSTAbits.CREN = 0;
 14003  0845  121D               	bcf	29,4	;volatile
 14004                           
 14005                           ;interrupt_manager.c: 90: RCSTAbits.CREN = 1;
 14006  0846  161D               	bsf	29,4	;volatile
 14007  0847                     i1l4617:	
 14008                           
 14009                           ;interrupt_manager.c: 91: }
 14010                           ;interrupt_manager.c: 92: t8=RCREG;
 14011  0847  0819               	movf	25,w	;volatile
 14012  0848  00F0               	movwf	??_INTERRUPT_InterruptManager
 14013  0849  0870               	movf	??_INTERRUPT_InterruptManager,w
 14014  084A  00F2               	movwf	INTERRUPT_InterruptManager@t8
 14015                           
 14016                           ;interrupt_manager.c: 93: if(eusartRxCount<60){
 14017  084B  303C               	movlw	60
 14018  084C  0279               	subwf	_eusartRxCount,w	;volatile
 14019  084D  1803               	skipnc
 14020  084E  285C               	goto	i1l4623
 14021                           
 14022                           ;interrupt_manager.c: 94: eusartRxBuffer[eusartRxCount]=t8;
 14023  084F  0872               	movf	INTERRUPT_InterruptManager@t8,w
 14024  0850  00F0               	movwf	??_INTERRUPT_InterruptManager
 14025  0851  0879               	movf	_eusartRxCount,w
 14026  0852  3E20               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 14027  0853  0086               	movwf	6
 14028  0854  3001               	movlw	1	; select bank2/3
 14029  0855  0087               	movwf	7
 14030  0856  0870               	movf	??_INTERRUPT_InterruptManager,w
 14031  0857  0081               	movwf	1
 14032                           
 14033                           ;interrupt_manager.c: 95: eusartRxCount++;
 14034  0858  3001               	movlw	1
 14035  0859  00F0               	movwf	??_INTERRUPT_InterruptManager
 14036  085A  0870               	movf	??_INTERRUPT_InterruptManager,w
 14037  085B  07F9               	addwf	_eusartRxCount,f	;volatile
 14038  085C                     i1l4623:	
 14039                           
 14040                           ;interrupt_manager.c: 97: }
 14041                           ;interrupt_manager.c: 98: eusartRxIdleTime_ms=1;
 14042  085C  3001               	movlw	1
 14043  085D  00F0               	movwf	??_INTERRUPT_InterruptManager
 14044  085E  0870               	movf	??_INTERRUPT_InterruptManager,w
 14045  085F  00FA               	movwf	_eusartRxIdleTime_ms	;volatile
 14046  0860                     i1l4625:	
 14047                           
 14048                           ;interrupt_manager.c: 99: }
 14049                           ;interrupt_manager.c: 101: if( PIR1bits.TXIF == 1)
 14050  0860  0020               	movlb	0	; select bank0
 14051  0861  1A11               	btfsc	17,4	;volatile
 14052                           
 14053                           ;interrupt_manager.c: 102: {
 14054                           ;interrupt_manager.c: 103: PIR1bits.TXIF=0;
 14055  0862  1211               	bcf	17,4	;volatile
 14056                           
 14057                           ;interrupt_manager.c: 104: }
 14058                           ;interrupt_manager.c: 106: if(INTCONbits.PEIE == 1 && PIE3bits.PWM2IE == 1 && PIR3bits.P
      +                          WM2IF == 1){
 14059  0863  1F0B               	btfss	11,6	;volatile
 14060  0864  2878               	goto	i1l4641
 14061  0865  0021               	movlb	1	; select bank1
 14062  0866  1E93               	btfss	19,5	;volatile
 14063  0867  2878               	goto	i1l4641
 14064  0868  0020               	movlb	0	; select bank0
 14065  0869  1E93               	btfss	19,5	;volatile
 14066  086A  2878               	goto	i1l4641
 14067                           
 14068                           ;interrupt_manager.c: 108: PIR3bits.PWM2IF = 0;
 14069  086B  1293               	bcf	19,5	;volatile
 14070                           
 14071                           ;interrupt_manager.c: 109: if(PWM2INTFbits.PRIF){
 14072  086C  003B               	movlb	27	; select bank27
 14073  086D  1C2D               	btfss	45,0	;volatile
 14074  086E  2878               	goto	i1l4641
 14075                           
 14076                           ;interrupt_manager.c: 110: PWM2INTFbits.PRIF=0;
 14077  086F  102D               	bcf	45,0	;volatile
 14078                           
 14079                           ;interrupt_manager.c: 111: PWM2DCH = (uint8_t)(pwm2DutyForVout>>8);
 14080  0870  0021               	movlb	1	; select bank1
 14081  0871  0869               	movf	(_pwm2DutyForVout+1)^(0+128),w
 14082  0872  003B               	movlb	27	; select bank27
 14083  0873  00A4               	movwf	36	;volatile
 14084                           
 14085                           ;interrupt_manager.c: 112: PWM2DCL = (uint8_t)(pwm2DutyForVout & 0xff);
 14086  0874  0021               	movlb	1	; select bank1
 14087  0875  0868               	movf	_pwm2DutyForVout^(0+128),w
 14088  0876  003B               	movlb	27	; select bank27
 14089  0877  00A3               	movwf	35	;volatile
 14090  0878                     i1l4641:	
 14091                           
 14092                           ;interrupt_manager.c: 113: }
 14093                           ;interrupt_manager.c: 114: }
 14094                           ;interrupt_manager.c: 115: if(INTCONbits.PEIE == 1 && PIE3bits.PWM1IE == 1 && PIR3bits.P
      +                          WM1IF == 1){
 14095  0878  1F0B               	btfss	11,6	;volatile
 14096  0879  288D               	goto	i1l314
 14097  087A  0021               	movlb	1	; select bank1
 14098  087B  1E13               	btfss	19,4	;volatile
 14099  087C  288D               	goto	i1l314
 14100  087D  0020               	movlb	0	; select bank0
 14101  087E  1E13               	btfss	19,4	;volatile
 14102  087F  288D               	goto	i1l314
 14103                           
 14104                           ;interrupt_manager.c: 116: PIR3bits.PWM1IF = 0;
 14105  0880  1213               	bcf	19,4	;volatile
 14106                           
 14107                           ;interrupt_manager.c: 117: if(PWM1INTFbits.PRIF){
 14108  0881  003B               	movlb	27	; select bank27
 14109  0882  1C1D               	btfss	29,0	;volatile
 14110  0883  288D               	goto	i1l314
 14111                           
 14112                           ;interrupt_manager.c: 118: PWM1INTFbits.PRIF=0;
 14113  0884  101D               	bcf	29,0	;volatile
 14114                           
 14115                           ;interrupt_manager.c: 119: PWM1DCH = (uint8_t)(pwm1DutyForIdrv>>8);
 14116  0885  0021               	movlb	1	; select bank1
 14117  0886  0867               	movf	(_pwm1DutyForIdrv+1)^(0+128),w
 14118  0887  003B               	movlb	27	; select bank27
 14119  0888  0094               	movwf	20	;volatile
 14120                           
 14121                           ;interrupt_manager.c: 120: PWM1DCL = (uint8_t)(pwm1DutyForIdrv&0xff);
 14122  0889  0021               	movlb	1	; select bank1
 14123  088A  0866               	movf	_pwm1DutyForIdrv^(0+128),w
 14124  088B  003B               	movlb	27	; select bank27
 14125  088C  0093               	movwf	19	;volatile
 14126  088D                     i1l314:	
 14127                           ;interrupt_manager.c: 126: else
 14128                           ;interrupt_manager.c: 127: {
 14129                           
 14130                           ;interrupt_manager.c: 121: }
 14131                           ;interrupt_manager.c: 122: }
 14132                           
 14133  088D  0871               	movf	??_INTERRUPT_InterruptManager+1,w
 14134  088E  0020               	movlb	0	; select bank0
 14135  088F  00FF               	movwf	127
 14136  0890  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 14137  0891  0009               	retfie
 14138  0892                     __end_of_INTERRUPT_InterruptManager:	
 14139  007E                     btemp	set	126	;btemp
 14140  007E                     int$flags	set	126
 14141  007E                     wtemp0	set	126


Data Sizes:
    Strings     10
    Constant    17
    Data        20
    BSS         213
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     60      80
    BANK1            80      2      76
    BANK2            80      0      76
    BANK3            80      0      60
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           60      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    crc_append@message	PTR unsigned char  size(2) Largest target is 132
		 -> modbusBuf(BANK3[60]), sysData(BIGRAM[132]), 

    crc_verify@message	PTR unsigned char  size(2) Largest target is 132
		 -> modbusBuf(BANK3[60]), sysData(BIGRAM[132]), 

    crc_sum@buf	PTR unsigned char  size(2) Largest target is 132
		 -> modbusBuf(BANK3[60]), sysData(BIGRAM[132]), 

    m_mem_cpy_len@s	PTR unsigned char  size(2) Largest target is 132
		 -> modbusBuf(BANK3[60]), sysData(BIGRAM[132]), eusartRxBuffer(BANK2[60]), 

    m_mem_cpy_len@d	PTR unsigned char  size(2) Largest target is 60
		 -> crc_verify@expected(BANK0[2]), modbusBuf(BANK3[60]), 

    m_mem_cpy@s	PTR unsigned char  size(2) Largest target is 10
		 -> STR_1(CODE[10]), 

    m_mem_cpy@d	PTR unsigned char  size(1) Largest target is 16
		 -> str(BANK2[16]), 

    modbus_response_process@rbuf	PTR unsigned char  size(1) Largest target is 60
		 -> modbusBuf(BANK3[60]), 

    modbus_response_process@pmdbs	PTR struct . size(1) Largest target is 60
		 -> modbusBuf(BANK3[60]), 

    modbus_response_command@rbuf	PTR unsigned char  size(1) Largest target is 60
		 -> modbusBuf(BANK3[60]), 

    modbus_response_command@pmdbs	PTR struct . size(1) Largest target is 60
		 -> modbusBuf(BANK3[60]), 

    modbus_response_write_mult_register@rbuf	PTR unsigned char  size(1) Largest target is 60
		 -> modbusBuf(BANK3[60]), 

    modbus_response_write_mult_register@stb	PTR struct . size(1) Largest target is 60
		 -> modbusBuf(BANK3[60]), 

    modbus_response_write_single_register@rbuf	PTR unsigned char  size(1) Largest target is 60
		 -> modbusBuf(BANK3[60]), 

    modbus_response_write_single_register@pmdbs	PTR struct . size(1) Largest target is 60
		 -> modbusBuf(BANK3[60]), 

    getRegisterVal@tempData	PTR unsigned int  size(1) Largest target is 2
		 -> modbus_response_command@tempData(BANK0[2]), 

    modbus_response_illgeal_function@buf	PTR unsigned char  size(1) Largest target is 60
		 -> modbusBuf(BANK3[60]), 

    modbus_response_illgeal_function@pmdbs	PTR struct . size(1) Largest target is 60
		 -> modbusBuf(BANK3[60]), 

    my_flash_system_write@buf	PTR unsigned char  size(2) Largest target is 132
		 -> sysData(BIGRAM[132]), 

    my_flash_system_read@buf	PTR unsigned char  size(2) Largest target is 132
		 -> sysData(BIGRAM[132]), 

    uart_send_len@buf	PTR unsigned char  size(1) Largest target is 60
		 -> modbusBuf(BANK3[60]), 

    uart_send_str@str	PTR unsigned char  size(1) Largest target is 16
		 -> str(BANK2[16]), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_adc_sample
    _main->_uart_send_len
    _sys_data_init->___wmul
    _sys_data_init->_my_flash_system_read
    _pid_pwm2_vout_run->___awdiv
    _pid_pwm2_vout_run->___lwdiv
    _set_vout_pwm2_duty->_get_vout_pwm2_duty
    _pid_pwm1_idrv_run->___aldiv
    _pid_pwm1_idrv_b_b->___aldiv
    _pid_pwm1_idrv_b_b->___lwdiv
    _set_idrv_pwm1_duty->_get_idrv_pwm1_duty
    ___lwdiv->___wmul
    _modbus_response_write_single_register->_uart_send_len
    _modbus_response_write_mult_register->_uart_send_len
    _sys_data_save->_my_flash_system_write
    _my_flash_read_system_erase->_FLASH_EraseBlock
    _modbus_response_illgeal_function->_uart_send_len
    _modbus_response_command->_uart_send_len
    _crc_append->_crc_sum
    _crc_verify->_crc_sum
    _calc_temp_rs->___lmul
    _calc_temp_rc->___lmul
    _calc_rs_lo_avg->___lldiv
    _calc_expect_vout_adc_value->___aldiv
    ___aldiv->___lmul
    _adc_sample->_fvr_set_gain
    _TMR2_Initialize->_TMR2_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_calc_expect_vout_adc_value
    _pid_pwm2_vout_run->___lwdiv
    _set_vout_pwm2_duty->_get_vout_pwm2_duty
    _pid_pwm1_idrv_run->___aldiv
    _pid_pwm1_idrv_b_b->___aldiv
    _set_idrv_pwm1_duty->_get_idrv_pwm1_duty
    ___lwdiv->___wmul
    _modbus_response_process->_modbus_response_write_single_register
    _modbus_response_write_single_register->_crc_append
    _modbus_response_write_mult_register->_crc_append
    _sys_data_save->_crc_append
    _modbus_response_illgeal_function->_crc_append
    _modbus_response_command->_crc_append
    _crc_append->_crc_sum
    _crc_verify->_crc_sum
    _calc_temp_rs->___lldiv
    _calc_temp_rc->___lldiv
    _calc_rs_lo_avg->___lldiv
    _calc_expect_vout_adc_value->___aldiv
    ___aldiv->___lmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   55575
                                              0 BANK1      2     2      0
                  _SYSTEM_Initialize
                         _adc_sample
         _calc_expect_vout_adc_value
                     _calc_rs_lo_avg
                       _calc_temp_rc
                       _calc_temp_rs
                          _m_mem_cpy
                      _m_mem_cpy_len
            _modbus_response_process
                  _pid_pwm1_idrv_b_b
                  _pid_pwm1_idrv_run
                  _pid_pwm2_vout_run
                      _sys_data_init
                      _sys_data_save
                _uart_received_start
                      _uart_send_len
                      _uart_send_str
 ---------------------------------------------------------------------------------
 (1) _uart_send_str                                        2     2      0      75
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _uart_received_start                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sys_data_init                                       10    10      0    5692
                                             19 BANK0     10    10      0
                             ___wmul
                         _crc_verify
               _my_flash_system_read
                      _sys_data_save
 ---------------------------------------------------------------------------------
 (2) _my_flash_system_read                                11     7      4     386
                                              3 COMMON     4     0      4
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _pid_pwm2_vout_run                                    6     6      0    1552
                                              9 BANK0      6     6      0
                            ___awdiv
                            ___lwdiv
                 _set_vout_pwm2_duty
 ---------------------------------------------------------------------------------
 (2) _set_vout_pwm2_duty                                   4     2      2     275
                                              2 BANK0      4     2      2
                 _get_vout_pwm2_duty
 ---------------------------------------------------------------------------------
 (3) _get_vout_pwm2_duty                                   6     4      2      40
                                              3 COMMON     4     2      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     428
                                              3 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _pid_pwm1_idrv_run                                   24    24      0    4442
                                             22 BANK0     20    20      0
                            ___aldiv
                             ___lmul
                 _set_idrv_pwm1_duty
 ---------------------------------------------------------------------------------
 (1) _pid_pwm1_idrv_b_b                                   12    12      0    5534
                                             22 BANK0     12    12      0
                            ___aldiv
                             ___lmul
                            ___lwdiv
                             ___wmul
                 _set_idrv_pwm1_duty
 ---------------------------------------------------------------------------------
 (2) _set_idrv_pwm1_duty                                   4     2      2     506
                                              2 BANK0      4     2      2
                 _get_idrv_pwm1_duty
 ---------------------------------------------------------------------------------
 (3) _get_idrv_pwm1_duty                                   6     4      2      40
                                              3 COMMON     4     2      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     598
                                              3 COMMON     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     546
                                              7 COMMON     1     1      0
                                              2 BANK0      7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _modbus_response_process                              6     4      2   20751
                                             32 BANK0      6     4      2
                         _crc_verify
            _modbus_response_command
   _modbus_response_illgeal_function
_modbus_response_write_mult_register
_modbus_response_write_single_regist
 ---------------------------------------------------------------------------------
 (2) _modbus_response_write_single_register               13    13      0    6134
                                             19 BANK0     13    13      0
                         _crc_append
                      _sys_data_save
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (2) _modbus_response_write_mult_register                  5     5      0    5568
                                             19 BANK0      5     5      0
                         _crc_append
                      _sys_data_save
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (1) _sys_data_save                                        0     0      0    2778
                         _crc_append
         _my_flash_read_system_erase
              _my_flash_system_write
 ---------------------------------------------------------------------------------
 (2) _my_flash_system_write                               17    13      4     627
                                              3 COMMON     4     0      4
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (2) _my_flash_read_system_erase                           0     0      0     451
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_EraseBlock                                     3     1      2     451
                                              3 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (2) _modbus_response_illgeal_function                     4     3      1    2675
                                             19 BANK0      4     3      1
                         _crc_append
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (2) _modbus_response_command                             12    12      0    4251
                                             19 BANK0     12    12      0
                         _crc_append
                     _getRegisterVal
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (1) _uart_send_len                                        5     4      1     583
                                              3 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (3) _getRegisterVal                                      10     7      3     945
                                              3 COMMON     3     0      3
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (2) _crc_append                                          11     7      4    1700
                                              8 BANK0     11     7      4
                            _crc_sum
 ---------------------------------------------------------------------------------
 (2) _crc_verify                                          10     6      4    1697
                                              8 BANK0     10     6      4
                            _crc_sum
                      _m_mem_cpy_len
 ---------------------------------------------------------------------------------
 (3) _m_mem_cpy_len                                        7     1      6     484
                                              3 COMMON     1     1      0
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (3) _crc_sum                                             12     8      4     679
                                              3 COMMON     4     0      4
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (1) _m_mem_cpy                                            4     2      2     278
                                              3 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _calc_temp_rs                                        16    12      4    3079
                                             13 BANK0     16    12      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) _calc_temp_rc                                        20    16      4    3147
                                             13 BANK0     20    16      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) _calc_rs_lo_avg                                       9     7      2    1262
                                              4 COMMON     2     2      0
                                             13 BANK0      7     5      2
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     857
                                              3 COMMON     1     1      0
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _calc_expect_vout_adc_value                          38    36      2    4704
                                             22 BANK0     38    36      2
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8    1984
                                              3 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8    1677
                                              7 COMMON     1     1      0
                                              8 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _adc_sample                                          12    10      2    1105
                                              6 COMMON     2     0      2
                                              0 BANK0     10    10      0
                           _adc_init
                       _fvr_set_gain
 ---------------------------------------------------------------------------------
 (2) _fvr_set_gain                                         3     3      0      69
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _adc_init                                             2     2      0      22
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     109
                    _ADC1_Initialize
                  _EUSART_Initialize
                     _FVR_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM1_Initialize
                    _PWM2_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0      86
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR2_SetInterruptHandler                             2     0      2      86
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           3     3      0      23
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _ADC1_Initialize
     _EUSART_Initialize
     _FVR_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM1_Initialize
     _PWM2_Initialize
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
       _TMR2_StartTimer
     _WDT_Initialize
   _adc_sample
     _adc_init
     _fvr_set_gain
   _calc_expect_vout_adc_value
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _calc_rs_lo_avg
     ___lldiv
   _calc_temp_rc
     ___lldiv
     ___lmul
   _calc_temp_rs
     ___lldiv
     ___lmul
   _m_mem_cpy
   _m_mem_cpy_len
   _modbus_response_process
     _crc_verify
       _crc_sum
       _m_mem_cpy_len
     _modbus_response_command
       _crc_append
         _crc_sum
       _getRegisterVal
       _uart_send_len
     _modbus_response_illgeal_function
       _crc_append
         _crc_sum
       _uart_send_len
     _modbus_response_write_mult_register
       _crc_append
         _crc_sum
       _sys_data_save
         _crc_append
           _crc_sum
         _my_flash_read_system_erase
           _FLASH_EraseBlock
         _my_flash_system_write
       _uart_send_len
     _modbus_response_write_single_register
       _crc_append
         _crc_sum
       _sys_data_save
         _crc_append
           _crc_sum
         _my_flash_read_system_erase
           _FLASH_EraseBlock
         _my_flash_system_write
       _uart_send_len
   _pid_pwm1_idrv_b_b
     ___aldiv
       ___lmul (ARG)
     ___lmul
     ___lwdiv
       ___wmul (ARG)
     ___wmul
     _set_idrv_pwm1_duty
       _get_idrv_pwm1_duty
   _pid_pwm1_idrv_run
     ___aldiv
       ___lmul (ARG)
     ___lmul
     _set_idrv_pwm1_duty
       _get_idrv_pwm1_duty
   _pid_pwm2_vout_run
     ___awdiv
     ___lwdiv
       ___wmul (ARG)
     _set_vout_pwm2_duty
       _get_vout_pwm2_duty
   _sys_data_init
     ___wmul
     _crc_verify
       _crc_sum
       _m_mem_cpy_len
     _my_flash_system_read
     _sys_data_save
       _crc_append
         _crc_sum
       _my_flash_read_system_erase
         _FLASH_EraseBlock
       _my_flash_system_write
   _sys_data_save
     _crc_append
       _crc_sum
     _my_flash_read_system_erase
       _FLASH_EraseBlock
     _my_flash_system_write
   _uart_received_start
   _uart_send_len
   _uart_send_str

 _INTERRUPT_InterruptManager (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3E0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3C      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      2      4C       7       95.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4C       9       95.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      3C      11       75.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     12F      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              3C      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           20      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     12F      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Mon Nov 26 23:45:07 2018

              __end_of_TMR2_SetInterruptHandler 199B                                               pc 0002  
                  ??_my_flash_read_system_erase 0076                                    ___awdiv@sign 0021  
                        __end_of_FVR_Initialize 1991                             ___wmul@multiplicand 0075  
                                           l513 1BB9                                             l642 19F4  
                                           l715 0D05                                             l636 1A1B  
                                           l654 1ED2                                             l662 1222  
                                           l648 1EB7                                             l673 0B23  
                                           l818 102A                                             l667 1591  
                                           l499 1B07                                             l764 1393  
                                           l684 0AF6                                             l854 0FC3  
                                           l694 1307                                             l767 13F2  
                                           l696 134D                                             l689 17EF  
                                           _GIE 005F                                             _PR2 001B  
                               _pwm1DutyForIdrv 00E6                                             _bbu 00BC  
                                           _err 00A0                                             _str 015C  
                               _TMR2_Initialize 19E0                                             wreg 0009  
                          ??_get_vout_pwm2_duty 0075                            ??_set_vout_pwm2_duty 0077  
                               ??_uart_send_len 0074                                 ??_uart_send_str 0073  
                                          S5921 1800                                            S5919 1839  
                                          l1200 10B9                                            l1121 1E53  
                                          l1123 1E71                                   calc_temp_rc@x 0039  
                                 calc_temp_rc@y 003D                                            l1145 1AC9  
                                          l4101 1C49                                            l4111 1C64  
                                          l5001 160C                                            l5011 1638  
                                          l5003 1615                                            l4107 1C5B  
                                          l4035 1D69                                            l5013 1641  
                                          l5005 161E                                            l4061 1DA0  
                                          l4053 1D8F                                            l4045 1D71  
                                          l4029 1D5E                                            l5007 1626  
                                          l4047 1D7D                                            l5103 1CE3  
                                          l5009 162F                                            l5017 1649  
                                          l4057 1D98                                            l5105 1D0E  
                                          l5115 1C9E                                            l5019 1656  
                                          l5203 0FC5                                            l5029 167A  
                                          l4149 1B00                                            l5207 0FCB  
                                          l5151 0EC4                                            l5305 1BDB  
                                          l5049 1ADD                                            l3481 1BB5  
                                          l5145 0EB4                                            l5171 0F18  
                                          l5163 0EFA                                            l4099 1C3D  
                                          l3725 1A14                                            l5405 1EC5  
                                          l5309 1BE6                                            l5421 120E  
                                          l5407 1EFB                                            l5335 10DA  
                                          l5327 10CA                                            l5423 121A  
                                          l5263 144F                                            l5353 1121  
                                          l5345 1108                                            l5337 10E8  
                                          l5441 1589                                            l4481 1B1F  
                                          l5363 1DB6                                            l4483 1B3B  
                                          l5275 1450                                            l5291 1AC2  
                                          l5531 17D0                                            l5349 1113  
                                          l5605 0B91                                            l5373 1DE4  
                                          l5365 1DC4                                            l5277 1482  
                                          l5197 0F90                                            l5461 0925  
                                          l5453 0900                                            l5533 17D8  
                                          l5623 0C33                                            l5439 157D  
                                          l5455 090E                                            l5447 08FE  
                                          l5535 17E7                                            l5551 1318  
                                          l5609 0B9C                                            l5377 1DEF  
                                          l4921 13A9                                            l5473 0942  
                                          l5395 1EC2                                            l4931 13C5  
                                          l5459 0917                                            l5563 135E  
                                          l5803 0E59                                            l5629 0C4C  
                                          l5581 1079                                            l5573 1055  
                                          l4909 138E                                            l5469 0939  
                                          l5661 12CF                                            l5495 0ABB  
                                          l5655 127E                                            l5815 0E92  
                                          l5807 0E62                                            l4929 13C3  
                                          l5681 1E27                                            l5497 0AC5  
                                          l5817 0E95                                            l5745 0D3E  
                                          l4939 13DA                                            l5683 1E2C  
                                          l5675 1E13                                            l5755 0D63  
                                          l5747 0D41                                            l5597 0B2E  
                                          l4893 1E98                                            l4949 13FA  
                                          l5685 1E31                                   calc_temp_rs@x 0035  
                                 calc_temp_rs@y 0039                                            l4895 1E9D  
                                          l4887 1E83                                            l4991 15D8  
                                          l4983 15A0                                            l5679 1E22  
                                          l4993 15E5                                            l4985 15A8  
                                          l5689 1E38                                            l4995 15F2  
                                          l4987 15B8                                            l4997 15FA  
                                          l4989 15CB                                            l5789 0E11  
                                          l4999 1603                                            STR_1 182F  
                       __end_of_PWM1_Initialize 1A37                                            u3005 1D74  
                                          _LATA 010C                                            _LATC 010E  
                                          u3025 1D7E                                            u3035 1D88  
                                          u3045 1D90                                            u2430 1D51  
                                          u3155 1C40                                            u4215 1E59  
                                          u3175 1C4A                                            u4225 1378  
                                          u3185 1C54                                            u4305 1AAD  
                                          u5105 1300                                            u3195 1C5C  
                                          u5115 1311                                            u5213 0C28  
                                          u5053 0AE4                                            u5125 1346  
                                          u4255 13B7                                            u5063 0B11  
                                          u5135 1357                                            u5233 0C45  
                                          u4515 0F39                                            u4355 1B7A  
                                          u4285 1399                                            u4365 1B9E  
                                          u5405 0DA0                                            u5175 0B62  
                                          u4455 0ED1                                            u4295 1A91  
                                          u4375 1CE9                                            u5415 0DB7  
                                          u5185 0B84                                            u4385 1C9A  
                                          u5425 0DCD                                            u4715 1BE7  
                                          u4635 142A                                            u4805 10FD  
                                          u4725 1BEE                                            u4815 1109  
                                          u4675 1ACA                                            u4685 1ACF  
                                          u5567 1EB2                                            u4775 10DD  
                                          u4855 1DB9                                            u4945 1EDF  
                                          u4955 1EE8                                            u4795 10E9  
                                          u4875 1DC5                                            u4965 1ECE  
                                          u4885 1DD9                                            u4895 1DE5  
                                 _m_mem_cpy_len 1ADD                                            _TMR2 001A  
                                          _WPUA 020C                                            _WPUC 020E  
                                          _bbt0 00C8                                            _bbt1 00C6  
                                          _bbta 00C0                                            _bbku 00B8  
                                          _bbtu 005C                                            _main 0D0A  
modbus_response_write_single_register@startAddr 003E                                            _pidU 00E2  
           __size_of_my_flash_read_system_erase 0023                                            fsr0h 0005  
                                          fsr1h 0007                                            indf0 0000  
                                          fsr0l 0004                                            indf1 0001  
                                          fsr1l 0006                                            btemp 007E  
                                          start 0892                                 _pwm2DutyForVout 00E8  
                     ??_modbus_response_command 0033                             pid_pwm1_idrv_run@ei 0042  
                           pid_pwm1_idrv_run@ep 003E                         __end_of_PWM2_Initialize 1A50  
                     ??_modbus_response_process 0042                                 ?_FVR_Initialize 0070  
                __size_of_OSCILLATOR_Initialize 0001                   __end_of_OSCILLATOR_Initialize 0804  
                               __end_of___aldiv 112A                                           ?_main 0070  
                               __end_of___awdiv 1DA5                                 __end_of___lldiv 1DF8  
                               ___awdiv@divisor 0073                                           _T2CON 001C  
                               __end_of___lwdiv 1C69                                           i1l314 088D  
                               ___awdiv@counter 0020                                           _RCREG 0199  
                                         _RCSTA 019D                                           _TRISA 008C  
                                         _TRISC 008E                                           _TXREG 019A  
                                         _TXSTA 019E                modbus_response_command@startAddr 0037  
                           ___lmul@multiplicand 0024                                           _PidKp 0062  
                                         _PidTd 00CC                                           _Event 006B  
                                         _PidTi 00CE                                 __end_of_crc_sum 1EA2  
                          pid_pwm1_idrv_b_b@t32 003E                                           _bbmax 00DE  
                                         _bbmin 00DA                                  _WDT_Initialize 1991  
                                         _resRc 006E                                           _resRs 006C  
        modbus_response_write_mult_register@len 0035                                  ?_m_mem_cpy_len 0020  
        modbus_response_write_mult_register@stb 0037                      __end_of_get_idrv_pwm1_duty 1AA3  
                    __end_of_set_idrv_pwm1_duty 1B88                              crc_verify@expected 0030  
                                         status 0003                                           wtemp0 007E  
                               _TMR2_StartTimer 198A                                   fvr_set_gain@g 0075  
   __end_of_modbus_response_write_mult_register 11B1    __size_of_modbus_response_write_mult_register 0087  
         ??_modbus_response_write_mult_register 0033            ?_modbus_response_write_mult_register 0070  
           _modbus_response_write_mult_register 112A              __end_of_calc_expect_vout_adc_value 0D0A  
                    _calc_expect_vout_adc_value 0B24                                __end_of_HexTable 182F  
                          pid_pwm1_idrv_run@t32 0046                                 __initialization 0894  
                                  __end_of_main 0E97                           __size_of_calc_temp_rc 00D9  
                         __size_of_calc_temp_rs 0090                         __end_of_TMR2_Initialize 19F3  
                   ?_INTERRUPT_InterruptManager 0070             modbus_response_illgeal_function@buf 0035  
                      _TMR2_SetInterruptHandler 1995                                          ??_main 00EA  
                              ??_calc_rs_lo_avg 0074                     modbus_response_process@rbuf 0045  
                 __size_of_my_flash_system_read 003D                     modbus_response_process@rlen 0040  
                   modbus_response_process@resp 0043                 __end_of_modbus_response_command 14BF  
                        __end_of_WDT_Initialize 1995                    my_flash_system_write@blocNum 0025  
                                        _ADCON0 009D                                          _ADCON1 009E  
                                        _ADCON2 009F                                          _ADRESH 009C  
                                        _ADRESL 009B                                ___awdiv@dividend 0075  
                                        _ANSELA 018C                                          _ANSELC 018E  
               __end_of_modbus_response_process 1E4C                                __end_of_adc_init 1A07  
                              ?_PWM1_Initialize 0070                                          _ODCONA 028C  
                                        _ODCONC 028E                                          i1l4605 0834  
                                        i1l4623 085C                                          i1l4607 0839  
                                        i1l4641 0878                                          i1l4617 0847  
                                        i1l4625 0860                                          i1l4595 0827  
                                        i1l4589 0821                                          _FVRCON 0117  
                                        _PMADRH 0192                                          _PMADRL 0191  
                                        _PMDATH 0194                                          _PMDATL 0193  
                                        _PMCON2 0196                       __size_of_FLASH_EraseBlock 001C  
                   __end_of_uart_received_start 19BD                                          _SPBRGH 019C  
                                        _SPBRGL 019B                                          _WDTCON 0097  
                                  _calc_temp_rc 14BF                                    _calc_temp_rs 11B1  
                               calc_rs_lo_avg@i 0033                                 calc_rs_lo_avg@x 002D  
            __end_of_my_flash_read_system_erase 1B64                      _my_flash_read_system_erase 1B41  
    modbus_response_write_single_register@pmdbs 003C                                          ___lmul 1BD3  
                                     ??___aldiv 0077                                          ___wmul 1ABF  
                                     ??___awdiv 0077                                       ??___lldiv 0073  
                                     ??___lwdiv 0077                                ?_PWM2_Initialize 0070  
                                        _pwm2Ei 00C4                                ___awdiv@quotient 0022  
                      my_flash_system_write@buf 0073                        my_flash_system_write@len 0075  
                      my_flash_system_write@loc 0027                                       ??_crc_sum 0020  
                      __size_of_ADC1_Initialize 0009                                 ?_WDT_Initialize 0070  
                               ??_m_mem_cpy_len 0073                my_flash_system_write@GIEBitValue 0022  
                       __end_of_TMR2_StartTimer 198D        TMR2_SetInterruptHandler@InterruptHandler 0073  
               modbus_response_command@tempData 003D        __end_of_modbus_response_illgeal_function 1047  
     __size_of_modbus_response_illgeal_function 0042              ??_modbus_response_illgeal_function 0034  
             ?_modbus_response_illgeal_function 0033                _modbus_response_illgeal_function 1005  
                                 ?_fvr_set_gain 0070                                  fvr_set_gain@t8 0074  
                             _SYSTEM_Initialize 1A50                         __end_of__initialization 08E9  
                        __size_of_sys_data_init 0091                           _my_flash_system_write 1366  
                            ?_SYSTEM_Initialize 0070                          __size_of_sys_data_save 0037  
                            getRegisterVal@addr 0073                                  __pcstackCOMMON 0070  
                                  __pidataBANK0 1001                                    __pidataBANK1 19BD  
                           ??_SYSTEM_Initialize 0075                                      _adc_sample 1EA2  
        modbus_response_write_single_register@i 003A                                ?_TMR2_Initialize 0070  
                                _OPTION_REGbits 0095        modbus_response_write_single_register@t16 0038  
                             crc_append@message 0028                          getRegisterVal@tempAddr 0026  
                        my_flash_system_write@i 002B                          my_flash_system_write@j 0023  
                        getRegisterVal@tempData 0075                       __end_of_SYSTEM_Initialize 1A6B  
                                ??_fvr_set_gain 0073                              __size_of_m_mem_cpy 0023  
                                    __pbssBANK0 005C                                      __pbssBANK1 00A0  
                                    __pbssBANK2 0120                                      __pbssBANK3 01A0  
                modbus_response_command@tmpAddr 0035                 my_flash_system_read@GIEBitValue 0022  
                                    adc_init@ch 0074                                ??_FVR_Initialize 0073  
                                    __pmaintext 0D0A                      modbus_response_command@len 003B  
                                       ?___lmul 0020                                         ?___wmul 0073  
                                    __pintentry 0804                    ??_calc_expect_vout_adc_value 0038  
                                       _BAUDCON 019F                                  ___lmul@product 0073  
                                    _crc_append 1C03                                       ?_adc_init 0070  
                                  adc_sample@ch 0023                                   _sys_data_init 1241  
                                 _sys_data_save 1CA0                                      _crc_verify 1C69  
                                 _eusartRxCount 0079                     __size_of_get_vout_pwm2_duty 001C  
                   __size_of_set_vout_pwm2_duty 0024                                         _PWM1DCH 0D94  
                                       _PWM1DCL 0D93                                         _PWM2DCH 0DA4  
                                       _PWM2DCL 0DA3                                         _PWM1CON 0D9B  
                                       _PWM2CON 0DAB                                         _PWM1OFH 0D98  
                                       _PWM1OFL 0D97                                         _PWM2OFH 0DA8  
                                       _PWM1PHH 0D92                                         _PWM2OFL 0DA7  
                                       _PWM1PHL 0D91                                         _PWM2PHH 0DA2  
                                       _PWM2PHL 0DA1                                         _PWM1PRH 0D96  
                                       _PWM1PRL 0D95                                         _PWM2PRH 0DA6  
                                       _PWM2PRL 0DA5           modbus_response_illgeal_function@pmdbs 0036  
                                       _PPSLOCK 0E0F                               ??_ADC1_Initialize 0073  
                              ?_TMR2_StartTimer 0070                          set_idrv_pwm1_duty@duty 0022  
                         __end_of_uart_send_len 1BD3                           __end_of_uart_send_str 1B1E  
                              _FLASH_EraseBlock 1A6B                          ?_my_flash_system_write 0073  
                       __size_of_getRegisterVal 00F9                               uart_send_len@xlen 0075  
                   ?_calc_expect_vout_adc_value 0036     modbus_response_write_single_register@fiSave 0037  
                    ??_TMR2_SetInterruptHandler 0075                                         ___aldiv 10A8  
                                       ___awdiv 1D53                                 __size_of___lmul 0030  
                                       ___lldiv 1DA5                                 __size_of___wmul 001E  
                            _get_idrv_pwm1_duty 1A87                              _set_idrv_pwm1_duty 1B64  
                                       ___lwdiv 1C34                                     ?_adc_sample 0076  
                             __end_of_m_mem_cpy 1B41                                  adc_sample@gfvr 0076  
                                    _pidTestNum 0068                                  ?_sys_data_init 0070  
                                ?_sys_data_save 0070                                      ??_adc_init 0073  
                                       __ptext1 1AFC                                         __ptext2 19B0  
                                       __ptext3 1241                                         __ptext4 1CD7  
                                       __ptext5 12D2                                         __ptext6 1B88  
                                       __ptext7 1AA3                                         __ptext8 1D53  
                                       __ptext9 1691                                         _crc_sum 1E4C  
                                       _pidBbSm 0069                             ?_get_idrv_pwm1_duty 0073  
                           ?_set_idrv_pwm1_duty 0022                           _OSCILLATOR_Initialize 0803  
                                     _T2CONbits 001C                                      _rsLoAvgBuf 00AC  
                                       _rsLoAvg 005E                                ___aldiv@dividend 002C  
                      ??_PIN_MANAGER_Initialize 0073                                         _sysData 235C  
                    __size_of_SYSTEM_Initialize 001B                                         clrloop0 19A5  
                          end_of_initialization 08E9                                         init_ram 0FF4  
                      ?_modbus_response_command 0070                                         initloop 0FF5  
                  __end_of_my_flash_system_read 1D14                            ??_get_idrv_pwm1_duty 0075  
                           pid_pwm2_vout_run@ei 002B                            ??_set_idrv_pwm1_duty 0077  
                             _EUSART_Initialize 19CD                                 ___lldiv@divisor 0020  
                                    _voExpectMv 00CA                                 ___lldiv@counter 002C  
                            ?_EUSART_Initialize 0070                        ?_modbus_response_process 0040  
                                     _RCSTAbits 019D                     ?_my_flash_read_system_erase 0070  
                              ___aldiv@quotient 0032                                       _PWM1LDCON 0D9F  
                                     _PWM2LDCON 0DAF                                       _PWM1OFCON 0DA0  
                                     _PWM2OFCON 0DB0                            __end_of_fvr_set_gain 1A1E  
                                   ?_crc_append 0028                                      _subTickerX 0078  
                           ??_EUSART_Initialize 0073                                ??_WDT_Initialize 0073  
                                   ?_crc_verify 0028                                      crc_sum@crc 0026  
                                    crc_sum@buf 0073                                      crc_sum@len 0075  
                                     _RXPPSbits 0E15                             __size_of_adc_sample 005E  
                     __end_of_EUSART_Initialize 19E0                                    _globalTicker 00D6  
                                     _TXSTAbits 019E                        __size_of_PWM1_Initialize 0019  
                  __size_of_uart_received_start 000D                    _TMR2_DefaultInterruptHandler 0000  
                               ??_sys_data_init 0033                                      m_mem_cpy@d 0076  
                               ??_sys_data_save 0077                                      m_mem_cpy@s 0073  
                                __end_of___lmul 1C03                                  __end_of___wmul 1ADD  
                              _voExpectAdcValue 0060                                  _rtAdcValueRcHi 00D2  
                                _rtAdcValueRcLo 0064                                  _rtAdcValueRsHi 00D4  
                                _rtAdcValueVoFb 00D0                                  _rtAdcValueRsLo 0066  
                        ?_OSCILLATOR_Initialize 0070                               crc_verify@message 0028  
                           start_initialization 0894                        __size_of_PWM2_Initialize 0019  
               __size_of_PIN_MANAGER_Initialize 003F                                   _PWM1LDCONbits 0D9F  
                       my_flash_system_read@buf 0073                         my_flash_system_read@len 0075  
                         __end_of_m_mem_cpy_len 1AFC                                   _PWM2LDCONbits 0DAF  
                                _getRegisterVal 1598                         __size_of_calc_rs_lo_avg 0061  
                           __size_of_crc_append 0031                             __size_of_crc_verify 0037  
     modbus_response_write_single_register@rbuf 003D                                        ??___lmul 0073  
                                      ??___wmul 0077                                     __pdataBANK0 006C  
                                   __pdataBANK1 00DA                     FLASH_EraseBlock@GIEBitValue 0075  
                               _ADC1_Initialize 199B                        __end_of_FLASH_EraseBlock 1A87  
                          _my_flash_system_read 1CD7                                     __pbssBIGRAM 235C  
                             __size_of_adc_init 0014                                     __pbssCOMMON 0078  
                                     ___latbits 0002                               getRegisterVal@t16 0024  
                                 __pcstackBANK0 0020                                   __pcstackBANK1 00EA  
                      __size_of_TMR2_Initialize 0013                         ??_my_flash_system_write 0020  
                        __end_of_getRegisterVal 1691                           my_flash_system_read@i 0025  
                    __size_of_EUSART_Initialize 0013         modbus_response_illgeal_function@errcode 0033  
                         __size_of_fvr_set_gain 0017                                ___lwdiv@dividend 0024  
                        _PIN_MANAGER_Initialize 1D14                     modbus_response_command@rbuf 003C  
                                      ?___aldiv 0028                           get_idrv_pwm1_duty@t16 0020  
                                      ?___awdiv 0073                                        ?___lldiv 0020  
                                  ??_adc_sample 0020                                     adc_sample@i 0024  
                                      ?___lwdiv 0022                               ??_PWM1_Initialize 0073  
                  ??_INTERRUPT_InterruptManager 0070                           set_idrv_pwm1_duty@t16 0024  
                                     __pswtext1 1839                                       __pswtext2 1800  
                                      ?_crc_sum 0073                   my_flash_system_read@flashAddr 0023  
                    __end_of_get_vout_pwm2_duty 1ABF                           ?_my_flash_system_read 0073  
                    __end_of_set_vout_pwm2_duty 1BAC                                       _m_mem_cpy 1B1E  
                              uart_send_len@buf 0077                                uart_send_len@len 0073  
                                 adc_sample@t16 0028                                ___lwdiv@quotient 0026  
                                 adc_sample@ret 0026                                   adc_sample@num 0077  
                               ?_getRegisterVal 0073                                uart_send_str@str 0074  
                                  _fvr_set_gain 1A07                                  _eusartRxBuffer 0120  
                                     _modbusBuf 01A0                                 ___aldiv@divisor 0028  
                             ??_PWM2_Initialize 0073                              __end_of_adc_sample 1F00  
                               ___aldiv@counter 0030                                  ___wmul@product 0020  
                                     _pidpwm2_U 00E4                               _pid_pwm1_idrv_b_b 08ED  
                             _pid_pwm1_idrv_run 1691                                       clear_ram0 19A4  
                                m_mem_cpy_len@d 0020                                  m_mem_cpy_len@s 0022  
                                 ?_calc_temp_rc 002D                                   ?_calc_temp_rs 002D  
                                      _PIE1bits 0091                                        _PIE3bits 0093  
                      __size_of_TMR2_StartTimer 0003                          set_vout_pwm2_duty@duty 0022  
                            ?_pid_pwm1_idrv_b_b 0070             __size_of_INTERRUPT_InterruptManager 008E  
                            ?_pid_pwm1_idrv_run 0070                         __end_of_ADC1_Initialize 19A4  
                                      _PIR1bits 0011                                        _PIR3bits 0013  
                     FLASH_EraseBlock@startAddr 0073                                        _PWM1INTE 0D9C  
                                      _PWM1INTF 0D9D                                        _PWM2INTE 0DAC  
                                      _PWM2INTF 0DAD                                        _PWM1TMRH 0D9A  
                                      _PWM1TMRL 0D99                                        _PWM2TMRH 0DAA  
                                      _PWM2TMRL 0DA9                             ??_pid_pwm1_idrv_b_b 0036  
                                  ??_crc_append 002C                __size_of_modbus_response_command 00BF  
                           ??_pid_pwm1_idrv_run 0036                          __size_of_uart_send_len 0027  
                        __size_of_uart_send_str 0022                                      _ADCON0bits 009D  
                             ___wmul@multiplier 0073                                    ??_crc_verify 002C  
                                    ?_m_mem_cpy 0073                         __size_of_FVR_Initialize 0004  
              __size_of_modbus_response_process 0054               __size_of_TMR2_SetInterruptHandler 0006  
                     ?_TMR2_SetInterruptHandler 0073                                     _isRunInBoot 0FFF  
                           _uart_received_start 19B0                               _pid_pwm2_vout_run 12D2  
                                      _HexTable 181E                               ___lmul@multiplier 0020  
                              crc_verify@crccal 002E                       __end_of_pid_pwm1_idrv_b_b 0B24  
                                _calc_rs_lo_avg 1047                              ?_pid_pwm2_vout_run 0070  
                     __end_of_pid_pwm1_idrv_run 1800                               ??_TMR2_Initialize 0075  
                                ??_calc_temp_rc 0031                                  ??_calc_temp_rs 0031  
                            __end_of_crc_append 1C34                               calc_rs_lo_avg@t32 002F  
                   __size_of_get_idrv_pwm1_duty 001C                     __size_of_set_idrv_pwm1_duty 0024  
                           ??_pid_pwm2_vout_run 0029                              __end_of_crc_verify 1CA0  
                                  _PWM1INTFbits 0D9D                            ?_uart_received_start 0070  
                                  _PWM2INTFbits 0DAD                         ??_OSCILLATOR_Initialize 0073  
       modbus_response_write_mult_register@rbuf 0036                                __size_of___aldiv 0082  
                              __size_of___awdiv 0052                                __size_of___lldiv 0053  
                              __size_of___lwdiv 0035                          ??_my_flash_system_read 0020  
                                      _adc_init 19F3                                __size_of_crc_sum 0056  
                           _eusartRxIdleTime_ms 007A                       __end_of_pid_pwm2_vout_run 1366  
                                 crc_append@crc 0031                                sys_data_init@ret 0039  
                               ___lwdiv@divisor 0022                                 ___lwdiv@counter 0028  
                                      __ptext10 08ED                                        __ptext11 1B64  
                                      __ptext20 1B41                                        __ptext12 1A87  
                                      __ptext21 1A6B                                        __ptext13 1ABF  
                                      __ptext30 1B1E                                        __ptext22 1005  
                                      __ptext14 1C34                                        __ptext31 11B1  
                                      __ptext23 1400                                        __ptext15 1DF8  
                                      __ptext40 19F3                                        __ptext32 14BF  
                                      __ptext24 1BAC                                        __ptext16 0E97  
                                      __ptext41 1A50                                        __ptext33 1047  
                                      __ptext25 1598                                        __ptext17 112A  
                                      __ptext50 198D                                        __ptext42 1991  
                                      __ptext34 1DA5                                        __ptext26 1C03  
                                      __ptext18 1CA0                                        __ptext51 19CD  
                                      __ptext43 19E0                                        __ptext35 0B24  
                                      __ptext27 1C69                                        __ptext19 1366  
                                      __ptext52 199B                                        __ptext44 198A  
                                      __ptext36 1BD3                                        __ptext28 1ADD  
                                      __ptext45 1995                                        __ptext37 10A8  
                                      __ptext29 1E4C                                        __ptext46 1A37  
                                      __ptext38 1EA2                                        __ptext47 1A1E  
                                      __ptext39 1A07                                        __ptext48 1D14  
                                      __ptext49 0803                          __end_of_calc_rs_lo_avg 10A8  
                                 _uart_send_len 1BAC                                   _uart_send_str 1AFC  
                         get_vout_pwm2_duty@t16 0020                                   __size_of_main 018D  
                                 _subTickerX_1s 006A                           set_vout_pwm2_duty@t16 0024  
                                    _RA4PPSbits 0E94                           ??_uart_received_start 0073  
                                    _RA5PPSbits 0E95                                ?_ADC1_Initialize 0070  
                my_flash_system_write@flashAddr 0029                                        int$flags 007E  
                                      crc_sum@i 0024                                        crc_sum@j 0022  
                                    _RC5PPSbits 0EA5   __end_of_modbus_response_write_single_register 0FF4  
__size_of_modbus_response_write_single_register 015D         ??_modbus_response_write_single_register 0033  
        ?_modbus_response_write_single_register 0070           _modbus_response_write_single_register 0E97  
                             ??_TMR2_StartTimer 0073              __end_of_INTERRUPT_InterruptManager 0892  
                    _INTERRUPT_InterruptManager 0804                           __end_of_sys_data_init 12D2  
                         __end_of_sys_data_save 1CD7                               ?_FLASH_EraseBlock 0073  
                 calc_expect_vout_adc_value@t32 0056                     PIN_MANAGER_Initialize@state 0073  
                                   ??_m_mem_cpy 0075                        modbus_response_command@i 0039  
                            ??_FLASH_EraseBlock 0075                                      _INTCONbits 000B  
                                   _PWM1CONbits 0D9B                                m_mem_cpy_len@len 0024  
                                    _FVRCONbits 0117                                     _PWM2CONbits 0DAB  
                  INTERRUPT_InterruptManager@t8 0072                                 ?_calc_rs_lo_avg 002D  
                  modbus_response_process@pmdbs 0044                         __size_of_WDT_Initialize 0004  
                                ?_uart_send_len 0073                                  ?_uart_send_str 0070  
                                      intlevel1 0000                  __size_of_my_flash_system_write 009A  
                          pid_pwm2_vout_run@t16 002D                      __size_of_pid_pwm1_idrv_b_b 0237  
                 __end_of_my_flash_system_write 1400                      __size_of_pid_pwm1_idrv_run 016F  
                                    _PMCON1bits 0195                                ___lldiv@dividend 0024  
                       ?_PIN_MANAGER_Initialize 0070    modbus_response_write_mult_register@startAddr 0034  
                                uart_send_len@i 0076                                     _PPSLOCKbits 0E0F  
                               _PWM1_Initialize 1A1E                    modbus_response_command@pmdbs 003A  
                       _modbus_response_command 1400                    calc_expect_vout_adc_value@x0 0052  
                  calc_expect_vout_adc_value@x1 004A                    calc_expect_vout_adc_value@y0 004E  
                  calc_expect_vout_adc_value@y1 0046                                      _PWM1CLKCON 0D9E  
                                    _PWM2CLKCON 0DAE                          __size_of_m_mem_cpy_len 001F  
                                 __pstringtext1 181E                                   __pstringtext2 0000  
                                _FVR_Initialize 198D                         _modbus_response_process 1DF8  
                                sys_data_init@i 003B                                     crc_append@n 002A  
                          __end_of_calc_temp_rc 1598                            __end_of_calc_temp_rs 1241  
                              ___lldiv@quotient 0028                                ??_getRegisterVal 0020  
                               _PWM2_Initialize 1A37                      __size_of_pid_pwm2_vout_run 0094  
                                  ___aldiv@sign 0031                     calc_expect_vout_adc_value@i 005A  
                   calc_expect_vout_adc_value@x 0036             __size_of_calc_expect_vout_adc_value 01E6  
                __end_of_PIN_MANAGER_Initialize 1D53                              _get_vout_pwm2_duty 1AA3  
                            _set_vout_pwm2_duty 1B88                           _TMR2_InterruptHandler 00D8  
                                   crc_verify@n 002A                             ?_get_vout_pwm2_duty 0073  
                           ?_set_vout_pwm2_duty 0022  
