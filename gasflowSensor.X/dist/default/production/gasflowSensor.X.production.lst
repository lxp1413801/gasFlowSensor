

Microchip Technology PIC PRO Macro Assembler V1.37 build -260352376 
                                                                                               Sat Nov 17 22:26:26 2018

Microchip Technology Omniscient Code Generator v1.37 (PRO mode) build 201603110536
     1                           	processor	16F1575
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	swtext1,local,class=CONST,delta=2
    23                           	psect	text14,local,class=CODE,merge=1,delta=2
    24                           	psect	swtext2,local,class=CONST,delta=2
    25                           	psect	text28,local,class=CODE,merge=1,delta=2
    26                           	psect	text40,local,class=CODE,merge=1,delta=2
    27                           	psect	intentry,global,class=CODE,delta=2
    28                           	psect	pa_nodes,global,class=CODE,delta=2
    29                           	dabs	1,0x7E,2
    30  0000                     	;# 
    31  0001                     	;# 
    32  0002                     	;# 
    33  0003                     	;# 
    34  0004                     	;# 
    35  0005                     	;# 
    36  0006                     	;# 
    37  0007                     	;# 
    38  0008                     	;# 
    39  0009                     	;# 
    40  000A                     	;# 
    41  000B                     	;# 
    42  000C                     	;# 
    43  000E                     	;# 
    44  0011                     	;# 
    45  0012                     	;# 
    46  0013                     	;# 
    47  0015                     	;# 
    48  0016                     	;# 
    49  0016                     	;# 
    50  0017                     	;# 
    51  0018                     	;# 
    52  0019                     	;# 
    53  001A                     	;# 
    54  001B                     	;# 
    55  001C                     	;# 
    56  008C                     	;# 
    57  008E                     	;# 
    58  0091                     	;# 
    59  0092                     	;# 
    60  0093                     	;# 
    61  0095                     	;# 
    62  0096                     	;# 
    63  0097                     	;# 
    64  0098                     	;# 
    65  0099                     	;# 
    66  009A                     	;# 
    67  009B                     	;# 
    68  009B                     	;# 
    69  009C                     	;# 
    70  009D                     	;# 
    71  009E                     	;# 
    72  009F                     	;# 
    73  010C                     	;# 
    74  010E                     	;# 
    75  0111                     	;# 
    76  0112                     	;# 
    77  0113                     	;# 
    78  0114                     	;# 
    79  0115                     	;# 
    80  0116                     	;# 
    81  0117                     	;# 
    82  0118                     	;# 
    83  0119                     	;# 
    84  018C                     	;# 
    85  018E                     	;# 
    86  0191                     	;# 
    87  0191                     	;# 
    88  0192                     	;# 
    89  0193                     	;# 
    90  0193                     	;# 
    91  0194                     	;# 
    92  0195                     	;# 
    93  0196                     	;# 
    94  0197                     	;# 
    95  0199                     	;# 
    96  019A                     	;# 
    97  019B                     	;# 
    98  019B                     	;# 
    99  019C                     	;# 
   100  019D                     	;# 
   101  019E                     	;# 
   102  019F                     	;# 
   103  020C                     	;# 
   104  020E                     	;# 
   105  028C                     	;# 
   106  028E                     	;# 
   107  030C                     	;# 
   108  030E                     	;# 
   109  038C                     	;# 
   110  038E                     	;# 
   111  0391                     	;# 
   112  0392                     	;# 
   113  0393                     	;# 
   114  0397                     	;# 
   115  0398                     	;# 
   116  0399                     	;# 
   117  0691                     	;# 
   118  0692                     	;# 
   119  0693                     	;# 
   120  0694                     	;# 
   121  0695                     	;# 
   122  0D8E                     	;# 
   123  0D8F                     	;# 
   124  0D90                     	;# 
   125  0D91                     	;# 
   126  0D91                     	;# 
   127  0D92                     	;# 
   128  0D93                     	;# 
   129  0D93                     	;# 
   130  0D94                     	;# 
   131  0D95                     	;# 
   132  0D95                     	;# 
   133  0D96                     	;# 
   134  0D97                     	;# 
   135  0D97                     	;# 
   136  0D98                     	;# 
   137  0D99                     	;# 
   138  0D99                     	;# 
   139  0D9A                     	;# 
   140  0D9B                     	;# 
   141  0D9C                     	;# 
   142  0D9C                     	;# 
   143  0D9D                     	;# 
   144  0D9D                     	;# 
   145  0D9E                     	;# 
   146  0D9F                     	;# 
   147  0DA0                     	;# 
   148  0DA1                     	;# 
   149  0DA1                     	;# 
   150  0DA2                     	;# 
   151  0DA3                     	;# 
   152  0DA3                     	;# 
   153  0DA4                     	;# 
   154  0DA5                     	;# 
   155  0DA5                     	;# 
   156  0DA6                     	;# 
   157  0DA7                     	;# 
   158  0DA7                     	;# 
   159  0DA8                     	;# 
   160  0DA9                     	;# 
   161  0DA9                     	;# 
   162  0DAA                     	;# 
   163  0DAB                     	;# 
   164  0DAC                     	;# 
   165  0DAC                     	;# 
   166  0DAD                     	;# 
   167  0DAD                     	;# 
   168  0DAE                     	;# 
   169  0DAF                     	;# 
   170  0DB0                     	;# 
   171  0DB1                     	;# 
   172  0DB1                     	;# 
   173  0DB2                     	;# 
   174  0DB3                     	;# 
   175  0DB3                     	;# 
   176  0DB4                     	;# 
   177  0DB5                     	;# 
   178  0DB5                     	;# 
   179  0DB6                     	;# 
   180  0DB7                     	;# 
   181  0DB7                     	;# 
   182  0DB8                     	;# 
   183  0DB9                     	;# 
   184  0DB9                     	;# 
   185  0DBA                     	;# 
   186  0DBB                     	;# 
   187  0DBC                     	;# 
   188  0DBC                     	;# 
   189  0DBD                     	;# 
   190  0DBD                     	;# 
   191  0DBE                     	;# 
   192  0DBF                     	;# 
   193  0DC0                     	;# 
   194  0DC1                     	;# 
   195  0DC1                     	;# 
   196  0DC2                     	;# 
   197  0DC3                     	;# 
   198  0DC3                     	;# 
   199  0DC4                     	;# 
   200  0DC5                     	;# 
   201  0DC5                     	;# 
   202  0DC6                     	;# 
   203  0DC7                     	;# 
   204  0DC7                     	;# 
   205  0DC8                     	;# 
   206  0DC9                     	;# 
   207  0DC9                     	;# 
   208  0DCA                     	;# 
   209  0DCB                     	;# 
   210  0DCC                     	;# 
   211  0DCC                     	;# 
   212  0DCD                     	;# 
   213  0DCD                     	;# 
   214  0DCE                     	;# 
   215  0DCF                     	;# 
   216  0DD0                     	;# 
   217  0E0F                     	;# 
   218  0E10                     	;# 
   219  0E11                     	;# 
   220  0E12                     	;# 
   221  0E13                     	;# 
   222  0E14                     	;# 
   223  0E15                     	;# 
   224  0E16                     	;# 
   225  0E17                     	;# 
   226  0E90                     	;# 
   227  0E91                     	;# 
   228  0E92                     	;# 
   229  0E94                     	;# 
   230  0E95                     	;# 
   231  0EA0                     	;# 
   232  0EA1                     	;# 
   233  0EA2                     	;# 
   234  0EA3                     	;# 
   235  0EA4                     	;# 
   236  0EA5                     	;# 
   237  0FE4                     	;# 
   238  0FE5                     	;# 
   239  0FE6                     	;# 
   240  0FE7                     	;# 
   241  0FE8                     	;# 
   242  0FE8                     	;# 
   243  0FE9                     	;# 
   244  0FEA                     	;# 
   245  0FEA                     	;# 
   246  0FEB                     	;# 
   247  0FED                     	;# 
   248  0FEE                     	;# 
   249  0FEE                     	;# 
   250  0FEF                     	;# 
   251  0000                     	;# 
   252  0001                     	;# 
   253  0002                     	;# 
   254  0003                     	;# 
   255  0004                     	;# 
   256  0005                     	;# 
   257  0006                     	;# 
   258  0007                     	;# 
   259  0008                     	;# 
   260  0009                     	;# 
   261  000A                     	;# 
   262  000B                     	;# 
   263  000C                     	;# 
   264  000E                     	;# 
   265  0011                     	;# 
   266  0012                     	;# 
   267  0013                     	;# 
   268  0015                     	;# 
   269  0016                     	;# 
   270  0016                     	;# 
   271  0017                     	;# 
   272  0018                     	;# 
   273  0019                     	;# 
   274  001A                     	;# 
   275  001B                     	;# 
   276  001C                     	;# 
   277  008C                     	;# 
   278  008E                     	;# 
   279  0091                     	;# 
   280  0092                     	;# 
   281  0093                     	;# 
   282  0095                     	;# 
   283  0096                     	;# 
   284  0097                     	;# 
   285  0098                     	;# 
   286  0099                     	;# 
   287  009A                     	;# 
   288  009B                     	;# 
   289  009B                     	;# 
   290  009C                     	;# 
   291  009D                     	;# 
   292  009E                     	;# 
   293  009F                     	;# 
   294  010C                     	;# 
   295  010E                     	;# 
   296  0111                     	;# 
   297  0112                     	;# 
   298  0113                     	;# 
   299  0114                     	;# 
   300  0115                     	;# 
   301  0116                     	;# 
   302  0117                     	;# 
   303  0118                     	;# 
   304  0119                     	;# 
   305  018C                     	;# 
   306  018E                     	;# 
   307  0191                     	;# 
   308  0191                     	;# 
   309  0192                     	;# 
   310  0193                     	;# 
   311  0193                     	;# 
   312  0194                     	;# 
   313  0195                     	;# 
   314  0196                     	;# 
   315  0197                     	;# 
   316  0199                     	;# 
   317  019A                     	;# 
   318  019B                     	;# 
   319  019B                     	;# 
   320  019C                     	;# 
   321  019D                     	;# 
   322  019E                     	;# 
   323  019F                     	;# 
   324  020C                     	;# 
   325  020E                     	;# 
   326  028C                     	;# 
   327  028E                     	;# 
   328  030C                     	;# 
   329  030E                     	;# 
   330  038C                     	;# 
   331  038E                     	;# 
   332  0391                     	;# 
   333  0392                     	;# 
   334  0393                     	;# 
   335  0397                     	;# 
   336  0398                     	;# 
   337  0399                     	;# 
   338  0691                     	;# 
   339  0692                     	;# 
   340  0693                     	;# 
   341  0694                     	;# 
   342  0695                     	;# 
   343  0D8E                     	;# 
   344  0D8F                     	;# 
   345  0D90                     	;# 
   346  0D91                     	;# 
   347  0D91                     	;# 
   348  0D92                     	;# 
   349  0D93                     	;# 
   350  0D93                     	;# 
   351  0D94                     	;# 
   352  0D95                     	;# 
   353  0D95                     	;# 
   354  0D96                     	;# 
   355  0D97                     	;# 
   356  0D97                     	;# 
   357  0D98                     	;# 
   358  0D99                     	;# 
   359  0D99                     	;# 
   360  0D9A                     	;# 
   361  0D9B                     	;# 
   362  0D9C                     	;# 
   363  0D9C                     	;# 
   364  0D9D                     	;# 
   365  0D9D                     	;# 
   366  0D9E                     	;# 
   367  0D9F                     	;# 
   368  0DA0                     	;# 
   369  0DA1                     	;# 
   370  0DA1                     	;# 
   371  0DA2                     	;# 
   372  0DA3                     	;# 
   373  0DA3                     	;# 
   374  0DA4                     	;# 
   375  0DA5                     	;# 
   376  0DA5                     	;# 
   377  0DA6                     	;# 
   378  0DA7                     	;# 
   379  0DA7                     	;# 
   380  0DA8                     	;# 
   381  0DA9                     	;# 
   382  0DA9                     	;# 
   383  0DAA                     	;# 
   384  0DAB                     	;# 
   385  0DAC                     	;# 
   386  0DAC                     	;# 
   387  0DAD                     	;# 
   388  0DAD                     	;# 
   389  0DAE                     	;# 
   390  0DAF                     	;# 
   391  0DB0                     	;# 
   392  0DB1                     	;# 
   393  0DB1                     	;# 
   394  0DB2                     	;# 
   395  0DB3                     	;# 
   396  0DB3                     	;# 
   397  0DB4                     	;# 
   398  0DB5                     	;# 
   399  0DB5                     	;# 
   400  0DB6                     	;# 
   401  0DB7                     	;# 
   402  0DB7                     	;# 
   403  0DB8                     	;# 
   404  0DB9                     	;# 
   405  0DB9                     	;# 
   406  0DBA                     	;# 
   407  0DBB                     	;# 
   408  0DBC                     	;# 
   409  0DBC                     	;# 
   410  0DBD                     	;# 
   411  0DBD                     	;# 
   412  0DBE                     	;# 
   413  0DBF                     	;# 
   414  0DC0                     	;# 
   415  0DC1                     	;# 
   416  0DC1                     	;# 
   417  0DC2                     	;# 
   418  0DC3                     	;# 
   419  0DC3                     	;# 
   420  0DC4                     	;# 
   421  0DC5                     	;# 
   422  0DC5                     	;# 
   423  0DC6                     	;# 
   424  0DC7                     	;# 
   425  0DC7                     	;# 
   426  0DC8                     	;# 
   427  0DC9                     	;# 
   428  0DC9                     	;# 
   429  0DCA                     	;# 
   430  0DCB                     	;# 
   431  0DCC                     	;# 
   432  0DCC                     	;# 
   433  0DCD                     	;# 
   434  0DCD                     	;# 
   435  0DCE                     	;# 
   436  0DCF                     	;# 
   437  0DD0                     	;# 
   438  0E0F                     	;# 
   439  0E10                     	;# 
   440  0E11                     	;# 
   441  0E12                     	;# 
   442  0E13                     	;# 
   443  0E14                     	;# 
   444  0E15                     	;# 
   445  0E16                     	;# 
   446  0E17                     	;# 
   447  0E90                     	;# 
   448  0E91                     	;# 
   449  0E92                     	;# 
   450  0E94                     	;# 
   451  0E95                     	;# 
   452  0EA0                     	;# 
   453  0EA1                     	;# 
   454  0EA2                     	;# 
   455  0EA3                     	;# 
   456  0EA4                     	;# 
   457  0EA5                     	;# 
   458  0FE4                     	;# 
   459  0FE5                     	;# 
   460  0FE6                     	;# 
   461  0FE7                     	;# 
   462  0FE8                     	;# 
   463  0FE8                     	;# 
   464  0FE9                     	;# 
   465  0FEA                     	;# 
   466  0FEA                     	;# 
   467  0FEB                     	;# 
   468  0FED                     	;# 
   469  0FEE                     	;# 
   470  0FEE                     	;# 
   471  0FEF                     	;# 
   472  0000                     	;# 
   473  0001                     	;# 
   474  0002                     	;# 
   475  0003                     	;# 
   476  0004                     	;# 
   477  0005                     	;# 
   478  0006                     	;# 
   479  0007                     	;# 
   480  0008                     	;# 
   481  0009                     	;# 
   482  000A                     	;# 
   483  000B                     	;# 
   484  000C                     	;# 
   485  000E                     	;# 
   486  0011                     	;# 
   487  0012                     	;# 
   488  0013                     	;# 
   489  0015                     	;# 
   490  0016                     	;# 
   491  0016                     	;# 
   492  0017                     	;# 
   493  0018                     	;# 
   494  0019                     	;# 
   495  001A                     	;# 
   496  001B                     	;# 
   497  001C                     	;# 
   498  008C                     	;# 
   499  008E                     	;# 
   500  0091                     	;# 
   501  0092                     	;# 
   502  0093                     	;# 
   503  0095                     	;# 
   504  0096                     	;# 
   505  0097                     	;# 
   506  0098                     	;# 
   507  0099                     	;# 
   508  009A                     	;# 
   509  009B                     	;# 
   510  009B                     	;# 
   511  009C                     	;# 
   512  009D                     	;# 
   513  009E                     	;# 
   514  009F                     	;# 
   515  010C                     	;# 
   516  010E                     	;# 
   517  0111                     	;# 
   518  0112                     	;# 
   519  0113                     	;# 
   520  0114                     	;# 
   521  0115                     	;# 
   522  0116                     	;# 
   523  0117                     	;# 
   524  0118                     	;# 
   525  0119                     	;# 
   526  018C                     	;# 
   527  018E                     	;# 
   528  0191                     	;# 
   529  0191                     	;# 
   530  0192                     	;# 
   531  0193                     	;# 
   532  0193                     	;# 
   533  0194                     	;# 
   534  0195                     	;# 
   535  0196                     	;# 
   536  0197                     	;# 
   537  0199                     	;# 
   538  019A                     	;# 
   539  019B                     	;# 
   540  019B                     	;# 
   541  019C                     	;# 
   542  019D                     	;# 
   543  019E                     	;# 
   544  019F                     	;# 
   545  020C                     	;# 
   546  020E                     	;# 
   547  028C                     	;# 
   548  028E                     	;# 
   549  030C                     	;# 
   550  030E                     	;# 
   551  038C                     	;# 
   552  038E                     	;# 
   553  0391                     	;# 
   554  0392                     	;# 
   555  0393                     	;# 
   556  0397                     	;# 
   557  0398                     	;# 
   558  0399                     	;# 
   559  0691                     	;# 
   560  0692                     	;# 
   561  0693                     	;# 
   562  0694                     	;# 
   563  0695                     	;# 
   564  0D8E                     	;# 
   565  0D8F                     	;# 
   566  0D90                     	;# 
   567  0D91                     	;# 
   568  0D91                     	;# 
   569  0D92                     	;# 
   570  0D93                     	;# 
   571  0D93                     	;# 
   572  0D94                     	;# 
   573  0D95                     	;# 
   574  0D95                     	;# 
   575  0D96                     	;# 
   576  0D97                     	;# 
   577  0D97                     	;# 
   578  0D98                     	;# 
   579  0D99                     	;# 
   580  0D99                     	;# 
   581  0D9A                     	;# 
   582  0D9B                     	;# 
   583  0D9C                     	;# 
   584  0D9C                     	;# 
   585  0D9D                     	;# 
   586  0D9D                     	;# 
   587  0D9E                     	;# 
   588  0D9F                     	;# 
   589  0DA0                     	;# 
   590  0DA1                     	;# 
   591  0DA1                     	;# 
   592  0DA2                     	;# 
   593  0DA3                     	;# 
   594  0DA3                     	;# 
   595  0DA4                     	;# 
   596  0DA5                     	;# 
   597  0DA5                     	;# 
   598  0DA6                     	;# 
   599  0DA7                     	;# 
   600  0DA7                     	;# 
   601  0DA8                     	;# 
   602  0DA9                     	;# 
   603  0DA9                     	;# 
   604  0DAA                     	;# 
   605  0DAB                     	;# 
   606  0DAC                     	;# 
   607  0DAC                     	;# 
   608  0DAD                     	;# 
   609  0DAD                     	;# 
   610  0DAE                     	;# 
   611  0DAF                     	;# 
   612  0DB0                     	;# 
   613  0DB1                     	;# 
   614  0DB1                     	;# 
   615  0DB2                     	;# 
   616  0DB3                     	;# 
   617  0DB3                     	;# 
   618  0DB4                     	;# 
   619  0DB5                     	;# 
   620  0DB5                     	;# 
   621  0DB6                     	;# 
   622  0DB7                     	;# 
   623  0DB7                     	;# 
   624  0DB8                     	;# 
   625  0DB9                     	;# 
   626  0DB9                     	;# 
   627  0DBA                     	;# 
   628  0DBB                     	;# 
   629  0DBC                     	;# 
   630  0DBC                     	;# 
   631  0DBD                     	;# 
   632  0DBD                     	;# 
   633  0DBE                     	;# 
   634  0DBF                     	;# 
   635  0DC0                     	;# 
   636  0DC1                     	;# 
   637  0DC1                     	;# 
   638  0DC2                     	;# 
   639  0DC3                     	;# 
   640  0DC3                     	;# 
   641  0DC4                     	;# 
   642  0DC5                     	;# 
   643  0DC5                     	;# 
   644  0DC6                     	;# 
   645  0DC7                     	;# 
   646  0DC7                     	;# 
   647  0DC8                     	;# 
   648  0DC9                     	;# 
   649  0DC9                     	;# 
   650  0DCA                     	;# 
   651  0DCB                     	;# 
   652  0DCC                     	;# 
   653  0DCC                     	;# 
   654  0DCD                     	;# 
   655  0DCD                     	;# 
   656  0DCE                     	;# 
   657  0DCF                     	;# 
   658  0DD0                     	;# 
   659  0E0F                     	;# 
   660  0E10                     	;# 
   661  0E11                     	;# 
   662  0E12                     	;# 
   663  0E13                     	;# 
   664  0E14                     	;# 
   665  0E15                     	;# 
   666  0E16                     	;# 
   667  0E17                     	;# 
   668  0E90                     	;# 
   669  0E91                     	;# 
   670  0E92                     	;# 
   671  0E94                     	;# 
   672  0E95                     	;# 
   673  0EA0                     	;# 
   674  0EA1                     	;# 
   675  0EA2                     	;# 
   676  0EA3                     	;# 
   677  0EA4                     	;# 
   678  0EA5                     	;# 
   679  0FE4                     	;# 
   680  0FE5                     	;# 
   681  0FE6                     	;# 
   682  0FE7                     	;# 
   683  0FE8                     	;# 
   684  0FE8                     	;# 
   685  0FE9                     	;# 
   686  0FEA                     	;# 
   687  0FEA                     	;# 
   688  0FEB                     	;# 
   689  0FED                     	;# 
   690  0FEE                     	;# 
   691  0FEE                     	;# 
   692  0FEF                     	;# 
   693  0000                     	;# 
   694  0001                     	;# 
   695  0002                     	;# 
   696  0003                     	;# 
   697  0004                     	;# 
   698  0005                     	;# 
   699  0006                     	;# 
   700  0007                     	;# 
   701  0008                     	;# 
   702  0009                     	;# 
   703  000A                     	;# 
   704  000B                     	;# 
   705  000C                     	;# 
   706  000E                     	;# 
   707  0011                     	;# 
   708  0012                     	;# 
   709  0013                     	;# 
   710  0015                     	;# 
   711  0016                     	;# 
   712  0016                     	;# 
   713  0017                     	;# 
   714  0018                     	;# 
   715  0019                     	;# 
   716  001A                     	;# 
   717  001B                     	;# 
   718  001C                     	;# 
   719  008C                     	;# 
   720  008E                     	;# 
   721  0091                     	;# 
   722  0092                     	;# 
   723  0093                     	;# 
   724  0095                     	;# 
   725  0096                     	;# 
   726  0097                     	;# 
   727  0098                     	;# 
   728  0099                     	;# 
   729  009A                     	;# 
   730  009B                     	;# 
   731  009B                     	;# 
   732  009C                     	;# 
   733  009D                     	;# 
   734  009E                     	;# 
   735  009F                     	;# 
   736  010C                     	;# 
   737  010E                     	;# 
   738  0111                     	;# 
   739  0112                     	;# 
   740  0113                     	;# 
   741  0114                     	;# 
   742  0115                     	;# 
   743  0116                     	;# 
   744  0117                     	;# 
   745  0118                     	;# 
   746  0119                     	;# 
   747  018C                     	;# 
   748  018E                     	;# 
   749  0191                     	;# 
   750  0191                     	;# 
   751  0192                     	;# 
   752  0193                     	;# 
   753  0193                     	;# 
   754  0194                     	;# 
   755  0195                     	;# 
   756  0196                     	;# 
   757  0197                     	;# 
   758  0199                     	;# 
   759  019A                     	;# 
   760  019B                     	;# 
   761  019B                     	;# 
   762  019C                     	;# 
   763  019D                     	;# 
   764  019E                     	;# 
   765  019F                     	;# 
   766  020C                     	;# 
   767  020E                     	;# 
   768  028C                     	;# 
   769  028E                     	;# 
   770  030C                     	;# 
   771  030E                     	;# 
   772  038C                     	;# 
   773  038E                     	;# 
   774  0391                     	;# 
   775  0392                     	;# 
   776  0393                     	;# 
   777  0397                     	;# 
   778  0398                     	;# 
   779  0399                     	;# 
   780  0691                     	;# 
   781  0692                     	;# 
   782  0693                     	;# 
   783  0694                     	;# 
   784  0695                     	;# 
   785  0D8E                     	;# 
   786  0D8F                     	;# 
   787  0D90                     	;# 
   788  0D91                     	;# 
   789  0D91                     	;# 
   790  0D92                     	;# 
   791  0D93                     	;# 
   792  0D93                     	;# 
   793  0D94                     	;# 
   794  0D95                     	;# 
   795  0D95                     	;# 
   796  0D96                     	;# 
   797  0D97                     	;# 
   798  0D97                     	;# 
   799  0D98                     	;# 
   800  0D99                     	;# 
   801  0D99                     	;# 
   802  0D9A                     	;# 
   803  0D9B                     	;# 
   804  0D9C                     	;# 
   805  0D9C                     	;# 
   806  0D9D                     	;# 
   807  0D9D                     	;# 
   808  0D9E                     	;# 
   809  0D9F                     	;# 
   810  0DA0                     	;# 
   811  0DA1                     	;# 
   812  0DA1                     	;# 
   813  0DA2                     	;# 
   814  0DA3                     	;# 
   815  0DA3                     	;# 
   816  0DA4                     	;# 
   817  0DA5                     	;# 
   818  0DA5                     	;# 
   819  0DA6                     	;# 
   820  0DA7                     	;# 
   821  0DA7                     	;# 
   822  0DA8                     	;# 
   823  0DA9                     	;# 
   824  0DA9                     	;# 
   825  0DAA                     	;# 
   826  0DAB                     	;# 
   827  0DAC                     	;# 
   828  0DAC                     	;# 
   829  0DAD                     	;# 
   830  0DAD                     	;# 
   831  0DAE                     	;# 
   832  0DAF                     	;# 
   833  0DB0                     	;# 
   834  0DB1                     	;# 
   835  0DB1                     	;# 
   836  0DB2                     	;# 
   837  0DB3                     	;# 
   838  0DB3                     	;# 
   839  0DB4                     	;# 
   840  0DB5                     	;# 
   841  0DB5                     	;# 
   842  0DB6                     	;# 
   843  0DB7                     	;# 
   844  0DB7                     	;# 
   845  0DB8                     	;# 
   846  0DB9                     	;# 
   847  0DB9                     	;# 
   848  0DBA                     	;# 
   849  0DBB                     	;# 
   850  0DBC                     	;# 
   851  0DBC                     	;# 
   852  0DBD                     	;# 
   853  0DBD                     	;# 
   854  0DBE                     	;# 
   855  0DBF                     	;# 
   856  0DC0                     	;# 
   857  0DC1                     	;# 
   858  0DC1                     	;# 
   859  0DC2                     	;# 
   860  0DC3                     	;# 
   861  0DC3                     	;# 
   862  0DC4                     	;# 
   863  0DC5                     	;# 
   864  0DC5                     	;# 
   865  0DC6                     	;# 
   866  0DC7                     	;# 
   867  0DC7                     	;# 
   868  0DC8                     	;# 
   869  0DC9                     	;# 
   870  0DC9                     	;# 
   871  0DCA                     	;# 
   872  0DCB                     	;# 
   873  0DCC                     	;# 
   874  0DCC                     	;# 
   875  0DCD                     	;# 
   876  0DCD                     	;# 
   877  0DCE                     	;# 
   878  0DCF                     	;# 
   879  0DD0                     	;# 
   880  0E0F                     	;# 
   881  0E10                     	;# 
   882  0E11                     	;# 
   883  0E12                     	;# 
   884  0E13                     	;# 
   885  0E14                     	;# 
   886  0E15                     	;# 
   887  0E16                     	;# 
   888  0E17                     	;# 
   889  0E90                     	;# 
   890  0E91                     	;# 
   891  0E92                     	;# 
   892  0E94                     	;# 
   893  0E95                     	;# 
   894  0EA0                     	;# 
   895  0EA1                     	;# 
   896  0EA2                     	;# 
   897  0EA3                     	;# 
   898  0EA4                     	;# 
   899  0EA5                     	;# 
   900  0FE4                     	;# 
   901  0FE5                     	;# 
   902  0FE6                     	;# 
   903  0FE7                     	;# 
   904  0FE8                     	;# 
   905  0FE8                     	;# 
   906  0FE9                     	;# 
   907  0FEA                     	;# 
   908  0FEA                     	;# 
   909  0FEB                     	;# 
   910  0FED                     	;# 
   911  0FEE                     	;# 
   912  0FEE                     	;# 
   913  0FEF                     	;# 
   914  0000                     	;# 
   915  0001                     	;# 
   916  0002                     	;# 
   917  0003                     	;# 
   918  0004                     	;# 
   919  0005                     	;# 
   920  0006                     	;# 
   921  0007                     	;# 
   922  0008                     	;# 
   923  0009                     	;# 
   924  000A                     	;# 
   925  000B                     	;# 
   926  000C                     	;# 
   927  000E                     	;# 
   928  0011                     	;# 
   929  0012                     	;# 
   930  0013                     	;# 
   931  0015                     	;# 
   932  0016                     	;# 
   933  0016                     	;# 
   934  0017                     	;# 
   935  0018                     	;# 
   936  0019                     	;# 
   937  001A                     	;# 
   938  001B                     	;# 
   939  001C                     	;# 
   940  008C                     	;# 
   941  008E                     	;# 
   942  0091                     	;# 
   943  0092                     	;# 
   944  0093                     	;# 
   945  0095                     	;# 
   946  0096                     	;# 
   947  0097                     	;# 
   948  0098                     	;# 
   949  0099                     	;# 
   950  009A                     	;# 
   951  009B                     	;# 
   952  009B                     	;# 
   953  009C                     	;# 
   954  009D                     	;# 
   955  009E                     	;# 
   956  009F                     	;# 
   957  010C                     	;# 
   958  010E                     	;# 
   959  0111                     	;# 
   960  0112                     	;# 
   961  0113                     	;# 
   962  0114                     	;# 
   963  0115                     	;# 
   964  0116                     	;# 
   965  0117                     	;# 
   966  0118                     	;# 
   967  0119                     	;# 
   968  018C                     	;# 
   969  018E                     	;# 
   970  0191                     	;# 
   971  0191                     	;# 
   972  0192                     	;# 
   973  0193                     	;# 
   974  0193                     	;# 
   975  0194                     	;# 
   976  0195                     	;# 
   977  0196                     	;# 
   978  0197                     	;# 
   979  0199                     	;# 
   980  019A                     	;# 
   981  019B                     	;# 
   982  019B                     	;# 
   983  019C                     	;# 
   984  019D                     	;# 
   985  019E                     	;# 
   986  019F                     	;# 
   987  020C                     	;# 
   988  020E                     	;# 
   989  028C                     	;# 
   990  028E                     	;# 
   991  030C                     	;# 
   992  030E                     	;# 
   993  038C                     	;# 
   994  038E                     	;# 
   995  0391                     	;# 
   996  0392                     	;# 
   997  0393                     	;# 
   998  0397                     	;# 
   999  0398                     	;# 
  1000  0399                     	;# 
  1001  0691                     	;# 
  1002  0692                     	;# 
  1003  0693                     	;# 
  1004  0694                     	;# 
  1005  0695                     	;# 
  1006  0D8E                     	;# 
  1007  0D8F                     	;# 
  1008  0D90                     	;# 
  1009  0D91                     	;# 
  1010  0D91                     	;# 
  1011  0D92                     	;# 
  1012  0D93                     	;# 
  1013  0D93                     	;# 
  1014  0D94                     	;# 
  1015  0D95                     	;# 
  1016  0D95                     	;# 
  1017  0D96                     	;# 
  1018  0D97                     	;# 
  1019  0D97                     	;# 
  1020  0D98                     	;# 
  1021  0D99                     	;# 
  1022  0D99                     	;# 
  1023  0D9A                     	;# 
  1024  0D9B                     	;# 
  1025  0D9C                     	;# 
  1026  0D9C                     	;# 
  1027  0D9D                     	;# 
  1028  0D9D                     	;# 
  1029  0D9E                     	;# 
  1030  0D9F                     	;# 
  1031  0DA0                     	;# 
  1032  0DA1                     	;# 
  1033  0DA1                     	;# 
  1034  0DA2                     	;# 
  1035  0DA3                     	;# 
  1036  0DA3                     	;# 
  1037  0DA4                     	;# 
  1038  0DA5                     	;# 
  1039  0DA5                     	;# 
  1040  0DA6                     	;# 
  1041  0DA7                     	;# 
  1042  0DA7                     	;# 
  1043  0DA8                     	;# 
  1044  0DA9                     	;# 
  1045  0DA9                     	;# 
  1046  0DAA                     	;# 
  1047  0DAB                     	;# 
  1048  0DAC                     	;# 
  1049  0DAC                     	;# 
  1050  0DAD                     	;# 
  1051  0DAD                     	;# 
  1052  0DAE                     	;# 
  1053  0DAF                     	;# 
  1054  0DB0                     	;# 
  1055  0DB1                     	;# 
  1056  0DB1                     	;# 
  1057  0DB2                     	;# 
  1058  0DB3                     	;# 
  1059  0DB3                     	;# 
  1060  0DB4                     	;# 
  1061  0DB5                     	;# 
  1062  0DB5                     	;# 
  1063  0DB6                     	;# 
  1064  0DB7                     	;# 
  1065  0DB7                     	;# 
  1066  0DB8                     	;# 
  1067  0DB9                     	;# 
  1068  0DB9                     	;# 
  1069  0DBA                     	;# 
  1070  0DBB                     	;# 
  1071  0DBC                     	;# 
  1072  0DBC                     	;# 
  1073  0DBD                     	;# 
  1074  0DBD                     	;# 
  1075  0DBE                     	;# 
  1076  0DBF                     	;# 
  1077  0DC0                     	;# 
  1078  0DC1                     	;# 
  1079  0DC1                     	;# 
  1080  0DC2                     	;# 
  1081  0DC3                     	;# 
  1082  0DC3                     	;# 
  1083  0DC4                     	;# 
  1084  0DC5                     	;# 
  1085  0DC5                     	;# 
  1086  0DC6                     	;# 
  1087  0DC7                     	;# 
  1088  0DC7                     	;# 
  1089  0DC8                     	;# 
  1090  0DC9                     	;# 
  1091  0DC9                     	;# 
  1092  0DCA                     	;# 
  1093  0DCB                     	;# 
  1094  0DCC                     	;# 
  1095  0DCC                     	;# 
  1096  0DCD                     	;# 
  1097  0DCD                     	;# 
  1098  0DCE                     	;# 
  1099  0DCF                     	;# 
  1100  0DD0                     	;# 
  1101  0E0F                     	;# 
  1102  0E10                     	;# 
  1103  0E11                     	;# 
  1104  0E12                     	;# 
  1105  0E13                     	;# 
  1106  0E14                     	;# 
  1107  0E15                     	;# 
  1108  0E16                     	;# 
  1109  0E17                     	;# 
  1110  0E90                     	;# 
  1111  0E91                     	;# 
  1112  0E92                     	;# 
  1113  0E94                     	;# 
  1114  0E95                     	;# 
  1115  0EA0                     	;# 
  1116  0EA1                     	;# 
  1117  0EA2                     	;# 
  1118  0EA3                     	;# 
  1119  0EA4                     	;# 
  1120  0EA5                     	;# 
  1121  0FE4                     	;# 
  1122  0FE5                     	;# 
  1123  0FE6                     	;# 
  1124  0FE7                     	;# 
  1125  0FE8                     	;# 
  1126  0FE8                     	;# 
  1127  0FE9                     	;# 
  1128  0FEA                     	;# 
  1129  0FEA                     	;# 
  1130  0FEB                     	;# 
  1131  0FED                     	;# 
  1132  0FEE                     	;# 
  1133  0FEE                     	;# 
  1134  0FEF                     	;# 
  1135  0FFF                     	;# 
  1136  0000                     	;# 
  1137  0001                     	;# 
  1138  0002                     	;# 
  1139  0003                     	;# 
  1140  0004                     	;# 
  1141  0005                     	;# 
  1142  0006                     	;# 
  1143  0007                     	;# 
  1144  0008                     	;# 
  1145  0009                     	;# 
  1146  000A                     	;# 
  1147  000B                     	;# 
  1148  000C                     	;# 
  1149  000E                     	;# 
  1150  0011                     	;# 
  1151  0012                     	;# 
  1152  0013                     	;# 
  1153  0015                     	;# 
  1154  0016                     	;# 
  1155  0016                     	;# 
  1156  0017                     	;# 
  1157  0018                     	;# 
  1158  0019                     	;# 
  1159  001A                     	;# 
  1160  001B                     	;# 
  1161  001C                     	;# 
  1162  008C                     	;# 
  1163  008E                     	;# 
  1164  0091                     	;# 
  1165  0092                     	;# 
  1166  0093                     	;# 
  1167  0095                     	;# 
  1168  0096                     	;# 
  1169  0097                     	;# 
  1170  0098                     	;# 
  1171  0099                     	;# 
  1172  009A                     	;# 
  1173  009B                     	;# 
  1174  009B                     	;# 
  1175  009C                     	;# 
  1176  009D                     	;# 
  1177  009E                     	;# 
  1178  009F                     	;# 
  1179  010C                     	;# 
  1180  010E                     	;# 
  1181  0111                     	;# 
  1182  0112                     	;# 
  1183  0113                     	;# 
  1184  0114                     	;# 
  1185  0115                     	;# 
  1186  0116                     	;# 
  1187  0117                     	;# 
  1188  0118                     	;# 
  1189  0119                     	;# 
  1190  018C                     	;# 
  1191  018E                     	;# 
  1192  0191                     	;# 
  1193  0191                     	;# 
  1194  0192                     	;# 
  1195  0193                     	;# 
  1196  0193                     	;# 
  1197  0194                     	;# 
  1198  0195                     	;# 
  1199  0196                     	;# 
  1200  0197                     	;# 
  1201  0199                     	;# 
  1202  019A                     	;# 
  1203  019B                     	;# 
  1204  019B                     	;# 
  1205  019C                     	;# 
  1206  019D                     	;# 
  1207  019E                     	;# 
  1208  019F                     	;# 
  1209  020C                     	;# 
  1210  020E                     	;# 
  1211  028C                     	;# 
  1212  028E                     	;# 
  1213  030C                     	;# 
  1214  030E                     	;# 
  1215  038C                     	;# 
  1216  038E                     	;# 
  1217  0391                     	;# 
  1218  0392                     	;# 
  1219  0393                     	;# 
  1220  0397                     	;# 
  1221  0398                     	;# 
  1222  0399                     	;# 
  1223  0691                     	;# 
  1224  0692                     	;# 
  1225  0693                     	;# 
  1226  0694                     	;# 
  1227  0695                     	;# 
  1228  0D8E                     	;# 
  1229  0D8F                     	;# 
  1230  0D90                     	;# 
  1231  0D91                     	;# 
  1232  0D91                     	;# 
  1233  0D92                     	;# 
  1234  0D93                     	;# 
  1235  0D93                     	;# 
  1236  0D94                     	;# 
  1237  0D95                     	;# 
  1238  0D95                     	;# 
  1239  0D96                     	;# 
  1240  0D97                     	;# 
  1241  0D97                     	;# 
  1242  0D98                     	;# 
  1243  0D99                     	;# 
  1244  0D99                     	;# 
  1245  0D9A                     	;# 
  1246  0D9B                     	;# 
  1247  0D9C                     	;# 
  1248  0D9C                     	;# 
  1249  0D9D                     	;# 
  1250  0D9D                     	;# 
  1251  0D9E                     	;# 
  1252  0D9F                     	;# 
  1253  0DA0                     	;# 
  1254  0DA1                     	;# 
  1255  0DA1                     	;# 
  1256  0DA2                     	;# 
  1257  0DA3                     	;# 
  1258  0DA3                     	;# 
  1259  0DA4                     	;# 
  1260  0DA5                     	;# 
  1261  0DA5                     	;# 
  1262  0DA6                     	;# 
  1263  0DA7                     	;# 
  1264  0DA7                     	;# 
  1265  0DA8                     	;# 
  1266  0DA9                     	;# 
  1267  0DA9                     	;# 
  1268  0DAA                     	;# 
  1269  0DAB                     	;# 
  1270  0DAC                     	;# 
  1271  0DAC                     	;# 
  1272  0DAD                     	;# 
  1273  0DAD                     	;# 
  1274  0DAE                     	;# 
  1275  0DAF                     	;# 
  1276  0DB0                     	;# 
  1277  0DB1                     	;# 
  1278  0DB1                     	;# 
  1279  0DB2                     	;# 
  1280  0DB3                     	;# 
  1281  0DB3                     	;# 
  1282  0DB4                     	;# 
  1283  0DB5                     	;# 
  1284  0DB5                     	;# 
  1285  0DB6                     	;# 
  1286  0DB7                     	;# 
  1287  0DB7                     	;# 
  1288  0DB8                     	;# 
  1289  0DB9                     	;# 
  1290  0DB9                     	;# 
  1291  0DBA                     	;# 
  1292  0DBB                     	;# 
  1293  0DBC                     	;# 
  1294  0DBC                     	;# 
  1295  0DBD                     	;# 
  1296  0DBD                     	;# 
  1297  0DBE                     	;# 
  1298  0DBF                     	;# 
  1299  0DC0                     	;# 
  1300  0DC1                     	;# 
  1301  0DC1                     	;# 
  1302  0DC2                     	;# 
  1303  0DC3                     	;# 
  1304  0DC3                     	;# 
  1305  0DC4                     	;# 
  1306  0DC5                     	;# 
  1307  0DC5                     	;# 
  1308  0DC6                     	;# 
  1309  0DC7                     	;# 
  1310  0DC7                     	;# 
  1311  0DC8                     	;# 
  1312  0DC9                     	;# 
  1313  0DC9                     	;# 
  1314  0DCA                     	;# 
  1315  0DCB                     	;# 
  1316  0DCC                     	;# 
  1317  0DCC                     	;# 
  1318  0DCD                     	;# 
  1319  0DCD                     	;# 
  1320  0DCE                     	;# 
  1321  0DCF                     	;# 
  1322  0DD0                     	;# 
  1323  0E0F                     	;# 
  1324  0E10                     	;# 
  1325  0E11                     	;# 
  1326  0E12                     	;# 
  1327  0E13                     	;# 
  1328  0E14                     	;# 
  1329  0E15                     	;# 
  1330  0E16                     	;# 
  1331  0E17                     	;# 
  1332  0E90                     	;# 
  1333  0E91                     	;# 
  1334  0E92                     	;# 
  1335  0E94                     	;# 
  1336  0E95                     	;# 
  1337  0EA0                     	;# 
  1338  0EA1                     	;# 
  1339  0EA2                     	;# 
  1340  0EA3                     	;# 
  1341  0EA4                     	;# 
  1342  0EA5                     	;# 
  1343  0FE4                     	;# 
  1344  0FE5                     	;# 
  1345  0FE6                     	;# 
  1346  0FE7                     	;# 
  1347  0FE8                     	;# 
  1348  0FE8                     	;# 
  1349  0FE9                     	;# 
  1350  0FEA                     	;# 
  1351  0FEA                     	;# 
  1352  0FEB                     	;# 
  1353  0FED                     	;# 
  1354  0FEE                     	;# 
  1355  0FEE                     	;# 
  1356  0FEF                     	;# 
  1357  0000                     	;# 
  1358  0001                     	;# 
  1359  0002                     	;# 
  1360  0003                     	;# 
  1361  0004                     	;# 
  1362  0005                     	;# 
  1363  0006                     	;# 
  1364  0007                     	;# 
  1365  0008                     	;# 
  1366  0009                     	;# 
  1367  000A                     	;# 
  1368  000B                     	;# 
  1369  000C                     	;# 
  1370  000E                     	;# 
  1371  0011                     	;# 
  1372  0012                     	;# 
  1373  0013                     	;# 
  1374  0015                     	;# 
  1375  0016                     	;# 
  1376  0016                     	;# 
  1377  0017                     	;# 
  1378  0018                     	;# 
  1379  0019                     	;# 
  1380  001A                     	;# 
  1381  001B                     	;# 
  1382  001C                     	;# 
  1383  008C                     	;# 
  1384  008E                     	;# 
  1385  0091                     	;# 
  1386  0092                     	;# 
  1387  0093                     	;# 
  1388  0095                     	;# 
  1389  0096                     	;# 
  1390  0097                     	;# 
  1391  0098                     	;# 
  1392  0099                     	;# 
  1393  009A                     	;# 
  1394  009B                     	;# 
  1395  009B                     	;# 
  1396  009C                     	;# 
  1397  009D                     	;# 
  1398  009E                     	;# 
  1399  009F                     	;# 
  1400  010C                     	;# 
  1401  010E                     	;# 
  1402  0111                     	;# 
  1403  0112                     	;# 
  1404  0113                     	;# 
  1405  0114                     	;# 
  1406  0115                     	;# 
  1407  0116                     	;# 
  1408  0117                     	;# 
  1409  0118                     	;# 
  1410  0119                     	;# 
  1411  018C                     	;# 
  1412  018E                     	;# 
  1413  0191                     	;# 
  1414  0191                     	;# 
  1415  0192                     	;# 
  1416  0193                     	;# 
  1417  0193                     	;# 
  1418  0194                     	;# 
  1419  0195                     	;# 
  1420  0196                     	;# 
  1421  0197                     	;# 
  1422  0199                     	;# 
  1423  019A                     	;# 
  1424  019B                     	;# 
  1425  019B                     	;# 
  1426  019C                     	;# 
  1427  019D                     	;# 
  1428  019E                     	;# 
  1429  019F                     	;# 
  1430  020C                     	;# 
  1431  020E                     	;# 
  1432  028C                     	;# 
  1433  028E                     	;# 
  1434  030C                     	;# 
  1435  030E                     	;# 
  1436  038C                     	;# 
  1437  038E                     	;# 
  1438  0391                     	;# 
  1439  0392                     	;# 
  1440  0393                     	;# 
  1441  0397                     	;# 
  1442  0398                     	;# 
  1443  0399                     	;# 
  1444  0691                     	;# 
  1445  0692                     	;# 
  1446  0693                     	;# 
  1447  0694                     	;# 
  1448  0695                     	;# 
  1449  0D8E                     	;# 
  1450  0D8F                     	;# 
  1451  0D90                     	;# 
  1452  0D91                     	;# 
  1453  0D91                     	;# 
  1454  0D92                     	;# 
  1455  0D93                     	;# 
  1456  0D93                     	;# 
  1457  0D94                     	;# 
  1458  0D95                     	;# 
  1459  0D95                     	;# 
  1460  0D96                     	;# 
  1461  0D97                     	;# 
  1462  0D97                     	;# 
  1463  0D98                     	;# 
  1464  0D99                     	;# 
  1465  0D99                     	;# 
  1466  0D9A                     	;# 
  1467  0D9B                     	;# 
  1468  0D9C                     	;# 
  1469  0D9C                     	;# 
  1470  0D9D                     	;# 
  1471  0D9D                     	;# 
  1472  0D9E                     	;# 
  1473  0D9F                     	;# 
  1474  0DA0                     	;# 
  1475  0DA1                     	;# 
  1476  0DA1                     	;# 
  1477  0DA2                     	;# 
  1478  0DA3                     	;# 
  1479  0DA3                     	;# 
  1480  0DA4                     	;# 
  1481  0DA5                     	;# 
  1482  0DA5                     	;# 
  1483  0DA6                     	;# 
  1484  0DA7                     	;# 
  1485  0DA7                     	;# 
  1486  0DA8                     	;# 
  1487  0DA9                     	;# 
  1488  0DA9                     	;# 
  1489  0DAA                     	;# 
  1490  0DAB                     	;# 
  1491  0DAC                     	;# 
  1492  0DAC                     	;# 
  1493  0DAD                     	;# 
  1494  0DAD                     	;# 
  1495  0DAE                     	;# 
  1496  0DAF                     	;# 
  1497  0DB0                     	;# 
  1498  0DB1                     	;# 
  1499  0DB1                     	;# 
  1500  0DB2                     	;# 
  1501  0DB3                     	;# 
  1502  0DB3                     	;# 
  1503  0DB4                     	;# 
  1504  0DB5                     	;# 
  1505  0DB5                     	;# 
  1506  0DB6                     	;# 
  1507  0DB7                     	;# 
  1508  0DB7                     	;# 
  1509  0DB8                     	;# 
  1510  0DB9                     	;# 
  1511  0DB9                     	;# 
  1512  0DBA                     	;# 
  1513  0DBB                     	;# 
  1514  0DBC                     	;# 
  1515  0DBC                     	;# 
  1516  0DBD                     	;# 
  1517  0DBD                     	;# 
  1518  0DBE                     	;# 
  1519  0DBF                     	;# 
  1520  0DC0                     	;# 
  1521  0DC1                     	;# 
  1522  0DC1                     	;# 
  1523  0DC2                     	;# 
  1524  0DC3                     	;# 
  1525  0DC3                     	;# 
  1526  0DC4                     	;# 
  1527  0DC5                     	;# 
  1528  0DC5                     	;# 
  1529  0DC6                     	;# 
  1530  0DC7                     	;# 
  1531  0DC7                     	;# 
  1532  0DC8                     	;# 
  1533  0DC9                     	;# 
  1534  0DC9                     	;# 
  1535  0DCA                     	;# 
  1536  0DCB                     	;# 
  1537  0DCC                     	;# 
  1538  0DCC                     	;# 
  1539  0DCD                     	;# 
  1540  0DCD                     	;# 
  1541  0DCE                     	;# 
  1542  0DCF                     	;# 
  1543  0DD0                     	;# 
  1544  0E0F                     	;# 
  1545  0E10                     	;# 
  1546  0E11                     	;# 
  1547  0E12                     	;# 
  1548  0E13                     	;# 
  1549  0E14                     	;# 
  1550  0E15                     	;# 
  1551  0E16                     	;# 
  1552  0E17                     	;# 
  1553  0E90                     	;# 
  1554  0E91                     	;# 
  1555  0E92                     	;# 
  1556  0E94                     	;# 
  1557  0E95                     	;# 
  1558  0EA0                     	;# 
  1559  0EA1                     	;# 
  1560  0EA2                     	;# 
  1561  0EA3                     	;# 
  1562  0EA4                     	;# 
  1563  0EA5                     	;# 
  1564  0FE4                     	;# 
  1565  0FE5                     	;# 
  1566  0FE6                     	;# 
  1567  0FE7                     	;# 
  1568  0FE8                     	;# 
  1569  0FE8                     	;# 
  1570  0FE9                     	;# 
  1571  0FEA                     	;# 
  1572  0FEA                     	;# 
  1573  0FEB                     	;# 
  1574  0FED                     	;# 
  1575  0FEE                     	;# 
  1576  0FEE                     	;# 
  1577  0FEF                     	;# 
  1578  0000                     	;# 
  1579  0001                     	;# 
  1580  0002                     	;# 
  1581  0003                     	;# 
  1582  0004                     	;# 
  1583  0005                     	;# 
  1584  0006                     	;# 
  1585  0007                     	;# 
  1586  0008                     	;# 
  1587  0009                     	;# 
  1588  000A                     	;# 
  1589  000B                     	;# 
  1590  000C                     	;# 
  1591  000E                     	;# 
  1592  0011                     	;# 
  1593  0012                     	;# 
  1594  0013                     	;# 
  1595  0015                     	;# 
  1596  0016                     	;# 
  1597  0016                     	;# 
  1598  0017                     	;# 
  1599  0018                     	;# 
  1600  0019                     	;# 
  1601  001A                     	;# 
  1602  001B                     	;# 
  1603  001C                     	;# 
  1604  008C                     	;# 
  1605  008E                     	;# 
  1606  0091                     	;# 
  1607  0092                     	;# 
  1608  0093                     	;# 
  1609  0095                     	;# 
  1610  0096                     	;# 
  1611  0097                     	;# 
  1612  0098                     	;# 
  1613  0099                     	;# 
  1614  009A                     	;# 
  1615  009B                     	;# 
  1616  009B                     	;# 
  1617  009C                     	;# 
  1618  009D                     	;# 
  1619  009E                     	;# 
  1620  009F                     	;# 
  1621  010C                     	;# 
  1622  010E                     	;# 
  1623  0111                     	;# 
  1624  0112                     	;# 
  1625  0113                     	;# 
  1626  0114                     	;# 
  1627  0115                     	;# 
  1628  0116                     	;# 
  1629  0117                     	;# 
  1630  0118                     	;# 
  1631  0119                     	;# 
  1632  018C                     	;# 
  1633  018E                     	;# 
  1634  0191                     	;# 
  1635  0191                     	;# 
  1636  0192                     	;# 
  1637  0193                     	;# 
  1638  0193                     	;# 
  1639  0194                     	;# 
  1640  0195                     	;# 
  1641  0196                     	;# 
  1642  0197                     	;# 
  1643  0199                     	;# 
  1644  019A                     	;# 
  1645  019B                     	;# 
  1646  019B                     	;# 
  1647  019C                     	;# 
  1648  019D                     	;# 
  1649  019E                     	;# 
  1650  019F                     	;# 
  1651  020C                     	;# 
  1652  020E                     	;# 
  1653  028C                     	;# 
  1654  028E                     	;# 
  1655  030C                     	;# 
  1656  030E                     	;# 
  1657  038C                     	;# 
  1658  038E                     	;# 
  1659  0391                     	;# 
  1660  0392                     	;# 
  1661  0393                     	;# 
  1662  0397                     	;# 
  1663  0398                     	;# 
  1664  0399                     	;# 
  1665  0691                     	;# 
  1666  0692                     	;# 
  1667  0693                     	;# 
  1668  0694                     	;# 
  1669  0695                     	;# 
  1670  0D8E                     	;# 
  1671  0D8F                     	;# 
  1672  0D90                     	;# 
  1673  0D91                     	;# 
  1674  0D91                     	;# 
  1675  0D92                     	;# 
  1676  0D93                     	;# 
  1677  0D93                     	;# 
  1678  0D94                     	;# 
  1679  0D95                     	;# 
  1680  0D95                     	;# 
  1681  0D96                     	;# 
  1682  0D97                     	;# 
  1683  0D97                     	;# 
  1684  0D98                     	;# 
  1685  0D99                     	;# 
  1686  0D99                     	;# 
  1687  0D9A                     	;# 
  1688  0D9B                     	;# 
  1689  0D9C                     	;# 
  1690  0D9C                     	;# 
  1691  0D9D                     	;# 
  1692  0D9D                     	;# 
  1693  0D9E                     	;# 
  1694  0D9F                     	;# 
  1695  0DA0                     	;# 
  1696  0DA1                     	;# 
  1697  0DA1                     	;# 
  1698  0DA2                     	;# 
  1699  0DA3                     	;# 
  1700  0DA3                     	;# 
  1701  0DA4                     	;# 
  1702  0DA5                     	;# 
  1703  0DA5                     	;# 
  1704  0DA6                     	;# 
  1705  0DA7                     	;# 
  1706  0DA7                     	;# 
  1707  0DA8                     	;# 
  1708  0DA9                     	;# 
  1709  0DA9                     	;# 
  1710  0DAA                     	;# 
  1711  0DAB                     	;# 
  1712  0DAC                     	;# 
  1713  0DAC                     	;# 
  1714  0DAD                     	;# 
  1715  0DAD                     	;# 
  1716  0DAE                     	;# 
  1717  0DAF                     	;# 
  1718  0DB0                     	;# 
  1719  0DB1                     	;# 
  1720  0DB1                     	;# 
  1721  0DB2                     	;# 
  1722  0DB3                     	;# 
  1723  0DB3                     	;# 
  1724  0DB4                     	;# 
  1725  0DB5                     	;# 
  1726  0DB5                     	;# 
  1727  0DB6                     	;# 
  1728  0DB7                     	;# 
  1729  0DB7                     	;# 
  1730  0DB8                     	;# 
  1731  0DB9                     	;# 
  1732  0DB9                     	;# 
  1733  0DBA                     	;# 
  1734  0DBB                     	;# 
  1735  0DBC                     	;# 
  1736  0DBC                     	;# 
  1737  0DBD                     	;# 
  1738  0DBD                     	;# 
  1739  0DBE                     	;# 
  1740  0DBF                     	;# 
  1741  0DC0                     	;# 
  1742  0DC1                     	;# 
  1743  0DC1                     	;# 
  1744  0DC2                     	;# 
  1745  0DC3                     	;# 
  1746  0DC3                     	;# 
  1747  0DC4                     	;# 
  1748  0DC5                     	;# 
  1749  0DC5                     	;# 
  1750  0DC6                     	;# 
  1751  0DC7                     	;# 
  1752  0DC7                     	;# 
  1753  0DC8                     	;# 
  1754  0DC9                     	;# 
  1755  0DC9                     	;# 
  1756  0DCA                     	;# 
  1757  0DCB                     	;# 
  1758  0DCC                     	;# 
  1759  0DCC                     	;# 
  1760  0DCD                     	;# 
  1761  0DCD                     	;# 
  1762  0DCE                     	;# 
  1763  0DCF                     	;# 
  1764  0DD0                     	;# 
  1765  0E0F                     	;# 
  1766  0E10                     	;# 
  1767  0E11                     	;# 
  1768  0E12                     	;# 
  1769  0E13                     	;# 
  1770  0E14                     	;# 
  1771  0E15                     	;# 
  1772  0E16                     	;# 
  1773  0E17                     	;# 
  1774  0E90                     	;# 
  1775  0E91                     	;# 
  1776  0E92                     	;# 
  1777  0E94                     	;# 
  1778  0E95                     	;# 
  1779  0EA0                     	;# 
  1780  0EA1                     	;# 
  1781  0EA2                     	;# 
  1782  0EA3                     	;# 
  1783  0EA4                     	;# 
  1784  0EA5                     	;# 
  1785  0FE4                     	;# 
  1786  0FE5                     	;# 
  1787  0FE6                     	;# 
  1788  0FE7                     	;# 
  1789  0FE8                     	;# 
  1790  0FE8                     	;# 
  1791  0FE9                     	;# 
  1792  0FEA                     	;# 
  1793  0FEA                     	;# 
  1794  0FEB                     	;# 
  1795  0FED                     	;# 
  1796  0FEE                     	;# 
  1797  0FEE                     	;# 
  1798  0FEF                     	;# 
  1799  0000                     	;# 
  1800  0001                     	;# 
  1801  0002                     	;# 
  1802  0003                     	;# 
  1803  0004                     	;# 
  1804  0005                     	;# 
  1805  0006                     	;# 
  1806  0007                     	;# 
  1807  0008                     	;# 
  1808  0009                     	;# 
  1809  000A                     	;# 
  1810  000B                     	;# 
  1811  000C                     	;# 
  1812  000E                     	;# 
  1813  0011                     	;# 
  1814  0012                     	;# 
  1815  0013                     	;# 
  1816  0015                     	;# 
  1817  0016                     	;# 
  1818  0016                     	;# 
  1819  0017                     	;# 
  1820  0018                     	;# 
  1821  0019                     	;# 
  1822  001A                     	;# 
  1823  001B                     	;# 
  1824  001C                     	;# 
  1825  008C                     	;# 
  1826  008E                     	;# 
  1827  0091                     	;# 
  1828  0092                     	;# 
  1829  0093                     	;# 
  1830  0095                     	;# 
  1831  0096                     	;# 
  1832  0097                     	;# 
  1833  0098                     	;# 
  1834  0099                     	;# 
  1835  009A                     	;# 
  1836  009B                     	;# 
  1837  009B                     	;# 
  1838  009C                     	;# 
  1839  009D                     	;# 
  1840  009E                     	;# 
  1841  009F                     	;# 
  1842  010C                     	;# 
  1843  010E                     	;# 
  1844  0111                     	;# 
  1845  0112                     	;# 
  1846  0113                     	;# 
  1847  0114                     	;# 
  1848  0115                     	;# 
  1849  0116                     	;# 
  1850  0117                     	;# 
  1851  0118                     	;# 
  1852  0119                     	;# 
  1853  018C                     	;# 
  1854  018E                     	;# 
  1855  0191                     	;# 
  1856  0191                     	;# 
  1857  0192                     	;# 
  1858  0193                     	;# 
  1859  0193                     	;# 
  1860  0194                     	;# 
  1861  0195                     	;# 
  1862  0196                     	;# 
  1863  0197                     	;# 
  1864  0199                     	;# 
  1865  019A                     	;# 
  1866  019B                     	;# 
  1867  019B                     	;# 
  1868  019C                     	;# 
  1869  019D                     	;# 
  1870  019E                     	;# 
  1871  019F                     	;# 
  1872  020C                     	;# 
  1873  020E                     	;# 
  1874  028C                     	;# 
  1875  028E                     	;# 
  1876  030C                     	;# 
  1877  030E                     	;# 
  1878  038C                     	;# 
  1879  038E                     	;# 
  1880  0391                     	;# 
  1881  0392                     	;# 
  1882  0393                     	;# 
  1883  0397                     	;# 
  1884  0398                     	;# 
  1885  0399                     	;# 
  1886  0691                     	;# 
  1887  0692                     	;# 
  1888  0693                     	;# 
  1889  0694                     	;# 
  1890  0695                     	;# 
  1891  0D8E                     	;# 
  1892  0D8F                     	;# 
  1893  0D90                     	;# 
  1894  0D91                     	;# 
  1895  0D91                     	;# 
  1896  0D92                     	;# 
  1897  0D93                     	;# 
  1898  0D93                     	;# 
  1899  0D94                     	;# 
  1900  0D95                     	;# 
  1901  0D95                     	;# 
  1902  0D96                     	;# 
  1903  0D97                     	;# 
  1904  0D97                     	;# 
  1905  0D98                     	;# 
  1906  0D99                     	;# 
  1907  0D99                     	;# 
  1908  0D9A                     	;# 
  1909  0D9B                     	;# 
  1910  0D9C                     	;# 
  1911  0D9C                     	;# 
  1912  0D9D                     	;# 
  1913  0D9D                     	;# 
  1914  0D9E                     	;# 
  1915  0D9F                     	;# 
  1916  0DA0                     	;# 
  1917  0DA1                     	;# 
  1918  0DA1                     	;# 
  1919  0DA2                     	;# 
  1920  0DA3                     	;# 
  1921  0DA3                     	;# 
  1922  0DA4                     	;# 
  1923  0DA5                     	;# 
  1924  0DA5                     	;# 
  1925  0DA6                     	;# 
  1926  0DA7                     	;# 
  1927  0DA7                     	;# 
  1928  0DA8                     	;# 
  1929  0DA9                     	;# 
  1930  0DA9                     	;# 
  1931  0DAA                     	;# 
  1932  0DAB                     	;# 
  1933  0DAC                     	;# 
  1934  0DAC                     	;# 
  1935  0DAD                     	;# 
  1936  0DAD                     	;# 
  1937  0DAE                     	;# 
  1938  0DAF                     	;# 
  1939  0DB0                     	;# 
  1940  0DB1                     	;# 
  1941  0DB1                     	;# 
  1942  0DB2                     	;# 
  1943  0DB3                     	;# 
  1944  0DB3                     	;# 
  1945  0DB4                     	;# 
  1946  0DB5                     	;# 
  1947  0DB5                     	;# 
  1948  0DB6                     	;# 
  1949  0DB7                     	;# 
  1950  0DB7                     	;# 
  1951  0DB8                     	;# 
  1952  0DB9                     	;# 
  1953  0DB9                     	;# 
  1954  0DBA                     	;# 
  1955  0DBB                     	;# 
  1956  0DBC                     	;# 
  1957  0DBC                     	;# 
  1958  0DBD                     	;# 
  1959  0DBD                     	;# 
  1960  0DBE                     	;# 
  1961  0DBF                     	;# 
  1962  0DC0                     	;# 
  1963  0DC1                     	;# 
  1964  0DC1                     	;# 
  1965  0DC2                     	;# 
  1966  0DC3                     	;# 
  1967  0DC3                     	;# 
  1968  0DC4                     	;# 
  1969  0DC5                     	;# 
  1970  0DC5                     	;# 
  1971  0DC6                     	;# 
  1972  0DC7                     	;# 
  1973  0DC7                     	;# 
  1974  0DC8                     	;# 
  1975  0DC9                     	;# 
  1976  0DC9                     	;# 
  1977  0DCA                     	;# 
  1978  0DCB                     	;# 
  1979  0DCC                     	;# 
  1980  0DCC                     	;# 
  1981  0DCD                     	;# 
  1982  0DCD                     	;# 
  1983  0DCE                     	;# 
  1984  0DCF                     	;# 
  1985  0DD0                     	;# 
  1986  0E0F                     	;# 
  1987  0E10                     	;# 
  1988  0E11                     	;# 
  1989  0E12                     	;# 
  1990  0E13                     	;# 
  1991  0E14                     	;# 
  1992  0E15                     	;# 
  1993  0E16                     	;# 
  1994  0E17                     	;# 
  1995  0E90                     	;# 
  1996  0E91                     	;# 
  1997  0E92                     	;# 
  1998  0E94                     	;# 
  1999  0E95                     	;# 
  2000  0EA0                     	;# 
  2001  0EA1                     	;# 
  2002  0EA2                     	;# 
  2003  0EA3                     	;# 
  2004  0EA4                     	;# 
  2005  0EA5                     	;# 
  2006  0FE4                     	;# 
  2007  0FE5                     	;# 
  2008  0FE6                     	;# 
  2009  0FE7                     	;# 
  2010  0FE8                     	;# 
  2011  0FE8                     	;# 
  2012  0FE9                     	;# 
  2013  0FEA                     	;# 
  2014  0FEA                     	;# 
  2015  0FEB                     	;# 
  2016  0FED                     	;# 
  2017  0FEE                     	;# 
  2018  0FEE                     	;# 
  2019  0FEF                     	;# 
  2020  0000                     	;# 
  2021  0001                     	;# 
  2022  0002                     	;# 
  2023  0003                     	;# 
  2024  0004                     	;# 
  2025  0005                     	;# 
  2026  0006                     	;# 
  2027  0007                     	;# 
  2028  0008                     	;# 
  2029  0009                     	;# 
  2030  000A                     	;# 
  2031  000B                     	;# 
  2032  000C                     	;# 
  2033  000E                     	;# 
  2034  0011                     	;# 
  2035  0012                     	;# 
  2036  0013                     	;# 
  2037  0015                     	;# 
  2038  0016                     	;# 
  2039  0016                     	;# 
  2040  0017                     	;# 
  2041  0018                     	;# 
  2042  0019                     	;# 
  2043  001A                     	;# 
  2044  001B                     	;# 
  2045  001C                     	;# 
  2046  008C                     	;# 
  2047  008E                     	;# 
  2048  0091                     	;# 
  2049  0092                     	;# 
  2050  0093                     	;# 
  2051  0095                     	;# 
  2052  0096                     	;# 
  2053  0097                     	;# 
  2054  0098                     	;# 
  2055  0099                     	;# 
  2056  009A                     	;# 
  2057  009B                     	;# 
  2058  009B                     	;# 
  2059  009C                     	;# 
  2060  009D                     	;# 
  2061  009E                     	;# 
  2062  009F                     	;# 
  2063  010C                     	;# 
  2064  010E                     	;# 
  2065  0111                     	;# 
  2066  0112                     	;# 
  2067  0113                     	;# 
  2068  0114                     	;# 
  2069  0115                     	;# 
  2070  0116                     	;# 
  2071  0117                     	;# 
  2072  0118                     	;# 
  2073  0119                     	;# 
  2074  018C                     	;# 
  2075  018E                     	;# 
  2076  0191                     	;# 
  2077  0191                     	;# 
  2078  0192                     	;# 
  2079  0193                     	;# 
  2080  0193                     	;# 
  2081  0194                     	;# 
  2082  0195                     	;# 
  2083  0196                     	;# 
  2084  0197                     	;# 
  2085  0199                     	;# 
  2086  019A                     	;# 
  2087  019B                     	;# 
  2088  019B                     	;# 
  2089  019C                     	;# 
  2090  019D                     	;# 
  2091  019E                     	;# 
  2092  019F                     	;# 
  2093  020C                     	;# 
  2094  020E                     	;# 
  2095  028C                     	;# 
  2096  028E                     	;# 
  2097  030C                     	;# 
  2098  030E                     	;# 
  2099  038C                     	;# 
  2100  038E                     	;# 
  2101  0391                     	;# 
  2102  0392                     	;# 
  2103  0393                     	;# 
  2104  0397                     	;# 
  2105  0398                     	;# 
  2106  0399                     	;# 
  2107  0691                     	;# 
  2108  0692                     	;# 
  2109  0693                     	;# 
  2110  0694                     	;# 
  2111  0695                     	;# 
  2112  0D8E                     	;# 
  2113  0D8F                     	;# 
  2114  0D90                     	;# 
  2115  0D91                     	;# 
  2116  0D91                     	;# 
  2117  0D92                     	;# 
  2118  0D93                     	;# 
  2119  0D93                     	;# 
  2120  0D94                     	;# 
  2121  0D95                     	;# 
  2122  0D95                     	;# 
  2123  0D96                     	;# 
  2124  0D97                     	;# 
  2125  0D97                     	;# 
  2126  0D98                     	;# 
  2127  0D99                     	;# 
  2128  0D99                     	;# 
  2129  0D9A                     	;# 
  2130  0D9B                     	;# 
  2131  0D9C                     	;# 
  2132  0D9C                     	;# 
  2133  0D9D                     	;# 
  2134  0D9D                     	;# 
  2135  0D9E                     	;# 
  2136  0D9F                     	;# 
  2137  0DA0                     	;# 
  2138  0DA1                     	;# 
  2139  0DA1                     	;# 
  2140  0DA2                     	;# 
  2141  0DA3                     	;# 
  2142  0DA3                     	;# 
  2143  0DA4                     	;# 
  2144  0DA5                     	;# 
  2145  0DA5                     	;# 
  2146  0DA6                     	;# 
  2147  0DA7                     	;# 
  2148  0DA7                     	;# 
  2149  0DA8                     	;# 
  2150  0DA9                     	;# 
  2151  0DA9                     	;# 
  2152  0DAA                     	;# 
  2153  0DAB                     	;# 
  2154  0DAC                     	;# 
  2155  0DAC                     	;# 
  2156  0DAD                     	;# 
  2157  0DAD                     	;# 
  2158  0DAE                     	;# 
  2159  0DAF                     	;# 
  2160  0DB0                     	;# 
  2161  0DB1                     	;# 
  2162  0DB1                     	;# 
  2163  0DB2                     	;# 
  2164  0DB3                     	;# 
  2165  0DB3                     	;# 
  2166  0DB4                     	;# 
  2167  0DB5                     	;# 
  2168  0DB5                     	;# 
  2169  0DB6                     	;# 
  2170  0DB7                     	;# 
  2171  0DB7                     	;# 
  2172  0DB8                     	;# 
  2173  0DB9                     	;# 
  2174  0DB9                     	;# 
  2175  0DBA                     	;# 
  2176  0DBB                     	;# 
  2177  0DBC                     	;# 
  2178  0DBC                     	;# 
  2179  0DBD                     	;# 
  2180  0DBD                     	;# 
  2181  0DBE                     	;# 
  2182  0DBF                     	;# 
  2183  0DC0                     	;# 
  2184  0DC1                     	;# 
  2185  0DC1                     	;# 
  2186  0DC2                     	;# 
  2187  0DC3                     	;# 
  2188  0DC3                     	;# 
  2189  0DC4                     	;# 
  2190  0DC5                     	;# 
  2191  0DC5                     	;# 
  2192  0DC6                     	;# 
  2193  0DC7                     	;# 
  2194  0DC7                     	;# 
  2195  0DC8                     	;# 
  2196  0DC9                     	;# 
  2197  0DC9                     	;# 
  2198  0DCA                     	;# 
  2199  0DCB                     	;# 
  2200  0DCC                     	;# 
  2201  0DCC                     	;# 
  2202  0DCD                     	;# 
  2203  0DCD                     	;# 
  2204  0DCE                     	;# 
  2205  0DCF                     	;# 
  2206  0DD0                     	;# 
  2207  0E0F                     	;# 
  2208  0E10                     	;# 
  2209  0E11                     	;# 
  2210  0E12                     	;# 
  2211  0E13                     	;# 
  2212  0E14                     	;# 
  2213  0E15                     	;# 
  2214  0E16                     	;# 
  2215  0E17                     	;# 
  2216  0E90                     	;# 
  2217  0E91                     	;# 
  2218  0E92                     	;# 
  2219  0E94                     	;# 
  2220  0E95                     	;# 
  2221  0EA0                     	;# 
  2222  0EA1                     	;# 
  2223  0EA2                     	;# 
  2224  0EA3                     	;# 
  2225  0EA4                     	;# 
  2226  0EA5                     	;# 
  2227  0FE4                     	;# 
  2228  0FE5                     	;# 
  2229  0FE6                     	;# 
  2230  0FE7                     	;# 
  2231  0FE8                     	;# 
  2232  0FE8                     	;# 
  2233  0FE9                     	;# 
  2234  0FEA                     	;# 
  2235  0FEA                     	;# 
  2236  0FEB                     	;# 
  2237  0FED                     	;# 
  2238  0FEE                     	;# 
  2239  0FEE                     	;# 
  2240  0FEF                     	;# 
  2241  0000                     	;# 
  2242  0001                     	;# 
  2243  0002                     	;# 
  2244  0003                     	;# 
  2245  0004                     	;# 
  2246  0005                     	;# 
  2247  0006                     	;# 
  2248  0007                     	;# 
  2249  0008                     	;# 
  2250  0009                     	;# 
  2251  000A                     	;# 
  2252  000B                     	;# 
  2253  000C                     	;# 
  2254  000E                     	;# 
  2255  0011                     	;# 
  2256  0012                     	;# 
  2257  0013                     	;# 
  2258  0015                     	;# 
  2259  0016                     	;# 
  2260  0016                     	;# 
  2261  0017                     	;# 
  2262  0018                     	;# 
  2263  0019                     	;# 
  2264  001A                     	;# 
  2265  001B                     	;# 
  2266  001C                     	;# 
  2267  008C                     	;# 
  2268  008E                     	;# 
  2269  0091                     	;# 
  2270  0092                     	;# 
  2271  0093                     	;# 
  2272  0095                     	;# 
  2273  0096                     	;# 
  2274  0097                     	;# 
  2275  0098                     	;# 
  2276  0099                     	;# 
  2277  009A                     	;# 
  2278  009B                     	;# 
  2279  009B                     	;# 
  2280  009C                     	;# 
  2281  009D                     	;# 
  2282  009E                     	;# 
  2283  009F                     	;# 
  2284  010C                     	;# 
  2285  010E                     	;# 
  2286  0111                     	;# 
  2287  0112                     	;# 
  2288  0113                     	;# 
  2289  0114                     	;# 
  2290  0115                     	;# 
  2291  0116                     	;# 
  2292  0117                     	;# 
  2293  0118                     	;# 
  2294  0119                     	;# 
  2295  018C                     	;# 
  2296  018E                     	;# 
  2297  0191                     	;# 
  2298  0191                     	;# 
  2299  0192                     	;# 
  2300  0193                     	;# 
  2301  0193                     	;# 
  2302  0194                     	;# 
  2303  0195                     	;# 
  2304  0196                     	;# 
  2305  0197                     	;# 
  2306  0199                     	;# 
  2307  019A                     	;# 
  2308  019B                     	;# 
  2309  019B                     	;# 
  2310  019C                     	;# 
  2311  019D                     	;# 
  2312  019E                     	;# 
  2313  019F                     	;# 
  2314  020C                     	;# 
  2315  020E                     	;# 
  2316  028C                     	;# 
  2317  028E                     	;# 
  2318  030C                     	;# 
  2319  030E                     	;# 
  2320  038C                     	;# 
  2321  038E                     	;# 
  2322  0391                     	;# 
  2323  0392                     	;# 
  2324  0393                     	;# 
  2325  0397                     	;# 
  2326  0398                     	;# 
  2327  0399                     	;# 
  2328  0691                     	;# 
  2329  0692                     	;# 
  2330  0693                     	;# 
  2331  0694                     	;# 
  2332  0695                     	;# 
  2333  0D8E                     	;# 
  2334  0D8F                     	;# 
  2335  0D90                     	;# 
  2336  0D91                     	;# 
  2337  0D91                     	;# 
  2338  0D92                     	;# 
  2339  0D93                     	;# 
  2340  0D93                     	;# 
  2341  0D94                     	;# 
  2342  0D95                     	;# 
  2343  0D95                     	;# 
  2344  0D96                     	;# 
  2345  0D97                     	;# 
  2346  0D97                     	;# 
  2347  0D98                     	;# 
  2348  0D99                     	;# 
  2349  0D99                     	;# 
  2350  0D9A                     	;# 
  2351  0D9B                     	;# 
  2352  0D9C                     	;# 
  2353  0D9C                     	;# 
  2354  0D9D                     	;# 
  2355  0D9D                     	;# 
  2356  0D9E                     	;# 
  2357  0D9F                     	;# 
  2358  0DA0                     	;# 
  2359  0DA1                     	;# 
  2360  0DA1                     	;# 
  2361  0DA2                     	;# 
  2362  0DA3                     	;# 
  2363  0DA3                     	;# 
  2364  0DA4                     	;# 
  2365  0DA5                     	;# 
  2366  0DA5                     	;# 
  2367  0DA6                     	;# 
  2368  0DA7                     	;# 
  2369  0DA7                     	;# 
  2370  0DA8                     	;# 
  2371  0DA9                     	;# 
  2372  0DA9                     	;# 
  2373  0DAA                     	;# 
  2374  0DAB                     	;# 
  2375  0DAC                     	;# 
  2376  0DAC                     	;# 
  2377  0DAD                     	;# 
  2378  0DAD                     	;# 
  2379  0DAE                     	;# 
  2380  0DAF                     	;# 
  2381  0DB0                     	;# 
  2382  0DB1                     	;# 
  2383  0DB1                     	;# 
  2384  0DB2                     	;# 
  2385  0DB3                     	;# 
  2386  0DB3                     	;# 
  2387  0DB4                     	;# 
  2388  0DB5                     	;# 
  2389  0DB5                     	;# 
  2390  0DB6                     	;# 
  2391  0DB7                     	;# 
  2392  0DB7                     	;# 
  2393  0DB8                     	;# 
  2394  0DB9                     	;# 
  2395  0DB9                     	;# 
  2396  0DBA                     	;# 
  2397  0DBB                     	;# 
  2398  0DBC                     	;# 
  2399  0DBC                     	;# 
  2400  0DBD                     	;# 
  2401  0DBD                     	;# 
  2402  0DBE                     	;# 
  2403  0DBF                     	;# 
  2404  0DC0                     	;# 
  2405  0DC1                     	;# 
  2406  0DC1                     	;# 
  2407  0DC2                     	;# 
  2408  0DC3                     	;# 
  2409  0DC3                     	;# 
  2410  0DC4                     	;# 
  2411  0DC5                     	;# 
  2412  0DC5                     	;# 
  2413  0DC6                     	;# 
  2414  0DC7                     	;# 
  2415  0DC7                     	;# 
  2416  0DC8                     	;# 
  2417  0DC9                     	;# 
  2418  0DC9                     	;# 
  2419  0DCA                     	;# 
  2420  0DCB                     	;# 
  2421  0DCC                     	;# 
  2422  0DCC                     	;# 
  2423  0DCD                     	;# 
  2424  0DCD                     	;# 
  2425  0DCE                     	;# 
  2426  0DCF                     	;# 
  2427  0DD0                     	;# 
  2428  0E0F                     	;# 
  2429  0E10                     	;# 
  2430  0E11                     	;# 
  2431  0E12                     	;# 
  2432  0E13                     	;# 
  2433  0E14                     	;# 
  2434  0E15                     	;# 
  2435  0E16                     	;# 
  2436  0E17                     	;# 
  2437  0E90                     	;# 
  2438  0E91                     	;# 
  2439  0E92                     	;# 
  2440  0E94                     	;# 
  2441  0E95                     	;# 
  2442  0EA0                     	;# 
  2443  0EA1                     	;# 
  2444  0EA2                     	;# 
  2445  0EA3                     	;# 
  2446  0EA4                     	;# 
  2447  0EA5                     	;# 
  2448  0FE4                     	;# 
  2449  0FE5                     	;# 
  2450  0FE6                     	;# 
  2451  0FE7                     	;# 
  2452  0FE8                     	;# 
  2453  0FE8                     	;# 
  2454  0FE9                     	;# 
  2455  0FEA                     	;# 
  2456  0FEA                     	;# 
  2457  0FEB                     	;# 
  2458  0FED                     	;# 
  2459  0FEE                     	;# 
  2460  0FEE                     	;# 
  2461  0FEF                     	;# 
  2462  0FFF                     	;# 
  2463  0000                     	;# 
  2464  0001                     	;# 
  2465  0002                     	;# 
  2466  0003                     	;# 
  2467  0004                     	;# 
  2468  0005                     	;# 
  2469  0006                     	;# 
  2470  0007                     	;# 
  2471  0008                     	;# 
  2472  0009                     	;# 
  2473  000A                     	;# 
  2474  000B                     	;# 
  2475  000C                     	;# 
  2476  000E                     	;# 
  2477  0011                     	;# 
  2478  0012                     	;# 
  2479  0013                     	;# 
  2480  0015                     	;# 
  2481  0016                     	;# 
  2482  0016                     	;# 
  2483  0017                     	;# 
  2484  0018                     	;# 
  2485  0019                     	;# 
  2486  001A                     	;# 
  2487  001B                     	;# 
  2488  001C                     	;# 
  2489  008C                     	;# 
  2490  008E                     	;# 
  2491  0091                     	;# 
  2492  0092                     	;# 
  2493  0093                     	;# 
  2494  0095                     	;# 
  2495  0096                     	;# 
  2496  0097                     	;# 
  2497  0098                     	;# 
  2498  0099                     	;# 
  2499  009A                     	;# 
  2500  009B                     	;# 
  2501  009B                     	;# 
  2502  009C                     	;# 
  2503  009D                     	;# 
  2504  009E                     	;# 
  2505  009F                     	;# 
  2506  010C                     	;# 
  2507  010E                     	;# 
  2508  0111                     	;# 
  2509  0112                     	;# 
  2510  0113                     	;# 
  2511  0114                     	;# 
  2512  0115                     	;# 
  2513  0116                     	;# 
  2514  0117                     	;# 
  2515  0118                     	;# 
  2516  0119                     	;# 
  2517  018C                     	;# 
  2518  018E                     	;# 
  2519  0191                     	;# 
  2520  0191                     	;# 
  2521  0192                     	;# 
  2522  0193                     	;# 
  2523  0193                     	;# 
  2524  0194                     	;# 
  2525  0195                     	;# 
  2526  0196                     	;# 
  2527  0197                     	;# 
  2528  0199                     	;# 
  2529  019A                     	;# 
  2530  019B                     	;# 
  2531  019B                     	;# 
  2532  019C                     	;# 
  2533  019D                     	;# 
  2534  019E                     	;# 
  2535  019F                     	;# 
  2536  020C                     	;# 
  2537  020E                     	;# 
  2538  028C                     	;# 
  2539  028E                     	;# 
  2540  030C                     	;# 
  2541  030E                     	;# 
  2542  038C                     	;# 
  2543  038E                     	;# 
  2544  0391                     	;# 
  2545  0392                     	;# 
  2546  0393                     	;# 
  2547  0397                     	;# 
  2548  0398                     	;# 
  2549  0399                     	;# 
  2550  0691                     	;# 
  2551  0692                     	;# 
  2552  0693                     	;# 
  2553  0694                     	;# 
  2554  0695                     	;# 
  2555  0D8E                     	;# 
  2556  0D8F                     	;# 
  2557  0D90                     	;# 
  2558  0D91                     	;# 
  2559  0D91                     	;# 
  2560  0D92                     	;# 
  2561  0D93                     	;# 
  2562  0D93                     	;# 
  2563  0D94                     	;# 
  2564  0D95                     	;# 
  2565  0D95                     	;# 
  2566  0D96                     	;# 
  2567  0D97                     	;# 
  2568  0D97                     	;# 
  2569  0D98                     	;# 
  2570  0D99                     	;# 
  2571  0D99                     	;# 
  2572  0D9A                     	;# 
  2573  0D9B                     	;# 
  2574  0D9C                     	;# 
  2575  0D9C                     	;# 
  2576  0D9D                     	;# 
  2577  0D9D                     	;# 
  2578  0D9E                     	;# 
  2579  0D9F                     	;# 
  2580  0DA0                     	;# 
  2581  0DA1                     	;# 
  2582  0DA1                     	;# 
  2583  0DA2                     	;# 
  2584  0DA3                     	;# 
  2585  0DA3                     	;# 
  2586  0DA4                     	;# 
  2587  0DA5                     	;# 
  2588  0DA5                     	;# 
  2589  0DA6                     	;# 
  2590  0DA7                     	;# 
  2591  0DA7                     	;# 
  2592  0DA8                     	;# 
  2593  0DA9                     	;# 
  2594  0DA9                     	;# 
  2595  0DAA                     	;# 
  2596  0DAB                     	;# 
  2597  0DAC                     	;# 
  2598  0DAC                     	;# 
  2599  0DAD                     	;# 
  2600  0DAD                     	;# 
  2601  0DAE                     	;# 
  2602  0DAF                     	;# 
  2603  0DB0                     	;# 
  2604  0DB1                     	;# 
  2605  0DB1                     	;# 
  2606  0DB2                     	;# 
  2607  0DB3                     	;# 
  2608  0DB3                     	;# 
  2609  0DB4                     	;# 
  2610  0DB5                     	;# 
  2611  0DB5                     	;# 
  2612  0DB6                     	;# 
  2613  0DB7                     	;# 
  2614  0DB7                     	;# 
  2615  0DB8                     	;# 
  2616  0DB9                     	;# 
  2617  0DB9                     	;# 
  2618  0DBA                     	;# 
  2619  0DBB                     	;# 
  2620  0DBC                     	;# 
  2621  0DBC                     	;# 
  2622  0DBD                     	;# 
  2623  0DBD                     	;# 
  2624  0DBE                     	;# 
  2625  0DBF                     	;# 
  2626  0DC0                     	;# 
  2627  0DC1                     	;# 
  2628  0DC1                     	;# 
  2629  0DC2                     	;# 
  2630  0DC3                     	;# 
  2631  0DC3                     	;# 
  2632  0DC4                     	;# 
  2633  0DC5                     	;# 
  2634  0DC5                     	;# 
  2635  0DC6                     	;# 
  2636  0DC7                     	;# 
  2637  0DC7                     	;# 
  2638  0DC8                     	;# 
  2639  0DC9                     	;# 
  2640  0DC9                     	;# 
  2641  0DCA                     	;# 
  2642  0DCB                     	;# 
  2643  0DCC                     	;# 
  2644  0DCC                     	;# 
  2645  0DCD                     	;# 
  2646  0DCD                     	;# 
  2647  0DCE                     	;# 
  2648  0DCF                     	;# 
  2649  0DD0                     	;# 
  2650  0E0F                     	;# 
  2651  0E10                     	;# 
  2652  0E11                     	;# 
  2653  0E12                     	;# 
  2654  0E13                     	;# 
  2655  0E14                     	;# 
  2656  0E15                     	;# 
  2657  0E16                     	;# 
  2658  0E17                     	;# 
  2659  0E90                     	;# 
  2660  0E91                     	;# 
  2661  0E92                     	;# 
  2662  0E94                     	;# 
  2663  0E95                     	;# 
  2664  0EA0                     	;# 
  2665  0EA1                     	;# 
  2666  0EA2                     	;# 
  2667  0EA3                     	;# 
  2668  0EA4                     	;# 
  2669  0EA5                     	;# 
  2670  0FE4                     	;# 
  2671  0FE5                     	;# 
  2672  0FE6                     	;# 
  2673  0FE7                     	;# 
  2674  0FE8                     	;# 
  2675  0FE8                     	;# 
  2676  0FE9                     	;# 
  2677  0FEA                     	;# 
  2678  0FEA                     	;# 
  2679  0FEB                     	;# 
  2680  0FED                     	;# 
  2681  0FEE                     	;# 
  2682  0FEE                     	;# 
  2683  0FEF                     	;# 
  2684  0FFF                     	;# 
  2685  0000                     	;# 
  2686  0001                     	;# 
  2687  0002                     	;# 
  2688  0003                     	;# 
  2689  0004                     	;# 
  2690  0005                     	;# 
  2691  0006                     	;# 
  2692  0007                     	;# 
  2693  0008                     	;# 
  2694  0009                     	;# 
  2695  000A                     	;# 
  2696  000B                     	;# 
  2697  000C                     	;# 
  2698  000E                     	;# 
  2699  0011                     	;# 
  2700  0012                     	;# 
  2701  0013                     	;# 
  2702  0015                     	;# 
  2703  0016                     	;# 
  2704  0016                     	;# 
  2705  0017                     	;# 
  2706  0018                     	;# 
  2707  0019                     	;# 
  2708  001A                     	;# 
  2709  001B                     	;# 
  2710  001C                     	;# 
  2711  008C                     	;# 
  2712  008E                     	;# 
  2713  0091                     	;# 
  2714  0092                     	;# 
  2715  0093                     	;# 
  2716  0095                     	;# 
  2717  0096                     	;# 
  2718  0097                     	;# 
  2719  0098                     	;# 
  2720  0099                     	;# 
  2721  009A                     	;# 
  2722  009B                     	;# 
  2723  009B                     	;# 
  2724  009C                     	;# 
  2725  009D                     	;# 
  2726  009E                     	;# 
  2727  009F                     	;# 
  2728  010C                     	;# 
  2729  010E                     	;# 
  2730  0111                     	;# 
  2731  0112                     	;# 
  2732  0113                     	;# 
  2733  0114                     	;# 
  2734  0115                     	;# 
  2735  0116                     	;# 
  2736  0117                     	;# 
  2737  0118                     	;# 
  2738  0119                     	;# 
  2739  018C                     	;# 
  2740  018E                     	;# 
  2741  0191                     	;# 
  2742  0191                     	;# 
  2743  0192                     	;# 
  2744  0193                     	;# 
  2745  0193                     	;# 
  2746  0194                     	;# 
  2747  0195                     	;# 
  2748  0196                     	;# 
  2749  0197                     	;# 
  2750  0199                     	;# 
  2751  019A                     	;# 
  2752  019B                     	;# 
  2753  019B                     	;# 
  2754  019C                     	;# 
  2755  019D                     	;# 
  2756  019E                     	;# 
  2757  019F                     	;# 
  2758  020C                     	;# 
  2759  020E                     	;# 
  2760  028C                     	;# 
  2761  028E                     	;# 
  2762  030C                     	;# 
  2763  030E                     	;# 
  2764  038C                     	;# 
  2765  038E                     	;# 
  2766  0391                     	;# 
  2767  0392                     	;# 
  2768  0393                     	;# 
  2769  0397                     	;# 
  2770  0398                     	;# 
  2771  0399                     	;# 
  2772  0691                     	;# 
  2773  0692                     	;# 
  2774  0693                     	;# 
  2775  0694                     	;# 
  2776  0695                     	;# 
  2777  0D8E                     	;# 
  2778  0D8F                     	;# 
  2779  0D90                     	;# 
  2780  0D91                     	;# 
  2781  0D91                     	;# 
  2782  0D92                     	;# 
  2783  0D93                     	;# 
  2784  0D93                     	;# 
  2785  0D94                     	;# 
  2786  0D95                     	;# 
  2787  0D95                     	;# 
  2788  0D96                     	;# 
  2789  0D97                     	;# 
  2790  0D97                     	;# 
  2791  0D98                     	;# 
  2792  0D99                     	;# 
  2793  0D99                     	;# 
  2794  0D9A                     	;# 
  2795  0D9B                     	;# 
  2796  0D9C                     	;# 
  2797  0D9C                     	;# 
  2798  0D9D                     	;# 
  2799  0D9D                     	;# 
  2800  0D9E                     	;# 
  2801  0D9F                     	;# 
  2802  0DA0                     	;# 
  2803  0DA1                     	;# 
  2804  0DA1                     	;# 
  2805  0DA2                     	;# 
  2806  0DA3                     	;# 
  2807  0DA3                     	;# 
  2808  0DA4                     	;# 
  2809  0DA5                     	;# 
  2810  0DA5                     	;# 
  2811  0DA6                     	;# 
  2812  0DA7                     	;# 
  2813  0DA7                     	;# 
  2814  0DA8                     	;# 
  2815  0DA9                     	;# 
  2816  0DA9                     	;# 
  2817  0DAA                     	;# 
  2818  0DAB                     	;# 
  2819  0DAC                     	;# 
  2820  0DAC                     	;# 
  2821  0DAD                     	;# 
  2822  0DAD                     	;# 
  2823  0DAE                     	;# 
  2824  0DAF                     	;# 
  2825  0DB0                     	;# 
  2826  0DB1                     	;# 
  2827  0DB1                     	;# 
  2828  0DB2                     	;# 
  2829  0DB3                     	;# 
  2830  0DB3                     	;# 
  2831  0DB4                     	;# 
  2832  0DB5                     	;# 
  2833  0DB5                     	;# 
  2834  0DB6                     	;# 
  2835  0DB7                     	;# 
  2836  0DB7                     	;# 
  2837  0DB8                     	;# 
  2838  0DB9                     	;# 
  2839  0DB9                     	;# 
  2840  0DBA                     	;# 
  2841  0DBB                     	;# 
  2842  0DBC                     	;# 
  2843  0DBC                     	;# 
  2844  0DBD                     	;# 
  2845  0DBD                     	;# 
  2846  0DBE                     	;# 
  2847  0DBF                     	;# 
  2848  0DC0                     	;# 
  2849  0DC1                     	;# 
  2850  0DC1                     	;# 
  2851  0DC2                     	;# 
  2852  0DC3                     	;# 
  2853  0DC3                     	;# 
  2854  0DC4                     	;# 
  2855  0DC5                     	;# 
  2856  0DC5                     	;# 
  2857  0DC6                     	;# 
  2858  0DC7                     	;# 
  2859  0DC7                     	;# 
  2860  0DC8                     	;# 
  2861  0DC9                     	;# 
  2862  0DC9                     	;# 
  2863  0DCA                     	;# 
  2864  0DCB                     	;# 
  2865  0DCC                     	;# 
  2866  0DCC                     	;# 
  2867  0DCD                     	;# 
  2868  0DCD                     	;# 
  2869  0DCE                     	;# 
  2870  0DCF                     	;# 
  2871  0DD0                     	;# 
  2872  0E0F                     	;# 
  2873  0E10                     	;# 
  2874  0E11                     	;# 
  2875  0E12                     	;# 
  2876  0E13                     	;# 
  2877  0E14                     	;# 
  2878  0E15                     	;# 
  2879  0E16                     	;# 
  2880  0E17                     	;# 
  2881  0E90                     	;# 
  2882  0E91                     	;# 
  2883  0E92                     	;# 
  2884  0E94                     	;# 
  2885  0E95                     	;# 
  2886  0EA0                     	;# 
  2887  0EA1                     	;# 
  2888  0EA2                     	;# 
  2889  0EA3                     	;# 
  2890  0EA4                     	;# 
  2891  0EA5                     	;# 
  2892  0FE4                     	;# 
  2893  0FE5                     	;# 
  2894  0FE6                     	;# 
  2895  0FE7                     	;# 
  2896  0FE8                     	;# 
  2897  0FE8                     	;# 
  2898  0FE9                     	;# 
  2899  0FEA                     	;# 
  2900  0FEA                     	;# 
  2901  0FEB                     	;# 
  2902  0FED                     	;# 
  2903  0FEE                     	;# 
  2904  0FEE                     	;# 
  2905  0FEF                     	;# 
  2906  0FFF                     	;# 
  2907  0000                     	;# 
  2908  0001                     	;# 
  2909  0002                     	;# 
  2910  0003                     	;# 
  2911  0004                     	;# 
  2912  0005                     	;# 
  2913  0006                     	;# 
  2914  0007                     	;# 
  2915  0008                     	;# 
  2916  0009                     	;# 
  2917  000A                     	;# 
  2918  000B                     	;# 
  2919  000C                     	;# 
  2920  000E                     	;# 
  2921  0011                     	;# 
  2922  0012                     	;# 
  2923  0013                     	;# 
  2924  0015                     	;# 
  2925  0016                     	;# 
  2926  0016                     	;# 
  2927  0017                     	;# 
  2928  0018                     	;# 
  2929  0019                     	;# 
  2930  001A                     	;# 
  2931  001B                     	;# 
  2932  001C                     	;# 
  2933  008C                     	;# 
  2934  008E                     	;# 
  2935  0091                     	;# 
  2936  0092                     	;# 
  2937  0093                     	;# 
  2938  0095                     	;# 
  2939  0096                     	;# 
  2940  0097                     	;# 
  2941  0098                     	;# 
  2942  0099                     	;# 
  2943  009A                     	;# 
  2944  009B                     	;# 
  2945  009B                     	;# 
  2946  009C                     	;# 
  2947  009D                     	;# 
  2948  009E                     	;# 
  2949  009F                     	;# 
  2950  010C                     	;# 
  2951  010E                     	;# 
  2952  0111                     	;# 
  2953  0112                     	;# 
  2954  0113                     	;# 
  2955  0114                     	;# 
  2956  0115                     	;# 
  2957  0116                     	;# 
  2958  0117                     	;# 
  2959  0118                     	;# 
  2960  0119                     	;# 
  2961  018C                     	;# 
  2962  018E                     	;# 
  2963  0191                     	;# 
  2964  0191                     	;# 
  2965  0192                     	;# 
  2966  0193                     	;# 
  2967  0193                     	;# 
  2968  0194                     	;# 
  2969  0195                     	;# 
  2970  0196                     	;# 
  2971  0197                     	;# 
  2972  0199                     	;# 
  2973  019A                     	;# 
  2974  019B                     	;# 
  2975  019B                     	;# 
  2976  019C                     	;# 
  2977  019D                     	;# 
  2978  019E                     	;# 
  2979  019F                     	;# 
  2980  020C                     	;# 
  2981  020E                     	;# 
  2982  028C                     	;# 
  2983  028E                     	;# 
  2984  030C                     	;# 
  2985  030E                     	;# 
  2986  038C                     	;# 
  2987  038E                     	;# 
  2988  0391                     	;# 
  2989  0392                     	;# 
  2990  0393                     	;# 
  2991  0397                     	;# 
  2992  0398                     	;# 
  2993  0399                     	;# 
  2994  0691                     	;# 
  2995  0692                     	;# 
  2996  0693                     	;# 
  2997  0694                     	;# 
  2998  0695                     	;# 
  2999  0D8E                     	;# 
  3000  0D8F                     	;# 
  3001  0D90                     	;# 
  3002  0D91                     	;# 
  3003  0D91                     	;# 
  3004  0D92                     	;# 
  3005  0D93                     	;# 
  3006  0D93                     	;# 
  3007  0D94                     	;# 
  3008  0D95                     	;# 
  3009  0D95                     	;# 
  3010  0D96                     	;# 
  3011  0D97                     	;# 
  3012  0D97                     	;# 
  3013  0D98                     	;# 
  3014  0D99                     	;# 
  3015  0D99                     	;# 
  3016  0D9A                     	;# 
  3017  0D9B                     	;# 
  3018  0D9C                     	;# 
  3019  0D9C                     	;# 
  3020  0D9D                     	;# 
  3021  0D9D                     	;# 
  3022  0D9E                     	;# 
  3023  0D9F                     	;# 
  3024  0DA0                     	;# 
  3025  0DA1                     	;# 
  3026  0DA1                     	;# 
  3027  0DA2                     	;# 
  3028  0DA3                     	;# 
  3029  0DA3                     	;# 
  3030  0DA4                     	;# 
  3031  0DA5                     	;# 
  3032  0DA5                     	;# 
  3033  0DA6                     	;# 
  3034  0DA7                     	;# 
  3035  0DA7                     	;# 
  3036  0DA8                     	;# 
  3037  0DA9                     	;# 
  3038  0DA9                     	;# 
  3039  0DAA                     	;# 
  3040  0DAB                     	;# 
  3041  0DAC                     	;# 
  3042  0DAC                     	;# 
  3043  0DAD                     	;# 
  3044  0DAD                     	;# 
  3045  0DAE                     	;# 
  3046  0DAF                     	;# 
  3047  0DB0                     	;# 
  3048  0DB1                     	;# 
  3049  0DB1                     	;# 
  3050  0DB2                     	;# 
  3051  0DB3                     	;# 
  3052  0DB3                     	;# 
  3053  0DB4                     	;# 
  3054  0DB5                     	;# 
  3055  0DB5                     	;# 
  3056  0DB6                     	;# 
  3057  0DB7                     	;# 
  3058  0DB7                     	;# 
  3059  0DB8                     	;# 
  3060  0DB9                     	;# 
  3061  0DB9                     	;# 
  3062  0DBA                     	;# 
  3063  0DBB                     	;# 
  3064  0DBC                     	;# 
  3065  0DBC                     	;# 
  3066  0DBD                     	;# 
  3067  0DBD                     	;# 
  3068  0DBE                     	;# 
  3069  0DBF                     	;# 
  3070  0DC0                     	;# 
  3071  0DC1                     	;# 
  3072  0DC1                     	;# 
  3073  0DC2                     	;# 
  3074  0DC3                     	;# 
  3075  0DC3                     	;# 
  3076  0DC4                     	;# 
  3077  0DC5                     	;# 
  3078  0DC5                     	;# 
  3079  0DC6                     	;# 
  3080  0DC7                     	;# 
  3081  0DC7                     	;# 
  3082  0DC8                     	;# 
  3083  0DC9                     	;# 
  3084  0DC9                     	;# 
  3085  0DCA                     	;# 
  3086  0DCB                     	;# 
  3087  0DCC                     	;# 
  3088  0DCC                     	;# 
  3089  0DCD                     	;# 
  3090  0DCD                     	;# 
  3091  0DCE                     	;# 
  3092  0DCF                     	;# 
  3093  0DD0                     	;# 
  3094  0E0F                     	;# 
  3095  0E10                     	;# 
  3096  0E11                     	;# 
  3097  0E12                     	;# 
  3098  0E13                     	;# 
  3099  0E14                     	;# 
  3100  0E15                     	;# 
  3101  0E16                     	;# 
  3102  0E17                     	;# 
  3103  0E90                     	;# 
  3104  0E91                     	;# 
  3105  0E92                     	;# 
  3106  0E94                     	;# 
  3107  0E95                     	;# 
  3108  0EA0                     	;# 
  3109  0EA1                     	;# 
  3110  0EA2                     	;# 
  3111  0EA3                     	;# 
  3112  0EA4                     	;# 
  3113  0EA5                     	;# 
  3114  0FE4                     	;# 
  3115  0FE5                     	;# 
  3116  0FE6                     	;# 
  3117  0FE7                     	;# 
  3118  0FE8                     	;# 
  3119  0FE8                     	;# 
  3120  0FE9                     	;# 
  3121  0FEA                     	;# 
  3122  0FEA                     	;# 
  3123  0FEB                     	;# 
  3124  0FED                     	;# 
  3125  0FEE                     	;# 
  3126  0FEE                     	;# 
  3127  0FEF                     	;# 
  3128  0FFF                     	;# 
  3129  0000                     	;# 
  3130  0001                     	;# 
  3131  0002                     	;# 
  3132  0003                     	;# 
  3133  0004                     	;# 
  3134  0005                     	;# 
  3135  0006                     	;# 
  3136  0007                     	;# 
  3137  0008                     	;# 
  3138  0009                     	;# 
  3139  000A                     	;# 
  3140  000B                     	;# 
  3141  000C                     	;# 
  3142  000E                     	;# 
  3143  0011                     	;# 
  3144  0012                     	;# 
  3145  0013                     	;# 
  3146  0015                     	;# 
  3147  0016                     	;# 
  3148  0016                     	;# 
  3149  0017                     	;# 
  3150  0018                     	;# 
  3151  0019                     	;# 
  3152  001A                     	;# 
  3153  001B                     	;# 
  3154  001C                     	;# 
  3155  008C                     	;# 
  3156  008E                     	;# 
  3157  0091                     	;# 
  3158  0092                     	;# 
  3159  0093                     	;# 
  3160  0095                     	;# 
  3161  0096                     	;# 
  3162  0097                     	;# 
  3163  0098                     	;# 
  3164  0099                     	;# 
  3165  009A                     	;# 
  3166  009B                     	;# 
  3167  009B                     	;# 
  3168  009C                     	;# 
  3169  009D                     	;# 
  3170  009E                     	;# 
  3171  009F                     	;# 
  3172  010C                     	;# 
  3173  010E                     	;# 
  3174  0111                     	;# 
  3175  0112                     	;# 
  3176  0113                     	;# 
  3177  0114                     	;# 
  3178  0115                     	;# 
  3179  0116                     	;# 
  3180  0117                     	;# 
  3181  0118                     	;# 
  3182  0119                     	;# 
  3183  018C                     	;# 
  3184  018E                     	;# 
  3185  0191                     	;# 
  3186  0191                     	;# 
  3187  0192                     	;# 
  3188  0193                     	;# 
  3189  0193                     	;# 
  3190  0194                     	;# 
  3191  0195                     	;# 
  3192  0196                     	;# 
  3193  0197                     	;# 
  3194  0199                     	;# 
  3195  019A                     	;# 
  3196  019B                     	;# 
  3197  019B                     	;# 
  3198  019C                     	;# 
  3199  019D                     	;# 
  3200  019E                     	;# 
  3201  019F                     	;# 
  3202  020C                     	;# 
  3203  020E                     	;# 
  3204  028C                     	;# 
  3205  028E                     	;# 
  3206  030C                     	;# 
  3207  030E                     	;# 
  3208  038C                     	;# 
  3209  038E                     	;# 
  3210  0391                     	;# 
  3211  0392                     	;# 
  3212  0393                     	;# 
  3213  0397                     	;# 
  3214  0398                     	;# 
  3215  0399                     	;# 
  3216  0691                     	;# 
  3217  0692                     	;# 
  3218  0693                     	;# 
  3219  0694                     	;# 
  3220  0695                     	;# 
  3221  0D8E                     	;# 
  3222  0D8F                     	;# 
  3223  0D90                     	;# 
  3224  0D91                     	;# 
  3225  0D91                     	;# 
  3226  0D92                     	;# 
  3227  0D93                     	;# 
  3228  0D93                     	;# 
  3229  0D94                     	;# 
  3230  0D95                     	;# 
  3231  0D95                     	;# 
  3232  0D96                     	;# 
  3233  0D97                     	;# 
  3234  0D97                     	;# 
  3235  0D98                     	;# 
  3236  0D99                     	;# 
  3237  0D99                     	;# 
  3238  0D9A                     	;# 
  3239  0D9B                     	;# 
  3240  0D9C                     	;# 
  3241  0D9C                     	;# 
  3242  0D9D                     	;# 
  3243  0D9D                     	;# 
  3244  0D9E                     	;# 
  3245  0D9F                     	;# 
  3246  0DA0                     	;# 
  3247  0DA1                     	;# 
  3248  0DA1                     	;# 
  3249  0DA2                     	;# 
  3250  0DA3                     	;# 
  3251  0DA3                     	;# 
  3252  0DA4                     	;# 
  3253  0DA5                     	;# 
  3254  0DA5                     	;# 
  3255  0DA6                     	;# 
  3256  0DA7                     	;# 
  3257  0DA7                     	;# 
  3258  0DA8                     	;# 
  3259  0DA9                     	;# 
  3260  0DA9                     	;# 
  3261  0DAA                     	;# 
  3262  0DAB                     	;# 
  3263  0DAC                     	;# 
  3264  0DAC                     	;# 
  3265  0DAD                     	;# 
  3266  0DAD                     	;# 
  3267  0DAE                     	;# 
  3268  0DAF                     	;# 
  3269  0DB0                     	;# 
  3270  0DB1                     	;# 
  3271  0DB1                     	;# 
  3272  0DB2                     	;# 
  3273  0DB3                     	;# 
  3274  0DB3                     	;# 
  3275  0DB4                     	;# 
  3276  0DB5                     	;# 
  3277  0DB5                     	;# 
  3278  0DB6                     	;# 
  3279  0DB7                     	;# 
  3280  0DB7                     	;# 
  3281  0DB8                     	;# 
  3282  0DB9                     	;# 
  3283  0DB9                     	;# 
  3284  0DBA                     	;# 
  3285  0DBB                     	;# 
  3286  0DBC                     	;# 
  3287  0DBC                     	;# 
  3288  0DBD                     	;# 
  3289  0DBD                     	;# 
  3290  0DBE                     	;# 
  3291  0DBF                     	;# 
  3292  0DC0                     	;# 
  3293  0DC1                     	;# 
  3294  0DC1                     	;# 
  3295  0DC2                     	;# 
  3296  0DC3                     	;# 
  3297  0DC3                     	;# 
  3298  0DC4                     	;# 
  3299  0DC5                     	;# 
  3300  0DC5                     	;# 
  3301  0DC6                     	;# 
  3302  0DC7                     	;# 
  3303  0DC7                     	;# 
  3304  0DC8                     	;# 
  3305  0DC9                     	;# 
  3306  0DC9                     	;# 
  3307  0DCA                     	;# 
  3308  0DCB                     	;# 
  3309  0DCC                     	;# 
  3310  0DCC                     	;# 
  3311  0DCD                     	;# 
  3312  0DCD                     	;# 
  3313  0DCE                     	;# 
  3314  0DCF                     	;# 
  3315  0DD0                     	;# 
  3316  0E0F                     	;# 
  3317  0E10                     	;# 
  3318  0E11                     	;# 
  3319  0E12                     	;# 
  3320  0E13                     	;# 
  3321  0E14                     	;# 
  3322  0E15                     	;# 
  3323  0E16                     	;# 
  3324  0E17                     	;# 
  3325  0E90                     	;# 
  3326  0E91                     	;# 
  3327  0E92                     	;# 
  3328  0E94                     	;# 
  3329  0E95                     	;# 
  3330  0EA0                     	;# 
  3331  0EA1                     	;# 
  3332  0EA2                     	;# 
  3333  0EA3                     	;# 
  3334  0EA4                     	;# 
  3335  0EA5                     	;# 
  3336  0FE4                     	;# 
  3337  0FE5                     	;# 
  3338  0FE6                     	;# 
  3339  0FE7                     	;# 
  3340  0FE8                     	;# 
  3341  0FE8                     	;# 
  3342  0FE9                     	;# 
  3343  0FEA                     	;# 
  3344  0FEA                     	;# 
  3345  0FEB                     	;# 
  3346  0FED                     	;# 
  3347  0FEE                     	;# 
  3348  0FEE                     	;# 
  3349  0FEF                     	;# 
  3350  0FFF                     	;# 
  3351  0000                     	;# 
  3352  0001                     	;# 
  3353  0002                     	;# 
  3354  0003                     	;# 
  3355  0004                     	;# 
  3356  0005                     	;# 
  3357  0006                     	;# 
  3358  0007                     	;# 
  3359  0008                     	;# 
  3360  0009                     	;# 
  3361  000A                     	;# 
  3362  000B                     	;# 
  3363  000C                     	;# 
  3364  000E                     	;# 
  3365  0011                     	;# 
  3366  0012                     	;# 
  3367  0013                     	;# 
  3368  0015                     	;# 
  3369  0016                     	;# 
  3370  0016                     	;# 
  3371  0017                     	;# 
  3372  0018                     	;# 
  3373  0019                     	;# 
  3374  001A                     	;# 
  3375  001B                     	;# 
  3376  001C                     	;# 
  3377  008C                     	;# 
  3378  008E                     	;# 
  3379  0091                     	;# 
  3380  0092                     	;# 
  3381  0093                     	;# 
  3382  0095                     	;# 
  3383  0096                     	;# 
  3384  0097                     	;# 
  3385  0098                     	;# 
  3386  0099                     	;# 
  3387  009A                     	;# 
  3388  009B                     	;# 
  3389  009B                     	;# 
  3390  009C                     	;# 
  3391  009D                     	;# 
  3392  009E                     	;# 
  3393  009F                     	;# 
  3394  010C                     	;# 
  3395  010E                     	;# 
  3396  0111                     	;# 
  3397  0112                     	;# 
  3398  0113                     	;# 
  3399  0114                     	;# 
  3400  0115                     	;# 
  3401  0116                     	;# 
  3402  0117                     	;# 
  3403  0118                     	;# 
  3404  0119                     	;# 
  3405  018C                     	;# 
  3406  018E                     	;# 
  3407  0191                     	;# 
  3408  0191                     	;# 
  3409  0192                     	;# 
  3410  0193                     	;# 
  3411  0193                     	;# 
  3412  0194                     	;# 
  3413  0195                     	;# 
  3414  0196                     	;# 
  3415  0197                     	;# 
  3416  0199                     	;# 
  3417  019A                     	;# 
  3418  019B                     	;# 
  3419  019B                     	;# 
  3420  019C                     	;# 
  3421  019D                     	;# 
  3422  019E                     	;# 
  3423  019F                     	;# 
  3424  020C                     	;# 
  3425  020E                     	;# 
  3426  028C                     	;# 
  3427  028E                     	;# 
  3428  030C                     	;# 
  3429  030E                     	;# 
  3430  038C                     	;# 
  3431  038E                     	;# 
  3432  0391                     	;# 
  3433  0392                     	;# 
  3434  0393                     	;# 
  3435  0397                     	;# 
  3436  0398                     	;# 
  3437  0399                     	;# 
  3438  0691                     	;# 
  3439  0692                     	;# 
  3440  0693                     	;# 
  3441  0694                     	;# 
  3442  0695                     	;# 
  3443  0D8E                     	;# 
  3444  0D8F                     	;# 
  3445  0D90                     	;# 
  3446  0D91                     	;# 
  3447  0D91                     	;# 
  3448  0D92                     	;# 
  3449  0D93                     	;# 
  3450  0D93                     	;# 
  3451  0D94                     	;# 
  3452  0D95                     	;# 
  3453  0D95                     	;# 
  3454  0D96                     	;# 
  3455  0D97                     	;# 
  3456  0D97                     	;# 
  3457  0D98                     	;# 
  3458  0D99                     	;# 
  3459  0D99                     	;# 
  3460  0D9A                     	;# 
  3461  0D9B                     	;# 
  3462  0D9C                     	;# 
  3463  0D9C                     	;# 
  3464  0D9D                     	;# 
  3465  0D9D                     	;# 
  3466  0D9E                     	;# 
  3467  0D9F                     	;# 
  3468  0DA0                     	;# 
  3469  0DA1                     	;# 
  3470  0DA1                     	;# 
  3471  0DA2                     	;# 
  3472  0DA3                     	;# 
  3473  0DA3                     	;# 
  3474  0DA4                     	;# 
  3475  0DA5                     	;# 
  3476  0DA5                     	;# 
  3477  0DA6                     	;# 
  3478  0DA7                     	;# 
  3479  0DA7                     	;# 
  3480  0DA8                     	;# 
  3481  0DA9                     	;# 
  3482  0DA9                     	;# 
  3483  0DAA                     	;# 
  3484  0DAB                     	;# 
  3485  0DAC                     	;# 
  3486  0DAC                     	;# 
  3487  0DAD                     	;# 
  3488  0DAD                     	;# 
  3489  0DAE                     	;# 
  3490  0DAF                     	;# 
  3491  0DB0                     	;# 
  3492  0DB1                     	;# 
  3493  0DB1                     	;# 
  3494  0DB2                     	;# 
  3495  0DB3                     	;# 
  3496  0DB3                     	;# 
  3497  0DB4                     	;# 
  3498  0DB5                     	;# 
  3499  0DB5                     	;# 
  3500  0DB6                     	;# 
  3501  0DB7                     	;# 
  3502  0DB7                     	;# 
  3503  0DB8                     	;# 
  3504  0DB9                     	;# 
  3505  0DB9                     	;# 
  3506  0DBA                     	;# 
  3507  0DBB                     	;# 
  3508  0DBC                     	;# 
  3509  0DBC                     	;# 
  3510  0DBD                     	;# 
  3511  0DBD                     	;# 
  3512  0DBE                     	;# 
  3513  0DBF                     	;# 
  3514  0DC0                     	;# 
  3515  0DC1                     	;# 
  3516  0DC1                     	;# 
  3517  0DC2                     	;# 
  3518  0DC3                     	;# 
  3519  0DC3                     	;# 
  3520  0DC4                     	;# 
  3521  0DC5                     	;# 
  3522  0DC5                     	;# 
  3523  0DC6                     	;# 
  3524  0DC7                     	;# 
  3525  0DC7                     	;# 
  3526  0DC8                     	;# 
  3527  0DC9                     	;# 
  3528  0DC9                     	;# 
  3529  0DCA                     	;# 
  3530  0DCB                     	;# 
  3531  0DCC                     	;# 
  3532  0DCC                     	;# 
  3533  0DCD                     	;# 
  3534  0DCD                     	;# 
  3535  0DCE                     	;# 
  3536  0DCF                     	;# 
  3537  0DD0                     	;# 
  3538  0E0F                     	;# 
  3539  0E10                     	;# 
  3540  0E11                     	;# 
  3541  0E12                     	;# 
  3542  0E13                     	;# 
  3543  0E14                     	;# 
  3544  0E15                     	;# 
  3545  0E16                     	;# 
  3546  0E17                     	;# 
  3547  0E90                     	;# 
  3548  0E91                     	;# 
  3549  0E92                     	;# 
  3550  0E94                     	;# 
  3551  0E95                     	;# 
  3552  0EA0                     	;# 
  3553  0EA1                     	;# 
  3554  0EA2                     	;# 
  3555  0EA3                     	;# 
  3556  0EA4                     	;# 
  3557  0EA5                     	;# 
  3558  0FE4                     	;# 
  3559  0FE5                     	;# 
  3560  0FE6                     	;# 
  3561  0FE7                     	;# 
  3562  0FE8                     	;# 
  3563  0FE8                     	;# 
  3564  0FE9                     	;# 
  3565  0FEA                     	;# 
  3566  0FEA                     	;# 
  3567  0FEB                     	;# 
  3568  0FED                     	;# 
  3569  0FEE                     	;# 
  3570  0FEE                     	;# 
  3571  0FEF                     	;# 
  3572  0FFF                     	;# 
  3573  0000                     	;# 
  3574  0001                     	;# 
  3575  0002                     	;# 
  3576  0003                     	;# 
  3577  0004                     	;# 
  3578  0005                     	;# 
  3579  0006                     	;# 
  3580  0007                     	;# 
  3581  0008                     	;# 
  3582  0009                     	;# 
  3583  000A                     	;# 
  3584  000B                     	;# 
  3585  000C                     	;# 
  3586  000E                     	;# 
  3587  0011                     	;# 
  3588  0012                     	;# 
  3589  0013                     	;# 
  3590  0015                     	;# 
  3591  0016                     	;# 
  3592  0016                     	;# 
  3593  0017                     	;# 
  3594  0018                     	;# 
  3595  0019                     	;# 
  3596  001A                     	;# 
  3597  001B                     	;# 
  3598  001C                     	;# 
  3599  008C                     	;# 
  3600  008E                     	;# 
  3601  0091                     	;# 
  3602  0092                     	;# 
  3603  0093                     	;# 
  3604  0095                     	;# 
  3605  0096                     	;# 
  3606  0097                     	;# 
  3607  0098                     	;# 
  3608  0099                     	;# 
  3609  009A                     	;# 
  3610  009B                     	;# 
  3611  009B                     	;# 
  3612  009C                     	;# 
  3613  009D                     	;# 
  3614  009E                     	;# 
  3615  009F                     	;# 
  3616  010C                     	;# 
  3617  010E                     	;# 
  3618  0111                     	;# 
  3619  0112                     	;# 
  3620  0113                     	;# 
  3621  0114                     	;# 
  3622  0115                     	;# 
  3623  0116                     	;# 
  3624  0117                     	;# 
  3625  0118                     	;# 
  3626  0119                     	;# 
  3627  018C                     	;# 
  3628  018E                     	;# 
  3629  0191                     	;# 
  3630  0191                     	;# 
  3631  0192                     	;# 
  3632  0193                     	;# 
  3633  0193                     	;# 
  3634  0194                     	;# 
  3635  0195                     	;# 
  3636  0196                     	;# 
  3637  0197                     	;# 
  3638  0199                     	;# 
  3639  019A                     	;# 
  3640  019B                     	;# 
  3641  019B                     	;# 
  3642  019C                     	;# 
  3643  019D                     	;# 
  3644  019E                     	;# 
  3645  019F                     	;# 
  3646  020C                     	;# 
  3647  020E                     	;# 
  3648  028C                     	;# 
  3649  028E                     	;# 
  3650  030C                     	;# 
  3651  030E                     	;# 
  3652  038C                     	;# 
  3653  038E                     	;# 
  3654  0391                     	;# 
  3655  0392                     	;# 
  3656  0393                     	;# 
  3657  0397                     	;# 
  3658  0398                     	;# 
  3659  0399                     	;# 
  3660  0691                     	;# 
  3661  0692                     	;# 
  3662  0693                     	;# 
  3663  0694                     	;# 
  3664  0695                     	;# 
  3665  0D8E                     	;# 
  3666  0D8F                     	;# 
  3667  0D90                     	;# 
  3668  0D91                     	;# 
  3669  0D91                     	;# 
  3670  0D92                     	;# 
  3671  0D93                     	;# 
  3672  0D93                     	;# 
  3673  0D94                     	;# 
  3674  0D95                     	;# 
  3675  0D95                     	;# 
  3676  0D96                     	;# 
  3677  0D97                     	;# 
  3678  0D97                     	;# 
  3679  0D98                     	;# 
  3680  0D99                     	;# 
  3681  0D99                     	;# 
  3682  0D9A                     	;# 
  3683  0D9B                     	;# 
  3684  0D9C                     	;# 
  3685  0D9C                     	;# 
  3686  0D9D                     	;# 
  3687  0D9D                     	;# 
  3688  0D9E                     	;# 
  3689  0D9F                     	;# 
  3690  0DA0                     	;# 
  3691  0DA1                     	;# 
  3692  0DA1                     	;# 
  3693  0DA2                     	;# 
  3694  0DA3                     	;# 
  3695  0DA3                     	;# 
  3696  0DA4                     	;# 
  3697  0DA5                     	;# 
  3698  0DA5                     	;# 
  3699  0DA6                     	;# 
  3700  0DA7                     	;# 
  3701  0DA7                     	;# 
  3702  0DA8                     	;# 
  3703  0DA9                     	;# 
  3704  0DA9                     	;# 
  3705  0DAA                     	;# 
  3706  0DAB                     	;# 
  3707  0DAC                     	;# 
  3708  0DAC                     	;# 
  3709  0DAD                     	;# 
  3710  0DAD                     	;# 
  3711  0DAE                     	;# 
  3712  0DAF                     	;# 
  3713  0DB0                     	;# 
  3714  0DB1                     	;# 
  3715  0DB1                     	;# 
  3716  0DB2                     	;# 
  3717  0DB3                     	;# 
  3718  0DB3                     	;# 
  3719  0DB4                     	;# 
  3720  0DB5                     	;# 
  3721  0DB5                     	;# 
  3722  0DB6                     	;# 
  3723  0DB7                     	;# 
  3724  0DB7                     	;# 
  3725  0DB8                     	;# 
  3726  0DB9                     	;# 
  3727  0DB9                     	;# 
  3728  0DBA                     	;# 
  3729  0DBB                     	;# 
  3730  0DBC                     	;# 
  3731  0DBC                     	;# 
  3732  0DBD                     	;# 
  3733  0DBD                     	;# 
  3734  0DBE                     	;# 
  3735  0DBF                     	;# 
  3736  0DC0                     	;# 
  3737  0DC1                     	;# 
  3738  0DC1                     	;# 
  3739  0DC2                     	;# 
  3740  0DC3                     	;# 
  3741  0DC3                     	;# 
  3742  0DC4                     	;# 
  3743  0DC5                     	;# 
  3744  0DC5                     	;# 
  3745  0DC6                     	;# 
  3746  0DC7                     	;# 
  3747  0DC7                     	;# 
  3748  0DC8                     	;# 
  3749  0DC9                     	;# 
  3750  0DC9                     	;# 
  3751  0DCA                     	;# 
  3752  0DCB                     	;# 
  3753  0DCC                     	;# 
  3754  0DCC                     	;# 
  3755  0DCD                     	;# 
  3756  0DCD                     	;# 
  3757  0DCE                     	;# 
  3758  0DCF                     	;# 
  3759  0DD0                     	;# 
  3760  0E0F                     	;# 
  3761  0E10                     	;# 
  3762  0E11                     	;# 
  3763  0E12                     	;# 
  3764  0E13                     	;# 
  3765  0E14                     	;# 
  3766  0E15                     	;# 
  3767  0E16                     	;# 
  3768  0E17                     	;# 
  3769  0E90                     	;# 
  3770  0E91                     	;# 
  3771  0E92                     	;# 
  3772  0E94                     	;# 
  3773  0E95                     	;# 
  3774  0EA0                     	;# 
  3775  0EA1                     	;# 
  3776  0EA2                     	;# 
  3777  0EA3                     	;# 
  3778  0EA4                     	;# 
  3779  0EA5                     	;# 
  3780  0FE4                     	;# 
  3781  0FE5                     	;# 
  3782  0FE6                     	;# 
  3783  0FE7                     	;# 
  3784  0FE8                     	;# 
  3785  0FE8                     	;# 
  3786  0FE9                     	;# 
  3787  0FEA                     	;# 
  3788  0FEA                     	;# 
  3789  0FEB                     	;# 
  3790  0FED                     	;# 
  3791  0FEE                     	;# 
  3792  0FEE                     	;# 
  3793  0FEF                     	;# 
  3794  0FFF                     	;# 
  3795                           
  3796 ;; Function _TMR2_DefaultInterruptHandler is unused but had its address taken
  3797  0000                     
  3798                           	psect	idataBANK0
  3799  08BF                     __pidataBANK0:	
  3800                           
  3801                           ;initializer for _resRc
  3802  08BF  3410               	retlw	16
  3803  08C0  3427               	retlw	39
  3804  08C1  3400               	retlw	0
  3805  08C2  3400               	retlw	0
  3806                           
  3807                           ;initializer for _pwm2DutyForVout
  3808  08C3  3410               	retlw	16
  3809  08C4  3400               	retlw	0
  3810                           
  3811                           	psect	idataBANK1
  3812  07EE                     __pidataBANK1:	
  3813                           
  3814                           ;initializer for _bbmax
  3815  07EE  34C0               	retlw	192
  3816  07EF  34F2               	retlw	242
  3817  07F0  34FC               	retlw	252
  3818  07F1  34FF               	retlw	255
  3819                           
  3820                           ;initializer for _bbmin
  3821  07F2  3440               	retlw	64
  3822  07F3  340D               	retlw	13
  3823  07F4  3403               	retlw	3
  3824  07F5  3400               	retlw	0
  3825                           
  3826                           ;initializer for _pidU
  3827  07F6  3414               	retlw	20
  3828  07F7  3400               	retlw	0
  3829  07F8  3400               	retlw	0
  3830  07F9  3400               	retlw	0
  3831                           
  3832                           ;initializer for _resRs
  3833  07FA  3410               	retlw	16
  3834  07FB  3427               	retlw	39
  3835  07FC  3400               	retlw	0
  3836  07FD  3400               	retlw	0
  3837  000B                     _INTCONbits	set	11
  3838  0011                     _PIR1bits	set	17
  3839  001B                     _PR2	set	27
  3840  001C                     _T2CON	set	28
  3841  001C                     _T2CONbits	set	28
  3842  001A                     _TMR2	set	26
  3843  005F                     _GIE	set	95
  3844  009D                     _ADCON0	set	157
  3845  009D                     _ADCON0bits	set	157
  3846  009E                     _ADCON1	set	158
  3847  009F                     _ADCON2	set	159
  3848  009C                     _ADRESH	set	156
  3849  009B                     _ADRESL	set	155
  3850  0095                     _OPTION_REGbits	set	149
  3851  0099                     _OSCCON	set	153
  3852  0098                     _OSCTUNE	set	152
  3853  0091                     _PIE1bits	set	145
  3854  008C                     _TRISA	set	140
  3855  008E                     _TRISC	set	142
  3856  0097                     _WDTCON	set	151
  3857  0117                     _FVRCON	set	279
  3858  0117                     _FVRCONbits	set	279
  3859  010C                     _LATA	set	268
  3860  010E                     _LATC	set	270
  3861  018C                     _ANSELA	set	396
  3862  018E                     _ANSELC	set	398
  3863  019F                     _BAUDCON	set	415
  3864  0192                     _PMADRH	set	402
  3865  0191                     _PMADRL	set	401
  3866  0195                     _PMCON1bits	set	405
  3867  0196                     _PMCON2	set	406
  3868  0194                     _PMDATH	set	404
  3869  0193                     _PMDATL	set	403
  3870  0199                     _RCREG	set	409
  3871  019D                     _RCSTA	set	413
  3872  019D                     _RCSTAbits	set	413
  3873  019C                     _SPBRGH	set	412
  3874  019B                     _SPBRGL	set	411
  3875  019A                     _TXREG	set	410
  3876  019E                     _TXSTA	set	414
  3877  019E                     _TXSTAbits	set	414
  3878  020C                     _WPUA	set	524
  3879  020E                     _WPUC	set	526
  3880  028C                     _ODCONA	set	652
  3881  028E                     _ODCONC	set	654
  3882  0D9E                     _PWM1CLKCON	set	3486
  3883  0D9B                     _PWM1CON	set	3483
  3884  0D9B                     _PWM1CONbits	set	3483
  3885  0D94                     _PWM1DCH	set	3476
  3886  0D93                     _PWM1DCL	set	3475
  3887  0D9C                     _PWM1INTE	set	3484
  3888  0D9D                     _PWM1INTF	set	3485
  3889  0D9F                     _PWM1LDCON	set	3487
  3890  0DA0                     _PWM1OFCON	set	3488
  3891  0D98                     _PWM1OFH	set	3480
  3892  0D97                     _PWM1OFL	set	3479
  3893  0D92                     _PWM1PHH	set	3474
  3894  0D91                     _PWM1PHL	set	3473
  3895  0D96                     _PWM1PRH	set	3478
  3896  0D95                     _PWM1PRL	set	3477
  3897  0D9A                     _PWM1TMRH	set	3482
  3898  0D99                     _PWM1TMRL	set	3481
  3899  0DAE                     _PWM2CLKCON	set	3502
  3900  0DAB                     _PWM2CON	set	3499
  3901  0DAB                     _PWM2CONbits	set	3499
  3902  0DA4                     _PWM2DCH	set	3492
  3903  0DA3                     _PWM2DCL	set	3491
  3904  0DAC                     _PWM2INTE	set	3500
  3905  0DAD                     _PWM2INTF	set	3501
  3906  0DAF                     _PWM2LDCON	set	3503
  3907  0DB0                     _PWM2OFCON	set	3504
  3908  0DA8                     _PWM2OFH	set	3496
  3909  0DA7                     _PWM2OFL	set	3495
  3910  0DA2                     _PWM2PHH	set	3490
  3911  0DA1                     _PWM2PHL	set	3489
  3912  0DA6                     _PWM2PRH	set	3494
  3913  0DA5                     _PWM2PRL	set	3493
  3914  0DAA                     _PWM2TMRH	set	3498
  3915  0DA9                     _PWM2TMRL	set	3497
  3916  0E0F                     _PPSLOCK	set	3599
  3917  0E0F                     _PPSLOCKbits	set	3599
  3918  0E15                     _RXPPSbits	set	3605
  3919  0E94                     _RA4PPSbits	set	3732
  3920  0E95                     _RA5PPSbits	set	3733
  3921  0EA5                     _RC5PPSbits	set	3749
  3922                           
  3923                           ; #config settings
  3924  0000                     
  3925                           	psect	cinit
  3926  0052                     start_initialization:	
  3927  0052                     __initialization:	
  3928  0052  304D               	movlw	low __pbssBANK0
  3929                           
  3930                           ; Clear objects allocated to COMMON
  3931  0053  01FC               	clrf	__pbssCOMMON& (0+127)
  3932                           
  3933                           ; Clear objects allocated to BANK0
  3934  0054  0084               	movwf	4
  3935  0055  3000               	movlw	high __pbssBANK0
  3936  0056  0085               	movwf	5
  3937  0057  301A               	movlw	26
  3938  0058  3188  20B9  3180   	fcall	clear_ram0
  3939                           
  3940                           ; Clear objects allocated to BANK1
  3941  005B  30A0               	movlw	low __pbssBANK1
  3942  005C  0084               	movwf	4
  3943  005D  3000               	movlw	high __pbssBANK1
  3944  005E  0085               	movwf	5
  3945  005F  3030               	movlw	48
  3946  0060  3188  20B9  3180   	fcall	clear_ram0
  3947                           
  3948                           ; Clear objects allocated to BANK2
  3949  0063  3020               	movlw	low __pbssBANK2
  3950  0064  0084               	movwf	4
  3951  0065  3001               	movlw	high __pbssBANK2
  3952  0066  0085               	movwf	5
  3953  0067  3034               	movlw	52
  3954  0068  3188  20B9  3180   	fcall	clear_ram0
  3955                           
  3956                           ; Clear objects allocated to BANK3
  3957  006B  30A0               	movlw	low __pbssBANK3
  3958  006C  0084               	movwf	4
  3959  006D  3001               	movlw	high __pbssBANK3
  3960  006E  0085               	movwf	5
  3961  006F  3040               	movlw	64
  3962  0070  3188  20B9  3180   	fcall	clear_ram0
  3963                           
  3964                           ; Clear objects allocated to BANK4
  3965  0073  3020               	movlw	low __pbssBANK4
  3966  0074  0084               	movwf	4
  3967  0075  3002               	movlw	high __pbssBANK4
  3968  0076  0085               	movwf	5
  3969  0077  3040               	movlw	64
  3970  0078  3188  20B9  3180   	fcall	clear_ram0
  3971                           
  3972                           ; Initialize objects allocated to BANK0
  3973  007B  30BF               	movlw	low __pidataBANK0
  3974  007C  0084               	movwf	4
  3975  007D  3088               	movlw	(high __pidataBANK0)| (0+128)
  3976  007E  0085               	movwf	5
  3977  007F  3067               	movlw	low __pdataBANK0
  3978  0080  0086               	movwf	6
  3979  0081  3000               	movlw	high __pdataBANK0
  3980  0082  0087               	movwf	7
  3981  0083  3006               	movlw	6
  3982  0084  3188  20B3  3180   	fcall	init_ram
  3983                           
  3984                           ; Initialize objects allocated to BANK1
  3985  0087  30EE               	movlw	low __pidataBANK1
  3986  0088  0084               	movwf	4
  3987  0089  3087               	movlw	(high __pidataBANK1)| (0+128)
  3988  008A  0085               	movwf	5
  3989  008B  30D0               	movlw	low __pdataBANK1
  3990  008C  0086               	movwf	6
  3991  008D  3000               	movlw	high __pdataBANK1
  3992  008E  0087               	movwf	7
  3993  008F  3010               	movlw	16
  3994  0090  3188  20B3  3180   	fcall	init_ram
  3995  0093                     end_of_initialization:	
  3996                           ;End of C runtime variable initialization code
  3997                           
  3998  0093                     __end_of__initialization:	
  3999  0093  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4000  0094  0020               	movlb	0
  4001  0095  2896               	ljmp	_main	;jump to C main() function
  4002  0096                     __pmaintext:	
  4003 ;;
  4004 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4005 ;;
  4006 ;; *************** function _main *****************
  4007 ;; Defined at:
  4008 ;;		line 17 in file "src/app/main.c"
  4009 ;; Parameters:    Size  Location     Type
  4010 ;;		None
  4011 ;; Auto vars:     Size  Location     Type
  4012 ;;		None
  4013 ;; Return value:  Size  Location     Type
  4014 ;;                  1    wreg      void 
  4015 ;; Registers used:
  4016 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4017 ;; Tracked objects:
  4018 ;;		On entry : B1F/0
  4019 ;;		On exit  : 0/0
  4020 ;;		Unchanged: 0/0
  4021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4025 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4026 ;;Total ram usage:        0 bytes
  4027 ;; Hardware stack levels required when called:    6
  4028 ;; This function calls:
  4029 ;;		_SYSTEM_Initialize
  4030 ;;		_adc_sample
  4031 ;;		_cal_rs_simulate_power
  4032 ;;		_calc_expect_vout_adc_value
  4033 ;;		_calc_temp_rc
  4034 ;;		_calc_temp_rs
  4035 ;;		_m_mem_cpy_len
  4036 ;;		_modbus_response_process
  4037 ;;		_pid_pwm1_idrv_b_b
  4038 ;;		_pid_pwm1_idrv_run
  4039 ;;		_pid_pwm2_vout_run
  4040 ;;		_set_vout_pwm2_duty
  4041 ;;		_sys_data_init
  4042 ;;		_sys_data_save
  4043 ;;		_uart_received_start
  4044 ;; This function is called by:
  4045 ;;		Startup code after reset
  4046 ;; This function uses a non-reentrant model
  4047 ;;
  4048                           
  4049                           
  4050                           ;psect for function _main
  4051  0096                     _main:	
  4052                           
  4053                           ;main.c: 19: __nop();
  4054                           
  4055                           ;incstack = 0
  4056                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4057  0096  0000               	nop
  4058                           
  4059                           ;main.c: 21: SYSTEM_Initialize();
  4060  0097  21C5               	fcall	_SYSTEM_Initialize
  4061  0098  178B               	bsf	11,7	;volatile
  4062  0099  170B               	bsf	11,6	;volatile
  4063                           
  4064                           ;main.c: 24: set_vout_pwm2_duty(10);
  4065  009A  300A               	movlw	10
  4066  009B  00F3               	movwf	set_vout_pwm2_duty@duty
  4067  009C  01F4               	clrf	set_vout_pwm2_duty@duty+1
  4068  009D  318A  2225  3180   	fcall	_set_vout_pwm2_duty
  4069                           
  4070                           ;main.c: 25: sys_data_init();
  4071  00A0  318E  2642  3180   	fcall	_sys_data_init
  4072                           
  4073                           ;main.c: 27: if(sysData.pidSetFlg0 != 0x55 || sysData.pidSetFlg1 != 0xaa){
  4074  00A3  3055               	movlw	85
  4075  00A4  0022               	movlb	2	; select bank2
  4076  00A5  0620               	xorwf	_sysData^(0+256),w
  4077  00A6  1D03               	btfss	3,2
  4078  00A7  28AC               	goto	l4333
  4079  00A8  30AA               	movlw	170
  4080  00A9  0621               	xorwf	(_sysData^(0+256)+1),w
  4081  00AA  1903               	btfsc	3,2
  4082  00AB  28AF               	goto	l4335
  4083  00AC                     l4333:	
  4084                           
  4085                           ;main.c: 28: pidBbSm=0;
  4086  00AC  0020               	movlb	0	; select bank0
  4087  00AD  01E3               	clrf	_pidBbSm
  4088                           
  4089                           ;main.c: 29: }else{
  4090  00AE  28D0               	goto	l4337
  4091  00AF                     l4335:	
  4092                           
  4093                           ;main.c: 30: pidBbSm=5;
  4094  00AF  3005               	movlw	5
  4095  00B0  0020               	movlb	0	; select bank0
  4096  00B1  00E3               	movwf	_pidBbSm
  4097                           
  4098                           ;main.c: 31: PidKp=sysData.pidKp;
  4099  00B2  0022               	movlb	2	; select bank2
  4100  00B3  0824               	movf	(_sysData^(0+256)+4),w
  4101  00B4  0020               	movlb	0	; select bank0
  4102  00B5  00CD               	movwf	_PidKp
  4103  00B6  0022               	movlb	2	; select bank2
  4104  00B7  0825               	movf	((_sysData+1)^(0+256)+4),w
  4105  00B8  0020               	movlb	0	; select bank0
  4106  00B9  00CE               	movwf	_PidKp+1
  4107  00BA  01CF               	clrf	_PidKp+2
  4108  00BB  01D0               	clrf	_PidKp+3
  4109                           
  4110                           ;main.c: 32: PidTd=sysData.pidTd;
  4111  00BC  0022               	movlb	2	; select bank2
  4112  00BD  0828               	movf	(_sysData^(0+256)+8),w
  4113  00BE  0021               	movlb	1	; select bank1
  4114  00BF  00AC               	movwf	_PidTd^(0+128)
  4115  00C0  0022               	movlb	2	; select bank2
  4116  00C1  0829               	movf	((_sysData+1)^(0+256)+8),w
  4117  00C2  0021               	movlb	1	; select bank1
  4118  00C3  00AD               	movwf	(_PidTd^(0+128)+1)
  4119  00C4  01AE               	clrf	(_PidTd^(0+128)+2)
  4120  00C5  01AF               	clrf	(_PidTd^(0+128)+3)
  4121                           
  4122                           ;main.c: 33: PidTi=sysData.pidTi;
  4123  00C6  0022               	movlb	2	; select bank2
  4124  00C7  0826               	movf	(_sysData^(0+256)+6),w
  4125  00C8  0021               	movlb	1	; select bank1
  4126  00C9  00B0               	movwf	_PidTi^(0+128)
  4127  00CA  0022               	movlb	2	; select bank2
  4128  00CB  0827               	movf	((_sysData+1)^(0+256)+6),w
  4129  00CC  0021               	movlb	1	; select bank1
  4130  00CD  00B1               	movwf	(_PidTi^(0+128)+1)
  4131  00CE  01B2               	clrf	(_PidTi^(0+128)+2)
  4132  00CF  01B3               	clrf	(_PidTi^(0+128)+3)
  4133  00D0                     l4337:	
  4134                           
  4135                           ;main.c: 37: if(Event & (1<<2)){
  4136  00D0  0020               	movlb	0	; select bank0
  4137  00D1  1D61               	btfss	_Event,2	;volatile
  4138  00D2  296D               	goto	l4361
  4139                           
  4140                           ;main.c: 38: Event &= ~(1<<2);
  4141  00D3  1161               	bcf	_Event,2	;volatile
  4142  00D4  3020               	movlw	32
  4143                           
  4144                           ;main.c: 40: rtAdcValueRsLo=adc_sample(channel_AN6,1,32);
  4145  00D5  01F3               	clrf	adc_sample@gfvr
  4146  00D6  0AF3               	incf	adc_sample@gfvr,f
  4147  00D7  00F4               	movwf	adc_sample@num
  4148  00D8  3006               	movlw	6
  4149  00D9  218D  3180         	fcall	_adc_sample
  4150  00DB  0874               	movf	?_adc_sample+1,w
  4151  00DC  0020               	movlb	0	; select bank0
  4152  00DD  00DC               	movwf	_rtAdcValueRsLo+1
  4153  00DE  0873               	movf	?_adc_sample,w
  4154  00DF  00DB               	movwf	_rtAdcValueRsLo
  4155                           
  4156                           ;main.c: 42: rtAdcValueRsHi=adc_sample(channel_AN5,3,32);
  4157  00E0  3003               	movlw	3
  4158  00E1  00F3               	movwf	adc_sample@gfvr
  4159  00E2  3020               	movlw	32
  4160  00E3  00F4               	movwf	adc_sample@num
  4161  00E4  3005               	movlw	5
  4162  00E5  218D  3180         	fcall	_adc_sample
  4163  00E7  0874               	movf	?_adc_sample+1,w
  4164  00E8  0020               	movlb	0	; select bank0
  4165  00E9  00DA               	movwf	_rtAdcValueRsHi+1
  4166  00EA  0873               	movf	?_adc_sample,w
  4167  00EB  00D9               	movwf	_rtAdcValueRsHi
  4168                           
  4169                           ;main.c: 45: rtAdcValueRcLo=adc_sample(channel_AN4,3,16);
  4170  00EC  3003               	movlw	3
  4171  00ED  00F3               	movwf	adc_sample@gfvr
  4172  00EE  3010               	movlw	16
  4173  00EF  00F4               	movwf	adc_sample@num
  4174  00F0  3004               	movlw	4
  4175  00F1  218D  3180         	fcall	_adc_sample
  4176  00F3  0874               	movf	?_adc_sample+1,w
  4177  00F4  0020               	movlb	0	; select bank0
  4178  00F5  00D8               	movwf	_rtAdcValueRcLo+1
  4179  00F6  0873               	movf	?_adc_sample,w
  4180  00F7  00D7               	movwf	_rtAdcValueRcLo
  4181                           
  4182                           ;main.c: 46: rtAdcValueRcHi=adc_sample(channel_AN2,3,16);
  4183  00F8  3003               	movlw	3
  4184  00F9  00F3               	movwf	adc_sample@gfvr
  4185  00FA  3010               	movlw	16
  4186  00FB  00F4               	movwf	adc_sample@num
  4187  00FC  3002               	movlw	2
  4188  00FD  218D  3180         	fcall	_adc_sample
  4189  00FF  0874               	movf	?_adc_sample+1,w
  4190  0100  0020               	movlb	0	; select bank0
  4191  0101  00D6               	movwf	_rtAdcValueRcHi+1
  4192  0102  0873               	movf	?_adc_sample,w
  4193  0103  00D5               	movwf	_rtAdcValueRcHi
  4194  0104  3010               	movlw	16
  4195                           
  4196                           ;main.c: 47: rtAdcValueVoFb=adc_sample(channel_AN7,1,16);
  4197  0105  01F3               	clrf	adc_sample@gfvr
  4198  0106  0AF3               	incf	adc_sample@gfvr,f
  4199  0107  00F4               	movwf	adc_sample@num
  4200  0108  3007               	movlw	7
  4201  0109  218D  3180         	fcall	_adc_sample
  4202  010B  0874               	movf	?_adc_sample+1,w
  4203  010C  0020               	movlb	0	; select bank0
  4204  010D  00DE               	movwf	_rtAdcValueVoFb+1
  4205  010E  0873               	movf	?_adc_sample,w
  4206  010F  00DD               	movwf	_rtAdcValueVoFb
  4207                           
  4208                           ;main.c: 50: resRc=calc_temp_rc();
  4209  0110  2606               	fcall	_calc_temp_rc
  4210  0111  0828               	movf	?_calc_temp_rc+3,w
  4211  0112  00EA               	movwf	_resRc+3
  4212  0113  0827               	movf	?_calc_temp_rc+2,w
  4213  0114  00E9               	movwf	_resRc+2
  4214  0115  0826               	movf	?_calc_temp_rc+1,w
  4215  0116  00E8               	movwf	_resRc+1
  4216  0117  0825               	movf	?_calc_temp_rc,w
  4217  0118  00E7               	movwf	_resRc
  4218                           
  4219                           ;main.c: 51: resRs=calc_temp_rs();
  4220  0119  3188  20D8  3180   	fcall	_calc_temp_rs
  4221  011C  0828               	movf	?_calc_temp_rs+3,w
  4222  011D  0021               	movlb	1	; select bank1
  4223  011E  00DF               	movwf	(_resRs+3)^(0+128)
  4224  011F  0020               	movlb	0	; select bank0
  4225  0120  0827               	movf	?_calc_temp_rs+2,w
  4226  0121  0021               	movlb	1	; select bank1
  4227  0122  00DE               	movwf	(_resRs+2)^(0+128)
  4228  0123  0020               	movlb	0	; select bank0
  4229  0124  0826               	movf	?_calc_temp_rs+1,w
  4230  0125  0021               	movlb	1	; select bank1
  4231  0126  00DD               	movwf	(_resRs+1)^(0+128)
  4232  0127  0020               	movlb	0	; select bank0
  4233  0128  0825               	movf	?_calc_temp_rs,w
  4234  0129  0021               	movlb	1	; select bank1
  4235  012A  00DC               	movwf	_resRs^(0+128)
  4236                           
  4237                           ;main.c: 53: __nop();
  4238  012B  0000               	nop
  4239                           
  4240                           ;main.c: 54: if(pidBbSm>=5){
  4241  012C  3005               	movlw	5
  4242  012D  0020               	movlb	0	; select bank0
  4243  012E  0263               	subwf	_pidBbSm,w
  4244  012F  1C03               	skipc
  4245  0130  2947               	goto	l4353
  4246                           
  4247                           ;main.c: 55: pid_pwm1_idrv_run();
  4248  0131  318A  2241  3180   	fcall	_pid_pwm1_idrv_run
  4249                           
  4250                           ;main.c: 56: rsSimPower=cal_rs_simulate_power();
  4251  0134  226E  3180         	fcall	_cal_rs_simulate_power
  4252  0136  0825               	movf	?_cal_rs_simulate_power+1,w
  4253  0137  00D4               	movwf	_rsSimPower+1
  4254  0138  0824               	movf	?_cal_rs_simulate_power,w
  4255  0139  00D3               	movwf	_rsSimPower
  4256                           
  4257                           ;main.c: 57: voExpectAdcValue=calc_expect_vout_adc_value(rsSimPower);
  4258  013A  0854               	movf	_rsSimPower+1,w
  4259  013B  00B3               	movwf	calc_expect_vout_adc_value@x+1
  4260  013C  0853               	movf	_rsSimPower,w
  4261  013D  00B2               	movwf	calc_expect_vout_adc_value@x
  4262  013E  22C9               	fcall	_calc_expect_vout_adc_value
  4263  013F  0833               	movf	?_calc_expect_vout_adc_value+1,w
  4264  0140  00E0               	movwf	_voExpectAdcValue+1
  4265  0141  0832               	movf	?_calc_expect_vout_adc_value,w
  4266  0142  00DF               	movwf	_voExpectAdcValue
  4267                           
  4268                           ;main.c: 58: pid_pwm2_vout_run();
  4269  0143  3189  214C  3180   	fcall	_pid_pwm2_vout_run
  4270                           
  4271                           ;main.c: 59: }else{
  4272  0146  296D               	goto	l4361
  4273  0147                     l4353:	
  4274                           
  4275                           ;main.c: 60: pid_pwm1_idrv_b_b();
  4276  0147  239F  3180         	fcall	_pid_pwm1_idrv_b_b
  4277                           
  4278                           ;main.c: 62: if(pidBbSm>=5){
  4279  0149  3005               	movlw	5
  4280  014A  0020               	movlb	0	; select bank0
  4281  014B  0263               	subwf	_pidBbSm,w
  4282  014C  1C03               	skipc
  4283  014D  296D               	goto	l4361
  4284                           
  4285                           ;main.c: 63: sysData.pidSetFlg0 = 0x55;
  4286  014E  3055               	movlw	85
  4287  014F  0022               	movlb	2	; select bank2
  4288  0150  00A0               	movwf	_sysData^(0+256)
  4289                           
  4290                           ;main.c: 64: sysData.pidSetFlg1 = 0xaa;
  4291  0151  30AA               	movlw	170
  4292  0152  00A1               	movwf	(_sysData^(0+256)+1)
  4293                           
  4294                           ;main.c: 65: sysData.pidKp=PidKp;
  4295  0153  0020               	movlb	0	; select bank0
  4296  0154  084E               	movf	_PidKp+1,w
  4297  0155  0022               	movlb	2	; select bank2
  4298  0156  00A5               	movwf	((_sysData+1)^(0+256)+4)
  4299  0157  0020               	movlb	0	; select bank0
  4300  0158  084D               	movf	_PidKp,w
  4301  0159  0022               	movlb	2	; select bank2
  4302  015A  00A4               	movwf	(_sysData^(0+256)+4)
  4303                           
  4304                           ;main.c: 66: sysData.pidTd=PidTd;
  4305  015B  0021               	movlb	1	; select bank1
  4306  015C  082D               	movf	(_PidTd+1)^(0+128),w
  4307  015D  0022               	movlb	2	; select bank2
  4308  015E  00A9               	movwf	((_sysData+1)^(0+256)+8)
  4309  015F  0021               	movlb	1	; select bank1
  4310  0160  082C               	movf	_PidTd^(0+128),w
  4311  0161  0022               	movlb	2	; select bank2
  4312  0162  00A8               	movwf	(_sysData^(0+256)+8)
  4313                           
  4314                           ;main.c: 67: sysData.pidTi=PidTi;
  4315  0163  0021               	movlb	1	; select bank1
  4316  0164  0831               	movf	(_PidTi+1)^(0+128),w
  4317  0165  0022               	movlb	2	; select bank2
  4318  0166  00A7               	movwf	((_sysData+1)^(0+256)+6)
  4319  0167  0021               	movlb	1	; select bank1
  4320  0168  0830               	movf	_PidTi^(0+128),w
  4321  0169  0022               	movlb	2	; select bank2
  4322  016A  00A6               	movwf	(_sysData^(0+256)+6)
  4323                           
  4324                           ;main.c: 68: sys_data_save();
  4325  016B  26FD  3180         	fcall	_sys_data_save
  4326  016D                     l4361:	
  4327                           
  4328                           ;main.c: 69: }
  4329                           ;main.c: 70: }
  4330                           ;main.c: 72: }
  4331                           ;main.c: 74: if(Event & (1<<3)){
  4332  016D  0020               	movlb	0	; select bank0
  4333  016E  19E1               	btfsc	_Event,3	;volatile
  4334                           
  4335                           ;main.c: 75: Event &= ~(1<<3);
  4336  016F  11E1               	bcf	_Event,3	;volatile
  4337                           
  4338                           ;main.c: 103: }
  4339                           ;main.c: 105: if(Event & (1<<0)){
  4340  0170  1C61               	btfss	_Event,0	;volatile
  4341  0171  298B               	goto	l4375
  4342                           
  4343                           ;main.c: 106: Event &= ~ (1<<0);
  4344  0172  1061               	bcf	_Event,0	;volatile
  4345                           
  4346                           ;main.c: 107: if(eusartRxCount>0){
  4347  0173  087C               	movf	_eusartRxCount,w	;volatile
  4348  0174  1903               	btfsc	3,2
  4349  0175  2989               	goto	l4373
  4350                           
  4351                           ;main.c: 108: m_mem_cpy_len(modbusBuf,eusartRxBuffer,eusartRxCount);
  4352  0176  3020               	movlw	low _modbusBuf
  4353  0177  00F1               	movwf	m_mem_cpy_len@d
  4354  0178  3002               	movlw	high _modbusBuf
  4355  0179  00F2               	movwf	m_mem_cpy_len@d+1
  4356  017A  30A0               	movlw	low _eusartRxBuffer
  4357  017B  00F3               	movwf	m_mem_cpy_len@s
  4358  017C  3001               	movlw	high _eusartRxBuffer
  4359  017D  00F4               	movwf	m_mem_cpy_len@s+1
  4360  017E  087C               	movf	_eusartRxCount,w	;volatile
  4361  017F  00F5               	movwf	m_mem_cpy_len@len
  4362  0180  01F6               	clrf	m_mem_cpy_len@len+1
  4363  0181  26E2               	fcall	_m_mem_cpy_len
  4364                           
  4365                           ;main.c: 109: modbus_response_process(modbusBuf,eusartRxCount);
  4366  0182  087C               	movf	_eusartRxCount,w	;volatile
  4367  0183  00B5               	movwf	modbus_response_process@rlen
  4368  0184  3020               	movlw	(low (_modbusBuf| (0+512)))& (0+255)
  4369  0185  01B6               	clrf	modbus_response_process@rlen+1
  4370  0186  318C  2450  3180   	fcall	_modbus_response_process
  4371  0189                     l4373:	
  4372                           
  4373                           ;main.c: 111: }
  4374                           ;main.c: 113: uart_received_start();
  4375  0189  27B4  3180         	fcall	_uart_received_start
  4376  018B                     l4375:	
  4377                           
  4378                           ;main.c: 114: }
  4379                           ;main.c: 116: __nop();
  4380  018B  0000               	nop
  4381  018C  28D0               	goto	l4337
  4382  018D                     __end_of_main:	
  4383  018D                     __ptext35:	
  4384 ;; *************** function _adc_sample *****************
  4385 ;; Defined at:
  4386 ;;		line 127 in file "src/api/sample.c"
  4387 ;; Parameters:    Size  Location     Type
  4388 ;;  ch              1    wreg     unsigned char 
  4389 ;;  gfvr            1    3[COMMON] unsigned char 
  4390 ;;  num             1    4[COMMON] unsigned char 
  4391 ;; Auto vars:     Size  Location     Type
  4392 ;;  ch              1    6[COMMON] unsigned char 
  4393 ;;  t16             2   10[COMMON] unsigned int 
  4394 ;;  ret             2    7[COMMON] unsigned int 
  4395 ;;  i               1    9[COMMON] unsigned char 
  4396 ;; Return value:  Size  Location     Type
  4397 ;;                  2    3[COMMON] unsigned int 
  4398 ;; Registers used:
  4399 ;;		wreg, status,2, status,0, pclath, cstack
  4400 ;; Tracked objects:
  4401 ;;		On entry : 1F/0
  4402 ;;		On exit  : 0/0
  4403 ;;		Unchanged: 0/0
  4404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4405 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4406 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4407 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4408 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4409 ;;Total ram usage:        9 bytes
  4410 ;; Hardware stack levels used:    1
  4411 ;; Hardware stack levels required when called:    2
  4412 ;; This function calls:
  4413 ;;		_adc_init
  4414 ;;		_fvr_set_gain
  4415 ;; This function is called by:
  4416 ;;		_main
  4417 ;; This function uses a non-reentrant model
  4418 ;;
  4419                           
  4420                           
  4421                           ;psect for function _adc_sample
  4422  018D                     _adc_sample:	
  4423                           
  4424                           ;incstack = 0
  4425                           ; Regs used in _adc_sample: [wreg+status,2+status,0+pclath+cstack]
  4426                           ;adc_sample@ch stored from wreg
  4427  018D  00F6               	movwf	adc_sample@ch
  4428                           
  4429                           ;sample.c: 129: uint8_t i;
  4430                           ;sample.c: 130: uint16_t ret=0;
  4431  018E  01F7               	clrf	adc_sample@ret
  4432  018F  01F8               	clrf	adc_sample@ret+1
  4433                           
  4434                           ;sample.c: 133: fvr_set_gain(gfvr);
  4435  0190  0873               	movf	adc_sample@gfvr,w
  4436  0191  225D  3180         	fcall	_fvr_set_gain
  4437                           
  4438                           ;sample.c: 134: adc_init((adc_channel_t)ch);
  4439  0193  0876               	movf	adc_sample@ch,w
  4440  0194  224E  3180         	fcall	_adc_init
  4441                           
  4442                           ;sample.c: 135: _delay((unsigned long)((10)*(16000000/4000000.0)));
  4443  0196  300D               	movlw	13
  4444  0197  00F5               	movwf	??_adc_sample
  4445  0198                     u3137:	
  4446  0198  0BF5               	decfsz	??_adc_sample,f
  4447  0199  2998               	goto	u3137
  4448                           
  4449                           ;sample.c: 136: if(num>64)num=64;
  4450  019A  3041               	movlw	65
  4451  019B  0274               	subwf	adc_sample@num,w
  4452  019C  1C03               	skipc
  4453  019D  29A0               	goto	l3401
  4454  019E  3040               	movlw	64
  4455  019F  00F4               	movwf	adc_sample@num
  4456  01A0                     l3401:	
  4457                           
  4458                           ;sample.c: 137: for(i=0;i<num;i++){
  4459  01A0  01F9               	clrf	adc_sample@i
  4460  01A1                     l3409:	
  4461  01A1  0874               	movf	adc_sample@num,w
  4462  01A2  0279               	subwf	adc_sample@i,w
  4463  01A3  1803               	btfsc	3,0
  4464  01A4  29C0               	goto	l3411
  4465                           
  4466                           ;sample.c: 138: ADCON0bits.GO_nDONE = 1;
  4467  01A5  0021               	movlb	1	; select bank1
  4468  01A6  149D               	bsf	29,1	;volatile
  4469  01A7                     l606:	
  4470                           ;sample.c: 139: while (ADCON0bits.GO_nDONE);
  4471                           
  4472  01A7  189D               	btfsc	29,1	;volatile
  4473  01A8  29A7               	goto	l606
  4474                           
  4475                           ;sample.c: 140: __nop();
  4476  01A9  0000               	nop
  4477                           
  4478                           ;sample.c: 141: t16=ADRESH;
  4479  01AA  0021               	movlb	1	; select bank1
  4480  01AB  081C               	movf	28,w	;volatile
  4481  01AC  00FA               	movwf	adc_sample@t16
  4482  01AD  01FB               	clrf	adc_sample@t16+1
  4483                           
  4484                           ;sample.c: 142: t16<<=2;
  4485  01AE  35FA               	lslf	adc_sample@t16,f
  4486  01AF  0DFB               	rlf	adc_sample@t16+1,f
  4487  01B0  35FA               	lslf	adc_sample@t16,f
  4488  01B1  0DFB               	rlf	adc_sample@t16+1,f
  4489                           
  4490                           ;sample.c: 143: t16|=(ADRESL>>6);
  4491  01B2  081B               	movf	27,w	;volatile
  4492  01B3  00F5               	movwf	??_adc_sample
  4493  01B4  3006               	movlw	6
  4494  01B5                     u1955:	
  4495  01B5  36F5               	lsrf	??_adc_sample,f
  4496  01B6  0B89               	decfsz	9,f
  4497  01B7  29B5               	goto	u1955
  4498  01B8  0875               	movf	??_adc_sample,w
  4499  01B9  04FA               	iorwf	adc_sample@t16,f
  4500                           
  4501                           ;sample.c: 145: ret+=t16;
  4502  01BA  087A               	movf	adc_sample@t16,w
  4503  01BB  07F7               	addwf	adc_sample@ret,f
  4504  01BC  087B               	movf	adc_sample@t16+1,w
  4505  01BD  3DF8               	addwfc	adc_sample@ret+1,f
  4506  01BE  0AF9               	incf	adc_sample@i,f
  4507  01BF  29A1               	goto	l3409
  4508  01C0                     l3411:	
  4509                           
  4510                           ;sample.c: 150: return ret;
  4511  01C0  0878               	movf	adc_sample@ret+1,w
  4512  01C1  00F4               	movwf	?_adc_sample+1
  4513  01C2  0877               	movf	adc_sample@ret,w
  4514  01C3  00F3               	movwf	?_adc_sample
  4515  01C4  0008               	return
  4516  01C5                     __end_of_adc_sample:	
  4517  01C5                     __ptext38:	
  4518 ;; *************** function _SYSTEM_Initialize *****************
  4519 ;; Defined at:
  4520 ;;		line 68 in file "mcc_generated_files/mcc.c"
  4521 ;; Parameters:    Size  Location     Type
  4522 ;;		None
  4523 ;; Auto vars:     Size  Location     Type
  4524 ;;		None
  4525 ;; Return value:  Size  Location     Type
  4526 ;;                  1    wreg      void 
  4527 ;; Registers used:
  4528 ;;		wreg, status,2, status,0, pclath, cstack
  4529 ;; Tracked objects:
  4530 ;;		On entry : 0/0
  4531 ;;		On exit  : 1F/1
  4532 ;;		Unchanged: 0/0
  4533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4537 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4538 ;;Total ram usage:        0 bytes
  4539 ;; Hardware stack levels used:    1
  4540 ;; Hardware stack levels required when called:    3
  4541 ;; This function calls:
  4542 ;;		_ADC1_Initialize
  4543 ;;		_EUSART_Initialize
  4544 ;;		_FVR_Initialize
  4545 ;;		_OSCILLATOR_Initialize
  4546 ;;		_PIN_MANAGER_Initialize
  4547 ;;		_PWM1_Initialize
  4548 ;;		_PWM2_Initialize
  4549 ;;		_TMR2_Initialize
  4550 ;;		_WDT_Initialize
  4551 ;; This function is called by:
  4552 ;;		_main
  4553 ;; This function uses a non-reentrant model
  4554 ;;
  4555                           
  4556                           
  4557                           ;psect for function _SYSTEM_Initialize
  4558  01C5                     _SYSTEM_Initialize:	
  4559                           
  4560                           ;mcc.c: 71: PIN_MANAGER_Initialize();
  4561                           
  4562                           ;incstack = 0
  4563                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4564  01C5  21E3  3180         	fcall	_PIN_MANAGER_Initialize
  4565                           
  4566                           ;mcc.c: 72: OSCILLATOR_Initialize();
  4567  01C7  21DE  3180         	fcall	_OSCILLATOR_Initialize
  4568                           
  4569                           ;mcc.c: 73: WDT_Initialize();
  4570  01C9  224B  3180         	fcall	_WDT_Initialize
  4571                           
  4572                           ;mcc.c: 74: FVR_Initialize();
  4573  01CB  21DA  3180         	fcall	_FVR_Initialize
  4574                           
  4575                           ;mcc.c: 75: PWM1_Initialize();
  4576  01CD  221C  3180         	fcall	_PWM1_Initialize
  4577                           
  4578                           ;mcc.c: 76: PWM2_Initialize();
  4579  01CF  2234  3180         	fcall	_PWM2_Initialize
  4580                           
  4581                           ;mcc.c: 77: ADC1_Initialize();
  4582  01D1  21D6               	fcall	_ADC1_Initialize
  4583                           
  4584                           ;mcc.c: 78: TMR2_Initialize();
  4585  01D2  3188  20C5  3180   	fcall	_TMR2_Initialize
  4586                           
  4587                           ;mcc.c: 79: EUSART_Initialize();
  4588  01D5  2FC2               	ljmp	l3003
  4589  01D6                     __end_of_SYSTEM_Initialize:	
  4590  01D6                     __ptext49:	
  4591 ;; *************** function _ADC1_Initialize *****************
  4592 ;; Defined at:
  4593 ;;		line 64 in file "mcc_generated_files/adc1.c"
  4594 ;; Parameters:    Size  Location     Type
  4595 ;;		None
  4596 ;; Auto vars:     Size  Location     Type
  4597 ;;		None
  4598 ;; Return value:  Size  Location     Type
  4599 ;;                  1    wreg      void 
  4600 ;; Registers used:
  4601 ;;		wreg, status,2
  4602 ;; Tracked objects:
  4603 ;;		On entry : 1F/1B
  4604 ;;		On exit  : 1F/1
  4605 ;;		Unchanged: 0/0
  4606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4610 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4611 ;;Total ram usage:        0 bytes
  4612 ;; Hardware stack levels used:    1
  4613 ;; Hardware stack levels required when called:    1
  4614 ;; This function calls:
  4615 ;;		Nothing
  4616 ;; This function is called by:
  4617 ;;		_SYSTEM_Initialize
  4618 ;; This function uses a non-reentrant model
  4619 ;;
  4620                           
  4621                           
  4622                           ;psect for function _ADC1_Initialize
  4623  01D6                     _ADC1_Initialize:	
  4624                           
  4625                           ;adc1.c: 69: ADCON0 = 0x01;
  4626                           
  4627                           ;incstack = 0
  4628                           ; Regs used in _ADC1_Initialize: [wreg+status,2]
  4629  01D6  3001               	movlw	1
  4630  01D7  0021               	movlb	1	; select bank1
  4631  01D8  009D               	movwf	29	;volatile
  4632                           
  4633                           ;adc1.c: 72: ADCON1 = 0x63;
  4634                           
  4635                           ;adc1.c: 75: ADCON2 = 0x00;
  4636                           
  4637                           ;adc1.c: 78: ADRESL = 0x00;
  4638                           
  4639                           ;adc1.c: 81: ADRESH = 0x00;
  4640  01D9  2F83               	ljmp	PL28	;call to abstracted procedure
  4641  01DA                     __end_of_ADC1_Initialize:	
  4642  01DA                     __ptext47:	
  4643 ;; *************** function _FVR_Initialize *****************
  4644 ;; Defined at:
  4645 ;;		line 57 in file "mcc_generated_files/fvr.c"
  4646 ;; Parameters:    Size  Location     Type
  4647 ;;		None
  4648 ;; Auto vars:     Size  Location     Type
  4649 ;;		None
  4650 ;; Return value:  Size  Location     Type
  4651 ;;                  1    wreg      void 
  4652 ;; Registers used:
  4653 ;;		wreg
  4654 ;; Tracked objects:
  4655 ;;		On entry : 1F/1
  4656 ;;		On exit  : 1F/2
  4657 ;;		Unchanged: 0/0
  4658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4662 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4663 ;;Total ram usage:        0 bytes
  4664 ;; Hardware stack levels used:    1
  4665 ;; Hardware stack levels required when called:    1
  4666 ;; This function calls:
  4667 ;;		Nothing
  4668 ;; This function is called by:
  4669 ;;		_SYSTEM_Initialize
  4670 ;; This function uses a non-reentrant model
  4671 ;;
  4672                           
  4673                           
  4674                           ;psect for function _FVR_Initialize
  4675  01DA                     _FVR_Initialize:	
  4676                           
  4677                           ;fvr.c: 60: FVRCON = 0x81;
  4678                           
  4679                           ;incstack = 0
  4680                           ; Regs used in _FVR_Initialize: [wreg]
  4681  01DA  3081               	movlw	129
  4682  01DB  0022               	movlb	2	; select bank2
  4683  01DC  0097               	movwf	23	;volatile
  4684  01DD  0008               	return
  4685  01DE                     __end_of_FVR_Initialize:	
  4686  01DE                     __ptext46:	
  4687 ;; *************** function _OSCILLATOR_Initialize *****************
  4688 ;; Defined at:
  4689 ;;		line 82 in file "mcc_generated_files/mcc.c"
  4690 ;; Parameters:    Size  Location     Type
  4691 ;;		None
  4692 ;; Auto vars:     Size  Location     Type
  4693 ;;		None
  4694 ;; Return value:  Size  Location     Type
  4695 ;;                  1    wreg      void 
  4696 ;; Registers used:
  4697 ;;		wreg, status,2
  4698 ;; Tracked objects:
  4699 ;;		On entry : 0/0
  4700 ;;		On exit  : 1F/1
  4701 ;;		Unchanged: 0/0
  4702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4706 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4707 ;;Total ram usage:        0 bytes
  4708 ;; Hardware stack levels used:    1
  4709 ;; Hardware stack levels required when called:    1
  4710 ;; This function calls:
  4711 ;;		Nothing
  4712 ;; This function is called by:
  4713 ;;		_SYSTEM_Initialize
  4714 ;; This function uses a non-reentrant model
  4715 ;;
  4716                           
  4717                           
  4718                           ;psect for function _OSCILLATOR_Initialize
  4719  01DE                     _OSCILLATOR_Initialize:	
  4720                           
  4721                           ;mcc.c: 85: OSCCON = 0x78;
  4722                           
  4723                           ;incstack = 0
  4724                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4725  01DE  3078               	movlw	120
  4726  01DF  0021               	movlb	1	; select bank1
  4727  01E0  0099               	movwf	25	;volatile
  4728                           
  4729                           ;mcc.c: 87: OSCTUNE = 0x00;
  4730  01E1  0198               	clrf	24	;volatile
  4731  01E2  0008               	return
  4732  01E3                     __end_of_OSCILLATOR_Initialize:	
  4733  01E3                     __ptext45:	
  4734 ;; *************** function _PIN_MANAGER_Initialize *****************
  4735 ;; Defined at:
  4736 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  4737 ;; Parameters:    Size  Location     Type
  4738 ;;		None
  4739 ;; Auto vars:     Size  Location     Type
  4740 ;;  state           1    1[COMMON] unsigned char 
  4741 ;; Return value:  Size  Location     Type
  4742 ;;                  1    wreg      void 
  4743 ;; Registers used:
  4744 ;;		wreg, status,2, status,0
  4745 ;; Tracked objects:
  4746 ;;		On entry : 0/0
  4747 ;;		On exit  : 0/0
  4748 ;;		Unchanged: 0/0
  4749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4751 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4753 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4754 ;;Total ram usage:        1 bytes
  4755 ;; Hardware stack levels used:    1
  4756 ;; Hardware stack levels required when called:    1
  4757 ;; This function calls:
  4758 ;;		Nothing
  4759 ;; This function is called by:
  4760 ;;		_SYSTEM_Initialize
  4761 ;; This function uses a non-reentrant model
  4762 ;;
  4763                           
  4764                           
  4765                           ;psect for function _PIN_MANAGER_Initialize
  4766  01E3                     _PIN_MANAGER_Initialize:	
  4767                           
  4768                           ;pin_manager.c: 57: LATA = 0x00;
  4769                           
  4770                           ;incstack = 0
  4771                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
  4772  01E3  0022               	movlb	2	; select bank2
  4773  01E4  018C               	clrf	12	;volatile
  4774                           
  4775                           ;pin_manager.c: 58: LATC = 0x00;
  4776  01E5  018E               	clrf	14	;volatile
  4777                           
  4778                           ;pin_manager.c: 63: TRISA = 0x0F;
  4779  01E6  300F               	movlw	15
  4780  01E7  0021               	movlb	1	; select bank1
  4781  01E8  008C               	movwf	12	;volatile
  4782                           
  4783                           ;pin_manager.c: 64: TRISC = 0x1f;
  4784  01E9  301F               	movlw	31
  4785  01EA  008E               	movwf	14	;volatile
  4786                           
  4787                           ;pin_manager.c: 69: ANSELC = 0x0F;
  4788  01EB  300F               	movlw	15
  4789  01EC  0023               	movlb	3	; select bank3
  4790  01ED  008E               	movwf	14	;volatile
  4791                           
  4792                           ;pin_manager.c: 70: ANSELA = 0x17;
  4793  01EE  3017               	movlw	23
  4794  01EF  008C               	movwf	12	;volatile
  4795                           
  4796                           ;pin_manager.c: 75: WPUA = 0x3B;
  4797  01F0  303B               	movlw	59
  4798  01F1  0024               	movlb	4	; select bank4
  4799  01F2  008C               	movwf	12	;volatile
  4800                           
  4801                           ;pin_manager.c: 76: WPUC = 0x30;
  4802  01F3  3030               	movlw	48
  4803  01F4  008E               	movwf	14	;volatile
  4804                           
  4805                           ;pin_manager.c: 77: OPTION_REGbits.nWPUEN = 0;
  4806  01F5  0021               	movlb	1	; select bank1
  4807  01F6  1395               	bcf	21,7	;volatile
  4808                           
  4809                           ;pin_manager.c: 82: ODCONA = 0x00;
  4810  01F7  0025               	movlb	5	; select bank5
  4811  01F8  018C               	clrf	12	;volatile
  4812                           
  4813                           ;pin_manager.c: 83: ODCONC = 0x00;
  4814  01F9  018E               	clrf	14	;volatile
  4815                           
  4816                           ;pin_manager.c: 90: bool state = (unsigned char)GIE;
  4817  01FA  3000               	movlw	0
  4818  01FB  1B8B               	btfsc	11,7	;volatile
  4819  01FC  3001               	movlw	1
  4820  01FD  00F1               	movwf	PIN_MANAGER_Initialize@state
  4821                           
  4822                           ;pin_manager.c: 91: GIE = 0;
  4823  01FE  138B               	bcf	11,7	;volatile
  4824                           
  4825                           ;pin_manager.c: 92: PPSLOCK = 0x55;
  4826                           
  4827                           ;pin_manager.c: 93: PPSLOCK = 0xAA;
  4828  01FF  2790  3180         	fcall	PL34	;call to abstracted procedure
  4829                           
  4830                           ;pin_manager.c: 94: PPSLOCKbits.PPSLOCKED = 0x00;
  4831  0201  100F               	bcf	15,0	;volatile
  4832                           
  4833                           ;pin_manager.c: 96: RXPPSbits.RXPPS = 0x14;
  4834  0202  0815               	movf	21,w	;volatile
  4835  0203  39E0               	andlw	-32
  4836  0204  3814               	iorlw	20
  4837  0205  0095               	movwf	21	;volatile
  4838                           
  4839                           ;pin_manager.c: 97: RA4PPSbits.RA4PPS = 0x04;
  4840  0206  003D               	movlb	29	; select bank29
  4841  0207  0814               	movf	20,w	;volatile
  4842  0208  39F0               	andlw	-16
  4843  0209  3804               	iorlw	4
  4844  020A  0094               	movwf	20	;volatile
  4845                           
  4846                           ;pin_manager.c: 98: RA5PPSbits.RA5PPS = 0x03;
  4847  020B  0815               	movf	21,w	;volatile
  4848  020C  39F0               	andlw	-16
  4849  020D  3803               	iorlw	3
  4850  020E  0095               	movwf	21	;volatile
  4851                           
  4852                           ;pin_manager.c: 99: RC5PPSbits.RC5PPS = 0x09;
  4853  020F  0825               	movf	37,w	;volatile
  4854  0210  39F0               	andlw	-16
  4855  0211  3809               	iorlw	9
  4856  0212  00A5               	movwf	37	;volatile
  4857                           
  4858                           ;pin_manager.c: 101: PPSLOCK = 0x55;
  4859                           
  4860                           ;pin_manager.c: 102: PPSLOCK = 0xAA;
  4861  0213  2790  3180         	fcall	PL34	;call to abstracted procedure
  4862                           
  4863                           ;pin_manager.c: 103: PPSLOCKbits.PPSLOCKED = 0x01;
  4864  0215  140F               	bsf	15,0	;volatile
  4865                           
  4866                           ;pin_manager.c: 105: GIE = state;
  4867  0216  1C71               	btfss	PIN_MANAGER_Initialize@state,0
  4868  0217  2A1A               	goto	u1440
  4869  0218  178B               	bsf	11,7	;volatile
  4870  0219  0008               	return
  4871  021A                     u1440:	
  4872  021A  138B               	bcf	11,7	;volatile
  4873  021B  0008               	return
  4874  021C                     __end_of_PIN_MANAGER_Initialize:	
  4875  021C                     __ptext44:	
  4876 ;; *************** function _PWM1_Initialize *****************
  4877 ;; Defined at:
  4878 ;;		line 58 in file "mcc_generated_files/pwm1.c"
  4879 ;; Parameters:    Size  Location     Type
  4880 ;;		None
  4881 ;; Auto vars:     Size  Location     Type
  4882 ;;		None
  4883 ;; Return value:  Size  Location     Type
  4884 ;;                  1    wreg      void 
  4885 ;; Registers used:
  4886 ;;		wreg, status,2
  4887 ;; Tracked objects:
  4888 ;;		On entry : 1F/2
  4889 ;;		On exit  : 1F/1B
  4890 ;;		Unchanged: 0/0
  4891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4895 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4896 ;;Total ram usage:        0 bytes
  4897 ;; Hardware stack levels used:    1
  4898 ;; Hardware stack levels required when called:    1
  4899 ;; This function calls:
  4900 ;;		Nothing
  4901 ;; This function is called by:
  4902 ;;		_SYSTEM_Initialize
  4903 ;; This function uses a non-reentrant model
  4904 ;;
  4905                           
  4906                           
  4907                           ;psect for function _PWM1_Initialize
  4908  021C                     _PWM1_Initialize:	
  4909                           
  4910                           ;pwm1.c: 63: PWM1INTE = 0x00;
  4911                           
  4912                           ;incstack = 0
  4913                           ; Regs used in _PWM1_Initialize: [wreg+status,2]
  4914  021C  003B               	movlb	27	; select bank27
  4915  021D  019C               	clrf	28	;volatile
  4916                           
  4917                           ;pwm1.c: 66: PWM1INTF = 0x00;
  4918  021E  019D               	clrf	29	;volatile
  4919                           
  4920                           ;pwm1.c: 69: PWM1CLKCON = 0x00;
  4921  021F  019E               	clrf	30	;volatile
  4922                           
  4923                           ;pwm1.c: 72: PWM1LDCON = 0x80;
  4924  0220  3080               	movlw	128
  4925  0221  009F               	movwf	31	;volatile
  4926                           
  4927                           ;pwm1.c: 75: PWM1OFCON = 0x00;
  4928  0222  01A0               	clrf	32	;volatile
  4929                           
  4930                           ;pwm1.c: 78: PWM1PHH = 0x00;
  4931  0223  0192               	clrf	18	;volatile
  4932                           
  4933                           ;pwm1.c: 81: PWM1PHL = 0x00;
  4934  0224  0191               	clrf	17	;volatile
  4935                           
  4936                           ;pwm1.c: 84: PWM1DCH = 0x00;
  4937  0225  0194               	clrf	20	;volatile
  4938                           
  4939                           ;pwm1.c: 87: PWM1DCL = 0xa0;
  4940  0226  30A0               	movlw	160
  4941  0227  0093               	movwf	19	;volatile
  4942                           
  4943                           ;pwm1.c: 90: PWM1PRH = 0x06;
  4944  0228  3006               	movlw	6
  4945  0229  0096               	movwf	22	;volatile
  4946                           
  4947                           ;pwm1.c: 93: PWM1PRL = 0x3F;
  4948  022A  303F               	movlw	63
  4949  022B  0095               	movwf	21	;volatile
  4950                           
  4951                           ;pwm1.c: 96: PWM1OFH = 0x00;
  4952  022C  0198               	clrf	24	;volatile
  4953                           
  4954                           ;pwm1.c: 99: PWM1OFL = 0x01;
  4955  022D  3001               	movlw	1
  4956  022E  0097               	movwf	23	;volatile
  4957                           
  4958                           ;pwm1.c: 102: PWM1TMRH = 0x00;
  4959  022F  019A               	clrf	26	;volatile
  4960                           
  4961                           ;pwm1.c: 105: PWM1TMRL = 0x00;
  4962  0230  0199               	clrf	25	;volatile
  4963                           
  4964                           ;pwm1.c: 108: PWM1CON = 0x90;
  4965  0231  3090               	movlw	144
  4966  0232  009B               	movwf	27	;volatile
  4967  0233  0008               	return
  4968  0234                     __end_of_PWM1_Initialize:	
  4969  0234                     __ptext43:	
  4970 ;; *************** function _PWM2_Initialize *****************
  4971 ;; Defined at:
  4972 ;;		line 58 in file "mcc_generated_files/pwm2.c"
  4973 ;; Parameters:    Size  Location     Type
  4974 ;;		None
  4975 ;; Auto vars:     Size  Location     Type
  4976 ;;		None
  4977 ;; Return value:  Size  Location     Type
  4978 ;;                  1    wreg      void 
  4979 ;; Registers used:
  4980 ;;		wreg, status,2
  4981 ;; Tracked objects:
  4982 ;;		On entry : 1F/1B
  4983 ;;		On exit  : 1F/1B
  4984 ;;		Unchanged: 0/0
  4985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4989 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4990 ;;Total ram usage:        0 bytes
  4991 ;; Hardware stack levels used:    1
  4992 ;; Hardware stack levels required when called:    1
  4993 ;; This function calls:
  4994 ;;		Nothing
  4995 ;; This function is called by:
  4996 ;;		_SYSTEM_Initialize
  4997 ;; This function uses a non-reentrant model
  4998 ;;
  4999                           
  5000                           
  5001                           ;psect for function _PWM2_Initialize
  5002  0234                     _PWM2_Initialize:	
  5003                           
  5004                           ;pwm2.c: 63: PWM2INTE = 0x00;
  5005                           
  5006                           ;incstack = 0
  5007                           ; Regs used in _PWM2_Initialize: [wreg+status,2]
  5008  0234  01AC               	clrf	44	;volatile
  5009                           
  5010                           ;pwm2.c: 66: PWM2INTF = 0x00;
  5011  0235  01AD               	clrf	45	;volatile
  5012                           
  5013                           ;pwm2.c: 69: PWM2CLKCON = 0x00;
  5014  0236  01AE               	clrf	46	;volatile
  5015                           
  5016                           ;pwm2.c: 72: PWM2LDCON = 0x80;
  5017  0237  3080               	movlw	128
  5018  0238  00AF               	movwf	47	;volatile
  5019                           
  5020                           ;pwm2.c: 75: PWM2OFCON = 0x00;
  5021  0239  01B0               	clrf	48	;volatile
  5022                           
  5023                           ;pwm2.c: 78: PWM2PHH = 0x00;
  5024  023A  01A2               	clrf	34	;volatile
  5025                           
  5026                           ;pwm2.c: 81: PWM2PHL = 0x00;
  5027  023B  01A1               	clrf	33	;volatile
  5028                           
  5029                           ;pwm2.c: 84: PWM2DCH = 0x00;
  5030  023C  01A4               	clrf	36	;volatile
  5031                           
  5032                           ;pwm2.c: 87: PWM2DCL = 0xA0;
  5033  023D  30A0               	movlw	160
  5034  023E  00A3               	movwf	35	;volatile
  5035                           
  5036                           ;pwm2.c: 90: PWM2PRH = 0x06;
  5037  023F  3006               	movlw	6
  5038  0240  00A6               	movwf	38	;volatile
  5039                           
  5040                           ;pwm2.c: 93: PWM2PRL = 0x3F;
  5041  0241  303F               	movlw	63
  5042  0242  00A5               	movwf	37	;volatile
  5043                           
  5044                           ;pwm2.c: 96: PWM2OFH = 0x00;
  5045  0243  01A8               	clrf	40	;volatile
  5046                           
  5047                           ;pwm2.c: 99: PWM2OFL = 0x01;
  5048  0244  3001               	movlw	1
  5049  0245  00A7               	movwf	39	;volatile
  5050                           
  5051                           ;pwm2.c: 102: PWM2TMRH = 0x00;
  5052  0246  01AA               	clrf	42	;volatile
  5053                           
  5054                           ;pwm2.c: 105: PWM2TMRL = 0x00;
  5055  0247  01A9               	clrf	41	;volatile
  5056                           
  5057                           ;pwm2.c: 108: PWM2CON = 0x90;
  5058  0248  3090               	movlw	144
  5059  0249  00AB               	movwf	43	;volatile
  5060  024A  0008               	return
  5061  024B                     __end_of_PWM2_Initialize:	
  5062  024B                     __ptext39:	
  5063 ;; *************** function _WDT_Initialize *****************
  5064 ;; Defined at:
  5065 ;;		line 90 in file "mcc_generated_files/mcc.c"
  5066 ;; Parameters:    Size  Location     Type
  5067 ;;		None
  5068 ;; Auto vars:     Size  Location     Type
  5069 ;;		None
  5070 ;; Return value:  Size  Location     Type
  5071 ;;                  1    wreg      void 
  5072 ;; Registers used:
  5073 ;;		wreg
  5074 ;; Tracked objects:
  5075 ;;		On entry : 1F/1
  5076 ;;		On exit  : 1F/1
  5077 ;;		Unchanged: 0/0
  5078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5082 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5083 ;;Total ram usage:        0 bytes
  5084 ;; Hardware stack levels used:    1
  5085 ;; Hardware stack levels required when called:    1
  5086 ;; This function calls:
  5087 ;;		Nothing
  5088 ;; This function is called by:
  5089 ;;		_SYSTEM_Initialize
  5090 ;; This function uses a non-reentrant model
  5091 ;;
  5092                           
  5093                           
  5094                           ;psect for function _WDT_Initialize
  5095  024B                     _WDT_Initialize:	
  5096                           
  5097                           ;mcc.c: 93: WDTCON = 0x16;
  5098                           
  5099                           ;incstack = 0
  5100                           ; Regs used in _WDT_Initialize: [wreg]
  5101  024B  3016               	movlw	22
  5102  024C  0097               	movwf	23	;volatile
  5103  024D  0008               	return
  5104  024E                     __end_of_WDT_Initialize:	
  5105  024E                     __ptext37:	
  5106 ;; *************** function _adc_init *****************
  5107 ;; Defined at:
  5108 ;;		line 83 in file "src/api/sample.c"
  5109 ;; Parameters:    Size  Location     Type
  5110 ;;  ch              1    wreg     enum E4974
  5111 ;; Auto vars:     Size  Location     Type
  5112 ;;  ch              1    2[COMMON] enum E4974
  5113 ;; Return value:  Size  Location     Type
  5114 ;;                  1    wreg      void 
  5115 ;; Registers used:
  5116 ;;		wreg, status,2, status,0
  5117 ;; Tracked objects:
  5118 ;;		On entry : 1F/2
  5119 ;;		On exit  : 1F/1
  5120 ;;		Unchanged: 0/0
  5121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5123 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5124 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5125 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5126 ;;Total ram usage:        2 bytes
  5127 ;; Hardware stack levels used:    1
  5128 ;; Hardware stack levels required when called:    1
  5129 ;; This function calls:
  5130 ;;		Nothing
  5131 ;; This function is called by:
  5132 ;;		_adc_sample
  5133 ;; This function uses a non-reentrant model
  5134 ;;
  5135                           
  5136                           
  5137                           ;psect for function _adc_init
  5138  024E                     _adc_init:	
  5139                           
  5140                           ;incstack = 0
  5141                           ; Regs used in _adc_init: [wreg+status,2+status,0]
  5142                           ;adc_init@ch stored from wreg
  5143  024E  00F2               	movwf	adc_init@ch
  5144  024F                     l587:	
  5145                           ;sample.c: 85: while (ADCON0bits.GO_nDONE);
  5146                           
  5147  024F  0021               	movlb	1	; select bank1
  5148  0250  189D               	btfsc	29,1	;volatile
  5149  0251  2A4F               	goto	l587
  5150                           
  5151                           ;sample.c: 86: ADCON0bits.CHS = ch;
  5152  0252  0872               	movf	adc_init@ch,w
  5153  0253  00F1               	movwf	??_adc_init
  5154  0254  0DF1               	rlf	??_adc_init,f
  5155  0255  0DF1               	rlf	??_adc_init,f
  5156  0256  081D               	movf	29,w	;volatile
  5157  0257  0671               	xorwf	??_adc_init,w
  5158  0258  3983               	andlw	-125
  5159  0259  0671               	xorwf	??_adc_init,w
  5160  025A  009D               	movwf	29	;volatile
  5161                           
  5162                           ;sample.c: 87: ADCON0bits.ADON = 1;
  5163  025B  141D               	bsf	29,0	;volatile
  5164                           
  5165                           ;sample.c: 88: ADCON1 = 0x63;
  5166                           
  5167                           ;sample.c: 89: ADCON2 = 0x00;
  5168                           
  5169                           ;sample.c: 90: ADRESL = 0x00;
  5170                           
  5171                           ;sample.c: 91: ADRESH = 0x00;
  5172  025C  2F83               	ljmp	PL28	;call to abstracted procedure
  5173  025D                     __end_of_adc_init:	
  5174  025D                     __ptext36:	
  5175 ;; *************** function _fvr_set_gain *****************
  5176 ;; Defined at:
  5177 ;;		line 74 in file "src/api/sample.c"
  5178 ;; Parameters:    Size  Location     Type
  5179 ;;  g               1    wreg     unsigned char 
  5180 ;; Auto vars:     Size  Location     Type
  5181 ;;  g               1    2[COMMON] unsigned char 
  5182 ;;  t8              1    1[COMMON] unsigned char 
  5183 ;; Return value:  Size  Location     Type
  5184 ;;                  1    wreg      void 
  5185 ;; Registers used:
  5186 ;;		wreg, status,2, status,0
  5187 ;; Tracked objects:
  5188 ;;		On entry : 1F/0
  5189 ;;		On exit  : 1F/2
  5190 ;;		Unchanged: 0/0
  5191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5193 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5195 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5196 ;;Total ram usage:        2 bytes
  5197 ;; Hardware stack levels used:    1
  5198 ;; Hardware stack levels required when called:    1
  5199 ;; This function calls:
  5200 ;;		Nothing
  5201 ;; This function is called by:
  5202 ;;		_adc_sample
  5203 ;; This function uses a non-reentrant model
  5204 ;;
  5205                           
  5206                           
  5207                           ;psect for function _fvr_set_gain
  5208  025D                     _fvr_set_gain:	
  5209                           
  5210                           ;incstack = 0
  5211                           ; Regs used in _fvr_set_gain: [wreg+status,2+status,0]
  5212                           ;fvr_set_gain@g stored from wreg
  5213  025D  00F2               	movwf	fvr_set_gain@g
  5214                           
  5215                           ;sample.c: 76: uint8_t t8=0x80;
  5216  025E  3080               	movlw	128
  5217  025F  00F1               	movwf	fvr_set_gain@t8
  5218                           
  5219                           ;sample.c: 77: if(g>3)g=3;
  5220  0260  3004               	movlw	4
  5221  0261  0272               	subwf	fvr_set_gain@g,w
  5222  0262  1C03               	skipc
  5223  0263  2A66               	goto	l3031
  5224  0264  3003               	movlw	3
  5225  0265  00F2               	movwf	fvr_set_gain@g
  5226  0266                     l3031:	
  5227                           
  5228                           ;sample.c: 78: t8|=g;
  5229  0266  0872               	movf	fvr_set_gain@g,w
  5230  0267  04F1               	iorwf	fvr_set_gain@t8,f
  5231                           
  5232                           ;sample.c: 79: FVRCON = t8;
  5233  0268  0871               	movf	fvr_set_gain@t8,w
  5234  0269  0022               	movlb	2	; select bank2
  5235  026A  0097               	movwf	23	;volatile
  5236  026B                     l581:	
  5237                           ;sample.c: 80: while(!(FVRCONbits.FVRRDY));
  5238                           
  5239  026B  1B17               	btfsc	23,6	;volatile
  5240  026C  0008               	return
  5241  026D  2A6B               	goto	l581
  5242  026E                     __end_of_fvr_set_gain:	
  5243  026E                     __ptext33:	
  5244 ;; *************** function _cal_rs_simulate_power *****************
  5245 ;; Defined at:
  5246 ;;		line 413 in file "src/api/sample.c"
  5247 ;; Parameters:    Size  Location     Type
  5248 ;;		None
  5249 ;; Auto vars:     Size  Location     Type
  5250 ;;  t32             4    6[BANK0 ] unsigned long 
  5251 ;;  t16             2   10[BANK0 ] unsigned int 
  5252 ;; Return value:  Size  Location     Type
  5253 ;;                  2    4[BANK0 ] unsigned int 
  5254 ;; Registers used:
  5255 ;;		wreg, status,2, status,0, pclath, cstack
  5256 ;; Tracked objects:
  5257 ;;		On entry : 1F/1B
  5258 ;;		On exit  : 1F/0
  5259 ;;		Unchanged: 0/0
  5260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5261 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5262 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5264 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5265 ;;Total ram usage:        8 bytes
  5266 ;; Hardware stack levels used:    1
  5267 ;; Hardware stack levels required when called:    2
  5268 ;; This function calls:
  5269 ;;		___lmul
  5270 ;; This function is called by:
  5271 ;;		_main
  5272 ;; This function uses a non-reentrant model
  5273 ;;
  5274                           
  5275                           
  5276                           ;psect for function _cal_rs_simulate_power
  5277  026E                     _cal_rs_simulate_power:	
  5278                           
  5279                           ;sample.c: 415: uint32_t t32;
  5280                           ;sample.c: 417: uint16_t t16=rtAdcValueRsLo;
  5281                           
  5282                           ;incstack = 0
  5283                           ; Regs used in _cal_rs_simulate_power: [wreg+status,2+status,0+pclath+cstack]
  5284  026E  0020               	movlb	0	; select bank0
  5285  026F  085C               	movf	_rtAdcValueRsLo+1,w
  5286  0270  00AB               	movwf	cal_rs_simulate_power@t16+1
  5287  0271  085B               	movf	_rtAdcValueRsLo,w
  5288  0272  00AA               	movwf	cal_rs_simulate_power@t16
  5289                           
  5290                           ;sample.c: 418: if(t16>24000)t16=24000;
  5291  0273  305D               	movlw	93
  5292  0274  022B               	subwf	cal_rs_simulate_power@t16+1,w
  5293  0275  30C1               	movlw	193
  5294  0276  1903               	skipnz
  5295  0277  022A               	subwf	cal_rs_simulate_power@t16,w
  5296  0278  1C03               	skipc
  5297  0279  2A7E               	goto	l698
  5298  027A  30C0               	movlw	192
  5299  027B  00AA               	movwf	cal_rs_simulate_power@t16
  5300  027C  305D               	movlw	93
  5301  027D  00AB               	movwf	cal_rs_simulate_power@t16+1
  5302  027E                     l698:	
  5303                           
  5304                           ;sample.c: 419: if(t16<6400)t16=6400;
  5305  027E  3019               	movlw	25
  5306  027F  022B               	subwf	cal_rs_simulate_power@t16+1,w
  5307  0280  3000               	movlw	0
  5308  0281  1903               	skipnz
  5309  0282  022A               	subwf	cal_rs_simulate_power@t16,w
  5310  0283  1803               	skipnc
  5311  0284  2A88               	goto	l699
  5312  0285  3019               	movlw	25
  5313  0286  01AA               	clrf	cal_rs_simulate_power@t16
  5314  0287  00AB               	movwf	cal_rs_simulate_power@t16+1
  5315  0288                     l699:	
  5316                           
  5317                           ;sample.c: 420: t32=t16;
  5318  0288  082A               	movf	cal_rs_simulate_power@t16,w
  5319  0289  00A6               	movwf	cal_rs_simulate_power@t32
  5320  028A  082B               	movf	cal_rs_simulate_power@t16+1,w
  5321  028B  00A7               	movwf	cal_rs_simulate_power@t32+1
  5322  028C  01A8               	clrf	cal_rs_simulate_power@t32+2
  5323  028D  01A9               	clrf	cal_rs_simulate_power@t32+3
  5324                           
  5325                           ;sample.c: 421: t32=t32*t16;
  5326  028E  082A               	movf	cal_rs_simulate_power@t16,w
  5327  028F  00F1               	movwf	___lmul@multiplier
  5328  0290  082B               	movf	cal_rs_simulate_power@t16+1,w
  5329  0291  00F2               	movwf	___lmul@multiplier+1
  5330  0292  01F3               	clrf	___lmul@multiplier+2
  5331  0293  01F4               	clrf	___lmul@multiplier+3
  5332  0294  0829               	movf	cal_rs_simulate_power@t32+3,w
  5333  0295  00F8               	movwf	___lmul@multiplicand+3
  5334  0296  0828               	movf	cal_rs_simulate_power@t32+2,w
  5335  0297  00F7               	movwf	___lmul@multiplicand+2
  5336  0298  0827               	movf	cal_rs_simulate_power@t32+1,w
  5337  0299  00F6               	movwf	___lmul@multiplicand+1
  5338  029A  0826               	movf	cal_rs_simulate_power@t32,w
  5339  029B  00F5               	movwf	___lmul@multiplicand
  5340  029C  25DE  3180         	fcall	___lmul
  5341  029E  0874               	movf	?___lmul+3,w
  5342  029F  00A9               	movwf	cal_rs_simulate_power@t32+3
  5343  02A0  0873               	movf	?___lmul+2,w
  5344  02A1  00A8               	movwf	cal_rs_simulate_power@t32+2
  5345  02A2  0872               	movf	?___lmul+1,w
  5346  02A3  00A7               	movwf	cal_rs_simulate_power@t32+1
  5347  02A4  0871               	movf	?___lmul,w
  5348  02A5  00A6               	movwf	cal_rs_simulate_power@t32
  5349                           
  5350                           ;sample.c: 423: t32-=40960000UL;
  5351  02A6  3000               	movlw	0
  5352  02A7  02A6               	subwf	cal_rs_simulate_power@t32,f
  5353  02A8  3BA7               	subwfb	cal_rs_simulate_power@t32+1,f
  5354  02A9  3071               	movlw	113
  5355  02AA  3BA8               	subwfb	cal_rs_simulate_power@t32+2,f
  5356  02AB  3002               	movlw	2
  5357  02AC  3BA9               	subwfb	cal_rs_simulate_power@t32+3,f
  5358                           
  5359                           ;sample.c: 424: t32>>=13;
  5360  02AD  300D               	movlw	13
  5361  02AE                     u2985:	
  5362  02AE  36A9               	lsrf	cal_rs_simulate_power@t32+3,f
  5363  02AF  0CA8               	rrf	cal_rs_simulate_power@t32+2,f
  5364  02B0  0CA7               	rrf	cal_rs_simulate_power@t32+1,f
  5365  02B1  0CA6               	rrf	cal_rs_simulate_power@t32,f
  5366  02B2  0B89               	decfsz	9,f
  5367  02B3  2AAE               	goto	u2985
  5368                           
  5369                           ;sample.c: 425: if(t32>65535)t32=65535;
  5370  02B4  0829               	movf	cal_rs_simulate_power@t32+3,w
  5371  02B5  1D03               	btfss	3,2
  5372  02B6  2ABB               	goto	l4267
  5373  02B7  3001               	movlw	1
  5374  02B8  0228               	subwf	cal_rs_simulate_power@t32+2,w
  5375  02B9  1C03               	btfss	3,0
  5376  02BA  2AC0               	goto	l700
  5377  02BB                     l4267:	
  5378  02BB  30FF               	movlw	255
  5379  02BC  01A9               	clrf	cal_rs_simulate_power@t32+3
  5380  02BD  01A8               	clrf	cal_rs_simulate_power@t32+2
  5381  02BE  00A7               	movwf	cal_rs_simulate_power@t32+1
  5382  02BF  00A6               	movwf	cal_rs_simulate_power@t32
  5383  02C0                     l700:	
  5384                           
  5385                           ;sample.c: 426: t16=(uint16_t)t32;
  5386  02C0  0827               	movf	cal_rs_simulate_power@t32+1,w
  5387  02C1  00AB               	movwf	cal_rs_simulate_power@t16+1
  5388  02C2  0826               	movf	cal_rs_simulate_power@t32,w
  5389  02C3  00AA               	movwf	cal_rs_simulate_power@t16
  5390                           
  5391                           ;sample.c: 427: return t16;
  5392  02C4  082B               	movf	cal_rs_simulate_power@t16+1,w
  5393  02C5  00A5               	movwf	?_cal_rs_simulate_power+1
  5394  02C6  082A               	movf	cal_rs_simulate_power@t16,w
  5395  02C7  00A4               	movwf	?_cal_rs_simulate_power
  5396  02C8  0008               	return
  5397  02C9                     __end_of_cal_rs_simulate_power:	
  5398  02C9                     __ptext31:	
  5399 ;; *************** function _calc_expect_vout_adc_value *****************
  5400 ;; Defined at:
  5401 ;;		line 379 in file "src/api/sample.c"
  5402 ;; Parameters:    Size  Location     Type
  5403 ;;  x               2   18[BANK0 ] unsigned int 
  5404 ;; Auto vars:     Size  Location     Type
  5405 ;;  t32             4   40[BANK0 ] long 
  5406 ;;  x0              4   36[BANK0 ] long 
  5407 ;;  y0              4   32[BANK0 ] long 
  5408 ;;  x1              4   28[BANK0 ] long 
  5409 ;;  y1              4   24[BANK0 ] long 
  5410 ;;  i               1   44[BANK0 ] unsigned char 
  5411 ;;  index           1    0        unsigned char 
  5412 ;; Return value:  Size  Location     Type
  5413 ;;                  2   18[BANK0 ] unsigned int 
  5414 ;; Registers used:
  5415 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5416 ;; Tracked objects:
  5417 ;;		On entry : 1F/0
  5418 ;;		On exit  : 1F/0
  5419 ;;		Unchanged: 0/0
  5420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5421 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5422 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5423 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5424 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5425 ;;Total ram usage:       27 bytes
  5426 ;; Hardware stack levels used:    1
  5427 ;; Hardware stack levels required when called:    2
  5428 ;; This function calls:
  5429 ;;		___aldiv
  5430 ;;		___lmul
  5431 ;; This function is called by:
  5432 ;;		_main
  5433 ;; This function uses a non-reentrant model
  5434 ;;
  5435                           
  5436                           
  5437                           ;psect for function _calc_expect_vout_adc_value
  5438  02C9                     _calc_expect_vout_adc_value:	
  5439                           
  5440                           ;sample.c: 382: int32_t y0,y1,x0,x1;
  5441                           ;sample.c: 383: uint8_t i;
  5442                           ;sample.c: 384: int32_t t32;
  5443                           ;sample.c: 385: for (i = 0; i < 10-2; i++) {
  5444                           
  5445                           ;incstack = 0
  5446                           ; Regs used in _calc_expect_vout_adc_value: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5447  02C9  01CC               	clrf	calc_expect_vout_adc_value@i
  5448  02CA                     l4205:	
  5449                           
  5450                           ;sample.c: 386: if(sysData.calibSimuPowerVaule[i]<sysData.calibSimuPowerVaule[i+1]){
  5451  02CA  354C               	lslf	calc_expect_vout_adc_value@i,w
  5452  02CB  3E2C               	addlw	(low ((_sysData| (0+256)+12)))& (0+255)
  5453  02CC  275E  3180         	fcall	PL10	;call to abstracted procedure
  5454  02CE  354C               	lslf	calc_expect_vout_adc_value@i,w
  5455  02CF  3E2A               	addlw	(low ((_sysData| (0+256)+10)))& (0+255)
  5456  02D0  0086               	movwf	6
  5457  02D1  3F40               	moviw [0]fsr1
  5458  02D2  00B6               	movwf	??_calc_expect_vout_adc_value+2
  5459  02D3  3F41               	moviw [1]fsr1
  5460  02D4  00B7               	movwf	??_calc_expect_vout_adc_value+3
  5461  02D5  0835               	movf	??_calc_expect_vout_adc_value+1,w
  5462  02D6  0237               	subwf	??_calc_expect_vout_adc_value+3,w
  5463  02D7  1D03               	skipz
  5464  02D8  2ADB               	goto	u2885
  5465  02D9  0834               	movf	??_calc_expect_vout_adc_value,w
  5466  02DA  0236               	subwf	??_calc_expect_vout_adc_value+2,w
  5467  02DB                     u2885:	
  5468  02DB  1803               	skipnc
  5469  02DC  2AE7               	goto	l4211
  5470                           
  5471                           ;sample.c: 387: if (x < sysData.calibSimuPowerVaule[i])break;
  5472  02DD  354C               	lslf	calc_expect_vout_adc_value@i,w
  5473  02DE  3E2A               	addlw	(low ((_sysData| (0+256)+10)))& (0+255)
  5474  02DF  275E  3180         	fcall	PL10	;call to abstracted procedure
  5475  02E1  0233               	subwf	calc_expect_vout_adc_value@x+1,w
  5476  02E2  1D03               	skipz
  5477  02E3  2AF1               	goto	u2905
  5478  02E4  0834               	movf	??_calc_expect_vout_adc_value,w
  5479  02E5  0232               	subwf	calc_expect_vout_adc_value@x,w
  5480  02E6  2AF1               	goto	u2905
  5481  02E7                     l4211:	
  5482                           
  5483                           ;sample.c: 389: if (x > sysData.calibSimuPowerVaule[i])break;
  5484  02E7  354C               	lslf	calc_expect_vout_adc_value@i,w
  5485  02E8  3E2A               	addlw	(low ((_sysData| (0+256)+10)))& (0+255)
  5486  02E9  275E  3180         	fcall	PL10	;call to abstracted procedure
  5487  02EB  0833               	movf	calc_expect_vout_adc_value@x+1,w
  5488  02EC  0235               	subwf	??_calc_expect_vout_adc_value+1,w
  5489  02ED  1D03               	skipz
  5490  02EE  2AF1               	goto	u2905
  5491  02EF  0832               	movf	calc_expect_vout_adc_value@x,w
  5492  02F0  0234               	subwf	??_calc_expect_vout_adc_value,w
  5493  02F1                     u2905:	
  5494  02F1  1C03               	btfss	3,0
  5495  02F2  2AF8               	goto	l4219
  5496  02F3  3008               	movlw	8
  5497  02F4  0ACC               	incf	calc_expect_vout_adc_value@i,f
  5498  02F5  024C               	subwf	calc_expect_vout_adc_value@i,w
  5499  02F6  1C03               	skipc
  5500  02F7  2ACA               	goto	l4205
  5501  02F8                     l4219:	
  5502                           
  5503                           ;sample.c: 390: }
  5504                           ;sample.c: 391: }
  5505                           ;sample.c: 392: if(i)i--;
  5506  02F8  084C               	movf	calc_expect_vout_adc_value@i,w
  5507  02F9  1D03               	btfss	3,2
  5508  02FA  03CC               	decf	calc_expect_vout_adc_value@i,f
  5509                           
  5510                           ;sample.c: 393: if (i > 10-2)i=10-2;
  5511  02FB  3009               	movlw	9
  5512  02FC  024C               	subwf	calc_expect_vout_adc_value@i,w
  5513  02FD  3008               	movlw	8
  5514  02FE  1803               	btfsc	3,0
  5515  02FF  00CC               	movwf	calc_expect_vout_adc_value@i
  5516                           
  5517                           ;sample.c: 394: y1=sysData.calibVoutAdcValue[i+1];
  5518  0300  354C               	lslf	calc_expect_vout_adc_value@i,w
  5519  0301  3E40               	addlw	(low ((_sysData| (0+256)+32)))& (0+255)
  5520  0302  275E  3180         	fcall	PL10	;call to abstracted procedure
  5521  0304  0834               	movf	??_calc_expect_vout_adc_value,w
  5522  0305  00B8               	movwf	calc_expect_vout_adc_value@y1
  5523  0306  0835               	movf	??_calc_expect_vout_adc_value+1,w
  5524  0307  00B9               	movwf	calc_expect_vout_adc_value@y1+1
  5525  0308  01BA               	clrf	calc_expect_vout_adc_value@y1+2
  5526  0309  01BB               	clrf	calc_expect_vout_adc_value@y1+3
  5527                           
  5528                           ;sample.c: 395: y0=sysData.calibVoutAdcValue[i];
  5529  030A  354C               	lslf	calc_expect_vout_adc_value@i,w
  5530  030B  3E3E               	addlw	(low ((_sysData| (0+256)+30)))& (0+255)
  5531  030C  2766  3180         	fcall	PL16	;call to abstracted procedure
  5532  030E  00C0               	movwf	calc_expect_vout_adc_value@y0
  5533  030F  0835               	movf	??_calc_expect_vout_adc_value+1,w
  5534  0310  00C1               	movwf	calc_expect_vout_adc_value@y0+1
  5535  0311  01C2               	clrf	calc_expect_vout_adc_value@y0+2
  5536  0312  01C3               	clrf	calc_expect_vout_adc_value@y0+3
  5537                           
  5538                           ;sample.c: 398: x1=sysData.calibSimuPowerVaule[i+1];
  5539  0313  354C               	lslf	calc_expect_vout_adc_value@i,w
  5540  0314  3E2C               	addlw	(low ((_sysData| (0+256)+12)))& (0+255)
  5541  0315  2766  3180         	fcall	PL16	;call to abstracted procedure
  5542  0317  00BC               	movwf	calc_expect_vout_adc_value@x1
  5543  0318  0835               	movf	??_calc_expect_vout_adc_value+1,w
  5544  0319  00BD               	movwf	calc_expect_vout_adc_value@x1+1
  5545  031A  01BE               	clrf	calc_expect_vout_adc_value@x1+2
  5546  031B  01BF               	clrf	calc_expect_vout_adc_value@x1+3
  5547                           
  5548                           ;sample.c: 399: x0=sysData.calibSimuPowerVaule[i];
  5549  031C  354C               	lslf	calc_expect_vout_adc_value@i,w
  5550  031D  3E2A               	addlw	(low ((_sysData| (0+256)+10)))& (0+255)
  5551  031E  2766  3180         	fcall	PL16	;call to abstracted procedure
  5552  0320  00C4               	movwf	calc_expect_vout_adc_value@x0
  5553  0321  0835               	movf	??_calc_expect_vout_adc_value+1,w
  5554  0322  00C5               	movwf	calc_expect_vout_adc_value@x0+1
  5555  0323  01C6               	clrf	calc_expect_vout_adc_value@x0+2
  5556  0324  01C7               	clrf	calc_expect_vout_adc_value@x0+3
  5557                           
  5558                           ;sample.c: 402: if(x1==x0)return y0;
  5559  0325  0847               	movf	calc_expect_vout_adc_value@x0+3,w
  5560  0326  063F               	xorwf	calc_expect_vout_adc_value@x1+3,w
  5561  0327  1D03               	skipz
  5562  0328  2B33               	goto	u2945
  5563  0329  0846               	movf	calc_expect_vout_adc_value@x0+2,w
  5564  032A  063E               	xorwf	calc_expect_vout_adc_value@x1+2,w
  5565  032B  1D03               	skipz
  5566  032C  2B33               	goto	u2945
  5567  032D  0845               	movf	calc_expect_vout_adc_value@x0+1,w
  5568  032E  063D               	xorwf	calc_expect_vout_adc_value@x1+1,w
  5569  032F  1D03               	skipz
  5570  0330  2B33               	goto	u2945
  5571  0331  0844               	movf	calc_expect_vout_adc_value@x0,w
  5572  0332  063C               	xorwf	calc_expect_vout_adc_value@x1,w
  5573  0333                     u2945:	
  5574  0333  1D03               	skipz
  5575  0334  2B3A               	goto	l4239
  5576  0335  0841               	movf	calc_expect_vout_adc_value@y0+1,w
  5577  0336  00B3               	movwf	?_calc_expect_vout_adc_value+1
  5578  0337  0840               	movf	calc_expect_vout_adc_value@y0,w
  5579  0338  00B2               	movwf	?_calc_expect_vout_adc_value
  5580  0339  0008               	return
  5581  033A                     l4239:	
  5582                           
  5583                           ;sample.c: 405: t32=(x-x0);
  5584  033A  0832               	movf	calc_expect_vout_adc_value@x,w
  5585  033B  00C8               	movwf	calc_expect_vout_adc_value@t32
  5586  033C  0833               	movf	calc_expect_vout_adc_value@x+1,w
  5587  033D  00C9               	movwf	calc_expect_vout_adc_value@t32+1
  5588  033E  01CA               	clrf	calc_expect_vout_adc_value@t32+2
  5589  033F  01CB               	clrf	calc_expect_vout_adc_value@t32+3
  5590  0340  0844               	movf	calc_expect_vout_adc_value@x0,w
  5591  0341  02C8               	subwf	calc_expect_vout_adc_value@t32,f
  5592  0342  0845               	movf	calc_expect_vout_adc_value@x0+1,w
  5593  0343  3BC9               	subwfb	calc_expect_vout_adc_value@t32+1,f
  5594  0344  0846               	movf	calc_expect_vout_adc_value@x0+2,w
  5595  0345  3BCA               	subwfb	calc_expect_vout_adc_value@t32+2,f
  5596  0346  0847               	movf	calc_expect_vout_adc_value@x0+3,w
  5597  0347  3BCB               	subwfb	calc_expect_vout_adc_value@t32+3,f
  5598                           
  5599                           ;sample.c: 406: t32=t32*(y1-y0);
  5600  0348  083B               	movf	calc_expect_vout_adc_value@y1+3,w
  5601  0349  00F4               	movwf	___lmul@multiplier+3
  5602  034A  083A               	movf	calc_expect_vout_adc_value@y1+2,w
  5603  034B  00F3               	movwf	___lmul@multiplier+2
  5604  034C  0839               	movf	calc_expect_vout_adc_value@y1+1,w
  5605  034D  00F2               	movwf	___lmul@multiplier+1
  5606  034E  0838               	movf	calc_expect_vout_adc_value@y1,w
  5607  034F  00F1               	movwf	___lmul@multiplier
  5608  0350  0840               	movf	calc_expect_vout_adc_value@y0,w
  5609  0351  02F1               	subwf	___lmul@multiplier,f
  5610  0352  0841               	movf	calc_expect_vout_adc_value@y0+1,w
  5611  0353  3BF2               	subwfb	___lmul@multiplier+1,f
  5612  0354  0842               	movf	calc_expect_vout_adc_value@y0+2,w
  5613  0355  3BF3               	subwfb	___lmul@multiplier+2,f
  5614  0356  0843               	movf	calc_expect_vout_adc_value@y0+3,w
  5615  0357  3BF4               	subwfb	___lmul@multiplier+3,f
  5616  0358  084B               	movf	calc_expect_vout_adc_value@t32+3,w
  5617  0359  00F8               	movwf	___lmul@multiplicand+3
  5618  035A  084A               	movf	calc_expect_vout_adc_value@t32+2,w
  5619  035B  00F7               	movwf	___lmul@multiplicand+2
  5620  035C  0849               	movf	calc_expect_vout_adc_value@t32+1,w
  5621  035D  00F6               	movwf	___lmul@multiplicand+1
  5622  035E  0848               	movf	calc_expect_vout_adc_value@t32,w
  5623  035F  00F5               	movwf	___lmul@multiplicand
  5624  0360  25DE  3180         	fcall	___lmul
  5625  0362  0874               	movf	?___lmul+3,w
  5626  0363  00CB               	movwf	calc_expect_vout_adc_value@t32+3
  5627  0364  0873               	movf	?___lmul+2,w
  5628  0365  00CA               	movwf	calc_expect_vout_adc_value@t32+2
  5629  0366  0872               	movf	?___lmul+1,w
  5630  0367  00C9               	movwf	calc_expect_vout_adc_value@t32+1
  5631  0368  0871               	movf	?___lmul,w
  5632  0369  00C8               	movwf	calc_expect_vout_adc_value@t32
  5633                           
  5634                           ;sample.c: 407: t32=t32/(x1-x0);
  5635  036A  083F               	movf	calc_expect_vout_adc_value@x1+3,w
  5636  036B  00A7               	movwf	___aldiv@divisor+3
  5637  036C  083E               	movf	calc_expect_vout_adc_value@x1+2,w
  5638  036D  00A6               	movwf	___aldiv@divisor+2
  5639  036E  083D               	movf	calc_expect_vout_adc_value@x1+1,w
  5640  036F  00A5               	movwf	___aldiv@divisor+1
  5641  0370  083C               	movf	calc_expect_vout_adc_value@x1,w
  5642  0371  00A4               	movwf	___aldiv@divisor
  5643  0372  0844               	movf	calc_expect_vout_adc_value@x0,w
  5644  0373  02A4               	subwf	___aldiv@divisor,f
  5645  0374  0845               	movf	calc_expect_vout_adc_value@x0+1,w
  5646  0375  3BA5               	subwfb	___aldiv@divisor+1,f
  5647  0376  0846               	movf	calc_expect_vout_adc_value@x0+2,w
  5648  0377  3BA6               	subwfb	___aldiv@divisor+2,f
  5649  0378  0847               	movf	calc_expect_vout_adc_value@x0+3,w
  5650  0379  3BA7               	subwfb	___aldiv@divisor+3,f
  5651  037A  084B               	movf	calc_expect_vout_adc_value@t32+3,w
  5652  037B  00AB               	movwf	___aldiv@dividend+3
  5653  037C  084A               	movf	calc_expect_vout_adc_value@t32+2,w
  5654  037D  00AA               	movwf	___aldiv@dividend+2
  5655  037E  0849               	movf	calc_expect_vout_adc_value@t32+1,w
  5656  037F  00A9               	movwf	___aldiv@dividend+1
  5657  0380  0848               	movf	calc_expect_vout_adc_value@t32,w
  5658  0381  00A8               	movwf	___aldiv@dividend
  5659  0382  2572  3180         	fcall	___aldiv
  5660  0384  0827               	movf	?___aldiv+3,w
  5661  0385  00CB               	movwf	calc_expect_vout_adc_value@t32+3
  5662  0386  0826               	movf	?___aldiv+2,w
  5663  0387  00CA               	movwf	calc_expect_vout_adc_value@t32+2
  5664  0388  0825               	movf	?___aldiv+1,w
  5665  0389  00C9               	movwf	calc_expect_vout_adc_value@t32+1
  5666  038A  0824               	movf	?___aldiv,w
  5667  038B  00C8               	movwf	calc_expect_vout_adc_value@t32
  5668                           
  5669                           ;sample.c: 408: t32=t32+y0;
  5670  038C  0840               	movf	calc_expect_vout_adc_value@y0,w
  5671  038D  07C8               	addwf	calc_expect_vout_adc_value@t32,f
  5672  038E  0841               	movf	calc_expect_vout_adc_value@y0+1,w
  5673  038F  3DC9               	addwfc	calc_expect_vout_adc_value@t32+1,f
  5674  0390  0842               	movf	calc_expect_vout_adc_value@y0+2,w
  5675  0391  3DCA               	addwfc	calc_expect_vout_adc_value@t32+2,f
  5676  0392  0843               	movf	calc_expect_vout_adc_value@y0+3,w
  5677  0393  3DCB               	addwfc	calc_expect_vout_adc_value@t32+3,f
  5678                           
  5679                           ;sample.c: 409: if(t32<0)t32=0;
  5680  0394  1FCB               	btfss	calc_expect_vout_adc_value@t32+3,7
  5681  0395  2B9A               	goto	l4249
  5682  0396  01C8               	clrf	calc_expect_vout_adc_value@t32
  5683  0397  01C9               	clrf	calc_expect_vout_adc_value@t32+1
  5684  0398  01CA               	clrf	calc_expect_vout_adc_value@t32+2
  5685  0399  01CB               	clrf	calc_expect_vout_adc_value@t32+3
  5686  039A                     l4249:	
  5687                           
  5688                           ;sample.c: 410: return (uint16_t)t32;
  5689  039A  0849               	movf	calc_expect_vout_adc_value@t32+1,w
  5690  039B  00B3               	movwf	?_calc_expect_vout_adc_value+1
  5691  039C  0848               	movf	calc_expect_vout_adc_value@t32,w
  5692  039D  00B2               	movwf	?_calc_expect_vout_adc_value
  5693  039E  0008               	return
  5694  039F                     __end_of_calc_expect_vout_adc_value:	
  5695  039F                     __ptext11:	
  5696 ;; *************** function _pid_pwm1_idrv_b_b *****************
  5697 ;; Defined at:
  5698 ;;		line 217 in file "src/api/sample.c"
  5699 ;; Parameters:    Size  Location     Type
  5700 ;;		None
  5701 ;; Auto vars:     Size  Location     Type
  5702 ;;  t32             4   18[BANK0 ] long 
  5703 ;; Return value:  Size  Location     Type
  5704 ;;                  1    wreg      void 
  5705 ;; Registers used:
  5706 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5707 ;; Tracked objects:
  5708 ;;		On entry : 1F/0
  5709 ;;		On exit  : 1E/0
  5710 ;;		Unchanged: 0/0
  5711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5713 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5714 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5715 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5716 ;;Total ram usage:        5 bytes
  5717 ;; Hardware stack levels used:    1
  5718 ;; Hardware stack levels required when called:    3
  5719 ;; This function calls:
  5720 ;;		___aldiv
  5721 ;;		___lmul
  5722 ;;		_set_idrv_pwm1_duty
  5723 ;; This function is called by:
  5724 ;;		_main
  5725 ;; This function uses a non-reentrant model
  5726 ;;
  5727                           
  5728                           
  5729                           ;psect for function _pid_pwm1_idrv_b_b
  5730  039F                     _pid_pwm1_idrv_b_b:	
  5731                           
  5732                           ;sample.c: 219: int32_t t32;
  5733                           ;sample.c: 220: t32=(resRs-resRc);
  5734                           
  5735                           ;incstack = 0
  5736                           ; Regs used in _pid_pwm1_idrv_b_b: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5737  039F  0021               	movlb	1	; select bank1
  5738  03A0  085F               	movf	(_resRs+3)^(0+128),w
  5739  03A1  0020               	movlb	0	; select bank0
  5740  03A2  00B5               	movwf	pid_pwm1_idrv_b_b@t32+3
  5741  03A3  0021               	movlb	1	; select bank1
  5742  03A4  085E               	movf	(_resRs+2)^(0+128),w
  5743  03A5  0020               	movlb	0	; select bank0
  5744  03A6  00B4               	movwf	pid_pwm1_idrv_b_b@t32+2
  5745  03A7  0021               	movlb	1	; select bank1
  5746  03A8  085D               	movf	(_resRs+1)^(0+128),w
  5747  03A9  0020               	movlb	0	; select bank0
  5748  03AA  00B3               	movwf	pid_pwm1_idrv_b_b@t32+1
  5749  03AB  0021               	movlb	1	; select bank1
  5750  03AC  085C               	movf	_resRs^(0+128),w
  5751  03AD  0020               	movlb	0	; select bank0
  5752  03AE  00B2               	movwf	pid_pwm1_idrv_b_b@t32
  5753  03AF  0867               	movf	_resRc,w
  5754  03B0  02B2               	subwf	pid_pwm1_idrv_b_b@t32,f
  5755  03B1  0868               	movf	_resRc+1,w
  5756  03B2  3BB3               	subwfb	pid_pwm1_idrv_b_b@t32+1,f
  5757  03B3  0869               	movf	_resRc+2,w
  5758  03B4  3BB4               	subwfb	pid_pwm1_idrv_b_b@t32+2,f
  5759  03B5  086A               	movf	_resRc+3,w
  5760  03B6  3BB5               	subwfb	pid_pwm1_idrv_b_b@t32+3,f
  5761                           
  5762                           ;sample.c: 221: switch(pidBbSm){
  5763  03B7  2D0A               	goto	l4149
  5764  03B8                     l4103:	
  5765                           
  5766                           ;sample.c: 224: case 1:
  5767                           ;sample.c: 225: pidTestNum=0;
  5768  03B8  01E4               	clrf	_pidTestNum
  5769  03B9                     l4105:	
  5770                           
  5771                           ;sample.c: 226: set_idrv_pwm1_duty(1200);
  5772  03B9  30B0               	movlw	176
  5773  03BA  00F3               	movwf	set_idrv_pwm1_duty@duty
  5774  03BB  3004               	movlw	4
  5775  03BC  00F4               	movwf	set_idrv_pwm1_duty@duty+1
  5776  03BD  318C  2415  3180   	fcall	_set_idrv_pwm1_duty
  5777                           
  5778                           ;sample.c: 227: pidBbSm=2;
  5779  03C0  3002               	movlw	2
  5780  03C1  2D07               	goto	L6
  5781  03C2                     l4109:	
  5782                           ;sample.c: 228: break;
  5783                           
  5784                           
  5785                           ;sample.c: 230: if(t32>5000){
  5786  03C2  1BB5               	btfsc	pid_pwm1_idrv_b_b@t32+3,7
  5787  03C3  2D14               	goto	l4151
  5788  03C4  0835               	movf	pid_pwm1_idrv_b_b@t32+3,w
  5789  03C5  1D03               	btfss	3,2
  5790  03C6  2BD0               	goto	l4111
  5791  03C7  0834               	movf	pid_pwm1_idrv_b_b@t32+2,w
  5792  03C8  1D03               	btfss	3,2
  5793  03C9  2BD0               	goto	l4111
  5794  03CA  3089               	movlw	137
  5795  03CB  0232               	subwf	pid_pwm1_idrv_b_b@t32,w
  5796  03CC  3013               	movlw	19
  5797  03CD  3B33               	subwfb	pid_pwm1_idrv_b_b@t32+1,w
  5798  03CE  1C03               	btfss	3,0
  5799  03CF  2D14               	goto	l4151
  5800  03D0                     l4111:	
  5801                           
  5802                           ;sample.c: 231: set_idrv_pwm1_duty(5);
  5803  03D0  3005               	movlw	5
  5804  03D1  00F3               	movwf	set_idrv_pwm1_duty@duty
  5805  03D2  01F4               	clrf	set_idrv_pwm1_duty@duty+1
  5806  03D3  318C  2415  3180   	fcall	_set_idrv_pwm1_duty
  5807                           
  5808                           ;sample.c: 232: pidBbSm=3;
  5809  03D6  3003               	movlw	3
  5810  03D7  2D07               	goto	L6
  5811  03D8                     l4115:	
  5812                           ;sample.c: 233: break;
  5813                           
  5814                           
  5815                           ;sample.c: 237: if(t32<2000){
  5816  03D8  1BB5               	btfsc	pid_pwm1_idrv_b_b@t32+3,7
  5817  03D9  2BE6               	goto	l4117
  5818  03DA  0835               	movf	pid_pwm1_idrv_b_b@t32+3,w
  5819  03DB  1D03               	btfss	3,2
  5820  03DC  2D14               	goto	l4151
  5821  03DD  0834               	movf	pid_pwm1_idrv_b_b@t32+2,w
  5822  03DE  1D03               	btfss	3,2
  5823  03DF  2D14               	goto	l4151
  5824  03E0  30D0               	movlw	208
  5825  03E1  0232               	subwf	pid_pwm1_idrv_b_b@t32,w
  5826  03E2  3007               	movlw	7
  5827  03E3  3B33               	subwfb	pid_pwm1_idrv_b_b@t32+1,w
  5828  03E4  1803               	btfsc	3,0
  5829  03E5  2D14               	goto	l4151
  5830  03E6                     l4117:	
  5831                           
  5832                           ;sample.c: 238: bbt0=bbt1;
  5833  03E6  0021               	movlb	1	; select bank1
  5834  03E7  083F               	movf	(_bbt1+3)^(0+128),w
  5835  03E8  00BB               	movwf	(_bbt0+3)^(0+128)
  5836  03E9  083E               	movf	(_bbt1+2)^(0+128),w
  5837  03EA  00BA               	movwf	(_bbt0+2)^(0+128)
  5838  03EB  083D               	movf	(_bbt1+1)^(0+128),w
  5839  03EC  00B9               	movwf	(_bbt0+1)^(0+128)
  5840  03ED  083C               	movf	_bbt1^(0+128),w
  5841  03EE  00B8               	movwf	_bbt0^(0+128)
  5842                           
  5843                           ;sample.c: 239: bbt1=globalTicker;
  5844  03EF  084F               	movf	(_globalTicker+3)^(0+128),w	;volatile
  5845  03F0  00BF               	movwf	(_bbt1+3)^(0+128)
  5846  03F1  084E               	movf	(_globalTicker+2)^(0+128),w	;volatile
  5847  03F2  00BE               	movwf	(_bbt1+2)^(0+128)
  5848  03F3  084D               	movf	(_globalTicker+1)^(0+128),w	;volatile
  5849  03F4  00BD               	movwf	(_bbt1+1)^(0+128)
  5850  03F5  084C               	movf	_globalTicker^(0+128),w	;volatile
  5851  03F6  00BC               	movwf	_bbt1^(0+128)
  5852                           
  5853                           ;sample.c: 240: pidTestNum++;
  5854  03F7  0020               	movlb	0	; select bank0
  5855  03F8  3005               	movlw	5
  5856  03F9  0AE4               	incf	_pidTestNum,f
  5857                           
  5858                           ;sample.c: 241: if(pidTestNum>4){
  5859  03FA  0264               	subwf	_pidTestNum,w
  5860  03FB  1C03               	skipc
  5861  03FC  2BB9               	goto	l4105
  5862                           
  5863                           ;sample.c: 242: pidBbSm=4;
  5864  03FD  3004               	movlw	4
  5865  03FE  2D08               	goto	L5
  5866  03FF                     l4129:	
  5867                           ;sample.c: 243: break;
  5868                           
  5869                           
  5870                           ;sample.c: 251: bbtu=bbt1-bbt0;
  5871  03FF  0021               	movlb	1	; select bank1
  5872  0400  083F               	movf	(_bbt1+3)^(0+128),w
  5873  0401  00C7               	movwf	(_bbtu+3)^(0+128)
  5874  0402  083E               	movf	(_bbt1+2)^(0+128),w
  5875  0403  00C6               	movwf	(_bbtu+2)^(0+128)
  5876  0404  083D               	movf	(_bbt1+1)^(0+128),w
  5877  0405  00C5               	movwf	(_bbtu+1)^(0+128)
  5878  0406  083C               	movf	_bbt1^(0+128),w
  5879  0407  00C4               	movwf	_bbtu^(0+128)
  5880  0408  0838               	movf	_bbt0^(0+128),w
  5881  0409  02C4               	subwf	_bbtu^(0+128),f
  5882  040A  0839               	movf	(_bbt0+1)^(0+128),w
  5883  040B  3BC5               	subwfb	(_bbtu+1)^(0+128),f
  5884  040C  083A               	movf	(_bbt0+2)^(0+128),w
  5885  040D  3BC6               	subwfb	(_bbtu+2)^(0+128),f
  5886  040E  083B               	movf	(_bbt0+3)^(0+128),w
  5887  040F  3BC7               	subwfb	(_bbtu+3)^(0+128),f
  5888                           
  5889                           ;sample.c: 252: bbtu=bbtu/5;
  5890  0410  3005               	movlw	5
  5891  0411  0020               	movlb	0	; select bank0
  5892  0412  00A4               	movwf	___aldiv@divisor
  5893  0413  01A5               	clrf	___aldiv@divisor+1
  5894  0414  274B  3180         	fcall	PL4	;call to abstracted procedure
  5895  0416  2572  3180         	fcall	___aldiv
  5896  0418  0827               	movf	?___aldiv+3,w
  5897  0419  0021               	movlb	1	; select bank1
  5898  041A  00C7               	movwf	(_bbtu+3)^(0+128)
  5899  041B  0020               	movlb	0	; select bank0
  5900  041C  0826               	movf	?___aldiv+2,w
  5901  041D  0021               	movlb	1	; select bank1
  5902  041E  00C6               	movwf	(_bbtu+2)^(0+128)
  5903  041F  0020               	movlb	0	; select bank0
  5904  0420  0825               	movf	?___aldiv+1,w
  5905  0421  0021               	movlb	1	; select bank1
  5906  0422  00C5               	movwf	(_bbtu+1)^(0+128)
  5907  0423  0020               	movlb	0	; select bank0
  5908  0424  0824               	movf	?___aldiv,w
  5909  0425  0021               	movlb	1	; select bank1
  5910  0426  00C4               	movwf	_bbtu^(0+128)
  5911                           
  5912                           ;sample.c: 253: bbta=(bbmax-bbmin)/2;
  5913  0427  0853               	movf	(_bbmax+3)^(0+128),w
  5914  0428  0020               	movlb	0	; select bank0
  5915  0429  00AB               	movwf	___aldiv@dividend+3
  5916  042A  0021               	movlb	1	; select bank1
  5917  042B  0852               	movf	(_bbmax+2)^(0+128),w
  5918  042C  0020               	movlb	0	; select bank0
  5919  042D  00AA               	movwf	___aldiv@dividend+2
  5920  042E  0021               	movlb	1	; select bank1
  5921  042F  0851               	movf	(_bbmax+1)^(0+128),w
  5922  0430  0020               	movlb	0	; select bank0
  5923  0431  00A9               	movwf	___aldiv@dividend+1
  5924  0432  0021               	movlb	1	; select bank1
  5925  0433  0850               	movf	_bbmax^(0+128),w
  5926  0434  0020               	movlb	0	; select bank0
  5927  0435  00A8               	movwf	___aldiv@dividend
  5928  0436  0021               	movlb	1	; select bank1
  5929  0437  0854               	movf	_bbmin^(0+128),w
  5930  0438  0020               	movlb	0	; select bank0
  5931  0439  02A8               	subwf	___aldiv@dividend,f
  5932  043A  0021               	movlb	1	; select bank1
  5933  043B  0855               	movf	(_bbmin+1)^(0+128),w
  5934  043C  0020               	movlb	0	; select bank0
  5935  043D  3BA9               	subwfb	___aldiv@dividend+1,f
  5936  043E  0021               	movlb	1	; select bank1
  5937  043F  0856               	movf	(_bbmin+2)^(0+128),w
  5938  0440  0020               	movlb	0	; select bank0
  5939  0441  3BAA               	subwfb	___aldiv@dividend+2,f
  5940  0442  0021               	movlb	1	; select bank1
  5941  0443  0857               	movf	(_bbmin+3)^(0+128),w
  5942  0444  0020               	movlb	0	; select bank0
  5943  0445  3BAB               	subwfb	___aldiv@dividend+3,f
  5944  0446  3002               	movlw	2
  5945  0447  00A4               	movwf	___aldiv@divisor
  5946  0448  01A5               	clrf	___aldiv@divisor+1
  5947  0449  01A6               	clrf	___aldiv@divisor+2
  5948  044A  01A7               	clrf	___aldiv@divisor+3
  5949  044B  2572  3180         	fcall	___aldiv
  5950  044D  0827               	movf	?___aldiv+3,w
  5951  044E  0021               	movlb	1	; select bank1
  5952  044F  00C3               	movwf	(_bbta+3)^(0+128)
  5953  0450  0020               	movlb	0	; select bank0
  5954  0451  0826               	movf	?___aldiv+2,w
  5955  0452  0021               	movlb	1	; select bank1
  5956  0453  00C2               	movwf	(_bbta+2)^(0+128)
  5957  0454  0020               	movlb	0	; select bank0
  5958  0455  0825               	movf	?___aldiv+1,w
  5959  0456  0021               	movlb	1	; select bank1
  5960  0457  00C1               	movwf	(_bbta+1)^(0+128)
  5961  0458  0020               	movlb	0	; select bank0
  5962  0459  0824               	movf	?___aldiv,w
  5963  045A  0021               	movlb	1	; select bank1
  5964  045B  00C0               	movwf	_bbta^(0+128)
  5965                           
  5966                           ;sample.c: 254: bbu=(1200-5)/2;
  5967  045C  3002               	movlw	2
  5968  045D  01CB               	clrf	(_bbu+3)^(0+128)
  5969  045E  01CA               	clrf	(_bbu+2)^(0+128)
  5970  045F  00C9               	movwf	(_bbu+1)^(0+128)
  5971  0460  3055               	movlw	85
  5972  0461  00C8               	movwf	_bbu^(0+128)
  5973                           
  5974                           ;sample.c: 256: bbku=(bbu*40000)/(bbta*314);
  5975  0462  0843               	movf	(_bbta+3)^(0+128),w
  5976  0463  00F4               	movwf	___lmul@multiplier+3
  5977  0464  0842               	movf	(_bbta+2)^(0+128),w
  5978  0465  00F3               	movwf	___lmul@multiplier+2
  5979  0466  0841               	movf	(_bbta+1)^(0+128),w
  5980  0467  00F2               	movwf	___lmul@multiplier+1
  5981  0468  0840               	movf	_bbta^(0+128),w
  5982  0469  00F1               	movwf	___lmul@multiplier
  5983  046A  3001               	movlw	1
  5984  046B  01F8               	clrf	___lmul@multiplicand+3
  5985  046C  01F7               	clrf	___lmul@multiplicand+2
  5986  046D  00F6               	movwf	___lmul@multiplicand+1
  5987  046E  303A               	movlw	58
  5988  046F  00F5               	movwf	___lmul@multiplicand
  5989  0470  25DE  3180         	fcall	___lmul
  5990  0472  0874               	movf	?___lmul+3,w
  5991  0473  00A7               	movwf	___aldiv@divisor+3
  5992  0474  0873               	movf	?___lmul+2,w
  5993  0475  00A6               	movwf	___aldiv@divisor+2
  5994  0476  0872               	movf	?___lmul+1,w
  5995  0477  00A5               	movwf	___aldiv@divisor+1
  5996  0478  0871               	movf	?___lmul,w
  5997  0479  00A4               	movwf	___aldiv@divisor
  5998  047A  3002               	movlw	2
  5999  047B  01F4               	clrf	___lmul@multiplier+3
  6000  047C  01F3               	clrf	___lmul@multiplier+2
  6001  047D  00F2               	movwf	___lmul@multiplier+1
  6002  047E  3055               	movlw	85
  6003  047F  00F1               	movwf	___lmul@multiplier
  6004  0480  309C               	movlw	156
  6005  0481  01F8               	clrf	___lmul@multiplicand+3
  6006  0482  01F7               	clrf	___lmul@multiplicand+2
  6007  0483  00F6               	movwf	___lmul@multiplicand+1
  6008  0484  3040               	movlw	64
  6009  0485  00F5               	movwf	___lmul@multiplicand
  6010  0486  25DE  3180         	fcall	___lmul
  6011  0488  2742  3180         	fcall	PL2	;call to abstracted procedure
  6012  048A  2572  3180         	fcall	___aldiv
  6013  048C  0827               	movf	?___aldiv+3,w
  6014  048D  0021               	movlb	1	; select bank1
  6015  048E  00B7               	movwf	(_bbku+3)^(0+128)
  6016  048F  0020               	movlb	0	; select bank0
  6017  0490  0826               	movf	?___aldiv+2,w
  6018  0491  0021               	movlb	1	; select bank1
  6019  0492  00B6               	movwf	(_bbku+2)^(0+128)
  6020  0493  0020               	movlb	0	; select bank0
  6021  0494  0825               	movf	?___aldiv+1,w
  6022  0495  0021               	movlb	1	; select bank1
  6023  0496  00B5               	movwf	(_bbku+1)^(0+128)
  6024  0497  0020               	movlb	0	; select bank0
  6025  0498  0824               	movf	?___aldiv,w
  6026  0499  0021               	movlb	1	; select bank1
  6027  049A  00B4               	movwf	_bbku^(0+128)
  6028                           
  6029                           ;sample.c: 257: bbku*=100;
  6030  049B  3064               	movlw	100
  6031  049C  00F1               	movwf	___lmul@multiplier
  6032  049D  01F2               	clrf	___lmul@multiplier+1
  6033  049E  01F3               	clrf	___lmul@multiplier+2
  6034  049F  01F4               	clrf	___lmul@multiplier+3
  6035  04A0  0837               	movf	(_bbku+3)^(0+128),w
  6036  04A1  00F8               	movwf	___lmul@multiplicand+3
  6037  04A2  0836               	movf	(_bbku+2)^(0+128),w
  6038  04A3  00F7               	movwf	___lmul@multiplicand+2
  6039  04A4  0835               	movf	(_bbku+1)^(0+128),w
  6040  04A5  00F6               	movwf	___lmul@multiplicand+1
  6041  04A6  0834               	movf	_bbku^(0+128),w
  6042  04A7  00F5               	movwf	___lmul@multiplicand
  6043  04A8  25DE  3180         	fcall	___lmul
  6044  04AA  0874               	movf	?___lmul+3,w
  6045  04AB  0021               	movlb	1	; select bank1
  6046  04AC  00B7               	movwf	(_bbku+3)^(0+128)
  6047  04AD  0873               	movf	?___lmul+2,w
  6048  04AE  00B6               	movwf	(_bbku+2)^(0+128)
  6049  04AF  0872               	movf	?___lmul+1,w
  6050  04B0  00B5               	movwf	(_bbku+1)^(0+128)
  6051  04B1  0871               	movf	?___lmul,w
  6052  04B2  00B4               	movwf	_bbku^(0+128)
  6053                           
  6054                           ;sample.c: 259: PidKp=bbku*10/10;
  6055  04B3  300A               	movlw	10
  6056  04B4  0020               	movlb	0	; select bank0
  6057  04B5  276D  3180         	fcall	PL18	;call to abstracted procedure
  6058  04B7  0837               	movf	(_bbku+3)^(0+128),w
  6059  04B8  00F4               	movwf	___lmul@multiplier+3
  6060  04B9  0836               	movf	(_bbku+2)^(0+128),w
  6061  04BA  00F3               	movwf	___lmul@multiplier+2
  6062  04BB  0835               	movf	(_bbku+1)^(0+128),w
  6063  04BC  00F2               	movwf	___lmul@multiplier+1
  6064  04BD  0834               	movf	_bbku^(0+128),w
  6065  04BE  277C  3180         	fcall	PL26	;call to abstracted procedure
  6066  04C0  25DE  3180         	fcall	___lmul
  6067  04C2  2742  3180         	fcall	PL2	;call to abstracted procedure
  6068  04C4  2572  3180         	fcall	___aldiv
  6069  04C6  0827               	movf	?___aldiv+3,w
  6070  04C7  00D0               	movwf	_PidKp+3
  6071  04C8  0826               	movf	?___aldiv+2,w
  6072  04C9  00CF               	movwf	_PidKp+2
  6073  04CA  0825               	movf	?___aldiv+1,w
  6074  04CB  00CE               	movwf	_PidKp+1
  6075  04CC  0824               	movf	?___aldiv,w
  6076  04CD  00CD               	movwf	_PidKp
  6077                           
  6078                           ;sample.c: 260: PidTi=bbtu*10/40;
  6079  04CE  3028               	movlw	40
  6080  04CF  276D  3180         	fcall	PL18	;call to abstracted procedure
  6081  04D1  0847               	movf	(_bbtu+3)^(0+128),w
  6082  04D2  00F4               	movwf	___lmul@multiplier+3
  6083  04D3  0846               	movf	(_bbtu+2)^(0+128),w
  6084  04D4  00F3               	movwf	___lmul@multiplier+2
  6085  04D5  0845               	movf	(_bbtu+1)^(0+128),w
  6086  04D6  00F2               	movwf	___lmul@multiplier+1
  6087  04D7  0844               	movf	_bbtu^(0+128),w
  6088  04D8  277C  3180         	fcall	PL26	;call to abstracted procedure
  6089  04DA  25DE  3180         	fcall	___lmul
  6090  04DC  2742  3180         	fcall	PL2	;call to abstracted procedure
  6091  04DE  2572  3180         	fcall	___aldiv
  6092  04E0  0827               	movf	?___aldiv+3,w
  6093  04E1  0021               	movlb	1	; select bank1
  6094  04E2  00B3               	movwf	(_PidTi+3)^(0+128)
  6095  04E3  0020               	movlb	0	; select bank0
  6096  04E4  0826               	movf	?___aldiv+2,w
  6097  04E5  0021               	movlb	1	; select bank1
  6098  04E6  00B2               	movwf	(_PidTi+2)^(0+128)
  6099  04E7  0020               	movlb	0	; select bank0
  6100  04E8  0825               	movf	?___aldiv+1,w
  6101  04E9  0021               	movlb	1	; select bank1
  6102  04EA  00B1               	movwf	(_PidTi+1)^(0+128)
  6103  04EB  0020               	movlb	0	; select bank0
  6104  04EC  0824               	movf	?___aldiv,w
  6105  04ED  0021               	movlb	1	; select bank1
  6106  04EE  00B0               	movwf	_PidTi^(0+128)
  6107                           
  6108                           ;sample.c: 261: PidTd=bbtu/8;
  6109  04EF  3008               	movlw	8
  6110  04F0  0020               	movlb	0	; select bank0
  6111  04F1  00A4               	movwf	___aldiv@divisor
  6112  04F2  01A5               	clrf	___aldiv@divisor+1
  6113  04F3  274B  3180         	fcall	PL4	;call to abstracted procedure
  6114  04F5  2572  3180         	fcall	___aldiv
  6115  04F7  0827               	movf	?___aldiv+3,w
  6116  04F8  0021               	movlb	1	; select bank1
  6117  04F9  00AF               	movwf	(_PidTd+3)^(0+128)
  6118  04FA  0020               	movlb	0	; select bank0
  6119  04FB  0826               	movf	?___aldiv+2,w
  6120  04FC  0021               	movlb	1	; select bank1
  6121  04FD  00AE               	movwf	(_PidTd+2)^(0+128)
  6122  04FE  0020               	movlb	0	; select bank0
  6123  04FF  0825               	movf	?___aldiv+1,w
  6124  0500  0021               	movlb	1	; select bank1
  6125  0501  00AD               	movwf	(_PidTd+1)^(0+128)
  6126  0502  0020               	movlb	0	; select bank0
  6127  0503  0824               	movf	?___aldiv,w
  6128  0504  0021               	movlb	1	; select bank1
  6129  0505  00AC               	movwf	_PidTd^(0+128)
  6130                           
  6131                           ;sample.c: 262: pidBbSm=5;
  6132  0506  3005               	movlw	5
  6133  0507                     L6:	
  6134  0507  0020               	movlb	0	; select bank0
  6135  0508                     L5:	
  6136  0508  00E3               	movwf	_pidBbSm
  6137                           
  6138                           ;sample.c: 263: break;
  6139  0509  2D14               	goto	l4151
  6140  050A                     l4149:	
  6141  050A  0863               	movf	_pidBbSm,w
  6142                           
  6143                           ; Switch size 1, requested type "space"
  6144                           ; Number of cases is 6, Range of values is 0 to 5
  6145                           ; switch strategies available:
  6146                           ; Name         Instructions Cycles
  6147                           ; direct_byte           18     6 (fixed)
  6148                           ; simple_byte           19    10 (average)
  6149                           ; jumptable            260     6 (fixed)
  6150                           ;	Chosen strategy is direct_byte
  6151  050B  0084               	movwf	4
  6152  050C  3006               	movlw	6
  6153  050D  0204               	subwf	4,w
  6154  050E  1803               	skipnc
  6155  050F  2D14               	goto	l4151
  6156  0510  3188               	movlp	high S4417
  6157  0511  3504               	lslf	4,w
  6158  0512  3E00               	addlw	low S4417
  6159  0513  0082               	movwf	2
  6160  0514                     l4151:	
  6161                           
  6162                           ;sample.c: 265: if(pidTestNum>2){
  6163  0514  3003               	movlw	3
  6164  0515  0264               	subwf	_pidTestNum,w
  6165  0516  1C03               	skipc
  6166  0517  0008               	return
  6167                           
  6168                           ;sample.c: 266: if(bbmax<t32)bbmax=t32;
  6169  0518  0021               	movlb	1	; select bank1
  6170  0519  0853               	movf	(_bbmax+3)^(0+128),w
  6171  051A  3A80               	xorlw	128
  6172  051B  00F9               	movwf	??_pid_pwm1_idrv_b_b
  6173  051C  0020               	movlb	0	; select bank0
  6174  051D  0835               	movf	pid_pwm1_idrv_b_b@t32+3,w
  6175  051E  3A80               	xorlw	128
  6176  051F  0279               	subwf	??_pid_pwm1_idrv_b_b,w
  6177  0520  0021               	movlb	1	; select bank1
  6178  0521  1D03               	skipz
  6179  0522  2D33               	goto	u2843
  6180  0523  0020               	movlb	0	; select bank0
  6181  0524  0834               	movf	pid_pwm1_idrv_b_b@t32+2,w
  6182  0525  0021               	movlb	1	; select bank1
  6183  0526  0252               	subwf	(_bbmax+2)^(0+128),w
  6184  0527  1D03               	skipz
  6185  0528  2D33               	goto	u2843
  6186  0529  0020               	movlb	0	; select bank0
  6187  052A  0833               	movf	pid_pwm1_idrv_b_b@t32+1,w
  6188  052B  0021               	movlb	1	; select bank1
  6189  052C  0251               	subwf	(_bbmax+1)^(0+128),w
  6190  052D  1D03               	skipz
  6191  052E  2D33               	goto	u2843
  6192  052F  0020               	movlb	0	; select bank0
  6193  0530  0832               	movf	pid_pwm1_idrv_b_b@t32,w
  6194  0531  0021               	movlb	1	; select bank1
  6195  0532  0250               	subwf	_bbmax^(0+128),w
  6196  0533                     u2843:	
  6197  0533  1803               	skipnc
  6198  0534  2D45               	goto	l654
  6199  0535  0020               	movlb	0	; select bank0
  6200  0536  0835               	movf	pid_pwm1_idrv_b_b@t32+3,w
  6201  0537  0021               	movlb	1	; select bank1
  6202  0538  00D3               	movwf	(_bbmax+3)^(0+128)
  6203  0539  0020               	movlb	0	; select bank0
  6204  053A  0834               	movf	pid_pwm1_idrv_b_b@t32+2,w
  6205  053B  0021               	movlb	1	; select bank1
  6206  053C  00D2               	movwf	(_bbmax+2)^(0+128)
  6207  053D  0020               	movlb	0	; select bank0
  6208  053E  0833               	movf	pid_pwm1_idrv_b_b@t32+1,w
  6209  053F  0021               	movlb	1	; select bank1
  6210  0540  00D1               	movwf	(_bbmax+1)^(0+128)
  6211  0541  0020               	movlb	0	; select bank0
  6212  0542  0832               	movf	pid_pwm1_idrv_b_b@t32,w
  6213  0543  0021               	movlb	1	; select bank1
  6214  0544  00D0               	movwf	_bbmax^(0+128)
  6215  0545                     l654:	
  6216                           
  6217                           ;sample.c: 267: if(bbmin>t32)bbmin=t32;
  6218  0545  0020               	movlb	0	; select bank0
  6219  0546  0835               	movf	pid_pwm1_idrv_b_b@t32+3,w
  6220  0547  3A80               	xorlw	128
  6221  0548  00F9               	movwf	??_pid_pwm1_idrv_b_b
  6222  0549  0021               	movlb	1	; select bank1
  6223  054A  0857               	movf	(_bbmin+3)^(0+128),w
  6224  054B  3A80               	xorlw	128
  6225  054C  0279               	subwf	??_pid_pwm1_idrv_b_b,w
  6226  054D  0020               	movlb	0	; select bank0
  6227  054E  1D03               	skipz
  6228  054F  2D60               	goto	u2853
  6229  0550  0021               	movlb	1	; select bank1
  6230  0551  0856               	movf	(_bbmin+2)^(0+128),w
  6231  0552  0020               	movlb	0	; select bank0
  6232  0553  0234               	subwf	pid_pwm1_idrv_b_b@t32+2,w
  6233  0554  1D03               	skipz
  6234  0555  2D60               	goto	u2853
  6235  0556  0021               	movlb	1	; select bank1
  6236  0557  0855               	movf	(_bbmin+1)^(0+128),w
  6237  0558  0020               	movlb	0	; select bank0
  6238  0559  0233               	subwf	pid_pwm1_idrv_b_b@t32+1,w
  6239  055A  1D03               	skipz
  6240  055B  2D60               	goto	u2853
  6241  055C  0021               	movlb	1	; select bank1
  6242  055D  0854               	movf	_bbmin^(0+128),w
  6243  055E  0020               	movlb	0	; select bank0
  6244  055F  0232               	subwf	pid_pwm1_idrv_b_b@t32,w
  6245  0560                     u2853:	
  6246  0560  1803               	skipnc
  6247  0561  0008               	return
  6248  0562  0835               	movf	pid_pwm1_idrv_b_b@t32+3,w
  6249  0563  0021               	movlb	1	; select bank1
  6250  0564  00D7               	movwf	(_bbmin+3)^(0+128)
  6251  0565  0020               	movlb	0	; select bank0
  6252  0566  0834               	movf	pid_pwm1_idrv_b_b@t32+2,w
  6253  0567  0021               	movlb	1	; select bank1
  6254  0568  00D6               	movwf	(_bbmin+2)^(0+128)
  6255  0569  0020               	movlb	0	; select bank0
  6256  056A  0833               	movf	pid_pwm1_idrv_b_b@t32+1,w
  6257  056B  0021               	movlb	1	; select bank1
  6258  056C  00D5               	movwf	(_bbmin+1)^(0+128)
  6259  056D  0020               	movlb	0	; select bank0
  6260  056E  0832               	movf	pid_pwm1_idrv_b_b@t32,w
  6261  056F  0021               	movlb	1	; select bank1
  6262  0570  00D4               	movwf	_bbmin^(0+128)
  6263  0571                     l643:	
  6264  0571  0008               	return
  6265  0572                     __end_of_pid_pwm1_idrv_b_b:	
  6266  0572                     __ptext32:	
  6267 ;; *************** function ___aldiv *****************
  6268 ;; Defined at:
  6269 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  6270 ;; Parameters:    Size  Location     Type
  6271 ;;  divisor         4    4[BANK0 ] long 
  6272 ;;  dividend        4    8[BANK0 ] long 
  6273 ;; Auto vars:     Size  Location     Type
  6274 ;;  quotient        4   14[BANK0 ] long 
  6275 ;;  sign            1   13[BANK0 ] unsigned char 
  6276 ;;  counter         1   12[BANK0 ] unsigned char 
  6277 ;; Return value:  Size  Location     Type
  6278 ;;                  4    4[BANK0 ] long 
  6279 ;; Registers used:
  6280 ;;		wreg, status,2, status,0
  6281 ;; Tracked objects:
  6282 ;;		On entry : 1F/0
  6283 ;;		On exit  : 1F/0
  6284 ;;		Unchanged: 0/0
  6285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6286 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6287 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6289 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6290 ;;Total ram usage:       14 bytes
  6291 ;; Hardware stack levels used:    1
  6292 ;; Hardware stack levels required when called:    1
  6293 ;; This function calls:
  6294 ;;		Nothing
  6295 ;; This function is called by:
  6296 ;;		_pid_pwm1_idrv_b_b
  6297 ;;		_pid_pwm1_idrv_run
  6298 ;;		_calc_expect_vout_adc_value
  6299 ;; This function uses a non-reentrant model
  6300 ;;
  6301                           
  6302                           
  6303                           ;psect for function ___aldiv
  6304  0572                     ___aldiv:	
  6305                           
  6306                           ;incstack = 0
  6307                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  6308  0572  01AD               	clrf	___aldiv@sign
  6309  0573  1FA7               	btfss	___aldiv@divisor+3,7
  6310  0574  2D82               	goto	l1146
  6311  0575  09A4               	comf	___aldiv@divisor,f
  6312  0576  09A5               	comf	___aldiv@divisor+1,f
  6313  0577  09A6               	comf	___aldiv@divisor+2,f
  6314  0578  09A7               	comf	___aldiv@divisor+3,f
  6315  0579  0AA4               	incf	___aldiv@divisor,f
  6316  057A  1903               	skipnz
  6317  057B  0AA5               	incf	___aldiv@divisor+1,f
  6318  057C  1903               	skipnz
  6319  057D  0AA6               	incf	___aldiv@divisor+2,f
  6320  057E  1903               	skipnz
  6321  057F  0AA7               	incf	___aldiv@divisor+3,f
  6322  0580  01AD               	clrf	___aldiv@sign
  6323  0581  0AAD               	incf	___aldiv@sign,f
  6324  0582                     l1146:	
  6325  0582  1FAB               	btfss	___aldiv@dividend+3,7
  6326  0583  2D91               	goto	l4031
  6327  0584  09A8               	comf	___aldiv@dividend,f
  6328  0585  09A9               	comf	___aldiv@dividend+1,f
  6329  0586  09AA               	comf	___aldiv@dividend+2,f
  6330  0587  09AB               	comf	___aldiv@dividend+3,f
  6331  0588  0AA8               	incf	___aldiv@dividend,f
  6332  0589  1903               	skipnz
  6333  058A  0AA9               	incf	___aldiv@dividend+1,f
  6334  058B  1903               	skipnz
  6335  058C  0AAA               	incf	___aldiv@dividend+2,f
  6336  058D  1903               	skipnz
  6337  058E  0AAB               	incf	___aldiv@dividend+3,f
  6338  058F  3001               	movlw	1
  6339  0590  06AD               	xorwf	___aldiv@sign,f
  6340  0591                     l4031:	
  6341  0591  01AE               	clrf	___aldiv@quotient
  6342  0592  01AF               	clrf	___aldiv@quotient+1
  6343  0593  01B0               	clrf	___aldiv@quotient+2
  6344  0594  01B1               	clrf	___aldiv@quotient+3
  6345  0595  0827               	movf	___aldiv@divisor+3,w
  6346  0596  0426               	iorwf	___aldiv@divisor+2,w
  6347  0597  0425               	iorwf	___aldiv@divisor+1,w
  6348  0598  0424               	iorwf	___aldiv@divisor,w
  6349  0599  1903               	skipnz
  6350  059A  2DC7               	goto	l4053
  6351  059B  01AC               	clrf	___aldiv@counter
  6352  059C                     L8:	
  6353  059C  0AAC               	incf	___aldiv@counter,f
  6354  059D  1BA7               	btfsc	___aldiv@divisor+3,7
  6355  059E  2DA4               	goto	l4041
  6356  059F  35A4               	lslf	___aldiv@divisor,f
  6357  05A0  0DA5               	rlf	___aldiv@divisor+1,f
  6358  05A1  0DA6               	rlf	___aldiv@divisor+2,f
  6359  05A2  0DA7               	rlf	___aldiv@divisor+3,f
  6360  05A3  2D9C               	goto	L8
  6361  05A4                     l4041:	
  6362  05A4  35AE               	lslf	___aldiv@quotient,f
  6363  05A5  0DAF               	rlf	___aldiv@quotient+1,f
  6364  05A6  0DB0               	rlf	___aldiv@quotient+2,f
  6365  05A7  0DB1               	rlf	___aldiv@quotient+3,f
  6366  05A8  0827               	movf	___aldiv@divisor+3,w
  6367  05A9  022B               	subwf	___aldiv@dividend+3,w
  6368  05AA  1D03               	skipz
  6369  05AB  2DB6               	goto	u2735
  6370  05AC  0826               	movf	___aldiv@divisor+2,w
  6371  05AD  022A               	subwf	___aldiv@dividend+2,w
  6372  05AE  1D03               	skipz
  6373  05AF  2DB6               	goto	u2735
  6374  05B0  0825               	movf	___aldiv@divisor+1,w
  6375  05B1  0229               	subwf	___aldiv@dividend+1,w
  6376  05B2  1D03               	skipz
  6377  05B3  2DB6               	goto	u2735
  6378  05B4  0824               	movf	___aldiv@divisor,w
  6379  05B5  0228               	subwf	___aldiv@dividend,w
  6380  05B6                     u2735:	
  6381  05B6  1C03               	skipc
  6382  05B7  2DC1               	goto	l4049
  6383  05B8  0824               	movf	___aldiv@divisor,w
  6384  05B9  02A8               	subwf	___aldiv@dividend,f
  6385  05BA  0825               	movf	___aldiv@divisor+1,w
  6386  05BB  3BA9               	subwfb	___aldiv@dividend+1,f
  6387  05BC  0826               	movf	___aldiv@divisor+2,w
  6388  05BD  3BAA               	subwfb	___aldiv@dividend+2,f
  6389  05BE  0827               	movf	___aldiv@divisor+3,w
  6390  05BF  3BAB               	subwfb	___aldiv@dividend+3,f
  6391  05C0  142E               	bsf	___aldiv@quotient,0
  6392  05C1                     l4049:	
  6393  05C1  36A7               	lsrf	___aldiv@divisor+3,f
  6394  05C2  0CA6               	rrf	___aldiv@divisor+2,f
  6395  05C3  0CA5               	rrf	___aldiv@divisor+1,f
  6396  05C4  0CA4               	rrf	___aldiv@divisor,f
  6397  05C5  0BAC               	decfsz	___aldiv@counter,f
  6398  05C6  2DA4               	goto	l4041
  6399  05C7                     l4053:	
  6400  05C7  082D               	movf	___aldiv@sign,w
  6401  05C8  1903               	btfsc	3,2
  6402  05C9  2DD5               	goto	l4057
  6403  05CA  09AE               	comf	___aldiv@quotient,f
  6404  05CB  09AF               	comf	___aldiv@quotient+1,f
  6405  05CC  09B0               	comf	___aldiv@quotient+2,f
  6406  05CD  09B1               	comf	___aldiv@quotient+3,f
  6407  05CE  0AAE               	incf	___aldiv@quotient,f
  6408  05CF  1903               	skipnz
  6409  05D0  0AAF               	incf	___aldiv@quotient+1,f
  6410  05D1  1903               	skipnz
  6411  05D2  0AB0               	incf	___aldiv@quotient+2,f
  6412  05D3  1903               	skipnz
  6413  05D4  0AB1               	incf	___aldiv@quotient+3,f
  6414  05D5                     l4057:	
  6415  05D5  0831               	movf	___aldiv@quotient+3,w
  6416  05D6  00A7               	movwf	?___aldiv+3
  6417  05D7  0830               	movf	___aldiv@quotient+2,w
  6418  05D8  00A6               	movwf	?___aldiv+2
  6419  05D9  082F               	movf	___aldiv@quotient+1,w
  6420  05DA  00A5               	movwf	?___aldiv+1
  6421  05DB  082E               	movf	___aldiv@quotient,w
  6422  05DC  00A4               	movwf	?___aldiv
  6423  05DD  0008               	return
  6424  05DE                     __end_of___aldiv:	
  6425  05DE                     __ptext34:	
  6426 ;; *************** function ___lmul *****************
  6427 ;; Defined at:
  6428 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
  6429 ;; Parameters:    Size  Location     Type
  6430 ;;  multiplier      4    1[COMMON] unsigned long 
  6431 ;;  multiplicand    4    5[COMMON] unsigned long 
  6432 ;; Auto vars:     Size  Location     Type
  6433 ;;  product         4    0[BANK0 ] unsigned long 
  6434 ;; Return value:  Size  Location     Type
  6435 ;;                  4    1[COMMON] unsigned long 
  6436 ;; Registers used:
  6437 ;;		wreg, status,2, status,0
  6438 ;; Tracked objects:
  6439 ;;		On entry : 1E/0
  6440 ;;		On exit  : 1F/0
  6441 ;;		Unchanged: 0/0
  6442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6443 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6444 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6446 ;;      Totals:         8       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6447 ;;Total ram usage:       12 bytes
  6448 ;; Hardware stack levels used:    1
  6449 ;; Hardware stack levels required when called:    1
  6450 ;; This function calls:
  6451 ;;		Nothing
  6452 ;; This function is called by:
  6453 ;;		_calc_temp_rs
  6454 ;;		_calc_temp_rc
  6455 ;;		_pid_pwm1_idrv_b_b
  6456 ;;		_pid_pwm1_idrv_run
  6457 ;;		_calc_expect_vout_adc_value
  6458 ;;		_cal_rs_simulate_power
  6459 ;; This function uses a non-reentrant model
  6460 ;;
  6461                           
  6462                           
  6463                           ;psect for function ___lmul
  6464  05DE                     ___lmul:	
  6465                           
  6466                           ;incstack = 0
  6467                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  6468  05DE  0020               	movlb	0	; select bank0
  6469  05DF  01A0               	clrf	___lmul@product
  6470  05E0  01A1               	clrf	___lmul@product+1
  6471  05E1  01A2               	clrf	___lmul@product+2
  6472  05E2  01A3               	clrf	___lmul@product+3
  6473  05E3                     l1102:	
  6474  05E3  1C71               	btfss	___lmul@multiplier,0
  6475  05E4  2DEE               	goto	l4013
  6476  05E5  0875               	movf	___lmul@multiplicand,w
  6477  05E6  0020               	movlb	0	; select bank0
  6478  05E7  07A0               	addwf	___lmul@product,f
  6479  05E8  0876               	movf	___lmul@multiplicand+1,w
  6480  05E9  3DA1               	addwfc	___lmul@product+1,f
  6481  05EA  0877               	movf	___lmul@multiplicand+2,w
  6482  05EB  3DA2               	addwfc	___lmul@product+2,f
  6483  05EC  0878               	movf	___lmul@multiplicand+3,w
  6484  05ED  3DA3               	addwfc	___lmul@product+3,f
  6485  05EE                     l4013:	
  6486  05EE  35F5               	lslf	___lmul@multiplicand,f
  6487  05EF  0DF6               	rlf	___lmul@multiplicand+1,f
  6488  05F0  0DF7               	rlf	___lmul@multiplicand+2,f
  6489  05F1  0DF8               	rlf	___lmul@multiplicand+3,f
  6490  05F2  36F4               	lsrf	___lmul@multiplier+3,f
  6491  05F3  0CF3               	rrf	___lmul@multiplier+2,f
  6492  05F4  0CF2               	rrf	___lmul@multiplier+1,f
  6493  05F5  0CF1               	rrf	___lmul@multiplier,f
  6494  05F6  0874               	movf	___lmul@multiplier+3,w
  6495  05F7  0473               	iorwf	___lmul@multiplier+2,w
  6496  05F8  0472               	iorwf	___lmul@multiplier+1,w
  6497  05F9  0471               	iorwf	___lmul@multiplier,w
  6498  05FA  1D03               	skipz
  6499  05FB  2DE3               	goto	l1102
  6500  05FC  0020               	movlb	0	; select bank0
  6501  05FD  0823               	movf	___lmul@product+3,w
  6502  05FE  00F4               	movwf	?___lmul+3
  6503  05FF  0822               	movf	___lmul@product+2,w
  6504  0600  00F3               	movwf	?___lmul+2
  6505  0601  0821               	movf	___lmul@product+1,w
  6506  0602  00F2               	movwf	?___lmul+1
  6507  0603  0820               	movf	___lmul@product,w
  6508  0604  00F1               	movwf	?___lmul
  6509  0605  0008               	return
  6510  0606                     __end_of___lmul:	
  6511  0606                     __ptext29:	
  6512 ;; *************** function _calc_temp_rc *****************
  6513 ;; Defined at:
  6514 ;;		line 180 in file "src/api/sample.c"
  6515 ;; Parameters:    Size  Location     Type
  6516 ;;		None
  6517 ;; Auto vars:     Size  Location     Type
  6518 ;;  y               4   17[BANK0 ] unsigned long 
  6519 ;;  x               4   13[BANK0 ] unsigned long 
  6520 ;; Return value:  Size  Location     Type
  6521 ;;                  4    5[BANK0 ] unsigned long 
  6522 ;; Registers used:
  6523 ;;		wreg, status,2, status,0, pclath, cstack
  6524 ;; Tracked objects:
  6525 ;;		On entry : 1F/0
  6526 ;;		On exit  : 1F/0
  6527 ;;		Unchanged: 0/0
  6528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6529 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6530 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6531 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6532 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6533 ;;Total ram usage:       16 bytes
  6534 ;; Hardware stack levels used:    1
  6535 ;; Hardware stack levels required when called:    2
  6536 ;; This function calls:
  6537 ;;		___lldiv
  6538 ;;		___lmul
  6539 ;; This function is called by:
  6540 ;;		_main
  6541 ;; This function uses a non-reentrant model
  6542 ;;
  6543                           
  6544                           
  6545                           ;psect for function _calc_temp_rc
  6546  0606                     _calc_temp_rc:	
  6547                           
  6548                           ;sample.c: 183: uint32_t x,y;
  6549                           ;sample.c: 184: x=300000UL;
  6550                           
  6551                           ;incstack = 0
  6552                           ; Regs used in _calc_temp_rc: [wreg+status,2+status,0+pclath+cstack]
  6553  0606  3004               	movlw	4
  6554  0607  01B0               	clrf	calc_temp_rc@x+3
  6555  0608  00AF               	movwf	calc_temp_rc@x+2
  6556  0609  3093               	movlw	147
  6557  060A  00AE               	movwf	calc_temp_rc@x+1
  6558  060B  30E0               	movlw	224
  6559  060C  00AD               	movwf	calc_temp_rc@x
  6560                           
  6561                           ;sample.c: 185: x=x*rtAdcValueRcLo;
  6562  060D  0857               	movf	_rtAdcValueRcLo,w
  6563  060E  00F1               	movwf	___lmul@multiplier
  6564  060F  0858               	movf	_rtAdcValueRcLo+1,w
  6565  0610  00F2               	movwf	___lmul@multiplier+1
  6566  0611  01F3               	clrf	___lmul@multiplier+2
  6567  0612  01F4               	clrf	___lmul@multiplier+3
  6568  0613  0830               	movf	calc_temp_rc@x+3,w
  6569  0614  00F8               	movwf	___lmul@multiplicand+3
  6570  0615  082F               	movf	calc_temp_rc@x+2,w
  6571  0616  00F7               	movwf	___lmul@multiplicand+2
  6572  0617  082E               	movf	calc_temp_rc@x+1,w
  6573  0618  00F6               	movwf	___lmul@multiplicand+1
  6574  0619  082D               	movf	calc_temp_rc@x,w
  6575  061A  00F5               	movwf	___lmul@multiplicand
  6576  061B  25DE  3180         	fcall	___lmul
  6577  061D  0874               	movf	?___lmul+3,w
  6578  061E  00B0               	movwf	calc_temp_rc@x+3
  6579  061F  0873               	movf	?___lmul+2,w
  6580  0620  00AF               	movwf	calc_temp_rc@x+2
  6581  0621  0872               	movf	?___lmul+1,w
  6582  0622  00AE               	movwf	calc_temp_rc@x+1
  6583  0623  0871               	movf	?___lmul,w
  6584  0624  00AD               	movwf	calc_temp_rc@x
  6585                           
  6586                           ;sample.c: 188: y=rtAdcValueRcHi;
  6587  0625  0855               	movf	_rtAdcValueRcHi,w
  6588  0626  00B1               	movwf	calc_temp_rc@y
  6589  0627  0856               	movf	_rtAdcValueRcHi+1,w
  6590  0628  00B2               	movwf	calc_temp_rc@y+1
  6591  0629  300C               	movlw	12
  6592  062A  01B3               	clrf	calc_temp_rc@y+2
  6593  062B  01B4               	clrf	calc_temp_rc@y+3
  6594                           
  6595                           ;sample.c: 189: y=y*3140;
  6596  062C  01F4               	clrf	___lmul@multiplier+3
  6597  062D  01F3               	clrf	___lmul@multiplier+2
  6598  062E  00F2               	movwf	___lmul@multiplier+1
  6599  062F  3044               	movlw	68
  6600  0630  00F1               	movwf	___lmul@multiplier
  6601  0631  0834               	movf	calc_temp_rc@y+3,w
  6602  0632  00F8               	movwf	___lmul@multiplicand+3
  6603  0633  0833               	movf	calc_temp_rc@y+2,w
  6604  0634  00F7               	movwf	___lmul@multiplicand+2
  6605  0635  0832               	movf	calc_temp_rc@y+1,w
  6606  0636  00F6               	movwf	___lmul@multiplicand+1
  6607  0637  0831               	movf	calc_temp_rc@y,w
  6608  0638  00F5               	movwf	___lmul@multiplicand
  6609  0639  25DE  3180         	fcall	___lmul
  6610  063B  0874               	movf	?___lmul+3,w
  6611  063C  00B4               	movwf	calc_temp_rc@y+3
  6612  063D  0873               	movf	?___lmul+2,w
  6613  063E  00B3               	movwf	calc_temp_rc@y+2
  6614  063F  0872               	movf	?___lmul+1,w
  6615  0640  00B2               	movwf	calc_temp_rc@y+1
  6616  0641  0871               	movf	?___lmul,w
  6617  0642  00B1               	movwf	calc_temp_rc@y
  6618                           
  6619                           ;sample.c: 190: y=y/100;
  6620  0643  3064               	movlw	100
  6621  0644  00F1               	movwf	___lldiv@divisor
  6622  0645  01F2               	clrf	___lldiv@divisor+1
  6623  0646  01F3               	clrf	___lldiv@divisor+2
  6624  0647  01F4               	clrf	___lldiv@divisor+3
  6625  0648  0834               	movf	calc_temp_rc@y+3,w
  6626  0649  00F8               	movwf	___lldiv@dividend+3
  6627  064A  0833               	movf	calc_temp_rc@y+2,w
  6628  064B  00F7               	movwf	___lldiv@dividend+2
  6629  064C  0832               	movf	calc_temp_rc@y+1,w
  6630  064D  00F6               	movwf	___lldiv@dividend+1
  6631  064E  0831               	movf	calc_temp_rc@y,w
  6632  064F  00F5               	movwf	___lldiv@dividend
  6633  0650  26A3  3180         	fcall	___lldiv
  6634  0652  2773  3180         	fcall	PL20	;call to abstracted procedure
  6635                           
  6636                           ;sample.c: 191: y=y-rtAdcValueRcLo;
  6637  0654  0857               	movf	_rtAdcValueRcLo,w
  6638  0655  00A9               	movwf	??_calc_temp_rc
  6639  0656  0858               	movf	_rtAdcValueRcLo+1,w
  6640  0657  00AA               	movwf	??_calc_temp_rc+1
  6641  0658  01AB               	clrf	??_calc_temp_rc+2
  6642  0659  01AC               	clrf	??_calc_temp_rc+3
  6643  065A  0829               	movf	??_calc_temp_rc,w
  6644  065B  02B1               	subwf	calc_temp_rc@y,f
  6645  065C  082A               	movf	??_calc_temp_rc+1,w
  6646  065D  3BB2               	subwfb	calc_temp_rc@y+1,f
  6647  065E  082B               	movf	??_calc_temp_rc+2,w
  6648  065F  3BB3               	subwfb	calc_temp_rc@y+2,f
  6649  0660  082C               	movf	??_calc_temp_rc+3,w
  6650  0661  3BB4               	subwfb	calc_temp_rc@y+3,f
  6651                           
  6652                           ;sample.c: 194: y=x/y;
  6653  0662  0834               	movf	calc_temp_rc@y+3,w
  6654  0663  00F4               	movwf	___lldiv@divisor+3
  6655  0664  0833               	movf	calc_temp_rc@y+2,w
  6656  0665  00F3               	movwf	___lldiv@divisor+2
  6657  0666  0832               	movf	calc_temp_rc@y+1,w
  6658  0667  00F2               	movwf	___lldiv@divisor+1
  6659  0668  0831               	movf	calc_temp_rc@y,w
  6660  0669  00F1               	movwf	___lldiv@divisor
  6661  066A  0830               	movf	calc_temp_rc@x+3,w
  6662  066B  00F8               	movwf	___lldiv@dividend+3
  6663  066C  082F               	movf	calc_temp_rc@x+2,w
  6664  066D  00F7               	movwf	___lldiv@dividend+2
  6665  066E  082E               	movf	calc_temp_rc@x+1,w
  6666  066F  00F6               	movwf	___lldiv@dividend+1
  6667  0670  082D               	movf	calc_temp_rc@x,w
  6668  0671  00F5               	movwf	___lldiv@dividend
  6669  0672  26A3  3180         	fcall	___lldiv
  6670  0674  2773  3180         	fcall	PL20	;call to abstracted procedure
  6671                           
  6672                           ;sample.c: 195: if(y<2000)y=2000;
  6673  0676  0834               	movf	calc_temp_rc@y+3,w
  6674  0677  1D03               	btfss	3,2
  6675  0678  2E88               	goto	l4095
  6676  0679  0833               	movf	calc_temp_rc@y+2,w
  6677  067A  1D03               	btfss	3,2
  6678  067B  2E88               	goto	l4095
  6679  067C  30D0               	movlw	208
  6680  067D  0231               	subwf	calc_temp_rc@y,w
  6681  067E  3007               	movlw	7
  6682  067F  3B32               	subwfb	calc_temp_rc@y+1,w
  6683  0680  1803               	btfsc	3,0
  6684  0681  2E88               	goto	l4095
  6685  0682  3007               	movlw	7
  6686  0683  01B4               	clrf	calc_temp_rc@y+3
  6687  0684  01B3               	clrf	calc_temp_rc@y+2
  6688  0685  00B2               	movwf	calc_temp_rc@y+1
  6689  0686  30D0               	movlw	208
  6690  0687  00B1               	movwf	calc_temp_rc@y
  6691  0688                     l4095:	
  6692                           
  6693                           ;sample.c: 196: if(y>25000)y=25000;
  6694  0688  0834               	movf	calc_temp_rc@y+3,w
  6695  0689  1D03               	btfss	3,2
  6696  068A  2E94               	goto	l4097
  6697  068B  0833               	movf	calc_temp_rc@y+2,w
  6698  068C  1D03               	btfss	3,2
  6699  068D  2E94               	goto	l4097
  6700  068E  30A9               	movlw	169
  6701  068F  0231               	subwf	calc_temp_rc@y,w
  6702  0690  3061               	movlw	97
  6703  0691  3B32               	subwfb	calc_temp_rc@y+1,w
  6704  0692  1C03               	btfss	3,0
  6705  0693  2E9A               	goto	l619
  6706  0694                     l4097:	
  6707  0694  3061               	movlw	97
  6708  0695  01B4               	clrf	calc_temp_rc@y+3
  6709  0696  01B3               	clrf	calc_temp_rc@y+2
  6710  0697  00B2               	movwf	calc_temp_rc@y+1
  6711  0698  30A8               	movlw	168
  6712  0699  00B1               	movwf	calc_temp_rc@y
  6713  069A                     l619:	
  6714                           
  6715                           ;sample.c: 198: return y;
  6716  069A  0834               	movf	calc_temp_rc@y+3,w
  6717  069B  00A8               	movwf	?_calc_temp_rc+3
  6718  069C  0833               	movf	calc_temp_rc@y+2,w
  6719  069D  00A7               	movwf	?_calc_temp_rc+2
  6720  069E  0832               	movf	calc_temp_rc@y+1,w
  6721  069F  00A6               	movwf	?_calc_temp_rc+1
  6722  06A0  0831               	movf	calc_temp_rc@y,w
  6723  06A1  00A5               	movwf	?_calc_temp_rc
  6724  06A2  0008               	return
  6725  06A3                     __end_of_calc_temp_rc:	
  6726  06A3                     __ptext30:	
  6727 ;; *************** function ___lldiv *****************
  6728 ;; Defined at:
  6729 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lldiv.c"
  6730 ;; Parameters:    Size  Location     Type
  6731 ;;  divisor         4    1[COMMON] unsigned long 
  6732 ;;  dividend        4    5[COMMON] unsigned long 
  6733 ;; Auto vars:     Size  Location     Type
  6734 ;;  quotient        4    0[BANK0 ] unsigned long 
  6735 ;;  counter         1    4[BANK0 ] unsigned char 
  6736 ;; Return value:  Size  Location     Type
  6737 ;;                  4    1[COMMON] unsigned long 
  6738 ;; Registers used:
  6739 ;;		wreg, status,2, status,0
  6740 ;; Tracked objects:
  6741 ;;		On entry : 1F/0
  6742 ;;		On exit  : 1F/0
  6743 ;;		Unchanged: 0/0
  6744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6745 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6746 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6748 ;;      Totals:         8       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6749 ;;Total ram usage:       13 bytes
  6750 ;; Hardware stack levels used:    1
  6751 ;; Hardware stack levels required when called:    1
  6752 ;; This function calls:
  6753 ;;		Nothing
  6754 ;; This function is called by:
  6755 ;;		_calc_temp_rs
  6756 ;;		_calc_temp_rc
  6757 ;; This function uses a non-reentrant model
  6758 ;;
  6759                           
  6760                           
  6761                           ;psect for function ___lldiv
  6762  06A3                     ___lldiv:	
  6763                           
  6764                           ;incstack = 0
  6765                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  6766  06A3  01A0               	clrf	___lldiv@quotient
  6767  06A4  01A1               	clrf	___lldiv@quotient+1
  6768  06A5  01A2               	clrf	___lldiv@quotient+2
  6769  06A6  01A3               	clrf	___lldiv@quotient+3
  6770  06A7  0874               	movf	___lldiv@divisor+3,w
  6771  06A8  0473               	iorwf	___lldiv@divisor+2,w
  6772  06A9  0472               	iorwf	___lldiv@divisor+1,w
  6773  06AA  0471               	iorwf	___lldiv@divisor,w
  6774  06AB  1903               	skipnz
  6775  06AC  2ED9               	goto	l3345
  6776  06AD  01A4               	clrf	___lldiv@counter
  6777  06AE                     L7:	
  6778  06AE  0AA4               	incf	___lldiv@counter,f
  6779  06AF  1BF4               	btfsc	___lldiv@divisor+3,7
  6780  06B0  2EB6               	goto	l3333
  6781  06B1  35F1               	lslf	___lldiv@divisor,f
  6782  06B2  0DF2               	rlf	___lldiv@divisor+1,f
  6783  06B3  0DF3               	rlf	___lldiv@divisor+2,f
  6784  06B4  0DF4               	rlf	___lldiv@divisor+3,f
  6785  06B5  2EAE               	goto	L7
  6786  06B6                     l3333:	
  6787  06B6  35A0               	lslf	___lldiv@quotient,f
  6788  06B7  0DA1               	rlf	___lldiv@quotient+1,f
  6789  06B8  0DA2               	rlf	___lldiv@quotient+2,f
  6790  06B9  0DA3               	rlf	___lldiv@quotient+3,f
  6791  06BA  0874               	movf	___lldiv@divisor+3,w
  6792  06BB  0278               	subwf	___lldiv@dividend+3,w
  6793  06BC  1D03               	skipz
  6794  06BD  2EC8               	goto	u1875
  6795  06BE  0873               	movf	___lldiv@divisor+2,w
  6796  06BF  0277               	subwf	___lldiv@dividend+2,w
  6797  06C0  1D03               	skipz
  6798  06C1  2EC8               	goto	u1875
  6799  06C2  0872               	movf	___lldiv@divisor+1,w
  6800  06C3  0276               	subwf	___lldiv@dividend+1,w
  6801  06C4  1D03               	skipz
  6802  06C5  2EC8               	goto	u1875
  6803  06C6  0871               	movf	___lldiv@divisor,w
  6804  06C7  0275               	subwf	___lldiv@dividend,w
  6805  06C8                     u1875:	
  6806  06C8  1C03               	skipc
  6807  06C9  2ED3               	goto	l3341
  6808  06CA  0871               	movf	___lldiv@divisor,w
  6809  06CB  02F5               	subwf	___lldiv@dividend,f
  6810  06CC  0872               	movf	___lldiv@divisor+1,w
  6811  06CD  3BF6               	subwfb	___lldiv@dividend+1,f
  6812  06CE  0873               	movf	___lldiv@divisor+2,w
  6813  06CF  3BF7               	subwfb	___lldiv@dividend+2,f
  6814  06D0  0874               	movf	___lldiv@divisor+3,w
  6815  06D1  3BF8               	subwfb	___lldiv@dividend+3,f
  6816  06D2  1420               	bsf	___lldiv@quotient,0
  6817  06D3                     l3341:	
  6818  06D3  36F4               	lsrf	___lldiv@divisor+3,f
  6819  06D4  0CF3               	rrf	___lldiv@divisor+2,f
  6820  06D5  0CF2               	rrf	___lldiv@divisor+1,f
  6821  06D6  0CF1               	rrf	___lldiv@divisor,f
  6822  06D7  0BA4               	decfsz	___lldiv@counter,f
  6823  06D8  2EB6               	goto	l3333
  6824  06D9                     l3345:	
  6825  06D9  0823               	movf	___lldiv@quotient+3,w
  6826  06DA  00F4               	movwf	?___lldiv+3
  6827  06DB  0822               	movf	___lldiv@quotient+2,w
  6828  06DC  00F3               	movwf	?___lldiv+2
  6829  06DD  0821               	movf	___lldiv@quotient+1,w
  6830  06DE  00F2               	movwf	?___lldiv+1
  6831  06DF  0820               	movf	___lldiv@quotient,w
  6832  06E0  00F1               	movwf	?___lldiv
  6833  06E1  0008               	return
  6834  06E2                     __end_of___lldiv:	
  6835  06E2                     __ptext26:	
  6836 ;; *************** function _m_mem_cpy_len *****************
  6837 ;; Defined at:
  6838 ;;		line 47 in file "src/depend/m_string.c"
  6839 ;; Parameters:    Size  Location     Type
  6840 ;;  d               2    1[COMMON] PTR unsigned char 
  6841 ;;		 -> crc_verify@expected(2), modbusBuf(64), 
  6842 ;;  s               2    3[COMMON] PTR unsigned char 
  6843 ;;		 -> modbusBuf(64), sysData(52), eusartRxBuffer(64), 
  6844 ;;  len             2    5[COMMON] unsigned int 
  6845 ;; Auto vars:     Size  Location     Type
  6846 ;;		None
  6847 ;; Return value:  Size  Location     Type
  6848 ;;                  1    wreg      void 
  6849 ;; Registers used:
  6850 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6851 ;; Tracked objects:
  6852 ;;		On entry : 1F/0
  6853 ;;		On exit  : 1F/0
  6854 ;;		Unchanged: 1F/0
  6855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6856 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6857 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6858 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6859 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6860 ;;Total ram usage:        7 bytes
  6861 ;; Hardware stack levels used:    1
  6862 ;; Hardware stack levels required when called:    1
  6863 ;; This function calls:
  6864 ;;		Nothing
  6865 ;; This function is called by:
  6866 ;;		_main
  6867 ;;		_crc_verify
  6868 ;; This function uses a non-reentrant model
  6869 ;;
  6870                           
  6871                           
  6872                           ;psect for function _m_mem_cpy_len
  6873  06E2                     _m_mem_cpy_len:	
  6874  06E2                     l2887:	
  6875                           ;m_string.c: 50: while(len)
  6876                           
  6877                           ;incstack = 0
  6878                           ; Regs used in _m_mem_cpy_len: [wreg+fsr1l+fsr1h+status,2+status,0]
  6879                           
  6880  06E2  0875               	movf	m_mem_cpy_len@len,w
  6881  06E3  0476               	iorwf	m_mem_cpy_len@len+1,w
  6882  06E4  1903               	btfsc	3,2
  6883  06E5  0008               	return
  6884                           
  6885                           ;m_string.c: 51: {
  6886                           ;m_string.c: 52: *d++=*s++;
  6887  06E6  0873               	movf	m_mem_cpy_len@s,w
  6888  06E7  0086               	movwf	6
  6889  06E8  0874               	movf	m_mem_cpy_len@s+1,w
  6890  06E9  0087               	movwf	7
  6891  06EA  0801               	movf	1,w
  6892  06EB  00F7               	movwf	??_m_mem_cpy_len
  6893  06EC  0871               	movf	m_mem_cpy_len@d,w
  6894  06ED  0086               	movwf	6
  6895  06EE  0872               	movf	m_mem_cpy_len@d+1,w
  6896  06EF  0087               	movwf	7
  6897  06F0  0877               	movf	??_m_mem_cpy_len,w
  6898  06F1  0081               	movwf	1
  6899  06F2  0AF3               	incf	m_mem_cpy_len@s,f
  6900  06F3  1903               	skipnz
  6901  06F4  0AF4               	incf	m_mem_cpy_len@s+1,f
  6902  06F5  0AF1               	incf	m_mem_cpy_len@d,f
  6903  06F6  1903               	skipnz
  6904  06F7  0AF2               	incf	m_mem_cpy_len@d+1,f
  6905                           
  6906                           ;m_string.c: 53: len--;
  6907  06F8  3001               	movlw	1
  6908  06F9  02F5               	subwf	m_mem_cpy_len@len,f
  6909  06FA  3000               	movlw	0
  6910  06FB  3BF6               	subwfb	m_mem_cpy_len@len+1,f
  6911  06FC  2EE2               	goto	l2887
  6912  06FD                     __end_of_m_mem_cpy_len:	
  6913  06FD                     __ptext16:	
  6914 ;; *************** function _sys_data_save *****************
  6915 ;; Defined at:
  6916 ;;		line 111 in file "src/api/sysData.c"
  6917 ;; Parameters:    Size  Location     Type
  6918 ;;		None
  6919 ;; Auto vars:     Size  Location     Type
  6920 ;;		None
  6921 ;; Return value:  Size  Location     Type
  6922 ;;                  1    wreg      void 
  6923 ;; Registers used:
  6924 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6925 ;; Tracked objects:
  6926 ;;		On entry : 1D/2
  6927 ;;		On exit  : 1F/0
  6928 ;;		Unchanged: 0/0
  6929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6933 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6934 ;;Total ram usage:        0 bytes
  6935 ;; Hardware stack levels used:    1
  6936 ;; Hardware stack levels required when called:    3
  6937 ;; This function calls:
  6938 ;;		_crc_append
  6939 ;;		_my_flash_read_system_erase
  6940 ;;		_my_flash_system_write
  6941 ;; This function is called by:
  6942 ;;		_modbus_response_write_single_register
  6943 ;;		_main
  6944 ;; This function uses a non-reentrant model
  6945 ;;
  6946                           
  6947                           
  6948                           ;psect for function _sys_data_save
  6949  06FD                     _sys_data_save:	
  6950                           
  6951                           ;sysData.c: 113: crc_append((uint8_t*)&sysData,sizeof(sysData_t)-2);
  6952                           
  6953                           ;incstack = 0
  6954                           ; Regs used in _sys_data_save: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6955  06FD  3020               	movlw	low _sysData
  6956  06FE  0020               	movlb	0	; select bank0
  6957  06FF  2789  3180         	fcall	PL30	;call to abstracted procedure
  6958  0701  2708  3180         	fcall	_crc_append
  6959                           
  6960                           ;sysData.c: 114: my_flash_read_system_erase();
  6961  0703  2737  3180         	fcall	_my_flash_read_system_erase
  6962                           
  6963                           ;sysData.c: 115: my_flash_system_write((uint8_t*)&sysData,sizeof(sysData_t));
  6964  0705  2796               	fcall	PL36	;call to abstracted procedure
  6965  0706  318F  2F3A         	ljmp	_my_flash_system_write
  6966  0708                     __end_of_sys_data_save:	
  6967  0708                     __ptext24:	
  6968 ;; *************** function _crc_append *****************
  6969 ;; Defined at:
  6970 ;;		line 143 in file "src/depend/crc16.c"
  6971 ;; Parameters:    Size  Location     Type
  6972 ;;  message         2    0[BANK0 ] PTR unsigned char 
  6973 ;;		 -> modbusBuf(64), sysData(52), 
  6974 ;;  n               2    2[BANK0 ] unsigned int 
  6975 ;; Auto vars:     Size  Location     Type
  6976 ;;  crc             2    9[BANK0 ] unsigned int 
  6977 ;; Return value:  Size  Location     Type
  6978 ;;                  1    wreg      void 
  6979 ;; Registers used:
  6980 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6981 ;; Tracked objects:
  6982 ;;		On entry : 1F/0
  6983 ;;		On exit  : 1F/0
  6984 ;;		Unchanged: 0/0
  6985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6986 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6987 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6988 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6989 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6990 ;;Total ram usage:       11 bytes
  6991 ;; Hardware stack levels used:    1
  6992 ;; Hardware stack levels required when called:    2
  6993 ;; This function calls:
  6994 ;;		_crc_sum
  6995 ;; This function is called by:
  6996 ;;		_sys_data_init
  6997 ;;		_sys_data_save
  6998 ;;		_modbus_response_illgeal_function
  6999 ;;		_modbus_response_write_single_register
  7000 ;;		_modbus_response_command
  7001 ;; This function uses a non-reentrant model
  7002 ;;
  7003                           
  7004                           
  7005                           ;psect for function _crc_append
  7006  0708                     _crc_append:	
  7007                           
  7008                           ;crc16.c: 145: uint16_t crc;
  7009                           ;crc16.c: 146: crc = crc_sum(message, n);
  7010                           
  7011                           ;incstack = 0
  7012                           ; Regs used in _crc_append: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7013  0708  0821               	movf	crc_append@message+1,w
  7014  0709  00F2               	movwf	crc_sum@buf+1
  7015  070A  0820               	movf	crc_append@message,w
  7016  070B  00F1               	movwf	crc_sum@buf
  7017  070C  0823               	movf	crc_append@n+1,w
  7018  070D  00F4               	movwf	crc_sum@len+1
  7019  070E  0822               	movf	crc_append@n,w
  7020  070F  00F3               	movwf	crc_sum@len
  7021  0710  318E  26D5         	fcall	_crc_sum
  7022  0712  0872               	movf	?_crc_sum+1,w
  7023  0713  00AA               	movwf	crc_append@crc+1
  7024  0714  0871               	movf	?_crc_sum,w
  7025  0715  00A9               	movwf	crc_append@crc
  7026                           
  7027                           ;crc16.c: 147: message[n] = (uint8_t)(crc & 0xff);
  7028  0716  0822               	movf	crc_append@n,w
  7029  0717  0720               	addwf	crc_append@message,w
  7030  0718  00A4               	movwf	??_crc_append
  7031  0719  0823               	movf	crc_append@n+1,w
  7032  071A  3D21               	addwfc	crc_append@message+1,w
  7033  071B  00A5               	movwf	??_crc_append+1
  7034  071C  0824               	movf	??_crc_append,w
  7035  071D  0086               	movwf	6
  7036  071E  0825               	movf	??_crc_append+1,w
  7037  071F  0087               	movwf	7
  7038  0720  0829               	movf	crc_append@crc,w
  7039  0721  0081               	movwf	1
  7040                           
  7041                           ;crc16.c: 148: message[n+1] = (uint8_t)((crc >> 8) & 0xff);
  7042  0722  082A               	movf	crc_append@crc+1,w
  7043  0723  00A4               	movwf	??_crc_append
  7044  0724  0822               	movf	crc_append@n,w
  7045  0725  0720               	addwf	crc_append@message,w
  7046  0726  00A5               	movwf	??_crc_append+1
  7047  0727  0823               	movf	crc_append@n+1,w
  7048  0728  3D21               	addwfc	crc_append@message+1,w
  7049  0729  00A6               	movwf	??_crc_append+2
  7050  072A  0825               	movf	??_crc_append+1,w
  7051  072B  3E01               	addlw	1
  7052  072C  00A7               	movwf	??_crc_append+3
  7053  072D  3000               	movlw	0
  7054  072E  3D26               	addwfc	??_crc_append+2,w
  7055  072F  00A8               	movwf	??_crc_append+4
  7056  0730  0827               	movf	??_crc_append+3,w
  7057  0731  0086               	movwf	6
  7058  0732  0828               	movf	??_crc_append+4,w
  7059  0733  0087               	movwf	7
  7060  0734  0824               	movf	??_crc_append,w
  7061  0735  0081               	movwf	1
  7062  0736  0008               	return
  7063  0737                     __end_of_crc_append:	
  7064  0737                     __ptext18:	
  7065 ;; *************** function _my_flash_read_system_erase *****************
  7066 ;; Defined at:
  7067 ;;		line 8 in file "src/api/sysData.c"
  7068 ;; Parameters:    Size  Location     Type
  7069 ;;		None
  7070 ;; Auto vars:     Size  Location     Type
  7071 ;;		None
  7072 ;; Return value:  Size  Location     Type
  7073 ;;                  1    wreg      void 
  7074 ;; Registers used:
  7075 ;;		wreg, status,2, status,0, pclath, cstack
  7076 ;; Tracked objects:
  7077 ;;		On entry : 1F/0
  7078 ;;		On exit  : 1F/3
  7079 ;;		Unchanged: 0/0
  7080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7084 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7085 ;;Total ram usage:        0 bytes
  7086 ;; Hardware stack levels used:    1
  7087 ;; Hardware stack levels required when called:    2
  7088 ;; This function calls:
  7089 ;;		_FLASH_EraseBlock
  7090 ;; This function is called by:
  7091 ;;		_sys_data_init
  7092 ;;		_sys_data_save
  7093 ;; This function uses a non-reentrant model
  7094 ;;
  7095                           
  7096                           
  7097                           ;psect for function _my_flash_read_system_erase
  7098  0737                     _my_flash_read_system_erase:	
  7099                           
  7100                           ;sysData.c: 10: FLASH_EraseBlock(0x1f80);
  7101                           
  7102                           ;incstack = 0
  7103                           ; Regs used in _my_flash_read_system_erase: [wreg+status,2+status,0+pclath+cstack]
  7104  0737  3080               	movlw	128
  7105  0738  00F1               	movwf	FLASH_EraseBlock@startAddr
  7106  0739  301F               	movlw	31
  7107  073A  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  7108  073B  279B  3180         	fcall	_FLASH_EraseBlock
  7109                           
  7110                           ;sysData.c: 11: FLASH_EraseBlock(0x1f80+32);
  7111  073D  30A0               	movlw	160
  7112  073E  00F1               	movwf	FLASH_EraseBlock@startAddr
  7113  073F  301F               	movlw	31
  7114  0740  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  7115  0741  2F9B               	ljmp	l2667
  7116  0742                     __end_of_my_flash_read_system_erase:	
  7117  0742                     PL2:	
  7118  0742  0874               	movf	?___lmul+3,w
  7119  0743  00AB               	movwf	___aldiv@dividend+3
  7120  0744  0873               	movf	?___lmul+2,w
  7121  0745  00AA               	movwf	___aldiv@dividend+2
  7122  0746  0872               	movf	?___lmul+1,w
  7123  0747  00A9               	movwf	___aldiv@dividend+1
  7124  0748  0871               	movf	?___lmul,w
  7125  0749  00A8               	movwf	___aldiv@dividend
  7126  074A  0008               	return
  7127  074B                     __end_ofPL2:	
  7128  074B                     PL4:	
  7129  074B  01A6               	clrf	___aldiv@divisor+2
  7130  074C  01A7               	clrf	___aldiv@divisor+3
  7131  074D  0021               	movlb	1	; select bank1
  7132  074E  0847               	movf	(_bbtu+3)^(0+128),w
  7133  074F  0020               	movlb	0	; select bank0
  7134  0750  00AB               	movwf	___aldiv@dividend+3
  7135  0751  0021               	movlb	1	; select bank1
  7136  0752  0846               	movf	(_bbtu+2)^(0+128),w
  7137  0753  0020               	movlb	0	; select bank0
  7138  0754  00AA               	movwf	___aldiv@dividend+2
  7139  0755  0021               	movlb	1	; select bank1
  7140  0756  0845               	movf	(_bbtu+1)^(0+128),w
  7141  0757  0020               	movlb	0	; select bank0
  7142  0758  00A9               	movwf	___aldiv@dividend+1
  7143  0759  0021               	movlb	1	; select bank1
  7144  075A  0844               	movf	_bbtu^(0+128),w
  7145  075B  0020               	movlb	0	; select bank0
  7146  075C  00A8               	movwf	___aldiv@dividend
  7147  075D  0008               	return
  7148  075E                     __end_ofPL4:	
  7149  075E                     PL10:	
  7150  075E  0086               	movwf	6
  7151  075F  3001               	movlw	1	; select bank2/3
  7152  0760  0087               	movwf	7
  7153  0761  3F40               	moviw [0]fsr1
  7154  0762  00B4               	movwf	??_calc_expect_vout_adc_value
  7155  0763  3F41               	moviw [1]fsr1
  7156  0764  00B5               	movwf	??_calc_expect_vout_adc_value+1
  7157  0765  0008               	return
  7158  0766                     __end_ofPL10:	
  7159  0766                     PL16:	
  7160  0766  0086               	movwf	6
  7161  0767  3F40               	moviw [0]fsr1
  7162  0768  00B4               	movwf	??_calc_expect_vout_adc_value
  7163  0769  3F41               	moviw [1]fsr1
  7164  076A  00B5               	movwf	??_calc_expect_vout_adc_value+1
  7165  076B  0834               	movf	??_calc_expect_vout_adc_value,w
  7166  076C  0008               	return
  7167  076D                     __end_ofPL16:	
  7168  076D                     PL18:	
  7169  076D  00A4               	movwf	___aldiv@divisor
  7170  076E  01A5               	clrf	___aldiv@divisor+1
  7171  076F  01A6               	clrf	___aldiv@divisor+2
  7172  0770  01A7               	clrf	___aldiv@divisor+3
  7173  0771  0021               	movlb	1	; select bank1
  7174  0772  0008               	return
  7175  0773                     __end_ofPL18:	
  7176  0773                     PL20:	
  7177  0773  0874               	movf	?___lldiv+3,w
  7178  0774  00B4               	movwf	calc_temp_rc@y+3
  7179  0775  0873               	movf	?___lldiv+2,w
  7180  0776  00B3               	movwf	calc_temp_rc@y+2
  7181  0777  0872               	movf	?___lldiv+1,w
  7182  0778  00B2               	movwf	calc_temp_rc@y+1
  7183  0779  0871               	movf	?___lldiv,w
  7184  077A  00B1               	movwf	calc_temp_rc@y
  7185  077B  0008               	return
  7186  077C                     __end_ofPL20:	
  7187  077C                     PL26:	
  7188  077C  00F1               	movwf	___lmul@multiplier
  7189  077D  300A               	movlw	10
  7190  077E  00F5               	movwf	___lmul@multiplicand
  7191  077F  01F6               	clrf	___lmul@multiplicand+1
  7192  0780  01F7               	clrf	___lmul@multiplicand+2
  7193  0781  01F8               	clrf	___lmul@multiplicand+3
  7194  0782  0008               	return
  7195  0783                     __end_ofPL26:	
  7196  0783                     PL28:	
  7197  0783  3063               	movlw	99
  7198  0784  009E               	movwf	30	;volatile
  7199  0785  019F               	clrf	31	;volatile
  7200  0786  019B               	clrf	27	;volatile
  7201  0787  019C               	clrf	28	;volatile
  7202  0788  0008               	return
  7203  0789                     __end_ofPL28:	
  7204  0789                     PL30:	
  7205  0789  00A0               	movwf	crc_append@message
  7206  078A  3001               	movlw	high _sysData
  7207  078B  00A1               	movwf	crc_append@message+1
  7208  078C  3032               	movlw	50
  7209  078D  00A2               	movwf	crc_append@n
  7210  078E  01A3               	clrf	crc_append@n+1
  7211  078F  0008               	return
  7212  0790                     __end_ofPL30:	
  7213  0790                     PL34:	
  7214  0790  3055               	movlw	85
  7215  0791  003C               	movlb	28	; select bank28
  7216  0792  008F               	movwf	15	;volatile
  7217  0793  30AA               	movlw	170
  7218  0794  008F               	movwf	15	;volatile
  7219  0795  0008               	return
  7220  0796                     __end_ofPL34:	
  7221  0796                     PL36:	
  7222  0796  3034               	movlw	52
  7223  0797  00F1               	movwf	my_flash_system_write@len
  7224  0798  3020               	movlw	(low (_sysData| (0+256)))& (0+255)
  7225  0799  01F2               	clrf	my_flash_system_write@len+1
  7226  079A  0008               	return
  7227  079B                     __end_ofPL36:	
  7228  079B                     __ptext19:	
  7229 ;; *************** function _FLASH_EraseBlock *****************
  7230 ;; Defined at:
  7231 ;;		line 147 in file "mcc_generated_files/memory.c"
  7232 ;; Parameters:    Size  Location     Type
  7233 ;;  startAddr       2    1[COMMON] unsigned int 
  7234 ;; Auto vars:     Size  Location     Type
  7235 ;;  GIEBitValue     1    3[COMMON] unsigned char 
  7236 ;; Return value:  Size  Location     Type
  7237 ;;                  1    wreg      void 
  7238 ;; Registers used:
  7239 ;;		wreg, status,2, status,0
  7240 ;; Tracked objects:
  7241 ;;		On entry : 1C/0
  7242 ;;		On exit  : 1F/3
  7243 ;;		Unchanged: 0/0
  7244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7245 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7246 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7248 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7249 ;;Total ram usage:        3 bytes
  7250 ;; Hardware stack levels used:    1
  7251 ;; Hardware stack levels required when called:    1
  7252 ;; This function calls:
  7253 ;;		Nothing
  7254 ;; This function is called by:
  7255 ;;		_my_flash_read_system_erase
  7256 ;; This function uses a non-reentrant model
  7257 ;;
  7258                           
  7259                           
  7260                           ;psect for function _FLASH_EraseBlock
  7261  079B                     _FLASH_EraseBlock:	
  7262  079B                     l2667:	
  7263                           ;incstack = 0
  7264                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  7265                           
  7266                           
  7267                           ;memory.c: 149: uint8_t GIEBitValue = INTCONbits.GIE;
  7268  079B  3000               	movlw	0
  7269  079C  1B8B               	btfsc	11,7	;volatile
  7270  079D  3001               	movlw	1
  7271  079E  00F3               	movwf	FLASH_EraseBlock@GIEBitValue
  7272                           
  7273                           ;memory.c: 152: INTCONbits.GIE = 0;
  7274  079F  138B               	bcf	11,7	;volatile
  7275                           
  7276                           ;memory.c: 154: PMADRL = (startAddr & 0xFF);
  7277  07A0  0871               	movf	FLASH_EraseBlock@startAddr,w
  7278  07A1  0023               	movlb	3	; select bank3
  7279  07A2  0091               	movwf	17	;volatile
  7280                           
  7281                           ;memory.c: 156: PMADRH = ((startAddr & 0xFF00) >> 8);
  7282  07A3  0872               	movf	FLASH_EraseBlock@startAddr+1,w
  7283  07A4  0092               	movwf	18	;volatile
  7284                           
  7285                           ;memory.c: 159: PMCON1bits.CFGS = 0;
  7286  07A5  1315               	bcf	21,6	;volatile
  7287                           
  7288                           ;memory.c: 160: PMCON1bits.FREE = 1;
  7289  07A6  1615               	bsf	21,4	;volatile
  7290                           
  7291                           ;memory.c: 161: PMCON1bits.WREN = 1;
  7292  07A7  1515               	bsf	21,2	;volatile
  7293                           
  7294                           ;memory.c: 164: PMCON2 = 0x55;
  7295  07A8  3055               	movlw	85
  7296  07A9  0096               	movwf	22	;volsfr
  7297                           
  7298                           ;memory.c: 165: PMCON2 = 0xAA;
  7299  07AA  30AA               	movlw	170
  7300  07AB  0096               	movwf	22	;volsfr
  7301                           
  7302                           ;memory.c: 166: PMCON1bits.WR = 1;
  7303  07AC  1495               	bsf	21,1	;volatile
  7304                           
  7305                           ;memory.c: 167: __nop();
  7306  07AD  0000               	nop
  7307                           
  7308                           ;memory.c: 168: __nop();
  7309  07AE  0000               	nop
  7310                           
  7311                           ;memory.c: 170: PMCON1bits.WREN = 0;
  7312  07AF  0023               	movlb	3	; select bank3
  7313  07B0  1115               	bcf	21,2	;volatile
  7314                           
  7315                           ;memory.c: 171: INTCONbits.GIE = GIEBitValue;
  7316  07B1  0C73               	rrf	FLASH_EraseBlock@GIEBitValue,w
  7317  07B2  318F  2FCE         	ljmp	PL24	;call to abstracted procedure
  7318  07B4                     __end_of_FLASH_EraseBlock:	
  7319  07B4                     __ptext1:	
  7320 ;; *************** function _uart_received_start *****************
  7321 ;; Defined at:
  7322 ;;		line 49 in file "src/api/my_uart.c"
  7323 ;; Parameters:    Size  Location     Type
  7324 ;;		None
  7325 ;; Auto vars:     Size  Location     Type
  7326 ;;		None
  7327 ;; Return value:  Size  Location     Type
  7328 ;;                  1    wreg      void 
  7329 ;; Registers used:
  7330 ;;		status,2
  7331 ;; Tracked objects:
  7332 ;;		On entry : 1D/0
  7333 ;;		On exit  : 1F/0
  7334 ;;		Unchanged: 0/0
  7335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7339 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7340 ;;Total ram usage:        0 bytes
  7341 ;; Hardware stack levels used:    1
  7342 ;; Hardware stack levels required when called:    1
  7343 ;; This function calls:
  7344 ;;		Nothing
  7345 ;; This function is called by:
  7346 ;;		_main
  7347 ;; This function uses a non-reentrant model
  7348 ;;
  7349                           
  7350                           
  7351                           ;psect for function _uart_received_start
  7352  07B4                     _uart_received_start:	
  7353                           
  7354                           ;my_uart.c: 51: eusartRxCount=0;
  7355                           
  7356                           ;incstack = 0
  7357                           ; Regs used in _uart_received_start: [status,2]
  7358  07B4  01FC               	clrf	_eusartRxCount	;volatile
  7359                           
  7360                           ;my_uart.c: 52: RCSTAbits.CREN=0;
  7361  07B5  0023               	movlb	3	; select bank3
  7362  07B6  121D               	bcf	29,4	;volatile
  7363                           
  7364                           ;my_uart.c: 53: PIE1bits.RCIE = 0;
  7365  07B7  0021               	movlb	1	; select bank1
  7366  07B8  1291               	bcf	17,5	;volatile
  7367                           
  7368                           ;my_uart.c: 54: PIR1bits.RCIF=0;
  7369  07B9  0020               	movlb	0	; select bank0
  7370  07BA  1291               	bcf	17,5	;volatile
  7371                           
  7372                           ;my_uart.c: 56: RCSTAbits.CREN=1;
  7373  07BB  0023               	movlb	3	; select bank3
  7374  07BC  161D               	bsf	29,4	;volatile
  7375                           
  7376                           ;my_uart.c: 57: PIE1bits.RCIE = 1;
  7377  07BD  0021               	movlb	1	; select bank1
  7378  07BE  1691               	bsf	17,5	;volatile
  7379                           
  7380                           ;my_uart.c: 59: eusartRxIdleTime_ms=0;
  7381  07BF  0020               	movlb	0	; select bank0
  7382  07C0  01E2               	clrf	_eusartRxIdleTime_ms	;volatile
  7383  07C1  0008               	return
  7384  07C2                     __end_of_uart_received_start:	
  7385  07C2                     __ptext48:	
  7386 ;; *************** function _EUSART_Initialize *****************
  7387 ;; Defined at:
  7388 ;;		line 55 in file "mcc_generated_files/eusart.c"
  7389 ;; Parameters:    Size  Location     Type
  7390 ;;		None
  7391 ;; Auto vars:     Size  Location     Type
  7392 ;;		None
  7393 ;; Return value:  Size  Location     Type
  7394 ;;                  1    wreg      void 
  7395 ;; Registers used:
  7396 ;;		wreg
  7397 ;; Tracked objects:
  7398 ;;		On entry : 1F/0
  7399 ;;		On exit  : 1F/1
  7400 ;;		Unchanged: 0/0
  7401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7405 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7406 ;;Total ram usage:        0 bytes
  7407 ;; Hardware stack levels used:    1
  7408 ;; Hardware stack levels required when called:    1
  7409 ;; This function calls:
  7410 ;;		Nothing
  7411 ;; This function is called by:
  7412 ;;		_SYSTEM_Initialize
  7413 ;; This function uses a non-reentrant model
  7414 ;;
  7415                           
  7416                           
  7417                           ;psect for function _EUSART_Initialize
  7418  07C2                     _EUSART_Initialize:	
  7419  07C2                     l3003:	
  7420                           ;incstack = 0
  7421                           ; Regs used in _EUSART_Initialize: [wreg]
  7422                           
  7423                           
  7424                           ;eusart.c: 60: BAUDCON = 0x08;
  7425  07C2  3008               	movlw	8
  7426  07C3  0023               	movlb	3	; select bank3
  7427  07C4  009F               	movwf	31	;volatile
  7428                           
  7429                           ;eusart.c: 63: RCSTA = 0x90;
  7430  07C5  3090               	movlw	144
  7431  07C6  009D               	movwf	29	;volatile
  7432                           
  7433                           ;eusart.c: 66: TXSTA = 0x24;
  7434  07C7  3024               	movlw	36
  7435  07C8  009E               	movwf	30	;volatile
  7436                           
  7437                           ;eusart.c: 70: SPBRGL = 0xA0;
  7438  07C9  30A0               	movlw	160
  7439  07CA  009B               	movwf	27	;volatile
  7440                           
  7441                           ;eusart.c: 75: SPBRGH = 0x01;
  7442  07CB  3001               	movlw	1
  7443  07CC  009C               	movwf	28	;volatile
  7444                           
  7445                           ;eusart.c: 76: PIE1bits.RCIE = 1;
  7446  07CD  0021               	movlb	1	; select bank1
  7447  07CE  1691               	bsf	17,5	;volatile
  7448  07CF  0008               	return
  7449  07D0                     __end_of_EUSART_Initialize:	
  7450                           
  7451                           	psect	bssCOMMON
  7452  007C                     __pbssCOMMON:	
  7453  007C                     _eusartRxCount:	
  7454  007C                     	ds	1
  7455                           
  7456                           	psect	bssBANK0
  7457  004D                     __pbssBANK0:	
  7458  004D                     _PidKp:	
  7459  004D                     	ds	4
  7460  0051                     _pwm2Ei:	
  7461  0051                     	ds	2
  7462  0053                     _rsSimPower:	
  7463  0053                     	ds	2
  7464  0055                     _rtAdcValueRcHi:	
  7465  0055                     	ds	2
  7466  0057                     _rtAdcValueRcLo:	
  7467  0057                     	ds	2
  7468  0059                     _rtAdcValueRsHi:	
  7469  0059                     	ds	2
  7470  005B                     _rtAdcValueRsLo:	
  7471  005B                     	ds	2
  7472  005D                     _rtAdcValueVoFb:	
  7473  005D                     	ds	2
  7474  005F                     _voExpectAdcValue:	
  7475  005F                     	ds	2
  7476  0061                     _Event:	
  7477  0061                     	ds	1
  7478  0062                     _eusartRxIdleTime_ms:	
  7479  0062                     	ds	1
  7480  0063                     _pidBbSm:	
  7481  0063                     	ds	1
  7482  0064                     _pidTestNum:	
  7483  0064                     	ds	1
  7484  0065                     _subTickerX:	
  7485  0065                     	ds	1
  7486  0066                     _subTickerX_1s:	
  7487  0066                     	ds	1
  7488                           
  7489                           	psect	dataBANK0
  7490  0067                     __pdataBANK0:	
  7491  0067                     _resRc:	
  7492  0067                     	ds	4
  7493  006B                     _pwm2DutyForVout:	
  7494  006B                     	ds	2
  7495                           
  7496                           	psect	bssBANK1
  7497  00A0                     __pbssBANK1:	
  7498  00A0                     _err:	
  7499  00A0                     	ds	12
  7500  00AC                     _PidTd:	
  7501  00AC                     	ds	4
  7502  00B0                     _PidTi:	
  7503  00B0                     	ds	4
  7504  00B4                     _bbku:	
  7505  00B4                     	ds	4
  7506  00B8                     _bbt0:	
  7507  00B8                     	ds	4
  7508  00BC                     _bbt1:	
  7509  00BC                     	ds	4
  7510  00C0                     _bbta:	
  7511  00C0                     	ds	4
  7512  00C4                     _bbtu:	
  7513  00C4                     	ds	4
  7514  00C8                     _bbu:	
  7515  00C8                     	ds	4
  7516  00CC                     _globalTicker:	
  7517  00CC                     	ds	4
  7518                           
  7519                           	psect	dataBANK1
  7520  00D0                     __pdataBANK1:	
  7521  00D0                     _bbmax:	
  7522  00D0                     	ds	4
  7523  00D4                     _bbmin:	
  7524  00D4                     	ds	4
  7525  00D8                     _pidU:	
  7526  00D8                     	ds	4
  7527  00DC                     _resRs:	
  7528  00DC                     	ds	4
  7529                           
  7530                           	psect	bssBANK2
  7531  0120                     __pbssBANK2:	
  7532  0120                     _sysData:	
  7533  0120                     	ds	52
  7534                           
  7535                           	psect	bssBANK3
  7536  01A0                     __pbssBANK3:	
  7537  01A0                     _eusartRxBuffer:	
  7538  01A0                     	ds	64
  7539                           
  7540                           	psect	bssBANK4
  7541  0220                     __pbssBANK4:	
  7542  0220                     _modbusBuf:	
  7543  0220                     	ds	64
  7544                           
  7545                           	psect	clrtext
  7546  08B9                     clear_ram0:	
  7547                           ;	Called with FSR0 containing the base address, and
  7548                           ;	WREG with the size to clear
  7549                           
  7550  08B9  0064               	clrwdt	;clear the watchdog before getting into this loop
  7551  08BA                     clrloop0:	
  7552  08BA  0180               	clrf	0	;clear RAM location pointed to by FSR
  7553  08BB  3101               	addfsr 0,1
  7554  08BC  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  7555  08BD  28BA               	goto	clrloop0	;have we reached the end yet?
  7556  08BE  3400               	retlw	0	;all done for this memory range, return
  7557                           
  7558                           	psect	inittext
  7559  08B3                     init_ram:	
  7560  08B3  00FE               	movwf	126
  7561  08B4                     initloop:	
  7562  08B4  0012               	moviw fsr0++
  7563  08B5  001E               	movwi fsr1++
  7564  08B6  0BFE               	decfsz	126,f
  7565  08B7  28B4               	goto	initloop
  7566  08B8  3400               	retlw	0
  7567                           
  7568                           	psect	cstackBANK2
  7569  0154                     __pcstackBANK2:	
  7570  0154                     pid_pwm1_idrv_run@ep:	
  7571                           
  7572                           ; 4 bytes @ 0x0
  7573  0154                     	ds	4
  7574  0158                     pid_pwm1_idrv_run@ei:	
  7575                           
  7576                           ; 4 bytes @ 0x4
  7577  0158                     	ds	4
  7578  015C                     pid_pwm1_idrv_run@ed:	
  7579                           
  7580                           ; 4 bytes @ 0x8
  7581  015C                     	ds	4
  7582  0160                     _pid_pwm1_idrv_run$2201:	
  7583                           
  7584                           ; 4 bytes @ 0xC
  7585  0160                     	ds	4
  7586  0164                     pid_pwm1_idrv_run@t16:	
  7587                           
  7588                           ; 2 bytes @ 0x10
  7589  0164                     	ds	2
  7590  0166                     pid_pwm1_idrv_run@t32:	
  7591                           
  7592                           ; 4 bytes @ 0x12
  7593  0166                     	ds	4
  7594                           
  7595                           	psect	cstackCOMMON
  7596  0070                     __pcstackCOMMON:	
  7597  0070                     ?_TMR2_StartTimer:	
  7598  0070                     ?_PIN_MANAGER_Initialize:	
  7599                           ; 1 bytes @ 0x0
  7600                           
  7601  0070                     ?_OSCILLATOR_Initialize:	
  7602                           ; 1 bytes @ 0x0
  7603                           
  7604  0070                     ?_WDT_Initialize:	
  7605                           ; 1 bytes @ 0x0
  7606                           
  7607  0070                     ?_ADC1_Initialize:	
  7608                           ; 1 bytes @ 0x0
  7609                           
  7610  0070                     ?_EUSART_Initialize:	
  7611                           ; 1 bytes @ 0x0
  7612                           
  7613  0070                     ?_PWM2_Initialize:	
  7614                           ; 1 bytes @ 0x0
  7615                           
  7616  0070                     ?_PWM1_Initialize:	
  7617                           ; 1 bytes @ 0x0
  7618                           
  7619  0070                     ?_TMR2_Initialize:	
  7620                           ; 1 bytes @ 0x0
  7621                           
  7622  0070                     ?_INTERRUPT_InterruptManager:	
  7623                           ; 1 bytes @ 0x0
  7624                           
  7625  0070                     ??_INTERRUPT_InterruptManager:	
  7626                           ; 1 bytes @ 0x0
  7627                           
  7628  0070                     ?_FVR_Initialize:	
  7629                           ; 1 bytes @ 0x0
  7630                           
  7631  0070                     ?_SYSTEM_Initialize:	
  7632                           ; 1 bytes @ 0x0
  7633                           
  7634  0070                     ?_uart_received_start:	
  7635                           ; 1 bytes @ 0x0
  7636                           
  7637  0070                     ?_fvr_set_gain:	
  7638                           ; 1 bytes @ 0x0
  7639                           
  7640  0070                     ?_adc_init:	
  7641                           ; 1 bytes @ 0x0
  7642                           
  7643  0070                     ?_pid_pwm1_idrv_b_b:	
  7644                           ; 1 bytes @ 0x0
  7645                           
  7646  0070                     ?_pid_pwm1_idrv_run:	
  7647                           ; 1 bytes @ 0x0
  7648                           
  7649  0070                     ?_pid_pwm2_vout_run:	
  7650                           ; 1 bytes @ 0x0
  7651                           
  7652  0070                     ?_my_flash_read_system_erase:	
  7653                           ; 1 bytes @ 0x0
  7654                           
  7655  0070                     ?_sys_data_save:	
  7656                           ; 1 bytes @ 0x0
  7657                           
  7658  0070                     ?_modbus_response_write_single_register:	
  7659                           ; 1 bytes @ 0x0
  7660                           
  7661  0070                     ?_modbus_response_command:	
  7662                           ; 1 bytes @ 0x0
  7663                           
  7664  0070                     ?_main:	
  7665                           ; 1 bytes @ 0x0
  7666                           
  7667  0070                     ?_sys_data_init:	
  7668                           ; 1 bytes @ 0x0
  7669                           
  7670  0070                     INTERRUPT_InterruptManager@t8:	
  7671                           ; 2 bytes @ 0x0
  7672                           
  7673                           
  7674                           ; 1 bytes @ 0x0
  7675  0070                     	ds	1
  7676  0071                     ?_FLASH_EraseBlock:	
  7677  0071                     ?_TMR2_SetInterruptHandler:	
  7678                           ; 1 bytes @ 0x1
  7679                           
  7680  0071                     ??_TMR2_StartTimer:	
  7681                           ; 1 bytes @ 0x1
  7682                           
  7683  0071                     ??_PIN_MANAGER_Initialize:	
  7684                           ; 1 bytes @ 0x1
  7685                           
  7686  0071                     ??_OSCILLATOR_Initialize:	
  7687                           ; 1 bytes @ 0x1
  7688                           
  7689  0071                     ??_WDT_Initialize:	
  7690                           ; 1 bytes @ 0x1
  7691                           
  7692  0071                     ??_ADC1_Initialize:	
  7693                           ; 1 bytes @ 0x1
  7694                           
  7695  0071                     ??_EUSART_Initialize:	
  7696                           ; 1 bytes @ 0x1
  7697                           
  7698  0071                     ?_m_mem_cpy_len:	
  7699                           ; 1 bytes @ 0x1
  7700                           
  7701  0071                     ??_PWM2_Initialize:	
  7702                           ; 1 bytes @ 0x1
  7703                           
  7704  0071                     ??_PWM1_Initialize:	
  7705                           ; 1 bytes @ 0x1
  7706                           
  7707  0071                     ??_FVR_Initialize:	
  7708                           ; 1 bytes @ 0x1
  7709                           
  7710  0071                     ?_uart_send_len:	
  7711                           ; 1 bytes @ 0x1
  7712                           
  7713  0071                     ??_uart_received_start:	
  7714                           ; 1 bytes @ 0x1
  7715                           
  7716  0071                     ??_fvr_set_gain:	
  7717                           ; 1 bytes @ 0x1
  7718                           
  7719  0071                     ??_adc_init:	
  7720                           ; 1 bytes @ 0x1
  7721                           
  7722  0071                     ?_my_flash_system_read:	
  7723                           ; 1 bytes @ 0x1
  7724                           
  7725  0071                     ?_get_idrv_pwm1_duty:	
  7726                           ; 1 bytes @ 0x1
  7727                           
  7728  0071                     ?_get_vout_pwm2_duty:	
  7729                           ; 2 bytes @ 0x1
  7730                           
  7731  0071                     ?_my_flash_system_write:	
  7732                           ; 2 bytes @ 0x1
  7733                           
  7734  0071                     ?_getRegisterVal:	
  7735                           ; 2 bytes @ 0x1
  7736                           
  7737  0071                     ?_crc_sum:	
  7738                           ; 2 bytes @ 0x1
  7739                           
  7740  0071                     ?___wmul:	
  7741                           ; 2 bytes @ 0x1
  7742                           
  7743  0071                     ?___awdiv:	
  7744                           ; 2 bytes @ 0x1
  7745                           
  7746  0071                     ?___lwdiv:	
  7747                           ; 2 bytes @ 0x1
  7748                           
  7749  0071                     ?___lmul:	
  7750                           ; 2 bytes @ 0x1
  7751                           
  7752  0071                     ?___lldiv:	
  7753                           ; 4 bytes @ 0x1
  7754                           
  7755  0071                     PIN_MANAGER_Initialize@state:	
  7756                           ; 4 bytes @ 0x1
  7757                           
  7758  0071                     uart_send_len@len:	
  7759                           ; 1 bytes @ 0x1
  7760                           
  7761  0071                     fvr_set_gain@t8:	
  7762                           ; 1 bytes @ 0x1
  7763                           
  7764  0071                     FLASH_EraseBlock@startAddr:	
  7765                           ; 1 bytes @ 0x1
  7766                           
  7767  0071                     TMR2_SetInterruptHandler@InterruptHandler:	
  7768                           ; 2 bytes @ 0x1
  7769                           
  7770  0071                     my_flash_system_read@len:	
  7771                           ; 2 bytes @ 0x1
  7772                           
  7773  0071                     my_flash_system_write@len:	
  7774                           ; 2 bytes @ 0x1
  7775                           
  7776  0071                     getRegisterVal@addr:	
  7777                           ; 2 bytes @ 0x1
  7778                           
  7779  0071                     m_mem_cpy_len@d:	
  7780                           ; 2 bytes @ 0x1
  7781                           
  7782  0071                     crc_sum@buf:	
  7783                           ; 2 bytes @ 0x1
  7784                           
  7785  0071                     ___wmul@multiplier:	
  7786                           ; 2 bytes @ 0x1
  7787                           
  7788  0071                     ___awdiv@divisor:	
  7789                           ; 2 bytes @ 0x1
  7790                           
  7791  0071                     ___lwdiv@divisor:	
  7792                           ; 2 bytes @ 0x1
  7793                           
  7794  0071                     ___lmul@multiplier:	
  7795                           ; 2 bytes @ 0x1
  7796                           
  7797  0071                     ___lldiv@divisor:	
  7798                           ; 4 bytes @ 0x1
  7799                           
  7800                           
  7801                           ; 4 bytes @ 0x1
  7802  0071                     	ds	1
  7803  0072                     ??_uart_send_len:	
  7804  0072                     fvr_set_gain@g:	
  7805                           ; 1 bytes @ 0x2
  7806                           
  7807  0072                     adc_init@ch:	
  7808                           ; 1 bytes @ 0x2
  7809                           
  7810                           
  7811                           ; 1 bytes @ 0x2
  7812  0072                     	ds	1
  7813  0073                     ??_FLASH_EraseBlock:	
  7814  0073                     ??_TMR2_SetInterruptHandler:	
  7815                           ; 1 bytes @ 0x3
  7816                           
  7817  0073                     ??_TMR2_Initialize:	
  7818                           ; 1 bytes @ 0x3
  7819                           
  7820  0073                     ??_SYSTEM_Initialize:	
  7821                           ; 1 bytes @ 0x3
  7822                           
  7823  0073                     ??_get_idrv_pwm1_duty:	
  7824                           ; 1 bytes @ 0x3
  7825                           
  7826  0073                     ?_set_idrv_pwm1_duty:	
  7827                           ; 1 bytes @ 0x3
  7828                           
  7829  0073                     ??_get_vout_pwm2_duty:	
  7830                           ; 1 bytes @ 0x3
  7831                           
  7832  0073                     ?_set_vout_pwm2_duty:	
  7833                           ; 1 bytes @ 0x3
  7834                           
  7835  0073                     ??_my_flash_system_read:	
  7836                           ; 1 bytes @ 0x3
  7837                           
  7838  0073                     ??_my_flash_system_write:	
  7839                           ; 1 bytes @ 0x3
  7840                           
  7841  0073                     ?_adc_sample:	
  7842                           ; 1 bytes @ 0x3
  7843                           
  7844  0073                     FLASH_EraseBlock@GIEBitValue:	
  7845                           ; 2 bytes @ 0x3
  7846                           
  7847  0073                     uart_send_len@buf:	
  7848                           ; 1 bytes @ 0x3
  7849                           
  7850  0073                     adc_sample@gfvr:	
  7851                           ; 1 bytes @ 0x3
  7852                           
  7853  0073                     getRegisterVal@tempData:	
  7854                           ; 1 bytes @ 0x3
  7855                           
  7856  0073                     set_idrv_pwm1_duty@duty:	
  7857                           ; 1 bytes @ 0x3
  7858                           
  7859  0073                     set_vout_pwm2_duty@duty:	
  7860                           ; 2 bytes @ 0x3
  7861                           
  7862  0073                     m_mem_cpy_len@s:	
  7863                           ; 2 bytes @ 0x3
  7864                           
  7865  0073                     crc_sum@len:	
  7866                           ; 2 bytes @ 0x3
  7867                           
  7868  0073                     ___wmul@multiplicand:	
  7869                           ; 2 bytes @ 0x3
  7870                           
  7871  0073                     ___awdiv@dividend:	
  7872                           ; 2 bytes @ 0x3
  7873                           
  7874  0073                     ___lwdiv@dividend:	
  7875                           ; 2 bytes @ 0x3
  7876                           
  7877                           
  7878                           ; 2 bytes @ 0x3
  7879  0073                     	ds	1
  7880  0074                     ??_my_flash_read_system_erase:	
  7881  0074                     ??_getRegisterVal:	
  7882                           ; 1 bytes @ 0x4
  7883                           
  7884  0074                     uart_send_len@i:	
  7885                           ; 1 bytes @ 0x4
  7886                           
  7887  0074                     adc_sample@num:	
  7888                           ; 1 bytes @ 0x4
  7889                           
  7890  0074                     my_flash_system_read@GIEBitValue:	
  7891                           ; 1 bytes @ 0x4
  7892                           
  7893                           
  7894                           ; 1 bytes @ 0x4
  7895  0074                     	ds	1
  7896  0075                     ??_set_idrv_pwm1_duty:	
  7897  0075                     ??_set_vout_pwm2_duty:	
  7898                           ; 1 bytes @ 0x5
  7899                           
  7900  0075                     ??_adc_sample:	
  7901                           ; 1 bytes @ 0x5
  7902                           
  7903  0075                     ??_crc_sum:	
  7904                           ; 1 bytes @ 0x5
  7905                           
  7906  0075                     ??___wmul:	
  7907                           ; 1 bytes @ 0x5
  7908                           
  7909  0075                     ??___awdiv:	
  7910                           ; 1 bytes @ 0x5
  7911                           
  7912  0075                     ??___lwdiv:	
  7913                           ; 1 bytes @ 0x5
  7914                           
  7915  0075                     my_flash_system_read@buf:	
  7916                           ; 1 bytes @ 0x5
  7917                           
  7918  0075                     ___awdiv@counter:	
  7919                           ; 1 bytes @ 0x5
  7920                           
  7921  0075                     set_idrv_pwm1_duty@t16:	
  7922                           ; 1 bytes @ 0x5
  7923                           
  7924  0075                     set_vout_pwm2_duty@t16:	
  7925                           ; 2 bytes @ 0x5
  7926                           
  7927  0075                     m_mem_cpy_len@len:	
  7928                           ; 2 bytes @ 0x5
  7929                           
  7930  0075                     crc_sum@j:	
  7931                           ; 2 bytes @ 0x5
  7932                           
  7933  0075                     ___wmul@product:	
  7934                           ; 2 bytes @ 0x5
  7935                           
  7936  0075                     ___lwdiv@quotient:	
  7937                           ; 2 bytes @ 0x5
  7938                           
  7939  0075                     ___lmul@multiplicand:	
  7940                           ; 2 bytes @ 0x5
  7941                           
  7942  0075                     ___lldiv@dividend:	
  7943                           ; 4 bytes @ 0x5
  7944                           
  7945                           
  7946                           ; 4 bytes @ 0x5
  7947  0075                     	ds	1
  7948  0076                     adc_sample@ch:	
  7949  0076                     ___awdiv@sign:	
  7950                           ; 1 bytes @ 0x6
  7951                           
  7952  0076                     my_flash_system_read@i:	
  7953                           ; 1 bytes @ 0x6
  7954                           
  7955                           
  7956                           ; 2 bytes @ 0x6
  7957  0076                     	ds	1
  7958  0077                     ??_m_mem_cpy_len:	
  7959  0077                     ___lwdiv@counter:	
  7960                           ; 1 bytes @ 0x7
  7961                           
  7962  0077                     adc_sample@ret:	
  7963                           ; 1 bytes @ 0x7
  7964                           
  7965  0077                     crc_sum@i:	
  7966                           ; 2 bytes @ 0x7
  7967                           
  7968  0077                     ___awdiv@quotient:	
  7969                           ; 2 bytes @ 0x7
  7970                           
  7971                           
  7972                           ; 2 bytes @ 0x7
  7973  0077                     	ds	1
  7974  0078                     getRegisterVal@tempAddr:	
  7975  0078                     my_flash_system_read@flashAddr:	
  7976                           ; 1 bytes @ 0x8
  7977                           
  7978                           
  7979                           ; 2 bytes @ 0x8
  7980  0078                     	ds	1
  7981  0079                     ??_calc_temp_rs:	
  7982  0079                     ??_pid_pwm1_idrv_b_b:	
  7983                           ; 1 bytes @ 0x9
  7984                           
  7985  0079                     ??_pid_pwm2_vout_run:	
  7986                           ; 1 bytes @ 0x9
  7987                           
  7988  0079                     ??_cal_rs_simulate_power:	
  7989                           ; 1 bytes @ 0x9
  7990                           
  7991  0079                     ??___lmul:	
  7992                           ; 1 bytes @ 0x9
  7993                           
  7994  0079                     ??___aldiv:	
  7995                           ; 1 bytes @ 0x9
  7996                           
  7997  0079                     ??___lldiv:	
  7998                           ; 1 bytes @ 0x9
  7999                           
  8000  0079                     adc_sample@i:	
  8001                           ; 1 bytes @ 0x9
  8002                           
  8003  0079                     crc_sum@crc:	
  8004                           ; 1 bytes @ 0x9
  8005                           
  8006                           
  8007                           ; 2 bytes @ 0x9
  8008  0079                     	ds	1
  8009  007A                     adc_sample@t16:	
  8010                           
  8011                           ; 2 bytes @ 0xA
  8012  007A                     	ds	1
  8013  007B                     ??_crc_verify:	
  8014  007B                     ??_sys_data_init:	
  8015                           ; 1 bytes @ 0xB
  8016                           
  8017  007B                     ??_sys_data_save:	
  8018                           ; 1 bytes @ 0xB
  8019                           
  8020  007B                     ??_modbus_response_illgeal_function:	
  8021                           ; 1 bytes @ 0xB
  8022                           
  8023  007B                     ??_modbus_response_command:	
  8024                           ; 1 bytes @ 0xB
  8025                           
  8026                           
  8027                           ; 1 bytes @ 0xB
  8028  007B                     	ds	1
  8029  007C                     ??_modbus_response_process:	
  8030  007C                     ??_main:	
  8031                           ; 1 bytes @ 0xC
  8032                           
  8033                           
  8034                           	psect	cstackBANK0
  8035  0020                     __pcstackBANK0:	
  8036                           ; 1 bytes @ 0xC
  8037                           
  8038  0020                     ?_crc_verify:	
  8039  0020                     ?_crc_append:	
  8040                           ; 1 bytes @ 0x0
  8041                           
  8042  0020                     pid_pwm2_vout_run@ei:	
  8043                           ; 1 bytes @ 0x0
  8044                           
  8045  0020                     my_flash_system_write@j:	
  8046                           ; 2 bytes @ 0x0
  8047                           
  8048  0020                     crc_verify@message:	
  8049                           ; 2 bytes @ 0x0
  8050                           
  8051  0020                     crc_append@message:	
  8052                           ; 2 bytes @ 0x0
  8053                           
  8054  0020                     ___lmul@product:	
  8055                           ; 2 bytes @ 0x0
  8056                           
  8057  0020                     ___lldiv@quotient:	
  8058                           ; 4 bytes @ 0x0
  8059                           
  8060                           
  8061                           ; 4 bytes @ 0x0
  8062  0020                     	ds	2
  8063  0022                     my_flash_system_write@GIEBitValue:	
  8064  0022                     pid_pwm2_vout_run@t16:	
  8065                           ; 1 bytes @ 0x2
  8066                           
  8067  0022                     crc_verify@n:	
  8068                           ; 2 bytes @ 0x2
  8069                           
  8070  0022                     crc_append@n:	
  8071                           ; 2 bytes @ 0x2
  8072                           
  8073                           
  8074                           ; 2 bytes @ 0x2
  8075  0022                     	ds	1
  8076  0023                     my_flash_system_write@blocNum:	
  8077                           
  8078                           ; 2 bytes @ 0x3
  8079  0023                     	ds	1
  8080  0024                     ??_crc_append:	
  8081  0024                     ?_cal_rs_simulate_power:	
  8082                           ; 1 bytes @ 0x4
  8083                           
  8084  0024                     ?___aldiv:	
  8085                           ; 2 bytes @ 0x4
  8086                           
  8087  0024                     ___lldiv@counter:	
  8088                           ; 4 bytes @ 0x4
  8089                           
  8090  0024                     crc_verify@crccal:	
  8091                           ; 1 bytes @ 0x4
  8092                           
  8093  0024                     ___aldiv@divisor:	
  8094                           ; 2 bytes @ 0x4
  8095                           
  8096                           
  8097                           ; 4 bytes @ 0x4
  8098  0024                     	ds	1
  8099  0025                     ?_calc_temp_rs:	
  8100  0025                     ?_calc_temp_rc:	
  8101                           ; 4 bytes @ 0x5
  8102                           
  8103  0025                     my_flash_system_write@buf:	
  8104                           ; 4 bytes @ 0x5
  8105                           
  8106                           
  8107                           ; 1 bytes @ 0x5
  8108  0025                     	ds	1
  8109  0026                     my_flash_system_write@loc:	
  8110  0026                     crc_verify@expected:	
  8111                           ; 2 bytes @ 0x6
  8112                           
  8113  0026                     cal_rs_simulate_power@t32:	
  8114                           ; 2 bytes @ 0x6
  8115                           
  8116                           
  8117                           ; 4 bytes @ 0x6
  8118  0026                     	ds	2
  8119  0028                     my_flash_system_write@flashAddr:	
  8120  0028                     ___aldiv@dividend:	
  8121                           ; 2 bytes @ 0x8
  8122                           
  8123                           
  8124                           ; 4 bytes @ 0x8
  8125  0028                     	ds	1
  8126  0029                     ??_calc_temp_rc:	
  8127  0029                     crc_append@crc:	
  8128                           ; 1 bytes @ 0x9
  8129                           
  8130  0029                     calc_temp_rs@x:	
  8131                           ; 2 bytes @ 0x9
  8132                           
  8133                           
  8134                           ; 4 bytes @ 0x9
  8135  0029                     	ds	1
  8136  002A                     cal_rs_simulate_power@t16:	
  8137  002A                     my_flash_system_write@i:	
  8138                           ; 2 bytes @ 0xA
  8139                           
  8140                           
  8141                           ; 2 bytes @ 0xA
  8142  002A                     	ds	1
  8143  002B                     ?_modbus_response_illgeal_function:	
  8144  002B                     modbus_response_illgeal_function@errcode:	
  8145                           ; 1 bytes @ 0xB
  8146                           
  8147  002B                     modbus_response_command@tmpAddr:	
  8148                           ; 1 bytes @ 0xB
  8149                           
  8150                           
  8151                           ; 2 bytes @ 0xB
  8152  002B                     	ds	1
  8153  002C                     ??_modbus_response_write_single_register:	
  8154  002C                     modbus_response_illgeal_function@buf:	
  8155                           ; 1 bytes @ 0xC
  8156                           
  8157  002C                     ___aldiv@counter:	
  8158                           ; 1 bytes @ 0xC
  8159                           
  8160  002C                     sys_data_init@ret:	
  8161                           ; 1 bytes @ 0xC
  8162                           
  8163                           
  8164                           ; 2 bytes @ 0xC
  8165  002C                     	ds	1
  8166  002D                     modbus_response_illgeal_function@pmdbs:	
  8167  002D                     ___aldiv@sign:	
  8168                           ; 1 bytes @ 0xD
  8169                           
  8170  002D                     modbus_response_command@startAddr:	
  8171                           ; 1 bytes @ 0xD
  8172                           
  8173  002D                     calc_temp_rs@y:	
  8174                           ; 2 bytes @ 0xD
  8175                           
  8176  002D                     calc_temp_rc@x:	
  8177                           ; 4 bytes @ 0xD
  8178                           
  8179                           
  8180                           ; 4 bytes @ 0xD
  8181  002D                     	ds	1
  8182  002E                     sys_data_init@i:	
  8183  002E                     modbus_response_write_single_register@t16:	
  8184                           ; 2 bytes @ 0xE
  8185                           
  8186  002E                     ___aldiv@quotient:	
  8187                           ; 2 bytes @ 0xE
  8188                           
  8189                           
  8190                           ; 4 bytes @ 0xE
  8191  002E                     	ds	1
  8192  002F                     modbus_response_command@i:	
  8193                           
  8194                           ; 1 bytes @ 0xF
  8195  002F                     	ds	1
  8196  0030                     modbus_response_write_single_register@fiSave:	
  8197  0030                     modbus_response_command@pmdbs:	
  8198                           ; 1 bytes @ 0x10
  8199                           
  8200                           
  8201                           ; 1 bytes @ 0x10
  8202  0030                     	ds	1
  8203  0031                     modbus_response_write_single_register@pmdbs:	
  8204  0031                     modbus_response_command@len:	
  8205                           ; 1 bytes @ 0x11
  8206                           
  8207  0031                     calc_temp_rc@y:	
  8208                           ; 1 bytes @ 0x11
  8209                           
  8210                           
  8211                           ; 4 bytes @ 0x11
  8212  0031                     	ds	1
  8213  0032                     ??_pid_pwm1_idrv_run:	
  8214  0032                     ?_calc_expect_vout_adc_value:	
  8215                           ; 1 bytes @ 0x12
  8216                           
  8217  0032                     modbus_response_command@rbuf:	
  8218                           ; 2 bytes @ 0x12
  8219                           
  8220  0032                     calc_expect_vout_adc_value@x:	
  8221                           ; 1 bytes @ 0x12
  8222                           
  8223  0032                     modbus_response_write_single_register@startAddr:	
  8224                           ; 2 bytes @ 0x12
  8225                           
  8226  0032                     pid_pwm1_idrv_b_b@t32:	
  8227                           ; 2 bytes @ 0x12
  8228                           
  8229                           
  8230                           ; 4 bytes @ 0x12
  8231  0032                     	ds	1
  8232  0033                     modbus_response_command@tempData:	
  8233                           
  8234                           ; 2 bytes @ 0x13
  8235  0033                     	ds	1
  8236  0034                     ??_calc_expect_vout_adc_value:	
  8237  0034                     modbus_response_write_single_register@rbuf:	
  8238                           ; 1 bytes @ 0x14
  8239                           
  8240                           
  8241                           ; 1 bytes @ 0x14
  8242  0034                     	ds	1
  8243  0035                     ?_modbus_response_process:	
  8244  0035                     modbus_response_process@rlen:	
  8245                           ; 1 bytes @ 0x15
  8246                           
  8247                           
  8248                           ; 2 bytes @ 0x15
  8249  0035                     	ds	2
  8250  0037                     modbus_response_process@pmdbs:	
  8251                           
  8252                           ; 1 bytes @ 0x17
  8253  0037                     	ds	1
  8254  0038                     modbus_response_process@rbuf:	
  8255  0038                     calc_expect_vout_adc_value@y1:	
  8256                           ; 1 bytes @ 0x18
  8257                           
  8258                           
  8259                           ; 4 bytes @ 0x18
  8260  0038                     	ds	4
  8261  003C                     calc_expect_vout_adc_value@x1:	
  8262                           
  8263                           ; 4 bytes @ 0x1C
  8264  003C                     	ds	4
  8265  0040                     calc_expect_vout_adc_value@y0:	
  8266                           
  8267                           ; 4 bytes @ 0x20
  8268  0040                     	ds	4
  8269  0044                     calc_expect_vout_adc_value@x0:	
  8270                           
  8271                           ; 4 bytes @ 0x24
  8272  0044                     	ds	4
  8273  0048                     calc_expect_vout_adc_value@t32:	
  8274                           
  8275                           ; 4 bytes @ 0x28
  8276  0048                     	ds	4
  8277  004C                     calc_expect_vout_adc_value@i:	
  8278                           
  8279                           ; 1 bytes @ 0x2C
  8280  004C                     	ds	1
  8281                           
  8282                           	psect	text5
  8283  094C                     __ptext5:	
  8284 ;; *************** function _pid_pwm2_vout_run *****************
  8285 ;; Defined at:
  8286 ;;		line 306 in file "src/api/sample.c"
  8287 ;; Parameters:    Size  Location     Type
  8288 ;;		None
  8289 ;; Auto vars:     Size  Location     Type
  8290 ;;  t16             2    2[BANK0 ] int 
  8291 ;;  ei              2    0[BANK0 ] int 
  8292 ;; Return value:  Size  Location     Type
  8293 ;;                  1    wreg      void 
  8294 ;; Registers used:
  8295 ;;		wreg, status,2, status,0, pclath, cstack
  8296 ;; Tracked objects:
  8297 ;;		On entry : 1F/0
  8298 ;;		On exit  : 1F/1B
  8299 ;;		Unchanged: 0/0
  8300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8302 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8303 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8304 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8305 ;;Total ram usage:        5 bytes
  8306 ;; Hardware stack levels used:    1
  8307 ;; Hardware stack levels required when called:    3
  8308 ;; This function calls:
  8309 ;;		___awdiv
  8310 ;;		___lwdiv
  8311 ;;		_set_vout_pwm2_duty
  8312 ;; This function is called by:
  8313 ;;		_main
  8314 ;; This function uses a non-reentrant model
  8315 ;;
  8316                           
  8317                           
  8318                           ;psect for function _pid_pwm2_vout_run
  8319  094C                     _pid_pwm2_vout_run:	
  8320                           
  8321                           ;sample.c: 308: int16_t t16,ei;
  8322                           ;sample.c: 309: t16=voExpectAdcValue-rtAdcValueVoFb;
  8323                           
  8324                           ;incstack = 0
  8325                           ; Regs used in _pid_pwm2_vout_run: [wreg+status,2+status,0+pclath+cstack]
  8326  094C  0860               	movf	_voExpectAdcValue+1,w
  8327  094D  00A3               	movwf	pid_pwm2_vout_run@t16+1
  8328  094E  085F               	movf	_voExpectAdcValue,w
  8329  094F  00A2               	movwf	pid_pwm2_vout_run@t16
  8330  0950  085D               	movf	_rtAdcValueVoFb,w
  8331  0951  02A2               	subwf	pid_pwm2_vout_run@t16,f
  8332  0952  085E               	movf	_rtAdcValueVoFb+1,w
  8333  0953  3BA3               	subwfb	pid_pwm2_vout_run@t16+1,f
  8334                           
  8335                           ;sample.c: 310: ei=t16/100;
  8336  0954  3064               	movlw	100
  8337  0955  00F1               	movwf	___awdiv@divisor
  8338  0956  01F2               	clrf	___awdiv@divisor+1
  8339  0957  0823               	movf	pid_pwm2_vout_run@t16+1,w
  8340  0958  00F4               	movwf	___awdiv@dividend+1
  8341  0959  0822               	movf	pid_pwm2_vout_run@t16,w
  8342  095A  00F3               	movwf	___awdiv@dividend
  8343  095B  21C0  3189         	fcall	___awdiv
  8344  095D  0872               	movf	?___awdiv+1,w
  8345  095E  00A1               	movwf	pid_pwm2_vout_run@ei+1
  8346  095F  0871               	movf	?___awdiv,w
  8347  0960  00A0               	movwf	pid_pwm2_vout_run@ei
  8348                           
  8349                           ;sample.c: 311: if(ei==0){
  8350  0961  0421               	iorwf	pid_pwm2_vout_run@ei+1,w
  8351  0962  1D03               	btfss	3,2
  8352  0963  2983               	goto	l673
  8353                           
  8354                           ;sample.c: 312: if(t16>32)ei=1;
  8355  0964  0823               	movf	pid_pwm2_vout_run@t16+1,w
  8356  0965  3A80               	xorlw	128
  8357  0966  00F9               	movwf	??_pid_pwm2_vout_run
  8358  0967  3080               	movlw	128
  8359  0968  0279               	subwf	??_pid_pwm2_vout_run,w
  8360  0969  1D03               	skipz
  8361  096A  296D               	goto	u2105
  8362  096B  3021               	movlw	33
  8363  096C  0222               	subwf	pid_pwm2_vout_run@t16,w
  8364  096D                     u2105:	
  8365  096D  1C03               	skipc
  8366  096E  2973               	goto	l3563
  8367  096F  0020               	movlb	0	; select bank0
  8368  0970  01A0               	clrf	pid_pwm2_vout_run@ei
  8369  0971  0AA0               	incf	pid_pwm2_vout_run@ei,f
  8370  0972  01A1               	clrf	pid_pwm2_vout_run@ei+1
  8371  0973                     l3563:	
  8372                           
  8373                           ;sample.c: 313: if(t16<-32)ei=-1;
  8374  0973  0020               	movlb	0	; select bank0
  8375  0974  0823               	movf	pid_pwm2_vout_run@t16+1,w
  8376  0975  3A80               	xorlw	128
  8377  0976  00F9               	movwf	??_pid_pwm2_vout_run
  8378  0977  307F               	movlw	127
  8379  0978  0279               	subwf	??_pid_pwm2_vout_run,w
  8380  0979  1D03               	skipz
  8381  097A  297D               	goto	u2115
  8382  097B  30E0               	movlw	224
  8383  097C  0222               	subwf	pid_pwm2_vout_run@t16,w
  8384  097D                     u2115:	
  8385  097D  1803               	skipnc
  8386  097E  2983               	goto	l673
  8387  097F  30FF               	movlw	255
  8388  0980  0020               	movlb	0	; select bank0
  8389  0981  00A0               	movwf	pid_pwm2_vout_run@ei
  8390  0982  00A1               	movwf	pid_pwm2_vout_run@ei+1
  8391  0983                     l673:	
  8392                           
  8393                           ;sample.c: 314: }
  8394                           ;sample.c: 316: pwm2Ei=pwm2Ei+ei;
  8395  0983  0020               	movlb	0	; select bank0
  8396  0984  0820               	movf	pid_pwm2_vout_run@ei,w
  8397  0985  07D1               	addwf	_pwm2Ei,f
  8398  0986  0821               	movf	pid_pwm2_vout_run@ei+1,w
  8399  0987  3DD2               	addwfc	_pwm2Ei+1,f
  8400                           
  8401                           ;sample.c: 320: t16=voExpectAdcValue/12;
  8402  0988  300C               	movlw	12
  8403  0989  00F1               	movwf	___lwdiv@divisor
  8404  098A  01F2               	clrf	___lwdiv@divisor+1
  8405  098B  0860               	movf	_voExpectAdcValue+1,w
  8406  098C  00F4               	movwf	___lwdiv@dividend+1
  8407  098D  085F               	movf	_voExpectAdcValue,w
  8408  098E  00F3               	movwf	___lwdiv@dividend
  8409  098F  2200  3189         	fcall	___lwdiv
  8410  0991  0872               	movf	?___lwdiv+1,w
  8411  0992  00A3               	movwf	pid_pwm2_vout_run@t16+1
  8412  0993  0871               	movf	?___lwdiv,w
  8413  0994  00A2               	movwf	pid_pwm2_vout_run@t16
  8414                           
  8415                           ;sample.c: 322: pwm2DutyForVout=t16+pwm2Ei;
  8416  0995  0851               	movf	_pwm2Ei,w
  8417  0996  0722               	addwf	pid_pwm2_vout_run@t16,w
  8418  0997  00EB               	movwf	_pwm2DutyForVout
  8419  0998  0852               	movf	_pwm2Ei+1,w
  8420  0999  3D23               	addwfc	pid_pwm2_vout_run@t16+1,w
  8421  099A  00EC               	movwf	_pwm2DutyForVout+1
  8422                           
  8423                           ;sample.c: 323: if(pwm2DutyForVout>1580)pwm2DutyForVout=1580;
  8424  099B  3A80               	xorlw	128
  8425  099C  00F9               	movwf	??_pid_pwm2_vout_run
  8426  099D  3086               	movlw	134
  8427  099E  0279               	subwf	??_pid_pwm2_vout_run,w
  8428  099F  1D03               	skipz
  8429  09A0  29A3               	goto	u2125
  8430  09A1  302D               	movlw	45
  8431  09A2  026B               	subwf	_pwm2DutyForVout,w
  8432  09A3                     u2125:	
  8433  09A3  1C03               	skipc
  8434  09A4  29AA               	goto	l676
  8435  09A5  302C               	movlw	44
  8436  09A6  0020               	movlb	0	; select bank0
  8437  09A7  00EB               	movwf	_pwm2DutyForVout
  8438  09A8  3006               	movlw	6
  8439  09A9  00EC               	movwf	_pwm2DutyForVout+1
  8440  09AA                     l676:	
  8441                           
  8442                           ;sample.c: 324: if(pwm2DutyForVout<2)pwm2DutyForVout=2;
  8443  09AA  0020               	movlb	0	; select bank0
  8444  09AB  086C               	movf	_pwm2DutyForVout+1,w
  8445  09AC  3A80               	xorlw	128
  8446  09AD  00F9               	movwf	??_pid_pwm2_vout_run
  8447  09AE  3080               	movlw	128
  8448  09AF  0279               	subwf	??_pid_pwm2_vout_run,w
  8449  09B0  1D03               	skipz
  8450  09B1  29B4               	goto	u2135
  8451  09B2  3002               	movlw	2
  8452  09B3  026B               	subwf	_pwm2DutyForVout,w
  8453  09B4                     u2135:	
  8454  09B4  1803               	skipnc
  8455  09B5  29BA               	goto	l3577
  8456  09B6  3002               	movlw	2
  8457  09B7  0020               	movlb	0	; select bank0
  8458  09B8  00EB               	movwf	_pwm2DutyForVout
  8459  09B9  01EC               	clrf	_pwm2DutyForVout+1
  8460  09BA                     l3577:	
  8461                           
  8462                           ;sample.c: 325: set_vout_pwm2_duty(pwm2DutyForVout);
  8463  09BA  0020               	movlb	0	; select bank0
  8464  09BB  086C               	movf	_pwm2DutyForVout+1,w
  8465  09BC  00F4               	movwf	set_vout_pwm2_duty@duty+1
  8466  09BD  086B               	movf	_pwm2DutyForVout,w
  8467  09BE  00F3               	movwf	set_vout_pwm2_duty@duty
  8468  09BF  2A25               	ljmp	l3017
  8469  09C0                     __end_of_pid_pwm2_vout_run:	
  8470  09C0                     __ptext9:	
  8471 ;; *************** function ___awdiv *****************
  8472 ;; Defined at:
  8473 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  8474 ;; Parameters:    Size  Location     Type
  8475 ;;  divisor         2    1[COMMON] int 
  8476 ;;  dividend        2    3[COMMON] int 
  8477 ;; Auto vars:     Size  Location     Type
  8478 ;;  quotient        2    7[COMMON] int 
  8479 ;;  sign            1    6[COMMON] unsigned char 
  8480 ;;  counter         1    5[COMMON] unsigned char 
  8481 ;; Return value:  Size  Location     Type
  8482 ;;                  2    1[COMMON] int 
  8483 ;; Registers used:
  8484 ;;		wreg, status,2, status,0
  8485 ;; Tracked objects:
  8486 ;;		On entry : 1F/0
  8487 ;;		On exit  : 1F/0
  8488 ;;		Unchanged: 1F/0
  8489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8490 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8491 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8493 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8494 ;;Total ram usage:        8 bytes
  8495 ;; Hardware stack levels used:    1
  8496 ;; Hardware stack levels required when called:    1
  8497 ;; This function calls:
  8498 ;;		Nothing
  8499 ;; This function is called by:
  8500 ;;		_pid_pwm2_vout_run
  8501 ;; This function uses a non-reentrant model
  8502 ;;
  8503                           
  8504                           
  8505                           ;psect for function ___awdiv
  8506  09C0                     ___awdiv:	
  8507                           
  8508                           ;incstack = 0
  8509                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  8510  09C0  01F6               	clrf	___awdiv@sign
  8511  09C1  1FF2               	btfss	___awdiv@divisor+1,7
  8512  09C2  29CA               	goto	l3287
  8513  09C3  09F1               	comf	___awdiv@divisor,f
  8514  09C4  09F2               	comf	___awdiv@divisor+1,f
  8515  09C5  0AF1               	incf	___awdiv@divisor,f
  8516  09C6  1903               	skipnz
  8517  09C7  0AF2               	incf	___awdiv@divisor+1,f
  8518  09C8  01F6               	clrf	___awdiv@sign
  8519  09C9  0AF6               	incf	___awdiv@sign,f
  8520  09CA                     l3287:	
  8521  09CA  1FF4               	btfss	___awdiv@dividend+1,7
  8522  09CB  29D3               	goto	l3293
  8523  09CC  09F3               	comf	___awdiv@dividend,f
  8524  09CD  09F4               	comf	___awdiv@dividend+1,f
  8525  09CE  0AF3               	incf	___awdiv@dividend,f
  8526  09CF  1903               	skipnz
  8527  09D0  0AF4               	incf	___awdiv@dividend+1,f
  8528  09D1  3001               	movlw	1
  8529  09D2  06F6               	xorwf	___awdiv@sign,f
  8530  09D3                     l3293:	
  8531  09D3  01F7               	clrf	___awdiv@quotient
  8532  09D4  01F8               	clrf	___awdiv@quotient+1
  8533  09D5  0871               	movf	___awdiv@divisor,w
  8534  09D6  0472               	iorwf	___awdiv@divisor+1,w
  8535  09D7  1903               	btfsc	3,2
  8536  09D8  29F3               	goto	l3315
  8537  09D9  01F5               	clrf	___awdiv@counter
  8538  09DA                     L2:	
  8539  09DA  0AF5               	incf	___awdiv@counter,f
  8540  09DB  1BF2               	btfsc	___awdiv@divisor+1,7
  8541  09DC  29E0               	goto	l3303
  8542  09DD  35F1               	lslf	___awdiv@divisor,f
  8543  09DE  0DF2               	rlf	___awdiv@divisor+1,f
  8544  09DF  29DA               	goto	L2
  8545  09E0                     l3303:	
  8546  09E0  35F7               	lslf	___awdiv@quotient,f
  8547  09E1  0DF8               	rlf	___awdiv@quotient+1,f
  8548  09E2  0872               	movf	___awdiv@divisor+1,w
  8549  09E3  0274               	subwf	___awdiv@dividend+1,w
  8550  09E4  1D03               	skipz
  8551  09E5  29E8               	goto	u1825
  8552  09E6  0871               	movf	___awdiv@divisor,w
  8553  09E7  0273               	subwf	___awdiv@dividend,w
  8554  09E8                     u1825:	
  8555  09E8  1C03               	skipc
  8556  09E9  29EF               	goto	l3311
  8557  09EA  0871               	movf	___awdiv@divisor,w
  8558  09EB  02F3               	subwf	___awdiv@dividend,f
  8559  09EC  0872               	movf	___awdiv@divisor+1,w
  8560  09ED  3BF4               	subwfb	___awdiv@dividend+1,f
  8561  09EE  1477               	bsf	___awdiv@quotient,0
  8562  09EF                     l3311:	
  8563  09EF  36F2               	lsrf	___awdiv@divisor+1,f
  8564  09F0  0CF1               	rrf	___awdiv@divisor,f
  8565  09F1  0BF5               	decfsz	___awdiv@counter,f
  8566  09F2  29E0               	goto	l3303
  8567  09F3                     l3315:	
  8568  09F3  0876               	movf	___awdiv@sign,w
  8569  09F4  1903               	btfsc	3,2
  8570  09F5  29FB               	goto	l3319
  8571  09F6  09F7               	comf	___awdiv@quotient,f
  8572  09F7  09F8               	comf	___awdiv@quotient+1,f
  8573  09F8  0AF7               	incf	___awdiv@quotient,f
  8574  09F9  1903               	skipnz
  8575  09FA  0AF8               	incf	___awdiv@quotient+1,f
  8576  09FB                     l3319:	
  8577  09FB  0878               	movf	___awdiv@quotient+1,w
  8578  09FC  00F2               	movwf	?___awdiv+1
  8579  09FD  0877               	movf	___awdiv@quotient,w
  8580  09FE  00F1               	movwf	?___awdiv
  8581  09FF  0008               	return
  8582  0A00                     __end_of___awdiv:	
  8583  0A00                     __ptext8:	
  8584 ;; *************** function ___lwdiv *****************
  8585 ;; Defined at:
  8586 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  8587 ;; Parameters:    Size  Location     Type
  8588 ;;  divisor         2    1[COMMON] unsigned int 
  8589 ;;  dividend        2    3[COMMON] unsigned int 
  8590 ;; Auto vars:     Size  Location     Type
  8591 ;;  quotient        2    5[COMMON] unsigned int 
  8592 ;;  counter         1    7[COMMON] unsigned char 
  8593 ;; Return value:  Size  Location     Type
  8594 ;;                  2    1[COMMON] unsigned int 
  8595 ;; Registers used:
  8596 ;;		wreg, status,2, status,0
  8597 ;; Tracked objects:
  8598 ;;		On entry : 1F/0
  8599 ;;		On exit  : 1F/0
  8600 ;;		Unchanged: 1F/0
  8601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8602 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8603 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8605 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8606 ;;Total ram usage:        7 bytes
  8607 ;; Hardware stack levels used:    1
  8608 ;; Hardware stack levels required when called:    1
  8609 ;; This function calls:
  8610 ;;		Nothing
  8611 ;; This function is called by:
  8612 ;;		_pid_pwm2_vout_run
  8613 ;; This function uses a non-reentrant model
  8614 ;;
  8615                           
  8616                           
  8617                           ;psect for function ___lwdiv
  8618  0A00                     ___lwdiv:	
  8619                           
  8620                           ;incstack = 0
  8621                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  8622  0A00  01F5               	clrf	___lwdiv@quotient
  8623  0A01  01F6               	clrf	___lwdiv@quotient+1
  8624  0A02  0871               	movf	___lwdiv@divisor,w
  8625  0A03  0472               	iorwf	___lwdiv@divisor+1,w
  8626  0A04  1903               	btfsc	3,2
  8627  0A05  2A20               	goto	l3371
  8628  0A06  01F7               	clrf	___lwdiv@counter
  8629  0A07                     L1:	
  8630  0A07  0AF7               	incf	___lwdiv@counter,f
  8631  0A08  1BF2               	btfsc	___lwdiv@divisor+1,7
  8632  0A09  2A0D               	goto	l3359
  8633  0A0A  35F1               	lslf	___lwdiv@divisor,f
  8634  0A0B  0DF2               	rlf	___lwdiv@divisor+1,f
  8635  0A0C  2A07               	goto	L1
  8636  0A0D                     l3359:	
  8637  0A0D  35F5               	lslf	___lwdiv@quotient,f
  8638  0A0E  0DF6               	rlf	___lwdiv@quotient+1,f
  8639  0A0F  0872               	movf	___lwdiv@divisor+1,w
  8640  0A10  0274               	subwf	___lwdiv@dividend+1,w
  8641  0A11  1D03               	skipz
  8642  0A12  2A15               	goto	u1915
  8643  0A13  0871               	movf	___lwdiv@divisor,w
  8644  0A14  0273               	subwf	___lwdiv@dividend,w
  8645  0A15                     u1915:	
  8646  0A15  1C03               	skipc
  8647  0A16  2A1C               	goto	l3367
  8648  0A17  0871               	movf	___lwdiv@divisor,w
  8649  0A18  02F3               	subwf	___lwdiv@dividend,f
  8650  0A19  0872               	movf	___lwdiv@divisor+1,w
  8651  0A1A  3BF4               	subwfb	___lwdiv@dividend+1,f
  8652  0A1B  1475               	bsf	___lwdiv@quotient,0
  8653  0A1C                     l3367:	
  8654  0A1C  36F2               	lsrf	___lwdiv@divisor+1,f
  8655  0A1D  0CF1               	rrf	___lwdiv@divisor,f
  8656  0A1E  0BF7               	decfsz	___lwdiv@counter,f
  8657  0A1F  2A0D               	goto	l3359
  8658  0A20                     l3371:	
  8659  0A20  0876               	movf	___lwdiv@quotient+1,w
  8660  0A21  00F2               	movwf	?___lwdiv+1
  8661  0A22  0875               	movf	___lwdiv@quotient,w
  8662  0A23  00F1               	movwf	?___lwdiv
  8663  0A24  0008               	return
  8664  0A25                     __end_of___lwdiv:	
  8665  0A25                     __ptext6:	
  8666 ;; *************** function _set_vout_pwm2_duty *****************
  8667 ;; Defined at:
  8668 ;;		line 62 in file "src/api/sample.c"
  8669 ;; Parameters:    Size  Location     Type
  8670 ;;  duty            2    3[COMMON] unsigned int 
  8671 ;; Auto vars:     Size  Location     Type
  8672 ;;  t16             2    5[COMMON] unsigned int 
  8673 ;; Return value:  Size  Location     Type
  8674 ;;                  1    wreg      void 
  8675 ;; Registers used:
  8676 ;;		wreg, pclath, cstack
  8677 ;; Tracked objects:
  8678 ;;		On entry : 1E/1
  8679 ;;		On exit  : 1F/1B
  8680 ;;		Unchanged: 0/0
  8681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8682 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8683 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8685 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8686 ;;Total ram usage:        4 bytes
  8687 ;; Hardware stack levels used:    1
  8688 ;; Hardware stack levels required when called:    2
  8689 ;; This function calls:
  8690 ;;		_get_vout_pwm2_duty
  8691 ;; This function is called by:
  8692 ;;		_pid_pwm2_vout_run
  8693 ;;		_main
  8694 ;; This function uses a non-reentrant model
  8695 ;;
  8696                           
  8697                           
  8698                           ;psect for function _set_vout_pwm2_duty
  8699  0A25                     _set_vout_pwm2_duty:	
  8700  0A25                     l3017:	
  8701                           ;incstack = 0
  8702                           ; Regs used in _set_vout_pwm2_duty: [wreg+pclath+cstack]
  8703                           
  8704                           
  8705                           ;sample.c: 64: uint16_t t16;
  8706                           ;sample.c: 65: t16=get_vout_pwm2_duty();
  8707  0A25  223A  3189         	fcall	_get_vout_pwm2_duty
  8708  0A27  0872               	movf	?_get_vout_pwm2_duty+1,w
  8709  0A28  00F6               	movwf	set_vout_pwm2_duty@t16+1
  8710  0A29  0871               	movf	?_get_vout_pwm2_duty,w
  8711  0A2A  00F5               	movwf	set_vout_pwm2_duty@t16
  8712                           
  8713                           ;sample.c: 66: if(t16==duty)return;
  8714  0A2B  0874               	movf	set_vout_pwm2_duty@duty+1,w
  8715  0A2C  0676               	xorwf	set_vout_pwm2_duty@t16+1,w
  8716  0A2D  1D03               	skipz
  8717  0A2E  2A31               	goto	u1475
  8718  0A2F  0873               	movf	set_vout_pwm2_duty@duty,w
  8719  0A30  0675               	xorwf	set_vout_pwm2_duty@t16,w
  8720  0A31                     u1475:	
  8721  0A31  1903               	btfsc	3,2
  8722  0A32  0008               	return
  8723                           
  8724                           ;sample.c: 67: PWM2CONbits.EN = 0;
  8725  0A33  13AB               	bcf	43,7	;volatile
  8726                           
  8727                           ;sample.c: 68: PWM2DCL= (uint8_t)(duty&0xff);
  8728  0A34  0873               	movf	set_vout_pwm2_duty@duty,w
  8729  0A35  00A3               	movwf	35	;volatile
  8730                           
  8731                           ;sample.c: 69: PWM2DCH=(uint8_t)(duty>>8);
  8732  0A36  0874               	movf	set_vout_pwm2_duty@duty+1,w
  8733  0A37  00A4               	movwf	36	;volatile
  8734                           
  8735                           ;sample.c: 70: PWM2CONbits.EN = 1;
  8736  0A38  17AB               	bsf	43,7	;volatile
  8737  0A39  0008               	return
  8738  0A3A                     __end_of_set_vout_pwm2_duty:	
  8739  0A3A                     __ptext7:	
  8740 ;; *************** function _get_vout_pwm2_duty *****************
  8741 ;; Defined at:
  8742 ;;		line 57 in file "src/api/sample.c"
  8743 ;; Parameters:    Size  Location     Type
  8744 ;;		None
  8745 ;; Auto vars:     Size  Location     Type
  8746 ;;		None
  8747 ;; Return value:  Size  Location     Type
  8748 ;;                  2    1[COMMON] unsigned int 
  8749 ;; Registers used:
  8750 ;;		wreg
  8751 ;; Tracked objects:
  8752 ;;		On entry : 1E/1
  8753 ;;		On exit  : 1F/1B
  8754 ;;		Unchanged: 0/0
  8755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8756 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8759 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8760 ;;Total ram usage:        2 bytes
  8761 ;; Hardware stack levels used:    1
  8762 ;; Hardware stack levels required when called:    1
  8763 ;; This function calls:
  8764 ;;		Nothing
  8765 ;; This function is called by:
  8766 ;;		_set_vout_pwm2_duty
  8767 ;; This function uses a non-reentrant model
  8768 ;;
  8769                           
  8770                           
  8771                           ;psect for function _get_vout_pwm2_duty
  8772  0A3A                     _get_vout_pwm2_duty:	
  8773                           
  8774                           ;sample.c: 59: return ((PWM2DCH<<8)|PWM2DCL);
  8775                           
  8776                           ;incstack = 0
  8777                           ; Regs used in _get_vout_pwm2_duty: [wreg]
  8778  0A3A  003B               	movlb	27	; select bank27
  8779  0A3B  0824               	movf	36,w	;volatile
  8780  0A3C  00F2               	movwf	?_get_vout_pwm2_duty+1
  8781  0A3D  01F1               	clrf	?_get_vout_pwm2_duty
  8782  0A3E  0823               	movf	35,w	;volatile
  8783  0A3F  04F1               	iorwf	?_get_vout_pwm2_duty,f
  8784  0A40  0008               	return
  8785  0A41                     __end_of_get_vout_pwm2_duty:	
  8786                           
  8787                           	psect	text10
  8788  0A41                     __ptext10:	
  8789 ;; *************** function _pid_pwm1_idrv_run *****************
  8790 ;; Defined at:
  8791 ;;		line 273 in file "src/api/sample.c"
  8792 ;; Parameters:    Size  Location     Type
  8793 ;;		None
  8794 ;; Auto vars:     Size  Location     Type
  8795 ;;  t32             4   18[BANK2 ] long 
  8796 ;;  ed              4    8[BANK2 ] long 
  8797 ;;  ei              4    4[BANK2 ] long 
  8798 ;;  ep              4    0[BANK2 ] long 
  8799 ;;  t16             2   16[BANK2 ] unsigned int 
  8800 ;; Return value:  Size  Location     Type
  8801 ;;                  1    wreg      void 
  8802 ;; Registers used:
  8803 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8804 ;; Tracked objects:
  8805 ;;		On entry : 1F/0
  8806 ;;		On exit  : 1F/1B
  8807 ;;		Unchanged: 0/0
  8808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8810 ;;      Locals:         0       0       0      22       0       0       0       0       0       0       0       0       
      +0       0
  8811 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8812 ;;      Totals:         0      12       0      22       0       0       0       0       0       0       0       0       
      +0       0
  8813 ;;Total ram usage:       34 bytes
  8814 ;; Hardware stack levels used:    1
  8815 ;; Hardware stack levels required when called:    3
  8816 ;; This function calls:
  8817 ;;		___aldiv
  8818 ;;		___lmul
  8819 ;;		_set_idrv_pwm1_duty
  8820 ;; This function is called by:
  8821 ;;		_main
  8822 ;; This function uses a non-reentrant model
  8823 ;;
  8824                           
  8825                           
  8826                           ;psect for function _pid_pwm1_idrv_run
  8827  0A41                     _pid_pwm1_idrv_run:	
  8828                           
  8829                           ;sample.c: 276: int32_t ep,ei,ed;
  8830                           ;sample.c: 277: int32_t t32;
  8831                           ;sample.c: 278: t32=(resRs-resRc);
  8832                           
  8833                           ;incstack = 0
  8834                           ; Regs used in _pid_pwm1_idrv_run: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8835  0A41  0021               	movlb	1	; select bank1
  8836  0A42  085F               	movf	(_resRs+3)^(0+128),w
  8837  0A43  0022               	movlb	2	; select bank2
  8838  0A44  00E9               	movwf	(pid_pwm1_idrv_run@t32+3)^(0+256)
  8839  0A45  0021               	movlb	1	; select bank1
  8840  0A46  085E               	movf	(_resRs+2)^(0+128),w
  8841  0A47  0022               	movlb	2	; select bank2
  8842  0A48  00E8               	movwf	(pid_pwm1_idrv_run@t32+2)^(0+256)
  8843  0A49  0021               	movlb	1	; select bank1
  8844  0A4A  085D               	movf	(_resRs+1)^(0+128),w
  8845  0A4B  0022               	movlb	2	; select bank2
  8846  0A4C  00E7               	movwf	(pid_pwm1_idrv_run@t32+1)^(0+256)
  8847  0A4D  0021               	movlb	1	; select bank1
  8848  0A4E  085C               	movf	_resRs^(0+128),w
  8849  0A4F  0022               	movlb	2	; select bank2
  8850  0A50  00E6               	movwf	pid_pwm1_idrv_run@t32^(0+256)
  8851  0A51  0020               	movlb	0	; select bank0
  8852  0A52  0867               	movf	_resRc,w
  8853  0A53  0022               	movlb	2	; select bank2
  8854  0A54  02E6               	subwf	pid_pwm1_idrv_run@t32^(0+256),f
  8855  0A55  0020               	movlb	0	; select bank0
  8856  0A56  0868               	movf	_resRc+1,w
  8857  0A57  0022               	movlb	2	; select bank2
  8858  0A58  3BE7               	subwfb	(pid_pwm1_idrv_run@t32+1)^(0+256),f
  8859  0A59  0020               	movlb	0	; select bank0
  8860  0A5A  0869               	movf	_resRc+2,w
  8861  0A5B  0022               	movlb	2	; select bank2
  8862  0A5C  3BE8               	subwfb	(pid_pwm1_idrv_run@t32+2)^(0+256),f
  8863  0A5D  0020               	movlb	0	; select bank0
  8864  0A5E  086A               	movf	_resRc+3,w
  8865  0A5F  0022               	movlb	2	; select bank2
  8866  0A60  3BE9               	subwfb	(pid_pwm1_idrv_run@t32+3)^(0+256),f
  8867                           
  8868                           ;sample.c: 279: t32=2000-t32;
  8869  0A61  30D0               	movlw	208
  8870  0A62  0020               	movlb	0	; select bank0
  8871  0A63  00B2               	movwf	??_pid_pwm1_idrv_run
  8872  0A64  3007               	movlw	7
  8873  0A65  00B3               	movwf	??_pid_pwm1_idrv_run+1
  8874  0A66  01B4               	clrf	??_pid_pwm1_idrv_run+2
  8875  0A67  01B5               	clrf	??_pid_pwm1_idrv_run+3
  8876  0A68  0022               	movlb	2	; select bank2
  8877  0A69  0866               	movf	pid_pwm1_idrv_run@t32^(0+256),w
  8878  0A6A  0020               	movlb	0	; select bank0
  8879  0A6B  02B2               	subwf	??_pid_pwm1_idrv_run,f
  8880  0A6C  0022               	movlb	2	; select bank2
  8881  0A6D  0867               	movf	(pid_pwm1_idrv_run@t32+1)^(0+256),w
  8882  0A6E  0020               	movlb	0	; select bank0
  8883  0A6F  3BB3               	subwfb	??_pid_pwm1_idrv_run+1,f
  8884  0A70  0022               	movlb	2	; select bank2
  8885  0A71  0868               	movf	(pid_pwm1_idrv_run@t32+2)^(0+256),w
  8886  0A72  0020               	movlb	0	; select bank0
  8887  0A73  3BB4               	subwfb	??_pid_pwm1_idrv_run+2,f
  8888  0A74  0022               	movlb	2	; select bank2
  8889  0A75  0869               	movf	(pid_pwm1_idrv_run@t32+3)^(0+256),w
  8890  0A76  0020               	movlb	0	; select bank0
  8891  0A77  3BB5               	subwfb	??_pid_pwm1_idrv_run+3,f
  8892  0A78  0835               	movf	??_pid_pwm1_idrv_run+3,w
  8893  0A79  2441  318A         	fcall	PL8	;call to abstracted procedure
  8894                           
  8895                           ;sample.c: 281: err[2]=err[1];
  8896  0A7B  30A4               	movlw	((low (_err| 0))& (0+255)+4)
  8897  0A7C  0086               	movwf	6
  8898  0A7D  0187               	clrf	7
  8899  0A7E  3F40               	moviw [0]fsr1
  8900  0A7F  0021               	movlb	1	; select bank1
  8901  0A80  00A8               	movwf	(_err^(0+128)+8)
  8902  0A81  3F41               	moviw [1]fsr1
  8903  0A82  00A9               	movwf	((_err+1)^(0+128)+8)
  8904  0A83  3F42               	moviw [2]fsr1
  8905  0A84  00AA               	movwf	((_err+2)^(0+128)+8)
  8906  0A85  3F43               	moviw [3]fsr1
  8907  0A86  00AB               	movwf	((_err+3)^(0+128)+8)
  8908                           
  8909                           ;sample.c: 282: err[1]=err[0];
  8910  0A87  0823               	movf	(_err+3)^(0+128),w
  8911  0A88  00A7               	movwf	((_err+3)^(0+128)+4)
  8912  0A89  0822               	movf	(_err+2)^(0+128),w
  8913  0A8A  00A6               	movwf	((_err+2)^(0+128)+4)
  8914  0A8B  0821               	movf	(_err+1)^(0+128),w
  8915  0A8C  00A5               	movwf	((_err+1)^(0+128)+4)
  8916  0A8D  0820               	movf	_err^(0+128),w
  8917  0A8E  00A4               	movwf	(_err^(0+128)+4)
  8918                           
  8919                           ;sample.c: 283: err[0]=t32;
  8920  0A8F  0022               	movlb	2	; select bank2
  8921  0A90  0869               	movf	(pid_pwm1_idrv_run@t32+3)^(0+256),w
  8922  0A91  0021               	movlb	1	; select bank1
  8923  0A92  00A3               	movwf	(_err+3)^(0+128)
  8924  0A93  0022               	movlb	2	; select bank2
  8925  0A94  0868               	movf	(pid_pwm1_idrv_run@t32+2)^(0+256),w
  8926  0A95  0021               	movlb	1	; select bank1
  8927  0A96  00A2               	movwf	(_err+2)^(0+128)
  8928  0A97  0022               	movlb	2	; select bank2
  8929  0A98  0867               	movf	(pid_pwm1_idrv_run@t32+1)^(0+256),w
  8930  0A99  0021               	movlb	1	; select bank1
  8931  0A9A  00A1               	movwf	(_err+1)^(0+128)
  8932  0A9B  0022               	movlb	2	; select bank2
  8933  0A9C  0866               	movf	pid_pwm1_idrv_run@t32^(0+256),w
  8934  0A9D  0021               	movlb	1	; select bank1
  8935  0A9E  00A0               	movwf	_err^(0+128)
  8936                           
  8937                           ;sample.c: 286: ep=(err[0]-err[1])*PidKp;
  8938  0A9F  0824               	movf	(_err^(0+128)+4),w
  8939  0AA0  0220               	subwf	_err^(0+128),w
  8940  0AA1  0020               	movlb	0	; select bank0
  8941  0AA2  00B2               	movwf	??_pid_pwm1_idrv_run
  8942  0AA3  0021               	movlb	1	; select bank1
  8943  0AA4  0825               	movf	((_err+1)^(0+128)+4),w
  8944  0AA5  3B21               	subwfb	(_err+1)^(0+128),w
  8945  0AA6  0020               	movlb	0	; select bank0
  8946  0AA7  00B3               	movwf	??_pid_pwm1_idrv_run+1
  8947  0AA8  0021               	movlb	1	; select bank1
  8948  0AA9  0826               	movf	((_err+2)^(0+128)+4),w
  8949  0AAA  3B22               	subwfb	(_err+2)^(0+128),w
  8950  0AAB  0020               	movlb	0	; select bank0
  8951  0AAC  00B4               	movwf	??_pid_pwm1_idrv_run+2
  8952  0AAD  0021               	movlb	1	; select bank1
  8953  0AAE  0827               	movf	((_err+3)^(0+128)+4),w
  8954  0AAF  3B23               	subwfb	(_err+3)^(0+128),w
  8955  0AB0  0020               	movlb	0	; select bank0
  8956  0AB1  00B5               	movwf	??_pid_pwm1_idrv_run+3
  8957  0AB2  2431               	fcall	PL6	;call to abstracted procedure
  8958  0AB3  3185  25DE  318A   	fcall	___lmul
  8959  0AB6  0874               	movf	?___lmul+3,w
  8960  0AB7  0022               	movlb	2	; select bank2
  8961  0AB8  00D7               	movwf	(pid_pwm1_idrv_run@ep+3)^(0+256)
  8962  0AB9  0873               	movf	?___lmul+2,w
  8963  0ABA  00D6               	movwf	(pid_pwm1_idrv_run@ep+2)^(0+256)
  8964  0ABB  0872               	movf	?___lmul+1,w
  8965  0ABC  00D5               	movwf	(pid_pwm1_idrv_run@ep+1)^(0+256)
  8966  0ABD  0871               	movf	?___lmul,w
  8967  0ABE  00D4               	movwf	pid_pwm1_idrv_run@ep^(0+256)
  8968                           
  8969                           ;sample.c: 287: ei=PidKp*err[0]/PidTi;
  8970  0ABF  0021               	movlb	1	; select bank1
  8971  0AC0  0833               	movf	(_PidTi+3)^(0+128),w
  8972  0AC1  0020               	movlb	0	; select bank0
  8973  0AC2  00A7               	movwf	___aldiv@divisor+3
  8974  0AC3  0021               	movlb	1	; select bank1
  8975  0AC4  0832               	movf	(_PidTi+2)^(0+128),w
  8976  0AC5  0020               	movlb	0	; select bank0
  8977  0AC6  00A6               	movwf	___aldiv@divisor+2
  8978  0AC7  0021               	movlb	1	; select bank1
  8979  0AC8  0831               	movf	(_PidTi+1)^(0+128),w
  8980  0AC9  0020               	movlb	0	; select bank0
  8981  0ACA  00A5               	movwf	___aldiv@divisor+1
  8982  0ACB  0021               	movlb	1	; select bank1
  8983  0ACC  0830               	movf	_PidTi^(0+128),w
  8984  0ACD  0020               	movlb	0	; select bank0
  8985  0ACE  00A4               	movwf	___aldiv@divisor
  8986  0ACF  0021               	movlb	1	; select bank1
  8987  0AD0  0823               	movf	(_err+3)^(0+128),w
  8988  0AD1  00F4               	movwf	___lmul@multiplier+3
  8989  0AD2  0822               	movf	(_err+2)^(0+128),w
  8990  0AD3  00F3               	movwf	___lmul@multiplier+2
  8991  0AD4  0821               	movf	(_err+1)^(0+128),w
  8992  0AD5  00F2               	movwf	___lmul@multiplier+1
  8993  0AD6  0820               	movf	_err^(0+128),w
  8994  0AD7  00F1               	movwf	___lmul@multiplier
  8995  0AD8  0020               	movlb	0	; select bank0
  8996  0AD9  0850               	movf	_PidKp+3,w
  8997  0ADA  00F8               	movwf	___lmul@multiplicand+3
  8998  0ADB  084F               	movf	_PidKp+2,w
  8999  0ADC  00F7               	movwf	___lmul@multiplicand+2
  9000  0ADD  084E               	movf	_PidKp+1,w
  9001  0ADE  00F6               	movwf	___lmul@multiplicand+1
  9002  0ADF  084D               	movf	_PidKp,w
  9003  0AE0  00F5               	movwf	___lmul@multiplicand
  9004  0AE1  3185  25DE  318A   	fcall	___lmul
  9005  0AE4  3187  2742  318A   	fcall	PL2	;call to abstracted procedure
  9006  0AE7  3185  2572  318A   	fcall	___aldiv
  9007  0AEA  0827               	movf	?___aldiv+3,w
  9008  0AEB  0022               	movlb	2	; select bank2
  9009  0AEC  00DB               	movwf	(pid_pwm1_idrv_run@ei+3)^(0+256)
  9010  0AED  0020               	movlb	0	; select bank0
  9011  0AEE  0826               	movf	?___aldiv+2,w
  9012  0AEF  0022               	movlb	2	; select bank2
  9013  0AF0  00DA               	movwf	(pid_pwm1_idrv_run@ei+2)^(0+256)
  9014  0AF1  0020               	movlb	0	; select bank0
  9015  0AF2  0825               	movf	?___aldiv+1,w
  9016  0AF3  0022               	movlb	2	; select bank2
  9017  0AF4  00D9               	movwf	(pid_pwm1_idrv_run@ei+1)^(0+256)
  9018  0AF5  0020               	movlb	0	; select bank0
  9019  0AF6  0824               	movf	?___aldiv,w
  9020  0AF7  0022               	movlb	2	; select bank2
  9021  0AF8  00D8               	movwf	pid_pwm1_idrv_run@ei^(0+256)
  9022                           
  9023                           ;sample.c: 288: ed=(err[0]-2*err[1]+err[2])*PidKp*PidTd/120;;
  9024  0AF9  0021               	movlb	1	; select bank1
  9025  0AFA  0820               	movf	_err^(0+128),w
  9026  0AFB  0020               	movlb	0	; select bank0
  9027  0AFC  00B2               	movwf	??_pid_pwm1_idrv_run
  9028  0AFD  0021               	movlb	1	; select bank1
  9029  0AFE  0821               	movf	(_err+1)^(0+128),w
  9030  0AFF  0020               	movlb	0	; select bank0
  9031  0B00  00B3               	movwf	??_pid_pwm1_idrv_run+1
  9032  0B01  0021               	movlb	1	; select bank1
  9033  0B02  0822               	movf	(_err+2)^(0+128),w
  9034  0B03  0020               	movlb	0	; select bank0
  9035  0B04  00B4               	movwf	??_pid_pwm1_idrv_run+2
  9036  0B05  0021               	movlb	1	; select bank1
  9037  0B06  0823               	movf	(_err+3)^(0+128),w
  9038  0B07  0020               	movlb	0	; select bank0
  9039  0B08  00B5               	movwf	??_pid_pwm1_idrv_run+3
  9040  0B09  0021               	movlb	1	; select bank1
  9041  0B0A  0824               	movf	(_err^(0+128)+4),w
  9042  0B0B  0020               	movlb	0	; select bank0
  9043  0B0C  00B6               	movwf	??_pid_pwm1_idrv_run+4
  9044  0B0D  0021               	movlb	1	; select bank1
  9045  0B0E  0825               	movf	((_err+1)^(0+128)+4),w
  9046  0B0F  0020               	movlb	0	; select bank0
  9047  0B10  00B7               	movwf	??_pid_pwm1_idrv_run+5
  9048  0B11  0021               	movlb	1	; select bank1
  9049  0B12  0826               	movf	((_err+2)^(0+128)+4),w
  9050  0B13  0020               	movlb	0	; select bank0
  9051  0B14  00B8               	movwf	??_pid_pwm1_idrv_run+6
  9052  0B15  0021               	movlb	1	; select bank1
  9053  0B16  0827               	movf	((_err+3)^(0+128)+4),w
  9054  0B17  0020               	movlb	0	; select bank0
  9055  0B18  00B9               	movwf	??_pid_pwm1_idrv_run+7
  9056  0B19  35B6               	lslf	??_pid_pwm1_idrv_run+4,f
  9057  0B1A  0DB7               	rlf	??_pid_pwm1_idrv_run+5,f
  9058  0B1B  0DB8               	rlf	??_pid_pwm1_idrv_run+6,f
  9059  0B1C  0DB9               	rlf	??_pid_pwm1_idrv_run+7,f
  9060  0B1D  0021               	movlb	1	; select bank1
  9061  0B1E  0828               	movf	(_err^(0+128)+8),w
  9062  0B1F  0020               	movlb	0	; select bank0
  9063  0B20  00BA               	movwf	??_pid_pwm1_idrv_run+8
  9064  0B21  0021               	movlb	1	; select bank1
  9065  0B22  0829               	movf	((_err+1)^(0+128)+8),w
  9066  0B23  0020               	movlb	0	; select bank0
  9067  0B24  00BB               	movwf	??_pid_pwm1_idrv_run+9
  9068  0B25  0021               	movlb	1	; select bank1
  9069  0B26  082A               	movf	((_err+2)^(0+128)+8),w
  9070  0B27  0020               	movlb	0	; select bank0
  9071  0B28  00BC               	movwf	??_pid_pwm1_idrv_run+10
  9072  0B29  0021               	movlb	1	; select bank1
  9073  0B2A  082B               	movf	((_err+3)^(0+128)+8),w
  9074  0B2B  0020               	movlb	0	; select bank0
  9075  0B2C  00BD               	movwf	??_pid_pwm1_idrv_run+11
  9076  0B2D  0836               	movf	??_pid_pwm1_idrv_run+4,w
  9077  0B2E  02BA               	subwf	??_pid_pwm1_idrv_run+8,f
  9078  0B2F  0837               	movf	??_pid_pwm1_idrv_run+5,w
  9079  0B30  3BBB               	subwfb	??_pid_pwm1_idrv_run+9,f
  9080  0B31  0838               	movf	??_pid_pwm1_idrv_run+6,w
  9081  0B32  3BBC               	subwfb	??_pid_pwm1_idrv_run+10,f
  9082  0B33  0839               	movf	??_pid_pwm1_idrv_run+7,w
  9083  0B34  3BBD               	subwfb	??_pid_pwm1_idrv_run+11,f
  9084  0B35  083A               	movf	??_pid_pwm1_idrv_run+8,w
  9085  0B36  07B2               	addwf	??_pid_pwm1_idrv_run,f
  9086  0B37  083B               	movf	??_pid_pwm1_idrv_run+9,w
  9087  0B38  3DB3               	addwfc	??_pid_pwm1_idrv_run+1,f
  9088  0B39  083C               	movf	??_pid_pwm1_idrv_run+10,w
  9089  0B3A  3DB4               	addwfc	??_pid_pwm1_idrv_run+2,f
  9090  0B3B  083D               	movf	??_pid_pwm1_idrv_run+11,w
  9091  0B3C  3DB5               	addwfc	??_pid_pwm1_idrv_run+3,f
  9092  0B3D  0835               	movf	??_pid_pwm1_idrv_run+3,w
  9093  0B3E  2431               	fcall	PL6	;call to abstracted procedure
  9094  0B3F  3185  25DE  318A   	fcall	___lmul
  9095  0B42  0874               	movf	?___lmul+3,w
  9096  0B43  0022               	movlb	2	; select bank2
  9097  0B44  00E3               	movwf	(_pid_pwm1_idrv_run$2201+3)^(0+256)
  9098  0B45  0873               	movf	?___lmul+2,w
  9099  0B46  00E2               	movwf	(_pid_pwm1_idrv_run$2201+2)^(0+256)
  9100  0B47  0872               	movf	?___lmul+1,w
  9101  0B48  00E1               	movwf	(_pid_pwm1_idrv_run$2201+1)^(0+256)
  9102  0B49  0871               	movf	?___lmul,w
  9103  0B4A  00E0               	movwf	_pid_pwm1_idrv_run$2201^(0+256)
  9104                           
  9105                           ;sample.c: 288: ed=(err[0]-2*err[1]+err[2])*PidKp*PidTd/120;;
  9106  0B4B  3078               	movlw	120
  9107  0B4C  0020               	movlb	0	; select bank0
  9108  0B4D  00A4               	movwf	___aldiv@divisor
  9109  0B4E  01A5               	clrf	___aldiv@divisor+1
  9110  0B4F  01A6               	clrf	___aldiv@divisor+2
  9111  0B50  01A7               	clrf	___aldiv@divisor+3
  9112  0B51  0022               	movlb	2	; select bank2
  9113  0B52  0863               	movf	(_pid_pwm1_idrv_run$2201+3)^(0+256),w
  9114  0B53  00F4               	movwf	___lmul@multiplier+3
  9115  0B54  0862               	movf	(_pid_pwm1_idrv_run$2201+2)^(0+256),w
  9116  0B55  00F3               	movwf	___lmul@multiplier+2
  9117  0B56  0861               	movf	(_pid_pwm1_idrv_run$2201+1)^(0+256),w
  9118  0B57  00F2               	movwf	___lmul@multiplier+1
  9119  0B58  0860               	movf	_pid_pwm1_idrv_run$2201^(0+256),w
  9120  0B59  00F1               	movwf	___lmul@multiplier
  9121  0B5A  0021               	movlb	1	; select bank1
  9122  0B5B  082F               	movf	(_PidTd+3)^(0+128),w
  9123  0B5C  00F8               	movwf	___lmul@multiplicand+3
  9124  0B5D  082E               	movf	(_PidTd+2)^(0+128),w
  9125  0B5E  00F7               	movwf	___lmul@multiplicand+2
  9126  0B5F  082D               	movf	(_PidTd+1)^(0+128),w
  9127  0B60  00F6               	movwf	___lmul@multiplicand+1
  9128  0B61  082C               	movf	_PidTd^(0+128),w
  9129  0B62  00F5               	movwf	___lmul@multiplicand
  9130  0B63  3185  25DE  318A   	fcall	___lmul
  9131  0B66  3187  2742  318A   	fcall	PL2	;call to abstracted procedure
  9132  0B69  3185  2572  318A   	fcall	___aldiv
  9133  0B6C  0827               	movf	?___aldiv+3,w
  9134  0B6D  0022               	movlb	2	; select bank2
  9135  0B6E  00DF               	movwf	(pid_pwm1_idrv_run@ed+3)^(0+256)
  9136  0B6F  0020               	movlb	0	; select bank0
  9137  0B70  0826               	movf	?___aldiv+2,w
  9138  0B71  0022               	movlb	2	; select bank2
  9139  0B72  00DE               	movwf	(pid_pwm1_idrv_run@ed+2)^(0+256)
  9140  0B73  0020               	movlb	0	; select bank0
  9141  0B74  0825               	movf	?___aldiv+1,w
  9142  0B75  0022               	movlb	2	; select bank2
  9143  0B76  00DD               	movwf	(pid_pwm1_idrv_run@ed+1)^(0+256)
  9144  0B77  0020               	movlb	0	; select bank0
  9145  0B78  0824               	movf	?___aldiv,w
  9146  0B79  0022               	movlb	2	; select bank2
  9147  0B7A  00DC               	movwf	pid_pwm1_idrv_run@ed^(0+256)
  9148                           
  9149                           ;sample.c: 290: t32=ep+ei+ed;
  9150  0B7B  0854               	movf	pid_pwm1_idrv_run@ep^(0+256),w
  9151  0B7C  0758               	addwf	pid_pwm1_idrv_run@ei^(0+256),w
  9152  0B7D  0020               	movlb	0	; select bank0
  9153  0B7E  00B2               	movwf	??_pid_pwm1_idrv_run
  9154  0B7F  0022               	movlb	2	; select bank2
  9155  0B80  0855               	movf	(pid_pwm1_idrv_run@ep+1)^(0+256),w
  9156  0B81  3D59               	addwfc	(pid_pwm1_idrv_run@ei+1)^(0+256),w
  9157  0B82  0020               	movlb	0	; select bank0
  9158  0B83  00B3               	movwf	??_pid_pwm1_idrv_run+1
  9159  0B84  0022               	movlb	2	; select bank2
  9160  0B85  0856               	movf	(pid_pwm1_idrv_run@ep+2)^(0+256),w
  9161  0B86  3D5A               	addwfc	(pid_pwm1_idrv_run@ei+2)^(0+256),w
  9162  0B87  0020               	movlb	0	; select bank0
  9163  0B88  00B4               	movwf	??_pid_pwm1_idrv_run+2
  9164  0B89  0022               	movlb	2	; select bank2
  9165  0B8A  0857               	movf	(pid_pwm1_idrv_run@ep+3)^(0+256),w
  9166  0B8B  3D5B               	addwfc	(pid_pwm1_idrv_run@ei+3)^(0+256),w
  9167  0B8C  0020               	movlb	0	; select bank0
  9168  0B8D  00B5               	movwf	??_pid_pwm1_idrv_run+3
  9169  0B8E  2441               	fcall	PL8	;call to abstracted procedure
  9170  0B8F  085C               	movf	pid_pwm1_idrv_run@ed^(0+256),w
  9171  0B90  07E6               	addwf	pid_pwm1_idrv_run@t32^(0+256),f
  9172  0B91  085D               	movf	(pid_pwm1_idrv_run@ed+1)^(0+256),w
  9173  0B92  3DE7               	addwfc	(pid_pwm1_idrv_run@t32+1)^(0+256),f
  9174  0B93  085E               	movf	(pid_pwm1_idrv_run@ed+2)^(0+256),w
  9175  0B94  3DE8               	addwfc	(pid_pwm1_idrv_run@t32+2)^(0+256),f
  9176  0B95  085F               	movf	(pid_pwm1_idrv_run@ed+3)^(0+256),w
  9177  0B96  3DE9               	addwfc	(pid_pwm1_idrv_run@t32+3)^(0+256),f
  9178                           
  9179                           ;sample.c: 291: t32/=10000;
  9180  0B97  0020               	movlb	0	; select bank0
  9181  0B98  3027               	movlw	39
  9182  0B99  01A7               	clrf	___aldiv@divisor+3
  9183  0B9A  01A6               	clrf	___aldiv@divisor+2
  9184  0B9B  00A5               	movwf	___aldiv@divisor+1
  9185  0B9C  3010               	movlw	16
  9186  0B9D  00A4               	movwf	___aldiv@divisor
  9187  0B9E  0022               	movlb	2	; select bank2
  9188  0B9F  0869               	movf	(pid_pwm1_idrv_run@t32+3)^(0+256),w
  9189  0BA0  0020               	movlb	0	; select bank0
  9190  0BA1  00AB               	movwf	___aldiv@dividend+3
  9191  0BA2  0022               	movlb	2	; select bank2
  9192  0BA3  0868               	movf	(pid_pwm1_idrv_run@t32+2)^(0+256),w
  9193  0BA4  0020               	movlb	0	; select bank0
  9194  0BA5  00AA               	movwf	___aldiv@dividend+2
  9195  0BA6  0022               	movlb	2	; select bank2
  9196  0BA7  0867               	movf	(pid_pwm1_idrv_run@t32+1)^(0+256),w
  9197  0BA8  0020               	movlb	0	; select bank0
  9198  0BA9  00A9               	movwf	___aldiv@dividend+1
  9199  0BAA  0022               	movlb	2	; select bank2
  9200  0BAB  0866               	movf	pid_pwm1_idrv_run@t32^(0+256),w
  9201  0BAC  0020               	movlb	0	; select bank0
  9202  0BAD  00A8               	movwf	___aldiv@dividend
  9203  0BAE  3185  2572  318A   	fcall	___aldiv
  9204  0BB1  0827               	movf	?___aldiv+3,w
  9205  0BB2  0022               	movlb	2	; select bank2
  9206  0BB3  00E9               	movwf	(pid_pwm1_idrv_run@t32+3)^(0+256)
  9207  0BB4  0020               	movlb	0	; select bank0
  9208  0BB5  0826               	movf	?___aldiv+2,w
  9209  0BB6  0022               	movlb	2	; select bank2
  9210  0BB7  00E8               	movwf	(pid_pwm1_idrv_run@t32+2)^(0+256)
  9211  0BB8  0020               	movlb	0	; select bank0
  9212  0BB9  0825               	movf	?___aldiv+1,w
  9213  0BBA  0022               	movlb	2	; select bank2
  9214  0BBB  00E7               	movwf	(pid_pwm1_idrv_run@t32+1)^(0+256)
  9215  0BBC  0020               	movlb	0	; select bank0
  9216  0BBD  0824               	movf	?___aldiv,w
  9217  0BBE  0022               	movlb	2	; select bank2
  9218  0BBF  00E6               	movwf	pid_pwm1_idrv_run@t32^(0+256)
  9219                           
  9220                           ;sample.c: 292: t32+=pidU;
  9221  0BC0  0021               	movlb	1	; select bank1
  9222  0BC1  0858               	movf	_pidU^(0+128),w
  9223  0BC2  0022               	movlb	2	; select bank2
  9224  0BC3  07E6               	addwf	pid_pwm1_idrv_run@t32^(0+256),f
  9225  0BC4  0021               	movlb	1	; select bank1
  9226  0BC5  0859               	movf	(_pidU+1)^(0+128),w
  9227  0BC6  0022               	movlb	2	; select bank2
  9228  0BC7  3DE7               	addwfc	(pid_pwm1_idrv_run@t32+1)^(0+256),f
  9229  0BC8  0021               	movlb	1	; select bank1
  9230  0BC9  085A               	movf	(_pidU+2)^(0+128),w
  9231  0BCA  0022               	movlb	2	; select bank2
  9232  0BCB  3DE8               	addwfc	(pid_pwm1_idrv_run@t32+2)^(0+256),f
  9233  0BCC  0021               	movlb	1	; select bank1
  9234  0BCD  085B               	movf	(_pidU+3)^(0+128),w
  9235  0BCE  0022               	movlb	2	; select bank2
  9236  0BCF  3DE9               	addwfc	(pid_pwm1_idrv_run@t32+3)^(0+256),f
  9237                           
  9238                           ;sample.c: 294: __nop();
  9239  0BD0  0000               	nop
  9240                           
  9241                           ;sample.c: 295: if(t32>1200)t32=1200;
  9242  0BD1  0022               	movlb	2	; select bank2
  9243  0BD2  1BE9               	btfsc	(pid_pwm1_idrv_run@t32+3)^(0+256),7
  9244  0BD3  2BE6               	goto	l4193
  9245  0BD4  0869               	movf	(pid_pwm1_idrv_run@t32+3)^(0+256),w
  9246  0BD5  1D03               	btfss	3,2
  9247  0BD6  2BE0               	goto	l4191
  9248  0BD7  0868               	movf	(pid_pwm1_idrv_run@t32+2)^(0+256),w
  9249  0BD8  1D03               	btfss	3,2
  9250  0BD9  2BE0               	goto	l4191
  9251  0BDA  30B1               	movlw	177
  9252  0BDB  0266               	subwf	pid_pwm1_idrv_run@t32^(0+256),w
  9253  0BDC  3004               	movlw	4
  9254  0BDD  3B67               	subwfb	(pid_pwm1_idrv_run@t32+1)^(0+256),w
  9255  0BDE  1C03               	btfss	3,0
  9256  0BDF  2BE6               	goto	l4193
  9257  0BE0                     l4191:	
  9258  0BE0  3004               	movlw	4
  9259  0BE1  01E9               	clrf	(pid_pwm1_idrv_run@t32+3)^(0+256)
  9260  0BE2  01E8               	clrf	(pid_pwm1_idrv_run@t32+2)^(0+256)
  9261  0BE3  00E7               	movwf	(pid_pwm1_idrv_run@t32+1)^(0+256)
  9262  0BE4  30B0               	movlw	176
  9263  0BE5  00E6               	movwf	pid_pwm1_idrv_run@t32^(0+256)
  9264  0BE6                     l4193:	
  9265                           
  9266                           ;sample.c: 296: if(t32<5)t32=5;
  9267  0BE6  1BE9               	btfsc	(pid_pwm1_idrv_run@t32+3)^(0+256),7
  9268  0BE7  2BF5               	goto	l4195
  9269  0BE8  0869               	movf	(pid_pwm1_idrv_run@t32+3)^(0+256),w
  9270  0BE9  1D03               	btfss	3,2
  9271  0BEA  2BFA               	goto	l663
  9272  0BEB  0868               	movf	(pid_pwm1_idrv_run@t32+2)^(0+256),w
  9273  0BEC  1D03               	btfss	3,2
  9274  0BED  2BFA               	goto	l663
  9275  0BEE  0867               	movf	(pid_pwm1_idrv_run@t32+1)^(0+256),w
  9276  0BEF  1D03               	btfss	3,2
  9277  0BF0  2BFA               	goto	l663
  9278  0BF1  3005               	movlw	5
  9279  0BF2  0266               	subwf	pid_pwm1_idrv_run@t32^(0+256),w
  9280  0BF3  1803               	btfsc	3,0
  9281  0BF4  2BFA               	goto	l663
  9282  0BF5                     l4195:	
  9283  0BF5  3005               	movlw	5
  9284  0BF6  00E6               	movwf	pid_pwm1_idrv_run@t32^(0+256)
  9285  0BF7  01E7               	clrf	(pid_pwm1_idrv_run@t32+1)^(0+256)
  9286  0BF8  01E8               	clrf	(pid_pwm1_idrv_run@t32+2)^(0+256)
  9287  0BF9  01E9               	clrf	(pid_pwm1_idrv_run@t32+3)^(0+256)
  9288  0BFA                     l663:	
  9289                           
  9290                           ;sample.c: 297: pidU=t32;
  9291  0BFA  0869               	movf	(pid_pwm1_idrv_run@t32+3)^(0+256),w
  9292  0BFB  0021               	movlb	1	; select bank1
  9293  0BFC  00DB               	movwf	(_pidU+3)^(0+128)
  9294  0BFD  0022               	movlb	2	; select bank2
  9295  0BFE  0868               	movf	(pid_pwm1_idrv_run@t32+2)^(0+256),w
  9296  0BFF  0021               	movlb	1	; select bank1
  9297  0C00  00DA               	movwf	(_pidU+2)^(0+128)
  9298  0C01  0022               	movlb	2	; select bank2
  9299  0C02  0867               	movf	(pid_pwm1_idrv_run@t32+1)^(0+256),w
  9300  0C03  0021               	movlb	1	; select bank1
  9301  0C04  00D9               	movwf	(_pidU+1)^(0+128)
  9302  0C05  0022               	movlb	2	; select bank2
  9303  0C06  0866               	movf	pid_pwm1_idrv_run@t32^(0+256),w
  9304  0C07  0021               	movlb	1	; select bank1
  9305  0C08  00D8               	movwf	_pidU^(0+128)
  9306                           
  9307                           ;sample.c: 298: uint16_t t16;
  9308                           ;sample.c: 299: t16=(uint16_t)pidU;
  9309  0C09  0859               	movf	(_pidU+1)^(0+128),w
  9310  0C0A  0022               	movlb	2	; select bank2
  9311  0C0B  00E5               	movwf	(pid_pwm1_idrv_run@t16+1)^(0+256)
  9312  0C0C  0021               	movlb	1	; select bank1
  9313  0C0D  0858               	movf	_pidU^(0+128),w
  9314  0C0E  0022               	movlb	2	; select bank2
  9315  0C0F  00E4               	movwf	pid_pwm1_idrv_run@t16^(0+256)
  9316                           
  9317                           ;sample.c: 300: set_idrv_pwm1_duty(t16);
  9318  0C10  0865               	movf	(pid_pwm1_idrv_run@t16+1)^(0+256),w
  9319  0C11  00F4               	movwf	set_idrv_pwm1_duty@duty+1
  9320  0C12  0864               	movf	pid_pwm1_idrv_run@t16^(0+256),w
  9321  0C13  00F3               	movwf	set_idrv_pwm1_duty@duty
  9322  0C14  2C15               	ljmp	l3865
  9323  0C15                     __end_of_pid_pwm1_idrv_run:	
  9324  0C15                     __ptext12:	
  9325 ;; *************** function _set_idrv_pwm1_duty *****************
  9326 ;; Defined at:
  9327 ;;		line 46 in file "src/api/sample.c"
  9328 ;; Parameters:    Size  Location     Type
  9329 ;;  duty            2    3[COMMON] unsigned int 
  9330 ;; Auto vars:     Size  Location     Type
  9331 ;;  t16             2    5[COMMON] unsigned int 
  9332 ;; Return value:  Size  Location     Type
  9333 ;;                  1    wreg      void 
  9334 ;; Registers used:
  9335 ;;		wreg, pclath, cstack
  9336 ;; Tracked objects:
  9337 ;;		On entry : 1D/2
  9338 ;;		On exit  : 1F/1B
  9339 ;;		Unchanged: 0/0
  9340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9341 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9342 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9344 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9345 ;;Total ram usage:        4 bytes
  9346 ;; Hardware stack levels used:    1
  9347 ;; Hardware stack levels required when called:    2
  9348 ;; This function calls:
  9349 ;;		_get_idrv_pwm1_duty
  9350 ;; This function is called by:
  9351 ;;		_pid_pwm1_idrv_b_b
  9352 ;;		_pid_pwm1_idrv_run
  9353 ;; This function uses a non-reentrant model
  9354 ;;
  9355                           
  9356                           
  9357                           ;psect for function _set_idrv_pwm1_duty
  9358  0C15                     _set_idrv_pwm1_duty:	
  9359  0C15                     l3865:	
  9360                           ;incstack = 0
  9361                           ; Regs used in _set_idrv_pwm1_duty: [wreg+pclath+cstack]
  9362                           
  9363                           
  9364                           ;sample.c: 48: uint16_t t16;
  9365                           ;sample.c: 49: t16=get_idrv_pwm1_duty();
  9366  0C15  242A  318A         	fcall	_get_idrv_pwm1_duty
  9367  0C17  0872               	movf	?_get_idrv_pwm1_duty+1,w
  9368  0C18  00F6               	movwf	set_idrv_pwm1_duty@t16+1
  9369  0C19  0871               	movf	?_get_idrv_pwm1_duty,w
  9370  0C1A  00F5               	movwf	set_idrv_pwm1_duty@t16
  9371                           
  9372                           ;sample.c: 50: if(t16==duty)return;
  9373  0C1B  0874               	movf	set_idrv_pwm1_duty@duty+1,w
  9374  0C1C  0676               	xorwf	set_idrv_pwm1_duty@t16+1,w
  9375  0C1D  1D03               	skipz
  9376  0C1E  2C21               	goto	u2515
  9377  0C1F  0873               	movf	set_idrv_pwm1_duty@duty,w
  9378  0C20  0675               	xorwf	set_idrv_pwm1_duty@t16,w
  9379  0C21                     u2515:	
  9380  0C21  1903               	btfsc	3,2
  9381  0C22  0008               	return
  9382                           
  9383                           ;sample.c: 51: PWM1CONbits.EN = 0;
  9384  0C23  139B               	bcf	27,7	;volatile
  9385                           
  9386                           ;sample.c: 52: PWM1DCL= (uint8_t)(duty&0xff);
  9387  0C24  0873               	movf	set_idrv_pwm1_duty@duty,w
  9388  0C25  0093               	movwf	19	;volatile
  9389                           
  9390                           ;sample.c: 53: PWM1DCH=(uint8_t)(duty>>8);
  9391  0C26  0874               	movf	set_idrv_pwm1_duty@duty+1,w
  9392  0C27  0094               	movwf	20	;volatile
  9393                           
  9394                           ;sample.c: 54: PWM1CONbits.EN = 1;
  9395  0C28  179B               	bsf	27,7	;volatile
  9396  0C29  0008               	return
  9397  0C2A                     __end_of_set_idrv_pwm1_duty:	
  9398  0C2A                     __ptext13:	
  9399 ;; *************** function _get_idrv_pwm1_duty *****************
  9400 ;; Defined at:
  9401 ;;		line 41 in file "src/api/sample.c"
  9402 ;; Parameters:    Size  Location     Type
  9403 ;;		None
  9404 ;; Auto vars:     Size  Location     Type
  9405 ;;		None
  9406 ;; Return value:  Size  Location     Type
  9407 ;;                  2    1[COMMON] unsigned int 
  9408 ;; Registers used:
  9409 ;;		wreg
  9410 ;; Tracked objects:
  9411 ;;		On entry : 1D/2
  9412 ;;		On exit  : 1F/1B
  9413 ;;		Unchanged: 0/0
  9414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9415 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9418 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9419 ;;Total ram usage:        2 bytes
  9420 ;; Hardware stack levels used:    1
  9421 ;; Hardware stack levels required when called:    1
  9422 ;; This function calls:
  9423 ;;		Nothing
  9424 ;; This function is called by:
  9425 ;;		_set_idrv_pwm1_duty
  9426 ;; This function uses a non-reentrant model
  9427 ;;
  9428                           
  9429                           
  9430                           ;psect for function _get_idrv_pwm1_duty
  9431  0C2A                     _get_idrv_pwm1_duty:	
  9432                           
  9433                           ;sample.c: 43: return ((PWM1DCH<<8)|PWM1DCL);
  9434                           
  9435                           ;incstack = 0
  9436                           ; Regs used in _get_idrv_pwm1_duty: [wreg]
  9437  0C2A  003B               	movlb	27	; select bank27
  9438  0C2B  0814               	movf	20,w	;volatile
  9439  0C2C  00F2               	movwf	?_get_idrv_pwm1_duty+1
  9440  0C2D  01F1               	clrf	?_get_idrv_pwm1_duty
  9441  0C2E  0813               	movf	19,w	;volatile
  9442  0C2F  04F1               	iorwf	?_get_idrv_pwm1_duty,f
  9443  0C30  0008               	return
  9444  0C31                     __end_of_get_idrv_pwm1_duty:	
  9445  0C31                     PL6:	
  9446  0C31  00F4               	movwf	___lmul@multiplier+3
  9447  0C32  0834               	movf	??_pid_pwm1_idrv_run+2,w
  9448  0C33  00F3               	movwf	___lmul@multiplier+2
  9449  0C34  0833               	movf	??_pid_pwm1_idrv_run+1,w
  9450  0C35  00F2               	movwf	___lmul@multiplier+1
  9451  0C36  0832               	movf	??_pid_pwm1_idrv_run,w
  9452  0C37  00F1               	movwf	___lmul@multiplier
  9453  0C38  0850               	movf	_PidKp+3,w
  9454  0C39  00F8               	movwf	___lmul@multiplicand+3
  9455  0C3A  084F               	movf	_PidKp+2,w
  9456  0C3B  00F7               	movwf	___lmul@multiplicand+2
  9457  0C3C  084E               	movf	_PidKp+1,w
  9458  0C3D  00F6               	movwf	___lmul@multiplicand+1
  9459  0C3E  084D               	movf	_PidKp,w
  9460  0C3F  00F5               	movwf	___lmul@multiplicand
  9461  0C40  0008               	return
  9462  0C41                     __end_ofPL6:	
  9463  0C41                     PL8:	
  9464  0C41  0022               	movlb	2	; select bank2
  9465  0C42  00E9               	movwf	(pid_pwm1_idrv_run@t32+3)^(0+256)
  9466  0C43  0020               	movlb	0	; select bank0
  9467  0C44  0834               	movf	??_pid_pwm1_idrv_run+2,w
  9468  0C45  0022               	movlb	2	; select bank2
  9469  0C46  00E8               	movwf	(pid_pwm1_idrv_run@t32+2)^(0+256)
  9470  0C47  0020               	movlb	0	; select bank0
  9471  0C48  0833               	movf	??_pid_pwm1_idrv_run+1,w
  9472  0C49  0022               	movlb	2	; select bank2
  9473  0C4A  00E7               	movwf	(pid_pwm1_idrv_run@t32+1)^(0+256)
  9474  0C4B  0020               	movlb	0	; select bank0
  9475  0C4C  0832               	movf	??_pid_pwm1_idrv_run,w
  9476  0C4D  0022               	movlb	2	; select bank2
  9477  0C4E  00E6               	movwf	pid_pwm1_idrv_run@t32^(0+256)
  9478  0C4F  0008               	return
  9479  0C50                     __end_ofPL8:	
  9480                           
  9481                           	psect	swtext1
  9482  0800                     __pswtext1:	
  9483  0800                     S4417:	
  9484  0800  3183  2BB8         	ljmp	l4103
  9485  0802  3183  2BB8         	ljmp	l4103
  9486  0804  3183  2BC2         	ljmp	l4109
  9487  0806  3183  2BD8         	ljmp	l4115
  9488  0808  3183  2BFF         	ljmp	l4129
  9489  080A  3185  2D71         	ljmp	l643
  9490                           
  9491                           	psect	text14
  9492  0C50                     __ptext14:	
  9493 ;; *************** function _modbus_response_process *****************
  9494 ;; Defined at:
  9495 ;;		line 180 in file "src/api/modbus.c"
  9496 ;; Parameters:    Size  Location     Type
  9497 ;;  rbuf            1    wreg     PTR unsigned char 
  9498 ;;		 -> modbusBuf(64), 
  9499 ;;  rlen            2   21[BANK0 ] unsigned int 
  9500 ;; Auto vars:     Size  Location     Type
  9501 ;;  rbuf            1   24[BANK0 ] PTR unsigned char 
  9502 ;;		 -> modbusBuf(64), 
  9503 ;;  pmdbs           1   23[BANK0 ] PTR struct .
  9504 ;;		 -> modbusBuf(64), 
  9505 ;;  resp            1    0        unsigned char 
  9506 ;; Return value:  Size  Location     Type
  9507 ;;                  1    wreg      void 
  9508 ;; Registers used:
  9509 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9510 ;; Tracked objects:
  9511 ;;		On entry : 1F/0
  9512 ;;		On exit  : 1D/0
  9513 ;;		Unchanged: 0/0
  9514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9515 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9516 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9518 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9519 ;;Total ram usage:        4 bytes
  9520 ;; Hardware stack levels used:    1
  9521 ;; Hardware stack levels required when called:    5
  9522 ;; This function calls:
  9523 ;;		_crc_verify
  9524 ;;		_modbus_response_command
  9525 ;;		_modbus_response_illgeal_function
  9526 ;;		_modbus_response_write_single_register
  9527 ;; This function is called by:
  9528 ;;		_main
  9529 ;; This function uses a non-reentrant model
  9530 ;;
  9531                           
  9532                           
  9533                           ;psect for function _modbus_response_process
  9534  0C50                     _modbus_response_process:	
  9535                           
  9536                           ;incstack = 0
  9537                           ; Regs used in _modbus_response_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9538                           ;modbus_response_process@rbuf stored from wreg
  9539  0C50  00B8               	movwf	modbus_response_process@rbuf
  9540                           
  9541                           ;modbus.c: 182: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)rbuf;
  9542  0C51  00B7               	movwf	modbus_response_process@pmdbs
  9543                           
  9544                           ;modbus.c: 185: if((pmdbs->addr!=sysData.id) && (pmdbs->addr!=0x00))return;
  9545  0C52  27BF  318C         	fcall	PL14	;call to abstracted procedure
  9546  0C54  1903               	skipnz
  9547  0C55  2C5C               	goto	l4305
  9548  0C56  0020               	movlb	0	; select bank0
  9549  0C57  0837               	movf	modbus_response_process@pmdbs,w
  9550  0C58  0086               	movwf	6
  9551  0C59  0801               	movf	1,w
  9552  0C5A  1D03               	btfss	3,2
  9553  0C5B  0008               	return
  9554  0C5C                     l4305:	
  9555                           
  9556                           ;modbus.c: 186: if(!(crc_verify(rbuf,rlen)))return ;
  9557  0C5C  0020               	movlb	0	; select bank0
  9558  0C5D  0838               	movf	modbus_response_process@rbuf,w
  9559  0C5E  00A0               	movwf	crc_verify@message
  9560  0C5F  3002               	movlw	2
  9561  0C60  00A1               	movwf	crc_verify@message+1
  9562  0C61  0836               	movf	modbus_response_process@rlen+1,w
  9563  0C62  00A3               	movwf	crc_verify@n+1
  9564  0C63  0835               	movf	modbus_response_process@rlen,w
  9565  0C64  00A2               	movwf	crc_verify@n
  9566  0C65  26A8  318C         	fcall	_crc_verify
  9567  0C67  3A00               	xorlw	0
  9568  0C68  1903               	btfsc	3,2
  9569  0C69  0008               	return
  9570  0C6A  0A37               	incf	modbus_response_process@pmdbs,w
  9571  0C6B  0086               	movwf	6
  9572  0C6C  3002               	movlw	2	; select bank4/5
  9573  0C6D  0087               	movwf	7
  9574  0C6E  0801               	movf	1,w
  9575                           
  9576                           ; Switch size 1, requested type "space"
  9577                           ; Number of cases is 2, Range of values is 3 to 6
  9578                           ; switch strategies available:
  9579                           ; Name         Instructions Cycles
  9580                           ; simple_byte            7     4 (average)
  9581                           ; direct_byte           17     9 (fixed)
  9582                           ; jumptable            263     9 (fixed)
  9583                           ;	Chosen strategy is simple_byte
  9584  0C6F  3A03               	xorlw	3	; case 3
  9585  0C70  1903               	skipnz
  9586  0C71  2C77               	goto	l4309
  9587  0C72  3A05               	xorlw	5	; case 6
  9588  0C73  1903               	skipnz
  9589  0C74  2C79               	goto	l4311
  9590  0C75  2C7B               	goto	l4313
  9591  0C76  0008               	return
  9592  0C77                     l4309:	
  9593                           
  9594                           ;modbus.c: 190: modbus_response_command(rbuf);
  9595  0C77  0838               	movf	modbus_response_process@rbuf,w
  9596  0C78  2C7F               	ljmp	_modbus_response_command
  9597  0C79                     l4311:	
  9598                           ;modbus.c: 191: break;
  9599                           
  9600                           
  9601                           ;modbus.c: 193: modbus_response_write_single_register(rbuf);
  9602  0C79  0838               	movf	modbus_response_process@rbuf,w
  9603  0C7A  2D9B               	ljmp	_modbus_response_write_single_register
  9604  0C7B                     l4313:	
  9605                           ;modbus.c: 194: break;
  9606                           
  9607                           
  9608                           ;modbus.c: 218: modbus_response_illgeal_function(rbuf,0x01);break;
  9609  0C7B  01AB               	clrf	modbus_response_illgeal_function@errcode
  9610  0C7C  0AAB               	incf	modbus_response_illgeal_function@errcode,f
  9611  0C7D  0838               	movf	modbus_response_process@rbuf,w
  9612  0C7E  2FD3               	ljmp	_modbus_response_illgeal_function
  9613  0C7F                     __end_of_modbus_response_process:	
  9614  0C7F                     __ptext21:	
  9615 ;; *************** function _modbus_response_command *****************
  9616 ;; Defined at:
  9617 ;;		line 151 in file "src/api/modbus.c"
  9618 ;; Parameters:    Size  Location     Type
  9619 ;;  rbuf            1    wreg     PTR unsigned char 
  9620 ;;		 -> modbusBuf(64), 
  9621 ;; Auto vars:     Size  Location     Type
  9622 ;;  rbuf            1   18[BANK0 ] PTR unsigned char 
  9623 ;;		 -> modbusBuf(64), 
  9624 ;;  tempData        2   19[BANK0 ] unsigned int 
  9625 ;;  startAddr       2   13[BANK0 ] unsigned int 
  9626 ;;  tmpAddr         2   11[BANK0 ] unsigned int 
  9627 ;;  len             1   17[BANK0 ] unsigned char 
  9628 ;;  pmdbs           1   16[BANK0 ] PTR struct .
  9629 ;;		 -> modbusBuf(64), 
  9630 ;;  i               1   15[BANK0 ] unsigned char 
  9631 ;; Return value:  Size  Location     Type
  9632 ;;                  1    wreg      void 
  9633 ;; Registers used:
  9634 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9635 ;; Tracked objects:
  9636 ;;		On entry : 1F/0
  9637 ;;		On exit  : 1D/0
  9638 ;;		Unchanged: 0/0
  9639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9641 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9642 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9643 ;;      Totals:         1      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9644 ;;Total ram usage:       11 bytes
  9645 ;; Hardware stack levels used:    1
  9646 ;; Hardware stack levels required when called:    3
  9647 ;; This function calls:
  9648 ;;		_crc_append
  9649 ;;		_getRegisterVal
  9650 ;;		_uart_send_len
  9651 ;; This function is called by:
  9652 ;;		_modbus_response_process
  9653 ;; This function uses a non-reentrant model
  9654 ;;
  9655                           
  9656                           
  9657                           ;psect for function _modbus_response_command
  9658  0C7F                     _modbus_response_command:	
  9659                           
  9660                           ;incstack = 0
  9661                           ; Regs used in _modbus_response_command: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9662                           ;modbus_response_command@rbuf stored from wreg
  9663  0C7F  00B2               	movwf	modbus_response_command@rbuf
  9664                           
  9665                           ;modbus.c: 154: uint16_t tempData,tmpAddr;
  9666                           ;modbus.c: 155: uint8_t len=0;
  9667  0C80  01B1               	clrf	modbus_response_command@len
  9668                           
  9669                           ;modbus.c: 156: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)rbuf;
  9670  0C81  00B0               	movwf	modbus_response_command@pmdbs
  9671                           
  9672                           ;modbus.c: 157: if(pmdbs->addr!=sysData.id || pmdbs->addr==0)return;
  9673  0C82  27BF  318C         	fcall	PL14	;call to abstracted procedure
  9674  0C84  1D03               	skipz
  9675  0C85  0008               	return
  9676  0C86  0020               	movlb	0	; select bank0
  9677  0C87  0830               	movf	modbus_response_command@pmdbs,w
  9678  0C88  0086               	movwf	6
  9679  0C89  0801               	movf	1,w
  9680  0C8A  1903               	btfsc	3,2
  9681  0C8B  0008               	return
  9682                           
  9683                           ;modbus.c: 158: startAddr=pmdbs->addr_hi;
  9684  0C8C  0830               	movf	modbus_response_command@pmdbs,w
  9685  0C8D  3E02               	addlw	2
  9686  0C8E  0086               	movwf	6
  9687  0C8F  0801               	movf	1,w
  9688  0C90  00AD               	movwf	modbus_response_command@startAddr
  9689  0C91  01AE               	clrf	modbus_response_command@startAddr+1
  9690                           
  9691                           ;modbus.c: 159: startAddr<<=8;
  9692  0C92  00AE               	movwf	modbus_response_command@startAddr+1
  9693  0C93  01AD               	clrf	modbus_response_command@startAddr
  9694                           
  9695                           ;modbus.c: 160: startAddr |= pmdbs->addr_lo;
  9696  0C94  0830               	movf	modbus_response_command@pmdbs,w
  9697  0C95  3E03               	addlw	3
  9698  0C96  0086               	movwf	6
  9699  0C97  0801               	movf	1,w
  9700  0C98  04AD               	iorwf	modbus_response_command@startAddr,f
  9701                           
  9702                           ;modbus.c: 161: tmpAddr=startAddr;
  9703  0C99  082E               	movf	modbus_response_command@startAddr+1,w
  9704  0C9A  00AC               	movwf	modbus_response_command@tmpAddr+1
  9705  0C9B  082D               	movf	modbus_response_command@startAddr,w
  9706  0C9C  00AB               	movwf	modbus_response_command@tmpAddr
  9707                           
  9708                           ;modbus.c: 162: len = pmdbs->len_lo;
  9709  0C9D  0830               	movf	modbus_response_command@pmdbs,w
  9710  0C9E  0086               	movwf	6
  9711  0C9F  3F45               	moviw [5]fsr1
  9712  0CA0  00B1               	movwf	modbus_response_command@len
  9713  0CA1  3021               	movlw	33
  9714                           
  9715                           ;modbus.c: 163: len<<=1;
  9716  0CA2  35B1               	lslf	modbus_response_command@len,f
  9717                           
  9718                           ;modbus.c: 164: if(len>32)len=32;
  9719  0CA3  0231               	subwf	modbus_response_command@len,w
  9720  0CA4  1C03               	skipc
  9721  0CA5  2CA8               	goto	l3983
  9722  0CA6  3020               	movlw	32
  9723  0CA7  00B1               	movwf	modbus_response_command@len
  9724  0CA8                     l3983:	
  9725                           
  9726                           ;modbus.c: 165: for(i=0;i<len;i=i+2,tmpAddr++){
  9727  0CA8  01AF               	clrf	modbus_response_command@i
  9728  0CA9                     l3995:	
  9729  0CA9  0831               	movf	modbus_response_command@len,w
  9730  0CAA  022F               	subwf	modbus_response_command@i,w
  9731  0CAB  1803               	btfsc	3,0
  9732  0CAC  2CCC               	goto	l3997
  9733                           
  9734                           ;modbus.c: 166: getRegisterVal(tmpAddr,&tempData);
  9735  0CAD  082C               	movf	modbus_response_command@tmpAddr+1,w
  9736  0CAE  00F2               	movwf	getRegisterVal@addr+1
  9737  0CAF  082B               	movf	modbus_response_command@tmpAddr,w
  9738  0CB0  00F1               	movwf	getRegisterVal@addr
  9739  0CB1  3033               	movlw	(low (modbus_response_command@tempData| 0))& (0+255)
  9740  0CB2  00F3               	movwf	getRegisterVal@tempData
  9741  0CB3  24EF  318C         	fcall	_getRegisterVal
  9742                           
  9743                           ;modbus.c: 167: rbuf[i+3] = tempData >> 8;
  9744  0CB5  0020               	movlb	0	; select bank0
  9745  0CB6  082F               	movf	modbus_response_command@i,w
  9746  0CB7  0732               	addwf	modbus_response_command@rbuf,w
  9747  0CB8  00FB               	movwf	??_modbus_response_command
  9748  0CB9  3E03               	addlw	3
  9749  0CBA  0086               	movwf	6
  9750  0CBB  3002               	movlw	2	; select bank4/5
  9751  0CBC  0087               	movwf	7
  9752  0CBD  0834               	movf	modbus_response_command@tempData+1,w
  9753  0CBE  0081               	movwf	1
  9754                           
  9755                           ;modbus.c: 168: rbuf[i+4] = tempData & 0xff;
  9756  0CBF  082F               	movf	modbus_response_command@i,w
  9757  0CC0  0732               	addwf	modbus_response_command@rbuf,w
  9758  0CC1  00FB               	movwf	??_modbus_response_command
  9759  0CC2  3E04               	addlw	4
  9760  0CC3  0086               	movwf	6
  9761  0CC4  0833               	movf	modbus_response_command@tempData,w
  9762  0CC5  0081               	movwf	1
  9763  0CC6  0AAF               	incf	modbus_response_command@i,f
  9764  0CC7  0AAF               	incf	modbus_response_command@i,f
  9765  0CC8  0AAB               	incf	modbus_response_command@tmpAddr,f
  9766  0CC9  1903               	skipnz
  9767  0CCA  0AAC               	incf	modbus_response_command@tmpAddr+1,f
  9768  0CCB  2CA9               	goto	l3995
  9769  0CCC                     l3997:	
  9770                           
  9771                           ;modbus.c: 170: }
  9772                           ;modbus.c: 171: rbuf[0] = sysData.id;
  9773  0CCC  0832               	movf	modbus_response_command@rbuf,w
  9774  0CCD  0086               	movwf	6
  9775  0CCE  3002               	movlw	2	; select bank4/5
  9776  0CCF  0087               	movwf	7
  9777  0CD0  0022               	movlb	2	; select bank2
  9778  0CD1  0822               	movf	(_sysData^(0+256)+2),w
  9779  0CD2  0081               	movwf	1
  9780                           
  9781                           ;modbus.c: 172: rbuf[1] = 3;
  9782  0CD3  0020               	movlb	0	; select bank0
  9783  0CD4  0A32               	incf	modbus_response_command@rbuf,w
  9784  0CD5  0086               	movwf	6
  9785  0CD6  3003               	movlw	3
  9786  0CD7  0081               	movwf	1
  9787                           
  9788                           ;modbus.c: 173: rbuf[2] = len;
  9789  0CD8  0832               	movf	modbus_response_command@rbuf,w
  9790  0CD9  3E02               	addlw	2
  9791  0CDA  0086               	movwf	6
  9792  0CDB  0831               	movf	modbus_response_command@len,w
  9793  0CDC  0081               	movwf	1
  9794                           
  9795                           ;modbus.c: 174: len += 3;
  9796  0CDD  3003               	movlw	3
  9797  0CDE  07B1               	addwf	modbus_response_command@len,f
  9798                           
  9799                           ;modbus.c: 175: crc_append(rbuf,len);
  9800  0CDF  0832               	movf	modbus_response_command@rbuf,w
  9801  0CE0  00A0               	movwf	crc_append@message
  9802  0CE1  3002               	movlw	2
  9803  0CE2  00A1               	movwf	crc_append@message+1
  9804  0CE3  0831               	movf	modbus_response_command@len,w
  9805  0CE4  00A2               	movwf	crc_append@n
  9806  0CE5  01A3               	clrf	crc_append@n+1
  9807  0CE6  3187  2708  318C   	fcall	_crc_append
  9808                           
  9809                           ;modbus.c: 176: len += 2;
  9810  0CE9  0AB1               	incf	modbus_response_command@len,f
  9811  0CEA  0AB1               	incf	modbus_response_command@len,f
  9812                           
  9813                           ;modbus.c: 177: uart_send_len(rbuf,len);
  9814  0CEB  0831               	movf	modbus_response_command@len,w
  9815  0CEC  00F1               	movwf	uart_send_len@len
  9816  0CED  0832               	movf	modbus_response_command@rbuf,w
  9817  0CEE  2E24               	ljmp	_uart_send_len
  9818  0CEF                     __end_of_modbus_response_command:	
  9819  0CEF                     __ptext23:	
  9820 ;; *************** function _getRegisterVal *****************
  9821 ;; Defined at:
  9822 ;;		line 79 in file "src/api/modbus.c"
  9823 ;; Parameters:    Size  Location     Type
  9824 ;;  addr            2    1[COMMON] unsigned int 
  9825 ;;  tempData        1    3[COMMON] PTR unsigned int 
  9826 ;;		 -> modbus_response_command@tempData(2), 
  9827 ;; Auto vars:     Size  Location     Type
  9828 ;;  t16             2    0        unsigned int 
  9829 ;;  tempAddr        1    8[COMMON] unsigned char 
  9830 ;; Return value:  Size  Location     Type
  9831 ;;                  2    1[COMMON] unsigned int 
  9832 ;; Registers used:
  9833 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  9834 ;; Tracked objects:
  9835 ;;		On entry : 1F/0
  9836 ;;		On exit  : 1C/0
  9837 ;;		Unchanged: 0/0
  9838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9839 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9840 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9841 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9842 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9843 ;;Total ram usage:        8 bytes
  9844 ;; Hardware stack levels used:    1
  9845 ;; Hardware stack levels required when called:    1
  9846 ;; This function calls:
  9847 ;;		Nothing
  9848 ;; This function is called by:
  9849 ;;		_modbus_response_command
  9850 ;; This function uses a non-reentrant model
  9851 ;;
  9852                           
  9853                           
  9854                           ;psect for function _getRegisterVal
  9855  0CEF                     _getRegisterVal:	
  9856                           
  9857                           ;modbus.c: 82: uint8_t tempAddr;
  9858                           ;modbus.c: 84: tempAddr = addr & 0xff;
  9859                           
  9860                           ;incstack = 0
  9861                           ; Regs used in _getRegisterVal: [wreg-fsr1h+status,2+status,0]
  9862  0CEF  0871               	movf	getRegisterVal@addr,w
  9863  0CF0  00F8               	movwf	getRegisterVal@tempAddr
  9864                           
  9865                           ;modbus.c: 85: switch(tempAddr){
  9866  0CF1  2D7A               	goto	l2857
  9867  0CF2                     l2823:	
  9868  0CF2  0873               	movf	getRegisterVal@tempData,w
  9869  0CF3  0086               	movwf	6
  9870  0CF4  3055               	movlw	85
  9871  0CF5  0187               	clrf	7
  9872  0CF6  3FC0               	movwi [0]fsr1
  9873  0CF7  3FC1               	movwi [1]fsr1
  9874  0CF8  2D87               	goto	l2859
  9875  0CF9                     l2825:	
  9876  0CF9  0022               	movlb	2	; select bank2
  9877  0CFA  0822               	movf	(_sysData^(0+256)+2),w
  9878  0CFB  00F4               	movwf	??_getRegisterVal
  9879  0CFC  01F5               	clrf	??_getRegisterVal+1
  9880  0CFD  0873               	movf	getRegisterVal@tempData,w
  9881  0CFE  0086               	movwf	6
  9882  0CFF  0187               	clrf	7
  9883  0D00  0874               	movf	??_getRegisterVal,w
  9884  0D01  3FC0               	movwi [0]fsr1
  9885  0D02  0875               	movf	??_getRegisterVal+1,w
  9886  0D03  3FC1               	movwi [1]fsr1
  9887  0D04  2D87               	goto	l2859
  9888  0D05                     l2827:	
  9889  0D05  0873               	movf	getRegisterVal@tempData,w
  9890  0D06  0086               	movwf	6
  9891  0D07  0187               	clrf	7
  9892  0D08  0022               	movlb	2	; select bank2
  9893  0D09  0820               	movf	_sysData^(0+256),w
  9894  0D0A  3FC0               	movwi [0]fsr1
  9895  0D0B  0821               	movf	(_sysData^(0+256)+1),w
  9896  0D0C  3FC1               	movwi [1]fsr1
  9897  0D0D  2D87               	goto	l2859
  9898  0D0E                     l2829:	
  9899  0D0E  0873               	movf	getRegisterVal@tempData,w
  9900  0D0F  0086               	movwf	6
  9901  0D10  0187               	clrf	7
  9902  0D11  0022               	movlb	2	; select bank2
  9903  0D12  0824               	movf	(_sysData^(0+256)+4),w
  9904  0D13  3FC0               	movwi [0]fsr1
  9905  0D14  0825               	movf	((_sysData+1)^(0+256)+4),w
  9906  0D15  3FC1               	movwi [1]fsr1
  9907  0D16  2D87               	goto	l2859
  9908  0D17                     l2831:	
  9909  0D17  0873               	movf	getRegisterVal@tempData,w
  9910  0D18  0086               	movwf	6
  9911  0D19  0187               	clrf	7
  9912  0D1A  0022               	movlb	2	; select bank2
  9913  0D1B  0826               	movf	(_sysData^(0+256)+6),w
  9914  0D1C  3FC0               	movwi [0]fsr1
  9915  0D1D  0827               	movf	((_sysData+1)^(0+256)+6),w
  9916  0D1E  3FC1               	movwi [1]fsr1
  9917  0D1F  2D87               	goto	l2859
  9918  0D20                     l2833:	
  9919  0D20  0873               	movf	getRegisterVal@tempData,w
  9920  0D21  0086               	movwf	6
  9921  0D22  0187               	clrf	7
  9922  0D23  0022               	movlb	2	; select bank2
  9923  0D24  0828               	movf	(_sysData^(0+256)+8),w
  9924  0D25  3FC0               	movwi [0]fsr1
  9925  0D26  0829               	movf	((_sysData+1)^(0+256)+8),w
  9926  0D27  3FC1               	movwi [1]fsr1
  9927  0D28  2D87               	goto	l2859
  9928  0D29                     l2835:	
  9929  0D29  0873               	movf	getRegisterVal@tempData,w
  9930  0D2A  0086               	movwf	6
  9931  0D2B  0187               	clrf	7
  9932  0D2C  085B               	movf	_rtAdcValueRsLo,w
  9933  0D2D  3FC0               	movwi [0]fsr1
  9934  0D2E  085C               	movf	_rtAdcValueRsLo+1,w
  9935  0D2F  3FC1               	movwi [1]fsr1
  9936  0D30  2D87               	goto	l2859
  9937  0D31                     l2837:	
  9938  0D31  0873               	movf	getRegisterVal@tempData,w
  9939  0D32  0086               	movwf	6
  9940  0D33  0187               	clrf	7
  9941  0D34  0859               	movf	_rtAdcValueRsHi,w
  9942  0D35  3FC0               	movwi [0]fsr1
  9943  0D36  085A               	movf	_rtAdcValueRsHi+1,w
  9944  0D37  3FC1               	movwi [1]fsr1
  9945  0D38  2D87               	goto	l2859
  9946  0D39                     l2839:	
  9947  0D39  0873               	movf	getRegisterVal@tempData,w
  9948  0D3A  0086               	movwf	6
  9949  0D3B  0187               	clrf	7
  9950  0D3C  0857               	movf	_rtAdcValueRcLo,w
  9951  0D3D  3FC0               	movwi [0]fsr1
  9952  0D3E  0858               	movf	_rtAdcValueRcLo+1,w
  9953  0D3F  3FC1               	movwi [1]fsr1
  9954  0D40  2D87               	goto	l2859
  9955  0D41                     l2841:	
  9956  0D41  0873               	movf	getRegisterVal@tempData,w
  9957  0D42  0086               	movwf	6
  9958  0D43  0187               	clrf	7
  9959  0D44  0855               	movf	_rtAdcValueRcHi,w
  9960  0D45  3FC0               	movwi [0]fsr1
  9961  0D46  0856               	movf	_rtAdcValueRcHi+1,w
  9962  0D47  3FC1               	movwi [1]fsr1
  9963  0D48  2D87               	goto	l2859
  9964  0D49                     l2843:	
  9965  0D49  0873               	movf	getRegisterVal@tempData,w
  9966  0D4A  0086               	movwf	6
  9967  0D4B  0187               	clrf	7
  9968  0D4C  0867               	movf	_resRc,w
  9969  0D4D  3FC0               	movwi [0]fsr1
  9970  0D4E  0868               	movf	_resRc+1,w
  9971  0D4F  3FC1               	movwi [1]fsr1
  9972  0D50  2D87               	goto	l2859
  9973  0D51                     l2845:	
  9974  0D51  0873               	movf	getRegisterVal@tempData,w
  9975  0D52  0086               	movwf	6
  9976  0D53  0187               	clrf	7
  9977  0D54  0021               	movlb	1	; select bank1
  9978  0D55  085C               	movf	_resRs^(0+128),w
  9979  0D56  3FC0               	movwi [0]fsr1
  9980  0D57  085D               	movf	(_resRs+1)^(0+128),w
  9981  0D58  3FC1               	movwi [1]fsr1
  9982  0D59  2D87               	goto	l2859
  9983  0D5A                     l2847:	
  9984  0D5A  0873               	movf	getRegisterVal@tempData,w
  9985  0D5B  0086               	movwf	6
  9986  0D5C  0187               	clrf	7
  9987  0D5D  085D               	movf	_rtAdcValueVoFb,w
  9988  0D5E  3FC0               	movwi [0]fsr1
  9989  0D5F  085E               	movf	_rtAdcValueVoFb+1,w
  9990  0D60  3FC1               	movwi [1]fsr1
  9991  0D61  2D87               	goto	l2859
  9992  0D62                     l2849:	
  9993  0D62  0873               	movf	getRegisterVal@tempData,w
  9994  0D63  0086               	movwf	6
  9995  0D64  0187               	clrf	7
  9996  0D65  0853               	movf	_rsSimPower,w
  9997  0D66  3FC0               	movwi [0]fsr1
  9998  0D67  0854               	movf	_rsSimPower+1,w
  9999  0D68  3FC1               	movwi [1]fsr1
 10000  0D69  2D87               	goto	l2859
 10001  0D6A                     l2851:	
 10002  0D6A  0873               	movf	getRegisterVal@tempData,w
 10003  0D6B  0086               	movwf	6
 10004  0D6C  0187               	clrf	7
 10005  0D6D  085F               	movf	_voExpectAdcValue,w
 10006  0D6E  3FC0               	movwi [0]fsr1
 10007  0D6F  0860               	movf	_voExpectAdcValue+1,w
 10008  0D70  3FC1               	movwi [1]fsr1
 10009  0D71  2D87               	goto	l2859
 10010  0D72                     l2853:	
 10011  0D72  0873               	movf	getRegisterVal@tempData,w
 10012  0D73  0086               	movwf	6
 10013  0D74  30AA               	movlw	170
 10014  0D75  0187               	clrf	7
 10015  0D76  3FC0               	movwi [0]fsr1
 10016  0D77  3055               	movlw	85
 10017  0D78  3FC1               	movwi [1]fsr1
 10018  0D79  2D87               	goto	l2859
 10019  0D7A                     l2857:	
 10020  0D7A  0878               	movf	getRegisterVal@tempAddr,w
 10021                           
 10022                           ; Switch size 1, requested type "space"
 10023                           ; Number of cases is 15, Range of values is 1 to 15
 10024                           ; switch strategies available:
 10025                           ; Name         Instructions Cycles
 10026                           ; direct_byte           39     9 (fixed)
 10027                           ; simple_byte           46    24 (average)
 10028                           ; jumptable            263     9 (fixed)
 10029                           ;	Chosen strategy is direct_byte
 10030  0D7B  3EFF               	addlw	-1
 10031  0D7C  1C03               	skipc
 10032  0D7D  2D72               	goto	l2853
 10033  0D7E  0084               	movwf	4
 10034  0D7F  300F               	movlw	15
 10035  0D80  0204               	subwf	4,w
 10036  0D81  1803               	skipnc
 10037  0D82  2D72               	goto	l2853
 10038  0D83  3187               	movlp	high S4419
 10039  0D84  3504               	lslf	4,w
 10040  0D85  3ED0               	addlw	low S4419
 10041  0D86  0082               	movwf	2
 10042  0D87                     l2859:	
 10043                           
 10044                           ;modbus.c: 103: if(tempAddr>0x0f && tempAddr < 0x10+20){
 10045  0D87  3010               	movlw	16
 10046  0D88  0278               	subwf	getRegisterVal@tempAddr,w
 10047  0D89  1C03               	skipc
 10048  0D8A  0008               	return
 10049  0D8B  3024               	movlw	36
 10050  0D8C  0278               	subwf	getRegisterVal@tempAddr,w
 10051  0D8D  1803               	skipnc
 10052  0D8E  0008               	return
 10053                           
 10054                           ;modbus.c: 104: tempAddr-=0x10;
 10055  0D8F  3010               	movlw	16
 10056  0D90  02F8               	subwf	getRegisterVal@tempAddr,f
 10057                           
 10058                           ;modbus.c: 105: if(tempAddr & 0x01){
 10059  0D91  1C78               	btfss	getRegisterVal@tempAddr,0
 10060  0D92  2D97               	goto	l2869
 10061                           
 10062                           ;modbus.c: 106: *tempData=sysData.calibVoutAdcValue[tempAddr>>1];
 10063  0D93  3678               	lsrf	getRegisterVal@tempAddr,w
 10064  0D94  0709               	addwf	9,w
 10065  0D95  3E3E               	addlw	(low ((_sysData| (0+256)+30)))& (0+255)
 10066                           
 10067                           ;modbus.c: 107: }else{
 10068  0D96  2FB4               	ljmp	PL12	;call to abstracted procedure
 10069  0D97                     l2869:	
 10070                           
 10071                           ;modbus.c: 108: *tempData=sysData.calibSimuPowerVaule[tempAddr>>1];
 10072  0D97  3678               	lsrf	getRegisterVal@tempAddr,w
 10073  0D98  0709               	addwf	9,w
 10074  0D99  3E2A               	addlw	(low ((_sysData| (0+256)+10)))& (0+255)
 10075  0D9A  2FB4               	ljmp	PL12	;call to abstracted procedure
 10076  0D9B                     __end_of_getRegisterVal:	
 10077  0D9B                     __ptext15:	
 10078 ;; *************** function _modbus_response_write_single_register *****************
 10079 ;; Defined at:
 10080 ;;		line 114 in file "src/api/modbus.c"
 10081 ;; Parameters:    Size  Location     Type
 10082 ;;  rbuf            1    wreg     PTR unsigned char 
 10083 ;;		 -> modbusBuf(64), 
 10084 ;; Auto vars:     Size  Location     Type
 10085 ;;  rbuf            1   20[BANK0 ] PTR unsigned char 
 10086 ;;		 -> modbusBuf(64), 
 10087 ;;  startAddr       2   18[BANK0 ] unsigned int 
 10088 ;;  t16             2   14[BANK0 ] unsigned int 
 10089 ;;  pmdbs           1   17[BANK0 ] PTR struct .
 10090 ;;		 -> modbusBuf(64), 
 10091 ;;  fiSave          1   16[BANK0 ] unsigned char 
 10092 ;; Return value:  Size  Location     Type
 10093 ;;                  1    wreg      void 
 10094 ;; Registers used:
 10095 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10096 ;; Tracked objects:
 10097 ;;		On entry : 1F/0
 10098 ;;		On exit  : 1D/0
 10099 ;;		Unchanged: 0/0
 10100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10102 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10103 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10104 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10105 ;;Total ram usage:        9 bytes
 10106 ;; Hardware stack levels used:    1
 10107 ;; Hardware stack levels required when called:    4
 10108 ;; This function calls:
 10109 ;;		_crc_append
 10110 ;;		_sys_data_save
 10111 ;;		_uart_send_len
 10112 ;; This function is called by:
 10113 ;;		_modbus_response_process
 10114 ;; This function uses a non-reentrant model
 10115 ;;
 10116                           
 10117                           
 10118                           ;psect for function _modbus_response_write_single_register
 10119  0D9B                     _modbus_response_write_single_register:	
 10120                           
 10121                           ;incstack = 0
 10122                           ; Regs used in _modbus_response_write_single_register: [wreg+fsr1l+fsr1h+status,2+status
      +                          ,0+pclath+cstack]
 10123                           ;modbus_response_write_single_register@rbuf stored from wreg
 10124  0D9B  00B4               	movwf	modbus_response_write_single_register@rbuf
 10125                           
 10126                           ;modbus.c: 117: uint16_t t16;
 10127                           ;modbus.c: 118: uint8_t fiSave=0;
 10128  0D9C  01B0               	clrf	modbus_response_write_single_register@fiSave
 10129                           
 10130                           ;modbus.c: 119: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)rbuf;
 10131  0D9D  00B1               	movwf	modbus_response_write_single_register@pmdbs
 10132                           
 10133                           ;modbus.c: 120: if(pmdbs->addr!=sysData.id)return;
 10134  0D9E  27BF  318C         	fcall	PL14	;call to abstracted procedure
 10135  0DA0  1D03               	btfss	3,2
 10136  0DA1  0008               	return
 10137                           
 10138                           ;modbus.c: 121: startAddr=pmdbs->addr_hi;
 10139  0DA2  0020               	movlb	0	; select bank0
 10140  0DA3  0831               	movf	modbus_response_write_single_register@pmdbs,w
 10141  0DA4  3E02               	addlw	2
 10142  0DA5  0086               	movwf	6
 10143  0DA6  0801               	movf	1,w
 10144  0DA7  00B2               	movwf	modbus_response_write_single_register@startAddr
 10145  0DA8  01B3               	clrf	modbus_response_write_single_register@startAddr+1
 10146                           
 10147                           ;modbus.c: 122: startAddr<<=8;
 10148  0DA9  00B3               	movwf	modbus_response_write_single_register@startAddr+1
 10149  0DAA  01B2               	clrf	modbus_response_write_single_register@startAddr
 10150                           
 10151                           ;modbus.c: 123: startAddr |= pmdbs->addr_lo;
 10152  0DAB  0831               	movf	modbus_response_write_single_register@pmdbs,w
 10153  0DAC  3E03               	addlw	3
 10154  0DAD  0086               	movwf	6
 10155  0DAE  0801               	movf	1,w
 10156  0DAF  04B2               	iorwf	modbus_response_write_single_register@startAddr,f
 10157                           
 10158                           ;modbus.c: 124: startAddr = startAddr & 0xff;
 10159  0DB0  30FF               	movlw	255
 10160  0DB1  05B2               	andwf	modbus_response_write_single_register@startAddr,f
 10161  0DB2  3002               	movlw	2
 10162  0DB3  01B3               	clrf	modbus_response_write_single_register@startAddr+1
 10163                           
 10164                           ;modbus.c: 125: if(startAddr==0x02){
 10165  0DB4  0632               	xorwf	modbus_response_write_single_register@startAddr,w
 10166  0DB5  0433               	iorwf	modbus_response_write_single_register@startAddr+1,w
 10167  0DB6  1D03               	btfss	3,2
 10168  0DB7  2DBE               	goto	l3923
 10169                           
 10170                           ;modbus.c: 126: sysData.id=rbuf[5];
 10171  0DB8  0834               	movf	modbus_response_write_single_register@rbuf,w
 10172  0DB9  0086               	movwf	6
 10173  0DBA  3F45               	moviw [5]fsr1
 10174  0DBB  0022               	movlb	2	; select bank2
 10175  0DBC  00A2               	movwf	(_sysData^(0+256)+2)
 10176                           
 10177                           ;modbus.c: 128: }else if(startAddr==0x03){
 10178  0DBD  2E04               	goto	l3921
 10179  0DBE                     l3923:	
 10180  0DBE  3003               	movlw	3
 10181  0DBF  0632               	xorwf	modbus_response_write_single_register@startAddr,w
 10182  0DC0  0433               	iorwf	modbus_response_write_single_register@startAddr+1,w
 10183  0DC1  1D03               	btfss	3,2
 10184  0DC2  2DD1               	goto	l3929
 10185                           
 10186                           ;modbus.c: 129: sysData.pidSetFlg1=rbuf[4];
 10187  0DC3  0834               	movf	modbus_response_write_single_register@rbuf,w
 10188  0DC4  0086               	movwf	6
 10189  0DC5  3002               	movlw	2	; select bank4/5
 10190  0DC6  0087               	movwf	7
 10191  0DC7  3F44               	moviw [4]fsr1
 10192  0DC8  0022               	movlb	2	; select bank2
 10193  0DC9  00A1               	movwf	(_sysData^(0+256)+1)
 10194                           
 10195                           ;modbus.c: 130: sysData.pidSetFlg0=rbuf[5];
 10196  0DCA  0020               	movlb	0	; select bank0
 10197  0DCB  0834               	movf	modbus_response_write_single_register@rbuf,w
 10198  0DCC  0086               	movwf	6
 10199  0DCD  3F45               	moviw [5]fsr1
 10200  0DCE  0022               	movlb	2	; select bank2
 10201  0DCF  00A0               	movwf	_sysData^(0+256)
 10202  0DD0  2E04               	goto	l3921
 10203  0DD1                     l3929:	
 10204  0DD1  3000               	movlw	0
 10205  0DD2  0233               	subwf	modbus_response_write_single_register@startAddr+1,w
 10206  0DD3  3010               	movlw	16
 10207  0DD4  1903               	skipnz
 10208  0DD5  0232               	subwf	modbus_response_write_single_register@startAddr,w
 10209  0DD6  1C03               	skipc
 10210  0DD7  0008               	return
 10211  0DD8  3000               	movlw	0
 10212  0DD9  0233               	subwf	modbus_response_write_single_register@startAddr+1,w
 10213  0DDA  3024               	movlw	36
 10214  0DDB  1903               	skipnz
 10215  0DDC  0232               	subwf	modbus_response_write_single_register@startAddr,w
 10216  0DDD  1803               	skipnc
 10217  0DDE  0008               	return
 10218                           
 10219                           ;modbus.c: 133: startAddr-=0x10;
 10220  0DDF  3010               	movlw	16
 10221  0DE0  02B2               	subwf	modbus_response_write_single_register@startAddr,f
 10222  0DE1  3000               	movlw	0
 10223  0DE2  3BB3               	subwfb	modbus_response_write_single_register@startAddr+1,f
 10224                           
 10225                           ;modbus.c: 134: if(startAddr & 0x01){
 10226  0DE3  1C32               	btfss	modbus_response_write_single_register@startAddr,0
 10227  0DE4  2E07               	goto	l3947
 10228                           
 10229                           ;modbus.c: 135: t16=rbuf[4];
 10230  0DE5  0834               	movf	modbus_response_write_single_register@rbuf,w
 10231  0DE6  3E04               	addlw	4
 10232  0DE7  0086               	movwf	6
 10233  0DE8  3002               	movlw	2	; select bank4/5
 10234  0DE9  0087               	movwf	7
 10235  0DEA  0801               	movf	1,w
 10236  0DEB  00AE               	movwf	modbus_response_write_single_register@t16
 10237  0DEC  01AF               	clrf	modbus_response_write_single_register@t16+1
 10238                           
 10239                           ;modbus.c: 136: t16<<=8;
 10240  0DED  00AF               	movwf	modbus_response_write_single_register@t16+1
 10241  0DEE  01AE               	clrf	modbus_response_write_single_register@t16
 10242                           
 10243                           ;modbus.c: 137: t16 |= rbuf[5];
 10244  0DEF  0834               	movf	modbus_response_write_single_register@rbuf,w
 10245  0DF0  3E05               	addlw	5
 10246  0DF1  0086               	movwf	6
 10247  0DF2  0801               	movf	1,w
 10248  0DF3  04AE               	iorwf	modbus_response_write_single_register@t16,f
 10249                           
 10250                           ;modbus.c: 138: sysData.calibVoutAdcValue[startAddr>>1]=t16;
 10251  0DF4  0833               	movf	modbus_response_write_single_register@startAddr+1,w
 10252  0DF5  00AD               	movwf	??_modbus_response_write_single_register+1
 10253  0DF6  0832               	movf	modbus_response_write_single_register@startAddr,w
 10254  0DF7  00AC               	movwf	??_modbus_response_write_single_register
 10255  0DF8  36AD               	lsrf	??_modbus_response_write_single_register+1,f
 10256  0DF9  0CAC               	rrf	??_modbus_response_write_single_register,f
 10257  0DFA  082C               	movf	??_modbus_response_write_single_register,w
 10258  0DFB  0709               	addwf	9,w
 10259  0DFC  3E3E               	addlw	(low ((_sysData| (0+256)+30)))& (0+255)
 10260  0DFD  0086               	movwf	6
 10261  0DFE  3001               	movlw	1	; select bank2/3
 10262  0DFF  0087               	movwf	7
 10263  0E00  082E               	movf	modbus_response_write_single_register@t16,w
 10264  0E01  3FC0               	movwi [0]fsr1
 10265  0E02  082F               	movf	modbus_response_write_single_register@t16+1,w
 10266  0E03  3FC1               	movwi [1]fsr1
 10267  0E04                     l3921:	
 10268                           
 10269                           ;modbus.c: 127: fiSave=1;
 10270  0E04  0020               	movlb	0	; select bank0
 10271  0E05  01B0               	clrf	modbus_response_write_single_register@fiSave
 10272  0E06  0AB0               	incf	modbus_response_write_single_register@fiSave,f
 10273  0E07                     l3947:	
 10274                           
 10275                           ;modbus.c: 144: }
 10276                           ;modbus.c: 145: if(fiSave)sys_data_save();
 10277  0E07  0830               	movf	modbus_response_write_single_register@fiSave,w
 10278  0E08  1903               	btfsc	3,2
 10279  0E09  2E0D               	goto	l3951
 10280  0E0A  3186  26FD  318C   	fcall	_sys_data_save
 10281  0E0D                     l3951:	
 10282                           
 10283                           ;modbus.c: 146: if(pmdbs->addr==0)return;
 10284  0E0D  0831               	movf	modbus_response_write_single_register@pmdbs,w
 10285  0E0E  0086               	movwf	6
 10286  0E0F  3002               	movlw	2	; select bank4/5
 10287  0E10  0087               	movwf	7
 10288  0E11  0801               	movf	1,w
 10289  0E12  1903               	btfsc	3,2
 10290  0E13  0008               	return
 10291                           
 10292                           ;modbus.c: 147: rbuf[0]=sysData.id;
 10293  0E14  0834               	movf	modbus_response_write_single_register@rbuf,w
 10294                           
 10295                           ;modbus.c: 148: crc_append(rbuf,6);
 10296  0E15  27FA               	fcall	PL32	;call to abstracted procedure
 10297  0E16  0834               	movf	modbus_response_write_single_register@rbuf,w
 10298  0E17  00A0               	movwf	crc_append@message
 10299  0E18  3002               	movlw	2
 10300  0E19  00A1               	movwf	crc_append@message+1
 10301  0E1A  3006               	movlw	6
 10302  0E1B  00A2               	movwf	crc_append@n
 10303  0E1C  01A3               	clrf	crc_append@n+1
 10304  0E1D  3187  2708  318C   	fcall	_crc_append
 10305                           
 10306                           ;modbus.c: 149: uart_send_len(rbuf,8);
 10307  0E20  3008               	movlw	8
 10308  0E21  00F1               	movwf	uart_send_len@len
 10309  0E22  0834               	movf	modbus_response_write_single_register@rbuf,w
 10310  0E23  2E24               	ljmp	_uart_send_len
 10311  0E24                     __end_of_modbus_response_write_single_register:	
 10312  0E24                     __ptext22:	
 10313 ;; *************** function _uart_send_len *****************
 10314 ;; Defined at:
 10315 ;;		line 37 in file "src/api/my_uart.c"
 10316 ;; Parameters:    Size  Location     Type
 10317 ;;  buf             1    wreg     PTR unsigned char 
 10318 ;;		 -> modbusBuf(64), 
 10319 ;;  len             1    1[COMMON] unsigned char 
 10320 ;; Auto vars:     Size  Location     Type
 10321 ;;  buf             1    3[COMMON] PTR unsigned char 
 10322 ;;		 -> modbusBuf(64), 
 10323 ;;  i               1    4[COMMON] unsigned char 
 10324 ;; Return value:  Size  Location     Type
 10325 ;;                  1    wreg      void 
 10326 ;; Registers used:
 10327 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10328 ;; Tracked objects:
 10329 ;;		On entry : 1F/0
 10330 ;;		On exit  : 1F/0
 10331 ;;		Unchanged: 0/0
 10332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10333 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10334 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10335 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10336 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10337 ;;Total ram usage:        4 bytes
 10338 ;; Hardware stack levels used:    1
 10339 ;; Hardware stack levels required when called:    1
 10340 ;; This function calls:
 10341 ;;		Nothing
 10342 ;; This function is called by:
 10343 ;;		_modbus_response_illgeal_function
 10344 ;;		_modbus_response_write_single_register
 10345 ;;		_modbus_response_command
 10346 ;; This function uses a non-reentrant model
 10347 ;;
 10348                           
 10349                           
 10350                           ;psect for function _uart_send_len
 10351  0E24                     _uart_send_len:	
 10352                           
 10353                           ;incstack = 0
 10354                           ; Regs used in _uart_send_len: [wreg+fsr1l+fsr1h+status,2+status,0]
 10355                           ;uart_send_len@buf stored from wreg
 10356  0E24  00F3               	movwf	uart_send_len@buf
 10357                           
 10358                           ;my_uart.c: 39: uint8_t i;
 10359                           ;my_uart.c: 40: if(!TXSTAbits.TXEN)TXSTAbits.TXEN=1;
 10360  0E25  0023               	movlb	3	; select bank3
 10361  0E26  1E9E               	btfss	30,5	;volatile
 10362  0E27  169E               	bsf	30,5	;volatile
 10363  0E28                     l488:	
 10364  0E28  0020               	movlb	0	; select bank0
 10365  0E29  1E11               	btfss	17,4	;volatile
 10366  0E2A  2E28               	goto	l488
 10367                           
 10368                           ;my_uart.c: 42: for(i=0;i<len;i++){
 10369  0E2B  01F4               	clrf	uart_send_len@i
 10370  0E2C                     l2803:	
 10371  0E2C  0871               	movf	uart_send_len@len,w
 10372  0E2D  0274               	subwf	uart_send_len@i,w
 10373  0E2E  1803               	btfsc	3,0
 10374  0E2F  2E3E               	goto	l497
 10375  0E30                     l493:	
 10376  0E30  0020               	movlb	0	; select bank0
 10377  0E31  1E11               	btfss	17,4	;volatile
 10378  0E32  2E30               	goto	l493
 10379                           
 10380                           ;my_uart.c: 44: TXREG = buf[i];
 10381  0E33  0874               	movf	uart_send_len@i,w
 10382  0E34  0773               	addwf	uart_send_len@buf,w
 10383  0E35  00F2               	movwf	??_uart_send_len
 10384  0E36  0086               	movwf	6
 10385  0E37  3002               	movlw	2	; select bank4/5
 10386  0E38  0087               	movwf	7
 10387  0E39  0801               	movf	1,w
 10388  0E3A  0023               	movlb	3	; select bank3
 10389  0E3B  009A               	movwf	26	;volatile
 10390  0E3C  0AF4               	incf	uart_send_len@i,f
 10391  0E3D  2E2C               	goto	l2803
 10392  0E3E                     l497:	
 10393  0E3E  0020               	movlb	0	; select bank0
 10394  0E3F  1A11               	btfsc	17,4	;volatile
 10395  0E40  0008               	return
 10396  0E41  2E3E               	goto	l497
 10397  0E42                     __end_of_uart_send_len:	
 10398  0E42                     __ptext2:	
 10399 ;; *************** function _sys_data_init *****************
 10400 ;; Defined at:
 10401 ;;		line 87 in file "src/api/sysData.c"
 10402 ;; Parameters:    Size  Location     Type
 10403 ;;		None
 10404 ;; Auto vars:     Size  Location     Type
 10405 ;;  i               2   14[BANK0 ] unsigned int 
 10406 ;;  ret             2   12[BANK0 ] unsigned int 
 10407 ;; Return value:  Size  Location     Type
 10408 ;;                  2  748[None  ] unsigned int 
 10409 ;; Registers used:
 10410 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10411 ;; Tracked objects:
 10412 ;;		On entry : 1F/1B
 10413 ;;		On exit  : 1F/0
 10414 ;;		Unchanged: 0/0
 10415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10417 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10419 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10420 ;;Total ram usage:        4 bytes
 10421 ;; Hardware stack levels used:    1
 10422 ;; Hardware stack levels required when called:    3
 10423 ;; This function calls:
 10424 ;;		___wmul
 10425 ;;		_crc_append
 10426 ;;		_crc_verify
 10427 ;;		_my_flash_read_system_erase
 10428 ;;		_my_flash_system_read
 10429 ;;		_my_flash_system_write
 10430 ;; This function is called by:
 10431 ;;		_main
 10432 ;; This function uses a non-reentrant model
 10433 ;;
 10434                           
 10435                           
 10436                           ;psect for function _sys_data_init
 10437  0E42                     _sys_data_init:	
 10438                           
 10439                           ;sysData.c: 89: uint16_t ret,i;
 10440                           ;sysData.c: 90: my_flash_system_read((uint8_t*)&sysData,sizeof(sysData_t));
 10441                           
 10442                           ;incstack = 0
 10443                           ; Regs used in _sys_data_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10444  0E42  3034               	movlw	52
 10445  0E43  00F1               	movwf	my_flash_system_read@len
 10446  0E44  3020               	movlw	(low (_sysData| (0+256)))& (0+255)
 10447  0E45  01F2               	clrf	my_flash_system_read@len+1
 10448  0E46  270B  318C         	fcall	_my_flash_system_read
 10449                           
 10450                           ;sysData.c: 91: ret=crc_verify((uint8_t*)&sysData,sizeof(sysData_t));
 10451  0E48  3020               	movlw	low _sysData
 10452  0E49  0020               	movlb	0	; select bank0
 10453  0E4A  00A0               	movwf	crc_verify@message
 10454  0E4B  3001               	movlw	high _sysData
 10455  0E4C  00A1               	movwf	crc_verify@message+1
 10456  0E4D  3034               	movlw	52
 10457  0E4E  00A2               	movwf	crc_verify@n
 10458  0E4F  01A3               	clrf	crc_verify@n+1
 10459  0E50  26A8  318C         	fcall	_crc_verify
 10460  0E52  00AC               	movwf	sys_data_init@ret
 10461  0E53  01AD               	clrf	sys_data_init@ret+1
 10462                           
 10463                           ;sysData.c: 92: if(!ret){
 10464  0E54  042D               	iorwf	sys_data_init@ret+1,w
 10465  0E55  1D03               	btfss	3,2
 10466  0E56  0008               	return
 10467                           
 10468                           ;sysData.c: 93: sysData.pidSetFlg0=0xff;
 10469  0E57  30FF               	movlw	255
 10470  0E58  0022               	movlb	2	; select bank2
 10471  0E59  00A0               	movwf	_sysData^(0+256)
 10472                           
 10473                           ;sysData.c: 94: sysData.pidSetFlg1=0xff;
 10474  0E5A  00A1               	movwf	(_sysData^(0+256)+1)
 10475                           
 10476                           ;sysData.c: 95: sysData.id=0;
 10477  0E5B  01A2               	clrf	(_sysData^(0+256)+2)
 10478                           
 10479                           ;sysData.c: 96: for(i=0;i<10;i++){
 10480  0E5C  0020               	movlb	0	; select bank0
 10481  0E5D  01AE               	clrf	sys_data_init@i
 10482  0E5E  01AF               	clrf	sys_data_init@i+1
 10483  0E5F                     l4283:	
 10484                           
 10485                           ;sysData.c: 97: sysData.calibSimuPowerVaule[i]=i*6553;
 10486  0E5F  082F               	movf	sys_data_init@i+1,w
 10487  0E60  00F2               	movwf	___wmul@multiplier+1
 10488  0E61  082E               	movf	sys_data_init@i,w
 10489  0E62  00F1               	movwf	___wmul@multiplier
 10490  0E63  3099               	movlw	153
 10491  0E64  00F3               	movwf	___wmul@multiplicand
 10492  0E65  3019               	movlw	25
 10493  0E66  00F4               	movwf	___wmul@multiplicand+1
 10494  0E67  2693  318C         	fcall	___wmul
 10495  0E69  352E               	lslf	sys_data_init@i,w
 10496  0E6A  3E2A               	addlw	(low ((_sysData| (0+256)+10)))& (0+255)
 10497  0E6B  27C6  318C         	fcall	PL22	;call to abstracted procedure
 10498                           
 10499                           ;sysData.c: 98: sysData.calibVoutAdcValue[i]=i*1200;
 10500  0E6D  082F               	movf	sys_data_init@i+1,w
 10501  0E6E  00F2               	movwf	___wmul@multiplier+1
 10502  0E6F  082E               	movf	sys_data_init@i,w
 10503  0E70  00F1               	movwf	___wmul@multiplier
 10504  0E71  30B0               	movlw	176
 10505  0E72  00F3               	movwf	___wmul@multiplicand
 10506  0E73  3004               	movlw	4
 10507  0E74  00F4               	movwf	___wmul@multiplicand+1
 10508  0E75  2693  318C         	fcall	___wmul
 10509  0E77  352E               	lslf	sys_data_init@i,w
 10510  0E78  3E3E               	addlw	(low ((_sysData| (0+256)+30)))& (0+255)
 10511  0E79  27C6  318C         	fcall	PL22	;call to abstracted procedure
 10512  0E7B  0AAE               	incf	sys_data_init@i,f
 10513  0E7C  1903               	skipnz
 10514  0E7D  0AAF               	incf	sys_data_init@i+1,f
 10515  0E7E  3000               	movlw	0
 10516  0E7F  022F               	subwf	sys_data_init@i+1,w
 10517  0E80  300A               	movlw	10
 10518  0E81  1903               	skipnz
 10519  0E82  022E               	subwf	sys_data_init@i,w
 10520  0E83  1C03               	skipc
 10521  0E84  2E5F               	goto	l4283
 10522                           
 10523                           ;sysData.c: 99: }
 10524                           ;sysData.c: 100: crc_append((uint8_t*)&sysData,sizeof(sysData_t)-2);
 10525  0E85  3020               	movlw	low _sysData
 10526  0E86  3187  2789  318C   	fcall	PL30	;call to abstracted procedure
 10527  0E89  3187  2708  318C   	fcall	_crc_append
 10528                           
 10529                           ;sysData.c: 102: my_flash_read_system_erase();
 10530  0E8C  3187  2737  318C   	fcall	_my_flash_read_system_erase
 10531                           
 10532                           ;sysData.c: 103: my_flash_system_write((uint8_t*)&sysData,sizeof(sysData_t));
 10533  0E8F  3187  2796  318C   	fcall	PL36	;call to abstracted procedure
 10534  0E92  2F3A               	ljmp	_my_flash_system_write
 10535  0E93                     __end_of_sys_data_init:	
 10536  0E93                     __ptext4:	
 10537 ;; *************** function ___wmul *****************
 10538 ;; Defined at:
 10539 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 10540 ;; Parameters:    Size  Location     Type
 10541 ;;  multiplier      2    1[COMMON] unsigned int 
 10542 ;;  multiplicand    2    3[COMMON] unsigned int 
 10543 ;; Auto vars:     Size  Location     Type
 10544 ;;  product         2    5[COMMON] unsigned int 
 10545 ;; Return value:  Size  Location     Type
 10546 ;;                  2    1[COMMON] unsigned int 
 10547 ;; Registers used:
 10548 ;;		wreg, status,2, status,0
 10549 ;; Tracked objects:
 10550 ;;		On entry : 1F/0
 10551 ;;		On exit  : 1F/0
 10552 ;;		Unchanged: 1F/0
 10553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10554 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10555 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10557 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10558 ;;Total ram usage:        6 bytes
 10559 ;; Hardware stack levels used:    1
 10560 ;; Hardware stack levels required when called:    1
 10561 ;; This function calls:
 10562 ;;		Nothing
 10563 ;; This function is called by:
 10564 ;;		_sys_data_init
 10565 ;; This function uses a non-reentrant model
 10566 ;;
 10567                           
 10568                           
 10569                           ;psect for function ___wmul
 10570  0E93                     ___wmul:	
 10571                           
 10572                           ;incstack = 0
 10573                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 10574  0E93  01F5               	clrf	___wmul@product
 10575  0E94  01F6               	clrf	___wmul@product+1
 10576  0E95                     l3213:	
 10577  0E95  1C71               	btfss	___wmul@multiplier,0
 10578  0E96  2E9B               	goto	l3217
 10579  0E97  0873               	movf	___wmul@multiplicand,w
 10580  0E98  07F5               	addwf	___wmul@product,f
 10581  0E99  0874               	movf	___wmul@multiplicand+1,w
 10582  0E9A  3DF6               	addwfc	___wmul@product+1,f
 10583  0E9B                     l3217:	
 10584  0E9B  35F3               	lslf	___wmul@multiplicand,f
 10585  0E9C  0DF4               	rlf	___wmul@multiplicand+1,f
 10586  0E9D  36F2               	lsrf	___wmul@multiplier+1,f
 10587  0E9E  0CF1               	rrf	___wmul@multiplier,f
 10588  0E9F  0871               	movf	___wmul@multiplier,w
 10589  0EA0  0472               	iorwf	___wmul@multiplier+1,w
 10590  0EA1  1D03               	btfss	3,2
 10591  0EA2  2E95               	goto	l3213
 10592  0EA3  0876               	movf	___wmul@product+1,w
 10593  0EA4  00F2               	movwf	?___wmul+1
 10594  0EA5  0875               	movf	___wmul@product,w
 10595  0EA6  00F1               	movwf	?___wmul
 10596  0EA7  0008               	return
 10597  0EA8                     __end_of___wmul:	
 10598  0EA8                     __ptext25:	
 10599 ;; *************** function _crc_verify *****************
 10600 ;; Defined at:
 10601 ;;		line 135 in file "src/depend/crc16.c"
 10602 ;; Parameters:    Size  Location     Type
 10603 ;;  message         2    0[BANK0 ] PTR unsigned char 
 10604 ;;		 -> modbusBuf(64), sysData(52), 
 10605 ;;  n               2    2[BANK0 ] unsigned int 
 10606 ;; Auto vars:     Size  Location     Type
 10607 ;;  expected        2    6[BANK0 ] unsigned int 
 10608 ;;  crccal          2    4[BANK0 ] unsigned int 
 10609 ;; Return value:  Size  Location     Type
 10610 ;;                  1    wreg      unsigned char 
 10611 ;; Registers used:
 10612 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10613 ;; Tracked objects:
 10614 ;;		On entry : 1F/0
 10615 ;;		On exit  : 1F/0
 10616 ;;		Unchanged: 0/0
 10617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10618 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10619 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10621 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10622 ;;Total ram usage:        8 bytes
 10623 ;; Hardware stack levels used:    1
 10624 ;; Hardware stack levels required when called:    2
 10625 ;; This function calls:
 10626 ;;		_crc_sum
 10627 ;;		_m_mem_cpy_len
 10628 ;; This function is called by:
 10629 ;;		_sys_data_init
 10630 ;;		_modbus_response_process
 10631 ;; This function uses a non-reentrant model
 10632 ;;
 10633                           
 10634                           
 10635                           ;psect for function _crc_verify
 10636  0EA8                     _crc_verify:	
 10637                           
 10638                           ;crc16.c: 137: uint16_t expected,crccal;
 10639                           ;crc16.c: 138: m_mem_cpy_len((uint8_t*)(&expected),(message+n-2),2);
 10640                           
 10641                           ;incstack = 0
 10642                           ; Regs used in _crc_verify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10643  0EA8  0822               	movf	crc_verify@n,w
 10644  0EA9  0720               	addwf	crc_verify@message,w
 10645  0EAA  00F3               	movwf	m_mem_cpy_len@s
 10646  0EAB  0823               	movf	crc_verify@n+1,w
 10647  0EAC  3D21               	addwfc	crc_verify@message+1,w
 10648  0EAD  00F4               	movwf	m_mem_cpy_len@s+1
 10649  0EAE  30FE               	movlw	-2
 10650  0EAF  07F3               	addwf	m_mem_cpy_len@s,f
 10651  0EB0  1C03               	skipc
 10652  0EB1  03F4               	decf	m_mem_cpy_len@s+1,f
 10653  0EB2  3026               	movlw	low crc_verify@expected
 10654  0EB3  00F1               	movwf	m_mem_cpy_len@d
 10655  0EB4  3000               	movlw	high crc_verify@expected
 10656  0EB5  00F2               	movwf	m_mem_cpy_len@d+1
 10657  0EB6  3002               	movlw	2
 10658  0EB7  00F5               	movwf	m_mem_cpy_len@len
 10659  0EB8  01F6               	clrf	m_mem_cpy_len@len+1
 10660  0EB9  3186  26E2  318C   	fcall	_m_mem_cpy_len
 10661                           
 10662                           ;crc16.c: 139: crccal=crc_sum(message,n - 2);
 10663  0EBC  0821               	movf	crc_verify@message+1,w
 10664  0EBD  00F2               	movwf	crc_sum@buf+1
 10665  0EBE  0820               	movf	crc_verify@message,w
 10666  0EBF  00F1               	movwf	crc_sum@buf
 10667  0EC0  0822               	movf	crc_verify@n,w
 10668  0EC1  3EFE               	addlw	254
 10669  0EC2  00F3               	movwf	crc_sum@len
 10670  0EC3  30FF               	movlw	255
 10671  0EC4  3D23               	addwfc	crc_verify@n+1,w
 10672  0EC5  00F4               	movwf	crc_sum@len+1
 10673  0EC6  26D5  318C         	fcall	_crc_sum
 10674  0EC8  0872               	movf	?_crc_sum+1,w
 10675  0EC9  00A5               	movwf	crc_verify@crccal+1
 10676  0ECA  0871               	movf	?_crc_sum,w
 10677  0ECB  00A4               	movwf	crc_verify@crccal
 10678                           
 10679                           ;crc16.c: 140: if(expected!=crccal)return 0;
 10680  0ECC  0825               	movf	crc_verify@crccal+1,w
 10681  0ECD  0627               	xorwf	crc_verify@expected+1,w
 10682  0ECE  1D03               	skipz
 10683  0ECF  2ED2               	goto	u2525
 10684  0ED0  0824               	movf	crc_verify@crccal,w
 10685  0ED1  0626               	xorwf	crc_verify@expected,w
 10686  0ED2                     u2525:	
 10687  0ED2  1D03               	btfss	3,2
 10688  0ED3  3400               	retlw	0
 10689                           
 10690                           ;crc16.c: 141: return 1;
 10691  0ED4  3401               	retlw	1
 10692  0ED5                     __end_of_crc_verify:	
 10693  0ED5                     __ptext27:	
 10694 ;; *************** function _crc_sum *****************
 10695 ;; Defined at:
 10696 ;;		line 116 in file "src/depend/crc16.c"
 10697 ;; Parameters:    Size  Location     Type
 10698 ;;  buf             2    1[COMMON] PTR unsigned char 
 10699 ;;		 -> modbusBuf(64), sysData(52), 
 10700 ;;  len             2    3[COMMON] unsigned int 
 10701 ;; Auto vars:     Size  Location     Type
 10702 ;;  crc             2    9[COMMON] unsigned int 
 10703 ;;  i               2    7[COMMON] unsigned int 
 10704 ;;  j               2    5[COMMON] unsigned int 
 10705 ;;  Data            2    0        unsigned int 
 10706 ;; Return value:  Size  Location     Type
 10707 ;;                  2    1[COMMON] unsigned int 
 10708 ;; Registers used:
 10709 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10710 ;; Tracked objects:
 10711 ;;		On entry : 1F/0
 10712 ;;		On exit  : 1F/0
 10713 ;;		Unchanged: 1F/0
 10714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10715 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10716 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10718 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10719 ;;Total ram usage:       10 bytes
 10720 ;; Hardware stack levels used:    1
 10721 ;; Hardware stack levels required when called:    1
 10722 ;; This function calls:
 10723 ;;		Nothing
 10724 ;; This function is called by:
 10725 ;;		_crc_verify
 10726 ;;		_crc_append
 10727 ;; This function uses a non-reentrant model
 10728 ;;
 10729                           
 10730                           
 10731                           ;psect for function _crc_sum
 10732  0ED5                     _crc_sum:	
 10733                           
 10734                           ;crc16.c: 118: uint16_t crc=0xFFFF;
 10735                           
 10736                           ;incstack = 0
 10737                           ; Regs used in _crc_sum: [wreg+fsr1l+fsr1h+status,2+status,0]
 10738  0ED5  30FF               	movlw	255
 10739  0ED6  00F9               	movwf	crc_sum@crc
 10740  0ED7  00FA               	movwf	crc_sum@crc+1
 10741                           
 10742                           ;crc16.c: 119: uint16_t i, j, Data;
 10743                           ;crc16.c: 120: for ( j=0; j<len;j++){
 10744  0ED8  01F5               	clrf	crc_sum@j
 10745  0ED9  01F6               	clrf	crc_sum@j+1
 10746  0EDA                     l2719:	
 10747  0EDA  0874               	movf	crc_sum@len+1,w
 10748  0EDB  0276               	subwf	crc_sum@j+1,w
 10749  0EDC  1D03               	skipz
 10750  0EDD  2EE0               	goto	u1285
 10751  0EDE  0873               	movf	crc_sum@len,w
 10752  0EDF  0275               	subwf	crc_sum@j,w
 10753  0EE0                     u1285:	
 10754  0EE0  1803               	btfsc	3,0
 10755  0EE1  2F06               	goto	l2721
 10756                           
 10757                           ;crc16.c: 121: crc=crc ^*buf++;
 10758  0EE2  0871               	movf	crc_sum@buf,w
 10759  0EE3  0086               	movwf	6
 10760  0EE4  0872               	movf	crc_sum@buf+1,w
 10761  0EE5  0087               	movwf	7
 10762  0EE6  0801               	movf	1,w
 10763  0EE7  06F9               	xorwf	crc_sum@crc,f
 10764  0EE8  0AF1               	incf	crc_sum@buf,f
 10765  0EE9  1903               	skipnz
 10766  0EEA  0AF2               	incf	crc_sum@buf+1,f
 10767                           
 10768                           ;crc16.c: 122: for ( i=0; i<8; i++){
 10769  0EEB  01F7               	clrf	crc_sum@i
 10770  0EEC  01F8               	clrf	crc_sum@i+1
 10771  0EED                     l1071:	
 10772                           
 10773                           ;crc16.c: 124: if(crc&0x0001){
 10774  0EED  1C79               	btfss	crc_sum@crc,0
 10775  0EEE  2EF6               	goto	l2713
 10776  0EEF  3001               	movlw	1
 10777                           
 10778                           ;crc16.c: 125: crc=crc>>1;
 10779  0EF0  36FA               	lsrf	crc_sum@crc+1,f
 10780  0EF1  0CF9               	rrf	crc_sum@crc,f
 10781                           
 10782                           ;crc16.c: 126: crc=crc^ 0xa001;
 10783  0EF2  06F9               	xorwf	crc_sum@crc,f
 10784  0EF3  30A0               	movlw	160
 10785  0EF4  06FA               	xorwf	crc_sum@crc+1,f
 10786                           
 10787                           ;crc16.c: 127: }else{
 10788  0EF5  2EF8               	goto	l1074
 10789  0EF6                     l2713:	
 10790                           
 10791                           ;crc16.c: 128: crc=crc>>1;
 10792  0EF6  36FA               	lsrf	crc_sum@crc+1,f
 10793  0EF7  0CF9               	rrf	crc_sum@crc,f
 10794  0EF8                     l1074:	
 10795  0EF8  0AF7               	incf	crc_sum@i,f
 10796  0EF9  1903               	skipnz
 10797  0EFA  0AF8               	incf	crc_sum@i+1,f
 10798  0EFB  3000               	movlw	0
 10799  0EFC  0278               	subwf	crc_sum@i+1,w
 10800  0EFD  3008               	movlw	8
 10801  0EFE  1903               	skipnz
 10802  0EFF  0277               	subwf	crc_sum@i,w
 10803  0F00  1C03               	skipc
 10804  0F01  2EED               	goto	l1071
 10805  0F02  0AF5               	incf	crc_sum@j,f
 10806  0F03  1903               	skipnz
 10807  0F04  0AF6               	incf	crc_sum@j+1,f
 10808  0F05  2EDA               	goto	l2719
 10809  0F06                     l2721:	
 10810                           
 10811                           ;crc16.c: 129: }
 10812                           ;crc16.c: 130: }
 10813                           ;crc16.c: 132: }
 10814                           ;crc16.c: 133: return ( crc);
 10815  0F06  087A               	movf	crc_sum@crc+1,w
 10816  0F07  00F2               	movwf	?_crc_sum+1
 10817  0F08  0879               	movf	crc_sum@crc,w
 10818  0F09  00F1               	movwf	?_crc_sum
 10819  0F0A  0008               	return
 10820  0F0B                     __end_of_crc_sum:	
 10821  0F0B                     __ptext3:	
 10822 ;; *************** function _my_flash_system_read *****************
 10823 ;; Defined at:
 10824 ;;		line 14 in file "src/api/sysData.c"
 10825 ;; Parameters:    Size  Location     Type
 10826 ;;  buf             1    wreg     PTR unsigned char 
 10827 ;;		 -> sysData(52), 
 10828 ;;  len             2    1[COMMON] unsigned int 
 10829 ;; Auto vars:     Size  Location     Type
 10830 ;;  buf             1    5[COMMON] PTR unsigned char 
 10831 ;;		 -> sysData(52), 
 10832 ;;  flashAddr       2    8[COMMON] unsigned int 
 10833 ;;  i               2    6[COMMON] unsigned int 
 10834 ;;  GIEBitValue     1    4[COMMON] unsigned char 
 10835 ;; Return value:  Size  Location     Type
 10836 ;;                  1    wreg      void 
 10837 ;; Registers used:
 10838 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10839 ;; Tracked objects:
 10840 ;;		On entry : 1F/1B
 10841 ;;		On exit  : 7/3
 10842 ;;		Unchanged: 0/0
 10843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10844 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10845 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10846 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10847 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10848 ;;Total ram usage:        9 bytes
 10849 ;; Hardware stack levels used:    1
 10850 ;; Hardware stack levels required when called:    1
 10851 ;; This function calls:
 10852 ;;		Nothing
 10853 ;; This function is called by:
 10854 ;;		_sys_data_init
 10855 ;; This function uses a non-reentrant model
 10856 ;;
 10857                           
 10858                           
 10859                           ;psect for function _my_flash_system_read
 10860  0F0B                     _my_flash_system_read:	
 10861                           
 10862                           ;incstack = 0
 10863                           ; Regs used in _my_flash_system_read: [wreg+fsr1l+fsr1h+status,2+status,0]
 10864                           ;my_flash_system_read@buf stored from wreg
 10865  0F0B  00F5               	movwf	my_flash_system_read@buf
 10866                           
 10867                           ;sysData.c: 16: uint16_t flashAddr=0x1f80;
 10868  0F0C  3080               	movlw	128
 10869  0F0D  00F8               	movwf	my_flash_system_read@flashAddr
 10870  0F0E  301F               	movlw	31
 10871  0F0F  00F9               	movwf	my_flash_system_read@flashAddr+1
 10872                           
 10873                           ;sysData.c: 17: uint16_t i;
 10874                           ;sysData.c: 19: uint8_t GIEBitValue = INTCONbits.GIE;
 10875  0F10  3000               	movlw	0
 10876  0F11  1B8B               	btfsc	11,7	;volatile
 10877  0F12  3001               	movlw	1
 10878  0F13  00F4               	movwf	my_flash_system_read@GIEBitValue
 10879                           
 10880                           ;sysData.c: 21: INTCONbits.GIE = 0;
 10881  0F14  138B               	bcf	11,7	;volatile
 10882                           
 10883                           ;sysData.c: 23: for(i=0;i<len;i++){
 10884  0F15  01F6               	clrf	my_flash_system_read@i
 10885  0F16  01F7               	clrf	my_flash_system_read@i+1
 10886  0F17                     l3073:	
 10887  0F17  0872               	movf	my_flash_system_read@len+1,w
 10888  0F18  0277               	subwf	my_flash_system_read@i+1,w
 10889  0F19  1D03               	skipz
 10890  0F1A  2F1D               	goto	u1515
 10891  0F1B  0871               	movf	my_flash_system_read@len,w
 10892  0F1C  0276               	subwf	my_flash_system_read@i,w
 10893  0F1D                     u1515:	
 10894  0F1D  1803               	btfsc	3,0
 10895  0F1E  2F38               	goto	l3075
 10896                           
 10897                           ;sysData.c: 25: PMADRL = (flashAddr & 0x00FF);
 10898  0F1F  0878               	movf	my_flash_system_read@flashAddr,w
 10899  0F20  0023               	movlb	3	; select bank3
 10900  0F21  0091               	movwf	17	;volatile
 10901                           
 10902                           ;sysData.c: 26: PMADRH = ((flashAddr & 0xFF00) >> 8);
 10903  0F22  0879               	movf	my_flash_system_read@flashAddr+1,w
 10904  0F23  0092               	movwf	18	;volatile
 10905                           
 10906                           ;sysData.c: 28: PMCON1bits.CFGS = 0;
 10907  0F24  1315               	bcf	21,6	;volatile
 10908                           
 10909                           ;sysData.c: 29: PMCON1bits.RD = 1;
 10910  0F25  1415               	bsf	21,0	;volatile
 10911                           
 10912                           ;sysData.c: 30: __nop();
 10913  0F26  0000               	nop
 10914                           
 10915                           ;sysData.c: 31: __nop();
 10916  0F27  0000               	nop
 10917                           
 10918                           ;sysData.c: 32: buf[i]=PMDATL;
 10919  0F28  0876               	movf	my_flash_system_read@i,w
 10920  0F29  0775               	addwf	my_flash_system_read@buf,w
 10921  0F2A  00F3               	movwf	??_my_flash_system_read
 10922  0F2B  0086               	movwf	6
 10923  0F2C  3001               	movlw	1	; select bank2/3
 10924  0F2D  0087               	movwf	7
 10925  0F2E  0023               	movlb	3	; select bank3
 10926  0F2F  0813               	movf	19,w	;volatile
 10927  0F30  0081               	movwf	1
 10928                           
 10929                           ;sysData.c: 33: flashAddr++;
 10930  0F31  0AF8               	incf	my_flash_system_read@flashAddr,f
 10931  0F32  1903               	skipnz
 10932  0F33  0AF9               	incf	my_flash_system_read@flashAddr+1,f
 10933  0F34  0AF6               	incf	my_flash_system_read@i,f
 10934  0F35  1903               	skipnz
 10935  0F36  0AF7               	incf	my_flash_system_read@i+1,f
 10936  0F37  2F17               	goto	l3073
 10937  0F38                     l3075:	
 10938                           
 10939                           ;sysData.c: 34: }
 10940                           ;sysData.c: 35: INTCONbits.GIE = GIEBitValue;
 10941  0F38  0C74               	rrf	my_flash_system_read@GIEBitValue,w
 10942  0F39  2FCE               	ljmp	PL24	;call to abstracted procedure
 10943  0F3A                     __end_of_my_flash_system_read:	
 10944  0F3A                     __ptext17:	
 10945 ;; *************** function _my_flash_system_write *****************
 10946 ;; Defined at:
 10947 ;;		line 38 in file "src/api/sysData.c"
 10948 ;; Parameters:    Size  Location     Type
 10949 ;;  buf             1    wreg     PTR unsigned char 
 10950 ;;		 -> sysData(52), 
 10951 ;;  len             2    1[COMMON] unsigned int 
 10952 ;; Auto vars:     Size  Location     Type
 10953 ;;  buf             1    5[BANK0 ] PTR unsigned char 
 10954 ;;		 -> sysData(52), 
 10955 ;;  i               2   10[BANK0 ] unsigned int 
 10956 ;;  flashAddr       2    8[BANK0 ] unsigned int 
 10957 ;;  loc             2    6[BANK0 ] unsigned int 
 10958 ;;  blocNum         2    3[BANK0 ] unsigned int 
 10959 ;;  j               2    0[BANK0 ] unsigned int 
 10960 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
 10961 ;; Return value:  Size  Location     Type
 10962 ;;                  2    1[COMMON] unsigned int 
 10963 ;; Registers used:
 10964 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10965 ;; Tracked objects:
 10966 ;;		On entry : 1F/3
 10967 ;;		On exit  : 1F/0
 10968 ;;		Unchanged: 0/0
 10969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10970 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10971 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10972 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10973 ;;      Totals:         3      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10974 ;;Total ram usage:       15 bytes
 10975 ;; Hardware stack levels used:    1
 10976 ;; Hardware stack levels required when called:    1
 10977 ;; This function calls:
 10978 ;;		Nothing
 10979 ;; This function is called by:
 10980 ;;		_sys_data_init
 10981 ;;		_sys_data_save
 10982 ;; This function uses a non-reentrant model
 10983 ;;
 10984                           
 10985                           
 10986                           ;psect for function _my_flash_system_write
 10987  0F3A                     _my_flash_system_write:	
 10988                           
 10989                           ;incstack = 0
 10990                           ; Regs used in _my_flash_system_write: [wreg+fsr1l+fsr1h+status,2+status,0]
 10991                           ;my_flash_system_write@buf stored from wreg
 10992  0F3A  0020               	movlb	0	; select bank0
 10993  0F3B  00A5               	movwf	my_flash_system_write@buf
 10994  0F3C  3080               	movlw	128
 10995                           
 10996                           ;sysData.c: 41: uint16_t loc,j,i=0;
 10997  0F3D  01AA               	clrf	my_flash_system_write@i
 10998  0F3E  01AB               	clrf	my_flash_system_write@i+1
 10999                           
 11000                           ;sysData.c: 42: uint16_t flashAddr=0x1f80;
 11001  0F3F  00A8               	movwf	my_flash_system_write@flashAddr
 11002  0F40  301F               	movlw	31
 11003  0F41  00A9               	movwf	my_flash_system_write@flashAddr+1
 11004                           
 11005                           ;sysData.c: 43: uint8_t GIEBitValue=INTCONbits.GIE;
 11006  0F42  3000               	movlw	0
 11007  0F43  1B8B               	btfsc	11,7	;volatile
 11008  0F44  3001               	movlw	1
 11009  0F45  00A2               	movwf	my_flash_system_write@GIEBitValue
 11010                           
 11011                           ;sysData.c: 45: blocNum=len/32;
 11012  0F46  0872               	movf	my_flash_system_write@len+1,w
 11013  0F47  00A4               	movwf	my_flash_system_write@blocNum+1
 11014  0F48  0871               	movf	my_flash_system_write@len,w
 11015  0F49  00A3               	movwf	my_flash_system_write@blocNum
 11016  0F4A  3005               	movlw	5
 11017  0F4B                     u1295:	
 11018  0F4B  36A4               	lsrf	my_flash_system_write@blocNum+1,f
 11019  0F4C  0CA3               	rrf	my_flash_system_write@blocNum,f
 11020  0F4D  0B89               	decfsz	9,f
 11021  0F4E  2F4B               	goto	u1295
 11022                           
 11023                           ;sysData.c: 46: if(len%32)blocNum++;
 11024  0F4F  0871               	movf	my_flash_system_write@len,w
 11025  0F50  391F               	andlw	31
 11026  0F51  1903               	btfsc	3,2
 11027  0F52  2F56               	goto	l2739
 11028  0F53  0AA3               	incf	my_flash_system_write@blocNum,f
 11029  0F54  1903               	skipnz
 11030  0F55  0AA4               	incf	my_flash_system_write@blocNum+1,f
 11031  0F56                     l2739:	
 11032                           
 11033                           ;sysData.c: 48: INTCONbits.GIE = 0;
 11034  0F56  138B               	bcf	11,7	;volatile
 11035                           
 11036                           ;sysData.c: 49: loc=0;
 11037  0F57  01A6               	clrf	my_flash_system_write@loc
 11038  0F58  01A7               	clrf	my_flash_system_write@loc+1
 11039                           
 11040                           ;sysData.c: 50: for(j=0;j<blocNum;j++){
 11041  0F59  01A0               	clrf	my_flash_system_write@j
 11042  0F5A  01A1               	clrf	my_flash_system_write@j+1
 11043  0F5B                     l2779:	
 11044  0F5B  0824               	movf	my_flash_system_write@blocNum+1,w
 11045  0F5C  0221               	subwf	my_flash_system_write@j+1,w
 11046  0F5D  1D03               	skipz
 11047  0F5E  2F61               	goto	u1345
 11048  0F5F  0823               	movf	my_flash_system_write@blocNum,w
 11049  0F60  0220               	subwf	my_flash_system_write@j,w
 11050  0F61                     u1345:	
 11051  0F61  1803               	btfsc	3,0
 11052  0F62  2FB2               	goto	l2781
 11053                           
 11054                           ;sysData.c: 51: PMCON1bits.CFGS = 0;
 11055  0F63  0023               	movlb	3	; select bank3
 11056  0F64  1315               	bcf	21,6	;volatile
 11057                           
 11058                           ;sysData.c: 52: PMCON1bits.WREN = 1;
 11059  0F65  1515               	bsf	21,2	;volatile
 11060                           
 11061                           ;sysData.c: 53: PMCON1bits.LWLO = 1;
 11062  0F66  1695               	bsf	21,5	;volatile
 11063                           
 11064                           ;sysData.c: 55: for(i=0;i<32;i++){
 11065  0F67  0020               	movlb	0	; select bank0
 11066  0F68  01AA               	clrf	my_flash_system_write@i
 11067  0F69  01AB               	clrf	my_flash_system_write@i+1
 11068  0F6A                     l2751:	
 11069                           
 11070                           ;sysData.c: 57: PMADRL = (flashAddr & 0xFF);
 11071  0F6A  0828               	movf	my_flash_system_write@flashAddr,w
 11072  0F6B  0023               	movlb	3	; select bank3
 11073  0F6C  0091               	movwf	17	;volatile
 11074                           
 11075                           ;sysData.c: 59: PMADRH = ((flashAddr & 0xFF00) >> 8);
 11076  0F6D  0020               	movlb	0	; select bank0
 11077  0F6E  0829               	movf	my_flash_system_write@flashAddr+1,w
 11078  0F6F  0023               	movlb	3	; select bank3
 11079  0F70  0092               	movwf	18	;volatile
 11080                           
 11081                           ;sysData.c: 62: if(loc<len){
 11082  0F71  0872               	movf	my_flash_system_write@len+1,w
 11083  0F72  0020               	movlb	0	; select bank0
 11084  0F73  0227               	subwf	my_flash_system_write@loc+1,w
 11085  0F74  1D03               	skipz
 11086  0F75  2F78               	goto	u1315
 11087  0F76  0871               	movf	my_flash_system_write@len,w
 11088  0F77  0226               	subwf	my_flash_system_write@loc,w
 11089  0F78                     u1315:	
 11090  0F78  1803               	skipnc
 11091  0F79  2F84               	goto	l2755
 11092                           
 11093                           ;sysData.c: 63: PMDATL = buf[loc];
 11094  0F7A  0826               	movf	my_flash_system_write@loc,w
 11095  0F7B  0725               	addwf	my_flash_system_write@buf,w
 11096  0F7C  00F3               	movwf	??_my_flash_system_write
 11097  0F7D  0086               	movwf	6
 11098  0F7E  3001               	movlw	1	; select bank2/3
 11099  0F7F  0087               	movwf	7
 11100  0F80  0801               	movf	1,w
 11101  0F81  0023               	movlb	3	; select bank3
 11102  0F82  0093               	movwf	19	;volatile
 11103                           
 11104                           ;sysData.c: 64: }else{
 11105  0F83  2F86               	goto	l2757
 11106  0F84                     l2755:	
 11107                           
 11108                           ;sysData.c: 65: PMDATL = 0x00;
 11109  0F84  0023               	movlb	3	; select bank3
 11110  0F85  0193               	clrf	19	;volatile
 11111  0F86                     l2757:	
 11112                           
 11113                           ;sysData.c: 66: }
 11114                           ;sysData.c: 67: loc++;
 11115  0F86  0020               	movlb	0	; select bank0
 11116  0F87  0AA6               	incf	my_flash_system_write@loc,f
 11117  0F88  1903               	skipnz
 11118  0F89  0AA7               	incf	my_flash_system_write@loc+1,f
 11119                           
 11120                           ;sysData.c: 68: PMDATH = 0x00;
 11121  0F8A  0023               	movlb	3	; select bank3
 11122  0F8B  0194               	clrf	20	;volatile
 11123                           
 11124                           ;sysData.c: 69: if((i%32) == 32 -1 ){
 11125  0F8C  301F               	movlw	31
 11126  0F8D  0020               	movlb	0	; select bank0
 11127  0F8E  052A               	andwf	my_flash_system_write@i,w
 11128  0F8F  00F3               	movwf	??_my_flash_system_write
 11129  0F90  3A1F               	xorlw	31
 11130  0F91  1D03               	btfss	3,2
 11131  0F92  2F95               	goto	l2765
 11132                           
 11133                           ;sysData.c: 70: PMCON1bits.LWLO = 0;
 11134  0F93  0023               	movlb	3	; select bank3
 11135  0F94  1295               	bcf	21,5	;volatile
 11136  0F95                     l2765:	
 11137                           
 11138                           ;sysData.c: 71: }
 11139                           ;sysData.c: 73: PMCON2 = 0x55;
 11140  0F95  3055               	movlw	85
 11141  0F96  0023               	movlb	3	; select bank3
 11142  0F97  0096               	movwf	22	;volsfr
 11143                           
 11144                           ;sysData.c: 74: PMCON2 = 0xAA;
 11145  0F98  30AA               	movlw	170
 11146  0F99  0096               	movwf	22	;volsfr
 11147                           
 11148                           ;sysData.c: 75: PMCON1bits.WR = 1;
 11149  0F9A  1495               	bsf	21,1	;volatile
 11150                           
 11151                           ;sysData.c: 76: __nop();
 11152  0F9B  0000               	nop
 11153                           
 11154                           ;sysData.c: 77: __nop();
 11155  0F9C  0000               	nop
 11156                           
 11157                           ;sysData.c: 78: flashAddr++;
 11158  0F9D  0020               	movlb	0	; select bank0
 11159  0F9E  0AA8               	incf	my_flash_system_write@flashAddr,f
 11160  0F9F  1903               	skipnz
 11161  0FA0  0AA9               	incf	my_flash_system_write@flashAddr+1,f
 11162  0FA1  0AAA               	incf	my_flash_system_write@i,f
 11163  0FA2  1903               	skipnz
 11164  0FA3  0AAB               	incf	my_flash_system_write@i+1,f
 11165  0FA4  3000               	movlw	0
 11166  0FA5  022B               	subwf	my_flash_system_write@i+1,w
 11167  0FA6  3020               	movlw	32
 11168  0FA7  1903               	skipnz
 11169  0FA8  022A               	subwf	my_flash_system_write@i,w
 11170  0FA9  1C03               	skipc
 11171  0FAA  2F6A               	goto	l2751
 11172                           
 11173                           ;sysData.c: 79: }
 11174                           ;sysData.c: 80: PMCON1bits.WREN = 0;
 11175  0FAB  0023               	movlb	3	; select bank3
 11176  0FAC  1115               	bcf	21,2	;volatile
 11177  0FAD  0020               	movlb	0	; select bank0
 11178  0FAE  0AA0               	incf	my_flash_system_write@j,f
 11179  0FAF  1903               	skipnz
 11180  0FB0  0AA1               	incf	my_flash_system_write@j+1,f
 11181  0FB1  2F5B               	goto	l2779
 11182  0FB2                     l2781:	
 11183                           
 11184                           ;sysData.c: 81: }
 11185                           ;sysData.c: 82: INTCONbits.GIE = GIEBitValue;
 11186  0FB2  0C22               	rrf	my_flash_system_write@GIEBitValue,w
 11187  0FB3  2FCE               	ljmp	PL24	;call to abstracted procedure
 11188  0FB4                     __end_of_my_flash_system_write:	
 11189  0FB4                     PL12:	
 11190  0FB4  0086               	movwf	6
 11191  0FB5  3001               	movlw	1	; select bank2/3
 11192  0FB6  0087               	movwf	7
 11193  0FB7  0873               	movf	getRegisterVal@tempData,w
 11194  0FB8  0084               	movwf	4
 11195  0FB9  0185               	clrf	5
 11196  0FBA  3F40               	moviw [0]fsr1
 11197  0FBB  3F80               	movwi [0]fsr0
 11198  0FBC  3F41               	moviw [1]fsr1
 11199  0FBD  3F81               	movwi [1]fsr0
 11200  0FBE  0008               	return
 11201  0FBF                     __end_ofPL12:	
 11202  0FBF                     PL14:	
 11203  0FBF  0086               	movwf	6
 11204  0FC0  3002               	movlw	2	; select bank4/5
 11205  0FC1  0087               	movwf	7
 11206  0FC2  0801               	movf	1,w
 11207  0FC3  0022               	movlb	2	; select bank2
 11208  0FC4  0622               	xorwf	(_sysData^(0+256)+2),w
 11209  0FC5  0008               	return
 11210  0FC6                     __end_ofPL14:	
 11211  0FC6                     PL22:	
 11212  0FC6  0086               	movwf	6
 11213  0FC7  3001               	movlw	1	; select bank2/3
 11214  0FC8  0087               	movwf	7
 11215  0FC9  0871               	movf	?___wmul,w
 11216  0FCA  3FC0               	movwi [0]fsr1
 11217  0FCB  0872               	movf	?___wmul+1,w
 11218  0FCC  3FC1               	movwi [1]fsr1
 11219  0FCD  0008               	return
 11220  0FCE                     __end_ofPL22:	
 11221  0FCE                     PL24:	
 11222  0FCE  1C03               	skipc
 11223  0FCF  138B               	bcf	11,7	;volatile
 11224  0FD0  1803               	skipnc
 11225  0FD1  178B               	bsf	11,7	;volatile
 11226  0FD2  0008               	return
 11227  0FD3                     __end_ofPL24:	
 11228  0FD3                     __ptext20:	
 11229 ;; *************** function _modbus_response_illgeal_function *****************
 11230 ;; Defined at:
 11231 ;;		line 7 in file "src/api/modbus.c"
 11232 ;; Parameters:    Size  Location     Type
 11233 ;;  buf             1    wreg     PTR unsigned char 
 11234 ;;		 -> modbusBuf(64), 
 11235 ;;  errcode         1   11[BANK0 ] unsigned char 
 11236 ;; Auto vars:     Size  Location     Type
 11237 ;;  buf             1   12[BANK0 ] PTR unsigned char 
 11238 ;;		 -> modbusBuf(64), 
 11239 ;;  pmdbs           1   13[BANK0 ] PTR struct .
 11240 ;;		 -> modbusBuf(64), 
 11241 ;; Return value:  Size  Location     Type
 11242 ;;                  1    wreg      void 
 11243 ;; Registers used:
 11244 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11245 ;; Tracked objects:
 11246 ;;		On entry : 1F/0
 11247 ;;		On exit  : 1F/0
 11248 ;;		Unchanged: 0/0
 11249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11250 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11251 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11253 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11254 ;;Total ram usage:        3 bytes
 11255 ;; Hardware stack levels used:    1
 11256 ;; Hardware stack levels required when called:    3
 11257 ;; This function calls:
 11258 ;;		_crc_append
 11259 ;;		_uart_send_len
 11260 ;; This function is called by:
 11261 ;;		_modbus_response_process
 11262 ;; This function uses a non-reentrant model
 11263 ;;
 11264                           
 11265                           
 11266                           ;psect for function _modbus_response_illgeal_function
 11267  0FD3                     _modbus_response_illgeal_function:	
 11268                           
 11269                           ;incstack = 0
 11270                           ; Regs used in _modbus_response_illgeal_function: [wreg+fsr1l+fsr1h+status,2+status,0+pc
      +                          lath+cstack]
 11271                           ;modbus_response_illgeal_function@buf stored from wreg
 11272  0FD3  00AC               	movwf	modbus_response_illgeal_function@buf
 11273                           
 11274                           ;modbus.c: 9: st_modbusErrRespStructDef* pmdbs=(st_modbusErrRespStructDef*)buf;
 11275  0FD4  00AD               	movwf	modbus_response_illgeal_function@pmdbs
 11276                           
 11277                           ;modbus.c: 10: if(pmdbs->addr==0x00)return;
 11278  0FD5  0086               	movwf	6
 11279  0FD6  3002               	movlw	2	; select bank4/5
 11280  0FD7  0087               	movwf	7
 11281  0FD8  0801               	movf	1,w
 11282  0FD9  1903               	btfsc	3,2
 11283  0FDA  0008               	return
 11284                           
 11285                           ;modbus.c: 11: pmdbs->addr=sysData.id;
 11286  0FDB  082D               	movf	modbus_response_illgeal_function@pmdbs,w
 11287                           
 11288                           ;modbus.c: 12: if(errcode){
 11289  0FDC  27FA  318C         	fcall	PL32	;call to abstracted procedure
 11290  0FDE  082B               	movf	modbus_response_illgeal_function@errcode,w
 11291  0FDF  1903               	btfsc	3,2
 11292  0FE0  2FE5               	goto	l790
 11293                           
 11294                           ;modbus.c: 13: pmdbs->func+=0x80;
 11295  0FE1  0A2D               	incf	modbus_response_illgeal_function@pmdbs,w
 11296  0FE2  0086               	movwf	6
 11297  0FE3  3080               	movlw	128
 11298  0FE4  0781               	addwf	1,f
 11299  0FE5                     l790:	
 11300                           
 11301                           ;modbus.c: 14: }
 11302                           ;modbus.c: 15: pmdbs->errcord=errcode;
 11303  0FE5  082D               	movf	modbus_response_illgeal_function@pmdbs,w
 11304  0FE6  3E02               	addlw	2
 11305  0FE7  0086               	movwf	6
 11306  0FE8  3002               	movlw	2	; select bank4/5
 11307  0FE9  0087               	movwf	7
 11308  0FEA  082B               	movf	modbus_response_illgeal_function@errcode,w
 11309  0FEB  0081               	movwf	1
 11310                           
 11311                           ;modbus.c: 16: crc_append(buf,3);
 11312  0FEC  082C               	movf	modbus_response_illgeal_function@buf,w
 11313  0FED  00A0               	movwf	crc_append@message
 11314  0FEE  3002               	movlw	2
 11315  0FEF  00A1               	movwf	crc_append@message+1
 11316  0FF0  3003               	movlw	3
 11317  0FF1  00A2               	movwf	crc_append@n
 11318  0FF2  01A3               	clrf	crc_append@n+1
 11319  0FF3  3187  2708  318C   	fcall	_crc_append
 11320                           
 11321                           ;modbus.c: 17: uart_send_len(buf,5);
 11322  0FF6  3005               	movlw	5
 11323  0FF7  00F1               	movwf	uart_send_len@len
 11324  0FF8  082C               	movf	modbus_response_illgeal_function@buf,w
 11325  0FF9  2E24               	ljmp	_uart_send_len
 11326  0FFA                     __end_of_modbus_response_illgeal_function:	
 11327  0FFA                     PL32:	
 11328  0FFA  0086               	movwf	6
 11329  0FFB  0022               	movlb	2	; select bank2
 11330  0FFC  0822               	movf	(_sysData^(0+256)+2),w
 11331  0FFD  0081               	movwf	1
 11332  0FFE  0020               	movlb	0	; select bank0
 11333  0FFF  0008               	return
 11334  1000                     __end_ofPL32:	
 11335                           
 11336                           	psect	swtext2
 11337  07D0                     __pswtext2:	
 11338  07D0                     S4419:	
 11339  07D0  318C  2CF2         	ljmp	l2823
 11340  07D2  318C  2CF9         	ljmp	l2825
 11341  07D4  318D  2D05         	ljmp	l2827
 11342  07D6  318D  2D0E         	ljmp	l2829
 11343  07D8  318D  2D17         	ljmp	l2831
 11344  07DA  318D  2D20         	ljmp	l2833
 11345  07DC  318D  2D29         	ljmp	l2835
 11346  07DE  318D  2D31         	ljmp	l2837
 11347  07E0  318D  2D39         	ljmp	l2839
 11348  07E2  318D  2D41         	ljmp	l2841
 11349  07E4  318D  2D49         	ljmp	l2843
 11350  07E6  318D  2D51         	ljmp	l2845
 11351  07E8  318D  2D5A         	ljmp	l2847
 11352  07EA  318D  2D62         	ljmp	l2849
 11353  07EC  318D  2D6A         	ljmp	l2851
 11354                           
 11355                           	psect	text28
 11356  08D8                     __ptext28:	
 11357 ;; *************** function _calc_temp_rs *****************
 11358 ;; Defined at:
 11359 ;;		line 154 in file "src/api/sample.c"
 11360 ;; Parameters:    Size  Location     Type
 11361 ;;		None
 11362 ;; Auto vars:     Size  Location     Type
 11363 ;;  y               4   13[BANK0 ] unsigned long 
 11364 ;;  x               4    9[BANK0 ] unsigned long 
 11365 ;; Return value:  Size  Location     Type
 11366 ;;                  4    5[BANK0 ] unsigned long 
 11367 ;; Registers used:
 11368 ;;		wreg, status,2, status,0, pclath, cstack
 11369 ;; Tracked objects:
 11370 ;;		On entry : 1F/0
 11371 ;;		On exit  : 1F/0
 11372 ;;		Unchanged: 0/0
 11373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11374 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11375 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11377 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11378 ;;Total ram usage:       12 bytes
 11379 ;; Hardware stack levels used:    1
 11380 ;; Hardware stack levels required when called:    2
 11381 ;; This function calls:
 11382 ;;		___lldiv
 11383 ;;		___lmul
 11384 ;; This function is called by:
 11385 ;;		_main
 11386 ;; This function uses a non-reentrant model
 11387 ;;
 11388                           
 11389                           
 11390                           ;psect for function _calc_temp_rs
 11391  08D8                     _calc_temp_rs:	
 11392                           
 11393                           ;sample.c: 167: uint32_t x,y;
 11394                           ;sample.c: 168: y=12000UL;
 11395                           
 11396                           ;incstack = 0
 11397                           ; Regs used in _calc_temp_rs: [wreg+status,2+status,0+pclath+cstack]
 11398  08D8  302E               	movlw	46
 11399  08D9  01B0               	clrf	calc_temp_rs@y+3
 11400  08DA  01AF               	clrf	calc_temp_rs@y+2
 11401  08DB  00AE               	movwf	calc_temp_rs@y+1
 11402  08DC  30E0               	movlw	224
 11403  08DD  00AD               	movwf	calc_temp_rs@y
 11404                           
 11405                           ;sample.c: 169: y=y*rtAdcValueRsHi;
 11406  08DE  0859               	movf	_rtAdcValueRsHi,w
 11407  08DF  00F1               	movwf	___lmul@multiplier
 11408  08E0  085A               	movf	_rtAdcValueRsHi+1,w
 11409  08E1  00F2               	movwf	___lmul@multiplier+1
 11410  08E2  01F3               	clrf	___lmul@multiplier+2
 11411  08E3  01F4               	clrf	___lmul@multiplier+3
 11412  08E4  0830               	movf	calc_temp_rs@y+3,w
 11413  08E5  00F8               	movwf	___lmul@multiplicand+3
 11414  08E6  082F               	movf	calc_temp_rs@y+2,w
 11415  08E7  00F7               	movwf	___lmul@multiplicand+2
 11416  08E8  082E               	movf	calc_temp_rs@y+1,w
 11417  08E9  00F6               	movwf	___lmul@multiplicand+1
 11418  08EA  082D               	movf	calc_temp_rs@y,w
 11419  08EB  00F5               	movwf	___lmul@multiplicand
 11420  08EC  3185  25DE  3188   	fcall	___lmul
 11421  08EF  0874               	movf	?___lmul+3,w
 11422  08F0  00B0               	movwf	calc_temp_rs@y+3
 11423  08F1  0873               	movf	?___lmul+2,w
 11424  08F2  00AF               	movwf	calc_temp_rs@y+2
 11425  08F3  0872               	movf	?___lmul+1,w
 11426  08F4  00AE               	movwf	calc_temp_rs@y+1
 11427  08F5  0871               	movf	?___lmul,w
 11428  08F6  00AD               	movwf	calc_temp_rs@y
 11429                           
 11430                           ;sample.c: 170: x=rtAdcValueRsLo;
 11431  08F7  085B               	movf	_rtAdcValueRsLo,w
 11432  08F8  00A9               	movwf	calc_temp_rs@x
 11433  08F9  085C               	movf	_rtAdcValueRsLo+1,w
 11434  08FA  00AA               	movwf	calc_temp_rs@x+1
 11435  08FB  01AB               	clrf	calc_temp_rs@x+2
 11436  08FC  01AC               	clrf	calc_temp_rs@x+3
 11437                           
 11438                           ;sample.c: 171: y=y/x;
 11439  08FD  082C               	movf	calc_temp_rs@x+3,w
 11440  08FE  00F4               	movwf	___lldiv@divisor+3
 11441  08FF  082B               	movf	calc_temp_rs@x+2,w
 11442  0900  00F3               	movwf	___lldiv@divisor+2
 11443  0901  082A               	movf	calc_temp_rs@x+1,w
 11444  0902  00F2               	movwf	___lldiv@divisor+1
 11445  0903  0829               	movf	calc_temp_rs@x,w
 11446  0904  00F1               	movwf	___lldiv@divisor
 11447  0905  0830               	movf	calc_temp_rs@y+3,w
 11448  0906  00F8               	movwf	___lldiv@dividend+3
 11449  0907  082F               	movf	calc_temp_rs@y+2,w
 11450  0908  00F7               	movwf	___lldiv@dividend+2
 11451  0909  082E               	movf	calc_temp_rs@y+1,w
 11452  090A  00F6               	movwf	___lldiv@dividend+1
 11453  090B  082D               	movf	calc_temp_rs@y,w
 11454  090C  00F5               	movwf	___lldiv@dividend
 11455  090D  3186  26A3  3188   	fcall	___lldiv
 11456  0910  0874               	movf	?___lldiv+3,w
 11457  0911  00B0               	movwf	calc_temp_rs@y+3
 11458  0912  0873               	movf	?___lldiv+2,w
 11459  0913  00AF               	movwf	calc_temp_rs@y+2
 11460  0914  0872               	movf	?___lldiv+1,w
 11461  0915  00AE               	movwf	calc_temp_rs@y+1
 11462  0916  0871               	movf	?___lldiv,w
 11463  0917  00AD               	movwf	calc_temp_rs@y
 11464                           
 11465                           ;sample.c: 172: if(y<2000)y=2000;
 11466  0918  0830               	movf	calc_temp_rs@y+3,w
 11467  0919  1D03               	btfss	3,2
 11468  091A  292A               	goto	l4071
 11469  091B  082F               	movf	calc_temp_rs@y+2,w
 11470  091C  1D03               	btfss	3,2
 11471  091D  292A               	goto	l4071
 11472  091E  30D0               	movlw	208
 11473  091F  022D               	subwf	calc_temp_rs@y,w
 11474  0920  3007               	movlw	7
 11475  0921  3B2E               	subwfb	calc_temp_rs@y+1,w
 11476  0922  1803               	btfsc	3,0
 11477  0923  292A               	goto	l4071
 11478  0924  3007               	movlw	7
 11479  0925  01B0               	clrf	calc_temp_rs@y+3
 11480  0926  01AF               	clrf	calc_temp_rs@y+2
 11481  0927  00AE               	movwf	calc_temp_rs@y+1
 11482  0928  30D0               	movlw	208
 11483  0929  00AD               	movwf	calc_temp_rs@y
 11484  092A                     l4071:	
 11485                           
 11486                           ;sample.c: 173: if(y>25000)y=25000;
 11487  092A  0830               	movf	calc_temp_rs@y+3,w
 11488  092B  1D03               	btfss	3,2
 11489  092C  2936               	goto	l4073
 11490  092D  082F               	movf	calc_temp_rs@y+2,w
 11491  092E  1D03               	btfss	3,2
 11492  092F  2936               	goto	l4073
 11493  0930  30A9               	movlw	169
 11494  0931  022D               	subwf	calc_temp_rs@y,w
 11495  0932  3061               	movlw	97
 11496  0933  3B2E               	subwfb	calc_temp_rs@y+1,w
 11497  0934  1C03               	btfss	3,0
 11498  0935  293C               	goto	l4075
 11499  0936                     l4073:	
 11500  0936  3061               	movlw	97
 11501  0937  01B0               	clrf	calc_temp_rs@y+3
 11502  0938  01AF               	clrf	calc_temp_rs@y+2
 11503  0939  00AE               	movwf	calc_temp_rs@y+1
 11504  093A  30A8               	movlw	168
 11505  093B  00AD               	movwf	calc_temp_rs@y
 11506  093C                     l4075:	
 11507                           
 11508                           ;sample.c: 174: y=y-1000;
 11509  093C  3018               	movlw	24
 11510  093D  07AD               	addwf	calc_temp_rs@y,f
 11511  093E  30FC               	movlw	252
 11512  093F  3DAE               	addwfc	calc_temp_rs@y+1,f
 11513  0940  30FF               	movlw	255
 11514  0941  3DAF               	addwfc	calc_temp_rs@y+2,f
 11515  0942  3DB0               	addwfc	calc_temp_rs@y+3,f
 11516                           
 11517                           ;sample.c: 176: return y;
 11518  0943  0830               	movf	calc_temp_rs@y+3,w
 11519  0944  00A8               	movwf	?_calc_temp_rs+3
 11520  0945  082F               	movf	calc_temp_rs@y+2,w
 11521  0946  00A7               	movwf	?_calc_temp_rs+2
 11522  0947  082E               	movf	calc_temp_rs@y+1,w
 11523  0948  00A6               	movwf	?_calc_temp_rs+1
 11524  0949  082D               	movf	calc_temp_rs@y,w
 11525  094A  00A5               	movwf	?_calc_temp_rs
 11526  094B  0008               	return
 11527  094C                     __end_of_calc_temp_rs:	
 11528                           
 11529                           	psect	text40
 11530  08C5                     __ptext40:	
 11531 ;; *************** function _TMR2_Initialize *****************
 11532 ;; Defined at:
 11533 ;;		line 63 in file "mcc_generated_files/tmr2.c"
 11534 ;; Parameters:    Size  Location     Type
 11535 ;;		None
 11536 ;; Auto vars:     Size  Location     Type
 11537 ;;		None
 11538 ;; Return value:  Size  Location     Type
 11539 ;;                  1    wreg      void 
 11540 ;; Registers used:
 11541 ;;		wreg, status,2, status,0, pclath, cstack
 11542 ;; Tracked objects:
 11543 ;;		On entry : 1F/1
 11544 ;;		On exit  : 1F/0
 11545 ;;		Unchanged: 0/0
 11546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11550 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11551 ;;Total ram usage:        0 bytes
 11552 ;; Hardware stack levels used:    1
 11553 ;; Hardware stack levels required when called:    2
 11554 ;; This function calls:
 11555 ;;		_TMR2_SetInterruptHandler
 11556 ;;		_TMR2_StartTimer
 11557 ;; This function is called by:
 11558 ;;		_SYSTEM_Initialize
 11559 ;; This function uses a non-reentrant model
 11560 ;;
 11561                           
 11562                           
 11563                           ;psect for function _TMR2_Initialize
 11564  08C5                     _TMR2_Initialize:	
 11565                           
 11566                           ;tmr2.c: 68: T2CON = 0x4B;
 11567                           
 11568                           ;incstack = 0
 11569                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
 11570  08C5  304B               	movlw	75
 11571  08C6  0020               	movlb	0	; select bank0
 11572  08C7  009C               	movwf	28	;volatile
 11573                           
 11574                           ;tmr2.c: 71: PR2 = 0x7C;
 11575  08C8  307C               	movlw	124
 11576  08C9  009B               	movwf	27	;volatile
 11577                           
 11578                           ;tmr2.c: 74: TMR2 = 0x00;
 11579  08CA  019A               	clrf	26	;volatile
 11580                           
 11581                           ;tmr2.c: 77: PIR1bits.TMR2IF = 0;
 11582  08CB  1091               	bcf	17,1	;volatile
 11583                           
 11584                           ;tmr2.c: 80: PIE1bits.TMR2IE = 1;
 11585  08CC  0021               	movlb	1	; select bank1
 11586  08CD  1491               	bsf	17,1	;volatile
 11587                           
 11588                           ;tmr2.c: 83: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
 11589  08CE  3000               	movlw	0
 11590  08CF  01F1               	clrf	TMR2_SetInterruptHandler@InterruptHandler
 11591  08D0  01F2               	clrf	TMR2_SetInterruptHandler@InterruptHandler+1
 11592  08D1  20D4  3188         	fcall	_TMR2_SetInterruptHandler
 11593                           
 11594                           ;tmr2.c: 86: TMR2_StartTimer();
 11595  08D3  28D5               	ljmp	l2791
 11596  08D4                     __end_of_TMR2_Initialize:	
 11597  08D4                     __ptext42:	
 11598 ;; *************** function _TMR2_SetInterruptHandler *****************
 11599 ;; Defined at:
 11600 ;;		line 142 in file "mcc_generated_files/tmr2.c"
 11601 ;; Parameters:    Size  Location     Type
 11602 ;;  InterruptHan    2    1[COMMON] PTR FTN()void 
 11603 ;;		 -> TMR2_DefaultInterruptHandler(1), 
 11604 ;; Auto vars:     Size  Location     Type
 11605 ;;		None
 11606 ;; Return value:  Size  Location     Type
 11607 ;;                  1    wreg      void 
 11608 ;; Registers used:
 11609 ;;		None
 11610 ;; Tracked objects:
 11611 ;;		On entry : 1F/1
 11612 ;;		On exit  : 1F/1
 11613 ;;		Unchanged: 1F/0
 11614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11615 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11618 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11619 ;;Total ram usage:        2 bytes
 11620 ;; Hardware stack levels used:    1
 11621 ;; Hardware stack levels required when called:    1
 11622 ;; This function calls:
 11623 ;;		Nothing
 11624 ;; This function is called by:
 11625 ;;		_TMR2_Initialize
 11626 ;; This function uses a non-reentrant model
 11627 ;;
 11628                           
 11629                           
 11630                           ;psect for function _TMR2_SetInterruptHandler
 11631  08D4                     _TMR2_SetInterruptHandler:	
 11632                           
 11633                           ;incstack = 0
 11634                           ; Regs used in _TMR2_SetInterruptHandler: []
 11635  08D4  0008               	return
 11636  08D5                     __end_of_TMR2_SetInterruptHandler:	
 11637  08D5                     __ptext41:	
 11638 ;; *************** function _TMR2_StartTimer *****************
 11639 ;; Defined at:
 11640 ;;		line 89 in file "mcc_generated_files/tmr2.c"
 11641 ;; Parameters:    Size  Location     Type
 11642 ;;		None
 11643 ;; Auto vars:     Size  Location     Type
 11644 ;;		None
 11645 ;; Return value:  Size  Location     Type
 11646 ;;                  1    wreg      void 
 11647 ;; Registers used:
 11648 ;;		None
 11649 ;; Tracked objects:
 11650 ;;		On entry : 1F/1
 11651 ;;		On exit  : 1F/0
 11652 ;;		Unchanged: 0/0
 11653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11657 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11658 ;;Total ram usage:        0 bytes
 11659 ;; Hardware stack levels used:    1
 11660 ;; Hardware stack levels required when called:    1
 11661 ;; This function calls:
 11662 ;;		Nothing
 11663 ;; This function is called by:
 11664 ;;		_TMR2_Initialize
 11665 ;; This function uses a non-reentrant model
 11666 ;;
 11667                           
 11668                           
 11669                           ;psect for function _TMR2_StartTimer
 11670  08D5                     _TMR2_StartTimer:	
 11671  08D5                     l2791:	
 11672                           ;incstack = 0
 11673                           ; Regs used in _TMR2_StartTimer: []
 11674                           
 11675                           
 11676                           ;tmr2.c: 92: T2CONbits.TMR2ON = 1;
 11677  08D5  0020               	movlb	0	; select bank0
 11678  08D6  151C               	bsf	28,2	;volatile
 11679  08D7  0008               	return
 11680  08D8                     __end_of_TMR2_StartTimer:	
 11681                           
 11682                           	psect	intentry
 11683  0004                     __pintentry:	
 11684 ;; *************** function _INTERRUPT_InterruptManager *****************
 11685 ;; Defined at:
 11686 ;;		line 54 in file "mcc_generated_files/interrupt_manager.c"
 11687 ;; Parameters:    Size  Location     Type
 11688 ;;		None
 11689 ;; Auto vars:     Size  Location     Type
 11690 ;;  t8              1    0[COMMON] unsigned char 
 11691 ;; Return value:  Size  Location     Type
 11692 ;;                  1    wreg      void 
 11693 ;; Registers used:
 11694 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11695 ;; Tracked objects:
 11696 ;;		On entry : 0/0
 11697 ;;		On exit  : 0/0
 11698 ;;		Unchanged: 0/0
 11699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11701 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11703 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11704 ;;Total ram usage:        1 bytes
 11705 ;; Hardware stack levels used:    1
 11706 ;; This function calls:
 11707 ;;		Nothing
 11708 ;; This function is called by:
 11709 ;;		Interrupt level 1
 11710 ;; This function uses a non-reentrant model
 11711 ;;
 11712                           
 11713  0004                     _INTERRUPT_InterruptManager:	
 11714                           
 11715                           ;incstack = 0
 11716                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0]
 11717  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 11718  0005  3180               	pagesel	$
 11719                           
 11720                           ;interrupt_manager.c: 57: uint8_t t8;
 11721                           ;interrupt_manager.c: 58: if(INTCONbits.PEIE == 1 && PIE1bits.TMR2IE == 1 && PIR1bits.TM
      +                          R2IF == 1)
 11722  0006  1F0B               	btfss	11,6	;volatile
 11723  0007  282F               	goto	i1l3733
 11724  0008  0021               	movlb	1	; select bank1
 11725  0009  1C91               	btfss	17,1	;volatile
 11726  000A  282F               	goto	i1l3733
 11727  000B  0020               	movlb	0	; select bank0
 11728  000C  1C91               	btfss	17,1	;volatile
 11729  000D  282F               	goto	i1l3733
 11730                           
 11731                           ;interrupt_manager.c: 59: {
 11732                           ;interrupt_manager.c: 61: PIR1bits.TMR2IF = 0;
 11733  000E  1091               	bcf	17,1	;volatile
 11734                           
 11735                           ;interrupt_manager.c: 62: Event |= (1<<1);
 11736  000F  14E1               	bsf	_Event,1	;volatile
 11737  0010  3005               	movlw	5
 11738                           
 11739                           ;interrupt_manager.c: 63: subTickerX++;
 11740  0011  0AE5               	incf	_subTickerX,f
 11741                           
 11742                           ;interrupt_manager.c: 64: subTickerX_1s++;
 11743  0012  0AE6               	incf	_subTickerX_1s,f
 11744                           
 11745                           ;interrupt_manager.c: 65: if(subTickerX>=5){
 11746  0013  0265               	subwf	_subTickerX,w
 11747  0014  1C03               	skipc
 11748  0015  2818               	goto	i1l3715
 11749                           
 11750                           ;interrupt_manager.c: 66: subTickerX=0;
 11751  0016  01E5               	clrf	_subTickerX
 11752                           
 11753                           ;interrupt_manager.c: 67: Event |= (1<<2);
 11754  0017  1561               	bsf	_Event,2	;volatile
 11755  0018                     i1l3715:	
 11756                           
 11757                           ;interrupt_manager.c: 68: }
 11758                           ;interrupt_manager.c: 69: if(subTickerX_1s>=50){
 11759  0018  3032               	movlw	50
 11760  0019  0266               	subwf	_subTickerX_1s,w
 11761  001A  1C03               	skipc
 11762  001B  281E               	goto	i1l3721
 11763                           
 11764                           ;interrupt_manager.c: 70: subTickerX_1s=0;
 11765  001C  01E6               	clrf	_subTickerX_1s
 11766                           
 11767                           ;interrupt_manager.c: 71: Event |= (1<<3);
 11768  001D  15E1               	bsf	_Event,3	;volatile
 11769  001E                     i1l3721:	
 11770                           
 11771                           ;interrupt_manager.c: 72: }
 11772                           ;interrupt_manager.c: 74: if(eusartRxIdleTime_ms){
 11773  001E  0862               	movf	_eusartRxIdleTime_ms,w	;volatile
 11774  001F  1903               	btfsc	3,2
 11775  0020  2828               	goto	i1l3731
 11776                           
 11777                           ;interrupt_manager.c: 75: eusartRxIdleTime_ms++;
 11778  0021  0AE2               	incf	_eusartRxIdleTime_ms,f	;volatile
 11779                           
 11780                           ;interrupt_manager.c: 76: if(eusartRxIdleTime_ms>5){
 11781  0022  3006               	movlw	6
 11782  0023  0262               	subwf	_eusartRxIdleTime_ms,w	;volatile
 11783  0024  1C03               	skipc
 11784  0025  2828               	goto	i1l3731
 11785                           
 11786                           ;interrupt_manager.c: 77: Event|=(1<<0);
 11787  0026  1461               	bsf	_Event,0	;volatile
 11788                           
 11789                           ;interrupt_manager.c: 78: eusartRxIdleTime_ms=0;
 11790  0027  01E2               	clrf	_eusartRxIdleTime_ms	;volatile
 11791  0028                     i1l3731:	
 11792                           
 11793                           ;interrupt_manager.c: 79: }
 11794                           ;interrupt_manager.c: 80: }
 11795                           ;interrupt_manager.c: 81: globalTicker++;
 11796  0028  3001               	movlw	1
 11797  0029  0021               	movlb	1	; select bank1
 11798  002A  07CC               	addwf	_globalTicker^(0+128),f	;volatile
 11799  002B  3000               	movlw	0
 11800  002C  3DCD               	addwfc	(_globalTicker+1)^(0+128),f	;volatile
 11801  002D  3DCE               	addwfc	(_globalTicker+2)^(0+128),f	;volatile
 11802  002E  3DCF               	addwfc	(_globalTicker+3)^(0+128),f	;volatile
 11803  002F                     i1l3733:	
 11804                           
 11805                           ;interrupt_manager.c: 82: }
 11806                           ;interrupt_manager.c: 83: if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits.RCIF
      +                           == 1)
 11807  002F  1F0B               	btfss	11,6	;volatile
 11808  0030  284E               	goto	i1l287
 11809  0031  0021               	movlb	1	; select bank1
 11810  0032  1E91               	btfss	17,5	;volatile
 11811  0033  284E               	goto	i1l287
 11812  0034  0020               	movlb	0	; select bank0
 11813  0035  1E91               	btfss	17,5	;volatile
 11814  0036  284E               	goto	i1l287
 11815                           
 11816                           ;interrupt_manager.c: 84: {
 11817                           ;interrupt_manager.c: 86: PIR1bits.RCIF=0;
 11818  0037  1291               	bcf	17,5	;volatile
 11819                           
 11820                           ;interrupt_manager.c: 87: if(1 == RCSTAbits.OERR){
 11821  0038  0023               	movlb	3	; select bank3
 11822  0039  1C9D               	btfss	29,1	;volatile
 11823  003A  283D               	goto	i1l3743
 11824                           
 11825                           ;interrupt_manager.c: 88: RCSTAbits.CREN = 0;
 11826  003B  121D               	bcf	29,4	;volatile
 11827                           
 11828                           ;interrupt_manager.c: 89: RCSTAbits.CREN = 1;
 11829  003C  161D               	bsf	29,4	;volatile
 11830  003D                     i1l3743:	
 11831                           
 11832                           ;interrupt_manager.c: 90: }
 11833                           ;interrupt_manager.c: 91: t8=RCREG;
 11834  003D  0819               	movf	25,w	;volatile
 11835  003E  00F0               	movwf	INTERRUPT_InterruptManager@t8
 11836                           
 11837                           ;interrupt_manager.c: 92: if(eusartRxCount<64){
 11838  003F  3040               	movlw	64
 11839  0040  027C               	subwf	_eusartRxCount,w	;volatile
 11840  0041  1803               	skipnc
 11841  0042  284B               	goto	i1l3749
 11842                           
 11843                           ;interrupt_manager.c: 93: eusartRxBuffer[eusartRxCount]=t8;
 11844  0043  087C               	movf	_eusartRxCount,w
 11845  0044  3EA0               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 11846  0045  0086               	movwf	6
 11847  0046  3001               	movlw	1	; select bank3/4
 11848  0047  0087               	movwf	7
 11849  0048  0870               	movf	INTERRUPT_InterruptManager@t8,w
 11850  0049  0081               	movwf	1
 11851                           
 11852                           ;interrupt_manager.c: 94: eusartRxCount++;
 11853  004A  0AFC               	incf	_eusartRxCount,f	;volatile
 11854  004B                     i1l3749:	
 11855                           
 11856                           ;interrupt_manager.c: 96: }
 11857                           ;interrupt_manager.c: 97: eusartRxIdleTime_ms=1;
 11858  004B  3001               	movlw	1
 11859  004C  0020               	movlb	0	; select bank0
 11860  004D  00E2               	movwf	_eusartRxIdleTime_ms	;volatile
 11861  004E                     i1l287:	
 11862                           ;interrupt_manager.c: 98: }
 11863                           
 11864  004E  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 11865  004F  0009               	retfie
 11866  0050                     __end_of_INTERRUPT_InterruptManager:	
 11867  007E                     btemp	set	126	;btemp
 11868  007E                     int$flags	set	126
 11869  007E                     wtemp	set	126
 11870  007E                     wtemp0	set	126
 11871  0080                     wtemp1	set	128
 11872  0082                     wtemp2	set	130
 11873  0084                     wtemp3	set	132
 11874  0086                     wtemp4	set	134
 11875  0088                     wtemp5	set	136
 11876  007F                     wtemp6	set	127
 11877  007E                     ttemp	set	126
 11878  007E                     ttemp0	set	126
 11879  0081                     ttemp1	set	129
 11880  0084                     ttemp2	set	132
 11881  0087                     ttemp3	set	135
 11882  007F                     ttemp4	set	127
 11883  007E                     ltemp	set	126
 11884  007E                     ltemp0	set	126
 11885  0082                     ltemp1	set	130
 11886  0086                     ltemp2	set	134
 11887  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        22
    BSS         255
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     45      77
    BANK1            80      0      64
    BANK2            80     22      74
    BANK3            80      0      64
    BANK4            80      0      64
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           32      0       0

Pointer List with Targets:

    crc_append@message	PTR unsigned char  size(2) Largest target is 64
		 -> modbusBuf(BANK4[64]), sysData(BANK2[52]), 

    crc_verify@message	PTR unsigned char  size(2) Largest target is 64
		 -> modbusBuf(BANK4[64]), sysData(BANK2[52]), 

    crc_sum@buf	PTR unsigned char  size(2) Largest target is 64
		 -> modbusBuf(BANK4[64]), sysData(BANK2[52]), 

    m_mem_cpy_len@s	PTR unsigned char  size(2) Largest target is 64
		 -> modbusBuf(BANK4[64]), sysData(BANK2[52]), eusartRxBuffer(BANK3[64]), 

    m_mem_cpy_len@d	PTR unsigned char  size(2) Largest target is 64
		 -> crc_verify@expected(BANK0[2]), modbusBuf(BANK4[64]), 

    modbus_response_process@rbuf	PTR unsigned char  size(1) Largest target is 64
		 -> modbusBuf(BANK4[64]), 

    modbus_response_process@pmdbs	PTR struct . size(1) Largest target is 64
		 -> modbusBuf(BANK4[64]), 

    modbus_response_command@rbuf	PTR unsigned char  size(1) Largest target is 64
		 -> modbusBuf(BANK4[64]), 

    modbus_response_command@pmdbs	PTR struct . size(1) Largest target is 64
		 -> modbusBuf(BANK4[64]), 

    modbus_response_write_single_register@rbuf	PTR unsigned char  size(1) Largest target is 64
		 -> modbusBuf(BANK4[64]), 

    modbus_response_write_single_register@pmdbs	PTR struct . size(1) Largest target is 64
		 -> modbusBuf(BANK4[64]), 

    getRegisterVal@tempData	PTR unsigned int  size(1) Largest target is 2
		 -> modbus_response_command@tempData(BANK0[2]), 

    modbus_response_illgeal_function@buf	PTR unsigned char  size(1) Largest target is 64
		 -> modbusBuf(BANK4[64]), 

    modbus_response_illgeal_function@pmdbs	PTR struct . size(1) Largest target is 64
		 -> modbusBuf(BANK4[64]), 

    my_flash_system_write@buf	PTR unsigned char  size(1) Largest target is 52
		 -> sysData(BANK2[52]), 

    my_flash_system_read@buf	PTR unsigned char  size(1) Largest target is 52
		 -> sysData(BANK2[52]), 

    uart_send_len@buf	PTR unsigned char  size(1) Largest target is 64
		 -> modbusBuf(BANK4[64]), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_adc_sample
    _pid_pwm2_vout_run->___awdiv
    _set_vout_pwm2_duty->_get_vout_pwm2_duty
    _pid_pwm1_idrv_run->___lmul
    _pid_pwm1_idrv_b_b->___lmul
    _set_idrv_pwm1_duty->_get_idrv_pwm1_duty
    _modbus_response_process->_modbus_response_command
    _my_flash_read_system_erase->_FLASH_EraseBlock
    _crc_append->_crc_sum
    _crc_verify->_crc_sum
    _calc_temp_rs->___lldiv
    _calc_temp_rs->___lmul
    _calc_temp_rc->___lldiv
    _calc_temp_rc->___lmul
    _calc_expect_vout_adc_value->___lmul
    ___aldiv->___lmul
    _cal_rs_simulate_power->___lmul
    _adc_sample->_adc_init
    _adc_sample->_fvr_set_gain
    _TMR2_Initialize->_TMR2_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_calc_expect_vout_adc_value
    _sys_data_init->_my_flash_system_write
    _pid_pwm1_idrv_run->___aldiv
    _pid_pwm1_idrv_b_b->___aldiv
    _modbus_response_process->_modbus_response_command
    _modbus_response_process->_modbus_response_write_single_register
    _sys_data_save->_my_flash_system_write
    _modbus_response_illgeal_function->_crc_append
    _modbus_response_command->_crc_append
    _calc_temp_rs->___lldiv
    _calc_temp_rc->___lldiv
    _calc_expect_vout_adc_value->___aldiv
    ___aldiv->___lmul
    _cal_rs_simulate_power->___lmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_pid_pwm1_idrv_run

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   45487
                  _SYSTEM_Initialize
                         _adc_sample
              _cal_rs_simulate_power
         _calc_expect_vout_adc_value
                       _calc_temp_rc
                       _calc_temp_rs
                      _m_mem_cpy_len
            _modbus_response_process
                  _pid_pwm1_idrv_b_b
                  _pid_pwm1_idrv_run
                  _pid_pwm2_vout_run
                 _set_vout_pwm2_duty
                      _sys_data_init
                      _sys_data_save
                _uart_received_start
 ---------------------------------------------------------------------------------
 (1) _uart_received_start                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sys_data_init                                        4     4      0    3967
                                             12 BANK0      4     4      0
                             ___wmul
                         _crc_append
                         _crc_verify
         _my_flash_read_system_erase
               _my_flash_system_read
              _my_flash_system_write
 ---------------------------------------------------------------------------------
 (2) _my_flash_system_read                                 9     7      2     254
                                              1 COMMON     9     7      2
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     348
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _pid_pwm2_vout_run                                    5     5      0    1074
                                              9 COMMON     1     1      0
                                              0 BANK0      4     4      0
                            ___awdiv
                            ___lwdiv
                 _set_vout_pwm2_duty
 ---------------------------------------------------------------------------------
 (1) _set_vout_pwm2_duty                                   4     2      2     218
                                              3 COMMON     4     2      2
                 _get_vout_pwm2_duty
 ---------------------------------------------------------------------------------
 (2) _get_vout_pwm2_duty                                   2     0      2       0
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                              1 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     428
                                              1 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _pid_pwm1_idrv_run                                   34    34      0    5533
                                             18 BANK0     12    12      0
                                              0 BANK2     22    22      0
                            ___aldiv
                             ___lmul
                 _set_idrv_pwm1_duty
 ---------------------------------------------------------------------------------
 (1) _pid_pwm1_idrv_b_b                                    5     5      0    5342
                                              9 COMMON     1     1      0
                                             18 BANK0      4     4      0
                            ___aldiv
                             ___lmul
                 _set_idrv_pwm1_duty
 ---------------------------------------------------------------------------------
 (2) _set_idrv_pwm1_duty                                   4     2      2     438
                                              3 COMMON     4     2      2
                 _get_idrv_pwm1_duty
 ---------------------------------------------------------------------------------
 (3) _get_idrv_pwm1_duty                                   2     0      2       0
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _modbus_response_process                              5     3      2   10974
                                             21 BANK0      4     2      2
                         _crc_verify
            _modbus_response_command
   _modbus_response_illgeal_function
_modbus_response_write_single_regist
 ---------------------------------------------------------------------------------
 (2) _modbus_response_write_single_register                9     9      0    4212
                                             12 BANK0      9     9      0
                         _crc_append
                      _sys_data_save
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (1) _sys_data_save                                        0     0      0    1936
                         _crc_append
         _my_flash_read_system_erase
              _my_flash_system_write
 ---------------------------------------------------------------------------------
 (2) _my_flash_system_write                               15    13      2     511
                                              1 COMMON     3     1      2
                                              0 BANK0     12    12      0
 ---------------------------------------------------------------------------------
 (2) _my_flash_read_system_erase                           0     0      0     247
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_EraseBlock                                     3     1      2     247
                                              1 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (2) _modbus_response_illgeal_function                     3     2      1    1942
                                             11 BANK0      3     2      1
                         _crc_append
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (2) _modbus_response_command                             11    11      0    3232
                                             11 COMMON     1     1      0
                                             11 BANK0     10    10      0
                         _crc_append
                     _getRegisterVal
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (3) _uart_send_len                                        4     3      1     372
                                              1 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (3) _getRegisterVal                                       8     5      3     687
                                              1 COMMON     8     5      3
 ---------------------------------------------------------------------------------
 (2) _crc_append                                          11     7      4    1178
                                              0 BANK0     11     7      4
                            _crc_sum
 ---------------------------------------------------------------------------------
 (2) _crc_verify                                           8     4      4    1196
                                              0 BANK0      8     4      4
                            _crc_sum
                      _m_mem_cpy_len
 ---------------------------------------------------------------------------------
 (3) _m_mem_cpy_len                                        7     1      6     388
                                              1 COMMON     7     1      6
 ---------------------------------------------------------------------------------
 (3) _crc_sum                                             12     8      4     354
                                              1 COMMON    10     6      4
 ---------------------------------------------------------------------------------
 (1) _calc_temp_rs                                        12     8      4    3292
                                              5 BANK0     12     8      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) _calc_temp_rc                                        16    12      4    3360
                                              5 BANK0     16    12      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     648
                                              1 COMMON     8     0      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _calc_expect_vout_adc_value                          28    26      2    5699
                                             18 BANK0     27    25      2
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8    2275
                                              4 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _cal_rs_simulate_power                                8     6      2    2712
                                              4 BANK0      8     6      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8    2437
                                              1 COMMON     8     0      8
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _adc_sample                                           9     7      2     894
                                              3 COMMON     9     7      2
                           _adc_init
                       _fvr_set_gain
 ---------------------------------------------------------------------------------
 (2) _fvr_set_gain                                         2     2      0      69
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _adc_init                                             2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      98
                    _ADC1_Initialize
                  _EUSART_Initialize
                     _FVR_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM1_Initialize
                    _PWM2_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0      75
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR2_SetInterruptHandler                             2     0      2      75
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _ADC1_Initialize
     _EUSART_Initialize
     _FVR_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM1_Initialize
     _PWM2_Initialize
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
       _TMR2_StartTimer
     _WDT_Initialize
   _adc_sample
     _adc_init
     _fvr_set_gain
   _cal_rs_simulate_power
     ___lmul
   _calc_expect_vout_adc_value
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _calc_temp_rc
     ___lldiv
     ___lmul
   _calc_temp_rs
     ___lldiv
     ___lmul
   _m_mem_cpy_len
   _modbus_response_process
     _crc_verify
       _crc_sum
       _m_mem_cpy_len
     _modbus_response_command
       _crc_append
         _crc_sum
       _getRegisterVal
       _uart_send_len
     _modbus_response_illgeal_function
       _crc_append
         _crc_sum
       _uart_send_len
     _modbus_response_write_single_register
       _crc_append
         _crc_sum
       _sys_data_save
         _crc_append
           _crc_sum
         _my_flash_read_system_erase
           _FLASH_EraseBlock
         _my_flash_system_write
       _uart_send_len
   _pid_pwm1_idrv_b_b
     ___aldiv
       ___lmul (ARG)
     ___lmul
     _set_idrv_pwm1_duty
       _get_idrv_pwm1_duty
   _pid_pwm1_idrv_run
     ___aldiv
       ___lmul (ARG)
     ___lmul
     _set_idrv_pwm1_duty
       _get_idrv_pwm1_duty
   _pid_pwm2_vout_run
     ___awdiv
     ___lwdiv
     _set_vout_pwm2_duty
       _get_vout_pwm2_duty
   _set_vout_pwm2_duty
     _get_vout_pwm2_duty
   _sys_data_init
     ___wmul
     _crc_append
       _crc_sum
     _crc_verify
       _crc_sum
       _m_mem_cpy_len
     _my_flash_read_system_erase
       _FLASH_EraseBlock
     _my_flash_system_read
     _my_flash_system_write
   _sys_data_save
     _crc_append
       _crc_sum
     _my_flash_read_system_erase
       _FLASH_EraseBlock
     _my_flash_system_write
   _uart_received_start

 _INTERRUPT_InterruptManager (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3E0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     2D      4D       5       96.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      40       7       80.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     16      4A       9       92.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      40      11       80.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      40      13       80.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     164      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           20      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              20      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     164      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sat Nov 17 22:26:26 2018

              __end_of_TMR2_SetInterruptHandler 08D5                                               pc 0002  
                  ??_my_flash_read_system_erase 0074                                     __CFG_CP$OFF 0000  
                                            PL2 0742                                              PL4 074B  
                                            PL6 0C31                                              PL8 0C41  
                                  ___awdiv@sign 0076                          __end_of_FVR_Initialize 01DE  
                           ___wmul@multiplicand 0073                                             PL10 075E  
                                           PL20 0773                                             PL12 0FB4  
                                           PL30 0789                                             PL22 0FC6  
                                           PL14 0FBF                                             PL32 0FFA  
                                           PL24 0FCE                                             PL16 0766  
                                           PL34 0790                                             PL26 077C  
                                           PL18 076D                                             PL36 0796  
                                           PL28 0783                                     __CFG_LVP$ON 0000  
                                           l700 02C0                                             l606 01A7  
                                           l619 069A                                             l643 0571  
                                           l581 026B                                             l493 0E30  
                                           l654 0545                                             l663 0BFA  
                                           l488 0E28                                             l497 0E3E  
                                           l673 0983                                             l587 024F  
                                           l676 09AA                                             l790 0FE5  
                                           l698 027E                                             l699 0288  
                                           _GIE 005F                                             _PR2 001B  
                                           _bbu 00C8                                             _err 00A0  
                               _TMR2_Initialize 08C5                                    __CFG_BORV$LO 0000  
                                           wreg 0009                            ??_get_vout_pwm2_duty 0073  
                          ??_set_vout_pwm2_duty 0075                                 ??_uart_send_len 0072  
                                          S4417 0800                                            S4419 07D0  
                                          l1102 05E3                                   calc_temp_rc@x 002D  
                                 calc_temp_rc@y 0031                                            l1071 0EED  
                                          l1146 0582                                            l1074 0EF8  
                                          l3003 07C2                                            l3031 0266  
                                          l3017 0A25                                            l4013 05EE  
                                          l3213 0E95                                            l4031 0591  
                                          l4111 03D0                                            l4103 03B8  
                                          l3311 09EF                                            l3303 09E0  
                                          l3401 01A0                                            l4041 05A4  
                                          l4105 03B9                                            l3217 0E9B  
                                          l3073 0F17                                            l3411 01C0  
                                          l4211 02E7                                            l4115 03D8  
                                          l3315 09F3                                            l3075 0F38  
                                          l4053 05C7                                            l4205 02CA  
                                          l3341 06D3                                            l3333 06B6  
                                          l4117 03E6                                            l4109 03C2  
                                          l4071 092A                                            l4311 0C79  
                                          l4151 0514                                            l3319 09FB  
                                          l3409 01A1                                            l4057 05D5  
                                          l4049 05C1                                            l3345 06D9  
                                          l4073 0936                                            l2721 0F06  
                                          l2713 0EF6                                            l4313 0C7B  
                                          l4305 0C5C                                            l4129 03FF  
                                          l4219 02F8                                            l4075 093C  
                                          l2803 0E2C                                            l3371 0A20  
                                          l4309 0C77                                            l4149 050A  
                                          l3293 09D3                                            l4333 00AC  
                                          l4239 033A                                            l4095 0688  
                                          l2719 0EDA                                            l2831 0D17  
                                          l2823 0CF2                                            l2751 0F6A  
                                          l4191 0BE0                                            l3287 09CA  
                                          l3367 0A1C                                            l3359 0A0D  
                                          l4335 00AF                                            l4249 039A  
                                          l4097 0694                                            l2841 0D41  
                                          l2833 0D20                                            l2825 0CF9  
                                          l4193 0BE6                                            l4353 0147  
                                          l4361 016D                                            l4337 00D0  
                                          l4267 02BB                                            l2851 0D6A  
                                          l2843 0D49                                            l2835 0D29  
                                          l2827 0D05                                            l2667 079B  
                                          l2755 0F84                                            l2739 0F56  
                                          l4195 0BF5                                            l3563 0973  
                                          l4283 0E5F                                            l2853 0D72  
                                          l2845 0D51                                            l2837 0D31  
                                          l2829 0D0E                                            l2781 0FB2  
                                          l2765 0F95                                            l2757 0F86  
                                          l4373 0189                                            l2791 08D5  
                                          l2847 0D5A                                            l2839 0D39  
                                          l4375 018B                                            l2849 0D62  
                                          l2857 0D7A                                            l3921 0E04  
                                          l3577 09BA                                            l2859 0D87  
                                          l2779 0F5B                                            l3923 0DBE  
                                          l2869 0D97                                            l2887 06E2  
                                          l3951 0E0D                                            l3929 0DD1  
                                          l3865 0C15                                            l3947 0E07  
                                          l3983 0CA8                                            l3995 0CA9  
                                          l3997 0CCC                                   calc_temp_rs@x 0029  
                                 calc_temp_rs@y 002D                         __end_of_PWM1_Initialize 0234  
                                          u2105 096D                                            u1315 0F78  
                                          u2115 097D                                            u2125 09A3  
                                          _LATA 010C                                            u2135 09B4  
                                          _LATC 010E                                            u1440 021A  
                                          u1345 0F61                                            u1515 0F1D  
                                          u1285 0EE0                                            u1295 0F4B  
                                          u3137 0198                                            u2515 0C21  
                                          u1475 0A31                                            u2525 0ED2  
                                          u1825 09E8                                            u1915 0A15  
                                          u2735 05B6                                            u2905 02F1  
                                          u1955 01B5                                            u1875 06C8  
                                          u2843 0533                                            u2853 0560  
                                          u2945 0333                                            u2885 02DB  
                                          u2985 02AE                                   _m_mem_cpy_len 06E2  
                                          _TMR2 001A                                            _WPUA 020C  
                                          _WPUC 020E                                    __CFG_WRT$OFF 0000  
                                          _bbt0 00B8                                            _bbt1 00BC  
                                          _bbta 00C0                                            _bbku 00B4  
                                          _bbtu 00C4                                            _main 0096  
modbus_response_write_single_register@startAddr 0032                                            _pidU 00D8  
           __size_of_my_flash_read_system_erase 000B                                            fsr0h 0005  
                                          fsr1h 0007                                            fsr0l 0004  
                                          indf0 0000                                            indf1 0001  
                                          fsr1l 0006                                            btemp 007E  
                                 __CFG_BOREN$ON 0000                                            ltemp 007E  
                                          start 0050                                 _pwm2DutyForVout 006B  
                                          ttemp 007E                                            wtemp 007E  
                     ??_modbus_response_command 007B                                   __CFG_MCLRE$ON 0000  
                           pid_pwm1_idrv_run@ed 015C                             pid_pwm1_idrv_run@ei 0158  
                           pid_pwm1_idrv_run@ep 0154                         ??_cal_rs_simulate_power 0079  
                       __end_of_PWM2_Initialize 024B                       ??_modbus_response_process 007C  
                               ?_FVR_Initialize 0070                  __size_of_OSCILLATOR_Initialize 0005  
                 __end_of_OSCILLATOR_Initialize 01E3                                 __end_of___aldiv 05DE  
                                         ?_main 0070                                 __end_of___awdiv 0A00  
                                 __CFG_WDTE$OFF 0000                                 __end_of___lldiv 06E2  
                               ___awdiv@divisor 0071                                           _T2CON 001C  
                               __end_of___lwdiv 0A25                                           i1l287 004E  
                               ___awdiv@counter 0075                                           _RCREG 0199  
                                         _RCSTA 019D                                           _TRISA 008C  
                                         _TRISC 008E                                           _TXREG 019A  
                                         _TXSTA 019E                modbus_response_command@startAddr 002D  
                           ___lmul@multiplicand 0075                                           _PidKp 004D  
                                         _PidTd 00AC                                           _Event 0061  
                                         _PidTi 00B0                                 __end_of_crc_sum 0F0B  
                          pid_pwm1_idrv_b_b@t32 0032                                           _bbmax 00D0  
                                         _bbmin 00D4                                  _WDT_Initialize 024B  
                                         _resRc 0067                                           _resRs 00DC  
                                ?_m_mem_cpy_len 0071                          _pid_pwm1_idrv_run$2201 0160  
                                         ltemp0 007E                                           ltemp1 0082  
                                         ltemp2 0086                                           ltemp3 0080  
                    __end_of_get_idrv_pwm1_duty 0C31                      __end_of_set_idrv_pwm1_duty 0C2A  
                                         ttemp0 007E                                           ttemp1 0081  
                                         ttemp2 0084                                           ttemp3 0087  
                                         ttemp4 007F                              crc_verify@expected 0026  
                                         status 0003                                           wtemp0 007E  
                                         wtemp1 0080                                           wtemp2 0082  
                                         wtemp3 0084                                           wtemp4 0086  
                                         wtemp5 0088                                           wtemp6 007F  
                               _TMR2_StartTimer 08D5                                   fvr_set_gain@g 0072  
            __end_of_calc_expect_vout_adc_value 039F                      _calc_expect_vout_adc_value 02C9  
                          pid_pwm1_idrv_run@t32 0166                            pid_pwm1_idrv_run@t16 0164  
                               __initialization 0052                                    __end_of_main 018D  
                         __size_of_calc_temp_rc 009D                           __size_of_calc_temp_rs 0074  
                       __end_of_TMR2_Initialize 08D4                     ?_INTERRUPT_InterruptManager 0070  
           modbus_response_illgeal_function@buf 002C                        _TMR2_SetInterruptHandler 08D4  
                                        ??_main 007C                     modbus_response_process@rbuf 0038  
                 __size_of_my_flash_system_read 002F                     modbus_response_process@rlen 0035  
                                __CFG_PLLEN$OFF 0000                 __end_of_modbus_response_command 0CEF  
                        __end_of_WDT_Initialize 024E                    my_flash_system_write@blocNum 0023  
                                        _ADCON0 009D                                          _ADCON1 009E  
                                        _ADCON2 009F                                          _ADRESH 009C  
                                        _ADRESL 009B                                ___awdiv@dividend 0073  
                      cal_rs_simulate_power@t16 002A                        cal_rs_simulate_power@t32 0026  
                                        _ANSELA 018C                                          _ANSELC 018E  
               __end_of_modbus_response_process 0C7F                                __end_of_adc_init 025D  
                              ?_PWM1_Initialize 0070                                          _ODCONA 028C  
                                        _ODCONC 028E                                          i1l3721 001E  
                                        i1l3731 0028                                          i1l3715 0018  
                                        i1l3733 002F                                          i1l3743 003D  
                                        i1l3749 004B                                          _FVRCON 0117  
                                        _PMADRH 0192                                          _PMADRL 0191  
                                        _PMDATH 0194                                          _PMDATL 0193  
                                        _PMCON2 0196                       __size_of_FLASH_EraseBlock 0019  
                                        _OSCCON 0099                     __end_of_uart_received_start 07C2  
                                        _SPBRGH 019C                                          _SPBRGL 019B  
                                        _WDTCON 0097                                    _calc_temp_rc 0606  
                                  _calc_temp_rs 08D8                                  __CFG_PWRTE$OFF 0000  
            __end_of_my_flash_read_system_erase 0742                      _my_flash_read_system_erase 0737  
    modbus_response_write_single_register@pmdbs 0031                                          ___lmul 05DE  
                                     ??___aldiv 0079                                          ___wmul 0E93  
                                     ??___awdiv 0075                                  __CFG_STVREN$ON 0000  
                                     ??___lldiv 0079                                       ??___lwdiv 0075  
                              ?_PWM2_Initialize 0070                                          _pwm2Ei 0051  
                              ___awdiv@quotient 0077                        my_flash_system_write@buf 0025  
                      my_flash_system_write@len 0071                        my_flash_system_write@loc 0026  
                                     ??_crc_sum 0075                        __size_of_ADC1_Initialize 0004  
                               ?_WDT_Initialize 0070                                 ??_m_mem_cpy_len 0077  
              my_flash_system_write@GIEBitValue 0022                         __end_of_TMR2_StartTimer 08D8  
      TMR2_SetInterruptHandler@InterruptHandler 0071                 modbus_response_command@tempData 0033  
      __end_of_modbus_response_illgeal_function 0FFA       __size_of_modbus_response_illgeal_function 0027  
             ?_modbus_response_illgeal_function 002B              ??_modbus_response_illgeal_function 007B  
              _modbus_response_illgeal_function 0FD3                                   ?_fvr_set_gain 0070  
                                fvr_set_gain@t8 0071                               _SYSTEM_Initialize 01C5  
                       __end_of__initialization 0093                          __size_of_sys_data_init 0051  
                         _my_flash_system_write 0F3A                              ?_SYSTEM_Initialize 0070  
                        __size_of_sys_data_save 000B                              getRegisterVal@addr 0071  
                                __pcstackCOMMON 0070                                    __pidataBANK0 08BF  
                                  __pidataBANK1 07EE                             ??_SYSTEM_Initialize 0073  
                                    _adc_sample 018D                                ?_TMR2_Initialize 0070  
                                    __end_ofPL2 074B                                      __end_ofPL4 075E  
                                    __end_ofPL6 0C41                                      __end_ofPL8 0C50  
                                _OPTION_REGbits 0095        modbus_response_write_single_register@t16 002E  
                             crc_append@message 0020                          getRegisterVal@tempAddr 0078  
                        my_flash_system_write@i 002A                          my_flash_system_write@j 0020  
                        getRegisterVal@tempData 0073                       __end_of_SYSTEM_Initialize 01D6  
                                ??_fvr_set_gain 0071                                      __pbssBANK0 004D  
                                    __pbssBANK1 00A0                                      __pbssBANK2 0120  
                                    __pbssBANK3 01A0                                      __pbssBANK4 0220  
                modbus_response_command@tmpAddr 002B                 my_flash_system_read@GIEBitValue 0074  
                                    adc_init@ch 0072                                ??_FVR_Initialize 0071  
                                    __pmaintext 0096                      modbus_response_command@len 0031  
                                       ?___lmul 0071                                         ?___wmul 0071  
                               __CFG_PPS1WAY$ON 0000                                      __pintentry 0004  
                  ??_calc_expect_vout_adc_value 0034                                         _BAUDCON 019F  
                __size_of_cal_rs_simulate_power 005B                                  ___lmul@product 0020  
                                    _crc_append 0708                   __end_of_cal_rs_simulate_power 02C9  
                                     ?_adc_init 0070                                    adc_sample@ch 0076  
                                 _sys_data_init 0E42                                   _sys_data_save 06FD  
                                    _crc_verify 0EA8                                   _eusartRxCount 007C  
                   __size_of_get_vout_pwm2_duty 0007                     __size_of_set_vout_pwm2_duty 0015  
                                       _PWM1DCH 0D94                                         _PWM1DCL 0D93  
                                       _PWM2DCH 0DA4                                         _PWM2DCL 0DA3  
                                       _OSCTUNE 0098                                         _PWM1CON 0D9B  
                                       _PWM2CON 0DAB                                         _PWM1OFH 0D98  
                                       _PWM1OFL 0D97                                         _PWM2OFH 0DA8  
                                       _PWM1PHH 0D92                                         _PWM2OFL 0DA7  
                                       _PWM1PHL 0D91                                         _PWM2PHH 0DA2  
                                       _PWM2PHL 0DA1                                         _PWM1PRH 0D96  
                                       _PWM1PRL 0D95                                         _PWM2PRH 0DA6  
                                       _PWM2PRL 0DA5           modbus_response_illgeal_function@pmdbs 002D  
                                       _PPSLOCK 0E0F                               ??_ADC1_Initialize 0071  
                              ?_TMR2_StartTimer 0070                          set_idrv_pwm1_duty@duty 0073  
                         __end_of_uart_send_len 0E42                                _FLASH_EraseBlock 079B  
                        ?_my_flash_system_write 0071                         __size_of_getRegisterVal 00AC  
                   ?_calc_expect_vout_adc_value 0032     modbus_response_write_single_register@fiSave 0030  
                    ??_TMR2_SetInterruptHandler 0073                                         ___aldiv 0572  
                                       ___awdiv 09C0                                 __size_of___lmul 0028  
                                       ___lldiv 06A3                                 __size_of___wmul 0015  
                            _get_idrv_pwm1_duty 0C2A                              _set_idrv_pwm1_duty 0C15  
                                       ___lwdiv 0A00                                     ?_adc_sample 0073  
                                adc_sample@gfvr 0073                                      _pidTestNum 0064  
                                ?_sys_data_init 0070                                  ?_sys_data_save 0070  
                                    ??_adc_init 0071                                         __ptext1 07B4  
                                       __ptext2 0E42                                         __ptext3 0F0B  
                                       __ptext4 0E93                                         __ptext5 094C  
                                       __ptext6 0A25                                         __ptext7 0A3A  
                                       __ptext8 0A00                                         __ptext9 09C0  
                                       _crc_sum 0ED5                                         _pidBbSm 0063  
                           ?_get_idrv_pwm1_duty 0071                             ?_set_idrv_pwm1_duty 0073  
                         _OSCILLATOR_Initialize 01DE                                       _T2CONbits 001C  
                              ___aldiv@dividend 0028                        ??_PIN_MANAGER_Initialize 0071  
                                       _sysData 0120                      __size_of_SYSTEM_Initialize 0011  
                                       clrloop0 08BA                            end_of_initialization 0093  
                                       init_ram 08B3                        ?_modbus_response_command 0070  
                                       initloop 08B4                                      _rsSimPower 0053  
                  __end_of_my_flash_system_read 0F3A                            ??_get_idrv_pwm1_duty 0073  
                           pid_pwm2_vout_run@ei 0020                            ??_set_idrv_pwm1_duty 0075  
                             _EUSART_Initialize 07C2                                 ___lldiv@divisor 0071  
                               ___lldiv@counter 0024                              ?_EUSART_Initialize 0070  
                      ?_modbus_response_process 0035                                       _RCSTAbits 019D  
                   ?_my_flash_read_system_erase 0070                                ___aldiv@quotient 002E  
                                     _PWM1LDCON 0D9F                                       _PWM2LDCON 0DAF  
                                     _PWM1OFCON 0DA0                                       _PWM2OFCON 0DB0  
                          __end_of_fvr_set_gain 026E                                     ?_crc_append 0020  
                                    _subTickerX 0065                             ??_EUSART_Initialize 0071  
                              ??_WDT_Initialize 0071                                     ?_crc_verify 0020  
                              __CFG_FOSC$INTOSC 0000                                      crc_sum@crc 0079  
                                    crc_sum@buf 0071                                      crc_sum@len 0073  
                                     _RXPPSbits 0E15                             __size_of_adc_sample 0038  
                     __end_of_EUSART_Initialize 07D0                                    _globalTicker 00CC  
                                     _TXSTAbits 019E                        __size_of_PWM1_Initialize 0018  
                  __size_of_uart_received_start 000E                    _TMR2_DefaultInterruptHandler 0000  
                               ??_sys_data_init 007B                                 ??_sys_data_save 007B  
                                __end_of___lmul 0606                                  __end_of___wmul 0EA8  
                              _voExpectAdcValue 005F                                  _rtAdcValueRcHi 0055  
                                _rtAdcValueRcLo 0057                                  _rtAdcValueRsHi 0059  
                                _rtAdcValueVoFb 005D                                  _rtAdcValueRsLo 005B  
                        ?_OSCILLATOR_Initialize 0070                               crc_verify@message 0020  
                                   __end_ofPL10 0766                                     __end_ofPL20 077C  
                                   __end_ofPL12 0FBF                                     __end_ofPL30 0790  
                                   __end_ofPL22 0FCE                                     __end_ofPL14 0FC6  
                                   __end_ofPL32 1000                                     __end_ofPL24 0FD3  
                                   __end_ofPL16 076D                                     __end_ofPL34 0796  
                                   __end_ofPL26 0783                                     __end_ofPL18 0773  
                                   __end_ofPL36 079B                                     __end_ofPL28 0789  
                           start_initialization 0052                        __size_of_PWM2_Initialize 0017  
               __size_of_PIN_MANAGER_Initialize 0039                         my_flash_system_read@buf 0075  
                       my_flash_system_read@len 0071                           __end_of_m_mem_cpy_len 06FD  
                                _getRegisterVal 0CEF                             __size_of_crc_append 002F  
                           __size_of_crc_verify 002D                                __CFG_LPBOREN$OFF 0000  
     modbus_response_write_single_register@rbuf 0034                                        ??___lmul 0079  
                                      ??___wmul 0075                                     __pdataBANK0 0067  
                                   __pdataBANK1 00D0                     FLASH_EraseBlock@GIEBitValue 0073  
                               _ADC1_Initialize 01D6                        __end_of_FLASH_EraseBlock 07B4  
                          _my_flash_system_read 0F0B                               __size_of_adc_init 000F  
                                   __pbssCOMMON 007C                                       ___latbits 0002  
                                 __pcstackBANK0 0020                                   __pcstackBANK2 0154  
                      __size_of_TMR2_Initialize 000F                         ??_my_flash_system_write 0073  
                        __end_of_getRegisterVal 0D9B                           my_flash_system_read@i 0076  
                    __size_of_EUSART_Initialize 000E         modbus_response_illgeal_function@errcode 002B  
                         __size_of_fvr_set_gain 0011                                ___lwdiv@dividend 0073  
                        _PIN_MANAGER_Initialize 01E3                     modbus_response_command@rbuf 0032  
                                      ?___aldiv 0024                                        ?___awdiv 0071  
                                      ?___lldiv 0071                                    ??_adc_sample 0075  
                                   adc_sample@i 0079                                        ?___lwdiv 0071  
                             ??_PWM1_Initialize 0071                    ??_INTERRUPT_InterruptManager 0070  
                         set_idrv_pwm1_duty@t16 0075                                       __pswtext1 0800  
                                     __pswtext2 07D0                                        ?_crc_sum 0071  
                 my_flash_system_read@flashAddr 0078                      __end_of_get_vout_pwm2_duty 0A41  
                         ?_my_flash_system_read 0071                      __end_of_set_vout_pwm2_duty 0A3A  
                         _cal_rs_simulate_power 026E                                uart_send_len@buf 0073  
                              uart_send_len@len 0071                                   adc_sample@t16 007A  
                              ___lwdiv@quotient 0075                                   adc_sample@ret 0077  
                                 adc_sample@num 0074                                 ?_getRegisterVal 0071  
                                  _fvr_set_gain 025D                                  _eusartRxBuffer 01A0  
                                     _modbusBuf 0220                                 ___aldiv@divisor 0024  
                             ??_PWM2_Initialize 0071                              __end_of_adc_sample 01C5  
                               ___aldiv@counter 002C                                  ___wmul@product 0075  
                             _pid_pwm1_idrv_b_b 039F                               _pid_pwm1_idrv_run 0A41  
                                     clear_ram0 08B9                                  m_mem_cpy_len@d 0071  
                                m_mem_cpy_len@s 0073                                   ?_calc_temp_rc 0025  
                                 ?_calc_temp_rs 0025                                        _PIE1bits 0091  
                      __size_of_TMR2_StartTimer 0003                          set_vout_pwm2_duty@duty 0073  
                            ?_pid_pwm1_idrv_b_b 0070             __size_of_INTERRUPT_InterruptManager 004C  
                            ?_pid_pwm1_idrv_run 0070                         __end_of_ADC1_Initialize 01DA  
                                      _PIR1bits 0011                       FLASH_EraseBlock@startAddr 0071  
                                      _PWM1INTE 0D9C                                        _PWM1INTF 0D9D  
                                      _PWM2INTE 0DAC                                        _PWM2INTF 0DAD  
                                      _PWM1TMRH 0D9A                                        _PWM1TMRL 0D99  
                                      _PWM2TMRH 0DAA                                        _PWM2TMRL 0DA9  
                           ??_pid_pwm1_idrv_b_b 0079                                    ??_crc_append 0024  
              __size_of_modbus_response_command 0070                             ??_pid_pwm1_idrv_run 0032  
                        __size_of_uart_send_len 001E                                      _ADCON0bits 009D  
                             ___wmul@multiplier 0071                                    ??_crc_verify 007B  
                       __size_of_FVR_Initialize 0004                __size_of_modbus_response_process 002F  
             __size_of_TMR2_SetInterruptHandler 0001                       ?_TMR2_SetInterruptHandler 0071  
                           _uart_received_start 07B4                               _pid_pwm2_vout_run 094C  
                             ___lmul@multiplier 0071                                crc_verify@crccal 0024  
                     __end_of_pid_pwm1_idrv_b_b 0572                              ?_pid_pwm2_vout_run 0070  
                     __end_of_pid_pwm1_idrv_run 0C15                               ??_TMR2_Initialize 0073  
                                ??_calc_temp_rc 0029                                  ??_calc_temp_rs 0079  
                            __end_of_crc_append 0737                     __size_of_get_idrv_pwm1_duty 0007  
                   __size_of_set_idrv_pwm1_duty 0015                             ??_pid_pwm2_vout_run 0079  
                            __end_of_crc_verify 0ED5                            ?_uart_received_start 0070  
                       ??_OSCILLATOR_Initialize 0071                                __size_of___aldiv 006C  
                              __size_of___awdiv 0040                                __size_of___lldiv 003F  
                              __size_of___lwdiv 0025                          ??_my_flash_system_read 0073  
                                      _adc_init 024E                          ?_cal_rs_simulate_power 0024  
                              __size_of_crc_sum 0036                             _eusartRxIdleTime_ms 0062  
                     __end_of_pid_pwm2_vout_run 09C0                                   crc_append@crc 0029  
                              sys_data_init@ret 002C                                 ___lwdiv@divisor 0071  
                               ___lwdiv@counter 0077                                        __ptext10 0A41  
                                      __ptext11 039F                                        __ptext20 0FD3  
                                      __ptext12 0C15                                        __ptext21 0C7F  
                                      __ptext13 0C2A                                        __ptext30 06A3  
                                      __ptext22 0E24                                        __ptext14 0C50  
                                      __ptext31 02C9                                        __ptext23 0CEF  
                                      __ptext15 0D9B                                        __ptext40 08C5  
                                      __ptext32 0572                                        __ptext24 0708  
                                      __ptext16 06FD                                        __ptext41 08D5  
                                      __ptext33 026E                                        __ptext25 0EA8  
                                      __ptext17 0F3A                                        __ptext42 08D4  
                                      __ptext34 05DE                                        __ptext26 06E2  
                                      __ptext18 0737                                        __ptext43 0234  
                                      __ptext35 018D                                        __ptext27 0ED5  
                                      __ptext19 079B                                        __ptext44 021C  
                                      __ptext36 025D                                        __ptext28 08D8  
                                      __ptext45 01E3                                        __ptext37 024E  
                                      __ptext29 0606                                        __ptext46 01DE  
                                      __ptext38 01C5                                        __ptext47 01DA  
                                      __ptext39 024B                                        __ptext48 07C2  
                                      __ptext49 01D6                                   _uart_send_len 0E24  
                                 __size_of_main 00F7                                   _subTickerX_1s 0066  
                         set_vout_pwm2_duty@t16 0075                                      _RA4PPSbits 0E94  
                         ??_uart_received_start 0071                                      _RA5PPSbits 0E95  
                              ?_ADC1_Initialize 0070                  my_flash_system_write@flashAddr 0028  
                                      int$flags 007E                                        crc_sum@i 0077  
                                      crc_sum@j 0075                                      _RC5PPSbits 0EA5  
 __end_of_modbus_response_write_single_register 0E24  __size_of_modbus_response_write_single_register 0089  
       ??_modbus_response_write_single_register 002C          ?_modbus_response_write_single_register 0070  
         _modbus_response_write_single_register 0D9B                               ??_TMR2_StartTimer 0071  
            __end_of_INTERRUPT_InterruptManager 0050                      _INTERRUPT_InterruptManager 0004  
                         __end_of_sys_data_init 0E93                           __end_of_sys_data_save 0708  
                             ?_FLASH_EraseBlock 0071                   calc_expect_vout_adc_value@t32 0048  
                   PIN_MANAGER_Initialize@state 0071                        modbus_response_command@i 002F  
                            ??_FLASH_EraseBlock 0073                                      _INTCONbits 000B  
                                   _PWM1CONbits 0D9B                                m_mem_cpy_len@len 0075  
                                    _FVRCONbits 0117                                     _PWM2CONbits 0DAB  
                  INTERRUPT_InterruptManager@t8 0070                    modbus_response_process@pmdbs 0037  
                       __size_of_WDT_Initialize 0003                                  ?_uart_send_len 0071  
                                      intlevel1 0000                  __size_of_my_flash_system_write 007A  
                          pid_pwm2_vout_run@t16 0022                      __size_of_pid_pwm1_idrv_b_b 01D3  
                 __end_of_my_flash_system_write 0FB4                      __size_of_pid_pwm1_idrv_run 01D4  
                                    _PMCON1bits 0195                                ___lldiv@dividend 0075  
                       ?_PIN_MANAGER_Initialize 0070                                  uart_send_len@i 0074  
                             __CFG_CLKOUTEN$OFF 0000                                     _PPSLOCKbits 0E0F  
                               _PWM1_Initialize 021C                    modbus_response_command@pmdbs 0030  
                       _modbus_response_command 0C7F                    calc_expect_vout_adc_value@x0 0044  
                  calc_expect_vout_adc_value@x1 003C                    calc_expect_vout_adc_value@y0 0040  
                  calc_expect_vout_adc_value@y1 0038                                      _PWM1CLKCON 0D9E  
                                    _PWM2CLKCON 0DAE                          __size_of_m_mem_cpy_len 001B  
                                _FVR_Initialize 01DA                         _modbus_response_process 0C50  
                                sys_data_init@i 002E                                     crc_append@n 0022  
                          __end_of_calc_temp_rc 06A3                            __end_of_calc_temp_rs 094C  
                              ___lldiv@quotient 0020                                ??_getRegisterVal 0074  
                               _PWM2_Initialize 0234                      __size_of_pid_pwm2_vout_run 0074  
                                  ___aldiv@sign 002D                     calc_expect_vout_adc_value@i 004C  
                   calc_expect_vout_adc_value@x 0032             __size_of_calc_expect_vout_adc_value 00D6  
                __end_of_PIN_MANAGER_Initialize 021C                              _get_vout_pwm2_duty 0A3A  
                            _set_vout_pwm2_duty 0A25                                     crc_verify@n 0022  
                           ?_get_vout_pwm2_duty 0071                             ?_set_vout_pwm2_duty 0073  
