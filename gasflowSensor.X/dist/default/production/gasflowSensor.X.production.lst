

Microchip Technology PIC PRO Macro Assembler V1.37 build -260352376 
                                                                                               Tue Nov 20 12:41:09 2018

Microchip Technology Omniscient Code Generator v1.37 (PRO mode) build 201603110536
     1                           	processor	16F1575
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text13,local,class=CODE,merge=1,delta=2
    21                           	psect	text18,local,class=CODE,merge=1,delta=2
    22                           	psect	swtext1,local,class=CONST,delta=2
    23                           	psect	text25,local,class=CODE,merge=1,delta=2
    24                           	psect	text26,local,class=CODE,merge=1,delta=2
    25                           	psect	text30,local,class=CODE,merge=1,delta=2
    26                           	psect	intentry,global,class=CODE,delta=2
    27                           	psect	pa_nodes,global,class=CODE,delta=2
    28                           	dabs	1,0x620,32
    29                           	dabs	1,0x5B4,60
    30                           	dabs	1,0x2384,0,_sysData
    31                           	dabs	1,0x7E,2
    32  0000                     	;# 
    33  0001                     	;# 
    34  0002                     	;# 
    35  0003                     	;# 
    36  0004                     	;# 
    37  0005                     	;# 
    38  0006                     	;# 
    39  0007                     	;# 
    40  0008                     	;# 
    41  0009                     	;# 
    42  000A                     	;# 
    43  000B                     	;# 
    44  000C                     	;# 
    45  000E                     	;# 
    46  0011                     	;# 
    47  0012                     	;# 
    48  0013                     	;# 
    49  0015                     	;# 
    50  0016                     	;# 
    51  0016                     	;# 
    52  0017                     	;# 
    53  0018                     	;# 
    54  0019                     	;# 
    55  001A                     	;# 
    56  001B                     	;# 
    57  001C                     	;# 
    58  008C                     	;# 
    59  008E                     	;# 
    60  0091                     	;# 
    61  0092                     	;# 
    62  0093                     	;# 
    63  0095                     	;# 
    64  0096                     	;# 
    65  0097                     	;# 
    66  0098                     	;# 
    67  0099                     	;# 
    68  009A                     	;# 
    69  009B                     	;# 
    70  009B                     	;# 
    71  009C                     	;# 
    72  009D                     	;# 
    73  009E                     	;# 
    74  009F                     	;# 
    75  010C                     	;# 
    76  010E                     	;# 
    77  0111                     	;# 
    78  0112                     	;# 
    79  0113                     	;# 
    80  0114                     	;# 
    81  0115                     	;# 
    82  0116                     	;# 
    83  0117                     	;# 
    84  0118                     	;# 
    85  0119                     	;# 
    86  018C                     	;# 
    87  018E                     	;# 
    88  0191                     	;# 
    89  0191                     	;# 
    90  0192                     	;# 
    91  0193                     	;# 
    92  0193                     	;# 
    93  0194                     	;# 
    94  0195                     	;# 
    95  0196                     	;# 
    96  0197                     	;# 
    97  0199                     	;# 
    98  019A                     	;# 
    99  019B                     	;# 
   100  019B                     	;# 
   101  019C                     	;# 
   102  019D                     	;# 
   103  019E                     	;# 
   104  019F                     	;# 
   105  020C                     	;# 
   106  020E                     	;# 
   107  028C                     	;# 
   108  028E                     	;# 
   109  030C                     	;# 
   110  030E                     	;# 
   111  038C                     	;# 
   112  038E                     	;# 
   113  0391                     	;# 
   114  0392                     	;# 
   115  0393                     	;# 
   116  0397                     	;# 
   117  0398                     	;# 
   118  0399                     	;# 
   119  0691                     	;# 
   120  0692                     	;# 
   121  0693                     	;# 
   122  0694                     	;# 
   123  0695                     	;# 
   124  0D8E                     	;# 
   125  0D8F                     	;# 
   126  0D90                     	;# 
   127  0D91                     	;# 
   128  0D91                     	;# 
   129  0D92                     	;# 
   130  0D93                     	;# 
   131  0D93                     	;# 
   132  0D94                     	;# 
   133  0D95                     	;# 
   134  0D95                     	;# 
   135  0D96                     	;# 
   136  0D97                     	;# 
   137  0D97                     	;# 
   138  0D98                     	;# 
   139  0D99                     	;# 
   140  0D99                     	;# 
   141  0D9A                     	;# 
   142  0D9B                     	;# 
   143  0D9C                     	;# 
   144  0D9C                     	;# 
   145  0D9D                     	;# 
   146  0D9D                     	;# 
   147  0D9E                     	;# 
   148  0D9F                     	;# 
   149  0DA0                     	;# 
   150  0DA1                     	;# 
   151  0DA1                     	;# 
   152  0DA2                     	;# 
   153  0DA3                     	;# 
   154  0DA3                     	;# 
   155  0DA4                     	;# 
   156  0DA5                     	;# 
   157  0DA5                     	;# 
   158  0DA6                     	;# 
   159  0DA7                     	;# 
   160  0DA7                     	;# 
   161  0DA8                     	;# 
   162  0DA9                     	;# 
   163  0DA9                     	;# 
   164  0DAA                     	;# 
   165  0DAB                     	;# 
   166  0DAC                     	;# 
   167  0DAC                     	;# 
   168  0DAD                     	;# 
   169  0DAD                     	;# 
   170  0DAE                     	;# 
   171  0DAF                     	;# 
   172  0DB0                     	;# 
   173  0DB1                     	;# 
   174  0DB1                     	;# 
   175  0DB2                     	;# 
   176  0DB3                     	;# 
   177  0DB3                     	;# 
   178  0DB4                     	;# 
   179  0DB5                     	;# 
   180  0DB5                     	;# 
   181  0DB6                     	;# 
   182  0DB7                     	;# 
   183  0DB7                     	;# 
   184  0DB8                     	;# 
   185  0DB9                     	;# 
   186  0DB9                     	;# 
   187  0DBA                     	;# 
   188  0DBB                     	;# 
   189  0DBC                     	;# 
   190  0DBC                     	;# 
   191  0DBD                     	;# 
   192  0DBD                     	;# 
   193  0DBE                     	;# 
   194  0DBF                     	;# 
   195  0DC0                     	;# 
   196  0DC1                     	;# 
   197  0DC1                     	;# 
   198  0DC2                     	;# 
   199  0DC3                     	;# 
   200  0DC3                     	;# 
   201  0DC4                     	;# 
   202  0DC5                     	;# 
   203  0DC5                     	;# 
   204  0DC6                     	;# 
   205  0DC7                     	;# 
   206  0DC7                     	;# 
   207  0DC8                     	;# 
   208  0DC9                     	;# 
   209  0DC9                     	;# 
   210  0DCA                     	;# 
   211  0DCB                     	;# 
   212  0DCC                     	;# 
   213  0DCC                     	;# 
   214  0DCD                     	;# 
   215  0DCD                     	;# 
   216  0DCE                     	;# 
   217  0DCF                     	;# 
   218  0DD0                     	;# 
   219  0E0F                     	;# 
   220  0E10                     	;# 
   221  0E11                     	;# 
   222  0E12                     	;# 
   223  0E13                     	;# 
   224  0E14                     	;# 
   225  0E15                     	;# 
   226  0E16                     	;# 
   227  0E17                     	;# 
   228  0E90                     	;# 
   229  0E91                     	;# 
   230  0E92                     	;# 
   231  0E94                     	;# 
   232  0E95                     	;# 
   233  0EA0                     	;# 
   234  0EA1                     	;# 
   235  0EA2                     	;# 
   236  0EA3                     	;# 
   237  0EA4                     	;# 
   238  0EA5                     	;# 
   239  0FE4                     	;# 
   240  0FE5                     	;# 
   241  0FE6                     	;# 
   242  0FE7                     	;# 
   243  0FE8                     	;# 
   244  0FE8                     	;# 
   245  0FE9                     	;# 
   246  0FEA                     	;# 
   247  0FEA                     	;# 
   248  0FEB                     	;# 
   249  0FED                     	;# 
   250  0FEE                     	;# 
   251  0FEE                     	;# 
   252  0FEF                     	;# 
   253  0000                     	;# 
   254  0001                     	;# 
   255  0002                     	;# 
   256  0003                     	;# 
   257  0004                     	;# 
   258  0005                     	;# 
   259  0006                     	;# 
   260  0007                     	;# 
   261  0008                     	;# 
   262  0009                     	;# 
   263  000A                     	;# 
   264  000B                     	;# 
   265  000C                     	;# 
   266  000E                     	;# 
   267  0011                     	;# 
   268  0012                     	;# 
   269  0013                     	;# 
   270  0015                     	;# 
   271  0016                     	;# 
   272  0016                     	;# 
   273  0017                     	;# 
   274  0018                     	;# 
   275  0019                     	;# 
   276  001A                     	;# 
   277  001B                     	;# 
   278  001C                     	;# 
   279  008C                     	;# 
   280  008E                     	;# 
   281  0091                     	;# 
   282  0092                     	;# 
   283  0093                     	;# 
   284  0095                     	;# 
   285  0096                     	;# 
   286  0097                     	;# 
   287  0098                     	;# 
   288  0099                     	;# 
   289  009A                     	;# 
   290  009B                     	;# 
   291  009B                     	;# 
   292  009C                     	;# 
   293  009D                     	;# 
   294  009E                     	;# 
   295  009F                     	;# 
   296  010C                     	;# 
   297  010E                     	;# 
   298  0111                     	;# 
   299  0112                     	;# 
   300  0113                     	;# 
   301  0114                     	;# 
   302  0115                     	;# 
   303  0116                     	;# 
   304  0117                     	;# 
   305  0118                     	;# 
   306  0119                     	;# 
   307  018C                     	;# 
   308  018E                     	;# 
   309  0191                     	;# 
   310  0191                     	;# 
   311  0192                     	;# 
   312  0193                     	;# 
   313  0193                     	;# 
   314  0194                     	;# 
   315  0195                     	;# 
   316  0196                     	;# 
   317  0197                     	;# 
   318  0199                     	;# 
   319  019A                     	;# 
   320  019B                     	;# 
   321  019B                     	;# 
   322  019C                     	;# 
   323  019D                     	;# 
   324  019E                     	;# 
   325  019F                     	;# 
   326  020C                     	;# 
   327  020E                     	;# 
   328  028C                     	;# 
   329  028E                     	;# 
   330  030C                     	;# 
   331  030E                     	;# 
   332  038C                     	;# 
   333  038E                     	;# 
   334  0391                     	;# 
   335  0392                     	;# 
   336  0393                     	;# 
   337  0397                     	;# 
   338  0398                     	;# 
   339  0399                     	;# 
   340  0691                     	;# 
   341  0692                     	;# 
   342  0693                     	;# 
   343  0694                     	;# 
   344  0695                     	;# 
   345  0D8E                     	;# 
   346  0D8F                     	;# 
   347  0D90                     	;# 
   348  0D91                     	;# 
   349  0D91                     	;# 
   350  0D92                     	;# 
   351  0D93                     	;# 
   352  0D93                     	;# 
   353  0D94                     	;# 
   354  0D95                     	;# 
   355  0D95                     	;# 
   356  0D96                     	;# 
   357  0D97                     	;# 
   358  0D97                     	;# 
   359  0D98                     	;# 
   360  0D99                     	;# 
   361  0D99                     	;# 
   362  0D9A                     	;# 
   363  0D9B                     	;# 
   364  0D9C                     	;# 
   365  0D9C                     	;# 
   366  0D9D                     	;# 
   367  0D9D                     	;# 
   368  0D9E                     	;# 
   369  0D9F                     	;# 
   370  0DA0                     	;# 
   371  0DA1                     	;# 
   372  0DA1                     	;# 
   373  0DA2                     	;# 
   374  0DA3                     	;# 
   375  0DA3                     	;# 
   376  0DA4                     	;# 
   377  0DA5                     	;# 
   378  0DA5                     	;# 
   379  0DA6                     	;# 
   380  0DA7                     	;# 
   381  0DA7                     	;# 
   382  0DA8                     	;# 
   383  0DA9                     	;# 
   384  0DA9                     	;# 
   385  0DAA                     	;# 
   386  0DAB                     	;# 
   387  0DAC                     	;# 
   388  0DAC                     	;# 
   389  0DAD                     	;# 
   390  0DAD                     	;# 
   391  0DAE                     	;# 
   392  0DAF                     	;# 
   393  0DB0                     	;# 
   394  0DB1                     	;# 
   395  0DB1                     	;# 
   396  0DB2                     	;# 
   397  0DB3                     	;# 
   398  0DB3                     	;# 
   399  0DB4                     	;# 
   400  0DB5                     	;# 
   401  0DB5                     	;# 
   402  0DB6                     	;# 
   403  0DB7                     	;# 
   404  0DB7                     	;# 
   405  0DB8                     	;# 
   406  0DB9                     	;# 
   407  0DB9                     	;# 
   408  0DBA                     	;# 
   409  0DBB                     	;# 
   410  0DBC                     	;# 
   411  0DBC                     	;# 
   412  0DBD                     	;# 
   413  0DBD                     	;# 
   414  0DBE                     	;# 
   415  0DBF                     	;# 
   416  0DC0                     	;# 
   417  0DC1                     	;# 
   418  0DC1                     	;# 
   419  0DC2                     	;# 
   420  0DC3                     	;# 
   421  0DC3                     	;# 
   422  0DC4                     	;# 
   423  0DC5                     	;# 
   424  0DC5                     	;# 
   425  0DC6                     	;# 
   426  0DC7                     	;# 
   427  0DC7                     	;# 
   428  0DC8                     	;# 
   429  0DC9                     	;# 
   430  0DC9                     	;# 
   431  0DCA                     	;# 
   432  0DCB                     	;# 
   433  0DCC                     	;# 
   434  0DCC                     	;# 
   435  0DCD                     	;# 
   436  0DCD                     	;# 
   437  0DCE                     	;# 
   438  0DCF                     	;# 
   439  0DD0                     	;# 
   440  0E0F                     	;# 
   441  0E10                     	;# 
   442  0E11                     	;# 
   443  0E12                     	;# 
   444  0E13                     	;# 
   445  0E14                     	;# 
   446  0E15                     	;# 
   447  0E16                     	;# 
   448  0E17                     	;# 
   449  0E90                     	;# 
   450  0E91                     	;# 
   451  0E92                     	;# 
   452  0E94                     	;# 
   453  0E95                     	;# 
   454  0EA0                     	;# 
   455  0EA1                     	;# 
   456  0EA2                     	;# 
   457  0EA3                     	;# 
   458  0EA4                     	;# 
   459  0EA5                     	;# 
   460  0FE4                     	;# 
   461  0FE5                     	;# 
   462  0FE6                     	;# 
   463  0FE7                     	;# 
   464  0FE8                     	;# 
   465  0FE8                     	;# 
   466  0FE9                     	;# 
   467  0FEA                     	;# 
   468  0FEA                     	;# 
   469  0FEB                     	;# 
   470  0FED                     	;# 
   471  0FEE                     	;# 
   472  0FEE                     	;# 
   473  0FEF                     	;# 
   474  0000                     	;# 
   475  0001                     	;# 
   476  0002                     	;# 
   477  0003                     	;# 
   478  0004                     	;# 
   479  0005                     	;# 
   480  0006                     	;# 
   481  0007                     	;# 
   482  0008                     	;# 
   483  0009                     	;# 
   484  000A                     	;# 
   485  000B                     	;# 
   486  000C                     	;# 
   487  000E                     	;# 
   488  0011                     	;# 
   489  0012                     	;# 
   490  0013                     	;# 
   491  0015                     	;# 
   492  0016                     	;# 
   493  0016                     	;# 
   494  0017                     	;# 
   495  0018                     	;# 
   496  0019                     	;# 
   497  001A                     	;# 
   498  001B                     	;# 
   499  001C                     	;# 
   500  008C                     	;# 
   501  008E                     	;# 
   502  0091                     	;# 
   503  0092                     	;# 
   504  0093                     	;# 
   505  0095                     	;# 
   506  0096                     	;# 
   507  0097                     	;# 
   508  0098                     	;# 
   509  0099                     	;# 
   510  009A                     	;# 
   511  009B                     	;# 
   512  009B                     	;# 
   513  009C                     	;# 
   514  009D                     	;# 
   515  009E                     	;# 
   516  009F                     	;# 
   517  010C                     	;# 
   518  010E                     	;# 
   519  0111                     	;# 
   520  0112                     	;# 
   521  0113                     	;# 
   522  0114                     	;# 
   523  0115                     	;# 
   524  0116                     	;# 
   525  0117                     	;# 
   526  0118                     	;# 
   527  0119                     	;# 
   528  018C                     	;# 
   529  018E                     	;# 
   530  0191                     	;# 
   531  0191                     	;# 
   532  0192                     	;# 
   533  0193                     	;# 
   534  0193                     	;# 
   535  0194                     	;# 
   536  0195                     	;# 
   537  0196                     	;# 
   538  0197                     	;# 
   539  0199                     	;# 
   540  019A                     	;# 
   541  019B                     	;# 
   542  019B                     	;# 
   543  019C                     	;# 
   544  019D                     	;# 
   545  019E                     	;# 
   546  019F                     	;# 
   547  020C                     	;# 
   548  020E                     	;# 
   549  028C                     	;# 
   550  028E                     	;# 
   551  030C                     	;# 
   552  030E                     	;# 
   553  038C                     	;# 
   554  038E                     	;# 
   555  0391                     	;# 
   556  0392                     	;# 
   557  0393                     	;# 
   558  0397                     	;# 
   559  0398                     	;# 
   560  0399                     	;# 
   561  0691                     	;# 
   562  0692                     	;# 
   563  0693                     	;# 
   564  0694                     	;# 
   565  0695                     	;# 
   566  0D8E                     	;# 
   567  0D8F                     	;# 
   568  0D90                     	;# 
   569  0D91                     	;# 
   570  0D91                     	;# 
   571  0D92                     	;# 
   572  0D93                     	;# 
   573  0D93                     	;# 
   574  0D94                     	;# 
   575  0D95                     	;# 
   576  0D95                     	;# 
   577  0D96                     	;# 
   578  0D97                     	;# 
   579  0D97                     	;# 
   580  0D98                     	;# 
   581  0D99                     	;# 
   582  0D99                     	;# 
   583  0D9A                     	;# 
   584  0D9B                     	;# 
   585  0D9C                     	;# 
   586  0D9C                     	;# 
   587  0D9D                     	;# 
   588  0D9D                     	;# 
   589  0D9E                     	;# 
   590  0D9F                     	;# 
   591  0DA0                     	;# 
   592  0DA1                     	;# 
   593  0DA1                     	;# 
   594  0DA2                     	;# 
   595  0DA3                     	;# 
   596  0DA3                     	;# 
   597  0DA4                     	;# 
   598  0DA5                     	;# 
   599  0DA5                     	;# 
   600  0DA6                     	;# 
   601  0DA7                     	;# 
   602  0DA7                     	;# 
   603  0DA8                     	;# 
   604  0DA9                     	;# 
   605  0DA9                     	;# 
   606  0DAA                     	;# 
   607  0DAB                     	;# 
   608  0DAC                     	;# 
   609  0DAC                     	;# 
   610  0DAD                     	;# 
   611  0DAD                     	;# 
   612  0DAE                     	;# 
   613  0DAF                     	;# 
   614  0DB0                     	;# 
   615  0DB1                     	;# 
   616  0DB1                     	;# 
   617  0DB2                     	;# 
   618  0DB3                     	;# 
   619  0DB3                     	;# 
   620  0DB4                     	;# 
   621  0DB5                     	;# 
   622  0DB5                     	;# 
   623  0DB6                     	;# 
   624  0DB7                     	;# 
   625  0DB7                     	;# 
   626  0DB8                     	;# 
   627  0DB9                     	;# 
   628  0DB9                     	;# 
   629  0DBA                     	;# 
   630  0DBB                     	;# 
   631  0DBC                     	;# 
   632  0DBC                     	;# 
   633  0DBD                     	;# 
   634  0DBD                     	;# 
   635  0DBE                     	;# 
   636  0DBF                     	;# 
   637  0DC0                     	;# 
   638  0DC1                     	;# 
   639  0DC1                     	;# 
   640  0DC2                     	;# 
   641  0DC3                     	;# 
   642  0DC3                     	;# 
   643  0DC4                     	;# 
   644  0DC5                     	;# 
   645  0DC5                     	;# 
   646  0DC6                     	;# 
   647  0DC7                     	;# 
   648  0DC7                     	;# 
   649  0DC8                     	;# 
   650  0DC9                     	;# 
   651  0DC9                     	;# 
   652  0DCA                     	;# 
   653  0DCB                     	;# 
   654  0DCC                     	;# 
   655  0DCC                     	;# 
   656  0DCD                     	;# 
   657  0DCD                     	;# 
   658  0DCE                     	;# 
   659  0DCF                     	;# 
   660  0DD0                     	;# 
   661  0E0F                     	;# 
   662  0E10                     	;# 
   663  0E11                     	;# 
   664  0E12                     	;# 
   665  0E13                     	;# 
   666  0E14                     	;# 
   667  0E15                     	;# 
   668  0E16                     	;# 
   669  0E17                     	;# 
   670  0E90                     	;# 
   671  0E91                     	;# 
   672  0E92                     	;# 
   673  0E94                     	;# 
   674  0E95                     	;# 
   675  0EA0                     	;# 
   676  0EA1                     	;# 
   677  0EA2                     	;# 
   678  0EA3                     	;# 
   679  0EA4                     	;# 
   680  0EA5                     	;# 
   681  0FE4                     	;# 
   682  0FE5                     	;# 
   683  0FE6                     	;# 
   684  0FE7                     	;# 
   685  0FE8                     	;# 
   686  0FE8                     	;# 
   687  0FE9                     	;# 
   688  0FEA                     	;# 
   689  0FEA                     	;# 
   690  0FEB                     	;# 
   691  0FED                     	;# 
   692  0FEE                     	;# 
   693  0FEE                     	;# 
   694  0FEF                     	;# 
   695  0000                     	;# 
   696  0001                     	;# 
   697  0002                     	;# 
   698  0003                     	;# 
   699  0004                     	;# 
   700  0005                     	;# 
   701  0006                     	;# 
   702  0007                     	;# 
   703  0008                     	;# 
   704  0009                     	;# 
   705  000A                     	;# 
   706  000B                     	;# 
   707  000C                     	;# 
   708  000E                     	;# 
   709  0011                     	;# 
   710  0012                     	;# 
   711  0013                     	;# 
   712  0015                     	;# 
   713  0016                     	;# 
   714  0016                     	;# 
   715  0017                     	;# 
   716  0018                     	;# 
   717  0019                     	;# 
   718  001A                     	;# 
   719  001B                     	;# 
   720  001C                     	;# 
   721  008C                     	;# 
   722  008E                     	;# 
   723  0091                     	;# 
   724  0092                     	;# 
   725  0093                     	;# 
   726  0095                     	;# 
   727  0096                     	;# 
   728  0097                     	;# 
   729  0098                     	;# 
   730  0099                     	;# 
   731  009A                     	;# 
   732  009B                     	;# 
   733  009B                     	;# 
   734  009C                     	;# 
   735  009D                     	;# 
   736  009E                     	;# 
   737  009F                     	;# 
   738  010C                     	;# 
   739  010E                     	;# 
   740  0111                     	;# 
   741  0112                     	;# 
   742  0113                     	;# 
   743  0114                     	;# 
   744  0115                     	;# 
   745  0116                     	;# 
   746  0117                     	;# 
   747  0118                     	;# 
   748  0119                     	;# 
   749  018C                     	;# 
   750  018E                     	;# 
   751  0191                     	;# 
   752  0191                     	;# 
   753  0192                     	;# 
   754  0193                     	;# 
   755  0193                     	;# 
   756  0194                     	;# 
   757  0195                     	;# 
   758  0196                     	;# 
   759  0197                     	;# 
   760  0199                     	;# 
   761  019A                     	;# 
   762  019B                     	;# 
   763  019B                     	;# 
   764  019C                     	;# 
   765  019D                     	;# 
   766  019E                     	;# 
   767  019F                     	;# 
   768  020C                     	;# 
   769  020E                     	;# 
   770  028C                     	;# 
   771  028E                     	;# 
   772  030C                     	;# 
   773  030E                     	;# 
   774  038C                     	;# 
   775  038E                     	;# 
   776  0391                     	;# 
   777  0392                     	;# 
   778  0393                     	;# 
   779  0397                     	;# 
   780  0398                     	;# 
   781  0399                     	;# 
   782  0691                     	;# 
   783  0692                     	;# 
   784  0693                     	;# 
   785  0694                     	;# 
   786  0695                     	;# 
   787  0D8E                     	;# 
   788  0D8F                     	;# 
   789  0D90                     	;# 
   790  0D91                     	;# 
   791  0D91                     	;# 
   792  0D92                     	;# 
   793  0D93                     	;# 
   794  0D93                     	;# 
   795  0D94                     	;# 
   796  0D95                     	;# 
   797  0D95                     	;# 
   798  0D96                     	;# 
   799  0D97                     	;# 
   800  0D97                     	;# 
   801  0D98                     	;# 
   802  0D99                     	;# 
   803  0D99                     	;# 
   804  0D9A                     	;# 
   805  0D9B                     	;# 
   806  0D9C                     	;# 
   807  0D9C                     	;# 
   808  0D9D                     	;# 
   809  0D9D                     	;# 
   810  0D9E                     	;# 
   811  0D9F                     	;# 
   812  0DA0                     	;# 
   813  0DA1                     	;# 
   814  0DA1                     	;# 
   815  0DA2                     	;# 
   816  0DA3                     	;# 
   817  0DA3                     	;# 
   818  0DA4                     	;# 
   819  0DA5                     	;# 
   820  0DA5                     	;# 
   821  0DA6                     	;# 
   822  0DA7                     	;# 
   823  0DA7                     	;# 
   824  0DA8                     	;# 
   825  0DA9                     	;# 
   826  0DA9                     	;# 
   827  0DAA                     	;# 
   828  0DAB                     	;# 
   829  0DAC                     	;# 
   830  0DAC                     	;# 
   831  0DAD                     	;# 
   832  0DAD                     	;# 
   833  0DAE                     	;# 
   834  0DAF                     	;# 
   835  0DB0                     	;# 
   836  0DB1                     	;# 
   837  0DB1                     	;# 
   838  0DB2                     	;# 
   839  0DB3                     	;# 
   840  0DB3                     	;# 
   841  0DB4                     	;# 
   842  0DB5                     	;# 
   843  0DB5                     	;# 
   844  0DB6                     	;# 
   845  0DB7                     	;# 
   846  0DB7                     	;# 
   847  0DB8                     	;# 
   848  0DB9                     	;# 
   849  0DB9                     	;# 
   850  0DBA                     	;# 
   851  0DBB                     	;# 
   852  0DBC                     	;# 
   853  0DBC                     	;# 
   854  0DBD                     	;# 
   855  0DBD                     	;# 
   856  0DBE                     	;# 
   857  0DBF                     	;# 
   858  0DC0                     	;# 
   859  0DC1                     	;# 
   860  0DC1                     	;# 
   861  0DC2                     	;# 
   862  0DC3                     	;# 
   863  0DC3                     	;# 
   864  0DC4                     	;# 
   865  0DC5                     	;# 
   866  0DC5                     	;# 
   867  0DC6                     	;# 
   868  0DC7                     	;# 
   869  0DC7                     	;# 
   870  0DC8                     	;# 
   871  0DC9                     	;# 
   872  0DC9                     	;# 
   873  0DCA                     	;# 
   874  0DCB                     	;# 
   875  0DCC                     	;# 
   876  0DCC                     	;# 
   877  0DCD                     	;# 
   878  0DCD                     	;# 
   879  0DCE                     	;# 
   880  0DCF                     	;# 
   881  0DD0                     	;# 
   882  0E0F                     	;# 
   883  0E10                     	;# 
   884  0E11                     	;# 
   885  0E12                     	;# 
   886  0E13                     	;# 
   887  0E14                     	;# 
   888  0E15                     	;# 
   889  0E16                     	;# 
   890  0E17                     	;# 
   891  0E90                     	;# 
   892  0E91                     	;# 
   893  0E92                     	;# 
   894  0E94                     	;# 
   895  0E95                     	;# 
   896  0EA0                     	;# 
   897  0EA1                     	;# 
   898  0EA2                     	;# 
   899  0EA3                     	;# 
   900  0EA4                     	;# 
   901  0EA5                     	;# 
   902  0FE4                     	;# 
   903  0FE5                     	;# 
   904  0FE6                     	;# 
   905  0FE7                     	;# 
   906  0FE8                     	;# 
   907  0FE8                     	;# 
   908  0FE9                     	;# 
   909  0FEA                     	;# 
   910  0FEA                     	;# 
   911  0FEB                     	;# 
   912  0FED                     	;# 
   913  0FEE                     	;# 
   914  0FEE                     	;# 
   915  0FEF                     	;# 
   916  0000                     	;# 
   917  0001                     	;# 
   918  0002                     	;# 
   919  0003                     	;# 
   920  0004                     	;# 
   921  0005                     	;# 
   922  0006                     	;# 
   923  0007                     	;# 
   924  0008                     	;# 
   925  0009                     	;# 
   926  000A                     	;# 
   927  000B                     	;# 
   928  000C                     	;# 
   929  000E                     	;# 
   930  0011                     	;# 
   931  0012                     	;# 
   932  0013                     	;# 
   933  0015                     	;# 
   934  0016                     	;# 
   935  0016                     	;# 
   936  0017                     	;# 
   937  0018                     	;# 
   938  0019                     	;# 
   939  001A                     	;# 
   940  001B                     	;# 
   941  001C                     	;# 
   942  008C                     	;# 
   943  008E                     	;# 
   944  0091                     	;# 
   945  0092                     	;# 
   946  0093                     	;# 
   947  0095                     	;# 
   948  0096                     	;# 
   949  0097                     	;# 
   950  0098                     	;# 
   951  0099                     	;# 
   952  009A                     	;# 
   953  009B                     	;# 
   954  009B                     	;# 
   955  009C                     	;# 
   956  009D                     	;# 
   957  009E                     	;# 
   958  009F                     	;# 
   959  010C                     	;# 
   960  010E                     	;# 
   961  0111                     	;# 
   962  0112                     	;# 
   963  0113                     	;# 
   964  0114                     	;# 
   965  0115                     	;# 
   966  0116                     	;# 
   967  0117                     	;# 
   968  0118                     	;# 
   969  0119                     	;# 
   970  018C                     	;# 
   971  018E                     	;# 
   972  0191                     	;# 
   973  0191                     	;# 
   974  0192                     	;# 
   975  0193                     	;# 
   976  0193                     	;# 
   977  0194                     	;# 
   978  0195                     	;# 
   979  0196                     	;# 
   980  0197                     	;# 
   981  0199                     	;# 
   982  019A                     	;# 
   983  019B                     	;# 
   984  019B                     	;# 
   985  019C                     	;# 
   986  019D                     	;# 
   987  019E                     	;# 
   988  019F                     	;# 
   989  020C                     	;# 
   990  020E                     	;# 
   991  028C                     	;# 
   992  028E                     	;# 
   993  030C                     	;# 
   994  030E                     	;# 
   995  038C                     	;# 
   996  038E                     	;# 
   997  0391                     	;# 
   998  0392                     	;# 
   999  0393                     	;# 
  1000  0397                     	;# 
  1001  0398                     	;# 
  1002  0399                     	;# 
  1003  0691                     	;# 
  1004  0692                     	;# 
  1005  0693                     	;# 
  1006  0694                     	;# 
  1007  0695                     	;# 
  1008  0D8E                     	;# 
  1009  0D8F                     	;# 
  1010  0D90                     	;# 
  1011  0D91                     	;# 
  1012  0D91                     	;# 
  1013  0D92                     	;# 
  1014  0D93                     	;# 
  1015  0D93                     	;# 
  1016  0D94                     	;# 
  1017  0D95                     	;# 
  1018  0D95                     	;# 
  1019  0D96                     	;# 
  1020  0D97                     	;# 
  1021  0D97                     	;# 
  1022  0D98                     	;# 
  1023  0D99                     	;# 
  1024  0D99                     	;# 
  1025  0D9A                     	;# 
  1026  0D9B                     	;# 
  1027  0D9C                     	;# 
  1028  0D9C                     	;# 
  1029  0D9D                     	;# 
  1030  0D9D                     	;# 
  1031  0D9E                     	;# 
  1032  0D9F                     	;# 
  1033  0DA0                     	;# 
  1034  0DA1                     	;# 
  1035  0DA1                     	;# 
  1036  0DA2                     	;# 
  1037  0DA3                     	;# 
  1038  0DA3                     	;# 
  1039  0DA4                     	;# 
  1040  0DA5                     	;# 
  1041  0DA5                     	;# 
  1042  0DA6                     	;# 
  1043  0DA7                     	;# 
  1044  0DA7                     	;# 
  1045  0DA8                     	;# 
  1046  0DA9                     	;# 
  1047  0DA9                     	;# 
  1048  0DAA                     	;# 
  1049  0DAB                     	;# 
  1050  0DAC                     	;# 
  1051  0DAC                     	;# 
  1052  0DAD                     	;# 
  1053  0DAD                     	;# 
  1054  0DAE                     	;# 
  1055  0DAF                     	;# 
  1056  0DB0                     	;# 
  1057  0DB1                     	;# 
  1058  0DB1                     	;# 
  1059  0DB2                     	;# 
  1060  0DB3                     	;# 
  1061  0DB3                     	;# 
  1062  0DB4                     	;# 
  1063  0DB5                     	;# 
  1064  0DB5                     	;# 
  1065  0DB6                     	;# 
  1066  0DB7                     	;# 
  1067  0DB7                     	;# 
  1068  0DB8                     	;# 
  1069  0DB9                     	;# 
  1070  0DB9                     	;# 
  1071  0DBA                     	;# 
  1072  0DBB                     	;# 
  1073  0DBC                     	;# 
  1074  0DBC                     	;# 
  1075  0DBD                     	;# 
  1076  0DBD                     	;# 
  1077  0DBE                     	;# 
  1078  0DBF                     	;# 
  1079  0DC0                     	;# 
  1080  0DC1                     	;# 
  1081  0DC1                     	;# 
  1082  0DC2                     	;# 
  1083  0DC3                     	;# 
  1084  0DC3                     	;# 
  1085  0DC4                     	;# 
  1086  0DC5                     	;# 
  1087  0DC5                     	;# 
  1088  0DC6                     	;# 
  1089  0DC7                     	;# 
  1090  0DC7                     	;# 
  1091  0DC8                     	;# 
  1092  0DC9                     	;# 
  1093  0DC9                     	;# 
  1094  0DCA                     	;# 
  1095  0DCB                     	;# 
  1096  0DCC                     	;# 
  1097  0DCC                     	;# 
  1098  0DCD                     	;# 
  1099  0DCD                     	;# 
  1100  0DCE                     	;# 
  1101  0DCF                     	;# 
  1102  0DD0                     	;# 
  1103  0E0F                     	;# 
  1104  0E10                     	;# 
  1105  0E11                     	;# 
  1106  0E12                     	;# 
  1107  0E13                     	;# 
  1108  0E14                     	;# 
  1109  0E15                     	;# 
  1110  0E16                     	;# 
  1111  0E17                     	;# 
  1112  0E90                     	;# 
  1113  0E91                     	;# 
  1114  0E92                     	;# 
  1115  0E94                     	;# 
  1116  0E95                     	;# 
  1117  0EA0                     	;# 
  1118  0EA1                     	;# 
  1119  0EA2                     	;# 
  1120  0EA3                     	;# 
  1121  0EA4                     	;# 
  1122  0EA5                     	;# 
  1123  0FE4                     	;# 
  1124  0FE5                     	;# 
  1125  0FE6                     	;# 
  1126  0FE7                     	;# 
  1127  0FE8                     	;# 
  1128  0FE8                     	;# 
  1129  0FE9                     	;# 
  1130  0FEA                     	;# 
  1131  0FEA                     	;# 
  1132  0FEB                     	;# 
  1133  0FED                     	;# 
  1134  0FEE                     	;# 
  1135  0FEE                     	;# 
  1136  0FEF                     	;# 
  1137  0FFF                     	;# 
  1138  0000                     	;# 
  1139  0001                     	;# 
  1140  0002                     	;# 
  1141  0003                     	;# 
  1142  0004                     	;# 
  1143  0005                     	;# 
  1144  0006                     	;# 
  1145  0007                     	;# 
  1146  0008                     	;# 
  1147  0009                     	;# 
  1148  000A                     	;# 
  1149  000B                     	;# 
  1150  000C                     	;# 
  1151  000E                     	;# 
  1152  0011                     	;# 
  1153  0012                     	;# 
  1154  0013                     	;# 
  1155  0015                     	;# 
  1156  0016                     	;# 
  1157  0016                     	;# 
  1158  0017                     	;# 
  1159  0018                     	;# 
  1160  0019                     	;# 
  1161  001A                     	;# 
  1162  001B                     	;# 
  1163  001C                     	;# 
  1164  008C                     	;# 
  1165  008E                     	;# 
  1166  0091                     	;# 
  1167  0092                     	;# 
  1168  0093                     	;# 
  1169  0095                     	;# 
  1170  0096                     	;# 
  1171  0097                     	;# 
  1172  0098                     	;# 
  1173  0099                     	;# 
  1174  009A                     	;# 
  1175  009B                     	;# 
  1176  009B                     	;# 
  1177  009C                     	;# 
  1178  009D                     	;# 
  1179  009E                     	;# 
  1180  009F                     	;# 
  1181  010C                     	;# 
  1182  010E                     	;# 
  1183  0111                     	;# 
  1184  0112                     	;# 
  1185  0113                     	;# 
  1186  0114                     	;# 
  1187  0115                     	;# 
  1188  0116                     	;# 
  1189  0117                     	;# 
  1190  0118                     	;# 
  1191  0119                     	;# 
  1192  018C                     	;# 
  1193  018E                     	;# 
  1194  0191                     	;# 
  1195  0191                     	;# 
  1196  0192                     	;# 
  1197  0193                     	;# 
  1198  0193                     	;# 
  1199  0194                     	;# 
  1200  0195                     	;# 
  1201  0196                     	;# 
  1202  0197                     	;# 
  1203  0199                     	;# 
  1204  019A                     	;# 
  1205  019B                     	;# 
  1206  019B                     	;# 
  1207  019C                     	;# 
  1208  019D                     	;# 
  1209  019E                     	;# 
  1210  019F                     	;# 
  1211  020C                     	;# 
  1212  020E                     	;# 
  1213  028C                     	;# 
  1214  028E                     	;# 
  1215  030C                     	;# 
  1216  030E                     	;# 
  1217  038C                     	;# 
  1218  038E                     	;# 
  1219  0391                     	;# 
  1220  0392                     	;# 
  1221  0393                     	;# 
  1222  0397                     	;# 
  1223  0398                     	;# 
  1224  0399                     	;# 
  1225  0691                     	;# 
  1226  0692                     	;# 
  1227  0693                     	;# 
  1228  0694                     	;# 
  1229  0695                     	;# 
  1230  0D8E                     	;# 
  1231  0D8F                     	;# 
  1232  0D90                     	;# 
  1233  0D91                     	;# 
  1234  0D91                     	;# 
  1235  0D92                     	;# 
  1236  0D93                     	;# 
  1237  0D93                     	;# 
  1238  0D94                     	;# 
  1239  0D95                     	;# 
  1240  0D95                     	;# 
  1241  0D96                     	;# 
  1242  0D97                     	;# 
  1243  0D97                     	;# 
  1244  0D98                     	;# 
  1245  0D99                     	;# 
  1246  0D99                     	;# 
  1247  0D9A                     	;# 
  1248  0D9B                     	;# 
  1249  0D9C                     	;# 
  1250  0D9C                     	;# 
  1251  0D9D                     	;# 
  1252  0D9D                     	;# 
  1253  0D9E                     	;# 
  1254  0D9F                     	;# 
  1255  0DA0                     	;# 
  1256  0DA1                     	;# 
  1257  0DA1                     	;# 
  1258  0DA2                     	;# 
  1259  0DA3                     	;# 
  1260  0DA3                     	;# 
  1261  0DA4                     	;# 
  1262  0DA5                     	;# 
  1263  0DA5                     	;# 
  1264  0DA6                     	;# 
  1265  0DA7                     	;# 
  1266  0DA7                     	;# 
  1267  0DA8                     	;# 
  1268  0DA9                     	;# 
  1269  0DA9                     	;# 
  1270  0DAA                     	;# 
  1271  0DAB                     	;# 
  1272  0DAC                     	;# 
  1273  0DAC                     	;# 
  1274  0DAD                     	;# 
  1275  0DAD                     	;# 
  1276  0DAE                     	;# 
  1277  0DAF                     	;# 
  1278  0DB0                     	;# 
  1279  0DB1                     	;# 
  1280  0DB1                     	;# 
  1281  0DB2                     	;# 
  1282  0DB3                     	;# 
  1283  0DB3                     	;# 
  1284  0DB4                     	;# 
  1285  0DB5                     	;# 
  1286  0DB5                     	;# 
  1287  0DB6                     	;# 
  1288  0DB7                     	;# 
  1289  0DB7                     	;# 
  1290  0DB8                     	;# 
  1291  0DB9                     	;# 
  1292  0DB9                     	;# 
  1293  0DBA                     	;# 
  1294  0DBB                     	;# 
  1295  0DBC                     	;# 
  1296  0DBC                     	;# 
  1297  0DBD                     	;# 
  1298  0DBD                     	;# 
  1299  0DBE                     	;# 
  1300  0DBF                     	;# 
  1301  0DC0                     	;# 
  1302  0DC1                     	;# 
  1303  0DC1                     	;# 
  1304  0DC2                     	;# 
  1305  0DC3                     	;# 
  1306  0DC3                     	;# 
  1307  0DC4                     	;# 
  1308  0DC5                     	;# 
  1309  0DC5                     	;# 
  1310  0DC6                     	;# 
  1311  0DC7                     	;# 
  1312  0DC7                     	;# 
  1313  0DC8                     	;# 
  1314  0DC9                     	;# 
  1315  0DC9                     	;# 
  1316  0DCA                     	;# 
  1317  0DCB                     	;# 
  1318  0DCC                     	;# 
  1319  0DCC                     	;# 
  1320  0DCD                     	;# 
  1321  0DCD                     	;# 
  1322  0DCE                     	;# 
  1323  0DCF                     	;# 
  1324  0DD0                     	;# 
  1325  0E0F                     	;# 
  1326  0E10                     	;# 
  1327  0E11                     	;# 
  1328  0E12                     	;# 
  1329  0E13                     	;# 
  1330  0E14                     	;# 
  1331  0E15                     	;# 
  1332  0E16                     	;# 
  1333  0E17                     	;# 
  1334  0E90                     	;# 
  1335  0E91                     	;# 
  1336  0E92                     	;# 
  1337  0E94                     	;# 
  1338  0E95                     	;# 
  1339  0EA0                     	;# 
  1340  0EA1                     	;# 
  1341  0EA2                     	;# 
  1342  0EA3                     	;# 
  1343  0EA4                     	;# 
  1344  0EA5                     	;# 
  1345  0FE4                     	;# 
  1346  0FE5                     	;# 
  1347  0FE6                     	;# 
  1348  0FE7                     	;# 
  1349  0FE8                     	;# 
  1350  0FE8                     	;# 
  1351  0FE9                     	;# 
  1352  0FEA                     	;# 
  1353  0FEA                     	;# 
  1354  0FEB                     	;# 
  1355  0FED                     	;# 
  1356  0FEE                     	;# 
  1357  0FEE                     	;# 
  1358  0FEF                     	;# 
  1359  0000                     	;# 
  1360  0001                     	;# 
  1361  0002                     	;# 
  1362  0003                     	;# 
  1363  0004                     	;# 
  1364  0005                     	;# 
  1365  0006                     	;# 
  1366  0007                     	;# 
  1367  0008                     	;# 
  1368  0009                     	;# 
  1369  000A                     	;# 
  1370  000B                     	;# 
  1371  000C                     	;# 
  1372  000E                     	;# 
  1373  0011                     	;# 
  1374  0012                     	;# 
  1375  0013                     	;# 
  1376  0015                     	;# 
  1377  0016                     	;# 
  1378  0016                     	;# 
  1379  0017                     	;# 
  1380  0018                     	;# 
  1381  0019                     	;# 
  1382  001A                     	;# 
  1383  001B                     	;# 
  1384  001C                     	;# 
  1385  008C                     	;# 
  1386  008E                     	;# 
  1387  0091                     	;# 
  1388  0092                     	;# 
  1389  0093                     	;# 
  1390  0095                     	;# 
  1391  0096                     	;# 
  1392  0097                     	;# 
  1393  0098                     	;# 
  1394  0099                     	;# 
  1395  009A                     	;# 
  1396  009B                     	;# 
  1397  009B                     	;# 
  1398  009C                     	;# 
  1399  009D                     	;# 
  1400  009E                     	;# 
  1401  009F                     	;# 
  1402  010C                     	;# 
  1403  010E                     	;# 
  1404  0111                     	;# 
  1405  0112                     	;# 
  1406  0113                     	;# 
  1407  0114                     	;# 
  1408  0115                     	;# 
  1409  0116                     	;# 
  1410  0117                     	;# 
  1411  0118                     	;# 
  1412  0119                     	;# 
  1413  018C                     	;# 
  1414  018E                     	;# 
  1415  0191                     	;# 
  1416  0191                     	;# 
  1417  0192                     	;# 
  1418  0193                     	;# 
  1419  0193                     	;# 
  1420  0194                     	;# 
  1421  0195                     	;# 
  1422  0196                     	;# 
  1423  0197                     	;# 
  1424  0199                     	;# 
  1425  019A                     	;# 
  1426  019B                     	;# 
  1427  019B                     	;# 
  1428  019C                     	;# 
  1429  019D                     	;# 
  1430  019E                     	;# 
  1431  019F                     	;# 
  1432  020C                     	;# 
  1433  020E                     	;# 
  1434  028C                     	;# 
  1435  028E                     	;# 
  1436  030C                     	;# 
  1437  030E                     	;# 
  1438  038C                     	;# 
  1439  038E                     	;# 
  1440  0391                     	;# 
  1441  0392                     	;# 
  1442  0393                     	;# 
  1443  0397                     	;# 
  1444  0398                     	;# 
  1445  0399                     	;# 
  1446  0691                     	;# 
  1447  0692                     	;# 
  1448  0693                     	;# 
  1449  0694                     	;# 
  1450  0695                     	;# 
  1451  0D8E                     	;# 
  1452  0D8F                     	;# 
  1453  0D90                     	;# 
  1454  0D91                     	;# 
  1455  0D91                     	;# 
  1456  0D92                     	;# 
  1457  0D93                     	;# 
  1458  0D93                     	;# 
  1459  0D94                     	;# 
  1460  0D95                     	;# 
  1461  0D95                     	;# 
  1462  0D96                     	;# 
  1463  0D97                     	;# 
  1464  0D97                     	;# 
  1465  0D98                     	;# 
  1466  0D99                     	;# 
  1467  0D99                     	;# 
  1468  0D9A                     	;# 
  1469  0D9B                     	;# 
  1470  0D9C                     	;# 
  1471  0D9C                     	;# 
  1472  0D9D                     	;# 
  1473  0D9D                     	;# 
  1474  0D9E                     	;# 
  1475  0D9F                     	;# 
  1476  0DA0                     	;# 
  1477  0DA1                     	;# 
  1478  0DA1                     	;# 
  1479  0DA2                     	;# 
  1480  0DA3                     	;# 
  1481  0DA3                     	;# 
  1482  0DA4                     	;# 
  1483  0DA5                     	;# 
  1484  0DA5                     	;# 
  1485  0DA6                     	;# 
  1486  0DA7                     	;# 
  1487  0DA7                     	;# 
  1488  0DA8                     	;# 
  1489  0DA9                     	;# 
  1490  0DA9                     	;# 
  1491  0DAA                     	;# 
  1492  0DAB                     	;# 
  1493  0DAC                     	;# 
  1494  0DAC                     	;# 
  1495  0DAD                     	;# 
  1496  0DAD                     	;# 
  1497  0DAE                     	;# 
  1498  0DAF                     	;# 
  1499  0DB0                     	;# 
  1500  0DB1                     	;# 
  1501  0DB1                     	;# 
  1502  0DB2                     	;# 
  1503  0DB3                     	;# 
  1504  0DB3                     	;# 
  1505  0DB4                     	;# 
  1506  0DB5                     	;# 
  1507  0DB5                     	;# 
  1508  0DB6                     	;# 
  1509  0DB7                     	;# 
  1510  0DB7                     	;# 
  1511  0DB8                     	;# 
  1512  0DB9                     	;# 
  1513  0DB9                     	;# 
  1514  0DBA                     	;# 
  1515  0DBB                     	;# 
  1516  0DBC                     	;# 
  1517  0DBC                     	;# 
  1518  0DBD                     	;# 
  1519  0DBD                     	;# 
  1520  0DBE                     	;# 
  1521  0DBF                     	;# 
  1522  0DC0                     	;# 
  1523  0DC1                     	;# 
  1524  0DC1                     	;# 
  1525  0DC2                     	;# 
  1526  0DC3                     	;# 
  1527  0DC3                     	;# 
  1528  0DC4                     	;# 
  1529  0DC5                     	;# 
  1530  0DC5                     	;# 
  1531  0DC6                     	;# 
  1532  0DC7                     	;# 
  1533  0DC7                     	;# 
  1534  0DC8                     	;# 
  1535  0DC9                     	;# 
  1536  0DC9                     	;# 
  1537  0DCA                     	;# 
  1538  0DCB                     	;# 
  1539  0DCC                     	;# 
  1540  0DCC                     	;# 
  1541  0DCD                     	;# 
  1542  0DCD                     	;# 
  1543  0DCE                     	;# 
  1544  0DCF                     	;# 
  1545  0DD0                     	;# 
  1546  0E0F                     	;# 
  1547  0E10                     	;# 
  1548  0E11                     	;# 
  1549  0E12                     	;# 
  1550  0E13                     	;# 
  1551  0E14                     	;# 
  1552  0E15                     	;# 
  1553  0E16                     	;# 
  1554  0E17                     	;# 
  1555  0E90                     	;# 
  1556  0E91                     	;# 
  1557  0E92                     	;# 
  1558  0E94                     	;# 
  1559  0E95                     	;# 
  1560  0EA0                     	;# 
  1561  0EA1                     	;# 
  1562  0EA2                     	;# 
  1563  0EA3                     	;# 
  1564  0EA4                     	;# 
  1565  0EA5                     	;# 
  1566  0FE4                     	;# 
  1567  0FE5                     	;# 
  1568  0FE6                     	;# 
  1569  0FE7                     	;# 
  1570  0FE8                     	;# 
  1571  0FE8                     	;# 
  1572  0FE9                     	;# 
  1573  0FEA                     	;# 
  1574  0FEA                     	;# 
  1575  0FEB                     	;# 
  1576  0FED                     	;# 
  1577  0FEE                     	;# 
  1578  0FEE                     	;# 
  1579  0FEF                     	;# 
  1580  0000                     	;# 
  1581  0001                     	;# 
  1582  0002                     	;# 
  1583  0003                     	;# 
  1584  0004                     	;# 
  1585  0005                     	;# 
  1586  0006                     	;# 
  1587  0007                     	;# 
  1588  0008                     	;# 
  1589  0009                     	;# 
  1590  000A                     	;# 
  1591  000B                     	;# 
  1592  000C                     	;# 
  1593  000E                     	;# 
  1594  0011                     	;# 
  1595  0012                     	;# 
  1596  0013                     	;# 
  1597  0015                     	;# 
  1598  0016                     	;# 
  1599  0016                     	;# 
  1600  0017                     	;# 
  1601  0018                     	;# 
  1602  0019                     	;# 
  1603  001A                     	;# 
  1604  001B                     	;# 
  1605  001C                     	;# 
  1606  008C                     	;# 
  1607  008E                     	;# 
  1608  0091                     	;# 
  1609  0092                     	;# 
  1610  0093                     	;# 
  1611  0095                     	;# 
  1612  0096                     	;# 
  1613  0097                     	;# 
  1614  0098                     	;# 
  1615  0099                     	;# 
  1616  009A                     	;# 
  1617  009B                     	;# 
  1618  009B                     	;# 
  1619  009C                     	;# 
  1620  009D                     	;# 
  1621  009E                     	;# 
  1622  009F                     	;# 
  1623  010C                     	;# 
  1624  010E                     	;# 
  1625  0111                     	;# 
  1626  0112                     	;# 
  1627  0113                     	;# 
  1628  0114                     	;# 
  1629  0115                     	;# 
  1630  0116                     	;# 
  1631  0117                     	;# 
  1632  0118                     	;# 
  1633  0119                     	;# 
  1634  018C                     	;# 
  1635  018E                     	;# 
  1636  0191                     	;# 
  1637  0191                     	;# 
  1638  0192                     	;# 
  1639  0193                     	;# 
  1640  0193                     	;# 
  1641  0194                     	;# 
  1642  0195                     	;# 
  1643  0196                     	;# 
  1644  0197                     	;# 
  1645  0199                     	;# 
  1646  019A                     	;# 
  1647  019B                     	;# 
  1648  019B                     	;# 
  1649  019C                     	;# 
  1650  019D                     	;# 
  1651  019E                     	;# 
  1652  019F                     	;# 
  1653  020C                     	;# 
  1654  020E                     	;# 
  1655  028C                     	;# 
  1656  028E                     	;# 
  1657  030C                     	;# 
  1658  030E                     	;# 
  1659  038C                     	;# 
  1660  038E                     	;# 
  1661  0391                     	;# 
  1662  0392                     	;# 
  1663  0393                     	;# 
  1664  0397                     	;# 
  1665  0398                     	;# 
  1666  0399                     	;# 
  1667  0691                     	;# 
  1668  0692                     	;# 
  1669  0693                     	;# 
  1670  0694                     	;# 
  1671  0695                     	;# 
  1672  0D8E                     	;# 
  1673  0D8F                     	;# 
  1674  0D90                     	;# 
  1675  0D91                     	;# 
  1676  0D91                     	;# 
  1677  0D92                     	;# 
  1678  0D93                     	;# 
  1679  0D93                     	;# 
  1680  0D94                     	;# 
  1681  0D95                     	;# 
  1682  0D95                     	;# 
  1683  0D96                     	;# 
  1684  0D97                     	;# 
  1685  0D97                     	;# 
  1686  0D98                     	;# 
  1687  0D99                     	;# 
  1688  0D99                     	;# 
  1689  0D9A                     	;# 
  1690  0D9B                     	;# 
  1691  0D9C                     	;# 
  1692  0D9C                     	;# 
  1693  0D9D                     	;# 
  1694  0D9D                     	;# 
  1695  0D9E                     	;# 
  1696  0D9F                     	;# 
  1697  0DA0                     	;# 
  1698  0DA1                     	;# 
  1699  0DA1                     	;# 
  1700  0DA2                     	;# 
  1701  0DA3                     	;# 
  1702  0DA3                     	;# 
  1703  0DA4                     	;# 
  1704  0DA5                     	;# 
  1705  0DA5                     	;# 
  1706  0DA6                     	;# 
  1707  0DA7                     	;# 
  1708  0DA7                     	;# 
  1709  0DA8                     	;# 
  1710  0DA9                     	;# 
  1711  0DA9                     	;# 
  1712  0DAA                     	;# 
  1713  0DAB                     	;# 
  1714  0DAC                     	;# 
  1715  0DAC                     	;# 
  1716  0DAD                     	;# 
  1717  0DAD                     	;# 
  1718  0DAE                     	;# 
  1719  0DAF                     	;# 
  1720  0DB0                     	;# 
  1721  0DB1                     	;# 
  1722  0DB1                     	;# 
  1723  0DB2                     	;# 
  1724  0DB3                     	;# 
  1725  0DB3                     	;# 
  1726  0DB4                     	;# 
  1727  0DB5                     	;# 
  1728  0DB5                     	;# 
  1729  0DB6                     	;# 
  1730  0DB7                     	;# 
  1731  0DB7                     	;# 
  1732  0DB8                     	;# 
  1733  0DB9                     	;# 
  1734  0DB9                     	;# 
  1735  0DBA                     	;# 
  1736  0DBB                     	;# 
  1737  0DBC                     	;# 
  1738  0DBC                     	;# 
  1739  0DBD                     	;# 
  1740  0DBD                     	;# 
  1741  0DBE                     	;# 
  1742  0DBF                     	;# 
  1743  0DC0                     	;# 
  1744  0DC1                     	;# 
  1745  0DC1                     	;# 
  1746  0DC2                     	;# 
  1747  0DC3                     	;# 
  1748  0DC3                     	;# 
  1749  0DC4                     	;# 
  1750  0DC5                     	;# 
  1751  0DC5                     	;# 
  1752  0DC6                     	;# 
  1753  0DC7                     	;# 
  1754  0DC7                     	;# 
  1755  0DC8                     	;# 
  1756  0DC9                     	;# 
  1757  0DC9                     	;# 
  1758  0DCA                     	;# 
  1759  0DCB                     	;# 
  1760  0DCC                     	;# 
  1761  0DCC                     	;# 
  1762  0DCD                     	;# 
  1763  0DCD                     	;# 
  1764  0DCE                     	;# 
  1765  0DCF                     	;# 
  1766  0DD0                     	;# 
  1767  0E0F                     	;# 
  1768  0E10                     	;# 
  1769  0E11                     	;# 
  1770  0E12                     	;# 
  1771  0E13                     	;# 
  1772  0E14                     	;# 
  1773  0E15                     	;# 
  1774  0E16                     	;# 
  1775  0E17                     	;# 
  1776  0E90                     	;# 
  1777  0E91                     	;# 
  1778  0E92                     	;# 
  1779  0E94                     	;# 
  1780  0E95                     	;# 
  1781  0EA0                     	;# 
  1782  0EA1                     	;# 
  1783  0EA2                     	;# 
  1784  0EA3                     	;# 
  1785  0EA4                     	;# 
  1786  0EA5                     	;# 
  1787  0FE4                     	;# 
  1788  0FE5                     	;# 
  1789  0FE6                     	;# 
  1790  0FE7                     	;# 
  1791  0FE8                     	;# 
  1792  0FE8                     	;# 
  1793  0FE9                     	;# 
  1794  0FEA                     	;# 
  1795  0FEA                     	;# 
  1796  0FEB                     	;# 
  1797  0FED                     	;# 
  1798  0FEE                     	;# 
  1799  0FEE                     	;# 
  1800  0FEF                     	;# 
  1801  0000                     	;# 
  1802  0001                     	;# 
  1803  0002                     	;# 
  1804  0003                     	;# 
  1805  0004                     	;# 
  1806  0005                     	;# 
  1807  0006                     	;# 
  1808  0007                     	;# 
  1809  0008                     	;# 
  1810  0009                     	;# 
  1811  000A                     	;# 
  1812  000B                     	;# 
  1813  000C                     	;# 
  1814  000E                     	;# 
  1815  0011                     	;# 
  1816  0012                     	;# 
  1817  0013                     	;# 
  1818  0015                     	;# 
  1819  0016                     	;# 
  1820  0016                     	;# 
  1821  0017                     	;# 
  1822  0018                     	;# 
  1823  0019                     	;# 
  1824  001A                     	;# 
  1825  001B                     	;# 
  1826  001C                     	;# 
  1827  008C                     	;# 
  1828  008E                     	;# 
  1829  0091                     	;# 
  1830  0092                     	;# 
  1831  0093                     	;# 
  1832  0095                     	;# 
  1833  0096                     	;# 
  1834  0097                     	;# 
  1835  0098                     	;# 
  1836  0099                     	;# 
  1837  009A                     	;# 
  1838  009B                     	;# 
  1839  009B                     	;# 
  1840  009C                     	;# 
  1841  009D                     	;# 
  1842  009E                     	;# 
  1843  009F                     	;# 
  1844  010C                     	;# 
  1845  010E                     	;# 
  1846  0111                     	;# 
  1847  0112                     	;# 
  1848  0113                     	;# 
  1849  0114                     	;# 
  1850  0115                     	;# 
  1851  0116                     	;# 
  1852  0117                     	;# 
  1853  0118                     	;# 
  1854  0119                     	;# 
  1855  018C                     	;# 
  1856  018E                     	;# 
  1857  0191                     	;# 
  1858  0191                     	;# 
  1859  0192                     	;# 
  1860  0193                     	;# 
  1861  0193                     	;# 
  1862  0194                     	;# 
  1863  0195                     	;# 
  1864  0196                     	;# 
  1865  0197                     	;# 
  1866  0199                     	;# 
  1867  019A                     	;# 
  1868  019B                     	;# 
  1869  019B                     	;# 
  1870  019C                     	;# 
  1871  019D                     	;# 
  1872  019E                     	;# 
  1873  019F                     	;# 
  1874  020C                     	;# 
  1875  020E                     	;# 
  1876  028C                     	;# 
  1877  028E                     	;# 
  1878  030C                     	;# 
  1879  030E                     	;# 
  1880  038C                     	;# 
  1881  038E                     	;# 
  1882  0391                     	;# 
  1883  0392                     	;# 
  1884  0393                     	;# 
  1885  0397                     	;# 
  1886  0398                     	;# 
  1887  0399                     	;# 
  1888  0691                     	;# 
  1889  0692                     	;# 
  1890  0693                     	;# 
  1891  0694                     	;# 
  1892  0695                     	;# 
  1893  0D8E                     	;# 
  1894  0D8F                     	;# 
  1895  0D90                     	;# 
  1896  0D91                     	;# 
  1897  0D91                     	;# 
  1898  0D92                     	;# 
  1899  0D93                     	;# 
  1900  0D93                     	;# 
  1901  0D94                     	;# 
  1902  0D95                     	;# 
  1903  0D95                     	;# 
  1904  0D96                     	;# 
  1905  0D97                     	;# 
  1906  0D97                     	;# 
  1907  0D98                     	;# 
  1908  0D99                     	;# 
  1909  0D99                     	;# 
  1910  0D9A                     	;# 
  1911  0D9B                     	;# 
  1912  0D9C                     	;# 
  1913  0D9C                     	;# 
  1914  0D9D                     	;# 
  1915  0D9D                     	;# 
  1916  0D9E                     	;# 
  1917  0D9F                     	;# 
  1918  0DA0                     	;# 
  1919  0DA1                     	;# 
  1920  0DA1                     	;# 
  1921  0DA2                     	;# 
  1922  0DA3                     	;# 
  1923  0DA3                     	;# 
  1924  0DA4                     	;# 
  1925  0DA5                     	;# 
  1926  0DA5                     	;# 
  1927  0DA6                     	;# 
  1928  0DA7                     	;# 
  1929  0DA7                     	;# 
  1930  0DA8                     	;# 
  1931  0DA9                     	;# 
  1932  0DA9                     	;# 
  1933  0DAA                     	;# 
  1934  0DAB                     	;# 
  1935  0DAC                     	;# 
  1936  0DAC                     	;# 
  1937  0DAD                     	;# 
  1938  0DAD                     	;# 
  1939  0DAE                     	;# 
  1940  0DAF                     	;# 
  1941  0DB0                     	;# 
  1942  0DB1                     	;# 
  1943  0DB1                     	;# 
  1944  0DB2                     	;# 
  1945  0DB3                     	;# 
  1946  0DB3                     	;# 
  1947  0DB4                     	;# 
  1948  0DB5                     	;# 
  1949  0DB5                     	;# 
  1950  0DB6                     	;# 
  1951  0DB7                     	;# 
  1952  0DB7                     	;# 
  1953  0DB8                     	;# 
  1954  0DB9                     	;# 
  1955  0DB9                     	;# 
  1956  0DBA                     	;# 
  1957  0DBB                     	;# 
  1958  0DBC                     	;# 
  1959  0DBC                     	;# 
  1960  0DBD                     	;# 
  1961  0DBD                     	;# 
  1962  0DBE                     	;# 
  1963  0DBF                     	;# 
  1964  0DC0                     	;# 
  1965  0DC1                     	;# 
  1966  0DC1                     	;# 
  1967  0DC2                     	;# 
  1968  0DC3                     	;# 
  1969  0DC3                     	;# 
  1970  0DC4                     	;# 
  1971  0DC5                     	;# 
  1972  0DC5                     	;# 
  1973  0DC6                     	;# 
  1974  0DC7                     	;# 
  1975  0DC7                     	;# 
  1976  0DC8                     	;# 
  1977  0DC9                     	;# 
  1978  0DC9                     	;# 
  1979  0DCA                     	;# 
  1980  0DCB                     	;# 
  1981  0DCC                     	;# 
  1982  0DCC                     	;# 
  1983  0DCD                     	;# 
  1984  0DCD                     	;# 
  1985  0DCE                     	;# 
  1986  0DCF                     	;# 
  1987  0DD0                     	;# 
  1988  0E0F                     	;# 
  1989  0E10                     	;# 
  1990  0E11                     	;# 
  1991  0E12                     	;# 
  1992  0E13                     	;# 
  1993  0E14                     	;# 
  1994  0E15                     	;# 
  1995  0E16                     	;# 
  1996  0E17                     	;# 
  1997  0E90                     	;# 
  1998  0E91                     	;# 
  1999  0E92                     	;# 
  2000  0E94                     	;# 
  2001  0E95                     	;# 
  2002  0EA0                     	;# 
  2003  0EA1                     	;# 
  2004  0EA2                     	;# 
  2005  0EA3                     	;# 
  2006  0EA4                     	;# 
  2007  0EA5                     	;# 
  2008  0FE4                     	;# 
  2009  0FE5                     	;# 
  2010  0FE6                     	;# 
  2011  0FE7                     	;# 
  2012  0FE8                     	;# 
  2013  0FE8                     	;# 
  2014  0FE9                     	;# 
  2015  0FEA                     	;# 
  2016  0FEA                     	;# 
  2017  0FEB                     	;# 
  2018  0FED                     	;# 
  2019  0FEE                     	;# 
  2020  0FEE                     	;# 
  2021  0FEF                     	;# 
  2022  0000                     	;# 
  2023  0001                     	;# 
  2024  0002                     	;# 
  2025  0003                     	;# 
  2026  0004                     	;# 
  2027  0005                     	;# 
  2028  0006                     	;# 
  2029  0007                     	;# 
  2030  0008                     	;# 
  2031  0009                     	;# 
  2032  000A                     	;# 
  2033  000B                     	;# 
  2034  000C                     	;# 
  2035  000E                     	;# 
  2036  0011                     	;# 
  2037  0012                     	;# 
  2038  0013                     	;# 
  2039  0015                     	;# 
  2040  0016                     	;# 
  2041  0016                     	;# 
  2042  0017                     	;# 
  2043  0018                     	;# 
  2044  0019                     	;# 
  2045  001A                     	;# 
  2046  001B                     	;# 
  2047  001C                     	;# 
  2048  008C                     	;# 
  2049  008E                     	;# 
  2050  0091                     	;# 
  2051  0092                     	;# 
  2052  0093                     	;# 
  2053  0095                     	;# 
  2054  0096                     	;# 
  2055  0097                     	;# 
  2056  0098                     	;# 
  2057  0099                     	;# 
  2058  009A                     	;# 
  2059  009B                     	;# 
  2060  009B                     	;# 
  2061  009C                     	;# 
  2062  009D                     	;# 
  2063  009E                     	;# 
  2064  009F                     	;# 
  2065  010C                     	;# 
  2066  010E                     	;# 
  2067  0111                     	;# 
  2068  0112                     	;# 
  2069  0113                     	;# 
  2070  0114                     	;# 
  2071  0115                     	;# 
  2072  0116                     	;# 
  2073  0117                     	;# 
  2074  0118                     	;# 
  2075  0119                     	;# 
  2076  018C                     	;# 
  2077  018E                     	;# 
  2078  0191                     	;# 
  2079  0191                     	;# 
  2080  0192                     	;# 
  2081  0193                     	;# 
  2082  0193                     	;# 
  2083  0194                     	;# 
  2084  0195                     	;# 
  2085  0196                     	;# 
  2086  0197                     	;# 
  2087  0199                     	;# 
  2088  019A                     	;# 
  2089  019B                     	;# 
  2090  019B                     	;# 
  2091  019C                     	;# 
  2092  019D                     	;# 
  2093  019E                     	;# 
  2094  019F                     	;# 
  2095  020C                     	;# 
  2096  020E                     	;# 
  2097  028C                     	;# 
  2098  028E                     	;# 
  2099  030C                     	;# 
  2100  030E                     	;# 
  2101  038C                     	;# 
  2102  038E                     	;# 
  2103  0391                     	;# 
  2104  0392                     	;# 
  2105  0393                     	;# 
  2106  0397                     	;# 
  2107  0398                     	;# 
  2108  0399                     	;# 
  2109  0691                     	;# 
  2110  0692                     	;# 
  2111  0693                     	;# 
  2112  0694                     	;# 
  2113  0695                     	;# 
  2114  0D8E                     	;# 
  2115  0D8F                     	;# 
  2116  0D90                     	;# 
  2117  0D91                     	;# 
  2118  0D91                     	;# 
  2119  0D92                     	;# 
  2120  0D93                     	;# 
  2121  0D93                     	;# 
  2122  0D94                     	;# 
  2123  0D95                     	;# 
  2124  0D95                     	;# 
  2125  0D96                     	;# 
  2126  0D97                     	;# 
  2127  0D97                     	;# 
  2128  0D98                     	;# 
  2129  0D99                     	;# 
  2130  0D99                     	;# 
  2131  0D9A                     	;# 
  2132  0D9B                     	;# 
  2133  0D9C                     	;# 
  2134  0D9C                     	;# 
  2135  0D9D                     	;# 
  2136  0D9D                     	;# 
  2137  0D9E                     	;# 
  2138  0D9F                     	;# 
  2139  0DA0                     	;# 
  2140  0DA1                     	;# 
  2141  0DA1                     	;# 
  2142  0DA2                     	;# 
  2143  0DA3                     	;# 
  2144  0DA3                     	;# 
  2145  0DA4                     	;# 
  2146  0DA5                     	;# 
  2147  0DA5                     	;# 
  2148  0DA6                     	;# 
  2149  0DA7                     	;# 
  2150  0DA7                     	;# 
  2151  0DA8                     	;# 
  2152  0DA9                     	;# 
  2153  0DA9                     	;# 
  2154  0DAA                     	;# 
  2155  0DAB                     	;# 
  2156  0DAC                     	;# 
  2157  0DAC                     	;# 
  2158  0DAD                     	;# 
  2159  0DAD                     	;# 
  2160  0DAE                     	;# 
  2161  0DAF                     	;# 
  2162  0DB0                     	;# 
  2163  0DB1                     	;# 
  2164  0DB1                     	;# 
  2165  0DB2                     	;# 
  2166  0DB3                     	;# 
  2167  0DB3                     	;# 
  2168  0DB4                     	;# 
  2169  0DB5                     	;# 
  2170  0DB5                     	;# 
  2171  0DB6                     	;# 
  2172  0DB7                     	;# 
  2173  0DB7                     	;# 
  2174  0DB8                     	;# 
  2175  0DB9                     	;# 
  2176  0DB9                     	;# 
  2177  0DBA                     	;# 
  2178  0DBB                     	;# 
  2179  0DBC                     	;# 
  2180  0DBC                     	;# 
  2181  0DBD                     	;# 
  2182  0DBD                     	;# 
  2183  0DBE                     	;# 
  2184  0DBF                     	;# 
  2185  0DC0                     	;# 
  2186  0DC1                     	;# 
  2187  0DC1                     	;# 
  2188  0DC2                     	;# 
  2189  0DC3                     	;# 
  2190  0DC3                     	;# 
  2191  0DC4                     	;# 
  2192  0DC5                     	;# 
  2193  0DC5                     	;# 
  2194  0DC6                     	;# 
  2195  0DC7                     	;# 
  2196  0DC7                     	;# 
  2197  0DC8                     	;# 
  2198  0DC9                     	;# 
  2199  0DC9                     	;# 
  2200  0DCA                     	;# 
  2201  0DCB                     	;# 
  2202  0DCC                     	;# 
  2203  0DCC                     	;# 
  2204  0DCD                     	;# 
  2205  0DCD                     	;# 
  2206  0DCE                     	;# 
  2207  0DCF                     	;# 
  2208  0DD0                     	;# 
  2209  0E0F                     	;# 
  2210  0E10                     	;# 
  2211  0E11                     	;# 
  2212  0E12                     	;# 
  2213  0E13                     	;# 
  2214  0E14                     	;# 
  2215  0E15                     	;# 
  2216  0E16                     	;# 
  2217  0E17                     	;# 
  2218  0E90                     	;# 
  2219  0E91                     	;# 
  2220  0E92                     	;# 
  2221  0E94                     	;# 
  2222  0E95                     	;# 
  2223  0EA0                     	;# 
  2224  0EA1                     	;# 
  2225  0EA2                     	;# 
  2226  0EA3                     	;# 
  2227  0EA4                     	;# 
  2228  0EA5                     	;# 
  2229  0FE4                     	;# 
  2230  0FE5                     	;# 
  2231  0FE6                     	;# 
  2232  0FE7                     	;# 
  2233  0FE8                     	;# 
  2234  0FE8                     	;# 
  2235  0FE9                     	;# 
  2236  0FEA                     	;# 
  2237  0FEA                     	;# 
  2238  0FEB                     	;# 
  2239  0FED                     	;# 
  2240  0FEE                     	;# 
  2241  0FEE                     	;# 
  2242  0FEF                     	;# 
  2243  0000                     	;# 
  2244  0001                     	;# 
  2245  0002                     	;# 
  2246  0003                     	;# 
  2247  0004                     	;# 
  2248  0005                     	;# 
  2249  0006                     	;# 
  2250  0007                     	;# 
  2251  0008                     	;# 
  2252  0009                     	;# 
  2253  000A                     	;# 
  2254  000B                     	;# 
  2255  000C                     	;# 
  2256  000E                     	;# 
  2257  0011                     	;# 
  2258  0012                     	;# 
  2259  0013                     	;# 
  2260  0015                     	;# 
  2261  0016                     	;# 
  2262  0016                     	;# 
  2263  0017                     	;# 
  2264  0018                     	;# 
  2265  0019                     	;# 
  2266  001A                     	;# 
  2267  001B                     	;# 
  2268  001C                     	;# 
  2269  008C                     	;# 
  2270  008E                     	;# 
  2271  0091                     	;# 
  2272  0092                     	;# 
  2273  0093                     	;# 
  2274  0095                     	;# 
  2275  0096                     	;# 
  2276  0097                     	;# 
  2277  0098                     	;# 
  2278  0099                     	;# 
  2279  009A                     	;# 
  2280  009B                     	;# 
  2281  009B                     	;# 
  2282  009C                     	;# 
  2283  009D                     	;# 
  2284  009E                     	;# 
  2285  009F                     	;# 
  2286  010C                     	;# 
  2287  010E                     	;# 
  2288  0111                     	;# 
  2289  0112                     	;# 
  2290  0113                     	;# 
  2291  0114                     	;# 
  2292  0115                     	;# 
  2293  0116                     	;# 
  2294  0117                     	;# 
  2295  0118                     	;# 
  2296  0119                     	;# 
  2297  018C                     	;# 
  2298  018E                     	;# 
  2299  0191                     	;# 
  2300  0191                     	;# 
  2301  0192                     	;# 
  2302  0193                     	;# 
  2303  0193                     	;# 
  2304  0194                     	;# 
  2305  0195                     	;# 
  2306  0196                     	;# 
  2307  0197                     	;# 
  2308  0199                     	;# 
  2309  019A                     	;# 
  2310  019B                     	;# 
  2311  019B                     	;# 
  2312  019C                     	;# 
  2313  019D                     	;# 
  2314  019E                     	;# 
  2315  019F                     	;# 
  2316  020C                     	;# 
  2317  020E                     	;# 
  2318  028C                     	;# 
  2319  028E                     	;# 
  2320  030C                     	;# 
  2321  030E                     	;# 
  2322  038C                     	;# 
  2323  038E                     	;# 
  2324  0391                     	;# 
  2325  0392                     	;# 
  2326  0393                     	;# 
  2327  0397                     	;# 
  2328  0398                     	;# 
  2329  0399                     	;# 
  2330  0691                     	;# 
  2331  0692                     	;# 
  2332  0693                     	;# 
  2333  0694                     	;# 
  2334  0695                     	;# 
  2335  0D8E                     	;# 
  2336  0D8F                     	;# 
  2337  0D90                     	;# 
  2338  0D91                     	;# 
  2339  0D91                     	;# 
  2340  0D92                     	;# 
  2341  0D93                     	;# 
  2342  0D93                     	;# 
  2343  0D94                     	;# 
  2344  0D95                     	;# 
  2345  0D95                     	;# 
  2346  0D96                     	;# 
  2347  0D97                     	;# 
  2348  0D97                     	;# 
  2349  0D98                     	;# 
  2350  0D99                     	;# 
  2351  0D99                     	;# 
  2352  0D9A                     	;# 
  2353  0D9B                     	;# 
  2354  0D9C                     	;# 
  2355  0D9C                     	;# 
  2356  0D9D                     	;# 
  2357  0D9D                     	;# 
  2358  0D9E                     	;# 
  2359  0D9F                     	;# 
  2360  0DA0                     	;# 
  2361  0DA1                     	;# 
  2362  0DA1                     	;# 
  2363  0DA2                     	;# 
  2364  0DA3                     	;# 
  2365  0DA3                     	;# 
  2366  0DA4                     	;# 
  2367  0DA5                     	;# 
  2368  0DA5                     	;# 
  2369  0DA6                     	;# 
  2370  0DA7                     	;# 
  2371  0DA7                     	;# 
  2372  0DA8                     	;# 
  2373  0DA9                     	;# 
  2374  0DA9                     	;# 
  2375  0DAA                     	;# 
  2376  0DAB                     	;# 
  2377  0DAC                     	;# 
  2378  0DAC                     	;# 
  2379  0DAD                     	;# 
  2380  0DAD                     	;# 
  2381  0DAE                     	;# 
  2382  0DAF                     	;# 
  2383  0DB0                     	;# 
  2384  0DB1                     	;# 
  2385  0DB1                     	;# 
  2386  0DB2                     	;# 
  2387  0DB3                     	;# 
  2388  0DB3                     	;# 
  2389  0DB4                     	;# 
  2390  0DB5                     	;# 
  2391  0DB5                     	;# 
  2392  0DB6                     	;# 
  2393  0DB7                     	;# 
  2394  0DB7                     	;# 
  2395  0DB8                     	;# 
  2396  0DB9                     	;# 
  2397  0DB9                     	;# 
  2398  0DBA                     	;# 
  2399  0DBB                     	;# 
  2400  0DBC                     	;# 
  2401  0DBC                     	;# 
  2402  0DBD                     	;# 
  2403  0DBD                     	;# 
  2404  0DBE                     	;# 
  2405  0DBF                     	;# 
  2406  0DC0                     	;# 
  2407  0DC1                     	;# 
  2408  0DC1                     	;# 
  2409  0DC2                     	;# 
  2410  0DC3                     	;# 
  2411  0DC3                     	;# 
  2412  0DC4                     	;# 
  2413  0DC5                     	;# 
  2414  0DC5                     	;# 
  2415  0DC6                     	;# 
  2416  0DC7                     	;# 
  2417  0DC7                     	;# 
  2418  0DC8                     	;# 
  2419  0DC9                     	;# 
  2420  0DC9                     	;# 
  2421  0DCA                     	;# 
  2422  0DCB                     	;# 
  2423  0DCC                     	;# 
  2424  0DCC                     	;# 
  2425  0DCD                     	;# 
  2426  0DCD                     	;# 
  2427  0DCE                     	;# 
  2428  0DCF                     	;# 
  2429  0DD0                     	;# 
  2430  0E0F                     	;# 
  2431  0E10                     	;# 
  2432  0E11                     	;# 
  2433  0E12                     	;# 
  2434  0E13                     	;# 
  2435  0E14                     	;# 
  2436  0E15                     	;# 
  2437  0E16                     	;# 
  2438  0E17                     	;# 
  2439  0E90                     	;# 
  2440  0E91                     	;# 
  2441  0E92                     	;# 
  2442  0E94                     	;# 
  2443  0E95                     	;# 
  2444  0EA0                     	;# 
  2445  0EA1                     	;# 
  2446  0EA2                     	;# 
  2447  0EA3                     	;# 
  2448  0EA4                     	;# 
  2449  0EA5                     	;# 
  2450  0FE4                     	;# 
  2451  0FE5                     	;# 
  2452  0FE6                     	;# 
  2453  0FE7                     	;# 
  2454  0FE8                     	;# 
  2455  0FE8                     	;# 
  2456  0FE9                     	;# 
  2457  0FEA                     	;# 
  2458  0FEA                     	;# 
  2459  0FEB                     	;# 
  2460  0FED                     	;# 
  2461  0FEE                     	;# 
  2462  0FEE                     	;# 
  2463  0FEF                     	;# 
  2464  0FFF                     	;# 
  2465  0000                     	;# 
  2466  0001                     	;# 
  2467  0002                     	;# 
  2468  0003                     	;# 
  2469  0004                     	;# 
  2470  0005                     	;# 
  2471  0006                     	;# 
  2472  0007                     	;# 
  2473  0008                     	;# 
  2474  0009                     	;# 
  2475  000A                     	;# 
  2476  000B                     	;# 
  2477  000C                     	;# 
  2478  000E                     	;# 
  2479  0011                     	;# 
  2480  0012                     	;# 
  2481  0013                     	;# 
  2482  0015                     	;# 
  2483  0016                     	;# 
  2484  0016                     	;# 
  2485  0017                     	;# 
  2486  0018                     	;# 
  2487  0019                     	;# 
  2488  001A                     	;# 
  2489  001B                     	;# 
  2490  001C                     	;# 
  2491  008C                     	;# 
  2492  008E                     	;# 
  2493  0091                     	;# 
  2494  0092                     	;# 
  2495  0093                     	;# 
  2496  0095                     	;# 
  2497  0096                     	;# 
  2498  0097                     	;# 
  2499  0098                     	;# 
  2500  0099                     	;# 
  2501  009A                     	;# 
  2502  009B                     	;# 
  2503  009B                     	;# 
  2504  009C                     	;# 
  2505  009D                     	;# 
  2506  009E                     	;# 
  2507  009F                     	;# 
  2508  010C                     	;# 
  2509  010E                     	;# 
  2510  0111                     	;# 
  2511  0112                     	;# 
  2512  0113                     	;# 
  2513  0114                     	;# 
  2514  0115                     	;# 
  2515  0116                     	;# 
  2516  0117                     	;# 
  2517  0118                     	;# 
  2518  0119                     	;# 
  2519  018C                     	;# 
  2520  018E                     	;# 
  2521  0191                     	;# 
  2522  0191                     	;# 
  2523  0192                     	;# 
  2524  0193                     	;# 
  2525  0193                     	;# 
  2526  0194                     	;# 
  2527  0195                     	;# 
  2528  0196                     	;# 
  2529  0197                     	;# 
  2530  0199                     	;# 
  2531  019A                     	;# 
  2532  019B                     	;# 
  2533  019B                     	;# 
  2534  019C                     	;# 
  2535  019D                     	;# 
  2536  019E                     	;# 
  2537  019F                     	;# 
  2538  020C                     	;# 
  2539  020E                     	;# 
  2540  028C                     	;# 
  2541  028E                     	;# 
  2542  030C                     	;# 
  2543  030E                     	;# 
  2544  038C                     	;# 
  2545  038E                     	;# 
  2546  0391                     	;# 
  2547  0392                     	;# 
  2548  0393                     	;# 
  2549  0397                     	;# 
  2550  0398                     	;# 
  2551  0399                     	;# 
  2552  0691                     	;# 
  2553  0692                     	;# 
  2554  0693                     	;# 
  2555  0694                     	;# 
  2556  0695                     	;# 
  2557  0D8E                     	;# 
  2558  0D8F                     	;# 
  2559  0D90                     	;# 
  2560  0D91                     	;# 
  2561  0D91                     	;# 
  2562  0D92                     	;# 
  2563  0D93                     	;# 
  2564  0D93                     	;# 
  2565  0D94                     	;# 
  2566  0D95                     	;# 
  2567  0D95                     	;# 
  2568  0D96                     	;# 
  2569  0D97                     	;# 
  2570  0D97                     	;# 
  2571  0D98                     	;# 
  2572  0D99                     	;# 
  2573  0D99                     	;# 
  2574  0D9A                     	;# 
  2575  0D9B                     	;# 
  2576  0D9C                     	;# 
  2577  0D9C                     	;# 
  2578  0D9D                     	;# 
  2579  0D9D                     	;# 
  2580  0D9E                     	;# 
  2581  0D9F                     	;# 
  2582  0DA0                     	;# 
  2583  0DA1                     	;# 
  2584  0DA1                     	;# 
  2585  0DA2                     	;# 
  2586  0DA3                     	;# 
  2587  0DA3                     	;# 
  2588  0DA4                     	;# 
  2589  0DA5                     	;# 
  2590  0DA5                     	;# 
  2591  0DA6                     	;# 
  2592  0DA7                     	;# 
  2593  0DA7                     	;# 
  2594  0DA8                     	;# 
  2595  0DA9                     	;# 
  2596  0DA9                     	;# 
  2597  0DAA                     	;# 
  2598  0DAB                     	;# 
  2599  0DAC                     	;# 
  2600  0DAC                     	;# 
  2601  0DAD                     	;# 
  2602  0DAD                     	;# 
  2603  0DAE                     	;# 
  2604  0DAF                     	;# 
  2605  0DB0                     	;# 
  2606  0DB1                     	;# 
  2607  0DB1                     	;# 
  2608  0DB2                     	;# 
  2609  0DB3                     	;# 
  2610  0DB3                     	;# 
  2611  0DB4                     	;# 
  2612  0DB5                     	;# 
  2613  0DB5                     	;# 
  2614  0DB6                     	;# 
  2615  0DB7                     	;# 
  2616  0DB7                     	;# 
  2617  0DB8                     	;# 
  2618  0DB9                     	;# 
  2619  0DB9                     	;# 
  2620  0DBA                     	;# 
  2621  0DBB                     	;# 
  2622  0DBC                     	;# 
  2623  0DBC                     	;# 
  2624  0DBD                     	;# 
  2625  0DBD                     	;# 
  2626  0DBE                     	;# 
  2627  0DBF                     	;# 
  2628  0DC0                     	;# 
  2629  0DC1                     	;# 
  2630  0DC1                     	;# 
  2631  0DC2                     	;# 
  2632  0DC3                     	;# 
  2633  0DC3                     	;# 
  2634  0DC4                     	;# 
  2635  0DC5                     	;# 
  2636  0DC5                     	;# 
  2637  0DC6                     	;# 
  2638  0DC7                     	;# 
  2639  0DC7                     	;# 
  2640  0DC8                     	;# 
  2641  0DC9                     	;# 
  2642  0DC9                     	;# 
  2643  0DCA                     	;# 
  2644  0DCB                     	;# 
  2645  0DCC                     	;# 
  2646  0DCC                     	;# 
  2647  0DCD                     	;# 
  2648  0DCD                     	;# 
  2649  0DCE                     	;# 
  2650  0DCF                     	;# 
  2651  0DD0                     	;# 
  2652  0E0F                     	;# 
  2653  0E10                     	;# 
  2654  0E11                     	;# 
  2655  0E12                     	;# 
  2656  0E13                     	;# 
  2657  0E14                     	;# 
  2658  0E15                     	;# 
  2659  0E16                     	;# 
  2660  0E17                     	;# 
  2661  0E90                     	;# 
  2662  0E91                     	;# 
  2663  0E92                     	;# 
  2664  0E94                     	;# 
  2665  0E95                     	;# 
  2666  0EA0                     	;# 
  2667  0EA1                     	;# 
  2668  0EA2                     	;# 
  2669  0EA3                     	;# 
  2670  0EA4                     	;# 
  2671  0EA5                     	;# 
  2672  0FE4                     	;# 
  2673  0FE5                     	;# 
  2674  0FE6                     	;# 
  2675  0FE7                     	;# 
  2676  0FE8                     	;# 
  2677  0FE8                     	;# 
  2678  0FE9                     	;# 
  2679  0FEA                     	;# 
  2680  0FEA                     	;# 
  2681  0FEB                     	;# 
  2682  0FED                     	;# 
  2683  0FEE                     	;# 
  2684  0FEE                     	;# 
  2685  0FEF                     	;# 
  2686  0FFF                     	;# 
  2687  0000                     	;# 
  2688  0001                     	;# 
  2689  0002                     	;# 
  2690  0003                     	;# 
  2691  0004                     	;# 
  2692  0005                     	;# 
  2693  0006                     	;# 
  2694  0007                     	;# 
  2695  0008                     	;# 
  2696  0009                     	;# 
  2697  000A                     	;# 
  2698  000B                     	;# 
  2699  000C                     	;# 
  2700  000E                     	;# 
  2701  0011                     	;# 
  2702  0012                     	;# 
  2703  0013                     	;# 
  2704  0015                     	;# 
  2705  0016                     	;# 
  2706  0016                     	;# 
  2707  0017                     	;# 
  2708  0018                     	;# 
  2709  0019                     	;# 
  2710  001A                     	;# 
  2711  001B                     	;# 
  2712  001C                     	;# 
  2713  008C                     	;# 
  2714  008E                     	;# 
  2715  0091                     	;# 
  2716  0092                     	;# 
  2717  0093                     	;# 
  2718  0095                     	;# 
  2719  0096                     	;# 
  2720  0097                     	;# 
  2721  0098                     	;# 
  2722  0099                     	;# 
  2723  009A                     	;# 
  2724  009B                     	;# 
  2725  009B                     	;# 
  2726  009C                     	;# 
  2727  009D                     	;# 
  2728  009E                     	;# 
  2729  009F                     	;# 
  2730  010C                     	;# 
  2731  010E                     	;# 
  2732  0111                     	;# 
  2733  0112                     	;# 
  2734  0113                     	;# 
  2735  0114                     	;# 
  2736  0115                     	;# 
  2737  0116                     	;# 
  2738  0117                     	;# 
  2739  0118                     	;# 
  2740  0119                     	;# 
  2741  018C                     	;# 
  2742  018E                     	;# 
  2743  0191                     	;# 
  2744  0191                     	;# 
  2745  0192                     	;# 
  2746  0193                     	;# 
  2747  0193                     	;# 
  2748  0194                     	;# 
  2749  0195                     	;# 
  2750  0196                     	;# 
  2751  0197                     	;# 
  2752  0199                     	;# 
  2753  019A                     	;# 
  2754  019B                     	;# 
  2755  019B                     	;# 
  2756  019C                     	;# 
  2757  019D                     	;# 
  2758  019E                     	;# 
  2759  019F                     	;# 
  2760  020C                     	;# 
  2761  020E                     	;# 
  2762  028C                     	;# 
  2763  028E                     	;# 
  2764  030C                     	;# 
  2765  030E                     	;# 
  2766  038C                     	;# 
  2767  038E                     	;# 
  2768  0391                     	;# 
  2769  0392                     	;# 
  2770  0393                     	;# 
  2771  0397                     	;# 
  2772  0398                     	;# 
  2773  0399                     	;# 
  2774  0691                     	;# 
  2775  0692                     	;# 
  2776  0693                     	;# 
  2777  0694                     	;# 
  2778  0695                     	;# 
  2779  0D8E                     	;# 
  2780  0D8F                     	;# 
  2781  0D90                     	;# 
  2782  0D91                     	;# 
  2783  0D91                     	;# 
  2784  0D92                     	;# 
  2785  0D93                     	;# 
  2786  0D93                     	;# 
  2787  0D94                     	;# 
  2788  0D95                     	;# 
  2789  0D95                     	;# 
  2790  0D96                     	;# 
  2791  0D97                     	;# 
  2792  0D97                     	;# 
  2793  0D98                     	;# 
  2794  0D99                     	;# 
  2795  0D99                     	;# 
  2796  0D9A                     	;# 
  2797  0D9B                     	;# 
  2798  0D9C                     	;# 
  2799  0D9C                     	;# 
  2800  0D9D                     	;# 
  2801  0D9D                     	;# 
  2802  0D9E                     	;# 
  2803  0D9F                     	;# 
  2804  0DA0                     	;# 
  2805  0DA1                     	;# 
  2806  0DA1                     	;# 
  2807  0DA2                     	;# 
  2808  0DA3                     	;# 
  2809  0DA3                     	;# 
  2810  0DA4                     	;# 
  2811  0DA5                     	;# 
  2812  0DA5                     	;# 
  2813  0DA6                     	;# 
  2814  0DA7                     	;# 
  2815  0DA7                     	;# 
  2816  0DA8                     	;# 
  2817  0DA9                     	;# 
  2818  0DA9                     	;# 
  2819  0DAA                     	;# 
  2820  0DAB                     	;# 
  2821  0DAC                     	;# 
  2822  0DAC                     	;# 
  2823  0DAD                     	;# 
  2824  0DAD                     	;# 
  2825  0DAE                     	;# 
  2826  0DAF                     	;# 
  2827  0DB0                     	;# 
  2828  0DB1                     	;# 
  2829  0DB1                     	;# 
  2830  0DB2                     	;# 
  2831  0DB3                     	;# 
  2832  0DB3                     	;# 
  2833  0DB4                     	;# 
  2834  0DB5                     	;# 
  2835  0DB5                     	;# 
  2836  0DB6                     	;# 
  2837  0DB7                     	;# 
  2838  0DB7                     	;# 
  2839  0DB8                     	;# 
  2840  0DB9                     	;# 
  2841  0DB9                     	;# 
  2842  0DBA                     	;# 
  2843  0DBB                     	;# 
  2844  0DBC                     	;# 
  2845  0DBC                     	;# 
  2846  0DBD                     	;# 
  2847  0DBD                     	;# 
  2848  0DBE                     	;# 
  2849  0DBF                     	;# 
  2850  0DC0                     	;# 
  2851  0DC1                     	;# 
  2852  0DC1                     	;# 
  2853  0DC2                     	;# 
  2854  0DC3                     	;# 
  2855  0DC3                     	;# 
  2856  0DC4                     	;# 
  2857  0DC5                     	;# 
  2858  0DC5                     	;# 
  2859  0DC6                     	;# 
  2860  0DC7                     	;# 
  2861  0DC7                     	;# 
  2862  0DC8                     	;# 
  2863  0DC9                     	;# 
  2864  0DC9                     	;# 
  2865  0DCA                     	;# 
  2866  0DCB                     	;# 
  2867  0DCC                     	;# 
  2868  0DCC                     	;# 
  2869  0DCD                     	;# 
  2870  0DCD                     	;# 
  2871  0DCE                     	;# 
  2872  0DCF                     	;# 
  2873  0DD0                     	;# 
  2874  0E0F                     	;# 
  2875  0E10                     	;# 
  2876  0E11                     	;# 
  2877  0E12                     	;# 
  2878  0E13                     	;# 
  2879  0E14                     	;# 
  2880  0E15                     	;# 
  2881  0E16                     	;# 
  2882  0E17                     	;# 
  2883  0E90                     	;# 
  2884  0E91                     	;# 
  2885  0E92                     	;# 
  2886  0E94                     	;# 
  2887  0E95                     	;# 
  2888  0EA0                     	;# 
  2889  0EA1                     	;# 
  2890  0EA2                     	;# 
  2891  0EA3                     	;# 
  2892  0EA4                     	;# 
  2893  0EA5                     	;# 
  2894  0FE4                     	;# 
  2895  0FE5                     	;# 
  2896  0FE6                     	;# 
  2897  0FE7                     	;# 
  2898  0FE8                     	;# 
  2899  0FE8                     	;# 
  2900  0FE9                     	;# 
  2901  0FEA                     	;# 
  2902  0FEA                     	;# 
  2903  0FEB                     	;# 
  2904  0FED                     	;# 
  2905  0FEE                     	;# 
  2906  0FEE                     	;# 
  2907  0FEF                     	;# 
  2908  0FFF                     	;# 
  2909  0000                     	;# 
  2910  0001                     	;# 
  2911  0002                     	;# 
  2912  0003                     	;# 
  2913  0004                     	;# 
  2914  0005                     	;# 
  2915  0006                     	;# 
  2916  0007                     	;# 
  2917  0008                     	;# 
  2918  0009                     	;# 
  2919  000A                     	;# 
  2920  000B                     	;# 
  2921  000C                     	;# 
  2922  000E                     	;# 
  2923  0011                     	;# 
  2924  0012                     	;# 
  2925  0013                     	;# 
  2926  0015                     	;# 
  2927  0016                     	;# 
  2928  0016                     	;# 
  2929  0017                     	;# 
  2930  0018                     	;# 
  2931  0019                     	;# 
  2932  001A                     	;# 
  2933  001B                     	;# 
  2934  001C                     	;# 
  2935  008C                     	;# 
  2936  008E                     	;# 
  2937  0091                     	;# 
  2938  0092                     	;# 
  2939  0093                     	;# 
  2940  0095                     	;# 
  2941  0096                     	;# 
  2942  0097                     	;# 
  2943  0098                     	;# 
  2944  0099                     	;# 
  2945  009A                     	;# 
  2946  009B                     	;# 
  2947  009B                     	;# 
  2948  009C                     	;# 
  2949  009D                     	;# 
  2950  009E                     	;# 
  2951  009F                     	;# 
  2952  010C                     	;# 
  2953  010E                     	;# 
  2954  0111                     	;# 
  2955  0112                     	;# 
  2956  0113                     	;# 
  2957  0114                     	;# 
  2958  0115                     	;# 
  2959  0116                     	;# 
  2960  0117                     	;# 
  2961  0118                     	;# 
  2962  0119                     	;# 
  2963  018C                     	;# 
  2964  018E                     	;# 
  2965  0191                     	;# 
  2966  0191                     	;# 
  2967  0192                     	;# 
  2968  0193                     	;# 
  2969  0193                     	;# 
  2970  0194                     	;# 
  2971  0195                     	;# 
  2972  0196                     	;# 
  2973  0197                     	;# 
  2974  0199                     	;# 
  2975  019A                     	;# 
  2976  019B                     	;# 
  2977  019B                     	;# 
  2978  019C                     	;# 
  2979  019D                     	;# 
  2980  019E                     	;# 
  2981  019F                     	;# 
  2982  020C                     	;# 
  2983  020E                     	;# 
  2984  028C                     	;# 
  2985  028E                     	;# 
  2986  030C                     	;# 
  2987  030E                     	;# 
  2988  038C                     	;# 
  2989  038E                     	;# 
  2990  0391                     	;# 
  2991  0392                     	;# 
  2992  0393                     	;# 
  2993  0397                     	;# 
  2994  0398                     	;# 
  2995  0399                     	;# 
  2996  0691                     	;# 
  2997  0692                     	;# 
  2998  0693                     	;# 
  2999  0694                     	;# 
  3000  0695                     	;# 
  3001  0D8E                     	;# 
  3002  0D8F                     	;# 
  3003  0D90                     	;# 
  3004  0D91                     	;# 
  3005  0D91                     	;# 
  3006  0D92                     	;# 
  3007  0D93                     	;# 
  3008  0D93                     	;# 
  3009  0D94                     	;# 
  3010  0D95                     	;# 
  3011  0D95                     	;# 
  3012  0D96                     	;# 
  3013  0D97                     	;# 
  3014  0D97                     	;# 
  3015  0D98                     	;# 
  3016  0D99                     	;# 
  3017  0D99                     	;# 
  3018  0D9A                     	;# 
  3019  0D9B                     	;# 
  3020  0D9C                     	;# 
  3021  0D9C                     	;# 
  3022  0D9D                     	;# 
  3023  0D9D                     	;# 
  3024  0D9E                     	;# 
  3025  0D9F                     	;# 
  3026  0DA0                     	;# 
  3027  0DA1                     	;# 
  3028  0DA1                     	;# 
  3029  0DA2                     	;# 
  3030  0DA3                     	;# 
  3031  0DA3                     	;# 
  3032  0DA4                     	;# 
  3033  0DA5                     	;# 
  3034  0DA5                     	;# 
  3035  0DA6                     	;# 
  3036  0DA7                     	;# 
  3037  0DA7                     	;# 
  3038  0DA8                     	;# 
  3039  0DA9                     	;# 
  3040  0DA9                     	;# 
  3041  0DAA                     	;# 
  3042  0DAB                     	;# 
  3043  0DAC                     	;# 
  3044  0DAC                     	;# 
  3045  0DAD                     	;# 
  3046  0DAD                     	;# 
  3047  0DAE                     	;# 
  3048  0DAF                     	;# 
  3049  0DB0                     	;# 
  3050  0DB1                     	;# 
  3051  0DB1                     	;# 
  3052  0DB2                     	;# 
  3053  0DB3                     	;# 
  3054  0DB3                     	;# 
  3055  0DB4                     	;# 
  3056  0DB5                     	;# 
  3057  0DB5                     	;# 
  3058  0DB6                     	;# 
  3059  0DB7                     	;# 
  3060  0DB7                     	;# 
  3061  0DB8                     	;# 
  3062  0DB9                     	;# 
  3063  0DB9                     	;# 
  3064  0DBA                     	;# 
  3065  0DBB                     	;# 
  3066  0DBC                     	;# 
  3067  0DBC                     	;# 
  3068  0DBD                     	;# 
  3069  0DBD                     	;# 
  3070  0DBE                     	;# 
  3071  0DBF                     	;# 
  3072  0DC0                     	;# 
  3073  0DC1                     	;# 
  3074  0DC1                     	;# 
  3075  0DC2                     	;# 
  3076  0DC3                     	;# 
  3077  0DC3                     	;# 
  3078  0DC4                     	;# 
  3079  0DC5                     	;# 
  3080  0DC5                     	;# 
  3081  0DC6                     	;# 
  3082  0DC7                     	;# 
  3083  0DC7                     	;# 
  3084  0DC8                     	;# 
  3085  0DC9                     	;# 
  3086  0DC9                     	;# 
  3087  0DCA                     	;# 
  3088  0DCB                     	;# 
  3089  0DCC                     	;# 
  3090  0DCC                     	;# 
  3091  0DCD                     	;# 
  3092  0DCD                     	;# 
  3093  0DCE                     	;# 
  3094  0DCF                     	;# 
  3095  0DD0                     	;# 
  3096  0E0F                     	;# 
  3097  0E10                     	;# 
  3098  0E11                     	;# 
  3099  0E12                     	;# 
  3100  0E13                     	;# 
  3101  0E14                     	;# 
  3102  0E15                     	;# 
  3103  0E16                     	;# 
  3104  0E17                     	;# 
  3105  0E90                     	;# 
  3106  0E91                     	;# 
  3107  0E92                     	;# 
  3108  0E94                     	;# 
  3109  0E95                     	;# 
  3110  0EA0                     	;# 
  3111  0EA1                     	;# 
  3112  0EA2                     	;# 
  3113  0EA3                     	;# 
  3114  0EA4                     	;# 
  3115  0EA5                     	;# 
  3116  0FE4                     	;# 
  3117  0FE5                     	;# 
  3118  0FE6                     	;# 
  3119  0FE7                     	;# 
  3120  0FE8                     	;# 
  3121  0FE8                     	;# 
  3122  0FE9                     	;# 
  3123  0FEA                     	;# 
  3124  0FEA                     	;# 
  3125  0FEB                     	;# 
  3126  0FED                     	;# 
  3127  0FEE                     	;# 
  3128  0FEE                     	;# 
  3129  0FEF                     	;# 
  3130  0FFF                     	;# 
  3131  0000                     	;# 
  3132  0001                     	;# 
  3133  0002                     	;# 
  3134  0003                     	;# 
  3135  0004                     	;# 
  3136  0005                     	;# 
  3137  0006                     	;# 
  3138  0007                     	;# 
  3139  0008                     	;# 
  3140  0009                     	;# 
  3141  000A                     	;# 
  3142  000B                     	;# 
  3143  000C                     	;# 
  3144  000E                     	;# 
  3145  0011                     	;# 
  3146  0012                     	;# 
  3147  0013                     	;# 
  3148  0015                     	;# 
  3149  0016                     	;# 
  3150  0016                     	;# 
  3151  0017                     	;# 
  3152  0018                     	;# 
  3153  0019                     	;# 
  3154  001A                     	;# 
  3155  001B                     	;# 
  3156  001C                     	;# 
  3157  008C                     	;# 
  3158  008E                     	;# 
  3159  0091                     	;# 
  3160  0092                     	;# 
  3161  0093                     	;# 
  3162  0095                     	;# 
  3163  0096                     	;# 
  3164  0097                     	;# 
  3165  0098                     	;# 
  3166  0099                     	;# 
  3167  009A                     	;# 
  3168  009B                     	;# 
  3169  009B                     	;# 
  3170  009C                     	;# 
  3171  009D                     	;# 
  3172  009E                     	;# 
  3173  009F                     	;# 
  3174  010C                     	;# 
  3175  010E                     	;# 
  3176  0111                     	;# 
  3177  0112                     	;# 
  3178  0113                     	;# 
  3179  0114                     	;# 
  3180  0115                     	;# 
  3181  0116                     	;# 
  3182  0117                     	;# 
  3183  0118                     	;# 
  3184  0119                     	;# 
  3185  018C                     	;# 
  3186  018E                     	;# 
  3187  0191                     	;# 
  3188  0191                     	;# 
  3189  0192                     	;# 
  3190  0193                     	;# 
  3191  0193                     	;# 
  3192  0194                     	;# 
  3193  0195                     	;# 
  3194  0196                     	;# 
  3195  0197                     	;# 
  3196  0199                     	;# 
  3197  019A                     	;# 
  3198  019B                     	;# 
  3199  019B                     	;# 
  3200  019C                     	;# 
  3201  019D                     	;# 
  3202  019E                     	;# 
  3203  019F                     	;# 
  3204  020C                     	;# 
  3205  020E                     	;# 
  3206  028C                     	;# 
  3207  028E                     	;# 
  3208  030C                     	;# 
  3209  030E                     	;# 
  3210  038C                     	;# 
  3211  038E                     	;# 
  3212  0391                     	;# 
  3213  0392                     	;# 
  3214  0393                     	;# 
  3215  0397                     	;# 
  3216  0398                     	;# 
  3217  0399                     	;# 
  3218  0691                     	;# 
  3219  0692                     	;# 
  3220  0693                     	;# 
  3221  0694                     	;# 
  3222  0695                     	;# 
  3223  0D8E                     	;# 
  3224  0D8F                     	;# 
  3225  0D90                     	;# 
  3226  0D91                     	;# 
  3227  0D91                     	;# 
  3228  0D92                     	;# 
  3229  0D93                     	;# 
  3230  0D93                     	;# 
  3231  0D94                     	;# 
  3232  0D95                     	;# 
  3233  0D95                     	;# 
  3234  0D96                     	;# 
  3235  0D97                     	;# 
  3236  0D97                     	;# 
  3237  0D98                     	;# 
  3238  0D99                     	;# 
  3239  0D99                     	;# 
  3240  0D9A                     	;# 
  3241  0D9B                     	;# 
  3242  0D9C                     	;# 
  3243  0D9C                     	;# 
  3244  0D9D                     	;# 
  3245  0D9D                     	;# 
  3246  0D9E                     	;# 
  3247  0D9F                     	;# 
  3248  0DA0                     	;# 
  3249  0DA1                     	;# 
  3250  0DA1                     	;# 
  3251  0DA2                     	;# 
  3252  0DA3                     	;# 
  3253  0DA3                     	;# 
  3254  0DA4                     	;# 
  3255  0DA5                     	;# 
  3256  0DA5                     	;# 
  3257  0DA6                     	;# 
  3258  0DA7                     	;# 
  3259  0DA7                     	;# 
  3260  0DA8                     	;# 
  3261  0DA9                     	;# 
  3262  0DA9                     	;# 
  3263  0DAA                     	;# 
  3264  0DAB                     	;# 
  3265  0DAC                     	;# 
  3266  0DAC                     	;# 
  3267  0DAD                     	;# 
  3268  0DAD                     	;# 
  3269  0DAE                     	;# 
  3270  0DAF                     	;# 
  3271  0DB0                     	;# 
  3272  0DB1                     	;# 
  3273  0DB1                     	;# 
  3274  0DB2                     	;# 
  3275  0DB3                     	;# 
  3276  0DB3                     	;# 
  3277  0DB4                     	;# 
  3278  0DB5                     	;# 
  3279  0DB5                     	;# 
  3280  0DB6                     	;# 
  3281  0DB7                     	;# 
  3282  0DB7                     	;# 
  3283  0DB8                     	;# 
  3284  0DB9                     	;# 
  3285  0DB9                     	;# 
  3286  0DBA                     	;# 
  3287  0DBB                     	;# 
  3288  0DBC                     	;# 
  3289  0DBC                     	;# 
  3290  0DBD                     	;# 
  3291  0DBD                     	;# 
  3292  0DBE                     	;# 
  3293  0DBF                     	;# 
  3294  0DC0                     	;# 
  3295  0DC1                     	;# 
  3296  0DC1                     	;# 
  3297  0DC2                     	;# 
  3298  0DC3                     	;# 
  3299  0DC3                     	;# 
  3300  0DC4                     	;# 
  3301  0DC5                     	;# 
  3302  0DC5                     	;# 
  3303  0DC6                     	;# 
  3304  0DC7                     	;# 
  3305  0DC7                     	;# 
  3306  0DC8                     	;# 
  3307  0DC9                     	;# 
  3308  0DC9                     	;# 
  3309  0DCA                     	;# 
  3310  0DCB                     	;# 
  3311  0DCC                     	;# 
  3312  0DCC                     	;# 
  3313  0DCD                     	;# 
  3314  0DCD                     	;# 
  3315  0DCE                     	;# 
  3316  0DCF                     	;# 
  3317  0DD0                     	;# 
  3318  0E0F                     	;# 
  3319  0E10                     	;# 
  3320  0E11                     	;# 
  3321  0E12                     	;# 
  3322  0E13                     	;# 
  3323  0E14                     	;# 
  3324  0E15                     	;# 
  3325  0E16                     	;# 
  3326  0E17                     	;# 
  3327  0E90                     	;# 
  3328  0E91                     	;# 
  3329  0E92                     	;# 
  3330  0E94                     	;# 
  3331  0E95                     	;# 
  3332  0EA0                     	;# 
  3333  0EA1                     	;# 
  3334  0EA2                     	;# 
  3335  0EA3                     	;# 
  3336  0EA4                     	;# 
  3337  0EA5                     	;# 
  3338  0FE4                     	;# 
  3339  0FE5                     	;# 
  3340  0FE6                     	;# 
  3341  0FE7                     	;# 
  3342  0FE8                     	;# 
  3343  0FE8                     	;# 
  3344  0FE9                     	;# 
  3345  0FEA                     	;# 
  3346  0FEA                     	;# 
  3347  0FEB                     	;# 
  3348  0FED                     	;# 
  3349  0FEE                     	;# 
  3350  0FEE                     	;# 
  3351  0FEF                     	;# 
  3352  0FFF                     	;# 
  3353  0000                     	;# 
  3354  0001                     	;# 
  3355  0002                     	;# 
  3356  0003                     	;# 
  3357  0004                     	;# 
  3358  0005                     	;# 
  3359  0006                     	;# 
  3360  0007                     	;# 
  3361  0008                     	;# 
  3362  0009                     	;# 
  3363  000A                     	;# 
  3364  000B                     	;# 
  3365  000C                     	;# 
  3366  000E                     	;# 
  3367  0011                     	;# 
  3368  0012                     	;# 
  3369  0013                     	;# 
  3370  0015                     	;# 
  3371  0016                     	;# 
  3372  0016                     	;# 
  3373  0017                     	;# 
  3374  0018                     	;# 
  3375  0019                     	;# 
  3376  001A                     	;# 
  3377  001B                     	;# 
  3378  001C                     	;# 
  3379  008C                     	;# 
  3380  008E                     	;# 
  3381  0091                     	;# 
  3382  0092                     	;# 
  3383  0093                     	;# 
  3384  0095                     	;# 
  3385  0096                     	;# 
  3386  0097                     	;# 
  3387  0098                     	;# 
  3388  0099                     	;# 
  3389  009A                     	;# 
  3390  009B                     	;# 
  3391  009B                     	;# 
  3392  009C                     	;# 
  3393  009D                     	;# 
  3394  009E                     	;# 
  3395  009F                     	;# 
  3396  010C                     	;# 
  3397  010E                     	;# 
  3398  0111                     	;# 
  3399  0112                     	;# 
  3400  0113                     	;# 
  3401  0114                     	;# 
  3402  0115                     	;# 
  3403  0116                     	;# 
  3404  0117                     	;# 
  3405  0118                     	;# 
  3406  0119                     	;# 
  3407  018C                     	;# 
  3408  018E                     	;# 
  3409  0191                     	;# 
  3410  0191                     	;# 
  3411  0192                     	;# 
  3412  0193                     	;# 
  3413  0193                     	;# 
  3414  0194                     	;# 
  3415  0195                     	;# 
  3416  0196                     	;# 
  3417  0197                     	;# 
  3418  0199                     	;# 
  3419  019A                     	;# 
  3420  019B                     	;# 
  3421  019B                     	;# 
  3422  019C                     	;# 
  3423  019D                     	;# 
  3424  019E                     	;# 
  3425  019F                     	;# 
  3426  020C                     	;# 
  3427  020E                     	;# 
  3428  028C                     	;# 
  3429  028E                     	;# 
  3430  030C                     	;# 
  3431  030E                     	;# 
  3432  038C                     	;# 
  3433  038E                     	;# 
  3434  0391                     	;# 
  3435  0392                     	;# 
  3436  0393                     	;# 
  3437  0397                     	;# 
  3438  0398                     	;# 
  3439  0399                     	;# 
  3440  0691                     	;# 
  3441  0692                     	;# 
  3442  0693                     	;# 
  3443  0694                     	;# 
  3444  0695                     	;# 
  3445  0D8E                     	;# 
  3446  0D8F                     	;# 
  3447  0D90                     	;# 
  3448  0D91                     	;# 
  3449  0D91                     	;# 
  3450  0D92                     	;# 
  3451  0D93                     	;# 
  3452  0D93                     	;# 
  3453  0D94                     	;# 
  3454  0D95                     	;# 
  3455  0D95                     	;# 
  3456  0D96                     	;# 
  3457  0D97                     	;# 
  3458  0D97                     	;# 
  3459  0D98                     	;# 
  3460  0D99                     	;# 
  3461  0D99                     	;# 
  3462  0D9A                     	;# 
  3463  0D9B                     	;# 
  3464  0D9C                     	;# 
  3465  0D9C                     	;# 
  3466  0D9D                     	;# 
  3467  0D9D                     	;# 
  3468  0D9E                     	;# 
  3469  0D9F                     	;# 
  3470  0DA0                     	;# 
  3471  0DA1                     	;# 
  3472  0DA1                     	;# 
  3473  0DA2                     	;# 
  3474  0DA3                     	;# 
  3475  0DA3                     	;# 
  3476  0DA4                     	;# 
  3477  0DA5                     	;# 
  3478  0DA5                     	;# 
  3479  0DA6                     	;# 
  3480  0DA7                     	;# 
  3481  0DA7                     	;# 
  3482  0DA8                     	;# 
  3483  0DA9                     	;# 
  3484  0DA9                     	;# 
  3485  0DAA                     	;# 
  3486  0DAB                     	;# 
  3487  0DAC                     	;# 
  3488  0DAC                     	;# 
  3489  0DAD                     	;# 
  3490  0DAD                     	;# 
  3491  0DAE                     	;# 
  3492  0DAF                     	;# 
  3493  0DB0                     	;# 
  3494  0DB1                     	;# 
  3495  0DB1                     	;# 
  3496  0DB2                     	;# 
  3497  0DB3                     	;# 
  3498  0DB3                     	;# 
  3499  0DB4                     	;# 
  3500  0DB5                     	;# 
  3501  0DB5                     	;# 
  3502  0DB6                     	;# 
  3503  0DB7                     	;# 
  3504  0DB7                     	;# 
  3505  0DB8                     	;# 
  3506  0DB9                     	;# 
  3507  0DB9                     	;# 
  3508  0DBA                     	;# 
  3509  0DBB                     	;# 
  3510  0DBC                     	;# 
  3511  0DBC                     	;# 
  3512  0DBD                     	;# 
  3513  0DBD                     	;# 
  3514  0DBE                     	;# 
  3515  0DBF                     	;# 
  3516  0DC0                     	;# 
  3517  0DC1                     	;# 
  3518  0DC1                     	;# 
  3519  0DC2                     	;# 
  3520  0DC3                     	;# 
  3521  0DC3                     	;# 
  3522  0DC4                     	;# 
  3523  0DC5                     	;# 
  3524  0DC5                     	;# 
  3525  0DC6                     	;# 
  3526  0DC7                     	;# 
  3527  0DC7                     	;# 
  3528  0DC8                     	;# 
  3529  0DC9                     	;# 
  3530  0DC9                     	;# 
  3531  0DCA                     	;# 
  3532  0DCB                     	;# 
  3533  0DCC                     	;# 
  3534  0DCC                     	;# 
  3535  0DCD                     	;# 
  3536  0DCD                     	;# 
  3537  0DCE                     	;# 
  3538  0DCF                     	;# 
  3539  0DD0                     	;# 
  3540  0E0F                     	;# 
  3541  0E10                     	;# 
  3542  0E11                     	;# 
  3543  0E12                     	;# 
  3544  0E13                     	;# 
  3545  0E14                     	;# 
  3546  0E15                     	;# 
  3547  0E16                     	;# 
  3548  0E17                     	;# 
  3549  0E90                     	;# 
  3550  0E91                     	;# 
  3551  0E92                     	;# 
  3552  0E94                     	;# 
  3553  0E95                     	;# 
  3554  0EA0                     	;# 
  3555  0EA1                     	;# 
  3556  0EA2                     	;# 
  3557  0EA3                     	;# 
  3558  0EA4                     	;# 
  3559  0EA5                     	;# 
  3560  0FE4                     	;# 
  3561  0FE5                     	;# 
  3562  0FE6                     	;# 
  3563  0FE7                     	;# 
  3564  0FE8                     	;# 
  3565  0FE8                     	;# 
  3566  0FE9                     	;# 
  3567  0FEA                     	;# 
  3568  0FEA                     	;# 
  3569  0FEB                     	;# 
  3570  0FED                     	;# 
  3571  0FEE                     	;# 
  3572  0FEE                     	;# 
  3573  0FEF                     	;# 
  3574  0FFF                     	;# 
  3575  0000                     	;# 
  3576  0001                     	;# 
  3577  0002                     	;# 
  3578  0003                     	;# 
  3579  0004                     	;# 
  3580  0005                     	;# 
  3581  0006                     	;# 
  3582  0007                     	;# 
  3583  0008                     	;# 
  3584  0009                     	;# 
  3585  000A                     	;# 
  3586  000B                     	;# 
  3587  000C                     	;# 
  3588  000E                     	;# 
  3589  0011                     	;# 
  3590  0012                     	;# 
  3591  0013                     	;# 
  3592  0015                     	;# 
  3593  0016                     	;# 
  3594  0016                     	;# 
  3595  0017                     	;# 
  3596  0018                     	;# 
  3597  0019                     	;# 
  3598  001A                     	;# 
  3599  001B                     	;# 
  3600  001C                     	;# 
  3601  008C                     	;# 
  3602  008E                     	;# 
  3603  0091                     	;# 
  3604  0092                     	;# 
  3605  0093                     	;# 
  3606  0095                     	;# 
  3607  0096                     	;# 
  3608  0097                     	;# 
  3609  0098                     	;# 
  3610  0099                     	;# 
  3611  009A                     	;# 
  3612  009B                     	;# 
  3613  009B                     	;# 
  3614  009C                     	;# 
  3615  009D                     	;# 
  3616  009E                     	;# 
  3617  009F                     	;# 
  3618  010C                     	;# 
  3619  010E                     	;# 
  3620  0111                     	;# 
  3621  0112                     	;# 
  3622  0113                     	;# 
  3623  0114                     	;# 
  3624  0115                     	;# 
  3625  0116                     	;# 
  3626  0117                     	;# 
  3627  0118                     	;# 
  3628  0119                     	;# 
  3629  018C                     	;# 
  3630  018E                     	;# 
  3631  0191                     	;# 
  3632  0191                     	;# 
  3633  0192                     	;# 
  3634  0193                     	;# 
  3635  0193                     	;# 
  3636  0194                     	;# 
  3637  0195                     	;# 
  3638  0196                     	;# 
  3639  0197                     	;# 
  3640  0199                     	;# 
  3641  019A                     	;# 
  3642  019B                     	;# 
  3643  019B                     	;# 
  3644  019C                     	;# 
  3645  019D                     	;# 
  3646  019E                     	;# 
  3647  019F                     	;# 
  3648  020C                     	;# 
  3649  020E                     	;# 
  3650  028C                     	;# 
  3651  028E                     	;# 
  3652  030C                     	;# 
  3653  030E                     	;# 
  3654  038C                     	;# 
  3655  038E                     	;# 
  3656  0391                     	;# 
  3657  0392                     	;# 
  3658  0393                     	;# 
  3659  0397                     	;# 
  3660  0398                     	;# 
  3661  0399                     	;# 
  3662  0691                     	;# 
  3663  0692                     	;# 
  3664  0693                     	;# 
  3665  0694                     	;# 
  3666  0695                     	;# 
  3667  0D8E                     	;# 
  3668  0D8F                     	;# 
  3669  0D90                     	;# 
  3670  0D91                     	;# 
  3671  0D91                     	;# 
  3672  0D92                     	;# 
  3673  0D93                     	;# 
  3674  0D93                     	;# 
  3675  0D94                     	;# 
  3676  0D95                     	;# 
  3677  0D95                     	;# 
  3678  0D96                     	;# 
  3679  0D97                     	;# 
  3680  0D97                     	;# 
  3681  0D98                     	;# 
  3682  0D99                     	;# 
  3683  0D99                     	;# 
  3684  0D9A                     	;# 
  3685  0D9B                     	;# 
  3686  0D9C                     	;# 
  3687  0D9C                     	;# 
  3688  0D9D                     	;# 
  3689  0D9D                     	;# 
  3690  0D9E                     	;# 
  3691  0D9F                     	;# 
  3692  0DA0                     	;# 
  3693  0DA1                     	;# 
  3694  0DA1                     	;# 
  3695  0DA2                     	;# 
  3696  0DA3                     	;# 
  3697  0DA3                     	;# 
  3698  0DA4                     	;# 
  3699  0DA5                     	;# 
  3700  0DA5                     	;# 
  3701  0DA6                     	;# 
  3702  0DA7                     	;# 
  3703  0DA7                     	;# 
  3704  0DA8                     	;# 
  3705  0DA9                     	;# 
  3706  0DA9                     	;# 
  3707  0DAA                     	;# 
  3708  0DAB                     	;# 
  3709  0DAC                     	;# 
  3710  0DAC                     	;# 
  3711  0DAD                     	;# 
  3712  0DAD                     	;# 
  3713  0DAE                     	;# 
  3714  0DAF                     	;# 
  3715  0DB0                     	;# 
  3716  0DB1                     	;# 
  3717  0DB1                     	;# 
  3718  0DB2                     	;# 
  3719  0DB3                     	;# 
  3720  0DB3                     	;# 
  3721  0DB4                     	;# 
  3722  0DB5                     	;# 
  3723  0DB5                     	;# 
  3724  0DB6                     	;# 
  3725  0DB7                     	;# 
  3726  0DB7                     	;# 
  3727  0DB8                     	;# 
  3728  0DB9                     	;# 
  3729  0DB9                     	;# 
  3730  0DBA                     	;# 
  3731  0DBB                     	;# 
  3732  0DBC                     	;# 
  3733  0DBC                     	;# 
  3734  0DBD                     	;# 
  3735  0DBD                     	;# 
  3736  0DBE                     	;# 
  3737  0DBF                     	;# 
  3738  0DC0                     	;# 
  3739  0DC1                     	;# 
  3740  0DC1                     	;# 
  3741  0DC2                     	;# 
  3742  0DC3                     	;# 
  3743  0DC3                     	;# 
  3744  0DC4                     	;# 
  3745  0DC5                     	;# 
  3746  0DC5                     	;# 
  3747  0DC6                     	;# 
  3748  0DC7                     	;# 
  3749  0DC7                     	;# 
  3750  0DC8                     	;# 
  3751  0DC9                     	;# 
  3752  0DC9                     	;# 
  3753  0DCA                     	;# 
  3754  0DCB                     	;# 
  3755  0DCC                     	;# 
  3756  0DCC                     	;# 
  3757  0DCD                     	;# 
  3758  0DCD                     	;# 
  3759  0DCE                     	;# 
  3760  0DCF                     	;# 
  3761  0DD0                     	;# 
  3762  0E0F                     	;# 
  3763  0E10                     	;# 
  3764  0E11                     	;# 
  3765  0E12                     	;# 
  3766  0E13                     	;# 
  3767  0E14                     	;# 
  3768  0E15                     	;# 
  3769  0E16                     	;# 
  3770  0E17                     	;# 
  3771  0E90                     	;# 
  3772  0E91                     	;# 
  3773  0E92                     	;# 
  3774  0E94                     	;# 
  3775  0E95                     	;# 
  3776  0EA0                     	;# 
  3777  0EA1                     	;# 
  3778  0EA2                     	;# 
  3779  0EA3                     	;# 
  3780  0EA4                     	;# 
  3781  0EA5                     	;# 
  3782  0FE4                     	;# 
  3783  0FE5                     	;# 
  3784  0FE6                     	;# 
  3785  0FE7                     	;# 
  3786  0FE8                     	;# 
  3787  0FE8                     	;# 
  3788  0FE9                     	;# 
  3789  0FEA                     	;# 
  3790  0FEA                     	;# 
  3791  0FEB                     	;# 
  3792  0FED                     	;# 
  3793  0FEE                     	;# 
  3794  0FEE                     	;# 
  3795  0FEF                     	;# 
  3796  0FFF                     	;_sysData
  3797                           
  3798 ;; Function _TMR2_DefaultInterruptHandler is unused but had its address taken
  3799  0000                     
  3800                           	psect	idataBANK0
  3801  07F6                     __pidataBANK0:	
  3802                           
  3803                           ;initializer for _resRc
  3804  07F6  3410               	retlw	16
  3805  07F7  3427               	retlw	39
  3806  07F8  3400               	retlw	0
  3807  07F9  3400               	retlw	0
  3808                           
  3809                           ;initializer for _resRs
  3810  07FA  3410               	retlw	16
  3811  07FB  3427               	retlw	39
  3812  07FC  3400               	retlw	0
  3813  07FD  3400               	retlw	0
  3814                           
  3815                           ;initializer for _pwm2DutyForVout
  3816  07FE  3410               	retlw	16
  3817  07FF  3400               	retlw	0
  3818                           
  3819                           	psect	idataBANK1
  3820  07C6                     __pidataBANK1:	
  3821                           
  3822                           ;initializer for _bbmax
  3823  07C6  34C0               	retlw	192
  3824  07C7  34F2               	retlw	242
  3825  07C8  34FC               	retlw	252
  3826  07C9  34FF               	retlw	255
  3827                           
  3828                           ;initializer for _bbmin
  3829  07CA  3440               	retlw	64
  3830  07CB  340D               	retlw	13
  3831  07CC  3403               	retlw	3
  3832  07CD  3400               	retlw	0
  3833                           
  3834                           ;initializer for _pidU
  3835  07CE  3414               	retlw	20
  3836  07CF  3400               	retlw	0
  3837  07D0  3400               	retlw	0
  3838  07D1  3400               	retlw	0
  3839  000B                     _INTCONbits	set	11
  3840  0011                     _PIR1bits	set	17
  3841  001B                     _PR2	set	27
  3842  001C                     _T2CON	set	28
  3843  001C                     _T2CONbits	set	28
  3844  001A                     _TMR2	set	26
  3845  005F                     _GIE	set	95
  3846  009D                     _ADCON0	set	157
  3847  009D                     _ADCON0bits	set	157
  3848  009E                     _ADCON1	set	158
  3849  009F                     _ADCON2	set	159
  3850  009C                     _ADRESH	set	156
  3851  009B                     _ADRESL	set	155
  3852  0095                     _OPTION_REGbits	set	149
  3853  0099                     _OSCCON	set	153
  3854  0098                     _OSCTUNE	set	152
  3855  0091                     _PIE1bits	set	145
  3856  008C                     _TRISA	set	140
  3857  008E                     _TRISC	set	142
  3858  0097                     _WDTCON	set	151
  3859  0117                     _FVRCON	set	279
  3860  0117                     _FVRCONbits	set	279
  3861  010C                     _LATA	set	268
  3862  010E                     _LATC	set	270
  3863  018C                     _ANSELA	set	396
  3864  018E                     _ANSELC	set	398
  3865  019F                     _BAUDCON	set	415
  3866  0192                     _PMADRH	set	402
  3867  0191                     _PMADRL	set	401
  3868  0195                     _PMCON1bits	set	405
  3869  0196                     _PMCON2	set	406
  3870  0194                     _PMDATH	set	404
  3871  0193                     _PMDATL	set	403
  3872  0199                     _RCREG	set	409
  3873  019D                     _RCSTA	set	413
  3874  019D                     _RCSTAbits	set	413
  3875  019C                     _SPBRGH	set	412
  3876  019B                     _SPBRGL	set	411
  3877  019A                     _TXREG	set	410
  3878  019E                     _TXSTA	set	414
  3879  019E                     _TXSTAbits	set	414
  3880  020C                     _WPUA	set	524
  3881  020E                     _WPUC	set	526
  3882  028C                     _ODCONA	set	652
  3883  028E                     _ODCONC	set	654
  3884  0D9E                     _PWM1CLKCON	set	3486
  3885  0D9B                     _PWM1CON	set	3483
  3886  0D9B                     _PWM1CONbits	set	3483
  3887  0D94                     _PWM1DCH	set	3476
  3888  0D93                     _PWM1DCL	set	3475
  3889  0D9C                     _PWM1INTE	set	3484
  3890  0D9D                     _PWM1INTF	set	3485
  3891  0D9F                     _PWM1LDCON	set	3487
  3892  0DA0                     _PWM1OFCON	set	3488
  3893  0D98                     _PWM1OFH	set	3480
  3894  0D97                     _PWM1OFL	set	3479
  3895  0D92                     _PWM1PHH	set	3474
  3896  0D91                     _PWM1PHL	set	3473
  3897  0D96                     _PWM1PRH	set	3478
  3898  0D95                     _PWM1PRL	set	3477
  3899  0D9A                     _PWM1TMRH	set	3482
  3900  0D99                     _PWM1TMRL	set	3481
  3901  0DAE                     _PWM2CLKCON	set	3502
  3902  0DAB                     _PWM2CON	set	3499
  3903  0DAB                     _PWM2CONbits	set	3499
  3904  0DA4                     _PWM2DCH	set	3492
  3905  0DA3                     _PWM2DCL	set	3491
  3906  0DAC                     _PWM2INTE	set	3500
  3907  0DAD                     _PWM2INTF	set	3501
  3908  0DAF                     _PWM2LDCON	set	3503
  3909  0DB0                     _PWM2OFCON	set	3504
  3910  0DA8                     _PWM2OFH	set	3496
  3911  0DA7                     _PWM2OFL	set	3495
  3912  0DA2                     _PWM2PHH	set	3490
  3913  0DA1                     _PWM2PHL	set	3489
  3914  0DA6                     _PWM2PRH	set	3494
  3915  0DA5                     _PWM2PRL	set	3493
  3916  0DAA                     _PWM2TMRH	set	3498
  3917  0DA9                     _PWM2TMRL	set	3497
  3918  0E0F                     _PPSLOCK	set	3599
  3919  0E0F                     _PPSLOCKbits	set	3599
  3920  0E15                     _RXPPSbits	set	3605
  3921  0E94                     _RA4PPSbits	set	3732
  3922  0E95                     _RA5PPSbits	set	3733
  3923  0EA5                     _RC5PPSbits	set	3749
  3924                           
  3925                           	psect	stringtext
  3926  1000                     __pstringtext:	
  3927  1000                     STR_6:	
  3928  1000  3409               	retlw	9
  3929  1001  3470               	retlw	112	;'p'
  3930  1002  3477               	retlw	119	;'w'
  3931  1003  346D               	retlw	109	;'m'
  3932  1004  343D               	retlw	61	;'='
  3933  1005  3400               	retlw	0
  3934  1006                     STR_4:	
  3935  1006  3409               	retlw	9
  3936  1007  3465               	retlw	101	;'e'
  3937  1008  3478               	retlw	120	;'x'
  3938  1009  3470               	retlw	112	;'p'
  3939  100A  343D               	retlw	61	;'='
  3940  100B  3400               	retlw	0
  3941  100C                     STR_5:	
  3942  100C  3409               	retlw	9
  3943  100D  3476               	retlw	118	;'v'
  3944  100E  346F               	retlw	111	;'o'
  3945  100F  343D               	retlw	61	;'='
  3946  1010  3400               	retlw	0
  3947  1011                     STR_2:	
  3948  1011  3409               	retlw	9
  3949  1012  3452               	retlw	82	;'R'
  3950  1013  3473               	retlw	115	;'s'
  3951  1014  343D               	retlw	61	;'='
  3952  1015  3400               	retlw	0
  3953  1016                     STR_1:	
  3954  1016  3452               	retlw	82	;'R'
  3955  1017  3463               	retlw	99	;'c'
  3956  1018  343D               	retlw	61	;'='
  3957  1019  3400               	retlw	0
  3958  101A                     STR_3:	
  3959  101A  3409               	retlw	9
  3960  101B  3469               	retlw	105	;'i'
  3961  101C  343D               	retlw	61	;'='
  3962  101D  3400               	retlw	0
  3963  101E                     STR_7:	
  3964  101E  340D               	retlw	13
  3965  101F  340A               	retlw	10
  3966  1020  3400               	retlw	0
  3967                           
  3968                           ; #config settings
  3969  0000                     
  3970                           	psect	cinit
  3971  0052                     start_initialization:	
  3972  0052                     __initialization:		;BIGRAM
  3973                           
  3974                           ; Clear objects allocated to BIGRAM
  3975  0052  3084               	movlw	132
  3976  0053  0084               	movwf	4
  3977  0054  3023               	movlw	35
  3978  0055  0085               	movwf	5
  3979  0056  305C               	movlw	92
  3980  0057  00FE               	movwf	126
  3981  0058  01FF               	clrf	127
  3982  0059  3187  27D2  3180   	fcall	clear_ram0
  3983  005C  3054               	movlw	low __pbssBANK0
  3984                           
  3985                           ; Clear objects allocated to COMMON
  3986  005D  01FC               	clrf	__pbssCOMMON& (0+127)
  3987                           
  3988                           ; Clear objects allocated to BANK0
  3989  005E  0084               	movwf	4
  3990  005F  3000               	movlw	high __pbssBANK0
  3991  0060  0085               	movwf	5
  3992  0061  3012               	movlw	18
  3993  0062  00FE               	movwf	126
  3994  0063  3000               	movlw	0
  3995  0064  00FF               	movwf	127
  3996  0065  3187  27D2  3180   	fcall	clear_ram0
  3997                           
  3998                           ; Clear objects allocated to BANK1
  3999  0068  30A0               	movlw	low __pbssBANK1
  4000  0069  0084               	movwf	4
  4001  006A  3000               	movlw	high __pbssBANK1
  4002  006B  0085               	movwf	5
  4003  006C  3044               	movlw	68
  4004  006D  00FE               	movwf	126
  4005  006E  3000               	movlw	0
  4006  006F  00FF               	movwf	127
  4007  0070  3187  27D2  3180   	fcall	clear_ram0
  4008                           
  4009                           ; Clear objects allocated to BANK2
  4010  0073  3020               	movlw	low __pbssBANK2
  4011  0074  0084               	movwf	4
  4012  0075  3001               	movlw	high __pbssBANK2
  4013  0076  0085               	movwf	5
  4014  0077  3050               	movlw	80
  4015  0078  00FE               	movwf	126
  4016  0079  3000               	movlw	0
  4017  007A  00FF               	movwf	127
  4018  007B  3187  27D2  3180   	fcall	clear_ram0
  4019                           
  4020                           ; Initialize objects allocated to BANK0
  4021  007E  30F6               	movlw	low __pidataBANK0
  4022  007F  0084               	movwf	4
  4023  0080  3087               	movlw	(high __pidataBANK0)| (0+128)
  4024  0081  0085               	movwf	5
  4025  0082  3066               	movlw	low __pdataBANK0
  4026  0083  0086               	movwf	6
  4027  0084  3000               	movlw	high __pdataBANK0
  4028  0085  0087               	movwf	7
  4029  0086  3000               	movlw	0
  4030  0087  00FF               	movwf	127
  4031  0088  300A               	movlw	10
  4032  0089  3187  27DE  3180   	fcall	init_ram
  4033                           
  4034                           ; Initialize objects allocated to BANK1
  4035  008C  30C6               	movlw	low __pidataBANK1
  4036  008D  0084               	movwf	4
  4037  008E  3087               	movlw	(high __pidataBANK1)| (0+128)
  4038  008F  0085               	movwf	5
  4039  0090  30E4               	movlw	low __pdataBANK1
  4040  0091  0086               	movwf	6
  4041  0092  3000               	movlw	high __pdataBANK1
  4042  0093  0087               	movwf	7
  4043  0094  3000               	movlw	0
  4044  0095  00FF               	movwf	127
  4045  0096  300C               	movlw	12
  4046  0097  3187  27DE  3180   	fcall	init_ram
  4047  009A                     end_of_initialization:	
  4048                           ;End of C runtime variable initialization code
  4049                           
  4050  009A                     __end_of__initialization:	
  4051  009A  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4052  009B  0020               	movlb	0
  4053  009C  289D               	ljmp	_main	;jump to C main() function
  4054  009D                     __pmaintext:	
  4055 ;;
  4056 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  4057 ;;
  4058 ;; *************** function _main *****************
  4059 ;; Defined at:
  4060 ;;		line 17 in file "src/app/main.c"
  4061 ;; Parameters:    Size  Location     Type
  4062 ;;		None
  4063 ;; Auto vars:     Size  Location     Type
  4064 ;;		None
  4065 ;; Return value:  Size  Location     Type
  4066 ;;                  1    wreg      void 
  4067 ;; Registers used:
  4068 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4069 ;; Tracked objects:
  4070 ;;		On entry : B1F/0
  4071 ;;		On exit  : 0/0
  4072 ;;		Unchanged: 0/0
  4073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4075 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4076 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  4077 ;;      Totals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  4078 ;;Total ram usage:        2 bytes
  4079 ;; Hardware stack levels required when called:    4
  4080 ;; This function calls:
  4081 ;;		_SYSTEM_Initialize
  4082 ;;		_adc_sample
  4083 ;;		_calc_expect_vout_adc_value
  4084 ;;		_calc_rs_lo_avg
  4085 ;;		_calc_temp_rc
  4086 ;;		_calc_temp_rs
  4087 ;;		_m_int_2_str_ex
  4088 ;;		_pid_pwm1_idrv_b_b
  4089 ;;		_pid_pwm1_idrv_run
  4090 ;;		_pid_pwm2_vout_run
  4091 ;;		_set_vout_pwm2_duty
  4092 ;;		_sys_data_init
  4093 ;;		_sys_data_save
  4094 ;;		_uart_send_str
  4095 ;; This function is called by:
  4096 ;;		Startup code after reset
  4097 ;; This function uses a non-reentrant model
  4098 ;;
  4099                           
  4100                           
  4101                           ;psect for function _main
  4102  009D                     _main:	
  4103                           
  4104                           ;main.c: 19: __nop();
  4105                           
  4106                           ;incstack = 0
  4107                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4108  009D  0000               	nop
  4109                           
  4110                           ;main.c: 21: SYSTEM_Initialize();
  4111  009E  22DA               	fcall	_SYSTEM_Initialize
  4112  009F  178B               	bsf	11,7	;volatile
  4113  00A0  170B               	bsf	11,6	;volatile
  4114                           
  4115                           ;main.c: 24: set_vout_pwm2_duty(10);
  4116  00A1  300A               	movlw	10
  4117  00A2  00F3               	movwf	set_vout_pwm2_duty@duty
  4118  00A3  01F4               	clrf	set_vout_pwm2_duty@duty+1
  4119  00A4  318A  22AD  3180   	fcall	_set_vout_pwm2_duty
  4120                           
  4121                           ;main.c: 25: sys_data_init();
  4122  00A7  318D  25DB  3180   	fcall	_sys_data_init
  4123                           
  4124                           ;main.c: 27: if(sysData.pidSetFlg0 != 0x55 || sysData.pidSetFlg1 != 0xaa){
  4125  00AA  2795  3180         	fcall	PL46	;call to abstracted procedure
  4126  00AC  0601               	xorwf	1,w
  4127  00AD  1D03               	btfss	3,2
  4128  00AE  28B6               	goto	l4058
  4129  00AF  3084               	movlw	132
  4130  00B0  0086               	movwf	6
  4131  00B1  30AA               	movlw	170
  4132  00B2  3141               	addfsr 1,1
  4133  00B3  0601               	xorwf	1,w
  4134  00B4  1903               	btfsc	3,2
  4135  00B5  28B8               	goto	l4060
  4136  00B6                     l4058:	
  4137                           
  4138                           ;main.c: 28: pidBbSm=0;
  4139  00B6  01E2               	clrf	_pidBbSm
  4140                           
  4141                           ;main.c: 29: }else{
  4142  00B7  28E7               	goto	l4068
  4143  00B8                     l4060:	
  4144                           
  4145                           ;main.c: 30: pidBbSm=5;
  4146  00B8  3005               	movlw	5
  4147  00B9  00E2               	movwf	_pidBbSm
  4148                           
  4149                           ;main.c: 31: PidKp=sysData.pidKp;
  4150  00BA  3084               	movlw	132
  4151  00BB  0086               	movwf	6
  4152  00BC  3023               	movlw	35
  4153  00BD  0087               	movwf	7
  4154  00BE  3144               	addfsr 1,4
  4155  00BF  2754  3180         	fcall	PL16	;call to abstracted procedure
  4156  00C1  0020               	movlb	0	; select bank0
  4157  00C2  00D4               	movwf	_PidKp
  4158  00C3  0023               	movlb	3	; select bank3
  4159  00C4  0836               	movf	(??_main+1)^(0+384),w
  4160  00C5  0020               	movlb	0	; select bank0
  4161  00C6  00D5               	movwf	_PidKp+1
  4162  00C7  3084               	movlw	132
  4163  00C8  01D6               	clrf	_PidKp+2
  4164  00C9  01D7               	clrf	_PidKp+3
  4165                           
  4166                           ;main.c: 32: PidTd=sysData.pidTd;
  4167  00CA  0086               	movwf	6
  4168  00CB  3023               	movlw	35
  4169  00CC  0087               	movwf	7
  4170  00CD  3148               	addfsr 1,8
  4171  00CE  2754  3180         	fcall	PL16	;call to abstracted procedure
  4172  00D0  0021               	movlb	1	; select bank1
  4173  00D1  00B6               	movwf	_PidTd^(0+128)
  4174  00D2  0023               	movlb	3	; select bank3
  4175  00D3  0836               	movf	(??_main+1)^(0+384),w
  4176  00D4  0021               	movlb	1	; select bank1
  4177  00D5  00B7               	movwf	(_PidTd^(0+128)+1)
  4178  00D6  3084               	movlw	132
  4179  00D7  01B8               	clrf	(_PidTd^(0+128)+2)
  4180  00D8  01B9               	clrf	(_PidTd^(0+128)+3)
  4181                           
  4182                           ;main.c: 33: PidTi=sysData.pidTi;
  4183  00D9  0086               	movwf	6
  4184  00DA  3023               	movlw	35
  4185  00DB  0087               	movwf	7
  4186  00DC  3146               	addfsr 1,6
  4187  00DD  2754  3180         	fcall	PL16	;call to abstracted procedure
  4188  00DF  0021               	movlb	1	; select bank1
  4189  00E0  00BA               	movwf	_PidTi^(0+128)
  4190  00E1  0023               	movlb	3	; select bank3
  4191  00E2  0836               	movf	(??_main+1)^(0+384),w
  4192  00E3  0021               	movlb	1	; select bank1
  4193  00E4  00BB               	movwf	(_PidTi^(0+128)+1)
  4194  00E5  01BC               	clrf	(_PidTi^(0+128)+2)
  4195  00E6  01BD               	clrf	(_PidTi^(0+128)+3)
  4196  00E7                     l4068:	
  4197                           
  4198                           ;main.c: 37: if(Event & (1<<2)){
  4199  00E7  1D7C               	btfss	_Event,2	;volatile
  4200  00E8  298E               	goto	l4104
  4201                           
  4202                           ;main.c: 38: Event &= ~(1<<2);
  4203  00E9  117C               	bcf	_Event,2	;volatile
  4204  00EA  3020               	movlw	32
  4205                           
  4206                           ;main.c: 40: rtAdcValueRsLo=adc_sample(channel_AN6,1,32);
  4207  00EB  01F3               	clrf	adc_sample@gfvr
  4208  00EC  0AF3               	incf	adc_sample@gfvr,f
  4209  00ED  00F4               	movwf	adc_sample@num
  4210  00EE  3006               	movlw	6
  4211  00EF  22A2  3180         	fcall	_adc_sample
  4212  00F1  0874               	movf	?_adc_sample+1,w
  4213  00F2  0020               	movlb	0	; select bank0
  4214  00F3  00DB               	movwf	_rtAdcValueRsLo+1
  4215  00F4  0873               	movf	?_adc_sample,w
  4216  00F5  00DA               	movwf	_rtAdcValueRsLo
  4217                           
  4218                           ;main.c: 42: rtAdcValueRsHi=adc_sample(channel_AN5,3,32);
  4219  00F6  3003               	movlw	3
  4220  00F7  00F3               	movwf	adc_sample@gfvr
  4221  00F8  3020               	movlw	32
  4222  00F9  00F4               	movwf	adc_sample@num
  4223  00FA  3005               	movlw	5
  4224  00FB  22A2  3180         	fcall	_adc_sample
  4225  00FD  0874               	movf	?_adc_sample+1,w
  4226  00FE  0021               	movlb	1	; select bank1
  4227  00FF  00E1               	movwf	(_rtAdcValueRsHi+1)^(0+128)
  4228  0100  0873               	movf	?_adc_sample,w
  4229  0101  00E0               	movwf	_rtAdcValueRsHi^(0+128)
  4230                           
  4231                           ;main.c: 45: rtAdcValueRcLo=adc_sample(channel_AN4,3,32);
  4232  0102  3003               	movlw	3
  4233  0103  00F3               	movwf	adc_sample@gfvr
  4234  0104  3020               	movlw	32
  4235  0105  00F4               	movwf	adc_sample@num
  4236  0106  3004               	movlw	4
  4237  0107  22A2  3180         	fcall	_adc_sample
  4238  0109  0874               	movf	?_adc_sample+1,w
  4239  010A  0020               	movlb	0	; select bank0
  4240  010B  00D9               	movwf	_rtAdcValueRcLo+1
  4241  010C  0873               	movf	?_adc_sample,w
  4242  010D  00D8               	movwf	_rtAdcValueRcLo
  4243  010E  3003               	movlw	3
  4244                           
  4245                           ;main.c: 46: rtAdcValueRcLo>>=1;
  4246  010F  36D9               	lsrf	_rtAdcValueRcLo+1,f
  4247  0110  0CD8               	rrf	_rtAdcValueRcLo,f
  4248                           
  4249                           ;main.c: 47: rtAdcValueRcHi=adc_sample(channel_AN2,3,32);
  4250  0111  00F3               	movwf	adc_sample@gfvr
  4251  0112  3020               	movlw	32
  4252  0113  00F4               	movwf	adc_sample@num
  4253  0114  3002               	movlw	2
  4254  0115  22A2  3180         	fcall	_adc_sample
  4255  0117  0874               	movf	?_adc_sample+1,w
  4256  0118  0021               	movlb	1	; select bank1
  4257  0119  00DF               	movwf	(_rtAdcValueRcHi+1)^(0+128)
  4258  011A  0873               	movf	?_adc_sample,w
  4259  011B  00DE               	movwf	_rtAdcValueRcHi^(0+128)
  4260  011C  3003               	movlw	3
  4261                           
  4262                           ;main.c: 48: rtAdcValueRcHi>>=1;
  4263  011D  36DF               	lsrf	(_rtAdcValueRcHi+1)^(0+128),f
  4264  011E  0CDE               	rrf	_rtAdcValueRcHi^(0+128),f
  4265                           
  4266                           ;main.c: 50: rtAdcValueVoFb=adc_sample(channel_AN7,3,32);
  4267  011F  00F3               	movwf	adc_sample@gfvr
  4268  0120  3020               	movlw	32
  4269  0121  00F4               	movwf	adc_sample@num
  4270  0122  3007               	movlw	7
  4271  0123  22A2  3180         	fcall	_adc_sample
  4272  0125  0874               	movf	?_adc_sample+1,w
  4273  0126  0021               	movlb	1	; select bank1
  4274  0127  00E3               	movwf	(_rtAdcValueVoFb+1)^(0+128)
  4275  0128  0873               	movf	?_adc_sample,w
  4276  0129  00E2               	movwf	_rtAdcValueVoFb^(0+128)
  4277                           
  4278                           ;main.c: 51: rtAdcValueVoFb>>=1;
  4279  012A  36E3               	lsrf	(_rtAdcValueVoFb+1)^(0+128),f
  4280  012B  0CE2               	rrf	_rtAdcValueVoFb^(0+128),f
  4281                           
  4282                           ;main.c: 53: resRc=calc_temp_rc();
  4283  012C  262F               	fcall	_calc_temp_rc
  4284  012D  0828               	movf	?_calc_temp_rc+3,w
  4285  012E  00E9               	movwf	_resRc+3
  4286  012F  0827               	movf	?_calc_temp_rc+2,w
  4287  0130  00E8               	movwf	_resRc+2
  4288  0131  0826               	movf	?_calc_temp_rc+1,w
  4289  0132  00E7               	movwf	_resRc+1
  4290  0133  0825               	movf	?_calc_temp_rc,w
  4291  0134  00E6               	movwf	_resRc
  4292                           
  4293                           ;main.c: 54: resRs=calc_temp_rs();
  4294  0135  3189  2152  3180   	fcall	_calc_temp_rs
  4295  0138  0828               	movf	?_calc_temp_rs+3,w
  4296  0139  00ED               	movwf	_resRs+3
  4297  013A  0827               	movf	?_calc_temp_rs+2,w
  4298  013B  00EC               	movwf	_resRs+2
  4299  013C  0826               	movf	?_calc_temp_rs+1,w
  4300  013D  00EB               	movwf	_resRs+1
  4301  013E  0825               	movf	?_calc_temp_rs,w
  4302  013F  00EA               	movwf	_resRs
  4303                           
  4304                           ;main.c: 56: __nop();
  4305  0140  0000               	nop
  4306                           
  4307                           ;main.c: 57: if(pidBbSm>=5){
  4308  0141  3005               	movlw	5
  4309  0142  0020               	movlb	0	; select bank0
  4310  0143  0262               	subwf	_pidBbSm,w
  4311  0144  1C03               	skipc
  4312  0145  296A               	goto	l4096
  4313                           
  4314                           ;main.c: 58: pid_pwm1_idrv_run();
  4315  0146  318C  240A  3180   	fcall	_pid_pwm1_idrv_run
  4316                           
  4317                           ;main.c: 61: rsLoAvg=calc_rs_lo_avg(rtAdcValueRsLo);
  4318  0149  0020               	movlb	0	; select bank0
  4319  014A  085B               	movf	_rtAdcValueRsLo+1,w
  4320  014B  00FA               	movwf	calc_rs_lo_avg@x+1
  4321  014C  085A               	movf	_rtAdcValueRsLo,w
  4322  014D  00F9               	movwf	calc_rs_lo_avg@x
  4323  014E  25E2               	fcall	_calc_rs_lo_avg
  4324  014F  087A               	movf	?_calc_rs_lo_avg+1,w
  4325  0150  0021               	movlb	1	; select bank1
  4326  0151  00DD               	movwf	(_rsLoAvg+1)^(0+128)
  4327  0152  0879               	movf	?_calc_rs_lo_avg,w
  4328  0153  00DC               	movwf	_rsLoAvg^(0+128)
  4329                           
  4330                           ;main.c: 62: voExpectMv=calc_expect_vout_adc_value(rsLoAvg);
  4331  0154  085D               	movf	(_rsLoAvg+1)^(0+128),w
  4332  0155  0020               	movlb	0	; select bank0
  4333  0156  00B3               	movwf	calc_expect_vout_adc_value@x+1
  4334  0157  0021               	movlb	1	; select bank1
  4335  0158  085C               	movf	_rsLoAvg^(0+128),w
  4336  0159  0020               	movlb	0	; select bank0
  4337  015A  00B2               	movwf	calc_expect_vout_adc_value@x
  4338  015B  318A  22C9  3180   	fcall	_calc_expect_vout_adc_value
  4339  015E  0833               	movf	?_calc_expect_vout_adc_value+1,w
  4340  015F  00DF               	movwf	_voExpectMv+1
  4341  0160  0832               	movf	?_calc_expect_vout_adc_value,w
  4342  0161  00DE               	movwf	_voExpectMv
  4343                           
  4344                           ;main.c: 63: voExpectAdcValue=(voExpectMv<<1);
  4345  0162  355E               	lslf	_voExpectMv,w
  4346  0163  00DC               	movwf	_voExpectAdcValue
  4347  0164  0D5F               	rlf	_voExpectMv+1,w
  4348  0165  00DD               	movwf	_voExpectAdcValue+1
  4349                           
  4350                           ;main.c: 64: pid_pwm2_vout_run();
  4351  0166  3189  21C8  3180   	fcall	_pid_pwm2_vout_run
  4352                           
  4353                           ;main.c: 65: }else{
  4354  0169  298E               	goto	l4104
  4355  016A                     l4096:	
  4356                           
  4357                           ;main.c: 66: pid_pwm1_idrv_b_b();
  4358  016A  2331  3180         	fcall	_pid_pwm1_idrv_b_b
  4359                           
  4360                           ;main.c: 68: if(pidBbSm>=5){
  4361  016C  3005               	movlw	5
  4362  016D  0020               	movlb	0	; select bank0
  4363  016E  0262               	subwf	_pidBbSm,w
  4364  016F  1C03               	skipc
  4365  0170  298E               	goto	l4104
  4366                           
  4367                           ;main.c: 69: sysData.pidSetFlg0 = 0x55;
  4368  0171  2795  3180         	fcall	PL46	;call to abstracted procedure
  4369  0173  3FC0               	movwi [0]fsr1
  4370                           
  4371                           ;main.c: 70: sysData.pidSetFlg1 = 0xaa;
  4372  0174  3085               	movlw	133
  4373  0175  0086               	movwf	6
  4374  0176  30AA               	movlw	170
  4375  0177  0081               	movwf	1
  4376                           
  4377                           ;main.c: 71: sysData.pidKp=PidKp;
  4378  0178  3084               	movlw	132
  4379  0179  0086               	movwf	6
  4380  017A  3144               	addfsr 1,4
  4381  017B  0854               	movf	_PidKp,w
  4382  017C  3FC0               	movwi [0]fsr1
  4383  017D  0855               	movf	_PidKp+1,w
  4384                           
  4385                           ;main.c: 72: sysData.pidTd=PidTd;
  4386  017E  2789  3180         	fcall	PL40	;call to abstracted procedure
  4387  0180  3148               	addfsr 1,8
  4388  0181  0021               	movlb	1	; select bank1
  4389  0182  0836               	movf	_PidTd^(0+128),w
  4390  0183  3FC0               	movwi [0]fsr1
  4391  0184  0837               	movf	(_PidTd+1)^(0+128),w
  4392                           
  4393                           ;main.c: 73: sysData.pidTi=PidTi;
  4394  0185  2789               	fcall	PL40	;call to abstracted procedure
  4395  0186  3146               	addfsr 1,6
  4396  0187  083A               	movf	_PidTi^(0+128),w
  4397  0188  3FC0               	movwi [0]fsr1
  4398  0189  083B               	movf	(_PidTi+1)^(0+128),w
  4399  018A  3FC1               	movwi [1]fsr1
  4400                           
  4401                           ;main.c: 74: sys_data_save();
  4402  018B  318D  25D0  3180   	fcall	_sys_data_save
  4403  018E                     l4104:	
  4404                           
  4405                           ;main.c: 75: }
  4406                           ;main.c: 76: }
  4407                           ;main.c: 78: }
  4408                           ;main.c: 80: if(Event & (1<<3)){
  4409  018E  1DFC               	btfss	_Event,3	;volatile
  4410  018F  2A0D               	goto	l4134
  4411                           
  4412                           ;main.c: 81: Event &= ~(1<<3);
  4413  0190  11FC               	bcf	_Event,3	;volatile
  4414                           
  4415                           ;main.c: 83: uart_send_str((uint8_t*)"Rc=");
  4416  0191  3016               	movlw	low (STR_1| (0+32768))
  4417  0192  00F1               	movwf	uart_send_str@str
  4418  0193  3090               	movlw	high (STR_1| (0+32768))
  4419  0194  00F2               	movwf	uart_send_str@str+1
  4420  0195  220F  3180         	fcall	_uart_send_str
  4421                           
  4422                           ;main.c: 84: m_int_2_str_ex(str,resRc,sizeof(str));
  4423  0197  0869               	movf	_resRc+3,w
  4424  0198  00B5               	movwf	m_int_2_str_ex@x+3
  4425  0199  0868               	movf	_resRc+2,w
  4426  019A  00B4               	movwf	m_int_2_str_ex@x+2
  4427  019B  0867               	movf	_resRc+1,w
  4428  019C  00B3               	movwf	m_int_2_str_ex@x+1
  4429  019D  0866               	movf	_resRc,w
  4430  019E  2783  3180         	fcall	PL38	;call to abstracted procedure
  4431  01A0  222E  3180         	fcall	_m_int_2_str_ex
  4432                           
  4433                           ;main.c: 85: uart_send_str(str);
  4434  01A2  277E  3180         	fcall	PL34	;call to abstracted procedure
  4435  01A4  220F  3180         	fcall	_uart_send_str
  4436                           
  4437                           ;main.c: 87: uart_send_str((uint8_t*)"\tRs=");
  4438  01A6  3011               	movlw	low (STR_2| (0+32768))
  4439  01A7  00F1               	movwf	uart_send_str@str
  4440  01A8  3090               	movlw	high (STR_2| (0+32768))
  4441  01A9  00F2               	movwf	uart_send_str@str+1
  4442  01AA  220F  3180         	fcall	_uart_send_str
  4443                           
  4444                           ;main.c: 88: m_int_2_str_ex(str,resRs,sizeof(str));
  4445  01AC  086D               	movf	_resRs+3,w
  4446  01AD  00B5               	movwf	m_int_2_str_ex@x+3
  4447  01AE  086C               	movf	_resRs+2,w
  4448  01AF  00B4               	movwf	m_int_2_str_ex@x+2
  4449  01B0  086B               	movf	_resRs+1,w
  4450  01B1  00B3               	movwf	m_int_2_str_ex@x+1
  4451  01B2  086A               	movf	_resRs,w
  4452  01B3  2783  3180         	fcall	PL38	;call to abstracted procedure
  4453  01B5  222E  3180         	fcall	_m_int_2_str_ex
  4454                           
  4455                           ;main.c: 89: uart_send_str(str);
  4456  01B7  277E  3180         	fcall	PL34	;call to abstracted procedure
  4457  01B9  220F  3180         	fcall	_uart_send_str
  4458                           
  4459                           ;main.c: 91: uart_send_str((uint8_t*)"\ti=");
  4460  01BB  301A               	movlw	low (STR_3| (0+32768))
  4461  01BC  00F1               	movwf	uart_send_str@str
  4462  01BD  3090               	movlw	high (STR_3| (0+32768))
  4463  01BE  00F2               	movwf	uart_send_str@str+1
  4464  01BF  220F  3180         	fcall	_uart_send_str
  4465                           
  4466                           ;main.c: 92: m_int_2_str_ex(str,rtAdcValueRsLo,sizeof(str));
  4467  01C1  085A               	movf	_rtAdcValueRsLo,w
  4468  01C2  00B2               	movwf	m_int_2_str_ex@x
  4469  01C3  085B               	movf	_rtAdcValueRsLo+1,w
  4470  01C4  274C  3180         	fcall	PL14	;call to abstracted procedure
  4471  01C6  222E  3180         	fcall	_m_int_2_str_ex
  4472                           
  4473                           ;main.c: 93: uart_send_str(str);
  4474  01C8  277E  3180         	fcall	PL34	;call to abstracted procedure
  4475  01CA  220F  3180         	fcall	_uart_send_str
  4476                           
  4477                           ;main.c: 95: uart_send_str((uint8_t*)"\texp=");
  4478  01CC  3006               	movlw	low (STR_4| (0+32768))
  4479  01CD  00F1               	movwf	uart_send_str@str
  4480  01CE  3090               	movlw	high (STR_4| (0+32768))
  4481  01CF  00F2               	movwf	uart_send_str@str+1
  4482  01D0  220F  3180         	fcall	_uart_send_str
  4483                           
  4484                           ;main.c: 96: m_int_2_str_ex(str,voExpectAdcValue,sizeof(str));
  4485  01D2  085C               	movf	_voExpectAdcValue,w
  4486  01D3  00B2               	movwf	m_int_2_str_ex@x
  4487  01D4  085D               	movf	_voExpectAdcValue+1,w
  4488  01D5  274C  3180         	fcall	PL14	;call to abstracted procedure
  4489  01D7  222E  3180         	fcall	_m_int_2_str_ex
  4490                           
  4491                           ;main.c: 97: uart_send_str(str);
  4492  01D9  277E  3180         	fcall	PL34	;call to abstracted procedure
  4493  01DB  220F  3180         	fcall	_uart_send_str
  4494                           
  4495                           ;main.c: 99: uart_send_str((uint8_t*)"\tvo=");
  4496  01DD  300C               	movlw	low (STR_5| (0+32768))
  4497  01DE  00F1               	movwf	uart_send_str@str
  4498  01DF  3090               	movlw	high (STR_5| (0+32768))
  4499  01E0  00F2               	movwf	uart_send_str@str+1
  4500  01E1  220F  3180         	fcall	_uart_send_str
  4501                           
  4502                           ;main.c: 100: m_int_2_str_ex(str,voExpectMv,sizeof(str));
  4503  01E3  085E               	movf	_voExpectMv,w
  4504  01E4  00B2               	movwf	m_int_2_str_ex@x
  4505  01E5  085F               	movf	_voExpectMv+1,w
  4506  01E6  274C  3180         	fcall	PL14	;call to abstracted procedure
  4507  01E8  222E  3180         	fcall	_m_int_2_str_ex
  4508                           
  4509                           ;main.c: 101: uart_send_str(str);
  4510  01EA  277E  3180         	fcall	PL34	;call to abstracted procedure
  4511  01EC  220F  3180         	fcall	_uart_send_str
  4512                           
  4513                           ;main.c: 103: uart_send_str((uint8_t*)"\tpwm=");
  4514  01EE  3000               	movlw	low (STR_6| (0+32768))
  4515  01EF  00F1               	movwf	uart_send_str@str
  4516  01F0  3090               	movlw	high (STR_6| (0+32768))
  4517  01F1  00F2               	movwf	uart_send_str@str+1
  4518  01F2  220F  3180         	fcall	_uart_send_str
  4519                           
  4520                           ;main.c: 104: m_int_2_str_ex(str,pwm2DutyForVout,sizeof(str));
  4521  01F4  086E               	movf	_pwm2DutyForVout,w
  4522  01F5  00B2               	movwf	m_int_2_str_ex@x
  4523  01F6  086F               	movf	_pwm2DutyForVout+1,w
  4524  01F7  00B3               	movwf	m_int_2_str_ex@x+1
  4525  01F8  0D89               	rlf	9,f
  4526  01F9  3B89               	subwfb	9,f
  4527  01FA  0989               	comf	9,f
  4528  01FB  00B4               	movwf	m_int_2_str_ex@x+2
  4529  01FC  00B5               	movwf	m_int_2_str_ex@x+3
  4530  01FD  3010               	movlw	16
  4531  01FE  00B6               	movwf	m_int_2_str_ex@ssize
  4532  01FF  3060               	movlw	(low (_str| (0+256)))& (0+255)
  4533  0200  01B7               	clrf	m_int_2_str_ex@ssize+1
  4534  0201  222E  3180         	fcall	_m_int_2_str_ex
  4535                           
  4536                           ;main.c: 105: uart_send_str(str);
  4537  0203  277E  3180         	fcall	PL34	;call to abstracted procedure
  4538  0205  220F  3180         	fcall	_uart_send_str
  4539                           
  4540                           ;main.c: 107: uart_send_str((uint8_t*)"\r\n");
  4541  0207  301E               	movlw	low (STR_7| (0+32768))
  4542  0208  00F1               	movwf	uart_send_str@str
  4543  0209  3090               	movlw	high (STR_7| (0+32768))
  4544  020A  00F2               	movwf	uart_send_str@str+1
  4545  020B  220F  3180         	fcall	_uart_send_str
  4546  020D                     l4134:	
  4547                           
  4548                           ;main.c: 109: }
  4549                           ;main.c: 122: __nop();
  4550  020D  0000               	nop
  4551  020E  28E7               	goto	l4068
  4552  020F                     __end_of_main:	
  4553  020F                     __ptext1:	
  4554 ;; *************** function _uart_send_str *****************
  4555 ;; Defined at:
  4556 ;;		line 19 in file "src/api/my_uart.c"
  4557 ;; Parameters:    Size  Location     Type
  4558 ;;  str             2    1[COMMON] PTR unsigned char 
  4559 ;;		 -> STR_7(3), STR_6(6), STR_5(5), STR_4(6), 
  4560 ;;		 -> STR_3(4), STR_2(5), str(16), STR_1(4), 
  4561 ;; Auto vars:     Size  Location     Type
  4562 ;;		None
  4563 ;; Return value:  Size  Location     Type
  4564 ;;                  1    wreg      void 
  4565 ;; Registers used:
  4566 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4567 ;; Tracked objects:
  4568 ;;		On entry : 0/0
  4569 ;;		On exit  : 1F/0
  4570 ;;		Unchanged: 0/0
  4571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4572 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4574 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4575 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4576 ;;Total ram usage:        3 bytes
  4577 ;; Hardware stack levels used:    1
  4578 ;; Hardware stack levels required when called:    1
  4579 ;; This function calls:
  4580 ;;		Nothing
  4581 ;; This function is called by:
  4582 ;;		_main
  4583 ;; This function uses a non-reentrant model
  4584 ;;
  4585                           
  4586                           
  4587                           ;psect for function _uart_send_str
  4588  020F                     _uart_send_str:	
  4589                           
  4590                           ;my_uart.c: 22: if(!TXSTAbits.TXEN)TXSTAbits.TXEN=1;
  4591                           
  4592                           ;incstack = 0
  4593                           ; Regs used in _uart_send_str: [wreg-fsr0h+status,2+status,0+pclath]
  4594  020F  0023               	movlb	3	; select bank3
  4595  0210  1E9E               	btfss	30,5	;volatile
  4596  0211  169E               	bsf	30,5	;volatile
  4597  0212                     l472:	
  4598  0212  0020               	movlb	0	; select bank0
  4599  0213  1A11               	btfsc	17,4	;volatile
  4600  0214  2A23               	goto	l3140
  4601  0215  2A12               	goto	l472
  4602  0216                     l477:	
  4603  0216  0020               	movlb	0	; select bank0
  4604  0217  1E11               	btfss	17,4	;volatile
  4605  0218  2A16               	goto	l477
  4606                           
  4607                           ;my_uart.c: 26: TXREG = *str;
  4608  0219  0871               	movf	uart_send_str@str,w
  4609  021A  0084               	movwf	4
  4610  021B  0872               	movf	uart_send_str@str+1,w
  4611  021C  0085               	movwf	5
  4612  021D  0800               	movf	0,w	;code access
  4613  021E  0023               	movlb	3	; select bank3
  4614  021F  009A               	movwf	26	;volatile
  4615                           
  4616                           ;my_uart.c: 27: str++;
  4617  0220  0AF1               	incf	uart_send_str@str,f
  4618  0221  1903               	skipnz
  4619  0222  0AF2               	incf	uart_send_str@str+1,f
  4620  0223                     l3140:	
  4621  0223  0871               	movf	uart_send_str@str,w
  4622  0224  0084               	movwf	4
  4623  0225  0872               	movf	uart_send_str@str+1,w
  4624  0226  0085               	movwf	5
  4625  0227  0012               	moviw fsr0++
  4626  0228  1D03               	btfss	3,2
  4627  0229  2A16               	goto	l477
  4628  022A                     l481:	
  4629  022A  0020               	movlb	0	; select bank0
  4630  022B  1A11               	btfsc	17,4	;volatile
  4631  022C  0008               	return
  4632  022D  2A2A               	goto	l481
  4633  022E                     __end_of_uart_send_str:	
  4634  022E                     __ptext22:	
  4635 ;; *************** function _m_int_2_str_ex *****************
  4636 ;; Defined at:
  4637 ;;		line 140 in file "src/depend/m_string.c"
  4638 ;; Parameters:    Size  Location     Type
  4639 ;;  buf             1    wreg     PTR unsigned char 
  4640 ;;		 -> str(16), 
  4641 ;;  x               4   18[BANK0 ] long 
  4642 ;;  ssize           2   22[BANK0 ] unsigned int 
  4643 ;; Auto vars:     Size  Location     Type
  4644 ;;  buf             1   33[BANK0 ] PTR unsigned char 
  4645 ;;		 -> str(16), 
  4646 ;;  t               4   28[BANK0 ] long 
  4647 ;;  i               1   34[BANK0 ] unsigned char 
  4648 ;;  sig             1   32[BANK0 ] unsigned char 
  4649 ;;  len             1    0        unsigned char 
  4650 ;; Return value:  Size  Location     Type
  4651 ;;                  1    wreg      void 
  4652 ;; Registers used:
  4653 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4654 ;; Tracked objects:
  4655 ;;		On entry : 1F/0
  4656 ;;		On exit  : 1F/0
  4657 ;;		Unchanged: 0/0
  4658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4659 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4660 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4661 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4662 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4663 ;;Total ram usage:       17 bytes
  4664 ;; Hardware stack levels used:    1
  4665 ;; Hardware stack levels required when called:    2
  4666 ;; This function calls:
  4667 ;;		___aldiv
  4668 ;;		___almod
  4669 ;;		_m_mem_cpy
  4670 ;;		_m_mem_set
  4671 ;; This function is called by:
  4672 ;;		_main
  4673 ;; This function uses a non-reentrant model
  4674 ;;
  4675                           
  4676                           
  4677                           ;psect for function _m_int_2_str_ex
  4678  022E                     _m_int_2_str_ex:	
  4679                           
  4680                           ;incstack = 0
  4681                           ; Regs used in _m_int_2_str_ex: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4682                           ;m_int_2_str_ex@buf stored from wreg
  4683  022E  00C1               	movwf	m_int_2_str_ex@buf
  4684                           
  4685                           ;m_string.c: 142: int32_t t;
  4686                           ;m_string.c: 143: uint8_t len,i;
  4687                           ;m_string.c: 144: uint8_t sig=0;
  4688  022F  01C0               	clrf	m_int_2_str_ex@sig
  4689                           
  4690                           ;m_string.c: 145: if(x<0){
  4691  0230  1FB5               	btfss	m_int_2_str_ex@x+3,7
  4692  0231  2A48               	goto	l4012
  4693                           
  4694                           ;m_string.c: 146: sig=1;
  4695  0232  01C0               	clrf	m_int_2_str_ex@sig
  4696  0233  0AC0               	incf	m_int_2_str_ex@sig,f
  4697                           
  4698                           ;m_string.c: 147: x=0-x;
  4699  0234  01B8               	clrf	??_m_int_2_str_ex
  4700  0235  01B9               	clrf	??_m_int_2_str_ex+1
  4701  0236  01BA               	clrf	??_m_int_2_str_ex+2
  4702  0237  01BB               	clrf	??_m_int_2_str_ex+3
  4703  0238  0832               	movf	m_int_2_str_ex@x,w
  4704  0239  02B8               	subwf	??_m_int_2_str_ex,f
  4705  023A  0833               	movf	m_int_2_str_ex@x+1,w
  4706  023B  3BB9               	subwfb	??_m_int_2_str_ex+1,f
  4707  023C  0834               	movf	m_int_2_str_ex@x+2,w
  4708  023D  3BBA               	subwfb	??_m_int_2_str_ex+2,f
  4709  023E  0835               	movf	m_int_2_str_ex@x+3,w
  4710  023F  3BBB               	subwfb	??_m_int_2_str_ex+3,f
  4711  0240  083B               	movf	??_m_int_2_str_ex+3,w
  4712  0241  00B5               	movwf	m_int_2_str_ex@x+3
  4713  0242  083A               	movf	??_m_int_2_str_ex+2,w
  4714  0243  00B4               	movwf	m_int_2_str_ex@x+2
  4715  0244  0839               	movf	??_m_int_2_str_ex+1,w
  4716  0245  00B3               	movwf	m_int_2_str_ex@x+1
  4717  0246  0838               	movf	??_m_int_2_str_ex,w
  4718  0247  00B2               	movwf	m_int_2_str_ex@x
  4719  0248                     l4012:	
  4720                           
  4721                           ;m_string.c: 148: }
  4722                           ;m_string.c: 149: m_mem_set(buf,0,ssize);
  4723  0248  01F1               	clrf	m_mem_set@x
  4724  0249  0837               	movf	m_int_2_str_ex@ssize+1,w
  4725  024A  00F3               	movwf	m_mem_set@len+1
  4726  024B  0836               	movf	m_int_2_str_ex@ssize,w
  4727  024C  00F2               	movwf	m_mem_set@len
  4728  024D  0841               	movf	m_int_2_str_ex@buf,w
  4729  024E  2710  3180         	fcall	_m_mem_set
  4730                           
  4731                           ;m_string.c: 150: for(i=ssize-2;i>=1;i--){
  4732  0250  0836               	movf	m_int_2_str_ex@ssize,w
  4733  0251  3EFE               	addlw	254
  4734  0252  00C2               	movwf	m_int_2_str_ex@i
  4735  0253                     l4016:	
  4736  0253  0842               	movf	m_int_2_str_ex@i,w
  4737  0254  1903               	btfsc	3,2
  4738  0255  2A92               	goto	l4034
  4739                           
  4740                           ;m_string.c: 151: t=x%10;
  4741  0256  300A               	movlw	10
  4742  0257  00F1               	movwf	___almod@divisor
  4743  0258  01F2               	clrf	___almod@divisor+1
  4744  0259  01F3               	clrf	___almod@divisor+2
  4745  025A  01F4               	clrf	___almod@divisor+3
  4746  025B  0835               	movf	m_int_2_str_ex@x+3,w
  4747  025C  00F8               	movwf	___almod@dividend+3
  4748  025D  0834               	movf	m_int_2_str_ex@x+2,w
  4749  025E  00F7               	movwf	___almod@dividend+2
  4750  025F  0833               	movf	m_int_2_str_ex@x+1,w
  4751  0260  00F6               	movwf	___almod@dividend+1
  4752  0261  0832               	movf	m_int_2_str_ex@x,w
  4753  0262  00F5               	movwf	___almod@dividend
  4754  0263  3188  20F2  3180   	fcall	___almod
  4755  0266  0874               	movf	?___almod+3,w
  4756  0267  00BF               	movwf	m_int_2_str_ex@t+3
  4757  0268  0873               	movf	?___almod+2,w
  4758  0269  00BE               	movwf	m_int_2_str_ex@t+2
  4759  026A  0872               	movf	?___almod+1,w
  4760  026B  00BD               	movwf	m_int_2_str_ex@t+1
  4761  026C  0871               	movf	?___almod,w
  4762  026D  00BC               	movwf	m_int_2_str_ex@t
  4763                           
  4764                           ;m_string.c: 152: buf[i]=(uint8_t)t+'0';
  4765  026E  2771  3180         	fcall	PL30	;call to abstracted procedure
  4766  0270  083C               	movf	m_int_2_str_ex@t,w
  4767  0271  3E30               	addlw	48
  4768  0272  0081               	movwf	1
  4769                           
  4770                           ;m_string.c: 153: x/=10;
  4771  0273  300A               	movlw	10
  4772  0274  00A4               	movwf	___aldiv@divisor
  4773  0275  01A5               	clrf	___aldiv@divisor+1
  4774  0276  01A6               	clrf	___aldiv@divisor+2
  4775  0277  01A7               	clrf	___aldiv@divisor+3
  4776  0278  0835               	movf	m_int_2_str_ex@x+3,w
  4777  0279  00AB               	movwf	___aldiv@dividend+3
  4778  027A  0834               	movf	m_int_2_str_ex@x+2,w
  4779  027B  00AA               	movwf	___aldiv@dividend+2
  4780  027C  0833               	movf	m_int_2_str_ex@x+1,w
  4781  027D  00A9               	movwf	___aldiv@dividend+1
  4782  027E  0832               	movf	m_int_2_str_ex@x,w
  4783  027F  00A8               	movwf	___aldiv@dividend
  4784  0280  24FC  3180         	fcall	___aldiv
  4785  0282  0827               	movf	?___aldiv+3,w
  4786  0283  00B5               	movwf	m_int_2_str_ex@x+3
  4787  0284  0826               	movf	?___aldiv+2,w
  4788  0285  00B4               	movwf	m_int_2_str_ex@x+2
  4789  0286  0825               	movf	?___aldiv+1,w
  4790  0287  00B3               	movwf	m_int_2_str_ex@x+1
  4791  0288  0824               	movf	?___aldiv,w
  4792  0289  00B2               	movwf	m_int_2_str_ex@x
  4793                           
  4794                           ;m_string.c: 154: if(x==0)break;
  4795  028A  0835               	movf	m_int_2_str_ex@x+3,w
  4796  028B  0434               	iorwf	m_int_2_str_ex@x+2,w
  4797  028C  0433               	iorwf	m_int_2_str_ex@x+1,w
  4798  028D  0432               	iorwf	m_int_2_str_ex@x,w
  4799  028E  1903               	btfsc	3,2
  4800  028F  2A92               	goto	l4034
  4801  0290  03C2               	decf	m_int_2_str_ex@i,f
  4802  0291  2A53               	goto	l4016
  4803  0292                     l4034:	
  4804                           
  4805                           ;m_string.c: 155: }
  4806                           ;m_string.c: 156: if(sig){
  4807  0292  0840               	movf	m_int_2_str_ex@sig,w
  4808  0293  1903               	btfsc	3,2
  4809  0294  2A9D               	goto	l4042
  4810                           
  4811                           ;m_string.c: 157: if(i>0)buf[i]='-';
  4812  0295  0842               	movf	m_int_2_str_ex@i,w
  4813  0296  1903               	btfsc	3,2
  4814  0297  2A9C               	goto	l4040
  4815  0298  2771  3180         	fcall	PL30	;call to abstracted procedure
  4816  029A  302D               	movlw	45
  4817  029B  0081               	movwf	1
  4818  029C                     l4040:	
  4819                           
  4820                           ;m_string.c: 158: i--;
  4821  029C  03C2               	decf	m_int_2_str_ex@i,f
  4822  029D                     l4042:	
  4823                           
  4824                           ;m_string.c: 159: }
  4825                           ;m_string.c: 160: m_mem_cpy(buf,buf+i);
  4826  029D  0841               	movf	m_int_2_str_ex@buf,w
  4827  029E  0742               	addwf	m_int_2_str_ex@i,w
  4828  029F  00F1               	movwf	m_mem_cpy@s
  4829  02A0  0841               	movf	m_int_2_str_ex@buf,w
  4830  02A1  2FAD               	ljmp	_m_mem_cpy
  4831  02A2                     __end_of_m_int_2_str_ex:	
  4832  02A2                     __ptext33:	
  4833 ;; *************** function _adc_sample *****************
  4834 ;; Defined at:
  4835 ;;		line 127 in file "src/api/sample.c"
  4836 ;; Parameters:    Size  Location     Type
  4837 ;;  ch              1    wreg     unsigned char 
  4838 ;;  gfvr            1    3[COMMON] unsigned char 
  4839 ;;  num             1    4[COMMON] unsigned char 
  4840 ;; Auto vars:     Size  Location     Type
  4841 ;;  ch              1    6[COMMON] unsigned char 
  4842 ;;  t16             2   10[COMMON] unsigned int 
  4843 ;;  ret             2    7[COMMON] unsigned int 
  4844 ;;  i               1    9[COMMON] unsigned char 
  4845 ;; Return value:  Size  Location     Type
  4846 ;;                  2    3[COMMON] unsigned int 
  4847 ;; Registers used:
  4848 ;;		wreg, status,2, status,0, pclath, cstack
  4849 ;; Tracked objects:
  4850 ;;		On entry : 0/0
  4851 ;;		On exit  : 0/0
  4852 ;;		Unchanged: 0/0
  4853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4854 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4855 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4856 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4857 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4858 ;;Total ram usage:        9 bytes
  4859 ;; Hardware stack levels used:    1
  4860 ;; Hardware stack levels required when called:    2
  4861 ;; This function calls:
  4862 ;;		_adc_init
  4863 ;;		_fvr_set_gain
  4864 ;; This function is called by:
  4865 ;;		_main
  4866 ;; This function uses a non-reentrant model
  4867 ;;
  4868                           
  4869                           
  4870                           ;psect for function _adc_sample
  4871  02A2                     _adc_sample:	
  4872                           
  4873                           ;incstack = 0
  4874                           ; Regs used in _adc_sample: [wreg+status,2+status,0+pclath+cstack]
  4875                           ;adc_sample@ch stored from wreg
  4876  02A2  00F6               	movwf	adc_sample@ch
  4877                           
  4878                           ;sample.c: 129: uint8_t i;
  4879                           ;sample.c: 130: uint16_t ret=0;
  4880  02A3  01F7               	clrf	adc_sample@ret
  4881  02A4  01F8               	clrf	adc_sample@ret+1
  4882                           
  4883                           ;sample.c: 133: fvr_set_gain(gfvr);
  4884  02A5  0873               	movf	adc_sample@gfvr,w
  4885  02A6  25D1  3180         	fcall	_fvr_set_gain
  4886                           
  4887                           ;sample.c: 134: adc_init((adc_channel_t)ch);
  4888  02A8  0876               	movf	adc_sample@ch,w
  4889  02A9  25C2  3180         	fcall	_adc_init
  4890                           
  4891                           ;sample.c: 135: _delay((unsigned long)((10)*(16000000/4000000.0)));
  4892  02AB  300D               	movlw	13
  4893  02AC  00F5               	movwf	??_adc_sample
  4894  02AD                     u2767:	
  4895  02AD  0BF5               	decfsz	??_adc_sample,f
  4896  02AE  2AAD               	goto	u2767
  4897                           
  4898                           ;sample.c: 136: if(num>64)num=64;
  4899  02AF  3041               	movlw	65
  4900  02B0  0274               	subwf	adc_sample@num,w
  4901  02B1  1C03               	skipc
  4902  02B2  2AB5               	goto	l3154
  4903  02B3  3040               	movlw	64
  4904  02B4  00F4               	movwf	adc_sample@num
  4905  02B5                     l3154:	
  4906                           
  4907                           ;sample.c: 137: for(i=0;i<num;i++){
  4908  02B5  01F9               	clrf	adc_sample@i
  4909  02B6                     l3162:	
  4910  02B6  0874               	movf	adc_sample@num,w
  4911  02B7  0279               	subwf	adc_sample@i,w
  4912  02B8  1803               	btfsc	3,0
  4913  02B9  2AD5               	goto	l3164
  4914                           
  4915                           ;sample.c: 138: ADCON0bits.GO_nDONE = 1;
  4916  02BA  0021               	movlb	1	; select bank1
  4917  02BB  149D               	bsf	29,1	;volatile
  4918  02BC                     l606:	
  4919                           ;sample.c: 139: while (ADCON0bits.GO_nDONE);
  4920                           
  4921  02BC  189D               	btfsc	29,1	;volatile
  4922  02BD  2ABC               	goto	l606
  4923                           
  4924                           ;sample.c: 140: __nop();
  4925  02BE  0000               	nop
  4926                           
  4927                           ;sample.c: 141: t16=ADRESH;
  4928  02BF  0021               	movlb	1	; select bank1
  4929  02C0  081C               	movf	28,w	;volatile
  4930  02C1  00FA               	movwf	adc_sample@t16
  4931  02C2  01FB               	clrf	adc_sample@t16+1
  4932                           
  4933                           ;sample.c: 142: t16<<=2;
  4934  02C3  35FA               	lslf	adc_sample@t16,f
  4935  02C4  0DFB               	rlf	adc_sample@t16+1,f
  4936  02C5  35FA               	lslf	adc_sample@t16,f
  4937  02C6  0DFB               	rlf	adc_sample@t16+1,f
  4938                           
  4939                           ;sample.c: 143: t16|=(ADRESL>>6);
  4940  02C7  081B               	movf	27,w	;volatile
  4941  02C8  00F5               	movwf	??_adc_sample
  4942  02C9  3006               	movlw	6
  4943  02CA                     u1765:	
  4944  02CA  36F5               	lsrf	??_adc_sample,f
  4945  02CB  0B89               	decfsz	9,f
  4946  02CC  2ACA               	goto	u1765
  4947  02CD  0875               	movf	??_adc_sample,w
  4948  02CE  04FA               	iorwf	adc_sample@t16,f
  4949                           
  4950                           ;sample.c: 145: ret+=t16;
  4951  02CF  087A               	movf	adc_sample@t16,w
  4952  02D0  07F7               	addwf	adc_sample@ret,f
  4953  02D1  087B               	movf	adc_sample@t16+1,w
  4954  02D2  3DF8               	addwfc	adc_sample@ret+1,f
  4955  02D3  0AF9               	incf	adc_sample@i,f
  4956  02D4  2AB6               	goto	l3162
  4957  02D5                     l3164:	
  4958                           
  4959                           ;sample.c: 150: return ret;
  4960  02D5  0878               	movf	adc_sample@ret+1,w
  4961  02D6  00F4               	movwf	?_adc_sample+1
  4962  02D7  0877               	movf	adc_sample@ret,w
  4963  02D8  00F3               	movwf	?_adc_sample
  4964  02D9  0008               	return
  4965  02DA                     __end_of_adc_sample:	
  4966  02DA                     __ptext36:	
  4967 ;; *************** function _SYSTEM_Initialize *****************
  4968 ;; Defined at:
  4969 ;;		line 68 in file "mcc_generated_files/mcc.c"
  4970 ;; Parameters:    Size  Location     Type
  4971 ;;		None
  4972 ;; Auto vars:     Size  Location     Type
  4973 ;;		None
  4974 ;; Return value:  Size  Location     Type
  4975 ;;                  1    wreg      void 
  4976 ;; Registers used:
  4977 ;;		wreg, status,2, status,0, pclath, cstack
  4978 ;; Tracked objects:
  4979 ;;		On entry : 0/0
  4980 ;;		On exit  : 1F/1
  4981 ;;		Unchanged: 0/0
  4982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4987 ;;Total ram usage:        0 bytes
  4988 ;; Hardware stack levels used:    1
  4989 ;; Hardware stack levels required when called:    3
  4990 ;; This function calls:
  4991 ;;		_ADC1_Initialize
  4992 ;;		_EUSART_Initialize
  4993 ;;		_FVR_Initialize
  4994 ;;		_OSCILLATOR_Initialize
  4995 ;;		_PIN_MANAGER_Initialize
  4996 ;;		_PWM1_Initialize
  4997 ;;		_PWM2_Initialize
  4998 ;;		_TMR2_Initialize
  4999 ;;		_WDT_Initialize
  5000 ;; This function is called by:
  5001 ;;		_main
  5002 ;; This function uses a non-reentrant model
  5003 ;;
  5004                           
  5005                           
  5006                           ;psect for function _SYSTEM_Initialize
  5007  02DA                     _SYSTEM_Initialize:	
  5008                           
  5009                           ;mcc.c: 71: PIN_MANAGER_Initialize();
  5010                           
  5011                           ;incstack = 0
  5012                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5013  02DA  22F8  3180         	fcall	_PIN_MANAGER_Initialize
  5014                           
  5015                           ;mcc.c: 72: OSCILLATOR_Initialize();
  5016  02DC  22F3  3180         	fcall	_OSCILLATOR_Initialize
  5017                           
  5018                           ;mcc.c: 73: WDT_Initialize();
  5019  02DE  25BF  3180         	fcall	_WDT_Initialize
  5020                           
  5021                           ;mcc.c: 74: FVR_Initialize();
  5022  02E0  22EF  3180         	fcall	_FVR_Initialize
  5023                           
  5024                           ;mcc.c: 75: PWM1_Initialize();
  5025  02E2  2590  3180         	fcall	_PWM1_Initialize
  5026                           
  5027                           ;mcc.c: 76: PWM2_Initialize();
  5028  02E4  25A8  3180         	fcall	_PWM2_Initialize
  5029                           
  5030                           ;mcc.c: 77: ADC1_Initialize();
  5031  02E6  22EB  3180         	fcall	_ADC1_Initialize
  5032                           
  5033                           ;mcc.c: 78: TMR2_Initialize();
  5034  02E8  279A  3180         	fcall	_TMR2_Initialize
  5035                           
  5036                           ;mcc.c: 79: EUSART_Initialize();
  5037  02EA  2F22               	ljmp	l2762
  5038  02EB                     __end_of_SYSTEM_Initialize:	
  5039  02EB                     __ptext47:	
  5040 ;; *************** function _ADC1_Initialize *****************
  5041 ;; Defined at:
  5042 ;;		line 64 in file "mcc_generated_files/adc1.c"
  5043 ;; Parameters:    Size  Location     Type
  5044 ;;		None
  5045 ;; Auto vars:     Size  Location     Type
  5046 ;;		None
  5047 ;; Return value:  Size  Location     Type
  5048 ;;                  1    wreg      void 
  5049 ;; Registers used:
  5050 ;;		wreg, status,2
  5051 ;; Tracked objects:
  5052 ;;		On entry : 1F/1B
  5053 ;;		On exit  : 1F/1
  5054 ;;		Unchanged: 0/0
  5055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5059 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5060 ;;Total ram usage:        0 bytes
  5061 ;; Hardware stack levels used:    1
  5062 ;; Hardware stack levels required when called:    1
  5063 ;; This function calls:
  5064 ;;		Nothing
  5065 ;; This function is called by:
  5066 ;;		_SYSTEM_Initialize
  5067 ;; This function uses a non-reentrant model
  5068 ;;
  5069                           
  5070                           
  5071                           ;psect for function _ADC1_Initialize
  5072  02EB                     _ADC1_Initialize:	
  5073                           
  5074                           ;adc1.c: 69: ADCON0 = 0x01;
  5075                           
  5076                           ;incstack = 0
  5077                           ; Regs used in _ADC1_Initialize: [wreg+status,2]
  5078  02EB  3001               	movlw	1
  5079  02EC  0021               	movlb	1	; select bank1
  5080  02ED  009D               	movwf	29	;volatile
  5081                           
  5082                           ;adc1.c: 72: ADCON1 = 0x63;
  5083                           
  5084                           ;adc1.c: 75: ADCON2 = 0x00;
  5085                           
  5086                           ;adc1.c: 78: ADRESL = 0x00;
  5087                           
  5088                           ;adc1.c: 81: ADRESH = 0x00;
  5089  02EE  2F78               	ljmp	PL32	;call to abstracted procedure
  5090  02EF                     __end_of_ADC1_Initialize:	
  5091  02EF                     __ptext45:	
  5092 ;; *************** function _FVR_Initialize *****************
  5093 ;; Defined at:
  5094 ;;		line 57 in file "mcc_generated_files/fvr.c"
  5095 ;; Parameters:    Size  Location     Type
  5096 ;;		None
  5097 ;; Auto vars:     Size  Location     Type
  5098 ;;		None
  5099 ;; Return value:  Size  Location     Type
  5100 ;;                  1    wreg      void 
  5101 ;; Registers used:
  5102 ;;		wreg
  5103 ;; Tracked objects:
  5104 ;;		On entry : 1F/1
  5105 ;;		On exit  : 1F/2
  5106 ;;		Unchanged: 0/0
  5107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5111 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5112 ;;Total ram usage:        0 bytes
  5113 ;; Hardware stack levels used:    1
  5114 ;; Hardware stack levels required when called:    1
  5115 ;; This function calls:
  5116 ;;		Nothing
  5117 ;; This function is called by:
  5118 ;;		_SYSTEM_Initialize
  5119 ;; This function uses a non-reentrant model
  5120 ;;
  5121                           
  5122                           
  5123                           ;psect for function _FVR_Initialize
  5124  02EF                     _FVR_Initialize:	
  5125                           
  5126                           ;fvr.c: 60: FVRCON = 0x81;
  5127                           
  5128                           ;incstack = 0
  5129                           ; Regs used in _FVR_Initialize: [wreg]
  5130  02EF  3081               	movlw	129
  5131  02F0  0022               	movlb	2	; select bank2
  5132  02F1  0097               	movwf	23	;volatile
  5133  02F2  0008               	return
  5134  02F3                     __end_of_FVR_Initialize:	
  5135  02F3                     __ptext44:	
  5136 ;; *************** function _OSCILLATOR_Initialize *****************
  5137 ;; Defined at:
  5138 ;;		line 82 in file "mcc_generated_files/mcc.c"
  5139 ;; Parameters:    Size  Location     Type
  5140 ;;		None
  5141 ;; Auto vars:     Size  Location     Type
  5142 ;;		None
  5143 ;; Return value:  Size  Location     Type
  5144 ;;                  1    wreg      void 
  5145 ;; Registers used:
  5146 ;;		wreg, status,2
  5147 ;; Tracked objects:
  5148 ;;		On entry : 0/0
  5149 ;;		On exit  : 1F/1
  5150 ;;		Unchanged: 0/0
  5151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5155 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5156 ;;Total ram usage:        0 bytes
  5157 ;; Hardware stack levels used:    1
  5158 ;; Hardware stack levels required when called:    1
  5159 ;; This function calls:
  5160 ;;		Nothing
  5161 ;; This function is called by:
  5162 ;;		_SYSTEM_Initialize
  5163 ;; This function uses a non-reentrant model
  5164 ;;
  5165                           
  5166                           
  5167                           ;psect for function _OSCILLATOR_Initialize
  5168  02F3                     _OSCILLATOR_Initialize:	
  5169                           
  5170                           ;mcc.c: 85: OSCCON = 0x78;
  5171                           
  5172                           ;incstack = 0
  5173                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  5174  02F3  3078               	movlw	120
  5175  02F4  0021               	movlb	1	; select bank1
  5176  02F5  0099               	movwf	25	;volatile
  5177                           
  5178                           ;mcc.c: 87: OSCTUNE = 0x00;
  5179  02F6  0198               	clrf	24	;volatile
  5180  02F7  0008               	return
  5181  02F8                     __end_of_OSCILLATOR_Initialize:	
  5182  02F8                     __ptext43:	
  5183 ;; *************** function _PIN_MANAGER_Initialize *****************
  5184 ;; Defined at:
  5185 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  5186 ;; Parameters:    Size  Location     Type
  5187 ;;		None
  5188 ;; Auto vars:     Size  Location     Type
  5189 ;;  state           1    1[COMMON] unsigned char 
  5190 ;; Return value:  Size  Location     Type
  5191 ;;                  1    wreg      void 
  5192 ;; Registers used:
  5193 ;;		wreg, status,2, status,0
  5194 ;; Tracked objects:
  5195 ;;		On entry : 0/0
  5196 ;;		On exit  : 0/0
  5197 ;;		Unchanged: 0/0
  5198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5200 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5202 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5203 ;;Total ram usage:        1 bytes
  5204 ;; Hardware stack levels used:    1
  5205 ;; Hardware stack levels required when called:    1
  5206 ;; This function calls:
  5207 ;;		Nothing
  5208 ;; This function is called by:
  5209 ;;		_SYSTEM_Initialize
  5210 ;; This function uses a non-reentrant model
  5211 ;;
  5212                           
  5213                           
  5214                           ;psect for function _PIN_MANAGER_Initialize
  5215  02F8                     _PIN_MANAGER_Initialize:	
  5216                           
  5217                           ;pin_manager.c: 57: LATA = 0x00;
  5218                           
  5219                           ;incstack = 0
  5220                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
  5221  02F8  0022               	movlb	2	; select bank2
  5222  02F9  018C               	clrf	12	;volatile
  5223                           
  5224                           ;pin_manager.c: 58: LATC = 0x00;
  5225  02FA  018E               	clrf	14	;volatile
  5226                           
  5227                           ;pin_manager.c: 63: TRISA = 0x0F;
  5228  02FB  300F               	movlw	15
  5229  02FC  0021               	movlb	1	; select bank1
  5230  02FD  008C               	movwf	12	;volatile
  5231                           
  5232                           ;pin_manager.c: 64: TRISC = 0x1f;
  5233  02FE  301F               	movlw	31
  5234  02FF  008E               	movwf	14	;volatile
  5235                           
  5236                           ;pin_manager.c: 69: ANSELC = 0x0F;
  5237  0300  300F               	movlw	15
  5238  0301  0023               	movlb	3	; select bank3
  5239  0302  008E               	movwf	14	;volatile
  5240                           
  5241                           ;pin_manager.c: 70: ANSELA = 0x17;
  5242  0303  3017               	movlw	23
  5243  0304  008C               	movwf	12	;volatile
  5244                           
  5245                           ;pin_manager.c: 75: WPUA = 0x3B;
  5246  0305  303B               	movlw	59
  5247  0306  0024               	movlb	4	; select bank4
  5248  0307  008C               	movwf	12	;volatile
  5249                           
  5250                           ;pin_manager.c: 76: WPUC = 0x30;
  5251  0308  3030               	movlw	48
  5252  0309  008E               	movwf	14	;volatile
  5253                           
  5254                           ;pin_manager.c: 77: OPTION_REGbits.nWPUEN = 0;
  5255  030A  0021               	movlb	1	; select bank1
  5256  030B  1395               	bcf	21,7	;volatile
  5257                           
  5258                           ;pin_manager.c: 82: ODCONA = 0x00;
  5259  030C  0025               	movlb	5	; select bank5
  5260  030D  018C               	clrf	12	;volatile
  5261                           
  5262                           ;pin_manager.c: 83: ODCONC = 0x00;
  5263  030E  018E               	clrf	14	;volatile
  5264                           
  5265                           ;pin_manager.c: 90: bool state = (unsigned char)GIE;
  5266  030F  3000               	movlw	0
  5267  0310  1B8B               	btfsc	11,7	;volatile
  5268  0311  3001               	movlw	1
  5269  0312  00F1               	movwf	PIN_MANAGER_Initialize@state
  5270                           
  5271                           ;pin_manager.c: 91: GIE = 0;
  5272  0313  138B               	bcf	11,7	;volatile
  5273                           
  5274                           ;pin_manager.c: 92: PPSLOCK = 0x55;
  5275                           
  5276                           ;pin_manager.c: 93: PPSLOCK = 0xAA;
  5277  0314  278F  3180         	fcall	PL42	;call to abstracted procedure
  5278                           
  5279                           ;pin_manager.c: 94: PPSLOCKbits.PPSLOCKED = 0x00;
  5280  0316  100F               	bcf	15,0	;volatile
  5281                           
  5282                           ;pin_manager.c: 96: RXPPSbits.RXPPS = 0x14;
  5283  0317  0815               	movf	21,w	;volatile
  5284  0318  39E0               	andlw	-32
  5285  0319  3814               	iorlw	20
  5286  031A  0095               	movwf	21	;volatile
  5287                           
  5288                           ;pin_manager.c: 97: RA4PPSbits.RA4PPS = 0x04;
  5289  031B  003D               	movlb	29	; select bank29
  5290  031C  0814               	movf	20,w	;volatile
  5291  031D  39F0               	andlw	-16
  5292  031E  3804               	iorlw	4
  5293  031F  0094               	movwf	20	;volatile
  5294                           
  5295                           ;pin_manager.c: 98: RA5PPSbits.RA5PPS = 0x03;
  5296  0320  0815               	movf	21,w	;volatile
  5297  0321  39F0               	andlw	-16
  5298  0322  3803               	iorlw	3
  5299  0323  0095               	movwf	21	;volatile
  5300                           
  5301                           ;pin_manager.c: 99: RC5PPSbits.RC5PPS = 0x09;
  5302  0324  0825               	movf	37,w	;volatile
  5303  0325  39F0               	andlw	-16
  5304  0326  3809               	iorlw	9
  5305  0327  00A5               	movwf	37	;volatile
  5306                           
  5307                           ;pin_manager.c: 101: PPSLOCK = 0x55;
  5308                           
  5309                           ;pin_manager.c: 102: PPSLOCK = 0xAA;
  5310  0328  278F  3180         	fcall	PL42	;call to abstracted procedure
  5311                           
  5312                           ;pin_manager.c: 103: PPSLOCKbits.PPSLOCKED = 0x01;
  5313  032A  140F               	bsf	15,0	;volatile
  5314                           
  5315                           ;pin_manager.c: 105: GIE = state;
  5316  032B  1C71               	btfss	PIN_MANAGER_Initialize@state,0
  5317  032C  2B2F               	goto	u1190
  5318  032D  178B               	bsf	11,7	;volatile
  5319  032E  0008               	return
  5320  032F                     u1190:	
  5321  032F  138B               	bcf	11,7	;volatile
  5322  0330  0008               	return
  5323  0331                     __end_of_PIN_MANAGER_Initialize:	
  5324  0331                     __ptext19:	
  5325 ;; *************** function _pid_pwm1_idrv_b_b *****************
  5326 ;; Defined at:
  5327 ;;		line 217 in file "src/api/sample.c"
  5328 ;; Parameters:    Size  Location     Type
  5329 ;;		None
  5330 ;; Auto vars:     Size  Location     Type
  5331 ;;  t32             4   18[BANK0 ] long 
  5332 ;; Return value:  Size  Location     Type
  5333 ;;                  1    wreg      void 
  5334 ;; Registers used:
  5335 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5336 ;; Tracked objects:
  5337 ;;		On entry : 1F/0
  5338 ;;		On exit  : 1E/0
  5339 ;;		Unchanged: 0/0
  5340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5342 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5343 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5344 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5345 ;;Total ram usage:        5 bytes
  5346 ;; Hardware stack levels used:    1
  5347 ;; Hardware stack levels required when called:    3
  5348 ;; This function calls:
  5349 ;;		___aldiv
  5350 ;;		___lmul
  5351 ;;		_set_idrv_pwm1_duty
  5352 ;; This function is called by:
  5353 ;;		_main
  5354 ;; This function uses a non-reentrant model
  5355 ;;
  5356                           
  5357                           
  5358                           ;psect for function _pid_pwm1_idrv_b_b
  5359  0331                     _pid_pwm1_idrv_b_b:	
  5360                           
  5361                           ;sample.c: 219: int32_t t32;
  5362                           ;sample.c: 220: t32=(resRs-resRc);
  5363                           
  5364                           ;incstack = 0
  5365                           ; Regs used in _pid_pwm1_idrv_b_b: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5366  0331  086D               	movf	_resRs+3,w
  5367  0332  00B5               	movwf	pid_pwm1_idrv_b_b@t32+3
  5368  0333  086C               	movf	_resRs+2,w
  5369  0334  00B4               	movwf	pid_pwm1_idrv_b_b@t32+2
  5370  0335  086B               	movf	_resRs+1,w
  5371  0336  00B3               	movwf	pid_pwm1_idrv_b_b@t32+1
  5372  0337  086A               	movf	_resRs,w
  5373  0338  00B2               	movwf	pid_pwm1_idrv_b_b@t32
  5374  0339  0866               	movf	_resRc,w
  5375  033A  02B2               	subwf	pid_pwm1_idrv_b_b@t32,f
  5376  033B  0867               	movf	_resRc+1,w
  5377  033C  3BB3               	subwfb	pid_pwm1_idrv_b_b@t32+1,f
  5378  033D  0868               	movf	_resRc+2,w
  5379  033E  3BB4               	subwfb	pid_pwm1_idrv_b_b@t32+2,f
  5380  033F  0869               	movf	_resRc+3,w
  5381  0340  3BB5               	subwfb	pid_pwm1_idrv_b_b@t32+3,f
  5382                           
  5383                           ;sample.c: 221: switch(pidBbSm){
  5384  0341  2C94               	goto	l3840
  5385  0342                     l3794:	
  5386                           
  5387                           ;sample.c: 224: case 1:
  5388                           ;sample.c: 225: pidTestNum=0;
  5389  0342  01E3               	clrf	_pidTestNum
  5390  0343                     l3796:	
  5391                           
  5392                           ;sample.c: 226: set_idrv_pwm1_duty(1200);
  5393  0343  30B0               	movlw	176
  5394  0344  00F3               	movwf	set_idrv_pwm1_duty@duty
  5395  0345  3004               	movlw	4
  5396  0346  00F4               	movwf	set_idrv_pwm1_duty@duty+1
  5397  0347  318D  259C  3180   	fcall	_set_idrv_pwm1_duty
  5398                           
  5399                           ;sample.c: 227: pidBbSm=2;
  5400  034A  3002               	movlw	2
  5401  034B  2C91               	goto	L6
  5402  034C                     l3800:	
  5403                           ;sample.c: 228: break;
  5404                           
  5405                           
  5406                           ;sample.c: 230: if(t32>4500){
  5407  034C  1BB5               	btfsc	pid_pwm1_idrv_b_b@t32+3,7
  5408  034D  2C9E               	goto	l3842
  5409  034E  0835               	movf	pid_pwm1_idrv_b_b@t32+3,w
  5410  034F  1D03               	btfss	3,2
  5411  0350  2B5A               	goto	l3802
  5412  0351  0834               	movf	pid_pwm1_idrv_b_b@t32+2,w
  5413  0352  1D03               	btfss	3,2
  5414  0353  2B5A               	goto	l3802
  5415  0354  3095               	movlw	149
  5416  0355  0232               	subwf	pid_pwm1_idrv_b_b@t32,w
  5417  0356  3011               	movlw	17
  5418  0357  3B33               	subwfb	pid_pwm1_idrv_b_b@t32+1,w
  5419  0358  1C03               	btfss	3,0
  5420  0359  2C9E               	goto	l3842
  5421  035A                     l3802:	
  5422                           
  5423                           ;sample.c: 231: set_idrv_pwm1_duty(5);
  5424  035A  3005               	movlw	5
  5425  035B  00F3               	movwf	set_idrv_pwm1_duty@duty
  5426  035C  01F4               	clrf	set_idrv_pwm1_duty@duty+1
  5427  035D  318D  259C  3180   	fcall	_set_idrv_pwm1_duty
  5428                           
  5429                           ;sample.c: 232: pidBbSm=3;
  5430  0360  3003               	movlw	3
  5431  0361  2C91               	goto	L6
  5432  0362                     l3806:	
  5433                           ;sample.c: 233: break;
  5434                           
  5435                           
  5436                           ;sample.c: 237: if(t32<1500){
  5437  0362  1BB5               	btfsc	pid_pwm1_idrv_b_b@t32+3,7
  5438  0363  2B70               	goto	l3808
  5439  0364  0835               	movf	pid_pwm1_idrv_b_b@t32+3,w
  5440  0365  1D03               	btfss	3,2
  5441  0366  2C9E               	goto	l3842
  5442  0367  0834               	movf	pid_pwm1_idrv_b_b@t32+2,w
  5443  0368  1D03               	btfss	3,2
  5444  0369  2C9E               	goto	l3842
  5445  036A  30DC               	movlw	220
  5446  036B  0232               	subwf	pid_pwm1_idrv_b_b@t32,w
  5447  036C  3005               	movlw	5
  5448  036D  3B33               	subwfb	pid_pwm1_idrv_b_b@t32+1,w
  5449  036E  1803               	btfsc	3,0
  5450  036F  2C9E               	goto	l3842
  5451  0370                     l3808:	
  5452                           
  5453                           ;sample.c: 238: bbt0=bbt1;
  5454  0370  0021               	movlb	1	; select bank1
  5455  0371  0849               	movf	(_bbt1+3)^(0+128),w
  5456  0372  00C5               	movwf	(_bbt0+3)^(0+128)
  5457  0373  0848               	movf	(_bbt1+2)^(0+128),w
  5458  0374  00C4               	movwf	(_bbt0+2)^(0+128)
  5459  0375  0847               	movf	(_bbt1+1)^(0+128),w
  5460  0376  00C3               	movwf	(_bbt0+1)^(0+128)
  5461  0377  0846               	movf	_bbt1^(0+128),w
  5462  0378  00C2               	movwf	_bbt0^(0+128)
  5463                           
  5464                           ;sample.c: 239: bbt1=globalTicker;
  5465  0379  0859               	movf	(_globalTicker+3)^(0+128),w	;volatile
  5466  037A  00C9               	movwf	(_bbt1+3)^(0+128)
  5467  037B  0858               	movf	(_globalTicker+2)^(0+128),w	;volatile
  5468  037C  00C8               	movwf	(_bbt1+2)^(0+128)
  5469  037D  0857               	movf	(_globalTicker+1)^(0+128),w	;volatile
  5470  037E  00C7               	movwf	(_bbt1+1)^(0+128)
  5471  037F  0856               	movf	_globalTicker^(0+128),w	;volatile
  5472  0380  00C6               	movwf	_bbt1^(0+128)
  5473                           
  5474                           ;sample.c: 240: pidTestNum++;
  5475  0381  0020               	movlb	0	; select bank0
  5476  0382  3005               	movlw	5
  5477  0383  0AE3               	incf	_pidTestNum,f
  5478                           
  5479                           ;sample.c: 241: if(pidTestNum>4){
  5480  0384  0263               	subwf	_pidTestNum,w
  5481  0385  1C03               	skipc
  5482  0386  2B43               	goto	l3796
  5483                           
  5484                           ;sample.c: 242: pidBbSm=4;
  5485  0387  3004               	movlw	4
  5486  0388  2C92               	goto	L5
  5487  0389                     l3820:	
  5488                           ;sample.c: 243: break;
  5489                           
  5490                           
  5491                           ;sample.c: 251: bbtu=bbt1-bbt0;
  5492  0389  0021               	movlb	1	; select bank1
  5493  038A  0849               	movf	(_bbt1+3)^(0+128),w
  5494  038B  00D1               	movwf	(_bbtu+3)^(0+128)
  5495  038C  0848               	movf	(_bbt1+2)^(0+128),w
  5496  038D  00D0               	movwf	(_bbtu+2)^(0+128)
  5497  038E  0847               	movf	(_bbt1+1)^(0+128),w
  5498  038F  00CF               	movwf	(_bbtu+1)^(0+128)
  5499  0390  0846               	movf	_bbt1^(0+128),w
  5500  0391  00CE               	movwf	_bbtu^(0+128)
  5501  0392  0842               	movf	_bbt0^(0+128),w
  5502  0393  02CE               	subwf	_bbtu^(0+128),f
  5503  0394  0843               	movf	(_bbt0+1)^(0+128),w
  5504  0395  3BCF               	subwfb	(_bbtu+1)^(0+128),f
  5505  0396  0844               	movf	(_bbt0+2)^(0+128),w
  5506  0397  3BD0               	subwfb	(_bbtu+2)^(0+128),f
  5507  0398  0845               	movf	(_bbt0+3)^(0+128),w
  5508  0399  3BD1               	subwfb	(_bbtu+3)^(0+128),f
  5509                           
  5510                           ;sample.c: 252: bbtu=bbtu/5;
  5511  039A  3005               	movlw	5
  5512  039B  0020               	movlb	0	; select bank0
  5513  039C  00A4               	movwf	___aldiv@divisor
  5514  039D  01A5               	clrf	___aldiv@divisor+1
  5515  039E  2739  3180         	fcall	PL10	;call to abstracted procedure
  5516  03A0  24FC  3180         	fcall	___aldiv
  5517  03A2  0827               	movf	?___aldiv+3,w
  5518  03A3  0021               	movlb	1	; select bank1
  5519  03A4  00D1               	movwf	(_bbtu+3)^(0+128)
  5520  03A5  0020               	movlb	0	; select bank0
  5521  03A6  0826               	movf	?___aldiv+2,w
  5522  03A7  0021               	movlb	1	; select bank1
  5523  03A8  00D0               	movwf	(_bbtu+2)^(0+128)
  5524  03A9  0020               	movlb	0	; select bank0
  5525  03AA  0825               	movf	?___aldiv+1,w
  5526  03AB  0021               	movlb	1	; select bank1
  5527  03AC  00CF               	movwf	(_bbtu+1)^(0+128)
  5528  03AD  0020               	movlb	0	; select bank0
  5529  03AE  0824               	movf	?___aldiv,w
  5530  03AF  0021               	movlb	1	; select bank1
  5531  03B0  00CE               	movwf	_bbtu^(0+128)
  5532                           
  5533                           ;sample.c: 253: bbta=(bbmax-bbmin)/2;
  5534  03B1  0867               	movf	(_bbmax+3)^(0+128),w
  5535  03B2  0020               	movlb	0	; select bank0
  5536  03B3  00AB               	movwf	___aldiv@dividend+3
  5537  03B4  0021               	movlb	1	; select bank1
  5538  03B5  0866               	movf	(_bbmax+2)^(0+128),w
  5539  03B6  0020               	movlb	0	; select bank0
  5540  03B7  00AA               	movwf	___aldiv@dividend+2
  5541  03B8  0021               	movlb	1	; select bank1
  5542  03B9  0865               	movf	(_bbmax+1)^(0+128),w
  5543  03BA  0020               	movlb	0	; select bank0
  5544  03BB  00A9               	movwf	___aldiv@dividend+1
  5545  03BC  0021               	movlb	1	; select bank1
  5546  03BD  0864               	movf	_bbmax^(0+128),w
  5547  03BE  0020               	movlb	0	; select bank0
  5548  03BF  00A8               	movwf	___aldiv@dividend
  5549  03C0  0021               	movlb	1	; select bank1
  5550  03C1  0868               	movf	_bbmin^(0+128),w
  5551  03C2  0020               	movlb	0	; select bank0
  5552  03C3  02A8               	subwf	___aldiv@dividend,f
  5553  03C4  0021               	movlb	1	; select bank1
  5554  03C5  0869               	movf	(_bbmin+1)^(0+128),w
  5555  03C6  0020               	movlb	0	; select bank0
  5556  03C7  3BA9               	subwfb	___aldiv@dividend+1,f
  5557  03C8  0021               	movlb	1	; select bank1
  5558  03C9  086A               	movf	(_bbmin+2)^(0+128),w
  5559  03CA  0020               	movlb	0	; select bank0
  5560  03CB  3BAA               	subwfb	___aldiv@dividend+2,f
  5561  03CC  0021               	movlb	1	; select bank1
  5562  03CD  086B               	movf	(_bbmin+3)^(0+128),w
  5563  03CE  0020               	movlb	0	; select bank0
  5564  03CF  3BAB               	subwfb	___aldiv@dividend+3,f
  5565  03D0  3002               	movlw	2
  5566  03D1  00A4               	movwf	___aldiv@divisor
  5567  03D2  01A5               	clrf	___aldiv@divisor+1
  5568  03D3  01A6               	clrf	___aldiv@divisor+2
  5569  03D4  01A7               	clrf	___aldiv@divisor+3
  5570  03D5  24FC  3180         	fcall	___aldiv
  5571  03D7  0827               	movf	?___aldiv+3,w
  5572  03D8  0021               	movlb	1	; select bank1
  5573  03D9  00CD               	movwf	(_bbta+3)^(0+128)
  5574  03DA  0020               	movlb	0	; select bank0
  5575  03DB  0826               	movf	?___aldiv+2,w
  5576  03DC  0021               	movlb	1	; select bank1
  5577  03DD  00CC               	movwf	(_bbta+2)^(0+128)
  5578  03DE  0020               	movlb	0	; select bank0
  5579  03DF  0825               	movf	?___aldiv+1,w
  5580  03E0  0021               	movlb	1	; select bank1
  5581  03E1  00CB               	movwf	(_bbta+1)^(0+128)
  5582  03E2  0020               	movlb	0	; select bank0
  5583  03E3  0824               	movf	?___aldiv,w
  5584  03E4  0021               	movlb	1	; select bank1
  5585  03E5  00CA               	movwf	_bbta^(0+128)
  5586                           
  5587                           ;sample.c: 254: bbu=(1200-5)/2;
  5588  03E6  3002               	movlw	2
  5589  03E7  01D5               	clrf	(_bbu+3)^(0+128)
  5590  03E8  01D4               	clrf	(_bbu+2)^(0+128)
  5591  03E9  00D3               	movwf	(_bbu+1)^(0+128)
  5592  03EA  3055               	movlw	85
  5593  03EB  00D2               	movwf	_bbu^(0+128)
  5594                           
  5595                           ;sample.c: 256: bbku=(bbu*40000)/(bbta*314);
  5596  03EC  084D               	movf	(_bbta+3)^(0+128),w
  5597  03ED  00F4               	movwf	___lmul@multiplier+3
  5598  03EE  084C               	movf	(_bbta+2)^(0+128),w
  5599  03EF  00F3               	movwf	___lmul@multiplier+2
  5600  03F0  084B               	movf	(_bbta+1)^(0+128),w
  5601  03F1  00F2               	movwf	___lmul@multiplier+1
  5602  03F2  084A               	movf	_bbta^(0+128),w
  5603  03F3  00F1               	movwf	___lmul@multiplier
  5604  03F4  3001               	movlw	1
  5605  03F5  01F8               	clrf	___lmul@multiplicand+3
  5606  03F6  01F7               	clrf	___lmul@multiplicand+2
  5607  03F7  00F6               	movwf	___lmul@multiplicand+1
  5608  03F8  303A               	movlw	58
  5609  03F9  00F5               	movwf	___lmul@multiplicand
  5610  03FA  2568  3180         	fcall	___lmul
  5611  03FC  0874               	movf	?___lmul+3,w
  5612  03FD  00A7               	movwf	___aldiv@divisor+3
  5613  03FE  0873               	movf	?___lmul+2,w
  5614  03FF  00A6               	movwf	___aldiv@divisor+2
  5615  0400  0872               	movf	?___lmul+1,w
  5616  0401  00A5               	movwf	___aldiv@divisor+1
  5617  0402  0871               	movf	?___lmul,w
  5618  0403  00A4               	movwf	___aldiv@divisor
  5619  0404  3002               	movlw	2
  5620  0405  01F4               	clrf	___lmul@multiplier+3
  5621  0406  01F3               	clrf	___lmul@multiplier+2
  5622  0407  00F2               	movwf	___lmul@multiplier+1
  5623  0408  3055               	movlw	85
  5624  0409  00F1               	movwf	___lmul@multiplier
  5625  040A  309C               	movlw	156
  5626  040B  01F8               	clrf	___lmul@multiplicand+3
  5627  040C  01F7               	clrf	___lmul@multiplicand+2
  5628  040D  00F6               	movwf	___lmul@multiplicand+1
  5629  040E  3040               	movlw	64
  5630  040F  00F5               	movwf	___lmul@multiplicand
  5631  0410  2568  3180         	fcall	___lmul
  5632  0412  2730  3180         	fcall	PL6	;call to abstracted procedure
  5633  0414  24FC  3180         	fcall	___aldiv
  5634  0416  0827               	movf	?___aldiv+3,w
  5635  0417  0021               	movlb	1	; select bank1
  5636  0418  00C1               	movwf	(_bbku+3)^(0+128)
  5637  0419  0020               	movlb	0	; select bank0
  5638  041A  0826               	movf	?___aldiv+2,w
  5639  041B  0021               	movlb	1	; select bank1
  5640  041C  00C0               	movwf	(_bbku+2)^(0+128)
  5641  041D  0020               	movlb	0	; select bank0
  5642  041E  0825               	movf	?___aldiv+1,w
  5643  041F  0021               	movlb	1	; select bank1
  5644  0420  00BF               	movwf	(_bbku+1)^(0+128)
  5645  0421  0020               	movlb	0	; select bank0
  5646  0422  0824               	movf	?___aldiv,w
  5647  0423  0021               	movlb	1	; select bank1
  5648  0424  00BE               	movwf	_bbku^(0+128)
  5649                           
  5650                           ;sample.c: 257: bbku*=100;
  5651  0425  3064               	movlw	100
  5652  0426  00F1               	movwf	___lmul@multiplier
  5653  0427  01F2               	clrf	___lmul@multiplier+1
  5654  0428  01F3               	clrf	___lmul@multiplier+2
  5655  0429  01F4               	clrf	___lmul@multiplier+3
  5656  042A  0841               	movf	(_bbku+3)^(0+128),w
  5657  042B  00F8               	movwf	___lmul@multiplicand+3
  5658  042C  0840               	movf	(_bbku+2)^(0+128),w
  5659  042D  00F7               	movwf	___lmul@multiplicand+2
  5660  042E  083F               	movf	(_bbku+1)^(0+128),w
  5661  042F  00F6               	movwf	___lmul@multiplicand+1
  5662  0430  083E               	movf	_bbku^(0+128),w
  5663  0431  00F5               	movwf	___lmul@multiplicand
  5664  0432  2568  3180         	fcall	___lmul
  5665  0434  0874               	movf	?___lmul+3,w
  5666  0435  0021               	movlb	1	; select bank1
  5667  0436  00C1               	movwf	(_bbku+3)^(0+128)
  5668  0437  0873               	movf	?___lmul+2,w
  5669  0438  00C0               	movwf	(_bbku+2)^(0+128)
  5670  0439  0872               	movf	?___lmul+1,w
  5671  043A  00BF               	movwf	(_bbku+1)^(0+128)
  5672  043B  0871               	movf	?___lmul,w
  5673  043C  00BE               	movwf	_bbku^(0+128)
  5674                           
  5675                           ;sample.c: 259: PidKp=bbku*10/14;
  5676  043D  300E               	movlw	14
  5677  043E  0020               	movlb	0	; select bank0
  5678  043F  275B  3180         	fcall	PL18	;call to abstracted procedure
  5679  0441  0841               	movf	(_bbku+3)^(0+128),w
  5680  0442  00F4               	movwf	___lmul@multiplier+3
  5681  0443  0840               	movf	(_bbku+2)^(0+128),w
  5682  0444  00F3               	movwf	___lmul@multiplier+2
  5683  0445  083F               	movf	(_bbku+1)^(0+128),w
  5684  0446  00F2               	movwf	___lmul@multiplier+1
  5685  0447  083E               	movf	_bbku^(0+128),w
  5686  0448  276A  3180         	fcall	PL28	;call to abstracted procedure
  5687  044A  2568  3180         	fcall	___lmul
  5688  044C  2730  3180         	fcall	PL6	;call to abstracted procedure
  5689  044E  24FC  3180         	fcall	___aldiv
  5690  0450  0827               	movf	?___aldiv+3,w
  5691  0451  00D7               	movwf	_PidKp+3
  5692  0452  0826               	movf	?___aldiv+2,w
  5693  0453  00D6               	movwf	_PidKp+2
  5694  0454  0825               	movf	?___aldiv+1,w
  5695  0455  00D5               	movwf	_PidKp+1
  5696  0456  0824               	movf	?___aldiv,w
  5697  0457  00D4               	movwf	_PidKp
  5698                           
  5699                           ;sample.c: 260: PidTi=bbtu*10/20;
  5700  0458  3014               	movlw	20
  5701  0459  275B  3180         	fcall	PL18	;call to abstracted procedure
  5702  045B  0851               	movf	(_bbtu+3)^(0+128),w
  5703  045C  00F4               	movwf	___lmul@multiplier+3
  5704  045D  0850               	movf	(_bbtu+2)^(0+128),w
  5705  045E  00F3               	movwf	___lmul@multiplier+2
  5706  045F  084F               	movf	(_bbtu+1)^(0+128),w
  5707  0460  00F2               	movwf	___lmul@multiplier+1
  5708  0461  084E               	movf	_bbtu^(0+128),w
  5709  0462  276A  3180         	fcall	PL28	;call to abstracted procedure
  5710  0464  2568  3180         	fcall	___lmul
  5711  0466  2730  3180         	fcall	PL6	;call to abstracted procedure
  5712  0468  24FC  3180         	fcall	___aldiv
  5713  046A  0827               	movf	?___aldiv+3,w
  5714  046B  0021               	movlb	1	; select bank1
  5715  046C  00BD               	movwf	(_PidTi+3)^(0+128)
  5716  046D  0020               	movlb	0	; select bank0
  5717  046E  0826               	movf	?___aldiv+2,w
  5718  046F  0021               	movlb	1	; select bank1
  5719  0470  00BC               	movwf	(_PidTi+2)^(0+128)
  5720  0471  0020               	movlb	0	; select bank0
  5721  0472  0825               	movf	?___aldiv+1,w
  5722  0473  0021               	movlb	1	; select bank1
  5723  0474  00BB               	movwf	(_PidTi+1)^(0+128)
  5724  0475  0020               	movlb	0	; select bank0
  5725  0476  0824               	movf	?___aldiv,w
  5726  0477  0021               	movlb	1	; select bank1
  5727  0478  00BA               	movwf	_PidTi^(0+128)
  5728                           
  5729                           ;sample.c: 261: PidTd=bbtu/8;
  5730  0479  3008               	movlw	8
  5731  047A  0020               	movlb	0	; select bank0
  5732  047B  00A4               	movwf	___aldiv@divisor
  5733  047C  01A5               	clrf	___aldiv@divisor+1
  5734  047D  2739  3180         	fcall	PL10	;call to abstracted procedure
  5735  047F  24FC  3180         	fcall	___aldiv
  5736  0481  0827               	movf	?___aldiv+3,w
  5737  0482  0021               	movlb	1	; select bank1
  5738  0483  00B9               	movwf	(_PidTd+3)^(0+128)
  5739  0484  0020               	movlb	0	; select bank0
  5740  0485  0826               	movf	?___aldiv+2,w
  5741  0486  0021               	movlb	1	; select bank1
  5742  0487  00B8               	movwf	(_PidTd+2)^(0+128)
  5743  0488  0020               	movlb	0	; select bank0
  5744  0489  0825               	movf	?___aldiv+1,w
  5745  048A  0021               	movlb	1	; select bank1
  5746  048B  00B7               	movwf	(_PidTd+1)^(0+128)
  5747  048C  0020               	movlb	0	; select bank0
  5748  048D  0824               	movf	?___aldiv,w
  5749  048E  0021               	movlb	1	; select bank1
  5750  048F  00B6               	movwf	_PidTd^(0+128)
  5751                           
  5752                           ;sample.c: 262: pidBbSm=5;
  5753  0490  3005               	movlw	5
  5754  0491                     L6:	
  5755  0491  0020               	movlb	0	; select bank0
  5756  0492                     L5:	
  5757  0492  00E2               	movwf	_pidBbSm
  5758                           
  5759                           ;sample.c: 263: break;
  5760  0493  2C9E               	goto	l3842
  5761  0494                     l3840:	
  5762  0494  0862               	movf	_pidBbSm,w
  5763                           
  5764                           ; Switch size 1, requested type "space"
  5765                           ; Number of cases is 6, Range of values is 0 to 5
  5766                           ; switch strategies available:
  5767                           ; Name         Instructions Cycles
  5768                           ; direct_byte           18     6 (fixed)
  5769                           ; simple_byte           19    10 (average)
  5770                           ; jumptable            260     6 (fixed)
  5771                           ;	Chosen strategy is direct_byte
  5772  0495  0084               	movwf	4
  5773  0496  3006               	movlw	6
  5774  0497  0204               	subwf	4,w
  5775  0498  1803               	skipnc
  5776  0499  2C9E               	goto	l3842
  5777  049A  3187               	movlp	high S4156
  5778  049B  3504               	lslf	4,w
  5779  049C  3EEA               	addlw	low S4156
  5780  049D  0082               	movwf	2
  5781  049E                     l3842:	
  5782                           
  5783                           ;sample.c: 265: if(pidTestNum>2){
  5784  049E  3003               	movlw	3
  5785  049F  0263               	subwf	_pidTestNum,w
  5786  04A0  1C03               	skipc
  5787  04A1  0008               	return
  5788                           
  5789                           ;sample.c: 266: if(bbmax<t32)bbmax=t32;
  5790  04A2  0021               	movlb	1	; select bank1
  5791  04A3  0867               	movf	(_bbmax+3)^(0+128),w
  5792  04A4  3A80               	xorlw	128
  5793  04A5  00F9               	movwf	??_pid_pwm1_idrv_b_b
  5794  04A6  0020               	movlb	0	; select bank0
  5795  04A7  0835               	movf	pid_pwm1_idrv_b_b@t32+3,w
  5796  04A8  3A80               	xorlw	128
  5797  04A9  0279               	subwf	??_pid_pwm1_idrv_b_b,w
  5798  04AA  0021               	movlb	1	; select bank1
  5799  04AB  1D03               	skipz
  5800  04AC  2CBD               	goto	u2503
  5801  04AD  0020               	movlb	0	; select bank0
  5802  04AE  0834               	movf	pid_pwm1_idrv_b_b@t32+2,w
  5803  04AF  0021               	movlb	1	; select bank1
  5804  04B0  0266               	subwf	(_bbmax+2)^(0+128),w
  5805  04B1  1D03               	skipz
  5806  04B2  2CBD               	goto	u2503
  5807  04B3  0020               	movlb	0	; select bank0
  5808  04B4  0833               	movf	pid_pwm1_idrv_b_b@t32+1,w
  5809  04B5  0021               	movlb	1	; select bank1
  5810  04B6  0265               	subwf	(_bbmax+1)^(0+128),w
  5811  04B7  1D03               	skipz
  5812  04B8  2CBD               	goto	u2503
  5813  04B9  0020               	movlb	0	; select bank0
  5814  04BA  0832               	movf	pid_pwm1_idrv_b_b@t32,w
  5815  04BB  0021               	movlb	1	; select bank1
  5816  04BC  0264               	subwf	_bbmax^(0+128),w
  5817  04BD                     u2503:	
  5818  04BD  1803               	skipnc
  5819  04BE  2CCF               	goto	l654
  5820  04BF  0020               	movlb	0	; select bank0
  5821  04C0  0835               	movf	pid_pwm1_idrv_b_b@t32+3,w
  5822  04C1  0021               	movlb	1	; select bank1
  5823  04C2  00E7               	movwf	(_bbmax+3)^(0+128)
  5824  04C3  0020               	movlb	0	; select bank0
  5825  04C4  0834               	movf	pid_pwm1_idrv_b_b@t32+2,w
  5826  04C5  0021               	movlb	1	; select bank1
  5827  04C6  00E6               	movwf	(_bbmax+2)^(0+128)
  5828  04C7  0020               	movlb	0	; select bank0
  5829  04C8  0833               	movf	pid_pwm1_idrv_b_b@t32+1,w
  5830  04C9  0021               	movlb	1	; select bank1
  5831  04CA  00E5               	movwf	(_bbmax+1)^(0+128)
  5832  04CB  0020               	movlb	0	; select bank0
  5833  04CC  0832               	movf	pid_pwm1_idrv_b_b@t32,w
  5834  04CD  0021               	movlb	1	; select bank1
  5835  04CE  00E4               	movwf	_bbmax^(0+128)
  5836  04CF                     l654:	
  5837                           
  5838                           ;sample.c: 267: if(bbmin>t32)bbmin=t32;
  5839  04CF  0020               	movlb	0	; select bank0
  5840  04D0  0835               	movf	pid_pwm1_idrv_b_b@t32+3,w
  5841  04D1  3A80               	xorlw	128
  5842  04D2  00F9               	movwf	??_pid_pwm1_idrv_b_b
  5843  04D3  0021               	movlb	1	; select bank1
  5844  04D4  086B               	movf	(_bbmin+3)^(0+128),w
  5845  04D5  3A80               	xorlw	128
  5846  04D6  0279               	subwf	??_pid_pwm1_idrv_b_b,w
  5847  04D7  0020               	movlb	0	; select bank0
  5848  04D8  1D03               	skipz
  5849  04D9  2CEA               	goto	u2513
  5850  04DA  0021               	movlb	1	; select bank1
  5851  04DB  086A               	movf	(_bbmin+2)^(0+128),w
  5852  04DC  0020               	movlb	0	; select bank0
  5853  04DD  0234               	subwf	pid_pwm1_idrv_b_b@t32+2,w
  5854  04DE  1D03               	skipz
  5855  04DF  2CEA               	goto	u2513
  5856  04E0  0021               	movlb	1	; select bank1
  5857  04E1  0869               	movf	(_bbmin+1)^(0+128),w
  5858  04E2  0020               	movlb	0	; select bank0
  5859  04E3  0233               	subwf	pid_pwm1_idrv_b_b@t32+1,w
  5860  04E4  1D03               	skipz
  5861  04E5  2CEA               	goto	u2513
  5862  04E6  0021               	movlb	1	; select bank1
  5863  04E7  0868               	movf	_bbmin^(0+128),w
  5864  04E8  0020               	movlb	0	; select bank0
  5865  04E9  0232               	subwf	pid_pwm1_idrv_b_b@t32,w
  5866  04EA                     u2513:	
  5867  04EA  1803               	skipnc
  5868  04EB  0008               	return
  5869  04EC  0835               	movf	pid_pwm1_idrv_b_b@t32+3,w
  5870  04ED  0021               	movlb	1	; select bank1
  5871  04EE  00EB               	movwf	(_bbmin+3)^(0+128)
  5872  04EF  0020               	movlb	0	; select bank0
  5873  04F0  0834               	movf	pid_pwm1_idrv_b_b@t32+2,w
  5874  04F1  0021               	movlb	1	; select bank1
  5875  04F2  00EA               	movwf	(_bbmin+2)^(0+128)
  5876  04F3  0020               	movlb	0	; select bank0
  5877  04F4  0833               	movf	pid_pwm1_idrv_b_b@t32+1,w
  5878  04F5  0021               	movlb	1	; select bank1
  5879  04F6  00E9               	movwf	(_bbmin+1)^(0+128)
  5880  04F7  0020               	movlb	0	; select bank0
  5881  04F8  0832               	movf	pid_pwm1_idrv_b_b@t32,w
  5882  04F9  0021               	movlb	1	; select bank1
  5883  04FA  00E8               	movwf	_bbmin^(0+128)
  5884  04FB                     l643:	
  5885  04FB  0008               	return
  5886  04FC                     __end_of_pid_pwm1_idrv_b_b:	
  5887  04FC                     __ptext32:	
  5888 ;; *************** function ___aldiv *****************
  5889 ;; Defined at:
  5890 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  5891 ;; Parameters:    Size  Location     Type
  5892 ;;  divisor         4    4[BANK0 ] long 
  5893 ;;  dividend        4    8[BANK0 ] long 
  5894 ;; Auto vars:     Size  Location     Type
  5895 ;;  quotient        4   14[BANK0 ] long 
  5896 ;;  sign            1   13[BANK0 ] unsigned char 
  5897 ;;  counter         1   12[BANK0 ] unsigned char 
  5898 ;; Return value:  Size  Location     Type
  5899 ;;                  4    4[BANK0 ] long 
  5900 ;; Registers used:
  5901 ;;		wreg, status,2, status,0
  5902 ;; Tracked objects:
  5903 ;;		On entry : 1F/0
  5904 ;;		On exit  : 1F/0
  5905 ;;		Unchanged: 0/0
  5906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5907 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5908 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5910 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5911 ;;Total ram usage:       14 bytes
  5912 ;; Hardware stack levels used:    1
  5913 ;; Hardware stack levels required when called:    1
  5914 ;; This function calls:
  5915 ;;		Nothing
  5916 ;; This function is called by:
  5917 ;;		_pid_pwm1_idrv_b_b
  5918 ;;		_pid_pwm1_idrv_run
  5919 ;;		_calc_expect_vout_adc_value
  5920 ;;		_m_int_2_str_ex
  5921 ;; This function uses a non-reentrant model
  5922 ;;
  5923                           
  5924                           
  5925                           ;psect for function ___aldiv
  5926  04FC                     ___aldiv:	
  5927                           
  5928                           ;incstack = 0
  5929                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  5930  04FC  01AD               	clrf	___aldiv@sign
  5931  04FD  1FA7               	btfss	___aldiv@divisor+3,7
  5932  04FE  2D0C               	goto	l1149
  5933  04FF  09A4               	comf	___aldiv@divisor,f
  5934  0500  09A5               	comf	___aldiv@divisor+1,f
  5935  0501  09A6               	comf	___aldiv@divisor+2,f
  5936  0502  09A7               	comf	___aldiv@divisor+3,f
  5937  0503  0AA4               	incf	___aldiv@divisor,f
  5938  0504  1903               	skipnz
  5939  0505  0AA5               	incf	___aldiv@divisor+1,f
  5940  0506  1903               	skipnz
  5941  0507  0AA6               	incf	___aldiv@divisor+2,f
  5942  0508  1903               	skipnz
  5943  0509  0AA7               	incf	___aldiv@divisor+3,f
  5944  050A  01AD               	clrf	___aldiv@sign
  5945  050B  0AAD               	incf	___aldiv@sign,f
  5946  050C                     l1149:	
  5947  050C  1FAB               	btfss	___aldiv@dividend+3,7
  5948  050D  2D1B               	goto	l3722
  5949  050E  09A8               	comf	___aldiv@dividend,f
  5950  050F  09A9               	comf	___aldiv@dividend+1,f
  5951  0510  09AA               	comf	___aldiv@dividend+2,f
  5952  0511  09AB               	comf	___aldiv@dividend+3,f
  5953  0512  0AA8               	incf	___aldiv@dividend,f
  5954  0513  1903               	skipnz
  5955  0514  0AA9               	incf	___aldiv@dividend+1,f
  5956  0515  1903               	skipnz
  5957  0516  0AAA               	incf	___aldiv@dividend+2,f
  5958  0517  1903               	skipnz
  5959  0518  0AAB               	incf	___aldiv@dividend+3,f
  5960  0519  3001               	movlw	1
  5961  051A  06AD               	xorwf	___aldiv@sign,f
  5962  051B                     l3722:	
  5963  051B  01AE               	clrf	___aldiv@quotient
  5964  051C  01AF               	clrf	___aldiv@quotient+1
  5965  051D  01B0               	clrf	___aldiv@quotient+2
  5966  051E  01B1               	clrf	___aldiv@quotient+3
  5967  051F  0827               	movf	___aldiv@divisor+3,w
  5968  0520  0426               	iorwf	___aldiv@divisor+2,w
  5969  0521  0425               	iorwf	___aldiv@divisor+1,w
  5970  0522  0424               	iorwf	___aldiv@divisor,w
  5971  0523  1903               	skipnz
  5972  0524  2D51               	goto	l3744
  5973  0525  01AC               	clrf	___aldiv@counter
  5974  0526                     L9:	
  5975  0526  0AAC               	incf	___aldiv@counter,f
  5976  0527  1BA7               	btfsc	___aldiv@divisor+3,7
  5977  0528  2D2E               	goto	l3732
  5978  0529  35A4               	lslf	___aldiv@divisor,f
  5979  052A  0DA5               	rlf	___aldiv@divisor+1,f
  5980  052B  0DA6               	rlf	___aldiv@divisor+2,f
  5981  052C  0DA7               	rlf	___aldiv@divisor+3,f
  5982  052D  2D26               	goto	L9
  5983  052E                     l3732:	
  5984  052E  35AE               	lslf	___aldiv@quotient,f
  5985  052F  0DAF               	rlf	___aldiv@quotient+1,f
  5986  0530  0DB0               	rlf	___aldiv@quotient+2,f
  5987  0531  0DB1               	rlf	___aldiv@quotient+3,f
  5988  0532  0827               	movf	___aldiv@divisor+3,w
  5989  0533  022B               	subwf	___aldiv@dividend+3,w
  5990  0534  1D03               	skipz
  5991  0535  2D40               	goto	u2395
  5992  0536  0826               	movf	___aldiv@divisor+2,w
  5993  0537  022A               	subwf	___aldiv@dividend+2,w
  5994  0538  1D03               	skipz
  5995  0539  2D40               	goto	u2395
  5996  053A  0825               	movf	___aldiv@divisor+1,w
  5997  053B  0229               	subwf	___aldiv@dividend+1,w
  5998  053C  1D03               	skipz
  5999  053D  2D40               	goto	u2395
  6000  053E  0824               	movf	___aldiv@divisor,w
  6001  053F  0228               	subwf	___aldiv@dividend,w
  6002  0540                     u2395:	
  6003  0540  1C03               	skipc
  6004  0541  2D4B               	goto	l3740
  6005  0542  0824               	movf	___aldiv@divisor,w
  6006  0543  02A8               	subwf	___aldiv@dividend,f
  6007  0544  0825               	movf	___aldiv@divisor+1,w
  6008  0545  3BA9               	subwfb	___aldiv@dividend+1,f
  6009  0546  0826               	movf	___aldiv@divisor+2,w
  6010  0547  3BAA               	subwfb	___aldiv@dividend+2,f
  6011  0548  0827               	movf	___aldiv@divisor+3,w
  6012  0549  3BAB               	subwfb	___aldiv@dividend+3,f
  6013  054A  142E               	bsf	___aldiv@quotient,0
  6014  054B                     l3740:	
  6015  054B  36A7               	lsrf	___aldiv@divisor+3,f
  6016  054C  0CA6               	rrf	___aldiv@divisor+2,f
  6017  054D  0CA5               	rrf	___aldiv@divisor+1,f
  6018  054E  0CA4               	rrf	___aldiv@divisor,f
  6019  054F  0BAC               	decfsz	___aldiv@counter,f
  6020  0550  2D2E               	goto	l3732
  6021  0551                     l3744:	
  6022  0551  082D               	movf	___aldiv@sign,w
  6023  0552  1903               	btfsc	3,2
  6024  0553  2D5F               	goto	l3748
  6025  0554  09AE               	comf	___aldiv@quotient,f
  6026  0555  09AF               	comf	___aldiv@quotient+1,f
  6027  0556  09B0               	comf	___aldiv@quotient+2,f
  6028  0557  09B1               	comf	___aldiv@quotient+3,f
  6029  0558  0AAE               	incf	___aldiv@quotient,f
  6030  0559  1903               	skipnz
  6031  055A  0AAF               	incf	___aldiv@quotient+1,f
  6032  055B  1903               	skipnz
  6033  055C  0AB0               	incf	___aldiv@quotient+2,f
  6034  055D  1903               	skipnz
  6035  055E  0AB1               	incf	___aldiv@quotient+3,f
  6036  055F                     l3748:	
  6037  055F  0831               	movf	___aldiv@quotient+3,w
  6038  0560  00A7               	movwf	?___aldiv+3
  6039  0561  0830               	movf	___aldiv@quotient+2,w
  6040  0562  00A6               	movwf	?___aldiv+2
  6041  0563  082F               	movf	___aldiv@quotient+1,w
  6042  0564  00A5               	movwf	?___aldiv+1
  6043  0565  082E               	movf	___aldiv@quotient,w
  6044  0566  00A4               	movwf	?___aldiv
  6045  0567  0008               	return
  6046  0568                     __end_of___aldiv:	
  6047  0568                     __ptext31:	
  6048 ;; *************** function ___lmul *****************
  6049 ;; Defined at:
  6050 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
  6051 ;; Parameters:    Size  Location     Type
  6052 ;;  multiplier      4    1[COMMON] unsigned long 
  6053 ;;  multiplicand    4    5[COMMON] unsigned long 
  6054 ;; Auto vars:     Size  Location     Type
  6055 ;;  product         4    0[BANK0 ] unsigned long 
  6056 ;; Return value:  Size  Location     Type
  6057 ;;                  4    1[COMMON] unsigned long 
  6058 ;; Registers used:
  6059 ;;		wreg, status,2, status,0
  6060 ;; Tracked objects:
  6061 ;;		On entry : 1C/0
  6062 ;;		On exit  : 1F/0
  6063 ;;		Unchanged: 0/0
  6064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6065 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6066 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6068 ;;      Totals:         8       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6069 ;;Total ram usage:       12 bytes
  6070 ;; Hardware stack levels used:    1
  6071 ;; Hardware stack levels required when called:    1
  6072 ;; This function calls:
  6073 ;;		Nothing
  6074 ;; This function is called by:
  6075 ;;		_calc_temp_rs
  6076 ;;		_calc_temp_rc
  6077 ;;		_pid_pwm1_idrv_b_b
  6078 ;;		_pid_pwm1_idrv_run
  6079 ;;		_calc_expect_vout_adc_value
  6080 ;; This function uses a non-reentrant model
  6081 ;;
  6082                           
  6083                           
  6084                           ;psect for function ___lmul
  6085  0568                     ___lmul:	
  6086                           
  6087                           ;incstack = 0
  6088                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  6089  0568  0020               	movlb	0	; select bank0
  6090  0569  01A0               	clrf	___lmul@product
  6091  056A  01A1               	clrf	___lmul@product+1
  6092  056B  01A2               	clrf	___lmul@product+2
  6093  056C  01A3               	clrf	___lmul@product+3
  6094  056D                     l1105:	
  6095  056D  1C71               	btfss	___lmul@multiplier,0
  6096  056E  2D78               	goto	l3704
  6097  056F  0875               	movf	___lmul@multiplicand,w
  6098  0570  0020               	movlb	0	; select bank0
  6099  0571  07A0               	addwf	___lmul@product,f
  6100  0572  0876               	movf	___lmul@multiplicand+1,w
  6101  0573  3DA1               	addwfc	___lmul@product+1,f
  6102  0574  0877               	movf	___lmul@multiplicand+2,w
  6103  0575  3DA2               	addwfc	___lmul@product+2,f
  6104  0576  0878               	movf	___lmul@multiplicand+3,w
  6105  0577  3DA3               	addwfc	___lmul@product+3,f
  6106  0578                     l3704:	
  6107  0578  35F5               	lslf	___lmul@multiplicand,f
  6108  0579  0DF6               	rlf	___lmul@multiplicand+1,f
  6109  057A  0DF7               	rlf	___lmul@multiplicand+2,f
  6110  057B  0DF8               	rlf	___lmul@multiplicand+3,f
  6111  057C  36F4               	lsrf	___lmul@multiplier+3,f
  6112  057D  0CF3               	rrf	___lmul@multiplier+2,f
  6113  057E  0CF2               	rrf	___lmul@multiplier+1,f
  6114  057F  0CF1               	rrf	___lmul@multiplier,f
  6115  0580  0874               	movf	___lmul@multiplier+3,w
  6116  0581  0473               	iorwf	___lmul@multiplier+2,w
  6117  0582  0472               	iorwf	___lmul@multiplier+1,w
  6118  0583  0471               	iorwf	___lmul@multiplier,w
  6119  0584  1D03               	skipz
  6120  0585  2D6D               	goto	l1105
  6121  0586  0020               	movlb	0	; select bank0
  6122  0587  0823               	movf	___lmul@product+3,w
  6123  0588  00F4               	movwf	?___lmul+3
  6124  0589  0822               	movf	___lmul@product+2,w
  6125  058A  00F3               	movwf	?___lmul+2
  6126  058B  0821               	movf	___lmul@product+1,w
  6127  058C  00F2               	movwf	?___lmul+1
  6128  058D  0820               	movf	___lmul@product,w
  6129  058E  00F1               	movwf	?___lmul
  6130  058F  0008               	return
  6131  0590                     __end_of___lmul:	
  6132  0590                     __ptext42:	
  6133 ;; *************** function _PWM1_Initialize *****************
  6134 ;; Defined at:
  6135 ;;		line 58 in file "mcc_generated_files/pwm1.c"
  6136 ;; Parameters:    Size  Location     Type
  6137 ;;		None
  6138 ;; Auto vars:     Size  Location     Type
  6139 ;;		None
  6140 ;; Return value:  Size  Location     Type
  6141 ;;                  1    wreg      void 
  6142 ;; Registers used:
  6143 ;;		wreg, status,2
  6144 ;; Tracked objects:
  6145 ;;		On entry : 1F/2
  6146 ;;		On exit  : 1F/1B
  6147 ;;		Unchanged: 0/0
  6148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6153 ;;Total ram usage:        0 bytes
  6154 ;; Hardware stack levels used:    1
  6155 ;; Hardware stack levels required when called:    1
  6156 ;; This function calls:
  6157 ;;		Nothing
  6158 ;; This function is called by:
  6159 ;;		_SYSTEM_Initialize
  6160 ;; This function uses a non-reentrant model
  6161 ;;
  6162                           
  6163                           
  6164                           ;psect for function _PWM1_Initialize
  6165  0590                     _PWM1_Initialize:	
  6166                           
  6167                           ;pwm1.c: 63: PWM1INTE = 0x00;
  6168                           
  6169                           ;incstack = 0
  6170                           ; Regs used in _PWM1_Initialize: [wreg+status,2]
  6171  0590  003B               	movlb	27	; select bank27
  6172  0591  019C               	clrf	28	;volatile
  6173                           
  6174                           ;pwm1.c: 66: PWM1INTF = 0x00;
  6175  0592  019D               	clrf	29	;volatile
  6176                           
  6177                           ;pwm1.c: 69: PWM1CLKCON = 0x00;
  6178  0593  019E               	clrf	30	;volatile
  6179                           
  6180                           ;pwm1.c: 72: PWM1LDCON = 0x80;
  6181  0594  3080               	movlw	128
  6182  0595  009F               	movwf	31	;volatile
  6183                           
  6184                           ;pwm1.c: 75: PWM1OFCON = 0x00;
  6185  0596  01A0               	clrf	32	;volatile
  6186                           
  6187                           ;pwm1.c: 78: PWM1PHH = 0x00;
  6188  0597  0192               	clrf	18	;volatile
  6189                           
  6190                           ;pwm1.c: 81: PWM1PHL = 0x00;
  6191  0598  0191               	clrf	17	;volatile
  6192                           
  6193                           ;pwm1.c: 84: PWM1DCH = 0x00;
  6194  0599  0194               	clrf	20	;volatile
  6195                           
  6196                           ;pwm1.c: 87: PWM1DCL = 0xa0;
  6197  059A  30A0               	movlw	160
  6198  059B  0093               	movwf	19	;volatile
  6199                           
  6200                           ;pwm1.c: 90: PWM1PRH = 0x06;
  6201  059C  3006               	movlw	6
  6202  059D  0096               	movwf	22	;volatile
  6203                           
  6204                           ;pwm1.c: 93: PWM1PRL = 0x3F;
  6205  059E  303F               	movlw	63
  6206  059F  0095               	movwf	21	;volatile
  6207                           
  6208                           ;pwm1.c: 96: PWM1OFH = 0x00;
  6209  05A0  0198               	clrf	24	;volatile
  6210                           
  6211                           ;pwm1.c: 99: PWM1OFL = 0x01;
  6212  05A1  3001               	movlw	1
  6213  05A2  0097               	movwf	23	;volatile
  6214                           
  6215                           ;pwm1.c: 102: PWM1TMRH = 0x00;
  6216  05A3  019A               	clrf	26	;volatile
  6217                           
  6218                           ;pwm1.c: 105: PWM1TMRL = 0x00;
  6219  05A4  0199               	clrf	25	;volatile
  6220                           
  6221                           ;pwm1.c: 108: PWM1CON = 0x90;
  6222  05A5  3090               	movlw	144
  6223  05A6  009B               	movwf	27	;volatile
  6224  05A7  0008               	return
  6225  05A8                     __end_of_PWM1_Initialize:	
  6226  05A8                     __ptext41:	
  6227 ;; *************** function _PWM2_Initialize *****************
  6228 ;; Defined at:
  6229 ;;		line 58 in file "mcc_generated_files/pwm2.c"
  6230 ;; Parameters:    Size  Location     Type
  6231 ;;		None
  6232 ;; Auto vars:     Size  Location     Type
  6233 ;;		None
  6234 ;; Return value:  Size  Location     Type
  6235 ;;                  1    wreg      void 
  6236 ;; Registers used:
  6237 ;;		wreg, status,2
  6238 ;; Tracked objects:
  6239 ;;		On entry : 1F/1B
  6240 ;;		On exit  : 1F/1B
  6241 ;;		Unchanged: 0/0
  6242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6246 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6247 ;;Total ram usage:        0 bytes
  6248 ;; Hardware stack levels used:    1
  6249 ;; Hardware stack levels required when called:    1
  6250 ;; This function calls:
  6251 ;;		Nothing
  6252 ;; This function is called by:
  6253 ;;		_SYSTEM_Initialize
  6254 ;; This function uses a non-reentrant model
  6255 ;;
  6256                           
  6257                           
  6258                           ;psect for function _PWM2_Initialize
  6259  05A8                     _PWM2_Initialize:	
  6260                           
  6261                           ;pwm2.c: 63: PWM2INTE = 0x00;
  6262                           
  6263                           ;incstack = 0
  6264                           ; Regs used in _PWM2_Initialize: [wreg+status,2]
  6265  05A8  01AC               	clrf	44	;volatile
  6266                           
  6267                           ;pwm2.c: 66: PWM2INTF = 0x00;
  6268  05A9  01AD               	clrf	45	;volatile
  6269                           
  6270                           ;pwm2.c: 69: PWM2CLKCON = 0x00;
  6271  05AA  01AE               	clrf	46	;volatile
  6272                           
  6273                           ;pwm2.c: 72: PWM2LDCON = 0x80;
  6274  05AB  3080               	movlw	128
  6275  05AC  00AF               	movwf	47	;volatile
  6276                           
  6277                           ;pwm2.c: 75: PWM2OFCON = 0x00;
  6278  05AD  01B0               	clrf	48	;volatile
  6279                           
  6280                           ;pwm2.c: 78: PWM2PHH = 0x00;
  6281  05AE  01A2               	clrf	34	;volatile
  6282                           
  6283                           ;pwm2.c: 81: PWM2PHL = 0x00;
  6284  05AF  01A1               	clrf	33	;volatile
  6285                           
  6286                           ;pwm2.c: 84: PWM2DCH = 0x00;
  6287  05B0  01A4               	clrf	36	;volatile
  6288                           
  6289                           ;pwm2.c: 87: PWM2DCL = 0xA0;
  6290  05B1  30A0               	movlw	160
  6291  05B2  00A3               	movwf	35	;volatile
  6292                           
  6293                           ;pwm2.c: 90: PWM2PRH = 0x06;
  6294  05B3  3006               	movlw	6
  6295  05B4  00A6               	movwf	38	;volatile
  6296                           
  6297                           ;pwm2.c: 93: PWM2PRL = 0x3F;
  6298  05B5  303F               	movlw	63
  6299  05B6  00A5               	movwf	37	;volatile
  6300                           
  6301                           ;pwm2.c: 96: PWM2OFH = 0x00;
  6302  05B7  01A8               	clrf	40	;volatile
  6303                           
  6304                           ;pwm2.c: 99: PWM2OFL = 0x01;
  6305  05B8  3001               	movlw	1
  6306  05B9  00A7               	movwf	39	;volatile
  6307                           
  6308                           ;pwm2.c: 102: PWM2TMRH = 0x00;
  6309  05BA  01AA               	clrf	42	;volatile
  6310                           
  6311                           ;pwm2.c: 105: PWM2TMRL = 0x00;
  6312  05BB  01A9               	clrf	41	;volatile
  6313                           
  6314                           ;pwm2.c: 108: PWM2CON = 0x90;
  6315  05BC  3090               	movlw	144
  6316  05BD  00AB               	movwf	43	;volatile
  6317  05BE  0008               	return
  6318  05BF                     __end_of_PWM2_Initialize:	
  6319  05BF                     __ptext37:	
  6320 ;; *************** function _WDT_Initialize *****************
  6321 ;; Defined at:
  6322 ;;		line 90 in file "mcc_generated_files/mcc.c"
  6323 ;; Parameters:    Size  Location     Type
  6324 ;;		None
  6325 ;; Auto vars:     Size  Location     Type
  6326 ;;		None
  6327 ;; Return value:  Size  Location     Type
  6328 ;;                  1    wreg      void 
  6329 ;; Registers used:
  6330 ;;		wreg
  6331 ;; Tracked objects:
  6332 ;;		On entry : 1F/1
  6333 ;;		On exit  : 1F/1
  6334 ;;		Unchanged: 0/0
  6335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6339 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6340 ;;Total ram usage:        0 bytes
  6341 ;; Hardware stack levels used:    1
  6342 ;; Hardware stack levels required when called:    1
  6343 ;; This function calls:
  6344 ;;		Nothing
  6345 ;; This function is called by:
  6346 ;;		_SYSTEM_Initialize
  6347 ;; This function uses a non-reentrant model
  6348 ;;
  6349                           
  6350                           
  6351                           ;psect for function _WDT_Initialize
  6352  05BF                     _WDT_Initialize:	
  6353                           
  6354                           ;mcc.c: 93: WDTCON = 0x16;
  6355                           
  6356                           ;incstack = 0
  6357                           ; Regs used in _WDT_Initialize: [wreg]
  6358  05BF  3016               	movlw	22
  6359  05C0  0097               	movwf	23	;volatile
  6360  05C1  0008               	return
  6361  05C2                     __end_of_WDT_Initialize:	
  6362  05C2                     __ptext35:	
  6363 ;; *************** function _adc_init *****************
  6364 ;; Defined at:
  6365 ;;		line 83 in file "src/api/sample.c"
  6366 ;; Parameters:    Size  Location     Type
  6367 ;;  ch              1    wreg     enum E4977
  6368 ;; Auto vars:     Size  Location     Type
  6369 ;;  ch              1    2[COMMON] enum E4977
  6370 ;; Return value:  Size  Location     Type
  6371 ;;                  1    wreg      void 
  6372 ;; Registers used:
  6373 ;;		wreg, status,2, status,0
  6374 ;; Tracked objects:
  6375 ;;		On entry : 1F/2
  6376 ;;		On exit  : 1F/1
  6377 ;;		Unchanged: 0/0
  6378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6380 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6381 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6382 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6383 ;;Total ram usage:        2 bytes
  6384 ;; Hardware stack levels used:    1
  6385 ;; Hardware stack levels required when called:    1
  6386 ;; This function calls:
  6387 ;;		Nothing
  6388 ;; This function is called by:
  6389 ;;		_adc_sample
  6390 ;; This function uses a non-reentrant model
  6391 ;;
  6392                           
  6393                           
  6394                           ;psect for function _adc_init
  6395  05C2                     _adc_init:	
  6396                           
  6397                           ;incstack = 0
  6398                           ; Regs used in _adc_init: [wreg+status,2+status,0]
  6399                           ;adc_init@ch stored from wreg
  6400  05C2  00F2               	movwf	adc_init@ch
  6401  05C3                     l587:	
  6402                           ;sample.c: 85: while (ADCON0bits.GO_nDONE);
  6403                           
  6404  05C3  0021               	movlb	1	; select bank1
  6405  05C4  189D               	btfsc	29,1	;volatile
  6406  05C5  2DC3               	goto	l587
  6407                           
  6408                           ;sample.c: 86: ADCON0bits.CHS = ch;
  6409  05C6  0872               	movf	adc_init@ch,w
  6410  05C7  00F1               	movwf	??_adc_init
  6411  05C8  0DF1               	rlf	??_adc_init,f
  6412  05C9  0DF1               	rlf	??_adc_init,f
  6413  05CA  081D               	movf	29,w	;volatile
  6414  05CB  0671               	xorwf	??_adc_init,w
  6415  05CC  3983               	andlw	-125
  6416  05CD  0671               	xorwf	??_adc_init,w
  6417  05CE  009D               	movwf	29	;volatile
  6418                           
  6419                           ;sample.c: 87: ADCON0bits.ADON = 1;
  6420  05CF  141D               	bsf	29,0	;volatile
  6421                           
  6422                           ;sample.c: 88: ADCON1 = 0x63;
  6423                           
  6424                           ;sample.c: 89: ADCON2 = 0x00;
  6425                           
  6426                           ;sample.c: 90: ADRESL = 0x00;
  6427                           
  6428                           ;sample.c: 91: ADRESH = 0x00;
  6429  05D0  2F78               	ljmp	PL32	;call to abstracted procedure
  6430  05D1                     __end_of_adc_init:	
  6431  05D1                     __ptext34:	
  6432 ;; *************** function _fvr_set_gain *****************
  6433 ;; Defined at:
  6434 ;;		line 74 in file "src/api/sample.c"
  6435 ;; Parameters:    Size  Location     Type
  6436 ;;  g               1    wreg     unsigned char 
  6437 ;; Auto vars:     Size  Location     Type
  6438 ;;  g               1    2[COMMON] unsigned char 
  6439 ;;  t8              1    1[COMMON] unsigned char 
  6440 ;; Return value:  Size  Location     Type
  6441 ;;                  1    wreg      void 
  6442 ;; Registers used:
  6443 ;;		wreg, status,2, status,0
  6444 ;; Tracked objects:
  6445 ;;		On entry : 0/0
  6446 ;;		On exit  : 1F/2
  6447 ;;		Unchanged: 0/0
  6448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6450 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6452 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6453 ;;Total ram usage:        2 bytes
  6454 ;; Hardware stack levels used:    1
  6455 ;; Hardware stack levels required when called:    1
  6456 ;; This function calls:
  6457 ;;		Nothing
  6458 ;; This function is called by:
  6459 ;;		_adc_sample
  6460 ;; This function uses a non-reentrant model
  6461 ;;
  6462                           
  6463                           
  6464                           ;psect for function _fvr_set_gain
  6465  05D1                     _fvr_set_gain:	
  6466                           
  6467                           ;incstack = 0
  6468                           ; Regs used in _fvr_set_gain: [wreg+status,2+status,0]
  6469                           ;fvr_set_gain@g stored from wreg
  6470  05D1  00F2               	movwf	fvr_set_gain@g
  6471                           
  6472                           ;sample.c: 76: uint8_t t8=0x80;
  6473  05D2  3080               	movlw	128
  6474  05D3  00F1               	movwf	fvr_set_gain@t8
  6475                           
  6476                           ;sample.c: 77: if(g>3)g=3;
  6477  05D4  3004               	movlw	4
  6478  05D5  0272               	subwf	fvr_set_gain@g,w
  6479  05D6  1C03               	skipc
  6480  05D7  2DDA               	goto	l2790
  6481  05D8  3003               	movlw	3
  6482  05D9  00F2               	movwf	fvr_set_gain@g
  6483  05DA                     l2790:	
  6484                           
  6485                           ;sample.c: 78: t8|=g;
  6486  05DA  0872               	movf	fvr_set_gain@g,w
  6487  05DB  04F1               	iorwf	fvr_set_gain@t8,f
  6488                           
  6489                           ;sample.c: 79: FVRCON = t8;
  6490  05DC  0871               	movf	fvr_set_gain@t8,w
  6491  05DD  0022               	movlb	2	; select bank2
  6492  05DE  0097               	movwf	23	;volatile
  6493  05DF                     l581:	
  6494                           ;sample.c: 80: while(!(FVRCONbits.FVRRDY));
  6495                           
  6496  05DF  1B17               	btfsc	23,6	;volatile
  6497  05E0  0008               	return
  6498  05E1  2DDF               	goto	l581
  6499  05E2                     __end_of_fvr_set_gain:	
  6500  05E2                     __ptext28:	
  6501 ;; *************** function _calc_rs_lo_avg *****************
  6502 ;; Defined at:
  6503 ;;		line 382 in file "src/api/sample.c"
  6504 ;; Parameters:    Size  Location     Type
  6505 ;;  x               2    9[COMMON] unsigned int 
  6506 ;; Auto vars:     Size  Location     Type
  6507 ;;  t32             4    7[BANK0 ] unsigned long 
  6508 ;;  i               1   11[BANK0 ] unsigned char 
  6509 ;; Return value:  Size  Location     Type
  6510 ;;                  2    9[COMMON] unsigned int 
  6511 ;; Registers used:
  6512 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6513 ;; Tracked objects:
  6514 ;;		On entry : 1F/0
  6515 ;;		On exit  : 1F/0
  6516 ;;		Unchanged: 0/0
  6517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6518 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6519 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6520 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6521 ;;      Totals:         2       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6522 ;;Total ram usage:        9 bytes
  6523 ;; Hardware stack levels used:    1
  6524 ;; Hardware stack levels required when called:    2
  6525 ;; This function calls:
  6526 ;;		___lldiv
  6527 ;; This function is called by:
  6528 ;;		_main
  6529 ;; This function uses a non-reentrant model
  6530 ;;
  6531                           
  6532                           
  6533                           ;psect for function _calc_rs_lo_avg
  6534  05E2                     _calc_rs_lo_avg:	
  6535                           
  6536                           ;sample.c: 384: uint8_t i;
  6537                           ;sample.c: 385: uint32_t t32=0;
  6538                           
  6539                           ;incstack = 0
  6540                           ; Regs used in _calc_rs_lo_avg: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6541  05E2  01A7               	clrf	calc_rs_lo_avg@t32
  6542  05E3  01A8               	clrf	calc_rs_lo_avg@t32+1
  6543  05E4  01A9               	clrf	calc_rs_lo_avg@t32+2
  6544  05E5  01AA               	clrf	calc_rs_lo_avg@t32+3
  6545                           
  6546                           ;sample.c: 387: for(i=0;i<4;i++){
  6547  05E6  01AB               	clrf	calc_rs_lo_avg@i
  6548  05E7                     l3898:	
  6549                           
  6550                           ;sample.c: 388: rsLoAvgBuf[i]=rsLoAvgBuf[i+1];
  6551  05E7  352B               	lslf	calc_rs_lo_avg@i,w
  6552  05E8  3EAE               	addlw	(low ((_rsLoAvgBuf| 0+2)))& (0+255)
  6553  05E9  0086               	movwf	6
  6554  05EA  0187               	clrf	7
  6555  05EB  352B               	lslf	calc_rs_lo_avg@i,w
  6556  05EC  3EAC               	addlw	(low (_rsLoAvgBuf| 0))& (0+255)
  6557  05ED  0084               	movwf	4
  6558  05EE  0185               	clrf	5
  6559  05EF  3F40               	moviw [0]fsr1
  6560  05F0  3F80               	movwi [0]fsr0
  6561  05F1  3F41               	moviw [1]fsr1
  6562  05F2  3F81               	movwi [1]fsr0
  6563                           
  6564                           ;sample.c: 389: t32+=rsLoAvgBuf[i];
  6565  05F3  352B               	lslf	calc_rs_lo_avg@i,w
  6566  05F4  3EAC               	addlw	(low (_rsLoAvgBuf| 0))& (0+255)
  6567  05F5  0086               	movwf	6
  6568  05F6  3F40               	moviw [0]fsr1
  6569  05F7  00A5               	movwf	??_calc_rs_lo_avg
  6570  05F8  3F41               	moviw [1]fsr1
  6571  05F9  00A6               	movwf	??_calc_rs_lo_avg+1
  6572  05FA  0825               	movf	??_calc_rs_lo_avg,w
  6573  05FB  07A7               	addwf	calc_rs_lo_avg@t32,f
  6574  05FC  0826               	movf	??_calc_rs_lo_avg+1,w
  6575  05FD  3DA8               	addwfc	calc_rs_lo_avg@t32+1,f
  6576  05FE  3000               	movlw	0
  6577  05FF  3DA9               	addwfc	calc_rs_lo_avg@t32+2,f
  6578  0600  3DAA               	addwfc	calc_rs_lo_avg@t32+3,f
  6579  0601  3004               	movlw	4
  6580  0602  0AAB               	incf	calc_rs_lo_avg@i,f
  6581  0603  022B               	subwf	calc_rs_lo_avg@i,w
  6582  0604  1C03               	skipc
  6583  0605  2DE7               	goto	l3898
  6584                           
  6585                           ;sample.c: 390: }
  6586                           ;sample.c: 391: rsLoAvgBuf[i]=x;
  6587  0606  352B               	lslf	calc_rs_lo_avg@i,w
  6588  0607  3EAC               	addlw	(low (_rsLoAvgBuf| 0))& (0+255)
  6589  0608  0086               	movwf	6
  6590  0609  0879               	movf	calc_rs_lo_avg@x,w
  6591  060A  3FC0               	movwi [0]fsr1
  6592  060B  087A               	movf	calc_rs_lo_avg@x+1,w
  6593  060C  3FC1               	movwi [1]fsr1
  6594                           
  6595                           ;sample.c: 392: t32+=x;
  6596  060D  0879               	movf	calc_rs_lo_avg@x,w
  6597  060E  07A7               	addwf	calc_rs_lo_avg@t32,f
  6598  060F  087A               	movf	calc_rs_lo_avg@x+1,w
  6599  0610  3DA8               	addwfc	calc_rs_lo_avg@t32+1,f
  6600  0611  3000               	movlw	0
  6601  0612  3DA9               	addwfc	calc_rs_lo_avg@t32+2,f
  6602  0613  3DAA               	addwfc	calc_rs_lo_avg@t32+3,f
  6603                           
  6604                           ;sample.c: 393: t32/=5;
  6605  0614  3005               	movlw	5
  6606  0615  00F1               	movwf	___lldiv@divisor
  6607  0616  01F2               	clrf	___lldiv@divisor+1
  6608  0617  01F3               	clrf	___lldiv@divisor+2
  6609  0618  01F4               	clrf	___lldiv@divisor+3
  6610  0619  082A               	movf	calc_rs_lo_avg@t32+3,w
  6611  061A  00F8               	movwf	___lldiv@dividend+3
  6612  061B  0829               	movf	calc_rs_lo_avg@t32+2,w
  6613  061C  00F7               	movwf	___lldiv@dividend+2
  6614  061D  0828               	movf	calc_rs_lo_avg@t32+1,w
  6615  061E  00F6               	movwf	___lldiv@dividend+1
  6616  061F  0827               	movf	calc_rs_lo_avg@t32,w
  6617  0620  00F5               	movwf	___lldiv@dividend
  6618  0621  26D1               	fcall	___lldiv
  6619  0622  0874               	movf	?___lldiv+3,w
  6620  0623  00AA               	movwf	calc_rs_lo_avg@t32+3
  6621  0624  0873               	movf	?___lldiv+2,w
  6622  0625  00A9               	movwf	calc_rs_lo_avg@t32+2
  6623  0626  0872               	movf	?___lldiv+1,w
  6624  0627  00A8               	movwf	calc_rs_lo_avg@t32+1
  6625  0628  0871               	movf	?___lldiv,w
  6626  0629  00A7               	movwf	calc_rs_lo_avg@t32
  6627                           
  6628                           ;sample.c: 394: return (uint16_t)t32;
  6629  062A  0828               	movf	calc_rs_lo_avg@t32+1,w
  6630  062B  00FA               	movwf	?_calc_rs_lo_avg+1
  6631  062C  0827               	movf	calc_rs_lo_avg@t32,w
  6632  062D  00F9               	movwf	?_calc_rs_lo_avg
  6633  062E  0008               	return
  6634  062F                     __end_of_calc_rs_lo_avg:	
  6635  062F                     __ptext27:	
  6636 ;; *************** function _calc_temp_rc *****************
  6637 ;; Defined at:
  6638 ;;		line 180 in file "src/api/sample.c"
  6639 ;; Parameters:    Size  Location     Type
  6640 ;;		None
  6641 ;; Auto vars:     Size  Location     Type
  6642 ;;  y               4   17[BANK0 ] unsigned long 
  6643 ;;  x               4   13[BANK0 ] unsigned long 
  6644 ;; Return value:  Size  Location     Type
  6645 ;;                  4    5[BANK0 ] unsigned long 
  6646 ;; Registers used:
  6647 ;;		wreg, status,2, status,0, pclath, cstack
  6648 ;; Tracked objects:
  6649 ;;		On entry : 1F/1
  6650 ;;		On exit  : 1F/0
  6651 ;;		Unchanged: 0/0
  6652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6653 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6654 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6655 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6656 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6657 ;;Total ram usage:       16 bytes
  6658 ;; Hardware stack levels used:    1
  6659 ;; Hardware stack levels required when called:    2
  6660 ;; This function calls:
  6661 ;;		___lldiv
  6662 ;;		___lmul
  6663 ;; This function is called by:
  6664 ;;		_main
  6665 ;; This function uses a non-reentrant model
  6666 ;;
  6667                           
  6668                           
  6669                           ;psect for function _calc_temp_rc
  6670  062F                     _calc_temp_rc:	
  6671                           
  6672                           ;sample.c: 183: uint32_t x,y;
  6673                           ;sample.c: 184: x=300000UL;
  6674                           
  6675                           ;incstack = 0
  6676                           ; Regs used in _calc_temp_rc: [wreg+status,2+status,0+pclath+cstack]
  6677  062F  0020               	movlb	0	; select bank0
  6678  0630  3004               	movlw	4
  6679  0631  01B0               	clrf	calc_temp_rc@x+3
  6680  0632  00AF               	movwf	calc_temp_rc@x+2
  6681  0633  3093               	movlw	147
  6682  0634  00AE               	movwf	calc_temp_rc@x+1
  6683  0635  30E0               	movlw	224
  6684  0636  00AD               	movwf	calc_temp_rc@x
  6685                           
  6686                           ;sample.c: 185: x=x*rtAdcValueRcLo;
  6687  0637  0858               	movf	_rtAdcValueRcLo,w
  6688  0638  00F1               	movwf	___lmul@multiplier
  6689  0639  0859               	movf	_rtAdcValueRcLo+1,w
  6690  063A  00F2               	movwf	___lmul@multiplier+1
  6691  063B  01F3               	clrf	___lmul@multiplier+2
  6692  063C  01F4               	clrf	___lmul@multiplier+3
  6693  063D  0830               	movf	calc_temp_rc@x+3,w
  6694  063E  00F8               	movwf	___lmul@multiplicand+3
  6695  063F  082F               	movf	calc_temp_rc@x+2,w
  6696  0640  00F7               	movwf	___lmul@multiplicand+2
  6697  0641  082E               	movf	calc_temp_rc@x+1,w
  6698  0642  00F6               	movwf	___lmul@multiplicand+1
  6699  0643  082D               	movf	calc_temp_rc@x,w
  6700  0644  00F5               	movwf	___lmul@multiplicand
  6701  0645  2568  3180         	fcall	___lmul
  6702  0647  0874               	movf	?___lmul+3,w
  6703  0648  00B0               	movwf	calc_temp_rc@x+3
  6704  0649  0873               	movf	?___lmul+2,w
  6705  064A  00AF               	movwf	calc_temp_rc@x+2
  6706  064B  0872               	movf	?___lmul+1,w
  6707  064C  00AE               	movwf	calc_temp_rc@x+1
  6708  064D  0871               	movf	?___lmul,w
  6709  064E  00AD               	movwf	calc_temp_rc@x
  6710                           
  6711                           ;sample.c: 188: y=rtAdcValueRcHi;
  6712  064F  0021               	movlb	1	; select bank1
  6713  0650  085E               	movf	_rtAdcValueRcHi^(0+128),w
  6714  0651  0020               	movlb	0	; select bank0
  6715  0652  00B1               	movwf	calc_temp_rc@y
  6716  0653  0021               	movlb	1	; select bank1
  6717  0654  085F               	movf	(_rtAdcValueRcHi+1)^(0+128),w
  6718  0655  0020               	movlb	0	; select bank0
  6719  0656  00B2               	movwf	calc_temp_rc@y+1
  6720  0657  300C               	movlw	12
  6721  0658  01B3               	clrf	calc_temp_rc@y+2
  6722  0659  01B4               	clrf	calc_temp_rc@y+3
  6723                           
  6724                           ;sample.c: 189: y=y*3140;
  6725  065A  01F4               	clrf	___lmul@multiplier+3
  6726  065B  01F3               	clrf	___lmul@multiplier+2
  6727  065C  00F2               	movwf	___lmul@multiplier+1
  6728  065D  3044               	movlw	68
  6729  065E  00F1               	movwf	___lmul@multiplier
  6730  065F  0834               	movf	calc_temp_rc@y+3,w
  6731  0660  00F8               	movwf	___lmul@multiplicand+3
  6732  0661  0833               	movf	calc_temp_rc@y+2,w
  6733  0662  00F7               	movwf	___lmul@multiplicand+2
  6734  0663  0832               	movf	calc_temp_rc@y+1,w
  6735  0664  00F6               	movwf	___lmul@multiplicand+1
  6736  0665  0831               	movf	calc_temp_rc@y,w
  6737  0666  00F5               	movwf	___lmul@multiplicand
  6738  0667  2568  3180         	fcall	___lmul
  6739  0669  0874               	movf	?___lmul+3,w
  6740  066A  00B4               	movwf	calc_temp_rc@y+3
  6741  066B  0873               	movf	?___lmul+2,w
  6742  066C  00B3               	movwf	calc_temp_rc@y+2
  6743  066D  0872               	movf	?___lmul+1,w
  6744  066E  00B2               	movwf	calc_temp_rc@y+1
  6745  066F  0871               	movf	?___lmul,w
  6746  0670  00B1               	movwf	calc_temp_rc@y
  6747                           
  6748                           ;sample.c: 190: y=y/100;
  6749  0671  3064               	movlw	100
  6750  0672  00F1               	movwf	___lldiv@divisor
  6751  0673  01F2               	clrf	___lldiv@divisor+1
  6752  0674  01F3               	clrf	___lldiv@divisor+2
  6753  0675  01F4               	clrf	___lldiv@divisor+3
  6754  0676  0834               	movf	calc_temp_rc@y+3,w
  6755  0677  00F8               	movwf	___lldiv@dividend+3
  6756  0678  0833               	movf	calc_temp_rc@y+2,w
  6757  0679  00F7               	movwf	___lldiv@dividend+2
  6758  067A  0832               	movf	calc_temp_rc@y+1,w
  6759  067B  00F6               	movwf	___lldiv@dividend+1
  6760  067C  0831               	movf	calc_temp_rc@y,w
  6761  067D  00F5               	movwf	___lldiv@dividend
  6762  067E  26D1  3180         	fcall	___lldiv
  6763  0680  2761  3180         	fcall	PL20	;call to abstracted procedure
  6764                           
  6765                           ;sample.c: 191: y=y-rtAdcValueRcLo;
  6766  0682  0858               	movf	_rtAdcValueRcLo,w
  6767  0683  00A9               	movwf	??_calc_temp_rc
  6768  0684  0859               	movf	_rtAdcValueRcLo+1,w
  6769  0685  00AA               	movwf	??_calc_temp_rc+1
  6770  0686  01AB               	clrf	??_calc_temp_rc+2
  6771  0687  01AC               	clrf	??_calc_temp_rc+3
  6772  0688  0829               	movf	??_calc_temp_rc,w
  6773  0689  02B1               	subwf	calc_temp_rc@y,f
  6774  068A  082A               	movf	??_calc_temp_rc+1,w
  6775  068B  3BB2               	subwfb	calc_temp_rc@y+1,f
  6776  068C  082B               	movf	??_calc_temp_rc+2,w
  6777  068D  3BB3               	subwfb	calc_temp_rc@y+2,f
  6778  068E  082C               	movf	??_calc_temp_rc+3,w
  6779  068F  3BB4               	subwfb	calc_temp_rc@y+3,f
  6780                           
  6781                           ;sample.c: 194: y=x/y;
  6782  0690  0834               	movf	calc_temp_rc@y+3,w
  6783  0691  00F4               	movwf	___lldiv@divisor+3
  6784  0692  0833               	movf	calc_temp_rc@y+2,w
  6785  0693  00F3               	movwf	___lldiv@divisor+2
  6786  0694  0832               	movf	calc_temp_rc@y+1,w
  6787  0695  00F2               	movwf	___lldiv@divisor+1
  6788  0696  0831               	movf	calc_temp_rc@y,w
  6789  0697  00F1               	movwf	___lldiv@divisor
  6790  0698  0830               	movf	calc_temp_rc@x+3,w
  6791  0699  00F8               	movwf	___lldiv@dividend+3
  6792  069A  082F               	movf	calc_temp_rc@x+2,w
  6793  069B  00F7               	movwf	___lldiv@dividend+2
  6794  069C  082E               	movf	calc_temp_rc@x+1,w
  6795  069D  00F6               	movwf	___lldiv@dividend+1
  6796  069E  082D               	movf	calc_temp_rc@x,w
  6797  069F  00F5               	movwf	___lldiv@dividend
  6798  06A0  26D1  3180         	fcall	___lldiv
  6799  06A2  2761  3180         	fcall	PL20	;call to abstracted procedure
  6800                           
  6801                           ;sample.c: 195: if(y<2000)y=2000;
  6802  06A4  0834               	movf	calc_temp_rc@y+3,w
  6803  06A5  1D03               	btfss	3,2
  6804  06A6  2EB6               	goto	l3786
  6805  06A7  0833               	movf	calc_temp_rc@y+2,w
  6806  06A8  1D03               	btfss	3,2
  6807  06A9  2EB6               	goto	l3786
  6808  06AA  30D0               	movlw	208
  6809  06AB  0231               	subwf	calc_temp_rc@y,w
  6810  06AC  3007               	movlw	7
  6811  06AD  3B32               	subwfb	calc_temp_rc@y+1,w
  6812  06AE  1803               	btfsc	3,0
  6813  06AF  2EB6               	goto	l3786
  6814  06B0  3007               	movlw	7
  6815  06B1  01B4               	clrf	calc_temp_rc@y+3
  6816  06B2  01B3               	clrf	calc_temp_rc@y+2
  6817  06B3  00B2               	movwf	calc_temp_rc@y+1
  6818  06B4  30D0               	movlw	208
  6819  06B5  00B1               	movwf	calc_temp_rc@y
  6820  06B6                     l3786:	
  6821                           
  6822                           ;sample.c: 196: if(y>25000)y=25000;
  6823  06B6  0834               	movf	calc_temp_rc@y+3,w
  6824  06B7  1D03               	btfss	3,2
  6825  06B8  2EC2               	goto	l3788
  6826  06B9  0833               	movf	calc_temp_rc@y+2,w
  6827  06BA  1D03               	btfss	3,2
  6828  06BB  2EC2               	goto	l3788
  6829  06BC  30A9               	movlw	169
  6830  06BD  0231               	subwf	calc_temp_rc@y,w
  6831  06BE  3061               	movlw	97
  6832  06BF  3B32               	subwfb	calc_temp_rc@y+1,w
  6833  06C0  1C03               	btfss	3,0
  6834  06C1  2EC8               	goto	l619
  6835  06C2                     l3788:	
  6836  06C2  3061               	movlw	97
  6837  06C3  01B4               	clrf	calc_temp_rc@y+3
  6838  06C4  01B3               	clrf	calc_temp_rc@y+2
  6839  06C5  00B2               	movwf	calc_temp_rc@y+1
  6840  06C6  30A8               	movlw	168
  6841  06C7  00B1               	movwf	calc_temp_rc@y
  6842  06C8                     l619:	
  6843                           
  6844                           ;sample.c: 198: return y;
  6845  06C8  0834               	movf	calc_temp_rc@y+3,w
  6846  06C9  00A8               	movwf	?_calc_temp_rc+3
  6847  06CA  0833               	movf	calc_temp_rc@y+2,w
  6848  06CB  00A7               	movwf	?_calc_temp_rc+2
  6849  06CC  0832               	movf	calc_temp_rc@y+1,w
  6850  06CD  00A6               	movwf	?_calc_temp_rc+1
  6851  06CE  0831               	movf	calc_temp_rc@y,w
  6852  06CF  00A5               	movwf	?_calc_temp_rc
  6853  06D0  0008               	return
  6854  06D1                     __end_of_calc_temp_rc:	
  6855  06D1                     __ptext29:	
  6856 ;; *************** function ___lldiv *****************
  6857 ;; Defined at:
  6858 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lldiv.c"
  6859 ;; Parameters:    Size  Location     Type
  6860 ;;  divisor         4    1[COMMON] unsigned long 
  6861 ;;  dividend        4    5[COMMON] unsigned long 
  6862 ;; Auto vars:     Size  Location     Type
  6863 ;;  quotient        4    0[BANK0 ] unsigned long 
  6864 ;;  counter         1    4[BANK0 ] unsigned char 
  6865 ;; Return value:  Size  Location     Type
  6866 ;;                  4    1[COMMON] unsigned long 
  6867 ;; Registers used:
  6868 ;;		wreg, status,2, status,0
  6869 ;; Tracked objects:
  6870 ;;		On entry : 1F/0
  6871 ;;		On exit  : 1F/0
  6872 ;;		Unchanged: 0/0
  6873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6874 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6875 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6877 ;;      Totals:         8       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6878 ;;Total ram usage:       13 bytes
  6879 ;; Hardware stack levels used:    1
  6880 ;; Hardware stack levels required when called:    1
  6881 ;; This function calls:
  6882 ;;		Nothing
  6883 ;; This function is called by:
  6884 ;;		_calc_temp_rs
  6885 ;;		_calc_temp_rc
  6886 ;;		_calc_rs_lo_avg
  6887 ;; This function uses a non-reentrant model
  6888 ;;
  6889                           
  6890                           
  6891                           ;psect for function ___lldiv
  6892  06D1                     ___lldiv:	
  6893                           
  6894                           ;incstack = 0
  6895                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  6896  06D1  01A0               	clrf	___lldiv@quotient
  6897  06D2  01A1               	clrf	___lldiv@quotient+1
  6898  06D3  01A2               	clrf	___lldiv@quotient+2
  6899  06D4  01A3               	clrf	___lldiv@quotient+3
  6900  06D5  0874               	movf	___lldiv@divisor+3,w
  6901  06D6  0473               	iorwf	___lldiv@divisor+2,w
  6902  06D7  0472               	iorwf	___lldiv@divisor+1,w
  6903  06D8  0471               	iorwf	___lldiv@divisor,w
  6904  06D9  1903               	skipnz
  6905  06DA  2F07               	goto	l3100
  6906  06DB  01A4               	clrf	___lldiv@counter
  6907  06DC                     L8:	
  6908  06DC  0AA4               	incf	___lldiv@counter,f
  6909  06DD  1BF4               	btfsc	___lldiv@divisor+3,7
  6910  06DE  2EE4               	goto	l3088
  6911  06DF  35F1               	lslf	___lldiv@divisor,f
  6912  06E0  0DF2               	rlf	___lldiv@divisor+1,f
  6913  06E1  0DF3               	rlf	___lldiv@divisor+2,f
  6914  06E2  0DF4               	rlf	___lldiv@divisor+3,f
  6915  06E3  2EDC               	goto	L8
  6916  06E4                     l3088:	
  6917  06E4  35A0               	lslf	___lldiv@quotient,f
  6918  06E5  0DA1               	rlf	___lldiv@quotient+1,f
  6919  06E6  0DA2               	rlf	___lldiv@quotient+2,f
  6920  06E7  0DA3               	rlf	___lldiv@quotient+3,f
  6921  06E8  0874               	movf	___lldiv@divisor+3,w
  6922  06E9  0278               	subwf	___lldiv@dividend+3,w
  6923  06EA  1D03               	skipz
  6924  06EB  2EF6               	goto	u1635
  6925  06EC  0873               	movf	___lldiv@divisor+2,w
  6926  06ED  0277               	subwf	___lldiv@dividend+2,w
  6927  06EE  1D03               	skipz
  6928  06EF  2EF6               	goto	u1635
  6929  06F0  0872               	movf	___lldiv@divisor+1,w
  6930  06F1  0276               	subwf	___lldiv@dividend+1,w
  6931  06F2  1D03               	skipz
  6932  06F3  2EF6               	goto	u1635
  6933  06F4  0871               	movf	___lldiv@divisor,w
  6934  06F5  0275               	subwf	___lldiv@dividend,w
  6935  06F6                     u1635:	
  6936  06F6  1C03               	skipc
  6937  06F7  2F01               	goto	l3096
  6938  06F8  0871               	movf	___lldiv@divisor,w
  6939  06F9  02F5               	subwf	___lldiv@dividend,f
  6940  06FA  0872               	movf	___lldiv@divisor+1,w
  6941  06FB  3BF6               	subwfb	___lldiv@dividend+1,f
  6942  06FC  0873               	movf	___lldiv@divisor+2,w
  6943  06FD  3BF7               	subwfb	___lldiv@dividend+2,f
  6944  06FE  0874               	movf	___lldiv@divisor+3,w
  6945  06FF  3BF8               	subwfb	___lldiv@dividend+3,f
  6946  0700  1420               	bsf	___lldiv@quotient,0
  6947  0701                     l3096:	
  6948  0701  36F4               	lsrf	___lldiv@divisor+3,f
  6949  0702  0CF3               	rrf	___lldiv@divisor+2,f
  6950  0703  0CF2               	rrf	___lldiv@divisor+1,f
  6951  0704  0CF1               	rrf	___lldiv@divisor,f
  6952  0705  0BA4               	decfsz	___lldiv@counter,f
  6953  0706  2EE4               	goto	l3088
  6954  0707                     l3100:	
  6955  0707  0823               	movf	___lldiv@quotient+3,w
  6956  0708  00F4               	movwf	?___lldiv+3
  6957  0709  0822               	movf	___lldiv@quotient+2,w
  6958  070A  00F3               	movwf	?___lldiv+2
  6959  070B  0821               	movf	___lldiv@quotient+1,w
  6960  070C  00F2               	movwf	?___lldiv+1
  6961  070D  0820               	movf	___lldiv@quotient,w
  6962  070E  00F1               	movwf	?___lldiv
  6963  070F  0008               	return
  6964  0710                     __end_of___lldiv:	
  6965  0710                     __ptext23:	
  6966 ;; *************** function _m_mem_set *****************
  6967 ;; Defined at:
  6968 ;;		line 32 in file "src/depend/m_string.c"
  6969 ;; Parameters:    Size  Location     Type
  6970 ;;  buf             1    wreg     PTR unsigned char 
  6971 ;;		 -> str(16), 
  6972 ;;  x               1    1[COMMON] unsigned char 
  6973 ;;  len             2    2[COMMON] unsigned int 
  6974 ;; Auto vars:     Size  Location     Type
  6975 ;;  buf             1    4[COMMON] PTR unsigned char 
  6976 ;;		 -> str(16), 
  6977 ;; Return value:  Size  Location     Type
  6978 ;;                  1    wreg      void 
  6979 ;; Registers used:
  6980 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6981 ;; Tracked objects:
  6982 ;;		On entry : 1F/0
  6983 ;;		On exit  : 1F/0
  6984 ;;		Unchanged: 1F/0
  6985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6986 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6987 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6989 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6990 ;;Total ram usage:        4 bytes
  6991 ;; Hardware stack levels used:    1
  6992 ;; Hardware stack levels required when called:    1
  6993 ;; This function calls:
  6994 ;;		Nothing
  6995 ;; This function is called by:
  6996 ;;		_m_int_2_str_ex
  6997 ;; This function uses a non-reentrant model
  6998 ;;
  6999                           
  7000                           
  7001                           ;psect for function _m_mem_set
  7002  0710                     _m_mem_set:	
  7003                           
  7004                           ;incstack = 0
  7005                           ; Regs used in _m_mem_set: [wreg+fsr1l+fsr1h+status,2+status,0]
  7006                           ;m_mem_set@buf stored from wreg
  7007  0710  00F4               	movwf	m_mem_set@buf
  7008  0711                     l2920:	
  7009                           ;m_string.c: 34: while(len--)
  7010                           
  7011  0711  3001               	movlw	1
  7012  0712  02F2               	subwf	m_mem_set@len,f
  7013  0713  3000               	movlw	0
  7014  0714  3BF3               	subwfb	m_mem_set@len+1,f
  7015  0715  0F72               	incfsz	m_mem_set@len,w
  7016  0716  2F1A               	goto	l2916
  7017  0717  0A73               	incf	m_mem_set@len+1,w
  7018  0718  1903               	btfsc	3,2
  7019  0719  0008               	return
  7020  071A                     l2916:	
  7021                           
  7022                           ;m_string.c: 35: {
  7023                           ;m_string.c: 36: *buf++=x;
  7024  071A  0874               	movf	m_mem_set@buf,w
  7025  071B  0086               	movwf	6
  7026  071C  3001               	movlw	1	; select bank2/3
  7027  071D  0087               	movwf	7
  7028  071E  0871               	movf	m_mem_set@x,w
  7029  071F  0081               	movwf	1
  7030  0720  0AF4               	incf	m_mem_set@buf,f
  7031  0721  2F11               	goto	l2920
  7032  0722                     __end_of_m_mem_set:	
  7033  0722                     __ptext46:	
  7034 ;; *************** function _EUSART_Initialize *****************
  7035 ;; Defined at:
  7036 ;;		line 55 in file "mcc_generated_files/eusart.c"
  7037 ;; Parameters:    Size  Location     Type
  7038 ;;		None
  7039 ;; Auto vars:     Size  Location     Type
  7040 ;;		None
  7041 ;; Return value:  Size  Location     Type
  7042 ;;                  1    wreg      void 
  7043 ;; Registers used:
  7044 ;;		wreg
  7045 ;; Tracked objects:
  7046 ;;		On entry : 1F/0
  7047 ;;		On exit  : 1F/1
  7048 ;;		Unchanged: 0/0
  7049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7053 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7054 ;;Total ram usage:        0 bytes
  7055 ;; Hardware stack levels used:    1
  7056 ;; Hardware stack levels required when called:    1
  7057 ;; This function calls:
  7058 ;;		Nothing
  7059 ;; This function is called by:
  7060 ;;		_SYSTEM_Initialize
  7061 ;; This function uses a non-reentrant model
  7062 ;;
  7063                           
  7064                           
  7065                           ;psect for function _EUSART_Initialize
  7066  0722                     _EUSART_Initialize:	
  7067  0722                     l2762:	
  7068                           ;incstack = 0
  7069                           ; Regs used in _EUSART_Initialize: [wreg]
  7070                           
  7071                           
  7072                           ;eusart.c: 60: BAUDCON = 0x08;
  7073  0722  3008               	movlw	8
  7074  0723  0023               	movlb	3	; select bank3
  7075  0724  009F               	movwf	31	;volatile
  7076                           
  7077                           ;eusart.c: 63: RCSTA = 0x90;
  7078  0725  3090               	movlw	144
  7079  0726  009D               	movwf	29	;volatile
  7080                           
  7081                           ;eusart.c: 66: TXSTA = 0x24;
  7082  0727  3024               	movlw	36
  7083  0728  009E               	movwf	30	;volatile
  7084                           
  7085                           ;eusart.c: 70: SPBRGL = 0xA0;
  7086  0729  30A0               	movlw	160
  7087  072A  009B               	movwf	27	;volatile
  7088                           
  7089                           ;eusart.c: 75: SPBRGH = 0x01;
  7090  072B  3001               	movlw	1
  7091  072C  009C               	movwf	28	;volatile
  7092                           
  7093                           ;eusart.c: 76: PIE1bits.RCIE = 1;
  7094  072D  0021               	movlb	1	; select bank1
  7095  072E  1691               	bsf	17,5	;volatile
  7096  072F  0008               	return
  7097  0730                     __end_of_EUSART_Initialize:	
  7098  0730                     PL6:	
  7099  0730  0874               	movf	?___lmul+3,w
  7100  0731  00AB               	movwf	___aldiv@dividend+3
  7101  0732  0873               	movf	?___lmul+2,w
  7102  0733  00AA               	movwf	___aldiv@dividend+2
  7103  0734  0872               	movf	?___lmul+1,w
  7104  0735  00A9               	movwf	___aldiv@dividend+1
  7105  0736  0871               	movf	?___lmul,w
  7106  0737  00A8               	movwf	___aldiv@dividend
  7107  0738  0008               	return
  7108  0739                     __end_ofPL6:	
  7109  0739                     PL10:	
  7110  0739  01A6               	clrf	___aldiv@divisor+2
  7111  073A  01A7               	clrf	___aldiv@divisor+3
  7112  073B  0021               	movlb	1	; select bank1
  7113  073C  0851               	movf	(_bbtu+3)^(0+128),w
  7114  073D  0020               	movlb	0	; select bank0
  7115  073E  00AB               	movwf	___aldiv@dividend+3
  7116  073F  0021               	movlb	1	; select bank1
  7117  0740  0850               	movf	(_bbtu+2)^(0+128),w
  7118  0741  0020               	movlb	0	; select bank0
  7119  0742  00AA               	movwf	___aldiv@dividend+2
  7120  0743  0021               	movlb	1	; select bank1
  7121  0744  084F               	movf	(_bbtu+1)^(0+128),w
  7122  0745  0020               	movlb	0	; select bank0
  7123  0746  00A9               	movwf	___aldiv@dividend+1
  7124  0747  0021               	movlb	1	; select bank1
  7125  0748  084E               	movf	_bbtu^(0+128),w
  7126  0749  0020               	movlb	0	; select bank0
  7127  074A  00A8               	movwf	___aldiv@dividend
  7128  074B  0008               	return
  7129  074C                     __end_ofPL10:	
  7130  074C                     PL14:	
  7131  074C  00B3               	movwf	m_int_2_str_ex@x+1
  7132  074D  3010               	movlw	16
  7133  074E  01B4               	clrf	m_int_2_str_ex@x+2
  7134  074F  01B5               	clrf	m_int_2_str_ex@x+3
  7135  0750  00B6               	movwf	m_int_2_str_ex@ssize
  7136  0751  3060               	movlw	(low (_str| (0+256)))& (0+255)
  7137  0752  01B7               	clrf	m_int_2_str_ex@ssize+1
  7138  0753  0008               	return
  7139  0754                     __end_ofPL14:	
  7140  0754                     PL16:	
  7141  0754  3F40               	moviw [0]fsr1
  7142  0755  0023               	movlb	3	; select bank3
  7143  0756  00B5               	movwf	??_main^(0+384)
  7144  0757  3F41               	moviw [1]fsr1
  7145  0758  00B6               	movwf	(??_main^(0+384)+1)
  7146  0759  0835               	movf	??_main^(0+384),w
  7147  075A  0008               	return
  7148  075B                     __end_ofPL16:	
  7149  075B                     PL18:	
  7150  075B  00A4               	movwf	___aldiv@divisor
  7151  075C  01A5               	clrf	___aldiv@divisor+1
  7152  075D  01A6               	clrf	___aldiv@divisor+2
  7153  075E  01A7               	clrf	___aldiv@divisor+3
  7154  075F  0021               	movlb	1	; select bank1
  7155  0760  0008               	return
  7156  0761                     __end_ofPL18:	
  7157  0761                     PL20:	
  7158  0761  0874               	movf	?___lldiv+3,w
  7159  0762  00B4               	movwf	calc_temp_rc@y+3
  7160  0763  0873               	movf	?___lldiv+2,w
  7161  0764  00B3               	movwf	calc_temp_rc@y+2
  7162  0765  0872               	movf	?___lldiv+1,w
  7163  0766  00B2               	movwf	calc_temp_rc@y+1
  7164  0767  0871               	movf	?___lldiv,w
  7165  0768  00B1               	movwf	calc_temp_rc@y
  7166  0769  0008               	return
  7167  076A                     __end_ofPL20:	
  7168  076A                     PL28:	
  7169  076A  00F1               	movwf	___lmul@multiplier
  7170  076B  300A               	movlw	10
  7171  076C  00F5               	movwf	___lmul@multiplicand
  7172  076D  01F6               	clrf	___lmul@multiplicand+1
  7173  076E  01F7               	clrf	___lmul@multiplicand+2
  7174  076F  01F8               	clrf	___lmul@multiplicand+3
  7175  0770  0008               	return
  7176  0771                     __end_ofPL28:	
  7177  0771                     PL30:	
  7178  0771  0842               	movf	m_int_2_str_ex@i,w
  7179  0772  0741               	addwf	m_int_2_str_ex@buf,w
  7180  0773  00B8               	movwf	??_m_int_2_str_ex
  7181  0774  0086               	movwf	6
  7182  0775  3001               	movlw	1	; select bank2/3
  7183  0776  0087               	movwf	7
  7184  0777  0008               	return
  7185  0778                     __end_ofPL30:	
  7186  0778                     PL32:	
  7187  0778  3063               	movlw	99
  7188  0779  009E               	movwf	30	;volatile
  7189  077A  019F               	clrf	31	;volatile
  7190  077B  019B               	clrf	27	;volatile
  7191  077C  019C               	clrf	28	;volatile
  7192  077D  0008               	return
  7193  077E                     __end_ofPL32:	
  7194  077E                     PL34:	
  7195  077E  3060               	movlw	low _str
  7196  077F  00F1               	movwf	uart_send_str@str
  7197  0780  3001               	movlw	high _str
  7198  0781  00F2               	movwf	uart_send_str@str+1
  7199  0782  0008               	return
  7200  0783                     __end_ofPL34:	
  7201  0783                     PL38:	
  7202  0783  00B2               	movwf	m_int_2_str_ex@x
  7203  0784  3010               	movlw	16
  7204  0785  00B6               	movwf	m_int_2_str_ex@ssize
  7205  0786  3060               	movlw	(low (_str| (0+256)))& (0+255)
  7206  0787  01B7               	clrf	m_int_2_str_ex@ssize+1
  7207  0788  0008               	return
  7208  0789                     __end_ofPL38:	
  7209  0789                     PL40:	
  7210  0789  3FC1               	movwi [1]fsr1
  7211  078A  3084               	movlw	132
  7212  078B  0086               	movwf	6
  7213  078C  3023               	movlw	35
  7214  078D  0087               	movwf	7
  7215  078E  0008               	return
  7216  078F                     __end_ofPL40:	
  7217  078F                     PL42:	
  7218  078F  3055               	movlw	85
  7219  0790  003C               	movlb	28	; select bank28
  7220  0791  008F               	movwf	15	;volatile
  7221  0792  30AA               	movlw	170
  7222  0793  008F               	movwf	15	;volatile
  7223  0794  0008               	return
  7224  0795                     __end_ofPL42:	
  7225  0795                     PL46:	
  7226  0795  3084               	movlw	132
  7227  0796  0086               	movwf	6
  7228  0797  3023               	movlw	35
  7229  0798  0087               	movwf	7
  7230  0799  3455               	retlw	85
  7231  079A                     __end_ofPL46:	
  7232  079A                     __ptext38:	
  7233 ;; *************** function _TMR2_Initialize *****************
  7234 ;; Defined at:
  7235 ;;		line 63 in file "mcc_generated_files/tmr2.c"
  7236 ;; Parameters:    Size  Location     Type
  7237 ;;		None
  7238 ;; Auto vars:     Size  Location     Type
  7239 ;;		None
  7240 ;; Return value:  Size  Location     Type
  7241 ;;                  1    wreg      void 
  7242 ;; Registers used:
  7243 ;;		wreg, status,2, status,0, pclath, cstack
  7244 ;; Tracked objects:
  7245 ;;		On entry : 1F/1
  7246 ;;		On exit  : 1F/0
  7247 ;;		Unchanged: 0/0
  7248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7253 ;;Total ram usage:        0 bytes
  7254 ;; Hardware stack levels used:    1
  7255 ;; Hardware stack levels required when called:    2
  7256 ;; This function calls:
  7257 ;;		_TMR2_SetInterruptHandler
  7258 ;;		_TMR2_StartTimer
  7259 ;; This function is called by:
  7260 ;;		_SYSTEM_Initialize
  7261 ;; This function uses a non-reentrant model
  7262 ;;
  7263                           
  7264                           
  7265                           ;psect for function _TMR2_Initialize
  7266  079A                     _TMR2_Initialize:	
  7267                           
  7268                           ;tmr2.c: 68: T2CON = 0x4B;
  7269                           
  7270                           ;incstack = 0
  7271                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7272  079A  304B               	movlw	75
  7273  079B  0020               	movlb	0	; select bank0
  7274  079C  009C               	movwf	28	;volatile
  7275                           
  7276                           ;tmr2.c: 71: PR2 = 0x7C;
  7277  079D  307C               	movlw	124
  7278  079E  009B               	movwf	27	;volatile
  7279                           
  7280                           ;tmr2.c: 74: TMR2 = 0x00;
  7281  079F  019A               	clrf	26	;volatile
  7282                           
  7283                           ;tmr2.c: 77: PIR1bits.TMR2IF = 0;
  7284  07A0  1091               	bcf	17,1	;volatile
  7285                           
  7286                           ;tmr2.c: 80: PIE1bits.TMR2IE = 1;
  7287  07A1  0021               	movlb	1	; select bank1
  7288  07A2  1491               	bsf	17,1	;volatile
  7289                           
  7290                           ;tmr2.c: 83: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
  7291  07A3  3000               	movlw	0
  7292  07A4  01F1               	clrf	TMR2_SetInterruptHandler@InterruptHandler
  7293  07A5  01F2               	clrf	TMR2_SetInterruptHandler@InterruptHandler+1
  7294  07A6  27A9  3180         	fcall	_TMR2_SetInterruptHandler
  7295                           
  7296                           ;tmr2.c: 86: TMR2_StartTimer();
  7297  07A8  2FAA               	ljmp	l2596
  7298  07A9                     __end_of_TMR2_Initialize:	
  7299  07A9                     __ptext40:	
  7300 ;; *************** function _TMR2_SetInterruptHandler *****************
  7301 ;; Defined at:
  7302 ;;		line 142 in file "mcc_generated_files/tmr2.c"
  7303 ;; Parameters:    Size  Location     Type
  7304 ;;  InterruptHan    2    1[COMMON] PTR FTN()void 
  7305 ;;		 -> TMR2_DefaultInterruptHandler(1), 
  7306 ;; Auto vars:     Size  Location     Type
  7307 ;;		None
  7308 ;; Return value:  Size  Location     Type
  7309 ;;                  1    wreg      void 
  7310 ;; Registers used:
  7311 ;;		None
  7312 ;; Tracked objects:
  7313 ;;		On entry : 1F/1
  7314 ;;		On exit  : 1F/1
  7315 ;;		Unchanged: 1F/0
  7316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7317 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7320 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7321 ;;Total ram usage:        2 bytes
  7322 ;; Hardware stack levels used:    1
  7323 ;; Hardware stack levels required when called:    1
  7324 ;; This function calls:
  7325 ;;		Nothing
  7326 ;; This function is called by:
  7327 ;;		_TMR2_Initialize
  7328 ;; This function uses a non-reentrant model
  7329 ;;
  7330                           
  7331                           
  7332                           ;psect for function _TMR2_SetInterruptHandler
  7333  07A9                     _TMR2_SetInterruptHandler:	
  7334                           
  7335                           ;incstack = 0
  7336                           ; Regs used in _TMR2_SetInterruptHandler: []
  7337  07A9  0008               	return
  7338  07AA                     __end_of_TMR2_SetInterruptHandler:	
  7339  07AA                     __ptext39:	
  7340 ;; *************** function _TMR2_StartTimer *****************
  7341 ;; Defined at:
  7342 ;;		line 89 in file "mcc_generated_files/tmr2.c"
  7343 ;; Parameters:    Size  Location     Type
  7344 ;;		None
  7345 ;; Auto vars:     Size  Location     Type
  7346 ;;		None
  7347 ;; Return value:  Size  Location     Type
  7348 ;;                  1    wreg      void 
  7349 ;; Registers used:
  7350 ;;		None
  7351 ;; Tracked objects:
  7352 ;;		On entry : 1F/1
  7353 ;;		On exit  : 1F/0
  7354 ;;		Unchanged: 0/0
  7355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7359 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7360 ;;Total ram usage:        0 bytes
  7361 ;; Hardware stack levels used:    1
  7362 ;; Hardware stack levels required when called:    1
  7363 ;; This function calls:
  7364 ;;		Nothing
  7365 ;; This function is called by:
  7366 ;;		_TMR2_Initialize
  7367 ;; This function uses a non-reentrant model
  7368 ;;
  7369                           
  7370                           
  7371                           ;psect for function _TMR2_StartTimer
  7372  07AA                     _TMR2_StartTimer:	
  7373  07AA                     l2596:	
  7374                           ;incstack = 0
  7375                           ; Regs used in _TMR2_StartTimer: []
  7376                           
  7377                           
  7378                           ;tmr2.c: 92: T2CONbits.TMR2ON = 1;
  7379  07AA  0020               	movlb	0	; select bank0
  7380  07AB  151C               	bsf	28,2	;volatile
  7381  07AC  0008               	return
  7382  07AD                     __end_of_TMR2_StartTimer:	
  7383  07AD                     __ptext24:	
  7384 ;; *************** function _m_mem_cpy *****************
  7385 ;; Defined at:
  7386 ;;		line 39 in file "src/depend/m_string.c"
  7387 ;; Parameters:    Size  Location     Type
  7388 ;;  d               1    wreg     PTR unsigned char 
  7389 ;;		 -> str(16), 
  7390 ;;  s               1    1[COMMON] PTR unsigned char 
  7391 ;;		 -> str(16), 
  7392 ;; Auto vars:     Size  Location     Type
  7393 ;;  d               1    2[COMMON] PTR unsigned char 
  7394 ;;		 -> str(16), 
  7395 ;; Return value:  Size  Location     Type
  7396 ;;                  1    wreg      void 
  7397 ;; Registers used:
  7398 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  7399 ;; Tracked objects:
  7400 ;;		On entry : 1F/0
  7401 ;;		On exit  : 1F/0
  7402 ;;		Unchanged: 1F/0
  7403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7404 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7405 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7407 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7408 ;;Total ram usage:        2 bytes
  7409 ;; Hardware stack levels used:    1
  7410 ;; Hardware stack levels required when called:    1
  7411 ;; This function calls:
  7412 ;;		Nothing
  7413 ;; This function is called by:
  7414 ;;		_m_int_2_str_ex
  7415 ;; This function uses a non-reentrant model
  7416 ;;
  7417                           
  7418                           
  7419                           ;psect for function _m_mem_cpy
  7420  07AD                     _m_mem_cpy:	
  7421                           
  7422                           ;incstack = 0
  7423                           ; Regs used in _m_mem_cpy: [wreg-fsr1h+status,2+status,0]
  7424                           ;m_mem_cpy@d stored from wreg
  7425  07AD  00F2               	movwf	m_mem_cpy@d
  7426  07AE                     l2930:	
  7427                           ;m_string.c: 41: while(*s!='\0')
  7428                           
  7429  07AE  0871               	movf	m_mem_cpy@s,w
  7430  07AF  0086               	movwf	6
  7431  07B0  3001               	movlw	1	; select bank2/3
  7432  07B1  0087               	movwf	7
  7433  07B2  0801               	movf	1,w
  7434  07B3  1903               	btfsc	3,2
  7435  07B4  2FC0               	goto	l2932
  7436                           
  7437                           ;m_string.c: 42: {
  7438                           ;m_string.c: 43: *d++=*s++;
  7439  07B5  0872               	movf	m_mem_cpy@d,w
  7440  07B6  0086               	movwf	6
  7441  07B7  0871               	movf	m_mem_cpy@s,w
  7442  07B8  0084               	movwf	4
  7443  07B9  3001               	movlw	1	; select bank2/3
  7444  07BA  0085               	movwf	5
  7445  07BB  0800               	movf	0,w
  7446  07BC  0081               	movwf	1
  7447  07BD  0AF1               	incf	m_mem_cpy@s,f
  7448  07BE  0AF2               	incf	m_mem_cpy@d,f
  7449  07BF  2FAE               	goto	l2930
  7450  07C0                     l2932:	
  7451                           
  7452                           ;m_string.c: 44: }
  7453                           ;m_string.c: 45: *d='\0';
  7454  07C0  0872               	movf	m_mem_cpy@d,w
  7455  07C1  0086               	movwf	6
  7456  07C2  3001               	movlw	1	; select bank2/3
  7457  07C3  0087               	movwf	7
  7458  07C4  0181               	clrf	1
  7459  07C5  0008               	return
  7460  07C6                     __end_of_m_mem_cpy:	
  7461                           
  7462                           	psect	bssCOMMON
  7463  007C                     __pbssCOMMON:	
  7464  007C                     _Event:	
  7465  007C                     	ds	1
  7466                           
  7467                           	psect	bssBANK0
  7468  0054                     __pbssBANK0:	
  7469  0054                     _PidKp:	
  7470  0054                     	ds	4
  7471  0058                     _rtAdcValueRcLo:	
  7472  0058                     	ds	2
  7473  005A                     _rtAdcValueRsLo:	
  7474  005A                     	ds	2
  7475  005C                     _voExpectAdcValue:	
  7476  005C                     	ds	2
  7477  005E                     _voExpectMv:	
  7478  005E                     	ds	2
  7479  0060                     _eusartRxCount:	
  7480  0060                     	ds	1
  7481  0061                     _eusartRxIdleTime_ms:	
  7482  0061                     	ds	1
  7483  0062                     _pidBbSm:	
  7484  0062                     	ds	1
  7485  0063                     _pidTestNum:	
  7486  0063                     	ds	1
  7487  0064                     _subTickerX:	
  7488  0064                     	ds	1
  7489  0065                     _subTickerX_1s:	
  7490  0065                     	ds	1
  7491                           
  7492                           	psect	dataBANK0
  7493  0066                     __pdataBANK0:	
  7494  0066                     _resRc:	
  7495  0066                     	ds	4
  7496  006A                     _resRs:	
  7497  006A                     	ds	4
  7498  006E                     _pwm2DutyForVout:	
  7499  006E                     	ds	2
  7500                           
  7501                           	psect	bssBANK1
  7502  00A0                     __pbssBANK1:	
  7503  00A0                     _err:	
  7504  00A0                     	ds	12
  7505  00AC                     _rsLoAvgBuf:	
  7506  00AC                     	ds	10
  7507  00B6                     _PidTd:	
  7508  00B6                     	ds	4
  7509  00BA                     _PidTi:	
  7510  00BA                     	ds	4
  7511  00BE                     _bbku:	
  7512  00BE                     	ds	4
  7513  00C2                     _bbt0:	
  7514  00C2                     	ds	4
  7515  00C6                     _bbt1:	
  7516  00C6                     	ds	4
  7517  00CA                     _bbta:	
  7518  00CA                     	ds	4
  7519  00CE                     _bbtu:	
  7520  00CE                     	ds	4
  7521  00D2                     _bbu:	
  7522  00D2                     	ds	4
  7523  00D6                     _globalTicker:	
  7524  00D6                     	ds	4
  7525  00DA                     _pwm2Ei:	
  7526  00DA                     	ds	2
  7527  00DC                     _rsLoAvg:	
  7528  00DC                     	ds	2
  7529  00DE                     _rtAdcValueRcHi:	
  7530  00DE                     	ds	2
  7531  00E0                     _rtAdcValueRsHi:	
  7532  00E0                     	ds	2
  7533  00E2                     _rtAdcValueVoFb:	
  7534  00E2                     	ds	2
  7535                           
  7536                           	psect	dataBANK1
  7537  00E4                     __pdataBANK1:	
  7538  00E4                     _bbmax:	
  7539  00E4                     	ds	4
  7540  00E8                     _bbmin:	
  7541  00E8                     	ds	4
  7542  00EC                     _pidU:	
  7543  00EC                     	ds	4
  7544                           
  7545                           	psect	bssBANK2
  7546  0120                     __pbssBANK2:	
  7547  0120                     _eusartRxBuffer:	
  7548  0120                     	ds	64
  7549  0160                     _str:	
  7550  0160                     	ds	16
  7551                           
  7552                           	psect	clrtext
  7553  07D2                     clear_ram0:	
  7554                           ;	Called with FSR0 containing the base address, and
  7555                           ;	btemp/btemp+1 has the size to clear
  7556                           
  7557  07D2  0064               	clrwdt	;clear the watchdog before getting into this loop
  7558  07D3                     clrloop0:	
  7559  07D3  3001               	movlw	1
  7560  07D4  0180               	clrf	0	;clear RAM location pointed to by FSR
  7561  07D5  3101               	addfsr 0,1
  7562  07D6  02FE               	subwf	126,f
  7563  07D7  3000               	movlw	0
  7564  07D8  3BFF               	subwfb	127,f
  7565  07D9  087F               	movf	127,w
  7566  07DA  047E               	iorwf	126,w
  7567  07DB  1903               	btfsc	3,2
  7568  07DC  3400               	retlw	0	;all done for this memory range, return
  7569  07DD  2FD3               	goto	clrloop0	;have we reached the end yet?
  7570                           
  7571                           	psect	inittext
  7572  07DE                     init_ram:	
  7573  07DE  00FE               	movwf	126
  7574  07DF                     initloop:	
  7575  07DF  0012               	moviw fsr0++
  7576  07E0  001E               	movwi fsr1++
  7577  07E1  3001               	movlw	1
  7578  07E2  02FE               	subwf	126,f
  7579  07E3  3000               	movlw	0
  7580  07E4  3BFF               	subwfb	127,f
  7581  07E5  087F               	movf	127,w
  7582  07E6  047E               	iorwf	126,w
  7583  07E7  1903               	btfsc	3,2
  7584  07E8  3400               	retlw	0
  7585  07E9  2FDF               	goto	initloop
  7586                           
  7587                           	psect	cstackBANK3
  7588  01A0                     __pcstackBANK3:	
  7589  01A0                     calc_expect_vout_adc_value@y1:	
  7590                           
  7591                           ; 4 bytes @ 0x0
  7592  01A0                     	ds	4
  7593  01A4                     calc_expect_vout_adc_value@x1:	
  7594                           
  7595                           ; 4 bytes @ 0x4
  7596  01A4                     	ds	4
  7597  01A8                     calc_expect_vout_adc_value@y0:	
  7598                           
  7599                           ; 4 bytes @ 0x8
  7600  01A8                     	ds	4
  7601  01AC                     calc_expect_vout_adc_value@x0:	
  7602                           
  7603                           ; 4 bytes @ 0xC
  7604  01AC                     	ds	4
  7605  01B0                     calc_expect_vout_adc_value@t32:	
  7606                           
  7607                           ; 4 bytes @ 0x10
  7608  01B0                     	ds	4
  7609  01B4                     calc_expect_vout_adc_value@i:	
  7610                           
  7611                           ; 1 bytes @ 0x14
  7612  01B4                     	ds	1
  7613  01B5                     ??_main:	
  7614                           
  7615                           ; 1 bytes @ 0x15
  7616  01B5                     	ds	2
  7617                           
  7618                           	psect	cstackCOMMON
  7619  0070                     __pcstackCOMMON:	
  7620  0070                     ?_TMR2_StartTimer:	
  7621  0070                     ?_PIN_MANAGER_Initialize:	
  7622                           ; 1 bytes @ 0x0
  7623                           
  7624  0070                     ?_OSCILLATOR_Initialize:	
  7625                           ; 1 bytes @ 0x0
  7626                           
  7627  0070                     ?_WDT_Initialize:	
  7628                           ; 1 bytes @ 0x0
  7629                           
  7630  0070                     ?_ADC1_Initialize:	
  7631                           ; 1 bytes @ 0x0
  7632                           
  7633  0070                     ?_EUSART_Initialize:	
  7634                           ; 1 bytes @ 0x0
  7635                           
  7636  0070                     ?_PWM2_Initialize:	
  7637                           ; 1 bytes @ 0x0
  7638                           
  7639  0070                     ?_PWM1_Initialize:	
  7640                           ; 1 bytes @ 0x0
  7641                           
  7642  0070                     ?_TMR2_Initialize:	
  7643                           ; 1 bytes @ 0x0
  7644                           
  7645  0070                     ?_INTERRUPT_InterruptManager:	
  7646                           ; 1 bytes @ 0x0
  7647                           
  7648  0070                     ??_INTERRUPT_InterruptManager:	
  7649                           ; 1 bytes @ 0x0
  7650                           
  7651  0070                     ?_FVR_Initialize:	
  7652                           ; 1 bytes @ 0x0
  7653                           
  7654  0070                     ?_SYSTEM_Initialize:	
  7655                           ; 1 bytes @ 0x0
  7656                           
  7657  0070                     ?_fvr_set_gain:	
  7658                           ; 1 bytes @ 0x0
  7659                           
  7660  0070                     ?_adc_init:	
  7661                           ; 1 bytes @ 0x0
  7662                           
  7663  0070                     ?_pid_pwm1_idrv_b_b:	
  7664                           ; 1 bytes @ 0x0
  7665                           
  7666  0070                     ?_pid_pwm1_idrv_run:	
  7667                           ; 1 bytes @ 0x0
  7668                           
  7669  0070                     ?_pid_pwm2_vout_run:	
  7670                           ; 1 bytes @ 0x0
  7671                           
  7672  0070                     ?_my_flash_read_system_erase:	
  7673                           ; 1 bytes @ 0x0
  7674                           
  7675  0070                     ?_sys_data_save:	
  7676                           ; 1 bytes @ 0x0
  7677                           
  7678  0070                     ?_main:	
  7679                           ; 1 bytes @ 0x0
  7680                           
  7681  0070                     ?_sys_data_init:	
  7682                           ; 1 bytes @ 0x0
  7683                           
  7684  0070                     INTERRUPT_InterruptManager@t8:	
  7685                           ; 2 bytes @ 0x0
  7686                           
  7687                           
  7688                           ; 1 bytes @ 0x0
  7689  0070                     	ds	1
  7690  0071                     ?_FLASH_EraseBlock:	
  7691  0071                     ?_TMR2_SetInterruptHandler:	
  7692                           ; 1 bytes @ 0x1
  7693                           
  7694  0071                     ??_TMR2_StartTimer:	
  7695                           ; 1 bytes @ 0x1
  7696                           
  7697  0071                     ??_PIN_MANAGER_Initialize:	
  7698                           ; 1 bytes @ 0x1
  7699                           
  7700  0071                     ??_OSCILLATOR_Initialize:	
  7701                           ; 1 bytes @ 0x1
  7702                           
  7703  0071                     ??_WDT_Initialize:	
  7704                           ; 1 bytes @ 0x1
  7705                           
  7706  0071                     ??_ADC1_Initialize:	
  7707                           ; 1 bytes @ 0x1
  7708                           
  7709  0071                     ??_EUSART_Initialize:	
  7710                           ; 1 bytes @ 0x1
  7711                           
  7712  0071                     ??_PWM2_Initialize:	
  7713                           ; 1 bytes @ 0x1
  7714                           
  7715  0071                     ??_PWM1_Initialize:	
  7716                           ; 1 bytes @ 0x1
  7717                           
  7718  0071                     ??_FVR_Initialize:	
  7719                           ; 1 bytes @ 0x1
  7720                           
  7721  0071                     ?_uart_send_str:	
  7722                           ; 1 bytes @ 0x1
  7723                           
  7724  0071                     ??_fvr_set_gain:	
  7725                           ; 1 bytes @ 0x1
  7726                           
  7727  0071                     ??_adc_init:	
  7728                           ; 1 bytes @ 0x1
  7729                           
  7730  0071                     ?_my_flash_system_read:	
  7731                           ; 1 bytes @ 0x1
  7732                           
  7733  0071                     ?_m_mem_set:	
  7734                           ; 1 bytes @ 0x1
  7735                           
  7736  0071                     ?_m_mem_cpy:	
  7737                           ; 1 bytes @ 0x1
  7738                           
  7739  0071                     ?_m_mem_cpy_len:	
  7740                           ; 1 bytes @ 0x1
  7741                           
  7742  0071                     ?_get_idrv_pwm1_duty:	
  7743                           ; 1 bytes @ 0x1
  7744                           
  7745  0071                     ?_get_vout_pwm2_duty:	
  7746                           ; 2 bytes @ 0x1
  7747                           
  7748  0071                     ?_my_flash_system_write:	
  7749                           ; 2 bytes @ 0x1
  7750                           
  7751  0071                     ?_crc_sum:	
  7752                           ; 2 bytes @ 0x1
  7753                           
  7754  0071                     ?___wmul:	
  7755                           ; 2 bytes @ 0x1
  7756                           
  7757  0071                     ?___awdiv:	
  7758                           ; 2 bytes @ 0x1
  7759                           
  7760  0071                     ?___lwdiv:	
  7761                           ; 2 bytes @ 0x1
  7762                           
  7763  0071                     ?___lmul:	
  7764                           ; 2 bytes @ 0x1
  7765                           
  7766  0071                     ?___almod:	
  7767                           ; 4 bytes @ 0x1
  7768                           
  7769  0071                     ?___lldiv:	
  7770                           ; 4 bytes @ 0x1
  7771                           
  7772  0071                     PIN_MANAGER_Initialize@state:	
  7773                           ; 4 bytes @ 0x1
  7774                           
  7775  0071                     fvr_set_gain@t8:	
  7776                           ; 1 bytes @ 0x1
  7777                           
  7778  0071                     m_mem_set@x:	
  7779                           ; 1 bytes @ 0x1
  7780                           
  7781  0071                     m_mem_cpy@s:	
  7782                           ; 1 bytes @ 0x1
  7783                           
  7784  0071                     FLASH_EraseBlock@startAddr:	
  7785                           ; 1 bytes @ 0x1
  7786                           
  7787  0071                     TMR2_SetInterruptHandler@InterruptHandler:	
  7788                           ; 2 bytes @ 0x1
  7789                           
  7790  0071                     uart_send_str@str:	
  7791                           ; 2 bytes @ 0x1
  7792                           
  7793  0071                     my_flash_system_read@buf:	
  7794                           ; 2 bytes @ 0x1
  7795                           
  7796  0071                     my_flash_system_write@buf:	
  7797                           ; 2 bytes @ 0x1
  7798                           
  7799  0071                     m_mem_cpy_len@s:	
  7800                           ; 2 bytes @ 0x1
  7801                           
  7802  0071                     crc_sum@buf:	
  7803                           ; 2 bytes @ 0x1
  7804                           
  7805  0071                     ___wmul@multiplier:	
  7806                           ; 2 bytes @ 0x1
  7807                           
  7808  0071                     ___awdiv@divisor:	
  7809                           ; 2 bytes @ 0x1
  7810                           
  7811  0071                     ___lwdiv@divisor:	
  7812                           ; 2 bytes @ 0x1
  7813                           
  7814  0071                     ___lmul@multiplier:	
  7815                           ; 2 bytes @ 0x1
  7816                           
  7817  0071                     ___almod@divisor:	
  7818                           ; 4 bytes @ 0x1
  7819                           
  7820  0071                     ___lldiv@divisor:	
  7821                           ; 4 bytes @ 0x1
  7822                           
  7823                           
  7824                           ; 4 bytes @ 0x1
  7825  0071                     	ds	1
  7826  0072                     ??_m_mem_cpy:	
  7827  0072                     fvr_set_gain@g:	
  7828                           ; 1 bytes @ 0x2
  7829                           
  7830  0072                     adc_init@ch:	
  7831                           ; 1 bytes @ 0x2
  7832                           
  7833  0072                     m_mem_cpy@d:	
  7834                           ; 1 bytes @ 0x2
  7835                           
  7836  0072                     m_mem_set@len:	
  7837                           ; 1 bytes @ 0x2
  7838                           
  7839                           
  7840                           ; 2 bytes @ 0x2
  7841  0072                     	ds	1
  7842  0073                     ??_FLASH_EraseBlock:	
  7843  0073                     ??_TMR2_SetInterruptHandler:	
  7844                           ; 1 bytes @ 0x3
  7845                           
  7846  0073                     ??_TMR2_Initialize:	
  7847                           ; 1 bytes @ 0x3
  7848                           
  7849  0073                     ??_SYSTEM_Initialize:	
  7850                           ; 1 bytes @ 0x3
  7851                           
  7852  0073                     ??_uart_send_str:	
  7853                           ; 1 bytes @ 0x3
  7854                           
  7855  0073                     ??_get_idrv_pwm1_duty:	
  7856                           ; 1 bytes @ 0x3
  7857                           
  7858  0073                     ?_set_idrv_pwm1_duty:	
  7859                           ; 1 bytes @ 0x3
  7860                           
  7861  0073                     ??_get_vout_pwm2_duty:	
  7862                           ; 1 bytes @ 0x3
  7863                           
  7864  0073                     ?_set_vout_pwm2_duty:	
  7865                           ; 1 bytes @ 0x3
  7866                           
  7867  0073                     ?_adc_sample:	
  7868                           ; 1 bytes @ 0x3
  7869                           
  7870  0073                     FLASH_EraseBlock@GIEBitValue:	
  7871                           ; 2 bytes @ 0x3
  7872                           
  7873  0073                     adc_sample@gfvr:	
  7874                           ; 1 bytes @ 0x3
  7875                           
  7876  0073                     set_idrv_pwm1_duty@duty:	
  7877                           ; 1 bytes @ 0x3
  7878                           
  7879  0073                     set_vout_pwm2_duty@duty:	
  7880                           ; 2 bytes @ 0x3
  7881                           
  7882  0073                     my_flash_system_read@len:	
  7883                           ; 2 bytes @ 0x3
  7884                           
  7885  0073                     my_flash_system_write@len:	
  7886                           ; 2 bytes @ 0x3
  7887                           
  7888  0073                     m_mem_cpy_len@len:	
  7889                           ; 2 bytes @ 0x3
  7890                           
  7891  0073                     crc_sum@len:	
  7892                           ; 2 bytes @ 0x3
  7893                           
  7894  0073                     ___wmul@multiplicand:	
  7895                           ; 2 bytes @ 0x3
  7896                           
  7897  0073                     ___awdiv@dividend:	
  7898                           ; 2 bytes @ 0x3
  7899                           
  7900  0073                     ___lwdiv@dividend:	
  7901                           ; 2 bytes @ 0x3
  7902                           
  7903                           
  7904                           ; 2 bytes @ 0x3
  7905  0073                     	ds	1
  7906  0074                     ??_my_flash_read_system_erase:	
  7907  0074                     ??_m_mem_set:	
  7908                           ; 1 bytes @ 0x4
  7909                           
  7910  0074                     adc_sample@num:	
  7911                           ; 1 bytes @ 0x4
  7912                           
  7913  0074                     m_mem_set@buf:	
  7914                           ; 1 bytes @ 0x4
  7915                           
  7916                           
  7917                           ; 1 bytes @ 0x4
  7918  0074                     	ds	1
  7919  0075                     ??_set_idrv_pwm1_duty:	
  7920  0075                     ??_set_vout_pwm2_duty:	
  7921                           ; 1 bytes @ 0x5
  7922                           
  7923  0075                     ??_adc_sample:	
  7924                           ; 1 bytes @ 0x5
  7925                           
  7926  0075                     ??_my_flash_system_read:	
  7927                           ; 1 bytes @ 0x5
  7928                           
  7929  0075                     ??_my_flash_system_write:	
  7930                           ; 1 bytes @ 0x5
  7931                           
  7932  0075                     ??_m_mem_cpy_len:	
  7933                           ; 1 bytes @ 0x5
  7934                           
  7935  0075                     ??_crc_sum:	
  7936                           ; 1 bytes @ 0x5
  7937                           
  7938  0075                     ??___wmul:	
  7939                           ; 1 bytes @ 0x5
  7940                           
  7941  0075                     ??___awdiv:	
  7942                           ; 1 bytes @ 0x5
  7943                           
  7944  0075                     ??___lwdiv:	
  7945                           ; 1 bytes @ 0x5
  7946                           
  7947  0075                     m_mem_cpy_len@d:	
  7948                           ; 1 bytes @ 0x5
  7949                           
  7950  0075                     ___awdiv@counter:	
  7951                           ; 1 bytes @ 0x5
  7952                           
  7953  0075                     set_idrv_pwm1_duty@t16:	
  7954                           ; 1 bytes @ 0x5
  7955                           
  7956  0075                     set_vout_pwm2_duty@t16:	
  7957                           ; 2 bytes @ 0x5
  7958                           
  7959  0075                     crc_sum@j:	
  7960                           ; 2 bytes @ 0x5
  7961                           
  7962  0075                     ___wmul@product:	
  7963                           ; 2 bytes @ 0x5
  7964                           
  7965  0075                     ___lwdiv@quotient:	
  7966                           ; 2 bytes @ 0x5
  7967                           
  7968  0075                     ___lmul@multiplicand:	
  7969                           ; 2 bytes @ 0x5
  7970                           
  7971  0075                     ___almod@dividend:	
  7972                           ; 4 bytes @ 0x5
  7973                           
  7974  0075                     ___lldiv@dividend:	
  7975                           ; 4 bytes @ 0x5
  7976                           
  7977                           
  7978                           ; 4 bytes @ 0x5
  7979  0075                     	ds	1
  7980  0076                     adc_sample@ch:	
  7981  0076                     ___awdiv@sign:	
  7982                           ; 1 bytes @ 0x6
  7983                           
  7984                           
  7985                           ; 1 bytes @ 0x6
  7986  0076                     	ds	1
  7987  0077                     my_flash_system_read@GIEBitValue:	
  7988  0077                     ___lwdiv@counter:	
  7989                           ; 1 bytes @ 0x7
  7990                           
  7991  0077                     adc_sample@ret:	
  7992                           ; 1 bytes @ 0x7
  7993                           
  7994  0077                     crc_sum@i:	
  7995                           ; 2 bytes @ 0x7
  7996                           
  7997  0077                     ___awdiv@quotient:	
  7998                           ; 2 bytes @ 0x7
  7999                           
  8000                           
  8001                           ; 2 bytes @ 0x7
  8002  0077                     	ds	1
  8003  0078                     my_flash_system_read@i:	
  8004                           
  8005                           ; 2 bytes @ 0x8
  8006  0078                     	ds	1
  8007  0079                     ??_calc_temp_rs:	
  8008  0079                     ??_pid_pwm1_idrv_b_b:	
  8009                           ; 1 bytes @ 0x9
  8010                           
  8011  0079                     ??_pid_pwm2_vout_run:	
  8012                           ; 1 bytes @ 0x9
  8013                           
  8014  0079                     ??___lmul:	
  8015                           ; 1 bytes @ 0x9
  8016                           
  8017  0079                     ??___aldiv:	
  8018                           ; 1 bytes @ 0x9
  8019                           
  8020  0079                     ??___almod:	
  8021                           ; 1 bytes @ 0x9
  8022                           
  8023  0079                     ??___lldiv:	
  8024                           ; 1 bytes @ 0x9
  8025                           
  8026  0079                     ?_calc_rs_lo_avg:	
  8027                           ; 1 bytes @ 0x9
  8028                           
  8029  0079                     adc_sample@i:	
  8030                           ; 2 bytes @ 0x9
  8031                           
  8032  0079                     ___almod@counter:	
  8033                           ; 1 bytes @ 0x9
  8034                           
  8035  0079                     calc_rs_lo_avg@x:	
  8036                           ; 1 bytes @ 0x9
  8037                           
  8038  0079                     crc_sum@crc:	
  8039                           ; 2 bytes @ 0x9
  8040                           
  8041                           
  8042                           ; 2 bytes @ 0x9
  8043  0079                     	ds	1
  8044  007A                     ___almod@sign:	
  8045  007A                     adc_sample@t16:	
  8046                           ; 1 bytes @ 0xA
  8047                           
  8048  007A                     my_flash_system_read@flashAddr:	
  8049                           ; 2 bytes @ 0xA
  8050                           
  8051                           
  8052                           ; 2 bytes @ 0xA
  8053  007A                     	ds	1
  8054  007B                     ??_crc_verify:	
  8055  007B                     ??_sys_data_save:	
  8056                           ; 1 bytes @ 0xB
  8057                           
  8058                           
  8059                           ; 1 bytes @ 0xB
  8060  007B                     	ds	1
  8061                           
  8062                           	psect	cstackBANK0
  8063  0020                     __pcstackBANK0:	
  8064  0020                     ?_crc_verify:	
  8065  0020                     ?_crc_append:	
  8066                           ; 1 bytes @ 0x0
  8067                           
  8068  0020                     pid_pwm2_vout_run@ei:	
  8069                           ; 1 bytes @ 0x0
  8070                           
  8071  0020                     my_flash_system_write@j:	
  8072                           ; 2 bytes @ 0x0
  8073                           
  8074  0020                     crc_verify@message:	
  8075                           ; 2 bytes @ 0x0
  8076                           
  8077  0020                     crc_append@message:	
  8078                           ; 2 bytes @ 0x0
  8079                           
  8080  0020                     ___lmul@product:	
  8081                           ; 2 bytes @ 0x0
  8082                           
  8083  0020                     ___lldiv@quotient:	
  8084                           ; 4 bytes @ 0x0
  8085                           
  8086                           
  8087                           ; 4 bytes @ 0x0
  8088  0020                     	ds	2
  8089  0022                     my_flash_system_write@GIEBitValue:	
  8090  0022                     pid_pwm2_vout_run@t16:	
  8091                           ; 1 bytes @ 0x2
  8092                           
  8093  0022                     crc_verify@n:	
  8094                           ; 2 bytes @ 0x2
  8095                           
  8096  0022                     crc_append@n:	
  8097                           ; 2 bytes @ 0x2
  8098                           
  8099                           
  8100                           ; 2 bytes @ 0x2
  8101  0022                     	ds	1
  8102  0023                     my_flash_system_write@blocNum:	
  8103                           
  8104                           ; 2 bytes @ 0x3
  8105  0023                     	ds	1
  8106  0024                     ??_crc_append:	
  8107  0024                     ?___aldiv:	
  8108                           ; 1 bytes @ 0x4
  8109                           
  8110  0024                     ___lldiv@counter:	
  8111                           ; 4 bytes @ 0x4
  8112                           
  8113  0024                     crc_verify@crccal:	
  8114                           ; 1 bytes @ 0x4
  8115                           
  8116  0024                     ___aldiv@divisor:	
  8117                           ; 2 bytes @ 0x4
  8118                           
  8119                           
  8120                           ; 4 bytes @ 0x4
  8121  0024                     	ds	1
  8122  0025                     ??_calc_rs_lo_avg:	
  8123  0025                     ?_calc_temp_rs:	
  8124                           ; 1 bytes @ 0x5
  8125                           
  8126  0025                     ?_calc_temp_rc:	
  8127                           ; 4 bytes @ 0x5
  8128                           
  8129  0025                     my_flash_system_write@loc:	
  8130                           ; 4 bytes @ 0x5
  8131                           
  8132                           
  8133                           ; 2 bytes @ 0x5
  8134  0025                     	ds	1
  8135  0026                     crc_verify@expected:	
  8136                           
  8137                           ; 2 bytes @ 0x6
  8138  0026                     	ds	1
  8139  0027                     my_flash_system_write@flashAddr:	
  8140  0027                     calc_rs_lo_avg@t32:	
  8141                           ; 2 bytes @ 0x7
  8142                           
  8143                           
  8144                           ; 4 bytes @ 0x7
  8145  0027                     	ds	1
  8146  0028                     ___aldiv@dividend:	
  8147                           
  8148                           ; 4 bytes @ 0x8
  8149  0028                     	ds	1
  8150  0029                     ??_calc_temp_rc:	
  8151  0029                     my_flash_system_write@i:	
  8152                           ; 1 bytes @ 0x9
  8153                           
  8154  0029                     crc_append@crc:	
  8155                           ; 2 bytes @ 0x9
  8156                           
  8157  0029                     calc_temp_rs@x:	
  8158                           ; 2 bytes @ 0x9
  8159                           
  8160                           
  8161                           ; 4 bytes @ 0x9
  8162  0029                     	ds	2
  8163  002B                     ??_sys_data_init:	
  8164  002B                     calc_rs_lo_avg@i:	
  8165                           ; 1 bytes @ 0xB
  8166                           
  8167                           
  8168                           ; 1 bytes @ 0xB
  8169  002B                     	ds	1
  8170  002C                     ___aldiv@counter:	
  8171                           
  8172                           ; 1 bytes @ 0xC
  8173  002C                     	ds	1
  8174  002D                     ___aldiv@sign:	
  8175  002D                     calc_temp_rs@y:	
  8176                           ; 1 bytes @ 0xD
  8177                           
  8178  002D                     calc_temp_rc@x:	
  8179                           ; 4 bytes @ 0xD
  8180                           
  8181                           
  8182                           ; 4 bytes @ 0xD
  8183  002D                     	ds	1
  8184  002E                     ___aldiv@quotient:	
  8185                           
  8186                           ; 4 bytes @ 0xE
  8187  002E                     	ds	3
  8188  0031                     sys_data_init@ret:	
  8189  0031                     calc_temp_rc@y:	
  8190                           ; 2 bytes @ 0x11
  8191                           
  8192                           
  8193                           ; 4 bytes @ 0x11
  8194  0031                     	ds	1
  8195  0032                     ?_m_int_2_str_ex:	
  8196  0032                     ??_pid_pwm1_idrv_run:	
  8197                           ; 1 bytes @ 0x12
  8198                           
  8199  0032                     ?_calc_expect_vout_adc_value:	
  8200                           ; 1 bytes @ 0x12
  8201                           
  8202  0032                     calc_expect_vout_adc_value@x:	
  8203                           ; 2 bytes @ 0x12
  8204                           
  8205  0032                     pid_pwm1_idrv_b_b@t32:	
  8206                           ; 2 bytes @ 0x12
  8207                           
  8208  0032                     m_int_2_str_ex@x:	
  8209                           ; 4 bytes @ 0x12
  8210                           
  8211                           
  8212                           ; 4 bytes @ 0x12
  8213  0032                     	ds	1
  8214  0033                     sys_data_init@i:	
  8215                           
  8216                           ; 2 bytes @ 0x13
  8217  0033                     	ds	1
  8218  0034                     ??_calc_expect_vout_adc_value:	
  8219                           
  8220                           ; 1 bytes @ 0x14
  8221  0034                     	ds	2
  8222  0036                     m_int_2_str_ex@ssize:	
  8223                           
  8224                           ; 2 bytes @ 0x16
  8225  0036                     	ds	2
  8226  0038                     ??_m_int_2_str_ex:	
  8227                           
  8228                           ; 1 bytes @ 0x18
  8229  0038                     	ds	4
  8230  003C                     m_int_2_str_ex@t:	
  8231                           
  8232                           ; 4 bytes @ 0x1C
  8233  003C                     	ds	2
  8234  003E                     pid_pwm1_idrv_run@ep:	
  8235                           
  8236                           ; 4 bytes @ 0x1E
  8237  003E                     	ds	2
  8238  0040                     m_int_2_str_ex@sig:	
  8239                           
  8240                           ; 1 bytes @ 0x20
  8241  0040                     	ds	1
  8242  0041                     m_int_2_str_ex@buf:	
  8243                           
  8244                           ; 1 bytes @ 0x21
  8245  0041                     	ds	1
  8246  0042                     m_int_2_str_ex@i:	
  8247  0042                     pid_pwm1_idrv_run@ei:	
  8248                           ; 1 bytes @ 0x22
  8249                           
  8250                           
  8251                           ; 4 bytes @ 0x22
  8252  0042                     	ds	4
  8253  0046                     pid_pwm1_idrv_run@ed:	
  8254                           
  8255                           ; 4 bytes @ 0x26
  8256  0046                     	ds	4
  8257  004A                     _pid_pwm1_idrv_run$2215:	
  8258                           
  8259                           ; 4 bytes @ 0x2A
  8260  004A                     	ds	4
  8261  004E                     pid_pwm1_idrv_run@t16:	
  8262                           
  8263                           ; 2 bytes @ 0x2E
  8264  004E                     	ds	2
  8265  0050                     pid_pwm1_idrv_run@t32:	
  8266                           
  8267                           ; 4 bytes @ 0x30
  8268  0050                     	ds	4
  8269                           
  8270                           	psect	text2
  8271  0DD0                     __ptext2:	
  8272 ;; *************** function _sys_data_save *****************
  8273 ;; Defined at:
  8274 ;;		line 119 in file "src/api/sysData.c"
  8275 ;; Parameters:    Size  Location     Type
  8276 ;;		None
  8277 ;; Auto vars:     Size  Location     Type
  8278 ;;		None
  8279 ;; Return value:  Size  Location     Type
  8280 ;;                  1    wreg      void 
  8281 ;; Registers used:
  8282 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8283 ;; Tracked objects:
  8284 ;;		On entry : 1F/1
  8285 ;;		On exit  : 1F/0
  8286 ;;		Unchanged: 0/0
  8287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8291 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8292 ;;Total ram usage:        0 bytes
  8293 ;; Hardware stack levels used:    1
  8294 ;; Hardware stack levels required when called:    3
  8295 ;; This function calls:
  8296 ;;		_crc_append
  8297 ;;		_my_flash_read_system_erase
  8298 ;;		_my_flash_system_write
  8299 ;; This function is called by:
  8300 ;;		_main
  8301 ;; This function uses a non-reentrant model
  8302 ;;
  8303                           
  8304                           
  8305                           ;psect for function _sys_data_save
  8306  0DD0                     _sys_data_save:	
  8307                           
  8308                           ;sysData.c: 121: crc_append((uint8_t*)&sysData,sizeof(sysData_t)-2);
  8309                           
  8310                           ;incstack = 0
  8311                           ; Regs used in _sys_data_save: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8312  0DD0  3084               	movlw	132
  8313  0DD1  0020               	movlb	0	; select bank0
  8314  0DD2  27F9  318D         	fcall	PL36	;call to abstracted procedure
  8315  0DD4  266E  318D         	fcall	_crc_append
  8316                           
  8317                           ;sysData.c: 122: my_flash_read_system_erase();
  8318  0DD6  2744  318D         	fcall	_my_flash_read_system_erase
  8319                           
  8320                           ;sysData.c: 123: my_flash_system_write((uint8_t*)&sysData,sizeof(sysData_t));
  8321  0DD8  27EC  318D         	fcall	PL24	;call to abstracted procedure
  8322  0DDA  2F73               	ljmp	l2836
  8323  0DDB                     __end_of_sys_data_save:	
  8324  0DDB                     __ptext3:	
  8325 ;; *************** function _sys_data_init *****************
  8326 ;; Defined at:
  8327 ;;		line 94 in file "src/api/sysData.c"
  8328 ;; Parameters:    Size  Location     Type
  8329 ;;		None
  8330 ;; Auto vars:     Size  Location     Type
  8331 ;;  i               2   19[BANK0 ] unsigned int 
  8332 ;;  ret             2   17[BANK0 ] unsigned int 
  8333 ;; Return value:  Size  Location     Type
  8334 ;;                  2  757[None  ] unsigned int 
  8335 ;; Registers used:
  8336 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8337 ;; Tracked objects:
  8338 ;;		On entry : 1F/1B
  8339 ;;		On exit  : 1F/0
  8340 ;;		Unchanged: 0/0
  8341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8343 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8344 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8345 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8346 ;;Total ram usage:       10 bytes
  8347 ;; Hardware stack levels used:    1
  8348 ;; Hardware stack levels required when called:    3
  8349 ;; This function calls:
  8350 ;;		___wmul
  8351 ;;		_crc_append
  8352 ;;		_crc_verify
  8353 ;;		_my_flash_read_system_erase
  8354 ;;		_my_flash_system_read
  8355 ;;		_my_flash_system_write
  8356 ;; This function is called by:
  8357 ;;		_main
  8358 ;; This function uses a non-reentrant model
  8359 ;;
  8360                           
  8361                           
  8362                           ;psect for function _sys_data_init
  8363  0DDB                     _sys_data_init:	
  8364                           
  8365                           ;sysData.c: 96: uint16_t ret,i;
  8366                           ;sysData.c: 97: my_flash_system_read((uint8_t*)&sysData,sizeof(sysData_t));
  8367                           
  8368                           ;incstack = 0
  8369                           ; Regs used in _sys_data_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8370  0DDB  3084               	movlw	132
  8371  0DDC  00F1               	movwf	my_flash_system_read@buf
  8372  0DDD  3023               	movlw	35
  8373  0DDE  00F2               	movwf	my_flash_system_read@buf+1
  8374  0DDF  305C               	movlw	92
  8375  0DE0  00F3               	movwf	my_flash_system_read@len
  8376  0DE1  01F4               	clrf	my_flash_system_read@len+1
  8377  0DE2  2712  318D         	fcall	_my_flash_system_read
  8378                           
  8379                           ;sysData.c: 98: ret=crc_verify((uint8_t*)&sysData,sizeof(sysData_t));
  8380  0DE4  3084               	movlw	132
  8381  0DE5  0020               	movlb	0	; select bank0
  8382  0DE6  00A0               	movwf	crc_verify@message
  8383  0DE7  3023               	movlw	35
  8384  0DE8  00A1               	movwf	crc_verify@message+1
  8385  0DE9  305C               	movlw	92
  8386  0DEA  00A2               	movwf	crc_verify@n
  8387  0DEB  01A3               	clrf	crc_verify@n+1
  8388  0DEC  269C  318D         	fcall	_crc_verify
  8389  0DEE  00B1               	movwf	sys_data_init@ret
  8390  0DEF  01B2               	clrf	sys_data_init@ret+1
  8391                           
  8392                           ;sysData.c: 99: if(!ret){
  8393  0DF0  0432               	iorwf	sys_data_init@ret+1,w
  8394  0DF1  1D03               	btfss	3,2
  8395  0DF2  0008               	return
  8396                           
  8397                           ;sysData.c: 100: sysData.pidSetFlg0=0xff;
  8398  0DF3  3084               	movlw	132
  8399  0DF4  0086               	movwf	6
  8400  0DF5  3023               	movlw	35
  8401  0DF6  0087               	movwf	7
  8402  0DF7  30FF               	movlw	255
  8403  0DF8  3FC0               	movwi [0]fsr1
  8404                           
  8405                           ;sysData.c: 101: sysData.pidSetFlg1=0xff;
  8406  0DF9  3085               	movlw	133
  8407  0DFA  0086               	movwf	6
  8408  0DFB  30FF               	movlw	255
  8409  0DFC  0081               	movwf	1
  8410                           
  8411                           ;sysData.c: 102: sysData.id=0xff;
  8412  0DFD  3086               	movlw	134
  8413  0DFE  0086               	movwf	6
  8414  0DFF  30FF               	movlw	255
  8415  0E00  0081               	movwf	1
  8416                           
  8417                           ;sysData.c: 103: for(i=0;i<20;i++){
  8418  0E01  01B3               	clrf	sys_data_init@i
  8419  0E02  01B4               	clrf	sys_data_init@i+1
  8420  0E03                     l3984:	
  8421                           
  8422                           ;sysData.c: 105: sysData.calibRsAdc[i]=9600+i*720;
  8423  0E03  0834               	movf	sys_data_init@i+1,w
  8424  0E04  00F2               	movwf	___wmul@multiplier+1
  8425  0E05  0833               	movf	sys_data_init@i,w
  8426  0E06  00F1               	movwf	___wmul@multiplier
  8427  0E07  30D0               	movlw	208
  8428  0E08  00F3               	movwf	___wmul@multiplicand
  8429  0E09  3002               	movlw	2
  8430  0E0A  00F4               	movwf	___wmul@multiplicand+1
  8431  0E0B  2659  318D         	fcall	___wmul
  8432  0E0D  0871               	movf	?___wmul,w
  8433  0E0E  3E80               	addlw	128
  8434  0E0F  00AB               	movwf	??_sys_data_init
  8435  0E10  3025               	movlw	37
  8436  0E11  3D72               	addwfc	?___wmul+1,w
  8437  0E12  00AC               	movwf	??_sys_data_init+1
  8438  0E13  0834               	movf	sys_data_init@i+1,w
  8439  0E14  00AE               	movwf	??_sys_data_init+3
  8440  0E15  0833               	movf	sys_data_init@i,w
  8441  0E16  00AD               	movwf	??_sys_data_init+2
  8442  0E17  308E               	movlw	142
  8443  0E18  35AD               	lslf	??_sys_data_init+2,f
  8444  0E19  0DAE               	rlf	??_sys_data_init+3,f
  8445  0E1A  00AF               	movwf	??_sys_data_init+4
  8446  0E1B  3023               	movlw	35
  8447  0E1C  00B0               	movwf	??_sys_data_init+5
  8448  0E1D  082D               	movf	??_sys_data_init+2,w
  8449  0E1E  072F               	addwf	??_sys_data_init+4,w
  8450  0E1F  0086               	movwf	6
  8451  0E20  082E               	movf	??_sys_data_init+3,w
  8452  0E21  3D30               	addwfc	??_sys_data_init+5,w
  8453  0E22  0087               	movwf	7
  8454  0E23  082B               	movf	??_sys_data_init,w
  8455  0E24  3FC0               	movwi [0]fsr1
  8456  0E25  082C               	movf	??_sys_data_init+1,w
  8457  0E26  3FC1               	movwi [1]fsr1
  8458                           
  8459                           ;sysData.c: 106: sysData.calibVoMV[i]=i*333;
  8460  0E27  0834               	movf	sys_data_init@i+1,w
  8461  0E28  00F2               	movwf	___wmul@multiplier+1
  8462  0E29  0833               	movf	sys_data_init@i,w
  8463  0E2A  00F1               	movwf	___wmul@multiplier
  8464  0E2B  304D               	movlw	77
  8465  0E2C  00F3               	movwf	___wmul@multiplicand
  8466  0E2D  3001               	movlw	1
  8467  0E2E  00F4               	movwf	___wmul@multiplicand+1
  8468  0E2F  2659  318D         	fcall	___wmul
  8469  0E31  0834               	movf	sys_data_init@i+1,w
  8470  0E32  00AC               	movwf	??_sys_data_init+1
  8471  0E33  0833               	movf	sys_data_init@i,w
  8472  0E34  00AB               	movwf	??_sys_data_init
  8473  0E35  30B6               	movlw	182
  8474  0E36  35AB               	lslf	??_sys_data_init,f
  8475  0E37  0DAC               	rlf	??_sys_data_init+1,f
  8476  0E38  00AD               	movwf	??_sys_data_init+2
  8477  0E39  3023               	movlw	35
  8478  0E3A  00AE               	movwf	??_sys_data_init+3
  8479  0E3B  082B               	movf	??_sys_data_init,w
  8480  0E3C  072D               	addwf	??_sys_data_init+2,w
  8481  0E3D  0086               	movwf	6
  8482  0E3E  082C               	movf	??_sys_data_init+1,w
  8483  0E3F  3D2E               	addwfc	??_sys_data_init+3,w
  8484  0E40  0087               	movwf	7
  8485  0E41  0871               	movf	?___wmul,w
  8486  0E42  3FC0               	movwi [0]fsr1
  8487  0E43  0872               	movf	?___wmul+1,w
  8488  0E44  3FC1               	movwi [1]fsr1
  8489  0E45  0AB3               	incf	sys_data_init@i,f
  8490  0E46  1903               	skipnz
  8491  0E47  0AB4               	incf	sys_data_init@i+1,f
  8492  0E48  3000               	movlw	0
  8493  0E49  0234               	subwf	sys_data_init@i+1,w
  8494  0E4A  3014               	movlw	20
  8495  0E4B  1903               	skipnz
  8496  0E4C  0233               	subwf	sys_data_init@i,w
  8497  0E4D  1C03               	skipc
  8498  0E4E  2E03               	goto	l3984
  8499                           
  8500                           ;sysData.c: 107: }
  8501                           ;sysData.c: 108: crc_append((uint8_t*)&sysData,sizeof(sysData_t)-2);
  8502  0E4F  3084               	movlw	132
  8503  0E50  27F9  318D         	fcall	PL36	;call to abstracted procedure
  8504  0E52  266E  318D         	fcall	_crc_append
  8505                           
  8506                           ;sysData.c: 110: my_flash_read_system_erase();
  8507  0E54  2744  318D         	fcall	_my_flash_read_system_erase
  8508                           
  8509                           ;sysData.c: 111: my_flash_system_write((uint8_t*)&sysData,sizeof(sysData_t));
  8510  0E56  27EC  318D         	fcall	PL24	;call to abstracted procedure
  8511  0E58  2F73               	ljmp	l2836
  8512  0E59                     __end_of_sys_data_init:	
  8513  0E59                     __ptext12:	
  8514 ;; *************** function ___wmul *****************
  8515 ;; Defined at:
  8516 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  8517 ;; Parameters:    Size  Location     Type
  8518 ;;  multiplier      2    1[COMMON] unsigned int 
  8519 ;;  multiplicand    2    3[COMMON] unsigned int 
  8520 ;; Auto vars:     Size  Location     Type
  8521 ;;  product         2    5[COMMON] unsigned int 
  8522 ;; Return value:  Size  Location     Type
  8523 ;;                  2    1[COMMON] unsigned int 
  8524 ;; Registers used:
  8525 ;;		wreg, status,2, status,0
  8526 ;; Tracked objects:
  8527 ;;		On entry : 1F/0
  8528 ;;		On exit  : 1F/0
  8529 ;;		Unchanged: 1F/0
  8530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8531 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8532 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8534 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8535 ;;Total ram usage:        6 bytes
  8536 ;; Hardware stack levels used:    1
  8537 ;; Hardware stack levels required when called:    1
  8538 ;; This function calls:
  8539 ;;		Nothing
  8540 ;; This function is called by:
  8541 ;;		_sys_data_init
  8542 ;; This function uses a non-reentrant model
  8543 ;;
  8544                           
  8545                           
  8546                           ;psect for function ___wmul
  8547  0E59                     ___wmul:	
  8548                           
  8549                           ;incstack = 0
  8550                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8551  0E59  01F5               	clrf	___wmul@product
  8552  0E5A  01F6               	clrf	___wmul@product+1
  8553  0E5B                     l2936:	
  8554  0E5B  1C71               	btfss	___wmul@multiplier,0
  8555  0E5C  2E61               	goto	l2940
  8556  0E5D  0873               	movf	___wmul@multiplicand,w
  8557  0E5E  07F5               	addwf	___wmul@product,f
  8558  0E5F  0874               	movf	___wmul@multiplicand+1,w
  8559  0E60  3DF6               	addwfc	___wmul@product+1,f
  8560  0E61                     l2940:	
  8561  0E61  35F3               	lslf	___wmul@multiplicand,f
  8562  0E62  0DF4               	rlf	___wmul@multiplicand+1,f
  8563  0E63  36F2               	lsrf	___wmul@multiplier+1,f
  8564  0E64  0CF1               	rrf	___wmul@multiplier,f
  8565  0E65  0871               	movf	___wmul@multiplier,w
  8566  0E66  0472               	iorwf	___wmul@multiplier+1,w
  8567  0E67  1D03               	btfss	3,2
  8568  0E68  2E5B               	goto	l2936
  8569  0E69  0876               	movf	___wmul@product+1,w
  8570  0E6A  00F2               	movwf	?___wmul+1
  8571  0E6B  0875               	movf	___wmul@product,w
  8572  0E6C  00F1               	movwf	?___wmul
  8573  0E6D  0008               	return
  8574  0E6E                     __end_of___wmul:	
  8575  0E6E                     __ptext10:	
  8576 ;; *************** function _crc_append *****************
  8577 ;; Defined at:
  8578 ;;		line 143 in file "src/depend/crc16.c"
  8579 ;; Parameters:    Size  Location     Type
  8580 ;;  message         2    0[BANK0 ] PTR unsigned char 
  8581 ;;		 -> sysData(92), 
  8582 ;;  n               2    2[BANK0 ] unsigned int 
  8583 ;; Auto vars:     Size  Location     Type
  8584 ;;  crc             2    9[BANK0 ] unsigned int 
  8585 ;; Return value:  Size  Location     Type
  8586 ;;                  1    wreg      void 
  8587 ;; Registers used:
  8588 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8589 ;; Tracked objects:
  8590 ;;		On entry : 1F/0
  8591 ;;		On exit  : 1F/0
  8592 ;;		Unchanged: 0/0
  8593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8594 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8595 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8596 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8597 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8598 ;;Total ram usage:       11 bytes
  8599 ;; Hardware stack levels used:    1
  8600 ;; Hardware stack levels required when called:    2
  8601 ;; This function calls:
  8602 ;;		_crc_sum
  8603 ;; This function is called by:
  8604 ;;		_sys_data_init
  8605 ;;		_sys_data_save
  8606 ;; This function uses a non-reentrant model
  8607 ;;
  8608                           
  8609                           
  8610                           ;psect for function _crc_append
  8611  0E6E                     _crc_append:	
  8612                           
  8613                           ;crc16.c: 145: uint16_t crc;
  8614                           ;crc16.c: 146: crc = crc_sum(message, n);
  8615                           
  8616                           ;incstack = 0
  8617                           ; Regs used in _crc_append: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8618  0E6E  0821               	movf	crc_append@message+1,w
  8619  0E6F  00F2               	movwf	crc_sum@buf+1
  8620  0E70  0820               	movf	crc_append@message,w
  8621  0E71  00F1               	movwf	crc_sum@buf
  8622  0E72  0823               	movf	crc_append@n+1,w
  8623  0E73  00F4               	movwf	crc_sum@len+1
  8624  0E74  0822               	movf	crc_append@n,w
  8625  0E75  00F3               	movwf	crc_sum@len
  8626  0E76  26C5               	fcall	_crc_sum
  8627  0E77  0872               	movf	?_crc_sum+1,w
  8628  0E78  00AA               	movwf	crc_append@crc+1
  8629  0E79  0871               	movf	?_crc_sum,w
  8630  0E7A  00A9               	movwf	crc_append@crc
  8631                           
  8632                           ;crc16.c: 147: message[n] = (uint8_t)(crc & 0xff);
  8633  0E7B  0822               	movf	crc_append@n,w
  8634  0E7C  0720               	addwf	crc_append@message,w
  8635  0E7D  00A4               	movwf	??_crc_append
  8636  0E7E  0823               	movf	crc_append@n+1,w
  8637  0E7F  3D21               	addwfc	crc_append@message+1,w
  8638  0E80  00A5               	movwf	??_crc_append+1
  8639  0E81  0824               	movf	??_crc_append,w
  8640  0E82  0086               	movwf	6
  8641  0E83  0825               	movf	??_crc_append+1,w
  8642  0E84  0087               	movwf	7
  8643  0E85  0829               	movf	crc_append@crc,w
  8644  0E86  0081               	movwf	1
  8645                           
  8646                           ;crc16.c: 148: message[n+1] = (uint8_t)((crc >> 8) & 0xff);
  8647  0E87  082A               	movf	crc_append@crc+1,w
  8648  0E88  00A4               	movwf	??_crc_append
  8649  0E89  0822               	movf	crc_append@n,w
  8650  0E8A  0720               	addwf	crc_append@message,w
  8651  0E8B  00A5               	movwf	??_crc_append+1
  8652  0E8C  0823               	movf	crc_append@n+1,w
  8653  0E8D  3D21               	addwfc	crc_append@message+1,w
  8654  0E8E  00A6               	movwf	??_crc_append+2
  8655  0E8F  0825               	movf	??_crc_append+1,w
  8656  0E90  3E01               	addlw	1
  8657  0E91  00A7               	movwf	??_crc_append+3
  8658  0E92  3000               	movlw	0
  8659  0E93  3D26               	addwfc	??_crc_append+2,w
  8660  0E94  00A8               	movwf	??_crc_append+4
  8661  0E95  0827               	movf	??_crc_append+3,w
  8662  0E96  0086               	movwf	6
  8663  0E97  0828               	movf	??_crc_append+4,w
  8664  0E98  0087               	movwf	7
  8665  0E99  0824               	movf	??_crc_append,w
  8666  0E9A  0081               	movwf	1
  8667  0E9B  0008               	return
  8668  0E9C                     __end_of_crc_append:	
  8669  0E9C                     __ptext8:	
  8670 ;; *************** function _crc_verify *****************
  8671 ;; Defined at:
  8672 ;;		line 135 in file "src/depend/crc16.c"
  8673 ;; Parameters:    Size  Location     Type
  8674 ;;  message         2    0[BANK0 ] PTR unsigned char 
  8675 ;;		 -> sysData(92), 
  8676 ;;  n               2    2[BANK0 ] unsigned int 
  8677 ;; Auto vars:     Size  Location     Type
  8678 ;;  expected        2    6[BANK0 ] unsigned int 
  8679 ;;  crccal          2    4[BANK0 ] unsigned int 
  8680 ;; Return value:  Size  Location     Type
  8681 ;;                  1    wreg      unsigned char 
  8682 ;; Registers used:
  8683 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8684 ;; Tracked objects:
  8685 ;;		On entry : 1F/0
  8686 ;;		On exit  : 1F/0
  8687 ;;		Unchanged: 0/0
  8688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8689 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8690 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8692 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8693 ;;Total ram usage:        8 bytes
  8694 ;; Hardware stack levels used:    1
  8695 ;; Hardware stack levels required when called:    2
  8696 ;; This function calls:
  8697 ;;		_crc_sum
  8698 ;;		_m_mem_cpy_len
  8699 ;; This function is called by:
  8700 ;;		_sys_data_init
  8701 ;; This function uses a non-reentrant model
  8702 ;;
  8703                           
  8704                           
  8705                           ;psect for function _crc_verify
  8706  0E9C                     _crc_verify:	
  8707                           
  8708                           ;crc16.c: 137: uint16_t expected,crccal;
  8709                           ;crc16.c: 138: m_mem_cpy_len((uint8_t*)(&expected),(message+n-2),2);
  8710                           
  8711                           ;incstack = 0
  8712                           ; Regs used in _crc_verify: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8713  0E9C  0822               	movf	crc_verify@n,w
  8714  0E9D  0720               	addwf	crc_verify@message,w
  8715  0E9E  00F1               	movwf	m_mem_cpy_len@s
  8716  0E9F  0823               	movf	crc_verify@n+1,w
  8717  0EA0  3D21               	addwfc	crc_verify@message+1,w
  8718  0EA1  00F2               	movwf	m_mem_cpy_len@s+1
  8719  0EA2  30FE               	movlw	-2
  8720  0EA3  07F1               	addwf	m_mem_cpy_len@s,f
  8721  0EA4  1C03               	skipc
  8722  0EA5  03F2               	decf	m_mem_cpy_len@s+1,f
  8723  0EA6  3002               	movlw	2
  8724  0EA7  00F3               	movwf	m_mem_cpy_len@len
  8725  0EA8  3026               	movlw	(low (crc_verify@expected| 0))& (0+255)
  8726  0EA9  01F4               	clrf	m_mem_cpy_len@len+1
  8727  0EAA  26FB  318D         	fcall	_m_mem_cpy_len
  8728                           
  8729                           ;crc16.c: 139: crccal=crc_sum(message,n - 2);
  8730  0EAC  0821               	movf	crc_verify@message+1,w
  8731  0EAD  00F2               	movwf	crc_sum@buf+1
  8732  0EAE  0820               	movf	crc_verify@message,w
  8733  0EAF  00F1               	movwf	crc_sum@buf
  8734  0EB0  0822               	movf	crc_verify@n,w
  8735  0EB1  3EFE               	addlw	254
  8736  0EB2  00F3               	movwf	crc_sum@len
  8737  0EB3  30FF               	movlw	255
  8738  0EB4  3D23               	addwfc	crc_verify@n+1,w
  8739  0EB5  00F4               	movwf	crc_sum@len+1
  8740  0EB6  26C5  318D         	fcall	_crc_sum
  8741  0EB8  0872               	movf	?_crc_sum+1,w
  8742  0EB9  00A5               	movwf	crc_verify@crccal+1
  8743  0EBA  0871               	movf	?_crc_sum,w
  8744  0EBB  00A4               	movwf	crc_verify@crccal
  8745                           
  8746                           ;crc16.c: 140: if(expected!=crccal)return 0;
  8747  0EBC  0825               	movf	crc_verify@crccal+1,w
  8748  0EBD  0627               	xorwf	crc_verify@expected+1,w
  8749  0EBE  1D03               	skipz
  8750  0EBF  2EC2               	goto	u2325
  8751  0EC0  0824               	movf	crc_verify@crccal,w
  8752  0EC1  0626               	xorwf	crc_verify@expected,w
  8753  0EC2                     u2325:	
  8754  0EC2  1D03               	btfss	3,2
  8755  0EC3  3400               	retlw	0
  8756                           
  8757                           ;crc16.c: 141: return 1;
  8758  0EC4  3401               	retlw	1
  8759  0EC5                     __end_of_crc_verify:	
  8760  0EC5                     __ptext11:	
  8761 ;; *************** function _crc_sum *****************
  8762 ;; Defined at:
  8763 ;;		line 116 in file "src/depend/crc16.c"
  8764 ;; Parameters:    Size  Location     Type
  8765 ;;  buf             2    1[COMMON] PTR unsigned char 
  8766 ;;		 -> sysData(92), 
  8767 ;;  len             2    3[COMMON] unsigned int 
  8768 ;; Auto vars:     Size  Location     Type
  8769 ;;  crc             2    9[COMMON] unsigned int 
  8770 ;;  i               2    7[COMMON] unsigned int 
  8771 ;;  j               2    5[COMMON] unsigned int 
  8772 ;;  Data            2    0        unsigned int 
  8773 ;; Return value:  Size  Location     Type
  8774 ;;                  2    1[COMMON] unsigned int 
  8775 ;; Registers used:
  8776 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8777 ;; Tracked objects:
  8778 ;;		On entry : 1F/0
  8779 ;;		On exit  : 1F/0
  8780 ;;		Unchanged: 1F/0
  8781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8782 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8783 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8785 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8786 ;;Total ram usage:       10 bytes
  8787 ;; Hardware stack levels used:    1
  8788 ;; Hardware stack levels required when called:    1
  8789 ;; This function calls:
  8790 ;;		Nothing
  8791 ;; This function is called by:
  8792 ;;		_crc_verify
  8793 ;;		_crc_append
  8794 ;; This function uses a non-reentrant model
  8795 ;;
  8796                           
  8797                           
  8798                           ;psect for function _crc_sum
  8799  0EC5                     _crc_sum:	
  8800                           
  8801                           ;crc16.c: 118: uint16_t crc=0xFFFF;
  8802                           
  8803                           ;incstack = 0
  8804                           ; Regs used in _crc_sum: [wreg+fsr1l+fsr1h+status,2+status,0]
  8805  0EC5  30FF               	movlw	255
  8806  0EC6  00F9               	movwf	crc_sum@crc
  8807  0EC7  00FA               	movwf	crc_sum@crc+1
  8808                           
  8809                           ;crc16.c: 119: uint16_t i, j, Data;
  8810                           ;crc16.c: 120: for ( j=0; j<len;j++){
  8811  0EC8  01F5               	clrf	crc_sum@j
  8812  0EC9  01F6               	clrf	crc_sum@j+1
  8813  0ECA                     l3674:	
  8814  0ECA  0874               	movf	crc_sum@len+1,w
  8815  0ECB  0276               	subwf	crc_sum@j+1,w
  8816  0ECC  1D03               	skipz
  8817  0ECD  2ED0               	goto	u2315
  8818  0ECE  0873               	movf	crc_sum@len,w
  8819  0ECF  0275               	subwf	crc_sum@j,w
  8820  0ED0                     u2315:	
  8821  0ED0  1803               	btfsc	3,0
  8822  0ED1  2EF6               	goto	l3676
  8823                           
  8824                           ;crc16.c: 121: crc=crc ^*buf++;
  8825  0ED2  0871               	movf	crc_sum@buf,w
  8826  0ED3  0086               	movwf	6
  8827  0ED4  0872               	movf	crc_sum@buf+1,w
  8828  0ED5  0087               	movwf	7
  8829  0ED6  0801               	movf	1,w
  8830  0ED7  06F9               	xorwf	crc_sum@crc,f
  8831  0ED8  0AF1               	incf	crc_sum@buf,f
  8832  0ED9  1903               	skipnz
  8833  0EDA  0AF2               	incf	crc_sum@buf+1,f
  8834                           
  8835                           ;crc16.c: 122: for ( i=0; i<8; i++){
  8836  0EDB  01F7               	clrf	crc_sum@i
  8837  0EDC  01F8               	clrf	crc_sum@i+1
  8838  0EDD                     l1074:	
  8839                           
  8840                           ;crc16.c: 124: if(crc&0x0001){
  8841  0EDD  1C79               	btfss	crc_sum@crc,0
  8842  0EDE  2EE6               	goto	l3668
  8843  0EDF  3001               	movlw	1
  8844                           
  8845                           ;crc16.c: 125: crc=crc>>1;
  8846  0EE0  36FA               	lsrf	crc_sum@crc+1,f
  8847  0EE1  0CF9               	rrf	crc_sum@crc,f
  8848                           
  8849                           ;crc16.c: 126: crc=crc^ 0xa001;
  8850  0EE2  06F9               	xorwf	crc_sum@crc,f
  8851  0EE3  30A0               	movlw	160
  8852  0EE4  06FA               	xorwf	crc_sum@crc+1,f
  8853                           
  8854                           ;crc16.c: 127: }else{
  8855  0EE5  2EE8               	goto	l1077
  8856  0EE6                     l3668:	
  8857                           
  8858                           ;crc16.c: 128: crc=crc>>1;
  8859  0EE6  36FA               	lsrf	crc_sum@crc+1,f
  8860  0EE7  0CF9               	rrf	crc_sum@crc,f
  8861  0EE8                     l1077:	
  8862  0EE8  0AF7               	incf	crc_sum@i,f
  8863  0EE9  1903               	skipnz
  8864  0EEA  0AF8               	incf	crc_sum@i+1,f
  8865  0EEB  3000               	movlw	0
  8866  0EEC  0278               	subwf	crc_sum@i+1,w
  8867  0EED  3008               	movlw	8
  8868  0EEE  1903               	skipnz
  8869  0EEF  0277               	subwf	crc_sum@i,w
  8870  0EF0  1C03               	skipc
  8871  0EF1  2EDD               	goto	l1074
  8872  0EF2  0AF5               	incf	crc_sum@j,f
  8873  0EF3  1903               	skipnz
  8874  0EF4  0AF6               	incf	crc_sum@j+1,f
  8875  0EF5  2ECA               	goto	l3674
  8876  0EF6                     l3676:	
  8877                           
  8878                           ;crc16.c: 129: }
  8879                           ;crc16.c: 130: }
  8880                           ;crc16.c: 132: }
  8881                           ;crc16.c: 133: return ( crc);
  8882  0EF6  087A               	movf	crc_sum@crc+1,w
  8883  0EF7  00F2               	movwf	?_crc_sum+1
  8884  0EF8  0879               	movf	crc_sum@crc,w
  8885  0EF9  00F1               	movwf	?_crc_sum
  8886  0EFA  0008               	return
  8887  0EFB                     __end_of_crc_sum:	
  8888  0EFB                     __ptext9:	
  8889 ;; *************** function _m_mem_cpy_len *****************
  8890 ;; Defined at:
  8891 ;;		line 47 in file "src/depend/m_string.c"
  8892 ;; Parameters:    Size  Location     Type
  8893 ;;  d               1    wreg     PTR unsigned char 
  8894 ;;		 -> crc_verify@expected(2), 
  8895 ;;  s               2    1[COMMON] PTR unsigned char 
  8896 ;;		 -> sysData(92), 
  8897 ;;  len             2    3[COMMON] unsigned int 
  8898 ;; Auto vars:     Size  Location     Type
  8899 ;;  d               1    5[COMMON] PTR unsigned char 
  8900 ;;		 -> crc_verify@expected(2), 
  8901 ;; Return value:  Size  Location     Type
  8902 ;;                  1    wreg      void 
  8903 ;; Registers used:
  8904 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  8905 ;; Tracked objects:
  8906 ;;		On entry : 1F/0
  8907 ;;		On exit  : 1F/0
  8908 ;;		Unchanged: 1F/0
  8909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8910 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8911 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8913 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8914 ;;Total ram usage:        5 bytes
  8915 ;; Hardware stack levels used:    1
  8916 ;; Hardware stack levels required when called:    1
  8917 ;; This function calls:
  8918 ;;		Nothing
  8919 ;; This function is called by:
  8920 ;;		_crc_verify
  8921 ;; This function uses a non-reentrant model
  8922 ;;
  8923                           
  8924                           
  8925                           ;psect for function _m_mem_cpy_len
  8926  0EFB                     _m_mem_cpy_len:	
  8927                           
  8928                           ;incstack = 0
  8929                           ; Regs used in _m_mem_cpy_len: [wreg-fsr1h+status,2+status,0]
  8930                           ;m_mem_cpy_len@d stored from wreg
  8931  0EFB  00F5               	movwf	m_mem_cpy_len@d
  8932  0EFC                     l2616:	
  8933                           ;m_string.c: 50: while(len)
  8934                           
  8935  0EFC  0873               	movf	m_mem_cpy_len@len,w
  8936  0EFD  0474               	iorwf	m_mem_cpy_len@len+1,w
  8937  0EFE  1903               	btfsc	3,2
  8938  0EFF  0008               	return
  8939                           
  8940                           ;m_string.c: 51: {
  8941                           ;m_string.c: 52: *d++=*s++;
  8942  0F00  0875               	movf	m_mem_cpy_len@d,w
  8943  0F01  0086               	movwf	6
  8944  0F02  0187               	clrf	7
  8945  0F03  0871               	movf	m_mem_cpy_len@s,w
  8946  0F04  0084               	movwf	4
  8947  0F05  0872               	movf	m_mem_cpy_len@s+1,w
  8948  0F06  0085               	movwf	5
  8949  0F07  0800               	movf	0,w
  8950  0F08  0081               	movwf	1
  8951  0F09  0AF1               	incf	m_mem_cpy_len@s,f
  8952  0F0A  1903               	skipnz
  8953  0F0B  0AF2               	incf	m_mem_cpy_len@s+1,f
  8954  0F0C  3001               	movlw	1
  8955  0F0D  0AF5               	incf	m_mem_cpy_len@d,f
  8956                           
  8957                           ;m_string.c: 53: len--;
  8958  0F0E  02F3               	subwf	m_mem_cpy_len@len,f
  8959  0F0F  3000               	movlw	0
  8960  0F10  3BF4               	subwfb	m_mem_cpy_len@len+1,f
  8961  0F11  2EFC               	goto	l2616
  8962  0F12                     __end_of_m_mem_cpy_len:	
  8963  0F12                     __ptext5:	
  8964 ;; *************** function _my_flash_system_read *****************
  8965 ;; Defined at:
  8966 ;;		line 21 in file "src/api/sysData.c"
  8967 ;; Parameters:    Size  Location     Type
  8968 ;;  buf             2    1[COMMON] PTR unsigned char 
  8969 ;;		 -> sysData(92), 
  8970 ;;  len             2    3[COMMON] unsigned int 
  8971 ;; Auto vars:     Size  Location     Type
  8972 ;;  flashAddr       2   10[COMMON] unsigned int 
  8973 ;;  i               2    8[COMMON] unsigned int 
  8974 ;;  GIEBitValue     1    7[COMMON] unsigned char 
  8975 ;; Return value:  Size  Location     Type
  8976 ;;                  1    wreg      void 
  8977 ;; Registers used:
  8978 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8979 ;; Tracked objects:
  8980 ;;		On entry : 1F/1B
  8981 ;;		On exit  : 7/3
  8982 ;;		Unchanged: 0/0
  8983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8984 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8985 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8986 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8987 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8988 ;;Total ram usage:       11 bytes
  8989 ;; Hardware stack levels used:    1
  8990 ;; Hardware stack levels required when called:    1
  8991 ;; This function calls:
  8992 ;;		Nothing
  8993 ;; This function is called by:
  8994 ;;		_sys_data_init
  8995 ;; This function uses a non-reentrant model
  8996 ;;
  8997                           
  8998                           
  8999                           ;psect for function _my_flash_system_read
  9000  0F12                     _my_flash_system_read:	
  9001                           
  9002                           ;sysData.c: 23: uint16_t flashAddr=0x1f80;
  9003                           
  9004                           ;incstack = 0
  9005                           ; Regs used in _my_flash_system_read: [wreg+fsr1l+fsr1h+status,2+status,0]
  9006  0F12  3080               	movlw	128
  9007  0F13  00FA               	movwf	my_flash_system_read@flashAddr
  9008  0F14  301F               	movlw	31
  9009  0F15  00FB               	movwf	my_flash_system_read@flashAddr+1
  9010                           
  9011                           ;sysData.c: 24: uint16_t i;
  9012                           ;sysData.c: 26: uint8_t GIEBitValue = INTCONbits.GIE;
  9013  0F16  3000               	movlw	0
  9014  0F17  1B8B               	btfsc	11,7	;volatile
  9015  0F18  3001               	movlw	1
  9016  0F19  00F7               	movwf	my_flash_system_read@GIEBitValue
  9017                           
  9018                           ;sysData.c: 28: INTCONbits.GIE = 0;
  9019  0F1A  138B               	bcf	11,7	;volatile
  9020                           
  9021                           ;sysData.c: 30: for(i=0;i<len;i++){
  9022  0F1B  01F8               	clrf	my_flash_system_read@i
  9023  0F1C  01F9               	clrf	my_flash_system_read@i+1
  9024  0F1D                     l2832:	
  9025  0F1D  0874               	movf	my_flash_system_read@len+1,w
  9026  0F1E  0279               	subwf	my_flash_system_read@i+1,w
  9027  0F1F  1D03               	skipz
  9028  0F20  2F23               	goto	u1265
  9029  0F21  0873               	movf	my_flash_system_read@len,w
  9030  0F22  0278               	subwf	my_flash_system_read@i,w
  9031  0F23                     u1265:	
  9032  0F23  1803               	btfsc	3,0
  9033  0F24  2F42               	goto	l2834
  9034                           
  9035                           ;sysData.c: 32: PMADRL = (flashAddr & 0x00FF);
  9036  0F25  087A               	movf	my_flash_system_read@flashAddr,w
  9037  0F26  0023               	movlb	3	; select bank3
  9038  0F27  0091               	movwf	17	;volatile
  9039                           
  9040                           ;sysData.c: 33: PMADRH = ((flashAddr & 0xFF00) >> 8);
  9041  0F28  087B               	movf	my_flash_system_read@flashAddr+1,w
  9042  0F29  0092               	movwf	18	;volatile
  9043                           
  9044                           ;sysData.c: 35: PMCON1bits.CFGS = 0;
  9045  0F2A  1315               	bcf	21,6	;volatile
  9046                           
  9047                           ;sysData.c: 36: PMCON1bits.RD = 1;
  9048  0F2B  1415               	bsf	21,0	;volatile
  9049                           
  9050                           ;sysData.c: 37: __nop();
  9051  0F2C  0000               	nop
  9052                           
  9053                           ;sysData.c: 38: __nop();
  9054  0F2D  0000               	nop
  9055                           
  9056                           ;sysData.c: 39: buf[i]=PMDATL;
  9057  0F2E  0878               	movf	my_flash_system_read@i,w
  9058  0F2F  0771               	addwf	my_flash_system_read@buf,w
  9059  0F30  00F5               	movwf	??_my_flash_system_read
  9060  0F31  0879               	movf	my_flash_system_read@i+1,w
  9061  0F32  3D72               	addwfc	my_flash_system_read@buf+1,w
  9062  0F33  00F6               	movwf	??_my_flash_system_read+1
  9063  0F34  0875               	movf	??_my_flash_system_read,w
  9064  0F35  0086               	movwf	6
  9065  0F36  0876               	movf	??_my_flash_system_read+1,w
  9066  0F37  0087               	movwf	7
  9067  0F38  0023               	movlb	3	; select bank3
  9068  0F39  0813               	movf	19,w	;volatile
  9069  0F3A  0081               	movwf	1
  9070                           
  9071                           ;sysData.c: 40: flashAddr++;
  9072  0F3B  0AFA               	incf	my_flash_system_read@flashAddr,f
  9073  0F3C  1903               	skipnz
  9074  0F3D  0AFB               	incf	my_flash_system_read@flashAddr+1,f
  9075  0F3E  0AF8               	incf	my_flash_system_read@i,f
  9076  0F3F  1903               	skipnz
  9077  0F40  0AF9               	incf	my_flash_system_read@i+1,f
  9078  0F41  2F1D               	goto	l2832
  9079  0F42                     l2834:	
  9080                           
  9081                           ;sysData.c: 41: }
  9082                           ;sysData.c: 42: INTCONbits.GIE = GIEBitValue;
  9083  0F42  0C77               	rrf	my_flash_system_read@GIEBitValue,w
  9084  0F43  2FF4               	ljmp	PL26	;call to abstracted procedure
  9085  0F44                     __end_of_my_flash_system_read:	
  9086  0F44                     __ptext6:	
  9087 ;; *************** function _my_flash_read_system_erase *****************
  9088 ;; Defined at:
  9089 ;;		line 8 in file "src/api/sysData.c"
  9090 ;; Parameters:    Size  Location     Type
  9091 ;;		None
  9092 ;; Auto vars:     Size  Location     Type
  9093 ;;		None
  9094 ;; Return value:  Size  Location     Type
  9095 ;;                  1    wreg      void 
  9096 ;; Registers used:
  9097 ;;		wreg, status,2, status,0, pclath, cstack
  9098 ;; Tracked objects:
  9099 ;;		On entry : 1F/0
  9100 ;;		On exit  : 1F/3
  9101 ;;		Unchanged: 0/0
  9102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9106 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9107 ;;Total ram usage:        0 bytes
  9108 ;; Hardware stack levels used:    1
  9109 ;; Hardware stack levels required when called:    2
  9110 ;; This function calls:
  9111 ;;		_FLASH_EraseBlock
  9112 ;; This function is called by:
  9113 ;;		_sys_data_init
  9114 ;;		_sys_data_save
  9115 ;; This function uses a non-reentrant model
  9116 ;;
  9117                           
  9118                           
  9119                           ;psect for function _my_flash_read_system_erase
  9120  0F44                     _my_flash_read_system_erase:	
  9121                           
  9122                           ;sysData.c: 15: FLASH_EraseBlock(0x1f80);
  9123                           
  9124                           ;incstack = 0
  9125                           ; Regs used in _my_flash_read_system_erase: [wreg+status,2+status,0+pclath+cstack]
  9126  0F44  3080               	movlw	128
  9127  0F45  00F1               	movwf	FLASH_EraseBlock@startAddr
  9128  0F46  301F               	movlw	31
  9129  0F47  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  9130  0F48  275B  318D         	fcall	_FLASH_EraseBlock
  9131                           
  9132                           ;sysData.c: 16: FLASH_EraseBlock(0x1f80+32);
  9133  0F4A  30A0               	movlw	160
  9134  0F4B  00F1               	movwf	FLASH_EraseBlock@startAddr
  9135  0F4C  301F               	movlw	31
  9136  0F4D  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  9137  0F4E  275B  318D         	fcall	_FLASH_EraseBlock
  9138                           
  9139                           ;sysData.c: 17: FLASH_EraseBlock(0x1f80+64);
  9140  0F50  30C0               	movlw	192
  9141  0F51  00F1               	movwf	FLASH_EraseBlock@startAddr
  9142  0F52  301F               	movlw	31
  9143  0F53  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  9144  0F54  275B  318D         	fcall	_FLASH_EraseBlock
  9145                           
  9146                           ;sysData.c: 18: FLASH_EraseBlock(0x1f80+96);
  9147  0F56  30E0               	movlw	224
  9148  0F57  00F1               	movwf	FLASH_EraseBlock@startAddr
  9149  0F58  301F               	movlw	31
  9150  0F59  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  9151  0F5A  2F5B               	ljmp	l2568
  9152  0F5B                     __end_of_my_flash_read_system_erase:	
  9153  0F5B                     __ptext7:	
  9154 ;; *************** function _FLASH_EraseBlock *****************
  9155 ;; Defined at:
  9156 ;;		line 147 in file "mcc_generated_files/memory.c"
  9157 ;; Parameters:    Size  Location     Type
  9158 ;;  startAddr       2    1[COMMON] unsigned int 
  9159 ;; Auto vars:     Size  Location     Type
  9160 ;;  GIEBitValue     1    3[COMMON] unsigned char 
  9161 ;; Return value:  Size  Location     Type
  9162 ;;                  1    wreg      void 
  9163 ;; Registers used:
  9164 ;;		wreg, status,2, status,0
  9165 ;; Tracked objects:
  9166 ;;		On entry : 1C/0
  9167 ;;		On exit  : 1F/3
  9168 ;;		Unchanged: 0/0
  9169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9170 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9171 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9173 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9174 ;;Total ram usage:        3 bytes
  9175 ;; Hardware stack levels used:    1
  9176 ;; Hardware stack levels required when called:    1
  9177 ;; This function calls:
  9178 ;;		Nothing
  9179 ;; This function is called by:
  9180 ;;		_my_flash_read_system_erase
  9181 ;; This function uses a non-reentrant model
  9182 ;;
  9183                           
  9184                           
  9185                           ;psect for function _FLASH_EraseBlock
  9186  0F5B                     _FLASH_EraseBlock:	
  9187  0F5B                     l2568:	
  9188                           ;incstack = 0
  9189                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  9190                           
  9191                           
  9192                           ;memory.c: 149: uint8_t GIEBitValue = INTCONbits.GIE;
  9193  0F5B  3000               	movlw	0
  9194  0F5C  1B8B               	btfsc	11,7	;volatile
  9195  0F5D  3001               	movlw	1
  9196  0F5E  00F3               	movwf	FLASH_EraseBlock@GIEBitValue
  9197                           
  9198                           ;memory.c: 152: INTCONbits.GIE = 0;
  9199  0F5F  138B               	bcf	11,7	;volatile
  9200                           
  9201                           ;memory.c: 154: PMADRL = (startAddr & 0xFF);
  9202  0F60  0871               	movf	FLASH_EraseBlock@startAddr,w
  9203  0F61  0023               	movlb	3	; select bank3
  9204  0F62  0091               	movwf	17	;volatile
  9205                           
  9206                           ;memory.c: 156: PMADRH = ((startAddr & 0xFF00) >> 8);
  9207  0F63  0872               	movf	FLASH_EraseBlock@startAddr+1,w
  9208  0F64  0092               	movwf	18	;volatile
  9209                           
  9210                           ;memory.c: 159: PMCON1bits.CFGS = 0;
  9211  0F65  1315               	bcf	21,6	;volatile
  9212                           
  9213                           ;memory.c: 160: PMCON1bits.FREE = 1;
  9214  0F66  1615               	bsf	21,4	;volatile
  9215                           
  9216                           ;memory.c: 161: PMCON1bits.WREN = 1;
  9217  0F67  1515               	bsf	21,2	;volatile
  9218                           
  9219                           ;memory.c: 164: PMCON2 = 0x55;
  9220  0F68  3055               	movlw	85
  9221  0F69  0096               	movwf	22	;volsfr
  9222                           
  9223                           ;memory.c: 165: PMCON2 = 0xAA;
  9224  0F6A  30AA               	movlw	170
  9225  0F6B  0096               	movwf	22	;volsfr
  9226                           
  9227                           ;memory.c: 166: PMCON1bits.WR = 1;
  9228  0F6C  1495               	bsf	21,1	;volatile
  9229                           
  9230                           ;memory.c: 167: __nop();
  9231  0F6D  0000               	nop
  9232                           
  9233                           ;memory.c: 168: __nop();
  9234  0F6E  0000               	nop
  9235                           
  9236                           ;memory.c: 170: PMCON1bits.WREN = 0;
  9237  0F6F  0023               	movlb	3	; select bank3
  9238  0F70  1115               	bcf	21,2	;volatile
  9239                           
  9240                           ;memory.c: 171: INTCONbits.GIE = GIEBitValue;
  9241  0F71  0C73               	rrf	FLASH_EraseBlock@GIEBitValue,w
  9242  0F72  2FF4               	ljmp	PL26	;call to abstracted procedure
  9243  0F73                     __end_of_FLASH_EraseBlock:	
  9244  0F73                     __ptext4:	
  9245 ;; *************** function _my_flash_system_write *****************
  9246 ;; Defined at:
  9247 ;;		line 45 in file "src/api/sysData.c"
  9248 ;; Parameters:    Size  Location     Type
  9249 ;;  buf             2    1[COMMON] PTR unsigned char 
  9250 ;;		 -> sysData(92), 
  9251 ;;  len             2    3[COMMON] unsigned int 
  9252 ;; Auto vars:     Size  Location     Type
  9253 ;;  i               2    9[BANK0 ] unsigned int 
  9254 ;;  flashAddr       2    7[BANK0 ] unsigned int 
  9255 ;;  loc             2    5[BANK0 ] unsigned int 
  9256 ;;  blocNum         2    3[BANK0 ] unsigned int 
  9257 ;;  j               2    0[BANK0 ] unsigned int 
  9258 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
  9259 ;; Return value:  Size  Location     Type
  9260 ;;                  2    1[COMMON] unsigned int 
  9261 ;; Registers used:
  9262 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9263 ;; Tracked objects:
  9264 ;;		On entry : 1F/3
  9265 ;;		On exit  : 1F/0
  9266 ;;		Unchanged: 0/0
  9267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9268 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9269 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9270 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9271 ;;      Totals:         5      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9272 ;;Total ram usage:       16 bytes
  9273 ;; Hardware stack levels used:    1
  9274 ;; Hardware stack levels required when called:    1
  9275 ;; This function calls:
  9276 ;;		Nothing
  9277 ;; This function is called by:
  9278 ;;		_sys_data_init
  9279 ;;		_sys_data_save
  9280 ;; This function uses a non-reentrant model
  9281 ;;
  9282                           
  9283                           
  9284                           ;psect for function _my_flash_system_write
  9285  0F73                     _my_flash_system_write:	
  9286  0F73                     l2836:	
  9287                           ;incstack = 0
  9288                           ; Regs used in _my_flash_system_write: [wreg+fsr1l+fsr1h+status,2+status,0]
  9289                           
  9290                           
  9291                           ;sysData.c: 48: uint16_t loc,j,i=0;
  9292  0F73  0020               	movlb	0	; select bank0
  9293  0F74  3080               	movlw	128
  9294  0F75  01A9               	clrf	my_flash_system_write@i
  9295  0F76  01AA               	clrf	my_flash_system_write@i+1
  9296                           
  9297                           ;sysData.c: 49: uint16_t flashAddr=0x1f80;
  9298  0F77  00A7               	movwf	my_flash_system_write@flashAddr
  9299  0F78  301F               	movlw	31
  9300  0F79  00A8               	movwf	my_flash_system_write@flashAddr+1
  9301                           
  9302                           ;sysData.c: 50: uint8_t GIEBitValue=INTCONbits.GIE;
  9303  0F7A  3000               	movlw	0
  9304  0F7B  1B8B               	btfsc	11,7	;volatile
  9305  0F7C  3001               	movlw	1
  9306  0F7D  00A2               	movwf	my_flash_system_write@GIEBitValue
  9307                           
  9308                           ;sysData.c: 52: blocNum=len/32;
  9309  0F7E  0874               	movf	my_flash_system_write@len+1,w
  9310  0F7F  00A4               	movwf	my_flash_system_write@blocNum+1
  9311  0F80  0873               	movf	my_flash_system_write@len,w
  9312  0F81  00A3               	movwf	my_flash_system_write@blocNum
  9313  0F82  3005               	movlw	5
  9314  0F83                     u1275:	
  9315  0F83  36A4               	lsrf	my_flash_system_write@blocNum+1,f
  9316  0F84  0CA3               	rrf	my_flash_system_write@blocNum,f
  9317  0F85  0B89               	decfsz	9,f
  9318  0F86  2F83               	goto	u1275
  9319                           
  9320                           ;sysData.c: 53: if(len%32)blocNum++;
  9321  0F87  0873               	movf	my_flash_system_write@len,w
  9322  0F88  391F               	andlw	31
  9323  0F89  1903               	btfsc	3,2
  9324  0F8A  2F8E               	goto	l2848
  9325  0F8B  0AA3               	incf	my_flash_system_write@blocNum,f
  9326  0F8C  1903               	skipnz
  9327  0F8D  0AA4               	incf	my_flash_system_write@blocNum+1,f
  9328  0F8E                     l2848:	
  9329                           
  9330                           ;sysData.c: 55: INTCONbits.GIE = 0;
  9331  0F8E  138B               	bcf	11,7	;volatile
  9332                           
  9333                           ;sysData.c: 56: loc=0;
  9334  0F8F  01A5               	clrf	my_flash_system_write@loc
  9335  0F90  01A6               	clrf	my_flash_system_write@loc+1
  9336                           
  9337                           ;sysData.c: 57: for(j=0;j<blocNum;j++){
  9338  0F91  01A0               	clrf	my_flash_system_write@j
  9339  0F92  01A1               	clrf	my_flash_system_write@j+1
  9340  0F93                     l2888:	
  9341  0F93  0824               	movf	my_flash_system_write@blocNum+1,w
  9342  0F94  0221               	subwf	my_flash_system_write@j+1,w
  9343  0F95  1D03               	skipz
  9344  0F96  2F99               	goto	u1325
  9345  0F97  0823               	movf	my_flash_system_write@blocNum,w
  9346  0F98  0220               	subwf	my_flash_system_write@j,w
  9347  0F99                     u1325:	
  9348  0F99  1803               	btfsc	3,0
  9349  0F9A  2FEA               	goto	l2890
  9350                           
  9351                           ;sysData.c: 58: PMCON1bits.CFGS = 0;
  9352  0F9B  0023               	movlb	3	; select bank3
  9353  0F9C  1315               	bcf	21,6	;volatile
  9354                           
  9355                           ;sysData.c: 59: PMCON1bits.WREN = 1;
  9356  0F9D  1515               	bsf	21,2	;volatile
  9357                           
  9358                           ;sysData.c: 60: PMCON1bits.LWLO = 1;
  9359  0F9E  1695               	bsf	21,5	;volatile
  9360                           
  9361                           ;sysData.c: 62: for(i=0;i<32;i++){
  9362  0F9F  0020               	movlb	0	; select bank0
  9363  0FA0  01A9               	clrf	my_flash_system_write@i
  9364  0FA1  01AA               	clrf	my_flash_system_write@i+1
  9365  0FA2                     l2860:	
  9366                           
  9367                           ;sysData.c: 64: PMADRL = (flashAddr & 0xFF);
  9368  0FA2  0827               	movf	my_flash_system_write@flashAddr,w
  9369  0FA3  0023               	movlb	3	; select bank3
  9370  0FA4  0091               	movwf	17	;volatile
  9371                           
  9372                           ;sysData.c: 66: PMADRH = ((flashAddr & 0xFF00) >> 8);
  9373  0FA5  0020               	movlb	0	; select bank0
  9374  0FA6  0828               	movf	my_flash_system_write@flashAddr+1,w
  9375  0FA7  0023               	movlb	3	; select bank3
  9376  0FA8  0092               	movwf	18	;volatile
  9377                           
  9378                           ;sysData.c: 69: if(loc<len){
  9379  0FA9  0874               	movf	my_flash_system_write@len+1,w
  9380  0FAA  0020               	movlb	0	; select bank0
  9381  0FAB  0226               	subwf	my_flash_system_write@loc+1,w
  9382  0FAC  1D03               	skipz
  9383  0FAD  2FB0               	goto	u1295
  9384  0FAE  0873               	movf	my_flash_system_write@len,w
  9385  0FAF  0225               	subwf	my_flash_system_write@loc,w
  9386  0FB0                     u1295:	
  9387  0FB0  1803               	skipnc
  9388  0FB1  2FBC               	goto	l2864
  9389                           
  9390                           ;sysData.c: 70: PMDATL = buf[loc];
  9391  0FB2  0825               	movf	my_flash_system_write@loc,w
  9392  0FB3  0771               	addwf	my_flash_system_write@buf,w
  9393  0FB4  0086               	movwf	6
  9394  0FB5  0826               	movf	my_flash_system_write@loc+1,w
  9395  0FB6  3D72               	addwfc	my_flash_system_write@buf+1,w
  9396  0FB7  0087               	movwf	7
  9397  0FB8  0801               	movf	1,w
  9398  0FB9  0023               	movlb	3	; select bank3
  9399  0FBA  0093               	movwf	19	;volatile
  9400                           
  9401                           ;sysData.c: 71: }else{
  9402  0FBB  2FBE               	goto	l2866
  9403  0FBC                     l2864:	
  9404                           
  9405                           ;sysData.c: 72: PMDATL = 0x00;
  9406  0FBC  0023               	movlb	3	; select bank3
  9407  0FBD  0193               	clrf	19	;volatile
  9408  0FBE                     l2866:	
  9409                           
  9410                           ;sysData.c: 73: }
  9411                           ;sysData.c: 74: loc++;
  9412  0FBE  0020               	movlb	0	; select bank0
  9413  0FBF  0AA5               	incf	my_flash_system_write@loc,f
  9414  0FC0  1903               	skipnz
  9415  0FC1  0AA6               	incf	my_flash_system_write@loc+1,f
  9416                           
  9417                           ;sysData.c: 75: PMDATH = 0x00;
  9418  0FC2  0023               	movlb	3	; select bank3
  9419  0FC3  0194               	clrf	20	;volatile
  9420                           
  9421                           ;sysData.c: 76: if((i%32) == 32 -1 ){
  9422  0FC4  301F               	movlw	31
  9423  0FC5  0020               	movlb	0	; select bank0
  9424  0FC6  0529               	andwf	my_flash_system_write@i,w
  9425  0FC7  00F5               	movwf	??_my_flash_system_write
  9426  0FC8  3A1F               	xorlw	31
  9427  0FC9  1D03               	btfss	3,2
  9428  0FCA  2FCD               	goto	l2874
  9429                           
  9430                           ;sysData.c: 77: PMCON1bits.LWLO = 0;
  9431  0FCB  0023               	movlb	3	; select bank3
  9432  0FCC  1295               	bcf	21,5	;volatile
  9433  0FCD                     l2874:	
  9434                           
  9435                           ;sysData.c: 78: }
  9436                           ;sysData.c: 80: PMCON2 = 0x55;
  9437  0FCD  3055               	movlw	85
  9438  0FCE  0023               	movlb	3	; select bank3
  9439  0FCF  0096               	movwf	22	;volsfr
  9440                           
  9441                           ;sysData.c: 81: PMCON2 = 0xAA;
  9442  0FD0  30AA               	movlw	170
  9443  0FD1  0096               	movwf	22	;volsfr
  9444                           
  9445                           ;sysData.c: 82: PMCON1bits.WR = 1;
  9446  0FD2  1495               	bsf	21,1	;volatile
  9447                           
  9448                           ;sysData.c: 83: __nop();
  9449  0FD3  0000               	nop
  9450                           
  9451                           ;sysData.c: 84: __nop();
  9452  0FD4  0000               	nop
  9453                           
  9454                           ;sysData.c: 85: flashAddr++;
  9455  0FD5  0020               	movlb	0	; select bank0
  9456  0FD6  0AA7               	incf	my_flash_system_write@flashAddr,f
  9457  0FD7  1903               	skipnz
  9458  0FD8  0AA8               	incf	my_flash_system_write@flashAddr+1,f
  9459  0FD9  0AA9               	incf	my_flash_system_write@i,f
  9460  0FDA  1903               	skipnz
  9461  0FDB  0AAA               	incf	my_flash_system_write@i+1,f
  9462  0FDC  3000               	movlw	0
  9463  0FDD  022A               	subwf	my_flash_system_write@i+1,w
  9464  0FDE  3020               	movlw	32
  9465  0FDF  1903               	skipnz
  9466  0FE0  0229               	subwf	my_flash_system_write@i,w
  9467  0FE1  1C03               	skipc
  9468  0FE2  2FA2               	goto	l2860
  9469                           
  9470                           ;sysData.c: 86: }
  9471                           ;sysData.c: 87: PMCON1bits.WREN = 0;
  9472  0FE3  0023               	movlb	3	; select bank3
  9473  0FE4  1115               	bcf	21,2	;volatile
  9474  0FE5  0020               	movlb	0	; select bank0
  9475  0FE6  0AA0               	incf	my_flash_system_write@j,f
  9476  0FE7  1903               	skipnz
  9477  0FE8  0AA1               	incf	my_flash_system_write@j+1,f
  9478  0FE9  2F93               	goto	l2888
  9479  0FEA                     l2890:	
  9480                           
  9481                           ;sysData.c: 88: }
  9482                           ;sysData.c: 89: INTCONbits.GIE = GIEBitValue;
  9483  0FEA  0C22               	rrf	my_flash_system_write@GIEBitValue,w
  9484  0FEB  2FF4               	ljmp	PL26	;call to abstracted procedure
  9485  0FEC                     __end_of_my_flash_system_write:	
  9486  0FEC                     PL24:	
  9487  0FEC  3084               	movlw	132
  9488  0FED  00F1               	movwf	my_flash_system_write@buf
  9489  0FEE  3023               	movlw	35
  9490  0FEF  00F2               	movwf	my_flash_system_write@buf+1
  9491  0FF0  305C               	movlw	92
  9492  0FF1  00F3               	movwf	my_flash_system_write@len
  9493  0FF2  01F4               	clrf	my_flash_system_write@len+1
  9494  0FF3  0008               	return
  9495  0FF4                     __end_ofPL24:	
  9496  0FF4                     PL26:	
  9497  0FF4  1C03               	skipc
  9498  0FF5  138B               	bcf	11,7	;volatile
  9499  0FF6  1803               	skipnc
  9500  0FF7  178B               	bsf	11,7	;volatile
  9501  0FF8  0008               	return
  9502  0FF9                     __end_ofPL26:	
  9503  0FF9                     PL36:	
  9504  0FF9  00A0               	movwf	crc_append@message
  9505  0FFA  3023               	movlw	35
  9506  0FFB  00A1               	movwf	crc_append@message+1
  9507  0FFC  305A               	movlw	90
  9508  0FFD  00A2               	movwf	crc_append@n
  9509  0FFE  01A3               	clrf	crc_append@n+1
  9510  0FFF  0008               	return
  9511  1000                     __end_ofPL36:	
  9512                           
  9513                           	psect	text13
  9514  09C8                     __ptext13:	
  9515 ;; *************** function _pid_pwm2_vout_run *****************
  9516 ;; Defined at:
  9517 ;;		line 306 in file "src/api/sample.c"
  9518 ;; Parameters:    Size  Location     Type
  9519 ;;		None
  9520 ;; Auto vars:     Size  Location     Type
  9521 ;;  t16             2    2[BANK0 ] int 
  9522 ;;  ei              2    0[BANK0 ] int 
  9523 ;; Return value:  Size  Location     Type
  9524 ;;                  1    wreg      void 
  9525 ;; Registers used:
  9526 ;;		wreg, status,2, status,0, pclath, cstack
  9527 ;; Tracked objects:
  9528 ;;		On entry : 1F/0
  9529 ;;		On exit  : 1F/1B
  9530 ;;		Unchanged: 0/0
  9531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9533 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9534 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9535 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9536 ;;Total ram usage:        5 bytes
  9537 ;; Hardware stack levels used:    1
  9538 ;; Hardware stack levels required when called:    3
  9539 ;; This function calls:
  9540 ;;		___awdiv
  9541 ;;		___lwdiv
  9542 ;;		_set_vout_pwm2_duty
  9543 ;; This function is called by:
  9544 ;;		_main
  9545 ;; This function uses a non-reentrant model
  9546 ;;
  9547                           
  9548                           
  9549                           ;psect for function _pid_pwm2_vout_run
  9550  09C8                     _pid_pwm2_vout_run:	
  9551                           
  9552                           ;sample.c: 308: int16_t t16,ei;
  9553                           ;sample.c: 309: t16=voExpectAdcValue-rtAdcValueVoFb;
  9554                           
  9555                           ;incstack = 0
  9556                           ; Regs used in _pid_pwm2_vout_run: [wreg+status,2+status,0+pclath+cstack]
  9557  09C8  085D               	movf	_voExpectAdcValue+1,w
  9558  09C9  00A3               	movwf	pid_pwm2_vout_run@t16+1
  9559  09CA  085C               	movf	_voExpectAdcValue,w
  9560  09CB  00A2               	movwf	pid_pwm2_vout_run@t16
  9561  09CC  0021               	movlb	1	; select bank1
  9562  09CD  0862               	movf	_rtAdcValueVoFb^(0+128),w
  9563  09CE  0020               	movlb	0	; select bank0
  9564  09CF  02A2               	subwf	pid_pwm2_vout_run@t16,f
  9565  09D0  0021               	movlb	1	; select bank1
  9566  09D1  0863               	movf	(_rtAdcValueVoFb+1)^(0+128),w
  9567  09D2  0020               	movlb	0	; select bank0
  9568  09D3  3BA3               	subwfb	pid_pwm2_vout_run@t16+1,f
  9569                           
  9570                           ;sample.c: 310: ei=t16/150;
  9571  09D4  3096               	movlw	150
  9572  09D5  00F1               	movwf	___awdiv@divisor
  9573  09D6  01F2               	clrf	___awdiv@divisor+1
  9574  09D7  0823               	movf	pid_pwm2_vout_run@t16+1,w
  9575  09D8  00F4               	movwf	___awdiv@dividend+1
  9576  09D9  0822               	movf	pid_pwm2_vout_run@t16,w
  9577  09DA  00F3               	movwf	___awdiv@dividend
  9578  09DB  2248  3189         	fcall	___awdiv
  9579  09DD  0872               	movf	?___awdiv+1,w
  9580  09DE  00A1               	movwf	pid_pwm2_vout_run@ei+1
  9581  09DF  0871               	movf	?___awdiv,w
  9582  09E0  00A0               	movwf	pid_pwm2_vout_run@ei
  9583                           
  9584                           ;sample.c: 311: if(ei==0){
  9585  09E1  0421               	iorwf	pid_pwm2_vout_run@ei+1,w
  9586  09E2  1D03               	btfss	3,2
  9587  09E3  2A03               	goto	l673
  9588                           
  9589                           ;sample.c: 312: if(t16>32)ei=1;
  9590  09E4  0823               	movf	pid_pwm2_vout_run@t16+1,w
  9591  09E5  3A80               	xorlw	128
  9592  09E6  00F9               	movwf	??_pid_pwm2_vout_run
  9593  09E7  3080               	movlw	128
  9594  09E8  0279               	subwf	??_pid_pwm2_vout_run,w
  9595  09E9  1D03               	skipz
  9596  09EA  29ED               	goto	u1915
  9597  09EB  3021               	movlw	33
  9598  09EC  0222               	subwf	pid_pwm2_vout_run@t16,w
  9599  09ED                     u1915:	
  9600  09ED  1C03               	skipc
  9601  09EE  29F3               	goto	l3316
  9602  09EF  0020               	movlb	0	; select bank0
  9603  09F0  01A0               	clrf	pid_pwm2_vout_run@ei
  9604  09F1  0AA0               	incf	pid_pwm2_vout_run@ei,f
  9605  09F2  01A1               	clrf	pid_pwm2_vout_run@ei+1
  9606  09F3                     l3316:	
  9607                           
  9608                           ;sample.c: 313: if(t16<-32)ei=-1;
  9609  09F3  0020               	movlb	0	; select bank0
  9610  09F4  0823               	movf	pid_pwm2_vout_run@t16+1,w
  9611  09F5  3A80               	xorlw	128
  9612  09F6  00F9               	movwf	??_pid_pwm2_vout_run
  9613  09F7  307F               	movlw	127
  9614  09F8  0279               	subwf	??_pid_pwm2_vout_run,w
  9615  09F9  1D03               	skipz
  9616  09FA  29FD               	goto	u1925
  9617  09FB  30E0               	movlw	224
  9618  09FC  0222               	subwf	pid_pwm2_vout_run@t16,w
  9619  09FD                     u1925:	
  9620  09FD  1803               	skipnc
  9621  09FE  2A03               	goto	l673
  9622  09FF  30FF               	movlw	255
  9623  0A00  0020               	movlb	0	; select bank0
  9624  0A01  00A0               	movwf	pid_pwm2_vout_run@ei
  9625  0A02  00A1               	movwf	pid_pwm2_vout_run@ei+1
  9626  0A03                     l673:	
  9627                           
  9628                           ;sample.c: 314: }
  9629                           ;sample.c: 316: pwm2Ei=pwm2Ei+ei;
  9630  0A03  0020               	movlb	0	; select bank0
  9631  0A04  0820               	movf	pid_pwm2_vout_run@ei,w
  9632  0A05  0021               	movlb	1	; select bank1
  9633  0A06  07DA               	addwf	_pwm2Ei^(0+128),f
  9634  0A07  0020               	movlb	0	; select bank0
  9635  0A08  0821               	movf	pid_pwm2_vout_run@ei+1,w
  9636  0A09  0021               	movlb	1	; select bank1
  9637  0A0A  3DDB               	addwfc	(_pwm2Ei+1)^(0+128),f
  9638                           
  9639                           ;sample.c: 320: t16=voExpectAdcValue/10;
  9640  0A0B  300A               	movlw	10
  9641  0A0C  00F1               	movwf	___lwdiv@divisor
  9642  0A0D  01F2               	clrf	___lwdiv@divisor+1
  9643  0A0E  0020               	movlb	0	; select bank0
  9644  0A0F  085D               	movf	_voExpectAdcValue+1,w
  9645  0A10  00F4               	movwf	___lwdiv@dividend+1
  9646  0A11  085C               	movf	_voExpectAdcValue,w
  9647  0A12  00F3               	movwf	___lwdiv@dividend
  9648  0A13  2288  3189         	fcall	___lwdiv
  9649  0A15  0872               	movf	?___lwdiv+1,w
  9650  0A16  00A3               	movwf	pid_pwm2_vout_run@t16+1
  9651  0A17  0871               	movf	?___lwdiv,w
  9652  0A18  00A2               	movwf	pid_pwm2_vout_run@t16
  9653                           
  9654                           ;sample.c: 322: pwm2DutyForVout=t16+pwm2Ei;
  9655  0A19  0021               	movlb	1	; select bank1
  9656  0A1A  085A               	movf	_pwm2Ei^(0+128),w
  9657  0A1B  0020               	movlb	0	; select bank0
  9658  0A1C  0722               	addwf	pid_pwm2_vout_run@t16,w
  9659  0A1D  00EE               	movwf	_pwm2DutyForVout
  9660  0A1E  0021               	movlb	1	; select bank1
  9661  0A1F  085B               	movf	(_pwm2Ei+1)^(0+128),w
  9662  0A20  0020               	movlb	0	; select bank0
  9663  0A21  3D23               	addwfc	pid_pwm2_vout_run@t16+1,w
  9664  0A22  00EF               	movwf	_pwm2DutyForVout+1
  9665                           
  9666                           ;sample.c: 323: if(pwm2DutyForVout>1580)pwm2DutyForVout=1580;
  9667  0A23  3A80               	xorlw	128
  9668  0A24  00F9               	movwf	??_pid_pwm2_vout_run
  9669  0A25  3086               	movlw	134
  9670  0A26  0279               	subwf	??_pid_pwm2_vout_run,w
  9671  0A27  1D03               	skipz
  9672  0A28  2A2B               	goto	u1935
  9673  0A29  302D               	movlw	45
  9674  0A2A  026E               	subwf	_pwm2DutyForVout,w
  9675  0A2B                     u1935:	
  9676  0A2B  1C03               	skipc
  9677  0A2C  2A32               	goto	l676
  9678  0A2D  302C               	movlw	44
  9679  0A2E  0020               	movlb	0	; select bank0
  9680  0A2F  00EE               	movwf	_pwm2DutyForVout
  9681  0A30  3006               	movlw	6
  9682  0A31  00EF               	movwf	_pwm2DutyForVout+1
  9683  0A32                     l676:	
  9684                           
  9685                           ;sample.c: 324: if(pwm2DutyForVout<5)pwm2DutyForVout=5;
  9686  0A32  0020               	movlb	0	; select bank0
  9687  0A33  086F               	movf	_pwm2DutyForVout+1,w
  9688  0A34  3A80               	xorlw	128
  9689  0A35  00F9               	movwf	??_pid_pwm2_vout_run
  9690  0A36  3080               	movlw	128
  9691  0A37  0279               	subwf	??_pid_pwm2_vout_run,w
  9692  0A38  1D03               	skipz
  9693  0A39  2A3C               	goto	u1945
  9694  0A3A  3005               	movlw	5
  9695  0A3B  026E               	subwf	_pwm2DutyForVout,w
  9696  0A3C                     u1945:	
  9697  0A3C  1803               	skipnc
  9698  0A3D  2A42               	goto	l3330
  9699  0A3E  3005               	movlw	5
  9700  0A3F  0020               	movlb	0	; select bank0
  9701  0A40  00EE               	movwf	_pwm2DutyForVout
  9702  0A41  01EF               	clrf	_pwm2DutyForVout+1
  9703  0A42                     l3330:	
  9704                           
  9705                           ;sample.c: 325: set_vout_pwm2_duty(pwm2DutyForVout);
  9706  0A42  0020               	movlb	0	; select bank0
  9707  0A43  086F               	movf	_pwm2DutyForVout+1,w
  9708  0A44  00F4               	movwf	set_vout_pwm2_duty@duty+1
  9709  0A45  086E               	movf	_pwm2DutyForVout,w
  9710  0A46  00F3               	movwf	set_vout_pwm2_duty@duty
  9711  0A47  2AAD               	ljmp	l2776
  9712  0A48                     __end_of_pid_pwm2_vout_run:	
  9713  0A48                     __ptext17:	
  9714 ;; *************** function ___awdiv *****************
  9715 ;; Defined at:
  9716 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  9717 ;; Parameters:    Size  Location     Type
  9718 ;;  divisor         2    1[COMMON] int 
  9719 ;;  dividend        2    3[COMMON] int 
  9720 ;; Auto vars:     Size  Location     Type
  9721 ;;  quotient        2    7[COMMON] int 
  9722 ;;  sign            1    6[COMMON] unsigned char 
  9723 ;;  counter         1    5[COMMON] unsigned char 
  9724 ;; Return value:  Size  Location     Type
  9725 ;;                  2    1[COMMON] int 
  9726 ;; Registers used:
  9727 ;;		wreg, status,2, status,0
  9728 ;; Tracked objects:
  9729 ;;		On entry : 1F/0
  9730 ;;		On exit  : 1F/0
  9731 ;;		Unchanged: 1F/0
  9732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9733 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9734 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9736 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9737 ;;Total ram usage:        8 bytes
  9738 ;; Hardware stack levels used:    1
  9739 ;; Hardware stack levels required when called:    1
  9740 ;; This function calls:
  9741 ;;		Nothing
  9742 ;; This function is called by:
  9743 ;;		_pid_pwm2_vout_run
  9744 ;; This function uses a non-reentrant model
  9745 ;;
  9746                           
  9747                           
  9748                           ;psect for function ___awdiv
  9749  0A48                     ___awdiv:	
  9750                           
  9751                           ;incstack = 0
  9752                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  9753  0A48  01F6               	clrf	___awdiv@sign
  9754  0A49  1FF2               	btfss	___awdiv@divisor+1,7
  9755  0A4A  2A52               	goto	l3042
  9756  0A4B  09F1               	comf	___awdiv@divisor,f
  9757  0A4C  09F2               	comf	___awdiv@divisor+1,f
  9758  0A4D  0AF1               	incf	___awdiv@divisor,f
  9759  0A4E  1903               	skipnz
  9760  0A4F  0AF2               	incf	___awdiv@divisor+1,f
  9761  0A50  01F6               	clrf	___awdiv@sign
  9762  0A51  0AF6               	incf	___awdiv@sign,f
  9763  0A52                     l3042:	
  9764  0A52  1FF4               	btfss	___awdiv@dividend+1,7
  9765  0A53  2A5B               	goto	l3048
  9766  0A54  09F3               	comf	___awdiv@dividend,f
  9767  0A55  09F4               	comf	___awdiv@dividend+1,f
  9768  0A56  0AF3               	incf	___awdiv@dividend,f
  9769  0A57  1903               	skipnz
  9770  0A58  0AF4               	incf	___awdiv@dividend+1,f
  9771  0A59  3001               	movlw	1
  9772  0A5A  06F6               	xorwf	___awdiv@sign,f
  9773  0A5B                     l3048:	
  9774  0A5B  01F7               	clrf	___awdiv@quotient
  9775  0A5C  01F8               	clrf	___awdiv@quotient+1
  9776  0A5D  0871               	movf	___awdiv@divisor,w
  9777  0A5E  0472               	iorwf	___awdiv@divisor+1,w
  9778  0A5F  1903               	btfsc	3,2
  9779  0A60  2A7B               	goto	l3070
  9780  0A61  01F5               	clrf	___awdiv@counter
  9781  0A62                     L2:	
  9782  0A62  0AF5               	incf	___awdiv@counter,f
  9783  0A63  1BF2               	btfsc	___awdiv@divisor+1,7
  9784  0A64  2A68               	goto	l3058
  9785  0A65  35F1               	lslf	___awdiv@divisor,f
  9786  0A66  0DF2               	rlf	___awdiv@divisor+1,f
  9787  0A67  2A62               	goto	L2
  9788  0A68                     l3058:	
  9789  0A68  35F7               	lslf	___awdiv@quotient,f
  9790  0A69  0DF8               	rlf	___awdiv@quotient+1,f
  9791  0A6A  0872               	movf	___awdiv@divisor+1,w
  9792  0A6B  0274               	subwf	___awdiv@dividend+1,w
  9793  0A6C  1D03               	skipz
  9794  0A6D  2A70               	goto	u1585
  9795  0A6E  0871               	movf	___awdiv@divisor,w
  9796  0A6F  0273               	subwf	___awdiv@dividend,w
  9797  0A70                     u1585:	
  9798  0A70  1C03               	skipc
  9799  0A71  2A77               	goto	l3066
  9800  0A72  0871               	movf	___awdiv@divisor,w
  9801  0A73  02F3               	subwf	___awdiv@dividend,f
  9802  0A74  0872               	movf	___awdiv@divisor+1,w
  9803  0A75  3BF4               	subwfb	___awdiv@dividend+1,f
  9804  0A76  1477               	bsf	___awdiv@quotient,0
  9805  0A77                     l3066:	
  9806  0A77  36F2               	lsrf	___awdiv@divisor+1,f
  9807  0A78  0CF1               	rrf	___awdiv@divisor,f
  9808  0A79  0BF5               	decfsz	___awdiv@counter,f
  9809  0A7A  2A68               	goto	l3058
  9810  0A7B                     l3070:	
  9811  0A7B  0876               	movf	___awdiv@sign,w
  9812  0A7C  1903               	btfsc	3,2
  9813  0A7D  2A83               	goto	l3074
  9814  0A7E  09F7               	comf	___awdiv@quotient,f
  9815  0A7F  09F8               	comf	___awdiv@quotient+1,f
  9816  0A80  0AF7               	incf	___awdiv@quotient,f
  9817  0A81  1903               	skipnz
  9818  0A82  0AF8               	incf	___awdiv@quotient+1,f
  9819  0A83                     l3074:	
  9820  0A83  0878               	movf	___awdiv@quotient+1,w
  9821  0A84  00F2               	movwf	?___awdiv+1
  9822  0A85  0877               	movf	___awdiv@quotient,w
  9823  0A86  00F1               	movwf	?___awdiv
  9824  0A87  0008               	return
  9825  0A88                     __end_of___awdiv:	
  9826  0A88                     __ptext16:	
  9827 ;; *************** function ___lwdiv *****************
  9828 ;; Defined at:
  9829 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  9830 ;; Parameters:    Size  Location     Type
  9831 ;;  divisor         2    1[COMMON] unsigned int 
  9832 ;;  dividend        2    3[COMMON] unsigned int 
  9833 ;; Auto vars:     Size  Location     Type
  9834 ;;  quotient        2    5[COMMON] unsigned int 
  9835 ;;  counter         1    7[COMMON] unsigned char 
  9836 ;; Return value:  Size  Location     Type
  9837 ;;                  2    1[COMMON] unsigned int 
  9838 ;; Registers used:
  9839 ;;		wreg, status,2, status,0
  9840 ;; Tracked objects:
  9841 ;;		On entry : 1F/0
  9842 ;;		On exit  : 1F/0
  9843 ;;		Unchanged: 1F/0
  9844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9845 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9846 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9848 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9849 ;;Total ram usage:        7 bytes
  9850 ;; Hardware stack levels used:    1
  9851 ;; Hardware stack levels required when called:    1
  9852 ;; This function calls:
  9853 ;;		Nothing
  9854 ;; This function is called by:
  9855 ;;		_pid_pwm2_vout_run
  9856 ;; This function uses a non-reentrant model
  9857 ;;
  9858                           
  9859                           
  9860                           ;psect for function ___lwdiv
  9861  0A88                     ___lwdiv:	
  9862                           
  9863                           ;incstack = 0
  9864                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  9865  0A88  01F5               	clrf	___lwdiv@quotient
  9866  0A89  01F6               	clrf	___lwdiv@quotient+1
  9867  0A8A  0871               	movf	___lwdiv@divisor,w
  9868  0A8B  0472               	iorwf	___lwdiv@divisor+1,w
  9869  0A8C  1903               	btfsc	3,2
  9870  0A8D  2AA8               	goto	l3126
  9871  0A8E  01F7               	clrf	___lwdiv@counter
  9872  0A8F                     L1:	
  9873  0A8F  0AF7               	incf	___lwdiv@counter,f
  9874  0A90  1BF2               	btfsc	___lwdiv@divisor+1,7
  9875  0A91  2A95               	goto	l3114
  9876  0A92  35F1               	lslf	___lwdiv@divisor,f
  9877  0A93  0DF2               	rlf	___lwdiv@divisor+1,f
  9878  0A94  2A8F               	goto	L1
  9879  0A95                     l3114:	
  9880  0A95  35F5               	lslf	___lwdiv@quotient,f
  9881  0A96  0DF6               	rlf	___lwdiv@quotient+1,f
  9882  0A97  0872               	movf	___lwdiv@divisor+1,w
  9883  0A98  0274               	subwf	___lwdiv@dividend+1,w
  9884  0A99  1D03               	skipz
  9885  0A9A  2A9D               	goto	u1675
  9886  0A9B  0871               	movf	___lwdiv@divisor,w
  9887  0A9C  0273               	subwf	___lwdiv@dividend,w
  9888  0A9D                     u1675:	
  9889  0A9D  1C03               	skipc
  9890  0A9E  2AA4               	goto	l3122
  9891  0A9F  0871               	movf	___lwdiv@divisor,w
  9892  0AA0  02F3               	subwf	___lwdiv@dividend,f
  9893  0AA1  0872               	movf	___lwdiv@divisor+1,w
  9894  0AA2  3BF4               	subwfb	___lwdiv@dividend+1,f
  9895  0AA3  1475               	bsf	___lwdiv@quotient,0
  9896  0AA4                     l3122:	
  9897  0AA4  36F2               	lsrf	___lwdiv@divisor+1,f
  9898  0AA5  0CF1               	rrf	___lwdiv@divisor,f
  9899  0AA6  0BF7               	decfsz	___lwdiv@counter,f
  9900  0AA7  2A95               	goto	l3114
  9901  0AA8                     l3126:	
  9902  0AA8  0876               	movf	___lwdiv@quotient+1,w
  9903  0AA9  00F2               	movwf	?___lwdiv+1
  9904  0AAA  0875               	movf	___lwdiv@quotient,w
  9905  0AAB  00F1               	movwf	?___lwdiv
  9906  0AAC  0008               	return
  9907  0AAD                     __end_of___lwdiv:	
  9908  0AAD                     __ptext14:	
  9909 ;; *************** function _set_vout_pwm2_duty *****************
  9910 ;; Defined at:
  9911 ;;		line 62 in file "src/api/sample.c"
  9912 ;; Parameters:    Size  Location     Type
  9913 ;;  duty            2    3[COMMON] unsigned int 
  9914 ;; Auto vars:     Size  Location     Type
  9915 ;;  t16             2    5[COMMON] unsigned int 
  9916 ;; Return value:  Size  Location     Type
  9917 ;;                  1    wreg      void 
  9918 ;; Registers used:
  9919 ;;		wreg, pclath, cstack
  9920 ;; Tracked objects:
  9921 ;;		On entry : 1E/1
  9922 ;;		On exit  : 1F/1B
  9923 ;;		Unchanged: 0/0
  9924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9925 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9926 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9928 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9929 ;;Total ram usage:        4 bytes
  9930 ;; Hardware stack levels used:    1
  9931 ;; Hardware stack levels required when called:    2
  9932 ;; This function calls:
  9933 ;;		_get_vout_pwm2_duty
  9934 ;; This function is called by:
  9935 ;;		_pid_pwm2_vout_run
  9936 ;;		_main
  9937 ;; This function uses a non-reentrant model
  9938 ;;
  9939                           
  9940                           
  9941                           ;psect for function _set_vout_pwm2_duty
  9942  0AAD                     _set_vout_pwm2_duty:	
  9943  0AAD                     l2776:	
  9944                           ;incstack = 0
  9945                           ; Regs used in _set_vout_pwm2_duty: [wreg+pclath+cstack]
  9946                           
  9947                           
  9948                           ;sample.c: 64: uint16_t t16;
  9949                           ;sample.c: 65: t16=get_vout_pwm2_duty();
  9950  0AAD  22C2  3189         	fcall	_get_vout_pwm2_duty
  9951  0AAF  0872               	movf	?_get_vout_pwm2_duty+1,w
  9952  0AB0  00F6               	movwf	set_vout_pwm2_duty@t16+1
  9953  0AB1  0871               	movf	?_get_vout_pwm2_duty,w
  9954  0AB2  00F5               	movwf	set_vout_pwm2_duty@t16
  9955                           
  9956                           ;sample.c: 66: if(t16==duty)return;
  9957  0AB3  0874               	movf	set_vout_pwm2_duty@duty+1,w
  9958  0AB4  0676               	xorwf	set_vout_pwm2_duty@t16+1,w
  9959  0AB5  1D03               	skipz
  9960  0AB6  2AB9               	goto	u1225
  9961  0AB7  0873               	movf	set_vout_pwm2_duty@duty,w
  9962  0AB8  0675               	xorwf	set_vout_pwm2_duty@t16,w
  9963  0AB9                     u1225:	
  9964  0AB9  1903               	btfsc	3,2
  9965  0ABA  0008               	return
  9966                           
  9967                           ;sample.c: 67: PWM2CONbits.EN = 0;
  9968  0ABB  13AB               	bcf	43,7	;volatile
  9969                           
  9970                           ;sample.c: 68: PWM2DCL= (uint8_t)(duty&0xff);
  9971  0ABC  0873               	movf	set_vout_pwm2_duty@duty,w
  9972  0ABD  00A3               	movwf	35	;volatile
  9973                           
  9974                           ;sample.c: 69: PWM2DCH=(uint8_t)(duty>>8);
  9975  0ABE  0874               	movf	set_vout_pwm2_duty@duty+1,w
  9976  0ABF  00A4               	movwf	36	;volatile
  9977                           
  9978                           ;sample.c: 70: PWM2CONbits.EN = 1;
  9979  0AC0  17AB               	bsf	43,7	;volatile
  9980  0AC1  0008               	return
  9981  0AC2                     __end_of_set_vout_pwm2_duty:	
  9982  0AC2                     __ptext15:	
  9983 ;; *************** function _get_vout_pwm2_duty *****************
  9984 ;; Defined at:
  9985 ;;		line 57 in file "src/api/sample.c"
  9986 ;; Parameters:    Size  Location     Type
  9987 ;;		None
  9988 ;; Auto vars:     Size  Location     Type
  9989 ;;		None
  9990 ;; Return value:  Size  Location     Type
  9991 ;;                  2    1[COMMON] unsigned int 
  9992 ;; Registers used:
  9993 ;;		wreg
  9994 ;; Tracked objects:
  9995 ;;		On entry : 1E/1
  9996 ;;		On exit  : 1F/1B
  9997 ;;		Unchanged: 0/0
  9998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9999 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10002 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10003 ;;Total ram usage:        2 bytes
 10004 ;; Hardware stack levels used:    1
 10005 ;; Hardware stack levels required when called:    1
 10006 ;; This function calls:
 10007 ;;		Nothing
 10008 ;; This function is called by:
 10009 ;;		_set_vout_pwm2_duty
 10010 ;; This function uses a non-reentrant model
 10011 ;;
 10012                           
 10013                           
 10014                           ;psect for function _get_vout_pwm2_duty
 10015  0AC2                     _get_vout_pwm2_duty:	
 10016                           
 10017                           ;sample.c: 59: return ((PWM2DCH<<8)|PWM2DCL);
 10018                           
 10019                           ;incstack = 0
 10020                           ; Regs used in _get_vout_pwm2_duty: [wreg]
 10021  0AC2  003B               	movlb	27	; select bank27
 10022  0AC3  0824               	movf	36,w	;volatile
 10023  0AC4  00F2               	movwf	?_get_vout_pwm2_duty+1
 10024  0AC5  01F1               	clrf	?_get_vout_pwm2_duty
 10025  0AC6  0823               	movf	35,w	;volatile
 10026  0AC7  04F1               	iorwf	?_get_vout_pwm2_duty,f
 10027  0AC8  0008               	return
 10028  0AC9                     __end_of_get_vout_pwm2_duty:	
 10029                           
 10030                           	psect	text18
 10031  0C0A                     __ptext18:	
 10032 ;; *************** function _pid_pwm1_idrv_run *****************
 10033 ;; Defined at:
 10034 ;;		line 273 in file "src/api/sample.c"
 10035 ;; Parameters:    Size  Location     Type
 10036 ;;		None
 10037 ;; Auto vars:     Size  Location     Type
 10038 ;;  t32             4   48[BANK0 ] long 
 10039 ;;  ed              4   38[BANK0 ] long 
 10040 ;;  ei              4   34[BANK0 ] long 
 10041 ;;  ep              4   30[BANK0 ] long 
 10042 ;;  t16             2   46[BANK0 ] unsigned int 
 10043 ;; Return value:  Size  Location     Type
 10044 ;;                  1    wreg      void 
 10045 ;; Registers used:
 10046 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10047 ;; Tracked objects:
 10048 ;;		On entry : 1F/0
 10049 ;;		On exit  : 1F/1B
 10050 ;;		Unchanged: 0/0
 10051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10053 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10054 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10055 ;;      Totals:         0      34       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10056 ;;Total ram usage:       34 bytes
 10057 ;; Hardware stack levels used:    1
 10058 ;; Hardware stack levels required when called:    3
 10059 ;; This function calls:
 10060 ;;		___aldiv
 10061 ;;		___lmul
 10062 ;;		_set_idrv_pwm1_duty
 10063 ;; This function is called by:
 10064 ;;		_main
 10065 ;; This function uses a non-reentrant model
 10066 ;;
 10067                           
 10068                           
 10069                           ;psect for function _pid_pwm1_idrv_run
 10070  0C0A                     _pid_pwm1_idrv_run:	
 10071                           
 10072                           ;sample.c: 276: int32_t ep,ei,ed;
 10073                           ;sample.c: 277: int32_t t32;
 10074                           ;sample.c: 278: t32=(resRs-resRc);
 10075                           
 10076                           ;incstack = 0
 10077                           ; Regs used in _pid_pwm1_idrv_run: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10078  0C0A  086D               	movf	_resRs+3,w
 10079  0C0B  00D3               	movwf	pid_pwm1_idrv_run@t32+3
 10080  0C0C  086C               	movf	_resRs+2,w
 10081  0C0D  00D2               	movwf	pid_pwm1_idrv_run@t32+2
 10082  0C0E  086B               	movf	_resRs+1,w
 10083  0C0F  00D1               	movwf	pid_pwm1_idrv_run@t32+1
 10084  0C10  086A               	movf	_resRs,w
 10085  0C11  00D0               	movwf	pid_pwm1_idrv_run@t32
 10086  0C12  0866               	movf	_resRc,w
 10087  0C13  02D0               	subwf	pid_pwm1_idrv_run@t32,f
 10088  0C14  0867               	movf	_resRc+1,w
 10089  0C15  3BD1               	subwfb	pid_pwm1_idrv_run@t32+1,f
 10090  0C16  0868               	movf	_resRc+2,w
 10091  0C17  3BD2               	subwfb	pid_pwm1_idrv_run@t32+2,f
 10092  0C18  0869               	movf	_resRc+3,w
 10093  0C19  3BD3               	subwfb	pid_pwm1_idrv_run@t32+3,f
 10094                           
 10095                           ;sample.c: 279: t32=2000-t32;
 10096  0C1A  30D0               	movlw	208
 10097  0C1B  00B2               	movwf	??_pid_pwm1_idrv_run
 10098  0C1C  3007               	movlw	7
 10099  0C1D  00B3               	movwf	??_pid_pwm1_idrv_run+1
 10100  0C1E  01B4               	clrf	??_pid_pwm1_idrv_run+2
 10101  0C1F  01B5               	clrf	??_pid_pwm1_idrv_run+3
 10102  0C20  0850               	movf	pid_pwm1_idrv_run@t32,w
 10103  0C21  02B2               	subwf	??_pid_pwm1_idrv_run,f
 10104  0C22  0851               	movf	pid_pwm1_idrv_run@t32+1,w
 10105  0C23  3BB3               	subwfb	??_pid_pwm1_idrv_run+1,f
 10106  0C24  0852               	movf	pid_pwm1_idrv_run@t32+2,w
 10107  0C25  3BB4               	subwfb	??_pid_pwm1_idrv_run+2,f
 10108  0C26  0853               	movf	pid_pwm1_idrv_run@t32+3,w
 10109  0C27  3BB5               	subwfb	??_pid_pwm1_idrv_run+3,f
 10110  0C28  0835               	movf	??_pid_pwm1_idrv_run+3,w
 10111  0C29  25C8  318C         	fcall	PL22	;call to abstracted procedure
 10112                           
 10113                           ;sample.c: 281: err[2]=err[1];
 10114  0C2B  30A4               	movlw	((low (_err| 0))& (0+255)+4)
 10115  0C2C  0086               	movwf	6
 10116  0C2D  0187               	clrf	7
 10117  0C2E  3F40               	moviw [0]fsr1
 10118  0C2F  0021               	movlb	1	; select bank1
 10119  0C30  00A8               	movwf	(_err^(0+128)+8)
 10120  0C31  3F41               	moviw [1]fsr1
 10121  0C32  00A9               	movwf	((_err+1)^(0+128)+8)
 10122  0C33  3F42               	moviw [2]fsr1
 10123  0C34  00AA               	movwf	((_err+2)^(0+128)+8)
 10124  0C35  3F43               	moviw [3]fsr1
 10125  0C36  00AB               	movwf	((_err+3)^(0+128)+8)
 10126                           
 10127                           ;sample.c: 282: err[1]=err[0];
 10128  0C37  0823               	movf	(_err+3)^(0+128),w
 10129  0C38  00A7               	movwf	((_err+3)^(0+128)+4)
 10130  0C39  0822               	movf	(_err+2)^(0+128),w
 10131  0C3A  00A6               	movwf	((_err+2)^(0+128)+4)
 10132  0C3B  0821               	movf	(_err+1)^(0+128),w
 10133  0C3C  00A5               	movwf	((_err+1)^(0+128)+4)
 10134  0C3D  0820               	movf	_err^(0+128),w
 10135  0C3E  00A4               	movwf	(_err^(0+128)+4)
 10136                           
 10137                           ;sample.c: 283: err[0]=t32;
 10138  0C3F  0020               	movlb	0	; select bank0
 10139  0C40  0853               	movf	pid_pwm1_idrv_run@t32+3,w
 10140  0C41  0021               	movlb	1	; select bank1
 10141  0C42  00A3               	movwf	(_err+3)^(0+128)
 10142  0C43  0020               	movlb	0	; select bank0
 10143  0C44  0852               	movf	pid_pwm1_idrv_run@t32+2,w
 10144  0C45  0021               	movlb	1	; select bank1
 10145  0C46  00A2               	movwf	(_err+2)^(0+128)
 10146  0C47  0020               	movlb	0	; select bank0
 10147  0C48  0851               	movf	pid_pwm1_idrv_run@t32+1,w
 10148  0C49  0021               	movlb	1	; select bank1
 10149  0C4A  00A1               	movwf	(_err+1)^(0+128)
 10150  0C4B  0020               	movlb	0	; select bank0
 10151  0C4C  0850               	movf	pid_pwm1_idrv_run@t32,w
 10152  0C4D  0021               	movlb	1	; select bank1
 10153  0C4E  00A0               	movwf	_err^(0+128)
 10154                           
 10155                           ;sample.c: 286: ep=(err[0]-err[1])*PidKp;
 10156  0C4F  0824               	movf	(_err^(0+128)+4),w
 10157  0C50  0220               	subwf	_err^(0+128),w
 10158  0C51  0020               	movlb	0	; select bank0
 10159  0C52  00B2               	movwf	??_pid_pwm1_idrv_run
 10160  0C53  0021               	movlb	1	; select bank1
 10161  0C54  0825               	movf	((_err+1)^(0+128)+4),w
 10162  0C55  3B21               	subwfb	(_err+1)^(0+128),w
 10163  0C56  0020               	movlb	0	; select bank0
 10164  0C57  00B3               	movwf	??_pid_pwm1_idrv_run+1
 10165  0C58  0021               	movlb	1	; select bank1
 10166  0C59  0826               	movf	((_err+2)^(0+128)+4),w
 10167  0C5A  3B22               	subwfb	(_err+2)^(0+128),w
 10168  0C5B  0020               	movlb	0	; select bank0
 10169  0C5C  00B4               	movwf	??_pid_pwm1_idrv_run+2
 10170  0C5D  0021               	movlb	1	; select bank1
 10171  0C5E  0827               	movf	((_err+3)^(0+128)+4),w
 10172  0C5F  3B23               	subwfb	(_err+3)^(0+128),w
 10173  0C60  0020               	movlb	0	; select bank0
 10174  0C61  00B5               	movwf	??_pid_pwm1_idrv_run+3
 10175  0C62  25B8               	fcall	PL12	;call to abstracted procedure
 10176  0C63  3185  2568  318C   	fcall	___lmul
 10177  0C66  0874               	movf	?___lmul+3,w
 10178  0C67  00C1               	movwf	pid_pwm1_idrv_run@ep+3
 10179  0C68  0873               	movf	?___lmul+2,w
 10180  0C69  00C0               	movwf	pid_pwm1_idrv_run@ep+2
 10181  0C6A  0872               	movf	?___lmul+1,w
 10182  0C6B  00BF               	movwf	pid_pwm1_idrv_run@ep+1
 10183  0C6C  0871               	movf	?___lmul,w
 10184  0C6D  00BE               	movwf	pid_pwm1_idrv_run@ep
 10185                           
 10186                           ;sample.c: 287: ei=PidKp*err[0]/PidTi;
 10187  0C6E  0021               	movlb	1	; select bank1
 10188  0C6F  083D               	movf	(_PidTi+3)^(0+128),w
 10189  0C70  0020               	movlb	0	; select bank0
 10190  0C71  00A7               	movwf	___aldiv@divisor+3
 10191  0C72  0021               	movlb	1	; select bank1
 10192  0C73  083C               	movf	(_PidTi+2)^(0+128),w
 10193  0C74  0020               	movlb	0	; select bank0
 10194  0C75  00A6               	movwf	___aldiv@divisor+2
 10195  0C76  0021               	movlb	1	; select bank1
 10196  0C77  083B               	movf	(_PidTi+1)^(0+128),w
 10197  0C78  0020               	movlb	0	; select bank0
 10198  0C79  00A5               	movwf	___aldiv@divisor+1
 10199  0C7A  0021               	movlb	1	; select bank1
 10200  0C7B  083A               	movf	_PidTi^(0+128),w
 10201  0C7C  0020               	movlb	0	; select bank0
 10202  0C7D  00A4               	movwf	___aldiv@divisor
 10203  0C7E  0021               	movlb	1	; select bank1
 10204  0C7F  0823               	movf	(_err+3)^(0+128),w
 10205  0C80  00F4               	movwf	___lmul@multiplier+3
 10206  0C81  0822               	movf	(_err+2)^(0+128),w
 10207  0C82  00F3               	movwf	___lmul@multiplier+2
 10208  0C83  0821               	movf	(_err+1)^(0+128),w
 10209  0C84  00F2               	movwf	___lmul@multiplier+1
 10210  0C85  0820               	movf	_err^(0+128),w
 10211  0C86  00F1               	movwf	___lmul@multiplier
 10212  0C87  0020               	movlb	0	; select bank0
 10213  0C88  0857               	movf	_PidKp+3,w
 10214  0C89  00F8               	movwf	___lmul@multiplicand+3
 10215  0C8A  0856               	movf	_PidKp+2,w
 10216  0C8B  00F7               	movwf	___lmul@multiplicand+2
 10217  0C8C  0855               	movf	_PidKp+1,w
 10218  0C8D  00F6               	movwf	___lmul@multiplicand+1
 10219  0C8E  0854               	movf	_PidKp,w
 10220  0C8F  00F5               	movwf	___lmul@multiplicand
 10221  0C90  3185  2568  318C   	fcall	___lmul
 10222  0C93  3187  2730  318C   	fcall	PL6	;call to abstracted procedure
 10223  0C96  3184  24FC  318C   	fcall	___aldiv
 10224  0C99  0827               	movf	?___aldiv+3,w
 10225  0C9A  00C5               	movwf	pid_pwm1_idrv_run@ei+3
 10226  0C9B  0826               	movf	?___aldiv+2,w
 10227  0C9C  00C4               	movwf	pid_pwm1_idrv_run@ei+2
 10228  0C9D  0825               	movf	?___aldiv+1,w
 10229  0C9E  00C3               	movwf	pid_pwm1_idrv_run@ei+1
 10230  0C9F  0824               	movf	?___aldiv,w
 10231  0CA0  00C2               	movwf	pid_pwm1_idrv_run@ei
 10232                           
 10233                           ;sample.c: 288: ed=(err[0]-2*err[1]+err[2])*PidKp*PidTd/160;;
 10234  0CA1  0021               	movlb	1	; select bank1
 10235  0CA2  0820               	movf	_err^(0+128),w
 10236  0CA3  0020               	movlb	0	; select bank0
 10237  0CA4  00B2               	movwf	??_pid_pwm1_idrv_run
 10238  0CA5  0021               	movlb	1	; select bank1
 10239  0CA6  0821               	movf	(_err+1)^(0+128),w
 10240  0CA7  0020               	movlb	0	; select bank0
 10241  0CA8  00B3               	movwf	??_pid_pwm1_idrv_run+1
 10242  0CA9  0021               	movlb	1	; select bank1
 10243  0CAA  0822               	movf	(_err+2)^(0+128),w
 10244  0CAB  0020               	movlb	0	; select bank0
 10245  0CAC  00B4               	movwf	??_pid_pwm1_idrv_run+2
 10246  0CAD  0021               	movlb	1	; select bank1
 10247  0CAE  0823               	movf	(_err+3)^(0+128),w
 10248  0CAF  0020               	movlb	0	; select bank0
 10249  0CB0  00B5               	movwf	??_pid_pwm1_idrv_run+3
 10250  0CB1  0021               	movlb	1	; select bank1
 10251  0CB2  0824               	movf	(_err^(0+128)+4),w
 10252  0CB3  0020               	movlb	0	; select bank0
 10253  0CB4  00B6               	movwf	??_pid_pwm1_idrv_run+4
 10254  0CB5  0021               	movlb	1	; select bank1
 10255  0CB6  0825               	movf	((_err+1)^(0+128)+4),w
 10256  0CB7  0020               	movlb	0	; select bank0
 10257  0CB8  00B7               	movwf	??_pid_pwm1_idrv_run+5
 10258  0CB9  0021               	movlb	1	; select bank1
 10259  0CBA  0826               	movf	((_err+2)^(0+128)+4),w
 10260  0CBB  0020               	movlb	0	; select bank0
 10261  0CBC  00B8               	movwf	??_pid_pwm1_idrv_run+6
 10262  0CBD  0021               	movlb	1	; select bank1
 10263  0CBE  0827               	movf	((_err+3)^(0+128)+4),w
 10264  0CBF  0020               	movlb	0	; select bank0
 10265  0CC0  00B9               	movwf	??_pid_pwm1_idrv_run+7
 10266  0CC1  35B6               	lslf	??_pid_pwm1_idrv_run+4,f
 10267  0CC2  0DB7               	rlf	??_pid_pwm1_idrv_run+5,f
 10268  0CC3  0DB8               	rlf	??_pid_pwm1_idrv_run+6,f
 10269  0CC4  0DB9               	rlf	??_pid_pwm1_idrv_run+7,f
 10270  0CC5  0021               	movlb	1	; select bank1
 10271  0CC6  0828               	movf	(_err^(0+128)+8),w
 10272  0CC7  0020               	movlb	0	; select bank0
 10273  0CC8  00BA               	movwf	??_pid_pwm1_idrv_run+8
 10274  0CC9  0021               	movlb	1	; select bank1
 10275  0CCA  0829               	movf	((_err+1)^(0+128)+8),w
 10276  0CCB  0020               	movlb	0	; select bank0
 10277  0CCC  00BB               	movwf	??_pid_pwm1_idrv_run+9
 10278  0CCD  0021               	movlb	1	; select bank1
 10279  0CCE  082A               	movf	((_err+2)^(0+128)+8),w
 10280  0CCF  0020               	movlb	0	; select bank0
 10281  0CD0  00BC               	movwf	??_pid_pwm1_idrv_run+10
 10282  0CD1  0021               	movlb	1	; select bank1
 10283  0CD2  082B               	movf	((_err+3)^(0+128)+8),w
 10284  0CD3  0020               	movlb	0	; select bank0
 10285  0CD4  00BD               	movwf	??_pid_pwm1_idrv_run+11
 10286  0CD5  0836               	movf	??_pid_pwm1_idrv_run+4,w
 10287  0CD6  02BA               	subwf	??_pid_pwm1_idrv_run+8,f
 10288  0CD7  0837               	movf	??_pid_pwm1_idrv_run+5,w
 10289  0CD8  3BBB               	subwfb	??_pid_pwm1_idrv_run+9,f
 10290  0CD9  0838               	movf	??_pid_pwm1_idrv_run+6,w
 10291  0CDA  3BBC               	subwfb	??_pid_pwm1_idrv_run+10,f
 10292  0CDB  0839               	movf	??_pid_pwm1_idrv_run+7,w
 10293  0CDC  3BBD               	subwfb	??_pid_pwm1_idrv_run+11,f
 10294  0CDD  083A               	movf	??_pid_pwm1_idrv_run+8,w
 10295  0CDE  07B2               	addwf	??_pid_pwm1_idrv_run,f
 10296  0CDF  083B               	movf	??_pid_pwm1_idrv_run+9,w
 10297  0CE0  3DB3               	addwfc	??_pid_pwm1_idrv_run+1,f
 10298  0CE1  083C               	movf	??_pid_pwm1_idrv_run+10,w
 10299  0CE2  3DB4               	addwfc	??_pid_pwm1_idrv_run+2,f
 10300  0CE3  083D               	movf	??_pid_pwm1_idrv_run+11,w
 10301  0CE4  3DB5               	addwfc	??_pid_pwm1_idrv_run+3,f
 10302  0CE5  0835               	movf	??_pid_pwm1_idrv_run+3,w
 10303  0CE6  25B8               	fcall	PL12	;call to abstracted procedure
 10304  0CE7  3185  2568  318C   	fcall	___lmul
 10305  0CEA  0874               	movf	?___lmul+3,w
 10306  0CEB  00CD               	movwf	_pid_pwm1_idrv_run$2215+3
 10307  0CEC  0873               	movf	?___lmul+2,w
 10308  0CED  00CC               	movwf	_pid_pwm1_idrv_run$2215+2
 10309  0CEE  0872               	movf	?___lmul+1,w
 10310  0CEF  00CB               	movwf	_pid_pwm1_idrv_run$2215+1
 10311  0CF0  0871               	movf	?___lmul,w
 10312  0CF1  00CA               	movwf	_pid_pwm1_idrv_run$2215
 10313                           
 10314                           ;sample.c: 288: ed=(err[0]-2*err[1]+err[2])*PidKp*PidTd/160;;
 10315  0CF2  30A0               	movlw	160
 10316  0CF3  00A4               	movwf	___aldiv@divisor
 10317  0CF4  01A5               	clrf	___aldiv@divisor+1
 10318  0CF5  01A6               	clrf	___aldiv@divisor+2
 10319  0CF6  01A7               	clrf	___aldiv@divisor+3
 10320  0CF7  084D               	movf	_pid_pwm1_idrv_run$2215+3,w
 10321  0CF8  00F4               	movwf	___lmul@multiplier+3
 10322  0CF9  084C               	movf	_pid_pwm1_idrv_run$2215+2,w
 10323  0CFA  00F3               	movwf	___lmul@multiplier+2
 10324  0CFB  084B               	movf	_pid_pwm1_idrv_run$2215+1,w
 10325  0CFC  00F2               	movwf	___lmul@multiplier+1
 10326  0CFD  084A               	movf	_pid_pwm1_idrv_run$2215,w
 10327  0CFE  00F1               	movwf	___lmul@multiplier
 10328  0CFF  0021               	movlb	1	; select bank1
 10329  0D00  0839               	movf	(_PidTd+3)^(0+128),w
 10330  0D01  00F8               	movwf	___lmul@multiplicand+3
 10331  0D02  0838               	movf	(_PidTd+2)^(0+128),w
 10332  0D03  00F7               	movwf	___lmul@multiplicand+2
 10333  0D04  0837               	movf	(_PidTd+1)^(0+128),w
 10334  0D05  00F6               	movwf	___lmul@multiplicand+1
 10335  0D06  0836               	movf	_PidTd^(0+128),w
 10336  0D07  00F5               	movwf	___lmul@multiplicand
 10337  0D08  3185  2568  318C   	fcall	___lmul
 10338  0D0B  3187  2730  318C   	fcall	PL6	;call to abstracted procedure
 10339  0D0E  3184  24FC  318C   	fcall	___aldiv
 10340  0D11  0827               	movf	?___aldiv+3,w
 10341  0D12  00C9               	movwf	pid_pwm1_idrv_run@ed+3
 10342  0D13  0826               	movf	?___aldiv+2,w
 10343  0D14  00C8               	movwf	pid_pwm1_idrv_run@ed+2
 10344  0D15  0825               	movf	?___aldiv+1,w
 10345  0D16  00C7               	movwf	pid_pwm1_idrv_run@ed+1
 10346  0D17  0824               	movf	?___aldiv,w
 10347  0D18  00C6               	movwf	pid_pwm1_idrv_run@ed
 10348                           
 10349                           ;sample.c: 290: t32=ep+ei+ed;
 10350  0D19  083E               	movf	pid_pwm1_idrv_run@ep,w
 10351  0D1A  0742               	addwf	pid_pwm1_idrv_run@ei,w
 10352  0D1B  00B2               	movwf	??_pid_pwm1_idrv_run
 10353  0D1C  083F               	movf	pid_pwm1_idrv_run@ep+1,w
 10354  0D1D  3D43               	addwfc	pid_pwm1_idrv_run@ei+1,w
 10355  0D1E  00B3               	movwf	??_pid_pwm1_idrv_run+1
 10356  0D1F  0840               	movf	pid_pwm1_idrv_run@ep+2,w
 10357  0D20  3D44               	addwfc	pid_pwm1_idrv_run@ei+2,w
 10358  0D21  00B4               	movwf	??_pid_pwm1_idrv_run+2
 10359  0D22  0841               	movf	pid_pwm1_idrv_run@ep+3,w
 10360  0D23  3D45               	addwfc	pid_pwm1_idrv_run@ei+3,w
 10361  0D24  00B5               	movwf	??_pid_pwm1_idrv_run+3
 10362  0D25  25C8               	fcall	PL22	;call to abstracted procedure
 10363  0D26  0846               	movf	pid_pwm1_idrv_run@ed,w
 10364  0D27  07D0               	addwf	pid_pwm1_idrv_run@t32,f
 10365  0D28  0847               	movf	pid_pwm1_idrv_run@ed+1,w
 10366  0D29  3DD1               	addwfc	pid_pwm1_idrv_run@t32+1,f
 10367  0D2A  0848               	movf	pid_pwm1_idrv_run@ed+2,w
 10368  0D2B  3DD2               	addwfc	pid_pwm1_idrv_run@t32+2,f
 10369  0D2C  0849               	movf	pid_pwm1_idrv_run@ed+3,w
 10370  0D2D  3DD3               	addwfc	pid_pwm1_idrv_run@t32+3,f
 10371                           
 10372                           ;sample.c: 291: t32/=10000;
 10373  0D2E  3027               	movlw	39
 10374  0D2F  01A7               	clrf	___aldiv@divisor+3
 10375  0D30  01A6               	clrf	___aldiv@divisor+2
 10376  0D31  00A5               	movwf	___aldiv@divisor+1
 10377  0D32  3010               	movlw	16
 10378  0D33  00A4               	movwf	___aldiv@divisor
 10379  0D34  0853               	movf	pid_pwm1_idrv_run@t32+3,w
 10380  0D35  00AB               	movwf	___aldiv@dividend+3
 10381  0D36  0852               	movf	pid_pwm1_idrv_run@t32+2,w
 10382  0D37  00AA               	movwf	___aldiv@dividend+2
 10383  0D38  0851               	movf	pid_pwm1_idrv_run@t32+1,w
 10384  0D39  00A9               	movwf	___aldiv@dividend+1
 10385  0D3A  0850               	movf	pid_pwm1_idrv_run@t32,w
 10386  0D3B  00A8               	movwf	___aldiv@dividend
 10387  0D3C  3184  24FC  318C   	fcall	___aldiv
 10388  0D3F  0827               	movf	?___aldiv+3,w
 10389  0D40  00D3               	movwf	pid_pwm1_idrv_run@t32+3
 10390  0D41  0826               	movf	?___aldiv+2,w
 10391  0D42  00D2               	movwf	pid_pwm1_idrv_run@t32+2
 10392  0D43  0825               	movf	?___aldiv+1,w
 10393  0D44  00D1               	movwf	pid_pwm1_idrv_run@t32+1
 10394  0D45  0824               	movf	?___aldiv,w
 10395  0D46  00D0               	movwf	pid_pwm1_idrv_run@t32
 10396                           
 10397                           ;sample.c: 292: t32+=pidU;
 10398  0D47  0021               	movlb	1	; select bank1
 10399  0D48  086C               	movf	_pidU^(0+128),w
 10400  0D49  0020               	movlb	0	; select bank0
 10401  0D4A  07D0               	addwf	pid_pwm1_idrv_run@t32,f
 10402  0D4B  0021               	movlb	1	; select bank1
 10403  0D4C  086D               	movf	(_pidU+1)^(0+128),w
 10404  0D4D  0020               	movlb	0	; select bank0
 10405  0D4E  3DD1               	addwfc	pid_pwm1_idrv_run@t32+1,f
 10406  0D4F  0021               	movlb	1	; select bank1
 10407  0D50  086E               	movf	(_pidU+2)^(0+128),w
 10408  0D51  0020               	movlb	0	; select bank0
 10409  0D52  3DD2               	addwfc	pid_pwm1_idrv_run@t32+2,f
 10410  0D53  0021               	movlb	1	; select bank1
 10411  0D54  086F               	movf	(_pidU+3)^(0+128),w
 10412  0D55  0020               	movlb	0	; select bank0
 10413  0D56  3DD3               	addwfc	pid_pwm1_idrv_run@t32+3,f
 10414                           
 10415                           ;sample.c: 294: __nop();
 10416  0D57  0000               	nop
 10417                           
 10418                           ;sample.c: 295: if(t32>1200)t32=1200;
 10419  0D58  0020               	movlb	0	; select bank0
 10420  0D59  1BD3               	btfsc	pid_pwm1_idrv_run@t32+3,7
 10421  0D5A  2D6D               	goto	l3884
 10422  0D5B  0853               	movf	pid_pwm1_idrv_run@t32+3,w
 10423  0D5C  1D03               	btfss	3,2
 10424  0D5D  2D67               	goto	l3882
 10425  0D5E  0852               	movf	pid_pwm1_idrv_run@t32+2,w
 10426  0D5F  1D03               	btfss	3,2
 10427  0D60  2D67               	goto	l3882
 10428  0D61  30B1               	movlw	177
 10429  0D62  0250               	subwf	pid_pwm1_idrv_run@t32,w
 10430  0D63  3004               	movlw	4
 10431  0D64  3B51               	subwfb	pid_pwm1_idrv_run@t32+1,w
 10432  0D65  1C03               	btfss	3,0
 10433  0D66  2D6D               	goto	l3884
 10434  0D67                     l3882:	
 10435  0D67  3004               	movlw	4
 10436  0D68  01D3               	clrf	pid_pwm1_idrv_run@t32+3
 10437  0D69  01D2               	clrf	pid_pwm1_idrv_run@t32+2
 10438  0D6A  00D1               	movwf	pid_pwm1_idrv_run@t32+1
 10439  0D6B  30B0               	movlw	176
 10440  0D6C  00D0               	movwf	pid_pwm1_idrv_run@t32
 10441  0D6D                     l3884:	
 10442                           
 10443                           ;sample.c: 296: if(t32<5)t32=5;
 10444  0D6D  1BD3               	btfsc	pid_pwm1_idrv_run@t32+3,7
 10445  0D6E  2D7C               	goto	l3886
 10446  0D6F  0853               	movf	pid_pwm1_idrv_run@t32+3,w
 10447  0D70  1D03               	btfss	3,2
 10448  0D71  2D81               	goto	l663
 10449  0D72  0852               	movf	pid_pwm1_idrv_run@t32+2,w
 10450  0D73  1D03               	btfss	3,2
 10451  0D74  2D81               	goto	l663
 10452  0D75  0851               	movf	pid_pwm1_idrv_run@t32+1,w
 10453  0D76  1D03               	btfss	3,2
 10454  0D77  2D81               	goto	l663
 10455  0D78  3005               	movlw	5
 10456  0D79  0250               	subwf	pid_pwm1_idrv_run@t32,w
 10457  0D7A  1803               	btfsc	3,0
 10458  0D7B  2D81               	goto	l663
 10459  0D7C                     l3886:	
 10460  0D7C  3005               	movlw	5
 10461  0D7D  00D0               	movwf	pid_pwm1_idrv_run@t32
 10462  0D7E  01D1               	clrf	pid_pwm1_idrv_run@t32+1
 10463  0D7F  01D2               	clrf	pid_pwm1_idrv_run@t32+2
 10464  0D80  01D3               	clrf	pid_pwm1_idrv_run@t32+3
 10465  0D81                     l663:	
 10466                           
 10467                           ;sample.c: 297: pidU=t32;
 10468  0D81  0853               	movf	pid_pwm1_idrv_run@t32+3,w
 10469  0D82  0021               	movlb	1	; select bank1
 10470  0D83  00EF               	movwf	(_pidU+3)^(0+128)
 10471  0D84  0020               	movlb	0	; select bank0
 10472  0D85  0852               	movf	pid_pwm1_idrv_run@t32+2,w
 10473  0D86  0021               	movlb	1	; select bank1
 10474  0D87  00EE               	movwf	(_pidU+2)^(0+128)
 10475  0D88  0020               	movlb	0	; select bank0
 10476  0D89  0851               	movf	pid_pwm1_idrv_run@t32+1,w
 10477  0D8A  0021               	movlb	1	; select bank1
 10478  0D8B  00ED               	movwf	(_pidU+1)^(0+128)
 10479  0D8C  0020               	movlb	0	; select bank0
 10480  0D8D  0850               	movf	pid_pwm1_idrv_run@t32,w
 10481  0D8E  0021               	movlb	1	; select bank1
 10482  0D8F  00EC               	movwf	_pidU^(0+128)
 10483                           
 10484                           ;sample.c: 298: uint16_t t16;
 10485                           ;sample.c: 299: t16=(uint16_t)pidU;
 10486  0D90  086D               	movf	(_pidU+1)^(0+128),w
 10487  0D91  0020               	movlb	0	; select bank0
 10488  0D92  00CF               	movwf	pid_pwm1_idrv_run@t16+1
 10489  0D93  0021               	movlb	1	; select bank1
 10490  0D94  086C               	movf	_pidU^(0+128),w
 10491  0D95  0020               	movlb	0	; select bank0
 10492  0D96  00CE               	movwf	pid_pwm1_idrv_run@t16
 10493                           
 10494                           ;sample.c: 300: set_idrv_pwm1_duty(t16);
 10495  0D97  084F               	movf	pid_pwm1_idrv_run@t16+1,w
 10496  0D98  00F4               	movwf	set_idrv_pwm1_duty@duty+1
 10497  0D99  084E               	movf	pid_pwm1_idrv_run@t16,w
 10498  0D9A  00F3               	movwf	set_idrv_pwm1_duty@duty
 10499  0D9B  2D9C               	ljmp	l2766
 10500  0D9C                     __end_of_pid_pwm1_idrv_run:	
 10501  0D9C                     __ptext20:	
 10502 ;; *************** function _set_idrv_pwm1_duty *****************
 10503 ;; Defined at:
 10504 ;;		line 46 in file "src/api/sample.c"
 10505 ;; Parameters:    Size  Location     Type
 10506 ;;  duty            2    3[COMMON] unsigned int 
 10507 ;; Auto vars:     Size  Location     Type
 10508 ;;  t16             2    5[COMMON] unsigned int 
 10509 ;; Return value:  Size  Location     Type
 10510 ;;                  1    wreg      void 
 10511 ;; Registers used:
 10512 ;;		wreg, pclath, cstack
 10513 ;; Tracked objects:
 10514 ;;		On entry : 1F/0
 10515 ;;		On exit  : 1F/1B
 10516 ;;		Unchanged: 0/0
 10517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10518 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10519 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10521 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10522 ;;Total ram usage:        4 bytes
 10523 ;; Hardware stack levels used:    1
 10524 ;; Hardware stack levels required when called:    2
 10525 ;; This function calls:
 10526 ;;		_get_idrv_pwm1_duty
 10527 ;; This function is called by:
 10528 ;;		_pid_pwm1_idrv_b_b
 10529 ;;		_pid_pwm1_idrv_run
 10530 ;; This function uses a non-reentrant model
 10531 ;;
 10532                           
 10533                           
 10534                           ;psect for function _set_idrv_pwm1_duty
 10535  0D9C                     _set_idrv_pwm1_duty:	
 10536  0D9C                     l2766:	
 10537                           ;incstack = 0
 10538                           ; Regs used in _set_idrv_pwm1_duty: [wreg+pclath+cstack]
 10539                           
 10540                           
 10541                           ;sample.c: 48: uint16_t t16;
 10542                           ;sample.c: 49: t16=get_idrv_pwm1_duty();
 10543  0D9C  25B1  318C         	fcall	_get_idrv_pwm1_duty
 10544  0D9E  0872               	movf	?_get_idrv_pwm1_duty+1,w
 10545  0D9F  00F6               	movwf	set_idrv_pwm1_duty@t16+1
 10546  0DA0  0871               	movf	?_get_idrv_pwm1_duty,w
 10547  0DA1  00F5               	movwf	set_idrv_pwm1_duty@t16
 10548                           
 10549                           ;sample.c: 50: if(t16==duty)return;
 10550  0DA2  0874               	movf	set_idrv_pwm1_duty@duty+1,w
 10551  0DA3  0676               	xorwf	set_idrv_pwm1_duty@t16+1,w
 10552  0DA4  1D03               	skipz
 10553  0DA5  2DA8               	goto	u1215
 10554  0DA6  0873               	movf	set_idrv_pwm1_duty@duty,w
 10555  0DA7  0675               	xorwf	set_idrv_pwm1_duty@t16,w
 10556  0DA8                     u1215:	
 10557  0DA8  1903               	btfsc	3,2
 10558  0DA9  0008               	return
 10559                           
 10560                           ;sample.c: 51: PWM1CONbits.EN = 0;
 10561  0DAA  139B               	bcf	27,7	;volatile
 10562                           
 10563                           ;sample.c: 52: PWM1DCL= (uint8_t)(duty&0xff);
 10564  0DAB  0873               	movf	set_idrv_pwm1_duty@duty,w
 10565  0DAC  0093               	movwf	19	;volatile
 10566                           
 10567                           ;sample.c: 53: PWM1DCH=(uint8_t)(duty>>8);
 10568  0DAD  0874               	movf	set_idrv_pwm1_duty@duty+1,w
 10569  0DAE  0094               	movwf	20	;volatile
 10570                           
 10571                           ;sample.c: 54: PWM1CONbits.EN = 1;
 10572  0DAF  179B               	bsf	27,7	;volatile
 10573  0DB0  0008               	return
 10574  0DB1                     __end_of_set_idrv_pwm1_duty:	
 10575  0DB1                     __ptext21:	
 10576 ;; *************** function _get_idrv_pwm1_duty *****************
 10577 ;; Defined at:
 10578 ;;		line 41 in file "src/api/sample.c"
 10579 ;; Parameters:    Size  Location     Type
 10580 ;;		None
 10581 ;; Auto vars:     Size  Location     Type
 10582 ;;		None
 10583 ;; Return value:  Size  Location     Type
 10584 ;;                  2    1[COMMON] unsigned int 
 10585 ;; Registers used:
 10586 ;;		wreg
 10587 ;; Tracked objects:
 10588 ;;		On entry : 1F/0
 10589 ;;		On exit  : 1F/1B
 10590 ;;		Unchanged: 0/0
 10591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10592 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10595 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10596 ;;Total ram usage:        2 bytes
 10597 ;; Hardware stack levels used:    1
 10598 ;; Hardware stack levels required when called:    1
 10599 ;; This function calls:
 10600 ;;		Nothing
 10601 ;; This function is called by:
 10602 ;;		_set_idrv_pwm1_duty
 10603 ;; This function uses a non-reentrant model
 10604 ;;
 10605                           
 10606                           
 10607                           ;psect for function _get_idrv_pwm1_duty
 10608  0DB1                     _get_idrv_pwm1_duty:	
 10609                           
 10610                           ;sample.c: 43: return ((PWM1DCH<<8)|PWM1DCL);
 10611                           
 10612                           ;incstack = 0
 10613                           ; Regs used in _get_idrv_pwm1_duty: [wreg]
 10614  0DB1  003B               	movlb	27	; select bank27
 10615  0DB2  0814               	movf	20,w	;volatile
 10616  0DB3  00F2               	movwf	?_get_idrv_pwm1_duty+1
 10617  0DB4  01F1               	clrf	?_get_idrv_pwm1_duty
 10618  0DB5  0813               	movf	19,w	;volatile
 10619  0DB6  04F1               	iorwf	?_get_idrv_pwm1_duty,f
 10620  0DB7  0008               	return
 10621  0DB8                     __end_of_get_idrv_pwm1_duty:	
 10622  0DB8                     PL12:	
 10623  0DB8  00F4               	movwf	___lmul@multiplier+3
 10624  0DB9  0834               	movf	??_pid_pwm1_idrv_run+2,w
 10625  0DBA  00F3               	movwf	___lmul@multiplier+2
 10626  0DBB  0833               	movf	??_pid_pwm1_idrv_run+1,w
 10627  0DBC  00F2               	movwf	___lmul@multiplier+1
 10628  0DBD  0832               	movf	??_pid_pwm1_idrv_run,w
 10629  0DBE  00F1               	movwf	___lmul@multiplier
 10630  0DBF  0857               	movf	_PidKp+3,w
 10631  0DC0  00F8               	movwf	___lmul@multiplicand+3
 10632  0DC1  0856               	movf	_PidKp+2,w
 10633  0DC2  00F7               	movwf	___lmul@multiplicand+2
 10634  0DC3  0855               	movf	_PidKp+1,w
 10635  0DC4  00F6               	movwf	___lmul@multiplicand+1
 10636  0DC5  0854               	movf	_PidKp,w
 10637  0DC6  00F5               	movwf	___lmul@multiplicand
 10638  0DC7  0008               	return
 10639  0DC8                     __end_ofPL12:	
 10640  0DC8                     PL22:	
 10641  0DC8  00D3               	movwf	pid_pwm1_idrv_run@t32+3
 10642  0DC9  0834               	movf	??_pid_pwm1_idrv_run+2,w
 10643  0DCA  00D2               	movwf	pid_pwm1_idrv_run@t32+2
 10644  0DCB  0833               	movf	??_pid_pwm1_idrv_run+1,w
 10645  0DCC  00D1               	movwf	pid_pwm1_idrv_run@t32+1
 10646  0DCD  0832               	movf	??_pid_pwm1_idrv_run,w
 10647  0DCE  00D0               	movwf	pid_pwm1_idrv_run@t32
 10648  0DCF  0008               	return
 10649  0DD0                     __end_ofPL22:	
 10650                           
 10651                           	psect	swtext1
 10652  07EA                     __pswtext1:	
 10653  07EA                     S4156:	
 10654  07EA  3183  2B42         	ljmp	l3794
 10655  07EC  3183  2B42         	ljmp	l3794
 10656  07EE  3183  2B4C         	ljmp	l3800
 10657  07F0  3183  2B62         	ljmp	l3806
 10658  07F2  3183  2B89         	ljmp	l3820
 10659  07F4  3184  2CFB         	ljmp	l643
 10660                           
 10661                           	psect	text25
 10662  08F2                     __ptext25:	
 10663 ;; *************** function ___almod *****************
 10664 ;; Defined at:
 10665 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\almod.c"
 10666 ;; Parameters:    Size  Location     Type
 10667 ;;  divisor         4    1[COMMON] long 
 10668 ;;  dividend        4    5[COMMON] long 
 10669 ;; Auto vars:     Size  Location     Type
 10670 ;;  sign            1   10[COMMON] unsigned char 
 10671 ;;  counter         1    9[COMMON] unsigned char 
 10672 ;; Return value:  Size  Location     Type
 10673 ;;                  4    1[COMMON] long 
 10674 ;; Registers used:
 10675 ;;		wreg, status,2, status,0
 10676 ;; Tracked objects:
 10677 ;;		On entry : 1F/0
 10678 ;;		On exit  : 1F/0
 10679 ;;		Unchanged: 1F/0
 10680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10681 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10682 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10684 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10685 ;;Total ram usage:       10 bytes
 10686 ;; Hardware stack levels used:    1
 10687 ;; Hardware stack levels required when called:    1
 10688 ;; This function calls:
 10689 ;;		Nothing
 10690 ;; This function is called by:
 10691 ;;		_m_int_2_str_ex
 10692 ;; This function uses a non-reentrant model
 10693 ;;
 10694                           
 10695                           
 10696                           ;psect for function ___almod
 10697  08F2                     ___almod:	
 10698                           
 10699                           ;incstack = 0
 10700                           ; Regs used in ___almod: [wreg+status,2+status,0]
 10701  08F2  01FA               	clrf	___almod@sign
 10702  08F3  1FF8               	btfss	___almod@dividend+3,7
 10703  08F4  28FF               	goto	l1162
 10704  08F5  214C  3188         	fcall	PL44	;call to abstracted procedure
 10705  08F7  1903               	skipnz
 10706  08F8  0AF6               	incf	___almod@dividend+1,f
 10707  08F9  1903               	skipnz
 10708  08FA  0AF7               	incf	___almod@dividend+2,f
 10709  08FB  1903               	skipnz
 10710  08FC  0AF8               	incf	___almod@dividend+3,f
 10711  08FD  01FA               	clrf	___almod@sign
 10712  08FE  0AFA               	incf	___almod@sign,f
 10713  08FF                     l1162:	
 10714  08FF  1FF4               	btfss	___almod@divisor+3,7
 10715  0900  290C               	goto	l3010
 10716  0901  09F1               	comf	___almod@divisor,f
 10717  0902  09F2               	comf	___almod@divisor+1,f
 10718  0903  09F3               	comf	___almod@divisor+2,f
 10719  0904  09F4               	comf	___almod@divisor+3,f
 10720  0905  0AF1               	incf	___almod@divisor,f
 10721  0906  1903               	skipnz
 10722  0907  0AF2               	incf	___almod@divisor+1,f
 10723  0908  1903               	skipnz
 10724  0909  0AF3               	incf	___almod@divisor+2,f
 10725  090A  1903               	skipnz
 10726  090B  0AF4               	incf	___almod@divisor+3,f
 10727  090C                     l3010:	
 10728  090C  0874               	movf	___almod@divisor+3,w
 10729  090D  0473               	iorwf	___almod@divisor+2,w
 10730  090E  0472               	iorwf	___almod@divisor+1,w
 10731  090F  0471               	iorwf	___almod@divisor,w
 10732  0910  1903               	skipnz
 10733  0911  2939               	goto	l3026
 10734  0912  01F9               	clrf	___almod@counter
 10735  0913                     L7:	
 10736  0913  0AF9               	incf	___almod@counter,f
 10737  0914  1BF4               	btfsc	___almod@divisor+3,7
 10738  0915  291B               	goto	l3018
 10739  0916  35F1               	lslf	___almod@divisor,f
 10740  0917  0DF2               	rlf	___almod@divisor+1,f
 10741  0918  0DF3               	rlf	___almod@divisor+2,f
 10742  0919  0DF4               	rlf	___almod@divisor+3,f
 10743  091A  2913               	goto	L7
 10744  091B                     l3018:	
 10745  091B  0874               	movf	___almod@divisor+3,w
 10746  091C  0278               	subwf	___almod@dividend+3,w
 10747  091D  1D03               	skipz
 10748  091E  2929               	goto	u1515
 10749  091F  0873               	movf	___almod@divisor+2,w
 10750  0920  0277               	subwf	___almod@dividend+2,w
 10751  0921  1D03               	skipz
 10752  0922  2929               	goto	u1515
 10753  0923  0872               	movf	___almod@divisor+1,w
 10754  0924  0276               	subwf	___almod@dividend+1,w
 10755  0925  1D03               	skipz
 10756  0926  2929               	goto	u1515
 10757  0927  0871               	movf	___almod@divisor,w
 10758  0928  0275               	subwf	___almod@dividend,w
 10759  0929                     u1515:	
 10760  0929  1C03               	skipc
 10761  092A  2933               	goto	l3022
 10762  092B  0871               	movf	___almod@divisor,w
 10763  092C  02F5               	subwf	___almod@dividend,f
 10764  092D  0872               	movf	___almod@divisor+1,w
 10765  092E  3BF6               	subwfb	___almod@dividend+1,f
 10766  092F  0873               	movf	___almod@divisor+2,w
 10767  0930  3BF7               	subwfb	___almod@dividend+2,f
 10768  0931  0874               	movf	___almod@divisor+3,w
 10769  0932  3BF8               	subwfb	___almod@dividend+3,f
 10770  0933                     l3022:	
 10771  0933  36F4               	lsrf	___almod@divisor+3,f
 10772  0934  0CF3               	rrf	___almod@divisor+2,f
 10773  0935  0CF2               	rrf	___almod@divisor+1,f
 10774  0936  0CF1               	rrf	___almod@divisor,f
 10775  0937  0BF9               	decfsz	___almod@counter,f
 10776  0938  291B               	goto	l3018
 10777  0939                     l3026:	
 10778  0939  087A               	movf	___almod@sign,w
 10779  093A  1903               	btfsc	3,2
 10780  093B  2943               	goto	l3030
 10781  093C  214C               	fcall	PL44	;call to abstracted procedure
 10782  093D  1903               	skipnz
 10783  093E  0AF6               	incf	___almod@dividend+1,f
 10784  093F  1903               	skipnz
 10785  0940  0AF7               	incf	___almod@dividend+2,f
 10786  0941  1903               	skipnz
 10787  0942  0AF8               	incf	___almod@dividend+3,f
 10788  0943                     l3030:	
 10789  0943  0878               	movf	___almod@dividend+3,w
 10790  0944  00F4               	movwf	?___almod+3
 10791  0945  0877               	movf	___almod@dividend+2,w
 10792  0946  00F3               	movwf	?___almod+2
 10793  0947  0876               	movf	___almod@dividend+1,w
 10794  0948  00F2               	movwf	?___almod+1
 10795  0949  0875               	movf	___almod@dividend,w
 10796  094A  00F1               	movwf	?___almod
 10797  094B  0008               	return
 10798  094C                     __end_of___almod:	
 10799  094C                     PL44:	
 10800  094C  09F5               	comf	___almod@dividend,f
 10801  094D  09F6               	comf	___almod@dividend+1,f
 10802  094E  09F7               	comf	___almod@dividend+2,f
 10803  094F  09F8               	comf	___almod@dividend+3,f
 10804  0950  0AF5               	incf	___almod@dividend,f
 10805  0951  0008               	return
 10806  0952                     __end_ofPL44:	
 10807                           
 10808                           	psect	text26
 10809  0952                     __ptext26:	
 10810 ;; *************** function _calc_temp_rs *****************
 10811 ;; Defined at:
 10812 ;;		line 154 in file "src/api/sample.c"
 10813 ;; Parameters:    Size  Location     Type
 10814 ;;		None
 10815 ;; Auto vars:     Size  Location     Type
 10816 ;;  y               4   13[BANK0 ] unsigned long 
 10817 ;;  x               4    9[BANK0 ] unsigned long 
 10818 ;; Return value:  Size  Location     Type
 10819 ;;                  4    5[BANK0 ] unsigned long 
 10820 ;; Registers used:
 10821 ;;		wreg, status,2, status,0, pclath, cstack
 10822 ;; Tracked objects:
 10823 ;;		On entry : 1F/0
 10824 ;;		On exit  : 1F/0
 10825 ;;		Unchanged: 0/0
 10826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10827 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10828 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10830 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10831 ;;Total ram usage:       12 bytes
 10832 ;; Hardware stack levels used:    1
 10833 ;; Hardware stack levels required when called:    2
 10834 ;; This function calls:
 10835 ;;		___lldiv
 10836 ;;		___lmul
 10837 ;; This function is called by:
 10838 ;;		_main
 10839 ;; This function uses a non-reentrant model
 10840 ;;
 10841                           
 10842                           
 10843                           ;psect for function _calc_temp_rs
 10844  0952                     _calc_temp_rs:	
 10845                           
 10846                           ;sample.c: 167: uint32_t x,y;
 10847                           ;sample.c: 168: y=12000UL;
 10848                           
 10849                           ;incstack = 0
 10850                           ; Regs used in _calc_temp_rs: [wreg+status,2+status,0+pclath+cstack]
 10851  0952  302E               	movlw	46
 10852  0953  01B0               	clrf	calc_temp_rs@y+3
 10853  0954  01AF               	clrf	calc_temp_rs@y+2
 10854  0955  00AE               	movwf	calc_temp_rs@y+1
 10855  0956  30E0               	movlw	224
 10856  0957  00AD               	movwf	calc_temp_rs@y
 10857                           
 10858                           ;sample.c: 169: y=y*rtAdcValueRsHi;
 10859  0958  0021               	movlb	1	; select bank1
 10860  0959  0860               	movf	_rtAdcValueRsHi^(0+128),w
 10861  095A  00F1               	movwf	___lmul@multiplier
 10862  095B  0861               	movf	(_rtAdcValueRsHi+1)^(0+128),w
 10863  095C  00F2               	movwf	___lmul@multiplier+1
 10864  095D  01F3               	clrf	___lmul@multiplier+2
 10865  095E  01F4               	clrf	___lmul@multiplier+3
 10866  095F  0020               	movlb	0	; select bank0
 10867  0960  0830               	movf	calc_temp_rs@y+3,w
 10868  0961  00F8               	movwf	___lmul@multiplicand+3
 10869  0962  082F               	movf	calc_temp_rs@y+2,w
 10870  0963  00F7               	movwf	___lmul@multiplicand+2
 10871  0964  082E               	movf	calc_temp_rs@y+1,w
 10872  0965  00F6               	movwf	___lmul@multiplicand+1
 10873  0966  082D               	movf	calc_temp_rs@y,w
 10874  0967  00F5               	movwf	___lmul@multiplicand
 10875  0968  3185  2568  3189   	fcall	___lmul
 10876  096B  0874               	movf	?___lmul+3,w
 10877  096C  00B0               	movwf	calc_temp_rs@y+3
 10878  096D  0873               	movf	?___lmul+2,w
 10879  096E  00AF               	movwf	calc_temp_rs@y+2
 10880  096F  0872               	movf	?___lmul+1,w
 10881  0970  00AE               	movwf	calc_temp_rs@y+1
 10882  0971  0871               	movf	?___lmul,w
 10883  0972  00AD               	movwf	calc_temp_rs@y
 10884                           
 10885                           ;sample.c: 170: x=rtAdcValueRsLo;
 10886  0973  085A               	movf	_rtAdcValueRsLo,w
 10887  0974  00A9               	movwf	calc_temp_rs@x
 10888  0975  085B               	movf	_rtAdcValueRsLo+1,w
 10889  0976  00AA               	movwf	calc_temp_rs@x+1
 10890  0977  01AB               	clrf	calc_temp_rs@x+2
 10891  0978  01AC               	clrf	calc_temp_rs@x+3
 10892                           
 10893                           ;sample.c: 171: y=y/x;
 10894  0979  082C               	movf	calc_temp_rs@x+3,w
 10895  097A  00F4               	movwf	___lldiv@divisor+3
 10896  097B  082B               	movf	calc_temp_rs@x+2,w
 10897  097C  00F3               	movwf	___lldiv@divisor+2
 10898  097D  082A               	movf	calc_temp_rs@x+1,w
 10899  097E  00F2               	movwf	___lldiv@divisor+1
 10900  097F  0829               	movf	calc_temp_rs@x,w
 10901  0980  00F1               	movwf	___lldiv@divisor
 10902  0981  0830               	movf	calc_temp_rs@y+3,w
 10903  0982  00F8               	movwf	___lldiv@dividend+3
 10904  0983  082F               	movf	calc_temp_rs@y+2,w
 10905  0984  00F7               	movwf	___lldiv@dividend+2
 10906  0985  082E               	movf	calc_temp_rs@y+1,w
 10907  0986  00F6               	movwf	___lldiv@dividend+1
 10908  0987  082D               	movf	calc_temp_rs@y,w
 10909  0988  00F5               	movwf	___lldiv@dividend
 10910  0989  3186  26D1  3189   	fcall	___lldiv
 10911  098C  0874               	movf	?___lldiv+3,w
 10912  098D  00B0               	movwf	calc_temp_rs@y+3
 10913  098E  0873               	movf	?___lldiv+2,w
 10914  098F  00AF               	movwf	calc_temp_rs@y+2
 10915  0990  0872               	movf	?___lldiv+1,w
 10916  0991  00AE               	movwf	calc_temp_rs@y+1
 10917  0992  0871               	movf	?___lldiv,w
 10918  0993  00AD               	movwf	calc_temp_rs@y
 10919                           
 10920                           ;sample.c: 172: if(y<2000)y=2000;
 10921  0994  0830               	movf	calc_temp_rs@y+3,w
 10922  0995  1D03               	btfss	3,2
 10923  0996  29A6               	goto	l3762
 10924  0997  082F               	movf	calc_temp_rs@y+2,w
 10925  0998  1D03               	btfss	3,2
 10926  0999  29A6               	goto	l3762
 10927  099A  30D0               	movlw	208
 10928  099B  022D               	subwf	calc_temp_rs@y,w
 10929  099C  3007               	movlw	7
 10930  099D  3B2E               	subwfb	calc_temp_rs@y+1,w
 10931  099E  1803               	btfsc	3,0
 10932  099F  29A6               	goto	l3762
 10933  09A0  3007               	movlw	7
 10934  09A1  01B0               	clrf	calc_temp_rs@y+3
 10935  09A2  01AF               	clrf	calc_temp_rs@y+2
 10936  09A3  00AE               	movwf	calc_temp_rs@y+1
 10937  09A4  30D0               	movlw	208
 10938  09A5  00AD               	movwf	calc_temp_rs@y
 10939  09A6                     l3762:	
 10940                           
 10941                           ;sample.c: 173: if(y>25000)y=25000;
 10942  09A6  0830               	movf	calc_temp_rs@y+3,w
 10943  09A7  1D03               	btfss	3,2
 10944  09A8  29B2               	goto	l3764
 10945  09A9  082F               	movf	calc_temp_rs@y+2,w
 10946  09AA  1D03               	btfss	3,2
 10947  09AB  29B2               	goto	l3764
 10948  09AC  30A9               	movlw	169
 10949  09AD  022D               	subwf	calc_temp_rs@y,w
 10950  09AE  3061               	movlw	97
 10951  09AF  3B2E               	subwfb	calc_temp_rs@y+1,w
 10952  09B0  1C03               	btfss	3,0
 10953  09B1  29B8               	goto	l3766
 10954  09B2                     l3764:	
 10955  09B2  3061               	movlw	97
 10956  09B3  01B0               	clrf	calc_temp_rs@y+3
 10957  09B4  01AF               	clrf	calc_temp_rs@y+2
 10958  09B5  00AE               	movwf	calc_temp_rs@y+1
 10959  09B6  30A8               	movlw	168
 10960  09B7  00AD               	movwf	calc_temp_rs@y
 10961  09B8                     l3766:	
 10962                           
 10963                           ;sample.c: 174: y=y-1000;
 10964  09B8  3018               	movlw	24
 10965  09B9  07AD               	addwf	calc_temp_rs@y,f
 10966  09BA  30FC               	movlw	252
 10967  09BB  3DAE               	addwfc	calc_temp_rs@y+1,f
 10968  09BC  30FF               	movlw	255
 10969  09BD  3DAF               	addwfc	calc_temp_rs@y+2,f
 10970  09BE  3DB0               	addwfc	calc_temp_rs@y+3,f
 10971                           
 10972                           ;sample.c: 176: return y;
 10973  09BF  0830               	movf	calc_temp_rs@y+3,w
 10974  09C0  00A8               	movwf	?_calc_temp_rs+3
 10975  09C1  082F               	movf	calc_temp_rs@y+2,w
 10976  09C2  00A7               	movwf	?_calc_temp_rs+2
 10977  09C3  082E               	movf	calc_temp_rs@y+1,w
 10978  09C4  00A6               	movwf	?_calc_temp_rs+1
 10979  09C5  082D               	movf	calc_temp_rs@y,w
 10980  09C6  00A5               	movwf	?_calc_temp_rs
 10981  09C7  0008               	return
 10982  09C8                     __end_of_calc_temp_rs:	
 10983                           
 10984                           	psect	text30
 10985  0AC9                     __ptext30:	
 10986 ;; *************** function _calc_expect_vout_adc_value *****************
 10987 ;; Defined at:
 10988 ;;		line 396 in file "src/api/sample.c"
 10989 ;; Parameters:    Size  Location     Type
 10990 ;;  x               2   18[BANK0 ] unsigned int 
 10991 ;; Auto vars:     Size  Location     Type
 10992 ;;  t32             4   16[BANK3 ] long 
 10993 ;;  x0              4   12[BANK3 ] long 
 10994 ;;  y0              4    8[BANK3 ] long 
 10995 ;;  x1              4    4[BANK3 ] long 
 10996 ;;  y1              4    0[BANK3 ] long 
 10997 ;;  i               1   20[BANK3 ] unsigned char 
 10998 ;;  index           1    0        unsigned char 
 10999 ;; Return value:  Size  Location     Type
 11000 ;;                  2   18[BANK0 ] unsigned int 
 11001 ;; Registers used:
 11002 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11003 ;; Tracked objects:
 11004 ;;		On entry : 1F/0
 11005 ;;		On exit  : 1F/0
 11006 ;;		Unchanged: 0/0
 11007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11008 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11009 ;;      Locals:         0       0       0       0      21       0       0       0       0       0       0       0       
      +0       0
 11010 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11011 ;;      Totals:         0      14       0       0      21       0       0       0       0       0       0       0       
      +0       0
 11012 ;;Total ram usage:       35 bytes
 11013 ;; Hardware stack levels used:    1
 11014 ;; Hardware stack levels required when called:    2
 11015 ;; This function calls:
 11016 ;;		___aldiv
 11017 ;;		___lmul
 11018 ;; This function is called by:
 11019 ;;		_main
 11020 ;; This function uses a non-reentrant model
 11021 ;;
 11022                           
 11023                           
 11024                           ;psect for function _calc_expect_vout_adc_value
 11025  0AC9                     _calc_expect_vout_adc_value:	
 11026                           
 11027                           ;sample.c: 399: int32_t y0,y1,x0,x1;
 11028                           ;sample.c: 400: uint8_t i;
 11029                           ;sample.c: 401: int32_t t32;
 11030                           ;sample.c: 402: for (i = 0; i < 20-2; i++) {
 11031                           
 11032                           ;incstack = 0
 11033                           ; Regs used in _calc_expect_vout_adc_value: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 11034  0AC9  0023               	movlb	3	; select bank3
 11035  0ACA  01B4               	clrf	calc_expect_vout_adc_value@i^(0+384)
 11036  0ACB                     l3922:	
 11037                           
 11038                           ;sample.c: 403: if(sysData.calibRsAdc[i]<sysData.calibRsAdc[i+1]){
 11039  0ACB  2406  318A         	fcall	PL8	;call to abstracted procedure
 11040  0ACD  23F1  318A         	fcall	PL2	;call to abstracted procedure
 11041  0ACF  0023               	movlb	3	; select bank3
 11042  0AD0  0834               	movf	calc_expect_vout_adc_value@i^(0+384),w
 11043  0AD1  0020               	movlb	0	; select bank0
 11044  0AD2  00BA               	movwf	??_calc_expect_vout_adc_value+6
 11045  0AD3  308E               	movlw	142
 11046  0AD4  01BB               	clrf	??_calc_expect_vout_adc_value+7
 11047  0AD5  35BA               	lslf	??_calc_expect_vout_adc_value+6,f
 11048  0AD6  0DBB               	rlf	??_calc_expect_vout_adc_value+7,f
 11049  0AD7  00BC               	movwf	??_calc_expect_vout_adc_value+8
 11050  0AD8  3023               	movlw	35
 11051  0AD9  00BD               	movwf	??_calc_expect_vout_adc_value+9
 11052  0ADA  083A               	movf	??_calc_expect_vout_adc_value+6,w
 11053  0ADB  073C               	addwf	??_calc_expect_vout_adc_value+8,w
 11054  0ADC  0086               	movwf	6
 11055  0ADD  083B               	movf	??_calc_expect_vout_adc_value+7,w
 11056  0ADE  3D3D               	addwfc	??_calc_expect_vout_adc_value+9,w
 11057  0ADF  0087               	movwf	7
 11058  0AE0  3F40               	moviw [0]fsr1
 11059  0AE1  00BE               	movwf	??_calc_expect_vout_adc_value+10
 11060  0AE2  3F41               	moviw [1]fsr1
 11061  0AE3  00BF               	movwf	??_calc_expect_vout_adc_value+11
 11062  0AE4  0839               	movf	??_calc_expect_vout_adc_value+5,w
 11063  0AE5  023F               	subwf	??_calc_expect_vout_adc_value+11,w
 11064  0AE6  1D03               	skipz
 11065  0AE7  2AEA               	goto	u2555
 11066  0AE8  0838               	movf	??_calc_expect_vout_adc_value+4,w
 11067  0AE9  023E               	subwf	??_calc_expect_vout_adc_value+10,w
 11068  0AEA                     u2555:	
 11069  0AEA  1803               	skipnc
 11070  0AEB  2AF8               	goto	l3928
 11071                           
 11072                           ;sample.c: 404: if (x <= sysData.calibRsAdc[i])break;
 11073  0AEC  0023               	movlb	3	; select bank3
 11074  0AED  2402  318A         	fcall	PL4	;call to abstracted procedure
 11075  0AEF  23F1  318A         	fcall	PL2	;call to abstracted procedure
 11076  0AF1  0833               	movf	calc_expect_vout_adc_value@x+1,w
 11077  0AF2  0239               	subwf	??_calc_expect_vout_adc_value+5,w
 11078  0AF3  1D03               	skipz
 11079  0AF4  2B02               	goto	u2575
 11080  0AF5  0832               	movf	calc_expect_vout_adc_value@x,w
 11081  0AF6  0238               	subwf	??_calc_expect_vout_adc_value+4,w
 11082  0AF7  2B02               	goto	u2575
 11083  0AF8                     l3928:	
 11084                           
 11085                           ;sample.c: 406: if (x >= sysData.calibRsAdc[i])break;
 11086  0AF8  0023               	movlb	3	; select bank3
 11087  0AF9  2402  318A         	fcall	PL4	;call to abstracted procedure
 11088  0AFB  23F1  318A         	fcall	PL2	;call to abstracted procedure
 11089  0AFD  0233               	subwf	calc_expect_vout_adc_value@x+1,w
 11090  0AFE  1D03               	skipz
 11091  0AFF  2B02               	goto	u2575
 11092  0B00  0838               	movf	??_calc_expect_vout_adc_value+4,w
 11093  0B01  0232               	subwf	calc_expect_vout_adc_value@x,w
 11094  0B02                     u2575:	
 11095  0B02  1803               	btfsc	3,0
 11096  0B03  2B0A               	goto	l3936
 11097  0B04  0023               	movlb	3	; select bank3
 11098  0B05  3012               	movlw	18
 11099  0B06  0AB4               	incf	calc_expect_vout_adc_value@i^(0+384),f
 11100  0B07  0234               	subwf	calc_expect_vout_adc_value@i^(0+384),w
 11101  0B08  1C03               	skipc
 11102  0B09  2ACB               	goto	l3922
 11103  0B0A                     l3936:	
 11104                           
 11105                           ;sample.c: 407: }
 11106                           ;sample.c: 408: }
 11107                           ;sample.c: 409: if(i)i--;
 11108  0B0A  0023               	movlb	3	; select bank3
 11109  0B0B  0834               	movf	calc_expect_vout_adc_value@i^(0+384),w
 11110  0B0C  1D03               	btfss	3,2
 11111  0B0D  03B4               	decf	calc_expect_vout_adc_value@i^(0+384),f
 11112                           
 11113                           ;sample.c: 410: if (i > 20-2)i=20-2;
 11114  0B0E  3013               	movlw	19
 11115  0B0F  0234               	subwf	calc_expect_vout_adc_value@i^(0+384),w
 11116  0B10  1C03               	skipc
 11117  0B11  2B14               	goto	l3944
 11118  0B12  3012               	movlw	18
 11119  0B13  00B4               	movwf	calc_expect_vout_adc_value@i^(0+384)
 11120  0B14                     l3944:	
 11121                           
 11122                           ;sample.c: 411: y1=sysData.calibVoMV[i+1];
 11123  0B14  0834               	movf	calc_expect_vout_adc_value@i^(0+384),w
 11124  0B15  0020               	movlb	0	; select bank0
 11125  0B16  00B4               	movwf	??_calc_expect_vout_adc_value
 11126  0B17  30B8               	movlw	184
 11127  0B18  23F1  318A         	fcall	PL2	;call to abstracted procedure
 11128  0B1A  0838               	movf	??_calc_expect_vout_adc_value+4,w
 11129  0B1B  0023               	movlb	3	; select bank3
 11130  0B1C  00A0               	movwf	calc_expect_vout_adc_value@y1^(0+384)
 11131  0B1D  0020               	movlb	0	; select bank0
 11132  0B1E  0839               	movf	??_calc_expect_vout_adc_value+5,w
 11133  0B1F  0023               	movlb	3	; select bank3
 11134  0B20  00A1               	movwf	(calc_expect_vout_adc_value@y1^(0+384)+1)
 11135  0B21  01A2               	clrf	(calc_expect_vout_adc_value@y1^(0+384)+2)
 11136  0B22  01A3               	clrf	(calc_expect_vout_adc_value@y1^(0+384)+3)
 11137                           
 11138                           ;sample.c: 412: y0=sysData.calibVoMV[i];
 11139  0B23  0834               	movf	calc_expect_vout_adc_value@i^(0+384),w
 11140  0B24  0020               	movlb	0	; select bank0
 11141  0B25  00B4               	movwf	??_calc_expect_vout_adc_value
 11142  0B26  30B6               	movlw	182
 11143  0B27  23F1  318A         	fcall	PL2	;call to abstracted procedure
 11144  0B29  0838               	movf	??_calc_expect_vout_adc_value+4,w
 11145  0B2A  0023               	movlb	3	; select bank3
 11146  0B2B  00A8               	movwf	calc_expect_vout_adc_value@y0^(0+384)
 11147  0B2C  0020               	movlb	0	; select bank0
 11148  0B2D  0839               	movf	??_calc_expect_vout_adc_value+5,w
 11149  0B2E  0023               	movlb	3	; select bank3
 11150  0B2F  00A9               	movwf	(calc_expect_vout_adc_value@y0^(0+384)+1)
 11151  0B30  01AA               	clrf	(calc_expect_vout_adc_value@y0^(0+384)+2)
 11152  0B31  01AB               	clrf	(calc_expect_vout_adc_value@y0^(0+384)+3)
 11153                           
 11154                           ;sample.c: 415: x1=sysData.calibRsAdc[i+1];
 11155  0B32  2406  318A         	fcall	PL8	;call to abstracted procedure
 11156  0B34  23F1  318A         	fcall	PL2	;call to abstracted procedure
 11157  0B36  0838               	movf	??_calc_expect_vout_adc_value+4,w
 11158  0B37  0023               	movlb	3	; select bank3
 11159  0B38  00A4               	movwf	calc_expect_vout_adc_value@x1^(0+384)
 11160  0B39  0020               	movlb	0	; select bank0
 11161  0B3A  0839               	movf	??_calc_expect_vout_adc_value+5,w
 11162  0B3B  0023               	movlb	3	; select bank3
 11163  0B3C  00A5               	movwf	(calc_expect_vout_adc_value@x1^(0+384)+1)
 11164  0B3D  01A6               	clrf	(calc_expect_vout_adc_value@x1^(0+384)+2)
 11165  0B3E  01A7               	clrf	(calc_expect_vout_adc_value@x1^(0+384)+3)
 11166                           
 11167                           ;sample.c: 416: x0=sysData.calibRsAdc[i];
 11168  0B3F  2402  318A         	fcall	PL4	;call to abstracted procedure
 11169  0B41  23F1  318A         	fcall	PL2	;call to abstracted procedure
 11170  0B43  0838               	movf	??_calc_expect_vout_adc_value+4,w
 11171  0B44  0023               	movlb	3	; select bank3
 11172  0B45  00AC               	movwf	calc_expect_vout_adc_value@x0^(0+384)
 11173  0B46  0020               	movlb	0	; select bank0
 11174  0B47  0839               	movf	??_calc_expect_vout_adc_value+5,w
 11175  0B48  0023               	movlb	3	; select bank3
 11176  0B49  00AD               	movwf	(calc_expect_vout_adc_value@x0^(0+384)+1)
 11177  0B4A  01AE               	clrf	(calc_expect_vout_adc_value@x0^(0+384)+2)
 11178  0B4B  01AF               	clrf	(calc_expect_vout_adc_value@x0^(0+384)+3)
 11179                           
 11180                           ;sample.c: 419: if(x1==x0)return y0;
 11181  0B4C  082F               	movf	(calc_expect_vout_adc_value@x0+3)^(0+384),w
 11182  0B4D  0627               	xorwf	(calc_expect_vout_adc_value@x1+3)^(0+384),w
 11183  0B4E  1D03               	skipz
 11184  0B4F  2B5A               	goto	u2615
 11185  0B50  082E               	movf	(calc_expect_vout_adc_value@x0+2)^(0+384),w
 11186  0B51  0626               	xorwf	(calc_expect_vout_adc_value@x1+2)^(0+384),w
 11187  0B52  1D03               	skipz
 11188  0B53  2B5A               	goto	u2615
 11189  0B54  082D               	movf	(calc_expect_vout_adc_value@x0+1)^(0+384),w
 11190  0B55  0625               	xorwf	(calc_expect_vout_adc_value@x1+1)^(0+384),w
 11191  0B56  1D03               	skipz
 11192  0B57  2B5A               	goto	u2615
 11193  0B58  082C               	movf	calc_expect_vout_adc_value@x0^(0+384),w
 11194  0B59  0624               	xorwf	calc_expect_vout_adc_value@x1^(0+384),w
 11195  0B5A                     u2615:	
 11196  0B5A  1D03               	skipz
 11197  0B5B  2B64               	goto	l3956
 11198  0B5C  0829               	movf	(calc_expect_vout_adc_value@y0+1)^(0+384),w
 11199  0B5D  0020               	movlb	0	; select bank0
 11200  0B5E  00B3               	movwf	?_calc_expect_vout_adc_value+1
 11201  0B5F  0023               	movlb	3	; select bank3
 11202  0B60  0828               	movf	calc_expect_vout_adc_value@y0^(0+384),w
 11203  0B61  0020               	movlb	0	; select bank0
 11204  0B62  00B2               	movwf	?_calc_expect_vout_adc_value
 11205  0B63  0008               	return
 11206  0B64                     l3956:	
 11207                           
 11208                           ;sample.c: 422: t32=(x-x0);
 11209  0B64  0020               	movlb	0	; select bank0
 11210  0B65  0832               	movf	calc_expect_vout_adc_value@x,w
 11211  0B66  0023               	movlb	3	; select bank3
 11212  0B67  00B0               	movwf	calc_expect_vout_adc_value@t32^(0+384)
 11213  0B68  0020               	movlb	0	; select bank0
 11214  0B69  0833               	movf	calc_expect_vout_adc_value@x+1,w
 11215  0B6A  0023               	movlb	3	; select bank3
 11216  0B6B  00B1               	movwf	(calc_expect_vout_adc_value@t32^(0+384)+1)
 11217  0B6C  01B2               	clrf	(calc_expect_vout_adc_value@t32^(0+384)+2)
 11218  0B6D  01B3               	clrf	(calc_expect_vout_adc_value@t32^(0+384)+3)
 11219  0B6E  082C               	movf	calc_expect_vout_adc_value@x0^(0+384),w
 11220  0B6F  02B0               	subwf	calc_expect_vout_adc_value@t32^(0+384),f
 11221  0B70  082D               	movf	(calc_expect_vout_adc_value@x0+1)^(0+384),w
 11222  0B71  3BB1               	subwfb	(calc_expect_vout_adc_value@t32+1)^(0+384),f
 11223  0B72  082E               	movf	(calc_expect_vout_adc_value@x0+2)^(0+384),w
 11224  0B73  3BB2               	subwfb	(calc_expect_vout_adc_value@t32+2)^(0+384),f
 11225  0B74  082F               	movf	(calc_expect_vout_adc_value@x0+3)^(0+384),w
 11226  0B75  3BB3               	subwfb	(calc_expect_vout_adc_value@t32+3)^(0+384),f
 11227                           
 11228                           ;sample.c: 423: t32=t32*(y1-y0);
 11229  0B76  0823               	movf	(calc_expect_vout_adc_value@y1+3)^(0+384),w
 11230  0B77  00F4               	movwf	___lmul@multiplier+3
 11231  0B78  0822               	movf	(calc_expect_vout_adc_value@y1+2)^(0+384),w
 11232  0B79  00F3               	movwf	___lmul@multiplier+2
 11233  0B7A  0821               	movf	(calc_expect_vout_adc_value@y1+1)^(0+384),w
 11234  0B7B  00F2               	movwf	___lmul@multiplier+1
 11235  0B7C  0820               	movf	calc_expect_vout_adc_value@y1^(0+384),w
 11236  0B7D  00F1               	movwf	___lmul@multiplier
 11237  0B7E  0828               	movf	calc_expect_vout_adc_value@y0^(0+384),w
 11238  0B7F  02F1               	subwf	___lmul@multiplier,f
 11239  0B80  0829               	movf	(calc_expect_vout_adc_value@y0+1)^(0+384),w
 11240  0B81  3BF2               	subwfb	___lmul@multiplier+1,f
 11241  0B82  082A               	movf	(calc_expect_vout_adc_value@y0+2)^(0+384),w
 11242  0B83  3BF3               	subwfb	___lmul@multiplier+2,f
 11243  0B84  082B               	movf	(calc_expect_vout_adc_value@y0+3)^(0+384),w
 11244  0B85  3BF4               	subwfb	___lmul@multiplier+3,f
 11245  0B86  0833               	movf	(calc_expect_vout_adc_value@t32+3)^(0+384),w
 11246  0B87  00F8               	movwf	___lmul@multiplicand+3
 11247  0B88  0832               	movf	(calc_expect_vout_adc_value@t32+2)^(0+384),w
 11248  0B89  00F7               	movwf	___lmul@multiplicand+2
 11249  0B8A  0831               	movf	(calc_expect_vout_adc_value@t32+1)^(0+384),w
 11250  0B8B  00F6               	movwf	___lmul@multiplicand+1
 11251  0B8C  0830               	movf	calc_expect_vout_adc_value@t32^(0+384),w
 11252  0B8D  00F5               	movwf	___lmul@multiplicand
 11253  0B8E  3185  2568  318A   	fcall	___lmul
 11254  0B91  0874               	movf	?___lmul+3,w
 11255  0B92  0023               	movlb	3	; select bank3
 11256  0B93  00B3               	movwf	(calc_expect_vout_adc_value@t32+3)^(0+384)
 11257  0B94  0873               	movf	?___lmul+2,w
 11258  0B95  00B2               	movwf	(calc_expect_vout_adc_value@t32+2)^(0+384)
 11259  0B96  0872               	movf	?___lmul+1,w
 11260  0B97  00B1               	movwf	(calc_expect_vout_adc_value@t32+1)^(0+384)
 11261  0B98  0871               	movf	?___lmul,w
 11262  0B99  00B0               	movwf	calc_expect_vout_adc_value@t32^(0+384)
 11263                           
 11264                           ;sample.c: 424: t32=t32/(x1-x0);
 11265  0B9A  0827               	movf	(calc_expect_vout_adc_value@x1+3)^(0+384),w
 11266  0B9B  0020               	movlb	0	; select bank0
 11267  0B9C  00A7               	movwf	___aldiv@divisor+3
 11268  0B9D  0023               	movlb	3	; select bank3
 11269  0B9E  0826               	movf	(calc_expect_vout_adc_value@x1+2)^(0+384),w
 11270  0B9F  0020               	movlb	0	; select bank0
 11271  0BA0  00A6               	movwf	___aldiv@divisor+2
 11272  0BA1  0023               	movlb	3	; select bank3
 11273  0BA2  0825               	movf	(calc_expect_vout_adc_value@x1+1)^(0+384),w
 11274  0BA3  0020               	movlb	0	; select bank0
 11275  0BA4  00A5               	movwf	___aldiv@divisor+1
 11276  0BA5  0023               	movlb	3	; select bank3
 11277  0BA6  0824               	movf	calc_expect_vout_adc_value@x1^(0+384),w
 11278  0BA7  0020               	movlb	0	; select bank0
 11279  0BA8  00A4               	movwf	___aldiv@divisor
 11280  0BA9  0023               	movlb	3	; select bank3
 11281  0BAA  082C               	movf	calc_expect_vout_adc_value@x0^(0+384),w
 11282  0BAB  0020               	movlb	0	; select bank0
 11283  0BAC  02A4               	subwf	___aldiv@divisor,f
 11284  0BAD  0023               	movlb	3	; select bank3
 11285  0BAE  082D               	movf	(calc_expect_vout_adc_value@x0+1)^(0+384),w
 11286  0BAF  0020               	movlb	0	; select bank0
 11287  0BB0  3BA5               	subwfb	___aldiv@divisor+1,f
 11288  0BB1  0023               	movlb	3	; select bank3
 11289  0BB2  082E               	movf	(calc_expect_vout_adc_value@x0+2)^(0+384),w
 11290  0BB3  0020               	movlb	0	; select bank0
 11291  0BB4  3BA6               	subwfb	___aldiv@divisor+2,f
 11292  0BB5  0023               	movlb	3	; select bank3
 11293  0BB6  082F               	movf	(calc_expect_vout_adc_value@x0+3)^(0+384),w
 11294  0BB7  0020               	movlb	0	; select bank0
 11295  0BB8  3BA7               	subwfb	___aldiv@divisor+3,f
 11296  0BB9  0023               	movlb	3	; select bank3
 11297  0BBA  0833               	movf	(calc_expect_vout_adc_value@t32+3)^(0+384),w
 11298  0BBB  0020               	movlb	0	; select bank0
 11299  0BBC  00AB               	movwf	___aldiv@dividend+3
 11300  0BBD  0023               	movlb	3	; select bank3
 11301  0BBE  0832               	movf	(calc_expect_vout_adc_value@t32+2)^(0+384),w
 11302  0BBF  0020               	movlb	0	; select bank0
 11303  0BC0  00AA               	movwf	___aldiv@dividend+2
 11304  0BC1  0023               	movlb	3	; select bank3
 11305  0BC2  0831               	movf	(calc_expect_vout_adc_value@t32+1)^(0+384),w
 11306  0BC3  0020               	movlb	0	; select bank0
 11307  0BC4  00A9               	movwf	___aldiv@dividend+1
 11308  0BC5  0023               	movlb	3	; select bank3
 11309  0BC6  0830               	movf	calc_expect_vout_adc_value@t32^(0+384),w
 11310  0BC7  0020               	movlb	0	; select bank0
 11311  0BC8  00A8               	movwf	___aldiv@dividend
 11312  0BC9  3184  24FC  318A   	fcall	___aldiv
 11313  0BCC  0827               	movf	?___aldiv+3,w
 11314  0BCD  0023               	movlb	3	; select bank3
 11315  0BCE  00B3               	movwf	(calc_expect_vout_adc_value@t32+3)^(0+384)
 11316  0BCF  0020               	movlb	0	; select bank0
 11317  0BD0  0826               	movf	?___aldiv+2,w
 11318  0BD1  0023               	movlb	3	; select bank3
 11319  0BD2  00B2               	movwf	(calc_expect_vout_adc_value@t32+2)^(0+384)
 11320  0BD3  0020               	movlb	0	; select bank0
 11321  0BD4  0825               	movf	?___aldiv+1,w
 11322  0BD5  0023               	movlb	3	; select bank3
 11323  0BD6  00B1               	movwf	(calc_expect_vout_adc_value@t32+1)^(0+384)
 11324  0BD7  0020               	movlb	0	; select bank0
 11325  0BD8  0824               	movf	?___aldiv,w
 11326  0BD9  0023               	movlb	3	; select bank3
 11327  0BDA  00B0               	movwf	calc_expect_vout_adc_value@t32^(0+384)
 11328                           
 11329                           ;sample.c: 425: t32=t32+y0;
 11330  0BDB  0828               	movf	calc_expect_vout_adc_value@y0^(0+384),w
 11331  0BDC  07B0               	addwf	calc_expect_vout_adc_value@t32^(0+384),f
 11332  0BDD  0829               	movf	(calc_expect_vout_adc_value@y0+1)^(0+384),w
 11333  0BDE  3DB1               	addwfc	(calc_expect_vout_adc_value@t32+1)^(0+384),f
 11334  0BDF  082A               	movf	(calc_expect_vout_adc_value@y0+2)^(0+384),w
 11335  0BE0  3DB2               	addwfc	(calc_expect_vout_adc_value@t32+2)^(0+384),f
 11336  0BE1  082B               	movf	(calc_expect_vout_adc_value@y0+3)^(0+384),w
 11337  0BE2  3DB3               	addwfc	(calc_expect_vout_adc_value@t32+3)^(0+384),f
 11338                           
 11339                           ;sample.c: 426: if(t32<0)t32=0;
 11340  0BE3  1FB3               	btfss	(calc_expect_vout_adc_value@t32+3)^(0+384),7
 11341  0BE4  2BE9               	goto	l3966
 11342  0BE5  01B0               	clrf	calc_expect_vout_adc_value@t32^(0+384)
 11343  0BE6  01B1               	clrf	(calc_expect_vout_adc_value@t32+1)^(0+384)
 11344  0BE7  01B2               	clrf	(calc_expect_vout_adc_value@t32+2)^(0+384)
 11345  0BE8  01B3               	clrf	(calc_expect_vout_adc_value@t32+3)^(0+384)
 11346  0BE9                     l3966:	
 11347                           
 11348                           ;sample.c: 427: return (uint16_t)t32;
 11349  0BE9  0831               	movf	(calc_expect_vout_adc_value@t32+1)^(0+384),w
 11350  0BEA  0020               	movlb	0	; select bank0
 11351  0BEB  00B3               	movwf	?_calc_expect_vout_adc_value+1
 11352  0BEC  0023               	movlb	3	; select bank3
 11353  0BED  0830               	movf	calc_expect_vout_adc_value@t32^(0+384),w
 11354  0BEE  0020               	movlb	0	; select bank0
 11355  0BEF  00B2               	movwf	?_calc_expect_vout_adc_value
 11356  0BF0  0008               	return
 11357  0BF1                     __end_of_calc_expect_vout_adc_value:	
 11358  0BF1                     PL2:	
 11359  0BF1  01B5               	clrf	??_calc_expect_vout_adc_value+1
 11360  0BF2  35B4               	lslf	??_calc_expect_vout_adc_value,f
 11361  0BF3  0DB5               	rlf	??_calc_expect_vout_adc_value+1,f
 11362  0BF4  00B6               	movwf	??_calc_expect_vout_adc_value+2
 11363  0BF5  3023               	movlw	35
 11364  0BF6  00B7               	movwf	??_calc_expect_vout_adc_value+3
 11365  0BF7  0834               	movf	??_calc_expect_vout_adc_value,w
 11366  0BF8  0736               	addwf	??_calc_expect_vout_adc_value+2,w
 11367  0BF9  0086               	movwf	6
 11368  0BFA  0835               	movf	??_calc_expect_vout_adc_value+1,w
 11369  0BFB  3D37               	addwfc	??_calc_expect_vout_adc_value+3,w
 11370  0BFC  0087               	movwf	7
 11371  0BFD  3F40               	moviw [0]fsr1
 11372  0BFE  00B8               	movwf	??_calc_expect_vout_adc_value+4
 11373  0BFF  3F41               	moviw [1]fsr1
 11374  0C00  00B9               	movwf	??_calc_expect_vout_adc_value+5
 11375  0C01  0008               	return
 11376  0C02                     __end_ofPL2:	
 11377  0C02                     PL4:	
 11378  0C02  0834               	movf	calc_expect_vout_adc_value@i^(0+384),w
 11379  0C03  0020               	movlb	0	; select bank0
 11380  0C04  00B4               	movwf	??_calc_expect_vout_adc_value
 11381  0C05  348E               	retlw	142
 11382  0C06                     __end_ofPL4:	
 11383  0C06                     PL8:	
 11384  0C06  0834               	movf	calc_expect_vout_adc_value@i^(0+384),w
 11385  0C07  0020               	movlb	0	; select bank0
 11386  0C08  00B4               	movwf	??_calc_expect_vout_adc_value
 11387  0C09  3490               	retlw	144
 11388  0C0A                     __end_ofPL8:	
 11389                           
 11390                           	psect	intentry
 11391  0004                     __pintentry:	
 11392 ;; *************** function _INTERRUPT_InterruptManager *****************
 11393 ;; Defined at:
 11394 ;;		line 54 in file "mcc_generated_files/interrupt_manager.c"
 11395 ;; Parameters:    Size  Location     Type
 11396 ;;		None
 11397 ;; Auto vars:     Size  Location     Type
 11398 ;;  t8              1    0[COMMON] unsigned char 
 11399 ;; Return value:  Size  Location     Type
 11400 ;;                  1    wreg      void 
 11401 ;; Registers used:
 11402 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11403 ;; Tracked objects:
 11404 ;;		On entry : 0/0
 11405 ;;		On exit  : 0/0
 11406 ;;		Unchanged: 0/0
 11407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11409 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11411 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11412 ;;Total ram usage:        1 bytes
 11413 ;; Hardware stack levels used:    1
 11414 ;; This function calls:
 11415 ;;		Nothing
 11416 ;; This function is called by:
 11417 ;;		Interrupt level 1
 11418 ;; This function uses a non-reentrant model
 11419 ;;
 11420                           
 11421  0004                     _INTERRUPT_InterruptManager:	
 11422                           
 11423                           ;incstack = 0
 11424                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0]
 11425  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 11426  0005  3180               	pagesel	$
 11427                           
 11428                           ;interrupt_manager.c: 57: uint8_t t8;
 11429                           ;interrupt_manager.c: 58: if(INTCONbits.PEIE == 1 && PIE1bits.TMR2IE == 1 && PIR1bits.TM
      +                          R2IF == 1)
 11430  0006  1F0B               	btfss	11,6	;volatile
 11431  0007  282F               	goto	i1l3520
 11432  0008  0021               	movlb	1	; select bank1
 11433  0009  1C91               	btfss	17,1	;volatile
 11434  000A  282F               	goto	i1l3520
 11435  000B  0020               	movlb	0	; select bank0
 11436  000C  1C91               	btfss	17,1	;volatile
 11437  000D  282F               	goto	i1l3520
 11438                           
 11439                           ;interrupt_manager.c: 59: {
 11440                           ;interrupt_manager.c: 61: PIR1bits.TMR2IF = 0;
 11441  000E  1091               	bcf	17,1	;volatile
 11442                           
 11443                           ;interrupt_manager.c: 62: Event |= (1<<1);
 11444  000F  14FC               	bsf	_Event,1	;volatile
 11445  0010  3005               	movlw	5
 11446                           
 11447                           ;interrupt_manager.c: 63: subTickerX++;
 11448  0011  0AE4               	incf	_subTickerX,f
 11449                           
 11450                           ;interrupt_manager.c: 64: subTickerX_1s++;
 11451  0012  0AE5               	incf	_subTickerX_1s,f
 11452                           
 11453                           ;interrupt_manager.c: 65: if(subTickerX>=5){
 11454  0013  0264               	subwf	_subTickerX,w
 11455  0014  1C03               	skipc
 11456  0015  2818               	goto	i1l3502
 11457                           
 11458                           ;interrupt_manager.c: 66: subTickerX=0;
 11459  0016  01E4               	clrf	_subTickerX
 11460                           
 11461                           ;interrupt_manager.c: 67: Event |= (1<<2);
 11462  0017  157C               	bsf	_Event,2	;volatile
 11463  0018                     i1l3502:	
 11464                           
 11465                           ;interrupt_manager.c: 68: }
 11466                           ;interrupt_manager.c: 69: if(subTickerX_1s>=50){
 11467  0018  3032               	movlw	50
 11468  0019  0265               	subwf	_subTickerX_1s,w
 11469  001A  1C03               	skipc
 11470  001B  281E               	goto	i1l3508
 11471                           
 11472                           ;interrupt_manager.c: 70: subTickerX_1s=0;
 11473  001C  01E5               	clrf	_subTickerX_1s
 11474                           
 11475                           ;interrupt_manager.c: 71: Event |= (1<<3);
 11476  001D  15FC               	bsf	_Event,3	;volatile
 11477  001E                     i1l3508:	
 11478                           
 11479                           ;interrupt_manager.c: 72: }
 11480                           ;interrupt_manager.c: 74: if(eusartRxIdleTime_ms){
 11481  001E  0861               	movf	_eusartRxIdleTime_ms,w	;volatile
 11482  001F  1903               	btfsc	3,2
 11483  0020  2828               	goto	i1l3518
 11484                           
 11485                           ;interrupt_manager.c: 75: eusartRxIdleTime_ms++;
 11486  0021  0AE1               	incf	_eusartRxIdleTime_ms,f	;volatile
 11487                           
 11488                           ;interrupt_manager.c: 76: if(eusartRxIdleTime_ms>5){
 11489  0022  3006               	movlw	6
 11490  0023  0261               	subwf	_eusartRxIdleTime_ms,w	;volatile
 11491  0024  1C03               	skipc
 11492  0025  2828               	goto	i1l3518
 11493                           
 11494                           ;interrupt_manager.c: 77: Event|=(1<<0);
 11495  0026  147C               	bsf	_Event,0	;volatile
 11496                           
 11497                           ;interrupt_manager.c: 78: eusartRxIdleTime_ms=0;
 11498  0027  01E1               	clrf	_eusartRxIdleTime_ms	;volatile
 11499  0028                     i1l3518:	
 11500                           
 11501                           ;interrupt_manager.c: 79: }
 11502                           ;interrupt_manager.c: 80: }
 11503                           ;interrupt_manager.c: 81: globalTicker++;
 11504  0028  3001               	movlw	1
 11505  0029  0021               	movlb	1	; select bank1
 11506  002A  07D6               	addwf	_globalTicker^(0+128),f	;volatile
 11507  002B  3000               	movlw	0
 11508  002C  3DD7               	addwfc	(_globalTicker+1)^(0+128),f	;volatile
 11509  002D  3DD8               	addwfc	(_globalTicker+2)^(0+128),f	;volatile
 11510  002E  3DD9               	addwfc	(_globalTicker+3)^(0+128),f	;volatile
 11511  002F                     i1l3520:	
 11512                           
 11513                           ;interrupt_manager.c: 82: }
 11514                           ;interrupt_manager.c: 83: if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits.RCIF
      +                           == 1)
 11515  002F  1F0B               	btfss	11,6	;volatile
 11516  0030  284E               	goto	i1l287
 11517  0031  0021               	movlb	1	; select bank1
 11518  0032  1E91               	btfss	17,5	;volatile
 11519  0033  284E               	goto	i1l287
 11520  0034  0020               	movlb	0	; select bank0
 11521  0035  1E91               	btfss	17,5	;volatile
 11522  0036  284E               	goto	i1l287
 11523                           
 11524                           ;interrupt_manager.c: 84: {
 11525                           ;interrupt_manager.c: 86: PIR1bits.RCIF=0;
 11526  0037  1291               	bcf	17,5	;volatile
 11527                           
 11528                           ;interrupt_manager.c: 87: if(1 == RCSTAbits.OERR){
 11529  0038  0023               	movlb	3	; select bank3
 11530  0039  1C9D               	btfss	29,1	;volatile
 11531  003A  283D               	goto	i1l3530
 11532                           
 11533                           ;interrupt_manager.c: 88: RCSTAbits.CREN = 0;
 11534  003B  121D               	bcf	29,4	;volatile
 11535                           
 11536                           ;interrupt_manager.c: 89: RCSTAbits.CREN = 1;
 11537  003C  161D               	bsf	29,4	;volatile
 11538  003D                     i1l3530:	
 11539                           
 11540                           ;interrupt_manager.c: 90: }
 11541                           ;interrupt_manager.c: 91: t8=RCREG;
 11542  003D  0819               	movf	25,w	;volatile
 11543  003E  00F0               	movwf	INTERRUPT_InterruptManager@t8
 11544                           
 11545                           ;interrupt_manager.c: 92: if(eusartRxCount<64){
 11546  003F  3040               	movlw	64
 11547  0040  0020               	movlb	0	; select bank0
 11548  0041  0260               	subwf	_eusartRxCount,w	;volatile
 11549  0042  1803               	skipnc
 11550  0043  284C               	goto	i1l3536
 11551                           
 11552                           ;interrupt_manager.c: 93: eusartRxBuffer[eusartRxCount]=t8;
 11553  0044  0860               	movf	_eusartRxCount,w
 11554  0045  3E20               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 11555  0046  0086               	movwf	6
 11556  0047  3001               	movlw	1	; select bank2/3
 11557  0048  0087               	movwf	7
 11558  0049  0870               	movf	INTERRUPT_InterruptManager@t8,w
 11559  004A  0081               	movwf	1
 11560                           
 11561                           ;interrupt_manager.c: 94: eusartRxCount++;
 11562  004B  0AE0               	incf	_eusartRxCount,f	;volatile
 11563  004C                     i1l3536:	
 11564                           
 11565                           ;interrupt_manager.c: 96: }
 11566                           ;interrupt_manager.c: 97: eusartRxIdleTime_ms=1;
 11567  004C  3001               	movlw	1
 11568  004D  00E1               	movwf	_eusartRxIdleTime_ms	;volatile
 11569  004E                     i1l287:	
 11570                           ;interrupt_manager.c: 98: }
 11571                           
 11572  004E  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 11573  004F  0009               	retfie
 11574  0050                     __end_of_INTERRUPT_InterruptManager:	
 11575  007E                     btemp	set	126	;btemp
 11576  007E                     int$flags	set	126
 11577  007E                     wtemp	set	126
 11578  007E                     wtemp0	set	126
 11579  0080                     wtemp1	set	128
 11580  0082                     wtemp2	set	130
 11581  0084                     wtemp3	set	132
 11582  0086                     wtemp4	set	134
 11583  0088                     wtemp5	set	136
 11584  007F                     wtemp6	set	127
 11585  007E                     ttemp	set	126
 11586  007E                     ttemp0	set	126
 11587  0081                     ttemp1	set	129
 11588  0084                     ttemp2	set	132
 11589  0087                     ttemp3	set	135
 11590  007F                     ttemp4	set	127
 11591  007E                     ltemp	set	126
 11592  007E                     ltemp0	set	126
 11593  0082                     ltemp1	set	130
 11594  0086                     ltemp2	set	134
 11595  0080                     ltemp3	set	128


Data Sizes:
    Strings     33
    Constant    0
    Data        22
    BSS         167
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     52      80
    BANK1            80      0      80
    BANK2            80      0      80
    BANK3            80     23      23
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           20      0       0
    BANK12            0      0       0

Pointer List with Targets:

    crc_append@message	PTR unsigned char  size(2) Largest target is 92
		 -> sysData(BIGRAM[92]), 

    crc_verify@message	PTR unsigned char  size(2) Largest target is 92
		 -> sysData(BIGRAM[92]), 

    crc_sum@buf	PTR unsigned char  size(2) Largest target is 92
		 -> sysData(BIGRAM[92]), 

    m_int_2_str_ex@buf	PTR unsigned char  size(1) Largest target is 16
		 -> str(BANK2[16]), 

    m_mem_cpy_len@s	PTR unsigned char  size(2) Largest target is 92
		 -> sysData(BIGRAM[92]), 

    m_mem_cpy_len@d	PTR unsigned char  size(1) Largest target is 2
		 -> crc_verify@expected(BANK0[2]), 

    m_mem_cpy@s	PTR unsigned char  size(1) Largest target is 16
		 -> str(BANK2[16]), 

    m_mem_cpy@d	PTR unsigned char  size(1) Largest target is 16
		 -> str(BANK2[16]), 

    m_mem_set@buf	PTR unsigned char  size(1) Largest target is 16
		 -> str(BANK2[16]), 

    my_flash_system_write@buf	PTR unsigned char  size(2) Largest target is 92
		 -> sysData(BIGRAM[92]), 

    my_flash_system_read@buf	PTR unsigned char  size(2) Largest target is 92
		 -> sysData(BIGRAM[92]), 

    uart_send_str@str	PTR unsigned char  size(2) Largest target is 16
		 -> STR_7(CODE[3]), STR_6(CODE[6]), STR_5(CODE[5]), STR_4(CODE[6]), 
		 -> STR_3(CODE[4]), STR_2(CODE[5]), str(BANK2[16]), STR_1(CODE[4]), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_adc_sample
    _sys_data_init->_my_flash_system_read
    _my_flash_read_system_erase->_FLASH_EraseBlock
    _crc_verify->_crc_sum
    _crc_append->_crc_sum
    _pid_pwm2_vout_run->___awdiv
    _set_vout_pwm2_duty->_get_vout_pwm2_duty
    _pid_pwm1_idrv_run->___lmul
    _pid_pwm1_idrv_b_b->___lmul
    _set_idrv_pwm1_duty->_get_idrv_pwm1_duty
    _m_int_2_str_ex->___almod
    _calc_temp_rs->___lldiv
    _calc_temp_rs->___lmul
    _calc_temp_rc->___lldiv
    _calc_temp_rc->___lmul
    _calc_rs_lo_avg->___lldiv
    _calc_expect_vout_adc_value->___lmul
    ___aldiv->___lmul
    _adc_sample->_adc_init
    _adc_sample->_fvr_set_gain
    _TMR2_Initialize->_TMR2_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_pid_pwm1_idrv_run
    _sys_data_save->_crc_append
    _sys_data_save->_my_flash_system_write
    _sys_data_init->_crc_append
    _sys_data_init->_my_flash_system_write
    _pid_pwm1_idrv_run->___aldiv
    _pid_pwm1_idrv_b_b->___aldiv
    _m_int_2_str_ex->___aldiv
    _calc_temp_rs->___lldiv
    _calc_temp_rc->___lldiv
    _calc_rs_lo_avg->___lldiv
    _calc_expect_vout_adc_value->___aldiv
    ___aldiv->___lmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_calc_expect_vout_adc_value

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   39569
                                             21 BANK3      2     2      0
                  _SYSTEM_Initialize
                         _adc_sample
         _calc_expect_vout_adc_value
                     _calc_rs_lo_avg
                       _calc_temp_rc
                       _calc_temp_rs
                     _m_int_2_str_ex
                  _pid_pwm1_idrv_b_b
                  _pid_pwm1_idrv_run
                  _pid_pwm2_vout_run
                 _set_vout_pwm2_duty
                      _sys_data_init
                      _sys_data_save
                      _uart_send_str
 ---------------------------------------------------------------------------------
 (1) _uart_send_str                                        3     1      2     877
                                              1 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _sys_data_save                                        0     0      0    2413
                         _crc_append
         _my_flash_read_system_erase
              _my_flash_system_write
 ---------------------------------------------------------------------------------
 (1) _sys_data_init                                       10    10      0    4580
                                             11 BANK0     10    10      0
                             ___wmul
                         _crc_append
                         _crc_verify
         _my_flash_read_system_erase
               _my_flash_system_read
              _my_flash_system_write
 ---------------------------------------------------------------------------------
 (2) _my_flash_system_write                               16    12      4     579
                                              1 COMMON     5     1      4
                                              0 BANK0     11    11      0
 ---------------------------------------------------------------------------------
 (2) _my_flash_system_read                                11     7      4     288
                                              1 COMMON    11     7      4
 ---------------------------------------------------------------------------------
 (2) _my_flash_read_system_erase                           0     0      0     375
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_EraseBlock                                     3     1      2     375
                                              1 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (2) _crc_verify                                           8     4      4    1298
                                              0 BANK0      8     4      4
                            _crc_sum
                      _m_mem_cpy_len
 ---------------------------------------------------------------------------------
 (3) _m_mem_cpy_len                                        5     1      4     249
                                              1 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (2) _crc_append                                          11     7      4    1459
                                              0 BANK0     11     7      4
                            _crc_sum
 ---------------------------------------------------------------------------------
 (3) _crc_sum                                             12     8      4     555
                                              1 COMMON    10     6      4
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     348
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _pid_pwm2_vout_run                                    5     5      0    1074
                                              9 COMMON     1     1      0
                                              0 BANK0      4     4      0
                            ___awdiv
                            ___lwdiv
                 _set_vout_pwm2_duty
 ---------------------------------------------------------------------------------
 (1) _set_vout_pwm2_duty                                   4     2      2     218
                                              3 COMMON     4     2      2
                 _get_vout_pwm2_duty
 ---------------------------------------------------------------------------------
 (2) _get_vout_pwm2_duty                                   2     0      2       0
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                              1 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     428
                                              1 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _pid_pwm1_idrv_run                                   34    34      0    5441
                                             18 BANK0     34    34      0
                            ___aldiv
                             ___lmul
                 _set_idrv_pwm1_duty
 ---------------------------------------------------------------------------------
 (1) _pid_pwm1_idrv_b_b                                    5     5      0    5250
                                              9 COMMON     1     1      0
                                             18 BANK0      4     4      0
                            ___aldiv
                             ___lmul
                 _set_idrv_pwm1_duty
 ---------------------------------------------------------------------------------
 (2) _set_idrv_pwm1_duty                                   4     2      2     346
                                              3 COMMON     4     2      2
                 _get_idrv_pwm1_duty
 ---------------------------------------------------------------------------------
 (3) _get_idrv_pwm1_duty                                   2     0      2       0
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _m_int_2_str_ex                                      18    12      6    5016
                                             18 BANK0     17    11      6
                            ___aldiv
                            ___almod
                          _m_mem_cpy
                          _m_mem_set
 ---------------------------------------------------------------------------------
 (2) _m_mem_set                                            4     1      3     225
                                              1 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (2) _m_mem_cpy                                            2     1      1     184
                                              1 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (2) ___almod                                             10     2      8     526
                                              1 COMMON    10     2      8
 ---------------------------------------------------------------------------------
 (1) _calc_temp_rs                                        12     8      4    3380
                                              5 BANK0     12     8      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) _calc_temp_rc                                        16    12      4    3448
                                              5 BANK0     16    12      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) _calc_rs_lo_avg                                       9     7      2    1181
                                              9 COMMON     2     0      2
                                              5 BANK0      7     7      0
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     776
                                              1 COMMON     8     0      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _calc_expect_vout_adc_value                          36    34      2    5699
                                             18 BANK0     14    12      2
                                              0 BANK3     21    21      0
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8    2397
                                              1 COMMON     8     0      8
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8    2315
                                              4 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _adc_sample                                           9     7      2     894
                                              3 COMMON     9     7      2
                           _adc_init
                       _fvr_set_gain
 ---------------------------------------------------------------------------------
 (2) _fvr_set_gain                                         2     2      0      69
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _adc_init                                             2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      98
                    _ADC1_Initialize
                  _EUSART_Initialize
                     _FVR_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM1_Initialize
                    _PWM2_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0      75
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR2_SetInterruptHandler                             2     0      2      75
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _ADC1_Initialize
     _EUSART_Initialize
     _FVR_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM1_Initialize
     _PWM2_Initialize
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
       _TMR2_StartTimer
     _WDT_Initialize
   _adc_sample
     _adc_init
     _fvr_set_gain
   _calc_expect_vout_adc_value
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _calc_rs_lo_avg
     ___lldiv
   _calc_temp_rc
     ___lldiv
     ___lmul
   _calc_temp_rs
     ___lldiv
     ___lmul
   _m_int_2_str_ex
     ___aldiv
       ___lmul (ARG)
     ___almod
     _m_mem_cpy
     _m_mem_set
   _pid_pwm1_idrv_b_b
     ___aldiv
       ___lmul (ARG)
     ___lmul
     _set_idrv_pwm1_duty
       _get_idrv_pwm1_duty
   _pid_pwm1_idrv_run
     ___aldiv
       ___lmul (ARG)
     ___lmul
     _set_idrv_pwm1_duty
       _get_idrv_pwm1_duty
   _pid_pwm2_vout_run
     ___awdiv
     ___lwdiv
     _set_vout_pwm2_duty
       _get_vout_pwm2_duty
   _set_vout_pwm2_duty
     _get_vout_pwm2_duty
   _sys_data_init
     ___wmul
     _crc_append
       _crc_sum
     _crc_verify
       _crc_sum
       _m_mem_cpy_len
     _my_flash_read_system_erase
       _FLASH_EraseBlock
     _my_flash_system_read
     _my_flash_system_write
   _sys_data_save
     _crc_append
       _crc_sum
     _my_flash_read_system_erase
       _FLASH_EraseBlock
     _my_flash_system_write
   _uart_send_str

 _INTERRUPT_InterruptManager (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3E0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     34      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50     17      17      11       28.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     114      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              14      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           20      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     114      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Tue Nov 20 12:41:09 2018

        __end_of_TMR2_SetInterruptHandler 07AA                                         pc 0002  
            ??_my_flash_read_system_erase 0074                               __CFG_CP$OFF 0000  
                                      PL2 0BF1                                        PL4 0C02  
                                      PL6 0730                                        PL8 0C06  
                            ___awdiv@sign 0076                    __end_of_FVR_Initialize 02F3  
                     ___wmul@multiplicand 0073                                       PL10 0739  
                                     PL20 0761                                       PL12 0DB8  
                                     PL30 0771                                       PL22 0DC8  
                                     PL14 074C                                       PL40 0789  
                                     PL32 0778                                       PL24 0FEC  
                                     PL16 0754                                       PL42 078F  
                                     PL34 077E                                       PL26 0FF4  
                                     PL18 075B                                       PL44 094C  
                                     PL36 0FF9                                       PL28 076A  
                                     PL46 0795                                       PL38 0783  
                             __CFG_LVP$ON 0000                                       l606 02BC  
                                     l472 0212                                       l481 022A  
                                     l619 06C8                                       l643 04FB  
                                     l581 05DF                                       l477 0216  
                                     l654 04CF                                       l663 0D81  
                                     l673 0A03                                       l587 05C3  
                                     l676 0A32                                       _GIE 005F  
                                     _PR2 001B                                       _bbu 00D2  
                                     _err 00A0                                       _str 0160  
                         _TMR2_Initialize 079A                              __CFG_BORV$LO 0000  
                                     wreg 0009                      ??_get_vout_pwm2_duty 0073  
                    ??_set_vout_pwm2_duty 0075                           ??_uart_send_str 0073  
                                    S4156 07EA                                      l1105 056D  
                           calc_temp_rc@x 002D                             calc_temp_rc@y 0031  
                                    l3010 090C                                      l1162 08FF  
                                    l1074 0EDD                                      l3100 0707  
                                    l1149 050C                                      l1077 0EE8  
                                    l3030 0943                                      l3022 0933  
                                    l3018 091B                                      l3026 0939  
                                    l3042 0A52                                      l3122 0AA4  
                                    l3114 0A95                                      l4012 0248  
                                    l3140 0223                                      l3070 0A7B  
                                    l3126 0AA8                                      l4040 029C  
                                    l4016 0253                                      l3048 0A5B  
                                    l4104 018E                                      l3162 02B6  
                                    l3154 02B5                                      l4042 029D  
                                    l4034 0292                                      l3074 0A83  
                                    l3066 0A77                                      l3058 0A68  
                                    l3330 0A42                                      l3164 02D5  
                                    l3316 09F3                                      l4060 00B8  
                                    l4134 020D                                      l3096 0701  
                                    l3088 06E4                                      l2616 0EFC  
                                    l4058 00B6                                      l4068 00E7  
                                    l3704 0578                                      l2920 0711  
                                    l3800 034C                                      l2568 0F5B  
                                    l2832 0F1D                                      l4096 016A  
                                    l2762 0722                                      l3722 051B  
                                    l2930 07AE                                      l3802 035A  
                                    l2834 0F42                                      l2596 07AA  
                                    l3740 054B                                      l3732 052E  
                                    l2932 07C0                                      l2916 071A  
                                    l3820 0389                                      l2940 0E61  
                                    l2860 0FA2                                      l2836 0F73  
                                    l2790 05DA                                      l2766 0D9C  
                                    l3806 0362                                      l3744 0551  
                                    l3808 0370                                      l3840 0494  
                                    l2776 0AAD                                      l2936 0E5B  
                                    l2864 0FBC                                      l2848 0F8E  
                                    l3922 0ACB                                      l3762 09A6  
                                    l3842 049E                                      l3674 0ECA  
                                    l2890 0FEA                                      l2874 0FCD  
                                    l2866 0FBE                                      l3748 055F  
                                    l3764 09B2                                      l3676 0EF6  
                                    l3668 0EE6                                      l3766 09B8  
                                    l3944 0B14                                      l3936 0B0A  
                                    l3928 0AF8                                      l2888 0F93  
                                    l3786 06B6                                      l3794 0342  
                                    l3882 0D67                                      l3956 0B64  
                                    l3788 06C2                                      l3796 0343  
                                    l3884 0D6D                                      l3966 0BE9  
                                    l3886 0D7C                                      l3984 0E03  
                                    l3898 05E7                             calc_temp_rs@x 0029  
                           calc_temp_rs@y 002D                                      STR_1 1016  
                                    STR_2 1011                                      STR_3 101A  
                                    STR_4 1006                                      STR_5 100C  
                                    STR_6 1000                                      STR_7 101E  
                 __end_of_PWM1_Initialize 05A8                                      u1215 0DA8  
                                    u1225 0AB9                                      u1325 0F99  
                                    _LATA 010C                                      u1190 032F  
                                    _LATC 010E                                      u1265 0F23  
                                    u1515 0929                                      u2315 0ED0  
                                    u1275 0F83                                      u2325 0EC2  
                                    u2503 04BD                                      u1295 0FB0  
                                    u2513 04EA                                      u1635 06F6  
                                    u2615 0B5A                                      u1585 0A70  
                                    u2395 0540                                      u2555 0AEA  
                                    u1675 0A9D                                      u1915 09ED  
                                    u1765 02CA                                      u1925 09FD  
                                    u2575 0B02                                      u1935 0A2B  
                                    u1945 0A3C                                      u2767 02AD  
                           _m_mem_cpy_len 0EFB                                      _TMR2 001A  
                                    _WPUA 020C                                      _WPUC 020E  
                            __CFG_WRT$OFF 0000                            _m_int_2_str_ex 022E  
                                    _bbt0 00C2                                      _bbt1 00C6  
                                    _bbta 00CA                                      _bbku 00BE  
                                    _bbtu 00CE                                      _main 009D  
                                    _pidU 00EC       __size_of_my_flash_read_system_erase 0017  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                             __CFG_BOREN$ON 0000  
                                    ltemp 007E                                      start 0050  
                         _pwm2DutyForVout 006E                                      ttemp 007E  
                                    wtemp 007E                             __CFG_MCLRE$ON 0000  
                     pid_pwm1_idrv_run@ed 0046                       pid_pwm1_idrv_run@ei 0042  
                     pid_pwm1_idrv_run@ep 003E                   __end_of_PWM2_Initialize 05BF  
                         ?_FVR_Initialize 0070            __size_of_OSCILLATOR_Initialize 0005  
           __end_of_OSCILLATOR_Initialize 02F8                           __end_of___aldiv 0568  
                         __end_of___almod 094C                                     ?_main 0070  
                         __end_of___awdiv 0A88                             __CFG_WDTE$OFF 0000  
                         __end_of___lldiv 0710                           ___awdiv@divisor 0071  
                                   _T2CON 001C                           __end_of___lwdiv 0AAD  
                                   i1l287 004E                           ___awdiv@counter 0075  
                                   _RCREG 0199                                     _RCSTA 019D  
                                   _TRISA 008C                                     _TRISC 008E  
                                   _TXREG 019A                                     _TXSTA 019E  
                     ___lmul@multiplicand 0075                                     _PidKp 0054  
                                   _PidTd 00B6                                     _Event 007C  
                                   _PidTi 00BA                           __end_of_crc_sum 0EFB  
                    pid_pwm1_idrv_b_b@t32 0032                                     _bbmax 00E4  
                                   _bbmin 00E8                            _WDT_Initialize 05BF  
                                   _resRc 0066                                     _resRs 006A  
                  __end_of_m_int_2_str_ex 02A2                            ?_m_mem_cpy_len 0071  
                  _pid_pwm1_idrv_run$2215 004A                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080                __end_of_get_idrv_pwm1_duty 0DB8  
              __end_of_set_idrv_pwm1_duty 0DB1                         m_int_2_str_ex@buf 0041  
                       m_int_2_str_ex@sig 0040                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                      crc_verify@expected 0026                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                           _TMR2_StartTimer 07AA  
                           fvr_set_gain@g 0072        __end_of_calc_expect_vout_adc_value 0BF1  
              _calc_expect_vout_adc_value 0AC9                      pid_pwm1_idrv_run@t32 0050  
                    pid_pwm1_idrv_run@t16 004E                           __initialization 0052  
                            __end_of_main 020F                     __size_of_calc_temp_rc 00A2  
                   __size_of_calc_temp_rs 0076                   __end_of_TMR2_Initialize 07A9  
             ?_INTERRUPT_InterruptManager 0070                  _TMR2_SetInterruptHandler 07A9  
                                  ??_main 01B5                          ??_calc_rs_lo_avg 0025  
           __size_of_my_flash_system_read 0032                            __CFG_PLLEN$OFF 0000  
                  __end_of_WDT_Initialize 05C2              my_flash_system_write@blocNum 0023  
                                  _ADCON0 009D                                    _ADCON1 009E  
                                  _ADCON2 009F                                    _ADRESH 009C  
                                  _ADRESL 009B                          ___awdiv@dividend 0073  
                         ?_m_int_2_str_ex 0032                                    _ANSELA 018C  
                                  _ANSELC 018E                          __end_of_adc_init 05D1  
                        ?_PWM1_Initialize 0070                                    _ODCONA 028C  
                                  _ODCONC 028E                                    i1l3502 0018  
                                  i1l3520 002F                                    i1l3530 003D  
                                  i1l3508 001E                                    i1l3518 0028  
                                  i1l3536 004C                                    _FVRCON 0117  
                                  _PMADRH 0192                                    _PMADRL 0191  
                                  _PMDATH 0194                                    _PMDATL 0193  
                                  _PMCON2 0196                 __size_of_FLASH_EraseBlock 0018  
                                  _OSCCON 0099                                    _SPBRGH 019C  
                                  _SPBRGL 019B                                    _WDTCON 0097  
                            m_mem_set@buf 0074                              m_mem_set@len 0072  
                            _calc_temp_rc 062F                              _calc_temp_rs 0952  
                          __CFG_PWRTE$OFF 0000                           calc_rs_lo_avg@i 002B  
                         calc_rs_lo_avg@x 0079        __end_of_my_flash_read_system_erase 0F5B  
              _my_flash_read_system_erase 0F44                                    ___lmul 0568  
                               ??___aldiv 0079                                 ??___almod 0079  
                                  ___wmul 0E59                                 ??___awdiv 0075  
                          __CFG_STVREN$ON 0000                                 ??___lldiv 0079  
                               ??___lwdiv 0075                          ?_PWM2_Initialize 0070  
                                  _pwm2Ei 00DA                          ___awdiv@quotient 0077  
                my_flash_system_write@buf 0071                  my_flash_system_write@len 0073  
                my_flash_system_write@loc 0025                                 ??_crc_sum 0075  
                __size_of_ADC1_Initialize 0004                           ?_WDT_Initialize 0070  
                         ??_m_mem_cpy_len 0075          my_flash_system_write@GIEBitValue 0022  
                 __end_of_TMR2_StartTimer 07AD  TMR2_SetInterruptHandler@InterruptHandler 0071  
                           ?_fvr_set_gain 0070                            fvr_set_gain@t8 0071  
                       _SYSTEM_Initialize 02DA                   __end_of__initialization 009A  
                  __size_of_sys_data_init 007E                     _my_flash_system_write 0F73  
                      ?_SYSTEM_Initialize 0070                    __size_of_sys_data_save 000B  
                          __pcstackCOMMON 0070                              __pidataBANK0 07F6  
                            __pidataBANK1 07C6                       ??_SYSTEM_Initialize 0073  
                              _adc_sample 02A2                           m_int_2_str_ex@i 0042  
                         m_int_2_str_ex@t 003C                           m_int_2_str_ex@x 0032  
                        ?_TMR2_Initialize 0070                                __end_ofPL2 0C02  
                              __end_ofPL4 0C06                                __end_ofPL6 0739  
                              __end_ofPL8 0C0A                            _OPTION_REGbits 0095  
                       crc_append@message 0020                    my_flash_system_write@i 0029  
                  my_flash_system_write@j 0020                 __end_of_SYSTEM_Initialize 02EB  
                          ??_fvr_set_gain 0071                        __size_of_m_mem_cpy 0019  
                      __size_of_m_mem_set 0012                                __pbssBANK0 0054  
                              __pbssBANK1 00A0                                __pbssBANK2 0120  
         my_flash_system_read@GIEBitValue 0077                                adc_init@ch 0072  
                        ??_FVR_Initialize 0071                                __pmaintext 009D  
                                 ?___lmul 0071                                   ?___wmul 0071  
                         __CFG_PPS1WAY$ON 0000                                __pintentry 0004  
            ??_calc_expect_vout_adc_value 0034                                   _BAUDCON 019F  
                          ___lmul@product 0020                                _crc_append 0E6E  
                               ?_adc_init 0070                              adc_sample@ch 0076  
                           _sys_data_init 0DDB                             _sys_data_save 0DD0  
                              _crc_verify 0E9C                             _eusartRxCount 0060  
             __size_of_get_vout_pwm2_duty 0007               __size_of_set_vout_pwm2_duty 0015  
                                 _PWM1DCH 0D94                                   _PWM1DCL 0D93  
                                 _PWM2DCH 0DA4                                   _PWM2DCL 0DA3  
                                 _OSCTUNE 0098                                   _PWM1CON 0D9B  
                                 _PWM2CON 0DAB                                   _PWM1OFH 0D98  
                                 _PWM1OFL 0D97                                   _PWM2OFH 0DA8  
                                 _PWM1PHH 0D92                                   _PWM2OFL 0DA7  
                                 _PWM1PHL 0D91                                   _PWM2PHH 0DA2  
                                 _PWM2PHL 0DA1                                   _PWM1PRH 0D96  
                                 _PWM1PRL 0D95                                   _PWM2PRH 0DA6  
                                 _PWM2PRL 0DA5                                   _PPSLOCK 0E0F  
                       ??_ADC1_Initialize 0071                          ?_TMR2_StartTimer 0070  
                  set_idrv_pwm1_duty@duty 0073                     __end_of_uart_send_str 022E  
                        _FLASH_EraseBlock 0F5B                    ?_my_flash_system_write 0071  
             ?_calc_expect_vout_adc_value 0032                ??_TMR2_SetInterruptHandler 0073  
                                 ___aldiv 04FC                                   ___almod 08F2  
                                 ___awdiv 0A48                           __size_of___lmul 0028  
                                 ___lldiv 06D1                           __size_of___wmul 0015  
                      _get_idrv_pwm1_duty 0DB1                        _set_idrv_pwm1_duty 0D9C  
                                 ___lwdiv 0A88                               ?_adc_sample 0073  
                       __end_of_m_mem_cpy 07C6                            adc_sample@gfvr 0073  
                       __end_of_m_mem_set 0722                                _pidTestNum 0063  
                          ?_sys_data_init 0070                            ?_sys_data_save 0070  
                              ??_adc_init 0071                                   __ptext1 020F  
                                 __ptext2 0DD0                                   __ptext3 0DDB  
                                 __ptext4 0F73                                   __ptext5 0F12  
                                 __ptext6 0F44                                   __ptext7 0F5B  
                                 __ptext8 0E9C                                   __ptext9 0EFB  
                                 _crc_sum 0EC5                                   _pidBbSm 0062  
                     ?_get_idrv_pwm1_duty 0071                       ?_set_idrv_pwm1_duty 0073  
                   _OSCILLATOR_Initialize 02F3                                 _T2CONbits 001C  
                        ??_m_int_2_str_ex 0038                                _rsLoAvgBuf 00AC  
                                 _rsLoAvg 00DC                          ___aldiv@dividend 0028  
                ??_PIN_MANAGER_Initialize 0071                                   _sysData 2384  
              __size_of_SYSTEM_Initialize 0011                                   clrloop0 07D3  
                    end_of_initialization 009A                                   init_ram 07DE  
                                 initloop 07DF              __end_of_my_flash_system_read 0F44  
                    ??_get_idrv_pwm1_duty 0073                       pid_pwm2_vout_run@ei 0020  
                    ??_set_idrv_pwm1_duty 0075                         _EUSART_Initialize 0722  
                         ___lldiv@divisor 0071                                _voExpectMv 005E  
                         ___lldiv@counter 0024                        ?_EUSART_Initialize 0070  
                               _RCSTAbits 019D               ?_my_flash_read_system_erase 0070  
                        ___aldiv@quotient 002E                                 _PWM1LDCON 0D9F  
                               _PWM2LDCON 0DAF                                 _PWM1OFCON 0DA0  
                               _PWM2OFCON 0DB0                              __pstringtext 1000  
                     m_int_2_str_ex@ssize 0036                      __end_of_fvr_set_gain 05E2  
                             ?_crc_append 0020                                _subTickerX 0064  
                     ??_EUSART_Initialize 0071                          ??_WDT_Initialize 0071  
                             ?_crc_verify 0020                          __CFG_FOSC$INTOSC 0000  
                              crc_sum@crc 0079                                crc_sum@buf 0071  
                              crc_sum@len 0073                                 _RXPPSbits 0E15  
                     __size_of_adc_sample 0038                 __end_of_EUSART_Initialize 0730  
                            _globalTicker 00D6                                 _TXSTAbits 019E  
                __size_of_PWM1_Initialize 0018              _TMR2_DefaultInterruptHandler 0000  
                         ??_sys_data_init 002B                                m_mem_cpy@d 0072  
                         ??_sys_data_save 007B                                m_mem_cpy@s 0071  
                          __end_of___lmul 0590                            __end_of___wmul 0E6E  
                        _voExpectAdcValue 005C                                m_mem_set@x 0071  
                          _rtAdcValueRcHi 00DE                            _rtAdcValueRcLo 0058  
                          _rtAdcValueRsHi 00E0                            _rtAdcValueVoFb 00E2  
                          _rtAdcValueRsLo 005A                    ?_OSCILLATOR_Initialize 0070  
                       crc_verify@message 0020                               __end_ofPL10 074C  
                             __end_ofPL20 076A                               __end_ofPL12 0DC8  
                             __end_ofPL30 0778                               __end_ofPL22 0DD0  
                             __end_ofPL14 0754                               __end_ofPL40 078F  
                             __end_ofPL32 077E                               __end_ofPL24 0FF4  
                             __end_ofPL16 075B                               __end_ofPL42 0795  
                             __end_ofPL34 0783                               __end_ofPL26 0FF9  
                             __end_ofPL18 0761                               __end_ofPL44 0952  
                             __end_ofPL36 1000                               __end_ofPL28 0771  
                             __end_ofPL46 079A                               __end_ofPL38 0789  
                     start_initialization 0052                  __size_of_PWM2_Initialize 0017  
         __size_of_PIN_MANAGER_Initialize 0039                   my_flash_system_read@buf 0071  
                 my_flash_system_read@len 0073                     __end_of_m_mem_cpy_len 0F12  
                 __size_of_calc_rs_lo_avg 004D                       __size_of_crc_append 002E  
                     __size_of_crc_verify 0029                          __CFG_LPBOREN$OFF 0000  
                                ??___lmul 0079                                  ??___wmul 0075  
                             __pdataBANK0 0066                               __pdataBANK1 00E4  
             FLASH_EraseBlock@GIEBitValue 0073                           _ADC1_Initialize 02EB  
                __end_of_FLASH_EraseBlock 0F73                      _my_flash_system_read 0F12  
                             __pbssBIGRAM 2384                         __size_of_adc_init 000F  
                             __pbssCOMMON 007C                                 ___latbits 0002  
                           __pcstackBANK0 0020                             __pcstackBANK3 01A0  
                __size_of_TMR2_Initialize 000F                   ??_my_flash_system_write 0075  
                   my_flash_system_read@i 0078                __size_of_EUSART_Initialize 000E  
                   __size_of_fvr_set_gain 0011                          ___lwdiv@dividend 0073  
                  _PIN_MANAGER_Initialize 02F8                                  ?___aldiv 0024  
                                ?___almod 0071                                  ?___awdiv 0071  
                                ?___lldiv 0071                              ??_adc_sample 0075  
                             adc_sample@i 0079                                  ?___lwdiv 0071  
                       ??_PWM1_Initialize 0071              ??_INTERRUPT_InterruptManager 0070  
                        ___almod@dividend 0075                     set_idrv_pwm1_duty@t16 0075  
                               __pswtext1 07EA                                  ?_crc_sum 0071  
           my_flash_system_read@flashAddr 007A                __end_of_get_vout_pwm2_duty 0AC9  
                   ?_my_flash_system_read 0071                __end_of_set_vout_pwm2_duty 0AC2  
                               _m_mem_cpy 07AD                                 _m_mem_set 0710  
                           adc_sample@t16 007A                          ___lwdiv@quotient 0075  
                           adc_sample@ret 0077                             adc_sample@num 0074  
                        uart_send_str@str 0071                              _fvr_set_gain 05D1  
                          _eusartRxBuffer 0120                           ___aldiv@divisor 0024  
                       ??_PWM2_Initialize 0071                        __end_of_adc_sample 02DA  
                         ___aldiv@counter 002C                            ___wmul@product 0075  
                       _pid_pwm1_idrv_b_b 0331                         _pid_pwm1_idrv_run 0C0A  
                               clear_ram0 07D2                            m_mem_cpy_len@d 0075  
                          m_mem_cpy_len@s 0071                             ?_calc_temp_rc 0025  
                           ?_calc_temp_rs 0025                                  _PIE1bits 0091  
                __size_of_TMR2_StartTimer 0003                    set_vout_pwm2_duty@duty 0073  
                      ?_pid_pwm1_idrv_b_b 0070       __size_of_INTERRUPT_InterruptManager 004C  
                      ?_pid_pwm1_idrv_run 0070                   __end_of_ADC1_Initialize 02EF  
                                _PIR1bits 0011                 FLASH_EraseBlock@startAddr 0071  
                                _PWM1INTE 0D9C                                  _PWM1INTF 0D9D  
                                _PWM2INTE 0DAC                                  _PWM2INTF 0DAD  
                                _PWM1TMRH 0D9A                                  _PWM1TMRL 0D99  
                                _PWM2TMRH 0DAA                                  _PWM2TMRL 0DA9  
                     ??_pid_pwm1_idrv_b_b 0079                              ??_crc_append 0024  
                     ??_pid_pwm1_idrv_run 0032                    __size_of_uart_send_str 001F  
                              _ADCON0bits 009D                         ___wmul@multiplier 0071  
                            ??_crc_verify 007B                                ?_m_mem_cpy 0071  
                 __size_of_FVR_Initialize 0004                                ?_m_mem_set 0071  
       __size_of_TMR2_SetInterruptHandler 0001                 ?_TMR2_SetInterruptHandler 0071  
                       _pid_pwm2_vout_run 09C8                         ___lmul@multiplier 0071  
                        crc_verify@crccal 0024                 __end_of_pid_pwm1_idrv_b_b 04FC  
                          _calc_rs_lo_avg 05E2                        ?_pid_pwm2_vout_run 0070  
               __end_of_pid_pwm1_idrv_run 0D9C                         ??_TMR2_Initialize 0073  
                          ??_calc_temp_rc 0029                            ??_calc_temp_rs 0079  
                      __end_of_crc_append 0E9C                         calc_rs_lo_avg@t32 0027  
             __size_of_get_idrv_pwm1_duty 0007               __size_of_set_idrv_pwm1_duty 0015  
                     ??_pid_pwm2_vout_run 0079                        __end_of_crc_verify 0EC5  
                 ??_OSCILLATOR_Initialize 0071                          __size_of___aldiv 006C  
                        __size_of___almod 005A                          __size_of___awdiv 0040  
                        __size_of___lldiv 003F                          __size_of___lwdiv 0025  
                  ??_my_flash_system_read 0075                                  _adc_init 05C2  
                        __size_of_crc_sum 0036                       _eusartRxIdleTime_ms 0061  
               __end_of_pid_pwm2_vout_run 0A48                             crc_append@crc 0029  
                        sys_data_init@ret 0031                           ___lwdiv@divisor 0071  
                         ___lwdiv@counter 0077                                  __ptext10 0E6E  
                                __ptext11 0EC5                                  __ptext20 0D9C  
                                __ptext12 0E59                                  __ptext21 0DB1  
                                __ptext13 09C8                                  __ptext30 0AC9  
                                __ptext22 022E                                  __ptext14 0AAD  
                                __ptext31 0568                                  __ptext23 0710  
                                __ptext15 0AC2                                  __ptext40 07A9  
                                __ptext32 04FC                                  __ptext24 07AD  
                                __ptext16 0A88                                  __ptext41 05A8  
                                __ptext33 02A2                                  __ptext25 08F2  
                                __ptext17 0A48                                  __ptext42 0590  
                                __ptext34 05D1                                  __ptext26 0952  
                                __ptext18 0C0A                                  __ptext43 02F8  
                                __ptext35 05C2                                  __ptext27 062F  
                                __ptext19 0331                                  __ptext44 02F3  
                                __ptext36 02DA                                  __ptext28 05E2  
                                __ptext45 02EF                                  __ptext37 05BF  
                                __ptext29 06D1                                  __ptext46 0722  
                                __ptext38 079A                                  __ptext47 02EB  
                                __ptext39 07AA                    __end_of_calc_rs_lo_avg 062F  
                         ___almod@divisor 0071                           ___almod@counter 0079  
                           _uart_send_str 020F                   __size_of_m_int_2_str_ex 0074  
                           __size_of_main 0172                             _subTickerX_1s 0065  
                   set_vout_pwm2_duty@t16 0075                                _RA4PPSbits 0E94  
                              _RA5PPSbits 0E95                          ?_ADC1_Initialize 0070  
          my_flash_system_write@flashAddr 0027                                  int$flags 007E  
                                crc_sum@i 0077                                  crc_sum@j 0075  
                              _RC5PPSbits 0EA5                         ??_TMR2_StartTimer 0071  
      __end_of_INTERRUPT_InterruptManager 0050                _INTERRUPT_InterruptManager 0004  
                   __end_of_sys_data_init 0E59                     __end_of_sys_data_save 0DDB  
                       ?_FLASH_EraseBlock 0071             calc_expect_vout_adc_value@t32 01B0  
             PIN_MANAGER_Initialize@state 0071                               ??_m_mem_cpy 0072  
                             ??_m_mem_set 0074                        ??_FLASH_EraseBlock 0073  
                              _INTCONbits 000B                               _PWM1CONbits 0D9B  
                        m_mem_cpy_len@len 0073                                _FVRCONbits 0117  
                             _PWM2CONbits 0DAB              INTERRUPT_InterruptManager@t8 0070  
                         ?_calc_rs_lo_avg 0079                   __size_of_WDT_Initialize 0003  
                          ?_uart_send_str 0071                                  intlevel1 0000  
          __size_of_my_flash_system_write 0079                      pid_pwm2_vout_run@t16 0022  
              __size_of_pid_pwm1_idrv_b_b 01CB             __end_of_my_flash_system_write 0FEC  
              __size_of_pid_pwm1_idrv_run 0192                                _PMCON1bits 0195  
                        ___lldiv@dividend 0075                   ?_PIN_MANAGER_Initialize 0070  
                       __CFG_CLKOUTEN$OFF 0000                               _PPSLOCKbits 0E0F  
                         _PWM1_Initialize 0590              calc_expect_vout_adc_value@x0 01AC  
            calc_expect_vout_adc_value@x1 01A4              calc_expect_vout_adc_value@y0 01A8  
            calc_expect_vout_adc_value@y1 01A0                                _PWM1CLKCON 0D9E  
                              _PWM2CLKCON 0DAE                    __size_of_m_mem_cpy_len 0017  
                          _FVR_Initialize 02EF                            sys_data_init@i 0033  
                             crc_append@n 0022                      __end_of_calc_temp_rc 06D1  
                    __end_of_calc_temp_rs 09C8                          ___lldiv@quotient 0020  
                         _PWM2_Initialize 05A8                __size_of_pid_pwm2_vout_run 0080  
                            ___aldiv@sign 002D               calc_expect_vout_adc_value@i 01B4  
             calc_expect_vout_adc_value@x 0032       __size_of_calc_expect_vout_adc_value 0128  
          __end_of_PIN_MANAGER_Initialize 0331                              ___almod@sign 007A  
                      _get_vout_pwm2_duty 0AC2                        _set_vout_pwm2_duty 0AAD  
                             crc_verify@n 0022                       ?_get_vout_pwm2_duty 0071  
                     ?_set_vout_pwm2_duty 0073  
