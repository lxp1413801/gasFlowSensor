

Microchip Technology PIC PRO Macro Assembler V1.37 build -260352376 
                                                                                               Tue Nov 20 23:16:18 2018

Microchip Technology Omniscient Code Generator v1.37 (PRO mode) build 201603110536
     1                           	processor	16F1575
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	swtext1,local,class=CONST,delta=2
    23                           	psect	text14,local,class=CODE,merge=1,delta=2
    24                           	psect	swtext2,local,class=CONST,delta=2
    25                           	psect	text32,local,class=CODE,merge=1,delta=2
    26                           	psect	text40,local,class=CODE,merge=1,delta=2
    27                           	psect	intentry,global,class=CODE,delta=2
    28                           	psect	pa_nodes,global,class=CODE,delta=2
    29                           	dabs	1,0x620,32
    30                           	dabs	1,0x5B4,60
    31                           	dabs	1,0x2384,0,_sysData
    32                           	dabs	1,0x7E,2
    33  0000                     	;# 
    34  0001                     	;# 
    35  0002                     	;# 
    36  0003                     	;# 
    37  0004                     	;# 
    38  0005                     	;# 
    39  0006                     	;# 
    40  0007                     	;# 
    41  0008                     	;# 
    42  0009                     	;# 
    43  000A                     	;# 
    44  000B                     	;# 
    45  000C                     	;# 
    46  000E                     	;# 
    47  0011                     	;# 
    48  0012                     	;# 
    49  0013                     	;# 
    50  0015                     	;# 
    51  0016                     	;# 
    52  0016                     	;# 
    53  0017                     	;# 
    54  0018                     	;# 
    55  0019                     	;# 
    56  001A                     	;# 
    57  001B                     	;# 
    58  001C                     	;# 
    59  008C                     	;# 
    60  008E                     	;# 
    61  0091                     	;# 
    62  0092                     	;# 
    63  0093                     	;# 
    64  0095                     	;# 
    65  0096                     	;# 
    66  0097                     	;# 
    67  0098                     	;# 
    68  0099                     	;# 
    69  009A                     	;# 
    70  009B                     	;# 
    71  009B                     	;# 
    72  009C                     	;# 
    73  009D                     	;# 
    74  009E                     	;# 
    75  009F                     	;# 
    76  010C                     	;# 
    77  010E                     	;# 
    78  0111                     	;# 
    79  0112                     	;# 
    80  0113                     	;# 
    81  0114                     	;# 
    82  0115                     	;# 
    83  0116                     	;# 
    84  0117                     	;# 
    85  0118                     	;# 
    86  0119                     	;# 
    87  018C                     	;# 
    88  018E                     	;# 
    89  0191                     	;# 
    90  0191                     	;# 
    91  0192                     	;# 
    92  0193                     	;# 
    93  0193                     	;# 
    94  0194                     	;# 
    95  0195                     	;# 
    96  0196                     	;# 
    97  0197                     	;# 
    98  0199                     	;# 
    99  019A                     	;# 
   100  019B                     	;# 
   101  019B                     	;# 
   102  019C                     	;# 
   103  019D                     	;# 
   104  019E                     	;# 
   105  019F                     	;# 
   106  020C                     	;# 
   107  020E                     	;# 
   108  028C                     	;# 
   109  028E                     	;# 
   110  030C                     	;# 
   111  030E                     	;# 
   112  038C                     	;# 
   113  038E                     	;# 
   114  0391                     	;# 
   115  0392                     	;# 
   116  0393                     	;# 
   117  0397                     	;# 
   118  0398                     	;# 
   119  0399                     	;# 
   120  0691                     	;# 
   121  0692                     	;# 
   122  0693                     	;# 
   123  0694                     	;# 
   124  0695                     	;# 
   125  0D8E                     	;# 
   126  0D8F                     	;# 
   127  0D90                     	;# 
   128  0D91                     	;# 
   129  0D91                     	;# 
   130  0D92                     	;# 
   131  0D93                     	;# 
   132  0D93                     	;# 
   133  0D94                     	;# 
   134  0D95                     	;# 
   135  0D95                     	;# 
   136  0D96                     	;# 
   137  0D97                     	;# 
   138  0D97                     	;# 
   139  0D98                     	;# 
   140  0D99                     	;# 
   141  0D99                     	;# 
   142  0D9A                     	;# 
   143  0D9B                     	;# 
   144  0D9C                     	;# 
   145  0D9C                     	;# 
   146  0D9D                     	;# 
   147  0D9D                     	;# 
   148  0D9E                     	;# 
   149  0D9F                     	;# 
   150  0DA0                     	;# 
   151  0DA1                     	;# 
   152  0DA1                     	;# 
   153  0DA2                     	;# 
   154  0DA3                     	;# 
   155  0DA3                     	;# 
   156  0DA4                     	;# 
   157  0DA5                     	;# 
   158  0DA5                     	;# 
   159  0DA6                     	;# 
   160  0DA7                     	;# 
   161  0DA7                     	;# 
   162  0DA8                     	;# 
   163  0DA9                     	;# 
   164  0DA9                     	;# 
   165  0DAA                     	;# 
   166  0DAB                     	;# 
   167  0DAC                     	;# 
   168  0DAC                     	;# 
   169  0DAD                     	;# 
   170  0DAD                     	;# 
   171  0DAE                     	;# 
   172  0DAF                     	;# 
   173  0DB0                     	;# 
   174  0DB1                     	;# 
   175  0DB1                     	;# 
   176  0DB2                     	;# 
   177  0DB3                     	;# 
   178  0DB3                     	;# 
   179  0DB4                     	;# 
   180  0DB5                     	;# 
   181  0DB5                     	;# 
   182  0DB6                     	;# 
   183  0DB7                     	;# 
   184  0DB7                     	;# 
   185  0DB8                     	;# 
   186  0DB9                     	;# 
   187  0DB9                     	;# 
   188  0DBA                     	;# 
   189  0DBB                     	;# 
   190  0DBC                     	;# 
   191  0DBC                     	;# 
   192  0DBD                     	;# 
   193  0DBD                     	;# 
   194  0DBE                     	;# 
   195  0DBF                     	;# 
   196  0DC0                     	;# 
   197  0DC1                     	;# 
   198  0DC1                     	;# 
   199  0DC2                     	;# 
   200  0DC3                     	;# 
   201  0DC3                     	;# 
   202  0DC4                     	;# 
   203  0DC5                     	;# 
   204  0DC5                     	;# 
   205  0DC6                     	;# 
   206  0DC7                     	;# 
   207  0DC7                     	;# 
   208  0DC8                     	;# 
   209  0DC9                     	;# 
   210  0DC9                     	;# 
   211  0DCA                     	;# 
   212  0DCB                     	;# 
   213  0DCC                     	;# 
   214  0DCC                     	;# 
   215  0DCD                     	;# 
   216  0DCD                     	;# 
   217  0DCE                     	;# 
   218  0DCF                     	;# 
   219  0DD0                     	;# 
   220  0E0F                     	;# 
   221  0E10                     	;# 
   222  0E11                     	;# 
   223  0E12                     	;# 
   224  0E13                     	;# 
   225  0E14                     	;# 
   226  0E15                     	;# 
   227  0E16                     	;# 
   228  0E17                     	;# 
   229  0E90                     	;# 
   230  0E91                     	;# 
   231  0E92                     	;# 
   232  0E94                     	;# 
   233  0E95                     	;# 
   234  0EA0                     	;# 
   235  0EA1                     	;# 
   236  0EA2                     	;# 
   237  0EA3                     	;# 
   238  0EA4                     	;# 
   239  0EA5                     	;# 
   240  0FE4                     	;# 
   241  0FE5                     	;# 
   242  0FE6                     	;# 
   243  0FE7                     	;# 
   244  0FE8                     	;# 
   245  0FE8                     	;# 
   246  0FE9                     	;# 
   247  0FEA                     	;# 
   248  0FEA                     	;# 
   249  0FEB                     	;# 
   250  0FED                     	;# 
   251  0FEE                     	;# 
   252  0FEE                     	;# 
   253  0FEF                     	;# 
   254  0000                     	;# 
   255  0001                     	;# 
   256  0002                     	;# 
   257  0003                     	;# 
   258  0004                     	;# 
   259  0005                     	;# 
   260  0006                     	;# 
   261  0007                     	;# 
   262  0008                     	;# 
   263  0009                     	;# 
   264  000A                     	;# 
   265  000B                     	;# 
   266  000C                     	;# 
   267  000E                     	;# 
   268  0011                     	;# 
   269  0012                     	;# 
   270  0013                     	;# 
   271  0015                     	;# 
   272  0016                     	;# 
   273  0016                     	;# 
   274  0017                     	;# 
   275  0018                     	;# 
   276  0019                     	;# 
   277  001A                     	;# 
   278  001B                     	;# 
   279  001C                     	;# 
   280  008C                     	;# 
   281  008E                     	;# 
   282  0091                     	;# 
   283  0092                     	;# 
   284  0093                     	;# 
   285  0095                     	;# 
   286  0096                     	;# 
   287  0097                     	;# 
   288  0098                     	;# 
   289  0099                     	;# 
   290  009A                     	;# 
   291  009B                     	;# 
   292  009B                     	;# 
   293  009C                     	;# 
   294  009D                     	;# 
   295  009E                     	;# 
   296  009F                     	;# 
   297  010C                     	;# 
   298  010E                     	;# 
   299  0111                     	;# 
   300  0112                     	;# 
   301  0113                     	;# 
   302  0114                     	;# 
   303  0115                     	;# 
   304  0116                     	;# 
   305  0117                     	;# 
   306  0118                     	;# 
   307  0119                     	;# 
   308  018C                     	;# 
   309  018E                     	;# 
   310  0191                     	;# 
   311  0191                     	;# 
   312  0192                     	;# 
   313  0193                     	;# 
   314  0193                     	;# 
   315  0194                     	;# 
   316  0195                     	;# 
   317  0196                     	;# 
   318  0197                     	;# 
   319  0199                     	;# 
   320  019A                     	;# 
   321  019B                     	;# 
   322  019B                     	;# 
   323  019C                     	;# 
   324  019D                     	;# 
   325  019E                     	;# 
   326  019F                     	;# 
   327  020C                     	;# 
   328  020E                     	;# 
   329  028C                     	;# 
   330  028E                     	;# 
   331  030C                     	;# 
   332  030E                     	;# 
   333  038C                     	;# 
   334  038E                     	;# 
   335  0391                     	;# 
   336  0392                     	;# 
   337  0393                     	;# 
   338  0397                     	;# 
   339  0398                     	;# 
   340  0399                     	;# 
   341  0691                     	;# 
   342  0692                     	;# 
   343  0693                     	;# 
   344  0694                     	;# 
   345  0695                     	;# 
   346  0D8E                     	;# 
   347  0D8F                     	;# 
   348  0D90                     	;# 
   349  0D91                     	;# 
   350  0D91                     	;# 
   351  0D92                     	;# 
   352  0D93                     	;# 
   353  0D93                     	;# 
   354  0D94                     	;# 
   355  0D95                     	;# 
   356  0D95                     	;# 
   357  0D96                     	;# 
   358  0D97                     	;# 
   359  0D97                     	;# 
   360  0D98                     	;# 
   361  0D99                     	;# 
   362  0D99                     	;# 
   363  0D9A                     	;# 
   364  0D9B                     	;# 
   365  0D9C                     	;# 
   366  0D9C                     	;# 
   367  0D9D                     	;# 
   368  0D9D                     	;# 
   369  0D9E                     	;# 
   370  0D9F                     	;# 
   371  0DA0                     	;# 
   372  0DA1                     	;# 
   373  0DA1                     	;# 
   374  0DA2                     	;# 
   375  0DA3                     	;# 
   376  0DA3                     	;# 
   377  0DA4                     	;# 
   378  0DA5                     	;# 
   379  0DA5                     	;# 
   380  0DA6                     	;# 
   381  0DA7                     	;# 
   382  0DA7                     	;# 
   383  0DA8                     	;# 
   384  0DA9                     	;# 
   385  0DA9                     	;# 
   386  0DAA                     	;# 
   387  0DAB                     	;# 
   388  0DAC                     	;# 
   389  0DAC                     	;# 
   390  0DAD                     	;# 
   391  0DAD                     	;# 
   392  0DAE                     	;# 
   393  0DAF                     	;# 
   394  0DB0                     	;# 
   395  0DB1                     	;# 
   396  0DB1                     	;# 
   397  0DB2                     	;# 
   398  0DB3                     	;# 
   399  0DB3                     	;# 
   400  0DB4                     	;# 
   401  0DB5                     	;# 
   402  0DB5                     	;# 
   403  0DB6                     	;# 
   404  0DB7                     	;# 
   405  0DB7                     	;# 
   406  0DB8                     	;# 
   407  0DB9                     	;# 
   408  0DB9                     	;# 
   409  0DBA                     	;# 
   410  0DBB                     	;# 
   411  0DBC                     	;# 
   412  0DBC                     	;# 
   413  0DBD                     	;# 
   414  0DBD                     	;# 
   415  0DBE                     	;# 
   416  0DBF                     	;# 
   417  0DC0                     	;# 
   418  0DC1                     	;# 
   419  0DC1                     	;# 
   420  0DC2                     	;# 
   421  0DC3                     	;# 
   422  0DC3                     	;# 
   423  0DC4                     	;# 
   424  0DC5                     	;# 
   425  0DC5                     	;# 
   426  0DC6                     	;# 
   427  0DC7                     	;# 
   428  0DC7                     	;# 
   429  0DC8                     	;# 
   430  0DC9                     	;# 
   431  0DC9                     	;# 
   432  0DCA                     	;# 
   433  0DCB                     	;# 
   434  0DCC                     	;# 
   435  0DCC                     	;# 
   436  0DCD                     	;# 
   437  0DCD                     	;# 
   438  0DCE                     	;# 
   439  0DCF                     	;# 
   440  0DD0                     	;# 
   441  0E0F                     	;# 
   442  0E10                     	;# 
   443  0E11                     	;# 
   444  0E12                     	;# 
   445  0E13                     	;# 
   446  0E14                     	;# 
   447  0E15                     	;# 
   448  0E16                     	;# 
   449  0E17                     	;# 
   450  0E90                     	;# 
   451  0E91                     	;# 
   452  0E92                     	;# 
   453  0E94                     	;# 
   454  0E95                     	;# 
   455  0EA0                     	;# 
   456  0EA1                     	;# 
   457  0EA2                     	;# 
   458  0EA3                     	;# 
   459  0EA4                     	;# 
   460  0EA5                     	;# 
   461  0FE4                     	;# 
   462  0FE5                     	;# 
   463  0FE6                     	;# 
   464  0FE7                     	;# 
   465  0FE8                     	;# 
   466  0FE8                     	;# 
   467  0FE9                     	;# 
   468  0FEA                     	;# 
   469  0FEA                     	;# 
   470  0FEB                     	;# 
   471  0FED                     	;# 
   472  0FEE                     	;# 
   473  0FEE                     	;# 
   474  0FEF                     	;# 
   475  0000                     	;# 
   476  0001                     	;# 
   477  0002                     	;# 
   478  0003                     	;# 
   479  0004                     	;# 
   480  0005                     	;# 
   481  0006                     	;# 
   482  0007                     	;# 
   483  0008                     	;# 
   484  0009                     	;# 
   485  000A                     	;# 
   486  000B                     	;# 
   487  000C                     	;# 
   488  000E                     	;# 
   489  0011                     	;# 
   490  0012                     	;# 
   491  0013                     	;# 
   492  0015                     	;# 
   493  0016                     	;# 
   494  0016                     	;# 
   495  0017                     	;# 
   496  0018                     	;# 
   497  0019                     	;# 
   498  001A                     	;# 
   499  001B                     	;# 
   500  001C                     	;# 
   501  008C                     	;# 
   502  008E                     	;# 
   503  0091                     	;# 
   504  0092                     	;# 
   505  0093                     	;# 
   506  0095                     	;# 
   507  0096                     	;# 
   508  0097                     	;# 
   509  0098                     	;# 
   510  0099                     	;# 
   511  009A                     	;# 
   512  009B                     	;# 
   513  009B                     	;# 
   514  009C                     	;# 
   515  009D                     	;# 
   516  009E                     	;# 
   517  009F                     	;# 
   518  010C                     	;# 
   519  010E                     	;# 
   520  0111                     	;# 
   521  0112                     	;# 
   522  0113                     	;# 
   523  0114                     	;# 
   524  0115                     	;# 
   525  0116                     	;# 
   526  0117                     	;# 
   527  0118                     	;# 
   528  0119                     	;# 
   529  018C                     	;# 
   530  018E                     	;# 
   531  0191                     	;# 
   532  0191                     	;# 
   533  0192                     	;# 
   534  0193                     	;# 
   535  0193                     	;# 
   536  0194                     	;# 
   537  0195                     	;# 
   538  0196                     	;# 
   539  0197                     	;# 
   540  0199                     	;# 
   541  019A                     	;# 
   542  019B                     	;# 
   543  019B                     	;# 
   544  019C                     	;# 
   545  019D                     	;# 
   546  019E                     	;# 
   547  019F                     	;# 
   548  020C                     	;# 
   549  020E                     	;# 
   550  028C                     	;# 
   551  028E                     	;# 
   552  030C                     	;# 
   553  030E                     	;# 
   554  038C                     	;# 
   555  038E                     	;# 
   556  0391                     	;# 
   557  0392                     	;# 
   558  0393                     	;# 
   559  0397                     	;# 
   560  0398                     	;# 
   561  0399                     	;# 
   562  0691                     	;# 
   563  0692                     	;# 
   564  0693                     	;# 
   565  0694                     	;# 
   566  0695                     	;# 
   567  0D8E                     	;# 
   568  0D8F                     	;# 
   569  0D90                     	;# 
   570  0D91                     	;# 
   571  0D91                     	;# 
   572  0D92                     	;# 
   573  0D93                     	;# 
   574  0D93                     	;# 
   575  0D94                     	;# 
   576  0D95                     	;# 
   577  0D95                     	;# 
   578  0D96                     	;# 
   579  0D97                     	;# 
   580  0D97                     	;# 
   581  0D98                     	;# 
   582  0D99                     	;# 
   583  0D99                     	;# 
   584  0D9A                     	;# 
   585  0D9B                     	;# 
   586  0D9C                     	;# 
   587  0D9C                     	;# 
   588  0D9D                     	;# 
   589  0D9D                     	;# 
   590  0D9E                     	;# 
   591  0D9F                     	;# 
   592  0DA0                     	;# 
   593  0DA1                     	;# 
   594  0DA1                     	;# 
   595  0DA2                     	;# 
   596  0DA3                     	;# 
   597  0DA3                     	;# 
   598  0DA4                     	;# 
   599  0DA5                     	;# 
   600  0DA5                     	;# 
   601  0DA6                     	;# 
   602  0DA7                     	;# 
   603  0DA7                     	;# 
   604  0DA8                     	;# 
   605  0DA9                     	;# 
   606  0DA9                     	;# 
   607  0DAA                     	;# 
   608  0DAB                     	;# 
   609  0DAC                     	;# 
   610  0DAC                     	;# 
   611  0DAD                     	;# 
   612  0DAD                     	;# 
   613  0DAE                     	;# 
   614  0DAF                     	;# 
   615  0DB0                     	;# 
   616  0DB1                     	;# 
   617  0DB1                     	;# 
   618  0DB2                     	;# 
   619  0DB3                     	;# 
   620  0DB3                     	;# 
   621  0DB4                     	;# 
   622  0DB5                     	;# 
   623  0DB5                     	;# 
   624  0DB6                     	;# 
   625  0DB7                     	;# 
   626  0DB7                     	;# 
   627  0DB8                     	;# 
   628  0DB9                     	;# 
   629  0DB9                     	;# 
   630  0DBA                     	;# 
   631  0DBB                     	;# 
   632  0DBC                     	;# 
   633  0DBC                     	;# 
   634  0DBD                     	;# 
   635  0DBD                     	;# 
   636  0DBE                     	;# 
   637  0DBF                     	;# 
   638  0DC0                     	;# 
   639  0DC1                     	;# 
   640  0DC1                     	;# 
   641  0DC2                     	;# 
   642  0DC3                     	;# 
   643  0DC3                     	;# 
   644  0DC4                     	;# 
   645  0DC5                     	;# 
   646  0DC5                     	;# 
   647  0DC6                     	;# 
   648  0DC7                     	;# 
   649  0DC7                     	;# 
   650  0DC8                     	;# 
   651  0DC9                     	;# 
   652  0DC9                     	;# 
   653  0DCA                     	;# 
   654  0DCB                     	;# 
   655  0DCC                     	;# 
   656  0DCC                     	;# 
   657  0DCD                     	;# 
   658  0DCD                     	;# 
   659  0DCE                     	;# 
   660  0DCF                     	;# 
   661  0DD0                     	;# 
   662  0E0F                     	;# 
   663  0E10                     	;# 
   664  0E11                     	;# 
   665  0E12                     	;# 
   666  0E13                     	;# 
   667  0E14                     	;# 
   668  0E15                     	;# 
   669  0E16                     	;# 
   670  0E17                     	;# 
   671  0E90                     	;# 
   672  0E91                     	;# 
   673  0E92                     	;# 
   674  0E94                     	;# 
   675  0E95                     	;# 
   676  0EA0                     	;# 
   677  0EA1                     	;# 
   678  0EA2                     	;# 
   679  0EA3                     	;# 
   680  0EA4                     	;# 
   681  0EA5                     	;# 
   682  0FE4                     	;# 
   683  0FE5                     	;# 
   684  0FE6                     	;# 
   685  0FE7                     	;# 
   686  0FE8                     	;# 
   687  0FE8                     	;# 
   688  0FE9                     	;# 
   689  0FEA                     	;# 
   690  0FEA                     	;# 
   691  0FEB                     	;# 
   692  0FED                     	;# 
   693  0FEE                     	;# 
   694  0FEE                     	;# 
   695  0FEF                     	;# 
   696  0000                     	;# 
   697  0001                     	;# 
   698  0002                     	;# 
   699  0003                     	;# 
   700  0004                     	;# 
   701  0005                     	;# 
   702  0006                     	;# 
   703  0007                     	;# 
   704  0008                     	;# 
   705  0009                     	;# 
   706  000A                     	;# 
   707  000B                     	;# 
   708  000C                     	;# 
   709  000E                     	;# 
   710  0011                     	;# 
   711  0012                     	;# 
   712  0013                     	;# 
   713  0015                     	;# 
   714  0016                     	;# 
   715  0016                     	;# 
   716  0017                     	;# 
   717  0018                     	;# 
   718  0019                     	;# 
   719  001A                     	;# 
   720  001B                     	;# 
   721  001C                     	;# 
   722  008C                     	;# 
   723  008E                     	;# 
   724  0091                     	;# 
   725  0092                     	;# 
   726  0093                     	;# 
   727  0095                     	;# 
   728  0096                     	;# 
   729  0097                     	;# 
   730  0098                     	;# 
   731  0099                     	;# 
   732  009A                     	;# 
   733  009B                     	;# 
   734  009B                     	;# 
   735  009C                     	;# 
   736  009D                     	;# 
   737  009E                     	;# 
   738  009F                     	;# 
   739  010C                     	;# 
   740  010E                     	;# 
   741  0111                     	;# 
   742  0112                     	;# 
   743  0113                     	;# 
   744  0114                     	;# 
   745  0115                     	;# 
   746  0116                     	;# 
   747  0117                     	;# 
   748  0118                     	;# 
   749  0119                     	;# 
   750  018C                     	;# 
   751  018E                     	;# 
   752  0191                     	;# 
   753  0191                     	;# 
   754  0192                     	;# 
   755  0193                     	;# 
   756  0193                     	;# 
   757  0194                     	;# 
   758  0195                     	;# 
   759  0196                     	;# 
   760  0197                     	;# 
   761  0199                     	;# 
   762  019A                     	;# 
   763  019B                     	;# 
   764  019B                     	;# 
   765  019C                     	;# 
   766  019D                     	;# 
   767  019E                     	;# 
   768  019F                     	;# 
   769  020C                     	;# 
   770  020E                     	;# 
   771  028C                     	;# 
   772  028E                     	;# 
   773  030C                     	;# 
   774  030E                     	;# 
   775  038C                     	;# 
   776  038E                     	;# 
   777  0391                     	;# 
   778  0392                     	;# 
   779  0393                     	;# 
   780  0397                     	;# 
   781  0398                     	;# 
   782  0399                     	;# 
   783  0691                     	;# 
   784  0692                     	;# 
   785  0693                     	;# 
   786  0694                     	;# 
   787  0695                     	;# 
   788  0D8E                     	;# 
   789  0D8F                     	;# 
   790  0D90                     	;# 
   791  0D91                     	;# 
   792  0D91                     	;# 
   793  0D92                     	;# 
   794  0D93                     	;# 
   795  0D93                     	;# 
   796  0D94                     	;# 
   797  0D95                     	;# 
   798  0D95                     	;# 
   799  0D96                     	;# 
   800  0D97                     	;# 
   801  0D97                     	;# 
   802  0D98                     	;# 
   803  0D99                     	;# 
   804  0D99                     	;# 
   805  0D9A                     	;# 
   806  0D9B                     	;# 
   807  0D9C                     	;# 
   808  0D9C                     	;# 
   809  0D9D                     	;# 
   810  0D9D                     	;# 
   811  0D9E                     	;# 
   812  0D9F                     	;# 
   813  0DA0                     	;# 
   814  0DA1                     	;# 
   815  0DA1                     	;# 
   816  0DA2                     	;# 
   817  0DA3                     	;# 
   818  0DA3                     	;# 
   819  0DA4                     	;# 
   820  0DA5                     	;# 
   821  0DA5                     	;# 
   822  0DA6                     	;# 
   823  0DA7                     	;# 
   824  0DA7                     	;# 
   825  0DA8                     	;# 
   826  0DA9                     	;# 
   827  0DA9                     	;# 
   828  0DAA                     	;# 
   829  0DAB                     	;# 
   830  0DAC                     	;# 
   831  0DAC                     	;# 
   832  0DAD                     	;# 
   833  0DAD                     	;# 
   834  0DAE                     	;# 
   835  0DAF                     	;# 
   836  0DB0                     	;# 
   837  0DB1                     	;# 
   838  0DB1                     	;# 
   839  0DB2                     	;# 
   840  0DB3                     	;# 
   841  0DB3                     	;# 
   842  0DB4                     	;# 
   843  0DB5                     	;# 
   844  0DB5                     	;# 
   845  0DB6                     	;# 
   846  0DB7                     	;# 
   847  0DB7                     	;# 
   848  0DB8                     	;# 
   849  0DB9                     	;# 
   850  0DB9                     	;# 
   851  0DBA                     	;# 
   852  0DBB                     	;# 
   853  0DBC                     	;# 
   854  0DBC                     	;# 
   855  0DBD                     	;# 
   856  0DBD                     	;# 
   857  0DBE                     	;# 
   858  0DBF                     	;# 
   859  0DC0                     	;# 
   860  0DC1                     	;# 
   861  0DC1                     	;# 
   862  0DC2                     	;# 
   863  0DC3                     	;# 
   864  0DC3                     	;# 
   865  0DC4                     	;# 
   866  0DC5                     	;# 
   867  0DC5                     	;# 
   868  0DC6                     	;# 
   869  0DC7                     	;# 
   870  0DC7                     	;# 
   871  0DC8                     	;# 
   872  0DC9                     	;# 
   873  0DC9                     	;# 
   874  0DCA                     	;# 
   875  0DCB                     	;# 
   876  0DCC                     	;# 
   877  0DCC                     	;# 
   878  0DCD                     	;# 
   879  0DCD                     	;# 
   880  0DCE                     	;# 
   881  0DCF                     	;# 
   882  0DD0                     	;# 
   883  0E0F                     	;# 
   884  0E10                     	;# 
   885  0E11                     	;# 
   886  0E12                     	;# 
   887  0E13                     	;# 
   888  0E14                     	;# 
   889  0E15                     	;# 
   890  0E16                     	;# 
   891  0E17                     	;# 
   892  0E90                     	;# 
   893  0E91                     	;# 
   894  0E92                     	;# 
   895  0E94                     	;# 
   896  0E95                     	;# 
   897  0EA0                     	;# 
   898  0EA1                     	;# 
   899  0EA2                     	;# 
   900  0EA3                     	;# 
   901  0EA4                     	;# 
   902  0EA5                     	;# 
   903  0FE4                     	;# 
   904  0FE5                     	;# 
   905  0FE6                     	;# 
   906  0FE7                     	;# 
   907  0FE8                     	;# 
   908  0FE8                     	;# 
   909  0FE9                     	;# 
   910  0FEA                     	;# 
   911  0FEA                     	;# 
   912  0FEB                     	;# 
   913  0FED                     	;# 
   914  0FEE                     	;# 
   915  0FEE                     	;# 
   916  0FEF                     	;# 
   917  0000                     	;# 
   918  0001                     	;# 
   919  0002                     	;# 
   920  0003                     	;# 
   921  0004                     	;# 
   922  0005                     	;# 
   923  0006                     	;# 
   924  0007                     	;# 
   925  0008                     	;# 
   926  0009                     	;# 
   927  000A                     	;# 
   928  000B                     	;# 
   929  000C                     	;# 
   930  000E                     	;# 
   931  0011                     	;# 
   932  0012                     	;# 
   933  0013                     	;# 
   934  0015                     	;# 
   935  0016                     	;# 
   936  0016                     	;# 
   937  0017                     	;# 
   938  0018                     	;# 
   939  0019                     	;# 
   940  001A                     	;# 
   941  001B                     	;# 
   942  001C                     	;# 
   943  008C                     	;# 
   944  008E                     	;# 
   945  0091                     	;# 
   946  0092                     	;# 
   947  0093                     	;# 
   948  0095                     	;# 
   949  0096                     	;# 
   950  0097                     	;# 
   951  0098                     	;# 
   952  0099                     	;# 
   953  009A                     	;# 
   954  009B                     	;# 
   955  009B                     	;# 
   956  009C                     	;# 
   957  009D                     	;# 
   958  009E                     	;# 
   959  009F                     	;# 
   960  010C                     	;# 
   961  010E                     	;# 
   962  0111                     	;# 
   963  0112                     	;# 
   964  0113                     	;# 
   965  0114                     	;# 
   966  0115                     	;# 
   967  0116                     	;# 
   968  0117                     	;# 
   969  0118                     	;# 
   970  0119                     	;# 
   971  018C                     	;# 
   972  018E                     	;# 
   973  0191                     	;# 
   974  0191                     	;# 
   975  0192                     	;# 
   976  0193                     	;# 
   977  0193                     	;# 
   978  0194                     	;# 
   979  0195                     	;# 
   980  0196                     	;# 
   981  0197                     	;# 
   982  0199                     	;# 
   983  019A                     	;# 
   984  019B                     	;# 
   985  019B                     	;# 
   986  019C                     	;# 
   987  019D                     	;# 
   988  019E                     	;# 
   989  019F                     	;# 
   990  020C                     	;# 
   991  020E                     	;# 
   992  028C                     	;# 
   993  028E                     	;# 
   994  030C                     	;# 
   995  030E                     	;# 
   996  038C                     	;# 
   997  038E                     	;# 
   998  0391                     	;# 
   999  0392                     	;# 
  1000  0393                     	;# 
  1001  0397                     	;# 
  1002  0398                     	;# 
  1003  0399                     	;# 
  1004  0691                     	;# 
  1005  0692                     	;# 
  1006  0693                     	;# 
  1007  0694                     	;# 
  1008  0695                     	;# 
  1009  0D8E                     	;# 
  1010  0D8F                     	;# 
  1011  0D90                     	;# 
  1012  0D91                     	;# 
  1013  0D91                     	;# 
  1014  0D92                     	;# 
  1015  0D93                     	;# 
  1016  0D93                     	;# 
  1017  0D94                     	;# 
  1018  0D95                     	;# 
  1019  0D95                     	;# 
  1020  0D96                     	;# 
  1021  0D97                     	;# 
  1022  0D97                     	;# 
  1023  0D98                     	;# 
  1024  0D99                     	;# 
  1025  0D99                     	;# 
  1026  0D9A                     	;# 
  1027  0D9B                     	;# 
  1028  0D9C                     	;# 
  1029  0D9C                     	;# 
  1030  0D9D                     	;# 
  1031  0D9D                     	;# 
  1032  0D9E                     	;# 
  1033  0D9F                     	;# 
  1034  0DA0                     	;# 
  1035  0DA1                     	;# 
  1036  0DA1                     	;# 
  1037  0DA2                     	;# 
  1038  0DA3                     	;# 
  1039  0DA3                     	;# 
  1040  0DA4                     	;# 
  1041  0DA5                     	;# 
  1042  0DA5                     	;# 
  1043  0DA6                     	;# 
  1044  0DA7                     	;# 
  1045  0DA7                     	;# 
  1046  0DA8                     	;# 
  1047  0DA9                     	;# 
  1048  0DA9                     	;# 
  1049  0DAA                     	;# 
  1050  0DAB                     	;# 
  1051  0DAC                     	;# 
  1052  0DAC                     	;# 
  1053  0DAD                     	;# 
  1054  0DAD                     	;# 
  1055  0DAE                     	;# 
  1056  0DAF                     	;# 
  1057  0DB0                     	;# 
  1058  0DB1                     	;# 
  1059  0DB1                     	;# 
  1060  0DB2                     	;# 
  1061  0DB3                     	;# 
  1062  0DB3                     	;# 
  1063  0DB4                     	;# 
  1064  0DB5                     	;# 
  1065  0DB5                     	;# 
  1066  0DB6                     	;# 
  1067  0DB7                     	;# 
  1068  0DB7                     	;# 
  1069  0DB8                     	;# 
  1070  0DB9                     	;# 
  1071  0DB9                     	;# 
  1072  0DBA                     	;# 
  1073  0DBB                     	;# 
  1074  0DBC                     	;# 
  1075  0DBC                     	;# 
  1076  0DBD                     	;# 
  1077  0DBD                     	;# 
  1078  0DBE                     	;# 
  1079  0DBF                     	;# 
  1080  0DC0                     	;# 
  1081  0DC1                     	;# 
  1082  0DC1                     	;# 
  1083  0DC2                     	;# 
  1084  0DC3                     	;# 
  1085  0DC3                     	;# 
  1086  0DC4                     	;# 
  1087  0DC5                     	;# 
  1088  0DC5                     	;# 
  1089  0DC6                     	;# 
  1090  0DC7                     	;# 
  1091  0DC7                     	;# 
  1092  0DC8                     	;# 
  1093  0DC9                     	;# 
  1094  0DC9                     	;# 
  1095  0DCA                     	;# 
  1096  0DCB                     	;# 
  1097  0DCC                     	;# 
  1098  0DCC                     	;# 
  1099  0DCD                     	;# 
  1100  0DCD                     	;# 
  1101  0DCE                     	;# 
  1102  0DCF                     	;# 
  1103  0DD0                     	;# 
  1104  0E0F                     	;# 
  1105  0E10                     	;# 
  1106  0E11                     	;# 
  1107  0E12                     	;# 
  1108  0E13                     	;# 
  1109  0E14                     	;# 
  1110  0E15                     	;# 
  1111  0E16                     	;# 
  1112  0E17                     	;# 
  1113  0E90                     	;# 
  1114  0E91                     	;# 
  1115  0E92                     	;# 
  1116  0E94                     	;# 
  1117  0E95                     	;# 
  1118  0EA0                     	;# 
  1119  0EA1                     	;# 
  1120  0EA2                     	;# 
  1121  0EA3                     	;# 
  1122  0EA4                     	;# 
  1123  0EA5                     	;# 
  1124  0FE4                     	;# 
  1125  0FE5                     	;# 
  1126  0FE6                     	;# 
  1127  0FE7                     	;# 
  1128  0FE8                     	;# 
  1129  0FE8                     	;# 
  1130  0FE9                     	;# 
  1131  0FEA                     	;# 
  1132  0FEA                     	;# 
  1133  0FEB                     	;# 
  1134  0FED                     	;# 
  1135  0FEE                     	;# 
  1136  0FEE                     	;# 
  1137  0FEF                     	;# 
  1138  0FFF                     	;# 
  1139  0000                     	;# 
  1140  0001                     	;# 
  1141  0002                     	;# 
  1142  0003                     	;# 
  1143  0004                     	;# 
  1144  0005                     	;# 
  1145  0006                     	;# 
  1146  0007                     	;# 
  1147  0008                     	;# 
  1148  0009                     	;# 
  1149  000A                     	;# 
  1150  000B                     	;# 
  1151  000C                     	;# 
  1152  000E                     	;# 
  1153  0011                     	;# 
  1154  0012                     	;# 
  1155  0013                     	;# 
  1156  0015                     	;# 
  1157  0016                     	;# 
  1158  0016                     	;# 
  1159  0017                     	;# 
  1160  0018                     	;# 
  1161  0019                     	;# 
  1162  001A                     	;# 
  1163  001B                     	;# 
  1164  001C                     	;# 
  1165  008C                     	;# 
  1166  008E                     	;# 
  1167  0091                     	;# 
  1168  0092                     	;# 
  1169  0093                     	;# 
  1170  0095                     	;# 
  1171  0096                     	;# 
  1172  0097                     	;# 
  1173  0098                     	;# 
  1174  0099                     	;# 
  1175  009A                     	;# 
  1176  009B                     	;# 
  1177  009B                     	;# 
  1178  009C                     	;# 
  1179  009D                     	;# 
  1180  009E                     	;# 
  1181  009F                     	;# 
  1182  010C                     	;# 
  1183  010E                     	;# 
  1184  0111                     	;# 
  1185  0112                     	;# 
  1186  0113                     	;# 
  1187  0114                     	;# 
  1188  0115                     	;# 
  1189  0116                     	;# 
  1190  0117                     	;# 
  1191  0118                     	;# 
  1192  0119                     	;# 
  1193  018C                     	;# 
  1194  018E                     	;# 
  1195  0191                     	;# 
  1196  0191                     	;# 
  1197  0192                     	;# 
  1198  0193                     	;# 
  1199  0193                     	;# 
  1200  0194                     	;# 
  1201  0195                     	;# 
  1202  0196                     	;# 
  1203  0197                     	;# 
  1204  0199                     	;# 
  1205  019A                     	;# 
  1206  019B                     	;# 
  1207  019B                     	;# 
  1208  019C                     	;# 
  1209  019D                     	;# 
  1210  019E                     	;# 
  1211  019F                     	;# 
  1212  020C                     	;# 
  1213  020E                     	;# 
  1214  028C                     	;# 
  1215  028E                     	;# 
  1216  030C                     	;# 
  1217  030E                     	;# 
  1218  038C                     	;# 
  1219  038E                     	;# 
  1220  0391                     	;# 
  1221  0392                     	;# 
  1222  0393                     	;# 
  1223  0397                     	;# 
  1224  0398                     	;# 
  1225  0399                     	;# 
  1226  0691                     	;# 
  1227  0692                     	;# 
  1228  0693                     	;# 
  1229  0694                     	;# 
  1230  0695                     	;# 
  1231  0D8E                     	;# 
  1232  0D8F                     	;# 
  1233  0D90                     	;# 
  1234  0D91                     	;# 
  1235  0D91                     	;# 
  1236  0D92                     	;# 
  1237  0D93                     	;# 
  1238  0D93                     	;# 
  1239  0D94                     	;# 
  1240  0D95                     	;# 
  1241  0D95                     	;# 
  1242  0D96                     	;# 
  1243  0D97                     	;# 
  1244  0D97                     	;# 
  1245  0D98                     	;# 
  1246  0D99                     	;# 
  1247  0D99                     	;# 
  1248  0D9A                     	;# 
  1249  0D9B                     	;# 
  1250  0D9C                     	;# 
  1251  0D9C                     	;# 
  1252  0D9D                     	;# 
  1253  0D9D                     	;# 
  1254  0D9E                     	;# 
  1255  0D9F                     	;# 
  1256  0DA0                     	;# 
  1257  0DA1                     	;# 
  1258  0DA1                     	;# 
  1259  0DA2                     	;# 
  1260  0DA3                     	;# 
  1261  0DA3                     	;# 
  1262  0DA4                     	;# 
  1263  0DA5                     	;# 
  1264  0DA5                     	;# 
  1265  0DA6                     	;# 
  1266  0DA7                     	;# 
  1267  0DA7                     	;# 
  1268  0DA8                     	;# 
  1269  0DA9                     	;# 
  1270  0DA9                     	;# 
  1271  0DAA                     	;# 
  1272  0DAB                     	;# 
  1273  0DAC                     	;# 
  1274  0DAC                     	;# 
  1275  0DAD                     	;# 
  1276  0DAD                     	;# 
  1277  0DAE                     	;# 
  1278  0DAF                     	;# 
  1279  0DB0                     	;# 
  1280  0DB1                     	;# 
  1281  0DB1                     	;# 
  1282  0DB2                     	;# 
  1283  0DB3                     	;# 
  1284  0DB3                     	;# 
  1285  0DB4                     	;# 
  1286  0DB5                     	;# 
  1287  0DB5                     	;# 
  1288  0DB6                     	;# 
  1289  0DB7                     	;# 
  1290  0DB7                     	;# 
  1291  0DB8                     	;# 
  1292  0DB9                     	;# 
  1293  0DB9                     	;# 
  1294  0DBA                     	;# 
  1295  0DBB                     	;# 
  1296  0DBC                     	;# 
  1297  0DBC                     	;# 
  1298  0DBD                     	;# 
  1299  0DBD                     	;# 
  1300  0DBE                     	;# 
  1301  0DBF                     	;# 
  1302  0DC0                     	;# 
  1303  0DC1                     	;# 
  1304  0DC1                     	;# 
  1305  0DC2                     	;# 
  1306  0DC3                     	;# 
  1307  0DC3                     	;# 
  1308  0DC4                     	;# 
  1309  0DC5                     	;# 
  1310  0DC5                     	;# 
  1311  0DC6                     	;# 
  1312  0DC7                     	;# 
  1313  0DC7                     	;# 
  1314  0DC8                     	;# 
  1315  0DC9                     	;# 
  1316  0DC9                     	;# 
  1317  0DCA                     	;# 
  1318  0DCB                     	;# 
  1319  0DCC                     	;# 
  1320  0DCC                     	;# 
  1321  0DCD                     	;# 
  1322  0DCD                     	;# 
  1323  0DCE                     	;# 
  1324  0DCF                     	;# 
  1325  0DD0                     	;# 
  1326  0E0F                     	;# 
  1327  0E10                     	;# 
  1328  0E11                     	;# 
  1329  0E12                     	;# 
  1330  0E13                     	;# 
  1331  0E14                     	;# 
  1332  0E15                     	;# 
  1333  0E16                     	;# 
  1334  0E17                     	;# 
  1335  0E90                     	;# 
  1336  0E91                     	;# 
  1337  0E92                     	;# 
  1338  0E94                     	;# 
  1339  0E95                     	;# 
  1340  0EA0                     	;# 
  1341  0EA1                     	;# 
  1342  0EA2                     	;# 
  1343  0EA3                     	;# 
  1344  0EA4                     	;# 
  1345  0EA5                     	;# 
  1346  0FE4                     	;# 
  1347  0FE5                     	;# 
  1348  0FE6                     	;# 
  1349  0FE7                     	;# 
  1350  0FE8                     	;# 
  1351  0FE8                     	;# 
  1352  0FE9                     	;# 
  1353  0FEA                     	;# 
  1354  0FEA                     	;# 
  1355  0FEB                     	;# 
  1356  0FED                     	;# 
  1357  0FEE                     	;# 
  1358  0FEE                     	;# 
  1359  0FEF                     	;# 
  1360  0000                     	;# 
  1361  0001                     	;# 
  1362  0002                     	;# 
  1363  0003                     	;# 
  1364  0004                     	;# 
  1365  0005                     	;# 
  1366  0006                     	;# 
  1367  0007                     	;# 
  1368  0008                     	;# 
  1369  0009                     	;# 
  1370  000A                     	;# 
  1371  000B                     	;# 
  1372  000C                     	;# 
  1373  000E                     	;# 
  1374  0011                     	;# 
  1375  0012                     	;# 
  1376  0013                     	;# 
  1377  0015                     	;# 
  1378  0016                     	;# 
  1379  0016                     	;# 
  1380  0017                     	;# 
  1381  0018                     	;# 
  1382  0019                     	;# 
  1383  001A                     	;# 
  1384  001B                     	;# 
  1385  001C                     	;# 
  1386  008C                     	;# 
  1387  008E                     	;# 
  1388  0091                     	;# 
  1389  0092                     	;# 
  1390  0093                     	;# 
  1391  0095                     	;# 
  1392  0096                     	;# 
  1393  0097                     	;# 
  1394  0098                     	;# 
  1395  0099                     	;# 
  1396  009A                     	;# 
  1397  009B                     	;# 
  1398  009B                     	;# 
  1399  009C                     	;# 
  1400  009D                     	;# 
  1401  009E                     	;# 
  1402  009F                     	;# 
  1403  010C                     	;# 
  1404  010E                     	;# 
  1405  0111                     	;# 
  1406  0112                     	;# 
  1407  0113                     	;# 
  1408  0114                     	;# 
  1409  0115                     	;# 
  1410  0116                     	;# 
  1411  0117                     	;# 
  1412  0118                     	;# 
  1413  0119                     	;# 
  1414  018C                     	;# 
  1415  018E                     	;# 
  1416  0191                     	;# 
  1417  0191                     	;# 
  1418  0192                     	;# 
  1419  0193                     	;# 
  1420  0193                     	;# 
  1421  0194                     	;# 
  1422  0195                     	;# 
  1423  0196                     	;# 
  1424  0197                     	;# 
  1425  0199                     	;# 
  1426  019A                     	;# 
  1427  019B                     	;# 
  1428  019B                     	;# 
  1429  019C                     	;# 
  1430  019D                     	;# 
  1431  019E                     	;# 
  1432  019F                     	;# 
  1433  020C                     	;# 
  1434  020E                     	;# 
  1435  028C                     	;# 
  1436  028E                     	;# 
  1437  030C                     	;# 
  1438  030E                     	;# 
  1439  038C                     	;# 
  1440  038E                     	;# 
  1441  0391                     	;# 
  1442  0392                     	;# 
  1443  0393                     	;# 
  1444  0397                     	;# 
  1445  0398                     	;# 
  1446  0399                     	;# 
  1447  0691                     	;# 
  1448  0692                     	;# 
  1449  0693                     	;# 
  1450  0694                     	;# 
  1451  0695                     	;# 
  1452  0D8E                     	;# 
  1453  0D8F                     	;# 
  1454  0D90                     	;# 
  1455  0D91                     	;# 
  1456  0D91                     	;# 
  1457  0D92                     	;# 
  1458  0D93                     	;# 
  1459  0D93                     	;# 
  1460  0D94                     	;# 
  1461  0D95                     	;# 
  1462  0D95                     	;# 
  1463  0D96                     	;# 
  1464  0D97                     	;# 
  1465  0D97                     	;# 
  1466  0D98                     	;# 
  1467  0D99                     	;# 
  1468  0D99                     	;# 
  1469  0D9A                     	;# 
  1470  0D9B                     	;# 
  1471  0D9C                     	;# 
  1472  0D9C                     	;# 
  1473  0D9D                     	;# 
  1474  0D9D                     	;# 
  1475  0D9E                     	;# 
  1476  0D9F                     	;# 
  1477  0DA0                     	;# 
  1478  0DA1                     	;# 
  1479  0DA1                     	;# 
  1480  0DA2                     	;# 
  1481  0DA3                     	;# 
  1482  0DA3                     	;# 
  1483  0DA4                     	;# 
  1484  0DA5                     	;# 
  1485  0DA5                     	;# 
  1486  0DA6                     	;# 
  1487  0DA7                     	;# 
  1488  0DA7                     	;# 
  1489  0DA8                     	;# 
  1490  0DA9                     	;# 
  1491  0DA9                     	;# 
  1492  0DAA                     	;# 
  1493  0DAB                     	;# 
  1494  0DAC                     	;# 
  1495  0DAC                     	;# 
  1496  0DAD                     	;# 
  1497  0DAD                     	;# 
  1498  0DAE                     	;# 
  1499  0DAF                     	;# 
  1500  0DB0                     	;# 
  1501  0DB1                     	;# 
  1502  0DB1                     	;# 
  1503  0DB2                     	;# 
  1504  0DB3                     	;# 
  1505  0DB3                     	;# 
  1506  0DB4                     	;# 
  1507  0DB5                     	;# 
  1508  0DB5                     	;# 
  1509  0DB6                     	;# 
  1510  0DB7                     	;# 
  1511  0DB7                     	;# 
  1512  0DB8                     	;# 
  1513  0DB9                     	;# 
  1514  0DB9                     	;# 
  1515  0DBA                     	;# 
  1516  0DBB                     	;# 
  1517  0DBC                     	;# 
  1518  0DBC                     	;# 
  1519  0DBD                     	;# 
  1520  0DBD                     	;# 
  1521  0DBE                     	;# 
  1522  0DBF                     	;# 
  1523  0DC0                     	;# 
  1524  0DC1                     	;# 
  1525  0DC1                     	;# 
  1526  0DC2                     	;# 
  1527  0DC3                     	;# 
  1528  0DC3                     	;# 
  1529  0DC4                     	;# 
  1530  0DC5                     	;# 
  1531  0DC5                     	;# 
  1532  0DC6                     	;# 
  1533  0DC7                     	;# 
  1534  0DC7                     	;# 
  1535  0DC8                     	;# 
  1536  0DC9                     	;# 
  1537  0DC9                     	;# 
  1538  0DCA                     	;# 
  1539  0DCB                     	;# 
  1540  0DCC                     	;# 
  1541  0DCC                     	;# 
  1542  0DCD                     	;# 
  1543  0DCD                     	;# 
  1544  0DCE                     	;# 
  1545  0DCF                     	;# 
  1546  0DD0                     	;# 
  1547  0E0F                     	;# 
  1548  0E10                     	;# 
  1549  0E11                     	;# 
  1550  0E12                     	;# 
  1551  0E13                     	;# 
  1552  0E14                     	;# 
  1553  0E15                     	;# 
  1554  0E16                     	;# 
  1555  0E17                     	;# 
  1556  0E90                     	;# 
  1557  0E91                     	;# 
  1558  0E92                     	;# 
  1559  0E94                     	;# 
  1560  0E95                     	;# 
  1561  0EA0                     	;# 
  1562  0EA1                     	;# 
  1563  0EA2                     	;# 
  1564  0EA3                     	;# 
  1565  0EA4                     	;# 
  1566  0EA5                     	;# 
  1567  0FE4                     	;# 
  1568  0FE5                     	;# 
  1569  0FE6                     	;# 
  1570  0FE7                     	;# 
  1571  0FE8                     	;# 
  1572  0FE8                     	;# 
  1573  0FE9                     	;# 
  1574  0FEA                     	;# 
  1575  0FEA                     	;# 
  1576  0FEB                     	;# 
  1577  0FED                     	;# 
  1578  0FEE                     	;# 
  1579  0FEE                     	;# 
  1580  0FEF                     	;# 
  1581  0000                     	;# 
  1582  0001                     	;# 
  1583  0002                     	;# 
  1584  0003                     	;# 
  1585  0004                     	;# 
  1586  0005                     	;# 
  1587  0006                     	;# 
  1588  0007                     	;# 
  1589  0008                     	;# 
  1590  0009                     	;# 
  1591  000A                     	;# 
  1592  000B                     	;# 
  1593  000C                     	;# 
  1594  000E                     	;# 
  1595  0011                     	;# 
  1596  0012                     	;# 
  1597  0013                     	;# 
  1598  0015                     	;# 
  1599  0016                     	;# 
  1600  0016                     	;# 
  1601  0017                     	;# 
  1602  0018                     	;# 
  1603  0019                     	;# 
  1604  001A                     	;# 
  1605  001B                     	;# 
  1606  001C                     	;# 
  1607  008C                     	;# 
  1608  008E                     	;# 
  1609  0091                     	;# 
  1610  0092                     	;# 
  1611  0093                     	;# 
  1612  0095                     	;# 
  1613  0096                     	;# 
  1614  0097                     	;# 
  1615  0098                     	;# 
  1616  0099                     	;# 
  1617  009A                     	;# 
  1618  009B                     	;# 
  1619  009B                     	;# 
  1620  009C                     	;# 
  1621  009D                     	;# 
  1622  009E                     	;# 
  1623  009F                     	;# 
  1624  010C                     	;# 
  1625  010E                     	;# 
  1626  0111                     	;# 
  1627  0112                     	;# 
  1628  0113                     	;# 
  1629  0114                     	;# 
  1630  0115                     	;# 
  1631  0116                     	;# 
  1632  0117                     	;# 
  1633  0118                     	;# 
  1634  0119                     	;# 
  1635  018C                     	;# 
  1636  018E                     	;# 
  1637  0191                     	;# 
  1638  0191                     	;# 
  1639  0192                     	;# 
  1640  0193                     	;# 
  1641  0193                     	;# 
  1642  0194                     	;# 
  1643  0195                     	;# 
  1644  0196                     	;# 
  1645  0197                     	;# 
  1646  0199                     	;# 
  1647  019A                     	;# 
  1648  019B                     	;# 
  1649  019B                     	;# 
  1650  019C                     	;# 
  1651  019D                     	;# 
  1652  019E                     	;# 
  1653  019F                     	;# 
  1654  020C                     	;# 
  1655  020E                     	;# 
  1656  028C                     	;# 
  1657  028E                     	;# 
  1658  030C                     	;# 
  1659  030E                     	;# 
  1660  038C                     	;# 
  1661  038E                     	;# 
  1662  0391                     	;# 
  1663  0392                     	;# 
  1664  0393                     	;# 
  1665  0397                     	;# 
  1666  0398                     	;# 
  1667  0399                     	;# 
  1668  0691                     	;# 
  1669  0692                     	;# 
  1670  0693                     	;# 
  1671  0694                     	;# 
  1672  0695                     	;# 
  1673  0D8E                     	;# 
  1674  0D8F                     	;# 
  1675  0D90                     	;# 
  1676  0D91                     	;# 
  1677  0D91                     	;# 
  1678  0D92                     	;# 
  1679  0D93                     	;# 
  1680  0D93                     	;# 
  1681  0D94                     	;# 
  1682  0D95                     	;# 
  1683  0D95                     	;# 
  1684  0D96                     	;# 
  1685  0D97                     	;# 
  1686  0D97                     	;# 
  1687  0D98                     	;# 
  1688  0D99                     	;# 
  1689  0D99                     	;# 
  1690  0D9A                     	;# 
  1691  0D9B                     	;# 
  1692  0D9C                     	;# 
  1693  0D9C                     	;# 
  1694  0D9D                     	;# 
  1695  0D9D                     	;# 
  1696  0D9E                     	;# 
  1697  0D9F                     	;# 
  1698  0DA0                     	;# 
  1699  0DA1                     	;# 
  1700  0DA1                     	;# 
  1701  0DA2                     	;# 
  1702  0DA3                     	;# 
  1703  0DA3                     	;# 
  1704  0DA4                     	;# 
  1705  0DA5                     	;# 
  1706  0DA5                     	;# 
  1707  0DA6                     	;# 
  1708  0DA7                     	;# 
  1709  0DA7                     	;# 
  1710  0DA8                     	;# 
  1711  0DA9                     	;# 
  1712  0DA9                     	;# 
  1713  0DAA                     	;# 
  1714  0DAB                     	;# 
  1715  0DAC                     	;# 
  1716  0DAC                     	;# 
  1717  0DAD                     	;# 
  1718  0DAD                     	;# 
  1719  0DAE                     	;# 
  1720  0DAF                     	;# 
  1721  0DB0                     	;# 
  1722  0DB1                     	;# 
  1723  0DB1                     	;# 
  1724  0DB2                     	;# 
  1725  0DB3                     	;# 
  1726  0DB3                     	;# 
  1727  0DB4                     	;# 
  1728  0DB5                     	;# 
  1729  0DB5                     	;# 
  1730  0DB6                     	;# 
  1731  0DB7                     	;# 
  1732  0DB7                     	;# 
  1733  0DB8                     	;# 
  1734  0DB9                     	;# 
  1735  0DB9                     	;# 
  1736  0DBA                     	;# 
  1737  0DBB                     	;# 
  1738  0DBC                     	;# 
  1739  0DBC                     	;# 
  1740  0DBD                     	;# 
  1741  0DBD                     	;# 
  1742  0DBE                     	;# 
  1743  0DBF                     	;# 
  1744  0DC0                     	;# 
  1745  0DC1                     	;# 
  1746  0DC1                     	;# 
  1747  0DC2                     	;# 
  1748  0DC3                     	;# 
  1749  0DC3                     	;# 
  1750  0DC4                     	;# 
  1751  0DC5                     	;# 
  1752  0DC5                     	;# 
  1753  0DC6                     	;# 
  1754  0DC7                     	;# 
  1755  0DC7                     	;# 
  1756  0DC8                     	;# 
  1757  0DC9                     	;# 
  1758  0DC9                     	;# 
  1759  0DCA                     	;# 
  1760  0DCB                     	;# 
  1761  0DCC                     	;# 
  1762  0DCC                     	;# 
  1763  0DCD                     	;# 
  1764  0DCD                     	;# 
  1765  0DCE                     	;# 
  1766  0DCF                     	;# 
  1767  0DD0                     	;# 
  1768  0E0F                     	;# 
  1769  0E10                     	;# 
  1770  0E11                     	;# 
  1771  0E12                     	;# 
  1772  0E13                     	;# 
  1773  0E14                     	;# 
  1774  0E15                     	;# 
  1775  0E16                     	;# 
  1776  0E17                     	;# 
  1777  0E90                     	;# 
  1778  0E91                     	;# 
  1779  0E92                     	;# 
  1780  0E94                     	;# 
  1781  0E95                     	;# 
  1782  0EA0                     	;# 
  1783  0EA1                     	;# 
  1784  0EA2                     	;# 
  1785  0EA3                     	;# 
  1786  0EA4                     	;# 
  1787  0EA5                     	;# 
  1788  0FE4                     	;# 
  1789  0FE5                     	;# 
  1790  0FE6                     	;# 
  1791  0FE7                     	;# 
  1792  0FE8                     	;# 
  1793  0FE8                     	;# 
  1794  0FE9                     	;# 
  1795  0FEA                     	;# 
  1796  0FEA                     	;# 
  1797  0FEB                     	;# 
  1798  0FED                     	;# 
  1799  0FEE                     	;# 
  1800  0FEE                     	;# 
  1801  0FEF                     	;# 
  1802  0000                     	;# 
  1803  0001                     	;# 
  1804  0002                     	;# 
  1805  0003                     	;# 
  1806  0004                     	;# 
  1807  0005                     	;# 
  1808  0006                     	;# 
  1809  0007                     	;# 
  1810  0008                     	;# 
  1811  0009                     	;# 
  1812  000A                     	;# 
  1813  000B                     	;# 
  1814  000C                     	;# 
  1815  000E                     	;# 
  1816  0011                     	;# 
  1817  0012                     	;# 
  1818  0013                     	;# 
  1819  0015                     	;# 
  1820  0016                     	;# 
  1821  0016                     	;# 
  1822  0017                     	;# 
  1823  0018                     	;# 
  1824  0019                     	;# 
  1825  001A                     	;# 
  1826  001B                     	;# 
  1827  001C                     	;# 
  1828  008C                     	;# 
  1829  008E                     	;# 
  1830  0091                     	;# 
  1831  0092                     	;# 
  1832  0093                     	;# 
  1833  0095                     	;# 
  1834  0096                     	;# 
  1835  0097                     	;# 
  1836  0098                     	;# 
  1837  0099                     	;# 
  1838  009A                     	;# 
  1839  009B                     	;# 
  1840  009B                     	;# 
  1841  009C                     	;# 
  1842  009D                     	;# 
  1843  009E                     	;# 
  1844  009F                     	;# 
  1845  010C                     	;# 
  1846  010E                     	;# 
  1847  0111                     	;# 
  1848  0112                     	;# 
  1849  0113                     	;# 
  1850  0114                     	;# 
  1851  0115                     	;# 
  1852  0116                     	;# 
  1853  0117                     	;# 
  1854  0118                     	;# 
  1855  0119                     	;# 
  1856  018C                     	;# 
  1857  018E                     	;# 
  1858  0191                     	;# 
  1859  0191                     	;# 
  1860  0192                     	;# 
  1861  0193                     	;# 
  1862  0193                     	;# 
  1863  0194                     	;# 
  1864  0195                     	;# 
  1865  0196                     	;# 
  1866  0197                     	;# 
  1867  0199                     	;# 
  1868  019A                     	;# 
  1869  019B                     	;# 
  1870  019B                     	;# 
  1871  019C                     	;# 
  1872  019D                     	;# 
  1873  019E                     	;# 
  1874  019F                     	;# 
  1875  020C                     	;# 
  1876  020E                     	;# 
  1877  028C                     	;# 
  1878  028E                     	;# 
  1879  030C                     	;# 
  1880  030E                     	;# 
  1881  038C                     	;# 
  1882  038E                     	;# 
  1883  0391                     	;# 
  1884  0392                     	;# 
  1885  0393                     	;# 
  1886  0397                     	;# 
  1887  0398                     	;# 
  1888  0399                     	;# 
  1889  0691                     	;# 
  1890  0692                     	;# 
  1891  0693                     	;# 
  1892  0694                     	;# 
  1893  0695                     	;# 
  1894  0D8E                     	;# 
  1895  0D8F                     	;# 
  1896  0D90                     	;# 
  1897  0D91                     	;# 
  1898  0D91                     	;# 
  1899  0D92                     	;# 
  1900  0D93                     	;# 
  1901  0D93                     	;# 
  1902  0D94                     	;# 
  1903  0D95                     	;# 
  1904  0D95                     	;# 
  1905  0D96                     	;# 
  1906  0D97                     	;# 
  1907  0D97                     	;# 
  1908  0D98                     	;# 
  1909  0D99                     	;# 
  1910  0D99                     	;# 
  1911  0D9A                     	;# 
  1912  0D9B                     	;# 
  1913  0D9C                     	;# 
  1914  0D9C                     	;# 
  1915  0D9D                     	;# 
  1916  0D9D                     	;# 
  1917  0D9E                     	;# 
  1918  0D9F                     	;# 
  1919  0DA0                     	;# 
  1920  0DA1                     	;# 
  1921  0DA1                     	;# 
  1922  0DA2                     	;# 
  1923  0DA3                     	;# 
  1924  0DA3                     	;# 
  1925  0DA4                     	;# 
  1926  0DA5                     	;# 
  1927  0DA5                     	;# 
  1928  0DA6                     	;# 
  1929  0DA7                     	;# 
  1930  0DA7                     	;# 
  1931  0DA8                     	;# 
  1932  0DA9                     	;# 
  1933  0DA9                     	;# 
  1934  0DAA                     	;# 
  1935  0DAB                     	;# 
  1936  0DAC                     	;# 
  1937  0DAC                     	;# 
  1938  0DAD                     	;# 
  1939  0DAD                     	;# 
  1940  0DAE                     	;# 
  1941  0DAF                     	;# 
  1942  0DB0                     	;# 
  1943  0DB1                     	;# 
  1944  0DB1                     	;# 
  1945  0DB2                     	;# 
  1946  0DB3                     	;# 
  1947  0DB3                     	;# 
  1948  0DB4                     	;# 
  1949  0DB5                     	;# 
  1950  0DB5                     	;# 
  1951  0DB6                     	;# 
  1952  0DB7                     	;# 
  1953  0DB7                     	;# 
  1954  0DB8                     	;# 
  1955  0DB9                     	;# 
  1956  0DB9                     	;# 
  1957  0DBA                     	;# 
  1958  0DBB                     	;# 
  1959  0DBC                     	;# 
  1960  0DBC                     	;# 
  1961  0DBD                     	;# 
  1962  0DBD                     	;# 
  1963  0DBE                     	;# 
  1964  0DBF                     	;# 
  1965  0DC0                     	;# 
  1966  0DC1                     	;# 
  1967  0DC1                     	;# 
  1968  0DC2                     	;# 
  1969  0DC3                     	;# 
  1970  0DC3                     	;# 
  1971  0DC4                     	;# 
  1972  0DC5                     	;# 
  1973  0DC5                     	;# 
  1974  0DC6                     	;# 
  1975  0DC7                     	;# 
  1976  0DC7                     	;# 
  1977  0DC8                     	;# 
  1978  0DC9                     	;# 
  1979  0DC9                     	;# 
  1980  0DCA                     	;# 
  1981  0DCB                     	;# 
  1982  0DCC                     	;# 
  1983  0DCC                     	;# 
  1984  0DCD                     	;# 
  1985  0DCD                     	;# 
  1986  0DCE                     	;# 
  1987  0DCF                     	;# 
  1988  0DD0                     	;# 
  1989  0E0F                     	;# 
  1990  0E10                     	;# 
  1991  0E11                     	;# 
  1992  0E12                     	;# 
  1993  0E13                     	;# 
  1994  0E14                     	;# 
  1995  0E15                     	;# 
  1996  0E16                     	;# 
  1997  0E17                     	;# 
  1998  0E90                     	;# 
  1999  0E91                     	;# 
  2000  0E92                     	;# 
  2001  0E94                     	;# 
  2002  0E95                     	;# 
  2003  0EA0                     	;# 
  2004  0EA1                     	;# 
  2005  0EA2                     	;# 
  2006  0EA3                     	;# 
  2007  0EA4                     	;# 
  2008  0EA5                     	;# 
  2009  0FE4                     	;# 
  2010  0FE5                     	;# 
  2011  0FE6                     	;# 
  2012  0FE7                     	;# 
  2013  0FE8                     	;# 
  2014  0FE8                     	;# 
  2015  0FE9                     	;# 
  2016  0FEA                     	;# 
  2017  0FEA                     	;# 
  2018  0FEB                     	;# 
  2019  0FED                     	;# 
  2020  0FEE                     	;# 
  2021  0FEE                     	;# 
  2022  0FEF                     	;# 
  2023  0000                     	;# 
  2024  0001                     	;# 
  2025  0002                     	;# 
  2026  0003                     	;# 
  2027  0004                     	;# 
  2028  0005                     	;# 
  2029  0006                     	;# 
  2030  0007                     	;# 
  2031  0008                     	;# 
  2032  0009                     	;# 
  2033  000A                     	;# 
  2034  000B                     	;# 
  2035  000C                     	;# 
  2036  000E                     	;# 
  2037  0011                     	;# 
  2038  0012                     	;# 
  2039  0013                     	;# 
  2040  0015                     	;# 
  2041  0016                     	;# 
  2042  0016                     	;# 
  2043  0017                     	;# 
  2044  0018                     	;# 
  2045  0019                     	;# 
  2046  001A                     	;# 
  2047  001B                     	;# 
  2048  001C                     	;# 
  2049  008C                     	;# 
  2050  008E                     	;# 
  2051  0091                     	;# 
  2052  0092                     	;# 
  2053  0093                     	;# 
  2054  0095                     	;# 
  2055  0096                     	;# 
  2056  0097                     	;# 
  2057  0098                     	;# 
  2058  0099                     	;# 
  2059  009A                     	;# 
  2060  009B                     	;# 
  2061  009B                     	;# 
  2062  009C                     	;# 
  2063  009D                     	;# 
  2064  009E                     	;# 
  2065  009F                     	;# 
  2066  010C                     	;# 
  2067  010E                     	;# 
  2068  0111                     	;# 
  2069  0112                     	;# 
  2070  0113                     	;# 
  2071  0114                     	;# 
  2072  0115                     	;# 
  2073  0116                     	;# 
  2074  0117                     	;# 
  2075  0118                     	;# 
  2076  0119                     	;# 
  2077  018C                     	;# 
  2078  018E                     	;# 
  2079  0191                     	;# 
  2080  0191                     	;# 
  2081  0192                     	;# 
  2082  0193                     	;# 
  2083  0193                     	;# 
  2084  0194                     	;# 
  2085  0195                     	;# 
  2086  0196                     	;# 
  2087  0197                     	;# 
  2088  0199                     	;# 
  2089  019A                     	;# 
  2090  019B                     	;# 
  2091  019B                     	;# 
  2092  019C                     	;# 
  2093  019D                     	;# 
  2094  019E                     	;# 
  2095  019F                     	;# 
  2096  020C                     	;# 
  2097  020E                     	;# 
  2098  028C                     	;# 
  2099  028E                     	;# 
  2100  030C                     	;# 
  2101  030E                     	;# 
  2102  038C                     	;# 
  2103  038E                     	;# 
  2104  0391                     	;# 
  2105  0392                     	;# 
  2106  0393                     	;# 
  2107  0397                     	;# 
  2108  0398                     	;# 
  2109  0399                     	;# 
  2110  0691                     	;# 
  2111  0692                     	;# 
  2112  0693                     	;# 
  2113  0694                     	;# 
  2114  0695                     	;# 
  2115  0D8E                     	;# 
  2116  0D8F                     	;# 
  2117  0D90                     	;# 
  2118  0D91                     	;# 
  2119  0D91                     	;# 
  2120  0D92                     	;# 
  2121  0D93                     	;# 
  2122  0D93                     	;# 
  2123  0D94                     	;# 
  2124  0D95                     	;# 
  2125  0D95                     	;# 
  2126  0D96                     	;# 
  2127  0D97                     	;# 
  2128  0D97                     	;# 
  2129  0D98                     	;# 
  2130  0D99                     	;# 
  2131  0D99                     	;# 
  2132  0D9A                     	;# 
  2133  0D9B                     	;# 
  2134  0D9C                     	;# 
  2135  0D9C                     	;# 
  2136  0D9D                     	;# 
  2137  0D9D                     	;# 
  2138  0D9E                     	;# 
  2139  0D9F                     	;# 
  2140  0DA0                     	;# 
  2141  0DA1                     	;# 
  2142  0DA1                     	;# 
  2143  0DA2                     	;# 
  2144  0DA3                     	;# 
  2145  0DA3                     	;# 
  2146  0DA4                     	;# 
  2147  0DA5                     	;# 
  2148  0DA5                     	;# 
  2149  0DA6                     	;# 
  2150  0DA7                     	;# 
  2151  0DA7                     	;# 
  2152  0DA8                     	;# 
  2153  0DA9                     	;# 
  2154  0DA9                     	;# 
  2155  0DAA                     	;# 
  2156  0DAB                     	;# 
  2157  0DAC                     	;# 
  2158  0DAC                     	;# 
  2159  0DAD                     	;# 
  2160  0DAD                     	;# 
  2161  0DAE                     	;# 
  2162  0DAF                     	;# 
  2163  0DB0                     	;# 
  2164  0DB1                     	;# 
  2165  0DB1                     	;# 
  2166  0DB2                     	;# 
  2167  0DB3                     	;# 
  2168  0DB3                     	;# 
  2169  0DB4                     	;# 
  2170  0DB5                     	;# 
  2171  0DB5                     	;# 
  2172  0DB6                     	;# 
  2173  0DB7                     	;# 
  2174  0DB7                     	;# 
  2175  0DB8                     	;# 
  2176  0DB9                     	;# 
  2177  0DB9                     	;# 
  2178  0DBA                     	;# 
  2179  0DBB                     	;# 
  2180  0DBC                     	;# 
  2181  0DBC                     	;# 
  2182  0DBD                     	;# 
  2183  0DBD                     	;# 
  2184  0DBE                     	;# 
  2185  0DBF                     	;# 
  2186  0DC0                     	;# 
  2187  0DC1                     	;# 
  2188  0DC1                     	;# 
  2189  0DC2                     	;# 
  2190  0DC3                     	;# 
  2191  0DC3                     	;# 
  2192  0DC4                     	;# 
  2193  0DC5                     	;# 
  2194  0DC5                     	;# 
  2195  0DC6                     	;# 
  2196  0DC7                     	;# 
  2197  0DC7                     	;# 
  2198  0DC8                     	;# 
  2199  0DC9                     	;# 
  2200  0DC9                     	;# 
  2201  0DCA                     	;# 
  2202  0DCB                     	;# 
  2203  0DCC                     	;# 
  2204  0DCC                     	;# 
  2205  0DCD                     	;# 
  2206  0DCD                     	;# 
  2207  0DCE                     	;# 
  2208  0DCF                     	;# 
  2209  0DD0                     	;# 
  2210  0E0F                     	;# 
  2211  0E10                     	;# 
  2212  0E11                     	;# 
  2213  0E12                     	;# 
  2214  0E13                     	;# 
  2215  0E14                     	;# 
  2216  0E15                     	;# 
  2217  0E16                     	;# 
  2218  0E17                     	;# 
  2219  0E90                     	;# 
  2220  0E91                     	;# 
  2221  0E92                     	;# 
  2222  0E94                     	;# 
  2223  0E95                     	;# 
  2224  0EA0                     	;# 
  2225  0EA1                     	;# 
  2226  0EA2                     	;# 
  2227  0EA3                     	;# 
  2228  0EA4                     	;# 
  2229  0EA5                     	;# 
  2230  0FE4                     	;# 
  2231  0FE5                     	;# 
  2232  0FE6                     	;# 
  2233  0FE7                     	;# 
  2234  0FE8                     	;# 
  2235  0FE8                     	;# 
  2236  0FE9                     	;# 
  2237  0FEA                     	;# 
  2238  0FEA                     	;# 
  2239  0FEB                     	;# 
  2240  0FED                     	;# 
  2241  0FEE                     	;# 
  2242  0FEE                     	;# 
  2243  0FEF                     	;# 
  2244  0000                     	;# 
  2245  0001                     	;# 
  2246  0002                     	;# 
  2247  0003                     	;# 
  2248  0004                     	;# 
  2249  0005                     	;# 
  2250  0006                     	;# 
  2251  0007                     	;# 
  2252  0008                     	;# 
  2253  0009                     	;# 
  2254  000A                     	;# 
  2255  000B                     	;# 
  2256  000C                     	;# 
  2257  000E                     	;# 
  2258  0011                     	;# 
  2259  0012                     	;# 
  2260  0013                     	;# 
  2261  0015                     	;# 
  2262  0016                     	;# 
  2263  0016                     	;# 
  2264  0017                     	;# 
  2265  0018                     	;# 
  2266  0019                     	;# 
  2267  001A                     	;# 
  2268  001B                     	;# 
  2269  001C                     	;# 
  2270  008C                     	;# 
  2271  008E                     	;# 
  2272  0091                     	;# 
  2273  0092                     	;# 
  2274  0093                     	;# 
  2275  0095                     	;# 
  2276  0096                     	;# 
  2277  0097                     	;# 
  2278  0098                     	;# 
  2279  0099                     	;# 
  2280  009A                     	;# 
  2281  009B                     	;# 
  2282  009B                     	;# 
  2283  009C                     	;# 
  2284  009D                     	;# 
  2285  009E                     	;# 
  2286  009F                     	;# 
  2287  010C                     	;# 
  2288  010E                     	;# 
  2289  0111                     	;# 
  2290  0112                     	;# 
  2291  0113                     	;# 
  2292  0114                     	;# 
  2293  0115                     	;# 
  2294  0116                     	;# 
  2295  0117                     	;# 
  2296  0118                     	;# 
  2297  0119                     	;# 
  2298  018C                     	;# 
  2299  018E                     	;# 
  2300  0191                     	;# 
  2301  0191                     	;# 
  2302  0192                     	;# 
  2303  0193                     	;# 
  2304  0193                     	;# 
  2305  0194                     	;# 
  2306  0195                     	;# 
  2307  0196                     	;# 
  2308  0197                     	;# 
  2309  0199                     	;# 
  2310  019A                     	;# 
  2311  019B                     	;# 
  2312  019B                     	;# 
  2313  019C                     	;# 
  2314  019D                     	;# 
  2315  019E                     	;# 
  2316  019F                     	;# 
  2317  020C                     	;# 
  2318  020E                     	;# 
  2319  028C                     	;# 
  2320  028E                     	;# 
  2321  030C                     	;# 
  2322  030E                     	;# 
  2323  038C                     	;# 
  2324  038E                     	;# 
  2325  0391                     	;# 
  2326  0392                     	;# 
  2327  0393                     	;# 
  2328  0397                     	;# 
  2329  0398                     	;# 
  2330  0399                     	;# 
  2331  0691                     	;# 
  2332  0692                     	;# 
  2333  0693                     	;# 
  2334  0694                     	;# 
  2335  0695                     	;# 
  2336  0D8E                     	;# 
  2337  0D8F                     	;# 
  2338  0D90                     	;# 
  2339  0D91                     	;# 
  2340  0D91                     	;# 
  2341  0D92                     	;# 
  2342  0D93                     	;# 
  2343  0D93                     	;# 
  2344  0D94                     	;# 
  2345  0D95                     	;# 
  2346  0D95                     	;# 
  2347  0D96                     	;# 
  2348  0D97                     	;# 
  2349  0D97                     	;# 
  2350  0D98                     	;# 
  2351  0D99                     	;# 
  2352  0D99                     	;# 
  2353  0D9A                     	;# 
  2354  0D9B                     	;# 
  2355  0D9C                     	;# 
  2356  0D9C                     	;# 
  2357  0D9D                     	;# 
  2358  0D9D                     	;# 
  2359  0D9E                     	;# 
  2360  0D9F                     	;# 
  2361  0DA0                     	;# 
  2362  0DA1                     	;# 
  2363  0DA1                     	;# 
  2364  0DA2                     	;# 
  2365  0DA3                     	;# 
  2366  0DA3                     	;# 
  2367  0DA4                     	;# 
  2368  0DA5                     	;# 
  2369  0DA5                     	;# 
  2370  0DA6                     	;# 
  2371  0DA7                     	;# 
  2372  0DA7                     	;# 
  2373  0DA8                     	;# 
  2374  0DA9                     	;# 
  2375  0DA9                     	;# 
  2376  0DAA                     	;# 
  2377  0DAB                     	;# 
  2378  0DAC                     	;# 
  2379  0DAC                     	;# 
  2380  0DAD                     	;# 
  2381  0DAD                     	;# 
  2382  0DAE                     	;# 
  2383  0DAF                     	;# 
  2384  0DB0                     	;# 
  2385  0DB1                     	;# 
  2386  0DB1                     	;# 
  2387  0DB2                     	;# 
  2388  0DB3                     	;# 
  2389  0DB3                     	;# 
  2390  0DB4                     	;# 
  2391  0DB5                     	;# 
  2392  0DB5                     	;# 
  2393  0DB6                     	;# 
  2394  0DB7                     	;# 
  2395  0DB7                     	;# 
  2396  0DB8                     	;# 
  2397  0DB9                     	;# 
  2398  0DB9                     	;# 
  2399  0DBA                     	;# 
  2400  0DBB                     	;# 
  2401  0DBC                     	;# 
  2402  0DBC                     	;# 
  2403  0DBD                     	;# 
  2404  0DBD                     	;# 
  2405  0DBE                     	;# 
  2406  0DBF                     	;# 
  2407  0DC0                     	;# 
  2408  0DC1                     	;# 
  2409  0DC1                     	;# 
  2410  0DC2                     	;# 
  2411  0DC3                     	;# 
  2412  0DC3                     	;# 
  2413  0DC4                     	;# 
  2414  0DC5                     	;# 
  2415  0DC5                     	;# 
  2416  0DC6                     	;# 
  2417  0DC7                     	;# 
  2418  0DC7                     	;# 
  2419  0DC8                     	;# 
  2420  0DC9                     	;# 
  2421  0DC9                     	;# 
  2422  0DCA                     	;# 
  2423  0DCB                     	;# 
  2424  0DCC                     	;# 
  2425  0DCC                     	;# 
  2426  0DCD                     	;# 
  2427  0DCD                     	;# 
  2428  0DCE                     	;# 
  2429  0DCF                     	;# 
  2430  0DD0                     	;# 
  2431  0E0F                     	;# 
  2432  0E10                     	;# 
  2433  0E11                     	;# 
  2434  0E12                     	;# 
  2435  0E13                     	;# 
  2436  0E14                     	;# 
  2437  0E15                     	;# 
  2438  0E16                     	;# 
  2439  0E17                     	;# 
  2440  0E90                     	;# 
  2441  0E91                     	;# 
  2442  0E92                     	;# 
  2443  0E94                     	;# 
  2444  0E95                     	;# 
  2445  0EA0                     	;# 
  2446  0EA1                     	;# 
  2447  0EA2                     	;# 
  2448  0EA3                     	;# 
  2449  0EA4                     	;# 
  2450  0EA5                     	;# 
  2451  0FE4                     	;# 
  2452  0FE5                     	;# 
  2453  0FE6                     	;# 
  2454  0FE7                     	;# 
  2455  0FE8                     	;# 
  2456  0FE8                     	;# 
  2457  0FE9                     	;# 
  2458  0FEA                     	;# 
  2459  0FEA                     	;# 
  2460  0FEB                     	;# 
  2461  0FED                     	;# 
  2462  0FEE                     	;# 
  2463  0FEE                     	;# 
  2464  0FEF                     	;# 
  2465  0FFF                     	;# 
  2466  0000                     	;# 
  2467  0001                     	;# 
  2468  0002                     	;# 
  2469  0003                     	;# 
  2470  0004                     	;# 
  2471  0005                     	;# 
  2472  0006                     	;# 
  2473  0007                     	;# 
  2474  0008                     	;# 
  2475  0009                     	;# 
  2476  000A                     	;# 
  2477  000B                     	;# 
  2478  000C                     	;# 
  2479  000E                     	;# 
  2480  0011                     	;# 
  2481  0012                     	;# 
  2482  0013                     	;# 
  2483  0015                     	;# 
  2484  0016                     	;# 
  2485  0016                     	;# 
  2486  0017                     	;# 
  2487  0018                     	;# 
  2488  0019                     	;# 
  2489  001A                     	;# 
  2490  001B                     	;# 
  2491  001C                     	;# 
  2492  008C                     	;# 
  2493  008E                     	;# 
  2494  0091                     	;# 
  2495  0092                     	;# 
  2496  0093                     	;# 
  2497  0095                     	;# 
  2498  0096                     	;# 
  2499  0097                     	;# 
  2500  0098                     	;# 
  2501  0099                     	;# 
  2502  009A                     	;# 
  2503  009B                     	;# 
  2504  009B                     	;# 
  2505  009C                     	;# 
  2506  009D                     	;# 
  2507  009E                     	;# 
  2508  009F                     	;# 
  2509  010C                     	;# 
  2510  010E                     	;# 
  2511  0111                     	;# 
  2512  0112                     	;# 
  2513  0113                     	;# 
  2514  0114                     	;# 
  2515  0115                     	;# 
  2516  0116                     	;# 
  2517  0117                     	;# 
  2518  0118                     	;# 
  2519  0119                     	;# 
  2520  018C                     	;# 
  2521  018E                     	;# 
  2522  0191                     	;# 
  2523  0191                     	;# 
  2524  0192                     	;# 
  2525  0193                     	;# 
  2526  0193                     	;# 
  2527  0194                     	;# 
  2528  0195                     	;# 
  2529  0196                     	;# 
  2530  0197                     	;# 
  2531  0199                     	;# 
  2532  019A                     	;# 
  2533  019B                     	;# 
  2534  019B                     	;# 
  2535  019C                     	;# 
  2536  019D                     	;# 
  2537  019E                     	;# 
  2538  019F                     	;# 
  2539  020C                     	;# 
  2540  020E                     	;# 
  2541  028C                     	;# 
  2542  028E                     	;# 
  2543  030C                     	;# 
  2544  030E                     	;# 
  2545  038C                     	;# 
  2546  038E                     	;# 
  2547  0391                     	;# 
  2548  0392                     	;# 
  2549  0393                     	;# 
  2550  0397                     	;# 
  2551  0398                     	;# 
  2552  0399                     	;# 
  2553  0691                     	;# 
  2554  0692                     	;# 
  2555  0693                     	;# 
  2556  0694                     	;# 
  2557  0695                     	;# 
  2558  0D8E                     	;# 
  2559  0D8F                     	;# 
  2560  0D90                     	;# 
  2561  0D91                     	;# 
  2562  0D91                     	;# 
  2563  0D92                     	;# 
  2564  0D93                     	;# 
  2565  0D93                     	;# 
  2566  0D94                     	;# 
  2567  0D95                     	;# 
  2568  0D95                     	;# 
  2569  0D96                     	;# 
  2570  0D97                     	;# 
  2571  0D97                     	;# 
  2572  0D98                     	;# 
  2573  0D99                     	;# 
  2574  0D99                     	;# 
  2575  0D9A                     	;# 
  2576  0D9B                     	;# 
  2577  0D9C                     	;# 
  2578  0D9C                     	;# 
  2579  0D9D                     	;# 
  2580  0D9D                     	;# 
  2581  0D9E                     	;# 
  2582  0D9F                     	;# 
  2583  0DA0                     	;# 
  2584  0DA1                     	;# 
  2585  0DA1                     	;# 
  2586  0DA2                     	;# 
  2587  0DA3                     	;# 
  2588  0DA3                     	;# 
  2589  0DA4                     	;# 
  2590  0DA5                     	;# 
  2591  0DA5                     	;# 
  2592  0DA6                     	;# 
  2593  0DA7                     	;# 
  2594  0DA7                     	;# 
  2595  0DA8                     	;# 
  2596  0DA9                     	;# 
  2597  0DA9                     	;# 
  2598  0DAA                     	;# 
  2599  0DAB                     	;# 
  2600  0DAC                     	;# 
  2601  0DAC                     	;# 
  2602  0DAD                     	;# 
  2603  0DAD                     	;# 
  2604  0DAE                     	;# 
  2605  0DAF                     	;# 
  2606  0DB0                     	;# 
  2607  0DB1                     	;# 
  2608  0DB1                     	;# 
  2609  0DB2                     	;# 
  2610  0DB3                     	;# 
  2611  0DB3                     	;# 
  2612  0DB4                     	;# 
  2613  0DB5                     	;# 
  2614  0DB5                     	;# 
  2615  0DB6                     	;# 
  2616  0DB7                     	;# 
  2617  0DB7                     	;# 
  2618  0DB8                     	;# 
  2619  0DB9                     	;# 
  2620  0DB9                     	;# 
  2621  0DBA                     	;# 
  2622  0DBB                     	;# 
  2623  0DBC                     	;# 
  2624  0DBC                     	;# 
  2625  0DBD                     	;# 
  2626  0DBD                     	;# 
  2627  0DBE                     	;# 
  2628  0DBF                     	;# 
  2629  0DC0                     	;# 
  2630  0DC1                     	;# 
  2631  0DC1                     	;# 
  2632  0DC2                     	;# 
  2633  0DC3                     	;# 
  2634  0DC3                     	;# 
  2635  0DC4                     	;# 
  2636  0DC5                     	;# 
  2637  0DC5                     	;# 
  2638  0DC6                     	;# 
  2639  0DC7                     	;# 
  2640  0DC7                     	;# 
  2641  0DC8                     	;# 
  2642  0DC9                     	;# 
  2643  0DC9                     	;# 
  2644  0DCA                     	;# 
  2645  0DCB                     	;# 
  2646  0DCC                     	;# 
  2647  0DCC                     	;# 
  2648  0DCD                     	;# 
  2649  0DCD                     	;# 
  2650  0DCE                     	;# 
  2651  0DCF                     	;# 
  2652  0DD0                     	;# 
  2653  0E0F                     	;# 
  2654  0E10                     	;# 
  2655  0E11                     	;# 
  2656  0E12                     	;# 
  2657  0E13                     	;# 
  2658  0E14                     	;# 
  2659  0E15                     	;# 
  2660  0E16                     	;# 
  2661  0E17                     	;# 
  2662  0E90                     	;# 
  2663  0E91                     	;# 
  2664  0E92                     	;# 
  2665  0E94                     	;# 
  2666  0E95                     	;# 
  2667  0EA0                     	;# 
  2668  0EA1                     	;# 
  2669  0EA2                     	;# 
  2670  0EA3                     	;# 
  2671  0EA4                     	;# 
  2672  0EA5                     	;# 
  2673  0FE4                     	;# 
  2674  0FE5                     	;# 
  2675  0FE6                     	;# 
  2676  0FE7                     	;# 
  2677  0FE8                     	;# 
  2678  0FE8                     	;# 
  2679  0FE9                     	;# 
  2680  0FEA                     	;# 
  2681  0FEA                     	;# 
  2682  0FEB                     	;# 
  2683  0FED                     	;# 
  2684  0FEE                     	;# 
  2685  0FEE                     	;# 
  2686  0FEF                     	;# 
  2687  0FFF                     	;# 
  2688  0000                     	;# 
  2689  0001                     	;# 
  2690  0002                     	;# 
  2691  0003                     	;# 
  2692  0004                     	;# 
  2693  0005                     	;# 
  2694  0006                     	;# 
  2695  0007                     	;# 
  2696  0008                     	;# 
  2697  0009                     	;# 
  2698  000A                     	;# 
  2699  000B                     	;# 
  2700  000C                     	;# 
  2701  000E                     	;# 
  2702  0011                     	;# 
  2703  0012                     	;# 
  2704  0013                     	;# 
  2705  0015                     	;# 
  2706  0016                     	;# 
  2707  0016                     	;# 
  2708  0017                     	;# 
  2709  0018                     	;# 
  2710  0019                     	;# 
  2711  001A                     	;# 
  2712  001B                     	;# 
  2713  001C                     	;# 
  2714  008C                     	;# 
  2715  008E                     	;# 
  2716  0091                     	;# 
  2717  0092                     	;# 
  2718  0093                     	;# 
  2719  0095                     	;# 
  2720  0096                     	;# 
  2721  0097                     	;# 
  2722  0098                     	;# 
  2723  0099                     	;# 
  2724  009A                     	;# 
  2725  009B                     	;# 
  2726  009B                     	;# 
  2727  009C                     	;# 
  2728  009D                     	;# 
  2729  009E                     	;# 
  2730  009F                     	;# 
  2731  010C                     	;# 
  2732  010E                     	;# 
  2733  0111                     	;# 
  2734  0112                     	;# 
  2735  0113                     	;# 
  2736  0114                     	;# 
  2737  0115                     	;# 
  2738  0116                     	;# 
  2739  0117                     	;# 
  2740  0118                     	;# 
  2741  0119                     	;# 
  2742  018C                     	;# 
  2743  018E                     	;# 
  2744  0191                     	;# 
  2745  0191                     	;# 
  2746  0192                     	;# 
  2747  0193                     	;# 
  2748  0193                     	;# 
  2749  0194                     	;# 
  2750  0195                     	;# 
  2751  0196                     	;# 
  2752  0197                     	;# 
  2753  0199                     	;# 
  2754  019A                     	;# 
  2755  019B                     	;# 
  2756  019B                     	;# 
  2757  019C                     	;# 
  2758  019D                     	;# 
  2759  019E                     	;# 
  2760  019F                     	;# 
  2761  020C                     	;# 
  2762  020E                     	;# 
  2763  028C                     	;# 
  2764  028E                     	;# 
  2765  030C                     	;# 
  2766  030E                     	;# 
  2767  038C                     	;# 
  2768  038E                     	;# 
  2769  0391                     	;# 
  2770  0392                     	;# 
  2771  0393                     	;# 
  2772  0397                     	;# 
  2773  0398                     	;# 
  2774  0399                     	;# 
  2775  0691                     	;# 
  2776  0692                     	;# 
  2777  0693                     	;# 
  2778  0694                     	;# 
  2779  0695                     	;# 
  2780  0D8E                     	;# 
  2781  0D8F                     	;# 
  2782  0D90                     	;# 
  2783  0D91                     	;# 
  2784  0D91                     	;# 
  2785  0D92                     	;# 
  2786  0D93                     	;# 
  2787  0D93                     	;# 
  2788  0D94                     	;# 
  2789  0D95                     	;# 
  2790  0D95                     	;# 
  2791  0D96                     	;# 
  2792  0D97                     	;# 
  2793  0D97                     	;# 
  2794  0D98                     	;# 
  2795  0D99                     	;# 
  2796  0D99                     	;# 
  2797  0D9A                     	;# 
  2798  0D9B                     	;# 
  2799  0D9C                     	;# 
  2800  0D9C                     	;# 
  2801  0D9D                     	;# 
  2802  0D9D                     	;# 
  2803  0D9E                     	;# 
  2804  0D9F                     	;# 
  2805  0DA0                     	;# 
  2806  0DA1                     	;# 
  2807  0DA1                     	;# 
  2808  0DA2                     	;# 
  2809  0DA3                     	;# 
  2810  0DA3                     	;# 
  2811  0DA4                     	;# 
  2812  0DA5                     	;# 
  2813  0DA5                     	;# 
  2814  0DA6                     	;# 
  2815  0DA7                     	;# 
  2816  0DA7                     	;# 
  2817  0DA8                     	;# 
  2818  0DA9                     	;# 
  2819  0DA9                     	;# 
  2820  0DAA                     	;# 
  2821  0DAB                     	;# 
  2822  0DAC                     	;# 
  2823  0DAC                     	;# 
  2824  0DAD                     	;# 
  2825  0DAD                     	;# 
  2826  0DAE                     	;# 
  2827  0DAF                     	;# 
  2828  0DB0                     	;# 
  2829  0DB1                     	;# 
  2830  0DB1                     	;# 
  2831  0DB2                     	;# 
  2832  0DB3                     	;# 
  2833  0DB3                     	;# 
  2834  0DB4                     	;# 
  2835  0DB5                     	;# 
  2836  0DB5                     	;# 
  2837  0DB6                     	;# 
  2838  0DB7                     	;# 
  2839  0DB7                     	;# 
  2840  0DB8                     	;# 
  2841  0DB9                     	;# 
  2842  0DB9                     	;# 
  2843  0DBA                     	;# 
  2844  0DBB                     	;# 
  2845  0DBC                     	;# 
  2846  0DBC                     	;# 
  2847  0DBD                     	;# 
  2848  0DBD                     	;# 
  2849  0DBE                     	;# 
  2850  0DBF                     	;# 
  2851  0DC0                     	;# 
  2852  0DC1                     	;# 
  2853  0DC1                     	;# 
  2854  0DC2                     	;# 
  2855  0DC3                     	;# 
  2856  0DC3                     	;# 
  2857  0DC4                     	;# 
  2858  0DC5                     	;# 
  2859  0DC5                     	;# 
  2860  0DC6                     	;# 
  2861  0DC7                     	;# 
  2862  0DC7                     	;# 
  2863  0DC8                     	;# 
  2864  0DC9                     	;# 
  2865  0DC9                     	;# 
  2866  0DCA                     	;# 
  2867  0DCB                     	;# 
  2868  0DCC                     	;# 
  2869  0DCC                     	;# 
  2870  0DCD                     	;# 
  2871  0DCD                     	;# 
  2872  0DCE                     	;# 
  2873  0DCF                     	;# 
  2874  0DD0                     	;# 
  2875  0E0F                     	;# 
  2876  0E10                     	;# 
  2877  0E11                     	;# 
  2878  0E12                     	;# 
  2879  0E13                     	;# 
  2880  0E14                     	;# 
  2881  0E15                     	;# 
  2882  0E16                     	;# 
  2883  0E17                     	;# 
  2884  0E90                     	;# 
  2885  0E91                     	;# 
  2886  0E92                     	;# 
  2887  0E94                     	;# 
  2888  0E95                     	;# 
  2889  0EA0                     	;# 
  2890  0EA1                     	;# 
  2891  0EA2                     	;# 
  2892  0EA3                     	;# 
  2893  0EA4                     	;# 
  2894  0EA5                     	;# 
  2895  0FE4                     	;# 
  2896  0FE5                     	;# 
  2897  0FE6                     	;# 
  2898  0FE7                     	;# 
  2899  0FE8                     	;# 
  2900  0FE8                     	;# 
  2901  0FE9                     	;# 
  2902  0FEA                     	;# 
  2903  0FEA                     	;# 
  2904  0FEB                     	;# 
  2905  0FED                     	;# 
  2906  0FEE                     	;# 
  2907  0FEE                     	;# 
  2908  0FEF                     	;# 
  2909  0FFF                     	;# 
  2910  0000                     	;# 
  2911  0001                     	;# 
  2912  0002                     	;# 
  2913  0003                     	;# 
  2914  0004                     	;# 
  2915  0005                     	;# 
  2916  0006                     	;# 
  2917  0007                     	;# 
  2918  0008                     	;# 
  2919  0009                     	;# 
  2920  000A                     	;# 
  2921  000B                     	;# 
  2922  000C                     	;# 
  2923  000E                     	;# 
  2924  0011                     	;# 
  2925  0012                     	;# 
  2926  0013                     	;# 
  2927  0015                     	;# 
  2928  0016                     	;# 
  2929  0016                     	;# 
  2930  0017                     	;# 
  2931  0018                     	;# 
  2932  0019                     	;# 
  2933  001A                     	;# 
  2934  001B                     	;# 
  2935  001C                     	;# 
  2936  008C                     	;# 
  2937  008E                     	;# 
  2938  0091                     	;# 
  2939  0092                     	;# 
  2940  0093                     	;# 
  2941  0095                     	;# 
  2942  0096                     	;# 
  2943  0097                     	;# 
  2944  0098                     	;# 
  2945  0099                     	;# 
  2946  009A                     	;# 
  2947  009B                     	;# 
  2948  009B                     	;# 
  2949  009C                     	;# 
  2950  009D                     	;# 
  2951  009E                     	;# 
  2952  009F                     	;# 
  2953  010C                     	;# 
  2954  010E                     	;# 
  2955  0111                     	;# 
  2956  0112                     	;# 
  2957  0113                     	;# 
  2958  0114                     	;# 
  2959  0115                     	;# 
  2960  0116                     	;# 
  2961  0117                     	;# 
  2962  0118                     	;# 
  2963  0119                     	;# 
  2964  018C                     	;# 
  2965  018E                     	;# 
  2966  0191                     	;# 
  2967  0191                     	;# 
  2968  0192                     	;# 
  2969  0193                     	;# 
  2970  0193                     	;# 
  2971  0194                     	;# 
  2972  0195                     	;# 
  2973  0196                     	;# 
  2974  0197                     	;# 
  2975  0199                     	;# 
  2976  019A                     	;# 
  2977  019B                     	;# 
  2978  019B                     	;# 
  2979  019C                     	;# 
  2980  019D                     	;# 
  2981  019E                     	;# 
  2982  019F                     	;# 
  2983  020C                     	;# 
  2984  020E                     	;# 
  2985  028C                     	;# 
  2986  028E                     	;# 
  2987  030C                     	;# 
  2988  030E                     	;# 
  2989  038C                     	;# 
  2990  038E                     	;# 
  2991  0391                     	;# 
  2992  0392                     	;# 
  2993  0393                     	;# 
  2994  0397                     	;# 
  2995  0398                     	;# 
  2996  0399                     	;# 
  2997  0691                     	;# 
  2998  0692                     	;# 
  2999  0693                     	;# 
  3000  0694                     	;# 
  3001  0695                     	;# 
  3002  0D8E                     	;# 
  3003  0D8F                     	;# 
  3004  0D90                     	;# 
  3005  0D91                     	;# 
  3006  0D91                     	;# 
  3007  0D92                     	;# 
  3008  0D93                     	;# 
  3009  0D93                     	;# 
  3010  0D94                     	;# 
  3011  0D95                     	;# 
  3012  0D95                     	;# 
  3013  0D96                     	;# 
  3014  0D97                     	;# 
  3015  0D97                     	;# 
  3016  0D98                     	;# 
  3017  0D99                     	;# 
  3018  0D99                     	;# 
  3019  0D9A                     	;# 
  3020  0D9B                     	;# 
  3021  0D9C                     	;# 
  3022  0D9C                     	;# 
  3023  0D9D                     	;# 
  3024  0D9D                     	;# 
  3025  0D9E                     	;# 
  3026  0D9F                     	;# 
  3027  0DA0                     	;# 
  3028  0DA1                     	;# 
  3029  0DA1                     	;# 
  3030  0DA2                     	;# 
  3031  0DA3                     	;# 
  3032  0DA3                     	;# 
  3033  0DA4                     	;# 
  3034  0DA5                     	;# 
  3035  0DA5                     	;# 
  3036  0DA6                     	;# 
  3037  0DA7                     	;# 
  3038  0DA7                     	;# 
  3039  0DA8                     	;# 
  3040  0DA9                     	;# 
  3041  0DA9                     	;# 
  3042  0DAA                     	;# 
  3043  0DAB                     	;# 
  3044  0DAC                     	;# 
  3045  0DAC                     	;# 
  3046  0DAD                     	;# 
  3047  0DAD                     	;# 
  3048  0DAE                     	;# 
  3049  0DAF                     	;# 
  3050  0DB0                     	;# 
  3051  0DB1                     	;# 
  3052  0DB1                     	;# 
  3053  0DB2                     	;# 
  3054  0DB3                     	;# 
  3055  0DB3                     	;# 
  3056  0DB4                     	;# 
  3057  0DB5                     	;# 
  3058  0DB5                     	;# 
  3059  0DB6                     	;# 
  3060  0DB7                     	;# 
  3061  0DB7                     	;# 
  3062  0DB8                     	;# 
  3063  0DB9                     	;# 
  3064  0DB9                     	;# 
  3065  0DBA                     	;# 
  3066  0DBB                     	;# 
  3067  0DBC                     	;# 
  3068  0DBC                     	;# 
  3069  0DBD                     	;# 
  3070  0DBD                     	;# 
  3071  0DBE                     	;# 
  3072  0DBF                     	;# 
  3073  0DC0                     	;# 
  3074  0DC1                     	;# 
  3075  0DC1                     	;# 
  3076  0DC2                     	;# 
  3077  0DC3                     	;# 
  3078  0DC3                     	;# 
  3079  0DC4                     	;# 
  3080  0DC5                     	;# 
  3081  0DC5                     	;# 
  3082  0DC6                     	;# 
  3083  0DC7                     	;# 
  3084  0DC7                     	;# 
  3085  0DC8                     	;# 
  3086  0DC9                     	;# 
  3087  0DC9                     	;# 
  3088  0DCA                     	;# 
  3089  0DCB                     	;# 
  3090  0DCC                     	;# 
  3091  0DCC                     	;# 
  3092  0DCD                     	;# 
  3093  0DCD                     	;# 
  3094  0DCE                     	;# 
  3095  0DCF                     	;# 
  3096  0DD0                     	;# 
  3097  0E0F                     	;# 
  3098  0E10                     	;# 
  3099  0E11                     	;# 
  3100  0E12                     	;# 
  3101  0E13                     	;# 
  3102  0E14                     	;# 
  3103  0E15                     	;# 
  3104  0E16                     	;# 
  3105  0E17                     	;# 
  3106  0E90                     	;# 
  3107  0E91                     	;# 
  3108  0E92                     	;# 
  3109  0E94                     	;# 
  3110  0E95                     	;# 
  3111  0EA0                     	;# 
  3112  0EA1                     	;# 
  3113  0EA2                     	;# 
  3114  0EA3                     	;# 
  3115  0EA4                     	;# 
  3116  0EA5                     	;# 
  3117  0FE4                     	;# 
  3118  0FE5                     	;# 
  3119  0FE6                     	;# 
  3120  0FE7                     	;# 
  3121  0FE8                     	;# 
  3122  0FE8                     	;# 
  3123  0FE9                     	;# 
  3124  0FEA                     	;# 
  3125  0FEA                     	;# 
  3126  0FEB                     	;# 
  3127  0FED                     	;# 
  3128  0FEE                     	;# 
  3129  0FEE                     	;# 
  3130  0FEF                     	;# 
  3131  0FFF                     	;# 
  3132  0000                     	;# 
  3133  0001                     	;# 
  3134  0002                     	;# 
  3135  0003                     	;# 
  3136  0004                     	;# 
  3137  0005                     	;# 
  3138  0006                     	;# 
  3139  0007                     	;# 
  3140  0008                     	;# 
  3141  0009                     	;# 
  3142  000A                     	;# 
  3143  000B                     	;# 
  3144  000C                     	;# 
  3145  000E                     	;# 
  3146  0011                     	;# 
  3147  0012                     	;# 
  3148  0013                     	;# 
  3149  0015                     	;# 
  3150  0016                     	;# 
  3151  0016                     	;# 
  3152  0017                     	;# 
  3153  0018                     	;# 
  3154  0019                     	;# 
  3155  001A                     	;# 
  3156  001B                     	;# 
  3157  001C                     	;# 
  3158  008C                     	;# 
  3159  008E                     	;# 
  3160  0091                     	;# 
  3161  0092                     	;# 
  3162  0093                     	;# 
  3163  0095                     	;# 
  3164  0096                     	;# 
  3165  0097                     	;# 
  3166  0098                     	;# 
  3167  0099                     	;# 
  3168  009A                     	;# 
  3169  009B                     	;# 
  3170  009B                     	;# 
  3171  009C                     	;# 
  3172  009D                     	;# 
  3173  009E                     	;# 
  3174  009F                     	;# 
  3175  010C                     	;# 
  3176  010E                     	;# 
  3177  0111                     	;# 
  3178  0112                     	;# 
  3179  0113                     	;# 
  3180  0114                     	;# 
  3181  0115                     	;# 
  3182  0116                     	;# 
  3183  0117                     	;# 
  3184  0118                     	;# 
  3185  0119                     	;# 
  3186  018C                     	;# 
  3187  018E                     	;# 
  3188  0191                     	;# 
  3189  0191                     	;# 
  3190  0192                     	;# 
  3191  0193                     	;# 
  3192  0193                     	;# 
  3193  0194                     	;# 
  3194  0195                     	;# 
  3195  0196                     	;# 
  3196  0197                     	;# 
  3197  0199                     	;# 
  3198  019A                     	;# 
  3199  019B                     	;# 
  3200  019B                     	;# 
  3201  019C                     	;# 
  3202  019D                     	;# 
  3203  019E                     	;# 
  3204  019F                     	;# 
  3205  020C                     	;# 
  3206  020E                     	;# 
  3207  028C                     	;# 
  3208  028E                     	;# 
  3209  030C                     	;# 
  3210  030E                     	;# 
  3211  038C                     	;# 
  3212  038E                     	;# 
  3213  0391                     	;# 
  3214  0392                     	;# 
  3215  0393                     	;# 
  3216  0397                     	;# 
  3217  0398                     	;# 
  3218  0399                     	;# 
  3219  0691                     	;# 
  3220  0692                     	;# 
  3221  0693                     	;# 
  3222  0694                     	;# 
  3223  0695                     	;# 
  3224  0D8E                     	;# 
  3225  0D8F                     	;# 
  3226  0D90                     	;# 
  3227  0D91                     	;# 
  3228  0D91                     	;# 
  3229  0D92                     	;# 
  3230  0D93                     	;# 
  3231  0D93                     	;# 
  3232  0D94                     	;# 
  3233  0D95                     	;# 
  3234  0D95                     	;# 
  3235  0D96                     	;# 
  3236  0D97                     	;# 
  3237  0D97                     	;# 
  3238  0D98                     	;# 
  3239  0D99                     	;# 
  3240  0D99                     	;# 
  3241  0D9A                     	;# 
  3242  0D9B                     	;# 
  3243  0D9C                     	;# 
  3244  0D9C                     	;# 
  3245  0D9D                     	;# 
  3246  0D9D                     	;# 
  3247  0D9E                     	;# 
  3248  0D9F                     	;# 
  3249  0DA0                     	;# 
  3250  0DA1                     	;# 
  3251  0DA1                     	;# 
  3252  0DA2                     	;# 
  3253  0DA3                     	;# 
  3254  0DA3                     	;# 
  3255  0DA4                     	;# 
  3256  0DA5                     	;# 
  3257  0DA5                     	;# 
  3258  0DA6                     	;# 
  3259  0DA7                     	;# 
  3260  0DA7                     	;# 
  3261  0DA8                     	;# 
  3262  0DA9                     	;# 
  3263  0DA9                     	;# 
  3264  0DAA                     	;# 
  3265  0DAB                     	;# 
  3266  0DAC                     	;# 
  3267  0DAC                     	;# 
  3268  0DAD                     	;# 
  3269  0DAD                     	;# 
  3270  0DAE                     	;# 
  3271  0DAF                     	;# 
  3272  0DB0                     	;# 
  3273  0DB1                     	;# 
  3274  0DB1                     	;# 
  3275  0DB2                     	;# 
  3276  0DB3                     	;# 
  3277  0DB3                     	;# 
  3278  0DB4                     	;# 
  3279  0DB5                     	;# 
  3280  0DB5                     	;# 
  3281  0DB6                     	;# 
  3282  0DB7                     	;# 
  3283  0DB7                     	;# 
  3284  0DB8                     	;# 
  3285  0DB9                     	;# 
  3286  0DB9                     	;# 
  3287  0DBA                     	;# 
  3288  0DBB                     	;# 
  3289  0DBC                     	;# 
  3290  0DBC                     	;# 
  3291  0DBD                     	;# 
  3292  0DBD                     	;# 
  3293  0DBE                     	;# 
  3294  0DBF                     	;# 
  3295  0DC0                     	;# 
  3296  0DC1                     	;# 
  3297  0DC1                     	;# 
  3298  0DC2                     	;# 
  3299  0DC3                     	;# 
  3300  0DC3                     	;# 
  3301  0DC4                     	;# 
  3302  0DC5                     	;# 
  3303  0DC5                     	;# 
  3304  0DC6                     	;# 
  3305  0DC7                     	;# 
  3306  0DC7                     	;# 
  3307  0DC8                     	;# 
  3308  0DC9                     	;# 
  3309  0DC9                     	;# 
  3310  0DCA                     	;# 
  3311  0DCB                     	;# 
  3312  0DCC                     	;# 
  3313  0DCC                     	;# 
  3314  0DCD                     	;# 
  3315  0DCD                     	;# 
  3316  0DCE                     	;# 
  3317  0DCF                     	;# 
  3318  0DD0                     	;# 
  3319  0E0F                     	;# 
  3320  0E10                     	;# 
  3321  0E11                     	;# 
  3322  0E12                     	;# 
  3323  0E13                     	;# 
  3324  0E14                     	;# 
  3325  0E15                     	;# 
  3326  0E16                     	;# 
  3327  0E17                     	;# 
  3328  0E90                     	;# 
  3329  0E91                     	;# 
  3330  0E92                     	;# 
  3331  0E94                     	;# 
  3332  0E95                     	;# 
  3333  0EA0                     	;# 
  3334  0EA1                     	;# 
  3335  0EA2                     	;# 
  3336  0EA3                     	;# 
  3337  0EA4                     	;# 
  3338  0EA5                     	;# 
  3339  0FE4                     	;# 
  3340  0FE5                     	;# 
  3341  0FE6                     	;# 
  3342  0FE7                     	;# 
  3343  0FE8                     	;# 
  3344  0FE8                     	;# 
  3345  0FE9                     	;# 
  3346  0FEA                     	;# 
  3347  0FEA                     	;# 
  3348  0FEB                     	;# 
  3349  0FED                     	;# 
  3350  0FEE                     	;# 
  3351  0FEE                     	;# 
  3352  0FEF                     	;# 
  3353  0FFF                     	;# 
  3354  0000                     	;# 
  3355  0001                     	;# 
  3356  0002                     	;# 
  3357  0003                     	;# 
  3358  0004                     	;# 
  3359  0005                     	;# 
  3360  0006                     	;# 
  3361  0007                     	;# 
  3362  0008                     	;# 
  3363  0009                     	;# 
  3364  000A                     	;# 
  3365  000B                     	;# 
  3366  000C                     	;# 
  3367  000E                     	;# 
  3368  0011                     	;# 
  3369  0012                     	;# 
  3370  0013                     	;# 
  3371  0015                     	;# 
  3372  0016                     	;# 
  3373  0016                     	;# 
  3374  0017                     	;# 
  3375  0018                     	;# 
  3376  0019                     	;# 
  3377  001A                     	;# 
  3378  001B                     	;# 
  3379  001C                     	;# 
  3380  008C                     	;# 
  3381  008E                     	;# 
  3382  0091                     	;# 
  3383  0092                     	;# 
  3384  0093                     	;# 
  3385  0095                     	;# 
  3386  0096                     	;# 
  3387  0097                     	;# 
  3388  0098                     	;# 
  3389  0099                     	;# 
  3390  009A                     	;# 
  3391  009B                     	;# 
  3392  009B                     	;# 
  3393  009C                     	;# 
  3394  009D                     	;# 
  3395  009E                     	;# 
  3396  009F                     	;# 
  3397  010C                     	;# 
  3398  010E                     	;# 
  3399  0111                     	;# 
  3400  0112                     	;# 
  3401  0113                     	;# 
  3402  0114                     	;# 
  3403  0115                     	;# 
  3404  0116                     	;# 
  3405  0117                     	;# 
  3406  0118                     	;# 
  3407  0119                     	;# 
  3408  018C                     	;# 
  3409  018E                     	;# 
  3410  0191                     	;# 
  3411  0191                     	;# 
  3412  0192                     	;# 
  3413  0193                     	;# 
  3414  0193                     	;# 
  3415  0194                     	;# 
  3416  0195                     	;# 
  3417  0196                     	;# 
  3418  0197                     	;# 
  3419  0199                     	;# 
  3420  019A                     	;# 
  3421  019B                     	;# 
  3422  019B                     	;# 
  3423  019C                     	;# 
  3424  019D                     	;# 
  3425  019E                     	;# 
  3426  019F                     	;# 
  3427  020C                     	;# 
  3428  020E                     	;# 
  3429  028C                     	;# 
  3430  028E                     	;# 
  3431  030C                     	;# 
  3432  030E                     	;# 
  3433  038C                     	;# 
  3434  038E                     	;# 
  3435  0391                     	;# 
  3436  0392                     	;# 
  3437  0393                     	;# 
  3438  0397                     	;# 
  3439  0398                     	;# 
  3440  0399                     	;# 
  3441  0691                     	;# 
  3442  0692                     	;# 
  3443  0693                     	;# 
  3444  0694                     	;# 
  3445  0695                     	;# 
  3446  0D8E                     	;# 
  3447  0D8F                     	;# 
  3448  0D90                     	;# 
  3449  0D91                     	;# 
  3450  0D91                     	;# 
  3451  0D92                     	;# 
  3452  0D93                     	;# 
  3453  0D93                     	;# 
  3454  0D94                     	;# 
  3455  0D95                     	;# 
  3456  0D95                     	;# 
  3457  0D96                     	;# 
  3458  0D97                     	;# 
  3459  0D97                     	;# 
  3460  0D98                     	;# 
  3461  0D99                     	;# 
  3462  0D99                     	;# 
  3463  0D9A                     	;# 
  3464  0D9B                     	;# 
  3465  0D9C                     	;# 
  3466  0D9C                     	;# 
  3467  0D9D                     	;# 
  3468  0D9D                     	;# 
  3469  0D9E                     	;# 
  3470  0D9F                     	;# 
  3471  0DA0                     	;# 
  3472  0DA1                     	;# 
  3473  0DA1                     	;# 
  3474  0DA2                     	;# 
  3475  0DA3                     	;# 
  3476  0DA3                     	;# 
  3477  0DA4                     	;# 
  3478  0DA5                     	;# 
  3479  0DA5                     	;# 
  3480  0DA6                     	;# 
  3481  0DA7                     	;# 
  3482  0DA7                     	;# 
  3483  0DA8                     	;# 
  3484  0DA9                     	;# 
  3485  0DA9                     	;# 
  3486  0DAA                     	;# 
  3487  0DAB                     	;# 
  3488  0DAC                     	;# 
  3489  0DAC                     	;# 
  3490  0DAD                     	;# 
  3491  0DAD                     	;# 
  3492  0DAE                     	;# 
  3493  0DAF                     	;# 
  3494  0DB0                     	;# 
  3495  0DB1                     	;# 
  3496  0DB1                     	;# 
  3497  0DB2                     	;# 
  3498  0DB3                     	;# 
  3499  0DB3                     	;# 
  3500  0DB4                     	;# 
  3501  0DB5                     	;# 
  3502  0DB5                     	;# 
  3503  0DB6                     	;# 
  3504  0DB7                     	;# 
  3505  0DB7                     	;# 
  3506  0DB8                     	;# 
  3507  0DB9                     	;# 
  3508  0DB9                     	;# 
  3509  0DBA                     	;# 
  3510  0DBB                     	;# 
  3511  0DBC                     	;# 
  3512  0DBC                     	;# 
  3513  0DBD                     	;# 
  3514  0DBD                     	;# 
  3515  0DBE                     	;# 
  3516  0DBF                     	;# 
  3517  0DC0                     	;# 
  3518  0DC1                     	;# 
  3519  0DC1                     	;# 
  3520  0DC2                     	;# 
  3521  0DC3                     	;# 
  3522  0DC3                     	;# 
  3523  0DC4                     	;# 
  3524  0DC5                     	;# 
  3525  0DC5                     	;# 
  3526  0DC6                     	;# 
  3527  0DC7                     	;# 
  3528  0DC7                     	;# 
  3529  0DC8                     	;# 
  3530  0DC9                     	;# 
  3531  0DC9                     	;# 
  3532  0DCA                     	;# 
  3533  0DCB                     	;# 
  3534  0DCC                     	;# 
  3535  0DCC                     	;# 
  3536  0DCD                     	;# 
  3537  0DCD                     	;# 
  3538  0DCE                     	;# 
  3539  0DCF                     	;# 
  3540  0DD0                     	;# 
  3541  0E0F                     	;# 
  3542  0E10                     	;# 
  3543  0E11                     	;# 
  3544  0E12                     	;# 
  3545  0E13                     	;# 
  3546  0E14                     	;# 
  3547  0E15                     	;# 
  3548  0E16                     	;# 
  3549  0E17                     	;# 
  3550  0E90                     	;# 
  3551  0E91                     	;# 
  3552  0E92                     	;# 
  3553  0E94                     	;# 
  3554  0E95                     	;# 
  3555  0EA0                     	;# 
  3556  0EA1                     	;# 
  3557  0EA2                     	;# 
  3558  0EA3                     	;# 
  3559  0EA4                     	;# 
  3560  0EA5                     	;# 
  3561  0FE4                     	;# 
  3562  0FE5                     	;# 
  3563  0FE6                     	;# 
  3564  0FE7                     	;# 
  3565  0FE8                     	;# 
  3566  0FE8                     	;# 
  3567  0FE9                     	;# 
  3568  0FEA                     	;# 
  3569  0FEA                     	;# 
  3570  0FEB                     	;# 
  3571  0FED                     	;# 
  3572  0FEE                     	;# 
  3573  0FEE                     	;# 
  3574  0FEF                     	;# 
  3575  0FFF                     	;# 
  3576  0000                     	;# 
  3577  0001                     	;# 
  3578  0002                     	;# 
  3579  0003                     	;# 
  3580  0004                     	;# 
  3581  0005                     	;# 
  3582  0006                     	;# 
  3583  0007                     	;# 
  3584  0008                     	;# 
  3585  0009                     	;# 
  3586  000A                     	;# 
  3587  000B                     	;# 
  3588  000C                     	;# 
  3589  000E                     	;# 
  3590  0011                     	;# 
  3591  0012                     	;# 
  3592  0013                     	;# 
  3593  0015                     	;# 
  3594  0016                     	;# 
  3595  0016                     	;# 
  3596  0017                     	;# 
  3597  0018                     	;# 
  3598  0019                     	;# 
  3599  001A                     	;# 
  3600  001B                     	;# 
  3601  001C                     	;# 
  3602  008C                     	;# 
  3603  008E                     	;# 
  3604  0091                     	;# 
  3605  0092                     	;# 
  3606  0093                     	;# 
  3607  0095                     	;# 
  3608  0096                     	;# 
  3609  0097                     	;# 
  3610  0098                     	;# 
  3611  0099                     	;# 
  3612  009A                     	;# 
  3613  009B                     	;# 
  3614  009B                     	;# 
  3615  009C                     	;# 
  3616  009D                     	;# 
  3617  009E                     	;# 
  3618  009F                     	;# 
  3619  010C                     	;# 
  3620  010E                     	;# 
  3621  0111                     	;# 
  3622  0112                     	;# 
  3623  0113                     	;# 
  3624  0114                     	;# 
  3625  0115                     	;# 
  3626  0116                     	;# 
  3627  0117                     	;# 
  3628  0118                     	;# 
  3629  0119                     	;# 
  3630  018C                     	;# 
  3631  018E                     	;# 
  3632  0191                     	;# 
  3633  0191                     	;# 
  3634  0192                     	;# 
  3635  0193                     	;# 
  3636  0193                     	;# 
  3637  0194                     	;# 
  3638  0195                     	;# 
  3639  0196                     	;# 
  3640  0197                     	;# 
  3641  0199                     	;# 
  3642  019A                     	;# 
  3643  019B                     	;# 
  3644  019B                     	;# 
  3645  019C                     	;# 
  3646  019D                     	;# 
  3647  019E                     	;# 
  3648  019F                     	;# 
  3649  020C                     	;# 
  3650  020E                     	;# 
  3651  028C                     	;# 
  3652  028E                     	;# 
  3653  030C                     	;# 
  3654  030E                     	;# 
  3655  038C                     	;# 
  3656  038E                     	;# 
  3657  0391                     	;# 
  3658  0392                     	;# 
  3659  0393                     	;# 
  3660  0397                     	;# 
  3661  0398                     	;# 
  3662  0399                     	;# 
  3663  0691                     	;# 
  3664  0692                     	;# 
  3665  0693                     	;# 
  3666  0694                     	;# 
  3667  0695                     	;# 
  3668  0D8E                     	;# 
  3669  0D8F                     	;# 
  3670  0D90                     	;# 
  3671  0D91                     	;# 
  3672  0D91                     	;# 
  3673  0D92                     	;# 
  3674  0D93                     	;# 
  3675  0D93                     	;# 
  3676  0D94                     	;# 
  3677  0D95                     	;# 
  3678  0D95                     	;# 
  3679  0D96                     	;# 
  3680  0D97                     	;# 
  3681  0D97                     	;# 
  3682  0D98                     	;# 
  3683  0D99                     	;# 
  3684  0D99                     	;# 
  3685  0D9A                     	;# 
  3686  0D9B                     	;# 
  3687  0D9C                     	;# 
  3688  0D9C                     	;# 
  3689  0D9D                     	;# 
  3690  0D9D                     	;# 
  3691  0D9E                     	;# 
  3692  0D9F                     	;# 
  3693  0DA0                     	;# 
  3694  0DA1                     	;# 
  3695  0DA1                     	;# 
  3696  0DA2                     	;# 
  3697  0DA3                     	;# 
  3698  0DA3                     	;# 
  3699  0DA4                     	;# 
  3700  0DA5                     	;# 
  3701  0DA5                     	;# 
  3702  0DA6                     	;# 
  3703  0DA7                     	;# 
  3704  0DA7                     	;# 
  3705  0DA8                     	;# 
  3706  0DA9                     	;# 
  3707  0DA9                     	;# 
  3708  0DAA                     	;# 
  3709  0DAB                     	;# 
  3710  0DAC                     	;# 
  3711  0DAC                     	;# 
  3712  0DAD                     	;# 
  3713  0DAD                     	;# 
  3714  0DAE                     	;# 
  3715  0DAF                     	;# 
  3716  0DB0                     	;# 
  3717  0DB1                     	;# 
  3718  0DB1                     	;# 
  3719  0DB2                     	;# 
  3720  0DB3                     	;# 
  3721  0DB3                     	;# 
  3722  0DB4                     	;# 
  3723  0DB5                     	;# 
  3724  0DB5                     	;# 
  3725  0DB6                     	;# 
  3726  0DB7                     	;# 
  3727  0DB7                     	;# 
  3728  0DB8                     	;# 
  3729  0DB9                     	;# 
  3730  0DB9                     	;# 
  3731  0DBA                     	;# 
  3732  0DBB                     	;# 
  3733  0DBC                     	;# 
  3734  0DBC                     	;# 
  3735  0DBD                     	;# 
  3736  0DBD                     	;# 
  3737  0DBE                     	;# 
  3738  0DBF                     	;# 
  3739  0DC0                     	;# 
  3740  0DC1                     	;# 
  3741  0DC1                     	;# 
  3742  0DC2                     	;# 
  3743  0DC3                     	;# 
  3744  0DC3                     	;# 
  3745  0DC4                     	;# 
  3746  0DC5                     	;# 
  3747  0DC5                     	;# 
  3748  0DC6                     	;# 
  3749  0DC7                     	;# 
  3750  0DC7                     	;# 
  3751  0DC8                     	;# 
  3752  0DC9                     	;# 
  3753  0DC9                     	;# 
  3754  0DCA                     	;# 
  3755  0DCB                     	;# 
  3756  0DCC                     	;# 
  3757  0DCC                     	;# 
  3758  0DCD                     	;# 
  3759  0DCD                     	;# 
  3760  0DCE                     	;# 
  3761  0DCF                     	;# 
  3762  0DD0                     	;# 
  3763  0E0F                     	;# 
  3764  0E10                     	;# 
  3765  0E11                     	;# 
  3766  0E12                     	;# 
  3767  0E13                     	;# 
  3768  0E14                     	;# 
  3769  0E15                     	;# 
  3770  0E16                     	;# 
  3771  0E17                     	;# 
  3772  0E90                     	;# 
  3773  0E91                     	;# 
  3774  0E92                     	;# 
  3775  0E94                     	;# 
  3776  0E95                     	;# 
  3777  0EA0                     	;# 
  3778  0EA1                     	;# 
  3779  0EA2                     	;# 
  3780  0EA3                     	;# 
  3781  0EA4                     	;# 
  3782  0EA5                     	;# 
  3783  0FE4                     	;# 
  3784  0FE5                     	;# 
  3785  0FE6                     	;# 
  3786  0FE7                     	;# 
  3787  0FE8                     	;# 
  3788  0FE8                     	;# 
  3789  0FE9                     	;# 
  3790  0FEA                     	;# 
  3791  0FEA                     	;# 
  3792  0FEB                     	;# 
  3793  0FED                     	;# 
  3794  0FEE                     	;# 
  3795  0FEE                     	;# 
  3796  0FEF                     	;# 
  3797  0FFF                     	;_sysData
  3798                           
  3799 ;; Function _TMR2_DefaultInterruptHandler is unused but had its address taken
  3800  0000                     
  3801                           	psect	idataBANK0
  3802  07F8                     __pidataBANK0:	
  3803                           
  3804                           ;initializer for _pwm1DutyForIdrv
  3805  07F8  3405               	retlw	5
  3806  07F9  3400               	retlw	0
  3807                           
  3808                           ;initializer for _pwm2DutyForVout
  3809  07FA  3405               	retlw	5
  3810  07FB  3400               	retlw	0
  3811                           
  3812                           	psect	idataBANK1
  3813  0804                     __pidataBANK1:	
  3814                           
  3815                           ;initializer for _bbmax
  3816  0804  34C0               	retlw	192
  3817  0805  34F2               	retlw	242
  3818  0806  34FC               	retlw	252
  3819  0807  34FF               	retlw	255
  3820                           
  3821                           ;initializer for _bbmin
  3822  0808  3440               	retlw	64
  3823  0809  340D               	retlw	13
  3824  080A  3403               	retlw	3
  3825  080B  3400               	retlw	0
  3826                           
  3827                           ;initializer for _pidU
  3828  080C  3414               	retlw	20
  3829  080D  3400               	retlw	0
  3830  080E  3400               	retlw	0
  3831  080F  3400               	retlw	0
  3832                           
  3833                           ;initializer for _resRc
  3834  0810  3410               	retlw	16
  3835  0811  3427               	retlw	39
  3836  0812  3400               	retlw	0
  3837  0813  3400               	retlw	0
  3838                           
  3839                           ;initializer for _resRs
  3840  0814  3410               	retlw	16
  3841  0815  3427               	retlw	39
  3842  0816  3400               	retlw	0
  3843  0817  3400               	retlw	0
  3844  000B                     _INTCONbits	set	11
  3845  0011                     _PIR1bits	set	17
  3846  0013                     _PIR3bits	set	19
  3847  001B                     _PR2	set	27
  3848  001C                     _T2CON	set	28
  3849  001C                     _T2CONbits	set	28
  3850  001A                     _TMR2	set	26
  3851  005F                     _GIE	set	95
  3852  009D                     _ADCON0	set	157
  3853  009D                     _ADCON0bits	set	157
  3854  009E                     _ADCON1	set	158
  3855  009F                     _ADCON2	set	159
  3856  009C                     _ADRESH	set	156
  3857  009B                     _ADRESL	set	155
  3858  0095                     _OPTION_REGbits	set	149
  3859  0099                     _OSCCON	set	153
  3860  0098                     _OSCTUNE	set	152
  3861  0091                     _PIE1bits	set	145
  3862  0093                     _PIE3bits	set	147
  3863  008C                     _TRISA	set	140
  3864  008E                     _TRISC	set	142
  3865  0097                     _WDTCON	set	151
  3866  0117                     _FVRCON	set	279
  3867  0117                     _FVRCONbits	set	279
  3868  010C                     _LATA	set	268
  3869  010E                     _LATC	set	270
  3870  018C                     _ANSELA	set	396
  3871  018E                     _ANSELC	set	398
  3872  019F                     _BAUDCON	set	415
  3873  0192                     _PMADRH	set	402
  3874  0191                     _PMADRL	set	401
  3875  0195                     _PMCON1bits	set	405
  3876  0196                     _PMCON2	set	406
  3877  0194                     _PMDATH	set	404
  3878  0193                     _PMDATL	set	403
  3879  0199                     _RCREG	set	409
  3880  019D                     _RCSTA	set	413
  3881  019D                     _RCSTAbits	set	413
  3882  019C                     _SPBRGH	set	412
  3883  019B                     _SPBRGL	set	411
  3884  019A                     _TXREG	set	410
  3885  019E                     _TXSTA	set	414
  3886  019E                     _TXSTAbits	set	414
  3887  020C                     _WPUA	set	524
  3888  020E                     _WPUC	set	526
  3889  028C                     _ODCONA	set	652
  3890  028E                     _ODCONC	set	654
  3891  0D9E                     _PWM1CLKCON	set	3486
  3892  0D9B                     _PWM1CON	set	3483
  3893  0D9B                     _PWM1CONbits	set	3483
  3894  0D94                     _PWM1DCH	set	3476
  3895  0D93                     _PWM1DCL	set	3475
  3896  0D9C                     _PWM1INTE	set	3484
  3897  0D9D                     _PWM1INTF	set	3485
  3898  0D9D                     _PWM1INTFbits	set	3485
  3899  0D9F                     _PWM1LDCON	set	3487
  3900  0DA0                     _PWM1OFCON	set	3488
  3901  0D98                     _PWM1OFH	set	3480
  3902  0D97                     _PWM1OFL	set	3479
  3903  0D92                     _PWM1PHH	set	3474
  3904  0D91                     _PWM1PHL	set	3473
  3905  0D96                     _PWM1PRH	set	3478
  3906  0D95                     _PWM1PRL	set	3477
  3907  0D9A                     _PWM1TMRH	set	3482
  3908  0D99                     _PWM1TMRL	set	3481
  3909  0DAE                     _PWM2CLKCON	set	3502
  3910  0DAB                     _PWM2CON	set	3499
  3911  0DAB                     _PWM2CONbits	set	3499
  3912  0DA4                     _PWM2DCH	set	3492
  3913  0DA3                     _PWM2DCL	set	3491
  3914  0DAC                     _PWM2INTE	set	3500
  3915  0DAD                     _PWM2INTF	set	3501
  3916  0DAD                     _PWM2INTFbits	set	3501
  3917  0DAF                     _PWM2LDCON	set	3503
  3918  0DB0                     _PWM2OFCON	set	3504
  3919  0DA8                     _PWM2OFH	set	3496
  3920  0DA7                     _PWM2OFL	set	3495
  3921  0DA2                     _PWM2PHH	set	3490
  3922  0DA1                     _PWM2PHL	set	3489
  3923  0DA6                     _PWM2PRH	set	3494
  3924  0DA5                     _PWM2PRL	set	3493
  3925  0DAA                     _PWM2TMRH	set	3498
  3926  0DA9                     _PWM2TMRL	set	3497
  3927  0E0F                     _PPSLOCK	set	3599
  3928  0E0F                     _PPSLOCKbits	set	3599
  3929  0E15                     _RXPPSbits	set	3605
  3930  0E94                     _RA4PPSbits	set	3732
  3931  0E95                     _RA5PPSbits	set	3733
  3932  0EA5                     _RC5PPSbits	set	3749
  3933                           
  3934                           ; #config settings
  3935  0000                     
  3936                           	psect	cinit
  3937  007C                     start_initialization:	
  3938  007C                     __initialization:		;BIGRAM
  3939                           
  3940                           ; Clear objects allocated to BIGRAM
  3941  007C  3084               	movlw	132
  3942  007D  0084               	movwf	4
  3943  007E  3023               	movlw	35
  3944  007F  0085               	movwf	5
  3945  0080  305C               	movlw	92
  3946  0081  00FE               	movwf	126
  3947  0082  01FF               	clrf	127
  3948  0083  3197  27E1  3180   	fcall	clear_ram0
  3949  0086  304A               	movlw	low __pbssBANK0
  3950                           
  3951                           ; Clear objects allocated to COMMON
  3952  0087  01FC               	clrf	__pbssCOMMON& (0+127)
  3953                           
  3954                           ; Clear objects allocated to BANK0
  3955  0088  0084               	movwf	4
  3956  0089  3000               	movlw	high __pbssBANK0
  3957  008A  0085               	movwf	5
  3958  008B  3018               	movlw	24
  3959  008C  00FE               	movwf	126
  3960  008D  3000               	movlw	0
  3961  008E  00FF               	movwf	127
  3962  008F  3197  27E1  3180   	fcall	clear_ram0
  3963                           
  3964                           ; Clear objects allocated to BANK1
  3965  0092  30A0               	movlw	low __pbssBANK1
  3966  0093  0084               	movwf	4
  3967  0094  3000               	movlw	high __pbssBANK1
  3968  0095  0085               	movwf	5
  3969  0096  3034               	movlw	52
  3970  0097  00FE               	movwf	126
  3971  0098  3000               	movlw	0
  3972  0099  00FF               	movwf	127
  3973  009A  3197  27E1  3180   	fcall	clear_ram0
  3974                           
  3975                           ; Clear objects allocated to BANK2
  3976  009D  3020               	movlw	low __pbssBANK2
  3977  009E  0084               	movwf	4
  3978  009F  3001               	movlw	high __pbssBANK2
  3979  00A0  0085               	movwf	5
  3980  00A1  304A               	movlw	74
  3981  00A2  00FE               	movwf	126
  3982  00A3  3000               	movlw	0
  3983  00A4  00FF               	movwf	127
  3984  00A5  3197  27E1  3180   	fcall	clear_ram0
  3985                           
  3986                           ; Clear objects allocated to BANK3
  3987  00A8  30A0               	movlw	low __pbssBANK3
  3988  00A9  0084               	movwf	4
  3989  00AA  3001               	movlw	high __pbssBANK3
  3990  00AB  0085               	movwf	5
  3991  00AC  3040               	movlw	64
  3992  00AD  00FE               	movwf	126
  3993  00AE  3000               	movlw	0
  3994  00AF  00FF               	movwf	127
  3995  00B0  3197  27E1  3180   	fcall	clear_ram0
  3996                           
  3997                           ; Initialize objects allocated to BANK0
  3998  00B3  30F8               	movlw	low __pidataBANK0
  3999  00B4  0084               	movwf	4
  4000  00B5  3087               	movlw	(high __pidataBANK0)| (0+128)
  4001  00B6  0085               	movwf	5
  4002  00B7  3062               	movlw	low __pdataBANK0
  4003  00B8  0086               	movwf	6
  4004  00B9  3000               	movlw	high __pdataBANK0
  4005  00BA  0087               	movwf	7
  4006  00BB  3000               	movlw	0
  4007  00BC  00FF               	movwf	127
  4008  00BD  3004               	movlw	4
  4009  00BE  3197  27D5  3180   	fcall	init_ram
  4010                           
  4011                           ; Initialize objects allocated to BANK1
  4012  00C1  3004               	movlw	low __pidataBANK1
  4013  00C2  0084               	movwf	4
  4014  00C3  3088               	movlw	(high __pidataBANK1)| (0+128)
  4015  00C4  0085               	movwf	5
  4016  00C5  30D4               	movlw	low __pdataBANK1
  4017  00C6  0086               	movwf	6
  4018  00C7  3000               	movlw	high __pdataBANK1
  4019  00C8  0087               	movwf	7
  4020  00C9  3000               	movlw	0
  4021  00CA  00FF               	movwf	127
  4022  00CB  3014               	movlw	20
  4023  00CC  3197  27D5  3180   	fcall	init_ram
  4024  00CF                     end_of_initialization:	
  4025                           ;End of C runtime variable initialization code
  4026                           
  4027  00CF                     __end_of__initialization:	
  4028  00CF  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4029  00D0  0020               	movlb	0
  4030  00D1  28D2               	ljmp	_main	;jump to C main() function
  4031  00D2                     __pmaintext:	
  4032 ;;
  4033 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  4034 ;;
  4035 ;; *************** function _main *****************
  4036 ;; Defined at:
  4037 ;;		line 17 in file "src/app/main.c"
  4038 ;; Parameters:    Size  Location     Type
  4039 ;;		None
  4040 ;; Auto vars:     Size  Location     Type
  4041 ;;		None
  4042 ;; Return value:  Size  Location     Type
  4043 ;;                  1    wreg      void 
  4044 ;; Registers used:
  4045 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4046 ;; Tracked objects:
  4047 ;;		On entry : B1F/0
  4048 ;;		On exit  : 0/0
  4049 ;;		Unchanged: 0/0
  4050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4053 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4054 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4055 ;;Total ram usage:        2 bytes
  4056 ;; Hardware stack levels required when called:    6
  4057 ;; This function calls:
  4058 ;;		_SYSTEM_Initialize
  4059 ;;		_adc_sample
  4060 ;;		_calc_expect_vout_adc_value
  4061 ;;		_calc_rs_lo_avg
  4062 ;;		_calc_temp_rc
  4063 ;;		_calc_temp_rs
  4064 ;;		_m_mem_cpy_len
  4065 ;;		_modbus_response_process
  4066 ;;		_pid_pwm1_idrv_b_b
  4067 ;;		_pid_pwm1_idrv_run
  4068 ;;		_pid_pwm2_vout_run
  4069 ;;		_sys_data_init
  4070 ;;		_sys_data_save
  4071 ;;		_uart_received_start
  4072 ;; This function is called by:
  4073 ;;		Startup code after reset
  4074 ;; This function uses a non-reentrant model
  4075 ;;
  4076                           
  4077                           
  4078                           ;psect for function _main
  4079  00D2                     _main:	
  4080                           
  4081                           ;main.c: 19: __nop();
  4082                           
  4083                           ;incstack = 0
  4084                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4085  00D2  0000               	nop
  4086                           
  4087                           ;main.c: 21: SYSTEM_Initialize();
  4088  00D3  2220               	fcall	_SYSTEM_Initialize
  4089  00D4  178B               	bsf	11,7	;volatile
  4090  00D5  170B               	bsf	11,6	;volatile
  4091                           
  4092                           ;main.c: 25: sys_data_init();
  4093  00D6  318B  2380  3180   	fcall	_sys_data_init
  4094                           
  4095                           ;main.c: 27: if(sysData.pidSetFlg0 != 0x55 || sysData.pidSetFlg1 != 0xaa){
  4096  00D9  27C6  3180         	fcall	PL50	;call to abstracted procedure
  4097  00DB  0601               	xorwf	1,w
  4098  00DC  1D03               	btfss	3,2
  4099  00DD  28E5               	goto	l4570
  4100  00DE  3084               	movlw	132
  4101  00DF  0086               	movwf	6
  4102  00E0  30AA               	movlw	170
  4103  00E1  3141               	addfsr 1,1
  4104  00E2  0601               	xorwf	1,w
  4105  00E3  1903               	btfsc	3,2
  4106  00E4  28E7               	goto	l4572
  4107  00E5                     l4570:	
  4108                           
  4109                           ;main.c: 28: pidBbSm=0;
  4110  00E5  01DE               	clrf	_pidBbSm
  4111                           
  4112                           ;main.c: 29: }else{
  4113  00E6  2915               	goto	l4580
  4114  00E7                     l4572:	
  4115                           
  4116                           ;main.c: 30: pidBbSm=5;
  4117  00E7  3005               	movlw	5
  4118  00E8  00DE               	movwf	_pidBbSm
  4119                           
  4120                           ;main.c: 31: PidKp=sysData.pidKp;
  4121  00E9  318F  27F5  3180   	fcall	PL58	;call to abstracted procedure
  4122  00EC  3F40               	moviw [0]fsr1
  4123  00ED  00C8               	movwf	??_main
  4124  00EE  3F41               	moviw [1]fsr1
  4125  00EF  00C9               	movwf	??_main+1
  4126  00F0  0848               	movf	??_main,w
  4127  00F1  0021               	movlb	1	; select bank1
  4128  00F2  00AC               	movwf	_PidKp^(0+128)
  4129  00F3  0020               	movlb	0	; select bank0
  4130  00F4  0849               	movf	??_main+1,w
  4131  00F5  0021               	movlb	1	; select bank1
  4132  00F6  00AD               	movwf	(_PidKp^(0+128)+1)
  4133  00F7  3084               	movlw	132
  4134  00F8  01AE               	clrf	(_PidKp^(0+128)+2)
  4135  00F9  01AF               	clrf	(_PidKp^(0+128)+3)
  4136                           
  4137                           ;main.c: 32: PidTd=sysData.pidTd;
  4138  00FA  0086               	movwf	6
  4139  00FB  3023               	movlw	35
  4140  00FC  0087               	movwf	7
  4141  00FD  3148               	addfsr 1,8
  4142  00FE  27AA  3180         	fcall	PL30	;call to abstracted procedure
  4143  0100  00B0               	movwf	_PidTd^(0+128)
  4144  0101  0020               	movlb	0	; select bank0
  4145  0102  0849               	movf	??_main+1,w
  4146  0103  0021               	movlb	1	; select bank1
  4147  0104  00B1               	movwf	(_PidTd^(0+128)+1)
  4148  0105  3084               	movlw	132
  4149  0106  01B2               	clrf	(_PidTd^(0+128)+2)
  4150  0107  01B3               	clrf	(_PidTd^(0+128)+3)
  4151                           
  4152                           ;main.c: 33: PidTi=sysData.pidTi;
  4153  0108  0086               	movwf	6
  4154  0109  3023               	movlw	35
  4155  010A  0087               	movwf	7
  4156  010B  3146               	addfsr 1,6
  4157  010C  27AA  3180         	fcall	PL30	;call to abstracted procedure
  4158  010E  00B4               	movwf	_PidTi^(0+128)
  4159  010F  0020               	movlb	0	; select bank0
  4160  0110  0849               	movf	??_main+1,w
  4161  0111  0021               	movlb	1	; select bank1
  4162  0112  00B5               	movwf	(_PidTi^(0+128)+1)
  4163  0113  01B6               	clrf	(_PidTi^(0+128)+2)
  4164  0114  01B7               	clrf	(_PidTi^(0+128)+3)
  4165  0115                     l4580:	
  4166                           
  4167                           ;main.c: 37: if(Event & (1<<2)){
  4168  0115  0020               	movlb	0	; select bank0
  4169  0116  1D5C               	btfss	_Event,2	;volatile
  4170  0117  29C8               	goto	l4616
  4171                           
  4172                           ;main.c: 38: Event &= ~(1<<2);
  4173  0118  115C               	bcf	_Event,2	;volatile
  4174  0119  3020               	movlw	32
  4175                           
  4176                           ;main.c: 40: rtAdcValueRsLo=adc_sample(channel_AN6,1,32);
  4177  011A  01F3               	clrf	adc_sample@gfvr
  4178  011B  0AF3               	incf	adc_sample@gfvr,f
  4179  011C  00F4               	movwf	adc_sample@num
  4180  011D  3006               	movlw	6
  4181  011E  21E8  3180         	fcall	_adc_sample
  4182  0120  0874               	movf	?_adc_sample+1,w
  4183  0121  0020               	movlb	0	; select bank0
  4184  0122  00D5               	movwf	_rtAdcValueRsLo+1
  4185  0123  0873               	movf	?_adc_sample,w
  4186  0124  00D4               	movwf	_rtAdcValueRsLo
  4187                           
  4188                           ;main.c: 42: rtAdcValueRsHi=adc_sample(channel_AN5,3,32);
  4189  0125  3003               	movlw	3
  4190  0126  00F3               	movwf	adc_sample@gfvr
  4191  0127  3020               	movlw	32
  4192  0128  00F4               	movwf	adc_sample@num
  4193  0129  3005               	movlw	5
  4194  012A  21E8  3180         	fcall	_adc_sample
  4195  012C  0874               	movf	?_adc_sample+1,w
  4196  012D  0020               	movlb	0	; select bank0
  4197  012E  00D3               	movwf	_rtAdcValueRsHi+1
  4198  012F  0873               	movf	?_adc_sample,w
  4199  0130  00D2               	movwf	_rtAdcValueRsHi
  4200                           
  4201                           ;main.c: 45: rtAdcValueRcLo=adc_sample(channel_AN4,3,32);
  4202  0131  3003               	movlw	3
  4203  0132  00F3               	movwf	adc_sample@gfvr
  4204  0133  3020               	movlw	32
  4205  0134  00F4               	movwf	adc_sample@num
  4206  0135  3004               	movlw	4
  4207  0136  21E8  3180         	fcall	_adc_sample
  4208  0138  0874               	movf	?_adc_sample+1,w
  4209  0139  0020               	movlb	0	; select bank0
  4210  013A  00D1               	movwf	_rtAdcValueRcLo+1
  4211  013B  0873               	movf	?_adc_sample,w
  4212  013C  00D0               	movwf	_rtAdcValueRcLo
  4213  013D  3003               	movlw	3
  4214                           
  4215                           ;main.c: 46: rtAdcValueRcLo>>=1;
  4216  013E  36D1               	lsrf	_rtAdcValueRcLo+1,f
  4217  013F  0CD0               	rrf	_rtAdcValueRcLo,f
  4218                           
  4219                           ;main.c: 47: rtAdcValueRcHi=adc_sample(channel_AN2,3,32);
  4220  0140  00F3               	movwf	adc_sample@gfvr
  4221  0141  3020               	movlw	32
  4222  0142  00F4               	movwf	adc_sample@num
  4223  0143  3002               	movlw	2
  4224  0144  21E8  3180         	fcall	_adc_sample
  4225  0146  0874               	movf	?_adc_sample+1,w
  4226  0147  0020               	movlb	0	; select bank0
  4227  0148  00CF               	movwf	_rtAdcValueRcHi+1
  4228  0149  0873               	movf	?_adc_sample,w
  4229  014A  00CE               	movwf	_rtAdcValueRcHi
  4230  014B  3003               	movlw	3
  4231                           
  4232                           ;main.c: 48: rtAdcValueRcHi>>=1;
  4233  014C  36CF               	lsrf	_rtAdcValueRcHi+1,f
  4234  014D  0CCE               	rrf	_rtAdcValueRcHi,f
  4235                           
  4236                           ;main.c: 50: rtAdcValueVoFb=adc_sample(channel_AN7,3,32);
  4237  014E  00F3               	movwf	adc_sample@gfvr
  4238  014F  3020               	movlw	32
  4239  0150  00F4               	movwf	adc_sample@num
  4240  0151  3007               	movlw	7
  4241  0152  21E8  3180         	fcall	_adc_sample
  4242  0154  0874               	movf	?_adc_sample+1,w
  4243  0155  0020               	movlb	0	; select bank0
  4244  0156  00D7               	movwf	_rtAdcValueVoFb+1
  4245  0157  0873               	movf	?_adc_sample,w
  4246  0158  00D6               	movwf	_rtAdcValueVoFb
  4247                           
  4248                           ;main.c: 51: rtAdcValueVoFb>>=1;
  4249  0159  36D7               	lsrf	_rtAdcValueVoFb+1,f
  4250  015A  0CD6               	rrf	_rtAdcValueVoFb,f
  4251                           
  4252                           ;main.c: 53: resRc=calc_temp_rc();
  4253  015B  231A  3180         	fcall	_calc_temp_rc
  4254  015D  0828               	movf	?_calc_temp_rc+3,w
  4255  015E  0021               	movlb	1	; select bank1
  4256  015F  00E3               	movwf	(_resRc+3)^(0+128)
  4257  0160  0020               	movlb	0	; select bank0
  4258  0161  0827               	movf	?_calc_temp_rc+2,w
  4259  0162  0021               	movlb	1	; select bank1
  4260  0163  00E2               	movwf	(_resRc+2)^(0+128)
  4261  0164  0020               	movlb	0	; select bank0
  4262  0165  0826               	movf	?_calc_temp_rc+1,w
  4263  0166  0021               	movlb	1	; select bank1
  4264  0167  00E1               	movwf	(_resRc+1)^(0+128)
  4265  0168  0020               	movlb	0	; select bank0
  4266  0169  0825               	movf	?_calc_temp_rc,w
  4267  016A  0021               	movlb	1	; select bank1
  4268  016B  00E0               	movwf	_resRc^(0+128)
  4269                           
  4270                           ;main.c: 54: resRs=calc_temp_rs();
  4271  016C  2682  3180         	fcall	_calc_temp_rs
  4272  016E  0828               	movf	?_calc_temp_rs+3,w
  4273  016F  0021               	movlb	1	; select bank1
  4274  0170  00E7               	movwf	(_resRs+3)^(0+128)
  4275  0171  0020               	movlb	0	; select bank0
  4276  0172  0827               	movf	?_calc_temp_rs+2,w
  4277  0173  0021               	movlb	1	; select bank1
  4278  0174  00E6               	movwf	(_resRs+2)^(0+128)
  4279  0175  0020               	movlb	0	; select bank0
  4280  0176  0826               	movf	?_calc_temp_rs+1,w
  4281  0177  0021               	movlb	1	; select bank1
  4282  0178  00E5               	movwf	(_resRs+1)^(0+128)
  4283  0179  0020               	movlb	0	; select bank0
  4284  017A  0825               	movf	?_calc_temp_rs,w
  4285  017B  0021               	movlb	1	; select bank1
  4286  017C  00E4               	movwf	_resRs^(0+128)
  4287                           
  4288                           ;main.c: 56: __nop();
  4289  017D  0000               	nop
  4290                           
  4291                           ;main.c: 57: if(pidBbSm>=5){
  4292  017E  3005               	movlw	5
  4293  017F  0020               	movlb	0	; select bank0
  4294  0180  025E               	subwf	_pidBbSm,w
  4295  0181  1C03               	skipc
  4296  0182  29A3               	goto	l4608
  4297                           
  4298                           ;main.c: 58: pid_pwm1_idrv_run();
  4299  0183  3189  2110  3180   	fcall	_pid_pwm1_idrv_run
  4300                           
  4301                           ;main.c: 61: rsLoAvg=calc_rs_lo_avg(rtAdcValueRsLo);
  4302  0186  0020               	movlb	0	; select bank0
  4303  0187  0855               	movf	_rtAdcValueRsLo+1,w
  4304  0188  00FA               	movwf	calc_rs_lo_avg@x+1
  4305  0189  0854               	movf	_rtAdcValueRsLo,w
  4306  018A  00F9               	movwf	calc_rs_lo_avg@x
  4307  018B  22CB               	fcall	_calc_rs_lo_avg
  4308  018C  087A               	movf	?_calc_rs_lo_avg+1,w
  4309  018D  00CD               	movwf	_rsLoAvg+1
  4310  018E  0879               	movf	?_calc_rs_lo_avg,w
  4311  018F  00CC               	movwf	_rsLoAvg
  4312                           
  4313                           ;main.c: 62: voExpectMv=calc_expect_vout_adc_value(rsLoAvg);
  4314  0190  084D               	movf	_rsLoAvg+1,w
  4315  0191  00B3               	movwf	calc_expect_vout_adc_value@x+1
  4316  0192  084C               	movf	_rsLoAvg,w
  4317  0193  00B2               	movwf	calc_expect_vout_adc_value@x
  4318  0194  318A  2244  3180   	fcall	_calc_expect_vout_adc_value
  4319  0197  0833               	movf	?_calc_expect_vout_adc_value+1,w
  4320  0198  00DB               	movwf	_voExpectMv+1
  4321  0199  0832               	movf	?_calc_expect_vout_adc_value,w
  4322  019A  00DA               	movwf	_voExpectMv
  4323                           
  4324                           ;main.c: 63: voExpectAdcValue=(voExpectMv<<1);
  4325  019B  355A               	lslf	_voExpectMv,w
  4326  019C  00D8               	movwf	_voExpectAdcValue
  4327  019D  0D5B               	rlf	_voExpectMv+1,w
  4328  019E  00D9               	movwf	_voExpectAdcValue+1
  4329                           
  4330                           ;main.c: 64: pid_pwm2_vout_run();
  4331  019F  3188  2018  3180   	fcall	_pid_pwm2_vout_run
  4332                           
  4333                           ;main.c: 65: }else{
  4334  01A2  29C8               	goto	l4616
  4335  01A3                     l4608:	
  4336                           
  4337                           ;main.c: 66: pid_pwm1_idrv_b_b();
  4338  01A3  23B7  3180         	fcall	_pid_pwm1_idrv_b_b
  4339                           
  4340                           ;main.c: 68: if(pidBbSm>=5){
  4341  01A5  3005               	movlw	5
  4342  01A6  0020               	movlb	0	; select bank0
  4343  01A7  025E               	subwf	_pidBbSm,w
  4344  01A8  1C03               	skipc
  4345  01A9  29C8               	goto	l4616
  4346                           
  4347                           ;main.c: 69: sysData.pidSetFlg0 = 0x55;
  4348  01AA  27C6               	fcall	PL50	;call to abstracted procedure
  4349  01AB  3FC0               	movwi [0]fsr1
  4350                           
  4351                           ;main.c: 70: sysData.pidSetFlg1 = 0xaa;
  4352  01AC  3085               	movlw	133
  4353  01AD  0086               	movwf	6
  4354  01AE  30AA               	movlw	170
  4355  01AF  0081               	movwf	1
  4356                           
  4357                           ;main.c: 71: sysData.pidKp=PidKp;
  4358  01B0  3084               	movlw	132
  4359  01B1  0086               	movwf	6
  4360  01B2  3144               	addfsr 1,4
  4361  01B3  0021               	movlb	1	; select bank1
  4362  01B4  082C               	movf	_PidKp^(0+128),w
  4363  01B5  3FC0               	movwi [0]fsr1
  4364  01B6  082D               	movf	(_PidKp+1)^(0+128),w
  4365  01B7  3FC1               	movwi [1]fsr1
  4366                           
  4367                           ;main.c: 72: sysData.pidTd=PidTd;
  4368  01B8  318F  27E9  3180   	fcall	PL52	;call to abstracted procedure
  4369  01BB  0830               	movf	_PidTd^(0+128),w
  4370  01BC  3FC0               	movwi [0]fsr1
  4371  01BD  0831               	movf	(_PidTd+1)^(0+128),w
  4372  01BE  3FC1               	movwi [1]fsr1
  4373                           
  4374                           ;main.c: 73: sysData.pidTi=PidTi;
  4375  01BF  318F  27E3  3180   	fcall	PL48	;call to abstracted procedure
  4376  01C2  0834               	movf	_PidTi^(0+128),w
  4377  01C3  3FC0               	movwi [0]fsr1
  4378  01C4  0835               	movf	(_PidTi+1)^(0+128),w
  4379  01C5  3FC1               	movwi [1]fsr1
  4380                           
  4381                           ;main.c: 74: sys_data_save();
  4382  01C6  2710  3180         	fcall	_sys_data_save
  4383  01C8                     l4616:	
  4384                           
  4385                           ;main.c: 75: }
  4386                           ;main.c: 76: }
  4387                           ;main.c: 78: }
  4388                           ;main.c: 80: if(Event & (1<<3)){
  4389  01C8  0020               	movlb	0	; select bank0
  4390  01C9  19DC               	btfsc	_Event,3	;volatile
  4391                           
  4392                           ;main.c: 81: Event &= ~(1<<3);
  4393  01CA  11DC               	bcf	_Event,3	;volatile
  4394                           
  4395                           ;main.c: 109: }
  4396                           ;main.c: 111: if(Event & (1<<0)){
  4397  01CB  1C5C               	btfss	_Event,0	;volatile
  4398  01CC  29E6               	goto	l4630
  4399                           
  4400                           ;main.c: 112: Event &= ~ (1<<0);
  4401  01CD  105C               	bcf	_Event,0	;volatile
  4402                           
  4403                           ;main.c: 113: if(eusartRxCount>0){
  4404  01CE  087C               	movf	_eusartRxCount,w	;volatile
  4405  01CF  1903               	btfsc	3,2
  4406  01D0  29E4               	goto	l4628
  4407                           
  4408                           ;main.c: 114: m_mem_cpy_len(modbusBuf,eusartRxBuffer,eusartRxCount);
  4409  01D1  30A0               	movlw	low _modbusBuf
  4410  01D2  00F1               	movwf	m_mem_cpy_len@d
  4411  01D3  3001               	movlw	high _modbusBuf
  4412  01D4  00F2               	movwf	m_mem_cpy_len@d+1
  4413  01D5  302A               	movlw	low _eusartRxBuffer
  4414  01D6  00F3               	movwf	m_mem_cpy_len@s
  4415  01D7  3001               	movlw	high _eusartRxBuffer
  4416  01D8  00F4               	movwf	m_mem_cpy_len@s+1
  4417  01D9  087C               	movf	_eusartRxCount,w	;volatile
  4418  01DA  00F5               	movwf	m_mem_cpy_len@len
  4419  01DB  01F6               	clrf	m_mem_cpy_len@len+1
  4420  01DC  26F5               	fcall	_m_mem_cpy_len
  4421                           
  4422                           ;main.c: 115: modbus_response_process(modbusBuf,eusartRxCount);
  4423  01DD  087C               	movf	_eusartRxCount,w	;volatile
  4424  01DE  00B8               	movwf	modbus_response_process@rlen
  4425  01DF  30A0               	movlw	(low (_modbusBuf| (0+256)))& (0+255)
  4426  01E0  01B9               	clrf	modbus_response_process@rlen+1
  4427  01E1  318D  252A  3180   	fcall	_modbus_response_process
  4428  01E4                     l4628:	
  4429                           
  4430                           ;main.c: 117: }
  4431                           ;main.c: 119: uart_received_start();
  4432  01E4  2768  3180         	fcall	_uart_received_start
  4433  01E6                     l4630:	
  4434                           
  4435                           ;main.c: 120: }
  4436                           ;main.c: 122: __nop();
  4437  01E6  0000               	nop
  4438  01E7  2915               	goto	l4580
  4439  01E8                     __end_of_main:	
  4440  01E8                     __ptext35:	
  4441 ;; *************** function _adc_sample *****************
  4442 ;; Defined at:
  4443 ;;		line 149 in file "src/api/sample.c"
  4444 ;; Parameters:    Size  Location     Type
  4445 ;;  ch              1    wreg     unsigned char 
  4446 ;;  gfvr            1    3[COMMON] unsigned char 
  4447 ;;  num             1    4[COMMON] unsigned char 
  4448 ;; Auto vars:     Size  Location     Type
  4449 ;;  ch              1    6[COMMON] unsigned char 
  4450 ;;  t16             2   10[COMMON] unsigned int 
  4451 ;;  ret             2    7[COMMON] unsigned int 
  4452 ;;  i               1    9[COMMON] unsigned char 
  4453 ;; Return value:  Size  Location     Type
  4454 ;;                  2    3[COMMON] unsigned int 
  4455 ;; Registers used:
  4456 ;;		wreg, status,2, status,0, pclath, cstack
  4457 ;; Tracked objects:
  4458 ;;		On entry : 1F/0
  4459 ;;		On exit  : 0/0
  4460 ;;		Unchanged: 0/0
  4461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4462 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4463 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4464 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4465 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4466 ;;Total ram usage:        9 bytes
  4467 ;; Hardware stack levels used:    1
  4468 ;; Hardware stack levels required when called:    2
  4469 ;; This function calls:
  4470 ;;		_adc_init
  4471 ;;		_fvr_set_gain
  4472 ;; This function is called by:
  4473 ;;		_main
  4474 ;; This function uses a non-reentrant model
  4475 ;;
  4476                           
  4477                           
  4478                           ;psect for function _adc_sample
  4479  01E8                     _adc_sample:	
  4480                           
  4481                           ;incstack = 0
  4482                           ; Regs used in _adc_sample: [wreg+status,2+status,0+pclath+cstack]
  4483                           ;adc_sample@ch stored from wreg
  4484  01E8  00F6               	movwf	adc_sample@ch
  4485                           
  4486                           ;sample.c: 151: uint8_t i;
  4487                           ;sample.c: 152: uint16_t ret=0;
  4488  01E9  01F7               	clrf	adc_sample@ret
  4489  01EA  01F8               	clrf	adc_sample@ret+1
  4490                           
  4491                           ;sample.c: 155: fvr_set_gain(gfvr);
  4492  01EB  0873               	movf	adc_sample@gfvr,w
  4493  01EC  22BA  3180         	fcall	_fvr_set_gain
  4494                           
  4495                           ;sample.c: 156: adc_init((adc_channel_t)ch);
  4496  01EE  0876               	movf	adc_sample@ch,w
  4497  01EF  22AB  3180         	fcall	_adc_init
  4498                           
  4499                           ;sample.c: 157: _delay((unsigned long)((10)*(16000000/4000000.0)));
  4500  01F1  300D               	movlw	13
  4501  01F2  00F5               	movwf	??_adc_sample
  4502  01F3                     u3377:	
  4503  01F3  0BF5               	decfsz	??_adc_sample,f
  4504  01F4  29F3               	goto	u3377
  4505                           
  4506                           ;sample.c: 158: if(num>64)num=64;
  4507  01F5  3041               	movlw	65
  4508  01F6  0274               	subwf	adc_sample@num,w
  4509  01F7  1C03               	skipc
  4510  01F8  29FB               	goto	l3546
  4511  01F9  3040               	movlw	64
  4512  01FA  00F4               	movwf	adc_sample@num
  4513  01FB                     l3546:	
  4514                           
  4515                           ;sample.c: 159: for(i=0;i<num;i++){
  4516  01FB  01F9               	clrf	adc_sample@i
  4517  01FC                     l3554:	
  4518  01FC  0874               	movf	adc_sample@num,w
  4519  01FD  0279               	subwf	adc_sample@i,w
  4520  01FE  1803               	btfsc	3,0
  4521  01FF  2A1B               	goto	l3556
  4522                           
  4523                           ;sample.c: 160: ADCON0bits.GO_nDONE = 1;
  4524  0200  0021               	movlb	1	; select bank1
  4525  0201  149D               	bsf	29,1	;volatile
  4526  0202                     l632:	
  4527                           ;sample.c: 161: while (ADCON0bits.GO_nDONE);
  4528                           
  4529  0202  189D               	btfsc	29,1	;volatile
  4530  0203  2A02               	goto	l632
  4531                           
  4532                           ;sample.c: 162: __nop();
  4533  0204  0000               	nop
  4534                           
  4535                           ;sample.c: 163: t16=ADRESH;
  4536  0205  0021               	movlb	1	; select bank1
  4537  0206  081C               	movf	28,w	;volatile
  4538  0207  00FA               	movwf	adc_sample@t16
  4539  0208  01FB               	clrf	adc_sample@t16+1
  4540                           
  4541                           ;sample.c: 164: t16<<=2;
  4542  0209  35FA               	lslf	adc_sample@t16,f
  4543  020A  0DFB               	rlf	adc_sample@t16+1,f
  4544  020B  35FA               	lslf	adc_sample@t16,f
  4545  020C  0DFB               	rlf	adc_sample@t16+1,f
  4546                           
  4547                           ;sample.c: 165: t16|=(ADRESL>>6);
  4548  020D  081B               	movf	27,w	;volatile
  4549  020E  00F5               	movwf	??_adc_sample
  4550  020F  3006               	movlw	6
  4551  0210                     u2115:	
  4552  0210  36F5               	lsrf	??_adc_sample,f
  4553  0211  0B89               	decfsz	9,f
  4554  0212  2A10               	goto	u2115
  4555  0213  0875               	movf	??_adc_sample,w
  4556  0214  04FA               	iorwf	adc_sample@t16,f
  4557                           
  4558                           ;sample.c: 167: ret+=t16;
  4559  0215  087A               	movf	adc_sample@t16,w
  4560  0216  07F7               	addwf	adc_sample@ret,f
  4561  0217  087B               	movf	adc_sample@t16+1,w
  4562  0218  3DF8               	addwfc	adc_sample@ret+1,f
  4563  0219  0AF9               	incf	adc_sample@i,f
  4564  021A  29FC               	goto	l3554
  4565  021B                     l3556:	
  4566                           
  4567                           ;sample.c: 172: return ret;
  4568  021B  0878               	movf	adc_sample@ret+1,w
  4569  021C  00F4               	movwf	?_adc_sample+1
  4570  021D  0877               	movf	adc_sample@ret,w
  4571  021E  00F3               	movwf	?_adc_sample
  4572  021F  0008               	return
  4573  0220                     __end_of_adc_sample:	
  4574  0220                     __ptext38:	
  4575 ;; *************** function _SYSTEM_Initialize *****************
  4576 ;; Defined at:
  4577 ;;		line 68 in file "mcc_generated_files/mcc.c"
  4578 ;; Parameters:    Size  Location     Type
  4579 ;;		None
  4580 ;; Auto vars:     Size  Location     Type
  4581 ;;		None
  4582 ;; Return value:  Size  Location     Type
  4583 ;;                  1    wreg      void 
  4584 ;; Registers used:
  4585 ;;		wreg, status,2, status,0, pclath, cstack
  4586 ;; Tracked objects:
  4587 ;;		On entry : 0/0
  4588 ;;		On exit  : 1F/1
  4589 ;;		Unchanged: 0/0
  4590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4594 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4595 ;;Total ram usage:        0 bytes
  4596 ;; Hardware stack levels used:    1
  4597 ;; Hardware stack levels required when called:    3
  4598 ;; This function calls:
  4599 ;;		_ADC1_Initialize
  4600 ;;		_EUSART_Initialize
  4601 ;;		_FVR_Initialize
  4602 ;;		_OSCILLATOR_Initialize
  4603 ;;		_PIN_MANAGER_Initialize
  4604 ;;		_PWM1_Initialize
  4605 ;;		_PWM2_Initialize
  4606 ;;		_TMR2_Initialize
  4607 ;;		_WDT_Initialize
  4608 ;; This function is called by:
  4609 ;;		_main
  4610 ;; This function uses a non-reentrant model
  4611 ;;
  4612                           
  4613                           
  4614                           ;psect for function _SYSTEM_Initialize
  4615  0220                     _SYSTEM_Initialize:	
  4616                           
  4617                           ;mcc.c: 71: PIN_MANAGER_Initialize();
  4618                           
  4619                           ;incstack = 0
  4620                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4621  0220  223E  3180         	fcall	_PIN_MANAGER_Initialize
  4622                           
  4623                           ;mcc.c: 72: OSCILLATOR_Initialize();
  4624  0222  2239  3180         	fcall	_OSCILLATOR_Initialize
  4625                           
  4626                           ;mcc.c: 73: WDT_Initialize();
  4627  0224  22A8  3180         	fcall	_WDT_Initialize
  4628                           
  4629                           ;mcc.c: 74: FVR_Initialize();
  4630  0226  2235  3180         	fcall	_FVR_Initialize
  4631                           
  4632                           ;mcc.c: 75: PWM1_Initialize();
  4633  0228  2277  3180         	fcall	_PWM1_Initialize
  4634                           
  4635                           ;mcc.c: 76: PWM2_Initialize();
  4636  022A  2290  3180         	fcall	_PWM2_Initialize
  4637                           
  4638                           ;mcc.c: 77: ADC1_Initialize();
  4639  022C  2231               	fcall	_ADC1_Initialize
  4640                           
  4641                           ;mcc.c: 78: TMR2_Initialize();
  4642  022D  3197  27ED  3180   	fcall	_TMR2_Initialize
  4643                           
  4644                           ;mcc.c: 79: EUSART_Initialize();
  4645  0230  2FEA               	ljmp	l3120
  4646  0231                     __end_of_SYSTEM_Initialize:	
  4647  0231                     __ptext49:	
  4648 ;; *************** function _ADC1_Initialize *****************
  4649 ;; Defined at:
  4650 ;;		line 64 in file "mcc_generated_files/adc1.c"
  4651 ;; Parameters:    Size  Location     Type
  4652 ;;		None
  4653 ;; Auto vars:     Size  Location     Type
  4654 ;;		None
  4655 ;; Return value:  Size  Location     Type
  4656 ;;                  1    wreg      void 
  4657 ;; Registers used:
  4658 ;;		wreg, status,2
  4659 ;; Tracked objects:
  4660 ;;		On entry : 1F/1B
  4661 ;;		On exit  : 1F/1
  4662 ;;		Unchanged: 0/0
  4663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4667 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4668 ;;Total ram usage:        0 bytes
  4669 ;; Hardware stack levels used:    1
  4670 ;; Hardware stack levels required when called:    1
  4671 ;; This function calls:
  4672 ;;		Nothing
  4673 ;; This function is called by:
  4674 ;;		_SYSTEM_Initialize
  4675 ;; This function uses a non-reentrant model
  4676 ;;
  4677                           
  4678                           
  4679                           ;psect for function _ADC1_Initialize
  4680  0231                     _ADC1_Initialize:	
  4681                           
  4682                           ;adc1.c: 69: ADCON0 = 0x01;
  4683                           
  4684                           ;incstack = 0
  4685                           ; Regs used in _ADC1_Initialize: [wreg+status,2]
  4686  0231  3001               	movlw	1
  4687  0232  0021               	movlb	1	; select bank1
  4688  0233  009D               	movwf	29	;volatile
  4689                           
  4690                           ;adc1.c: 72: ADCON1 = 0x63;
  4691                           
  4692                           ;adc1.c: 75: ADCON2 = 0x00;
  4693                           
  4694                           ;adc1.c: 78: ADRESL = 0x00;
  4695                           
  4696                           ;adc1.c: 81: ADRESH = 0x00;
  4697  0234  2FB9               	ljmp	PL40	;call to abstracted procedure
  4698  0235                     __end_of_ADC1_Initialize:	
  4699  0235                     __ptext47:	
  4700 ;; *************** function _FVR_Initialize *****************
  4701 ;; Defined at:
  4702 ;;		line 57 in file "mcc_generated_files/fvr.c"
  4703 ;; Parameters:    Size  Location     Type
  4704 ;;		None
  4705 ;; Auto vars:     Size  Location     Type
  4706 ;;		None
  4707 ;; Return value:  Size  Location     Type
  4708 ;;                  1    wreg      void 
  4709 ;; Registers used:
  4710 ;;		wreg
  4711 ;; Tracked objects:
  4712 ;;		On entry : 1F/1
  4713 ;;		On exit  : 1F/2
  4714 ;;		Unchanged: 0/0
  4715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4719 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4720 ;;Total ram usage:        0 bytes
  4721 ;; Hardware stack levels used:    1
  4722 ;; Hardware stack levels required when called:    1
  4723 ;; This function calls:
  4724 ;;		Nothing
  4725 ;; This function is called by:
  4726 ;;		_SYSTEM_Initialize
  4727 ;; This function uses a non-reentrant model
  4728 ;;
  4729                           
  4730                           
  4731                           ;psect for function _FVR_Initialize
  4732  0235                     _FVR_Initialize:	
  4733                           
  4734                           ;fvr.c: 60: FVRCON = 0x81;
  4735                           
  4736                           ;incstack = 0
  4737                           ; Regs used in _FVR_Initialize: [wreg]
  4738  0235  3081               	movlw	129
  4739  0236  0022               	movlb	2	; select bank2
  4740  0237  0097               	movwf	23	;volatile
  4741  0238  0008               	return
  4742  0239                     __end_of_FVR_Initialize:	
  4743  0239                     __ptext46:	
  4744 ;; *************** function _OSCILLATOR_Initialize *****************
  4745 ;; Defined at:
  4746 ;;		line 82 in file "mcc_generated_files/mcc.c"
  4747 ;; Parameters:    Size  Location     Type
  4748 ;;		None
  4749 ;; Auto vars:     Size  Location     Type
  4750 ;;		None
  4751 ;; Return value:  Size  Location     Type
  4752 ;;                  1    wreg      void 
  4753 ;; Registers used:
  4754 ;;		wreg, status,2
  4755 ;; Tracked objects:
  4756 ;;		On entry : 0/0
  4757 ;;		On exit  : 1F/1
  4758 ;;		Unchanged: 0/0
  4759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4763 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4764 ;;Total ram usage:        0 bytes
  4765 ;; Hardware stack levels used:    1
  4766 ;; Hardware stack levels required when called:    1
  4767 ;; This function calls:
  4768 ;;		Nothing
  4769 ;; This function is called by:
  4770 ;;		_SYSTEM_Initialize
  4771 ;; This function uses a non-reentrant model
  4772 ;;
  4773                           
  4774                           
  4775                           ;psect for function _OSCILLATOR_Initialize
  4776  0239                     _OSCILLATOR_Initialize:	
  4777                           
  4778                           ;mcc.c: 85: OSCCON = 0x78;
  4779                           
  4780                           ;incstack = 0
  4781                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4782  0239  3078               	movlw	120
  4783  023A  0021               	movlb	1	; select bank1
  4784  023B  0099               	movwf	25	;volatile
  4785                           
  4786                           ;mcc.c: 87: OSCTUNE = 0x00;
  4787  023C  0198               	clrf	24	;volatile
  4788  023D  0008               	return
  4789  023E                     __end_of_OSCILLATOR_Initialize:	
  4790  023E                     __ptext45:	
  4791 ;; *************** function _PIN_MANAGER_Initialize *****************
  4792 ;; Defined at:
  4793 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  4794 ;; Parameters:    Size  Location     Type
  4795 ;;		None
  4796 ;; Auto vars:     Size  Location     Type
  4797 ;;  state           1    1[COMMON] unsigned char 
  4798 ;; Return value:  Size  Location     Type
  4799 ;;                  1    wreg      void 
  4800 ;; Registers used:
  4801 ;;		wreg, status,2, status,0
  4802 ;; Tracked objects:
  4803 ;;		On entry : 0/0
  4804 ;;		On exit  : 0/0
  4805 ;;		Unchanged: 0/0
  4806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4808 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4810 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4811 ;;Total ram usage:        1 bytes
  4812 ;; Hardware stack levels used:    1
  4813 ;; Hardware stack levels required when called:    1
  4814 ;; This function calls:
  4815 ;;		Nothing
  4816 ;; This function is called by:
  4817 ;;		_SYSTEM_Initialize
  4818 ;; This function uses a non-reentrant model
  4819 ;;
  4820                           
  4821                           
  4822                           ;psect for function _PIN_MANAGER_Initialize
  4823  023E                     _PIN_MANAGER_Initialize:	
  4824                           
  4825                           ;pin_manager.c: 57: LATA = 0x00;
  4826                           
  4827                           ;incstack = 0
  4828                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
  4829  023E  0022               	movlb	2	; select bank2
  4830  023F  018C               	clrf	12	;volatile
  4831                           
  4832                           ;pin_manager.c: 58: LATC = 0x00;
  4833  0240  018E               	clrf	14	;volatile
  4834                           
  4835                           ;pin_manager.c: 63: TRISA = 0x0F;
  4836  0241  300F               	movlw	15
  4837  0242  0021               	movlb	1	; select bank1
  4838  0243  008C               	movwf	12	;volatile
  4839                           
  4840                           ;pin_manager.c: 64: TRISC = 0x1f;
  4841  0244  301F               	movlw	31
  4842  0245  008E               	movwf	14	;volatile
  4843                           
  4844                           ;pin_manager.c: 69: ANSELC = 0x0F;
  4845  0246  300F               	movlw	15
  4846  0247  0023               	movlb	3	; select bank3
  4847  0248  008E               	movwf	14	;volatile
  4848                           
  4849                           ;pin_manager.c: 70: ANSELA = 0x17;
  4850  0249  3017               	movlw	23
  4851  024A  008C               	movwf	12	;volatile
  4852                           
  4853                           ;pin_manager.c: 75: WPUA = 0x3B;
  4854  024B  303B               	movlw	59
  4855  024C  0024               	movlb	4	; select bank4
  4856  024D  008C               	movwf	12	;volatile
  4857                           
  4858                           ;pin_manager.c: 76: WPUC = 0x30;
  4859  024E  3030               	movlw	48
  4860  024F  008E               	movwf	14	;volatile
  4861                           
  4862                           ;pin_manager.c: 77: OPTION_REGbits.nWPUEN = 0;
  4863  0250  0021               	movlb	1	; select bank1
  4864  0251  1395               	bcf	21,7	;volatile
  4865                           
  4866                           ;pin_manager.c: 82: ODCONA = 0x00;
  4867  0252  0025               	movlb	5	; select bank5
  4868  0253  018C               	clrf	12	;volatile
  4869                           
  4870                           ;pin_manager.c: 83: ODCONC = 0x00;
  4871  0254  018E               	clrf	14	;volatile
  4872                           
  4873                           ;pin_manager.c: 90: bool state = (unsigned char)GIE;
  4874  0255  3000               	movlw	0
  4875  0256  1B8B               	btfsc	11,7	;volatile
  4876  0257  3001               	movlw	1
  4877  0258  00F1               	movwf	PIN_MANAGER_Initialize@state
  4878                           
  4879                           ;pin_manager.c: 91: GIE = 0;
  4880  0259  138B               	bcf	11,7	;volatile
  4881                           
  4882                           ;pin_manager.c: 92: PPSLOCK = 0x55;
  4883                           
  4884                           ;pin_manager.c: 93: PPSLOCK = 0xAA;
  4885  025A  27CB  3180         	fcall	PL54	;call to abstracted procedure
  4886                           
  4887                           ;pin_manager.c: 94: PPSLOCKbits.PPSLOCKED = 0x00;
  4888  025C  100F               	bcf	15,0	;volatile
  4889                           
  4890                           ;pin_manager.c: 96: RXPPSbits.RXPPS = 0x14;
  4891  025D  0815               	movf	21,w	;volatile
  4892  025E  39E0               	andlw	-32
  4893  025F  3814               	iorlw	20
  4894  0260  0095               	movwf	21	;volatile
  4895                           
  4896                           ;pin_manager.c: 97: RA4PPSbits.RA4PPS = 0x04;
  4897  0261  003D               	movlb	29	; select bank29
  4898  0262  0814               	movf	20,w	;volatile
  4899  0263  39F0               	andlw	-16
  4900  0264  3804               	iorlw	4
  4901  0265  0094               	movwf	20	;volatile
  4902                           
  4903                           ;pin_manager.c: 98: RA5PPSbits.RA5PPS = 0x03;
  4904  0266  0815               	movf	21,w	;volatile
  4905  0267  39F0               	andlw	-16
  4906  0268  3803               	iorlw	3
  4907  0269  0095               	movwf	21	;volatile
  4908                           
  4909                           ;pin_manager.c: 99: RC5PPSbits.RC5PPS = 0x09;
  4910  026A  0825               	movf	37,w	;volatile
  4911  026B  39F0               	andlw	-16
  4912  026C  3809               	iorlw	9
  4913  026D  00A5               	movwf	37	;volatile
  4914                           
  4915                           ;pin_manager.c: 101: PPSLOCK = 0x55;
  4916                           
  4917                           ;pin_manager.c: 102: PPSLOCK = 0xAA;
  4918  026E  27CB  3180         	fcall	PL54	;call to abstracted procedure
  4919                           
  4920                           ;pin_manager.c: 103: PPSLOCKbits.PPSLOCKED = 0x01;
  4921  0270  140F               	bsf	15,0	;volatile
  4922                           
  4923                           ;pin_manager.c: 105: GIE = state;
  4924  0271  1C71               	btfss	PIN_MANAGER_Initialize@state,0
  4925  0272  2A75               	goto	u1540
  4926  0273  178B               	bsf	11,7	;volatile
  4927  0274  0008               	return
  4928  0275                     u1540:	
  4929  0275  138B               	bcf	11,7	;volatile
  4930  0276  0008               	return
  4931  0277                     __end_of_PIN_MANAGER_Initialize:	
  4932  0277                     __ptext44:	
  4933 ;; *************** function _PWM1_Initialize *****************
  4934 ;; Defined at:
  4935 ;;		line 58 in file "mcc_generated_files/pwm1.c"
  4936 ;; Parameters:    Size  Location     Type
  4937 ;;		None
  4938 ;; Auto vars:     Size  Location     Type
  4939 ;;		None
  4940 ;; Return value:  Size  Location     Type
  4941 ;;                  1    wreg      void 
  4942 ;; Registers used:
  4943 ;;		wreg, status,2
  4944 ;; Tracked objects:
  4945 ;;		On entry : 1F/2
  4946 ;;		On exit  : 1F/1B
  4947 ;;		Unchanged: 0/0
  4948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4952 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4953 ;;Total ram usage:        0 bytes
  4954 ;; Hardware stack levels used:    1
  4955 ;; Hardware stack levels required when called:    1
  4956 ;; This function calls:
  4957 ;;		Nothing
  4958 ;; This function is called by:
  4959 ;;		_SYSTEM_Initialize
  4960 ;; This function uses a non-reentrant model
  4961 ;;
  4962                           
  4963                           
  4964                           ;psect for function _PWM1_Initialize
  4965  0277                     _PWM1_Initialize:	
  4966                           
  4967                           ;pwm1.c: 63: PWM1INTE = 0x01;
  4968                           
  4969                           ;incstack = 0
  4970                           ; Regs used in _PWM1_Initialize: [wreg+status,2]
  4971  0277  3001               	movlw	1
  4972  0278  003B               	movlb	27	; select bank27
  4973  0279  009C               	movwf	28	;volatile
  4974                           
  4975                           ;pwm1.c: 66: PWM1INTF = 0x00;
  4976  027A  019D               	clrf	29	;volatile
  4977                           
  4978                           ;pwm1.c: 69: PWM1CLKCON = 0x00;
  4979  027B  019E               	clrf	30	;volatile
  4980                           
  4981                           ;pwm1.c: 72: PWM1LDCON = 0x00;
  4982  027C  019F               	clrf	31	;volatile
  4983                           
  4984                           ;pwm1.c: 75: PWM1OFCON = 0x00;
  4985  027D  01A0               	clrf	32	;volatile
  4986                           
  4987                           ;pwm1.c: 78: PWM1PHH = 0x00;
  4988  027E  0192               	clrf	18	;volatile
  4989                           
  4990                           ;pwm1.c: 81: PWM1PHL = 0x02;
  4991  027F  3002               	movlw	2
  4992  0280  0091               	movwf	17	;volatile
  4993                           
  4994                           ;pwm1.c: 84: PWM1DCH = 0x00;
  4995  0281  0194               	clrf	20	;volatile
  4996                           
  4997                           ;pwm1.c: 87: PWM1DCL = 0xa0;
  4998  0282  30A0               	movlw	160
  4999  0283  0093               	movwf	19	;volatile
  5000                           
  5001                           ;pwm1.c: 90: PWM1PRH = 0x06;
  5002  0284  3006               	movlw	6
  5003  0285  0096               	movwf	22	;volatile
  5004                           
  5005                           ;pwm1.c: 93: PWM1PRL = 0x3F;
  5006  0286  303F               	movlw	63
  5007  0287  0095               	movwf	21	;volatile
  5008                           
  5009                           ;pwm1.c: 96: PWM1OFH = 0x00;
  5010  0288  0198               	clrf	24	;volatile
  5011                           
  5012                           ;pwm1.c: 99: PWM1OFL = 0x01;
  5013  0289  3001               	movlw	1
  5014  028A  0097               	movwf	23	;volatile
  5015                           
  5016                           ;pwm1.c: 102: PWM1TMRH = 0x00;
  5017  028B  019A               	clrf	26	;volatile
  5018                           
  5019                           ;pwm1.c: 105: PWM1TMRL = 0x00;
  5020  028C  0199               	clrf	25	;volatile
  5021                           
  5022                           ;pwm1.c: 108: PWM1CON = 0x90;
  5023  028D  3090               	movlw	144
  5024  028E  009B               	movwf	27	;volatile
  5025  028F  0008               	return
  5026  0290                     __end_of_PWM1_Initialize:	
  5027  0290                     __ptext43:	
  5028 ;; *************** function _PWM2_Initialize *****************
  5029 ;; Defined at:
  5030 ;;		line 58 in file "mcc_generated_files/pwm2.c"
  5031 ;; Parameters:    Size  Location     Type
  5032 ;;		None
  5033 ;; Auto vars:     Size  Location     Type
  5034 ;;		None
  5035 ;; Return value:  Size  Location     Type
  5036 ;;                  1    wreg      void 
  5037 ;; Registers used:
  5038 ;;		wreg, status,2
  5039 ;; Tracked objects:
  5040 ;;		On entry : 1F/1B
  5041 ;;		On exit  : 1F/1B
  5042 ;;		Unchanged: 0/0
  5043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5047 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5048 ;;Total ram usage:        0 bytes
  5049 ;; Hardware stack levels used:    1
  5050 ;; Hardware stack levels required when called:    1
  5051 ;; This function calls:
  5052 ;;		Nothing
  5053 ;; This function is called by:
  5054 ;;		_SYSTEM_Initialize
  5055 ;; This function uses a non-reentrant model
  5056 ;;
  5057                           
  5058                           
  5059                           ;psect for function _PWM2_Initialize
  5060  0290                     _PWM2_Initialize:	
  5061                           
  5062                           ;pwm2.c: 63: PWM2INTE = 0x01;
  5063                           
  5064                           ;incstack = 0
  5065                           ; Regs used in _PWM2_Initialize: [wreg+status,2]
  5066  0290  3001               	movlw	1
  5067  0291  00AC               	movwf	44	;volatile
  5068                           
  5069                           ;pwm2.c: 66: PWM2INTF = 0x00;
  5070  0292  01AD               	clrf	45	;volatile
  5071                           
  5072                           ;pwm2.c: 69: PWM2CLKCON = 0x00;
  5073  0293  01AE               	clrf	46	;volatile
  5074                           
  5075                           ;pwm2.c: 72: PWM2LDCON = 0x00;
  5076  0294  01AF               	clrf	47	;volatile
  5077                           
  5078                           ;pwm2.c: 75: PWM2OFCON = 0x00;
  5079  0295  01B0               	clrf	48	;volatile
  5080                           
  5081                           ;pwm2.c: 78: PWM2PHH = 0x00;
  5082  0296  01A2               	clrf	34	;volatile
  5083                           
  5084                           ;pwm2.c: 81: PWM2PHL = 0x02;
  5085  0297  3002               	movlw	2
  5086  0298  00A1               	movwf	33	;volatile
  5087                           
  5088                           ;pwm2.c: 84: PWM2DCH = 0x00;
  5089  0299  01A4               	clrf	36	;volatile
  5090                           
  5091                           ;pwm2.c: 87: PWM2DCL = 0xA0;
  5092  029A  30A0               	movlw	160
  5093  029B  00A3               	movwf	35	;volatile
  5094                           
  5095                           ;pwm2.c: 90: PWM2PRH = 0x06;
  5096  029C  3006               	movlw	6
  5097  029D  00A6               	movwf	38	;volatile
  5098                           
  5099                           ;pwm2.c: 93: PWM2PRL = 0x3F;
  5100  029E  303F               	movlw	63
  5101  029F  00A5               	movwf	37	;volatile
  5102                           
  5103                           ;pwm2.c: 96: PWM2OFH = 0x00;
  5104  02A0  01A8               	clrf	40	;volatile
  5105                           
  5106                           ;pwm2.c: 99: PWM2OFL = 0x01;
  5107  02A1  3001               	movlw	1
  5108  02A2  00A7               	movwf	39	;volatile
  5109                           
  5110                           ;pwm2.c: 102: PWM2TMRH = 0x00;
  5111  02A3  01AA               	clrf	42	;volatile
  5112                           
  5113                           ;pwm2.c: 105: PWM2TMRL = 0x00;
  5114  02A4  01A9               	clrf	41	;volatile
  5115                           
  5116                           ;pwm2.c: 108: PWM2CON = 0x90;
  5117  02A5  3090               	movlw	144
  5118  02A6  00AB               	movwf	43	;volatile
  5119  02A7  0008               	return
  5120  02A8                     __end_of_PWM2_Initialize:	
  5121  02A8                     __ptext39:	
  5122 ;; *************** function _WDT_Initialize *****************
  5123 ;; Defined at:
  5124 ;;		line 90 in file "mcc_generated_files/mcc.c"
  5125 ;; Parameters:    Size  Location     Type
  5126 ;;		None
  5127 ;; Auto vars:     Size  Location     Type
  5128 ;;		None
  5129 ;; Return value:  Size  Location     Type
  5130 ;;                  1    wreg      void 
  5131 ;; Registers used:
  5132 ;;		wreg
  5133 ;; Tracked objects:
  5134 ;;		On entry : 1F/1
  5135 ;;		On exit  : 1F/1
  5136 ;;		Unchanged: 0/0
  5137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5141 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5142 ;;Total ram usage:        0 bytes
  5143 ;; Hardware stack levels used:    1
  5144 ;; Hardware stack levels required when called:    1
  5145 ;; This function calls:
  5146 ;;		Nothing
  5147 ;; This function is called by:
  5148 ;;		_SYSTEM_Initialize
  5149 ;; This function uses a non-reentrant model
  5150 ;;
  5151                           
  5152                           
  5153                           ;psect for function _WDT_Initialize
  5154  02A8                     _WDT_Initialize:	
  5155                           
  5156                           ;mcc.c: 93: WDTCON = 0x16;
  5157                           
  5158                           ;incstack = 0
  5159                           ; Regs used in _WDT_Initialize: [wreg]
  5160  02A8  3016               	movlw	22
  5161  02A9  0097               	movwf	23	;volatile
  5162  02AA  0008               	return
  5163  02AB                     __end_of_WDT_Initialize:	
  5164  02AB                     __ptext37:	
  5165 ;; *************** function _adc_init *****************
  5166 ;; Defined at:
  5167 ;;		line 105 in file "src/api/sample.c"
  5168 ;; Parameters:    Size  Location     Type
  5169 ;;  ch              1    wreg     enum E4978
  5170 ;; Auto vars:     Size  Location     Type
  5171 ;;  ch              1    2[COMMON] enum E4978
  5172 ;; Return value:  Size  Location     Type
  5173 ;;                  1    wreg      void 
  5174 ;; Registers used:
  5175 ;;		wreg, status,2, status,0
  5176 ;; Tracked objects:
  5177 ;;		On entry : 1F/2
  5178 ;;		On exit  : 1F/1
  5179 ;;		Unchanged: 0/0
  5180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5182 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5183 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5184 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5185 ;;Total ram usage:        2 bytes
  5186 ;; Hardware stack levels used:    1
  5187 ;; Hardware stack levels required when called:    1
  5188 ;; This function calls:
  5189 ;;		Nothing
  5190 ;; This function is called by:
  5191 ;;		_adc_sample
  5192 ;; This function uses a non-reentrant model
  5193 ;;
  5194                           
  5195                           
  5196                           ;psect for function _adc_init
  5197  02AB                     _adc_init:	
  5198                           
  5199                           ;incstack = 0
  5200                           ; Regs used in _adc_init: [wreg+status,2+status,0]
  5201                           ;adc_init@ch stored from wreg
  5202  02AB  00F2               	movwf	adc_init@ch
  5203  02AC                     l613:	
  5204                           ;sample.c: 107: while (ADCON0bits.GO_nDONE);
  5205                           
  5206  02AC  0021               	movlb	1	; select bank1
  5207  02AD  189D               	btfsc	29,1	;volatile
  5208  02AE  2AAC               	goto	l613
  5209                           
  5210                           ;sample.c: 108: ADCON0bits.CHS = ch;
  5211  02AF  0872               	movf	adc_init@ch,w
  5212  02B0  00F1               	movwf	??_adc_init
  5213  02B1  0DF1               	rlf	??_adc_init,f
  5214  02B2  0DF1               	rlf	??_adc_init,f
  5215  02B3  081D               	movf	29,w	;volatile
  5216  02B4  0671               	xorwf	??_adc_init,w
  5217  02B5  3983               	andlw	-125
  5218  02B6  0671               	xorwf	??_adc_init,w
  5219  02B7  009D               	movwf	29	;volatile
  5220                           
  5221                           ;sample.c: 109: ADCON0bits.ADON = 1;
  5222  02B8  141D               	bsf	29,0	;volatile
  5223                           
  5224                           ;sample.c: 110: ADCON1 = 0x63;
  5225                           
  5226                           ;sample.c: 111: ADCON2 = 0x00;
  5227                           
  5228                           ;sample.c: 112: ADRESL = 0x00;
  5229                           
  5230                           ;sample.c: 113: ADRESH = 0x00;
  5231  02B9  2FB9               	ljmp	PL40	;call to abstracted procedure
  5232  02BA                     __end_of_adc_init:	
  5233  02BA                     __ptext36:	
  5234 ;; *************** function _fvr_set_gain *****************
  5235 ;; Defined at:
  5236 ;;		line 96 in file "src/api/sample.c"
  5237 ;; Parameters:    Size  Location     Type
  5238 ;;  g               1    wreg     unsigned char 
  5239 ;; Auto vars:     Size  Location     Type
  5240 ;;  g               1    2[COMMON] unsigned char 
  5241 ;;  t8              1    1[COMMON] unsigned char 
  5242 ;; Return value:  Size  Location     Type
  5243 ;;                  1    wreg      void 
  5244 ;; Registers used:
  5245 ;;		wreg, status,2, status,0
  5246 ;; Tracked objects:
  5247 ;;		On entry : 1F/0
  5248 ;;		On exit  : 1F/2
  5249 ;;		Unchanged: 0/0
  5250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5252 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5254 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5255 ;;Total ram usage:        2 bytes
  5256 ;; Hardware stack levels used:    1
  5257 ;; Hardware stack levels required when called:    1
  5258 ;; This function calls:
  5259 ;;		Nothing
  5260 ;; This function is called by:
  5261 ;;		_adc_sample
  5262 ;; This function uses a non-reentrant model
  5263 ;;
  5264                           
  5265                           
  5266                           ;psect for function _fvr_set_gain
  5267  02BA                     _fvr_set_gain:	
  5268                           
  5269                           ;incstack = 0
  5270                           ; Regs used in _fvr_set_gain: [wreg+status,2+status,0]
  5271                           ;fvr_set_gain@g stored from wreg
  5272  02BA  00F2               	movwf	fvr_set_gain@g
  5273                           
  5274                           ;sample.c: 98: uint8_t t8=0x80;
  5275  02BB  3080               	movlw	128
  5276  02BC  00F1               	movwf	fvr_set_gain@t8
  5277                           
  5278                           ;sample.c: 99: if(g>3)g=3;
  5279  02BD  3004               	movlw	4
  5280  02BE  0272               	subwf	fvr_set_gain@g,w
  5281  02BF  1C03               	skipc
  5282  02C0  2AC3               	goto	l3152
  5283  02C1  3003               	movlw	3
  5284  02C2  00F2               	movwf	fvr_set_gain@g
  5285  02C3                     l3152:	
  5286                           
  5287                           ;sample.c: 100: t8|=g;
  5288  02C3  0872               	movf	fvr_set_gain@g,w
  5289  02C4  04F1               	iorwf	fvr_set_gain@t8,f
  5290                           
  5291                           ;sample.c: 101: FVRCON = t8;
  5292  02C5  0871               	movf	fvr_set_gain@t8,w
  5293  02C6  0022               	movlb	2	; select bank2
  5294  02C7  0097               	movwf	23	;volatile
  5295  02C8                     l607:	
  5296                           ;sample.c: 102: while(!(FVRCONbits.FVRRDY));
  5297                           
  5298  02C8  1B17               	btfsc	23,6	;volatile
  5299  02C9  0008               	return
  5300  02CA  2AC8               	goto	l607
  5301  02CB                     __end_of_fvr_set_gain:	
  5302  02CB                     __ptext30:	
  5303 ;; *************** function _calc_rs_lo_avg *****************
  5304 ;; Defined at:
  5305 ;;		line 404 in file "src/api/sample.c"
  5306 ;; Parameters:    Size  Location     Type
  5307 ;;  x               2    9[COMMON] unsigned int 
  5308 ;; Auto vars:     Size  Location     Type
  5309 ;;  t32             4    7[BANK0 ] unsigned long 
  5310 ;;  i               1   11[BANK0 ] unsigned char 
  5311 ;; Return value:  Size  Location     Type
  5312 ;;                  2    9[COMMON] unsigned int 
  5313 ;; Registers used:
  5314 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5315 ;; Tracked objects:
  5316 ;;		On entry : 1F/0
  5317 ;;		On exit  : 1F/0
  5318 ;;		Unchanged: 0/0
  5319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5320 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5321 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5322 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5323 ;;      Totals:         2       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5324 ;;Total ram usage:        9 bytes
  5325 ;; Hardware stack levels used:    1
  5326 ;; Hardware stack levels required when called:    2
  5327 ;; This function calls:
  5328 ;;		___lldiv
  5329 ;; This function is called by:
  5330 ;;		_main
  5331 ;; This function uses a non-reentrant model
  5332 ;;
  5333                           
  5334                           
  5335                           ;psect for function _calc_rs_lo_avg
  5336  02CB                     _calc_rs_lo_avg:	
  5337                           
  5338                           ;sample.c: 406: uint8_t i;
  5339                           ;sample.c: 407: uint32_t t32=0;
  5340                           
  5341                           ;incstack = 0
  5342                           ; Regs used in _calc_rs_lo_avg: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5343  02CB  01A7               	clrf	calc_rs_lo_avg@t32
  5344  02CC  01A8               	clrf	calc_rs_lo_avg@t32+1
  5345  02CD  01A9               	clrf	calc_rs_lo_avg@t32+2
  5346  02CE  01AA               	clrf	calc_rs_lo_avg@t32+3
  5347                           
  5348                           ;sample.c: 409: for(i=0;i<4;i++){
  5349  02CF  01AB               	clrf	calc_rs_lo_avg@i
  5350  02D0                     l4440:	
  5351                           
  5352                           ;sample.c: 410: rsLoAvgBuf[i]=rsLoAvgBuf[i+1];
  5353  02D0  352B               	lslf	calc_rs_lo_avg@i,w
  5354  02D1  3E22               	addlw	(low ((_rsLoAvgBuf| (0+256)+2)))& (0+255)
  5355  02D2  0086               	movwf	6
  5356  02D3  3001               	movlw	1	; select bank2/3
  5357  02D4  0087               	movwf	7
  5358  02D5  352B               	lslf	calc_rs_lo_avg@i,w
  5359  02D6  3E20               	addlw	(low (_rsLoAvgBuf| (0+256)))& (0+255)
  5360  02D7  0084               	movwf	4
  5361  02D8  3001               	movlw	1	; select bank2/3
  5362  02D9  0085               	movwf	5
  5363  02DA  3F40               	moviw [0]fsr1
  5364  02DB  3F80               	movwi [0]fsr0
  5365  02DC  3F41               	moviw [1]fsr1
  5366  02DD  3F81               	movwi [1]fsr0
  5367                           
  5368                           ;sample.c: 411: t32+=rsLoAvgBuf[i];
  5369  02DE  352B               	lslf	calc_rs_lo_avg@i,w
  5370  02DF  3E20               	addlw	(low (_rsLoAvgBuf| (0+256)))& (0+255)
  5371  02E0  0086               	movwf	6
  5372  02E1  3F40               	moviw [0]fsr1
  5373  02E2  00A5               	movwf	??_calc_rs_lo_avg
  5374  02E3  3F41               	moviw [1]fsr1
  5375  02E4  00A6               	movwf	??_calc_rs_lo_avg+1
  5376  02E5  0825               	movf	??_calc_rs_lo_avg,w
  5377  02E6  07A7               	addwf	calc_rs_lo_avg@t32,f
  5378  02E7  0826               	movf	??_calc_rs_lo_avg+1,w
  5379  02E8  3DA8               	addwfc	calc_rs_lo_avg@t32+1,f
  5380  02E9  3000               	movlw	0
  5381  02EA  3DA9               	addwfc	calc_rs_lo_avg@t32+2,f
  5382  02EB  3DAA               	addwfc	calc_rs_lo_avg@t32+3,f
  5383  02EC  3004               	movlw	4
  5384  02ED  0AAB               	incf	calc_rs_lo_avg@i,f
  5385  02EE  022B               	subwf	calc_rs_lo_avg@i,w
  5386  02EF  1C03               	skipc
  5387  02F0  2AD0               	goto	l4440
  5388                           
  5389                           ;sample.c: 412: }
  5390                           ;sample.c: 413: rsLoAvgBuf[i]=x;
  5391  02F1  352B               	lslf	calc_rs_lo_avg@i,w
  5392  02F2  3E20               	addlw	(low (_rsLoAvgBuf| (0+256)))& (0+255)
  5393  02F3  0086               	movwf	6
  5394  02F4  0879               	movf	calc_rs_lo_avg@x,w
  5395  02F5  3FC0               	movwi [0]fsr1
  5396  02F6  087A               	movf	calc_rs_lo_avg@x+1,w
  5397  02F7  3FC1               	movwi [1]fsr1
  5398                           
  5399                           ;sample.c: 414: t32+=x;
  5400  02F8  0879               	movf	calc_rs_lo_avg@x,w
  5401  02F9  07A7               	addwf	calc_rs_lo_avg@t32,f
  5402  02FA  087A               	movf	calc_rs_lo_avg@x+1,w
  5403  02FB  3DA8               	addwfc	calc_rs_lo_avg@t32+1,f
  5404  02FC  3000               	movlw	0
  5405  02FD  3DA9               	addwfc	calc_rs_lo_avg@t32+2,f
  5406  02FE  3DAA               	addwfc	calc_rs_lo_avg@t32+3,f
  5407                           
  5408                           ;sample.c: 415: t32/=5;
  5409  02FF  3005               	movlw	5
  5410  0300  00F1               	movwf	___lldiv@divisor
  5411  0301  01F2               	clrf	___lldiv@divisor+1
  5412  0302  01F3               	clrf	___lldiv@divisor+2
  5413  0303  01F4               	clrf	___lldiv@divisor+3
  5414  0304  082A               	movf	calc_rs_lo_avg@t32+3,w
  5415  0305  00F8               	movwf	___lldiv@dividend+3
  5416  0306  0829               	movf	calc_rs_lo_avg@t32+2,w
  5417  0307  00F7               	movwf	___lldiv@dividend+2
  5418  0308  0828               	movf	calc_rs_lo_avg@t32+1,w
  5419  0309  00F6               	movwf	___lldiv@dividend+1
  5420  030A  0827               	movf	calc_rs_lo_avg@t32,w
  5421  030B  00F5               	movwf	___lldiv@dividend
  5422  030C  262A               	fcall	___lldiv
  5423  030D  0874               	movf	?___lldiv+3,w
  5424  030E  00AA               	movwf	calc_rs_lo_avg@t32+3
  5425  030F  0873               	movf	?___lldiv+2,w
  5426  0310  00A9               	movwf	calc_rs_lo_avg@t32+2
  5427  0311  0872               	movf	?___lldiv+1,w
  5428  0312  00A8               	movwf	calc_rs_lo_avg@t32+1
  5429  0313  0871               	movf	?___lldiv,w
  5430  0314  00A7               	movwf	calc_rs_lo_avg@t32
  5431                           
  5432                           ;sample.c: 416: return (uint16_t)t32;
  5433  0315  0828               	movf	calc_rs_lo_avg@t32+1,w
  5434  0316  00FA               	movwf	?_calc_rs_lo_avg+1
  5435  0317  0827               	movf	calc_rs_lo_avg@t32,w
  5436  0318  00F9               	movwf	?_calc_rs_lo_avg
  5437  0319  0008               	return
  5438  031A                     __end_of_calc_rs_lo_avg:	
  5439  031A                     __ptext29:	
  5440 ;; *************** function _calc_temp_rc *****************
  5441 ;; Defined at:
  5442 ;;		line 202 in file "src/api/sample.c"
  5443 ;; Parameters:    Size  Location     Type
  5444 ;;		None
  5445 ;; Auto vars:     Size  Location     Type
  5446 ;;  y               4   17[BANK0 ] unsigned long 
  5447 ;;  x               4   13[BANK0 ] unsigned long 
  5448 ;; Return value:  Size  Location     Type
  5449 ;;                  4    5[BANK0 ] unsigned long 
  5450 ;; Registers used:
  5451 ;;		wreg, status,2, status,0, pclath, cstack
  5452 ;; Tracked objects:
  5453 ;;		On entry : 1F/0
  5454 ;;		On exit  : 1F/0
  5455 ;;		Unchanged: 0/0
  5456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5457 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5458 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5459 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5460 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5461 ;;Total ram usage:       16 bytes
  5462 ;; Hardware stack levels used:    1
  5463 ;; Hardware stack levels required when called:    2
  5464 ;; This function calls:
  5465 ;;		___lldiv
  5466 ;;		___lmul
  5467 ;; This function is called by:
  5468 ;;		_main
  5469 ;; This function uses a non-reentrant model
  5470 ;;
  5471                           
  5472                           
  5473                           ;psect for function _calc_temp_rc
  5474  031A                     _calc_temp_rc:	
  5475                           
  5476                           ;sample.c: 205: uint32_t x,y;
  5477                           ;sample.c: 206: x=300000UL;
  5478                           
  5479                           ;incstack = 0
  5480                           ; Regs used in _calc_temp_rc: [wreg+status,2+status,0+pclath+cstack]
  5481  031A  3004               	movlw	4
  5482  031B  01B0               	clrf	calc_temp_rc@x+3
  5483  031C  00AF               	movwf	calc_temp_rc@x+2
  5484  031D  3093               	movlw	147
  5485  031E  00AE               	movwf	calc_temp_rc@x+1
  5486  031F  30E0               	movlw	224
  5487  0320  00AD               	movwf	calc_temp_rc@x
  5488                           
  5489                           ;sample.c: 207: x=x*rtAdcValueRcLo;
  5490  0321  0850               	movf	_rtAdcValueRcLo,w
  5491  0322  00F1               	movwf	___lmul@multiplier
  5492  0323  0851               	movf	_rtAdcValueRcLo+1,w
  5493  0324  00F2               	movwf	___lmul@multiplier+1
  5494  0325  01F3               	clrf	___lmul@multiplier+2
  5495  0326  01F4               	clrf	___lmul@multiplier+3
  5496  0327  0830               	movf	calc_temp_rc@x+3,w
  5497  0328  00F8               	movwf	___lmul@multiplicand+3
  5498  0329  082F               	movf	calc_temp_rc@x+2,w
  5499  032A  00F7               	movwf	___lmul@multiplicand+2
  5500  032B  082E               	movf	calc_temp_rc@x+1,w
  5501  032C  00F6               	movwf	___lmul@multiplicand+1
  5502  032D  082D               	movf	calc_temp_rc@x,w
  5503  032E  00F5               	movwf	___lmul@multiplicand
  5504  032F  2602  3180         	fcall	___lmul
  5505  0331  0874               	movf	?___lmul+3,w
  5506  0332  00B0               	movwf	calc_temp_rc@x+3
  5507  0333  0873               	movf	?___lmul+2,w
  5508  0334  00AF               	movwf	calc_temp_rc@x+2
  5509  0335  0872               	movf	?___lmul+1,w
  5510  0336  00AE               	movwf	calc_temp_rc@x+1
  5511  0337  0871               	movf	?___lmul,w
  5512  0338  00AD               	movwf	calc_temp_rc@x
  5513                           
  5514                           ;sample.c: 210: y=rtAdcValueRcHi;
  5515  0339  084E               	movf	_rtAdcValueRcHi,w
  5516  033A  00B1               	movwf	calc_temp_rc@y
  5517  033B  084F               	movf	_rtAdcValueRcHi+1,w
  5518  033C  00B2               	movwf	calc_temp_rc@y+1
  5519  033D  300C               	movlw	12
  5520  033E  01B3               	clrf	calc_temp_rc@y+2
  5521  033F  01B4               	clrf	calc_temp_rc@y+3
  5522                           
  5523                           ;sample.c: 211: y=y*3140;
  5524  0340  01F4               	clrf	___lmul@multiplier+3
  5525  0341  01F3               	clrf	___lmul@multiplier+2
  5526  0342  00F2               	movwf	___lmul@multiplier+1
  5527  0343  3044               	movlw	68
  5528  0344  00F1               	movwf	___lmul@multiplier
  5529  0345  0834               	movf	calc_temp_rc@y+3,w
  5530  0346  00F8               	movwf	___lmul@multiplicand+3
  5531  0347  0833               	movf	calc_temp_rc@y+2,w
  5532  0348  00F7               	movwf	___lmul@multiplicand+2
  5533  0349  0832               	movf	calc_temp_rc@y+1,w
  5534  034A  00F6               	movwf	___lmul@multiplicand+1
  5535  034B  0831               	movf	calc_temp_rc@y,w
  5536  034C  00F5               	movwf	___lmul@multiplicand
  5537  034D  2602  3180         	fcall	___lmul
  5538  034F  0874               	movf	?___lmul+3,w
  5539  0350  00B4               	movwf	calc_temp_rc@y+3
  5540  0351  0873               	movf	?___lmul+2,w
  5541  0352  00B3               	movwf	calc_temp_rc@y+2
  5542  0353  0872               	movf	?___lmul+1,w
  5543  0354  00B2               	movwf	calc_temp_rc@y+1
  5544  0355  0871               	movf	?___lmul,w
  5545  0356  00B1               	movwf	calc_temp_rc@y
  5546                           
  5547                           ;sample.c: 212: y=y/100;
  5548  0357  3064               	movlw	100
  5549  0358  00F1               	movwf	___lldiv@divisor
  5550  0359  01F2               	clrf	___lldiv@divisor+1
  5551  035A  01F3               	clrf	___lldiv@divisor+2
  5552  035B  01F4               	clrf	___lldiv@divisor+3
  5553  035C  0834               	movf	calc_temp_rc@y+3,w
  5554  035D  00F8               	movwf	___lldiv@dividend+3
  5555  035E  0833               	movf	calc_temp_rc@y+2,w
  5556  035F  00F7               	movwf	___lldiv@dividend+2
  5557  0360  0832               	movf	calc_temp_rc@y+1,w
  5558  0361  00F6               	movwf	___lldiv@dividend+1
  5559  0362  0831               	movf	calc_temp_rc@y,w
  5560  0363  00F5               	movwf	___lldiv@dividend
  5561  0364  262A  3180         	fcall	___lldiv
  5562  0366  2799  3180         	fcall	PL24	;call to abstracted procedure
  5563                           
  5564                           ;sample.c: 213: y=y-rtAdcValueRcLo;
  5565  0368  0850               	movf	_rtAdcValueRcLo,w
  5566  0369  00A9               	movwf	??_calc_temp_rc
  5567  036A  0851               	movf	_rtAdcValueRcLo+1,w
  5568  036B  00AA               	movwf	??_calc_temp_rc+1
  5569  036C  01AB               	clrf	??_calc_temp_rc+2
  5570  036D  01AC               	clrf	??_calc_temp_rc+3
  5571  036E  0829               	movf	??_calc_temp_rc,w
  5572  036F  02B1               	subwf	calc_temp_rc@y,f
  5573  0370  082A               	movf	??_calc_temp_rc+1,w
  5574  0371  3BB2               	subwfb	calc_temp_rc@y+1,f
  5575  0372  082B               	movf	??_calc_temp_rc+2,w
  5576  0373  3BB3               	subwfb	calc_temp_rc@y+2,f
  5577  0374  082C               	movf	??_calc_temp_rc+3,w
  5578  0375  3BB4               	subwfb	calc_temp_rc@y+3,f
  5579                           
  5580                           ;sample.c: 216: y=x/y;
  5581  0376  0834               	movf	calc_temp_rc@y+3,w
  5582  0377  00F4               	movwf	___lldiv@divisor+3
  5583  0378  0833               	movf	calc_temp_rc@y+2,w
  5584  0379  00F3               	movwf	___lldiv@divisor+2
  5585  037A  0832               	movf	calc_temp_rc@y+1,w
  5586  037B  00F2               	movwf	___lldiv@divisor+1
  5587  037C  0831               	movf	calc_temp_rc@y,w
  5588  037D  00F1               	movwf	___lldiv@divisor
  5589  037E  0830               	movf	calc_temp_rc@x+3,w
  5590  037F  00F8               	movwf	___lldiv@dividend+3
  5591  0380  082F               	movf	calc_temp_rc@x+2,w
  5592  0381  00F7               	movwf	___lldiv@dividend+2
  5593  0382  082E               	movf	calc_temp_rc@x+1,w
  5594  0383  00F6               	movwf	___lldiv@dividend+1
  5595  0384  082D               	movf	calc_temp_rc@x,w
  5596  0385  00F5               	movwf	___lldiv@dividend
  5597  0386  262A  3180         	fcall	___lldiv
  5598  0388  2799  3180         	fcall	PL24	;call to abstracted procedure
  5599                           
  5600                           ;sample.c: 217: if(y<2000)y=2000;
  5601  038A  0834               	movf	calc_temp_rc@y+3,w
  5602  038B  1D03               	btfss	3,2
  5603  038C  2B9C               	goto	l4330
  5604  038D  0833               	movf	calc_temp_rc@y+2,w
  5605  038E  1D03               	btfss	3,2
  5606  038F  2B9C               	goto	l4330
  5607  0390  30D0               	movlw	208
  5608  0391  0231               	subwf	calc_temp_rc@y,w
  5609  0392  3007               	movlw	7
  5610  0393  3B32               	subwfb	calc_temp_rc@y+1,w
  5611  0394  1803               	btfsc	3,0
  5612  0395  2B9C               	goto	l4330
  5613  0396  3007               	movlw	7
  5614  0397  01B4               	clrf	calc_temp_rc@y+3
  5615  0398  01B3               	clrf	calc_temp_rc@y+2
  5616  0399  00B2               	movwf	calc_temp_rc@y+1
  5617  039A  30D0               	movlw	208
  5618  039B  00B1               	movwf	calc_temp_rc@y
  5619  039C                     l4330:	
  5620                           
  5621                           ;sample.c: 218: if(y>25000)y=25000;
  5622  039C  0834               	movf	calc_temp_rc@y+3,w
  5623  039D  1D03               	btfss	3,2
  5624  039E  2BA8               	goto	l4332
  5625  039F  0833               	movf	calc_temp_rc@y+2,w
  5626  03A0  1D03               	btfss	3,2
  5627  03A1  2BA8               	goto	l4332
  5628  03A2  30A9               	movlw	169
  5629  03A3  0231               	subwf	calc_temp_rc@y,w
  5630  03A4  3061               	movlw	97
  5631  03A5  3B32               	subwfb	calc_temp_rc@y+1,w
  5632  03A6  1C03               	btfss	3,0
  5633  03A7  2BAE               	goto	l645
  5634  03A8                     l4332:	
  5635  03A8  3061               	movlw	97
  5636  03A9  01B4               	clrf	calc_temp_rc@y+3
  5637  03AA  01B3               	clrf	calc_temp_rc@y+2
  5638  03AB  00B2               	movwf	calc_temp_rc@y+1
  5639  03AC  30A8               	movlw	168
  5640  03AD  00B1               	movwf	calc_temp_rc@y
  5641  03AE                     l645:	
  5642                           
  5643                           ;sample.c: 220: return y;
  5644  03AE  0834               	movf	calc_temp_rc@y+3,w
  5645  03AF  00A8               	movwf	?_calc_temp_rc+3
  5646  03B0  0833               	movf	calc_temp_rc@y+2,w
  5647  03B1  00A7               	movwf	?_calc_temp_rc+2
  5648  03B2  0832               	movf	calc_temp_rc@y+1,w
  5649  03B3  00A6               	movwf	?_calc_temp_rc+1
  5650  03B4  0831               	movf	calc_temp_rc@y,w
  5651  03B5  00A5               	movwf	?_calc_temp_rc
  5652  03B6  0008               	return
  5653  03B7                     __end_of_calc_temp_rc:	
  5654  03B7                     __ptext11:	
  5655 ;; *************** function _pid_pwm1_idrv_b_b *****************
  5656 ;; Defined at:
  5657 ;;		line 239 in file "src/api/sample.c"
  5658 ;; Parameters:    Size  Location     Type
  5659 ;;		None
  5660 ;; Auto vars:     Size  Location     Type
  5661 ;;  t32             4   18[BANK0 ] long 
  5662 ;; Return value:  Size  Location     Type
  5663 ;;                  1    wreg      void 
  5664 ;; Registers used:
  5665 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5666 ;; Tracked objects:
  5667 ;;		On entry : 1F/0
  5668 ;;		On exit  : 1E/0
  5669 ;;		Unchanged: 0/0
  5670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5672 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5673 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5674 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5675 ;;Total ram usage:        5 bytes
  5676 ;; Hardware stack levels used:    1
  5677 ;; Hardware stack levels required when called:    3
  5678 ;; This function calls:
  5679 ;;		___aldiv
  5680 ;;		___lmul
  5681 ;;		_set_idrv_pwm1_duty
  5682 ;; This function is called by:
  5683 ;;		_main
  5684 ;; This function uses a non-reentrant model
  5685 ;;
  5686                           
  5687                           
  5688                           ;psect for function _pid_pwm1_idrv_b_b
  5689  03B7                     _pid_pwm1_idrv_b_b:	
  5690                           
  5691                           ;sample.c: 241: int32_t t32;
  5692                           ;sample.c: 242: t32=(resRs-resRc);
  5693                           
  5694                           ;incstack = 0
  5695                           ; Regs used in _pid_pwm1_idrv_b_b: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5696  03B7  0021               	movlb	1	; select bank1
  5697  03B8  0867               	movf	(_resRs+3)^(0+128),w
  5698  03B9  0020               	movlb	0	; select bank0
  5699  03BA  00B5               	movwf	pid_pwm1_idrv_b_b@t32+3
  5700  03BB  0021               	movlb	1	; select bank1
  5701  03BC  0866               	movf	(_resRs+2)^(0+128),w
  5702  03BD  0020               	movlb	0	; select bank0
  5703  03BE  00B4               	movwf	pid_pwm1_idrv_b_b@t32+2
  5704  03BF  0021               	movlb	1	; select bank1
  5705  03C0  0865               	movf	(_resRs+1)^(0+128),w
  5706  03C1  0020               	movlb	0	; select bank0
  5707  03C2  00B3               	movwf	pid_pwm1_idrv_b_b@t32+1
  5708  03C3  0021               	movlb	1	; select bank1
  5709  03C4  0864               	movf	_resRs^(0+128),w
  5710  03C5  0020               	movlb	0	; select bank0
  5711  03C6  00B2               	movwf	pid_pwm1_idrv_b_b@t32
  5712  03C7  0021               	movlb	1	; select bank1
  5713  03C8  0860               	movf	_resRc^(0+128),w
  5714  03C9  0020               	movlb	0	; select bank0
  5715  03CA  02B2               	subwf	pid_pwm1_idrv_b_b@t32,f
  5716  03CB  0021               	movlb	1	; select bank1
  5717  03CC  0861               	movf	(_resRc+1)^(0+128),w
  5718  03CD  0020               	movlb	0	; select bank0
  5719  03CE  3BB3               	subwfb	pid_pwm1_idrv_b_b@t32+1,f
  5720  03CF  0021               	movlb	1	; select bank1
  5721  03D0  0862               	movf	(_resRc+2)^(0+128),w
  5722  03D1  0020               	movlb	0	; select bank0
  5723  03D2  3BB4               	subwfb	pid_pwm1_idrv_b_b@t32+2,f
  5724  03D3  0021               	movlb	1	; select bank1
  5725  03D4  0863               	movf	(_resRc+3)^(0+128),w
  5726  03D5  0020               	movlb	0	; select bank0
  5727  03D6  3BB5               	subwfb	pid_pwm1_idrv_b_b@t32+3,f
  5728                           
  5729                           ;sample.c: 243: switch(pidBbSm){
  5730  03D7  2D2E               	goto	l4384
  5731  03D8                     l4338:	
  5732                           
  5733                           ;sample.c: 246: case 1:
  5734                           ;sample.c: 247: pidTestNum=0;
  5735  03D8  01DF               	clrf	_pidTestNum
  5736  03D9                     l4340:	
  5737                           
  5738                           ;sample.c: 248: set_idrv_pwm1_duty(1200);
  5739  03D9  30B0               	movlw	176
  5740  03DA  00F3               	movwf	set_idrv_pwm1_duty@duty
  5741  03DB  3004               	movlw	4
  5742  03DC  00F4               	movwf	set_idrv_pwm1_duty@duty+1
  5743  03DD  2669  3180         	fcall	_set_idrv_pwm1_duty
  5744                           
  5745                           ;sample.c: 249: pidBbSm=2;
  5746  03DF  3002               	movlw	2
  5747  03E0  2D2B               	goto	L6
  5748  03E1                     l4344:	
  5749                           ;sample.c: 250: break;
  5750                           
  5751                           
  5752                           ;sample.c: 252: if(t32>4500){
  5753  03E1  1BB5               	btfsc	pid_pwm1_idrv_b_b@t32+3,7
  5754  03E2  2D38               	goto	l4386
  5755  03E3  0835               	movf	pid_pwm1_idrv_b_b@t32+3,w
  5756  03E4  1D03               	btfss	3,2
  5757  03E5  2BEF               	goto	l4346
  5758  03E6  0834               	movf	pid_pwm1_idrv_b_b@t32+2,w
  5759  03E7  1D03               	btfss	3,2
  5760  03E8  2BEF               	goto	l4346
  5761  03E9  3095               	movlw	149
  5762  03EA  0232               	subwf	pid_pwm1_idrv_b_b@t32,w
  5763  03EB  3011               	movlw	17
  5764  03EC  3B33               	subwfb	pid_pwm1_idrv_b_b@t32+1,w
  5765  03ED  1C03               	btfss	3,0
  5766  03EE  2D38               	goto	l4386
  5767  03EF                     l4346:	
  5768                           
  5769                           ;sample.c: 253: set_idrv_pwm1_duty(5);
  5770  03EF  3005               	movlw	5
  5771  03F0  00F3               	movwf	set_idrv_pwm1_duty@duty
  5772  03F1  01F4               	clrf	set_idrv_pwm1_duty@duty+1
  5773  03F2  2669  3180         	fcall	_set_idrv_pwm1_duty
  5774                           
  5775                           ;sample.c: 254: pidBbSm=3;
  5776  03F4  3003               	movlw	3
  5777  03F5  2D2B               	goto	L6
  5778  03F6                     l4350:	
  5779                           ;sample.c: 255: break;
  5780                           
  5781                           
  5782                           ;sample.c: 259: if(t32<1500){
  5783  03F6  1BB5               	btfsc	pid_pwm1_idrv_b_b@t32+3,7
  5784  03F7  2C04               	goto	l4352
  5785  03F8  0835               	movf	pid_pwm1_idrv_b_b@t32+3,w
  5786  03F9  1D03               	btfss	3,2
  5787  03FA  2D38               	goto	l4386
  5788  03FB  0834               	movf	pid_pwm1_idrv_b_b@t32+2,w
  5789  03FC  1D03               	btfss	3,2
  5790  03FD  2D38               	goto	l4386
  5791  03FE  30DC               	movlw	220
  5792  03FF  0232               	subwf	pid_pwm1_idrv_b_b@t32,w
  5793  0400  3005               	movlw	5
  5794  0401  3B33               	subwfb	pid_pwm1_idrv_b_b@t32+1,w
  5795  0402  1803               	btfsc	3,0
  5796  0403  2D38               	goto	l4386
  5797  0404                     l4352:	
  5798                           
  5799                           ;sample.c: 260: bbt0=bbt1;
  5800  0404  0021               	movlb	1	; select bank1
  5801  0405  0843               	movf	(_bbt1+3)^(0+128),w
  5802  0406  00BF               	movwf	(_bbt0+3)^(0+128)
  5803  0407  0842               	movf	(_bbt1+2)^(0+128),w
  5804  0408  00BE               	movwf	(_bbt0+2)^(0+128)
  5805  0409  0841               	movf	(_bbt1+1)^(0+128),w
  5806  040A  00BD               	movwf	(_bbt0+1)^(0+128)
  5807  040B  0840               	movf	_bbt1^(0+128),w
  5808  040C  00BC               	movwf	_bbt0^(0+128)
  5809                           
  5810                           ;sample.c: 261: bbt1=globalTicker;
  5811  040D  0853               	movf	(_globalTicker+3)^(0+128),w	;volatile
  5812  040E  00C3               	movwf	(_bbt1+3)^(0+128)
  5813  040F  0852               	movf	(_globalTicker+2)^(0+128),w	;volatile
  5814  0410  00C2               	movwf	(_bbt1+2)^(0+128)
  5815  0411  0851               	movf	(_globalTicker+1)^(0+128),w	;volatile
  5816  0412  00C1               	movwf	(_bbt1+1)^(0+128)
  5817  0413  0850               	movf	_globalTicker^(0+128),w	;volatile
  5818  0414  00C0               	movwf	_bbt1^(0+128)
  5819                           
  5820                           ;sample.c: 262: pidTestNum++;
  5821  0415  0020               	movlb	0	; select bank0
  5822  0416  3005               	movlw	5
  5823  0417  0ADF               	incf	_pidTestNum,f
  5824                           
  5825                           ;sample.c: 263: if(pidTestNum>4){
  5826  0418  025F               	subwf	_pidTestNum,w
  5827  0419  1C03               	skipc
  5828  041A  2BD9               	goto	l4340
  5829                           
  5830                           ;sample.c: 264: pidBbSm=4;
  5831  041B  3004               	movlw	4
  5832  041C  2D2C               	goto	L5
  5833  041D                     l4364:	
  5834                           ;sample.c: 265: break;
  5835                           
  5836                           
  5837                           ;sample.c: 273: bbtu=bbt1-bbt0;
  5838  041D  0021               	movlb	1	; select bank1
  5839  041E  0843               	movf	(_bbt1+3)^(0+128),w
  5840  041F  00CB               	movwf	(_bbtu+3)^(0+128)
  5841  0420  0842               	movf	(_bbt1+2)^(0+128),w
  5842  0421  00CA               	movwf	(_bbtu+2)^(0+128)
  5843  0422  0841               	movf	(_bbt1+1)^(0+128),w
  5844  0423  00C9               	movwf	(_bbtu+1)^(0+128)
  5845  0424  0840               	movf	_bbt1^(0+128),w
  5846  0425  00C8               	movwf	_bbtu^(0+128)
  5847  0426  083C               	movf	_bbt0^(0+128),w
  5848  0427  02C8               	subwf	_bbtu^(0+128),f
  5849  0428  083D               	movf	(_bbt0+1)^(0+128),w
  5850  0429  3BC9               	subwfb	(_bbtu+1)^(0+128),f
  5851  042A  083E               	movf	(_bbt0+2)^(0+128),w
  5852  042B  3BCA               	subwfb	(_bbtu+2)^(0+128),f
  5853  042C  083F               	movf	(_bbt0+3)^(0+128),w
  5854  042D  3BCB               	subwfb	(_bbtu+3)^(0+128),f
  5855                           
  5856                           ;sample.c: 274: bbtu=bbtu/5;
  5857  042E  3005               	movlw	5
  5858  042F  0020               	movlb	0	; select bank0
  5859  0430  00A4               	movwf	___aldiv@divisor
  5860  0431  01A5               	clrf	___aldiv@divisor+1
  5861  0432  2776  3180         	fcall	PL10	;call to abstracted procedure
  5862  0434  2596  3180         	fcall	___aldiv
  5863  0436  0827               	movf	?___aldiv+3,w
  5864  0437  0021               	movlb	1	; select bank1
  5865  0438  00CB               	movwf	(_bbtu+3)^(0+128)
  5866  0439  0020               	movlb	0	; select bank0
  5867  043A  0826               	movf	?___aldiv+2,w
  5868  043B  0021               	movlb	1	; select bank1
  5869  043C  00CA               	movwf	(_bbtu+2)^(0+128)
  5870  043D  0020               	movlb	0	; select bank0
  5871  043E  0825               	movf	?___aldiv+1,w
  5872  043F  0021               	movlb	1	; select bank1
  5873  0440  00C9               	movwf	(_bbtu+1)^(0+128)
  5874  0441  0020               	movlb	0	; select bank0
  5875  0442  0824               	movf	?___aldiv,w
  5876  0443  0021               	movlb	1	; select bank1
  5877  0444  00C8               	movwf	_bbtu^(0+128)
  5878                           
  5879                           ;sample.c: 275: bbta=(bbmax-bbmin)/2;
  5880  0445  0857               	movf	(_bbmax+3)^(0+128),w
  5881  0446  0020               	movlb	0	; select bank0
  5882  0447  00AB               	movwf	___aldiv@dividend+3
  5883  0448  0021               	movlb	1	; select bank1
  5884  0449  0856               	movf	(_bbmax+2)^(0+128),w
  5885  044A  0020               	movlb	0	; select bank0
  5886  044B  00AA               	movwf	___aldiv@dividend+2
  5887  044C  0021               	movlb	1	; select bank1
  5888  044D  0855               	movf	(_bbmax+1)^(0+128),w
  5889  044E  0020               	movlb	0	; select bank0
  5890  044F  00A9               	movwf	___aldiv@dividend+1
  5891  0450  0021               	movlb	1	; select bank1
  5892  0451  0854               	movf	_bbmax^(0+128),w
  5893  0452  0020               	movlb	0	; select bank0
  5894  0453  00A8               	movwf	___aldiv@dividend
  5895  0454  0021               	movlb	1	; select bank1
  5896  0455  0858               	movf	_bbmin^(0+128),w
  5897  0456  0020               	movlb	0	; select bank0
  5898  0457  02A8               	subwf	___aldiv@dividend,f
  5899  0458  0021               	movlb	1	; select bank1
  5900  0459  0859               	movf	(_bbmin+1)^(0+128),w
  5901  045A  0020               	movlb	0	; select bank0
  5902  045B  3BA9               	subwfb	___aldiv@dividend+1,f
  5903  045C  0021               	movlb	1	; select bank1
  5904  045D  085A               	movf	(_bbmin+2)^(0+128),w
  5905  045E  0020               	movlb	0	; select bank0
  5906  045F  3BAA               	subwfb	___aldiv@dividend+2,f
  5907  0460  0021               	movlb	1	; select bank1
  5908  0461  085B               	movf	(_bbmin+3)^(0+128),w
  5909  0462  0020               	movlb	0	; select bank0
  5910  0463  3BAB               	subwfb	___aldiv@dividend+3,f
  5911  0464  3002               	movlw	2
  5912  0465  00A4               	movwf	___aldiv@divisor
  5913  0466  01A5               	clrf	___aldiv@divisor+1
  5914  0467  01A6               	clrf	___aldiv@divisor+2
  5915  0468  01A7               	clrf	___aldiv@divisor+3
  5916  0469  2596  3180         	fcall	___aldiv
  5917  046B  0827               	movf	?___aldiv+3,w
  5918  046C  0021               	movlb	1	; select bank1
  5919  046D  00C7               	movwf	(_bbta+3)^(0+128)
  5920  046E  0020               	movlb	0	; select bank0
  5921  046F  0826               	movf	?___aldiv+2,w
  5922  0470  0021               	movlb	1	; select bank1
  5923  0471  00C6               	movwf	(_bbta+2)^(0+128)
  5924  0472  0020               	movlb	0	; select bank0
  5925  0473  0825               	movf	?___aldiv+1,w
  5926  0474  0021               	movlb	1	; select bank1
  5927  0475  00C5               	movwf	(_bbta+1)^(0+128)
  5928  0476  0020               	movlb	0	; select bank0
  5929  0477  0824               	movf	?___aldiv,w
  5930  0478  0021               	movlb	1	; select bank1
  5931  0479  00C4               	movwf	_bbta^(0+128)
  5932                           
  5933                           ;sample.c: 276: bbu=(1200-5)/2;
  5934  047A  3002               	movlw	2
  5935  047B  01CF               	clrf	(_bbu+3)^(0+128)
  5936  047C  01CE               	clrf	(_bbu+2)^(0+128)
  5937  047D  00CD               	movwf	(_bbu+1)^(0+128)
  5938  047E  3055               	movlw	85
  5939  047F  00CC               	movwf	_bbu^(0+128)
  5940                           
  5941                           ;sample.c: 278: bbku=(bbu*40000)/(bbta*314);
  5942  0480  0847               	movf	(_bbta+3)^(0+128),w
  5943  0481  00F4               	movwf	___lmul@multiplier+3
  5944  0482  0846               	movf	(_bbta+2)^(0+128),w
  5945  0483  00F3               	movwf	___lmul@multiplier+2
  5946  0484  0845               	movf	(_bbta+1)^(0+128),w
  5947  0485  00F2               	movwf	___lmul@multiplier+1
  5948  0486  0844               	movf	_bbta^(0+128),w
  5949  0487  00F1               	movwf	___lmul@multiplier
  5950  0488  3001               	movlw	1
  5951  0489  01F8               	clrf	___lmul@multiplicand+3
  5952  048A  01F7               	clrf	___lmul@multiplicand+2
  5953  048B  00F6               	movwf	___lmul@multiplicand+1
  5954  048C  303A               	movlw	58
  5955  048D  00F5               	movwf	___lmul@multiplicand
  5956  048E  2602  3180         	fcall	___lmul
  5957  0490  0874               	movf	?___lmul+3,w
  5958  0491  00A7               	movwf	___aldiv@divisor+3
  5959  0492  0873               	movf	?___lmul+2,w
  5960  0493  00A6               	movwf	___aldiv@divisor+2
  5961  0494  0872               	movf	?___lmul+1,w
  5962  0495  00A5               	movwf	___aldiv@divisor+1
  5963  0496  0871               	movf	?___lmul,w
  5964  0497  00A4               	movwf	___aldiv@divisor
  5965  0498  3002               	movlw	2
  5966  0499  01F4               	clrf	___lmul@multiplier+3
  5967  049A  01F3               	clrf	___lmul@multiplier+2
  5968  049B  00F2               	movwf	___lmul@multiplier+1
  5969  049C  3055               	movlw	85
  5970  049D  00F1               	movwf	___lmul@multiplier
  5971  049E  309C               	movlw	156
  5972  049F  01F8               	clrf	___lmul@multiplicand+3
  5973  04A0  01F7               	clrf	___lmul@multiplicand+2
  5974  04A1  00F6               	movwf	___lmul@multiplicand+1
  5975  04A2  3040               	movlw	64
  5976  04A3  00F5               	movwf	___lmul@multiplicand
  5977  04A4  2602  3180         	fcall	___lmul
  5978  04A6  2789  3180         	fcall	PL14	;call to abstracted procedure
  5979  04A8  2596  3180         	fcall	___aldiv
  5980  04AA  0827               	movf	?___aldiv+3,w
  5981  04AB  0021               	movlb	1	; select bank1
  5982  04AC  00BB               	movwf	(_bbku+3)^(0+128)
  5983  04AD  0020               	movlb	0	; select bank0
  5984  04AE  0826               	movf	?___aldiv+2,w
  5985  04AF  0021               	movlb	1	; select bank1
  5986  04B0  00BA               	movwf	(_bbku+2)^(0+128)
  5987  04B1  0020               	movlb	0	; select bank0
  5988  04B2  0825               	movf	?___aldiv+1,w
  5989  04B3  0021               	movlb	1	; select bank1
  5990  04B4  00B9               	movwf	(_bbku+1)^(0+128)
  5991  04B5  0020               	movlb	0	; select bank0
  5992  04B6  0824               	movf	?___aldiv,w
  5993  04B7  0021               	movlb	1	; select bank1
  5994  04B8  00B8               	movwf	_bbku^(0+128)
  5995                           
  5996                           ;sample.c: 279: bbku*=100;
  5997  04B9  3064               	movlw	100
  5998  04BA  00F1               	movwf	___lmul@multiplier
  5999  04BB  01F2               	clrf	___lmul@multiplier+1
  6000  04BC  01F3               	clrf	___lmul@multiplier+2
  6001  04BD  01F4               	clrf	___lmul@multiplier+3
  6002  04BE  083B               	movf	(_bbku+3)^(0+128),w
  6003  04BF  00F8               	movwf	___lmul@multiplicand+3
  6004  04C0  083A               	movf	(_bbku+2)^(0+128),w
  6005  04C1  00F7               	movwf	___lmul@multiplicand+2
  6006  04C2  0839               	movf	(_bbku+1)^(0+128),w
  6007  04C3  00F6               	movwf	___lmul@multiplicand+1
  6008  04C4  0838               	movf	_bbku^(0+128),w
  6009  04C5  00F5               	movwf	___lmul@multiplicand
  6010  04C6  2602  3180         	fcall	___lmul
  6011  04C8  0874               	movf	?___lmul+3,w
  6012  04C9  0021               	movlb	1	; select bank1
  6013  04CA  00BB               	movwf	(_bbku+3)^(0+128)
  6014  04CB  0873               	movf	?___lmul+2,w
  6015  04CC  00BA               	movwf	(_bbku+2)^(0+128)
  6016  04CD  0872               	movf	?___lmul+1,w
  6017  04CE  00B9               	movwf	(_bbku+1)^(0+128)
  6018  04CF  0871               	movf	?___lmul,w
  6019  04D0  00B8               	movwf	_bbku^(0+128)
  6020                           
  6021                           ;sample.c: 281: PidKp=bbku*10/14;
  6022  04D1  300E               	movlw	14
  6023  04D2  2792  3180         	fcall	PL16	;call to abstracted procedure
  6024  04D4  083B               	movf	(_bbku+3)^(0+128),w
  6025  04D5  00F4               	movwf	___lmul@multiplier+3
  6026  04D6  083A               	movf	(_bbku+2)^(0+128),w
  6027  04D7  00F3               	movwf	___lmul@multiplier+2
  6028  04D8  0839               	movf	(_bbku+1)^(0+128),w
  6029  04D9  00F2               	movwf	___lmul@multiplier+1
  6030  04DA  0838               	movf	_bbku^(0+128),w
  6031  04DB  27B2  3180         	fcall	PL38	;call to abstracted procedure
  6032  04DD  2602  3180         	fcall	___lmul
  6033  04DF  2789  3180         	fcall	PL14	;call to abstracted procedure
  6034  04E1  2596  3180         	fcall	___aldiv
  6035  04E3  0827               	movf	?___aldiv+3,w
  6036  04E4  0021               	movlb	1	; select bank1
  6037  04E5  00AF               	movwf	(_PidKp+3)^(0+128)
  6038  04E6  0020               	movlb	0	; select bank0
  6039  04E7  0826               	movf	?___aldiv+2,w
  6040  04E8  0021               	movlb	1	; select bank1
  6041  04E9  00AE               	movwf	(_PidKp+2)^(0+128)
  6042  04EA  0020               	movlb	0	; select bank0
  6043  04EB  0825               	movf	?___aldiv+1,w
  6044  04EC  0021               	movlb	1	; select bank1
  6045  04ED  00AD               	movwf	(_PidKp+1)^(0+128)
  6046  04EE  0020               	movlb	0	; select bank0
  6047  04EF  0824               	movf	?___aldiv,w
  6048  04F0  0021               	movlb	1	; select bank1
  6049  04F1  00AC               	movwf	_PidKp^(0+128)
  6050                           
  6051                           ;sample.c: 282: PidTi=bbtu*10/20;
  6052  04F2  3014               	movlw	20
  6053  04F3  2792  3180         	fcall	PL16	;call to abstracted procedure
  6054  04F5  084B               	movf	(_bbtu+3)^(0+128),w
  6055  04F6  00F4               	movwf	___lmul@multiplier+3
  6056  04F7  084A               	movf	(_bbtu+2)^(0+128),w
  6057  04F8  00F3               	movwf	___lmul@multiplier+2
  6058  04F9  0849               	movf	(_bbtu+1)^(0+128),w
  6059  04FA  00F2               	movwf	___lmul@multiplier+1
  6060  04FB  0848               	movf	_bbtu^(0+128),w
  6061  04FC  27B2  3180         	fcall	PL38	;call to abstracted procedure
  6062  04FE  2602  3180         	fcall	___lmul
  6063  0500  2789  3180         	fcall	PL14	;call to abstracted procedure
  6064  0502  2596  3180         	fcall	___aldiv
  6065  0504  0827               	movf	?___aldiv+3,w
  6066  0505  0021               	movlb	1	; select bank1
  6067  0506  00B7               	movwf	(_PidTi+3)^(0+128)
  6068  0507  0020               	movlb	0	; select bank0
  6069  0508  0826               	movf	?___aldiv+2,w
  6070  0509  0021               	movlb	1	; select bank1
  6071  050A  00B6               	movwf	(_PidTi+2)^(0+128)
  6072  050B  0020               	movlb	0	; select bank0
  6073  050C  0825               	movf	?___aldiv+1,w
  6074  050D  0021               	movlb	1	; select bank1
  6075  050E  00B5               	movwf	(_PidTi+1)^(0+128)
  6076  050F  0020               	movlb	0	; select bank0
  6077  0510  0824               	movf	?___aldiv,w
  6078  0511  0021               	movlb	1	; select bank1
  6079  0512  00B4               	movwf	_PidTi^(0+128)
  6080                           
  6081                           ;sample.c: 283: PidTd=bbtu/8;
  6082  0513  3008               	movlw	8
  6083  0514  0020               	movlb	0	; select bank0
  6084  0515  00A4               	movwf	___aldiv@divisor
  6085  0516  01A5               	clrf	___aldiv@divisor+1
  6086  0517  2776  3180         	fcall	PL10	;call to abstracted procedure
  6087  0519  2596  3180         	fcall	___aldiv
  6088  051B  0827               	movf	?___aldiv+3,w
  6089  051C  0021               	movlb	1	; select bank1
  6090  051D  00B3               	movwf	(_PidTd+3)^(0+128)
  6091  051E  0020               	movlb	0	; select bank0
  6092  051F  0826               	movf	?___aldiv+2,w
  6093  0520  0021               	movlb	1	; select bank1
  6094  0521  00B2               	movwf	(_PidTd+2)^(0+128)
  6095  0522  0020               	movlb	0	; select bank0
  6096  0523  0825               	movf	?___aldiv+1,w
  6097  0524  0021               	movlb	1	; select bank1
  6098  0525  00B1               	movwf	(_PidTd+1)^(0+128)
  6099  0526  0020               	movlb	0	; select bank0
  6100  0527  0824               	movf	?___aldiv,w
  6101  0528  0021               	movlb	1	; select bank1
  6102  0529  00B0               	movwf	_PidTd^(0+128)
  6103                           
  6104                           ;sample.c: 284: pidBbSm=5;
  6105  052A  3005               	movlw	5
  6106  052B                     L6:	
  6107  052B  0020               	movlb	0	; select bank0
  6108  052C                     L5:	
  6109  052C  00DE               	movwf	_pidBbSm
  6110                           
  6111                           ;sample.c: 285: break;
  6112  052D  2D38               	goto	l4386
  6113  052E                     l4384:	
  6114  052E  085E               	movf	_pidBbSm,w
  6115                           
  6116                           ; Switch size 1, requested type "space"
  6117                           ; Number of cases is 6, Range of values is 0 to 5
  6118                           ; switch strategies available:
  6119                           ; Name         Instructions Cycles
  6120                           ; direct_byte           18     6 (fixed)
  6121                           ; simple_byte           19    10 (average)
  6122                           ; jumptable            260     6 (fixed)
  6123                           ;	Chosen strategy is direct_byte
  6124  052F  0084               	movwf	4
  6125  0530  3006               	movlw	6
  6126  0531  0204               	subwf	4,w
  6127  0532  1803               	skipnc
  6128  0533  2D38               	goto	l4386
  6129  0534  3190               	movlp	high S4672
  6130  0535  3504               	lslf	4,w
  6131  0536  3E1E               	addlw	low S4672
  6132  0537  0082               	movwf	2
  6133  0538                     l4386:	
  6134                           
  6135                           ;sample.c: 287: if(pidTestNum>2){
  6136  0538  3003               	movlw	3
  6137  0539  025F               	subwf	_pidTestNum,w
  6138  053A  1C03               	skipc
  6139  053B  0008               	return
  6140                           
  6141                           ;sample.c: 288: if(bbmax<t32)bbmax=t32;
  6142  053C  0021               	movlb	1	; select bank1
  6143  053D  0857               	movf	(_bbmax+3)^(0+128),w
  6144  053E  3A80               	xorlw	128
  6145  053F  00F9               	movwf	??_pid_pwm1_idrv_b_b
  6146  0540  0020               	movlb	0	; select bank0
  6147  0541  0835               	movf	pid_pwm1_idrv_b_b@t32+3,w
  6148  0542  3A80               	xorlw	128
  6149  0543  0279               	subwf	??_pid_pwm1_idrv_b_b,w
  6150  0544  0021               	movlb	1	; select bank1
  6151  0545  1D03               	skipz
  6152  0546  2D57               	goto	u3123
  6153  0547  0020               	movlb	0	; select bank0
  6154  0548  0834               	movf	pid_pwm1_idrv_b_b@t32+2,w
  6155  0549  0021               	movlb	1	; select bank1
  6156  054A  0256               	subwf	(_bbmax+2)^(0+128),w
  6157  054B  1D03               	skipz
  6158  054C  2D57               	goto	u3123
  6159  054D  0020               	movlb	0	; select bank0
  6160  054E  0833               	movf	pid_pwm1_idrv_b_b@t32+1,w
  6161  054F  0021               	movlb	1	; select bank1
  6162  0550  0255               	subwf	(_bbmax+1)^(0+128),w
  6163  0551  1D03               	skipz
  6164  0552  2D57               	goto	u3123
  6165  0553  0020               	movlb	0	; select bank0
  6166  0554  0832               	movf	pid_pwm1_idrv_b_b@t32,w
  6167  0555  0021               	movlb	1	; select bank1
  6168  0556  0254               	subwf	_bbmax^(0+128),w
  6169  0557                     u3123:	
  6170  0557  1803               	skipnc
  6171  0558  2D69               	goto	l680
  6172  0559  0020               	movlb	0	; select bank0
  6173  055A  0835               	movf	pid_pwm1_idrv_b_b@t32+3,w
  6174  055B  0021               	movlb	1	; select bank1
  6175  055C  00D7               	movwf	(_bbmax+3)^(0+128)
  6176  055D  0020               	movlb	0	; select bank0
  6177  055E  0834               	movf	pid_pwm1_idrv_b_b@t32+2,w
  6178  055F  0021               	movlb	1	; select bank1
  6179  0560  00D6               	movwf	(_bbmax+2)^(0+128)
  6180  0561  0020               	movlb	0	; select bank0
  6181  0562  0833               	movf	pid_pwm1_idrv_b_b@t32+1,w
  6182  0563  0021               	movlb	1	; select bank1
  6183  0564  00D5               	movwf	(_bbmax+1)^(0+128)
  6184  0565  0020               	movlb	0	; select bank0
  6185  0566  0832               	movf	pid_pwm1_idrv_b_b@t32,w
  6186  0567  0021               	movlb	1	; select bank1
  6187  0568  00D4               	movwf	_bbmax^(0+128)
  6188  0569                     l680:	
  6189                           
  6190                           ;sample.c: 289: if(bbmin>t32)bbmin=t32;
  6191  0569  0020               	movlb	0	; select bank0
  6192  056A  0835               	movf	pid_pwm1_idrv_b_b@t32+3,w
  6193  056B  3A80               	xorlw	128
  6194  056C  00F9               	movwf	??_pid_pwm1_idrv_b_b
  6195  056D  0021               	movlb	1	; select bank1
  6196  056E  085B               	movf	(_bbmin+3)^(0+128),w
  6197  056F  3A80               	xorlw	128
  6198  0570  0279               	subwf	??_pid_pwm1_idrv_b_b,w
  6199  0571  0020               	movlb	0	; select bank0
  6200  0572  1D03               	skipz
  6201  0573  2D84               	goto	u3133
  6202  0574  0021               	movlb	1	; select bank1
  6203  0575  085A               	movf	(_bbmin+2)^(0+128),w
  6204  0576  0020               	movlb	0	; select bank0
  6205  0577  0234               	subwf	pid_pwm1_idrv_b_b@t32+2,w
  6206  0578  1D03               	skipz
  6207  0579  2D84               	goto	u3133
  6208  057A  0021               	movlb	1	; select bank1
  6209  057B  0859               	movf	(_bbmin+1)^(0+128),w
  6210  057C  0020               	movlb	0	; select bank0
  6211  057D  0233               	subwf	pid_pwm1_idrv_b_b@t32+1,w
  6212  057E  1D03               	skipz
  6213  057F  2D84               	goto	u3133
  6214  0580  0021               	movlb	1	; select bank1
  6215  0581  0858               	movf	_bbmin^(0+128),w
  6216  0582  0020               	movlb	0	; select bank0
  6217  0583  0232               	subwf	pid_pwm1_idrv_b_b@t32,w
  6218  0584                     u3133:	
  6219  0584  1803               	skipnc
  6220  0585  0008               	return
  6221  0586  0835               	movf	pid_pwm1_idrv_b_b@t32+3,w
  6222  0587  0021               	movlb	1	; select bank1
  6223  0588  00DB               	movwf	(_bbmin+3)^(0+128)
  6224  0589  0020               	movlb	0	; select bank0
  6225  058A  0834               	movf	pid_pwm1_idrv_b_b@t32+2,w
  6226  058B  0021               	movlb	1	; select bank1
  6227  058C  00DA               	movwf	(_bbmin+2)^(0+128)
  6228  058D  0020               	movlb	0	; select bank0
  6229  058E  0833               	movf	pid_pwm1_idrv_b_b@t32+1,w
  6230  058F  0021               	movlb	1	; select bank1
  6231  0590  00D9               	movwf	(_bbmin+1)^(0+128)
  6232  0591  0020               	movlb	0	; select bank0
  6233  0592  0832               	movf	pid_pwm1_idrv_b_b@t32,w
  6234  0593  0021               	movlb	1	; select bank1
  6235  0594  00D8               	movwf	_bbmin^(0+128)
  6236  0595                     l669:	
  6237  0595  0008               	return
  6238  0596                     __end_of_pid_pwm1_idrv_b_b:	
  6239  0596                     __ptext34:	
  6240 ;; *************** function ___aldiv *****************
  6241 ;; Defined at:
  6242 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  6243 ;; Parameters:    Size  Location     Type
  6244 ;;  divisor         4    4[BANK0 ] long 
  6245 ;;  dividend        4    8[BANK0 ] long 
  6246 ;; Auto vars:     Size  Location     Type
  6247 ;;  quotient        4   14[BANK0 ] long 
  6248 ;;  sign            1   13[BANK0 ] unsigned char 
  6249 ;;  counter         1   12[BANK0 ] unsigned char 
  6250 ;; Return value:  Size  Location     Type
  6251 ;;                  4    4[BANK0 ] long 
  6252 ;; Registers used:
  6253 ;;		wreg, status,2, status,0
  6254 ;; Tracked objects:
  6255 ;;		On entry : 1F/0
  6256 ;;		On exit  : 1F/0
  6257 ;;		Unchanged: 0/0
  6258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6259 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6260 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6262 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6263 ;;Total ram usage:       14 bytes
  6264 ;; Hardware stack levels used:    1
  6265 ;; Hardware stack levels required when called:    1
  6266 ;; This function calls:
  6267 ;;		Nothing
  6268 ;; This function is called by:
  6269 ;;		_pid_pwm1_idrv_b_b
  6270 ;;		_pid_pwm1_idrv_run
  6271 ;;		_calc_expect_vout_adc_value
  6272 ;; This function uses a non-reentrant model
  6273 ;;
  6274                           
  6275                           
  6276                           ;psect for function ___aldiv
  6277  0596                     ___aldiv:	
  6278                           
  6279                           ;incstack = 0
  6280                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  6281  0596  01AD               	clrf	___aldiv@sign
  6282  0597  1FA7               	btfss	___aldiv@divisor+3,7
  6283  0598  2DA6               	goto	l1187
  6284  0599  09A4               	comf	___aldiv@divisor,f
  6285  059A  09A5               	comf	___aldiv@divisor+1,f
  6286  059B  09A6               	comf	___aldiv@divisor+2,f
  6287  059C  09A7               	comf	___aldiv@divisor+3,f
  6288  059D  0AA4               	incf	___aldiv@divisor,f
  6289  059E  1903               	skipnz
  6290  059F  0AA5               	incf	___aldiv@divisor+1,f
  6291  05A0  1903               	skipnz
  6292  05A1  0AA6               	incf	___aldiv@divisor+2,f
  6293  05A2  1903               	skipnz
  6294  05A3  0AA7               	incf	___aldiv@divisor+3,f
  6295  05A4  01AD               	clrf	___aldiv@sign
  6296  05A5  0AAD               	incf	___aldiv@sign,f
  6297  05A6                     l1187:	
  6298  05A6  1FAB               	btfss	___aldiv@dividend+3,7
  6299  05A7  2DB5               	goto	l4266
  6300  05A8  09A8               	comf	___aldiv@dividend,f
  6301  05A9  09A9               	comf	___aldiv@dividend+1,f
  6302  05AA  09AA               	comf	___aldiv@dividend+2,f
  6303  05AB  09AB               	comf	___aldiv@dividend+3,f
  6304  05AC  0AA8               	incf	___aldiv@dividend,f
  6305  05AD  1903               	skipnz
  6306  05AE  0AA9               	incf	___aldiv@dividend+1,f
  6307  05AF  1903               	skipnz
  6308  05B0  0AAA               	incf	___aldiv@dividend+2,f
  6309  05B1  1903               	skipnz
  6310  05B2  0AAB               	incf	___aldiv@dividend+3,f
  6311  05B3  3001               	movlw	1
  6312  05B4  06AD               	xorwf	___aldiv@sign,f
  6313  05B5                     l4266:	
  6314  05B5  01AE               	clrf	___aldiv@quotient
  6315  05B6  01AF               	clrf	___aldiv@quotient+1
  6316  05B7  01B0               	clrf	___aldiv@quotient+2
  6317  05B8  01B1               	clrf	___aldiv@quotient+3
  6318  05B9  0827               	movf	___aldiv@divisor+3,w
  6319  05BA  0426               	iorwf	___aldiv@divisor+2,w
  6320  05BB  0425               	iorwf	___aldiv@divisor+1,w
  6321  05BC  0424               	iorwf	___aldiv@divisor,w
  6322  05BD  1903               	skipnz
  6323  05BE  2DEB               	goto	l4288
  6324  05BF  01AC               	clrf	___aldiv@counter
  6325  05C0                     L9:	
  6326  05C0  0AAC               	incf	___aldiv@counter,f
  6327  05C1  1BA7               	btfsc	___aldiv@divisor+3,7
  6328  05C2  2DC8               	goto	l4276
  6329  05C3  35A4               	lslf	___aldiv@divisor,f
  6330  05C4  0DA5               	rlf	___aldiv@divisor+1,f
  6331  05C5  0DA6               	rlf	___aldiv@divisor+2,f
  6332  05C6  0DA7               	rlf	___aldiv@divisor+3,f
  6333  05C7  2DC0               	goto	L9
  6334  05C8                     l4276:	
  6335  05C8  35AE               	lslf	___aldiv@quotient,f
  6336  05C9  0DAF               	rlf	___aldiv@quotient+1,f
  6337  05CA  0DB0               	rlf	___aldiv@quotient+2,f
  6338  05CB  0DB1               	rlf	___aldiv@quotient+3,f
  6339  05CC  0827               	movf	___aldiv@divisor+3,w
  6340  05CD  022B               	subwf	___aldiv@dividend+3,w
  6341  05CE  1D03               	skipz
  6342  05CF  2DDA               	goto	u3015
  6343  05D0  0826               	movf	___aldiv@divisor+2,w
  6344  05D1  022A               	subwf	___aldiv@dividend+2,w
  6345  05D2  1D03               	skipz
  6346  05D3  2DDA               	goto	u3015
  6347  05D4  0825               	movf	___aldiv@divisor+1,w
  6348  05D5  0229               	subwf	___aldiv@dividend+1,w
  6349  05D6  1D03               	skipz
  6350  05D7  2DDA               	goto	u3015
  6351  05D8  0824               	movf	___aldiv@divisor,w
  6352  05D9  0228               	subwf	___aldiv@dividend,w
  6353  05DA                     u3015:	
  6354  05DA  1C03               	skipc
  6355  05DB  2DE5               	goto	l4284
  6356  05DC  0824               	movf	___aldiv@divisor,w
  6357  05DD  02A8               	subwf	___aldiv@dividend,f
  6358  05DE  0825               	movf	___aldiv@divisor+1,w
  6359  05DF  3BA9               	subwfb	___aldiv@dividend+1,f
  6360  05E0  0826               	movf	___aldiv@divisor+2,w
  6361  05E1  3BAA               	subwfb	___aldiv@dividend+2,f
  6362  05E2  0827               	movf	___aldiv@divisor+3,w
  6363  05E3  3BAB               	subwfb	___aldiv@dividend+3,f
  6364  05E4  142E               	bsf	___aldiv@quotient,0
  6365  05E5                     l4284:	
  6366  05E5  36A7               	lsrf	___aldiv@divisor+3,f
  6367  05E6  0CA6               	rrf	___aldiv@divisor+2,f
  6368  05E7  0CA5               	rrf	___aldiv@divisor+1,f
  6369  05E8  0CA4               	rrf	___aldiv@divisor,f
  6370  05E9  0BAC               	decfsz	___aldiv@counter,f
  6371  05EA  2DC8               	goto	l4276
  6372  05EB                     l4288:	
  6373  05EB  082D               	movf	___aldiv@sign,w
  6374  05EC  1903               	btfsc	3,2
  6375  05ED  2DF9               	goto	l4292
  6376  05EE  09AE               	comf	___aldiv@quotient,f
  6377  05EF  09AF               	comf	___aldiv@quotient+1,f
  6378  05F0  09B0               	comf	___aldiv@quotient+2,f
  6379  05F1  09B1               	comf	___aldiv@quotient+3,f
  6380  05F2  0AAE               	incf	___aldiv@quotient,f
  6381  05F3  1903               	skipnz
  6382  05F4  0AAF               	incf	___aldiv@quotient+1,f
  6383  05F5  1903               	skipnz
  6384  05F6  0AB0               	incf	___aldiv@quotient+2,f
  6385  05F7  1903               	skipnz
  6386  05F8  0AB1               	incf	___aldiv@quotient+3,f
  6387  05F9                     l4292:	
  6388  05F9  0831               	movf	___aldiv@quotient+3,w
  6389  05FA  00A7               	movwf	?___aldiv+3
  6390  05FB  0830               	movf	___aldiv@quotient+2,w
  6391  05FC  00A6               	movwf	?___aldiv+2
  6392  05FD  082F               	movf	___aldiv@quotient+1,w
  6393  05FE  00A5               	movwf	?___aldiv+1
  6394  05FF  082E               	movf	___aldiv@quotient,w
  6395  0600  00A4               	movwf	?___aldiv
  6396  0601  0008               	return
  6397  0602                     __end_of___aldiv:	
  6398  0602                     __ptext33:	
  6399 ;; *************** function ___lmul *****************
  6400 ;; Defined at:
  6401 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
  6402 ;; Parameters:    Size  Location     Type
  6403 ;;  multiplier      4    1[COMMON] unsigned long 
  6404 ;;  multiplicand    4    5[COMMON] unsigned long 
  6405 ;; Auto vars:     Size  Location     Type
  6406 ;;  product         4    0[BANK0 ] unsigned long 
  6407 ;; Return value:  Size  Location     Type
  6408 ;;                  4    1[COMMON] unsigned long 
  6409 ;; Registers used:
  6410 ;;		wreg, status,2, status,0
  6411 ;; Tracked objects:
  6412 ;;		On entry : 1A/1
  6413 ;;		On exit  : 1F/0
  6414 ;;		Unchanged: 0/0
  6415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6416 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6417 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6419 ;;      Totals:         8       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6420 ;;Total ram usage:       12 bytes
  6421 ;; Hardware stack levels used:    1
  6422 ;; Hardware stack levels required when called:    1
  6423 ;; This function calls:
  6424 ;;		Nothing
  6425 ;; This function is called by:
  6426 ;;		_calc_temp_rs
  6427 ;;		_calc_temp_rc
  6428 ;;		_pid_pwm1_idrv_b_b
  6429 ;;		_pid_pwm1_idrv_run
  6430 ;;		_calc_expect_vout_adc_value
  6431 ;; This function uses a non-reentrant model
  6432 ;;
  6433                           
  6434                           
  6435                           ;psect for function ___lmul
  6436  0602                     ___lmul:	
  6437                           
  6438                           ;incstack = 0
  6439                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  6440  0602  0020               	movlb	0	; select bank0
  6441  0603  01A0               	clrf	___lmul@product
  6442  0604  01A1               	clrf	___lmul@product+1
  6443  0605  01A2               	clrf	___lmul@product+2
  6444  0606  01A3               	clrf	___lmul@product+3
  6445  0607                     l1143:	
  6446  0607  1C71               	btfss	___lmul@multiplier,0
  6447  0608  2E12               	goto	l4248
  6448  0609  0875               	movf	___lmul@multiplicand,w
  6449  060A  0020               	movlb	0	; select bank0
  6450  060B  07A0               	addwf	___lmul@product,f
  6451  060C  0876               	movf	___lmul@multiplicand+1,w
  6452  060D  3DA1               	addwfc	___lmul@product+1,f
  6453  060E  0877               	movf	___lmul@multiplicand+2,w
  6454  060F  3DA2               	addwfc	___lmul@product+2,f
  6455  0610  0878               	movf	___lmul@multiplicand+3,w
  6456  0611  3DA3               	addwfc	___lmul@product+3,f
  6457  0612                     l4248:	
  6458  0612  35F5               	lslf	___lmul@multiplicand,f
  6459  0613  0DF6               	rlf	___lmul@multiplicand+1,f
  6460  0614  0DF7               	rlf	___lmul@multiplicand+2,f
  6461  0615  0DF8               	rlf	___lmul@multiplicand+3,f
  6462  0616  36F4               	lsrf	___lmul@multiplier+3,f
  6463  0617  0CF3               	rrf	___lmul@multiplier+2,f
  6464  0618  0CF2               	rrf	___lmul@multiplier+1,f
  6465  0619  0CF1               	rrf	___lmul@multiplier,f
  6466  061A  0874               	movf	___lmul@multiplier+3,w
  6467  061B  0473               	iorwf	___lmul@multiplier+2,w
  6468  061C  0472               	iorwf	___lmul@multiplier+1,w
  6469  061D  0471               	iorwf	___lmul@multiplier,w
  6470  061E  1D03               	skipz
  6471  061F  2E07               	goto	l1143
  6472  0620  0020               	movlb	0	; select bank0
  6473  0621  0823               	movf	___lmul@product+3,w
  6474  0622  00F4               	movwf	?___lmul+3
  6475  0623  0822               	movf	___lmul@product+2,w
  6476  0624  00F3               	movwf	?___lmul+2
  6477  0625  0821               	movf	___lmul@product+1,w
  6478  0626  00F2               	movwf	?___lmul+1
  6479  0627  0820               	movf	___lmul@product,w
  6480  0628  00F1               	movwf	?___lmul
  6481  0629  0008               	return
  6482  062A                     __end_of___lmul:	
  6483  062A                     __ptext31:	
  6484 ;; *************** function ___lldiv *****************
  6485 ;; Defined at:
  6486 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lldiv.c"
  6487 ;; Parameters:    Size  Location     Type
  6488 ;;  divisor         4    1[COMMON] unsigned long 
  6489 ;;  dividend        4    5[COMMON] unsigned long 
  6490 ;; Auto vars:     Size  Location     Type
  6491 ;;  quotient        4    0[BANK0 ] unsigned long 
  6492 ;;  counter         1    4[BANK0 ] unsigned char 
  6493 ;; Return value:  Size  Location     Type
  6494 ;;                  4    1[COMMON] unsigned long 
  6495 ;; Registers used:
  6496 ;;		wreg, status,2, status,0
  6497 ;; Tracked objects:
  6498 ;;		On entry : 1F/0
  6499 ;;		On exit  : 1F/0
  6500 ;;		Unchanged: 0/0
  6501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6502 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6503 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6505 ;;      Totals:         8       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6506 ;;Total ram usage:       13 bytes
  6507 ;; Hardware stack levels used:    1
  6508 ;; Hardware stack levels required when called:    1
  6509 ;; This function calls:
  6510 ;;		Nothing
  6511 ;; This function is called by:
  6512 ;;		_calc_temp_rs
  6513 ;;		_calc_temp_rc
  6514 ;;		_calc_rs_lo_avg
  6515 ;; This function uses a non-reentrant model
  6516 ;;
  6517                           
  6518                           
  6519                           ;psect for function ___lldiv
  6520  062A                     ___lldiv:	
  6521                           
  6522                           ;incstack = 0
  6523                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  6524  062A  01A0               	clrf	___lldiv@quotient
  6525  062B  01A1               	clrf	___lldiv@quotient+1
  6526  062C  01A2               	clrf	___lldiv@quotient+2
  6527  062D  01A3               	clrf	___lldiv@quotient+3
  6528  062E  0874               	movf	___lldiv@divisor+3,w
  6529  062F  0473               	iorwf	___lldiv@divisor+2,w
  6530  0630  0472               	iorwf	___lldiv@divisor+1,w
  6531  0631  0471               	iorwf	___lldiv@divisor,w
  6532  0632  1903               	skipnz
  6533  0633  2E60               	goto	l3490
  6534  0634  01A4               	clrf	___lldiv@counter
  6535  0635                     L8:	
  6536  0635  0AA4               	incf	___lldiv@counter,f
  6537  0636  1BF4               	btfsc	___lldiv@divisor+3,7
  6538  0637  2E3D               	goto	l3478
  6539  0638  35F1               	lslf	___lldiv@divisor,f
  6540  0639  0DF2               	rlf	___lldiv@divisor+1,f
  6541  063A  0DF3               	rlf	___lldiv@divisor+2,f
  6542  063B  0DF4               	rlf	___lldiv@divisor+3,f
  6543  063C  2E35               	goto	L8
  6544  063D                     l3478:	
  6545  063D  35A0               	lslf	___lldiv@quotient,f
  6546  063E  0DA1               	rlf	___lldiv@quotient+1,f
  6547  063F  0DA2               	rlf	___lldiv@quotient+2,f
  6548  0640  0DA3               	rlf	___lldiv@quotient+3,f
  6549  0641  0874               	movf	___lldiv@divisor+3,w
  6550  0642  0278               	subwf	___lldiv@dividend+3,w
  6551  0643  1D03               	skipz
  6552  0644  2E4F               	goto	u2035
  6553  0645  0873               	movf	___lldiv@divisor+2,w
  6554  0646  0277               	subwf	___lldiv@dividend+2,w
  6555  0647  1D03               	skipz
  6556  0648  2E4F               	goto	u2035
  6557  0649  0872               	movf	___lldiv@divisor+1,w
  6558  064A  0276               	subwf	___lldiv@dividend+1,w
  6559  064B  1D03               	skipz
  6560  064C  2E4F               	goto	u2035
  6561  064D  0871               	movf	___lldiv@divisor,w
  6562  064E  0275               	subwf	___lldiv@dividend,w
  6563  064F                     u2035:	
  6564  064F  1C03               	skipc
  6565  0650  2E5A               	goto	l3486
  6566  0651  0871               	movf	___lldiv@divisor,w
  6567  0652  02F5               	subwf	___lldiv@dividend,f
  6568  0653  0872               	movf	___lldiv@divisor+1,w
  6569  0654  3BF6               	subwfb	___lldiv@dividend+1,f
  6570  0655  0873               	movf	___lldiv@divisor+2,w
  6571  0656  3BF7               	subwfb	___lldiv@dividend+2,f
  6572  0657  0874               	movf	___lldiv@divisor+3,w
  6573  0658  3BF8               	subwfb	___lldiv@dividend+3,f
  6574  0659  1420               	bsf	___lldiv@quotient,0
  6575  065A                     l3486:	
  6576  065A  36F4               	lsrf	___lldiv@divisor+3,f
  6577  065B  0CF3               	rrf	___lldiv@divisor+2,f
  6578  065C  0CF2               	rrf	___lldiv@divisor+1,f
  6579  065D  0CF1               	rrf	___lldiv@divisor,f
  6580  065E  0BA4               	decfsz	___lldiv@counter,f
  6581  065F  2E3D               	goto	l3478
  6582  0660                     l3490:	
  6583  0660  0823               	movf	___lldiv@quotient+3,w
  6584  0661  00F4               	movwf	?___lldiv+3
  6585  0662  0822               	movf	___lldiv@quotient+2,w
  6586  0663  00F3               	movwf	?___lldiv+2
  6587  0664  0821               	movf	___lldiv@quotient+1,w
  6588  0665  00F2               	movwf	?___lldiv+1
  6589  0666  0820               	movf	___lldiv@quotient,w
  6590  0667  00F1               	movwf	?___lldiv
  6591  0668  0008               	return
  6592  0669                     __end_of___lldiv:	
  6593  0669                     __ptext12:	
  6594 ;; *************** function _set_idrv_pwm1_duty *****************
  6595 ;; Defined at:
  6596 ;;		line 48 in file "src/api/sample.c"
  6597 ;; Parameters:    Size  Location     Type
  6598 ;;  duty            2    3[COMMON] unsigned int 
  6599 ;; Auto vars:     Size  Location     Type
  6600 ;;  t16             2    5[COMMON] unsigned int 
  6601 ;; Return value:  Size  Location     Type
  6602 ;;                  1    wreg      void 
  6603 ;; Registers used:
  6604 ;;		wreg, pclath, cstack
  6605 ;; Tracked objects:
  6606 ;;		On entry : 1F/0
  6607 ;;		On exit  : 1F/1B
  6608 ;;		Unchanged: 0/0
  6609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6610 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6611 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6613 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6614 ;;Total ram usage:        4 bytes
  6615 ;; Hardware stack levels used:    1
  6616 ;; Hardware stack levels required when called:    2
  6617 ;; This function calls:
  6618 ;;		_get_idrv_pwm1_duty
  6619 ;; This function is called by:
  6620 ;;		_pid_pwm1_idrv_b_b
  6621 ;;		_pid_pwm1_idrv_run
  6622 ;; This function uses a non-reentrant model
  6623 ;;
  6624                           
  6625                           
  6626                           ;psect for function _set_idrv_pwm1_duty
  6627  0669                     _set_idrv_pwm1_duty:	
  6628  0669                     l3124:	
  6629                           ;incstack = 0
  6630                           ; Regs used in _set_idrv_pwm1_duty: [wreg+pclath+cstack]
  6631                           
  6632                           
  6633                           ;sample.c: 51: uint16_t t16;
  6634                           ;sample.c: 52: pwm1DutyForIdrv=duty;
  6635  0669  0874               	movf	set_idrv_pwm1_duty@duty+1,w
  6636  066A  00E3               	movwf	_pwm1DutyForIdrv+1
  6637  066B  0873               	movf	set_idrv_pwm1_duty@duty,w
  6638  066C  00E2               	movwf	_pwm1DutyForIdrv
  6639                           
  6640                           ;sample.c: 53: t16=get_idrv_pwm1_duty();
  6641  066D  2761  3180         	fcall	_get_idrv_pwm1_duty
  6642  066F  0872               	movf	?_get_idrv_pwm1_duty+1,w
  6643  0670  00F6               	movwf	set_idrv_pwm1_duty@t16+1
  6644  0671  0871               	movf	?_get_idrv_pwm1_duty,w
  6645  0672  00F5               	movwf	set_idrv_pwm1_duty@t16
  6646                           
  6647                           ;sample.c: 54: if(t16==duty)return;
  6648  0673  0874               	movf	set_idrv_pwm1_duty@duty+1,w
  6649  0674  0676               	xorwf	set_idrv_pwm1_duty@t16+1,w
  6650  0675  1D03               	skipz
  6651  0676  2E79               	goto	u1565
  6652  0677  0873               	movf	set_idrv_pwm1_duty@duty,w
  6653  0678  0675               	xorwf	set_idrv_pwm1_duty@t16,w
  6654  0679                     u1565:	
  6655  0679  1903               	btfsc	3,2
  6656  067A  0008               	return
  6657                           
  6658                           ;sample.c: 57: PWM1CONbits.EN = 0;
  6659  067B  139B               	bcf	27,7	;volatile
  6660                           
  6661                           ;sample.c: 58: PWM1DCL= (uint8_t)(duty&0xff);
  6662  067C  0873               	movf	set_idrv_pwm1_duty@duty,w
  6663  067D  0093               	movwf	19	;volatile
  6664                           
  6665                           ;sample.c: 59: PWM1DCH=(uint8_t)(duty>>8);
  6666  067E  0874               	movf	set_idrv_pwm1_duty@duty+1,w
  6667  067F  0094               	movwf	20	;volatile
  6668                           
  6669                           ;sample.c: 60: PWM1CONbits.EN = 1;
  6670  0680  179B               	bsf	27,7	;volatile
  6671  0681  0008               	return
  6672  0682                     __end_of_set_idrv_pwm1_duty:	
  6673  0682                     __ptext28:	
  6674 ;; *************** function _calc_temp_rs *****************
  6675 ;; Defined at:
  6676 ;;		line 176 in file "src/api/sample.c"
  6677 ;; Parameters:    Size  Location     Type
  6678 ;;		None
  6679 ;; Auto vars:     Size  Location     Type
  6680 ;;  y               4   13[BANK0 ] unsigned long 
  6681 ;;  x               4    9[BANK0 ] unsigned long 
  6682 ;; Return value:  Size  Location     Type
  6683 ;;                  4    5[BANK0 ] unsigned long 
  6684 ;; Registers used:
  6685 ;;		wreg, status,2, status,0, pclath, cstack
  6686 ;; Tracked objects:
  6687 ;;		On entry : 1F/1
  6688 ;;		On exit  : 1F/0
  6689 ;;		Unchanged: 0/0
  6690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6691 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6692 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6694 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6695 ;;Total ram usage:       12 bytes
  6696 ;; Hardware stack levels used:    1
  6697 ;; Hardware stack levels required when called:    2
  6698 ;; This function calls:
  6699 ;;		___lldiv
  6700 ;;		___lmul
  6701 ;; This function is called by:
  6702 ;;		_main
  6703 ;; This function uses a non-reentrant model
  6704 ;;
  6705                           
  6706                           
  6707                           ;psect for function _calc_temp_rs
  6708  0682                     _calc_temp_rs:	
  6709                           
  6710                           ;sample.c: 189: uint32_t x,y;
  6711                           ;sample.c: 190: y=12000UL;
  6712                           
  6713                           ;incstack = 0
  6714                           ; Regs used in _calc_temp_rs: [wreg+status,2+status,0+pclath+cstack]
  6715  0682  0020               	movlb	0	; select bank0
  6716  0683  302E               	movlw	46
  6717  0684  01B0               	clrf	calc_temp_rs@y+3
  6718  0685  01AF               	clrf	calc_temp_rs@y+2
  6719  0686  00AE               	movwf	calc_temp_rs@y+1
  6720  0687  30E0               	movlw	224
  6721  0688  00AD               	movwf	calc_temp_rs@y
  6722                           
  6723                           ;sample.c: 191: y=y*rtAdcValueRsHi;
  6724  0689  0852               	movf	_rtAdcValueRsHi,w
  6725  068A  00F1               	movwf	___lmul@multiplier
  6726  068B  0853               	movf	_rtAdcValueRsHi+1,w
  6727  068C  00F2               	movwf	___lmul@multiplier+1
  6728  068D  01F3               	clrf	___lmul@multiplier+2
  6729  068E  01F4               	clrf	___lmul@multiplier+3
  6730  068F  0830               	movf	calc_temp_rs@y+3,w
  6731  0690  00F8               	movwf	___lmul@multiplicand+3
  6732  0691  082F               	movf	calc_temp_rs@y+2,w
  6733  0692  00F7               	movwf	___lmul@multiplicand+2
  6734  0693  082E               	movf	calc_temp_rs@y+1,w
  6735  0694  00F6               	movwf	___lmul@multiplicand+1
  6736  0695  082D               	movf	calc_temp_rs@y,w
  6737  0696  00F5               	movwf	___lmul@multiplicand
  6738  0697  2602  3180         	fcall	___lmul
  6739  0699  0874               	movf	?___lmul+3,w
  6740  069A  00B0               	movwf	calc_temp_rs@y+3
  6741  069B  0873               	movf	?___lmul+2,w
  6742  069C  00AF               	movwf	calc_temp_rs@y+2
  6743  069D  0872               	movf	?___lmul+1,w
  6744  069E  00AE               	movwf	calc_temp_rs@y+1
  6745  069F  0871               	movf	?___lmul,w
  6746  06A0  00AD               	movwf	calc_temp_rs@y
  6747                           
  6748                           ;sample.c: 192: x=rtAdcValueRsLo;
  6749  06A1  0854               	movf	_rtAdcValueRsLo,w
  6750  06A2  00A9               	movwf	calc_temp_rs@x
  6751  06A3  0855               	movf	_rtAdcValueRsLo+1,w
  6752  06A4  00AA               	movwf	calc_temp_rs@x+1
  6753  06A5  01AB               	clrf	calc_temp_rs@x+2
  6754  06A6  01AC               	clrf	calc_temp_rs@x+3
  6755                           
  6756                           ;sample.c: 193: y=y/x;
  6757  06A7  082C               	movf	calc_temp_rs@x+3,w
  6758  06A8  00F4               	movwf	___lldiv@divisor+3
  6759  06A9  082B               	movf	calc_temp_rs@x+2,w
  6760  06AA  00F3               	movwf	___lldiv@divisor+2
  6761  06AB  082A               	movf	calc_temp_rs@x+1,w
  6762  06AC  00F2               	movwf	___lldiv@divisor+1
  6763  06AD  0829               	movf	calc_temp_rs@x,w
  6764  06AE  00F1               	movwf	___lldiv@divisor
  6765  06AF  0830               	movf	calc_temp_rs@y+3,w
  6766  06B0  00F8               	movwf	___lldiv@dividend+3
  6767  06B1  082F               	movf	calc_temp_rs@y+2,w
  6768  06B2  00F7               	movwf	___lldiv@dividend+2
  6769  06B3  082E               	movf	calc_temp_rs@y+1,w
  6770  06B4  00F6               	movwf	___lldiv@dividend+1
  6771  06B5  082D               	movf	calc_temp_rs@y,w
  6772  06B6  00F5               	movwf	___lldiv@dividend
  6773  06B7  262A  3180         	fcall	___lldiv
  6774  06B9  0874               	movf	?___lldiv+3,w
  6775  06BA  00B0               	movwf	calc_temp_rs@y+3
  6776  06BB  0873               	movf	?___lldiv+2,w
  6777  06BC  00AF               	movwf	calc_temp_rs@y+2
  6778  06BD  0872               	movf	?___lldiv+1,w
  6779  06BE  00AE               	movwf	calc_temp_rs@y+1
  6780  06BF  0871               	movf	?___lldiv,w
  6781  06C0  00AD               	movwf	calc_temp_rs@y
  6782                           
  6783                           ;sample.c: 194: if(y<2000)y=2000;
  6784  06C1  0830               	movf	calc_temp_rs@y+3,w
  6785  06C2  1D03               	btfss	3,2
  6786  06C3  2ED3               	goto	l4306
  6787  06C4  082F               	movf	calc_temp_rs@y+2,w
  6788  06C5  1D03               	btfss	3,2
  6789  06C6  2ED3               	goto	l4306
  6790  06C7  30D0               	movlw	208
  6791  06C8  022D               	subwf	calc_temp_rs@y,w
  6792  06C9  3007               	movlw	7
  6793  06CA  3B2E               	subwfb	calc_temp_rs@y+1,w
  6794  06CB  1803               	btfsc	3,0
  6795  06CC  2ED3               	goto	l4306
  6796  06CD  3007               	movlw	7
  6797  06CE  01B0               	clrf	calc_temp_rs@y+3
  6798  06CF  01AF               	clrf	calc_temp_rs@y+2
  6799  06D0  00AE               	movwf	calc_temp_rs@y+1
  6800  06D1  30D0               	movlw	208
  6801  06D2  00AD               	movwf	calc_temp_rs@y
  6802  06D3                     l4306:	
  6803                           
  6804                           ;sample.c: 195: if(y>25000)y=25000;
  6805  06D3  0830               	movf	calc_temp_rs@y+3,w
  6806  06D4  1D03               	btfss	3,2
  6807  06D5  2EDF               	goto	l4308
  6808  06D6  082F               	movf	calc_temp_rs@y+2,w
  6809  06D7  1D03               	btfss	3,2
  6810  06D8  2EDF               	goto	l4308
  6811  06D9  30A9               	movlw	169
  6812  06DA  022D               	subwf	calc_temp_rs@y,w
  6813  06DB  3061               	movlw	97
  6814  06DC  3B2E               	subwfb	calc_temp_rs@y+1,w
  6815  06DD  1C03               	btfss	3,0
  6816  06DE  2EE5               	goto	l4310
  6817  06DF                     l4308:	
  6818  06DF  3061               	movlw	97
  6819  06E0  01B0               	clrf	calc_temp_rs@y+3
  6820  06E1  01AF               	clrf	calc_temp_rs@y+2
  6821  06E2  00AE               	movwf	calc_temp_rs@y+1
  6822  06E3  30A8               	movlw	168
  6823  06E4  00AD               	movwf	calc_temp_rs@y
  6824  06E5                     l4310:	
  6825                           
  6826                           ;sample.c: 196: y=y-1000;
  6827  06E5  3018               	movlw	24
  6828  06E6  07AD               	addwf	calc_temp_rs@y,f
  6829  06E7  30FC               	movlw	252
  6830  06E8  3DAE               	addwfc	calc_temp_rs@y+1,f
  6831  06E9  30FF               	movlw	255
  6832  06EA  3DAF               	addwfc	calc_temp_rs@y+2,f
  6833  06EB  3DB0               	addwfc	calc_temp_rs@y+3,f
  6834                           
  6835                           ;sample.c: 198: return y;
  6836  06EC  0830               	movf	calc_temp_rs@y+3,w
  6837  06ED  00A8               	movwf	?_calc_temp_rs+3
  6838  06EE  082F               	movf	calc_temp_rs@y+2,w
  6839  06EF  00A7               	movwf	?_calc_temp_rs+2
  6840  06F0  082E               	movf	calc_temp_rs@y+1,w
  6841  06F1  00A6               	movwf	?_calc_temp_rs+1
  6842  06F2  082D               	movf	calc_temp_rs@y,w
  6843  06F3  00A5               	movwf	?_calc_temp_rs
  6844  06F4  0008               	return
  6845  06F5                     __end_of_calc_temp_rs:	
  6846  06F5                     __ptext26:	
  6847 ;; *************** function _m_mem_cpy_len *****************
  6848 ;; Defined at:
  6849 ;;		line 47 in file "src/depend/m_string.c"
  6850 ;; Parameters:    Size  Location     Type
  6851 ;;  d               2    1[COMMON] PTR unsigned char 
  6852 ;;		 -> crc_verify@expected(2), modbusBuf(64), 
  6853 ;;  s               2    3[COMMON] PTR unsigned char 
  6854 ;;		 -> modbusBuf(64), sysData(92), eusartRxBuffer(64), 
  6855 ;;  len             2    5[COMMON] unsigned int 
  6856 ;; Auto vars:     Size  Location     Type
  6857 ;;		None
  6858 ;; Return value:  Size  Location     Type
  6859 ;;                  1    wreg      void 
  6860 ;; Registers used:
  6861 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6862 ;; Tracked objects:
  6863 ;;		On entry : 1F/0
  6864 ;;		On exit  : 1F/0
  6865 ;;		Unchanged: 1F/0
  6866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6867 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6869 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6870 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6871 ;;Total ram usage:        7 bytes
  6872 ;; Hardware stack levels used:    1
  6873 ;; Hardware stack levels required when called:    1
  6874 ;; This function calls:
  6875 ;;		Nothing
  6876 ;; This function is called by:
  6877 ;;		_main
  6878 ;;		_crc_verify
  6879 ;; This function uses a non-reentrant model
  6880 ;;
  6881                           
  6882                           
  6883                           ;psect for function _m_mem_cpy_len
  6884  06F5                     _m_mem_cpy_len:	
  6885  06F5                     l3004:	
  6886                           ;m_string.c: 50: while(len)
  6887                           
  6888                           ;incstack = 0
  6889                           ; Regs used in _m_mem_cpy_len: [wreg+fsr1l+fsr1h+status,2+status,0]
  6890                           
  6891  06F5  0875               	movf	m_mem_cpy_len@len,w
  6892  06F6  0476               	iorwf	m_mem_cpy_len@len+1,w
  6893  06F7  1903               	btfsc	3,2
  6894  06F8  0008               	return
  6895                           
  6896                           ;m_string.c: 51: {
  6897                           ;m_string.c: 52: *d++=*s++;
  6898  06F9  0873               	movf	m_mem_cpy_len@s,w
  6899  06FA  0086               	movwf	6
  6900  06FB  0874               	movf	m_mem_cpy_len@s+1,w
  6901  06FC  0087               	movwf	7
  6902  06FD  0801               	movf	1,w
  6903  06FE  00F7               	movwf	??_m_mem_cpy_len
  6904  06FF  0871               	movf	m_mem_cpy_len@d,w
  6905  0700  0086               	movwf	6
  6906  0701  0872               	movf	m_mem_cpy_len@d+1,w
  6907  0702  0087               	movwf	7
  6908  0703  0877               	movf	??_m_mem_cpy_len,w
  6909  0704  0081               	movwf	1
  6910  0705  0AF3               	incf	m_mem_cpy_len@s,f
  6911  0706  1903               	skipnz
  6912  0707  0AF4               	incf	m_mem_cpy_len@s+1,f
  6913  0708  0AF1               	incf	m_mem_cpy_len@d,f
  6914  0709  1903               	skipnz
  6915  070A  0AF2               	incf	m_mem_cpy_len@d+1,f
  6916                           
  6917                           ;m_string.c: 53: len--;
  6918  070B  3001               	movlw	1
  6919  070C  02F5               	subwf	m_mem_cpy_len@len,f
  6920  070D  3000               	movlw	0
  6921  070E  3BF6               	subwfb	m_mem_cpy_len@len+1,f
  6922  070F  2EF5               	goto	l3004
  6923  0710                     __end_of_m_mem_cpy_len:	
  6924  0710                     __ptext16:	
  6925 ;; *************** function _sys_data_save *****************
  6926 ;; Defined at:
  6927 ;;		line 119 in file "src/api/sysData.c"
  6928 ;; Parameters:    Size  Location     Type
  6929 ;;		None
  6930 ;; Auto vars:     Size  Location     Type
  6931 ;;		None
  6932 ;; Return value:  Size  Location     Type
  6933 ;;                  1    wreg      void 
  6934 ;; Registers used:
  6935 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6936 ;; Tracked objects:
  6937 ;;		On entry : 1E/1
  6938 ;;		On exit  : 1F/0
  6939 ;;		Unchanged: 0/0
  6940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6944 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6945 ;;Total ram usage:        0 bytes
  6946 ;; Hardware stack levels used:    1
  6947 ;; Hardware stack levels required when called:    3
  6948 ;; This function calls:
  6949 ;;		_crc_append
  6950 ;;		_my_flash_read_system_erase
  6951 ;;		_my_flash_system_write
  6952 ;; This function is called by:
  6953 ;;		_modbus_response_write_single_register
  6954 ;;		_main
  6955 ;; This function uses a non-reentrant model
  6956 ;;
  6957                           
  6958                           
  6959                           ;psect for function _sys_data_save
  6960  0710                     _sys_data_save:	
  6961                           
  6962                           ;sysData.c: 121: crc_append((uint8_t*)&sysData,sizeof(sysData_t)-2);
  6963                           
  6964                           ;incstack = 0
  6965                           ; Regs used in _sys_data_save: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6966  0710  3084               	movlw	132
  6967  0711  0020               	movlb	0	; select bank0
  6968  0712  27BF  3180         	fcall	PL42	;call to abstracted procedure
  6969  0714  271B  3180         	fcall	_crc_append
  6970                           
  6971                           ;sysData.c: 122: my_flash_read_system_erase();
  6972  0716  274A  3180         	fcall	_my_flash_read_system_erase
  6973                           
  6974                           ;sysData.c: 123: my_flash_system_write((uint8_t*)&sysData,sizeof(sysData_t));
  6975  0718  27A2               	fcall	PL28	;call to abstracted procedure
  6976  0719  318C  2CAC         	ljmp	l2844
  6977  071B                     __end_of_sys_data_save:	
  6978  071B                     __ptext24:	
  6979 ;; *************** function _crc_append *****************
  6980 ;; Defined at:
  6981 ;;		line 143 in file "src/depend/crc16.c"
  6982 ;; Parameters:    Size  Location     Type
  6983 ;;  message         2    0[BANK0 ] PTR unsigned char 
  6984 ;;		 -> modbusBuf(64), sysData(92), 
  6985 ;;  n               2    2[BANK0 ] unsigned int 
  6986 ;; Auto vars:     Size  Location     Type
  6987 ;;  crc             2    9[BANK0 ] unsigned int 
  6988 ;; Return value:  Size  Location     Type
  6989 ;;                  1    wreg      void 
  6990 ;; Registers used:
  6991 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6992 ;; Tracked objects:
  6993 ;;		On entry : 1F/0
  6994 ;;		On exit  : 1F/0
  6995 ;;		Unchanged: 0/0
  6996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6997 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6998 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6999 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7000 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7001 ;;Total ram usage:       11 bytes
  7002 ;; Hardware stack levels used:    1
  7003 ;; Hardware stack levels required when called:    2
  7004 ;; This function calls:
  7005 ;;		_crc_sum
  7006 ;; This function is called by:
  7007 ;;		_sys_data_init
  7008 ;;		_sys_data_save
  7009 ;;		_modbus_response_illgeal_function
  7010 ;;		_modbus_response_write_single_register
  7011 ;;		_modbus_response_command
  7012 ;; This function uses a non-reentrant model
  7013 ;;
  7014                           
  7015                           
  7016                           ;psect for function _crc_append
  7017  071B                     _crc_append:	
  7018                           
  7019                           ;crc16.c: 145: uint16_t crc;
  7020                           ;crc16.c: 146: crc = crc_sum(message, n);
  7021                           
  7022                           ;incstack = 0
  7023                           ; Regs used in _crc_append: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7024  071B  0821               	movf	crc_append@message+1,w
  7025  071C  00F2               	movwf	crc_sum@buf+1
  7026  071D  0820               	movf	crc_append@message,w
  7027  071E  00F1               	movwf	crc_sum@buf
  7028  071F  0823               	movf	crc_append@n+1,w
  7029  0720  00F4               	movwf	crc_sum@len+1
  7030  0721  0822               	movf	crc_append@n,w
  7031  0722  00F3               	movwf	crc_sum@len
  7032  0723  318C  2444         	fcall	_crc_sum
  7033  0725  0872               	movf	?_crc_sum+1,w
  7034  0726  00AA               	movwf	crc_append@crc+1
  7035  0727  0871               	movf	?_crc_sum,w
  7036  0728  00A9               	movwf	crc_append@crc
  7037                           
  7038                           ;crc16.c: 147: message[n] = (uint8_t)(crc & 0xff);
  7039  0729  0822               	movf	crc_append@n,w
  7040  072A  0720               	addwf	crc_append@message,w
  7041  072B  00A4               	movwf	??_crc_append
  7042  072C  0823               	movf	crc_append@n+1,w
  7043  072D  3D21               	addwfc	crc_append@message+1,w
  7044  072E  00A5               	movwf	??_crc_append+1
  7045  072F  0824               	movf	??_crc_append,w
  7046  0730  0086               	movwf	6
  7047  0731  0825               	movf	??_crc_append+1,w
  7048  0732  0087               	movwf	7
  7049  0733  0829               	movf	crc_append@crc,w
  7050  0734  0081               	movwf	1
  7051                           
  7052                           ;crc16.c: 148: message[n+1] = (uint8_t)((crc >> 8) & 0xff);
  7053  0735  082A               	movf	crc_append@crc+1,w
  7054  0736  00A4               	movwf	??_crc_append
  7055  0737  0822               	movf	crc_append@n,w
  7056  0738  0720               	addwf	crc_append@message,w
  7057  0739  00A5               	movwf	??_crc_append+1
  7058  073A  0823               	movf	crc_append@n+1,w
  7059  073B  3D21               	addwfc	crc_append@message+1,w
  7060  073C  00A6               	movwf	??_crc_append+2
  7061  073D  0825               	movf	??_crc_append+1,w
  7062  073E  3E01               	addlw	1
  7063  073F  00A7               	movwf	??_crc_append+3
  7064  0740  3000               	movlw	0
  7065  0741  3D26               	addwfc	??_crc_append+2,w
  7066  0742  00A8               	movwf	??_crc_append+4
  7067  0743  0827               	movf	??_crc_append+3,w
  7068  0744  0086               	movwf	6
  7069  0745  0828               	movf	??_crc_append+4,w
  7070  0746  0087               	movwf	7
  7071  0747  0824               	movf	??_crc_append,w
  7072  0748  0081               	movwf	1
  7073  0749  0008               	return
  7074  074A                     __end_of_crc_append:	
  7075  074A                     __ptext18:	
  7076 ;; *************** function _my_flash_read_system_erase *****************
  7077 ;; Defined at:
  7078 ;;		line 8 in file "src/api/sysData.c"
  7079 ;; Parameters:    Size  Location     Type
  7080 ;;		None
  7081 ;; Auto vars:     Size  Location     Type
  7082 ;;		None
  7083 ;; Return value:  Size  Location     Type
  7084 ;;                  1    wreg      void 
  7085 ;; Registers used:
  7086 ;;		wreg, status,2, status,0, pclath, cstack
  7087 ;; Tracked objects:
  7088 ;;		On entry : 1F/0
  7089 ;;		On exit  : 1F/3
  7090 ;;		Unchanged: 0/0
  7091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7095 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7096 ;;Total ram usage:        0 bytes
  7097 ;; Hardware stack levels used:    1
  7098 ;; Hardware stack levels required when called:    2
  7099 ;; This function calls:
  7100 ;;		_FLASH_EraseBlock
  7101 ;; This function is called by:
  7102 ;;		_sys_data_init
  7103 ;;		_sys_data_save
  7104 ;; This function uses a non-reentrant model
  7105 ;;
  7106                           
  7107                           
  7108                           ;psect for function _my_flash_read_system_erase
  7109  074A                     _my_flash_read_system_erase:	
  7110                           
  7111                           ;sysData.c: 15: FLASH_EraseBlock(0x1f80);
  7112                           
  7113                           ;incstack = 0
  7114                           ; Regs used in _my_flash_read_system_erase: [wreg+status,2+status,0+pclath+cstack]
  7115  074A  3080               	movlw	128
  7116  074B  00F1               	movwf	FLASH_EraseBlock@startAddr
  7117  074C  301F               	movlw	31
  7118  074D  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  7119  074E  27D1  3180         	fcall	_FLASH_EraseBlock
  7120                           
  7121                           ;sysData.c: 16: FLASH_EraseBlock(0x1f80+32);
  7122  0750  30A0               	movlw	160
  7123  0751  00F1               	movwf	FLASH_EraseBlock@startAddr
  7124  0752  301F               	movlw	31
  7125  0753  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  7126  0754  27D1  3180         	fcall	_FLASH_EraseBlock
  7127                           
  7128                           ;sysData.c: 17: FLASH_EraseBlock(0x1f80+64);
  7129  0756  30C0               	movlw	192
  7130  0757  00F1               	movwf	FLASH_EraseBlock@startAddr
  7131  0758  301F               	movlw	31
  7132  0759  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  7133  075A  27D1  3180         	fcall	_FLASH_EraseBlock
  7134                           
  7135                           ;sysData.c: 18: FLASH_EraseBlock(0x1f80+96);
  7136  075C  30E0               	movlw	224
  7137  075D  00F1               	movwf	FLASH_EraseBlock@startAddr
  7138  075E  301F               	movlw	31
  7139  075F  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  7140  0760  2FD1               	ljmp	l2784
  7141  0761                     __end_of_my_flash_read_system_erase:	
  7142  0761                     __ptext13:	
  7143 ;; *************** function _get_idrv_pwm1_duty *****************
  7144 ;; Defined at:
  7145 ;;		line 43 in file "src/api/sample.c"
  7146 ;; Parameters:    Size  Location     Type
  7147 ;;		None
  7148 ;; Auto vars:     Size  Location     Type
  7149 ;;		None
  7150 ;; Return value:  Size  Location     Type
  7151 ;;                  2    1[COMMON] unsigned int 
  7152 ;; Registers used:
  7153 ;;		wreg
  7154 ;; Tracked objects:
  7155 ;;		On entry : 1F/0
  7156 ;;		On exit  : 1F/1B
  7157 ;;		Unchanged: 0/0
  7158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7159 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7162 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7163 ;;Total ram usage:        2 bytes
  7164 ;; Hardware stack levels used:    1
  7165 ;; Hardware stack levels required when called:    1
  7166 ;; This function calls:
  7167 ;;		Nothing
  7168 ;; This function is called by:
  7169 ;;		_set_idrv_pwm1_duty
  7170 ;; This function uses a non-reentrant model
  7171 ;;
  7172                           
  7173                           
  7174                           ;psect for function _get_idrv_pwm1_duty
  7175  0761                     _get_idrv_pwm1_duty:	
  7176                           
  7177                           ;sample.c: 45: return ((PWM1DCH<<8)|PWM1DCL);
  7178                           
  7179                           ;incstack = 0
  7180                           ; Regs used in _get_idrv_pwm1_duty: [wreg]
  7181  0761  003B               	movlb	27	; select bank27
  7182  0762  0814               	movf	20,w	;volatile
  7183  0763  00F2               	movwf	?_get_idrv_pwm1_duty+1
  7184  0764  01F1               	clrf	?_get_idrv_pwm1_duty
  7185  0765  0813               	movf	19,w	;volatile
  7186  0766  04F1               	iorwf	?_get_idrv_pwm1_duty,f
  7187  0767  0008               	return
  7188  0768                     __end_of_get_idrv_pwm1_duty:	
  7189  0768                     __ptext1:	
  7190 ;; *************** function _uart_received_start *****************
  7191 ;; Defined at:
  7192 ;;		line 49 in file "src/api/my_uart.c"
  7193 ;; Parameters:    Size  Location     Type
  7194 ;;		None
  7195 ;; Auto vars:     Size  Location     Type
  7196 ;;		None
  7197 ;; Return value:  Size  Location     Type
  7198 ;;                  1    wreg      void 
  7199 ;; Registers used:
  7200 ;;		status,2
  7201 ;; Tracked objects:
  7202 ;;		On entry : 1F/0
  7203 ;;		On exit  : 1F/0
  7204 ;;		Unchanged: 0/0
  7205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7209 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7210 ;;Total ram usage:        0 bytes
  7211 ;; Hardware stack levels used:    1
  7212 ;; Hardware stack levels required when called:    1
  7213 ;; This function calls:
  7214 ;;		Nothing
  7215 ;; This function is called by:
  7216 ;;		_main
  7217 ;; This function uses a non-reentrant model
  7218 ;;
  7219                           
  7220                           
  7221                           ;psect for function _uart_received_start
  7222  0768                     _uart_received_start:	
  7223                           
  7224                           ;my_uart.c: 51: eusartRxCount=0;
  7225                           
  7226                           ;incstack = 0
  7227                           ; Regs used in _uart_received_start: [status,2]
  7228  0768  01FC               	clrf	_eusartRxCount	;volatile
  7229                           
  7230                           ;my_uart.c: 52: RCSTAbits.CREN=0;
  7231  0769  0023               	movlb	3	; select bank3
  7232  076A  121D               	bcf	29,4	;volatile
  7233                           
  7234                           ;my_uart.c: 53: PIE1bits.RCIE = 0;
  7235  076B  0021               	movlb	1	; select bank1
  7236  076C  1291               	bcf	17,5	;volatile
  7237                           
  7238                           ;my_uart.c: 54: PIR1bits.RCIF=0;
  7239  076D  0020               	movlb	0	; select bank0
  7240  076E  1291               	bcf	17,5	;volatile
  7241                           
  7242                           ;my_uart.c: 56: RCSTAbits.CREN=1;
  7243  076F  0023               	movlb	3	; select bank3
  7244  0770  161D               	bsf	29,4	;volatile
  7245                           
  7246                           ;my_uart.c: 57: PIE1bits.RCIE = 1;
  7247  0771  0021               	movlb	1	; select bank1
  7248  0772  1691               	bsf	17,5	;volatile
  7249                           
  7250                           ;my_uart.c: 59: eusartRxIdleTime_ms=0;
  7251  0773  0020               	movlb	0	; select bank0
  7252  0774  01DD               	clrf	_eusartRxIdleTime_ms	;volatile
  7253  0775  0008               	return
  7254  0776                     __end_of_uart_received_start:	
  7255  0776                     PL10:	
  7256  0776  01A6               	clrf	___aldiv@divisor+2
  7257  0777  01A7               	clrf	___aldiv@divisor+3
  7258  0778  0021               	movlb	1	; select bank1
  7259  0779  084B               	movf	(_bbtu+3)^(0+128),w
  7260  077A  0020               	movlb	0	; select bank0
  7261  077B  00AB               	movwf	___aldiv@dividend+3
  7262  077C  0021               	movlb	1	; select bank1
  7263  077D  084A               	movf	(_bbtu+2)^(0+128),w
  7264  077E  0020               	movlb	0	; select bank0
  7265  077F  00AA               	movwf	___aldiv@dividend+2
  7266  0780  0021               	movlb	1	; select bank1
  7267  0781  0849               	movf	(_bbtu+1)^(0+128),w
  7268  0782  0020               	movlb	0	; select bank0
  7269  0783  00A9               	movwf	___aldiv@dividend+1
  7270  0784  0021               	movlb	1	; select bank1
  7271  0785  0848               	movf	_bbtu^(0+128),w
  7272  0786  0020               	movlb	0	; select bank0
  7273  0787  00A8               	movwf	___aldiv@dividend
  7274  0788  0008               	return
  7275  0789                     __end_ofPL10:	
  7276  0789                     PL14:	
  7277  0789  0874               	movf	?___lmul+3,w
  7278  078A  00AB               	movwf	___aldiv@dividend+3
  7279  078B  0873               	movf	?___lmul+2,w
  7280  078C  00AA               	movwf	___aldiv@dividend+2
  7281  078D  0872               	movf	?___lmul+1,w
  7282  078E  00A9               	movwf	___aldiv@dividend+1
  7283  078F  0871               	movf	?___lmul,w
  7284  0790  00A8               	movwf	___aldiv@dividend
  7285  0791  0008               	return
  7286  0792                     __end_ofPL14:	
  7287  0792                     PL16:	
  7288  0792  0020               	movlb	0	; select bank0
  7289  0793  00A4               	movwf	___aldiv@divisor
  7290  0794  01A5               	clrf	___aldiv@divisor+1
  7291  0795  01A6               	clrf	___aldiv@divisor+2
  7292  0796  01A7               	clrf	___aldiv@divisor+3
  7293  0797  0021               	movlb	1	; select bank1
  7294  0798  0008               	return
  7295  0799                     __end_ofPL16:	
  7296  0799                     PL24:	
  7297  0799  0874               	movf	?___lldiv+3,w
  7298  079A  00B4               	movwf	calc_temp_rc@y+3
  7299  079B  0873               	movf	?___lldiv+2,w
  7300  079C  00B3               	movwf	calc_temp_rc@y+2
  7301  079D  0872               	movf	?___lldiv+1,w
  7302  079E  00B2               	movwf	calc_temp_rc@y+1
  7303  079F  0871               	movf	?___lldiv,w
  7304  07A0  00B1               	movwf	calc_temp_rc@y
  7305  07A1  0008               	return
  7306  07A2                     __end_ofPL24:	
  7307  07A2                     PL28:	
  7308  07A2  3084               	movlw	132
  7309  07A3  00F1               	movwf	my_flash_system_write@buf
  7310  07A4  3023               	movlw	35
  7311  07A5  00F2               	movwf	my_flash_system_write@buf+1
  7312  07A6  305C               	movlw	92
  7313  07A7  00F3               	movwf	my_flash_system_write@len
  7314  07A8  01F4               	clrf	my_flash_system_write@len+1
  7315  07A9  0008               	return
  7316  07AA                     __end_ofPL28:	
  7317  07AA                     PL30:	
  7318  07AA  3F40               	moviw [0]fsr1
  7319  07AB  0020               	movlb	0	; select bank0
  7320  07AC  00C8               	movwf	??_main
  7321  07AD  3F41               	moviw [1]fsr1
  7322  07AE  00C9               	movwf	??_main+1
  7323  07AF  0848               	movf	??_main,w
  7324  07B0  0021               	movlb	1	; select bank1
  7325  07B1  0008               	return
  7326  07B2                     __end_ofPL30:	
  7327  07B2                     PL38:	
  7328  07B2  00F1               	movwf	___lmul@multiplier
  7329  07B3  300A               	movlw	10
  7330  07B4  00F5               	movwf	___lmul@multiplicand
  7331  07B5  01F6               	clrf	___lmul@multiplicand+1
  7332  07B6  01F7               	clrf	___lmul@multiplicand+2
  7333  07B7  01F8               	clrf	___lmul@multiplicand+3
  7334  07B8  0008               	return
  7335  07B9                     __end_ofPL38:	
  7336  07B9                     PL40:	
  7337  07B9  3063               	movlw	99
  7338  07BA  009E               	movwf	30	;volatile
  7339  07BB  019F               	clrf	31	;volatile
  7340  07BC  019B               	clrf	27	;volatile
  7341  07BD  019C               	clrf	28	;volatile
  7342  07BE  0008               	return
  7343  07BF                     __end_ofPL40:	
  7344  07BF                     PL42:	
  7345  07BF  00A0               	movwf	crc_append@message
  7346  07C0  3023               	movlw	35
  7347  07C1  00A1               	movwf	crc_append@message+1
  7348  07C2  305A               	movlw	90
  7349  07C3  00A2               	movwf	crc_append@n
  7350  07C4  01A3               	clrf	crc_append@n+1
  7351  07C5  0008               	return
  7352  07C6                     __end_ofPL42:	
  7353  07C6                     PL50:	
  7354  07C6  3084               	movlw	132
  7355  07C7  0086               	movwf	6
  7356  07C8  3023               	movlw	35
  7357  07C9  0087               	movwf	7
  7358  07CA  3455               	retlw	85
  7359  07CB                     __end_ofPL50:	
  7360  07CB                     PL54:	
  7361  07CB  3055               	movlw	85
  7362  07CC  003C               	movlb	28	; select bank28
  7363  07CD  008F               	movwf	15	;volatile
  7364  07CE  30AA               	movlw	170
  7365  07CF  008F               	movwf	15	;volatile
  7366  07D0  0008               	return
  7367  07D1                     __end_ofPL54:	
  7368  07D1                     __ptext19:	
  7369 ;; *************** function _FLASH_EraseBlock *****************
  7370 ;; Defined at:
  7371 ;;		line 147 in file "mcc_generated_files/memory.c"
  7372 ;; Parameters:    Size  Location     Type
  7373 ;;  startAddr       2    1[COMMON] unsigned int 
  7374 ;; Auto vars:     Size  Location     Type
  7375 ;;  GIEBitValue     1    3[COMMON] unsigned char 
  7376 ;; Return value:  Size  Location     Type
  7377 ;;                  1    wreg      void 
  7378 ;; Registers used:
  7379 ;;		wreg, status,2, status,0
  7380 ;; Tracked objects:
  7381 ;;		On entry : 1C/0
  7382 ;;		On exit  : 1F/3
  7383 ;;		Unchanged: 0/0
  7384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7385 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7386 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7388 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7389 ;;Total ram usage:        3 bytes
  7390 ;; Hardware stack levels used:    1
  7391 ;; Hardware stack levels required when called:    1
  7392 ;; This function calls:
  7393 ;;		Nothing
  7394 ;; This function is called by:
  7395 ;;		_my_flash_read_system_erase
  7396 ;; This function uses a non-reentrant model
  7397 ;;
  7398                           
  7399                           
  7400                           ;psect for function _FLASH_EraseBlock
  7401  07D1                     _FLASH_EraseBlock:	
  7402  07D1                     l2784:	
  7403                           ;incstack = 0
  7404                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  7405                           
  7406                           
  7407                           ;memory.c: 149: uint8_t GIEBitValue = INTCONbits.GIE;
  7408  07D1  3000               	movlw	0
  7409  07D2  1B8B               	btfsc	11,7	;volatile
  7410  07D3  3001               	movlw	1
  7411  07D4  00F3               	movwf	FLASH_EraseBlock@GIEBitValue
  7412                           
  7413                           ;memory.c: 152: INTCONbits.GIE = 0;
  7414  07D5  138B               	bcf	11,7	;volatile
  7415                           
  7416                           ;memory.c: 154: PMADRL = (startAddr & 0xFF);
  7417  07D6  0871               	movf	FLASH_EraseBlock@startAddr,w
  7418  07D7  0023               	movlb	3	; select bank3
  7419  07D8  0091               	movwf	17	;volatile
  7420                           
  7421                           ;memory.c: 156: PMADRH = ((startAddr & 0xFF00) >> 8);
  7422  07D9  0872               	movf	FLASH_EraseBlock@startAddr+1,w
  7423  07DA  0092               	movwf	18	;volatile
  7424                           
  7425                           ;memory.c: 159: PMCON1bits.CFGS = 0;
  7426  07DB  1315               	bcf	21,6	;volatile
  7427                           
  7428                           ;memory.c: 160: PMCON1bits.FREE = 1;
  7429  07DC  1615               	bsf	21,4	;volatile
  7430                           
  7431                           ;memory.c: 161: PMCON1bits.WREN = 1;
  7432  07DD  1515               	bsf	21,2	;volatile
  7433                           
  7434                           ;memory.c: 164: PMCON2 = 0x55;
  7435  07DE  3055               	movlw	85
  7436  07DF  0096               	movwf	22	;volsfr
  7437                           
  7438                           ;memory.c: 165: PMCON2 = 0xAA;
  7439  07E0  30AA               	movlw	170
  7440  07E1  0096               	movwf	22	;volsfr
  7441                           
  7442                           ;memory.c: 166: PMCON1bits.WR = 1;
  7443  07E2  1495               	bsf	21,1	;volatile
  7444                           
  7445                           ;memory.c: 167: __nop();
  7446  07E3  0000               	nop
  7447                           
  7448                           ;memory.c: 168: __nop();
  7449  07E4  0000               	nop
  7450                           
  7451                           ;memory.c: 170: PMCON1bits.WREN = 0;
  7452  07E5  0023               	movlb	3	; select bank3
  7453  07E6  1115               	bcf	21,2	;volatile
  7454                           
  7455                           ;memory.c: 171: INTCONbits.GIE = GIEBitValue;
  7456  07E7  0C73               	rrf	FLASH_EraseBlock@GIEBitValue,w
  7457  07E8  318D  2D25         	ljmp	PL32	;call to abstracted procedure
  7458  07EA                     __end_of_FLASH_EraseBlock:	
  7459  07EA                     __ptext48:	
  7460 ;; *************** function _EUSART_Initialize *****************
  7461 ;; Defined at:
  7462 ;;		line 55 in file "mcc_generated_files/eusart.c"
  7463 ;; Parameters:    Size  Location     Type
  7464 ;;		None
  7465 ;; Auto vars:     Size  Location     Type
  7466 ;;		None
  7467 ;; Return value:  Size  Location     Type
  7468 ;;                  1    wreg      void 
  7469 ;; Registers used:
  7470 ;;		wreg
  7471 ;; Tracked objects:
  7472 ;;		On entry : 1F/0
  7473 ;;		On exit  : 1F/1
  7474 ;;		Unchanged: 0/0
  7475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7479 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7480 ;;Total ram usage:        0 bytes
  7481 ;; Hardware stack levels used:    1
  7482 ;; Hardware stack levels required when called:    1
  7483 ;; This function calls:
  7484 ;;		Nothing
  7485 ;; This function is called by:
  7486 ;;		_SYSTEM_Initialize
  7487 ;; This function uses a non-reentrant model
  7488 ;;
  7489                           
  7490                           
  7491                           ;psect for function _EUSART_Initialize
  7492  07EA                     _EUSART_Initialize:	
  7493  07EA                     l3120:	
  7494                           ;incstack = 0
  7495                           ; Regs used in _EUSART_Initialize: [wreg]
  7496                           
  7497                           
  7498                           ;eusart.c: 60: BAUDCON = 0x08;
  7499  07EA  3008               	movlw	8
  7500  07EB  0023               	movlb	3	; select bank3
  7501  07EC  009F               	movwf	31	;volatile
  7502                           
  7503                           ;eusart.c: 63: RCSTA = 0x90;
  7504  07ED  3090               	movlw	144
  7505  07EE  009D               	movwf	29	;volatile
  7506                           
  7507                           ;eusart.c: 66: TXSTA = 0x24;
  7508  07EF  3024               	movlw	36
  7509  07F0  009E               	movwf	30	;volatile
  7510                           
  7511                           ;eusart.c: 70: SPBRGL = 0xA0;
  7512  07F1  30A0               	movlw	160
  7513  07F2  009B               	movwf	27	;volatile
  7514                           
  7515                           ;eusart.c: 75: SPBRGH = 0x01;
  7516  07F3  3001               	movlw	1
  7517  07F4  009C               	movwf	28	;volatile
  7518                           
  7519                           ;eusart.c: 76: PIE1bits.RCIE = 1;
  7520  07F5  0021               	movlb	1	; select bank1
  7521  07F6  1691               	bsf	17,5	;volatile
  7522  07F7  0008               	return
  7523  07F8                     __end_of_EUSART_Initialize:	
  7524                           
  7525                           	psect	bssCOMMON
  7526  007C                     __pbssCOMMON:	
  7527  007C                     _eusartRxCount:	
  7528  007C                     	ds	1
  7529                           
  7530                           	psect	bssBANK0
  7531  004A                     __pbssBANK0:	
  7532  004A                     _pwm2Ei:	
  7533  004A                     	ds	2
  7534  004C                     _rsLoAvg:	
  7535  004C                     	ds	2
  7536  004E                     _rtAdcValueRcHi:	
  7537  004E                     	ds	2
  7538  0050                     _rtAdcValueRcLo:	
  7539  0050                     	ds	2
  7540  0052                     _rtAdcValueRsHi:	
  7541  0052                     	ds	2
  7542  0054                     _rtAdcValueRsLo:	
  7543  0054                     	ds	2
  7544  0056                     _rtAdcValueVoFb:	
  7545  0056                     	ds	2
  7546  0058                     _voExpectAdcValue:	
  7547  0058                     	ds	2
  7548  005A                     _voExpectMv:	
  7549  005A                     	ds	2
  7550  005C                     _Event:	
  7551  005C                     	ds	1
  7552  005D                     _eusartRxIdleTime_ms:	
  7553  005D                     	ds	1
  7554  005E                     _pidBbSm:	
  7555  005E                     	ds	1
  7556  005F                     _pidTestNum:	
  7557  005F                     	ds	1
  7558  0060                     _subTickerX:	
  7559  0060                     	ds	1
  7560  0061                     _subTickerX_1s:	
  7561  0061                     	ds	1
  7562                           
  7563                           	psect	dataBANK0
  7564  0062                     __pdataBANK0:	
  7565  0062                     _pwm1DutyForIdrv:	
  7566  0062                     	ds	2
  7567  0064                     _pwm2DutyForVout:	
  7568  0064                     	ds	2
  7569                           
  7570                           	psect	bssBANK1
  7571  00A0                     __pbssBANK1:	
  7572  00A0                     _err:	
  7573  00A0                     	ds	12
  7574  00AC                     _PidKp:	
  7575  00AC                     	ds	4
  7576  00B0                     _PidTd:	
  7577  00B0                     	ds	4
  7578  00B4                     _PidTi:	
  7579  00B4                     	ds	4
  7580  00B8                     _bbku:	
  7581  00B8                     	ds	4
  7582  00BC                     _bbt0:	
  7583  00BC                     	ds	4
  7584  00C0                     _bbt1:	
  7585  00C0                     	ds	4
  7586  00C4                     _bbta:	
  7587  00C4                     	ds	4
  7588  00C8                     _bbtu:	
  7589  00C8                     	ds	4
  7590  00CC                     _bbu:	
  7591  00CC                     	ds	4
  7592  00D0                     _globalTicker:	
  7593  00D0                     	ds	4
  7594                           
  7595                           	psect	dataBANK1
  7596  00D4                     __pdataBANK1:	
  7597  00D4                     _bbmax:	
  7598  00D4                     	ds	4
  7599  00D8                     _bbmin:	
  7600  00D8                     	ds	4
  7601  00DC                     _pidU:	
  7602  00DC                     	ds	4
  7603  00E0                     _resRc:	
  7604  00E0                     	ds	4
  7605  00E4                     _resRs:	
  7606  00E4                     	ds	4
  7607                           
  7608                           	psect	bssBANK2
  7609  0120                     __pbssBANK2:	
  7610  0120                     _rsLoAvgBuf:	
  7611  0120                     	ds	10
  7612  012A                     _eusartRxBuffer:	
  7613  012A                     	ds	64
  7614                           
  7615                           	psect	bssBANK3
  7616  01A0                     __pbssBANK3:	
  7617  01A0                     _modbusBuf:	
  7618  01A0                     	ds	64
  7619                           
  7620                           	psect	clrtext
  7621  17E1                     clear_ram0:	
  7622                           ;	Called with FSR0 containing the base address, and
  7623                           ;	btemp/btemp+1 has the size to clear
  7624                           
  7625  17E1  0064               	clrwdt	;clear the watchdog before getting into this loop
  7626  17E2                     clrloop0:	
  7627  17E2  3001               	movlw	1
  7628  17E3  0180               	clrf	0	;clear RAM location pointed to by FSR
  7629  17E4  3101               	addfsr 0,1
  7630  17E5  02FE               	subwf	126,f
  7631  17E6  3000               	movlw	0
  7632  17E7  3BFF               	subwfb	127,f
  7633  17E8  087F               	movf	127,w
  7634  17E9  047E               	iorwf	126,w
  7635  17EA  1903               	btfsc	3,2
  7636  17EB  3400               	retlw	0	;all done for this memory range, return
  7637  17EC  2FE2               	goto	clrloop0	;have we reached the end yet?
  7638                           
  7639                           	psect	inittext
  7640  17D5                     init_ram:	
  7641  17D5  00FE               	movwf	126
  7642  17D6                     initloop:	
  7643  17D6  0012               	moviw fsr0++
  7644  17D7  001E               	movwi fsr1++
  7645  17D8  3001               	movlw	1
  7646  17D9  02FE               	subwf	126,f
  7647  17DA  3000               	movlw	0
  7648  17DB  3BFF               	subwfb	127,f
  7649  17DC  087F               	movf	127,w
  7650  17DD  047E               	iorwf	126,w
  7651  17DE  1903               	btfsc	3,2
  7652  17DF  3400               	retlw	0
  7653  17E0  2FD6               	goto	initloop
  7654                           
  7655                           	psect	cstackBANK4
  7656  0220                     __pcstackBANK4:	
  7657  0220                     calc_expect_vout_adc_value@y1:	
  7658                           
  7659                           ; 4 bytes @ 0x0
  7660  0220                     	ds	4
  7661  0224                     calc_expect_vout_adc_value@x1:	
  7662                           
  7663                           ; 4 bytes @ 0x4
  7664  0224                     	ds	4
  7665  0228                     calc_expect_vout_adc_value@y0:	
  7666                           
  7667                           ; 4 bytes @ 0x8
  7668  0228                     	ds	4
  7669  022C                     calc_expect_vout_adc_value@x0:	
  7670                           
  7671                           ; 4 bytes @ 0xC
  7672  022C                     	ds	4
  7673  0230                     calc_expect_vout_adc_value@t32:	
  7674                           
  7675                           ; 4 bytes @ 0x10
  7676  0230                     	ds	4
  7677  0234                     calc_expect_vout_adc_value@i:	
  7678                           
  7679                           ; 1 bytes @ 0x14
  7680  0234                     	ds	1
  7681                           
  7682                           	psect	cstackCOMMON
  7683  0070                     __pcstackCOMMON:	
  7684  0070                     ?_TMR2_StartTimer:	
  7685  0070                     ?_PIN_MANAGER_Initialize:	
  7686                           ; 1 bytes @ 0x0
  7687                           
  7688  0070                     ?_OSCILLATOR_Initialize:	
  7689                           ; 1 bytes @ 0x0
  7690                           
  7691  0070                     ?_WDT_Initialize:	
  7692                           ; 1 bytes @ 0x0
  7693                           
  7694  0070                     ?_ADC1_Initialize:	
  7695                           ; 1 bytes @ 0x0
  7696                           
  7697  0070                     ?_EUSART_Initialize:	
  7698                           ; 1 bytes @ 0x0
  7699                           
  7700  0070                     ?_PWM2_Initialize:	
  7701                           ; 1 bytes @ 0x0
  7702                           
  7703  0070                     ?_PWM1_Initialize:	
  7704                           ; 1 bytes @ 0x0
  7705                           
  7706  0070                     ?_TMR2_Initialize:	
  7707                           ; 1 bytes @ 0x0
  7708                           
  7709  0070                     ?_INTERRUPT_InterruptManager:	
  7710                           ; 1 bytes @ 0x0
  7711                           
  7712  0070                     ??_INTERRUPT_InterruptManager:	
  7713                           ; 1 bytes @ 0x0
  7714                           
  7715  0070                     ?_FVR_Initialize:	
  7716                           ; 1 bytes @ 0x0
  7717                           
  7718  0070                     ?_SYSTEM_Initialize:	
  7719                           ; 1 bytes @ 0x0
  7720                           
  7721  0070                     ?_uart_received_start:	
  7722                           ; 1 bytes @ 0x0
  7723                           
  7724  0070                     ?_fvr_set_gain:	
  7725                           ; 1 bytes @ 0x0
  7726                           
  7727  0070                     ?_adc_init:	
  7728                           ; 1 bytes @ 0x0
  7729                           
  7730  0070                     ?_pid_pwm1_idrv_b_b:	
  7731                           ; 1 bytes @ 0x0
  7732                           
  7733  0070                     ?_pid_pwm1_idrv_run:	
  7734                           ; 1 bytes @ 0x0
  7735                           
  7736  0070                     ?_pid_pwm2_vout_run:	
  7737                           ; 1 bytes @ 0x0
  7738                           
  7739  0070                     ?_my_flash_read_system_erase:	
  7740                           ; 1 bytes @ 0x0
  7741                           
  7742  0070                     ?_sys_data_save:	
  7743                           ; 1 bytes @ 0x0
  7744                           
  7745  0070                     ?_modbus_response_write_single_register:	
  7746                           ; 1 bytes @ 0x0
  7747                           
  7748  0070                     ?_modbus_response_command:	
  7749                           ; 1 bytes @ 0x0
  7750                           
  7751  0070                     ?_main:	
  7752                           ; 1 bytes @ 0x0
  7753                           
  7754  0070                     ?_sys_data_init:	
  7755                           ; 1 bytes @ 0x0
  7756                           
  7757  0070                     INTERRUPT_InterruptManager@t8:	
  7758                           ; 2 bytes @ 0x0
  7759                           
  7760                           
  7761                           ; 1 bytes @ 0x0
  7762  0070                     	ds	1
  7763  0071                     ?_FLASH_EraseBlock:	
  7764  0071                     ?_TMR2_SetInterruptHandler:	
  7765                           ; 1 bytes @ 0x1
  7766                           
  7767  0071                     ??_TMR2_StartTimer:	
  7768                           ; 1 bytes @ 0x1
  7769                           
  7770  0071                     ??_PIN_MANAGER_Initialize:	
  7771                           ; 1 bytes @ 0x1
  7772                           
  7773  0071                     ??_OSCILLATOR_Initialize:	
  7774                           ; 1 bytes @ 0x1
  7775                           
  7776  0071                     ??_WDT_Initialize:	
  7777                           ; 1 bytes @ 0x1
  7778                           
  7779  0071                     ??_ADC1_Initialize:	
  7780                           ; 1 bytes @ 0x1
  7781                           
  7782  0071                     ??_EUSART_Initialize:	
  7783                           ; 1 bytes @ 0x1
  7784                           
  7785  0071                     ?_m_mem_cpy_len:	
  7786                           ; 1 bytes @ 0x1
  7787                           
  7788  0071                     ??_PWM2_Initialize:	
  7789                           ; 1 bytes @ 0x1
  7790                           
  7791  0071                     ??_PWM1_Initialize:	
  7792                           ; 1 bytes @ 0x1
  7793                           
  7794  0071                     ??_FVR_Initialize:	
  7795                           ; 1 bytes @ 0x1
  7796                           
  7797  0071                     ?_uart_send_len:	
  7798                           ; 1 bytes @ 0x1
  7799                           
  7800  0071                     ??_uart_received_start:	
  7801                           ; 1 bytes @ 0x1
  7802                           
  7803  0071                     ??_fvr_set_gain:	
  7804                           ; 1 bytes @ 0x1
  7805                           
  7806  0071                     ??_adc_init:	
  7807                           ; 1 bytes @ 0x1
  7808                           
  7809  0071                     ?_my_flash_system_read:	
  7810                           ; 1 bytes @ 0x1
  7811                           
  7812  0071                     ?_get_idrv_pwm1_duty:	
  7813                           ; 1 bytes @ 0x1
  7814                           
  7815  0071                     ?_get_vout_pwm2_duty:	
  7816                           ; 2 bytes @ 0x1
  7817                           
  7818  0071                     ?_my_flash_system_write:	
  7819                           ; 2 bytes @ 0x1
  7820                           
  7821  0071                     ?_getRegisterVal:	
  7822                           ; 2 bytes @ 0x1
  7823                           
  7824  0071                     ?_crc_sum:	
  7825                           ; 2 bytes @ 0x1
  7826                           
  7827  0071                     ?___wmul:	
  7828                           ; 2 bytes @ 0x1
  7829                           
  7830  0071                     ?___awdiv:	
  7831                           ; 2 bytes @ 0x1
  7832                           
  7833  0071                     ?___lwdiv:	
  7834                           ; 2 bytes @ 0x1
  7835                           
  7836  0071                     ?___lmul:	
  7837                           ; 2 bytes @ 0x1
  7838                           
  7839  0071                     ?___lldiv:	
  7840                           ; 4 bytes @ 0x1
  7841                           
  7842  0071                     PIN_MANAGER_Initialize@state:	
  7843                           ; 4 bytes @ 0x1
  7844                           
  7845  0071                     uart_send_len@len:	
  7846                           ; 1 bytes @ 0x1
  7847                           
  7848  0071                     fvr_set_gain@t8:	
  7849                           ; 1 bytes @ 0x1
  7850                           
  7851  0071                     FLASH_EraseBlock@startAddr:	
  7852                           ; 1 bytes @ 0x1
  7853                           
  7854  0071                     TMR2_SetInterruptHandler@InterruptHandler:	
  7855                           ; 2 bytes @ 0x1
  7856                           
  7857  0071                     my_flash_system_read@buf:	
  7858                           ; 2 bytes @ 0x1
  7859                           
  7860  0071                     my_flash_system_write@buf:	
  7861                           ; 2 bytes @ 0x1
  7862                           
  7863  0071                     getRegisterVal@addr:	
  7864                           ; 2 bytes @ 0x1
  7865                           
  7866  0071                     m_mem_cpy_len@d:	
  7867                           ; 2 bytes @ 0x1
  7868                           
  7869  0071                     crc_sum@buf:	
  7870                           ; 2 bytes @ 0x1
  7871                           
  7872  0071                     ___wmul@multiplier:	
  7873                           ; 2 bytes @ 0x1
  7874                           
  7875  0071                     ___awdiv@divisor:	
  7876                           ; 2 bytes @ 0x1
  7877                           
  7878  0071                     ___lwdiv@divisor:	
  7879                           ; 2 bytes @ 0x1
  7880                           
  7881  0071                     ___lmul@multiplier:	
  7882                           ; 2 bytes @ 0x1
  7883                           
  7884  0071                     ___lldiv@divisor:	
  7885                           ; 4 bytes @ 0x1
  7886                           
  7887                           
  7888                           ; 4 bytes @ 0x1
  7889  0071                     	ds	1
  7890  0072                     ??_uart_send_len:	
  7891  0072                     fvr_set_gain@g:	
  7892                           ; 1 bytes @ 0x2
  7893                           
  7894  0072                     adc_init@ch:	
  7895                           ; 1 bytes @ 0x2
  7896                           
  7897                           
  7898                           ; 1 bytes @ 0x2
  7899  0072                     	ds	1
  7900  0073                     ??_FLASH_EraseBlock:	
  7901  0073                     ??_TMR2_SetInterruptHandler:	
  7902                           ; 1 bytes @ 0x3
  7903                           
  7904  0073                     ??_TMR2_Initialize:	
  7905                           ; 1 bytes @ 0x3
  7906                           
  7907  0073                     ??_SYSTEM_Initialize:	
  7908                           ; 1 bytes @ 0x3
  7909                           
  7910  0073                     ??_get_idrv_pwm1_duty:	
  7911                           ; 1 bytes @ 0x3
  7912                           
  7913  0073                     ?_set_idrv_pwm1_duty:	
  7914                           ; 1 bytes @ 0x3
  7915                           
  7916  0073                     ??_get_vout_pwm2_duty:	
  7917                           ; 1 bytes @ 0x3
  7918                           
  7919  0073                     ?_set_vout_pwm2_duty:	
  7920                           ; 1 bytes @ 0x3
  7921                           
  7922  0073                     ?_adc_sample:	
  7923                           ; 1 bytes @ 0x3
  7924                           
  7925  0073                     FLASH_EraseBlock@GIEBitValue:	
  7926                           ; 2 bytes @ 0x3
  7927                           
  7928  0073                     uart_send_len@buf:	
  7929                           ; 1 bytes @ 0x3
  7930                           
  7931  0073                     adc_sample@gfvr:	
  7932                           ; 1 bytes @ 0x3
  7933                           
  7934  0073                     getRegisterVal@tempData:	
  7935                           ; 1 bytes @ 0x3
  7936                           
  7937  0073                     set_idrv_pwm1_duty@duty:	
  7938                           ; 1 bytes @ 0x3
  7939                           
  7940  0073                     set_vout_pwm2_duty@duty:	
  7941                           ; 2 bytes @ 0x3
  7942                           
  7943  0073                     my_flash_system_read@len:	
  7944                           ; 2 bytes @ 0x3
  7945                           
  7946  0073                     my_flash_system_write@len:	
  7947                           ; 2 bytes @ 0x3
  7948                           
  7949  0073                     m_mem_cpy_len@s:	
  7950                           ; 2 bytes @ 0x3
  7951                           
  7952  0073                     crc_sum@len:	
  7953                           ; 2 bytes @ 0x3
  7954                           
  7955  0073                     ___wmul@multiplicand:	
  7956                           ; 2 bytes @ 0x3
  7957                           
  7958  0073                     ___awdiv@dividend:	
  7959                           ; 2 bytes @ 0x3
  7960                           
  7961  0073                     ___lwdiv@dividend:	
  7962                           ; 2 bytes @ 0x3
  7963                           
  7964                           
  7965                           ; 2 bytes @ 0x3
  7966  0073                     	ds	1
  7967  0074                     ??_my_flash_read_system_erase:	
  7968  0074                     ??_getRegisterVal:	
  7969                           ; 1 bytes @ 0x4
  7970                           
  7971  0074                     uart_send_len@i:	
  7972                           ; 1 bytes @ 0x4
  7973                           
  7974  0074                     adc_sample@num:	
  7975                           ; 1 bytes @ 0x4
  7976                           
  7977                           
  7978                           ; 1 bytes @ 0x4
  7979  0074                     	ds	1
  7980  0075                     ??_set_idrv_pwm1_duty:	
  7981  0075                     ??_set_vout_pwm2_duty:	
  7982                           ; 1 bytes @ 0x5
  7983                           
  7984  0075                     ??_adc_sample:	
  7985                           ; 1 bytes @ 0x5
  7986                           
  7987  0075                     ??_my_flash_system_read:	
  7988                           ; 1 bytes @ 0x5
  7989                           
  7990  0075                     ??_my_flash_system_write:	
  7991                           ; 1 bytes @ 0x5
  7992                           
  7993  0075                     ??_crc_sum:	
  7994                           ; 1 bytes @ 0x5
  7995                           
  7996  0075                     ??___wmul:	
  7997                           ; 1 bytes @ 0x5
  7998                           
  7999  0075                     ??___awdiv:	
  8000                           ; 1 bytes @ 0x5
  8001                           
  8002  0075                     ??___lwdiv:	
  8003                           ; 1 bytes @ 0x5
  8004                           
  8005  0075                     ___awdiv@counter:	
  8006                           ; 1 bytes @ 0x5
  8007                           
  8008  0075                     set_idrv_pwm1_duty@t16:	
  8009                           ; 1 bytes @ 0x5
  8010                           
  8011  0075                     set_vout_pwm2_duty@t16:	
  8012                           ; 2 bytes @ 0x5
  8013                           
  8014  0075                     m_mem_cpy_len@len:	
  8015                           ; 2 bytes @ 0x5
  8016                           
  8017  0075                     crc_sum@j:	
  8018                           ; 2 bytes @ 0x5
  8019                           
  8020  0075                     ___wmul@product:	
  8021                           ; 2 bytes @ 0x5
  8022                           
  8023  0075                     ___lwdiv@quotient:	
  8024                           ; 2 bytes @ 0x5
  8025                           
  8026  0075                     ___lmul@multiplicand:	
  8027                           ; 2 bytes @ 0x5
  8028                           
  8029  0075                     ___lldiv@dividend:	
  8030                           ; 4 bytes @ 0x5
  8031                           
  8032                           
  8033                           ; 4 bytes @ 0x5
  8034  0075                     	ds	1
  8035  0076                     adc_sample@ch:	
  8036  0076                     ___awdiv@sign:	
  8037                           ; 1 bytes @ 0x6
  8038                           
  8039                           
  8040                           ; 1 bytes @ 0x6
  8041  0076                     	ds	1
  8042  0077                     ??_m_mem_cpy_len:	
  8043  0077                     my_flash_system_read@GIEBitValue:	
  8044                           ; 1 bytes @ 0x7
  8045                           
  8046  0077                     ___lwdiv@counter:	
  8047                           ; 1 bytes @ 0x7
  8048                           
  8049  0077                     adc_sample@ret:	
  8050                           ; 1 bytes @ 0x7
  8051                           
  8052  0077                     crc_sum@i:	
  8053                           ; 2 bytes @ 0x7
  8054                           
  8055  0077                     ___awdiv@quotient:	
  8056                           ; 2 bytes @ 0x7
  8057                           
  8058                           
  8059                           ; 2 bytes @ 0x7
  8060  0077                     	ds	1
  8061  0078                     my_flash_system_read@i:	
  8062                           
  8063                           ; 2 bytes @ 0x8
  8064  0078                     	ds	1
  8065  0079                     ??_calc_temp_rs:	
  8066  0079                     ??_pid_pwm1_idrv_b_b:	
  8067                           ; 1 bytes @ 0x9
  8068                           
  8069  0079                     ??_pid_pwm2_vout_run:	
  8070                           ; 1 bytes @ 0x9
  8071                           
  8072  0079                     ??___lmul:	
  8073                           ; 1 bytes @ 0x9
  8074                           
  8075  0079                     ??___aldiv:	
  8076                           ; 1 bytes @ 0x9
  8077                           
  8078  0079                     ??___lldiv:	
  8079                           ; 1 bytes @ 0x9
  8080                           
  8081  0079                     ?_calc_rs_lo_avg:	
  8082                           ; 1 bytes @ 0x9
  8083                           
  8084  0079                     adc_sample@i:	
  8085                           ; 2 bytes @ 0x9
  8086                           
  8087  0079                     calc_rs_lo_avg@x:	
  8088                           ; 1 bytes @ 0x9
  8089                           
  8090  0079                     crc_sum@crc:	
  8091                           ; 2 bytes @ 0x9
  8092                           
  8093                           
  8094                           ; 2 bytes @ 0x9
  8095  0079                     	ds	1
  8096  007A                     getRegisterVal@tempAddr:	
  8097  007A                     adc_sample@t16:	
  8098                           ; 1 bytes @ 0xA
  8099                           
  8100  007A                     my_flash_system_read@flashAddr:	
  8101                           ; 2 bytes @ 0xA
  8102                           
  8103                           
  8104                           ; 2 bytes @ 0xA
  8105  007A                     	ds	1
  8106  007B                     ??_crc_verify:	
  8107  007B                     ??_sys_data_save:	
  8108                           ; 1 bytes @ 0xB
  8109                           
  8110  007B                     ??_modbus_response_illgeal_function:	
  8111                           ; 1 bytes @ 0xB
  8112                           
  8113  007B                     ??_modbus_response_command:	
  8114                           ; 1 bytes @ 0xB
  8115                           
  8116                           
  8117                           ; 1 bytes @ 0xB
  8118  007B                     	ds	1
  8119  007C                     ??_modbus_response_process:	
  8120                           
  8121                           	psect	cstackBANK0
  8122  0020                     __pcstackBANK0:	
  8123                           ; 1 bytes @ 0xC
  8124                           
  8125  0020                     ?_crc_verify:	
  8126  0020                     ?_crc_append:	
  8127                           ; 1 bytes @ 0x0
  8128                           
  8129  0020                     pid_pwm2_vout_run@ei:	
  8130                           ; 1 bytes @ 0x0
  8131                           
  8132  0020                     my_flash_system_write@j:	
  8133                           ; 2 bytes @ 0x0
  8134                           
  8135  0020                     crc_verify@message:	
  8136                           ; 2 bytes @ 0x0
  8137                           
  8138  0020                     crc_append@message:	
  8139                           ; 2 bytes @ 0x0
  8140                           
  8141  0020                     ___lmul@product:	
  8142                           ; 2 bytes @ 0x0
  8143                           
  8144  0020                     ___lldiv@quotient:	
  8145                           ; 4 bytes @ 0x0
  8146                           
  8147                           
  8148                           ; 4 bytes @ 0x0
  8149  0020                     	ds	2
  8150  0022                     my_flash_system_write@GIEBitValue:	
  8151  0022                     pid_pwm2_vout_run@t16:	
  8152                           ; 1 bytes @ 0x2
  8153                           
  8154  0022                     crc_verify@n:	
  8155                           ; 2 bytes @ 0x2
  8156                           
  8157  0022                     crc_append@n:	
  8158                           ; 2 bytes @ 0x2
  8159                           
  8160                           
  8161                           ; 2 bytes @ 0x2
  8162  0022                     	ds	1
  8163  0023                     my_flash_system_write@blocNum:	
  8164                           
  8165                           ; 2 bytes @ 0x3
  8166  0023                     	ds	1
  8167  0024                     ??_crc_append:	
  8168  0024                     ?___aldiv:	
  8169                           ; 1 bytes @ 0x4
  8170                           
  8171  0024                     ___lldiv@counter:	
  8172                           ; 4 bytes @ 0x4
  8173                           
  8174  0024                     crc_verify@crccal:	
  8175                           ; 1 bytes @ 0x4
  8176                           
  8177  0024                     ___aldiv@divisor:	
  8178                           ; 2 bytes @ 0x4
  8179                           
  8180                           
  8181                           ; 4 bytes @ 0x4
  8182  0024                     	ds	1
  8183  0025                     ??_calc_rs_lo_avg:	
  8184  0025                     ?_calc_temp_rs:	
  8185                           ; 1 bytes @ 0x5
  8186                           
  8187  0025                     ?_calc_temp_rc:	
  8188                           ; 4 bytes @ 0x5
  8189                           
  8190  0025                     my_flash_system_write@loc:	
  8191                           ; 4 bytes @ 0x5
  8192                           
  8193                           
  8194                           ; 2 bytes @ 0x5
  8195  0025                     	ds	1
  8196  0026                     crc_verify@expected:	
  8197                           
  8198                           ; 2 bytes @ 0x6
  8199  0026                     	ds	1
  8200  0027                     my_flash_system_write@flashAddr:	
  8201  0027                     calc_rs_lo_avg@t32:	
  8202                           ; 2 bytes @ 0x7
  8203                           
  8204                           
  8205                           ; 4 bytes @ 0x7
  8206  0027                     	ds	1
  8207  0028                     ___aldiv@dividend:	
  8208                           
  8209                           ; 4 bytes @ 0x8
  8210  0028                     	ds	1
  8211  0029                     ??_calc_temp_rc:	
  8212  0029                     my_flash_system_write@i:	
  8213                           ; 1 bytes @ 0x9
  8214                           
  8215  0029                     crc_append@crc:	
  8216                           ; 2 bytes @ 0x9
  8217                           
  8218  0029                     calc_temp_rs@x:	
  8219                           ; 2 bytes @ 0x9
  8220                           
  8221                           
  8222                           ; 4 bytes @ 0x9
  8223  0029                     	ds	2
  8224  002B                     ??_sys_data_init:	
  8225  002B                     ?_modbus_response_illgeal_function:	
  8226                           ; 1 bytes @ 0xB
  8227                           
  8228  002B                     ??_modbus_response_write_single_register:	
  8229                           ; 1 bytes @ 0xB
  8230                           
  8231  002B                     calc_rs_lo_avg@i:	
  8232                           ; 1 bytes @ 0xB
  8233                           
  8234  002B                     modbus_response_illgeal_function@errcode:	
  8235                           ; 1 bytes @ 0xB
  8236                           
  8237  002B                     modbus_response_command@tmpAddr:	
  8238                           ; 1 bytes @ 0xB
  8239                           
  8240                           
  8241                           ; 2 bytes @ 0xB
  8242  002B                     	ds	1
  8243  002C                     modbus_response_illgeal_function@buf:	
  8244  002C                     ___aldiv@counter:	
  8245                           ; 1 bytes @ 0xC
  8246                           
  8247                           
  8248                           ; 1 bytes @ 0xC
  8249  002C                     	ds	1
  8250  002D                     modbus_response_illgeal_function@pmdbs:	
  8251  002D                     ___aldiv@sign:	
  8252                           ; 1 bytes @ 0xD
  8253                           
  8254  002D                     modbus_response_command@startAddr:	
  8255                           ; 1 bytes @ 0xD
  8256                           
  8257  002D                     calc_temp_rs@y:	
  8258                           ; 2 bytes @ 0xD
  8259                           
  8260  002D                     calc_temp_rc@x:	
  8261                           ; 4 bytes @ 0xD
  8262                           
  8263                           
  8264                           ; 4 bytes @ 0xD
  8265  002D                     	ds	1
  8266  002E                     ___aldiv@quotient:	
  8267                           
  8268                           ; 4 bytes @ 0xE
  8269  002E                     	ds	1
  8270  002F                     modbus_response_write_single_register@fiSave:	
  8271  002F                     modbus_response_command@i:	
  8272                           ; 1 bytes @ 0xF
  8273                           
  8274                           
  8275                           ; 1 bytes @ 0xF
  8276  002F                     	ds	1
  8277  0030                     modbus_response_command@pmdbs:	
  8278  0030                     modbus_response_write_single_register@t16:	
  8279                           ; 1 bytes @ 0x10
  8280                           
  8281                           
  8282                           ; 2 bytes @ 0x10
  8283  0030                     	ds	1
  8284  0031                     modbus_response_command@len:	
  8285  0031                     sys_data_init@ret:	
  8286                           ; 1 bytes @ 0x11
  8287                           
  8288  0031                     calc_temp_rc@y:	
  8289                           ; 2 bytes @ 0x11
  8290                           
  8291                           
  8292                           ; 4 bytes @ 0x11
  8293  0031                     	ds	1
  8294  0032                     ??_pid_pwm1_idrv_run:	
  8295  0032                     ?_calc_expect_vout_adc_value:	
  8296                           ; 1 bytes @ 0x12
  8297                           
  8298  0032                     modbus_response_command@rbuf:	
  8299                           ; 2 bytes @ 0x12
  8300                           
  8301  0032                     calc_expect_vout_adc_value@x:	
  8302                           ; 1 bytes @ 0x12
  8303                           
  8304  0032                     modbus_response_write_single_register@i:	
  8305                           ; 2 bytes @ 0x12
  8306                           
  8307  0032                     pid_pwm1_idrv_b_b@t32:	
  8308                           ; 2 bytes @ 0x12
  8309                           
  8310                           
  8311                           ; 4 bytes @ 0x12
  8312  0032                     	ds	1
  8313  0033                     sys_data_init@i:	
  8314  0033                     modbus_response_command@tempData:	
  8315                           ; 2 bytes @ 0x13
  8316                           
  8317                           
  8318                           ; 2 bytes @ 0x13
  8319  0033                     	ds	1
  8320  0034                     ??_calc_expect_vout_adc_value:	
  8321  0034                     modbus_response_write_single_register@pmdbs:	
  8322                           ; 1 bytes @ 0x14
  8323                           
  8324                           
  8325                           ; 1 bytes @ 0x14
  8326  0034                     	ds	1
  8327  0035                     modbus_response_write_single_register@startAddr:	
  8328                           
  8329                           ; 2 bytes @ 0x15
  8330  0035                     	ds	1
  8331  0036                     pid_pwm1_idrv_run@ep:	
  8332                           
  8333                           ; 4 bytes @ 0x16
  8334  0036                     	ds	1
  8335  0037                     modbus_response_write_single_register@rbuf:	
  8336                           
  8337                           ; 1 bytes @ 0x17
  8338  0037                     	ds	1
  8339  0038                     ?_modbus_response_process:	
  8340  0038                     modbus_response_process@rlen:	
  8341                           ; 1 bytes @ 0x18
  8342                           
  8343                           
  8344                           ; 2 bytes @ 0x18
  8345  0038                     	ds	2
  8346  003A                     modbus_response_process@pmdbs:	
  8347  003A                     pid_pwm1_idrv_run@ei:	
  8348                           ; 1 bytes @ 0x1A
  8349                           
  8350                           
  8351                           ; 4 bytes @ 0x1A
  8352  003A                     	ds	1
  8353  003B                     modbus_response_process@rbuf:	
  8354                           
  8355                           ; 1 bytes @ 0x1B
  8356  003B                     	ds	7
  8357  0042                     pid_pwm1_idrv_run@t16:	
  8358                           
  8359                           ; 2 bytes @ 0x22
  8360  0042                     	ds	2
  8361  0044                     pid_pwm1_idrv_run@t32:	
  8362                           
  8363                           ; 4 bytes @ 0x24
  8364  0044                     	ds	4
  8365  0048                     ??_main:	
  8366                           
  8367                           ; 1 bytes @ 0x28
  8368  0048                     	ds	2
  8369                           
  8370                           	psect	text2
  8371  0B80                     __ptext2:	
  8372 ;; *************** function _sys_data_init *****************
  8373 ;; Defined at:
  8374 ;;		line 94 in file "src/api/sysData.c"
  8375 ;; Parameters:    Size  Location     Type
  8376 ;;		None
  8377 ;; Auto vars:     Size  Location     Type
  8378 ;;  i               2   19[BANK0 ] unsigned int 
  8379 ;;  ret             2   17[BANK0 ] unsigned int 
  8380 ;; Return value:  Size  Location     Type
  8381 ;;                  2  782[None  ] unsigned int 
  8382 ;; Registers used:
  8383 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8384 ;; Tracked objects:
  8385 ;;		On entry : 1F/1
  8386 ;;		On exit  : 1F/0
  8387 ;;		Unchanged: 0/0
  8388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8390 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8391 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8392 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8393 ;;Total ram usage:       10 bytes
  8394 ;; Hardware stack levels used:    1
  8395 ;; Hardware stack levels required when called:    3
  8396 ;; This function calls:
  8397 ;;		___wmul
  8398 ;;		_crc_append
  8399 ;;		_crc_verify
  8400 ;;		_my_flash_read_system_erase
  8401 ;;		_my_flash_system_read
  8402 ;;		_my_flash_system_write
  8403 ;; This function is called by:
  8404 ;;		_main
  8405 ;; This function uses a non-reentrant model
  8406 ;;
  8407                           
  8408                           
  8409                           ;psect for function _sys_data_init
  8410  0B80                     _sys_data_init:	
  8411                           
  8412                           ;sysData.c: 96: uint16_t ret,i;
  8413                           ;sysData.c: 97: my_flash_system_read((uint8_t*)&sysData,sizeof(sysData_t));
  8414                           
  8415                           ;incstack = 0
  8416                           ; Regs used in _sys_data_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8417  0B80  3084               	movlw	132
  8418  0B81  00F1               	movwf	my_flash_system_read@buf
  8419  0B82  3023               	movlw	35
  8420  0B83  00F2               	movwf	my_flash_system_read@buf+1
  8421  0B84  305C               	movlw	92
  8422  0B85  00F3               	movwf	my_flash_system_read@len
  8423  0B86  01F4               	clrf	my_flash_system_read@len+1
  8424  0B87  247A  318B         	fcall	_my_flash_system_read
  8425                           
  8426                           ;sysData.c: 98: ret=crc_verify((uint8_t*)&sysData,sizeof(sysData_t));
  8427  0B89  3084               	movlw	132
  8428  0B8A  0020               	movlb	0	; select bank0
  8429  0B8B  00A0               	movwf	crc_verify@message
  8430  0B8C  3023               	movlw	35
  8431  0B8D  00A1               	movwf	crc_verify@message+1
  8432  0B8E  305C               	movlw	92
  8433  0B8F  00A2               	movwf	crc_verify@n
  8434  0B90  01A3               	clrf	crc_verify@n+1
  8435  0B91  2417  318B         	fcall	_crc_verify
  8436  0B93  00B1               	movwf	sys_data_init@ret
  8437  0B94  01B2               	clrf	sys_data_init@ret+1
  8438                           
  8439                           ;sysData.c: 99: if(!ret){
  8440  0B95  0432               	iorwf	sys_data_init@ret+1,w
  8441  0B96  1D03               	btfss	3,2
  8442  0B97  0008               	return
  8443                           
  8444                           ;sysData.c: 100: sysData.pidSetFlg0=0xff;
  8445  0B98  3084               	movlw	132
  8446  0B99  0086               	movwf	6
  8447  0B9A  3023               	movlw	35
  8448  0B9B  0087               	movwf	7
  8449  0B9C  30FF               	movlw	255
  8450  0B9D  3FC0               	movwi [0]fsr1
  8451                           
  8452                           ;sysData.c: 101: sysData.pidSetFlg1=0xff;
  8453  0B9E  3085               	movlw	133
  8454  0B9F  0086               	movwf	6
  8455  0BA0  30FF               	movlw	255
  8456  0BA1  0081               	movwf	1
  8457                           
  8458                           ;sysData.c: 102: sysData.id=0xff;
  8459  0BA2  3086               	movlw	134
  8460  0BA3  0086               	movwf	6
  8461  0BA4  30FF               	movlw	255
  8462  0BA5  0081               	movwf	1
  8463                           
  8464                           ;sysData.c: 103: for(i=0;i<20;i++){
  8465  0BA6  01B3               	clrf	sys_data_init@i
  8466  0BA7  01B4               	clrf	sys_data_init@i+1
  8467  0BA8                     l4520:	
  8468                           
  8469                           ;sysData.c: 105: sysData.calibRsAdc[i]=6400+i*720;
  8470  0BA8  0834               	movf	sys_data_init@i+1,w
  8471  0BA9  00F2               	movwf	___wmul@multiplier+1
  8472  0BAA  0833               	movf	sys_data_init@i,w
  8473  0BAB  00F1               	movwf	___wmul@multiplier
  8474  0BAC  30D0               	movlw	208
  8475  0BAD  00F3               	movwf	___wmul@multiplicand
  8476  0BAE  3002               	movlw	2
  8477  0BAF  00F4               	movwf	___wmul@multiplicand+1
  8478  0BB0  2402  318B         	fcall	___wmul
  8479  0BB2  0871               	movf	?___wmul,w
  8480  0BB3  3E00               	addlw	0
  8481  0BB4  00AB               	movwf	??_sys_data_init
  8482  0BB5  3019               	movlw	25
  8483  0BB6  3D72               	addwfc	?___wmul+1,w
  8484  0BB7  00AC               	movwf	??_sys_data_init+1
  8485  0BB8  0834               	movf	sys_data_init@i+1,w
  8486  0BB9  00AE               	movwf	??_sys_data_init+3
  8487  0BBA  0833               	movf	sys_data_init@i,w
  8488  0BBB  00AD               	movwf	??_sys_data_init+2
  8489  0BBC  308E               	movlw	142
  8490  0BBD  35AD               	lslf	??_sys_data_init+2,f
  8491  0BBE  0DAE               	rlf	??_sys_data_init+3,f
  8492  0BBF  00AF               	movwf	??_sys_data_init+4
  8493  0BC0  3023               	movlw	35
  8494  0BC1  00B0               	movwf	??_sys_data_init+5
  8495  0BC2  082D               	movf	??_sys_data_init+2,w
  8496  0BC3  072F               	addwf	??_sys_data_init+4,w
  8497  0BC4  0086               	movwf	6
  8498  0BC5  082E               	movf	??_sys_data_init+3,w
  8499  0BC6  3D30               	addwfc	??_sys_data_init+5,w
  8500  0BC7  0087               	movwf	7
  8501  0BC8  082B               	movf	??_sys_data_init,w
  8502  0BC9  3FC0               	movwi [0]fsr1
  8503  0BCA  082C               	movf	??_sys_data_init+1,w
  8504  0BCB  3FC1               	movwi [1]fsr1
  8505                           
  8506                           ;sysData.c: 106: sysData.calibVoMV[i]=i*333;
  8507  0BCC  0834               	movf	sys_data_init@i+1,w
  8508  0BCD  00F2               	movwf	___wmul@multiplier+1
  8509  0BCE  0833               	movf	sys_data_init@i,w
  8510  0BCF  00F1               	movwf	___wmul@multiplier
  8511  0BD0  304D               	movlw	77
  8512  0BD1  00F3               	movwf	___wmul@multiplicand
  8513  0BD2  3001               	movlw	1
  8514  0BD3  00F4               	movwf	___wmul@multiplicand+1
  8515  0BD4  2402  318B         	fcall	___wmul
  8516  0BD6  0834               	movf	sys_data_init@i+1,w
  8517  0BD7  00AC               	movwf	??_sys_data_init+1
  8518  0BD8  0833               	movf	sys_data_init@i,w
  8519  0BD9  00AB               	movwf	??_sys_data_init
  8520  0BDA  30B6               	movlw	182
  8521  0BDB  35AB               	lslf	??_sys_data_init,f
  8522  0BDC  0DAC               	rlf	??_sys_data_init+1,f
  8523  0BDD  00AD               	movwf	??_sys_data_init+2
  8524  0BDE  3023               	movlw	35
  8525  0BDF  00AE               	movwf	??_sys_data_init+3
  8526  0BE0  082B               	movf	??_sys_data_init,w
  8527  0BE1  072D               	addwf	??_sys_data_init+2,w
  8528  0BE2  0086               	movwf	6
  8529  0BE3  082C               	movf	??_sys_data_init+1,w
  8530  0BE4  3D2E               	addwfc	??_sys_data_init+3,w
  8531  0BE5  0087               	movwf	7
  8532  0BE6  0871               	movf	?___wmul,w
  8533  0BE7  3FC0               	movwi [0]fsr1
  8534  0BE8  0872               	movf	?___wmul+1,w
  8535  0BE9  3FC1               	movwi [1]fsr1
  8536  0BEA  0AB3               	incf	sys_data_init@i,f
  8537  0BEB  1903               	skipnz
  8538  0BEC  0AB4               	incf	sys_data_init@i+1,f
  8539  0BED  3000               	movlw	0
  8540  0BEE  0234               	subwf	sys_data_init@i+1,w
  8541  0BEF  3014               	movlw	20
  8542  0BF0  1903               	skipnz
  8543  0BF1  0233               	subwf	sys_data_init@i,w
  8544  0BF2  1C03               	skipc
  8545  0BF3  2BA8               	goto	l4520
  8546                           
  8547                           ;sysData.c: 107: }
  8548                           ;sysData.c: 108: crc_append((uint8_t*)&sysData,sizeof(sysData_t)-2);
  8549  0BF4  3084               	movlw	132
  8550  0BF5  3187  27BF  318B   	fcall	PL42	;call to abstracted procedure
  8551  0BF8  3187  271B  318B   	fcall	_crc_append
  8552                           
  8553                           ;sysData.c: 110: my_flash_read_system_erase();
  8554  0BFB  3187  274A  318B   	fcall	_my_flash_read_system_erase
  8555                           
  8556                           ;sysData.c: 111: my_flash_system_write((uint8_t*)&sysData,sizeof(sysData_t));
  8557  0BFE  3187  27A2  318B   	fcall	PL28	;call to abstracted procedure
  8558  0C01  2CAC               	ljmp	l2844
  8559  0C02                     __end_of_sys_data_init:	
  8560  0C02                     __ptext4:	
  8561 ;; *************** function ___wmul *****************
  8562 ;; Defined at:
  8563 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  8564 ;; Parameters:    Size  Location     Type
  8565 ;;  multiplier      2    1[COMMON] unsigned int 
  8566 ;;  multiplicand    2    3[COMMON] unsigned int 
  8567 ;; Auto vars:     Size  Location     Type
  8568 ;;  product         2    5[COMMON] unsigned int 
  8569 ;; Return value:  Size  Location     Type
  8570 ;;                  2    1[COMMON] unsigned int 
  8571 ;; Registers used:
  8572 ;;		wreg, status,2, status,0
  8573 ;; Tracked objects:
  8574 ;;		On entry : 1F/0
  8575 ;;		On exit  : 1F/0
  8576 ;;		Unchanged: 1F/0
  8577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8578 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8579 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8581 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8582 ;;Total ram usage:        6 bytes
  8583 ;; Hardware stack levels used:    1
  8584 ;; Hardware stack levels required when called:    1
  8585 ;; This function calls:
  8586 ;;		Nothing
  8587 ;; This function is called by:
  8588 ;;		_sys_data_init
  8589 ;; This function uses a non-reentrant model
  8590 ;;
  8591                           
  8592                           
  8593                           ;psect for function ___wmul
  8594  0C02                     ___wmul:	
  8595                           
  8596                           ;incstack = 0
  8597                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8598  0C02  01F5               	clrf	___wmul@product
  8599  0C03  01F6               	clrf	___wmul@product+1
  8600  0C04                     l3358:	
  8601  0C04  1C71               	btfss	___wmul@multiplier,0
  8602  0C05  2C0A               	goto	l3362
  8603  0C06  0873               	movf	___wmul@multiplicand,w
  8604  0C07  07F5               	addwf	___wmul@product,f
  8605  0C08  0874               	movf	___wmul@multiplicand+1,w
  8606  0C09  3DF6               	addwfc	___wmul@product+1,f
  8607  0C0A                     l3362:	
  8608  0C0A  35F3               	lslf	___wmul@multiplicand,f
  8609  0C0B  0DF4               	rlf	___wmul@multiplicand+1,f
  8610  0C0C  36F2               	lsrf	___wmul@multiplier+1,f
  8611  0C0D  0CF1               	rrf	___wmul@multiplier,f
  8612  0C0E  0871               	movf	___wmul@multiplier,w
  8613  0C0F  0472               	iorwf	___wmul@multiplier+1,w
  8614  0C10  1D03               	btfss	3,2
  8615  0C11  2C04               	goto	l3358
  8616  0C12  0876               	movf	___wmul@product+1,w
  8617  0C13  00F2               	movwf	?___wmul+1
  8618  0C14  0875               	movf	___wmul@product,w
  8619  0C15  00F1               	movwf	?___wmul
  8620  0C16  0008               	return
  8621  0C17                     __end_of___wmul:	
  8622  0C17                     __ptext25:	
  8623 ;; *************** function _crc_verify *****************
  8624 ;; Defined at:
  8625 ;;		line 135 in file "src/depend/crc16.c"
  8626 ;; Parameters:    Size  Location     Type
  8627 ;;  message         2    0[BANK0 ] PTR unsigned char 
  8628 ;;		 -> modbusBuf(64), sysData(92), 
  8629 ;;  n               2    2[BANK0 ] unsigned int 
  8630 ;; Auto vars:     Size  Location     Type
  8631 ;;  expected        2    6[BANK0 ] unsigned int 
  8632 ;;  crccal          2    4[BANK0 ] unsigned int 
  8633 ;; Return value:  Size  Location     Type
  8634 ;;                  1    wreg      unsigned char 
  8635 ;; Registers used:
  8636 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8637 ;; Tracked objects:
  8638 ;;		On entry : 1F/0
  8639 ;;		On exit  : 1F/0
  8640 ;;		Unchanged: 0/0
  8641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8642 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8643 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8645 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8646 ;;Total ram usage:        8 bytes
  8647 ;; Hardware stack levels used:    1
  8648 ;; Hardware stack levels required when called:    2
  8649 ;; This function calls:
  8650 ;;		_crc_sum
  8651 ;;		_m_mem_cpy_len
  8652 ;; This function is called by:
  8653 ;;		_sys_data_init
  8654 ;;		_modbus_response_process
  8655 ;; This function uses a non-reentrant model
  8656 ;;
  8657                           
  8658                           
  8659                           ;psect for function _crc_verify
  8660  0C17                     _crc_verify:	
  8661                           
  8662                           ;crc16.c: 137: uint16_t expected,crccal;
  8663                           ;crc16.c: 138: m_mem_cpy_len((uint8_t*)(&expected),(message+n-2),2);
  8664                           
  8665                           ;incstack = 0
  8666                           ; Regs used in _crc_verify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8667  0C17  0822               	movf	crc_verify@n,w
  8668  0C18  0720               	addwf	crc_verify@message,w
  8669  0C19  00F3               	movwf	m_mem_cpy_len@s
  8670  0C1A  0823               	movf	crc_verify@n+1,w
  8671  0C1B  3D21               	addwfc	crc_verify@message+1,w
  8672  0C1C  00F4               	movwf	m_mem_cpy_len@s+1
  8673  0C1D  30FE               	movlw	-2
  8674  0C1E  07F3               	addwf	m_mem_cpy_len@s,f
  8675  0C1F  1C03               	skipc
  8676  0C20  03F4               	decf	m_mem_cpy_len@s+1,f
  8677  0C21  3026               	movlw	low crc_verify@expected
  8678  0C22  00F1               	movwf	m_mem_cpy_len@d
  8679  0C23  3000               	movlw	high crc_verify@expected
  8680  0C24  00F2               	movwf	m_mem_cpy_len@d+1
  8681  0C25  3002               	movlw	2
  8682  0C26  00F5               	movwf	m_mem_cpy_len@len
  8683  0C27  01F6               	clrf	m_mem_cpy_len@len+1
  8684  0C28  3186  26F5  318B   	fcall	_m_mem_cpy_len
  8685                           
  8686                           ;crc16.c: 139: crccal=crc_sum(message,n - 2);
  8687  0C2B  0821               	movf	crc_verify@message+1,w
  8688  0C2C  00F2               	movwf	crc_sum@buf+1
  8689  0C2D  0820               	movf	crc_verify@message,w
  8690  0C2E  00F1               	movwf	crc_sum@buf
  8691  0C2F  0822               	movf	crc_verify@n,w
  8692  0C30  3EFE               	addlw	254
  8693  0C31  00F3               	movwf	crc_sum@len
  8694  0C32  30FF               	movlw	255
  8695  0C33  3D23               	addwfc	crc_verify@n+1,w
  8696  0C34  00F4               	movwf	crc_sum@len+1
  8697  0C35  2444  318B         	fcall	_crc_sum
  8698  0C37  0872               	movf	?_crc_sum+1,w
  8699  0C38  00A5               	movwf	crc_verify@crccal+1
  8700  0C39  0871               	movf	?_crc_sum,w
  8701  0C3A  00A4               	movwf	crc_verify@crccal
  8702                           
  8703                           ;crc16.c: 140: if(expected!=crccal)return 0;
  8704  0C3B  0825               	movf	crc_verify@crccal+1,w
  8705  0C3C  0627               	xorwf	crc_verify@expected+1,w
  8706  0C3D  1D03               	skipz
  8707  0C3E  2C41               	goto	u2745
  8708  0C3F  0824               	movf	crc_verify@crccal,w
  8709  0C40  0626               	xorwf	crc_verify@expected,w
  8710  0C41                     u2745:	
  8711  0C41  1D03               	btfss	3,2
  8712  0C42  3400               	retlw	0
  8713                           
  8714                           ;crc16.c: 141: return 1;
  8715  0C43  3401               	retlw	1
  8716  0C44                     __end_of_crc_verify:	
  8717  0C44                     __ptext27:	
  8718 ;; *************** function _crc_sum *****************
  8719 ;; Defined at:
  8720 ;;		line 116 in file "src/depend/crc16.c"
  8721 ;; Parameters:    Size  Location     Type
  8722 ;;  buf             2    1[COMMON] PTR unsigned char 
  8723 ;;		 -> modbusBuf(64), sysData(92), 
  8724 ;;  len             2    3[COMMON] unsigned int 
  8725 ;; Auto vars:     Size  Location     Type
  8726 ;;  crc             2    9[COMMON] unsigned int 
  8727 ;;  i               2    7[COMMON] unsigned int 
  8728 ;;  j               2    5[COMMON] unsigned int 
  8729 ;;  Data            2    0        unsigned int 
  8730 ;; Return value:  Size  Location     Type
  8731 ;;                  2    1[COMMON] unsigned int 
  8732 ;; Registers used:
  8733 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8734 ;; Tracked objects:
  8735 ;;		On entry : 1F/0
  8736 ;;		On exit  : 1F/0
  8737 ;;		Unchanged: 1F/0
  8738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8739 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8740 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8742 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8743 ;;Total ram usage:       10 bytes
  8744 ;; Hardware stack levels used:    1
  8745 ;; Hardware stack levels required when called:    1
  8746 ;; This function calls:
  8747 ;;		Nothing
  8748 ;; This function is called by:
  8749 ;;		_crc_verify
  8750 ;;		_crc_append
  8751 ;; This function uses a non-reentrant model
  8752 ;;
  8753                           
  8754                           
  8755                           ;psect for function _crc_sum
  8756  0C44                     _crc_sum:	
  8757                           
  8758                           ;crc16.c: 118: uint16_t crc=0xFFFF;
  8759                           
  8760                           ;incstack = 0
  8761                           ; Regs used in _crc_sum: [wreg+fsr1l+fsr1h+status,2+status,0]
  8762  0C44  30FF               	movlw	255
  8763  0C45  00F9               	movwf	crc_sum@crc
  8764  0C46  00FA               	movwf	crc_sum@crc+1
  8765                           
  8766                           ;crc16.c: 119: uint16_t i, j, Data;
  8767                           ;crc16.c: 120: for ( j=0; j<len;j++){
  8768  0C47  01F5               	clrf	crc_sum@j
  8769  0C48  01F6               	clrf	crc_sum@j+1
  8770  0C49                     l4066:	
  8771  0C49  0874               	movf	crc_sum@len+1,w
  8772  0C4A  0276               	subwf	crc_sum@j+1,w
  8773  0C4B  1D03               	skipz
  8774  0C4C  2C4F               	goto	u2735
  8775  0C4D  0873               	movf	crc_sum@len,w
  8776  0C4E  0275               	subwf	crc_sum@j,w
  8777  0C4F                     u2735:	
  8778  0C4F  1803               	btfsc	3,0
  8779  0C50  2C75               	goto	l4068
  8780                           
  8781                           ;crc16.c: 121: crc=crc ^*buf++;
  8782  0C51  0871               	movf	crc_sum@buf,w
  8783  0C52  0086               	movwf	6
  8784  0C53  0872               	movf	crc_sum@buf+1,w
  8785  0C54  0087               	movwf	7
  8786  0C55  0801               	movf	1,w
  8787  0C56  06F9               	xorwf	crc_sum@crc,f
  8788  0C57  0AF1               	incf	crc_sum@buf,f
  8789  0C58  1903               	skipnz
  8790  0C59  0AF2               	incf	crc_sum@buf+1,f
  8791                           
  8792                           ;crc16.c: 122: for ( i=0; i<8; i++){
  8793  0C5A  01F7               	clrf	crc_sum@i
  8794  0C5B  01F8               	clrf	crc_sum@i+1
  8795  0C5C                     l1112:	
  8796                           
  8797                           ;crc16.c: 124: if(crc&0x0001){
  8798  0C5C  1C79               	btfss	crc_sum@crc,0
  8799  0C5D  2C65               	goto	l4060
  8800  0C5E  3001               	movlw	1
  8801                           
  8802                           ;crc16.c: 125: crc=crc>>1;
  8803  0C5F  36FA               	lsrf	crc_sum@crc+1,f
  8804  0C60  0CF9               	rrf	crc_sum@crc,f
  8805                           
  8806                           ;crc16.c: 126: crc=crc^ 0xa001;
  8807  0C61  06F9               	xorwf	crc_sum@crc,f
  8808  0C62  30A0               	movlw	160
  8809  0C63  06FA               	xorwf	crc_sum@crc+1,f
  8810                           
  8811                           ;crc16.c: 127: }else{
  8812  0C64  2C67               	goto	l1115
  8813  0C65                     l4060:	
  8814                           
  8815                           ;crc16.c: 128: crc=crc>>1;
  8816  0C65  36FA               	lsrf	crc_sum@crc+1,f
  8817  0C66  0CF9               	rrf	crc_sum@crc,f
  8818  0C67                     l1115:	
  8819  0C67  0AF7               	incf	crc_sum@i,f
  8820  0C68  1903               	skipnz
  8821  0C69  0AF8               	incf	crc_sum@i+1,f
  8822  0C6A  3000               	movlw	0
  8823  0C6B  0278               	subwf	crc_sum@i+1,w
  8824  0C6C  3008               	movlw	8
  8825  0C6D  1903               	skipnz
  8826  0C6E  0277               	subwf	crc_sum@i,w
  8827  0C6F  1C03               	skipc
  8828  0C70  2C5C               	goto	l1112
  8829  0C71  0AF5               	incf	crc_sum@j,f
  8830  0C72  1903               	skipnz
  8831  0C73  0AF6               	incf	crc_sum@j+1,f
  8832  0C74  2C49               	goto	l4066
  8833  0C75                     l4068:	
  8834                           
  8835                           ;crc16.c: 129: }
  8836                           ;crc16.c: 130: }
  8837                           ;crc16.c: 132: }
  8838                           ;crc16.c: 133: return ( crc);
  8839  0C75  087A               	movf	crc_sum@crc+1,w
  8840  0C76  00F2               	movwf	?_crc_sum+1
  8841  0C77  0879               	movf	crc_sum@crc,w
  8842  0C78  00F1               	movwf	?_crc_sum
  8843  0C79  0008               	return
  8844  0C7A                     __end_of_crc_sum:	
  8845  0C7A                     __ptext3:	
  8846 ;; *************** function _my_flash_system_read *****************
  8847 ;; Defined at:
  8848 ;;		line 21 in file "src/api/sysData.c"
  8849 ;; Parameters:    Size  Location     Type
  8850 ;;  buf             2    1[COMMON] PTR unsigned char 
  8851 ;;		 -> sysData(92), 
  8852 ;;  len             2    3[COMMON] unsigned int 
  8853 ;; Auto vars:     Size  Location     Type
  8854 ;;  flashAddr       2   10[COMMON] unsigned int 
  8855 ;;  i               2    8[COMMON] unsigned int 
  8856 ;;  GIEBitValue     1    7[COMMON] unsigned char 
  8857 ;; Return value:  Size  Location     Type
  8858 ;;                  1    wreg      void 
  8859 ;; Registers used:
  8860 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8861 ;; Tracked objects:
  8862 ;;		On entry : 1F/1
  8863 ;;		On exit  : 1D/1
  8864 ;;		Unchanged: 0/0
  8865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8866 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8867 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8868 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8869 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8870 ;;Total ram usage:       11 bytes
  8871 ;; Hardware stack levels used:    1
  8872 ;; Hardware stack levels required when called:    1
  8873 ;; This function calls:
  8874 ;;		Nothing
  8875 ;; This function is called by:
  8876 ;;		_sys_data_init
  8877 ;; This function uses a non-reentrant model
  8878 ;;
  8879                           
  8880                           
  8881                           ;psect for function _my_flash_system_read
  8882  0C7A                     _my_flash_system_read:	
  8883                           
  8884                           ;sysData.c: 23: uint16_t flashAddr=0x1f80;
  8885                           
  8886                           ;incstack = 0
  8887                           ; Regs used in _my_flash_system_read: [wreg+fsr1l+fsr1h+status,2+status,0]
  8888  0C7A  3080               	movlw	128
  8889  0C7B  00FA               	movwf	my_flash_system_read@flashAddr
  8890  0C7C  301F               	movlw	31
  8891  0C7D  00FB               	movwf	my_flash_system_read@flashAddr+1
  8892                           
  8893                           ;sysData.c: 24: uint16_t i;
  8894                           ;sysData.c: 26: uint8_t GIEBitValue = INTCONbits.GIE;
  8895  0C7E  3000               	movlw	0
  8896  0C7F  1B8B               	btfsc	11,7	;volatile
  8897  0C80  3001               	movlw	1
  8898  0C81  00F7               	movwf	my_flash_system_read@GIEBitValue
  8899                           
  8900                           ;sysData.c: 28: INTCONbits.GIE = 0;
  8901  0C82  138B               	bcf	11,7	;volatile
  8902                           
  8903                           ;sysData.c: 30: for(i=0;i<len;i++){
  8904  0C83  01F8               	clrf	my_flash_system_read@i
  8905  0C84  01F9               	clrf	my_flash_system_read@i+1
  8906  0C85                     l3192:	
  8907  0C85  0874               	movf	my_flash_system_read@len+1,w
  8908  0C86  0279               	subwf	my_flash_system_read@i+1,w
  8909  0C87  1D03               	skipz
  8910  0C88  2C8B               	goto	u1615
  8911  0C89  0873               	movf	my_flash_system_read@len,w
  8912  0C8A  0278               	subwf	my_flash_system_read@i,w
  8913  0C8B                     u1615:	
  8914  0C8B  1803               	btfsc	3,0
  8915  0C8C  2CAA               	goto	l3194
  8916                           
  8917                           ;sysData.c: 32: PMADRL = (flashAddr & 0x00FF);
  8918  0C8D  087A               	movf	my_flash_system_read@flashAddr,w
  8919  0C8E  0023               	movlb	3	; select bank3
  8920  0C8F  0091               	movwf	17	;volatile
  8921                           
  8922                           ;sysData.c: 33: PMADRH = ((flashAddr & 0xFF00) >> 8);
  8923  0C90  087B               	movf	my_flash_system_read@flashAddr+1,w
  8924  0C91  0092               	movwf	18	;volatile
  8925                           
  8926                           ;sysData.c: 35: PMCON1bits.CFGS = 0;
  8927  0C92  1315               	bcf	21,6	;volatile
  8928                           
  8929                           ;sysData.c: 36: PMCON1bits.RD = 1;
  8930  0C93  1415               	bsf	21,0	;volatile
  8931                           
  8932                           ;sysData.c: 37: __nop();
  8933  0C94  0000               	nop
  8934                           
  8935                           ;sysData.c: 38: __nop();
  8936  0C95  0000               	nop
  8937                           
  8938                           ;sysData.c: 39: buf[i]=PMDATL;
  8939  0C96  0878               	movf	my_flash_system_read@i,w
  8940  0C97  0771               	addwf	my_flash_system_read@buf,w
  8941  0C98  00F5               	movwf	??_my_flash_system_read
  8942  0C99  0879               	movf	my_flash_system_read@i+1,w
  8943  0C9A  3D72               	addwfc	my_flash_system_read@buf+1,w
  8944  0C9B  00F6               	movwf	??_my_flash_system_read+1
  8945  0C9C  0875               	movf	??_my_flash_system_read,w
  8946  0C9D  0086               	movwf	6
  8947  0C9E  0876               	movf	??_my_flash_system_read+1,w
  8948  0C9F  0087               	movwf	7
  8949  0CA0  0023               	movlb	3	; select bank3
  8950  0CA1  0813               	movf	19,w	;volatile
  8951  0CA2  0081               	movwf	1
  8952                           
  8953                           ;sysData.c: 40: flashAddr++;
  8954  0CA3  0AFA               	incf	my_flash_system_read@flashAddr,f
  8955  0CA4  1903               	skipnz
  8956  0CA5  0AFB               	incf	my_flash_system_read@flashAddr+1,f
  8957  0CA6  0AF8               	incf	my_flash_system_read@i,f
  8958  0CA7  1903               	skipnz
  8959  0CA8  0AF9               	incf	my_flash_system_read@i+1,f
  8960  0CA9  2C85               	goto	l3192
  8961  0CAA                     l3194:	
  8962                           
  8963                           ;sysData.c: 41: }
  8964                           ;sysData.c: 42: INTCONbits.GIE = GIEBitValue;
  8965  0CAA  0C77               	rrf	my_flash_system_read@GIEBitValue,w
  8966  0CAB  2D25               	ljmp	PL32	;call to abstracted procedure
  8967  0CAC                     __end_of_my_flash_system_read:	
  8968  0CAC                     __ptext17:	
  8969 ;; *************** function _my_flash_system_write *****************
  8970 ;; Defined at:
  8971 ;;		line 45 in file "src/api/sysData.c"
  8972 ;; Parameters:    Size  Location     Type
  8973 ;;  buf             2    1[COMMON] PTR unsigned char 
  8974 ;;		 -> sysData(92), 
  8975 ;;  len             2    3[COMMON] unsigned int 
  8976 ;; Auto vars:     Size  Location     Type
  8977 ;;  i               2    9[BANK0 ] unsigned int 
  8978 ;;  flashAddr       2    7[BANK0 ] unsigned int 
  8979 ;;  loc             2    5[BANK0 ] unsigned int 
  8980 ;;  blocNum         2    3[BANK0 ] unsigned int 
  8981 ;;  j               2    0[BANK0 ] unsigned int 
  8982 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
  8983 ;; Return value:  Size  Location     Type
  8984 ;;                  2    1[COMMON] unsigned int 
  8985 ;; Registers used:
  8986 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8987 ;; Tracked objects:
  8988 ;;		On entry : 1F/3
  8989 ;;		On exit  : 1F/0
  8990 ;;		Unchanged: 0/0
  8991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8992 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8993 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8994 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8995 ;;      Totals:         5      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8996 ;;Total ram usage:       16 bytes
  8997 ;; Hardware stack levels used:    1
  8998 ;; Hardware stack levels required when called:    1
  8999 ;; This function calls:
  9000 ;;		Nothing
  9001 ;; This function is called by:
  9002 ;;		_sys_data_init
  9003 ;;		_sys_data_save
  9004 ;; This function uses a non-reentrant model
  9005 ;;
  9006                           
  9007                           
  9008                           ;psect for function _my_flash_system_write
  9009  0CAC                     _my_flash_system_write:	
  9010  0CAC                     l2844:	
  9011                           ;incstack = 0
  9012                           ; Regs used in _my_flash_system_write: [wreg+fsr1l+fsr1h+status,2+status,0]
  9013                           
  9014                           
  9015                           ;sysData.c: 48: uint16_t loc,j,i=0;
  9016  0CAC  0020               	movlb	0	; select bank0
  9017  0CAD  3080               	movlw	128
  9018  0CAE  01A9               	clrf	my_flash_system_write@i
  9019  0CAF  01AA               	clrf	my_flash_system_write@i+1
  9020                           
  9021                           ;sysData.c: 49: uint16_t flashAddr=0x1f80;
  9022  0CB0  00A7               	movwf	my_flash_system_write@flashAddr
  9023  0CB1  301F               	movlw	31
  9024  0CB2  00A8               	movwf	my_flash_system_write@flashAddr+1
  9025                           
  9026                           ;sysData.c: 50: uint8_t GIEBitValue=INTCONbits.GIE;
  9027  0CB3  3000               	movlw	0
  9028  0CB4  1B8B               	btfsc	11,7	;volatile
  9029  0CB5  3001               	movlw	1
  9030  0CB6  00A2               	movwf	my_flash_system_write@GIEBitValue
  9031                           
  9032                           ;sysData.c: 52: blocNum=len/32;
  9033  0CB7  0874               	movf	my_flash_system_write@len+1,w
  9034  0CB8  00A4               	movwf	my_flash_system_write@blocNum+1
  9035  0CB9  0873               	movf	my_flash_system_write@len,w
  9036  0CBA  00A3               	movwf	my_flash_system_write@blocNum
  9037  0CBB  3005               	movlw	5
  9038  0CBC                     u1395:	
  9039  0CBC  36A4               	lsrf	my_flash_system_write@blocNum+1,f
  9040  0CBD  0CA3               	rrf	my_flash_system_write@blocNum,f
  9041  0CBE  0B89               	decfsz	9,f
  9042  0CBF  2CBC               	goto	u1395
  9043                           
  9044                           ;sysData.c: 53: if(len%32)blocNum++;
  9045  0CC0  0873               	movf	my_flash_system_write@len,w
  9046  0CC1  391F               	andlw	31
  9047  0CC2  1903               	btfsc	3,2
  9048  0CC3  2CC7               	goto	l2856
  9049  0CC4  0AA3               	incf	my_flash_system_write@blocNum,f
  9050  0CC5  1903               	skipnz
  9051  0CC6  0AA4               	incf	my_flash_system_write@blocNum+1,f
  9052  0CC7                     l2856:	
  9053                           
  9054                           ;sysData.c: 55: INTCONbits.GIE = 0;
  9055  0CC7  138B               	bcf	11,7	;volatile
  9056                           
  9057                           ;sysData.c: 56: loc=0;
  9058  0CC8  01A5               	clrf	my_flash_system_write@loc
  9059  0CC9  01A6               	clrf	my_flash_system_write@loc+1
  9060                           
  9061                           ;sysData.c: 57: for(j=0;j<blocNum;j++){
  9062  0CCA  01A0               	clrf	my_flash_system_write@j
  9063  0CCB  01A1               	clrf	my_flash_system_write@j+1
  9064  0CCC                     l2896:	
  9065  0CCC  0824               	movf	my_flash_system_write@blocNum+1,w
  9066  0CCD  0221               	subwf	my_flash_system_write@j+1,w
  9067  0CCE  1D03               	skipz
  9068  0CCF  2CD2               	goto	u1445
  9069  0CD0  0823               	movf	my_flash_system_write@blocNum,w
  9070  0CD1  0220               	subwf	my_flash_system_write@j,w
  9071  0CD2                     u1445:	
  9072  0CD2  1803               	btfsc	3,0
  9073  0CD3  2D23               	goto	l2898
  9074                           
  9075                           ;sysData.c: 58: PMCON1bits.CFGS = 0;
  9076  0CD4  0023               	movlb	3	; select bank3
  9077  0CD5  1315               	bcf	21,6	;volatile
  9078                           
  9079                           ;sysData.c: 59: PMCON1bits.WREN = 1;
  9080  0CD6  1515               	bsf	21,2	;volatile
  9081                           
  9082                           ;sysData.c: 60: PMCON1bits.LWLO = 1;
  9083  0CD7  1695               	bsf	21,5	;volatile
  9084                           
  9085                           ;sysData.c: 62: for(i=0;i<32;i++){
  9086  0CD8  0020               	movlb	0	; select bank0
  9087  0CD9  01A9               	clrf	my_flash_system_write@i
  9088  0CDA  01AA               	clrf	my_flash_system_write@i+1
  9089  0CDB                     l2868:	
  9090                           
  9091                           ;sysData.c: 64: PMADRL = (flashAddr & 0xFF);
  9092  0CDB  0827               	movf	my_flash_system_write@flashAddr,w
  9093  0CDC  0023               	movlb	3	; select bank3
  9094  0CDD  0091               	movwf	17	;volatile
  9095                           
  9096                           ;sysData.c: 66: PMADRH = ((flashAddr & 0xFF00) >> 8);
  9097  0CDE  0020               	movlb	0	; select bank0
  9098  0CDF  0828               	movf	my_flash_system_write@flashAddr+1,w
  9099  0CE0  0023               	movlb	3	; select bank3
  9100  0CE1  0092               	movwf	18	;volatile
  9101                           
  9102                           ;sysData.c: 69: if(loc<len){
  9103  0CE2  0874               	movf	my_flash_system_write@len+1,w
  9104  0CE3  0020               	movlb	0	; select bank0
  9105  0CE4  0226               	subwf	my_flash_system_write@loc+1,w
  9106  0CE5  1D03               	skipz
  9107  0CE6  2CE9               	goto	u1415
  9108  0CE7  0873               	movf	my_flash_system_write@len,w
  9109  0CE8  0225               	subwf	my_flash_system_write@loc,w
  9110  0CE9                     u1415:	
  9111  0CE9  1803               	skipnc
  9112  0CEA  2CF5               	goto	l2872
  9113                           
  9114                           ;sysData.c: 70: PMDATL = buf[loc];
  9115  0CEB  0825               	movf	my_flash_system_write@loc,w
  9116  0CEC  0771               	addwf	my_flash_system_write@buf,w
  9117  0CED  0086               	movwf	6
  9118  0CEE  0826               	movf	my_flash_system_write@loc+1,w
  9119  0CEF  3D72               	addwfc	my_flash_system_write@buf+1,w
  9120  0CF0  0087               	movwf	7
  9121  0CF1  0801               	movf	1,w
  9122  0CF2  0023               	movlb	3	; select bank3
  9123  0CF3  0093               	movwf	19	;volatile
  9124                           
  9125                           ;sysData.c: 71: }else{
  9126  0CF4  2CF7               	goto	l2874
  9127  0CF5                     l2872:	
  9128                           
  9129                           ;sysData.c: 72: PMDATL = 0x00;
  9130  0CF5  0023               	movlb	3	; select bank3
  9131  0CF6  0193               	clrf	19	;volatile
  9132  0CF7                     l2874:	
  9133                           
  9134                           ;sysData.c: 73: }
  9135                           ;sysData.c: 74: loc++;
  9136  0CF7  0020               	movlb	0	; select bank0
  9137  0CF8  0AA5               	incf	my_flash_system_write@loc,f
  9138  0CF9  1903               	skipnz
  9139  0CFA  0AA6               	incf	my_flash_system_write@loc+1,f
  9140                           
  9141                           ;sysData.c: 75: PMDATH = 0x00;
  9142  0CFB  0023               	movlb	3	; select bank3
  9143  0CFC  0194               	clrf	20	;volatile
  9144                           
  9145                           ;sysData.c: 76: if((i%32) == 32 -1 ){
  9146  0CFD  301F               	movlw	31
  9147  0CFE  0020               	movlb	0	; select bank0
  9148  0CFF  0529               	andwf	my_flash_system_write@i,w
  9149  0D00  00F5               	movwf	??_my_flash_system_write
  9150  0D01  3A1F               	xorlw	31
  9151  0D02  1D03               	btfss	3,2
  9152  0D03  2D06               	goto	l2882
  9153                           
  9154                           ;sysData.c: 77: PMCON1bits.LWLO = 0;
  9155  0D04  0023               	movlb	3	; select bank3
  9156  0D05  1295               	bcf	21,5	;volatile
  9157  0D06                     l2882:	
  9158                           
  9159                           ;sysData.c: 78: }
  9160                           ;sysData.c: 80: PMCON2 = 0x55;
  9161  0D06  3055               	movlw	85
  9162  0D07  0023               	movlb	3	; select bank3
  9163  0D08  0096               	movwf	22	;volsfr
  9164                           
  9165                           ;sysData.c: 81: PMCON2 = 0xAA;
  9166  0D09  30AA               	movlw	170
  9167  0D0A  0096               	movwf	22	;volsfr
  9168                           
  9169                           ;sysData.c: 82: PMCON1bits.WR = 1;
  9170  0D0B  1495               	bsf	21,1	;volatile
  9171                           
  9172                           ;sysData.c: 83: __nop();
  9173  0D0C  0000               	nop
  9174                           
  9175                           ;sysData.c: 84: __nop();
  9176  0D0D  0000               	nop
  9177                           
  9178                           ;sysData.c: 85: flashAddr++;
  9179  0D0E  0020               	movlb	0	; select bank0
  9180  0D0F  0AA7               	incf	my_flash_system_write@flashAddr,f
  9181  0D10  1903               	skipnz
  9182  0D11  0AA8               	incf	my_flash_system_write@flashAddr+1,f
  9183  0D12  0AA9               	incf	my_flash_system_write@i,f
  9184  0D13  1903               	skipnz
  9185  0D14  0AAA               	incf	my_flash_system_write@i+1,f
  9186  0D15  3000               	movlw	0
  9187  0D16  022A               	subwf	my_flash_system_write@i+1,w
  9188  0D17  3020               	movlw	32
  9189  0D18  1903               	skipnz
  9190  0D19  0229               	subwf	my_flash_system_write@i,w
  9191  0D1A  1C03               	skipc
  9192  0D1B  2CDB               	goto	l2868
  9193                           
  9194                           ;sysData.c: 86: }
  9195                           ;sysData.c: 87: PMCON1bits.WREN = 0;
  9196  0D1C  0023               	movlb	3	; select bank3
  9197  0D1D  1115               	bcf	21,2	;volatile
  9198  0D1E  0020               	movlb	0	; select bank0
  9199  0D1F  0AA0               	incf	my_flash_system_write@j,f
  9200  0D20  1903               	skipnz
  9201  0D21  0AA1               	incf	my_flash_system_write@j+1,f
  9202  0D22  2CCC               	goto	l2896
  9203  0D23                     l2898:	
  9204                           
  9205                           ;sysData.c: 88: }
  9206                           ;sysData.c: 89: INTCONbits.GIE = GIEBitValue;
  9207  0D23  0C22               	rrf	my_flash_system_write@GIEBitValue,w
  9208  0D24  2D25               	ljmp	PL32	;call to abstracted procedure
  9209  0D25                     __end_of_my_flash_system_write:	
  9210  0D25                     PL32:	
  9211  0D25  1C03               	skipc
  9212  0D26  138B               	bcf	11,7	;volatile
  9213  0D27  1803               	skipnc
  9214  0D28  178B               	bsf	11,7	;volatile
  9215  0D29  0008               	return
  9216  0D2A                     __end_ofPL32:	
  9217                           
  9218                           	psect	text5
  9219  0818                     __ptext5:	
  9220 ;; *************** function _pid_pwm2_vout_run *****************
  9221 ;; Defined at:
  9222 ;;		line 328 in file "src/api/sample.c"
  9223 ;; Parameters:    Size  Location     Type
  9224 ;;		None
  9225 ;; Auto vars:     Size  Location     Type
  9226 ;;  t16             2    2[BANK0 ] int 
  9227 ;;  ei              2    0[BANK0 ] int 
  9228 ;; Return value:  Size  Location     Type
  9229 ;;                  1    wreg      void 
  9230 ;; Registers used:
  9231 ;;		wreg, status,2, status,0, pclath, cstack
  9232 ;; Tracked objects:
  9233 ;;		On entry : 1F/0
  9234 ;;		On exit  : 1F/1B
  9235 ;;		Unchanged: 0/0
  9236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9238 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9239 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9240 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9241 ;;Total ram usage:        5 bytes
  9242 ;; Hardware stack levels used:    1
  9243 ;; Hardware stack levels required when called:    3
  9244 ;; This function calls:
  9245 ;;		___awdiv
  9246 ;;		___lwdiv
  9247 ;;		_set_vout_pwm2_duty
  9248 ;; This function is called by:
  9249 ;;		_main
  9250 ;; This function uses a non-reentrant model
  9251 ;;
  9252                           
  9253                           
  9254                           ;psect for function _pid_pwm2_vout_run
  9255  0818                     _pid_pwm2_vout_run:	
  9256                           
  9257                           ;sample.c: 330: int16_t t16,ei;
  9258                           ;sample.c: 331: t16=voExpectAdcValue-rtAdcValueVoFb;
  9259                           
  9260                           ;incstack = 0
  9261                           ; Regs used in _pid_pwm2_vout_run: [wreg+status,2+status,0+pclath+cstack]
  9262  0818  0859               	movf	_voExpectAdcValue+1,w
  9263  0819  00A3               	movwf	pid_pwm2_vout_run@t16+1
  9264  081A  0858               	movf	_voExpectAdcValue,w
  9265  081B  00A2               	movwf	pid_pwm2_vout_run@t16
  9266  081C  0856               	movf	_rtAdcValueVoFb,w
  9267  081D  02A2               	subwf	pid_pwm2_vout_run@t16,f
  9268  081E  0857               	movf	_rtAdcValueVoFb+1,w
  9269  081F  3BA3               	subwfb	pid_pwm2_vout_run@t16+1,f
  9270                           
  9271                           ;sample.c: 332: ei=t16/150;
  9272  0820  3096               	movlw	150
  9273  0821  00F1               	movwf	___awdiv@divisor
  9274  0822  01F2               	clrf	___awdiv@divisor+1
  9275  0823  0823               	movf	pid_pwm2_vout_run@t16+1,w
  9276  0824  00F4               	movwf	___awdiv@dividend+1
  9277  0825  0822               	movf	pid_pwm2_vout_run@t16,w
  9278  0826  00F3               	movwf	___awdiv@dividend
  9279  0827  2085  3188         	fcall	___awdiv
  9280  0829  0872               	movf	?___awdiv+1,w
  9281  082A  00A1               	movwf	pid_pwm2_vout_run@ei+1
  9282  082B  0871               	movf	?___awdiv,w
  9283  082C  00A0               	movwf	pid_pwm2_vout_run@ei
  9284                           
  9285                           ;sample.c: 333: if(ei==0){
  9286  082D  0421               	iorwf	pid_pwm2_vout_run@ei+1,w
  9287  082E  1D03               	btfss	3,2
  9288  082F  284C               	goto	l699
  9289                           
  9290                           ;sample.c: 334: if(t16>32)ei=1;
  9291  0830  210A  3188         	fcall	PL46	;call to abstracted procedure
  9292  0832  1D03               	skipz
  9293  0833  2836               	goto	u2265
  9294  0834  3021               	movlw	33
  9295  0835  0222               	subwf	pid_pwm2_vout_run@t16,w
  9296  0836                     u2265:	
  9297  0836  1C03               	skipc
  9298  0837  283C               	goto	l3706
  9299  0838  0020               	movlb	0	; select bank0
  9300  0839  01A0               	clrf	pid_pwm2_vout_run@ei
  9301  083A  0AA0               	incf	pid_pwm2_vout_run@ei,f
  9302  083B  01A1               	clrf	pid_pwm2_vout_run@ei+1
  9303  083C                     l3706:	
  9304                           
  9305                           ;sample.c: 335: if(t16<-32)ei=-1;
  9306  083C  0020               	movlb	0	; select bank0
  9307  083D  0823               	movf	pid_pwm2_vout_run@t16+1,w
  9308  083E  3A80               	xorlw	128
  9309  083F  00F9               	movwf	??_pid_pwm2_vout_run
  9310  0840  307F               	movlw	127
  9311  0841  0279               	subwf	??_pid_pwm2_vout_run,w
  9312  0842  1D03               	skipz
  9313  0843  2846               	goto	u2275
  9314  0844  30E0               	movlw	224
  9315  0845  0222               	subwf	pid_pwm2_vout_run@t16,w
  9316  0846                     u2275:	
  9317  0846  1803               	skipnc
  9318  0847  284C               	goto	l699
  9319  0848  30FF               	movlw	255
  9320  0849  0020               	movlb	0	; select bank0
  9321  084A  00A0               	movwf	pid_pwm2_vout_run@ei
  9322  084B  00A1               	movwf	pid_pwm2_vout_run@ei+1
  9323  084C                     l699:	
  9324                           
  9325                           ;sample.c: 336: }
  9326                           ;sample.c: 338: pwm2Ei=pwm2Ei+ei;
  9327  084C  0020               	movlb	0	; select bank0
  9328  084D  0820               	movf	pid_pwm2_vout_run@ei,w
  9329  084E  07CA               	addwf	_pwm2Ei,f
  9330  084F  0821               	movf	pid_pwm2_vout_run@ei+1,w
  9331  0850  3DCB               	addwfc	_pwm2Ei+1,f
  9332                           
  9333                           ;sample.c: 342: t16=voExpectAdcValue/10;
  9334  0851  300A               	movlw	10
  9335  0852  00F1               	movwf	___lwdiv@divisor
  9336  0853  01F2               	clrf	___lwdiv@divisor+1
  9337  0854  0859               	movf	_voExpectAdcValue+1,w
  9338  0855  00F4               	movwf	___lwdiv@dividend+1
  9339  0856  0858               	movf	_voExpectAdcValue,w
  9340  0857  00F3               	movwf	___lwdiv@dividend
  9341  0858  20C5  3188         	fcall	___lwdiv
  9342  085A  0872               	movf	?___lwdiv+1,w
  9343  085B  00A3               	movwf	pid_pwm2_vout_run@t16+1
  9344  085C  0871               	movf	?___lwdiv,w
  9345  085D  00A2               	movwf	pid_pwm2_vout_run@t16
  9346                           
  9347                           ;sample.c: 344: t16=t16+pwm2Ei;
  9348  085E  084A               	movf	_pwm2Ei,w
  9349  085F  07A2               	addwf	pid_pwm2_vout_run@t16,f
  9350  0860  084B               	movf	_pwm2Ei+1,w
  9351  0861  3DA3               	addwfc	pid_pwm2_vout_run@t16+1,f
  9352                           
  9353                           ;sample.c: 345: if(t16>1580)t16=1580;
  9354  0862  0823               	movf	pid_pwm2_vout_run@t16+1,w
  9355  0863  3A80               	xorlw	128
  9356  0864  00F9               	movwf	??_pid_pwm2_vout_run
  9357  0865  3086               	movlw	134
  9358  0866  0279               	subwf	??_pid_pwm2_vout_run,w
  9359  0867  1D03               	skipz
  9360  0868  286B               	goto	u2285
  9361  0869  302D               	movlw	45
  9362  086A  0222               	subwf	pid_pwm2_vout_run@t16,w
  9363  086B                     u2285:	
  9364  086B  1C03               	skipc
  9365  086C  2872               	goto	l702
  9366  086D  302C               	movlw	44
  9367  086E  0020               	movlb	0	; select bank0
  9368  086F  00A2               	movwf	pid_pwm2_vout_run@t16
  9369  0870  3006               	movlw	6
  9370  0871  00A3               	movwf	pid_pwm2_vout_run@t16+1
  9371  0872                     l702:	
  9372                           
  9373                           ;sample.c: 346: if(t16<5)t16=5;
  9374  0872  0020               	movlb	0	; select bank0
  9375  0873  210A  3188         	fcall	PL46	;call to abstracted procedure
  9376  0875  1D03               	skipz
  9377  0876  2879               	goto	u2295
  9378  0877  3005               	movlw	5
  9379  0878  0222               	subwf	pid_pwm2_vout_run@t16,w
  9380  0879                     u2295:	
  9381  0879  1803               	skipnc
  9382  087A  287F               	goto	l3720
  9383  087B  3005               	movlw	5
  9384  087C  0020               	movlb	0	; select bank0
  9385  087D  00A2               	movwf	pid_pwm2_vout_run@t16
  9386  087E  01A3               	clrf	pid_pwm2_vout_run@t16+1
  9387  087F                     l3720:	
  9388                           
  9389                           ;sample.c: 347: set_vout_pwm2_duty(t16);
  9390  087F  0020               	movlb	0	; select bank0
  9391  0880  0823               	movf	pid_pwm2_vout_run@t16+1,w
  9392  0881  00F4               	movwf	set_vout_pwm2_duty@duty+1
  9393  0882  0822               	movf	pid_pwm2_vout_run@t16,w
  9394  0883  00F3               	movwf	set_vout_pwm2_duty@duty
  9395  0884  28EA               	ljmp	l3136
  9396  0885                     __end_of_pid_pwm2_vout_run:	
  9397  0885                     __ptext9:	
  9398 ;; *************** function ___awdiv *****************
  9399 ;; Defined at:
  9400 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  9401 ;; Parameters:    Size  Location     Type
  9402 ;;  divisor         2    1[COMMON] int 
  9403 ;;  dividend        2    3[COMMON] int 
  9404 ;; Auto vars:     Size  Location     Type
  9405 ;;  quotient        2    7[COMMON] int 
  9406 ;;  sign            1    6[COMMON] unsigned char 
  9407 ;;  counter         1    5[COMMON] unsigned char 
  9408 ;; Return value:  Size  Location     Type
  9409 ;;                  2    1[COMMON] int 
  9410 ;; Registers used:
  9411 ;;		wreg, status,2, status,0
  9412 ;; Tracked objects:
  9413 ;;		On entry : 1F/0
  9414 ;;		On exit  : 1F/0
  9415 ;;		Unchanged: 1F/0
  9416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9417 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9418 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9420 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9421 ;;Total ram usage:        8 bytes
  9422 ;; Hardware stack levels used:    1
  9423 ;; Hardware stack levels required when called:    1
  9424 ;; This function calls:
  9425 ;;		Nothing
  9426 ;; This function is called by:
  9427 ;;		_pid_pwm2_vout_run
  9428 ;; This function uses a non-reentrant model
  9429 ;;
  9430                           
  9431                           
  9432                           ;psect for function ___awdiv
  9433  0885                     ___awdiv:	
  9434                           
  9435                           ;incstack = 0
  9436                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  9437  0885  01F6               	clrf	___awdiv@sign
  9438  0886  1FF2               	btfss	___awdiv@divisor+1,7
  9439  0887  288F               	goto	l3432
  9440  0888  09F1               	comf	___awdiv@divisor,f
  9441  0889  09F2               	comf	___awdiv@divisor+1,f
  9442  088A  0AF1               	incf	___awdiv@divisor,f
  9443  088B  1903               	skipnz
  9444  088C  0AF2               	incf	___awdiv@divisor+1,f
  9445  088D  01F6               	clrf	___awdiv@sign
  9446  088E  0AF6               	incf	___awdiv@sign,f
  9447  088F                     l3432:	
  9448  088F  1FF4               	btfss	___awdiv@dividend+1,7
  9449  0890  2898               	goto	l3438
  9450  0891  09F3               	comf	___awdiv@dividend,f
  9451  0892  09F4               	comf	___awdiv@dividend+1,f
  9452  0893  0AF3               	incf	___awdiv@dividend,f
  9453  0894  1903               	skipnz
  9454  0895  0AF4               	incf	___awdiv@dividend+1,f
  9455  0896  3001               	movlw	1
  9456  0897  06F6               	xorwf	___awdiv@sign,f
  9457  0898                     l3438:	
  9458  0898  01F7               	clrf	___awdiv@quotient
  9459  0899  01F8               	clrf	___awdiv@quotient+1
  9460  089A  0871               	movf	___awdiv@divisor,w
  9461  089B  0472               	iorwf	___awdiv@divisor+1,w
  9462  089C  1903               	btfsc	3,2
  9463  089D  28B8               	goto	l3460
  9464  089E  01F5               	clrf	___awdiv@counter
  9465  089F                     L2:	
  9466  089F  0AF5               	incf	___awdiv@counter,f
  9467  08A0  1BF2               	btfsc	___awdiv@divisor+1,7
  9468  08A1  28A5               	goto	l3448
  9469  08A2  35F1               	lslf	___awdiv@divisor,f
  9470  08A3  0DF2               	rlf	___awdiv@divisor+1,f
  9471  08A4  289F               	goto	L2
  9472  08A5                     l3448:	
  9473  08A5  35F7               	lslf	___awdiv@quotient,f
  9474  08A6  0DF8               	rlf	___awdiv@quotient+1,f
  9475  08A7  0872               	movf	___awdiv@divisor+1,w
  9476  08A8  0274               	subwf	___awdiv@dividend+1,w
  9477  08A9  1D03               	skipz
  9478  08AA  28AD               	goto	u1985
  9479  08AB  0871               	movf	___awdiv@divisor,w
  9480  08AC  0273               	subwf	___awdiv@dividend,w
  9481  08AD                     u1985:	
  9482  08AD  1C03               	skipc
  9483  08AE  28B4               	goto	l3456
  9484  08AF  0871               	movf	___awdiv@divisor,w
  9485  08B0  02F3               	subwf	___awdiv@dividend,f
  9486  08B1  0872               	movf	___awdiv@divisor+1,w
  9487  08B2  3BF4               	subwfb	___awdiv@dividend+1,f
  9488  08B3  1477               	bsf	___awdiv@quotient,0
  9489  08B4                     l3456:	
  9490  08B4  36F2               	lsrf	___awdiv@divisor+1,f
  9491  08B5  0CF1               	rrf	___awdiv@divisor,f
  9492  08B6  0BF5               	decfsz	___awdiv@counter,f
  9493  08B7  28A5               	goto	l3448
  9494  08B8                     l3460:	
  9495  08B8  0876               	movf	___awdiv@sign,w
  9496  08B9  1903               	btfsc	3,2
  9497  08BA  28C0               	goto	l3464
  9498  08BB  09F7               	comf	___awdiv@quotient,f
  9499  08BC  09F8               	comf	___awdiv@quotient+1,f
  9500  08BD  0AF7               	incf	___awdiv@quotient,f
  9501  08BE  1903               	skipnz
  9502  08BF  0AF8               	incf	___awdiv@quotient+1,f
  9503  08C0                     l3464:	
  9504  08C0  0878               	movf	___awdiv@quotient+1,w
  9505  08C1  00F2               	movwf	?___awdiv+1
  9506  08C2  0877               	movf	___awdiv@quotient,w
  9507  08C3  00F1               	movwf	?___awdiv
  9508  08C4  0008               	return
  9509  08C5                     __end_of___awdiv:	
  9510  08C5                     __ptext8:	
  9511 ;; *************** function ___lwdiv *****************
  9512 ;; Defined at:
  9513 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  9514 ;; Parameters:    Size  Location     Type
  9515 ;;  divisor         2    1[COMMON] unsigned int 
  9516 ;;  dividend        2    3[COMMON] unsigned int 
  9517 ;; Auto vars:     Size  Location     Type
  9518 ;;  quotient        2    5[COMMON] unsigned int 
  9519 ;;  counter         1    7[COMMON] unsigned char 
  9520 ;; Return value:  Size  Location     Type
  9521 ;;                  2    1[COMMON] unsigned int 
  9522 ;; Registers used:
  9523 ;;		wreg, status,2, status,0
  9524 ;; Tracked objects:
  9525 ;;		On entry : 1F/0
  9526 ;;		On exit  : 1F/0
  9527 ;;		Unchanged: 1F/0
  9528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9529 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9530 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9532 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9533 ;;Total ram usage:        7 bytes
  9534 ;; Hardware stack levels used:    1
  9535 ;; Hardware stack levels required when called:    1
  9536 ;; This function calls:
  9537 ;;		Nothing
  9538 ;; This function is called by:
  9539 ;;		_pid_pwm2_vout_run
  9540 ;; This function uses a non-reentrant model
  9541 ;;
  9542                           
  9543                           
  9544                           ;psect for function ___lwdiv
  9545  08C5                     ___lwdiv:	
  9546                           
  9547                           ;incstack = 0
  9548                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  9549  08C5  01F5               	clrf	___lwdiv@quotient
  9550  08C6  01F6               	clrf	___lwdiv@quotient+1
  9551  08C7  0871               	movf	___lwdiv@divisor,w
  9552  08C8  0472               	iorwf	___lwdiv@divisor+1,w
  9553  08C9  1903               	btfsc	3,2
  9554  08CA  28E5               	goto	l3516
  9555  08CB  01F7               	clrf	___lwdiv@counter
  9556  08CC                     L1:	
  9557  08CC  0AF7               	incf	___lwdiv@counter,f
  9558  08CD  1BF2               	btfsc	___lwdiv@divisor+1,7
  9559  08CE  28D2               	goto	l3504
  9560  08CF  35F1               	lslf	___lwdiv@divisor,f
  9561  08D0  0DF2               	rlf	___lwdiv@divisor+1,f
  9562  08D1  28CC               	goto	L1
  9563  08D2                     l3504:	
  9564  08D2  35F5               	lslf	___lwdiv@quotient,f
  9565  08D3  0DF6               	rlf	___lwdiv@quotient+1,f
  9566  08D4  0872               	movf	___lwdiv@divisor+1,w
  9567  08D5  0274               	subwf	___lwdiv@dividend+1,w
  9568  08D6  1D03               	skipz
  9569  08D7  28DA               	goto	u2075
  9570  08D8  0871               	movf	___lwdiv@divisor,w
  9571  08D9  0273               	subwf	___lwdiv@dividend,w
  9572  08DA                     u2075:	
  9573  08DA  1C03               	skipc
  9574  08DB  28E1               	goto	l3512
  9575  08DC  0871               	movf	___lwdiv@divisor,w
  9576  08DD  02F3               	subwf	___lwdiv@dividend,f
  9577  08DE  0872               	movf	___lwdiv@divisor+1,w
  9578  08DF  3BF4               	subwfb	___lwdiv@dividend+1,f
  9579  08E0  1475               	bsf	___lwdiv@quotient,0
  9580  08E1                     l3512:	
  9581  08E1  36F2               	lsrf	___lwdiv@divisor+1,f
  9582  08E2  0CF1               	rrf	___lwdiv@divisor,f
  9583  08E3  0BF7               	decfsz	___lwdiv@counter,f
  9584  08E4  28D2               	goto	l3504
  9585  08E5                     l3516:	
  9586  08E5  0876               	movf	___lwdiv@quotient+1,w
  9587  08E6  00F2               	movwf	?___lwdiv+1
  9588  08E7  0875               	movf	___lwdiv@quotient,w
  9589  08E8  00F1               	movwf	?___lwdiv
  9590  08E9  0008               	return
  9591  08EA                     __end_of___lwdiv:	
  9592  08EA                     __ptext6:	
  9593 ;; *************** function _set_vout_pwm2_duty *****************
  9594 ;; Defined at:
  9595 ;;		line 73 in file "src/api/sample.c"
  9596 ;; Parameters:    Size  Location     Type
  9597 ;;  duty            2    3[COMMON] unsigned int 
  9598 ;; Auto vars:     Size  Location     Type
  9599 ;;  t16             2    5[COMMON] unsigned int 
  9600 ;; Return value:  Size  Location     Type
  9601 ;;                  1    wreg      void 
  9602 ;; Registers used:
  9603 ;;		wreg, pclath, cstack
  9604 ;; Tracked objects:
  9605 ;;		On entry : 1F/0
  9606 ;;		On exit  : 1F/1B
  9607 ;;		Unchanged: 0/0
  9608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9609 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9610 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9612 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9613 ;;Total ram usage:        4 bytes
  9614 ;; Hardware stack levels used:    1
  9615 ;; Hardware stack levels required when called:    2
  9616 ;; This function calls:
  9617 ;;		_get_vout_pwm2_duty
  9618 ;; This function is called by:
  9619 ;;		_pid_pwm2_vout_run
  9620 ;; This function uses a non-reentrant model
  9621 ;;
  9622                           
  9623                           
  9624                           ;psect for function _set_vout_pwm2_duty
  9625  08EA                     _set_vout_pwm2_duty:	
  9626  08EA                     l3136:	
  9627                           ;incstack = 0
  9628                           ; Regs used in _set_vout_pwm2_duty: [wreg+pclath+cstack]
  9629                           
  9630                           
  9631                           ;sample.c: 76: uint16_t t16;
  9632                           ;sample.c: 77: pwm2DutyForVout=duty;
  9633  08EA  0874               	movf	set_vout_pwm2_duty@duty+1,w
  9634  08EB  00E5               	movwf	_pwm2DutyForVout+1
  9635  08EC  0873               	movf	set_vout_pwm2_duty@duty,w
  9636  08ED  00E4               	movwf	_pwm2DutyForVout
  9637                           
  9638                           ;sample.c: 78: t16=get_vout_pwm2_duty();
  9639  08EE  2103  3188         	fcall	_get_vout_pwm2_duty
  9640  08F0  0872               	movf	?_get_vout_pwm2_duty+1,w
  9641  08F1  00F6               	movwf	set_vout_pwm2_duty@t16+1
  9642  08F2  0871               	movf	?_get_vout_pwm2_duty,w
  9643  08F3  00F5               	movwf	set_vout_pwm2_duty@t16
  9644                           
  9645                           ;sample.c: 79: if(t16==duty)return;
  9646  08F4  0874               	movf	set_vout_pwm2_duty@duty+1,w
  9647  08F5  0676               	xorwf	set_vout_pwm2_duty@t16+1,w
  9648  08F6  1D03               	skipz
  9649  08F7  28FA               	goto	u1575
  9650  08F8  0873               	movf	set_vout_pwm2_duty@duty,w
  9651  08F9  0675               	xorwf	set_vout_pwm2_duty@t16,w
  9652  08FA                     u1575:	
  9653  08FA  1903               	btfsc	3,2
  9654  08FB  0008               	return
  9655                           
  9656                           ;sample.c: 83: PWM2CONbits.EN = 0;
  9657  08FC  13AB               	bcf	43,7	;volatile
  9658                           
  9659                           ;sample.c: 84: PWM2DCL= (uint8_t)(duty&0xff);
  9660  08FD  0873               	movf	set_vout_pwm2_duty@duty,w
  9661  08FE  00A3               	movwf	35	;volatile
  9662                           
  9663                           ;sample.c: 85: PWM2DCH=(uint8_t)(duty>>8);
  9664  08FF  0874               	movf	set_vout_pwm2_duty@duty+1,w
  9665  0900  00A4               	movwf	36	;volatile
  9666                           
  9667                           ;sample.c: 86: PWM2CONbits.EN = 1;
  9668  0901  17AB               	bsf	43,7	;volatile
  9669  0902  0008               	return
  9670  0903                     __end_of_set_vout_pwm2_duty:	
  9671  0903                     __ptext7:	
  9672 ;; *************** function _get_vout_pwm2_duty *****************
  9673 ;; Defined at:
  9674 ;;		line 68 in file "src/api/sample.c"
  9675 ;; Parameters:    Size  Location     Type
  9676 ;;		None
  9677 ;; Auto vars:     Size  Location     Type
  9678 ;;		None
  9679 ;; Return value:  Size  Location     Type
  9680 ;;                  2    1[COMMON] unsigned int 
  9681 ;; Registers used:
  9682 ;;		wreg
  9683 ;; Tracked objects:
  9684 ;;		On entry : 1F/0
  9685 ;;		On exit  : 1F/1B
  9686 ;;		Unchanged: 0/0
  9687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9688 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9691 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9692 ;;Total ram usage:        2 bytes
  9693 ;; Hardware stack levels used:    1
  9694 ;; Hardware stack levels required when called:    1
  9695 ;; This function calls:
  9696 ;;		Nothing
  9697 ;; This function is called by:
  9698 ;;		_set_vout_pwm2_duty
  9699 ;; This function uses a non-reentrant model
  9700 ;;
  9701                           
  9702                           
  9703                           ;psect for function _get_vout_pwm2_duty
  9704  0903                     _get_vout_pwm2_duty:	
  9705                           
  9706                           ;sample.c: 70: return ((PWM2DCH<<8)|PWM2DCL);
  9707                           
  9708                           ;incstack = 0
  9709                           ; Regs used in _get_vout_pwm2_duty: [wreg]
  9710  0903  003B               	movlb	27	; select bank27
  9711  0904  0824               	movf	36,w	;volatile
  9712  0905  00F2               	movwf	?_get_vout_pwm2_duty+1
  9713  0906  01F1               	clrf	?_get_vout_pwm2_duty
  9714  0907  0823               	movf	35,w	;volatile
  9715  0908  04F1               	iorwf	?_get_vout_pwm2_duty,f
  9716  0909  0008               	return
  9717  090A                     __end_of_get_vout_pwm2_duty:	
  9718  090A                     PL46:	
  9719  090A  0823               	movf	pid_pwm2_vout_run@t16+1,w
  9720  090B  3A80               	xorlw	128
  9721  090C  00F9               	movwf	??_pid_pwm2_vout_run
  9722  090D  3080               	movlw	128
  9723  090E  0279               	subwf	??_pid_pwm2_vout_run,w
  9724  090F  0008               	return
  9725  0910                     __end_ofPL46:	
  9726                           
  9727                           	psect	text10
  9728  0910                     __ptext10:	
  9729 ;; *************** function _pid_pwm1_idrv_run *****************
  9730 ;; Defined at:
  9731 ;;		line 295 in file "src/api/sample.c"
  9732 ;; Parameters:    Size  Location     Type
  9733 ;;		None
  9734 ;; Auto vars:     Size  Location     Type
  9735 ;;  t32             4   36[BANK0 ] long 
  9736 ;;  ed              4    0        long 
  9737 ;;  ei              4   26[BANK0 ] long 
  9738 ;;  ep              4   22[BANK0 ] long 
  9739 ;;  t16             2   34[BANK0 ] unsigned int 
  9740 ;; Return value:  Size  Location     Type
  9741 ;;                  1    wreg      void 
  9742 ;; Registers used:
  9743 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9744 ;; Tracked objects:
  9745 ;;		On entry : 1F/0
  9746 ;;		On exit  : 1F/1B
  9747 ;;		Unchanged: 0/0
  9748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9750 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9751 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9752 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9753 ;;Total ram usage:       22 bytes
  9754 ;; Hardware stack levels used:    1
  9755 ;; Hardware stack levels required when called:    3
  9756 ;; This function calls:
  9757 ;;		___aldiv
  9758 ;;		___lmul
  9759 ;;		_set_idrv_pwm1_duty
  9760 ;; This function is called by:
  9761 ;;		_main
  9762 ;; This function uses a non-reentrant model
  9763 ;;
  9764                           
  9765                           
  9766                           ;psect for function _pid_pwm1_idrv_run
  9767  0910                     _pid_pwm1_idrv_run:	
  9768                           
  9769                           ;sample.c: 298: int32_t ep,ei,ed;
  9770                           ;sample.c: 299: int32_t t32;
  9771                           ;sample.c: 300: t32=(resRs-resRc);
  9772                           
  9773                           ;incstack = 0
  9774                           ; Regs used in _pid_pwm1_idrv_run: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9775  0910  0021               	movlb	1	; select bank1
  9776  0911  0867               	movf	(_resRs+3)^(0+128),w
  9777  0912  0020               	movlb	0	; select bank0
  9778  0913  00C7               	movwf	pid_pwm1_idrv_run@t32+3
  9779  0914  0021               	movlb	1	; select bank1
  9780  0915  0866               	movf	(_resRs+2)^(0+128),w
  9781  0916  0020               	movlb	0	; select bank0
  9782  0917  00C6               	movwf	pid_pwm1_idrv_run@t32+2
  9783  0918  0021               	movlb	1	; select bank1
  9784  0919  0865               	movf	(_resRs+1)^(0+128),w
  9785  091A  0020               	movlb	0	; select bank0
  9786  091B  00C5               	movwf	pid_pwm1_idrv_run@t32+1
  9787  091C  0021               	movlb	1	; select bank1
  9788  091D  0864               	movf	_resRs^(0+128),w
  9789  091E  0020               	movlb	0	; select bank0
  9790  091F  00C4               	movwf	pid_pwm1_idrv_run@t32
  9791  0920  0021               	movlb	1	; select bank1
  9792  0921  0860               	movf	_resRc^(0+128),w
  9793  0922  0020               	movlb	0	; select bank0
  9794  0923  02C4               	subwf	pid_pwm1_idrv_run@t32,f
  9795  0924  0021               	movlb	1	; select bank1
  9796  0925  0861               	movf	(_resRc+1)^(0+128),w
  9797  0926  0020               	movlb	0	; select bank0
  9798  0927  3BC5               	subwfb	pid_pwm1_idrv_run@t32+1,f
  9799  0928  0021               	movlb	1	; select bank1
  9800  0929  0862               	movf	(_resRc+2)^(0+128),w
  9801  092A  0020               	movlb	0	; select bank0
  9802  092B  3BC6               	subwfb	pid_pwm1_idrv_run@t32+2,f
  9803  092C  0021               	movlb	1	; select bank1
  9804  092D  0863               	movf	(_resRc+3)^(0+128),w
  9805  092E  0020               	movlb	0	; select bank0
  9806  092F  3BC7               	subwfb	pid_pwm1_idrv_run@t32+3,f
  9807                           
  9808                           ;sample.c: 301: t32=2000-t32;
  9809  0930  30D0               	movlw	208
  9810  0931  00B2               	movwf	??_pid_pwm1_idrv_run
  9811  0932  3007               	movlw	7
  9812  0933  00B3               	movwf	??_pid_pwm1_idrv_run+1
  9813  0934  01B4               	clrf	??_pid_pwm1_idrv_run+2
  9814  0935  01B5               	clrf	??_pid_pwm1_idrv_run+3
  9815  0936  0844               	movf	pid_pwm1_idrv_run@t32,w
  9816  0937  02B2               	subwf	??_pid_pwm1_idrv_run,f
  9817  0938  0845               	movf	pid_pwm1_idrv_run@t32+1,w
  9818  0939  3BB3               	subwfb	??_pid_pwm1_idrv_run+1,f
  9819  093A  0846               	movf	pid_pwm1_idrv_run@t32+2,w
  9820  093B  3BB4               	subwfb	??_pid_pwm1_idrv_run+2,f
  9821  093C  0847               	movf	pid_pwm1_idrv_run@t32+3,w
  9822  093D  3BB5               	subwfb	??_pid_pwm1_idrv_run+3,f
  9823  093E  0835               	movf	??_pid_pwm1_idrv_run+3,w
  9824  093F  223C  3189         	fcall	PL26	;call to abstracted procedure
  9825                           
  9826                           ;sample.c: 303: err[2]=err[1];
  9827  0941  30A4               	movlw	((low (_err| 0))& (0+255)+4)
  9828  0942  0086               	movwf	6
  9829  0943  0187               	clrf	7
  9830  0944  3F40               	moviw [0]fsr1
  9831  0945  0021               	movlb	1	; select bank1
  9832  0946  00A8               	movwf	(_err^(0+128)+8)
  9833  0947  3F41               	moviw [1]fsr1
  9834  0948  00A9               	movwf	((_err+1)^(0+128)+8)
  9835  0949  3F42               	moviw [2]fsr1
  9836  094A  00AA               	movwf	((_err+2)^(0+128)+8)
  9837  094B  3F43               	moviw [3]fsr1
  9838  094C  00AB               	movwf	((_err+3)^(0+128)+8)
  9839                           
  9840                           ;sample.c: 304: err[1]=err[0];
  9841  094D  0823               	movf	(_err+3)^(0+128),w
  9842  094E  00A7               	movwf	((_err+3)^(0+128)+4)
  9843  094F  0822               	movf	(_err+2)^(0+128),w
  9844  0950  00A6               	movwf	((_err+2)^(0+128)+4)
  9845  0951  0821               	movf	(_err+1)^(0+128),w
  9846  0952  00A5               	movwf	((_err+1)^(0+128)+4)
  9847  0953  0820               	movf	_err^(0+128),w
  9848  0954  00A4               	movwf	(_err^(0+128)+4)
  9849                           
  9850                           ;sample.c: 305: err[0]=t32;
  9851  0955  0020               	movlb	0	; select bank0
  9852  0956  0847               	movf	pid_pwm1_idrv_run@t32+3,w
  9853  0957  0021               	movlb	1	; select bank1
  9854  0958  00A3               	movwf	(_err+3)^(0+128)
  9855  0959  0020               	movlb	0	; select bank0
  9856  095A  0846               	movf	pid_pwm1_idrv_run@t32+2,w
  9857  095B  0021               	movlb	1	; select bank1
  9858  095C  00A2               	movwf	(_err+2)^(0+128)
  9859  095D  0020               	movlb	0	; select bank0
  9860  095E  0845               	movf	pid_pwm1_idrv_run@t32+1,w
  9861  095F  0021               	movlb	1	; select bank1
  9862  0960  00A1               	movwf	(_err+1)^(0+128)
  9863  0961  0020               	movlb	0	; select bank0
  9864  0962  0844               	movf	pid_pwm1_idrv_run@t32,w
  9865  0963  0021               	movlb	1	; select bank1
  9866  0964  00A0               	movwf	_err^(0+128)
  9867                           
  9868                           ;sample.c: 308: ep=(err[0]-err[1])*PidKp;
  9869  0965  0824               	movf	(_err^(0+128)+4),w
  9870  0966  0220               	subwf	_err^(0+128),w
  9871  0967  0020               	movlb	0	; select bank0
  9872  0968  00B2               	movwf	??_pid_pwm1_idrv_run
  9873  0969  0021               	movlb	1	; select bank1
  9874  096A  0825               	movf	((_err+1)^(0+128)+4),w
  9875  096B  3B21               	subwfb	(_err+1)^(0+128),w
  9876  096C  0020               	movlb	0	; select bank0
  9877  096D  00B3               	movwf	??_pid_pwm1_idrv_run+1
  9878  096E  0021               	movlb	1	; select bank1
  9879  096F  0826               	movf	((_err+2)^(0+128)+4),w
  9880  0970  3B22               	subwfb	(_err+2)^(0+128),w
  9881  0971  0020               	movlb	0	; select bank0
  9882  0972  00B4               	movwf	??_pid_pwm1_idrv_run+2
  9883  0973  0021               	movlb	1	; select bank1
  9884  0974  0827               	movf	((_err+3)^(0+128)+4),w
  9885  0975  3B23               	subwfb	(_err+3)^(0+128),w
  9886  0976  0020               	movlb	0	; select bank0
  9887  0977  00B5               	movwf	??_pid_pwm1_idrv_run+3
  9888  0978  00F4               	movwf	___lmul@multiplier+3
  9889  0979  0834               	movf	??_pid_pwm1_idrv_run+2,w
  9890  097A  00F3               	movwf	___lmul@multiplier+2
  9891  097B  0833               	movf	??_pid_pwm1_idrv_run+1,w
  9892  097C  00F2               	movwf	___lmul@multiplier+1
  9893  097D  0832               	movf	??_pid_pwm1_idrv_run,w
  9894  097E  00F1               	movwf	___lmul@multiplier
  9895  097F  0021               	movlb	1	; select bank1
  9896  0980  2233               	fcall	PL20	;call to abstracted procedure
  9897  0981  3186  2602  3189   	fcall	___lmul
  9898  0984  0874               	movf	?___lmul+3,w
  9899  0985  00B9               	movwf	pid_pwm1_idrv_run@ep+3
  9900  0986  0873               	movf	?___lmul+2,w
  9901  0987  00B8               	movwf	pid_pwm1_idrv_run@ep+2
  9902  0988  0872               	movf	?___lmul+1,w
  9903  0989  00B7               	movwf	pid_pwm1_idrv_run@ep+1
  9904  098A  0871               	movf	?___lmul,w
  9905  098B  00B6               	movwf	pid_pwm1_idrv_run@ep
  9906                           
  9907                           ;sample.c: 309: ei=PidKp*err[0]/PidTi;
  9908  098C  0021               	movlb	1	; select bank1
  9909  098D  0837               	movf	(_PidTi+3)^(0+128),w
  9910  098E  0020               	movlb	0	; select bank0
  9911  098F  00A7               	movwf	___aldiv@divisor+3
  9912  0990  0021               	movlb	1	; select bank1
  9913  0991  0836               	movf	(_PidTi+2)^(0+128),w
  9914  0992  0020               	movlb	0	; select bank0
  9915  0993  00A6               	movwf	___aldiv@divisor+2
  9916  0994  0021               	movlb	1	; select bank1
  9917  0995  0835               	movf	(_PidTi+1)^(0+128),w
  9918  0996  0020               	movlb	0	; select bank0
  9919  0997  00A5               	movwf	___aldiv@divisor+1
  9920  0998  0021               	movlb	1	; select bank1
  9921  0999  0834               	movf	_PidTi^(0+128),w
  9922  099A  0020               	movlb	0	; select bank0
  9923  099B  00A4               	movwf	___aldiv@divisor
  9924  099C  0021               	movlb	1	; select bank1
  9925  099D  0823               	movf	(_err+3)^(0+128),w
  9926  099E  00F4               	movwf	___lmul@multiplier+3
  9927  099F  0822               	movf	(_err+2)^(0+128),w
  9928  09A0  00F3               	movwf	___lmul@multiplier+2
  9929  09A1  0821               	movf	(_err+1)^(0+128),w
  9930  09A2  00F2               	movwf	___lmul@multiplier+1
  9931  09A3  0820               	movf	_err^(0+128),w
  9932  09A4  00F1               	movwf	___lmul@multiplier
  9933  09A5  2233               	fcall	PL20	;call to abstracted procedure
  9934  09A6  3186  2602  3189   	fcall	___lmul
  9935  09A9  3187  2789  3189   	fcall	PL14	;call to abstracted procedure
  9936  09AC  3185  2596  3189   	fcall	___aldiv
  9937  09AF  0827               	movf	?___aldiv+3,w
  9938  09B0  00BD               	movwf	pid_pwm1_idrv_run@ei+3
  9939  09B1  0826               	movf	?___aldiv+2,w
  9940  09B2  00BC               	movwf	pid_pwm1_idrv_run@ei+2
  9941  09B3  0825               	movf	?___aldiv+1,w
  9942  09B4  00BB               	movwf	pid_pwm1_idrv_run@ei+1
  9943  09B5  0824               	movf	?___aldiv,w
  9944  09B6  00BA               	movwf	pid_pwm1_idrv_run@ei
  9945                           
  9946                           ;sample.c: 312: t32=ep+ei+ed;
  9947  09B7  0836               	movf	pid_pwm1_idrv_run@ep,w
  9948  09B8  073A               	addwf	pid_pwm1_idrv_run@ei,w
  9949  09B9  00B2               	movwf	??_pid_pwm1_idrv_run
  9950  09BA  0837               	movf	pid_pwm1_idrv_run@ep+1,w
  9951  09BB  3D3B               	addwfc	pid_pwm1_idrv_run@ei+1,w
  9952  09BC  00B3               	movwf	??_pid_pwm1_idrv_run+1
  9953  09BD  0838               	movf	pid_pwm1_idrv_run@ep+2,w
  9954  09BE  3D3C               	addwfc	pid_pwm1_idrv_run@ei+2,w
  9955  09BF  00B4               	movwf	??_pid_pwm1_idrv_run+2
  9956  09C0  0839               	movf	pid_pwm1_idrv_run@ep+3,w
  9957  09C1  3D3D               	addwfc	pid_pwm1_idrv_run@ei+3,w
  9958  09C2  00B5               	movwf	??_pid_pwm1_idrv_run+3
  9959  09C3  223C               	fcall	PL26	;call to abstracted procedure
  9960                           
  9961                           ;sample.c: 313: t32/=10000;
  9962  09C4  3027               	movlw	39
  9963  09C5  01A7               	clrf	___aldiv@divisor+3
  9964  09C6  01A6               	clrf	___aldiv@divisor+2
  9965  09C7  00A5               	movwf	___aldiv@divisor+1
  9966  09C8  3010               	movlw	16
  9967  09C9  00A4               	movwf	___aldiv@divisor
  9968  09CA  0847               	movf	pid_pwm1_idrv_run@t32+3,w
  9969  09CB  00AB               	movwf	___aldiv@dividend+3
  9970  09CC  0846               	movf	pid_pwm1_idrv_run@t32+2,w
  9971  09CD  00AA               	movwf	___aldiv@dividend+2
  9972  09CE  0845               	movf	pid_pwm1_idrv_run@t32+1,w
  9973  09CF  00A9               	movwf	___aldiv@dividend+1
  9974  09D0  0844               	movf	pid_pwm1_idrv_run@t32,w
  9975  09D1  00A8               	movwf	___aldiv@dividend
  9976  09D2  3185  2596  3189   	fcall	___aldiv
  9977  09D5  0827               	movf	?___aldiv+3,w
  9978  09D6  00C7               	movwf	pid_pwm1_idrv_run@t32+3
  9979  09D7  0826               	movf	?___aldiv+2,w
  9980  09D8  00C6               	movwf	pid_pwm1_idrv_run@t32+2
  9981  09D9  0825               	movf	?___aldiv+1,w
  9982  09DA  00C5               	movwf	pid_pwm1_idrv_run@t32+1
  9983  09DB  0824               	movf	?___aldiv,w
  9984  09DC  00C4               	movwf	pid_pwm1_idrv_run@t32
  9985                           
  9986                           ;sample.c: 314: t32+=pidU;
  9987  09DD  0021               	movlb	1	; select bank1
  9988  09DE  085C               	movf	_pidU^(0+128),w
  9989  09DF  0020               	movlb	0	; select bank0
  9990  09E0  07C4               	addwf	pid_pwm1_idrv_run@t32,f
  9991  09E1  0021               	movlb	1	; select bank1
  9992  09E2  085D               	movf	(_pidU+1)^(0+128),w
  9993  09E3  0020               	movlb	0	; select bank0
  9994  09E4  3DC5               	addwfc	pid_pwm1_idrv_run@t32+1,f
  9995  09E5  0021               	movlb	1	; select bank1
  9996  09E6  085E               	movf	(_pidU+2)^(0+128),w
  9997  09E7  0020               	movlb	0	; select bank0
  9998  09E8  3DC6               	addwfc	pid_pwm1_idrv_run@t32+2,f
  9999  09E9  0021               	movlb	1	; select bank1
 10000  09EA  085F               	movf	(_pidU+3)^(0+128),w
 10001  09EB  0020               	movlb	0	; select bank0
 10002  09EC  3DC7               	addwfc	pid_pwm1_idrv_run@t32+3,f
 10003                           
 10004                           ;sample.c: 316: __nop();
 10005  09ED  0000               	nop
 10006                           
 10007                           ;sample.c: 317: if(t32>1200)t32=1200;
 10008  09EE  0020               	movlb	0	; select bank0
 10009  09EF  1BC7               	btfsc	pid_pwm1_idrv_run@t32+3,7
 10010  09F0  2A03               	goto	l4426
 10011  09F1  0847               	movf	pid_pwm1_idrv_run@t32+3,w
 10012  09F2  1D03               	btfss	3,2
 10013  09F3  29FD               	goto	l4424
 10014  09F4  0846               	movf	pid_pwm1_idrv_run@t32+2,w
 10015  09F5  1D03               	btfss	3,2
 10016  09F6  29FD               	goto	l4424
 10017  09F7  30B1               	movlw	177
 10018  09F8  0244               	subwf	pid_pwm1_idrv_run@t32,w
 10019  09F9  3004               	movlw	4
 10020  09FA  3B45               	subwfb	pid_pwm1_idrv_run@t32+1,w
 10021  09FB  1C03               	btfss	3,0
 10022  09FC  2A03               	goto	l4426
 10023  09FD                     l4424:	
 10024  09FD  3004               	movlw	4
 10025  09FE  01C7               	clrf	pid_pwm1_idrv_run@t32+3
 10026  09FF  01C6               	clrf	pid_pwm1_idrv_run@t32+2
 10027  0A00  00C5               	movwf	pid_pwm1_idrv_run@t32+1
 10028  0A01  30B0               	movlw	176
 10029  0A02  00C4               	movwf	pid_pwm1_idrv_run@t32
 10030  0A03                     l4426:	
 10031                           
 10032                           ;sample.c: 318: if(t32<5)t32=5;
 10033  0A03  1BC7               	btfsc	pid_pwm1_idrv_run@t32+3,7
 10034  0A04  2A12               	goto	l4428
 10035  0A05  0847               	movf	pid_pwm1_idrv_run@t32+3,w
 10036  0A06  1D03               	btfss	3,2
 10037  0A07  2A17               	goto	l689
 10038  0A08  0846               	movf	pid_pwm1_idrv_run@t32+2,w
 10039  0A09  1D03               	btfss	3,2
 10040  0A0A  2A17               	goto	l689
 10041  0A0B  0845               	movf	pid_pwm1_idrv_run@t32+1,w
 10042  0A0C  1D03               	btfss	3,2
 10043  0A0D  2A17               	goto	l689
 10044  0A0E  3005               	movlw	5
 10045  0A0F  0244               	subwf	pid_pwm1_idrv_run@t32,w
 10046  0A10  1803               	btfsc	3,0
 10047  0A11  2A17               	goto	l689
 10048  0A12                     l4428:	
 10049  0A12  3005               	movlw	5
 10050  0A13  00C4               	movwf	pid_pwm1_idrv_run@t32
 10051  0A14  01C5               	clrf	pid_pwm1_idrv_run@t32+1
 10052  0A15  01C6               	clrf	pid_pwm1_idrv_run@t32+2
 10053  0A16  01C7               	clrf	pid_pwm1_idrv_run@t32+3
 10054  0A17                     l689:	
 10055                           
 10056                           ;sample.c: 319: pidU=t32;
 10057  0A17  0847               	movf	pid_pwm1_idrv_run@t32+3,w
 10058  0A18  0021               	movlb	1	; select bank1
 10059  0A19  00DF               	movwf	(_pidU+3)^(0+128)
 10060  0A1A  0020               	movlb	0	; select bank0
 10061  0A1B  0846               	movf	pid_pwm1_idrv_run@t32+2,w
 10062  0A1C  0021               	movlb	1	; select bank1
 10063  0A1D  00DE               	movwf	(_pidU+2)^(0+128)
 10064  0A1E  0020               	movlb	0	; select bank0
 10065  0A1F  0845               	movf	pid_pwm1_idrv_run@t32+1,w
 10066  0A20  0021               	movlb	1	; select bank1
 10067  0A21  00DD               	movwf	(_pidU+1)^(0+128)
 10068  0A22  0020               	movlb	0	; select bank0
 10069  0A23  0844               	movf	pid_pwm1_idrv_run@t32,w
 10070  0A24  0021               	movlb	1	; select bank1
 10071  0A25  00DC               	movwf	_pidU^(0+128)
 10072                           
 10073                           ;sample.c: 320: uint16_t t16;
 10074                           ;sample.c: 321: t16=(uint16_t)pidU;
 10075  0A26  085D               	movf	(_pidU+1)^(0+128),w
 10076  0A27  0020               	movlb	0	; select bank0
 10077  0A28  00C3               	movwf	pid_pwm1_idrv_run@t16+1
 10078  0A29  0021               	movlb	1	; select bank1
 10079  0A2A  085C               	movf	_pidU^(0+128),w
 10080  0A2B  0020               	movlb	0	; select bank0
 10081  0A2C  00C2               	movwf	pid_pwm1_idrv_run@t16
 10082                           
 10083                           ;sample.c: 322: set_idrv_pwm1_duty(t16);
 10084  0A2D  0843               	movf	pid_pwm1_idrv_run@t16+1,w
 10085  0A2E  00F4               	movwf	set_idrv_pwm1_duty@duty+1
 10086  0A2F  0842               	movf	pid_pwm1_idrv_run@t16,w
 10087  0A30  00F3               	movwf	set_idrv_pwm1_duty@duty
 10088  0A31  3186  2E69         	ljmp	l3124
 10089  0A33                     __end_of_pid_pwm1_idrv_run:	
 10090  0A33                     PL20:	
 10091  0A33  082F               	movf	(_PidKp+3)^(0+128),w
 10092  0A34  00F8               	movwf	___lmul@multiplicand+3
 10093  0A35  082E               	movf	(_PidKp+2)^(0+128),w
 10094  0A36  00F7               	movwf	___lmul@multiplicand+2
 10095  0A37  082D               	movf	(_PidKp+1)^(0+128),w
 10096  0A38  00F6               	movwf	___lmul@multiplicand+1
 10097  0A39  082C               	movf	_PidKp^(0+128),w
 10098  0A3A  00F5               	movwf	___lmul@multiplicand
 10099  0A3B  0008               	return
 10100  0A3C                     __end_ofPL20:	
 10101  0A3C                     PL26:	
 10102  0A3C  00C7               	movwf	pid_pwm1_idrv_run@t32+3
 10103  0A3D  0834               	movf	??_pid_pwm1_idrv_run+2,w
 10104  0A3E  00C6               	movwf	pid_pwm1_idrv_run@t32+2
 10105  0A3F  0833               	movf	??_pid_pwm1_idrv_run+1,w
 10106  0A40  00C5               	movwf	pid_pwm1_idrv_run@t32+1
 10107  0A41  0832               	movf	??_pid_pwm1_idrv_run,w
 10108  0A42  00C4               	movwf	pid_pwm1_idrv_run@t32
 10109  0A43  0008               	return
 10110  0A44                     __end_ofPL26:	
 10111                           
 10112                           	psect	swtext1
 10113  101E                     __pswtext1:	
 10114  101E                     S4672:	
 10115  101E  3183  2BD8         	ljmp	l4338
 10116  1020  3183  2BD8         	ljmp	l4338
 10117  1022  3183  2BE1         	ljmp	l4344
 10118  1024  3183  2BF6         	ljmp	l4350
 10119  1026  3184  2C1D         	ljmp	l4364
 10120  1028  3185  2D95         	ljmp	l669
 10121                           
 10122                           	psect	text14
 10123  0D2A                     __ptext14:	
 10124 ;; *************** function _modbus_response_process *****************
 10125 ;; Defined at:
 10126 ;;		line 189 in file "src/api/modbus.c"
 10127 ;; Parameters:    Size  Location     Type
 10128 ;;  rbuf            1    wreg     PTR unsigned char 
 10129 ;;		 -> modbusBuf(64), 
 10130 ;;  rlen            2   24[BANK0 ] unsigned int 
 10131 ;; Auto vars:     Size  Location     Type
 10132 ;;  rbuf            1   27[BANK0 ] PTR unsigned char 
 10133 ;;		 -> modbusBuf(64), 
 10134 ;;  pmdbs           1   26[BANK0 ] PTR struct .
 10135 ;;		 -> modbusBuf(64), 
 10136 ;;  resp            1    0        unsigned char 
 10137 ;; Return value:  Size  Location     Type
 10138 ;;                  1    wreg      void 
 10139 ;; Registers used:
 10140 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10141 ;; Tracked objects:
 10142 ;;		On entry : 1F/0
 10143 ;;		On exit  : 1F/0
 10144 ;;		Unchanged: 0/0
 10145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10146 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10147 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10149 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10150 ;;Total ram usage:        4 bytes
 10151 ;; Hardware stack levels used:    1
 10152 ;; Hardware stack levels required when called:    5
 10153 ;; This function calls:
 10154 ;;		_crc_verify
 10155 ;;		_modbus_response_command
 10156 ;;		_modbus_response_illgeal_function
 10157 ;;		_modbus_response_write_single_register
 10158 ;; This function is called by:
 10159 ;;		_main
 10160 ;; This function uses a non-reentrant model
 10161 ;;
 10162                           
 10163                           
 10164                           ;psect for function _modbus_response_process
 10165  0D2A                     _modbus_response_process:	
 10166                           
 10167                           ;incstack = 0
 10168                           ; Regs used in _modbus_response_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10169                           ;modbus_response_process@rbuf stored from wreg
 10170  0D2A  00BB               	movwf	modbus_response_process@rbuf
 10171                           
 10172                           ;modbus.c: 191: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)rbuf;
 10173  0D2B  00BA               	movwf	modbus_response_process@pmdbs
 10174                           
 10175                           ;modbus.c: 194: if((pmdbs->addr!=sysData.id) && (pmdbs->addr!=0x00))return;
 10176  0D2C  27CA  318D         	fcall	PL22	;call to abstracted procedure
 10177  0D2E  083A               	movf	modbus_response_process@pmdbs,w
 10178  0D2F  27D6  318D         	fcall	PL36	;call to abstracted procedure
 10179  0D31  1903               	skipnz
 10180  0D32  2D38               	goto	l4542
 10181  0D33  083A               	movf	modbus_response_process@pmdbs,w
 10182  0D34  27FB  318D         	fcall	PL60	;call to abstracted procedure
 10183  0D36  1D03               	btfss	3,2
 10184  0D37  0008               	return
 10185  0D38                     l4542:	
 10186                           
 10187                           ;modbus.c: 195: if(!(crc_verify(rbuf,rlen)))return ;
 10188  0D38  083B               	movf	modbus_response_process@rbuf,w
 10189  0D39  00A0               	movwf	crc_verify@message
 10190  0D3A  3001               	movlw	1
 10191  0D3B  00A1               	movwf	crc_verify@message+1
 10192  0D3C  0839               	movf	modbus_response_process@rlen+1,w
 10193  0D3D  00A3               	movwf	crc_verify@n+1
 10194  0D3E  0838               	movf	modbus_response_process@rlen,w
 10195  0D3F  00A2               	movwf	crc_verify@n
 10196  0D40  318C  2417  318D   	fcall	_crc_verify
 10197  0D43  3A00               	xorlw	0
 10198  0D44  1903               	btfsc	3,2
 10199  0D45  0008               	return
 10200  0D46  0A3A               	incf	modbus_response_process@pmdbs,w
 10201  0D47  27FB  318D         	fcall	PL60	;call to abstracted procedure
 10202                           
 10203                           ; Switch size 1, requested type "space"
 10204                           ; Number of cases is 3, Range of values is 3 to 38
 10205                           ; switch strategies available:
 10206                           ; Name         Instructions Cycles
 10207                           ; simple_byte           10     6 (average)
 10208                           ; direct_byte           81     9 (fixed)
 10209                           ; jumptable            263     9 (fixed)
 10210                           ;	Chosen strategy is simple_byte
 10211  0D49  3A03               	xorlw	3	; case 3
 10212  0D4A  1903               	skipnz
 10213  0D4B  2D54               	goto	l4546
 10214  0D4C  3A05               	xorlw	5	; case 6
 10215  0D4D  1903               	skipnz
 10216  0D4E  2D56               	goto	l4548
 10217  0D4F  3A20               	xorlw	32	; case 38
 10218  0D50  1903               	skipnz
 10219  0D51  2D56               	goto	l4548
 10220  0D52  2D58               	goto	l4550
 10221  0D53  0008               	return
 10222  0D54                     l4546:	
 10223                           
 10224                           ;modbus.c: 199: modbus_response_command(rbuf);
 10225  0D54  083B               	movf	modbus_response_process@rbuf,w
 10226  0D55  2D5C               	ljmp	_modbus_response_command
 10227  0D56                     l4548:	
 10228                           ;modbus.c: 200: break;
 10229                           
 10230                           
 10231                           ;modbus.c: 202: case 0x26:
 10232                           ;modbus.c: 203: modbus_response_write_single_register(rbuf);
 10233  0D56  083B               	movf	modbus_response_process@rbuf,w
 10234  0D57  2E7B               	ljmp	_modbus_response_write_single_register
 10235  0D58                     l4550:	
 10236                           ;modbus.c: 204: break;
 10237                           
 10238                           
 10239                           ;modbus.c: 228: modbus_response_illgeal_function(rbuf,0x01);break;
 10240  0D58  01AB               	clrf	modbus_response_illgeal_function@errcode
 10241  0D59  0AAB               	incf	modbus_response_illgeal_function@errcode,f
 10242  0D5A  083B               	movf	modbus_response_process@rbuf,w
 10243  0D5B  2F70               	ljmp	_modbus_response_illgeal_function
 10244  0D5C                     __end_of_modbus_response_process:	
 10245  0D5C                     __ptext21:	
 10246 ;; *************** function _modbus_response_command *****************
 10247 ;; Defined at:
 10248 ;;		line 160 in file "src/api/modbus.c"
 10249 ;; Parameters:    Size  Location     Type
 10250 ;;  rbuf            1    wreg     PTR unsigned char 
 10251 ;;		 -> modbusBuf(64), 
 10252 ;; Auto vars:     Size  Location     Type
 10253 ;;  rbuf            1   18[BANK0 ] PTR unsigned char 
 10254 ;;		 -> modbusBuf(64), 
 10255 ;;  tempData        2   19[BANK0 ] unsigned int 
 10256 ;;  startAddr       2   13[BANK0 ] unsigned int 
 10257 ;;  tmpAddr         2   11[BANK0 ] unsigned int 
 10258 ;;  len             1   17[BANK0 ] unsigned char 
 10259 ;;  pmdbs           1   16[BANK0 ] PTR struct .
 10260 ;;		 -> modbusBuf(64), 
 10261 ;;  i               1   15[BANK0 ] unsigned char 
 10262 ;; Return value:  Size  Location     Type
 10263 ;;                  1    wreg      void 
 10264 ;; Registers used:
 10265 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10266 ;; Tracked objects:
 10267 ;;		On entry : 1F/0
 10268 ;;		On exit  : 1F/0
 10269 ;;		Unchanged: 0/0
 10270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10272 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10273 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10274 ;;      Totals:         1      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10275 ;;Total ram usage:       11 bytes
 10276 ;; Hardware stack levels used:    1
 10277 ;; Hardware stack levels required when called:    3
 10278 ;; This function calls:
 10279 ;;		_crc_append
 10280 ;;		_getRegisterVal
 10281 ;;		_uart_send_len
 10282 ;; This function is called by:
 10283 ;;		_modbus_response_process
 10284 ;; This function uses a non-reentrant model
 10285 ;;
 10286                           
 10287                           
 10288                           ;psect for function _modbus_response_command
 10289  0D5C                     _modbus_response_command:	
 10290                           
 10291                           ;incstack = 0
 10292                           ; Regs used in _modbus_response_command: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10293                           ;modbus_response_command@rbuf stored from wreg
 10294  0D5C  00B2               	movwf	modbus_response_command@rbuf
 10295                           
 10296                           ;modbus.c: 163: uint16_t tempData,tmpAddr;
 10297                           ;modbus.c: 164: uint8_t len=0;
 10298  0D5D  01B1               	clrf	modbus_response_command@len
 10299                           
 10300                           ;modbus.c: 165: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)rbuf;
 10301  0D5E  00B0               	movwf	modbus_response_command@pmdbs
 10302                           
 10303                           ;modbus.c: 166: if(pmdbs->addr!=sysData.id || pmdbs->addr==0)return;
 10304  0D5F  27CA  318D         	fcall	PL22	;call to abstracted procedure
 10305  0D61  0830               	movf	modbus_response_command@pmdbs,w
 10306  0D62  27D6  318D         	fcall	PL36	;call to abstracted procedure
 10307  0D64  1D03               	skipz
 10308  0D65  0008               	return
 10309  0D66  0830               	movf	modbus_response_command@pmdbs,w
 10310  0D67  0086               	movwf	6
 10311  0D68  3001               	movlw	1	; select bank2/3
 10312  0D69  0087               	movwf	7
 10313  0D6A  0801               	movf	1,w
 10314  0D6B  1903               	btfsc	3,2
 10315  0D6C  0008               	return
 10316                           
 10317                           ;modbus.c: 167: startAddr=pmdbs->addr_hi;
 10318  0D6D  0830               	movf	modbus_response_command@pmdbs,w
 10319  0D6E  3E02               	addlw	2
 10320  0D6F  0086               	movwf	6
 10321  0D70  0801               	movf	1,w
 10322  0D71  00AD               	movwf	modbus_response_command@startAddr
 10323  0D72  01AE               	clrf	modbus_response_command@startAddr+1
 10324                           
 10325                           ;modbus.c: 168: startAddr<<=8;
 10326  0D73  00AE               	movwf	modbus_response_command@startAddr+1
 10327  0D74  01AD               	clrf	modbus_response_command@startAddr
 10328                           
 10329                           ;modbus.c: 169: startAddr |= pmdbs->addr_lo;
 10330  0D75  0830               	movf	modbus_response_command@pmdbs,w
 10331  0D76  3E03               	addlw	3
 10332  0D77  0086               	movwf	6
 10333  0D78  0801               	movf	1,w
 10334  0D79  04AD               	iorwf	modbus_response_command@startAddr,f
 10335                           
 10336                           ;modbus.c: 170: tmpAddr=startAddr;
 10337  0D7A  082E               	movf	modbus_response_command@startAddr+1,w
 10338  0D7B  00AC               	movwf	modbus_response_command@tmpAddr+1
 10339  0D7C  082D               	movf	modbus_response_command@startAddr,w
 10340  0D7D  00AB               	movwf	modbus_response_command@tmpAddr
 10341                           
 10342                           ;modbus.c: 171: len = pmdbs->len_lo;
 10343  0D7E  0830               	movf	modbus_response_command@pmdbs,w
 10344  0D7F  0086               	movwf	6
 10345  0D80  3F45               	moviw [5]fsr1
 10346  0D81  00B1               	movwf	modbus_response_command@len
 10347  0D82  3021               	movlw	33
 10348                           
 10349                           ;modbus.c: 172: len<<=1;
 10350  0D83  35B1               	lslf	modbus_response_command@len,f
 10351                           
 10352                           ;modbus.c: 173: if(len>32)len=32;
 10353  0D84  0231               	subwf	modbus_response_command@len,w
 10354  0D85  1C03               	skipc
 10355  0D86  2D89               	goto	l4216
 10356  0D87  3020               	movlw	32
 10357  0D88  00B1               	movwf	modbus_response_command@len
 10358  0D89                     l4216:	
 10359                           
 10360                           ;modbus.c: 174: for(i=0;i<len;i=i+2,tmpAddr++){
 10361  0D89  01AF               	clrf	modbus_response_command@i
 10362  0D8A                     l4228:	
 10363  0D8A  0831               	movf	modbus_response_command@len,w
 10364  0D8B  022F               	subwf	modbus_response_command@i,w
 10365  0D8C  1803               	btfsc	3,0
 10366  0D8D  2DAD               	goto	l4230
 10367                           
 10368                           ;modbus.c: 175: getRegisterVal(tmpAddr,&tempData);
 10369  0D8E  082C               	movf	modbus_response_command@tmpAddr+1,w
 10370  0D8F  00F2               	movwf	getRegisterVal@addr+1
 10371  0D90  082B               	movf	modbus_response_command@tmpAddr,w
 10372  0D91  00F1               	movwf	getRegisterVal@addr
 10373  0D92  3033               	movlw	(low (modbus_response_command@tempData| 0))& (0+255)
 10374  0D93  00F3               	movwf	getRegisterVal@tempData
 10375  0D94  25CF  318D         	fcall	_getRegisterVal
 10376                           
 10377                           ;modbus.c: 176: rbuf[i+3] = tempData >> 8;
 10378  0D96  0020               	movlb	0	; select bank0
 10379  0D97  082F               	movf	modbus_response_command@i,w
 10380  0D98  0732               	addwf	modbus_response_command@rbuf,w
 10381  0D99  00FB               	movwf	??_modbus_response_command
 10382  0D9A  3E03               	addlw	3
 10383  0D9B  0086               	movwf	6
 10384  0D9C  3001               	movlw	1	; select bank2/3
 10385  0D9D  0087               	movwf	7
 10386  0D9E  0834               	movf	modbus_response_command@tempData+1,w
 10387  0D9F  0081               	movwf	1
 10388                           
 10389                           ;modbus.c: 177: rbuf[i+4] = tempData & 0xff;
 10390  0DA0  082F               	movf	modbus_response_command@i,w
 10391  0DA1  0732               	addwf	modbus_response_command@rbuf,w
 10392  0DA2  00FB               	movwf	??_modbus_response_command
 10393  0DA3  3E04               	addlw	4
 10394  0DA4  0086               	movwf	6
 10395  0DA5  0833               	movf	modbus_response_command@tempData,w
 10396  0DA6  0081               	movwf	1
 10397  0DA7  0AAF               	incf	modbus_response_command@i,f
 10398  0DA8  0AAF               	incf	modbus_response_command@i,f
 10399  0DA9  0AAB               	incf	modbus_response_command@tmpAddr,f
 10400  0DAA  1903               	skipnz
 10401  0DAB  0AAC               	incf	modbus_response_command@tmpAddr+1,f
 10402  0DAC  2D8A               	goto	l4228
 10403  0DAD                     l4230:	
 10404                           
 10405                           ;modbus.c: 179: }
 10406                           ;modbus.c: 180: rbuf[0] = sysData.id;
 10407  0DAD  0832               	movf	modbus_response_command@rbuf,w
 10408  0DAE  0086               	movwf	6
 10409  0DAF  3001               	movlw	1	; select bank2/3
 10410  0DB0  0087               	movwf	7
 10411  0DB1  27C2               	fcall	PL18	;call to abstracted procedure
 10412                           
 10413                           ;modbus.c: 181: rbuf[1] = 3;
 10414  0DB2  0A32               	incf	modbus_response_command@rbuf,w
 10415  0DB3  0086               	movwf	6
 10416  0DB4  3001               	movlw	1	; select bank2/3
 10417  0DB5  0087               	movwf	7
 10418  0DB6  3003               	movlw	3
 10419  0DB7  0081               	movwf	1
 10420                           
 10421                           ;modbus.c: 182: rbuf[2] = len;
 10422  0DB8  0832               	movf	modbus_response_command@rbuf,w
 10423  0DB9  3E02               	addlw	2
 10424  0DBA  0086               	movwf	6
 10425  0DBB  0831               	movf	modbus_response_command@len,w
 10426  0DBC  0081               	movwf	1
 10427                           
 10428                           ;modbus.c: 183: len += 3;
 10429  0DBD  3003               	movlw	3
 10430  0DBE  07B1               	addwf	modbus_response_command@len,f
 10431                           
 10432                           ;modbus.c: 184: crc_append(rbuf,len);
 10433  0DBF  0832               	movf	modbus_response_command@rbuf,w
 10434  0DC0  00A0               	movwf	crc_append@message
 10435  0DC1  3001               	movlw	1
 10436  0DC2  00A1               	movwf	crc_append@message+1
 10437  0DC3  0831               	movf	modbus_response_command@len,w
 10438  0DC4  00A2               	movwf	crc_append@n
 10439  0DC5  01A3               	clrf	crc_append@n+1
 10440  0DC6  3187  271B  318D   	fcall	_crc_append
 10441                           
 10442                           ;modbus.c: 185: len += 2;
 10443  0DC9  0AB1               	incf	modbus_response_command@len,f
 10444  0DCA  0AB1               	incf	modbus_response_command@len,f
 10445                           
 10446                           ;modbus.c: 186: uart_send_len(rbuf,len);
 10447  0DCB  0831               	movf	modbus_response_command@len,w
 10448  0DCC  00F1               	movwf	uart_send_len@len
 10449  0DCD  0832               	movf	modbus_response_command@rbuf,w
 10450  0DCE  2F52               	ljmp	_uart_send_len
 10451  0DCF                     __end_of_modbus_response_command:	
 10452  0DCF                     __ptext23:	
 10453 ;; *************** function _getRegisterVal *****************
 10454 ;; Defined at:
 10455 ;;		line 79 in file "src/api/modbus.c"
 10456 ;; Parameters:    Size  Location     Type
 10457 ;;  addr            2    1[COMMON] unsigned int 
 10458 ;;  tempData        1    3[COMMON] PTR unsigned int 
 10459 ;;		 -> modbus_response_command@tempData(2), 
 10460 ;; Auto vars:     Size  Location     Type
 10461 ;;  t16             2    0        unsigned int 
 10462 ;;  tempAddr        1   10[COMMON] unsigned char 
 10463 ;; Return value:  Size  Location     Type
 10464 ;;                  2    1[COMMON] unsigned int 
 10465 ;; Registers used:
 10466 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 10467 ;; Tracked objects:
 10468 ;;		On entry : 1F/0
 10469 ;;		On exit  : 1E/0
 10470 ;;		Unchanged: 0/0
 10471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10472 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10473 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10474 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10475 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10476 ;;Total ram usage:       10 bytes
 10477 ;; Hardware stack levels used:    1
 10478 ;; Hardware stack levels required when called:    1
 10479 ;; This function calls:
 10480 ;;		Nothing
 10481 ;; This function is called by:
 10482 ;;		_modbus_response_command
 10483 ;; This function uses a non-reentrant model
 10484 ;;
 10485                           
 10486                           
 10487                           ;psect for function _getRegisterVal
 10488  0DCF                     _getRegisterVal:	
 10489                           
 10490                           ;modbus.c: 82: uint8_t tempAddr;
 10491                           ;modbus.c: 84: tempAddr = addr & 0xff;
 10492                           
 10493                           ;incstack = 0
 10494                           ; Regs used in _getRegisterVal: [wreg-fsr1h+status,2+status,0]
 10495  0DCF  0871               	movf	getRegisterVal@addr,w
 10496  0DD0  00FA               	movwf	getRegisterVal@tempAddr
 10497                           
 10498                           ;modbus.c: 85: switch(tempAddr){
 10499  0DD1  2E5A               	goto	l2974
 10500  0DD2                     l2940:	
 10501  0DD2  0873               	movf	getRegisterVal@tempData,w
 10502  0DD3  0086               	movwf	6
 10503  0DD4  3055               	movlw	85
 10504  0DD5  0187               	clrf	7
 10505  0DD6  3FC0               	movwi [0]fsr1
 10506  0DD7  3FC1               	movwi [1]fsr1
 10507  0DD8  2E67               	goto	l2976
 10508  0DD9                     l2942:	
 10509  0DD9  27CA  318D         	fcall	PL22	;call to abstracted procedure
 10510  0DDB  0801               	movf	1,w
 10511  0DDC  00F4               	movwf	??_getRegisterVal
 10512  0DDD  01F5               	clrf	??_getRegisterVal+1
 10513  0DDE  0873               	movf	getRegisterVal@tempData,w
 10514  0DDF  0086               	movwf	6
 10515  0DE0  0187               	clrf	7
 10516  0DE1  0874               	movf	??_getRegisterVal,w
 10517  0DE2  3FC0               	movwi [0]fsr1
 10518  0DE3  0875               	movf	??_getRegisterVal+1,w
 10519  0DE4  3FC1               	movwi [1]fsr1
 10520  0DE5  2E67               	goto	l2976
 10521  0DE6                     l2944:	
 10522  0DE6  3084               	movlw	132
 10523  0DE7  0084               	movwf	4
 10524  0DE8  3023               	movlw	35
 10525  0DE9  0085               	movwf	5
 10526  0DEA  3101               	addfsr 0,1
 10527  0DEB  0800               	movf	0,w
 10528  0DEC  00F4               	movwf	??_getRegisterVal
 10529  0DED  3084               	movlw	132
 10530  0DEE  0084               	movwf	4
 10531  0DEF  3023               	movlw	35
 10532  0DF0  0085               	movwf	5
 10533  0DF1  0873               	movf	getRegisterVal@tempData,w
 10534  0DF2  0086               	movwf	6
 10535  0DF3  0187               	clrf	7
 10536  0DF4  0800               	movf	0,w
 10537  0DF5  3FC0               	movwi [0]fsr1
 10538  0DF6  0874               	movf	??_getRegisterVal,w
 10539  0DF7  3FC1               	movwi [1]fsr1
 10540  0DF8  2E67               	goto	l2976
 10541  0DF9                     l2946:	
 10542  0DF9  27F5  318D         	fcall	PL58	;call to abstracted procedure
 10543  0DFB  27BA  318D         	fcall	PL12	;call to abstracted procedure
 10544  0DFD  2E67               	goto	l2976
 10545  0DFE                     l2948:	
 10546  0DFE  27E3  318D         	fcall	PL48	;call to abstracted procedure
 10547  0E00  27BA  318D         	fcall	PL12	;call to abstracted procedure
 10548  0E02  2E67               	goto	l2976
 10549  0E03                     l2950:	
 10550  0E03  27E9  318D         	fcall	PL52	;call to abstracted procedure
 10551  0E05  27BA  318D         	fcall	PL12	;call to abstracted procedure
 10552  0E07  2E67               	goto	l2976
 10553  0E08                     l2952:	
 10554  0E08  0873               	movf	getRegisterVal@tempData,w
 10555  0E09  0086               	movwf	6
 10556  0E0A  0187               	clrf	7
 10557  0E0B  0854               	movf	_rtAdcValueRsLo,w
 10558  0E0C  3FC0               	movwi [0]fsr1
 10559  0E0D  0855               	movf	_rtAdcValueRsLo+1,w
 10560  0E0E  3FC1               	movwi [1]fsr1
 10561  0E0F  2E67               	goto	l2976
 10562  0E10                     l2954:	
 10563  0E10  0873               	movf	getRegisterVal@tempData,w
 10564  0E11  0086               	movwf	6
 10565  0E12  0187               	clrf	7
 10566  0E13  0852               	movf	_rtAdcValueRsHi,w
 10567  0E14  3FC0               	movwi [0]fsr1
 10568  0E15  0853               	movf	_rtAdcValueRsHi+1,w
 10569  0E16  3FC1               	movwi [1]fsr1
 10570  0E17  2E67               	goto	l2976
 10571  0E18                     l2956:	
 10572  0E18  0873               	movf	getRegisterVal@tempData,w
 10573  0E19  0086               	movwf	6
 10574  0E1A  0187               	clrf	7
 10575  0E1B  0850               	movf	_rtAdcValueRcLo,w
 10576  0E1C  3FC0               	movwi [0]fsr1
 10577  0E1D  0851               	movf	_rtAdcValueRcLo+1,w
 10578  0E1E  3FC1               	movwi [1]fsr1
 10579  0E1F  2E67               	goto	l2976
 10580  0E20                     l2958:	
 10581  0E20  0873               	movf	getRegisterVal@tempData,w
 10582  0E21  0086               	movwf	6
 10583  0E22  0187               	clrf	7
 10584  0E23  084E               	movf	_rtAdcValueRcHi,w
 10585  0E24  3FC0               	movwi [0]fsr1
 10586  0E25  084F               	movf	_rtAdcValueRcHi+1,w
 10587  0E26  3FC1               	movwi [1]fsr1
 10588  0E27  2E67               	goto	l2976
 10589  0E28                     l2960:	
 10590  0E28  0873               	movf	getRegisterVal@tempData,w
 10591  0E29  0086               	movwf	6
 10592  0E2A  0187               	clrf	7
 10593  0E2B  0021               	movlb	1	; select bank1
 10594  0E2C  0860               	movf	_resRc^(0+128),w
 10595  0E2D  3FC0               	movwi [0]fsr1
 10596  0E2E  0861               	movf	(_resRc+1)^(0+128),w
 10597  0E2F  3FC1               	movwi [1]fsr1
 10598  0E30  2E67               	goto	l2976
 10599  0E31                     l2962:	
 10600  0E31  0873               	movf	getRegisterVal@tempData,w
 10601  0E32  0086               	movwf	6
 10602  0E33  0187               	clrf	7
 10603  0E34  0021               	movlb	1	; select bank1
 10604  0E35  0864               	movf	_resRs^(0+128),w
 10605  0E36  3FC0               	movwi [0]fsr1
 10606  0E37  0865               	movf	(_resRs+1)^(0+128),w
 10607  0E38  3FC1               	movwi [1]fsr1
 10608  0E39  2E67               	goto	l2976
 10609  0E3A                     l2964:	
 10610  0E3A  0873               	movf	getRegisterVal@tempData,w
 10611  0E3B  0086               	movwf	6
 10612  0E3C  0187               	clrf	7
 10613  0E3D  0856               	movf	_rtAdcValueVoFb,w
 10614  0E3E  3FC0               	movwi [0]fsr1
 10615  0E3F  0857               	movf	_rtAdcValueVoFb+1,w
 10616  0E40  3FC1               	movwi [1]fsr1
 10617  0E41  2E67               	goto	l2976
 10618  0E42                     l2966:	
 10619  0E42  0873               	movf	getRegisterVal@tempData,w
 10620  0E43  0086               	movwf	6
 10621  0E44  0187               	clrf	7
 10622  0E45  085A               	movf	_voExpectMv,w
 10623  0E46  3FC0               	movwi [0]fsr1
 10624  0E47  085B               	movf	_voExpectMv+1,w
 10625  0E48  3FC1               	movwi [1]fsr1
 10626  0E49  2E67               	goto	l2976
 10627  0E4A                     l2968:	
 10628  0E4A  0873               	movf	getRegisterVal@tempData,w
 10629  0E4B  0086               	movwf	6
 10630  0E4C  0187               	clrf	7
 10631  0E4D  0858               	movf	_voExpectAdcValue,w
 10632  0E4E  3FC0               	movwi [0]fsr1
 10633  0E4F  0859               	movf	_voExpectAdcValue+1,w
 10634  0E50  3FC1               	movwi [1]fsr1
 10635  0E51  2E67               	goto	l2976
 10636  0E52                     l2970:	
 10637  0E52  0873               	movf	getRegisterVal@tempData,w
 10638  0E53  0086               	movwf	6
 10639  0E54  30AA               	movlw	170
 10640  0E55  0187               	clrf	7
 10641  0E56  3FC0               	movwi [0]fsr1
 10642  0E57  3055               	movlw	85
 10643  0E58  3FC1               	movwi [1]fsr1
 10644  0E59  2E67               	goto	l2976
 10645  0E5A                     l2974:	
 10646  0E5A  087A               	movf	getRegisterVal@tempAddr,w
 10647                           
 10648                           ; Switch size 1, requested type "space"
 10649                           ; Number of cases is 15, Range of values is 1 to 15
 10650                           ; switch strategies available:
 10651                           ; Name         Instructions Cycles
 10652                           ; direct_byte           39     9 (fixed)
 10653                           ; simple_byte           46    24 (average)
 10654                           ; jumptable            263     9 (fixed)
 10655                           ;	Chosen strategy is direct_byte
 10656  0E5B  3EFF               	addlw	-1
 10657  0E5C  1C03               	skipc
 10658  0E5D  2E52               	goto	l2970
 10659  0E5E  0084               	movwf	4
 10660  0E5F  300F               	movlw	15
 10661  0E60  0204               	subwf	4,w
 10662  0E61  1803               	skipnc
 10663  0E62  2E52               	goto	l2970
 10664  0E63  3190               	movlp	high S4674
 10665  0E64  3504               	lslf	4,w
 10666  0E65  3E00               	addlw	low S4674
 10667  0E66  0082               	movwf	2
 10668  0E67                     l2976:	
 10669                           
 10670                           ;modbus.c: 103: if(tempAddr>0x0f && tempAddr < 0x10+20*2){
 10671  0E67  3010               	movlw	16
 10672  0E68  027A               	subwf	getRegisterVal@tempAddr,w
 10673  0E69  1C03               	skipc
 10674  0E6A  0008               	return
 10675  0E6B  3038               	movlw	56
 10676  0E6C  027A               	subwf	getRegisterVal@tempAddr,w
 10677  0E6D  1803               	skipnc
 10678  0E6E  0008               	return
 10679                           
 10680                           ;modbus.c: 104: tempAddr-=0x10;
 10681  0E6F  3010               	movlw	16
 10682  0E70  02FA               	subwf	getRegisterVal@tempAddr,f
 10683                           
 10684                           ;modbus.c: 105: if(tempAddr & 0x01){
 10685  0E71  1C7A               	btfss	getRegisterVal@tempAddr,0
 10686  0E72  2E77               	goto	l2986
 10687                           
 10688                           ;modbus.c: 106: *tempData=sysData.calibVoMV[tempAddr>>1];
 10689  0E73  367A               	lsrf	getRegisterVal@tempAddr,w
 10690  0E74  00F4               	movwf	??_getRegisterVal
 10691  0E75  30B6               	movlw	182
 10692                           
 10693                           ;modbus.c: 107: }else{
 10694  0E76  2FA6               	ljmp	PL8	;call to abstracted procedure
 10695  0E77                     l2986:	
 10696                           
 10697                           ;modbus.c: 108: *tempData=sysData.calibRsAdc[tempAddr>>1];
 10698  0E77  367A               	lsrf	getRegisterVal@tempAddr,w
 10699  0E78  00F4               	movwf	??_getRegisterVal
 10700  0E79  308E               	movlw	142
 10701  0E7A  2FA6               	ljmp	PL8	;call to abstracted procedure
 10702  0E7B                     __end_of_getRegisterVal:	
 10703  0E7B                     __ptext15:	
 10704 ;; *************** function _modbus_response_write_single_register *****************
 10705 ;; Defined at:
 10706 ;;		line 114 in file "src/api/modbus.c"
 10707 ;; Parameters:    Size  Location     Type
 10708 ;;  rbuf            1    wreg     PTR unsigned char 
 10709 ;;		 -> modbusBuf(64), 
 10710 ;; Auto vars:     Size  Location     Type
 10711 ;;  rbuf            1   23[BANK0 ] PTR unsigned char 
 10712 ;;		 -> modbusBuf(64), 
 10713 ;;  startAddr       2   21[BANK0 ] unsigned int 
 10714 ;;  i               2   18[BANK0 ] unsigned int 
 10715 ;;  t16             2   16[BANK0 ] unsigned int 
 10716 ;;  pmdbs           1   20[BANK0 ] PTR struct .
 10717 ;;		 -> modbusBuf(64), 
 10718 ;;  fiSave          1   15[BANK0 ] unsigned char 
 10719 ;; Return value:  Size  Location     Type
 10720 ;;                  1    wreg      void 
 10721 ;; Registers used:
 10722 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10723 ;; Tracked objects:
 10724 ;;		On entry : 1F/0
 10725 ;;		On exit  : 1F/0
 10726 ;;		Unchanged: 0/0
 10727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10729 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10730 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10731 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10732 ;;Total ram usage:       13 bytes
 10733 ;; Hardware stack levels used:    1
 10734 ;; Hardware stack levels required when called:    4
 10735 ;; This function calls:
 10736 ;;		_crc_append
 10737 ;;		_sys_data_save
 10738 ;;		_uart_send_len
 10739 ;; This function is called by:
 10740 ;;		_modbus_response_process
 10741 ;; This function uses a non-reentrant model
 10742 ;;
 10743                           
 10744                           
 10745                           ;psect for function _modbus_response_write_single_register
 10746  0E7B                     _modbus_response_write_single_register:	
 10747                           
 10748                           ;incstack = 0
 10749                           ; Regs used in _modbus_response_write_single_register: [wreg-fsr1h+status,2+status,0+pcl
      +                          ath+cstack]
 10750                           ;modbus_response_write_single_register@rbuf stored from wreg
 10751  0E7B  00B7               	movwf	modbus_response_write_single_register@rbuf
 10752                           
 10753                           ;modbus.c: 117: uint16_t t16,i;
 10754                           ;modbus.c: 118: uint8_t fiSave=0;
 10755  0E7C  01AF               	clrf	modbus_response_write_single_register@fiSave
 10756                           
 10757                           ;modbus.c: 119: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)rbuf;
 10758  0E7D  00B4               	movwf	modbus_response_write_single_register@pmdbs
 10759                           
 10760                           ;modbus.c: 120: if(pmdbs->addr!=sysData.id && pmdbs->addr!=0)return;
 10761  0E7E  27CA  318D         	fcall	PL22	;call to abstracted procedure
 10762  0E80  0834               	movf	modbus_response_write_single_register@pmdbs,w
 10763  0E81  27D6  318D         	fcall	PL36	;call to abstracted procedure
 10764  0E83  1903               	skipnz
 10765  0E84  2E89               	goto	l4122
 10766  0E85  27D0  318D         	fcall	PL34	;call to abstracted procedure
 10767  0E87  1D03               	btfss	3,2
 10768  0E88  0008               	return
 10769  0E89                     l4122:	
 10770                           
 10771                           ;modbus.c: 121: if(sysData.id==253 && pmdbs->addr==0)return;
 10772  0E89  3084               	movlw	132
 10773  0E8A  0086               	movwf	6
 10774  0E8B  3023               	movlw	35
 10775  0E8C  0087               	movwf	7
 10776  0E8D  30FD               	movlw	253
 10777  0E8E  3142               	addfsr 1,2
 10778  0E8F  0601               	xorwf	1,w
 10779  0E90  1D03               	btfss	3,2
 10780  0E91  2E96               	goto	l4128
 10781  0E92  27D0  318D         	fcall	PL34	;call to abstracted procedure
 10782  0E94  1903               	btfsc	3,2
 10783  0E95  0008               	return
 10784  0E96                     l4128:	
 10785                           
 10786                           ;modbus.c: 122: startAddr=pmdbs->addr_hi;
 10787  0E96  0834               	movf	modbus_response_write_single_register@pmdbs,w
 10788  0E97  3E02               	addlw	2
 10789  0E98  0086               	movwf	6
 10790  0E99  3001               	movlw	1	; select bank2/3
 10791  0E9A  0087               	movwf	7
 10792  0E9B  0801               	movf	1,w
 10793  0E9C  00B5               	movwf	modbus_response_write_single_register@startAddr
 10794  0E9D  01B6               	clrf	modbus_response_write_single_register@startAddr+1
 10795                           
 10796                           ;modbus.c: 123: startAddr<<=8;
 10797  0E9E  00B6               	movwf	modbus_response_write_single_register@startAddr+1
 10798  0E9F  01B5               	clrf	modbus_response_write_single_register@startAddr
 10799                           
 10800                           ;modbus.c: 124: startAddr |= pmdbs->addr_lo;
 10801  0EA0  0834               	movf	modbus_response_write_single_register@pmdbs,w
 10802  0EA1  3E03               	addlw	3
 10803  0EA2  0086               	movwf	6
 10804  0EA3  0801               	movf	1,w
 10805  0EA4  04B5               	iorwf	modbus_response_write_single_register@startAddr,f
 10806  0EA5  3002               	movlw	2
 10807                           
 10808                           ;modbus.c: 125: startAddr = startAddr & 0xff;
 10809  0EA6  01B6               	clrf	modbus_response_write_single_register@startAddr+1
 10810                           
 10811                           ;modbus.c: 126: if(startAddr==0x02){
 10812  0EA7  0635               	xorwf	modbus_response_write_single_register@startAddr,w
 10813  0EA8  0436               	iorwf	modbus_response_write_single_register@startAddr+1,w
 10814  0EA9  1D03               	btfss	3,2
 10815  0EAA  2EB4               	goto	l4140
 10816                           
 10817                           ;modbus.c: 127: sysData.id=rbuf[5];
 10818  0EAB  0837               	movf	modbus_response_write_single_register@rbuf,w
 10819  0EAC  3E05               	addlw	5
 10820  0EAD  0086               	movwf	6
 10821  0EAE  0801               	movf	1,w
 10822  0EAF  00AB               	movwf	??_modbus_response_write_single_register
 10823  0EB0  3086               	movlw	134
 10824  0EB1  27EF  318D         	fcall	PL56	;call to abstracted procedure
 10825                           
 10826                           ;modbus.c: 129: }else if(startAddr==0x03){
 10827  0EB3  2F35               	goto	l4138
 10828  0EB4                     l4140:	
 10829  0EB4  3003               	movlw	3
 10830  0EB5  0635               	xorwf	modbus_response_write_single_register@startAddr,w
 10831  0EB6  0436               	iorwf	modbus_response_write_single_register@startAddr+1,w
 10832  0EB7  1D03               	btfss	3,2
 10833  0EB8  2EC9               	goto	l4148
 10834                           
 10835                           ;modbus.c: 130: sysData.pidSetFlg1=rbuf[4];
 10836  0EB9  27DC  318D         	fcall	PL44	;call to abstracted procedure
 10837  0EBB  00AB               	movwf	??_modbus_response_write_single_register
 10838  0EBC  3085               	movlw	133
 10839  0EBD  27EF  318D         	fcall	PL56	;call to abstracted procedure
 10840                           
 10841                           ;modbus.c: 131: sysData.pidSetFlg0=rbuf[5];
 10842  0EBF  3084               	movlw	132
 10843  0EC0  0086               	movwf	6
 10844  0EC1  0837               	movf	modbus_response_write_single_register@rbuf,w
 10845  0EC2  3E05               	addlw	5
 10846  0EC3  0084               	movwf	4
 10847  0EC4  3001               	movlw	1	; select bank2/3
 10848  0EC5  0085               	movwf	5
 10849  0EC6  0800               	movf	0,w
 10850  0EC7  3FC0               	movwi [0]fsr1
 10851  0EC8  2F35               	goto	l4138
 10852  0EC9                     l4148:	
 10853  0EC9  3000               	movlw	0
 10854  0ECA  0236               	subwf	modbus_response_write_single_register@startAddr+1,w
 10855  0ECB  3010               	movlw	16
 10856  0ECC  1903               	skipnz
 10857  0ECD  0235               	subwf	modbus_response_write_single_register@startAddr,w
 10858  0ECE  1C03               	skipc
 10859  0ECF  0008               	return
 10860  0ED0  3000               	movlw	0
 10861  0ED1  0236               	subwf	modbus_response_write_single_register@startAddr+1,w
 10862  0ED2  3038               	movlw	56
 10863  0ED3  1903               	skipnz
 10864  0ED4  0235               	subwf	modbus_response_write_single_register@startAddr,w
 10865  0ED5  1803               	skipnc
 10866  0ED6  0008               	return
 10867                           
 10868                           ;modbus.c: 134: startAddr-=0x10;
 10869  0ED7  3010               	movlw	16
 10870  0ED8  02B5               	subwf	modbus_response_write_single_register@startAddr,f
 10871  0ED9  3000               	movlw	0
 10872  0EDA  3BB6               	subwfb	modbus_response_write_single_register@startAddr+1,f
 10873                           
 10874                           ;modbus.c: 135: if(startAddr & 0x01){
 10875  0EDB  1C35               	btfss	modbus_response_write_single_register@startAddr,0
 10876  0EDC  2F37               	goto	l4180
 10877                           
 10878                           ;modbus.c: 136: t16=rbuf[4];
 10879  0EDD  27DC  318D         	fcall	PL44	;call to abstracted procedure
 10880  0EDF  00B0               	movwf	modbus_response_write_single_register@t16
 10881  0EE0  01B1               	clrf	modbus_response_write_single_register@t16+1
 10882                           
 10883                           ;modbus.c: 137: t16<<=8;
 10884  0EE1  00B1               	movwf	modbus_response_write_single_register@t16+1
 10885  0EE2  01B0               	clrf	modbus_response_write_single_register@t16
 10886                           
 10887                           ;modbus.c: 138: t16 |= rbuf[5];
 10888  0EE3  0837               	movf	modbus_response_write_single_register@rbuf,w
 10889  0EE4  3E05               	addlw	5
 10890  0EE5  0086               	movwf	6
 10891  0EE6  0801               	movf	1,w
 10892  0EE7  04B0               	iorwf	modbus_response_write_single_register@t16,f
 10893                           
 10894                           ;modbus.c: 139: sysData.calibVoMV[startAddr>>1]=t16;
 10895  0EE8  0836               	movf	modbus_response_write_single_register@startAddr+1,w
 10896  0EE9  00AC               	movwf	??_modbus_response_write_single_register+1
 10897  0EEA  0835               	movf	modbus_response_write_single_register@startAddr,w
 10898  0EEB  00AB               	movwf	??_modbus_response_write_single_register
 10899  0EEC  30B6               	movlw	182
 10900  0EED  36AC               	lsrf	??_modbus_response_write_single_register+1,f
 10901  0EEE  0CAB               	rrf	??_modbus_response_write_single_register,f
 10902  0EEF  279A  318D         	fcall	PL6	;call to abstracted procedure
 10903  0EF1  0830               	movf	modbus_response_write_single_register@t16,w
 10904  0EF2  3FC0               	movwi [0]fsr1
 10905  0EF3  0831               	movf	modbus_response_write_single_register@t16+1,w
 10906  0EF4  3FC1               	movwi [1]fsr1
 10907                           
 10908                           ;modbus.c: 140: sysData.calibRsAdc[startAddr>>1]=rsLoAvg;
 10909  0EF5  0836               	movf	modbus_response_write_single_register@startAddr+1,w
 10910  0EF6  00AC               	movwf	??_modbus_response_write_single_register+1
 10911  0EF7  0835               	movf	modbus_response_write_single_register@startAddr,w
 10912  0EF8  00AB               	movwf	??_modbus_response_write_single_register
 10913  0EF9  308E               	movlw	142
 10914  0EFA  36AC               	lsrf	??_modbus_response_write_single_register+1,f
 10915  0EFB  0CAB               	rrf	??_modbus_response_write_single_register,f
 10916  0EFC  279A  318D         	fcall	PL6	;call to abstracted procedure
 10917  0EFE  084C               	movf	_rsLoAvg,w
 10918  0EFF  3FC0               	movwi [0]fsr1
 10919  0F00  084D               	movf	_rsLoAvg+1,w
 10920  0F01  3FC1               	movwi [1]fsr1
 10921                           
 10922                           ;modbus.c: 142: if(rbuf[1]==0x26){
 10923  0F02  0A37               	incf	modbus_response_write_single_register@rbuf,w
 10924  0F03  0086               	movwf	6
 10925  0F04  3001               	movlw	1	; select bank2/3
 10926  0F05  0087               	movwf	7
 10927  0F06  3026               	movlw	38
 10928  0F07  0601               	xorwf	1,w
 10929  0F08  1D03               	btfss	3,2
 10930  0F09  2F35               	goto	l4138
 10931                           
 10932                           ;modbus.c: 143: for(i=(startAddr>>1)+1;i<20;i++){
 10933  0F0A  0836               	movf	modbus_response_write_single_register@startAddr+1,w
 10934  0F0B  00AC               	movwf	??_modbus_response_write_single_register+1
 10935  0F0C  0835               	movf	modbus_response_write_single_register@startAddr,w
 10936  0F0D  00AB               	movwf	??_modbus_response_write_single_register
 10937  0F0E  36AC               	lsrf	??_modbus_response_write_single_register+1,f
 10938  0F0F  0CAB               	rrf	??_modbus_response_write_single_register,f
 10939  0F10  082B               	movf	??_modbus_response_write_single_register,w
 10940  0F11  00B2               	movwf	modbus_response_write_single_register@i
 10941  0F12  082C               	movf	??_modbus_response_write_single_register+1,w
 10942  0F13  00B3               	movwf	modbus_response_write_single_register@i+1
 10943  0F14                     L7:	
 10944  0F14  0AB2               	incf	modbus_response_write_single_register@i,f
 10945  0F15  1903               	skipnz
 10946  0F16  0AB3               	incf	modbus_response_write_single_register@i+1,f
 10947  0F17  3000               	movlw	0
 10948  0F18  0233               	subwf	modbus_response_write_single_register@i+1,w
 10949  0F19  3014               	movlw	20
 10950  0F1A  1903               	skipnz
 10951  0F1B  0232               	subwf	modbus_response_write_single_register@i,w
 10952  0F1C  1803               	btfsc	3,0
 10953  0F1D  2F35               	goto	l4138
 10954                           
 10955                           ;modbus.c: 144: sysData.calibVoMV[i]=t16;
 10956  0F1E  0833               	movf	modbus_response_write_single_register@i+1,w
 10957  0F1F  00AC               	movwf	??_modbus_response_write_single_register+1
 10958  0F20  0832               	movf	modbus_response_write_single_register@i,w
 10959  0F21  00AB               	movwf	??_modbus_response_write_single_register
 10960  0F22  30B6               	movlw	182
 10961  0F23  279A  318D         	fcall	PL6	;call to abstracted procedure
 10962  0F25  0830               	movf	modbus_response_write_single_register@t16,w
 10963  0F26  3FC0               	movwi [0]fsr1
 10964  0F27  0831               	movf	modbus_response_write_single_register@t16+1,w
 10965  0F28  3FC1               	movwi [1]fsr1
 10966                           
 10967                           ;modbus.c: 145: sysData.calibRsAdc[i]=rsLoAvg;
 10968  0F29  0833               	movf	modbus_response_write_single_register@i+1,w
 10969  0F2A  00AC               	movwf	??_modbus_response_write_single_register+1
 10970  0F2B  0832               	movf	modbus_response_write_single_register@i,w
 10971  0F2C  00AB               	movwf	??_modbus_response_write_single_register
 10972  0F2D  308E               	movlw	142
 10973  0F2E  279A  318D         	fcall	PL6	;call to abstracted procedure
 10974  0F30  084C               	movf	_rsLoAvg,w
 10975  0F31  3FC0               	movwi [0]fsr1
 10976  0F32  084D               	movf	_rsLoAvg+1,w
 10977  0F33  3FC1               	movwi [1]fsr1
 10978  0F34  2F14               	goto	L7
 10979  0F35                     l4138:	
 10980                           
 10981                           ;modbus.c: 128: fiSave=1;
 10982  0F35  01AF               	clrf	modbus_response_write_single_register@fiSave
 10983  0F36  0AAF               	incf	modbus_response_write_single_register@fiSave,f
 10984  0F37                     l4180:	
 10985                           
 10986                           ;modbus.c: 153: }
 10987                           ;modbus.c: 154: if(fiSave)sys_data_save();
 10988  0F37  082F               	movf	modbus_response_write_single_register@fiSave,w
 10989  0F38  1903               	btfsc	3,2
 10990  0F39  2F3D               	goto	l4184
 10991  0F3A  3187  2710  318D   	fcall	_sys_data_save
 10992  0F3D                     l4184:	
 10993                           
 10994                           ;modbus.c: 155: if(pmdbs->addr==0)return;
 10995  0F3D  27D0  318D         	fcall	PL34	;call to abstracted procedure
 10996  0F3F  1903               	btfsc	3,2
 10997  0F40  0008               	return
 10998                           
 10999                           ;modbus.c: 156: rbuf[0]=sysData.id;
 11000  0F41  0837               	movf	modbus_response_write_single_register@rbuf,w
 11001  0F42  0086               	movwf	6
 11002  0F43  27C2               	fcall	PL18	;call to abstracted procedure
 11003                           
 11004                           ;modbus.c: 157: crc_append(rbuf,6);
 11005  0F44  0837               	movf	modbus_response_write_single_register@rbuf,w
 11006  0F45  00A0               	movwf	crc_append@message
 11007  0F46  3001               	movlw	1
 11008  0F47  00A1               	movwf	crc_append@message+1
 11009  0F48  3006               	movlw	6
 11010  0F49  00A2               	movwf	crc_append@n
 11011  0F4A  01A3               	clrf	crc_append@n+1
 11012  0F4B  3187  271B  318D   	fcall	_crc_append
 11013                           
 11014                           ;modbus.c: 158: uart_send_len(rbuf,8);
 11015  0F4E  3008               	movlw	8
 11016  0F4F  00F1               	movwf	uart_send_len@len
 11017  0F50  0837               	movf	modbus_response_write_single_register@rbuf,w
 11018  0F51  2F52               	ljmp	_uart_send_len
 11019  0F52                     __end_of_modbus_response_write_single_register:	
 11020  0F52                     __ptext22:	
 11021 ;; *************** function _uart_send_len *****************
 11022 ;; Defined at:
 11023 ;;		line 37 in file "src/api/my_uart.c"
 11024 ;; Parameters:    Size  Location     Type
 11025 ;;  buf             1    wreg     PTR unsigned char 
 11026 ;;		 -> modbusBuf(64), 
 11027 ;;  len             1    1[COMMON] unsigned char 
 11028 ;; Auto vars:     Size  Location     Type
 11029 ;;  buf             1    3[COMMON] PTR unsigned char 
 11030 ;;		 -> modbusBuf(64), 
 11031 ;;  i               1    4[COMMON] unsigned char 
 11032 ;; Return value:  Size  Location     Type
 11033 ;;                  1    wreg      void 
 11034 ;; Registers used:
 11035 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11036 ;; Tracked objects:
 11037 ;;		On entry : 1F/0
 11038 ;;		On exit  : 1F/0
 11039 ;;		Unchanged: 0/0
 11040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11041 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11042 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11043 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11044 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11045 ;;Total ram usage:        4 bytes
 11046 ;; Hardware stack levels used:    1
 11047 ;; Hardware stack levels required when called:    1
 11048 ;; This function calls:
 11049 ;;		Nothing
 11050 ;; This function is called by:
 11051 ;;		_modbus_response_illgeal_function
 11052 ;;		_modbus_response_write_single_register
 11053 ;;		_modbus_response_command
 11054 ;; This function uses a non-reentrant model
 11055 ;;
 11056                           
 11057                           
 11058                           ;psect for function _uart_send_len
 11059  0F52                     _uart_send_len:	
 11060                           
 11061                           ;incstack = 0
 11062                           ; Regs used in _uart_send_len: [wreg+fsr1l+fsr1h+status,2+status,0]
 11063                           ;uart_send_len@buf stored from wreg
 11064  0F52  00F3               	movwf	uart_send_len@buf
 11065                           
 11066                           ;my_uart.c: 39: uint8_t i;
 11067                           ;my_uart.c: 40: if(!TXSTAbits.TXEN)TXSTAbits.TXEN=1;
 11068  0F53  0023               	movlb	3	; select bank3
 11069  0F54  1E9E               	btfss	30,5	;volatile
 11070  0F55  169E               	bsf	30,5	;volatile
 11071  0F56                     l512:	
 11072  0F56  0020               	movlb	0	; select bank0
 11073  0F57  1E11               	btfss	17,4	;volatile
 11074  0F58  2F56               	goto	l512
 11075                           
 11076                           ;my_uart.c: 42: for(i=0;i<len;i++){
 11077  0F59  01F4               	clrf	uart_send_len@i
 11078  0F5A                     l2920:	
 11079  0F5A  0871               	movf	uart_send_len@len,w
 11080  0F5B  0274               	subwf	uart_send_len@i,w
 11081  0F5C  1803               	btfsc	3,0
 11082  0F5D  2F6C               	goto	l521
 11083  0F5E                     l517:	
 11084  0F5E  0020               	movlb	0	; select bank0
 11085  0F5F  1E11               	btfss	17,4	;volatile
 11086  0F60  2F5E               	goto	l517
 11087                           
 11088                           ;my_uart.c: 44: TXREG = buf[i];
 11089  0F61  0874               	movf	uart_send_len@i,w
 11090  0F62  0773               	addwf	uart_send_len@buf,w
 11091  0F63  00F2               	movwf	??_uart_send_len
 11092  0F64  0086               	movwf	6
 11093  0F65  3001               	movlw	1	; select bank2/3
 11094  0F66  0087               	movwf	7
 11095  0F67  0801               	movf	1,w
 11096  0F68  0023               	movlb	3	; select bank3
 11097  0F69  009A               	movwf	26	;volatile
 11098  0F6A  0AF4               	incf	uart_send_len@i,f
 11099  0F6B  2F5A               	goto	l2920
 11100  0F6C                     l521:	
 11101  0F6C  0020               	movlb	0	; select bank0
 11102  0F6D  1A11               	btfsc	17,4	;volatile
 11103  0F6E  0008               	return
 11104  0F6F  2F6C               	goto	l521
 11105  0F70                     __end_of_uart_send_len:	
 11106  0F70                     __ptext20:	
 11107 ;; *************** function _modbus_response_illgeal_function *****************
 11108 ;; Defined at:
 11109 ;;		line 7 in file "src/api/modbus.c"
 11110 ;; Parameters:    Size  Location     Type
 11111 ;;  buf             1    wreg     PTR unsigned char 
 11112 ;;		 -> modbusBuf(64), 
 11113 ;;  errcode         1   11[BANK0 ] unsigned char 
 11114 ;; Auto vars:     Size  Location     Type
 11115 ;;  buf             1   12[BANK0 ] PTR unsigned char 
 11116 ;;		 -> modbusBuf(64), 
 11117 ;;  pmdbs           1   13[BANK0 ] PTR struct .
 11118 ;;		 -> modbusBuf(64), 
 11119 ;; Return value:  Size  Location     Type
 11120 ;;                  1    wreg      void 
 11121 ;; Registers used:
 11122 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11123 ;; Tracked objects:
 11124 ;;		On entry : 1F/0
 11125 ;;		On exit  : 1F/0
 11126 ;;		Unchanged: 0/0
 11127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11128 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11129 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11131 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11132 ;;Total ram usage:        3 bytes
 11133 ;; Hardware stack levels used:    1
 11134 ;; Hardware stack levels required when called:    3
 11135 ;; This function calls:
 11136 ;;		_crc_append
 11137 ;;		_uart_send_len
 11138 ;; This function is called by:
 11139 ;;		_modbus_response_process
 11140 ;; This function uses a non-reentrant model
 11141 ;;
 11142                           
 11143                           
 11144                           ;psect for function _modbus_response_illgeal_function
 11145  0F70                     _modbus_response_illgeal_function:	
 11146                           
 11147                           ;incstack = 0
 11148                           ; Regs used in _modbus_response_illgeal_function: [wreg-fsr1h+status,2+status,0+pclath+c
      +                          stack]
 11149                           ;modbus_response_illgeal_function@buf stored from wreg
 11150  0F70  00AC               	movwf	modbus_response_illgeal_function@buf
 11151                           
 11152                           ;modbus.c: 9: st_modbusErrRespStructDef* pmdbs=(st_modbusErrRespStructDef*)buf;
 11153  0F71  00AD               	movwf	modbus_response_illgeal_function@pmdbs
 11154                           
 11155                           ;modbus.c: 10: if(pmdbs->addr==0x00)return;
 11156  0F72  0086               	movwf	6
 11157  0F73  3001               	movlw	1	; select bank2/3
 11158  0F74  0087               	movwf	7
 11159  0F75  0801               	movf	1,w
 11160  0F76  1903               	btfsc	3,2
 11161  0F77  0008               	return
 11162                           
 11163                           ;modbus.c: 11: pmdbs->addr=sysData.id;
 11164  0F78  082D               	movf	modbus_response_illgeal_function@pmdbs,w
 11165  0F79  0086               	movwf	6
 11166  0F7A  27C2  318D         	fcall	PL18	;call to abstracted procedure
 11167                           
 11168                           ;modbus.c: 12: if(errcode){
 11169  0F7C  082B               	movf	modbus_response_illgeal_function@errcode,w
 11170  0F7D  1903               	btfsc	3,2
 11171  0F7E  2F85               	goto	l826
 11172                           
 11173                           ;modbus.c: 13: pmdbs->func+=0x80;
 11174  0F7F  0A2D               	incf	modbus_response_illgeal_function@pmdbs,w
 11175  0F80  0086               	movwf	6
 11176  0F81  3001               	movlw	1	; select bank2/3
 11177  0F82  0087               	movwf	7
 11178  0F83  3080               	movlw	128
 11179  0F84  0781               	addwf	1,f
 11180  0F85                     l826:	
 11181                           
 11182                           ;modbus.c: 14: }
 11183                           ;modbus.c: 15: pmdbs->errcord=errcode;
 11184  0F85  082D               	movf	modbus_response_illgeal_function@pmdbs,w
 11185  0F86  3E02               	addlw	2
 11186  0F87  0086               	movwf	6
 11187  0F88  3001               	movlw	1	; select bank2/3
 11188  0F89  0087               	movwf	7
 11189  0F8A  082B               	movf	modbus_response_illgeal_function@errcode,w
 11190  0F8B  0081               	movwf	1
 11191                           
 11192                           ;modbus.c: 16: crc_append(buf,3);
 11193  0F8C  082C               	movf	modbus_response_illgeal_function@buf,w
 11194  0F8D  00A0               	movwf	crc_append@message
 11195  0F8E  3001               	movlw	1
 11196  0F8F  00A1               	movwf	crc_append@message+1
 11197  0F90  3003               	movlw	3
 11198  0F91  00A2               	movwf	crc_append@n
 11199  0F92  01A3               	clrf	crc_append@n+1
 11200  0F93  3187  271B  318D   	fcall	_crc_append
 11201                           
 11202                           ;modbus.c: 17: uart_send_len(buf,5);
 11203  0F96  3005               	movlw	5
 11204  0F97  00F1               	movwf	uart_send_len@len
 11205  0F98  082C               	movf	modbus_response_illgeal_function@buf,w
 11206  0F99  2F52               	ljmp	_uart_send_len
 11207  0F9A                     __end_of_modbus_response_illgeal_function:	
 11208  0F9A                     PL6:	
 11209  0F9A  35AB               	lslf	??_modbus_response_write_single_register,f
 11210  0F9B  0DAC               	rlf	??_modbus_response_write_single_register+1,f
 11211  0F9C  00AD               	movwf	??_modbus_response_write_single_register+2
 11212  0F9D  3023               	movlw	35
 11213  0F9E  00AE               	movwf	??_modbus_response_write_single_register+3
 11214  0F9F  082B               	movf	??_modbus_response_write_single_register,w
 11215  0FA0  072D               	addwf	??_modbus_response_write_single_register+2,w
 11216  0FA1  0086               	movwf	6
 11217  0FA2  082C               	movf	??_modbus_response_write_single_register+1,w
 11218  0FA3  3D2E               	addwfc	??_modbus_response_write_single_register+3,w
 11219  0FA4  0087               	movwf	7
 11220  0FA5  0008               	return
 11221  0FA6                     __end_ofPL6:	
 11222  0FA6                     PL8:	
 11223  0FA6  01F5               	clrf	??_getRegisterVal+1
 11224  0FA7  35F4               	lslf	??_getRegisterVal,f
 11225  0FA8  0DF5               	rlf	??_getRegisterVal+1,f
 11226  0FA9  00F6               	movwf	??_getRegisterVal+2
 11227  0FAA  3023               	movlw	35
 11228  0FAB  00F7               	movwf	??_getRegisterVal+3
 11229  0FAC  0874               	movf	??_getRegisterVal,w
 11230  0FAD  0776               	addwf	??_getRegisterVal+2,w
 11231  0FAE  0086               	movwf	6
 11232  0FAF  0875               	movf	??_getRegisterVal+1,w
 11233  0FB0  3D77               	addwfc	??_getRegisterVal+3,w
 11234  0FB1  0087               	movwf	7
 11235  0FB2  0873               	movf	getRegisterVal@tempData,w
 11236  0FB3  0084               	movwf	4
 11237  0FB4  0185               	clrf	5
 11238  0FB5  3F40               	moviw [0]fsr1
 11239  0FB6  3F80               	movwi [0]fsr0
 11240  0FB7  3F41               	moviw [1]fsr1
 11241  0FB8  3F81               	movwi [1]fsr0
 11242  0FB9  0008               	return
 11243  0FBA                     __end_ofPL8:	
 11244  0FBA                     PL12:	
 11245  0FBA  0873               	movf	getRegisterVal@tempData,w
 11246  0FBB  0084               	movwf	4
 11247  0FBC  0185               	clrf	5
 11248  0FBD  3F40               	moviw [0]fsr1
 11249  0FBE  3F80               	movwi [0]fsr0
 11250  0FBF  3F41               	moviw [1]fsr1
 11251  0FC0  3F81               	movwi [1]fsr0
 11252  0FC1  0008               	return
 11253  0FC2                     __end_ofPL12:	
 11254  0FC2                     PL18:	
 11255  0FC2  3084               	movlw	132
 11256  0FC3  0084               	movwf	4
 11257  0FC4  3023               	movlw	35
 11258  0FC5  0085               	movwf	5
 11259  0FC6  3102               	addfsr 0,2
 11260  0FC7  0800               	movf	0,w
 11261  0FC8  0081               	movwf	1
 11262  0FC9  0008               	return
 11263  0FCA                     __end_ofPL18:	
 11264  0FCA                     PL22:	
 11265  0FCA  3084               	movlw	132
 11266  0FCB  0086               	movwf	6
 11267  0FCC  3023               	movlw	35
 11268  0FCD  0087               	movwf	7
 11269  0FCE  3142               	addfsr 1,2
 11270  0FCF  0008               	return
 11271  0FD0                     __end_ofPL22:	
 11272  0FD0                     PL34:	
 11273  0FD0  0834               	movf	modbus_response_write_single_register@pmdbs,w
 11274  0FD1  0086               	movwf	6
 11275  0FD2  3001               	movlw	1	; select bank2/3
 11276  0FD3  0087               	movwf	7
 11277  0FD4  0801               	movf	1,w
 11278  0FD5  0008               	return
 11279  0FD6                     __end_ofPL34:	
 11280  0FD6                     PL36:	
 11281  0FD6  0084               	movwf	4
 11282  0FD7  3001               	movlw	1	; select bank2/3
 11283  0FD8  0085               	movwf	5
 11284  0FD9  0800               	movf	0,w
 11285  0FDA  0601               	xorwf	1,w
 11286  0FDB  0008               	return
 11287  0FDC                     __end_ofPL36:	
 11288  0FDC                     PL44:	
 11289  0FDC  0837               	movf	modbus_response_write_single_register@rbuf,w
 11290  0FDD  3E04               	addlw	4
 11291  0FDE  0086               	movwf	6
 11292  0FDF  3001               	movlw	1	; select bank2/3
 11293  0FE0  0087               	movwf	7
 11294  0FE1  0801               	movf	1,w
 11295  0FE2  0008               	return
 11296  0FE3                     __end_ofPL44:	
 11297  0FE3                     PL48:	
 11298  0FE3  3084               	movlw	132
 11299  0FE4  0086               	movwf	6
 11300  0FE5  3023               	movlw	35
 11301  0FE6  0087               	movwf	7
 11302  0FE7  3146               	addfsr 1,6
 11303  0FE8  0008               	return
 11304  0FE9                     __end_ofPL48:	
 11305  0FE9                     PL52:	
 11306  0FE9  3084               	movlw	132
 11307  0FEA  0086               	movwf	6
 11308  0FEB  3023               	movlw	35
 11309  0FEC  0087               	movwf	7
 11310  0FED  3148               	addfsr 1,8
 11311  0FEE  0008               	return
 11312  0FEF                     __end_ofPL52:	
 11313  0FEF                     PL56:	
 11314  0FEF  0086               	movwf	6
 11315  0FF0  3023               	movlw	35
 11316  0FF1  0087               	movwf	7
 11317  0FF2  082B               	movf	??_modbus_response_write_single_register,w
 11318  0FF3  0081               	movwf	1
 11319  0FF4  0008               	return
 11320  0FF5                     __end_ofPL56:	
 11321  0FF5                     PL58:	
 11322  0FF5  3084               	movlw	132
 11323  0FF6  0086               	movwf	6
 11324  0FF7  3023               	movlw	35
 11325  0FF8  0087               	movwf	7
 11326  0FF9  3144               	addfsr 1,4
 11327  0FFA  0008               	return
 11328  0FFB                     __end_ofPL58:	
 11329  0FFB                     PL60:	
 11330  0FFB  0086               	movwf	6
 11331  0FFC  3001               	movlw	1	; select bank2/3
 11332  0FFD  0087               	movwf	7
 11333  0FFE  0801               	movf	1,w
 11334  0FFF  0008               	return
 11335  1000                     __end_ofPL60:	
 11336                           
 11337                           	psect	swtext2
 11338  1000                     __pswtext2:	
 11339  1000                     S4674:	
 11340  1000  318D  2DD2         	ljmp	l2940
 11341  1002  318D  2DD9         	ljmp	l2942
 11342  1004  318D  2DE6         	ljmp	l2944
 11343  1006  318D  2DF9         	ljmp	l2946
 11344  1008  318D  2DFE         	ljmp	l2948
 11345  100A  318E  2E03         	ljmp	l2950
 11346  100C  318E  2E08         	ljmp	l2952
 11347  100E  318E  2E10         	ljmp	l2954
 11348  1010  318E  2E18         	ljmp	l2956
 11349  1012  318E  2E20         	ljmp	l2958
 11350  1014  318E  2E28         	ljmp	l2960
 11351  1016  318E  2E31         	ljmp	l2962
 11352  1018  318E  2E3A         	ljmp	l2964
 11353  101A  318E  2E42         	ljmp	l2966
 11354  101C  318E  2E4A         	ljmp	l2968
 11355                           
 11356                           	psect	text32
 11357  0A44                     __ptext32:	
 11358 ;; *************** function _calc_expect_vout_adc_value *****************
 11359 ;; Defined at:
 11360 ;;		line 418 in file "src/api/sample.c"
 11361 ;; Parameters:    Size  Location     Type
 11362 ;;  x               2   18[BANK0 ] unsigned int 
 11363 ;; Auto vars:     Size  Location     Type
 11364 ;;  t32             4   16[BANK4 ] long 
 11365 ;;  x0              4   12[BANK4 ] long 
 11366 ;;  y0              4    8[BANK4 ] long 
 11367 ;;  x1              4    4[BANK4 ] long 
 11368 ;;  y1              4    0[BANK4 ] long 
 11369 ;;  i               1   20[BANK4 ] unsigned char 
 11370 ;;  index           1    0        unsigned char 
 11371 ;; Return value:  Size  Location     Type
 11372 ;;                  2   18[BANK0 ] unsigned int 
 11373 ;; Registers used:
 11374 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11375 ;; Tracked objects:
 11376 ;;		On entry : 1F/0
 11377 ;;		On exit  : 1F/0
 11378 ;;		Unchanged: 0/0
 11379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11380 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11381 ;;      Locals:         0       0       0       0       0      21       0       0       0       0       0       0       
      +0       0
 11382 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11383 ;;      Totals:         0      14       0       0       0      21       0       0       0       0       0       0       
      +0       0
 11384 ;;Total ram usage:       35 bytes
 11385 ;; Hardware stack levels used:    1
 11386 ;; Hardware stack levels required when called:    2
 11387 ;; This function calls:
 11388 ;;		___aldiv
 11389 ;;		___lmul
 11390 ;; This function is called by:
 11391 ;;		_main
 11392 ;; This function uses a non-reentrant model
 11393 ;;
 11394                           
 11395                           
 11396                           ;psect for function _calc_expect_vout_adc_value
 11397  0A44                     _calc_expect_vout_adc_value:	
 11398                           
 11399                           ;sample.c: 421: int32_t y0,y1,x0,x1;
 11400                           ;sample.c: 422: uint8_t i;
 11401                           ;sample.c: 423: int32_t t32;
 11402                           ;sample.c: 424: for (i = 0; i < 20-1; i++) {
 11403                           
 11404                           ;incstack = 0
 11405                           ; Regs used in _calc_expect_vout_adc_value: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 11406  0A44  0024               	movlb	4	; select bank4
 11407  0A45  01B4               	clrf	calc_expect_vout_adc_value@i^(0+512)
 11408  0A46                     l4464:	
 11409                           
 11410                           ;sample.c: 425: if(sysData.calibRsAdc[i]<sysData.calibRsAdc[i+1]){
 11411  0A46  237C  318A         	fcall	PL4	;call to abstracted procedure
 11412  0A48  236B  318A         	fcall	PL2	;call to abstracted procedure
 11413  0A4A  0024               	movlb	4	; select bank4
 11414  0A4B  0834               	movf	calc_expect_vout_adc_value@i^(0+512),w
 11415  0A4C  0020               	movlb	0	; select bank0
 11416  0A4D  00BA               	movwf	??_calc_expect_vout_adc_value+6
 11417  0A4E  308E               	movlw	142
 11418  0A4F  01BB               	clrf	??_calc_expect_vout_adc_value+7
 11419  0A50  35BA               	lslf	??_calc_expect_vout_adc_value+6,f
 11420  0A51  0DBB               	rlf	??_calc_expect_vout_adc_value+7,f
 11421  0A52  00BC               	movwf	??_calc_expect_vout_adc_value+8
 11422  0A53  3023               	movlw	35
 11423  0A54  00BD               	movwf	??_calc_expect_vout_adc_value+9
 11424  0A55  083A               	movf	??_calc_expect_vout_adc_value+6,w
 11425  0A56  073C               	addwf	??_calc_expect_vout_adc_value+8,w
 11426  0A57  0086               	movwf	6
 11427  0A58  083B               	movf	??_calc_expect_vout_adc_value+7,w
 11428  0A59  3D3D               	addwfc	??_calc_expect_vout_adc_value+9,w
 11429  0A5A  0087               	movwf	7
 11430  0A5B  3F40               	moviw [0]fsr1
 11431  0A5C  00BE               	movwf	??_calc_expect_vout_adc_value+10
 11432  0A5D  3F41               	moviw [1]fsr1
 11433  0A5E  00BF               	movwf	??_calc_expect_vout_adc_value+11
 11434  0A5F  0839               	movf	??_calc_expect_vout_adc_value+5,w
 11435  0A60  023F               	subwf	??_calc_expect_vout_adc_value+11,w
 11436  0A61  1D03               	skipz
 11437  0A62  2A65               	goto	u3175
 11438  0A63  0838               	movf	??_calc_expect_vout_adc_value+4,w
 11439  0A64  023E               	subwf	??_calc_expect_vout_adc_value+10,w
 11440  0A65                     u3175:	
 11441  0A65  1803               	skipnc
 11442  0A66  2A73               	goto	l4470
 11443                           
 11444                           ;sample.c: 426: if (x <= sysData.calibRsAdc[i+1])break;
 11445  0A67  0024               	movlb	4	; select bank4
 11446  0A68  237C  318A         	fcall	PL4	;call to abstracted procedure
 11447  0A6A  236B  318A         	fcall	PL2	;call to abstracted procedure
 11448  0A6C  0833               	movf	calc_expect_vout_adc_value@x+1,w
 11449  0A6D  0239               	subwf	??_calc_expect_vout_adc_value+5,w
 11450  0A6E  1D03               	skipz
 11451  0A6F  2A7D               	goto	u3195
 11452  0A70  0832               	movf	calc_expect_vout_adc_value@x,w
 11453  0A71  0238               	subwf	??_calc_expect_vout_adc_value+4,w
 11454  0A72  2A7D               	goto	u3195
 11455  0A73                     l4470:	
 11456                           
 11457                           ;sample.c: 428: if (x >= sysData.calibRsAdc[i+1])break;
 11458  0A73  0024               	movlb	4	; select bank4
 11459  0A74  237C  318A         	fcall	PL4	;call to abstracted procedure
 11460  0A76  236B  318A         	fcall	PL2	;call to abstracted procedure
 11461  0A78  0233               	subwf	calc_expect_vout_adc_value@x+1,w
 11462  0A79  1D03               	skipz
 11463  0A7A  2A7D               	goto	u3195
 11464  0A7B  0838               	movf	??_calc_expect_vout_adc_value+4,w
 11465  0A7C  0232               	subwf	calc_expect_vout_adc_value@x,w
 11466  0A7D                     u3195:	
 11467  0A7D  1803               	btfsc	3,0
 11468  0A7E  2A85               	goto	l4478
 11469  0A7F  0024               	movlb	4	; select bank4
 11470  0A80  3013               	movlw	19
 11471  0A81  0AB4               	incf	calc_expect_vout_adc_value@i^(0+512),f
 11472  0A82  0234               	subwf	calc_expect_vout_adc_value@i^(0+512),w
 11473  0A83  1C03               	skipc
 11474  0A84  2A46               	goto	l4464
 11475  0A85                     l4478:	
 11476                           
 11477                           ;sample.c: 429: }
 11478                           ;sample.c: 430: }
 11479                           ;sample.c: 432: if (i > 20-2)i=20-2;
 11480  0A85  3013               	movlw	19
 11481  0A86  0024               	movlb	4	; select bank4
 11482  0A87  0234               	subwf	calc_expect_vout_adc_value@i^(0+512),w
 11483  0A88  1C03               	skipc
 11484  0A89  2A8C               	goto	l4482
 11485  0A8A  3012               	movlw	18
 11486  0A8B  00B4               	movwf	calc_expect_vout_adc_value@i^(0+512)
 11487  0A8C                     l4482:	
 11488                           
 11489                           ;sample.c: 433: y1=sysData.calibVoMV[i+1];
 11490  0A8C  0834               	movf	calc_expect_vout_adc_value@i^(0+512),w
 11491  0A8D  0020               	movlb	0	; select bank0
 11492  0A8E  00B4               	movwf	??_calc_expect_vout_adc_value
 11493  0A8F  30B8               	movlw	184
 11494  0A90  236B  318A         	fcall	PL2	;call to abstracted procedure
 11495  0A92  0838               	movf	??_calc_expect_vout_adc_value+4,w
 11496  0A93  0024               	movlb	4	; select bank4
 11497  0A94  00A0               	movwf	calc_expect_vout_adc_value@y1^(0+512)
 11498  0A95  0020               	movlb	0	; select bank0
 11499  0A96  0839               	movf	??_calc_expect_vout_adc_value+5,w
 11500  0A97  0024               	movlb	4	; select bank4
 11501  0A98  00A1               	movwf	(calc_expect_vout_adc_value@y1^(0+512)+1)
 11502  0A99  01A2               	clrf	(calc_expect_vout_adc_value@y1^(0+512)+2)
 11503  0A9A  01A3               	clrf	(calc_expect_vout_adc_value@y1^(0+512)+3)
 11504                           
 11505                           ;sample.c: 434: y0=sysData.calibVoMV[i];
 11506  0A9B  0834               	movf	calc_expect_vout_adc_value@i^(0+512),w
 11507  0A9C  0020               	movlb	0	; select bank0
 11508  0A9D  00B4               	movwf	??_calc_expect_vout_adc_value
 11509  0A9E  30B6               	movlw	182
 11510  0A9F  236B  318A         	fcall	PL2	;call to abstracted procedure
 11511  0AA1  0838               	movf	??_calc_expect_vout_adc_value+4,w
 11512  0AA2  0024               	movlb	4	; select bank4
 11513  0AA3  00A8               	movwf	calc_expect_vout_adc_value@y0^(0+512)
 11514  0AA4  0020               	movlb	0	; select bank0
 11515  0AA5  0839               	movf	??_calc_expect_vout_adc_value+5,w
 11516  0AA6  0024               	movlb	4	; select bank4
 11517  0AA7  00A9               	movwf	(calc_expect_vout_adc_value@y0^(0+512)+1)
 11518  0AA8  01AA               	clrf	(calc_expect_vout_adc_value@y0^(0+512)+2)
 11519  0AA9  01AB               	clrf	(calc_expect_vout_adc_value@y0^(0+512)+3)
 11520                           
 11521                           ;sample.c: 437: x1=sysData.calibRsAdc[i+1];
 11522  0AAA  237C  318A         	fcall	PL4	;call to abstracted procedure
 11523  0AAC  236B  318A         	fcall	PL2	;call to abstracted procedure
 11524  0AAE  0838               	movf	??_calc_expect_vout_adc_value+4,w
 11525  0AAF  0024               	movlb	4	; select bank4
 11526  0AB0  00A4               	movwf	calc_expect_vout_adc_value@x1^(0+512)
 11527  0AB1  0020               	movlb	0	; select bank0
 11528  0AB2  0839               	movf	??_calc_expect_vout_adc_value+5,w
 11529  0AB3  0024               	movlb	4	; select bank4
 11530  0AB4  00A5               	movwf	(calc_expect_vout_adc_value@x1^(0+512)+1)
 11531  0AB5  01A6               	clrf	(calc_expect_vout_adc_value@x1^(0+512)+2)
 11532  0AB6  01A7               	clrf	(calc_expect_vout_adc_value@x1^(0+512)+3)
 11533                           
 11534                           ;sample.c: 438: x0=sysData.calibRsAdc[i];
 11535  0AB7  0834               	movf	calc_expect_vout_adc_value@i^(0+512),w
 11536  0AB8  0020               	movlb	0	; select bank0
 11537  0AB9  00B4               	movwf	??_calc_expect_vout_adc_value
 11538  0ABA  308E               	movlw	142
 11539  0ABB  236B  318A         	fcall	PL2	;call to abstracted procedure
 11540  0ABD  0838               	movf	??_calc_expect_vout_adc_value+4,w
 11541  0ABE  0024               	movlb	4	; select bank4
 11542  0ABF  00AC               	movwf	calc_expect_vout_adc_value@x0^(0+512)
 11543  0AC0  0020               	movlb	0	; select bank0
 11544  0AC1  0839               	movf	??_calc_expect_vout_adc_value+5,w
 11545  0AC2  0024               	movlb	4	; select bank4
 11546  0AC3  00AD               	movwf	(calc_expect_vout_adc_value@x0^(0+512)+1)
 11547  0AC4  01AE               	clrf	(calc_expect_vout_adc_value@x0^(0+512)+2)
 11548  0AC5  01AF               	clrf	(calc_expect_vout_adc_value@x0^(0+512)+3)
 11549                           
 11550                           ;sample.c: 441: if(x1==x0)return y0;
 11551  0AC6  082F               	movf	(calc_expect_vout_adc_value@x0+3)^(0+512),w
 11552  0AC7  0627               	xorwf	(calc_expect_vout_adc_value@x1+3)^(0+512),w
 11553  0AC8  1D03               	skipz
 11554  0AC9  2AD4               	goto	u3225
 11555  0ACA  082E               	movf	(calc_expect_vout_adc_value@x0+2)^(0+512),w
 11556  0ACB  0626               	xorwf	(calc_expect_vout_adc_value@x1+2)^(0+512),w
 11557  0ACC  1D03               	skipz
 11558  0ACD  2AD4               	goto	u3225
 11559  0ACE  082D               	movf	(calc_expect_vout_adc_value@x0+1)^(0+512),w
 11560  0ACF  0625               	xorwf	(calc_expect_vout_adc_value@x1+1)^(0+512),w
 11561  0AD0  1D03               	skipz
 11562  0AD1  2AD4               	goto	u3225
 11563  0AD2  082C               	movf	calc_expect_vout_adc_value@x0^(0+512),w
 11564  0AD3  0624               	xorwf	calc_expect_vout_adc_value@x1^(0+512),w
 11565  0AD4                     u3225:	
 11566  0AD4  1D03               	skipz
 11567  0AD5  2ADE               	goto	l4494
 11568  0AD6  0829               	movf	(calc_expect_vout_adc_value@y0+1)^(0+512),w
 11569  0AD7  0020               	movlb	0	; select bank0
 11570  0AD8  00B3               	movwf	?_calc_expect_vout_adc_value+1
 11571  0AD9  0024               	movlb	4	; select bank4
 11572  0ADA  0828               	movf	calc_expect_vout_adc_value@y0^(0+512),w
 11573  0ADB  0020               	movlb	0	; select bank0
 11574  0ADC  00B2               	movwf	?_calc_expect_vout_adc_value
 11575  0ADD  0008               	return
 11576  0ADE                     l4494:	
 11577                           
 11578                           ;sample.c: 444: t32=(x-x0);
 11579  0ADE  0020               	movlb	0	; select bank0
 11580  0ADF  0832               	movf	calc_expect_vout_adc_value@x,w
 11581  0AE0  0024               	movlb	4	; select bank4
 11582  0AE1  00B0               	movwf	calc_expect_vout_adc_value@t32^(0+512)
 11583  0AE2  0020               	movlb	0	; select bank0
 11584  0AE3  0833               	movf	calc_expect_vout_adc_value@x+1,w
 11585  0AE4  0024               	movlb	4	; select bank4
 11586  0AE5  00B1               	movwf	(calc_expect_vout_adc_value@t32^(0+512)+1)
 11587  0AE6  01B2               	clrf	(calc_expect_vout_adc_value@t32^(0+512)+2)
 11588  0AE7  01B3               	clrf	(calc_expect_vout_adc_value@t32^(0+512)+3)
 11589  0AE8  082C               	movf	calc_expect_vout_adc_value@x0^(0+512),w
 11590  0AE9  02B0               	subwf	calc_expect_vout_adc_value@t32^(0+512),f
 11591  0AEA  082D               	movf	(calc_expect_vout_adc_value@x0+1)^(0+512),w
 11592  0AEB  3BB1               	subwfb	(calc_expect_vout_adc_value@t32+1)^(0+512),f
 11593  0AEC  082E               	movf	(calc_expect_vout_adc_value@x0+2)^(0+512),w
 11594  0AED  3BB2               	subwfb	(calc_expect_vout_adc_value@t32+2)^(0+512),f
 11595  0AEE  082F               	movf	(calc_expect_vout_adc_value@x0+3)^(0+512),w
 11596  0AEF  3BB3               	subwfb	(calc_expect_vout_adc_value@t32+3)^(0+512),f
 11597                           
 11598                           ;sample.c: 445: t32=t32*(y1-y0);
 11599  0AF0  0823               	movf	(calc_expect_vout_adc_value@y1+3)^(0+512),w
 11600  0AF1  00F4               	movwf	___lmul@multiplier+3
 11601  0AF2  0822               	movf	(calc_expect_vout_adc_value@y1+2)^(0+512),w
 11602  0AF3  00F3               	movwf	___lmul@multiplier+2
 11603  0AF4  0821               	movf	(calc_expect_vout_adc_value@y1+1)^(0+512),w
 11604  0AF5  00F2               	movwf	___lmul@multiplier+1
 11605  0AF6  0820               	movf	calc_expect_vout_adc_value@y1^(0+512),w
 11606  0AF7  00F1               	movwf	___lmul@multiplier
 11607  0AF8  0828               	movf	calc_expect_vout_adc_value@y0^(0+512),w
 11608  0AF9  02F1               	subwf	___lmul@multiplier,f
 11609  0AFA  0829               	movf	(calc_expect_vout_adc_value@y0+1)^(0+512),w
 11610  0AFB  3BF2               	subwfb	___lmul@multiplier+1,f
 11611  0AFC  082A               	movf	(calc_expect_vout_adc_value@y0+2)^(0+512),w
 11612  0AFD  3BF3               	subwfb	___lmul@multiplier+2,f
 11613  0AFE  082B               	movf	(calc_expect_vout_adc_value@y0+3)^(0+512),w
 11614  0AFF  3BF4               	subwfb	___lmul@multiplier+3,f
 11615  0B00  0833               	movf	(calc_expect_vout_adc_value@t32+3)^(0+512),w
 11616  0B01  00F8               	movwf	___lmul@multiplicand+3
 11617  0B02  0832               	movf	(calc_expect_vout_adc_value@t32+2)^(0+512),w
 11618  0B03  00F7               	movwf	___lmul@multiplicand+2
 11619  0B04  0831               	movf	(calc_expect_vout_adc_value@t32+1)^(0+512),w
 11620  0B05  00F6               	movwf	___lmul@multiplicand+1
 11621  0B06  0830               	movf	calc_expect_vout_adc_value@t32^(0+512),w
 11622  0B07  00F5               	movwf	___lmul@multiplicand
 11623  0B08  3186  2602  318A   	fcall	___lmul
 11624  0B0B  0874               	movf	?___lmul+3,w
 11625  0B0C  0024               	movlb	4	; select bank4
 11626  0B0D  00B3               	movwf	(calc_expect_vout_adc_value@t32+3)^(0+512)
 11627  0B0E  0873               	movf	?___lmul+2,w
 11628  0B0F  00B2               	movwf	(calc_expect_vout_adc_value@t32+2)^(0+512)
 11629  0B10  0872               	movf	?___lmul+1,w
 11630  0B11  00B1               	movwf	(calc_expect_vout_adc_value@t32+1)^(0+512)
 11631  0B12  0871               	movf	?___lmul,w
 11632  0B13  00B0               	movwf	calc_expect_vout_adc_value@t32^(0+512)
 11633                           
 11634                           ;sample.c: 446: t32=t32/(x1-x0);
 11635  0B14  0827               	movf	(calc_expect_vout_adc_value@x1+3)^(0+512),w
 11636  0B15  0020               	movlb	0	; select bank0
 11637  0B16  00A7               	movwf	___aldiv@divisor+3
 11638  0B17  0024               	movlb	4	; select bank4
 11639  0B18  0826               	movf	(calc_expect_vout_adc_value@x1+2)^(0+512),w
 11640  0B19  0020               	movlb	0	; select bank0
 11641  0B1A  00A6               	movwf	___aldiv@divisor+2
 11642  0B1B  0024               	movlb	4	; select bank4
 11643  0B1C  0825               	movf	(calc_expect_vout_adc_value@x1+1)^(0+512),w
 11644  0B1D  0020               	movlb	0	; select bank0
 11645  0B1E  00A5               	movwf	___aldiv@divisor+1
 11646  0B1F  0024               	movlb	4	; select bank4
 11647  0B20  0824               	movf	calc_expect_vout_adc_value@x1^(0+512),w
 11648  0B21  0020               	movlb	0	; select bank0
 11649  0B22  00A4               	movwf	___aldiv@divisor
 11650  0B23  0024               	movlb	4	; select bank4
 11651  0B24  082C               	movf	calc_expect_vout_adc_value@x0^(0+512),w
 11652  0B25  0020               	movlb	0	; select bank0
 11653  0B26  02A4               	subwf	___aldiv@divisor,f
 11654  0B27  0024               	movlb	4	; select bank4
 11655  0B28  082D               	movf	(calc_expect_vout_adc_value@x0+1)^(0+512),w
 11656  0B29  0020               	movlb	0	; select bank0
 11657  0B2A  3BA5               	subwfb	___aldiv@divisor+1,f
 11658  0B2B  0024               	movlb	4	; select bank4
 11659  0B2C  082E               	movf	(calc_expect_vout_adc_value@x0+2)^(0+512),w
 11660  0B2D  0020               	movlb	0	; select bank0
 11661  0B2E  3BA6               	subwfb	___aldiv@divisor+2,f
 11662  0B2F  0024               	movlb	4	; select bank4
 11663  0B30  082F               	movf	(calc_expect_vout_adc_value@x0+3)^(0+512),w
 11664  0B31  0020               	movlb	0	; select bank0
 11665  0B32  3BA7               	subwfb	___aldiv@divisor+3,f
 11666  0B33  0024               	movlb	4	; select bank4
 11667  0B34  0833               	movf	(calc_expect_vout_adc_value@t32+3)^(0+512),w
 11668  0B35  0020               	movlb	0	; select bank0
 11669  0B36  00AB               	movwf	___aldiv@dividend+3
 11670  0B37  0024               	movlb	4	; select bank4
 11671  0B38  0832               	movf	(calc_expect_vout_adc_value@t32+2)^(0+512),w
 11672  0B39  0020               	movlb	0	; select bank0
 11673  0B3A  00AA               	movwf	___aldiv@dividend+2
 11674  0B3B  0024               	movlb	4	; select bank4
 11675  0B3C  0831               	movf	(calc_expect_vout_adc_value@t32+1)^(0+512),w
 11676  0B3D  0020               	movlb	0	; select bank0
 11677  0B3E  00A9               	movwf	___aldiv@dividend+1
 11678  0B3F  0024               	movlb	4	; select bank4
 11679  0B40  0830               	movf	calc_expect_vout_adc_value@t32^(0+512),w
 11680  0B41  0020               	movlb	0	; select bank0
 11681  0B42  00A8               	movwf	___aldiv@dividend
 11682  0B43  3185  2596  318A   	fcall	___aldiv
 11683  0B46  0827               	movf	?___aldiv+3,w
 11684  0B47  0024               	movlb	4	; select bank4
 11685  0B48  00B3               	movwf	(calc_expect_vout_adc_value@t32+3)^(0+512)
 11686  0B49  0020               	movlb	0	; select bank0
 11687  0B4A  0826               	movf	?___aldiv+2,w
 11688  0B4B  0024               	movlb	4	; select bank4
 11689  0B4C  00B2               	movwf	(calc_expect_vout_adc_value@t32+2)^(0+512)
 11690  0B4D  0020               	movlb	0	; select bank0
 11691  0B4E  0825               	movf	?___aldiv+1,w
 11692  0B4F  0024               	movlb	4	; select bank4
 11693  0B50  00B1               	movwf	(calc_expect_vout_adc_value@t32+1)^(0+512)
 11694  0B51  0020               	movlb	0	; select bank0
 11695  0B52  0824               	movf	?___aldiv,w
 11696  0B53  0024               	movlb	4	; select bank4
 11697  0B54  00B0               	movwf	calc_expect_vout_adc_value@t32^(0+512)
 11698                           
 11699                           ;sample.c: 447: t32=t32+y0;
 11700  0B55  0828               	movf	calc_expect_vout_adc_value@y0^(0+512),w
 11701  0B56  07B0               	addwf	calc_expect_vout_adc_value@t32^(0+512),f
 11702  0B57  0829               	movf	(calc_expect_vout_adc_value@y0+1)^(0+512),w
 11703  0B58  3DB1               	addwfc	(calc_expect_vout_adc_value@t32+1)^(0+512),f
 11704  0B59  082A               	movf	(calc_expect_vout_adc_value@y0+2)^(0+512),w
 11705  0B5A  3DB2               	addwfc	(calc_expect_vout_adc_value@t32+2)^(0+512),f
 11706  0B5B  082B               	movf	(calc_expect_vout_adc_value@y0+3)^(0+512),w
 11707  0B5C  3DB3               	addwfc	(calc_expect_vout_adc_value@t32+3)^(0+512),f
 11708                           
 11709                           ;sample.c: 448: if(t32<0)t32=0;
 11710  0B5D  1FB3               	btfss	(calc_expect_vout_adc_value@t32+3)^(0+512),7
 11711  0B5E  2B63               	goto	l4504
 11712  0B5F  01B0               	clrf	calc_expect_vout_adc_value@t32^(0+512)
 11713  0B60  01B1               	clrf	(calc_expect_vout_adc_value@t32+1)^(0+512)
 11714  0B61  01B2               	clrf	(calc_expect_vout_adc_value@t32+2)^(0+512)
 11715  0B62  01B3               	clrf	(calc_expect_vout_adc_value@t32+3)^(0+512)
 11716  0B63                     l4504:	
 11717                           
 11718                           ;sample.c: 449: return (uint16_t)t32;
 11719  0B63  0831               	movf	(calc_expect_vout_adc_value@t32+1)^(0+512),w
 11720  0B64  0020               	movlb	0	; select bank0
 11721  0B65  00B3               	movwf	?_calc_expect_vout_adc_value+1
 11722  0B66  0024               	movlb	4	; select bank4
 11723  0B67  0830               	movf	calc_expect_vout_adc_value@t32^(0+512),w
 11724  0B68  0020               	movlb	0	; select bank0
 11725  0B69  00B2               	movwf	?_calc_expect_vout_adc_value
 11726  0B6A  0008               	return
 11727  0B6B                     __end_of_calc_expect_vout_adc_value:	
 11728  0B6B                     PL2:	
 11729  0B6B  01B5               	clrf	??_calc_expect_vout_adc_value+1
 11730  0B6C  35B4               	lslf	??_calc_expect_vout_adc_value,f
 11731  0B6D  0DB5               	rlf	??_calc_expect_vout_adc_value+1,f
 11732  0B6E  00B6               	movwf	??_calc_expect_vout_adc_value+2
 11733  0B6F  3023               	movlw	35
 11734  0B70  00B7               	movwf	??_calc_expect_vout_adc_value+3
 11735  0B71  0834               	movf	??_calc_expect_vout_adc_value,w
 11736  0B72  0736               	addwf	??_calc_expect_vout_adc_value+2,w
 11737  0B73  0086               	movwf	6
 11738  0B74  0835               	movf	??_calc_expect_vout_adc_value+1,w
 11739  0B75  3D37               	addwfc	??_calc_expect_vout_adc_value+3,w
 11740  0B76  0087               	movwf	7
 11741  0B77  3F40               	moviw [0]fsr1
 11742  0B78  00B8               	movwf	??_calc_expect_vout_adc_value+4
 11743  0B79  3F41               	moviw [1]fsr1
 11744  0B7A  00B9               	movwf	??_calc_expect_vout_adc_value+5
 11745  0B7B  0008               	return
 11746  0B7C                     __end_ofPL2:	
 11747  0B7C                     PL4:	
 11748  0B7C  0834               	movf	calc_expect_vout_adc_value@i^(0+512),w
 11749  0B7D  0020               	movlb	0	; select bank0
 11750  0B7E  00B4               	movwf	??_calc_expect_vout_adc_value
 11751  0B7F  3490               	retlw	144
 11752  0B80                     __end_ofPL4:	
 11753                           
 11754                           	psect	text40
 11755  17ED                     __ptext40:	
 11756 ;; *************** function _TMR2_Initialize *****************
 11757 ;; Defined at:
 11758 ;;		line 63 in file "mcc_generated_files/tmr2.c"
 11759 ;; Parameters:    Size  Location     Type
 11760 ;;		None
 11761 ;; Auto vars:     Size  Location     Type
 11762 ;;		None
 11763 ;; Return value:  Size  Location     Type
 11764 ;;                  1    wreg      void 
 11765 ;; Registers used:
 11766 ;;		wreg, status,2, status,0, pclath, cstack
 11767 ;; Tracked objects:
 11768 ;;		On entry : 1F/1
 11769 ;;		On exit  : 1F/0
 11770 ;;		Unchanged: 0/0
 11771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11775 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11776 ;;Total ram usage:        0 bytes
 11777 ;; Hardware stack levels used:    1
 11778 ;; Hardware stack levels required when called:    2
 11779 ;; This function calls:
 11780 ;;		_TMR2_SetInterruptHandler
 11781 ;;		_TMR2_StartTimer
 11782 ;; This function is called by:
 11783 ;;		_SYSTEM_Initialize
 11784 ;; This function uses a non-reentrant model
 11785 ;;
 11786                           
 11787                           
 11788                           ;psect for function _TMR2_Initialize
 11789  17ED                     _TMR2_Initialize:	
 11790                           
 11791                           ;tmr2.c: 68: T2CON = 0x4B;
 11792                           
 11793                           ;incstack = 0
 11794                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
 11795  17ED  304B               	movlw	75
 11796  17EE  0020               	movlb	0	; select bank0
 11797  17EF  009C               	movwf	28	;volatile
 11798                           
 11799                           ;tmr2.c: 71: PR2 = 0x7C;
 11800  17F0  307C               	movlw	124
 11801  17F1  009B               	movwf	27	;volatile
 11802                           
 11803                           ;tmr2.c: 74: TMR2 = 0x00;
 11804  17F2  019A               	clrf	26	;volatile
 11805                           
 11806                           ;tmr2.c: 77: PIR1bits.TMR2IF = 0;
 11807  17F3  1091               	bcf	17,1	;volatile
 11808                           
 11809                           ;tmr2.c: 80: PIE1bits.TMR2IE = 1;
 11810  17F4  0021               	movlb	1	; select bank1
 11811  17F5  1491               	bsf	17,1	;volatile
 11812                           
 11813                           ;tmr2.c: 83: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
 11814  17F6  3000               	movlw	0
 11815  17F7  01F1               	clrf	TMR2_SetInterruptHandler@InterruptHandler
 11816  17F8  01F2               	clrf	TMR2_SetInterruptHandler@InterruptHandler+1
 11817  17F9  27FC  3197         	fcall	_TMR2_SetInterruptHandler
 11818                           
 11819                           ;tmr2.c: 86: TMR2_StartTimer();
 11820  17FB  2FFD               	ljmp	l2908
 11821  17FC                     __end_of_TMR2_Initialize:	
 11822  17FC                     __ptext42:	
 11823 ;; *************** function _TMR2_SetInterruptHandler *****************
 11824 ;; Defined at:
 11825 ;;		line 142 in file "mcc_generated_files/tmr2.c"
 11826 ;; Parameters:    Size  Location     Type
 11827 ;;  InterruptHan    2    1[COMMON] PTR FTN()void 
 11828 ;;		 -> TMR2_DefaultInterruptHandler(1), 
 11829 ;; Auto vars:     Size  Location     Type
 11830 ;;		None
 11831 ;; Return value:  Size  Location     Type
 11832 ;;                  1    wreg      void 
 11833 ;; Registers used:
 11834 ;;		None
 11835 ;; Tracked objects:
 11836 ;;		On entry : 1F/1
 11837 ;;		On exit  : 1F/1
 11838 ;;		Unchanged: 1F/0
 11839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11840 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11843 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11844 ;;Total ram usage:        2 bytes
 11845 ;; Hardware stack levels used:    1
 11846 ;; Hardware stack levels required when called:    1
 11847 ;; This function calls:
 11848 ;;		Nothing
 11849 ;; This function is called by:
 11850 ;;		_TMR2_Initialize
 11851 ;; This function uses a non-reentrant model
 11852 ;;
 11853                           
 11854                           
 11855                           ;psect for function _TMR2_SetInterruptHandler
 11856  17FC                     _TMR2_SetInterruptHandler:	
 11857                           
 11858                           ;incstack = 0
 11859                           ; Regs used in _TMR2_SetInterruptHandler: []
 11860  17FC  0008               	return
 11861  17FD                     __end_of_TMR2_SetInterruptHandler:	
 11862  17FD                     __ptext41:	
 11863 ;; *************** function _TMR2_StartTimer *****************
 11864 ;; Defined at:
 11865 ;;		line 89 in file "mcc_generated_files/tmr2.c"
 11866 ;; Parameters:    Size  Location     Type
 11867 ;;		None
 11868 ;; Auto vars:     Size  Location     Type
 11869 ;;		None
 11870 ;; Return value:  Size  Location     Type
 11871 ;;                  1    wreg      void 
 11872 ;; Registers used:
 11873 ;;		None
 11874 ;; Tracked objects:
 11875 ;;		On entry : 1F/1
 11876 ;;		On exit  : 1F/0
 11877 ;;		Unchanged: 0/0
 11878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11882 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11883 ;;Total ram usage:        0 bytes
 11884 ;; Hardware stack levels used:    1
 11885 ;; Hardware stack levels required when called:    1
 11886 ;; This function calls:
 11887 ;;		Nothing
 11888 ;; This function is called by:
 11889 ;;		_TMR2_Initialize
 11890 ;; This function uses a non-reentrant model
 11891 ;;
 11892                           
 11893                           
 11894                           ;psect for function _TMR2_StartTimer
 11895  17FD                     _TMR2_StartTimer:	
 11896  17FD                     l2908:	
 11897                           ;incstack = 0
 11898                           ; Regs used in _TMR2_StartTimer: []
 11899                           
 11900                           
 11901                           ;tmr2.c: 92: T2CONbits.TMR2ON = 1;
 11902  17FD  0020               	movlb	0	; select bank0
 11903  17FE  151C               	bsf	28,2	;volatile
 11904  17FF  0008               	return
 11905  1800                     __end_of_TMR2_StartTimer:	
 11906                           
 11907                           	psect	intentry
 11908  0004                     __pintentry:	
 11909 ;; *************** function _INTERRUPT_InterruptManager *****************
 11910 ;; Defined at:
 11911 ;;		line 55 in file "mcc_generated_files/interrupt_manager.c"
 11912 ;; Parameters:    Size  Location     Type
 11913 ;;		None
 11914 ;; Auto vars:     Size  Location     Type
 11915 ;;  t8              1    0[COMMON] unsigned char 
 11916 ;; Return value:  Size  Location     Type
 11917 ;;                  1    wreg      void 
 11918 ;; Registers used:
 11919 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11920 ;; Tracked objects:
 11921 ;;		On entry : 0/0
 11922 ;;		On exit  : 0/0
 11923 ;;		Unchanged: 0/0
 11924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11926 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11928 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11929 ;;Total ram usage:        1 bytes
 11930 ;; Hardware stack levels used:    1
 11931 ;; This function calls:
 11932 ;;		Nothing
 11933 ;; This function is called by:
 11934 ;;		Interrupt level 1
 11935 ;; This function uses a non-reentrant model
 11936 ;;
 11937                           
 11938  0004                     _INTERRUPT_InterruptManager:	
 11939                           
 11940                           ;incstack = 0
 11941                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0]
 11942  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 11943  0005  3180               	pagesel	$
 11944                           
 11945                           ;interrupt_manager.c: 58: uint8_t t8;
 11946                           ;interrupt_manager.c: 59: if(INTCONbits.PEIE == 1 && PIE1bits.TMR2IE == 1 && PIR1bits.TM
      +                          R2IF == 1)
 11947  0006  1F0B               	btfss	11,6	;volatile
 11948  0007  282F               	goto	i1l3880
 11949  0008  0021               	movlb	1	; select bank1
 11950  0009  1C91               	btfss	17,1	;volatile
 11951  000A  282F               	goto	i1l3880
 11952  000B  0020               	movlb	0	; select bank0
 11953  000C  1C91               	btfss	17,1	;volatile
 11954  000D  282F               	goto	i1l3880
 11955                           
 11956                           ;interrupt_manager.c: 60: {
 11957                           ;interrupt_manager.c: 62: PIR1bits.TMR2IF = 0;
 11958  000E  1091               	bcf	17,1	;volatile
 11959                           
 11960                           ;interrupt_manager.c: 63: Event |= (1<<1);
 11961  000F  14DC               	bsf	_Event,1	;volatile
 11962  0010  3005               	movlw	5
 11963                           
 11964                           ;interrupt_manager.c: 64: subTickerX++;
 11965  0011  0AE0               	incf	_subTickerX,f
 11966                           
 11967                           ;interrupt_manager.c: 65: subTickerX_1s++;
 11968  0012  0AE1               	incf	_subTickerX_1s,f
 11969                           
 11970                           ;interrupt_manager.c: 66: if(subTickerX>=5){
 11971  0013  0260               	subwf	_subTickerX,w
 11972  0014  1C03               	skipc
 11973  0015  2818               	goto	i1l3862
 11974                           
 11975                           ;interrupt_manager.c: 67: subTickerX=0;
 11976  0016  01E0               	clrf	_subTickerX
 11977                           
 11978                           ;interrupt_manager.c: 68: Event |= (1<<2);
 11979  0017  155C               	bsf	_Event,2	;volatile
 11980  0018                     i1l3862:	
 11981                           
 11982                           ;interrupt_manager.c: 69: }
 11983                           ;interrupt_manager.c: 70: if(subTickerX_1s>=50){
 11984  0018  3032               	movlw	50
 11985  0019  0261               	subwf	_subTickerX_1s,w
 11986  001A  1C03               	skipc
 11987  001B  281E               	goto	i1l3868
 11988                           
 11989                           ;interrupt_manager.c: 71: subTickerX_1s=0;
 11990  001C  01E1               	clrf	_subTickerX_1s
 11991                           
 11992                           ;interrupt_manager.c: 72: Event |= (1<<3);
 11993  001D  15DC               	bsf	_Event,3	;volatile
 11994  001E                     i1l3868:	
 11995                           
 11996                           ;interrupt_manager.c: 73: }
 11997                           ;interrupt_manager.c: 75: if(eusartRxIdleTime_ms){
 11998  001E  085D               	movf	_eusartRxIdleTime_ms,w	;volatile
 11999  001F  1903               	btfsc	3,2
 12000  0020  2828               	goto	i1l3878
 12001                           
 12002                           ;interrupt_manager.c: 76: eusartRxIdleTime_ms++;
 12003  0021  0ADD               	incf	_eusartRxIdleTime_ms,f	;volatile
 12004                           
 12005                           ;interrupt_manager.c: 77: if(eusartRxIdleTime_ms>5){
 12006  0022  3006               	movlw	6
 12007  0023  025D               	subwf	_eusartRxIdleTime_ms,w	;volatile
 12008  0024  1C03               	skipc
 12009  0025  2828               	goto	i1l3878
 12010                           
 12011                           ;interrupt_manager.c: 78: Event|=(1<<0);
 12012  0026  145C               	bsf	_Event,0	;volatile
 12013                           
 12014                           ;interrupt_manager.c: 79: eusartRxIdleTime_ms=0;
 12015  0027  01DD               	clrf	_eusartRxIdleTime_ms	;volatile
 12016  0028                     i1l3878:	
 12017                           
 12018                           ;interrupt_manager.c: 80: }
 12019                           ;interrupt_manager.c: 81: }
 12020                           ;interrupt_manager.c: 82: globalTicker++;
 12021  0028  3001               	movlw	1
 12022  0029  0021               	movlb	1	; select bank1
 12023  002A  07D0               	addwf	_globalTicker^(0+128),f	;volatile
 12024  002B  3000               	movlw	0
 12025  002C  3DD1               	addwfc	(_globalTicker+1)^(0+128),f	;volatile
 12026  002D  3DD2               	addwfc	(_globalTicker+2)^(0+128),f	;volatile
 12027  002E  3DD3               	addwfc	(_globalTicker+3)^(0+128),f	;volatile
 12028  002F                     i1l3880:	
 12029                           
 12030                           ;interrupt_manager.c: 83: }
 12031                           ;interrupt_manager.c: 84: if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits.RCIF
      +                           == 1)
 12032  002F  1F0B               	btfss	11,6	;volatile
 12033  0030  284E               	goto	i1l3898
 12034  0031  0021               	movlb	1	; select bank1
 12035  0032  1E91               	btfss	17,5	;volatile
 12036  0033  284E               	goto	i1l3898
 12037  0034  0020               	movlb	0	; select bank0
 12038  0035  1E91               	btfss	17,5	;volatile
 12039  0036  284E               	goto	i1l3898
 12040                           
 12041                           ;interrupt_manager.c: 85: {
 12042                           ;interrupt_manager.c: 87: PIR1bits.RCIF=0;
 12043  0037  1291               	bcf	17,5	;volatile
 12044                           
 12045                           ;interrupt_manager.c: 88: if(1 == RCSTAbits.OERR){
 12046  0038  0023               	movlb	3	; select bank3
 12047  0039  1C9D               	btfss	29,1	;volatile
 12048  003A  283D               	goto	i1l3890
 12049                           
 12050                           ;interrupt_manager.c: 89: RCSTAbits.CREN = 0;
 12051  003B  121D               	bcf	29,4	;volatile
 12052                           
 12053                           ;interrupt_manager.c: 90: RCSTAbits.CREN = 1;
 12054  003C  161D               	bsf	29,4	;volatile
 12055  003D                     i1l3890:	
 12056                           
 12057                           ;interrupt_manager.c: 91: }
 12058                           ;interrupt_manager.c: 92: t8=RCREG;
 12059  003D  0819               	movf	25,w	;volatile
 12060  003E  00F0               	movwf	INTERRUPT_InterruptManager@t8
 12061                           
 12062                           ;interrupt_manager.c: 93: if(eusartRxCount<64){
 12063  003F  3040               	movlw	64
 12064  0040  027C               	subwf	_eusartRxCount,w	;volatile
 12065  0041  1803               	skipnc
 12066  0042  284B               	goto	i1l3896
 12067                           
 12068                           ;interrupt_manager.c: 94: eusartRxBuffer[eusartRxCount]=t8;
 12069  0043  087C               	movf	_eusartRxCount,w
 12070  0044  3E2A               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 12071  0045  0086               	movwf	6
 12072  0046  3001               	movlw	1	; select bank2/3
 12073  0047  0087               	movwf	7
 12074  0048  0870               	movf	INTERRUPT_InterruptManager@t8,w
 12075  0049  0081               	movwf	1
 12076                           
 12077                           ;interrupt_manager.c: 95: eusartRxCount++;
 12078  004A  0AFC               	incf	_eusartRxCount,f	;volatile
 12079  004B                     i1l3896:	
 12080                           
 12081                           ;interrupt_manager.c: 97: }
 12082                           ;interrupt_manager.c: 98: eusartRxIdleTime_ms=1;
 12083  004B  3001               	movlw	1
 12084  004C  0020               	movlb	0	; select bank0
 12085  004D  00DD               	movwf	_eusartRxIdleTime_ms	;volatile
 12086  004E                     i1l3898:	
 12087                           
 12088                           ;interrupt_manager.c: 99: }
 12089                           ;interrupt_manager.c: 100: if(INTCONbits.PEIE == 1 && PIE3bits.PWM2IE == 1 && PIR3bits.P
      +                          WM2IF == 1){
 12090  004E  1F0B               	btfss	11,6	;volatile
 12091  004F  2863               	goto	i1l3912
 12092  0050  0021               	movlb	1	; select bank1
 12093  0051  1E93               	btfss	19,5	;volatile
 12094  0052  2863               	goto	i1l3912
 12095  0053  0020               	movlb	0	; select bank0
 12096  0054  1E93               	btfss	19,5	;volatile
 12097  0055  2863               	goto	i1l3912
 12098                           
 12099                           ;interrupt_manager.c: 102: PIR3bits.PWM2IF = 0;
 12100  0056  1293               	bcf	19,5	;volatile
 12101                           
 12102                           ;interrupt_manager.c: 103: if(PWM2INTFbits.PRIF){
 12103  0057  003B               	movlb	27	; select bank27
 12104  0058  1C2D               	btfss	45,0	;volatile
 12105  0059  2863               	goto	i1l3912
 12106                           
 12107                           ;interrupt_manager.c: 104: PWM2INTFbits.PRIF=0;
 12108  005A  102D               	bcf	45,0	;volatile
 12109                           
 12110                           ;interrupt_manager.c: 105: PWM2DCH = (pwm2DutyForVout>>8);
 12111  005B  0020               	movlb	0	; select bank0
 12112  005C  0865               	movf	_pwm2DutyForVout+1,w
 12113  005D  003B               	movlb	27	; select bank27
 12114  005E  00A4               	movwf	36	;volatile
 12115                           
 12116                           ;interrupt_manager.c: 106: PWM2DCL = (pwm2DutyForVout);
 12117  005F  0020               	movlb	0	; select bank0
 12118  0060  0864               	movf	_pwm2DutyForVout,w
 12119  0061  003B               	movlb	27	; select bank27
 12120  0062  00A3               	movwf	35	;volatile
 12121  0063                     i1l3912:	
 12122                           
 12123                           ;interrupt_manager.c: 107: }
 12124                           ;interrupt_manager.c: 108: }
 12125                           ;interrupt_manager.c: 109: if(INTCONbits.PEIE == 1 && PIE3bits.PWM1IE == 1 && PIR3bits.P
      +                          WM1IF == 1){
 12126  0063  1F0B               	btfss	11,6	;volatile
 12127  0064  2878               	goto	i1l311
 12128  0065  0021               	movlb	1	; select bank1
 12129  0066  1E13               	btfss	19,4	;volatile
 12130  0067  2878               	goto	i1l311
 12131  0068  0020               	movlb	0	; select bank0
 12132  0069  1E13               	btfss	19,4	;volatile
 12133  006A  2878               	goto	i1l311
 12134                           
 12135                           ;interrupt_manager.c: 110: PIR3bits.PWM1IF = 0;
 12136  006B  1213               	bcf	19,4	;volatile
 12137                           
 12138                           ;interrupt_manager.c: 111: if(PWM1INTFbits.PRIF){
 12139  006C  003B               	movlb	27	; select bank27
 12140  006D  1C1D               	btfss	29,0	;volatile
 12141  006E  2878               	goto	i1l311
 12142                           
 12143                           ;interrupt_manager.c: 112: PWM1INTFbits.PRIF=0;
 12144  006F  101D               	bcf	29,0	;volatile
 12145                           
 12146                           ;interrupt_manager.c: 113: PWM1DCH = (pwm1DutyForIdrv>>8);
 12147  0070  0020               	movlb	0	; select bank0
 12148  0071  0863               	movf	_pwm1DutyForIdrv+1,w
 12149  0072  003B               	movlb	27	; select bank27
 12150  0073  0094               	movwf	20	;volatile
 12151                           
 12152                           ;interrupt_manager.c: 114: PWM1DCL = (pwm1DutyForIdrv);
 12153  0074  0020               	movlb	0	; select bank0
 12154  0075  0862               	movf	_pwm1DutyForIdrv,w
 12155  0076  003B               	movlb	27	; select bank27
 12156  0077  0093               	movwf	19	;volatile
 12157  0078                     i1l311:	
 12158  0078  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12159  0079  0009               	retfie
 12160  007A                     __end_of_INTERRUPT_InterruptManager:	
 12161  007E                     btemp	set	126	;btemp
 12162  007E                     int$flags	set	126
 12163  007E                     wtemp	set	126
 12164  007E                     wtemp0	set	126
 12165  0080                     wtemp1	set	128
 12166  0082                     wtemp2	set	130
 12167  0084                     wtemp3	set	132
 12168  0086                     wtemp4	set	134
 12169  0088                     wtemp5	set	136
 12170  007F                     wtemp6	set	127
 12171  007E                     ttemp	set	126
 12172  007E                     ttemp0	set	126
 12173  0081                     ttemp1	set	129
 12174  0084                     ttemp2	set	132
 12175  0087                     ttemp3	set	135
 12176  007F                     ttemp4	set	127
 12177  007E                     ltemp	set	126
 12178  007E                     ltemp0	set	126
 12179  0082                     ltemp1	set	130
 12180  0086                     ltemp2	set	134
 12181  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        24
    BSS         215
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     42      70
    BANK1            80      0      72
    BANK2            80      0      74
    BANK3            80      0      64
    BANK4            80     21      21
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           20      0       0
    BANK12            0      0       0

Pointer List with Targets:

    crc_append@message	PTR unsigned char  size(2) Largest target is 92
		 -> modbusBuf(BANK3[64]), sysData(BIGRAM[92]), 

    crc_verify@message	PTR unsigned char  size(2) Largest target is 92
		 -> modbusBuf(BANK3[64]), sysData(BIGRAM[92]), 

    crc_sum@buf	PTR unsigned char  size(2) Largest target is 92
		 -> modbusBuf(BANK3[64]), sysData(BIGRAM[92]), 

    m_mem_cpy_len@s	PTR unsigned char  size(2) Largest target is 92
		 -> modbusBuf(BANK3[64]), sysData(BIGRAM[92]), eusartRxBuffer(BANK2[64]), 

    m_mem_cpy_len@d	PTR unsigned char  size(2) Largest target is 64
		 -> crc_verify@expected(BANK0[2]), modbusBuf(BANK3[64]), 

    modbus_response_process@rbuf	PTR unsigned char  size(1) Largest target is 64
		 -> modbusBuf(BANK3[64]), 

    modbus_response_process@pmdbs	PTR struct . size(1) Largest target is 64
		 -> modbusBuf(BANK3[64]), 

    modbus_response_command@rbuf	PTR unsigned char  size(1) Largest target is 64
		 -> modbusBuf(BANK3[64]), 

    modbus_response_command@pmdbs	PTR struct . size(1) Largest target is 64
		 -> modbusBuf(BANK3[64]), 

    modbus_response_write_single_register@rbuf	PTR unsigned char  size(1) Largest target is 64
		 -> modbusBuf(BANK3[64]), 

    modbus_response_write_single_register@pmdbs	PTR struct . size(1) Largest target is 64
		 -> modbusBuf(BANK3[64]), 

    getRegisterVal@tempData	PTR unsigned int  size(1) Largest target is 2
		 -> modbus_response_command@tempData(BANK0[2]), 

    modbus_response_illgeal_function@buf	PTR unsigned char  size(1) Largest target is 64
		 -> modbusBuf(BANK3[64]), 

    modbus_response_illgeal_function@pmdbs	PTR struct . size(1) Largest target is 64
		 -> modbusBuf(BANK3[64]), 

    my_flash_system_write@buf	PTR unsigned char  size(2) Largest target is 92
		 -> sysData(BIGRAM[92]), 

    my_flash_system_read@buf	PTR unsigned char  size(2) Largest target is 92
		 -> sysData(BIGRAM[92]), 

    uart_send_len@buf	PTR unsigned char  size(1) Largest target is 64
		 -> modbusBuf(BANK3[64]), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_adc_sample
    _sys_data_init->_my_flash_system_read
    _pid_pwm2_vout_run->___awdiv
    _set_vout_pwm2_duty->_get_vout_pwm2_duty
    _pid_pwm1_idrv_run->___lmul
    _pid_pwm1_idrv_b_b->___lmul
    _set_idrv_pwm1_duty->_get_idrv_pwm1_duty
    _modbus_response_process->_modbus_response_command
    _my_flash_read_system_erase->_FLASH_EraseBlock
    _modbus_response_command->_getRegisterVal
    _crc_append->_crc_sum
    _crc_verify->_crc_sum
    _calc_temp_rs->___lldiv
    _calc_temp_rs->___lmul
    _calc_temp_rc->___lldiv
    _calc_temp_rc->___lmul
    _calc_rs_lo_avg->___lldiv
    _calc_expect_vout_adc_value->___lmul
    ___aldiv->___lmul
    _adc_sample->_adc_init
    _adc_sample->_fvr_set_gain
    _TMR2_Initialize->_TMR2_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_pid_pwm1_idrv_run
    _sys_data_init->_crc_append
    _sys_data_init->_my_flash_system_write
    _pid_pwm1_idrv_run->___aldiv
    _pid_pwm1_idrv_b_b->___aldiv
    _modbus_response_process->_modbus_response_write_single_register
    _modbus_response_write_single_register->_crc_append
    _sys_data_save->_crc_append
    _sys_data_save->_my_flash_system_write
    _modbus_response_illgeal_function->_crc_append
    _modbus_response_command->_crc_append
    _calc_temp_rs->___lldiv
    _calc_temp_rc->___lldiv
    _calc_rs_lo_avg->___lldiv
    _calc_expect_vout_adc_value->___aldiv
    ___aldiv->___lmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    _main->_calc_expect_vout_adc_value

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   45561
                                             40 BANK0      2     2      0
                  _SYSTEM_Initialize
                         _adc_sample
         _calc_expect_vout_adc_value
                     _calc_rs_lo_avg
                       _calc_temp_rc
                       _calc_temp_rs
                      _m_mem_cpy_len
            _modbus_response_process
                  _pid_pwm1_idrv_b_b
                  _pid_pwm1_idrv_run
                  _pid_pwm2_vout_run
                      _sys_data_init
                      _sys_data_save
                _uart_received_start
 ---------------------------------------------------------------------------------
 (1) _uart_received_start                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sys_data_init                                       10    10      0    4900
                                             11 BANK0     10    10      0
                             ___wmul
                         _crc_append
                         _crc_verify
         _my_flash_read_system_erase
               _my_flash_system_read
              _my_flash_system_write
 ---------------------------------------------------------------------------------
 (2) _my_flash_system_read                                11     7      4     288
                                              1 COMMON    11     7      4
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     348
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _pid_pwm2_vout_run                                    5     5      0    1079
                                              9 COMMON     1     1      0
                                              0 BANK0      4     4      0
                            ___awdiv
                            ___lwdiv
                 _set_vout_pwm2_duty
 ---------------------------------------------------------------------------------
 (2) _set_vout_pwm2_duty                                   4     2      2     176
                                              3 COMMON     4     2      2
                 _get_vout_pwm2_duty
 ---------------------------------------------------------------------------------
 (3) _get_vout_pwm2_duty                                   2     0      2       0
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                              1 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     428
                                              1 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _pid_pwm1_idrv_run                                   22    22      0    4927
                                             18 BANK0     22    22      0
                            ___aldiv
                             ___lmul
                 _set_idrv_pwm1_duty
 ---------------------------------------------------------------------------------
 (1) _pid_pwm1_idrv_b_b                                    5     5      0    4770
                                              9 COMMON     1     1      0
                                             18 BANK0      4     4      0
                            ___aldiv
                             ___lmul
                 _set_idrv_pwm1_duty
 ---------------------------------------------------------------------------------
 (2) _set_idrv_pwm1_duty                                   4     2      2     368
                                              3 COMMON     4     2      2
                 _get_idrv_pwm1_duty
 ---------------------------------------------------------------------------------
 (3) _get_idrv_pwm1_duty                                   2     0      2       0
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _modbus_response_process                              5     3      2   13395
                                             24 BANK0      4     2      2
                         _crc_verify
            _modbus_response_command
   _modbus_response_illgeal_function
_modbus_response_write_single_regist
 ---------------------------------------------------------------------------------
 (2) _modbus_response_write_single_register               13    13      0    5529
                                             11 BANK0     13    13      0
                         _crc_append
                      _sys_data_save
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (1) _sys_data_save                                        0     0      0    2533
                         _crc_append
         _my_flash_read_system_erase
              _my_flash_system_write
 ---------------------------------------------------------------------------------
 (2) _my_flash_system_write                               16    12      4     579
                                              1 COMMON     5     1      4
                                              0 BANK0     11    11      0
 ---------------------------------------------------------------------------------
 (2) _my_flash_read_system_erase                           0     0      0     375
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_EraseBlock                                     3     1      2     375
                                              1 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (2) _modbus_response_illgeal_function                     3     2      1    2343
                                             11 BANK0      3     2      1
                         _crc_append
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (2) _modbus_response_command                             11    11      0    3633
                                             11 COMMON     1     1      0
                                             11 BANK0     10    10      0
                         _crc_append
                     _getRegisterVal
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (3) _uart_send_len                                        4     3      1     372
                                              1 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (3) _getRegisterVal                                      10     7      3     687
                                              1 COMMON    10     7      3
 ---------------------------------------------------------------------------------
 (2) _crc_append                                          11     7      4    1579
                                              0 BANK0     11     7      4
                            _crc_sum
 ---------------------------------------------------------------------------------
 (2) _crc_verify                                           8     4      4    1498
                                              0 BANK0      8     4      4
                            _crc_sum
                      _m_mem_cpy_len
 ---------------------------------------------------------------------------------
 (3) _m_mem_cpy_len                                        7     1      6     409
                                              1 COMMON     7     1      6
 ---------------------------------------------------------------------------------
 (3) _crc_sum                                             12     8      4     555
                                              1 COMMON    10     6      4
 ---------------------------------------------------------------------------------
 (1) _calc_temp_rs                                        12     8      4    3072
                                              5 BANK0     12     8      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) _calc_temp_rc                                        16    12      4    3140
                                              5 BANK0     16    12      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) _calc_rs_lo_avg                                       9     7      2    1181
                                              9 COMMON     2     0      2
                                              5 BANK0      7     7      0
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     776
                                              1 COMMON     8     0      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _calc_expect_vout_adc_value                          36    34      2    5163
                                             18 BANK0     14    12      2
                                              0 BANK4     21    21      0
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8    2089
                                              1 COMMON     8     0      8
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8    2121
                                              4 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _adc_sample                                           9     7      2     894
                                              3 COMMON     9     7      2
                           _adc_init
                       _fvr_set_gain
 ---------------------------------------------------------------------------------
 (2) _fvr_set_gain                                         2     2      0      69
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _adc_init                                             2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      98
                    _ADC1_Initialize
                  _EUSART_Initialize
                     _FVR_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM1_Initialize
                    _PWM2_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0      75
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR2_SetInterruptHandler                             2     0      2      75
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _ADC1_Initialize
     _EUSART_Initialize
     _FVR_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM1_Initialize
     _PWM2_Initialize
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
       _TMR2_StartTimer
     _WDT_Initialize
   _adc_sample
     _adc_init
     _fvr_set_gain
   _calc_expect_vout_adc_value
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _calc_rs_lo_avg
     ___lldiv
   _calc_temp_rc
     ___lldiv
     ___lmul
   _calc_temp_rs
     ___lldiv
     ___lmul
   _m_mem_cpy_len
   _modbus_response_process
     _crc_verify
       _crc_sum
       _m_mem_cpy_len
     _modbus_response_command
       _crc_append
         _crc_sum
       _getRegisterVal
       _uart_send_len
     _modbus_response_illgeal_function
       _crc_append
         _crc_sum
       _uart_send_len
     _modbus_response_write_single_register
       _crc_append
         _crc_sum
       _sys_data_save
         _crc_append
           _crc_sum
         _my_flash_read_system_erase
           _FLASH_EraseBlock
         _my_flash_system_write
       _uart_send_len
   _pid_pwm1_idrv_b_b
     ___aldiv
       ___lmul (ARG)
     ___lmul
     _set_idrv_pwm1_duty
       _get_idrv_pwm1_duty
   _pid_pwm1_idrv_run
     ___aldiv
       ___lmul (ARG)
     ___lmul
     _set_idrv_pwm1_duty
       _get_idrv_pwm1_duty
   _pid_pwm2_vout_run
     ___awdiv
     ___lwdiv
     _set_vout_pwm2_duty
       _get_vout_pwm2_duty
   _sys_data_init
     ___wmul
     _crc_append
       _crc_sum
     _crc_verify
       _crc_sum
       _m_mem_cpy_len
     _my_flash_read_system_erase
       _FLASH_EraseBlock
     _my_flash_system_read
     _my_flash_system_write
   _sys_data_save
     _crc_append
       _crc_sum
     _my_flash_read_system_erase
       _FLASH_EraseBlock
     _my_flash_system_write
   _uart_received_start

 _INTERRUPT_InterruptManager (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3E0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     2A      46       5       87.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      48       7       90.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4A       9       92.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      40      11       80.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50     15      15      13       26.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     13A      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              14      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           20      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     13A      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Tue Nov 20 23:16:18 2018

              __end_of_TMR2_SetInterruptHandler 17FD                                               pc 0002  
                  ??_my_flash_read_system_erase 0074                                     __CFG_CP$OFF 0000  
                                            PL2 0B6B                                              PL4 0B7C  
                                            PL6 0F9A                                              PL8 0FA6  
                                  ___awdiv@sign 0076                          __end_of_FVR_Initialize 0239  
                           ___wmul@multiplicand 0073                                             PL10 0776  
                                           PL20 0A33                                             PL12 0FBA  
                                           PL30 07AA                                             PL22 0FCA  
                                           PL14 0789                                             PL40 07B9  
                                           PL32 0D25                                             PL24 0799  
                                           PL16 0792                                             PL50 07C6  
                                           PL42 07BF                                             PL34 0FD0  
                                           PL26 0A3C                                             PL18 0FC2  
                                           PL60 0FFB                                             PL52 0FE9  
                                           PL44 0FDC                                             PL36 0FD6  
                                           PL28 07A2                                             PL54 07CB  
                                           PL46 090A                                             PL38 07B2  
                                   __CFG_LVP$ON 0000                                             PL56 0FEF  
                                           PL48 0FE3                                             PL58 0FF5  
                                           l512 0F56                                             l521 0F6C  
                                           l613 02AC                                             l517 0F5E  
                                           l702 0872                                             l607 02C8  
                                           l632 0202                                             l645 03AE  
                                           l680 0569                                             l826 0F85  
                                           l669 0595                                             l689 0A17  
                                           l699 084C                                             _GIE 005F  
                                           _PR2 001B                                 _pwm1DutyForIdrv 0062  
                                           _bbu 00CC                                             _err 00A0  
                               _TMR2_Initialize 17ED                                    __CFG_BORV$LO 0000  
                                           wreg 0009                            ??_get_vout_pwm2_duty 0073  
                          ??_set_vout_pwm2_duty 0075                                 ??_uart_send_len 0072  
                                          S4672 101E                                            S4674 1000  
                                          l1112 0C5C                                            l1115 0C67  
                                 calc_temp_rc@x 002D                                   calc_temp_rc@y 0031  
                                          l1143 0607                                            l3004 06F5  
                                          l3120 07EA                                            l1187 05A6  
                                          l3124 0669                                            l3152 02C3  
                                          l3136 08EA                                            l4122 0E89  
                                          l4060 0C65                                            l4140 0EB4  
                                          l4310 06E5                                            l4230 0DAD  
                                          l4216 0D89                                            l4128 0E96  
                                          l3432 088F                                            l3512 08E1  
                                          l3504 08D2                                            l3192 0C85  
                                          l4330 039C                                            l4306 06D3  
                                          l4066 0C49                                            l4138 0F35  
                                          l3362 0C0A                                            l3194 0CAA  
                                          l4332 03A8                                            l4308 06DF  
                                          l4068 0C75                                            l4228 0D8A  
                                          l4148 0EC9                                            l4180 0F37  
                                          l4340 03D9                                            l3460 08B8  
                                          l3516 08E5                                            l4350 03F6  
                                          l3438 0898                                            l3358 0C04  
                                          l4248 0612                                            l4504 0B63  
                                          l4440 02D0                                            l2920 0F5A  
                                          l4184 0F3D                                            l4352 0404  
                                          l4344 03E1                                            l4424 09FD  
                                          l3464 08C0                                            l3456 08B4  
                                          l3448 08A5                                            l3720 087F  
                                          l4520 0BA8                                            l3554 01FC  
                                          l3546 01FB                                            l4266 05B5  
                                          l3490 0660                                            l4346 03EF  
                                          l4338 03D8                                            l4426 0A03  
                                          l3706 083C                                            l2908 17FD  
                                          l3556 021B                                            l4292 05F9  
                                          l4284 05E5                                            l4276 05C8  
                                          l2940 0DD2                                            l2844 0CAC  
                                          l4364 041D                                            l4428 0A12  
                                          l4470 0A73                                            l3486 065A  
                                          l3478 063D                                            l2950 0E03  
                                          l2942 0DD9                                            l4550 0D58  
                                          l4542 0D38                                            l4630 01E6  
                                          l4288 05EB                                            l4464 0A46  
                                          l2960 0E28                                            l2952 0E08  
                                          l2944 0DE6                                            l2784 07D1  
                                          l2872 0CF5                                            l2856 0CC7  
                                          l4384 052E                                            l4608 01A3  
                                          l4616 01C8                                            l4482 0A8C  
                                          l2970 0E52                                            l2962 0E31  
                                          l2954 0E10                                            l2946 0DF9  
                                          l2882 0D06                                            l2874 0CF7  
                                          l4546 0D54                                            l4386 0538  
                                          l4570 00E5                                            l2964 0E3A  
                                          l2956 0E18                                            l2948 0DFE  
                                          l2868 0CDB                                            l4548 0D56  
                                          l4628 01E4                                            l4580 0115  
                                          l4572 00E7                                            l4494 0ADE  
                                          l4478 0A85                                            l2966 0E42  
                                          l2958 0E20                                            l2974 0E5A  
                                          l2968 0E4A                                            l2976 0E67  
                                          l2896 0CCC                                            l2986 0E77  
                                          l2898 0D23                                   calc_temp_rs@x 0029  
                                 calc_temp_rs@y 002D                         __end_of_PWM1_Initialize 0290  
                                          u2115 0210                                            u2035 064F  
                                          _LATA 010C                                            u3015 05DA  
                                          u1415 0CE9                                            _LATC 010E  
                                          u3123 0557                                            u2075 08DA  
                                          u1540 0275                                            u1445 0CD2  
                                          u3133 0584                                            u1615 0C8B  
                                          u3225 0AD4                                            u2265 0836  
                                          u1395 0CBC                                            u2275 0846  
                                          u1565 0679                                            u2285 086B  
                                          u3175 0A65                                            u1575 08FA  
                                          u2295 0879                                            u3195 0A7D  
                                          u2735 0C4F                                            u3377 01F3  
                                          u2745 0C41                                            u1985 08AD  
                                 _m_mem_cpy_len 06F5                                            _TMR2 001A  
                                          _WPUA 020C                                            _WPUC 020E  
                                  __CFG_WRT$OFF 0000                                            _bbt0 00BC  
                                          _bbt1 00C0                                            _bbta 00C4  
                                          _bbku 00B8                                            _bbtu 00C8  
                                          _main 00D2  modbus_response_write_single_register@startAddr 0035  
                                          _pidU 00DC             __size_of_my_flash_read_system_erase 0017  
                                          fsr0h 0005                                            fsr1h 0007  
                                          fsr0l 0004                                            indf0 0000  
                                          indf1 0001                                            fsr1l 0006  
                                          btemp 007E                                   __CFG_BOREN$ON 0000  
                                          ltemp 007E                                            start 007A  
                               _pwm2DutyForVout 0064                                            ttemp 007E  
                                          wtemp 007E                       ??_modbus_response_command 007B  
                                 __CFG_MCLRE$ON 0000                             pid_pwm1_idrv_run@ei 003A  
                           pid_pwm1_idrv_run@ep 0036                         __end_of_PWM2_Initialize 02A8  
                     ??_modbus_response_process 007C                                 ?_FVR_Initialize 0070  
                __size_of_OSCILLATOR_Initialize 0005                   __end_of_OSCILLATOR_Initialize 023E  
                               __end_of___aldiv 0602                                           ?_main 0070  
                               __end_of___awdiv 08C5                                   __CFG_WDTE$OFF 0000  
                               __end_of___lldiv 0669                                 ___awdiv@divisor 0071  
                                         _T2CON 001C                                 __end_of___lwdiv 08EA  
                                         i1l311 0078                                 ___awdiv@counter 0075  
                                         _RCREG 0199                                           _RCSTA 019D  
                                         _TRISA 008C                                           _TRISC 008E  
                                         _TXREG 019A                                           _TXSTA 019E  
              modbus_response_command@startAddr 002D                             ___lmul@multiplicand 0075  
                                         _PidKp 00AC                                           _PidTd 00B0  
                                         _Event 005C                                           _PidTi 00B4  
                               __end_of_crc_sum 0C7A                            pid_pwm1_idrv_b_b@t32 0032  
                                         _bbmax 00D4                                           _bbmin 00D8  
                                _WDT_Initialize 02A8                                           _resRc 00E0  
                                         _resRs 00E4                                  ?_m_mem_cpy_len 0071  
                                         ltemp0 007E                                           ltemp1 0082  
                                         ltemp2 0086                                           ltemp3 0080  
                    __end_of_get_idrv_pwm1_duty 0768                      __end_of_set_idrv_pwm1_duty 0682  
                                         ttemp0 007E                                           ttemp1 0081  
                                         ttemp2 0084                                           ttemp3 0087  
                                         ttemp4 007F                              crc_verify@expected 0026  
                                         status 0003                                           wtemp0 007E  
                                         wtemp1 0080                                           wtemp2 0082  
                                         wtemp3 0084                                           wtemp4 0086  
                                         wtemp5 0088                                           wtemp6 007F  
                               _TMR2_StartTimer 17FD                                   fvr_set_gain@g 0072  
            __end_of_calc_expect_vout_adc_value 0B6B                      _calc_expect_vout_adc_value 0A44  
                          pid_pwm1_idrv_run@t32 0044                            pid_pwm1_idrv_run@t16 0042  
                               __initialization 007C                                    __end_of_main 01E8  
                         __size_of_calc_temp_rc 009D                           __size_of_calc_temp_rs 0073  
                       __end_of_TMR2_Initialize 17FC                     ?_INTERRUPT_InterruptManager 0070  
           modbus_response_illgeal_function@buf 002C                        _TMR2_SetInterruptHandler 17FC  
                                        ??_main 0048                                ??_calc_rs_lo_avg 0025  
                   modbus_response_process@rbuf 003B                   __size_of_my_flash_system_read 0032  
                   modbus_response_process@rlen 0038                                  __CFG_PLLEN$OFF 0000  
               __end_of_modbus_response_command 0DCF                          __end_of_WDT_Initialize 02AB  
                  my_flash_system_write@blocNum 0023                                          _ADCON0 009D  
                                        _ADCON1 009E                                          _ADCON2 009F  
                                        _ADRESH 009C                                          _ADRESL 009B  
                              ___awdiv@dividend 0073                                          _ANSELA 018C  
                                        _ANSELC 018E                 __end_of_modbus_response_process 0D5C  
                              __end_of_adc_init 02BA                                ?_PWM1_Initialize 0070  
                                        _ODCONA 028C                                          _ODCONC 028E  
                                        i1l3912 0063                                          i1l3862 0018  
                                        i1l3880 002F                                          i1l3890 003D  
                                        i1l3868 001E                                          i1l3878 0028  
                                        i1l3896 004B                                          i1l3898 004E  
                                        _FVRCON 0117                                          _PMADRH 0192  
                                        _PMADRL 0191                                          _PMDATH 0194  
                                        _PMDATL 0193                                          _PMCON2 0196  
                     __size_of_FLASH_EraseBlock 0019                                          _OSCCON 0099  
                   __end_of_uart_received_start 0776                                          _SPBRGH 019C  
                                        _SPBRGL 019B                                          _WDTCON 0097  
                                  _calc_temp_rc 031A                                    _calc_temp_rs 0682  
                                __CFG_PWRTE$OFF 0000                                 calc_rs_lo_avg@i 002B  
                               calc_rs_lo_avg@x 0079              __end_of_my_flash_read_system_erase 0761  
                    _my_flash_read_system_erase 074A      modbus_response_write_single_register@pmdbs 0034  
                                        ___lmul 0602                                       ??___aldiv 0079  
                                        ___wmul 0C02                                       ??___awdiv 0075  
                                __CFG_STVREN$ON 0000                                       ??___lldiv 0079  
                                     ??___lwdiv 0075                                ?_PWM2_Initialize 0070  
                                        _pwm2Ei 004A                                ___awdiv@quotient 0077  
                      my_flash_system_write@buf 0071                        my_flash_system_write@len 0073  
                      my_flash_system_write@loc 0025                                       ??_crc_sum 0075  
                      __size_of_ADC1_Initialize 0004                                 ?_WDT_Initialize 0070  
                               ??_m_mem_cpy_len 0077                my_flash_system_write@GIEBitValue 0022  
                       __end_of_TMR2_StartTimer 1800        TMR2_SetInterruptHandler@InterruptHandler 0071  
               modbus_response_command@tempData 0033        __end_of_modbus_response_illgeal_function 0F9A  
     __size_of_modbus_response_illgeal_function 002A               ?_modbus_response_illgeal_function 002B  
            ??_modbus_response_illgeal_function 007B                _modbus_response_illgeal_function 0F70  
                                 ?_fvr_set_gain 0070                                  fvr_set_gain@t8 0071  
                             _SYSTEM_Initialize 0220                         __end_of__initialization 00CF  
                        __size_of_sys_data_init 0082                           _my_flash_system_write 0CAC  
                            ?_SYSTEM_Initialize 0070                          __size_of_sys_data_save 000B  
                            getRegisterVal@addr 0071                                  __pcstackCOMMON 0070  
                                  __pidataBANK0 07F8                                    __pidataBANK1 0804  
                           ??_SYSTEM_Initialize 0073                                      _adc_sample 01E8  
        modbus_response_write_single_register@i 0032                                ?_TMR2_Initialize 0070  
                                    __end_ofPL2 0B7C                                      __end_ofPL4 0B80  
                                    __end_ofPL6 0FA6                                      __end_ofPL8 0FBA  
                                _OPTION_REGbits 0095        modbus_response_write_single_register@t16 0030  
                             crc_append@message 0020                          getRegisterVal@tempAddr 007A  
                        my_flash_system_write@i 0029                          my_flash_system_write@j 0020  
                        getRegisterVal@tempData 0073                       __end_of_SYSTEM_Initialize 0231  
                                ??_fvr_set_gain 0071                                      __pbssBANK0 004A  
                                    __pbssBANK1 00A0                                      __pbssBANK2 0120  
                                    __pbssBANK3 01A0                  modbus_response_command@tmpAddr 002B  
               my_flash_system_read@GIEBitValue 0077                                      adc_init@ch 0072  
                              ??_FVR_Initialize 0071                                      __pmaintext 00D2  
                    modbus_response_command@len 0031                                         ?___lmul 0071  
                                       ?___wmul 0071                                 __CFG_PPS1WAY$ON 0000  
                                    __pintentry 0004                    ??_calc_expect_vout_adc_value 0034  
                                       _BAUDCON 019F                                  ___lmul@product 0020  
                                    _crc_append 071B                                       ?_adc_init 0070  
                                  adc_sample@ch 0076                                   _sys_data_init 0B80  
                                 _sys_data_save 0710                                      _crc_verify 0C17  
                                 _eusartRxCount 007C                     __size_of_get_vout_pwm2_duty 0007  
                   __size_of_set_vout_pwm2_duty 0019                                         _PWM1DCH 0D94  
                                       _PWM1DCL 0D93                                         _PWM2DCH 0DA4  
                                       _PWM2DCL 0DA3                                         _OSCTUNE 0098  
                                       _PWM1CON 0D9B                                         _PWM2CON 0DAB  
                                       _PWM1OFH 0D98                                         _PWM1OFL 0D97  
                                       _PWM2OFH 0DA8                                         _PWM1PHH 0D92  
                                       _PWM2OFL 0DA7                                         _PWM1PHL 0D91  
                                       _PWM2PHH 0DA2                                         _PWM2PHL 0DA1  
                                       _PWM1PRH 0D96                                         _PWM1PRL 0D95  
                                       _PWM2PRH 0DA6                                         _PWM2PRL 0DA5  
         modbus_response_illgeal_function@pmdbs 002D                                         _PPSLOCK 0E0F  
                             ??_ADC1_Initialize 0071                                ?_TMR2_StartTimer 0070  
                        set_idrv_pwm1_duty@duty 0073                           __end_of_uart_send_len 0F70  
                              _FLASH_EraseBlock 07D1                          ?_my_flash_system_write 0071  
                       __size_of_getRegisterVal 00AC                     ?_calc_expect_vout_adc_value 0032  
   modbus_response_write_single_register@fiSave 002F                      ??_TMR2_SetInterruptHandler 0073  
                                       ___aldiv 0596                                         ___awdiv 0885  
                               __size_of___lmul 0028                                         ___lldiv 062A  
                               __size_of___wmul 0015                              _get_idrv_pwm1_duty 0761  
                            _set_idrv_pwm1_duty 0669                                         ___lwdiv 08C5  
                                   ?_adc_sample 0073                                  adc_sample@gfvr 0073  
                                    _pidTestNum 005F                                  ?_sys_data_init 0070  
                                ?_sys_data_save 0070                                      ??_adc_init 0071  
                                       __ptext1 0768                                         __ptext2 0B80  
                                       __ptext3 0C7A                                         __ptext4 0C02  
                                       __ptext5 0818                                         __ptext6 08EA  
                                       __ptext7 0903                                         __ptext8 08C5  
                                       __ptext9 0885                                         _crc_sum 0C44  
                                       _pidBbSm 005E                             ?_get_idrv_pwm1_duty 0071  
                           ?_set_idrv_pwm1_duty 0073                           _OSCILLATOR_Initialize 0239  
                                     _T2CONbits 001C                                      _rsLoAvgBuf 0120  
                                       _rsLoAvg 004C                                ___aldiv@dividend 0028  
                      ??_PIN_MANAGER_Initialize 0071                                         _sysData 2384  
                    __size_of_SYSTEM_Initialize 0011                                         clrloop0 17E2  
                          end_of_initialization 00CF                                         init_ram 17D5  
                      ?_modbus_response_command 0070                                         initloop 17D6  
                  __end_of_my_flash_system_read 0CAC                            ??_get_idrv_pwm1_duty 0073  
                           pid_pwm2_vout_run@ei 0020                            ??_set_idrv_pwm1_duty 0075  
                             _EUSART_Initialize 07EA                                 ___lldiv@divisor 0071  
                                    _voExpectMv 005A                                 ___lldiv@counter 0024  
                            ?_EUSART_Initialize 0070                        ?_modbus_response_process 0038  
                                     _RCSTAbits 019D                     ?_my_flash_read_system_erase 0070  
                              ___aldiv@quotient 002E                                       _PWM1LDCON 0D9F  
                                     _PWM2LDCON 0DAF                                       _PWM1OFCON 0DA0  
                                     _PWM2OFCON 0DB0                            __end_of_fvr_set_gain 02CB  
                                   ?_crc_append 0020                                      _subTickerX 0060  
                           ??_EUSART_Initialize 0071                                ??_WDT_Initialize 0071  
                                   ?_crc_verify 0020                                __CFG_FOSC$INTOSC 0000  
                                    crc_sum@crc 0079                                      crc_sum@buf 0071  
                                    crc_sum@len 0073                                       _RXPPSbits 0E15  
                           __size_of_adc_sample 0038                       __end_of_EUSART_Initialize 07F8  
                                  _globalTicker 00D0                                       _TXSTAbits 019E  
                      __size_of_PWM1_Initialize 0019                    __size_of_uart_received_start 000E  
                  _TMR2_DefaultInterruptHandler 0000                                 ??_sys_data_init 002B  
                               ??_sys_data_save 007B                                  __end_of___lmul 062A  
                                __end_of___wmul 0C17                                _voExpectAdcValue 0058  
                                _rtAdcValueRcHi 004E                                  _rtAdcValueRcLo 0050  
                                _rtAdcValueRsHi 0052                                  _rtAdcValueVoFb 0056  
                                _rtAdcValueRsLo 0054                          ?_OSCILLATOR_Initialize 0070  
                             crc_verify@message 0020                                     __end_ofPL10 0789  
                                   __end_ofPL20 0A3C                                     __end_ofPL12 0FC2  
                                   __end_ofPL30 07B2                                     __end_ofPL22 0FD0  
                                   __end_ofPL14 0792                                     __end_ofPL40 07BF  
                                   __end_ofPL32 0D2A                                     __end_ofPL24 07A2  
                                   __end_ofPL16 0799                                     __end_ofPL50 07CB  
                                   __end_ofPL42 07C6                                     __end_ofPL34 0FD6  
                                   __end_ofPL26 0A44                                     __end_ofPL18 0FCA  
                                   __end_ofPL60 1000                                     __end_ofPL52 0FEF  
                                   __end_ofPL44 0FE3                                     __end_ofPL36 0FDC  
                                   __end_ofPL28 07AA                                     __end_ofPL54 07D1  
                                   __end_ofPL46 0910                                     __end_ofPL38 07B9  
                                   __end_ofPL56 0FF5                                     __end_ofPL48 0FE9  
                                   __end_ofPL58 0FFB                             start_initialization 007C  
                      __size_of_PWM2_Initialize 0018                 __size_of_PIN_MANAGER_Initialize 0039  
                       my_flash_system_read@buf 0071                         my_flash_system_read@len 0073  
                         __end_of_m_mem_cpy_len 0710                                  _getRegisterVal 0DCF  
                       __size_of_calc_rs_lo_avg 004F                             __size_of_crc_append 002F  
                           __size_of_crc_verify 002D                                __CFG_LPBOREN$OFF 0000  
     modbus_response_write_single_register@rbuf 0037                                        ??___lmul 0079  
                                      ??___wmul 0075                                     __pdataBANK0 0062  
                                   __pdataBANK1 00D4                     FLASH_EraseBlock@GIEBitValue 0073  
                               _ADC1_Initialize 0231                        __end_of_FLASH_EraseBlock 07EA  
                          _my_flash_system_read 0C7A                                     __pbssBIGRAM 2384  
                             __size_of_adc_init 000F                                     __pbssCOMMON 007C  
                                     ___latbits 0002                                   __pcstackBANK0 0020  
                                 __pcstackBANK4 0220                        __size_of_TMR2_Initialize 000F  
                       ??_my_flash_system_write 0075                          __end_of_getRegisterVal 0E7B  
                         my_flash_system_read@i 0078                      __size_of_EUSART_Initialize 000E  
       modbus_response_illgeal_function@errcode 002B                           __size_of_fvr_set_gain 0011  
                              ___lwdiv@dividend 0073                          _PIN_MANAGER_Initialize 023E  
                   modbus_response_command@rbuf 0032                                        ?___aldiv 0024  
                                      ?___awdiv 0071                                        ?___lldiv 0071  
                                  ??_adc_sample 0075                                     adc_sample@i 0079  
                                      ?___lwdiv 0071                               ??_PWM1_Initialize 0071  
                  ??_INTERRUPT_InterruptManager 0070                           set_idrv_pwm1_duty@t16 0075  
                                     __pswtext1 101E                                       __pswtext2 1000  
                                      ?_crc_sum 0071                   my_flash_system_read@flashAddr 007A  
                    __end_of_get_vout_pwm2_duty 090A                           ?_my_flash_system_read 0071  
                    __end_of_set_vout_pwm2_duty 0903                                uart_send_len@buf 0073  
                              uart_send_len@len 0071                                   adc_sample@t16 007A  
                              ___lwdiv@quotient 0075                                   adc_sample@ret 0077  
                                 adc_sample@num 0074                                 ?_getRegisterVal 0071  
                                  _fvr_set_gain 02BA                                  _eusartRxBuffer 012A  
                                     _modbusBuf 01A0                                 ___aldiv@divisor 0024  
                             ??_PWM2_Initialize 0071                              __end_of_adc_sample 0220  
                               ___aldiv@counter 002C                                  ___wmul@product 0075  
                             _pid_pwm1_idrv_b_b 03B7                               _pid_pwm1_idrv_run 0910  
                                     clear_ram0 17E1                                  m_mem_cpy_len@d 0071  
                                m_mem_cpy_len@s 0073                                   ?_calc_temp_rc 0025  
                                 ?_calc_temp_rs 0025                                        _PIE1bits 0091  
                                      _PIE3bits 0093                        __size_of_TMR2_StartTimer 0003  
                        set_vout_pwm2_duty@duty 0073                              ?_pid_pwm1_idrv_b_b 0070  
           __size_of_INTERRUPT_InterruptManager 0076                              ?_pid_pwm1_idrv_run 0070  
                       __end_of_ADC1_Initialize 0235                                        _PIR1bits 0011  
                                      _PIR3bits 0013                       FLASH_EraseBlock@startAddr 0071  
                                      _PWM1INTE 0D9C                                        _PWM1INTF 0D9D  
                                      _PWM2INTE 0DAC                                        _PWM2INTF 0DAD  
                                      _PWM1TMRH 0D9A                                        _PWM1TMRL 0D99  
                                      _PWM2TMRH 0DAA                                        _PWM2TMRL 0DA9  
                           ??_pid_pwm1_idrv_b_b 0079                                    ??_crc_append 0024  
              __size_of_modbus_response_command 0073                             ??_pid_pwm1_idrv_run 0032  
                        __size_of_uart_send_len 001E                                      _ADCON0bits 009D  
                             ___wmul@multiplier 0071                                    ??_crc_verify 007B  
                       __size_of_FVR_Initialize 0004                __size_of_modbus_response_process 0032  
             __size_of_TMR2_SetInterruptHandler 0001                       ?_TMR2_SetInterruptHandler 0071  
                           _uart_received_start 0768                               _pid_pwm2_vout_run 0818  
                             ___lmul@multiplier 0071                                crc_verify@crccal 0024  
                     __end_of_pid_pwm1_idrv_b_b 0596                                  _calc_rs_lo_avg 02CB  
                            ?_pid_pwm2_vout_run 0070                       __end_of_pid_pwm1_idrv_run 0A33  
                             ??_TMR2_Initialize 0073                                  ??_calc_temp_rc 0029  
                                ??_calc_temp_rs 0079                              __end_of_crc_append 074A  
                             calc_rs_lo_avg@t32 0027                     __size_of_get_idrv_pwm1_duty 0007  
                   __size_of_set_idrv_pwm1_duty 0019                             ??_pid_pwm2_vout_run 0079  
                            __end_of_crc_verify 0C44                                    _PWM1INTFbits 0D9D  
                          ?_uart_received_start 0070                                    _PWM2INTFbits 0DAD  
                       ??_OSCILLATOR_Initialize 0071                                __size_of___aldiv 006C  
                              __size_of___awdiv 0040                                __size_of___lldiv 003F  
                              __size_of___lwdiv 0025                          ??_my_flash_system_read 0075  
                                      _adc_init 02AB                                __size_of_crc_sum 0036  
                           _eusartRxIdleTime_ms 005D                       __end_of_pid_pwm2_vout_run 0885  
                                 crc_append@crc 0029                                sys_data_init@ret 0031  
                               ___lwdiv@divisor 0071                                 ___lwdiv@counter 0077  
                                      __ptext10 0910                                        __ptext11 03B7  
                                      __ptext20 0F70                                        __ptext12 0669  
                                      __ptext21 0D5C                                        __ptext13 0761  
                                      __ptext30 02CB                                        __ptext22 0F52  
                                      __ptext14 0D2A                                        __ptext31 062A  
                                      __ptext23 0DCF                                        __ptext15 0E7B  
                                      __ptext40 17ED                                        __ptext32 0A44  
                                      __ptext24 071B                                        __ptext16 0710  
                                      __ptext41 17FD                                        __ptext33 0602  
                                      __ptext25 0C17                                        __ptext17 0CAC  
                                      __ptext42 17FC                                        __ptext34 0596  
                                      __ptext26 06F5                                        __ptext18 074A  
                                      __ptext43 0290                                        __ptext35 01E8  
                                      __ptext27 0C44                                        __ptext19 07D1  
                                      __ptext44 0277                                        __ptext36 02BA  
                                      __ptext28 0682                                        __ptext45 023E  
                                      __ptext37 02AB                                        __ptext29 031A  
                                      __ptext46 0239                                        __ptext38 0220  
                                      __ptext47 0235                                        __ptext39 02A8  
                                      __ptext48 07EA                                        __ptext49 0231  
                        __end_of_calc_rs_lo_avg 031A                                   _uart_send_len 0F52  
                                 __size_of_main 0116                                   _subTickerX_1s 0061  
                         set_vout_pwm2_duty@t16 0075                                      _RA4PPSbits 0E94  
                         ??_uart_received_start 0071                                      _RA5PPSbits 0E95  
                              ?_ADC1_Initialize 0070                  my_flash_system_write@flashAddr 0027  
                                      int$flags 007E                                        crc_sum@i 0077  
                                      crc_sum@j 0075                                      _RC5PPSbits 0EA5  
 __end_of_modbus_response_write_single_register 0F52  __size_of_modbus_response_write_single_register 00D7  
       ??_modbus_response_write_single_register 002B          ?_modbus_response_write_single_register 0070  
         _modbus_response_write_single_register 0E7B                               ??_TMR2_StartTimer 0071  
            __end_of_INTERRUPT_InterruptManager 007A                      _INTERRUPT_InterruptManager 0004  
                         __end_of_sys_data_init 0C02                           __end_of_sys_data_save 071B  
                             ?_FLASH_EraseBlock 0071                   calc_expect_vout_adc_value@t32 0230  
                   PIN_MANAGER_Initialize@state 0071                        modbus_response_command@i 002F  
                            ??_FLASH_EraseBlock 0073                                      _INTCONbits 000B  
                                   _PWM1CONbits 0D9B                                m_mem_cpy_len@len 0075  
                                    _FVRCONbits 0117                                     _PWM2CONbits 0DAB  
                  INTERRUPT_InterruptManager@t8 0070                                 ?_calc_rs_lo_avg 0079  
                  modbus_response_process@pmdbs 003A                         __size_of_WDT_Initialize 0003  
                                ?_uart_send_len 0071                                        intlevel1 0000  
                __size_of_my_flash_system_write 0079                            pid_pwm2_vout_run@t16 0022  
                    __size_of_pid_pwm1_idrv_b_b 01DF                   __end_of_my_flash_system_write 0D25  
                    __size_of_pid_pwm1_idrv_run 0123                                      _PMCON1bits 0195  
                              ___lldiv@dividend 0075                         ?_PIN_MANAGER_Initialize 0070  
                                uart_send_len@i 0074                               __CFG_CLKOUTEN$OFF 0000  
                                   _PPSLOCKbits 0E0F                                 _PWM1_Initialize 0277  
                  modbus_response_command@pmdbs 0030                         _modbus_response_command 0D5C  
                  calc_expect_vout_adc_value@x0 022C                    calc_expect_vout_adc_value@x1 0224  
                  calc_expect_vout_adc_value@y0 0228                    calc_expect_vout_adc_value@y1 0220  
                                    _PWM1CLKCON 0D9E                                      _PWM2CLKCON 0DAE  
                        __size_of_m_mem_cpy_len 001B                                  _FVR_Initialize 0235  
                       _modbus_response_process 0D2A                                  sys_data_init@i 0033  
                                   crc_append@n 0022                            __end_of_calc_temp_rc 03B7  
                          __end_of_calc_temp_rs 06F5                                ___lldiv@quotient 0020  
                              ??_getRegisterVal 0074                                 _PWM2_Initialize 0290  
                    __size_of_pid_pwm2_vout_run 006D                                    ___aldiv@sign 002D  
                   calc_expect_vout_adc_value@i 0234                     calc_expect_vout_adc_value@x 0032  
           __size_of_calc_expect_vout_adc_value 0127                  __end_of_PIN_MANAGER_Initialize 0277  
                            _get_vout_pwm2_duty 0903                              _set_vout_pwm2_duty 08EA  
                                   crc_verify@n 0022                             ?_get_vout_pwm2_duty 0071  
                           ?_set_vout_pwm2_duty 0073  
