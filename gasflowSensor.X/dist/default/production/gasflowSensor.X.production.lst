

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Sat Mar 30 21:15:34 2019

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16F1575
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	swtext1,local,class=CONST,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    55                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	intentry,global,class=CODE,delta=2
    72                           	dabs	1,0x620,32
    73                           	dabs	1,0x5A0,80
    74                           	dabs	1,0x55C,20
    75                           	dabs	1,0xFFF,1,_isRunInBoot
    76                           	dabs	1,0x235C,0,_sysData
    77                           	dabs	1,0x7E,2
    78  0000                     
    79                           ; Version 2.00
    80                           ; Generated 27/05/2018 GMT
    81                           ; 
    82                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution.
    96                           ; 
    97                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    98                           ;        software without specific prior written permission.
    99                           ; 
   100                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   101                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   102                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   103                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   104                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   105                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   106                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   107                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   108                           ; 
   109                           ; 
   110                           ; Code-generator required, PIC16F1575 Definitions
   111                           ; 
   112                           ; SFR Addresses
   113  0000                     	;# 
   114  0001                     	;# 
   115  0002                     	;# 
   116  0003                     	;# 
   117  0004                     	;# 
   118  0005                     	;# 
   119  0006                     	;# 
   120  0007                     	;# 
   121  0008                     	;# 
   122  0009                     	;# 
   123  000A                     	;# 
   124  000B                     	;# 
   125  000C                     	;# 
   126  000E                     	;# 
   127  0011                     	;# 
   128  0012                     	;# 
   129  0013                     	;# 
   130  0015                     	;# 
   131  0016                     	;# 
   132  0016                     	;# 
   133  0017                     	;# 
   134  0018                     	;# 
   135  0019                     	;# 
   136  001A                     	;# 
   137  001B                     	;# 
   138  001C                     	;# 
   139  008C                     	;# 
   140  008E                     	;# 
   141  0091                     	;# 
   142  0092                     	;# 
   143  0093                     	;# 
   144  0095                     	;# 
   145  0096                     	;# 
   146  0097                     	;# 
   147  0098                     	;# 
   148  0099                     	;# 
   149  009A                     	;# 
   150  009B                     	;# 
   151  009B                     	;# 
   152  009C                     	;# 
   153  009D                     	;# 
   154  009E                     	;# 
   155  009F                     	;# 
   156  010C                     	;# 
   157  010E                     	;# 
   158  0111                     	;# 
   159  0112                     	;# 
   160  0113                     	;# 
   161  0114                     	;# 
   162  0115                     	;# 
   163  0116                     	;# 
   164  0117                     	;# 
   165  0118                     	;# 
   166  0119                     	;# 
   167  018C                     	;# 
   168  018E                     	;# 
   169  0191                     	;# 
   170  0191                     	;# 
   171  0192                     	;# 
   172  0193                     	;# 
   173  0193                     	;# 
   174  0194                     	;# 
   175  0195                     	;# 
   176  0196                     	;# 
   177  0197                     	;# 
   178  0199                     	;# 
   179  019A                     	;# 
   180  019B                     	;# 
   181  019B                     	;# 
   182  019C                     	;# 
   183  019D                     	;# 
   184  019E                     	;# 
   185  019F                     	;# 
   186  020C                     	;# 
   187  020E                     	;# 
   188  028C                     	;# 
   189  028E                     	;# 
   190  030C                     	;# 
   191  030E                     	;# 
   192  038C                     	;# 
   193  038E                     	;# 
   194  0391                     	;# 
   195  0392                     	;# 
   196  0393                     	;# 
   197  0397                     	;# 
   198  0398                     	;# 
   199  0399                     	;# 
   200  0691                     	;# 
   201  0692                     	;# 
   202  0693                     	;# 
   203  0694                     	;# 
   204  0695                     	;# 
   205  0D8E                     	;# 
   206  0D8F                     	;# 
   207  0D90                     	;# 
   208  0D91                     	;# 
   209  0D91                     	;# 
   210  0D92                     	;# 
   211  0D93                     	;# 
   212  0D93                     	;# 
   213  0D94                     	;# 
   214  0D95                     	;# 
   215  0D95                     	;# 
   216  0D96                     	;# 
   217  0D97                     	;# 
   218  0D97                     	;# 
   219  0D98                     	;# 
   220  0D99                     	;# 
   221  0D99                     	;# 
   222  0D9A                     	;# 
   223  0D9B                     	;# 
   224  0D9C                     	;# 
   225  0D9C                     	;# 
   226  0D9D                     	;# 
   227  0D9D                     	;# 
   228  0D9E                     	;# 
   229  0D9F                     	;# 
   230  0DA0                     	;# 
   231  0DA1                     	;# 
   232  0DA1                     	;# 
   233  0DA2                     	;# 
   234  0DA3                     	;# 
   235  0DA3                     	;# 
   236  0DA4                     	;# 
   237  0DA5                     	;# 
   238  0DA5                     	;# 
   239  0DA6                     	;# 
   240  0DA7                     	;# 
   241  0DA7                     	;# 
   242  0DA8                     	;# 
   243  0DA9                     	;# 
   244  0DA9                     	;# 
   245  0DAA                     	;# 
   246  0DAB                     	;# 
   247  0DAC                     	;# 
   248  0DAC                     	;# 
   249  0DAD                     	;# 
   250  0DAD                     	;# 
   251  0DAE                     	;# 
   252  0DAF                     	;# 
   253  0DB0                     	;# 
   254  0DB1                     	;# 
   255  0DB1                     	;# 
   256  0DB2                     	;# 
   257  0DB3                     	;# 
   258  0DB3                     	;# 
   259  0DB4                     	;# 
   260  0DB5                     	;# 
   261  0DB5                     	;# 
   262  0DB6                     	;# 
   263  0DB7                     	;# 
   264  0DB7                     	;# 
   265  0DB8                     	;# 
   266  0DB9                     	;# 
   267  0DB9                     	;# 
   268  0DBA                     	;# 
   269  0DBB                     	;# 
   270  0DBC                     	;# 
   271  0DBC                     	;# 
   272  0DBD                     	;# 
   273  0DBD                     	;# 
   274  0DBE                     	;# 
   275  0DBF                     	;# 
   276  0DC0                     	;# 
   277  0DC1                     	;# 
   278  0DC1                     	;# 
   279  0DC2                     	;# 
   280  0DC3                     	;# 
   281  0DC3                     	;# 
   282  0DC4                     	;# 
   283  0DC5                     	;# 
   284  0DC5                     	;# 
   285  0DC6                     	;# 
   286  0DC7                     	;# 
   287  0DC7                     	;# 
   288  0DC8                     	;# 
   289  0DC9                     	;# 
   290  0DC9                     	;# 
   291  0DCA                     	;# 
   292  0DCB                     	;# 
   293  0DCC                     	;# 
   294  0DCC                     	;# 
   295  0DCD                     	;# 
   296  0DCD                     	;# 
   297  0DCE                     	;# 
   298  0DCF                     	;# 
   299  0DD0                     	;# 
   300  0E0F                     	;# 
   301  0E10                     	;# 
   302  0E11                     	;# 
   303  0E12                     	;# 
   304  0E13                     	;# 
   305  0E14                     	;# 
   306  0E15                     	;# 
   307  0E16                     	;# 
   308  0E17                     	;# 
   309  0E90                     	;# 
   310  0E91                     	;# 
   311  0E92                     	;# 
   312  0E94                     	;# 
   313  0E95                     	;# 
   314  0EA0                     	;# 
   315  0EA1                     	;# 
   316  0EA2                     	;# 
   317  0EA3                     	;# 
   318  0EA4                     	;# 
   319  0EA5                     	;# 
   320  0FE4                     	;# 
   321  0FE5                     	;# 
   322  0FE6                     	;# 
   323  0FE7                     	;# 
   324  0FE8                     	;# 
   325  0FE8                     	;# 
   326  0FE9                     	;# 
   327  0FEA                     	;# 
   328  0FEA                     	;# 
   329  0FEB                     	;# 
   330  0FED                     	;# 
   331  0FEE                     	;# 
   332  0FEE                     	;# 
   333  0FEF                     	;# 
   334  0000                     	;# 
   335  0001                     	;# 
   336  0002                     	;# 
   337  0003                     	;# 
   338  0004                     	;# 
   339  0005                     	;# 
   340  0006                     	;# 
   341  0007                     	;# 
   342  0008                     	;# 
   343  0009                     	;# 
   344  000A                     	;# 
   345  000B                     	;# 
   346  000C                     	;# 
   347  000E                     	;# 
   348  0011                     	;# 
   349  0012                     	;# 
   350  0013                     	;# 
   351  0015                     	;# 
   352  0016                     	;# 
   353  0016                     	;# 
   354  0017                     	;# 
   355  0018                     	;# 
   356  0019                     	;# 
   357  001A                     	;# 
   358  001B                     	;# 
   359  001C                     	;# 
   360  008C                     	;# 
   361  008E                     	;# 
   362  0091                     	;# 
   363  0092                     	;# 
   364  0093                     	;# 
   365  0095                     	;# 
   366  0096                     	;# 
   367  0097                     	;# 
   368  0098                     	;# 
   369  0099                     	;# 
   370  009A                     	;# 
   371  009B                     	;# 
   372  009B                     	;# 
   373  009C                     	;# 
   374  009D                     	;# 
   375  009E                     	;# 
   376  009F                     	;# 
   377  010C                     	;# 
   378  010E                     	;# 
   379  0111                     	;# 
   380  0112                     	;# 
   381  0113                     	;# 
   382  0114                     	;# 
   383  0115                     	;# 
   384  0116                     	;# 
   385  0117                     	;# 
   386  0118                     	;# 
   387  0119                     	;# 
   388  018C                     	;# 
   389  018E                     	;# 
   390  0191                     	;# 
   391  0191                     	;# 
   392  0192                     	;# 
   393  0193                     	;# 
   394  0193                     	;# 
   395  0194                     	;# 
   396  0195                     	;# 
   397  0196                     	;# 
   398  0197                     	;# 
   399  0199                     	;# 
   400  019A                     	;# 
   401  019B                     	;# 
   402  019B                     	;# 
   403  019C                     	;# 
   404  019D                     	;# 
   405  019E                     	;# 
   406  019F                     	;# 
   407  020C                     	;# 
   408  020E                     	;# 
   409  028C                     	;# 
   410  028E                     	;# 
   411  030C                     	;# 
   412  030E                     	;# 
   413  038C                     	;# 
   414  038E                     	;# 
   415  0391                     	;# 
   416  0392                     	;# 
   417  0393                     	;# 
   418  0397                     	;# 
   419  0398                     	;# 
   420  0399                     	;# 
   421  0691                     	;# 
   422  0692                     	;# 
   423  0693                     	;# 
   424  0694                     	;# 
   425  0695                     	;# 
   426  0D8E                     	;# 
   427  0D8F                     	;# 
   428  0D90                     	;# 
   429  0D91                     	;# 
   430  0D91                     	;# 
   431  0D92                     	;# 
   432  0D93                     	;# 
   433  0D93                     	;# 
   434  0D94                     	;# 
   435  0D95                     	;# 
   436  0D95                     	;# 
   437  0D96                     	;# 
   438  0D97                     	;# 
   439  0D97                     	;# 
   440  0D98                     	;# 
   441  0D99                     	;# 
   442  0D99                     	;# 
   443  0D9A                     	;# 
   444  0D9B                     	;# 
   445  0D9C                     	;# 
   446  0D9C                     	;# 
   447  0D9D                     	;# 
   448  0D9D                     	;# 
   449  0D9E                     	;# 
   450  0D9F                     	;# 
   451  0DA0                     	;# 
   452  0DA1                     	;# 
   453  0DA1                     	;# 
   454  0DA2                     	;# 
   455  0DA3                     	;# 
   456  0DA3                     	;# 
   457  0DA4                     	;# 
   458  0DA5                     	;# 
   459  0DA5                     	;# 
   460  0DA6                     	;# 
   461  0DA7                     	;# 
   462  0DA7                     	;# 
   463  0DA8                     	;# 
   464  0DA9                     	;# 
   465  0DA9                     	;# 
   466  0DAA                     	;# 
   467  0DAB                     	;# 
   468  0DAC                     	;# 
   469  0DAC                     	;# 
   470  0DAD                     	;# 
   471  0DAD                     	;# 
   472  0DAE                     	;# 
   473  0DAF                     	;# 
   474  0DB0                     	;# 
   475  0DB1                     	;# 
   476  0DB1                     	;# 
   477  0DB2                     	;# 
   478  0DB3                     	;# 
   479  0DB3                     	;# 
   480  0DB4                     	;# 
   481  0DB5                     	;# 
   482  0DB5                     	;# 
   483  0DB6                     	;# 
   484  0DB7                     	;# 
   485  0DB7                     	;# 
   486  0DB8                     	;# 
   487  0DB9                     	;# 
   488  0DB9                     	;# 
   489  0DBA                     	;# 
   490  0DBB                     	;# 
   491  0DBC                     	;# 
   492  0DBC                     	;# 
   493  0DBD                     	;# 
   494  0DBD                     	;# 
   495  0DBE                     	;# 
   496  0DBF                     	;# 
   497  0DC0                     	;# 
   498  0DC1                     	;# 
   499  0DC1                     	;# 
   500  0DC2                     	;# 
   501  0DC3                     	;# 
   502  0DC3                     	;# 
   503  0DC4                     	;# 
   504  0DC5                     	;# 
   505  0DC5                     	;# 
   506  0DC6                     	;# 
   507  0DC7                     	;# 
   508  0DC7                     	;# 
   509  0DC8                     	;# 
   510  0DC9                     	;# 
   511  0DC9                     	;# 
   512  0DCA                     	;# 
   513  0DCB                     	;# 
   514  0DCC                     	;# 
   515  0DCC                     	;# 
   516  0DCD                     	;# 
   517  0DCD                     	;# 
   518  0DCE                     	;# 
   519  0DCF                     	;# 
   520  0DD0                     	;# 
   521  0E0F                     	;# 
   522  0E10                     	;# 
   523  0E11                     	;# 
   524  0E12                     	;# 
   525  0E13                     	;# 
   526  0E14                     	;# 
   527  0E15                     	;# 
   528  0E16                     	;# 
   529  0E17                     	;# 
   530  0E90                     	;# 
   531  0E91                     	;# 
   532  0E92                     	;# 
   533  0E94                     	;# 
   534  0E95                     	;# 
   535  0EA0                     	;# 
   536  0EA1                     	;# 
   537  0EA2                     	;# 
   538  0EA3                     	;# 
   539  0EA4                     	;# 
   540  0EA5                     	;# 
   541  0FE4                     	;# 
   542  0FE5                     	;# 
   543  0FE6                     	;# 
   544  0FE7                     	;# 
   545  0FE8                     	;# 
   546  0FE8                     	;# 
   547  0FE9                     	;# 
   548  0FEA                     	;# 
   549  0FEA                     	;# 
   550  0FEB                     	;# 
   551  0FED                     	;# 
   552  0FEE                     	;# 
   553  0FEE                     	;# 
   554  0FEF                     	;# 
   555  0000                     	;# 
   556  0001                     	;# 
   557  0002                     	;# 
   558  0003                     	;# 
   559  0004                     	;# 
   560  0005                     	;# 
   561  0006                     	;# 
   562  0007                     	;# 
   563  0008                     	;# 
   564  0009                     	;# 
   565  000A                     	;# 
   566  000B                     	;# 
   567  000C                     	;# 
   568  000E                     	;# 
   569  0011                     	;# 
   570  0012                     	;# 
   571  0013                     	;# 
   572  0015                     	;# 
   573  0016                     	;# 
   574  0016                     	;# 
   575  0017                     	;# 
   576  0018                     	;# 
   577  0019                     	;# 
   578  001A                     	;# 
   579  001B                     	;# 
   580  001C                     	;# 
   581  008C                     	;# 
   582  008E                     	;# 
   583  0091                     	;# 
   584  0092                     	;# 
   585  0093                     	;# 
   586  0095                     	;# 
   587  0096                     	;# 
   588  0097                     	;# 
   589  0098                     	;# 
   590  0099                     	;# 
   591  009A                     	;# 
   592  009B                     	;# 
   593  009B                     	;# 
   594  009C                     	;# 
   595  009D                     	;# 
   596  009E                     	;# 
   597  009F                     	;# 
   598  010C                     	;# 
   599  010E                     	;# 
   600  0111                     	;# 
   601  0112                     	;# 
   602  0113                     	;# 
   603  0114                     	;# 
   604  0115                     	;# 
   605  0116                     	;# 
   606  0117                     	;# 
   607  0118                     	;# 
   608  0119                     	;# 
   609  018C                     	;# 
   610  018E                     	;# 
   611  0191                     	;# 
   612  0191                     	;# 
   613  0192                     	;# 
   614  0193                     	;# 
   615  0193                     	;# 
   616  0194                     	;# 
   617  0195                     	;# 
   618  0196                     	;# 
   619  0197                     	;# 
   620  0199                     	;# 
   621  019A                     	;# 
   622  019B                     	;# 
   623  019B                     	;# 
   624  019C                     	;# 
   625  019D                     	;# 
   626  019E                     	;# 
   627  019F                     	;# 
   628  020C                     	;# 
   629  020E                     	;# 
   630  028C                     	;# 
   631  028E                     	;# 
   632  030C                     	;# 
   633  030E                     	;# 
   634  038C                     	;# 
   635  038E                     	;# 
   636  0391                     	;# 
   637  0392                     	;# 
   638  0393                     	;# 
   639  0397                     	;# 
   640  0398                     	;# 
   641  0399                     	;# 
   642  0691                     	;# 
   643  0692                     	;# 
   644  0693                     	;# 
   645  0694                     	;# 
   646  0695                     	;# 
   647  0D8E                     	;# 
   648  0D8F                     	;# 
   649  0D90                     	;# 
   650  0D91                     	;# 
   651  0D91                     	;# 
   652  0D92                     	;# 
   653  0D93                     	;# 
   654  0D93                     	;# 
   655  0D94                     	;# 
   656  0D95                     	;# 
   657  0D95                     	;# 
   658  0D96                     	;# 
   659  0D97                     	;# 
   660  0D97                     	;# 
   661  0D98                     	;# 
   662  0D99                     	;# 
   663  0D99                     	;# 
   664  0D9A                     	;# 
   665  0D9B                     	;# 
   666  0D9C                     	;# 
   667  0D9C                     	;# 
   668  0D9D                     	;# 
   669  0D9D                     	;# 
   670  0D9E                     	;# 
   671  0D9F                     	;# 
   672  0DA0                     	;# 
   673  0DA1                     	;# 
   674  0DA1                     	;# 
   675  0DA2                     	;# 
   676  0DA3                     	;# 
   677  0DA3                     	;# 
   678  0DA4                     	;# 
   679  0DA5                     	;# 
   680  0DA5                     	;# 
   681  0DA6                     	;# 
   682  0DA7                     	;# 
   683  0DA7                     	;# 
   684  0DA8                     	;# 
   685  0DA9                     	;# 
   686  0DA9                     	;# 
   687  0DAA                     	;# 
   688  0DAB                     	;# 
   689  0DAC                     	;# 
   690  0DAC                     	;# 
   691  0DAD                     	;# 
   692  0DAD                     	;# 
   693  0DAE                     	;# 
   694  0DAF                     	;# 
   695  0DB0                     	;# 
   696  0DB1                     	;# 
   697  0DB1                     	;# 
   698  0DB2                     	;# 
   699  0DB3                     	;# 
   700  0DB3                     	;# 
   701  0DB4                     	;# 
   702  0DB5                     	;# 
   703  0DB5                     	;# 
   704  0DB6                     	;# 
   705  0DB7                     	;# 
   706  0DB7                     	;# 
   707  0DB8                     	;# 
   708  0DB9                     	;# 
   709  0DB9                     	;# 
   710  0DBA                     	;# 
   711  0DBB                     	;# 
   712  0DBC                     	;# 
   713  0DBC                     	;# 
   714  0DBD                     	;# 
   715  0DBD                     	;# 
   716  0DBE                     	;# 
   717  0DBF                     	;# 
   718  0DC0                     	;# 
   719  0DC1                     	;# 
   720  0DC1                     	;# 
   721  0DC2                     	;# 
   722  0DC3                     	;# 
   723  0DC3                     	;# 
   724  0DC4                     	;# 
   725  0DC5                     	;# 
   726  0DC5                     	;# 
   727  0DC6                     	;# 
   728  0DC7                     	;# 
   729  0DC7                     	;# 
   730  0DC8                     	;# 
   731  0DC9                     	;# 
   732  0DC9                     	;# 
   733  0DCA                     	;# 
   734  0DCB                     	;# 
   735  0DCC                     	;# 
   736  0DCC                     	;# 
   737  0DCD                     	;# 
   738  0DCD                     	;# 
   739  0DCE                     	;# 
   740  0DCF                     	;# 
   741  0DD0                     	;# 
   742  0E0F                     	;# 
   743  0E10                     	;# 
   744  0E11                     	;# 
   745  0E12                     	;# 
   746  0E13                     	;# 
   747  0E14                     	;# 
   748  0E15                     	;# 
   749  0E16                     	;# 
   750  0E17                     	;# 
   751  0E90                     	;# 
   752  0E91                     	;# 
   753  0E92                     	;# 
   754  0E94                     	;# 
   755  0E95                     	;# 
   756  0EA0                     	;# 
   757  0EA1                     	;# 
   758  0EA2                     	;# 
   759  0EA3                     	;# 
   760  0EA4                     	;# 
   761  0EA5                     	;# 
   762  0FE4                     	;# 
   763  0FE5                     	;# 
   764  0FE6                     	;# 
   765  0FE7                     	;# 
   766  0FE8                     	;# 
   767  0FE8                     	;# 
   768  0FE9                     	;# 
   769  0FEA                     	;# 
   770  0FEA                     	;# 
   771  0FEB                     	;# 
   772  0FED                     	;# 
   773  0FEE                     	;# 
   774  0FEE                     	;# 
   775  0FEF                     	;# 
   776  0000                     	;# 
   777  0001                     	;# 
   778  0002                     	;# 
   779  0003                     	;# 
   780  0004                     	;# 
   781  0005                     	;# 
   782  0006                     	;# 
   783  0007                     	;# 
   784  0008                     	;# 
   785  0009                     	;# 
   786  000A                     	;# 
   787  000B                     	;# 
   788  000C                     	;# 
   789  000E                     	;# 
   790  0011                     	;# 
   791  0012                     	;# 
   792  0013                     	;# 
   793  0015                     	;# 
   794  0016                     	;# 
   795  0016                     	;# 
   796  0017                     	;# 
   797  0018                     	;# 
   798  0019                     	;# 
   799  001A                     	;# 
   800  001B                     	;# 
   801  001C                     	;# 
   802  008C                     	;# 
   803  008E                     	;# 
   804  0091                     	;# 
   805  0092                     	;# 
   806  0093                     	;# 
   807  0095                     	;# 
   808  0096                     	;# 
   809  0097                     	;# 
   810  0098                     	;# 
   811  0099                     	;# 
   812  009A                     	;# 
   813  009B                     	;# 
   814  009B                     	;# 
   815  009C                     	;# 
   816  009D                     	;# 
   817  009E                     	;# 
   818  009F                     	;# 
   819  010C                     	;# 
   820  010E                     	;# 
   821  0111                     	;# 
   822  0112                     	;# 
   823  0113                     	;# 
   824  0114                     	;# 
   825  0115                     	;# 
   826  0116                     	;# 
   827  0117                     	;# 
   828  0118                     	;# 
   829  0119                     	;# 
   830  018C                     	;# 
   831  018E                     	;# 
   832  0191                     	;# 
   833  0191                     	;# 
   834  0192                     	;# 
   835  0193                     	;# 
   836  0193                     	;# 
   837  0194                     	;# 
   838  0195                     	;# 
   839  0196                     	;# 
   840  0197                     	;# 
   841  0199                     	;# 
   842  019A                     	;# 
   843  019B                     	;# 
   844  019B                     	;# 
   845  019C                     	;# 
   846  019D                     	;# 
   847  019E                     	;# 
   848  019F                     	;# 
   849  020C                     	;# 
   850  020E                     	;# 
   851  028C                     	;# 
   852  028E                     	;# 
   853  030C                     	;# 
   854  030E                     	;# 
   855  038C                     	;# 
   856  038E                     	;# 
   857  0391                     	;# 
   858  0392                     	;# 
   859  0393                     	;# 
   860  0397                     	;# 
   861  0398                     	;# 
   862  0399                     	;# 
   863  0691                     	;# 
   864  0692                     	;# 
   865  0693                     	;# 
   866  0694                     	;# 
   867  0695                     	;# 
   868  0D8E                     	;# 
   869  0D8F                     	;# 
   870  0D90                     	;# 
   871  0D91                     	;# 
   872  0D91                     	;# 
   873  0D92                     	;# 
   874  0D93                     	;# 
   875  0D93                     	;# 
   876  0D94                     	;# 
   877  0D95                     	;# 
   878  0D95                     	;# 
   879  0D96                     	;# 
   880  0D97                     	;# 
   881  0D97                     	;# 
   882  0D98                     	;# 
   883  0D99                     	;# 
   884  0D99                     	;# 
   885  0D9A                     	;# 
   886  0D9B                     	;# 
   887  0D9C                     	;# 
   888  0D9C                     	;# 
   889  0D9D                     	;# 
   890  0D9D                     	;# 
   891  0D9E                     	;# 
   892  0D9F                     	;# 
   893  0DA0                     	;# 
   894  0DA1                     	;# 
   895  0DA1                     	;# 
   896  0DA2                     	;# 
   897  0DA3                     	;# 
   898  0DA3                     	;# 
   899  0DA4                     	;# 
   900  0DA5                     	;# 
   901  0DA5                     	;# 
   902  0DA6                     	;# 
   903  0DA7                     	;# 
   904  0DA7                     	;# 
   905  0DA8                     	;# 
   906  0DA9                     	;# 
   907  0DA9                     	;# 
   908  0DAA                     	;# 
   909  0DAB                     	;# 
   910  0DAC                     	;# 
   911  0DAC                     	;# 
   912  0DAD                     	;# 
   913  0DAD                     	;# 
   914  0DAE                     	;# 
   915  0DAF                     	;# 
   916  0DB0                     	;# 
   917  0DB1                     	;# 
   918  0DB1                     	;# 
   919  0DB2                     	;# 
   920  0DB3                     	;# 
   921  0DB3                     	;# 
   922  0DB4                     	;# 
   923  0DB5                     	;# 
   924  0DB5                     	;# 
   925  0DB6                     	;# 
   926  0DB7                     	;# 
   927  0DB7                     	;# 
   928  0DB8                     	;# 
   929  0DB9                     	;# 
   930  0DB9                     	;# 
   931  0DBA                     	;# 
   932  0DBB                     	;# 
   933  0DBC                     	;# 
   934  0DBC                     	;# 
   935  0DBD                     	;# 
   936  0DBD                     	;# 
   937  0DBE                     	;# 
   938  0DBF                     	;# 
   939  0DC0                     	;# 
   940  0DC1                     	;# 
   941  0DC1                     	;# 
   942  0DC2                     	;# 
   943  0DC3                     	;# 
   944  0DC3                     	;# 
   945  0DC4                     	;# 
   946  0DC5                     	;# 
   947  0DC5                     	;# 
   948  0DC6                     	;# 
   949  0DC7                     	;# 
   950  0DC7                     	;# 
   951  0DC8                     	;# 
   952  0DC9                     	;# 
   953  0DC9                     	;# 
   954  0DCA                     	;# 
   955  0DCB                     	;# 
   956  0DCC                     	;# 
   957  0DCC                     	;# 
   958  0DCD                     	;# 
   959  0DCD                     	;# 
   960  0DCE                     	;# 
   961  0DCF                     	;# 
   962  0DD0                     	;# 
   963  0E0F                     	;# 
   964  0E10                     	;# 
   965  0E11                     	;# 
   966  0E12                     	;# 
   967  0E13                     	;# 
   968  0E14                     	;# 
   969  0E15                     	;# 
   970  0E16                     	;# 
   971  0E17                     	;# 
   972  0E90                     	;# 
   973  0E91                     	;# 
   974  0E92                     	;# 
   975  0E94                     	;# 
   976  0E95                     	;# 
   977  0EA0                     	;# 
   978  0EA1                     	;# 
   979  0EA2                     	;# 
   980  0EA3                     	;# 
   981  0EA4                     	;# 
   982  0EA5                     	;# 
   983  0FE4                     	;# 
   984  0FE5                     	;# 
   985  0FE6                     	;# 
   986  0FE7                     	;# 
   987  0FE8                     	;# 
   988  0FE8                     	;# 
   989  0FE9                     	;# 
   990  0FEA                     	;# 
   991  0FEA                     	;# 
   992  0FEB                     	;# 
   993  0FED                     	;# 
   994  0FEE                     	;# 
   995  0FEE                     	;# 
   996  0FEF                     	;# 
   997  0000                     	;# 
   998  0001                     	;# 
   999  0002                     	;# 
  1000  0003                     	;# 
  1001  0004                     	;# 
  1002  0005                     	;# 
  1003  0006                     	;# 
  1004  0007                     	;# 
  1005  0008                     	;# 
  1006  0009                     	;# 
  1007  000A                     	;# 
  1008  000B                     	;# 
  1009  000C                     	;# 
  1010  000E                     	;# 
  1011  0011                     	;# 
  1012  0012                     	;# 
  1013  0013                     	;# 
  1014  0015                     	;# 
  1015  0016                     	;# 
  1016  0016                     	;# 
  1017  0017                     	;# 
  1018  0018                     	;# 
  1019  0019                     	;# 
  1020  001A                     	;# 
  1021  001B                     	;# 
  1022  001C                     	;# 
  1023  008C                     	;# 
  1024  008E                     	;# 
  1025  0091                     	;# 
  1026  0092                     	;# 
  1027  0093                     	;# 
  1028  0095                     	;# 
  1029  0096                     	;# 
  1030  0097                     	;# 
  1031  0098                     	;# 
  1032  0099                     	;# 
  1033  009A                     	;# 
  1034  009B                     	;# 
  1035  009B                     	;# 
  1036  009C                     	;# 
  1037  009D                     	;# 
  1038  009E                     	;# 
  1039  009F                     	;# 
  1040  010C                     	;# 
  1041  010E                     	;# 
  1042  0111                     	;# 
  1043  0112                     	;# 
  1044  0113                     	;# 
  1045  0114                     	;# 
  1046  0115                     	;# 
  1047  0116                     	;# 
  1048  0117                     	;# 
  1049  0118                     	;# 
  1050  0119                     	;# 
  1051  018C                     	;# 
  1052  018E                     	;# 
  1053  0191                     	;# 
  1054  0191                     	;# 
  1055  0192                     	;# 
  1056  0193                     	;# 
  1057  0193                     	;# 
  1058  0194                     	;# 
  1059  0195                     	;# 
  1060  0196                     	;# 
  1061  0197                     	;# 
  1062  0199                     	;# 
  1063  019A                     	;# 
  1064  019B                     	;# 
  1065  019B                     	;# 
  1066  019C                     	;# 
  1067  019D                     	;# 
  1068  019E                     	;# 
  1069  019F                     	;# 
  1070  020C                     	;# 
  1071  020E                     	;# 
  1072  028C                     	;# 
  1073  028E                     	;# 
  1074  030C                     	;# 
  1075  030E                     	;# 
  1076  038C                     	;# 
  1077  038E                     	;# 
  1078  0391                     	;# 
  1079  0392                     	;# 
  1080  0393                     	;# 
  1081  0397                     	;# 
  1082  0398                     	;# 
  1083  0399                     	;# 
  1084  0691                     	;# 
  1085  0692                     	;# 
  1086  0693                     	;# 
  1087  0694                     	;# 
  1088  0695                     	;# 
  1089  0D8E                     	;# 
  1090  0D8F                     	;# 
  1091  0D90                     	;# 
  1092  0D91                     	;# 
  1093  0D91                     	;# 
  1094  0D92                     	;# 
  1095  0D93                     	;# 
  1096  0D93                     	;# 
  1097  0D94                     	;# 
  1098  0D95                     	;# 
  1099  0D95                     	;# 
  1100  0D96                     	;# 
  1101  0D97                     	;# 
  1102  0D97                     	;# 
  1103  0D98                     	;# 
  1104  0D99                     	;# 
  1105  0D99                     	;# 
  1106  0D9A                     	;# 
  1107  0D9B                     	;# 
  1108  0D9C                     	;# 
  1109  0D9C                     	;# 
  1110  0D9D                     	;# 
  1111  0D9D                     	;# 
  1112  0D9E                     	;# 
  1113  0D9F                     	;# 
  1114  0DA0                     	;# 
  1115  0DA1                     	;# 
  1116  0DA1                     	;# 
  1117  0DA2                     	;# 
  1118  0DA3                     	;# 
  1119  0DA3                     	;# 
  1120  0DA4                     	;# 
  1121  0DA5                     	;# 
  1122  0DA5                     	;# 
  1123  0DA6                     	;# 
  1124  0DA7                     	;# 
  1125  0DA7                     	;# 
  1126  0DA8                     	;# 
  1127  0DA9                     	;# 
  1128  0DA9                     	;# 
  1129  0DAA                     	;# 
  1130  0DAB                     	;# 
  1131  0DAC                     	;# 
  1132  0DAC                     	;# 
  1133  0DAD                     	;# 
  1134  0DAD                     	;# 
  1135  0DAE                     	;# 
  1136  0DAF                     	;# 
  1137  0DB0                     	;# 
  1138  0DB1                     	;# 
  1139  0DB1                     	;# 
  1140  0DB2                     	;# 
  1141  0DB3                     	;# 
  1142  0DB3                     	;# 
  1143  0DB4                     	;# 
  1144  0DB5                     	;# 
  1145  0DB5                     	;# 
  1146  0DB6                     	;# 
  1147  0DB7                     	;# 
  1148  0DB7                     	;# 
  1149  0DB8                     	;# 
  1150  0DB9                     	;# 
  1151  0DB9                     	;# 
  1152  0DBA                     	;# 
  1153  0DBB                     	;# 
  1154  0DBC                     	;# 
  1155  0DBC                     	;# 
  1156  0DBD                     	;# 
  1157  0DBD                     	;# 
  1158  0DBE                     	;# 
  1159  0DBF                     	;# 
  1160  0DC0                     	;# 
  1161  0DC1                     	;# 
  1162  0DC1                     	;# 
  1163  0DC2                     	;# 
  1164  0DC3                     	;# 
  1165  0DC3                     	;# 
  1166  0DC4                     	;# 
  1167  0DC5                     	;# 
  1168  0DC5                     	;# 
  1169  0DC6                     	;# 
  1170  0DC7                     	;# 
  1171  0DC7                     	;# 
  1172  0DC8                     	;# 
  1173  0DC9                     	;# 
  1174  0DC9                     	;# 
  1175  0DCA                     	;# 
  1176  0DCB                     	;# 
  1177  0DCC                     	;# 
  1178  0DCC                     	;# 
  1179  0DCD                     	;# 
  1180  0DCD                     	;# 
  1181  0DCE                     	;# 
  1182  0DCF                     	;# 
  1183  0DD0                     	;# 
  1184  0E0F                     	;# 
  1185  0E10                     	;# 
  1186  0E11                     	;# 
  1187  0E12                     	;# 
  1188  0E13                     	;# 
  1189  0E14                     	;# 
  1190  0E15                     	;# 
  1191  0E16                     	;# 
  1192  0E17                     	;# 
  1193  0E90                     	;# 
  1194  0E91                     	;# 
  1195  0E92                     	;# 
  1196  0E94                     	;# 
  1197  0E95                     	;# 
  1198  0EA0                     	;# 
  1199  0EA1                     	;# 
  1200  0EA2                     	;# 
  1201  0EA3                     	;# 
  1202  0EA4                     	;# 
  1203  0EA5                     	;# 
  1204  0FE4                     	;# 
  1205  0FE5                     	;# 
  1206  0FE6                     	;# 
  1207  0FE7                     	;# 
  1208  0FE8                     	;# 
  1209  0FE8                     	;# 
  1210  0FE9                     	;# 
  1211  0FEA                     	;# 
  1212  0FEA                     	;# 
  1213  0FEB                     	;# 
  1214  0FED                     	;# 
  1215  0FEE                     	;# 
  1216  0FEE                     	;# 
  1217  0FEF                     	;# 
  1218  0FFF                     	;# 
  1219  0000                     	;# 
  1220  0001                     	;# 
  1221  0002                     	;# 
  1222  0003                     	;# 
  1223  0004                     	;# 
  1224  0005                     	;# 
  1225  0006                     	;# 
  1226  0007                     	;# 
  1227  0008                     	;# 
  1228  0009                     	;# 
  1229  000A                     	;# 
  1230  000B                     	;# 
  1231  000C                     	;# 
  1232  000E                     	;# 
  1233  0011                     	;# 
  1234  0012                     	;# 
  1235  0013                     	;# 
  1236  0015                     	;# 
  1237  0016                     	;# 
  1238  0016                     	;# 
  1239  0017                     	;# 
  1240  0018                     	;# 
  1241  0019                     	;# 
  1242  001A                     	;# 
  1243  001B                     	;# 
  1244  001C                     	;# 
  1245  008C                     	;# 
  1246  008E                     	;# 
  1247  0091                     	;# 
  1248  0092                     	;# 
  1249  0093                     	;# 
  1250  0095                     	;# 
  1251  0096                     	;# 
  1252  0097                     	;# 
  1253  0098                     	;# 
  1254  0099                     	;# 
  1255  009A                     	;# 
  1256  009B                     	;# 
  1257  009B                     	;# 
  1258  009C                     	;# 
  1259  009D                     	;# 
  1260  009E                     	;# 
  1261  009F                     	;# 
  1262  010C                     	;# 
  1263  010E                     	;# 
  1264  0111                     	;# 
  1265  0112                     	;# 
  1266  0113                     	;# 
  1267  0114                     	;# 
  1268  0115                     	;# 
  1269  0116                     	;# 
  1270  0117                     	;# 
  1271  0118                     	;# 
  1272  0119                     	;# 
  1273  018C                     	;# 
  1274  018E                     	;# 
  1275  0191                     	;# 
  1276  0191                     	;# 
  1277  0192                     	;# 
  1278  0193                     	;# 
  1279  0193                     	;# 
  1280  0194                     	;# 
  1281  0195                     	;# 
  1282  0196                     	;# 
  1283  0197                     	;# 
  1284  0199                     	;# 
  1285  019A                     	;# 
  1286  019B                     	;# 
  1287  019B                     	;# 
  1288  019C                     	;# 
  1289  019D                     	;# 
  1290  019E                     	;# 
  1291  019F                     	;# 
  1292  020C                     	;# 
  1293  020E                     	;# 
  1294  028C                     	;# 
  1295  028E                     	;# 
  1296  030C                     	;# 
  1297  030E                     	;# 
  1298  038C                     	;# 
  1299  038E                     	;# 
  1300  0391                     	;# 
  1301  0392                     	;# 
  1302  0393                     	;# 
  1303  0397                     	;# 
  1304  0398                     	;# 
  1305  0399                     	;# 
  1306  0691                     	;# 
  1307  0692                     	;# 
  1308  0693                     	;# 
  1309  0694                     	;# 
  1310  0695                     	;# 
  1311  0D8E                     	;# 
  1312  0D8F                     	;# 
  1313  0D90                     	;# 
  1314  0D91                     	;# 
  1315  0D91                     	;# 
  1316  0D92                     	;# 
  1317  0D93                     	;# 
  1318  0D93                     	;# 
  1319  0D94                     	;# 
  1320  0D95                     	;# 
  1321  0D95                     	;# 
  1322  0D96                     	;# 
  1323  0D97                     	;# 
  1324  0D97                     	;# 
  1325  0D98                     	;# 
  1326  0D99                     	;# 
  1327  0D99                     	;# 
  1328  0D9A                     	;# 
  1329  0D9B                     	;# 
  1330  0D9C                     	;# 
  1331  0D9C                     	;# 
  1332  0D9D                     	;# 
  1333  0D9D                     	;# 
  1334  0D9E                     	;# 
  1335  0D9F                     	;# 
  1336  0DA0                     	;# 
  1337  0DA1                     	;# 
  1338  0DA1                     	;# 
  1339  0DA2                     	;# 
  1340  0DA3                     	;# 
  1341  0DA3                     	;# 
  1342  0DA4                     	;# 
  1343  0DA5                     	;# 
  1344  0DA5                     	;# 
  1345  0DA6                     	;# 
  1346  0DA7                     	;# 
  1347  0DA7                     	;# 
  1348  0DA8                     	;# 
  1349  0DA9                     	;# 
  1350  0DA9                     	;# 
  1351  0DAA                     	;# 
  1352  0DAB                     	;# 
  1353  0DAC                     	;# 
  1354  0DAC                     	;# 
  1355  0DAD                     	;# 
  1356  0DAD                     	;# 
  1357  0DAE                     	;# 
  1358  0DAF                     	;# 
  1359  0DB0                     	;# 
  1360  0DB1                     	;# 
  1361  0DB1                     	;# 
  1362  0DB2                     	;# 
  1363  0DB3                     	;# 
  1364  0DB3                     	;# 
  1365  0DB4                     	;# 
  1366  0DB5                     	;# 
  1367  0DB5                     	;# 
  1368  0DB6                     	;# 
  1369  0DB7                     	;# 
  1370  0DB7                     	;# 
  1371  0DB8                     	;# 
  1372  0DB9                     	;# 
  1373  0DB9                     	;# 
  1374  0DBA                     	;# 
  1375  0DBB                     	;# 
  1376  0DBC                     	;# 
  1377  0DBC                     	;# 
  1378  0DBD                     	;# 
  1379  0DBD                     	;# 
  1380  0DBE                     	;# 
  1381  0DBF                     	;# 
  1382  0DC0                     	;# 
  1383  0DC1                     	;# 
  1384  0DC1                     	;# 
  1385  0DC2                     	;# 
  1386  0DC3                     	;# 
  1387  0DC3                     	;# 
  1388  0DC4                     	;# 
  1389  0DC5                     	;# 
  1390  0DC5                     	;# 
  1391  0DC6                     	;# 
  1392  0DC7                     	;# 
  1393  0DC7                     	;# 
  1394  0DC8                     	;# 
  1395  0DC9                     	;# 
  1396  0DC9                     	;# 
  1397  0DCA                     	;# 
  1398  0DCB                     	;# 
  1399  0DCC                     	;# 
  1400  0DCC                     	;# 
  1401  0DCD                     	;# 
  1402  0DCD                     	;# 
  1403  0DCE                     	;# 
  1404  0DCF                     	;# 
  1405  0DD0                     	;# 
  1406  0E0F                     	;# 
  1407  0E10                     	;# 
  1408  0E11                     	;# 
  1409  0E12                     	;# 
  1410  0E13                     	;# 
  1411  0E14                     	;# 
  1412  0E15                     	;# 
  1413  0E16                     	;# 
  1414  0E17                     	;# 
  1415  0E90                     	;# 
  1416  0E91                     	;# 
  1417  0E92                     	;# 
  1418  0E94                     	;# 
  1419  0E95                     	;# 
  1420  0EA0                     	;# 
  1421  0EA1                     	;# 
  1422  0EA2                     	;# 
  1423  0EA3                     	;# 
  1424  0EA4                     	;# 
  1425  0EA5                     	;# 
  1426  0FE4                     	;# 
  1427  0FE5                     	;# 
  1428  0FE6                     	;# 
  1429  0FE7                     	;# 
  1430  0FE8                     	;# 
  1431  0FE8                     	;# 
  1432  0FE9                     	;# 
  1433  0FEA                     	;# 
  1434  0FEA                     	;# 
  1435  0FEB                     	;# 
  1436  0FED                     	;# 
  1437  0FEE                     	;# 
  1438  0FEE                     	;# 
  1439  0FEF                     	;# 
  1440  0000                     	;# 
  1441  0001                     	;# 
  1442  0002                     	;# 
  1443  0003                     	;# 
  1444  0004                     	;# 
  1445  0005                     	;# 
  1446  0006                     	;# 
  1447  0007                     	;# 
  1448  0008                     	;# 
  1449  0009                     	;# 
  1450  000A                     	;# 
  1451  000B                     	;# 
  1452  000C                     	;# 
  1453  000E                     	;# 
  1454  0011                     	;# 
  1455  0012                     	;# 
  1456  0013                     	;# 
  1457  0015                     	;# 
  1458  0016                     	;# 
  1459  0016                     	;# 
  1460  0017                     	;# 
  1461  0018                     	;# 
  1462  0019                     	;# 
  1463  001A                     	;# 
  1464  001B                     	;# 
  1465  001C                     	;# 
  1466  008C                     	;# 
  1467  008E                     	;# 
  1468  0091                     	;# 
  1469  0092                     	;# 
  1470  0093                     	;# 
  1471  0095                     	;# 
  1472  0096                     	;# 
  1473  0097                     	;# 
  1474  0098                     	;# 
  1475  0099                     	;# 
  1476  009A                     	;# 
  1477  009B                     	;# 
  1478  009B                     	;# 
  1479  009C                     	;# 
  1480  009D                     	;# 
  1481  009E                     	;# 
  1482  009F                     	;# 
  1483  010C                     	;# 
  1484  010E                     	;# 
  1485  0111                     	;# 
  1486  0112                     	;# 
  1487  0113                     	;# 
  1488  0114                     	;# 
  1489  0115                     	;# 
  1490  0116                     	;# 
  1491  0117                     	;# 
  1492  0118                     	;# 
  1493  0119                     	;# 
  1494  018C                     	;# 
  1495  018E                     	;# 
  1496  0191                     	;# 
  1497  0191                     	;# 
  1498  0192                     	;# 
  1499  0193                     	;# 
  1500  0193                     	;# 
  1501  0194                     	;# 
  1502  0195                     	;# 
  1503  0196                     	;# 
  1504  0197                     	;# 
  1505  0199                     	;# 
  1506  019A                     	;# 
  1507  019B                     	;# 
  1508  019B                     	;# 
  1509  019C                     	;# 
  1510  019D                     	;# 
  1511  019E                     	;# 
  1512  019F                     	;# 
  1513  020C                     	;# 
  1514  020E                     	;# 
  1515  028C                     	;# 
  1516  028E                     	;# 
  1517  030C                     	;# 
  1518  030E                     	;# 
  1519  038C                     	;# 
  1520  038E                     	;# 
  1521  0391                     	;# 
  1522  0392                     	;# 
  1523  0393                     	;# 
  1524  0397                     	;# 
  1525  0398                     	;# 
  1526  0399                     	;# 
  1527  0691                     	;# 
  1528  0692                     	;# 
  1529  0693                     	;# 
  1530  0694                     	;# 
  1531  0695                     	;# 
  1532  0D8E                     	;# 
  1533  0D8F                     	;# 
  1534  0D90                     	;# 
  1535  0D91                     	;# 
  1536  0D91                     	;# 
  1537  0D92                     	;# 
  1538  0D93                     	;# 
  1539  0D93                     	;# 
  1540  0D94                     	;# 
  1541  0D95                     	;# 
  1542  0D95                     	;# 
  1543  0D96                     	;# 
  1544  0D97                     	;# 
  1545  0D97                     	;# 
  1546  0D98                     	;# 
  1547  0D99                     	;# 
  1548  0D99                     	;# 
  1549  0D9A                     	;# 
  1550  0D9B                     	;# 
  1551  0D9C                     	;# 
  1552  0D9C                     	;# 
  1553  0D9D                     	;# 
  1554  0D9D                     	;# 
  1555  0D9E                     	;# 
  1556  0D9F                     	;# 
  1557  0DA0                     	;# 
  1558  0DA1                     	;# 
  1559  0DA1                     	;# 
  1560  0DA2                     	;# 
  1561  0DA3                     	;# 
  1562  0DA3                     	;# 
  1563  0DA4                     	;# 
  1564  0DA5                     	;# 
  1565  0DA5                     	;# 
  1566  0DA6                     	;# 
  1567  0DA7                     	;# 
  1568  0DA7                     	;# 
  1569  0DA8                     	;# 
  1570  0DA9                     	;# 
  1571  0DA9                     	;# 
  1572  0DAA                     	;# 
  1573  0DAB                     	;# 
  1574  0DAC                     	;# 
  1575  0DAC                     	;# 
  1576  0DAD                     	;# 
  1577  0DAD                     	;# 
  1578  0DAE                     	;# 
  1579  0DAF                     	;# 
  1580  0DB0                     	;# 
  1581  0DB1                     	;# 
  1582  0DB1                     	;# 
  1583  0DB2                     	;# 
  1584  0DB3                     	;# 
  1585  0DB3                     	;# 
  1586  0DB4                     	;# 
  1587  0DB5                     	;# 
  1588  0DB5                     	;# 
  1589  0DB6                     	;# 
  1590  0DB7                     	;# 
  1591  0DB7                     	;# 
  1592  0DB8                     	;# 
  1593  0DB9                     	;# 
  1594  0DB9                     	;# 
  1595  0DBA                     	;# 
  1596  0DBB                     	;# 
  1597  0DBC                     	;# 
  1598  0DBC                     	;# 
  1599  0DBD                     	;# 
  1600  0DBD                     	;# 
  1601  0DBE                     	;# 
  1602  0DBF                     	;# 
  1603  0DC0                     	;# 
  1604  0DC1                     	;# 
  1605  0DC1                     	;# 
  1606  0DC2                     	;# 
  1607  0DC3                     	;# 
  1608  0DC3                     	;# 
  1609  0DC4                     	;# 
  1610  0DC5                     	;# 
  1611  0DC5                     	;# 
  1612  0DC6                     	;# 
  1613  0DC7                     	;# 
  1614  0DC7                     	;# 
  1615  0DC8                     	;# 
  1616  0DC9                     	;# 
  1617  0DC9                     	;# 
  1618  0DCA                     	;# 
  1619  0DCB                     	;# 
  1620  0DCC                     	;# 
  1621  0DCC                     	;# 
  1622  0DCD                     	;# 
  1623  0DCD                     	;# 
  1624  0DCE                     	;# 
  1625  0DCF                     	;# 
  1626  0DD0                     	;# 
  1627  0E0F                     	;# 
  1628  0E10                     	;# 
  1629  0E11                     	;# 
  1630  0E12                     	;# 
  1631  0E13                     	;# 
  1632  0E14                     	;# 
  1633  0E15                     	;# 
  1634  0E16                     	;# 
  1635  0E17                     	;# 
  1636  0E90                     	;# 
  1637  0E91                     	;# 
  1638  0E92                     	;# 
  1639  0E94                     	;# 
  1640  0E95                     	;# 
  1641  0EA0                     	;# 
  1642  0EA1                     	;# 
  1643  0EA2                     	;# 
  1644  0EA3                     	;# 
  1645  0EA4                     	;# 
  1646  0EA5                     	;# 
  1647  0FE4                     	;# 
  1648  0FE5                     	;# 
  1649  0FE6                     	;# 
  1650  0FE7                     	;# 
  1651  0FE8                     	;# 
  1652  0FE8                     	;# 
  1653  0FE9                     	;# 
  1654  0FEA                     	;# 
  1655  0FEA                     	;# 
  1656  0FEB                     	;# 
  1657  0FED                     	;# 
  1658  0FEE                     	;# 
  1659  0FEE                     	;# 
  1660  0FEF                     	;# 
  1661  0000                     	;# 
  1662  0001                     	;# 
  1663  0002                     	;# 
  1664  0003                     	;# 
  1665  0004                     	;# 
  1666  0005                     	;# 
  1667  0006                     	;# 
  1668  0007                     	;# 
  1669  0008                     	;# 
  1670  0009                     	;# 
  1671  000A                     	;# 
  1672  000B                     	;# 
  1673  000C                     	;# 
  1674  000E                     	;# 
  1675  0011                     	;# 
  1676  0012                     	;# 
  1677  0013                     	;# 
  1678  0015                     	;# 
  1679  0016                     	;# 
  1680  0016                     	;# 
  1681  0017                     	;# 
  1682  0018                     	;# 
  1683  0019                     	;# 
  1684  001A                     	;# 
  1685  001B                     	;# 
  1686  001C                     	;# 
  1687  008C                     	;# 
  1688  008E                     	;# 
  1689  0091                     	;# 
  1690  0092                     	;# 
  1691  0093                     	;# 
  1692  0095                     	;# 
  1693  0096                     	;# 
  1694  0097                     	;# 
  1695  0098                     	;# 
  1696  0099                     	;# 
  1697  009A                     	;# 
  1698  009B                     	;# 
  1699  009B                     	;# 
  1700  009C                     	;# 
  1701  009D                     	;# 
  1702  009E                     	;# 
  1703  009F                     	;# 
  1704  010C                     	;# 
  1705  010E                     	;# 
  1706  0111                     	;# 
  1707  0112                     	;# 
  1708  0113                     	;# 
  1709  0114                     	;# 
  1710  0115                     	;# 
  1711  0116                     	;# 
  1712  0117                     	;# 
  1713  0118                     	;# 
  1714  0119                     	;# 
  1715  018C                     	;# 
  1716  018E                     	;# 
  1717  0191                     	;# 
  1718  0191                     	;# 
  1719  0192                     	;# 
  1720  0193                     	;# 
  1721  0193                     	;# 
  1722  0194                     	;# 
  1723  0195                     	;# 
  1724  0196                     	;# 
  1725  0197                     	;# 
  1726  0199                     	;# 
  1727  019A                     	;# 
  1728  019B                     	;# 
  1729  019B                     	;# 
  1730  019C                     	;# 
  1731  019D                     	;# 
  1732  019E                     	;# 
  1733  019F                     	;# 
  1734  020C                     	;# 
  1735  020E                     	;# 
  1736  028C                     	;# 
  1737  028E                     	;# 
  1738  030C                     	;# 
  1739  030E                     	;# 
  1740  038C                     	;# 
  1741  038E                     	;# 
  1742  0391                     	;# 
  1743  0392                     	;# 
  1744  0393                     	;# 
  1745  0397                     	;# 
  1746  0398                     	;# 
  1747  0399                     	;# 
  1748  0691                     	;# 
  1749  0692                     	;# 
  1750  0693                     	;# 
  1751  0694                     	;# 
  1752  0695                     	;# 
  1753  0D8E                     	;# 
  1754  0D8F                     	;# 
  1755  0D90                     	;# 
  1756  0D91                     	;# 
  1757  0D91                     	;# 
  1758  0D92                     	;# 
  1759  0D93                     	;# 
  1760  0D93                     	;# 
  1761  0D94                     	;# 
  1762  0D95                     	;# 
  1763  0D95                     	;# 
  1764  0D96                     	;# 
  1765  0D97                     	;# 
  1766  0D97                     	;# 
  1767  0D98                     	;# 
  1768  0D99                     	;# 
  1769  0D99                     	;# 
  1770  0D9A                     	;# 
  1771  0D9B                     	;# 
  1772  0D9C                     	;# 
  1773  0D9C                     	;# 
  1774  0D9D                     	;# 
  1775  0D9D                     	;# 
  1776  0D9E                     	;# 
  1777  0D9F                     	;# 
  1778  0DA0                     	;# 
  1779  0DA1                     	;# 
  1780  0DA1                     	;# 
  1781  0DA2                     	;# 
  1782  0DA3                     	;# 
  1783  0DA3                     	;# 
  1784  0DA4                     	;# 
  1785  0DA5                     	;# 
  1786  0DA5                     	;# 
  1787  0DA6                     	;# 
  1788  0DA7                     	;# 
  1789  0DA7                     	;# 
  1790  0DA8                     	;# 
  1791  0DA9                     	;# 
  1792  0DA9                     	;# 
  1793  0DAA                     	;# 
  1794  0DAB                     	;# 
  1795  0DAC                     	;# 
  1796  0DAC                     	;# 
  1797  0DAD                     	;# 
  1798  0DAD                     	;# 
  1799  0DAE                     	;# 
  1800  0DAF                     	;# 
  1801  0DB0                     	;# 
  1802  0DB1                     	;# 
  1803  0DB1                     	;# 
  1804  0DB2                     	;# 
  1805  0DB3                     	;# 
  1806  0DB3                     	;# 
  1807  0DB4                     	;# 
  1808  0DB5                     	;# 
  1809  0DB5                     	;# 
  1810  0DB6                     	;# 
  1811  0DB7                     	;# 
  1812  0DB7                     	;# 
  1813  0DB8                     	;# 
  1814  0DB9                     	;# 
  1815  0DB9                     	;# 
  1816  0DBA                     	;# 
  1817  0DBB                     	;# 
  1818  0DBC                     	;# 
  1819  0DBC                     	;# 
  1820  0DBD                     	;# 
  1821  0DBD                     	;# 
  1822  0DBE                     	;# 
  1823  0DBF                     	;# 
  1824  0DC0                     	;# 
  1825  0DC1                     	;# 
  1826  0DC1                     	;# 
  1827  0DC2                     	;# 
  1828  0DC3                     	;# 
  1829  0DC3                     	;# 
  1830  0DC4                     	;# 
  1831  0DC5                     	;# 
  1832  0DC5                     	;# 
  1833  0DC6                     	;# 
  1834  0DC7                     	;# 
  1835  0DC7                     	;# 
  1836  0DC8                     	;# 
  1837  0DC9                     	;# 
  1838  0DC9                     	;# 
  1839  0DCA                     	;# 
  1840  0DCB                     	;# 
  1841  0DCC                     	;# 
  1842  0DCC                     	;# 
  1843  0DCD                     	;# 
  1844  0DCD                     	;# 
  1845  0DCE                     	;# 
  1846  0DCF                     	;# 
  1847  0DD0                     	;# 
  1848  0E0F                     	;# 
  1849  0E10                     	;# 
  1850  0E11                     	;# 
  1851  0E12                     	;# 
  1852  0E13                     	;# 
  1853  0E14                     	;# 
  1854  0E15                     	;# 
  1855  0E16                     	;# 
  1856  0E17                     	;# 
  1857  0E90                     	;# 
  1858  0E91                     	;# 
  1859  0E92                     	;# 
  1860  0E94                     	;# 
  1861  0E95                     	;# 
  1862  0EA0                     	;# 
  1863  0EA1                     	;# 
  1864  0EA2                     	;# 
  1865  0EA3                     	;# 
  1866  0EA4                     	;# 
  1867  0EA5                     	;# 
  1868  0FE4                     	;# 
  1869  0FE5                     	;# 
  1870  0FE6                     	;# 
  1871  0FE7                     	;# 
  1872  0FE8                     	;# 
  1873  0FE8                     	;# 
  1874  0FE9                     	;# 
  1875  0FEA                     	;# 
  1876  0FEA                     	;# 
  1877  0FEB                     	;# 
  1878  0FED                     	;# 
  1879  0FEE                     	;# 
  1880  0FEE                     	;# 
  1881  0FEF                     	;# 
  1882  0000                     	;# 
  1883  0001                     	;# 
  1884  0002                     	;# 
  1885  0003                     	;# 
  1886  0004                     	;# 
  1887  0005                     	;# 
  1888  0006                     	;# 
  1889  0007                     	;# 
  1890  0008                     	;# 
  1891  0009                     	;# 
  1892  000A                     	;# 
  1893  000B                     	;# 
  1894  000C                     	;# 
  1895  000E                     	;# 
  1896  0011                     	;# 
  1897  0012                     	;# 
  1898  0013                     	;# 
  1899  0015                     	;# 
  1900  0016                     	;# 
  1901  0016                     	;# 
  1902  0017                     	;# 
  1903  0018                     	;# 
  1904  0019                     	;# 
  1905  001A                     	;# 
  1906  001B                     	;# 
  1907  001C                     	;# 
  1908  008C                     	;# 
  1909  008E                     	;# 
  1910  0091                     	;# 
  1911  0092                     	;# 
  1912  0093                     	;# 
  1913  0095                     	;# 
  1914  0096                     	;# 
  1915  0097                     	;# 
  1916  0098                     	;# 
  1917  0099                     	;# 
  1918  009A                     	;# 
  1919  009B                     	;# 
  1920  009B                     	;# 
  1921  009C                     	;# 
  1922  009D                     	;# 
  1923  009E                     	;# 
  1924  009F                     	;# 
  1925  010C                     	;# 
  1926  010E                     	;# 
  1927  0111                     	;# 
  1928  0112                     	;# 
  1929  0113                     	;# 
  1930  0114                     	;# 
  1931  0115                     	;# 
  1932  0116                     	;# 
  1933  0117                     	;# 
  1934  0118                     	;# 
  1935  0119                     	;# 
  1936  018C                     	;# 
  1937  018E                     	;# 
  1938  0191                     	;# 
  1939  0191                     	;# 
  1940  0192                     	;# 
  1941  0193                     	;# 
  1942  0193                     	;# 
  1943  0194                     	;# 
  1944  0195                     	;# 
  1945  0196                     	;# 
  1946  0197                     	;# 
  1947  0199                     	;# 
  1948  019A                     	;# 
  1949  019B                     	;# 
  1950  019B                     	;# 
  1951  019C                     	;# 
  1952  019D                     	;# 
  1953  019E                     	;# 
  1954  019F                     	;# 
  1955  020C                     	;# 
  1956  020E                     	;# 
  1957  028C                     	;# 
  1958  028E                     	;# 
  1959  030C                     	;# 
  1960  030E                     	;# 
  1961  038C                     	;# 
  1962  038E                     	;# 
  1963  0391                     	;# 
  1964  0392                     	;# 
  1965  0393                     	;# 
  1966  0397                     	;# 
  1967  0398                     	;# 
  1968  0399                     	;# 
  1969  0691                     	;# 
  1970  0692                     	;# 
  1971  0693                     	;# 
  1972  0694                     	;# 
  1973  0695                     	;# 
  1974  0D8E                     	;# 
  1975  0D8F                     	;# 
  1976  0D90                     	;# 
  1977  0D91                     	;# 
  1978  0D91                     	;# 
  1979  0D92                     	;# 
  1980  0D93                     	;# 
  1981  0D93                     	;# 
  1982  0D94                     	;# 
  1983  0D95                     	;# 
  1984  0D95                     	;# 
  1985  0D96                     	;# 
  1986  0D97                     	;# 
  1987  0D97                     	;# 
  1988  0D98                     	;# 
  1989  0D99                     	;# 
  1990  0D99                     	;# 
  1991  0D9A                     	;# 
  1992  0D9B                     	;# 
  1993  0D9C                     	;# 
  1994  0D9C                     	;# 
  1995  0D9D                     	;# 
  1996  0D9D                     	;# 
  1997  0D9E                     	;# 
  1998  0D9F                     	;# 
  1999  0DA0                     	;# 
  2000  0DA1                     	;# 
  2001  0DA1                     	;# 
  2002  0DA2                     	;# 
  2003  0DA3                     	;# 
  2004  0DA3                     	;# 
  2005  0DA4                     	;# 
  2006  0DA5                     	;# 
  2007  0DA5                     	;# 
  2008  0DA6                     	;# 
  2009  0DA7                     	;# 
  2010  0DA7                     	;# 
  2011  0DA8                     	;# 
  2012  0DA9                     	;# 
  2013  0DA9                     	;# 
  2014  0DAA                     	;# 
  2015  0DAB                     	;# 
  2016  0DAC                     	;# 
  2017  0DAC                     	;# 
  2018  0DAD                     	;# 
  2019  0DAD                     	;# 
  2020  0DAE                     	;# 
  2021  0DAF                     	;# 
  2022  0DB0                     	;# 
  2023  0DB1                     	;# 
  2024  0DB1                     	;# 
  2025  0DB2                     	;# 
  2026  0DB3                     	;# 
  2027  0DB3                     	;# 
  2028  0DB4                     	;# 
  2029  0DB5                     	;# 
  2030  0DB5                     	;# 
  2031  0DB6                     	;# 
  2032  0DB7                     	;# 
  2033  0DB7                     	;# 
  2034  0DB8                     	;# 
  2035  0DB9                     	;# 
  2036  0DB9                     	;# 
  2037  0DBA                     	;# 
  2038  0DBB                     	;# 
  2039  0DBC                     	;# 
  2040  0DBC                     	;# 
  2041  0DBD                     	;# 
  2042  0DBD                     	;# 
  2043  0DBE                     	;# 
  2044  0DBF                     	;# 
  2045  0DC0                     	;# 
  2046  0DC1                     	;# 
  2047  0DC1                     	;# 
  2048  0DC2                     	;# 
  2049  0DC3                     	;# 
  2050  0DC3                     	;# 
  2051  0DC4                     	;# 
  2052  0DC5                     	;# 
  2053  0DC5                     	;# 
  2054  0DC6                     	;# 
  2055  0DC7                     	;# 
  2056  0DC7                     	;# 
  2057  0DC8                     	;# 
  2058  0DC9                     	;# 
  2059  0DC9                     	;# 
  2060  0DCA                     	;# 
  2061  0DCB                     	;# 
  2062  0DCC                     	;# 
  2063  0DCC                     	;# 
  2064  0DCD                     	;# 
  2065  0DCD                     	;# 
  2066  0DCE                     	;# 
  2067  0DCF                     	;# 
  2068  0DD0                     	;# 
  2069  0E0F                     	;# 
  2070  0E10                     	;# 
  2071  0E11                     	;# 
  2072  0E12                     	;# 
  2073  0E13                     	;# 
  2074  0E14                     	;# 
  2075  0E15                     	;# 
  2076  0E16                     	;# 
  2077  0E17                     	;# 
  2078  0E90                     	;# 
  2079  0E91                     	;# 
  2080  0E92                     	;# 
  2081  0E94                     	;# 
  2082  0E95                     	;# 
  2083  0EA0                     	;# 
  2084  0EA1                     	;# 
  2085  0EA2                     	;# 
  2086  0EA3                     	;# 
  2087  0EA4                     	;# 
  2088  0EA5                     	;# 
  2089  0FE4                     	;# 
  2090  0FE5                     	;# 
  2091  0FE6                     	;# 
  2092  0FE7                     	;# 
  2093  0FE8                     	;# 
  2094  0FE8                     	;# 
  2095  0FE9                     	;# 
  2096  0FEA                     	;# 
  2097  0FEA                     	;# 
  2098  0FEB                     	;# 
  2099  0FED                     	;# 
  2100  0FEE                     	;# 
  2101  0FEE                     	;# 
  2102  0FEF                     	;# 
  2103  0000                     	;# 
  2104  0001                     	;# 
  2105  0002                     	;# 
  2106  0003                     	;# 
  2107  0004                     	;# 
  2108  0005                     	;# 
  2109  0006                     	;# 
  2110  0007                     	;# 
  2111  0008                     	;# 
  2112  0009                     	;# 
  2113  000A                     	;# 
  2114  000B                     	;# 
  2115  000C                     	;# 
  2116  000E                     	;# 
  2117  0011                     	;# 
  2118  0012                     	;# 
  2119  0013                     	;# 
  2120  0015                     	;# 
  2121  0016                     	;# 
  2122  0016                     	;# 
  2123  0017                     	;# 
  2124  0018                     	;# 
  2125  0019                     	;# 
  2126  001A                     	;# 
  2127  001B                     	;# 
  2128  001C                     	;# 
  2129  008C                     	;# 
  2130  008E                     	;# 
  2131  0091                     	;# 
  2132  0092                     	;# 
  2133  0093                     	;# 
  2134  0095                     	;# 
  2135  0096                     	;# 
  2136  0097                     	;# 
  2137  0098                     	;# 
  2138  0099                     	;# 
  2139  009A                     	;# 
  2140  009B                     	;# 
  2141  009B                     	;# 
  2142  009C                     	;# 
  2143  009D                     	;# 
  2144  009E                     	;# 
  2145  009F                     	;# 
  2146  010C                     	;# 
  2147  010E                     	;# 
  2148  0111                     	;# 
  2149  0112                     	;# 
  2150  0113                     	;# 
  2151  0114                     	;# 
  2152  0115                     	;# 
  2153  0116                     	;# 
  2154  0117                     	;# 
  2155  0118                     	;# 
  2156  0119                     	;# 
  2157  018C                     	;# 
  2158  018E                     	;# 
  2159  0191                     	;# 
  2160  0191                     	;# 
  2161  0192                     	;# 
  2162  0193                     	;# 
  2163  0193                     	;# 
  2164  0194                     	;# 
  2165  0195                     	;# 
  2166  0196                     	;# 
  2167  0197                     	;# 
  2168  0199                     	;# 
  2169  019A                     	;# 
  2170  019B                     	;# 
  2171  019B                     	;# 
  2172  019C                     	;# 
  2173  019D                     	;# 
  2174  019E                     	;# 
  2175  019F                     	;# 
  2176  020C                     	;# 
  2177  020E                     	;# 
  2178  028C                     	;# 
  2179  028E                     	;# 
  2180  030C                     	;# 
  2181  030E                     	;# 
  2182  038C                     	;# 
  2183  038E                     	;# 
  2184  0391                     	;# 
  2185  0392                     	;# 
  2186  0393                     	;# 
  2187  0397                     	;# 
  2188  0398                     	;# 
  2189  0399                     	;# 
  2190  0691                     	;# 
  2191  0692                     	;# 
  2192  0693                     	;# 
  2193  0694                     	;# 
  2194  0695                     	;# 
  2195  0D8E                     	;# 
  2196  0D8F                     	;# 
  2197  0D90                     	;# 
  2198  0D91                     	;# 
  2199  0D91                     	;# 
  2200  0D92                     	;# 
  2201  0D93                     	;# 
  2202  0D93                     	;# 
  2203  0D94                     	;# 
  2204  0D95                     	;# 
  2205  0D95                     	;# 
  2206  0D96                     	;# 
  2207  0D97                     	;# 
  2208  0D97                     	;# 
  2209  0D98                     	;# 
  2210  0D99                     	;# 
  2211  0D99                     	;# 
  2212  0D9A                     	;# 
  2213  0D9B                     	;# 
  2214  0D9C                     	;# 
  2215  0D9C                     	;# 
  2216  0D9D                     	;# 
  2217  0D9D                     	;# 
  2218  0D9E                     	;# 
  2219  0D9F                     	;# 
  2220  0DA0                     	;# 
  2221  0DA1                     	;# 
  2222  0DA1                     	;# 
  2223  0DA2                     	;# 
  2224  0DA3                     	;# 
  2225  0DA3                     	;# 
  2226  0DA4                     	;# 
  2227  0DA5                     	;# 
  2228  0DA5                     	;# 
  2229  0DA6                     	;# 
  2230  0DA7                     	;# 
  2231  0DA7                     	;# 
  2232  0DA8                     	;# 
  2233  0DA9                     	;# 
  2234  0DA9                     	;# 
  2235  0DAA                     	;# 
  2236  0DAB                     	;# 
  2237  0DAC                     	;# 
  2238  0DAC                     	;# 
  2239  0DAD                     	;# 
  2240  0DAD                     	;# 
  2241  0DAE                     	;# 
  2242  0DAF                     	;# 
  2243  0DB0                     	;# 
  2244  0DB1                     	;# 
  2245  0DB1                     	;# 
  2246  0DB2                     	;# 
  2247  0DB3                     	;# 
  2248  0DB3                     	;# 
  2249  0DB4                     	;# 
  2250  0DB5                     	;# 
  2251  0DB5                     	;# 
  2252  0DB6                     	;# 
  2253  0DB7                     	;# 
  2254  0DB7                     	;# 
  2255  0DB8                     	;# 
  2256  0DB9                     	;# 
  2257  0DB9                     	;# 
  2258  0DBA                     	;# 
  2259  0DBB                     	;# 
  2260  0DBC                     	;# 
  2261  0DBC                     	;# 
  2262  0DBD                     	;# 
  2263  0DBD                     	;# 
  2264  0DBE                     	;# 
  2265  0DBF                     	;# 
  2266  0DC0                     	;# 
  2267  0DC1                     	;# 
  2268  0DC1                     	;# 
  2269  0DC2                     	;# 
  2270  0DC3                     	;# 
  2271  0DC3                     	;# 
  2272  0DC4                     	;# 
  2273  0DC5                     	;# 
  2274  0DC5                     	;# 
  2275  0DC6                     	;# 
  2276  0DC7                     	;# 
  2277  0DC7                     	;# 
  2278  0DC8                     	;# 
  2279  0DC9                     	;# 
  2280  0DC9                     	;# 
  2281  0DCA                     	;# 
  2282  0DCB                     	;# 
  2283  0DCC                     	;# 
  2284  0DCC                     	;# 
  2285  0DCD                     	;# 
  2286  0DCD                     	;# 
  2287  0DCE                     	;# 
  2288  0DCF                     	;# 
  2289  0DD0                     	;# 
  2290  0E0F                     	;# 
  2291  0E10                     	;# 
  2292  0E11                     	;# 
  2293  0E12                     	;# 
  2294  0E13                     	;# 
  2295  0E14                     	;# 
  2296  0E15                     	;# 
  2297  0E16                     	;# 
  2298  0E17                     	;# 
  2299  0E90                     	;# 
  2300  0E91                     	;# 
  2301  0E92                     	;# 
  2302  0E94                     	;# 
  2303  0E95                     	;# 
  2304  0EA0                     	;# 
  2305  0EA1                     	;# 
  2306  0EA2                     	;# 
  2307  0EA3                     	;# 
  2308  0EA4                     	;# 
  2309  0EA5                     	;# 
  2310  0FE4                     	;# 
  2311  0FE5                     	;# 
  2312  0FE6                     	;# 
  2313  0FE7                     	;# 
  2314  0FE8                     	;# 
  2315  0FE8                     	;# 
  2316  0FE9                     	;# 
  2317  0FEA                     	;# 
  2318  0FEA                     	;# 
  2319  0FEB                     	;# 
  2320  0FED                     	;# 
  2321  0FEE                     	;# 
  2322  0FEE                     	;# 
  2323  0FEF                     	;# 
  2324  0000                     	;# 
  2325  0001                     	;# 
  2326  0002                     	;# 
  2327  0003                     	;# 
  2328  0004                     	;# 
  2329  0005                     	;# 
  2330  0006                     	;# 
  2331  0007                     	;# 
  2332  0008                     	;# 
  2333  0009                     	;# 
  2334  000A                     	;# 
  2335  000B                     	;# 
  2336  000C                     	;# 
  2337  000E                     	;# 
  2338  0011                     	;# 
  2339  0012                     	;# 
  2340  0013                     	;# 
  2341  0015                     	;# 
  2342  0016                     	;# 
  2343  0016                     	;# 
  2344  0017                     	;# 
  2345  0018                     	;# 
  2346  0019                     	;# 
  2347  001A                     	;# 
  2348  001B                     	;# 
  2349  001C                     	;# 
  2350  008C                     	;# 
  2351  008E                     	;# 
  2352  0091                     	;# 
  2353  0092                     	;# 
  2354  0093                     	;# 
  2355  0095                     	;# 
  2356  0096                     	;# 
  2357  0097                     	;# 
  2358  0098                     	;# 
  2359  0099                     	;# 
  2360  009A                     	;# 
  2361  009B                     	;# 
  2362  009B                     	;# 
  2363  009C                     	;# 
  2364  009D                     	;# 
  2365  009E                     	;# 
  2366  009F                     	;# 
  2367  010C                     	;# 
  2368  010E                     	;# 
  2369  0111                     	;# 
  2370  0112                     	;# 
  2371  0113                     	;# 
  2372  0114                     	;# 
  2373  0115                     	;# 
  2374  0116                     	;# 
  2375  0117                     	;# 
  2376  0118                     	;# 
  2377  0119                     	;# 
  2378  018C                     	;# 
  2379  018E                     	;# 
  2380  0191                     	;# 
  2381  0191                     	;# 
  2382  0192                     	;# 
  2383  0193                     	;# 
  2384  0193                     	;# 
  2385  0194                     	;# 
  2386  0195                     	;# 
  2387  0196                     	;# 
  2388  0197                     	;# 
  2389  0199                     	;# 
  2390  019A                     	;# 
  2391  019B                     	;# 
  2392  019B                     	;# 
  2393  019C                     	;# 
  2394  019D                     	;# 
  2395  019E                     	;# 
  2396  019F                     	;# 
  2397  020C                     	;# 
  2398  020E                     	;# 
  2399  028C                     	;# 
  2400  028E                     	;# 
  2401  030C                     	;# 
  2402  030E                     	;# 
  2403  038C                     	;# 
  2404  038E                     	;# 
  2405  0391                     	;# 
  2406  0392                     	;# 
  2407  0393                     	;# 
  2408  0397                     	;# 
  2409  0398                     	;# 
  2410  0399                     	;# 
  2411  0691                     	;# 
  2412  0692                     	;# 
  2413  0693                     	;# 
  2414  0694                     	;# 
  2415  0695                     	;# 
  2416  0D8E                     	;# 
  2417  0D8F                     	;# 
  2418  0D90                     	;# 
  2419  0D91                     	;# 
  2420  0D91                     	;# 
  2421  0D92                     	;# 
  2422  0D93                     	;# 
  2423  0D93                     	;# 
  2424  0D94                     	;# 
  2425  0D95                     	;# 
  2426  0D95                     	;# 
  2427  0D96                     	;# 
  2428  0D97                     	;# 
  2429  0D97                     	;# 
  2430  0D98                     	;# 
  2431  0D99                     	;# 
  2432  0D99                     	;# 
  2433  0D9A                     	;# 
  2434  0D9B                     	;# 
  2435  0D9C                     	;# 
  2436  0D9C                     	;# 
  2437  0D9D                     	;# 
  2438  0D9D                     	;# 
  2439  0D9E                     	;# 
  2440  0D9F                     	;# 
  2441  0DA0                     	;# 
  2442  0DA1                     	;# 
  2443  0DA1                     	;# 
  2444  0DA2                     	;# 
  2445  0DA3                     	;# 
  2446  0DA3                     	;# 
  2447  0DA4                     	;# 
  2448  0DA5                     	;# 
  2449  0DA5                     	;# 
  2450  0DA6                     	;# 
  2451  0DA7                     	;# 
  2452  0DA7                     	;# 
  2453  0DA8                     	;# 
  2454  0DA9                     	;# 
  2455  0DA9                     	;# 
  2456  0DAA                     	;# 
  2457  0DAB                     	;# 
  2458  0DAC                     	;# 
  2459  0DAC                     	;# 
  2460  0DAD                     	;# 
  2461  0DAD                     	;# 
  2462  0DAE                     	;# 
  2463  0DAF                     	;# 
  2464  0DB0                     	;# 
  2465  0DB1                     	;# 
  2466  0DB1                     	;# 
  2467  0DB2                     	;# 
  2468  0DB3                     	;# 
  2469  0DB3                     	;# 
  2470  0DB4                     	;# 
  2471  0DB5                     	;# 
  2472  0DB5                     	;# 
  2473  0DB6                     	;# 
  2474  0DB7                     	;# 
  2475  0DB7                     	;# 
  2476  0DB8                     	;# 
  2477  0DB9                     	;# 
  2478  0DB9                     	;# 
  2479  0DBA                     	;# 
  2480  0DBB                     	;# 
  2481  0DBC                     	;# 
  2482  0DBC                     	;# 
  2483  0DBD                     	;# 
  2484  0DBD                     	;# 
  2485  0DBE                     	;# 
  2486  0DBF                     	;# 
  2487  0DC0                     	;# 
  2488  0DC1                     	;# 
  2489  0DC1                     	;# 
  2490  0DC2                     	;# 
  2491  0DC3                     	;# 
  2492  0DC3                     	;# 
  2493  0DC4                     	;# 
  2494  0DC5                     	;# 
  2495  0DC5                     	;# 
  2496  0DC6                     	;# 
  2497  0DC7                     	;# 
  2498  0DC7                     	;# 
  2499  0DC8                     	;# 
  2500  0DC9                     	;# 
  2501  0DC9                     	;# 
  2502  0DCA                     	;# 
  2503  0DCB                     	;# 
  2504  0DCC                     	;# 
  2505  0DCC                     	;# 
  2506  0DCD                     	;# 
  2507  0DCD                     	;# 
  2508  0DCE                     	;# 
  2509  0DCF                     	;# 
  2510  0DD0                     	;# 
  2511  0E0F                     	;# 
  2512  0E10                     	;# 
  2513  0E11                     	;# 
  2514  0E12                     	;# 
  2515  0E13                     	;# 
  2516  0E14                     	;# 
  2517  0E15                     	;# 
  2518  0E16                     	;# 
  2519  0E17                     	;# 
  2520  0E90                     	;# 
  2521  0E91                     	;# 
  2522  0E92                     	;# 
  2523  0E94                     	;# 
  2524  0E95                     	;# 
  2525  0EA0                     	;# 
  2526  0EA1                     	;# 
  2527  0EA2                     	;# 
  2528  0EA3                     	;# 
  2529  0EA4                     	;# 
  2530  0EA5                     	;# 
  2531  0FE4                     	;# 
  2532  0FE5                     	;# 
  2533  0FE6                     	;# 
  2534  0FE7                     	;# 
  2535  0FE8                     	;# 
  2536  0FE8                     	;# 
  2537  0FE9                     	;# 
  2538  0FEA                     	;# 
  2539  0FEA                     	;# 
  2540  0FEB                     	;# 
  2541  0FED                     	;# 
  2542  0FEE                     	;# 
  2543  0FEE                     	;# 
  2544  0FEF                     	;# 
  2545  0FFF                     	;# 
  2546  0000                     	;# 
  2547  0001                     	;# 
  2548  0002                     	;# 
  2549  0003                     	;# 
  2550  0004                     	;# 
  2551  0005                     	;# 
  2552  0006                     	;# 
  2553  0007                     	;# 
  2554  0008                     	;# 
  2555  0009                     	;# 
  2556  000A                     	;# 
  2557  000B                     	;# 
  2558  000C                     	;# 
  2559  000E                     	;# 
  2560  0011                     	;# 
  2561  0012                     	;# 
  2562  0013                     	;# 
  2563  0015                     	;# 
  2564  0016                     	;# 
  2565  0016                     	;# 
  2566  0017                     	;# 
  2567  0018                     	;# 
  2568  0019                     	;# 
  2569  001A                     	;# 
  2570  001B                     	;# 
  2571  001C                     	;# 
  2572  008C                     	;# 
  2573  008E                     	;# 
  2574  0091                     	;# 
  2575  0092                     	;# 
  2576  0093                     	;# 
  2577  0095                     	;# 
  2578  0096                     	;# 
  2579  0097                     	;# 
  2580  0098                     	;# 
  2581  0099                     	;# 
  2582  009A                     	;# 
  2583  009B                     	;# 
  2584  009B                     	;# 
  2585  009C                     	;# 
  2586  009D                     	;# 
  2587  009E                     	;# 
  2588  009F                     	;# 
  2589  010C                     	;# 
  2590  010E                     	;# 
  2591  0111                     	;# 
  2592  0112                     	;# 
  2593  0113                     	;# 
  2594  0114                     	;# 
  2595  0115                     	;# 
  2596  0116                     	;# 
  2597  0117                     	;# 
  2598  0118                     	;# 
  2599  0119                     	;# 
  2600  018C                     	;# 
  2601  018E                     	;# 
  2602  0191                     	;# 
  2603  0191                     	;# 
  2604  0192                     	;# 
  2605  0193                     	;# 
  2606  0193                     	;# 
  2607  0194                     	;# 
  2608  0195                     	;# 
  2609  0196                     	;# 
  2610  0197                     	;# 
  2611  0199                     	;# 
  2612  019A                     	;# 
  2613  019B                     	;# 
  2614  019B                     	;# 
  2615  019C                     	;# 
  2616  019D                     	;# 
  2617  019E                     	;# 
  2618  019F                     	;# 
  2619  020C                     	;# 
  2620  020E                     	;# 
  2621  028C                     	;# 
  2622  028E                     	;# 
  2623  030C                     	;# 
  2624  030E                     	;# 
  2625  038C                     	;# 
  2626  038E                     	;# 
  2627  0391                     	;# 
  2628  0392                     	;# 
  2629  0393                     	;# 
  2630  0397                     	;# 
  2631  0398                     	;# 
  2632  0399                     	;# 
  2633  0691                     	;# 
  2634  0692                     	;# 
  2635  0693                     	;# 
  2636  0694                     	;# 
  2637  0695                     	;# 
  2638  0D8E                     	;# 
  2639  0D8F                     	;# 
  2640  0D90                     	;# 
  2641  0D91                     	;# 
  2642  0D91                     	;# 
  2643  0D92                     	;# 
  2644  0D93                     	;# 
  2645  0D93                     	;# 
  2646  0D94                     	;# 
  2647  0D95                     	;# 
  2648  0D95                     	;# 
  2649  0D96                     	;# 
  2650  0D97                     	;# 
  2651  0D97                     	;# 
  2652  0D98                     	;# 
  2653  0D99                     	;# 
  2654  0D99                     	;# 
  2655  0D9A                     	;# 
  2656  0D9B                     	;# 
  2657  0D9C                     	;# 
  2658  0D9C                     	;# 
  2659  0D9D                     	;# 
  2660  0D9D                     	;# 
  2661  0D9E                     	;# 
  2662  0D9F                     	;# 
  2663  0DA0                     	;# 
  2664  0DA1                     	;# 
  2665  0DA1                     	;# 
  2666  0DA2                     	;# 
  2667  0DA3                     	;# 
  2668  0DA3                     	;# 
  2669  0DA4                     	;# 
  2670  0DA5                     	;# 
  2671  0DA5                     	;# 
  2672  0DA6                     	;# 
  2673  0DA7                     	;# 
  2674  0DA7                     	;# 
  2675  0DA8                     	;# 
  2676  0DA9                     	;# 
  2677  0DA9                     	;# 
  2678  0DAA                     	;# 
  2679  0DAB                     	;# 
  2680  0DAC                     	;# 
  2681  0DAC                     	;# 
  2682  0DAD                     	;# 
  2683  0DAD                     	;# 
  2684  0DAE                     	;# 
  2685  0DAF                     	;# 
  2686  0DB0                     	;# 
  2687  0DB1                     	;# 
  2688  0DB1                     	;# 
  2689  0DB2                     	;# 
  2690  0DB3                     	;# 
  2691  0DB3                     	;# 
  2692  0DB4                     	;# 
  2693  0DB5                     	;# 
  2694  0DB5                     	;# 
  2695  0DB6                     	;# 
  2696  0DB7                     	;# 
  2697  0DB7                     	;# 
  2698  0DB8                     	;# 
  2699  0DB9                     	;# 
  2700  0DB9                     	;# 
  2701  0DBA                     	;# 
  2702  0DBB                     	;# 
  2703  0DBC                     	;# 
  2704  0DBC                     	;# 
  2705  0DBD                     	;# 
  2706  0DBD                     	;# 
  2707  0DBE                     	;# 
  2708  0DBF                     	;# 
  2709  0DC0                     	;# 
  2710  0DC1                     	;# 
  2711  0DC1                     	;# 
  2712  0DC2                     	;# 
  2713  0DC3                     	;# 
  2714  0DC3                     	;# 
  2715  0DC4                     	;# 
  2716  0DC5                     	;# 
  2717  0DC5                     	;# 
  2718  0DC6                     	;# 
  2719  0DC7                     	;# 
  2720  0DC7                     	;# 
  2721  0DC8                     	;# 
  2722  0DC9                     	;# 
  2723  0DC9                     	;# 
  2724  0DCA                     	;# 
  2725  0DCB                     	;# 
  2726  0DCC                     	;# 
  2727  0DCC                     	;# 
  2728  0DCD                     	;# 
  2729  0DCD                     	;# 
  2730  0DCE                     	;# 
  2731  0DCF                     	;# 
  2732  0DD0                     	;# 
  2733  0E0F                     	;# 
  2734  0E10                     	;# 
  2735  0E11                     	;# 
  2736  0E12                     	;# 
  2737  0E13                     	;# 
  2738  0E14                     	;# 
  2739  0E15                     	;# 
  2740  0E16                     	;# 
  2741  0E17                     	;# 
  2742  0E90                     	;# 
  2743  0E91                     	;# 
  2744  0E92                     	;# 
  2745  0E94                     	;# 
  2746  0E95                     	;# 
  2747  0EA0                     	;# 
  2748  0EA1                     	;# 
  2749  0EA2                     	;# 
  2750  0EA3                     	;# 
  2751  0EA4                     	;# 
  2752  0EA5                     	;# 
  2753  0FE4                     	;# 
  2754  0FE5                     	;# 
  2755  0FE6                     	;# 
  2756  0FE7                     	;# 
  2757  0FE8                     	;# 
  2758  0FE8                     	;# 
  2759  0FE9                     	;# 
  2760  0FEA                     	;# 
  2761  0FEA                     	;# 
  2762  0FEB                     	;# 
  2763  0FED                     	;# 
  2764  0FEE                     	;# 
  2765  0FEE                     	;# 
  2766  0FEF                     	;# 
  2767  0FFF                     	;# 
  2768  0000                     	;# 
  2769  0001                     	;# 
  2770  0002                     	;# 
  2771  0003                     	;# 
  2772  0004                     	;# 
  2773  0005                     	;# 
  2774  0006                     	;# 
  2775  0007                     	;# 
  2776  0008                     	;# 
  2777  0009                     	;# 
  2778  000A                     	;# 
  2779  000B                     	;# 
  2780  000C                     	;# 
  2781  000E                     	;# 
  2782  0011                     	;# 
  2783  0012                     	;# 
  2784  0013                     	;# 
  2785  0015                     	;# 
  2786  0016                     	;# 
  2787  0016                     	;# 
  2788  0017                     	;# 
  2789  0018                     	;# 
  2790  0019                     	;# 
  2791  001A                     	;# 
  2792  001B                     	;# 
  2793  001C                     	;# 
  2794  008C                     	;# 
  2795  008E                     	;# 
  2796  0091                     	;# 
  2797  0092                     	;# 
  2798  0093                     	;# 
  2799  0095                     	;# 
  2800  0096                     	;# 
  2801  0097                     	;# 
  2802  0098                     	;# 
  2803  0099                     	;# 
  2804  009A                     	;# 
  2805  009B                     	;# 
  2806  009B                     	;# 
  2807  009C                     	;# 
  2808  009D                     	;# 
  2809  009E                     	;# 
  2810  009F                     	;# 
  2811  010C                     	;# 
  2812  010E                     	;# 
  2813  0111                     	;# 
  2814  0112                     	;# 
  2815  0113                     	;# 
  2816  0114                     	;# 
  2817  0115                     	;# 
  2818  0116                     	;# 
  2819  0117                     	;# 
  2820  0118                     	;# 
  2821  0119                     	;# 
  2822  018C                     	;# 
  2823  018E                     	;# 
  2824  0191                     	;# 
  2825  0191                     	;# 
  2826  0192                     	;# 
  2827  0193                     	;# 
  2828  0193                     	;# 
  2829  0194                     	;# 
  2830  0195                     	;# 
  2831  0196                     	;# 
  2832  0197                     	;# 
  2833  0199                     	;# 
  2834  019A                     	;# 
  2835  019B                     	;# 
  2836  019B                     	;# 
  2837  019C                     	;# 
  2838  019D                     	;# 
  2839  019E                     	;# 
  2840  019F                     	;# 
  2841  020C                     	;# 
  2842  020E                     	;# 
  2843  028C                     	;# 
  2844  028E                     	;# 
  2845  030C                     	;# 
  2846  030E                     	;# 
  2847  038C                     	;# 
  2848  038E                     	;# 
  2849  0391                     	;# 
  2850  0392                     	;# 
  2851  0393                     	;# 
  2852  0397                     	;# 
  2853  0398                     	;# 
  2854  0399                     	;# 
  2855  0691                     	;# 
  2856  0692                     	;# 
  2857  0693                     	;# 
  2858  0694                     	;# 
  2859  0695                     	;# 
  2860  0D8E                     	;# 
  2861  0D8F                     	;# 
  2862  0D90                     	;# 
  2863  0D91                     	;# 
  2864  0D91                     	;# 
  2865  0D92                     	;# 
  2866  0D93                     	;# 
  2867  0D93                     	;# 
  2868  0D94                     	;# 
  2869  0D95                     	;# 
  2870  0D95                     	;# 
  2871  0D96                     	;# 
  2872  0D97                     	;# 
  2873  0D97                     	;# 
  2874  0D98                     	;# 
  2875  0D99                     	;# 
  2876  0D99                     	;# 
  2877  0D9A                     	;# 
  2878  0D9B                     	;# 
  2879  0D9C                     	;# 
  2880  0D9C                     	;# 
  2881  0D9D                     	;# 
  2882  0D9D                     	;# 
  2883  0D9E                     	;# 
  2884  0D9F                     	;# 
  2885  0DA0                     	;# 
  2886  0DA1                     	;# 
  2887  0DA1                     	;# 
  2888  0DA2                     	;# 
  2889  0DA3                     	;# 
  2890  0DA3                     	;# 
  2891  0DA4                     	;# 
  2892  0DA5                     	;# 
  2893  0DA5                     	;# 
  2894  0DA6                     	;# 
  2895  0DA7                     	;# 
  2896  0DA7                     	;# 
  2897  0DA8                     	;# 
  2898  0DA9                     	;# 
  2899  0DA9                     	;# 
  2900  0DAA                     	;# 
  2901  0DAB                     	;# 
  2902  0DAC                     	;# 
  2903  0DAC                     	;# 
  2904  0DAD                     	;# 
  2905  0DAD                     	;# 
  2906  0DAE                     	;# 
  2907  0DAF                     	;# 
  2908  0DB0                     	;# 
  2909  0DB1                     	;# 
  2910  0DB1                     	;# 
  2911  0DB2                     	;# 
  2912  0DB3                     	;# 
  2913  0DB3                     	;# 
  2914  0DB4                     	;# 
  2915  0DB5                     	;# 
  2916  0DB5                     	;# 
  2917  0DB6                     	;# 
  2918  0DB7                     	;# 
  2919  0DB7                     	;# 
  2920  0DB8                     	;# 
  2921  0DB9                     	;# 
  2922  0DB9                     	;# 
  2923  0DBA                     	;# 
  2924  0DBB                     	;# 
  2925  0DBC                     	;# 
  2926  0DBC                     	;# 
  2927  0DBD                     	;# 
  2928  0DBD                     	;# 
  2929  0DBE                     	;# 
  2930  0DBF                     	;# 
  2931  0DC0                     	;# 
  2932  0DC1                     	;# 
  2933  0DC1                     	;# 
  2934  0DC2                     	;# 
  2935  0DC3                     	;# 
  2936  0DC3                     	;# 
  2937  0DC4                     	;# 
  2938  0DC5                     	;# 
  2939  0DC5                     	;# 
  2940  0DC6                     	;# 
  2941  0DC7                     	;# 
  2942  0DC7                     	;# 
  2943  0DC8                     	;# 
  2944  0DC9                     	;# 
  2945  0DC9                     	;# 
  2946  0DCA                     	;# 
  2947  0DCB                     	;# 
  2948  0DCC                     	;# 
  2949  0DCC                     	;# 
  2950  0DCD                     	;# 
  2951  0DCD                     	;# 
  2952  0DCE                     	;# 
  2953  0DCF                     	;# 
  2954  0DD0                     	;# 
  2955  0E0F                     	;# 
  2956  0E10                     	;# 
  2957  0E11                     	;# 
  2958  0E12                     	;# 
  2959  0E13                     	;# 
  2960  0E14                     	;# 
  2961  0E15                     	;# 
  2962  0E16                     	;# 
  2963  0E17                     	;# 
  2964  0E90                     	;# 
  2965  0E91                     	;# 
  2966  0E92                     	;# 
  2967  0E94                     	;# 
  2968  0E95                     	;# 
  2969  0EA0                     	;# 
  2970  0EA1                     	;# 
  2971  0EA2                     	;# 
  2972  0EA3                     	;# 
  2973  0EA4                     	;# 
  2974  0EA5                     	;# 
  2975  0FE4                     	;# 
  2976  0FE5                     	;# 
  2977  0FE6                     	;# 
  2978  0FE7                     	;# 
  2979  0FE8                     	;# 
  2980  0FE8                     	;# 
  2981  0FE9                     	;# 
  2982  0FEA                     	;# 
  2983  0FEA                     	;# 
  2984  0FEB                     	;# 
  2985  0FED                     	;# 
  2986  0FEE                     	;# 
  2987  0FEE                     	;# 
  2988  0FEF                     	;# 
  2989  0FFF                     	;# 
  2990  0000                     	;# 
  2991  0001                     	;# 
  2992  0002                     	;# 
  2993  0003                     	;# 
  2994  0004                     	;# 
  2995  0005                     	;# 
  2996  0006                     	;# 
  2997  0007                     	;# 
  2998  0008                     	;# 
  2999  0009                     	;# 
  3000  000A                     	;# 
  3001  000B                     	;# 
  3002  000C                     	;# 
  3003  000E                     	;# 
  3004  0011                     	;# 
  3005  0012                     	;# 
  3006  0013                     	;# 
  3007  0015                     	;# 
  3008  0016                     	;# 
  3009  0016                     	;# 
  3010  0017                     	;# 
  3011  0018                     	;# 
  3012  0019                     	;# 
  3013  001A                     	;# 
  3014  001B                     	;# 
  3015  001C                     	;# 
  3016  008C                     	;# 
  3017  008E                     	;# 
  3018  0091                     	;# 
  3019  0092                     	;# 
  3020  0093                     	;# 
  3021  0095                     	;# 
  3022  0096                     	;# 
  3023  0097                     	;# 
  3024  0098                     	;# 
  3025  0099                     	;# 
  3026  009A                     	;# 
  3027  009B                     	;# 
  3028  009B                     	;# 
  3029  009C                     	;# 
  3030  009D                     	;# 
  3031  009E                     	;# 
  3032  009F                     	;# 
  3033  010C                     	;# 
  3034  010E                     	;# 
  3035  0111                     	;# 
  3036  0112                     	;# 
  3037  0113                     	;# 
  3038  0114                     	;# 
  3039  0115                     	;# 
  3040  0116                     	;# 
  3041  0117                     	;# 
  3042  0118                     	;# 
  3043  0119                     	;# 
  3044  018C                     	;# 
  3045  018E                     	;# 
  3046  0191                     	;# 
  3047  0191                     	;# 
  3048  0192                     	;# 
  3049  0193                     	;# 
  3050  0193                     	;# 
  3051  0194                     	;# 
  3052  0195                     	;# 
  3053  0196                     	;# 
  3054  0197                     	;# 
  3055  0199                     	;# 
  3056  019A                     	;# 
  3057  019B                     	;# 
  3058  019B                     	;# 
  3059  019C                     	;# 
  3060  019D                     	;# 
  3061  019E                     	;# 
  3062  019F                     	;# 
  3063  020C                     	;# 
  3064  020E                     	;# 
  3065  028C                     	;# 
  3066  028E                     	;# 
  3067  030C                     	;# 
  3068  030E                     	;# 
  3069  038C                     	;# 
  3070  038E                     	;# 
  3071  0391                     	;# 
  3072  0392                     	;# 
  3073  0393                     	;# 
  3074  0397                     	;# 
  3075  0398                     	;# 
  3076  0399                     	;# 
  3077  0691                     	;# 
  3078  0692                     	;# 
  3079  0693                     	;# 
  3080  0694                     	;# 
  3081  0695                     	;# 
  3082  0D8E                     	;# 
  3083  0D8F                     	;# 
  3084  0D90                     	;# 
  3085  0D91                     	;# 
  3086  0D91                     	;# 
  3087  0D92                     	;# 
  3088  0D93                     	;# 
  3089  0D93                     	;# 
  3090  0D94                     	;# 
  3091  0D95                     	;# 
  3092  0D95                     	;# 
  3093  0D96                     	;# 
  3094  0D97                     	;# 
  3095  0D97                     	;# 
  3096  0D98                     	;# 
  3097  0D99                     	;# 
  3098  0D99                     	;# 
  3099  0D9A                     	;# 
  3100  0D9B                     	;# 
  3101  0D9C                     	;# 
  3102  0D9C                     	;# 
  3103  0D9D                     	;# 
  3104  0D9D                     	;# 
  3105  0D9E                     	;# 
  3106  0D9F                     	;# 
  3107  0DA0                     	;# 
  3108  0DA1                     	;# 
  3109  0DA1                     	;# 
  3110  0DA2                     	;# 
  3111  0DA3                     	;# 
  3112  0DA3                     	;# 
  3113  0DA4                     	;# 
  3114  0DA5                     	;# 
  3115  0DA5                     	;# 
  3116  0DA6                     	;# 
  3117  0DA7                     	;# 
  3118  0DA7                     	;# 
  3119  0DA8                     	;# 
  3120  0DA9                     	;# 
  3121  0DA9                     	;# 
  3122  0DAA                     	;# 
  3123  0DAB                     	;# 
  3124  0DAC                     	;# 
  3125  0DAC                     	;# 
  3126  0DAD                     	;# 
  3127  0DAD                     	;# 
  3128  0DAE                     	;# 
  3129  0DAF                     	;# 
  3130  0DB0                     	;# 
  3131  0DB1                     	;# 
  3132  0DB1                     	;# 
  3133  0DB2                     	;# 
  3134  0DB3                     	;# 
  3135  0DB3                     	;# 
  3136  0DB4                     	;# 
  3137  0DB5                     	;# 
  3138  0DB5                     	;# 
  3139  0DB6                     	;# 
  3140  0DB7                     	;# 
  3141  0DB7                     	;# 
  3142  0DB8                     	;# 
  3143  0DB9                     	;# 
  3144  0DB9                     	;# 
  3145  0DBA                     	;# 
  3146  0DBB                     	;# 
  3147  0DBC                     	;# 
  3148  0DBC                     	;# 
  3149  0DBD                     	;# 
  3150  0DBD                     	;# 
  3151  0DBE                     	;# 
  3152  0DBF                     	;# 
  3153  0DC0                     	;# 
  3154  0DC1                     	;# 
  3155  0DC1                     	;# 
  3156  0DC2                     	;# 
  3157  0DC3                     	;# 
  3158  0DC3                     	;# 
  3159  0DC4                     	;# 
  3160  0DC5                     	;# 
  3161  0DC5                     	;# 
  3162  0DC6                     	;# 
  3163  0DC7                     	;# 
  3164  0DC7                     	;# 
  3165  0DC8                     	;# 
  3166  0DC9                     	;# 
  3167  0DC9                     	;# 
  3168  0DCA                     	;# 
  3169  0DCB                     	;# 
  3170  0DCC                     	;# 
  3171  0DCC                     	;# 
  3172  0DCD                     	;# 
  3173  0DCD                     	;# 
  3174  0DCE                     	;# 
  3175  0DCF                     	;# 
  3176  0DD0                     	;# 
  3177  0E0F                     	;# 
  3178  0E10                     	;# 
  3179  0E11                     	;# 
  3180  0E12                     	;# 
  3181  0E13                     	;# 
  3182  0E14                     	;# 
  3183  0E15                     	;# 
  3184  0E16                     	;# 
  3185  0E17                     	;# 
  3186  0E90                     	;# 
  3187  0E91                     	;# 
  3188  0E92                     	;# 
  3189  0E94                     	;# 
  3190  0E95                     	;# 
  3191  0EA0                     	;# 
  3192  0EA1                     	;# 
  3193  0EA2                     	;# 
  3194  0EA3                     	;# 
  3195  0EA4                     	;# 
  3196  0EA5                     	;# 
  3197  0FE4                     	;# 
  3198  0FE5                     	;# 
  3199  0FE6                     	;# 
  3200  0FE7                     	;# 
  3201  0FE8                     	;# 
  3202  0FE8                     	;# 
  3203  0FE9                     	;# 
  3204  0FEA                     	;# 
  3205  0FEA                     	;# 
  3206  0FEB                     	;# 
  3207  0FED                     	;# 
  3208  0FEE                     	;# 
  3209  0FEE                     	;# 
  3210  0FEF                     	;# 
  3211  0FFF                     	;# 
  3212  0000                     	;# 
  3213  0001                     	;# 
  3214  0002                     	;# 
  3215  0003                     	;# 
  3216  0004                     	;# 
  3217  0005                     	;# 
  3218  0006                     	;# 
  3219  0007                     	;# 
  3220  0008                     	;# 
  3221  0009                     	;# 
  3222  000A                     	;# 
  3223  000B                     	;# 
  3224  000C                     	;# 
  3225  000E                     	;# 
  3226  0011                     	;# 
  3227  0012                     	;# 
  3228  0013                     	;# 
  3229  0015                     	;# 
  3230  0016                     	;# 
  3231  0016                     	;# 
  3232  0017                     	;# 
  3233  0018                     	;# 
  3234  0019                     	;# 
  3235  001A                     	;# 
  3236  001B                     	;# 
  3237  001C                     	;# 
  3238  008C                     	;# 
  3239  008E                     	;# 
  3240  0091                     	;# 
  3241  0092                     	;# 
  3242  0093                     	;# 
  3243  0095                     	;# 
  3244  0096                     	;# 
  3245  0097                     	;# 
  3246  0098                     	;# 
  3247  0099                     	;# 
  3248  009A                     	;# 
  3249  009B                     	;# 
  3250  009B                     	;# 
  3251  009C                     	;# 
  3252  009D                     	;# 
  3253  009E                     	;# 
  3254  009F                     	;# 
  3255  010C                     	;# 
  3256  010E                     	;# 
  3257  0111                     	;# 
  3258  0112                     	;# 
  3259  0113                     	;# 
  3260  0114                     	;# 
  3261  0115                     	;# 
  3262  0116                     	;# 
  3263  0117                     	;# 
  3264  0118                     	;# 
  3265  0119                     	;# 
  3266  018C                     	;# 
  3267  018E                     	;# 
  3268  0191                     	;# 
  3269  0191                     	;# 
  3270  0192                     	;# 
  3271  0193                     	;# 
  3272  0193                     	;# 
  3273  0194                     	;# 
  3274  0195                     	;# 
  3275  0196                     	;# 
  3276  0197                     	;# 
  3277  0199                     	;# 
  3278  019A                     	;# 
  3279  019B                     	;# 
  3280  019B                     	;# 
  3281  019C                     	;# 
  3282  019D                     	;# 
  3283  019E                     	;# 
  3284  019F                     	;# 
  3285  020C                     	;# 
  3286  020E                     	;# 
  3287  028C                     	;# 
  3288  028E                     	;# 
  3289  030C                     	;# 
  3290  030E                     	;# 
  3291  038C                     	;# 
  3292  038E                     	;# 
  3293  0391                     	;# 
  3294  0392                     	;# 
  3295  0393                     	;# 
  3296  0397                     	;# 
  3297  0398                     	;# 
  3298  0399                     	;# 
  3299  0691                     	;# 
  3300  0692                     	;# 
  3301  0693                     	;# 
  3302  0694                     	;# 
  3303  0695                     	;# 
  3304  0D8E                     	;# 
  3305  0D8F                     	;# 
  3306  0D90                     	;# 
  3307  0D91                     	;# 
  3308  0D91                     	;# 
  3309  0D92                     	;# 
  3310  0D93                     	;# 
  3311  0D93                     	;# 
  3312  0D94                     	;# 
  3313  0D95                     	;# 
  3314  0D95                     	;# 
  3315  0D96                     	;# 
  3316  0D97                     	;# 
  3317  0D97                     	;# 
  3318  0D98                     	;# 
  3319  0D99                     	;# 
  3320  0D99                     	;# 
  3321  0D9A                     	;# 
  3322  0D9B                     	;# 
  3323  0D9C                     	;# 
  3324  0D9C                     	;# 
  3325  0D9D                     	;# 
  3326  0D9D                     	;# 
  3327  0D9E                     	;# 
  3328  0D9F                     	;# 
  3329  0DA0                     	;# 
  3330  0DA1                     	;# 
  3331  0DA1                     	;# 
  3332  0DA2                     	;# 
  3333  0DA3                     	;# 
  3334  0DA3                     	;# 
  3335  0DA4                     	;# 
  3336  0DA5                     	;# 
  3337  0DA5                     	;# 
  3338  0DA6                     	;# 
  3339  0DA7                     	;# 
  3340  0DA7                     	;# 
  3341  0DA8                     	;# 
  3342  0DA9                     	;# 
  3343  0DA9                     	;# 
  3344  0DAA                     	;# 
  3345  0DAB                     	;# 
  3346  0DAC                     	;# 
  3347  0DAC                     	;# 
  3348  0DAD                     	;# 
  3349  0DAD                     	;# 
  3350  0DAE                     	;# 
  3351  0DAF                     	;# 
  3352  0DB0                     	;# 
  3353  0DB1                     	;# 
  3354  0DB1                     	;# 
  3355  0DB2                     	;# 
  3356  0DB3                     	;# 
  3357  0DB3                     	;# 
  3358  0DB4                     	;# 
  3359  0DB5                     	;# 
  3360  0DB5                     	;# 
  3361  0DB6                     	;# 
  3362  0DB7                     	;# 
  3363  0DB7                     	;# 
  3364  0DB8                     	;# 
  3365  0DB9                     	;# 
  3366  0DB9                     	;# 
  3367  0DBA                     	;# 
  3368  0DBB                     	;# 
  3369  0DBC                     	;# 
  3370  0DBC                     	;# 
  3371  0DBD                     	;# 
  3372  0DBD                     	;# 
  3373  0DBE                     	;# 
  3374  0DBF                     	;# 
  3375  0DC0                     	;# 
  3376  0DC1                     	;# 
  3377  0DC1                     	;# 
  3378  0DC2                     	;# 
  3379  0DC3                     	;# 
  3380  0DC3                     	;# 
  3381  0DC4                     	;# 
  3382  0DC5                     	;# 
  3383  0DC5                     	;# 
  3384  0DC6                     	;# 
  3385  0DC7                     	;# 
  3386  0DC7                     	;# 
  3387  0DC8                     	;# 
  3388  0DC9                     	;# 
  3389  0DC9                     	;# 
  3390  0DCA                     	;# 
  3391  0DCB                     	;# 
  3392  0DCC                     	;# 
  3393  0DCC                     	;# 
  3394  0DCD                     	;# 
  3395  0DCD                     	;# 
  3396  0DCE                     	;# 
  3397  0DCF                     	;# 
  3398  0DD0                     	;# 
  3399  0E0F                     	;# 
  3400  0E10                     	;# 
  3401  0E11                     	;# 
  3402  0E12                     	;# 
  3403  0E13                     	;# 
  3404  0E14                     	;# 
  3405  0E15                     	;# 
  3406  0E16                     	;# 
  3407  0E17                     	;# 
  3408  0E90                     	;# 
  3409  0E91                     	;# 
  3410  0E92                     	;# 
  3411  0E94                     	;# 
  3412  0E95                     	;# 
  3413  0EA0                     	;# 
  3414  0EA1                     	;# 
  3415  0EA2                     	;# 
  3416  0EA3                     	;# 
  3417  0EA4                     	;# 
  3418  0EA5                     	;# 
  3419  0FE4                     	;# 
  3420  0FE5                     	;# 
  3421  0FE6                     	;# 
  3422  0FE7                     	;# 
  3423  0FE8                     	;# 
  3424  0FE8                     	;# 
  3425  0FE9                     	;# 
  3426  0FEA                     	;# 
  3427  0FEA                     	;# 
  3428  0FEB                     	;# 
  3429  0FED                     	;# 
  3430  0FEE                     	;# 
  3431  0FEE                     	;# 
  3432  0FEF                     	;# 
  3433  0FFF                     	;# 
  3434  0000                     	;# 
  3435  0001                     	;# 
  3436  0002                     	;# 
  3437  0003                     	;# 
  3438  0004                     	;# 
  3439  0005                     	;# 
  3440  0006                     	;# 
  3441  0007                     	;# 
  3442  0008                     	;# 
  3443  0009                     	;# 
  3444  000A                     	;# 
  3445  000B                     	;# 
  3446  000C                     	;# 
  3447  000E                     	;# 
  3448  0011                     	;# 
  3449  0012                     	;# 
  3450  0013                     	;# 
  3451  0015                     	;# 
  3452  0016                     	;# 
  3453  0016                     	;# 
  3454  0017                     	;# 
  3455  0018                     	;# 
  3456  0019                     	;# 
  3457  001A                     	;# 
  3458  001B                     	;# 
  3459  001C                     	;# 
  3460  008C                     	;# 
  3461  008E                     	;# 
  3462  0091                     	;# 
  3463  0092                     	;# 
  3464  0093                     	;# 
  3465  0095                     	;# 
  3466  0096                     	;# 
  3467  0097                     	;# 
  3468  0098                     	;# 
  3469  0099                     	;# 
  3470  009A                     	;# 
  3471  009B                     	;# 
  3472  009B                     	;# 
  3473  009C                     	;# 
  3474  009D                     	;# 
  3475  009E                     	;# 
  3476  009F                     	;# 
  3477  010C                     	;# 
  3478  010E                     	;# 
  3479  0111                     	;# 
  3480  0112                     	;# 
  3481  0113                     	;# 
  3482  0114                     	;# 
  3483  0115                     	;# 
  3484  0116                     	;# 
  3485  0117                     	;# 
  3486  0118                     	;# 
  3487  0119                     	;# 
  3488  018C                     	;# 
  3489  018E                     	;# 
  3490  0191                     	;# 
  3491  0191                     	;# 
  3492  0192                     	;# 
  3493  0193                     	;# 
  3494  0193                     	;# 
  3495  0194                     	;# 
  3496  0195                     	;# 
  3497  0196                     	;# 
  3498  0197                     	;# 
  3499  0199                     	;# 
  3500  019A                     	;# 
  3501  019B                     	;# 
  3502  019B                     	;# 
  3503  019C                     	;# 
  3504  019D                     	;# 
  3505  019E                     	;# 
  3506  019F                     	;# 
  3507  020C                     	;# 
  3508  020E                     	;# 
  3509  028C                     	;# 
  3510  028E                     	;# 
  3511  030C                     	;# 
  3512  030E                     	;# 
  3513  038C                     	;# 
  3514  038E                     	;# 
  3515  0391                     	;# 
  3516  0392                     	;# 
  3517  0393                     	;# 
  3518  0397                     	;# 
  3519  0398                     	;# 
  3520  0399                     	;# 
  3521  0691                     	;# 
  3522  0692                     	;# 
  3523  0693                     	;# 
  3524  0694                     	;# 
  3525  0695                     	;# 
  3526  0D8E                     	;# 
  3527  0D8F                     	;# 
  3528  0D90                     	;# 
  3529  0D91                     	;# 
  3530  0D91                     	;# 
  3531  0D92                     	;# 
  3532  0D93                     	;# 
  3533  0D93                     	;# 
  3534  0D94                     	;# 
  3535  0D95                     	;# 
  3536  0D95                     	;# 
  3537  0D96                     	;# 
  3538  0D97                     	;# 
  3539  0D97                     	;# 
  3540  0D98                     	;# 
  3541  0D99                     	;# 
  3542  0D99                     	;# 
  3543  0D9A                     	;# 
  3544  0D9B                     	;# 
  3545  0D9C                     	;# 
  3546  0D9C                     	;# 
  3547  0D9D                     	;# 
  3548  0D9D                     	;# 
  3549  0D9E                     	;# 
  3550  0D9F                     	;# 
  3551  0DA0                     	;# 
  3552  0DA1                     	;# 
  3553  0DA1                     	;# 
  3554  0DA2                     	;# 
  3555  0DA3                     	;# 
  3556  0DA3                     	;# 
  3557  0DA4                     	;# 
  3558  0DA5                     	;# 
  3559  0DA5                     	;# 
  3560  0DA6                     	;# 
  3561  0DA7                     	;# 
  3562  0DA7                     	;# 
  3563  0DA8                     	;# 
  3564  0DA9                     	;# 
  3565  0DA9                     	;# 
  3566  0DAA                     	;# 
  3567  0DAB                     	;# 
  3568  0DAC                     	;# 
  3569  0DAC                     	;# 
  3570  0DAD                     	;# 
  3571  0DAD                     	;# 
  3572  0DAE                     	;# 
  3573  0DAF                     	;# 
  3574  0DB0                     	;# 
  3575  0DB1                     	;# 
  3576  0DB1                     	;# 
  3577  0DB2                     	;# 
  3578  0DB3                     	;# 
  3579  0DB3                     	;# 
  3580  0DB4                     	;# 
  3581  0DB5                     	;# 
  3582  0DB5                     	;# 
  3583  0DB6                     	;# 
  3584  0DB7                     	;# 
  3585  0DB7                     	;# 
  3586  0DB8                     	;# 
  3587  0DB9                     	;# 
  3588  0DB9                     	;# 
  3589  0DBA                     	;# 
  3590  0DBB                     	;# 
  3591  0DBC                     	;# 
  3592  0DBC                     	;# 
  3593  0DBD                     	;# 
  3594  0DBD                     	;# 
  3595  0DBE                     	;# 
  3596  0DBF                     	;# 
  3597  0DC0                     	;# 
  3598  0DC1                     	;# 
  3599  0DC1                     	;# 
  3600  0DC2                     	;# 
  3601  0DC3                     	;# 
  3602  0DC3                     	;# 
  3603  0DC4                     	;# 
  3604  0DC5                     	;# 
  3605  0DC5                     	;# 
  3606  0DC6                     	;# 
  3607  0DC7                     	;# 
  3608  0DC7                     	;# 
  3609  0DC8                     	;# 
  3610  0DC9                     	;# 
  3611  0DC9                     	;# 
  3612  0DCA                     	;# 
  3613  0DCB                     	;# 
  3614  0DCC                     	;# 
  3615  0DCC                     	;# 
  3616  0DCD                     	;# 
  3617  0DCD                     	;# 
  3618  0DCE                     	;# 
  3619  0DCF                     	;# 
  3620  0DD0                     	;# 
  3621  0E0F                     	;# 
  3622  0E10                     	;# 
  3623  0E11                     	;# 
  3624  0E12                     	;# 
  3625  0E13                     	;# 
  3626  0E14                     	;# 
  3627  0E15                     	;# 
  3628  0E16                     	;# 
  3629  0E17                     	;# 
  3630  0E90                     	;# 
  3631  0E91                     	;# 
  3632  0E92                     	;# 
  3633  0E94                     	;# 
  3634  0E95                     	;# 
  3635  0EA0                     	;# 
  3636  0EA1                     	;# 
  3637  0EA2                     	;# 
  3638  0EA3                     	;# 
  3639  0EA4                     	;# 
  3640  0EA5                     	;# 
  3641  0FE4                     	;# 
  3642  0FE5                     	;# 
  3643  0FE6                     	;# 
  3644  0FE7                     	;# 
  3645  0FE8                     	;# 
  3646  0FE8                     	;# 
  3647  0FE9                     	;# 
  3648  0FEA                     	;# 
  3649  0FEA                     	;# 
  3650  0FEB                     	;# 
  3651  0FED                     	;# 
  3652  0FEE                     	;# 
  3653  0FEE                     	;# 
  3654  0FEF                     	;# 
  3655  0FFF                     	;# 
  3656  0000                     	;# 
  3657  0001                     	;# 
  3658  0002                     	;# 
  3659  0003                     	;# 
  3660  0004                     	;# 
  3661  0005                     	;# 
  3662  0006                     	;# 
  3663  0007                     	;# 
  3664  0008                     	;# 
  3665  0009                     	;# 
  3666  000A                     	;# 
  3667  000B                     	;# 
  3668  000C                     	;# 
  3669  000E                     	;# 
  3670  0011                     	;# 
  3671  0012                     	;# 
  3672  0013                     	;# 
  3673  0015                     	;# 
  3674  0016                     	;# 
  3675  0016                     	;# 
  3676  0017                     	;# 
  3677  0018                     	;# 
  3678  0019                     	;# 
  3679  001A                     	;# 
  3680  001B                     	;# 
  3681  001C                     	;# 
  3682  008C                     	;# 
  3683  008E                     	;# 
  3684  0091                     	;# 
  3685  0092                     	;# 
  3686  0093                     	;# 
  3687  0095                     	;# 
  3688  0096                     	;# 
  3689  0097                     	;# 
  3690  0098                     	;# 
  3691  0099                     	;# 
  3692  009A                     	;# 
  3693  009B                     	;# 
  3694  009B                     	;# 
  3695  009C                     	;# 
  3696  009D                     	;# 
  3697  009E                     	;# 
  3698  009F                     	;# 
  3699  010C                     	;# 
  3700  010E                     	;# 
  3701  0111                     	;# 
  3702  0112                     	;# 
  3703  0113                     	;# 
  3704  0114                     	;# 
  3705  0115                     	;# 
  3706  0116                     	;# 
  3707  0117                     	;# 
  3708  0118                     	;# 
  3709  0119                     	;# 
  3710  018C                     	;# 
  3711  018E                     	;# 
  3712  0191                     	;# 
  3713  0191                     	;# 
  3714  0192                     	;# 
  3715  0193                     	;# 
  3716  0193                     	;# 
  3717  0194                     	;# 
  3718  0195                     	;# 
  3719  0196                     	;# 
  3720  0197                     	;# 
  3721  0199                     	;# 
  3722  019A                     	;# 
  3723  019B                     	;# 
  3724  019B                     	;# 
  3725  019C                     	;# 
  3726  019D                     	;# 
  3727  019E                     	;# 
  3728  019F                     	;# 
  3729  020C                     	;# 
  3730  020E                     	;# 
  3731  028C                     	;# 
  3732  028E                     	;# 
  3733  030C                     	;# 
  3734  030E                     	;# 
  3735  038C                     	;# 
  3736  038E                     	;# 
  3737  0391                     	;# 
  3738  0392                     	;# 
  3739  0393                     	;# 
  3740  0397                     	;# 
  3741  0398                     	;# 
  3742  0399                     	;# 
  3743  0691                     	;# 
  3744  0692                     	;# 
  3745  0693                     	;# 
  3746  0694                     	;# 
  3747  0695                     	;# 
  3748  0D8E                     	;# 
  3749  0D8F                     	;# 
  3750  0D90                     	;# 
  3751  0D91                     	;# 
  3752  0D91                     	;# 
  3753  0D92                     	;# 
  3754  0D93                     	;# 
  3755  0D93                     	;# 
  3756  0D94                     	;# 
  3757  0D95                     	;# 
  3758  0D95                     	;# 
  3759  0D96                     	;# 
  3760  0D97                     	;# 
  3761  0D97                     	;# 
  3762  0D98                     	;# 
  3763  0D99                     	;# 
  3764  0D99                     	;# 
  3765  0D9A                     	;# 
  3766  0D9B                     	;# 
  3767  0D9C                     	;# 
  3768  0D9C                     	;# 
  3769  0D9D                     	;# 
  3770  0D9D                     	;# 
  3771  0D9E                     	;# 
  3772  0D9F                     	;# 
  3773  0DA0                     	;# 
  3774  0DA1                     	;# 
  3775  0DA1                     	;# 
  3776  0DA2                     	;# 
  3777  0DA3                     	;# 
  3778  0DA3                     	;# 
  3779  0DA4                     	;# 
  3780  0DA5                     	;# 
  3781  0DA5                     	;# 
  3782  0DA6                     	;# 
  3783  0DA7                     	;# 
  3784  0DA7                     	;# 
  3785  0DA8                     	;# 
  3786  0DA9                     	;# 
  3787  0DA9                     	;# 
  3788  0DAA                     	;# 
  3789  0DAB                     	;# 
  3790  0DAC                     	;# 
  3791  0DAC                     	;# 
  3792  0DAD                     	;# 
  3793  0DAD                     	;# 
  3794  0DAE                     	;# 
  3795  0DAF                     	;# 
  3796  0DB0                     	;# 
  3797  0DB1                     	;# 
  3798  0DB1                     	;# 
  3799  0DB2                     	;# 
  3800  0DB3                     	;# 
  3801  0DB3                     	;# 
  3802  0DB4                     	;# 
  3803  0DB5                     	;# 
  3804  0DB5                     	;# 
  3805  0DB6                     	;# 
  3806  0DB7                     	;# 
  3807  0DB7                     	;# 
  3808  0DB8                     	;# 
  3809  0DB9                     	;# 
  3810  0DB9                     	;# 
  3811  0DBA                     	;# 
  3812  0DBB                     	;# 
  3813  0DBC                     	;# 
  3814  0DBC                     	;# 
  3815  0DBD                     	;# 
  3816  0DBD                     	;# 
  3817  0DBE                     	;# 
  3818  0DBF                     	;# 
  3819  0DC0                     	;# 
  3820  0DC1                     	;# 
  3821  0DC1                     	;# 
  3822  0DC2                     	;# 
  3823  0DC3                     	;# 
  3824  0DC3                     	;# 
  3825  0DC4                     	;# 
  3826  0DC5                     	;# 
  3827  0DC5                     	;# 
  3828  0DC6                     	;# 
  3829  0DC7                     	;# 
  3830  0DC7                     	;# 
  3831  0DC8                     	;# 
  3832  0DC9                     	;# 
  3833  0DC9                     	;# 
  3834  0DCA                     	;# 
  3835  0DCB                     	;# 
  3836  0DCC                     	;# 
  3837  0DCC                     	;# 
  3838  0DCD                     	;# 
  3839  0DCD                     	;# 
  3840  0DCE                     	;# 
  3841  0DCF                     	;# 
  3842  0DD0                     	;# 
  3843  0E0F                     	;# 
  3844  0E10                     	;# 
  3845  0E11                     	;# 
  3846  0E12                     	;# 
  3847  0E13                     	;# 
  3848  0E14                     	;# 
  3849  0E15                     	;# 
  3850  0E16                     	;# 
  3851  0E17                     	;# 
  3852  0E90                     	;# 
  3853  0E91                     	;# 
  3854  0E92                     	;# 
  3855  0E94                     	;# 
  3856  0E95                     	;# 
  3857  0EA0                     	;# 
  3858  0EA1                     	;# 
  3859  0EA2                     	;# 
  3860  0EA3                     	;# 
  3861  0EA4                     	;# 
  3862  0EA5                     	;# 
  3863  0FE4                     	;# 
  3864  0FE5                     	;# 
  3865  0FE6                     	;# 
  3866  0FE7                     	;# 
  3867  0FE8                     	;# 
  3868  0FE8                     	;# 
  3869  0FE9                     	;# 
  3870  0FEA                     	;# 
  3871  0FEA                     	;# 
  3872  0FEB                     	;# 
  3873  0FED                     	;# 
  3874  0FEE                     	;# 
  3875  0FEE                     	;# 
  3876  0FEF                     	;# 
  3877  0FFF                     	;_sysData
  3878                           
  3879 ;; Function _TMR2_DefaultInterruptHandler is unused but had its address taken
  3880  0000                     
  3881                           	psect	idataBANK0
  3882  1003                     __pidataBANK0:	
  3883                           
  3884                           ;initializer for _resRs
  3885  1003  3410               	retlw	16
  3886  1004  3427               	retlw	39
  3887                           
  3888                           ;initializer for _resRc
  3889  1005  3410               	retlw	16
  3890  1006  3427               	retlw	39
  3891                           
  3892                           	psect	idataBANK1
  3893  1C0B                     __pidataBANK1:	
  3894                           
  3895                           ;initializer for _ik
  3896  1C0B  3414               	retlw	20
  3897  1C0C  3400               	retlw	0
  3898                           
  3899                           ;initializer for _pidU
  3900  1C0D  3414               	retlw	20
  3901  1C0E  3400               	retlw	0
  3902                           
  3903                           ;initializer for _pidpwm2_U
  3904  1C0F  3414               	retlw	20
  3905  1C10  3400               	retlw	0
  3906                           
  3907                           ;initializer for _pwm1DutyForIdrv
  3908  1C11  3405               	retlw	5
  3909  1C12  3400               	retlw	0
  3910                           
  3911                           ;initializer for _pwm2DutyForVout
  3912  1C13  3405               	retlw	5
  3913  1C14  3400               	retlw	0
  3914                           
  3915                           	psect	stringtext1
  3916  181E                     __pstringtext1:	
  3917  181E                     _HexTable:	
  3918  181E  3430               	retlw	48
  3919  181F  3431               	retlw	49
  3920  1820  3432               	retlw	50
  3921  1821  3433               	retlw	51
  3922  1822  3434               	retlw	52
  3923  1823  3435               	retlw	53
  3924  1824  3436               	retlw	54
  3925  1825  3437               	retlw	55
  3926  1826  3438               	retlw	56
  3927  1827  3439               	retlw	57
  3928  1828  3441               	retlw	65
  3929  1829  3442               	retlw	66
  3930  182A  3443               	retlw	67
  3931  182B  3444               	retlw	68
  3932  182C  3445               	retlw	69
  3933  182D  3446               	retlw	70
  3934  182E  3400               	retlw	0
  3935  182F                     __end_of_HexTable:	
  3936  0013                     _PIR3bits	set	19
  3937  001C                     _T2CONbits	set	28
  3938  0011                     _PIR1bits	set	17
  3939  001A                     _TMR2	set	26
  3940  001B                     _PR2	set	27
  3941  001C                     _T2CON	set	28
  3942  000B                     _INTCONbits	set	11
  3943  005F                     _GIE	set	95
  3944  0095                     _OPTION_REGbits	set	149
  3945  008E                     _TRISC	set	142
  3946  008C                     _TRISA	set	140
  3947  009D                     _ADCON0bits	set	157
  3948  009C                     _ADRESH	set	156
  3949  009B                     _ADRESL	set	155
  3950  009F                     _ADCON2	set	159
  3951  009E                     _ADCON1	set	158
  3952  009D                     _ADCON0	set	157
  3953  0097                     _WDTCON	set	151
  3954  0091                     _PIE1bits	set	145
  3955  010E                     _LATC	set	270
  3956  010C                     _LATA	set	268
  3957  0117                     _FVRCONbits	set	279
  3958  0117                     _FVRCON	set	279
  3959  019E                     _TXSTAbits	set	414
  3960  018C                     _ANSELA	set	396
  3961  018E                     _ANSELC	set	398
  3962  019C                     _SPBRGH	set	412
  3963  019B                     _SPBRGL	set	411
  3964  019E                     _TXSTA	set	414
  3965  019D                     _RCSTA	set	413
  3966  019F                     _BAUDCON	set	415
  3967  019A                     _TXREG	set	410
  3968  0199                     _RCREG	set	409
  3969  019D                     _RCSTAbits	set	413
  3970  0196                     _PMCON2	set	406
  3971  0193                     _PMDATL	set	403
  3972  0194                     _PMDATH	set	404
  3973  0195                     _PMCON1bits	set	405
  3974  0192                     _PMADRH	set	402
  3975  0191                     _PMADRL	set	401
  3976  020E                     _WPUC	set	526
  3977  020C                     _WPUA	set	524
  3978  028E                     _ODCONC	set	654
  3979  028C                     _ODCONA	set	652
  3980  0D9D                     _PWM1INTFbits	set	3485
  3981  0D9F                     _PWM1LDCONbits	set	3487
  3982  0D9B                     _PWM1CONbits	set	3483
  3983  0D9B                     _PWM1CON	set	3483
  3984  0D99                     _PWM1TMRL	set	3481
  3985  0D9A                     _PWM1TMRH	set	3482
  3986  0D97                     _PWM1OFL	set	3479
  3987  0D98                     _PWM1OFH	set	3480
  3988  0D95                     _PWM1PRL	set	3477
  3989  0D96                     _PWM1PRH	set	3478
  3990  0D93                     _PWM1DCL	set	3475
  3991  0D94                     _PWM1DCH	set	3476
  3992  0D91                     _PWM1PHL	set	3473
  3993  0D92                     _PWM1PHH	set	3474
  3994  0DA0                     _PWM1OFCON	set	3488
  3995  0D9F                     _PWM1LDCON	set	3487
  3996  0D9E                     _PWM1CLKCON	set	3486
  3997  0D9D                     _PWM1INTF	set	3485
  3998  0D9C                     _PWM1INTE	set	3484
  3999  0DAD                     _PWM2INTFbits	set	3501
  4000  0DAF                     _PWM2LDCONbits	set	3503
  4001  0DAB                     _PWM2CONbits	set	3499
  4002  0DAB                     _PWM2CON	set	3499
  4003  0DA9                     _PWM2TMRL	set	3497
  4004  0DAA                     _PWM2TMRH	set	3498
  4005  0DA7                     _PWM2OFL	set	3495
  4006  0DA8                     _PWM2OFH	set	3496
  4007  0DA5                     _PWM2PRL	set	3493
  4008  0DA6                     _PWM2PRH	set	3494
  4009  0DA3                     _PWM2DCL	set	3491
  4010  0DA4                     _PWM2DCH	set	3492
  4011  0DA1                     _PWM2PHL	set	3489
  4012  0DA2                     _PWM2PHH	set	3490
  4013  0DB0                     _PWM2OFCON	set	3504
  4014  0DAF                     _PWM2LDCON	set	3503
  4015  0DAE                     _PWM2CLKCON	set	3502
  4016  0DAD                     _PWM2INTF	set	3501
  4017  0DAC                     _PWM2INTE	set	3500
  4018  0E15                     _RXPPSbits	set	3605
  4019  0E0F                     _PPSLOCKbits	set	3599
  4020  0E0F                     _PPSLOCK	set	3599
  4021  0EA5                     _RC5PPSbits	set	3749
  4022  0E95                     _RA5PPSbits	set	3733
  4023  0E94                     _RA4PPSbits	set	3732
  4024                           
  4025                           	psect	cinit
  4026  088D                     start_initialization:	
  4027                           ; #config settings
  4028                           
  4029  088D                     __initialization:		;BIGRAM
  4030                           
  4031                           ; Initialize objects allocated to BANK0
  4032  088D  3003               	movlw	low __pidataBANK0
  4033  088E  0084               	movwf	4
  4034  088F  3090               	movlw	(high __pidataBANK0)| (0+128)
  4035  0890  0085               	movwf	5
  4036  0891  306C               	movlw	low __pdataBANK0
  4037  0892  0086               	movwf	6
  4038  0893  3000               	movlw	high __pdataBANK0
  4039  0894  0087               	movwf	7
  4040  0895  3000               	movlw	0
  4041  0896  00FF               	movwf	btemp+1
  4042  0897  3004               	movlw	4
  4043  0898  319C  2421  3188   	fcall	init_ram
  4044                           
  4045                           ; Initialize objects allocated to BANK1
  4046  089B  300B               	movlw	low __pidataBANK1
  4047  089C  0084               	movwf	4
  4048  089D  309C               	movlw	(high __pidataBANK1)| (0+128)
  4049  089E  0085               	movwf	5
  4050  089F  30D4               	movlw	low __pdataBANK1
  4051  08A0  0086               	movwf	6
  4052  08A1  3000               	movlw	high __pdataBANK1
  4053  08A2  0087               	movwf	7
  4054  08A3  3000               	movlw	0
  4055  08A4  00FF               	movwf	btemp+1
  4056  08A5  300A               	movlw	10
  4057  08A6  319C  2421  3188   	fcall	init_ram
  4058                           
  4059                           ; Clear objects allocated to BIGRAM
  4060  08A9  305C               	movlw	low (0+9052)
  4061  08AA  0084               	movwf	4
  4062  08AB  3023               	movlw	high (0+9052)
  4063  08AC  0085               	movwf	5
  4064  08AD  3084               	movlw	132
  4065  08AE  00FE               	movwf	btemp
  4066  08AF  3000               	movlw	0
  4067  08B0  00FF               	movwf	btemp+1
  4068  08B1  319C  2415  3188   	fcall	clear_ram0
  4069                           
  4070                           ; Clear objects allocated to COMMON
  4071  08B4  01FC               	clrf	__pbssCOMMON& (0+127)
  4072                           
  4073                           ; Clear objects allocated to BANK0
  4074  08B5  3047               	movlw	low __pbssBANK0
  4075  08B6  0084               	movwf	4
  4076  08B7  3000               	movlw	high __pbssBANK0
  4077  08B8  0085               	movwf	5
  4078  08B9  3025               	movlw	37
  4079  08BA  00FE               	movwf	btemp
  4080  08BB  3000               	movlw	0
  4081  08BC  00FF               	movwf	btemp+1
  4082  08BD  319C  2415  3188   	fcall	clear_ram0
  4083                           
  4084                           ; Clear objects allocated to BANK1
  4085  08C0  30A0               	movlw	low __pbssBANK1
  4086  08C1  0084               	movwf	4
  4087  08C2  3000               	movlw	high __pbssBANK1
  4088  08C3  0085               	movwf	5
  4089  08C4  3034               	movlw	52
  4090  08C5  00FE               	movwf	btemp
  4091  08C6  3000               	movlw	0
  4092  08C7  00FF               	movwf	btemp+1
  4093  08C8  319C  2415  3188   	fcall	clear_ram0
  4094                           
  4095                           ; Clear objects allocated to BANK2
  4096  08CB  3020               	movlw	low __pbssBANK2
  4097  08CC  0084               	movwf	4
  4098  08CD  3001               	movlw	high __pbssBANK2
  4099  08CE  0085               	movwf	5
  4100  08CF  3040               	movlw	64
  4101  08D0  00FE               	movwf	btemp
  4102  08D1  3000               	movlw	0
  4103  08D2  00FF               	movwf	btemp+1
  4104  08D3  319C  2415  3188   	fcall	clear_ram0
  4105                           
  4106                           ; Clear objects allocated to BANK3
  4107  08D6  30A0               	movlw	low __pbssBANK3
  4108  08D7  0084               	movwf	4
  4109  08D8  3001               	movlw	high __pbssBANK3
  4110  08D9  0085               	movwf	5
  4111  08DA  3040               	movlw	64
  4112  08DB  00FE               	movwf	btemp
  4113  08DC  3000               	movlw	0
  4114  08DD  00FF               	movwf	btemp+1
  4115  08DE  319C  2415         	fcall	clear_ram0
  4116  08E0                     end_of_initialization:	
  4117                           ;End of C runtime variable initialization code
  4118                           
  4119  08E0                     __end_of__initialization:	
  4120  08E0  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4121  08E1  0020               	movlb	0
  4122  08E2  318E  2E28         	ljmp	_main	;jump to C main() function
  4123                           
  4124                           	psect	bssCOMMON
  4125  007C                     __pbssCOMMON:	
  4126  007C                     _eusartRxIdleTime_ms:	
  4127  007C                     	ds	1
  4128                           
  4129                           	psect	bssBANK0
  4130  0047                     __pbssBANK0:	
  4131  0047                     _y32:	
  4132  0047                     	ds	4
  4133  004B                     _x0:	
  4134  004B                     	ds	4
  4135  004F                     _y0:	
  4136  004F                     	ds	4
  4137  0053                     _rsLoAvg:	
  4138  0053                     	ds	2
  4139  0055                     _voExpectAdcValue:	
  4140  0055                     	ds	2
  4141  0057                     _rtAdcValueVoFb:	
  4142  0057                     	ds	2
  4143  0059                     _rtAdcValueRcHi:	
  4144  0059                     	ds	2
  4145  005B                     _rtAdcValueRcLo:	
  4146  005B                     	ds	2
  4147  005D                     _rtAdcValueRsHi:	
  4148  005D                     	ds	2
  4149  005F                     _rtAdcValueRsLo:	
  4150  005F                     	ds	2
  4151  0061                     _TMR2_InterruptHandler:	
  4152  0061                     	ds	2
  4153  0063                     _pidBbSm:	
  4154  0063                     	ds	1
  4155  0064                     _xlen:	
  4156  0064                     	ds	1
  4157  0065                     _txCount:	
  4158  0065                     	ds	1
  4159  0066                     _txBufLen:	
  4160  0066                     	ds	1
  4161  0067                     _rxtemp:	
  4162  0067                     	ds	1
  4163  0068                     _subTickerX_1s:	
  4164  0068                     	ds	1
  4165  0069                     _subTickerX:	
  4166  0069                     	ds	1
  4167  006A                     _eusartRxCount:	
  4168  006A                     	ds	1
  4169  006B                     _Event:	
  4170  006B                     	ds	1
  4171                           
  4172                           	psect	dataBANK0
  4173  006C                     __pdataBANK0:	
  4174  006C                     _resRs:	
  4175  006C                     	ds	2
  4176  006E                     _resRc:	
  4177  006E                     	ds	2
  4178                           
  4179                           	psect	bssBANK1
  4180  00A0                     __pbssBANK1:	
  4181  00A0                     _err:	
  4182  00A0                     	ds	12
  4183  00AC                     _rsLoAvgBuf:	
  4184  00AC                     	ds	12
  4185  00B8                     _x32:	
  4186  00B8                     	ds	4
  4187  00BC                     _x1:	
  4188  00BC                     	ds	4
  4189  00C0                     _y1:	
  4190  00C0                     	ds	4
  4191  00C4                     _idelta:	
  4192  00C4                     	ds	2
  4193  00C6                     _iexcept:	
  4194  00C6                     	ds	2
  4195  00C8                     _pwm2Ei:	
  4196  00C8                     	ds	2
  4197  00CA                     _voExpectMv:	
  4198  00CA                     	ds	2
  4199  00CC                     _PidTd:	
  4200  00CC                     	ds	2
  4201  00CE                     _PidTi:	
  4202  00CE                     	ds	2
  4203  00D0                     _PidKp:	
  4204  00D0                     	ds	2
  4205  00D2                     _globalTicker:	
  4206  00D2                     	ds	2
  4207                           
  4208                           	psect	dataBANK1
  4209  00D4                     __pdataBANK1:	
  4210  00D4                     _ik:	
  4211  00D4                     	ds	2
  4212  00D6                     _pidU:	
  4213  00D6                     	ds	2
  4214  00D8                     _pidpwm2_U:	
  4215  00D8                     	ds	2
  4216  00DA                     _pwm1DutyForIdrv:	
  4217  00DA                     	ds	2
  4218  00DC                     _pwm2DutyForVout:	
  4219  00DC                     	ds	2
  4220                           
  4221                           	psect	bssBANK2
  4222  0120                     __pbssBANK2:	
  4223  0120                     _modbusBuf:	
  4224  0120                     	ds	32
  4225  0140                     _eusartRxBuffer:	
  4226  0140                     	ds	32
  4227                           
  4228                           	psect	bssBANK3
  4229  01A0                     __pbssBANK3:	
  4230  01A0                     _txBuf:	
  4231  01A0                     	ds	64
  4232                           
  4233                           	psect	inittext
  4234  1C21                     init_ram:	
  4235  1C21  00FE               	movwf	126
  4236  1C22                     initloop:	
  4237  1C22  0012               	moviw fsr0++
  4238  1C23  001E               	movwi fsr1++
  4239  1C24  3001               	movlw	1
  4240  1C25  02FE               	subwf	126,f
  4241  1C26  3000               	movlw	0
  4242  1C27  3BFF               	subwfb	127,f
  4243  1C28  087F               	movf	127,w
  4244  1C29  047E               	iorwf	126,w
  4245  1C2A  1903               	btfsc	3,2
  4246  1C2B  3400               	retlw	0
  4247  1C2C  2C22               	goto	initloop
  4248                           
  4249                           	psect	clrtext
  4250  1C15                     clear_ram0:	
  4251                           ;	Called with FSR0 containing the base address, and
  4252                           ;	btemp/btemp+1 has the size to clear
  4253                           
  4254  1C15  0064               	clrwdt	;clear the watchdog before getting into this loop
  4255  1C16                     clrloop0:	
  4256  1C16  0180               	clrf	0	;clear RAM location pointed to by FSR
  4257  1C17  3101               	addfsr 0,1
  4258  1C18  3001               	movlw	1
  4259  1C19  02FE               	subwf	126,f
  4260  1C1A  3000               	movlw	0
  4261  1C1B  3BFF               	subwfb	127,f
  4262  1C1C  087F               	movf	127,w
  4263  1C1D  047E               	iorwf	126,w
  4264  1C1E  1903               	btfsc	3,2
  4265  1C1F  3400               	retlw	0	;all done for this memory range, return
  4266  1C20  2C16               	goto	clrloop0	;have we reached the end yet?
  4267                           
  4268                           	psect	cstackBANK1
  4269  00DE                     __pcstackBANK1:	
  4270  00DE                     ??_main:	
  4271                           
  4272                           ; 1 bytes @ 0x0
  4273  00DE                     	ds	2
  4274                           
  4275                           	psect	cstackCOMMON
  4276  0070                     __pcstackCOMMON:	
  4277  0070                     ?_TMR2_StartTimer:	
  4278  0070                     ?_PIN_MANAGER_Initialize:	
  4279                           ; 1 bytes @ 0x0
  4280                           
  4281  0070                     ?_OSCILLATOR_Initialize:	
  4282                           ; 1 bytes @ 0x0
  4283                           
  4284  0070                     ?_WDT_Initialize:	
  4285                           ; 1 bytes @ 0x0
  4286                           
  4287  0070                     ?_ADC1_Initialize:	
  4288                           ; 1 bytes @ 0x0
  4289                           
  4290  0070                     ?_EUSART_Initialize:	
  4291                           ; 1 bytes @ 0x0
  4292                           
  4293  0070                     ?_PWM2_Initialize:	
  4294                           ; 1 bytes @ 0x0
  4295                           
  4296  0070                     ?_PWM1_Initialize:	
  4297                           ; 1 bytes @ 0x0
  4298                           
  4299  0070                     ?_TMR2_Initialize:	
  4300                           ; 1 bytes @ 0x0
  4301                           
  4302  0070                     ?_INTERRUPT_InterruptManager:	
  4303                           ; 1 bytes @ 0x0
  4304                           
  4305  0070                     ??_INTERRUPT_InterruptManager:	
  4306                           ; 1 bytes @ 0x0
  4307                           
  4308  0070                     ?_FVR_Initialize:	
  4309                           ; 1 bytes @ 0x0
  4310                           
  4311  0070                     ?_SYSTEM_Initialize:	
  4312                           ; 1 bytes @ 0x0
  4313                           
  4314  0070                     ?_uart_received_start:	
  4315                           ; 1 bytes @ 0x0
  4316                           
  4317  0070                     ?_fvr_set_gain:	
  4318                           ; 1 bytes @ 0x0
  4319                           
  4320  0070                     ?_adc_init:	
  4321                           ; 1 bytes @ 0x0
  4322                           
  4323  0070                     ?_pid_pwm1_idrv_run:	
  4324                           ; 1 bytes @ 0x0
  4325                           
  4326  0070                     ?_pid_pwm2_vout_run:	
  4327                           ; 1 bytes @ 0x0
  4328                           
  4329  0070                     ?_my_flash_read_system_erase:	
  4330                           ; 1 bytes @ 0x0
  4331                           
  4332  0070                     ?_sys_data_save:	
  4333                           ; 1 bytes @ 0x0
  4334                           
  4335  0070                     ?_modbus_response_write_single_register:	
  4336                           ; 1 bytes @ 0x0
  4337                           
  4338  0070                     ?_modbus_response_write_mult_register:	
  4339                           ; 1 bytes @ 0x0
  4340                           
  4341  0070                     ?_modbus_response_command:	
  4342                           ; 1 bytes @ 0x0
  4343                           
  4344  0070                     ?_main:	
  4345                           ; 1 bytes @ 0x0
  4346                           
  4347  0070                     ?_sys_data_init:	
  4348                           ; 1 bytes @ 0x0
  4349                           
  4350                           
  4351                           ; 2 bytes @ 0x0
  4352  0070                     	ds	1
  4353  0071                     ?_FLASH_EraseBlock:	
  4354  0071                     ?_TMR2_SetInterruptHandler:	
  4355                           ; 1 bytes @ 0x1
  4356                           
  4357  0071                     ??_TMR2_StartTimer:	
  4358                           ; 1 bytes @ 0x1
  4359                           
  4360  0071                     ??_PIN_MANAGER_Initialize:	
  4361                           ; 1 bytes @ 0x1
  4362                           
  4363  0071                     ??_OSCILLATOR_Initialize:	
  4364                           ; 1 bytes @ 0x1
  4365                           
  4366  0071                     ??_WDT_Initialize:	
  4367                           ; 1 bytes @ 0x1
  4368                           
  4369  0071                     ??_ADC1_Initialize:	
  4370                           ; 1 bytes @ 0x1
  4371                           
  4372  0071                     ??_EUSART_Initialize:	
  4373                           ; 1 bytes @ 0x1
  4374                           
  4375  0071                     ?_m_mem_cpy_len:	
  4376                           ; 1 bytes @ 0x1
  4377                           
  4378  0071                     ??_PWM2_Initialize:	
  4379                           ; 1 bytes @ 0x1
  4380                           
  4381  0071                     ??_PWM1_Initialize:	
  4382                           ; 1 bytes @ 0x1
  4383                           
  4384  0071                     ??_FVR_Initialize:	
  4385                           ; 1 bytes @ 0x1
  4386                           
  4387  0071                     ??_uart_received_start:	
  4388                           ; 1 bytes @ 0x1
  4389                           
  4390  0071                     ??_fvr_set_gain:	
  4391                           ; 1 bytes @ 0x1
  4392                           
  4393  0071                     ??_adc_init:	
  4394                           ; 1 bytes @ 0x1
  4395                           
  4396  0071                     ?_my_flash_system_read:	
  4397                           ; 1 bytes @ 0x1
  4398                           
  4399  0071                     ?_get_idrv_pwm1_duty:	
  4400                           ; 1 bytes @ 0x1
  4401                           
  4402  0071                     ?_get_vout_pwm2_duty:	
  4403                           ; 2 bytes @ 0x1
  4404                           
  4405  0071                     ?_my_flash_system_write:	
  4406                           ; 2 bytes @ 0x1
  4407                           
  4408  0071                     ?_getRegisterVal:	
  4409                           ; 2 bytes @ 0x1
  4410                           
  4411  0071                     ?_crc_sum:	
  4412                           ; 2 bytes @ 0x1
  4413                           
  4414  0071                     ?___wmul:	
  4415                           ; 2 bytes @ 0x1
  4416                           
  4417  0071                     ?___awdiv:	
  4418                           ; 2 bytes @ 0x1
  4419                           
  4420  0071                     ?___lwdiv:	
  4421                           ; 2 bytes @ 0x1
  4422                           
  4423  0071                     ?___lmul:	
  4424                           ; 2 bytes @ 0x1
  4425                           
  4426  0071                     ?___lldiv:	
  4427                           ; 4 bytes @ 0x1
  4428                           
  4429  0071                     PIN_MANAGER_Initialize@state:	
  4430                           ; 4 bytes @ 0x1
  4431                           
  4432  0071                     FLASH_EraseBlock@startAddr:	
  4433                           ; 1 bytes @ 0x1
  4434                           
  4435  0071                     TMR2_SetInterruptHandler@InterruptHandler:	
  4436                           ; 2 bytes @ 0x1
  4437                           
  4438  0071                     my_flash_system_read@buf:	
  4439                           ; 2 bytes @ 0x1
  4440                           
  4441  0071                     my_flash_system_write@buf:	
  4442                           ; 2 bytes @ 0x1
  4443                           
  4444  0071                     getRegisterVal@addr:	
  4445                           ; 2 bytes @ 0x1
  4446                           
  4447  0071                     m_mem_cpy_len@d:	
  4448                           ; 2 bytes @ 0x1
  4449                           
  4450  0071                     crc_sum@buf:	
  4451                           ; 2 bytes @ 0x1
  4452                           
  4453  0071                     ___wmul@multiplier:	
  4454                           ; 2 bytes @ 0x1
  4455                           
  4456  0071                     ___awdiv@divisor:	
  4457                           ; 2 bytes @ 0x1
  4458                           
  4459  0071                     ___lwdiv@divisor:	
  4460                           ; 2 bytes @ 0x1
  4461                           
  4462  0071                     ___lmul@multiplier:	
  4463                           ; 2 bytes @ 0x1
  4464                           
  4465  0071                     ___lldiv@divisor:	
  4466                           ; 4 bytes @ 0x1
  4467                           
  4468                           
  4469                           ; 4 bytes @ 0x1
  4470  0071                     	ds	1
  4471  0072                     fvr_set_gain@t8:	
  4472  0072                     adc_init@ch:	
  4473                           ; 1 bytes @ 0x2
  4474                           
  4475                           
  4476                           ; 1 bytes @ 0x2
  4477  0072                     	ds	1
  4478  0073                     ??_FLASH_EraseBlock:	
  4479  0073                     ??_TMR2_SetInterruptHandler:	
  4480                           ; 1 bytes @ 0x3
  4481                           
  4482  0073                     ??_TMR2_Initialize:	
  4483                           ; 1 bytes @ 0x3
  4484                           
  4485  0073                     ??_SYSTEM_Initialize:	
  4486                           ; 1 bytes @ 0x3
  4487                           
  4488  0073                     ??_get_idrv_pwm1_duty:	
  4489                           ; 1 bytes @ 0x3
  4490                           
  4491  0073                     ??_get_vout_pwm2_duty:	
  4492                           ; 1 bytes @ 0x3
  4493                           
  4494  0073                     FLASH_EraseBlock@GIEBitValue:	
  4495                           ; 1 bytes @ 0x3
  4496                           
  4497  0073                     fvr_set_gain@g:	
  4498                           ; 1 bytes @ 0x3
  4499                           
  4500  0073                     getRegisterVal@tempData:	
  4501                           ; 1 bytes @ 0x3
  4502                           
  4503  0073                     my_flash_system_read@len:	
  4504                           ; 1 bytes @ 0x3
  4505                           
  4506  0073                     my_flash_system_write@len:	
  4507                           ; 2 bytes @ 0x3
  4508                           
  4509  0073                     m_mem_cpy_len@s:	
  4510                           ; 2 bytes @ 0x3
  4511                           
  4512  0073                     crc_sum@len:	
  4513                           ; 2 bytes @ 0x3
  4514                           
  4515  0073                     ___wmul@multiplicand:	
  4516                           ; 2 bytes @ 0x3
  4517                           
  4518  0073                     ___awdiv@dividend:	
  4519                           ; 2 bytes @ 0x3
  4520                           
  4521  0073                     ___lwdiv@dividend:	
  4522                           ; 2 bytes @ 0x3
  4523                           
  4524                           
  4525                           ; 2 bytes @ 0x3
  4526  0073                     	ds	1
  4527  0074                     ??_my_flash_read_system_erase:	
  4528  0074                     ??_getRegisterVal:	
  4529                           ; 1 bytes @ 0x4
  4530                           
  4531  0074                     ?_adc_sample:	
  4532                           ; 1 bytes @ 0x4
  4533                           
  4534  0074                     adc_sample@gfvr:	
  4535                           ; 2 bytes @ 0x4
  4536                           
  4537                           
  4538                           ; 1 bytes @ 0x4
  4539  0074                     	ds	1
  4540  0075                     ??_my_flash_system_read:	
  4541  0075                     ??_my_flash_system_write:	
  4542                           ; 1 bytes @ 0x5
  4543                           
  4544  0075                     ??_crc_sum:	
  4545                           ; 1 bytes @ 0x5
  4546                           
  4547  0075                     ??___wmul:	
  4548                           ; 1 bytes @ 0x5
  4549                           
  4550  0075                     ??___awdiv:	
  4551                           ; 1 bytes @ 0x5
  4552                           
  4553  0075                     ??___lwdiv:	
  4554                           ; 1 bytes @ 0x5
  4555                           
  4556  0075                     adc_sample@num:	
  4557                           ; 1 bytes @ 0x5
  4558                           
  4559  0075                     get_idrv_pwm1_duty@t16:	
  4560                           ; 1 bytes @ 0x5
  4561                           
  4562  0075                     get_vout_pwm2_duty@t16:	
  4563                           ; 2 bytes @ 0x5
  4564                           
  4565  0075                     m_mem_cpy_len@len:	
  4566                           ; 2 bytes @ 0x5
  4567                           
  4568  0075                     ___wmul@product:	
  4569                           ; 2 bytes @ 0x5
  4570                           
  4571  0075                     ___lmul@multiplicand:	
  4572                           ; 2 bytes @ 0x5
  4573                           
  4574  0075                     ___lldiv@dividend:	
  4575                           ; 4 bytes @ 0x5
  4576                           
  4577                           
  4578                           ; 4 bytes @ 0x5
  4579  0075                     	ds	1
  4580  0076                     ??_adc_sample:	
  4581  0076                     ___awdiv@counter:	
  4582                           ; 1 bytes @ 0x6
  4583                           
  4584  0076                     ___lwdiv@quotient:	
  4585                           ; 1 bytes @ 0x6
  4586                           
  4587                           
  4588                           ; 2 bytes @ 0x6
  4589  0076                     	ds	1
  4590  0077                     ??_m_mem_cpy_len:	
  4591  0077                     ??_crc_append:	
  4592                           ; 1 bytes @ 0x7
  4593                           
  4594  0077                     ?_set_idrv_pwm1_duty:	
  4595                           ; 1 bytes @ 0x7
  4596                           
  4597  0077                     ?_set_vout_pwm2_duty:	
  4598                           ; 1 bytes @ 0x7
  4599                           
  4600  0077                     my_flash_system_read@GIEBitValue:	
  4601                           ; 1 bytes @ 0x7
  4602                           
  4603  0077                     ___awdiv@sign:	
  4604                           ; 1 bytes @ 0x7
  4605                           
  4606  0077                     set_idrv_pwm1_duty@duty:	
  4607                           ; 1 bytes @ 0x7
  4608                           
  4609  0077                     set_vout_pwm2_duty@duty:	
  4610                           ; 2 bytes @ 0x7
  4611                           
  4612                           
  4613                           ; 2 bytes @ 0x7
  4614  0077                     	ds	1
  4615  0078                     ??_crc_verify:	
  4616  0078                     ?_uart_send_len:	
  4617                           ; 1 bytes @ 0x8
  4618                           
  4619  0078                     uart_send_len@len:	
  4620                           ; 1 bytes @ 0x8
  4621                           
  4622  0078                     ___lwdiv@counter:	
  4623                           ; 1 bytes @ 0x8
  4624                           
  4625  0078                     my_flash_system_read@flashAddr:	
  4626                           ; 1 bytes @ 0x8
  4627                           
  4628  0078                     getRegisterVal@t16:	
  4629                           ; 2 bytes @ 0x8
  4630                           
  4631  0078                     ___awdiv@quotient:	
  4632                           ; 2 bytes @ 0x8
  4633                           
  4634                           
  4635                           ; 2 bytes @ 0x8
  4636  0078                     	ds	1
  4637  0079                     ??_uart_send_len:	
  4638  0079                     ??_set_idrv_pwm1_duty:	
  4639                           ; 1 bytes @ 0x9
  4640                           
  4641  0079                     ??_set_vout_pwm2_duty:	
  4642                           ; 1 bytes @ 0x9
  4643                           
  4644  0079                     ??___lmul:	
  4645                           ; 1 bytes @ 0x9
  4646                           
  4647  0079                     ??___lldiv:	
  4648                           ; 1 bytes @ 0x9
  4649                           
  4650  0079                     ??___aldiv:	
  4651                           ; 1 bytes @ 0x9
  4652                           
  4653  0079                     set_idrv_pwm1_duty@t16:	
  4654                           ; 1 bytes @ 0x9
  4655                           
  4656  0079                     set_vout_pwm2_duty@t16:	
  4657                           ; 2 bytes @ 0x9
  4658                           
  4659                           
  4660                           ; 2 bytes @ 0x9
  4661  0079                     	ds	1
  4662  007A                     ??_calc_rs_lo_avg:	
  4663  007A                     getRegisterVal@tempAddr:	
  4664                           ; 1 bytes @ 0xA
  4665                           
  4666  007A                     my_flash_system_read@i:	
  4667                           ; 1 bytes @ 0xA
  4668                           
  4669                           
  4670                           ; 2 bytes @ 0xA
  4671  007A                     	ds	1
  4672  007B                     uart_send_len@buf:	
  4673                           
  4674                           ; 1 bytes @ 0xB
  4675  007B                     	ds	1
  4676  007C                     ??_sys_data_save:	
  4677                           
  4678                           	psect	cstackBANK0
  4679  0020                     __pcstackBANK0:	
  4680                           ; 1 bytes @ 0xC
  4681                           
  4682  0020                     ??_pid_pwm2_vout_run:	
  4683  0020                     adc_sample@ch:	
  4684                           ; 1 bytes @ 0x0
  4685                           
  4686  0020                     my_flash_system_write@j:	
  4687                           ; 1 bytes @ 0x0
  4688                           
  4689  0020                     crc_sum@j:	
  4690                           ; 2 bytes @ 0x0
  4691                           
  4692  0020                     ___lmul@product:	
  4693                           ; 2 bytes @ 0x0
  4694                           
  4695  0020                     ___lldiv@quotient:	
  4696                           ; 4 bytes @ 0x0
  4697                           
  4698                           
  4699                           ; 4 bytes @ 0x0
  4700  0020                     	ds	1
  4701  0021                     adc_sample@i:	
  4702                           
  4703                           ; 2 bytes @ 0x1
  4704  0021                     	ds	1
  4705  0022                     my_flash_system_write@GIEBitValue:	
  4706  0022                     pid_pwm2_vout_run@__ei:	
  4707                           ; 1 bytes @ 0x2
  4708                           
  4709  0022                     crc_sum@i:	
  4710                           ; 2 bytes @ 0x2
  4711                           
  4712                           
  4713                           ; 2 bytes @ 0x2
  4714  0022                     	ds	1
  4715  0023                     adc_sample@ret:	
  4716  0023                     my_flash_system_write@blocNum:	
  4717                           ; 2 bytes @ 0x3
  4718                           
  4719                           
  4720                           ; 2 bytes @ 0x3
  4721  0023                     	ds	1
  4722  0024                     ?___aldiv:	
  4723  0024                     ___lldiv@counter:	
  4724                           ; 4 bytes @ 0x4
  4725                           
  4726  0024                     pid_pwm2_vout_run@t16:	
  4727                           ; 1 bytes @ 0x4
  4728                           
  4729  0024                     crc_sum@crc:	
  4730                           ; 2 bytes @ 0x4
  4731                           
  4732  0024                     ___aldiv@divisor:	
  4733                           ; 2 bytes @ 0x4
  4734                           
  4735                           
  4736                           ; 4 bytes @ 0x4
  4737  0024                     	ds	1
  4738  0025                     ?_calc_rs_lo_avg:	
  4739  0025                     ?_calc_temp_rs:	
  4740                           ; 2 bytes @ 0x5
  4741                           
  4742  0025                     ?_calc_temp_rc:	
  4743                           ; 4 bytes @ 0x5
  4744                           
  4745  0025                     adc_sample@t16:	
  4746                           ; 4 bytes @ 0x5
  4747                           
  4748  0025                     calc_rs_lo_avg@x:	
  4749                           ; 2 bytes @ 0x5
  4750                           
  4751  0025                     my_flash_system_write@loc:	
  4752                           ; 2 bytes @ 0x5
  4753                           
  4754                           
  4755                           ; 2 bytes @ 0x5
  4756  0025                     	ds	1
  4757  0026                     ?_crc_append:	
  4758  0026                     ?_crc_verify:	
  4759                           ; 1 bytes @ 0x6
  4760                           
  4761  0026                     crc_verify@message:	
  4762                           ; 1 bytes @ 0x6
  4763                           
  4764  0026                     crc_append@message:	
  4765                           ; 2 bytes @ 0x6
  4766                           
  4767                           
  4768                           ; 2 bytes @ 0x6
  4769  0026                     	ds	1
  4770  0027                     my_flash_system_write@flashAddr:	
  4771  0027                     calc_rs_lo_avg@t32:	
  4772                           ; 2 bytes @ 0x7
  4773                           
  4774                           
  4775                           ; 4 bytes @ 0x7
  4776  0027                     	ds	1
  4777  0028                     crc_verify@n:	
  4778  0028                     crc_append@n:	
  4779                           ; 2 bytes @ 0x8
  4780                           
  4781  0028                     ___aldiv@dividend:	
  4782                           ; 2 bytes @ 0x8
  4783                           
  4784                           
  4785                           ; 4 bytes @ 0x8
  4786  0028                     	ds	1
  4787  0029                     ??_calc_temp_rs:	
  4788  0029                     ??_calc_temp_rc:	
  4789                           ; 1 bytes @ 0x9
  4790                           
  4791  0029                     my_flash_system_write@i:	
  4792                           ; 1 bytes @ 0x9
  4793                           
  4794                           
  4795                           ; 1 bytes @ 0x9
  4796  0029                     	ds	1
  4797  002A                     crc_verify@crccal:	
  4798  002A                     crc_append@crc:	
  4799                           ; 2 bytes @ 0xA
  4800                           
  4801                           
  4802                           ; 2 bytes @ 0xA
  4803  002A                     	ds	1
  4804  002B                     calc_rs_lo_avg@i:	
  4805                           
  4806                           ; 1 bytes @ 0xB
  4807  002B                     	ds	1
  4808  002C                     ?_modbus_response_illgeal_function:	
  4809  002C                     ??_modbus_response_write_single_register:	
  4810                           ; 1 bytes @ 0xC
  4811                           
  4812  002C                     ??_modbus_response_write_mult_register:	
  4813                           ; 1 bytes @ 0xC
  4814                           
  4815  002C                     ??_modbus_response_command:	
  4816                           ; 1 bytes @ 0xC
  4817                           
  4818  002C                     modbus_response_illgeal_function@errcode:	
  4819                           ; 1 bytes @ 0xC
  4820                           
  4821  002C                     ___aldiv@counter:	
  4822                           ; 1 bytes @ 0xC
  4823                           
  4824  002C                     crc_verify@expected:	
  4825                           ; 1 bytes @ 0xC
  4826                           
  4827                           
  4828                           ; 2 bytes @ 0xC
  4829  002C                     	ds	1
  4830  002D                     ??_modbus_response_illgeal_function:	
  4831  002D                     modbus_response_write_mult_register@startAddr:	
  4832                           ; 1 bytes @ 0xD
  4833                           
  4834  002D                     ___aldiv@sign:	
  4835                           ; 1 bytes @ 0xD
  4836                           
  4837                           
  4838                           ; 1 bytes @ 0xD
  4839  002D                     	ds	1
  4840  002E                     ??_sys_data_init:	
  4841  002E                     modbus_response_illgeal_function@buf:	
  4842                           ; 1 bytes @ 0xE
  4843                           
  4844  002E                     modbus_response_write_mult_register@len:	
  4845                           ; 1 bytes @ 0xE
  4846                           
  4847  002E                     modbus_response_command@tmpAddr:	
  4848                           ; 1 bytes @ 0xE
  4849                           
  4850  002E                     ___aldiv@quotient:	
  4851                           ; 2 bytes @ 0xE
  4852                           
  4853                           
  4854                           ; 4 bytes @ 0xE
  4855  002E                     	ds	1
  4856  002F                     modbus_response_illgeal_function@pmdbs:	
  4857  002F                     modbus_response_write_mult_register@rbuf:	
  4858                           ; 1 bytes @ 0xF
  4859                           
  4860                           
  4861                           ; 1 bytes @ 0xF
  4862  002F                     	ds	1
  4863  0030                     modbus_response_write_single_register@fiSave:	
  4864  0030                     modbus_response_write_mult_register@stb:	
  4865                           ; 1 bytes @ 0x10
  4866                           
  4867  0030                     modbus_response_command@startAddr:	
  4868                           ; 1 bytes @ 0x10
  4869                           
  4870                           
  4871                           ; 2 bytes @ 0x10
  4872  0030                     	ds	1
  4873  0031                     modbus_response_write_single_register@t16:	
  4874                           
  4875                           ; 2 bytes @ 0x11
  4876  0031                     	ds	1
  4877  0032                     ??_pid_pwm1_idrv_run:	
  4878  0032                     ?_calc_expect_vout_adc_value:	
  4879                           ; 1 bytes @ 0x12
  4880                           
  4881  0032                     modbus_response_command@i:	
  4882                           ; 2 bytes @ 0x12
  4883                           
  4884  0032                     calc_expect_vout_adc_value@x:	
  4885                           ; 1 bytes @ 0x12
  4886                           
  4887                           
  4888                           ; 2 bytes @ 0x12
  4889  0032                     	ds	1
  4890  0033                     modbus_response_write_single_register@i:	
  4891  0033                     modbus_response_command@pmdbs:	
  4892                           ; 1 bytes @ 0x13
  4893                           
  4894                           
  4895                           ; 1 bytes @ 0x13
  4896  0033                     	ds	1
  4897  0034                     ??_calc_expect_vout_adc_value:	
  4898  0034                     modbus_response_write_single_register@pmdbs:	
  4899                           ; 1 bytes @ 0x14
  4900                           
  4901  0034                     modbus_response_command@len:	
  4902                           ; 1 bytes @ 0x14
  4903                           
  4904  0034                     sys_data_init@ret:	
  4905                           ; 1 bytes @ 0x14
  4906                           
  4907                           
  4908                           ; 2 bytes @ 0x14
  4909  0034                     	ds	1
  4910  0035                     modbus_response_write_single_register@rbuf:	
  4911  0035                     modbus_response_command@rbuf:	
  4912                           ; 1 bytes @ 0x15
  4913                           
  4914                           
  4915                           ; 1 bytes @ 0x15
  4916  0035                     	ds	1
  4917  0036                     sys_data_init@i:	
  4918  0036                     modbus_response_write_single_register@startAddr:	
  4919                           ; 2 bytes @ 0x16
  4920                           
  4921  0036                     modbus_response_command@tempData:	
  4922                           ; 2 bytes @ 0x16
  4923                           
  4924                           
  4925                           ; 2 bytes @ 0x16
  4926  0036                     	ds	2
  4927  0038                     ?_modbus_response_process:	
  4928  0038                     modbus_response_process@rlen:	
  4929                           ; 1 bytes @ 0x18
  4930                           
  4931                           
  4932                           ; 2 bytes @ 0x18
  4933  0038                     	ds	2
  4934  003A                     ??_modbus_response_process:	
  4935  003A                     pid_pwm1_idrv_run@t32:	
  4936                           ; 1 bytes @ 0x1A
  4937                           
  4938                           
  4939                           ; 4 bytes @ 0x1A
  4940  003A                     	ds	1
  4941  003B                     modbus_response_process@resp:	
  4942                           
  4943                           ; 1 bytes @ 0x1B
  4944  003B                     	ds	1
  4945  003C                     modbus_response_process@pmdbs:	
  4946                           
  4947                           ; 1 bytes @ 0x1C
  4948  003C                     	ds	1
  4949  003D                     modbus_response_process@rbuf:	
  4950                           
  4951                           ; 1 bytes @ 0x1D
  4952  003D                     	ds	5
  4953  0042                     calc_expect_vout_adc_value@t32:	
  4954                           
  4955                           ; 4 bytes @ 0x22
  4956  0042                     	ds	4
  4957  0046                     calc_expect_vout_adc_value@i:	
  4958                           
  4959                           ; 1 bytes @ 0x26
  4960  0046                     	ds	1
  4961                           
  4962                           	psect	maintext
  4963  0E28                     __pmaintext:	
  4964 ;;
  4965 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  4966 ;;
  4967 ;; *************** function _main *****************
  4968 ;; Defined at:
  4969 ;;		line 17 in file "src/app/main.c"
  4970 ;; Parameters:    Size  Location     Type
  4971 ;;		None
  4972 ;; Auto vars:     Size  Location     Type
  4973 ;;		None
  4974 ;; Return value:  Size  Location     Type
  4975 ;;                  1    wreg      void 
  4976 ;; Registers used:
  4977 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4978 ;; Tracked objects:
  4979 ;;		On entry : B1F/0
  4980 ;;		On exit  : 0/0
  4981 ;;		Unchanged: 0/0
  4982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4985 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4986 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4987 ;;Total ram usage:        2 bytes
  4988 ;; Hardware stack levels required when called:    6
  4989 ;; This function calls:
  4990 ;;		_SYSTEM_Initialize
  4991 ;;		_adc_sample
  4992 ;;		_calc_expect_vout_adc_value
  4993 ;;		_calc_rs_lo_avg
  4994 ;;		_calc_temp_rc
  4995 ;;		_calc_temp_rs
  4996 ;;		_m_mem_cpy_len
  4997 ;;		_modbus_response_process
  4998 ;;		_pid_pwm1_idrv_run
  4999 ;;		_pid_pwm2_vout_run
  5000 ;;		_sys_data_init
  5001 ;;		_uart_received_start
  5002 ;;		_uart_send_len
  5003 ;; This function is called by:
  5004 ;;		Startup code after reset
  5005 ;; This function uses a non-reentrant model
  5006 ;;
  5007                           
  5008                           
  5009                           ;psect for function _main
  5010  0E28                     _main:	
  5011                           
  5012                           ;main.c: 19: __nop();
  5013                           
  5014                           ;incstack = 0
  5015                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5016  0E28  0000               	nop
  5017                           
  5018                           ;main.c: 20: isRunInBoot=0xaa;
  5019  0E29  30AA               	movlw	170
  5020  0E2A  0021               	movlb	1	; select bank1
  5021  0E2B  00DE               	movwf	??_main^(0+128)
  5022  0E2C  085E               	movf	??_main^(0+128),w
  5023  0E2D  003F               	movlb	31	; select bank31
  5024  0E2E  00FF               	movwf	127	;volatile
  5025                           
  5026                           ;main.c: 21: isRunInBoot=isRunInBoot;
  5027  0E2F  087F               	movf	127,w	;volatile
  5028  0E30  0021               	movlb	1	; select bank1
  5029  0E31  00DE               	movwf	??_main^(0+128)
  5030  0E32  085E               	movf	??_main^(0+128),w
  5031  0E33  003F               	movlb	31	; select bank31
  5032  0E34  00FF               	movwf	127	;volatile
  5033                           
  5034                           ;main.c: 22: SYSTEM_Initialize();
  5035  0E35  319C  24E2  318E   	fcall	_SYSTEM_Initialize
  5036                           
  5037                           ;main.c: 23: do{ (INTCONbits.GIE = 1); (INTCONbits.PEIE = 1); }while(0);;
  5038  0E38  178B               	bsf	11,7	;volatile
  5039  0E39  170B               	bsf	11,6	;volatile
  5040                           
  5041                           ;main.c: 26: TXSTAbits.TXEN=0;
  5042  0E3A  0023               	movlb	3	; select bank3
  5043  0E3B  129E               	bcf	30,5	;volatile
  5044                           
  5045                           ;main.c: 27: sys_data_init();
  5046  0E3C  3195  255A  318E   	fcall	_sys_data_init
  5047                           
  5048                           ;main.c: 30: modbusBuf[0]=0x55;
  5049  0E3F  3055               	movlw	85
  5050  0E40  0021               	movlb	1	; select bank1
  5051  0E41  00DE               	movwf	??_main^(0+128)
  5052  0E42  085E               	movf	??_main^(0+128),w
  5053  0E43  0022               	movlb	2	; select bank2
  5054  0E44  00A0               	movwf	_modbusBuf^(0+256)
  5055                           
  5056                           ;main.c: 31: modbusBuf[1]=0xaa;
  5057  0E45  30AA               	movlw	170
  5058  0E46  0021               	movlb	1	; select bank1
  5059  0E47  00DE               	movwf	??_main^(0+128)
  5060  0E48  085E               	movf	??_main^(0+128),w
  5061  0E49  0022               	movlb	2	; select bank2
  5062  0E4A  00A1               	movwf	(_modbusBuf^(0+256)+1)
  5063                           
  5064                           ;main.c: 32: uart_send_len(modbusBuf,2);
  5065  0E4B  3002               	movlw	2
  5066  0E4C  0021               	movlb	1	; select bank1
  5067  0E4D  00DE               	movwf	??_main^(0+128)
  5068  0E4E  085E               	movf	??_main^(0+128),w
  5069  0E4F  00F8               	movwf	uart_send_len@len
  5070  0E50  3020               	movlw	(low (_modbusBuf| (0+256)))& (0+255)
  5071  0E51  319E  26C5  318E   	fcall	_uart_send_len
  5072  0E54                     l5377:	
  5073                           ;main.c: 33: while (1){
  5074                           
  5075                           
  5076                           ;main.c: 34: if(Event & (1<<2)){
  5077  0E54  0020               	movlb	0	; select bank0
  5078  0E55  1D6B               	btfss	_Event,2	;volatile
  5079  0E56  2EFD               	goto	l5407
  5080                           
  5081                           ;main.c: 35: Event &= ~(1<<2);
  5082  0E57  30FB               	movlw	251
  5083  0E58  0021               	movlb	1	; select bank1
  5084  0E59  00DE               	movwf	??_main^(0+128)
  5085  0E5A  085E               	movf	??_main^(0+128),w
  5086  0E5B  0020               	movlb	0	; select bank0
  5087  0E5C  05EB               	andwf	_Event,f	;volatile
  5088                           
  5089                           ;main.c: 37: rtAdcValueRsLo=adc_sample(channel_AN6,1,32);
  5090  0E5D  01F4               	clrf	adc_sample@gfvr
  5091  0E5E  0AF4               	incf	adc_sample@gfvr,f
  5092  0E5F  3020               	movlw	32
  5093  0E60  0021               	movlb	1	; select bank1
  5094  0E61  00DE               	movwf	??_main^(0+128)
  5095  0E62  085E               	movf	??_main^(0+128),w
  5096  0E63  00F5               	movwf	adc_sample@num
  5097  0E64  3006               	movlw	6
  5098  0E65  3191  21F9  318E   	fcall	_adc_sample
  5099  0E68  0875               	movf	?_adc_sample+1,w
  5100  0E69  0020               	movlb	0	; select bank0
  5101  0E6A  00E0               	movwf	_rtAdcValueRsLo+1
  5102  0E6B  0874               	movf	?_adc_sample,w
  5103  0E6C  00DF               	movwf	_rtAdcValueRsLo
  5104                           
  5105                           ;main.c: 39: rtAdcValueRsHi=adc_sample(channel_AN5,3,32);
  5106  0E6D  3003               	movlw	3
  5107  0E6E  0021               	movlb	1	; select bank1
  5108  0E6F  00DE               	movwf	??_main^(0+128)
  5109  0E70  085E               	movf	??_main^(0+128),w
  5110  0E71  00F4               	movwf	adc_sample@gfvr
  5111  0E72  3020               	movlw	32
  5112  0E73  00DF               	movwf	(??_main+1)^(0+128)
  5113  0E74  085F               	movf	(??_main+1)^(0+128),w
  5114  0E75  00F5               	movwf	adc_sample@num
  5115  0E76  3005               	movlw	5
  5116  0E77  3191  21F9  318E   	fcall	_adc_sample
  5117  0E7A  0875               	movf	?_adc_sample+1,w
  5118  0E7B  0020               	movlb	0	; select bank0
  5119  0E7C  00DE               	movwf	_rtAdcValueRsHi+1
  5120  0E7D  0874               	movf	?_adc_sample,w
  5121  0E7E  00DD               	movwf	_rtAdcValueRsHi
  5122                           
  5123                           ;main.c: 42: rtAdcValueRcLo=adc_sample(channel_AN4,3,32);
  5124  0E7F  3003               	movlw	3
  5125  0E80  0021               	movlb	1	; select bank1
  5126  0E81  00DE               	movwf	??_main^(0+128)
  5127  0E82  085E               	movf	??_main^(0+128),w
  5128  0E83  00F4               	movwf	adc_sample@gfvr
  5129  0E84  3020               	movlw	32
  5130  0E85  00DF               	movwf	(??_main+1)^(0+128)
  5131  0E86  085F               	movf	(??_main+1)^(0+128),w
  5132  0E87  00F5               	movwf	adc_sample@num
  5133  0E88  3004               	movlw	4
  5134  0E89  3191  21F9  318E   	fcall	_adc_sample
  5135  0E8C  0875               	movf	?_adc_sample+1,w
  5136  0E8D  0020               	movlb	0	; select bank0
  5137  0E8E  00DC               	movwf	_rtAdcValueRcLo+1
  5138  0E8F  0874               	movf	?_adc_sample,w
  5139  0E90  00DB               	movwf	_rtAdcValueRcLo
  5140                           
  5141                           ;main.c: 43: rtAdcValueRcLo>>=1;
  5142  0E91  3001               	movlw	1
  5143  0E92                     u4965:	
  5144  0E92  36DC               	lsrf	_rtAdcValueRcLo+1,f
  5145  0E93  0CDB               	rrf	_rtAdcValueRcLo,f
  5146  0E94  0B89               	decfsz	9,f
  5147  0E95  2E92               	goto	u4965
  5148                           
  5149                           ;main.c: 44: rtAdcValueRcHi=adc_sample(channel_AN2,3,32);
  5150  0E96  3003               	movlw	3
  5151  0E97  0021               	movlb	1	; select bank1
  5152  0E98  00DE               	movwf	??_main^(0+128)
  5153  0E99  085E               	movf	??_main^(0+128),w
  5154  0E9A  00F4               	movwf	adc_sample@gfvr
  5155  0E9B  3020               	movlw	32
  5156  0E9C  00DF               	movwf	(??_main+1)^(0+128)
  5157  0E9D  085F               	movf	(??_main+1)^(0+128),w
  5158  0E9E  00F5               	movwf	adc_sample@num
  5159  0E9F  3002               	movlw	2
  5160  0EA0  3191  21F9  318E   	fcall	_adc_sample
  5161  0EA3  0875               	movf	?_adc_sample+1,w
  5162  0EA4  0020               	movlb	0	; select bank0
  5163  0EA5  00DA               	movwf	_rtAdcValueRcHi+1
  5164  0EA6  0874               	movf	?_adc_sample,w
  5165  0EA7  00D9               	movwf	_rtAdcValueRcHi
  5166                           
  5167                           ;main.c: 45: rtAdcValueRcHi>>=1;
  5168  0EA8  3001               	movlw	1
  5169  0EA9                     u4975:	
  5170  0EA9  36DA               	lsrf	_rtAdcValueRcHi+1,f
  5171  0EAA  0CD9               	rrf	_rtAdcValueRcHi,f
  5172  0EAB  0B89               	decfsz	9,f
  5173  0EAC  2EA9               	goto	u4975
  5174                           
  5175                           ;main.c: 47: rtAdcValueVoFb=adc_sample(channel_AN7,3,32);
  5176  0EAD  3003               	movlw	3
  5177  0EAE  0021               	movlb	1	; select bank1
  5178  0EAF  00DE               	movwf	??_main^(0+128)
  5179  0EB0  085E               	movf	??_main^(0+128),w
  5180  0EB1  00F4               	movwf	adc_sample@gfvr
  5181  0EB2  3020               	movlw	32
  5182  0EB3  00DF               	movwf	(??_main+1)^(0+128)
  5183  0EB4  085F               	movf	(??_main+1)^(0+128),w
  5184  0EB5  00F5               	movwf	adc_sample@num
  5185  0EB6  3007               	movlw	7
  5186  0EB7  3191  21F9  318E   	fcall	_adc_sample
  5187  0EBA  0875               	movf	?_adc_sample+1,w
  5188  0EBB  0020               	movlb	0	; select bank0
  5189  0EBC  00D8               	movwf	_rtAdcValueVoFb+1
  5190  0EBD  0874               	movf	?_adc_sample,w
  5191  0EBE  00D7               	movwf	_rtAdcValueVoFb
  5192                           
  5193                           ;main.c: 48: rtAdcValueVoFb>>=1;
  5194  0EBF  3001               	movlw	1
  5195  0EC0                     u4985:	
  5196  0EC0  36D8               	lsrf	_rtAdcValueVoFb+1,f
  5197  0EC1  0CD7               	rrf	_rtAdcValueVoFb,f
  5198  0EC2  0B89               	decfsz	9,f
  5199  0EC3  2EC0               	goto	u4985
  5200                           
  5201                           ;main.c: 50: resRc=calc_temp_rc();
  5202  0EC4  3196  262E  318E   	fcall	_calc_temp_rc
  5203  0EC7  0020               	movlb	0	; select bank0
  5204  0EC8  0826               	movf	?_calc_temp_rc+1,w
  5205  0EC9  00EF               	movwf	_resRc+1
  5206  0ECA  0825               	movf	?_calc_temp_rc,w
  5207  0ECB  00EE               	movwf	_resRc
  5208                           
  5209                           ;main.c: 51: resRs=calc_temp_rs();
  5210  0ECC  3194  2439  318E   	fcall	_calc_temp_rs
  5211  0ECF  0020               	movlb	0	; select bank0
  5212  0ED0  0826               	movf	?_calc_temp_rs+1,w
  5213  0ED1  00ED               	movwf	_resRs+1
  5214  0ED2  0825               	movf	?_calc_temp_rs,w
  5215  0ED3  00EC               	movwf	_resRs
  5216                           
  5217                           ;main.c: 53: pid_pwm1_idrv_run();
  5218  0ED4  3188  20E4  318E   	fcall	_pid_pwm1_idrv_run
  5219                           
  5220                           ;main.c: 54: rsLoAvg=calc_rs_lo_avg(rtAdcValueRsLo);
  5221  0ED7  0020               	movlb	0	; select bank0
  5222  0ED8  0860               	movf	_rtAdcValueRsLo+1,w
  5223  0ED9  00A6               	movwf	calc_rs_lo_avg@x+1
  5224  0EDA  085F               	movf	_rtAdcValueRsLo,w
  5225  0EDB  00A5               	movwf	calc_rs_lo_avg@x
  5226  0EDC  3192  2256  318E   	fcall	_calc_rs_lo_avg
  5227  0EDF  0020               	movlb	0	; select bank0
  5228  0EE0  0826               	movf	?_calc_rs_lo_avg+1,w
  5229  0EE1  00D4               	movwf	_rsLoAvg+1
  5230  0EE2  0825               	movf	?_calc_rs_lo_avg,w
  5231  0EE3  00D3               	movwf	_rsLoAvg
  5232                           
  5233                           ;main.c: 56: voExpectMv=calc_expect_vout_adc_value(rsLoAvg);
  5234  0EE4  0854               	movf	_rsLoAvg+1,w
  5235  0EE5  00B3               	movwf	calc_expect_vout_adc_value@x+1
  5236  0EE6  0853               	movf	_rsLoAvg,w
  5237  0EE7  00B2               	movwf	calc_expect_vout_adc_value@x
  5238  0EE8  318A  22E0  318E   	fcall	_calc_expect_vout_adc_value
  5239  0EEB  0020               	movlb	0	; select bank0
  5240  0EEC  0833               	movf	?_calc_expect_vout_adc_value+1,w
  5241  0EED  0021               	movlb	1	; select bank1
  5242  0EEE  00CB               	movwf	(_voExpectMv+1)^(0+128)
  5243  0EEF  0020               	movlb	0	; select bank0
  5244  0EF0  0832               	movf	?_calc_expect_vout_adc_value,w
  5245  0EF1  0021               	movlb	1	; select bank1
  5246  0EF2  00CA               	movwf	_voExpectMv^(0+128)
  5247                           
  5248                           ;main.c: 57: voExpectAdcValue=(voExpectMv<<1);
  5249  0EF3  354A               	lslf	_voExpectMv^(0+128),w
  5250  0EF4  0020               	movlb	0	; select bank0
  5251  0EF5  00D5               	movwf	_voExpectAdcValue
  5252  0EF6  0021               	movlb	1	; select bank1
  5253  0EF7  0D4B               	rlf	(_voExpectMv+1)^(0+128),w
  5254  0EF8  0020               	movlb	0	; select bank0
  5255  0EF9  00D6               	movwf	_voExpectAdcValue+1
  5256                           
  5257                           ;main.c: 58: pid_pwm2_vout_run();
  5258  0EFA  3194  24C9  318E   	fcall	_pid_pwm2_vout_run
  5259  0EFD                     l5407:	
  5260                           
  5261                           ;main.c: 60: };main.c: 62: if(Event & (1<<3)){
  5262  0EFD  0020               	movlb	0	; select bank0
  5263  0EFE  1DEB               	btfss	_Event,3	;volatile
  5264  0EFF  2F06               	goto	l5411
  5265                           
  5266                           ;main.c: 63: Event &= ~(1<<3);
  5267  0F00  30F7               	movlw	247
  5268  0F01  0021               	movlb	1	; select bank1
  5269  0F02  00DE               	movwf	??_main^(0+128)
  5270  0F03  085E               	movf	??_main^(0+128),w
  5271  0F04  0020               	movlb	0	; select bank0
  5272  0F05  05EB               	andwf	_Event,f	;volatile
  5273  0F06                     l5411:	
  5274                           
  5275                           ;main.c: 105: };main.c: 107: if(Event & (1<<0)){
  5276  0F06  1C6B               	btfss	_Event,0	;volatile
  5277  0F07  2F37               	goto	l5421
  5278                           
  5279                           ;main.c: 108: Event &= ~ (1<<0);
  5280  0F08  30FE               	movlw	254
  5281  0F09  0021               	movlb	1	; select bank1
  5282  0F0A  00DE               	movwf	??_main^(0+128)
  5283  0F0B  085E               	movf	??_main^(0+128),w
  5284  0F0C  0020               	movlb	0	; select bank0
  5285  0F0D  05EB               	andwf	_Event,f	;volatile
  5286                           
  5287                           ;main.c: 109: if(eusartRxCount>0){
  5288  0F0E  086A               	movf	_eusartRxCount,w	;volatile
  5289  0F0F  1903               	btfsc	3,2
  5290  0F10  2F34               	goto	l5419
  5291                           
  5292                           ;main.c: 110: m_mem_cpy_len(modbusBuf,eusartRxBuffer,eusartRxCount);
  5293  0F11  3020               	movlw	low _modbusBuf
  5294  0F12  00F1               	movwf	m_mem_cpy_len@d
  5295  0F13  3001               	movlw	high _modbusBuf
  5296  0F14  00F2               	movwf	m_mem_cpy_len@d+1
  5297  0F15  3040               	movlw	low _eusartRxBuffer
  5298  0F16  00F3               	movwf	m_mem_cpy_len@s
  5299  0F17  3001               	movlw	high _eusartRxBuffer
  5300  0F18  00F4               	movwf	m_mem_cpy_len@s+1
  5301  0F19  086A               	movf	_eusartRxCount,w	;volatile
  5302  0F1A  0021               	movlb	1	; select bank1
  5303  0F1B  00DE               	movwf	??_main^(0+128)
  5304  0F1C  01DF               	clrf	(??_main^(0+128)+1)
  5305  0F1D  085E               	movf	??_main^(0+128),w
  5306  0F1E  00F5               	movwf	m_mem_cpy_len@len
  5307  0F1F  085F               	movf	(??_main+1)^(0+128),w
  5308  0F20  00F6               	movwf	m_mem_cpy_len@len+1
  5309  0F21  319D  256C  318E   	fcall	_m_mem_cpy_len
  5310                           
  5311                           ;main.c: 111: modbus_response_process(modbusBuf,eusartRxCount);
  5312  0F24  0020               	movlb	0	; select bank0
  5313  0F25  086A               	movf	_eusartRxCount,w	;volatile
  5314  0F26  0021               	movlb	1	; select bank1
  5315  0F27  00DE               	movwf	??_main^(0+128)
  5316  0F28  01DF               	clrf	(??_main^(0+128)+1)
  5317  0F29  085E               	movf	??_main^(0+128),w
  5318  0F2A  0020               	movlb	0	; select bank0
  5319  0F2B  00B8               	movwf	modbus_response_process@rlen
  5320  0F2C  0021               	movlb	1	; select bank1
  5321  0F2D  085F               	movf	(??_main+1)^(0+128),w
  5322  0F2E  0020               	movlb	0	; select bank0
  5323  0F2F  00B9               	movwf	modbus_response_process@rlen+1
  5324  0F30  3020               	movlw	(low (_modbusBuf| (0+256)))& (0+255)
  5325  0F31  3191  214F  318E   	fcall	_modbus_response_process
  5326  0F34                     l5419:	
  5327                           
  5328                           ;main.c: 113: };main.c: 115: uart_received_start();
  5329  0F34  319B  23FE  318E   	fcall	_uart_received_start
  5330  0F37                     l5421:	
  5331                           
  5332                           ;main.c: 116: };main.c: 118: __nop();
  5333  0F37  0000               	nop
  5334  0F38  2E54               	goto	l5377
  5335  0F39                     __end_of_main:	
  5336                           
  5337                           	psect	text1
  5338  1BFE                     __ptext1:	
  5339 ;; *************** function _uart_received_start *****************
  5340 ;; Defined at:
  5341 ;;		line 59 in file "src/api/my_uart.c"
  5342 ;; Parameters:    Size  Location     Type
  5343 ;;		None
  5344 ;; Auto vars:     Size  Location     Type
  5345 ;;		None
  5346 ;; Return value:  Size  Location     Type
  5347 ;;                  1    wreg      void 
  5348 ;; Registers used:
  5349 ;;		status,2
  5350 ;; Tracked objects:
  5351 ;;		On entry : 0/0
  5352 ;;		On exit  : 0/0
  5353 ;;		Unchanged: 0/0
  5354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5358 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5359 ;;Total ram usage:        0 bytes
  5360 ;; Hardware stack levels used:    1
  5361 ;; Hardware stack levels required when called:    1
  5362 ;; This function calls:
  5363 ;;		Nothing
  5364 ;; This function is called by:
  5365 ;;		_main
  5366 ;; This function uses a non-reentrant model
  5367 ;;
  5368                           
  5369                           
  5370                           ;psect for function _uart_received_start
  5371  1BFE                     _uart_received_start:	
  5372                           
  5373                           ;my_uart.c: 61: eusartRxCount=0;
  5374                           
  5375                           ;incstack = 0
  5376                           ; Regs used in _uart_received_start: [status,2]
  5377  1BFE  0020               	movlb	0	; select bank0
  5378  1BFF  01EA               	clrf	_eusartRxCount	;volatile
  5379                           
  5380                           ;my_uart.c: 70: eusartRxIdleTime_ms=0;
  5381  1C00  01FC               	clrf	_eusartRxIdleTime_ms	;volatile
  5382  1C01  0008               	return
  5383  1C02                     __end_of_uart_received_start:	
  5384                           
  5385                           	psect	text2
  5386  155A                     __ptext2:	
  5387 ;; *************** function _sys_data_init *****************
  5388 ;; Defined at:
  5389 ;;		line 104 in file "src/api/sysData.c"
  5390 ;; Parameters:    Size  Location     Type
  5391 ;;		None
  5392 ;; Auto vars:     Size  Location     Type
  5393 ;;  i               2   22[BANK0 ] unsigned int 
  5394 ;;  ret             2   20[BANK0 ] unsigned int 
  5395 ;; Return value:  Size  Location     Type
  5396 ;;                  2  753[None  ] unsigned int 
  5397 ;; Registers used:
  5398 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5399 ;; Tracked objects:
  5400 ;;		On entry : 0/0
  5401 ;;		On exit  : 0/0
  5402 ;;		Unchanged: 0/0
  5403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5405 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5406 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5407 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5408 ;;Total ram usage:       10 bytes
  5409 ;; Hardware stack levels used:    1
  5410 ;; Hardware stack levels required when called:    4
  5411 ;; This function calls:
  5412 ;;		___wmul
  5413 ;;		_crc_verify
  5414 ;;		_my_flash_system_read
  5415 ;;		_sys_data_save
  5416 ;; This function is called by:
  5417 ;;		_main
  5418 ;; This function uses a non-reentrant model
  5419 ;;
  5420                           
  5421                           
  5422                           ;psect for function _sys_data_init
  5423  155A                     _sys_data_init:	
  5424                           
  5425                           ;sysData.c: 106: uint16_t ret,i;;sysData.c: 107: my_flash_system_read((uint8_t*)&sysData
      +                          ,sizeof(sysData_t));
  5426                           
  5427                           ;incstack = 0
  5428                           ; Regs used in _sys_data_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5429  155A  305C               	movlw	92
  5430  155B  00F1               	movwf	my_flash_system_read@buf
  5431  155C  3023               	movlw	35
  5432  155D  00F2               	movwf	my_flash_system_read@buf+1
  5433  155E  3084               	movlw	132
  5434  155F  00F3               	movwf	my_flash_system_read@len
  5435  1560  3000               	movlw	0
  5436  1561  00F4               	movwf	my_flash_system_read@len+1
  5437  1562  319E  268D  3195   	fcall	_my_flash_system_read
  5438                           
  5439                           ;sysData.c: 108: ret=crc_verify((uint8_t*)&sysData,sizeof(sysData_t));
  5440  1565  305C               	movlw	92
  5441  1566  0020               	movlb	0	; select bank0
  5442  1567  00A6               	movwf	crc_verify@message
  5443  1568  3023               	movlw	35
  5444  1569  00A7               	movwf	crc_verify@message+1
  5445  156A  3084               	movlw	132
  5446  156B  00A8               	movwf	crc_verify@n
  5447  156C  3000               	movlw	0
  5448  156D  00A9               	movwf	crc_verify@n+1
  5449  156E  319E  2656  3195   	fcall	_crc_verify
  5450  1571  0020               	movlb	0	; select bank0
  5451  1572  00AE               	movwf	??_sys_data_init
  5452  1573  01AF               	clrf	??_sys_data_init+1
  5453  1574  082E               	movf	??_sys_data_init,w
  5454  1575  00B4               	movwf	sys_data_init@ret
  5455  1576  082F               	movf	??_sys_data_init+1,w
  5456  1577  00B5               	movwf	sys_data_init@ret+1
  5457                           
  5458                           ;sysData.c: 109: if(!ret){
  5459  1578  0834               	movf	sys_data_init@ret,w
  5460  1579  0435               	iorwf	sys_data_init@ret+1,w
  5461  157A  1D03               	btfss	3,2
  5462  157B  2E11               	goto	l5291
  5463                           
  5464                           ;sysData.c: 110: sysData.pidSetFlg0=0x55;
  5465  157C  305C               	movlw	92
  5466  157D  0086               	movwf	6
  5467  157E  3023               	movlw	35
  5468  157F  0087               	movwf	7
  5469  1580  3055               	movlw	85
  5470  1581  3FC0               	movwi [0]fsr1
  5471                           
  5472                           ;sysData.c: 111: sysData.pidSetFlg1=0xaa;
  5473  1582  305D               	movlw	93
  5474  1583  0086               	movwf	6
  5475  1584  3023               	movlw	35
  5476  1585  0087               	movwf	7
  5477  1586  30AA               	movlw	170
  5478  1587  0081               	movwf	1
  5479                           
  5480                           ;sysData.c: 112: sysData.id=0x01;
  5481  1588  305E               	movlw	94
  5482  1589  0086               	movwf	6
  5483  158A  3023               	movlw	35
  5484  158B  0087               	movwf	7
  5485  158C  3001               	movlw	1
  5486  158D  0081               	movwf	1
  5487                           
  5488                           ;sysData.c: 113: for(i=0;i<30;i++){
  5489  158E  01B6               	clrf	sys_data_init@i
  5490  158F  01B7               	clrf	sys_data_init@i+1
  5491  1590  3000               	movlw	0
  5492  1591  0237               	subwf	sys_data_init@i+1,w
  5493  1592  301E               	movlw	30
  5494  1593  1903               	skipnz
  5495  1594  0236               	subwf	sys_data_init@i,w
  5496  1595  1803               	btfsc	3,0
  5497  1596  2DE8               	goto	l5287
  5498  1597                     l5281:	
  5499                           
  5500                           ;sysData.c: 115: sysData.calibRsAdc[i]=9400+i*720;
  5501  1597  0837               	movf	sys_data_init@i+1,w
  5502  1598  00F2               	movwf	___wmul@multiplier+1
  5503  1599  0836               	movf	sys_data_init@i,w
  5504  159A  00F1               	movwf	___wmul@multiplier
  5505  159B  30D0               	movlw	208
  5506  159C  00F3               	movwf	___wmul@multiplicand
  5507  159D  3002               	movlw	2
  5508  159E  00F4               	movwf	___wmul@multiplicand+1
  5509  159F  319C  24FD  3195   	fcall	___wmul
  5510  15A2  0871               	movf	?___wmul,w
  5511  15A3  3EB8               	addlw	184
  5512  15A4  0020               	movlb	0	; select bank0
  5513  15A5  00AE               	movwf	??_sys_data_init
  5514  15A6  3024               	movlw	36
  5515  15A7  3D72               	addwfc	?___wmul+1,w
  5516  15A8  00AF               	movwf	??_sys_data_init+1
  5517  15A9  0837               	movf	sys_data_init@i+1,w
  5518  15AA  00B1               	movwf	??_sys_data_init+3
  5519  15AB  0836               	movf	sys_data_init@i,w
  5520  15AC  00B0               	movwf	??_sys_data_init+2
  5521  15AD  35B0               	lslf	??_sys_data_init+2,f
  5522  15AE  0DB1               	rlf	??_sys_data_init+3,f
  5523  15AF  3066               	movlw	102
  5524  15B0  00B2               	movwf	??_sys_data_init+4
  5525  15B1  3023               	movlw	35
  5526  15B2  00B3               	movwf	??_sys_data_init+5
  5527  15B3  0830               	movf	??_sys_data_init+2,w
  5528  15B4  0732               	addwf	??_sys_data_init+4,w
  5529  15B5  0086               	movwf	6
  5530  15B6  0831               	movf	??_sys_data_init+3,w
  5531  15B7  3D33               	addwfc	??_sys_data_init+5,w
  5532  15B8  0087               	movwf	7
  5533  15B9  082E               	movf	??_sys_data_init,w
  5534  15BA  3FC0               	movwi [0]fsr1
  5535  15BB  082F               	movf	??_sys_data_init+1,w
  5536  15BC  3FC1               	movwi [1]fsr1
  5537                           
  5538                           ;sysData.c: 116: sysData.calibVoMV[i]=i*333;
  5539  15BD  0837               	movf	sys_data_init@i+1,w
  5540  15BE  00F2               	movwf	___wmul@multiplier+1
  5541  15BF  0836               	movf	sys_data_init@i,w
  5542  15C0  00F1               	movwf	___wmul@multiplier
  5543  15C1  304D               	movlw	77
  5544  15C2  00F3               	movwf	___wmul@multiplicand
  5545  15C3  3001               	movlw	1
  5546  15C4  00F4               	movwf	___wmul@multiplicand+1
  5547  15C5  319C  24FD  3195   	fcall	___wmul
  5548  15C8  0020               	movlb	0	; select bank0
  5549  15C9  0837               	movf	sys_data_init@i+1,w
  5550  15CA  00AF               	movwf	??_sys_data_init+1
  5551  15CB  0836               	movf	sys_data_init@i,w
  5552  15CC  00AE               	movwf	??_sys_data_init
  5553  15CD  35AE               	lslf	??_sys_data_init,f
  5554  15CE  0DAF               	rlf	??_sys_data_init+1,f
  5555  15CF  30A2               	movlw	162
  5556  15D0  00B0               	movwf	??_sys_data_init+2
  5557  15D1  3023               	movlw	35
  5558  15D2  00B1               	movwf	??_sys_data_init+3
  5559  15D3  082E               	movf	??_sys_data_init,w
  5560  15D4  0730               	addwf	??_sys_data_init+2,w
  5561  15D5  0086               	movwf	6
  5562  15D6  082F               	movf	??_sys_data_init+1,w
  5563  15D7  3D31               	addwfc	??_sys_data_init+3,w
  5564  15D8  0087               	movwf	7
  5565  15D9  0871               	movf	?___wmul,w
  5566  15DA  3FC0               	movwi [0]fsr1
  5567  15DB  0872               	movf	?___wmul+1,w
  5568  15DC  3FC1               	movwi [1]fsr1
  5569  15DD  3001               	movlw	1
  5570  15DE  07B6               	addwf	sys_data_init@i,f
  5571  15DF  3000               	movlw	0
  5572  15E0  3DB7               	addwfc	sys_data_init@i+1,f
  5573  15E1  3000               	movlw	0
  5574  15E2  0237               	subwf	sys_data_init@i+1,w
  5575  15E3  301E               	movlw	30
  5576  15E4  1903               	skipnz
  5577  15E5  0236               	subwf	sys_data_init@i,w
  5578  15E6  1C03               	skipc
  5579  15E7  2D97               	goto	l5281
  5580  15E8                     l5287:	
  5581                           
  5582                           ;sysData.c: 117: };sysData.c: 119: sysData.pidKp=3200;
  5583  15E8  3080               	movlw	128
  5584  15E9  00AE               	movwf	??_sys_data_init
  5585  15EA  300C               	movlw	12
  5586  15EB  00AF               	movwf	??_sys_data_init+1
  5587  15EC  305C               	movlw	92
  5588  15ED  0086               	movwf	6
  5589  15EE  3023               	movlw	35
  5590  15EF  0087               	movwf	7
  5591  15F0  3144               	addfsr 1,4
  5592  15F1  082E               	movf	??_sys_data_init,w
  5593  15F2  3FC0               	movwi [0]fsr1
  5594  15F3  082F               	movf	??_sys_data_init+1,w
  5595  15F4  3FC1               	movwi [1]fsr1
  5596                           
  5597                           ;sysData.c: 120: sysData.pidTi=20;
  5598  15F5  3014               	movlw	20
  5599  15F6  00AE               	movwf	??_sys_data_init
  5600  15F7  3000               	movlw	0
  5601  15F8  00AF               	movwf	??_sys_data_init+1
  5602  15F9  305C               	movlw	92
  5603  15FA  0086               	movwf	6
  5604  15FB  3023               	movlw	35
  5605  15FC  0087               	movwf	7
  5606  15FD  3146               	addfsr 1,6
  5607  15FE  082E               	movf	??_sys_data_init,w
  5608  15FF  3FC0               	movwi [0]fsr1
  5609  1600  082F               	movf	??_sys_data_init+1,w
  5610  1601  3FC1               	movwi [1]fsr1
  5611                           
  5612                           ;sysData.c: 121: sysData.pidTd=5;
  5613  1602  3005               	movlw	5
  5614  1603  00AE               	movwf	??_sys_data_init
  5615  1604  3000               	movlw	0
  5616  1605  00AF               	movwf	??_sys_data_init+1
  5617  1606  305C               	movlw	92
  5618  1607  0086               	movwf	6
  5619  1608  3023               	movlw	35
  5620  1609  0087               	movwf	7
  5621  160A  3148               	addfsr 1,8
  5622  160B  082E               	movf	??_sys_data_init,w
  5623  160C  3FC0               	movwi [0]fsr1
  5624  160D  082F               	movf	??_sys_data_init+1,w
  5625  160E  3FC1               	movwi [1]fsr1
  5626                           
  5627                           ;sysData.c: 123: sys_data_save();
  5628  160F  319E  2620         	fcall	_sys_data_save
  5629  1611                     l5291:	
  5630                           
  5631                           ;sysData.c: 125: };sysData.c: 126: PidKp=sysData.pidKp;
  5632  1611  305C               	movlw	92
  5633  1612  0086               	movwf	6
  5634  1613  3023               	movlw	35
  5635  1614  0087               	movwf	7
  5636  1615  3144               	addfsr 1,4
  5637  1616  3F40               	moviw [0]fsr1
  5638  1617  0021               	movlb	1	; select bank1
  5639  1618  00D0               	movwf	_PidKp^(0+128)
  5640  1619  3F41               	moviw [1]fsr1
  5641  161A  00D1               	movwf	(_PidKp+1)^(0+128)
  5642                           
  5643                           ;sysData.c: 127: PidTi=sysData.pidTi;
  5644  161B  305C               	movlw	92
  5645  161C  0086               	movwf	6
  5646  161D  3023               	movlw	35
  5647  161E  0087               	movwf	7
  5648  161F  3146               	addfsr 1,6
  5649  1620  3F40               	moviw [0]fsr1
  5650  1621  00CE               	movwf	_PidTi^(0+128)
  5651  1622  3F41               	moviw [1]fsr1
  5652  1623  00CF               	movwf	(_PidTi+1)^(0+128)
  5653                           
  5654                           ;sysData.c: 128: PidTd=sysData.pidTd;;
  5655  1624  305C               	movlw	92
  5656  1625  0086               	movwf	6
  5657  1626  3023               	movlw	35
  5658  1627  0087               	movwf	7
  5659  1628  3148               	addfsr 1,8
  5660  1629  3F40               	moviw [0]fsr1
  5661  162A  00CC               	movwf	_PidTd^(0+128)
  5662  162B  3F41               	moviw [1]fsr1
  5663  162C  00CD               	movwf	(_PidTd+1)^(0+128)
  5664  162D  0008               	return
  5665  162E                     __end_of_sys_data_init:	
  5666                           ;sysData.c: 129: return ret;;	Return value of _sys_data_init is never used
  5667                           
  5668                           
  5669                           	psect	text3
  5670  1E8D                     __ptext3:	
  5671 ;; *************** function _my_flash_system_read *****************
  5672 ;; Defined at:
  5673 ;;		line 23 in file "src/api/sysData.c"
  5674 ;; Parameters:    Size  Location     Type
  5675 ;;  buf             2    1[COMMON] PTR unsigned char 
  5676 ;;		 -> sysData(132), 
  5677 ;;  len             2    3[COMMON] unsigned int 
  5678 ;; Auto vars:     Size  Location     Type
  5679 ;;  i               2   10[COMMON] unsigned int 
  5680 ;;  flashAddr       2    8[COMMON] unsigned int 
  5681 ;;  GIEBitValue     1    7[COMMON] unsigned char 
  5682 ;; Return value:  Size  Location     Type
  5683 ;;                  1    wreg      void 
  5684 ;; Registers used:
  5685 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5686 ;; Tracked objects:
  5687 ;;		On entry : 0/0
  5688 ;;		On exit  : 0/0
  5689 ;;		Unchanged: 0/0
  5690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5691 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5692 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5693 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5694 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5695 ;;Total ram usage:       11 bytes
  5696 ;; Hardware stack levels used:    1
  5697 ;; Hardware stack levels required when called:    1
  5698 ;; This function calls:
  5699 ;;		Nothing
  5700 ;; This function is called by:
  5701 ;;		_sys_data_init
  5702 ;; This function uses a non-reentrant model
  5703 ;;
  5704                           
  5705                           
  5706                           ;psect for function _my_flash_system_read
  5707  1E8D                     _my_flash_system_read:	
  5708                           
  5709                           ;sysData.c: 25: uint16_t flashAddr=0x1f00;
  5710                           
  5711                           ;incstack = 0
  5712                           ; Regs used in _my_flash_system_read: [wreg+fsr1l+fsr1h+status,2+status,0]
  5713  1E8D  3000               	movlw	0
  5714  1E8E  00F8               	movwf	my_flash_system_read@flashAddr
  5715  1E8F  301F               	movlw	31
  5716  1E90  00F9               	movwf	my_flash_system_read@flashAddr+1
  5717                           
  5718                           ;sysData.c: 26: uint16_t i;;sysData.c: 28: uint8_t GIEBitValue = INTCONbits.GIE;
  5719  1E91  3000               	movlw	0
  5720  1E92  1B8B               	btfsc	11,7	;volatile
  5721  1E93  3001               	movlw	1
  5722  1E94  00F7               	movwf	my_flash_system_read@GIEBitValue
  5723                           
  5724                           ;sysData.c: 30: INTCONbits.GIE = 0;
  5725  1E95  138B               	bcf	11,7	;volatile
  5726                           
  5727                           ;sysData.c: 32: for(i=0;i<len;i++){
  5728  1E96  01FA               	clrf	my_flash_system_read@i
  5729  1E97  01FB               	clrf	my_flash_system_read@i+1
  5730  1E98                     l3777:	
  5731  1E98  0874               	movf	my_flash_system_read@len+1,w
  5732  1E99  027B               	subwf	my_flash_system_read@i+1,w
  5733  1E9A  1D03               	skipz
  5734  1E9B  2E9E               	goto	u2485
  5735  1E9C  0873               	movf	my_flash_system_read@len,w
  5736  1E9D  027A               	subwf	my_flash_system_read@i,w
  5737  1E9E                     u2485:	
  5738  1E9E  1803               	btfsc	3,0
  5739  1E9F  2EBF               	goto	l3779
  5740                           
  5741                           ;sysData.c: 34: PMADRL = (flashAddr & 0x00FF);
  5742  1EA0  0878               	movf	my_flash_system_read@flashAddr,w
  5743  1EA1  0023               	movlb	3	; select bank3
  5744  1EA2  0091               	movwf	17	;volatile
  5745                           
  5746                           ;sysData.c: 35: PMADRH = ((flashAddr & 0xFF00) >> 8);
  5747  1EA3  0879               	movf	my_flash_system_read@flashAddr+1,w
  5748  1EA4  0092               	movwf	18	;volatile
  5749                           
  5750                           ;sysData.c: 37: PMCON1bits.CFGS = 0;
  5751  1EA5  1315               	bcf	21,6	;volatile
  5752                           
  5753                           ;sysData.c: 38: PMCON1bits.RD = 1;
  5754  1EA6  1415               	bsf	21,0	;volatile
  5755                           
  5756                           ;sysData.c: 39: __nop();
  5757  1EA7  0000               	nop
  5758                           
  5759                           ;sysData.c: 40: __nop();
  5760  1EA8  0000               	nop
  5761                           
  5762                           ;sysData.c: 41: buf[i]=PMDATL;
  5763  1EA9  087A               	movf	my_flash_system_read@i,w
  5764  1EAA  0771               	addwf	my_flash_system_read@buf,w
  5765  1EAB  00F5               	movwf	??_my_flash_system_read
  5766  1EAC  087B               	movf	my_flash_system_read@i+1,w
  5767  1EAD  3D72               	addwfc	my_flash_system_read@buf+1,w
  5768  1EAE  00F6               	movwf	??_my_flash_system_read+1
  5769  1EAF  0875               	movf	??_my_flash_system_read,w
  5770  1EB0  0086               	movwf	6
  5771  1EB1  0876               	movf	??_my_flash_system_read+1,w
  5772  1EB2  0087               	movwf	7
  5773  1EB3  0023               	movlb	3	; select bank3
  5774  1EB4  0813               	movf	19,w	;volatile
  5775  1EB5  0081               	movwf	1
  5776                           
  5777                           ;sysData.c: 42: flashAddr++;
  5778  1EB6  3001               	movlw	1
  5779  1EB7  07F8               	addwf	my_flash_system_read@flashAddr,f
  5780  1EB8  3000               	movlw	0
  5781  1EB9  3DF9               	addwfc	my_flash_system_read@flashAddr+1,f
  5782  1EBA  3001               	movlw	1
  5783  1EBB  07FA               	addwf	my_flash_system_read@i,f
  5784  1EBC  3000               	movlw	0
  5785  1EBD  3DFB               	addwfc	my_flash_system_read@i+1,f
  5786  1EBE  2E98               	goto	l3777
  5787  1EBF                     l3779:	
  5788                           
  5789                           ;sysData.c: 43: };sysData.c: 44: INTCONbits.GIE = GIEBitValue;
  5790  1EBF  0C77               	rrf	my_flash_system_read@GIEBitValue,w
  5791  1EC0  1C03               	skipc
  5792  1EC1  138B               	bcf	11,7	;volatile
  5793  1EC2  1803               	skipnc
  5794  1EC3  178B               	bsf	11,7	;volatile
  5795  1EC4  0008               	return
  5796  1EC5                     __end_of_my_flash_system_read:	
  5797                           
  5798                           	psect	text4
  5799  14C9                     __ptext4:	
  5800 ;; *************** function _pid_pwm2_vout_run *****************
  5801 ;; Defined at:
  5802 ;;		line 374 in file "src/api/sample.c"
  5803 ;; Parameters:    Size  Location     Type
  5804 ;;		None
  5805 ;; Auto vars:     Size  Location     Type
  5806 ;;  t16             2    4[BANK0 ] int 
  5807 ;;  __ei            2    2[BANK0 ] int 
  5808 ;; Return value:  Size  Location     Type
  5809 ;;                  1    wreg      void 
  5810 ;; Registers used:
  5811 ;;		wreg, status,2, status,0, pclath, cstack
  5812 ;; Tracked objects:
  5813 ;;		On entry : 0/0
  5814 ;;		On exit  : 0/0
  5815 ;;		Unchanged: 0/0
  5816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5818 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5819 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5820 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5821 ;;Total ram usage:        6 bytes
  5822 ;; Hardware stack levels used:    1
  5823 ;; Hardware stack levels required when called:    3
  5824 ;; This function calls:
  5825 ;;		___awdiv
  5826 ;;		___lwdiv
  5827 ;;		_set_vout_pwm2_duty
  5828 ;; This function is called by:
  5829 ;;		_main
  5830 ;; This function uses a non-reentrant model
  5831 ;;
  5832                           
  5833                           
  5834                           ;psect for function _pid_pwm2_vout_run
  5835  14C9                     _pid_pwm2_vout_run:	
  5836                           
  5837                           ;sample.c: 376: int16_t t16,__ei;;sample.c: 377: t16=voExpectAdcValue-rtAdcValueVoFb;
  5838                           
  5839                           ;incstack = 0
  5840                           ; Regs used in _pid_pwm2_vout_run: [wreg+status,2+status,0+pclath+cstack]
  5841  14C9  0020               	movlb	0	; select bank0
  5842  14CA  0957               	comf	_rtAdcValueVoFb,w
  5843  14CB  00A0               	movwf	??_pid_pwm2_vout_run
  5844  14CC  0958               	comf	_rtAdcValueVoFb+1,w
  5845  14CD  00A1               	movwf	??_pid_pwm2_vout_run+1
  5846  14CE  0AA0               	incf	??_pid_pwm2_vout_run,f
  5847  14CF  1903               	skipnz
  5848  14D0  0AA1               	incf	??_pid_pwm2_vout_run+1,f
  5849  14D1  0855               	movf	_voExpectAdcValue,w
  5850  14D2  0720               	addwf	??_pid_pwm2_vout_run,w
  5851  14D3  00A4               	movwf	pid_pwm2_vout_run@t16
  5852  14D4  0856               	movf	_voExpectAdcValue+1,w
  5853  14D5  3D21               	addwfc	??_pid_pwm2_vout_run+1,w
  5854  14D6  00A5               	movwf	pid_pwm2_vout_run@t16+1
  5855                           
  5856                           ;sample.c: 378: __ei=t16/150;
  5857  14D7  3096               	movlw	150
  5858  14D8  00F1               	movwf	___awdiv@divisor
  5859  14D9  3000               	movlw	0
  5860  14DA  00F2               	movwf	___awdiv@divisor+1
  5861  14DB  0825               	movf	pid_pwm2_vout_run@t16+1,w
  5862  14DC  00F4               	movwf	___awdiv@dividend+1
  5863  14DD  0824               	movf	pid_pwm2_vout_run@t16,w
  5864  14DE  00F3               	movwf	___awdiv@dividend
  5865  14DF  3190  20AB  3194   	fcall	___awdiv
  5866  14E2  0872               	movf	?___awdiv+1,w
  5867  14E3  0020               	movlb	0	; select bank0
  5868  14E4  00A3               	movwf	pid_pwm2_vout_run@__ei+1
  5869  14E5  0871               	movf	?___awdiv,w
  5870  14E6  00A2               	movwf	pid_pwm2_vout_run@__ei
  5871                           
  5872                           ;sample.c: 379: if(__ei==0){
  5873  14E7  0822               	movf	pid_pwm2_vout_run@__ei,w
  5874  14E8  0423               	iorwf	pid_pwm2_vout_run@__ei+1,w
  5875  14E9  1D03               	btfss	3,2
  5876  14EA  2D0C               	goto	l5201
  5877                           
  5878                           ;sample.c: 380: if(t16>16)__ei=1;
  5879  14EB  0825               	movf	pid_pwm2_vout_run@t16+1,w
  5880  14EC  3A80               	xorlw	128
  5881  14ED  00A0               	movwf	??_pid_pwm2_vout_run
  5882  14EE  3080               	movlw	128
  5883  14EF  0220               	subwf	??_pid_pwm2_vout_run,w
  5884  14F0  1D03               	skipz
  5885  14F1  2CF4               	goto	u4705
  5886  14F2  3011               	movlw	17
  5887  14F3  0224               	subwf	pid_pwm2_vout_run@t16,w
  5888  14F4                     u4705:	
  5889  14F4  1C03               	skipc
  5890  14F5  2CFB               	goto	l670
  5891  14F6  3001               	movlw	1
  5892  14F7  0020               	movlb	0	; select bank0
  5893  14F8  00A2               	movwf	pid_pwm2_vout_run@__ei
  5894  14F9  3000               	movlw	0
  5895  14FA  00A3               	movwf	pid_pwm2_vout_run@__ei+1
  5896  14FB                     l670:	
  5897                           
  5898                           ;sample.c: 381: if(t16<-16)__ei=-1;
  5899  14FB  0020               	movlb	0	; select bank0
  5900  14FC  0825               	movf	pid_pwm2_vout_run@t16+1,w
  5901  14FD  3A80               	xorlw	128
  5902  14FE  00A0               	movwf	??_pid_pwm2_vout_run
  5903  14FF  307F               	movlw	127
  5904  1500  0220               	subwf	??_pid_pwm2_vout_run,w
  5905  1501  1D03               	skipz
  5906  1502  2D05               	goto	u4715
  5907  1503  30F0               	movlw	240
  5908  1504  0224               	subwf	pid_pwm2_vout_run@t16,w
  5909  1505                     u4715:	
  5910  1505  1803               	skipnc
  5911  1506  2D0C               	goto	l5201
  5912  1507  30FF               	movlw	255
  5913  1508  0020               	movlb	0	; select bank0
  5914  1509  00A2               	movwf	pid_pwm2_vout_run@__ei
  5915  150A  30FF               	movlw	255
  5916  150B  00A3               	movwf	pid_pwm2_vout_run@__ei+1
  5917  150C                     l5201:	
  5918                           
  5919                           ;sample.c: 382: };sample.c: 384: pwm2Ei=pwm2Ei+__ei;
  5920  150C  0020               	movlb	0	; select bank0
  5921  150D  0822               	movf	pid_pwm2_vout_run@__ei,w
  5922  150E  0021               	movlb	1	; select bank1
  5923  150F  0748               	addwf	_pwm2Ei^(0+128),w
  5924  1510  00C8               	movwf	_pwm2Ei^(0+128)
  5925  1511  0020               	movlb	0	; select bank0
  5926  1512  0823               	movf	pid_pwm2_vout_run@__ei+1,w
  5927  1513  0021               	movlb	1	; select bank1
  5928  1514  3D49               	addwfc	(_pwm2Ei+1)^(0+128),w
  5929  1515  00C9               	movwf	(_pwm2Ei+1)^(0+128)
  5930                           
  5931                           ;sample.c: 388: t16=voExpectAdcValue/10;
  5932  1516  300A               	movlw	10
  5933  1517  00F1               	movwf	___lwdiv@divisor
  5934  1518  3000               	movlw	0
  5935  1519  00F2               	movwf	___lwdiv@divisor+1
  5936  151A  0020               	movlb	0	; select bank0
  5937  151B  0856               	movf	_voExpectAdcValue+1,w
  5938  151C  00F4               	movwf	___lwdiv@dividend+1
  5939  151D  0855               	movf	_voExpectAdcValue,w
  5940  151E  00F3               	movwf	___lwdiv@dividend
  5941  151F  319D  25EC  3194   	fcall	___lwdiv
  5942  1522  0872               	movf	?___lwdiv+1,w
  5943  1523  0020               	movlb	0	; select bank0
  5944  1524  00A5               	movwf	pid_pwm2_vout_run@t16+1
  5945  1525  0871               	movf	?___lwdiv,w
  5946  1526  00A4               	movwf	pid_pwm2_vout_run@t16
  5947                           
  5948                           ;sample.c: 390: t16=t16+pwm2Ei;
  5949  1527  0021               	movlb	1	; select bank1
  5950  1528  0848               	movf	_pwm2Ei^(0+128),w
  5951  1529  0020               	movlb	0	; select bank0
  5952  152A  0724               	addwf	pid_pwm2_vout_run@t16,w
  5953  152B  00A4               	movwf	pid_pwm2_vout_run@t16
  5954  152C  0021               	movlb	1	; select bank1
  5955  152D  0849               	movf	(_pwm2Ei+1)^(0+128),w
  5956  152E  0020               	movlb	0	; select bank0
  5957  152F  3D25               	addwfc	pid_pwm2_vout_run@t16+1,w
  5958  1530  00A5               	movwf	pid_pwm2_vout_run@t16+1
  5959                           
  5960                           ;sample.c: 391: if(t16>1580)t16=1580;
  5961  1531  0825               	movf	pid_pwm2_vout_run@t16+1,w
  5962  1532  3A80               	xorlw	128
  5963  1533  00A0               	movwf	??_pid_pwm2_vout_run
  5964  1534  3086               	movlw	134
  5965  1535  0220               	subwf	??_pid_pwm2_vout_run,w
  5966  1536  1D03               	skipz
  5967  1537  2D3A               	goto	u4725
  5968  1538  302D               	movlw	45
  5969  1539  0224               	subwf	pid_pwm2_vout_run@t16,w
  5970  153A                     u4725:	
  5971  153A  1C03               	skipc
  5972  153B  2D41               	goto	l672
  5973  153C  302C               	movlw	44
  5974  153D  0020               	movlb	0	; select bank0
  5975  153E  00A4               	movwf	pid_pwm2_vout_run@t16
  5976  153F  3006               	movlw	6
  5977  1540  00A5               	movwf	pid_pwm2_vout_run@t16+1
  5978  1541                     l672:	
  5979                           
  5980                           ;sample.c: 392: if(t16<5)t16=5;
  5981  1541  0020               	movlb	0	; select bank0
  5982  1542  0825               	movf	pid_pwm2_vout_run@t16+1,w
  5983  1543  3A80               	xorlw	128
  5984  1544  00A0               	movwf	??_pid_pwm2_vout_run
  5985  1545  3080               	movlw	128
  5986  1546  0220               	subwf	??_pid_pwm2_vout_run,w
  5987  1547  1D03               	skipz
  5988  1548  2D4B               	goto	u4735
  5989  1549  3005               	movlw	5
  5990  154A  0224               	subwf	pid_pwm2_vout_run@t16,w
  5991  154B                     u4735:	
  5992  154B  1803               	skipnc
  5993  154C  2D52               	goto	l5213
  5994  154D  3005               	movlw	5
  5995  154E  0020               	movlb	0	; select bank0
  5996  154F  00A4               	movwf	pid_pwm2_vout_run@t16
  5997  1550  3000               	movlw	0
  5998  1551  00A5               	movwf	pid_pwm2_vout_run@t16+1
  5999  1552                     l5213:	
  6000                           
  6001                           ;sample.c: 393: set_vout_pwm2_duty((uint16_t)t16);
  6002  1552  0020               	movlb	0	; select bank0
  6003  1553  0825               	movf	pid_pwm2_vout_run@t16+1,w
  6004  1554  00F8               	movwf	set_vout_pwm2_duty@duty+1
  6005  1555  0824               	movf	pid_pwm2_vout_run@t16,w
  6006  1556  00F7               	movwf	set_vout_pwm2_duty@duty
  6007  1557  319D  2550         	fcall	_set_vout_pwm2_duty
  6008  1559  0008               	return
  6009  155A                     __end_of_pid_pwm2_vout_run:	
  6010                           
  6011                           	psect	text5
  6012  1D50                     __ptext5:	
  6013 ;; *************** function _set_vout_pwm2_duty *****************
  6014 ;; Defined at:
  6015 ;;		line 111 in file "src/api/sample.c"
  6016 ;; Parameters:    Size  Location     Type
  6017 ;;  duty            2    7[COMMON] unsigned int 
  6018 ;; Auto vars:     Size  Location     Type
  6019 ;;  t16             2    9[COMMON] unsigned int 
  6020 ;; Return value:  Size  Location     Type
  6021 ;;                  1    wreg      void 
  6022 ;; Registers used:
  6023 ;;		wreg, status,2, pclath, cstack
  6024 ;; Tracked objects:
  6025 ;;		On entry : 0/0
  6026 ;;		On exit  : 0/0
  6027 ;;		Unchanged: 0/0
  6028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6029 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6030 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6032 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6033 ;;Total ram usage:        4 bytes
  6034 ;; Hardware stack levels used:    1
  6035 ;; Hardware stack levels required when called:    2
  6036 ;; This function calls:
  6037 ;;		_get_vout_pwm2_duty
  6038 ;; This function is called by:
  6039 ;;		_pid_pwm2_vout_run
  6040 ;; This function uses a non-reentrant model
  6041 ;;
  6042                           
  6043                           
  6044                           ;psect for function _set_vout_pwm2_duty
  6045  1D50                     _set_vout_pwm2_duty:	
  6046                           
  6047                           ;sample.c: 114: uint16_t t16;;sample.c: 115: pwm2DutyForVout=duty;
  6048                           
  6049                           ;incstack = 0
  6050                           ; Regs used in _set_vout_pwm2_duty: [wreg+status,2+pclath+cstack]
  6051  1D50  0878               	movf	set_vout_pwm2_duty@duty+1,w
  6052  1D51  0021               	movlb	1	; select bank1
  6053  1D52  00DD               	movwf	(_pwm2DutyForVout+1)^(0+128)
  6054  1D53  0877               	movf	set_vout_pwm2_duty@duty,w
  6055  1D54  00DC               	movwf	_pwm2DutyForVout^(0+128)
  6056                           
  6057                           ;sample.c: 116: t16=get_vout_pwm2_duty();
  6058  1D55  319C  24C9  319D   	fcall	_get_vout_pwm2_duty
  6059  1D58  0872               	movf	?_get_vout_pwm2_duty+1,w
  6060  1D59  00FA               	movwf	set_vout_pwm2_duty@t16+1
  6061  1D5A  0871               	movf	?_get_vout_pwm2_duty,w
  6062  1D5B  00F9               	movwf	set_vout_pwm2_duty@t16
  6063                           
  6064                           ;sample.c: 117: if(t16==duty)return;
  6065  1D5C  0878               	movf	set_vout_pwm2_duty@duty+1,w
  6066  1D5D  067A               	xorwf	set_vout_pwm2_duty@t16+1,w
  6067  1D5E  1D03               	skipz
  6068  1D5F  2D62               	goto	u2445
  6069  1D60  0877               	movf	set_vout_pwm2_duty@duty,w
  6070  1D61  0679               	xorwf	set_vout_pwm2_duty@t16,w
  6071  1D62                     u2445:	
  6072  1D62  1903               	btfsc	3,2
  6073  1D63  0008               	return
  6074                           
  6075                           ;sample.c: 121: PWM2CONbits.EN = 0;
  6076  1D64  003B               	movlb	27	; select bank27
  6077  1D65  13AB               	bcf	43,7	;volatile
  6078                           
  6079                           ;sample.c: 122: PWM2DCL= (uint8_t)(duty&0xff);
  6080  1D66  0877               	movf	set_vout_pwm2_duty@duty,w
  6081  1D67  00A3               	movwf	35	;volatile
  6082                           
  6083                           ;sample.c: 123: PWM2DCH=(uint8_t)(duty>>8);
  6084  1D68  0878               	movf	set_vout_pwm2_duty@duty+1,w
  6085  1D69  00A4               	movwf	36	;volatile
  6086                           
  6087                           ;sample.c: 124: PWM2CONbits.EN = 1;
  6088  1D6A  17AB               	bsf	43,7	;volatile
  6089  1D6B  0008               	return
  6090  1D6C                     __end_of_set_vout_pwm2_duty:	
  6091                           
  6092                           	psect	text6
  6093  1CC9                     __ptext6:	
  6094 ;; *************** function _get_vout_pwm2_duty *****************
  6095 ;; Defined at:
  6096 ;;		line 102 in file "src/api/sample.c"
  6097 ;; Parameters:    Size  Location     Type
  6098 ;;		None
  6099 ;; Auto vars:     Size  Location     Type
  6100 ;;  t16             2    5[COMMON] unsigned int 
  6101 ;; Return value:  Size  Location     Type
  6102 ;;                  2    1[COMMON] unsigned int 
  6103 ;; Registers used:
  6104 ;;		wreg
  6105 ;; Tracked objects:
  6106 ;;		On entry : 0/0
  6107 ;;		On exit  : 0/0
  6108 ;;		Unchanged: 0/0
  6109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6110 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6111 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6112 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6113 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6114 ;;Total ram usage:        6 bytes
  6115 ;; Hardware stack levels used:    1
  6116 ;; Hardware stack levels required when called:    1
  6117 ;; This function calls:
  6118 ;;		Nothing
  6119 ;; This function is called by:
  6120 ;;		_set_vout_pwm2_duty
  6121 ;; This function uses a non-reentrant model
  6122 ;;
  6123                           
  6124                           
  6125                           ;psect for function _get_vout_pwm2_duty
  6126  1CC9                     _get_vout_pwm2_duty:	
  6127                           
  6128                           ;sample.c: 105: uint16_t t16=PWM2DCH;
  6129                           
  6130                           ;incstack = 0
  6131                           ; Regs used in _get_vout_pwm2_duty: [wreg]
  6132  1CC9  003B               	movlb	27	; select bank27
  6133  1CCA  0824               	movf	36,w	;volatile
  6134  1CCB  00F3               	movwf	??_get_vout_pwm2_duty
  6135  1CCC  01F4               	clrf	??_get_vout_pwm2_duty+1
  6136  1CCD  0873               	movf	??_get_vout_pwm2_duty,w
  6137  1CCE  00F5               	movwf	get_vout_pwm2_duty@t16
  6138  1CCF  0874               	movf	??_get_vout_pwm2_duty+1,w
  6139  1CD0  00F6               	movwf	get_vout_pwm2_duty@t16+1
  6140                           
  6141                           ;sample.c: 106: t16<<=8;
  6142  1CD1  3008               	movlw	8
  6143  1CD2                     u2375:	
  6144  1CD2  35F5               	lslf	get_vout_pwm2_duty@t16,f
  6145  1CD3  0DF6               	rlf	get_vout_pwm2_duty@t16+1,f
  6146  1CD4  0B89               	decfsz	9,f
  6147  1CD5  2CD2               	goto	u2375
  6148                           
  6149                           ;sample.c: 107: t16|=PWM2DCL;
  6150  1CD6  0823               	movf	35,w	;volatile
  6151  1CD7  00F3               	movwf	??_get_vout_pwm2_duty
  6152  1CD8  01F4               	clrf	??_get_vout_pwm2_duty+1
  6153  1CD9  0873               	movf	??_get_vout_pwm2_duty,w
  6154  1CDA  04F5               	iorwf	get_vout_pwm2_duty@t16,f
  6155  1CDB  0874               	movf	??_get_vout_pwm2_duty+1,w
  6156  1CDC  04F6               	iorwf	get_vout_pwm2_duty@t16+1,f
  6157                           
  6158                           ;sample.c: 108: return t16;
  6159  1CDD  0876               	movf	get_vout_pwm2_duty@t16+1,w
  6160  1CDE  00F2               	movwf	?_get_vout_pwm2_duty+1
  6161  1CDF  0875               	movf	get_vout_pwm2_duty@t16,w
  6162  1CE0  00F1               	movwf	?_get_vout_pwm2_duty
  6163  1CE1  0008               	return
  6164  1CE2                     __end_of_get_vout_pwm2_duty:	
  6165                           
  6166                           	psect	text7
  6167  08E4                     __ptext7:	
  6168 ;; *************** function _pid_pwm1_idrv_run *****************
  6169 ;; Defined at:
  6170 ;;		line 337 in file "src/api/sample.c"
  6171 ;; Parameters:    Size  Location     Type
  6172 ;;		None
  6173 ;; Auto vars:     Size  Location     Type
  6174 ;;  t32             4   26[BANK0 ] long 
  6175 ;; Return value:  Size  Location     Type
  6176 ;;                  1    wreg      void 
  6177 ;; Registers used:
  6178 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6179 ;; Tracked objects:
  6180 ;;		On entry : 0/0
  6181 ;;		On exit  : 0/0
  6182 ;;		Unchanged: 0/0
  6183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6185 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6186 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6187 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6188 ;;Total ram usage:       12 bytes
  6189 ;; Hardware stack levels used:    1
  6190 ;; Hardware stack levels required when called:    3
  6191 ;; This function calls:
  6192 ;;		___aldiv
  6193 ;;		___awdiv
  6194 ;;		___lmul
  6195 ;;		___lwdiv
  6196 ;;		___wmul
  6197 ;;		_set_idrv_pwm1_duty
  6198 ;; This function is called by:
  6199 ;;		_main
  6200 ;; This function uses a non-reentrant model
  6201 ;;
  6202                           
  6203                           
  6204                           ;psect for function _pid_pwm1_idrv_run
  6205  08E4                     _pid_pwm1_idrv_run:	
  6206                           
  6207                           ;sample.c: 339: iexcept=pwm1DutyForIdrv*ik;
  6208                           
  6209                           ;incstack = 0
  6210                           ; Regs used in _pid_pwm1_idrv_run: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6211  08E4  0021               	movlb	1	; select bank1
  6212  08E5  085B               	movf	(_pwm1DutyForIdrv+1)^(0+128),w
  6213  08E6  00F2               	movwf	___wmul@multiplier+1
  6214  08E7  085A               	movf	_pwm1DutyForIdrv^(0+128),w
  6215  08E8  00F1               	movwf	___wmul@multiplier
  6216  08E9  0855               	movf	(_ik+1)^(0+128),w
  6217  08EA  00F4               	movwf	___wmul@multiplicand+1
  6218  08EB  0854               	movf	_ik^(0+128),w
  6219  08EC  00F3               	movwf	___wmul@multiplicand
  6220  08ED  319C  24FD  3188   	fcall	___wmul
  6221  08F0  0872               	movf	?___wmul+1,w
  6222  08F1  0021               	movlb	1	; select bank1
  6223  08F2  00C7               	movwf	(_iexcept+1)^(0+128)
  6224  08F3  0871               	movf	?___wmul,w
  6225  08F4  00C6               	movwf	_iexcept^(0+128)
  6226                           
  6227                           ;sample.c: 340: idelta=iexcept-rtAdcValueRsLo;
  6228  08F5  0020               	movlb	0	; select bank0
  6229  08F6  095F               	comf	_rtAdcValueRsLo,w
  6230  08F7  00B2               	movwf	??_pid_pwm1_idrv_run
  6231  08F8  0960               	comf	_rtAdcValueRsLo+1,w
  6232  08F9  00B3               	movwf	??_pid_pwm1_idrv_run+1
  6233  08FA  0AB2               	incf	??_pid_pwm1_idrv_run,f
  6234  08FB  1903               	skipnz
  6235  08FC  0AB3               	incf	??_pid_pwm1_idrv_run+1,f
  6236  08FD  0021               	movlb	1	; select bank1
  6237  08FE  0846               	movf	_iexcept^(0+128),w
  6238  08FF  0020               	movlb	0	; select bank0
  6239  0900  0732               	addwf	??_pid_pwm1_idrv_run,w
  6240  0901  0021               	movlb	1	; select bank1
  6241  0902  00C4               	movwf	_idelta^(0+128)
  6242  0903  0847               	movf	(_iexcept+1)^(0+128),w
  6243  0904  0020               	movlb	0	; select bank0
  6244  0905  3D33               	addwfc	??_pid_pwm1_idrv_run+1,w
  6245  0906  0021               	movlb	1	; select bank1
  6246  0907  00C5               	movwf	(_idelta+1)^(0+128)
  6247                           
  6248                           ;sample.c: 341: idelta/=ik;
  6249  0908  0855               	movf	(_ik+1)^(0+128),w
  6250  0909  00F2               	movwf	___awdiv@divisor+1
  6251  090A  0854               	movf	_ik^(0+128),w
  6252  090B  00F1               	movwf	___awdiv@divisor
  6253  090C  0845               	movf	(_idelta+1)^(0+128),w
  6254  090D  00F4               	movwf	___awdiv@dividend+1
  6255  090E  0844               	movf	_idelta^(0+128),w
  6256  090F  00F3               	movwf	___awdiv@dividend
  6257  0910  3190  20AB  3188   	fcall	___awdiv
  6258  0913  0872               	movf	?___awdiv+1,w
  6259  0914  0021               	movlb	1	; select bank1
  6260  0915  00C5               	movwf	(_idelta+1)^(0+128)
  6261  0916  0871               	movf	?___awdiv,w
  6262  0917  00C4               	movwf	_idelta^(0+128)
  6263                           
  6264                           ;sample.c: 342: ik=rtAdcValueRsLo/pwm1DutyForIdrv;
  6265  0918  085B               	movf	(_pwm1DutyForIdrv+1)^(0+128),w
  6266  0919  00F2               	movwf	___lwdiv@divisor+1
  6267  091A  085A               	movf	_pwm1DutyForIdrv^(0+128),w
  6268  091B  00F1               	movwf	___lwdiv@divisor
  6269  091C  0020               	movlb	0	; select bank0
  6270  091D  0860               	movf	_rtAdcValueRsLo+1,w
  6271  091E  00F4               	movwf	___lwdiv@dividend+1
  6272  091F  085F               	movf	_rtAdcValueRsLo,w
  6273  0920  00F3               	movwf	___lwdiv@dividend
  6274  0921  319D  25EC  3188   	fcall	___lwdiv
  6275  0924  0872               	movf	?___lwdiv+1,w
  6276  0925  0021               	movlb	1	; select bank1
  6277  0926  00D5               	movwf	(_ik+1)^(0+128)
  6278  0927  0871               	movf	?___lwdiv,w
  6279  0928  00D4               	movwf	_ik^(0+128)
  6280                           
  6281                           ;sample.c: 344: int32_t t32;;sample.c: 345: t32=((int32_t)resRs-(int32_t)resRc);
  6282  0929  0020               	movlb	0	; select bank0
  6283  092A  086E               	movf	_resRc,w
  6284  092B  00B2               	movwf	??_pid_pwm1_idrv_run
  6285  092C  086F               	movf	_resRc+1,w
  6286  092D  00B3               	movwf	??_pid_pwm1_idrv_run+1
  6287  092E  01B4               	clrf	??_pid_pwm1_idrv_run+2
  6288  092F  01B5               	clrf	??_pid_pwm1_idrv_run+3
  6289  0930  09B2               	comf	??_pid_pwm1_idrv_run,f
  6290  0931  09B3               	comf	??_pid_pwm1_idrv_run+1,f
  6291  0932  09B4               	comf	??_pid_pwm1_idrv_run+2,f
  6292  0933  09B5               	comf	??_pid_pwm1_idrv_run+3,f
  6293  0934  0AB2               	incf	??_pid_pwm1_idrv_run,f
  6294  0935  1903               	skipnz
  6295  0936  0AB3               	incf	??_pid_pwm1_idrv_run+1,f
  6296  0937  1903               	skipnz
  6297  0938  0AB4               	incf	??_pid_pwm1_idrv_run+2,f
  6298  0939  1903               	skipnz
  6299  093A  0AB5               	incf	??_pid_pwm1_idrv_run+3,f
  6300  093B  086C               	movf	_resRs,w
  6301  093C  00B6               	movwf	??_pid_pwm1_idrv_run+4
  6302  093D  086D               	movf	_resRs+1,w
  6303  093E  00B7               	movwf	??_pid_pwm1_idrv_run+5
  6304  093F  01B8               	clrf	??_pid_pwm1_idrv_run+6
  6305  0940  01B9               	clrf	??_pid_pwm1_idrv_run+7
  6306  0941  0836               	movf	??_pid_pwm1_idrv_run+4,w
  6307  0942  07B2               	addwf	??_pid_pwm1_idrv_run,f
  6308  0943  0837               	movf	??_pid_pwm1_idrv_run+5,w
  6309  0944  3DB3               	addwfc	??_pid_pwm1_idrv_run+1,f
  6310  0945  0838               	movf	??_pid_pwm1_idrv_run+6,w
  6311  0946  3DB4               	addwfc	??_pid_pwm1_idrv_run+2,f
  6312  0947  0839               	movf	??_pid_pwm1_idrv_run+7,w
  6313  0948  3DB5               	addwfc	??_pid_pwm1_idrv_run+3,f
  6314  0949  0835               	movf	??_pid_pwm1_idrv_run+3,w
  6315  094A  00BD               	movwf	pid_pwm1_idrv_run@t32+3
  6316  094B  0834               	movf	??_pid_pwm1_idrv_run+2,w
  6317  094C  00BC               	movwf	pid_pwm1_idrv_run@t32+2
  6318  094D  0833               	movf	??_pid_pwm1_idrv_run+1,w
  6319  094E  00BB               	movwf	pid_pwm1_idrv_run@t32+1
  6320  094F  0832               	movf	??_pid_pwm1_idrv_run,w
  6321  0950  00BA               	movwf	pid_pwm1_idrv_run@t32
  6322                           
  6323                           ;sample.c: 346: t32=2000-t32;
  6324  0951  30D0               	movlw	208
  6325  0952  00B2               	movwf	??_pid_pwm1_idrv_run
  6326  0953  3007               	movlw	7
  6327  0954  00B3               	movwf	??_pid_pwm1_idrv_run+1
  6328  0955  3000               	movlw	0
  6329  0956  00B4               	movwf	??_pid_pwm1_idrv_run+2
  6330  0957  3000               	movlw	0
  6331  0958  00B5               	movwf	??_pid_pwm1_idrv_run+3
  6332  0959  093A               	comf	pid_pwm1_idrv_run@t32,w
  6333  095A  00B6               	movwf	??_pid_pwm1_idrv_run+4
  6334  095B  093B               	comf	pid_pwm1_idrv_run@t32+1,w
  6335  095C  00B7               	movwf	??_pid_pwm1_idrv_run+5
  6336  095D  093C               	comf	pid_pwm1_idrv_run@t32+2,w
  6337  095E  00B8               	movwf	??_pid_pwm1_idrv_run+6
  6338  095F  093D               	comf	pid_pwm1_idrv_run@t32+3,w
  6339  0960  00B9               	movwf	??_pid_pwm1_idrv_run+7
  6340  0961  0AB6               	incf	??_pid_pwm1_idrv_run+4,f
  6341  0962  1903               	skipnz
  6342  0963  0AB7               	incf	??_pid_pwm1_idrv_run+5,f
  6343  0964  1903               	skipnz
  6344  0965  0AB8               	incf	??_pid_pwm1_idrv_run+6,f
  6345  0966  1903               	skipnz
  6346  0967  0AB9               	incf	??_pid_pwm1_idrv_run+7,f
  6347  0968  0836               	movf	??_pid_pwm1_idrv_run+4,w
  6348  0969  07B2               	addwf	??_pid_pwm1_idrv_run,f
  6349  096A  0837               	movf	??_pid_pwm1_idrv_run+5,w
  6350  096B  3DB3               	addwfc	??_pid_pwm1_idrv_run+1,f
  6351  096C  0838               	movf	??_pid_pwm1_idrv_run+6,w
  6352  096D  3DB4               	addwfc	??_pid_pwm1_idrv_run+2,f
  6353  096E  0839               	movf	??_pid_pwm1_idrv_run+7,w
  6354  096F  3DB5               	addwfc	??_pid_pwm1_idrv_run+3,f
  6355  0970  0835               	movf	??_pid_pwm1_idrv_run+3,w
  6356  0971  00BD               	movwf	pid_pwm1_idrv_run@t32+3
  6357  0972  0834               	movf	??_pid_pwm1_idrv_run+2,w
  6358  0973  00BC               	movwf	pid_pwm1_idrv_run@t32+2
  6359  0974  0833               	movf	??_pid_pwm1_idrv_run+1,w
  6360  0975  00BB               	movwf	pid_pwm1_idrv_run@t32+1
  6361  0976  0832               	movf	??_pid_pwm1_idrv_run,w
  6362  0977  00BA               	movwf	pid_pwm1_idrv_run@t32
  6363                           
  6364                           ;sample.c: 348: err[2]=err[1];
  6365  0978  3004               	movlw	4
  6366  0979  3EA0               	addlw	(low (_err| 0))& (0+255)
  6367  097A  0086               	movwf	6
  6368  097B  0187               	clrf	7
  6369  097C  3F40               	moviw [0]fsr1
  6370  097D  0021               	movlb	1	; select bank1
  6371  097E  00A8               	movwf	(_err^(0+128)+8)
  6372  097F  3F41               	moviw [1]fsr1
  6373  0980  00A9               	movwf	((_err+1)^(0+128)+8)
  6374  0981  3F42               	moviw [2]fsr1
  6375  0982  00AA               	movwf	((_err+2)^(0+128)+8)
  6376  0983  3F43               	moviw [3]fsr1
  6377  0984  00AB               	movwf	((_err+3)^(0+128)+8)
  6378                           
  6379                           ;sample.c: 349: err[1]=err[0];
  6380  0985  0823               	movf	(_err+3)^(0+128),w
  6381  0986  00A7               	movwf	((_err+3)^(0+128)+4)
  6382  0987  0822               	movf	(_err+2)^(0+128),w
  6383  0988  00A6               	movwf	((_err+2)^(0+128)+4)
  6384  0989  0821               	movf	(_err+1)^(0+128),w
  6385  098A  00A5               	movwf	((_err+1)^(0+128)+4)
  6386  098B  0820               	movf	_err^(0+128),w
  6387  098C  00A4               	movwf	(_err^(0+128)+4)
  6388                           
  6389                           ;sample.c: 350: err[0]=t32;
  6390  098D  0020               	movlb	0	; select bank0
  6391  098E  083D               	movf	pid_pwm1_idrv_run@t32+3,w
  6392  098F  0021               	movlb	1	; select bank1
  6393  0990  00A3               	movwf	(_err+3)^(0+128)
  6394  0991  0020               	movlb	0	; select bank0
  6395  0992  083C               	movf	pid_pwm1_idrv_run@t32+2,w
  6396  0993  0021               	movlb	1	; select bank1
  6397  0994  00A2               	movwf	(_err+2)^(0+128)
  6398  0995  0020               	movlb	0	; select bank0
  6399  0996  083B               	movf	pid_pwm1_idrv_run@t32+1,w
  6400  0997  0021               	movlb	1	; select bank1
  6401  0998  00A1               	movwf	(_err+1)^(0+128)
  6402  0999  0020               	movlb	0	; select bank0
  6403  099A  083A               	movf	pid_pwm1_idrv_run@t32,w
  6404  099B  0021               	movlb	1	; select bank1
  6405  099C  00A0               	movwf	_err^(0+128)
  6406                           
  6407                           ;sample.c: 353: x0=(err[0]-err[1])*PidKp;
  6408  099D  0820               	movf	_err^(0+128),w
  6409  099E  0020               	movlb	0	; select bank0
  6410  099F  00B2               	movwf	??_pid_pwm1_idrv_run
  6411  09A0  0021               	movlb	1	; select bank1
  6412  09A1  0821               	movf	(_err+1)^(0+128),w
  6413  09A2  0020               	movlb	0	; select bank0
  6414  09A3  00B3               	movwf	??_pid_pwm1_idrv_run+1
  6415  09A4  0021               	movlb	1	; select bank1
  6416  09A5  0822               	movf	(_err+2)^(0+128),w
  6417  09A6  0020               	movlb	0	; select bank0
  6418  09A7  00B4               	movwf	??_pid_pwm1_idrv_run+2
  6419  09A8  0021               	movlb	1	; select bank1
  6420  09A9  0823               	movf	(_err+3)^(0+128),w
  6421  09AA  0020               	movlb	0	; select bank0
  6422  09AB  00B5               	movwf	??_pid_pwm1_idrv_run+3
  6423  09AC  0021               	movlb	1	; select bank1
  6424  09AD  0924               	comf	(_err^(0+128)+4),w
  6425  09AE  0020               	movlb	0	; select bank0
  6426  09AF  00B6               	movwf	??_pid_pwm1_idrv_run+4
  6427  09B0  0021               	movlb	1	; select bank1
  6428  09B1  0925               	comf	((_err+1)^(0+128)+4),w
  6429  09B2  0020               	movlb	0	; select bank0
  6430  09B3  00B7               	movwf	??_pid_pwm1_idrv_run+5
  6431  09B4  0021               	movlb	1	; select bank1
  6432  09B5  0926               	comf	((_err+2)^(0+128)+4),w
  6433  09B6  0020               	movlb	0	; select bank0
  6434  09B7  00B8               	movwf	??_pid_pwm1_idrv_run+6
  6435  09B8  0021               	movlb	1	; select bank1
  6436  09B9  0927               	comf	((_err+3)^(0+128)+4),w
  6437  09BA  0020               	movlb	0	; select bank0
  6438  09BB  00B9               	movwf	??_pid_pwm1_idrv_run+7
  6439  09BC  0AB6               	incf	??_pid_pwm1_idrv_run+4,f
  6440  09BD  1903               	skipnz
  6441  09BE  0AB7               	incf	??_pid_pwm1_idrv_run+5,f
  6442  09BF  1903               	skipnz
  6443  09C0  0AB8               	incf	??_pid_pwm1_idrv_run+6,f
  6444  09C1  1903               	skipnz
  6445  09C2  0AB9               	incf	??_pid_pwm1_idrv_run+7,f
  6446  09C3  0836               	movf	??_pid_pwm1_idrv_run+4,w
  6447  09C4  07B2               	addwf	??_pid_pwm1_idrv_run,f
  6448  09C5  0837               	movf	??_pid_pwm1_idrv_run+5,w
  6449  09C6  3DB3               	addwfc	??_pid_pwm1_idrv_run+1,f
  6450  09C7  0838               	movf	??_pid_pwm1_idrv_run+6,w
  6451  09C8  3DB4               	addwfc	??_pid_pwm1_idrv_run+2,f
  6452  09C9  0839               	movf	??_pid_pwm1_idrv_run+7,w
  6453  09CA  3DB5               	addwfc	??_pid_pwm1_idrv_run+3,f
  6454  09CB  0835               	movf	??_pid_pwm1_idrv_run+3,w
  6455  09CC  00F4               	movwf	___lmul@multiplier+3
  6456  09CD  0834               	movf	??_pid_pwm1_idrv_run+2,w
  6457  09CE  00F3               	movwf	___lmul@multiplier+2
  6458  09CF  0833               	movf	??_pid_pwm1_idrv_run+1,w
  6459  09D0  00F2               	movwf	___lmul@multiplier+1
  6460  09D1  0832               	movf	??_pid_pwm1_idrv_run,w
  6461  09D2  00F1               	movwf	___lmul@multiplier
  6462  09D3  0021               	movlb	1	; select bank1
  6463  09D4  0850               	movf	_PidKp^(0+128),w
  6464  09D5  00F5               	movwf	___lmul@multiplicand
  6465  09D6  0851               	movf	(_PidKp+1)^(0+128),w
  6466  09D7  00F6               	movwf	___lmul@multiplicand+1
  6467  09D8  01F7               	clrf	___lmul@multiplicand+2
  6468  09D9  01F8               	clrf	___lmul@multiplicand+3
  6469  09DA  319D  25BA  3188   	fcall	___lmul
  6470  09DD  0874               	movf	?___lmul+3,w
  6471  09DE  0020               	movlb	0	; select bank0
  6472  09DF  00CE               	movwf	_x0+3
  6473  09E0  0873               	movf	?___lmul+2,w
  6474  09E1  00CD               	movwf	_x0+2
  6475  09E2  0872               	movf	?___lmul+1,w
  6476  09E3  00CC               	movwf	_x0+1
  6477  09E4  0871               	movf	?___lmul,w
  6478  09E5  00CB               	movwf	_x0
  6479                           
  6480                           ;sample.c: 354: x1=PidKp*err[0]/PidTi;
  6481  09E6  0021               	movlb	1	; select bank1
  6482  09E7  084E               	movf	_PidTi^(0+128),w
  6483  09E8  0020               	movlb	0	; select bank0
  6484  09E9  00A4               	movwf	___aldiv@divisor
  6485  09EA  0021               	movlb	1	; select bank1
  6486  09EB  084F               	movf	(_PidTi+1)^(0+128),w
  6487  09EC  0020               	movlb	0	; select bank0
  6488  09ED  00A5               	movwf	___aldiv@divisor+1
  6489  09EE  01A6               	clrf	___aldiv@divisor+2
  6490  09EF  01A7               	clrf	___aldiv@divisor+3
  6491  09F0  0021               	movlb	1	; select bank1
  6492  09F1  0850               	movf	_PidKp^(0+128),w
  6493  09F2  00F1               	movwf	___lmul@multiplier
  6494  09F3  0851               	movf	(_PidKp+1)^(0+128),w
  6495  09F4  00F2               	movwf	___lmul@multiplier+1
  6496  09F5  01F3               	clrf	___lmul@multiplier+2
  6497  09F6  01F4               	clrf	___lmul@multiplier+3
  6498  09F7  0823               	movf	(_err+3)^(0+128),w
  6499  09F8  00F8               	movwf	___lmul@multiplicand+3
  6500  09F9  0822               	movf	(_err+2)^(0+128),w
  6501  09FA  00F7               	movwf	___lmul@multiplicand+2
  6502  09FB  0821               	movf	(_err+1)^(0+128),w
  6503  09FC  00F6               	movwf	___lmul@multiplicand+1
  6504  09FD  0820               	movf	_err^(0+128),w
  6505  09FE  00F5               	movwf	___lmul@multiplicand
  6506  09FF  319D  25BA  3188   	fcall	___lmul
  6507  0A02  0874               	movf	?___lmul+3,w
  6508  0A03  0020               	movlb	0	; select bank0
  6509  0A04  00AB               	movwf	___aldiv@dividend+3
  6510  0A05  0873               	movf	?___lmul+2,w
  6511  0A06  00AA               	movwf	___aldiv@dividend+2
  6512  0A07  0872               	movf	?___lmul+1,w
  6513  0A08  00A9               	movwf	___aldiv@dividend+1
  6514  0A09  0871               	movf	?___lmul,w
  6515  0A0A  00A8               	movwf	___aldiv@dividend
  6516  0A0B  3193  2329  3188   	fcall	___aldiv
  6517  0A0E  0020               	movlb	0	; select bank0
  6518  0A0F  0827               	movf	?___aldiv+3,w
  6519  0A10  0021               	movlb	1	; select bank1
  6520  0A11  00BF               	movwf	(_x1+3)^(0+128)
  6521  0A12  0020               	movlb	0	; select bank0
  6522  0A13  0826               	movf	?___aldiv+2,w
  6523  0A14  0021               	movlb	1	; select bank1
  6524  0A15  00BE               	movwf	(_x1+2)^(0+128)
  6525  0A16  0020               	movlb	0	; select bank0
  6526  0A17  0825               	movf	?___aldiv+1,w
  6527  0A18  0021               	movlb	1	; select bank1
  6528  0A19  00BD               	movwf	(_x1+1)^(0+128)
  6529  0A1A  0020               	movlb	0	; select bank0
  6530  0A1B  0824               	movf	?___aldiv,w
  6531  0A1C  0021               	movlb	1	; select bank1
  6532  0A1D  00BC               	movwf	_x1^(0+128)
  6533                           
  6534                           ;sample.c: 357: t32=x0+x1;
  6535  0A1E  0020               	movlb	0	; select bank0
  6536  0A1F  084B               	movf	_x0,w
  6537  0A20  0021               	movlb	1	; select bank1
  6538  0A21  073C               	addwf	_x1^(0+128),w
  6539  0A22  0020               	movlb	0	; select bank0
  6540  0A23  00B2               	movwf	??_pid_pwm1_idrv_run
  6541  0A24  084C               	movf	_x0+1,w
  6542  0A25  0021               	movlb	1	; select bank1
  6543  0A26  3D3D               	addwfc	(_x1+1)^(0+128),w
  6544  0A27  0020               	movlb	0	; select bank0
  6545  0A28  00B3               	movwf	??_pid_pwm1_idrv_run+1
  6546  0A29  084D               	movf	_x0+2,w
  6547  0A2A  0021               	movlb	1	; select bank1
  6548  0A2B  3D3E               	addwfc	(_x1+2)^(0+128),w
  6549  0A2C  0020               	movlb	0	; select bank0
  6550  0A2D  00B4               	movwf	??_pid_pwm1_idrv_run+2
  6551  0A2E  084E               	movf	_x0+3,w
  6552  0A2F  0021               	movlb	1	; select bank1
  6553  0A30  3D3F               	addwfc	(_x1+3)^(0+128),w
  6554  0A31  0020               	movlb	0	; select bank0
  6555  0A32  00B5               	movwf	??_pid_pwm1_idrv_run+3
  6556  0A33  0835               	movf	??_pid_pwm1_idrv_run+3,w
  6557  0A34  00BD               	movwf	pid_pwm1_idrv_run@t32+3
  6558  0A35  0834               	movf	??_pid_pwm1_idrv_run+2,w
  6559  0A36  00BC               	movwf	pid_pwm1_idrv_run@t32+2
  6560  0A37  0833               	movf	??_pid_pwm1_idrv_run+1,w
  6561  0A38  00BB               	movwf	pid_pwm1_idrv_run@t32+1
  6562  0A39  0832               	movf	??_pid_pwm1_idrv_run,w
  6563  0A3A  00BA               	movwf	pid_pwm1_idrv_run@t32
  6564                           
  6565                           ;sample.c: 358: t32/=10000;
  6566  0A3B  3000               	movlw	0
  6567  0A3C  00A7               	movwf	___aldiv@divisor+3
  6568  0A3D  3000               	movlw	0
  6569  0A3E  00A6               	movwf	___aldiv@divisor+2
  6570  0A3F  3027               	movlw	39
  6571  0A40  00A5               	movwf	___aldiv@divisor+1
  6572  0A41  3010               	movlw	16
  6573  0A42  00A4               	movwf	___aldiv@divisor
  6574  0A43  083D               	movf	pid_pwm1_idrv_run@t32+3,w
  6575  0A44  00AB               	movwf	___aldiv@dividend+3
  6576  0A45  083C               	movf	pid_pwm1_idrv_run@t32+2,w
  6577  0A46  00AA               	movwf	___aldiv@dividend+2
  6578  0A47  083B               	movf	pid_pwm1_idrv_run@t32+1,w
  6579  0A48  00A9               	movwf	___aldiv@dividend+1
  6580  0A49  083A               	movf	pid_pwm1_idrv_run@t32,w
  6581  0A4A  00A8               	movwf	___aldiv@dividend
  6582  0A4B  3193  2329  3188   	fcall	___aldiv
  6583  0A4E  0020               	movlb	0	; select bank0
  6584  0A4F  0827               	movf	?___aldiv+3,w
  6585  0A50  00BD               	movwf	pid_pwm1_idrv_run@t32+3
  6586  0A51  0826               	movf	?___aldiv+2,w
  6587  0A52  00BC               	movwf	pid_pwm1_idrv_run@t32+2
  6588  0A53  0825               	movf	?___aldiv+1,w
  6589  0A54  00BB               	movwf	pid_pwm1_idrv_run@t32+1
  6590  0A55  0824               	movf	?___aldiv,w
  6591  0A56  00BA               	movwf	pid_pwm1_idrv_run@t32
  6592                           
  6593                           ;sample.c: 359: t32+=pidU;
  6594  0A57  0021               	movlb	1	; select bank1
  6595  0A58  0856               	movf	_pidU^(0+128),w
  6596  0A59  0020               	movlb	0	; select bank0
  6597  0A5A  07BA               	addwf	pid_pwm1_idrv_run@t32,f
  6598  0A5B  0021               	movlb	1	; select bank1
  6599  0A5C  0857               	movf	(_pidU+1)^(0+128),w
  6600  0A5D  0020               	movlb	0	; select bank0
  6601  0A5E  3DBB               	addwfc	pid_pwm1_idrv_run@t32+1,f
  6602  0A5F  3000               	movlw	0
  6603  0A60  3DBC               	addwfc	pid_pwm1_idrv_run@t32+2,f
  6604  0A61  3DBD               	addwfc	pid_pwm1_idrv_run@t32+3,f
  6605                           
  6606                           ;sample.c: 361: __nop();
  6607  0A62  0000               	nop
  6608                           
  6609                           ;sample.c: 362: if(t32>1200)t32=1200;
  6610  0A63  0020               	movlb	0	; select bank0
  6611  0A64  1BBD               	btfsc	pid_pwm1_idrv_run@t32+3,7
  6612  0A65  2A7A               	goto	l5175
  6613  0A66  083D               	movf	pid_pwm1_idrv_run@t32+3,w
  6614  0A67  1D03               	btfss	3,2
  6615  0A68  2A72               	goto	l5173
  6616  0A69  083C               	movf	pid_pwm1_idrv_run@t32+2,w
  6617  0A6A  1D03               	btfss	3,2
  6618  0A6B  2A72               	goto	l5173
  6619  0A6C  30B1               	movlw	177
  6620  0A6D  023A               	subwf	pid_pwm1_idrv_run@t32,w
  6621  0A6E  3004               	movlw	4
  6622  0A6F  3B3B               	subwfb	pid_pwm1_idrv_run@t32+1,w
  6623  0A70  1C03               	btfss	3,0
  6624  0A71  2A7A               	goto	l5175
  6625  0A72                     l5173:	
  6626  0A72  3000               	movlw	0
  6627  0A73  00BD               	movwf	pid_pwm1_idrv_run@t32+3
  6628  0A74  3000               	movlw	0
  6629  0A75  00BC               	movwf	pid_pwm1_idrv_run@t32+2
  6630  0A76  3004               	movlw	4
  6631  0A77  00BB               	movwf	pid_pwm1_idrv_run@t32+1
  6632  0A78  30B0               	movlw	176
  6633  0A79  00BA               	movwf	pid_pwm1_idrv_run@t32
  6634  0A7A                     l5175:	
  6635                           
  6636                           ;sample.c: 363: if(t32<5)t32=5;
  6637  0A7A  1BBD               	btfsc	pid_pwm1_idrv_run@t32+3,7
  6638  0A7B  2A89               	goto	l5177
  6639  0A7C  083D               	movf	pid_pwm1_idrv_run@t32+3,w
  6640  0A7D  1D03               	btfss	3,2
  6641  0A7E  2A91               	goto	l663
  6642  0A7F  083C               	movf	pid_pwm1_idrv_run@t32+2,w
  6643  0A80  1D03               	btfss	3,2
  6644  0A81  2A91               	goto	l663
  6645  0A82  083B               	movf	pid_pwm1_idrv_run@t32+1,w
  6646  0A83  1D03               	btfss	3,2
  6647  0A84  2A91               	goto	l663
  6648  0A85  3005               	movlw	5
  6649  0A86  023A               	subwf	pid_pwm1_idrv_run@t32,w
  6650  0A87  1803               	btfsc	3,0
  6651  0A88  2A91               	goto	l663
  6652  0A89                     l5177:	
  6653  0A89  3000               	movlw	0
  6654  0A8A  00BD               	movwf	pid_pwm1_idrv_run@t32+3
  6655  0A8B  3000               	movlw	0
  6656  0A8C  00BC               	movwf	pid_pwm1_idrv_run@t32+2
  6657  0A8D  3000               	movlw	0
  6658  0A8E  00BB               	movwf	pid_pwm1_idrv_run@t32+1
  6659  0A8F  3005               	movlw	5
  6660  0A90  00BA               	movwf	pid_pwm1_idrv_run@t32
  6661  0A91                     l663:	
  6662                           
  6663                           ;sample.c: 364: pidU=(uint16_t)t32;
  6664  0A91  083B               	movf	pid_pwm1_idrv_run@t32+1,w
  6665  0A92  0021               	movlb	1	; select bank1
  6666  0A93  00D7               	movwf	(_pidU+1)^(0+128)
  6667  0A94  0020               	movlb	0	; select bank0
  6668  0A95  083A               	movf	pid_pwm1_idrv_run@t32,w
  6669  0A96  0021               	movlb	1	; select bank1
  6670  0A97  00D6               	movwf	_pidU^(0+128)
  6671                           
  6672                           ;sample.c: 366: t32+=idelta;
  6673  0A98  0844               	movf	_idelta^(0+128),w
  6674  0A99  0020               	movlb	0	; select bank0
  6675  0A9A  00B2               	movwf	??_pid_pwm1_idrv_run
  6676  0A9B  0021               	movlb	1	; select bank1
  6677  0A9C  0845               	movf	(_idelta+1)^(0+128),w
  6678  0A9D  0020               	movlb	0	; select bank0
  6679  0A9E  00B3               	movwf	??_pid_pwm1_idrv_run+1
  6680  0A9F  3000               	movlw	0
  6681  0AA0  1BB3               	btfsc	??_pid_pwm1_idrv_run+1,7
  6682  0AA1  30FF               	movlw	255
  6683  0AA2  00B4               	movwf	??_pid_pwm1_idrv_run+2
  6684  0AA3  00B5               	movwf	??_pid_pwm1_idrv_run+3
  6685  0AA4  0832               	movf	??_pid_pwm1_idrv_run,w
  6686  0AA5  07BA               	addwf	pid_pwm1_idrv_run@t32,f
  6687  0AA6  0833               	movf	??_pid_pwm1_idrv_run+1,w
  6688  0AA7  3DBB               	addwfc	pid_pwm1_idrv_run@t32+1,f
  6689  0AA8  0834               	movf	??_pid_pwm1_idrv_run+2,w
  6690  0AA9  3DBC               	addwfc	pid_pwm1_idrv_run@t32+2,f
  6691  0AAA  0835               	movf	??_pid_pwm1_idrv_run+3,w
  6692  0AAB  3DBD               	addwfc	pid_pwm1_idrv_run@t32+3,f
  6693                           
  6694                           ;sample.c: 367: if(t32>1200)t32=1200;
  6695  0AAC  1BBD               	btfsc	pid_pwm1_idrv_run@t32+3,7
  6696  0AAD  2AC2               	goto	l5183
  6697  0AAE  083D               	movf	pid_pwm1_idrv_run@t32+3,w
  6698  0AAF  1D03               	btfss	3,2
  6699  0AB0  2ABA               	goto	l5181
  6700  0AB1  083C               	movf	pid_pwm1_idrv_run@t32+2,w
  6701  0AB2  1D03               	btfss	3,2
  6702  0AB3  2ABA               	goto	l5181
  6703  0AB4  30B1               	movlw	177
  6704  0AB5  023A               	subwf	pid_pwm1_idrv_run@t32,w
  6705  0AB6  3004               	movlw	4
  6706  0AB7  3B3B               	subwfb	pid_pwm1_idrv_run@t32+1,w
  6707  0AB8  1C03               	btfss	3,0
  6708  0AB9  2AC2               	goto	l5183
  6709  0ABA                     l5181:	
  6710  0ABA  3000               	movlw	0
  6711  0ABB  00BD               	movwf	pid_pwm1_idrv_run@t32+3
  6712  0ABC  3000               	movlw	0
  6713  0ABD  00BC               	movwf	pid_pwm1_idrv_run@t32+2
  6714  0ABE  3004               	movlw	4
  6715  0ABF  00BB               	movwf	pid_pwm1_idrv_run@t32+1
  6716  0AC0  30B0               	movlw	176
  6717  0AC1  00BA               	movwf	pid_pwm1_idrv_run@t32
  6718  0AC2                     l5183:	
  6719                           
  6720                           ;sample.c: 368: if(t32<5)t32=5;
  6721  0AC2  1BBD               	btfsc	pid_pwm1_idrv_run@t32+3,7
  6722  0AC3  2AD1               	goto	l5185
  6723  0AC4  083D               	movf	pid_pwm1_idrv_run@t32+3,w
  6724  0AC5  1D03               	btfss	3,2
  6725  0AC6  2AD9               	goto	l5187
  6726  0AC7  083C               	movf	pid_pwm1_idrv_run@t32+2,w
  6727  0AC8  1D03               	btfss	3,2
  6728  0AC9  2AD9               	goto	l5187
  6729  0ACA  083B               	movf	pid_pwm1_idrv_run@t32+1,w
  6730  0ACB  1D03               	btfss	3,2
  6731  0ACC  2AD9               	goto	l5187
  6732  0ACD  3005               	movlw	5
  6733  0ACE  023A               	subwf	pid_pwm1_idrv_run@t32,w
  6734  0ACF  1803               	btfsc	3,0
  6735  0AD0  2AD9               	goto	l5187
  6736  0AD1                     l5185:	
  6737  0AD1  3000               	movlw	0
  6738  0AD2  00BD               	movwf	pid_pwm1_idrv_run@t32+3
  6739  0AD3  3000               	movlw	0
  6740  0AD4  00BC               	movwf	pid_pwm1_idrv_run@t32+2
  6741  0AD5  3000               	movlw	0
  6742  0AD6  00BB               	movwf	pid_pwm1_idrv_run@t32+1
  6743  0AD7  3005               	movlw	5
  6744  0AD8  00BA               	movwf	pid_pwm1_idrv_run@t32
  6745  0AD9                     l5187:	
  6746                           
  6747                           ;sample.c: 370: set_idrv_pwm1_duty((uint16_t)t32);
  6748  0AD9  083B               	movf	pid_pwm1_idrv_run@t32+1,w
  6749  0ADA  00F8               	movwf	set_idrv_pwm1_duty@duty+1
  6750  0ADB  083A               	movf	pid_pwm1_idrv_run@t32,w
  6751  0ADC  00F7               	movwf	set_idrv_pwm1_duty@duty
  6752  0ADD  319D  2534         	fcall	_set_idrv_pwm1_duty
  6753  0ADF  0008               	return
  6754  0AE0                     __end_of_pid_pwm1_idrv_run:	
  6755                           
  6756                           	psect	text8
  6757  1D34                     __ptext8:	
  6758 ;; *************** function _set_idrv_pwm1_duty *****************
  6759 ;; Defined at:
  6760 ;;		line 82 in file "src/api/sample.c"
  6761 ;; Parameters:    Size  Location     Type
  6762 ;;  duty            2    7[COMMON] unsigned int 
  6763 ;; Auto vars:     Size  Location     Type
  6764 ;;  t16             2    9[COMMON] unsigned int 
  6765 ;; Return value:  Size  Location     Type
  6766 ;;                  1    wreg      void 
  6767 ;; Registers used:
  6768 ;;		wreg, status,2, pclath, cstack
  6769 ;; Tracked objects:
  6770 ;;		On entry : 0/0
  6771 ;;		On exit  : 0/0
  6772 ;;		Unchanged: 0/0
  6773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6774 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6775 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6777 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6778 ;;Total ram usage:        4 bytes
  6779 ;; Hardware stack levels used:    1
  6780 ;; Hardware stack levels required when called:    2
  6781 ;; This function calls:
  6782 ;;		_get_idrv_pwm1_duty
  6783 ;; This function is called by:
  6784 ;;		_pid_pwm1_idrv_run
  6785 ;; This function uses a non-reentrant model
  6786 ;;
  6787                           
  6788                           
  6789                           ;psect for function _set_idrv_pwm1_duty
  6790  1D34                     _set_idrv_pwm1_duty:	
  6791                           
  6792                           ;sample.c: 85: uint16_t t16;;sample.c: 86: pwm1DutyForIdrv=duty;
  6793                           
  6794                           ;incstack = 0
  6795                           ; Regs used in _set_idrv_pwm1_duty: [wreg+status,2+pclath+cstack]
  6796  1D34  0878               	movf	set_idrv_pwm1_duty@duty+1,w
  6797  1D35  0021               	movlb	1	; select bank1
  6798  1D36  00DB               	movwf	(_pwm1DutyForIdrv+1)^(0+128)
  6799  1D37  0877               	movf	set_idrv_pwm1_duty@duty,w
  6800  1D38  00DA               	movwf	_pwm1DutyForIdrv^(0+128)
  6801                           
  6802                           ;sample.c: 87: t16=get_idrv_pwm1_duty();
  6803  1D39  319C  24B0  319D   	fcall	_get_idrv_pwm1_duty
  6804  1D3C  0872               	movf	?_get_idrv_pwm1_duty+1,w
  6805  1D3D  00FA               	movwf	set_idrv_pwm1_duty@t16+1
  6806  1D3E  0871               	movf	?_get_idrv_pwm1_duty,w
  6807  1D3F  00F9               	movwf	set_idrv_pwm1_duty@t16
  6808                           
  6809                           ;sample.c: 88: if(t16==duty)return;
  6810  1D40  0878               	movf	set_idrv_pwm1_duty@duty+1,w
  6811  1D41  067A               	xorwf	set_idrv_pwm1_duty@t16+1,w
  6812  1D42  1D03               	skipz
  6813  1D43  2D46               	goto	u2435
  6814  1D44  0877               	movf	set_idrv_pwm1_duty@duty,w
  6815  1D45  0679               	xorwf	set_idrv_pwm1_duty@t16,w
  6816  1D46                     u2435:	
  6817  1D46  1903               	btfsc	3,2
  6818  1D47  0008               	return
  6819                           
  6820                           ;sample.c: 91: PWM1CONbits.EN = 0;
  6821  1D48  003B               	movlb	27	; select bank27
  6822  1D49  139B               	bcf	27,7	;volatile
  6823                           
  6824                           ;sample.c: 92: PWM1DCL= (uint8_t)(duty&0xff);
  6825  1D4A  0877               	movf	set_idrv_pwm1_duty@duty,w
  6826  1D4B  0093               	movwf	19	;volatile
  6827                           
  6828                           ;sample.c: 93: PWM1DCH=(uint8_t)(duty>>8);
  6829  1D4C  0878               	movf	set_idrv_pwm1_duty@duty+1,w
  6830  1D4D  0094               	movwf	20	;volatile
  6831                           
  6832                           ;sample.c: 94: PWM1CONbits.EN = 1;
  6833  1D4E  179B               	bsf	27,7	;volatile
  6834  1D4F  0008               	return
  6835  1D50                     __end_of_set_idrv_pwm1_duty:	
  6836                           
  6837                           	psect	text9
  6838  1CB0                     __ptext9:	
  6839 ;; *************** function _get_idrv_pwm1_duty *****************
  6840 ;; Defined at:
  6841 ;;		line 73 in file "src/api/sample.c"
  6842 ;; Parameters:    Size  Location     Type
  6843 ;;		None
  6844 ;; Auto vars:     Size  Location     Type
  6845 ;;  t16             2    5[COMMON] unsigned int 
  6846 ;; Return value:  Size  Location     Type
  6847 ;;                  2    1[COMMON] unsigned int 
  6848 ;; Registers used:
  6849 ;;		wreg
  6850 ;; Tracked objects:
  6851 ;;		On entry : 0/0
  6852 ;;		On exit  : 0/0
  6853 ;;		Unchanged: 0/0
  6854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6855 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6856 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6857 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6858 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6859 ;;Total ram usage:        6 bytes
  6860 ;; Hardware stack levels used:    1
  6861 ;; Hardware stack levels required when called:    1
  6862 ;; This function calls:
  6863 ;;		Nothing
  6864 ;; This function is called by:
  6865 ;;		_set_idrv_pwm1_duty
  6866 ;; This function uses a non-reentrant model
  6867 ;;
  6868                           
  6869                           
  6870                           ;psect for function _get_idrv_pwm1_duty
  6871  1CB0                     _get_idrv_pwm1_duty:	
  6872                           
  6873                           ;sample.c: 76: uint16_t t16=PWM1DCH;
  6874                           
  6875                           ;incstack = 0
  6876                           ; Regs used in _get_idrv_pwm1_duty: [wreg]
  6877  1CB0  003B               	movlb	27	; select bank27
  6878  1CB1  0814               	movf	20,w	;volatile
  6879  1CB2  00F3               	movwf	??_get_idrv_pwm1_duty
  6880  1CB3  01F4               	clrf	??_get_idrv_pwm1_duty+1
  6881  1CB4  0873               	movf	??_get_idrv_pwm1_duty,w
  6882  1CB5  00F5               	movwf	get_idrv_pwm1_duty@t16
  6883  1CB6  0874               	movf	??_get_idrv_pwm1_duty+1,w
  6884  1CB7  00F6               	movwf	get_idrv_pwm1_duty@t16+1
  6885                           
  6886                           ;sample.c: 77: t16<<=8;
  6887  1CB8  3008               	movlw	8
  6888  1CB9                     u2365:	
  6889  1CB9  35F5               	lslf	get_idrv_pwm1_duty@t16,f
  6890  1CBA  0DF6               	rlf	get_idrv_pwm1_duty@t16+1,f
  6891  1CBB  0B89               	decfsz	9,f
  6892  1CBC  2CB9               	goto	u2365
  6893                           
  6894                           ;sample.c: 78: t16|=PWM1DCL;
  6895  1CBD  0813               	movf	19,w	;volatile
  6896  1CBE  00F3               	movwf	??_get_idrv_pwm1_duty
  6897  1CBF  01F4               	clrf	??_get_idrv_pwm1_duty+1
  6898  1CC0  0873               	movf	??_get_idrv_pwm1_duty,w
  6899  1CC1  04F5               	iorwf	get_idrv_pwm1_duty@t16,f
  6900  1CC2  0874               	movf	??_get_idrv_pwm1_duty+1,w
  6901  1CC3  04F6               	iorwf	get_idrv_pwm1_duty@t16+1,f
  6902                           
  6903                           ;sample.c: 79: return t16;
  6904  1CC4  0876               	movf	get_idrv_pwm1_duty@t16+1,w
  6905  1CC5  00F2               	movwf	?_get_idrv_pwm1_duty+1
  6906  1CC6  0875               	movf	get_idrv_pwm1_duty@t16,w
  6907  1CC7  00F1               	movwf	?_get_idrv_pwm1_duty
  6908  1CC8  0008               	return
  6909  1CC9                     __end_of_get_idrv_pwm1_duty:	
  6910                           
  6911                           	psect	text10
  6912  1CFD                     __ptext10:	
  6913 ;; *************** function ___wmul *****************
  6914 ;; Defined at:
  6915 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul16.c"
  6916 ;; Parameters:    Size  Location     Type
  6917 ;;  multiplier      2    1[COMMON] unsigned int 
  6918 ;;  multiplicand    2    3[COMMON] unsigned int 
  6919 ;; Auto vars:     Size  Location     Type
  6920 ;;  product         2    5[COMMON] unsigned int 
  6921 ;; Return value:  Size  Location     Type
  6922 ;;                  2    1[COMMON] unsigned int 
  6923 ;; Registers used:
  6924 ;;		wreg, status,2, status,0
  6925 ;; Tracked objects:
  6926 ;;		On entry : 0/0
  6927 ;;		On exit  : 0/0
  6928 ;;		Unchanged: 0/0
  6929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6930 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6931 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6933 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6934 ;;Total ram usage:        6 bytes
  6935 ;; Hardware stack levels used:    1
  6936 ;; Hardware stack levels required when called:    1
  6937 ;; This function calls:
  6938 ;;		Nothing
  6939 ;; This function is called by:
  6940 ;;		_pid_pwm1_idrv_run
  6941 ;;		_sys_data_init
  6942 ;; This function uses a non-reentrant model
  6943 ;;
  6944                           
  6945                           
  6946                           ;psect for function ___wmul
  6947  1CFD                     ___wmul:	
  6948                           
  6949                           ;incstack = 0
  6950                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6951  1CFD  01F5               	clrf	___wmul@product
  6952  1CFE  01F6               	clrf	___wmul@product+1
  6953  1CFF                     l3965:	
  6954  1CFF  1C71               	btfss	___wmul@multiplier,0
  6955  1D00  2D05               	goto	l1094
  6956  1D01  0873               	movf	___wmul@multiplicand,w
  6957  1D02  07F5               	addwf	___wmul@product,f
  6958  1D03  0874               	movf	___wmul@multiplicand+1,w
  6959  1D04  3DF6               	addwfc	___wmul@product+1,f
  6960  1D05                     l1094:	
  6961  1D05  3001               	movlw	1
  6962  1D06                     u2785:	
  6963  1D06  35F3               	lslf	___wmul@multiplicand,f
  6964  1D07  0DF4               	rlf	___wmul@multiplicand+1,f
  6965  1D08  0B89               	decfsz	9,f
  6966  1D09  2D06               	goto	u2785
  6967  1D0A  3001               	movlw	1
  6968  1D0B                     u2795:	
  6969  1D0B  36F2               	lsrf	___wmul@multiplier+1,f
  6970  1D0C  0CF1               	rrf	___wmul@multiplier,f
  6971  1D0D  0B89               	decfsz	9,f
  6972  1D0E  2D0B               	goto	u2795
  6973  1D0F  0871               	movf	___wmul@multiplier,w
  6974  1D10  0472               	iorwf	___wmul@multiplier+1,w
  6975  1D11  1D03               	btfss	3,2
  6976  1D12  2CFF               	goto	l3965
  6977  1D13  0876               	movf	___wmul@product+1,w
  6978  1D14  00F2               	movwf	?___wmul+1
  6979  1D15  0875               	movf	___wmul@product,w
  6980  1D16  00F1               	movwf	?___wmul
  6981  1D17  0008               	return
  6982  1D18                     __end_of___wmul:	
  6983                           
  6984                           	psect	text11
  6985  1DEC                     __ptext11:	
  6986 ;; *************** function ___lwdiv *****************
  6987 ;; Defined at:
  6988 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwdiv.c"
  6989 ;; Parameters:    Size  Location     Type
  6990 ;;  divisor         2    1[COMMON] unsigned int 
  6991 ;;  dividend        2    3[COMMON] unsigned int 
  6992 ;; Auto vars:     Size  Location     Type
  6993 ;;  quotient        2    6[COMMON] unsigned int 
  6994 ;;  counter         1    8[COMMON] unsigned char 
  6995 ;; Return value:  Size  Location     Type
  6996 ;;                  2    1[COMMON] unsigned int 
  6997 ;; Registers used:
  6998 ;;		wreg, status,2, status,0
  6999 ;; Tracked objects:
  7000 ;;		On entry : 0/0
  7001 ;;		On exit  : 0/0
  7002 ;;		Unchanged: 0/0
  7003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7004 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7005 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7006 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7007 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7008 ;;Total ram usage:        8 bytes
  7009 ;; Hardware stack levels used:    1
  7010 ;; Hardware stack levels required when called:    1
  7011 ;; This function calls:
  7012 ;;		Nothing
  7013 ;; This function is called by:
  7014 ;;		_pid_pwm1_idrv_run
  7015 ;;		_pid_pwm2_vout_run
  7016 ;; This function uses a non-reentrant model
  7017 ;;
  7018                           
  7019                           
  7020                           ;psect for function ___lwdiv
  7021  1DEC                     ___lwdiv:	
  7022                           
  7023                           ;incstack = 0
  7024                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  7025  1DEC  01F6               	clrf	___lwdiv@quotient
  7026  1DED  01F7               	clrf	___lwdiv@quotient+1
  7027  1DEE  0871               	movf	___lwdiv@divisor,w
  7028  1DEF  0472               	iorwf	___lwdiv@divisor+1,w
  7029  1DF0  1903               	btfsc	3,2
  7030  1DF1  2E1B               	goto	l4121
  7031  1DF2  01F8               	clrf	___lwdiv@counter
  7032  1DF3  0AF8               	incf	___lwdiv@counter,f
  7033  1DF4                     l4109:	
  7034  1DF4  1BF2               	btfsc	___lwdiv@divisor+1,7
  7035  1DF5  2E00               	goto	l4111
  7036  1DF6  3001               	movlw	1
  7037  1DF7                     u3135:	
  7038  1DF7  35F1               	lslf	___lwdiv@divisor,f
  7039  1DF8  0DF2               	rlf	___lwdiv@divisor+1,f
  7040  1DF9  0B89               	decfsz	9,f
  7041  1DFA  2DF7               	goto	u3135
  7042  1DFB  3001               	movlw	1
  7043  1DFC  00F5               	movwf	??___lwdiv
  7044  1DFD  0875               	movf	??___lwdiv,w
  7045  1DFE  07F8               	addwf	___lwdiv@counter,f
  7046  1DFF  2DF4               	goto	l4109
  7047  1E00                     l4111:	
  7048  1E00  3001               	movlw	1
  7049  1E01                     u3155:	
  7050  1E01  35F6               	lslf	___lwdiv@quotient,f
  7051  1E02  0DF7               	rlf	___lwdiv@quotient+1,f
  7052  1E03  0B89               	decfsz	9,f
  7053  1E04  2E01               	goto	u3155
  7054  1E05  0872               	movf	___lwdiv@divisor+1,w
  7055  1E06  0274               	subwf	___lwdiv@dividend+1,w
  7056  1E07  1D03               	skipz
  7057  1E08  2E0B               	goto	u3165
  7058  1E09  0871               	movf	___lwdiv@divisor,w
  7059  1E0A  0273               	subwf	___lwdiv@dividend,w
  7060  1E0B                     u3165:	
  7061  1E0B  1C03               	skipc
  7062  1E0C  2E12               	goto	l4117
  7063  1E0D  0871               	movf	___lwdiv@divisor,w
  7064  1E0E  02F3               	subwf	___lwdiv@dividend,f
  7065  1E0F  0872               	movf	___lwdiv@divisor+1,w
  7066  1E10  3BF4               	subwfb	___lwdiv@dividend+1,f
  7067  1E11  1476               	bsf	___lwdiv@quotient,0
  7068  1E12                     l4117:	
  7069  1E12  3001               	movlw	1
  7070  1E13                     u3175:	
  7071  1E13  36F2               	lsrf	___lwdiv@divisor+1,f
  7072  1E14  0CF1               	rrf	___lwdiv@divisor,f
  7073  1E15  0B89               	decfsz	9,f
  7074  1E16  2E13               	goto	u3175
  7075  1E17  3001               	movlw	1
  7076  1E18  02F8               	subwf	___lwdiv@counter,f
  7077  1E19  1D03               	btfss	3,2
  7078  1E1A  2E00               	goto	l4111
  7079  1E1B                     l4121:	
  7080  1E1B  0877               	movf	___lwdiv@quotient+1,w
  7081  1E1C  00F2               	movwf	?___lwdiv+1
  7082  1E1D  0876               	movf	___lwdiv@quotient,w
  7083  1E1E  00F1               	movwf	?___lwdiv
  7084  1E1F  0008               	return
  7085  1E20                     __end_of___lwdiv:	
  7086                           
  7087                           	psect	text12
  7088  10AB                     __ptext12:	
  7089 ;; *************** function ___awdiv *****************
  7090 ;; Defined at:
  7091 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\awdiv.c"
  7092 ;; Parameters:    Size  Location     Type
  7093 ;;  divisor         2    1[COMMON] int 
  7094 ;;  dividend        2    3[COMMON] int 
  7095 ;; Auto vars:     Size  Location     Type
  7096 ;;  quotient        2    8[COMMON] int 
  7097 ;;  sign            1    7[COMMON] unsigned char 
  7098 ;;  counter         1    6[COMMON] unsigned char 
  7099 ;; Return value:  Size  Location     Type
  7100 ;;                  2    1[COMMON] int 
  7101 ;; Registers used:
  7102 ;;		wreg, status,2, status,0
  7103 ;; Tracked objects:
  7104 ;;		On entry : 0/0
  7105 ;;		On exit  : 0/0
  7106 ;;		Unchanged: 0/0
  7107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7108 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7109 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7110 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7111 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7112 ;;Total ram usage:        9 bytes
  7113 ;; Hardware stack levels used:    1
  7114 ;; Hardware stack levels required when called:    1
  7115 ;; This function calls:
  7116 ;;		Nothing
  7117 ;; This function is called by:
  7118 ;;		_pid_pwm1_idrv_run
  7119 ;;		_pid_pwm2_vout_run
  7120 ;; This function uses a non-reentrant model
  7121 ;;
  7122                           
  7123                           
  7124                           ;psect for function ___awdiv
  7125  10AB                     ___awdiv:	
  7126                           
  7127                           ;incstack = 0
  7128                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7129  10AB  01F7               	clrf	___awdiv@sign
  7130  10AC  1FF2               	btfss	___awdiv@divisor+1,7
  7131  10AD  28B5               	goto	l4063
  7132  10AE  09F1               	comf	___awdiv@divisor,f
  7133  10AF  09F2               	comf	___awdiv@divisor+1,f
  7134  10B0  0AF1               	incf	___awdiv@divisor,f
  7135  10B1  1903               	skipnz
  7136  10B2  0AF2               	incf	___awdiv@divisor+1,f
  7137  10B3  01F7               	clrf	___awdiv@sign
  7138  10B4  0AF7               	incf	___awdiv@sign,f
  7139  10B5                     l4063:	
  7140  10B5  1FF4               	btfss	___awdiv@dividend+1,7
  7141  10B6  28C0               	goto	l4069
  7142  10B7  09F3               	comf	___awdiv@dividend,f
  7143  10B8  09F4               	comf	___awdiv@dividend+1,f
  7144  10B9  0AF3               	incf	___awdiv@dividend,f
  7145  10BA  1903               	skipnz
  7146  10BB  0AF4               	incf	___awdiv@dividend+1,f
  7147  10BC  3001               	movlw	1
  7148  10BD  00F5               	movwf	??___awdiv
  7149  10BE  0875               	movf	??___awdiv,w
  7150  10BF  06F7               	xorwf	___awdiv@sign,f
  7151  10C0                     l4069:	
  7152  10C0  01F8               	clrf	___awdiv@quotient
  7153  10C1  01F9               	clrf	___awdiv@quotient+1
  7154  10C2  0871               	movf	___awdiv@divisor,w
  7155  10C3  0472               	iorwf	___awdiv@divisor+1,w
  7156  10C4  1903               	btfsc	3,2
  7157  10C5  28EF               	goto	l4091
  7158  10C6  01F6               	clrf	___awdiv@counter
  7159  10C7  0AF6               	incf	___awdiv@counter,f
  7160  10C8                     l4079:	
  7161  10C8  1BF2               	btfsc	___awdiv@divisor+1,7
  7162  10C9  28D4               	goto	l4081
  7163  10CA  3001               	movlw	1
  7164  10CB                     u3055:	
  7165  10CB  35F1               	lslf	___awdiv@divisor,f
  7166  10CC  0DF2               	rlf	___awdiv@divisor+1,f
  7167  10CD  0B89               	decfsz	9,f
  7168  10CE  28CB               	goto	u3055
  7169  10CF  3001               	movlw	1
  7170  10D0  00F5               	movwf	??___awdiv
  7171  10D1  0875               	movf	??___awdiv,w
  7172  10D2  07F6               	addwf	___awdiv@counter,f
  7173  10D3  28C8               	goto	l4079
  7174  10D4                     l4081:	
  7175  10D4  3001               	movlw	1
  7176  10D5                     u3075:	
  7177  10D5  35F8               	lslf	___awdiv@quotient,f
  7178  10D6  0DF9               	rlf	___awdiv@quotient+1,f
  7179  10D7  0B89               	decfsz	9,f
  7180  10D8  28D5               	goto	u3075
  7181  10D9  0872               	movf	___awdiv@divisor+1,w
  7182  10DA  0274               	subwf	___awdiv@dividend+1,w
  7183  10DB  1D03               	skipz
  7184  10DC  28DF               	goto	u3085
  7185  10DD  0871               	movf	___awdiv@divisor,w
  7186  10DE  0273               	subwf	___awdiv@dividend,w
  7187  10DF                     u3085:	
  7188  10DF  1C03               	skipc
  7189  10E0  28E6               	goto	l4087
  7190  10E1  0871               	movf	___awdiv@divisor,w
  7191  10E2  02F3               	subwf	___awdiv@dividend,f
  7192  10E3  0872               	movf	___awdiv@divisor+1,w
  7193  10E4  3BF4               	subwfb	___awdiv@dividend+1,f
  7194  10E5  1478               	bsf	___awdiv@quotient,0
  7195  10E6                     l4087:	
  7196  10E6  3001               	movlw	1
  7197  10E7                     u3095:	
  7198  10E7  36F2               	lsrf	___awdiv@divisor+1,f
  7199  10E8  0CF1               	rrf	___awdiv@divisor,f
  7200  10E9  0B89               	decfsz	9,f
  7201  10EA  28E7               	goto	u3095
  7202  10EB  3001               	movlw	1
  7203  10EC  02F6               	subwf	___awdiv@counter,f
  7204  10ED  1D03               	btfss	3,2
  7205  10EE  28D4               	goto	l4081
  7206  10EF                     l4091:	
  7207  10EF  0877               	movf	___awdiv@sign,w
  7208  10F0  1903               	btfsc	3,2
  7209  10F1  28F7               	goto	l4095
  7210  10F2  09F8               	comf	___awdiv@quotient,f
  7211  10F3  09F9               	comf	___awdiv@quotient+1,f
  7212  10F4  0AF8               	incf	___awdiv@quotient,f
  7213  10F5  1903               	skipnz
  7214  10F6  0AF9               	incf	___awdiv@quotient+1,f
  7215  10F7                     l4095:	
  7216  10F7  0879               	movf	___awdiv@quotient+1,w
  7217  10F8  00F2               	movwf	?___awdiv+1
  7218  10F9  0878               	movf	___awdiv@quotient,w
  7219  10FA  00F1               	movwf	?___awdiv
  7220  10FB  0008               	return
  7221  10FC                     __end_of___awdiv:	
  7222                           
  7223                           	psect	text13
  7224  114F                     __ptext13:	
  7225 ;; *************** function _modbus_response_process *****************
  7226 ;; Defined at:
  7227 ;;		line 210 in file "src/api/modbus.c"
  7228 ;; Parameters:    Size  Location     Type
  7229 ;;  rbuf            1    wreg     PTR unsigned char 
  7230 ;;		 -> modbusBuf(32), 
  7231 ;;  rlen            2   24[BANK0 ] unsigned int 
  7232 ;; Auto vars:     Size  Location     Type
  7233 ;;  rbuf            1   29[BANK0 ] PTR unsigned char 
  7234 ;;		 -> modbusBuf(32), 
  7235 ;;  pmdbs           1   28[BANK0 ] PTR struct .
  7236 ;;		 -> modbusBuf(32), 
  7237 ;;  resp            1   27[BANK0 ] unsigned char 
  7238 ;; Return value:  Size  Location     Type
  7239 ;;                  1    wreg      void 
  7240 ;; Registers used:
  7241 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7242 ;; Tracked objects:
  7243 ;;		On entry : 0/0
  7244 ;;		On exit  : 0/0
  7245 ;;		Unchanged: 0/0
  7246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7247 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7248 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7249 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7250 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7251 ;;Total ram usage:        6 bytes
  7252 ;; Hardware stack levels used:    1
  7253 ;; Hardware stack levels required when called:    5
  7254 ;; This function calls:
  7255 ;;		_crc_verify
  7256 ;;		_modbus_response_command
  7257 ;;		_modbus_response_illgeal_function
  7258 ;;		_modbus_response_write_mult_register
  7259 ;;		_modbus_response_write_single_register
  7260 ;; This function is called by:
  7261 ;;		_main
  7262 ;; This function uses a non-reentrant model
  7263 ;;
  7264                           
  7265                           
  7266                           ;psect for function _modbus_response_process
  7267  114F                     _modbus_response_process:	
  7268                           
  7269                           ;incstack = 0
  7270                           ; Regs used in _modbus_response_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7271                           ;modbus_response_process@rbuf stored from wreg
  7272  114F  0020               	movlb	0	; select bank0
  7273  1150  00BD               	movwf	modbus_response_process@rbuf
  7274                           
  7275                           ;modbus.c: 211: uint8_t resp=0;
  7276  1151  01BB               	clrf	modbus_response_process@resp
  7277                           
  7278                           ;modbus.c: 212: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)rbuf;
  7279  1152  083D               	movf	modbus_response_process@rbuf,w
  7280  1153  00BA               	movwf	??_modbus_response_process
  7281  1154  083A               	movf	??_modbus_response_process,w
  7282  1155  00BC               	movwf	modbus_response_process@pmdbs
  7283                           
  7284                           ;modbus.c: 215: if((pmdbs->addr!=sysData.id) && (pmdbs->addr!=0x00))return;
  7285  1156  305C               	movlw	92
  7286  1157  0086               	movwf	6
  7287  1158  3023               	movlw	35
  7288  1159  0087               	movwf	7
  7289  115A  3142               	addfsr 1,2
  7290  115B  083C               	movf	modbus_response_process@pmdbs,w
  7291  115C  0084               	movwf	4
  7292  115D  3001               	movlw	1	; select bank2/3
  7293  115E  0085               	movwf	5
  7294  115F  0800               	movf	0,w
  7295  1160  0601               	xorwf	1,w
  7296  1161  1903               	skipnz
  7297  1162  296A               	goto	l5309
  7298  1163  083C               	movf	modbus_response_process@pmdbs,w
  7299  1164  0086               	movwf	6
  7300  1165  3001               	movlw	1	; select bank2/3
  7301  1166  0087               	movwf	7
  7302  1167  0801               	movf	1,w
  7303  1168  1D03               	btfss	3,2
  7304  1169  0008               	return
  7305  116A                     l5309:	
  7306                           
  7307                           ;modbus.c: 216: if(!(crc_verify(rbuf,rlen)))return ;
  7308  116A  083D               	movf	modbus_response_process@rbuf,w
  7309  116B  00A6               	movwf	crc_verify@message
  7310  116C  3001               	movlw	1
  7311  116D  00A7               	movwf	crc_verify@message+1
  7312  116E  0839               	movf	modbus_response_process@rlen+1,w
  7313  116F  00A9               	movwf	crc_verify@n+1
  7314  1170  0838               	movf	modbus_response_process@rlen,w
  7315  1171  00A8               	movwf	crc_verify@n
  7316  1172  319E  2656  3191   	fcall	_crc_verify
  7317  1175  3A00               	xorlw	0
  7318  1176  1903               	btfsc	3,2
  7319  1177  0008               	return
  7320  1178  298F               	goto	l5323
  7321  1179                     l5313:	
  7322                           ;modbus.c: 219: case 0x03:
  7323                           
  7324                           ;modbus.c: 218: switch(pmdbs->func){
  7325                           
  7326                           
  7327                           ;modbus.c: 220: modbus_response_command(rbuf);
  7328  1179  0020               	movlb	0	; select bank0
  7329  117A  083D               	movf	modbus_response_process@rbuf,w
  7330  117B  318F  2739         	fcall	_modbus_response_command
  7331                           
  7332                           ;modbus.c: 221: break;
  7333  117D  0008               	return
  7334  117E                     l5315:	
  7335                           ;modbus.c: 222: case 0x06:
  7336                           
  7337                           
  7338                           ;modbus.c: 223: case 0x26:;modbus.c: 224: modbus_response_write_single_register(rbuf);
  7339  117E  0020               	movlb	0	; select bank0
  7340  117F  083D               	movf	modbus_response_process@rbuf,w
  7341  1180  318C  24D4         	fcall	_modbus_response_write_single_register
  7342                           
  7343                           ;modbus.c: 225: break;
  7344  1182  0008               	return
  7345  1183                     l5317:	
  7346                           ;modbus.c: 226: case 0x10:
  7347                           
  7348                           
  7349                           ;modbus.c: 227: modbus_response_write_mult_register(rbuf);
  7350  1183  0020               	movlb	0	; select bank0
  7351  1184  083D               	movf	modbus_response_process@rbuf,w
  7352  1185  3192  22B7         	fcall	_modbus_response_write_mult_register
  7353                           
  7354                           ;modbus.c: 228: break;
  7355  1187  0008               	return
  7356  1188                     l5319:	
  7357                           ;modbus.c: 251: default:
  7358                           
  7359                           
  7360                           ;modbus.c: 252: modbus_response_illgeal_function(rbuf,0x01);break;
  7361  1188  0020               	movlb	0	; select bank0
  7362  1189  01AC               	clrf	modbus_response_illgeal_function@errcode
  7363  118A  0AAC               	incf	modbus_response_illgeal_function@errcode,f
  7364  118B  083D               	movf	modbus_response_process@rbuf,w
  7365  118C  3190  2069         	fcall	_modbus_response_illgeal_function
  7366                           
  7367                           ;modbus.c: 253: }
  7368  118E  0008               	return
  7369  118F                     l5323:	
  7370  118F  0020               	movlb	0	; select bank0
  7371  1190  0A3C               	incf	modbus_response_process@pmdbs,w
  7372  1191  0086               	movwf	6
  7373  1192  3001               	movlw	1	; select bank2/3
  7374  1193  0087               	movwf	7
  7375  1194  0801               	movf	1,w
  7376                           
  7377                           ; Switch size 1, requested type "space"
  7378                           ; Number of cases is 4, Range of values is 3 to 38
  7379                           ; switch strategies available:
  7380                           ; Name         Instructions Cycles
  7381                           ; simple_byte           13     7 (average)
  7382                           ; direct_byte           81     9 (fixed)
  7383                           ; jumptable            263     9 (fixed)
  7384                           ;	Chosen strategy is simple_byte
  7385  1195  3A03               	xorlw	3	; case 3
  7386  1196  1903               	skipnz
  7387  1197  2979               	goto	l5313
  7388  1198  3A05               	xorlw	5	; case 6
  7389  1199  1903               	skipnz
  7390  119A  297E               	goto	l5315
  7391  119B  3A16               	xorlw	22	; case 16
  7392  119C  1903               	skipnz
  7393  119D  2983               	goto	l5317
  7394  119E  3A36               	xorlw	54	; case 38
  7395  119F  1903               	skipnz
  7396  11A0  297E               	goto	l5315
  7397  11A1  2988               	goto	l5319
  7398  11A2  0008               	return
  7399  11A3                     __end_of_modbus_response_process:	
  7400                           
  7401                           	psect	text14
  7402  0CD4                     __ptext14:	
  7403 ;; *************** function _modbus_response_write_single_register *****************
  7404 ;; Defined at:
  7405 ;;		line 115 in file "src/api/modbus.c"
  7406 ;; Parameters:    Size  Location     Type
  7407 ;;  rbuf            1    wreg     PTR unsigned char 
  7408 ;;		 -> modbusBuf(32), 
  7409 ;; Auto vars:     Size  Location     Type
  7410 ;;  rbuf            1   21[BANK0 ] PTR unsigned char 
  7411 ;;		 -> modbusBuf(32), 
  7412 ;;  startAddr       2   22[BANK0 ] unsigned int 
  7413 ;;  t16             2   17[BANK0 ] unsigned int 
  7414 ;;  pmdbs           1   20[BANK0 ] PTR struct .
  7415 ;;		 -> modbusBuf(32), 
  7416 ;;  i               1   19[BANK0 ] unsigned char 
  7417 ;;  fiSave          1   16[BANK0 ] unsigned char 
  7418 ;; Return value:  Size  Location     Type
  7419 ;;                  1    wreg      void 
  7420 ;; Registers used:
  7421 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7422 ;; Tracked objects:
  7423 ;;		On entry : 0/0
  7424 ;;		On exit  : 0/0
  7425 ;;		Unchanged: 0/0
  7426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7428 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7429 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7430 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7431 ;;Total ram usage:       12 bytes
  7432 ;; Hardware stack levels used:    1
  7433 ;; Hardware stack levels required when called:    4
  7434 ;; This function calls:
  7435 ;;		_crc_append
  7436 ;;		_sys_data_save
  7437 ;;		_uart_send_len
  7438 ;; This function is called by:
  7439 ;;		_modbus_response_process
  7440 ;; This function uses a non-reentrant model
  7441 ;;
  7442                           
  7443                           
  7444                           ;psect for function _modbus_response_write_single_register
  7445  0CD4                     _modbus_response_write_single_register:	
  7446                           
  7447                           ;incstack = 0
  7448                           ; Regs used in _modbus_response_write_single_register: [wreg-fsr1h+status,2+status,0+pcl
      +                          ath+cstack]
  7449                           ;modbus_response_write_single_register@rbuf stored from wreg
  7450  0CD4  0020               	movlb	0	; select bank0
  7451  0CD5  00B5               	movwf	modbus_response_write_single_register@rbuf
  7452                           
  7453                           ;modbus.c: 117: uint16_t startAddr=0;
  7454  0CD6  01B6               	clrf	modbus_response_write_single_register@startAddr
  7455  0CD7  01B7               	clrf	modbus_response_write_single_register@startAddr+1
  7456                           
  7457                           ;modbus.c: 118: uint16_t t16;;modbus.c: 119: uint8_t fiSave=0,i;
  7458  0CD8  01B0               	clrf	modbus_response_write_single_register@fiSave
  7459                           
  7460                           ;modbus.c: 120: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)rbuf;
  7461  0CD9  0835               	movf	modbus_response_write_single_register@rbuf,w
  7462  0CDA  00AC               	movwf	??_modbus_response_write_single_register
  7463  0CDB  082C               	movf	??_modbus_response_write_single_register,w
  7464  0CDC  00B4               	movwf	modbus_response_write_single_register@pmdbs
  7465                           
  7466                           ;modbus.c: 121: if(pmdbs->addr!=sysData.id && pmdbs->addr!=0)return;
  7467  0CDD  305C               	movlw	92
  7468  0CDE  0086               	movwf	6
  7469  0CDF  3023               	movlw	35
  7470  0CE0  0087               	movwf	7
  7471  0CE1  3142               	addfsr 1,2
  7472  0CE2  0834               	movf	modbus_response_write_single_register@pmdbs,w
  7473  0CE3  0084               	movwf	4
  7474  0CE4  3001               	movlw	1	; select bank2/3
  7475  0CE5  0085               	movwf	5
  7476  0CE6  0800               	movf	0,w
  7477  0CE7  0601               	xorwf	1,w
  7478  0CE8  1903               	skipnz
  7479  0CE9  2CF1               	goto	l4909
  7480  0CEA  0834               	movf	modbus_response_write_single_register@pmdbs,w
  7481  0CEB  0086               	movwf	6
  7482  0CEC  3001               	movlw	1	; select bank2/3
  7483  0CED  0087               	movwf	7
  7484  0CEE  0801               	movf	1,w
  7485  0CEF  1D03               	btfss	3,2
  7486  0CF0  0008               	return
  7487  0CF1                     l4909:	
  7488                           
  7489                           ;modbus.c: 122: if(sysData.id==253 && pmdbs->addr==0)return;
  7490  0CF1  305C               	movlw	92
  7491  0CF2  0086               	movwf	6
  7492  0CF3  3023               	movlw	35
  7493  0CF4  0087               	movwf	7
  7494  0CF5  3142               	addfsr 1,2
  7495  0CF6  30FD               	movlw	253
  7496  0CF7  0601               	xorwf	1,w
  7497  0CF8  1D03               	btfss	3,2
  7498  0CF9  2D01               	goto	l4915
  7499  0CFA  0834               	movf	modbus_response_write_single_register@pmdbs,w
  7500  0CFB  0086               	movwf	6
  7501  0CFC  3001               	movlw	1	; select bank2/3
  7502  0CFD  0087               	movwf	7
  7503  0CFE  0801               	movf	1,w
  7504  0CFF  1903               	btfsc	3,2
  7505  0D00  0008               	return
  7506  0D01                     l4915:	
  7507                           
  7508                           ;modbus.c: 123: startAddr=pmdbs->addr_hi;
  7509  0D01  0834               	movf	modbus_response_write_single_register@pmdbs,w
  7510  0D02  3E02               	addlw	2
  7511  0D03  0086               	movwf	6
  7512  0D04  3001               	movlw	1	; select bank2/3
  7513  0D05  0087               	movwf	7
  7514  0D06  0801               	movf	1,w
  7515  0D07  00AC               	movwf	??_modbus_response_write_single_register
  7516  0D08  01AD               	clrf	??_modbus_response_write_single_register+1
  7517  0D09  082C               	movf	??_modbus_response_write_single_register,w
  7518  0D0A  00B6               	movwf	modbus_response_write_single_register@startAddr
  7519  0D0B  082D               	movf	??_modbus_response_write_single_register+1,w
  7520  0D0C  00B7               	movwf	modbus_response_write_single_register@startAddr+1
  7521                           
  7522                           ;modbus.c: 124: startAddr<<=8;
  7523  0D0D  3008               	movlw	8
  7524  0D0E                     u4265:	
  7525  0D0E  35B6               	lslf	modbus_response_write_single_register@startAddr,f
  7526  0D0F  0DB7               	rlf	modbus_response_write_single_register@startAddr+1,f
  7527  0D10  0B89               	decfsz	9,f
  7528  0D11  2D0E               	goto	u4265
  7529                           
  7530                           ;modbus.c: 125: startAddr |= pmdbs->addr_lo;
  7531  0D12  0834               	movf	modbus_response_write_single_register@pmdbs,w
  7532  0D13  3E03               	addlw	3
  7533  0D14  0086               	movwf	6
  7534  0D15  3001               	movlw	1	; select bank2/3
  7535  0D16  0087               	movwf	7
  7536  0D17  0801               	movf	1,w
  7537  0D18  00AC               	movwf	??_modbus_response_write_single_register
  7538  0D19  01AD               	clrf	??_modbus_response_write_single_register+1
  7539  0D1A  082C               	movf	??_modbus_response_write_single_register,w
  7540  0D1B  04B6               	iorwf	modbus_response_write_single_register@startAddr,f
  7541  0D1C  082D               	movf	??_modbus_response_write_single_register+1,w
  7542  0D1D  04B7               	iorwf	modbus_response_write_single_register@startAddr+1,f
  7543                           
  7544                           ;modbus.c: 126: startAddr = startAddr & 0xff;
  7545  0D1E  30FF               	movlw	255
  7546  0D1F  0536               	andwf	modbus_response_write_single_register@startAddr,w
  7547  0D20  00B6               	movwf	modbus_response_write_single_register@startAddr
  7548  0D21  3000               	movlw	0
  7549  0D22  0537               	andwf	modbus_response_write_single_register@startAddr+1,w
  7550  0D23  00B7               	movwf	modbus_response_write_single_register@startAddr+1
  7551                           
  7552                           ;modbus.c: 127: if(startAddr==0x02){
  7553  0D24  3002               	movlw	2
  7554  0D25  0636               	xorwf	modbus_response_write_single_register@startAddr,w
  7555  0D26  0437               	iorwf	modbus_response_write_single_register@startAddr+1,w
  7556  0D27  1D03               	btfss	3,2
  7557  0D28  2D37               	goto	l4927
  7558                           
  7559                           ;modbus.c: 128: sysData.id=rbuf[5];
  7560  0D29  0835               	movf	modbus_response_write_single_register@rbuf,w
  7561  0D2A  3E05               	addlw	5
  7562  0D2B  0086               	movwf	6
  7563  0D2C  3001               	movlw	1	; select bank2/3
  7564  0D2D  0087               	movwf	7
  7565  0D2E  0801               	movf	1,w
  7566  0D2F  00AC               	movwf	??_modbus_response_write_single_register
  7567  0D30  305E               	movlw	94
  7568  0D31  0086               	movwf	6
  7569  0D32  3023               	movlw	35
  7570  0D33  0087               	movwf	7
  7571  0D34  082C               	movf	??_modbus_response_write_single_register,w
  7572  0D35  0081               	movwf	1
  7573  0D36  2DF7               	goto	l830
  7574  0D37                     l4927:	
  7575                           ;modbus.c: 130: }else if(startAddr==0x03){
  7576                           
  7577                           ;modbus.c: 129: fiSave=1;
  7578                           
  7579  0D37  3003               	movlw	3
  7580  0D38  0636               	xorwf	modbus_response_write_single_register@startAddr,w
  7581  0D39  0437               	iorwf	modbus_response_write_single_register@startAddr+1,w
  7582  0D3A  1D03               	btfss	3,2
  7583  0D3B  2D55               	goto	l4935
  7584                           
  7585                           ;modbus.c: 131: sysData.pidSetFlg1=rbuf[4];
  7586  0D3C  0835               	movf	modbus_response_write_single_register@rbuf,w
  7587  0D3D  3E04               	addlw	4
  7588  0D3E  0086               	movwf	6
  7589  0D3F  3001               	movlw	1	; select bank2/3
  7590  0D40  0087               	movwf	7
  7591  0D41  0801               	movf	1,w
  7592  0D42  00AC               	movwf	??_modbus_response_write_single_register
  7593  0D43  305D               	movlw	93
  7594  0D44  0086               	movwf	6
  7595  0D45  3023               	movlw	35
  7596  0D46  0087               	movwf	7
  7597  0D47  082C               	movf	??_modbus_response_write_single_register,w
  7598  0D48  0081               	movwf	1
  7599                           
  7600                           ;modbus.c: 132: sysData.pidSetFlg0=rbuf[5];
  7601  0D49  305C               	movlw	92
  7602  0D4A  0086               	movwf	6
  7603  0D4B  3023               	movlw	35
  7604  0D4C  0087               	movwf	7
  7605  0D4D  0835               	movf	modbus_response_write_single_register@rbuf,w
  7606  0D4E  3E05               	addlw	5
  7607  0D4F  0084               	movwf	4
  7608  0D50  3001               	movlw	1	; select bank2/3
  7609  0D51  0085               	movwf	5
  7610  0D52  0800               	movf	0,w
  7611  0D53  3FC0               	movwi [0]fsr1
  7612  0D54  2DF7               	goto	l830
  7613  0D55                     l4935:	
  7614                           ;modbus.c: 134: }else if(startAddr>0x0f && startAddr < 0x10+30*2){
  7615                           
  7616                           ;modbus.c: 133: fiSave=1;
  7617                           
  7618  0D55  3000               	movlw	0
  7619  0D56  0237               	subwf	modbus_response_write_single_register@startAddr+1,w
  7620  0D57  3010               	movlw	16
  7621  0D58  1903               	skipnz
  7622  0D59  0236               	subwf	modbus_response_write_single_register@startAddr,w
  7623  0D5A  1C03               	skipc
  7624  0D5B  0008               	return
  7625  0D5C  3000               	movlw	0
  7626  0D5D  0237               	subwf	modbus_response_write_single_register@startAddr+1,w
  7627  0D5E  304C               	movlw	76
  7628  0D5F  1903               	skipnz
  7629  0D60  0236               	subwf	modbus_response_write_single_register@startAddr,w
  7630  0D61  1803               	skipnc
  7631  0D62  0008               	return
  7632                           
  7633                           ;modbus.c: 135: startAddr-=0x10;
  7634  0D63  3010               	movlw	16
  7635  0D64  02B6               	subwf	modbus_response_write_single_register@startAddr,f
  7636  0D65  3000               	movlw	0
  7637  0D66  3BB7               	subwfb	modbus_response_write_single_register@startAddr+1,f
  7638                           
  7639                           ;modbus.c: 136: if(startAddr & 0x01){
  7640  0D67  1C36               	btfss	modbus_response_write_single_register@startAddr,0
  7641  0D68  2DF9               	goto	l4967
  7642                           
  7643                           ;modbus.c: 137: t16=rbuf[4];
  7644  0D69  0835               	movf	modbus_response_write_single_register@rbuf,w
  7645  0D6A  3E04               	addlw	4
  7646  0D6B  0086               	movwf	6
  7647  0D6C  3001               	movlw	1	; select bank2/3
  7648  0D6D  0087               	movwf	7
  7649  0D6E  0801               	movf	1,w
  7650  0D6F  00AC               	movwf	??_modbus_response_write_single_register
  7651  0D70  01AD               	clrf	??_modbus_response_write_single_register+1
  7652  0D71  082C               	movf	??_modbus_response_write_single_register,w
  7653  0D72  00B1               	movwf	modbus_response_write_single_register@t16
  7654  0D73  082D               	movf	??_modbus_response_write_single_register+1,w
  7655  0D74  00B2               	movwf	modbus_response_write_single_register@t16+1
  7656                           
  7657                           ;modbus.c: 138: t16<<=8;
  7658  0D75  3008               	movlw	8
  7659  0D76                     u4325:	
  7660  0D76  35B1               	lslf	modbus_response_write_single_register@t16,f
  7661  0D77  0DB2               	rlf	modbus_response_write_single_register@t16+1,f
  7662  0D78  0B89               	decfsz	9,f
  7663  0D79  2D76               	goto	u4325
  7664                           
  7665                           ;modbus.c: 139: t16 |= rbuf[5];
  7666  0D7A  0835               	movf	modbus_response_write_single_register@rbuf,w
  7667  0D7B  3E05               	addlw	5
  7668  0D7C  0086               	movwf	6
  7669  0D7D  3001               	movlw	1	; select bank2/3
  7670  0D7E  0087               	movwf	7
  7671  0D7F  0801               	movf	1,w
  7672  0D80  00AC               	movwf	??_modbus_response_write_single_register
  7673  0D81  01AD               	clrf	??_modbus_response_write_single_register+1
  7674  0D82  082C               	movf	??_modbus_response_write_single_register,w
  7675  0D83  04B1               	iorwf	modbus_response_write_single_register@t16,f
  7676  0D84  082D               	movf	??_modbus_response_write_single_register+1,w
  7677  0D85  04B2               	iorwf	modbus_response_write_single_register@t16+1,f
  7678                           
  7679                           ;modbus.c: 140: sysData.calibVoMV[startAddr>>1]=t16;
  7680  0D86  0837               	movf	modbus_response_write_single_register@startAddr+1,w
  7681  0D87  00AD               	movwf	??_modbus_response_write_single_register+1
  7682  0D88  0836               	movf	modbus_response_write_single_register@startAddr,w
  7683  0D89  00AC               	movwf	??_modbus_response_write_single_register
  7684  0D8A  36AD               	lsrf	??_modbus_response_write_single_register+1,f
  7685  0D8B  0CAC               	rrf	??_modbus_response_write_single_register,f
  7686  0D8C  35AC               	lslf	??_modbus_response_write_single_register,f
  7687  0D8D  0DAD               	rlf	??_modbus_response_write_single_register+1,f
  7688  0D8E  30A2               	movlw	162
  7689  0D8F  00AE               	movwf	??_modbus_response_write_single_register+2
  7690  0D90  3023               	movlw	35
  7691  0D91  00AF               	movwf	??_modbus_response_write_single_register+3
  7692  0D92  082C               	movf	??_modbus_response_write_single_register,w
  7693  0D93  072E               	addwf	??_modbus_response_write_single_register+2,w
  7694  0D94  0086               	movwf	6
  7695  0D95  082D               	movf	??_modbus_response_write_single_register+1,w
  7696  0D96  3D2F               	addwfc	??_modbus_response_write_single_register+3,w
  7697  0D97  0087               	movwf	7
  7698  0D98  0831               	movf	modbus_response_write_single_register@t16,w
  7699  0D99  3FC0               	movwi [0]fsr1
  7700  0D9A  0832               	movf	modbus_response_write_single_register@t16+1,w
  7701  0D9B  3FC1               	movwi [1]fsr1
  7702                           
  7703                           ;modbus.c: 141: sysData.calibRsAdc[startAddr>>1]=rsLoAvg;
  7704  0D9C  0837               	movf	modbus_response_write_single_register@startAddr+1,w
  7705  0D9D  00AD               	movwf	??_modbus_response_write_single_register+1
  7706  0D9E  0836               	movf	modbus_response_write_single_register@startAddr,w
  7707  0D9F  00AC               	movwf	??_modbus_response_write_single_register
  7708  0DA0  36AD               	lsrf	??_modbus_response_write_single_register+1,f
  7709  0DA1  0CAC               	rrf	??_modbus_response_write_single_register,f
  7710  0DA2  35AC               	lslf	??_modbus_response_write_single_register,f
  7711  0DA3  0DAD               	rlf	??_modbus_response_write_single_register+1,f
  7712  0DA4  3066               	movlw	102
  7713  0DA5  00AE               	movwf	??_modbus_response_write_single_register+2
  7714  0DA6  3023               	movlw	35
  7715  0DA7  00AF               	movwf	??_modbus_response_write_single_register+3
  7716  0DA8  082C               	movf	??_modbus_response_write_single_register,w
  7717  0DA9  072E               	addwf	??_modbus_response_write_single_register+2,w
  7718  0DAA  0086               	movwf	6
  7719  0DAB  082D               	movf	??_modbus_response_write_single_register+1,w
  7720  0DAC  3D2F               	addwfc	??_modbus_response_write_single_register+3,w
  7721  0DAD  0087               	movwf	7
  7722  0DAE  0853               	movf	_rsLoAvg,w
  7723  0DAF  3FC0               	movwi [0]fsr1
  7724  0DB0  0854               	movf	_rsLoAvg+1,w
  7725  0DB1  3FC1               	movwi [1]fsr1
  7726                           
  7727                           ;modbus.c: 143: if(rbuf[1]==0x26){
  7728  0DB2  0A35               	incf	modbus_response_write_single_register@rbuf,w
  7729  0DB3  0086               	movwf	6
  7730  0DB4  3001               	movlw	1	; select bank2/3
  7731  0DB5  0087               	movwf	7
  7732  0DB6  3026               	movlw	38
  7733  0DB7  0601               	xorwf	1,w
  7734  0DB8  1D03               	btfss	3,2
  7735  0DB9  2DF7               	goto	l830
  7736                           
  7737                           ;modbus.c: 144: for(i=(startAddr>>1)+1;i<30;i++){
  7738  0DBA  0837               	movf	modbus_response_write_single_register@startAddr+1,w
  7739  0DBB  00AD               	movwf	??_modbus_response_write_single_register+1
  7740  0DBC  0836               	movf	modbus_response_write_single_register@startAddr,w
  7741  0DBD  00AC               	movwf	??_modbus_response_write_single_register
  7742  0DBE  36AD               	lsrf	??_modbus_response_write_single_register+1,f
  7743  0DBF  0CAC               	rrf	??_modbus_response_write_single_register,f
  7744  0DC0  082C               	movf	??_modbus_response_write_single_register,w
  7745  0DC1  3E01               	addlw	1
  7746  0DC2  00AE               	movwf	??_modbus_response_write_single_register+2
  7747  0DC3  082E               	movf	??_modbus_response_write_single_register+2,w
  7748  0DC4  00B3               	movwf	modbus_response_write_single_register@i
  7749  0DC5  301E               	movlw	30
  7750  0DC6  0233               	subwf	modbus_response_write_single_register@i,w
  7751  0DC7  1803               	btfsc	3,0
  7752  0DC8  2DF7               	goto	l830
  7753  0DC9                     l4961:	
  7754                           
  7755                           ;modbus.c: 145: sysData.calibVoMV[i]=t16;
  7756  0DC9  0833               	movf	modbus_response_write_single_register@i,w
  7757  0DCA  00AC               	movwf	??_modbus_response_write_single_register
  7758  0DCB  01AD               	clrf	??_modbus_response_write_single_register+1
  7759  0DCC  35AC               	lslf	??_modbus_response_write_single_register,f
  7760  0DCD  0DAD               	rlf	??_modbus_response_write_single_register+1,f
  7761  0DCE  30A2               	movlw	162
  7762  0DCF  00AE               	movwf	??_modbus_response_write_single_register+2
  7763  0DD0  3023               	movlw	35
  7764  0DD1  00AF               	movwf	??_modbus_response_write_single_register+3
  7765  0DD2  082C               	movf	??_modbus_response_write_single_register,w
  7766  0DD3  072E               	addwf	??_modbus_response_write_single_register+2,w
  7767  0DD4  0086               	movwf	6
  7768  0DD5  082D               	movf	??_modbus_response_write_single_register+1,w
  7769  0DD6  3D2F               	addwfc	??_modbus_response_write_single_register+3,w
  7770  0DD7  0087               	movwf	7
  7771  0DD8  0831               	movf	modbus_response_write_single_register@t16,w
  7772  0DD9  3FC0               	movwi [0]fsr1
  7773  0DDA  0832               	movf	modbus_response_write_single_register@t16+1,w
  7774  0DDB  3FC1               	movwi [1]fsr1
  7775                           
  7776                           ;modbus.c: 146: sysData.calibRsAdc[i]=rsLoAvg;
  7777  0DDC  0833               	movf	modbus_response_write_single_register@i,w
  7778  0DDD  00AC               	movwf	??_modbus_response_write_single_register
  7779  0DDE  01AD               	clrf	??_modbus_response_write_single_register+1
  7780  0DDF  35AC               	lslf	??_modbus_response_write_single_register,f
  7781  0DE0  0DAD               	rlf	??_modbus_response_write_single_register+1,f
  7782  0DE1  3066               	movlw	102
  7783  0DE2  00AE               	movwf	??_modbus_response_write_single_register+2
  7784  0DE3  3023               	movlw	35
  7785  0DE4  00AF               	movwf	??_modbus_response_write_single_register+3
  7786  0DE5  082C               	movf	??_modbus_response_write_single_register,w
  7787  0DE6  072E               	addwf	??_modbus_response_write_single_register+2,w
  7788  0DE7  0086               	movwf	6
  7789  0DE8  082D               	movf	??_modbus_response_write_single_register+1,w
  7790  0DE9  3D2F               	addwfc	??_modbus_response_write_single_register+3,w
  7791  0DEA  0087               	movwf	7
  7792  0DEB  0853               	movf	_rsLoAvg,w
  7793  0DEC  3FC0               	movwi [0]fsr1
  7794  0DED  0854               	movf	_rsLoAvg+1,w
  7795  0DEE  3FC1               	movwi [1]fsr1
  7796  0DEF  3001               	movlw	1
  7797  0DF0  00AC               	movwf	??_modbus_response_write_single_register
  7798  0DF1  082C               	movf	??_modbus_response_write_single_register,w
  7799  0DF2  07B3               	addwf	modbus_response_write_single_register@i,f
  7800  0DF3  301E               	movlw	30
  7801  0DF4  0233               	subwf	modbus_response_write_single_register@i,w
  7802  0DF5  1C03               	skipc
  7803  0DF6  2DC9               	goto	l4961
  7804  0DF7                     l830:	
  7805                           
  7806                           ;modbus.c: 147: };modbus.c: 148: };modbus.c: 149: fiSave=1;
  7807  0DF7  01B0               	clrf	modbus_response_write_single_register@fiSave
  7808  0DF8  0AB0               	incf	modbus_response_write_single_register@fiSave,f
  7809  0DF9                     l4967:	
  7810                           ;modbus.c: 153: return;
  7811                           
  7812                           ;modbus.c: 150: };modbus.c: 151: }else{
  7813                           
  7814                           
  7815                           ;modbus.c: 154: };modbus.c: 155: if(fiSave)sys_data_save();
  7816  0DF9  0830               	movf	modbus_response_write_single_register@fiSave,w
  7817  0DFA  1903               	btfsc	3,2
  7818  0DFB  2DFF               	goto	l4971
  7819  0DFC  319E  2620  318C   	fcall	_sys_data_save
  7820  0DFF                     l4971:	
  7821                           
  7822                           ;modbus.c: 156: if(pmdbs->addr==0)return;
  7823  0DFF  0020               	movlb	0	; select bank0
  7824  0E00  0834               	movf	modbus_response_write_single_register@pmdbs,w
  7825  0E01  0086               	movwf	6
  7826  0E02  3001               	movlw	1	; select bank2/3
  7827  0E03  0087               	movwf	7
  7828  0E04  0801               	movf	1,w
  7829  0E05  1903               	btfsc	3,2
  7830  0E06  0008               	return
  7831                           
  7832                           ;modbus.c: 157: rbuf[0]=sysData.id;
  7833  0E07  305C               	movlw	92
  7834  0E08  0086               	movwf	6
  7835  0E09  3023               	movlw	35
  7836  0E0A  0087               	movwf	7
  7837  0E0B  3142               	addfsr 1,2
  7838  0E0C  0801               	movf	1,w
  7839  0E0D  00AC               	movwf	??_modbus_response_write_single_register
  7840  0E0E  0835               	movf	modbus_response_write_single_register@rbuf,w
  7841  0E0F  0086               	movwf	6
  7842  0E10  3001               	movlw	1	; select bank2/3
  7843  0E11  0087               	movwf	7
  7844  0E12  082C               	movf	??_modbus_response_write_single_register,w
  7845  0E13  0081               	movwf	1
  7846                           
  7847                           ;modbus.c: 158: crc_append(rbuf,6);
  7848  0E14  0835               	movf	modbus_response_write_single_register@rbuf,w
  7849  0E15  00A6               	movwf	crc_append@message
  7850  0E16  3001               	movlw	1
  7851  0E17  00A7               	movwf	crc_append@message+1
  7852  0E18  3006               	movlw	6
  7853  0E19  00A8               	movwf	crc_append@n
  7854  0E1A  3000               	movlw	0
  7855  0E1B  00A9               	movwf	crc_append@n+1
  7856  0E1C  319D  2589  318C   	fcall	_crc_append
  7857                           
  7858                           ;modbus.c: 159: uart_send_len(rbuf,8);
  7859  0E1F  3008               	movlw	8
  7860  0E20  0020               	movlb	0	; select bank0
  7861  0E21  00AC               	movwf	??_modbus_response_write_single_register
  7862  0E22  082C               	movf	??_modbus_response_write_single_register,w
  7863  0E23  00F8               	movwf	uart_send_len@len
  7864  0E24  0835               	movf	modbus_response_write_single_register@rbuf,w
  7865  0E25  319E  26C5         	fcall	_uart_send_len
  7866  0E27  0008               	return
  7867  0E28                     __end_of_modbus_response_write_single_register:	
  7868                           
  7869                           	psect	text15
  7870  12B7                     __ptext15:	
  7871 ;; *************** function _modbus_response_write_mult_register *****************
  7872 ;; Defined at:
  7873 ;;		line 162 in file "src/api/modbus.c"
  7874 ;; Parameters:    Size  Location     Type
  7875 ;;  rbuf            1    wreg     PTR unsigned char 
  7876 ;;		 -> modbusBuf(32), 
  7877 ;; Auto vars:     Size  Location     Type
  7878 ;;  rbuf            1   15[BANK0 ] PTR unsigned char 
  7879 ;;		 -> modbusBuf(32), 
  7880 ;;  stb             1   16[BANK0 ] PTR struct .
  7881 ;;		 -> modbusBuf(32), 
  7882 ;;  len             1   14[BANK0 ] unsigned char 
  7883 ;;  startAddr       1   13[BANK0 ] unsigned char 
  7884 ;; Return value:  Size  Location     Type
  7885 ;;                  1    wreg      void 
  7886 ;; Registers used:
  7887 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7888 ;; Tracked objects:
  7889 ;;		On entry : 0/0
  7890 ;;		On exit  : 0/0
  7891 ;;		Unchanged: 0/0
  7892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7894 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7895 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7896 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7897 ;;Total ram usage:        5 bytes
  7898 ;; Hardware stack levels used:    1
  7899 ;; Hardware stack levels required when called:    4
  7900 ;; This function calls:
  7901 ;;		_crc_append
  7902 ;;		_sys_data_save
  7903 ;;		_uart_send_len
  7904 ;; This function is called by:
  7905 ;;		_modbus_response_process
  7906 ;; This function uses a non-reentrant model
  7907 ;;
  7908                           
  7909                           
  7910                           ;psect for function _modbus_response_write_mult_register
  7911  12B7                     _modbus_response_write_mult_register:	
  7912                           
  7913                           ;incstack = 0
  7914                           ; Regs used in _modbus_response_write_mult_register: [wreg-fsr1h+status,2+status,0+pclat
      +                          h+cstack]
  7915                           ;modbus_response_write_mult_register@rbuf stored from wreg
  7916  12B7  0020               	movlb	0	; select bank0
  7917  12B8  00AF               	movwf	modbus_response_write_mult_register@rbuf
  7918                           
  7919                           ;modbus.c: 164: uint8_t startAddr,len;;modbus.c: 166: st_modbusWriteMultReg_t* stb=(st_m
      +                          odbusWriteMultReg_t*)rbuf;
  7920  12B9  082F               	movf	modbus_response_write_mult_register@rbuf,w
  7921  12BA  00AC               	movwf	??_modbus_response_write_mult_register
  7922  12BB  082C               	movf	??_modbus_response_write_mult_register,w
  7923  12BC  00B0               	movwf	modbus_response_write_mult_register@stb
  7924                           
  7925                           ;modbus.c: 167: if(stb->addr!=sysData.id || stb->addr==0)return;
  7926  12BD  305C               	movlw	92
  7927  12BE  0086               	movwf	6
  7928  12BF  3023               	movlw	35
  7929  12C0  0087               	movwf	7
  7930  12C1  3142               	addfsr 1,2
  7931  12C2  0830               	movf	modbus_response_write_mult_register@stb,w
  7932  12C3  0084               	movwf	4
  7933  12C4  3001               	movlw	1	; select bank2/3
  7934  12C5  0085               	movwf	5
  7935  12C6  0800               	movf	0,w
  7936  12C7  0601               	xorwf	1,w
  7937  12C8  1D03               	skipz
  7938  12C9  0008               	return
  7939  12CA  0830               	movf	modbus_response_write_mult_register@stb,w
  7940  12CB  0086               	movwf	6
  7941  12CC  3001               	movlw	1	; select bank2/3
  7942  12CD  0087               	movwf	7
  7943  12CE  0801               	movf	1,w
  7944  12CF  1903               	btfsc	3,2
  7945  12D0  0008               	return
  7946                           
  7947                           ;modbus.c: 168: startAddr=stb->addr_lo;
  7948  12D1  0830               	movf	modbus_response_write_mult_register@stb,w
  7949  12D2  0086               	movwf	6
  7950  12D3  3001               	movlw	1	; select bank2/3
  7951  12D4  0087               	movwf	7
  7952  12D5  3001               	movlw	1	; select bank2/3
  7953  12D6  3F43               	moviw [3]fsr1
  7954  12D7  00AD               	movwf	modbus_response_write_mult_register@startAddr
  7955                           
  7956                           ;modbus.c: 169: len=stb->len_lo;
  7957  12D8  0830               	movf	modbus_response_write_mult_register@stb,w
  7958  12D9  0086               	movwf	6
  7959  12DA  3001               	movlw	1	; select bank2/3
  7960  12DB  0087               	movwf	7
  7961  12DC  3001               	movlw	1	; select bank2/3
  7962  12DD  3F45               	moviw [5]fsr1
  7963  12DE  00AE               	movwf	modbus_response_write_mult_register@len
  7964                           
  7965                           ;modbus.c: 170: if(len!=3)return ;
  7966  12DF  3003               	movlw	3
  7967  12E0  062E               	xorwf	modbus_response_write_mult_register@len,w
  7968  12E1  1D03               	btfss	3,2
  7969  12E2  0008               	return
  7970                           
  7971                           ;modbus.c: 171: if(startAddr!=4)return;
  7972  12E3  3004               	movlw	4
  7973  12E4  062D               	xorwf	modbus_response_write_mult_register@startAddr,w
  7974  12E5  1D03               	btfss	3,2
  7975  12E6  0008               	return
  7976                           
  7977                           ;modbus.c: 173: sysData.pidKp=(stb->data[0]<<8)|(stb->data[1]);
  7978  12E7  0830               	movf	modbus_response_write_mult_register@stb,w
  7979  12E8  3E06               	addlw	6
  7980  12E9  0084               	movwf	4
  7981  12EA  3001               	movlw	1	; select bank2/3
  7982  12EB  0085               	movwf	5
  7983  12EC  0800               	movf	0,w
  7984  12ED  00AC               	movwf	??_modbus_response_write_mult_register
  7985  12EE  0830               	movf	modbus_response_write_mult_register@stb,w
  7986  12EF  3E07               	addlw	7
  7987  12F0  0084               	movwf	4
  7988  12F1  3001               	movlw	1	; select bank2/3
  7989  12F2  0085               	movwf	5
  7990  12F3  305C               	movlw	92
  7991  12F4  0086               	movwf	6
  7992  12F5  3023               	movlw	35
  7993  12F6  0087               	movwf	7
  7994  12F7  3144               	addfsr 1,4
  7995  12F8  0800               	movf	0,w
  7996  12F9  3FC0               	movwi [0]fsr1
  7997  12FA  082C               	movf	??_modbus_response_write_mult_register,w
  7998  12FB  3FC1               	movwi [1]fsr1
  7999                           
  8000                           ;modbus.c: 174: sysData.pidTi=(stb->data[2]<<8)|(stb->data[3]);
  8001  12FC  0830               	movf	modbus_response_write_mult_register@stb,w
  8002  12FD  3E08               	addlw	8
  8003  12FE  0084               	movwf	4
  8004  12FF  3001               	movlw	1	; select bank2/3
  8005  1300  0085               	movwf	5
  8006  1301  0800               	movf	0,w
  8007  1302  00AC               	movwf	??_modbus_response_write_mult_register
  8008  1303  0830               	movf	modbus_response_write_mult_register@stb,w
  8009  1304  3E09               	addlw	9
  8010  1305  0084               	movwf	4
  8011  1306  3001               	movlw	1	; select bank2/3
  8012  1307  0085               	movwf	5
  8013  1308  305C               	movlw	92
  8014  1309  0086               	movwf	6
  8015  130A  3023               	movlw	35
  8016  130B  0087               	movwf	7
  8017  130C  3146               	addfsr 1,6
  8018  130D  0800               	movf	0,w
  8019  130E  3FC0               	movwi [0]fsr1
  8020  130F  082C               	movf	??_modbus_response_write_mult_register,w
  8021  1310  3FC1               	movwi [1]fsr1
  8022                           
  8023                           ;modbus.c: 176: sys_data_save();
  8024  1311  319E  2620  3192   	fcall	_sys_data_save
  8025                           
  8026                           ;modbus.c: 177: crc_append(rbuf,sizeof(st_modbusWriteMultReg_t)-2);
  8027  1314  0020               	movlb	0	; select bank0
  8028  1315  082F               	movf	modbus_response_write_mult_register@rbuf,w
  8029  1316  00A6               	movwf	crc_append@message
  8030  1317  3001               	movlw	1
  8031  1318  00A7               	movwf	crc_append@message+1
  8032  1319  3006               	movlw	6
  8033  131A  00A8               	movwf	crc_append@n
  8034  131B  3000               	movlw	0
  8035  131C  00A9               	movwf	crc_append@n+1
  8036  131D  319D  2589  3192   	fcall	_crc_append
  8037                           
  8038                           ;modbus.c: 178: uart_send_len(rbuf,sizeof(st_modbusWriteMultReg_t));
  8039  1320  3008               	movlw	8
  8040  1321  0020               	movlb	0	; select bank0
  8041  1322  00AC               	movwf	??_modbus_response_write_mult_register
  8042  1323  082C               	movf	??_modbus_response_write_mult_register,w
  8043  1324  00F8               	movwf	uart_send_len@len
  8044  1325  082F               	movf	modbus_response_write_mult_register@rbuf,w
  8045  1326  319E  26C5         	fcall	_uart_send_len
  8046  1328  0008               	return
  8047  1329                     __end_of_modbus_response_write_mult_register:	
  8048                           
  8049                           	psect	text16
  8050  1E20                     __ptext16:	
  8051 ;; *************** function _sys_data_save *****************
  8052 ;; Defined at:
  8053 ;;		line 95 in file "src/api/sysData.c"
  8054 ;; Parameters:    Size  Location     Type
  8055 ;;		None
  8056 ;; Auto vars:     Size  Location     Type
  8057 ;;		None
  8058 ;; Return value:  Size  Location     Type
  8059 ;;                  1    wreg      void 
  8060 ;; Registers used:
  8061 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8062 ;; Tracked objects:
  8063 ;;		On entry : 0/0
  8064 ;;		On exit  : 0/0
  8065 ;;		Unchanged: 0/0
  8066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8070 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8071 ;;Total ram usage:        0 bytes
  8072 ;; Hardware stack levels used:    1
  8073 ;; Hardware stack levels required when called:    3
  8074 ;; This function calls:
  8075 ;;		_crc_append
  8076 ;;		_my_flash_read_system_erase
  8077 ;;		_my_flash_system_write
  8078 ;; This function is called by:
  8079 ;;		_sys_data_init
  8080 ;;		_modbus_response_write_single_register
  8081 ;;		_modbus_response_write_mult_register
  8082 ;; This function uses a non-reentrant model
  8083 ;;
  8084                           
  8085                           
  8086                           ;psect for function _sys_data_save
  8087  1E20                     _sys_data_save:	
  8088                           
  8089                           ;sysData.c: 97: crc_append((uint8_t*)&sysData,sizeof(sysData_t)-2);
  8090                           
  8091                           ;incstack = 0
  8092                           ; Regs used in _sys_data_save: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8093  1E20  305C               	movlw	92
  8094  1E21  0020               	movlb	0	; select bank0
  8095  1E22  00A6               	movwf	crc_append@message
  8096  1E23  3023               	movlw	35
  8097  1E24  00A7               	movwf	crc_append@message+1
  8098  1E25  3082               	movlw	130
  8099  1E26  00A8               	movwf	crc_append@n
  8100  1E27  3000               	movlw	0
  8101  1E28  00A9               	movwf	crc_append@n+1
  8102  1E29  319D  2589  319E   	fcall	_crc_append
  8103                           
  8104                           ;sysData.c: 98: my_flash_read_system_erase();
  8105  1E2C  3190  2007  319E   	fcall	_my_flash_read_system_erase
  8106                           
  8107                           ;sysData.c: 99: my_flash_system_write((uint8_t*)&sysData,sizeof(sysData_t));
  8108  1E2F  305C               	movlw	92
  8109  1E30  00F1               	movwf	my_flash_system_write@buf
  8110  1E31  3023               	movlw	35
  8111  1E32  00F2               	movwf	my_flash_system_write@buf+1
  8112  1E33  3084               	movlw	132
  8113  1E34  00F3               	movwf	my_flash_system_write@len
  8114  1E35  3000               	movlw	0
  8115  1E36  00F4               	movwf	my_flash_system_write@len+1
  8116  1E37  3193  23AB         	fcall	_my_flash_system_write
  8117                           
  8118                           ;sysData.c: 100: PidKp=sysData.pidKp;
  8119  1E39  305C               	movlw	92
  8120  1E3A  0086               	movwf	6
  8121  1E3B  3023               	movlw	35
  8122  1E3C  0087               	movwf	7
  8123  1E3D  3144               	addfsr 1,4
  8124  1E3E  3F40               	moviw [0]fsr1
  8125  1E3F  0021               	movlb	1	; select bank1
  8126  1E40  00D0               	movwf	_PidKp^(0+128)
  8127  1E41  3F41               	moviw [1]fsr1
  8128  1E42  00D1               	movwf	(_PidKp+1)^(0+128)
  8129                           
  8130                           ;sysData.c: 101: PidTi=sysData.pidTi;
  8131  1E43  305C               	movlw	92
  8132  1E44  0086               	movwf	6
  8133  1E45  3023               	movlw	35
  8134  1E46  0087               	movwf	7
  8135  1E47  3146               	addfsr 1,6
  8136  1E48  3F40               	moviw [0]fsr1
  8137  1E49  00CE               	movwf	_PidTi^(0+128)
  8138  1E4A  3F41               	moviw [1]fsr1
  8139  1E4B  00CF               	movwf	(_PidTi+1)^(0+128)
  8140                           
  8141                           ;sysData.c: 102: PidTd=sysData.pidTd;;
  8142  1E4C  305C               	movlw	92
  8143  1E4D  0086               	movwf	6
  8144  1E4E  3023               	movlw	35
  8145  1E4F  0087               	movwf	7
  8146  1E50  3148               	addfsr 1,8
  8147  1E51  3F40               	moviw [0]fsr1
  8148  1E52  00CC               	movwf	_PidTd^(0+128)
  8149  1E53  3F41               	moviw [1]fsr1
  8150  1E54  00CD               	movwf	(_PidTd+1)^(0+128)
  8151  1E55  0008               	return
  8152  1E56                     __end_of_sys_data_save:	
  8153                           
  8154                           	psect	text17
  8155  13AB                     __ptext17:	
  8156 ;; *************** function _my_flash_system_write *****************
  8157 ;; Defined at:
  8158 ;;		line 47 in file "src/api/sysData.c"
  8159 ;; Parameters:    Size  Location     Type
  8160 ;;  buf             2    1[COMMON] PTR unsigned char 
  8161 ;;		 -> sysData(132), 
  8162 ;;  len             2    3[COMMON] unsigned int 
  8163 ;; Auto vars:     Size  Location     Type
  8164 ;;  flashAddr       2    7[BANK0 ] unsigned int 
  8165 ;;  loc             2    5[BANK0 ] unsigned int 
  8166 ;;  blocNum         2    3[BANK0 ] unsigned int 
  8167 ;;  j               2    0[BANK0 ] unsigned int 
  8168 ;;  i               1    9[BANK0 ] unsigned char 
  8169 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
  8170 ;; Return value:  Size  Location     Type
  8171 ;;                  2    1[COMMON] unsigned int 
  8172 ;; Registers used:
  8173 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8174 ;; Tracked objects:
  8175 ;;		On entry : 0/0
  8176 ;;		On exit  : 0/0
  8177 ;;		Unchanged: 0/0
  8178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8179 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8180 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8181 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8182 ;;      Totals:         6      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8183 ;;Total ram usage:       16 bytes
  8184 ;; Hardware stack levels used:    1
  8185 ;; Hardware stack levels required when called:    1
  8186 ;; This function calls:
  8187 ;;		Nothing
  8188 ;; This function is called by:
  8189 ;;		_sys_data_save
  8190 ;; This function uses a non-reentrant model
  8191 ;;
  8192                           
  8193                           
  8194                           ;psect for function _my_flash_system_write
  8195  13AB                     _my_flash_system_write:	
  8196                           
  8197                           ;sysData.c: 49: uint16_t blocNum=0;
  8198                           
  8199                           ;incstack = 0
  8200                           ; Regs used in _my_flash_system_write: [wreg+fsr1l+fsr1h+status,2+status,0]
  8201  13AB  0020               	movlb	0	; select bank0
  8202  13AC  01A3               	clrf	my_flash_system_write@blocNum
  8203  13AD  01A4               	clrf	my_flash_system_write@blocNum+1
  8204                           
  8205                           ;sysData.c: 50: uint16_t loc,j;;sysData.c: 51: uint16_t flashAddr=0x1f00;
  8206  13AE  3000               	movlw	0
  8207  13AF  00A7               	movwf	my_flash_system_write@flashAddr
  8208  13B0  301F               	movlw	31
  8209  13B1  00A8               	movwf	my_flash_system_write@flashAddr+1
  8210                           
  8211                           ;sysData.c: 52: uint8_t GIEBitValue=INTCONbits.GIE;
  8212  13B2  3000               	movlw	0
  8213  13B3  1B8B               	btfsc	11,7	;volatile
  8214  13B4  3001               	movlw	1
  8215  13B5  00A2               	movwf	my_flash_system_write@GIEBitValue
  8216                           
  8217                           ;sysData.c: 53: uint8_t i=0;
  8218  13B6  01A9               	clrf	my_flash_system_write@i
  8219                           
  8220                           ;sysData.c: 54: blocNum=len/32;
  8221  13B7  0874               	movf	my_flash_system_write@len+1,w
  8222  13B8  00F6               	movwf	??_my_flash_system_write+1
  8223  13B9  0873               	movf	my_flash_system_write@len,w
  8224  13BA  00F5               	movwf	??_my_flash_system_write
  8225  13BB  3005               	movlw	5
  8226  13BC                     u2235:	
  8227  13BC  36F6               	lsrf	??_my_flash_system_write+1,f
  8228  13BD  0CF5               	rrf	??_my_flash_system_write,f
  8229  13BE  0B89               	decfsz	9,f
  8230  13BF  2BBC               	goto	u2235
  8231  13C0  0875               	movf	??_my_flash_system_write,w
  8232  13C1  00A3               	movwf	my_flash_system_write@blocNum
  8233  13C2  0876               	movf	??_my_flash_system_write+1,w
  8234  13C3  00A4               	movwf	my_flash_system_write@blocNum+1
  8235                           
  8236                           ;sysData.c: 55: if(len%32)blocNum++;
  8237  13C4  301F               	movlw	31
  8238  13C5  0573               	andwf	my_flash_system_write@len,w
  8239  13C6  00F5               	movwf	??_my_flash_system_write
  8240  13C7  3000               	movlw	0
  8241  13C8  0574               	andwf	my_flash_system_write@len+1,w
  8242  13C9  00F6               	movwf	??_my_flash_system_write+1
  8243  13CA  0875               	movf	??_my_flash_system_write,w
  8244  13CB  0476               	iorwf	??_my_flash_system_write+1,w
  8245  13CC  1903               	btfsc	3,2
  8246  13CD  2BD2               	goto	l3421
  8247  13CE  3001               	movlw	1
  8248  13CF  07A3               	addwf	my_flash_system_write@blocNum,f
  8249  13D0  3000               	movlw	0
  8250  13D1  3DA4               	addwfc	my_flash_system_write@blocNum+1,f
  8251  13D2                     l3421:	
  8252                           
  8253                           ;sysData.c: 57: INTCONbits.GIE = 0;
  8254  13D2  138B               	bcf	11,7	;volatile
  8255                           
  8256                           ;sysData.c: 58: loc=0;
  8257  13D3  01A5               	clrf	my_flash_system_write@loc
  8258  13D4  01A6               	clrf	my_flash_system_write@loc+1
  8259                           
  8260                           ;sysData.c: 59: for(j=0;j<blocNum;j++){
  8261  13D5  01A0               	clrf	my_flash_system_write@j
  8262  13D6  01A1               	clrf	my_flash_system_write@j+1
  8263  13D7                     l740:	
  8264  13D7  0824               	movf	my_flash_system_write@blocNum+1,w
  8265  13D8  0221               	subwf	my_flash_system_write@j+1,w
  8266  13D9  1D03               	skipz
  8267  13DA  2BDD               	goto	u2295
  8268  13DB  0823               	movf	my_flash_system_write@blocNum,w
  8269  13DC  0220               	subwf	my_flash_system_write@j,w
  8270  13DD                     u2295:	
  8271  13DD  1803               	btfsc	3,0
  8272  13DE  2C33               	goto	l3465
  8273                           
  8274                           ;sysData.c: 60: PMCON1bits.CFGS = 0;
  8275  13DF  0023               	movlb	3	; select bank3
  8276  13E0  1315               	bcf	21,6	;volatile
  8277                           
  8278                           ;sysData.c: 61: PMCON1bits.WREN = 1;
  8279  13E1  1515               	bsf	21,2	;volatile
  8280                           
  8281                           ;sysData.c: 62: PMCON1bits.LWLO = 1;
  8282  13E2  1695               	bsf	21,5	;volatile
  8283                           
  8284                           ;sysData.c: 64: for(i=0;i<32;i++){
  8285  13E3  0020               	movlb	0	; select bank0
  8286  13E4  01A9               	clrf	my_flash_system_write@i
  8287  13E5  3020               	movlw	32
  8288  13E6  0229               	subwf	my_flash_system_write@i,w
  8289  13E7  1803               	btfsc	3,0
  8290  13E8  2C2B               	goto	l743
  8291  13E9                     l3433:	
  8292                           
  8293                           ;sysData.c: 66: PMADRL = (flashAddr & 0xFF);
  8294  13E9  0827               	movf	my_flash_system_write@flashAddr,w
  8295  13EA  0023               	movlb	3	; select bank3
  8296  13EB  0091               	movwf	17	;volatile
  8297                           
  8298                           ;sysData.c: 68: PMADRH = ((flashAddr & 0xFF00) >> 8);
  8299  13EC  0020               	movlb	0	; select bank0
  8300  13ED  0828               	movf	my_flash_system_write@flashAddr+1,w
  8301  13EE  0023               	movlb	3	; select bank3
  8302  13EF  0092               	movwf	18	;volatile
  8303                           
  8304                           ;sysData.c: 71: if(loc<len){
  8305  13F0  0874               	movf	my_flash_system_write@len+1,w
  8306  13F1  0020               	movlb	0	; select bank0
  8307  13F2  0226               	subwf	my_flash_system_write@loc+1,w
  8308  13F3  1D03               	skipz
  8309  13F4  2BF7               	goto	u2265
  8310  13F5  0873               	movf	my_flash_system_write@len,w
  8311  13F6  0225               	subwf	my_flash_system_write@loc,w
  8312  13F7                     u2265:	
  8313  13F7  1803               	skipnc
  8314  13F8  2C03               	goto	l3441
  8315                           
  8316                           ;sysData.c: 72: PMDATL = buf[loc];
  8317  13F9  0825               	movf	my_flash_system_write@loc,w
  8318  13FA  0771               	addwf	my_flash_system_write@buf,w
  8319  13FB  0086               	movwf	6
  8320  13FC  0826               	movf	my_flash_system_write@loc+1,w
  8321  13FD  3D72               	addwfc	my_flash_system_write@buf+1,w
  8322  13FE  0087               	movwf	7
  8323  13FF  0801               	movf	1,w
  8324  1400  0023               	movlb	3	; select bank3
  8325  1401  0093               	movwf	19	;volatile
  8326                           
  8327                           ;sysData.c: 73: }else{
  8328  1402  2C05               	goto	l3443
  8329  1403                     l3441:	
  8330                           
  8331                           ;sysData.c: 74: PMDATL = 0x00;
  8332  1403  0023               	movlb	3	; select bank3
  8333  1404  0193               	clrf	19	;volatile
  8334  1405                     l3443:	
  8335                           
  8336                           ;sysData.c: 75: };sysData.c: 76: loc++;
  8337  1405  3001               	movlw	1
  8338  1406  0020               	movlb	0	; select bank0
  8339  1407  07A5               	addwf	my_flash_system_write@loc,f
  8340  1408  3000               	movlw	0
  8341  1409  3DA6               	addwfc	my_flash_system_write@loc+1,f
  8342                           
  8343                           ;sysData.c: 77: PMDATH = 0x00;
  8344  140A  0023               	movlb	3	; select bank3
  8345  140B  0194               	clrf	20	;volatile
  8346                           
  8347                           ;sysData.c: 78: if((i%32) == 32 -1 ){
  8348  140C  301F               	movlw	31
  8349  140D  0020               	movlb	0	; select bank0
  8350  140E  0529               	andwf	my_flash_system_write@i,w
  8351  140F  00F5               	movwf	??_my_flash_system_write
  8352  1410  301F               	movlw	31
  8353  1411  0675               	xorwf	??_my_flash_system_write,w
  8354  1412  1D03               	btfss	3,2
  8355  1413  2C16               	goto	l3451
  8356                           
  8357                           ;sysData.c: 79: PMCON1bits.LWLO = 0;
  8358  1414  0023               	movlb	3	; select bank3
  8359  1415  1295               	bcf	21,5	;volatile
  8360  1416                     l3451:	
  8361                           
  8362                           ;sysData.c: 80: };sysData.c: 82: PMCON2 = 0x55;
  8363  1416  3055               	movlw	85
  8364  1417  0023               	movlb	3	; select bank3
  8365  1418  0096               	movwf	22	;volsfr
  8366                           
  8367                           ;sysData.c: 83: PMCON2 = 0xAA;
  8368  1419  30AA               	movlw	170
  8369  141A  0096               	movwf	22	;volsfr
  8370                           
  8371                           ;sysData.c: 84: PMCON1bits.WR = 1;
  8372  141B  1495               	bsf	21,1	;volatile
  8373                           
  8374                           ;sysData.c: 85: __nop();
  8375  141C  0000               	nop
  8376                           
  8377                           ;sysData.c: 86: __nop();
  8378  141D  0000               	nop
  8379                           
  8380                           ;sysData.c: 87: flashAddr++;
  8381  141E  3001               	movlw	1
  8382  141F  0020               	movlb	0	; select bank0
  8383  1420  07A7               	addwf	my_flash_system_write@flashAddr,f
  8384  1421  3000               	movlw	0
  8385  1422  3DA8               	addwfc	my_flash_system_write@flashAddr+1,f
  8386  1423  3001               	movlw	1
  8387  1424  00F5               	movwf	??_my_flash_system_write
  8388  1425  0875               	movf	??_my_flash_system_write,w
  8389  1426  07A9               	addwf	my_flash_system_write@i,f
  8390  1427  3020               	movlw	32
  8391  1428  0229               	subwf	my_flash_system_write@i,w
  8392  1429  1C03               	skipc
  8393  142A  2BE9               	goto	l3433
  8394  142B                     l743:	
  8395                           
  8396                           ;sysData.c: 88: };sysData.c: 89: PMCON1bits.WREN = 0;
  8397  142B  0023               	movlb	3	; select bank3
  8398  142C  1115               	bcf	21,2	;volatile
  8399  142D  3001               	movlw	1
  8400  142E  0020               	movlb	0	; select bank0
  8401  142F  07A0               	addwf	my_flash_system_write@j,f
  8402  1430  3000               	movlw	0
  8403  1431  3DA1               	addwfc	my_flash_system_write@j+1,f
  8404  1432  2BD7               	goto	l740
  8405  1433                     l3465:	
  8406                           
  8407                           ;sysData.c: 90: };sysData.c: 91: INTCONbits.GIE = GIEBitValue;
  8408  1433  0C22               	rrf	my_flash_system_write@GIEBitValue,w
  8409  1434  1C03               	skipc
  8410  1435  138B               	bcf	11,7	;volatile
  8411  1436  1803               	skipnc
  8412  1437  178B               	bsf	11,7	;volatile
  8413  1438  0008               	return
  8414  1439                     __end_of_my_flash_system_write:	
  8415                           ;sysData.c: 93: return 0;;	Return value of _my_flash_system_write is never used
  8416                           
  8417                           
  8418                           	psect	text18
  8419  1007                     __ptext18:	
  8420 ;; *************** function _my_flash_read_system_erase *****************
  8421 ;; Defined at:
  8422 ;;		line 9 in file "src/api/sysData.c"
  8423 ;; Parameters:    Size  Location     Type
  8424 ;;		None
  8425 ;; Auto vars:     Size  Location     Type
  8426 ;;		None
  8427 ;; Return value:  Size  Location     Type
  8428 ;;                  1    wreg      void 
  8429 ;; Registers used:
  8430 ;;		wreg, status,2, status,0, pclath, cstack
  8431 ;; Tracked objects:
  8432 ;;		On entry : 0/0
  8433 ;;		On exit  : 0/0
  8434 ;;		Unchanged: 0/0
  8435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8440 ;;Total ram usage:        0 bytes
  8441 ;; Hardware stack levels used:    1
  8442 ;; Hardware stack levels required when called:    2
  8443 ;; This function calls:
  8444 ;;		_FLASH_EraseBlock
  8445 ;; This function is called by:
  8446 ;;		_sys_data_save
  8447 ;; This function uses a non-reentrant model
  8448 ;;
  8449                           
  8450                           
  8451                           ;psect for function _my_flash_read_system_erase
  8452  1007                     _my_flash_read_system_erase:	
  8453                           
  8454                           ;sysData.c: 16: FLASH_EraseBlock(0x1f00);
  8455                           
  8456                           ;incstack = 0
  8457                           ; Regs used in _my_flash_read_system_erase: [wreg+status,2+status,0+pclath+cstack]
  8458  1007  3000               	movlw	0
  8459  1008  00F1               	movwf	FLASH_EraseBlock@startAddr
  8460  1009  301F               	movlw	31
  8461  100A  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  8462  100B  319D  2518  3190   	fcall	_FLASH_EraseBlock
  8463                           
  8464                           ;sysData.c: 17: FLASH_EraseBlock(0x1f00+32);
  8465  100E  3020               	movlw	32
  8466  100F  00F1               	movwf	FLASH_EraseBlock@startAddr
  8467  1010  301F               	movlw	31
  8468  1011  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  8469  1012  319D  2518  3190   	fcall	_FLASH_EraseBlock
  8470                           
  8471                           ;sysData.c: 18: FLASH_EraseBlock(0x1f00+64);
  8472  1015  3040               	movlw	64
  8473  1016  00F1               	movwf	FLASH_EraseBlock@startAddr
  8474  1017  301F               	movlw	31
  8475  1018  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  8476  1019  319D  2518  3190   	fcall	_FLASH_EraseBlock
  8477                           
  8478                           ;sysData.c: 19: FLASH_EraseBlock(0x1f00+96);
  8479  101C  3060               	movlw	96
  8480  101D  00F1               	movwf	FLASH_EraseBlock@startAddr
  8481  101E  301F               	movlw	31
  8482  101F  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  8483  1020  319D  2518  3190   	fcall	_FLASH_EraseBlock
  8484                           
  8485                           ;sysData.c: 20: FLASH_EraseBlock(0x1f00+128);
  8486  1023  3080               	movlw	128
  8487  1024  00F1               	movwf	FLASH_EraseBlock@startAddr
  8488  1025  301F               	movlw	31
  8489  1026  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  8490  1027  319D  2518         	fcall	_FLASH_EraseBlock
  8491  1029  0008               	return
  8492  102A                     __end_of_my_flash_read_system_erase:	
  8493                           
  8494                           	psect	text19
  8495  1D18                     __ptext19:	
  8496 ;; *************** function _FLASH_EraseBlock *****************
  8497 ;; Defined at:
  8498 ;;		line 147 in file "mcc_generated_files/memory.c"
  8499 ;; Parameters:    Size  Location     Type
  8500 ;;  startAddr       2    1[COMMON] unsigned int 
  8501 ;; Auto vars:     Size  Location     Type
  8502 ;;  GIEBitValue     1    3[COMMON] unsigned char 
  8503 ;; Return value:  Size  Location     Type
  8504 ;;                  1    wreg      void 
  8505 ;; Registers used:
  8506 ;;		wreg, status,2, status,0
  8507 ;; Tracked objects:
  8508 ;;		On entry : 0/0
  8509 ;;		On exit  : 0/0
  8510 ;;		Unchanged: 0/0
  8511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8512 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8513 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8515 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8516 ;;Total ram usage:        3 bytes
  8517 ;; Hardware stack levels used:    1
  8518 ;; Hardware stack levels required when called:    1
  8519 ;; This function calls:
  8520 ;;		Nothing
  8521 ;; This function is called by:
  8522 ;;		_my_flash_read_system_erase
  8523 ;;		_FLASH_WriteBlock
  8524 ;; This function uses a non-reentrant model
  8525 ;;
  8526                           
  8527                           
  8528                           ;psect for function _FLASH_EraseBlock
  8529  1D18                     _FLASH_EraseBlock:	
  8530                           
  8531                           ;memory.c: 149: uint8_t GIEBitValue = INTCONbits.GIE;
  8532                           
  8533                           ;incstack = 0
  8534                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  8535  1D18  3000               	movlw	0
  8536  1D19  1B8B               	btfsc	11,7	;volatile
  8537  1D1A  3001               	movlw	1
  8538  1D1B  00F3               	movwf	FLASH_EraseBlock@GIEBitValue
  8539                           
  8540                           ;memory.c: 152: INTCONbits.GIE = 0;
  8541  1D1C  138B               	bcf	11,7	;volatile
  8542                           
  8543                           ;memory.c: 154: PMADRL = (startAddr & 0xFF);
  8544  1D1D  0871               	movf	FLASH_EraseBlock@startAddr,w
  8545  1D1E  0023               	movlb	3	; select bank3
  8546  1D1F  0091               	movwf	17	;volatile
  8547                           
  8548                           ;memory.c: 156: PMADRH = ((startAddr & 0xFF00) >> 8);
  8549  1D20  0872               	movf	FLASH_EraseBlock@startAddr+1,w
  8550  1D21  0092               	movwf	18	;volatile
  8551                           
  8552                           ;memory.c: 159: PMCON1bits.CFGS = 0;
  8553  1D22  1315               	bcf	21,6	;volatile
  8554                           
  8555                           ;memory.c: 160: PMCON1bits.FREE = 1;
  8556  1D23  1615               	bsf	21,4	;volatile
  8557                           
  8558                           ;memory.c: 161: PMCON1bits.WREN = 1;
  8559  1D24  1515               	bsf	21,2	;volatile
  8560                           
  8561                           ;memory.c: 164: PMCON2 = 0x55;
  8562  1D25  3055               	movlw	85
  8563  1D26  0096               	movwf	22	;volsfr
  8564                           
  8565                           ;memory.c: 165: PMCON2 = 0xAA;
  8566  1D27  30AA               	movlw	170
  8567  1D28  0096               	movwf	22	;volsfr
  8568                           
  8569                           ;memory.c: 166: PMCON1bits.WR = 1;
  8570  1D29  1495               	bsf	21,1	;volatile
  8571                           
  8572                           ;memory.c: 167: __nop();
  8573  1D2A  0000               	nop
  8574                           
  8575                           ;memory.c: 168: __nop();
  8576  1D2B  0000               	nop
  8577                           
  8578                           ;memory.c: 170: PMCON1bits.WREN = 0;
  8579  1D2C  0023               	movlb	3	; select bank3
  8580  1D2D  1115               	bcf	21,2	;volatile
  8581                           
  8582                           ;memory.c: 171: INTCONbits.GIE = GIEBitValue;
  8583  1D2E  0C73               	rrf	FLASH_EraseBlock@GIEBitValue,w
  8584  1D2F  1C03               	skipc
  8585  1D30  138B               	bcf	11,7	;volatile
  8586  1D31  1803               	skipnc
  8587  1D32  178B               	bsf	11,7	;volatile
  8588  1D33  0008               	return
  8589  1D34                     __end_of_FLASH_EraseBlock:	
  8590                           
  8591                           	psect	text20
  8592  1069                     __ptext20:	
  8593 ;; *************** function _modbus_response_illgeal_function *****************
  8594 ;; Defined at:
  8595 ;;		line 8 in file "src/api/modbus.c"
  8596 ;; Parameters:    Size  Location     Type
  8597 ;;  buf             1    wreg     PTR unsigned char 
  8598 ;;		 -> modbusBuf(32), 
  8599 ;;  errcode         1   12[BANK0 ] unsigned char 
  8600 ;; Auto vars:     Size  Location     Type
  8601 ;;  buf             1   14[BANK0 ] PTR unsigned char 
  8602 ;;		 -> modbusBuf(32), 
  8603 ;;  pmdbs           1   15[BANK0 ] PTR struct .
  8604 ;;		 -> modbusBuf(32), 
  8605 ;; Return value:  Size  Location     Type
  8606 ;;                  1    wreg      void 
  8607 ;; Registers used:
  8608 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8609 ;; Tracked objects:
  8610 ;;		On entry : 0/0
  8611 ;;		On exit  : 0/0
  8612 ;;		Unchanged: 0/0
  8613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8614 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8615 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8616 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8617 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8618 ;;Total ram usage:        4 bytes
  8619 ;; Hardware stack levels used:    1
  8620 ;; Hardware stack levels required when called:    3
  8621 ;; This function calls:
  8622 ;;		_crc_append
  8623 ;;		_uart_send_len
  8624 ;; This function is called by:
  8625 ;;		_modbus_response_process
  8626 ;; This function uses a non-reentrant model
  8627 ;;
  8628                           
  8629                           
  8630                           ;psect for function _modbus_response_illgeal_function
  8631  1069                     _modbus_response_illgeal_function:	
  8632                           
  8633                           ;incstack = 0
  8634                           ; Regs used in _modbus_response_illgeal_function: [wreg+fsr1l+fsr1h+status,2+status,0+pc
      +                          lath+cstack]
  8635                           ;modbus_response_illgeal_function@buf stored from wreg
  8636  1069  0020               	movlb	0	; select bank0
  8637  106A  00AE               	movwf	modbus_response_illgeal_function@buf
  8638                           
  8639                           ;modbus.c: 10: st_modbusErrRespStructDef* pmdbs=(st_modbusErrRespStructDef*)buf;
  8640  106B  082E               	movf	modbus_response_illgeal_function@buf,w
  8641  106C  00AD               	movwf	??_modbus_response_illgeal_function
  8642  106D  082D               	movf	??_modbus_response_illgeal_function,w
  8643  106E  00AF               	movwf	modbus_response_illgeal_function@pmdbs
  8644                           
  8645                           ;modbus.c: 11: if(pmdbs->addr==0x00)return;
  8646  106F  082F               	movf	modbus_response_illgeal_function@pmdbs,w
  8647  1070  0086               	movwf	6
  8648  1071  3001               	movlw	1	; select bank2/3
  8649  1072  0087               	movwf	7
  8650  1073  0801               	movf	1,w
  8651  1074  1903               	btfsc	3,2
  8652  1075  0008               	return
  8653                           
  8654                           ;modbus.c: 12: pmdbs->addr=sysData.id;
  8655  1076  305C               	movlw	92
  8656  1077  0086               	movwf	6
  8657  1078  3023               	movlw	35
  8658  1079  0087               	movwf	7
  8659  107A  3142               	addfsr 1,2
  8660  107B  0801               	movf	1,w
  8661  107C  00AD               	movwf	??_modbus_response_illgeal_function
  8662  107D  082F               	movf	modbus_response_illgeal_function@pmdbs,w
  8663  107E  0086               	movwf	6
  8664  107F  3001               	movlw	1	; select bank2/3
  8665  1080  0087               	movwf	7
  8666  1081  082D               	movf	??_modbus_response_illgeal_function,w
  8667  1082  0081               	movwf	1
  8668                           
  8669                           ;modbus.c: 13: if(errcode){
  8670  1083  082C               	movf	modbus_response_illgeal_function@errcode,w
  8671  1084  1903               	btfsc	3,2
  8672  1085  288E               	goto	l794
  8673                           
  8674                           ;modbus.c: 14: pmdbs->func+=0x80;
  8675  1086  3080               	movlw	128
  8676  1087  00AD               	movwf	??_modbus_response_illgeal_function
  8677  1088  0A2F               	incf	modbus_response_illgeal_function@pmdbs,w
  8678  1089  0086               	movwf	6
  8679  108A  3001               	movlw	1	; select bank2/3
  8680  108B  0087               	movwf	7
  8681  108C  082D               	movf	??_modbus_response_illgeal_function,w
  8682  108D  0781               	addwf	1,f
  8683  108E                     l794:	
  8684                           
  8685                           ;modbus.c: 15: };modbus.c: 16: pmdbs->errcord=errcode;
  8686  108E  082C               	movf	modbus_response_illgeal_function@errcode,w
  8687  108F  00AD               	movwf	??_modbus_response_illgeal_function
  8688  1090  082F               	movf	modbus_response_illgeal_function@pmdbs,w
  8689  1091  3E02               	addlw	2
  8690  1092  0086               	movwf	6
  8691  1093  3001               	movlw	1	; select bank2/3
  8692  1094  0087               	movwf	7
  8693  1095  082D               	movf	??_modbus_response_illgeal_function,w
  8694  1096  0081               	movwf	1
  8695                           
  8696                           ;modbus.c: 17: crc_append(buf,3);
  8697  1097  082E               	movf	modbus_response_illgeal_function@buf,w
  8698  1098  00A6               	movwf	crc_append@message
  8699  1099  3001               	movlw	1
  8700  109A  00A7               	movwf	crc_append@message+1
  8701  109B  3003               	movlw	3
  8702  109C  00A8               	movwf	crc_append@n
  8703  109D  3000               	movlw	0
  8704  109E  00A9               	movwf	crc_append@n+1
  8705  109F  319D  2589  3190   	fcall	_crc_append
  8706                           
  8707                           ;modbus.c: 18: uart_send_len(buf,5);
  8708  10A2  3005               	movlw	5
  8709  10A3  0020               	movlb	0	; select bank0
  8710  10A4  00AD               	movwf	??_modbus_response_illgeal_function
  8711  10A5  082D               	movf	??_modbus_response_illgeal_function,w
  8712  10A6  00F8               	movwf	uart_send_len@len
  8713  10A7  082E               	movf	modbus_response_illgeal_function@buf,w
  8714  10A8  319E  26C5         	fcall	_uart_send_len
  8715  10AA  0008               	return
  8716  10AB                     __end_of_modbus_response_illgeal_function:	
  8717                           
  8718                           	psect	text21
  8719  0F39                     __ptext21:	
  8720 ;; *************** function _modbus_response_command *****************
  8721 ;; Defined at:
  8722 ;;		line 181 in file "src/api/modbus.c"
  8723 ;; Parameters:    Size  Location     Type
  8724 ;;  rbuf            1    wreg     PTR unsigned char 
  8725 ;;		 -> modbusBuf(32), 
  8726 ;; Auto vars:     Size  Location     Type
  8727 ;;  rbuf            1   21[BANK0 ] PTR unsigned char 
  8728 ;;		 -> modbusBuf(32), 
  8729 ;;  tempData        2   22[BANK0 ] unsigned int 
  8730 ;;  startAddr       2   16[BANK0 ] unsigned int 
  8731 ;;  tmpAddr         2   14[BANK0 ] unsigned int 
  8732 ;;  len             1   20[BANK0 ] unsigned char 
  8733 ;;  pmdbs           1   19[BANK0 ] PTR struct .
  8734 ;;		 -> modbusBuf(32), 
  8735 ;;  i               1   18[BANK0 ] unsigned char 
  8736 ;; Return value:  Size  Location     Type
  8737 ;;                  1    wreg      void 
  8738 ;; Registers used:
  8739 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8740 ;; Tracked objects:
  8741 ;;		On entry : 0/0
  8742 ;;		On exit  : 0/0
  8743 ;;		Unchanged: 0/0
  8744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8746 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8747 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8748 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8749 ;;Total ram usage:       12 bytes
  8750 ;; Hardware stack levels used:    1
  8751 ;; Hardware stack levels required when called:    3
  8752 ;; This function calls:
  8753 ;;		_crc_append
  8754 ;;		_getRegisterVal
  8755 ;;		_uart_send_len
  8756 ;; This function is called by:
  8757 ;;		_modbus_response_process
  8758 ;; This function uses a non-reentrant model
  8759 ;;
  8760                           
  8761                           
  8762                           ;psect for function _modbus_response_command
  8763  0F39                     _modbus_response_command:	
  8764                           
  8765                           ;incstack = 0
  8766                           ; Regs used in _modbus_response_command: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8767                           ;modbus_response_command@rbuf stored from wreg
  8768  0F39  0020               	movlb	0	; select bank0
  8769  0F3A  00B5               	movwf	modbus_response_command@rbuf
  8770                           
  8771                           ;modbus.c: 182: uint8_t i;;modbus.c: 183: uint16_t startAddr=0;
  8772  0F3B  01B0               	clrf	modbus_response_command@startAddr
  8773  0F3C  01B1               	clrf	modbus_response_command@startAddr+1
  8774                           
  8775                           ;modbus.c: 184: uint16_t tempData,tmpAddr;;modbus.c: 185: uint8_t len=0;
  8776  0F3D  01B4               	clrf	modbus_response_command@len
  8777                           
  8778                           ;modbus.c: 186: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)rbuf;
  8779  0F3E  0835               	movf	modbus_response_command@rbuf,w
  8780  0F3F  00AC               	movwf	??_modbus_response_command
  8781  0F40  082C               	movf	??_modbus_response_command,w
  8782  0F41  00B3               	movwf	modbus_response_command@pmdbs
  8783                           
  8784                           ;modbus.c: 187: if(pmdbs->addr!=sysData.id || pmdbs->addr==0)return;
  8785  0F42  305C               	movlw	92
  8786  0F43  0086               	movwf	6
  8787  0F44  3023               	movlw	35
  8788  0F45  0087               	movwf	7
  8789  0F46  3142               	addfsr 1,2
  8790  0F47  0833               	movf	modbus_response_command@pmdbs,w
  8791  0F48  0084               	movwf	4
  8792  0F49  3001               	movlw	1	; select bank2/3
  8793  0F4A  0085               	movwf	5
  8794  0F4B  0800               	movf	0,w
  8795  0F4C  0601               	xorwf	1,w
  8796  0F4D  1D03               	skipz
  8797  0F4E  0008               	return
  8798  0F4F  0833               	movf	modbus_response_command@pmdbs,w
  8799  0F50  0086               	movwf	6
  8800  0F51  3001               	movlw	1	; select bank2/3
  8801  0F52  0087               	movwf	7
  8802  0F53  0801               	movf	1,w
  8803  0F54  1903               	btfsc	3,2
  8804  0F55  0008               	return
  8805                           
  8806                           ;modbus.c: 188: startAddr=pmdbs->addr_hi;
  8807  0F56  0833               	movf	modbus_response_command@pmdbs,w
  8808  0F57  3E02               	addlw	2
  8809  0F58  0086               	movwf	6
  8810  0F59  3001               	movlw	1	; select bank2/3
  8811  0F5A  0087               	movwf	7
  8812  0F5B  0801               	movf	1,w
  8813  0F5C  00AC               	movwf	??_modbus_response_command
  8814  0F5D  01AD               	clrf	??_modbus_response_command+1
  8815  0F5E  082C               	movf	??_modbus_response_command,w
  8816  0F5F  00B0               	movwf	modbus_response_command@startAddr
  8817  0F60  082D               	movf	??_modbus_response_command+1,w
  8818  0F61  00B1               	movwf	modbus_response_command@startAddr+1
  8819                           
  8820                           ;modbus.c: 189: startAddr<<=8;
  8821  0F62  3008               	movlw	8
  8822  0F63                     u4445:	
  8823  0F63  35B0               	lslf	modbus_response_command@startAddr,f
  8824  0F64  0DB1               	rlf	modbus_response_command@startAddr+1,f
  8825  0F65  0B89               	decfsz	9,f
  8826  0F66  2F63               	goto	u4445
  8827                           
  8828                           ;modbus.c: 190: startAddr |= pmdbs->addr_lo;
  8829  0F67  0833               	movf	modbus_response_command@pmdbs,w
  8830  0F68  3E03               	addlw	3
  8831  0F69  0086               	movwf	6
  8832  0F6A  3001               	movlw	1	; select bank2/3
  8833  0F6B  0087               	movwf	7
  8834  0F6C  0801               	movf	1,w
  8835  0F6D  00AC               	movwf	??_modbus_response_command
  8836  0F6E  01AD               	clrf	??_modbus_response_command+1
  8837  0F6F  082C               	movf	??_modbus_response_command,w
  8838  0F70  04B0               	iorwf	modbus_response_command@startAddr,f
  8839  0F71  082D               	movf	??_modbus_response_command+1,w
  8840  0F72  04B1               	iorwf	modbus_response_command@startAddr+1,f
  8841                           
  8842                           ;modbus.c: 191: tmpAddr=startAddr;
  8843  0F73  0831               	movf	modbus_response_command@startAddr+1,w
  8844  0F74  00AF               	movwf	modbus_response_command@tmpAddr+1
  8845  0F75  0830               	movf	modbus_response_command@startAddr,w
  8846  0F76  00AE               	movwf	modbus_response_command@tmpAddr
  8847                           
  8848                           ;modbus.c: 192: len = pmdbs->len_lo;
  8849  0F77  0833               	movf	modbus_response_command@pmdbs,w
  8850  0F78  0086               	movwf	6
  8851  0F79  3001               	movlw	1	; select bank2/3
  8852  0F7A  0087               	movwf	7
  8853  0F7B  3001               	movlw	1	; select bank2/3
  8854  0F7C  3F45               	moviw [5]fsr1
  8855  0F7D  00B4               	movwf	modbus_response_command@len
  8856                           
  8857                           ;modbus.c: 193: len<<=1;
  8858  0F7E  1003               	clrc
  8859  0F7F  0DB4               	rlf	modbus_response_command@len,f
  8860                           
  8861                           ;modbus.c: 194: if(len>32)len=32;
  8862  0F80  3021               	movlw	33
  8863  0F81  0234               	subwf	modbus_response_command@len,w
  8864  0F82  1C03               	skipc
  8865  0F83  2F88               	goto	l5027
  8866  0F84  3020               	movlw	32
  8867  0F85  00AC               	movwf	??_modbus_response_command
  8868  0F86  082C               	movf	??_modbus_response_command,w
  8869  0F87  00B4               	movwf	modbus_response_command@len
  8870  0F88                     l5027:	
  8871                           
  8872                           ;modbus.c: 195: for(i=0;i<len;i=i+2,tmpAddr++){
  8873  0F88  01B2               	clrf	modbus_response_command@i
  8874  0F89                     l5039:	
  8875  0F89  0834               	movf	modbus_response_command@len,w
  8876  0F8A  0232               	subwf	modbus_response_command@i,w
  8877  0F8B  1803               	btfsc	3,0
  8878  0F8C  2FBB               	goto	l5041
  8879                           
  8880                           ;modbus.c: 196: getRegisterVal(tmpAddr,&tempData);
  8881  0F8D  082F               	movf	modbus_response_command@tmpAddr+1,w
  8882  0F8E  00F2               	movwf	getRegisterVal@addr+1
  8883  0F8F  082E               	movf	modbus_response_command@tmpAddr,w
  8884  0F90  00F1               	movwf	getRegisterVal@addr
  8885  0F91  3036               	movlw	(low (modbus_response_command@tempData| 0))& (0+255)
  8886  0F92  00AC               	movwf	??_modbus_response_command
  8887  0F93  082C               	movf	??_modbus_response_command,w
  8888  0F94  00F3               	movwf	getRegisterVal@tempData
  8889  0F95  3197  2707  318F   	fcall	_getRegisterVal
  8890                           
  8891                           ;modbus.c: 197: rbuf[i+3] = (uint8_t)(tempData >> 8);
  8892  0F98  0020               	movlb	0	; select bank0
  8893  0F99  0837               	movf	modbus_response_command@tempData+1,w
  8894  0F9A  00AC               	movwf	??_modbus_response_command
  8895  0F9B  0832               	movf	modbus_response_command@i,w
  8896  0F9C  3E03               	addlw	3
  8897  0F9D  0735               	addwf	modbus_response_command@rbuf,w
  8898  0F9E  00AD               	movwf	??_modbus_response_command+1
  8899  0F9F  082D               	movf	??_modbus_response_command+1,w
  8900  0FA0  0086               	movwf	6
  8901  0FA1  3001               	movlw	1	; select bank2/3
  8902  0FA2  0087               	movwf	7
  8903  0FA3  082C               	movf	??_modbus_response_command,w
  8904  0FA4  0081               	movwf	1
  8905                           
  8906                           ;modbus.c: 198: rbuf[i+4] = (uint8_t)(tempData & 0xff);
  8907  0FA5  0836               	movf	modbus_response_command@tempData,w
  8908  0FA6  00AC               	movwf	??_modbus_response_command
  8909  0FA7  0832               	movf	modbus_response_command@i,w
  8910  0FA8  3E04               	addlw	4
  8911  0FA9  0735               	addwf	modbus_response_command@rbuf,w
  8912  0FAA  00AD               	movwf	??_modbus_response_command+1
  8913  0FAB  082D               	movf	??_modbus_response_command+1,w
  8914  0FAC  0086               	movwf	6
  8915  0FAD  3001               	movlw	1	; select bank2/3
  8916  0FAE  0087               	movwf	7
  8917  0FAF  082C               	movf	??_modbus_response_command,w
  8918  0FB0  0081               	movwf	1
  8919  0FB1  0832               	movf	modbus_response_command@i,w
  8920  0FB2  3E02               	addlw	2
  8921  0FB3  00AC               	movwf	??_modbus_response_command
  8922  0FB4  082C               	movf	??_modbus_response_command,w
  8923  0FB5  00B2               	movwf	modbus_response_command@i
  8924  0FB6  3001               	movlw	1
  8925  0FB7  07AE               	addwf	modbus_response_command@tmpAddr,f
  8926  0FB8  3000               	movlw	0
  8927  0FB9  3DAF               	addwfc	modbus_response_command@tmpAddr+1,f
  8928  0FBA  2F89               	goto	l5039
  8929  0FBB                     l5041:	
  8930                           
  8931                           ;modbus.c: 200: };modbus.c: 201: rbuf[0] = sysData.id;
  8932  0FBB  305C               	movlw	92
  8933  0FBC  0086               	movwf	6
  8934  0FBD  3023               	movlw	35
  8935  0FBE  0087               	movwf	7
  8936  0FBF  3142               	addfsr 1,2
  8937  0FC0  0801               	movf	1,w
  8938  0FC1  00AC               	movwf	??_modbus_response_command
  8939  0FC2  0835               	movf	modbus_response_command@rbuf,w
  8940  0FC3  0086               	movwf	6
  8941  0FC4  3001               	movlw	1	; select bank2/3
  8942  0FC5  0087               	movwf	7
  8943  0FC6  082C               	movf	??_modbus_response_command,w
  8944  0FC7  0081               	movwf	1
  8945                           
  8946                           ;modbus.c: 202: rbuf[1] = 3;
  8947  0FC8  3003               	movlw	3
  8948  0FC9  00AC               	movwf	??_modbus_response_command
  8949  0FCA  0A35               	incf	modbus_response_command@rbuf,w
  8950  0FCB  0086               	movwf	6
  8951  0FCC  3001               	movlw	1	; select bank2/3
  8952  0FCD  0087               	movwf	7
  8953  0FCE  082C               	movf	??_modbus_response_command,w
  8954  0FCF  0081               	movwf	1
  8955                           
  8956                           ;modbus.c: 203: rbuf[2] = len;
  8957  0FD0  0834               	movf	modbus_response_command@len,w
  8958  0FD1  00AC               	movwf	??_modbus_response_command
  8959  0FD2  0835               	movf	modbus_response_command@rbuf,w
  8960  0FD3  3E02               	addlw	2
  8961  0FD4  0086               	movwf	6
  8962  0FD5  3001               	movlw	1	; select bank2/3
  8963  0FD6  0087               	movwf	7
  8964  0FD7  082C               	movf	??_modbus_response_command,w
  8965  0FD8  0081               	movwf	1
  8966                           
  8967                           ;modbus.c: 204: len += 3;
  8968  0FD9  3003               	movlw	3
  8969  0FDA  00AC               	movwf	??_modbus_response_command
  8970  0FDB  082C               	movf	??_modbus_response_command,w
  8971  0FDC  07B4               	addwf	modbus_response_command@len,f
  8972                           
  8973                           ;modbus.c: 205: crc_append(rbuf,len);
  8974  0FDD  0835               	movf	modbus_response_command@rbuf,w
  8975  0FDE  00A6               	movwf	crc_append@message
  8976  0FDF  3001               	movlw	1
  8977  0FE0  00A7               	movwf	crc_append@message+1
  8978  0FE1  0834               	movf	modbus_response_command@len,w
  8979  0FE2  00AC               	movwf	??_modbus_response_command
  8980  0FE3  01AD               	clrf	??_modbus_response_command+1
  8981  0FE4  082C               	movf	??_modbus_response_command,w
  8982  0FE5  00A8               	movwf	crc_append@n
  8983  0FE6  082D               	movf	??_modbus_response_command+1,w
  8984  0FE7  00A9               	movwf	crc_append@n+1
  8985  0FE8  319D  2589  318F   	fcall	_crc_append
  8986                           
  8987                           ;modbus.c: 206: len += 2;
  8988  0FEB  3002               	movlw	2
  8989  0FEC  0020               	movlb	0	; select bank0
  8990  0FED  00AC               	movwf	??_modbus_response_command
  8991  0FEE  082C               	movf	??_modbus_response_command,w
  8992  0FEF  07B4               	addwf	modbus_response_command@len,f
  8993                           
  8994                           ;modbus.c: 207: uart_send_len(rbuf,len);
  8995  0FF0  0834               	movf	modbus_response_command@len,w
  8996  0FF1  00AC               	movwf	??_modbus_response_command
  8997  0FF2  082C               	movf	??_modbus_response_command,w
  8998  0FF3  00F8               	movwf	uart_send_len@len
  8999  0FF4  0835               	movf	modbus_response_command@rbuf,w
  9000  0FF5  319E  26C5         	fcall	_uart_send_len
  9001  0FF7  0008               	return
  9002  0FF8                     __end_of_modbus_response_command:	
  9003                           
  9004                           	psect	text22
  9005  1EC5                     __ptext22:	
  9006 ;; *************** function _uart_send_len *****************
  9007 ;; Defined at:
  9008 ;;		line 41 in file "src/api/my_uart.c"
  9009 ;; Parameters:    Size  Location     Type
  9010 ;;  buf             1    wreg     PTR unsigned char 
  9011 ;;		 -> modbusBuf(32), 
  9012 ;;  len             1    8[COMMON] unsigned char 
  9013 ;; Auto vars:     Size  Location     Type
  9014 ;;  buf             1   11[COMMON] PTR unsigned char 
  9015 ;;		 -> modbusBuf(32), 
  9016 ;; Return value:  Size  Location     Type
  9017 ;;                  1    wreg      void 
  9018 ;; Registers used:
  9019 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9020 ;; Tracked objects:
  9021 ;;		On entry : 0/0
  9022 ;;		On exit  : 0/0
  9023 ;;		Unchanged: 0/0
  9024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9025 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9026 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9027 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9028 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9029 ;;Total ram usage:        4 bytes
  9030 ;; Hardware stack levels used:    1
  9031 ;; Hardware stack levels required when called:    2
  9032 ;; This function calls:
  9033 ;;		_m_mem_cpy_len
  9034 ;; This function is called by:
  9035 ;;		_modbus_response_illgeal_function
  9036 ;;		_modbus_response_write_single_register
  9037 ;;		_modbus_response_write_mult_register
  9038 ;;		_modbus_response_command
  9039 ;;		_main
  9040 ;; This function uses a non-reentrant model
  9041 ;;
  9042                           
  9043                           
  9044                           ;psect for function _uart_send_len
  9045  1EC5                     _uart_send_len:	
  9046                           
  9047                           ;incstack = 0
  9048                           ; Regs used in _uart_send_len: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9049                           ;uart_send_len@buf stored from wreg
  9050  1EC5  00FB               	movwf	uart_send_len@buf
  9051                           
  9052                           ;my_uart.c: 45: if(!TXSTAbits.TXEN)TXSTAbits.TXEN=1;
  9053  1EC6  0023               	movlb	3	; select bank3
  9054  1EC7  1E9E               	btfss	30,5	;volatile
  9055  1EC8  169E               	bsf	30,5	;volatile
  9056                           
  9057                           ;my_uart.c: 47: if(txBufLen>0)return;
  9058  1EC9  0020               	movlb	0	; select bank0
  9059  1ECA  0866               	movf	_txBufLen,w
  9060  1ECB  1D03               	btfss	3,2
  9061  1ECC  0008               	return
  9062                           
  9063                           ;my_uart.c: 48: if(len>sizeof(txBuf))len=sizeof(txBuf);
  9064  1ECD  3041               	movlw	65
  9065  1ECE  0278               	subwf	uart_send_len@len,w
  9066  1ECF  1C03               	skipc
  9067  1ED0  2ED5               	goto	l4843
  9068  1ED1  3040               	movlw	64
  9069  1ED2  00F9               	movwf	??_uart_send_len
  9070  1ED3  0879               	movf	??_uart_send_len,w
  9071  1ED4  00F8               	movwf	uart_send_len@len
  9072  1ED5                     l4843:	
  9073                           
  9074                           ;my_uart.c: 49: m_mem_cpy_len(txBuf,buf,len);
  9075  1ED5  30A0               	movlw	low _txBuf
  9076  1ED6  00F1               	movwf	m_mem_cpy_len@d
  9077  1ED7  3001               	movlw	high _txBuf
  9078  1ED8  00F2               	movwf	m_mem_cpy_len@d+1
  9079  1ED9  087B               	movf	uart_send_len@buf,w
  9080  1EDA  00F3               	movwf	m_mem_cpy_len@s
  9081  1EDB  3001               	movlw	1
  9082  1EDC  00F4               	movwf	m_mem_cpy_len@s+1
  9083  1EDD  0878               	movf	uart_send_len@len,w
  9084  1EDE  00F9               	movwf	??_uart_send_len
  9085  1EDF  01FA               	clrf	??_uart_send_len+1
  9086  1EE0  0879               	movf	??_uart_send_len,w
  9087  1EE1  00F5               	movwf	m_mem_cpy_len@len
  9088  1EE2  087A               	movf	??_uart_send_len+1,w
  9089  1EE3  00F6               	movwf	m_mem_cpy_len@len+1
  9090  1EE4  319D  256C  319E   	fcall	_m_mem_cpy_len
  9091                           
  9092                           ;my_uart.c: 50: if(len==0)return;
  9093  1EE7  0878               	movf	uart_send_len@len,w
  9094  1EE8  1903               	btfsc	3,2
  9095  1EE9  0008               	return
  9096  1EEA                     l511:	
  9097                           ;my_uart.c: 51: while(0 == PIR1bits.TXIF);
  9098                           
  9099  1EEA  0020               	movlb	0	; select bank0
  9100  1EEB  1E11               	btfss	17,4	;volatile
  9101  1EEC  2EEA               	goto	l511
  9102                           
  9103                           ;my_uart.c: 52: TXREG=txBuf[0];
  9104  1EED  0023               	movlb	3	; select bank3
  9105  1EEE  0820               	movf	_txBuf^(0+384),w
  9106  1EEF  009A               	movwf	26	;volatile
  9107                           
  9108                           ;my_uart.c: 53: txBufLen=len;
  9109  1EF0  0878               	movf	uart_send_len@len,w
  9110  1EF1  00F9               	movwf	??_uart_send_len
  9111  1EF2  0879               	movf	??_uart_send_len,w
  9112  1EF3  0020               	movlb	0	; select bank0
  9113  1EF4  00E6               	movwf	_txBufLen
  9114                           
  9115                           ;my_uart.c: 54: txBufLen--;
  9116  1EF5  3001               	movlw	1
  9117  1EF6  02E6               	subwf	_txBufLen,f
  9118                           
  9119                           ;my_uart.c: 55: txCount++;
  9120  1EF7  3001               	movlw	1
  9121  1EF8  00F9               	movwf	??_uart_send_len
  9122  1EF9  0879               	movf	??_uart_send_len,w
  9123  1EFA  07E5               	addwf	_txCount,f
  9124                           
  9125                           ;my_uart.c: 56: if(!PIE1bits.TXIE)PIE1bits.TXIE=1;
  9126  1EFB  0021               	movlb	1	; select bank1
  9127  1EFC  1A11               	btfsc	17,4	;volatile
  9128  1EFD  0008               	return
  9129  1EFE  1611               	bsf	17,4	;volatile
  9130  1EFF  0008               	return
  9131  1F00                     __end_of_uart_send_len:	
  9132                           
  9133                           	psect	text23
  9134  1707                     __ptext23:	
  9135 ;; *************** function _getRegisterVal *****************
  9136 ;; Defined at:
  9137 ;;		line 80 in file "src/api/modbus.c"
  9138 ;; Parameters:    Size  Location     Type
  9139 ;;  addr            2    1[COMMON] unsigned int 
  9140 ;;  tempData        1    3[COMMON] PTR unsigned int 
  9141 ;;		 -> modbus_response_command@tempData(2), 
  9142 ;; Auto vars:     Size  Location     Type
  9143 ;;  t16             2    8[COMMON] unsigned int 
  9144 ;;  tempAddr        1   10[COMMON] unsigned char 
  9145 ;; Return value:  Size  Location     Type
  9146 ;;                  2    1[COMMON] unsigned int 
  9147 ;; Registers used:
  9148 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  9149 ;; Tracked objects:
  9150 ;;		On entry : 0/0
  9151 ;;		On exit  : 0/0
  9152 ;;		Unchanged: 0/0
  9153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9154 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9155 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9156 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9157 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9158 ;;Total ram usage:       10 bytes
  9159 ;; Hardware stack levels used:    1
  9160 ;; Hardware stack levels required when called:    1
  9161 ;; This function calls:
  9162 ;;		Nothing
  9163 ;; This function is called by:
  9164 ;;		_modbus_response_command
  9165 ;; This function uses a non-reentrant model
  9166 ;;
  9167                           
  9168                           
  9169                           ;psect for function _getRegisterVal
  9170  1707                     _getRegisterVal:	
  9171                           
  9172                           ;modbus.c: 82: uint16_t t16 = 0;
  9173                           
  9174                           ;incstack = 0
  9175                           ; Regs used in _getRegisterVal: [wreg-fsr1h+status,2+status,0]
  9176  1707  01F8               	clrf	getRegisterVal@t16
  9177  1708  01F9               	clrf	getRegisterVal@t16+1
  9178                           
  9179                           ;modbus.c: 83: uint8_t tempAddr;;modbus.c: 85: tempAddr = addr & 0xff;
  9180  1709  0871               	movf	getRegisterVal@addr,w
  9181  170A  00F4               	movwf	??_getRegisterVal
  9182  170B  0874               	movf	??_getRegisterVal,w
  9183  170C  00FA               	movwf	getRegisterVal@tempAddr
  9184                           
  9185                           ;modbus.c: 86: switch(tempAddr){
  9186  170D  2FB9               	goto	l3565
  9187  170E                     l3531:	
  9188                           ;modbus.c: 87: case 0x01:*tempData = 0100; break;
  9189                           
  9190  170E  0873               	movf	getRegisterVal@tempData,w
  9191  170F  0086               	movwf	6
  9192  1710  0187               	clrf	7
  9193  1711  3040               	movlw	64
  9194  1712  3FC0               	movwi [0]fsr1
  9195  1713  3000               	movlw	0
  9196  1714  3FC1               	movwi [1]fsr1
  9197  1715  2FC6               	goto	l3567
  9198  1716                     l3533:	
  9199                           ;modbus.c: 88: case 0x02:*tempData=sysData.id;break;
  9200                           
  9201  1716  305C               	movlw	92
  9202  1717  0086               	movwf	6
  9203  1718  3023               	movlw	35
  9204  1719  0087               	movwf	7
  9205  171A  3142               	addfsr 1,2
  9206  171B  0801               	movf	1,w
  9207  171C  00F4               	movwf	??_getRegisterVal
  9208  171D  01F5               	clrf	??_getRegisterVal+1
  9209  171E  0873               	movf	getRegisterVal@tempData,w
  9210  171F  0086               	movwf	6
  9211  1720  0187               	clrf	7
  9212  1721  0874               	movf	??_getRegisterVal,w
  9213  1722  3FC0               	movwi [0]fsr1
  9214  1723  0875               	movf	??_getRegisterVal+1,w
  9215  1724  3FC1               	movwi [1]fsr1
  9216  1725  2FC6               	goto	l3567
  9217  1726                     l3535:	
  9218                           ;modbus.c: 89: case 0x03:*tempData=(sysData.pidSetFlg1<<8 | sysData.pidSetFlg0);break;
  9219                           
  9220  1726  305C               	movlw	92
  9221  1727  0084               	movwf	4
  9222  1728  3023               	movlw	35
  9223  1729  0085               	movwf	5
  9224  172A  3101               	addfsr 0,1
  9225  172B  0800               	movf	0,w
  9226  172C  00F4               	movwf	??_getRegisterVal
  9227  172D  305C               	movlw	92
  9228  172E  0084               	movwf	4
  9229  172F  3023               	movlw	35
  9230  1730  0085               	movwf	5
  9231  1731  0873               	movf	getRegisterVal@tempData,w
  9232  1732  0086               	movwf	6
  9233  1733  0187               	clrf	7
  9234  1734  0800               	movf	0,w
  9235  1735  3FC0               	movwi [0]fsr1
  9236  1736  0874               	movf	??_getRegisterVal,w
  9237  1737  3FC1               	movwi [1]fsr1
  9238  1738  2FC6               	goto	l3567
  9239  1739                     l3537:	
  9240                           ;modbus.c: 90: case 0x04:*tempData=sysData.pidKp;break;
  9241                           
  9242  1739  305C               	movlw	92
  9243  173A  0086               	movwf	6
  9244  173B  3023               	movlw	35
  9245  173C  0087               	movwf	7
  9246  173D  3144               	addfsr 1,4
  9247  173E  0873               	movf	getRegisterVal@tempData,w
  9248  173F  0084               	movwf	4
  9249  1740  0185               	clrf	5
  9250  1741  3F40               	moviw [0]fsr1
  9251  1742  3F80               	movwi [0]fsr0
  9252  1743  3F41               	moviw [1]fsr1
  9253  1744  3F81               	movwi [1]fsr0
  9254  1745  2FC6               	goto	l3567
  9255  1746                     l3539:	
  9256                           ;modbus.c: 91: case 0x05:*tempData=sysData.pidTi;break;
  9257                           
  9258  1746  305C               	movlw	92
  9259  1747  0086               	movwf	6
  9260  1748  3023               	movlw	35
  9261  1749  0087               	movwf	7
  9262  174A  3146               	addfsr 1,6
  9263  174B  0873               	movf	getRegisterVal@tempData,w
  9264  174C  0084               	movwf	4
  9265  174D  0185               	clrf	5
  9266  174E  3F40               	moviw [0]fsr1
  9267  174F  3F80               	movwi [0]fsr0
  9268  1750  3F41               	moviw [1]fsr1
  9269  1751  3F81               	movwi [1]fsr0
  9270  1752  2FC6               	goto	l3567
  9271  1753                     l3541:	
  9272                           ;modbus.c: 92: case 0x06:*tempData=sysData.pidTd;break;
  9273                           
  9274  1753  305C               	movlw	92
  9275  1754  0086               	movwf	6
  9276  1755  3023               	movlw	35
  9277  1756  0087               	movwf	7
  9278  1757  3148               	addfsr 1,8
  9279  1758  0873               	movf	getRegisterVal@tempData,w
  9280  1759  0084               	movwf	4
  9281  175A  0185               	clrf	5
  9282  175B  3F40               	moviw [0]fsr1
  9283  175C  3F80               	movwi [0]fsr0
  9284  175D  3F41               	moviw [1]fsr1
  9285  175E  3F81               	movwi [1]fsr0
  9286  175F  2FC6               	goto	l3567
  9287  1760                     l3543:	
  9288                           ;modbus.c: 93: case 0x07:*tempData=rtAdcValueRsLo; break;
  9289                           
  9290  1760  0873               	movf	getRegisterVal@tempData,w
  9291  1761  0086               	movwf	6
  9292  1762  0187               	clrf	7
  9293  1763  0020               	movlb	0	; select bank0
  9294  1764  085F               	movf	_rtAdcValueRsLo,w
  9295  1765  3FC0               	movwi [0]fsr1
  9296  1766  0860               	movf	_rtAdcValueRsLo+1,w
  9297  1767  3FC1               	movwi [1]fsr1
  9298  1768  2FC6               	goto	l3567
  9299  1769                     l3545:	
  9300                           ;modbus.c: 94: case 0x08:*tempData=rtAdcValueRsHi;break;
  9301                           
  9302  1769  0873               	movf	getRegisterVal@tempData,w
  9303  176A  0086               	movwf	6
  9304  176B  0187               	clrf	7
  9305  176C  0020               	movlb	0	; select bank0
  9306  176D  085D               	movf	_rtAdcValueRsHi,w
  9307  176E  3FC0               	movwi [0]fsr1
  9308  176F  085E               	movf	_rtAdcValueRsHi+1,w
  9309  1770  3FC1               	movwi [1]fsr1
  9310  1771  2FC6               	goto	l3567
  9311  1772                     l3547:	
  9312                           ;modbus.c: 95: case 0x09:*tempData=rtAdcValueRcLo;break;
  9313                           
  9314  1772  0873               	movf	getRegisterVal@tempData,w
  9315  1773  0086               	movwf	6
  9316  1774  0187               	clrf	7
  9317  1775  0020               	movlb	0	; select bank0
  9318  1776  085B               	movf	_rtAdcValueRcLo,w
  9319  1777  3FC0               	movwi [0]fsr1
  9320  1778  085C               	movf	_rtAdcValueRcLo+1,w
  9321  1779  3FC1               	movwi [1]fsr1
  9322  177A  2FC6               	goto	l3567
  9323  177B                     l3549:	
  9324                           ;modbus.c: 96: case 0x0a:*tempData=rtAdcValueRcHi;break;
  9325                           
  9326  177B  0873               	movf	getRegisterVal@tempData,w
  9327  177C  0086               	movwf	6
  9328  177D  0187               	clrf	7
  9329  177E  0020               	movlb	0	; select bank0
  9330  177F  0859               	movf	_rtAdcValueRcHi,w
  9331  1780  3FC0               	movwi [0]fsr1
  9332  1781  085A               	movf	_rtAdcValueRcHi+1,w
  9333  1782  3FC1               	movwi [1]fsr1
  9334  1783  2FC6               	goto	l3567
  9335  1784                     l3551:	
  9336                           ;modbus.c: 97: case 0x0b:*tempData=resRc;break;
  9337                           
  9338  1784  0873               	movf	getRegisterVal@tempData,w
  9339  1785  0086               	movwf	6
  9340  1786  0187               	clrf	7
  9341  1787  0020               	movlb	0	; select bank0
  9342  1788  086E               	movf	_resRc,w
  9343  1789  3FC0               	movwi [0]fsr1
  9344  178A  086F               	movf	_resRc+1,w
  9345  178B  3FC1               	movwi [1]fsr1
  9346  178C  2FC6               	goto	l3567
  9347  178D                     l3553:	
  9348                           ;modbus.c: 98: case 0x0c:*tempData=resRs;break;
  9349                           
  9350  178D  0873               	movf	getRegisterVal@tempData,w
  9351  178E  0086               	movwf	6
  9352  178F  0187               	clrf	7
  9353  1790  0020               	movlb	0	; select bank0
  9354  1791  086C               	movf	_resRs,w
  9355  1792  3FC0               	movwi [0]fsr1
  9356  1793  086D               	movf	_resRs+1,w
  9357  1794  3FC1               	movwi [1]fsr1
  9358  1795  2FC6               	goto	l3567
  9359  1796                     l3555:	
  9360                           ;modbus.c: 99: case 0x0d:*tempData=rtAdcValueVoFb;break;
  9361                           
  9362  1796  0873               	movf	getRegisterVal@tempData,w
  9363  1797  0086               	movwf	6
  9364  1798  0187               	clrf	7
  9365  1799  0020               	movlb	0	; select bank0
  9366  179A  0857               	movf	_rtAdcValueVoFb,w
  9367  179B  3FC0               	movwi [0]fsr1
  9368  179C  0858               	movf	_rtAdcValueVoFb+1,w
  9369  179D  3FC1               	movwi [1]fsr1
  9370  179E  2FC6               	goto	l3567
  9371  179F                     l3557:	
  9372                           ;modbus.c: 100: case 0x0e:*tempData=voExpectMv;break;
  9373                           
  9374  179F  0873               	movf	getRegisterVal@tempData,w
  9375  17A0  0086               	movwf	6
  9376  17A1  0187               	clrf	7
  9377  17A2  0021               	movlb	1	; select bank1
  9378  17A3  084A               	movf	_voExpectMv^(0+128),w
  9379  17A4  3FC0               	movwi [0]fsr1
  9380  17A5  084B               	movf	(_voExpectMv+1)^(0+128),w
  9381  17A6  3FC1               	movwi [1]fsr1
  9382  17A7  2FC6               	goto	l3567
  9383  17A8                     l3559:	
  9384                           ;modbus.c: 101: case 0x0f:*tempData=voExpectAdcValue;break;
  9385                           
  9386  17A8  0873               	movf	getRegisterVal@tempData,w
  9387  17A9  0086               	movwf	6
  9388  17AA  0187               	clrf	7
  9389  17AB  0020               	movlb	0	; select bank0
  9390  17AC  0855               	movf	_voExpectAdcValue,w
  9391  17AD  3FC0               	movwi [0]fsr1
  9392  17AE  0856               	movf	_voExpectAdcValue+1,w
  9393  17AF  3FC1               	movwi [1]fsr1
  9394  17B0  2FC6               	goto	l3567
  9395  17B1                     l3561:	
  9396                           ;modbus.c: 102: default: *tempData=0x55aa;break;
  9397                           
  9398  17B1  0873               	movf	getRegisterVal@tempData,w
  9399  17B2  0086               	movwf	6
  9400  17B3  0187               	clrf	7
  9401  17B4  30AA               	movlw	170
  9402  17B5  3FC0               	movwi [0]fsr1
  9403  17B6  3055               	movlw	85
  9404  17B7  3FC1               	movwi [1]fsr1
  9405                           
  9406                           ;modbus.c: 103: }
  9407  17B8  2FC6               	goto	l3567
  9408  17B9                     l3565:	
  9409  17B9  087A               	movf	getRegisterVal@tempAddr,w
  9410                           
  9411                           ; Switch size 1, requested type "space"
  9412                           ; Number of cases is 15, Range of values is 1 to 15
  9413                           ; switch strategies available:
  9414                           ; Name         Instructions Cycles
  9415                           ; direct_byte           39     9 (fixed)
  9416                           ; simple_byte           46    24 (average)
  9417                           ; jumptable            263     9 (fixed)
  9418                           ;	Chosen strategy is direct_byte
  9419  17BA  3EFF               	addlw	-1
  9420  17BB  1C03               	skipc
  9421  17BC  2FB1               	goto	l3561
  9422  17BD  0084               	movwf	4
  9423  17BE  300F               	movlw	15
  9424  17BF  0204               	subwf	4,w
  9425  17C0  1803               	skipnc
  9426  17C1  2FB1               	goto	l3561
  9427  17C2  3198               	movlp	high S5493
  9428  17C3  3504               	lslf	4,w
  9429  17C4  3E00               	addlw	low S5493
  9430  17C5  0082               	movwf	2
  9431  17C6                     l3567:	
  9432                           
  9433                           ;modbus.c: 104: if(tempAddr>0x0f && tempAddr < 0x10+30*2){
  9434  17C6  3010               	movlw	16
  9435  17C7  027A               	subwf	getRegisterVal@tempAddr,w
  9436  17C8  1C03               	skipc
  9437  17C9  0008               	return
  9438  17CA  304C               	movlw	76
  9439  17CB  027A               	subwf	getRegisterVal@tempAddr,w
  9440  17CC  1803               	skipnc
  9441  17CD  0008               	return
  9442                           
  9443                           ;modbus.c: 105: tempAddr-=0x10;
  9444  17CE  3010               	movlw	16
  9445  17CF  02FA               	subwf	getRegisterVal@tempAddr,f
  9446                           
  9447                           ;modbus.c: 106: if(tempAddr & 0x01){
  9448  17D0  1C7A               	btfss	getRegisterVal@tempAddr,0
  9449  17D1  2FE9               	goto	l3577
  9450                           
  9451                           ;modbus.c: 107: *tempData=sysData.calibVoMV[tempAddr>>1];
  9452  17D2  367A               	lsrf	getRegisterVal@tempAddr,w
  9453  17D3  00F4               	movwf	??_getRegisterVal
  9454  17D4  01F5               	clrf	??_getRegisterVal+1
  9455  17D5  35F4               	lslf	??_getRegisterVal,f
  9456  17D6  0DF5               	rlf	??_getRegisterVal+1,f
  9457  17D7  30A2               	movlw	162
  9458  17D8  00F6               	movwf	??_getRegisterVal+2
  9459  17D9  3023               	movlw	35
  9460  17DA  00F7               	movwf	??_getRegisterVal+3
  9461  17DB  0874               	movf	??_getRegisterVal,w
  9462  17DC  0776               	addwf	??_getRegisterVal+2,w
  9463  17DD  0086               	movwf	6
  9464  17DE  0875               	movf	??_getRegisterVal+1,w
  9465  17DF  3D77               	addwfc	??_getRegisterVal+3,w
  9466  17E0  0087               	movwf	7
  9467  17E1  0873               	movf	getRegisterVal@tempData,w
  9468  17E2  0084               	movwf	4
  9469  17E3  0185               	clrf	5
  9470  17E4  3F40               	moviw [0]fsr1
  9471  17E5  3F80               	movwi [0]fsr0
  9472  17E6  3F41               	moviw [1]fsr1
  9473  17E7  3F81               	movwi [1]fsr0
  9474                           
  9475                           ;modbus.c: 108: }else{
  9476  17E8  0008               	return
  9477  17E9                     l3577:	
  9478                           
  9479                           ;modbus.c: 109: *tempData=sysData.calibRsAdc[tempAddr>>1];
  9480  17E9  367A               	lsrf	getRegisterVal@tempAddr,w
  9481  17EA  00F4               	movwf	??_getRegisterVal
  9482  17EB  01F5               	clrf	??_getRegisterVal+1
  9483  17EC  35F4               	lslf	??_getRegisterVal,f
  9484  17ED  0DF5               	rlf	??_getRegisterVal+1,f
  9485  17EE  3066               	movlw	102
  9486  17EF  00F6               	movwf	??_getRegisterVal+2
  9487  17F0  3023               	movlw	35
  9488  17F1  00F7               	movwf	??_getRegisterVal+3
  9489  17F2  0874               	movf	??_getRegisterVal,w
  9490  17F3  0776               	addwf	??_getRegisterVal+2,w
  9491  17F4  0086               	movwf	6
  9492  17F5  0875               	movf	??_getRegisterVal+1,w
  9493  17F6  3D77               	addwfc	??_getRegisterVal+3,w
  9494  17F7  0087               	movwf	7
  9495  17F8  0873               	movf	getRegisterVal@tempData,w
  9496  17F9  0084               	movwf	4
  9497  17FA  0185               	clrf	5
  9498  17FB  3F40               	moviw [0]fsr1
  9499  17FC  3F80               	movwi [0]fsr0
  9500  17FD  3F41               	moviw [1]fsr1
  9501  17FE  3F81               	movwi [1]fsr0
  9502  17FF  0008               	return
  9503  1800                     __end_of_getRegisterVal:	
  9504                           ;modbus.c: 110: };modbus.c: 111: };modbus.c: 112: return t16;;	Return value of _getRegis
      +                          terVal is never used
  9505                           
  9506                           
  9507                           	psect	swtext1
  9508  1800                     __pswtext1:	
  9509  1800                     S5493:	
  9510  1800  3197  2F0E         	ljmp	l3531
  9511  1802  3197  2F16         	ljmp	l3533
  9512  1804  3197  2F26         	ljmp	l3535
  9513  1806  3197  2F39         	ljmp	l3537
  9514  1808  3197  2F46         	ljmp	l3539
  9515  180A  3197  2F53         	ljmp	l3541
  9516  180C  3197  2F60         	ljmp	l3543
  9517  180E  3197  2F69         	ljmp	l3545
  9518  1810  3197  2F72         	ljmp	l3547
  9519  1812  3197  2F7B         	ljmp	l3549
  9520  1814  3197  2F84         	ljmp	l3551
  9521  1816  3197  2F8D         	ljmp	l3553
  9522  1818  3197  2F96         	ljmp	l3555
  9523  181A  3197  2F9F         	ljmp	l3557
  9524  181C  3197  2FA8         	ljmp	l3559
  9525                           
  9526                           	psect	text24
  9527  1D89                     __ptext24:	
  9528 ;; *************** function _crc_append *****************
  9529 ;; Defined at:
  9530 ;;		line 143 in file "src/depend/crc16.c"
  9531 ;; Parameters:    Size  Location     Type
  9532 ;;  message         2    6[BANK0 ] PTR unsigned char 
  9533 ;;		 -> modbusBuf(32), sysData(132), 
  9534 ;;  n               2    8[BANK0 ] unsigned int 
  9535 ;; Auto vars:     Size  Location     Type
  9536 ;;  crc             2   10[BANK0 ] unsigned int 
  9537 ;; Return value:  Size  Location     Type
  9538 ;;                  1    wreg      void 
  9539 ;; Registers used:
  9540 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9541 ;; Tracked objects:
  9542 ;;		On entry : 0/0
  9543 ;;		On exit  : 0/0
  9544 ;;		Unchanged: 0/0
  9545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9546 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9547 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9548 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9549 ;;      Totals:         5       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9550 ;;Total ram usage:       11 bytes
  9551 ;; Hardware stack levels used:    1
  9552 ;; Hardware stack levels required when called:    2
  9553 ;; This function calls:
  9554 ;;		_crc_sum
  9555 ;; This function is called by:
  9556 ;;		_sys_data_save
  9557 ;;		_modbus_response_illgeal_function
  9558 ;;		_modbus_response_write_single_register
  9559 ;;		_modbus_response_write_mult_register
  9560 ;;		_modbus_response_command
  9561 ;; This function uses a non-reentrant model
  9562 ;;
  9563                           
  9564                           
  9565                           ;psect for function _crc_append
  9566  1D89                     _crc_append:	
  9567                           
  9568                           ;crc16.c: 145: uint16_t crc;;crc16.c: 146: crc = crc_sum(message, n);
  9569                           
  9570                           ;incstack = 0
  9571                           ; Regs used in _crc_append: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9572  1D89  0020               	movlb	0	; select bank0
  9573  1D8A  0827               	movf	crc_append@message+1,w
  9574  1D8B  00F2               	movwf	crc_sum@buf+1
  9575  1D8C  0826               	movf	crc_append@message,w
  9576  1D8D  00F1               	movwf	crc_sum@buf
  9577  1D8E  0829               	movf	crc_append@n+1,w
  9578  1D8F  00F4               	movwf	crc_sum@len+1
  9579  1D90  0828               	movf	crc_append@n,w
  9580  1D91  00F3               	movwf	crc_sum@len
  9581  1D92  3191  21A3         	fcall	_crc_sum
  9582  1D94  0872               	movf	?_crc_sum+1,w
  9583  1D95  0020               	movlb	0	; select bank0
  9584  1D96  00AB               	movwf	crc_append@crc+1
  9585  1D97  0871               	movf	?_crc_sum,w
  9586  1D98  00AA               	movwf	crc_append@crc
  9587                           
  9588                           ;crc16.c: 147: message[n] = (uint8_t)(crc & 0xff);
  9589  1D99  0828               	movf	crc_append@n,w
  9590  1D9A  0726               	addwf	crc_append@message,w
  9591  1D9B  00F7               	movwf	??_crc_append
  9592  1D9C  0829               	movf	crc_append@n+1,w
  9593  1D9D  3D27               	addwfc	crc_append@message+1,w
  9594  1D9E  00F8               	movwf	??_crc_append+1
  9595  1D9F  0877               	movf	??_crc_append,w
  9596  1DA0  0086               	movwf	6
  9597  1DA1  0878               	movf	??_crc_append+1,w
  9598  1DA2  0087               	movwf	7
  9599  1DA3  082A               	movf	crc_append@crc,w
  9600  1DA4  0081               	movwf	1
  9601                           
  9602                           ;crc16.c: 148: message[n+1] = (uint8_t)((crc >> 8) & 0xff);
  9603  1DA5  082B               	movf	crc_append@crc+1,w
  9604  1DA6  00F7               	movwf	??_crc_append
  9605  1DA7  0828               	movf	crc_append@n,w
  9606  1DA8  3E01               	addlw	1
  9607  1DA9  00F8               	movwf	??_crc_append+1
  9608  1DAA  3000               	movlw	0
  9609  1DAB  3D29               	addwfc	crc_append@n+1,w
  9610  1DAC  00F9               	movwf	??_crc_append+2
  9611  1DAD  0878               	movf	??_crc_append+1,w
  9612  1DAE  0726               	addwf	crc_append@message,w
  9613  1DAF  00FA               	movwf	??_crc_append+3
  9614  1DB0  0879               	movf	??_crc_append+2,w
  9615  1DB1  3D27               	addwfc	crc_append@message+1,w
  9616  1DB2  00FB               	movwf	??_crc_append+4
  9617  1DB3  087A               	movf	??_crc_append+3,w
  9618  1DB4  0086               	movwf	6
  9619  1DB5  087B               	movf	??_crc_append+4,w
  9620  1DB6  0087               	movwf	7
  9621  1DB7  0877               	movf	??_crc_append,w
  9622  1DB8  0081               	movwf	1
  9623  1DB9  0008               	return
  9624  1DBA                     __end_of_crc_append:	
  9625                           
  9626                           	psect	text25
  9627  1E56                     __ptext25:	
  9628 ;; *************** function _crc_verify *****************
  9629 ;; Defined at:
  9630 ;;		line 135 in file "src/depend/crc16.c"
  9631 ;; Parameters:    Size  Location     Type
  9632 ;;  message         2    6[BANK0 ] PTR unsigned char 
  9633 ;;		 -> modbusBuf(32), sysData(132), 
  9634 ;;  n               2    8[BANK0 ] unsigned int 
  9635 ;; Auto vars:     Size  Location     Type
  9636 ;;  expected        2   12[BANK0 ] unsigned int 
  9637 ;;  crccal          2   10[BANK0 ] unsigned int 
  9638 ;; Return value:  Size  Location     Type
  9639 ;;                  1    wreg      unsigned char 
  9640 ;; Registers used:
  9641 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9642 ;; Tracked objects:
  9643 ;;		On entry : 0/0
  9644 ;;		On exit  : 0/0
  9645 ;;		Unchanged: 0/0
  9646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9647 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9648 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9649 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9650 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9651 ;;Total ram usage:       10 bytes
  9652 ;; Hardware stack levels used:    1
  9653 ;; Hardware stack levels required when called:    2
  9654 ;; This function calls:
  9655 ;;		_crc_sum
  9656 ;;		_m_mem_cpy_len
  9657 ;; This function is called by:
  9658 ;;		_sys_data_init
  9659 ;;		_modbus_response_process
  9660 ;; This function uses a non-reentrant model
  9661 ;;
  9662                           
  9663                           
  9664                           ;psect for function _crc_verify
  9665  1E56                     _crc_verify:	
  9666                           
  9667                           ;crc16.c: 137: uint16_t expected,crccal;;crc16.c: 138: m_mem_cpy_len((uint8_t*)(&expecte
      +                          d),(message+n-2),2);
  9668                           
  9669                           ;incstack = 0
  9670                           ; Regs used in _crc_verify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9671  1E56  302C               	movlw	low crc_verify@expected
  9672  1E57  00F1               	movwf	m_mem_cpy_len@d
  9673  1E58  3000               	movlw	high crc_verify@expected
  9674  1E59  00F2               	movwf	m_mem_cpy_len@d+1
  9675  1E5A  0020               	movlb	0	; select bank0
  9676  1E5B  0828               	movf	crc_verify@n,w
  9677  1E5C  0726               	addwf	crc_verify@message,w
  9678  1E5D  00F8               	movwf	??_crc_verify
  9679  1E5E  0829               	movf	crc_verify@n+1,w
  9680  1E5F  3D27               	addwfc	crc_verify@message+1,w
  9681  1E60  00F9               	movwf	??_crc_verify+1
  9682  1E61  0878               	movf	??_crc_verify,w
  9683  1E62  3EFE               	addlw	254
  9684  1E63  00F3               	movwf	m_mem_cpy_len@s
  9685  1E64  30FF               	movlw	255
  9686  1E65  3D79               	addwfc	??_crc_verify+1,w
  9687  1E66  00F4               	movwf	m_mem_cpy_len@s+1
  9688  1E67  3002               	movlw	2
  9689  1E68  00F5               	movwf	m_mem_cpy_len@len
  9690  1E69  3000               	movlw	0
  9691  1E6A  00F6               	movwf	m_mem_cpy_len@len+1
  9692  1E6B  319D  256C  319E   	fcall	_m_mem_cpy_len
  9693                           
  9694                           ;crc16.c: 139: crccal=crc_sum(message,n - 2);
  9695  1E6E  0020               	movlb	0	; select bank0
  9696  1E6F  0827               	movf	crc_verify@message+1,w
  9697  1E70  00F2               	movwf	crc_sum@buf+1
  9698  1E71  0826               	movf	crc_verify@message,w
  9699  1E72  00F1               	movwf	crc_sum@buf
  9700  1E73  0828               	movf	crc_verify@n,w
  9701  1E74  3EFE               	addlw	254
  9702  1E75  00F3               	movwf	crc_sum@len
  9703  1E76  30FF               	movlw	255
  9704  1E77  3D29               	addwfc	crc_verify@n+1,w
  9705  1E78  00F4               	movwf	crc_sum@len+1
  9706  1E79  3191  21A3  319E   	fcall	_crc_sum
  9707  1E7C  0872               	movf	?_crc_sum+1,w
  9708  1E7D  0020               	movlb	0	; select bank0
  9709  1E7E  00AB               	movwf	crc_verify@crccal+1
  9710  1E7F  0871               	movf	?_crc_sum,w
  9711  1E80  00AA               	movwf	crc_verify@crccal
  9712                           
  9713                           ;crc16.c: 140: if(expected!=crccal)return 0;
  9714  1E81  082B               	movf	crc_verify@crccal+1,w
  9715  1E82  062D               	xorwf	crc_verify@expected+1,w
  9716  1E83  1D03               	skipz
  9717  1E84  2E87               	goto	u4195
  9718  1E85  082A               	movf	crc_verify@crccal,w
  9719  1E86  062C               	xorwf	crc_verify@expected,w
  9720  1E87                     u4195:	
  9721  1E87  1903               	skipnz
  9722  1E88  2E8B               	goto	l4879
  9723  1E89  3000               	movlw	0
  9724  1E8A  0008               	return
  9725  1E8B                     l4879:	
  9726                           
  9727                           ;crc16.c: 141: return 1;
  9728  1E8B  3001               	movlw	1
  9729  1E8C  0008               	return
  9730  1E8D                     __end_of_crc_verify:	
  9731                           
  9732                           	psect	text26
  9733  1D6C                     __ptext26:	
  9734 ;; *************** function _m_mem_cpy_len *****************
  9735 ;; Defined at:
  9736 ;;		line 50 in file "src/depend/m_string.c"
  9737 ;; Parameters:    Size  Location     Type
  9738 ;;  d               2    1[COMMON] PTR unsigned char 
  9739 ;;		 -> crc_verify@expected(2), modbusBuf(32), txBuf(64), 
  9740 ;;  s               2    3[COMMON] PTR unsigned char 
  9741 ;;		 -> modbusBuf(32), sysData(132), eusartRxBuffer(32), 
  9742 ;;  len             2    5[COMMON] unsigned int 
  9743 ;; Auto vars:     Size  Location     Type
  9744 ;;		None
  9745 ;; Return value:  Size  Location     Type
  9746 ;;                  1    wreg      void 
  9747 ;; Registers used:
  9748 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9749 ;; Tracked objects:
  9750 ;;		On entry : 0/0
  9751 ;;		On exit  : 0/0
  9752 ;;		Unchanged: 0/0
  9753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9754 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9756 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9757 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9758 ;;Total ram usage:        7 bytes
  9759 ;; Hardware stack levels used:    1
  9760 ;; Hardware stack levels required when called:    1
  9761 ;; This function calls:
  9762 ;;		Nothing
  9763 ;; This function is called by:
  9764 ;;		_uart_send_len
  9765 ;;		_main
  9766 ;;		_crc_verify
  9767 ;; This function uses a non-reentrant model
  9768 ;;
  9769                           
  9770                           
  9771                           ;psect for function _m_mem_cpy_len
  9772  1D6C                     _m_mem_cpy_len:	
  9773  1D6C                     l4823:	
  9774                           ;m_string.c: 53: while(len)
  9775                           
  9776                           ;incstack = 0
  9777                           ; Regs used in _m_mem_cpy_len: [wreg+fsr1l+fsr1h+status,2+status,0]
  9778                           
  9779  1D6C  0875               	movf	m_mem_cpy_len@len,w
  9780  1D6D  0476               	iorwf	m_mem_cpy_len@len+1,w
  9781  1D6E  1903               	btfsc	3,2
  9782  1D6F  0008               	return
  9783                           
  9784                           ;m_string.c: 54: {;m_string.c: 55: *d++=*s++;
  9785  1D70  0873               	movf	m_mem_cpy_len@s,w
  9786  1D71  0086               	movwf	6
  9787  1D72  0874               	movf	m_mem_cpy_len@s+1,w
  9788  1D73  0087               	movwf	7
  9789  1D74  0801               	movf	1,w
  9790  1D75  00F7               	movwf	??_m_mem_cpy_len
  9791  1D76  0871               	movf	m_mem_cpy_len@d,w
  9792  1D77  0086               	movwf	6
  9793  1D78  0872               	movf	m_mem_cpy_len@d+1,w
  9794  1D79  0087               	movwf	7
  9795  1D7A  0877               	movf	??_m_mem_cpy_len,w
  9796  1D7B  0081               	movwf	1
  9797  1D7C  3001               	movlw	1
  9798  1D7D  07F3               	addwf	m_mem_cpy_len@s,f
  9799  1D7E  3000               	movlw	0
  9800  1D7F  3DF4               	addwfc	m_mem_cpy_len@s+1,f
  9801  1D80  3001               	movlw	1
  9802  1D81  07F1               	addwf	m_mem_cpy_len@d,f
  9803  1D82  3000               	movlw	0
  9804  1D83  3DF2               	addwfc	m_mem_cpy_len@d+1,f
  9805                           
  9806                           ;m_string.c: 56: len--;
  9807  1D84  3001               	movlw	1
  9808  1D85  02F5               	subwf	m_mem_cpy_len@len,f
  9809  1D86  3000               	movlw	0
  9810  1D87  3BF6               	subwfb	m_mem_cpy_len@len+1,f
  9811  1D88  2D6C               	goto	l4823
  9812  1D89                     __end_of_m_mem_cpy_len:	
  9813                           
  9814                           	psect	text27
  9815  11A3                     __ptext27:	
  9816 ;; *************** function _crc_sum *****************
  9817 ;; Defined at:
  9818 ;;		line 116 in file "src/depend/crc16.c"
  9819 ;; Parameters:    Size  Location     Type
  9820 ;;  buf             2    1[COMMON] PTR unsigned char 
  9821 ;;		 -> modbusBuf(32), sysData(132), 
  9822 ;;  len             2    3[COMMON] unsigned int 
  9823 ;; Auto vars:     Size  Location     Type
  9824 ;;  crc             2    4[BANK0 ] unsigned int 
  9825 ;;  i               2    2[BANK0 ] unsigned int 
  9826 ;;  j               2    0[BANK0 ] unsigned int 
  9827 ;; Return value:  Size  Location     Type
  9828 ;;                  2    1[COMMON] unsigned int 
  9829 ;; Registers used:
  9830 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9831 ;; Tracked objects:
  9832 ;;		On entry : 0/0
  9833 ;;		On exit  : 0/0
  9834 ;;		Unchanged: 0/0
  9835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9836 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9837 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9838 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9839 ;;      Totals:         6       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9840 ;;Total ram usage:       12 bytes
  9841 ;; Hardware stack levels used:    1
  9842 ;; Hardware stack levels required when called:    1
  9843 ;; This function calls:
  9844 ;;		Nothing
  9845 ;; This function is called by:
  9846 ;;		_crc_verify
  9847 ;;		_crc_append
  9848 ;; This function uses a non-reentrant model
  9849 ;;
  9850                           
  9851                           
  9852                           ;psect for function _crc_sum
  9853  11A3                     _crc_sum:	
  9854                           
  9855                           ;crc16.c: 118: uint16_t crc=0xFFFF;
  9856                           
  9857                           ;incstack = 0
  9858                           ; Regs used in _crc_sum: [wreg+fsr1l+fsr1h+status,2+status,0]
  9859  11A3  30FF               	movlw	255
  9860  11A4  0020               	movlb	0	; select bank0
  9861  11A5  00A4               	movwf	crc_sum@crc
  9862  11A6  30FF               	movlw	255
  9863  11A7  00A5               	movwf	crc_sum@crc+1
  9864                           
  9865                           ;crc16.c: 119: uint16_t i, j;;crc16.c: 120: for ( j=0; j<len;j++){
  9866  11A8  01A0               	clrf	crc_sum@j
  9867  11A9  01A1               	clrf	crc_sum@j+1
  9868  11AA                     l1070:	
  9869  11AA  0874               	movf	crc_sum@len+1,w
  9870  11AB  0221               	subwf	crc_sum@j+1,w
  9871  11AC  1D03               	skipz
  9872  11AD  29B0               	goto	u4115
  9873  11AE  0873               	movf	crc_sum@len,w
  9874  11AF  0220               	subwf	crc_sum@j,w
  9875  11B0                     u4115:	
  9876  11B0  1803               	btfsc	3,0
  9877  11B1  29F4               	goto	l4809
  9878                           
  9879                           ;crc16.c: 121: crc=crc ^*buf++;
  9880  11B2  0871               	movf	crc_sum@buf,w
  9881  11B3  0086               	movwf	6
  9882  11B4  0872               	movf	crc_sum@buf+1,w
  9883  11B5  0087               	movwf	7
  9884  11B6  0824               	movf	crc_sum@crc,w
  9885  11B7  0601               	xorwf	1,w
  9886  11B8  00A4               	movwf	crc_sum@crc
  9887  11B9  0825               	movf	crc_sum@crc+1,w
  9888  11BA  00A5               	movwf	crc_sum@crc+1
  9889  11BB  3001               	movlw	1
  9890  11BC  07F1               	addwf	crc_sum@buf,f
  9891  11BD  3000               	movlw	0
  9892  11BE  3DF2               	addwfc	crc_sum@buf+1,f
  9893                           
  9894                           ;crc16.c: 122: for ( i=0; i<8; i++){
  9895  11BF  01A2               	clrf	crc_sum@i
  9896  11C0  01A3               	clrf	crc_sum@i+1
  9897  11C1  3000               	movlw	0
  9898  11C2  0223               	subwf	crc_sum@i+1,w
  9899  11C3  3008               	movlw	8
  9900  11C4  1903               	skipnz
  9901  11C5  0222               	subwf	crc_sum@i,w
  9902  11C6  1803               	btfsc	3,0
  9903  11C7  29EF               	goto	l4807
  9904  11C8                     l1072:	
  9905                           
  9906                           ;crc16.c: 124: if(crc&0x0001){
  9907  11C8  1C24               	btfss	crc_sum@crc,0
  9908  11C9  29DA               	goto	l4801
  9909                           
  9910                           ;crc16.c: 125: crc=crc>>1;
  9911  11CA  0825               	movf	crc_sum@crc+1,w
  9912  11CB  00F6               	movwf	??_crc_sum+1
  9913  11CC  0824               	movf	crc_sum@crc,w
  9914  11CD  00F5               	movwf	??_crc_sum
  9915  11CE  36F6               	lsrf	??_crc_sum+1,f
  9916  11CF  0CF5               	rrf	??_crc_sum,f
  9917  11D0  0875               	movf	??_crc_sum,w
  9918  11D1  00A4               	movwf	crc_sum@crc
  9919  11D2  0876               	movf	??_crc_sum+1,w
  9920  11D3  00A5               	movwf	crc_sum@crc+1
  9921                           
  9922                           ;crc16.c: 126: crc=crc^ 0xa001;
  9923  11D4  3001               	movlw	1
  9924  11D5  0624               	xorwf	crc_sum@crc,w
  9925  11D6  00A4               	movwf	crc_sum@crc
  9926  11D7  30A0               	movlw	160
  9927  11D8  0625               	xorwf	crc_sum@crc+1,w
  9928  11D9  29E3               	goto	L1
  9929  11DA                     l4801:	
  9930                           ;crc16.c: 127: }else{
  9931                           
  9932                           
  9933                           ;crc16.c: 128: crc=crc>>1;
  9934  11DA  0825               	movf	crc_sum@crc+1,w
  9935  11DB  00F6               	movwf	??_crc_sum+1
  9936  11DC  0824               	movf	crc_sum@crc,w
  9937  11DD  00F5               	movwf	??_crc_sum
  9938  11DE  36F6               	lsrf	??_crc_sum+1,f
  9939  11DF  0CF5               	rrf	??_crc_sum,f
  9940  11E0  0875               	movf	??_crc_sum,w
  9941  11E1  00A4               	movwf	crc_sum@crc
  9942  11E2  0876               	movf	??_crc_sum+1,w
  9943  11E3                     L1:	
  9944  11E3  00A5               	movwf	crc_sum@crc+1
  9945  11E4  3001               	movlw	1
  9946  11E5  07A2               	addwf	crc_sum@i,f
  9947  11E6  3000               	movlw	0
  9948  11E7  3DA3               	addwfc	crc_sum@i+1,f
  9949  11E8  3000               	movlw	0
  9950  11E9  0223               	subwf	crc_sum@i+1,w
  9951  11EA  3008               	movlw	8
  9952  11EB  1903               	skipnz
  9953  11EC  0222               	subwf	crc_sum@i,w
  9954  11ED  1C03               	skipc
  9955  11EE  29C8               	goto	l1072
  9956  11EF                     l4807:	
  9957  11EF  3001               	movlw	1
  9958  11F0  07A0               	addwf	crc_sum@j,f
  9959  11F1  3000               	movlw	0
  9960  11F2  3DA1               	addwfc	crc_sum@j+1,f
  9961  11F3  29AA               	goto	l1070
  9962  11F4                     l4809:	
  9963                           
  9964                           ;crc16.c: 129: };crc16.c: 130: };crc16.c: 132: };crc16.c: 133: return ( crc);
  9965  11F4  0825               	movf	crc_sum@crc+1,w
  9966  11F5  00F2               	movwf	?_crc_sum+1
  9967  11F6  0824               	movf	crc_sum@crc,w
  9968  11F7  00F1               	movwf	?_crc_sum
  9969  11F8  0008               	return
  9970  11F9                     __end_of_crc_sum:	
  9971                           
  9972                           	psect	text28
  9973  1439                     __ptext28:	
  9974 ;; *************** function _calc_temp_rs *****************
  9975 ;; Defined at:
  9976 ;;		line 216 in file "src/api/sample.c"
  9977 ;; Parameters:    Size  Location     Type
  9978 ;;		None
  9979 ;; Auto vars:     Size  Location     Type
  9980 ;;		None
  9981 ;; Return value:  Size  Location     Type
  9982 ;;                  4    5[BANK0 ] unsigned long 
  9983 ;; Registers used:
  9984 ;;		wreg, status,2, status,0, pclath, cstack
  9985 ;; Tracked objects:
  9986 ;;		On entry : 0/0
  9987 ;;		On exit  : 0/0
  9988 ;;		Unchanged: 0/0
  9989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9990 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9992 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9993 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9994 ;;Total ram usage:        8 bytes
  9995 ;; Hardware stack levels used:    1
  9996 ;; Hardware stack levels required when called:    2
  9997 ;; This function calls:
  9998 ;;		___lldiv
  9999 ;;		___lmul
 10000 ;; This function is called by:
 10001 ;;		_main
 10002 ;; This function uses a non-reentrant model
 10003 ;;
 10004                           
 10005                           
 10006                           ;psect for function _calc_temp_rs
 10007  1439                     _calc_temp_rs:	
 10008                           
 10009                           ;sample.c: 230: y32=12000UL;
 10010                           
 10011                           ;incstack = 0
 10012                           ; Regs used in _calc_temp_rs: [wreg+status,2+status,0+pclath+cstack]
 10013  1439  3000               	movlw	0
 10014  143A  0020               	movlb	0	; select bank0
 10015  143B  00CA               	movwf	_y32+3
 10016  143C  3000               	movlw	0
 10017  143D  00C9               	movwf	_y32+2
 10018  143E  302E               	movlw	46
 10019  143F  00C8               	movwf	_y32+1
 10020  1440  30E0               	movlw	224
 10021  1441  00C7               	movwf	_y32
 10022                           
 10023                           ;sample.c: 231: y32=y32*rtAdcValueRsHi;
 10024  1442  085D               	movf	_rtAdcValueRsHi,w
 10025  1443  00F1               	movwf	___lmul@multiplier
 10026  1444  085E               	movf	_rtAdcValueRsHi+1,w
 10027  1445  00F2               	movwf	___lmul@multiplier+1
 10028  1446  01F3               	clrf	___lmul@multiplier+2
 10029  1447  01F4               	clrf	___lmul@multiplier+3
 10030  1448  084A               	movf	_y32+3,w
 10031  1449  00F8               	movwf	___lmul@multiplicand+3
 10032  144A  0849               	movf	_y32+2,w
 10033  144B  00F7               	movwf	___lmul@multiplicand+2
 10034  144C  0848               	movf	_y32+1,w
 10035  144D  00F6               	movwf	___lmul@multiplicand+1
 10036  144E  0847               	movf	_y32,w
 10037  144F  00F5               	movwf	___lmul@multiplicand
 10038  1450  319D  25BA  3194   	fcall	___lmul
 10039  1453  0874               	movf	?___lmul+3,w
 10040  1454  0020               	movlb	0	; select bank0
 10041  1455  00CA               	movwf	_y32+3
 10042  1456  0873               	movf	?___lmul+2,w
 10043  1457  00C9               	movwf	_y32+2
 10044  1458  0872               	movf	?___lmul+1,w
 10045  1459  00C8               	movwf	_y32+1
 10046  145A  0871               	movf	?___lmul,w
 10047  145B  00C7               	movwf	_y32
 10048                           
 10049                           ;sample.c: 232: x32=rtAdcValueRsLo;
 10050  145C  085F               	movf	_rtAdcValueRsLo,w
 10051  145D  0021               	movlb	1	; select bank1
 10052  145E  00B8               	movwf	_x32^(0+128)
 10053  145F  0020               	movlb	0	; select bank0
 10054  1460  0860               	movf	_rtAdcValueRsLo+1,w
 10055  1461  0021               	movlb	1	; select bank1
 10056  1462  00B9               	movwf	(_x32^(0+128)+1)
 10057  1463  01BA               	clrf	(_x32^(0+128)+2)
 10058  1464  01BB               	clrf	(_x32^(0+128)+3)
 10059                           
 10060                           ;sample.c: 233: y32=y32/x32;
 10061  1465  083B               	movf	(_x32+3)^(0+128),w
 10062  1466  00F4               	movwf	___lldiv@divisor+3
 10063  1467  083A               	movf	(_x32+2)^(0+128),w
 10064  1468  00F3               	movwf	___lldiv@divisor+2
 10065  1469  0839               	movf	(_x32+1)^(0+128),w
 10066  146A  00F2               	movwf	___lldiv@divisor+1
 10067  146B  0838               	movf	_x32^(0+128),w
 10068  146C  00F1               	movwf	___lldiv@divisor
 10069  146D  0020               	movlb	0	; select bank0
 10070  146E  084A               	movf	_y32+3,w
 10071  146F  00F8               	movwf	___lldiv@dividend+3
 10072  1470  0849               	movf	_y32+2,w
 10073  1471  00F7               	movwf	___lldiv@dividend+2
 10074  1472  0848               	movf	_y32+1,w
 10075  1473  00F6               	movwf	___lldiv@dividend+1
 10076  1474  0847               	movf	_y32,w
 10077  1475  00F5               	movwf	___lldiv@dividend
 10078  1476  3190  20FC  3194   	fcall	___lldiv
 10079  1479  0874               	movf	?___lldiv+3,w
 10080  147A  0020               	movlb	0	; select bank0
 10081  147B  00CA               	movwf	_y32+3
 10082  147C  0873               	movf	?___lldiv+2,w
 10083  147D  00C9               	movwf	_y32+2
 10084  147E  0872               	movf	?___lldiv+1,w
 10085  147F  00C8               	movwf	_y32+1
 10086  1480  0871               	movf	?___lldiv,w
 10087  1481  00C7               	movwf	_y32
 10088                           
 10089                           ;sample.c: 234: if(y32<2000)y32=2000;
 10090  1482  084A               	movf	_y32+3,w
 10091  1483  1D03               	btfss	3,2
 10092  1484  2C96               	goto	l5117
 10093  1485  0849               	movf	_y32+2,w
 10094  1486  1D03               	btfss	3,2
 10095  1487  2C96               	goto	l5117
 10096  1488  30D0               	movlw	208
 10097  1489  0247               	subwf	_y32,w
 10098  148A  3007               	movlw	7
 10099  148B  3B48               	subwfb	_y32+1,w
 10100  148C  1803               	btfsc	3,0
 10101  148D  2C96               	goto	l5117
 10102  148E  3000               	movlw	0
 10103  148F  00CA               	movwf	_y32+3
 10104  1490  3000               	movlw	0
 10105  1491  00C9               	movwf	_y32+2
 10106  1492  3007               	movlw	7
 10107  1493  00C8               	movwf	_y32+1
 10108  1494  30D0               	movlw	208
 10109  1495  00C7               	movwf	_y32
 10110  1496                     l5117:	
 10111                           
 10112                           ;sample.c: 235: if(y32>25000)y32=25000;
 10113  1496  084A               	movf	_y32+3,w
 10114  1497  1D03               	btfss	3,2
 10115  1498  2CA2               	goto	l5119
 10116  1499  0849               	movf	_y32+2,w
 10117  149A  1D03               	btfss	3,2
 10118  149B  2CA2               	goto	l5119
 10119  149C  30A9               	movlw	169
 10120  149D  0247               	subwf	_y32,w
 10121  149E  3061               	movlw	97
 10122  149F  3B48               	subwfb	_y32+1,w
 10123  14A0  1C03               	btfss	3,0
 10124  14A1  2CAA               	goto	l647
 10125  14A2                     l5119:	
 10126  14A2  3000               	movlw	0
 10127  14A3  00CA               	movwf	_y32+3
 10128  14A4  3000               	movlw	0
 10129  14A5  00C9               	movwf	_y32+2
 10130  14A6  3061               	movlw	97
 10131  14A7  00C8               	movwf	_y32+1
 10132  14A8  30A8               	movlw	168
 10133  14A9  00C7               	movwf	_y32
 10134  14AA                     l647:	
 10135                           
 10136                           ;sample.c: 236: y32=y32-1000;
 10137  14AA  3018               	movlw	24
 10138  14AB  00A9               	movwf	??_calc_temp_rs
 10139  14AC  30FC               	movlw	252
 10140  14AD  00AA               	movwf	??_calc_temp_rs+1
 10141  14AE  30FF               	movlw	255
 10142  14AF  00AB               	movwf	??_calc_temp_rs+2
 10143  14B0  30FF               	movlw	255
 10144  14B1  00AC               	movwf	??_calc_temp_rs+3
 10145  14B2  0847               	movf	_y32,w
 10146  14B3  07A9               	addwf	??_calc_temp_rs,f
 10147  14B4  0848               	movf	_y32+1,w
 10148  14B5  3DAA               	addwfc	??_calc_temp_rs+1,f
 10149  14B6  0849               	movf	_y32+2,w
 10150  14B7  3DAB               	addwfc	??_calc_temp_rs+2,f
 10151  14B8  084A               	movf	_y32+3,w
 10152  14B9  3DAC               	addwfc	??_calc_temp_rs+3,f
 10153  14BA  082C               	movf	??_calc_temp_rs+3,w
 10154  14BB  00CA               	movwf	_y32+3
 10155  14BC  082B               	movf	??_calc_temp_rs+2,w
 10156  14BD  00C9               	movwf	_y32+2
 10157  14BE  082A               	movf	??_calc_temp_rs+1,w
 10158  14BF  00C8               	movwf	_y32+1
 10159  14C0  0829               	movf	??_calc_temp_rs,w
 10160  14C1  00C7               	movwf	_y32
 10161                           
 10162                           ;sample.c: 237: return (uint16_t)y32;
 10163  14C2  0847               	movf	_y32,w
 10164  14C3  00A5               	movwf	?_calc_temp_rs
 10165  14C4  0848               	movf	_y32+1,w
 10166  14C5  00A6               	movwf	?_calc_temp_rs+1
 10167  14C6  01A7               	clrf	?_calc_temp_rs+2
 10168  14C7  01A8               	clrf	?_calc_temp_rs+3
 10169  14C8  0008               	return
 10170  14C9                     __end_of_calc_temp_rs:	
 10171                           
 10172                           	psect	text29
 10173  162E                     __ptext29:	
 10174 ;; *************** function _calc_temp_rc *****************
 10175 ;; Defined at:
 10176 ;;		line 240 in file "src/api/sample.c"
 10177 ;; Parameters:    Size  Location     Type
 10178 ;;		None
 10179 ;; Auto vars:     Size  Location     Type
 10180 ;;		None
 10181 ;; Return value:  Size  Location     Type
 10182 ;;                  4    5[BANK0 ] unsigned long 
 10183 ;; Registers used:
 10184 ;;		wreg, status,2, status,0, pclath, cstack
 10185 ;; Tracked objects:
 10186 ;;		On entry : 0/0
 10187 ;;		On exit  : 0/0
 10188 ;;		Unchanged: 0/0
 10189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10190 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10192 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10193 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10194 ;;Total ram usage:       12 bytes
 10195 ;; Hardware stack levels used:    1
 10196 ;; Hardware stack levels required when called:    2
 10197 ;; This function calls:
 10198 ;;		___lldiv
 10199 ;;		___lmul
 10200 ;; This function is called by:
 10201 ;;		_main
 10202 ;; This function uses a non-reentrant model
 10203 ;;
 10204                           
 10205                           
 10206                           ;psect for function _calc_temp_rc
 10207  162E                     _calc_temp_rc:	
 10208                           
 10209                           ;sample.c: 244: x32=300000UL;
 10210                           
 10211                           ;incstack = 0
 10212                           ; Regs used in _calc_temp_rc: [wreg+status,2+status,0+pclath+cstack]
 10213  162E  3000               	movlw	0
 10214  162F  0021               	movlb	1	; select bank1
 10215  1630  00BB               	movwf	(_x32+3)^(0+128)
 10216  1631  3004               	movlw	4
 10217  1632  00BA               	movwf	(_x32+2)^(0+128)
 10218  1633  3093               	movlw	147
 10219  1634  00B9               	movwf	(_x32+1)^(0+128)
 10220  1635  30E0               	movlw	224
 10221  1636  00B8               	movwf	_x32^(0+128)
 10222                           
 10223                           ;sample.c: 245: x32=x32*rtAdcValueRcLo;
 10224  1637  0020               	movlb	0	; select bank0
 10225  1638  085B               	movf	_rtAdcValueRcLo,w
 10226  1639  00F1               	movwf	___lmul@multiplier
 10227  163A  085C               	movf	_rtAdcValueRcLo+1,w
 10228  163B  00F2               	movwf	___lmul@multiplier+1
 10229  163C  01F3               	clrf	___lmul@multiplier+2
 10230  163D  01F4               	clrf	___lmul@multiplier+3
 10231  163E  0021               	movlb	1	; select bank1
 10232  163F  083B               	movf	(_x32+3)^(0+128),w
 10233  1640  00F8               	movwf	___lmul@multiplicand+3
 10234  1641  083A               	movf	(_x32+2)^(0+128),w
 10235  1642  00F7               	movwf	___lmul@multiplicand+2
 10236  1643  0839               	movf	(_x32+1)^(0+128),w
 10237  1644  00F6               	movwf	___lmul@multiplicand+1
 10238  1645  0838               	movf	_x32^(0+128),w
 10239  1646  00F5               	movwf	___lmul@multiplicand
 10240  1647  319D  25BA  3196   	fcall	___lmul
 10241  164A  0874               	movf	?___lmul+3,w
 10242  164B  0021               	movlb	1	; select bank1
 10243  164C  00BB               	movwf	(_x32+3)^(0+128)
 10244  164D  0873               	movf	?___lmul+2,w
 10245  164E  00BA               	movwf	(_x32+2)^(0+128)
 10246  164F  0872               	movf	?___lmul+1,w
 10247  1650  00B9               	movwf	(_x32+1)^(0+128)
 10248  1651  0871               	movf	?___lmul,w
 10249  1652  00B8               	movwf	_x32^(0+128)
 10250                           
 10251                           ;sample.c: 248: y32=rtAdcValueRcHi;
 10252  1653  0020               	movlb	0	; select bank0
 10253  1654  0859               	movf	_rtAdcValueRcHi,w
 10254  1655  00C7               	movwf	_y32
 10255  1656  085A               	movf	_rtAdcValueRcHi+1,w
 10256  1657  00C8               	movwf	_y32+1
 10257  1658  01C9               	clrf	_y32+2
 10258  1659  01CA               	clrf	_y32+3
 10259                           
 10260                           ;sample.c: 249: y32=y32*3100;
 10261  165A  084A               	movf	_y32+3,w
 10262  165B  00F4               	movwf	___lmul@multiplier+3
 10263  165C  0849               	movf	_y32+2,w
 10264  165D  00F3               	movwf	___lmul@multiplier+2
 10265  165E  0848               	movf	_y32+1,w
 10266  165F  00F2               	movwf	___lmul@multiplier+1
 10267  1660  0847               	movf	_y32,w
 10268  1661  00F1               	movwf	___lmul@multiplier
 10269  1662  3000               	movlw	0
 10270  1663  00F8               	movwf	___lmul@multiplicand+3
 10271  1664  3000               	movlw	0
 10272  1665  00F7               	movwf	___lmul@multiplicand+2
 10273  1666  300C               	movlw	12
 10274  1667  00F6               	movwf	___lmul@multiplicand+1
 10275  1668  301C               	movlw	28
 10276  1669  00F5               	movwf	___lmul@multiplicand
 10277  166A  319D  25BA  3196   	fcall	___lmul
 10278  166D  0874               	movf	?___lmul+3,w
 10279  166E  0020               	movlb	0	; select bank0
 10280  166F  00CA               	movwf	_y32+3
 10281  1670  0873               	movf	?___lmul+2,w
 10282  1671  00C9               	movwf	_y32+2
 10283  1672  0872               	movf	?___lmul+1,w
 10284  1673  00C8               	movwf	_y32+1
 10285  1674  0871               	movf	?___lmul,w
 10286  1675  00C7               	movwf	_y32
 10287                           
 10288                           ;sample.c: 250: y32=y32/100;
 10289  1676  3000               	movlw	0
 10290  1677  00F4               	movwf	___lldiv@divisor+3
 10291  1678  3000               	movlw	0
 10292  1679  00F3               	movwf	___lldiv@divisor+2
 10293  167A  3000               	movlw	0
 10294  167B  00F2               	movwf	___lldiv@divisor+1
 10295  167C  3064               	movlw	100
 10296  167D  00F1               	movwf	___lldiv@divisor
 10297  167E  084A               	movf	_y32+3,w
 10298  167F  00F8               	movwf	___lldiv@dividend+3
 10299  1680  0849               	movf	_y32+2,w
 10300  1681  00F7               	movwf	___lldiv@dividend+2
 10301  1682  0848               	movf	_y32+1,w
 10302  1683  00F6               	movwf	___lldiv@dividend+1
 10303  1684  0847               	movf	_y32,w
 10304  1685  00F5               	movwf	___lldiv@dividend
 10305  1686  3190  20FC  3196   	fcall	___lldiv
 10306  1689  0874               	movf	?___lldiv+3,w
 10307  168A  0020               	movlb	0	; select bank0
 10308  168B  00CA               	movwf	_y32+3
 10309  168C  0873               	movf	?___lldiv+2,w
 10310  168D  00C9               	movwf	_y32+2
 10311  168E  0872               	movf	?___lldiv+1,w
 10312  168F  00C8               	movwf	_y32+1
 10313  1690  0871               	movf	?___lldiv,w
 10314  1691  00C7               	movwf	_y32
 10315                           
 10316                           ;sample.c: 251: y32=y32-rtAdcValueRcLo;
 10317  1692  0847               	movf	_y32,w
 10318  1693  00A9               	movwf	??_calc_temp_rc
 10319  1694  0848               	movf	_y32+1,w
 10320  1695  00AA               	movwf	??_calc_temp_rc+1
 10321  1696  0849               	movf	_y32+2,w
 10322  1697  00AB               	movwf	??_calc_temp_rc+2
 10323  1698  084A               	movf	_y32+3,w
 10324  1699  00AC               	movwf	??_calc_temp_rc+3
 10325  169A  085B               	movf	_rtAdcValueRcLo,w
 10326  169B  00AD               	movwf	??_calc_temp_rc+4
 10327  169C  085C               	movf	_rtAdcValueRcLo+1,w
 10328  169D  00AE               	movwf	??_calc_temp_rc+5
 10329  169E  01AF               	clrf	??_calc_temp_rc+6
 10330  169F  01B0               	clrf	??_calc_temp_rc+7
 10331  16A0  09AD               	comf	??_calc_temp_rc+4,f
 10332  16A1  09AE               	comf	??_calc_temp_rc+5,f
 10333  16A2  09AF               	comf	??_calc_temp_rc+6,f
 10334  16A3  09B0               	comf	??_calc_temp_rc+7,f
 10335  16A4  0AAD               	incf	??_calc_temp_rc+4,f
 10336  16A5  1903               	skipnz
 10337  16A6  0AAE               	incf	??_calc_temp_rc+5,f
 10338  16A7  1903               	skipnz
 10339  16A8  0AAF               	incf	??_calc_temp_rc+6,f
 10340  16A9  1903               	skipnz
 10341  16AA  0AB0               	incf	??_calc_temp_rc+7,f
 10342  16AB  082D               	movf	??_calc_temp_rc+4,w
 10343  16AC  07A9               	addwf	??_calc_temp_rc,f
 10344  16AD  082E               	movf	??_calc_temp_rc+5,w
 10345  16AE  3DAA               	addwfc	??_calc_temp_rc+1,f
 10346  16AF  082F               	movf	??_calc_temp_rc+6,w
 10347  16B0  3DAB               	addwfc	??_calc_temp_rc+2,f
 10348  16B1  0830               	movf	??_calc_temp_rc+7,w
 10349  16B2  3DAC               	addwfc	??_calc_temp_rc+3,f
 10350  16B3  082C               	movf	??_calc_temp_rc+3,w
 10351  16B4  00CA               	movwf	_y32+3
 10352  16B5  082B               	movf	??_calc_temp_rc+2,w
 10353  16B6  00C9               	movwf	_y32+2
 10354  16B7  082A               	movf	??_calc_temp_rc+1,w
 10355  16B8  00C8               	movwf	_y32+1
 10356  16B9  0829               	movf	??_calc_temp_rc,w
 10357  16BA  00C7               	movwf	_y32
 10358                           
 10359                           ;sample.c: 254: y32=x32/y32;
 10360  16BB  084A               	movf	_y32+3,w
 10361  16BC  00F4               	movwf	___lldiv@divisor+3
 10362  16BD  0849               	movf	_y32+2,w
 10363  16BE  00F3               	movwf	___lldiv@divisor+2
 10364  16BF  0848               	movf	_y32+1,w
 10365  16C0  00F2               	movwf	___lldiv@divisor+1
 10366  16C1  0847               	movf	_y32,w
 10367  16C2  00F1               	movwf	___lldiv@divisor
 10368  16C3  0021               	movlb	1	; select bank1
 10369  16C4  083B               	movf	(_x32+3)^(0+128),w
 10370  16C5  00F8               	movwf	___lldiv@dividend+3
 10371  16C6  083A               	movf	(_x32+2)^(0+128),w
 10372  16C7  00F7               	movwf	___lldiv@dividend+2
 10373  16C8  0839               	movf	(_x32+1)^(0+128),w
 10374  16C9  00F6               	movwf	___lldiv@dividend+1
 10375  16CA  0838               	movf	_x32^(0+128),w
 10376  16CB  00F5               	movwf	___lldiv@dividend
 10377  16CC  3190  20FC  3196   	fcall	___lldiv
 10378  16CF  0874               	movf	?___lldiv+3,w
 10379  16D0  0020               	movlb	0	; select bank0
 10380  16D1  00CA               	movwf	_y32+3
 10381  16D2  0873               	movf	?___lldiv+2,w
 10382  16D3  00C9               	movwf	_y32+2
 10383  16D4  0872               	movf	?___lldiv+1,w
 10384  16D5  00C8               	movwf	_y32+1
 10385  16D6  0871               	movf	?___lldiv,w
 10386  16D7  00C7               	movwf	_y32
 10387                           
 10388                           ;sample.c: 255: if(y32<2000)y32=2000;
 10389  16D8  084A               	movf	_y32+3,w
 10390  16D9  1D03               	btfss	3,2
 10391  16DA  2EEC               	goto	l5135
 10392  16DB  0849               	movf	_y32+2,w
 10393  16DC  1D03               	btfss	3,2
 10394  16DD  2EEC               	goto	l5135
 10395  16DE  30D0               	movlw	208
 10396  16DF  0247               	subwf	_y32,w
 10397  16E0  3007               	movlw	7
 10398  16E1  3B48               	subwfb	_y32+1,w
 10399  16E2  1803               	btfsc	3,0
 10400  16E3  2EEC               	goto	l5135
 10401  16E4  3000               	movlw	0
 10402  16E5  00CA               	movwf	_y32+3
 10403  16E6  3000               	movlw	0
 10404  16E7  00C9               	movwf	_y32+2
 10405  16E8  3007               	movlw	7
 10406  16E9  00C8               	movwf	_y32+1
 10407  16EA  30D0               	movlw	208
 10408  16EB  00C7               	movwf	_y32
 10409  16EC                     l5135:	
 10410                           
 10411                           ;sample.c: 256: if(y32>25000)y32=25000;
 10412  16EC  084A               	movf	_y32+3,w
 10413  16ED  1D03               	btfss	3,2
 10414  16EE  2EF8               	goto	l5137
 10415  16EF  0849               	movf	_y32+2,w
 10416  16F0  1D03               	btfss	3,2
 10417  16F1  2EF8               	goto	l5137
 10418  16F2  30A9               	movlw	169
 10419  16F3  0247               	subwf	_y32,w
 10420  16F4  3061               	movlw	97
 10421  16F5  3B48               	subwfb	_y32+1,w
 10422  16F6  1C03               	btfss	3,0
 10423  16F7  2F00               	goto	l652
 10424  16F8                     l5137:	
 10425  16F8  3000               	movlw	0
 10426  16F9  00CA               	movwf	_y32+3
 10427  16FA  3000               	movlw	0
 10428  16FB  00C9               	movwf	_y32+2
 10429  16FC  3061               	movlw	97
 10430  16FD  00C8               	movwf	_y32+1
 10431  16FE  30A8               	movlw	168
 10432  16FF  00C7               	movwf	_y32
 10433  1700                     l652:	
 10434                           
 10435                           ;sample.c: 258: return (uint16_t)y32;
 10436  1700  0847               	movf	_y32,w
 10437  1701  00A5               	movwf	?_calc_temp_rc
 10438  1702  0848               	movf	_y32+1,w
 10439  1703  00A6               	movwf	?_calc_temp_rc+1
 10440  1704  01A7               	clrf	?_calc_temp_rc+2
 10441  1705  01A8               	clrf	?_calc_temp_rc+3
 10442  1706  0008               	return
 10443  1707                     __end_of_calc_temp_rc:	
 10444                           
 10445                           	psect	text30
 10446  1256                     __ptext30:	
 10447 ;; *************** function _calc_rs_lo_avg *****************
 10448 ;; Defined at:
 10449 ;;		line 446 in file "src/api/sample.c"
 10450 ;; Parameters:    Size  Location     Type
 10451 ;;  x               2    5[BANK0 ] unsigned int 
 10452 ;; Auto vars:     Size  Location     Type
 10453 ;;  t32             4    7[BANK0 ] unsigned long 
 10454 ;;  i               1   11[BANK0 ] unsigned char 
 10455 ;; Return value:  Size  Location     Type
 10456 ;;                  2    5[BANK0 ] unsigned int 
 10457 ;; Registers used:
 10458 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10459 ;; Tracked objects:
 10460 ;;		On entry : 0/0
 10461 ;;		On exit  : 0/0
 10462 ;;		Unchanged: 0/0
 10463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10464 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10465 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10466 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10467 ;;      Totals:         2       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10468 ;;Total ram usage:        9 bytes
 10469 ;; Hardware stack levels used:    1
 10470 ;; Hardware stack levels required when called:    2
 10471 ;; This function calls:
 10472 ;;		___lldiv
 10473 ;; This function is called by:
 10474 ;;		_main
 10475 ;; This function uses a non-reentrant model
 10476 ;;
 10477                           
 10478                           
 10479                           ;psect for function _calc_rs_lo_avg
 10480  1256                     _calc_rs_lo_avg:	
 10481                           
 10482                           ;sample.c: 448: uint8_t i;;sample.c: 449: uint32_t t32=0;
 10483                           
 10484                           ;incstack = 0
 10485                           ; Regs used in _calc_rs_lo_avg: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10486  1256  3000               	movlw	0
 10487  1257  0020               	movlb	0	; select bank0
 10488  1258  00AA               	movwf	calc_rs_lo_avg@t32+3
 10489  1259  3000               	movlw	0
 10490  125A  00A9               	movwf	calc_rs_lo_avg@t32+2
 10491  125B  3000               	movlw	0
 10492  125C  00A8               	movwf	calc_rs_lo_avg@t32+1
 10493  125D  3000               	movlw	0
 10494  125E  00A7               	movwf	calc_rs_lo_avg@t32
 10495                           
 10496                           ;sample.c: 451: for(i=0;i<6-1;i++){
 10497  125F  01AB               	clrf	calc_rs_lo_avg@i
 10498  1260  3005               	movlw	5
 10499  1261  022B               	subwf	calc_rs_lo_avg@i,w
 10500  1262  1803               	btfsc	3,0
 10501  1263  2A88               	goto	l4317
 10502  1264                     l4309:	
 10503                           
 10504                           ;sample.c: 452: rsLoAvgBuf[i]=rsLoAvgBuf[i+1];
 10505  1264  352B               	lslf	calc_rs_lo_avg@i,w
 10506  1265  3E02               	addlw	2
 10507  1266  3EAC               	addlw	(low (_rsLoAvgBuf| 0))& (0+255)
 10508  1267  0086               	movwf	6
 10509  1268  0187               	clrf	7
 10510  1269  352B               	lslf	calc_rs_lo_avg@i,w
 10511  126A  3EAC               	addlw	(low (_rsLoAvgBuf| 0))& (0+255)
 10512  126B  0084               	movwf	4
 10513  126C  0185               	clrf	5
 10514  126D  3F40               	moviw [0]fsr1
 10515  126E  3F80               	movwi [0]fsr0
 10516  126F  3F41               	moviw [1]fsr1
 10517  1270  3F81               	movwi [1]fsr0
 10518                           
 10519                           ;sample.c: 453: t32+=((uint32_t)rsLoAvgBuf[i]);
 10520  1271  352B               	lslf	calc_rs_lo_avg@i,w
 10521  1272  3EAC               	addlw	(low (_rsLoAvgBuf| 0))& (0+255)
 10522  1273  0086               	movwf	6
 10523  1274  0187               	clrf	7
 10524  1275  3F40               	moviw [0]fsr1
 10525  1276  00FA               	movwf	??_calc_rs_lo_avg
 10526  1277  3F41               	moviw [1]fsr1
 10527  1278  00FB               	movwf	??_calc_rs_lo_avg+1
 10528  1279  087A               	movf	??_calc_rs_lo_avg,w
 10529  127A  07A7               	addwf	calc_rs_lo_avg@t32,f
 10530  127B  087B               	movf	??_calc_rs_lo_avg+1,w
 10531  127C  3DA8               	addwfc	calc_rs_lo_avg@t32+1,f
 10532  127D  3000               	movlw	0
 10533  127E  3DA9               	addwfc	calc_rs_lo_avg@t32+2,f
 10534  127F  3DAA               	addwfc	calc_rs_lo_avg@t32+3,f
 10535  1280  3001               	movlw	1
 10536  1281  00FA               	movwf	??_calc_rs_lo_avg
 10537  1282  087A               	movf	??_calc_rs_lo_avg,w
 10538  1283  07AB               	addwf	calc_rs_lo_avg@i,f
 10539  1284  3005               	movlw	5
 10540  1285  022B               	subwf	calc_rs_lo_avg@i,w
 10541  1286  1C03               	skipc
 10542  1287  2A64               	goto	l4309
 10543  1288                     l4317:	
 10544                           
 10545                           ;sample.c: 454: };sample.c: 455: rsLoAvgBuf[i]=x;
 10546  1288  352B               	lslf	calc_rs_lo_avg@i,w
 10547  1289  3EAC               	addlw	(low (_rsLoAvgBuf| 0))& (0+255)
 10548  128A  0086               	movwf	6
 10549  128B  0187               	clrf	7
 10550  128C  0825               	movf	calc_rs_lo_avg@x,w
 10551  128D  3FC0               	movwi [0]fsr1
 10552  128E  0826               	movf	calc_rs_lo_avg@x+1,w
 10553  128F  3FC1               	movwi [1]fsr1
 10554                           
 10555                           ;sample.c: 456: t32+=x;
 10556  1290  0825               	movf	calc_rs_lo_avg@x,w
 10557  1291  07A7               	addwf	calc_rs_lo_avg@t32,f
 10558  1292  0826               	movf	calc_rs_lo_avg@x+1,w
 10559  1293  3DA8               	addwfc	calc_rs_lo_avg@t32+1,f
 10560  1294  3000               	movlw	0
 10561  1295  3DA9               	addwfc	calc_rs_lo_avg@t32+2,f
 10562  1296  3DAA               	addwfc	calc_rs_lo_avg@t32+3,f
 10563                           
 10564                           ;sample.c: 457: t32/=6;
 10565  1297  3000               	movlw	0
 10566  1298  00F4               	movwf	___lldiv@divisor+3
 10567  1299  3000               	movlw	0
 10568  129A  00F3               	movwf	___lldiv@divisor+2
 10569  129B  3000               	movlw	0
 10570  129C  00F2               	movwf	___lldiv@divisor+1
 10571  129D  3006               	movlw	6
 10572  129E  00F1               	movwf	___lldiv@divisor
 10573  129F  082A               	movf	calc_rs_lo_avg@t32+3,w
 10574  12A0  00F8               	movwf	___lldiv@dividend+3
 10575  12A1  0829               	movf	calc_rs_lo_avg@t32+2,w
 10576  12A2  00F7               	movwf	___lldiv@dividend+2
 10577  12A3  0828               	movf	calc_rs_lo_avg@t32+1,w
 10578  12A4  00F6               	movwf	___lldiv@dividend+1
 10579  12A5  0827               	movf	calc_rs_lo_avg@t32,w
 10580  12A6  00F5               	movwf	___lldiv@dividend
 10581  12A7  3190  20FC         	fcall	___lldiv
 10582  12A9  0874               	movf	?___lldiv+3,w
 10583  12AA  0020               	movlb	0	; select bank0
 10584  12AB  00AA               	movwf	calc_rs_lo_avg@t32+3
 10585  12AC  0873               	movf	?___lldiv+2,w
 10586  12AD  00A9               	movwf	calc_rs_lo_avg@t32+2
 10587  12AE  0872               	movf	?___lldiv+1,w
 10588  12AF  00A8               	movwf	calc_rs_lo_avg@t32+1
 10589  12B0  0871               	movf	?___lldiv,w
 10590  12B1  00A7               	movwf	calc_rs_lo_avg@t32
 10591                           
 10592                           ;sample.c: 458: return (uint16_t)t32;
 10593  12B2  0828               	movf	calc_rs_lo_avg@t32+1,w
 10594  12B3  00A6               	movwf	?_calc_rs_lo_avg+1
 10595  12B4  0827               	movf	calc_rs_lo_avg@t32,w
 10596  12B5  00A5               	movwf	?_calc_rs_lo_avg
 10597  12B6  0008               	return
 10598  12B7                     __end_of_calc_rs_lo_avg:	
 10599                           
 10600                           	psect	text31
 10601  10FC                     __ptext31:	
 10602 ;; *************** function ___lldiv *****************
 10603 ;; Defined at:
 10604 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
 10605 ;; Parameters:    Size  Location     Type
 10606 ;;  divisor         4    1[COMMON] unsigned long 
 10607 ;;  dividend        4    5[COMMON] unsigned long 
 10608 ;; Auto vars:     Size  Location     Type
 10609 ;;  quotient        4    0[BANK0 ] unsigned long 
 10610 ;;  counter         1    4[BANK0 ] unsigned char 
 10611 ;; Return value:  Size  Location     Type
 10612 ;;                  4    1[COMMON] unsigned long 
 10613 ;; Registers used:
 10614 ;;		wreg, status,2, status,0
 10615 ;; Tracked objects:
 10616 ;;		On entry : 0/0
 10617 ;;		On exit  : 0/0
 10618 ;;		Unchanged: 0/0
 10619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10620 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10621 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10622 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10623 ;;      Totals:         9       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10624 ;;Total ram usage:       14 bytes
 10625 ;; Hardware stack levels used:    1
 10626 ;; Hardware stack levels required when called:    1
 10627 ;; This function calls:
 10628 ;;		Nothing
 10629 ;; This function is called by:
 10630 ;;		_calc_temp_rs
 10631 ;;		_calc_temp_rc
 10632 ;;		_calc_rs_lo_avg
 10633 ;; This function uses a non-reentrant model
 10634 ;;
 10635                           
 10636                           
 10637                           ;psect for function ___lldiv
 10638  10FC                     ___lldiv:	
 10639                           
 10640                           ;incstack = 0
 10641                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 10642  10FC  3000               	movlw	0
 10643  10FD  0020               	movlb	0	; select bank0
 10644  10FE  00A3               	movwf	___lldiv@quotient+3
 10645  10FF  3000               	movlw	0
 10646  1100  00A2               	movwf	___lldiv@quotient+2
 10647  1101  3000               	movlw	0
 10648  1102  00A1               	movwf	___lldiv@quotient+1
 10649  1103  3000               	movlw	0
 10650  1104  00A0               	movwf	___lldiv@quotient
 10651  1105  0874               	movf	___lldiv@divisor+3,w
 10652  1106  0473               	iorwf	___lldiv@divisor+2,w
 10653  1107  0472               	iorwf	___lldiv@divisor+1,w
 10654  1108  0471               	iorwf	___lldiv@divisor,w
 10655  1109  1903               	skipnz
 10656  110A  2946               	goto	l4011
 10657  110B  01A4               	clrf	___lldiv@counter
 10658  110C  0AA4               	incf	___lldiv@counter,f
 10659  110D                     l3997:	
 10660  110D  1BF4               	btfsc	___lldiv@divisor+3,7
 10661  110E  291B               	goto	l3999
 10662  110F  3001               	movlw	1
 10663  1110                     u2865:	
 10664  1110  35F1               	lslf	___lldiv@divisor,f
 10665  1111  0DF2               	rlf	___lldiv@divisor+1,f
 10666  1112  0DF3               	rlf	___lldiv@divisor+2,f
 10667  1113  0DF4               	rlf	___lldiv@divisor+3,f
 10668  1114  0B89               	decfsz	9,f
 10669  1115  2910               	goto	u2865
 10670  1116  3001               	movlw	1
 10671  1117  00F9               	movwf	??___lldiv
 10672  1118  0879               	movf	??___lldiv,w
 10673  1119  07A4               	addwf	___lldiv@counter,f
 10674  111A  290D               	goto	l3997
 10675  111B                     l3999:	
 10676  111B  3001               	movlw	1
 10677  111C                     u2885:	
 10678  111C  35A0               	lslf	___lldiv@quotient,f
 10679  111D  0DA1               	rlf	___lldiv@quotient+1,f
 10680  111E  0DA2               	rlf	___lldiv@quotient+2,f
 10681  111F  0DA3               	rlf	___lldiv@quotient+3,f
 10682  1120  0B89               	decfsz	9,f
 10683  1121  291C               	goto	u2885
 10684  1122  0874               	movf	___lldiv@divisor+3,w
 10685  1123  0278               	subwf	___lldiv@dividend+3,w
 10686  1124  1D03               	skipz
 10687  1125  2930               	goto	u2895
 10688  1126  0873               	movf	___lldiv@divisor+2,w
 10689  1127  0277               	subwf	___lldiv@dividend+2,w
 10690  1128  1D03               	skipz
 10691  1129  2930               	goto	u2895
 10692  112A  0872               	movf	___lldiv@divisor+1,w
 10693  112B  0276               	subwf	___lldiv@dividend+1,w
 10694  112C  1D03               	skipz
 10695  112D  2930               	goto	u2895
 10696  112E  0871               	movf	___lldiv@divisor,w
 10697  112F  0275               	subwf	___lldiv@dividend,w
 10698  1130                     u2895:	
 10699  1130  1C03               	skipc
 10700  1131  293B               	goto	l4007
 10701  1132  0871               	movf	___lldiv@divisor,w
 10702  1133  02F5               	subwf	___lldiv@dividend,f
 10703  1134  0872               	movf	___lldiv@divisor+1,w
 10704  1135  3BF6               	subwfb	___lldiv@dividend+1,f
 10705  1136  0873               	movf	___lldiv@divisor+2,w
 10706  1137  3BF7               	subwfb	___lldiv@dividend+2,f
 10707  1138  0874               	movf	___lldiv@divisor+3,w
 10708  1139  3BF8               	subwfb	___lldiv@dividend+3,f
 10709  113A  1420               	bsf	___lldiv@quotient,0
 10710  113B                     l4007:	
 10711  113B  3001               	movlw	1
 10712  113C                     u2905:	
 10713  113C  36F4               	lsrf	___lldiv@divisor+3,f
 10714  113D  0CF3               	rrf	___lldiv@divisor+2,f
 10715  113E  0CF2               	rrf	___lldiv@divisor+1,f
 10716  113F  0CF1               	rrf	___lldiv@divisor,f
 10717  1140  0B89               	decfsz	9,f
 10718  1141  293C               	goto	u2905
 10719  1142  3001               	movlw	1
 10720  1143  02A4               	subwf	___lldiv@counter,f
 10721  1144  1D03               	btfss	3,2
 10722  1145  291B               	goto	l3999
 10723  1146                     l4011:	
 10724  1146  0823               	movf	___lldiv@quotient+3,w
 10725  1147  00F4               	movwf	?___lldiv+3
 10726  1148  0822               	movf	___lldiv@quotient+2,w
 10727  1149  00F3               	movwf	?___lldiv+2
 10728  114A  0821               	movf	___lldiv@quotient+1,w
 10729  114B  00F2               	movwf	?___lldiv+1
 10730  114C  0820               	movf	___lldiv@quotient,w
 10731  114D  00F1               	movwf	?___lldiv
 10732  114E  0008               	return
 10733  114F                     __end_of___lldiv:	
 10734                           
 10735                           	psect	text32
 10736  0AE0                     __ptext32:	
 10737 ;; *************** function _calc_expect_vout_adc_value *****************
 10738 ;; Defined at:
 10739 ;;		line 463 in file "src/api/sample.c"
 10740 ;; Parameters:    Size  Location     Type
 10741 ;;  x               2   18[BANK0 ] unsigned int 
 10742 ;; Auto vars:     Size  Location     Type
 10743 ;;  t32             4   34[BANK0 ] long 
 10744 ;;  i               1   38[BANK0 ] unsigned char 
 10745 ;; Return value:  Size  Location     Type
 10746 ;;                  2   18[BANK0 ] unsigned int 
 10747 ;; Registers used:
 10748 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10749 ;; Tracked objects:
 10750 ;;		On entry : 0/0
 10751 ;;		On exit  : 0/0
 10752 ;;		Unchanged: 0/0
 10753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10754 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10755 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10756 ;;      Temps:          0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10757 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10758 ;;Total ram usage:       21 bytes
 10759 ;; Hardware stack levels used:    1
 10760 ;; Hardware stack levels required when called:    2
 10761 ;; This function calls:
 10762 ;;		___aldiv
 10763 ;;		___lmul
 10764 ;; This function is called by:
 10765 ;;		_main
 10766 ;; This function uses a non-reentrant model
 10767 ;;
 10768                           
 10769                           
 10770                           ;psect for function _calc_expect_vout_adc_value
 10771  0AE0                     _calc_expect_vout_adc_value:	
 10772                           
 10773                           ;sample.c: 466: uint8_t i;;sample.c: 467: int32_t t32;;sample.c: 470: for (i = 0; i < 30
      +                          -1; i++) {
 10774                           
 10775                           ;incstack = 0
 10776                           ; Regs used in _calc_expect_vout_adc_value: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 10777  0AE0  0020               	movlb	0	; select bank0
 10778  0AE1  01C6               	clrf	calc_expect_vout_adc_value@i
 10779  0AE2  301D               	movlw	29
 10780  0AE3  0246               	subwf	calc_expect_vout_adc_value@i,w
 10781  0AE4  1803               	btfsc	3,0
 10782  0AE5  2B43               	goto	l5231
 10783  0AE6                     l5221:	
 10784                           
 10785                           ;sample.c: 471: if(sysData.calibRsAdc[i]<sysData.calibRsAdc[i+1]){
 10786  0AE6  0846               	movf	calc_expect_vout_adc_value@i,w
 10787  0AE7  00B4               	movwf	??_calc_expect_vout_adc_value
 10788  0AE8  01B5               	clrf	??_calc_expect_vout_adc_value+1
 10789  0AE9  35B4               	lslf	??_calc_expect_vout_adc_value,f
 10790  0AEA  0DB5               	rlf	??_calc_expect_vout_adc_value+1,f
 10791  0AEB  0834               	movf	??_calc_expect_vout_adc_value,w
 10792  0AEC  3E02               	addlw	2
 10793  0AED  00B6               	movwf	??_calc_expect_vout_adc_value+2
 10794  0AEE  3000               	movlw	0
 10795  0AEF  3D35               	addwfc	??_calc_expect_vout_adc_value+1,w
 10796  0AF0  00B7               	movwf	??_calc_expect_vout_adc_value+3
 10797  0AF1  3066               	movlw	102
 10798  0AF2  00B8               	movwf	??_calc_expect_vout_adc_value+4
 10799  0AF3  3023               	movlw	35
 10800  0AF4  00B9               	movwf	??_calc_expect_vout_adc_value+5
 10801  0AF5  0836               	movf	??_calc_expect_vout_adc_value+2,w
 10802  0AF6  0738               	addwf	??_calc_expect_vout_adc_value+4,w
 10803  0AF7  0086               	movwf	6
 10804  0AF8  0837               	movf	??_calc_expect_vout_adc_value+3,w
 10805  0AF9  3D39               	addwfc	??_calc_expect_vout_adc_value+5,w
 10806  0AFA  0087               	movwf	7
 10807  0AFB  3F40               	moviw [0]fsr1
 10808  0AFC  00BA               	movwf	??_calc_expect_vout_adc_value+6
 10809  0AFD  3F41               	moviw [1]fsr1
 10810  0AFE  00BB               	movwf	??_calc_expect_vout_adc_value+7
 10811  0AFF  0846               	movf	calc_expect_vout_adc_value@i,w
 10812  0B00  00BC               	movwf	??_calc_expect_vout_adc_value+8
 10813  0B01  01BD               	clrf	??_calc_expect_vout_adc_value+9
 10814  0B02  35BC               	lslf	??_calc_expect_vout_adc_value+8,f
 10815  0B03  0DBD               	rlf	??_calc_expect_vout_adc_value+9,f
 10816  0B04  3066               	movlw	102
 10817  0B05  00BE               	movwf	??_calc_expect_vout_adc_value+10
 10818  0B06  3023               	movlw	35
 10819  0B07  00BF               	movwf	??_calc_expect_vout_adc_value+11
 10820  0B08  083C               	movf	??_calc_expect_vout_adc_value+8,w
 10821  0B09  073E               	addwf	??_calc_expect_vout_adc_value+10,w
 10822  0B0A  0086               	movwf	6
 10823  0B0B  083D               	movf	??_calc_expect_vout_adc_value+9,w
 10824  0B0C  3D3F               	addwfc	??_calc_expect_vout_adc_value+11,w
 10825  0B0D  0087               	movwf	7
 10826  0B0E  3F40               	moviw [0]fsr1
 10827  0B0F  00C0               	movwf	??_calc_expect_vout_adc_value+12
 10828  0B10  3F41               	moviw [1]fsr1
 10829  0B11  00C1               	movwf	??_calc_expect_vout_adc_value+13
 10830  0B12  083B               	movf	??_calc_expect_vout_adc_value+7,w
 10831  0B13  0241               	subwf	??_calc_expect_vout_adc_value+13,w
 10832  0B14  1D03               	skipz
 10833  0B15  2B18               	goto	u4755
 10834  0B16  083A               	movf	??_calc_expect_vout_adc_value+6,w
 10835  0B17  0240               	subwf	??_calc_expect_vout_adc_value+12,w
 10836  0B18                     u4755:	
 10837  0B18  1803               	skipnc
 10838  0B19  2B43               	goto	l5231
 10839                           
 10840                           ;sample.c: 472: if (x <= sysData.calibRsAdc[i+1])break;
 10841  0B1A  0846               	movf	calc_expect_vout_adc_value@i,w
 10842  0B1B  00B4               	movwf	??_calc_expect_vout_adc_value
 10843  0B1C  01B5               	clrf	??_calc_expect_vout_adc_value+1
 10844  0B1D  35B4               	lslf	??_calc_expect_vout_adc_value,f
 10845  0B1E  0DB5               	rlf	??_calc_expect_vout_adc_value+1,f
 10846  0B1F  0834               	movf	??_calc_expect_vout_adc_value,w
 10847  0B20  3E02               	addlw	2
 10848  0B21  00B6               	movwf	??_calc_expect_vout_adc_value+2
 10849  0B22  3000               	movlw	0
 10850  0B23  3D35               	addwfc	??_calc_expect_vout_adc_value+1,w
 10851  0B24  00B7               	movwf	??_calc_expect_vout_adc_value+3
 10852  0B25  3066               	movlw	102
 10853  0B26  00B8               	movwf	??_calc_expect_vout_adc_value+4
 10854  0B27  3023               	movlw	35
 10855  0B28  00B9               	movwf	??_calc_expect_vout_adc_value+5
 10856  0B29  0836               	movf	??_calc_expect_vout_adc_value+2,w
 10857  0B2A  0738               	addwf	??_calc_expect_vout_adc_value+4,w
 10858  0B2B  0086               	movwf	6
 10859  0B2C  0837               	movf	??_calc_expect_vout_adc_value+3,w
 10860  0B2D  3D39               	addwfc	??_calc_expect_vout_adc_value+5,w
 10861  0B2E  0087               	movwf	7
 10862  0B2F  3F40               	moviw [0]fsr1
 10863  0B30  00BA               	movwf	??_calc_expect_vout_adc_value+6
 10864  0B31  3F41               	moviw [1]fsr1
 10865  0B32  00BB               	movwf	??_calc_expect_vout_adc_value+7
 10866  0B33  0833               	movf	calc_expect_vout_adc_value@x+1,w
 10867  0B34  023B               	subwf	??_calc_expect_vout_adc_value+7,w
 10868  0B35  1D03               	skipz
 10869  0B36  2B39               	goto	u4765
 10870  0B37  0832               	movf	calc_expect_vout_adc_value@x,w
 10871  0B38  023A               	subwf	??_calc_expect_vout_adc_value+6,w
 10872  0B39                     u4765:	
 10873  0B39  1803               	btfsc	3,0
 10874  0B3A  2B43               	goto	l5231
 10875                           
 10876                           ;sample.c: 475: break;
 10877                           
 10878                           ;sample.c: 473: }else{
 10879  0B3B  3001               	movlw	1
 10880  0B3C  00B4               	movwf	??_calc_expect_vout_adc_value
 10881  0B3D  0834               	movf	??_calc_expect_vout_adc_value,w
 10882  0B3E  07C6               	addwf	calc_expect_vout_adc_value@i,f
 10883  0B3F  301D               	movlw	29
 10884  0B40  0246               	subwf	calc_expect_vout_adc_value@i,w
 10885  0B41  1C03               	skipc
 10886  0B42  2AE6               	goto	l5221
 10887  0B43                     l5231:	
 10888                           
 10889                           ;sample.c: 476: };sample.c: 477: };sample.c: 479: if (i > 30-2)i=30-2;
 10890  0B43  301D               	movlw	29
 10891  0B44  0246               	subwf	calc_expect_vout_adc_value@i,w
 10892  0B45  1C03               	skipc
 10893  0B46  2B4B               	goto	l5235
 10894  0B47  301C               	movlw	28
 10895  0B48  00B4               	movwf	??_calc_expect_vout_adc_value
 10896  0B49  0834               	movf	??_calc_expect_vout_adc_value,w
 10897  0B4A  00C6               	movwf	calc_expect_vout_adc_value@i
 10898  0B4B                     l5235:	
 10899                           
 10900                           ;sample.c: 480: y1=sysData.calibVoMV[i+1];
 10901  0B4B  0846               	movf	calc_expect_vout_adc_value@i,w
 10902  0B4C  00B4               	movwf	??_calc_expect_vout_adc_value
 10903  0B4D  01B5               	clrf	??_calc_expect_vout_adc_value+1
 10904  0B4E  35B4               	lslf	??_calc_expect_vout_adc_value,f
 10905  0B4F  0DB5               	rlf	??_calc_expect_vout_adc_value+1,f
 10906  0B50  0834               	movf	??_calc_expect_vout_adc_value,w
 10907  0B51  3E02               	addlw	2
 10908  0B52  00B6               	movwf	??_calc_expect_vout_adc_value+2
 10909  0B53  3000               	movlw	0
 10910  0B54  3D35               	addwfc	??_calc_expect_vout_adc_value+1,w
 10911  0B55  00B7               	movwf	??_calc_expect_vout_adc_value+3
 10912  0B56  30A2               	movlw	162
 10913  0B57  00B8               	movwf	??_calc_expect_vout_adc_value+4
 10914  0B58  3023               	movlw	35
 10915  0B59  00B9               	movwf	??_calc_expect_vout_adc_value+5
 10916  0B5A  0836               	movf	??_calc_expect_vout_adc_value+2,w
 10917  0B5B  0738               	addwf	??_calc_expect_vout_adc_value+4,w
 10918  0B5C  0086               	movwf	6
 10919  0B5D  0837               	movf	??_calc_expect_vout_adc_value+3,w
 10920  0B5E  3D39               	addwfc	??_calc_expect_vout_adc_value+5,w
 10921  0B5F  0087               	movwf	7
 10922  0B60  3F40               	moviw [0]fsr1
 10923  0B61  00BA               	movwf	??_calc_expect_vout_adc_value+6
 10924  0B62  3F41               	moviw [1]fsr1
 10925  0B63  00BB               	movwf	??_calc_expect_vout_adc_value+7
 10926  0B64  083A               	movf	??_calc_expect_vout_adc_value+6,w
 10927  0B65  0021               	movlb	1	; select bank1
 10928  0B66  00C0               	movwf	_y1^(0+128)
 10929  0B67  0020               	movlb	0	; select bank0
 10930  0B68  083B               	movf	??_calc_expect_vout_adc_value+7,w
 10931  0B69  0021               	movlb	1	; select bank1
 10932  0B6A  00C1               	movwf	(_y1^(0+128)+1)
 10933  0B6B  01C2               	clrf	(_y1^(0+128)+2)
 10934  0B6C  01C3               	clrf	(_y1^(0+128)+3)
 10935                           
 10936                           ;sample.c: 481: y0=sysData.calibVoMV[i];
 10937  0B6D  0020               	movlb	0	; select bank0
 10938  0B6E  0846               	movf	calc_expect_vout_adc_value@i,w
 10939  0B6F  00B4               	movwf	??_calc_expect_vout_adc_value
 10940  0B70  01B5               	clrf	??_calc_expect_vout_adc_value+1
 10941  0B71  35B4               	lslf	??_calc_expect_vout_adc_value,f
 10942  0B72  0DB5               	rlf	??_calc_expect_vout_adc_value+1,f
 10943  0B73  30A2               	movlw	162
 10944  0B74  00B6               	movwf	??_calc_expect_vout_adc_value+2
 10945  0B75  3023               	movlw	35
 10946  0B76  00B7               	movwf	??_calc_expect_vout_adc_value+3
 10947  0B77  0834               	movf	??_calc_expect_vout_adc_value,w
 10948  0B78  0736               	addwf	??_calc_expect_vout_adc_value+2,w
 10949  0B79  0086               	movwf	6
 10950  0B7A  0835               	movf	??_calc_expect_vout_adc_value+1,w
 10951  0B7B  3D37               	addwfc	??_calc_expect_vout_adc_value+3,w
 10952  0B7C  0087               	movwf	7
 10953  0B7D  3F40               	moviw [0]fsr1
 10954  0B7E  00B8               	movwf	??_calc_expect_vout_adc_value+4
 10955  0B7F  3F41               	moviw [1]fsr1
 10956  0B80  00B9               	movwf	??_calc_expect_vout_adc_value+5
 10957  0B81  0838               	movf	??_calc_expect_vout_adc_value+4,w
 10958  0B82  00CF               	movwf	_y0
 10959  0B83  0839               	movf	??_calc_expect_vout_adc_value+5,w
 10960  0B84  00D0               	movwf	_y0+1
 10961  0B85  01D1               	clrf	_y0+2
 10962  0B86  01D2               	clrf	_y0+3
 10963                           
 10964                           ;sample.c: 484: x1=sysData.calibRsAdc[i+1];
 10965  0B87  0846               	movf	calc_expect_vout_adc_value@i,w
 10966  0B88  00B4               	movwf	??_calc_expect_vout_adc_value
 10967  0B89  01B5               	clrf	??_calc_expect_vout_adc_value+1
 10968  0B8A  35B4               	lslf	??_calc_expect_vout_adc_value,f
 10969  0B8B  0DB5               	rlf	??_calc_expect_vout_adc_value+1,f
 10970  0B8C  0834               	movf	??_calc_expect_vout_adc_value,w
 10971  0B8D  3E02               	addlw	2
 10972  0B8E  00B6               	movwf	??_calc_expect_vout_adc_value+2
 10973  0B8F  3000               	movlw	0
 10974  0B90  3D35               	addwfc	??_calc_expect_vout_adc_value+1,w
 10975  0B91  00B7               	movwf	??_calc_expect_vout_adc_value+3
 10976  0B92  3066               	movlw	102
 10977  0B93  00B8               	movwf	??_calc_expect_vout_adc_value+4
 10978  0B94  3023               	movlw	35
 10979  0B95  00B9               	movwf	??_calc_expect_vout_adc_value+5
 10980  0B96  0836               	movf	??_calc_expect_vout_adc_value+2,w
 10981  0B97  0738               	addwf	??_calc_expect_vout_adc_value+4,w
 10982  0B98  0086               	movwf	6
 10983  0B99  0837               	movf	??_calc_expect_vout_adc_value+3,w
 10984  0B9A  3D39               	addwfc	??_calc_expect_vout_adc_value+5,w
 10985  0B9B  0087               	movwf	7
 10986  0B9C  3F40               	moviw [0]fsr1
 10987  0B9D  00BA               	movwf	??_calc_expect_vout_adc_value+6
 10988  0B9E  3F41               	moviw [1]fsr1
 10989  0B9F  00BB               	movwf	??_calc_expect_vout_adc_value+7
 10990  0BA0  083A               	movf	??_calc_expect_vout_adc_value+6,w
 10991  0BA1  0021               	movlb	1	; select bank1
 10992  0BA2  00BC               	movwf	_x1^(0+128)
 10993  0BA3  0020               	movlb	0	; select bank0
 10994  0BA4  083B               	movf	??_calc_expect_vout_adc_value+7,w
 10995  0BA5  0021               	movlb	1	; select bank1
 10996  0BA6  00BD               	movwf	(_x1^(0+128)+1)
 10997  0BA7  01BE               	clrf	(_x1^(0+128)+2)
 10998  0BA8  01BF               	clrf	(_x1^(0+128)+3)
 10999                           
 11000                           ;sample.c: 485: x0=sysData.calibRsAdc[i];
 11001  0BA9  0020               	movlb	0	; select bank0
 11002  0BAA  0846               	movf	calc_expect_vout_adc_value@i,w
 11003  0BAB  00B4               	movwf	??_calc_expect_vout_adc_value
 11004  0BAC  01B5               	clrf	??_calc_expect_vout_adc_value+1
 11005  0BAD  35B4               	lslf	??_calc_expect_vout_adc_value,f
 11006  0BAE  0DB5               	rlf	??_calc_expect_vout_adc_value+1,f
 11007  0BAF  3066               	movlw	102
 11008  0BB0  00B6               	movwf	??_calc_expect_vout_adc_value+2
 11009  0BB1  3023               	movlw	35
 11010  0BB2  00B7               	movwf	??_calc_expect_vout_adc_value+3
 11011  0BB3  0834               	movf	??_calc_expect_vout_adc_value,w
 11012  0BB4  0736               	addwf	??_calc_expect_vout_adc_value+2,w
 11013  0BB5  0086               	movwf	6
 11014  0BB6  0835               	movf	??_calc_expect_vout_adc_value+1,w
 11015  0BB7  3D37               	addwfc	??_calc_expect_vout_adc_value+3,w
 11016  0BB8  0087               	movwf	7
 11017  0BB9  3F40               	moviw [0]fsr1
 11018  0BBA  00B8               	movwf	??_calc_expect_vout_adc_value+4
 11019  0BBB  3F41               	moviw [1]fsr1
 11020  0BBC  00B9               	movwf	??_calc_expect_vout_adc_value+5
 11021  0BBD  0838               	movf	??_calc_expect_vout_adc_value+4,w
 11022  0BBE  00CB               	movwf	_x0
 11023  0BBF  0839               	movf	??_calc_expect_vout_adc_value+5,w
 11024  0BC0  00CC               	movwf	_x0+1
 11025  0BC1  01CD               	clrf	_x0+2
 11026  0BC2  01CE               	clrf	_x0+3
 11027                           
 11028                           ;sample.c: 487: if(x<=x0 && i==0)return (uint16_t)y0;
 11029  0BC3  0832               	movf	calc_expect_vout_adc_value@x,w
 11030  0BC4  00B4               	movwf	??_calc_expect_vout_adc_value
 11031  0BC5  0833               	movf	calc_expect_vout_adc_value@x+1,w
 11032  0BC6  00B5               	movwf	??_calc_expect_vout_adc_value+1
 11033  0BC7  01B6               	clrf	??_calc_expect_vout_adc_value+2
 11034  0BC8  01B7               	clrf	??_calc_expect_vout_adc_value+3
 11035  0BC9  084E               	movf	_x0+3,w
 11036  0BCA  3A80               	xorlw	128
 11037  0BCB  00B8               	movwf	??_calc_expect_vout_adc_value+4
 11038  0BCC  0837               	movf	??_calc_expect_vout_adc_value+3,w
 11039  0BCD  3A80               	xorlw	128
 11040  0BCE  0238               	subwf	??_calc_expect_vout_adc_value+4,w
 11041  0BCF  1D03               	skipz
 11042  0BD0  2BDB               	goto	u4793
 11043  0BD1  0836               	movf	??_calc_expect_vout_adc_value+2,w
 11044  0BD2  024D               	subwf	_x0+2,w
 11045  0BD3  1D03               	skipz
 11046  0BD4  2BDB               	goto	u4793
 11047  0BD5  0835               	movf	??_calc_expect_vout_adc_value+1,w
 11048  0BD6  024C               	subwf	_x0+1,w
 11049  0BD7  1D03               	skipz
 11050  0BD8  2BDB               	goto	u4793
 11051  0BD9  0834               	movf	??_calc_expect_vout_adc_value,w
 11052  0BDA  024B               	subwf	_x0,w
 11053  0BDB                     u4793:	
 11054  0BDB  1C03               	skipc
 11055  0BDC  2BE5               	goto	l5249
 11056  0BDD  0846               	movf	calc_expect_vout_adc_value@i,w
 11057  0BDE  1D03               	btfss	3,2
 11058  0BDF  2BE5               	goto	l5249
 11059  0BE0  0850               	movf	_y0+1,w
 11060  0BE1  00B3               	movwf	?_calc_expect_vout_adc_value+1
 11061  0BE2  084F               	movf	_y0,w
 11062  0BE3  00B2               	movwf	?_calc_expect_vout_adc_value
 11063  0BE4  0008               	return
 11064  0BE5                     l5249:	
 11065                           
 11066                           ;sample.c: 488: if(x1<=x0)return (uint16_t)y0;
 11067  0BE5  084E               	movf	_x0+3,w
 11068  0BE6  3A80               	xorlw	128
 11069  0BE7  00B4               	movwf	??_calc_expect_vout_adc_value
 11070  0BE8  0021               	movlb	1	; select bank1
 11071  0BE9  083F               	movf	(_x1+3)^(0+128),w
 11072  0BEA  3A80               	xorlw	128
 11073  0BEB  0020               	movlb	0	; select bank0
 11074  0BEC  0234               	subwf	??_calc_expect_vout_adc_value,w
 11075  0BED  1D03               	skipz
 11076  0BEE  2BFF               	goto	u4813
 11077  0BEF  0021               	movlb	1	; select bank1
 11078  0BF0  083E               	movf	(_x1+2)^(0+128),w
 11079  0BF1  0020               	movlb	0	; select bank0
 11080  0BF2  024D               	subwf	_x0+2,w
 11081  0BF3  1D03               	skipz
 11082  0BF4  2BFF               	goto	u4813
 11083  0BF5  0021               	movlb	1	; select bank1
 11084  0BF6  083D               	movf	(_x1+1)^(0+128),w
 11085  0BF7  0020               	movlb	0	; select bank0
 11086  0BF8  024C               	subwf	_x0+1,w
 11087  0BF9  1D03               	skipz
 11088  0BFA  2BFF               	goto	u4813
 11089  0BFB  0021               	movlb	1	; select bank1
 11090  0BFC  083C               	movf	_x1^(0+128),w
 11091  0BFD  0020               	movlb	0	; select bank0
 11092  0BFE  024B               	subwf	_x0,w
 11093  0BFF                     u4813:	
 11094  0BFF  1C03               	skipc
 11095  0C00  2C06               	goto	l5255
 11096  0C01  0850               	movf	_y0+1,w
 11097  0C02  00B3               	movwf	?_calc_expect_vout_adc_value+1
 11098  0C03  084F               	movf	_y0,w
 11099  0C04  00B2               	movwf	?_calc_expect_vout_adc_value
 11100  0C05  0008               	return
 11101  0C06                     l5255:	
 11102                           
 11103                           ;sample.c: 491: t32=(x-x0);
 11104  0C06  094B               	comf	_x0,w
 11105  0C07  00B4               	movwf	??_calc_expect_vout_adc_value
 11106  0C08  094C               	comf	_x0+1,w
 11107  0C09  00B5               	movwf	??_calc_expect_vout_adc_value+1
 11108  0C0A  094D               	comf	_x0+2,w
 11109  0C0B  00B6               	movwf	??_calc_expect_vout_adc_value+2
 11110  0C0C  094E               	comf	_x0+3,w
 11111  0C0D  00B7               	movwf	??_calc_expect_vout_adc_value+3
 11112  0C0E  0AB4               	incf	??_calc_expect_vout_adc_value,f
 11113  0C0F  1903               	skipnz
 11114  0C10  0AB5               	incf	??_calc_expect_vout_adc_value+1,f
 11115  0C11  1903               	skipnz
 11116  0C12  0AB6               	incf	??_calc_expect_vout_adc_value+2,f
 11117  0C13  1903               	skipnz
 11118  0C14  0AB7               	incf	??_calc_expect_vout_adc_value+3,f
 11119  0C15  0832               	movf	calc_expect_vout_adc_value@x,w
 11120  0C16  00B8               	movwf	??_calc_expect_vout_adc_value+4
 11121  0C17  0833               	movf	calc_expect_vout_adc_value@x+1,w
 11122  0C18  00B9               	movwf	??_calc_expect_vout_adc_value+5
 11123  0C19  01BA               	clrf	??_calc_expect_vout_adc_value+6
 11124  0C1A  01BB               	clrf	??_calc_expect_vout_adc_value+7
 11125  0C1B  0838               	movf	??_calc_expect_vout_adc_value+4,w
 11126  0C1C  07B4               	addwf	??_calc_expect_vout_adc_value,f
 11127  0C1D  0839               	movf	??_calc_expect_vout_adc_value+5,w
 11128  0C1E  3DB5               	addwfc	??_calc_expect_vout_adc_value+1,f
 11129  0C1F  083A               	movf	??_calc_expect_vout_adc_value+6,w
 11130  0C20  3DB6               	addwfc	??_calc_expect_vout_adc_value+2,f
 11131  0C21  083B               	movf	??_calc_expect_vout_adc_value+7,w
 11132  0C22  3DB7               	addwfc	??_calc_expect_vout_adc_value+3,f
 11133  0C23  0837               	movf	??_calc_expect_vout_adc_value+3,w
 11134  0C24  00C5               	movwf	calc_expect_vout_adc_value@t32+3
 11135  0C25  0836               	movf	??_calc_expect_vout_adc_value+2,w
 11136  0C26  00C4               	movwf	calc_expect_vout_adc_value@t32+2
 11137  0C27  0835               	movf	??_calc_expect_vout_adc_value+1,w
 11138  0C28  00C3               	movwf	calc_expect_vout_adc_value@t32+1
 11139  0C29  0834               	movf	??_calc_expect_vout_adc_value,w
 11140  0C2A  00C2               	movwf	calc_expect_vout_adc_value@t32
 11141                           
 11142                           ;sample.c: 492: t32=t32*(y1-y0);
 11143  0C2B  0021               	movlb	1	; select bank1
 11144  0C2C  0840               	movf	_y1^(0+128),w
 11145  0C2D  0020               	movlb	0	; select bank0
 11146  0C2E  00B4               	movwf	??_calc_expect_vout_adc_value
 11147  0C2F  0021               	movlb	1	; select bank1
 11148  0C30  0841               	movf	(_y1+1)^(0+128),w
 11149  0C31  0020               	movlb	0	; select bank0
 11150  0C32  00B5               	movwf	??_calc_expect_vout_adc_value+1
 11151  0C33  0021               	movlb	1	; select bank1
 11152  0C34  0842               	movf	(_y1+2)^(0+128),w
 11153  0C35  0020               	movlb	0	; select bank0
 11154  0C36  00B6               	movwf	??_calc_expect_vout_adc_value+2
 11155  0C37  0021               	movlb	1	; select bank1
 11156  0C38  0843               	movf	(_y1+3)^(0+128),w
 11157  0C39  0020               	movlb	0	; select bank0
 11158  0C3A  00B7               	movwf	??_calc_expect_vout_adc_value+3
 11159  0C3B  094F               	comf	_y0,w
 11160  0C3C  00B8               	movwf	??_calc_expect_vout_adc_value+4
 11161  0C3D  0950               	comf	_y0+1,w
 11162  0C3E  00B9               	movwf	??_calc_expect_vout_adc_value+5
 11163  0C3F  0951               	comf	_y0+2,w
 11164  0C40  00BA               	movwf	??_calc_expect_vout_adc_value+6
 11165  0C41  0952               	comf	_y0+3,w
 11166  0C42  00BB               	movwf	??_calc_expect_vout_adc_value+7
 11167  0C43  0AB8               	incf	??_calc_expect_vout_adc_value+4,f
 11168  0C44  1903               	skipnz
 11169  0C45  0AB9               	incf	??_calc_expect_vout_adc_value+5,f
 11170  0C46  1903               	skipnz
 11171  0C47  0ABA               	incf	??_calc_expect_vout_adc_value+6,f
 11172  0C48  1903               	skipnz
 11173  0C49  0ABB               	incf	??_calc_expect_vout_adc_value+7,f
 11174  0C4A  0838               	movf	??_calc_expect_vout_adc_value+4,w
 11175  0C4B  07B4               	addwf	??_calc_expect_vout_adc_value,f
 11176  0C4C  0839               	movf	??_calc_expect_vout_adc_value+5,w
 11177  0C4D  3DB5               	addwfc	??_calc_expect_vout_adc_value+1,f
 11178  0C4E  083A               	movf	??_calc_expect_vout_adc_value+6,w
 11179  0C4F  3DB6               	addwfc	??_calc_expect_vout_adc_value+2,f
 11180  0C50  083B               	movf	??_calc_expect_vout_adc_value+7,w
 11181  0C51  3DB7               	addwfc	??_calc_expect_vout_adc_value+3,f
 11182  0C52  0837               	movf	??_calc_expect_vout_adc_value+3,w
 11183  0C53  00F4               	movwf	___lmul@multiplier+3
 11184  0C54  0836               	movf	??_calc_expect_vout_adc_value+2,w
 11185  0C55  00F3               	movwf	___lmul@multiplier+2
 11186  0C56  0835               	movf	??_calc_expect_vout_adc_value+1,w
 11187  0C57  00F2               	movwf	___lmul@multiplier+1
 11188  0C58  0834               	movf	??_calc_expect_vout_adc_value,w
 11189  0C59  00F1               	movwf	___lmul@multiplier
 11190  0C5A  0845               	movf	calc_expect_vout_adc_value@t32+3,w
 11191  0C5B  00F8               	movwf	___lmul@multiplicand+3
 11192  0C5C  0844               	movf	calc_expect_vout_adc_value@t32+2,w
 11193  0C5D  00F7               	movwf	___lmul@multiplicand+2
 11194  0C5E  0843               	movf	calc_expect_vout_adc_value@t32+1,w
 11195  0C5F  00F6               	movwf	___lmul@multiplicand+1
 11196  0C60  0842               	movf	calc_expect_vout_adc_value@t32,w
 11197  0C61  00F5               	movwf	___lmul@multiplicand
 11198  0C62  319D  25BA  318A   	fcall	___lmul
 11199  0C65  0874               	movf	?___lmul+3,w
 11200  0C66  0020               	movlb	0	; select bank0
 11201  0C67  00C5               	movwf	calc_expect_vout_adc_value@t32+3
 11202  0C68  0873               	movf	?___lmul+2,w
 11203  0C69  00C4               	movwf	calc_expect_vout_adc_value@t32+2
 11204  0C6A  0872               	movf	?___lmul+1,w
 11205  0C6B  00C3               	movwf	calc_expect_vout_adc_value@t32+1
 11206  0C6C  0871               	movf	?___lmul,w
 11207  0C6D  00C2               	movwf	calc_expect_vout_adc_value@t32
 11208                           
 11209                           ;sample.c: 493: t32=t32/(x1-x0);
 11210  0C6E  0021               	movlb	1	; select bank1
 11211  0C6F  083C               	movf	_x1^(0+128),w
 11212  0C70  0020               	movlb	0	; select bank0
 11213  0C71  00B4               	movwf	??_calc_expect_vout_adc_value
 11214  0C72  0021               	movlb	1	; select bank1
 11215  0C73  083D               	movf	(_x1+1)^(0+128),w
 11216  0C74  0020               	movlb	0	; select bank0
 11217  0C75  00B5               	movwf	??_calc_expect_vout_adc_value+1
 11218  0C76  0021               	movlb	1	; select bank1
 11219  0C77  083E               	movf	(_x1+2)^(0+128),w
 11220  0C78  0020               	movlb	0	; select bank0
 11221  0C79  00B6               	movwf	??_calc_expect_vout_adc_value+2
 11222  0C7A  0021               	movlb	1	; select bank1
 11223  0C7B  083F               	movf	(_x1+3)^(0+128),w
 11224  0C7C  0020               	movlb	0	; select bank0
 11225  0C7D  00B7               	movwf	??_calc_expect_vout_adc_value+3
 11226  0C7E  094B               	comf	_x0,w
 11227  0C7F  00B8               	movwf	??_calc_expect_vout_adc_value+4
 11228  0C80  094C               	comf	_x0+1,w
 11229  0C81  00B9               	movwf	??_calc_expect_vout_adc_value+5
 11230  0C82  094D               	comf	_x0+2,w
 11231  0C83  00BA               	movwf	??_calc_expect_vout_adc_value+6
 11232  0C84  094E               	comf	_x0+3,w
 11233  0C85  00BB               	movwf	??_calc_expect_vout_adc_value+7
 11234  0C86  0AB8               	incf	??_calc_expect_vout_adc_value+4,f
 11235  0C87  1903               	skipnz
 11236  0C88  0AB9               	incf	??_calc_expect_vout_adc_value+5,f
 11237  0C89  1903               	skipnz
 11238  0C8A  0ABA               	incf	??_calc_expect_vout_adc_value+6,f
 11239  0C8B  1903               	skipnz
 11240  0C8C  0ABB               	incf	??_calc_expect_vout_adc_value+7,f
 11241  0C8D  0838               	movf	??_calc_expect_vout_adc_value+4,w
 11242  0C8E  07B4               	addwf	??_calc_expect_vout_adc_value,f
 11243  0C8F  0839               	movf	??_calc_expect_vout_adc_value+5,w
 11244  0C90  3DB5               	addwfc	??_calc_expect_vout_adc_value+1,f
 11245  0C91  083A               	movf	??_calc_expect_vout_adc_value+6,w
 11246  0C92  3DB6               	addwfc	??_calc_expect_vout_adc_value+2,f
 11247  0C93  083B               	movf	??_calc_expect_vout_adc_value+7,w
 11248  0C94  3DB7               	addwfc	??_calc_expect_vout_adc_value+3,f
 11249  0C95  0837               	movf	??_calc_expect_vout_adc_value+3,w
 11250  0C96  00A7               	movwf	___aldiv@divisor+3
 11251  0C97  0836               	movf	??_calc_expect_vout_adc_value+2,w
 11252  0C98  00A6               	movwf	___aldiv@divisor+2
 11253  0C99  0835               	movf	??_calc_expect_vout_adc_value+1,w
 11254  0C9A  00A5               	movwf	___aldiv@divisor+1
 11255  0C9B  0834               	movf	??_calc_expect_vout_adc_value,w
 11256  0C9C  00A4               	movwf	___aldiv@divisor
 11257  0C9D  0845               	movf	calc_expect_vout_adc_value@t32+3,w
 11258  0C9E  00AB               	movwf	___aldiv@dividend+3
 11259  0C9F  0844               	movf	calc_expect_vout_adc_value@t32+2,w
 11260  0CA0  00AA               	movwf	___aldiv@dividend+2
 11261  0CA1  0843               	movf	calc_expect_vout_adc_value@t32+1,w
 11262  0CA2  00A9               	movwf	___aldiv@dividend+1
 11263  0CA3  0842               	movf	calc_expect_vout_adc_value@t32,w
 11264  0CA4  00A8               	movwf	___aldiv@dividend
 11265  0CA5  3193  2329  318A   	fcall	___aldiv
 11266  0CA8  0020               	movlb	0	; select bank0
 11267  0CA9  0827               	movf	?___aldiv+3,w
 11268  0CAA  00C5               	movwf	calc_expect_vout_adc_value@t32+3
 11269  0CAB  0826               	movf	?___aldiv+2,w
 11270  0CAC  00C4               	movwf	calc_expect_vout_adc_value@t32+2
 11271  0CAD  0825               	movf	?___aldiv+1,w
 11272  0CAE  00C3               	movwf	calc_expect_vout_adc_value@t32+1
 11273  0CAF  0824               	movf	?___aldiv,w
 11274  0CB0  00C2               	movwf	calc_expect_vout_adc_value@t32
 11275                           
 11276                           ;sample.c: 494: t32=t32+y0;
 11277  0CB1  0842               	movf	calc_expect_vout_adc_value@t32,w
 11278  0CB2  074F               	addwf	_y0,w
 11279  0CB3  00B4               	movwf	??_calc_expect_vout_adc_value
 11280  0CB4  0843               	movf	calc_expect_vout_adc_value@t32+1,w
 11281  0CB5  3D50               	addwfc	_y0+1,w
 11282  0CB6  00B5               	movwf	??_calc_expect_vout_adc_value+1
 11283  0CB7  0844               	movf	calc_expect_vout_adc_value@t32+2,w
 11284  0CB8  3D51               	addwfc	_y0+2,w
 11285  0CB9  00B6               	movwf	??_calc_expect_vout_adc_value+2
 11286  0CBA  0845               	movf	calc_expect_vout_adc_value@t32+3,w
 11287  0CBB  3D52               	addwfc	_y0+3,w
 11288  0CBC  00B7               	movwf	??_calc_expect_vout_adc_value+3
 11289  0CBD  0837               	movf	??_calc_expect_vout_adc_value+3,w
 11290  0CBE  00C5               	movwf	calc_expect_vout_adc_value@t32+3
 11291  0CBF  0836               	movf	??_calc_expect_vout_adc_value+2,w
 11292  0CC0  00C4               	movwf	calc_expect_vout_adc_value@t32+2
 11293  0CC1  0835               	movf	??_calc_expect_vout_adc_value+1,w
 11294  0CC2  00C3               	movwf	calc_expect_vout_adc_value@t32+1
 11295  0CC3  0834               	movf	??_calc_expect_vout_adc_value,w
 11296  0CC4  00C2               	movwf	calc_expect_vout_adc_value@t32
 11297                           
 11298                           ;sample.c: 495: if(t32<0)t32=0;
 11299  0CC5  1FC5               	btfss	calc_expect_vout_adc_value@t32+3,7
 11300  0CC6  2CCF               	goto	l691
 11301  0CC7  3000               	movlw	0
 11302  0CC8  00C5               	movwf	calc_expect_vout_adc_value@t32+3
 11303  0CC9  3000               	movlw	0
 11304  0CCA  00C4               	movwf	calc_expect_vout_adc_value@t32+2
 11305  0CCB  3000               	movlw	0
 11306  0CCC  00C3               	movwf	calc_expect_vout_adc_value@t32+1
 11307  0CCD  3000               	movlw	0
 11308  0CCE  00C2               	movwf	calc_expect_vout_adc_value@t32
 11309  0CCF                     l691:	
 11310                           
 11311                           ;sample.c: 496: return (uint16_t)t32;
 11312  0CCF  0843               	movf	calc_expect_vout_adc_value@t32+1,w
 11313  0CD0  00B3               	movwf	?_calc_expect_vout_adc_value+1
 11314  0CD1  0842               	movf	calc_expect_vout_adc_value@t32,w
 11315  0CD2  00B2               	movwf	?_calc_expect_vout_adc_value
 11316  0CD3  0008               	return
 11317  0CD4                     __end_of_calc_expect_vout_adc_value:	
 11318                           
 11319                           	psect	text33
 11320  1DBA                     __ptext33:	
 11321 ;; *************** function ___lmul *****************
 11322 ;; Defined at:
 11323 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul32.c"
 11324 ;; Parameters:    Size  Location     Type
 11325 ;;  multiplier      4    1[COMMON] unsigned long 
 11326 ;;  multiplicand    4    5[COMMON] unsigned long 
 11327 ;; Auto vars:     Size  Location     Type
 11328 ;;  product         4    0[BANK0 ] unsigned long 
 11329 ;; Return value:  Size  Location     Type
 11330 ;;                  4    1[COMMON] unsigned long 
 11331 ;; Registers used:
 11332 ;;		wreg, status,2, status,0
 11333 ;; Tracked objects:
 11334 ;;		On entry : 0/0
 11335 ;;		On exit  : 0/0
 11336 ;;		Unchanged: 0/0
 11337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11338 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11339 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11341 ;;      Totals:         8       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11342 ;;Total ram usage:       12 bytes
 11343 ;; Hardware stack levels used:    1
 11344 ;; Hardware stack levels required when called:    1
 11345 ;; This function calls:
 11346 ;;		Nothing
 11347 ;; This function is called by:
 11348 ;;		_calc_temp_rs
 11349 ;;		_calc_temp_rc
 11350 ;;		_pid_pwm1_idrv_run
 11351 ;;		_calc_expect_vout_adc_value
 11352 ;;		_cal_rs_simulate_power
 11353 ;;		_m_math_pow
 11354 ;; This function uses a non-reentrant model
 11355 ;;
 11356                           
 11357                           
 11358                           ;psect for function ___lmul
 11359  1DBA                     ___lmul:	
 11360                           
 11361                           ;incstack = 0
 11362                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 11363  1DBA  3000               	movlw	0
 11364  1DBB  0020               	movlb	0	; select bank0
 11365  1DBC  00A3               	movwf	___lmul@product+3
 11366  1DBD  3000               	movlw	0
 11367  1DBE  00A2               	movwf	___lmul@product+2
 11368  1DBF  3000               	movlw	0
 11369  1DC0  00A1               	movwf	___lmul@product+1
 11370  1DC1  3000               	movlw	0
 11371  1DC2  00A0               	movwf	___lmul@product
 11372  1DC3                     l5055:	
 11373  1DC3  1C71               	btfss	___lmul@multiplier,0
 11374  1DC4  2DCE               	goto	l5059
 11375  1DC5  0875               	movf	___lmul@multiplicand,w
 11376  1DC6  0020               	movlb	0	; select bank0
 11377  1DC7  07A0               	addwf	___lmul@product,f
 11378  1DC8  0876               	movf	___lmul@multiplicand+1,w
 11379  1DC9  3DA1               	addwfc	___lmul@product+1,f
 11380  1DCA  0877               	movf	___lmul@multiplicand+2,w
 11381  1DCB  3DA2               	addwfc	___lmul@product+2,f
 11382  1DCC  0878               	movf	___lmul@multiplicand+3,w
 11383  1DCD  3DA3               	addwfc	___lmul@product+3,f
 11384  1DCE                     l5059:	
 11385  1DCE  3001               	movlw	1
 11386  1DCF                     u4485:	
 11387  1DCF  35F5               	lslf	___lmul@multiplicand,f
 11388  1DD0  0DF6               	rlf	___lmul@multiplicand+1,f
 11389  1DD1  0DF7               	rlf	___lmul@multiplicand+2,f
 11390  1DD2  0DF8               	rlf	___lmul@multiplicand+3,f
 11391  1DD3  0B89               	decfsz	9,f
 11392  1DD4  2DCF               	goto	u4485
 11393  1DD5  3001               	movlw	1
 11394  1DD6                     u4495:	
 11395  1DD6  36F4               	lsrf	___lmul@multiplier+3,f
 11396  1DD7  0CF3               	rrf	___lmul@multiplier+2,f
 11397  1DD8  0CF2               	rrf	___lmul@multiplier+1,f
 11398  1DD9  0CF1               	rrf	___lmul@multiplier,f
 11399  1DDA  0B89               	decfsz	9,f
 11400  1DDB  2DD6               	goto	u4495
 11401  1DDC  0874               	movf	___lmul@multiplier+3,w
 11402  1DDD  0473               	iorwf	___lmul@multiplier+2,w
 11403  1DDE  0472               	iorwf	___lmul@multiplier+1,w
 11404  1DDF  0471               	iorwf	___lmul@multiplier,w
 11405  1DE0  1D03               	skipz
 11406  1DE1  2DC3               	goto	l5055
 11407  1DE2  0020               	movlb	0	; select bank0
 11408  1DE3  0823               	movf	___lmul@product+3,w
 11409  1DE4  00F4               	movwf	?___lmul+3
 11410  1DE5  0822               	movf	___lmul@product+2,w
 11411  1DE6  00F3               	movwf	?___lmul+2
 11412  1DE7  0821               	movf	___lmul@product+1,w
 11413  1DE8  00F2               	movwf	?___lmul+1
 11414  1DE9  0820               	movf	___lmul@product,w
 11415  1DEA  00F1               	movwf	?___lmul
 11416  1DEB  0008               	return
 11417  1DEC                     __end_of___lmul:	
 11418                           
 11419                           	psect	text34
 11420  1329                     __ptext34:	
 11421 ;; *************** function ___aldiv *****************
 11422 ;; Defined at:
 11423 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\aldiv.c"
 11424 ;; Parameters:    Size  Location     Type
 11425 ;;  divisor         4    4[BANK0 ] long 
 11426 ;;  dividend        4    8[BANK0 ] long 
 11427 ;; Auto vars:     Size  Location     Type
 11428 ;;  quotient        4   14[BANK0 ] long 
 11429 ;;  sign            1   13[BANK0 ] unsigned char 
 11430 ;;  counter         1   12[BANK0 ] unsigned char 
 11431 ;; Return value:  Size  Location     Type
 11432 ;;                  4    4[BANK0 ] long 
 11433 ;; Registers used:
 11434 ;;		wreg, status,2, status,0
 11435 ;; Tracked objects:
 11436 ;;		On entry : 0/0
 11437 ;;		On exit  : 0/0
 11438 ;;		Unchanged: 0/0
 11439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11440 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11441 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11442 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11443 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11444 ;;Total ram usage:       15 bytes
 11445 ;; Hardware stack levels used:    1
 11446 ;; Hardware stack levels required when called:    1
 11447 ;; This function calls:
 11448 ;;		Nothing
 11449 ;; This function is called by:
 11450 ;;		_pid_pwm1_idrv_run
 11451 ;;		_calc_expect_vout_adc_value
 11452 ;;		_m_int_2_str
 11453 ;;		_m_int_2_str_ex
 11454 ;; This function uses a non-reentrant model
 11455 ;;
 11456                           
 11457                           
 11458                           ;psect for function ___aldiv
 11459  1329                     ___aldiv:	
 11460                           
 11461                           ;incstack = 0
 11462                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 11463  1329  0020               	movlb	0	; select bank0
 11464  132A  01AD               	clrf	___aldiv@sign
 11465  132B  1FA7               	btfss	___aldiv@divisor+3,7
 11466  132C  2B3A               	goto	l1159
 11467  132D  09A4               	comf	___aldiv@divisor,f
 11468  132E  09A5               	comf	___aldiv@divisor+1,f
 11469  132F  09A6               	comf	___aldiv@divisor+2,f
 11470  1330  09A7               	comf	___aldiv@divisor+3,f
 11471  1331  0AA4               	incf	___aldiv@divisor,f
 11472  1332  1903               	skipnz
 11473  1333  0AA5               	incf	___aldiv@divisor+1,f
 11474  1334  1903               	skipnz
 11475  1335  0AA6               	incf	___aldiv@divisor+2,f
 11476  1336  1903               	skipnz
 11477  1337  0AA7               	incf	___aldiv@divisor+3,f
 11478  1338  01AD               	clrf	___aldiv@sign
 11479  1339  0AAD               	incf	___aldiv@sign,f
 11480  133A                     l1159:	
 11481  133A  1FAB               	btfss	___aldiv@dividend+3,7
 11482  133B  2B4B               	goto	l5077
 11483  133C  09A8               	comf	___aldiv@dividend,f
 11484  133D  09A9               	comf	___aldiv@dividend+1,f
 11485  133E  09AA               	comf	___aldiv@dividend+2,f
 11486  133F  09AB               	comf	___aldiv@dividend+3,f
 11487  1340  0AA8               	incf	___aldiv@dividend,f
 11488  1341  1903               	skipnz
 11489  1342  0AA9               	incf	___aldiv@dividend+1,f
 11490  1343  1903               	skipnz
 11491  1344  0AAA               	incf	___aldiv@dividend+2,f
 11492  1345  1903               	skipnz
 11493  1346  0AAB               	incf	___aldiv@dividend+3,f
 11494  1347  3001               	movlw	1
 11495  1348  00F9               	movwf	??___aldiv
 11496  1349  0879               	movf	??___aldiv,w
 11497  134A  06AD               	xorwf	___aldiv@sign,f
 11498  134B                     l5077:	
 11499  134B  3000               	movlw	0
 11500  134C  00B1               	movwf	___aldiv@quotient+3
 11501  134D  3000               	movlw	0
 11502  134E  00B0               	movwf	___aldiv@quotient+2
 11503  134F  3000               	movlw	0
 11504  1350  00AF               	movwf	___aldiv@quotient+1
 11505  1351  3000               	movlw	0
 11506  1352  00AE               	movwf	___aldiv@quotient
 11507  1353  0827               	movf	___aldiv@divisor+3,w
 11508  1354  0426               	iorwf	___aldiv@divisor+2,w
 11509  1355  0425               	iorwf	___aldiv@divisor+1,w
 11510  1356  0424               	iorwf	___aldiv@divisor,w
 11511  1357  1903               	skipnz
 11512  1358  2B94               	goto	l5099
 11513  1359  01AC               	clrf	___aldiv@counter
 11514  135A  0AAC               	incf	___aldiv@counter,f
 11515  135B                     l5085:	
 11516  135B  1BA7               	btfsc	___aldiv@divisor+3,7
 11517  135C  2B69               	goto	l5087
 11518  135D  3001               	movlw	1
 11519  135E                     u4545:	
 11520  135E  35A4               	lslf	___aldiv@divisor,f
 11521  135F  0DA5               	rlf	___aldiv@divisor+1,f
 11522  1360  0DA6               	rlf	___aldiv@divisor+2,f
 11523  1361  0DA7               	rlf	___aldiv@divisor+3,f
 11524  1362  0B89               	decfsz	9,f
 11525  1363  2B5E               	goto	u4545
 11526  1364  3001               	movlw	1
 11527  1365  00F9               	movwf	??___aldiv
 11528  1366  0879               	movf	??___aldiv,w
 11529  1367  07AC               	addwf	___aldiv@counter,f
 11530  1368  2B5B               	goto	l5085
 11531  1369                     l5087:	
 11532  1369  3001               	movlw	1
 11533  136A                     u4565:	
 11534  136A  35AE               	lslf	___aldiv@quotient,f
 11535  136B  0DAF               	rlf	___aldiv@quotient+1,f
 11536  136C  0DB0               	rlf	___aldiv@quotient+2,f
 11537  136D  0DB1               	rlf	___aldiv@quotient+3,f
 11538  136E  0B89               	decfsz	9,f
 11539  136F  2B6A               	goto	u4565
 11540  1370  0827               	movf	___aldiv@divisor+3,w
 11541  1371  022B               	subwf	___aldiv@dividend+3,w
 11542  1372  1D03               	skipz
 11543  1373  2B7E               	goto	u4575
 11544  1374  0826               	movf	___aldiv@divisor+2,w
 11545  1375  022A               	subwf	___aldiv@dividend+2,w
 11546  1376  1D03               	skipz
 11547  1377  2B7E               	goto	u4575
 11548  1378  0825               	movf	___aldiv@divisor+1,w
 11549  1379  0229               	subwf	___aldiv@dividend+1,w
 11550  137A  1D03               	skipz
 11551  137B  2B7E               	goto	u4575
 11552  137C  0824               	movf	___aldiv@divisor,w
 11553  137D  0228               	subwf	___aldiv@dividend,w
 11554  137E                     u4575:	
 11555  137E  1C03               	skipc
 11556  137F  2B89               	goto	l5095
 11557  1380  0824               	movf	___aldiv@divisor,w
 11558  1381  02A8               	subwf	___aldiv@dividend,f
 11559  1382  0825               	movf	___aldiv@divisor+1,w
 11560  1383  3BA9               	subwfb	___aldiv@dividend+1,f
 11561  1384  0826               	movf	___aldiv@divisor+2,w
 11562  1385  3BAA               	subwfb	___aldiv@dividend+2,f
 11563  1386  0827               	movf	___aldiv@divisor+3,w
 11564  1387  3BAB               	subwfb	___aldiv@dividend+3,f
 11565  1388  142E               	bsf	___aldiv@quotient,0
 11566  1389                     l5095:	
 11567  1389  3001               	movlw	1
 11568  138A                     u4585:	
 11569  138A  36A7               	lsrf	___aldiv@divisor+3,f
 11570  138B  0CA6               	rrf	___aldiv@divisor+2,f
 11571  138C  0CA5               	rrf	___aldiv@divisor+1,f
 11572  138D  0CA4               	rrf	___aldiv@divisor,f
 11573  138E  0B89               	decfsz	9,f
 11574  138F  2B8A               	goto	u4585
 11575  1390  3001               	movlw	1
 11576  1391  02AC               	subwf	___aldiv@counter,f
 11577  1392  1D03               	btfss	3,2
 11578  1393  2B69               	goto	l5087
 11579  1394                     l5099:	
 11580  1394  082D               	movf	___aldiv@sign,w
 11581  1395  1903               	btfsc	3,2
 11582  1396  2BA2               	goto	l5103
 11583  1397  09AE               	comf	___aldiv@quotient,f
 11584  1398  09AF               	comf	___aldiv@quotient+1,f
 11585  1399  09B0               	comf	___aldiv@quotient+2,f
 11586  139A  09B1               	comf	___aldiv@quotient+3,f
 11587  139B  0AAE               	incf	___aldiv@quotient,f
 11588  139C  1903               	skipnz
 11589  139D  0AAF               	incf	___aldiv@quotient+1,f
 11590  139E  1903               	skipnz
 11591  139F  0AB0               	incf	___aldiv@quotient+2,f
 11592  13A0  1903               	skipnz
 11593  13A1  0AB1               	incf	___aldiv@quotient+3,f
 11594  13A2                     l5103:	
 11595  13A2  0831               	movf	___aldiv@quotient+3,w
 11596  13A3  00A7               	movwf	?___aldiv+3
 11597  13A4  0830               	movf	___aldiv@quotient+2,w
 11598  13A5  00A6               	movwf	?___aldiv+2
 11599  13A6  082F               	movf	___aldiv@quotient+1,w
 11600  13A7  00A5               	movwf	?___aldiv+1
 11601  13A8  082E               	movf	___aldiv@quotient,w
 11602  13A9  00A4               	movwf	?___aldiv
 11603  13AA  0008               	return
 11604  13AB                     __end_of___aldiv:	
 11605                           
 11606                           	psect	text35
 11607  11F9                     __ptext35:	
 11608 ;; *************** function _adc_sample *****************
 11609 ;; Defined at:
 11610 ;;		line 187 in file "src/api/sample.c"
 11611 ;; Parameters:    Size  Location     Type
 11612 ;;  ch              1    wreg     unsigned char 
 11613 ;;  gfvr            1    4[COMMON] unsigned char 
 11614 ;;  num             1    5[COMMON] unsigned char 
 11615 ;; Auto vars:     Size  Location     Type
 11616 ;;  ch              1    0[BANK0 ] unsigned char 
 11617 ;;  t16             2    5[BANK0 ] unsigned int 
 11618 ;;  ret             2    3[BANK0 ] unsigned int 
 11619 ;;  i               2    1[BANK0 ] unsigned int 
 11620 ;; Return value:  Size  Location     Type
 11621 ;;                  2    4[COMMON] unsigned int 
 11622 ;; Registers used:
 11623 ;;		wreg, status,2, status,0, pclath, cstack
 11624 ;; Tracked objects:
 11625 ;;		On entry : 0/0
 11626 ;;		On exit  : 0/0
 11627 ;;		Unchanged: 0/0
 11628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11629 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11630 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11631 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11632 ;;      Totals:         5       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11633 ;;Total ram usage:       12 bytes
 11634 ;; Hardware stack levels used:    1
 11635 ;; Hardware stack levels required when called:    2
 11636 ;; This function calls:
 11637 ;;		_adc_init
 11638 ;;		_fvr_set_gain
 11639 ;; This function is called by:
 11640 ;;		_main
 11641 ;; This function uses a non-reentrant model
 11642 ;;
 11643                           
 11644                           
 11645                           ;psect for function _adc_sample
 11646  11F9                     _adc_sample:	
 11647                           
 11648                           ;incstack = 0
 11649                           ; Regs used in _adc_sample: [wreg+status,2+status,0+pclath+cstack]
 11650                           ;adc_sample@ch stored from wreg
 11651  11F9  0020               	movlb	0	; select bank0
 11652  11FA  00A0               	movwf	adc_sample@ch
 11653                           
 11654                           ;sample.c: 189: uint16_t i;;sample.c: 190: uint16_t ret=0;
 11655  11FB  01A3               	clrf	adc_sample@ret
 11656  11FC  01A4               	clrf	adc_sample@ret+1
 11657                           
 11658                           ;sample.c: 191: uint16_t t16=0;
 11659  11FD  01A5               	clrf	adc_sample@t16
 11660  11FE  01A6               	clrf	adc_sample@t16+1
 11661                           
 11662                           ;sample.c: 193: fvr_set_gain(gfvr);
 11663  11FF  0874               	movf	adc_sample@gfvr,w
 11664  1200  319C  2467  3191   	fcall	_fvr_set_gain
 11665                           
 11666                           ;sample.c: 194: adc_init((adc_channel_t)ch);
 11667  1203  0020               	movlb	0	; select bank0
 11668  1204  0820               	movf	adc_sample@ch,w
 11669  1205  319C  2453  3191   	fcall	_adc_init
 11670                           
 11671                           ;sample.c: 195: _delay((unsigned long)((50)*(16000000/4000000.0)));
 11672  1208  3042               	movlw	66
 11673  1209                     u5107:	
 11674  1209  0B89               	decfsz	9,f
 11675  120A  2A09               	goto	u5107
 11676  120B  3200               	nop2
 11677                           
 11678                           ;sample.c: 196: ADCON0bits.GO_nDONE = 1;
 11679  120C  0021               	movlb	1	; select bank1
 11680  120D  149D               	bsf	29,1	;volatile
 11681  120E                     l633:	
 11682                           ;sample.c: 197: while (ADCON0bits.GO_nDONE);
 11683                           
 11684  120E  189D               	btfsc	29,1	;volatile
 11685  120F  2A0E               	goto	l633
 11686                           
 11687                           ;sample.c: 198: if(num>64)num=64;
 11688  1210  3041               	movlw	65
 11689  1211  0275               	subwf	adc_sample@num,w
 11690  1212  1C03               	skipc
 11691  1213  2A18               	goto	l4177
 11692  1214  3040               	movlw	64
 11693  1215  00F6               	movwf	??_adc_sample
 11694  1216  0876               	movf	??_adc_sample,w
 11695  1217  00F5               	movwf	adc_sample@num
 11696  1218                     l4177:	
 11697                           
 11698                           ;sample.c: 199: for(i=0;i<num;i++){
 11699  1218  0020               	movlb	0	; select bank0
 11700  1219  01A1               	clrf	adc_sample@i
 11701  121A  01A2               	clrf	adc_sample@i+1
 11702  121B                     l4187:	
 11703  121B  0875               	movf	adc_sample@num,w
 11704  121C  00F6               	movwf	??_adc_sample
 11705  121D  01F7               	clrf	??_adc_sample+1
 11706  121E  0877               	movf	??_adc_sample+1,w
 11707  121F  0222               	subwf	adc_sample@i+1,w
 11708  1220  1D03               	skipz
 11709  1221  2A24               	goto	u3255
 11710  1222  0876               	movf	??_adc_sample,w
 11711  1223  0221               	subwf	adc_sample@i,w
 11712  1224                     u3255:	
 11713  1224  1803               	btfsc	3,0
 11714  1225  2A51               	goto	l4189
 11715                           
 11716                           ;sample.c: 200: ADCON0bits.GO_nDONE = 1;
 11717  1226  0021               	movlb	1	; select bank1
 11718  1227  149D               	bsf	29,1	;volatile
 11719  1228                     l639:	
 11720                           ;sample.c: 201: while (ADCON0bits.GO_nDONE);
 11721                           
 11722  1228  189D               	btfsc	29,1	;volatile
 11723  1229  2A28               	goto	l639
 11724                           
 11725                           ;sample.c: 202: __nop();
 11726  122A  0000               	nop
 11727                           
 11728                           ;sample.c: 203: t16=ADRESH;
 11729  122B  0021               	movlb	1	; select bank1
 11730  122C  081C               	movf	28,w	;volatile
 11731  122D  00F6               	movwf	??_adc_sample
 11732  122E  01F7               	clrf	??_adc_sample+1
 11733  122F  0876               	movf	??_adc_sample,w
 11734  1230  0020               	movlb	0	; select bank0
 11735  1231  00A5               	movwf	adc_sample@t16
 11736  1232  0877               	movf	??_adc_sample+1,w
 11737  1233  00A6               	movwf	adc_sample@t16+1
 11738                           
 11739                           ;sample.c: 204: t16<<=2;
 11740  1234  3002               	movlw	2
 11741  1235                     u3235:	
 11742  1235  35A5               	lslf	adc_sample@t16,f
 11743  1236  0DA6               	rlf	adc_sample@t16+1,f
 11744  1237  0B89               	decfsz	9,f
 11745  1238  2A35               	goto	u3235
 11746                           
 11747                           ;sample.c: 205: t16|=(uint16_t)(ADRESL>>6);
 11748  1239  0021               	movlb	1	; select bank1
 11749  123A  081B               	movf	27,w	;volatile
 11750  123B  00F6               	movwf	??_adc_sample
 11751  123C  3006               	movlw	6
 11752  123D                     u3245:	
 11753  123D  36F6               	lsrf	??_adc_sample,f
 11754  123E  0B89               	decfsz	9,f
 11755  123F  2A3D               	goto	u3245
 11756  1240  0876               	movf	??_adc_sample,w
 11757  1241  00F7               	movwf	??_adc_sample+1
 11758  1242  01F8               	clrf	??_adc_sample+2
 11759  1243  0877               	movf	??_adc_sample+1,w
 11760  1244  0020               	movlb	0	; select bank0
 11761  1245  04A5               	iorwf	adc_sample@t16,f
 11762  1246  0878               	movf	??_adc_sample+2,w
 11763  1247  04A6               	iorwf	adc_sample@t16+1,f
 11764                           
 11765                           ;sample.c: 207: ret+=t16;
 11766  1248  0825               	movf	adc_sample@t16,w
 11767  1249  07A3               	addwf	adc_sample@ret,f
 11768  124A  0826               	movf	adc_sample@t16+1,w
 11769  124B  3DA4               	addwfc	adc_sample@ret+1,f
 11770  124C  3001               	movlw	1
 11771  124D  07A1               	addwf	adc_sample@i,f
 11772  124E  3000               	movlw	0
 11773  124F  3DA2               	addwfc	adc_sample@i+1,f
 11774  1250  2A1B               	goto	l4187
 11775  1251                     l4189:	
 11776                           
 11777                           ;sample.c: 212: return ret;
 11778  1251  0824               	movf	adc_sample@ret+1,w
 11779  1252  00F5               	movwf	?_adc_sample+1
 11780  1253  0823               	movf	adc_sample@ret,w
 11781  1254  00F4               	movwf	?_adc_sample
 11782  1255  0008               	return
 11783  1256                     __end_of_adc_sample:	
 11784                           
 11785                           	psect	text36
 11786  1C67                     __ptext36:	
 11787 ;; *************** function _fvr_set_gain *****************
 11788 ;; Defined at:
 11789 ;;		line 134 in file "src/api/sample.c"
 11790 ;; Parameters:    Size  Location     Type
 11791 ;;  g               1    wreg     unsigned char 
 11792 ;; Auto vars:     Size  Location     Type
 11793 ;;  g               1    3[COMMON] unsigned char 
 11794 ;;  t8              1    2[COMMON] unsigned char 
 11795 ;; Return value:  Size  Location     Type
 11796 ;;                  1    wreg      void 
 11797 ;; Registers used:
 11798 ;;		wreg, status,2, status,0
 11799 ;; Tracked objects:
 11800 ;;		On entry : 0/0
 11801 ;;		On exit  : 0/0
 11802 ;;		Unchanged: 0/0
 11803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11805 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11806 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11807 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11808 ;;Total ram usage:        3 bytes
 11809 ;; Hardware stack levels used:    1
 11810 ;; Hardware stack levels required when called:    1
 11811 ;; This function calls:
 11812 ;;		Nothing
 11813 ;; This function is called by:
 11814 ;;		_adc_sample
 11815 ;; This function uses a non-reentrant model
 11816 ;;
 11817                           
 11818                           
 11819                           ;psect for function _fvr_set_gain
 11820  1C67                     _fvr_set_gain:	
 11821                           
 11822                           ;incstack = 0
 11823                           ; Regs used in _fvr_set_gain: [wreg+status,2+status,0]
 11824                           ;fvr_set_gain@g stored from wreg
 11825  1C67  00F3               	movwf	fvr_set_gain@g
 11826                           
 11827                           ;sample.c: 136: uint8_t t8=0x80;
 11828  1C68  3080               	movlw	128
 11829  1C69  00F1               	movwf	??_fvr_set_gain
 11830  1C6A  0871               	movf	??_fvr_set_gain,w
 11831  1C6B  00F2               	movwf	fvr_set_gain@t8
 11832                           
 11833                           ;sample.c: 137: if(g>3)g=3;
 11834  1C6C  3004               	movlw	4
 11835  1C6D  0273               	subwf	fvr_set_gain@g,w
 11836  1C6E  1C03               	skipc
 11837  1C6F  2C74               	goto	l3735
 11838  1C70  3003               	movlw	3
 11839  1C71  00F1               	movwf	??_fvr_set_gain
 11840  1C72  0871               	movf	??_fvr_set_gain,w
 11841  1C73  00F3               	movwf	fvr_set_gain@g
 11842  1C74                     l3735:	
 11843                           
 11844                           ;sample.c: 138: t8|=g;
 11845  1C74  0873               	movf	fvr_set_gain@g,w
 11846  1C75  00F1               	movwf	??_fvr_set_gain
 11847  1C76  0871               	movf	??_fvr_set_gain,w
 11848  1C77  04F2               	iorwf	fvr_set_gain@t8,f
 11849                           
 11850                           ;sample.c: 139: FVRCON = t8;
 11851  1C78  0872               	movf	fvr_set_gain@t8,w
 11852  1C79  0022               	movlb	2	; select bank2
 11853  1C7A  0097               	movwf	23	;volatile
 11854  1C7B                     l621:	
 11855                           ;sample.c: 140: while(!(FVRCONbits.FVRRDY));
 11856                           
 11857  1C7B  1B17               	btfsc	23,6	;volatile
 11858  1C7C  0008               	return
 11859  1C7D  2C7B               	goto	l621
 11860  1C7E                     __end_of_fvr_set_gain:	
 11861                           
 11862                           	psect	text37
 11863  1C53                     __ptext37:	
 11864 ;; *************** function _adc_init *****************
 11865 ;; Defined at:
 11866 ;;		line 143 in file "src/api/sample.c"
 11867 ;; Parameters:    Size  Location     Type
 11868 ;;  ch              1    wreg     enum E4099
 11869 ;; Auto vars:     Size  Location     Type
 11870 ;;  ch              1    2[COMMON] enum E4099
 11871 ;; Return value:  Size  Location     Type
 11872 ;;                  1    wreg      void 
 11873 ;; Registers used:
 11874 ;;		wreg, status,2, status,0
 11875 ;; Tracked objects:
 11876 ;;		On entry : 0/0
 11877 ;;		On exit  : 0/0
 11878 ;;		Unchanged: 0/0
 11879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11881 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11882 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11883 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11884 ;;Total ram usage:        2 bytes
 11885 ;; Hardware stack levels used:    1
 11886 ;; Hardware stack levels required when called:    1
 11887 ;; This function calls:
 11888 ;;		Nothing
 11889 ;; This function is called by:
 11890 ;;		_adc_sample
 11891 ;; This function uses a non-reentrant model
 11892 ;;
 11893                           
 11894                           
 11895                           ;psect for function _adc_init
 11896  1C53                     _adc_init:	
 11897                           
 11898                           ;incstack = 0
 11899                           ; Regs used in _adc_init: [wreg+status,2+status,0]
 11900                           ;adc_init@ch stored from wreg
 11901  1C53  00F2               	movwf	adc_init@ch
 11902  1C54                     l627:	
 11903                           ;sample.c: 145: while (ADCON0bits.GO_nDONE);
 11904                           
 11905  1C54  0021               	movlb	1	; select bank1
 11906  1C55  189D               	btfsc	29,1	;volatile
 11907  1C56  2C54               	goto	l627
 11908                           
 11909                           ;sample.c: 146: ADCON0bits.CHS = ch;
 11910  1C57  0872               	movf	adc_init@ch,w
 11911  1C58  00F1               	movwf	??_adc_init
 11912  1C59  0DF1               	rlf	??_adc_init,f
 11913  1C5A  0DF1               	rlf	??_adc_init,f
 11914  1C5B  081D               	movf	29,w	;volatile
 11915  1C5C  0671               	xorwf	??_adc_init,w
 11916  1C5D  3983               	andlw	-125
 11917  1C5E  0671               	xorwf	??_adc_init,w
 11918  1C5F  009D               	movwf	29	;volatile
 11919                           
 11920                           ;sample.c: 147: ADCON0bits.ADON = 1;
 11921  1C60  141D               	bsf	29,0	;volatile
 11922                           
 11923                           ;sample.c: 148: ADCON1 = 0x63;
 11924  1C61  3063               	movlw	99
 11925  1C62  009E               	movwf	30	;volatile
 11926                           
 11927                           ;sample.c: 149: ADCON2 = 0x00;
 11928  1C63  019F               	clrf	31	;volatile
 11929                           
 11930                           ;sample.c: 150: ADRESL = 0x00;
 11931  1C64  019B               	clrf	27	;volatile
 11932                           
 11933                           ;sample.c: 151: ADRESH = 0x00;
 11934  1C65  019C               	clrf	28	;volatile
 11935  1C66  0008               	return
 11936  1C67                     __end_of_adc_init:	
 11937                           
 11938                           	psect	text38
 11939  1CE2                     __ptext38:	
 11940 ;; *************** function _SYSTEM_Initialize *****************
 11941 ;; Defined at:
 11942 ;;		line 70 in file "mcc_generated_files/mcc.c"
 11943 ;; Parameters:    Size  Location     Type
 11944 ;;		None
 11945 ;; Auto vars:     Size  Location     Type
 11946 ;;		None
 11947 ;; Return value:  Size  Location     Type
 11948 ;;                  1    wreg      void 
 11949 ;; Registers used:
 11950 ;;		wreg, status,2, status,0, pclath, cstack
 11951 ;; Tracked objects:
 11952 ;;		On entry : 0/0
 11953 ;;		On exit  : 0/0
 11954 ;;		Unchanged: 0/0
 11955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11959 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11960 ;;Total ram usage:        0 bytes
 11961 ;; Hardware stack levels used:    1
 11962 ;; Hardware stack levels required when called:    3
 11963 ;; This function calls:
 11964 ;;		_ADC1_Initialize
 11965 ;;		_EUSART_Initialize
 11966 ;;		_FVR_Initialize
 11967 ;;		_OSCILLATOR_Initialize
 11968 ;;		_PIN_MANAGER_Initialize
 11969 ;;		_PWM1_Initialize
 11970 ;;		_PWM2_Initialize
 11971 ;;		_TMR2_Initialize
 11972 ;;		_WDT_Initialize
 11973 ;; This function is called by:
 11974 ;;		_main
 11975 ;; This function uses a non-reentrant model
 11976 ;;
 11977                           
 11978                           
 11979                           ;psect for function _SYSTEM_Initialize
 11980  1CE2                     _SYSTEM_Initialize:	
 11981                           
 11982                           ;mcc.c: 73: PIN_MANAGER_Initialize();
 11983                           
 11984                           ;incstack = 0
 11985                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 11986  1CE2  3190  202A  319C   	fcall	_PIN_MANAGER_Initialize
 11987                           
 11988                           ;mcc.c: 74: OSCILLATOR_Initialize();
 11989  1CE5  318F  27FE  319C   	fcall	_OSCILLATOR_Initialize
 11990                           
 11991                           ;mcc.c: 75: WDT_Initialize();
 11992  1CE8  319B  23FA  319C   	fcall	_WDT_Initialize
 11993                           
 11994                           ;mcc.c: 76: FVR_Initialize();
 11995  1CEB  319B  23F6  319C   	fcall	_FVR_Initialize
 11996                           
 11997                           ;mcc.c: 77: PWM1_Initialize();
 11998  1CEE  319C  247E  319C   	fcall	_PWM1_Initialize
 11999                           
 12000                           ;mcc.c: 78: PWM2_Initialize();
 12001  1CF1  319C  2497  319C   	fcall	_PWM2_Initialize
 12002                           
 12003                           ;mcc.c: 79: ADC1_Initialize();
 12004  1CF4  319C  2402  319C   	fcall	_ADC1_Initialize
 12005                           
 12006                           ;mcc.c: 80: TMR2_Initialize();
 12007  1CF7  319C  2440  319C   	fcall	_TMR2_Initialize
 12008                           
 12009                           ;mcc.c: 81: EUSART_Initialize();
 12010  1CFA  319C  242D         	fcall	_EUSART_Initialize
 12011  1CFC  0008               	return
 12012  1CFD                     __end_of_SYSTEM_Initialize:	
 12013                           
 12014                           	psect	text39
 12015  1BFA                     __ptext39:	
 12016 ;; *************** function _WDT_Initialize *****************
 12017 ;; Defined at:
 12018 ;;		line 94 in file "mcc_generated_files/mcc.c"
 12019 ;; Parameters:    Size  Location     Type
 12020 ;;		None
 12021 ;; Auto vars:     Size  Location     Type
 12022 ;;		None
 12023 ;; Return value:  Size  Location     Type
 12024 ;;                  1    wreg      void 
 12025 ;; Registers used:
 12026 ;;		wreg
 12027 ;; Tracked objects:
 12028 ;;		On entry : 0/0
 12029 ;;		On exit  : 0/0
 12030 ;;		Unchanged: 0/0
 12031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12035 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12036 ;;Total ram usage:        0 bytes
 12037 ;; Hardware stack levels used:    1
 12038 ;; Hardware stack levels required when called:    1
 12039 ;; This function calls:
 12040 ;;		Nothing
 12041 ;; This function is called by:
 12042 ;;		_SYSTEM_Initialize
 12043 ;; This function uses a non-reentrant model
 12044 ;;
 12045                           
 12046                           
 12047                           ;psect for function _WDT_Initialize
 12048  1BFA                     _WDT_Initialize:	
 12049                           
 12050                           ;mcc.c: 97: WDTCON = 0x16;
 12051                           
 12052                           ;incstack = 0
 12053                           ; Regs used in _WDT_Initialize: [wreg]
 12054  1BFA  3016               	movlw	22
 12055  1BFB  0021               	movlb	1	; select bank1
 12056  1BFC  0097               	movwf	23	;volatile
 12057  1BFD  0008               	return
 12058  1BFE                     __end_of_WDT_Initialize:	
 12059                           
 12060                           	psect	text40
 12061  1C40                     __ptext40:	
 12062 ;; *************** function _TMR2_Initialize *****************
 12063 ;; Defined at:
 12064 ;;		line 63 in file "mcc_generated_files/tmr2.c"
 12065 ;; Parameters:    Size  Location     Type
 12066 ;;		None
 12067 ;; Auto vars:     Size  Location     Type
 12068 ;;		None
 12069 ;; Return value:  Size  Location     Type
 12070 ;;                  1    wreg      void 
 12071 ;; Registers used:
 12072 ;;		wreg, status,2, status,0, pclath, cstack
 12073 ;; Tracked objects:
 12074 ;;		On entry : 0/0
 12075 ;;		On exit  : 0/0
 12076 ;;		Unchanged: 0/0
 12077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12081 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12082 ;;Total ram usage:        0 bytes
 12083 ;; Hardware stack levels used:    1
 12084 ;; Hardware stack levels required when called:    2
 12085 ;; This function calls:
 12086 ;;		_TMR2_SetInterruptHandler
 12087 ;;		_TMR2_StartTimer
 12088 ;; This function is called by:
 12089 ;;		_SYSTEM_Initialize
 12090 ;; This function uses a non-reentrant model
 12091 ;;
 12092                           
 12093                           
 12094                           ;psect for function _TMR2_Initialize
 12095  1C40                     _TMR2_Initialize:	
 12096                           
 12097                           ;tmr2.c: 68: T2CON = 0x4B;
 12098                           
 12099                           ;incstack = 0
 12100                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
 12101  1C40  304B               	movlw	75
 12102  1C41  0020               	movlb	0	; select bank0
 12103  1C42  009C               	movwf	28	;volatile
 12104                           
 12105                           ;tmr2.c: 71: PR2 = 0x7C;
 12106  1C43  307C               	movlw	124
 12107  1C44  009B               	movwf	27	;volatile
 12108                           
 12109                           ;tmr2.c: 74: TMR2 = 0x00;
 12110  1C45  019A               	clrf	26	;volatile
 12111                           
 12112                           ;tmr2.c: 77: PIR1bits.TMR2IF = 0;
 12113  1C46  1091               	bcf	17,1	;volatile
 12114                           
 12115                           ;tmr2.c: 80: PIE1bits.TMR2IE = 1;
 12116  1C47  0021               	movlb	1	; select bank1
 12117  1C48  1491               	bsf	17,1	;volatile
 12118                           
 12119                           ;tmr2.c: 83: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
 12120  1C49  3000               	movlw	0
 12121  1C4A  00F1               	movwf	TMR2_SetInterruptHandler@InterruptHandler
 12122  1C4B  3000               	movlw	0
 12123  1C4C  00F2               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
 12124  1C4D  318F  27F8  319C   	fcall	_TMR2_SetInterruptHandler
 12125                           
 12126                           ;tmr2.c: 86: TMR2_StartTimer();
 12127  1C50  3190  2000         	fcall	_TMR2_StartTimer
 12128  1C52  0008               	return
 12129  1C53                     __end_of_TMR2_Initialize:	
 12130                           
 12131                           	psect	text41
 12132  1000                     __ptext41:	
 12133 ;; *************** function _TMR2_StartTimer *****************
 12134 ;; Defined at:
 12135 ;;		line 89 in file "mcc_generated_files/tmr2.c"
 12136 ;; Parameters:    Size  Location     Type
 12137 ;;		None
 12138 ;; Auto vars:     Size  Location     Type
 12139 ;;		None
 12140 ;; Return value:  Size  Location     Type
 12141 ;;                  1    wreg      void 
 12142 ;; Registers used:
 12143 ;;		None
 12144 ;; Tracked objects:
 12145 ;;		On entry : 0/0
 12146 ;;		On exit  : 0/0
 12147 ;;		Unchanged: 0/0
 12148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12153 ;;Total ram usage:        0 bytes
 12154 ;; Hardware stack levels used:    1
 12155 ;; Hardware stack levels required when called:    1
 12156 ;; This function calls:
 12157 ;;		Nothing
 12158 ;; This function is called by:
 12159 ;;		_TMR2_Initialize
 12160 ;; This function uses a non-reentrant model
 12161 ;;
 12162                           
 12163                           
 12164                           ;psect for function _TMR2_StartTimer
 12165  1000                     _TMR2_StartTimer:	
 12166                           
 12167                           ;tmr2.c: 92: T2CONbits.TMR2ON = 1;
 12168                           
 12169                           ;incstack = 0
 12170                           ; Regs used in _TMR2_StartTimer: []
 12171  1000  0020               	movlb	0	; select bank0
 12172  1001  151C               	bsf	28,2	;volatile
 12173  1002  0008               	return
 12174  1003                     __end_of_TMR2_StartTimer:	
 12175                           
 12176                           	psect	text42
 12177  0FF8                     __ptext42:	
 12178 ;; *************** function _TMR2_SetInterruptHandler *****************
 12179 ;; Defined at:
 12180 ;;		line 142 in file "mcc_generated_files/tmr2.c"
 12181 ;; Parameters:    Size  Location     Type
 12182 ;;  InterruptHan    2    1[COMMON] PTR FTN()void 
 12183 ;;		 -> TMR2_DefaultInterruptHandler(1), 
 12184 ;; Auto vars:     Size  Location     Type
 12185 ;;		None
 12186 ;; Return value:  Size  Location     Type
 12187 ;;                  1    wreg      void 
 12188 ;; Registers used:
 12189 ;;		wreg
 12190 ;; Tracked objects:
 12191 ;;		On entry : 0/0
 12192 ;;		On exit  : 0/0
 12193 ;;		Unchanged: 0/0
 12194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12195 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12198 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12199 ;;Total ram usage:        2 bytes
 12200 ;; Hardware stack levels used:    1
 12201 ;; Hardware stack levels required when called:    1
 12202 ;; This function calls:
 12203 ;;		Nothing
 12204 ;; This function is called by:
 12205 ;;		_TMR2_Initialize
 12206 ;; This function uses a non-reentrant model
 12207 ;;
 12208                           
 12209                           
 12210                           ;psect for function _TMR2_SetInterruptHandler
 12211  0FF8                     _TMR2_SetInterruptHandler:	
 12212                           
 12213                           ;tmr2.c: 143: TMR2_InterruptHandler = InterruptHandler;
 12214                           
 12215                           ;incstack = 0
 12216                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
 12217  0FF8  0872               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
 12218  0FF9  0020               	movlb	0	; select bank0
 12219  0FFA  00E2               	movwf	_TMR2_InterruptHandler+1
 12220  0FFB  0871               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
 12221  0FFC  00E1               	movwf	_TMR2_InterruptHandler
 12222  0FFD  0008               	return
 12223  0FFE                     __end_of_TMR2_SetInterruptHandler:	
 12224                           
 12225                           	psect	text43
 12226  1C97                     __ptext43:	
 12227 ;; *************** function _PWM2_Initialize *****************
 12228 ;; Defined at:
 12229 ;;		line 58 in file "mcc_generated_files/pwm2.c"
 12230 ;; Parameters:    Size  Location     Type
 12231 ;;		None
 12232 ;; Auto vars:     Size  Location     Type
 12233 ;;		None
 12234 ;; Return value:  Size  Location     Type
 12235 ;;                  1    wreg      void 
 12236 ;; Registers used:
 12237 ;;		wreg, status,2
 12238 ;; Tracked objects:
 12239 ;;		On entry : 0/0
 12240 ;;		On exit  : 0/0
 12241 ;;		Unchanged: 0/0
 12242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12246 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12247 ;;Total ram usage:        0 bytes
 12248 ;; Hardware stack levels used:    1
 12249 ;; Hardware stack levels required when called:    1
 12250 ;; This function calls:
 12251 ;;		Nothing
 12252 ;; This function is called by:
 12253 ;;		_SYSTEM_Initialize
 12254 ;; This function uses a non-reentrant model
 12255 ;;
 12256                           
 12257                           
 12258                           ;psect for function _PWM2_Initialize
 12259  1C97                     _PWM2_Initialize:	
 12260                           
 12261                           ;pwm2.c: 63: PWM2INTE = 0x01;
 12262                           
 12263                           ;incstack = 0
 12264                           ; Regs used in _PWM2_Initialize: [wreg+status,2]
 12265  1C97  3001               	movlw	1
 12266  1C98  003B               	movlb	27	; select bank27
 12267  1C99  00AC               	movwf	44	;volatile
 12268                           
 12269                           ;pwm2.c: 66: PWM2INTF = 0x00;
 12270  1C9A  01AD               	clrf	45	;volatile
 12271                           
 12272                           ;pwm2.c: 69: PWM2CLKCON = 0x00;
 12273  1C9B  01AE               	clrf	46	;volatile
 12274                           
 12275                           ;pwm2.c: 72: PWM2LDCON = 0x00;
 12276  1C9C  01AF               	clrf	47	;volatile
 12277                           
 12278                           ;pwm2.c: 75: PWM2OFCON = 0x00;
 12279  1C9D  01B0               	clrf	48	;volatile
 12280                           
 12281                           ;pwm2.c: 78: PWM2PHH = 0x00;
 12282  1C9E  01A2               	clrf	34	;volatile
 12283                           
 12284                           ;pwm2.c: 81: PWM2PHL = 0x02;
 12285  1C9F  3002               	movlw	2
 12286  1CA0  00A1               	movwf	33	;volatile
 12287                           
 12288                           ;pwm2.c: 84: PWM2DCH = 0x00;
 12289  1CA1  01A4               	clrf	36	;volatile
 12290                           
 12291                           ;pwm2.c: 87: PWM2DCL = 0xA0;
 12292  1CA2  30A0               	movlw	160
 12293  1CA3  00A3               	movwf	35	;volatile
 12294                           
 12295                           ;pwm2.c: 90: PWM2PRH = 0x06;
 12296  1CA4  3006               	movlw	6
 12297  1CA5  00A6               	movwf	38	;volatile
 12298                           
 12299                           ;pwm2.c: 93: PWM2PRL = 0x3F;
 12300  1CA6  303F               	movlw	63
 12301  1CA7  00A5               	movwf	37	;volatile
 12302                           
 12303                           ;pwm2.c: 96: PWM2OFH = 0x00;
 12304  1CA8  01A8               	clrf	40	;volatile
 12305                           
 12306                           ;pwm2.c: 99: PWM2OFL = 0x01;
 12307  1CA9  3001               	movlw	1
 12308  1CAA  00A7               	movwf	39	;volatile
 12309                           
 12310                           ;pwm2.c: 102: PWM2TMRH = 0x00;
 12311  1CAB  01AA               	clrf	42	;volatile
 12312                           
 12313                           ;pwm2.c: 105: PWM2TMRL = 0x00;
 12314  1CAC  01A9               	clrf	41	;volatile
 12315                           
 12316                           ;pwm2.c: 108: PWM2CON = 0x90;
 12317  1CAD  3090               	movlw	144
 12318  1CAE  00AB               	movwf	43	;volatile
 12319  1CAF  0008               	return
 12320  1CB0                     __end_of_PWM2_Initialize:	
 12321                           
 12322                           	psect	text44
 12323  1C7E                     __ptext44:	
 12324 ;; *************** function _PWM1_Initialize *****************
 12325 ;; Defined at:
 12326 ;;		line 58 in file "mcc_generated_files/pwm1.c"
 12327 ;; Parameters:    Size  Location     Type
 12328 ;;		None
 12329 ;; Auto vars:     Size  Location     Type
 12330 ;;		None
 12331 ;; Return value:  Size  Location     Type
 12332 ;;                  1    wreg      void 
 12333 ;; Registers used:
 12334 ;;		wreg, status,2
 12335 ;; Tracked objects:
 12336 ;;		On entry : 0/0
 12337 ;;		On exit  : 0/0
 12338 ;;		Unchanged: 0/0
 12339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12344 ;;Total ram usage:        0 bytes
 12345 ;; Hardware stack levels used:    1
 12346 ;; Hardware stack levels required when called:    1
 12347 ;; This function calls:
 12348 ;;		Nothing
 12349 ;; This function is called by:
 12350 ;;		_SYSTEM_Initialize
 12351 ;; This function uses a non-reentrant model
 12352 ;;
 12353                           
 12354                           
 12355                           ;psect for function _PWM1_Initialize
 12356  1C7E                     _PWM1_Initialize:	
 12357                           
 12358                           ;pwm1.c: 63: PWM1INTE = 0x01;
 12359                           
 12360                           ;incstack = 0
 12361                           ; Regs used in _PWM1_Initialize: [wreg+status,2]
 12362  1C7E  3001               	movlw	1
 12363  1C7F  003B               	movlb	27	; select bank27
 12364  1C80  009C               	movwf	28	;volatile
 12365                           
 12366                           ;pwm1.c: 66: PWM1INTF = 0x00;
 12367  1C81  019D               	clrf	29	;volatile
 12368                           
 12369                           ;pwm1.c: 69: PWM1CLKCON = 0x00;
 12370  1C82  019E               	clrf	30	;volatile
 12371                           
 12372                           ;pwm1.c: 72: PWM1LDCON = 0x00;
 12373  1C83  019F               	clrf	31	;volatile
 12374                           
 12375                           ;pwm1.c: 75: PWM1OFCON = 0x00;
 12376  1C84  01A0               	clrf	32	;volatile
 12377                           
 12378                           ;pwm1.c: 78: PWM1PHH = 0x00;
 12379  1C85  0192               	clrf	18	;volatile
 12380                           
 12381                           ;pwm1.c: 81: PWM1PHL = 0x02;
 12382  1C86  3002               	movlw	2
 12383  1C87  0091               	movwf	17	;volatile
 12384                           
 12385                           ;pwm1.c: 84: PWM1DCH = 0x00;
 12386  1C88  0194               	clrf	20	;volatile
 12387                           
 12388                           ;pwm1.c: 87: PWM1DCL = 0xa0;
 12389  1C89  30A0               	movlw	160
 12390  1C8A  0093               	movwf	19	;volatile
 12391                           
 12392                           ;pwm1.c: 90: PWM1PRH = 0x06;
 12393  1C8B  3006               	movlw	6
 12394  1C8C  0096               	movwf	22	;volatile
 12395                           
 12396                           ;pwm1.c: 93: PWM1PRL = 0x3F;
 12397  1C8D  303F               	movlw	63
 12398  1C8E  0095               	movwf	21	;volatile
 12399                           
 12400                           ;pwm1.c: 96: PWM1OFH = 0x00;
 12401  1C8F  0198               	clrf	24	;volatile
 12402                           
 12403                           ;pwm1.c: 99: PWM1OFL = 0x01;
 12404  1C90  3001               	movlw	1
 12405  1C91  0097               	movwf	23	;volatile
 12406                           
 12407                           ;pwm1.c: 102: PWM1TMRH = 0x00;
 12408  1C92  019A               	clrf	26	;volatile
 12409                           
 12410                           ;pwm1.c: 105: PWM1TMRL = 0x00;
 12411  1C93  0199               	clrf	25	;volatile
 12412                           
 12413                           ;pwm1.c: 108: PWM1CON = 0x90;
 12414  1C94  3090               	movlw	144
 12415  1C95  009B               	movwf	27	;volatile
 12416  1C96  0008               	return
 12417  1C97                     __end_of_PWM1_Initialize:	
 12418                           
 12419                           	psect	text45
 12420  102A                     __ptext45:	
 12421 ;; *************** function _PIN_MANAGER_Initialize *****************
 12422 ;; Defined at:
 12423 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
 12424 ;; Parameters:    Size  Location     Type
 12425 ;;		None
 12426 ;; Auto vars:     Size  Location     Type
 12427 ;;  state           1    1[COMMON] unsigned char 
 12428 ;; Return value:  Size  Location     Type
 12429 ;;                  1    wreg      void 
 12430 ;; Registers used:
 12431 ;;		wreg, status,2, status,0
 12432 ;; Tracked objects:
 12433 ;;		On entry : 0/0
 12434 ;;		On exit  : 0/0
 12435 ;;		Unchanged: 0/0
 12436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12438 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12440 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12441 ;;Total ram usage:        1 bytes
 12442 ;; Hardware stack levels used:    1
 12443 ;; Hardware stack levels required when called:    1
 12444 ;; This function calls:
 12445 ;;		Nothing
 12446 ;; This function is called by:
 12447 ;;		_SYSTEM_Initialize
 12448 ;; This function uses a non-reentrant model
 12449 ;;
 12450                           
 12451                           
 12452                           ;psect for function _PIN_MANAGER_Initialize
 12453  102A                     _PIN_MANAGER_Initialize:	
 12454                           
 12455                           ;pin_manager.c: 57: LATA = 0x00;
 12456                           
 12457                           ;incstack = 0
 12458                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
 12459  102A  0022               	movlb	2	; select bank2
 12460  102B  018C               	clrf	12	;volatile
 12461                           
 12462                           ;pin_manager.c: 58: LATC = 0x00;
 12463  102C  018E               	clrf	14	;volatile
 12464                           
 12465                           ;pin_manager.c: 63: TRISA = 0x0F;
 12466  102D  300F               	movlw	15
 12467  102E  0021               	movlb	1	; select bank1
 12468  102F  008C               	movwf	12	;volatile
 12469                           
 12470                           ;pin_manager.c: 64: TRISC = 0x1f;
 12471  1030  301F               	movlw	31
 12472  1031  008E               	movwf	14	;volatile
 12473                           
 12474                           ;pin_manager.c: 69: ANSELC = 0x0F;
 12475  1032  300F               	movlw	15
 12476  1033  0023               	movlb	3	; select bank3
 12477  1034  008E               	movwf	14	;volatile
 12478                           
 12479                           ;pin_manager.c: 70: ANSELA = 0x17;
 12480  1035  3017               	movlw	23
 12481  1036  008C               	movwf	12	;volatile
 12482                           
 12483                           ;pin_manager.c: 75: WPUA = 0x3B;
 12484  1037  303B               	movlw	59
 12485  1038  0024               	movlb	4	; select bank4
 12486  1039  008C               	movwf	12	;volatile
 12487                           
 12488                           ;pin_manager.c: 76: WPUC = 0x30;
 12489  103A  3030               	movlw	48
 12490  103B  008E               	movwf	14	;volatile
 12491                           
 12492                           ;pin_manager.c: 77: OPTION_REGbits.nWPUEN = 0;
 12493  103C  0021               	movlb	1	; select bank1
 12494  103D  1395               	bcf	21,7	;volatile
 12495                           
 12496                           ;pin_manager.c: 82: ODCONA = 0x00;
 12497  103E  0025               	movlb	5	; select bank5
 12498  103F  018C               	clrf	12	;volatile
 12499                           
 12500                           ;pin_manager.c: 83: ODCONC = 0x00;
 12501  1040  018E               	clrf	14	;volatile
 12502                           
 12503                           ;pin_manager.c: 85: bool state = (unsigned char)GIE;
 12504  1041  3000               	movlw	0
 12505  1042  1B8B               	btfsc	11,7	;volatile
 12506  1043  3001               	movlw	1
 12507  1044  00F1               	movwf	PIN_MANAGER_Initialize@state
 12508                           
 12509                           ;pin_manager.c: 86: GIE = 0;
 12510  1045  138B               	bcf	11,7	;volatile
 12511                           
 12512                           ;pin_manager.c: 87: PPSLOCK = 0x55;
 12513  1046  3055               	movlw	85
 12514  1047  003C               	movlb	28	; select bank28
 12515  1048  008F               	movwf	15	;volsfr
 12516                           
 12517                           ;pin_manager.c: 88: PPSLOCK = 0xAA;
 12518  1049  30AA               	movlw	170
 12519  104A  008F               	movwf	15	;volsfr
 12520                           
 12521                           ;pin_manager.c: 89: PPSLOCKbits.PPSLOCKED = 0x00;
 12522  104B  100F               	bcf	15,0	;volsfr
 12523                           
 12524                           ;pin_manager.c: 91: RXPPSbits.RXPPS = 0x14;
 12525  104C  0815               	movf	21,w	;volatile
 12526  104D  39E0               	andlw	-32
 12527  104E  3814               	iorlw	20
 12528  104F  0095               	movwf	21	;volatile
 12529                           
 12530                           ;pin_manager.c: 92: RA4PPSbits.RA4PPS = 0x04;
 12531  1050  003D               	movlb	29	; select bank29
 12532  1051  0814               	movf	20,w	;volatile
 12533  1052  39F0               	andlw	-16
 12534  1053  3804               	iorlw	4
 12535  1054  0094               	movwf	20	;volatile
 12536                           
 12537                           ;pin_manager.c: 93: RA5PPSbits.RA5PPS = 0x03;
 12538  1055  0815               	movf	21,w	;volatile
 12539  1056  39F0               	andlw	-16
 12540  1057  3803               	iorlw	3
 12541  1058  0095               	movwf	21	;volatile
 12542                           
 12543                           ;pin_manager.c: 94: RC5PPSbits.RC5PPS = 0x09;
 12544  1059  0825               	movf	37,w	;volatile
 12545  105A  39F0               	andlw	-16
 12546  105B  3809               	iorlw	9
 12547  105C  00A5               	movwf	37	;volatile
 12548                           
 12549                           ;pin_manager.c: 96: PPSLOCK = 0x55;
 12550  105D  3055               	movlw	85
 12551  105E  003C               	movlb	28	; select bank28
 12552  105F  008F               	movwf	15	;volsfr
 12553                           
 12554                           ;pin_manager.c: 97: PPSLOCK = 0xAA;
 12555  1060  30AA               	movlw	170
 12556  1061  008F               	movwf	15	;volsfr
 12557                           
 12558                           ;pin_manager.c: 98: PPSLOCKbits.PPSLOCKED = 0x01;
 12559  1062  140F               	bsf	15,0	;volsfr
 12560                           
 12561                           ;pin_manager.c: 100: GIE = state;
 12562  1063  1C71               	btfss	PIN_MANAGER_Initialize@state,0
 12563  1064  2867               	goto	u2410
 12564  1065  178B               	bsf	11,7	;volatile
 12565  1066  0008               	return
 12566  1067                     u2410:	
 12567  1067  138B               	bcf	11,7	;volatile
 12568  1068  0008               	return
 12569  1069                     __end_of_PIN_MANAGER_Initialize:	
 12570                           
 12571                           	psect	text46
 12572  0FFE                     __ptext46:	
 12573 ;; *************** function _OSCILLATOR_Initialize *****************
 12574 ;; Defined at:
 12575 ;;		line 84 in file "mcc_generated_files/mcc.c"
 12576 ;; Parameters:    Size  Location     Type
 12577 ;;		None
 12578 ;; Auto vars:     Size  Location     Type
 12579 ;;		None
 12580 ;; Return value:  Size  Location     Type
 12581 ;;                  1    wreg      void 
 12582 ;; Registers used:
 12583 ;;		None
 12584 ;; Tracked objects:
 12585 ;;		On entry : 0/0
 12586 ;;		On exit  : 0/0
 12587 ;;		Unchanged: 0/0
 12588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12592 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12593 ;;Total ram usage:        0 bytes
 12594 ;; Hardware stack levels used:    1
 12595 ;; Hardware stack levels required when called:    1
 12596 ;; This function calls:
 12597 ;;		Nothing
 12598 ;; This function is called by:
 12599 ;;		_SYSTEM_Initialize
 12600 ;; This function uses a non-reentrant model
 12601 ;;
 12602                           
 12603                           
 12604                           ;psect for function _OSCILLATOR_Initialize
 12605  0FFE                     _OSCILLATOR_Initialize:	
 12606                           
 12607                           ;incstack = 0
 12608                           ; Regs used in _OSCILLATOR_Initialize: []
 12609  0FFE  0008               	return
 12610  0FFF                     __end_of_OSCILLATOR_Initialize:	
 12611                           
 12612                           	psect	text47
 12613  1BF6                     __ptext47:	
 12614 ;; *************** function _FVR_Initialize *****************
 12615 ;; Defined at:
 12616 ;;		line 57 in file "mcc_generated_files/fvr.c"
 12617 ;; Parameters:    Size  Location     Type
 12618 ;;		None
 12619 ;; Auto vars:     Size  Location     Type
 12620 ;;		None
 12621 ;; Return value:  Size  Location     Type
 12622 ;;                  1    wreg      void 
 12623 ;; Registers used:
 12624 ;;		wreg
 12625 ;; Tracked objects:
 12626 ;;		On entry : 0/0
 12627 ;;		On exit  : 0/0
 12628 ;;		Unchanged: 0/0
 12629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12634 ;;Total ram usage:        0 bytes
 12635 ;; Hardware stack levels used:    1
 12636 ;; Hardware stack levels required when called:    1
 12637 ;; This function calls:
 12638 ;;		Nothing
 12639 ;; This function is called by:
 12640 ;;		_SYSTEM_Initialize
 12641 ;; This function uses a non-reentrant model
 12642 ;;
 12643                           
 12644                           
 12645                           ;psect for function _FVR_Initialize
 12646  1BF6                     _FVR_Initialize:	
 12647                           
 12648                           ;fvr.c: 60: FVRCON = 0x81;
 12649                           
 12650                           ;incstack = 0
 12651                           ; Regs used in _FVR_Initialize: [wreg]
 12652  1BF6  3081               	movlw	129
 12653  1BF7  0022               	movlb	2	; select bank2
 12654  1BF8  0097               	movwf	23	;volatile
 12655  1BF9  0008               	return
 12656  1BFA                     __end_of_FVR_Initialize:	
 12657                           
 12658                           	psect	text48
 12659  1C2D                     __ptext48:	
 12660 ;; *************** function _EUSART_Initialize *****************
 12661 ;; Defined at:
 12662 ;;		line 55 in file "mcc_generated_files/eusart.c"
 12663 ;; Parameters:    Size  Location     Type
 12664 ;;		None
 12665 ;; Auto vars:     Size  Location     Type
 12666 ;;		None
 12667 ;; Return value:  Size  Location     Type
 12668 ;;                  1    wreg      void 
 12669 ;; Registers used:
 12670 ;;		wreg
 12671 ;; Tracked objects:
 12672 ;;		On entry : 0/0
 12673 ;;		On exit  : 0/0
 12674 ;;		Unchanged: 0/0
 12675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12679 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12680 ;;Total ram usage:        0 bytes
 12681 ;; Hardware stack levels used:    1
 12682 ;; Hardware stack levels required when called:    1
 12683 ;; This function calls:
 12684 ;;		Nothing
 12685 ;; This function is called by:
 12686 ;;		_SYSTEM_Initialize
 12687 ;; This function uses a non-reentrant model
 12688 ;;
 12689                           
 12690                           
 12691                           ;psect for function _EUSART_Initialize
 12692  1C2D                     _EUSART_Initialize:	
 12693                           
 12694                           ;eusart.c: 58: PIE1bits.RCIE = 0;
 12695                           
 12696                           ;incstack = 0
 12697                           ; Regs used in _EUSART_Initialize: [wreg]
 12698  1C2D  0021               	movlb	1	; select bank1
 12699  1C2E  1291               	bcf	17,5	;volatile
 12700                           
 12701                           ;eusart.c: 59: PIE1bits.TXIE = 0;
 12702  1C2F  1211               	bcf	17,4	;volatile
 12703                           
 12704                           ;eusart.c: 61: BAUDCON = 0x08;
 12705  1C30  3008               	movlw	8
 12706  1C31  0023               	movlb	3	; select bank3
 12707  1C32  009F               	movwf	31	;volatile
 12708                           
 12709                           ;eusart.c: 64: RCSTA = 0x90;
 12710  1C33  3090               	movlw	144
 12711  1C34  009D               	movwf	29	;volatile
 12712                           
 12713                           ;eusart.c: 67: TXSTA = 0x24;
 12714  1C35  3024               	movlw	36
 12715  1C36  009E               	movwf	30	;volatile
 12716                           
 12717                           ;eusart.c: 71: SPBRGL = 0xA0;
 12718  1C37  30A0               	movlw	160
 12719  1C38  009B               	movwf	27	;volatile
 12720                           
 12721                           ;eusart.c: 76: SPBRGH = 0x01;
 12722  1C39  3001               	movlw	1
 12723  1C3A  009C               	movwf	28	;volatile
 12724                           
 12725                           ;eusart.c: 77: PIE1bits.RCIE = 1;
 12726  1C3B  0021               	movlb	1	; select bank1
 12727  1C3C  1691               	bsf	17,5	;volatile
 12728                           
 12729                           ;eusart.c: 78: PIR1bits.TXIF=0;
 12730  1C3D  0020               	movlb	0	; select bank0
 12731  1C3E  1211               	bcf	17,4	;volatile
 12732  1C3F  0008               	return
 12733  1C40                     __end_of_EUSART_Initialize:	
 12734                           
 12735                           	psect	text49
 12736  1C02                     __ptext49:	
 12737 ;; *************** function _ADC1_Initialize *****************
 12738 ;; Defined at:
 12739 ;;		line 64 in file "mcc_generated_files/adc1.c"
 12740 ;; Parameters:    Size  Location     Type
 12741 ;;		None
 12742 ;; Auto vars:     Size  Location     Type
 12743 ;;		None
 12744 ;; Return value:  Size  Location     Type
 12745 ;;                  1    wreg      void 
 12746 ;; Registers used:
 12747 ;;		wreg, status,2
 12748 ;; Tracked objects:
 12749 ;;		On entry : 0/0
 12750 ;;		On exit  : 0/0
 12751 ;;		Unchanged: 0/0
 12752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12756 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12757 ;;Total ram usage:        0 bytes
 12758 ;; Hardware stack levels used:    1
 12759 ;; Hardware stack levels required when called:    1
 12760 ;; This function calls:
 12761 ;;		Nothing
 12762 ;; This function is called by:
 12763 ;;		_SYSTEM_Initialize
 12764 ;; This function uses a non-reentrant model
 12765 ;;
 12766                           
 12767                           
 12768                           ;psect for function _ADC1_Initialize
 12769  1C02                     _ADC1_Initialize:	
 12770                           
 12771                           ;adc1.c: 69: ADCON0 = 0x01;
 12772                           
 12773                           ;incstack = 0
 12774                           ; Regs used in _ADC1_Initialize: [wreg+status,2]
 12775  1C02  3001               	movlw	1
 12776  1C03  0021               	movlb	1	; select bank1
 12777  1C04  009D               	movwf	29	;volatile
 12778                           
 12779                           ;adc1.c: 72: ADCON1 = 0x63;
 12780  1C05  3063               	movlw	99
 12781  1C06  009E               	movwf	30	;volatile
 12782                           
 12783                           ;adc1.c: 75: ADCON2 = 0x00;
 12784  1C07  019F               	clrf	31	;volatile
 12785                           
 12786                           ;adc1.c: 78: ADRESL = 0x00;
 12787  1C08  019B               	clrf	27	;volatile
 12788                           
 12789                           ;adc1.c: 81: ADRESH = 0x00;
 12790  1C09  019C               	clrf	28	;volatile
 12791  1C0A  0008               	return
 12792  1C0B                     __end_of_ADC1_Initialize:	
 12793                           
 12794                           	psect	intentry
 12795  0804                     __pintentry:	
 12796 ;; *************** function _INTERRUPT_InterruptManager *****************
 12797 ;; Defined at:
 12798 ;;		line 59 in file "mcc_generated_files/interrupt_manager.c"
 12799 ;; Parameters:    Size  Location     Type
 12800 ;;		None
 12801 ;; Auto vars:     Size  Location     Type
 12802 ;;		None
 12803 ;; Return value:  Size  Location     Type
 12804 ;;                  1    wreg      void 
 12805 ;; Registers used:
 12806 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12807 ;; Tracked objects:
 12808 ;;		On entry : 0/0
 12809 ;;		On exit  : 0/0
 12810 ;;		Unchanged: 0/0
 12811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12814 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12815 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12816 ;;Total ram usage:        1 bytes
 12817 ;; Hardware stack levels used:    1
 12818 ;; This function calls:
 12819 ;;		Nothing
 12820 ;; This function is called by:
 12821 ;;		Interrupt level 1
 12822 ;; This function uses a non-reentrant model
 12823 ;;
 12824                           
 12825  0804                     _INTERRUPT_InterruptManager:	
 12826                           
 12827                           ;incstack = 0
 12828  0804  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12829                           
 12830                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0]
 12831  0805  3188               	pagesel	$
 12832                           
 12833                           ;interrupt_manager.c: 63: if(INTCONbits.PEIE == 1 && PIE1bits.TMR2IE == 1 && PIR1bits.TM
      +                          R2IF == 1)
 12834  0806  1F0B               	btfss	11,6	;volatile
 12835  0807  2836               	goto	i1l4559
 12836  0808  0021               	movlb	1	; select bank1
 12837  0809  1C91               	btfss	17,1	;volatile
 12838  080A  2836               	goto	i1l4559
 12839  080B  0020               	movlb	0	; select bank0
 12840  080C  1C91               	btfss	17,1	;volatile
 12841  080D  2836               	goto	i1l4559
 12842                           
 12843                           ;interrupt_manager.c: 64: {;interrupt_manager.c: 66: PIR1bits.TMR2IF = 0;
 12844  080E  1091               	bcf	17,1	;volatile
 12845                           
 12846                           ;interrupt_manager.c: 67: Event |= (1<<1);
 12847  080F  14EB               	bsf	_Event,1	;volatile
 12848                           
 12849                           ;interrupt_manager.c: 68: subTickerX++;
 12850  0810  3001               	movlw	1
 12851  0811  00F0               	movwf	??_INTERRUPT_InterruptManager
 12852  0812  0870               	movf	??_INTERRUPT_InterruptManager,w
 12853  0813  07E9               	addwf	_subTickerX,f
 12854                           
 12855                           ;interrupt_manager.c: 69: subTickerX_1s++;
 12856  0814  3001               	movlw	1
 12857  0815  00F0               	movwf	??_INTERRUPT_InterruptManager
 12858  0816  0870               	movf	??_INTERRUPT_InterruptManager,w
 12859  0817  07E8               	addwf	_subTickerX_1s,f
 12860                           
 12861                           ;interrupt_manager.c: 70: if(subTickerX>=5){
 12862  0818  3005               	movlw	5
 12863  0819  0269               	subwf	_subTickerX,w
 12864  081A  1C03               	skipc
 12865  081B  281E               	goto	i1l4541
 12866                           
 12867                           ;interrupt_manager.c: 71: subTickerX=0;
 12868  081C  01E9               	clrf	_subTickerX
 12869                           
 12870                           ;interrupt_manager.c: 72: Event |= (1<<2);
 12871  081D  156B               	bsf	_Event,2	;volatile
 12872  081E                     i1l4541:	
 12873                           
 12874                           ;interrupt_manager.c: 73: };interrupt_manager.c: 74: if(subTickerX_1s>=50){
 12875  081E  3032               	movlw	50
 12876  081F  0268               	subwf	_subTickerX_1s,w
 12877  0820  1C03               	skipc
 12878  0821  2824               	goto	i1l4547
 12879                           
 12880                           ;interrupt_manager.c: 75: subTickerX_1s=0;
 12881  0822  01E8               	clrf	_subTickerX_1s
 12882                           
 12883                           ;interrupt_manager.c: 76: Event |= (1<<3);
 12884  0823  15EB               	bsf	_Event,3	;volatile
 12885  0824                     i1l4547:	
 12886                           
 12887                           ;interrupt_manager.c: 77: };interrupt_manager.c: 79: if(eusartRxIdleTime_ms){
 12888  0824  087C               	movf	_eusartRxIdleTime_ms,w	;volatile
 12889  0825  1903               	btfsc	3,2
 12890  0826  2831               	goto	i1l4557
 12891                           
 12892                           ;interrupt_manager.c: 80: eusartRxIdleTime_ms++;
 12893  0827  3001               	movlw	1
 12894  0828  00F0               	movwf	??_INTERRUPT_InterruptManager
 12895  0829  0870               	movf	??_INTERRUPT_InterruptManager,w
 12896  082A  07FC               	addwf	_eusartRxIdleTime_ms,f	;volatile
 12897                           
 12898                           ;interrupt_manager.c: 81: if(eusartRxIdleTime_ms>5){
 12899  082B  3006               	movlw	6
 12900  082C  027C               	subwf	_eusartRxIdleTime_ms,w	;volatile
 12901  082D  1C03               	skipc
 12902  082E  2831               	goto	i1l4557
 12903                           
 12904                           ;interrupt_manager.c: 82: Event|=(1<<0);
 12905  082F  146B               	bsf	_Event,0	;volatile
 12906                           
 12907                           ;interrupt_manager.c: 83: eusartRxIdleTime_ms=0;
 12908  0830  01FC               	clrf	_eusartRxIdleTime_ms	;volatile
 12909  0831                     i1l4557:	
 12910                           
 12911                           ;interrupt_manager.c: 84: };interrupt_manager.c: 85: };interrupt_manager.c: 86: globalTi
      +                          cker++;
 12912  0831  3001               	movlw	1
 12913  0832  0021               	movlb	1	; select bank1
 12914  0833  07D2               	addwf	_globalTicker^(0+128),f	;volatile
 12915  0834  3000               	movlw	0
 12916  0835  3DD3               	addwfc	(_globalTicker+1)^(0+128),f	;volatile
 12917  0836                     i1l4559:	
 12918                           
 12919                           ;interrupt_manager.c: 87: };interrupt_manager.c: 88: if(INTCONbits.PEIE == 1 && PIE1bits
      +                          .RCIE == 1 && PIR1bits.RCIF == 1)
 12920  0836  1F0B               	btfss	11,6	;volatile
 12921  0837  285E               	goto	i1l4577
 12922  0838  0021               	movlb	1	; select bank1
 12923  0839  1E91               	btfss	17,5	;volatile
 12924  083A  285E               	goto	i1l4577
 12925  083B  0020               	movlb	0	; select bank0
 12926  083C  1E91               	btfss	17,5	;volatile
 12927  083D  285E               	goto	i1l4577
 12928                           
 12929                           ;interrupt_manager.c: 89: {;interrupt_manager.c: 91: PIR1bits.RCIF=0;
 12930  083E  1291               	bcf	17,5	;volatile
 12931                           
 12932                           ;interrupt_manager.c: 92: if(1 == RCSTAbits.OERR){
 12933  083F  0023               	movlb	3	; select bank3
 12934  0840  1C9D               	btfss	29,1	;volatile
 12935  0841  2844               	goto	i1l4569
 12936                           
 12937                           ;interrupt_manager.c: 93: RCSTAbits.CREN = 0;
 12938  0842  121D               	bcf	29,4	;volatile
 12939                           
 12940                           ;interrupt_manager.c: 94: RCSTAbits.CREN = 1;
 12941  0843  161D               	bsf	29,4	;volatile
 12942  0844                     i1l4569:	
 12943                           
 12944                           ;interrupt_manager.c: 95: };interrupt_manager.c: 96: rxtemp=RCREG;
 12945  0844  0819               	movf	25,w	;volatile
 12946  0845  00F0               	movwf	??_INTERRUPT_InterruptManager
 12947  0846  0870               	movf	??_INTERRUPT_InterruptManager,w
 12948  0847  0020               	movlb	0	; select bank0
 12949  0848  00E7               	movwf	_rxtemp
 12950                           
 12951                           ;interrupt_manager.c: 97: if(eusartRxCount<32){
 12952  0849  3020               	movlw	32
 12953  084A  026A               	subwf	_eusartRxCount,w	;volatile
 12954  084B  1803               	skipnc
 12955  084C  285A               	goto	i1l4575
 12956                           
 12957                           ;interrupt_manager.c: 98: eusartRxBuffer[eusartRxCount]=rxtemp;
 12958  084D  0867               	movf	_rxtemp,w
 12959  084E  00F0               	movwf	??_INTERRUPT_InterruptManager
 12960  084F  086A               	movf	_eusartRxCount,w
 12961  0850  3E40               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 12962  0851  0086               	movwf	6
 12963  0852  3001               	movlw	1	; select bank2/3
 12964  0853  0087               	movwf	7
 12965  0854  0870               	movf	??_INTERRUPT_InterruptManager,w
 12966  0855  0081               	movwf	1
 12967                           
 12968                           ;interrupt_manager.c: 99: eusartRxCount++;
 12969  0856  3001               	movlw	1
 12970  0857  00F0               	movwf	??_INTERRUPT_InterruptManager
 12971  0858  0870               	movf	??_INTERRUPT_InterruptManager,w
 12972  0859  07EA               	addwf	_eusartRxCount,f	;volatile
 12973  085A                     i1l4575:	
 12974                           
 12975                           ;interrupt_manager.c: 101: };interrupt_manager.c: 102: eusartRxIdleTime_ms=1;
 12976  085A  3001               	movlw	1
 12977  085B  00F0               	movwf	??_INTERRUPT_InterruptManager
 12978  085C  0870               	movf	??_INTERRUPT_InterruptManager,w
 12979  085D  00FC               	movwf	_eusartRxIdleTime_ms	;volatile
 12980  085E                     i1l4577:	
 12981                           
 12982                           ;interrupt_manager.c: 103: };interrupt_manager.c: 105: if( PIR1bits.TXIF == 1 && INTCONb
      +                          its.PEIE && PIE1bits.TXIE)
 12983  085E  0020               	movlb	0	; select bank0
 12984  085F  1A11               	btfsc	17,4	;volatile
 12985  0860  1F0B               	btfss	11,6	;volatile
 12986  0861  2884               	goto	i1l4599
 12987  0862  0021               	movlb	1	; select bank1
 12988  0863  1E11               	btfss	17,4	;volatile
 12989  0864  2884               	goto	i1l4599
 12990                           
 12991                           ;interrupt_manager.c: 106: {;interrupt_manager.c: 109: if(1 == RCSTAbits.OERR){
 12992  0865  0023               	movlb	3	; select bank3
 12993  0866  1C9D               	btfss	29,1	;volatile
 12994  0867  286C               	goto	i1l4587
 12995                           
 12996                           ;interrupt_manager.c: 110: RCSTAbits.CREN = 0;
 12997  0868  121D               	bcf	29,4	;volatile
 12998                           
 12999                           ;interrupt_manager.c: 111: RCSTAbits.CREN = 1;
 13000  0869  161D               	bsf	29,4	;volatile
 13001                           
 13002                           ;interrupt_manager.c: 112: RCSTAbits.SREN=0;
 13003  086A  129D               	bcf	29,5	;volatile
 13004                           
 13005                           ;interrupt_manager.c: 113: RCSTAbits.SREN=1;
 13006  086B  169D               	bsf	29,5	;volatile
 13007  086C                     i1l4587:	
 13008                           
 13009                           ;interrupt_manager.c: 114: };interrupt_manager.c: 115: if(txBufLen>0){
 13010  086C  0020               	movlb	0	; select bank0
 13011  086D  0866               	movf	_txBufLen,w
 13012  086E  1903               	btfsc	3,2
 13013  086F  2880               	goto	i1l4595
 13014                           
 13015                           ;interrupt_manager.c: 116: TXREG=txBuf[txCount];
 13016  0870  0865               	movf	_txCount,w
 13017  0871  3EA0               	addlw	(low (_txBuf| (0+256)))& (0+255)
 13018  0872  0086               	movwf	6
 13019  0873  3001               	movlw	1	; select bank3/4
 13020  0874  0087               	movwf	7
 13021  0875  0801               	movf	1,w
 13022  0876  0023               	movlb	3	; select bank3
 13023  0877  009A               	movwf	26	;volatile
 13024                           
 13025                           ;interrupt_manager.c: 117: txBufLen--;
 13026  0878  3001               	movlw	1
 13027  0879  0020               	movlb	0	; select bank0
 13028  087A  02E6               	subwf	_txBufLen,f
 13029                           
 13030                           ;interrupt_manager.c: 118: txCount++;
 13031  087B  3001               	movlw	1
 13032  087C  00F0               	movwf	??_INTERRUPT_InterruptManager
 13033  087D  0870               	movf	??_INTERRUPT_InterruptManager,w
 13034  087E  07E5               	addwf	_txCount,f
 13035                           
 13036                           ;interrupt_manager.c: 119: }else{
 13037  087F  2884               	goto	i1l4599
 13038  0880                     i1l4595:	
 13039                           
 13040                           ;interrupt_manager.c: 120: txBufLen=0;
 13041  0880  01E6               	clrf	_txBufLen
 13042                           
 13043                           ;interrupt_manager.c: 121: txCount=0;
 13044  0881  01E5               	clrf	_txCount
 13045                           
 13046                           ;interrupt_manager.c: 122: PIE1bits.TXIE=0;
 13047  0882  0021               	movlb	1	; select bank1
 13048  0883  1211               	bcf	17,4	;volatile
 13049  0884                     i1l4599:	
 13050                           
 13051                           ;interrupt_manager.c: 123: };interrupt_manager.c: 125: };interrupt_manager.c: 127: if(PI
      +                          R3bits.PWM2IF){
 13052  0884  0020               	movlb	0	; select bank0
 13053  0885  1A93               	btfsc	19,5	;volatile
 13054                           
 13055                           ;interrupt_manager.c: 128: PIR3bits.PWM2IF = 0;
 13056  0886  1293               	bcf	19,5	;volatile
 13057                           
 13058                           ;interrupt_manager.c: 129: };interrupt_manager.c: 131: if(PIR3bits.PWM1IF){
 13059  0887  1A13               	btfsc	19,4	;volatile
 13060                           
 13061                           ;interrupt_manager.c: 132: PIR3bits.PWM1IF=0;
 13062  0888  1213               	bcf	19,4	;volatile
 13063  0889  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 13064  088A  0009               	retfie
 13065  088B                     __end_of_INTERRUPT_InterruptManager:	
 13066  007E                     btemp	set	126	;btemp
 13067  007E                     int$flags	set	126
 13068  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    17
    Data        14
    BSS         218
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     39      80
    BANK1            80      2      64
    BANK2            80      0      64
    BANK3            80      0      64
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           60      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    crc_append@message	PTR unsigned char  size(2) Largest target is 132
		 -> modbusBuf(BANK2[32]), sysData(BIGRAM[132]), 

    crc_verify@message	PTR unsigned char  size(2) Largest target is 132
		 -> modbusBuf(BANK2[32]), sysData(BIGRAM[132]), 

    crc_sum@buf	PTR unsigned char  size(2) Largest target is 132
		 -> modbusBuf(BANK2[32]), sysData(BIGRAM[132]), 

    m_mem_cpy_len@s	PTR unsigned char  size(2) Largest target is 132
		 -> modbusBuf(BANK2[32]), sysData(BIGRAM[132]), eusartRxBuffer(BANK2[32]), 

    m_mem_cpy_len@d	PTR unsigned char  size(2) Largest target is 64
		 -> crc_verify@expected(BANK0[2]), modbusBuf(BANK2[32]), txBuf(BANK3[64]), 

    modbus_response_process@rbuf	PTR unsigned char  size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    modbus_response_process@pmdbs	PTR struct . size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    modbus_response_command@rbuf	PTR unsigned char  size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    modbus_response_command@pmdbs	PTR struct . size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    modbus_response_write_mult_register@rbuf	PTR unsigned char  size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    modbus_response_write_mult_register@stb	PTR struct . size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    modbus_response_write_single_register@rbuf	PTR unsigned char  size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    modbus_response_write_single_register@pmdbs	PTR struct . size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    getRegisterVal@tempData	PTR unsigned int  size(1) Largest target is 2
		 -> modbus_response_command@tempData(BANK0[2]), 

    modbus_response_illgeal_function@buf	PTR unsigned char  size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    modbus_response_illgeal_function@pmdbs	PTR struct . size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    my_flash_system_write@buf	PTR unsigned char  size(2) Largest target is 132
		 -> sysData(BIGRAM[132]), 

    my_flash_system_read@buf	PTR unsigned char  size(2) Largest target is 132
		 -> sysData(BIGRAM[132]), 

    uart_send_len@buf	PTR unsigned char  size(1) Largest target is 32
		 -> modbusBuf(BANK2[32]), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_calc_rs_lo_avg
    _main->_uart_send_len
    _sys_data_init->_my_flash_system_read
    _pid_pwm2_vout_run->_set_vout_pwm2_duty
    _set_vout_pwm2_duty->_get_vout_pwm2_duty
    _pid_pwm1_idrv_run->_set_idrv_pwm1_duty
    _set_idrv_pwm1_duty->_get_idrv_pwm1_duty
    _modbus_response_write_single_register->_crc_append
    _modbus_response_write_single_register->_uart_send_len
    _modbus_response_write_mult_register->_crc_append
    _modbus_response_write_mult_register->_uart_send_len
    _sys_data_save->_crc_append
    _my_flash_read_system_erase->_FLASH_EraseBlock
    _modbus_response_illgeal_function->_crc_append
    _modbus_response_illgeal_function->_uart_send_len
    _modbus_response_command->_crc_append
    _modbus_response_command->_uart_send_len
    _uart_send_len->_m_mem_cpy_len
    _crc_append->_crc_sum
    _crc_verify->_m_mem_cpy_len
    _calc_temp_rs->___lldiv
    _calc_temp_rc->___lldiv
    _calc_rs_lo_avg->___lldiv
    _calc_expect_vout_adc_value->___aldiv
    ___aldiv->___lmul
    _adc_sample->_fvr_set_gain
    _TMR2_Initialize->_TMR2_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_calc_expect_vout_adc_value
    _sys_data_init->_crc_verify
    _pid_pwm1_idrv_run->___aldiv
    _modbus_response_process->_modbus_response_command
    _modbus_response_process->_modbus_response_write_single_register
    _modbus_response_write_single_register->_crc_append
    _modbus_response_write_mult_register->_crc_append
    _sys_data_save->_crc_append
    _modbus_response_illgeal_function->_crc_append
    _modbus_response_command->_crc_append
    _crc_append->_crc_sum
    _crc_verify->_crc_sum
    _calc_temp_rs->___lldiv
    _calc_temp_rc->___lldiv
    _calc_rs_lo_avg->___lldiv
    _calc_expect_vout_adc_value->___aldiv
    ___aldiv->___lmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   51203
                                              0 BANK1      2     2      0
                  _SYSTEM_Initialize
                         _adc_sample
         _calc_expect_vout_adc_value
                     _calc_rs_lo_avg
                       _calc_temp_rc
                       _calc_temp_rs
                      _m_mem_cpy_len
            _modbus_response_process
                  _pid_pwm1_idrv_run
                  _pid_pwm2_vout_run
                      _sys_data_init
                _uart_received_start
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (1) _uart_received_start                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sys_data_init                                       10    10      0    6049
                                             14 BANK0     10    10      0
                             ___wmul
                         _crc_verify
               _my_flash_system_read
                      _sys_data_save
 ---------------------------------------------------------------------------------
 (2) _my_flash_system_read                                11     7      4     311
                                              1 COMMON    11     7      4
 ---------------------------------------------------------------------------------
 (1) _pid_pwm2_vout_run                                    6     6      0    1585
                                              0 BANK0      6     6      0
                            ___awdiv
                            ___lwdiv
                 _set_vout_pwm2_duty
 ---------------------------------------------------------------------------------
 (2) _set_vout_pwm2_duty                                   4     2      2     212
                                              7 COMMON     4     2      2
                 _get_vout_pwm2_duty
 ---------------------------------------------------------------------------------
 (3) _get_vout_pwm2_duty                                   6     4      2      25
                                              1 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _pid_pwm1_idrv_run                                   12    12      0    5060
                                             18 BANK0     12    12      0
                            ___aldiv
                            ___awdiv
                             ___lmul
                            ___lwdiv
                             ___wmul
                 _set_idrv_pwm1_duty
 ---------------------------------------------------------------------------------
 (2) _set_idrv_pwm1_duty                                   4     2      2     212
                                              7 COMMON     4     2      2
                 _get_idrv_pwm1_duty
 ---------------------------------------------------------------------------------
 (3) _get_idrv_pwm1_duty                                   6     4      2      25
                                              1 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     548
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     466
                                              1 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     604
                                              1 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (1) _modbus_response_process                              6     4      2   25674
                                             24 BANK0      6     4      2
                         _crc_verify
            _modbus_response_command
   _modbus_response_illgeal_function
_modbus_response_write_mult_register
_modbus_response_write_single_regist
 ---------------------------------------------------------------------------------
 (2) _modbus_response_write_single_register               12    12      0    7386
                                             12 BANK0     12    12      0
                         _crc_append
                      _sys_data_save
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (2) _modbus_response_write_mult_register                  5     5      0    6758
                                             12 BANK0      5     5      0
                         _crc_append
                      _sys_data_save
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (2) _sys_data_save                                        0     0      0    2878
                         _crc_append
         _my_flash_read_system_erase
              _my_flash_system_write
 ---------------------------------------------------------------------------------
 (3) _my_flash_system_write                               16    12      4     473
                                              1 COMMON     6     2      4
                                              0 BANK0     10    10      0
 ---------------------------------------------------------------------------------
 (3) _my_flash_read_system_erase                           0     0      0     523
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     3     1      2     523
                                              1 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (2) _modbus_response_illgeal_function                     4     3      1    3840
                                             12 BANK0      4     3      1
                         _crc_append
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (2) _modbus_response_command                             12    12      0    5169
                                             12 BANK0     12    12      0
                         _crc_append
                     _getRegisterVal
                      _uart_send_len
 ---------------------------------------------------------------------------------
 (1) _uart_send_len                                        4     3      1    1550
                                              8 COMMON     4     3      1
                      _m_mem_cpy_len
 ---------------------------------------------------------------------------------
 (3) _getRegisterVal                                      10     7      3     711
                                              1 COMMON    10     7      3
 ---------------------------------------------------------------------------------
 (3) _crc_append                                          11     7      4    1882
                                              7 COMMON     5     5      0
                                              6 BANK0      6     2      4
                            _crc_sum
 ---------------------------------------------------------------------------------
 (2) _crc_verify                                          10     6      4    2079
                                              8 COMMON     2     2      0
                                              6 BANK0      8     4      4
                            _crc_sum
                      _m_mem_cpy_len
 ---------------------------------------------------------------------------------
 (2) _m_mem_cpy_len                                        7     1      6     762
                                              1 COMMON     7     1      6
 ---------------------------------------------------------------------------------
 (4) _crc_sum                                             12     8      4     731
                                              1 COMMON     6     2      4
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _calc_temp_rs                                         8     4      4    2346
                                              5 BANK0      8     4      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) _calc_temp_rc                                        12     8      4    2346
                                              5 BANK0     12     8      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) _calc_rs_lo_avg                                       9     7      2    1072
                                             10 COMMON     2     2      0
                                              5 BANK0      7     5      2
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     770
                                              1 COMMON     9     1      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _calc_expect_vout_adc_value                          21    19      2    3624
                                             18 BANK0     21    19      2
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8    1576
                                              1 COMMON     8     0      8
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8    1345
                                              9 COMMON     1     1      0
                                              4 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _adc_sample                                          12    10      2    1014
                                              4 COMMON     5     3      2
                                              0 BANK0      7     7      0
                           _adc_init
                       _fvr_set_gain
 ---------------------------------------------------------------------------------
 (2) _fvr_set_gain                                         3     3      0      69
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _adc_init                                             2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     121
                    _ADC1_Initialize
                  _EUSART_Initialize
                     _FVR_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM1_Initialize
                    _PWM2_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0      98
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR2_SetInterruptHandler                             2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _ADC1_Initialize
     _EUSART_Initialize
     _FVR_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM1_Initialize
     _PWM2_Initialize
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
       _TMR2_StartTimer
     _WDT_Initialize
   _adc_sample
     _adc_init
     _fvr_set_gain
   _calc_expect_vout_adc_value
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _calc_rs_lo_avg
     ___lldiv
   _calc_temp_rc
     ___lldiv
     ___lmul
   _calc_temp_rs
     ___lldiv
     ___lmul
   _m_mem_cpy_len
   _modbus_response_process
     _crc_verify
       _crc_sum
       _m_mem_cpy_len
     _modbus_response_command
       _crc_append
         _crc_sum
       _getRegisterVal
       _uart_send_len
         _m_mem_cpy_len
     _modbus_response_illgeal_function
       _crc_append
         _crc_sum
       _uart_send_len
         _m_mem_cpy_len
     _modbus_response_write_mult_register
       _crc_append
         _crc_sum
       _sys_data_save
         _crc_append
           _crc_sum
         _my_flash_read_system_erase
           _FLASH_EraseBlock
         _my_flash_system_write
       _uart_send_len
         _m_mem_cpy_len
     _modbus_response_write_single_register
       _crc_append
         _crc_sum
       _sys_data_save
         _crc_append
           _crc_sum
         _my_flash_read_system_erase
           _FLASH_EraseBlock
         _my_flash_system_write
       _uart_send_len
         _m_mem_cpy_len
   _pid_pwm1_idrv_run
     ___aldiv
       ___lmul (ARG)
     ___awdiv
     ___lmul
     ___lwdiv
     ___wmul
     _set_idrv_pwm1_duty
       _get_idrv_pwm1_duty
   _pid_pwm2_vout_run
     ___awdiv
     ___lwdiv
     _set_vout_pwm2_duty
       _get_vout_pwm2_duty
   _sys_data_init
     ___wmul
     _crc_verify
       _crc_sum
       _m_mem_cpy_len
     _my_flash_system_read
     _sys_data_save
       _crc_append
         _crc_sum
       _my_flash_read_system_erase
         _FLASH_EraseBlock
       _my_flash_system_write
   _uart_received_start
   _uart_send_len
     _m_mem_cpy_len

 _INTERRUPT_InterruptManager (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3E0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     27      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      2      40       7       80.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      40       9       80.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      40      11       80.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     11D      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              3C      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           20      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     11D      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Sat Mar 30 21:15:34 2019

              __end_of_TMR2_SetInterruptHandler 0FFE                                               pc 0002  
                  ??_my_flash_read_system_erase 0074                                    ___awdiv@sign 0077  
                                            _x0 004B                                              _x1 00BC  
                                            _y0 004F                                              _y1 00C0  
                                            _ik 00D4                          __end_of_FVR_Initialize 1BFA  
                           ___wmul@multiplicand 0073                                             l511 1EEA  
                                           l621 1C7B                                             l633 120E  
                                           l627 1C54                                             l652 1700  
                                           l740 13D7                                             l830 0DF7  
                                           l670 14FB                                             l639 1228  
                                           l647 14AA                                             l743 142B  
                                           l663 0A91                                             l672 1541  
                                           l691 0CCF                                             l794 108E  
                                           _GIE 005F                                             _PR2 001B  
                               _pwm1DutyForIdrv 00DA                                             _x32 00B8  
                                           _y32 0047                                             _err 00A0  
                               _TMR2_Initialize 1C40                                             wreg 0009  
                          ??_get_vout_pwm2_duty 0073                            ??_set_vout_pwm2_duty 0079  
                               ??_uart_send_len 0079                                            S5493 1800  
                                          l1070 11AA                                            l1072 11C8  
                                          l1094 1D05                                            l1159 133A  
                                          l4011 1146                                            l4007 113B  
                                          l4111 1E00                                            l4121 1E1B  
                                          l3421 13D2                                            l4117 1E12  
                                          l4109 1DF4                                            l5103 13A2  
                                          l4063 10B5                                            l5041 0FBB  
                                          l3441 1403                                            l3433 13E9  
                                          l4081 10D4                                            l5201 150C  
                                          l3531 170E                                            l5027 0F88  
                                          l3451 1416                                            l3443 1405  
                                          l4091 10EF                                            l5221 0AE6  
                                          l4317 1288                                            l4309 1264  
                                          l5117 1496                                            l3541 1753  
                                          l3533 1716                                            l4069 10C0  
                                          l5213 1552                                            l5055 1DC3  
                                          l5231 0B43                                            l5135 16EC  
                                          l5119 14A2                                            l3551 1784  
                                          l3543 1760                                            l3535 1726  
                                          l5039 0F89                                            l4095 10F7  
                                          l4087 10E6                                            l4079 10C8  
                                          l4177 1218                                            l5137 16F8  
                                          l3561 17B1                                            l3553 178D  
                                          l3545 1769                                            l3537 1739  
                                          l3465 1433                                            l5313 1179  
                                          l4187 121B                                            l5059 1DCE  
                                          l5235 0B4B                                            l3555 1796  
                                          l3547 1772                                            l3539 1746  
                                          l5315 117E                                            l5323 118F  
                                          l5411 0F06                                            l4189 1251  
                                          l5085 135B                                            l5077 134B  
                                          l3557 179F                                            l3549 177B  
                                          l3565 17B9                                            l5317 1183  
                                          l5309 116A                                            l5181 0ABA  
                                          l5173 0A72                                            l5421 0F37  
                                          l3735 1C74                                            l5095 1389  
                                          l5087 1369                                            l5255 0C06  
                                          l3559 17A8                                            l3567 17C6  
                                          l5319 1188                                            l5183 0AC2  
                                          l5175 0A7A                                            l5407 0EFD  
                                          l5249 0BE5                                            l4801 11DA  
                                          l3577 17E9                                            l5185 0AD1  
                                          l5177 0A89                                            l5281 1597  
                                          l5099 1394                                            l5187 0AD9  
                                          l5291 1611                                            l5419 0F34  
                                          l4807 11EF                                            l4823 1D6C  
                                          l5287 15E8                                            l4809 11F4  
                                          l3777 1E98                                            l5377 0E54  
                                          l4843 1ED5                                            l4915 0D01  
                                          l3779 1EBF                                            l4909 0CF1  
                                          l3965 1CFF                                            l4935 0D55  
                                          l4927 0D37                                            l4961 0DC9  
                                          l4971 0DFF                                            l3997 110D  
                                          l3999 111B                                            l4879 1E8B  
                                          l4967 0DF9                         __end_of_PWM1_Initialize 1C97  
                                          _LATA 010C                                            _LATC 010E  
                                          u2410 1067                                            u2235 13BC  
                                          u3055 10CB                                            u3135 1DF7  
                                          u2265 13F7                                            u3235 1235  
                                          u4115 11B0                                            u3075 10D5  
                                          u3155 1E01                                            u2435 1D46  
                                          u3245 123D                                            u3085 10DF  
                                          u3165 1E0B                                            u2365 1CB9  
                                          u2445 1D62                                            u3255 1224  
                                          u2295 13DD                                            u3095 10E7  
                                          u3175 1E13                                            u2375 1CD2  
                                          u5107 1209                                            u4325 0D76  
                                          u2485 1E9E                                            u2905 113C  
                                          u4265 0D0E                                            u4195 1E87  
                                          u4445 0F63                                            u4545 135E  
                                          u2865 1110                                            u2785 1D06  
                                          u4705 14F4                                            u2795 1D0B  
                                          u4715 1505                                            u4565 136A  
                                          u4485 1DCF                                            u4813 0BFF  
                                          u2885 111C                                            u4725 153A  
                                          u4575 137E                                            u4495 1DD6  
                                          u2895 1130                                            u4735 154B  
                                          u4585 138A                                            u4755 0B18  
                                          u4765 0B39                                            u4793 0BDB  
                                          u4965 0E92                                            u4975 0EA9  
                                          u4985 0EC0                                   _m_mem_cpy_len 1D6C  
                                          _TMR2 001A                                            _WPUA 020C  
                                          _WPUC 020E                                            _main 0E28  
modbus_response_write_single_register@startAddr 0036                                            _pidU 00D6  
           __size_of_my_flash_read_system_erase 0023                                            fsr0h 0005  
                                          fsr1h 0007                                            indf0 0000  
                                          fsr0l 0004                                            indf1 0001  
                                          fsr1l 0006                                            _xlen 0064  
                                          btemp 007E                                            start 088B  
                               _pwm2DutyForVout 00DC                       ??_modbus_response_command 002C  
                       __end_of_PWM2_Initialize 1CB0                       ??_modbus_response_process 003A  
                               ?_FVR_Initialize 0070                  __size_of_OSCILLATOR_Initialize 0001  
                 __end_of_OSCILLATOR_Initialize 0FFF                                 __end_of___aldiv 13AB  
                                         ?_main 0070                                 __end_of___awdiv 10FC  
                               __end_of___lldiv 114F                                 ___awdiv@divisor 0071  
                                         _T2CON 001C                                 __end_of___lwdiv 1E20  
                               ___awdiv@counter 0076                                           _RCREG 0199  
                                         _RCSTA 019D                                           _TRISA 008C  
                                         _TRISC 008E                                           _TXREG 019A  
                                         _TXSTA 019E                modbus_response_command@startAddr 0030  
                           ___lmul@multiplicand 0075                                           _PidKp 00D0  
                                         _PidTd 00CC                                           _Event 006B  
                                         _PidTi 00CE                                 __end_of_crc_sum 11F9  
                                _WDT_Initialize 1BFA                                           _resRc 006E  
                                         _resRs 006C                                           _txBuf 01A0  
        modbus_response_write_mult_register@len 002E                                  ?_m_mem_cpy_len 0071  
        modbus_response_write_mult_register@stb 0030                      __end_of_get_idrv_pwm1_duty 1CC9  
                    __end_of_set_idrv_pwm1_duty 1D50                              crc_verify@expected 002C  
                                         status 0003                                           wtemp0 007E  
                               _TMR2_StartTimer 1000                                   fvr_set_gain@g 0073  
   __end_of_modbus_response_write_mult_register 1329    __size_of_modbus_response_write_mult_register 0072  
         ??_modbus_response_write_mult_register 002C            ?_modbus_response_write_mult_register 0070  
           _modbus_response_write_mult_register 12B7              __end_of_calc_expect_vout_adc_value 0CD4  
                    _calc_expect_vout_adc_value 0AE0                                __end_of_HexTable 182F  
                          pid_pwm1_idrv_run@t32 003A                                 __initialization 088D  
                                  __end_of_main 0F39                           __size_of_calc_temp_rc 00D9  
                         __size_of_calc_temp_rs 0090                         __end_of_TMR2_Initialize 1C53  
                   ?_INTERRUPT_InterruptManager 0070             modbus_response_illgeal_function@buf 002E  
                      _TMR2_SetInterruptHandler 0FF8                                          ??_main 00DE  
                              ??_calc_rs_lo_avg 007A                     modbus_response_process@rbuf 003D  
                 __size_of_my_flash_system_read 0038                     modbus_response_process@rlen 0038  
                   modbus_response_process@resp 003B                 __end_of_modbus_response_command 0FF8  
                        __end_of_WDT_Initialize 1BFE                    my_flash_system_write@blocNum 0023  
                                        _ADCON0 009D                                          _ADCON1 009E  
                                        _ADCON2 009F                                          _ADRESH 009C  
                                        _ADRESL 009B                                ___awdiv@dividend 0073  
                                        _ANSELA 018C                                          _ANSELC 018E  
               __end_of_modbus_response_process 11A3                                __end_of_adc_init 1C67  
                              ?_PWM1_Initialize 0070                                          _ODCONA 028C  
                                        _ODCONC 028E                                          i1l4541 081E  
                                        i1l4547 0824                                          i1l4557 0831  
                                        i1l4575 085A                                          i1l4559 0836  
                                        i1l4569 0844                                          i1l4577 085E  
                                        i1l4595 0880                                          i1l4587 086C  
                                        i1l4599 0884                                          _FVRCON 0117  
                                        _PMADRH 0192                                          _PMADRL 0191  
                                        _PMDATH 0194                                          _PMDATL 0193  
                                        _PMCON2 0196                       __size_of_FLASH_EraseBlock 001C  
                   __end_of_uart_received_start 1C02                                          _SPBRGH 019C  
                                        _SPBRGL 019B                                          _WDTCON 0097  
                                  _calc_temp_rc 162E                                    _calc_temp_rs 1439  
                               calc_rs_lo_avg@i 002B                                 calc_rs_lo_avg@x 0025  
            __end_of_my_flash_read_system_erase 102A                      _my_flash_read_system_erase 1007  
    modbus_response_write_single_register@pmdbs 0034                                          ___lmul 1DBA  
                                     ??___aldiv 0079                                          ___wmul 1CFD  
                                     ??___awdiv 0075                                       ??___lldiv 0079  
                                     ??___lwdiv 0075                                          _idelta 00C4  
                              ?_PWM2_Initialize 0070                                          _pwm2Ei 00C8  
                              ___awdiv@quotient 0078                        my_flash_system_write@buf 0071  
                      my_flash_system_write@len 0073                        my_flash_system_write@loc 0025  
                                     ??_crc_sum 0075                        __size_of_ADC1_Initialize 0009  
                                        _rxtemp 0067                                 ?_WDT_Initialize 0070  
                               ??_m_mem_cpy_len 0077                my_flash_system_write@GIEBitValue 0022  
                       __end_of_TMR2_StartTimer 1003        TMR2_SetInterruptHandler@InterruptHandler 0071  
               modbus_response_command@tempData 0036        __end_of_modbus_response_illgeal_function 10AB  
     __size_of_modbus_response_illgeal_function 0042              ??_modbus_response_illgeal_function 002D  
             ?_modbus_response_illgeal_function 002C                _modbus_response_illgeal_function 1069  
                                 ?_fvr_set_gain 0070                                  fvr_set_gain@t8 0072  
                             _SYSTEM_Initialize 1CE2                         __end_of__initialization 08E0  
                        __size_of_sys_data_init 00D4                           _my_flash_system_write 13AB  
                            ?_SYSTEM_Initialize 0070                          __size_of_sys_data_save 0036  
                            getRegisterVal@addr 0071                                  __pcstackCOMMON 0070  
                                  __pidataBANK0 1003                                    __pidataBANK1 1C0B  
                           ??_SYSTEM_Initialize 0073                                      _adc_sample 11F9  
        modbus_response_write_single_register@i 0033                                ?_TMR2_Initialize 0070  
                                _OPTION_REGbits 0095        modbus_response_write_single_register@t16 0031  
                             crc_append@message 0026                          getRegisterVal@tempAddr 007A  
                        my_flash_system_write@i 0029                          my_flash_system_write@j 0020  
                        getRegisterVal@tempData 0073                       __end_of_SYSTEM_Initialize 1CFD  
                                ??_fvr_set_gain 0071                                      __pbssBANK0 0047  
                                    __pbssBANK1 00A0                                      __pbssBANK2 0120  
                                    __pbssBANK3 01A0                  modbus_response_command@tmpAddr 002E  
               my_flash_system_read@GIEBitValue 0077                                      adc_init@ch 0072  
                              ??_FVR_Initialize 0071                                      __pmaintext 0E28  
                    modbus_response_command@len 0034                                         ?___lmul 0071  
                                       ?___wmul 0071                                      __pintentry 0804  
                  ??_calc_expect_vout_adc_value 0034                                         _BAUDCON 019F  
                                ___lmul@product 0020                                      _crc_append 1D89  
                                     ?_adc_init 0070                                    adc_sample@ch 0020  
                                 _sys_data_init 155A                                   _sys_data_save 1E20  
                                    _crc_verify 1E56                                   _eusartRxCount 006A  
                   __size_of_get_vout_pwm2_duty 0019                     __size_of_set_vout_pwm2_duty 001C  
                                       _PWM1DCH 0D94                                         _PWM1DCL 0D93  
                                       _PWM2DCH 0DA4                                         _PWM2DCL 0DA3  
                                       _PWM1CON 0D9B                                         _PWM2CON 0DAB  
                                       _PWM1OFH 0D98                                         _PWM1OFL 0D97  
                                       _PWM2OFH 0DA8                                         _PWM1PHH 0D92  
                                       _PWM2OFL 0DA7                                         _PWM1PHL 0D91  
                                       _PWM2PHH 0DA2                                         _PWM2PHL 0DA1  
                                       _PWM1PRH 0D96                                         _PWM1PRL 0D95  
                                       _PWM2PRH 0DA6                                         _PWM2PRL 0DA5  
         modbus_response_illgeal_function@pmdbs 002F                                         _PPSLOCK 0E0F  
                             ??_ADC1_Initialize 0071                                ?_TMR2_StartTimer 0070  
                        set_idrv_pwm1_duty@duty 0077                           __end_of_uart_send_len 1F00  
                              _FLASH_EraseBlock 1D18                          ?_my_flash_system_write 0071  
                       __size_of_getRegisterVal 00F9                     ?_calc_expect_vout_adc_value 0032  
   modbus_response_write_single_register@fiSave 0030                      ??_TMR2_SetInterruptHandler 0073  
                                       ___aldiv 1329                                         ___awdiv 10AB  
                               __size_of___lmul 0032                                         ___lldiv 10FC  
                               __size_of___wmul 001B                              _get_idrv_pwm1_duty 1CB0  
                            _set_idrv_pwm1_duty 1D34                                         ___lwdiv 1DEC  
                                   ?_adc_sample 0074                                  adc_sample@gfvr 0074  
                                ?_sys_data_init 0070                                  ?_sys_data_save 0070  
                                    ??_adc_init 0071                                         __ptext1 1BFE  
                                       __ptext2 155A                                         __ptext3 1E8D  
                                       __ptext4 14C9                                         __ptext5 1D50  
                                       __ptext6 1CC9                                         __ptext7 08E4  
                                       __ptext8 1D34                                         __ptext9 1CB0  
                                       _crc_sum 11A3                                         _pidBbSm 0063  
                                       _iexcept 00C6                             ?_get_idrv_pwm1_duty 0071  
                           ?_set_idrv_pwm1_duty 0077                           _OSCILLATOR_Initialize 0FFE  
                                     _T2CONbits 001C                                      _rsLoAvgBuf 00AC  
                                       _rsLoAvg 0053                                ___aldiv@dividend 0028  
                      ??_PIN_MANAGER_Initialize 0071                                         _txCount 0065  
                                       _sysData 235C                      __size_of_SYSTEM_Initialize 001B  
                                       clrloop0 1C16                            end_of_initialization 08E0  
                                       init_ram 1C21                        ?_modbus_response_command 0070  
                                       initloop 1C22                    __end_of_my_flash_system_read 1EC5  
                          ??_get_idrv_pwm1_duty 0073                            ??_set_idrv_pwm1_duty 0079  
                             _EUSART_Initialize 1C2D                                 ___lldiv@divisor 0071  
                                    _voExpectMv 00CA                                 ___lldiv@counter 0024  
                            ?_EUSART_Initialize 0070                        ?_modbus_response_process 0038  
                                     _RCSTAbits 019D                     ?_my_flash_read_system_erase 0070  
                              ___aldiv@quotient 002E                                       _PWM1LDCON 0D9F  
                                     _PWM2LDCON 0DAF                                       _PWM1OFCON 0DA0  
                                     _PWM2OFCON 0DB0                            __end_of_fvr_set_gain 1C7E  
                                   ?_crc_append 0026                                      _subTickerX 0069  
                           ??_EUSART_Initialize 0071                                ??_WDT_Initialize 0071  
                                   ?_crc_verify 0026                                      crc_sum@crc 0024  
                                    crc_sum@buf 0071                                      crc_sum@len 0073  
                                     _RXPPSbits 0E15                             __size_of_adc_sample 005D  
                     __end_of_EUSART_Initialize 1C40                                    _globalTicker 00D2  
                                     _TXSTAbits 019E                        __size_of_PWM1_Initialize 0019  
                  __size_of_uart_received_start 0004                    _TMR2_DefaultInterruptHandler 0000  
                               ??_sys_data_init 002E                                 ??_sys_data_save 007C  
                                __end_of___lmul 1DEC                                  __end_of___wmul 1D18  
                              _voExpectAdcValue 0055                                  _rtAdcValueRcHi 0059  
                                _rtAdcValueRcLo 005B                                  _rtAdcValueRsHi 005D  
                                _rtAdcValueVoFb 0057                                  _rtAdcValueRsLo 005F  
                        ?_OSCILLATOR_Initialize 0070                               crc_verify@message 0026  
                           start_initialization 088D                        __size_of_PWM2_Initialize 0019  
               __size_of_PIN_MANAGER_Initialize 003F                                   _PWM1LDCONbits 0D9F  
                       my_flash_system_read@buf 0071                         my_flash_system_read@len 0073  
                         __end_of_m_mem_cpy_len 1D89                                   _PWM2LDCONbits 0DAF  
                                _getRegisterVal 1707                         __size_of_calc_rs_lo_avg 0061  
                           __size_of_crc_append 0031                             __size_of_crc_verify 0037  
     modbus_response_write_single_register@rbuf 0035                                        ??___lmul 0079  
                                      ??___wmul 0075                                     __pdataBANK0 006C  
                                   __pdataBANK1 00D4                     FLASH_EraseBlock@GIEBitValue 0073  
                               _ADC1_Initialize 1C02                        __end_of_FLASH_EraseBlock 1D34  
                          _my_flash_system_read 1E8D                                     __pbssBIGRAM 235C  
                             __size_of_adc_init 0014                                     __pbssCOMMON 007C  
                                     ___latbits 0002                               getRegisterVal@t16 0078  
                                 __pcstackBANK0 0020                                   __pcstackBANK1 00DE  
                      __size_of_TMR2_Initialize 0013                         ??_my_flash_system_write 0075  
                        __end_of_getRegisterVal 1800                           my_flash_system_read@i 007A  
                    __size_of_EUSART_Initialize 0013         modbus_response_illgeal_function@errcode 002C  
                         __size_of_fvr_set_gain 0017                                ___lwdiv@dividend 0073  
                        _PIN_MANAGER_Initialize 102A                     modbus_response_command@rbuf 0035  
                                      ?___aldiv 0024                           get_idrv_pwm1_duty@t16 0075  
                                      ?___awdiv 0071                                        ?___lldiv 0071  
                                  ??_adc_sample 0076                                     adc_sample@i 0021  
                                      ?___lwdiv 0071                               ??_PWM1_Initialize 0071  
                  ??_INTERRUPT_InterruptManager 0070                           set_idrv_pwm1_duty@t16 0079  
                                     __pswtext1 1800                                        ?_crc_sum 0071  
                 my_flash_system_read@flashAddr 0078                      __end_of_get_vout_pwm2_duty 1CE2  
                         ?_my_flash_system_read 0071                      __end_of_set_vout_pwm2_duty 1D6C  
                              uart_send_len@buf 007B                                uart_send_len@len 0078  
                                 adc_sample@t16 0025                                ___lwdiv@quotient 0076  
                                 adc_sample@ret 0023                                   adc_sample@num 0075  
                               ?_getRegisterVal 0071                                    _fvr_set_gain 1C67  
                                _eusartRxBuffer 0140                                       _modbusBuf 0120  
                               ___aldiv@divisor 0024                               ??_PWM2_Initialize 0071  
                            __end_of_adc_sample 1256                                 ___aldiv@counter 002C  
                                ___wmul@product 0075                                       _pidpwm2_U 00D8  
                             _pid_pwm1_idrv_run 08E4                                       clear_ram0 1C15  
                                m_mem_cpy_len@d 0071                                  m_mem_cpy_len@s 0073  
                                 ?_calc_temp_rc 0025                                   ?_calc_temp_rs 0025  
                                      _PIE1bits 0091                        __size_of_TMR2_StartTimer 0003  
                        set_vout_pwm2_duty@duty 0077             __size_of_INTERRUPT_InterruptManager 0087  
                            ?_pid_pwm1_idrv_run 0070                         __end_of_ADC1_Initialize 1C0B  
                                      _PIR1bits 0011                                        _PIR3bits 0013  
                     FLASH_EraseBlock@startAddr 0071                                        _PWM1INTE 0D9C  
                                      _PWM1INTF 0D9D                                        _PWM2INTE 0DAC  
                                      _PWM2INTF 0DAD                                        _PWM1TMRH 0D9A  
                                      _PWM1TMRL 0D99                                        _PWM2TMRH 0DAA  
                                      _PWM2TMRL 0DA9                                    ??_crc_append 0077  
              __size_of_modbus_response_command 00BF                             ??_pid_pwm1_idrv_run 0032  
                        __size_of_uart_send_len 003B                                      _ADCON0bits 009D  
                             ___wmul@multiplier 0071                                    ??_crc_verify 0078  
                       __size_of_FVR_Initialize 0004                __size_of_modbus_response_process 0054  
             __size_of_TMR2_SetInterruptHandler 0006                       ?_TMR2_SetInterruptHandler 0071  
                                   _isRunInBoot 0FFF                             _uart_received_start 1BFE  
                             _pid_pwm2_vout_run 14C9                                        _HexTable 181E  
                             ___lmul@multiplier 0071                                crc_verify@crccal 002A  
                                _calc_rs_lo_avg 1256                              ?_pid_pwm2_vout_run 0070  
                     __end_of_pid_pwm1_idrv_run 0AE0                               ??_TMR2_Initialize 0073  
                                ??_calc_temp_rc 0029                                  ??_calc_temp_rs 0029  
                            __end_of_crc_append 1DBA                               calc_rs_lo_avg@t32 0027  
                   __size_of_get_idrv_pwm1_duty 0019                     __size_of_set_idrv_pwm1_duty 001C  
                           ??_pid_pwm2_vout_run 0020                              __end_of_crc_verify 1E8D  
                                  _PWM1INTFbits 0D9D                            ?_uart_received_start 0070  
                                  _PWM2INTFbits 0DAD                         ??_OSCILLATOR_Initialize 0071  
       modbus_response_write_mult_register@rbuf 002F                                __size_of___aldiv 0082  
                              __size_of___awdiv 0051                                __size_of___lldiv 0053  
                              __size_of___lwdiv 0034                          ??_my_flash_system_read 0075  
                                      _adc_init 1C53                                __size_of_crc_sum 0056  
                         pid_pwm2_vout_run@__ei 0022                             _eusartRxIdleTime_ms 007C  
                     __end_of_pid_pwm2_vout_run 155A                                   crc_append@crc 002A  
                              sys_data_init@ret 0034                                 ___lwdiv@divisor 0071  
                               ___lwdiv@counter 0078                                        __ptext10 1CFD  
                                      __ptext11 1DEC                                        __ptext20 1069  
                                      __ptext12 10AB                                        __ptext21 0F39  
                                      __ptext13 114F                                        __ptext30 1256  
                                      __ptext22 1EC5                                        __ptext14 0CD4  
                                      __ptext31 10FC                                        __ptext23 1707  
                                      __ptext15 12B7                                        __ptext40 1C40  
                                      __ptext32 0AE0                                        __ptext24 1D89  
                                      __ptext16 1E20                                        __ptext41 1000  
                                      __ptext33 1DBA                                        __ptext25 1E56  
                                      __ptext17 13AB                                        __ptext42 0FF8  
                                      __ptext34 1329                                        __ptext26 1D6C  
                                      __ptext18 1007                                        __ptext43 1C97  
                                      __ptext35 11F9                                        __ptext27 11A3  
                                      __ptext19 1D18                                        __ptext44 1C7E  
                                      __ptext36 1C67                                        __ptext28 1439  
                                      __ptext45 102A                                        __ptext37 1C53  
                                      __ptext29 162E                                        __ptext46 0FFE  
                                      __ptext38 1CE2                                        __ptext47 1BF6  
                                      __ptext39 1BFA                                        __ptext48 1C2D  
                                      __ptext49 1C02                          __end_of_calc_rs_lo_avg 12B7  
                                 _uart_send_len 1EC5                           get_vout_pwm2_duty@t16 0075  
                                 __size_of_main 0111                                   _subTickerX_1s 0068  
                         set_vout_pwm2_duty@t16 0079                                      _RA4PPSbits 0E94  
                         ??_uart_received_start 0071                                      _RA5PPSbits 0E95  
                                      _txBufLen 0066                                ?_ADC1_Initialize 0070  
                my_flash_system_write@flashAddr 0027                                        int$flags 007E  
                                      crc_sum@i 0022                                        crc_sum@j 0020  
                                    _RC5PPSbits 0EA5   __end_of_modbus_response_write_single_register 0E28  
__size_of_modbus_response_write_single_register 0154         ??_modbus_response_write_single_register 002C  
        ?_modbus_response_write_single_register 0070           _modbus_response_write_single_register 0CD4  
                             ??_TMR2_StartTimer 0071              __end_of_INTERRUPT_InterruptManager 088B  
                    _INTERRUPT_InterruptManager 0804                           __end_of_sys_data_init 162E  
                         __end_of_sys_data_save 1E56                               ?_FLASH_EraseBlock 0071  
                 calc_expect_vout_adc_value@t32 0042                     PIN_MANAGER_Initialize@state 0071  
                      modbus_response_command@i 0032                              ??_FLASH_EraseBlock 0073  
                                    _INTCONbits 000B                                     _PWM1CONbits 0D9B  
                              m_mem_cpy_len@len 0075                                      _FVRCONbits 0117  
                                   _PWM2CONbits 0DAB                                 ?_calc_rs_lo_avg 0025  
                  modbus_response_process@pmdbs 003C                         __size_of_WDT_Initialize 0004  
                                ?_uart_send_len 0078                                        intlevel1 0000  
                __size_of_my_flash_system_write 008E                            pid_pwm2_vout_run@t16 0024  
                 __end_of_my_flash_system_write 1439                      __size_of_pid_pwm1_idrv_run 01FC  
                                    _PMCON1bits 0195                                ___lldiv@dividend 0075  
                       ?_PIN_MANAGER_Initialize 0070    modbus_response_write_mult_register@startAddr 002D  
                                   _PPSLOCKbits 0E0F                                 _PWM1_Initialize 1C7E  
                  modbus_response_command@pmdbs 0033                         _modbus_response_command 0F39  
                                    _PWM1CLKCON 0D9E                                      _PWM2CLKCON 0DAE  
                        __size_of_m_mem_cpy_len 001D                                   __pstringtext1 181E  
                                _FVR_Initialize 1BF6                         _modbus_response_process 114F  
                                sys_data_init@i 0036                                     crc_append@n 0028  
                          __end_of_calc_temp_rc 1707                            __end_of_calc_temp_rs 14C9  
                              ___lldiv@quotient 0020                                ??_getRegisterVal 0074  
                               _PWM2_Initialize 1C97                      __size_of_pid_pwm2_vout_run 0091  
                                  ___aldiv@sign 002D                     calc_expect_vout_adc_value@i 0046  
                   calc_expect_vout_adc_value@x 0032             __size_of_calc_expect_vout_adc_value 01F4  
                __end_of_PIN_MANAGER_Initialize 1069                              _get_vout_pwm2_duty 1CC9  
                            _set_vout_pwm2_duty 1D50                           _TMR2_InterruptHandler 0061  
                                   crc_verify@n 0028                             ?_get_vout_pwm2_duty 0071  
                           ?_set_vout_pwm2_duty 0077  
